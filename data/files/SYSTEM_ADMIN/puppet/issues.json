[{"title":"Non-literal class parameter types should be deprecated not a warning","body":"## Describe the Bug\r\n\r\nThe [`rake syntax`](https:\/\/github.com\/voxpupuli\/puppet-syntax\/blob\/2c1b8fabd7f384a5cc01255a8c411c665b61704d\/lib\/puppet-syntax\/tasks\/puppet-syntax.rb#L36) task fails when using puppet 7.29.1 or 8.5.1 with non-literal class parameter types. This is because puppet reports the issue as `warning` (in 7.29.1) and `error` (in 8.5.1).\r\n\r\nAdditionally the message `not a Puppet::Pops::Model::AccessExpression` is not helpful.\r\n\r\n## Expected Behavior\r\n\r\nIt should be possible to detect and report on non-literal class parameter types without causing `rake syntax` to fail. The error message should also use the `LabelProvider` to print a meaningful message like:\r\n\r\n> The parameter '$i' must be a literal type, not a '*' expression (line: 1, column: 18) \r\n\r\n## Steps to Reproduce\r\n\r\nGiven a manifest whose class parameter contains an arithmetic expression:\r\n\r\n```puppet\r\nclass foo(Integer[0, 2*2] $i = 0) {}\r\ninclude foo\r\n```\r\n\r\nIn 7.29.1, a warning is generated:\r\n\r\n```\r\n$ bundle exec puppet parser validate classes.pp\r\nWarning: The parameter '$i' must be a literal type, not a Puppet::Pops::Model::AccessExpression (file: \/home\/josh\/work\/puppet\/classes.pp, line: 1, column: 27)\r\n$ echo $?\r\n0\r\n```\r\n\r\nIn 8.5.1, an error is generated:\r\n\r\n```\r\n$ bundle exec puppet parser validate classes.pp\r\nError: Could not parse for environment production: The parameter '$i' must be a literal type, not a Puppet::Pops::Model::AccessExpression (file: \/home\/josh\/work\/puppet\/classes.pp, line: 1, column: 27)\r\n$ echo $?\r\n1\r\n```\r\n\r\nThe `puppet parser valdiate` command is called by the `syntax` rake task and any warnings or greater cause the task to fail in both 7.29.1 and 8.5.1. The `syntax` task is also called by [`rake validate` in puppetlabs_spec_helper](https:\/\/github.com\/puppetlabs\/puppetlabs_spec_helper\/blob\/7863f3f7595fce04d98c8f50a4cdf7a6fbfc1cdf\/lib\/puppetlabs_spec_helper\/rake_tasks.rb#L198).\r\n\r\n## Environment\r\n - Version 7.29.1, 8.5.1\r\n\r\n## Additional Context\r\n\r\nSee https:\/\/github.com\/puppetlabs\/puppet\/pull\/9269","comments":["Migrated issue to [PUP-12026](https:\/\/perforce.atlassian.net\/browse\/PUP-12026)"],"labels":["triaged","bug"]},{"title":"Package type should support environment variables","body":"I will just link to the JIRA ticket as this is now a (almost) 10 years old feature request which I'm just mirroring over to the new Github issue tracking process.\r\n\r\nhttps:\/\/puppet.atlassian.net\/browse\/PUP-1526","comments":["Been dying to see this one implemented for soo looong.","The original request was to support situations like:\r\n\r\n```\r\n# This is needed for removing the sudo package since it won't uninstall\r\n# when there is no root password set or $SUDO_FORCE_REMOVE != yes\r\nexec { '\/usr\/bin\/apt-get --force-yes --assume-yes install sudo-ldap':\r\n    environment => 'SUDO_FORCE_REMOVE=yes',\r\n    unless      => '\/usr\/bin\/dpkg -l sudo-ldap|tail -1|grep \"^ii\"'\r\n}\r\n```\r\n\r\nAn earlier attempt was made in https:\/\/github.com\/puppetlabs\/puppet\/pull\/4928, but that was closed due to inactivity.\r\n\r\nTo add this capability, an `environment` parameter needs to be added to `Puppet::Type::Package`, similar to how this is done for `Puppet::Type::Exec`\r\n\r\nhttps:\/\/github.com\/puppetlabs\/puppet\/blob\/57a00cc5c5a09469e95945c248ed9ccd2117a01e\/lib\/puppet\/type\/exec.rb#L300\r\n\r\nIf an `environment` parameter is specified on a package resource, then the package providers should pass the parameter into the `Puppet::Util::Execution.execute` method as a `custom_environment`\r\n\r\nhttps:\/\/github.com\/puppetlabs\/puppet\/blob\/57a00cc5c5a09469e95945c248ed9ccd2117a01e\/lib\/puppet\/util\/execution.rb#L149\r\n\r\nSimilarly for calls to `execpipe` like https:\/\/github.com\/puppetlabs\/puppet\/blob\/57a00cc5c5a09469e95945c248ed9ccd2117a01e\/lib\/puppet\/provider\/package\/dpkg.rb#L24\r\n\r\nWe also need to account for the `has_command` DSL method, which providers use to resolve commands like:\r\n\r\nhttps:\/\/github.com\/puppetlabs\/puppet\/blob\/57a00cc5c5a09469e95945c248ed9ccd2117a01e\/lib\/puppet\/provider\/package\/yum.rb#L25\r\n\r\nI started hacking on this here https:\/\/github.com\/puppetlabs\/puppet\/compare\/main...joshcooper:puppet:package_environment?expand=1","Do you estimate this will be released in the next minor puppet release?","> Do you estimate this will be released in the next minor puppet release?\r\n\r\nSorry no, no idea. The branch above is just to explore different options and see how this might be implemented."],"labels":["enhancement","accepted"]},{"title":"Provide an option to disable catalog messages","body":"## Use Case\r\nWe recently added \"notice\" level messages specifying the server that the agent is requesting a catalog from and the server that actually handled the request, e.g. `Notice: Requesting catalog from puppet.example.com:8140.` See https:\/\/github.com\/puppetlabs\/puppet\/pull\/9126\r\n\r\nAs described in https:\/\/github.com\/puppetlabs\/puppet\/issues\/9223, the agent may hang for 2 minutes trying to resolve the DNS name into an IPv6 address. Other users have reported not wanting these messages to be printed (or at least not at the `Notice` level).\r\n\r\n## Describe the Solution You Would Like\r\n\r\nAdd a boolean puppet setting to allow the DNS resolution to be disabled. It should be enabled by default.\r\n\r\n## Describe Alternatives You've Considered\r\n\r\nCreating an enum to allow the behavior to be disabled or logged at a different verbosity level.\r\n\r\n## Additional Context\r\n\r\nhttps:\/\/puppetcommunity.slack.com\/archives\/C0W298S9G\/p1706879255760149\r\nhttps:\/\/puppetcommunity.slack.com\/archives\/C0W298S9G\/p1705964713457719\r\n\r\n","comments":["Migrated issue to [PUP-12023](https:\/\/perforce.atlassian.net\/browse\/PUP-12023)"],"labels":["triaged","enhancement"]},{"title":"Improve error handling when catalog contains binary data","body":"## Describe the Bug\r\n\r\nIf you accidentally include binary data in the catalog, then the problem is difficult to troubleshoot as the error doesn't specify which environment\/module\/resource\/parameter is causing the issue.\r\n\r\nPuppetserver 8 will fail compilation and its log will contain:\r\n\r\n```\r\n2024-02-14T20:26:59.001Z ERROR [qtp1784649573-50] [puppetserver] Puppet Server Error: Failed to serialize Puppet::Resource::Catalog for 'XXX': Could not render to Puppet::Network::Format[rich_data_json]: source sequence is illegal\/malformed utf-8\r\n```\r\nwhich is surfaced on the agent as:\r\n\r\n```\r\nError: Could not retrieve catalog from remote server: Error 500 on SERVER: Server Error: Failed to serialize ...\r\n```\r\n\r\nIn puppet7, puppetserver will silently downgrade to PSON (though this can be disabled with `allow_pson_serialization` setting). The agent will deserialize the catalog as PSON, and then report a warning when trying to cache the catalog as JSON:\r\n\r\n```\r\n# puppet agent -t\r\n...\r\nInfo: Unable to serialize catalog to json, retrying with pson. PSON is deprecated and will be removed in a future release\r\n```\r\n\r\nThere are two variations to this problem. First, the string needs to be UTF-8 encoded, so `String#encoding` should return `UTF-8` and not `ASCII_8BIT` (aka `BINARY`). Second, the string needs to be valid UTF-8, so `String.valid_encoding?` must be true. The latter case, can easily occur when using the `file` function instead of `binary_file`.\r\n\r\n## Expected Behavior\r\n\r\nIf binary data is accidentally introduced into the catalog and is not wrapped in `Binary`, as can occur when using the `file` function, then the compilation should fail indicating which resource caused the issue.\r\n\r\n## Steps to Reproduce\r\nSteps to reproduce the behavior:\r\n\r\n1. On puppetserver, run this script:\r\n\r\n```ruby\r\nbinary_content = \"\\xC0\\xFF\".force_encoding('binary')\r\nFile.binwrite('\/tmp\/src.bin', binary_content)\r\n```\r\n\r\n2. Create site.pp\r\n\r\n```\r\n# cat <<END > \/etc\/puppetlabs\/code\/environments\/production\/manifests\/site.pp\r\nfile { '\/tmp\/dst.bin':\r\n  ensure => file,\r\n  content => file('\/tmp\/src.bin'),\r\n}\r\nEND\r\n```\r\n\r\n3. Run the local agent, it will fail as described above depending on the agent and server versions.\r\n\r\n\r\n## Environment\r\n - Puppet7 and 8\r\n\r\n\r\n## Additional Context\r\n\r\nhttps:\/\/github.com\/puppetlabs\/puppet\/pull\/9102\r\nhttps:\/\/puppet.atlassian.net\/browse\/PUP-10096\r\nhttps:\/\/puppetcommunity.slack.com\/archives\/C0W298S9G\/p1707246678595899","comments":[],"labels":["bug","accepted"]},{"title":"Thread conflict in Puppet::Pops::Loaders","body":"## Describe the Bug\r\nWe observe the following error across ~5% of all Puppet agent runs in our organization against our Puppet 7.x masters when we set `multithreaded: true`, with any value for `max-active-instances` (even `2`):\r\n\r\n```\r\nERROR [qtp735649759-289] [puppetserver] Puppet Server Error: Evaluation Error: Error while evaluating a Type-Name, Internal Error: Attempt to redefine loader named '<foo> private' (file: \/path\/to\/our\/modules\/foo\/manifests\/init.pp, line: 12, column: 18) on node clientnode.example.com\r\n```\r\n\r\nThe error disappears if we disable threading, or if we hand-insert thread synchronization into the offending method or its caller. It is not consistent to any particular client node, and nodes on which agent runs throw the error will work fine the other ~95% of the time.\r\n\r\nThe source of the error, `add_loader_by_name` in `puppet\/lib\/ruby\/vendor_ruby\/puppet\/pops\/loaders.rb`, is fairly straightforward, adding a new key to an instance variable and throwing the error we observe if the key is already present:\r\n\r\n```\r\n  def add_loader_by_name(loader)\r\n    name = loader.loader_name\r\n    if @loaders_by_name.include?(name)\r\n      raise Puppet::ParseError, _(\"Internal Error: Attempt to redefine loader named '%{name}'\") % { name: name }\r\n    end\r\n    @loaders_by_name[name] = loader\r\n  end\r\n```\r\n\r\nInterestingly, adding `Puppet.info` or `Puppet.warn` output **before** the `if` statement, to debug the call stack and thread state, causes the issue to disappear. I'd theorize that whatever output synchronization the logging system uses adds sort of back-door thread safety. Adding logging **inside** the `if` statement doesn't do this, which makes sense.\r\n\r\nThe calling method in all instances of this error we've logged to date has been `[]`. If we add na\u00efve Ruby-native synchronization to that method as below, our problem disappears:\r\n\r\n```\r\n  def [](loader_name)\r\n    loader = @loaders_by_name[loader_name]\r\n    if loader.nil?\r\n      # Unable to find the module private loader. Try resolving the module\r\n      @my_semaphore.synchronize {\r\n        loader = private_loader_for_module(loader_name[0..-9]) if loader_name.end_with?(' private')\r\n        raise Puppet::ParseError, _(\"Unable to find loader named '%{loader_name}'\") % { loader_name: loader_name } if loader.nil?\r\n      }\r\n    end\r\n    loader\r\n  end\r\n```\r\n\r\nThat's presumably not a correct-for-this-codebase fix by itself, but does point in the general direction of \"it's threads stepping on each other, add a sempahore somewhere.\"\r\n\r\n## Environment\r\n - Puppet Server 7.x (various, up to and including 7.15.0)\r\n - CentOS 7.9.2009, AlmaLinux 8.9\r\n - Sanitized [puppet.conf](https:\/\/github.com\/puppetlabs\/puppet\/files\/14240978\/puppet.conf.txt) and [puppetserver.conf](https:\/\/github.com\/puppetlabs\/puppet\/files\/14240979\/puppetserver.conf.txt) attached\r\n\r\n## Additional Context\r\n\r\nIt's not clear why our ecosystem in particular triggers this issue. While we're a medium-large organization, our Puppet masters are spread around to various regional collections of nodes. The one on which we did the above debugging manages only about a dozen nodes. The issue manifests on all of them.\r\n\r\nOur module ecosystem is old growth forest, with a lot of interwoven dependency. It's possible that the trigger here is multiple references to the same dependent object being resolved in parallel.\r\n\r\nIt's of note that we have a number of modules with names of the form `*_private` (in a search path distinct from our \"main\" module repo). But this seems to occur with any module and does not occur with threading disabled, so is unlikely to be some kind of namespace collision.","comments":["This was originally reported in https:\/\/puppet.atlassian.net\/browse\/PUP-11324. That issue tracker is now read-only, so please continue discussion here.\r\n\r\n","Thanks for letting us know @jstange We currently use the environment object to protect against concurrent access, such as https:\/\/github.com\/puppetlabs\/puppet\/blob\/b04e822d8b4e5bf3caa29d20d19777dbff43fa8b\/lib\/puppet\/pops\/loaders.rb#L28 I think you'd want to do something similar for each of the `Loaders` instance methods that mutate state, like:\r\n\r\n```ruby\r\n def [](loader_name)\r\n   environment.lock.synchronize do\r\n      loader = @loaders_by_name[loader_name]\r\n      if loader.nil?\r\n        # Unable to find the module private loader. Try resolving the module\r\n        loader = private_loader_for_module(loader_name[0..-9]) if loader_name.end_with?(' private')\r\n        raise Puppet::ParseError, _(\"Unable to find loader named '%{loader_name}'\") % { loader_name: loader_name } if loader.nil?\r\n    end\r\n    loader\r\nend\r\n```\r\n\r\nAlternatively you could only lock when `loader.nil?`, but I think you need to relookup again inside the lock (double-checked lock)\r\n\r\n```ruby\r\ndef [](loader_name)\r\n  loader = @loaders_by_name[loader_name]\r\n  if loader.nil?\r\n    environment.lock.synchronize do\r\n     if loader.nil?\r\n       ...\r\n```\r\n\r\nWe don't have any immediate plans for working on this, but we welcome pull requests. I'll put the `help wanted` label on for now.","After some poking I might have some vague idea how threading works in here. Seems like it's JRuby-specific, and in the case I care about it's probably instances of `Puppet::Util::Autoload` that are competing to touch things in parallel.\r\n\r\n`[]` probably isn't the only method that needs a thread seatbelt put on it, but I don't want to blindly add stuff and create potential deadlock conditions. \r\n\r\nI'll spend some time with my stack traces and see if there's anywhere else that looks thread-dangerous and deadlock-safe, wrap those in `environment.lock.synchronize`, and submit a PR of it. Someone who knows what they're doing will have to review- my guesswork about threading in here may be wildly off base."],"labels":["bug","help wanted"]},{"title":"Package provider \"pip\" not fully functional with network urls on Ubuntu 22.04","body":"## Describe the Bug\r\nThe `package` provider \"pip\" does not handle correctly the installation of python modules via network urls (e.g. \"git+https:\/\/github.com\/\") on Ubuntu 22.04: this is because on newer `pip` versions the output of `pip freeze --all` (which is used by puppet to test if a python module is already installed) is generated in an unexpected format:\r\n\r\nhttps:\/\/github.com\/puppetlabs\/puppet\/blob\/f9bcd090c28c24d083f77ff0a0723e6d68115466\/lib\/puppet\/provider\/package\/pip.rb#L102-L108\r\n\r\n```shell\r\nroot@831e7bc5baed:\/# lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 22.04 LTS\r\nRelease:\t22.04\r\nCodename:\tjammy\r\nroot@831e7bc5baed:\/# pip --version\r\npip 22.0.2 from \/usr\/lib\/python3\/dist-packages\/pip (python 3.10)\r\nroot@831e7bc5baed:\/# pip freeze --all | grep -i ^vSphere-Automation-SDK\r\nvsphere-automation-sdk @ git+https:\/\/github.com\/vmware\/vsphere-automation-sdk-python.git@199b26f1d523023927c172afa6f5b2ebb85dd8f9\r\nroot@831e7bc5baed:\/# \r\n```\r\n\r\n On Ubuntu 20.04 this issue does not happen:\r\n\r\n```shell\r\nroot@70b080cc5203:\/# lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 20.04.6 LTS\r\nRelease:\t20.04\r\nCodename:\tfocal\r\nroot@70b080cc5203:\/# pip --version\r\npip 20.0.2 from \/usr\/lib\/python3\/dist-packages\/pip (python 3.8)\r\nroot@70b080cc5203:\/# pip freeze --all | grep -i ^vSphere-Automation-SDK\r\nvsphere-automation-sdk==1.86.0\r\nroot@70b080cc5203:\/# \r\n```\r\n\r\n## Expected Behavior\r\n`puppet apply` should skip installing the python module when run a second time since it's already installed\r\n\r\n## Steps to Reproduce\r\nFrom an empty Docker container, image `ubuntu:22.04`:\r\n```shell\r\n# install puppet\r\napt update\r\napt install --yes lsb-release wget python3-pip git\r\nwget https:\/\/apt.puppetlabs.com\/puppet8-release-$(lsb_release -sc).deb\r\ndpkg -i puppet8-release-$(lsb_release -sc).deb\r\napt update\r\napt install --yes puppet-agent\r\n\r\n# apply manifest\r\ncat > pip_freeze_issue.pp <<'EOF'\r\npackage { 'vSphere-Automation-SDK':\r\n  ensure   => 'present',\r\n  provider => 'pip',\r\n  source   => 'git+https:\/\/github.com\/vmware\/vsphere-automation-sdk-python.git'\r\n}\r\nEOF\r\n\/opt\/puppetlabs\/bin\/puppet apply pip_freeze_issue.pp\r\n\r\n# check python module\r\npip freeze --all | grep -i ^vSphere-Automation-SDK\r\npip list --format=freeze | grep -i ^vSphere-Automation-SDK\r\n\r\n# apply a second time, should not install the python module again\r\n\/opt\/puppetlabs\/bin\/puppet apply pip_freeze_issue.pp\r\n```\r\n\r\n## Environment\r\n```shell\r\nroot@831e7bc5baed:\/# \/opt\/puppetlabs\/bin\/puppet agent --version\r\n8.4.0\r\nroot@831e7bc5baed:\/# lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 22.04 LTS\r\nRelease:\t22.04\r\nCodename:\tjammy\r\nroot@831e7bc5baed:\/# \r\n```\r\n\r\n## Additional Context\r\nThe package provider for \"pip\" should use `pip list --format=freeze` instead of `pip freeze --all`, when supported (sorry i don't know the exact version)\r\n","comments":["This should be fixed in https:\/\/github.com\/puppetlabs\/puppet\/pull\/9280","Migrated issue to [PUP-12027](https:\/\/perforce.atlassian.net\/browse\/PUP-12027)"],"labels":["triaged","bug"]},{"title":"Private key and client certificate warning messages on a Masterless Puppet Environment","body":"## Describe the Bug\r\nOn a Masterless Puppet Environment using the last version of puppet-agent, we get two warning messages about the fact that there is no private key or certificate, what is expected in this environment. \r\nThe `puppet-agent-7.16.0-1.el9.x86_64` is the most recent version that does not show the warning, from version `puppet-agent-7.17.0-1.el9.x86_64` the warnings are displayed.\r\nCan you please take a look?\r\n\r\n## Expected Behavior\r\nNo warning messages on a Masterless Puppet Environment.\r\n\r\n## Steps to Reproduce\r\nIt's a bug with the file resource https:\/\/www.puppet.com\/docs\/puppet\/5.5\/types\/file.html\r\n\r\n```\r\n# mkdir -p testing\/filebug\/manifests\r\n# vi testing\/filebug\/manifests\/init.pp\r\n# cat testing\/filebug\/manifests\/init.pp \r\nclass filebug {\r\n\r\n  $test_file = 'https:\/\/link.testfile.org\/PDF10MB'\r\n\r\n  file { '\/tmp\/test_file':\r\n    ensure  => 'file',\r\n    source  => $test_file,\r\n  }\r\n}\r\n# puppet apply --modulepath=\/root\/testing -e \"include filebug\" \r\nNotice: Compiled catalog for testhost.cern.ch in environment production in 0.01 seconds\r\nWarning: Private key for \u2018testhost.cern.ch' does not exist\r\nWarning: Client certificate for \u2018testhost.cern.ch' does not exist\r\nNotice: \/Stage[main]\/Filebug\/File[\/tmp\/test_file]\/ensure: defined content as '{mtime}2022-10-08 01:39:09 UTC'\r\nNotice: Applied catalog in 4.88 seconds\r\n# rpm -qa puppet-agent\r\npuppet-agent-7.28.0-1.el9.x86_64\r\n```\r\n\r\n\r\n## Environment\r\n - puppet-agent-7.28.0-1.el9.x86_64\r\n - RHEL8\/9 and AlmaLinux8\/9\r\n","comments":["The agent assumes its private key and client cert are available so that it can use them to establish a mTLS connection to the `source`. It should be more defensive in case we're running in masterless and don't have a client cert. There's a related but different issue https:\/\/puppet.atlassian.net\/browse\/PUP-11331"],"labels":["bug"]},{"title":"Misleading warning when fact values limit is exceeded","body":"## Describe the Bug\r\n\r\nPuppet agents print a warning if the number of fact **values** exceeds its soft limit:\r\n\r\n```Warning: The current total number of facts: 5787 exceeds the number of facts limit: 2048```\r\n\r\nHowever, the wording \"total number of facts\" is confusing, because it sounds like it's the number of facts, when really the problem is the number of values that the facts are producing, due to nested arrays and hashes like the `_puppet_inventory_1` fact in PE.\r\n\r\n## Expected Behavior\r\n\r\nThe message should say something like\r\n\r\n```The total number of fact values X exceeds the fact values limit Y```\r\n\r\nSee https:\/\/puppetcommunity.slack.com\/archives\/CFD8Z9A4T\/p1705430272043379?thread_ts=1705428680.188929&cid=CFD8Z9A4T\r\n\r\nThe documentation for the [`number_of_facts_soft_limit`](https:\/\/github.com\/puppetlabs\/puppet\/blob\/3192f4aab419b221402f738ed1be90de0d969be5\/lib\/puppet\/defaults.rb#L1805-L1808C58) should be updated so its clear we're counting the leaves of structured facts.\r\n\r\n## Steps to Reproduce\r\nSteps to reproduce the behavior:\r\n\r\n```\r\n# cat <<END > \/opt\/puppetlabs\/facter\/facts.d\/many.rb \r\n#!\/opt\/puppetlabs\/puppet\/bin\/ruby\r\nrequire 'json'\r\nputs JSON.dump(\"many\" => [*1..3000])\r\nEND\r\n# puppet agent -t\r\n\/opt\/puppetlabs\/puppet\/bin\/puppet agent -t\r\nInfo: Using environment 'production'\r\nInfo: Retrieving pluginfacts\r\nInfo: Retrieving plugin\r\nWarning: The current total number of facts: 3323 exceeds the number of facts limit: 2048\r\n```\r\n\r\n## Environment\r\n - Version 8.4.0 and 7.28.0\r\n\r\n## Additional Context\r\n\r\nThis behavior is occurring because we corrected how fact values are counted, see https:\/\/github.com\/puppetlabs\/puppet\/commit\/f33de2438890c46c266c96155250260e411a4d34","comments":[],"labels":["bug","help wanted"]},{"title":"Long delay when printing catalog server in Puppet 7.28.0 on IPv6-only clients","body":"## Describe the Bug\r\n\r\nWhen running Puppet agent 7.28 interactively (e.g. `puppet agent --test --noop`) on a host with an IPv6 address but without an IPv4 address, the run consistently hangs for over two minutes after printing `Info: Loading facts` and before printing `Notice: Requesting catalog from puppet.example.com:8140`.\r\n\r\nWhen running on a dual stack host with both IPv4 and IPv6 addresses, there is no pause and the `Notice` includes an IPv4 address in parentheses: `Notice: Requesting catalog from puppet.example.com:8140 (10.0.0.1)`.\r\n\r\n## Expected Behavior\r\nThere should be no delay when running Puppet on hosts with only an IPv6 address.\r\n\r\n## Steps to Reproduce\r\nOn an IPv6 only host that uses a Puppet server with both IPv4 and IPv6 addresses, run `puppet agent --test --noop`.\r\n\r\n## Environment\r\n - Version 7.28.0\r\n - Platform Debian Bullseye\r\n\r\n## Additional Context\r\nThe Puppet server is dual stack with routable IPv4 and IPv6 addresses. These are in DNS and can be resolved from the client system using the system resolver as normal.\r\n\r\nThis delay was not present in previous versions of Puppet. Reverting Puppet agent to 7.27.0 resolves the problem.\r\n\r\nLooking at [puppetlabs\/puppet#9126](https:\/\/github.com\/puppetlabs\/puppet\/pull\/9126), it appears that [the lookup using\u00a0`Resolv.getaddress`](https:\/\/github.com\/puppetlabs\/puppet\/pull\/9126\/files#diff-7137e229af0fe05ca6b5d85eacb04c666fc8ab11329c32b8b888e9ddbba753c1R18)is causing the delay.\r\n\r\nPlease note that all hostnames and IP addresses have been redacted and replaced in the examples below, but otherwise they are reproduced exactly as we ran them.\r\n\r\nUsing Ruby 2.7.8 on a dual stack host:\r\n```\r\n$ ruby --version; time ruby -r resolv -e 'puts Resolv.getaddress(\"puppet.example.com\")'\r\nruby 2.7.8p225 (2023-03-30 revision 1f4d455848) [x86_64-linux]\r\n10.0.0.1\r\n\r\nreal\t0m0.162s\r\nuser\t0m0.137s\r\nsys\t0m0.024s\r\n```\r\nUsing Ruby 2.7.8 on an IPv6 only host:\r\n```\r\n$ ruby --version; time ruby -r resolv -e 'puts Resolv.getaddress(\"puppet.example.com\")'\r\nruby 2.7.8p225 (2023-03-30 revision 1f4d455848) [x86_64-linux]\r\nTraceback (most recent call last):\r\n\t2: from -e:1:in `<main>'\r\n\t1: from \/opt\/rbenv\/versions\/2.7.8\/lib\/ruby\/2.7.0\/resolv.rb:44:in `getaddress'\r\n\/opt\/rbenv\/versions\/2.7.8\/lib\/ruby\/2.7.0\/resolv.rb:94:in `getaddress': no address for puppet.example.com (Resolv::ResolvError)\r\n\r\nreal\t2m40.428s\r\nuser\t0m0.182s\r\nsys\t0m0.056s\r\n```\r\nUsing Ruby 3.2.2 on an IPv6 only host _does_ return a result, but it's an IPv4 address which is arguably not what you would expect, so I suspect this issue is less visible in Puppet 8.x but may represent a related but slightly different bug:\r\n```\r\n$ ruby --version; time ruby -r resolv -e 'puts Resolv.getaddress(\"puppet.example.com\")'\r\nruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]\r\n10.0.0.1\r\n\r\nreal\t0m0.191s\r\nuser\t0m0.152s\r\nsys\t0m0.039s\r\n```\r\nNoting that if you use the [`Resolv` gem](https:\/\/stdgems.org\/resolv\/) under Ruby 2.7.8 rather than the builtin, this works as per 3.2.2 which would seem to be what you'd expect:\r\n```\r\n$ cat Gemfile; ruby --version; time ruby -r 'bundler\/setup' -r resolv -e 'puts Resolv.getaddress(\"puppet.example.com\")'\r\nsource \"https:\/\/rubygems.org\"\r\ngem \"resolv\", \"0.3.0\"\r\nruby 2.7.8p225 (2023-03-30 revision 1f4d455848) [x86_64-linux]\r\n10.0.0.1\r\n\r\nreal\t0m0.328s\r\nuser\t0m0.296s\r\nsys\t0m0.031s\r\n```\r\n","comments":["Thanks for letting us know @sagepe. Are you able to provide the steps you used to disable IPv4 on a dual stack machine so we can try to reproduce this? Also the output of `facter networking` would be helpful.","> Are you able to provide the steps you used to disable IPv4 on a dual stack machine so we can try to reproduce this?\r\n\r\nI just provision one in our infra, so I don't manually make the changes. It's a bit tricky to provide definitive instructions as it will of course vary depending on how the server instances are provisioned, the OS family, etc.\r\n\r\nOur IPv6 only systems do have an IPv4 loopback, but no IPv4 address on their public interfaces. They have an IPv6 loopback address, a single global public IPv6 address and a link-local IPv6 address - see the facter output; I've redacted the actual addresses and hostnames:\r\n\r\n[ipv6only.networking.facts.txt](https:\/\/github.com\/puppetlabs\/puppet\/files\/14138273\/ipv6only.networking.facts.txt)\r\n\r\nIf you're starting point is a dual stack system with both IPv4 and IPv6 addresses, you may be able to replicate it with a `\/etc\/network\/interfaces` file that looks something like the below; you'll also need to ensure that you have functioning IPv6 DNS resolvers configured in `\/etc\/resolv.conf` and no automation that will attempt to override\/revert things (including a DHCP service or systemd of any of the other things that might think it knows better).\r\n\r\n```\r\nauto lo\r\niface lo inet loopback\r\n\r\nauto eth0\r\niface eth0 inet6 static\r\n    address <YOUR IPv6 address>\r\n```\r\n","Migrated issue to [PUP-12022](https:\/\/perforce.atlassian.net\/browse\/PUP-12022)"],"labels":["triaged","bug"]},{"title":"Environment names can't contain only integer","body":"## Describe the Bug\r\nUsing an environment name composed only of numeric characters makes the catalog compilation fail.\r\nThe [puppet documentation](https:\/\/www.puppet.com\/docs\/puppet\/8\/lang_reserved.html#lang_acceptable_char-environment-names) explains that environment names can contain lowercase letters, numbers and underscores. It does not prohibit the use of numeric characters only.\r\n\r\nWhen using an environment like `42`, we get ruby stacktrace like this one:\r\n\r\n```syslog\r\n2024-01-23T11:02:48.938+01:00 ERROR [qtp472974372-11877] [puppetserver] Puppet Server Error: undefined method `match' for 42:Integer\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/node\/environment.rb:127:in `valid_name?'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/network\/http\/api\/indirected_routes.rb:90:in `uri2indirection'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/network\/http\/api\/indirected_routes.rb:35:in `call'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/network\/http\/api\/server\/v3.rb:17:in `block in wrap'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/network\/http\/route.rb:82:in `block in process'\r\norg\/jruby\/RubyArray.java:1865:in `each'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/network\/http\/route.rb:81:in `process'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/network\/http\/route.rb:88:in `process'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/network\/http\/route.rb:88:in `process'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/network\/http\/handler.rb:86:in `block in process'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/network\/http\/handler.rb:69:in `block in with_request_profiling'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/util\/profiler\/around_profiler.rb:58:in `profile'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/util\/profiler.rb:51:in `profile'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/network\/http\/handler.rb:65:in `with_request_profiling'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/network\/http\/handler.rb:85:in `block in process'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/network\/http\/handler.rb:92:in `respond_to_errors'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/network\/http\/handler.rb:84:in `process'\r\nuri:classloader:\/puppetserver-lib\/puppet\/server\/master.rb:69:in `block in handleRequest'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet\/context.rb:62:in `override'\r\n\/opt\/puppetlabs\/puppet\/lib\/ruby\/vendor_ruby\/puppet.rb:289:in `override'\r\nuri:classloader:\/puppetserver-lib\/puppet\/server\/master.rb:68:in `handleRequest'\r\n```\r\n \r\n \r\n## Expected Behavior\r\nAn environment name composed only of numeric characters should be valid.\r\n\r\n## Steps to Reproduce\r\nSteps to reproduce the behavior:\r\n1. Create a puppet environment with only numeric characters (eg.: 42)\r\n2. run `puppet agent -t --environment 42`\r\n3. get the error described above on the puppetserver.\r\n\r\n## Environment\r\n - puppetserver Version 7.14.0-1buster\r\n - Platform Debian buster\r\n\r\n## Additional Context\r\nWe are deploying environments from a Gitlab repository with r10k.\r\n[GitLab uses the default pattern `%{id}-%{title}` when creating a branch from an issue](https:\/\/docs.gitlab.com\/ee\/user\/project\/repository\/branches\/#configure-default-pattern-for-branch-names-from-issues).\r\nIf we want keep branch names equals to environment names (i.e. without hyphens), the easy solution is to replace the pattern with `%{id}` only. Otherwise the spaces and special characters in `%{title}` xould be converted to hyphens.\r\n\r\nUsing this workflows, we end up with some numeric only branches\/puppet environments. \r\n\r\nAccording to puppet documentation, this shouldn't have been a problem.\r\n\r\nA pull-request to fix this in on the way.","comments":[],"labels":["bug"]},{"title":"puppet doesn't run with Ruby 3.3.0","body":"## Describe the Bug\r\n\r\nRuby 3.3.0 was released Dec 25, 2023, but puppet cannot be loaded with the default set of gems, because `racc` was moved from a default to bundled gem. More gems will be moved in 3.4, so warnings are generated for those.\r\n\r\n## Expected Behavior\r\n\r\nIt should be possible to load puppet on Ruby 3.3 without warnings\r\n\r\n## Steps to Reproduce\r\n\r\n```\r\nPS C:\\Users\\Administrator\\puppet> bundle exec puppet --version\r\nC:\/Users\/Administrator\/puppet\/lib\/puppet\/settings.rb:4: warning: getoptlong was loaded from the standard library, but will no longer be part of the default gems since Ruby 3.4.0. Add getoptlong to your Gemfile or gemspec.\r\nC:\/tools\/ruby33\/lib\/ruby\/gems\/3.3.0\/gems\/fast_gettext-2.3.0\/lib\/fast_gettext\/vendor\/mofile.rb:171: warning: prime was loaded from the standard library, but is not part of the default gems since Ruby 3.1.0. Add prime to your Gemfile or gemspec. Also contact author of fast_gettext-2.3.0 to add prime into its gemspec.\r\nC:\/Users\/Administrator\/puppet\/lib\/puppet\/pops\/types\/p_binary_type.rb:3: warning: base64 was loaded from the standard library, but will no longer be part of the default gems since Ruby 3.4.0. Add base64 to your Gemfile or gemspec.\r\ncannot load such file -- racc\/parser.rb\r\n\r\nPS C:\\Users\\Administrator\\puppet> git grep racc\/parser\r\nlib\/puppet\/pops\/parser\/eparser.rb:require 'racc\/parser.rb'\r\n```\r\n\r\n## Environment\r\n\r\n```\r\nPS C:\\Users\\Administrator\\puppet> ruby --version\r\nruby 3.3.0 (2023-12-25 revision 5124f9ac75) [x64-mingw-ucrt]\r\n\r\nPS C:\\Users\\Administrator\\puppet> bundle list\r\nGems included by the bundle:\r\n  * CFPropertyList (2.3.6)\r\n  * abbrev (0.1.2)\r\n  * addressable (2.8.6)\r\n  * apt_stage_artifacts (0.11.0)\r\n  * artifactory (3.0.15)\r\n  * concurrent-ruby (1.2.3)\r\n  * crack (0.4.5)\r\n  * csv (3.2.8)\r\n  * declarative (0.0.20)\r\n  * deep_merge (1.2.2)\r\n  * diff-lcs (1.5.0)\r\n  * digest-crc (0.6.5)\r\n  * docopt (0.6.1)\r\n  * facter (4.5.1)\r\n  * faraday (2.9.0)\r\n  * faraday-net_http (3.1.0)\r\n  * fast_gettext (2.3.0)\r\n  * ffi (1.15.5)\r\n  * google-apis-core (0.11.3)\r\n  * google-apis-iamcredentials_v1 (0.17.0)\r\n  * google-apis-storage_v1 (0.31.0)\r\n  * google-cloud-core (1.6.1)\r\n  * google-cloud-env (2.1.0)\r\n  * google-cloud-errors (1.3.1)\r\n  * google-cloud-storage (1.47.0)\r\n  * googleauth (1.9.1)\r\n  * hashdiff (1.1.0)\r\n  * hiera-eyaml (3.4.0)\r\n  * highline (3.0.0)\r\n  * hocon (1.4.0)\r\n  * httpclient (2.8.3)\r\n  * json-schema (2.8.1)\r\n  * jwt (2.7.1)\r\n  * locale (2.1.3)\r\n  * mini_mime (1.1.5)\r\n  * minitar (0.9)\r\n  * msgpack (1.7.2)\r\n  * multi_json (1.15.0)\r\n  * net-http (0.4.1)\r\n  * optimist (3.1.0)\r\n  * os (1.1.4)\r\n  * packaging (0.113.0)\r\n  * public_suffix (5.0.4)\r\n  * puppet (8.5.0)\r\n  * puppet-resource_api (1.9.0)\r\n  * puppetserver-ca (2.6.0)\r\n  * rake (13.1.0)\r\n  * release-metrics (1.1.0)\r\n  * representable (3.2.0)\r\n  * retriable (3.1.2)\r\n  * rexml (3.2.6)\r\n  * rspec (3.12.0)\r\n  * rspec-core (3.12.2)\r\n  * rspec-expectations (3.12.3)\r\n  * rspec-its (1.3.0)\r\n  * rspec-mocks (3.12.6)\r\n  * rspec-support (3.12.1)\r\n  * scanf (1.0.0)\r\n  * semantic_puppet (1.1.0)\r\n  * signet (0.18.0)\r\n  * thor (1.3.0)\r\n  * trailblazer-option (0.1.2)\r\n  * uber (0.1.0)\r\n  * uri (0.13.0)\r\n  * vcr (6.2.0)\r\n  * webmock (3.19.1)\r\n  * webrick (1.8.1)\r\n  * yard (0.9.34)\r\n\r\nPS C:\\Users\\Administrator\\puppet> bundle config list\r\nSettings are listed in order of priority. The top value will be used.\r\n```\r\n\r\n## Workaround\r\n\r\nOn *nix, add the `development` group:\r\n\r\n```\r\n\u276f bundle config set with development\r\n\r\n\u276f bundle install\r\nFetching gem metadata from https:\/\/rubygems.org\/.......\r\nFetching racc 1.5.2\r\nInstalling racc 1.5.2 with native extensions\r\nBundle complete! 33 Gemfile dependencies, 98 gems now installed.\r\nUse `bundle info [gemname]` to see where a bundled gem is installed.\r\n\r\n\u276f bundle exec puppet --version\r\n\/home\/josh\/work\/puppet\/lib\/puppet\/settings.rb:4: warning: getoptlong was loaded from the standard library, but will no longer be part of the default gems since Ruby 3.4.0. Add getoptlong to your Gemfile or gemspec.\r\n\/home\/josh\/.rbenv\/versions\/3.3.0\/lib\/ruby\/gems\/3.3.0\/gems\/fast_gettext-2.3.0\/lib\/fast_gettext\/vendor\/mofile.rb:171: warning: prime was loaded from the standard library, but is not part of the default gems since Ruby 3.1.0. Add prime to your Gemfile or gemspec. Also contact author of fast_gettext-2.3.0 to add prime into its gemspec.\r\n\/home\/josh\/work\/puppet\/lib\/puppet\/util\/feature.rb:118: warning: syslog was loaded from the standard library, but will no longer be part of the default gems since Ruby 3.4.0. Add syslog to your Gemfile or gemspec.\r\n\/home\/josh\/work\/puppet\/lib\/puppet\/pops\/types\/p_binary_type.rb:3: warning: base64 was loaded from the standard library, but will no longer be part of the default gems since Ruby 3.4.0. Add base64 to your Gemfile or gemspec.\r\n8.5.0\r\n```\r\n\r\nNote adding the `development` group does not resolve the issue on Windows, because the `racc` gem is confined to the `ruby` platform:\r\n\r\n```\r\n gem \"racc\", \"1.5.2\", require: false, platforms: [:ruby]\r\n```\r\n\r\n## Additional Context\r\n\r\nThis is mostly likely due to https:\/\/github.com\/ruby\/ruby\/blob\/a49643340eb6b8d65299912b640887ea18495909\/NEWS.md#stdlib-compatibility-issues\r\n\r\n> You need to add racc to your Gemfile if you use racc under bundler environment.","comments":["Based on https:\/\/stdgems.org\/racc\/ we'll need to add `racc` to our Gemfile. Not sure if if this needs to be conditional based on RUBY_VERSION or not?\r\n\r\nAlso need to determine if `racc` needs to be a runtime dependency when building and publishing the puppet gem."],"labels":["bug"]},{"title":"ModuleDataProvider::validate_data_hash does not prune hash as advertised","body":"Originally reported in https:\/\/puppet.atlassian.net\/browse\/PUP-11719\r\n\r\n## Describe the Bug\r\n\r\nThe function `ModuleDataProvider::validate_data_hash` is supposed to prune all hiera keys that are not prefixed with the configured module_name. It does not. Instead it returns the hash that it was called with unchanged. All pruning is done on a cloned version of the supplied hash that\u2019s discarded.\r\n\r\nhttps:\/\/github.com\/puppetlabs\/puppet\/blob\/main\/lib\/puppet\/pops\/lookup\/module_data_provider.rb#L46\r\n\r\n## Desired Behavior:\r\n\r\nIt should prune all hiera keys that are not prefixed with the configured module name.\r\n\r\nIt should include the name of any offending key(s) in the warning message that it prints. The warning message as currently implemented doesn't provide the developer with any meaningful actionable information.\r\n\r\nhttps:\/\/github.com\/puppetlabs\/puppet\/blob\/main\/lib\/puppet\/pops\/lookup\/module_data_provider.rb#L54 should be modified to be something like:\r\n\r\n> Puppet.warning(\"Module '#{module_name}': #{msg}, key=#{k}\") to help identify the offending key(s).\r\n\r\n## Actual Behavior:\r\n\r\nHiera keys not prefixed with the module name are not pruned from the supplied hash. No warning advising on the offending key(s) is printed.\r\n\r\n## Fix:\r\n\r\nDelete this line and the pruned hash is returned:\r\nhttps:\/\/github.com\/puppetlabs\/puppet\/blob\/main\/lib\/puppet\/pops\/lookup\/module_data_provider.rb#L57\r\n\r\n\r\n## Environment\r\n\r\nPuppet Version: 7.20\r\nPuppet Server Version:\r\nOS Name\/Version:\r\n\r\n## Additional Context\r\nAdd any other context about the problem here.\r\n","comments":["The behavior can be seen with the following changes. Removing the clone step allows the `data_hash` to be mutated as the comments claim should be done:\r\n\r\n```diff\r\ndiff --git a\/lib\/puppet\/pops\/lookup\/module_data_provider.rb b\/lib\/puppet\/pops\/lookup\/module_data_provider.rb\r\nindex bca3b3f224..443c1bfd94 100644\r\n--- a\/lib\/puppet\/pops\/lookup\/module_data_provider.rb\r\n+++ b\/lib\/puppet\/pops\/lookup\/module_data_provider.rb\r\n@@ -51,7 +51,6 @@ class ModuleDataProvider < ConfiguredDataProvider\r\n       next memo if k == LOOKUP_OPTIONS || k.start_with?(module_prefix)\r\n \r\n       msg = \"#{yield} must use keys qualified with the name of the module\"\r\n-      memo = memo.clone if memo.equal?(data_hash)\r\n       memo.delete(k)\r\n       Puppet.warning(\"Module '#{module_name}': #{msg}\")\r\n       memo\r\n```\r\n\r\nOddly no tests fail with this change. But the following test does filter out the `other` value from the module's data hash:\r\n```diff\r\ndiff --git a\/spec\/unit\/pops\/lookup\/lookup_spec.rb b\/spec\/unit\/pops\/lookup\/lookup_spec.rb\r\nindex 3e7b6de29b..69a55acc2d 100644\r\n--- a\/spec\/unit\/pops\/lookup\/lookup_spec.rb\r\n+++ b\/spec\/unit\/pops\/lookup\/lookup_spec.rb\r\n@@ -96,6 +96,7 @@ describe 'The lookup API' do\r\n         'data' => {\r\n           'common.yaml' => <<-YAML.unindent\r\n             mod::x: mod::x (from module)\r\n+            other::y: should be removed\r\n             YAML\r\n         },\r\n         'manifests' => {\r\n\r\n```"],"labels":["bug"]},{"title":"Calling \"pkg update -n\" on Solaris too frequently causes problems with zones","body":"## Describe the Bug\r\nOn a Solaris system, running \"pkg update -n\" in the global zone at the same time that it is running in a non-global zone, can cause the command to fail in one or the other.\r\n\r\nIf we have puppet running this command, it causes the puppet run to fail for that specific resource.\r\n\r\nOn a T7-4 with more than 70 non-global zones, this happens, ... a lot.\r\n\r\n## Expected Behavior\r\ninsync? to return either true or false without having unexpected errors in the package subsystem.\r\n\r\n## Steps to Reproduce\r\nNot so much steps as having an environment with a lot of non-global zones with puppet running on the global zone AND the non-global zones. If we find ourselves running pkg update -n in more than one place at once, one of them will fail.\r\n\r\n## Environment\r\n - Version Currently 7.27\r\n - Platform Solaris 11.4\r\n\r\n## Additional Context\r\nThe existence of puppet running in no-global zones as well as the global zone. I've been running something that addresses this now for about a year.\r\n","comments":["I've been running with the following now for about a year and it appears to address the issue.\r\n```\r\n% git diff main                             \r\ndiff --git a\/lib\/puppet\/provider\/package\/pkg.rb b\/lib\/puppet\/provider\/package\/pkg.rb\r\nindex cc9b34082a..5e7d3b795a 100644\r\n--- a\/lib\/puppet\/provider\/package\/pkg.rb\r\n+++ b\/lib\/puppet\/provider\/package\/pkg.rb\r\n@@ -160,6 +160,13 @@ Puppet::Type.type(:package).provide :pkg, :parent => Puppet::Provider::Package d\r\n         warning(_(\"Implicit version %{should} has %{n} possible matches\") % { should: should, n: n })\r\n       end\r\n       potential_matches.each{ |p|\r\n+\r\n+        # If the version that we match is installed then we don't need\r\n+        # to check if it's installed (or installable), just return true\r\n+        if (is != 'absent') && (p[:status] == 'installed')\r\n+          return true\r\n+        end\r\n+\r\n         command = is == :absent ? 'install' : 'update'\r\n         options = ['-n']\r\n         options.concat(join_options(@resource[:install_options])) if @resource[:install_options]\r\n@@ -227,6 +234,10 @@ Puppet::Type.type(:package).provide :pkg, :parent => Puppet::Provider::Package d\r\n     if is[:ensure].to_sym == :absent\r\n       command = 'install'\r\n     else\r\n+      # If the package is up to date, we don't need to do anything\r\n+      if insync?(should)\r\n+        return 0\r\n+      end\r\n       command = 'update'\r\n     end\r\n     args = ['--accept']\r\n```\r\nLimiting calls to this pkg command reduces the chances of this problem occurring. There are some optimisations that can be made in `lib\/puppet\/provider\/package\/pkg.rb` to achieve this.\r\n\r\nIn `insync?`, we have run a `pkg list -Hvfa {pkg name and version string}`. We save the installation status, including whether or not this particular version is installed. The most likely scenario is that the first version we match is the version installed. If this is the case, we don't need to run \"pkg update -n\"  to repeat the check. We can just return true. Similar for any further iterations of the loop. If we see this version is installed, then we don't need to test any further.\r\n\r\nAn argument could be made that we could determine everything from the `pkg list` command, but the comments explain why we do the `pkg update -n` to verify that it can be installed. That being said, if the command returns any status other than 0 or 4, we loop, and test aginst the next version that matches our criterea. This could probably be spelled out better in the comments. Now given that we've already confirmed that we have the current version installed, we are not going to get a return code of 4, but I guess it doesn't hurt to leave it there.\r\n\r\nAlso in `install`, if the package is up to date, we can just return 0. We can check this with a call to `insync?(should)`.","It's worth noting that the \"normal\" case for `insync?` is that the package is current. Returning true at the top of this function removes the majority of calls to `pkg update -n {package@version}`","It's important for `insync?` to return true consistently in all cases, as that is what puppet uses to generate a report of what changed during the run and it cause puppet to report that the system is out of compliance. Therefore, you'll need to adjust `insync?` logic to fit your case.","The block of code from `insync?` has been removed as unnecessary, which also addresses the Jan 31 comment."],"labels":["bug"]},{"title":"Drop Ruby 2.5","body":"## Use Case\r\nThe gemspec still requires a minimum ruby version of 2.5 [here](https:\/\/github.com\/puppetlabs\/puppet\/blob\/4d6791aac08410637720a108399b51ccf31a3498\/.gemspec#L21).\r\n\r\n## Describe the Solution You Would Like\r\nRaise minimum ruby requirement to ruby 2.6 (which I believe is needed for puppet server). Will help keep consistency with other tooling and modules in the puppet ecosystem.\r\n\r\n","comments":["Migrated issue to [PUP-11994](https:\/\/perforce.atlassian.net\/browse\/PUP-11994)"],"labels":["triaged","enhancement"]},{"title":"Delay evaluation of undefined variables","body":"## Use Case\r\n\r\nAn undefined variable produce a warning.  Later on, a value can be assigned to this variable, which somewhat clash with the fact that variables are immutable.\r\n\r\nThe following show illustrate this issue:\r\n\r\n```puppet\r\nif defined('$foo') {\r\n  warning(\"A: foo=${foo}\")\r\n} else {\r\n  warning(\"A: foo is not defined\")\r\n}\r\n\r\n$foo = 'value'\r\n\r\nif defined('$foo') {\r\n  warning(\"B: foo=${foo}\")\r\n} else {\r\n  warning(\"B: foo is not defined\")\r\n}\r\n```\r\n\r\nApplying this catalog produce:\r\n\r\n```\r\nWarning: Scope(Class[main]): A: foo is not defined\r\nWarning: Scope(Class[main]): B: foo=value\r\n```\r\n\r\nThe above example is intended to illustrate the issue.  In the wild, this problem is often found when a module provide a defined type which has parameters that default to the value of a variable in another class of the module, for example:\r\n\r\n```puppet\r\nclass stuff {\r\n  $color = 'red'\r\n}\r\n\r\ndefine stuff::thing (\r\n  Optional[String] $color = $stuff::color,\r\n) {\r\n  include stuff\r\n  warning(\"Look, a ${color} ${title}!\")\r\n}\r\n\r\nstuff::thing { 'something':\r\n}\r\n# Warning: Unknown variable: 'stuff::color'.\r\n#=> \"Look, a  something!\"\r\n```\r\n\r\n## Describe the Solution You Would Like\r\n\r\nInstead of immediately producing a warning if a variable is used (or returning false when testing if the variable is defined), stopping evaluation of the current statement and re-evaluating it later may help have a better behavior.\r\n\r\n## Describe Alternatives You've Considered\r\n\r\nIf deferring evaluation is not possible, assigning a value to a variable which has already resolved as undefined should not be possible and raise an error.\r\n\r\n","comments":["@puppetlabs\/devx do you have any thoughts about this setup exposing this behavior?","Implementing that would completely change the order in which defines are evaluated and would most likely break a lot of existing code. There have been proposals in the past to make the puppet language completely functional and declarative. The puppet language is not declarative (although the resulting catalog is) and changing the overall order of evaluation would be too painful for everyone."],"labels":["enhancement"]},{"title":"Deferred values are not resolved before eval_generate","body":"## Describe the Bug\r\n\r\nType & providers that implement `eval_generate` to create child resource may be called before the parent deferred resource is resolved. This was first reported in https:\/\/github.com\/puppetlabs\/puppetlabs-concat\/pull\/789 where the `concat` parent resource generates `concat_fragments`.\r\n\r\nCommit a76f49853996fe79766c279e4174f819e9839467 made it possible to lazily resolve deferred resources. The behavior was guarded by the `preprocess_deferred=true` setting. In puppet8, the default value was changed to `false`, so deferred resources are no longer preprocessed.\r\n\r\nThe intention of the change was to allow dependencies of a deferred resource to be managed prior to the deferred resource. For example, from @bastelfreak in https:\/\/puppetcommunity.slack.com\/archives\/CFD8Z9A4T\/p1700590993590929\r\n> gitlab_runner module uses a deferred function to register itself to the gitlab server. the gitlab runner has a local firewall for outgoing traffic. so we have to apply puppet code to modify the firewall before the function is executed\r\n\r\nHowever, as a result of this change, type and provider lifecycle methods (such as validation, autorequires, prefetch, generate and eval_generate) may be called with deferred resources still in the catalog, since those calls occur after the catalog is created, but before the deferred resource is evaluated.\r\n \r\n## Expected Behavior\r\n\r\nI would expect the `eval_generate` method to be called after deferred values in the resource have been resolved, so that `DeferredValue` objects don't leak into custom types\/providers.\r\n\r\n## Steps to Reproduce\r\n\r\n```\r\n# rpm -q puppet-agent\r\npuppet-agent-8.3.1.86.g719cf6147-1.el7.x86_64\r\n# \/opt\/puppetlabs\/puppet\/bin\/puppet module install puppetlabs-concat\r\nNotice: Preparing to install into \/etc\/puppetlabs\/code\/environments\/production\/modules ...\r\nNotice: Downloading from https:\/\/forgeapi.puppet.com ...\r\nNotice: Installing -- do not interrupt ...\r\n\/etc\/puppetlabs\/code\/environments\/production\/modules\r\n\u2514\u2500\u252c puppetlabs-concat (v9.0.0)\r\n  \u2514\u2500\u2500 puppetlabs-stdlib (v9.4.1)\r\n# cat <<END > concat.pp\r\nconcat { '\/tmp\/deferred_file': }\r\nconcat::fragment { '1':\r\n  target  => '\/tmp\/deferred_file',\r\n  content => Deferred('md5', ['test']),\r\n}\r\nEND\r\n# puppet apply concat.pp\r\nWarning: Deferred function md5 has no return_type, unable to guarantee value type during compilation.\r\n   (file & line not available)\r\nNotice: Compiled catalog for papal-mandrel.delivery.puppetlabs.net in environment production in 0.07 seconds\r\nNotice: \/Stage[main]\/Main\/Concat[\/tmp\/deferred_file]\/File[\/tmp\/deferred_file]\/ensure: defined content as '{sha256}276179e40d8de773d3819996cd861446eeeef83fb607df4e72a3768c3390c1d0'\r\nNotice: Applied catalog in 0.01 seconds\r\n# cat \/tmp\/deferred_file \r\n#<Puppet::Pops::Evaluator::DeferredValue:0x00007f8c92dba4b8>\r\n```\r\n\r\n## Environment\r\n\r\nThis affects puppet 8 (by default) and puppet 7 (when running with `preprocess_deferred=false`).\r\n\r\n## Additional Context\r\n\r\nhttps:\/\/github.com\/puppetlabs\/puppet\/pull\/8902\r\nhttps:\/\/github.com\/puppetlabs\/puppet\/pull\/9152","comments":["Migrated issue to [PUP-11990](https:\/\/perforce.atlassian.net\/browse\/PUP-11990)"],"labels":["triaged","bug"]},{"title":"Wrong service provider selected for Raspberry Pi OS (raspbian) 12 bookworm","body":"## Describe the Bug\r\nWhen running puppet agent provided with Raspberry Pi OS, the message \"Warning: Found multiple default providers for service: init, systemd; using init\". This causes some services such as `firewalld` to be unmanageable.\r\n\r\n## Expected Behavior\r\nPuppet uses the correct Service provider, `systemd`\r\n\r\n## Steps to Reproduce\r\n1. Install Raspberry Pi OS Bookworm\r\n2. Install `puppet` package\r\n3. Run `puppet agent -t`\r\n\r\n## Environment\r\n - Version  7.23.0\r\n - Platform Raspberry Pi OS 12 (bookworm)\r\n\r\n## Additional Context\r\nI don't know enough about Debian to know if this is the case in all Debian platforms.","comments":["We are also tracking this internally as PUP-11949"],"labels":["bug"]},{"title":"Allow `exec` `creates` to check for all files instead of at least one","body":"## Describe the Bug\r\nI tried to convert an `exec` resource from multiple invocations of `test -f` to use the built-in `creates` option, but it doesn't work as expected, it will not execute unless none of the files are present. \r\n\r\nOriginal:\r\n```puppet\r\n  exec {'generate snakeoil certificate':\r\n    command => \"\/usr\/bin\/sscg -q \\\r\n     --cert-file     \/etc\/pki\/tls\/certs\/localhost.crt   \\\r\n     --cert-key-file \/etc\/pki\/tls\/private\/localhost.key \\\r\n     --ca-file       \/etc\/pki\/tls\/certs\/localhost.crt   \\\r\n     --dhparams-file \/tmp\/dhparams.pem                  \\\r\n     --lifetime      3650                               \\\r\n     --hostname      ${facts['networking']['fqdn']}     \\\r\n     --email         root@${facts['networking']['fqdn']}\",\r\n    unless  => [\r\n      '\/usr\/bin\/test -f \/etc\/pki\/tls\/certs\/localhost.crt',\r\n      '\/usr\/bin\/test -f \/etc\/pki\/tls\/private\/localhost.key',\r\n    ],\r\n    notify  => Service['httpd'],\r\n  }\r\n```\r\n\r\nExpected equivalent:\r\n```puppet\r\n  exec {'generate snakeoil certificate':\r\n    command => \"\/usr\/bin\/sscg -q \\\r\n     --cert-file     \/etc\/pki\/tls\/certs\/localhost.crt   \\\r\n     --cert-key-file \/etc\/pki\/tls\/private\/localhost.key \\\r\n     --ca-file       \/etc\/pki\/tls\/certs\/localhost.crt   \\\r\n     --dhparams-file \/tmp\/dhparams.pem                  \\\r\n     --lifetime      3650                               \\\r\n     --hostname      ${facts['networking']['fqdn']}     \\\r\n     --email         root@${facts['networking']['fqdn']}\",\r\n    creates => [\r\n      '\/etc\/pki\/tls\/certs\/localhost.crt',\r\n      '\/etc\/pki\/tls\/private\/localhost.key',\r\n    ],\r\n    notify  => Service['httpd'],\r\n  }\r\n```\r\n\r\nDebug output if both exist:\r\n```\r\nInfo: Applying configuration version '1700663411'\r\nDebug: \/Stage[main]\/Main\/Exec[generate snakeoil certificate]\/creates: Checking that 'creates' path '\/etc\/pki\/tls\/certs\/localhost.crt' exists\r\nDebug: \/Stage[main]\/Main\/Exec[generate snakeoil certificate]: '\/usr\/libexec\/httpd-ssl-gencerts' won't be executed because of failed check 'creates'\r\nDebug: Finishing transaction 12600\r\n```\r\n\r\nDebug output if the first file is missing and the second one exists:\r\n```\r\nInfo: Applying configuration version '1700663438'\r\nDebug: \/Stage[main]\/Main\/Exec[generate snakeoil certificate]\/creates: Checking that 'creates' path '\/etc\/pki\/tls\/certs\/localhost.crt' exists\r\nDebug: \/Stage[main]\/Main\/Exec[generate snakeoil certificate]\/creates: Checking that 'creates' path '\/etc\/pki\/tls\/private\/localhost.key' exists\r\nDebug: \/Stage[main]\/Main\/Exec[generate snakeoil certificate]: '\/usr\/libexec\/httpd-ssl-gencerts' won't be executed because of failed check 'creates'\r\nDebug: Finishing transaction 12600\r\n```\r\n\r\nDebug output if neither file exists (debug run without `notify httpd`):\r\n```\r\nInfo: Applying configuration version '1700663608'\r\nDebug: \/Stage[main]\/Main\/Exec[generate snakeoil certificate]\/creates: Checking that 'creates' path '\/etc\/pki\/tls\/certs\/localhost.crt' exists\r\nDebug: \/Stage[main]\/Main\/Exec[generate snakeoil certificate]\/creates: Checking that 'creates' path '\/etc\/pki\/tls\/private\/localhost.key' exists\r\nDebug: Exec[generate snakeoil certificate](provider=posix): Executing '\/usr\/libexec\/httpd-ssl-gencerts'\r\nDebug: Executing: '\/usr\/libexec\/httpd-ssl-gencerts'\r\nNotice: \/Stage[main]\/Main\/Exec[generate snakeoil certificate]\/returns: executed successfully\r\nDebug: \/Stage[main]\/Main\/Exec[generate snakeoil certificate]: The container Class[Main] will propagate my refresh event\r\nDebug: Class[Main]: The container Stage[main] will propagate my refresh event\r\nDebug: Finishing transaction 12600\r\n```\r\n\r\n## Expected Behavior\r\nI would expect the command to be executed if any of the files listed in `creates` are missing.\r\n\r\n## Environment\r\n - Version 7.27.0\r\n - Platform RHEL 9.2\r\n","comments":["Discussing on Slack, another option that preserves backwards compatibility would be to take a multi-dimensional array:\r\n```\r\n[\r\n  [all of these files, 2, 3, 4],\r\n  [or all of these files, 5, 6, 7],\r\n  [or even all of these],\r\n]\r\n```","@yakatz I think the best solution here is to take your #9167 PR and get that merged in there. ","Migrated issue to [PUP-11989](https:\/\/perforce.atlassian.net\/browse\/PUP-11989)"],"labels":["triaged","bug"]},{"title":"(maint) Only resolve environment dirs if versioned dirs are enabled","body":"The previous implementation would not set the resolved_path variable of an environment to the actual resolved path unless the \"report_configured_environment\" was set to false. This should not matter since the externalize_path method will check the\r\n\"report_configured_environment\" setting.\r\n\r\nThe implementation should probably either always set the resolved_path to the resolved path, or only set it if \"versioned_environment_dirs\" is true. This patch sets it only if the \"versioned_environment_dirs\" setting is true.\r\n\r\n-----\r\n\r\n^ That is the commit message.\r\n\r\nPR-wise, I came across this block while looking for something else and it looked wrong. It might be correct but I didn't find any meaningful reasoning that the jerk implementor left behind. I think we set Environment#resolved_path to _some_ value regardless lest nils creep into the system, but in retrospect giving it an obviously wrong value doesn't seem any better. It also may be an artifact of a development iteration where Environment#externalize_path didn't check if resolved_path was set before acting on it.\r\n\r\nI'll need to run some manual acceptance tests in PE to validate the change, but I will have to do that later.","comments":["Thanks @justinstoller, just checking if this is still needed?","Yeah, I think this is a good refactor for maintainability.\r\n\r\nI've just run some versioned deploys with this change and re-reviewed the unit tests and don't think it should cause a regression."],"labels":["bug"]},{"title":"Make ParsedFile provider work with composite namevars","body":"Previously it was assumed that the name was the key. This changes the implementation to instead match on the key attributes. This allows it to work with composite namevars. While there was previously code for multiple target support, this makes it possible to use the same key in multiple files.\n\nIt also gets rid of some code that wasn't needed.\n\nTo achieve this, it also needs to use resource titles as identifiers in preloading\n\nWhen using composite namevars for resources then `resource.name` always `nil`. Prior to this it was used as a key in a hash when prefetching resources. By using the title it should work, since that's guaranteed to be set and unique.\n\nThis can break providers where the name is different from the title.\n\nRight now there are no tests, but I tested it locally with puppetlabs-postgresql.","comments":["Can one of the admins verify this patch?","@ekohl I have just a question out of curiosity: I tried to patch the postgresql_conf provider to work with multiple files and was told that the cron type, which is also based on ParsedFile is able to do this. But I never found the code which does it. Is there a working patch in the cron type\/provider?","I did not think about that, but just to be explicit: you're talking about https:\/\/github.com\/puppetlabs\/puppetlabs-cron_core? I see it does override some methods, like [resource_for_record](https:\/\/github.com\/puppetlabs\/puppetlabs-cron_core\/blob\/640db6adfbcdefb30c30d4b902ae7fd6aaf25f5b\/lib\/puppet\/provider\/cron\/crontab.rb#L106-L124), [match](https:\/\/github.com\/puppetlabs\/puppetlabs-cron_core\/blob\/640db6adfbcdefb30c30d4b902ae7fd6aaf25f5b\/lib\/puppet\/provider\/cron\/crontab.rb#L146-L183) and [targets](https:\/\/github.com\/puppetlabs\/puppetlabs-cron_core\/blob\/640db6adfbcdefb30c30d4b902ae7fd6aaf25f5b\/lib\/puppet\/provider\/cron\/crontab.rb#L299-L307). It also implements [prefetch_hook](https:\/\/github.com\/puppetlabs\/puppetlabs-cron_core\/blob\/640db6adfbcdefb30c30d4b902ae7fd6aaf25f5b\/lib\/puppet\/provider\/cron\/crontab.rb#L187-L235).  Those do appear to be the broken methods and it may be possible to apply the same in puppetlabs-postgresql.\r\n\r\nIt would also be an interesting test to see how much of that can be dropped with this patch.","Yes, I was referring to https:\/\/github.com\/puppetlabs\/puppetlabs-cron_core"],"labels":["enhancement"]},{"title":"Correct user <-> group relationship on removal","body":"When a group needs to be removed, it can't be the primary group of a user.  So if a user is ensured absent, it needs to happen before the group is removed.\n\nThis PR first adds tests to the existing code, before refactoring it. Then in the last commit it adds autobefore and makes sure autorequires is empty when ensure is absent.","comments":["Can one of the admins verify this patch?"],"labels":["bug"]},{"title":"Fix failing to install packages with `-noarch` in name","body":"We're missing a `\\.` at the beginning, since `.join()` only puts `|\\.` in between items:\r\n\r\n```\r\n>> ARCH_REGEX = Regexp.new(ARCH_LIST.join('|\\.'))\r\n=> \/noarch|\\.i386|\\.i686|\\.ppc|\\.ppc64|\\.armv3l|\\.armv4b|\\.armv4l|\\.armv4tl|\\.armv5tel|\\.armv5tejl|\\.armv6l|\\.armv7l|\\.m68kmint|\\.s390|\\.s390x|\\.ia64|\\.x86_64|\\.sh3|\\.sh4\/\r\n```\r\n\r\nCurrently puppet is failing to install package with `-noarch` string in its name because of the invalid ARCH_REGEX:\r\n\r\n```\r\npackage { 'package-name-noarch':\r\n  ensure => '1.0.0.el8'\r\n}\r\n```\r\n\r\n```\r\nDebug: Executing: '\/bin\/dnf -d 0 -e 1 -y install package-name--1.0.0.el8noarch'\r\nError: Could not update: Execution of '\/bin\/dnf -d 0 -e 1 -y install package-name--1.0.0.el8noarch' returned 1: Error: Unable to find a match: package-name--1.0.0.el7noarch\r\n```","comments":["Can one of the admins verify this patch?","[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=9085) <br\/>All committers have signed the CLA.","Hi @anhpt379 thank you for your contribution. Could you sign the CLA?","Hi @anhpt379 could you review my last comment?","I have signed it at least 2 times, but the status doesn't get updated. I've signed it again. Please check now.","@anhpt379 sorry I completely missed that you signed it. We've updated our rspec checks since you submitted this, so I need to close and reopen the PR to trigger the correct set of checks.","I agree the `ARCH_REGEX` seems wrong, but I am able to manage noarch packages without this change.\r\n\r\n```\r\n# puppet --version\r\n8.5.1\r\n# cat manifest.pp \r\npackage { 'ant.noarch':\r\n  ensure => installed\r\n}\r\n# puppet apply manifest.pp --debug\r\n...\r\nDebug: Prefetching dnf resources for package\r\nDebug: Executing: '\/usr\/bin\/rpm --version'\r\nDebug: Executing '\/usr\/bin\/rpm -qa --nosignature --nodigest --qf '%{NAME} %|EPOCH?{%{EPOCH}}:{0}| %{VERSION} %{RELEASE} %{ARCH}\\n' | sort'\r\nDebug: Executing: '\/usr\/bin\/rpm -q ant.noarch --nosignature --nodigest --qf %{NAME} %|EPOCH?{%{EPOCH}}:{0}| %{VERSION} %{RELEASE} %{ARCH}\\n'\r\nDebug: Executing: '\/usr\/bin\/rpm -q ant.noarch --nosignature --nodigest --qf %{NAME} %|EPOCH?{%{EPOCH}}:{0}| %{VERSION} %{RELEASE} %{ARCH}\\n --whatprovides'\r\nDebug: Package[ant.noarch](provider=dnf): Ensuring => present\r\nDebug: Executing: '\/usr\/bin\/dnf -d 0 -e 1 -y install ant.noarch'\r\nNotice: \/Stage[main]\/Main\/Package[ant.noarch]\/ensure: created\r\n...\r\n# rpm -q ant\r\nant-1.10.12-5.amzn2023.0.4.noarch\r\n```"],"labels":["bug"]},{"title":"(maint) replace egrep with grep in acceptance\/tests\/resource\/exec\/should_run_bad_command.rb","body":"As according to: https:\/\/www.phoronix.com\/news\/GNU-Grep-3.8-Stop-egrep-fgrep\r\nWe should stop using egrep since it has been deprecated since 2007. This command comes with a warning also in the acceptance test.\r\n\r\n`warning: egrep is obsolescent; using grep -E `\r\n\r\nwhich will be removed after this change.\r\n\r\nCheers","comments":["jenkins please test this on windows2019-64a","Can one of the admins verify this patch?","[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=9046) <br\/>All committers have signed the CLA.","jenkins please test this on windows2019-64a"],"labels":["bug"]},{"title":"(PUP-11753) remove NonMatchToken from parsed eyaml tokens","body":"Originally filed in https:\/\/puppet.atlassian.net\/browse\/PUP-11753","comments":["Can one of the admins verify this patch?","[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=9011) <br\/>All committers have signed the CLA.","@hdevalke thanks for your contribution.\r\n\r\nIt looks like this issue has been raised in https:\/\/github.com\/voxpupuli\/hiera-eyaml\/issues\/270, specifically this comment https:\/\/github.com\/voxpupuli\/hiera-eyaml\/issues\/270#issuecomment-578875392\r\n\r\nThe workaround mentioned there is to use YAML block format:\r\n\r\n```yaml\r\nmy_sensitive_ssh_private_key_data: >\r\n  ENC[PKCS7,....]\r\n```\r\n\r\nPuppet's `chomp` behavior has been there since the function was introduced in 7fd32734e6b6a041ecf129d8b28102381ca62ddf\r\n\r\nUnfortunately, we can't accept this change as-is, because someone is surely relying on the chomp behavior. I think it'd be good to discuss this with voxpupuli to see how this can be fixed in hiera-eyaml and the puppet chomp call removed."],"labels":["blocked","bug"]},{"title":"(maint) Add xbps used by voidlinux as a package provider","body":"I wanted to use puppet on void-linux, so this PR adds the package provider for xbps.\r\n\r\nLet me know if any changes has to be made :)","comments":["Can one of the admins verify this patch?","[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=8976) <br\/>All committers have signed the CLA.","@joshcooper @tvpartytonight (just pinging).\r\n\r\nRebased on tip of main branch removing conflicts, can someone please review.","Hi @Animeshz thanks for your pull request! I had a few minor comments, but generally looked great.","> I had a few minor comments, but generally looked great.\r\n\r\nI got those addressed (and tested basic functionality on local machine), let me know if anything else has to be done.","Sorry I didn't performed lint checks. I've addressed those nuances now.\r\n\r\nAnd tests should now pass. Please have a look :smile: ","closing and reopening to trigger checks","@Animeshz can you fix the rubocop checks by running `bundle exec rubocop -a` and squash your commits?","It used to pass all checks that time, seems like rubocop rules have been changed since then.\r\n\r\n![24-03-13-12h10m36s](https:\/\/github.com\/puppetlabs\/puppet\/assets\/26714676\/6bb90ca3-cd30-438b-bf50-3219d8976ccc)\r\n\r\nLet me rebase, fix and squash up real quick.\r\n\r\n**EDIT:** Done, checked rake tests and rubocop suggestions.\r\n\r\n![24-03-13-12h30m20s](https:\/\/github.com\/puppetlabs\/puppet\/assets\/26714676\/ef808dce-79a5-4dea-bf79-b5a7e2568e67)\r\n"],"labels":["enhancement"]},{"title":"(maint) Make loglevel default more efficient ","body":"This line is not sane for the setting of the log_level default\r\n\r\n   loglevel = %x{ #{puppet_path} config --section agent --log_level notice print log_level }.chomp\r\n\r\nthis sets log_level to notice, and then return the output of the log_level setting\r\n\r\n      loglevel = \"notice\"\r\n\r\nis the same thing with fewer steps","comments":["[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=8958) <br\/>All committers have signed the CLA."],"labels":["bug"]},{"title":"(PUP-11597) Generate types when any module libs are updated","body":"Fixes PUP-11597\r\n\r\n## Before\r\n\r\nPrior to this, the `puppet generate types` command would only detect resource type changes if the type file itself changed.\r\n\r\nFor example, if your type was defined at `<module>\/lib\/puppet\/type\/foo.rb`, a change in it would be detected.\r\n\r\nBut if your type includes libraries from separate Ruby files in `lib\/puppet\/*` or even in the PuppetX namespace like `lib\/puppet_x\/*`, changes to those other files would not be detected.\r\n\r\nThe consequence of that behavior is that updates to the signature of a type that come from \"other\" ruby files would not trigger a metadata re-creation and those types would suffer from the environment-isolation problem (SERVER-94) that `puppet generate types` was meant to solve.\r\n\r\n## After\r\n\r\nThis fixes that problem by updating `puppet generate types` to scan for changed Ruby files within a module's `lib\/*` directory.\r\n\r\nIt uses the same `Puppet::FileSystem::stat` operation to compare mtime of the Ruby files in `lib\/*` relative to the generated metadata file. And if the metadata is older than any of the Ruby files in `lib\/*`, the metadata is regenerated.\r\n\r\nThe one slight-downside to my solution is that generation of type metadata will possibly happen more often than before and possibly more often than is needed. However, generating types is fast, and it's usually only done when code updates happen (e.g. via `r10k` or Code Manager), so the total added load is very close to, if not, negligible.","comments":["Can one of the admins verify this patch?","I'm not sure why the spec tests are failing in jruby and windows. Anyone have an idea why?","Since CI failed more than a month ago, I have to close and reopen to rekick the GH actions.","@natemccurdy I think Windows tests are failing because of the way the test stubs filesystem access. Perhaps Windows mtime resolution isn't as low as Posix or the time is being truncated?\r\n \r\n```\r\n  1) Puppet::Face[:generate, 0.1.0] when used from an interactive terminal in an environment with two modules containing resource types overwrites if files exists that are not up to date while keeping up to date files\r\n     Failure\/Error: expect(stats_before[0] <=> stats_after[0]).to eq(-1)\r\n       expected: -1\r\n            got: 0\r\n       (compared using ==)\r\n```. ","I wasn't able to figure out a way to get the tests to pass on Windows by faking a passage of time, so I resorted to a `sleep(1)` which is what the existing tests do.\r\n\r\nI don't like that sleep, but the tests pass \ud83e\udd37 .","@joshcooper Is there anything specific here that still needs work?","[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=8928) <br\/>All committers have signed the CLA.","Retriggering tests"],"labels":["enhancement"]},{"title":"(PUP-3399) autorequire local file sources","body":null,"comments":["Can one of the admins verify this patch?","[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=8909) <br\/>All committers have signed the CLA."],"labels":["enhancement"]},{"title":"(PUP-7126) use selabel_lookup instead of matchpathcon","body":"    (PUP-7126) Use selabel_lookup instead of matchpathcon\r\n    \r\n    Matchpatchon is deprecated. Since ruby bindings are\r\n    available in libselinux-ruby, selabel_open should be used instead to\r\n    create an open handler, from which context can be retrieved with\r\n    selabel_lookup. At completion, the handler is closed with selabel_close,\r\n    releasing its resources back to the system.\r\n\r\n    Do not call matchpathcon_fini in post_resource_eval for file posix provider.\r\n    \r\n    Resources are released back to the system when the handle is closed with\r\n    selabel_close, so matchpathcon_fini is no longer necessary.","comments":["Can one of the admins verify this patch?","[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=8904) <br\/>All committers have signed the CLA.","I'm interested in finding a solution to PUP-10548 (\"Wrong SELinux contexts on files if puppet installs new rpm with SELinux policy\"), so getting this one out of the way first feels like a correct approach.","> I'm interested in finding a solution to [PUP-10548](https:\/\/tickets.puppetlabs.com\/browse\/PUP-10548) (\"Wrong SELinux contexts on files if puppet installs new rpm with SELinux policy\"), so getting this one out of the way first feels like a correct approach.\r\n\r\nDoes calling `Selinux.selabel_close` where you do already fix [PUP-10548](https:\/\/tickets.puppetlabs.com\/browse\/PUP-10548)?\r\nIt seems vaguely equivalent to calling `Selinux.matchpathcon_fini` there, so I'm really hoping it does! :)\r\n\r\nSince EL6 is still a supported platform, you'll also need to check that performance is acceptable.  I suspect it won't be, (but _please_ prove me wrong!)\r\nI had a change reverted in https:\/\/github.com\/puppetlabs\/puppet\/pull\/6310 because I'd accidentally crippled EL5 and EL6 performance.  See https:\/\/tickets.puppetlabs.com\/browse\/PUP-2169?focusedCommentId=499178&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-499178","Echoing @alexjfisher's comment, I'm concerned about the performance of opening & closing an selinux handle\/context for every managed file. It would probably be better to create a handle once in a class method and then close the handle in the `post_resource_eval`. So something like this:\r\n\r\n```ruby\r\nPuppet::Type.type(:file).provide(:posix) do\r\n  self << class\r\n    attr_reader :selinux_handle\r\n\r\n    def pre_run_check\r\n      @selinux_handle = if Puppet::Util::SELinux.selinux_support?\r\n                          Selinux.selabel_open(0, nil, 0)\r\n                        else\r\n                          nil\r\n                        end\r\n    end\r\n  \r\n    def post_resource_eval\r\n      Selinux.selinux_close(@selinux_handle) if @selinux_handle\r\n    end\r\n  end\r\n\r\n  def get_selinux_default_context(file, resource_ensure=nil)\r\n    ...\r\n    retval = Selinux.selabel_lookup(self.class.selinux_handle, file, mode)\r\n    retval == -1 ? nil : retval[1]\r\n  end    \r\nend\r\n   "],"labels":["enhancement"]},{"title":"(PUP-9001) Show diff for new files","body":"Prior to this commit when :show_diff is set, file diffs are only shown\r\nwhen modifying an existing file. However, it is often very helpful to\r\nsee the diff for a new file as well, either in testing or production\r\nlogs.\r\n\r\nAfter this commit diffs are shown for new files as well. Diffs are\r\nperformed against NUL(windows) or (\/dev\/null)(all others) to ensure\r\ncompatibility with custom diff commands.","comments":["Can one of the admins verify this patch?","@joshcooper any chance you could review?","@joshcooper friendly bump for a review","I am hesitant about this. Enabling `show_diffs` with this patch would result in a massive massive massive first run report. And the chances that sensitive information shows up in logs becomes exponentially higher. To be sure, one could alleviate both of those by disabling `show_diffs` for that run, but it would still be unexpected, will likely break some acceptance testing, and could even overload report storage destinations.\r\n\r\nThat said, I do see value if that's intentionally what you want. I wonder about changing it to a ternary instead. `false`, `true`, and `verbose` where the added level would give you file creation diffs, but without changing existing behaviors.","> I am hesitant about this. Enabling `show_diffs` with this patch would result in a massive massive massive first run report. And the chances that sensitive information shows up in logs becomes exponentially higher. To be sure, one could alleviate both of those by disabling `show_diffs` for that run, but it would still be unexpected, will likely break some acceptance testing, and could even overload report storage destinations.\r\n\r\nDefinitely important concerns, thanks for raising them. I traditionally have not used a puppet server, so large reports are not something I have had to deal with.\r\n\r\n> That said, I do see value if that's intentionally what you want. I wonder about changing it to a ternary instead. `false`, `true`, and `verbose` where the added level would give you file creation diffs, but without changing existing behaviors.\r\n\r\nIf a ternary is necessary to prevent surprising behavior, I can certainly update the pull request, how about these values:\r\n\r\n**`show_diff`:**\r\n1. `false`: No diff (default)\r\n2. `true`: Diff on changes\r\n3. `always`: Diff on changes and new files","[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=8890) <br\/>All committers have signed the CLA.","This is definitely something I have wanted."],"labels":["enhancement"]},{"title":"Support Ed25519 keys\/certificates","body":"The generic interface usage was added by 78712feb5dd54565d6a86be341410b0c3e04aab6, which improved key format support.\r\nruby-openssl 3.0, shipped in Ruby 3.0, supports Ed25519 keys using the generic interface and returns a OpenSSL::PKey::PKey.\r\nThe only thing preventing these from working is a simple type check. Remove it and update various type annotations to refer to OpenSSL::PKey::PKey, though the old types will still work.","comments":["Hi @tambry thanks for you contribution! I think we'll need a few more changes to merge this:\r\n\r\n1. Can you update the [rake task](https:\/\/github.com\/puppetlabs\/puppet\/blob\/main\/tasks\/generate_cert_fixtures.rake) for generating cert & key fixtures to generate an ED25519 private key and signed cert? It seems fine to reuse the [test vectors from ruby](https:\/\/github.com\/ruby\/ruby\/blob\/cda8bc3657b58a5376e7bd7beec346505ebe5893\/test\/openssl\/test_pkey.rb#L80-L90) or generate new private\/pub keys, create a CSR and issue the cert using the intermediate CA's private key.\r\n2. Run `bundle exec rake gen_cert_fixtures` to regenerate all of the fixtures, including the new key and cert. Best to create one commit for just those changes.\r\n3. Next add unit tests for the new key, like we do for [RSA](https:\/\/github.com\/puppetlabs\/puppet\/blob\/4772afa194402a3876069785a178611797a8eb7d\/spec\/unit\/x509\/cert_provider_spec.rb#L269-L294) and [EC](https:\/\/github.com\/puppetlabs\/puppet\/blob\/4772afa194402a3876069785a178611797a8eb7d\/spec\/unit\/x509\/cert_provider_spec.rb#L296-L321) keys. You will probably need to do something like `context 'using EC25519', if: RUBY_VERSION.to_f >= 3 && OpenSSL::OPENSSL_VERSION_NUMBER > 0x10101000 do` so that the tests only run on Ruby and openssl versions >= 1.1.1.\r\n4. This PR will now accept a bogus object as the private key, since we're now just checking that it's not an instance of DSA https:\/\/github.com\/puppetlabs\/puppet\/pull\/8869\/files#diff-267828e88cef126d517addbead183553921e62648a51c9befa85dec6587357dbR129\r\n\r\nI think it'd be better to only allow key types that we know work. The trouble is the `OpenSSL::PKey::PKey#oid` method doesn't exist in older ruby versions, so it'll need to be conditional. Maybe something like:\r\n\r\n```ruby\r\nif !private_key.is_a?(OpenSSL::PKey::RSA) && \\\r\n   !private_key.is_a?(OpenSSL::PKey::EC) && \\\r\n   !(private_key.is_a?(OpenSSL::PKey::PKey) && private_key.respond_to?(:oid) && private_key.oid == 'ED25519')\r\n  raise ...\r\n```","[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=8869) <br\/>All committers have signed the CLA.","Hi @tambry changes look great! Could you rebase on main and resolve the ssl_provider conflict?","@joshcooper Sorry for the delay. I'll try to have a look at this within a few weeks.  \r\nWe've been using this downstream for close to 2 years by now so it'd be lovely to get this upstreamed.\r\n\r\nLast time I got hung up on updating the tests. I began, but getting a Ruby development environment setup proved a bit annoying as I couldn't simply grab the dependencies from my system package manager. I was also worried about breaking my whole Debian install so I began creating a separate rootfs, investigating how to use `schroot` with it and... then I dropped it. \ud83d\ude06 ","@tambry looks like there are some conflicts now. Could you rebase on `main`?","@joshcooper Thanks for the reminder, I've rebased. Note that the tests remain unfinished and are probably insufficient."],"labels":["enhancement"]},{"title":"Support uninstall_options for gem package resource like for install_options","body":"The attribute `install_options` for the gem package resource is included _before_ the gemname to install. While the `uninstall_options` are included _after_ the gemname ... This is faulty. For now I have modified the uninstall_options to use the same login as for install_options.","comments":["Can one of the admins verify this patch?","Hi @brandsr thank you for your contribution! Do uninstall options not work because the `gem` provider is including them after the gem name, like `gem uninstall <name> --param value`? Do you have a scenario where this causes a failure, or did you want to make it consistent with install options?\r\n\r\nTo get this merged, could you:\r\n\r\n1. ~Create a JIRA ticket in the PUP project: https:\/\/tickets.puppetlabs.com\/projects\/PUP~\r\n2. ~Describe the expected and actual behavior~\r\n3. ~Prefix the subject line in your commit message with the ticket, e.g. `(PUP-123) ...`~\r\n4. Update the tests in `spec\/unit\/provider\/package\/gem_spec.rb` as needed.\r\n5. Sign the CLA\r\n\r\nThank you!","[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/not_signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=8856) <br\/>Thank you for your submission! We really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=8856) before we can accept your contribution.<br\/><sub>You have signed the CLA already but the status is still pending? Let us [recheck](https:\/\/cla-assistant.io\/check\/puppetlabs\/puppet?pullRequest=8856) it.<\/sub>","Hi @brandsr not sure if you saw my earlier comments? Also is there a particular case where the ordering of `uninstall_options` was causing problems or was it just inconsistent with respect to `install_options`?","Hi @brandsr not sure if you saw my comment. What did you mean by \"While the `uninstall_options` are included _after_ the gemname ... This is faulty.\" Can you give an example of what was faulty? If we don't hear back in the next few weeks, then we'll need to close this out."],"labels":["bug"]},{"title":"(PUP-11326) Make regsubst() sensitive-aware","body":"[PUP-11326](https:\/\/tickets.puppetlabs.com\/browse\/PUP-11326)\r\n\r\nPossible Use-Case [out of Real-Life](https:\/\/github.com\/Icinga\/puppet-icinga2\/blob\/master\/manifests\/feature\/gelf.pp#L100):  \r\n```\r\n      $_ssl_key = $::facts['os']['family'] ? {                           \r\n        'windows' => regsubst($ssl_key, '\\n', \"\\r\\n\", 'EMG'),            \r\n        default   => $ssl_key,                                           \r\n      }\r\n```","comments":["Can one of the admins verify this patch?","[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=8799) <br\/>All committers have signed the CLA.","Thanks @cocker-cc you'll want to rebase this PR against https:\/\/github.com\/puppetlabs\/puppet\/pull\/8879 after it's merged to resolve the rspec issue on Ruby 3","There is one more possible `Sensitive` permutation to support - that of `Sensitive[Array]` where the array may contain sensitives or strings. That case may be difficult to describe in the `dispatch` section since a `Sensitive` type does not present more than the base type of its content. Easiest is probably to have one dispatch for `Sensitive[Array]` that unwraps the Array and then recursively calls the function to get the type checking.\r\nNot sure how valuable it is to also support that case."],"labels":["enhancement"]},{"title":"WIP: Enum new PUP-10944","body":"https:\/\/tickets.puppetlabs.com\/browse\/PUP-10944","comments":["Can one of the admins verify this patch?","[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=8710) <br\/>All committers have signed the CLA.","Hi @nod0n, thanks for your contribution! I read through the slack conversation, about wanting something like `bool2str` from stdlib. If I understand correctly, you want to take a boolean (or integer) as input and have it select among multiple boolean-like values (yes, no, etc), for example:\r\n\r\n```puppet\r\nnotice(convert(['no', 'yes'], true))\r\n```\r\n\r\nIf so I'm not sure adding `Enum.new` will do that, but I may be misunderstanding. For example, I took your PR and added the following: \r\n\r\n```diff\r\n       end\r\n \r\n       dispatch :from_args do\r\n+        param          'Array', :values\r\n         param          'Selector', :selector      # selects one of the Enum's strings\r\n         optional_param 'Format',   :string_format # how should the string being formatted?\r\n       end\r\n \r\n-      def from_args(selector, format = :default)\r\n+      def from_args(values, selector, format = :default)\r\n         string = case selector\r\n-          when true then @values[1]\r\n-          when false then @values[0]\r\n-          when Integer then @values[selector]\r\n+          when true then values[1]\r\n+          when false then values[0]\r\n+          when Integer then values[selector]\r\n           end\r\n \r\n         StringConverter.singleton.convert(string, format)\r\n\r\n```\r\n\r\nHowever that fails, because `Enum.new` is supposed to return an instance of an Enum, not a String:\r\n\r\n```\r\n$ bx puppet apply -e 'notice(Enum.new([\"no\", \"yes\"], true))'\r\nError: Evaluation Error: Error while evaluating a Method call, Converted value from Enum.new() has wrong type, expects a match for Enum, got 'yes' (line: 1, column: 16) on node localhost\r\n```\r\n\r\nBased on your original comments in slack:\r\n\r\n> but is it also possible to set custom value for true , like with bool2str\r\n\r\nmakes me think you really do want to implement `String.new([\"no\", \"yes\"], true)`? Thoughts @hlindberg?\r\n","An \u201dinstance of Enum\u201d is actually a ruby string so that should work. There are never any instances of any other \u201denum type\u201d passed around. The check in new impl that of the return value\u2019s type could be wrong for Enum - probably because Enum did not have a new before this so has gone untested for that case.\n\nI looked briefly at String new, and as I recall it was difficult to make it support the proposed \u201cpick string from array or enum based on value\u201d. I could be wrong though.\n\n- henrik\n\n> 1 sep. 2021 kl. 01:12 skrev Josh Cooper ***@***.***>:\n> \n> \ufeff\n> Hi @nod0n, thanks for your contribution! I read through the slack conversation, about wanting something like bool2str from stdlib. If I understand correctly, you want to take a boolean (or integer) as input and have it select among multiple boolean-like values (yes, no, etc), for example:\n> \n> notice(convert(['no', 'yes'], true))\n> If so I'm not sure adding Enum.new will do that, but I may be misunderstanding. For example, I took your PR and added the following:\n> \n>        end\n>  \n>        dispatch :from_args do\n> +        param          'Array', :values\n>          param          'Selector', :selector      # selects one of the Enum's strings\n>          optional_param 'Format',   :string_format # how should the string being formatted?\n>        end\n>  \n> -      def from_args(selector, format = :default)\n> +      def from_args(values, selector, format = :default)\n>          string = case selector\n> -          when true then @values[1]\n> -          when false then @values[0]\n> -          when Integer then @values[selector]\n> +          when true then values[1]\n> +          when false then values[0]\n> +          when Integer then values[selector]\n>            end\n>  \n>          StringConverter.singleton.convert(string, format)\n> However that fails, because Enum.new is supposed to return an instance of an Enum, not a String:\n> \n> $ bx puppet apply -e 'notice(Enum.new([\"no\", \"yes\"], true))'\n> Error: Evaluation Error: Error while evaluating a Method call, Converted value from Enum.new() has wrong type, expects a match for Enum, got 'yes' (line: 1, column: 16) on node localhost\n> Based on your original comments in slack:\n> \n> but is it also possible to set custom value for true , like with bool2str\n> \n> makes me think you really do want to implement String.new([\"no\", \"yes\"], true)? Thoughts @hlindberg?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n> Triage notifications on the go with GitHub Mobile for iOS or Android. \n","> An \u201dinstance of Enum\u201d is actually a ruby string so that should work\r\n\r\nAhh, ok I'll take a look"],"labels":["enhancement"]},{"title":"(PUP-10214) Avoid replacing dangling symlinks on 'replace => false'","body":"Puppet::FileSystem.exist? explicitly follows symlinks, so the check for\r\nin-sync will fail on a dangling symlink. A dangling symlink is still an\r\nexisting file, however, so when 'replace => false' is in effect, puppet\r\nshould not replace it.\r\n\r\nChange the test to use Puppet::FileSystem.lstat in order to avoid\r\nfollowing symlinks.","comments":["Can one of the admins verify this patch?","[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=8643) <br\/>All committers have signed the CLA.","Rekicking GH action due to JRuby bump"],"labels":["bug"]},{"title":"Easier Linux FHS support","body":"The goal of these patches is to make Linux FHS mode easier. Right now multiple distributions struggle and maintain similar patches.\n\nThe idea of this series is to introduce a Linux FHS run mode. The distributions can then choose to use this without having to patch too much. Perhaps install.rb can even ensure this runmode is selected.\n\nCurrently a draft since this requires some discussion. First of all, I'd like to get agreement on whether the general approach makes sense. If it doesn't and will never be accepted, then there's no point in trying to push for this.","comments":["Can one of the admins verify this patch?","I noted that https:\/\/github.com\/puppetlabs\/puppet\/blob\/main\/lib\/puppet\/defaults.rb also contains paths that are hardcoded. What's the reasoning for keeping that out of run mode?","> I noted that https:\/\/github.com\/puppetlabs\/puppet\/blob\/main\/lib\/puppet\/defaults.rb also contains paths that are hardcoded. What's the reasoning for keeping that out of run mode?\r\n\r\nI can't think of a particular reason. For me it would make sense to have something like this:\r\n\r\n```diff\r\ndiff --git a\/lib\/puppet\/defaults.rb b\/lib\/puppet\/defaults.rb\r\nindex b2e3239590..a90a173e4c 100644\r\n--- a\/lib\/puppet\/defaults.rb\r\n+++ b\/lib\/puppet\/defaults.rb\r\n@@ -54,7 +54,7 @@ module Puppet\r\n         nil\r\n       end\r\n     else\r\n-      '\/opt\/puppetlabs\/puppet\/vendor_modules'\r\n+      Puppet.run_mode.vendor_module_dir\r\n     end\r\n   end\r\n \r\ndiff --git a\/lib\/puppet\/util\/run_mode.rb b\/lib\/puppet\/util\/run_mode.rb\r\nindex da1af047e2..78acbd0231 100644\r\n--- a\/lib\/puppet\/util\/run_mode.rb\r\n+++ b\/lib\/puppet\/util\/run_mode.rb\r\n@@ -81,6 +81,10 @@ module Puppet\r\n       def log_dir\r\n         which_dir(\"\/var\/log\/puppetlabs\/puppet\", \"~\/.puppetlabs\/var\/log\")\r\n       end\r\n+\r\n+      def vendor_module_dir\r\n+        \"\/opt\/puppetlabs\/puppet\/vendor_modules\"\r\n+      end\r\n     end\r\n \r\n     class WindowsRunMode < RunMode\r\n```\r\n\r\nThoughts @joshcooper? IMO we should centralize hardcoded defaults in a single place if possible.\r\n\r\n@ekohl can you open a PUP ticket to track this issue?","> @ekohl can you open a PUP ticket to track this issue?\r\n\r\nI think so, but right now I'm swamped with other work.","> @ekohl can you open a PUP ticket to track this issue?\r\n\r\nBetter late than never? https:\/\/github.com\/puppetlabs\/puppet\/pull\/8938 is the first bit of work that I think can be reviewed and (hopefully) merged."],"labels":["enhancement"]},{"title":"(PUP-1353) Start Posix based services with a 0 priority","body":"Puppet's base service provider starts services as a child process of the\r\nPuppet process. On Posix systems the child process inherits the priority\r\nor nice value of the parent process. The result is that services which\r\nare started as child processes of Puppet have their priority set to\r\nPuppet's priority. This behavior is undesirable as services expect to\r\nbe started with a 0 or normal priority. This commit ensures services are\r\nstarted with a normal priority by changing the priority of the child\r\nprocess when starting a service.\r\n\r\nExample of old & new behavior on Debian Wheezy:\r\n\r\n  ; git checkout master\r\n  Switched to branch 'master'\r\n  Your branch is up-to-date with 'origin\/master'.\r\n\r\n  ; sudo \/etc\/init.d\/ntp stop\r\n  Stopping NTP server: ntpd.\r\n\r\n  ; nice -n 13 sudo bundle exec puppet apply -e 'service { \"ntp\": ensure => \"running\" }'\r\n  Notice: Compiled catalog for foo in environment production in 0.12 seconds\r\n  Notice: \/Stage[main]\/Main\/Service[ntp]\/ensure: ensure changed 'stopped' to 'running'\r\n  Notice: Applied catalog in 0.05 seconds\r\n\r\n  ; ps -C ntpd -o pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,wchan:14,comm\r\n    PID   TID CLS RTPRIO  NI PRI PSR %CPU STAT WCHAN          COMMAND\r\n  30269 30269 TS       -  13   6   6  0.0 SNs  -              ntpd\r\n\r\n  ; git checkout service_priority\r\n  Switched to branch 'service_priority'\r\n  Your branch is up-to-date with 'origin\/service_priority'.\r\n\r\n  ; sudo \/etc\/init.d\/ntp stop\r\n  Stopping NTP server: ntpd.\r\n\r\n  ; nice -n 13 sudo bundle exec puppet apply -e 'service { \"ntp\": ensure => \"running\" }'\r\n  Notice: Compiled catalog for foo in environment production in 0.11 seconds\r\n  Notice: \/Stage[main]\/Main\/Service[ntp]\/ensure: ensure changed 'stopped' to 'running'\r\n  Notice: Applied catalog in 0.04 seconds\r\n\r\n  ; ps -C ntpd -o pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,wchan:14,comm\r\n    PID   TID CLS RTPRIO  NI PRI PSR %CPU STAT WCHAN          COMMAND\r\n  30536 30536 TS       -   0  19  10  0.0 Ss   -              ntpd","comments":["Can one of the admins verify this patch?","CLA signed by all contributors.","updated to fix the tests, apologies for missing that with my first commit.","Would anyone be able to help me debug the windows build failure via AppVeyor, I don't have access to a Windows test box at present. All the tests passed but rspec exited 1 and the build failed.","Thanks @lollipopman! I'm \ud83d\udc4d with the general PR, and had a few minor comments:\r\n\r\n* The PR would cause a behavior change by default, as services would be executed at `normal` priority instead of the priority of the puppet (parent) process. Since puppet has worked this way for a long time, someone may be relying on the current behavior. Insert favorite xkcd \"you broke my workflow\" quote here.\r\n* I'm thinking we should define a `priority` parameter on the service type and have it default to `nil` to mean the current behavior (run at the same priority as puppet). But allow users to specify a priority, so in `lib\/puppet\/type\/service.rb`, add\r\n  ```ruby\r\n  newparam(:priority) do\r\n    newvalues(:high, :normal, etc)\r\n  end\r\n  ```\r\n* In the [service provider](https:\/\/github.com\/puppetlabs\/puppet\/pull\/7520\/files#diff-3a3448a9348485951b985fbcc2ab03a1R32), lookup the current priority from `@resource[:priority]`, and only call `setpriority` if the value is non-nil.\r\n* I agree with @jtappa about moving the priority map from settings to `Puppet::Util::Limits`, and having settings and service type call that.\r\n","Hi @lollipopman! Just checking in on this PR to make sure we keep community PRs moving along. Did you still want to work on this based on @joshcooper's and my feedback?\r\n\r\nThanks!","@lollipopman we recently received a ticket where execute blows up when Puppet Server doesn't know about options or how to handle them. We need to make sure Puppet Server doesn't break if someone calls `execute` with a priority. This PR may need some updates related to that.","@jtappa thanks, I'll see if I can find some time to work on this in the next couple of weeks","Because of the nature of our APIs, any changes we make here need to also happen in Puppet Server and right now we don't have the bandwidth between teams to coordinate the changes. We do agree this change is reasonable and something we'd like to include eventually but unfortunately right now we can't move forward with it.","Kicking Travis","[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=7520) <br\/>All committers have signed the CLA."],"labels":["blocked"]},{"title":"(PUP-3169) Puppet::Util::Execution.execute should support IO pipes","body":"","comments":["Can one of the admins verify this patch?","Waiting for CLA signature by @PaulSD\n\n@PaulSD - We require a Contributor License Agreement (CLA) for people who contribute to Puppet, but we have an easy click-through license with instructions, which is available at https:\/\/cla.puppet.com\/\n\nNote: if your contribution is trivial and you think it may be exempt from the CLA, please post a short reply to this comment with details. http:\/\/docs.puppet.com\/community\/trivial_patch_exemption.html\n","I've signed the CLA, but the CLA confirmation emails don't seem to be working (I've tried multiple email domains, and none seem to receive anything).","CLA signed by all contributors.","Thanks for the PR @PaulSD.\r\n\r\nOne thing I noticed is that this ticket was closed last year. What is the intent of adding this functionality to core Puppet? Do you have type \/ provider Ruby code that's trying to make use of this internal Puppet API?","Yes, I have a provider that is calling a command and needs to pass data to it via stdin, preferably without writing that data to a temporary file first:\r\nhttps:\/\/github.com\/theforeman\/puppet-certs\/pull\/188\/commits\/50c55d326ddbe94d766b7dba4ab8a8fd599a1951#diff-15338bfa9c9053abd23a388f246c69fbR232","@PaulSD some conflicts need resolving.","@joshcooper I've addressed your comments. Thanks!","@joshcooper any remaining concerns?  The conflicts appear to be resolved.  Thanks!","Pinging @joshcooper for another look, and @PaulSD for a rebase to resolve conflicts please!","Rebased.","Ping @joshcooper is this good to go? We can do the rebase if it is.","@jtappa Rebased","Hi @PaulSD we recently received a ticket where execute blows up when Puppet Server doesn't know about options or how to handle them. This PR may need some updates related to that. We need to make sure both Puppet Agent and Puppet Server handle the new API correctly.","No problem, just let me know what is needed.","Because of the nature of the APIs, any changes we make here need to also happen in Puppet Server and right now we don't have the bandwidth between teams to coordinate the changes. We do agree this change is reasonable and something we'd like to include eventually but unfortunately right now we can't move forward with it. ","Kicking Travis","[![CLA assistant check](https:\/\/cla-assistant.io\/pull\/badge\/signed)](https:\/\/cla-assistant.io\/puppetlabs\/puppet?pullRequest=6884) <br\/>All committers have signed the CLA."],"labels":["blocked"]}]