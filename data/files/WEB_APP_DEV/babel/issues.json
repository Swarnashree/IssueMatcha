[{"title":"fix: TypeScript annotation affects output","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #16375 <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          | \u221a\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | \u221a\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nChanges in `traverse`, I'm not sure if anyone uses it, but this has been unreliable before.","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/56569"],"labels":["PR: Bug Fix :bug:"]},{"title":"[Bug]: TypeScript annotation that contains the name of the annotated class method changes final output","body":"### Input code\r\n\r\n[REPL link](https:\/\/babeljs.io\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=true&code_lz=KYDwDg9gTgLgBAYwDYEMDOa4BEUxQI3WDgG8AoOOGKFAOzRQRgEsJaAKCyuAeh7gCSAMyoALYjACeYYnVoQ8LNnHFRiCNnmb0xxAFS0UAW2IQRMcXBMWIAEz1dKfXbTjN4CUXQDmwTKIgAd10rYBtbN0wNIzBmJGBbADo4ACVgQxM4AANqOgYmVlosx15-fGAkILg6CLRgYgDgi1MAVxgwNsQvWl80RJKEFCQkQgQAawAuOHZc-kYlWimAFRo5grYASjgAXgA-OBbaMflA2gAaLi3ybjg1GBaoVwtmPrx8eMTZ_IXOG8p2EBbPaIIYjRhjdi0YDBHAQFZ5eaFAEbDYXG4bADcXAAvmRcUA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Ctypescript&prettier=false&targets=Node-2&version=7.24.0&externalPlugins=&assumptions=%7B%7D)\r\n\r\n```ts\r\nexport class Database {\r\n  transaction(\r\n    \/\/ If the type annotation here contains the *name of the method*\r\n    \/\/ then it changes how the method is compiled. Rename `transaction`\r\n    \/\/ below and see how the output changes.\r\n    callback: (transaction: Transaction) => unknown,\r\n  ) {\r\n    return this.table.transaction(\r\n      (x) => callback(new DaoTransaction(x)),\r\n    );\r\n  }\r\n}\r\n\r\n```\r\n\r\n\r\n### Current and expected behavior\r\n\r\nThis is a class method called `transaction` that has a parameter called `callback`, which has the following type annotation\r\n```ts\r\ncallback: (transaction: Transaction) => unknown\r\n```\r\nnote that the parameter in the TypeScript annotation is called `transaction`, like the name of the method the parameter is defined for. \r\n\r\nThe TypeScript annotation **should not affect how the code is compiled** but what I've noticed is that the output is much different **when the annotation contains the name of the method**. When thats the case it outputs:\r\n```js\r\n_proto.transaction = function (_transaction) {\r\n    function transaction(_x) {\r\n      return _transaction.apply(this, arguments);\r\n    }\r\n    transaction.toString = function () {\r\n      return _transaction.toString();\r\n    };\r\n    return transaction;\r\n  }(function (\r\n  \/\/ If the type annotation here contains the *name of the method*\r\n  \/\/ then it changes how the method is compiled. Rename `transaction`\r\n  \/\/ below and see how the output changes.\r\n  callback) {\r\n    return this.table.transaction(function (x) {\r\n      return callback(new DaoTransaction(x));\r\n    });\r\n  });\r\n  ```\r\n  \r\n but if you were to remove the annotation or rename the parameter like\r\n ```ts\r\ncallback: (t: Transaction) => unknown\r\n```\r\nthen the output is much simpler, skipping the wrapping function that writes `toString` for whatever reason\r\n```js\r\n _proto.transaction = function transaction(\r\n  \/\/ If the type annotation here contains the *name of the method*\r\n  \/\/ then it changes how the method is compiled. Rename `transaction`\r\n  \/\/ below and see how the output changes.\r\n  callback) {\r\n    return this.table.transaction(function (x) {\r\n      return callback(new DaoTransaction(x));\r\n    });\r\n  };\r\n  ```\r\n\r\n\r\n### Environment\r\n\r\nSee: the REPL link\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @aweary! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: needs triage"]},{"title":"Improve `super.x` output","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | `Fixes #1, Fixes #2` <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nI personally don't like having to call `getPrototypeOf` every time because it's slow, but we have a test that relies on this behavior.\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/30521560\/31079817-1ac8-493d-84c6-131a3ef7e833)\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/56568"],"labels":["PR: Output optimization :microscope:"]},{"title":"[Bug]: Exception when combining a decorated class, a decorated method, and a static field","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@rollup\/plugin-babel\n\n### Input code\n\n```js\r\nfunction decorate() {\r\n  return function (target, context) {}\r\n}\r\n\r\n@decorate() \/\/ this does not have to be the same decorator as on the method\r\nclass Test {\r\n  static something = 42;\r\n  @decorate() \/\/ this does not have to be the same decorator as on the class\r\n  method() {}\r\n}\r\n```\n\n### Configuration file name\n\nbabel.config.mjs\n\n### Configuration\n\n```js\r\n\/* eslint-env node *\/\r\n\r\nconst config = {\r\n  presets: [[\"@babel\/preset-env\", {}], \"@babel\/preset-typescript\"],\r\n};\r\n\r\nif (process.env.NODE_ENV === \"test\") {\r\n  config.plugins = [\r\n    [\r\n      \"@babel\/plugin-proposal-decorators\",\r\n      {\r\n        version: \"2023-11\",\r\n      },\r\n    ],\r\n  ];\r\n}\r\n\r\nexport default config;\r\n```\n\n### Current and expected behavior\n\nCurrent behavior: The code above results in `TypeError: _initClass is not a function`. This happens in my current setup when I combine a decorated class, a decorated method, and a static field. Removal of any of the aforementioned elements prevents the error from occurring.\r\n\r\nExpected behavior: no exceptions.\n\n### Environment\n\nSystem:\r\n    OS: Linux 6.5 Ubuntu 22.04.4 LTS 22.04.4 LTS (Jammy Jellyfish)\r\n  Binaries:\r\n    Node: 20.11.0 - ~\/.volta\/tools\/image\/node\/20.11.0\/bin\/node\r\n    npm: 10.2.4 - ~\/.volta\/tools\/image\/node\/20.11.0\/bin\/npm\r\n  npmPackages:\r\n    @babel\/cli: ^7.22.5 => 7.24.1 \r\n    @babel\/core: ^7.22.1 => 7.24.3 \r\n    @babel\/plugin-proposal-decorators: ^7.22.3 => 7.24.1 \r\n    @babel\/preset-env: ^7.22.4 => 7.24.3 \r\n    @babel\/preset-typescript: ^7.21.5 => 7.24.1 \r\n    eslint: ^8.41.0 => 8.57.0 \n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @SirPepe! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Mhh, I cannot reproduce this on the repl :thinking: \r\n\r\nhttps:\/\/babeljs.io\/repl#?browsers=chrome%20120&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=GYVwdgxgLglg9mABAEwKYTgJwIZVQCgEpEBvAKEUU1ShEyVElgUXym0wHMaAaRDMHgAeUYiQC-ZSWQACaDDjxFEAehWIoACxgBnFHFR6wcKIk3YAbqg1xEAI2tbrO7AFtr8rLiyJselk6I7lpwyGQQADZ-egAqhqbklDrssBCIOnDB2mCciAC8iAAsAEwA3BSIcuheSsRqGtp6yAZGJmaWjrYODc5uHtWKPn6IAZrWkdEVWaHKElJkZGCoAO6IcclEZEA&debug=false&forceAllTransforms=false&modules=commonjs&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=&prettier=false&targets=&version=7.24.3&externalPlugins=%40babel%2Fplugin-proposal-decorators%407.24.1&assumptions=%7B%7D\r\n\r\nIf I copy the generated code and run it, it doesn't throw.\r\n\r\nCould you share a runnable example?","I stripped almost everything from my project: https:\/\/github.com\/SirPepe\/babel-decorators-repro\r\n\r\nRunning `npm run build` with the static field *included* results the following code:\r\n\r\n```\r\nfunction _identity(x) {\r\n  return x;\r\n}\r\n\r\nlet _initClass;\r\nlet _Test;\r\nnew class extends _identity {\r\n  something = 42;\r\n  constructor() {\r\n    super(_Test), _initClass();\r\n  }\r\n}();\r\n\r\nexport { _Test as Test };\r\n```\r\n\r\n`_initClass()` is obviously not going to work. If I *remove* the static field from `index.ts`, `_initClass()` is there, alongside all the other helper functions that I would expect.","As a workaround, please set the typescript preset option `allowDeclareFields: true`. It will be defaulted to `true` in Babel 8 anyway.\r\n\r\nThis is essentially a plugin ordering issue: the typescript transform currently runs after the decorator transform, so the `applyDecs` call inserted in a temporary property is removed by the typescript transform, because historically ts doesn't use [[define]] for fields."],"labels":["i: bug","Spec: Decorators","area: plugin ordering"]},{"title":"[Bug]: Babel TypeScript syntax throws with error recovery enabled where offical does not","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n```ts\r\nparse(\"foo.\", { errorRecovery: true })\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nCurrently getting `SyntaxError`.\r\n\r\nExpected the parser to allow empty identifiers in error recovery mode, like TypeScript's parser does:\r\nhttps:\/\/ts-ast-viewer.com\/#code\/GYexDog\r\n\r\nSimilar to the other syntax errors as listed in the release notes about error recovery:\r\nhttps:\/\/babeljs.io\/blog\/2019\/11\/05\/7.7.0#parser-error-recovery-10363\r\n\r\nThis is crucial to get auto completion to work as expected.\n\n### Environment\n\n- System:\r\n  - OS: Linux 6.5 Ubuntu 22.04.4 LTS 22.04.4 LTS (Jammy Jellyfish)\r\n- Binaries:\r\n  - Node: 20.8.1 - ~\/.nvm\/versions\/node\/v20.8.1\/bin\/node\r\n  - npm: 10.1.0 - ~\/.nvm\/versions\/node\/v20.8.1\/bin\/npm\r\n  - pnpm: 8.12.1 - ~\/.nvm\/versions\/node\/v20.8.1\/bin\/pnpm\r\n  - bun: 1.0.21 - ~\/.nvm\/versions\/node\/v20.8.1\/bin\/bun\r\n- npmPackages:\r\n  - @babel\/core: ^7.23.3 => 7.23.3 \r\n  - @babel\/parser: ^7.24.1 => 7.24.1 \r\n  - @babel\/plugin-proposal-async-do-expressions: ^7.23.3 => 7.23.3 \r\n  - @babel\/plugin-proposal-do-expressions: ^7.23.3 => 7.23.3 \r\n  - @babel\/plugin-proposal-throw-expressions: ^7.23.3 => 7.23.3 \r\n  - @babel\/plugin-syntax-typescript: ^7.23.3 => 7.23.3 \r\n  - @babel\/preset-env: ^7.23.6 => 7.23.6 \r\n  - @babel\/preset-react: ^7.23.3 => 7.23.3 \r\n  - @babel\/preset-typescript: ^7.23.3 => 7.23.3 \r\n  - babel-plugin-module-resolver: ^5.0.0 => 5.0.0\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nI have a dialect of TypeScript that compiles to TypeScript to get language features supported like types and auto completion and I use Babel to do this compilation. So even if TypeScript can deal with `foo.` just fine, if Babel does not, my language features fail too work.","comments":["Hey @msteen! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: needs triage"]},{"title":"Fix incorrect function hoisting in some case statements","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Mitigates #14960\r\n| Patch: Bug Fix?          | Yes\r\n| Major: Breaking Change?  | No\r\n| Minor: New Feature?      | No\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  | No\r\n| License                  | MIT\r\n\r\nThe linked issue https:\/\/github.com\/babel\/babel\/issues\/14960 shows a case where babel breaks the behavior of a code snippet:\r\n\r\n```js\r\nswitch ('what') {\r\ndefault:\r\n    console.log(a())\r\n    function a() { return 1; }\r\n}\r\n```\r\n\r\nThe issue is that `function a() {}` gets converted into `var a = function() {}`, but isn't hoisted to the top as it should. Babel currently hoists functions correctly when they are in block statements, but not in case statements.\r\nFixing this problem in **all** cases is difficult, due to the issue pointed to in an answer to that ticket:\r\n\r\n```js\r\nswitch (x) {\r\n  case 0:\r\n    let num = 3;\r\n    log(0);\r\n  default:\r\n    log(1);\r\n    function log(s) { console.log(s || num) }\r\n}\r\n```\r\n\r\nIn the example above, moving log to the first case breaks the second, but keeping the log in the second case does not address the first.\r\n\r\nNevertheless, the current behavior is a problem. This Pull Request addresses this by hoisting the function to the start of the matching case. This does not address all issues, but it shouldn't break anything that isn't already broken, and it should fix issues as the function is \"more hoisted\" than it used to be. Notably, this fixes issues with functions that are only ever referenced in the same case that declares them, which is the case I encountered.","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/56548","jest failed, but I believe it has since been fixed by this: https:\/\/github.com\/jestjs\/jest\/pull\/14976","Yes :+1: ","> I'm not sure if changing `babel-plugin-transform-block-scoped-functions` would be better.\r\n\r\nIt could be done there too, but it would mean moving the logic of hoisting there.\r\nMoving it there seems doable, but it would mean the equivalent bug (if there is one) for \"Annex B.3.3\" code would not be fixed or would need a duplicated fix."],"labels":["PR: Bug Fix :bug:"]},{"title":"[Bug]: The internal class binding captured in element decorators should not be mutated","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n```js\r\n{\r\n  const errs = [];\r\n  const fns = [];\r\n  const captureAndAssertUninitialized = function (fn) {\r\n    fns.push(fn);\r\n    try {\r\n      fn();\r\n    } catch (err) {\r\n      errs.push(err);\r\n    } finally {\r\n      return v => v;\r\n    }\r\n  }\r\n\r\n  @captureAndAssertUninitialized(() => C)\r\n  class C {\r\n    @captureAndAssertUninitialized(() => C) [captureAndAssertUninitialized(() => C)]\r\n  }\r\n\r\n  console.log(errs, fns.map(fn => fn()));\r\n\r\n  C = null;\r\n\r\n  console.log(fns.map(fn => fn()));\r\n}\r\n```\r\n[REPL](https:\/\/babeljs.io\/repl\/build\/56517#?browsers=chrome%20120&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=ATDGHsDsGcBdgKYCcnWAXmAbQLoG4AoECGeAMxg23yLCjmAENpplYA5cWASUgEtYfRgBs-ALwQATAIKRJAYUYAHWAFckCKmVWRQgqMAAUFAJTAA3rRAVoAOiWroAC2OQThECFhIAnhaueFIbuAQC-YIywoE5GyEhmlp6ecXYOzoZxIUnhZHyQIsJ-iUnAGmpIkMAAbhgAfNUenqG0zbQAAsysSBxcvAJCohIycooq6giGwXXA8ia0oMKdM_5JHSxsnDz8giLiUrIKyuUTU-j1s9idG73bA3vDh2Mak2ZnMyY4LQTz9ODCCLZhOAAOYZFDQAA0wBstgAtspXNMgiYUYRaPIqJBVMJhGjiL9_oCQa47PClIi3sjUUA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env&prettier=false&targets=&version=7.24.0%2Bpr.16350&externalPlugins=%40babel%2Fplugin-proposal-decorators%407.23.9&assumptions=%7B%7D)\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n```json\r\n{\r\n  \"plugins\": [[\"proposal-decorators\", { \"version\": \"2023-11\" }]]\r\n}\r\n```\n\n### Current and expected behavior\n\nCurrent:\r\n\r\nThe first `console.log` prints `[ReferenceError], [C, C, C]`, the second `console.log` prints `[null, null, null]`.\r\n\r\nExpected:\r\n\r\nThe first `console.log` should print `[ReferenceError, ReferenceError, ReferenceError], [C, C, C]`,\r\nbecause decorators and computed keys are evaluated before the class binding is bound. \r\n\r\nThe second `console.log` should print `[null, C, C]`, because `C` within the class decorators points to the mutable binding created in BindingClassDeclarationEvaluation, while `C` in the element decorators and computed keys point to the internal immutable class binding.\n\n### Environment\n\nREPL\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nThis is the point 6 of https:\/\/github.com\/babel\/babel\/issues\/16117.","comments":["Hey @JLHwung! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: bug","Spec: Decorators"]},{"title":"[Bug]: sourceCode.getScope is not a function (`@babel\/eslint-plugin`)","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```\r\n\/\/ na\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nThis issue is concerning `eslint` and `@babel\/eslint-plugin`.\r\n\r\nWhen upgrading ESLint to `8.37.0`, the following lint error can be observed. When using `8.36.0` linting works as expected.\r\n\r\n```\r\nsourceCode.getScope is not a function\r\nOccurred while linting \/Users\/username\/folder\/index.js:1\r\nRule: \"@babel\/no-invalid-this\"\r\n```\r\n\r\n[Release notes for `8.37.0`](https:\/\/github.com\/eslint\/eslint\/releases\/tag\/v8.37.0)\r\n\r\nI suspect the cause of the issue could be [`feat: Copy getScope() to SourceCode`](https:\/\/github.com\/eslint\/eslint\/pull\/17004).\n\n### Environment\n\npackage.json\r\n```\r\n\"@babel\/core\": \"7.24.0\",\r\n\"@babel\/eslint-parser\": \"7.23.10\",\r\n\"@babel\/eslint-plugin\": \"7.23.5\",\r\n\"@babel\/preset-react\": \"7.23.3\",\r\n\"eslint\": \"8.37.0\",\r\n```\r\n\r\n.eslintrc\r\n```\r\n{\r\n  \"rules\": {\r\n    \"new-cap\": 0,\r\n    \"@babel\/new-cap\": 2,\r\n      \r\n    \"no-invalid-this\": 0,\r\n    \"@babel\/no-invalid-this\": 2,\r\n      \r\n    \"no-unused-expressions\": 0,\r\n    \"@babel\/no-unused-expressions\": 2,\r\n      \r\n    \"object-curly-spacing\": 0,\r\n    \"@babel\/object-curly-spacing\": [2, \"always\"],\r\n      \r\n    \"semi\": 0,\r\n    \"@babel\/semi\": [2, \"never\"],\r\n  },\r\n  \"plugins\": [\r\n    \"@babel\"\r\n  ]\r\n}\r\n```\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @01taylop! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","When using with ESLint 8, `@babel\/no-invalid-this` delegates the rule to ESLint's built-in `no-invalid-this` rule since ESLint 8 supports class properties well:\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/5ca9b9a84f5f06d16704c53717c9baae2b347839\/eslint\/babel-eslint-plugin\/src\/rules\/no-invalid-this.cjs#L7-L11\r\n\r\nYou can try to remove the `@babel\/no-invalid-this` rule and use `no-invalid-this`. If the error persists, that would be more like an ESLint regression.","That's good to know, thank you! The same applies to `@babel\/semi` so I made a similar change to my config.\r\n\r\nI must have missed this because I upgraded `@babel\/eslint-plugin` before upgrading to ESLint 8. We could look at updating the docs\/README.md to better highlight the rules being delegated.\r\n\r\nUnfortunately, however, changing these two rules exposes a similar issue in the `@babel\/object-curly-spacing` rule:\r\n\r\n```\r\nCannot read properties of undefined (reading 'getFirstToken')\r\n```\r\n\r\nThis error occurs from ESLint version [`8.40.0`](https:\/\/github.com\/eslint\/eslint\/releases\/tag\/v8.40.0) onwards, `8.39.0` is fine. Still investigating the cause of this - there is nothing obvious that stands out in the Release Notes.","Do you have a repo we can clone to reproduce the error?"],"labels":["i: needs triage"]},{"title":"[Bug]: plugin-transform-regenerator together with async-to-generator incorrectly shadow function name in local scope","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@babel\/cli\r\n\r\n### Input code\r\n\r\nI have a REPL of the large minified build where we encountered the bug. Unfortunately, while I could track down the incriminated plugins, I haven't managed to single out a smaller portion of code where the bug could be reproduced.\r\n\r\n[REPL](https:\/\/drive.proton.me\/urls\/N50FRZCJNM#mP9DtYNhYgUS)\r\n\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n`npx babel --plugins=@babel\/plugin-transform-destructuring,@babel\/plugin-transform-for-of,@babel\/plugin-transform-spread,@babel\/plugin-transform-classes,@babel\/plugin-transform-regenerator, @babel\/plugin-transform-regenerator, @babel\/plugin-transform-async-to-generator`\r\n\r\n### Current and expected behavior\r\n\r\nCurrent (line references based on the REPL): the class `n` declared at L7 and instantiated in the function `Rr` at L3297 of the original code is shadowed by a var declaration in the transformed code (at L5599). As a result, the instantiation fails due to `n` being undefined.\r\n\r\nExpected: the var declaration uses a different name.\r\n\r\n\r\n### Environment\r\n\r\n    Babel: 7.23.9 (@babel\/core 7.23.9)\r\n    OS: macOS 12.7.2\r\n    Node: 20.11.0\r\n    Yarn: 4.1.0 \r\n    npm: 8.15.0\r\n\r\n### Possible solution\r\n\r\nNot really a solution, but excluding either `@babel\/plugin-transform-async-to-generator` or `@babel\/plugin-transform-regenerator` fixes the issue.\r\n\r\n### Additional context\r\n\r\nI noticed that dropping the code after the affected function (`Rr`) results in a correct transformation, hence something in the rest of the code must be playing a role too.","comments":["Hey @larabr! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: needs triage"]},{"title":"Remove `privateFieldsAsProperties` support in Babel 8","body":"Ref: https:\/\/github.com\/babel\/babel\/issues\/15389\r\nThere was a bug, and we fixed it by introducing `privateFieldsAsSymbols`.\r\nMaybe we can remove it in Babel 8.","comments":[],"labels":["i: discussion","babel 8"]},{"title":"Consider warning when `transform-runtime`'s `version` is not speficied","body":"Ideally, users should always set the [`version`](https:\/\/babeljs.io\/docs\/babel-plugin-transform-runtime#version) option to getter smaller output. \r\n\r\nRelated: https:\/\/github.com\/babel\/babel\/pull\/10325, to warn if the version is specified but it does not match the one in `package.json`.","comments":[],"labels":["babel 8"]},{"title":"Improve output when `privateFieldsAsProperties` or `privateFieldsAsSymbols`","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | `Fixes #1, Fixes #2` <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n`attempted to use private field on non-instance` is now replaced by throwing `TypeError: this[_privateMethod] is not a function`, which I think does not matter since this is not in `spec` mode.\r\n\r\nContains https:\/\/github.com\/babel\/babel\/pull\/16312, please only view the last commit, it does not require blocking release.\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/56537"],"labels":["PR: Output optimization :microscope:"]},{"title":"[Bug]: BABEL_PARSE_ERROR regarding duplicate function definitions","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\nfunction* countDown(begin) {\r\n    while (begin >= 0) {\r\n        yield begin--;\r\n    }\r\n}\r\nvar begin;\r\nfunction* func1() {\r\n    yield 'aha';\r\n    yield 'ihi';\r\n    yield 'uhu';\r\n}\r\nfor (const e of func1())\r\n    for (const e of countDown(10)) {\r\n        console.log(e);\r\n    }\r\nfunction* countDown(begin) {\r\n    while (begin >= 0) {\r\n        yield begin--;\r\n    }\r\n}\r\nfor (const e of countDown(10)) {\r\n    console.log(e);\r\n\r\n}\n\n### Configuration file name\n\n.babelrc\n\n### Configuration\n\n{\r\n  \"presets\": [\"@babel\/preset-env\"],\r\n  \"plugins\": []\r\n}\n\n### Current and expected behavior\n\nI am using babel to run the code,and here is the error reported:Syntax error,Identifier \"CountDown\" has already been declared.\r\n To my knowledge, in JavaScript, when a function is declared repeatedly, the function declaration defined later will overwrite the previous function declaration. Therefore, I believe that the code I provided is grammatically compliant, but Babel refuses to translate this code. Is this because Babel believes there is a syntax error in this code? Please explain this issue to me, thank you\n\n### Environment\n\nBabel:v7.23.9\r\nnode.js : v21.6.1\r\nnpm: v10.2.4\r\nUbuntu: v20.04\r\n\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @Roise-yue! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Please check if the source code type is set to `module`, duplicate declarations are not allowed in strict mode.\r\n[repl](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=usage&corejs=3.21&spec=false&loose=false&code_lz=GYVwdgxgLglg9mAVAAgncUAicDuYAUARgKYDmMYAlMgN4BQOAFjADbHJFkXIB8AvMgAM1egE8YxFgBNkJcmAC0CgNx0AvuroA3AIYAnWVzCrQkWAhSmIARnwi64yTIDkOxjuerH05M5jNPBwkfZxBGEECNYDgDfDQwAGcoZHY4YGQrW0pKOmjY-KSU5DTUdDAsXAJrYXsCuDYAOhY4UnxiSlUo8Gh4JFKMbDxOeXsmVnZh7n4he28ZOQolTs08jgLk1PS0Acr8auzaOjrG5tb21XUgA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=unambiguous&lineWrap=false&presets=typescript&prettier=false&targets=&version=7.23.10&externalPlugins=%40babel%2Fplugin-proposal-decorators%407.23.9&assumptions=%7B%7D)","> Please check if the source code type is set to `module`, duplicate declarations are not allowed in strict mode. [repl](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=usage&corejs=3.21&spec=false&loose=false&code_lz=GYVwdgxgLglg9mAVAAgncUAicDuYAUARgKYDmMYAlMgN4BQOAFjADbHJFkXIB8AvMgAM1egE8YxFgBNkJcmAC0CgNx0AvuroA3AIYAnWVzCrQkWAhSmIARnwi64yTIDkOxjuerH05M5jNPBwkfZxBGEECNYDgDfDQwAGcoZHY4YGQrW0pKOmjY-KSU5DTUdDAsXAJrYXsCuDYAOhY4UnxiSlUo8Gh4JFKMbDxOeXsmVnZh7n4he28ZOQolTs08jgLk1PS0Acr8auzaOjrG5tb21XUgA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=unambiguous&lineWrap=false&presets=typescript&prettier=false&targets=&version=7.23.10&externalPlugins=%40babel%2Fplugin-proposal-decorators%407.23.9&assumptions=%7B%7D)\r\n\r\nThank you for your answer. After checking, I found that the code is not in strict mode, maybe there are other reasons.","Can you add `\"sourceType\": \"script\"` to your Babel config to actually force Babel to parse the file as a script and not as a module?"],"labels":["i: needs triage"]},{"title":"[Bug]: The source code is indented to 4 Spaces, babel translated into 2","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\n```\r\nvar babel = require(\"@babel\/core\");\r\nvar code = `\r\n    var a = {\r\n        name: '',\r\n        age: '',\r\n    };\r\n`;\r\n\r\nconst result = babel.transform(code, {\r\n    retainLines: true,\r\n    compact: false,\r\n    configFile: false,\r\n    babelrc: false,\r\n    comments: true,\r\n    ast: true,\r\n});\r\nconsole.log(result.code);\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nThe source code is indented to 4 Spaces, babel translated into 2, **how can you keep the source code format?**\r\n\r\nThis is the compiled result\uff1a\r\n```\r\nvar a = {\r\n  name: '',\r\n  age: ''\r\n};\r\n```\r\n\r\nI was hoping\uff1a\r\n```\r\n    var a = {\r\n        name: '',\r\n        age: '',\r\n    };\r\n```\r\n\n\n### Environment\n\n \"@babel\/core\": \"^7.22.10\",\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @peacejj! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","https:\/\/github.com\/babel\/babel\/blob\/5c246eaa1fe2c2bf4b56b2b0babb166215dbc132\/packages\/babel-generator\/src\/index.ts#L39\r\nI'm surprised this is private.\r\n\r\nCurrently Babel does not support this.","Babel does not attempt in any way to preserve the original formatting. I suggest running Babel's output through prettier, `eslint --fix`, or another formatter.\r\n\r\nAnother roption is to try using Recast with Babel: I did something similar at https:\/\/github.com\/nicolo-ribaudo\/codemods\/blob\/40e90e3ad6e2db91fd7756bcce68bfefd373a3a3\/src\/utils.js#L32","Recast is not maintained, you can use [`@putout\/printer`](https:\/\/github.com\/putoutjs\/printer) it is made for Babel AST and has lots of configurations."],"labels":["pkg: generator","i: enhancement"]},{"title":"[Discussion] Remove `flow` support from `@babel\/parser`","body":"This is a very open-ended discussion, since it might be a too big breaking change.\r\n\r\nIn the past couple years, Flow kept evolving but new features have never been added to `@babel\/parser`. This used to be done mostly by PR by the Flow team themselves, and sometimes by us from the Babel team.\r\n\r\nI was reading the release post for Flow's new [`as` type casts support](https:\/\/www.npmjs.com\/package\/babel-plugin-syntax-hermes-parser), and I finally discovered why (note: if I were a flow user, I would probably have discovered much earlier \ud83d\ude05). The Flow team maintains their own parser, that can be used in Babel via [`babel-plugin-syntax-hermes-parser`](https:\/\/www.npmjs.com\/package\/babel-plugin-syntax-hermes-parser).\r\n\r\nI think we should consider just dropping support for Flow in our own parser, and instead officially recommend their plugin in our docs. `@babel\/plugin-syntax-flow` has 12M weekly downloads (https:\/\/www.npmjs.com\/package\/@babel\/plugin-syntax-flow), and arguably all these users should migrate to the official parser which currently has 8k downloads per week.\r\n\r\nMaybe we should also drop our `@babel\/preset-flow`, or upgrade it to use `babel-plugin-syntax-hermes-parser`?\r\n\r\nPinging a bunch of random people that will probably have something to contribute to the discussion given the projects y'all work on :)\r\n\r\n- @sosukesuzuki @fisker (Prettier)\r\n- @gkz (Flow)\r\n- @kelset @cortinico @motiz88 (React Native)\r\n- @tsapeta (Expo)","comments":["I think the Prettier team is fine with removing Flow support from Babel. This is because support for using the official flow-parser remains.","Same for the Expo team. We don't use Flow at all, we bet on TypeScript \ud83d\ude42 It's mostly the question to folks from React Native team where Flow is used extensively.\r\nBesides that, it sounds like a good idea \ud83d\udc4d ","Microsoft-wise, I think we are fine with the approach you are proposing, like Expo we are all in on TS \ud83d\udc4d\r\n\r\nLet me ping a few more Meta folks so that we can make sure they will reply here.","From the React Native \/ Meta JS infra perspective this sounds fine to me too - indeed we use Hermes parser for Flow (almost) everywhere now.","`babel-plugin-syntax-hermes-parser` works by parsing with hermes-parser, and then replacing some of the newer syntax AST nodes that Babel doesn't know into `any` node. It doesn't do stripping of all types yet, although it can be done. We haven't done it yet since there are still some unfortunate transform code that will look at type annotations and do something different.\r\n\r\nIt will probably not be a problem if Babel stopped Flow's parsing support, but it will break things if you also removed those AST nodes and relevant type stripping transforms. ","@nicolo-ribaudo Its not clear to me what the proposal is here? Is it to just remove the parsing logic for Flow but maintain existing AST node, transformation, scope analysis and printing support or to strip all support for Flow syntax? Like @SamChou19815 said, the former is probably fine, the latter will break a large number of existing tools. e.g. [React doc gen](https:\/\/github.com\/reactjs\/react-docgen), [ReactNative codegen](https:\/\/github.com\/facebook\/react-native\/tree\/main\/packages\/react-native-codegen).","Yes, parsing only. Our flow parsing logic is effectively not maintained and there is a better alternative, so I was wondering whether we still need our parser implementation.\r\n\r\nOne option for now might be to add an option to `@babel\/preset-flow` to use the Hermes-based parser, to start encouraging mass migration and see if there are any problems.","I'm not sure what to do with the generator, it has always been consistent with the logic of the parser, and I'm worried that the generator will bring new complexity.\nAdditionally, the issues also exist in AST definitions and generators, which have not been updated.\nIf one day we have to add a new AST definition to make it work, I'm worried that overall it won't be easier than it is now.\n\n","> One option for now might be to add an option to @babel\/preset-flow to use the Hermes-based parser\r\n\r\nOk that makes sense and seems reasonable. There are a couple of issues i could see coming up with hermes-parser:\r\n- Our Babel AST is not fully consistent with the latest version of babel. We have versions of babel `7.2.0` around at Meta but the latest version of babel has naturally changed a bit, so we just pick an arbitrary AST format in between. We probably should allow a version to be passed so we can more precisely match the used version of babel.\r\n- We currently don't do comment attachment but i think we have a reasonable path forward here by reusing the prettier attachment logic like we do for our ESTree version of the AST.\r\n","For now we released 7.24.0 with a `experimental_useHermesParser` option in `@babel\/preset-flow`, hoping to get some more feedback if there are any problems."],"labels":["i: discussion","area: flow","pkg: parser"]},{"title":"[Bug]: failed to transform Class fields with `declare` modifier in TypeScript","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nOther (Next.js, Gatsby, vue-cli, ...)\r\n\r\n### Input code\r\n\r\n```ts\r\nconst decorator = (Class: new () => any, {}: ClassDecoratorContext) =>\r\n    class SubClass extends Class {\r\n        accessor field: Record<string, any> = {};\r\n    }\r\n\r\n@decorator\r\nexport class Example {\r\n    declare field: Record<string, any>;\r\n}\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n```js\r\nmodule.exports = {\r\n  presets: [\r\n    \/\/ https:\/\/babeljs.io\/docs\/babel-preset-typescript\r\n    [\r\n      '@babel\/preset-typescript',\r\n      {\r\n        allowDeclareFields: true,\r\n        allowNamespaces: true,\r\n        allExtensions: true,\r\n        isTSX: true,\r\n      },\r\n    ],\r\n    \/\/ https:\/\/babeljs.io\/docs\/babel-preset-react\r\n    [\r\n      '@babel\/preset-react',\r\n      {\r\n        runtime: 'automatic',\r\n        development: process.env.BABEL_ENV === 'development',\r\n      },\r\n    ],\r\n  ],\r\n  \/\/ https:\/\/babeljs.io\/docs\/babel-plugin-proposal-decorators#note-compatibility-with-babelplugin-transform-class-properties\r\n  plugins: [['@babel\/plugin-proposal-decorators', { version: '2023-05' }]],\r\n};\r\n```\r\n\r\n### Current and expected behavior\r\n\r\nExpect this error to be fixed:\r\n```text\r\nSyntaxError: Fields with the 'declare' modifier cannot be initialized here, but only in the constructor \r\n```\r\n\r\n### Environment\r\n\r\n```text\r\n  System:\r\n    OS: Windows 10 10.0.19045\r\n  Binaries:\r\n    Node: 18.17.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.19 - C:\\Program Files (x86)\\Yarn\\bin\\yarn.CMD\r\n    npm: 10.1.0 - C:\\Program Files\\nodejs\\npm.CMD\r\n    pnpm: 8.15.1 - C:\\Program Files\\nodejs\\pnpm.CMD\r\n  npmPackages:\r\n    @babel\/plugin-proposal-decorators: ^7.23.9 => 7.23.9\r\n    @babel\/preset-react: ^7.23.3 => 7.23.3\r\n    @babel\/preset-typescript: ^7.23.3 => 7.23.3\r\n    eslint: ^8.56.0 => 8.56.0\r\n    webpack: ^5.90.1 => 5.90.1\r\n```\r\n\r\n### Possible solution\r\n\r\nThe `throw` logic needs `node.value` existed, but my code has no value initialization with `declare`...\r\nhttps:\/\/github.com\/babel\/babel\/blob\/f856fc22d05bf886d1a58c5c91490e1af8f90c44\/packages\/babel-plugin-transform-typescript\/src\/index.ts#L143-L148\r\n\r\n### Additional context\r\n\r\nReal world code:\r\n1. https:\/\/github.com\/kaiyuanshe\/kaiyuanshe.github.io\/pull\/304\/files#diff-c2eb41018a917dc350b32b5f8633d8f7cbf1737c32bb0a4b5bfe77cab13f2fa7\r\n2. https:\/\/github.com\/kaiyuanshe\/OpenHackathon-Web\/pull\/210\/files#diff-2e17f0d5a3cb9ec641b2b936b7aaab6ac68eabb4cbc21958508ed9698b1de871R65-L73","comments":["Hey @TechQuery! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","[repl](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=usage&corejs=3.21&spec=false&loose=false&code_lz=MYewdgzgLgBAJgU1AJwIZRMmBeGAKAYQBtUIIAuGMBAd3wEocA-GVMATwBoYBvAX0rFSEACJJM6TAXBQEADyiNsTAFAx1MYCTIwAygFcARkJ3zZYOBBgmrPNRoepgwBGUwwAZgEsEROJQAlcWQ4AB5oZC8wAHNuNnYWXH4Abnt1PhUVAAFEFElkFXkAB0xYLWEYAFE5VABbIqIEXjT4JBJkJu9ffxgglDCIqNjWDiZUviA&debug=false&forceAllTransforms=false&modules=commonjs&shippedProposals=true&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=stage-3%2Ctypescript&prettier=false&targets=&version=8.0.0-alpha.2&externalPlugins=&assumptions=%7B%7D\r\n)\r\nI can't reproduce it in the repl, can you try?","> ### Additional context\r\n> Real world code: https:\/\/github.com\/kaiyuanshe\/kaiyuanshe.github.io\/pull\/304\/files#diff-c2eb41018a917dc350b32b5f8633d8f7cbf1737c32bb0a4b5bfe77cab13f2fa7\r\n\r\n@liuxingbaoyu Try this history code, you will get the error.","[repl](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=usage&corejs=3.21&spec=false&loose=false&code_lz=JYWwDg9gTgLgBAbzgYwuArjApgEzgXzgDMo04ByECAIwA9yBuAKFElkThoGcsoA3XgWKkQFKnQC0ULAENkMRi3DR4SbrwEAFUmC4BlGDOxCSZSjVpTZ8iQAssAGzC9FrFXBwBPAHYyQwZGEzbyxaGAB6L19_ZFdldiQAWRkoAGteRKxDABo4AHlnbwAlaxhksG0IXRMRCiqsbys5GAkQGTA4tlU4AGE0SBDveEJTUXJpZsUlLo4DI2AuGACAFSgZYGGgsYA6bfDd8KocRy5wgEF5YD4Nz073ECyZA2gsLYoDg6OT8IAhGR5wnpPIssCApqhvIterZgL5ynAALweHx-AIACjRAEpEQA-OBuWBo8h7HowuHtciY3JILhcKAALmIMgcPAImOYTFCM1h2CgRDkrx6NzmS0WAXKlWqCCYcDgixejJFCyWyFW6xgzFlEG8pJk3gA5lgAPyMtHIG6MxZQWH67EIvF6zzMfBMJgAAXU_F47s9Wh0-kM2E5tBmyAc_y4vWFgeV4vacFC2G8OEjfWUgxgAB4hTBPEqxcgJf68dLZah0w0YAARYA4RIQdBDLGIGWyuAPQzPaTbQ0wHOePrQHCwoxYLEcttwGAwrjbMD-7by7u9_Mq8etl2tt3lsCYXCt3vtlLpKBcZultsQqFIc25wdQYe-YyEJEdp4wF7ZVuT8LhOBumAuAkYB9W8F5vzbG8bkRRBCBfKcZ22X1cElWclywRcYwLCc22kGB0Cgbx8moAArLB5G2StrSwM9b08TEINlbY2jADEAG06NyVBGxgABdO0S0Yy9tShSAeRguj70fUcOJuXicMnWVgCIOA0TEoYGMUxS8IIoiLy0ycPwgBwljARkAAMABIEDowhrO4oZ8HMr8DMUyAuA2YBtUZNj1JgNiAEZeNyPy2IABl44KhMnfBNUU_BNMU7YiGAEzeDRH4IGM2RvGxf44GSNIMkeNj5I3V1ZVsPUcAcLBdQNLBGQKBoSmaIsqi4NjyG1QqTx6BwAlScheJgtF9LgcMYAcA1GSQSbcmm_UCBctlcRbScr26NoitPIQkWnBY4rLETuiMkzgDAPahO2k9ZxS5M0Wi1SkHczzvLgS6ErWy7YUWPVkCwCAVLOKA1k8OAADIIYmoxEQRJEwHCkaoYmg04YRwKoq07EAB8cdgo6UBOuBZNzEb9qy86wCNRcwAGmA0XCAAdLgAGpwlx_HSoUhCFjnBdtXqw0abNG52Q3HDpGTdLsXGzaOBu3hI3gg6uB5nTCNUoTszJGRyiexZPFqhEECQewQNsGBGXIAB2MK-FscgCBdVyAaGXgTbYgBmAAWbYvYAJlyAKwoADm2ABWCPeJdgyAC8spAE2fdjrTFdPE3064VPFJ649eH6waTdV7YquTWqhawHPZXCHEIPF2UXXwIA&debug=false&forceAllTransforms=false&modules=commonjs&shippedProposals=true&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=react%2Cstage-3%2Ctypescript&prettier=false&targets=&version=7.23.10&externalPlugins=&assumptions=%7B%7D)\r\n\r\nUnfortunately I still can't reproduce it.","> [repl](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=usage&corejs=3.21&spec=false&loose=false&code_lz=JYWwDg9gTgLgBAbzgYwuArjApgEzgXzgDMo04ByECAIwA9yBuAKFElkThoGcsoA3XgWKkQFKnQC0ULAENkMRi3DR4SbrwEAFUmC4BlGDOxCSZSjVpTZ8iQAssAGzC9FrFXBwBPAHYyQwZGEzbyxaGAB6L19_ZFdldiQAWRkoAGteRKxDABo4AHlnbwAlaxhksG0IXRMRCiqsbys5GAkQGTA4tlU4AGE0SBDveEJTUXJpZsUlLo4DI2AuGACAFSgZYGGgsYA6bfDd8KocRy5wgEF5YD4Nz073ECyZA2gsLYoDg6OT8IAhGR5wnpPIssCApqhvIterZgL5ynAALweHx-AIACjRAEpEQA-OBuWBo8h7HowuHtciY3JILhcKAALmIMgcPAImOYTFCM1h2CgRDkrx6NzmS0WAXKlWqCCYcDgixejJFCyWyFW6xgzFlEG8pJk3gA5lgAPyMtHIG6MxZQWH67EIvF6zzMfBMJgAAXU_F47s9Wh0-kM2E5tBmyAc_y4vWFgeV4vacFC2G8OEjfWUgxgAB4hTBPEqxcgJf68dLZah0w0YAARYA4RIQdBDLGIGWyuAPQzPaTbQ0wHOePrQHCwoxYLEcttwGAwrjbMD-7by7u9_Mq8etl2tt3lsCYXCt3vtlLpKBcZultsQqFIc25wdQYe-YyEJEdp4wF7ZVuT8LhOBumAuAkYB9W8F5vzbG8bkRRBCBfKcZ22X1cElWclywRcYwLCc22kGB0Cgbx8moAArLB5G2StrSwM9b08TEINlbY2jADEAG06NyVBGxgABdO0S0Yy9tShSAeRguj70fUcOJuXicMnWVgCIOA0TEoYGMUxS8IIoiLy0ycPwgBwljARkAAMABIEDowhrO4oZ8HMr8DMUyAuA2YBtUZNj1JgNiAEZeNyPy2IABl44KhMnfBNUU_BNMU7YiGAEzeDRH4IGM2RvGxf44GSNIMkeNj5I3V1ZVsPUcAcLBdQNLBGQKBoSmaIsqi4NjyG1QqTx6BwAlScheJgtF9LgcMYAcA1GSQSbcmm_UCBctlcRbScr26NoitPIQkWnBY4rLETuiMkzgDAPahO2k9ZxS5M0Wi1SkHczzvLgS6ErWy7YUWPVkCwCAVLOKA1k8OAADIIYmoxEQRJEwHCkaoYmg04YRwKoq07EAB8cdgo6UBOuBZNzEb9qy86wCNRcwAGmA0XCAAdLgAGpwlx_HSoUhCFjnBdtXqw0abNG52Q3HDpGTdLsXGzaOBu3hI3gg6uB5nTCNUoTszJGRyiexZPFqhEECQewQNsGBGXIAB2MK-FscgCBdVyAaGXgTbYgBmAAWbYvYAJlyAKwoADm2ABWCPeJdgyAC8spAE2fdjrTFdPE3064VPFJ649eH6waTdV7YquTWqhawHPZXCHEIPF2UXXwIA&debug=false&forceAllTransforms=false&modules=commonjs&shippedProposals=true&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=react%2Cstage-3%2Ctypescript&prettier=false&targets=&version=7.23.10&externalPlugins=&assumptions=%7B%7D)\r\n> \r\n> Unfortunately I still can't reproduce it.\r\n\r\nYou should use the old version:\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/19969570\/092535d7-16e8-4b1e-b760-ac6fdf7f2d5f)","Oops I made a mistake, but I still can't reproduce it.\ud83e\udd26\u200d\u2642\ufe0f\r\n\r\n[repl](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=usage&corejs=3.21&spec=false&loose=false&code_lz=JYWwDg9gTgLgBAbzgYwuArjApgEzgXzgDMo04ByECAIwA9yBuAKFElkThoGcsoA3XgWKkQFKnQC0ULAENkMRi3DR4SbrwEAFUmC4BlGDOxCSZSjVpTZ8iQAssAGzC9FrFXBwBPAHYyQwZGEzbyxaGAB6L19_ZFdldiQAWRkoAGteRKxDABo4AHlnbwAlaxhksG0IXRMRCiqsbys5GAkQGTA4tlU4AGE0SBDveEJTUXJpZsUlLo4DI2AuGACAFSgZYGGgsYA6bfDd8KocRy5wgEF5YD4Nz073ECyZA2gsLYoDg6OT8IAhGR5wnpPIssCApqhvIterZgL5ynAALweHx-AIACjRAEpEQA-OBuWBo8h7HowuHtciY3JILhcKAALmIMgcPAImOYTFCM1h2CgRDkrx6NzmS0WAXKlWqCCYcDgixejJFCyWyFW6xgzFlEG8pJk3gA5lgAPyMtHIG6MxZQWH67EIvF6zzMfBMJgAAXU_F47s9Wh0-kM2E5tBmyAc_y4vWFgeV4vacFC2G8OEjfWUgxgAB4hTBPEqxcgJf68dLZccwylXr7cJKuIyc3mYwWi1UuJqUP1tQ0YAARYA4RIQdBDLGIGWyuAPQzPaTbQ0wBt9aA4WFGLBYjkTuAwGFcbZgf3beWz-f5lUb8cu8du1AYbA4cfzycpdJQLij0sTiFQpDm3NLqAV18YxCCRKcnhgF5snHLdwnCOA3RgLgJGAfVvBeGCJ1_G5EUQQhQO3XdtmrHBayPSDZ0WeYC03CdpBgdAoG8fJqAAKyweRtm7a0sHfP9PExTDZW2NowAxABtfjclQYcYAAXTtEshK_bUoUgHlcP4gCgLXSSbjk2it1lYAiDgNF1KGQSjKM-jGOYz9rK3SCIAcJYwEZAADAASBB-MIHyZKGfAPOgxyjMgLgNmAbVGXEiyYHEgBGOTcni8SAAY5JS5St3wdtcqsoztiIYBXN4NEfggFzZG8bF_jgZI0gyR5xIMy9XVlWw9RwBwsF1A0sEZAoGhKZoW10cTyG1RrXx6BwAlScg5NwtEHLgcMYAcA1GSQDbci2_UCFCtlcTHLdv26NomrfIQkR3BZ8o7SFumc1zgDAW7lKu189xK5M0RysykAiqKYrgD78EU8H8WevVkCwCBTLOKA1k8OAADJ0fWoxEQRJEwAy5bMfWg1cfxpLsus7EAB9qbwx6LrgPTc2Wu6qresAjSPMB5pgNFwgAHS4ABqcIabp1rDMIhZ90PbV-sNLmzRudlL1o6Rk3K7E1sZpBvt4SMCPutsOrorI7LM5TszJGRykBxZPF6hEECQexUNsGBGXIAB2dK-FscgCBdML4aGXhnfEgBmAAWbZI4AJlyRL0oADm2ABWdO5ODxyAC8qpAZ3o5z6z9bfZ2y64EujOml9eDmhbneN7YuuTXqFawavZXCHFMNV2UXXwIA&debug=false&forceAllTransforms=false&modules=commonjs&shippedProposals=true&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=react%2Cstage-3%2Ctypescript&prettier=false&targets=&version=7.23.10&externalPlugins=&assumptions=%7B%7D)","> Oops I made a mistake, but I still can't reproduce it.\ud83e\udd26\u200d\u2642\ufe0f\r\n> \r\n> [repl](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=usage&corejs=3.21&spec=false&loose=false&code_lz=JYWwDg9gTgLgBAbzgYwuArjApgEzgXzgDMo04ByECAIwA9yBuAKFElkThoGcsoA3XgWKkQFKnQC0ULAENkMRi3DR4SbrwEAFUmC4BlGDOxCSZSjVpTZ8iQAssAGzC9FrFXBwBPAHYyQwZGEzbyxaGAB6L19_ZFdldiQAWRkoAGteRKxDABo4AHlnbwAlaxhksG0IXRMRCiqsbys5GAkQGTA4tlU4AGE0SBDveEJTUXJpZsUlLo4DI2AuGACAFSgZYGGgsYA6bfDd8KocRy5wgEF5YD4Nz073ECyZA2gsLYoDg6OT8IAhGR5wnpPIssCApqhvIterZgL5ynAALweHx-AIACjRAEpEQA-OBuWBo8h7HowuHtciY3JILhcKAALmIMgcPAImOYTFCM1h2CgRDkrx6NzmS0WAXKlWqCCYcDgixejJFCyWyFW6xgzFlEG8pJk3gA5lgAPyMtHIG6MxZQWH67EIvF6zzMfBMJgAAXU_F47s9Wh0-kM2E5tBmyAc_y4vWFgeV4vacFC2G8OEjfWUgxgAB4hTBPEqxcgJf68dLZccwylXr7cJKuIyc3mYwWi1UuJqUP1tQ0YAARYA4RIQdBDLGIGWyuAPQzPaTbQ0wBt9aA4WFGLBYjkTuAwGFcbZgf3beWz-f5lUb8cu8du1AYbA4cfzycpdJQLij0sTiFQpDm3NLqAV18YxCCRKcnhgF5snHLdwnCOA3RgLgJGAfVvBeGCJ1_G5EUQQhQO3XdtmrHBayPSDZ0WeYC03CdpBgdAoG8fJqAAKyweRtm7a0sHfP9PExTDZW2NowAxABtfjclQYcYAAXTtEshK_bUoUgHlcP4gCgLXSSbjk2it1lYAiDgNF1KGQSjKM-jGOYz9rK3SCIAcJYwEZAADAASBB-MIHyZKGfAPOgxyjMgLgNmAbVGXEiyYHEgBGOTcni8SAAY5JS5St3wdtcqsoztiIYBXN4NEfggFzZG8bF_jgZI0gyR5xIMy9XVlWw9RwBwsF1A0sEZAoGhKZoW10cTyG1RrXx6BwAlScg5NwtEHLgcMYAcA1GSQDbci2_UCFCtlcTHLdv26NomrfIQkR3BZ8o7SFumc1zgDAW7lKu189xK5M0RysykAiqKYrgD78EU8H8WevVkCwCBTLOKA1k8OAADJ0fWoxEQRJEwAy5bMfWg1cfxpLsus7EAB9qbwx6LrgPTc2Wu6qresAjSPMB5pgNFwgAHS4ABqcIabp1rDMIhZ90PbV-sNLmzRudlL1o6Rk3K7E1sZpBvt4SMCPutsOrorI7LM5TszJGRykBxZPF6hEECQexUNsGBGXIAB2dK-FscgCBdML4aGXhnfEgBmAAWbZI4AJlyRL0oADm2ABWdO5ODxyAC8qpAZ3o5z6z9bfZ2y64EujOml9eDmhbneN7YuuTXqFawavZXCHFMNV2UXXwIA&debug=false&forceAllTransforms=false&modules=commonjs&shippedProposals=true&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=react%2Cstage-3%2Ctypescript&prettier=false&targets=&version=7.23.10&externalPlugins=&assumptions=%7B%7D)\r\n\r\nBut, Real World code has Real Quirk error: https:\/\/gitpod.io\/?autostart=true#https:\/\/github.com\/kaiyuanshe\/kaiyuanshe.github.io\/pull\/304","```\r\nPS F:\\git\\kaiyuanshe.github.io> npm i\r\nnpm ERR! code E404\r\nnpm ERR! 404 Not Found - GET https:\/\/registry.npmjs.org\/@kaiyuanshe%2fkys-service - Not found\r\nnpm ERR! 404 \r\nnpm ERR! 404  '@kaiyuanshe\/kys-service@^0.7.0' is not in this registry.\r\nnpm ERR! 404\r\nnpm ERR! 404 Note that you can also install from a\r\nnpm ERR! 404 tarball, folder, http url, or git url.\r\n```\r\nI can't run it locally.\r\n","> ```\r\n> PS F:\\git\\kaiyuanshe.github.io> npm i\r\n> npm ERR! code E404\r\n> npm ERR! 404 Not Found - GET https:\/\/registry.npmjs.org\/@kaiyuanshe%2fkys-service - Not found\r\n> npm ERR! 404 \r\n> npm ERR! 404  '@kaiyuanshe\/kys-service@^0.7.0' is not in this registry.\r\n> npm ERR! 404\r\n> npm ERR! 404 Note that you can also install from a\r\n> npm ERR! 404 tarball, folder, http url, or git url.\r\n> ```\r\n> \r\n> I can't run it locally.\r\n\r\nIt's so weird! My reproduce project works well: https:\/\/gitpod.io\/?autostart=true#https:\/\/github.com\/idea2app\/Babel-decorator-bug","It works in gitpod, but I don't see the error.\r\n```\r\ngitpod \/workspace\/Babel-decorator-bug (main) $ pnpm run build\r\n\r\n> @idea2app\/next-bootstrap-ts@1.6.0 build \/workspace\/Babel-decorator-bug\r\n> next build\r\n\r\n   \u25b2 Next.js 14.1.0\r\n   - Environments: .env\r\n\r\n\r\n.\/pages\/_document.tsx\r\n10:9  Warning: Synchronous scripts should not be used. See: https:\/\/nextjs.org\/docs\/messages\/no-sync-scripts  @next\/next\/no-sync-scripts\r\n\r\ninfo  - Need to disable some ESLint rules? Learn more here: https:\/\/nextjs.org\/docs\/basic-features\/eslint#disabling-rules\r\n \u2713 Linting and checking validity of types    \r\n   Creating an optimized production build ...\r\n   Disabled SWC as replacement for Babel because of custom Babel configuration \"babel.config.js\" https:\/\/nextjs.org\/docs\/messages\/swc-disabled\r\n> [PWA] Compile server\r\n> [PWA] Compile server\r\n> [PWA] Compile client (static)\r\n> [PWA] Auto register service worker with: \/workspace\/Babel-decorator-bug\/node_modules\/.pnpm\/next-pwa@5.6.0_next@14.1.0_webpack@5.90.1\/node_modules\/next-pwa\/register.js\r\n> [PWA] Service worker: \/workspace\/Babel-decorator-bug\/public\/sw.js\r\n> [PWA]   url: \/sw.js\r\n> [PWA]   scope: \/\r\n   Using external babel configuration from \/workspace\/Babel-decorator-bug\/babel.config.js\r\n \u2713 Compiled successfully\r\n \u2713 Collecting page data    \r\n \u2713 Generating static pages (5\/5) \r\n \u2713 Collecting build traces    \r\n \u2713 Finalizing page optimization \r\n```","> It works in gitpod, but I don't see the error.\r\n\r\nYes, look above, I have found this weird situation: every MVP works well, but my origin project failed with Babel error...","Please try removing `node_modules` and `*.lock`.","> Please try removing `node_modules` and `*.lock`.\r\n\r\nSame error after running:\r\n```shell\r\nrm -rf node_modules\/ pnpm-lock.yaml\r\npnpm i\r\npnpm build\r\n```","> > ### Additional context\r\n> > Real world code: https:\/\/github.com\/kaiyuanshe\/kaiyuanshe.github.io\/pull\/304\/files#diff-c2eb41018a917dc350b32b5f8633d8f7cbf1737c32bb0a4b5bfe77cab13f2fa7\r\n> \r\n> @liuxingbaoyu Try this history code, you will get the error.\r\n\r\n@liuxingbaoyu I upgrade another project built with [the same upstream scaffold][1], then the same error thrown:\r\nhttps:\/\/github.com\/kaiyuanshe\/OpenHackathon-Web\/pull\/210\/files#diff-2e17f0d5a3cb9ec641b2b936b7aaab6ac68eabb4cbc21958508ed9698b1de871R65-L73\r\n\r\nbut, another `declare` code in a MobX class of the same project throws no error:\r\nhttps:\/\/github.com\/kaiyuanshe\/OpenHackathon-Web\/pull\/210\/files#diff-3eb0f311b70ca6c8d2fc263ee21064d3f8772754bb61272d5d935b5fbd0bf315R49\r\n\r\n[1]: https:\/\/github.com\/idea2app\/Next-Bootstrap-TS","Now that I can reproduce it I'll take a look.","This is a plugin order issue and as a temporary solution you can use a configuration like this.\r\n```\r\nmodule.exports = {\r\n  presets: [\r\n    \/\/ https:\/\/babeljs.io\/docs\/babel-preset-react\r\n    [\r\n      '@babel\/preset-react',\r\n      {\r\n        runtime: 'automatic',\r\n        development: process.env.BABEL_ENV === 'development',\r\n      },\r\n    ],\r\n  ],\r\n  \/\/ https:\/\/babeljs.io\/docs\/babel-plugin-proposal-decorators#note-compatibility-with-babelplugin-transform-class-properties\r\n  plugins: [\r\n    [\r\n      '@babel\/plugin-transform-typescript',\r\n      {\r\n        allowDeclareFields: true,\r\n        allowNamespaces: true,\r\n        allExtensions: true,\r\n        isTSX: true,\r\n      },\r\n    ],\r\n    ['@babel\/plugin-proposal-decorators', { version: '2023-05' }],\r\n  ],\r\n};\r\n\r\n```"],"labels":["i: bug","area: typescript"]},{"title":"[Bug]: TypeScript string enum members based on an imported enum should not have a reverse mapping ","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nbabel-loader (webpack)\r\n\r\n### Input code\r\n\r\n```ts\r\n\/\/ enum.ts\r\nexport enum MainEnum {\r\n  itemA = 'A',\r\n  itemB = 'B',\r\n  itemC = 'C'\r\n}\r\nexport enum SameFileSubEnum {\r\n  itemA = MainEnum.itemA,\r\n  itemB = MainEnum.itemB\r\n}\r\n\r\n\/\/another-file.ts\r\nimport { MainEnum } from '.\/enum'\r\nexport enum AnotherFileSubEnum {\r\n  itemA = MainEnum.itemA,\r\n  itemB = MainEnum.itemB\r\n}\r\n\r\n\/\/main.ts\r\nimport { SameFileSubEnum } from '.\/enum'\r\nimport { AnotherFileSubEnum } from '.\/another-file'\r\nconsole.log('SameFileSubEnum [No Reverse Mapping]', SameFileSubEnum)\r\nconsole.log('AnotherFileSubEnum [Reverse Mapping Applied]', AnotherFileSubEnum)\r\n```\r\n\r\n### Configuration file name\r\n\r\n.babelrc\r\n\r\n### Configuration\r\n\r\n```json\r\n{\r\n  \"presets\": [[\"@babel\/preset-env\"], \"babel-preset-typescript-vue3\", \"@babel\/preset-typescript\"],\r\n  \"plugins\": [\r\n    \"@babel\/transform-typescript\",\r\n    \"@babel\/plugin-transform-async-to-generator\",\r\n    \"@babel\/proposal-object-rest-spread\",\r\n    [\"@babel\/plugin-proposal-decorators\", { \"legacy\": true }],\r\n    [\"@babel\/plugin-proposal-class-properties\", { \"loose\": true }],\r\n    [\"@babel\/plugin-proposal-private-property-in-object\", { \"loose\": true }],\r\n    [\"@babel\/plugin-proposal-private-methods\", { \"loose\": true }],\r\n    \"@babel\/plugin-syntax-dynamic-import\"\r\n  ]\r\n}\r\n```\r\n\r\n### Current and expected behavior\r\n\r\n**Current** \r\n![image](https:\/\/github.com\/babel\/babel\/assets\/4712046\/8aee4191-6112-454a-9225-668643a6cab8)\r\n\r\n**Expected**\r\nBoth enums to be the same without reverse mapping\r\n\r\n### Environment\r\n\r\n```bash\r\n  System:\r\n    OS: Windows 11 10.0.22631\r\n  Binaries:\r\n    Node: 14.21.3 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 6.14.18 - C:\\Program Files\\nodejs\\npm.CMD\r\n  npmPackages:\r\n    @babel\/core: ^7.23.7 => 7.23.9\r\n    @babel\/plugin-proposal-decorators: ^7.23.9 => 7.23.9\r\n    @babel\/plugin-syntax-dynamic-import: ^7.8.3 => 7.8.3\r\n    @babel\/plugin-transform-async-to-generator: ^7.23.3 => 7.23.3\r\n    @babel\/plugin-transform-class-properties: ^7.23.3 => 7.23.3\r\n    @babel\/plugin-transform-object-rest-spread: ^7.23.4 => 7.23.4\r\n    @babel\/plugin-transform-private-methods: ^7.23.3 => 7.23.3\r\n    @babel\/plugin-transform-private-property-in-object: ^7.23.4 => 7.23.4\r\n    @babel\/preset-env: ^7.23.8 => 7.23.9\r\n    @babel\/preset-typescript: ^7.23.3 => 7.23.3\r\n    babel-loader: ^9.1.3 => 9.1.3\r\n    babel-plugin-add-module-exports: ^1.0.4 => 1.0.4\r\n    babel-plugin-dynamic-import-node: ^2.3.3 => 2.3.3\r\n    babel-preset-typescript-vue: ^1.1.1 => 1.1.1\r\n    babel-preset-typescript-vue3: ^2.0.17 => 2.0.17\r\n    webpack: ^5.89.0 => 5.90.0\r\n```\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @MohammadYounes! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Sample https:\/\/playcode.io\/1743524","Let's wait for https:\/\/github.com\/microsoft\/TypeScript\/issues\/56153 to be solved before changing Babel's behavior here."],"labels":["i: bug","area: typescript"]},{"title":"Request for Compilation Option to Avoid Reflect.construct in Babel Transpilation","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nI am facing performance issues in a JavaScript game I am developing due to the use of Reflect.construct for object creation when transpiling ES6 to ES5 with Babel. The method's performance overhead is causing low frame rates when a large number of objects are created, which is critical in a gaming context.\n\n### Describe the solution you'd like\n\nI would like Babel to provide a compilation option that allows for ES6 to ES5 class transformation without using Reflect.construct. This option should enable a more performant alternative for object instantiation that aligns with the need for high-efficiency execution in applications like games, where rapid object creation is a common scenario.\n\n### Describe alternatives you've considered\n\nAs an alternative, I have manually modified the construct and isNativeReflectConstruct methods in @babel\/helpers\/lib\/helpers-generated.js to bypass the use of Reflect.construct. While this approach works, it is not maintainable or scalable. Additionally, the loose mode is not a viable alternative due to compatibility issues it introduces with the complex class libraries used in my project. Therefore, a supported compilation option within Babel's official configuration would be the ideal solution.\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @Cola-Zhang! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","I'm surprised that `Reflect.construct` makes a noticeable performance difference.\r\nIn this case I recommend you use `patch-package` to patch `isNativeReflectConstruct`, it should rarely change.","> I'm surprised that `Reflect.construct` makes a noticeable performance difference. In this case I recommend you use `patch-package` to patch `isNativeReflectConstruct`, it should rarely change.\r\n\r\nIndeed, that's exactly what I did. Thanks"],"labels":["i: enhancement","i: needs triage"]},{"title":"[Bug]: rest spread data is lost when @babel\/plugin-transform-computed-properties is used alone","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nbabel-loader (webpack)\n\n### Input code\n\n[REPL](https:\/\/babeljs.io\/repl#?browsers=defaults&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=MYewdgzgLgBAZgSwE7RgXhgbwFAxgIwC4YByfEgGmwF9ttRJYIBTBgE3S1xgDo_EUUKngCGxEiMrcA2iWAkAuuPk1sQA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=&prettier=false&targets=&version=7.23.8&externalPlugins=%40babel%2Fplugin-transform-computed-properties%407.23.3&assumptions=%7B%7D)\r\n\r\n```js\r\nconst first = {\r\n  b: 'b',\r\n}\r\n\r\nconst second = {\r\n  ...first,\r\n  a: 'a',\r\n  ['c']: 'c'\r\n}\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nWhen an object contains both a rest spread and a computed property name, and `@babel\/plugin-transform-computed-properties` is used without `@babel\/plugin-transform-object-rest-spread`, the rest spread data is missing from the transformed code.\r\n\r\nGiven the input code above, I would expect the output to be this:\r\n\r\n```js\r\nconst second = _defineProperty({\r\n  ...first,\r\n  a: 'a'\r\n}, 'c', 'c');\r\n```\r\n\r\nrather than the current output:\r\n\r\n```js\r\nconst second = _defineProperty({\r\n  a: 'a'\r\n}, 'c', 'c');\r\n```\r\n\n\n### Environment\n\n- Babel version 7.23.8\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nThis was discovered when using `@babel\/preset-env` with `@babel\/plugin-transform-object-rest-spread` excluded.","comments":["Hey @hubgit! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: bug"]},{"title":"Types for @babel\/eslint-parser and @babel\/eslint-plugin","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nWith the flat config introduced in ESLint 8 and required as of ESLint 9 alpha, one has to import parsers and plugins. In so doing, TypeScript projects will be flagged with needing types for these packages.\n\n### Describe the solution you'd like\n\nTypes built into @babel\/eslint-parser and @babel\/eslint-plugin . This would avoid the need for a (potentially out of sync) Definitely Typed package.\n\n### Describe alternatives you've considered\n\nRequest a Definitely Typed package.\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @brettz9! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement","area: eslint"]},{"title":"@babel\/eslint-plugin: Support ESLint 9","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\n@babel\/eslint-plugin reports an issue with ESLint 9 (alpha).\n\n### Describe the solution you'd like\n\nReview for ESLint 9 support and update @babel\/eslint-plugin 's `peerDependencies` to indicate support.\n\n### Describe alternatives you've considered\n\nIgnore the warning\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @brettz9! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement","area: eslint"]},{"title":"Simplify pipeline parsing with `using` declarations","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | \r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\nThis is mostly an experiment to see how `using` declarations can simplify our state management in the parser (currently we have a lot of intermediate functions to hide `try`\/`finally` statements).\r\n\r\nI also have other drafts to see how migrating to `using` looks like: https:\/\/github.com\/nicolo-ribaudo\/babel\/pull\/10\/files?w=1, https:\/\/github.com\/nicolo-ribaudo\/babel\/pull\/11\/files?w=1\r\n\r\nI'll also open a PR to remove the F# and smart proposals in babel 8, since they are unfortunately not being pursued anymore.","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/56142\/","I personally tend to use `using` outside of `parser\/generator` and other places where performance is more important. I am worried that this will affect a little performance.","I will try to do some benchmarks","This PR introduces a performance regression indeed, we should not merge it until I figure out how to solve it.\r\n\r\nHowever, it also looks like we currently have a big perf regression on `main` \ud83e\udd14 \r\n\r\nThis PR:\r\n```js\r\n\u279c node .\/benchmark\/babel-parser\/real-case\/bench.mjs\r\ncurrent 4 jquery 3.6: 13.21 ops\/sec \u00b11.75% (76ms)\r\nbaseline 4 jquery 3.6: 22.71 ops\/sec \u00b12.19% (44ms)\r\ncurrent 4 jquery 3.6: 13.32 ops\/sec \u00b11.58% (75ms)\r\nbaseline 4 jquery 3.6: 22.31 ops\/sec \u00b12.49% (45ms)\r\n```\r\n\r\n`main`:\r\n```\r\n\u279c node .\/benchmark\/babel-parser\/real-case\/bench.mjs\r\ncurrent 4 jquery 3.6: 15.07 ops\/sec \u00b11.91% (66ms)\r\nbaseline 4 jquery 3.6: 23.62 ops\/sec \u00b12.25% (42ms)\r\ncurrent 4 jquery 3.6: 14.88 ops\/sec \u00b12.2% (67ms)\r\nbaseline 4 jquery 3.6: 24.06 ops\/sec \u00b12.07% (42ms)\r\n```\r\n\r\nwhere `baseline` is `@babel\/parser@7.23.6`, and I'm compiling as CJS with `make build`.","Please use `make prepublish-build`. :)\r\n\r\nTo be honest, I'm surprised that this is reflected in `real-case`, or even that this syntax is not included in the example.","> To be honest, I'm surprised that this is reflected in real-case, or even that this syntax is not included in the example.\r\n\r\nIt's because parsing for the `smart` pipeline needs to reset context every time we enter a block, so it's all over the place."],"labels":["PR: Internal :house:","pkg: parser","Spec: Pipeline Operator"]},{"title":"Improve parse error location?","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nFor some parse errors, it's fine to point the error to a single character. But some other errors, it will be nicer to have a start\/end range.\n\n### Describe the solution you'd like\n\nAdd end location to error.\n\n### Describe alternatives you've considered\n\nN\/A\n\n### Documentation, Adoption, Migration Strategy\n\n```\r\n\/\/ Code\r\na = await\r\n\r\n\/\/ Current\r\nUnexpected token (1:9)\r\n\r\n> 1 | a = await\r\n    |          ^\r\n\r\n\/\/ Expected\r\nUnexpected token (1:9)\r\n\r\n> 1 | a = await\r\n    |     ^^^^^\r\n```\r\n\r\n\r\n```js\r\nCode\r\n\r\n(\r\n  a\r\n  + a\r\n  \/\/ ... really long\r\n  + a\r\n  + a\r\n  + a\r\n  + a\r\n) ++\r\n\r\n\/\/ Current\r\nInvalid left-hand side in postfix operation. (2:1)\r\n\r\n  1 | (\r\n> 2 | \ta\r\n    | \t^\r\n  3 |   + a\r\n  4 |   \/\/ ... really long\r\n  5 |   + a\r\n\r\n\/\/ Expected\r\nInvalid left-hand side in postfix operation. (2:1)\r\n\r\n  1 | (\r\n>   | ^\r\n  2 | \ta\r\n    | \t^ \r\n  3 |   + a\r\n    |   ^^^\r\n  4 |   \/\/ ... really long\r\n    |   ^^^^^^^^^^^^^^^^^^\r\n  5 |    + a\r\n    |   ^^^\r\n  6 |    + a\r\n    |   ^^^\r\n  7 |    + a\r\n    |   ^^^\r\n  8 |    + a\r\n    |   ^^^\r\n  9 |  ) ++\r\n    |  ^\r\n```","comments":["Hey @fisker! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Sorry, I accidentally closed it.\ud83e\udd26\u200d\u2642\ufe0f","The first example may not be possible because the unexpected token actually refers to EOF.","In many places we already pass the AST node to our internal utilities that generate errors, so with some minimal changes we could experiment reading both its start and end locations and see how good it is."],"labels":["i: enhancement","pkg: parser"]},{"title":"Reset `Error.prepareStackTrace` finally","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #16099 <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | \u221a\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/56335"],"labels":["PR: Bug Fix :bug:","pkg: core"]},{"title":"[Bug]: Fails to parse Flow conditional type.","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n```ts\r\ntype TypeofAnimal = Dog extends Animal ? 'animal' : 'unknown'; \/\/ evaluates to 'animal'\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nCurrent: \r\n```\r\n\/repl.js: Missing semicolon. (1:23)\r\n\r\n> 1 | type TypeofAnimal = Dog extends Animal ? 'animal' : 'unknown'; \r\n    |                        ^\r\n```\r\n\r\nExpected: successfully parse it.\n\n### Environment\n\nHere is Babel playground.\r\nhttps:\/\/babeljs.io\/repl\/#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=C4TwDgpgBAKuEHsBmBBAdgSwLYEMA2UAvFACIIDmUEAHsBGgCYDOU62-UA_FAOQ6a48PKAC5eAVzQBrNAgDuaHgG4oQA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Cstage-2%2Cflow&prettier=false&targets=&version=7.23.6&externalPlugins=&assumptions=%7B%7D\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nI found it investigating a Prettier's issue. I'm not actual user of Flow.","comments":["Hey @seiyab! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","There doesn't seem to be one fixture for this:\r\n\r\nhttps:\/\/github.com\/search?q=repo%3Ababel%2Fbabel+path%3A%2F%5Epackages%5C%2Fbabel-parser%5C%2Ftest%5C%2Ffixtures%5C%2Fflow%5C%2F%2F+extends&type=code&p=1\r\n\r\nAnd this is also not supported: https:\/\/flow.org\/en\/docs\/types\/type-guards\/\r\n\r\nSo \"flow\" plugin seems to be quite under-developed. However, I tested with \"typescript\" plugin and it works great:\r\n\r\n```js\r\nconst ast = parse(code, {plugins: [\"typescript\"]});\r\n```\r\n\r\n(in case this may be an option for you)\r\n\r\nI never used Flow, but it seems your use-case only cares about TypeScript syntax anyway - I always wondered why there are two type parser mixins (probably there are minor differences here and there ... :thinking:)","Yes, they have minor differences, say, upperbound for type parameter.\r\n[Flow Playground](https:\/\/flow.org\/try\/#1N4Igxg9gdgZglgcxALlAIwIZoKYBsD6uEEAztvhgE6UYCe+JADpdhgCYowa5kA0I2KAFcAtiRQAXSkOz9sADwxgJ+NPTbYuQ3BMnTZA+Y2yU4IwRO4A6SFBIrGVDGM7c+IFkolXpUCWewUEAwhCQgRDH8wEH4hMnwROHlsNnw4KHwwSLAAC3wANyo4LFxscWQuHgMNZmwsiRSAWglaY1cq-hIAa2wJXNpG4Vxcdvdu3v7B0RxKUYMhKDBSqmbWwIq3eagoOrKSKgH0wtMMPznY7d2SfcoBiEZ-aG5G3Ix085AF-ZhsRoRehqUEiNMgSQHlSruBZxJrMcJwMhzAC+-EgGiCCkYEEoEgABC1jLiAKpQOGJMgAHgAKmtkLiAAqUeGUxLJNgAPnZuIAvAAdKC43E0wkKBpQNgkBlM8nYCnpH6UXEAcUEJjgYHZ-MFgoA-MrVaYwFrtXTsCIHrQANwxED5EwkODQIL5AAMVgATO6ACxWF0gJFAA)\r\n```ts\r\nexport type Unpromise<Type: Promise<mixed>> =\r\n  Type extends Promise<infer Generic>\r\n    ? Generic\r\n    : empty;\r\n```\r\n\r\nThe sample input I write for description is very simplified one to make the issue easy to understand.\r\nAnd as I mentioned, for myself, I'm not a flow dev. I found it as a contributor of Prettier, that is a JavaScript formatter supporting flow.\r\n\r\nAdding more context, I don't intend to fix it and don't expect it to be resolved. I just submitted the issue because:\r\n- I consider it is better to have an issue to track the problem status.\r\n- Community might help me if I'm misunderstanding something."],"labels":["i: bug","area: flow","pkg: parser"]},{"title":"Improve output for re-exporting","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Closes #15709 <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nThe new behavior is compatible with `cjs-module-lexer` via `exports.x=void 0`.\r\nWhen the user has enabled the `lazy` option or the old `babel-plugin-transform-modules-commonjs` is working with the new `babel-helper-module-transforms`, `implicitAssignmentExports` will be `undefined` to follow the old behavior .\r\n\r\nNote that there is an observable behavioral difference here.\r\nNamed exports are now no longer `configurable: false`.","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/56469","Thank you for your review! I'm marking it as draft for now to try and unify the behavior of `lazy`."],"labels":["PR: Output optimization :microscope:"]},{"title":"[Discussion] Set the default `noDocumentAll` to `true` in Babel 8","body":"Many people do not have custom assumptions, and `document.all` is extremely rare, and almost no one uses it with common functions affected by `noDocumentAll` such as optional chaining.","comments":["I think the default should be spec-compliant. The correctness should outweight size: An optimized build may produce unexpected behaviour results to runtime error or faulted logic, while a spec-compliant build slightly increases fresh network loading time.\r\n\r\nIf users are concerned with output size, they can opt-in to trade spec-compliancy for it. Thus the `assumptions` option shows how the build deviates from the spec, not how one should explicitly enable to ensure spec-compliancy.","> The correctness should outweight size: An optimized build may produce unexpected behaviour results to runtime error or faulted logic\r\n\r\nI agree with this.\r\n\r\nBut specifically with `document.all`, almost no one seems to be broken.\r\nAt the same time, this is also legacy support in the specification for compatibility and is not recommended.\r\nSimilar to this, such as `annexB`, we have a lot of behaviors that do not comply with the specification, and we even discussed whether to disable it by default.\r\nIt is nothing compared to `annexB`, and the benefits will be immediately available in `a?.b`, `a??b`, etc.\r\nEven from another perspective we are generating \"stricter\" code. :)"],"labels":["i: discussion"]},{"title":"[Bug]: Destructuring assignment transformed for chrome 49","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nbabel-loader (webpack)\r\n\r\n### Input code\r\n```js\r\n[a, b] = [];\r\n\r\nc = [[...[1,2,3]]];\r\n```\r\n\r\n### Configuration file name\r\n\r\n.babelrc\r\n\r\n### Configuration\r\n\r\n```\r\nchrome 49\r\n```\r\n\r\n### Current and expected behavior\r\n\r\n`destructing assignment` supported with `chrome 49`, should not be transformed\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/5390013\/f118b5d4-a080-4d64-b8e4-6705e4b6868a)\r\n\r\n[demo](https:\/\/babeljs.io\/repl#?browsers=chrome%2049&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=NoQwNABARguhC8FgwNwCg0GMFOAOgOAEYwAmMAZhmvTSA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=false&targets=&version=8.0.0-alpha.2&externalPlugins=&assumptions=%7B%7D)\r\n\r\n### Environment\r\n\r\n- Babel: Latest\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @luckymore! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","You can find our compatibility data in https:\/\/github.com\/babel\/babel\/tree\/main\/packages\/babel-compat-data\/data, which is generated from https:\/\/github.com\/compat-table\/compat-table (and has more precise data than caniuse). Specifically, it looks like this destructuring test only passes in Chrome 51: https:\/\/github.com\/compat-table\/compat-table\/blob\/1a1ccdc02b8b2158ab39a6146d8a7308f43c830b\/data-es6.js#L15361","I think it closer to `with arrays`\r\n```\r\n[a, b] = [1, 2];\r\n```","uha, I get it. All `subtests` need to pass in order for a feature to be considered supported.\r\nIs that right? @nicolo-ribaudo ","Yes, Babel will target the worst case scenario for conversions.\r\nUnless there are some particularly common real-world use cases.\r\nSpecific to this example, people often do not deconstruct an array literal, but deconstruct an identifier.\r\nAlthough Babel can do some inference in some sophisticated ways, that requires a lot of work and has performance implications, so there will be some sub-optimal output.","Thank you for your patience! \u2764\ufe0f ","@liuxingbaoyu sorry, one more question...\r\n\r\nBabel now use `@mdn\/browser-compat-data` insteadof `caniuse-lite`?\r\n\r\nIsn't there a risk, if browserslist on `caniuse-lite` and babel on `@mdn\/browser-compat-data` coexist my project?"],"labels":["i: question"]},{"title":"[Bug]: SyntaxError: Unexpected token","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```\r\n\/\/ countComLoader.ts\r\nconst parser = require(\"@babel\/parser\")\r\nconst loaderUtils = require(\"loader-utils\")\r\nmodule.exports = function (source) {\r\n   const ast = parser.parse(source, {\r\n      sourceType: \"module\",\r\n      plugins: [\"jsx\"]\r\n    })\r\n}\r\n```\r\n```\r\n\/\/ vue.config.js\r\nconfig.module\r\n    .rule(\"vue\")\r\n    .use(\"countComLoader\")\r\n    .loader(\".\/countComLoader.ts\")\r\n    .tap(options => {\r\n      options = merge(options, {\r\n        packageName: \"chuxin-ui-mobile\"\r\n      })\r\n      return options\r\n    })\r\n    .end()\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\n\u81ea\u5b9a\u4e49webpack loader\u4e2d\u4f7f\u7528 `@babel\/parser` \u89e3\u6790\u6210AST\u65f6\u62a5\u9519\r\n\u5e0c\u671b\u53ef\u4ee5\u89e3\u6790\u6210\u529f\uff0c\u4e0d\u62a5\u9519\uff0c\u8bf7\u6559\u5982\u4f55\u914d\u7f6e\n\n### Environment\n\n\"@babel\/parser\": \"^7.23.3\",\r\n\"webpack\": \"^4.46.0\"\r\n\"babel-eslint\": \"^10.1.0\",\r\n\"babel-plugin-import\": \"^1.13.3\",\r\n\"vue\": \"^3.2.13\",\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @lyanerzhang! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","\u62a5\u9519\u4fe1\u606f\u5982\u4e0b\uff1a\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/38914404\/2b18dfaf-1347-40c9-956c-e4d50b48a234)\r\n","It looks like you are trying to parse a `.ts` file and you need to enable the `typescript` plugin.\r\n\r\n```\r\n\/\/ countComLoader.ts\r\nconst parser = require(\"@babel\/parser\")\r\nconst loaderUtils = require(\"loader-utils\")\r\nmodule.exports = function (source) {\r\n   const ast = parser.parse(source, {\r\n      sourceType: \"module\",\r\n      plugins: [\"jsx\",\"typescript\"]\r\n    })\r\n}\r\n```","\u597d\u7684 \u6211\u8bd5\u4e00\u4e0b ","\u8c8c\u4f3c\u8fd8\u662f\u4e00\u6837\u7684 @liuxingbaoyu \r\n![image](https:\/\/github.com\/babel\/babel\/assets\/38914404\/9b0bbc58-f457-4187-a502-9b8c207b6e75)\r\n","Can you provide the code that is being parsed?","\u6050\u6015\u4e0d\u53ef\u4ee5\u63d0\u4f9b\uff0c\u6709\u70b9\u592a\u591a\u4e86","Hi @lyanerzhang! This issue is missing some important information we'll need to be able to reproduce this issue.\n\nPlease understand that we receive a high volume of issues, and there are only a limited number of volunteers that help maintain this project. The easier it is for us to decipher an issue with the info provided, the more likely it is that we'll be able to help.\n\nPlease make sure you have the following information documented in this ticket:\n1. Your Babel configuration (typically from `.babelrc` or `babel.config.js`)\n2. The current (incorrect) behavior you're seeing\n3. The behavior you expect\n4. A [short, self-contained example](http:\/\/sscce.org\/)\n\nPlease provide either a link to the problem via the [`repl`](https:\/\/babeljs.io\/repl\/), or if the `repl` is insufficient, a new and minimal repository with instructions on how to build\/replicate the issue.","```\r\n\/\/ babel.config.js\r\nmodule.exports = {\r\n  presets: [\"@vue\/cli-plugin-babel\/preset\"]\r\n}\r\n```\r\n\u4f1a\u4e0d\u4f1a\u662f\u4e0d\u5e94\u8be5\u5728`.vue`\u4e2d\u8c03\u7528 @babel\/parser \u7684 `parser.parse`\u65b9\u6cd5\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/38914404\/30014f02-d470-4114-aee1-f489b6f7b444)\r\n"],"labels":["i: question","Needs Info"]},{"title":"[Documentation-Bug]: Can @babel\/plugin-transform-runtime be used together with useBuiltIns  ?","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nbabel-loader (webpack)\r\n\r\n### Input code\r\n\r\nSorry, this is really not a bug but a question but I have asked at https:\/\/github.com\/babel\/babel\/discussions\/16127 and https:\/\/github.com\/babel\/babel\/issues\/16145 but I didn't get an answer. \r\n\r\nhttps:\/\/babeljs.io\/docs\/babel-plugin-transform-runtime is confusing about whether it can be used with `useBuiltIns`.\r\n\r\nOn one hand, it says, \"use @babel\/preset-env's useBuiltIns option.\"\r\n\r\n<img width=\"853\" alt=\"useBuiltIns\" src=\"https:\/\/github.com\/babel\/babel\/assets\/516243\/4b87751c-628f-4d7b-80e3-c8b725511e1c\">\r\n\r\n\r\nOn the other hand, It says \"When this plugin is enabled, the useBuiltIns option in @babel\/preset-env must not be set. \"\r\n\r\n<img width=\"865\" alt=\"useBuiltIns 2 \" src=\"https:\/\/github.com\/babel\/babel\/assets\/516243\/a1202e74-9b54-4c40-94f7-9afd779b55c1\">\r\n\r\n\r\nSo what does \"When this plugin is **enabled**\" mean? I thought putting it in `bable.config.json` is to enable it.\r\n\r\n\r\n\r\n\r\n### Configuration file name\r\n\r\nbabel.config.json\r\n\r\n### Configuration\r\n\r\n```\r\n        \"production\": {\r\n            \"presets\": [\r\n                [\r\n                    \"@babel\/preset-env\",\r\n                    {\r\n                        \"targets\": \"> 0.25%, not dead\",\r\n                        \"modules\": \"commonjs\",\r\n                        \"debug\": true,\r\n                        \"useBuiltIns\": \"usage\",\r\n                        \"shippedProposals\": true,\r\n                        \"corejs\": \"3.33\"\r\n                    }\r\n                ]\r\n            ],\r\n            \"plugins\": [[\"@babel\/plugin-transform-runtime\", {}]]\r\n        }\r\n```\r\n\r\n### Current and expected behavior\r\n\r\nI use them together and I didn't find a problem.\r\n\r\n### Environment\r\n\r\n```\r\n System:\r\n    OS: macOS 14.0\r\n  Binaries:\r\n    Node: 16.20.0 - \/usr\/local\/bin\/node\r\n    Yarn: 1.22.19 - \/usr\/local\/bin\/yarn\r\n    npm: 8.19.4 - \/usr\/local\/bin\/npm\r\n  npmPackages:\r\n    @babel\/core: ^7.0.0 => 7.20.5\r\n    @babel\/plugin-transform-runtime: ^7.0.0 => 7.19.6\r\n    @babel\/preset-env: ^7.0.0 => 7.20.2\r\n    @babel\/runtime-corejs3: ^7.12.13 => 7.20.6\r\n    babel-eslint: ^10.0.1 => 10.1.0\r\n    babel-loader: ^8.0.0 => 8.3.0\r\n    babelify: ^8.0.0 => 8.0.0\r\n    eslint: ^5.11.0 => 5.16.0\r\n    gulp-babel: ^7.0.1 => 7.0.1\r\n    webpack: ^4.37.0 => 4.46.0\r\n```\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\nI can't find a definite answer for it, e.g. stackoverflow has answers that do **NOT** agree with each other.\r\n\r\nThe comment from [JMarkoski](https:\/\/github.com\/JMarkoski) in https:\/\/github.com\/babel\/babel\/issues\/9853, which is quoted in many places say this,\r\n\r\n> Should I use useBuiltIns: 'usage' and corejs option on @babel\/preset-env together with @babel\/transform-runtime with core-js option set to false?\r\n> \r\n> The answer is **NO**...\r\n\r\nBut I have use `\"plugins\": [[\"@babel\/plugin-transform-runtime\", {}]]` together with `\"useBuiltIns\": \"usage\"` all the time and I did not experience any problem while with a smaller bundled file size.","comments":["Hey @qiulang! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","This is what these plugins\/presets do:\r\n- `@babel\/plugin-transform-runtime` with no options injects imports to Babel helpers\r\n- `@babel\/plugin-transform-runtime` with the `corejs` option injects imports to polyfills for used features without installing them on global objects\r\n  - When using core-js 2, this does not work for prototype methods\r\n- `@babel\/preset-env` with `useBuiltIns` injects imports to polyfills by installing them on global objects (i.e. by modifying the built-in objects and methods)\r\n\r\nAs you can see, there is an overlap in what the two plugins can do. To avoid confusion, we are moving towards a model where plugins are handled by a separate package:\r\n- `@babel\/plugin-transform-runtime` is only to inject imports to Babel helpers\r\n- `@babel\/preset-env` is only for syntax transforms\r\n- [`babel-plugin-polyfill-corejs3`](https:\/\/github.com\/babel\/babel-polyfills\/) for polyfills, with an option to choose between polyfills installed by modifying globals or \"pure\" polyfills.","@nicolo-ribaudo thanks for replying to me. I know `@babel\/transform-runtime` with the `corejs` option  injecting corejs without global pollution while @babel\/preset-env with useBuiltIns does.\r\n\r\nSo with your answer, can we draw the conclusions that:\r\n\r\n1. The **Danger** section in https:\/\/babeljs.io\/docs\/babel-plugin-transform-runtime, \"When this plugin is **enabled**\"  actually means when @babel\/plugin-transform-runtime **with the corejs option is set**, the useBuiltIns option in @babel\/preset-env must not be set.\r\n2. JMarkoski's comments in https:\/\/github.com\/babel\/babel\/issues\/9853, \"**The answer is NO**\" to \"use useBuiltIns: 'usage' and corejs option on @babel\/preset-env together with @babel\/transform-runtime with core-js option set to false?\" is **wrong**\r\n\r\nMy following setting is okay.\r\n```\r\n\"presets\": [\r\n                [\r\n                    \"@babel\/preset-env\",\r\n                    {\r\n                        ...\r\n                        \"useBuiltIns\": \"usage\",\r\n                        \"shippedProposals\": true,\r\n                        \"corejs\": \"3.33\"\r\n                    }\r\n                ]\r\n  ],\r\n\"plugins\": [[\"@babel\/plugin-transform-runtime\", {}]]\r\n```","That configuration is correct, with a caveat: `@babel\/plugin-transform-runtime` will inject imports to `@babel\/runtime`, and some of the files of `@babel\/runtime` might need some polyfills in old browsers. If you are not compiling `\/node_modules\/` with Babel, `@babel\/preset-env` will not inject polyfills for `@babel\/runtime` internal files (or for any other of your dependencies).\r\n\r\nOn the other hand, if you inject polyfills through `@babel\/plugin-transform-runtime` it will use `@babel\/runtime-corejs3`, which is already polyfilled internally.","I read JMarkoski's words in https:\/\/github.com\/babel\/babel\/issues\/9853 again and realized his reason for \"NO\", \"You need a way to transpile the babel helpers, and that's not good.\" was actually what you just said \"with a **caveat**: @babel\/plugin-transform-runtime will inject imports to @babel\/runtime, and some of the files of @babel\/runtime might need some polyfills in old browsers. \" And [zloirock](https:\/\/github.com\/zloirock) also said there \"as transform-runtime injects helpers and some helpers depends on globals which should be polyfilled.\"\r\n\r\nSo if I use `\"useBuiltIns\": \"usage\"`, the safest way to make sure it works for all old browsers is **NOT** to use `\"plugins\": [[\"@babel\/plugin-transform-runtime\", {}]]`, right ?","@nicolo-ribaudo `useBuiltIns: entry` vs `useBuiltIns: usage` is another confusing setting.\r\n\r\n[zloirock](https:\/\/github.com\/zloirock) also said (in 2019 but quoted in many places) in https:\/\/github.com\/babel\/babel\/issues\/9853#issuecomment-501365267\r\n\r\n> useBuiltIns + runtime for helpers is preferable way for applications. However, I recommend useBuiltIns: entry with required parts of core-js since it's much simpler in configuration and much more predictable. useBuiltIns: usage makes sense only for small applications and, for correct work, much harder in configuration.\r\n\r\nWhile you said in https:\/\/github.com\/babel\/babel\/discussions\/14443#discussioncomment-2536818\r\n\r\n> usage works in almost every case, I personally have never used entry \ud83e\udd37","To @nicolo-ribaudo:\r\n\r\n> [...]\r\n> As you can see, there is an overlap in what the two plugins can do. To avoid confusion, we are moving towards a model where plugins are handled by a separate package:\r\n> \r\n> * `@babel\/plugin-transform-runtime` is only to inject imports to Babel helpers\r\n> * `@babel\/preset-env` is only for syntax transforms\r\n> * [`babel-plugin-polyfill-corejs3`](https:\/\/github.com\/babel\/babel-polyfills\/) for polyfills, with an option to choose between polyfills installed by modifying globals or \"pure\" polyfills.\r\n\r\nDoes the new model with `babel-plugin-polyfill-corejs3` handle the caveat you said? Quoted here again:\r\n\r\n> That configuration is correct, with a caveat: `@babel\/plugin-transform-runtime` will inject imports to `@babel\/runtime`, and some of the files of `@babel\/runtime` might need some polyfills in old browsers.\r\n\r\nSincerely,\r\nNW.","@nyngwang Unfortunately not yet -- for now, if you need to add polyfills for `@babel\/runtime` internal code you have two options:\r\n- If you are using a bundler, you can configure it to remap `@babel\/runtime` to `@babel\/runtime-corejs3`\r\n- You can transpile `@babel\/runtime`, as you would need to do for any other dependency that uses non-ES5 code and thus needs to be polyfilled\/transpiled.\r\n\r\nI'm working on something to make `@babel\/plugin-transform-runtime` capable of injecting imports to `@babel\/runtime-corejs3` when using `babel-plugin-polyfill-corejs3`","I'm in a similar situation, and I figured out that my production code breaks when I have this configuration:\r\n```\r\noptions: {\r\n  cacheDirectory: true,\r\n  presets: [\r\n    [\r\n      '@babel\/preset-env',\r\n      {\r\n        useBuiltIns: 'usage',\r\n        targets: {\r\n          browsers: ['> 0.25% and supports es6-module', 'not dead', 'Firefox ESR'],\r\n        },\r\n        corejs: {\r\n          version: '3.35',\r\n          proposals: true,\r\n        },\r\n      },\r\n    ],\r\n  ],\r\n  plugins: [['@babel\/plugin-transform-runtime', { corejs: 3 }]],\r\n},\r\n```\r\n\r\nWhat I mean is that Webpack is able to build it, but I get a runtime error in the browser which I'm not able to track, from one of the bundles.\r\n\r\n> ```\r\n> Uncaught TypeError: i.f is not a function\r\n> ```\r\n\r\n\r\nSo at this point the alternatives are either removing `useBuiltIns` and `corejs` from the configuration of `@babel\/preset-env`\r\n```\r\noptions: {\r\n  cacheDirectory: true,\r\n  presets: [\r\n    [\r\n      '@babel\/preset-env',\r\n      {\r\n        targets: {\r\n          browsers: ['> 0.25% and supports es6-module', 'not dead', 'Firefox ESR'],\r\n        },\r\n      },\r\n    ],\r\n  ],\r\n  plugins: [['@babel\/plugin-transform-runtime', { corejs: 3 }]],\r\n},\r\n```\r\nor removing the corejs from `@babel\/plugin-transform-runtime` and installing the fallback library `@babel\/runtime` option (as suggested [here](https:\/\/github.com\/babel\/babel\/issues\/9728#issuecomment-475056416) and [here](https:\/\/github.com\/babel\/babel\/issues\/9853#issuecomment-482686435) by [zloirock](https:\/\/github.com\/zloirock)):\r\n```\r\noptions: {\r\n  cacheDirectory: true,\r\n  presets: [\r\n    [\r\n      '@babel\/preset-env',\r\n      {\r\n        useBuiltIns: 'usage',\r\n        targets: {\r\n          browsers: ['> 0.25% and supports es6-module', 'not dead', 'Firefox ESR'],\r\n        },\r\n        corejs: {\r\n          version: '3.35',\r\n          proposals: true,\r\n        },\r\n      },\r\n    ],\r\n  ],\r\n  plugins: [['@babel\/plugin-transform-runtime']],\r\n},\r\n```\r\nSo I have a question: which are the differences between the two? I've seen that the code size grows with the first option, so I tend towards the second one, but I would like to know which are the pros and cons. ","> So I have a question: which are the differences between the two? I've seen that the code size grows with the first option, so I tend towards the second one, but I would like to know which are the pros and cons.\r\n\r\n@gtempesta-pixartprinting Let me[^1] save you a week with a link for a (IMOO, the only) clean summary: https:\/\/github.com\/babel\/babel-polyfills\/?tab=readme-ov-file#history-and-motivation.\r\n\r\nIf you need my own words: Since you are probably not writing a library, follow your instinct:\r\n\r\n> [...] so I tend towards the second one\r\n\r\nAnd you can (I guess that you haven't) read the [comment above](https:\/\/github.com\/babel\/babel\/issues\/16149#issuecomment-1838432234) which mentioned the _new way_ recommended by one of the maintainers:\r\n\r\n> As you can see, there is an overlap in what the two plugins can do. To avoid confusion, we are moving towards a model where plugins are handled by a separate package:\r\n> \r\n> * `@babel\/plugin-transform-runtime` is only to inject imports to Babel helpers\r\n> * `@babel\/preset-env` is only for syntax transforms\r\n> * [`babel-plugin-polyfill-corejs3`](https:\/\/github.com\/babel\/babel-polyfills\/) for polyfills, with an option to choose between polyfills installed by modifying globals or \"pure\" polyfills.\r\n\r\n\r\n[^1]: just a nobody who had struggled with the same question for a month reading **_all_** related comments you can find on both [babel\/babel](https:\/\/github.com\/babel\/babel) and [babel\/babel-polyfills](https:\/\/github.com\/babel\/babel-polyfills).","@nicolo-ribaudo @nyngwang I hit another transpile vs polyfill problem that I am desperate to need some help, can you guys take a look ?  [useBuiltIns: 'usage' will only transpile but not polyfill my nuxt v2 app](https:\/\/github.com\/babel\/babel-polyfills\/issues\/203)\r\n\r\nThanks a lot.","@nyngwang Ok so I will stick to the second configuration. Thank you for the explanation."],"labels":["i: docs"]},{"title":"[Bug]: @babel\/plugin-transform-class-properties interferes with @babel\/preset-env transforming class static blocks","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\nhttps:\/\/babeljs.io\/repl#?browsers=node%2018&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=MYGwhgzhAEDC0G8BQ1oQC5nQS2NAxAB7QC80ALAEwDcKamOeAnrahlronaugE5NdUQ6OgAW2CADoBZACYB7AMryAtgFMx2AHYBzAOrYxACk1SiASlZCAvtGBZgowcJHipM6ACIArloDWWvIA7lqeVqjWdJHWQA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env&prettier=false&targets=&version=7.23.5&externalPlugins=%40babel%2Fplugin-transform-class-properties%407.23.3&assumptions=%7B%7D\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nExpected behavior: the static class block in the input code field is passed through without change, since Node 18 supports them natively.\r\n\r\nCurrent behavior: the transpilation fails, claiming that `Static class blocks are not enabled.` Any of the following changes to the REPL will solve the problem:\r\n\r\n- Changing the `targets` to one that doesn't natively support static class blocks, such as `node 15`. This causes the block to be transpiled.\r\n- Removing the `@babel\/plugin-transform-class-properties` plugin. This causes the block to be passed through unchanged.\n\n### Environment\n\nBabel REPL, Firefox 120.0\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @karmeleon! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","The class properties transform assumes that all class features, introduced later than class properties, have already been transformed. The rationale here is that if one enables the class properties transform because the target does not support class properties, it probably does not support static blocks either. In your case you can remove the `class-properties` plugin since Node.js 18 already supports it well."],"labels":["i: needs triage"]},{"title":"[Bug]: Duplicate declaration \"Qunar\" (This is an error on an internal node. Probably an internal error.)","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@babel\/core\r\n\r\n### Input code\r\n\r\n```js\r\nvar babel = require('@babel\/core');\r\nconst t = require('@babel\/types');\r\n\r\n\r\nvar code =`\r\nclass Qunar{}\r\nQunar.config = {}\r\nexport default App(new Qunar());\r\n`\r\n\r\nconst Visitor = {\r\n \r\n    ClassDeclaration(astPath){\r\n        const tmp = t.functionDeclaration(t.identifier('Qunar'),[],t.blockStatement([]));\r\n        astPath.replaceWith(tmp);\r\n    \r\n    }\r\n};\r\n\r\n\r\nconst result = babel.transform(code, {\r\n    configFile: false,\r\n    babelrc: false,\r\n    comments: false,\r\n    ast: true,\r\n    sourceMaps: false,\r\n    plugins: [{\r\n        \/\/\u524d\u9762\u7684Visitor\r\n        visitor: Visitor\r\n    }]\r\n});\r\nconsole.log(result.code);\r\n\r\n```\r\n\r\nWhen the version of @babel\/core is greater than 7.8.0, this error will be reported. Why can't it be written like this? How can you support that?\r\n```\r\nDuplicate declaration \"Qunar\" (This is an error on an internal node. Probably an internal error.)\r\n```\r\n\r\n\r\n","comments":["Hey @peacejj! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Hi @peacejj! This issue is missing some important information we'll need to be able to reproduce this issue.\n\nPlease understand that we receive a high volume of issues, and there are only a limited number of volunteers that help maintain this project. The easier it is for us to decipher an issue with the info provided, the more likely it is that we'll be able to help.\n\nPlease make sure you have the following information documented in this ticket:\n1. Your Babel configuration (typically from `.babelrc` or `babel.config.js`)\n2. The current (incorrect) behavior you're seeing\n3. The behavior you expect\n4. A [short, self-contained example](http:\/\/sscce.org\/)\n\nPlease provide either a link to the problem via the [`repl`](https:\/\/babeljs.io\/repl\/), or if the `repl` is insufficient, a new and minimal repository with instructions on how to build\/replicate the issue.","@liuxingbaoyu   demo has been added above, you can directly execute will see the error\r\n","https:\/\/runkit.com\/liuxingbaoyu\/655c893eff20540008db031b\r\n\r\nThis is a long-standing problem that may not be completely fixed anytime soon.\r\nAs a temporary solution, use `path.scope.removeBinding` to manually remove the binding.","@liuxingbaoyu  thanks \ud83d\udc4d\r\n\r\nsolution: \r\nconst tmp = t.functionDeclaration(t.identifier('Qunar'),[],t.blockStatement([]));\r\nastPath.scope.removeBinding('Qunar');\r\nastPath.replaceWith(tmp);\r\n"],"labels":["i: bug","pkg: traverse (scope)"]},{"title":"[Bug]: Babel removes parenthesis at place where are required.","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n```js\r\nimport something from 'something';\r\n\r\nexport function myfunction(bool) {\r\n    return \/** @type {SomeType} *\/ (\r\n        bool ? something.a() : something.b()\r\n    )\r\n}\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\n```js\r\nconst something = require('something');\r\n\r\nexports.myfunction = myfunction;\r\n\r\nfunction myfunction(bool) {\r\n    return; \/** @type {SomeType} *\/ \r\n        bool ? something.a() : something.b()\r\n}\r\n```\r\n\r\n### Environment\r\n\r\n  System:\r\n    OS: Windows 11 10.0.22621\r\n  Binaries:\r\n    Node: 18.6.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 8.15.0 - C:\\Program Files\\nodejs\\npm.CMD\r\n  npmPackages:\r\n    @babel\/cli: ^7.23.0 => 7.23.0 \r\n    @babel\/core: ^7.23.2 => 7.23.2 \r\n    @babel\/plugin-transform-modules-commonjs: ^7.23.3 => 7.23.3 \r\n    @babel\/preset-env: ^7.23.3 => 7.23.3 \r\n    @babel\/traverse: ^7.23.3 => 7.23.3 \r\n    eslint: ^8.53.0 => 8.53.0 \r\n    jest: ^29.7.0 => 29.7.0 \r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\nThe issue happens when there is `\/** @type {SomeType} *\/` in return statement, or in assigment. Causing either in invalid return, or even if code itself works, in output files, TypeScript throws error because of invalid types (as without parenthesis it doesn't apply type cast on whole expression).\r\n\r\n### reproduction in comment below:\r\nhttps:\/\/github.com\/babel\/babel\/issues\/16111#issuecomment-1825331645","comments":["Hey @GabrielGorta! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","I'm releasing a patch right now that might fix this issue","https:\/\/github.com\/babel\/babel\/pull\/16104","I'm worried this PR might not be helpful.\r\nAlso can you provide a way to reproduce it? I can't reproduce it in repl.\r\n\r\n[repl](https:\/\/babeljs.io\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=JYWwDg9gTgLgBAZwiApjAFsAdgczgMymTgHIlUNscSBuAKDpQA9JYCBXLAYxmAizggAnvk48-WABQAjCBAA2ASjgBvOnA1woadlAEB6AFSG4AARhCwKVQGVkKACqWUAXziH9cSes2_ZCuAB-RHtKXAA6AENJZQAuEIpMCOkYnw1FOhcgA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=true&sourceType=module&lineWrap=false&presets=&prettier=false&targets=&version=7.23.3&externalPlugins=%40babel%2Fplugin-transform-modules-commonjs%407.23.3&assumptions=%7B%7D\r\n)","Checking tests in PR #16104 and it really seems it will fix the issue.","That test isn't actually what's being fixed, but I'm concerned it's a regression.\r\n\r\nSorry for not stating this in the PR before.","Isn't this because `createParenthesizedExpressions` is `false` by default (for whatever reason, AST vs. CST story)?\r\n\r\nI wanted to test this in REPL, but I can't find a way to set `{createParenthesizedExpressions: true}`. Is there any way to set `parse` options in REPL?","> Isn't this because `createParenthesizedExpressions` is `false` by default (for whatever reason, AST vs. CST story)?\r\n> \r\n> I wanted to test this in REPL, but I can't find a way to set `{createParenthesizedExpressions: true}`. Is there any way to set `parse` options in REPL?\r\n\r\nNo, even this is unexpected when `creatingParenthesizedExpressions: false`. This is different in AST.\r\n\r\n> I wanted to test this in REPL, but I can't find a way to set {createParenthesizedExpressions: true}. Is there any way to set parse options in REPL?\r\n\r\nUnfortunately there is currently no easy way.","> Unfortunately there is currently no easy way.\r\n\r\nToo bad, I would also like a \"Show AST\" option to quickly judge what's going on.\r\n\r\n> Checking tests in PR #16104 and it really seems it will fix the issue.\r\n\r\nTry a single-line type cast comment, it doesn't work: [REPL](https:\/\/babeljs.io\/repl\/build\/55832\/#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=GYVwdgxgLglg9mABFApgZygCgEZzgG0QF5FgBDfNFASkQG8AoRRAJxShBaQHoAqXxAAEoATwAOKemBABbbChYBfRL26IceQgH5EARkQAuRACZqAbgaKgA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=&prettier=false&targets=&version=7.23.3%2Bpr.16104&externalPlugins=&assumptions=%7B%7D)\r\n\r\nOutput:\r\n\r\n```js\r\nfunction test(bool = false) {\r\n  return \/** @type {number} *\/bool ? 1 : 2;\r\n}\r\n```","You can view them via `astexplorer`. \r\nhttps:\/\/astexplorer.net\/#\/gist\/c8fa290417825f5efb7f858da5be9f14\/28b66f5d63d27c90887e83d09ab237b9d9aa34e1\r\n\r\n","@liuxingbaoyu Thank you, I mean integrated into the PR build, because some plugins or options could manipulate the AST (e.g. `createParenthesizedExpressions`)","To be honest, I even doubt whether the plugins have good support for such an option. :)\r\nI personally think that such an AST is more suitable for scenarios where only parser\/generator are used.","Hi @GabrielGorta! This issue is missing some important information we'll need to be able to reproduce this issue.\n\nPlease understand that we receive a high volume of issues, and there are only a limited number of volunteers that help maintain this project. The easier it is for us to decipher an issue with the info provided, the more likely it is that we'll be able to help.\n\nPlease make sure you have the following information documented in this ticket:\n1. Your Babel configuration (typically from `.babelrc` or `babel.config.js`)\n2. The current (incorrect) behavior you're seeing\n3. The behavior you expect\n4. A [short, self-contained example](http:\/\/sscce.org\/)\n\nPlease provide either a link to the problem via the [`repl`](https:\/\/babeljs.io\/repl\/), or if the `repl` is insufficient, a new and minimal repository with instructions on how to build\/replicate the issue.","This appears to be cause of https:\/\/github.com\/openlayers\/openlayers\/issues\/15358. A reproduction can be found at https:\/\/github.com\/bjornharrtell\/ol-issue-15358.","> This appears to be cause of https:\/\/github.com\/openlayers\/openlayers\/issues\/15358. A reproduction can be found at https:\/\/github.com\/bjornharrtell\/ol-issue-15358.\r\n\r\nLooks like this is a regression in `@babel\/parser`. Downgrading to `@babel\/parser@7.19.0` (by manually editing the lockfile) makes the problem go away:\r\n```diff\r\ndiff --git a\/package-lock.json b\/package-lock.json\r\nindex c84d63d..3f3903c 100644\r\n--- a\/package-lock.json\r\n+++ b\/package-lock.json\r\n@@ -115,7 +115,7 @@\r\n         \"@babel\/helper-compilation-targets\": \"^7.22.15\",\r\n         \"@babel\/helper-module-transforms\": \"^7.23.3\",\r\n         \"@babel\/helpers\": \"^7.23.2\",\r\n-        \"@babel\/parser\": \"^7.23.3\",\r\n+        \"@babel\/parser\": \"^7.19.0\",\r\n         \"@babel\/template\": \"^7.22.15\",\r\n         \"@babel\/traverse\": \"^7.23.3\",\r\n         \"@babel\/types\": \"^7.23.3\",\r\n@@ -500,7 +500,7 @@\r\n       }\r\n     },\r\n     \"node_modules\/@babel\/parser\": {\r\n-      \"version\": \"7.23.4\",\r\n+      \"version\": \"7.19.0\",\r\n       \"resolved\": \"https:\/\/registry.npmjs.org\/@babel\/parser\/-\/parser-7.23.4.tgz\",\r\n       \"integrity\": \"sha512-vf3Xna6UEprW+7t6EtOmFpHNAuxw3xqPZghy+brsnusscJRW5BMUzzHZc5ICjULee81WeUV2jjakG09MDglJXQ==\",\r\n       \"dev\": true,\r\n@@ -1849,7 +1849,7 @@\r\n       \"dev\": true,\r\n       \"dependencies\": {\r\n         \"@babel\/code-frame\": \"^7.22.13\",\r\n-        \"@babel\/parser\": \"^7.22.15\",\r\n+        \"@babel\/parser\": \"^7.19.0\",\r\n         \"@babel\/types\": \"^7.22.15\"\r\n       },\r\n       \"engines\": {\r\n@@ -1868,7 +1868,7 @@\r\n         \"@babel\/helper-function-name\": \"^7.23.0\",\r\n         \"@babel\/helper-hoist-variables\": \"^7.22.5\",\r\n         \"@babel\/helper-split-export-declaration\": \"^7.22.6\",\r\n-        \"@babel\/parser\": \"^7.23.4\",\r\n+        \"@babel\/parser\": \"^7.19.0\",\r\n         \"@babel\/types\": \"^7.23.4\",\r\n         \"debug\": \"^4.1.0\",\r\n         \"globals\": \"^11.1.0\"\r\n```","@bjornharrtell\r\n\r\nAmazing job! I've just donwgraded the `@babel\/parser` and now it works correctly at least in runtime (e.g. return statement, still type casts are lost). It's exactly same issue. Thank you @ahocevar too, for finding solution.\r\n","@ahocevar I tried to reproduce the issue and it's kinda confusing:\r\n\r\n```sh\r\nmkdir babel_paren\r\ncd babel_paren\r\n```\r\n\r\nCreate file **test.mjs**:\r\n\r\n```js\r\nimport {parse} from '@babel\/parser';\r\nimport generator from '@babel\/generator';\r\nconst generate = generator.default;\r\nconst code = `\r\nfunction getResolutionForValueFunction(power) {\r\n  power = power || 2;\r\n  const maxResolution = this.getConstrainedResolution(this.maxResolution_);\r\n  const minResolution = this.minResolution_;\r\n  const max = Math.log(maxResolution \/ minResolution) \/ Math.log(power);\r\n  return (\r\n    \/**\r\n     * @param {number} value Value.\r\n     * @return {number} Resolution.\r\n     *\/\r\n    function (value) {\r\n      const resolution = maxResolution \/ Math.pow(power, value * max);\r\n      return resolution;\r\n    }\r\n  );\r\n}\r\n`;\r\nconst ast = parse(code);\r\nconst out = generate(ast,\r\n  {\r\n    compact: true,\r\n    \/\/createParenthesizedExpressions: true,\r\n  }\r\n);\r\nconsole.log(out);\r\n```\r\n\r\nFirst run:\r\n\r\n```sh\r\nrm -rf node_modules package.json package-lock.json && npm i @babel\/parser@7.23.3 @babel\/generator@7.23.3 && node test.mjs\r\n```\r\n\r\n```js\r\nadded 12 packages, and audited 13 packages in 737ms\r\n\r\nfound 0 vulnerabilities\r\n{\r\n  code: 'function getResolutionForValueFunction(power){power=power||2;const maxResolution=this.getConstrainedResolution(this.maxResolution_);const minResolution=this.minResolution_;const max=Math.log(maxResolution\/minResolution)\/Math.log(power);return(\/**\\n' +\r\n    '     * @param {number} value Value.\\n' +\r\n    '     * @return {number} Resolution.\\n' +\r\n    '     *\/function(value){const resolution=maxResolution\/Math.pow(power,value*max);return resolution;});}',\r\n  decodedMap: undefined,\r\n  __mergedMap: [Getter],\r\n  map: [Getter\/Setter],\r\n  rawMappings: [Getter\/Setter]\r\n}\r\n```\r\n\r\nNice parentheses, right?\r\n\r\nBut now run:\r\n\r\n```sh\r\nnpm i @babel\/generator && node test.mjs\r\n```\r\n\r\nResult\r\n\r\n```js\r\nup to date, audited 13 packages in 439ms\r\n\r\nfound 0 vulnerabilities\r\n{\r\n  code: 'function getResolutionForValueFunction(power){power=power||2;const maxResolution=this.getConstrainedResolution(this.maxResolution_);const minResolution=this.minResolution_;const max=Math.log(maxResolution\/minResolution)\/Math.log(power);return\/**\\n' +\r\n    '     * @param {number} value Value.\\n' +\r\n    '     * @return {number} Resolution.\\n' +\r\n    '     *\/function(value){const resolution=maxResolution\/Math.pow(power,value*max);return resolution;};}',\r\n  decodedMap: undefined,\r\n  __mergedMap: [Getter],\r\n  map: [Getter\/Setter],\r\n  rawMappings: [Getter\/Setter]\r\n}\r\n```\r\n\r\nParentheses are gone! :eyes: \r\n\r\nThis only happens when using `{compact: true}` as generate option.","@ahocevar @kungfooman \r\nThank you for your detailed report!\r\nI think there are two problems here.\r\n\r\nhttps:\/\/github.com\/babel\/babel\/issues\/16111#issuecomment-1825514962 \r\nRegression from `@babel\/generator@7.23.4`, I can reproduce it, will fix it.\r\n\r\n\r\nAnd https:\/\/github.com\/bjornharrtell\/ol-issue-15358 is related to `@babel\/parser`.\r\n<del>I get the error, but even if I downgrade `@babel\/parser` it doesn't work.\ud83e\udd14<del>\r\n\r\nSuddenly it works fine and I'm investigating. \ud83e\udd26\u200d\u2642\ufe0f\r\n","I don't understand why downgrading `@babel\/parer` would work and I can't replicate this locally.\r\nThe bug in https:\/\/github.com\/bjornharrtell\/ol-issue-15358 disappeared after I downgraded `@babel\/generator`, and it was caused by the merged PR a few days ago.","Confirmed that downgrading to @babel\/generator@7.23.0 resolves https:\/\/github.com\/bjornharrtell\/ol-issue-15358. Note that downgrading to @babel\/generator@7.23.3 does not appear to be enough.","I downgraded it to `@babel\/generator@7.23.3` and it worked, this should be fixed soon.","FYI for anyone who might have started seeing the below error in their react application over the last week. This bug is the cause and it is fixed in `@babel\/generator@7.23.5`\r\n\r\n`Error: Minified React error #152; visit https:\/\/reactjs.org\/docs\/error-decoder.html?invariant=152&args[]=f`","Confirmed @babel\/generator@7.23.5 resolves the issue and a lockfile regen\/deps cleanup will bring that for me as transitive dependency."],"labels":["i: bug","i: regression"]},{"title":"[Bug] Our custom Error.prepareStackTrace leaks to the user","body":"https:\/\/github.com\/braidnetworks\/dynohot\/blob\/fb822d2022f9d71d9d7ab5377d5b5d55ddcb26a8\/loader\/transform.ts#L48-L55\r\n\r\nThanks @laverdet for noticing it :)","comments":[],"labels":["i: bug"]},{"title":"`BABEL_TYPES_8_BREAKING` has performance impact","body":"```ts\r\nimport Benchmark from \"benchmark\";\r\nimport * as baseline from \"@babel-baseline\/types\";\r\nimport { report } from \"..\/..\/util.mjs\";\r\n\r\nconst suite = new Benchmark.Suite();\r\n\r\nconst funcName = \"stringLiteral\";\r\nconst func = baseline[funcName];\r\n\r\nsuite.add(`${funcName} builder`, () => {\r\n  func(\"bar\");\r\n});\r\n\r\nsuite.add(`${funcName} builder with env`, () => {\r\n  func(\"bar\");\r\n  process.env.BABEL_TYPES_8_BREAKING;\r\n});\r\n\r\nsuite.on(\"cycle\", report).run();\r\n```\r\n```\r\nPS F:\\babel\\benchmark\\babel-types\\builders> node .\\stringLiteral.mjs\r\nstringLiteral builder: 38_675_154 ops\/sec \u00b10.5% (0ms)\r\nstringLiteral builder with env: 3_588_211 ops\/sec \u00b10.19% (0ms)\r\n```\r\n10x\r\nI'm not sure how this affects overall performance, but this is in part of the hot path such as `Identifier`.\r\nSo I opened this issue for discussion.","comments":["```ts\r\nimport * as current from \"@babel\/core\";\r\nimport * as parser from \"@babel-baseline\/parser\";\r\nimport { readFileSync } from \"fs\";\r\n\r\nconst fixtureName = \"babel-parser-tokenizer-index.txt\";\r\n\r\nfunction createInput() {\r\n  return parser.parse(\r\n    readFileSync(new URL(\".\/\" + fixtureName, import.meta.url), {\r\n      encoding: \"utf-8\",\r\n    }),\r\n    { sourceType: \"module\", plugins: [\"typescript\"] }\r\n  );\r\n}\r\n\r\nconst input = createInput();\r\n\r\nconsole.time(\"with env\");\r\nfor (let i = 0; i < 100; i++) {\r\n  current.transformFromAstSync(input, {\r\n    plugins: [\"@babel\/preset-env\", \"@babel\/preset-typescript\"],\r\n    targets: \"ie 11\",\r\n    configFile: false,\r\n    babelrc: false,\r\n  });\r\n}\r\nconsole.timeEnd(\"with env\");\r\n\r\nconsole.time(\"without env\");\r\nprocess.env = JSON.parse(JSON.stringify(process.env));\r\nfor (let i = 0; i < 100; i++) {\r\n  current.transformFromAstSync(input, {\r\n    plugins: [\"@babel\/preset-env\", \"@babel\/preset-typescript\"],\r\n    targets: \"ie 11\",\r\n    configFile: false,\r\n    babelrc: false,\r\n  });\r\n}\r\nconsole.timeEnd(\"without env\");\r\n```\r\n```\r\nPS F:\\babel\\benchmark\\babel-core\\real-case-preset-env-flow> node .\\babel-parser-tokenizer-index.mjs\r\nwith env: 1.586s\r\nwithout env: 1.478s\r\nPS F:\\babel\\benchmark\\babel-core\\real-case-preset-env-flow> node .\\babel-parser-tokenizer-index.mjs\r\nwith env: 1.559s\r\nwithout env: 1.486s\r\nPS F:\\babel\\benchmark\\babel-core\\real-case-preset-env-flow> node .\\babel-parser-tokenizer-index.mjs\r\nwith env: 1.572s\r\nwithout env: 1.473s\r\n```\r\nThis is done under `make prepublish`.\r\n~6%\r\nNote that this may be more than just `BABEL_TYPES_8_BREAKING`.","Can we hoist the flag check out of the function definition? E.g.\r\n\r\n```js\r\nt.Identifier = BABEL_TYPES_8_BREAKING ? IdentifierStrict : IdentifierLoose;\r\n```\r\n\r\nsince we know that the builder does not modify the env variables.","But I'm not sure if any users modify environment variables dynamically, especially esm users. They usually set `BABEL_TYPES_8_BREAKING` after importing babel.","Now that we have a beta release, can we just use `process.env.BABEL_8_BREAKING`? People that want to test breaking changes can use Babel 8.","Wow, I want to do that too! Although it may be a breaking change.\r\nI will open a PR.","https:\/\/github.com\/babel\/babel\/pull\/13538\r\nYes, we've actually done that.\r\n\r\nhttps:\/\/github.com\/babel\/babel\/pull\/15880\r\nIn addition, if you have time, can you review https:\/\/github.com\/babel\/babel\/pull\/15880? The PR to solve this issue needs to be based on it.\r\nThanks!"],"labels":["i: discussion"]},{"title":"fix: support module expression scopes","body":"| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #16037 <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\ud83d\udc4d\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\nThe `Program` visitor can now only be called once for the top-level (cannot access the `parent` property on node, so I added a class field).\r\nAlso added a visitor for `ModuleExpression` nesting a module scope.\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/55795\/","This is not implemented, as this only a simple fix, so that analyzing the scope works at all without throwing an error.\r\nAs I understand, `eslint-scope` has no concept of \"isolated\" scopes (variables can be read from any parent scope).\r\nOne idea to hack it in would be to track the module expressions and check it either in the [Identifier visitor](https:\/\/github.com\/eslint\/eslint-scope\/blob\/957748e7fb741dd23f521af0c124ce6da0848997\/lib\/referencer.js#L431) or [when referencing a value](https:\/\/github.com\/eslint\/eslint-scope\/blob\/957748e7fb741dd23f521af0c124ce6da0848997\/lib\/scope.js#L436).\r\nBut honestly I think this change should be made by `eslint-scope` or in a separate PR as this would require more extensive testing (e.g. nested module expressions)."],"labels":["PR: Bug Fix :bug:"]},{"title":"plugin-transform-block-scoping: Allow ignoring for loop declarations instead of transforming or throwing","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nI want to use the plugin to turn my let\/const declarations in my bundler into vars for better compression.\r\n\r\nBecause let\/const variables declared in for loops have special lifetime rules, the plugin has the option to either create a closure with the value captured at that point in time or to throw on such cases.\n\n### Describe the solution you'd like\n\nI'd like an option for the plugin to basically ignore such cases of declarations inside for loops and continue on instead of the alternatives currently available.\n\n### Describe alternatives you've considered\n\nNone other that I can think of.\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @gtm-nayan! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","`var` has also a big performance benefit over `let`\/`const` -- I have been thinking about a transform like the proposed one for a while.\r\n\r\nArchiteture-wise, I think this should live in a separate plugin as it's more of an \"optimization plugin\" and I would prefer for users to be able to easily enable it by just adding it to their config (rather than using the existing let\/const plugin and having to figure out this option to avoid bloating their code with the loop-related transform). The main let\/const plugin could then depend on this new one, to avoid duplicating code.\r\n\r\nIf you want to work on a PR for this, I'd be happy to review and give guidance if needed :)"],"labels":["i: enhancement"]},{"title":"[Bug]: Babel\/ts can't parse `type tmp = number?;` (tsc can)","body":"### \ud83d\udcbb\r\n\r\n- [~] Would you like to work on a fix? Since I need this, I would like it to be fixed, but I'm not sure if I know enough about the parser internals...\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n[REPL](https:\/\/babeljs.io\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=C4TwDgpgBMC2ZQLxQHYFdYCMICcD8A3EA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=typescript&prettier=false&targets=&version=7.23.2&externalPlugins=&assumptions=%7B%7D):\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/5236548\/d3ccdbf4-0fdc-4b5d-8d0b-f33d1082a2a7)\r\n\r\n[TS AST Viewer](https:\/\/ts-ast-viewer.com\/#code\/C4TwDgpgBMC2ZQLxQHYFdYCMICcD8A3EA):\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/5236548\/23f4db25-42c4-4366-881f-3b6fe9c38130)\r\n\r\n```js\r\nimport {parse} from '@babel\/parser';\r\nparse('type tmp = number?;', {plugins: ['typescript']});\r\n```\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/5236548\/0cde9a30-c953-4452-a46b-dce598238a52)\r\n\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nCurrent behaviour: parse error\r\nExpected behaviour: parse it like tsc does\r\n\r\n### Environment\r\n\r\n```js\r\n\"@babel\/parser\": \"^7.23.0\"\r\n```\r\n\r\n### Possible solution\r\n\r\nFix parser by adding two node types:\r\n - JSDocNullableType\r\n - JSDocNonNullableType (replace ? with !)\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/6856943\/39607069-58d0b3d2-4ee5-11e8-8d0e-ec680c48e238.png)\r\n\r\n### Additional context\r\n\r\n@nicolo-ribaudo mentioned the need for these kinds of parse issues here: https:\/\/github.com\/babel\/babel\/issues\/16048#issuecomment-1763556413\r\n\r\n> It's ok if Babel does not error on every invalid TS code (since the type checker will error anyway), but we must parse every TS code that tsc can parse.\r\n\r\n","comments":["Hey @kungfooman! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","https:\/\/www.typescriptlang.org\/play?#code\/C4TwDgpgBMC2ZQLxQHYFdYCMICcD8A3EA\r\nThis is not valid for tsc.","@liuxingbaoyu Please read what you have marked yourself with thumbs up:\r\n\r\n> It's ok if Babel does not error on every invalid TS code (since the type checker will error anyway), but we must parse every TS code that tsc can parse.\r\n\r\n_Originally posted by @nicolo-ribaudo in https:\/\/github.com\/babel\/babel\/issues\/16048#issuecomment-1763556413_\r\n\r\n...we *must* parse... what the type checker claims afterwards doesn't matter (hence look at the AST level)","According to my understanding, this means that Babel may parse illegal ts code, and Babel may not necessarily parse the code with tsc errors.","> this means that Babel may parse illegal ts code\r\n\r\nNo, it's not illegal, it's as legal as it gets - implemented by tsc itself. You objected yourself to my view that maybe we shouldn't consider `tsc` as \"holy truth\" and now you want to derive from that view yourself.\r\n\r\nType checking errors you see in TS PlayGround \/ Monaco play no role here. You can easily find examples that Babel-TS happily parses:\r\n\r\n```js\r\nconst str = 'type string = 0;'\r\nparse(str, {plugins: ['typescript']});\r\n```\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/5236548\/7ac70a96-9fec-4c4a-8ce6-ea12302a2533)\r\n\r\nhttps:\/\/www.typescriptlang.org\/play?#code\/C4TwDgpgBAzsBOBLAdgcygXigBgNxA\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/5236548\/2e3ee1f3-3256-4142-8150-782f7d633e46)\r\n\r\nOops? But this doesn't matter because AST is AST. We can't argue X in issue A and opposite of that in issue B...","I think Babel parser only officially supports parsing code that doesn't have parse errors\/type errors in tsc.\r\ntsc can parse it for better error prompts during development, but Babel does not need to do this. Babel is expected to accept TS code without any errors in tsc.\r\nAlso if you look at it in typescript-eslint, you will find that this AST is not part of the TS, it is a node in jsdoc, and babel does not parse jsdoc.\r\nhttps:\/\/typescript-eslint.io\/play#ts=4.6.2&showAST=es&fileType=.tsx&code=LAKALgngDgpgBGAtlOBeOA7ArogRjAJwH4BuIA&eslintrc=N4KABGBEBOCuA2BTAzpAXGYBfEWg&tsconfig=N4KABGBEDGD2C2AHAlgGwKYCcDyiAuysAdgM6QBcYoEEkJemy0eAcgK6qoDCAFutAGsylBm3TgwAXxCSgA&tokens=false","TypeScript does indeed parse that code and report a \"syntax error\" (the error message is `'?' at the end of a type is not valid TypeScript syntax`) at type-checking time. Normally, way to tell whether something in TS is a syntax error is that it's reported in `parseDiagnostics` in their AST. This specific error is a weird combination (it claims to be one thing, it is reported as the other), and I lean towards considering it as a syntax error and not as a type error.\r\n\r\nIf there are examples of real-world projects using the `number?` syntax by suppressing the error with `@ts-expect-error`\/`@ts-ignore`, I'm happy to change my stance.\r\n\r\n@kungfooman Your message comes off as aggressive. It gives the vibe of \"you disagreed with me in the other issue, so now I'm proving that you are wrong\". Please keep this discussion constructive.","@nicolo-ribaudo Yes, I realize that this case is a weird combination, it claims to be an error while having a perfect and meaningful AST without a report in `parseDiagnostics`:\r\n\r\n```js\r\nconst str = `type tmp = number?;`;\r\nconst ret = ts.createSourceFile('repl.ts', str, ts.ScriptTarget.Latest, true);\r\nret.parseDiagnostics; \/\/ empty array\r\n```\r\n\r\nThat puts it on the same level as e.g. `type string = 0;` and is fully in line with your own previous view:\r\n\r\n> It's ok if Babel does not error on every invalid TS code (since the type checker will error anyway), but we must parse every TS code that tsc can parse.\r\n\r\n> If there are examples of real-world projects using the number? syntax by suppressing the error with @ts-expect-error\/@ts-ignore, I'm happy to change my stance.\r\n\r\nYes, I'm the author of a real-world project and I require this. I'm parsing JSDoc comments for https:\/\/runtimetypeinspector.org\/ currently via `tsc`, but otherwise I use Babel for everything else. However `tsc` is a large and complicated dependency and I would rather *only* use `Babel`. But right now I can't, simply because Babel-TS doesn't match the abilities of `tsc`.\r\n\r\nIt also comes across as aggressive when people \"suddenly change their mind\" because it just happens to be convenient, just saying. Despite that, I hope we can look over that now and try to find a solution to make Babel-TS just as capable as `tsc`.\r\n\r\nWhat do you think about this as possible compromise?\r\n\r\n```js\r\nconst str = 'number?';\r\nparse(str, {plugins: ['typescript-jsdoc']});\r\n```\r\n\r\n`tsc` doesn't really make that separation, but if we follow your syntax error logic, then we require some other way of doing what `tsc` does for JSDoc type AST's.","Here is another one that `tsc` can parse, but Babel-TS can't:\r\n\r\n```js\r\nconst str = `type tmp = Array<>;`;\r\nconst ret = ts.createSourceFile('repl.ts', str, ts.ScriptTarget.Latest, true);\r\nconsole.log(\"parseDiagnostics\", ret.parseDiagnostics);\r\nret.getText();\r\n```\r\n\r\nOutput:\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/5236548\/13e62737-0c3e-4093-b157-4efbe0b9a6e6)\r\n\r\nBabel-TS:\r\n\r\n```js\r\nconst str = `type tmp = Array<>;`;\r\nparse(str, {plugins: [\"typescript\"]});\r\n```\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/5236548\/908acf4b-c1ca-452c-a094-09a6b54d9700)\r\n","And another type from the JSDoc world:\r\n\r\n```ts\r\ntype tmp = function(Error, object): void;\r\n```\r\n\r\nhttps:\/\/ts-ast-viewer.com\/#code\/C4TwDgpgBMC2ZQLxQGYFcB2BjYBLA9hgBQCiATmfmQDRT4BGAVhDgJQBcUAbvrgCYBuIA\r\n\r\n```js\r\nconst str = `type tmp = function(Error, object): void;`;\r\nconst ret = ts.createSourceFile('repl.ts', str, ts.ScriptTarget.Latest, true);\r\nconsole.log(\"parseDiagnostics\", ret.parseDiagnostics);\r\nret.getText();\r\n```\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/5236548\/14f18bb4-8377-4ca4-b580-12331ae254a6)\r\n\r\nBabel-TS:\r\n\r\n```js\r\nconst str = `type tmp = function(Error, object): void;`;\r\nparse(str, {plugins: [\"typescript\"]});\r\n```\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/5236548\/f8274ffe-7afe-445e-9416-cf75ac41d86a)\r\n"],"labels":["i: question"]},{"title":"Add `hermes` compilation target","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #15612 <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      | Yes\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | https:\/\/github.com\/babel\/website\/pull\/2844  <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\nThe same as #14944, we add [`hermes`](https:\/\/github.com\/facebook\/hermes) as one of the compilation targets.\r\n\r\nNow `preset-env` recognizes `hermes` as a compilation target:\r\n\r\n```json\r\n{\r\n  \"presets\": [[\"env\", { \"targets\": { \"hermes\": \"0.7\" } }]]\r\n}\r\n```\r\n\r\nNote that neither `browserslist` nor `@mdn\/browser-compat-data` has compat data of `hermes`. So `hermes` is not added to `browserNameMap` at\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/c446ff85c28e117ebf3cd72cd34ef358f1077aa8\/packages\/babel-helper-compilation-targets\/src\/targets.ts#L6-L22","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/55730\/","Thanks! It looks like there is a TS error, you can debug it locally with `make tscheck`.","Thanks! It is fixed. Also, the documentation PR link is updated.","> I think that makes sense to add also `react-native` target for Hermes bundled with React Native. `core-js-compat` and `compat-table` also have data for this.\r\n\r\nI agree with adding `react-native`. But I took a look at the `compat-table` data, it seems there is only one version of react-native:\r\n\r\n> React Native 0.70.3 (Using bundled Hermes and metro-react-native babel preset)\r\n> https:\/\/github.com\/compat-table\/compat-table\/blob\/6b68e5109b47771581d47faba6d4c5077f72061e\/environments.json#L7650-L7657\r\n\r\nIs it a little weird to use `preset-env` with `metro-react-native-babel-preset`? According to its documentation:\r\n\r\n> React Native itself uses this Babel preset by default when transforming your app's source code.\r\n> https:\/\/www.npmjs.com\/package\/metro-react-native-babel-preset\r\n\r\nI'm not familiar with `react-native`. For me, it looks like the `metro-react-native-babel-preset` works as the `preset-env` of `react-native`.\r\n\r\nIs it correct to add `react-native` into `preset-env` with compat-data that is generated by using another babel preset? ","I'm using the REPL from @babel-bot and testing via in F12\/DevTools:\r\n\r\n```js\r\nstr = `\r\nclass Foo {\r\n  #bar() {\r\n    \/\/ Should be transpiled\r\n  }\r\n}\r\n`;\r\noptions = {\r\n  \"targets\": {\r\n    \"hermes\": \"0.7\"\r\n  }\r\n};\r\nret = Babel.transform(str, options);\r\nconsole.log(ret.code);\r\n```\r\n\r\nThe output is same as input. Shouldn't it rewrite it? (sorry if stupid question, I'm new to this part of Babel)","@kungfooman By default Babel does not apply any transform, you will have to enable the `env` preset.\r\n\r\n```js\r\nvar options = {\r\n  \"presets\": [\"env\"],\r\n  \"targets\": {\r\n    \"hermes\": \"0.7\"\r\n  }\r\n};\r\n```","> I agree with adding `react-native`. But I took a look at the `compat-table` data, it seems there is only one version of `react-native`.\r\n\r\nIt's `compat-table` issue - [`core-js-compat` contains data for all `hermes` versions to `react-native@0.73`](https:\/\/github.com\/zloirock\/core-js\/blob\/64cbfb8e61ac9a08395b09e87250e2f1ce5027b5\/packages\/core-js-compat\/src\/data.mjs#L151). And it's compatibility results have improved significantly compared to the latest `hermes` version that was published separately - I don't see any such releases after August 2022.\r\n\r\nAbout a year ago I received some messages that someone wanted such target, however, I can't find those messages to invite their author to this thread.\r\n\r\nI'm also not familiar with `react-native` and facing `hermes` only for compatibility reasons, so if you think that I'm wrong feel free to fix me.\r\n\r\n","I don't know about `react-native`, but the CI failure here is relevant.","@collinaa I rebased this PR and I'm taking a look at the CI failure. According to compat-table, hermes 0.7 supports all of optional chaining _except for `a?.(...spread)`_. It's confusing, because as far as I know this was a V8-specific bug. Could you investigate whether it's correct or not?\r\n\r\nhttps:\/\/github.com\/compat-table\/compat-table\/blob\/1a1ccdc02b8b2158ab39a6146d8a7308f43c830b\/data-es2016plus.js#L4951","@kelset I'm don't know much about the relationship between hermes and react-native either. Do you think it makes sense for us to add data for hermes independently by whether or not we have react-native compat data?","let me loop in some Meta folks: @huntie @robhogan @motiz88 @tmikov @neildhar so that they can talk about this","> it looks like the metro-react-native-babel-preset works as the preset-env of react-native.\n\nThis is basically right (in recent versions it's moved to `@react-native\/babel-preset`). Note that preset supports targeting JavaScriptCore as well as Hermes - RN doesn't always run on Hermes, though it's now the default.\n\nThe `react-native` compat table data is meant to show developers what features\/syntax they can use in their code *before* we downlevel it (with Babel) for Hermes\/JSC. The transpilation target from Babel's perspective would be Hermes. (This is actually only an intermediate, as we then run it though the Hermes compiler at build time to generate Hermes bytecode - it's HBC that's bundled into RN apps)\n\nVersioning gets a little messy. RN builds Hermes straight from `main` at RN release cut points, Hermes numbered versions aren't used and are quite out of date. \n\nHermes `main` itself is almost frozen while the team works on its successor, \"Static Hermes\", which will have a very different level of JS support, since the compiler will work best when provided fully type-annotated TS\/Flow. It's unlikely Hermes \"original\" will gain any significant new syntax\/feature support.\n\nSo, a `hermes` preset-env target makes sense in theory, but I'm not sure who'd use it given we have `@react-native\/babel-preset` already, and it might be relatively short-lived with Static Hermes coming.","@colinaaa  Given the above points, we are currently deferring this PR to a future release. However, I'd be open to mentioning `@react-native\/babel-preset` in our `preset-env` docs if you want to send a PR :)"],"labels":["PR: New Feature :rocket:","pkg: preset-env"]},{"title":"[Bug]: New line being added every time I do parse and generate","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@babel\/eslint-parser\r\n\r\n### Input code\r\n\r\n```\r\nconst Foobar = () => {\r\n\r\n  return (\r\n    <div>\r\n      <oj-input-number\r\n        label-hint=\"readonly currency short\"\r\n        id=\"inputTextShortNumber\"\r\n        value=\"{{currencyRoundDuringParse}}\"\r\n        readonly\r\n        instruction=\"Enter an amount in field and the formatted currency\r\n                      will be displayed in readonly field below\"\r\n        converter=\"[[usdShortNumberConverter]]\"><\/oj-input-number>\r\n    <\/div>)\r\n\r\n}\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nCurrent behavior\r\n```\r\nconst Foobar = () => {\r\n\r\n  return (\r\n    <div>\r\n      <oj-input-number\r\n        label-hint=\"readonly currency short\"\r\n        id=\"inputTextShortNumber\"\r\n        value=\"{{currencyRoundDuringParse}}\"\r\n        readonly\r\n        instruction=\"Enter an amount in field and the formatted currency\r\n                      will be displayed in readonly field below\"\r\n\r\n        converter=\"[[usdShortNumberConverter]]\"><\/oj-input-number>\r\n    <\/div>);\r\n\r\n};\r\n```\r\n\r\nExpected behavior\r\n```\r\nconst Foobar = () => {\r\n\r\n  return (\r\n    <div>\r\n      <oj-input-number\r\n        label-hint=\"readonly currency short\"\r\n        id=\"inputTextShortNumber\"\r\n        value=\"{{currencyRoundDuringParse}}\"\r\n        readonly\r\n        instruction=\"Enter an amount in field and the formatted currency\r\n                      will be displayed in readonly field below\"\r\n        converter=\"[[usdShortNumberConverter]]\"><\/oj-input-number>\r\n    <\/div>)\r\n\r\n}\r\n```\r\n\r\n### Environment\r\n\r\nSystem:\r\n    OS: macOS 13.4\r\n  Binaries:\r\n    Node: 18.18.0 - ~\/.nvm\/versions\/node\/v18.18.0\/bin\/node\r\n    npm: 9.8.1 - ~\/.nvm\/versions\/node\/v18.18.0\/bin\/npm\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\nI parse it and make no changes and then generate it again and it adds a new line. This only happens when the attribute has a line break in its value.\r\n\r\n```parse(code, {\r\n        sourceType: \"unambiguous\",\r\n        plugins: [\r\n            \"jsx\",\r\n            \"typescript\",\r\n            \"decorators\"\r\n        ]\r\n    });\r\n\r\ngenerate(ast, {\r\n        compact: false,\r\n        retainLines: true\r\n    }).code;```","comments":["Hey @marisolmelendresm! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","It is still happening"],"labels":["pkg: generator","i: bug","area: jsx"]},{"title":"[Bug]: Regression with `let` in loops","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nvar objects = [];\r\nvar i = 0;\r\nfor (var proto of [0, 1 ,2]) if (true) {\r\n  let _obj = i;\r\n  i++;\r\n  \r\n  objects.push({\r\n    foo() {\r\n      return _obj;\r\n    }\r\n  });\r\n}\r\n\r\nconsole.assert(objects[0].foo()===0,objects[0].foo());\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\n[old babel](https:\/\/bvaughn.github.io\/babel-repl\/#?babili=false&browsers=&builtIns=false&code_lz=G4QwTgBA9gRgVgUwMYBcDOEC8EDaBdAbgChRIBLLCABmIDMpIAKUiABzChSmltyoBoIARgj8ATHgCUEMr0YowAVwTSA3kQgQANghQQA-rDiUyxTWQDUFsxA3R4ydADpWitAAtG6zZvpRGanY-EGC6imAAdgZGNpoAvnZxksQJREhQEWhQOk4gaGgIYCiMRo5oOFR4Tn4BmHUCpajlldVQ_pLJRERAA&debug=false&evaluate=false&lineWrap=true&presets=es2015%2Creact%2Cstage-2&prettier=false&showSidebar=true&targets=)\r\n\r\n\r\n[repl](https:\/\/babeljs.io\/repl\/build\/55412\/#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=G4QwTgBA9gRgVgUwMYBcDOEC8EDaBdAbgChRIBLLCABmIDMpIAKUiABzChSmltyoBoIARgj8ATHgCUEMr0YowAVwTSA3kQgQANghQQA-rDiUyxTWQDUFsxA3R4ydADpWitAAtG6zZvpRGanY-EGC6imAAdgZGNpoAvnZxksQJREhQEWhQOk4gaGgIYCiMRo5oOFR4Tn4BmHUCpajlldVQ_pLJRERAA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=true&sourceType=module&lineWrap=false&presets=&prettier=false&targets=&version=7.22.16%2Bpr.15948&externalPlugins=%40babel%2Fplugin-transform-block-scoping%407.21.0&assumptions=%7B%7D)\n\n### Environment\n\n\/\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nhttps:\/\/github.com\/babel\/babel\/pull\/15948#issuecomment-1713006370","comments":["https:\/\/github.com\/babel\/babel\/pull\/15962\r\nShould we have fixed it here?","[repl](https:\/\/babeljs.io\/repl#?browsers=chrome%2058&build=&builtIns=false&corejs=false&spec=false&loose=false&code_lz=G4QwTgBA9gRgVgUwMYBcDOEC8EDaBdAbgChRIBLLCABmIDMpIAKUiABzChSmltyoBoIARgj8ATHgCUEMr0YowAVwTSA3kQgQANghQQA-rDiUyxTWQDUFsxA3R4ydADpWitAAtG6zZvpRGanY-EGC6imAAdgZGNpoAvnZxksQJREhQEWhQOk4gaGgIYCiMRo5oOFR4Tn4BmHUCpajlldVQ_pLJQA&debug=false&forceAllTransforms=true&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=env%2Cstage-3%2Ctypescript&prettier=false&targets=&version=7.23.3&externalPlugins=&assumptions=%7B%7D)\r\n\r\nYes, this looks to have been fixed. :)"],"labels":["i: bug","i: regression"]},{"title":"[Bug]: Nodes without `loc` included in sourcemap","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\nBabel seems to be assigning source locations to nodes which do not have a source location at all.\r\nThe below example code adds some ast without a sourcemap around an existing node.\r\n\r\nIn this case the source map for the output ` || 1` points to the `b` identifier in the source code.\r\nThis is especially problematic for code coverage which will cause this output code to count as a potentially uncovered branch.\r\n\r\n```js\r\nimport * as t from \"@babel\/types\";\r\nimport * as babel from \"@babel\/core\";\r\nconst result = await babel.transformAsync(`a = b`, {\r\n  babelrc: false,\r\n  configFile: false,\r\n  sourceMaps: \"inline\",\r\n  plugins: [\r\n    {\r\n      visitor: {\r\n        AssignmentExpression(assignmentExpression) {\r\n          assignmentExpression\r\n            .get(\"right\")\r\n            .replaceWith(\r\n              t.logicalExpression(\r\n                \"||\",\r\n                assignmentExpression.get(\"right\").node,\r\n                t.numericLiteral(1)\r\n              )\r\n            );\r\n        },\r\n      },\r\n    },\r\n  ],\r\n});\r\n```\r\n\r\nOutputs the following code:\r\n```js\r\na = b || 1;\r\n\/\/# sourceMappingURL=data:application\/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhIiwiYiJdLCJzb3VyY2VzIjpbInVua25vd24iXSwic291cmNlc0NvbnRlbnQiOlsiYSA9IGIiXSwibWFwcGluZ3MiOiJBQUFBQSxDQUFDLEdBQUdDLENBQUMifQ==\r\n```\r\n\r\nYou can view that the sourcemap is incorrect here https:\/\/evanw.github.io\/source-map-visualization\/#MjMyAGEgPSBiIHx8IDE7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKdVlXMWxjeUk2V3lKaElpd2lZaUpkTENKemIzVnlZMlZ6SWpwYkluVnVhMjV2ZDI0aVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lZU0E5SUdJaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQlFTeERRVUZETEVkQlFVZERMRU5CUVVNaWZRPT0xMTUAeyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhIiwiYiJdLCJzb3VyY2VzIjpbInVua25vd24iXSwic291cmNlc0NvbnRlbnQiOlsiYSA9IGIiXSwibWFwcGluZ3MiOiJBQUFBQSxDQUFDLEdBQUdDLENBQUMifQ==\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nCurrently the output sourcemap contains unnecessary and invalid additional mappings.\r\n\r\nI would expect that only mappings related to nodes with a `loc` get output in the sourcemap.\n\n### Environment\n\n  System:\r\n    OS: macOS 13.5\r\n  Binaries:\r\n    Node: 18.18.0 - ~\/.nvm\/versions\/node\/v18.18.0\/bin\/node\r\n    Yarn: 1.22.19 - \/opt\/homebrew\/bin\/yarn\r\n    npm: 9.8.1 - ~\/.nvm\/versions\/node\/v18.18.0\/bin\/npm\r\n    pnpm: 8.8.0 - ~\/pnpm\/pnpm\r\n  npmPackages:\r\n    @babel\/core: ^7.23.2 => 7.23.2 \n\n### Possible solution\n\nThe issue appears to be related to [this code](https:\/\/github.com\/babel\/babel\/blob\/419644f27c5c59deb19e71aaabd417a3bc5483ca\/packages\/babel-generator\/src\/buffer.ts#L471-L481) which is not cleared and applies it's position to future nodes.\r\n\n\n### Additional context\n\n_No response_","comments":["Hey @DylanPiercey! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","@DylanPiercey How Do you Know the Posibble solution. just curious . new to open source. What are the prerequisite knowledge required to fin solutions to these problems","@DylanPiercey What would you expect the source map to be like? From what I see in that example, it looks like Babel is mapping four points: the beginning and and of `a` and of `b`.\r\n\r\nBtw, I recommend using https:\/\/sokra.github.io\/source-map-visualization instead of https:\/\/evanw.github.io\/source-map-visualization, as it also lists the decoded mappings: https:\/\/sokra.github.io\/source-map-visualization\/#base64,YSA9IGIgfHwgMTsKLyogYmFzZTY0IHNvdXJjZSBtYXAgcmVtb3ZlZCAqLwo=,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhIiwiYiJdLCJzb3VyY2VzIjpbInVua25vd24iXSwic291cmNlc0NvbnRlbnQiOlsiYSA9IGIiXSwibWFwcGluZ3MiOiJBQUFBQSxDQUFDLEdBQUdDLENBQUMiLCJmaWxlIjoiZXhhbXBsZS5qcyJ9,YSA9IGI=","@nicolo-ribaudo the problem is that final mapping of the `|| 1`. That code is not in the source and should not be mapped back anywhere.\r\n\r\nMy main issue is I've got a Babel transform that outputs something like this, but the `|| 1` is being marked as an uncovered branch in the test coverage. This ends up being very confusing because this code is not in the source at all. Generally my understanding is that nodes added (not in the source) should not be added to the source map.","@SiddiqAM1 I scanned through @babel\/generator which is what creates the source maps. While debugging through that I could see the reason for the additional mappings was because of a long lived `_sourcePosition` which I believe should be cleared when we enter a new unmapped node.","@DylanPiercey Source maps do not map \"source ranges\", but they map \"source points\". In this case, we are mapping these points of the output (adding `_` between characters just for clarity):\r\n```\r\n_a_ _=_ _b_ _||_ _1_;_\r\n\u2193 \u2193     \u2193 \u2193\r\n_a_ _=_ _b_;_\r\n```\r\n\r\nWe are not mapping `|| 1` explicitly to anything.","@nicolo-ribaudo am I wrong in thinking that the map should be reset or something like that (pardon my lack of understanding) after the `b` though? It just confuses me that both sourcemap visualizers show the `|| 1` as mapped (I see that it's a \"point\" rather than a range as you say) and that this mapping is seemingly also picked up via sourcemap consumers.\r\n\r\nAppreciate your time discussing this!","Source map don't really support \"resetting\". One possible way is to generate a source map referring to two source files: one is your original file and one is just an empty virtual file. Then, all the generated code could point to the empty file. However, this feels very hacky \ud83d\ude2c\r\n\r\nWe are working on a proper source maps spec, and there is some relevant discussion going on at https:\/\/github.com\/tc39\/source-map-rfc\/issues\/32.","@nicolo-ribaudo really appreciate the link. In that issue they bring up https:\/\/github.com\/terser\/terser\/pull\/1106#issue-1040526896 as a similar issue. Although from what I understand they fixed that on the terser side.\r\n\r\nIt looks like they did this here: https:\/\/github.com\/terser\/terser\/pull\/1106\/files#diff-1378f0e2a198059d9d7cf6a4718b869f277986aef3198af9d92af29e1ce2f906R93-R98\r\n\r\nIs that something babel could do as well?","> Source map don't really support \"resetting\".\r\n\r\nSource maps have a \"sourceless\" segment (`[genColumn]` segment instead of a \"source\" segment `[genColumn, sourcesIndex, sourceLine, sourceColumn]` or \"named\" segment `[genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]`), which is for exactly this purpose. But, the problem here isn't the `|| 1` that we're inserting, Babel isn't marking that with source index. It's the `AssignmentExpression` itself and the parent `ExpressionStatement`, we're marking the end locations of those two nodes.\r\n\r\nCompare:\r\n- https:\/\/astexplorer.net\/#\/gist\/628acbcccb939ae5306d94bf7e48830c\/0f0821c979b3fccc3987c20e708d9b98e0570f39\r\n- https:\/\/astexplorer.net\/#\/gist\/3437c5e22cc1debd5bbf6737868346d9\/2e3c37044e27a456833fb0e616b9f1664016e6ed"],"labels":["i: needs triage"]},{"title":"[Bug]: Fails to parse type declarations like `type satisfies = 0`;","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n```ts\r\ntype satisfies = 0;\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nCurrent babel parser fails to parse it with following error:\r\n```\r\n\/repl.ts: Unexpected token (1:15)\r\n\r\n> 1 | type satisfies = 0;\r\n    |                ^\r\n```\r\n\r\nIt should be successfully parsed as TypeScript Playground doesn't report any errors.\r\nhttps:\/\/www.typescriptlang.org\/play?#code\/C4TwDgpgBAzghsAljAZoiMoF4oAYDcQA\r\n\n\n### Environment\n\n```\r\nSystem:\r\n  OS: macOS 13.4.1\r\nBinaries:\r\n  Node: 17.7.2 - ~\/.asdf\/installs\/nodejs\/17.7.2\/bin\/node\r\n  Yarn: 3.6.3 - ~\/.asdf\/installs\/nodejs\/17.7.2\/.npm\/bin\/yarn\r\n  npm: 8.5.2 - ~\/.asdf\/plugins\/nodejs\/shims\/npm\r\nnpmPackages:\r\n  @babel\/code-frame: 7.22.13 => 7.22.13\r\n  @babel\/generator: 7.22.15 => 7.22.15\r\n  @babel\/parser: 7.23.0 => 7.23.0\r\n  @babel\/types: 7.23.0 => 7.23.0\r\n  eslint: 8.50.0 => 8.50.0\r\n  jest: 29.7.0 => 29.7.0\r\n```\r\n\r\nInstantly reproducible here: https:\/\/babeljs.io\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=C4TwDgpgBAzghsAljAZoiMoF4oAYDcQA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Cstage-2%2Ctypescript&prettier=false&targets=&version=7.23.2&externalPlugins=&assumptions=%7B%7D\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @seiyab! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Another related issue\r\n\r\n```TypeScript\r\ntype as = 1;\r\nlet a: as = 1;\r\n```","If we declare TS as the holy truth and regard every derivation from it as an error, then we have to fix more than this.\r\n\r\nFor example `type any = 0;` works in Babel, but causes an error in TypeScript.\r\n\r\nI like JavaScript's stance on this, you simply shouldn't use reserved keywords:\r\n\r\n```js\r\n\"use strict\";\r\nconst { arguments } = {};\r\n```\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/5236548\/61cbb41e-cb63-4190-a375-a5421c6d152b)\r\n\r\nBecause what is this good for but increasing confusion?\r\n","It's ok if Babel does not error on every invalid TS code (since the type checker will error anyway), but we must parse every TS code that tsc can parse.","Just adding context, I, the author of this issue, don't matter the \"bug\" exists.\n\nI find it considering unfriendly test cases for Prettier relates to https:\/\/github.com\/prettier\/prettier\/issues\/15491.\nThough `(type) satisfies never` in Prettier is a \"real\" issue for me (someone named a variable `type` and I want to add exhaustiveness check), `type satisfies = 0;` in Babel parser doesn't interfere me.\n\nI reported it because sharing it might help maintainers \/ community to \n- find similar more practical bugs.\n- give some insight about TypeScript syntax.","> but we must parse every TS code that tsc can parse\r\n\r\nWe have a conceptual difference between the parsers here, TS is just parsing everything (but the AST seems malformed), while Babel likes to bail out very quickly (by throwing an error).\r\n\r\nThere are many examples like that, e.g. try `type finally = 0;`\r\n\r\nBabel: https:\/\/babeljs.io\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=C4TwDgpgBAZglgOwIYBsUigXigBgNxA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=typescript&prettier=false&targets=&version=7.23.2&externalPlugins=&assumptions=%7B%7D\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/5236548\/c02ca9c8-f972-4311-b0bb-a3aa7f87dd6a)\r\n\r\nTS: https:\/\/ts-ast-viewer.com\/#code\/C4TwDgpgBAZglgOwIYBsUigXigBgNxA\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/5236548\/783211b9-c588-4ac4-b515-dee334ce4515)\r\n\r\n(not \"good\" TS, but still returning an AST)\r\n\r\nHow should we handle these cases?","I made a comparison on my website, you need TypeScript and Babel on the same site: https:\/\/runtimetypeinspector.org\/repl\/\r\n\r\nThen run this code (copy into right editor and press Shift+Enter):\r\n\r\n```js\r\n\/\/ https:\/\/github.com\/microsoft\/TypeScript\/issues\/2536\r\nconst tests = [\r\n  \"type satisfies = 0;\",\r\n  \"type constructor = 0;\",\r\n  \"type declare = 0;\",\r\n  \"type get = 0;\",\r\n  \"type module = 0;\",\r\n  \"type require = 0;\",\r\n  \"type set = 0;\",\r\n  \"type type = 0;\",\r\n  \"type from = 0;\",\r\n  \"type of = 0;\",\r\n  \"type as = 0;\",\r\n  \"type implements = 0;\",\r\n  \"type interface = 0;\",\r\n  \"type let = 0;\",\r\n  \"type package = 0;\",\r\n  \"type private = 0;\",\r\n  \"type protected = 0;\",\r\n  \"type public = 0;\",\r\n  \"type static = 0;\",\r\n  \"type yield = 0;\",\r\n  \"type namespace = 0;\",\r\n  \"type async = 0;\",\r\n  \"type await = 0;\",\r\n  \/\/ everything after await is causing a TS error\r\n  \"type string = 0;\",\r\n  \"type symbol = 0;\",\r\n  \"type number = 0;\",\r\n  \"type any = 0;\",\r\n  \"type boolean = 0;\",\r\n  \"type break = 0;\",\r\n  \"type case = 0;\",\r\n  \"type catch = 0;\",\r\n  \"type class = 0;\",\r\n  \"type const = 0;\",\r\n  \"type continue = 0;\",\r\n  \"type debugger = 0;\",\r\n  \"type default = 0;\",\r\n  \"type delete = 0;\",\r\n  \"type do = 0;\",\r\n  \"type else = 0;\",\r\n  \"type enum = 0;\",\r\n  \"type export = 0;\",\r\n  \"type extends = 0;\",\r\n  \"type false = 0;\",\r\n  \"type finally = 0;\",\r\n  \"type for = 0;\",\r\n  \"type function = 0;\",\r\n  \"type if = 0;\",\r\n  \"type import = 0;\",\r\n  \"type in = 0;\",\r\n  \"type instanceof = 0;\",\r\n  \"type new = 0;\",\r\n  \"type null = 0;\",\r\n  \"type switch = 0;\",\r\n  \"type return = 0;\",\r\n  \"type super = 0;\",\r\n  \"type this = 0;\",\r\n  \"type throw = 0;\",\r\n  \"type true = 0;\",\r\n  \"type try = 0;\",\r\n  \"type typeof = 0;\",\r\n  \"type var = 0;\",\r\n  \"type void = 0;\",\r\n  \"type while = 0;\",\r\n  \"type with = 0;\",\r\n];\r\n\/\/ console.log(tests.join('\\n'));\r\nfunction testBabel(test) {\r\n  try {\r\n      parse(test, {plugins: [\"typescript\"]});\r\n      return true;\r\n  } catch {}\r\n  return false;\r\n}\r\nfunction testTS(test) {\r\n  const ret = ts.createSourceFile('repl.ts', test, ts.ScriptTarget.Latest, true \/*setParentNodes*\/);\r\n  return {\r\n    isTypeAlias: ret.statements[0].kind === ts.SyntaxKind.TypeAliasDeclaration,\r\n    expression: ret.statements[0].expression,\r\n    text: ret.statements[0].getText()\r\n  };\r\n}\r\nfunction testBoth(test) {\r\n  const babel = testBabel(test);\r\n  const ts = testTS(test);\r\n  return {test, babel, ...ts};\r\n}\r\nconst ret = tests.map(testBoth);\r\nwindow.ret = ret;\r\nconsole.table(ret);\r\n```\r\n\r\nResult is something like:\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/5236548\/d4d19c7e-8bc9-4f92-ac52-c15aeb2d9d3b)\r\n\r\nIt's kind of funny how `node.getText()` of `type in = 0;` even tries to go back as `type in;` :sweat_smile: "],"labels":["i: bug","pkg: parser"]},{"title":"[babel 8] Enforce specifying proper `core-js` version","body":"In most cases of `core-js` usage with `preset-env`, I see something like `corejs: 3` in the config. With installed `core-js@3.33`.\r\n\r\nThe first `core-js@3` release was in March 2019 and since then the number of `core-js` features has almost doubled.\r\n\r\n`corejs: 3` in the `preset-env` config is interpreted `core-js@3.0` which limits the subset of used `core-js` features only to features that were in `core-js@3.0` and, in most cases, is not that the user expect.\r\n\r\nI propose to limit potentially incorrect `corejs` option values.\r\n\r\n- Disallow SemVer strings without a minor component, instead of `corejs: \"3\"` it should be at least `corejs: \"3.0\"`\r\n- Disallow numbers: even if someone writes `corejs: 3.30` it will be interpreted as `corejs: 3.3`\r\n\r\n---\r\n\r\nFrom @JLHwung:\r\n\r\nWhat about we also offer two magic options in Babel 8?\r\n\r\n- `corejs: \"node_modules\"`: use whatever version in `.\/node_modules\/core-js\/package.json`\r\n    This is for the people who bundle `core-js` with their website\r\n- `corejs: \"package.json\"`: use the _minimum_ version specified in `packageJson.dependencies[\"core-js\"]`\r\n    This is for library authors that specified `core-js` as a dependency\r\n \r\nFor more sophisticated usage, please specify your own `core-js` version.","comments":["Strong support for this. While removing support for core-js 2 I was thinking \"maybe we should change the default to 3.33 instead of 3.0\", but this idea is better.\r\n\r\nDo you think we should allow semver strings with a _patch_ component?","> maybe we should change the default to 3.33 instead of 3.0\r\n\r\nThe problem is that for any reason someone could have an older `core-js` version. And I hope on `core-js@4` release soon -)\r\n\r\n> Do you think we should allow semver strings with a patch component?\r\n\r\nBy SemVer, new features are added only in minor releases, but if it's a valid version - why not? I think that it should be allowed.","This should also be done in https:\/\/github.com\/babel\/babel-polyfills\/tree\/main\/packages\/babel-plugin-polyfill-corejs3.","What about we also offer two magic options in Babel 8?\r\n\r\n- `corejs: \"node_modules\"`: use whatever version in `.\/node_modules\/core-js\/package.json`\r\n    This is for the people who bundle `core-js` with their website\r\n- `corejs: \"package.json\"`: use the _minimum_ version specified in `packageJson.dependencies[\"core-js\"]`\r\n    This is for library authors that specified `core-js` as a dependency\r\n \r\nFor more sophisticated usage, please specify your own `core-js` version.","@JLHwung yep, I wanted to propose something like that, but was not sure about options names. Your option looks great -)","Let's reopen it to implementation of @JLHwung proposal."],"labels":["i: enhancement","pkg: preset-env"]},{"title":"[Bug]: module expression scope handling","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@babel\/eslint-parser\r\n\r\n### Input code\r\n\r\nCode:\r\n```js\r\nconst mod = module {}\r\n```\r\n\r\nProgrammatic access:\r\n```js\r\nimport { parseForESLint } from '@babel\/eslint-parser'\r\nparseForESLint(code, { plugins: [\"@babel\/proposal-syntax-module-blocks\"] })\r\n```\r\n\r\n### Configuration file name\r\n\r\nbabel.config.js\r\n\r\n### Configuration\r\n\r\n```json\r\n{\r\n\t\"plugins\": [\"@babel\/proposal-syntax-module-blocks\"]\r\n}\r\n```\r\n\r\n### Current and expected behavior\r\n\r\nCurrently parsing any code module expression and analyzing the scope will lead to an error:\r\n```txt\r\nAssertionError [ERR_ASSERTION]: The expression evaluated to a falsy value:\r\n\r\n  assert(this.__currentScope === null)\r\n\r\n    at ScopeManager.__nestScope (project\/node_modules\/.pnpm\/eslint-scope@5.1.1\/node_modules\/eslint-scope\/lib\/scope-manager.js:193:13)\r\n    at ScopeManager.__nestGlobalScope (project\/node_modules\/.pnpm\/eslint-scope@5.1.1\/node_modules\/eslint-scope\/lib\/scope-manager.js:201:21)\r\n    at Referencer.Program (project\/node_modules\/.pnpm\/eslint-scope@5.1.1\/node_modules\/eslint-scope\/lib\/referencer.js:412:27)\r\n    at Referencer.Visitor.visit (project\/node_modules\/.pnpm\/esrecurse@4.3.0\/node_modules\/esrecurse\/esrecurse.js:104:34)\r\n    at Referencer.Visitor.visitChildren (project\/node_modules\/.pnpm\/esrecurse@4.3.0\/node_modules\/esrecurse\/esrecurse.js:88:26)\r\n    at Referencer.Visitor.visit (project\/node_modules\/.pnpm\/esrecurse@4.3.0\/node_modules\/esrecurse\/esrecurse.js:107:14)\r\n    at Referencer.VariableDeclaration (project\/node_modules\/.pnpm\/eslint-scope@5.1.1\/node_modules\/eslint-scope\/lib\/referencer.js:536:22)\r\n    at Referencer.Visitor.visit (project\/node_modules\/.pnpm\/esrecurse@4.3.0\/node_modules\/esrecurse\/esrecurse.js:104:34)\r\n    at Referencer.Visitor.visitChildren (project\/node_modules\/.pnpm\/esrecurse@4.3.0\/node_modules\/esrecurse\/esrecurse.js:83:38)\r\n    at Referencer.Program (project\/node_modules\/.pnpm\/eslint-scope@5.1.1\/node_modules\/eslint-scope\/lib\/referencer.js:429:14)\r\n```\r\nThis is triggered [here in eslint-scope](https:\/\/github.com\/eslint\/eslint-scope\/blob\/115ded3cb6f768a37f0dcb17bb16e2299849e16f\/lib\/scope-manager.js#L193)\r\n\r\nThe expectation is that no error is thrown.\r\n\r\n### Environment\r\n\r\n- Babel: 7.23.0\r\n- Node: 20.8.0\r\n- npm: 10.2.0\r\n- OS: Linux\r\n- Monorepo: no\r\n\r\n### Possible solution\r\n\r\nThe problem is that for module expressions `Program` nodes are generated which are already handled in `eslint-scope` .\r\nThe default visitor creates a global scope and expects no other scope to have been created but this then fails for the scope generated for module expressions.\r\nAs such the node must be handled explicitly in the [referencer](https:\/\/github.com\/eslint\/eslint-scope\/blob\/115ded3cb6f768a37f0dcb17bb16e2299849e16f\/lib\/referencer.js#L112).\r\nEither:\r\n- keep using a `Program` node but not adding a global scope for module expressions in the referencer\r\n- use a `ModuleBlock` node according to [ESTree](https:\/\/github.com\/estree\/estree\/blob\/master\/experimental\/module-expressions.md) and add a visitor to the referencer\r\n\r\n\r\n### Additional context\r\n\r\nI saw PR #15240 but this change also keeps creating `Program` nodes.\r\nIf this bug report is approved would you prefer creating a `ModuleScope` or a new kind of scope for module expressions?","comments":["Hey @DMartens! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Is there anything unclear with the bug report?\r\nTo summarize, the parser creates `Program` nodes for the bodies of the `ModuleExpression` which `eslint-scope` only expects once.\r\nI successfully tried locally updating the `Program` visitor for `eslint-scope` by using a flag to check whether there was already a program node and if there was, nest an `ModuleScope` instead. \r\nSo no code changes are required for the parser if this is a concern.","Note that the `eslint-scope` only supports stage-4 proposals. So it will throw on module expressions.\r\n\r\nIn `@babel\/eslint-parser` we patch the `eslint-scope` for the Babel AST: https:\/\/github.com\/babel\/babel\/blob\/main\/eslint\/babel-eslint-parser\/src\/analyze-scope.cjs\r\n\r\nfeel free to do the same for module expressions.\r\n\r\nAs for the AST design, the `@babel\/eslint-parser`'s policy is to follow ESTree after eslint has implemented it, otherwise use Babel AST instead. So the `analyze-scope.cjs` should handle the nested `Program` node. We can create a `ModuleScope` like you said. "],"labels":["i: enhancement","area: eslint"]},{"title":"Big `@babel\/parser` refactor","body":"Opening this issue as a TODO for myself.\r\n\r\n`@babel\/parser` currently uses a deep class hierarchy (9 levels), with each class defining some internal parser methods. Additionally, we have an internal plugin system that further extends this hierarchy to add support for, among others, flow\/typescript\/jsx.\r\n\r\nThe current architecture has sub-optimal performance characteristics, since every internal function access involves a prototype chain lookup.\r\n\r\nI plan to rewrite our parser to use plain function declarations, that either get passed a `state` parameter or that rely on a global `state` variable. Global variables are ok because our parser is synchronous, so there are never two instances of our parser running \"in parallel\".\r\n\r\nWe can either get rid of our internal plugin system (and just use `hasPlugin` checks, like we do for ES proposals), or implement it with something like this:\r\n\r\n<details>\r\n\r\n```js\r\n\/\/ parser\/statement.js\r\nexport function parseFunction(node: t.Function) {\r\n  node.id = maybeEatIdentifier();\r\n  eat(\"(\");\r\n  \/\/ ...\r\n}\r\n\r\nexport function parseFunction_override(\r\n  f: (\r\n    _super: typeof parseFunction,\r\n    ...Parameters<typeof parseFunction>\r\n  ) => ReturnType<typeof parseFunction>\r\n) {\r\n  parseFunction = f.bind(null, parseFunction);\r\n}\r\n\r\nconst originalParseFunction = parseFunction;\r\nexport function resetOverrides() {\r\n  parseFunction = originalParseFunction;\r\n}\r\n```\r\n```js\r\n\/\/ plugins\/typescript.js\r\nimport { parseFunction_override } from \"..\/parser\/statement.js\";\r\n\r\nparseFunction_override((_super, node) => {\r\n  if (matches(\"<\")) node.typeParameters = parseTypeParameters();\r\n  return _super(node);\r\n});\r\n```\r\n\r\nWe could auto-generate the plugin system boilerplate, so that `parser\/statement.js` would instead look like this:\r\n```ts\r\n\/\/ auto-generated file containing the proper type definitions\r\nexport type * from \".\/statement-pluggable.d.ts\";\r\n\r\nexport function parseFunction(node: t.Function) {\r\n  \"pluggable\";\r\n\r\n  node.id = maybeEatIdentifier();\r\n  eat(\"(\");\r\n  \/\/ ...\r\n}\r\n```\r\n\r\n<\/details>\r\n\r\nRegardless of what the internal implementation ends up being, I would like to eventually expose this plugin system externally, maybe only in versions marked as `7.23.0-pluggable` that do not follow semver.","comments":["First experiments (converting `NodeUtils` and all its super classes) show a 10% speedup when running our parser tests.\r\n\r\nHowever, the \"internal plugins\" logic I suggested causes some optimizations deop in V8 (I assume it disables inlining), so we cannot use it for all the overwritten methods. Specifically, using it for ESTree's wrapping of `finishNode` causes a 300% slowdown."],"labels":["i: enhancement","pkg: parser"]},{"title":"Allow plugins to indicate dependencies on random files... discovered during the transform","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nThis is a re-open of #8497, which was supposedly fixed by #14065.\r\n\r\nIn the original issue, it cited something like https:\/\/www.npmjs.com\/package\/babel-plugin-inline-import and other macro-like plugins as motivating use cases. However, as far as I can tell, what was eventually implemented in #14065 did not actually solve it. It's certainly possible that I am missing something though, perhaps @nicolo-ribaudo can chime in.\r\n\r\nConsider a simplified version of `babel-plugin-inline-import`.\r\n\r\nLet's call it `babel-plugin-include` \u2013 the feature added is an `include(\"some-file\")` macro, which reads the referenced file and dumps its content inline as a string, [similar to the Rust version](https:\/\/doc.rust-lang.org\/std\/macro.include.html#examples):\r\n\r\n```js\r\n\/\/ my-app\/src\/censor.js\r\n\r\nconst BANNED_WORDS = include(\".\/banned-words.txt\").split(\"\\n\");\r\n\r\nexport default function censor(text) {\r\n  \/\/ ...do something about the banned words in `text`\r\n  return text;\r\n}\r\n```\r\n\r\nFor this to work, essentially, someone need to keep the metadata that:\r\n\r\n1. When the source of `my-app\/src\/censor.js` changes, it needs to be recompiled (the usual)\r\n2. In addition, when `my-app\/src\/banned-words.txt` changes, it also needs to be recompiled, even if `censor.js` itself did not change\r\n\r\nOn the surface, #14065 appears to be trying to solve this problem, but as I looked deeper, it does not appear to be the case. It solves a very specific version of this problem, like [react-native-dotenv](https:\/\/github.com\/goatandsheep\/react-native-dotenv) (@goatandsheep \ud83d\udc4b\ud83c\udffc thanks for writing the blog post on this feature), where the plugin depends on a fixed set of external dependencies know at plugin-instantiation time, independent of the contents of the code being transformed.\r\n\r\nIn the case of `react-native-dotenv`, @nicolo-ribaudo provided an example on how they could adopt this feature. However, I don't think the same solution would work for `babel-plugin-include` or many of the other ideas mentioned in the original issue \u2013 you would run into multiple problems:\r\n\r\n1. The callbacks for `api.cache.using(...)` have no contextual information (e.g. the filename of the file being transformed)\r\n2. You cannot call `api.addExternalDependency(...)` inside the visitor \u2013 it's too late, the array of external dependency has already been frozen and you'll get a runtime error\r\n\r\nAnd actually, I am not sure that the implemented solution _really_ works for `react-native-dotenv` either. From their README, it seems like they actually depend on more than just the content of the physical `.env` file, like reading values from runtime-set environment variables, or switching between different `.env.*` files depending on a number of factors. It seems like, the only really correct \"logical cache key\" is only really know after transforming a specific file (e.g. a hash of all the consumed variable's values, please if any of the `.env.*` files changed).\r\n\r\nSo, it seems to me there is an impedance mismatch between what we set out wanting to solve and what was actually implemented. Ultimately, I'm not sure how much `@babel\/cli` is \"actually used\", but the bigger goal seems to be to set up some kind of metadata infrastructure\/pattern that other consumers like `babel-loader` can consume. Returning the list of external dependencies from `transform()` seems to accomplish this alright, but it's the part where who you can populate this list that is where the mismatch lies. The common pattern is to \"instantiate\" (it seems like core calls it \"loadPluginDescriptor\") plugins once and reuse them across transforms, and currently the api limits the cache key generation to the \"instantiation\" phase, which seems wrong to me. But then again I could totally be missing something.\n\n### Describe the solution you'd like\n\nThe ability to influence the caching behavior on a \"per-plugin, per-transformed-source-file (or source content)\" basis, rather than just \"per-plugin\".\n\n### Describe alternatives you've considered\n\nUsing some convoluted login inside the callbacks to `api.cache.using(...)` and friends, but ultimately I don't think it has enough information\/context to do anything useful. Plus, not being able to modify the list of external dependencies at transform time is also a dealbreaker for these kind of use cases. \n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @chancancode! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Thanks for the thorough write-up. It will be maintainers' dream world if every issue is like this. \ud83d\ude04\r\n\r\nIn webpack land, an alternative (and working now) solution for the use case mentioned above would be to make `.\/banned-words.txt` into a normal dependency, and load it via the `raw-loader`:\r\n```js\r\n\/\/ my-app\/src\/censor.js\r\n\r\nimport BANNED_WORDS from \".\/banned-words.txt\";\r\n\r\nexport default function censor(text) {\r\n  \/\/ ...do something about the banned words in `text`\r\n  return text;\r\n}\r\n```\r\n\r\n```js\r\n\/\/ webpack.config.js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: \/\\.txt$\/i,\r\n        use: 'raw-loader',\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\nHere Babel has no knowledge about `.\/banned-words.txt` and the bundler will take care of the dependency watching.\r\n\r\nThe `addExternalDependency` was provided for those implicit dependency, hence the term \"external\", mostly tools config which are mostly not imported directly. For tools config, the assumption is that they are known at the compile time.\r\n\r\nI acknowledge that `include` macro is just an example, yet the solution above also reveals that if we do have per-file \"external\" dependencies _and_ it is known at compile time. Then we can also make it a direct normal dependency and leverage the bundlers to do the watching, since even if we somehow registered them into external dependencies, Babel still has to pass through that information to the bundler anyway, as Babel core is not the watcher.\r\n\r\nBy utilizing the standard import syntax, we get extra benefits, e.g. `eslint-plugin-import` can throw an error if the `.\/banned-words.txt` are moved to somewhere but the import usage is not updated accordingly, while the customized `include` macro are less likely to be supported out-of-box.","Yes, I agree that instead of implementing `include()` as a macro, it could have been implemented natively within the bundler and the problems would go away.\r\n\r\nIn fact, I think you could even say that about @goatandsheep's `react-native-dotenv` \u2013 it uses the native import syntax anyway so instead of implementing it as a babel plugin you could have just synthesized the '@env' module the native bundler extension point and let it shake out the unneeded stuff, you loose the inlining but that is probably not that big of a deal in the grand scheme of things.\r\n\r\nThe `include()` example is just meant to be a simple illustrative example of what a big part of what (to me, at least) the original issue seemed to be about. \r\n\r\nI think one reason the babel solution is seems attractive is you can implement it once, and rely on the integration with the bundlers to do the right thing, rather than implement N versions, one for each bundler. At least that seems to be the desire to me \u2013 having the metadata in there, `@babel\/core` itself is fairly agnostic about what they mean, but `babel-loader` etc can plumb that through to the host as it is appropriate.\r\n\r\nI think the core of the problem is that the both the current caching semantics and the available metadata is too coarse \u2013 even in cases where you _are_ able to use `addExternalDependency` as it is implemented today, it is unfortunate that you are forced to invalidate _all_ files ever seen by the plugin \u2013 if you have a large code base with thousands of files and you use `react-native-dotenv`, whenever you change one ENV variable, you invalidate the cache for _all_ the files in your codebase, even if just a handful of them actually use the dotenv feature.","In an ideal world, the plugin would register the external dependency only on the source file that uses the feature, or in `@babel\/core` terminology, \"the relevant `transform()` call. The infrastructure is half there, in that the list of external dependencies are returned per-`transform()` call, and `babel-loader` is wiring that up correctly on its end. The issue\/impedance mismatch comes form the fact that there isn't a good way to actually _add_ that information \"per-`transform()` call\", due to the pattern of how plugins are actually instantiated outside of core."],"labels":["i: enhancement"]},{"title":"Unoptimal TDZ compliation","body":"```js\r\n{\r\n  let x;\r\n  function foo() { x; }\r\n  escape(foo);\r\n}\r\n```\r\n\r\nWe do not need the check here, similarly to how we do not emit it for this code:\r\n```js\r\n{\r\n  let x;\r\n  function foo() { x; }\r\n  foo();\r\n}\r\n```","comments":[],"labels":["i: enhancement","Spec: TDZ"]},{"title":"Improve output when wrapping functions","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #15521, Fixes #15921 <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | \u221a\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nTo be honest, after finishing it I found it to be more complicated than I expected.\r\nThe main reason is that we need to cache the results of `_regeneratorRuntime().mark()` to avoid performance regression.\r\nThe reason the old code cannot be removed is that we still support `bluebird-coroutines`.\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15992\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\n\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/55944\/"],"labels":["PR: Output optimization :microscope:"]},{"title":"[Bug]: Typescript parser crash on `as`-style assertion on generic instantiation expression","body":"### How are you using Babel?\r\n\r\nOther (Next.js, Gatsby, vue-cli, ...)\r\n\r\n### Input code\r\n\r\n```ts\r\n\/\/ produces a parser error, but is valid TS\r\nconst x = jsonParse<SomeType> as (str: string) => KeyType\r\n```\r\n\r\n`jsonParse<SomeType>` is an [instantiation expression](https:\/\/dev.to\/pffigueiredo\/2-new-killer-features-coming-to-typescript-3b5j#after-47), which is followed by a cast. As also shown in the repl, the same code works when the cast is written with angle-bracket syntax.\r\n\r\nSee REPL: https:\/\/babel.dev\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=PTAEAcCcHsBMFcDGBTAzqAhhDlXMqPjJAFCLQB2qALqAB6gC8oAVqpQAo54A8AytAC2yACoBPcMgB8mdAAoakAFyhFASwoBzAJRMZAaWRjxkkiRCgA7tEgBrdADMNyMpRr0moHgurLVvjR09UENjCWk2Tm5kfiFRcKkgA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=typescript&prettier=false&targets=&version=7.22.20&externalPlugins=&assumptions={}\r\n\r\n\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nSee REPL.\r\n\r\n### Current and expected behavior\r\n\r\nThe code in the REPL (i.e. `const x = jsonParse<SomeType> as (str: string) => KeyType`) should parse successfully, as it's valid TS. \r\n\r\n### Environment\r\n\r\n  System:\r\n    OS: macOS 13.5.1\r\n  Binaries:\r\n    Node: 20.0.0 - ~\/.nvm\/versions\/node\/v20.0.0\/bin\/node\r\n    npm: 9.6.4 - ~\/.nvm\/versions\/node\/v20.0.0\/bin\/npm\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @ethanresnick! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Ugh very annoying that this code has two completely different meanings in JavaScript and in TypeScript:\r\n```js\r\nlet x = foo < 2 > as\r\nF.getter;\r\n```","However, given that both Babel and SWC parse it according to the ECMAScript spec even when parsing TypeScript, we might try to get the TS team to change their parsing.\r\n\r\nhttps:\/\/github.com\/microsoft\/TypeScript\/issues\/55806\r\n\r\n**NOTE:** We should still be able to parse the example in the OP, but let's wait for a decision on the TS side.","We've just faced the same issue today at work with the following repro case (we use Vite):\r\n\r\n## Valid on TS side\r\n\r\nhttps:\/\/www.typescriptlang.org\/play?ts=4.8.4#code\/JYWwDg9gTgLgBAJQKYEMDGMA0cDecBiArgHYbATEDCE4FSx8AvnAGZQ1wBEUqGnA3AChBaCgGd4AWQCe1WsXrwAvHAA8AFUwA+ABRh2YMQC446gJRwlW3ILh24PGISjE1AE2AA3LXgBSAZQB5ADkAOgkoYGIAc2AWaT0DMQtGVQB6D28hRiERcXgAI0JgABs3GTlIBQZLNU1dCys4CpoqxQ1rFDECEjIKSroGDv4gA\r\n\r\n## Parsing fails with Babel\r\n\r\nhttps:\/\/babel.dev\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=JYWwDg9gTgLgBAJQKYEMDGMA0cDecBiArgHYbATEDCE4FSx8AvnAGZQ1wBEUqGnA3AChBaCgGd4AWQCe1WsXrwAvHAA8AFUwA-ABRh2YMQC446gJRwlW3ILh24PGISjE1AE2AA3LXgBSAZQB5ADkAOgkoYGIAc2AWaT0DMQtGVQB6D28hRiERcXgAI0JgABs3GTlIBQZLNU1dCys4CpoqxQ1rFDECEjIKSroGDv4gA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=react%2Ctypescript&prettier=false&targets=&version=7.22.20&externalPlugins=&assumptions=%7B%7D\r\n\r\nFor the record, SWC fails to parse it too (https:\/\/play.swc.rs\/?version=1.3.86&code=H4sIAAAAAAAAA22OzQrCMBCE73mKoScLRe82zUXwIKigfYHaHwnYTdlshVLy7rYKKugcZz5mxradY8GpLkpJMGLbUynW0cZNAdUkCGjYtYh4RqJUqdKRF%2ByHD5JB54lZdOw6v0YeIzMYFSZxLT0TdGXvZsTufDwsvbClq22GFx8j6NUcpyq8yy%2B9vVV%2FFp7NX77ODQr%2Fe3ry0wcTfPp32gAAAA%3D%3D&config=H4sIAAAAAAAAA1WPSw7CMAxE9z1F5DUL1AUL7sAhouBWQfkpdiWqqncnf2AXv5nJ2MckBLxIwV0c6ZmGICNhHHMitDuW70SA94Ckog4Ml64yZYnjhoWcVQCWcUXOIaT5Os8tAMZ7woQXaQgbs9rpZf%2BtVN6GiET%2FxmyVbjUjXxun1grWP7citlPyunWDG3xNvWx8DJoePVnuOD9fu6hdFgEAAA%3D%3D)."],"labels":["i: bug","pkg: parser","area: typescript"]},{"title":"Improve output of `for await`","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | `Fixes #1, Fixes #2` <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15943\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\n\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/55411\/","Yes, this PR breaks the test.\r\nAfter fixing it it only saved two variables. \ud83e\udd26\u200d\u2642\ufe0f\r\nBut luckily our testing is now better. :)","We should submit that test to test262, since it didn't catch the bug!","It might have problems if `iterator.return()` throws and the for-await-of body uses `return` \ud83e\udd14 ","> It might have problems if `iterator.return()` throws and the for-await-of body uses `return` \ud83e\udd14\r\n\r\nYes, to follow the spec, you need to know whether the loop body completed with\r\n - a) `throw` => that exception propagates, and exception from `iterator.return()` is ignored\r\n - b) `return` \/ `break outer` \/ `continue outer` => exception from `iterator.return()` propagates\r\n\r\nAnd the only way to tell the difference, is to catch the exception.\r\n"],"labels":["PR: Output optimization :microscope:"]},{"title":"[Bug]: TypeScript type only import namespace aliases are not removed","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@babel\/cli\r\n\r\n### Input code\r\n\r\n```js\r\nimport { X } from \"abc\";\r\n\/\/ assume Y is a type only namespace\r\nimport Z = X.Y.Z;\r\n\r\nfunction a(t: Z.T) {\r\n  console.log(t);\r\n}\r\n```\r\n\r\n\r\n### Configuration file name\r\n\r\nbabel.config.js\r\n\r\n### Configuration\r\n\r\n```js\r\nexport = {\r\n  assumptions: {\r\n  },\r\n  presets: [\r\n    [\"@babel\/preset-env\", {\r\n      \/\/ preserve ES module syntax (imports, exports)\r\n      modules: false,\r\n      targets: {\r\n        firefox: \"91\",\r\n        chrome: \"88\",\r\n        edge: \"88\"\r\n      }\r\n    }],\r\n    [\"@babel\/preset-typescript\", {\r\n      allowNamespaces: true,\r\n      allowDeclareFields: true\r\n    }],\r\n    \"@babel\/preset-react\"\r\n  ],\r\n  plugins: [\r\n    [\"@babel\/plugin-transform-typescript\", {\r\n      allowDeclareFields: true,\r\n    }],\r\n    [\"@babel\/plugin-proposal-decorators\", {\r\n      \"legacy\": true\r\n    }],\r\n    [\"@babel\/plugin-transform-class-properties\", {\"loose\": false}],\r\n    \"@babel\/plugin-proposal-private-property-in-object\",\r\n    \"@babel\/plugin-transform-runtime\",\r\n  ],\r\n}\r\n```\r\n\r\n\r\n### Current and expected behavior\r\n\r\nAs with TypeScript, no code is now generated for type only namespaces.  However, if you import a type only namespace using an import alias, code is generated for this import, which can crash at runtime.  In the example input code, Z is a type only namespace with an interface T inside of if (or any other type).  Since it's only used as a type in the code, the code for the alias should be removed.  Instead, the generated code includes\r\n\r\n```js\r\nvar Z = X.Y.Z;\r\n```\r\nBecause Y doesn't exist (it's type only), X.Y.Z crashes (Y is undefined).\r\n\r\nI would expect no code to be generated for `import Z = X.Y.Z`.\r\n\r\n\r\n### Environment\r\n\r\n```\r\n    \"@babel\/core\": \"7.22.15\",\r\n    \"@babel\/plugin-transform-class-properties\": \"7.22.5\",\r\n    \"@babel\/plugin-proposal-decorators\": \"7.22.15\",\r\n    \"@babel\/plugin-proposal-private-property-in-object\": \"7.21.11\",\r\n    \"@babel\/plugin-transform-runtime\": \"7.22.15\",\r\n    \"@babel\/plugin-transform-typescript\": \"7.22.15\",\r\n    \"@babel\/preset-env\": \"7.22.15\",\r\n    \"@babel\/preset-react\": \"7.22.15\",\r\n    \"@babel\/preset-typescript\": \"7.22.15\",\r\n```\r\nnode 16.16.0\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n[Repl example demonstrating](https:\/\/babel.dev\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=JYWwDg9gTgLgBAbzgDTgXzgMyhEcBEAhgEYDG-A3AFCiSxwBacAvCgHQCabD1VmArgDtSMYBEFxCAChgAuRmwAqASkRU4cUuIDOEADYBTNnogBzGcupoqQA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-2%2Ctypescript&prettier=false&targets=&version=7.22.16&externalPlugins=&assumptions=%7B%7D)","comments":["Hey @youngderekm! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Seems like this issue exists when TS namespace alias(`import alias = Namespace`) is implemented. https:\/\/github.com\/babel\/babel\/pull\/13528\/files#diff-17aa1d2f85bafbf2a6002e7d4587af251ebe0b102da595ce88f294b1f4adecd4R4\r\n\r\nI would like to take a look on this one in the next few days.","Thank you!"],"labels":["area: typescript","i: regression"]},{"title":"[Bug]: unexpected source mappings when transforming AST","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\nhttps:\/\/stackblitz.com\/edit\/stackblitz-starters-ojt5ht?description=Starter%20project%20for%20Node.js,%20a%20JavaScript%20runtime%20built%20on%20Chrome%27s%20V8%20JavaScript%20engine&file=index.js,node_modules%2F%40babel%2Ftypes%2Flib%2Findex.d.ts,node_modules%2F%40types%2Fbabel__traverse%2Findex.d.ts&title=node.new%20Starter\r\n\r\n```ts\r\nconst babel = require('@babel\/core');\r\nconst t = require('@babel\/types');\r\n\r\nconst setSourceMapRange = (node, start, end) => {\r\n  node.loc = {\r\n    start,\r\n    end,\r\n  };\r\n};\r\n\r\nconst transformPlugin = {\r\n  visitor: {\r\n    CallExpression: (\/** @type {import('@babel\/traverse').NodePath} *\/ p) => {\r\n      const node = p.node;\r\n      const i0 = node.arguments[0];\r\n\r\n      const result = t.callExpression(\r\n        t.memberExpression(\r\n          \/\/t.identifier('i0'),\r\n          i0,\r\n          t.identifier('elementStart'),\r\n          false\r\n        ),\r\n        [t.stringLiteral('Works')]\r\n      );\r\n\r\n      setSourceMapRange(\r\n        result,\r\n        { line: 1, column: 0 },\r\n        { line: 1, column: 10 }\r\n      );\r\n\r\n      p.replaceWith(result);\r\n      p.skip();\r\n    },\r\n  },\r\n};\r\n\r\nconst parsed = babel.transformSync(\r\n  `\\\r\nimport i0 from '@angular\/core';\r\nconsole.log(i0);\r\n\/\/# sourceMappingURL=data:application\/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnB1dC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRS9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaTAgZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnNvbGUubG9nKGkwKTsiXX0=`,\r\n  {\r\n    sourceMaps: 'inline',\r\n    inputSourceMap: true,\r\n    ast: true,\r\n    plugins: [transformPlugin],\r\n  }\r\n);\r\n\r\nconsole.error(parsed.code);\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\n**Current**:\r\n\r\nConsider we're generating a call expression of the following form, where `someObj` is the copied `Identifier` node from an existing identifier (with existing source location `.loc`)\r\n\r\n```js\r\nsomeObj.elementStart(bla);\r\n\r\n\/\/ someObj is the AST node copied from an existing `someObj` identifier (replaced maybe)\r\n\/\/ elementStart(bla) is synthetically generated via `t.identifier` etc.\r\n```\r\n\r\nCurrently when such AST is created, the output code is correct- **but** the source maps are acting different as of recent changes with: https:\/\/github.com\/babel\/babel\/commit\/4f4b450f5279947c24eae37b97dc8b5e652fcf51#diff-192a3f85cae6c8a5d19e16b083d4c421b517650b00a0e8ae10cf80cb1ce7d941R590.\r\n\r\nThe location from `someObj` carries over to `.elementStart(bla)`. This happens because as of the change, when `someObj` is printed in `Printer.ts`, the source position is no longer restored to the previous one before we went deeper in the tree.\r\n\r\nThis change in behavior also breaks existing transforms where we'd e.g. set source mapping information to the whole `CallExpression`. Previously this worked, but now, it's basically a noop. See the reproduction.\r\n\r\n```js\r\nsomeObj.elementStart(bla);\r\n\r\n\/\/ someObj should keep its source location from parsing\r\n\/\/ .elementStart(bla) should use the source location from the `CallExpression` `.loc` (as set via repro snippet) \r\n```\r\n\r\n**Expected**:\r\n\r\nThe source mapping should terminate properly and not affect subsequent nodes being printed that aren't children of `someObj` being printed. When using a member expression callee with source mapping information, the rest if the call expression should not follow that mapping\/or still be allowed to have its own mapping information (as per reproduction).\r\n\r\n\r\n\r\n### Environment\r\n\r\n```\r\n  System:\r\n    OS: Linux 5.0 undefined\r\n  Binaries:\r\n    Node: 16.20.0 - \/usr\/local\/bin\/node\r\n    Yarn: 1.22.19 - \/usr\/local\/bin\/yarn\r\n    npm: 9.4.2 - \/usr\/local\/bin\/npm\r\n    pnpm: 8.6.10 - \/usr\/local\/bin\/pnpm\r\n  npmPackages:\r\n    @babel\/core: ^7.22.15 => 7.22.15 \r\n    @babel\/generator: ^7.22.15 => 7.22.15 \r\n    @babel\/traverse: ^7.22.15 => 7.22.15 \r\n    @babel\/types: ^7.22.15 => 7.22.15\r\n```\r\n\r\n### Possible solution\r\n\r\n* Revert behavior\r\n* Accept that this is the intended behavior.\r\n\r\n### Additional context\r\n\r\nhttps:\/\/github.com\/angular\/angular\/issues\/51647\r\n\r\n* Example where the source information from `i0` affects the rest of the call expression: [click here](https:\/\/evanw.github.io\/source-map-visualization\/#Mzk0AGltcG9ydCBpMCBmcm9tICdAYW5ndWxhci9jb3JlJzsKaTAuZWxlbWVudFN0YXJ0KCJXb3JrcyIpOwovLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SnBNQ0lzSW1Wc1pXMWxiblJUZEdGeWRDSmRMQ0p6YjNWeVkyVnpJanBiSW1sdWNIVjBMblJ6ZUNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2FUQWdabkp2YlNBblFHRnVaM1ZzWVhJdlkyOXlaU2M3WEc1Y2JtTnZibk52YkdVdWJHOW5LR2t3S1RzaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFOUJRVTlCTEVWQlFVVXNUVUZCVFN4bFFVRmxPMEZCUld4Q1FTeEZRVUZGTEVOQlFVRkRMRmxCUVVFaWZRPT0yMDIAeyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpMCIsImVsZW1lbnRTdGFydCJdLCJzb3VyY2VzIjpbImlucHV0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaTAgZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnNvbGUubG9nKGkwKTsiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEVBQUUsTUFBTSxlQUFlO0FBRWxCQSxFQUFFLENBQUFDLFlBQUEifQ==)\r\n* Example where we try to set parent source mapping information on the call expression- but `i0` breaks that with the recent changes: [click here](https:\/\/evanw.github.io\/source-map-visualization\/#Mzk4AGltcG9ydCBpMCBmcm9tICdAYW5ndWxhci9jb3JlJzsKaTAuZWxlbWVudFN0YXJ0KCJXb3JrcyIpOwovLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SnBNQ0lzSW1Wc1pXMWxiblJUZEdGeWRDSmRMQ0p6YjNWeVkyVnpJanBiSW1sdWNIVjBMblJ6ZUNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2FUQWdabkp2YlNBblFHRnVaM1ZzWVhJdlkyOXlaU2M3WEc1Y2JtTnZibk52YkdVdWJHOW5LR2t3S1RzaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFOUJRVTlCTEVWQlFVVXNUVUZCVFN4bFFVRmxPMEZCUld4Q1FTeEZRVUZGTEVOQlFVRkRMRmxCUVVFc1VVRkdUQ0o5MjA3AHsidmVyc2lvbiI6MywibmFtZXMiOlsiaTAiLCJlbGVtZW50U3RhcnQiXSwic291cmNlcyI6WyJpbnB1dC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGkwIGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5jb25zb2xlLmxvZyhpMCk7Il0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxFQUFFLE1BQU0sZUFBZTtBQUVsQkEsRUFBRSxDQUFBQyxZQUFBLFFBRkwifQ==)","comments":["Hey @devversion! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Before (7.19.0):\r\n\r\n<img width=\"1466\" alt=\"Screenshot 2023-09-05 at 15 39 22\" src=\"https:\/\/github.com\/babel\/babel\/assets\/7000710\/87cb1376-4994-4e69-8667-30b60d89be58\">\r\n\r\nAfter:\r\n\r\n<img width=\"1466\" alt=\"Screenshot 2023-09-05 at 15 37 28\" src=\"https:\/\/github.com\/babel\/babel\/assets\/7000710\/96d2403b-4892-40f8-8e4a-8e04a33a626b\">\r\n\r\n\r\nNone of these behavior is ideal, but the new one seems better than the old one (the new code is just mapped together with whatever code was before it). What result would you expect?","Btw it looks like you already investigated this a lot. If you have a PR you want to propose to ease the discussion, that would be very welcome :)","thx for looking @nicolo-ribaudo. Yeah, it doesn't look like the mappings are ideal in either case. The first picture looks much more ideal to me though- and matches my \"expectation\" of the mappings more (when looking at it from the generated code -> to the original code)\r\n\r\n* `i0` has its own source location and hence is \"red\"\r\n* `.elementStart(bla)` is the rest of the `CallExpression` (hierarchically above `i0`) with a source location and hence is \"blue\".\r\n\r\nIn the second screenshot, the `.loc` on the `CallExpression` is basically ignored. I believe, this is different to TypeScript which would follow the semantics as in my bullet points.","So, this is the encoding corresponding to the source map generated by the stackblitz demo (using the `([from_position](source_index)=>[to_position])` format):\r\n\r\n```\r\n([0,0](#0)=>[0,0]) | ([0,7](#0)=>[0,7]) | ([0,9](#0)=>[0,9]) | ([0,15](#0)=>[0,15]) | ([0,30](#0)=>[0,30])\r\n([2,12](#0)=>[1,0]) | ([2,14](#0)=>[1,2]) | ([2,14](#0)=>[1,3]) | ([2,14](#0)=>[1,15]) | ([0,9](#0)=>[1,23])\r\n```\r\n\r\nThis is the output, with `|` indicating every 5th character:\r\n```js\r\nimport i0 from \"@angular\/core\";\r\ni0.elementStart(\"Works\");\r\n|    |    |    |    |    |    |\r\n```\r\n\r\nAnd the input:\r\n```js\r\nimport i0 from '@angular\/core';\r\n\r\nconsole.log(i0);\r\n|    |    |    |    |    |    |\r\n```\r\n\r\nSo, we are mapping (output to input, sorry that this is the opposite of how source map works but it's how I think about them \ud83d\ude05):\r\n1. The start-of-`i0` to the start-of-`i0`\r\n2. The end-of-`i0`==start-of-`.` to the end-of-`i0`==start-of-`)`\r\n3. The end-of-`.`==start-of-`elementStart` to the end-of-`i0`==start-of-`)`\r\n4. The end-of-`elementStart`==start-of-`(` to the end-of-`i0`==start-of-`)`\r\n5. The end-of-`\"Works\"`==start-of-`)` to the end-of-`i0`-from-the-import\r\n\r\nWhat your plugin does (applying the intermediate source map, since it's a 1:1 map except for the added newline) is to set the range for `i0.elementStart(\"Works\")` to the range of, I believe `console.log` (or `console.lo`?).\r\n\r\n(3) and (4) seem weird, but what would you expect to be a proper mapping that maps `i0`(out) to `i0`(in) and `i0.elementStart(\"Works\")`(out) to `console.log`(in)? ~~If we the source map has markers before\/after `i0`(out), then the marker mapping the end of `i0`(out) to the end of `i0`(in) would also mark the start of `.`(out) to the start of `(`(in).~~\r\n\r\nWe could map the start of `i0`(out) to the start of `i0`(in), but then what do we map the start of `.`(out) to? The start of `console`(in)?","As another data point, if I edit the plugin to `delete i0.loc` then the second line is not mapped at all. This is definitely a bug, given that we have info from the call expression.\r\n\r\n**EDIT** I had a bug because the stackbliz example has a bug (it should use 2 for the line for the call expression, since lines are 1-indexed). This works properly in the current version."],"labels":["i: bug","area: sourcemaps"]},{"title":"plugin-transform-async-to-generator could create more efficient code","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on this feature?\r\n\r\n### What problem are you trying to solve?\r\n\r\nI'd like to suggest a change to [babel-plugin-transform-async-to-generator](https:\/\/babeljs.io\/docs\/babel-plugin-transform-async-to-generator) which would produce (I believe) faster code for methods which contain `super`.\r\n\r\nInput:\r\n\r\n```js\r\nclass C extends S {\r\n  async foo(x) {\r\n    await super.foo(x);\r\n  }\r\n}\r\n```\r\n\r\nCurrent output with [babel-plugin-transform-async-to-generator](https:\/\/babeljs.io\/docs\/babel-plugin-transform-async-to-generator):\r\n\r\n```js\r\nclass C extends S {\r\n  foo(x) {\r\n    var _superprop_getFoo = () => super.foo,\r\n      _this = this;\r\n    return _asyncToGenerator(function* () {\r\n      yield _superprop_getFoo().call(_this, x);\r\n    })();\r\n  }\r\n}\r\n```\r\n\r\n[REPL](https:\/\/babeljs.io\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=MYGwhgzhAEDC0FMAeAXBA7AJjAytA3gFDTSQCe6w0AZgPa0AUSAlAcSaQO5gCWK0EAK4AHBACcAdHUYsA3OwC-hBUA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=&prettier=false&targets=&version=7.22.14&externalPlugins=%40babel%2Fplugin-transform-async-to-generator%407.20.7&assumptions=%7B%7D)\r\n\r\n`_asyncToGenerator()` is called every time `foo()` is called.\r\n\r\n### Describe the solution you'd like\r\n\r\nThis could instead be transformed to:\r\n\r\n```js\r\nvar _foo = _asyncToGenerator(function*(_this, _superprop_getFoo, x) {\r\n  yield _superprop_getFoo().call(_this, x);\r\n});\r\nclass C extends S {\r\n  foo(x) {\r\n    return _foo(this, () => super.foo, x);\r\n  }\r\n}\r\n```\r\n\r\nI *think* this is functionally equivalent, but `_asyncToGenerator()` is only called once when the class is created, rather than on every call to `foo()`.``\r\n\r\n### Describe alternatives you've considered\r\n\r\n`_asyncToGenerator` could be memoized. But I think suggested change above is simpler, and more efficient.\r\n\r\n### Documentation, Adoption, Migration Strategy\r\n\r\n_No response_","comments":["Hey @overlookmotel! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","NB: A reference to the class name inside the class is a different binding from externally. So in this case:\r\n\r\n```js\r\nclass C extends S {\r\n  async foo() {\r\n    await super.foo();\r\n    return C;\r\n  }\r\n}\r\nconst C2 = C;\r\nC = 123;\r\n```\r\n\r\n`C` would need to be passed into the generator function so it gets the right `C`:\r\n\r\n```js\r\nvar _foo = _asyncToGenerator(function*(_this, _superprop_getFoo, C) {\r\n  yield _superprop_getFoo().call(_this);\r\n  return C;\r\n});\r\nclass C extends S {\r\n  foo() {\r\n    return _foo(this, () => super.foo, C);\r\n  }\r\n}\r\nconst C2 = C;\r\nC = 123;\r\n```","<del>In this case, `arguments` are changed.<\/del>\r\nIt does not matter.\r\nInspired by you, maybe we can do this?\r\n```js\r\nvar c_foo;\r\nclass C extends S {\r\n  foo(x) {\r\n    return (c_foo = c_foo || _asyncToGenerator(function* (_this, _superprop_getFoo) {\r\n      yield _superprop_getFoo().call(_this, x);\r\n    }))(this, () => super.foo);\r\n  }\r\n}\r\n```","I investigated `asyncToGenerator` and found that this may have a small impact on performance.\r\nHowever I found that `asyncToGenerator` can significantly reduce the size. :)","@liuxingbaoyu Ah that's really nice! Yes, your version is better than what I came up with.\r\n\r\nI guess `c_foo ||= _asyncToGenerator()` would be even shorter if the target supports that syntax."],"labels":["i: enhancement"]},{"title":"Handling of filenames in Babel","body":"In https:\/\/github.com\/babel\/babel\/pull\/15911 I realized that our handling of filenames is incredibly inconsistent (not just about option names, but about what we mean by \"filename\"), and it leads to bugs or weirdnesses.\r\n\r\n## Filename options values\r\n\r\nI haven't audited exactly what we do in various places yet, but I propose the following:\r\n- we should never work with \"bare\" filenames, but always with either paths or URLs. A filename by itself is useless, because there can be multiple files with the same name in different folders.\r\n- we should never pass around absolute file paths or URLs, but instead they should be all relative to the project [root](https:\/\/babeljs.io\/docs\/options#root). This ensures portability and consistent behaviors across different machines, or different folders of the same machine.\r\n\r\n## Filename options names\r\n\r\nCurrently `@babel\/core` and `@babel\/generator` accept a `sourceFileName` option, and `@babel\/parser` accepts a `sourceFilename` option. However, `@babel\/core` passes `sourceFileName` to `@babel\/parser` and fixing it is not backwards compatible (https:\/\/github.com\/babel\/babel\/pull\/13732).\r\n\r\nWe should obviously use the same option name everywhere. Additionally, we might consider renaming them to `sourceFilePath` to make it clear that it's not just the bare name (I prefer `sourceFilename` or `sourceFileName`).\r\n\r\n## Paths in source maps\r\n\r\nWhen generating source maps, by default `sourceRoot` should be empty and `sources` should contains filepaths relative to the repository root. There should be two options to control the `sourceRoot` property in source maps: one describing the source root of the _input_ files, and one of the _output_ files:\r\n```js\r\nconst projectRoot = ...;\r\nconst absoluteFilepath = ...;\r\n\r\nconst inputSourceRoot = path.resolve(projectRoot, options.inputSourceRoot);\r\nconst relativeSource = path.relative(inputSourceRoot, absoluteFilepath);\r\nconst outputSourceRoot = path.resolve(projectRoot, options.outputSourceRoot);\r\nconst relativeSourceRoot = path.relative(outputSourceRoot, inputSourceRoot);\r\n\r\nconst sourceMap = {\r\n  ...,\r\n  sources: [relativeSource],\r\n  sourceRoot: relativeSourceRoot,\r\n};\r\n```\r\n\r\nAdditionally, source maps should use URLs and not file paths (see https:\/\/tc39.es\/source-map-spec\/#sources). An example of this being used in the real world is https:\/\/twitter.com, which loads source maps from a different domain than where the compiled source code lives.\r\n\r\n## Paths in AST locations\r\n\r\nIn AST locations, we have a `filename` property. Should that filename be relative to `inputSourceRoot`, or to `root`? There are two main usages for that property:\r\n- to throw errors with the correct location\r\n- to generate source maps\r\n\r\nBeing relative to `root` helps with the first case, since `root` tends to be the CWD and thus filepaths in errors in many terminal would be clickable. Being relative to `inputSourceRoot` would probably simplify the logic in `@babel\/generator` for source maps.\r\n\r\nI think we should use `root` as the base here, since the generator will already have to do some path resolution anyway.","comments":[],"labels":["i: discussion"]},{"title":"Fix passing filename from `@babel\/core` to `@babel\/parser`","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | `Fixes #1, Fixes #2` <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\nThis is blocking #9509. All the source map tests are now broken, and I have to figure out what is the correct behavior.\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15911\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\n\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/55322\/","Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/55316\/"],"labels":["PR: Bug Fix :bug:","pkg: core"]},{"title":"[Bug]: \/\\p{Extended_Pictographic}\/u throws error on chrome 65","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nvite\r\n\r\n### Input code\r\n\r\nhttps:\/\/babeljs.io\/repl#?browsers=chrome%3E%3D65&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=PQHQDg3gogHgLgUwHYBMEoPoAUCWBjOAewHMAnAQzAAt8BfYAVwCgg&debug=false&forceAllTransforms=false&modules=commonjs&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env&prettier=false&targets=&version=7.22.10&externalPlugins=&assumptions=%7B%7D\r\n\r\n\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\ncurrent output:\r\n\r\n```js\r\n\"use strict\";\r\n\r\n\/\\p{Extended_Pictographic}\/u;\r\n```\r\n\r\nexpected output:\r\n\r\n```js\r\n\"use strict\";\r\n\r\n\/[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u2388\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2605\\u2607-\\u2612\\u2614-\\u2685\\u2690-\\u2705\\u2708-\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763-\\u2767\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299\\u{1F000}-\\u{1F0FF}\\u{1F10D}-\\u{1F10F}\\u{1F12F}\\u{1F16C}-\\u{1F171}\\u{1F17E}\\u{1F17F}\\u{1F18E}\\u{1F191}-\\u{1F19A}\\u{1F1AD}-\\u{1F1E5}\\u{1F201}-\\u{1F20F}\\u{1F21A}\\u{1F22F}\\u{1F232}-\\u{1F23A}\\u{1F23C}-\\u{1F23F}\\u{1F249}-\\u{1F3FA}\\u{1F400}-\\u{1F53D}\\u{1F546}-\\u{1F64F}\\u{1F680}-\\u{1F6FF}\\u{1F774}-\\u{1F77F}\\u{1F7D5}-\\u{1F7FF}\\u{1F80C}-\\u{1F80F}\\u{1F848}-\\u{1F84F}\\u{1F85A}-\\u{1F85F}\\u{1F888}-\\u{1F88F}\\u{1F8AE}-\\u{1F8FF}\\u{1F90C}-\\u{1F93A}\\u{1F93C}-\\u{1F945}\\u{1F947}-\\u{1FAFF}\\u{1FC00}-\\u{1FFFD}]\/u;\r\n```\r\n\r\n### Environment\r\n\r\n\r\n  System:\r\n    OS: macOS 13.4.1\r\n  Binaries:\r\n    Node: 16.20.0 - \/usr\/local\/bin\/node\r\n    Yarn: 1.22.19 - \/usr\/local\/bin\/yarn\r\n    npm: 8.19.4 - \/usr\/local\/bin\/npm\r\n    pnpm: 8.6.12 - ~\/Library\/pnpm\/pnpm\r\n  npmPackages:\r\n    @babel\/core: ^7.22.1 => 7.22.1 \r\n    @babel\/eslint-parser: ^7.21.8 => 7.21.8 \r\n    @babel\/plugin-proposal-decorators: ^7.22.3 => 7.22.3 \r\n    @babel\/plugin-transform-react-jsx: ^7.22.3 => 7.22.3 \r\n    @babel\/preset-env: ^7.22.2 => 7.22.2 \r\n    @babel\/runtime: ^7.22.3 => 7.22.3 \r\n    babel-plugin-jsx-control-statements: ^4.1.2 => 4.1.2 \r\n    babel-plugin-transform-react-remove-prop-types: ~0.4.24 => 0.4.24 \r\n    eslint: ^8.41.0 => 8.41.0 \r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n\r\n<img width=\"446\" alt=\"1\" src=\"https:\/\/github.com\/babel\/babel\/assets\/2224764\/18143120-0a44-4367-8a06-1c04465cad04\">\r\n","comments":["Hey @dgeibi! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","related issue: https:\/\/github.com\/colinhacks\/zod\/issues\/2433","The `Extended_Pictographic` binary property was introduced at Unicode 11 released in June 2018, which is later than Chrome 65 released in March 2018. So Chrome 65 will not recognize this property, thus throwing the error even if Chrome 65 supports other properties defined in Unicode 10 such as `\\p{ASCII}`.\r\n\r\nTo fix this issue we will need compat data on ( browser versions \u2715 Unicode versions ), so we can conditionally compile unicode property escapes if users are using a property that is not supported on their targets. If not doing so we will have to constantly bump the support data of property escapes whenever a newer Unicode version is released. However AFAIK no one has collected \/ maintained such data.","Maybe @mathiasbynens you know if there is such data somewhere?","I don\u2019t know of this data being available anywhere in an easy-to-use form. The commit history of https:\/\/github.com\/mathiasbynens\/caniunicode might shed some light on similar cases."],"labels":["i: needs triage"]},{"title":"perf: Improve `@babel\/types` builders","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | `Fixes #1, Fixes #2` <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nSome discussion is needed.\r\nBecause it's a breaking change.\r\nRef: https:\/\/github.com\/babel\/babel\/issues\/13868\r\n\r\nThis PR makes `fields` and `builderKeys` only lookup once on initialization.\r\n```\r\nPS F:\\babel\\benchmark\\babel-types\\builders> node .\\memberExpression.mjs\r\nbaseline memberExpression builder: 804_478 ops\/sec \u00b10.52% (0.001ms)\r\ncurrent memberExpression builder: 7_391_582 ops\/sec \u00b10.26% (0ms)\r\nPS F:\\babel\\benchmark\\babel-types\\builders> node .\\stringLiteral.mjs\r\nbaseline stringLiteral builder: 32_462_576 ops\/sec \u00b10.42% (0ms)\r\ncurrent stringLiteral builder: 81_001_155 ops\/sec \u00b10.6% (0ms)\r\n```\r\n\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15843\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/55175\/","Yes, performance gets better when we inline, but I'm not sure if that's the way to go since the size would increase a lot.\r\nMaybe we can dynamically generate fast versions of them when `new Function()\/eval` is available?\r\nBut I'm not sure if doing so under ESM would be difficult.\r\n\r\ncurrent\r\n```\r\nPS F:\\babel\\benchmark\\babel-types\\builders> node .\\memberExpression.mjs\r\nbaseline memberExpression builder: 788_321 ops\/sec \u00b10.65% (0.001ms)\r\ncurrent memberExpression builder: 7_414_300 ops\/sec \u00b10.47% (0ms)\r\n```\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/30521560\/4810f71f-ee8c-4b9c-ad69-0d5e7cf14475)\r\n```\r\nPS F:\\babel\\benchmark\\babel-types\\builders> node .\\memberExpression.mjs\r\nbaseline memberExpression builder: 807_823 ops\/sec \u00b10.46% (0.001ms)\r\ncurrent memberExpression builder: 12_744_969 ops\/sec \u00b10.31% (0ms)\r\n```\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/30521560\/b0f946b2-7dc2-4e5e-9d54-0a04c4c5d6d6)\r\n```\r\nPS F:\\babel\\benchmark\\babel-types\\builders> node .\\memberExpression.mjs\r\nbaseline memberExpression builder: 813_116 ops\/sec \u00b10.43% (0.001ms)\r\ncurrent memberExpression builder: 10_822_404 ops\/sec \u00b10.35% (0ms)\r\n```"],"labels":["pkg: types","PR: Performance (next major) :running_woman:"]},{"title":"Add support of Babel 8 AST changes for Babel 7 with flag `BABEL_TYPES_8_BREAKING`","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nWould be great to have all **AST** changes enabled for **Babel 7** with env variable **BABEL_TYPES_8_BREAKING**.\n\n### Describe the solution you'd like\n\n-\n\n### Describe alternatives you've considered\n\n-\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @coderaiser! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Unfortunately it seems to me that this might be more difficult than releasing CJS and ESM at the same time."],"labels":["i: enhancement","i: needs triage"]},{"title":"Support of CommonJS for @babel\/generator, @babel\/traverse and other v8 packages","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on this feature?\r\n\r\n### What problem are you trying to solve?\r\n\r\nWould be great if `@babel\/generator` v8 can be not only imported but has also `commonjs` support, it will make transition smoother and easier.\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/1573141\/ac428ce8-043d-49bb-b4c7-b903a43eddc4)\r\n\r\n\r\n### Describe the solution you'd like\r\n\r\nExport `commonjs` versions of files in a similar to way used in `@babel\/parser` v8\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/1573141\/dad7139d-c982-4bc0-a698-a06266982c2c)\r\n\r\n\r\n### Describe alternatives you've considered\r\n\r\nSince **ESLint** (and lots of other packages) doesn't supports **ESM** and even [`async rules`](https:\/\/github.com\/eslint\/eslint\/issues\/15394), would be great to have both ways to `import` `@babel\/generator`, `@babel\/traverse` and other packages as **ESM** and as **CommonJS**.\r\n\r\n### Documentation, Adoption, Migration Strategy\r\n\r\n_No response_","comments":["Hey @coderaiser! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","https:\/\/github.com\/prettier\/prettier-vscode\/pull\/3016\r\nhttps:\/\/github.com\/microsoft\/vscode\/issues\/130367\r\n\r\nI agree with that. In fact even vscode still doesn't support direct use of ESM, prettier was deeply troubled by it before.\r\n","In Babel 7 we had the problem that some of our dependencies were migrating to ESM and thus we were stuck on older versions (or we had to swap them), I don't want to have the same problem in Babel 8.\r\n\r\nBabel is popular enough that we are in a position to push the ecosystem to better support ESM. If vscode didn't support, for example, classes, nobody would even think of opening an issue \"please do not use classes because they don't work in vscode\": they would instead bug vscode to support that ES6 feature, released 8 years ago.\r\n\r\nFor ESLint, you can use `@babel\/eslint-parser` which is CommonJS.","Also note that the reason we had a CJS version for Babel parser was prettier, but now that prettier uses ESM we probably do not need it anymore.","The reason I'm asking is [`eslint-plugin-putout`](https:\/\/github.com\/coderaiser\/putout\/tree\/master\/packages\/eslint-plugin-putout) which gives ability to run Babel-based \ud83d\udc0a[**Putout**](https:\/\/github.com\/coderaiser\/putout) code transformer, which should also migrate to **ESM** and most likely it will work slower as sync **CommonJS** **ESLint** plugin that somehow loads **ESM**.\r\n\r\nAnyways,\r\n\r\n> Babel is popular enough that we are in a position to push the ecosystem to better support ESM.\r\n\r\nthat's true, so if you decide to move **ESM**-only, I'll try to figure out something to get things working...","Also, note that ESLint is planning a rewrite that would allow it to support asynchronous parsers\/plugins: https:\/\/github.com\/eslint\/eslint\/discussions\/16557","> Also, note that ESLint is planning a rewrite that would allow it to support asynchronous parsers\/plugins: https:\/\/github.com\/eslint\/eslint\/discussions\/16557\r\n\r\nYes, but it takes some time for complete rewrite (maybe year or two \ud83e\udd37\u200d\u2642\ufe0f), best possible solution would be use both **ESM** + **CommonJS** for `v8`, and use only **ESM** for `v9` for migration period. I just migrated [`@putout\/printer`](https:\/\/github.com\/putoutjs\/printer) to support all changes from [migration guide](https:\/\/next.babeljs.io\/docs\/v8-migration-api\/#babeltypes), but **ESLint** is blocker for me to upgrade, since in other case I should write from scratch plugins for all IDE's.\r\n\r\nWould be great if Babel Team provide some kind of solution or workaround, I see that there is [deasync](https:\/\/www.npmjs.com\/package\/deasync), and even way to use it, which is completely fine, since it has pre-built binaries:\r\n\r\n```js\r\nconst deasync = require('deasync');\r\nconst tryToCatch = require('try-to-catch');\r\n\r\nmodule.exports = (promise, ...args) => {\r\n    let result;\r\n\r\n    tryToCatch(promise, ...args).then((a) => {\r\n        result = a;\r\n    });\r\n\r\n    while (!result) {\r\n        deasync.sleep(1);\r\n    }\r\n\r\n    return result;\r\n};\r\n```\r\n\r\nBut it hang when I use it in tests. Maybe you can suggest me some way to run `async` code in a `sync` way?","> In Babel 7 we had the problem that some of our dependencies were migrating to ESM and thus we were stuck on older versions (or we had to swap them), I don't want to have the same problem in Babel 8.\r\n\r\nI agree with that. But I fear there may be worse obstacles downstream. (e.g. Jest was blocked by Node ESM's memory leaks and segfaults for several years)\r\n\r\n> Would be great if Babel Team provide some kind of solution or workaround, I see that there is [deasync](https:\/\/www.npmjs.com\/package\/deasync), and even way to use it, which is completely fine, since it has pre-built binaries:\r\n\r\nAs much as I like `dasync`, it is currently unreliable. The Node team once had a similar PR, but it was rejected.\r\n\r\n> Maybe you can suggest me some way to run async code in a sync way?\r\n\r\nhttps:\/\/github.com\/un-ts\/synckit\r\n\r\nYou can try this. While it may not be very convenient, it is relatively reliable.","> https:\/\/github.com\/un-ts\/synckit\r\n\r\nAs I understand i doesn't support passing functions, since it is worker thread...\r\n\r\nOK, here is one of possible solutions: pre-built all **CommonJS** in separate package [@putout\/babel](https:\/\/github.com\/putoutjs\/babel\/), it will simplify supporting of Babel codebase, and makes ability to use Babel 8 inside **ESLint** and other places which cannot migrate to **ESM** now.","Unfortunately this way not really works with `@babel\/core` which is more then `6mb` bundled, so looks like I'm stuck with Babel v7. For how long it will be supported? Will new features arrive to `v7`? Can this AST changes came to `v7` with some env flag, so `v7` was **CommonJS** and `v8` **ESM**.","Just made [an upgrade](https:\/\/github.com\/coderaiser\/putout\/releases\/tag\/v31.0.0) to **Babel v8**, also for [editor](https:\/\/putout.cloudcmd.io\/) and [mobile editor](https:\/\/putout.vercel.app\/) \ud83c\udf89.\r\n\r\nIt works like a charm \ud83e\udd73 !","Awesome, I'm happy you found a solution :)"],"labels":["i: discussion"]},{"title":"[Bug]: property access on negative number isn't preserved as negative number in the output","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n```js\r\nconst result = require(\"@babel\/core\").transformSync(\r\n  `\r\n  export default 'hello';\r\n`,\r\n  {\r\n    plugins: [\r\n      function (babel) {\r\n        const { types: t } = babel;\r\n\r\n        return {\r\n          visitor: {\r\n            StringLiteral(path) {\r\n              path.replaceWith(\r\n                t.unaryExpression(\r\n                  \"typeof\",\r\n                  t.callExpression(\r\n                    t.memberExpression(\r\n                      t.numericLiteral(-1),\r\n                      t.identifier(\"toString\")\r\n                    ),\r\n                    []\r\n                  )\r\n                )\r\n              );\r\n            },\r\n          },\r\n        };\r\n      },\r\n    ],\r\n  }\r\n);\r\n\r\nconsole.log(result.code);\r\n\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nnone\r\n\r\n### Current and expected behavior\r\n\r\ncurrent\r\n```js\r\nexport default typeof -1 .toString(); \/\/ evaluated as 'number'\r\n```\r\n\r\nexpected\r\n```js\r\nexport default typeof (-1).toString(); \/\/ evaluated as 'string'\r\n```\r\n\r\n### Environment\r\n\r\n  System:\r\n    OS: macOS 12.3\r\n  Binaries:\r\n    Node: 20.2.0 - ~\/Library\/Caches\/fnm_multishells\/2251_1687933194251\/bin\/node\r\n    Yarn: 1.22.17 - \/usr\/local\/bin\/yarn\r\n    npm: 9.6.6 - ~\/Library\/Caches\/fnm_multishells\/2251_1687933194251\/bin\/npm\r\n    pnpm: 7.27.1 - ~\/Library\/pnpm\/pnpm\r\n  npmPackages:\r\n    @babel\/core: ^7.22.9 => 7.22.9 \r\n\r\n### Possible solution\r\n\r\nwrap negative numbers in member expressions with parentheses\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["`-1` is a `t.unaryExpression(\"-\", t.numericLiteral(1))`, not a `t.numericLiteral(-1)`. JavaScript does not have literals for negative numbers.\r\n\r\nhttps:\/\/astexplorer.net\/#\/gist\/6861e112ab5faa5d7b0f4078b627c29a\/ac7ca72bc22445946003404a371fbb51b1a6d5e6\r\n\r\nWe should add some validation to the `numericLiteral` function.","Should we also apply the non-negative restriction to `t.bigIntLiteral` and `t.decimalLiteral`? Though the `value` accepts `string` only, but we can always check if it starts with `-`.","Maybe we could also start requiring the number to be a bigint rather than a string (in babel 8), given that it's now supported everywhere."],"labels":["i: needs triage"]},{"title":"[Bug]: When a variable shadows an imported type, references are not computed","body":"### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n[Interactive example here](https:\/\/astexplorer.net\/#\/gist\/25a9a7a9100e9756314bbe3a012b5d51\/62868ad2b1ccdb32696cae9cbd1ea6ce6de6dd5f)\r\n\r\n#### Transformer\r\n\r\n```js\r\nexport default function (babel) {\r\n  const { types: t } = babel;\r\n\r\n  return {\r\n    visitor: {\r\n      ImportDeclaration: (path) => {\r\n        for (const specifier of path.node.specifiers) {\r\n          const name = specifier.local.name;\r\n          const binding = path.scope.getBinding(name);\r\n\r\n          console.log(binding.references);\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n```\r\n\r\n#### Input file\r\n\r\n```js\r\nimport { ConfigAPI } from '@babel\/core';\r\n\r\n{\r\n  const ConfigAPI: ConfigAPI = null;\r\n  ConfigAPI;\r\n}\r\n```\r\n\r\n### Current and expected behavior\r\n\r\nA binding returned for a name does not compute as a reference when the name is used as a type reference, and there's a shadow for the name. For example, take as input the following code:\r\n\r\n```js\r\nimport { ConfigAPI } from '@babel\/core';\r\n{\r\n  const ConfigAPI: ConfigAPI = null;\r\n  ConfigAPI;\r\n}\r\n```\r\n\r\nWhen running `const binding = path.scope.getBinding('ConfigAPI')` on the top-most scope, the binding is correctly returned. However, `binding.references` evaluates to `0`.\r\nIf you rename the variable `ConfigAPI` to something else, `binding.references` will correctly compute `1` and count the type reference as a proper reference.\r\n\r\nBabel thinks that `: ConfigAPI` references the new variable being introduced. For the type checker, though, the type reference will correctly point out to the correct symbol.\r\n\r\n### Environment\r\n\r\n- Babel version: 7.19.0 (but reproducible in multiple other environments)","comments":["Hey @haskellcamargo! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Hey, can I work with this issue?\r\n"],"labels":["i: needs triage"]},{"title":"[Bug]: Path contains invalid characters. @babel\/core and C8","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nbabel-loader (webpack)\n\n### Input code\n\nhttps:\/\/github.com\/evertondanilo\/cucumber-react-issue\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nWhen I run `npm run cucumber:coverage` I expect to run cucumber tests and get a report generated.\r\nHowever in the latest version of `@babel\/core@7.22.9` or any version after `@babel\/core@7.21.0`, I get an error about invalid file path.\r\nThe test coverage is generate by the `C8` dependency.\r\n\r\nI've attached a repo here on how to reproduce the issue:\r\n```\r\nnpm ci\r\nnpm run cucumber:coverage\r\n```\r\n```\r\nError: Path contains invalid characters: C:\\code\\repo\\FR.Web.front\\frontApp\\coverage_cucumber\\lcov-report\\frontApp\\Features\\StepDefinitions\\C:\\code\\repo\\FR.Web.front\\frontApp\\Features\\StepDefinitions\r\n    at checkPath (C:\\code\\repo\\FR.Web.front\\frontApp\\node_modules\\c8\\node_modules\\make-dir\\index.js:16:18)\r\n    at AsyncFunction.module.exports.sync (C:\\code\\repo\\FR.Web.front\\frontApp\\node_modules\\c8\\node_modules\\make-dir\\index.js:108:2)\r\n    at FileWriter.writeFile (C:\\code\\repo\\FR.Web.front\\frontApp\\node_modules\\c8\\node_modules\\istanbul-lib-report\\lib\\file-writer.js:184:16)\r\n    at HtmlReport.onSummary (C:\\code\\repo\\FR.Web.front\\frontApp\\node_modules\\c8\\node_modules\\istanbul-reports\\lib\\html\\index.js:364:44)\r\n    at LcovReport.<computed> [as onSummary] (C:\\code\\repo\\FR.Web.front\\frontApp\\node_modules\\c8\\node_modules\\istanbul-reports\\lib\\lcov\\index.js:28:23)\r\n    at Visitor.value (C:\\code\\repo\\FR.Web.front\\frontApp\\node_modules\\c8\\node_modules\\istanbul-lib-report\\lib\\tree.js:38:38)\r\n    at ReportNode.visit (C:\\code\\repo\\FR.Web.front\\frontApp\\node_modules\\c8\\node_modules\\istanbul-lib-report\\lib\\tree.js:86:21)\r\n    at C:\\code\\repo\\FR.Web.front\\frontApp\\node_modules\\c8\\node_modules\\istanbul-lib-report\\lib\\tree.js:92:19\r\n    at Array.forEach (<anonymous>)\r\n    at ReportNode.visit (C:\\code\\repo\\FR.Web.front\\frontApp\\node_modules\\c8\\node_modules\\istanbul-lib-report\\lib\\tree.js:91:28)\r\n```\r\n\r\n### Version that breaks C8:\r\n`npm i @babel\/core@7.21.0 --save-dev` ,(and any version after that)\r\n\r\n### Working version with C8:\r\n`npm i @babel\/core@7.20.12 --save-dev`\n\n### Environment\n\n- Babel version(s): @babel\/core@7.21.0 ,(and any version after that)\r\n- Node: 16.15.1\r\n- npm version: 8.11.0\r\n- OS: 64-bit (Windows)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @evertondanilo! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","I can't reproduce this issue on macOS, assuming this is a Windows-only issue. \/cc @liuxingbaoyu if you can take a look.","I can't reproduce in Linux as well. @JLHwung I believe your theory is correct."],"labels":["i: bug","area: sourcemaps","i: regression","pkg: core"]},{"title":"[Bug]: visitors.merge removes noScope","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n```js\r\nconst parse = require('@babel\/parser').parse;\r\nconst traverse = require('@babel\/traverse').default;\r\nconst generate = require('@babel\/generator').default;\r\nconst visitors = require('@babel\/traverse\/lib\/visitors');\r\n\r\nconst ast = parse('const a = 1; { const b = 2 };');\r\n\r\nconst visitor = visitors.merge([\r\n  {\r\n    Program(path) {\r\n      console.log(!!path.scope);\r\n    },\r\n    noScope: true,\r\n  },\r\n  {\r\n    BlockStatement(path) {\r\n      console.log(!!path.scope);\r\n    },\r\n    noScope: true,\r\n  },\r\n]);\r\n\r\ntraverse(ast, visitor); \/\/ should log false\r\n\r\ntraverse(ast, {}); \/\/ some visitor that initializes scope\r\n\r\ntraverse(ast, visitor); \/\/ should log true\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nCurrent behaviour (since #15702): `noScope` of merged visitors gets removed and causes the scope to be crawled anyways and overwrites the old scope.\r\nExpected behaviour (v7.22.6): keep noScope in the merged visitor\r\n\r\nI have to use multiple traversals, most use `noScope: true` to achieve better performance while still accessing the scope\/references of a previous traversal.\r\nAnother reason is that the AST is sometimes temporarily in a broken state or I manually update references, and don't want the scope to be overwritten.\r\n\r\n### Environment\r\n\r\n  System:\r\n    OS: Linux 5.15 Manjaro Linux\r\n  Binaries:\r\n    Node: 18.12.0 - ~\/.nvm\/versions\/node\/v18.12.0\/bin\/node\r\n    Yarn: 1.22.19 - \/usr\/bin\/yarn\r\n    npm: 8.19.2 - ~\/.nvm\/versions\/node\/v18.12.0\/bin\/npm\r\n  npmPackages:\r\n    @babel\/generator: ^7.22.7 => 7.22.7 \r\n    @babel\/helper-validator-identifier: ^7.22.5 => 7.22.5 \r\n    @babel\/parser: ^7.22.7 => 7.22.7 \r\n    @babel\/template: ^7.22.5 => 7.22.5 \r\n    @babel\/traverse: ^7.22.8 => 7.22.8 \r\n    @babel\/types: ^7.22.5 => 7.22.5 \r\n    eslint: ^8.44.0 => 8.44.0 \r\n\r\n### Possible solution\r\n\r\nSet noScope of the merged visitor if all visitors have it.\r\nOr v7.22.6 behaviour: if at least one has it?\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @j4k0xb! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","The `noScope`, alongside with some other options:\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/30ff3acde21371850a8fd52f885a88e0a5567516\/packages\/babel-traverse\/src\/index.ts#L23-L28\r\n\r\nare ignored in `shouldIgnoreKey`. We should merge such options in\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/30ff3acde21371850a8fd52f885a88e0a5567516\/packages\/babel-traverse\/src\/visitors.ts#L52\r\n\r\n@j4k0xb I have assigned this issue to you since you voiced your intent to work on this issue. Feel free to ask any questions if there are bumps when working on a fix."],"labels":["pkg: traverse","i: regression"]},{"title":"Plugin babel-plugin-module-resolver is no longer updated.","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nThe plugin is mentioned to solve aliasing in typescript, however the author archived the repository on Jun 8, 2023\n\n### Describe the solution you'd like\n\nThis configuration can come directly from babel, which would use the tsconfig.json file using the existing configurations to apply both the alias and other configurations\n\n### Describe alternatives you've considered\n\nI looked for other plugins to use as a solution, but none at a level of excellence to use in production.\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @trevisanweb! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Any update on this? Is there better alternative or is everyone still using [babel-plugin-module-resolver](https:\/\/github.com\/tleunen\/babel-plugin-module-resolver)?","babel-plugin-module-resolver doesn't work when babel.config.cjs is using .cjs, so I might not use it anymore."],"labels":["i: enhancement"]},{"title":"Refactor Binding properties and cache Binding instances","body":"| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A\r\n| ------------------------ | ---\r\n| Fixed Issues?            | \r\n| Patch: Bug Fix?          | Yes(?)\r\n| Major: Breaking Change?  | Yes\r\n| Minor: New Feature?      | Yes\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    |\r\n| Any Dependency Changes?  | No\r\n| License                  | MIT\r\n\r\nAllows object references to Bindings to be somewhat maintained and properly updated (references and all) across `Scope.crawl()`s.\r\nBindings are cached similar to the path cache; by first the declaring node containing the binding identifiers, then a secondary key being the identifier node itself.\r\n\r\nBreaking change marked only because of changes to `dereference()` to `dereference(path: NodePath)`, but I can't actually seem to find any published plugins that uses it. This is needed to make sense with how the `references` property is fetched. There were more breaking changes such as changing `referencePaths` and `constantViolations` to `Set<NodePath>` (alongside changing mappings like `bindings`. `references`, etc. under the Scope class to actual `Map`s) but it would have touched too many plugins currently in-tree.\r\n \r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15698\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/54662\/"],"labels":["PR: Internal :house:"]},{"title":"[Bug]: Improve error message for plugins not found in node_modules","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nhttps:\/\/github.com\/babel\/babel\/issues\/15679, https:\/\/github.com\/babel\/babel\/issues\/15655\n\n### Describe the solution you'd like\n\n- Point out exactly which file is declaring the missing plugin\r\n- If it's a missing dependency in a package, explicitly blame the package so that users know where to report the issue\r\n- Make it clear in the error message that this is not a Babel bug\r\n- Suggest as a workaround to add the plugin in the top-level package.json\n\n### Describe alternatives you've considered\n\n\/\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["I've followed a couple different issues that look similar to the one I'm having, [#13189](https:\/\/github.com\/facebook\/create-react-app\/issues\/13189) and [#15655](https:\/\/github.com\/babel\/babel\/issues\/15655) but it seems that those builds crash while building. I am able to get a successful Heroku build and deployment, but then when launching the app I get `Uncaught runtime errors: \"Module build failed (from .\/node_modules\/react-scripts\/node_modules\/babel-loader\/lib\/index.js):\r\nError: [BABEL] \/app\/src\/index.js: Cannot find module '@babel\/plugin-proposal-private-property-in-object' \"`\r\n\r\nI tried upgrading my `\"@babel\/preset-env\"` to versions `\"^7.22.1\"` and now `\"^7.22.3\"` and deleting instances of `\"@babel\/plugin-proposal-private-property-in-object\"` as well as adding `\"@babel\/plugin-proposal-private-property-in-object\"` to my `\"dependencies\"` in addition to `\"devDependencies\"` ","@kyle-mucerino If the error \"Cannot find module '@babel\/plugin-proposal-private-property-in-object'\" is thrown even if you have installed it, here are a couple checklist items:\r\n- Node_modules are corrupted, remove the folder and re-run your package manager install\r\n- You have installed the plugin to some node_modules folder that the building tools can't resolve. E.g. it is installed to a global per-user node_modules or the building tool runs from an upper level directory.\r\n- Your package manager, such as Yarn PnP, isolates the package scope so that unsound package dependency can't be resolved. In this case, consult to your package manger's resolution settings\r\n\r\nIf they can't help you, please open a new issue with a reproduction repo.","@JLHwung I tried doing those but still getting the error. I have opened up a new issue in my repo, thank you for your help. #https:\/\/github.com\/kyle-mucerino\/workout-app\/issues\/1#issue-1797407298 "],"labels":["i: enhancement","i: needs triage"]},{"title":"[Bug]: Breaking change in a minor version bump","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nbabel-loader (webpack)\n\n### Input code\n\n```\r\n\/\/ Anything, the version release caused it to break old `babel.config.js` files\r\n```\n\n### Configuration file name\n\nbabel.config.js\n\n### Configuration\n\n```\r\nmodule.exports = function(api) {\r\n  var validEnv = ['development', 'test', 'production']\r\n  var currentEnv = api.env()\r\n  var isDevelopmentEnv = api.env('development')\r\n  var isProductionEnv = api.env('production')\r\n  var isTestEnv = api.env('test')\r\n\r\n  if (!validEnv.includes(currentEnv)) {\r\n    throw new Error(\r\n      'Please specify a valid `NODE_ENV` or ' +\r\n        '`BABEL_ENV` environment variables. Valid values are \"development\", ' +\r\n        '\"test\", and \"production\". Instead, received: ' +\r\n        JSON.stringify(currentEnv) +\r\n        '.'\r\n    )\r\n  }\r\n\r\n  return {\r\n    presets: [\r\n      isTestEnv && [\r\n        '@babel\/preset-env',\r\n        {\r\n          targets: {\r\n            node: 'current'\r\n          }\r\n        }\r\n      ],\r\n      (isProductionEnv || isDevelopmentEnv) && [\r\n        '@babel\/preset-env',\r\n        {\r\n          forceAllTransforms: true,\r\n          useBuiltIns: 'entry',\r\n          corejs: 3,\r\n          modules: false,\r\n          exclude: ['transform-typeof-symbol']\r\n        }\r\n      ]\r\n    ].filter(Boolean),\r\n    plugins: [\r\n      'babel-plugin-macros',\r\n      '@babel\/plugin-syntax-dynamic-import',\r\n      isTestEnv && 'babel-plugin-dynamic-import-node',\r\n      '@babel\/plugin-transform-destructuring',\r\n      [\r\n        '@babel\/plugin-proposal-class-properties',\r\n        {\r\n          loose: true\r\n        }\r\n      ],\r\n      [\r\n        '@babel\/plugin-proposal-object-rest-spread',\r\n        {\r\n          useBuiltIns: true\r\n        }\r\n      ],\r\n      [\r\n        '@babel\/plugin-proposal-private-methods',\r\n        {\r\n          loose: true\r\n        }\r\n      ],\r\n      [\r\n        '@babel\/plugin-proposal-private-property-in-object',\r\n        {\r\n          loose: true\r\n        }\r\n      ],\r\n      [\r\n        '@babel\/plugin-transform-runtime',\r\n        {\r\n          helpers: false\r\n        }\r\n      ],\r\n      [\r\n        '@babel\/plugin-transform-regenerator',\r\n        {\r\n          async: false\r\n        }\r\n      ]\r\n    ].filter(Boolean)\r\n  }\r\n}\r\n\r\n```\n\n### Current and expected behavior\n\nBefore the 7.22 release projects that are locked to 7.x with the above config would execute fine. After 7.22.0 the get this error:\r\n\r\n```\r\nCompiling...\r\nCompilation failed:\r\nnode:internal\/process\/promises:289\r\n            triggerUncaughtException(err, true \/* fromPromise *\/);\r\n            ^\r\n\r\nError: Cannot find package '@babel\/plugin-proposal-private-methods' imported from \/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/babel-virtual-resolve-base.js\r\n    at new NodeError (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/vendor\/import-meta-resolve.js:203:5)\r\n    at packageResolve (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/vendor\/import-meta-resolve.js:873:9)\r\n    at moduleResolve (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/vendor\/import-meta-resolve.js:902:20)\r\n    at defaultResolve (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/vendor\/import-meta-resolve.js:985:15)\r\n    at resolve (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/vendor\/import-meta-resolve.js:999:12)\r\n    at resolve (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/config\/files\/import-meta-resolve.js:13:10)\r\n    at tryImportMetaResolve (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/config\/files\/plugins.js:123:45)\r\n    at resolveStandardizedNameForImport (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/config\/files\/plugins.js:145:19)\r\n    at resolveStandardizedName (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/config\/files\/plugins.js:154:12)\r\n    at loadPlugin (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/config\/files\/plugins.js:47:20)\r\n    at loadPlugin.next (<anonymous>)\r\n    at createDescriptor (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/config\/config-descriptors.js:139:16)\r\n    at createDescriptor.next (<anonymous>)\r\n    at step (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/gensync\/index.js:261:32)\r\n    at evaluateAsync (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/gensync\/index.js:291:5)\r\n    at \/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/gensync\/index.js:44:11\r\n    at Array.forEach (<anonymous>)\r\n    at Function.async (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/gensync\/index.js:43:15)\r\n    at Function.all (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/gensync\/index.js:216:13)\r\n    at Generator.next (<anonymous>)\r\n    at createDescriptors (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/config\/config-descriptors.js:101:41)\r\n    at createDescriptors.next (<anonymous>)\r\n    at createPluginDescriptors (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/config\/config-descriptors.js:98:17)\r\n    at createPluginDescriptors.next (<anonymous>)\r\n    at \/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/gensync-utils\/functional.js:21:23\r\n    at Generator.next (<anonymous>)\r\n    at mergeChainOpts (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/config\/config-chain.js:349:34)\r\n    at mergeChainOpts.next (<anonymous>)\r\n    at chainWalker (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/config\/config-chain.js:316:14)\r\n    at chainWalker.next (<anonymous>)\r\n    at loadFileChain (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/config\/config-chain.js:192:24)\r\n    at loadFileChain.next (<anonymous>)\r\n    at buildRootChain (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/config\/config-chain.js:78:27)\r\n    at buildRootChain.next (<anonymous>)\r\n    at loadPrivatePartialConfig (\/private\/tmp\/79de2b03fd57b181232892d89e7e9920\/myapp\/node_modules\/@babel\/core\/lib\/config\/partial.js:79:62)\r\n    at loadPrivatePartialConfig.next (<anonymous>) {\r\n  code: 'ERR_MODULE_NOT_FOUND'\r\n}\r\n```\r\n\r\nI originally reported this in https:\/\/github.com\/rails\/rails\/issues\/48372, however, Rails 6 is no longer being maintained. The reason that this broke is because it is locked to babel 7.x as long as there are no breaking changes with 7.x it will continue to work, however 7.22 .0 changed the name of a module used in `babel.config.js` so the old module name expected in `babel.config.js` is no longer installed and this causes an error.\r\n\r\n\n\n### Environment\n\n```\r\n$ npx envinfo --preset babel\r\nNeed to install the following packages:\r\n  envinfo@7.8.1\r\nOk to proceed? (y) y\r\n\r\n  System:\r\n    OS: macOS 13.4\r\n  Binaries:\r\n    Node: 19.6.1 - \/usr\/local\/bin\/node\r\n    Yarn: 1.22.17 - \/usr\/local\/bin\/yarn\r\n    npm: 9.4.0 - \/usr\/local\/bin\/npm\r\n  npmPackages:\r\n    webpack: ^4.46.0 => 4.46.0\r\n```\n\n### Possible solution\n\nTreat this as a bug\/regression. Rollback the naming change in a new release of 7.22.x this will un-break old applications. Then release the breaking change in a new major version (presumably 8.x). \r\n\r\nThere's nothing wrong with breaking changes (as long as they're intentional) provided that the major version is rev-d.\r\n\r\nIn the future, I recommend adopting the policy that all module renaming is a breaking change. For some minor prior art from another language, it's commonly considered a breaking change in Rust libraries to rename a module https:\/\/stackoverflow.com\/a\/41195476\/147390. \r\n\r\n\n\n### Additional context\n\nYou're awesome, and babel is great! Thanks for all your work \ud83d\udc9c","comments":["Hey @schneems! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","What's happening here is that your config is depending on `@babel\/plugin-proposal-private-methods` without declaring it in `package.json`. What's causing problems for you here is not that we renamed a package, but that `@babel\/preset-env` doesn't depend anymore on `@babel\/plugin-proposal-private-methods`.\r\n\r\nThe Rust RFC you mentioned doesn't include \"renaming a crate\" as a breaking change, because it's not:\r\n- your application depends on `crate-a` version 1.2.3\r\n- `crate-a` is renamed to `crate-b`, and published as version 1.2.4\r\n- your app keeps working, it will never notice the rename unless you explicitly change your `Cargo.toml` file, it will simply not receive the new updates\r\n\r\nWhat caused problems for you is something that in Rust can never happen, because as far as I know it's impossible to depend on a crate in Rust without explicitly adding it to your `Cargo.toml`:\r\n- you depend on `@babel\/preset-env`\r\n- `@babel\/preset-env` used to depend on `@babel\/plugin-proposal-private-methods`\r\n- When using `npm` to install packages (or Yarn in some cases), it will generate one of the two following `node_modules` layouts:\r\n  ```\r\n  node_modules\/\r\n  - @babel\/preset-env\/\r\n    - node_modules\/\r\n      - @babel\/plugin-proposal-private-methods\/\r\n  ```\r\n  ```\r\n  node_modules\/\r\n  - @babel\/preset-env\/\r\n  - @babel\/plugin-proposal-private-methods\/\r\n  ```\r\n- Your app was depending on the second layout being generated, and it was depending on `@babel\/plugin-proposal-private-methods` without listing it in its dependencies (note: you cannot do this in Rust!). It was relying on:\r\n  - internal implementation details of how your package manager hoists dependencies in `node_modules` to save disk space\r\n  - the internal dependencies of `@babel\/preset-env`, and (at least in the JS ecosystem) the internal dependencies of a package are never considered part of its public API \r\n\r\nNow that `@babel\/preset-env` doesn't depend on `@babel\/plugin-proposal-private-methods` anymore, `node_modules\/@babel\/plugin-proposal-private-methods` is less likely to exist (you could still be lucky and have another one of your dependencies transitively depend on that package).\r\n\r\nThe workaround you found in https:\/\/github.com\/rails\/rails\/issues\/48372#issue-1737187584 is a bad workaround: it still relies on a package been present in your `node_modules` by luck, without explicitly listing it in your dependencies in `package.json`.\r\n\r\nTwo good solutions are:\r\n1. Make sure to list in `package.json` all the dependencies you use, whether or not you use the new packages or the old packages in your Babel config\r\n2. Simplify your config, to not depend explicitly on the various plugins just to enable their `loose` mode, but using the top-level [`assumptions`](https:\/\/babeljs.io\/assumptions) option instead:\r\n\r\n```js\r\n   module.exports = function(api) {\r\n  var validEnv = ['development', 'test', 'production']\r\n  var currentEnv = api.env()\r\n  var isDevelopmentEnv = api.env('development')\r\n  var isProductionEnv = api.env('production')\r\n  var isTestEnv = api.env('test')\r\n\r\n  if (!validEnv.includes(currentEnv)) {\r\n    throw new Error(\r\n      'Please specify a valid `NODE_ENV` or ' +\r\n        '`BABEL_ENV` environment variables. Valid values are \"development\", ' +\r\n        '\"test\", and \"production\". Instead, received: ' +\r\n        JSON.stringify(currentEnv) +\r\n        '.'\r\n    )\r\n  }\r\n\r\n  return {\r\n    assumptions: {\r\n      setPublicClassFields: true,\r\n      privateFieldsAsProperties: true,\r\n    },\r\n    presets: [\r\n      isTestEnv && [\r\n        '@babel\/preset-env',\r\n        {\r\n          targets: {\r\n            node: 'current'\r\n          }\r\n        }\r\n      ],\r\n      (isProductionEnv || isDevelopmentEnv) && [\r\n        '@babel\/preset-env',\r\n        {\r\n          forceAllTransforms: true,\r\n          useBuiltIns: 'entry',\r\n          corejs: 3,\r\n          modules: false,\r\n          exclude: ['transform-typeof-symbol']\r\n        }\r\n      ]\r\n    ].filter(Boolean),\r\n    plugins: [\r\n      'babel-plugin-macros',\r\n      [\r\n        '@babel\/plugin-proposal-object-rest-spread',\r\n        {\r\n          useBuiltIns: true\r\n        }\r\n      ],\r\n      [\r\n        '@babel\/plugin-transform-runtime',\r\n        {\r\n          helpers: false\r\n        }\r\n      ],\r\n    ].filter(Boolean)\r\n  }\r\n}\r\n```\r\n- `@babel\/plugin-proposal-class-properties`, `@babel\/plugin-proposal-private-methods`, and `@babel\/plugin-proposal-private-property-in-object`'s `loose` can be replaced by `setPublicClassFields` and `privateFieldsAsProperties`\r\n- the destructuring, dynamic import and `@babel\/plugin-transform-regenerator` plugins are already included in `@babel\/preset-env`\r\n\r\nAdditionally, I believe that `@babel\/plugin-transform-runtime` as configured is a no-op but I'm not 100% sure about it (there must be a reason for enabling it while explicitly disabling all its behavior, but I don't understand which it could have been)","> Two good solutions are\r\n\r\nUnfortunately, we cannot fix this in webpacker or Rails 6 as both of them are no longer under development and locked to a specific major version of babel. As long as there are no breaking changes to babel, that code will continue to work.\r\n\r\nI understand the underlying dependency chain that is causing the issue. My main argument is that a change in babel should not break code that was previously working when people depending on it were locked to a specific major.\r\n\r\nIf your stance is that the developers who wrote this code (not me) \"did it wrong,\" I would push back by asking how could we re-design the feature so that is either:\r\n\r\n- Emits a warning\r\n- Is harder than \"doing it right\"\r\n- Not possible\r\n\r\nThat wouldn't fix this case, or any future cases as more plugins get renamed, but it might alleviate some future pain and guide people how to use the feature as you're expecting.\r\n\r\nIt would raise the question, what exactly did the developer do wrong? It sounds like you're saying they're importing a module without requiring it explicitly. I would agree that's generally not a good idea unless one of the reasons that library exists is to expose other modules. I'm not intimately familiar with this ecosystem (and not affiliated with webpacker gem at all), this npm library.\r\n\r\n> @babel\/preset-env is a smart preset that allows you to use the latest JavaScript without needing to micromanage which syntax transforms (and optionally, browser polyfills) are needed by your target environment (s).\r\n\r\nLooking at the docs:\r\n\r\n> [Babel plugins](https:\/\/github.com\/babel\/babel\/blob\/main\/packages\/babel-compat-data\/scripts\/data\/plugin-features.js) - both full and shorthand names are supported, for example the following are functionally equivalent:\r\n\r\nIt looks like a feature of this library is to export plugins. If that's the case than a change in the name of available exported plugins would be a breaking change (again, this is a very weak assertion I'm not really that familiar with the ecosystem and want to lay my cards on the table). \r\n\r\n\r\n","> It looks like a feature of this library is to export plugins. If that's the case than a change in the name of available exported plugins would be a breaking change (again, this is a very weak assertion I'm not really that familiar with the ecosystem and want to lay my cards on the table).\r\n\r\nNo, it only contains `@babel\/plugin-transform-xxx`, `@babel\/plugin-proposal-xxx` needs to be installed manually by the developer.\r\nThis is a problem of nodejs dependency layout. When package A depends on package B and package B depends on package C, package A can sometimes directly use package C.\r\nWe're really just not using a dependency anymore (renaming is equivalent to removing dependency A and adding dependency B), and obviously changes to a package's internal dependencies should not be considered breaking changes.\r\n\r\nBut I agree that the current consequences are a bit annoying, maybe we can consider keeping the old dependencies for now.","> If your stance is that the developers who wrote this code (not me) \"did it wrong,\" I would push back by asking how could we re-design the feature so that is either:\r\n> - Emits a warning\r\n> - Is harder than \"doing it right\"\r\n> - Not possible\r\n\r\nThere are three package managers in the JavaScript ecosystem: npm, pnpm and yarn. By default, both pnpm and yarn prevent this problem:\r\n- pnpm generates the first `node_modules` layout I mentioned in https:\/\/github.com\/babel\/babel\/issues\/15679#issuecomment-1573896798, so this case would have always been an error and it wouldn't have been possible to accidentally rely on it\r\n- yarn (since version 2) doesn't use `node_modules` by default, and makes sure that every package can only depend on the packages it explicitly lists in its dependencies. Yarn 1 didn't support a way to catch this problem.\r\n- npm has an [accepted RFC](https:\/\/github.com\/npm\/rfcs\/blob\/eb927e8a22d30ccf2aed173d5a83ee4fbfb2b3e3\/accepted\/0042-isolated-mode.md) for an opt-in way to catch these problems, but:\r\n  - it's opt-in, so it doesn't catch the problem by default\r\n  - as far as I know, it has not been actually developed yet\r\n\r\n> I would agree that's generally not a good idea unless one of the reasons that library exists is to expose other modules. I'm not intimately familiar with this ecosystem (and not affiliated with webpacker gem at all), this npm library.\r\n> \r\n> > @babel\/preset-env is a smart preset that allows you to use the latest JavaScript without needing to micromanage which syntax transforms (and optionally, browser polyfills) are needed by your target environment (s).\r\n>\r\n> Looking at the docs:\r\n>\r\n> > [Babel plugins](https:\/\/github.com\/babel\/babel\/blob\/main\/packages\/babel-compat-data\/scripts\/data\/plugin-features.js) - both full and shorthand names are supported, for example the following are functionally equivalent:\r\n>\r\n> It looks like a feature of this library is to export plugins. If that's the case than a change in the name of available exported plugins would be a breaking change (again, this is a very weak assertion I'm not really that familiar with the ecosystem and want to lay my cards on the table). \r\n\r\nThe point of the preset is not to re-export all the plugins, but to abstract the plugins away from the Babel users. Instead of enabling the various plugins in the Babel config, that thus needs to be installed individually, the preset allows transforming all the necessary syntax without having to enable the individual plugins in the config. If a plugin is manually listed, it's \"opting out\" from being just enabled by default and thus its usage should not be considered as being enabled inside the preset, because it's not.\r\n\r\n> Unfortunately, we cannot fix this in webpacker or Rails 6 as both of them are no longer under development and locked to a specific major version of babel\r\n\r\nI'm not familiar at all with how Rails works, doesn't it give access to a `package.json` files that users can edit?\r\n\r\nThat said, I'm thinking about how to fix this in a way that lets us handle `@babel\/preset-env`'s dependencies as an implementation detail without breaking major unmaintained packages using Babel. Even just a good error message explaining a workaround is better than the status quo.","@schneems I'm implementing a workaround for this specifically, but in order to do it I need to know how to detect if I'm running in a rails 6 app. I have never used anything in the Ruby ecosystem, and I'm struggling to get even a basic app do install \ud83d\ude05 \r\n\r\nCould you create one, and just commit everything and push it to GitHub, linking specifically to where the Babel config is?","Thanks for all the consideration in your response!\r\n\r\n> Even just a good error message explaining a workaround is better than the status quo.\r\n\r\n100%\r\n\r\nAnother thought I had regarding my suggested solution of releasing another minor and major combo (which seems a bit heavy handed). There's possibly a less involved fix: add the old library back as a dependency as a no-op and add in a deprecation when people use it \"hey this is going away, use 'transform' variant instead...\r\n\r\n> I'm not familiar at all with how Rails works, doesn't it give access to a package.json files that users can edit?\r\n\r\nWhen you `rails new` it essentially acts as a site generator. It includes a bunch of templates and allows libraries to hook into that lifecycle as well. Rails 6 includes webpacker by default which is a wrapper around npm's webpack. It does include a `package.json` file that users can edit by default it looks like this:\r\n\r\n```\r\n{\r\n  \"name\": \"myapp\",\r\n  \"private\": true,\r\n  \"dependencies\": {\r\n    \"@rails\/actioncable\": \"^6.0.0\",\r\n    \"@rails\/activestorage\": \"^6.0.0\",\r\n    \"@rails\/ujs\": \"^6.0.0\",\r\n    \"@rails\/webpacker\": \"5.4.4\",\r\n    \"turbolinks\": \"^5.2.0\",\r\n    \"webpack\": \"^4.46.0\",\r\n    \"webpack-cli\": \"^3.3.12\"\r\n  },\r\n  \"version\": \"0.1.0\",\r\n  \"devDependencies\": {\r\n    \"webpack-dev-server\": \"^3\"\r\n  }\r\n}\r\n```\r\n\r\nBuilding assets will generate a `yarn.lock` file but it doesn't include one by default. \r\n\r\n>  I need to know how to detect if I'm running in a rails 6 app.\r\n\r\nI've got a tutorial https:\/\/devcenter.heroku.com\/articles\/getting-started-with-rails6 this is generated from a script that runs on my computer so what you see in the docs is what outputs from a real app https:\/\/github.com\/zombocom\/rundoc\/blob\/main\/test\/fixtures\/rails_6\/rundoc.md. Just stop before you get to the creating an app or deploying and you should have a working Rails app. Here's the end result of my script https:\/\/github.com\/schneems\/rails-6-simple-2023-06-06 (which includes an output of the tutorial docs it generates).\r\n\r\nYou'll need to install Ruby first. I recommend a ruby version manager like `chruby` and `ruby-install` (the two work together).\r\n\r\nTo determine your Rails version on the command line you can:\r\n\r\n```\r\n$ rails -v\r\n```\r\n\r\nIf you have multiple versions of rails you can run `<name> _<version>_ <args>` like `rails _6.1.7.3_ new myapp` \r\n\r\nIt should generate some assets for you automatically. You can invoke production asset generation which invokes webpack via:\r\n\r\n```\r\n$ RAILS_ENV=production SECRET_KEY_BASE=asdf bundle exec rake assets:precompile assets:clean --trace\r\n```\r\n\r\nThis should run a yarn install then a webpack compile. The `--trace` flag above shows you which tasks are running.\r\n\r\nAs a heads up I'm out for a bit on my 10 year anniversary.","Is there any quick workaround for a newbie who doesn't want to get into the details?\r\nI'm trying to follow the same path as @schneems and the Heroku workaround https:\/\/devcenter.heroku.com\/articles\/getting-started-with-rails6#fix-a-babel-regression still gives an error:\r\n```bash\r\nCompilation failed:\r\nHash: 50c91179df559b106792\r\nVersion: webpack 4.47.0\r\nTime: 208ms\r\nBuilt at: 2024-03-06 11:41:34 a.m.\r\n 2 assets\r\nEntrypoint application = js\/application-a0a05a9c25d4f054cd70.js js\/application-a0a05a9c25d4f054cd70.js.map\r\n[0] .\/app\/javascript\/packs\/application.js 1.61 KiB {0} [built] [failed] [1 error]\r\n\r\nERROR in .\/app\/javascript\/packs\/application.js\r\nModule build failed (from .\/node_modules\/babel-loader\/lib\/index.js):\r\nError: [BABEL]: --- PLACEHOLDER PACKAGE ---\r\nThis @babel\/plugin-proposal-private-property-in-object version is not meant to\r\nbe imported. Something is importing\r\n@babel\/plugin-proposal-private-property-in-object without declaring it in its\r\ndependencies (or devDependencies) in the package.json file.\r\nAdd \"@babel\/plugin-proposal-private-property-in-object\" to your devDependencies\r\nto work around this error. This will make this message go away.\r\n```\r\n\r\nI followed what the error message says, so I added \"@babel\/plugin-proposal-private-property-in-object\" to my devDependencies as follows:\r\n```diff\r\ndiff --git a\/babel.config.js b\/babel.config.js\r\nindex 19a07f3..f42d298 100644\r\n--- a\/babel.config.js\r\n+++ b\/babel.config.js\r\n@@ -54,7 +54,7 @@ module.exports = function(api) {\r\n         }\r\n       ],\r\n       [\r\n-        '@babel\/plugin-proposal-private-methods',\r\n+        '@babel\/plugin-transform-private-methods',\r\n         {\r\n           loose: true\r\n         }\r\ndiff --git a\/package.json b\/package.json\r\nindex b3f2a56..8d6560b 100644\r\n--- a\/package.json\r\n+++ b\/package.json\r\n@@ -12,6 +12,7 @@\r\n   },\r\n   \"version\": \"0.1.0\",\r\n   \"devDependencies\": {\r\n-    \"webpack-dev-server\": \"^3\"\r\n+    \"webpack-dev-server\": \"^3\",\r\n+    \"@babel\/plugin-proposal-private-property-in-object\": \"^7.21.11\"\r\n   }\r\n }\r\n```\r\n\r\nbut I'm still getting the same error.\r\n","Can you check in your project where `@babel\/plugin-proposal-private-property-in-object` is used, and use `@babel\/plugin-transform-private-property-in-object` instead? (adding it to your deps)?","@craftonixinc I installed `@babel\/plugin-proposal-private-methods` and `@babel\/plugin-proposal-private-property-in-object`, it worked for me\r\n\r\n```bash\r\nyarn add @babel\/plugin-proposal-private-methods @babel\/plugin-proposal-private-property-in-object\r\n```"],"labels":["i: question"]},{"title":"Mention relevant assumptions in plugins docs","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on this feature?\r\n\r\n### What problem are you trying to solve?\r\n\r\nHey, I've been doing a lot of performance profiling these last weeks (at [MUI](https:\/\/mui.com\/)) and I've noted that [`_objectSpread2`](https:\/\/github.com\/babel\/babel\/blob\/02bacf882d624a9907f5b404f219ff74600d6d15\/packages\/babel-helpers\/src\/helpers\/objectSpread2.js#L23) consistently is at the top of the list for most CPU cycles spent. Admittedly we're abusing the spread operator, but the problem is also that `_objectSpread2` is about 10x slower than `Object.assign`, mainly because the spec [defines](https:\/\/tc39.es\/ecma262\/multipage\/ecmascript-language-expressions.html#prod-SpreadElement) the spread operator in terms of `Object.defineProperty`, so it would be obviously incorrect to transform it to `Object.assign` by default.\r\n\r\n_Chart: the `_objectSpread2` vs `Object.assign` vs spread benchmark results, for my system_\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/1423607\/38a850c2-61b5-4f51-b136-19f7d237f7cf)\r\n[Benchmark link](https:\/\/measurethat.net\/Benchmarks\/Show\/9595\/0\/javascript-spread-operator-vs-objectassign-performance)\r\n\r\n### Describe the solution you'd like\r\n\r\nAlthough it's incorrect to transform the spread operator by default, in some cases it can make sense for developers to choose to do that transformation for their codebase, because they evaluate that it won't have negative effects.\r\n\r\nSo I would like to add an option to the `plugin-transform-operator` to enable it to use `Object.assign`.\r\n\r\n### Describe alternatives you've considered\r\n\r\nI'll publish a separate plugin if you're not interested, feel free to close this issue.\r\n\r\n### Documentation, Adoption, Migration Strategy\r\n\r\n_No response_","comments":["Hey @romgrk! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","You can enable the [setSpreadProperties](https:\/\/babeljs.io\/docs\/assumptions#setspreadproperties) assumption, and if the [targets](https:\/\/babeljs.io\/docs\/options#targets) you specify support `Object.assign` Babel will use that. If you don't specify the top-level targets option, with that assumption enabled Babel will fall back to the [`extends`](https:\/\/github.com\/babel\/babel\/blob\/02bacf882d624a9907f5b404f219ff74600d6d15\/packages\/babel-helpers\/src\/helpers.ts#L165) helper, which still uses `Object.assign` when available.","Related - https:\/\/github.com\/mui\/material-ui\/pull\/37461","Neat, thanks for the quick response. That assumption only has effects on the transform-spread plugin IIUC, right?\r\n\r\nIt would be nice to add a note about it in the docs, hard to find it otherwise.","> That assumption only has effects on the transform-spread\r\n\r\nIt affects the `transform-object-rest-spread` and `transform-destructuring` plugin, since both are responsible of transforming object spread (the first one only runs when the second one isn't enabled).\r\n\r\n> It would be nice to add a note about it in the docs, hard to find it otherwise.\r\n\r\nmhh, we should probably have a \"relevant assumptions\" section in every plugin page.","Alright. Great timing on that PR lol.","> It would be nice to add a note about it in the docs, hard to find it otherwise.\r\n\r\nYeah, the assumption was previously the loose mode: https:\/\/babel.dev\/docs\/babel-plugin-transform-object-rest-spread#loose. For every plugin with loose mode support, we provided the equivalent assumptions config."],"labels":["i: docs"]},{"title":"[Bug]: Babel attempts to use wrong runtime helpers in version 7.22","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nbabel-loader (webpack)\n\n### Input code\n\nexport async function x() {\r\n  return 1\r\n}\n\n### Configuration file name\n\nbabel.config.js\n\n### Configuration\n\n```js\r\nmodule.exports = (api) => {\r\n  api.cache.never();\r\n\r\n  return {\r\n    \/\/ Fixes \"TypeError: __webpack_require__(...) is not a function\"\r\n    \/\/ https:\/\/github.com\/webpack\/webpack\/issues\/9379#issuecomment-509628205\r\n    \/\/ https:\/\/babeljs.io\/docs\/en\/options#sourcetype\r\n    sourceType: 'unambiguous',\r\n    plugins: [\r\n      [\r\n        '@babel\/plugin-transform-runtime',\r\n        {\r\n          regenerator: false,\r\n          version: require('.\/package.json').dependencies['@babel\/runtime']\r\n        }\r\n      ],\r\n      [\r\n        'polyfill-corejs3',\r\n        {\r\n          method: 'usage-pure'\r\n        }\r\n      ],\r\n      [\r\n        'polyfill-regenerator',\r\n        {\r\n          method: 'usage-pure'\r\n        }\r\n      ]\r\n    ],\r\n    presets: [\r\n      [\r\n        '@babel\/preset-env',\r\n        {\r\n          bugfixes: true\r\n        }\r\n      ]\r\n    ]\r\n  };\r\n};\r\n\r\n```\n\n### Current and expected behavior\n\nCurrent behavior: log spam of `Can't resolve '@babel\/runtime-corejs3\/helpers\/xxx' in 'yyy'`\r\n\r\nExpected: helpers are resolved into `@babel\/runtime` instead of `@babel\/runtime-corejs3`\n\n### Environment\n\nLast known good babel versions:\r\n\r\n- System:\r\n  - OS: Windows 10 10.0.19045\r\n- Binaries:\r\n  - Node: 18.16.0 - C:\\Program Files\\nodejs\\node.EXE\r\n  - npm: 9.5.1 - C:\\Program Files\\nodejs\\npm.CMD\r\n  npmPackages:\r\n  - @babel\/core: 7.21.8 => 7.21.8\r\n  - @babel\/plugin-transform-runtime: 7.21.4 => 7.21.4\r\n  - @babel\/preset-env: 7.21.5 => 7.21.5\r\n  - @babel\/runtime: 7.21.5 => 7.21.5\r\n  - babel-loader: ^9.1.2 => 9.1.2\r\n  - babel-plugin-polyfill-corejs3: ^0.8.1 => 0.8.1\r\n  - babel-plugin-polyfill-regenerator: ^0.5.0 => 0.5.0\r\n  - webpack: ^5.84.1 => 5.84.1\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nThis wasn't an issue in 7.21","comments":["Hey @fire332! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Can you share your package.json?","Working babel versions from minimal repo:\r\n\r\n```json\r\n{\r\n  \"name\": \"test\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"devDependencies\": {\r\n    \"@babel\/core\": \"7.21.8\",\r\n    \"@babel\/plugin-transform-runtime\": \"7.21.4\",\r\n    \"@babel\/preset-env\": \"7.21.5\",\r\n    \"babel-loader\": \"^9.1.2\",\r\n    \"babel-plugin-polyfill-corejs3\": \"^0.8.1\",\r\n    \"babel-plugin-polyfill-regenerator\": \"^0.5.0\",\r\n    \"webpack\": \"^5.84.1\",\r\n    \"webpack-cli\": \"^5.1.1\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@babel\/runtime\": \"7.21.5\",\r\n    \"core-js-pure\": \"^3.30.2\",\r\n    \"regenerator-runtime\": \"^0.13.11\"\r\n  }\r\n}\r\n\r\n```","Thanks!\r\n\r\nThis behavior is expected, and it's a breaking change introduced in `babel-plugin-polyfill-corejs3` 0.8.0 (according to semver, version starting with 0. should bump the _second_ number when there is a breaking change).\r\n\r\nYour configuration is asking Babel to use inject \"pure\" imports to polyfills for the features that you are using. However, Babel previously had a problem: it was injecting imports to helpers (`@babel\/runtime`) that were using modern features without being polyfilled.\r\n\r\n`babel-polyfill-*` packages can now \"hint\" at Babel runtime from which package to load the helpers, providing a package that is internally polyfilled. This behavior is similar to the old polyfilling strategy, using `@babel\/plugin-transform-runtime`'s `corejs` option instead of `babel-plugin-polyfill-corejs3`.\r\n\r\nWe need to improve the docs around this behavior, specifically in https:\/\/github.com\/babel\/babel-polyfills\/tree\/main\/packages\/babel-plugin-polyfill-corejs3 and https:\/\/github.com\/babel\/website\/blob\/main\/docs\/plugin-transform-runtime.md.","Could [this](https:\/\/github.com\/babel\/babel-polyfills\/issues\/111) be related? And I'm now expected to install `@babel\/runtime-corejs3` as well as `@babel\/runtime`?","You should only need `@babel\/runtime-corejs3` now. It has been introduced in https:\/\/github.com\/babel\/babel-polyfills\/pull\/160 "],"labels":["i: docs"]},{"title":"[Bug]:  Source-map name mappings","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nOther (Next.js, Gatsby, vue-cli, ...)\r\n\r\n### Input code\r\n\r\nPossible way to reproduce:\r\n\r\n```js\r\nimport * as babel from '@babel\/core';\r\n\r\nbabel.transform('function someFunctionName(arg1, arg2) {}', { sourceMap: true });\r\n```\r\n\r\n\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nCurrent source map: \r\n```json\r\n{\r\n    \"version\": 3,\r\n    \"names\": [\r\n        \"someFunctionName\",\r\n        \"arg1\",\r\n        \"arg2\"\r\n    ],\r\n    \"sources\": [\r\n        \"unknown\"\r\n    ],\r\n    \"sourcesContent\": [\r\n        \"function someFunctionName(arg1, arg2) {}\"\r\n    ],\r\n    \"mappings\": \"AAAA,SAASA,gBAAgBA,CAACC,IAAI,EAAEC,IAAI,EAAE,CAAC\"\r\n}\r\n```\r\n\r\nAfter mappings decoding: \r\n```json\r\n[\r\n  [0, 0, 0, 0],\r\n  [9, 0, 0, 9, 0],\r\n  [25, 0, 0, 25, 0],\r\n  [26, 0, 0, 26, 1],\r\n  [30, 0, 0, 30],\r\n  [32, 0, 0, 32, 2],\r\n  [36, 0, 0, 36],\r\n  [38, 0, 0, 38],\r\n  [39, 0, 0, 39],\r\n]\r\n```\r\nOn the previous version of babel (@babel\/core: 7.20.12; @babel\/generator: 7.20.14) mappings decoding is:\r\n```json\r\n[\r\n  [0, 0, 0, 0],\r\n  [9, 0, 0, 9, 0],\r\n  [25, 0, 0, 25],\r\n  [26, 0, 0, 26, 1],\r\n  [30, 0, 0, 30],\r\n  [32, 0, 0, 32, 2],\r\n  [36, 0, 0, 36],\r\n  [38, 0, 0, 38],\r\n  [39, 0, 0, 39],\r\n]\r\n```\r\n\r\n\r\n### Environment\r\n\r\nnpmPackages:\r\n@babel\/core: 7.21.5\r\n@babel\/generator: 7.21.5\r\n\r\n### Possible solution\r\n\r\nOn [#15022](https:\/\/github.com\/babel\/babel\/pull\/15022) I've observed this change in `methods.ts` file:\r\n```ts\r\nconst nameInfo = _getFuncIdName.call(this, idNode, parentNode);\r\nif (nameInfo) {\r\n  this.sourceIdentifierName(nameInfo.name, nameInfo.pos);\r\n}\r\n```\r\n\r\nI suppose it should be moved to `parameters` function under arguments length check.\r\n\r\nHowever I'm not in the context of this change in [#15022](https:\/\/github.com\/babel\/babel\/pull\/15022) PR.\r\n\r\n### Additional context\r\n\r\nWe are using babel as part of ember-cli build. So, in the updated version we have an issue with source map validation. I was able to localize the issue to source map generation, specially to extra name field in the decoded mappings property of source map. If you will check the current and old behaviour you will find an extra element in the decoded mappings. This element represents the name index in the `names` array.\r\n\r\nNote: Not really sure that it's an issue. However anyway it's breaking change of source map validation. ","comments":["Hey @lNikolayl! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","> I suppose it should be moved to parameters function under arguments length check.\r\n> \r\n> However I'm not in the context of this change in https:\/\/github.com\/babel\/babel\/pull\/15022 PR.\r\n\r\nSorry I didn't understand what you mean, can you explain?\r\n\r\nWe append the identifier name to `(` on purpose.\r\nBecause in many of the methods below, it is more desirable to append the identifier name to `(` than to `\"fn\"]:function(`.\r\n```js\r\nvar a = {\r\n   fn() {},\r\n   fn:function() {},\r\n   [fn]:function() {},\r\n   [\"fn\"]:function() {},\r\n   [function() {}]: function() {},\r\n   [()=> {}]: function() {},\r\n   [fn]() { },\r\n   [\"fn\"]() { },\r\n   [function() {}]() { },\r\n   [()=> {}]() { }\r\n}\r\n```\r\n\r\nMore context here https:\/\/github.com\/babel\/babel\/issues\/14907","Oh, thank you, I got it. Inside Ember pipeline there is sourcemap validation stage and with the new version of babel all sourcemaps marked as invalid due to this change. In this case it's breaking change. Seems it should be addressed to the validator side. The issue is described [here](https:\/\/github.com\/ben-ng\/sourcemap-validator\/issues\/17)."],"labels":["pkg: generator","i: question","area: sourcemaps"]},{"title":"chore: Enable rule `import\/recommended`","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | `Fixes #1, Fixes #2` <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nIt is covered by https:\/\/github.com\/babel\/babel\/blob\/75458aa7e3732bfdf5da469295a7d8bf0b224a5d\/packages\/babel-types\/src\/validators\/generated\/index.ts#L3259\r\nThere seems to be a little difference between the two implementations, for `undefined`, the current actual exported implementation has `undefined` as mutable, while this one which will be removed is not.\r\nI don't think it matters, we've been using it for a long time anyway.\r\n\r\nI'm actually curious if there is any automated way to detect this, does anyone know of one? :)\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15642\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/54462\/","From https:\/\/github.com\/import-js\/eslint-plugin-import\/issues\/2285, it looks like eslint-plugin-import should already warn about this \ud83e\udd14 ","![image](https:\/\/github.com\/babel\/babel\/assets\/30521560\/fd25d916-598b-47c0-beb3-4a903737bb95)\r\nIt seems that we only manually enabled two rules.\ud83d\ude15"],"labels":["pkg: types"]},{"title":"feat(transform-react-pure-annotations): mark React.Fragment as pure","body":"Similar to `createElement`, use of `React.Fragment` does not incur side effects and can be safely marked as pure for DCE purposes.","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/54436\/","Can you add a test case to `packages\/babel-plugin-transform-react-pure-annotations\/test\/fixtures\/react`?","Definitely, I'm going to make this a draft because I think I need to refactor it a bit anyway since `React.Fragment` is generally not called."],"labels":["PR: New Feature :rocket:","area: react"]},{"title":"add hermes targets","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on this feature?\r\n\r\n### What problem are you trying to solve?\r\n\r\n```json\r\n{\r\n  \"targets\": {\r\n    \"hermes\": \"0.7.2\"\r\n  }\r\n}\r\n```\r\n```shell\r\nError: [BABEL] \/Users\/useName\/gitlab\/react-native-pui\/reactNativePui\/index.ts: @babel\/helper-compilation-targets: 'hermes' is not a valid target\r\n- Did you mean 'chrome'? (While processing: \"\/Users\/useName\/gitlab\/react-native-pui\/reactNativePui\/node_modules\/@babel\/preset-env\/lib\/index.js\")\r\n    at validateTargetNames (\/Users\/useName\/gitlab\/react-native-pui\/reactNativePui\/node_modules\/@babel\/preset-env\/node_modules\/@babel\/helper-compilation-targets\/lib\/index.js:60:13)\r\n```\r\n\r\n### Describe the solution you'd like\r\n\r\nSupport incoming hermes environment parameters configuration,\r\nlike \r\nhttps:\/\/github.com\/babel\/babel\/pull\/14944\r\n\r\n### Describe alternatives you've considered\r\n\r\nNo\r\n\r\n### Documentation, Adoption, Migration Strategy\r\n\r\nlike \r\nhttps:\/\/github.com\/babel\/babel\/pull\/14944","comments":["Hey @chenyulun! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Hermes is in compat-table, so we can do this. We already did something similar a couple of months ago, adding support for Deno as you already saw \u2014 that PR is a good example to follow.\r\n\r\nSince you checked \"Would you like to work on this feature?\", I'm leaving here some instructions :)\r\n\r\n<!-- ALERT!!!!!!!\r\n    Before submitting this comment, please:\r\n      1. Write where to start searching the bug\r\n      2. Write where to add a new test\r\n    See https:\/\/github.com\/babel\/babel\/issues\/9563#issuecomment-466799807 for an example\r\n-->\r\n\r\nIf it is the first time that you contribute to Babel, follow these steps: (you need to have `make` and `yarn` available on your machine)\r\n1. **Write a comment there** to let other possible contributors know that you are working on this bug.\r\n1. Fork the repo\r\n1. Run `git clone https:\/\/github.com\/<YOUR_USERNAME>\/babel.git && cd babel`\r\n1. Run `yarn && make bootstrap`\r\n1. Wait :hourglass_flowing_sand: \r\n1. Add Hermes to `packages\/babel-compat-data`. All the JSON files are generated using `make build-compat-data`.\r\n1. Run `make watch` (or `make build` whenever you change a file)\r\n1. Add support for Hermes in `packages\/babel-helper-compilation-targets`\r\n1. Add a test in `packages\/babel-preset-env` (only `input.js`; `output.js` will be automatically generated)\r\n1. `yarn jest preset-env` to run the tests\r\n    - If some test outputs don't match but the new results are correct, you can delete the bad `output.js` files and run the tests again\r\n    - If you prefer, you can run `OVERWRITE=true yarn jest [name-of-the-package-to-test]` and they will be automatically updated.\r\n1. If it is working, run `make test` to run all the tests\r\n1. Run `git push` and open a PR! "],"labels":["i: enhancement","pkg: preset-env","pkg: compat-data","area: compat-data"]},{"title":"does transform plugins can hot reload","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\ni have an issue when i use babel transform plugin. like '[babel-plugin-content-transformer](https:\/\/www.npmjs.com\/package\/babel-plugin-content-transformer?activeTab=code)' , when i edit the configure file like *.toml the front web can't not be refresh with new content , event i restart the server it could not be take effect. i try to use other plugin have the same issue.\n\n### Describe the solution you'd like\n\nOpen an interface to make user choose\n\n### Describe alternatives you've considered\n\nunfriendly i must convert the toml to json myself\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @gongzhxu! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","`babel-plugin-content-transformer` can use `api.addExternalDependency` (https:\/\/dev.to\/goatandsheep\/how-to-use-babels-new-addexternaldependency-api-338h) to tell Babel that a file relies on some other external file. Babel will then pass this info to whoever is calling Babel (Webpack with `babel-loader`, `@babel\/cli`, etc), which will be able to re-compile when that external dependency is called.\r\n\r\nSo this need to be supported both in the plugin and in whatever you are using to run Babel (`babel-loader` and `@babel\/cli` already support this).","@nicolo-ribaudo thank a lot, the problem has been solved","When I use addExternalDependency watch file in Babel plugin, when I modify this file, sometimes it will trigger the reload of the whole project, but sometimes it is normal"],"labels":["i: question","area: downstream"]},{"title":"[Bug]: Source maps now outputs helpers names additionally to input source names","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n```javascript\r\nasync function myfunc() {\r\n  return await someAsyncCall();\r\n}\r\n``` \r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n```json\r\n{\r\n    \"presets\": [\"env\"],\r\n    \"sourceMap\": true\r\n}\r\n```\r\n\r\n### Current and expected behavior\r\n\r\nI noticed that with v7.21.0 the result of sourcempas changed. Specifically the names tracked. Given this:\r\n\r\n```javascript\r\nconst result = babel.transform(src, opts);\r\nconsole.log(result.map.names);\r\n```\r\n\r\nwith the given input code I get 155 entries in `result.map.names`. A few of them being: `_regeneratorRuntime`, `Op`, `Object`, `prototype`, `hasOwn`, ...\r\n\r\nBefore this update I would only get the relevant names from the input code, in this case specifically: `myfunc`, `someAsyncCall`.\r\n\r\n### Environment\r\n\r\n  System:\r\n    OS: macOS 13.3.1\r\n  Binaries:\r\n    Node: 16.18.0 - \/usr\/local\/bin\/node\r\n    Yarn: 1.22.19 - \/opt\/homebrew\/bin\/yarn\r\n    npm: 8.19.2 - \/usr\/local\/bin\/npm\r\n  npmPackages:\r\n    @babel\/core: ^7.21.5 => 7.21.5 \r\n    @babel\/preset-env: ^7.21.5 => 7.21.5 \r\n    @babel\/standalone: ^7.21.7 => 7.21.7\r\n\r\n### Possible solution\r\n\r\nI might be missing more context but looking at the changelog I didn't notice anything that would highlight this change. I don't necessarily have a good recommendation but if this change was intentional it could be an opt-in via config rather than opt-out.\r\n\r\n**EDIT:** On a second look maybe this https:\/\/github.com\/babel\/babel\/pull\/15022 change?\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @Gabri3l! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","@liuxingbaoyu just curious do you think your change in https:\/\/github.com\/babel\/babel\/pull\/15022 might have caused this?","Yes, this should be the change introduced in this PR. But I'm not sure if this is a bug, is this causing any problems?","With this, it inflates the bundle size up to 70% especially if you have multiple plugins. Not sure this was intentional, I had to revert back to a previous version because the current bundle size is not sustainable for our use case.","@Gabri3l The source map file `*.map` won't be downloaded to the browser unless users open the developer tools. They are meant to help developers, for example they can map call stacks from production code to source code. I am not sure how larger `*.map` file will impact end users.","Yes you're definitely right! For our use case we need the source map as well and I just wanted to make sure this change was intentional since it's a significant size change. I'm not sure it's helpful to have plugins variables as part of the source map, any specific reason why they were added?\n\nI currently have to hack around it and I didn't see this in any change log (I might have missed it though), when I was looking for the reason for this.","I have run into the same problem via a different route. Identifiers added to AST programmatically with no source location can end up in `names`.\r\n\r\nThis does appear to me to be a bug, for 2 reasons:\r\n\r\n1. A source map is meant to map to the *source*, so it doesn't make sense to reference names which are not present in the source.\r\n2. It's inconsistent. Sometimes variables appear in `names`, sometimes they don't.\r\n\r\nA simple demonstration of the inconsistency:\r\n\r\n```js\r\nconst {parse} = require('@babel\/parser'),\r\n  generate = require('@babel\/generator').default;\r\n\r\nconst ast = parse('function foo() {}', {sourceFilename: '\/foo.js'});\r\n\r\nconst programStatements = ast.program.body;\r\nast.program.body.unshift({\r\n  type: 'VariableDeclaration',\r\n  kind: 'let',\r\n  declarations: [{\r\n    type: 'VariableDeclarator',\r\n    id: { type: 'Identifier', name: '_x' },\r\n    init: null\r\n  }]\r\n});\r\n\r\nconst {code: code1, map: map1} = generate(ast, {sourceMaps: true});\r\n\r\nconsole.log(code1);\r\n\/\/ -> let _x; function foo() {}\r\nconsole.log(map1.names);\r\n\/\/ -> ['foo']\r\n\/\/ `_x` is NOT in `names`\r\n\r\nconst fnStatements = programStatements[1].body.body;\r\nfnStatements.push({\r\n  type: 'ExpressionStatement',\r\n  expression: { type: 'Identifier', name: '_x' }\r\n});\r\n\r\nconsole.log(code2);\r\n\/\/ -> let _x; function foo() { _x; }\r\nconsole.log(map2.names);\r\n\/\/ -> ['foo', '_x']\r\n\/\/ Now `_x` IS in `names`\r\n```\r\n\r\nThis was introduced between 7.20.14 and 7.21.0, so #15022 does seem to be the most obvious cause.","Sorry forgot this.\r\n\r\n> I'm not sure it's helpful to have plugins variables as part of the source map, any specific reason why they were added?\r\n\r\nTo be honest, there's no particularly strong need to add them. One possible reason is https:\/\/github.com\/babel\/babel\/issues\/14907, which can make debugging easier. In this case I just thought more would be better than less, does this information bother you?\r\n\r\nAdditionally this information may be helpful to `js-debug`. (vs code)\r\n\r\n> A source map is meant to map to the source, so it doesn't make sense to reference names which are not present in the source.\r\n\r\nWell, I guess you might be right. But unfortunately source maps are crude and difficult to standardize, and many times we have to guess and do things outside of the standard.\r\nhttps:\/\/github.com\/babel\/babel\/pull\/15370#issuecomment-1406049596\r\nHere is an even more striking example. We completely agree that this is not a good solution, but it may be the only way we can do it. \ud83e\udd26\u200d\u2642\ufe0f\r\n\r\n> It's inconsistent. Sometimes variables appear in names, sometimes they don't.\r\n\r\nThis may be a bug, thank you for finding it!\r\n\r\n","OK cool. I see it's complicated!\r\n\r\nOne small thing: It might be helpful for people to find this issue to correct the typo in the issue title - \"Sourcemaps\" not \"Sourcempas\".","@liuxingbaoyu thank you for the additional info, do you have a recommendation then if I want to manually extract only names from the source and not the helpers. For my use case I really need to filter the helper ones out and I put together a custom plugin but wanted to make sure I do it correctly.","Sorry I didn't think of a good way.\r\nCan you provide an example?\r\nFor example\r\n[sourcemap](https:\/\/evanw.github.io\/source-map-visualization\/#Mjk1AHZhciBUZXN0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAidXNlIHN0cmljdCI7CgogIGZ1bmN0aW9uIFRlc3QoKSB7CiAgICBiYWJlbEhlbHBlcnMuY2xhc3NDYWxsQ2hlY2sodGhpcywgVGVzdCk7CiAgfQogIGJhYmVsSGVscGVycy5jcmVhdGVDbGFzcyhUZXN0LCBbewogICAga2V5OiAiYmFyIiwKICAgIGdldDogZnVuY3Rpb24gKCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoIndvdyIpOwogICAgfQogIH1dKTsKICByZXR1cm4gVGVzdDsKfSgpOwp2YXIgdGVzdCA9IG5ldyBUZXN0KCk7CnRlc3QuYmFyOwo2NTEAewogICJ2ZXJzaW9uIjogMywKICAibmFtZXMiOiBbCiAgICAiVGVzdCIsCiAgICAiYmFiZWxIZWxwZXJzIiwKICAgICJjbGFzc0NhbGxDaGVjayIsCiAgICAiY3JlYXRlQ2xhc3MiLAogICAgImtleSIsCiAgICAiZ2V0IiwKICAgICJFcnJvciIsCiAgICAidGVzdCIsCiAgICAiYmFyIgogIF0sCiAgInNvdXJjZXMiOiBbCiAgICAic291cmNlLW1hcHMvY2xhc3MvaW5wdXQuanMiCiAgXSwKICAic291cmNlc0NvbnRlbnQiOiBbCiAgICAiY2xhc3MgVGVzdCB7XG4gIGdldCBiYXIoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwid293XCIpO1xuICB9XG59XG5cbnZhciB0ZXN0ID0gbmV3IFRlc3Q7XG50ZXN0LmJhcjsiCiAgXSwKICAibWFwcGluZ3MiOiAiSUFBTUEsSUFBSTtFQUFBOztFQUFBLFNBQUFBLEtBQUE7SUFBQUMsWUFBQSxDQUFBQyxjQUFBLE9BQUFGLElBQUE7RUFBQTtFQUFBQyxZQUFBLENBQUFFLFdBQUEsQ0FBQUgsSUFBQTtJQUFBSSxHQUFBO0lBQUFDLEdBQUEsRUFDUixTQUFBQSxDQUFBLEVBQVU7TUFDUixNQUFNLElBQUlDLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDeEI7RUFBQztFQUFBLE9BQUFOLElBQUE7QUFBQTtBQUdILElBQUlPLElBQUksR0FBRyxJQUFJUCxJQUFJLENBQUQsQ0FBQztBQUNuQk8sSUFBSSxDQUFDQyxHQUFHIgp9)","Here's a possible example.\r\nWe can notice that the helper name points to a segment that is not an identifier.\r\nMaybe you could try taking advantage of this and check if a segment with an identifier name points to a valid identifier.\r\nI admit this may not be perfect, but that's all I can think of.\ud83e\udd26\u200d\u2642\ufe0f\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/30521560\/de0401c6-0144-4d02-8258-dc1d712510d8)\r\n\r\nvs\r\n\r\n![image](https:\/\/github.com\/babel\/babel\/assets\/30521560\/8b441216-ad84-4057-9467-0aca71a2928a)\r\n\r\n\r\n[sourcemap](https:\/\/evanw.github.io\/source-map-visualization\/#NDM4ACJ1c2Ugc3RyaWN0IjsKCnZhciBfb25lID0gYmFiZWxIZWxwZXJzLmludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJvbmUiKSk7CnZhciBfdHdvID0gcmVxdWlyZSgidHdvIik7CnZhciBfdGhyZWUgPSByZXF1aXJlKCJ0aHJlZSIpOwp2YXIgYU5hbWVzcGFjZSA9IGJhYmVsSGVscGVycy5pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoImZvdXIiKSk7CmNvbnNvbGUubG9nKF9vbmUuZGVmYXVsdCk7CmNvbnNvbGUubG9nKF90d28uYU5hbWVkKTsKY29uc29sZS5sb2coX3RocmVlLm9yaWcpOwpjb25zb2xlLmxvZyhhTmFtZXNwYWNlKTsKY29uc29sZS5sb2coKDAsIF9vbmUuZGVmYXVsdCkoKSk7CmNvbnNvbGUubG9nKCgwLCBfdHdvLmFOYW1lZCkoKSk7CmNvbnNvbGUubG9nKCgwLCBfdGhyZWUub3JpZykoKSk7CmNvbnNvbGUubG9nKGFOYW1lc3BhY2UoKSk7CjEyNDYAewogICJ2ZXJzaW9uIjogMywKICAibmFtZXMiOiBbCiAgICAiX29uZSIsCiAgICAiYmFiZWxIZWxwZXJzIiwKICAgICJpbnRlcm9wUmVxdWlyZURlZmF1bHQiLAogICAgInJlcXVpcmUiLAogICAgIl90d28iLAogICAgIl90aHJlZSIsCiAgICAiYU5hbWVzcGFjZSIsCiAgICAiaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsCiAgICAiY29uc29sZSIsCiAgICAibG9nIiwKICAgICJhRGVmYXVsdCIsCiAgICAiYU5hbWVkIiwKICAgICJhbkFsaWFzZWQiCiAgXSwKICAic291cmNlcyI6IFsKICAgICJtaXNjL3JlZmVyZW5jZS1zb3VyY2UtbWFwL2lucHV0Lm1qcyIKICBdLAogICJzb3VyY2VzQ29udGVudCI6IFsKICAgICJpbXBvcnQgYURlZmF1bHQgZnJvbSBcIm9uZVwiO1xuaW1wb3J0IHsgYU5hbWVkIH0gZnJvbSBcInR3b1wiO1xuaW1wb3J0IHsgb3JpZyBhcyBhbkFsaWFzZWQgfSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCAqIGFzIGFOYW1lc3BhY2UgZnJvbSBcImZvdXJcIjtcblxuY29uc29sZS5sb2coYURlZmF1bHQpO1xuY29uc29sZS5sb2coYU5hbWVkKTtcbmNvbnNvbGUubG9nKGFuQWxpYXNlZCk7XG5jb25zb2xlLmxvZyhhTmFtZXNwYWNlKTtcblxuY29uc29sZS5sb2coYURlZmF1bHQoKSk7XG5jb25zb2xlLmxvZyhhTmFtZWQoKSk7XG5jb25zb2xlLmxvZyhhbkFsaWFzZWQoKSk7XG5jb25zb2xlLmxvZyhhTmFtZXNwYWNlKCkpOyIKICBdLAogICJtYXBwaW5ncyI6ICI7O0FBQUEsSUFBQUEsSUFBQSxHQUFBQyxZQUFBLENBQUFDLHFCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxJQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxNQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxVQUFBLEdBQUFMLFlBQUEsQ0FBQU0sc0JBQUEsQ0FBQUosT0FBQTtBQUVBSyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsWUFBUSxDQUFDO0FBQ3JCRixPQUFPLENBQUNDLEdBQUcsQ0FBQ0UsV0FBTSxDQUFDO0FBQ25CSCxPQUFPLENBQUNDLEdBQUcsQ0FBQ0csV0FBUyxDQUFDO0FBQ3RCSixPQUFPLENBQUNDLEdBQUcsQ0FBQ0gsVUFBVSxDQUFDO0FBRXZCRSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxJQUFBQyxZQUFRLEVBQUMsQ0FBQyxDQUFDO0FBQ3ZCRixPQUFPLENBQUNDLEdBQUcsQ0FBQyxJQUFBRSxXQUFNLEVBQUMsQ0FBQyxDQUFDO0FBQ3JCSCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxJQUFBRyxXQUFTLEVBQUMsQ0FBQyxDQUFDO0FBQ3hCSixPQUFPLENBQUNDLEdBQUcsQ0FBQ0gsVUFBVSxDQUFDLENBQUMsQ0FBQyIKfQ==)"],"labels":["i: question"]},{"title":"[Bug]: [@babel\/code-frame] opts.message does not work for multiple lines with start column equal to 0","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nbabel-loader (webpack)\n\n### Input code\n\n```js\r\nconst rawLines = [\r\n  \"class Foo {\",\r\n  \"  constructor() {\",\r\n  \"    console.log(arguments);\",\r\n  \"  }\",\r\n  \"};\",\r\n].join(\"\\n\");\r\n\r\ncodeFrameColumns(\r\n  rawLines,\r\n  {\r\n    \/\/ It works if column > 0, but it doesn't work when column = 0\r\n    start: { line: 2, column: 0 },\r\n    end: { line: 4, column: 3 },\r\n  },\r\n  {\r\n    message: \"something about the constructor body\",\r\n  },\r\n),\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\n\/\/ current\r\n```js\r\n[\r\n  \"  1 | class Foo {\",\r\n  \"> 2 |   constructor() {\",\r\n  \"> 3 |     console.log(arguments);\",\r\n  \"> 4 |   }\",\r\n  \"  5 | };\",\r\n].join(\"\\n\")\r\n```\r\n\r\n\/\/ expected\r\n```js\r\n[\r\n  \"  1 | class Foo {\",\r\n  \"> 2 |   constructor() {\",\r\n  \"    | ^^^^^^^^^^^^^^^^^\",\r\n  \"> 3 |     console.log(arguments);\",\r\n  \"    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\",\r\n  \"> 4 |   }\",\r\n  \"    | ^^^ something about the constructor body\",\r\n  \"  5 | };\",\r\n].join(\"\\n\")\r\n```\n\n### Environment\n\n\r\n  System:\r\n    OS: macOS 13.1\r\n  Binaries:\r\n    Node: 16.19.1 - ~\/.nvm\/versions\/node\/v16.19.1\/bin\/node\r\n    Yarn: 3.5.0 - ~\/.nvm\/versions\/node\/v16.19.1\/bin\/yarn\r\n    npm: 8.19.3 - ~\/.nvm\/versions\/node\/v16.19.1\/bin\/npm\r\n  Monorepos:\r\n    Yarn Workspaces: 3.5.0\r\n  npmPackages:\r\n    @babel\/cli: ^7.21.0 => 7.21.0 \r\n    @babel\/core: ^7.21.0 => 7.21.0 \r\n    @babel\/eslint-config-internal: workspace:^ => 7.20.13 \r\n    @babel\/eslint-parser: workspace:^ => 7.21.3 \r\n    @babel\/eslint-plugin-development: workspace:^ => 7.19.1 \r\n    @babel\/eslint-plugin-development-internal: workspace:^ => 7.19.1 \r\n    @babel\/plugin-proposal-dynamic-import: ^7.18.6 => 7.18.6 \r\n    @babel\/plugin-proposal-export-namespace-from: ^7.18.9 => 7.18.9 \r\n    @babel\/plugin-proposal-object-rest-spread: ^7.20.7 => 7.20.7 \r\n    @babel\/plugin-transform-modules-commonjs: ^7.21.2 => 7.21.2 \r\n    @babel\/plugin-transform-runtime: ^7.21.0 => 7.21.0 \r\n    @babel\/preset-env: ^7.20.2 => 7.20.2 \r\n    @babel\/preset-typescript: ^7.21.0 => 7.21.0 \r\n    @babel\/runtime: ^7.21.0 => 7.21.0 \r\n    babel-plugin-transform-charcodes: ^0.2.0 => 0.2.0 \r\n    eslint: ^8.22.0 => 8.22.0 \r\n    jest: ^29.0.1 => 29.0.1 \r\n\n\n### Possible solution\n\nMaybe here should consider whether loc.start.column is equal to 0\r\n\/\/ packages\/babel-code-frame\/src\/index.ts#L104\r\n```diff\r\n-       if (!startColumn) {\r\n+       if (!startColumn && loc.start.column !== 0) {\r\n```\n\n### Additional context\n\n_No response_","comments":["Hey @hanzebang! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","The `start` and `end` forms a _closed_ interval of the actual line-column position that should be highlighted by `^`. In your case, you should pass `start: { line: 2, column: 1 }` because line 2 column 1 holds the whitespace U+0020. Actually we do have such a test case:\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/978ea318f26a2f75f75736c791347879f5d6a59e\/packages\/babel-code-frame\/test\/index.js#L130-L168\r\n\r\nThe line 2 column 0 in this case is not a well-defined location: If it is a location, does it hold the line break LF\/CR? If it is not then it shouldn't be in the `start` option. Even we may agree that it holds a line break, we can't really highlight such character anyway. Moreover, supporting `column: 0` will further confuse users as the `start` and `end` now seems to form a left-open-right-closed `(]` interval. Therefore, I suggest we print a warning when `column` is `0`, in this case, you should use `column: 1` if there are indeed contents in this line, or fallback to the end of the previous line.\r\n\r\nI am aware that the `start` and `end` here is not consistent with the location information generated by the `@babel\/parser`. This is unfortunate but I don't think we have compelling reasons to break current `code-frame` behaviour. At this moment I think it is more a doc issue and we should clarify that `start` and `end` forms a closed interval in the docs.","+1 for warning, or maybe even \"warn and replace with `1`\".","I think the main issue here is that the message is not displaying properly, and I tend to maintain the current logic and fix the message display.\r\n\r\nupdate:\r\nfix\r\n```\r\n  something about the constructor body\r\n        1 | class Foo {\r\n      > 2 |   constructor() {\r\n      > 3 |     console.log(arguments);\r\n      > 4 |   }\r\n        5 | };\r\n```\r\ncurrent\r\n```\r\n        1 | class Foo {\r\n      > 2 |   constructor() {\r\n      > 3 |     console.log(arguments);\r\n      > 4 |   }\r\n        5 | };\r\n```","> I am aware that the `start` and `end` here is not consistent with the location information generated by the `@babel\/parser`. This is unfortunate but I don't think we have compelling reasons to break current `code-frame` behaviour. At this moment I think it is more a doc issue and we should clarify that `start` and `end` forms a closed interval in the docs.\r\n\r\nThat's the point. (Apologies for the misunderstanding caused by using inappropriate examples)\r\nWhen I want to use `@babel\/parser` to get `ImportDeclaration`, for example:\r\n```js\r\nimport {\r\n  A\r\n} from '.\/mypath'\r\n```\r\nI got the SourceLocation:\r\n```js\r\n{\r\n  start: Position { line: 1, column: 0, index: 0 },\r\n  end: Position { line: 3, column: 17, index: 30 },\r\n  filename: undefined,\r\n  identifierName: undefined\r\n}\r\n```\r\nThen I want to use `code-frame` to display some information here, at this time I lost the information.\r\n\r\nI don't think it is very friendly that `@babel\/code-frame` and `@babel\/parser` are not seamlessly connected. \r\nI just want to solve this problem. (Sorry again for probably providing a less than adequate solution.)\r\nMaybe @liuxingbaoyu's solution is better.","Sorry, I made a mistake earlier.\r\nNow I'm leaning toward us adding an option to allow using `@babel\/parser` generated positional information."],"labels":["i: bug"]},{"title":"fix: Wrong order of initialization in TS class constructor","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #15530, Fixes #15268 <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          | \u221a\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | \u221a\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nThe cause of the problem is that both the ts plugin and the class plugin insert the initialization statement after `super()`, which will cause the initialization order to be reversed from the order in which the plugin is run.\r\nThis PR makes the behavior to prefer inserting after the last inserted statement.\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15583\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/54357\/","Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/54317\/","It's not a trivial PR, can you summarize the change in the PR description? It well help reviewers as well as any new contributors when they are tracking a historical PR.","Ok, I tried to explain it in the description.","> How can this fix the coordination issue between the TS plugin and the class features plugin, if only the class features plugin uses TAG_LAST_INJECTED and the TS plugin doesn't?\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/eb622755bee2dca62d2f1f792a4e918b26c58529\/packages\/babel-plugin-transform-typescript\/src\/index.ts#L233\r\nThanks to our very nice package structure, they are using the same helper injection initialization statements. \ud83d\ude03","Note that when using TS with `useDefineForClassFields` and targeting a modern ES version TypeScript first initialized class fields and then parameter properties: https:\/\/github.com\/microsoft\/TypeScript\/issues\/45995\r\n\r\nMaybe we should keep this PR on hold until the TS team decides what is the expected behavior?"],"labels":["PR: Bug Fix :bug:","area: typescript","Spec: Class Fields"]},{"title":"[Bug]: Weird behavior of path.remove method","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n```js\r\nconst { default: generate } = require('@babel\/generator')\r\nconst parser = require('@babel\/parser')\r\nconst traverse = require('@babel\/traverse').default\r\nconst t = require('@babel\/types')\r\n\r\nlet ast = parser.parse(`\r\n\/\/ scope 1\r\nvar a = 1;\r\n\r\nfunction b() {\r\n  \/\/ scope 2\r\n  var c = a;\r\n  c;\r\n}\r\n`)\r\n\r\ntraverse(ast, {\r\n  VariableDeclarator(path) {\r\n    const { node, scope } = path\r\n    if (t.isIdentifier(node.init)) {\r\n      scope.rename(node.id.name, node.init.name)\r\n      console.log(scope.getBinding(node.init.name)) \/\/ a binding from scope 2\r\n      path.remove()\r\n      console.log(scope.getBinding(node.init.name)) \r\n      \/\/ i think should return binding from scope 1, but actually it is undefined\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n```js\r\nast = parser.parse(`\r\nvar a = {};\r\na.a=2,a.b=3,a.c=4;\r\n`)\r\n\r\ntraverse(ast, {\r\n  enter(path) {\r\n    const { node, scope } = path\r\n    const binding = scope.getBinding('a')\r\n    for (const path of binding.referencePaths) {\r\n      path.parentPath.parentPath.remove()\r\n    }\r\n    path.stop()\r\n  }\r\n})\r\n\r\nconsole.log(generate(ast).code)\r\n\/\/ result:\r\n\/\/ var a = {};\r\n\/\/ a.c = 4; <--- i think this shouldnt come up\r\n```\r\n\r\n```js\r\nast = parser.parse(`\r\nvar b = function() {\r\n  return \"\".replace(\"abc\", \"\").replace(\"abc\", \"\")\r\n}\r\n`)\r\n\r\ntraverse(ast, {\r\n  StringLiteral(path) {\r\n    const { node, scope } = path\r\n    if (node.value === 'abc') {\r\n      const statement = path.getStatementParent()\r\n      console.log(statement.toString()) \/\/ <---- called twice, i think should only once\r\n      statement.remove()\r\n    }\r\n  }\r\n})\r\n\r\nconsole.log(generate(ast).code)\r\n\/\/ result: '' (empty)\r\n\/\/ my expected: `var b = function () {};`\r\n\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nsee code\r\n\r\n### Environment\r\n\r\n  System:\r\n    OS: Windows 10 10.0.19044\r\n  Binaries:\r\n    Node: 18.14.2 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.19 - ~\\AppData\\Roaming\\npm\\yarn.CMD  \r\n    npm: 9.5.0 - C:\\Program Files\\nodejs\\npm.CMD    \r\n  npmPackages:\r\n    @babel\/core: ^7.21.4 => 7.21.4\r\n    @babel\/generator: ^7.21.4 => 7.21.4\r\n    @babel\/parser: ^7.21.4 => 7.21.4\r\n    @babel\/traverse: ^7.21.4 => 7.21.4\r\n    @babel\/types: ^7.21.4 => 7.21.4\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @821938089! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","For performance reasons, the path manipulation methods do not update scope info.\r\nFor example 1 and 2, if you want to ensure that the scope information after `path.remove()` is up to date, you can call `scope.crawl()` after the path is removed.\r\n\r\nFor example 3, a removed path does not populate the removed flag to its descendants, so the other string literal `abc`, though its ancestry gets removed, is still in the visit queue and therefore visited.\r\n\r\nFor these reasons, we don't recommend removing ancestries, instead, you should remove current path based on a certain user-specific pattern. For example, the example 3 can be reimplemented as:\r\n\r\n```js\r\nast = parser.parse(`\r\nvar b = function() {\r\n  return \"\".replace(\"abc\", \"\").replace(\"abc\", \"\")\r\n}\r\n`)\r\n\r\n\/\/ check if `\"abc\"` is included in an expression statement\r\n\/\/ if so, remove the whole statement\r\ntraverse(ast, {\r\n  ExpressionStatement(path) {\r\n    path.traverse({\r\n      StringLiteral(subPath) {\r\n         const { node, scope } = subPath\r\n         if (node.value === 'abc') {\r\n           console.log(path.toString())\r\n           subPath.stop()\r\n           path.remove()\r\n         }\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\nconsole.log(generate(ast).code)\r\n``` ","Hi, thanks for the detailed reply. \r\n\r\nFor examples 1 and 2, I used `scope.crawl()` after path remove and it didn't work, have you actually tested it?\r\n\r\nFor example 3, I only want to remove the statement closest to the string 123, your implementation will remove very much code in practice and it doesn't actually work in this example.","> For examples 1 and 2, I used scope.crawl() after path remove and it didn't work, have you actually tested it?\r\n\r\nHmm, example 1 is actually a bug. When `path` is removed, it calls `scope.removeBinding(\"a\")`, which incorrectly removed the binding `a` defined in outer scope.\r\n\r\nFor example 2, the `referencedPaths` are no longer valid after `a.b=3` is deleted, because now the parent of `a.c = 4` is no longer a sequence expression, instead it is an expression statement.\r\n\r\n```js\r\nconst { default: generate } = require(\"@babel\/generator\");\r\nconst parser = require(\"@babel\/parser\");\r\nconst traverse = require(\"@babel\/traverse\").default;\r\nconst t = require(\"@babel\/types\");\r\n\r\nlet ast = parser.parse(`\r\nvar a = {};\r\na.b=1,a.c=4;\r\n`);\r\n\r\ntraverse(ast, {\r\n  enter(path) {\r\n    const { node, scope } = path;\r\n    for (\r\n      let rps = scope.getBinding(\"a\").referencePaths;\r\n      rps.length > 0;\r\n      rps = scope.getBinding(\"a\").referencePaths\r\n    ) {\r\n      const p = rps[0];\r\n      if (p.parentPath.isAssignmentExpression()) {\r\n        p.parentPath.remove();\r\n      } else {\r\n        p.parentPath.parentPath.remove();\r\n      }\r\n      scope.crawl();\r\n    }\r\n    path.stop();\r\n  },\r\n});\r\n\r\nconsole.log(generate(ast).code);\r\n```\r\n\r\n> remove the statement closest to the string 123\r\n\r\nYou can skip any statement in the sub traverse so when you see the string literal, the `path` must be the closest statement parent.\r\n\r\n```js\r\npath.traverse({\r\n  Statement(path) {\r\n    path.skip();\r\n  },\r\n  StringLiteral(subPath) {},\r\n});\r\n```\r\n\r\nMay I ask what is your actual use case? What's the context of these examples?","These examples are some of the problems I found when reverting the obfuscated js code.\r\n\r\nFor example 3, I want to remove the randomly inserted anti-debugging code in the js code. The more obvious features of this code are strings such as `debugger`, `while (true) {}`, and I want to find such strings by finding them first and then finding the statement.\r\n\r\nIt is possible that the statements are nested, wouldn't this cause the strings to be skipped?","> The more obvious features of this code are strings such as debugger, while (true) {}, and I want to find such strings by finding them first and then finding the statement.\r\n\r\nDe-obfuscating js code is sorta uncharted territory so brace for potential bugs. If you insist on searching the small pattern, then you can add the marked statement in a set, and remove them all in the `Program: { exit() {} }` listener, note that this approach still does not guarantee that removing one path will not invalidate the others, like you have seen in the sequence expression example.\r\n\r\n> It is possible that the statements are nested, wouldn't this cause the strings to be skipped?\r\n\r\nThe nested statements are only skipped in the sub traversal, but they will be visited eventually by the root traversal."],"labels":["i: bug"]},{"title":"[Bug]: Declare fields and class-properties are incompatible","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### Abstract issue:\r\n\r\nWhen using declare fields and class properties together, I can't make Babel work while TSC works.\r\n\r\n### How are you using Babel?\r\n\r\nBabel CLI directly without any third party packages.\r\n\r\n### Input code\r\n\r\nRepository: https:\/\/github.com\/mxschmitt\/declare-fields-class-properties-compatiblity\r\n\r\nSteps:\r\n1. Clone the repo\r\n2. npm i\r\n3. npm run build\r\n\r\nObserve two files: `out-babel.js` and `out-tsc.js`.\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nSee the repo with a minimal repro.\r\n\r\n### Current and expected behavior\r\n\r\nRunning `out-tsc.js` works fine but `out-babel.js` won't.\r\n\r\nIf I follow the recommendation to put `@babel\/plugin-proposal-class-properties` after `'@babel\/plugin-transform-typescript'` then the constructor order is messed up -> running the out-babel.js script throws.\r\n\r\nIf I put class-properties plugin before transform-typescript plugin, constructor order is ok, but declare fields won't work. -> build process fails and throws the following: https:\/\/github.com\/babel\/babel\/blob\/2e2b7e838008f6e3c71497cf4604f30af7de5cd0\/packages\/babel-helper-create-class-features-plugin\/src\/typescript.ts#L10\r\n\r\n### Environment\r\n\r\n  \"dependencies\": {\r\n    \"@babel\/cli\": \"^7.21.0\",\r\n    \"@babel\/core\": \"^7.21.3\",\r\n    \"@babel\/plugin-proposal-class-properties\": \"^7.18.6\",\r\n    \"@babel\/plugin-transform-react-jsx\": \"^7.21.0\",\r\n    \"@babel\/preset-env\": \"^7.20.2\",\r\n    \"@babel\/preset-react\": \"^7.18.6\",\r\n    \"@babel\/preset-typescript\": \"^7.21.0\",\r\n    \"typescript\": \"^5.0.2\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types\/node\": \"^18.15.11\"\r\n  }\r\n\r\nNode: v18.14.0\r\nOS: macOS 13.3\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @mxschmitt! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: needs triage"]},{"title":"[Bug]: Wrong prototype for functions using `function.sent`","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\nREPL: https:\/\/babeljs.io\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=GYVwdgxgLglg9mABAKigUwM5QBQEpEDeAUIogJ4xoA2AJoqJLAgHQZphQDcRAvkelmYAHAE5wo4skLTNgcOIgC8iAIxEAbgEMRiAObsliATlxEYwRNgCE-sLPn5ipKAAsxAd0Rg0ngKIixEWwAIgADW3s4UK9xejhwGmDTHiA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=&prettier=false&targets=&version=7.21.3&externalPlugins=%40babel%2Fplugin-proposal-function-sent%407.18.6&assumptions=%7B%7D\r\n\r\n```js\r\nfunction *test() {\r\n  yield function.sent;\r\n}\r\ntest.prototype.foo = 1\r\nvar gen = test()\r\nif (!gen.foo) {\r\n  throw new Error(\"`gen.foo` not found\")\r\n}\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nCurrent behavior: throws an error with message `` `gen.foo` not found ``\r\nExpected behavior: [doesn't throw](https:\/\/babeljs.io\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=GYVwdgxgLglg9mABAKigUwM5QBQEpEDeAUIogJ4xoA2AJgNxEC-R6WAdAA4BOcUvZHNG2Bw4iALyIAjEQBuAQy6IA5miSTWOXERjBE2AISqww0fmKkoACx4B3RGDT2Aolx5dsAIgAGx03G8HXkQRcBpPbUYgA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=&prettier=false&targets=&version=7.21.3&externalPlugins=%40babel%2Fplugin-proposal-function-sent%407.18.6&assumptions=%7B%7D)\n\n### Environment\n\n- Babel: v7.21.3\r\n- Whatever else is the case for the online REPL\n\n### Possible solution\n\nHere's two possible solutions:\r\n\r\n1. Add in an extra `test.prototype = _test.prototype` after the function (easiest, but doesn't tree-shake)\r\n2. Keep `test` as a generator and instead of returning the iterator directly, returning `yield* _test.apply(this, arguments)` (tree shakes, but adds some extra overhead)\n\n### Additional context\n\n_No response_","comments":["Hey @dead-claudia! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: needs triage"]},{"title":"The generated code for `function.sent` seems excessive","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nI'm looking through the generated code for `function.sent`, and it's generating a lot of unnecessary functions that'd get lazily compiled anyways (and thus wouldn't benefit anything).\n\n### Describe the solution you'd like\n\nLet's take this relatively simple source:\r\n\r\n```js\r\nexport function *foo() {\r\n  console.log(\"1\", function.sent)\r\n  yield\r\n  console.log(\"2\", function.sent)\r\n}\r\n```\r\n\r\nHere's how it's currently compiled as of v7.21.3:\r\n\r\n```js\r\nfunction _skipFirstGeneratorNext(fn) { return function () { var it = fn.apply(this, arguments); it.next(); return it; }; }\r\nexport function foo() {\r\n  return _foo.apply(this, arguments);\r\n}\r\nfunction _foo() {\r\n  _foo = _skipFirstGeneratorNext(function* () {\r\n    let _functionSent = yield;\r\n    console.log(\"1\", _functionSent);\r\n    _functionSent = yield;\r\n    console.log(\"2\", _functionSent);\r\n  });\r\n  return _foo.apply(this, arguments);\r\n}\r\n```\r\n\r\nHere's how I feel it *should* be compiled:\r\n\r\n```js\r\nfunction _skipFirstGeneratorNext(g) { g.next(); return g; }\r\nexport function foo() {\r\n  return _skipFirstGeneratorNext(_foo.apply(this, arguments));\r\n}\r\nfunction *_foo() {\r\n  let _functionSent = yield;\r\n  console.log(\"1\", _functionSent);\r\n  _functionSent = yield;\r\n  console.log(\"2\", _functionSent);\r\n}\r\n```\r\n\r\nNote the following:\r\n\r\n1. No functions generated at runtime. (This dramatically reduces the runtime overhead.)\r\n2. Only one extra function needed per transpiled generator, reducing code size.\r\n3. No references to immutable functions, making inlining analysis simpler.\r\n\r\nThe helper's small enough, it might even be worth eliminating entirely for only a very slight increase in size (we're talking single digits in toy examples, wouldn't even be noticed in the real world) compared to both a simpler implementation and a possible mild increase in perf-sensitive code (due to the `.next()` call being made monomorphic):\r\n\r\n```js\r\nexport function foo() {\r\n  let g = _foo.apply(this, arguments);\r\n  g.next();\r\n  return g;\r\n}\r\nfunction *_foo() {\r\n  let _functionSent = yield;\r\n  console.log(\"1\", _functionSent);\r\n  _functionSent = yield;\r\n  console.log(\"2\", _functionSent);\r\n}\r\n```\r\n\r\nHere are the tradeoffs with that alternative approach:\r\n\r\n- Slight increase in size that is noticeable pre-compression but nearly washes away post-compression.\r\n- Provides a slightly simpler transpiler implementation.\r\n- In perf-sensitive code, the `.next()` call becomes obviously monomorphic, speeding up construction very slightly. (I doubt this would show up outside microbenchmarks, though.) Once engines can monomorphize calls post-inlining (I don't believe any can currently), this very slight perf advantage won't exist anymore.\r\n\r\n<details>\r\n<summary>Longer example with 5 generators<\/summary>\r\n\r\nThis is written to be a little less academic and a little more real-world. You could imagine this being part of a streaming micro-framework built on top of generators. I provided gzip results of each as well to give an idea how it compresses.\r\n\r\nSource:\r\n\r\n- Minified: 658 bytes\r\n- Min+gzip: 261 bytes\r\n\r\n```js\r\nexport function *echo() {\r\n  while (true) {\r\n    yield function.sent\r\n  }\r\n}\r\nexport function *map(iter, f) {\r\n  let success = true\r\n  try {\r\n    while (true) {\r\n      f(iter.next(function.sent))\r\n      yield\r\n    }\r\n  } catch (e) {\r\n    success = false\r\n    iter.throw(e)\r\n  } finally {\r\n    if (success) iter.return()\r\n  }\r\n}\r\nexport function *recover(iter, f) {\r\n  let success = true\r\n  try {\r\n    let sent = function.sent\r\n    while (true) {\r\n      iter.next(sent)\r\n      try {\r\n        sent = yield\r\n      } catch (e) {\r\n        sent = f(e)\r\n      }\r\n    }\r\n  } catch (e) {\r\n    success = false\r\n    iter.throw(e)\r\n  } finally {\r\n    if (success) iter.return()\r\n  }\r\n}\r\nexport function *makeObserver(onNext, onThrow, onReturn) {\r\n  let success = true\r\n  try {\r\n    while (true) {\r\n      onNext(function.sent);\r\n      yield;\r\n    }\r\n  } catch (e) {\r\n    success = false\r\n    onThrow(e)\r\n  } finally {\r\n    if (success) onReturn()\r\n  }\r\n}\r\nexport function *throttle(iter, ms) {\r\n  let timer\r\n  let success = true\r\n  try {\r\n    try {\r\n      while (true) {\r\n        let sent = function.sent\r\n        timer = setTimeout(() => iter.next(sent), ms)\r\n        yield\r\n      }\r\n    } finally {\r\n      if (timer) clearTimeout(timer)\r\n    }\r\n  } catch (e) {\r\n    success = false\r\n    iter.throw(e)\r\n  } finally {\r\n    if (timer) clearTimeout(timer)\r\n    if (success) iter.return()\r\n  }\r\n}\r\n\r\n\/\/ Hypothetical compression to 658 bytes, 261 after piping through `gzip`\r\n\/\/ Generated by translating `function.sent` to\/from `function_sent` and running\r\n\/\/ the translated form through `npx terser --module -cm`\r\nexport function*echo(){for(;;)yield function.sent}export function*map(t,e){let n=!0;try{for(;;)e(t.next(function.sent)),yield}catch(e){n=!1,t.throw(e)}finally{n&&t.return()}}export function*recover(t,e){let n=!0;try{let r=function.sent;for(;;){t.next(r);try{r=yield}catch(t){r=e(t)}}}catch(e){n=!1,t.throw(e)}finally{n&&t.return()}}export function*makeObserver(t,e,n){let r=!0;try{for(;;)t(function.sent),yield}catch(t){r=!1,e(t)}finally{r&&n()}}export function*throttle(t,e){let n,r=!0;try{try{for(;;){let r=function.sent;n=setTimeout((()=>t.next(r)),e),yield}}finally{n&&clearTimeout(n)}}catch(e){r=!1,t.throw(e)}finally{n&&clearTimeout(n),r&&t.return()}}\r\n```\r\n\r\nCurrent compilation result as of v7.21.3:\r\n\r\n- Minified: 1217 bytes (increase of 85% over source)\r\n- Min+gzip: 375 bytes (increase of 44% over source)\r\n\r\n```js\r\nfunction _skipFirstGeneratorNext(fn) { return function () { var it = fn.apply(this, arguments); it.next(); return it; }; }\r\nexport function echo() {\r\n  return _echo.apply(this, arguments);\r\n}\r\nfunction _echo() {\r\n  _echo = _skipFirstGeneratorNext(function* () {\r\n    let _functionSent = yield;\r\n    while (true) {\r\n      _functionSent = yield _functionSent;\r\n    }\r\n  });\r\n  return _echo.apply(this, arguments);\r\n}\r\nexport function map(_x, _x2) {\r\n  return _map.apply(this, arguments);\r\n}\r\nfunction _map() {\r\n  _map = _skipFirstGeneratorNext(function* (iter, f) {\r\n    let _functionSent2 = yield;\r\n    let success = true;\r\n    try {\r\n      while (true) {\r\n        f(iter.next(_functionSent2));\r\n        _functionSent2 = yield;\r\n      }\r\n    } catch (e) {\r\n      success = false;\r\n      iter.throw(e);\r\n    } finally {\r\n      if (success) iter.return();\r\n    }\r\n  });\r\n  return _map.apply(this, arguments);\r\n}\r\nexport function recover(_x3, _x4) {\r\n  return _recover.apply(this, arguments);\r\n}\r\nfunction _recover() {\r\n  _recover = _skipFirstGeneratorNext(function* (iter, f) {\r\n    let _functionSent3 = yield;\r\n    let success = true;\r\n    try {\r\n      let sent = _functionSent3;\r\n      while (true) {\r\n        iter.next(sent);\r\n        try {\r\n          sent = _functionSent3 = yield;\r\n        } catch (e) {\r\n          sent = f(e);\r\n        }\r\n      }\r\n    } catch (e) {\r\n      success = false;\r\n      iter.throw(e);\r\n    } finally {\r\n      if (success) iter.return();\r\n    }\r\n  });\r\n  return _recover.apply(this, arguments);\r\n}\r\nexport function makeObserver(_x5, _x6, _x7) {\r\n  return _makeObserver.apply(this, arguments);\r\n}\r\nfunction _makeObserver() {\r\n  _makeObserver = _skipFirstGeneratorNext(function* (onNext, onThrow, onReturn) {\r\n    let _functionSent4 = yield;\r\n    let success = true;\r\n    try {\r\n      while (true) {\r\n        onNext(_functionSent4);\r\n        _functionSent4 = yield;\r\n      }\r\n    } catch (e) {\r\n      success = false;\r\n      onThrow(e);\r\n    } finally {\r\n      if (success) onReturn();\r\n    }\r\n  });\r\n  return _makeObserver.apply(this, arguments);\r\n}\r\nexport function throttle(_x8, _x9) {\r\n  return _throttle.apply(this, arguments);\r\n}\r\nfunction _throttle() {\r\n  _throttle = _skipFirstGeneratorNext(function* (iter, ms) {\r\n    let _functionSent5 = yield;\r\n    let timer;\r\n    let success = true;\r\n    try {\r\n      try {\r\n        while (true) {\r\n          let sent = _functionSent5;\r\n          timer = setTimeout(() => iter.next(sent), ms);\r\n          _functionSent5 = yield;\r\n        }\r\n      } finally {\r\n        if (timer) clearTimeout(timer);\r\n      }\r\n    } catch (e) {\r\n      success = false;\r\n      iter.throw(e);\r\n    } finally {\r\n      if (timer) clearTimeout(timer);\r\n      if (success) iter.return();\r\n    }\r\n  });\r\n  return _throttle.apply(this, arguments);\r\n}\r\n\r\n\/\/ Compressed with `npx terser --module -cm` to 1217 bytes, 375 after piping through `gzip`\r\nfunction t(t){return function(){var n=t.apply(this,arguments);return n.next(),n}}export function echo(){return n.apply(this,arguments)}function n(){return(n=t((function*(){let t=yield;for(;;)t=yield t}))).apply(this,arguments)}export function map(t,n){return r.apply(this,arguments)}function r(){return(r=t((function*(t,n){let r=yield,e=!0;try{for(;;)n(t.next(r)),r=yield}catch(n){e=!1,t.throw(n)}finally{e&&t.return()}}))).apply(this,arguments)}export function recover(t,n){return e.apply(this,arguments)}function e(){return(e=t((function*(t,n){let r=yield,e=!0;try{let i=r;for(;;){t.next(i);try{i=r=yield}catch(t){i=n(t)}}}catch(n){e=!1,t.throw(n)}finally{e&&t.return()}}))).apply(this,arguments)}export function makeObserver(t,n,r){return i.apply(this,arguments)}function i(){return(i=t((function*(t,n,r){let e=yield,i=!0;try{for(;;)t(e),e=yield}catch(t){i=!1,n(t)}finally{i&&r()}}))).apply(this,arguments)}export function throttle(t,n){return l.apply(this,arguments)}function l(){return(l=t((function*(t,n){let r,e=yield,i=!0;try{try{for(;;){let i=e;r=setTimeout((()=>t.next(i)),n),e=yield}}finally{r&&clearTimeout(r)}}catch(n){i=!1,t.throw(n)}finally{r&&clearTimeout(r),i&&t.return()}}))).apply(this,arguments)}\r\n```\r\n\r\nMy suggestion with helper:\r\n\r\n- Minified: 933 bytes (increase of 41% over source, improvement of 23% over v7.21.3)\r\n- Min+gzip: 332 bytes (increase of 27% over source, improvement of 11% over v7.21.3)\r\n\r\n```js\r\nfunction _skipFirstGeneratorNext(g) { g.next(); return g; }\r\nexport function echo() {\r\n  return _skipFirstGeneratorNext(_echo.apply(this, arguments));\r\n}\r\nfunction *_echo() {\r\n  let _functionSent = yield;\r\n  while (true) {\r\n    _functionSent = yield _functionSent;\r\n  }\r\n}\r\nexport function map(_x, _x2) {\r\n  return _skipFirstGeneratorNext(_map.apply(this, arguments));\r\n}\r\nfunction *_map(iter, f) {\r\n  let _functionSent2 = yield;\r\n  let success = true;\r\n  try {\r\n    while (true) {\r\n      f(iter.next(_functionSent2));\r\n      _functionSent2 = yield;\r\n    }\r\n  } catch (e) {\r\n    success = false;\r\n    iter.throw(e);\r\n  } finally {\r\n    if (success) iter.return();\r\n  }\r\n}\r\nexport function recover(_x3, _x4) {\r\n  return _skipFirstGeneratorNext(_recover.apply(this, arguments));\r\n}\r\nfunction *_recover(iter, f) {\r\n  let _functionSent3 = yield;\r\n  let success = true;\r\n  try {\r\n    let sent = _functionSent3;\r\n    while (true) {\r\n      iter.next(sent);\r\n      try {\r\n        sent = _functionSent3 = yield;\r\n      } catch (e) {\r\n        sent = f(e);\r\n      }\r\n    }\r\n  } catch (e) {\r\n    success = false;\r\n    iter.throw(e);\r\n  } finally {\r\n    if (success) iter.return();\r\n  }\r\n}\r\nexport function makeObserver(_x5, _x6, _x7) {\r\n  return _skipFirstGeneratorNext(_makeObserver.apply(this, arguments));\r\n}\r\nfunction *_makeObserver(onNext, onThrow, onReturn) {\r\n  let _functionSent4 = yield;\r\n  let success = true;\r\n  try {\r\n    while (true) {\r\n      onNext(_functionSent4);\r\n      _functionSent4 = yield;\r\n    }\r\n  } catch (e) {\r\n    success = false;\r\n    onThrow(e);\r\n  } finally {\r\n    if (success) onReturn();\r\n  }\r\n}\r\nexport function throttle(_x8, _x9) {\r\n  return _skipFirstGeneratorNext(_throttle.apply(this, arguments));\r\n}\r\nfunction *_throttle(iter, ms) {\r\n  let _functionSent5 = yield;\r\n  let timer;\r\n  let success = true;\r\n  try {\r\n    try {\r\n      while (true) {\r\n        let sent = _functionSent5;\r\n        timer = setTimeout(() => iter.next(sent), ms);\r\n        _functionSent5 = yield;\r\n      }\r\n    } finally {\r\n      if (timer) clearTimeout(timer);\r\n    }\r\n  } catch (e) {\r\n    success = false;\r\n    iter.throw(e);\r\n  } finally {\r\n    if (timer) clearTimeout(timer);\r\n    if (success) iter.return();\r\n  }\r\n}\r\n\r\n\/\/ Compressed with `npx terser --module -cm` to 933 bytes, 332 after piping through `gzip`\r\nfunction t(t){return t.next(),t}export function echo(){return t(e.apply(this,arguments))}function*e(){let t=yield;for(;;)t=yield t}export function map(e,n){return t(r.apply(this,arguments))}function*r(t,e){let r=yield,n=!0;try{for(;;)e(t.next(r)),r=yield}catch(e){n=!1,t.throw(e)}finally{n&&t.return()}}export function recover(e,r){return t(n.apply(this,arguments))}function*n(t,e){let r=yield,n=!0;try{let l=r;for(;;){t.next(l);try{l=r=yield}catch(t){l=e(t)}}}catch(e){n=!1,t.throw(e)}finally{n&&t.return()}}export function makeObserver(e,r,n){return t(l.apply(this,arguments))}function*l(t,e,r){let n=yield,l=!0;try{for(;;)t(n),n=yield}catch(t){l=!1,e(t)}finally{l&&r()}}export function throttle(e,r){return t(i.apply(this,arguments))}function*i(t,e){let r,n=yield,l=!0;try{try{for(;;){let l=n;r=setTimeout((()=>t.next(l)),e),n=yield}}finally{r&&clearTimeout(r)}}catch(e){l=!1,t.throw(e)}finally{r&&clearTimeout(r),l&&t.return()}}\r\n```\r\n\r\nMy suggestion with no helper:\r\n\r\n- Minified: 971 bytes (increase of 45% over source, improvement of 20% over v7.21.3)\r\n- Min+gzip: 339 bytes (increase of 30% over source, improvement of 10% over v7.21.3)\r\n\r\n```js\r\nexport function echo() {\r\n  let g = _echo.apply(this, arguments);\r\n  g.next();\r\n  return g;\r\n}\r\nfunction *_echo() {\r\n  let _functionSent = yield;\r\n  while (true) {\r\n    _functionSent = yield _functionSent;\r\n  }\r\n}\r\nexport function map(_x, _x2) {\r\n  let g = _map.apply(this, arguments);\r\n  g.next();\r\n  return g;\r\n}\r\nfunction *_map(iter, f) {\r\n  let _functionSent2 = yield;\r\n  let success = true;\r\n  try {\r\n    while (true) {\r\n      f(iter.next(_functionSent2));\r\n      _functionSent2 = yield;\r\n    }\r\n  } catch (e) {\r\n    success = false;\r\n    iter.throw(e);\r\n  } finally {\r\n    if (success) iter.return();\r\n  }\r\n}\r\nexport function recover(_x3, _x4) {\r\n  let g = _recover.apply(this, arguments);\r\n  g.next();\r\n  return g;\r\n}\r\nfunction *_recover(iter, f) {\r\n  let _functionSent3 = yield;\r\n  let success = true;\r\n  try {\r\n    let sent = _functionSent3;\r\n    while (true) {\r\n      iter.next(sent);\r\n      try {\r\n        sent = _functionSent3 = yield;\r\n      } catch (e) {\r\n        sent = f(e);\r\n      }\r\n    }\r\n  } catch (e) {\r\n    success = false;\r\n    iter.throw(e);\r\n  } finally {\r\n    if (success) iter.return();\r\n  }\r\n}\r\nexport function makeObserver(_x5, _x6, _x7) {\r\n  let g = _makeObserver.apply(this, arguments);\r\n  g.next();\r\n  return g;\r\n}\r\nfunction *_makeObserver(onNext, onThrow, onReturn) {\r\n  let _functionSent4 = yield;\r\n  let success = true;\r\n  try {\r\n    while (true) {\r\n      onNext(_functionSent4);\r\n      _functionSent4 = yield;\r\n    }\r\n  } catch (e) {\r\n    success = false;\r\n    onThrow(e);\r\n  } finally {\r\n    if (success) onReturn();\r\n  }\r\n}\r\nexport function throttle(_x8, _x9) {\r\n  let g = _throttle.apply(this, arguments);\r\n  g.next();\r\n  return g;\r\n}\r\nfunction *_throttle(iter, ms) {\r\n  let _functionSent5 = yield;\r\n  let timer;\r\n  let success = true;\r\n  try {\r\n    try {\r\n      while (true) {\r\n        let sent = _functionSent5;\r\n        timer = setTimeout(() => iter.next(sent), ms);\r\n        _functionSent5 = yield;\r\n      }\r\n    } finally {\r\n      if (timer) clearTimeout(timer);\r\n    }\r\n  } catch (e) {\r\n    success = false;\r\n    iter.throw(e);\r\n  } finally {\r\n    if (timer) clearTimeout(timer);\r\n    if (success) iter.return();\r\n  }\r\n}\r\n\r\n\/\/ Compressed with `npx terser --module -cm` to 971 bytes, 339 after piping through `gzip`\r\nexport function echo(){let e=t.apply(this,arguments);return e.next(),e}function*t(){let t=yield;for(;;)t=yield t}export function map(t,r){let n=e.apply(this,arguments);return n.next(),n}function*e(t,e){let r=yield,n=!0;try{for(;;)e(t.next(r)),r=yield}catch(e){n=!1,t.throw(e)}finally{n&&t.return()}}export function recover(t,e){let n=r.apply(this,arguments);return n.next(),n}function*r(t,e){let r=yield,n=!0;try{let l=r;for(;;){t.next(l);try{l=r=yield}catch(t){l=e(t)}}}catch(e){n=!1,t.throw(e)}finally{n&&t.return()}}export function makeObserver(t,e,r){let l=n.apply(this,arguments);return l.next(),l}function*n(t,e,r){let n=yield,l=!0;try{for(;;)t(n),n=yield}catch(t){l=!1,e(t)}finally{l&&r()}}export function throttle(t,e){let r=l.apply(this,arguments);return r.next(),r}function*l(t,e){let r,n=yield,l=!0;try{try{for(;;){let l=n;r=setTimeout((()=>t.next(l)),e),n=yield}}finally{r&&clearTimeout(r)}}catch(e){l=!1,t.throw(e)}finally{r&&clearTimeout(r),l&&t.return()}}\r\n```\r\n<\/details>\n\n### Describe alternatives you've considered\n\nLeaving it as-is. If it ain't broke, don't fix it. This is just an optimization suggestion anyways.\n\n### Documentation, Adoption, Migration Strategy\n\nNothing really to document or migrate to - this is just an output optimization.","comments":["Hey @dead-claudia! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","With #15922 we now generate this code:\r\n```js\r\nvar _foo;\r\nexport function foo() {\r\n  return (_foo = _foo || babelHelpers.skipFirstGeneratorNext(function* () {\r\n    let _functionSent = yield;\r\n    console.log(\"1\", _functionSent);\r\n    _functionSent = yield;\r\n    console.log(\"2\", _functionSent);\r\n  })).apply(this, arguments);\r\n}\r\n```","Thank you for your detailed report, the changes mentioned here I will consider including in the next PR. :)","I just realized: my desugaring isn't correct when side-effecting default parameters are present. Those will have to be moved after the first `yield`.\n\nSo, that will need accounted for."],"labels":["i: enhancement"]},{"title":"[Bug]: babel spread transform","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nbabel-loader (webpack)\n\n### Input code\n\n```\r\nlet missing = [0, , 1];\r\nlet spreaded = [...missing];\r\nlet concated = [].concat(missing);\r\n\/\/ true\r\n\"1\" in spreaded;\r\n\/\/ false\r\n\"1\" in concated;\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\ndefault with babel preset env set to usage and browser list to ie >= 10\n\n### Current and expected behavior\n\nCurrent behavior, babel is only adding concat and not helpers to fill holes with undefined like spread spec says\r\n\r\nExpected behavior, follow ecma script spec\n\n### Environment\n\nWeb\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nSorry for the formatting,writing from phone","comments":["Hey @Daniel3711997! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","ref: https:\/\/github.com\/babel\/babel\/issues\/13861"],"labels":["i: needs triage"]},{"title":"[Bug]: babel-plugin-transform-modules-umd using in babel standablong. the generated code error while transform the same dependency name.","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on a fix?\n\n### How are you using Babel?\n\nbabel-loader (webpack)\n\n### Input code\n\n```js\r\nimport { openMacroMessage, booleanConfirm } from \"tms-front\/lib\/common\/utils\";\r\n\r\nimport { getCurrentOrganizationId } from \"utils\/utils\";\r\n\r\nconsole.log(\"openMacroMessage\", openMacroMessage);\r\n\r\nconsole.log(\"booleanConfirm\", booleanConfirm);\r\n\r\nconsole.log(\"getCurrentOrganizationId\", getCurrentOrganizationId);\r\n```\r\nI found a bug while using the babel-plugin-transform-modules-umd plugin, In the source code above, there are imports for both \"tms-front\/lib\/common\/utils\" and \"utils\/utils\", but in the resulting code, they have the same name at line 10, causing an error. \r\n\r\nI have noticed that the plugin just splits the last word when translating dependencies, as demonstrated in my example.\r\n\r\n You can reproduce this bug on your official website\uff0c I have posted a picture of the error below.\r\n \r\n![image](https:\/\/user-images.githubusercontent.com\/41815901\/227697869-9ac91a03-1f9b-4852-874d-7dc6e07294c1.png)\r\n\r\n\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nI suggest that the same dependency name in the resulting code will be added number suffix in sequence.\r\n\r\n![\u65e0\u6807\u98981](https:\/\/user-images.githubusercontent.com\/41815901\/227699574-b194ceb8-e8ae-48c8-bc34-80691337891e.png)\r\n\n\n### Environment\n\n-\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @XiaoWinter! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","> Hey @XiaoWinter! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\r\n> \r\n> If you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\r\n\r\nI don't how to fix the issuse, can you give me some document or ponit the dorction to resolve it","[Playground link](https:\/\/babeljs.io\/repl#?browsers=defaults&build=&builtIns=false&corejs=false&spec=false&loose=false&code_lz=JYWwDg9gTgLgBAbzhMBTAdgWQIYGMoSaoDOx2A5qgDRwBGEEANqtugMIToBmwUIcAXzhcC_AEQwQxALQjOMAPSNgtBbgggQnBQFcYwRsTEBuAFCnQkWIjiUYbHVCgYYAeSjlWwAF7Z9nAEkAE0FhUTgxPQNiXX1DE3N1dGImVAA6RghyAAoxFAwcfEISMkoxGnysPAIiUgpUAEozUySU5gys3PpU1g5uXhByugZmXs4ePibEzjb0zJyxOwcnF3dPdB8_YECgoaXHZ3Q3Dy9ff3RgpqA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-3%2Ctypescript&prettier=false&targets=&version=7.22.5&externalPlugins=%40babel%2Fplugin-transform-modules-umd%407.18.6&assumptions=%7B%7D) to repro","related: https:\/\/github.com\/babel\/babel\/issues\/4381","> [Playground link](https:\/\/babeljs.io\/repl#?browsers=defaults&build=&builtIns=false&corejs=false&spec=false&loose=false&code_lz=JYWwDg9gTgLgBAbzhMBTAdgWQIYGMoSaoDOx2A5qgDRwBGEEANqtugMIToBmwUIcAXzhcC_AEQwQxALQjOMAPSNgtBbgggQnBQFcYwRsTEBuAFCnQkWIjiUYbHVCgYYAeSjlWwAF7Z9nAEkAE0FhUTgxPQNiXX1DE3N1dGImVAA6RghyAAoxFAwcfEISMkoxGnysPAIiUgpUAEozUySU5gys3PpU1g5uXhByugZmXs4ePibEzjb0zJyxOwcnF3dPdB8_YECgoaXHZ3Q3Dy9ff3RgpqA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-3%2Ctypescript&prettier=false&targets=&version=7.22.5&externalPlugins=%40babel%2Fplugin-transform-modules-umd%407.18.6&assumptions=%7B%7D) to repro\r\n\r\nThank you for your attention. I noticed someone had reported a similar issue. this issue is found by [JLHwung](https:\/\/github.com\/JLHwung).  thanks [JLHwung](https:\/\/github.com\/JLHwung)'s effort.\r\nrelated: https:\/\/github.com\/babel\/babel\/issues\/4381","With the proposed fix, changing the order of imports would change the name of the globals they are read from. If two libraries have the same name, there is no good automatic way to disambiguate.\r\n\r\nI think the only \"fix\" I would be comfortable with is adding an option that takes a `(importerFile: stiring, importSpecifier: string) => string` to let users compute the global names the way it works for their libraries.","yes, My idea is not thoughtful. I don't know other people scene. in my project, there are two steps about using this plugin,first I write a js file to defined which module will be mounted 'window', as follow code showed\r\n``` js\r\nfunction initModule() {\r\n  window.react = require('react');\r\n  window.lodash = require('lodash');\r\n  window.utils = require('a\/utils'); \r\n\/\/  some teammate know babel-plugin-transform-modules-umd don't division \u2018a\/utils\u2019 and 'b\/utils'\uff0cthey won't import 'b\/utils' \r\n\/\/ in tsx file which will be converted by babel\/standalong,  instead of use window.utils2 directly\r\n  window.utils2 = require('b\/utils'); \r\n}\r\n```\r\nsecond, the prepared tsx file will be converted by babel\/standalong , the plugin will be run in the duration. then the result js file will be inserted page and run.\r\n\r\nin the whole process, the mounted action and coverted action is unralated, users mounted modules by hand.the plugin's action is normal also. Typically, developers don't need to concern themselves with the mechanism. but sometime  Developers must be aware of the mechanism of this plugin and handle module mounting themselves. so I think add a option as a hook is useful \uff0cwihch give developers a way to control the result.  users are able to do something  when the  name of importFile is generated. in my case. if this plugin has a hook,I can  deal with 'b\/utils' exactly. to ensure consistency in module names  mounting \r\n to window and coverted by this plugin.\r\n\r\n``` js\r\n    const res = Babel.transform(source, {\r\n      presets: [\r\n        'react',\r\n        'es2015',\r\n        'stage-3',\r\n        ['typescript', { allExtensions: true, allowNamespaces: true, isTSX: true }],\r\n      ],\r\n      plugins: [\r\n        ['transform-modules-umd',\r\n         {\r\n            afterFileNameGenarate:(generatedFilename,moduleName)=>{\r\n              if(moduleName === 'b\/utils') return 'utils2'\r\n          }\r\n         }\r\n       ],\r\n        ['transform-typescript'],\r\n      ],\r\n    });\r\n\r\n\r\n```\r\n"],"labels":["i: bug"]},{"title":"Warn when an output file is also used as an input file","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #15503 <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | \u00d7\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15512\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\n\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/54154\/","Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/54145\/"],"labels":["PR: Polish :nail_care:","pkg: cli"]},{"title":"[Bug]: Babel watch goes into endless loop transpiling its own output.","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@babel\/cli\r\n\r\n### Input code\r\n\r\nThe source likely isn't relevant here, but you asked, here is `src\/MyComponent.jsx`.\r\n\r\n```javascript\r\nconst MyComponent = function () {\r\n  return (\r\n    <select required>\r\n      <option selected disabled hidden><\/option>\r\n      <option>foo<\/option>\r\n      <option>bar<\/option>\r\n    <\/select>);\r\n};\r\n\r\nexport default MyComponent;\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nI'm using the latest Babel CLI on Windows 10, as per my `package.json`:\r\n\r\n```json\r\n{\r\n  \"devDependencies\": {\r\n    \"@babel\/cli\": \"^7.21.0\",\r\n    \"@babel\/core\": \"^7.21.3\",\r\n    \"@babel\/preset-react\": \"^7.18.6\"\r\n  }\r\n}\r\n```\r\n\r\nI put a JSX source file in `src\/MyComponent.jsx`. Then I run:\r\n\r\n\r\n```bash\r\nnpx babel src --out-dir src --presets=@babel\/preset-react --watch\r\n```\r\n\r\nBabel compiles `src\/MyComponent.jsx` to `src\/MyComponent.js`, and then sits there like it should.\r\n\r\nI edit `src\/MyComponent.jsx` in an editor an save it. Babel compiles `src\/MyComponent.jsx` to `src\/MyComponent.js` again. And again. And again. And again.\r\n\r\nBabel goes into an endless loop whenever a file is modified in watch mode, constantly recompiling the file over and over.\r\n\r\n### Environment\r\n\r\n- Node 18.15.0\r\n- NPM 9.5.0\r\n- NPX 9.5.0\r\n- Babel Core: 7.21.3\r\n- Babel CLI: 7.21.0\r\n- Windows 10 22H2\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @garretwilson! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","> I edit src\/MyComponent.jsx in an editor an save it. Babel compiles src\/MyComponent.jsx to src\/MyComponent.js again. And again. And again. And again.\r\n\r\nIt seems to me that some application is constantly modifying `src\/MyComponent.jsx`. Can you poll and list the `mtime` of `src\/MyComponent.jsx` after you saved it in an editor? If it is changing, that application would be the culprit.","Oh!!!! I found the problem.\r\n\r\nIn fact Babel was not continuously recompiling `src\/MyComponent.jsx`. In fact, something was modifying `src\/MyComponent.js`, so Babel kept transpiling it. And you know what was modifying `src\/MyComponent.js`? Babel itself, when it transpiled `src\/MyComponent.jsx`!\r\n\r\nHere is the sequence of events:\r\n\r\n1. Babel sees that `src\/MyComponent.jsx` has been modified.\r\n2. Babel transpiles `src\/MyComponent.jsx` to `src\/MyComponent.js`.\r\n3. Babel sees that `src\/MyComponent.js` has been modified.\r\n4. Babel transpiles `src\/MyComponent.js` to `src\/MyComponent.js`.\r\n5. Repeat at 3. _ad infinitum_.\r\n\r\nSeriously! **Babel is re-transpiling its own output `.js` file over and over!**\r\n\r\nI can work around this by using `--ignore` or `--only` or better yet, as in my case, I add a `babel.config.json` (note the `\"only\"` section):\r\n\r\n```json\r\n{\r\n  \"presets\": [\r\n    \"@babel\/preset-react\"\r\n  ],\r\n  \"only\": [\r\n    \"**\/*.jsx\"\r\n  ]\r\n}\r\n```\r\n\r\nThis works around the problem, but won't work for someone who wants to actually transpile `.js` files, too.\r\n\r\nNote also that this directly contradicts the [documentation for `babel-cli`](https:\/\/babeljs.io\/docs\/babel-cli):\r\n\r\n> Compile the entire `src` directory and output it to the `lib` directory by using either `--out-dir` or `-d`. This doesn't overwrite any other files or directories in `lib`.\r\n> ```bash\r\n> npx babel src --out-dir lib\r\n> ```\r\n\r\nIn this case it is most definitely overwriting files in `--out-dir`, because it is overwriting the `.js` file Babel itself produced!\r\n\r\n(By the way, where can I find a list of all the file extensions Babel recognizes and transpiles by default? Obviously using `--only` gets around the issue altogether by setting the recognized files explicitly, but I'm still curious what the defaults are. If I didn't know about React and was only wanting Babel to transpile JavaScript files, I would have no way of guessing that it looked for `.jsx` files, too.)","Interestingly Babel does not print a message to `stdout` whenever it re-transpiles `src\/MyComponent.js`.\r\n\r\nI have closed all editors and IDEs. There is nothing else modifying `src\/MyComponent.js`. But I can with Windows Explorer open and watch the timestamp continue to change.\r\n\r\nIt does look like Babel itself is the culprit here. There seems to be a bug that confuses Babel when detecting changes that itself initiated. Likely an oversight that neglects to filters detected file changes based upon whether Babel itself initiating those changes.","Glad that you sort it out. \r\n\r\n> npx babel src --out-dir src\r\n\r\nI should have noticed that earlier, my brain just assumes it is `--out-dir lib` lol. IMO the JSX file should be the single source of truth, the generated `.js` file should be placed in another directory, preferably git-ignored.\r\n\r\n> where can I find a list of all the file extensions Babel recognizes and transpiles by default?\r\n\r\nGood point. Currently it is buried in the source:\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/032203ea18288b9ae51f0c18dfece03a59555113\/packages\/babel-core\/src\/index.ts#L63-L74\r\n\r\nI will add it to the babel-cli docs later.","> Glad that you sort it out.\r\n\r\nI found the source of the problem, but it isn't \"sorted out\". It's still a Babel bug, and perhaps even a worse bug than I originally reported.","> I will add it to the babel-cli docs later.\r\n\r\nThe list of default extensions would be very helpful in the docs, thanks.","Oh, and thanks for the super-quick response this morning, by the way. \ud83d\udc4d ","> There seems to be a bug that confuses Babel when detecting changes that itself initiated. Likely an oversight that neglects to filters detected file changes based upon whether Babel itself initiating those changes.\r\n\r\nI think the behaviour is a design choice: Babel does not record _who_ modifies the watched files, it reacts to any change event reported by chokidar (fs-watcher) and outputs to the destination. Generally the destination directory is different to the source directory, so such design works for the general case.\r\n\r\nCan you elaborate on your use case? Why do you expect the compiled JSX output to be in the `src`? Are they for integration with other tools?","> I think the behaviour is a design choice: \u2026. Generally the destination directory is different to the source directory, so such design works for the general case. \u2026 Can you elaborate on your use case?\r\n\r\nWell first let's back up a little and discuss documentation and expectations. I'm new to React and JSX. If I run Babel on `Foo.jsx`, it puts out `Foo.js`. How did I know that? I didn't until I tried it. Why didn't it simply update `Foo.jsx` in place? Because that's the way it works. But if it created a new output file, why didn't it erase `Foo.jsx`?\r\n\r\nSo if I run Babel on `bar.js`, what will it put out? Will it put out `bar-ecmascript.js` or something similar? That might be what I would have expected from what it did to `Foo.jsx`. But no, it updates `bar.js` _in place_, which has the consequence of _erasing the source file_, unlike with `Foo.jsx`, which did _not_ erase the source file. How did I know that? I didn't until I tried that. Note here that the behavior is different from that with `Foo.jsx`. One produces a new file. Other other updates in place. One keeps the original file. The other essentially deletes the original file.\r\n\r\nThere is some assumption of the context and the other toolset that will be used. I'm sure the response will be \"the user should basically know that the purpose here is to produce some `.js` files to be bundled using some larger Webpack or whatever workflow, and most people won't use Babel by itself\". But I'm coming from the perspective of, \"Babel is a tool. I want to understand what it does, and I want to know what to expect.\"\r\n\r\nNow back to my use case. I actually have a couple. The first is fun: I'm using Tomcat with Spring Boot MVC and Thymeleaf (not the coolest fad, I know, but it exists and there are still valid uses). The IDE will continuously copy into the `\/target\/*` directory with any changes in the `\/src\/*` directory, so when I update a `.jsx` file it will automatically wind up in the `\/target\/*` tree and be picked up by Tomcat live. I don't need to be running Webpack or Create React Application or Monstrous New JavaScript Transpile Pipeline that React might have decided to recommend. I just want to convert my JSX files so they can be served by Tomcat.\r\n\r\nUsing a `babel.config.json` with `only` set to `\"only\": [\"**\/*.jsx\"]` and `--watch`, it looks like whenever my IDE updates the JSX files (by copying them from `\/src\/*` to `\/target\/*`, Babel will transpile them to `.js` on the fly and Tomcat will recognize them and everything will happen automatically. (I'll just need to reference the `.js` files from the HTML rather than the `JSX` files.) However it means that I can't transpile my `.js` files automatically, or Babel will go into an endless loop re-transpiling its own output.\r\n\r\nThe second use case has to do with packaging, not with `--watch`. With Maven as I mentioned my pipeline already copies files from `src\/*` to `target\/*`. I just need to transpile them before packaging them. The packaging part of the pipeline is already set up. I just need to transpile the JSX files in-place (i.e. in the same directory). Babel already does that, but I'll need to come along with some script and delete the source `.jsx` files. And again there is an inconsistency because if I want Babel to transpile my `.js` files, it already transpiles them in-place.\r\n\r\nThe transpiling `.js` files in-place doesn't bother me so much, but that's just because I expect my users to be using the latest browsers and I don't care about transpiling my JavaScript. But for others who do want that feature, this could be a problem.\r\n\r\nThis comment is not so much a complaint but an explanation of my use case(s), which you asked for.\r\n\r\nBut I do want to emphasize that, using Babel CLI as a tool in and of itself, it would be nice to have more control over which types of files are updated in-place and which are transpiled to a new output file.","> The IDE will continuously copy into the \/target\/* directory with any changes in the \/src\/* directory, so when I update a .jsx file it will automatically wind up in the \/target\/* tree and be picked up by Tomcat live.\r\n\r\nCan you instruct your IDE to only copy `\/src\/*.{everything except jsx and js}`? So that Babel-cli can handle these files: \r\n```\r\nbabel src --out-lib target\r\n```\r\n\r\nOr if you don't have fancy files other than `.js` and `.jsx`, you can have babel-cli to copy the rest of them to target\r\n```\r\nbabel src --out-lib target --copy-files\r\n```\r\n\r\nAnd as a bonus your `src` now contains only the sources, the transpiled JSX files will be sent to `target`. Does that work for your case?","> So that Babel-cli can handle these files:\r\n\r\nI'm not sure if you're familiar with a Maven\/Gradle build cycle, but unless you know of a Maven\/Gradle plugin that will invoke Babel CLI during the build cycle, then this won't work. Moreover the plugin would need to work with the Maven\/Gradle integration with all the IDEs (Eclipse, IntelliJ, etc.) so that they would dynamically rerun Babel CLI whenever files in `src` are modified (as they already do with other files).\r\n\r\nPractically it's better if I simply operate on the `\/target\/*` directory tree after the files have been copied\/updated, for live reloads during testing. And for a full build I'm looking into plugins that invoke Node for automated build+packaging.\r\n\r\nOnce it's all working I'll write it up in a blog entry. For the moment, I just got an HTML file using ES6 modules to load transpiled JSX files using the Babel CLI `--watch` we've been discussing\u2014a huge step! Thanks for your help and feedback here.","I have excellent news!\r\n\r\n> Can you instruct your IDE to only copy `\/src\/*.{everything except jsx and js}`? So that Babel-cli can handle these files:\r\n\r\nThat was a wonderful idea, even if the end result isn't exactly perfect. Yes, I can tell the IDE (via the Maven POM build definition file) to ignore `**\/*.jsx` when copying resources. And then I found the amazing [`frontend-maven-plugin`](https:\/\/github.com\/eirslett\/frontend-maven-plugin). Essentially it will dowload a local copy of Node, install Babel if needed, and then at the right time (in the same build phase in which Maven copies resources\u2014except JSX files) it can invoke `npx babel \u2026` with the correct paths (the paths indicating the `src` and `target` trees as you mentioned).\r\n\r\nBasically this gives me a completely integrated `mvn clean install` as we expect, and it will compile the JSX files to `.js`. It should even work on other platforms, or as part of CI\/CD, etc.\r\n\r\nThe only drawback is testing, because since we've told Eclipse to ignore JSX resource files, they don't get re-transpiled when running the application in the IDE. But it's not a huge workaround to run `npx babel \u2026 --watch` from a terminal (again indicating the paths for the `src` and `target` trees as you mentioned), which will re-transpile the JSX as needed. Maybe someday we can find a way to get the IDE to do this last step for us during testing; see eirslett\/frontend-maven-plugin#1076.\r\n\r\nI'll write up more detailed instructions and come back here later and post the link.","Here is the blog post I mentioned. As far as I can tell it is by far the most comprehensive tutorial on integrating Babel into a Java Spring Boot project, and more generally a Maven\/Gradle build pipeline, without using some larger front-end system. It also explain in clear terms exactly how to install Babel and use it to manually transpile JSX.\r\n\r\n[No-Fuss React and JSX with Spring Boot](https:\/\/www.garretwilson.com\/blog\/2023\/03\/21\/no-fuss-react-jsx-with-spring-boot)\r\n\r\nAs for the issue I raised in this ticket, I better understand the current behavior and realize that to some extent it is working as designed. Moreover with the steps I've described to integrate Babel with Maven, the behavior when transpiling into the same output directory as the input directory doesn't matter so much to me.\r\n\r\nStill the behavior is unexpected, and contracts the documentation I recommend at least adding a note about what happens when you set both directories to be the same, and maybe point out that in any case, the treatment of `.jsx` and `.js` files are different regarding whether they are updated in-place or copied to a file with a different extension.\r\n\r\nThanks for your time in responding and giving me some pointers on this ticket."],"labels":["i: needs triage"]},{"title":"fix: Correctly generate `StringLiteral` in `JSXAttribute`","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #15472, Fixes #16065 <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          | \u221a\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | \u221a\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  | \r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15487\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/55798\/","> Unfortunately we cannot do this in a Babel 7 release\r\n\r\nThis shouldn't be a breaking change, is there something I haven't noticed?\r\n\r\n> but I think that a better fix would be to not handle HTML entities in the parser\/generator (so the string's .value would still be &amp;), and instead convert them in the JSX transform plugin.\r\n\r\nI'm actually leaning toward creating a new node type in the same form as it does now. But this will affect a lot in compatibility, so I chose to set `.extra`,","![image](https:\/\/user-images.githubusercontent.com\/30521560\/224713724-320e779f-c729-4104-bc9b-763093ce046c.png)\r\nNow will no longer affect the bundled size.","https:\/\/github.com\/babel\/babel\/issues\/16065\r\nThis has the same reason. `StringLiteral` in js will not become two lines, which is not the case in jsx.\r\n","@nicolo-ribaudo Can you re-review this? :)\r\nThanks!","CI error seems related."],"labels":["PR: Bug Fix :bug:","pkg: generator","pkg: parser","area: jsx"]},{"title":"[Bug]: ['@babel\/plugin-transform-runtime', { corejs: 3 }] complains \"Module not found: Error: Can't resolve 'core-js\/modules\/es6.regexp.to-string.js'\"","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nbabel-loader (webpack)\n\n### Input code\n\n```js\r\n \/\/ Just using Template strings\r\n```\n\n### Configuration file name\n\n.babelrc\n\n### Configuration\n\n            \"plugins\": [\r\n                [\r\n                    \"@babel\/plugin-transform-runtime\",\r\n                    {\r\n                        \"regenerator\": true,\r\n                        \"corejs\":{\r\n                             \"version\": 3\r\n                        }\r\n                    }\r\n                ]\r\n            ]\n\n### Current and expected behavior\n\nI try 2 ways to use core-js3 to polyfill my code,  1. using `@babel\/preset-env` **works fine** but if I use `['@babel\/plugin-transform-runtime', { corejs: 3 }]`, i.e. to use core-js-pure to avoid global pollution, webpack will complain\r\n\r\n`Module not found: Error: Can't resolve 'core-js\/modules\/es6.regexp.to-string.js'`\r\n\r\nBut since I have run `npm install --save @babel\/runtime-corejs3` and I also make sure  `es6.regexp.to-string.js` does exist\r\n\r\n```\r\n% find node_modules\/ -name \"es6.regexp.to-string.js\"\r\nnode_modules\/\/babel-register\/node_modules\/core-js\/library\/modules\/es6.regexp.to-string.js\r\nnode_modules\/\/babel-register\/node_modules\/core-js\/modules\/library\/es6.regexp.to-string.js\r\nnode_modules\/\/babel-register\/node_modules\/core-js\/modules\/es6.regexp.to-string.js\r\nnode_modules\/\/babel-runtime\/node_modules\/core-js\/library\/modules\/es6.regexp.to-string.js\r\nnode_modules\/\/babel-runtime\/node_modules\/core-js\/modules\/library\/es6.regexp.to-string.js\r\nnode_modules\/\/babel-runtime\/node_modules\/core-js\/modules\/es6.regexp.to-string.js\r\n```\r\n\r\nSo I feel this is a babel bug (not core-js3 bug) \n\n### Environment\n\n  System:\r\n    OS: macOS 13.0.1\r\n  Binaries:\r\n    Node: 16.14.2 - \/usr\/local\/bin\/node\r\n    Yarn: 1.22.17 - \/usr\/local\/bin\/yarn\r\n    npm: 8.15.1 - \/usr\/local\/bin\/npm\r\n  npmPackages:\r\n    @babel\/core: ^7.0.0 => 7.21.0\r\n    @babel\/plugin-transform-runtime: ^7.0.0 => 7.21.0\r\n    @babel\/preset-env: ^7.0.0 => 7.20.2\r\n    @babel\/runtime-corejs3: ^7.21.0 => 7.21.0\r\n    babel-eslint: ^10.0.1 => 10.0.2\r\n    babel-loader: ^8.0.0 => 8.3.0\r\n    babelify: ^8.0.0 => 8.0.0\r\n    eslint: ^5.11.0 => 5.16.0\r\n    webpack: ^4.37.0 => 4.37.0\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @qiulang! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Can you share the stack trace of that error?","Hi what do you mean the stack trace of the error, do you mean following ? \r\n\r\n```\r\nERROR in .\/src\/lib\/getLoginInfo.js\r\nModule not found: Error: Can't resolve 'core-js\/modules\/es6.regexp.to-string.js' in '\/Users\/qiulang\/Projects\/call-center\/jssipwrap\/src\/lib'\r\n @ .\/src\/lib\/getLoginInfo.js 22:0-50\r\n @ .\/src\/lib\/index.js\r\n @ .\/src\/ui\/phone.js\r\n```\r\n\r\nI check the code, I am pretty sure it is just Template strings that cause the error.","I'm confused because that is still a direct import to `core-js@2`. Could you share the contents of `.\/src\/lib\/getLoginInfo.js`, the output generated by Babel for that file (if it throws when running the file and not when compiling it), and your full Babel config?","Can you also try running Babel with the `BABEL_SHOW_CONFIG_FOR=.\/src\/lib\/getLoginInfo.js` environment variable?","Hi where did you see a direct import to **core-js@2** (as I only install corejs3)? It is not in my code, my code does not import core-js and as I said if I use `@babel\/preset-env` it works fine ","This is my full Babel config, `.babelrc`. I can't share my getLoginInfo.js code as my employer won't allow me.\r\n\r\nThe npm script `\"BABEL_ENV='production' webpack --mode production\"`\r\n\r\n```\r\n{\r\n    \"env\": {\r\n        \"development\": {\r\n            \"presets\": [\r\n                [\r\n                    \"@babel\/preset-env\",\r\n                    {\r\n                        \"targets\": {\r\n                            \"browsers\": [\r\n                                \"last 5 Chrome versions\",\r\n                                \"last 2 Firefox versions\",\r\n                                \"last 2 Safari versions\"\r\n                            ]\r\n                        },\r\n                        \"modules\": \"commonjs\",\r\n                        \"debug\": true\r\n                    }\r\n                ]\r\n            ]\r\n        },\r\n        \"production\": {\r\n            \"presets\": [\r\n                [\r\n                    \"@babel\/preset-env\",\r\n                    {\r\n                        \"targets\": {\r\n                            \"browsers\": [\r\n                                \"last 5 Chrome versions\",\r\n                                \"last 1 Firefox versions\",\r\n                                \"last 2 Safari versions\",\r\n                                \"ie 11\",\r\n                                \"last 3 edge versions\"\r\n                            ]\r\n                        },\r\n                        \"modules\": \"commonjs\",\r\n                        \"debug\": true,\r\n                        \"useBuiltIns\": \"usage\",\r\n                        \/\/ \"corejs\":{\r\n                        \/\/     \"version\": 3.8,\r\n                        \/\/ }\r\n                    }\r\n                ]\r\n            ],\r\n            \"plugins\": [\r\n                [\r\n                    \"@babel\/plugin-transform-runtime\",\r\n                    {\r\n                        \"regenerator\": true,\r\n                        \"corejs\":{\r\n                             \"version\": 3\r\n                        }\r\n                    }\r\n                ]\r\n            ]\r\n        }\r\n    }\r\n}\r\n\r\n```","`es6.regexp.to-string.js` is a file that exists only in `core-js@2`. Can you try deleting `\"useBuiltIns\": true` from your `preset-env` options? It's telling to the preset to inject polyfills, and since you commented out the core-js version it defaults to 2.","I am confused. \r\n\r\nFirst, if I delete `\"useBuiltIns\": true` then \"Using polyfills: No polyfills were added, since the `useBuiltIns` option was not set.\"\r\n\r\nBut I need polyfill for IE!\r\n\r\nSecond,  I use `['@babel\/plugin-transform-runtime', { corejs: 3 }] ` why it defaults to 2 ?! Isn't this a babel bug ?","> First, if I delete \"useBuiltIns\": true then \"Using polyfills: No polyfills were added, since the useBuiltIns option was not set.\"\r\n\r\nThat is the log from `@babel\/preset-env`'s debug option: it's telling you that `@babel\/preset-env` didn't inject any polyfill. And it's what you want, since you want to use a separate plugin to inject them!\r\n\r\n> Second,  I use `['@babel\/plugin-transform-runtime', { corejs: 3 }] ` why it defaults to 2 ?! Isn't this a babel bug ?\r\n\r\nEach plugin\/preset works in isolation. With that option you are telling `@babel\/plugin-transform-runtime` to inject imports to `core-js` 3, but at the same time `@babel\/preset-env` is injecting imports to `core-js` 2 (because your config was asking to the preset to inject polyfills, without specifying to which version).","I believe this is a documentation issue, which has also been mentioned in https:\/\/github.com\/babel\/website\/pull\/2723. It would be worthwhile to make a note on both sides about the integration issues with the other.","@nicolo-ribaudo thanks for clarifying that. One more question, with `['@babel\/plugin-transform-runtime', { corejs: 3 }]` option, how can I make sure it actually polypill because runtime lacks the debug option like  @babel\/preset-env has?\r\n\r\n@JLHwung I would recommend adding documentation for 2 ways to use core-js to polyfill. Most developers I know don't know the different between core-js2 and corejs3 or core-js3 (using preset-env) and core-js-pure3 (using runtime). I also see people use both of them.\r\n\r\nEven I do know the difference between core-js3 or core-js-pure3 and I should only use one of them I still make the mistake as I recorded here.","Maybe we can warn about this \"like bug\" behavior in the next minor version?"],"labels":["i: question"]},{"title":"[Bug]: Generates wrong JS for StringLiteral reused from JSXAttribute.value","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\nThis test case parses some valid JSX, extracts the `StringLiteral` node from the `value` of a `JSXAttribute` node, and reuses it in a well-typed AST to generate some JavaScript code:\r\n\r\n```js\r\nconst { default: generate } = require(\"@babel\/generator\");\r\nconst { parse } = require(\"@babel\/parser\");\r\nconst t = require(\"@babel\/types\");\r\n\r\nconst code = '<b title=\"&amp; \\\\xxx\" \/>';\r\nconst ast = parse(code, { plugins: [\"jsx\"] });\r\nconst value = ast.program.body[0].expression.openingElement.attributes[0].value;\r\nconsole.log(generate(t.callExpression(t.identifier(\"setTitle\"), [value])).code);\r\n```\r\n\r\n### Current and expected behavior\r\n\r\nBabel reuses `value.extra.raw`, which was encoded for HTML and not for JavaScript, and outputs this invalid JavaScript code:\r\n\r\n```js\r\nsetTitle(\"&amp; \\xxx\")\r\n```\r\n\r\nExpected:\r\n\r\n```js\r\nsetTitle(\"& \\\\xxx\")\r\n```\r\n\r\n(or perhaps an error from `@babel\/generator`).\r\n\r\n### Environment\r\n\r\n#### System:\r\n - OS: Linux 6.2 NixOS 23.05 (Stoat) 23.05 (Stoat)\r\n#### Binaries:\r\n - Node: 18.14.2 - ~\/.nix-profile\/bin\/node\r\n - Yarn: 1.22.19 - ~\/.nix-profile\/bin\/yarn\r\n - npm: 9.5.0 - ~\/.nix-profile\/bin\/npm\r\n#### npmPackages:\r\n - @babel\/generator: ^7.21.1 => 7.21.1 \r\n - @babel\/parser: ^7.21.2 => 7.21.2 \r\n - @babel\/types: ^7.21.2 => 7.21.2 \r\n\r\n### Possible solution\r\n\r\nI can think of three solutions.\r\n\r\n1. Change the type of `JSXAttribute.value` literals to a new type, say `JSXStringLiteral`, that can\u2019t be confused with `StringLiteral`. This would be a backwards-incompatible change.\r\n\r\n2. When parsing a JSX attribute literal, mark the `StringLiteral` with a new attribute, say `.extra.jsxAttribute = true`. When generating code for a `StringLiteral` as a JSX attribute, only reuse `.extra.raw` when `.extra.jsxAttribute` is `true`; when generating code for a `StringLiteral` anywhere else, only reuse `.extra.raw` when `.extra.jsxAttribute` is not `true`.\r\n\r\n3. When generating code for a `StringLiteral`, re-parse `.extra.raw` for the present context and check that it actually matches `.value` before reusing it.\r\n\r\n### Additional context\r\n\r\n- https:\/\/github.com\/solidjs\/solid\/issues\/1553","comments":["Hey @andersk! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","The converse bug where we generate invalid JSX from a `StringLiteral` that didn\u2019t come from JSX can be reproduced even when the `StringLiteral` is fresh and not reused:\r\n\r\n```js\r\nconst { default: generate } = require(\"@babel\/generator\");\r\nconst t = require(\"@babel\/types\");\r\n\r\nconsole.log(\r\n  generate(\r\n    t.jsxElement(\r\n      t.jsxOpeningElement(t.jsxIdentifier(\"b\"), [\r\n        t.jsxAttribute(t.jsxIdentifier(\"title\"), t.stringLiteral('\"')),\r\n      ]),\r\n      t.jsxClosingElement(t.jsxIdentifier(\"b\")),\r\n      []\r\n    )\r\n  ).code\r\n);\r\n```\r\n\r\nOutputs this invalid JSX:\r\n\r\n```jsx\r\n<b title=\"\\\"\"><\/b>\r\n```\r\n\r\nExpected:\r\n\r\n```jsx\r\n<b title=\"&quot;\"><\/b>\r\n```\r\n\r\nI think this argues in favor of solution 1: a JSX attribute literal should be a different node type from `StringLiteral` because it needs to be serialized differently.","Yes, it looks like solution 1 is the best, but I'm afraid there will be some trouble with compatibility.\r\nSolution 3 looks good, we can store only `jsxRaw` in `.extra` for jsx nodes to reduce performance impact.\r\n\r\nLet's see what other members think."],"labels":["i: discussion","pkg: generator","i: bug","area: jsx"]},{"title":"[Feature] Run babel on specific file","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nI am trying to run Babel on a specific file using babel.config.js but couldn't find out a way to do it. I saw a way to do it https:\/\/babeljs.io\/docs\/options#test using this option but it doesn't use the option and runs on everything.\r\n\r\nI found a work around for this here, https:\/\/github.com\/babel\/babel\/issues\/5420#issuecomment-285379119 but I want to use just babel instead of webpack.\n\n### Describe the solution you'd like\n\nUse test at top level for plugin options.\n\n### Describe alternatives you've considered\n\nhttps:\/\/github.com\/babel\/babel\/issues\/5420#issuecomment-285379119\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @mohit217! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","https:\/\/babeljs.io\/docs\/options#only\r\n\r\nAre you looking for it?","@liuxingbaoyu I want to run a specific plugin only for a specific file. I tried with only as an option for plugin but it didn't work","> I want to run a specific plugin only for a specific file.\r\n\r\nLet specific file denoted by `foo.js`, if you really want to isolate `foo.js`'s config from other sources, you can create a new Babel config file (`foo.babel.config.json`) just for that `foo.js`. And then add a new pass to your build commands:\r\n\r\n```sh\r\nnpx babel --config-file foo.babel.config.json --out-dir .\/foo-output.js .\/foo.js\r\n```\r\n\r\nIn your main Babel config, you should ignore `.\/foo.js`:\r\n\r\n```json\r\n{\r\n  \"ignore\": \".\/foo.js\"\r\n}\r\n```"],"labels":["i: enhancement","i: needs triage"]},{"title":"feat: add esm experimental-loader support to @babel\/register","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | `Fixes #1, Fixes #2` <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      | ESM support for @babel\/register\r\n| Tests Added + Pass?      | none yet\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\nThis adds experimental-loader\/ESM support to @babel\/register, which is a much wanted feature\r\n\r\nI'm aware of experimental-loader being unstable, I'd still find it cool if it would be available at least behind a flag. Since it has to be loaded with --experimental-loader it should be clear that it's prone to breakage.\r\n\r\nThe code is basically \"let's just get it working\". Unstructured first attempt, for the project I tested it on it appears to work.\r\n\r\nSince there is no way I'm aware to load @babel\/register \"the old way\" and specify the config along, I added an environment variable which can be used to specify one. I'm open to better solutions. (edit: there's now a way to do it via ipc between loader and application, but it may be async and BABEL_REGISTER automatically preloads config. for esm configs there's --import, but it's not in any lts yet https:\/\/github.com\/nodejs\/node\/issues\/40110)\r\n\r\n```sh\r\nBABEL_REGISTER=$PWD\/register.mjs node --experimental-loader @babel\/register\/loader.mjs src\/bin.ts\r\n```\r\n\r\n```js\r\nimport { dirname, join } from 'path'\r\nimport { fileURLToPath } from 'url'\r\n\r\nconst __dirname = dirname(fileURLToPath(import.meta.url))\r\n\r\n\/\/ This adds the registration to the Node args, which are passed\r\n\/\/ to child processes by Node when we fork.\r\nconst loader = process.argv[process.argv.indexOf('--experimental-loader') + 1]\r\nprocess.execArgv.push('--experimental-loader', loader);\r\n\r\nexport default {\r\n    cwd: join(__dirname, 'src'),\r\n    only: [join(__dirname, 'src')],\r\n    presets: ['module:@babel\/preset-typescript'],\r\n    extensions: ['.ts', '.js'],\r\n    envName: 'development',\r\n}\r\n```\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15456\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/54047\/","i came across .\/packages\/babel-core\/src\/vendor\/import-meta-resolve.js... maybe that has better import resolution code. ","hrm... so support goes back to node 12\r\n\r\nbiggest change is ~~context being just a string (parentURL).~~ a few functions are named differently. the loader.mjs should be working if I could get it to be compiled via the build system as ESM, as some stuff isn't available in node 12\/14","the loader seems to be in a different context, i'm handling this now (tests aren't done). cjs loading is explicitly not supported by esm loaders and needs to be handeled by the application context (aka the usual way). for cjs workers will likely be needed (setup\/config can be done via messageport) but the esm part likely won't need any workers, since the loader itself will be the worker, so it may make sense to get rid of that eventually\r\n","~~Currently tests fail, but it's the babel-node ones, not the one from this change. Not sure but it could be that switching the worker argument from class to string might have messed up something that babel-node depends on.~~\r\n\r\n~~Problem is that loaders run in seperate context and all we get is a message port there, which doesn't like pushing complex objects over it.~~\r\n\r\nedit: tests fixed","I've released a built package here if anyone wants to try: https:\/\/github.com\/mkg20001\/babel\/releases\r\n\r\nIt worked on the node 14 project i tried it on, but might break on some edge case that I'd like to know about","ah windows, forgot about that... most likely just path seperator stuff\r\n\r\nand node 12 doesn't do await in top-level","> Since there is no way I'm aware to load @babel\/register \"the old way\" and specify the config along\r\n\r\nSorry I didn't fully understand what you mean, can we use similar usage?\r\nhttps:\/\/github.com\/esbuild-kit\/esm-loader#usage\r\n\r\n> ah windows, forgot about that... most likely just path seperator stuff\r\n\r\nDon't worry, I can help if you don't have a windows device.","> Sorry I didn't fully understand what you mean, can we use similar usage? [esbuild-kit\/esm-loader#usage](https:\/\/github.com\/esbuild-kit\/esm-loader#usage)\r\n\r\nwe already do, because we also use environment variables to configure. we can autoload .babelrc like babel-node, but maybe we can just extend babel-node to support esm aswell.\r\n\r\nedit: babel-node is the tool that would have a usage most similar to esm-loader's cli","how is a file with .cjs extension supposed to be handled by babel? we can autodetect the type and pass it along as parameter to the worker. currently it just detects it as a module because that's the result we get from the worker after transformation.\r\n\r\nwe need to get the type from the worker after transformation, as the code might be transpiled to commonjs (in the case of the loader this would mean that we'll return commonjs as the type and node then uses the pirates hook to load the file)","Files that are modules could be transformed into commonjs, the user might\nwant to do things like not specify a file extension (as is common in\ntypescript) and resolve needs to account for that, etc.\n\nliuxingbaoyu ***@***.***> schrieb am Mo., 6. M\u00e4rz 2023, 15:19:\n\n> ***@***.**** commented on this pull request.\n> ------------------------------\n>\n> In packages\/babel-register\/src\/loader.mjs\n> <https:\/\/github.com\/babel\/babel\/pull\/15456#discussion_r1126484041>:\n>\n> > +    return next.url;\n> +  } catch (error) {\n> +    \/\/ do nothing\n> +  }\n> +}\n> +\n> +async function exists(path) {\n> +  try {\n> +    await access(path, constants.R_OK);\n> +    return true;\n> +  } catch (error) {\n> +    \/\/ do nothing\n> +  }\n> +}\n> +\n> +export async function resolve(specifier, context, nextResolve) {\n>\n> I don't think it is necessary. According to my understanding, esm-loader\n> allows multiple and sequential processing, and https has another loader\n> to provide support.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/babel\/babel\/pull\/15456#discussion_r1126484041>, or\n> unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AB3AO2J5EORR6V7T5IZTQ43W2XW67ANCNFSM6AAAAAAVFABQTA>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***>\n>\n","> Files that are modules could be transformed into commonjs, the user might\r\nwant to do things like not specify a file extension (as is common in\r\ntypescript) and resolve needs to account for that, etc.\r\n\r\nI'd prefer to not to this (especially by default), and instead stick to the default semantics of Node.js. If users want different behaviors, they can use multiple loaders for that. Babel should only handle transpilation.","Per spec things first go through resolve and that then returns whether the file is commonjs or a module (with load only being called for format=module), so we need to return it there anyways. It is planned to allow CJS loading with experimental loaders _eventually_. We need our own resolve as nodeJS's resolve won't resolve for example a  .ts file, because that's not an extension it recognizes as valid. It'll just throw ERR_UNKNOWN_FILE_EXTENSION.\r\n\r\n>    \/\/ loader. Avoiding the need for a separate CommonJS handler is a future\r\n>    \/\/ enhancement planned for ES module loaders.\r\n\r\nhttps:\/\/nodejs.org\/api\/esm.html#transpiler-loader\r\n\r\nBut  that aside, typescript can be compiled to both cjs and esm both under the .ts extension, depending on which settings are used. Say you have a bunch of typescript in a package that is \"type\": \"module\", that is where that code is really necesarry. esm-loader has it's own resolve function aswell. https:\/\/github.com\/esbuild-kit\/esm-loader\/blob\/develop\/src\/loaders.ts#L98 Also, typescript can be written with import statements, but then end up being compiled to cjs in a package that isn't \"type\": \"module\". (Typescript is just a good example, it applies to pretty much everything)\r\n\r\nI'd be open to taking the esm-loader logic as a base or having something like pirates but for esm that handles the more complicated parts and simply gives us files to transpile, but until that exists we need our own resolve logic. I tried to re-use as much as possible directly from the node internals, ending up with what is currently this loader's resolve function. Ain't pretty but it works."],"labels":["PR: New Feature :rocket:","i: discussion","pkg: register"]},{"title":"Don't lose comments when converting ESM to commonjs","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #8775, fixes #9880\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15428\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\n\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/53917\/","This PR could supersede https:\/\/github.com\/babel\/babel\/pull\/15255, but I'm not sure which is better for the first and last comments.\ud83d\ude15"],"labels":["PR: Bug Fix :bug:","area: modules","area: comments"]},{"title":"[Bug]: babel-node --test internal-errors: Could not find '\/app\/node_modules\/@babel\/node\/lib\/_babel-node'","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/register or @babel\/node\n\n### Input code\n\n```bash\r\nnpx -p @babel\/node babel-node --test\r\n```\r\n\r\nOr, in any project with `@babel\/node` installed:\r\n```bash\r\nnpx babel-node --test\r\nnode_modules\/.bin\/babel-node --test\r\n```\r\n\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\n`babel-node` prints this slightly odd error:\r\n\r\n(for `npx -p`)\r\n```\r\nCould not find '\/home\/faux\/.cache\/npm\/_npx\/88ef5472e811fc37\/node_modules\/@babel\/node\/lib\/_babel-node'\r\n```\r\n\r\n(for app)\r\n```\r\nCould not find '\/var\/app\/node_modules\/@babel\/node\/lib\/_babel-node'\r\n```\r\n\r\n\r\nI was hoping it would perform the same as the experimental node 18 test framework, wherein `node --test` would go run my tests, but pre-processing them with babel.\r\n\n\n### Environment\n\n```\r\n  System:\r\n    OS: Linux 5.19 Ubuntu 22.10 22.10 (Kinetic Kudu)\r\n  Binaries:\r\n    Node: 18.14.0 - \/tmp\/fnm_multishells\/52480_1676211961346\/bin\/node\r\n    Yarn: 1.22.10 - ~\/.npm-packages\/bin\/yarn\r\n    npm: 9.3.1 - \/tmp\/fnm_multishells\/52480_1676211961346\/bin\/npm\r\n  npmPackages:\r\n    @babel\/core: ^7.20.12 => 7.20.12 \r\n    @babel\/node: ^7.20.7 => 7.20.7 \r\n```\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nIntelliJ's debugger thinks the stack trace here is:\r\n\r\n```\r\nnode:internal\/main\/test_runner:89\r\ncreateTestFileList (run_main_module:89)\r\nmain (run_main_module:141)\r\n(anonymous function) (run_main_module:146)\r\n```\r\n\r\n...but I do not know what this means. It appears to contain no babel code, so, uh, I would understand if you were to tell me this was an upstream issue. I don't have much hope of them fixing it, though, so I'm reporting it here instead.\r\n","comments":["Hey @FauxFaux! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","`node -r @babel\/register --test`\r\nCan you try this?","That seems to work in the nice, clean environment I shared above.\r\n\r\n```\r\nTAP version 13\r\n1..0\r\n# tests 0\r\n# pass 0\r\n# fail 0\r\n# cancelled 0\r\n# skipped 0\r\n# todo 0\r\n# duration_ms 1.997164\r\n```\r\n\r\n(I think I tried it in my other project, and it also failed, but it may have been for another reason. I threw all the stuff away once I had a clean reproducer, alas. Oh, maybe it was because I need to specify to handle the `.ts` extension, which is a whole other mess with `--test`.) ","This can be fixed by `babel-node`, but I personally recommend `babel-register`."],"labels":["i: bug","pkg: node"]},{"title":"[Bug]: Some of the proposed methods do not seem to have been realised","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nbabel-loader (webpack)\r\n\r\n### Input code\r\n\r\nI used two methods that are currently in `stage-1`\r\n\r\n````js\r\n[1, 2, 3, 4, 5].filterReject(it => it % 2); \/\/ => [2, 4]\r\n\r\n\r\n[1, 2, 3].lastItem;  \/\/ => 3\r\n[1, 2, 3].lastIndex; \/\/ => 2\r\n````\r\n\r\n### Configuration file name\r\n\r\nbabel.config.js\r\n\r\n### Configuration\r\n\r\n````js\r\nconst presets = [\r\n    '@babel\/preset-env'\r\n];\r\n\r\nconst plugins = [\r\n    [\r\n        '@babel\/plugin-transform-runtime',\r\n        {\r\n            corejs: {\r\n                version: 3,\r\n                proposals: true\r\n            }\r\n        }\r\n    ]\r\n];\r\n\r\nmodule.exports = {plugins, presets};\r\n````\r\n\r\n### Current and expected behavior\r\n\r\nBabel compiles and outputs the following result:\r\n\r\n````js\r\n\"use strict\";\r\n\r\n[1, 2, 3, 4, 5].filterReject(function (it) {\r\n  return it % 2;\r\n}); \/\/ => [2, 4]\r\n\r\n[1, 2, 3].lastItem; \/\/ => 3\r\n[1, 2, 3].lastIndex; \/\/ => 2\r\n````\r\n\r\nIt does not appear to introduce the relevant polyfill to implement\r\n\r\n### Environment\r\n\r\nSystem:\r\n    OS: Windows 10 10.0.18363\r\n  Binaries:\r\n    Node: 14.16.1 - D:\\nodejs\\node.EXE\r\n    Yarn: 1.19.1 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 6.14.12 - D:\\nodejs\\npm.CMD\r\n  npmPackages:\r\n    @babel\/cli: ^7.20.7 => 7.20.7\r\n    @babel\/core: ^7.20.12 => 7.20.12\r\n    @babel\/plugin-transform-runtime: ^7.19.6 => 7.19.6\r\n    @babel\/preset-env: ^7.20.2 => 7.20.2\r\n    @babel\/runtime-corejs2: ^7.20.13 => 7.20.13\r\n    @babel\/runtime-corejs3: ^7.20.13 => 7.20.13\r\n    babel-loader: ^9.1.2 => 9.1.2\r\n    webpack: ^5.75.0 => 5.75.0\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @limingcan562! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","To fix this issue the `transform-runtime` should support string `corejs` option, like we did for `preset-env`.\r\n\r\nAs a workaround, you can replace `transform-runtime` by `babel-plugin-polyfill-corejs3`, which has already been used by `transform-runtime` under the hood:\r\n\r\n```js\r\nconst plugins = [\r\n    [\r\n        'babel-plugin-polyfill-corejs3',\r\n        {\r\n          \/\/ provide the exact `core-js` version you are using\r\n          version: \"3.27\",\r\n          proposals: true\r\n        }\r\n    ]\r\n];\r\n```","I have tried it and it is basically fine.\r\n\r\nI looked at the [babel-polyfills](https:\/\/github.com\/babel\/babel-polyfills) and some examples, but found that there was only the `method` configuration, not `version`and `proposals`.\r\n\r\nAre there any other configuration items in `babel-plugin-polyfill-corejs3`?\r\nOr is there documentation for `babel-plugin-polyfill-corejs3`?\r\n\r\n","> To fix this issue the `transform-runtime` should support string `corejs` option, like we did for `preset-env`.\r\n> \r\n> As a workaround, you can replace `transform-runtime` by `babel-plugin-polyfill-corejs3`, which has already been used by `transform-runtime` under the hood\r\n\r\nHello, I'm sorry to bother you again. I am currently delving deeper into Babel (as it is a great tool) and based on the above answers. So I have the following questions and I hope to receive your answers:\r\n\r\n1. Can I directly use the `babel-plugin-polyfill-corejs3` configuration method instead of the `@babel\/preset-env` or `@babel\/plugin-transform-runtime` configuration method to inject different `polyfills`?\r\n2. Is there a full documentation for `babel-plugin-polyfill-corejs3`?\r\n- Because the usage of the [example](https:\/\/github.com\/babel\/babel-polyfills\/blob\/main\/docs\/migration.md) provided by `babel-polyfills` is not quite the same as the [documentation](https:\/\/github.com\/babel\/babel-polyfills\/tree\/main\/packages\/babel-plugin-polyfill-corejs3) for `babel-plugin-polyfill-corejs3`.\r\n- Also, I think a lot of people have the same confusion as I do. I don't know how many configuration items there are for `babel-plugin-polyfill-corejs3`.   \r\nI looked at some [historical issues](https:\/\/github.com\/babel\/babel\/discussions\/13998#discussioncomment-1700701) and found that `babel-plugin-polyfill-corejs3` still has a lot of configuration items, so I'm confused about some of the uses of `babel-plugin-polyfill-corejs3`.\r\n\r\nLooking forward to your reply, appreciate it! \ud83d\ude4f\ud83c\udffb\r\n","> Can I directly use the babel-plugin-polyfill-corejs3 configuration method instead of the @babel\/preset-env or @babel\/plugin-transform-runtime configuration method to inject different polyfills?\r\n\r\nYes, in fact `@babel\/preset-env` is using `babel-plugin-polyfill-corejs3`, too: https:\/\/github.com\/babel\/babel\/blob\/0f492e4fa3610e167f331bc7aaa98632a26e30eb\/packages\/babel-preset-env\/src\/index.ts#L219\r\n\r\n> the usage of the [example](https:\/\/github.com\/babel\/babel-polyfills\/blob\/main\/docs\/migration.md) provided by babel-polyfills is not quite the same as the [documentation](https:\/\/github.com\/babel\/babel-polyfills\/tree\/main\/packages\/babel-plugin-polyfill-corejs3) for babel-plugin-polyfill-corejs3.\r\n\r\nThe document of `babel-plugin-polyfill-corejs3` consists of two sections. The first section\r\n\r\n> See [here](https:\/\/github.com\/babel\/babel-polyfills\/blob\/main\/docs\/usage.md#options) for a list of options supported by every polyfill provider.\r\n\r\nprovides a link to options supported by every polyfill provider, including `babel-plugin-polyfill-corejs3`.\r\n\r\nThe second sections includes options that are _only_ supported in `babel-plugin-polyfill-corejs3`, namely `version` and `proposals`. In other words, `babel-plugin-polyfill-corejs3` supports options listed in https:\/\/github.com\/babel\/babel-polyfills\/blob\/main\/docs\/usage.md#options, as well as `version` and `proposals`.\r\n\r\nIf you have any questions on docs, feel free to open a PR at https:\/\/github.com\/babel\/babel-polyfills.","Thank you for your answer! This has given me a deeper understanding of `babel-plugin-polyfill-corejs3`!\r\n\r\nI think `babel-plugin-polyfill-corejs3` is very useful, but the official documentation doesn't seem to promote it much. Why is this?\r\n\r\nOr will it be promoted during `Babel8`?"],"labels":["pkg: polyfill","i: docs"]},{"title":"fix: `nextNode.loc?.start.line` undefined exception","body":"| Q      | A |\r\n| ----------- | ----------- |\r\n| Fixed Issues?      | Fixes #15292        |\r\n| Patch: Bug Fix?   |        |\r\n| Major: Breaking Change? | |\r\n| Minor: New Feature? | |\r\n| Tests Added + Pass? | |\r\n| Documentation PR Link | |\r\n| Any Dependency Changes? | |\r\n| License | MIT |\r\n\r\n\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15386\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/53820\/","Thank you! Could you add a test that shows in which conditions this bug was triggered? In theory, if `node.loc` is defined `node.loc.start` should already always be defined."],"labels":["PR: Bug Fix :bug:","pkg: generator"]},{"title":"[Bug]: babel\/preset-env - document says esmodules is intersected, build warning says its ignored.","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nbabel-loader (webpack)\r\n\r\n### Input code\r\n\r\n```js\r\nconsole.log('hello world!');\r\n```\r\n\r\n### Configuration file name\r\n\r\n.babelrc.json\r\n\r\n### Configuration\r\n\r\n```json\r\n{\r\n  \"presets\": [\r\n    [\r\n      \"@babel\/preset-env\",\r\n      {\r\n        \"bugfixes\": true,\r\n        \"targets\": {\r\n          \"browsers\": \"Edge >= 108, Firefox >= 108, FirefoxAndroid  >= 107, Chrome >= 108, ChromeAndroid >= 108, Safari >= 16.1, iOS >= 16.1, not dead\",\r\n          \"esmodules\": true\r\n        },\r\n        \"useBuiltIns\": \"usage\",\r\n        \"corejs\": \"3.27.2\"\r\n      }\r\n    ]\r\n  ]\r\n}\r\n```\r\n\r\n### Current and expected behavior\r\n\r\nDocumentation for [options \"targets\"](https:\/\/babeljs.io\/docs\/en\/options#targets) says:\r\n\r\n> Please note: when specifying both browsers and the esmodules target, they will be intersected.\r\n\r\nHowever, when building the following message is displayed.  \r\n\r\n> @babel\/preset-env: esmodules and browsers targets have been specified together.\r\n>`browsers` target, `Edge >= 108, Firefox >= 108, FirefoxAndroid  >= 107, Chrome >= 108, ChromeAndroid >= 108, Safari >= 16.1, iOS >= 16.1, not dead` will be ignored.\r\n\r\nWhich is correct ?  Is it intersected or ignored ?\r\n\r\n### Environment\r\n\r\nBabel Versions: \r\n  - \"@babel\/core\": \"^7.20.12\",\r\n  - \"@babel\/preset-env\": \"^7.20.2\",\r\n  - \"babel-loader\": \"^9.1.2\",\r\n\r\nNode Versions:\r\n  - npm 8.19.3\r\n  - node 18.13.0\r\n\r\nOS:\r\n  - WIndows 10\r\n  - OSX (latest)\r\n\r\n### Possible solution\r\n\r\nDepending on which is correct, update documentation or warning message in `babel\/preset-env`\r\n\r\n### Additional context\r\n\r\nI would like rely on the intersection behaviour in the future, if possible.","comments":["Hey @epreston! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Thank you babel-bot.  We need to update the documentation or tool.","It should definitely be intersected, I'll check what the code does.","If you specify your targets at the top level of your config (so in the generic Babel options \u2014 https:\/\/babeljs.io\/docs\/en\/options#targetsesmodules), `esmodules` will be intersected with `browsers`:\r\n```json\r\n{\r\n  \"targets\": {\r\n    \"browsers\": \"Edge >= 108, Firefox >= 108, FirefoxAndroid  >= 107, Chrome >= 108, ChromeAndroid >= 108, Safari >= 16.1, iOS >= 16.1, not dead\",\r\n     \"esmodules\": true\r\n  },\r\n  \"presets\": [\r\n    [\r\n      \"@babel\/preset-env\",\r\n      {\r\n        \"bugfixes\": true,\r\n        \"useBuiltIns\": \"usage\",\r\n        \"corejs\": \"3.27.2\"\r\n      }\r\n    ]\r\n  ]\r\n}\r\n```\r\n\r\nHowever, for backward compatibility we couldn't change the pre-existing behavior of `@babel\/preset-env`'s `targets` option, so `esmodules` there completely overwrites `browsers`. We need to document this.\r\n\r\nI recommend using the top-level `targets` option, instead of `@babel\/preset-env`'s `targets`, because:\r\n- it has the better intersection behavior\r\n- can also be read by other plugins that can adjust their behavior based on your targets, while if you use it just in `@babel\/preset-env` other plugins will always assume the oldest possible targets.","> We need to document this.\r\n\r\nWe can also modify the message in code to link to the documentation.","I see, that makes sense.  You are right, using the top-level targets option is the best way to go.  \r\n\r\nShould I leave this open to capture the \"documentation\" task ?","> Should I leave this open to capture the \"documentation\" task ?\r\n\r\nYes please! (or, if you want to open a PR to github.com\/babel\/website, that would be even better :eyes:)","Good idea, I will try my hand at updating the documentation.  I'll reference the info you provided here and close issue once the PR is submitted.","PR Submitted.  Thank you for clarifying this for me.","> Yes please! (or, if you want to open a PR to github.com\/babel\/website, that would be even better \ud83d\udc40)\r\n\r\nI did that, waited a month.  What's the process ?","Sorry, the only problem was that I somehow forgot about your PR \ud83d\ude05","Maybe it's for the best.  @JLHwung was able to help us refine it with the extra time."],"labels":["pkg: preset-env","i: docs"]},{"title":"Improve sourcemaps of `this` during async transformation","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #15362 <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          | \u221a\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | \u221a\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\n[sourcemap](https:\/\/evanw.github.io\/source-map-visualization\/#NDMwAGNsYXNzIEZvbyB7CiAgYmFyKCkgewogICAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHMsCiAgICAgIF9uZXd0YXJnZXQgPSBuZXcudGFyZ2V0LAogICAgICBfc3VwZXJwcm9wX2dldEEgPSAoKSA9PiBzdXBlci5hLAogICAgICBfc3VwZXJwcm9wX2dldCA9IF9wcm9wID0+IHN1cGVyW19wcm9wXSwKICAgICAgX3RoaXMgPSB0aGlzOwogICAgcmV0dXJuIGJhYmVsSGVscGVycy5hc3luY1RvR2VuZXJhdG9yKGZ1bmN0aW9uKiAoKSB7CiAgICAgIF9zdXBlcnByb3BfZ2V0QSgpLmNhbGwoX3RoaXMpOwogICAgICBfc3VwZXJwcm9wX2dldEEoKTsKICAgICAgX3N1cGVycHJvcF9nZXQoJ2EnKTsKICAgICAgX3N1cGVycHJvcF9nZXQoYSk7CiAgICAgIF90aGlzLmE7CiAgICAgIF9uZXd0YXJnZXQ7CiAgICAgIF9hcmd1bWVudHNbMF07CiAgICB9KSgpOwogIH0KfQo1OTgAewogICJ2ZXJzaW9uIjogMywKICAibmFtZXMiOiBbCiAgICAiRm9vIiwKICAgICJiYXIiLAogICAgInN1cGVyLmEiLAogICAgImEiLAogICAgInRoaXMiLAogICAgIm5ldy50YXJnZXQiLAogICAgImFyZ3VtZW50cyIKICBdLAogICJzb3VyY2VzIjogWwogICAgInNvdXJjZW1hcHMvdGhpcy1zdXBlci1hcmd1bWVudHMvaW5wdXQuanMiCiAgXSwKICAic291cmNlc0NvbnRlbnQiOiBbCiAgICAiY2xhc3MgRm9vIHtcbiAgYXN5bmMgYmFyKCkge1xuICAgIHN1cGVyLmEoKTtcbiAgICBzdXBlci5hO1xuICAgIHN1cGVyWydhJ107XG4gICAgc3VwZXJbYV07XG4gICAgdGhpcy5hO1xuICAgIG5ldy50YXJnZXQ7XG4gICAgYXJndW1lbnRzWzBdO1xuICB9XG59IgogIF0sCiAgIm1hcHBpbmdzIjogIkFBQUEsTUFBTUEsR0FBRyxDQUFDO0VBQ0ZDLEdBQUcsR0FBRztJQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtNQUNWLDZCQUFTO01BQ1RDLGlCQUFPO01BQ1AsZUFBTSxHQUFHLENBQUM7TUFDVixlQUFNQyxDQUFDLENBQUM7TUFDUkMsS0FBSSxDQUFDRCxDQUFDO01BQ05FLFVBQVU7TUFDVkMsVUFBUyxDQUFDLENBQUMsQ0FBQztJQUFDO0VBQ2Y7QUFDRiIKfQ==)\r\n\r\nCI failure needs to wait for https:\/\/github.com\/babel\/babel\/pull\/15361 to be merged.\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15370\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["To be honest I'm not sure if `names` in the source map has such a purpose. \ud83d\ude15","Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/53804\/","> To be honest I'm not sure if names in the source map has such a purpose.\r\n\r\nMaybe @jridgewell knows :)","> Do we still need the tests in `packages\/babel-traverse\/test\/fixtures\/conversion`?\r\n\r\nMakes sense! There seems to be a bug with this, currently only class methods are working.","Honestly, no, none of these are necessary. Names are useful for things that were identifiers in the source code, not for things that become identifiers in the output.","Yes, I tried it using this PR and the problem still persists.\r\n@connor4312 Do you have any ideas?\r\n[this-super-arguments.zip](https:\/\/github.com\/babel\/babel\/files\/10508057\/this-super-arguments.zip)\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/30521560\/214805837-07073e1f-5fd5-4fef-a36d-669060764739.png)\r\n![image](https:\/\/user-images.githubusercontent.com\/30521560\/214805874-cd05b359-3f5a-42ab-877f-8432b8ec201b.png)\r\n![image](https:\/\/user-images.githubusercontent.com\/30521560\/214806070-f7014aef-3407-4583-9dd8-15fe461deb5d.png)\r\n","I think we will also need some special handling in js-debug; `this` is [given on the callframe](https:\/\/chromedevtools.github.io\/devtools-protocol\/tot\/Debugger\/#type-CallFrame) and so takes a different code path to the **Variables** view than ordinary variables on the `scopeChain`. But the sourcemap in your zip file looks good, so if Babel decides to implement that then I can also make the corresponding changes in js-debug.","Well, it's not a bug, it's because the test suite runner is broken, after rebasing everything works fine.\r\n\r\nIn addition, I found a related PR a few years ago through git history.\r\nhttps:\/\/github.com\/babel\/babel\/pull\/7312\r\n\r\nIt seems that the Firefox debugger used to have special handling for `this`, but obviously it will parse the source file for AST-level analysis, and `js-debug` does not do such a thing.\r\n\r\nI don't know if there is a better way.\r\nPersonally I don't mind having this PR merged, even though it might be a bit out of the general use of source maps, there should be no downside after all.\r\nWhat do you think?","@liuxingbaoyu Do you have any estimation when will this fix be merged to main?","@liuxingbaoyu Do you know when will this PR be merged?","@Omcsesz Unfortunately this PR didn't get approved and I'm not sure if it will be merged.","From my personal perspective, I completely agree that this is not something in the source map specification, but since the debugger authors of VS Code are also willing to support this use case, I don't mind merging it. What do you think?","> From my personal perspective, I completely agree that this is not something in the source map specification, but since the debugger authors of VS Code are also willing to support this use case, I don't mind merging it. What do you think?\r\n\r\nI think that you should merge it.","No, in Babel a PR must be approved by two other reviewers before being merged.\r\n\r\nBut inspired by https:\/\/github.com\/babel\/babel\/issues\/15921, we may be able to solve the most common `this` problem in another way.","I would be ok with merging this -- we are working on standardizing better source maps (https:\/\/github.com\/tc39\/source-map-rfc\/), so it's important that the spec follows what's actually needed and not the other way around :)\r\n\r\nAlso, what I learned so far is that nobody knows what `names` is actually for. We are working on better alternative, but so far this is what we have.","> I would be ok with merging this -- we are working on standardizing better source maps (https:\/\/github.com\/tc39\/source-map-rfc\/), so it's important that the spec follows what's actually needed and not the other way around :)\r\n> \r\n> Also, what I learned so far is that nobody knows what `names` is actually for. We are working on better alternative, but so far this is what we have.\r\n\r\n@nicolo-ribaudo Good to hear. :) Is there any progress on this topic on Github Issues?"],"labels":["PR: Polish :nail_care:","i: discussion","pkg: traverse","area: sourcemaps"]},{"title":"[Bug]: @babel\/plugin-external-helpers broken output with regeneratorRuntime","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n`node -e \"console.log(require('@babel\/core').transformSync('const balls = async () => { console.log(await Promise.resolve(0)); };', {plugins: ['@babel\/plugin-external-helpers'], presets: ['@babel\/preset-env']}).code)\"`\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nCurrent behavior: Despite handling another helper (`asyncToGenerator`) correctly, `regeneratorRuntime` is incorrectly emitted as `_regeneratorRuntime` with an inline helper included.\r\n\r\nExpected behavior: No inline helper function should be emitted. Instead, it should be referenced as `babelHelpers.regeneratorRuntime`.\r\n\r\n### Environment\r\n\r\n`babel --version` output:\r\n\r\n```\r\nBabel version: 7.20.7 (@babel\/core 7.20.12)\r\n```\r\n\r\n`envinfo --preset babel` output:\r\n\r\n```\r\n  System:\r\n    OS: Linux 5.10 Debian GNU\/Linux 11 (bullseye) 11 (bullseye)\r\n  Binaries:\r\n    Node: 18.12.1 - ~\/nodejs\/bin\/node\r\n    Yarn: 1.22.19 - \/usr\/bin\/yarn\r\n    npm: 8.19.2 - ~\/nodejs\/bin\/npm\r\n```\r\n\r\n### Possible solution\r\n\r\nApplying the following patch to node_modules\/@babel\/plugin-external-helpers\/lib\/index.js is an effective temporary workaround:\r\n\r\n```\r\n29c29\r\n<         if (file.availableHelper && !file.availableHelper(name, helperVersion)) {\r\n---\r\n>         if (name !== 'regeneratorRuntime' && file.availableHelper && !file.availableHelper(name, helperVersion)) {\r\n```\r\n\r\nHopefully that helps point you in the right direction for a proper long-term solution.\r\n\r\n### Additional context\r\n\r\nI don't mind if #15367 is left unresolved in lieu of fixing this, but having both broken is a major issue.","comments":["Hey @buu700! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Here's the output I get, which seems to be fine.\r\n```js\r\n\"use strict\";\r\n\r\nfunction _regeneratorRuntime() { \"use strict\"; \/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https:\/\/github.com\/facebook\/regenerator\/blob\/main\/LICENSE *\/ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == babelHelpers[\"typeof\"](value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\r\nvar balls = \/*#__PURE__*\/function () {\r\n  var _ref = babelHelpers.asyncToGenerator( \/*#__PURE__*\/_regeneratorRuntime().mark(function _callee() {\r\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\r\n      while (1) switch (_context.prev = _context.next) {\r\n        case 0:\r\n          _context.t0 = console;\r\n          _context.next = 3;\r\n          return Promise.resolve(0);\r\n        case 3:\r\n          _context.t1 = _context.sent;\r\n          _context.t0.log.call(_context.t0, _context.t1);\r\n        case 5:\r\n        case \"end\":\r\n          return _context.stop();\r\n      }\r\n    }, _callee);\r\n  }));\r\n  return function balls() {\r\n    return _ref.apply(this, arguments);\r\n  };\r\n}();\r\n```","Whoops, sorry, I must have accidentally submitted before writing the expected behavior. Please see the updated ticket description.\r\n\r\nThat output is consistent with what I'm seeing.","`node -e \"console.log(require('@babel\/core').transformSync('const balls = async () => { console.log(await Promise.resolve(0)); };', {plugins: [['@babel\/plugin-external-helpers', { 'helperVersion': '7.20.0' }]], presets: ['@babel\/preset-env']}).code)\"`\r\n\r\nThis appears to be a documentation issue.\ud83e\udd26\u200d\u2642\ufe0f\r\nref: https:\/\/github.com\/babel\/babel\/issues\/13700#issuecomment-904130754\r\n","Ah, that's good to know, thanks! Having that in the documentation would definitely have saved me some time."],"labels":["i: question","area: helpers","i: docs"]},{"title":"Merge injected es6 imports","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | \r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nIn this PR we try to multiple ES6 module imports based on the imported source. We track the last injected import in `import-injector` and persist that memory throughout the program's transpiling lifecycle.\r\n\r\nThe current implementation might break if there are external imports manipulation, i.e. users are modifying imports using tools other than `helper-module-imports`, because the injected import may not be the last import of the program and we will change the semantics when the imports have side effect. We could solve this by a new linear search to get the last import, but I think such cases are rare and we can postpone such fix to the future.\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15368\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\n\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/53795\/","Some cases we can't optimize yet:\r\n\r\n```js\r\nimport * as react from \"react\";\r\nimport { jsx as _jsx } from \"react\/jsx-runtime\";\r\nimport { createElement as _createElement } from \"react\";\r\nimport { jsxs as _jsxs } from \"react\/jsx-runtime\";\r\n```\r\n\r\nMaybe we can introduce a new assumption like option (`isolatedModule`?) to allow `addNamed()` to merge imports more aggressively: not only merging to the last injected imports, but also any injected imports. As a jsx transformer we know that most jsx-runtime will satisfy this assumption and we can leverage that. General minifiers like terser will not combine such imports.","This code:\r\n```js\r\nimport { A } from \"a\";\r\nimport { B } from \"b\";\r\nimport { C } from \"a\";\r\n```\r\nis always equivalent to\r\n```js\r\nimport { A, C } from \"a\";\r\nimport { B } from \"b\";\r\n```\r\nbecause dependencies gets evaluated in the order of the _first_ import that references them.\r\n\r\nWhat's the reason to not do the more aggressive optimization by default? Just because it's more performant to not track all the imports?","@nicolo-ribaudo You are right! And they are hoisted, now I am wondering why terser does not implement that optimization. If it is generally safe, I think it'd be implemented by a minifier rather than us."],"labels":["PR: Output optimization :microscope:"]},{"title":"[Bug]: Babel does not emit a names alias","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nclass Foo {\r\n  async bar() {\r\n    return this.asdf;\r\n  }\r\n}\r\n````\n\n### Configuration file name\n\n.babelrc\n\n### Configuration\n\n```json\r\n{\r\n    \"presets\": [\r\n        [\r\n            \"@babel\/preset-env\",\r\n            {\r\n                \"targets\": {\r\n                    \"chrome\": \"50\"\r\n                }\r\n            }\r\n        ]\r\n    ]\r\n}\r\n```\n\n### Current and expected behavior\n\nCurrent behavior: Babel does not rename `this` to `_this` in the compiled file (see attachment).\r\n[test.zip](https:\/\/github.com\/babel\/babel\/files\/10488121\/test.zip)\r\nI compiled the js file with the following command:\r\n`npx babel script.js --out-file script-compiled.js --source-maps --presets=@babel\/preset-env`\n\n### Environment\n\nSystem:\r\n    OS: Windows 10 10.0.19045\r\n  Binaries:\r\n    Node: 18.12.1 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.22.19 - ~\\AppData\\Roaming\\npm\\yarn.CMD\r\n    npm: 9.3.0 - C:\\Program Files\\nodejs\\npm.CMD\n\n### Possible solution\n\nThe proper thing to do would be for Babel to emit a sourcemap `names` alias to tell the debugger `this` should be named `_this` instead.\n\n### Additional context\n\nHello, Team!\r\n\r\nI'm opening this ticket, because in the repo of Visual Studio Code I was told this is the right place (see bug ticket https:\/\/github.com\/microsoft\/vscode\/issues\/171672). Can you please fix this?","comments":["Hey @Omcsesz! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","[sourcemap](https:\/\/evanw.github.io\/source-map-visualization\/#MTUxNTUAInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgcmV0dXJuIF90eXBlb2YgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgJiYgInN5bWJvbCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA\/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA\/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9CmZ1bmN0aW9uIF9yZWdlbmVyYXRvclJ1bnRpbWUoKSB7ICJ1c2Ugc3RyaWN0IjsgLyohIHJlZ2VuZXJhdG9yLXJ1bnRpbWUgLS0gQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuIC0tIGxpY2Vuc2UgKE1JVCk6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9ibG9iL21haW4vTElDRU5TRSAqLyBfcmVnZW5lcmF0b3JSdW50aW1lID0gZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHsgcmV0dXJuIGV4cG9ydHM7IH07IHZhciBleHBvcnRzID0ge30sIE9wID0gT2JqZWN0LnByb3RvdHlwZSwgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHksIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5IHx8IGZ1bmN0aW9uIChvYmosIGtleSwgZGVzYykgeyBvYmpba2V5XSA9IGRlc2MudmFsdWU7IH0sICRTeW1ib2wgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgPyBTeW1ib2wgOiB7fSwgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8ICJAQGl0ZXJhdG9yIiwgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCAiQEBhc3luY0l0ZXJhdG9yIiwgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8ICJAQHRvU3RyaW5nVGFnIjsgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkgeyByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAsIHdyaXRhYmxlOiAhMCB9KSwgb2JqW2tleV07IH0gdHJ5IHsgZGVmaW5lKHt9LCAiIik7IH0gY2F0Y2ggKGVycikgeyBkZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7IHJldHVybiBvYmpba2V5XSA9IHZhbHVlOyB9OyB9IGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHsgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA\/IG91dGVyRm4gOiBHZW5lcmF0b3IsIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKSwgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTsgcmV0dXJuIGRlZmluZVByb3BlcnR5KGdlbmVyYXRvciwgIl9pbnZva2UiLCB7IHZhbHVlOiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIH0pLCBnZW5lcmF0b3I7IH0gZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7IHRyeSB7IHJldHVybiB7IHR5cGU6ICJub3JtYWwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07IH0gY2F0Y2ggKGVycikgeyByZXR1cm4geyB0eXBlOiAidGhyb3ciLCBhcmc6IGVyciB9OyB9IH0gZXhwb3J0cy53cmFwID0gd3JhcDsgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTsgZnVuY3Rpb24gR2VuZXJhdG9yKCkge30gZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fSBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9IHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9OyBkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTsgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLCBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTsgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiYgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkgJiYgKEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUpOyB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7IGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHsgWyJuZXh0IiwgInRocm93IiwgInJldHVybiJdLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkgeyBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7IH0pOyB9KTsgfSBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHsgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHsgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7IGlmICgidGhyb3ciICE9PSByZWNvcmQudHlwZSkgeyB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZywgdmFsdWUgPSByZXN1bHQudmFsdWU7IHJldHVybiB2YWx1ZSAmJiAib2JqZWN0IiA9PSBfdHlwZW9mKHZhbHVlKSAmJiBoYXNPd24uY2FsbCh2YWx1ZSwgIl9fYXdhaXQiKSA\/IFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsgaW52b2tlKCJuZXh0IiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgaW52b2tlKCJ0aHJvdyIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTsgfSkgOiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uICh1bndyYXBwZWQpIHsgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkLCByZXNvbHZlKHJlc3VsdCk7IH0sIGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gaW52b2tlKCJ0aHJvdyIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpOyB9KTsgfSByZWplY3QocmVjb3JkLmFyZyk7IH0gdmFyIHByZXZpb3VzUHJvbWlzZTsgZGVmaW5lUHJvcGVydHkodGhpcywgIl9pbnZva2UiLCB7IHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShtZXRob2QsIGFyZykgeyBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHsgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTsgfSk7IH0gcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9IHByZXZpb3VzUHJvbWlzZSA\/IHByZXZpb3VzUHJvbWlzZS50aGVuKGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLCBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZykgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpOyB9IH0pOyB9IGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkgeyB2YXIgc3RhdGUgPSAic3VzcGVuZGVkU3RhcnQiOyByZXR1cm4gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7IGlmICgiZXhlY3V0aW5nIiA9PT0gc3RhdGUpIHRocm93IG5ldyBFcnJvcigiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZyIpOyBpZiAoImNvbXBsZXRlZCIgPT09IHN0YXRlKSB7IGlmICgidGhyb3ciID09PSBtZXRob2QpIHRocm93IGFyZzsgcmV0dXJuIGRvbmVSZXN1bHQoKTsgfSBmb3IgKGNvbnRleHQubWV0aG9kID0gbWV0aG9kLCBjb250ZXh0LmFyZyA9IGFyZzs7KSB7IHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7IGlmIChkZWxlZ2F0ZSkgeyB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTsgaWYgKGRlbGVnYXRlUmVzdWx0KSB7IGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7IHJldHVybiBkZWxlZ2F0ZVJlc3VsdDsgfSB9IGlmICgibmV4dCIgPT09IGNvbnRleHQubWV0aG9kKSBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7ZWxzZSBpZiAoInRocm93IiA9PT0gY29udGV4dC5tZXRob2QpIHsgaWYgKCJzdXNwZW5kZWRTdGFydCIgPT09IHN0YXRlKSB0aHJvdyBzdGF0ZSA9ICJjb21wbGV0ZWQiLCBjb250ZXh0LmFyZzsgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7IH0gZWxzZSAicmV0dXJuIiA9PT0gY29udGV4dC5tZXRob2QgJiYgY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGNvbnRleHQuYXJnKTsgc3RhdGUgPSAiZXhlY3V0aW5nIjsgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpOyBpZiAoIm5vcm1hbCIgPT09IHJlY29yZC50eXBlKSB7IGlmIChzdGF0ZSA9IGNvbnRleHQuZG9uZSA\/ICJjb21wbGV0ZWQiIDogInN1c3BlbmRlZFlpZWxkIiwgcmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7IHJldHVybiB7IHZhbHVlOiByZWNvcmQuYXJnLCBkb25lOiBjb250ZXh0LmRvbmUgfTsgfSAidGhyb3ciID09PSByZWNvcmQudHlwZSAmJiAoc3RhdGUgPSAiY29tcGxldGVkIiwgY29udGV4dC5tZXRob2QgPSAidGhyb3ciLCBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmcpOyB9IH07IH0gZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkgeyB2YXIgbWV0aG9kTmFtZSA9IGNvbnRleHQubWV0aG9kLCBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2ROYW1lXTsgaWYgKHVuZGVmaW5lZCA9PT0gbWV0aG9kKSByZXR1cm4gY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsICJ0aHJvdyIgPT09IG1ldGhvZE5hbWUgJiYgZGVsZWdhdGUuaXRlcmF0b3JbInJldHVybiJdICYmIChjb250ZXh0Lm1ldGhvZCA9ICJyZXR1cm4iLCBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZCwgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCksICJ0aHJvdyIgPT09IGNvbnRleHQubWV0aG9kKSB8fCAicmV0dXJuIiAhPT0gbWV0aG9kTmFtZSAmJiAoY29udGV4dC5tZXRob2QgPSAidGhyb3ciLCBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJyIgKyBtZXRob2ROYW1lICsgIicgbWV0aG9kIikpLCBDb250aW51ZVNlbnRpbmVsOyB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpOyBpZiAoInRocm93IiA9PT0gcmVjb3JkLnR5cGUpIHJldHVybiBjb250ZXh0Lm1ldGhvZCA9ICJ0aHJvdyIsIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZywgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWw7IHZhciBpbmZvID0gcmVjb3JkLmFyZzsgcmV0dXJuIGluZm8gPyBpbmZvLmRvbmUgPyAoY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWUsIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2MsICJyZXR1cm4iICE9PSBjb250ZXh0Lm1ldGhvZCAmJiAoY29udGV4dC5tZXRob2QgPSAibmV4dCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkKSwgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWwpIDogaW5mbyA6IChjb250ZXh0Lm1ldGhvZCA9ICJ0aHJvdyIsIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcigiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3QiKSwgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWwpOyB9IGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7IHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07IDEgaW4gbG9jcyAmJiAoZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdKSwgMiBpbiBsb2NzICYmIChlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXSwgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdKSwgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpOyB9IGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHsgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307IHJlY29yZC50eXBlID0gIm5vcm1hbCIsIGRlbGV0ZSByZWNvcmQuYXJnLCBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkOyB9IGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHsgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiAicm9vdCIgfV0sIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKSwgdGhpcy5yZXNldCghMCk7IH0gZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7IGlmIChpdGVyYWJsZSkgeyB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07IGlmIChpdGVyYXRvck1ldGhvZCkgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpOyBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgaXRlcmFibGUubmV4dCkgcmV0dXJuIGl0ZXJhYmxlOyBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHsgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7IGZvciAoOyArK2kgPCBpdGVyYWJsZS5sZW5ndGg7KSBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSByZXR1cm4gbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldLCBuZXh0LmRvbmUgPSAhMSwgbmV4dDsgcmV0dXJuIG5leHQudmFsdWUgPSB1bmRlZmluZWQsIG5leHQuZG9uZSA9ICEwLCBuZXh0OyB9OyByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDsgfSB9IHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTsgfSBmdW5jdGlvbiBkb25lUmVzdWx0KCkgeyByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiAhMCB9OyB9IHJldHVybiBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lUHJvcGVydHkoR3AsICJjb25zdHJ1Y3RvciIsIHsgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBjb25maWd1cmFibGU6ICEwIH0pLCBkZWZpbmVQcm9wZXJ0eShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgImNvbnN0cnVjdG9yIiwgeyB2YWx1ZTogR2VuZXJhdG9yRnVuY3Rpb24sIGNvbmZpZ3VyYWJsZTogITAgfSksIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCB0b1N0cmluZ1RhZ1N5bWJvbCwgIkdlbmVyYXRvckZ1bmN0aW9uIiksIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uIChnZW5GdW4pIHsgdmFyIGN0b3IgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBnZW5GdW4gJiYgZ2VuRnVuLmNvbnN0cnVjdG9yOyByZXR1cm4gISFjdG9yICYmIChjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fCAiR2VuZXJhdG9yRnVuY3Rpb24iID09PSAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpKTsgfSwgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24gKGdlbkZ1bikgeyByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpIDogKGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsICJHZW5lcmF0b3JGdW5jdGlvbiIpKSwgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApLCBnZW5GdW47IH0sIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbiAoYXJnKSB7IHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9OyB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpLCBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pLCBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yLCBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24gKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkgeyB2b2lkIDAgPT09IFByb21pc2VJbXBsICYmIChQcm9taXNlSW1wbCA9IFByb21pc2UpOyB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLCBQcm9taXNlSW1wbCk7IHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbikgPyBpdGVyIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7IHJldHVybiByZXN1bHQuZG9uZSA\/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpOyB9KTsgfSwgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKSwgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgIkdlbmVyYXRvciIpLCBkZWZpbmUoR3AsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSwgZGVmaW5lKEdwLCAidG9TdHJpbmciLCBmdW5jdGlvbiAoKSB7IHJldHVybiAiW29iamVjdCBHZW5lcmF0b3JdIjsgfSksIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uICh2YWwpIHsgdmFyIG9iamVjdCA9IE9iamVjdCh2YWwpLCBrZXlzID0gW107IGZvciAodmFyIGtleSBpbiBvYmplY3QpIGtleXMucHVzaChrZXkpOyByZXR1cm4ga2V5cy5yZXZlcnNlKCksIGZ1bmN0aW9uIG5leHQoKSB7IGZvciAoOyBrZXlzLmxlbmd0aDspIHsgdmFyIGtleSA9IGtleXMucG9wKCk7IGlmIChrZXkgaW4gb2JqZWN0KSByZXR1cm4gbmV4dC52YWx1ZSA9IGtleSwgbmV4dC5kb25lID0gITEsIG5leHQ7IH0gcmV0dXJuIG5leHQuZG9uZSA9ICEwLCBuZXh0OyB9OyB9LCBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcywgQ29udGV4dC5wcm90b3R5cGUgPSB7IGNvbnN0cnVjdG9yOiBDb250ZXh0LCByZXNldDogZnVuY3Rpb24gcmVzZXQoc2tpcFRlbXBSZXNldCkgeyBpZiAodGhpcy5wcmV2ID0gMCwgdGhpcy5uZXh0ID0gMCwgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZCwgdGhpcy5kb25lID0gITEsIHRoaXMuZGVsZWdhdGUgPSBudWxsLCB0aGlzLm1ldGhvZCA9ICJuZXh0IiwgdGhpcy5hcmcgPSB1bmRlZmluZWQsIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpLCAhc2tpcFRlbXBSZXNldCkgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSAidCIgPT09IG5hbWUuY2hhckF0KDApICYmIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmICFpc05hTigrbmFtZS5zbGljZSgxKSkgJiYgKHRoaXNbbmFtZV0gPSB1bmRlZmluZWQpOyB9LCBzdG9wOiBmdW5jdGlvbiBzdG9wKCkgeyB0aGlzLmRvbmUgPSAhMDsgdmFyIHJvb3RSZWNvcmQgPSB0aGlzLnRyeUVudHJpZXNbMF0uY29tcGxldGlvbjsgaWYgKCJ0aHJvdyIgPT09IHJvb3RSZWNvcmQudHlwZSkgdGhyb3cgcm9vdFJlY29yZC5hcmc7IHJldHVybiB0aGlzLnJ2YWw7IH0sIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbiBkaXNwYXRjaEV4Y2VwdGlvbihleGNlcHRpb24pIHsgaWYgKHRoaXMuZG9uZSkgdGhyb3cgZXhjZXB0aW9uOyB2YXIgY29udGV4dCA9IHRoaXM7IGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkgeyByZXR1cm4gcmVjb3JkLnR5cGUgPSAidGhyb3ciLCByZWNvcmQuYXJnID0gZXhjZXB0aW9uLCBjb250ZXh0Lm5leHQgPSBsb2MsIGNhdWdodCAmJiAoY29udGV4dC5tZXRob2QgPSAibmV4dCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkKSwgISFjYXVnaHQ7IH0gZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgeyB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV0sIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247IGlmICgicm9vdCIgPT09IGVudHJ5LnRyeUxvYykgcmV0dXJuIGhhbmRsZSgiZW5kIik7IGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7IHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCAiY2F0Y2hMb2MiKSwgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCAiZmluYWxseUxvYyIpOyBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkgeyBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsICEwKTsgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7IH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHsgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCAhMCk7IH0gZWxzZSB7IGlmICghaGFzRmluYWxseSkgdGhyb3cgbmV3IEVycm9yKCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseSIpOyBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTsgfSB9IH0gfSwgYWJydXB0OiBmdW5jdGlvbiBhYnJ1cHQodHlwZSwgYXJnKSB7IGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldOyBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJiBoYXNPd24uY2FsbChlbnRyeSwgImZpbmFsbHlMb2MiKSAmJiB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7IHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTsgYnJlYWs7IH0gfSBmaW5hbGx5RW50cnkgJiYgKCJicmVhayIgPT09IHR5cGUgfHwgImNvbnRpbnVlIiA9PT0gdHlwZSkgJiYgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiYgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jICYmIChmaW5hbGx5RW50cnkgPSBudWxsKTsgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA\/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307IHJldHVybiByZWNvcmQudHlwZSA9IHR5cGUsIHJlY29yZC5hcmcgPSBhcmcsIGZpbmFsbHlFbnRyeSA\/ICh0aGlzLm1ldGhvZCA9ICJuZXh0IiwgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MsIENvbnRpbnVlU2VudGluZWwpIDogdGhpcy5jb21wbGV0ZShyZWNvcmQpOyB9LCBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUocmVjb3JkLCBhZnRlckxvYykgeyBpZiAoInRocm93IiA9PT0gcmVjb3JkLnR5cGUpIHRocm93IHJlY29yZC5hcmc7IHJldHVybiAiYnJlYWsiID09PSByZWNvcmQudHlwZSB8fCAiY29udGludWUiID09PSByZWNvcmQudHlwZSA\/IHRoaXMubmV4dCA9IHJlY29yZC5hcmcgOiAicmV0dXJuIiA9PT0gcmVjb3JkLnR5cGUgPyAodGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnLCB0aGlzLm1ldGhvZCA9ICJyZXR1cm4iLCB0aGlzLm5leHQgPSAiZW5kIikgOiAibm9ybWFsIiA9PT0gcmVjb3JkLnR5cGUgJiYgYWZ0ZXJMb2MgJiYgKHRoaXMubmV4dCA9IGFmdGVyTG9jKSwgQ29udGludWVTZW50aW5lbDsgfSwgZmluaXNoOiBmdW5jdGlvbiBmaW5pc2goZmluYWxseUxvYykgeyBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7IHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTsgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHJldHVybiB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKSwgcmVzZXRUcnlFbnRyeShlbnRyeSksIENvbnRpbnVlU2VudGluZWw7IH0gfSwgImNhdGNoIjogZnVuY3Rpb24gX2NhdGNoKHRyeUxvYykgeyBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7IHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTsgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7IHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uOyBpZiAoInRocm93IiA9PT0gcmVjb3JkLnR5cGUpIHsgdmFyIHRocm93biA9IHJlY29yZC5hcmc7IHJlc2V0VHJ5RW50cnkoZW50cnkpOyB9IHJldHVybiB0aHJvd247IH0gfSB0aHJvdyBuZXcgRXJyb3IoImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdCIpOyB9LCBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbiBkZWxlZ2F0ZVlpZWxkKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7IHJldHVybiB0aGlzLmRlbGVnYXRlID0geyBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSwgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSwgbmV4dExvYzogbmV4dExvYyB9LCAibmV4dCIgPT09IHRoaXMubWV0aG9kICYmICh0aGlzLmFyZyA9IHVuZGVmaW5lZCksIENvbnRpbnVlU2VudGluZWw7IH0gfSwgZXhwb3J0czsgfQpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpOyB9IH0KZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsICJwcm90b3R5cGUiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgInN0cmluZyIpOyByZXR1cm4gX3R5cGVvZihrZXkpID09PSAic3ltYm9sIiA\/IGtleSA6IFN0cmluZyhrZXkpOyB9CmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAoX3R5cGVvZihpbnB1dCkgIT09ICJvYmplY3QiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8ICJkZWZhdWx0Iik7IGlmIChfdHlwZW9mKHJlcykgIT09ICJvYmplY3QiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLiIpOyB9IHJldHVybiAoaGludCA9PT0gInN0cmluZyIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfQp2YXIgRm9vID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBGb28oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9vKTsKICB9CiAgX2NyZWF0ZUNsYXNzKEZvbywgW3sKICAgIGtleTogImJhciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2JhciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB0aGlzLmFzZGYpOwogICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgfSkpOwogICAgICBmdW5jdGlvbiBiYXIoKSB7CiAgICAgICAgcmV0dXJuIF9iYXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQogICAgICByZXR1cm4gYmFyOwogICAgfSgpCiAgfV0pOwogIHJldHVybiBGb287Cn0oKTsKCi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjcmlwdC1jb21waWxlZC5qcy5tYXA0MDkAeyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LWNvbXBpbGVkLmpzIiwibmFtZXMiOlsiRm9vIiwiYXNkZiJdLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBGb28ge1xyXG4gIGFzeW5jIGJhcigpIHtcclxuICAgIHJldHVybiB0aGlzLmFzZGY7XHJcbiAgfVxyXG59Il0sIm1hcHBpbmdzIjoiOzs7K0NBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBRE1BLEdBQUc7RUFBQTtJQUFBO0VBQUE7RUFBQTtJQUFBO0lBQUE7TUFBQSxzRUFDUDtRQUFBO1VBQUE7WUFBQTtjQUFBLGlDQUNTLElBQUksQ0FBQ0MsSUFBSTtZQUFBO1lBQUE7Y0FBQTtVQUFBO1FBQUE7TUFBQSxDQUNqQjtNQUFBO1FBQUE7TUFBQTtNQUFBO0lBQUE7RUFBQTtFQUFBO0FBQUEifQ==)\r\n`_this` does not exist in the sample and I cannot reproduce it.","> [sourcemap](https:\/\/evanw.github.io\/source-map-visualization\/#MTUxNTUAInVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgcmV0dXJuIF90eXBlb2YgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgJiYgInN5bWJvbCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA\/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA\/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9CmZ1bmN0aW9uIF9yZWdlbmVyYXRvclJ1bnRpbWUoKSB7ICJ1c2Ugc3RyaWN0IjsgLyohIHJlZ2VuZXJhdG9yLXJ1bnRpbWUgLS0gQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuIC0tIGxpY2Vuc2UgKE1JVCk6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9ibG9iL21haW4vTElDRU5TRSAqLyBfcmVnZW5lcmF0b3JSdW50aW1lID0gZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHsgcmV0dXJuIGV4cG9ydHM7IH07IHZhciBleHBvcnRzID0ge30sIE9wID0gT2JqZWN0LnByb3RvdHlwZSwgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHksIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5IHx8IGZ1bmN0aW9uIChvYmosIGtleSwgZGVzYykgeyBvYmpba2V5XSA9IGRlc2MudmFsdWU7IH0sICRTeW1ib2wgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgPyBTeW1ib2wgOiB7fSwgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8ICJAQGl0ZXJhdG9yIiwgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCAiQEBhc3luY0l0ZXJhdG9yIiwgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8ICJAQHRvU3RyaW5nVGFnIjsgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkgeyByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAsIHdyaXRhYmxlOiAhMCB9KSwgb2JqW2tleV07IH0gdHJ5IHsgZGVmaW5lKHt9LCAiIik7IH0gY2F0Y2ggKGVycikgeyBkZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7IHJldHVybiBvYmpba2V5XSA9IHZhbHVlOyB9OyB9IGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHsgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA\/IG91dGVyRm4gOiBHZW5lcmF0b3IsIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKSwgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTsgcmV0dXJuIGRlZmluZVByb3BlcnR5KGdlbmVyYXRvciwgIl9pbnZva2UiLCB7IHZhbHVlOiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIH0pLCBnZW5lcmF0b3I7IH0gZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7IHRyeSB7IHJldHVybiB7IHR5cGU6ICJub3JtYWwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07IH0gY2F0Y2ggKGVycikgeyByZXR1cm4geyB0eXBlOiAidGhyb3ciLCBhcmc6IGVyciB9OyB9IH0gZXhwb3J0cy53cmFwID0gd3JhcDsgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTsgZnVuY3Rpb24gR2VuZXJhdG9yKCkge30gZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fSBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9IHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9OyBkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTsgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLCBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTsgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiYgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkgJiYgKEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUpOyB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7IGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHsgWyJuZXh0IiwgInRocm93IiwgInJldHVybiJdLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkgeyBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7IH0pOyB9KTsgfSBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHsgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHsgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7IGlmICgidGhyb3ciICE9PSByZWNvcmQudHlwZSkgeyB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZywgdmFsdWUgPSByZXN1bHQudmFsdWU7IHJldHVybiB2YWx1ZSAmJiAib2JqZWN0IiA9PSBfdHlwZW9mKHZhbHVlKSAmJiBoYXNPd24uY2FsbCh2YWx1ZSwgIl9fYXdhaXQiKSA\/IFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsgaW52b2tlKCJuZXh0IiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgaW52b2tlKCJ0aHJvdyIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTsgfSkgOiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uICh1bndyYXBwZWQpIHsgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkLCByZXNvbHZlKHJlc3VsdCk7IH0sIGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gaW52b2tlKCJ0aHJvdyIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpOyB9KTsgfSByZWplY3QocmVjb3JkLmFyZyk7IH0gdmFyIHByZXZpb3VzUHJvbWlzZTsgZGVmaW5lUHJvcGVydHkodGhpcywgIl9pbnZva2UiLCB7IHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShtZXRob2QsIGFyZykgeyBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHsgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTsgfSk7IH0gcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9IHByZXZpb3VzUHJvbWlzZSA\/IHByZXZpb3VzUHJvbWlzZS50aGVuKGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLCBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZykgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpOyB9IH0pOyB9IGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkgeyB2YXIgc3RhdGUgPSAic3VzcGVuZGVkU3RhcnQiOyByZXR1cm4gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7IGlmICgiZXhlY3V0aW5nIiA9PT0gc3RhdGUpIHRocm93IG5ldyBFcnJvcigiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZyIpOyBpZiAoImNvbXBsZXRlZCIgPT09IHN0YXRlKSB7IGlmICgidGhyb3ciID09PSBtZXRob2QpIHRocm93IGFyZzsgcmV0dXJuIGRvbmVSZXN1bHQoKTsgfSBmb3IgKGNvbnRleHQubWV0aG9kID0gbWV0aG9kLCBjb250ZXh0LmFyZyA9IGFyZzs7KSB7IHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7IGlmIChkZWxlZ2F0ZSkgeyB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTsgaWYgKGRlbGVnYXRlUmVzdWx0KSB7IGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7IHJldHVybiBkZWxlZ2F0ZVJlc3VsdDsgfSB9IGlmICgibmV4dCIgPT09IGNvbnRleHQubWV0aG9kKSBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7ZWxzZSBpZiAoInRocm93IiA9PT0gY29udGV4dC5tZXRob2QpIHsgaWYgKCJzdXNwZW5kZWRTdGFydCIgPT09IHN0YXRlKSB0aHJvdyBzdGF0ZSA9ICJjb21wbGV0ZWQiLCBjb250ZXh0LmFyZzsgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7IH0gZWxzZSAicmV0dXJuIiA9PT0gY29udGV4dC5tZXRob2QgJiYgY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGNvbnRleHQuYXJnKTsgc3RhdGUgPSAiZXhlY3V0aW5nIjsgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpOyBpZiAoIm5vcm1hbCIgPT09IHJlY29yZC50eXBlKSB7IGlmIChzdGF0ZSA9IGNvbnRleHQuZG9uZSA\/ICJjb21wbGV0ZWQiIDogInN1c3BlbmRlZFlpZWxkIiwgcmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7IHJldHVybiB7IHZhbHVlOiByZWNvcmQuYXJnLCBkb25lOiBjb250ZXh0LmRvbmUgfTsgfSAidGhyb3ciID09PSByZWNvcmQudHlwZSAmJiAoc3RhdGUgPSAiY29tcGxldGVkIiwgY29udGV4dC5tZXRob2QgPSAidGhyb3ciLCBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmcpOyB9IH07IH0gZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkgeyB2YXIgbWV0aG9kTmFtZSA9IGNvbnRleHQubWV0aG9kLCBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2ROYW1lXTsgaWYgKHVuZGVmaW5lZCA9PT0gbWV0aG9kKSByZXR1cm4gY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsICJ0aHJvdyIgPT09IG1ldGhvZE5hbWUgJiYgZGVsZWdhdGUuaXRlcmF0b3JbInJldHVybiJdICYmIChjb250ZXh0Lm1ldGhvZCA9ICJyZXR1cm4iLCBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZCwgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCksICJ0aHJvdyIgPT09IGNvbnRleHQubWV0aG9kKSB8fCAicmV0dXJuIiAhPT0gbWV0aG9kTmFtZSAmJiAoY29udGV4dC5tZXRob2QgPSAidGhyb3ciLCBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJyIgKyBtZXRob2ROYW1lICsgIicgbWV0aG9kIikpLCBDb250aW51ZVNlbnRpbmVsOyB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpOyBpZiAoInRocm93IiA9PT0gcmVjb3JkLnR5cGUpIHJldHVybiBjb250ZXh0Lm1ldGhvZCA9ICJ0aHJvdyIsIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZywgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWw7IHZhciBpbmZvID0gcmVjb3JkLmFyZzsgcmV0dXJuIGluZm8gPyBpbmZvLmRvbmUgPyAoY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWUsIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2MsICJyZXR1cm4iICE9PSBjb250ZXh0Lm1ldGhvZCAmJiAoY29udGV4dC5tZXRob2QgPSAibmV4dCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkKSwgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWwpIDogaW5mbyA6IChjb250ZXh0Lm1ldGhvZCA9ICJ0aHJvdyIsIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcigiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3QiKSwgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWwpOyB9IGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7IHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07IDEgaW4gbG9jcyAmJiAoZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdKSwgMiBpbiBsb2NzICYmIChlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXSwgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdKSwgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpOyB9IGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHsgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307IHJlY29yZC50eXBlID0gIm5vcm1hbCIsIGRlbGV0ZSByZWNvcmQuYXJnLCBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkOyB9IGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHsgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiAicm9vdCIgfV0sIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKSwgdGhpcy5yZXNldCghMCk7IH0gZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7IGlmIChpdGVyYWJsZSkgeyB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07IGlmIChpdGVyYXRvck1ldGhvZCkgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpOyBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgaXRlcmFibGUubmV4dCkgcmV0dXJuIGl0ZXJhYmxlOyBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHsgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7IGZvciAoOyArK2kgPCBpdGVyYWJsZS5sZW5ndGg7KSBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSByZXR1cm4gbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldLCBuZXh0LmRvbmUgPSAhMSwgbmV4dDsgcmV0dXJuIG5leHQudmFsdWUgPSB1bmRlZmluZWQsIG5leHQuZG9uZSA9ICEwLCBuZXh0OyB9OyByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDsgfSB9IHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTsgfSBmdW5jdGlvbiBkb25lUmVzdWx0KCkgeyByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiAhMCB9OyB9IHJldHVybiBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lUHJvcGVydHkoR3AsICJjb25zdHJ1Y3RvciIsIHsgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBjb25maWd1cmFibGU6ICEwIH0pLCBkZWZpbmVQcm9wZXJ0eShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgImNvbnN0cnVjdG9yIiwgeyB2YWx1ZTogR2VuZXJhdG9yRnVuY3Rpb24sIGNvbmZpZ3VyYWJsZTogITAgfSksIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCB0b1N0cmluZ1RhZ1N5bWJvbCwgIkdlbmVyYXRvckZ1bmN0aW9uIiksIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uIChnZW5GdW4pIHsgdmFyIGN0b3IgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBnZW5GdW4gJiYgZ2VuRnVuLmNvbnN0cnVjdG9yOyByZXR1cm4gISFjdG9yICYmIChjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fCAiR2VuZXJhdG9yRnVuY3Rpb24iID09PSAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpKTsgfSwgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24gKGdlbkZ1bikgeyByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpIDogKGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsICJHZW5lcmF0b3JGdW5jdGlvbiIpKSwgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApLCBnZW5GdW47IH0sIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbiAoYXJnKSB7IHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9OyB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpLCBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pLCBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yLCBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24gKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkgeyB2b2lkIDAgPT09IFByb21pc2VJbXBsICYmIChQcm9taXNlSW1wbCA9IFByb21pc2UpOyB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLCBQcm9taXNlSW1wbCk7IHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbikgPyBpdGVyIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7IHJldHVybiByZXN1bHQuZG9uZSA\/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpOyB9KTsgfSwgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKSwgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgIkdlbmVyYXRvciIpLCBkZWZpbmUoR3AsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSwgZGVmaW5lKEdwLCAidG9TdHJpbmciLCBmdW5jdGlvbiAoKSB7IHJldHVybiAiW29iamVjdCBHZW5lcmF0b3JdIjsgfSksIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uICh2YWwpIHsgdmFyIG9iamVjdCA9IE9iamVjdCh2YWwpLCBrZXlzID0gW107IGZvciAodmFyIGtleSBpbiBvYmplY3QpIGtleXMucHVzaChrZXkpOyByZXR1cm4ga2V5cy5yZXZlcnNlKCksIGZ1bmN0aW9uIG5leHQoKSB7IGZvciAoOyBrZXlzLmxlbmd0aDspIHsgdmFyIGtleSA9IGtleXMucG9wKCk7IGlmIChrZXkgaW4gb2JqZWN0KSByZXR1cm4gbmV4dC52YWx1ZSA9IGtleSwgbmV4dC5kb25lID0gITEsIG5leHQ7IH0gcmV0dXJuIG5leHQuZG9uZSA9ICEwLCBuZXh0OyB9OyB9LCBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcywgQ29udGV4dC5wcm90b3R5cGUgPSB7IGNvbnN0cnVjdG9yOiBDb250ZXh0LCByZXNldDogZnVuY3Rpb24gcmVzZXQoc2tpcFRlbXBSZXNldCkgeyBpZiAodGhpcy5wcmV2ID0gMCwgdGhpcy5uZXh0ID0gMCwgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZCwgdGhpcy5kb25lID0gITEsIHRoaXMuZGVsZWdhdGUgPSBudWxsLCB0aGlzLm1ldGhvZCA9ICJuZXh0IiwgdGhpcy5hcmcgPSB1bmRlZmluZWQsIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpLCAhc2tpcFRlbXBSZXNldCkgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSAidCIgPT09IG5hbWUuY2hhckF0KDApICYmIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmICFpc05hTigrbmFtZS5zbGljZSgxKSkgJiYgKHRoaXNbbmFtZV0gPSB1bmRlZmluZWQpOyB9LCBzdG9wOiBmdW5jdGlvbiBzdG9wKCkgeyB0aGlzLmRvbmUgPSAhMDsgdmFyIHJvb3RSZWNvcmQgPSB0aGlzLnRyeUVudHJpZXNbMF0uY29tcGxldGlvbjsgaWYgKCJ0aHJvdyIgPT09IHJvb3RSZWNvcmQudHlwZSkgdGhyb3cgcm9vdFJlY29yZC5hcmc7IHJldHVybiB0aGlzLnJ2YWw7IH0sIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbiBkaXNwYXRjaEV4Y2VwdGlvbihleGNlcHRpb24pIHsgaWYgKHRoaXMuZG9uZSkgdGhyb3cgZXhjZXB0aW9uOyB2YXIgY29udGV4dCA9IHRoaXM7IGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkgeyByZXR1cm4gcmVjb3JkLnR5cGUgPSAidGhyb3ciLCByZWNvcmQuYXJnID0gZXhjZXB0aW9uLCBjb250ZXh0Lm5leHQgPSBsb2MsIGNhdWdodCAmJiAoY29udGV4dC5tZXRob2QgPSAibmV4dCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkKSwgISFjYXVnaHQ7IH0gZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgeyB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV0sIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247IGlmICgicm9vdCIgPT09IGVudHJ5LnRyeUxvYykgcmV0dXJuIGhhbmRsZSgiZW5kIik7IGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7IHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCAiY2F0Y2hMb2MiKSwgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCAiZmluYWxseUxvYyIpOyBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkgeyBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsICEwKTsgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7IH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHsgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCAhMCk7IH0gZWxzZSB7IGlmICghaGFzRmluYWxseSkgdGhyb3cgbmV3IEVycm9yKCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseSIpOyBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTsgfSB9IH0gfSwgYWJydXB0OiBmdW5jdGlvbiBhYnJ1cHQodHlwZSwgYXJnKSB7IGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldOyBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJiBoYXNPd24uY2FsbChlbnRyeSwgImZpbmFsbHlMb2MiKSAmJiB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7IHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTsgYnJlYWs7IH0gfSBmaW5hbGx5RW50cnkgJiYgKCJicmVhayIgPT09IHR5cGUgfHwgImNvbnRpbnVlIiA9PT0gdHlwZSkgJiYgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiYgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jICYmIChmaW5hbGx5RW50cnkgPSBudWxsKTsgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA\/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307IHJldHVybiByZWNvcmQudHlwZSA9IHR5cGUsIHJlY29yZC5hcmcgPSBhcmcsIGZpbmFsbHlFbnRyeSA\/ICh0aGlzLm1ldGhvZCA9ICJuZXh0IiwgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MsIENvbnRpbnVlU2VudGluZWwpIDogdGhpcy5jb21wbGV0ZShyZWNvcmQpOyB9LCBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUocmVjb3JkLCBhZnRlckxvYykgeyBpZiAoInRocm93IiA9PT0gcmVjb3JkLnR5cGUpIHRocm93IHJlY29yZC5hcmc7IHJldHVybiAiYnJlYWsiID09PSByZWNvcmQudHlwZSB8fCAiY29udGludWUiID09PSByZWNvcmQudHlwZSA\/IHRoaXMubmV4dCA9IHJlY29yZC5hcmcgOiAicmV0dXJuIiA9PT0gcmVjb3JkLnR5cGUgPyAodGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnLCB0aGlzLm1ldGhvZCA9ICJyZXR1cm4iLCB0aGlzLm5leHQgPSAiZW5kIikgOiAibm9ybWFsIiA9PT0gcmVjb3JkLnR5cGUgJiYgYWZ0ZXJMb2MgJiYgKHRoaXMubmV4dCA9IGFmdGVyTG9jKSwgQ29udGludWVTZW50aW5lbDsgfSwgZmluaXNoOiBmdW5jdGlvbiBmaW5pc2goZmluYWxseUxvYykgeyBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7IHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTsgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHJldHVybiB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKSwgcmVzZXRUcnlFbnRyeShlbnRyeSksIENvbnRpbnVlU2VudGluZWw7IH0gfSwgImNhdGNoIjogZnVuY3Rpb24gX2NhdGNoKHRyeUxvYykgeyBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7IHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTsgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7IHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uOyBpZiAoInRocm93IiA9PT0gcmVjb3JkLnR5cGUpIHsgdmFyIHRocm93biA9IHJlY29yZC5hcmc7IHJlc2V0VHJ5RW50cnkoZW50cnkpOyB9IHJldHVybiB0aHJvd247IH0gfSB0aHJvdyBuZXcgRXJyb3IoImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdCIpOyB9LCBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbiBkZWxlZ2F0ZVlpZWxkKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7IHJldHVybiB0aGlzLmRlbGVnYXRlID0geyBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSwgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSwgbmV4dExvYzogbmV4dExvYyB9LCAibmV4dCIgPT09IHRoaXMubWV0aG9kICYmICh0aGlzLmFyZyA9IHVuZGVmaW5lZCksIENvbnRpbnVlU2VudGluZWw7IH0gfSwgZXhwb3J0czsgfQpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpOyB9IH0KZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsICJwcm90b3R5cGUiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgInN0cmluZyIpOyByZXR1cm4gX3R5cGVvZihrZXkpID09PSAic3ltYm9sIiA\/IGtleSA6IFN0cmluZyhrZXkpOyB9CmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAoX3R5cGVvZihpbnB1dCkgIT09ICJvYmplY3QiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8ICJkZWZhdWx0Iik7IGlmIChfdHlwZW9mKHJlcykgIT09ICJvYmplY3QiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLiIpOyB9IHJldHVybiAoaGludCA9PT0gInN0cmluZyIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfQp2YXIgRm9vID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBGb28oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9vKTsKICB9CiAgX2NyZWF0ZUNsYXNzKEZvbywgW3sKICAgIGtleTogImJhciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2JhciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB0aGlzLmFzZGYpOwogICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgfSkpOwogICAgICBmdW5jdGlvbiBiYXIoKSB7CiAgICAgICAgcmV0dXJuIF9iYXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQogICAgICByZXR1cm4gYmFyOwogICAgfSgpCiAgfV0pOwogIHJldHVybiBGb287Cn0oKTsKCi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjcmlwdC1jb21waWxlZC5qcy5tYXA0MDkAeyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LWNvbXBpbGVkLmpzIiwibmFtZXMiOlsiRm9vIiwiYXNkZiJdLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBGb28ge1xyXG4gIGFzeW5jIGJhcigpIHtcclxuICAgIHJldHVybiB0aGlzLmFzZGY7XHJcbiAgfVxyXG59Il0sIm1hcHBpbmdzIjoiOzs7K0NBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBRE1BLEdBQUc7RUFBQTtJQUFBO0VBQUE7RUFBQTtJQUFBO0lBQUE7TUFBQSxzRUFDUDtRQUFBO1VBQUE7WUFBQTtjQUFBLGlDQUNTLElBQUksQ0FBQ0MsSUFBSTtZQUFBO1lBQUE7Y0FBQTtVQUFBO1FBQUE7TUFBQSxDQUNqQjtNQUFBO1FBQUE7TUFBQTtNQUFBO0lBQUE7RUFBQTtFQUFBO0FBQUEifQ==) `_this` does not exist in the sample and I cannot reproduce it.\r\n\r\n@liuxingbaoyu What is your output for `npx babel script.js --out-file script-compiled.js --source-maps --presets=@babel\/preset-env` ?","What I checked was the `test.zip` you uploaded.","Missed following up on the original VS Code issue. The .babelrc for me needs some tweaks for this to reproduce for me. Please `npm i` in this zip, then `npm run compile` to see the output (which is also included in the zip)\r\n\r\n[babel-this-rename.zip](https:\/\/github.com\/babel\/babel\/files\/10504760\/babel-this-rename.zip)\r\n","@connor4312 Thank you for your help!"],"labels":["i: bug","area: sourcemaps"]},{"title":"[Bug]: Module resolution of different versions of the same dependency when using plugin-transform-runtime","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nbabel-loader (webpack)\r\n\r\n### Input code\r\n\r\nHere is a [repository](https:\/\/github.com\/vkhytskyi-allegro\/babel-transform-runtime-module-resolution-issue) with context and issue details.\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\n#### Context\r\n\r\nSay, you are building a frontend project, client-side bundle needs to follow ECMAScript 5. One of you `node_module` dependencies - `react-redux`, in this example - needs to be transpiled to ES5. At the same time, both `react-redux` and current repository rely on the same production dependency - `react-is` - though on different versions:\r\n\r\n```sh\r\n> npm ls react-is\r\nbabel-transform-runtime-module-resolution-issue@0.0.1\r\n\u251c\u2500\u2500 react-is@16.13.1\r\n\u2514\u2500\u252c react-redux@8.0.5\r\n  \u251c\u2500\u252c hoist-non-react-statics@3.3.2\r\n  \u2502 \u2514\u2500\u2500 react-is@16.13.1 deduped\r\n  \u2514\u2500\u2500 react-is@18.2.0\r\n```\r\n\r\nMoreover, say, there is a reason you are not able to use the same dependency version.\r\n\r\n#### Actual behavior\r\n\r\nFf you try to build the project (via `NODE_ENV=production npm run build`) you'll get the following warning:\r\n\r\n```sh\r\nWARNING in .\/node_modules\/react-redux\/es\/components\/connect.js 228:8-25\r\nexport 'isContextConsumer' (imported as 'isContextConsumer') was not found in 'react-is' (possible exports: __esModule)\r\n @ .\/node_modules\/react-redux\/es\/index.js 9:0-57 11:0-17\r\n @ .\/src\/index.js 1:0-37 2:24-29\r\n```\r\n\r\nAs a result, output bundle is broken.\r\n\r\n#### Expected behavior\r\n\r\nBabel (specifically `@babel\/plugin-transform-runtime`) is able to handle different versions of the same dependency and output a working bundle.\r\n\r\n### Environment\r\n\r\n- OS: Ubuntu 20.04.5 LTS\r\n- node: 18.12.1\r\n- npm: 8.19.2\r\n- @babel\/core: 7.20.12\r\n- @babel\/helper-plugin-utils: 7.20.2\r\n- @babel\/plugin-transform-runtime: 7.19.6\r\n- @babel\/preset-env: 7.20.2\r\n- @babel\/preset-react: 7.18.6\r\n- babel-loader: 9.1.2\r\n- monorepo: no","comments":["Hey @vkhytskyi-allegro! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","I'm confused, that error is not thrown by Babel. How does this relate to `@babel\/plugin-transform-runtime`?\r\nEDIT: I just noticed the repo, I'm checking it!","What's going on is that `node_modules\/react-redux\/node_modules\/react-is\/...` mathes the `\/react-redux\/` regexp, so webpack is also feeding `react-is` into Babel. Then, when Babel compiles https:\/\/unpkg.com\/browse\/react-is@18.2.0\/cjs\/react-is.development.js `@babel\/plugin-transform-runtime` tries to insert a polyfill, and it uses an `import` statement because technically that file is a valid module. Then, Webpack sees the `import` statements and thus parses that file as a module and ignores all the CommonJS exports.\r\n\r\nTwo possible solutions are:\r\n- replace the exclusion regexp in your webpack config with `not: [\/react-redux.(?!node_modules)\/]`, to avoid passing its nested dependencies to Babel\r\n- set `sourceType: \"unambiguous\"` in Babel's options, so that it will parse `react-is` as a script\/cjs and not as an ESM module, and thus `@babel\/plugin-transform-runtime` will inject `require()` calls.\r\n\r\nI couldn't test if this is the case because your lockfile references https:\/\/artifactory.allegrogroup.com\/artifactory\/api\/npm\/group-npm\/use-sync-external-store\/-\/use-sync-external-store-1.2.0.tgz, which is not accessible from my network."],"labels":["i: question"]},{"title":"[traverse]: provide\/update official documentation","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on this feature?\r\n\r\n### What problem are you trying to solve?\r\n\r\nCurrently, the babel traverse docs are very limited:\r\n\r\nhttps:\/\/babeljs.io\/docs\/en\/babel-traverse\r\n\r\nall other babel tools have much more in depth docs available (API ref, options, multiple examples, etc).\r\n\r\nit also still links to the babel handbook which arguably should no longer exist or be referenced officially, since something under the babel org itself should exist with better documentation these days. it isn't great that the babel website directs you away to whats essentially a personal github for its own docs.\r\n\r\n### Describe the solution you'd like\r\n\r\n* Improve the babel\/traverse docs to be as in depth as other tooling packages' docs\r\n* Remove references to the \"babel handbook\" and replace them with official documentation\r\n\r\n### Describe alternatives you've considered\r\n\r\nN\/A\r\n\r\n### Documentation, Adoption, Migration Strategy\r\n\r\n_No response_","comments":["Hey @43081j! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement","pkg: traverse","i: docs"]},{"title":"Improve SystemJS import setters by reducing size","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nGenerated modules take up very big file size due to very large file names in setter functions.\r\n\r\n```typescript\r\nimport { CancelToken } from \"@web-atoms\/core\/dist\/core\/types\";\r\nimport DISingleton from \"@web-atoms\/core\/dist\/di\/DISingleton\";\r\nimport { Inject } from \"@web-atoms\/core\/dist\/di\/Inject\";\r\nimport BaseUrl, { BaseService, Get, Path, Queries, Query } from \"@web-atoms\/core\/dist\/services\/http\/RestService\";\r\n```\r\n\r\nGenerated SystemJS output for setters is\r\n```javascript\r\nreturn {\r\nsetters: [function(_webAtomsCoreDistCoreTypes) {\r\n            CancelToken = _webAtomsCoreDistCoreTypes.CancelToken\r\n        }\r\n        , function(_webAtomsCoreDistDiDISingleton) {\r\n            DISingleton = _webAtomsCoreDistDiDISingleton.default\r\n        }\r\n        , function(_webAtomsCoreDistDiInject) {\r\n            Inject = _webAtomsCoreDistDiInject.Inject\r\n        }\r\n        , function(_webAtomsCoreDistServicesHttpRestService) {\r\n            BaseUrl = _webAtomsCoreDistServicesHttpRestService.default;\r\n            BaseService = _webAtomsCoreDistServicesHttpRestService.BaseService;\r\n            Get = _webAtomsCoreDistServicesHttpRestService.Get;\r\n            Path = _webAtomsCoreDistServicesHttpRestService.Path;\r\n            Query = _webAtomsCoreDistServicesHttpRestService.Query\r\n        }\r\n   ........\r\n```\r\n\r\nNames are too big and no way to reduce the size. It would be nice to generate following code,\r\n\n\n### Describe the solution you'd like\n\n\r\nGenerated SystemJS output for setters is\r\n```javascript\r\nreturn {\r\nsetters: [(_v) => {\r\n            CancelToken = _v.CancelToken\r\n        }\r\n        , (_v) => {\r\n            DISingleton = _v.default\r\n        }\r\n        , (_v) => {\r\n            Inject = _v.Inject\r\n        }\r\n        , (_v) => {\r\n            BaseUrl = _v.default;\r\n            BaseService = _v.BaseService;\r\n            Get = _v.Get;\r\n            Path = _v.Path;\r\n            Query = _v.Query\r\n        }\r\n   ........\r\n```\r\n\n\n### Describe alternatives you've considered\n\nI don't know if any alternative exists.\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @ackava! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Have you tried using a compressor such as `terser`? This looks like a better approach.","> Have you tried using a compressor such as `terser`? This looks like a better approach.\r\n\r\nI am unable to use Terser to compress these names, as Terser also compresses other names which breaks our logic. There isn't an easy way to do it."],"labels":["i: enhancement"]},{"title":"[Bug]: using `--watch` parameter ignores plugins defined in `.babelrc.js`","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@babel\/cli\r\n\r\n### Input code\r\n\r\n```js\r\nconst x = [\"Hello %NAME%\"];\r\n```\r\n\r\n### Configuration file name\r\n\r\n.babelrc.js\r\n\r\n### Configuration\r\n\r\n```js\r\nimport some_plugin from '.\/some_plugin';\r\nexport default {\r\n        presets: [\r\n\t\t[\r\n\t\t\tpreset_env,\r\n\t\t\t{\r\n\t\t\t\tmodules: 'amd',\r\n\t\t\t\ttargets: {\r\n\t\t\t\t\tnode: true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t],\r\n\tplugins: [some_plugin],\r\n}\r\n```\r\n\r\n### Current and expected behavior\r\n\r\nexpected\r\n\r\n```js\r\nconst x = [\"Hello John\"];\r\n```\r\n\r\ncurrent:\r\n```js\r\nconst x = [\"Hello %NAME%\"];\r\n```\r\n\r\nif I execute it without `--watch` it correctly replace string `%NAME%` with \"John\" string, but if I add `--watch` it doesn't. I use my own plugin, implementing `ArrrayExpression` method in `visitor` object, that simply loops over `node.elements` and if it's `StringLiteral` I replace `%name%` placeholder with actual name.\r\n\r\n### Environment\r\n\r\n  System:\r\n    OS: Windows 10 10.0.22621\r\n  Binaries:\r\n    Node: 18.6.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 8.15.0 - C:\\Program Files\\nodejs\\npm.CMD\r\n  npmPackages:\r\n    @babel\/cli: ^7.19.3 => 7.19.3 \r\n    @babel\/core: ^7.20.5 => 7.19.3 \r\n    @babel\/preset-env: ^7.20.2 => 7.19.4\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @GabrielGorta! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Can you provide a repo to reproduce it?","sry for late response,... I can provide a repo to reproduce, but it will take me some time. Will try to provide it as soon as possible.","ok, it seems I can't reproduce issue anymore, don't know what changed. ","ok, I can reproduce it again... what is even weirder, is that, if you have `--config-file .\/.babelrc` defined without extension, and run without `--watch` it works fine, if your config file is `.\/.babelrc.js` but in case, you use `--watch` it doesn't use plugins, but in case you rename command with extension `--config-file .\/.babelrc.js` it will use plugins too. Will give repo with reproduction soon."],"labels":["i: needs triage"]},{"title":"[Bug]: @bable\/generator printer.js Cannot read property 'line' of undefined","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on a fix?\n\n### How are you using Babel?\n\nbabel-loader (webpack)\n\n### Input code\n\nNote: I don't know how to output the AST when building the package, therefore I cannot help to recreate.\r\nAll I know is that ```loc.start``` is undefined.\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\nConfig via webpack:\r\n```\r\n      {\r\n        test: \/\\.(js|jsx)?$\/,\r\n        use: {\r\n          loader: 'babel-loader',\r\n          options: {\r\n            presets: ['@babel\/preset-env', '@babel\/preset-react'],\r\n            plugins: [\r\n              require('@babel\/plugin-external-helpers'),\r\n              require('@babel\/plugin-proposal-object-rest-spread'),\r\n              require('fast-async'),\r\n              ['@babel\/plugin-proposal-class-properties', { loose: true }],\r\n              ['@babel\/plugin-proposal-private-methods', { loose: true }],\r\n              [\r\n                '@babel\/plugin-proposal-private-property-in-object',\r\n                { loose: true },\r\n              ],\r\n            ],\r\n          },\r\n        },\r\n        include: path.resolve(__dirname, 'src'),\r\n        exclude: [\/node_modules\/],\r\n      }\r\n```\n\n### Current and expected behavior\n\nAt some point ```loc.start``` is undefined.\r\n\r\nBabel is failing all our package builds once we move to 7.19+.\r\nThe current resolution is to keep babel at ~7.18\r\n\r\n```\r\nModule build failed\r\nTypeError: Cannot read property 'line' of undefined\r\n    at Generator.printJoin ([.......]\/node_modules\/@babel\/generator\/lib\/printer.js:421:114)\r\n\r\n```\n\n### Environment\n\nConfig that fails the build:\r\n```  System:\r\n    OS: Linux 5.14 Ubuntu 20.04.5 LTS (Focal Fossa)\r\n  Binaries:\r\n    Node: 14.19.1 - ~\/.nvm\/versions\/node\/v14.19.1\/bin\/node\r\n    npm: 6.14.16 - ~\/.nvm\/versions\/node\/v14.19.1\/bin\/npm\r\n  npmPackages:\r\n    @babel\/cli: ^7.18.0 => 7.19.3 \r\n    @babel\/core: ^7.18.0 => 7.20.5 \r\n    @babel\/generator: ^7.18.0 => 7.20.5 \r\n    @babel\/helpers: ^7.18.0 => 7.20.6 \r\n    @babel\/plugin-external-helpers: ^7.18.0 => 7.18.6 \r\n    @babel\/plugin-proposal-class-properties: ^7.18.0 => 7.18.6 \r\n    @babel\/plugin-proposal-object-rest-spread: ^7.18.0 => 7.20.2 \r\n    @babel\/plugin-transform-modules-commonjs: ^7.18.0 => 7.19.6 \r\n    @babel\/plugin-transform-regenerator: ^7.18.0 => 7.20.5 \r\n    @babel\/preset-env: ^7.18.0 => 7.20.2 \r\n    @babel\/preset-react: ^7.18.0 => 7.18.6 \r\n    @babel\/register: ^7.18.0 => 7.18.9 \r\n    babel-loader: ^8.2.3 => 8.3.0 \r\n    eslint: ^8.6.0 => 8.30.0 \r\n    webpack: ^5.65.0 => 5.75.0 \r\n\r\n\r\n```\r\n\r\n\r\nConfig where the build is ok:\r\n```\r\n  System:\r\n    OS: Linux 5.14 Ubuntu 20.04.5 LTS (Focal Fossa)\r\n  Binaries:\r\n    Node: 14.19.1 - ~\/.nvm\/versions\/node\/v14.19.1\/bin\/node\r\n    npm: 6.14.16 - ~\/.nvm\/versions\/node\/v14.19.1\/bin\/npm\r\n  npmPackages:\r\n    @babel\/cli: ~7.18.0 => 7.18.10 \r\n    @babel\/core: ~7.18.0 => 7.18.13 \r\n    @babel\/generator: ~7.18.0 => 7.18.13 \r\n    @babel\/helpers: ~7.18.0 => 7.18.9 \r\n    @babel\/plugin-external-helpers: ~7.18.0 => 7.18.6 \r\n    @babel\/plugin-proposal-class-properties: ~7.18.0 => 7.18.6 \r\n    @babel\/plugin-proposal-object-rest-spread: ~7.18.0 => 7.18.9 \r\n    @babel\/plugin-transform-modules-commonjs: ^7.18.0 => 7.19.6 \r\n    @babel\/plugin-transform-regenerator: ~7.18.0 => 7.18.6 \r\n    @babel\/preset-env: ^7.18.0 => 7.20.2 \r\n    @babel\/preset-react: ~7.18.0 => 7.18.6 \r\n    @babel\/register: ~7.18.0 => 7.18.9 \r\n    babel-loader: ^8.2.3 => 8.3.0 \r\n    eslint: ^8.6.0 => 8.29.0 \r\n    webpack: ^5.65.0 => 5.75.0 \r\n\r\n```\r\n\n\n### Possible solution\n\nchange:\r\n```\r\nnewlineOpts.nextNodeStartLine = nextNode.loc?.start.line || 0;\r\n```\r\nto:\r\n```\r\nnewlineOpts.nextNodeStartLine = nextNode.loc?.start?.line || 0;\r\n```\r\nin https:\/\/github.com\/babel\/babel\/blob\/v7.20.6\/packages\/babel-generator\/src\/printer.ts\n\n### Additional context\n\nsimilar to https:\/\/github.com\/babel\/babel\/pull\/15033 ","comments":["Hey @doles! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Pinpointed the cause to the wrong fast-async plugin version.\r\n[replicated issue link to babel.dev](https:\/\/babel.dev\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=false&spec=false&loose=true&code_lz=JYWwDg9gTgLgBAJQKYEMDGMA0cDecCuAzkgKIBmZSGcAvnGVBCHAORSoYsDcAUD2hAB2heAGEmkQUkHwAvHAAUASjiyAfLj5wCxcpQwKUhAJ6C0iles3btKAO4pg8AMpMkMABbBBAcwB0RqZoyrzaNNgA2gC6Srw82uww-FCCcAA8ACbAAG5qaQD0Wbm8NHFIAB6QsHAZSGQo-AA2YhJC0jC8QA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=env%2Creact&prettier=false&targets=&version=7.20.6&externalPlugins=%40babel%2Fplugin-external-helpers%407.18.6%2C%40babel%2Fplugin-proposal-class-properties%407.18.6%2C%40babel%2Fplugin-proposal-object-rest-spread%407.20.2%2C%40babel%2Fplugin-transform-modules-commonjs%407.19.6%2C%40babel%2Fplugin-transform-regenerator%407.20.5%2Cbabel-plugin-fast-async%406.1.2&assumptions=%7B%7D)","Thank you for your detailed investigation!\r\nYou are right, this is the wrong reason.\r\nI'm not sure if it's worth fixing it, since we're assuming that only `node.loc` can be null and `loc.start` should always have a value."],"labels":["i: bug"]},{"title":"It is necessary to return the --quiet parameter to the babel-cli settings","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nI use a custom plugin to collect statistics about the source code and use `babel-cli` for this, but along with useful information, I get the entire source code of the bundle in the console\n\n### Describe the solution you'd like\n\nIt would be just great if the `--quiet` option was returned to `babel-cli` so that it doesn't output the transformed code to the console.\r\n\r\nIn such situations, the output of the module source code is absolutely useless\n\n### Describe alternatives you've considered\n\nI can't imagine what the alternative might be yet\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @budarin! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","![image](https:\/\/user-images.githubusercontent.com\/8055157\/208238704-a48d9bfb-e377-4aa7-8428-afaf305bc1a4.png)\r\n","Even if I use babel-cli as a command-line tool to collect information and then output it to a file, there is no need to output the contents of a megabyte bundle to the console just like that","This should work on linux:\r\n```\r\nbabel --config-file .\/dist\/babel\/babel.config.js .\/dist\/server.js --out-file \/dev\/null\r\n```\r\n\r\nI wonder if this works on Windows:\r\n```\r\nbabel --config-file .\/dist\/babel\/babel.config.js .\/dist\/server.js --out-file NUL\r\n```","> This should work on linux:\r\n\r\n\r\nThanks, will try to","> This should work on linux:\r\n> \r\nunfortunately, this disables the output to the console not only the results of babel's work, but also my information and does not solve the original problem.\r\n"],"labels":["i: enhancement","i: needs triage"]},{"title":"fix: Props are lost when the template replaces the node.","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #10636 <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          | \u221a\r\n| Major: Breaking Change?  | ?\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | \u221a\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15286\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\n\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/53672\/","I'm a little concerned that there will be cases other than the example.","The replaced node is always an identifier, because it's what we use as placeholder in templates.\r\n\r\nHowever you are right, there are multiple possible properties:\r\n- `typeAnnotation`\r\n- `decorators`\r\n- `optional`\r\n\r\nSome tests cases:\r\n```js\r\ntemplate.statement.ast`\r\n  var ${t.objectPattern([])}: string = x;\r\n`\r\n\r\ntemplate.statement.ast`\r\n  class X {\r\n    f(@dec ${t.identifier(\"x\")}) {}\r\n  }\r\n`;\r\n\r\ntemplate.statement.ast`\r\n  function f(${t.identifier(\"x\")}?) {}\r\n`\r\n\r\ntemplate.statement.ast`\r\n  function f(${ Object.assign(t.identifier(\"x\"), { optional: true }) }: string) {}\r\n`\r\n\r\ntemplate.statement.ast`\r\n  class X {\r\n    f(@dec ${ Object.assign(t.identifier(\"x\"), { optional: true }) }) {}\r\n  }\r\n`\r\n\r\n\/\/ This should probably throw?\r\nconst typeAnotation = t.tsTypeAnnotation(t.tsStringKeyword());\r\ntemplate.statement.ast`\r\n  function f(${ Object.assign(t.identifier(\"x\"), { typeAnnotation }) }: number) {}\r\n`\r\n```"],"labels":["PR: Bug Fix :bug:","pkg: template"]},{"title":"Enable statically analyzable TDZ checks by default","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | \r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\nNow that the TDZ transform is more stable, this PR enables TDZ checks for statically analyzable TDZ errors by default. In a future minor I would like to add a `noDynamicTDZ` assumption (that defaults to *true*) that, when not enabled, makes the block scoping plugin inject the dynamic TDZ checks.\r\n\r\nThe `tdz` option will then become unnecessary, and can be removed in Babel 8. It's currently one of the few options that require users to explicitly list the plugin in their config.\r\n\r\nAs a \"spec compliancy\" PR, I don't think that this one needs to wait for a minor.\r\n\r\nThis PR is blocked on fixing https:\/\/github.com\/babel\/babel\/issues\/15175, to avoid introducing a regression in the default behavior.\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15285\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/53671\/","Hopefully this won't have a performance hit. I am worried that the default enablement may be too demanding for us, and any wrong scope information may cause problems, and it seems that there are not many users who enable the tdz option now.\r\n\r\nFYI: https:\/\/bugs.webkit.org\/show_bug.cgi?id=199866 TDZ validation has had serious performance issues even in browsers.","I'll take some measurements.","@liuxingbaoyu Wdyt about just having a `noTDZ` (defaults to *true*) assumption instead, without changing the default behavior? My end goal is to make it easier to enable tdz checks, and currently having it as a plugin option makes it hard.","This sounds good to me.\r\nI'm not sure if @JLHwung would prefer `TDZ` + disabled by default.\r\nhttps:\/\/github.com\/babel\/website\/pull\/2701#pullrequestreview-1179850865"],"labels":["PR: Spec Compliance :eyeglasses:","Spec: TDZ"]},{"title":"[Bug]: Importing 'default' export from e.g. `@babel\/generator` does not work in ESM with TS","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\nTypeScript file written as ESM. using e.g. `test.mts`\r\n\r\n```ts\r\nimport generate from '@babel\/generator';\r\n\r\n\/\/ generate is typed as the function.\r\ngenerate(bla)\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nThere is no way to import `@babel\/generator` (or others) in an ESM compatible way because:\r\n\r\n* the `d.ts` from Babel declares `export default function`\r\n* but in practice the JS is `exports.default = function() ..`\r\n\r\nIf imported via ESM, since `@babel\/generator` is a CommonJS module, all named exports are exposed as a default export. So in practice the `generate` variable from `import generate from '@babel\/generator` is an object with a property `default`.\r\n\r\nThis causes failures like: \r\n\r\n```\r\nTypeError: generate is not a function\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nBabel ships ESM variant of their tooling using NodeJS package exports, or their type definitions do not suggest a default export (although I don't think there can be a named binding called `default`)\r\n\r\n### Environment\r\n\r\n```\r\n  System:\r\n    OS: Linux 5.19 Debian GNU\/Linux rodete 12 (rodete)\r\n  Binaries:\r\n    Node: 16.14.2 - ~\/bin\/node\/bin\/node\r\n    Yarn: 1.22.17 - ~\/bin\/node\/bin\/yarn\r\n    npm: 8.19.2 - ~\/bin\/node\/bin\/npm\r\n  npmPackages:\r\n    @babel\/cli: 7.19.3 => 7.19.3 \r\n    @babel\/core: 7.19.3 => 7.19.3 \r\n    @babel\/generator: 7.19.5 => 7.19.5 \r\n    @babel\/parser: 7.19.4 => 7.19.4 \r\n    @babel\/preset-env: 7.19.4 => 7.19.4 \r\n    @babel\/template: 7.18.10 => 7.18.10 \r\n    @babel\/traverse: 7.19.4 => 7.19.4 \r\n    @babel\/types: 7.19.4 => 7.19.4 \r\n```\r\n\r\n### Possible solution\r\n\r\nBabel would ship an ESM-compatible output flavor in their packages. Best used in combination with NodeJS `package.json` `exports`.\r\n\r\n### Additional context\r\n\r\nRelated to https:\/\/github.com\/babel\/babel\/issues\/12363 I assume.\r\nAlso https:\/\/github.com\/babel\/babel\/issues\/13855#issuecomment-945123514 (maybe it should be kept for tracking?)\r\n\r\n","comments":["Hey @devversion! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","We are considering publishing an ESM version in Babel 8. In the meantime, you can open an issue in https:\/\/github.com\/DefinitelyTyped\/DefinitelyTyped (or a PR) asking to update https:\/\/github.com\/DefinitelyTyped\/DefinitelyTyped\/blob\/master\/types\/babel-generator\/index.d.ts - we don't maintain the `.d.ts` for `@babel\/generator`.","Thank you! that would be super helpful.\r\n\r\nI think changing the `d.ts` alone is not sufficient since TypeScript does not allow for a constant to be exported that is simply named `default`. e.g. `declare const default = function` does not work. The workaround solution we use is:\r\n\r\n```ts\r\nimport _template from '@babel\/template';\r\n\r\n\/\/ Babel is a CJS package and uses `default` as named binding (`exports.default =`).\r\n\/\/ https:\/\/github.com\/babel\/babel\/issues\/15269.\r\nconst template = (_template as any)['default'] as typeof _template\r\n```","Hey, \r\n\r\nSince Babel@8 is yet to be released with Native ECMAScript modules, the current handbook suggests importing the `generate` function with ES6 syntax will throw an error. \r\n\r\n[Here](https:\/\/github.com\/jamiebuilds\/babel-handbook\/blob\/master\/translations\/en\/plugin-handbook.md#toc-babel-generator) \r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/66557682\/230850669-dfe04ee3-2ec2-48d4-8e5d-e4f855dd62d6.png)\r\n\r\nAlso, I found a small typo [Here](https:\/\/github.com\/jamiebuilds\/babel-handbook\/blob\/master\/translations\/en\/plugin-handbook.md#visiting).\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/66557682\/230849017-befb424c-e911-4dbb-9db2-6efdb77b0a6e.png)\r\n\r\n**I can add a small update to the handbook clearing these.**\r\n","For anyone using esbuild, you can add this plugin to allow both default and named imports in esm:\r\n\r\n```js\r\nconst babelDefaultImportPlugin = {\r\n  name: 'babel-default-import',\r\n  setup: build => {\r\n    build.onResolve({ filter: \/^@babel\\\/(traverse|generator)$\/ }, args => {\r\n      return { path: args.path, namespace: 'babel-default-import' };\r\n    });\r\n\r\n    build.onLoad({ filter: \/.*\/, namespace: 'babel-default-import' }, args => {\r\n      return {\r\n        resolveDir: 'node_modules',\r\n        contents: `import module from '${args.path}\/lib\/index.js';\r\n          export default module.default ?? module;\r\n          export * from '${args.path}\/lib\/index.js';`,\r\n      };\r\n    });\r\n  },\r\n};\r\n\r\nesbuild.build({\r\n  \/\/ ...\r\n  plugins: [babelDefaultImportPlugin],\r\n})\r\n```"],"labels":["i: needs triage"]},{"title":"[Bug]: typescritpt constructor order","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nbabel-loader (webpack)\r\n\r\n### Input code\r\n\r\n```js\r\nclass Base{\r\n}\r\nclass A extends Base {\r\n    b = this.a.length;\r\n    constructor(public a: string) {\r\n        super();\r\n     }\r\n}\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\n```\r\n\"use strict\";\r\n\r\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\r\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\r\nclass Base {}\r\nclass A extends Base {\r\n  constructor(a) {\r\n    super();\r\n    _defineProperty(this, \"b\", this.a.length);\r\n    this.a = a;\r\n  }\r\n}\r\nnew A('dasdasd');\r\n```\r\n-----------------\r\n\r\nthis will throw an error \"Cannot read properties of undefined (reading 'length')\"\r\n\r\n\r\n### Environment\r\n\r\nangular 15 (es2022) and [playground](https:\/\/babeljs.io\/)\r\n\r\n### Possible solution\r\n\r\nIn compiled js in constructor _defineProperty has to go after constructor parameters assignment. \r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @volovikoff! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: discussion","i: bug","area: typescript"]},{"title":"[Bug]: Path Traversal with Removed Nodes in ConditionalExpression","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\nIt's a custom transform so it's hard to give an exact replication without working too hard on it, but here's the gist:\r\n\r\n```js\r\nconsole.log(a ? a() : b());\r\n```\r\n\r\nWhere there is a custom transform plugin running over this source, which will inline the \"DCE\" branch if a is true to output:\r\n\r\n```js\r\nconsole.log(a());\r\n```\r\n\r\nInternally this is done via a check and replacement on the test node:\r\n\r\n```js\r\nif (t.isConditionalExpression(path.parentPath) && path.parentPath.node.consequent === path.node) {\r\n  path.stop();\r\n  path.parentPath.replaceWith(path.parentPath.get('consequent'));\r\n}\r\n```\r\n\r\nIn the above, it is still continuing to iterate the `b()` function. In addition, adding a `path.parentPath.get('alternate').remove()` results in the error:\r\n\r\n```\r\n     TypeError: unknown file: Property consequent of ConditionalExpression expected node to be of a type \r\n[\"Expression\"] but instead got undefined\r\n```\r\n\r\nI understand this is a very specific iteration replacement case, but thought it worth posting anyway so at least there is some record of it.\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nIt should be possible to remove a sibling Node and affect its iteration in a transform.\n\n### Environment\n\n7.20.5\n\n### Possible solution\n\nA liveness check in the iterator for replacements \/ removals \/ stop calls should properly be able to avoid iterating dead branches of the tree.\n\n### Additional context\n\n_No response_","comments":["Hey @guybedford! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Can you try checking and replacing child nodes on the parent node?\r\nOperating on parent nodes can be a bit dangerous.\r\n","Unfortunately it's an old transform and that would be a little too much work. For now I've just tagged some path data to indicate it is dead to skip other passes. Feel free to close if this isn't something supported too.","This should be supported, but right now it doesn't work well. \ud83e\udd26\u200d\u2642\ufe0f\r\nI know there is a problem with `path.skip()`, but `path.stop()` surprised me.\r\nI suspect that the problem you are encountering may also be related to other transformations. As a workaround, I suggest you use operations on child nodes instead of operations on parent nodes.","For any node n, when n's ancestor node gets replaced, n's siblings are still in the visitor queue. You can use a custom helper to detect such siblings under a removed node:\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/f5b52208f05157a348fdfaa0222c07a9a83fb101\/packages\/babel-helper-member-expression-to-functions\/src\/index.ts#L88-L92\r\n\r\nor you can manually skip them before you are replacing its ancestor:\r\n\r\n```diff\r\npath.stop();\r\n+++ path.parentPath.get('alternative').skip()\r\npath.parentPath.replaceWith(path.parentPath.get('consequent'));\r\n```\r\n\r\nor we can come up with a `NodePath#replaceParentWith()` method, which replaces the parent and skips the old parent's immediate children. For the same reasons above, it won't work with `parentPath.replaceParentWith()`.\r\n\r\n> A liveness check in the iterator for replacements \/ removals \/ stop calls should properly be able to avoid iterating dead branches of the tree.\r\n\r\nAssuming most plugins do not replace parent path, we will have to crawl to the top level program to know if a node's ancestor is removed or not. I think the sanity check overhead outweighs extra visit on removed siblings here.\r\n\r\nGenerally we don't recommend revising parent path because the replacer is not aware of the traversal context, specifically which path we are visiting when the replacement is invoked. Maybe we can augment the `NodePath#replaceWith` into `NodePath#replaceWith(node, currentContext)`, but before that there are extra works for the plugin side if the parent is replaced."],"labels":["i: enhancement","pkg: traverse"]},{"title":"[Bug]: Crashes when default parameter uses the same name as rest parameter","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nfunction f ( x = { y } , ... y ) {\r\n  return y;\r\n}\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nThe code above fails to be transpiled when tried on [REPL](https:\/\/babeljs.io\/repl\/#?browsers=&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=GYVwdgxgLglg9mABMRAKRAPRBeRBvRAT0QF9EAaRAOhqMQEp8AoRRAJwFMoQ2lCBuJiSA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=false&presets=env&prettier=false&targets=&version=7.20.6&externalPlugins=&assumptions=%7B%7D), with the error message `\/repl.js: Couldn't find intersection`.\n\n### Environment\n\nTried on REPL (7.20.6)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nFor some reason, the following codes do not trigger the bug.\r\n```js\r\n\/\/ Assign y directly to x\r\nfunction f ( x = y , ... y ) {\r\n  return y;\r\n}\r\n```\r\n\r\n```js\r\n\/\/ Do not use y in the body of function\r\nfunction f ( x = { y } , ... y ) {\r\n  return;\r\n}\r\n```","comments":["Hey @f52985! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","This is indeed a bug, but the input code does not work, do you have a code that works and triggers this exception?","We can call the function with an argument and not use the default parameter to avoid ReferenceError:\r\n```js\r\nfunction f ( x = { y } , ... y ) {\r\n  return y;\r\n}\r\n\r\nf(0);\r\n```\r\n... but of course, this is still somewhat artificial example that would rarely happen in practice though."],"labels":["i: bug"]},{"title":"Improve comment generation after compilation","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #15156, Fixes #11971, Closes #12558,  Fixes #8507<!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          | ?\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | \u221a\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15255\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/53624\/","I don't think this is a good approach, but it shouldn't be too bad.\ud83e\udd37","I believe this has new unintended behavior such as\r\n```\r\n\/\/ This import xxx\r\nimport xxx\r\n```\r\nBut that's nothing compared to improvement.\r\nBefore the first line comments were extremely easy to get lost or printed later, now they have been improved, as can be seen from the test changes.\r\nhttps:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=PTAEBcFMGdwKAJYFsAOB7ATuUAlSBDAY2wDMM0lQByDA4qgbiA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=env&prettier=false&targets=&version=7.20.6&externalPlugins=&assumptions=%7B%7D\r\n\r\n"],"labels":["PR: Bug Fix :bug:","pkg: generator","area: comments","pkg: core"]},{"title":"fix: `this` in arrow function in class constructor parameter","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #15251 <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          | \u221a\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | \u221a\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15253\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\n\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/53608\/"],"labels":["PR: Bug Fix :bug:"]},{"title":"[Bug]: Extending class constructor default props generate undefined value `_this`","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nbabel-loader (webpack)\n\n### Input code\n\n```javascript\r\nclass Root {}\r\n\r\nclass Foo extends Root {\r\n  constructor(\r\n    cb = () => {\r\n      this.bar?.baz();\r\n      console.log(\"this is\", this);\r\n    }\r\n  ) {\r\n    this.cb = cb;\r\n  }\r\n}\r\n```\n\n### Configuration file name\n\nbabel.config.json\n\n### Configuration\n\n```json\r\n{\r\n   \"preset\": [[\r\n      \"@babel\/preset-env\",\r\n      {\r\n        \"useBuiltIns\": \"entry\",\r\n        \"corejs\": \"2\"\r\n      }\r\n    ]]\r\n}\r\n\r\n```\n\n### Current and expected behavior\n\nerror\r\n![image](https:\/\/user-images.githubusercontent.com\/23427655\/205846842-495cadc0-260f-4f9d-816f-249a73244b0c.png)\r\n\r\nexpected\r\n`_this` should be `_this2`\n\n### Environment\n\n- Babel version 7.20.6\r\n- Node v16.14.2\n\n### Possible solution\n\nIt seems that the extended index is missing\n\n### Additional context\n\n_No response_","comments":["Hey @EchoZhaoH! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","```\r\nclass Root {}\r\n\r\nclass Foo extends Root {\r\n  constructor(\r\n    cb = () => {\r\n      this.bar?.baz();\r\n      console.log(\"this is\", this);\r\n    }\r\n  ) {\r\n    super(); \/\/ here\r\n    this.cb = cb;\r\n  }\r\n}\r\n```\r\nHave you tried this? The input code is illegal.\r\n`ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor`\r\n\r\nOops, I misunderstood the question.","@liuxingbaoyu It seems that the extended index is lost when it is generated","`_this` should be `_this2`, but `2` is lost","perhaps the scope of the parameters of the constructor is wrong","I opened up https:\/\/github.com\/babel\/babel\/pull\/15253 which should fix this!"],"labels":["i: bug"]},{"title":"Update module expressions parsing","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Update module expression parsing to the current [Module expressions proposal](https:\/\/tc39.es\/proposal-module-expressions\/)\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nThis PR can be reviewed by commits. First we enforce strict mode within the module body, then we disable `module {` at the start of the expression statement.\r\n\r\n<s>The `export default ModuleExpression` production is also disabled.<\/s> I suggest we parse it into a `ModuleDeclaration` node later (within the `moduleBlocks` plugin), otherwise we would generate different AST structures once the `ModuleDeclaration` proposal parsing is implemented and enabled.\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15240\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/53601\/","> The export default ModuleExpression production is also disabled. I suggest we parse it into a ModuleDeclaration node later (within the moduleBlocks plugin), otherwise we would generate different AST structures once the ModuleDeclaration proposal parsing is implemented and enabled.\r\n\r\n:+1:","@sosukesuzuki Re the failing prettier tests: the module expressions proposal doesn't allow expression statements to begin with `module {` anymore."],"labels":["PR: Spec Compliance :eyeglasses:","Spec: Module Expressions"]},{"title":"tests: Support execution tests with output","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | `Fixes #1, Fixes #2` <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\n1. `TestIO.code` becomes `string|null`,\r\n2. Now we allow `output.js` to be generated for `exec.js`\r\n3. Also made some simple refactorings.\r\n\r\nSince `exec.js` is similar to `input.js` in most cases, this will allow us to write tests more conveniently, avoiding repeated copy-pasting and synchronous modification\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15227\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/53534\/"],"labels":["area: tests","PR: Internal :house:","PR: Needs Review"]},{"title":"Implement await.ops transform","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Support [Await Operations](https:\/\/github.com\/tc39\/proposal-await.ops\/)\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      | Yes\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | https:\/\/github.com\/babel\/website\/pull\/2702\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nThis PR implements support of stage-1 Await Operations proposal. \r\n\r\nThe plugin transforms `await.ops iterable` to `await Promise.ops(iterable)` where `ops` is one of `all|allSettled|any|race`. It assumes that the `Promise` variable is not shadowed or modified.\r\n\r\nThe await.ops transform is copied to `babel-helper-remap-async-to-generator` because the async-await transform visits await expression prior to the await.ops transform. I didn't introduce a new helper package since 1) the transform is short and straightforward and 2) it is used by the plugin and async transform only.\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15218\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/53580\/","Note: the champions of the proposal are going to ask for Stage 2 at next week - https:\/\/github.com\/tc39\/agendas\/blob\/main\/2022\/11.md","The proposal did not reach consensus for stage 2, we should wait merging this PR."],"labels":["PR: New Feature :rocket:","Spec: Await Operations"]},{"title":"Add support to enable config caching in transform API","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on this feature?\r\n\r\n### What problem are you trying to solve?\r\n\r\nI'm currently profiling the build pipeline of a bigger project and noticed that babel always reads the full config for every file it's transpiling. For this particular project that amounts to about **4s** overhead total. The config is static with the exception of the `filename` property.\r\n\r\nIf one opts to use a config file there is `api.cache`, but that's not accessible when calling `babel.transform()` directly.\r\n\r\n### Describe the solution you'd like\r\n\r\nA way to tell babel to reuse an existing config object instead of reloading it all the time. Since internally `transform` is composed of `loadConfig()` and `run()`, makes me wonder if the ideal way is to expose the `transformation.run()` function directly.\r\n\r\n### Describe alternatives you've considered\r\n\r\nNot sure\r\n\r\n### Documentation, Adoption, Migration Strategy\r\n\r\n_No response_","comments":["Hey @marvinhagemeister! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Is this project open source? Or is there an example that can reproduce this? I want to try it myself.","It's not an open source project, so I can't share it. I can confirm that in my project caching the config saves 4s per build by patching the babel packages in `node_modules` directly. Found a way to replicate the symptoms in an isolated scenario. In my project the symptoms are a little more pronounced, but this reproduction should do the job.\r\n\r\nhttps:\/\/github.com\/marvinhagemeister\/babel-config-test\r\n\r\n\r\n\r\n","`.run` is already \"exposed\": if you pass `configFile: false` to `transform`, it won't read the configuration from the filesystem and only use the one passed as a parameter.\r\n","If you use `loadOptions()` it returns an object with `configFile: false` which you can then pass into e.g. `transformAsync()`. The only issue I had with `loadOptions()` was having to pass a filename into it (I just pass a dummy filename with the correct extension).","![image](https:\/\/user-images.githubusercontent.com\/30521560\/203566583-4a1996a3-2fb9-4a7a-bc2e-1310643526b6.png)\r\n\r\nI tried this example and only <30ms comes from loading the config file, the rest of the time(180ms) comes from loading the plugin, which I remember has a cache.\ud83d\ude15","However, I agree that this is an area that can be improved. I also encountered similar problems when I accelerated `lint-staged`.\r\n","@nicolo-ribaudo @ehoogeveen-medweb `configFile: false` is already set. So something else must be going on. Just to reiterate: The `loadConfig` function is what I can see in the traces. When I apply this patch locally, the build times for my project is about 4s quicker.\r\n\r\n```diff\r\n\/\/ This patch makes the build 4s faster.\r\n+ let config = null;\r\n\r\n  const transformRunner = gensync(function* transform(code, opts) {\r\n-   const config = yield* loadConfig(opts);\r\n+   if (config === null) {\r\n+     config = yield* loadConfig(opts);\r\n+   }\r\n+   config.filename = opts.filename;\r\n    if (config === null) return null;\r\n\r\n    return yield* run(config, code);\r\n  });\r\n```\r\n\r\n> I tried this example and only <30ms comes from loading the config file, the rest of the time(180ms) comes from loading the plugin, which I remember has a cache.\r\n\r\n@liuxingbaoyu Good point, hadn't thought about the plugin loading bit being the potential culprit.","Yeah, so I'm not sure where the problem is coming from. The plugins seem to be cached and you are not using a config file.\ud83d\ude15\r\nFYI: The situation I encountered was that the configuration file was too complex and it was very slow on the first load, and it was fine on multiple uses.","Here is a left heavy frame graph of a cpu profile for building the project. Basically the function time for running babel on each file have been summed into a single bar. One thing that jumps out is that of those 4s spent parsing config files, about 2.6s is spent on semver parsing for `@babel\/preset-env`. Taking a peek at the implementation that's used it looks like we constantly parse semver strings to a semver class instance, then convert it back to a string again, and then we create a new semver class instance again, ... and so forth.\r\n\r\n![Screenshot 2022-11-25 at 10 30 38](https:\/\/user-images.githubusercontent.com\/1062408\/203949043-a1e2970a-6248-4c71-9f0b-fe2baedd8a7f.png)\r\n","Amazing! I never thought of this reason.","Can you share the `targets` used for this graph? I'll look into this a bit.\r\n","@liuxingbaoyu sure, the browser target that is used is this one:\r\n\r\n```js\r\n[\r\n    'last 1 chrome version',\r\n    'last 1 firefox version',\r\n    'last 1 safari version',\r\n    'last 1 iOS version',\r\n    'last 1 edge version',\r\n]\r\n```\r\n\r\n<details>\r\n<summary>...which browserlist resolves to 290 targets.<\/summary>\r\n\r\n```js\r\n[\r\n  \"and_chr 106\",\r\n  \"and_chr 105\",\r\n  \"and_ff 106\",\r\n  \"and_ff 105\",\r\n  \"and_qq 13.1\",\r\n  \"and_uc 13.4\",\r\n  \"android 106\",\r\n  \"android 105\",\r\n  \"android 104\",\r\n  \"android 103\",\r\n  \"android 102\",\r\n  \"android 101\",\r\n  \"android 100\",\r\n  \"android 99\",\r\n  \"android 98\",\r\n  \"android 97\",\r\n  \"android 96\",\r\n  \"android 95\",\r\n  \"android 94\",\r\n  \"android 93\",\r\n  \"android 92\",\r\n  \"android 91\",\r\n  \"android 90\",\r\n  \"android 89\",\r\n  \"android 88\",\r\n  \"android 87\",\r\n  \"android 86\",\r\n  \"android 85\",\r\n  \"android 84\",\r\n  \"android 83\",\r\n  \"android 81\",\r\n  \"android 80\",\r\n  \"android 79\",\r\n  \"android 78\",\r\n  \"android 77\",\r\n  \"android 76\",\r\n  \"android 75\",\r\n  \"android 74\",\r\n  \"android 73\",\r\n  \"android 72\",\r\n  \"android 71\",\r\n  \"android 70\",\r\n  \"android 69\",\r\n  \"android 68\",\r\n  \"android 67\",\r\n  \"android 66\",\r\n  \"android 65\",\r\n  \"android 64\",\r\n  \"android 63\",\r\n  \"android 62\",\r\n  \"android 61\",\r\n  \"android 60\",\r\n  \"android 59\",\r\n  \"android 58\",\r\n  \"android 57\",\r\n  \"android 56\",\r\n  \"android 55\",\r\n  \"android 54\",\r\n  \"android 53\",\r\n  \"android 52\",\r\n  \"android 51\",\r\n  \"android 50\",\r\n  \"android 49\",\r\n  \"android 48\",\r\n  \"android 47\",\r\n  \"android 46\",\r\n  \"android 45\",\r\n  \"android 44\",\r\n  \"android 43\",\r\n  \"android 42\",\r\n  \"android 41\",\r\n  \"android 40\",\r\n  \"android 39\",\r\n  \"android 38\",\r\n  \"android 37\",\r\n  \"android 36\",\r\n  \"android 4.4.3-4.4.4\",\r\n  \"android 4.4\",\r\n  \"baidu 13.18\",\r\n  \"bb 10\",\r\n  \"bb 7\",\r\n  \"chrome 106\",\r\n  \"chrome 105\",\r\n  \"chrome 104\",\r\n  \"chrome 103\",\r\n  \"chrome 102\",\r\n  \"chrome 101\",\r\n  \"chrome 100\",\r\n  \"chrome 99\",\r\n  \"chrome 98\",\r\n  \"chrome 97\",\r\n  \"chrome 96\",\r\n  \"chrome 95\",\r\n  \"chrome 94\",\r\n  \"chrome 93\",\r\n  \"chrome 92\",\r\n  \"chrome 91\",\r\n  \"chrome 90\",\r\n  \"chrome 89\",\r\n  \"chrome 88\",\r\n  \"chrome 87\",\r\n  \"chrome 86\",\r\n  \"chrome 85\",\r\n  \"chrome 84\",\r\n  \"chrome 83\",\r\n  \"chrome 81\",\r\n  \"chrome 80\",\r\n  \"chrome 79\",\r\n  \"chrome 78\",\r\n  \"chrome 77\",\r\n  \"chrome 76\",\r\n  \"chrome 75\",\r\n  \"chrome 74\",\r\n  \"chrome 73\",\r\n  \"chrome 72\",\r\n  \"chrome 71\",\r\n  \"chrome 70\",\r\n  \"chrome 69\",\r\n  \"chrome 68\",\r\n  \"chrome 67\",\r\n  \"chrome 66\",\r\n  \"chrome 65\",\r\n  \"chrome 64\",\r\n  \"chrome 63\",\r\n  \"chrome 62\",\r\n  \"chrome 61\",\r\n  \"chrome 60\",\r\n  \"chrome 59\",\r\n  \"chrome 58\",\r\n  \"chrome 57\",\r\n  \"chrome 56\",\r\n  \"chrome 55\",\r\n  \"chrome 54\",\r\n  \"chrome 53\",\r\n  \"chrome 52\",\r\n  \"chrome 51\",\r\n  \"chrome 50\",\r\n  \"chrome 49\",\r\n  \"chrome 48\",\r\n  \"chrome 47\",\r\n  \"chrome 46\",\r\n  \"chrome 45\",\r\n  \"chrome 44\",\r\n  \"chrome 43\",\r\n  \"chrome 42\",\r\n  \"chrome 41\",\r\n  \"chrome 40\",\r\n  \"chrome 39\",\r\n  \"chrome 38\",\r\n  \"chrome 37\",\r\n  \"chrome 36\",\r\n  \"chrome 35\",\r\n  \"chrome 34\",\r\n  \"chrome 33\",\r\n  \"chrome 32\",\r\n  \"chrome 31\",\r\n  \"chrome 30\",\r\n  \"chrome 29\",\r\n  \"edge 106\",\r\n  \"edge 105\",\r\n  \"firefox 106\",\r\n  \"firefox 105\",\r\n  \"firefox 104\",\r\n  \"firefox 103\",\r\n  \"firefox 102\",\r\n  \"firefox 101\",\r\n  \"firefox 100\",\r\n  \"firefox 99\",\r\n  \"firefox 98\",\r\n  \"firefox 97\",\r\n  \"firefox 96\",\r\n  \"firefox 95\",\r\n  \"firefox 94\",\r\n  \"firefox 93\",\r\n  \"firefox 92\",\r\n  \"firefox 91\",\r\n  \"firefox 90\",\r\n  \"firefox 89\",\r\n  \"firefox 88\",\r\n  \"firefox 87\",\r\n  \"firefox 86\",\r\n  \"firefox 85\",\r\n  \"firefox 84\",\r\n  \"firefox 83\",\r\n  \"firefox 82\",\r\n  \"firefox 81\",\r\n  \"firefox 80\",\r\n  \"firefox 79\",\r\n  \"firefox 78\",\r\n  \"firefox 77\",\r\n  \"firefox 76\",\r\n  \"firefox 75\",\r\n  \"firefox 74\",\r\n  \"firefox 73\",\r\n  \"firefox 72\",\r\n  \"firefox 71\",\r\n  \"firefox 70\",\r\n  \"firefox 69\",\r\n  \"firefox 68\",\r\n  \"firefox 67\",\r\n  \"firefox 66\",\r\n  \"firefox 65\",\r\n  \"firefox 64\",\r\n  \"firefox 63\",\r\n  \"firefox 62\",\r\n  \"firefox 61\",\r\n  \"firefox 60\",\r\n  \"firefox 59\",\r\n  \"firefox 58\",\r\n  \"firefox 57\",\r\n  \"firefox 56\",\r\n  \"firefox 55\",\r\n  \"firefox 54\",\r\n  \"firefox 53\",\r\n  \"firefox 52\",\r\n  \"firefox 51\",\r\n  \"firefox 50\",\r\n  \"firefox 49\",\r\n  \"firefox 48\",\r\n  \"firefox 47\",\r\n  \"firefox 46\",\r\n  \"firefox 45\",\r\n  \"firefox 44\",\r\n  \"firefox 43\",\r\n  \"firefox 42\",\r\n  \"firefox 41\",\r\n  \"firefox 40\",\r\n  \"firefox 39\",\r\n  \"firefox 38\",\r\n  \"firefox 37\",\r\n  \"firefox 36\",\r\n  \"firefox 35\",\r\n  \"firefox 34\",\r\n  \"firefox 33\",\r\n  \"firefox 32\",\r\n  \"firefox 31\",\r\n  \"firefox 30\",\r\n  \"firefox 29\",\r\n  \"firefox 28\",\r\n  \"firefox 27\",\r\n  \"ios_saf 16.0\",\r\n  \"ios_saf 15.6\",\r\n  \"ios_saf 15.5\",\r\n  \"ios_saf 15.4\",\r\n  \"ios_saf 15.2-15.3\",\r\n  \"ios_saf 15.0-15.1\",\r\n  \"ios_saf 14.5-14.8\",\r\n  \"ios_saf 14.0-14.4\",\r\n  \"ios_saf 13.4-13.7\",\r\n  \"ios_saf 13.3\",\r\n  \"ios_saf 13.2\",\r\n  \"ios_saf 13.0-13.1\",\r\n  \"ios_saf 12.2-12.5\",\r\n  \"ios_saf 12.0-12.1\",\r\n  \"ios_saf 11.3-11.4\",\r\n  \"ios_saf 11.0-11.2\",\r\n  \"ios_saf 10.3\",\r\n  \"ios_saf 10.0-10.2\",\r\n  \"ios_saf 9.3\",\r\n  \"ios_saf 9.0-9.2\",\r\n  \"ios_saf 8.1-8.4\",\r\n  \"ios_saf 8\",\r\n  \"kaios 2.5\",\r\n  \"op_mini all\",\r\n  \"op_mob 91\",\r\n  \"op_mob 90\",\r\n  \"opera 91\",\r\n  \"opera 90\",\r\n  \"safari 16.0\",\r\n  \"safari 15.6\",\r\n  \"safari 15.5\",\r\n  \"safari 15.4\",\r\n  \"safari 15.2-15.3\",\r\n  \"safari 15.1\",\r\n  \"safari 15\",\r\n  \"safari 14.1\",\r\n  \"safari 14\",\r\n  \"safari 13.1\",\r\n  \"safari 13\",\r\n  \"safari 12.1\",\r\n  \"safari 12\",\r\n  \"safari 11.1\",\r\n  \"safari 11\",\r\n  \"safari 10.1\",\r\n  \"safari 10\",\r\n  \"safari 9.1\",\r\n  \"safari 9\",\r\n  \"safari 8\",\r\n  \"samsung 18.0\",\r\n  \"samsung 17.0\",\r\n];\r\n<\/details>\r\n```","`getTargets: 43_890 ops\/sec \u00b13.05% (0.023ms)`\r\nThis is a bit strange, I ran a benchmark and `getTargets` can execute ~40,000 times per second on my computer, are you tranforming 10,000+ files?"],"labels":["i: discussion","i: enhancement","pkg: core"]},{"title":"[Bug]: Top level await doesn't work when using babel with node","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\nHello friends\r\n\r\nTop level await is not working when using babel with node.\r\n\r\nHere is my code, for example:\r\n\r\n```js\r\nimport fg from 'fast-glob'\r\n\r\nconst importPaths = await fg([\r\n    '..\/models\/**\/*.*',\r\n    '..\/routes\/**\/*.*',\r\n])\r\n\r\nfor (const importPath of importPaths) {\r\n    await import(importPath)\r\n}\r\n```\r\n\r\nThis produces the following error:\r\n\r\n> SyntaxError: await is only valid in async functions and the top level bodies of modules\r\n\r\nHowever, when I use node without babel I can run top level await just fine.\r\n\r\nHere is the command I use to run babel + node:\r\n\r\n```console\r\nbabel-watch .\/entries\/server.js\r\n```\r\n\r\nThe babel-watch package is here: https:\/\/github.com\/kmagiera\/babel-watch\r\n\r\nIs there a babel config option to enable this or something? How do I get top level await to work for babel + node? (I am not talking about frontend\/webpack here, strictly backend code).\n\n### Configuration file name\n\nbabel.config.json\n\n### Configuration\n\n```json\r\n{\r\n    \"presets\": [\r\n        \"@babel\/preset-env\",\r\n        [\r\n            \"@babel\/preset-react\",\r\n            {\r\n                \"runtime\": \"automatic\"\r\n            }\r\n        ]\r\n    ]\r\n}\r\n```\n\n### Current and expected behavior\n\nTop level await doesn't work with babel, but it works by default in node. I am expecting it to work the same.\n\n### Environment\n\nUsing latest version of babel & node.\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @kjoedion! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","This might not be possible due to limitations of Node.\ud83d\ude15"],"labels":["i: bug","pkg: node"]},{"title":"[Bug]: generator body to a gen IIFE when compiling its params\uff0cit's not working","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nbabel-loader (webpack)\n\n### Input code\n\n```js\r\n\r\nvar obj = {\r\n  *a(params) {\r\n      console.log(params);\r\n  },\r\n  *b(params = 1) {\r\n      console.log(params);\r\n  }\r\n}\r\n\r\nconsole.log(Object.prototype.toString.call(obj.a) === '[object GeneratorFunction]');  \/\/ true\r\n\r\nconsole.log(Object.prototype.toString.call(obj.b) === '[object GeneratorFunction]');  \/\/ false\r\n\r\nconsole.log(Object.prototype.toString.call(obj.b) === '[object Function]');  \/\/ true\r\n\r\n```\r\n\r\nobj.b **fn.constructor** is not working\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\n```js\r\n\r\nvar obj = {\r\n  *a(params) {\r\n      console.log(params);\r\n  },\r\n  *b(params = 1) {\r\n      console.log(params);\r\n  }\r\n}\r\n\r\nconsole.log(Object.prototype.toString.call(obj.b) === '[object GeneratorFunction]');  \/\/ true\r\n\r\n```\n\n### Environment\n\n- Babel version(s): [e.g. v7.20.4]\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @enmoon! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Unfortunately we can't keep `toString` exactly the same, just do our best."],"labels":["i: enhancement"]},{"title":"[Bug]: `let` variables are not properly captured by closures in for head","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nfor (let i = 0, getI = () => i; i < 3; i++)\r\n  console.log(getI());\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nIt should log `0`, `0`, `0`, but it logs `0`, `1`, `2`.\n\n### Environment\n\nLatest\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["This is so interesting!","```JavaScript  \r\nfor (let i = 0, x = () => i; i < 5; i++) {\r\n  console.log(x());\r\n  x = () => i;\r\n}\r\n```\r\n\r\n\/\/ 0 0 1 2 3","```JavaScript \r\n\/\/ naive stack\r\nfunction stack(){\r\n    return [];\r\n}\r\n\r\nArray.prototype.top = function(){\r\n    return this[this.length-1]\r\n}\r\n\r\nvar ctx = stack(),i = 0,getI = () => i;\r\nctx.push({ i: i, getI: getI });\r\n\r\nwhile (ctx.top().i < 3) {\r\n  var _i = ctx.top().i;\r\n  var _getI = ctx.top().getI;\r\n\r\n  console.log(_getI());\r\n\r\n  _i++;\r\n  ctx.push({ i: _i, getI: _getI });\r\n}\r\n```"],"labels":["i: bug"]},{"title":"Inconsistent AST type to ESTree for decorator auto access syntax","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nInconsistent AST node for decorator auto accessors between ESTree and Babel.\r\n\r\nESTree: `AccessorProperty`\r\nBabel: `ClassAccessorProperty`\r\n\r\nref: https:\/\/github.com\/estree\/estree\/blob\/master\/stage3\/decorators.md#accessorproperty\r\n\n\n### Describe the solution you'd like\n\nImplement convert `ClassAccessorProperty` to `AccessorProperty` in estree plugin of babel.\n\n### Describe alternatives you've considered\n\nBabel drops `ClassAccessorProperty` in favor of `AccessorProperty`.\n\n### Documentation, Adoption, Migration Strategy\n\nDecorator auto accessors syntax will be landed in TypeScript 4.9 (https:\/\/devblogs.microsoft.com\/typescript\/announcing-typescript-4-9-rc\/#auto-accessors-in-classes). Thus, the inconsistency with [typescript-estree](https:\/\/github.com\/typescript-eslint\/typescript-eslint\/pull\/5926) is a concern to me.","comments":["I don't think we will implement the estree spec until ESLint supports AccessorProperty. In the past implementing stage 3 features before ESLint support has caused compatibility issues like https:\/\/github.com\/babel\/babel\/issues\/12864.\r\n\r\nAlternatively we can implement behind a feature flag like `classFeatures` for class properties and then materialize it in Babel 8.","@JLHwung with class properties there was no ESTree spec for them prior to them reaching stage4\r\nwhich meant that most parsers just used babel's representation (`ClassProperty` \/ `ClassPrivateProperty`), which caused churn in the ecosystem when there was finally the ESTree spec (`PropertyDefinition`).\r\n\r\nBut now ESTree is committing to supporting stage3 features and including ASTs for them (which you yourself keep adding!) - there is now a peer-reviewed spec for these (almost) stable features.\r\n\r\nSo it is safe to implement them early.\r\nFor reference - @typescript-eslint will be implementing using the stage3 spec linked.","I see no differences to the ClassProperty scenario. Although ESTree has supported more experimental proposals than before, there aren't any popular ESTree-experimental parser out there (correct me if I am wrong). So ESLint plugin authors have to stick with `@babel\/eslint-parser` and thus the Babel AST if they want to support accessor property. Now if we change the AST structure before ESLint supports it, these plugin will break because they are not aware of the ESTree spec.\r\n\r\nNow if ESLint supports it, we are more than happy to align with the ESTree proposal, and plugin authors will surely need to migrate from Babel AST to ESTree."],"labels":["i: enhancement","pkg: parser","Spec: Decorators","area: estree"]},{"title":"[Bug]: Wrong TDZ logic (switch-case and class in function)","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\n```js\r\n\/\/ case 1\r\nswitch ( 0 ) { default : let x ; case x : } \r\n\/\/ case 2\r\n( x => y ) ( ) ; class y {};\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n```json\r\n{\r\n  \"presets\": [\r\n    \"@babel\/preset-env\"\r\n  ],\r\n  \"plugins\": [\r\n    [\r\n      \"@babel\/plugin-transform-block-scoping\",\r\n      {\r\n        \"tdz\": true\r\n      }\r\n    ]\r\n  ]\r\n}\r\n```\n\n### Current and expected behavior\n\nBoth case 1 and 2 should throw `ReferenceError` but they are terminated normally:\r\n```console\r\n$ npx babel input1.js | node # no error\r\n$ npx babel input2.js | node # no error\r\n```\r\n```console\r\n$ node input1.js\r\ninput1.js:1\r\nswitch ( 0 ) { default : let x ; case x : }\r\n                                      ^\r\n\r\nReferenceError: Cannot access 'x' before initialization\r\n...\r\nNode.js v18.11.0\r\n\r\n$ node input2.js\r\ninput2.js:1\r\n( x => y ) ( ) ; class y {};\r\n       ^\r\n\r\nReferenceError: Cannot access 'y' before initialization\r\n...\r\nNode.js v18.11.0\r\n```\n\n### Environment\n\nnpm version 8.19.2\r\n\r\n@babel\/cli@7.19.3\r\n@babel\/core@7.20.2\r\n@babel\/plugin-transform-block-scoping@7.20.2\r\n@babel\/preset-env@7.20.2\r\n\r\nnode version 18.11.0\r\nmacos version 13.0\r\n\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","I have investigated this issue.\r\nIn case 1, `let x` seems to be compiled to `var x`. Since the scope between `let` and `var` is difference, this may be why `ReferenceError` is thrown.\r\nIn case 2, `class y` seems to be complied to `var` variable, by the config of `@babel\/preset-env`. This may be why `ReferenceError` is thrown, as in case 1."],"labels":["i: enhancement"]},{"title":"[Bug]: Order between TDZ errors and other errors","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\n```js\r\nlet x = { x = 0 ( ) } = 0 ; \r\n```\n\n### Configuration file name\n\n.babelrc\n\n### Configuration\n\n```json\r\n{\r\n  \"plugins\": [\r\n    [\r\n      \"@babel\/plugin-transform-block-scoping\",\r\n      {\r\n        \"tdz\": true\r\n      }\r\n    ]\r\n  ]\r\n}\r\n```\n\n### Current and expected behavior\n\nInput code is expected to throw `TypeError`:\r\n```console\r\n$ node input.js\r\ninput.js:1\r\nlet x = { x = 0 ( ) } = 0 ;\r\n                ^\r\n\r\nTypeError: 0 is not a function\r\n    at Object.<anonymous> (input.js:1:17)\r\n    at Module._compile (node:internal\/modules\/cjs\/loader:1159:14)\r\n    at Module._extensions..js (node:internal\/modules\/cjs\/loader:1213:10)\r\n    at Module.load (node:internal\/modules\/cjs\/loader:1037:32)\r\n    at Module._load (node:internal\/modules\/cjs\/loader:878:12)\r\n    at Function.executeUserEntryPoint [as runMain] (node:internal\/modules\/run_main:81:12)\r\n    at node:internal\/main\/run_main_module:23:47\r\n\r\nNode.js v18.11.0\r\n```\r\nbut output code is transpiled as following:\r\n```js\r\nfunction _tdz(name) { throw new ReferenceError(name + \" is not defined - temporal dead zone\"); }\r\nvar x = (_tdz(\"x\"), ({\r\n  x = 0()\r\n} = 0));\r\n```\r\nand is throwing `ReferenceError` due to `_tdz` function:\r\n\r\n```console\r\n$ npx babel input.js | node\r\n[stdin]:1\r\nfunction _tdz(name) { throw new ReferenceError(name + \" is not defined - temporal dead zone\"); }\r\n                      ^\r\n\r\nReferenceError: x is not defined - temporal dead zone\r\n    at _tdz ([stdin]:1:29)\r\n    at [stdin]:2:10\r\n    at Script.runInThisContext (node:vm:129:12)\r\n    at Object.runInThisContext (node:vm:313:38)\r\n    at node:internal\/process\/execution:79:19\r\n    at [stdin]-wrapper:6:22\r\n    at evalScript (node:internal\/process\/execution:78:60)\r\n    at node:internal\/main\/eval_stdin:30:5\r\n    at Socket.<anonymous> (node:internal\/process\/execution:195:5)\r\n    at Socket.emit (node:events:525:35)\r\n\r\nNode.js v18.11.0\r\n```\n\n### Environment\n\nBabel version: 7.20.2\r\nNode: v18.11.0\r\nnpm version: 8.19.2\r\nOS: macos 13.0\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: needs triage"]},{"title":"[Bug]: Static scope should not be considered as TDZ","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\n```js\r\nclass x { static 0 = x ; } \r\n```\n\n### Configuration file name\n\n.babelrc\n\n### Configuration\n\n```json\r\n{\r\n  \"plugins\": [\r\n    [\r\n      \"@babel\/plugin-transform-block-scoping\",\r\n      {\r\n        \"tdz\": true\r\n      }\r\n    ]\r\n  ]\r\n}\r\n```\n\n### Current and expected behavior\n\nInput code is expected to be terminated normally:\r\n```console\r\n$ node input.js # no error\r\n```\r\nbut output code throws `ReferenceError`:\r\n```console\r\n$ npx babel input.js | node\r\n[stdin]:1\r\nfunction _tdz(name) { throw new ReferenceError(name + \" is not defined - temporal dead zone\"); }\r\n                      ^\r\n\r\nReferenceError: x is not defined - temporal dead zone\r\n    at _tdz ([stdin]:1:29)\r\n    at <static_initializer> ([stdin]:3:14)\r\n    at [stdin]:1:1\r\n    at Script.runInThisContext (node:vm:129:12)\r\n    at Object.runInThisContext (node:vm:313:38)\r\n    at node:internal\/process\/execution:79:19\r\n    at [stdin]-wrapper:6:22\r\n    at evalScript (node:internal\/process\/execution:78:60)\r\n    at node:internal\/main\/eval_stdin:30:5\r\n    at Socket.<anonymous> (node:internal\/process\/execution:195:5)\r\n\r\nNode.js v18.11.0\r\n```\n\n### Environment\n\nBabel version: 7.20.2\r\nNode: v18.11.0\r\nnpm version: 8.19.2\r\nOS: macos 13.0\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: bug"]},{"title":"Presets need new releases to fix TS 4.9 support","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nAfter upgrading from Babel 7.18 to 7.20, I found that TypeScript 4.9 support was broken. I was still getting syntax errors on the `satisfies` operator.\r\n\r\nAfter comparing #14211 to my installed dependencies, I found outdated transitive dependencies `@babel\/helper-skip-transparent-expression-wrappers@npm:7.18.9` and `@babel\/plugin-transform-typescript@npm:7.18.8` in my lockfile.\r\n\r\nMy Babel dependencies, all `latest`:\r\n\r\n```\r\n\"@babel\/core\": \"7.20.2\",\r\n\"@babel\/eslint-parser\": \"7.19.1\",\r\n\"@babel\/preset-env\": \"7.20.2\",\r\n\"@babel\/preset-react\": \"7.18.6\",\r\n\"@babel\/preset-typescript\": \"7.18.6\",\r\n```\n\n### Describe the solution you'd like\n\nReleases of updated 7.20.x packages that cause these transitive dependencies to be upgraded.\n\n### Describe alternatives you've considered\n\nI can manually resolve the transitive dependencies to newer versions, but this should not be necessary.\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @aaronadamsCA! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","We cut a new release only when the package's source is changed. If a package's depending `@babel\/*` is updated, there will not be a new release for that package. For example, `@babel\/plugin-transform-spread` 7.19.0 requires `@babel\/helper-skip-transparent-expression-wrappers` ^7.18.9, the semantic version range `^7.18.9` already covers @babel\/helper-skip-transparent-expression-wrappers@npm:7.20.0, so we will not release `@babel\/plugin-transform-spread` just to change `^7.18.9` to `^7.20.0`.\r\n\r\nThis strategy minimizes the package that we need publishing and still ensures that users without a lockfile (fresh install) will get the latest packages. But package manager might prevent us from upgrading transient dependencies when a lock file presents. If you are using `yarn`, you can run `yarn dedupe` and remove redundant old `@babel\/*` packages.","Thank you for clarifying, appreciate it.\r\n\r\nWe use `yarn dedupe`, as does our Renovate config; the issue here is that there is no dependency path that requires newer versions of the underlying packages, so Yarn doesn't upgrade them. Babel 7.20 advertises TypeScript 4.9 support, but upgrading to Babel 7.20 doesn't actually deliver it without fiddling with the lockfile.\r\n\r\nI'm sure there's a good reason to prioritize publishing fewer packages; I'm just surprised that you'd expect users to regenerate (or manually update) lockfiles to upgrade transitive dependencies. I would think, if a leaf package gets a new version, its ancestor packages would get corresponding new versions too.","I've thought about this, but I'm not sure it's any better if this would lead to frequent releases of many packages without any changes.","The problem with publishing many packages is that whenever we publish more than ~15 packages the npm registry gives caching problems and `npm install` stops working for different users.\r\n\r\nWe could special-case some packages (preser-env, preset-typescript, core) to be released when their main dependencies have changes.","For anyone seeing this issue: We already support `satisfies`, it's just that if you're using `*.lock` you may need to manually update the plugin.\r\nbabeljs.io\/blog\/2022\/10\/27\/7.20.0","Modern versions of Yarn support `yarn up -R \"@babel\/*\"` for exactly this sort of thing \ud83d\ude4c","How can I resolve this on yarn v1? What would I need to update in the `yarn.lock` file to do it safely?","@lehighjcut , you should be able to edit your `yarn.lock`, remove any references to `@babel\/` packages that were installed as indirect dependencies, then rerun `yarn`. \r\n\r\nSee https:\/\/medium.com\/@ayushya\/upgrading-javascript-packages-deep-dependencies-using-yarn-8b5983d5fb6b for more details.","Thanks for that link @joshkel . I did try this just now and still no luck :\/\r\n\r\nFirst thing I tried was removing the reference to `@babel\/plugin-transform-typescript` and then regenerating `yarn.lock`. It is showing it resolved as 7.20.7. Didn't work.\r\n\r\nNext thing I tried was deleting all entries in `yarn.lock` that start with `@babel` then regenerating, also got 7.20.7 resolved for `@babel\/plugin-transform-typescript` but still didn't work as well :\/\r\n\r\n**EDIT: I think I found the culprit. Something is causing `@babel\/core` to be regenerated at 7.12 rather than 7.20. Looking into it**\r\n\r\nIt looks like Storybook mdx is pinning babel\/core to 7.12. However, I do have 2 entries for `@babel\/core`. One resolves to 7.20 and the other resolves to 7.12 (from storybook deps)","Nevermind, storybook doesn't seem to be affecting it as I attempted to remove all storybook dependencies and still not getting it to work.\r\n\r\nI've also tried running `yarn upgrade --scope @babel --latest` and `npx yarn-deduplicate yarn.lock --scopes @babel` and still not working :\/","https:\/\/classic.yarnpkg.com\/lang\/en\/docs\/selective-version-resolutions\/\r\nI don't recommend it, but you can try it.","Thanks @liuxingbaoyu , I appreciate you sending that over. It is one thing I haven't tried yet.\r\n\r\nIs there a particular way you would recommend using it? One thing I don't totally understand is exactly which babel packages need to be what version for `satisfies` to be supported.\r\n\r\nI see this in the changelog saying babel 7.20, but there are some packages that don't go up to 7.20 for example. So which ones is it saying need to be what version? If I knew that, maybe I could sort out what is going wrong.\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CHANGELOG.md\r\n\r\n![CleanShot 2023-01-13 at 10 21 17@2x](https:\/\/user-images.githubusercontent.com\/13022754\/212355510-89b790a0-1653-4e24-9147-cc25b6ee2d9c.png)\r\n","You can try to update `@babel\/plugin-transform-typescript`, `@babel\/parser`, `@babel\/types` to the latest.","> Is there a particular way you would recommend using it?\r\n\r\nThe way I recommend is to find which package pinned the babel version, but this can be difficult.","For any others trying to solve this issue with `npm`+`webpack` instead of `yarn`, I needed both these changes to get the `satisfies` operator working with Babel 7.20 and `babel-loader` 9+ for an existing project without deleting `package-lock.json`:\r\n \r\n- Running `npm update @babel\/plugin-transform-typescript --save` to update it from 7.18.10 to 7.20.7\r\n![image](https:\/\/user-images.githubusercontent.com\/9061593\/213831630-55aa4b28-73ee-44b4-98cd-f633cfdb1957.png)\r\n\r\n- Find the entry for `node_modules\/@babel\/preset-typescript` in `package-lock.json` and its `\"dependencies\"` property. Manually update `\"@babel\/plugin-transform-typescript\": \"^7.18.6\"` to `\"@babel\/plugin-transform-typescript\": \"^7.20.7\"`, save it, and run `npm ci` to do a clean install from `package-lock.json`\r\n![image](https:\/\/user-images.githubusercontent.com\/9061593\/213831727-bbca223b-6895-4016-8a27-48fbd7a0a985.png)\r\n\r\nThe first step won't update the `@babel\/preset-typescript` dependencies, so the second step is still required to get this working without deleting `package-lock.json` ([which you should never do](https:\/\/stackoverflow.com\/questions\/54124033\/deleting-package-lock-json-to-resolve-conflicts-quickly)). It seems releasing a new version of the package with updated dependencies would resolve this without having to perform manual surgery or deleting `package-lock.json` - this seems like a significant downside to the release strategy mentioned by @JLHwung.","@bradenneufeld Does `npm dedupe` work for you? We use Babel to build Babel, and run `yarn dedupe` whenever we upgrade `@babel\/*` dependencies.","JSC-Compiler project appears to support TS 4.9 -> TS 4.9 conversion (see [this issue](https:\/\/github.com\/MiguelGuthridge\/JSC-Compiler\/issues\/1) for current state).  Disclaimer: I've only been using it for JS -> JS so far, but compared with other converters I find JSC expresses the developers original intent most exactly.","Any news on this?"],"labels":["i: discussion","i: enhancement"]},{"title":"[Bug]: @babel\/preset-react inserts jsx-runtime after existing comments, which means they can be lost when bundling","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@rollup\/plugin-babel\n\n### Input code\n\nSee [REPL](https:\/\/babel.dev\/repl#?browsers=Chrome%20106&build=&builtIns=false&corejs=3.21&spec=false&loose=true&code_lz=JYWwDg9gTgLgBAIigUwIYGMYINwChcD0AVHDMgM7zoQgjIB28RBu19lcAYhBHALxwAFAEp-APjgAeACbAAbmMkFZCvLmQAPSLDjTkAM1QBXADbxuEbEA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=react&prettier=false&targets=&version=7.20.3&externalPlugins=&assumptions=%7B%7D) (must manually select \"automatic\" react runtime)\r\n\r\n```jsx\r\nimport \"react\";\r\n\r\n\/* test comment *\/\r\nconst Foo = () => <div><\/div>;\r\n\r\nexport default Foo;\r\n```\n\n### Configuration file name\n\nbabel.config.json\n\n### Configuration\n\n```json\r\n{\r\n  \"presets\": [\r\n    [\"@babel\/preset-react\", { \"runtime\": \"automatic\" }]\r\n  ]\r\n}\r\n```\n\n### Current and expected behavior\n\nExpected:\r\n```js\r\nimport \"react\";\r\nimport { jsx as _jsx } from \"react\/jsx-runtime\";\r\n\r\n\/* test comment *\/\r\nconst Foo = () => \/*#__PURE__*\/_jsx(\"div\", {});\r\nexport default Foo;\r\n```\r\nReceived:\r\n```js\r\nimport \"react\";\r\n\r\n\/* test comment *\/\r\nimport { jsx as _jsx } from \"react\/jsx-runtime\";\r\nconst Foo = () => \/*#__PURE__*\/_jsx(\"div\", {});\r\nexport default Foo;\r\n```\r\n\r\nI would expect the input comment to remain above the `Foo` function, rather than have the `react\/jsx-runtime` import interleaved.   \r\n\r\nThe changed order causes `rollup` to remove the comment, for sanctity of tree-shaking.  Please see [issue raised with rollup](https:\/\/github.com\/rollup\/rollup\/issues\/4703) for context.\r\n\r\nN.B. When `preset-env` is enabled, the imports\/comments _are_ in the correct order:\r\n```js\r\n\"use strict\";\r\n\r\nexports.__esModule = true;\r\nexports.default = void 0;\r\nrequire(\"react\");\r\nvar _jsxRuntime = require(\"react\/jsx-runtime\");\r\n\/* test comment *\/\r\nconst Foo = () => \/*#__PURE__*\/(0, _jsxRuntime.jsx)(\"div\", {});\r\nvar _default = Foo;\r\nexports.default = _default;\r\n```\r\n\r\n\n\n### Environment\n\n@babel\/core: 7.14.6\r\n@babel\/preset-react: 7.18.6\r\nMacOS Monterey\r\nNode 18.x\n\n### Possible solution\n\n...will see what I can do...\n\n### Additional context\n\nPerhaps needs a fixture added [here](https:\/\/github.com\/babel\/babel\/blob\/main\/packages\/babel-plugin-transform-react-jsx\/test\/fixtures\/react-automatic\/.should-properly-handle-comments-adjacent-to-children\/input.js)?","comments":["Hey @asos-tomp! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","This issue is related to [comment attachment](https:\/\/github.com\/babel\/babel\/blob\/main\/packages\/babel-parser\/ast\/comment-attachment.md), note that the printing behaviour is not changed since Babel 7.\r\n\r\n\/cc @lukastaegert if you are interested at this topic.\r\n\r\nI will first explain what happens here.\r\n\r\n```js\r\nimport \"react\";\r\n\r\n\/* test comment *\/\r\nconst Foo = () => <div><\/div>;\r\n\r\nexport default Foo;\r\n```\r\n\r\nIn this example, the `test comment` is attached as both the  `import \"react\"` ImportDeclaration's trailing comment and the `const Foo = ...` VariableDeclaration's leading comment (see also [AST Explorer](https:\/\/astexplorer.net\/#\/gist\/7361921992414a0ee70d1bf859b6c391\/41ccfa4271cc665fffd9ff97df1a3292d8f53353) here).\r\n\r\nNow when `@babel\/generator` prints the AST, it prints ImportDeclaration before VariableDeclaration, so the trailing comment is printed first. Now when we print the VariableDeclaration `const Foo = ...`, its leading comment is not printed because it has been printed before.\r\n\r\n> N.B. When preset-env is enabled, the imports\/comments are in the correct order:\r\n\r\nWhen `preset-env` is enabled, the commonjs transform replaces `ImportDeclaration` to a new AST node `const react = ...`. I guess the trailing comment of ImportDeclaration is not inherited (which it should), luckily the generator picks up the comment when it prints `const Foo = ...`, so now the comment prints right before `const Foo`.\r\n\r\nNow you may think maybe we can prioritize leading comments over trailing comments. Well let's take a look at another example:\r\n\r\n```js\r\nimport react from \"React\" \/\/ eslint-disable-line import\/no-extraneous-dependencies\r\n\r\nconst Foo = () => <div><\/div>;\r\n```\r\n\r\nWe will agree that the `eslint-disable-line` comment should be always printed after `import react`. So Babel should output\r\n\r\n```js\r\nimport react from \"React\" \/\/ eslint-disable-line import\/no-extraneous-dependencies\r\nimport { jsx as _jsx } from \"react\/jsx-runtime\";\r\n\r\nconst Foo = () => \/*#__PURE__*\/_jsx(\"div\", {});\r\n```\r\nHowever, from Babel's perspective, this example is no different than yours. As human we use whitespaces to convey our preferences about how the comment should be attached to its adjacent AST nodes, however this is not captured in the AST therefore the generator can't work on both cases.\r\n\r\nAs a workaround, you can manually add something between the import's and `const Foo`:\r\n\r\n```js\r\nimport react from \"React\";\r\n\r\n{}\r\n\/* test comment *\/\r\nconst Foo = () => <div><\/div>;\r\n```\r\n\r\nthe minifier will happily strip `{}` for you.","Thank you so much for this in-depth answer; it certainly makes a lot of sense that the parser cannot prefer leading over trailing affinity for comments; at least not without some inference that \"end of line\" comments have affinity to the line they trail, and that in all other (especially multi-line?) cases comments generally have affinity to something that follows. \r\n\r\nThat may be a more common convention, but certainly nothing I'm aware of in any specification.\r\n\r\nPerhaps, if anything, it highlights that the `commonjs` transform should be consistent, at least - but this would not resolve my (and perhaps `@rollup\/plugin-babel`'s) issue.\r\n\r\nThanks again for your input, I have avenues to explore, at least!   If a PR that explores the option of making a biased choice would be welcome, I would be happy to contribute; but it sounds like it wouldn't be based on any particular rigour.","We actually append comments to both the front and rear nodes, and the printer will print them only once. This allows more comments to be left after complex transformations.\r\n\r\n> and that in all other (especially multi-line?) cases comments generally have affinity to something that follows.\r\n\r\nYes it's theoretically possible, but I think it's hard to implement. We cannot establish a two-way reference to a comment to detect whether any subsequent nodes hold the comment.","Makes sense, thanks.\r\n\r\nI guess in this _specific_ use case (injection of `import { jsx } from 'react\/jsx-runtime';` via `@babel\/preset-react`) it could be said that since the import should not rely on side-effects or have a need for ordering, an inference _could_ be made to inject this as if at the beginning of the module, rather than immediately proceeding the use of `jsx`.   This might \"work\", and solve the issue at hand, if somewhat subverting the \"just in time\" ordering of imports.\r\n\r\nRollup evidently _does_ make a strong inference that a comment immediately proceeding an import statement is connected, and thus compiles it out along with the import - as per c[omment by @lukastaegert](https:\/\/github.com\/rollup\/rollup\/issues\/4703#issuecomment-1306093574) on the corresponding [rollup issue](https:\/\/github.com\/rollup\/rollup\/issues\/4703) I raised:\r\n> As import statements are ALWAYS removed, the comment is removed with the statement","![image](https:\/\/user-images.githubusercontent.com\/30521560\/200508050-17588758-d21f-4c4c-99ed-50ca33b7625d.png)\r\nActually the import is being added to the beginning of the code, while the last import in the input code holds a reference to the comment.\r\nA crude idea, maybe do a simple preprocessing of the ast in `@babel\/core`, but I'm afraid this will affect `\/\/ eslint-disable-line xxxx`","I guess by \"beginning of the code\" I would have assumed:\r\n```js\r\nimport { jsx as _jsx } from \"react\/jsx-runtime\";\r\nimport \"react\";\r\n\r\n\/* test comment *\/\r\nconst Foo () => \/*#__PURE__*\/_jsx(\"div\", {});\r\nexport default Foo;\r\n```\r\n...could perhaps be achieved?","```\r\nimport { jsx as _jsx } from \"react\/jsx-runtime\";\r\n\/\/ This file xxxxx\r\nimport a\r\n```\r\n\r\nThis seems to be worse.\r\nI'm not sure the import order would make sense in some edge cases, while the babel addition at the end is more readable for me.\r\n\r\nref: https:\/\/github.com\/babel\/babel\/issues\/14495#issuecomment-1120967780","Agreed that it would not be wise, in general, due to the ordering\/dependency issues that you describe.\r\n\r\nJust aware that there's a very specific babel plugin for injecting this `react\/jsx-runtime` that could be \"special cased\" if it's understood it should never be dependent on side-effects created prior in the same source file.","Perhaps related? https:\/\/github.com\/babel\/babel\/issues\/5512","Yes, it looks like that's a similar issue.\r\nI've tried a few things, it's a bit cumbersome, and only works in a few cases. \ud83d\ude15\r\nAt the same time it introduces a lot of complexity and possible unstable output, and I'm not sure it's worth it compared to stating it in the documentation.","![image](https:\/\/user-images.githubusercontent.com\/30521560\/203703214-3ca44676-ea2f-4ca7-a9d2-b99dd9ed6371.png)\r\n\r\nYes, this is really annoying, and I didn't even think of a good way.\r\nCurrently our comment blank line depends on node, when it is used as trailing Comments, it can print newline normally. But when it is used as leading Comments, empty lines will not be printed, which is obviously worse."],"labels":["i: discussion","i: enhancement","area: comments"]},{"title":"[Bug]: Non-contructable functions become constructable","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\n\/* arrow *\/\r\nvar f1 = () => {};\r\nnew f1();                        \/\/ case 1\r\nclass C1 extends f1 {};          \/\/ case 2\r\n\r\n\/* async function *\/\r\nvar f2 = async function () {};\r\nnew f2();                        \/\/ case 3\r\nclass C2 extends f2 {};          \/\/ case 4\r\n\r\n\/* genertor *\/\r\nvar f3 = function * () {};\r\nnew f3();                        \/\/ case 5\r\nclass C3 extends f3 {};          \/\/ case 6\r\n\r\n\/* method *\/\r\nvar {f4} = {f4(){}};\r\nnew f4();                        \/\/ case 7\r\nclass C4 extends f4 {};          \/\/ case 8\r\n\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\n`case 1`~`case 8` in `input.js` throws `TypeError`:\r\n```console\r\n$ node input.js\r\ninput.js:3\r\nnew f1();\r\n^\r\n\r\nTypeError: f is not a constructor\r\n    at Object.<anonymous> (\/input.js:3:1)\r\n    at Module._compile (node:internal\/modules\/cjs\/loader:1159:14)\r\n    at Module._extensions..js (node:internal\/modules\/cjs\/loader:1213:10)\r\n    at Module.load (node:internal\/modules\/cjs\/loader:1037:32)\r\n    at Module._load (node:internal\/modules\/cjs\/loader:878:12)\r\n    at Function.executeUserEntryPoint [as runMain] (node:internal\/modules\/run_main:81:12)\r\n    at node:internal\/main\/run_main_module:23:47\r\n\r\nNode.js v18.11.0\r\n```\r\nbut `output.js` is terminated without error since all four non-ordinary functions became constructable:\r\n```console\r\n$ node output.js # no error\r\n```\r\nI'm curious whether these behaviors are intended or not.\r\n\n\n### Environment\n\n[Reproduction on Bable's own REPL](https:\/\/babeljs.io\/repl#?browsers=since%202015&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=PQKgBAhgTlD2DuYTAFADdpgGYEYwF4wAKASgID4wBvAXwG4UA7AU0V1LrC-597--DAwAYwgBnZmBwphAG3FiwAYTzMAHgBdmjACaLc1evwFDREsACYUKUJDEBPRsOwBXJxoCWsRklQYo2BYEdo7OWG7Cnt7EZLQMLGwWHMYp_IIi4pIAzDLyYopKQepauvpBcanpZpIALNa2AObazFAasAHI6JhYWcHh7l4-4KSG8azYWcmp01xVmWAArLkKyr3F2noTo5Wm8wBs9eAAtswaABawOr5dAVRYNTTBdzWktPRM4_dTMzsZ5gDsy3yyhqYHWpWwoIqKTm5gAHEA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.20.2&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","For the arrow function cases, did you try the [`noNewArrows: false` assumption](https:\/\/babeljs.io\/docs\/en\/assumptions#nonewarrows) (it is `true` by default)?","I tried `noNewArrows: false` and arrow function cases are now throwing `TypeError` in the output code. Thank you! \ud83d\ude00"],"labels":["i: enhancement"]},{"title":"[Bug]: Identifier `await` to `_await`","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\n\/\/ input.js\r\nvar await = 0;\r\nconsole.log(await);\r\nconsole.log(this[\"await\"]);\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nI know that renaming variables will be okay in most cases, but it would be better to avoid such cases as much as possible, because there are some cases where renaming variable could results in inconsistent behavior, like accessing global variable using property access to `This`.\r\n\r\nAlso, I am using V8 engine to demonstrate the expected result instead of NodeJS.\r\nSince NodeJS is not an engine but a runtime, the behavior of this in NodeJS does not follow ECMAScript specification.\r\n```console\r\n$ d8\r\nV8 version 10.9.0\r\n\r\n$ d8 input.js\r\n0\r\n0\r\n\r\n$ d8 output.js\r\n0\r\nundefined\r\n```\n\n### Environment\n\n[Reproduction on Babel's own repl](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=G4QwTgBCDuIJYBcIF4IAYDcAoG8EYgHpCIB5AaSwQAs4BnAbQCJdEmBdA4iAOwHskFIA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.20.2&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nBy the way, I was trying the Babel REPL few hours ago, where the Babel version was lower than 7.20.2 (I don't remember the exact version though,) and in that version I observed that Babel preserves the name of identifier `await`. However, it seems that renaming variable happens again at version 7.20.2. I wonder what is the correct or intended behavior of the identifier `await`.","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","This issue can be divided into two parts.\r\n1. `await` was renamed, this is intentional. (https:\/\/babeljs.io\/docs\/en\/babel-plugin-transform-reserved-words to be honest `await` doesn't seem to be a reserved word for es3, but the renaming is indeed made by this plugin)\r\n2. Arbitrary variables may be renamed, which is not the best but may be expected, because babel's scope tracking is not guaranteed to be 100% correct, so using a new name is simpler and beneficial to reduce problems. (Also it seems that a similar renaming behavior exists for typescript)"],"labels":["i: question"]},{"title":"[Bug]: Returned value of a generator function becomes enumerable","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nfunction * f(){}\r\n\r\nvar x = f();\r\nfor(p in x) console.log(p);\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\n`input.js` prints nothing:\r\n```console\r\n$ node input.js # prints nothing\r\n```\r\n```console\r\n$ node output.js\r\nnext\r\nthrow\r\nreturn\r\ntoString\r\n```\n\n### Environment\n\n[Reproduction on Babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=since%202015&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=PTAEGcAsHsFcBsAmoAOAnAlgOwC6i9DpNgOYA0oARrHgPrYBu0A1gKagAUAhlsoZKzTgAlKky5WiAFAAzWFgDGODNCygAVKBkdhAbwC-UqQy5pQAD1ABeLToDcs6Gg4pQ2C6IWrw0eKwB08NAkLsJ2QA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.20.2&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: needs triage"]},{"title":"[Bug]: Modifying `length` property of an arrow function using `Array.from`","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nArray . from . call ( x => x => 0 , `` ) ;\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nThe arrow function in `input.js` is changed into ordinary function in `output.js`.\r\n\r\n`input.js` is terminated normally:\r\n```console\r\n$ node input.js # no error\r\n```\r\n\r\nHowever, it seems that it is not allowed to modify `length` property of ordinary functions:\r\n```console\r\n$  node output.js\r\noutput.js:1\r\nArray.from.call(function (x) {\r\n           ^\r\n\r\nTypeError: Cannot assign to read only property 'length' of function 'function (x) {\r\n    return 0;\r\n  }'\r\n    at Function.from (<anonymous>)\r\n    at Object.<anonymous> output.js:1:12)\r\n    at Module._compile (node:internal\/modules\/cjs\/loader:1159:14)\r\n    at Module._extensions..js (node:internal\/modules\/cjs\/loader:1213:10)\r\n    at Module.load (node:internal\/modules\/cjs\/loader:1037:32)\r\n    at Module._load (node:internal\/modules\/cjs\/loader:878:12)\r\n    at Function.executeUserEntryPoint [as runMain] (node:internal\/modules\/run_main:81:12)\r\n    at node:internal\/main\/run_main_module:23:47\r\n\r\nNode.js v18.11.0\r\n```\r\n\n\n### Environment\n\n[Reproduction on Babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=since%202015&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=IIJxEME8AIDpoGYgPYFs7QMbgDY-gBTQAe0AvAHwnlUAM0ANNAAbPQCU0A3EA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.20.1&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Unfortunately there is no way to fix this, since it's impossible to create an es5 function for which `IsConstructor` returns false (step 5.a of https:\/\/tc39.es\/ecma262\/#sec-array.from).","Well, for arrows with 0 and 1 params... :smiling_imp: \r\n\r\n```js\r\nlet two = () => 2;\r\nlet id = x => x;\r\n\r\n\/\/ -->\r\n\r\nlet two = Object.getOwnPropertyDescriptor({ get two() { return 2; }, \"two\").get;\r\nlet id = Object.getOwnPropertyDescriptor({ set id(x) { return x; }, \"id).set;\r\n```\r\n\r\n(Please do _not_ open a PR that does that :P)"],"labels":["i: bug"]},{"title":"[Bug]: Assigning `new.target` as a default parameter with same name throws `TypeError`","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nvar f = function x ( ... { x = new . target } ) { }\r\nclass C extends f { } \r\nnew C ( ) ;\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\n`input.js` is expected to be terminated normally:\r\n```console\r\n$ node input.js # no error\r\n```\r\nHowever, `output.js` results in `TypeError`:\r\n```console\r\n$ node output.js\r\noutput.js:17\r\n    x = _ref$x === void 0 ? this instanceof x ? this.constructor : void 0 : _ref$x;\r\n                                 ^\r\n\r\nTypeError: Right-hand side of 'instanceof' is not an object\r\n    at new x (output.js:17:34)\r\n    at C._createSuperInternal output.js:7:283)\r\n    at new C (output.js:26:19)\r\n    at Object.<anonymous> (output.js:30:1)\r\n    at Module._compile (node:internal\/modules\/cjs\/loader:1159:14)\r\n    at Module._extensions..js (node:internal\/modules\/cjs\/loader:1213:10)\r\n    at Module.load (node:internal\/modules\/cjs\/loader:1037:32)\r\n    at Module._load (node:internal\/modules\/cjs\/loader:878:12)\r\n    at Function.executeUserEntryPoint [as runMain] (node:internal\/modules\/run_main:81:12)\r\n    at node:internal\/main\/run_main_module:23:47\r\n\r\nNode.js v18.11.0\r\n```\n\n### Environment\n\n[Reproduction on babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=since%202015&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=G4QwTgBAZhC80FcB2BjALgSwPZIgDwgAoIA6MiAb3zgiQFMB3UiNcAczrQgF8IBKSjwBQKADYgAzhIgBhCHTxo6SACbSYVYfSZziAgNxCgA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.20.1&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Seems that this is similar to #14406, but it was not completely fixed.\r\n\r\nThis one is correctly unshadowed:\r\n\r\n```js\r\nfunction x() { let x = new.target; }\r\n\/\/ --->\r\nfunction x() {\r\n  var _x = this instanceof x ? this.constructor : void 0;\r\n}\r\n```\r\n\r\nHowever, this one is incorrect:\r\n\r\n```js\r\nlet f = function x() { let x = new.target; }\r\n\/\/ --->\r\nvar f = function x() {\r\n  var x = this instanceof x ? this.constructor : void 0;\r\n};\r\n```"],"labels":["i: bug"]},{"title":"[Bug]: Helper functions contaminating global `this`","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nvar { ...x } = this;\r\nfor (var p in this) {\r\n  console.log(p);\r\n}\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nBabel is defining helper functions in global scope so `globalThis` is contaminated.\r\nTherefore, in `output.js`, iterating over `this` and printing its elements gives inconsistent results compared to `input.js`.\r\n\r\nI am using V8 engine to demonstrate the result instead of NodeJS.\r\nSince NodeJS is not an engine but a runtime, the behavior of `this` in NodeJS  does not follow ECMAScript specification.\r\n\r\n### Expected behavior\r\n---\r\n```console\r\n$ d8\r\nV8 version 10.9.0\r\n$ d8 input.js\r\n...\r\nx\r\np\r\n```\r\n\r\n### Actual behavior\r\n```console\r\n$ d8 output.js\r\n...\r\n_objectDestructuringEmpty     <-- unexpected \r\n_extends                      <-- unexpected\r\nx\r\np\r\n```\r\n\n\n### Environment\n\n[Reproduction on Babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=since%202015&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=G4QwTgBA3hB08A8IF8IF4IBcAWBLAzgNwBQAZgPaQAUokADhLgHZZ74CU0xEEAxuU3zkANgFNYw8gHMqddiWRA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.20.1&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\nOne possible way to solve this issue would be using `defineProperty` with property `enumerable: false` when defining helper functions:\r\n```js\r\nObject.defineProperty(this, \"_extends\", {\r\n  value: function _extends() { \/* body *\/ },\r\n  enumerable: false\r\n});\r\n```\r\nbut I think there might be a better way to solve this issue.\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Unfortunately this is a common behavior that's been around for a long time, and we even recommend using IIFEs.","Also this isn't a problem in practice because Babel-compiled files are usually either bundled or run in CommonJS.\r\n\r\nAlso, the spec doesn't say that the global object cannot have additional properties \ud83d\ude1b","If anyone is interested, the where the spec allows additional property on the global object is step 11 of https:\/\/tc39.es\/ecma262\/#sec-initializehostdefinedrealm!","Thanks for letting me know, it helped me a lot!"],"labels":["i: enhancement"]},{"title":"[Bug]: Name property - Named to unnamed","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nfunction f(g = function(){}) { return g; }\r\nx = f();\r\nconsole.log(x.name);\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nHello,\r\n\r\nRunning the input program, `x.name` should be `'g'` but it is `''` in the transpiled program:\r\n```console\r\n$ node --version\r\nv18.11.0\r\n$ node input.js\r\ng\r\n$ node output.js\r\n\/\/ empty string\r\n```\n\n### Environment\n\n[Reproduction on Babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=since%202015&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=GYVwdgxgLglg9mABMAFAc0QXmea8woCUA3gL6GLGIBOAplCNUmgNyKkBQAHlskSxwgIAznAA2tAHRi4aFF0lgAhgFtahAUA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.19.3&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nIn fact, I already reported ten similar issues about the `name` property, and only four of them got **i: enhancement** tag as follows: \r\n* https:\/\/github.com\/babel\/babel\/issues\/14986\r\n* https:\/\/github.com\/babel\/babel\/issues\/14987\r\n* https:\/\/github.com\/babel\/babel\/issues\/14988\r\n* https:\/\/github.com\/babel\/babel\/issues\/14989\r\n\r\nbut the others still need triage without any manual tags:\r\n* https:\/\/github.com\/babel\/babel\/issues\/14993\r\n* https:\/\/github.com\/babel\/babel\/issues\/14994\r\n* https:\/\/github.com\/babel\/babel\/issues\/14995\r\n* https:\/\/github.com\/babel\/babel\/issues\/14996\r\n* https:\/\/github.com\/babel\/babel\/issues\/14997\r\n* https:\/\/github.com\/babel\/babel\/issues\/14998\r\n\r\nWhile I wanted to report all the possible edge cases that triggers the issue related to the `name` property, I think that it is a little bit annoying for reviewers because they seem to be quite similar issues. Sorry for that. Nevertheless, I found a new edge case that triggers the similar bug, and I wanted to make sure that this case is reported as well. I would appreciate it if you kindly review this issue and remaining ones, and assign appropriate tags if possible.\r\n\r\nThank you for your kind review. ","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Thank you so much for the long-term report, which brought us to our attention and fixed some issues!\r\n\r\nBut since function names have so many cases that it is difficult to achieve full support, and they are rarely used, we may not be able to fix all these cases, thank you for your understanding!","Thank you for reviewing all the open issues I listed about the function names!\r\n\r\nBy the way, I realized that you assigned the **i: enhancement** tag as well to the following issues, which are not related to the function name, while I expected **i: bug** tag:\r\n* https:\/\/github.com\/babel\/babel\/issues\/15013\r\n* https:\/\/github.com\/babel\/babel\/issues\/15105\r\n* https:\/\/github.com\/babel\/babel\/issues\/15000\r\n* https:\/\/github.com\/babel\/babel\/issues\/14999\r\n\r\nI got a simple curiosity regarding it; could you let me know what is the difference between **i-enhancement** and **i: bug**?","> I got a simple curiosity regarding it; could you let me know what is the difference between **i-enhancement** and **i: bug**?\r\n\r\nTo be honest, these could all be classified as `bug`, but since I personally think they may have very little impact and are not among the ones we expect 100% support, I've marked them as `enhancement`.\ud83d\ude42","Thank you for your detailed explanation. I appreciate it!"],"labels":["i: enhancement"]},{"title":"Add `.raw` or `.extra.raw` to `Identifier`","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on this feature?\r\n\r\n### What problem are you trying to solve?\r\n\r\nI'm adding support for \"Explicit Resource Management\" in Prettier.\r\n\r\nThere is a test added in https:\/\/github.com\/babel\/babel\/pull\/14968\r\n\r\n```js\r\nfor (using o\\u0066 of of);\r\n```\r\n\r\nSince\r\n\r\n```js\r\nfor (using of of of);\r\n```\r\n\r\nis invalid, so we can't print `o\\u006` as `of`, and there seems no easy way to fix this.\r\n\r\nI've try to convince ESTree to add `.raw`, but most likely that's not going to happen. [link](https:\/\/github.com\/estree\/estree\/issues\/291)\r\n\r\nI'm not sure what's the best to do. Let me know what you think.\r\n\r\n### Describe the solution you'd like\r\n\r\nChange `Identifer` to \r\n\r\n```json\r\n{\r\n\t\"type\": \"Identifer\",\r\n\t\"value\": \"of\",\r\n\t\"raw\": \"o\\u0066\"\r\n}\r\n```\r\n\r\n### Describe alternatives you've considered\r\n\r\nWe can slice from the original input, but it's difficult because of `.typeAnnotation` exists.\r\n\r\n### Documentation, Adoption, Migration Strategy\r\n\r\n_No response_","comments":["Hey @fisker! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Can prettier not support this? I really can't imagine anyone doing this in real code. \ud83d\ude02\r\n\r\nI personally have no problem with adopting the option to enable appending `raw` to `extra`.\r\nBut I'm concerned that this will have a performance impact, even for the prettier.\r\n\r\nBy the way, https:\/\/github.com\/prettier\/prettier\/issues\/8917 Although it was reopened, it was not unlocked."],"labels":["i: discussion","i: enhancement","pkg: parser"]},{"title":"[Bug]: `range` missing on comments","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n```console\r\nrequire('@babel\/parser').parse('a\/\/', {ranges: true})\r\nNode {\r\n  type: 'File',\r\n  start: 0,\r\n  end: 3,\r\n  loc: SourceLocation {\r\n    start: Position { line: 1, column: 0, index: 0 },\r\n    end: Position { line: 1, column: 3, index: 3 },\r\n    filename: undefined,\r\n    identifierName: undefined\r\n  },\r\n  range: [ 0, 3 ],                                                \/\/ <--  expected\r\n  errors: [],\r\n  program: Node {\r\n    type: 'Program',\r\n    start: 0,\r\n    end: 3,\r\n    loc: SourceLocation {\r\n      start: [Position],\r\n      end: [Position],\r\n      filename: undefined,\r\n      identifierName: undefined\r\n    },\r\n    range: [ 0, 3 ],\r\n    sourceType: 'script',\r\n    interpreter: null,\r\n    body: [ [Node] ],\r\n    directives: []\r\n  },\r\n  comments: [\r\n    {\r\n      type: 'CommentLine',\r\n      value: '',\r\n      start: 1,\r\n      end: 3,\r\n      loc: [SourceLocation]\r\n                                                      \/\/ <--  Missing range\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nMissing `.range` on comments\r\n\r\n### Environment\r\n\r\n@babel\/parser: 7.20.1 => 7.20.1\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\nThis should be a known issue, see this comment\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/53185ea275b0a278ac4aafe5841f2a332cabff31\/eslint\/babel-eslint-parser\/src\/convert\/convertComments.cjs#L8\r\n\r\nHope someone can look into it, so Prettier can also simply the location related function\r\n\r\n```diff\r\n- const start = node.range ? node.range[0] : node.start;\r\n+ const [start] = node.range;\r\n```\r\nhttps:\/\/github.com\/prettier\/prettier\/blob\/bf6cf1c96c9f5ae48b6b5eb94367af5ef32f35de\/src\/language-js\/loc.js#L8","comments":["Hey @fisker! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","It seems that comments without `ranges` are expected, we don't have this property for the inner type definition of the comments, that comment was five years ago, I'm not sure what happened in the middle, let's see what the other members think.","Fine with any decision you make, because `tokens` don't have `.range` either. We can live with that.","What's the advantage of range instead of .start\/.end? Is it for ESTree compatibility?","We support many es parsers, have to pick one."],"labels":["i: enhancement","pkg: parser","area: comments"]},{"title":"The example in README.md is outdated","body":"Sorry, can't find a suitable issue template.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/172584\/198030808-1b97b55c-c79a-428f-80d8-84dbf0fcfa1e.png)\r\n![image](https:\/\/user-images.githubusercontent.com\/172584\/198030870-2e554b94-588e-4863-8906-984958101756.png)\r\n","comments":["Hey @fisker! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Thanks!"],"labels":["i: bug","i: docs"]},{"title":"Enable the OpenSSF Scorecard Github Action and Badge","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nHi, I am Joyce from Google and I'm working on behalf of the [Open Source Security Foundation][ossf] (OpenSSF) to help essential open-source projects improve their supply-chain security.\r\n\r\nAccording to [Open Source Security and Risk Analysis Report](https:\/\/www.synopsys.com\/software-integrity\/resources\/analyst-reports\/open-source-security-risk-analysis.html?intcmp=sig-blog-ossra1), 84% of all codebases have at least one vulnerability, with an average of 158 per codebase. The majority have been in the code for more than 2 years and have documented solutions available.\r\n\r\nEven in large tech companies, the tedious process of reviewing code for vulnerabilities falls down the priority list, and there is little insight into known vulnerabilities and solutions that companies can draw on.\r\n\r\nThat\u2019s where the OpenSSF [Scorecards][sc] tool is helping. The tool's focus is to help maintainers understand their project's security posture and assess the risks that dependencies could introduce.\r\n\r\n[sc]: https:\/\/github.com\/ossf\/scorecard\r\n[ossf]: https:\/\/openssf.org\/\r\n\r\n\n\n### Describe the solution you'd like\n\nThe OpenSSF developed the [Scorecards][sc] [in partnership with GitHub][sc-blog]. It runs dozens of automated security checks to help maintainers to understad and improve their project's supply-chain security posture \r\n\r\nTo simplify maintainers' lives, the OpenSSF has also developed the [Scorecard GitHub Action][sc-gha]. It is very lightweight and runs on every change to the repository's main branch. The results of its checks are available on the project's [security dashboard](https:\/\/github.com\/babel\/babel\/security), and include suggestions on how to solve any issues (see examples below). The Action does not run or interact with any workflows, but merely parses them to identify possible vulnerabilities. This Action has been adopted by 1800+ projects already, having some prominent users like [Tensorflow][tensorflow], [Angular][angular], [Flutter][flutter], [sos.dev][sos-dev] and [deps.dev][deps-dev].\r\n\r\nThe babel's project already has a good supply-chain security posture, according to Scorecard checks, being in the top 11%! Considering it, the scorecard could help you on improve it even more, guarantee that the project would still follow it in future changes, be up to date to best practices sice scorecard is in constant improvement and also show users your commitment to security best practices (using the [badge][badge], for example). \r\n\r\nWould you be interested in a PR which adds this Action? Optionally, it can also publish your results to the OpenSSF REST API, which allows a [badge][badge] with the project's score to be added to its README.\r\n\r\nIn case of doubts or concerns you can check out the [Scorecards FAQ][faq]. Anyway, feel free to reach me out.\r\n\r\n![Code scanning dashboard with multiple alerts, including Code-Review and Token-Permissions][img-security]\r\n\r\n![Detail of a Token-Permissions alert, indicating the specific file and remediation steps][img-detail]\r\n\r\n[badge]: https:\/\/openssf.org\/blog\/2022\/09\/08\/show-off-your-security-score-announcing-scorecards-badges\/\r\n[checks]: https:\/\/github.com\/ossf\/scorecard#scorecard-checks\r\n[ossf]: https:\/\/openssf.org\/\r\n[sc]: https:\/\/github.com\/ossf\/scorecard\r\n[sc-blog]: https:\/\/github.blog\/2022-01-19-reducing-security-risk-oss-actions-opensff-scorecards-v4\/\r\n[sc-gha]: https:\/\/github.com\/ossf\/scorecard-action\r\n[faq]: https:\/\/github.com\/ossf\/scorecard\/blob\/main\/docs\/faq.md#frequently-asked-questions\r\n[img-security]: https:\/\/user-images.githubusercontent.com\/15221358\/190184391-84ca1844-259a-4b3b-9c86-74adadbea7f1.png\r\n[img-detail]: https:\/\/user-images.githubusercontent.com\/15221358\/190184600-ee8d3b39-077e-416a-8711-1b5fb01cf0b3.png\r\n\r\n<!-- Prominent Users -->\r\n[tensorflow]: https:\/\/github.com\/tensorflow\/tensorflow\r\n[angular]: https:\/\/github.com\/angular\/angular  \r\n[flutter]: https:\/\/github.com\/flutter\/flutter \r\n[sos-dev]: https:\/\/sos.dev\/ \r\n[deps-dev]: https:\/\/deps.dev\/ \r\n\n\n### Describe alternatives you've considered\n\nN\/A\n\n### Documentation, Adoption, Migration Strategy\n\nN\/A","comments":["Hey @joycebrum! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement","i: needs triage"]},{"title":"Simplify deps graph relying on `@babel\/core` peerDependency","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #13977\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\nThis PR simplifies the dependencies graph of a common `@babel\/core`+`@babel\/preset-env` install, by sharing types\/traverse\/template using the `@babel\/core` peer dependency rather than explicitly depending on those packages. This avoids us relying on the package manager hoisting strategy to prevent duplicate copies of those packages.\r\n\r\nIn https:\/\/github.com\/babel\/babel\/issues\/13977#issuecomment-973216347 I said that we needed to wait for Babel 8 because adding a peer dependency is, in general, a breaking change. However, I realized that it's not true in this specific case: all those packages are already dependencies of packages that have a peer dependency on `@babel\/core`, so `@babel\/core` is already available.\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/15034\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\n\n","comments":["It would be nice if we could specify a higher version of `@babel\/core` in the future.","Ok this causes cycles that hare very hard to solve. Description: https:\/\/github.com\/nicolo-ribaudo\/test-esm-cycles (the \"We can solve this problem by...\" at the end is a \"We can change the language to work like this\")."],"labels":["PR: Internal :house:"]},{"title":"[Bug]: iterableIsArray is only enabled in for of transform when loose is false","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\nhttps:\/\/babeljs.io\/repl\/#?browsers=chrome%2044&build=&builtIns=false&corejs=false&spec=false&loose=true&code_lz=MYewdgzgLgBAtjAvDMBTA7jAGgCgNp4CMANAEwC65AlAFABmIATjDqJLANYwh3xUwBvGjBhsIIADaoAdBJABzHB1oBfGjTGw8AQ2IAjckhQZsOKkA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env&prettier=true&targets=&version=7.17.12&externalPlugins=&assumptions=%7B%22iterableIsArray%22%3Atrue%7D\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nWhen loose: true, array destructing is correctly transformed as array while for of doesn't\n\n### Environment\n\nbabel playground\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @Austaras! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","`loose` takes precedence over assumptions, because you specify it \"closer\" to the plugin. I strongly suggest not using `loose`, and use assumptions to have the control you need.","I know, but current behavior is only loose:false and iterableIsArray:true would make loose transform take effect."],"labels":["i: question"]},{"title":"[Bug]: Re-assignment to class during static field initialization","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nclass C { static x = C = 0 ; } ;\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nMutable assignment to class name should throw `TypeError` during an initialization of static fields.\r\nHowever, the transpiled code terminates without any error.\r\nI'm attaching a [link](https:\/\/github.com\/oracle\/graaljs\/issues\/657) for a more detailed explanation as it might be helpful.\r\n```console\r\n\u276f node\r\nWelcome to Node.js v18.10.0.\r\nType \".help\" for more information.\r\n> class C { static x = C = 0 ; } ;\r\nUncaught TypeError: Assignment to constant variable.\r\n    at <static_initializer> (REPL1:1:24)\r\n```\n\n### Environment\n\n[Reproductions on Babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=since%202105&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=MYGwhgzhAEDC0G9oQC5hQS2NAHtAvHAdAAzQDc0AvhUA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.19.3&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement"]},{"title":"[Bug]: Wrong evaluation order when using spread in function argument","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nnull ( 0 , ... x ) ;\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\n`ReferenceError` is expected (in step 3) in the input program but the transpiled program throws `TypeError` (in step 5).\r\n\r\n![Image](https:\/\/user-images.githubusercontent.com\/68288688\/193253938-da0beb40-90e4-4fb2-8d87-9df3056feea9.png)\r\n\r\n```console\r\n\u276f node\r\nWelcome to Node.js v18.10.0.\r\nType \".help\" for more information.\r\n> null ( 0 , ... x ) ;\r\nUncaught ReferenceError: x is not defined\r\n```\n\n### Environment\n\n[Reproductions on Babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=HYVwNmAEAUAMA0kB0LIA8CUBuIA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.19.3&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement"]},{"title":"[Bug]: Name property - temporarily named CoalesceExpression","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nlet x = function ( ) { } ?? 0;\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nHello, I've read the comment that Babel doesn't aim at perfectly matching the spec. Just in case, I'll let you know the rest of the name property issues I found.\r\nAlso, I divided these name property issues into several cases because I think these cases are from distinct reasons.\r\n\r\nRunning the input program, `x.name` should be `''` but it is `'_ref'` in the transpiled program.\r\n```console\r\n\u276f node\r\nWelcome to Node.js v18.10.0.\r\nType \".help\" for more information.\r\n> let x = function () {} ?? 0;\r\nundefined\r\n> x.name\r\n''\r\n```\n\n### Environment\n\n[Reproductions on Babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=since%202105&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=DYUwLgBAHhC8EDMCuA7AxmAlgexRAFBAJQQDeEAvhAPzUQAMA3EA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.19.3&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement"]},{"title":"[Bug]: Name property - temporarily named ObjectLiteral AssignmentExpression","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\n\/* This category applies to any function: function, class, generator, async function, etc. *\/\r\nlet x = { } = function ( ) { } ;\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nHello, I've read the comment that Babel doesn't aim at perfectly matching the spec. Just in case, I'll let you know the rest of the name property issues I found.\r\nAlso, I divided these name property issues into several cases because I think these cases are from distinct reasons.\r\n\r\nRunning the input code, `x.name` should be `''` but it is `'_ref'` in the transpiled code.\r\n```console\r\n\u276f node\r\nWelcome to Node.js v18.10.0.\r\nType \".help\" for more information.\r\n> let x = { } = function ( ) { } ; \/\/ x should be unnamed, but \"_ref\"\r\nundefined\r\n> x.name\r\n''\r\n```\n\n### Environment\n\n[Reproductions on Babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=since%202105&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=DYUwLgBAHhC8EG8IF84QGYFcB2BjMAlgPbYQAUEAlIihANxA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.19.3&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement"]},{"title":"[Bug]: Name property - temporal naming in ForInOfStatement","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nfor ( var x of [ class { } ] ) break ;\r\nfor ( var y of [ function * ( ) { } ] ) break ;\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nHello, I've read the comment that Babel doesn't aim at perfectly matching the spec. Just in case, I'll let you know the rest of the name property issues I found.\r\nAlso, I divided these name property issues into several cases because I think these cases are from distinct reasons.\r\n\r\nRunning the input code,\r\n`x.name` should be `''` but it is `'_class'` in the transpiled code.\r\n`y.name` should be `''` but it is `'_callee'` in the transpiled code.\r\n```console\r\n\u276f node\r\nWelcome to Node.js v18.10.0.\r\nType \".help\" for more information.\r\n> for ( var x of [ class { } ] ) break ;\r\nundefined\r\n> for ( var y of [ function * ( ) { } ] ) break ;\r\nundefined\r\n> x.name\r\n''\r\n> y.name\r\n''\r\n```\n\n### Environment\n\n[Reproductions on Babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=GYewTgBAFBBuCGkAeETAgbQgYwDbwGcCIBvCAXwgF0IBKCAIzAFN4BrCAbgChRIYEkAJ6p0WYAFcAdtgAuASxBSIAKmh1SFahqasOnIA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.19.3&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement"]},{"title":"[Bug]: Name property - temporarily named operands of logical operators","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\n\/* This category applies to class and generator *\/\r\nlet x = 0 || class { } ;\r\nlet y = 0 || function*() { } ;\r\nlet z = 1 && class { } ;\r\nlet w = 1 && function*() { } ;\r\nlet p = null ?? class { } ;\r\nlet r = null ?? function*() { } ;\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nHello, I've read the comment that Babel doesn't aim at perfectly matching the spec. Just in case, I'll let you know the rest of the name property issues I found.\r\nAlso, I divided these name property issues into several cases because I think these cases are from distinct reasons.\r\n\r\nRunning the input code,\r\n`x.name` should be `''` but it is `'_class'` in the transpiled code.\r\n`y.name` should be `''` but it is `'_callee'` in the transpiled code.\r\n`z.name` should be `''` but it is `'_class2'` in the transpiled code.\r\n`w.name` should be `''` but it is `'_callee2'` in the transpiled code.\r\n`w.name` should be `''` but it is `'_class3'` in the transpiled code.\r\n`w.name` should be `''` but it is `'_callee3'` in the transpiled code.\r\n```console\r\n\u276f node\r\nWelcome to Node.js v18.10.0.\r\nType \".help\" for more information.\r\n> let x = 0 || class { } ;\r\nundefined\r\n> let y = 0 || function*() { } ;\r\nundefined\r\n> let z = 1 && class { } ;\r\nundefined\r\n> let w = 1 && function*() { } ;\r\nundefined\r\n> let p = null ?? class { } ;\r\nundefined\r\n> let r = null ?? function*() { } ;\r\nundefined\r\n> x.name\r\n''\r\n> y.name\r\n''\r\n> z.name\r\n''\r\n> w.name\r\n''\r\n> p.name\r\n''\r\n> r.name\r\n''\r\n```\n\n### Environment\n\n[Reproductions on Babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=DYUwLgBAHhC8EAYIB9kQMbAIYGccQG8IBfCAbgChRIBPORFNAMwFcA7dMASwHs2AqABQBKQiXJVwEAF70AjBABkijNjxjSlahADu8pStYdufIaKKbJkAA702LYMAgB-Z6tz4LE7QCc7Dp1cII05eARENciA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.19.3&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement"]},{"title":"[Bug]: Name property - temporarily named this.x","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nthis.x = class{} ;\r\nthis.y = function*(){} ;\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nHello, I've read the comment that Babel doesn't aim at perfectly matching the spec. Just in case, I'll let you know the rest of the name property issues I found.\r\nAlso, I divided these name property issues into several cases because I think these cases are from distinct reasons.\r\n\r\nRunning the input code,\r\n`x.name` should be `''` but it is `'_class'` in the transpiled code.\r\n`y.name` should be `''` but it is `'_callee'` in the transpiled code.\r\n```console\r\n\u276f node\r\nWelcome to Node.js v18.10.0.\r\nType \".help\" for more information.\r\n> this.x = class{} ;\r\n[class (anonymous)]\r\n> this.y = function*(){} ;\r\n[GeneratorFunction (anonymous)]\r\n> x.name\r\n''\r\n> y.name\r\n''\r\n```\n\n### Environment\n\n[Reproductions on Babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=C4CwlgzgdAHgBAXjgYwDYEMIQN4F84DcAUKJFAJ6JwBmArgHbLBgD29AVABQCUehQA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.19.3&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement"]},{"title":"[Bug]: Name property - temporarily named class prototype","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nclass x extends class {} {}\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nHello, I've read the comment that Babel doesn't aim at perfectly matching the spec. Just in case, I'll let you know the rest of the name property issues I found.\r\nAlso, I divided these name property issues into several cases because I think these cases are from distinct reasons.\r\n\r\nRunning the input code, `Object.getPrototypeOf(x).name` should be `''` but `'_class'` in the transpiled code.\r\n```console\r\n\u276f node\r\nWelcome to Node.js v18.10.0.\r\nType \".help\" for more information.\r\n> class x extends class {} {}\r\nundefined\r\n> Object.getPrototypeOf(x).name\r\n''\r\n```\n\n### Environment\n\n[Reproductions on Babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=since%202105&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=MYGwhgzhAEAe0FNYBcEDsAmNSRgbwF9pCg&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.19.3&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement"]},{"title":"JSX: make interpolations explict","body":"### \ud83d\udcbb\r\n\r\n- [x] Would you like to work on this feature?\r\n\r\n### What problem are you trying to solve?\r\n\r\nTake this JSX as example:\r\n```js\r\n<div>A {\"B\"}<\/div>\r\n```\r\n\r\nThe resulting transform is this one:\r\n```js\r\nReact.createElement(\"div\", null, \"A \", \"B\");\r\n```\r\n\r\nThere's no way to distinguish static content `\"A \"` from the following children `\"B\"`.\r\n\r\n### Describe the solution you'd like\r\n\r\n```js\r\nReact.createElement(\"div\", null, \"A \", React.createElement(React.Interpolation, null, \"B\"));\r\n```\r\n\r\n#### Alternative\r\n\r\nThe goal of this alternative solution is to have `React.interpolation` as no-op by default, hence backward compatible with any JSX based solution that doesn't need or care about interpolations.\r\n\r\n```js\r\nReact.createElement(\"div\", null, \"A \", React.interpolation(\"B\"));\r\n```\r\n\r\nadding `React.Interpolation` would allow great performance improvements because there won't be any need to process `\"A \"` anymore, or ever, in the resulting stack.\r\n\r\n### Describe alternatives you've considered\r\n\r\nthere must be a way to understand when JSX meant a static content or a dynamic one that would change over time: text, array, conditional components, and so on.\r\n\r\nno alternative comes to mind.\r\n\r\n### Documentation, Adoption, Migration Strategy\r\n\r\nit's a breaking change due `React.Interpolation` unknown to the world right now but it could land as opt-in through the `pragmaInterpolation` directive, if defined.","comments":["Hey @WebReflection! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Follow up: I'd like to work on this feature but I also need to understand if this is a welcome improvement over current transformation. Ideally this could be an opt-in as `pragmaInterpolation` to allow developers to explore and improve over current libraries and, in the future, we could explore a similar solution around static VS interpolated *props* but that would be an issue and proposal a part.\r\n\r\nThe final goal is to allow best in class performance where most of the job can be skipped when statically known already, and only \"*holes*\" would need extra work on reactive updates.","As extra follow up around this issue and possible enhancements:\r\nhttps:\/\/webreflection.medium.com\/jsx-is-inefficient-by-default-but-d1122c992399","This shouldn't be technically difficult, but I'm not sure what kind of response this will get in the react world.\r\nIn addition, since this is not officially supported by react, you may need to implement a third-party plugin yourself. (this shouldn't be too difficult)\r\n\r\nPossibly related stuff\r\nhttps:\/\/github.com\/babel\/babel\/issues\/14010\r\nhttps:\/\/github.com\/jridgewell\/jsx2","neither related links seem to be relevant or updated, but this issue was to start a conversation so that the default is sane, not the current inefficient transform it creates by default.\r\n\r\nme writing a plugin should not be the outcome, as that's not different from saying \"use third party tools to solve our defaults\" which would be unfortunate.","to whoever would like to play round this idea, I've published a transformer module that does that (it does more, but also that) here https:\/\/github.com\/ungap\/plugin-transform-hinted-jsx#readme\r\n\r\nI'm not a Babel IL expert, so apologizes if this makes you go bananas, but the whole goal was to demonstrate these hints can be useful, and backward compatible, if you return the default *createElement* when a tag template literal is passed as first, and only, argument.","This all looks really amazing and [SWC](https:\/\/github.com\/swc-project\/swc\/issues) would be interested in this as well.\r\n\r\nAre there any benchmarks of this so we can gauge the impact this has? This seems like it could be a big improvement but also seems a big change in behavior so I think it could be great if we could see some benchmarks or maybe even let people know what to look for in your [plugin](https:\/\/github.com\/ungap\/plugin-transform-hinted-jsx#readme) so others can do benchmarking on their own app. \r\n\r\nI think it would also help push and give more attention to this issue and any subsequent PRs here and in SWC as people love seeing \"performance increased by x%\" and\/or \"the next generation of JSX performance\" or something similar \ud83d\ude05. Would also be another good blog topic.","I\u2019m working on the benchmark side. Things might be a bit more convoluted than now in terms of using these hints the right way *but* I believe I can remove vDOM diffing completely from the equation if my initial thoughts are right, still speculating though if that would bring considerable performance improvements, due more complex logic. Current area I\u2019m exploring is map once for outer component \/ element so that further updates will be \u201clinear\u201d through such map (that is, pinpoint all chain of arguments in a single outer loop and be smart on conditional interpolations within outer components \/ elements) ","@athammer I've summarized the current state in [this post](https:\/\/webreflection.medium.com\/jsx-can-be-more-efficient-by-default-466cfd704fc0), created [a library](https:\/\/github.com\/WebReflection\/udomsay#readme), and benchmarked it.\r\n\r\nNot only it's faster than other JSX based libraries, the current implementation is smaller, it includes signals too and, strawberry on top, it doesn't use\/need vDOM so its memory consumption is closer to template literal based libraries than preact and friends.\r\n![udomsay-v0 1 7](https:\/\/user-images.githubusercontent.com\/85749\/198581035-ae25994d-e7e6-45f3-8357-54a490964c63.png)\r\n"],"labels":["i: discussion","area: react","i: enhancement"]},{"title":"[Bug]: Name property - missing name of static fields","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nclass X { static x = function(){} }\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nValue of `X.x.name`: `'x'` expected but `''` in transpiled code.\r\n```console\r\n\u276f node\r\nWelcome to Node.js v18.8.0.\r\nType \".help\" for more information.\r\n> class X { static x = function(){} }\r\nundefined\r\n> X.x.name\r\n'x'\r\n```\n\n### Environment\n\n[Reproductions on Babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=since%202105&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=MYGwhgzhAEAa0G9oQC5hQS2NAHtAvNAGYCuAdsJgPZkAUAlAgL7QtA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.19.3&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement"]},{"title":"[Bug]: Name property - missing name in object binding pattern","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nvar { x = function ( ) { } } = 0 ;\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nValue of `x.name`: `'x'` expected but `''` in transpiled code.\r\n```console\r\n\u276f node\r\nWelcome to Node.js v18.8.0.\r\nType \".help\" for more information.\r\n> var { x = function ( ) { } } = 0 ;\r\nundefined\r\n> x.name\r\n'x'\r\n```\n\n### Environment\n\n[Reproductions on Babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=since%202105&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=G4QwTgBA3hAeEF4IDMCuA7AxgFwJYHt0IAKCASmggF9rEIAGCAbiA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.19.3&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement"]},{"title":"[Bug]: Name property - unexpected naming","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nvar [ x ] = [ function ( ) { } ] ;\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nValue of `x.name`: `''` expected but `'x'` in transpiled code.\r\n```console\r\n\u276f node\r\nWelcome to Node.js v18.8.0.\r\nType \".help\" for more information.\r\n> var [ x ] = [ function ( ) { } ] ;\r\nundefined\r\n> x.name\r\n''\r\n```\n\n### Environment\n\n[Reproductions on Babel's own REPL](https:\/\/babeljs.io\/repl#?browsers=since%202105&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=G4QwTgBA2hAeEF0IF5oQGYFcB2BjALgJYD22EAFBAJQQDeEAvohANxA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.19.3&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement"]},{"title":"[Bug]: Name property - different name after transpilation","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nclass X { 0(){} }       \/\/ case 1\r\nclass X { [0](){} }     \/\/ case 2\r\nlet x = { 0 ( ) { } } ; \/\/ case 3\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\n### Case 1\r\nValue of `(new X)[0].name`: `'0'` expected but `'_'` in transpiled code.\r\n```console\r\n\u276f node\r\nWelcome to Node.js v18.8.0.\r\nType \".help\" for more information.\r\n> class X { 0(){} }\r\nundefined\r\n> (new X)[0].name\r\n'0'\r\n```\r\n\r\n### Case 2\r\nValue of `(new X)[0].name`: `'0'` expected but `'_'` in transpiled code.\r\n```console\r\n\u276f node\r\nWelcome to Node.js v18.8.0.\r\nType \".help\" for more information.\r\n> class X { [0](){} }\r\nundefined\r\n> (new X)[0].name\r\n'0'\r\n```\r\n\r\n### Case 3\r\nValue of `x[0].name`: `'0'` expected but `'_'` in transpiled code.\r\n```console\r\n\u276f node\r\nWelcome to Node.js v18.8.0.\r\nType \".help\" for more information.\r\n> let x = { 0 ( ) { } } ;\r\nundefined\r\n> x[0].name\r\n'0'\r\n```\n\n### Environment\n\nReproductions on Babel's own REPL\r\n* [case 1](https:\/\/babeljs.io\/repl#?browsers=since%202105&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=MYGwhgzhAEAa0G9oAYAUBKBBfaWg&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.19.3&externalPlugins=&assumptions=%7B%7D)\r\n* [case 2](https:\/\/babeljs.io\/repl#?browsers=since%202105&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=MYGwhgzhAEAa0G9oG0AMBdAFASgQX2gKA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.19.3&externalPlugins=&assumptions=%7B%7D)\r\n* [case 3](https:\/\/babeljs.io\/repl#?browsers=since%202105&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=DYUwLgBAHhC8EG8IAYIAoIEpEQL54gG4g&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=true&targets=&version=7.19.3&externalPlugins=&assumptions=%7B%7D)\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @p51lee! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","We should probably document somewhere that our support for function names is a best-effort strategy, and doesn't aim at perfectly matching the spec."],"labels":["i: enhancement"]},{"title":"Where is api doc","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nI didn't find any API doc on the official website. I haven't been using Js for a long time, so I was wondering, where is the API doc of Babel? I don't even know what methods a class has, and what are the parameters in the methods\n\n### Describe the solution you'd like\n\nI need api doc\n\n### Describe alternatives you've considered\n\nI need api doc\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @zhbinary! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Here is the docs on our website: https:\/\/babel.dev\/docs\/en\/ , you can tap the `docs` from our website:\r\n\r\n<img width=\"369\" alt=\"image\" src=\"https:\/\/user-images.githubusercontent.com\/3607926\/191975257-44bc94b9-436f-44c9-a3d0-1ca7561aa106.png\">\r\n\r\nWhat API are you using? What is your scenario? For example if you are using `@babel\/core`, you can refer to https:\/\/babel.dev\/docs\/en\/babel-core. If you are a plugin author, you can checkout https:\/\/github.com\/jamiebuilds\/babel-handbook\/blob\/master\/translations\/en\/plugin-handbook.md. Without such information, opening a broad issue would not be much helpful.","If you want to write a complex plug-in, you can also directly view the babel source code. Our source code is typescript, and there are relatively complete types.","> \r\n\r\nThanks, i use parser, traverse and generator to convert ast to js source code, the babel source cod has too few comments"],"labels":["i: enhancement","i: docs"]},{"title":"Implement support for internal @babel\/core plugins","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | \r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      | Yes\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\nThis is my first pass at implementing https:\/\/github.com\/babel\/rfcs\/pull\/10. I didn't think about and responded to all the feedback yet.\r\n\r\nSo far this PR includes all the plugins in `@babel\/core`, and it's possible to do so already in v7 by just adding them as dependencies.\r\n- We now have a lot of `@babel-core`----(dependency)--->`@babe\/plugin-...`---->(peerDependency)--->`@babel\/core` cycles, but apparently we already had a `@babel-core`----(dependency)--->`@babe\/helper-compilation-targets`---->(peerDependency)--->`@babel\/core` cycle and no one complained, so it works in all the package managers.\r\n- Doing it this way doesn't give us any of the benefits of the RFC, except that we can start exposing in Babel 7 the same API that we will have in Babel 8.\r\n  **EDIT** There is a big benefit I didn't think about: by simply updating `@babel\/core`, users can make sure that all their plugin for stable features are up to date.\r\n\r\n~~I still need to actually use the internal plugins in `@babel\/preset-env`, to check that everything works.~~\r\n\r\nAdditionally, while going through the list of all the stable plugins I noticed that some of them may benefit from a rename that either makes it more clear what they do, or makes their name consistent with the name of other plugins. You can read my proposals as comments in `packages\/babel-core\/src\/transformation\/internal-plugins.ts`.\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/14966\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/53739\/","This is ready for review. This change isn't much useful per se, because we cannot really move the plugins currently used by `@babel\/preset-env` to `@babel\/core` otherwise they would all be duplicated (once in `@babel\/preset-env`'s dependencies, and once inside `@babel\/core`'s source). However:\r\n- this PR prepares all the infrastructure, and as soon as we have to move a new plugin to `@babel\/preset-env` we can do so by making it a \"real\" internal `@babel\/core` plugin rather than a new dependency. I'm eagerly waiting for a proposal to get to Stage 4 :)\r\n- this PR doesn't change the size of the `@babel\/core` & `@babel\/preset-env` combo.\r\n- ~~this PR doesn't move bugfix plugins yet into `@babel\/core`, we can discuss if we should do it or not (probably yes?), but this PR is already quite big and we don't need to move them now.~~\r\n\r\nWhile reviewing, please take a look at the comments in `packages\/babel-core\/src\/transformation\/internal-plugins.ts` because I would like to decide the naming before merging (otherwise we have to wait for Babel 8)","I would love to receive some feedback on the plugin renaming suggested in the comment in [`internal-plugins.ts`](packages\/babel-core\/src\/transformation\/internal-plugins.ts), even from those that will not review this.\r\n\r\nWhile going through the list of all plugins, I noticed that some of them had very inconsistent naming. We have multiple options:\r\n- [ ] don't rename them\r\n- [ ] rename them now for the internal plugins, and keep the old name for the plugin packages\r\n- [ ] don't rename them now, add aliases later for the internal plugins, and keep the old name for the plugin packages. Remove the old names in Babel 8.\r\n- [ ] don't rename them now, and do the rename in Babel 8.0.0.\r\n\r\n","I'm a little concerned that this PR is blurring the distinction between `@babel\/core` and `@babel\/preset-env`.\r\nPreviously `@babel\/core` was a framework, while `@babel\/preset-env` resembled a convenient collection of plugins.\r\nNow a large number of plugins are included in `@babel\/core`, and only a few remain in `@babel\/preset-env`, which is not very ideal.\r\n\r\nAt the same time, the advantages of purpose also have some limitations.\r\nMainly it is the proposals that reach the fourth stage to benefit, but they are rarely affected by `@babel\/core, @babel\/traverse`, because bug fixes and standard alignment also happen more in <=3 proposals and ts. (now the ts plugin is widely used, and ts fixes and feature support often want newer `@babel\/core`)\r\n\r\nThe main way I understand in rfc to encourage users to upgrade is to deprecate the proposal that becomes the fourth phase, and use the package manager to remind users to upgrade `@babel\/core`.\r\nThis appears to be a \"soft limit\" only, we still need compatibility for older versions of `@babel\/core`. And once we implement \"hard limits\", the soft limits will no longer be necessary and we will be able to reap most of these benefits.\r\n\r\nBut I don't block this PR, I just want to have more detailed discussions. \ud83d\ude03","(I replied to @liuxingbaoyu in https:\/\/github.com\/babel\/rfcs\/pull\/10)"],"labels":["PR: New Feature :rocket:","PR: Needs Review","pkg: core","PR: Needs Docs"]},{"title":"[preset-env] Automatically compile features not supported by webpack, even if they are supported by the browserslist target","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nScenario: using Babel with Webpack X and targeting Browser Y. Browser Y supports syntax Z, but Webpack X doesn't.\r\n\r\n`@babel\/preset-env` will not compile syntax Z, and then Webpack will throw about it saying \"unexpected token; you might need an appropriate loader to handle this file\". Users are surprised\/annoyed, because they expected Babel to properly handle modern syntax.\n\n### Describe the solution you'd like\n\n`babel-loader` should pass through `.caller` the webpack\/acorn version, and `@babel\/preset-env` should have data to know which plugins to compile. This can also apply to other tools, but I have always only seen this problem reported by people using webpack.\r\n\r\nWe can consider `console.warn`ing if we have to enable a plugin just because Webpack needs it, and not because the target browser needs it.\n\n### Describe alternatives you've considered\n\nWe could allow setting `webpack: \"XXX\"` in targets, but it requires users to explicitly set it rather than being automatic.\n\n### Documentation, Adoption, Migration Strategy\n\nNothing, users will just see less confusing errors :)\r\n\r\nRelated: https:\/\/github.com\/babel\/babel\/issues\/14280","comments":[],"labels":["i: enhancement","pkg: preset-env","area: downstream"]},{"title":"[Bug]: functions defined inside a switch case block will be trasformed uncorrectly","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nbabel-loader (webpack)\r\n\r\n### Input code\r\n\r\n```js\r\nswitch ('what') {\r\ndefault:\r\n    console.log(a())\r\n    function a() { return 1; }\r\n}\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n```json\r\n{\r\n    \"loose\": true, \r\n    \"forceAllTransforms\": true,\r\n    \"exclude\": [\"@babel\/transform-function-name\"]\r\n}\r\n```\r\n\r\n### Current and expected behaviour\r\n\r\nCurrent output which results in exceptions:\r\n\r\n```js\r\n\"use strict\";\r\n\r\nswitch ('what') {\r\ndefault:\r\n    console.log(a());\r\n\r\n    var a = function a() {\r\n      return 1;\r\n    };\r\n\r\n}\r\n```\r\n\r\nWe had some problems inside IE8 according to https:\/\/github.com\/babel\/babel\/issues\/1087#issuecomment-373375175, so we excluded `@babel\/transform-function-name`, and we got output :\r\n\r\n```js\r\n\"use strict\";\r\n\r\nswitch ('what') {\r\ndefault:\r\n    console.log(a());\r\n\r\n    var a = function () {\r\n      return 1;\r\n    };\r\n\r\n}\r\n```\r\n\r\nExpected output:\r\n\r\n```js\r\n\"use strict\";\r\n\r\nswitch ('what') {\r\ndefault:\r\n    console.log(a());\r\n\r\n    function a() {\r\n      return 1;\r\n    };\r\n\r\n}\r\n```\r\n\r\n### Environment\r\n\r\n- `@babel\/core`: 7.18.13\r\n- `@babel\/preset-env`: 7.18.10\r\n\r\n\r\n### Possible solution\r\n\r\nEven in the switch case block, babel should analysis whether the function is called before doing the tranformation.\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @aleen42! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","This bug is probably in `@babel\/plugin-transform-block-scoped-functions`: until it's fixed, you can disable that plugin.\r\n\r\n---\r\n\r\nThis is _very hard_ to fix. For comparison, we compile\r\n```js\r\n{\r\n    console.log(a());\r\n\r\n    function a() {\r\n      return 1;\r\n    }\r\n}\r\n```\r\nto\r\n```js\r\n{\r\n  var a = function a() {\r\n    return 1;\r\n  };\r\n\r\n  console.log(a());\r\n}\r\n```\r\n\r\nHowever, in switch statements there isn't a way to move the function to the beginning of the block. Consider this example:\r\n\r\n```js\r\nswitch (x) {\r\n  case 0:\r\n    let num = 3;\r\n    log(0);\r\n  default:\r\n    log(1);\r\n    function log(s) { console.log(s || num) }\r\n}\r\n```\r\n\r\nIf we compile it to\r\n```js\r\nswitch (x) {\r\n  case 0:\r\n    let num = 3;\r\n    log(0);\r\n  default:\r\n    log(1);\r\n    var log = function (s) { console.log(s || num) }\r\n}\r\n```\r\nit doesn't work when `x` is `0`; if we compile it to\r\n```js\r\nswitch (x) {\r\n  case 0:\r\n    let num = 3;\r\n    var log = function (s) { console.log(s || num) }\r\n    log(0);\r\n  default:\r\n    log(1);\r\n}\r\n```\r\nit doesn't work when `x` is `1`.","Maybe it would be better for this plugin not to be enabled by default, it looks rudimentary and has only one test.","@nicolo-ribaudo In such a case, why not keeping it and do not compile it with a variable to hold such a function?","Encountered this issue associated with `@babel\/plugin-transform-block-scoped-functions`.\r\n\r\nIn the case I encountered, moving the function to the top of the case would have resolved it (so a not fully accurate fix would have been sufficient)."],"labels":["i: bug"]},{"title":"[Bug]: Excessive class properties transformation when other plugins are present","body":"### \ud83d\udcbb\r\n\r\n- [x] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nOther (Next.js, Gatsby, vue-cli, ...)\r\n\r\n### Input code\r\n\r\n```js\r\nfunction log(target, key, desc) {\r\n  return {\r\n    get() {\r\n      let value = desc.get();\r\n      console.log('log: ', key, value);\r\n      return value;\r\n    } \r\n  }\r\n}\r\nclass A {\r\n  @log a = 1;\r\n  \r\n  #privateProperty = 2;\r\n  \r\n  undecoratedProperty = \"two\";\r\n  \r\n  get #getter() {\r\n    return 3;\r\n  }\r\n  \r\n  get publicGetter() {\r\n    return 'three';\r\n  }\r\n  \r\n  #method() {\r\n    return 4 \r\n  }\r\n  \r\n  publicMethod() {\r\n    return 'four';\r\n  }\r\n}\r\n\r\nlet a = new A();\r\n\r\nconsole.log(a.a)\r\n```\r\n\r\n### Configuration file name\r\n\r\nbabel.config.cjs\r\n\r\n### Configuration\r\n\r\n```js\r\n'use strict';\r\n\r\nconst { resolve } = require;\r\n\r\nmodule.exports = {\r\n  presets: ['@babel\/preset-typescript'],\r\n  plugins: [\r\n    [\r\n      resolve('@babel\/plugin-transform-typescript'),\r\n      {\r\n        allowDeclareFields: true,\r\n        onlyRemoveTypeImports: true,\r\n        \/\/ Default enums are IIFEs\r\n        optimizeConstEnums: true,\r\n      },\r\n    ],\r\n    [\r\n      resolve('@babel\/plugin-proposal-decorators'),\r\n      {\r\n        \/\/ The stage 1 implementation\r\n        version: 'legacy',\r\n      },\r\n    ],\r\n    \/\/ I don't want this required\r\n    [resolve(\"@babel\/plugin-proposal-private-methods\"), {\r\n      loose: true\r\n    }],\r\n    \/\/ Nor this required\r\n    [\r\n      resolve('@babel\/plugin-proposal-class-properties'),\r\n      {\r\n        loose: true,\r\n      },\r\n    ],\r\n  ],\r\n};\r\n```\r\n\r\n### Current and expected behavior\r\n\r\nCurrent behavior is that without the private methods and class-properties plugins, babel errors, saying I need those plugins.\r\n\r\nI would like to omit this plugins as modern browsers support private methods and class-properties -- so I should only need the decorators and typescript plugins.\r\n\r\n### Environment\r\n\r\nThis is a [closish reproduction on the REPL](https:\/\/babeljs.io\/repl\/#?browsers=last%201%20firefox%20versions&build=&builtIns=false&corejs=3.21&spec=false&loose=true&code_lz=GYVwdgxgLglg9mABAGzgcwBRQIYCc0CmUANIgNYECepAJgQM4QCUiA3gFCKK5Ei5IcuXQlAwtBQrsiKIAbtmQgCiALyI6jAHQixAbk6TEEBPTjTNqTAHJLALkRXSFanIVKm-w9179Xigp5CAL6IBkHs4RDI2PT0iACCbAYAApaI2KqIAIyBBgDEAA64MPJQBAAKuHAFBLhQlJkATLlc4HTGuNhlNJXVtfWZAERQAO5wgy2IIoh5ImW4YkmSPFB8SADMgeFcBtMFIABGyDAQAOJE84sSXCtrDlAAFjwEVlsG-QC2RA9wNFcGNx8SAALKEuNswYh9kcTgBZb6_f7LIEOYBwPivMIRdjsaRQdKZMAEEYJPQ44xgUzmSwYbCabBMIA&debug=false&forceAllTransforms=false&shippedProposals=true&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Cstage-2%2Ctypescript&prettier=true&targets=&version=7.19.0&externalPlugins=&assumptions=%7B%7D)\r\n\r\nBut locally, I have \r\n```\r\n\u276f npx envinfo --preset babel\r\n\r\n  System:\r\n    OS: Linux 5.15 Ubuntu 22.04.1 LTS 22.04.1 LTS (Jammy Jellyfish)\r\n  Binaries:\r\n    Node: 16.17.0 - ~\/.volta\/tools\/image\/node\/16.17.0\/bin\/node\r\n    Yarn: 1.22.19 - ~\/.volta\/tools\/image\/yarn\/1.22.19\/bin\/yarn\r\n    npm: 8.19.1 - ~\/.volta\/tools\/image\/npm\/8.19.1\/bin\/npm\r\n```\r\n\r\n### Possible solution\r\n\r\nRemove the requirement for these plugins to exist.\r\n\r\n### Additional context\r\n\r\nI'm a library author, and would like consumers of my library to determine how much babel transformation they wish to do for their supported browsers.\r\n\r\nIt's possible that if a consumer is only supporting evergreen stuff, my library would need 0 transformation, even with native class fields \/ methods and private class fields \/ methods.","comments":["Hey @NullVoxPopuli! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","ah ok, so I think I found out something.\r\nIn my project I had to install:\r\n\r\n```\r\npnpm add --save-dev browserslist\r\npnpm add --save-dev caniuse-lite\r\n```\r\n(these were not present)\r\n\r\nand then, I delete the plugins from my babel config, so now I have:\r\n```js\r\n'use strict';\r\n\r\nconst { resolve } = require;\r\n\r\nmodule.exports = {\r\n  presets: ['@babel\/preset-typescript'],\r\n  plugins: [\r\n    [\r\n      resolve('@babel\/plugin-transform-typescript'),\r\n      {\r\n        allowDeclareFields: true,\r\n        onlyRemoveTypeImports: true,\r\n        \/\/ Default enums are IIFEs\r\n        optimizeConstEnums: true,\r\n      },\r\n    ],\r\n    [\r\n      resolve('@babel\/plugin-proposal-decorators'),\r\n      {\r\n        \/\/ The stage 1 implementation\r\n        version: 'legacy',\r\n      },\r\n    ],\r\n  ],\r\n};\r\n```\r\n\r\nand I have succesful compilation! my private fields and class properties are kept in-tact.","just kidding, I found this:\r\n```js\r\nfunction _initializerWarningHelper(descriptor, context) {\r\n  throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.');\r\n}\r\n\r\n```\r\n\r\nthis needs to not exist","The legacy decorator transform depends on the class properties transform, in other words, you can't use legacy decorator transform while preserving class properties. Consider migrate to the latest transform if you target to an engine with ES2022 support.\r\n\r\n```js\r\n\/\/ Requires Babel 7.19\r\n[\r\n  resolve(\"@babel\/plugin-proposal-decorators\"),\r\n  {\r\n    \/\/ The stage 3 implementation\r\n    version: \"2022-03\",\r\n  },\r\n];\r\n```\r\n\r\nSee also [docs](https:\/\/babeljs.io\/docs\/en\/babel-plugin-proposal-decorators) for differences with `2022-03` and `legacy`, ","I understand that's the current capabilities, but I'd like that changed -- for ecosystems using the legacy decorator transforms, it seems reasonable (and certainly desired) to work without the class properties transform.  Having up to 70% savings when minified, and up to 35% savings in development means that folks who are working in these ecosystems have less work done on their code, faster builds. It seems reasonable that we can improve the lives of these ecosystems using the legacy transform, without having to migrate the entire ecosystem to a totally new syntax, yeah? (which would be a _huge_ lift, breaking changes, incompatibilities, etc)","We could potentially only compile the fields that have a decorator, and leave the others unchanged.","That would be a huge help <3","This problem does not seem to occur only with \"legacy\".  I'm seeing the same issue with \"2018-09\".  This restriction should definitely be documented with the decorators plugin.","We also have the same problem with our projects, that the filesize is getting out of control, when we are using decorators while creating web components. The problem is, that `decoratorsBeforeExport` and `version\": \"2018-09` is needed for the `lit` library to work correctly with decorators, see: https:\/\/lit.dev\/docs\/components\/decorators\/#decorators-babel but since the filesize is getting so big while not using `version: 'legacy'`, you can't use decorators, if you want a performant website.\r\n\r\nI had a look if I can make a PR for this, but it was way to complicated for me. I really would appreciate, if the babel would made improvements for this problem to reduce file size, or else decorators with `lit` are kinda not usable. I know that in this case it is not only a `babel` problem but also a `lit` problem, but that is why I agree with @NullVoxPopuli that it's a problem for the ecosystem, if the resulting filesize is not getting improved."],"labels":["help wanted","i: enhancement","Spec: Decorators (Legacy)"]},{"title":"[Bug]: replaceWith doesn't remove any replaced name bindings from scope","body":"### \ud83d\udcbb\r\n\r\n- [x] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n```js\r\nconst { parse } = require('@babel\/parser')\r\nconst traverse = require('@babel\/traverse').default\r\nconst template = require('@babel\/template')\r\n\r\nconst ast = parse('class Foo { }')\r\n\r\ntraverse(ast, {\r\n  ClassDeclaration(path) {\r\n    const [replacement] = path.replaceWith(\r\n      template.statement('class Foo { foo() { } }')()\r\n    )\r\n    replacement.skip()\r\n  },\r\n})\r\n\r\n```\r\n\r\n### Configuration file name\r\n\r\npackage.json\r\n\r\n### Configuration\r\n\r\nN\/A\r\n\r\n### Current and expected behavior\r\n\r\nReplacing `class Foo` with a different `class Foo` should work just fine (there's only one `Foo` in scope when all is said and done).  Instead the old `class Foo` binding doesn't get removed from the scope and it throws this error when registering the new `class Foo`:\r\n\r\n```\r\n\/Users\/andy\/github\/codemodsquad\/astx\/node_modules\/.pnpm\/@babel+traverse@7.18.13\/node_modules\/@babel\/traverse\/lib\/scope\/index.js:481\r\n      throw this.hub.buildError(id, `Duplicate declaration \"${name}\"`, TypeError);\r\n                     ^\r\n\r\nTypeError: Cannot read properties of undefined (reading 'buildError')\r\n    at Scope.checkBlockScopedCollisions (\/Users\/andy\/github\/codemodsquad\/astx\/node_modules\/.pnpm\/@babel+traverse@7.18.13\/node_modules\/@babel\/traverse\/lib\/scope\/index.js:481:22)\r\n    at Scope.registerBinding (\/Users\/andy\/github\/codemodsquad\/astx\/node_modules\/.pnpm\/@babel+traverse@7.18.13\/node_modules\/@babel\/traverse\/lib\/scope\/index.js:642:16)\r\n    at Scope.registerDeclaration (\/Users\/andy\/github\/codemodsquad\/astx\/node_modules\/.pnpm\/@babel+traverse@7.18.13\/node_modules\/@babel\/traverse\/lib\/scope\/index.js:587:12)\r\n    at BlockScoped (\/Users\/andy\/github\/codemodsquad\/astx\/node_modules\/.pnpm\/@babel+traverse@7.18.13\/node_modules\/@babel\/traverse\/lib\/scope\/index.js:300:12)\r\n    at newFn (\/Users\/andy\/github\/codemodsquad\/astx\/node_modules\/.pnpm\/@babel+traverse@7.18.13\/node_modules\/@babel\/traverse\/lib\/visitors.js:222:17)\r\n    at Scope.crawl (\/Users\/andy\/github\/codemodsquad\/astx\/node_modules\/.pnpm\/@babel+traverse@7.18.13\/node_modules\/@babel\/traverse\/lib\/scope\/index.js:815:9)\r\n    at Scope.init (\/Users\/andy\/github\/codemodsquad\/astx\/node_modules\/.pnpm\/@babel+traverse@7.18.13\/node_modules\/@babel\/traverse\/lib\/scope\/index.js:793:12)\r\n    at NodePath.setScope (\/Users\/andy\/github\/codemodsquad\/astx\/node_modules\/.pnpm\/@babel+traverse@7.18.13\/node_modules\/@babel\/traverse\/lib\/path\/context.js:146:30)\r\n    at NodePath.replaceWith (\/Users\/andy\/github\/codemodsquad\/astx\/node_modules\/.pnpm\/@babel+traverse@7.18.13\/node_modules\/@babel\/traverse\/lib\/path\/replacement.js:154:8)\r\n    at ClassDeclaration (\/Users\/andy\/github\/codemodsquad\/astx\/temp.js:15:10)\r\n```\r\n\r\n### Environment\r\n\r\n  System:\r\n    OS: macOS 12.5\r\n  Binaries:\r\n    Node: 16.15.1 - ~\/Library\/pnpm\/node\r\n    Yarn: 1.22.18 - \/usr\/local\/bin\/yarn\r\n    npm: 8.11.0 - ~\/Library\/pnpm\/npm\r\n  npmPackages:\r\n    @babel\/cli: ^7.12.10 => 7.18.10 \r\n    @babel\/code-frame: ^7.18.6 => 7.18.6 \r\n    @babel\/core: ^7.18.13 => 7.18.13 \r\n    @babel\/generator: ^7.18.13 => 7.18.13 \r\n    @babel\/node: ^7.13.13 => 7.18.10 \r\n    @babel\/parser: ^7.18.13 => 7.18.13 \r\n    @babel\/plugin-transform-runtime: ^7.12.10 => 7.18.10 \r\n    @babel\/preset-env: ^7.18.10 => 7.18.10 \r\n    @babel\/preset-typescript: ^7.18.6 => 7.18.6 \r\n    @babel\/register: ^7.12.10 => 7.18.9 \r\n    @babel\/runtime: ^7.18.9 => 7.18.9 \r\n    @babel\/template: ^7.18.10 => 7.18.10 \r\n    @babel\/traverse: ^7.18.13 => 7.18.13 \r\n    @babel\/types: ^7.18.13 => 7.18.13 \r\n    babel-eslint: ^10.1.0 => 10.1.0 \r\n    babel-parse-wild-code: ^1.2.0 => 1.2.0 \r\n    babel-plugin-istanbul: ^6.0.0 => 6.1.1 \r\n    eslint: ^7.18.0 => 7.32.0 \r\n\r\n\r\n### Possible solution\r\n\r\nMake `NodePath.replaceWith` call `this._removeFromScope()` before replacement?\r\n\r\n### Additional context\r\n\r\nI'm developing [`astx`](https:\/\/github.com\/codemodsquad\/astx\/tree\/beta-babel), a structural search-and-replace code refactoring tool.  Users could possibly find and replace a `ClassDeclaration`, and they might leave its name the same.  One such testcase in `astx` triggered this error.","comments":["Hey @jedwards1211! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","More evidence of the problem: if I replace `class Foo` with `class Bar`, the `Foo` binding is still present...but now it refers to `class Bar`:\r\n\r\n```js\r\nconst { parse } = require('@babel\/parser')\r\nconst traverse = require('@babel\/traverse').default\r\nconst template = require('@babel\/template')\r\nconst generate = require('@babel\/generator').default\r\n\r\nconst ast = parse('class Foo { }')\r\n\r\ntraverse(ast, {\r\n  ClassDeclaration(path) {\r\n    const [replacement] = path.replaceWith(\r\n      template.statement('class Bar { foo() { } }')()\r\n    )\r\n    replacement.skip()\r\n    console.log(path.scope.getBinding('Foo').path.node)\r\n  },\r\n})\r\n```\r\n\r\nOutput:\r\n```\r\n{\r\n  type: 'ClassDeclaration',\r\n  id: { type: 'Identifier', name: 'Bar', loc: undefined },\r\n  body: { type: 'ClassBody', body: [ [Object] ], loc: undefined },\r\n  superClass: null,\r\n  loc: undefined,\r\n  trailingComments: [],\r\n  leadingComments: [],\r\n  innerComments: []\r\n}\r\n```","@liuxingbaoyu the fix isn't going to be released for babel 7?","Not necessarily, I added it to the BABEL8 milestone because a fundamental fix is likely to bring breaking changes.","Thanks to @jedwards1211's solution here's a monkey-patch that may or may not solve the issue for others:\r\n\r\n```ts\r\nimport { NodePath } from \"@babel\/traverse\";\r\n\r\nconst $$patched = Symbol(\"babel-14881-hack\");\r\n\/** @see {@link https:\/\/github.com\/babel\/babel\/issues\/14881} *\/\r\nfunction patch(scope: any) {\r\n  if (!scope[$$patched]) {\r\n    scope[$$patched] = true;\r\n    const original = scope._replaceWith;\r\n    scope._replaceWith = function (...args: any[]) {\r\n      if (!this.opts?.noScope) {\r\n        this._removeFromScope();\r\n      }\r\n      return original.apply(this, args);\r\n    };\r\n  }\r\n}\r\npatch(NodePath.prototype);\r\n```\r\n"],"labels":["i: bug","pkg: traverse (scope)"]},{"title":"[Bug]: rootMode: \"upward\" ignores local browserslist config","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@babel\/cli, babel-loader, babel-jest\r\n\r\n### Input code\r\n\r\nSee minimal repro at [AprilArcus\/rootmode-upward-with-browserslist-repro](https:\/\/github.com\/AprilArcus\/rootmode-upward-with-browserslist-repro)\r\n\r\n### Current and expected behavior\r\n\r\nWhen invoking Babel with `rootMode: \"upward\"`, local configs in `.babelrc.js` are respected, but the `browserslist` entry in `package.json` is not.\r\n\r\nExpected behavior: `browserslist` should be read from the local `package.json` or `.browserslistrc`, and fall back to the root `package.json` or `.browserslistrc` if a local configuration is not found.\r\n\r\n### Environment\r\n\r\n```\r\n  System:\r\n    OS: Linux 5.17 Debian GNU\/Linux rodete 12 (rodete)\r\n  Binaries:\r\n    Node: 18.6.0 - \/usr\/bin\/node\r\n    npm: 8.15.1 - \/usr\/bin\/npm\r\n```\r\n","comments":["Hey @AprilArcus! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","For reference: `.browserslistrc` is supposed to be file-relative and not root\/project-relative: https:\/\/github.com\/babel\/rfcs\/pull\/2#issuecomment-619573888","I don't think I understand the comment you linked. It seems to me that a monorepo with multiple NPM workspaces in `myRepo\/apps\/*` should be able to target each app to a different set of supported browsers, and have that config live in a single location that can be read by e.g. both [Webpack](https:\/\/webpack.js.org\/configuration\/target\/#target) and Babel.\r\n\r\nIt would also be desirable for any workspaces destined to be published to NPM as packages to have an es5 or es2017 baseline target, configured separately from a  bundled app that would target evergreen browsers.","Yes, I agree with your expected behavior :+1: That was a comment from the browserslist author saying that different folders should be able to target different configs."],"labels":["i: needs triage"]},{"title":"[Bug]: Babel does not transpile Unicode identifier names for early engine targets","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@babel\/cli\r\n\r\n### Input code\r\n\r\n```js\r\nlet \u212e;\r\n```\r\nHere is the [REPL](https:\/\/babel.dev\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=false&spec=true&loose=true&code_lz=DYUwLgBIdIQNxA&debug=false&forceAllTransforms=true&shippedProposals=true&circleciRepo=&evaluate=true&fileSize=true&timeTravel=false&sourceType=unambiguous&lineWrap=false&presets=env&prettier=false&targets=Node-10.13&version=7.18.12&externalPlugins=&assumptions=%7B%7D)\r\n\r\n### Configuration file name\r\n\r\nbabel.config.json\r\n\r\n### Configuration\r\n\r\n```json\r\n{\r\n  \"sourceType\": \"unambiguous\",\r\n  \"presets\": [\"@babel\/preset-env\"],\r\n  \"plugins\": [\r\n    \"@babel\/plugin-transform-runtime\"\r\n  ]\r\n}\r\n```\r\n### Current and expected behavior\r\n\r\n'Unicode 8' is only available in ES6, but babel doesn't transpile unicode 8.\r\n\r\n### Environment\r\n\r\n- babel \r\n- - \u251c\u2500\u2500 @babel\/cli@7.18.12\r\n- - \u251c\u2500\u2500 @babel\/plugin-transform-runtime@7.18.12\r\n- - \u251c\u2500\u2500 @babel\/preset-env@7.18.12\r\n- Node: [v17.3.0]\r\n- npm version [8.5.2]\r\n- os [ubuntu 20.04]\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @clhiker! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","The Unicode Standard affects JavaScript language in two ways: Identifier names and RegExp Unicode property escapes. The OP's issue is about identifier names.\r\n\r\nHere is a brief solution for anyone wants to work on this issue:\r\n\r\nFirst we need support data (browser x implemented Unicode version). Mathias Bynens has maintained a [page on browsers' Unicode support](https:\/\/mathiasbynens.github.io\/caniunicode\/), which could be a starting point.\r\n\r\nThen we can implement such logic in `@babel\/generator`. The generator should be aware of the global `targets` options and transpile unicode names to unicode escapes according to the targets when [printing an Identifier](https:\/\/github.com\/babel\/babel\/blob\/3445cb39dcf9fed4df7ce21d3f006965dd1c4fc4\/packages\/babel-generator\/src\/generators\/types.ts#L6). We don't have to make a new Babel plugin because currently the Babel AST does not track unicode escapes in identifier names.\r\n\r\nFor RegExp Unicode property escapes, we can expand https:\/\/github.com\/mathiasbynens\/regexpu-core. It can receive a target Unicode version and optionally transpile the unsupported property escapes. "],"labels":["i: enhancement"]},{"title":"Support more transpiling targets","body":"Let's take a look at what is allowed by Babel transpiling targets:\r\n\r\n```\r\nandroid\r\nchrome\r\nedge\r\nelectron\r\nfirefox\r\nie\r\nios\r\nnode\r\nopera\r\nrhino\r\nsafari\r\nsamsung\r\n```\r\n\r\n`core-js` allow more targets and contains compat data for:\r\n\r\n```\r\nandroid\r\nbun\r\nchrome\r\nchrome-android\r\ndeno\r\nedge\r\nelectron\r\nfirefox\r\nfirefox-android\r\nhermes\r\nie\r\nios\r\nnode\r\nopera\r\nopera-android\r\nphantom\r\nquest\r\nreact-native\r\nrhino\r\nsafari\r\nsamsung\r\n```\r\n\r\nI can't understand why Babel still does not allow at least significant targets such as `deno`, `bun`, `hermes`...\r\n\r\n`compat-table` already contains data for `hermes`, it's not a big problem to add compat data \/ runner or at least mapping for `deno` and `bun`.","comments":["Do you know if there are ready mappings for Deno and bun like `electron-to-chromium`?\r\n\r\nAlso, bun is still very experiential.","Automatically generated mapping is not available. However, it's [available on MDN](https:\/\/github.com\/mdn\/browser-compat-data\/blob\/main\/browsers\/deno.json), `engine_version` field. Or [in `core-js-compat`](https:\/\/github.com\/zloirock\/core-js\/blob\/39d84408ffc61ac70dd122205ac83dbaae101642\/packages\/core-js-compat\/src\/mapping.mjs#L67), but for internal usage.","Do you have usage metrics that can justify \"significant\"?\r\n\r\nHermes is an officially recommended solution for React Native from Facebook, so I'd expect its popularity to be accordingly large; I don't yet have the same expectations for deno or bun.","Sure. You could take a look at least on GitHub stars. All of them are much more popular than, for example, already supported Rhino - I hope, it will not cause any questions. Deno is very popular, this popularity constantly growing and Deno makes all for be a proper replacement for Node. Bun now is one of the main trends in JS news.","Rhino's really only there for legacy reasons :-) i'm not sure github stars are a viable metric to measure usage or significance, though.","Rhino is the latest added to Babel target so it's added definitely for the legacy reason. If you could propose better matric than GitHub stars - feel free to do it. Deno and Bun now are more common in JS news than Node.","\"common in news\" isn't a metric for anything; how often it's used in production, and how large a package ecosystem it has, however, would be useful metrics.","I can't understand why you draw attention to significance - it should be added if it's helpful even if it's not very popular - otherwise, IE target makes no sense.","> I can't understand why Babel still does not allow at least significant targets","...and? -)","The entire premise of this issue is that targets that are significant should be added.","The entire premise of this issue is that all useful targets should be added.\r\n\r\nPlease, stop the discussion off-topic. If you need any statistics about usage - feel free to find them - I will not do it for you.","#15612","Add compat data for Hermes: https:\/\/github.com\/zloirock\/core-js\/pull\/1099\r\n"],"labels":["i: enhancement","area: compat-table","pkg: preset-env","pkg: compat-data"]},{"title":"[Bug]: Bindings from a removed path and `@babel\/plugin-transform-function-name`","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\n```js\r\nimport foo from 'bar';\r\nconst obj = {\r\n  foo: function() { return foo(); },\r\n};\r\n```\n\n### Configuration file name\n\nbabel.config.mjs\n\n### Configuration\n\n```js\r\nexport default {\r\n  plugins: [\r\n    () => ({\r\n      visitor: {\r\n        ImportDeclaration(path) {\r\n          path.remove();\r\n        },\r\n      }\r\n    }),\r\n    '@babel\/plugin-transform-function-name',\r\n  ]\r\n};\r\n```\n\n### Current and expected behavior\n\nThe current output is as follows:\r\n```js\r\nconst obj = {\r\n  foo: function foo() {\r\n    return foo();\r\n  }\r\n};\r\n```\r\nwhich recurses infinitely. Without the import statement, the output is as follows:\r\n```js\r\nconst obj = {\r\n  foo: function (_foo) {\r\n    function foo() {\r\n      return _foo.apply(this, arguments);\r\n    }\r\n\r\n    foo.toString = function () {\r\n      return _foo.toString();\r\n    };\r\n\r\n    return foo;\r\n  }(function () {\r\n    return foo();\r\n  })\r\n};\r\n```\n\n### Environment\n\n- Babel v7.18.10\r\n- Node v16.16.0\r\n- npm 8.15.1\n\n### Possible solution\n\nI'm actually not sure whether this is a bug or the intended behavior. The problem is that removing the path removes the binding but doesn't add a global in its place, which trips up `@babel\/plugin-transform-function-name`. I can fix this in my plugin by extending it as follows:\r\n```js\r\n    () => ({\r\n      visitor: {\r\n        ImportDeclaration(path) {\r\n          path.node.specifiers?.forEach(specifier => {\r\n            const name = specifier.local.name;\r\n            if (!path.scope.hasGlobal(name)) path.scope.addGlobal(t.identifier(name));\r\n          });\r\n          path.remove();\r\n        },\r\n      }\r\n    }),\r\n```\r\nThis works just fine, but I wanted to file this in case this is *not* the intended behavior for babel.\n\n### Additional context\n\nThe reason I'm doing this is because our project isn't ready for any kind of module support, but I still want on-hover information in VSCode. By adding import statements I get the on-hover information, and by stripping them out (and setting the sourceType to `unambiguous`) they don't affect the output. The full plugin does a bit more than the simplified version above.","comments":["Hey @ehoogeveen-medweb! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: bug"]},{"title":"[Bug]: Object Property Value is considered Referenced but not in Binding's referencedPath","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n```js\r\nfunction Foo() {\r\n  let foo, baz;\r\n  ({foo: baz} = {foo: 1});\r\n}\r\n```\r\n\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nCurrently, the `baz` Binding will\r\n- record the `AssignmentExpression` in `constantViolations` because it's a \"write\"\r\n- have empty `referencePaths` and have `referenced: false`\r\nWhile the `NodePath<Identifier>` of `baz` in the Object Property value position will have  `isReferenced` being `true`. (But `ReferencedIdentifier` did not give that node too??)\r\n\r\nI don't really know what should be the expected behavior but it should be consistent.\r\n\r\n\n\n### Environment\n\n- Babel version: 7.18\r\n\r\nI was using ASTExplorer \n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nHigh-level speaking, what i was trying to achieve was actually finding all the `NodePath<Identifier>` that is considered \"write\" (basically the \"write\" version of `ReferencedPaths`) since `constantViolation` only record at higher-level of the tree. ","comments":["Hey @Huxpro! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Note that the `baz`\r\n\r\n```\r\n[baz] = x;\r\n({foo: [baz]} = {foo: 1});\r\n```\r\n\r\nAll have `isReferenced` false","`isReferenced` and `ReferencedIdentifier` seem to be the result of static calculations provided by `babel\/types`.\r\n`constantViolations` and `referencePaths` are computed dynamically by `babel\/traverse`.\r\n\r\n> High-level speaking, what i was trying to achieve was actually finding all the `NodePath<Identifier>` that is considered \"write\" (basically the \"write\" version of `ReferencedPaths`) since `constantViolation` only record at higher-level of the tree.\r\n\r\nThere doesn't seem to be an elegant way to do this at the moment, currently `Binding` only has one-way references ( binding -> path ), I guess that can be discussed. (This is also required at https:\/\/github.com\/babel\/babel\/pull\/14430.)\r\n\r\nAs a workaround for now, you can check for existence in `constantViolation`.","`isReferenced` should return `true` for identifiers in \"read position\", so the bug is that it should return `false` there.\r\n\r\n`t.isReferenced` works correctly when you pass three parameters: https:\/\/astexplorer.net\/#\/gist\/3942ec2d4bffa13e7a9280eace966fda\/85e906def070d890a44c5d71a7f7269b7f7e8d1b. The bugfix should be that `path.isReferenced` should pass all the three parameters to `t.isReferenced` (it currently only passes two of them, so `t.isReferenced` doesn't know if the object property is in a destructuring pattern or in an object literal).\r\n\r\n> High-level speaking, what i was trying to achieve was actually finding all the NodePath<Identifier> that is considered \"write\" (basically the \"write\" version of ReferencedPaths) since constantViolation only record at higher-level of the tree.\r\n\r\nWould something like this work? https:\/\/astexplorer.net\/#\/gist\/3942ec2d4bffa13e7a9280eace966fda\/f272e76942e96787e63acb0b88bbb6fc4cd25f49"],"labels":["i: discussion","pkg: traverse (scope)"]},{"title":"[babel-traverse] traverse.direct - traverse a NodePath directly","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #9683\r\n| Patch: Bug Fix?          | No\r\n| Major: Breaking Change?  | No\r\n| Minor: New Feature?      | Yes\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  | No\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\n## Summary of changes introduced\r\n\r\n`@babel-traverse`: new `traverse.direct`\r\n\r\nAdds new `direct` function to the `traverse` prototype.\r\n\r\nEnables visiting a NodePath directly, which doesn't rely on finding a\r\nNodePath based on a Node, Scope and ParentPath (`path.get`).\r\n\r\nOptionally `visitSelf` true enables visiting the node itself too, and\r\nonly then its childrens according to `VISITOR_KEYS` of the node type.\r\n\r\nUpdates `path.traverse` to make use of this new api.\r\n\r\n## Review\r\n\r\nUnit tests included for both `visitSelf` values.\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/14722\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Suggestions for alternative names are very welcome, not sure if `direct` is the best name for this.","Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/52434\/","> I am not convinced that we should offer a new traverse method alongside current traverse.node. The traverse-path logic is highly similar to the TraversalContext.visit. It uses path.get() to retrieve any children path, which still calls path.create, like we did in TraversalContext.visit, if the child path is not in the cache.\r\n\r\nI was wondering that myself too, whether this should be exposed to the user as a new method, or simply an option. What made me start with a method was my wrong assumption that we could skip `path.create` and make it faster.\r\n\r\n> I do recognize that in certain scenarios it will be more convenient if path.traverse() also visited the path itself.\r\n\r\nYes, that's the main motivator behind this PR.\r\n\r\n> and call context.visitQueue([path]) if opt?.visitSelf is true\r\n\r\nExactly.\r\n\r\nIn summary, there's no benefits to creating a new method - either in performance (I had originally thought we could skip `path.create` with the method approach, but that's only if we have cache) or in usability. Users can accomplish the same with either a new option or a new method without any drawbacks.\r\n\r\nWith that in mind, let me rework this PR and make the description more accurate in regards to what's being introduced here.","Is this feature available? I cannot find any `traverse.direct` function in the latest version of Babel. Thank you in advance."],"labels":["PR: New Feature :rocket:","pkg: traverse"]},{"title":"[Bug]: Function arguments incorrectly get legacy \"magic binding\" semantics when compiling default\/spread","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@babel\/cli\r\n\r\n### Input code\r\n\r\n```js\r\nfunction f0(i, v0 = 1) {\r\n    i = 25;\r\n    console.log(arguments[0]); \/\/ Should log 5, but with Babel it logs 25\r\n}\r\nf0(5);\r\n```\r\n```js\r\nfunction foo(filename, ...args) {\r\n    filename = 'new file name';\r\n\r\n    console.log(arguments[0]); \/\/ should log 'test.txt', but with Babel it logs 'new file name'\r\n}\r\n\r\nfoo('test.txt');\r\n```\r\n\r\n### Configuration file name\r\n\r\nbabel.config.json\r\n\r\n### Configuration\r\n\r\n```json\r\n{\r\n  \"sourceType\": \"unambiguous\",\r\n  \"presets\": [\"@babel\/preset-env\"],\r\n  \"plugins\": [\r\n    \"@babel\/plugin-transform-runtime\"\r\n  ]\r\n}\r\n```\r\n\r\n### Environment\r\n\r\n- babel \r\n- - \u251c\u2500\u2500 @babel\/cli@7.18.6\r\n- - \u251c\u2500\u2500 @babel\/plugin-transform-runtime@7.18.6\r\n- - \u251c\u2500\u2500 @babel\/preset-env@7.18.6\r\n- Node: [v17.3.0]\r\n- npm version [8.5.2]\r\n- os [ubuntu 20.04]\r\n\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @clhiker! We really appreciate you taking the time to report an issue. The collaborators on this project attempt to help as many people as possible, but we're a limited number of volunteers, so it's possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","@clhiker I merged all your reports into this one.","Thank you for your duplicate bug screening work \uff01"],"labels":["i: bug"]},{"title":"Record & Tuple Plugin: transform typeof sites to reflect \"record\" or \"tuple\" instead of \"object\"","body":"### \ud83d\udcbb\n\n- [x] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nThe polyfilled Records and Tuples are still objects so the following assertions will fail:\r\n\r\n```js\r\nconst aRecord = #{};\r\nconst aTuple = #[];\r\n\r\nassert(typeof aRecord === \"record\"); \/\/ currently the typeof is \"object\" if polyfilling\r\nassert(typeof aTuple === \"tuple\"); \/\/ currently the typeof is \"object\" if polyfilling\r\n```\r\n\r\n\n\n### Describe the solution you'd like\n\nA rewrite of typeof calls should be done: this is similar to the rewrite that is done when polyfilling symbols.\n\n### Describe alternatives you've considered\n\nN\/A - this is the only way to respect the candidate spec\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @rricard! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","We should make sure that this works both when compiling typeof symbols and when just compiling R&T."],"labels":["i: enhancement","Spec: Record Tuple"]},{"title":"[v8] Make typescript types resolvable via traverse-scope","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on this feature?\r\n\r\n### What problem are you trying to solve?\r\n\r\nI am currently migrating `react-docgen` to use the babel toolchain instead of `ast-types` package. It works fine, but not for typescript types as they are not (correctly) registered as binding in the scope of babel-traverse. This makes it currently impossible for me to resolve a `typeAnnotation` to the corresponding type via the scope, because I only get the `Node` to the `Identifier` and from there cannot look at the parent or anything.\r\n\r\nFor example:\r\n```ts\r\nlet bar: Action;\r\ntype Action = {};\r\n```\r\nHere I try to resolve the `typeAnnotation` to the actual typeAlias, but the scope only contains a binding for `bar`. `Action` is registered in `globals` though, but only the `Node` not the `NodePath`. Because all the code I am working on relies on `NodePath`s it does not really help to have the `Node`.\r\n\r\n\r\n### Describe the solution you'd like\r\n\r\nI see two ways to improve the API of babel-traverse `Scope` class:\r\n\r\nThe first one is the \"easier\" solution. Simply store NodePaths in the `Scope.globals` object. This would instantly allow more possibilities as I can look at the parent of the `Identifier` etc. This for sure is a breaking change, but the actual migration for outside parties would simply be: change `globals[name].type` to `globals[name].node.type`\r\n\r\nThe second solution is a little bit more involved. The idea here is to create a second \"realm\" for type bindings only (similar to what `ast-types` [does](https:\/\/github.com\/benjamn\/ast-types\/blob\/master\/lib\/scope.ts#L21-L22)). So instead of registering types in `globals` they would be stored in `types` or `typesBindings`.  New  apis like `path.scope.getTypeBinding(name)` would make it easily able to check if there are types in the current scope defined. This solution could even be built in a non breaking fashion.\r\n\r\n### Describe alternatives you've considered\r\n\r\nThe only real alternatives are traversing the code myself and collecting types or monkeypatching babel-traverse somehow. Neither of them sounds really nice.\r\n\r\n### Documentation, Adoption, Migration Strategy\r\n\r\nThis is the idea, so let me know what you think. Is this something that could be considered? What of the two solutions would you prefer? Or can you think of any other solution? Maybe that would be beneficial for the ts-transform too?","comments":["I implemented this myself here: https:\/\/github.com\/reactjs\/react-docgen\/blob\/main\/packages\/react-docgen\/src\/utils\/ts-types\/index.ts","Amazing!\r\nOur `traverse` should need a lot of improvement. \ud83d\ude1e\r\nEspecially for the processing of ts, it seems that there are many issues related to it."],"labels":["i: discussion","i: enhancement","area: typescript","pkg: traverse (scope)"]},{"title":"Emit `.mjs` and `.cjs` outputs for `.mts` and `.cts` inputs respectively","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nTypeScript 4.7 emits `.mjs` and `.cjs` files respectively for `.mts` and `.cts` extension input files. This is helpful for NodeJS projects which have a mix of commonjs and esm file formats.\n\n### Describe the solution you'd like\n\nBabel should emit `.mjs` and `.cjs` outputs for `.mts` and `.cts` input files respectively.\n\n### Describe alternatives you've considered\n\n```\r\n\"build\": \"babel src --out-dir dist --extensions '.ts,.mts,.cts' --out-file-extension .mjs\",\r\n```\r\n\r\nThis does not work because all transpiled files are assigned the extension `.mjs`. There should be a way to assign 1:1 mapping from input file extension to output file extensions.\r\n\r\n- `.ts` --> `.js`\r\n- `.mts` --> `.mjs`\r\n- `.cts` --> `.cjs`\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @sagargurtu! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","As a workaround, you can run Babel in parallel:\r\n\r\n```\r\n\"build:ts\": \"babel src --out-dir dist --extensions '.ts' --out-file-extension .js\",\r\n\"build:mts\": \"babel src --out-dir dist --extensions '.mts' --out-file-extension .mjs\",\r\n\"build:cts\": \"babel src --out-dir dist --extensions '.cts' --out-file-extension .cjs\",\r\n\"build\": \"run-p build:ts build:mts build:cts\",\r\n```\r\nwhere `run-p` is provided by the `npm-run-all` package."],"labels":["i: enhancement","pkg: cli"]},{"title":"[Bug]: `@babel\/register` fails when `require()` a PURE esm module","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@babel\/register or @babel\/node\r\n\r\n### Input code\r\n\r\n**.\/test-subject\/index.js**\r\n\r\n```js\r\nexport default 'hi';\r\n\r\n```\r\n\r\n**.\/test-subject\/package.json**\r\n\r\n```js\r\n{\r\n  \"name\": \"foo\",\r\n  \"exports\": {\r\n    \".\": \".\/index.js\"\r\n  },\r\n  \"type\": \"module\"\r\n}\r\n```\r\n\r\n**.\/index.js**\r\n```js\r\nrequire('@babel\/register')({\r\n  babelrc: false,\r\n  cache: false,\r\n  plugins: ['@babel\/plugin-transform-modules-commonjs'],\r\n});\r\n\r\nrequire('.\/test-subject');\r\n```\r\n\r\n**.\/package.json**\r\n\r\n```js\r\n{\r\n  \"name\": \"node-starter\",\r\n  \"version\": \"0.0.0\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@babel\/core\": \"^7.18.0\",\r\n    \"@babel\/plugin-transform-modules-commonjs\": \"^7.18.0\",\r\n    \"@babel\/register\": \"^7.17.7\"\r\n  }\r\n}\r\n```\r\n\r\nFull runnable example over here:\r\nhttps:\/\/stackblitz.com\/edit\/node-hwyjyp?file=index.js\r\n\r\n### Configuration file name\r\n\r\nusing babel register\r\n\r\n### Configuration\r\n\r\nNONE (see code)\r\n\r\n### Current and expected behavior\r\n\r\nThe current behavior is that the following error is raised when running the script:\r\n\r\n```\r\nError [ERR_REQUIRE_ESM]: require() of ES Module \/home\/projects\/node-hwyjyp\/test-subject\/index.js from \/home\/projects\/node-hwyjyp\/index.js not supported.\r\nInstead change the require of \/home\/projects\/node-hwyjyp\/test-subject\/index.js in \/home\/projects\/node-hwyjyp\/index.js to a dynamic import() which is available in all CommonJS modules.\r\n```\r\n\r\nInstead, I expect babel to wrap the original `require` and skip the \"ERR_REQUIRE_ESM\" error check.\r\n\r\n### Environment\r\n\r\n```\r\n    \"@babel\/core\": \"^7.18.0\",\r\n    \"@babel\/plugin-transform-modules-commonjs\": \"^7.18.0\",\r\n    \"@babel\/register\": \"^7.17.7\",\r\n```\r\n\r\nNode version: v16.14.2\r\n\r\n### Possible solution\r\n\r\nA manual fix is to edit the package.json of the module, that, however, seems like a hack to me... Especially when you are dealing with an npm package that you have no control over (e.g. graphql@17)\r\n\r\n### Additional context\r\n\r\nI am actually unsure whether this is an issue `@babel\/register` must address.","comments":["Hey @n1ru4l! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Hey man, currently I'm dealing with this module headache. I'm not part of the babel team, but let me know if I helped somehow.\r\nWe can check this on this link [@babel\/register](https:\/\/babeljs.io\/docs\/en\/babel-register#experimental-babel-8-implementation)\r\n> Note: @babel\/register does not support compiling native Node.js ES modules on the fly, since currently there is no stable API for intercepting ES modules loading.\r\n\r\nAs most know, ES Modules can't be fully converted in CommonJS modules. We can import ES Modules using dynamic import:\r\n```javascript\r\nrequire('@babel\/register')({\r\n  babelrc: false,\r\n  cache: false,\r\n  plugins: ['@babel\/plugin-transform-modules-commonjs'],\r\n});\r\nimport('.\/test-subject'); \/\/ Note it\r\n```\r\n\r\nMaybe we'd hit in some async issues, but, that's not the point. The thing that you wanted was\r\n\r\n> Instead, I expect babel to wrap the original require and skip the \"ERR_REQUIRE_ESM\" error check.\r\n\r\nAs far as I know, there's no code workaround beyond that I presented before to replace \"require\" with some other function that actually works. \r\n\r\nAnd I think that ERR_REQUIRE_ESM shouldn't be skipped, because is a legit error. You tried to require (synchronously) a module that can be asynchronous, and CommonJS doesn't accept TLA(Top-Level Await)\r\n\r\nMaybe I'm all wrong, I'm still trying to figure out how to use external ES Modules and CommonJS together in my project. \r\n","@goodeath In this scenario, the ESM module is transpiled to CommonJS (using `@babel\/plugin-transform-modules-commonjs`) before being required, so technically it is a CommonJS module.\r\n\r\nThis is kind of a weird situation because the Node.js `require` function is not aware of this transpilation process that babel does on the fly. On the other hand, it also does not seem to me that it would be the scope of babel\/register to hijack the Node.js require for applying some module resolution patching (and introduce \"allow require ESM module that is transpiled to CommonJS\" behavior).\r\n\r\nFor now, my solution was to build a script that runs as a post-install script that transpiles and edits the node_module. [You can find it here](https:\/\/github.com\/graphql\/graphql-js\/issues\/3603#issue-1246255464). A benefit of this approach is that you also do not need `@babel\/register` anymore \ud83e\udd14 \r\n","@n1ru4l I looked into your solution. Yeah, it works. You can do things like this, but I think there is one loophole: If some ESM module that you rewrited to use \"require\", use \"await\" outside of a function, it'd result in error. What you think? \r\n\r\nBTW, thanks for sharing your solution. Maybe it can come in handy sometime. I usually say that, one solution, even if it's not the better, is better than none.","> it also does not seem to me that it would be (beyond) the scope of babel\/register to hijack the Node.js require for applying some module resolution patching (and introduce \"allow require ESM module that is transpiled to CommonJS\" behavior).\r\n\r\nI agree it is fair suggestion considering as Babel CLI has no problem transpiling the same sources.\r\n\r\nIf anyone coming late to this thread, like me, I have found these useful for helping to migrate to ESM:\r\n\r\n* [@esbuild-kit\/cjs-loader](https:\/\/github.com\/esbuild-kit\/cjs-loader): Loads ESM modules in a common CJS environment (using esbuild transform API)\r\n    * Using [loaders](https:\/\/github.com\/nodejs\/loaders), which as mentioned above are still experimental\r\n* [babel-plugin-module-extension-resolver](https:\/\/www.npmjs.com\/package\/babel-plugin-module-extension-resolver) Fixes imports to use `.js` extension\r\n\r\n"],"labels":["i: enhancement","pkg: register"]},{"title":"Proposal: Babel-Standalone Minimal Build supporting only JSX","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nI am working on a browser-based code editor. I want this editor to support JSX. The editor currently uses [buble-jsx-only](https:\/\/github.com\/vizhub-core\/buble-jsx-only) to transpile JSX in the browser, but that unfortunately suffers from [lack of support for optional chaining](https:\/\/github.com\/bublejs\/buble\/issues\/267). I'm looking for a solution that transpiles JSX in the browser, and babel-standalone is such a solution, however it suffers from a [large bundle size](https:\/\/bundlephobia.com\/package\/@babel\/standalone@7.18.0). This proposal aims to solve the bundle size issue by introducing an alternative build of Babel-standalone that does _not_ import and include in its bundle any extraneous transforms except those required to support JSX.\n\n### Describe the solution you'd like\n\nI'd like an alternative build of Babel-standalone that does _not_ import and include in its bundle any extraneous transforms except those required to support JSX.\n\n### Describe alternatives you've considered\n\nI've considered using [buble-jsx-only](https:\/\/github.com\/vizhub-core\/buble-jsx-only) to transpile JSX in the browser, but that unfortunately suffers from [lack of support for optional chaining](https:\/\/github.com\/bublejs\/buble\/issues\/267). \n\n### Documentation, Adoption, Migration Strategy\n\nThere could be a new entry point for the Babel-standalone build, and a new built file that can be documented. Alternative we can do a hard fork of the `babel-standalone` package, introducing a new sibling package `babel-standalone-jsx-only` (similar to the relationship between `buble` and `buble-jsx-only`.","comments":["Hey @curran! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","You can import `@babel\/core` and `@babel\/plugin-transform-react-jsx` in your app, and the bundle it with webpack or rollup.","Thank you @nicolo-ribaudo for your suggestion! I tried it. Here is what I experienced:\r\n\r\nAfter setting up a minimal Rollup build that imports things from `@babel\/core` and `@babel\/plugin-transform-react-jsx`, with the following Rollup config:\r\n\r\n```\r\n\/\/ Inspired by https:\/\/github.com\/babel\/babel\/blob\/main\/Gulpfile.mjs\r\nimport { nodeResolve } from '@rollup\/plugin-node-resolve';\r\n\r\nexport default {\r\n  input: 'src\/index.js',\r\n  output: {\r\n    dir: 'build\/',\r\n    format: 'umd',\r\n    name: 'BabelStandaloneJSXOnly',\r\n    sourcemap: true,\r\n  },\r\n  plugins: [nodeResolve()],\r\n};\r\n```\r\n\r\nI observed the following error when attempting to build:\r\n\r\n```\r\nsrc\/index.js \u2192 build\/...\r\n[!] Error: 'transform' is not exported by node_modules\/@babel\/core\/lib\/index.js, imported by src\/index.js\r\nhttps:\/\/rollupjs.org\/guide\/en\/#error-name-is-not-exported-by-module\r\nsrc\/index.js (2:9)\r\n1: \/\/ Inspired by https:\/\/github.com\/babel\/babel\/blob\/main\/packages\/babel-standalone\/src\/index.ts\r\n2: import { transform as babelTransform } from '@babel\/core';\r\n            ^\r\n3: import pluginTransformReactJSX from '@babel\/plugin-transform-react-jsx';\r\n4: export const transform = (jsx) => babelTransform(jsx, pluginTransformReactJSX);\r\nError: 'transform' is not exported by node_modules\/@babel\/core\/lib\/index.js, imported by src\/index.js\r\n    at error (\/home\/curran\/repos\/babel-standalone-jsx-only-prototype\/node_modules\/rollup\/dist\/shared\/rollup.js:198:30)\r\n    ...\r\n```\r\n\r\nNext, having studied the [Babel Rollup config in Gulpfile.mjs](https:\/\/github.com\/babel\/babel\/blob\/main\/Gulpfile.mjs), I noticed that `@rollup\/plugin-commonjs` is used there, which may solve the named import issue. So I tried the following Rollup config:\r\n\r\n```js\r\nimport { nodeResolve } from '@rollup\/plugin-node-resolve';\r\nimport commonjs from '@rollup\/plugin-commonjs';\r\n\r\nexport default {\r\n  input: 'src\/index.js',\r\n  output: {\r\n    dir: 'build\/',\r\n    format: 'umd',\r\n    name: 'BabelStandaloneJSXOnly',\r\n    sourcemap: true,\r\n  },\r\n  plugins: [commonjs(), nodeResolve()],\r\n};\r\n```\r\n\r\nwhich then resulted in the following error:\r\n\r\n```\r\nsrc\/index.js \u2192 build\/...\r\n[!] (plugin commonjs--resolver) Error: Unexpected token (Note that you need @rollup\/plugin-json to import JSON files)\r\nnode_modules\/globals\/globals.json (2:10)\r\n1: {\r\n2:   \"builtin\": {\r\n              ^\r\n3:     \"Array\": false,\r\n4:     \"ArrayBuffer\": false,\r\nError: Unexpected token (Note that you need @rollup\/plugin-json to import JSON files)\r\n    at error (\/home\/curran\/repos\/babel-standalone-jsx-only-prototype\/node_modules\/rollup\/dist\/shared\/rollup.js:198:30)\r\n```\r\n\r\nNext, having studied the [Babel Rollup config in Gulpfile.mjs](https:\/\/github.com\/babel\/babel\/blob\/main\/Gulpfile.mjs), I noticed that `@rollup\/plugin-json` is used there, which may solve the json import issue. So I tried the following Rollup config:\r\n\r\n```js\r\nimport { nodeResolve } from '@rollup\/plugin-node-resolve';\r\nimport commonjs from '@rollup\/plugin-commonjs';\r\nimport json from '@rollup\/plugin-json';\r\n\r\nexport default {\r\n  input: 'src\/index.js',\r\n  output: {\r\n    dir: 'build\/',\r\n    format: 'umd',\r\n    name: 'BabelStandaloneJSXOnly',\r\n    sourcemap: true,\r\n  },\r\n  plugins: [commonjs(), nodeResolve(), json()],\r\n};\r\n```\r\n\r\nwhich then resulted in the following error:\r\n\r\n```\r\nsrc\/index.js \u2192 build\/...\r\n(!) Missing shims for Node.js built-ins\r\nCreating a browser bundle that depends on \"tty\", \"util\", \"os\", \"assert\", \"path\", \"url\" and \"buffer\". You might need to include https:\/\/github.com\/snowpackjs\/rollup-plugin-polyfill-node\r\n(!) Circular dependencies\r\nnode_modules\/@babel\/types\/lib\/definitions\/index.js -> node_modules\/@babel\/types\/lib\/definitions\/core.js -> node_modules\/@babel\/types\/lib\/validators\/is.js -> node_modules\/@babel\/types\/lib\/validators\/isType.js -> node_modules\/@babel\/types\/lib\/definitions\/index.js\r\nnode_modules\/@babel\/types\/lib\/definitions\/index.js -> node_modules\/@babel\/types\/lib\/definitions\/core.js -> node_modules\/@babel\/types\/lib\/validators\/is.js -> node_modules\/@babel\/types\/lib\/validators\/isPlaceholderType.js -> node_modules\/@babel\/types\/lib\/definitions\/index.js\r\nnode_modules\/@babel\/types\/lib\/definitions\/index.js -> node_modules\/@babel\/types\/lib\/definitions\/core.js -> node_modules\/@babel\/types\/lib\/validators\/is.js -> node_modules\/@babel\/types\/lib\/definitions\/index.js\r\n...and 16 more\r\n(!) Missing global variable names\r\nUse output.globals to specify browser global variable names corresponding to external modules\r\ntty (guessing 'require$$0$6')\r\nutil (guessing 'require$$1')\r\nos (guessing 'require$$0$5')\r\nassert (guessing 'require$$0$7')\r\npath (guessing 'require$$0$8')\r\nfs (guessing 'require$$0$9')\r\nurl (guessing 'require$$2$1')\r\nmodule (guessing 'require$$11')\r\nbuffer (guessing 'require$$0$a')\r\nv8 (guessing 'require$$0$b')\r\n```\r\n\r\nNext, having studied the [Babel Rollup config in Gulpfile.mjs](https:\/\/github.com\/babel\/babel\/blob\/main\/Gulpfile.mjs), I noticed that `rollup-plugin-polyfill-node` is used there, which may solve the Node built-ins issue. However, `rollup-plugin-polyfill-node` is So I tried the following Rollup config:\r\n\r\n```js\r\nimport { nodeResolve } from '@rollup\/plugin-node-resolve';\r\nimport commonjs from '@rollup\/plugin-commonjs';\r\nimport json from '@rollup\/plugin-json';\r\nimport nodePolyfills from 'rollup-plugin-polyfill-node';\r\n\r\nexport default {\r\n  input: 'src\/index.js',\r\n  output: {\r\n    dir: 'build\/',\r\n    format: 'umd',\r\n    name: 'BabelStandaloneJSXOnly',\r\n    sourcemap: true,\r\n  },\r\n  plugins: [commonjs(), nodeResolve(), json(), nodePolyfills()],\r\n};\r\n```\r\n\r\nwhich then resulted in the following error:\r\n\r\n```\r\nsrc\/index.js \u2192 build\/...\r\n(!) Missing shims for Node.js built-ins\r\nCreating a browser bundle that depends on \"tty\", \"util\", \"os\", \"assert\", \"path\", \"url\" and \"buffer\". You might need to include https:\/\/github.com\/snowpackjs\/rollup-plugin-polyfill-node\r\n(!) Circular dependencies\r\nnode_modules\/@babel\/types\/lib\/definitions\/index.js -> node_modules\/@babel\/types\/lib\/definitions\/core.js -> node_modules\/@babel\/types\/lib\/validators\/is.js -> node_modules\/@babel\/types\/lib\/validators\/isType.js -> node_modules\/@babel\/types\/lib\/definitions\/index.js\r\nnode_modules\/@babel\/types\/lib\/definitions\/index.js -> node_modules\/@babel\/types\/lib\/definitions\/core.js -> node_modules\/@babel\/types\/lib\/validators\/is.js -> node_modules\/@babel\/types\/lib\/validators\/isPlaceholderType.js -> node_modules\/@babel\/types\/lib\/definitions\/index.js\r\nnode_modules\/@babel\/types\/lib\/definitions\/index.js -> node_modules\/@babel\/types\/lib\/definitions\/core.js -> node_modules\/@babel\/types\/lib\/validators\/is.js -> node_modules\/@babel\/types\/lib\/definitions\/index.js\r\n...and 16 more\r\n(!) Missing global variable names\r\nUse output.globals to specify browser global variable names corresponding to external modules\r\ntty (guessing 'require$$0$6')\r\nutil (guessing 'require$$1')\r\nos (guessing 'require$$0$5')\r\nassert (guessing 'require$$0$7')\r\npath (guessing 'require$$0$8')\r\nfs (guessing 'require$$0$9')\r\nurl (guessing 'require$$2$1')\r\nmodule (guessing 'require$$11')\r\nbuffer (guessing 'require$$0$a')\r\nv8 (guessing 'require$$0$b')\r\ncreated build\/ in 5.4s\r\n```\r\n\r\nFWIW I also tried `nodePolyfills({include: \"**\/*.{js,cjs,ts}\"})`, but the same error appeared.\r\n\r\nAt this point I'm feeling a bit stuck. I'm uncertain as to which specific additional parts of the [Babel Rollup config in Gulpfile.mjs](https:\/\/github.com\/babel\/babel\/blob\/main\/Gulpfile.mjs) I need to add to my Rollup config, be it configuration options to the plugins I have alread added, or more plugins. Any input here would be _greatly_ appreciated.\r\n\r\nHere's a [minimal reproduction repository (at the commit with the last Rollup config mentioned here)](https:\/\/github.com\/curran\/babel-standalone-jsx-only-prototype\/tree\/1468083bb30e8826f8aab50c45788a33806ea5f3).\r\n\r\nThanks in advance!","Alternatively, you can also fork the Babel repo, leave only\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/ee4576f6c0d25bd0c64a7a891c34e28fc016b974\/packages\/babel-standalone\/src\/index.ts#L186\r\n\r\nand then run `yarn gulp build-babel-standalone`, which will use our own rollup config and generate a smaller `@babel\/standalone` build.","@curran You need to properly configure the `nodeResolve` plugin:\r\n```js\r\n    nodeResolve({\r\n      \/\/ by default @babel\/core expects to run in Node.js (to load\/resolve the config files and presets from the filesystem),\r\n      \/\/ but it internally includes support for running in the browser.\r\n      \/\/ You can tell rollup to only bundle the files needed to run in the browser, so that it doesn't need to load the\r\n      \/\/ fs-related Node.js modules\r\n      browser: true,\r\n      exportConditions: ['browser'],\r\n      \/\/ This is needed to use rollup-plugin-polyfill-node\r\n      preferBuiltins: false,\r\n    }),\r\n```","You can test that it works with this `index.js` file:\r\n```js\r\nimport { transformSync as babelTransform } from '@babel\/core';\r\nimport pluginTransformReactJSX from '@babel\/plugin-transform-react-jsx';\r\nexport const transform = (jsx) => babelTransform(jsx, {\r\n    plugins: [pluginTransformReactJSX]\r\n});\r\n\r\nconsole.log(transform(\"<div>a<\/div>\").code);\r\n```","@nicolo-ribaudo Thank you so much! I was able to get it to work ([changes here](https:\/\/github.com\/curran\/babel-standalone-jsx-only-prototype\/commit\/444797fc70c0a1ce8f75f2add7e780656f72fbd4)).\r\n\r\nInterestingly, the minified build ends up at 1.08 MB (I tried Uglify and Terser both), whereas [babel-standalone on UNPKG (v7.0.0-beta.3)](https:\/\/unpkg.com\/browse\/babel-standalone@7.0.0-beta.3\/babel.min.js)  weighs about the same at 1.05 MB. Any idea why? Is there some chance that unnecessary parsing logic relating to unused plugins is also getting included? Perhaps tree shaking is not happening?\r\n\r\nFWIW the [Buble JSX only](https:\/\/unpkg.com\/browse\/buble-jsx-only@0.21.0\/dist\/buble-browser-deps.umd.js) browser build ends up around 523 kB.","Hi @curran \r\n\r\nI've created something similar that you might be interested in - it's less than 7 kB and only handles JSX. For legacy browsers (IE and older mobile Safari) it will download Babel Standalone and still works.\r\n\r\nDocs are here (it contains links to many examples):\r\n\r\nhttps:\/\/github.com\/dataformsjs\/dataformsjs\/blob\/master\/docs\/jsx-loader.md "],"labels":["i: enhancement"]},{"title":"[Bug]: `@babel\/parser` doesn't throw a recoverable error for `infer` that is outside of conditional types","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n```ts\r\ntype X = infer U;\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n```js\r\nconst code = \"type X = infer U\";\r\n\r\nrequire(\"@babel\/parser\").parse(code, { plugins: [\"typescript\"] });\r\n```\n\n### Current and expected behavior\n\n**Current:**\r\n\r\nNo error.\r\n\r\n**Expected:**\r\n\r\n`'infer' declarations are only permitted in the 'extends' clause of a conditional type.` error is thrown.\n\n### Environment\n\n```\r\nSystem:\r\n    OS: macOS 10.15.7\r\n  Binaries:\r\n    Node: 16.13.2 - ~\/.nvm\/versions\/node\/v16.13.2\/bin\/node\r\n    Yarn: 3.1.1 - ~\/.nvm\/versions\/node\/v16.13.2\/bin\/yarn\r\n    npm: 8.1.2 - ~\/.nvm\/versions\/node\/v16.13.2\/bin\/npm\r\n  Monorepos:\r\n    Yarn Workspaces: 3.1.1\r\n  npmPackages:\r\n    @babel\/cli: ^7.17.0 => 7.17.0 \r\n    @babel\/core: ^7.17.0 => 7.17.8 \r\n    @babel\/eslint-config-internal: workspace:^ => 7.16.1 \r\n    @babel\/eslint-parser: workspace:^ => 7.17.0 \r\n    @babel\/eslint-plugin-development: workspace:^ => 7.17.7 \r\n    @babel\/eslint-plugin-development-internal: workspace:^ => 7.17.7 \r\n    @babel\/plugin-proposal-dynamic-import: ^7.16.7 => 7.16.7 \r\n    @babel\/plugin-proposal-export-namespace-from: ^7.16.7 => 7.16.7 \r\n    @babel\/plugin-proposal-object-rest-spread: ^7.16.7 => 7.16.7 \r\n    @babel\/plugin-transform-modules-commonjs: ^7.16.8 => 7.16.8 \r\n    @babel\/plugin-transform-runtime: ^7.17.0 => 7.17.0 \r\n    @babel\/preset-env: ^7.16.11 => 7.16.11 \r\n    @babel\/preset-flow: ^7.16.7 => 7.16.7 \r\n    @babel\/preset-typescript: ^7.16.7 => 7.16.7 \r\n    @babel\/runtime: ^7.17.0 => 7.17.0 \r\n    babel-plugin-transform-charcodes: ^0.2.0 => 0.2.0 \r\n    eslint: ^8.9.0 => 8.9.0 \r\n    jest: ^27.4.0 => 27.4.0\r\n```\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nhttps:\/\/github.com\/babel\/babel\/pull\/14476#issuecomment-1107848325","comments":["+1, same issue here"],"labels":["i: bug","pkg: parser","area: typescript","area: errors"]},{"title":"\"No alias\" option for addNamed of @babel\/helper-module-imports","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nI want to add an import such as:\r\n\r\n```\r\nimport { Button } from 'my-ui'\r\n```\r\n\r\nHowever, @babel\/helper-module-imports always generates an alias, such as:\r\n\r\n```\r\nimport { Button as _Button } from 'my-ui'\r\n```\r\n\r\nMy understanding is that the alias makes the import safe, which is what most people want. [The reason why I don't want an alias](https:\/\/github.com\/babel\/babel\/issues\/10328#issuecomment-520776705) is that the output code should be dev-friendly.\r\n\r\nIn other words, I prefer to take the risk of generating code that doesn't work:\r\n\r\n```\r\nimport { Button } from 'other-ui'\r\nimport { Button } from 'my-ui' \/\/ There was a 1% chance of generating a duplicate... bad luck!\r\n```\r\n\r\nRather than generate an alias:\r\n\r\n```\r\nimport { Button as _Button } from 'my-ui'\r\n\/\/ Am I supposed to use \"_Button\" in my code? This is ugly. I'm unhappy 100% of the time\r\n```\r\n\r\nNote: there is a [related issue](https:\/\/github.com\/babel\/babel\/issues\/10328)\n\n### Describe the solution you'd like\n\nThe option could be named `noAlias`. `false` by default to preserve backward compatibility:\r\n\r\n```\r\n\/\/ NEW\r\naddNamed(path, 'named', 'source', { noAlias: true });\r\n\/\/ import { named } from \"source\"\r\n\r\n\/\/ Classic\r\naddNamed(path, 'named', 'source');\r\n\/\/ import { named as _named } from \"source\"\r\n```\r\n\n\n### Describe alternatives you've considered\n\n[Adding an import manually](https:\/\/stackoverflow.com\/questions\/35925798\/how-to-add-an-import-to-the-file-with-babel\/59228367#59228367) is a viable approach. However, there are many edge cases addressed by @babel\/helper-module-imports, which is why I would like to use it.\n\n### Documentation, Adoption, Migration Strategy\n\nI would like to help. However, I'm new to Babel and I'm not sure how to do that.\r\n\r\nThe implementation I see is to pass the option to the constructor of [`ImportBuilder`](https:\/\/github.com\/babel\/babel\/blob\/main\/packages\/babel-helper-module-imports\/src\/import-builder.ts). The change would also require a couple of test cases and [additional doc](https:\/\/github.com\/babel\/website\/blob\/main\/docs\/helper-module-imports.md).\r\n\r\nIf that sounds good to a maintainer, I can try submitting a PR.","comments":["Hey @phbernard! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Hi! Would just using `path.scope.rename(\"_Button\", \"Button\")` after calling `addNamed` work for you? Babel's output is generally meant to be \"used by machines\" and not by humans (even if we try to keep it at least readable), so I'm hesitant to add options just for style preferences.","@phbernard I have a little bit different of a use case - basically code splitting with 0 imports i.e. babel will do the imports for you. The one area you will want to look at is https:\/\/github.com\/babel\/babel\/blob\/ff6304b8adf2003516dbd36cc61284e3d1ce5054\/packages\/babel-traverse\/src\/scope\/index.ts#L479 + https:\/\/github.com\/babel\/babel\/blob\/ff6304b8adf2003516dbd36cc61284e3d1ce5054\/packages\/babel-helper-module-imports\/src\/import-builder.ts#L64 \r\n\r\nYou can slide in your `opts` and conditionalize these statements or whatever helper method you use i.e. addNamespace, addNamed, etc. I have for now just patched it for my needs but it will allow you to be specific on what you want to import without it generating a prefix or additional `id` value.\r\n\r\ncc @nicolo-ribaudo I would sort of agree, there probably isn't a huge use case out there for this - if someone needs it they can patch safely."],"labels":["i: enhancement"]},{"title":"[Bug]: Fails on a FIPs enabled system","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nbabel-loader (webpack)\r\n\r\n### Input code\r\n\r\nJust use webpack on a FIPs enabled system, such as redhat 8 with FIPs enabled.  \r\nhttps:\/\/access.redhat.com\/documentation\/en-us\/red_hat_enterprise_linux\/8\/html\/security_hardening\/assembly_installing-a-rhel-8-system-with-fips-mode-enabled_security-hardening\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nWork on a FIPs enabled system.\r\n\r\n### Environment\r\n\r\nbabel-loader: ^8.2.5 \r\n\r\n\r\n### Possible solution\r\n\r\nPlease upgrade https:\/\/github.com\/babel\/babel\/blob\/main\/packages\/babel-node\/package.json to use at least version 4 of v8flags.\r\n\r\nolder versions of v8flags used an md5 routine that isn't allowed on FIPs compliant systems, which causes babel-loader to fail.\r\nhttps:\/\/github.com\/gulpjs\/v8flags\/issues\/56\r\n\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @darmbrust! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","We can't upgrade to `v8flags` 4.0 because it dropped Node < 10.13 support while Babel 7 still supports Node 6. Maybe we can replace `v8flags` by `process.allowedNodeEnvironmentFlags || require(\"node-environment-flags\")`."],"labels":["i: bug"]},{"title":"[Bug]: regenerator-runtime should be imported after symbol polyfills","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\n```js\r\nclass A {\r\n  constructor() {\r\n    this.map = new Map([\r\n      [\"even\", new Set([0, 2])],\r\n      [\"odd\", new Set([1, 3])]\r\n    ])\r\n  }\r\n  *[Symbol.iterator]() {\r\n    for (const mySet of this.map.values()) yield* mySet\r\n  }\r\n}\r\n\r\nconsole.log('values:', Array.from(new A()))\r\n\r\n\/\/ Expected output: [0, 2, 1, 3]\r\n```\r\n\r\nHere is a link to a code sandbox that shows the error when deploying on netlify and running in IE11:\r\nhttps:\/\/codesandbox.io\/s\/ie11-test-forked-7yfz7b?file=\/src\/index.js\r\n\r\nTry yourself: https:\/\/csb-7yfz7b.netlify.app\/\r\n  - chrome shows expected output\r\n  - ie11 shows invalid output (see below)\r\n\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n```json\r\n{\r\n  \"presets\": [\r\n      [\r\n            \"@babel\/preset-env\",\r\n            {\r\n                \"corejs\": { \"version\":3 },\r\n                \"useBuiltIns\": \"usage\",\r\n                \"targets\": {\r\n                    \"ie\": \"11\"\r\n                }\r\n            }\r\n        ]\r\n  ]\r\n}\r\n```\n\n### Current and expected behavior\n\nThe console should show the following (as it does in chrome):\r\n<img width=\"266\" alt=\"Capture d\u2019e\u0301cran 2022-04-26 a\u0300 17 39 11\" src=\"https:\/\/user-images.githubusercontent.com\/813661\/165338861-f6b989eb-f978-483f-835d-cae995675a32.png\">\r\n\r\nThe actual console content in IE11 shows an empty array:\r\n![Capture d\u2019e\u0301cran 2022-04-26 a\u0300 17 38 29](https:\/\/user-images.githubusercontent.com\/813661\/165338705-a1510f50-c369-45a0-8ec0-24889aafc127.png)\r\n\r\n\r\n\n\n### Environment\n\n- Babel version: 7.17.9\r\n- Windows: 7\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nI can workaround this issue by doing:\r\n\r\n```js\r\nyield* Array.from(mySet)\r\n```\r\n\r\nor avoid using `yield*`:\r\n\r\n```js\r\nfor (const value of mySet) yield value\r\n```","comments":["Hey @matthieusieben! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Hi! I don't have easy access to IE, but could you check if `mySet[Symbol.iterator]` exists?","Yes it does.\r\n\r\nHere is the result of running the following code:\r\n![Capture d\u2019e\u0301cran 2022-05-09 a\u0300 11 39 06](https:\/\/user-images.githubusercontent.com\/813661\/167383662-e560db8e-985e-4607-92fc-0b7d143eac5e.png)\r\n\r\n![Capture d\u2019e\u0301cran 2022-05-09 a\u0300 11 39 26](https:\/\/user-images.githubusercontent.com\/813661\/167383673-618a06d3-e304-467e-8d3e-59b2672cffa8.png)\r\n\r\n","`Set` is not the only one that does not work properly in IE\r\n\r\n```js\r\nfunction* enumerate(it) {\r\n  yield* it\r\n}\r\n\r\nconsole.log('enumerate Array:')\r\n\r\nfor (const item of enumerate([1, 2])) {\r\n  console.log('item:', item);\r\n}\r\n\r\nconsole.log('enumerate enumerate:')\r\n\r\nfor (const item of enumerate(enumerate([1, 2]))) {\r\n  console.log('item:', item);\r\n}\r\n\r\nconsole.log('enumerate Set:')\r\n\r\nfor (const item of enumerate(new Set([1, 2]))) {\r\n  console.log('item:', item);\r\n}\r\n\r\nconsole.log('enumerate Map:')\r\n\r\nfor (const item of enumerate(new Map([[1,1], [2,2]]))) {\r\n  console.log('item:', item);\r\n}\r\n\r\nconsole.log('enumerate Map.entries():')\r\n\r\nfor (const item of enumerate(new Map([[1,1], [2,2]]).entries())) {\r\n  console.log('item:', item);\r\n}\r\n\r\nconsole.log('enumerate Map.values():')\r\n\r\nfor (const item of enumerate(new Map([[1,1], [2,2]]).values())) {\r\n  console.log('item:', item);\r\n}\r\n\r\nconsole.log('enumerate Map.keys():')\r\n\r\nfor (const item of enumerate(new Map([[1,1], [2,2]]).keys())) {\r\n  console.log('item:', item);\r\n}\r\n\r\nconsole.log('enumerate customIterable:')\r\n\r\nconst customIterable = {\r\n  [Symbol.iterator]() {\r\n    let i = 0;\r\n  \treturn {\r\n      next() {\r\n        i++\r\n        if (i > 2) return { done: true }\r\n      \treturn { done: false, value: i }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfor (const item of enumerate(customIterable)) {\r\n  console.log('item:', item);\r\n}\r\n\r\nconsole.log('enumerate customIterableInstance:')\r\n\r\nfunction CustomIterable() {}\r\nCustomIterable.prototype = customIterable\r\n\r\nfor (const item of enumerate(new CustomIterable())) {\r\n  console.log('item:', item);\r\n}\r\n\r\n```\r\n\r\n![Capture d\u2019e\u0301cran 2022-05-09 a\u0300 12 38 39](https:\/\/user-images.githubusercontent.com\/813661\/167393749-8d18c6bb-5c61-47cf-9e05-fc2db861a8ad.png)\r\n\r\n","I think I found the problem. In Babel's result, the `regenerator-runtime` is imported **before** the `core-js\/modules\/es.symbol` polyfills.\r\n\r\nHowever, the `regenerator-runtime` reads the value of `Symbol.iterator` when the module is loaded (and not when regenerator functions are invoked) causing the fallback `@@iterator` to be used by `regenerator-runtime` methods, which is not correct.\r\n\r\n![Capture d\u2019e\u0301cran 2022-05-09 a\u0300 13 12 36](https:\/\/user-images.githubusercontent.com\/813661\/167398972-c4757ed1-2cc1-4b35-b0c5-9317bd472719.png)\r\n\r\nManually changing the order of the Babel result fixes the issue."],"labels":["i: bug","area: upstream"]},{"title":"More consistent API when using errorRecovery","body":"| Q                        | A\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #14175\r\n| Patch: Bug Fix?          | No\r\n| Major: Breaking Change?  | No\r\n| Minor: New Feature?      | Yes\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  | No\r\n| License                  | MIT\r\n\r\nAs described in the original issue #14175, this PR intends to make all errors recoverable when using the `errorRecovery` option, such that only \"legitimate programming mistakes\" on our part cause an error to (unintentionally) be thrown from `parse`. This significantly simplifies usage of error recovery, by having one consistent place to look for errors: the `errors` property of the returned object. This is in contrast to the way things currently work, where if you turn on `errorRecovery`, you both have to check the `errors` property \"on success\", as well as catching non-recoverable errors \"on failure\", which itself could be a \"parse error\" or of course a \"logic error\" on our part. Often this results in the user having to wrap `parse` in their own wrapper function to consolidate these results (we for example do this in Babel's own tests). From a type perspective, you can think of this as changing the type of `parse` from something like:\r\n\r\n`Either<ParserOutput, SyntaxError | Error>`\r\n\r\nto just:\r\n\r\n`Either<ParserOutput, Error>`\r\n\r\nIn order to accomplish this across the board on all errors, the idea is to simply return an empty `Program` for the AST in the cases that are currently \"unrecoverable\". The thinking here is that the AST isn't trustworthy when in an errored state anyways, and is at best a \"best guess\", so an empty `Program` represents the \"best guess\" of a (currently) unrecoverable error. As we make more errors fully recoverable, their corresponding `Program`s will thus also flesh out more. This is analogous to the current state of affairs when adding recoverability to existing unrecoverable errors, and is also the way these \"wrapper\" functions are usually implemented in userland.\r\n\r\n### Implementation\r\n\r\nAlthough original goal was to make `errorRecovery: true` behave in the manner described above, we discovered that some consumers rely on the particularities of the current behavior, so we decided it would make more sense to simply have a new possible value for `errorRecovery` of `\"always\"`, and propose that this should be the behavior for `true` in Babel 8 (at which point we'd return to *only* allowing `false` and `true`). This allows us to, for example, use this behavior in the Babel tests (and we'd actually also use it at RunKit), but not cause any waves for anyone else that is using errorRecovery unless they specifically turn it on.\r\n\r\n### Going forward\/proposal\r\nI believe this new option value should be temporary and should probably just be removed in Babel 8 in favor of `true`. However given the unknown number of existing projects which might break from this change, I thought it best that the change be made for a major version upgrade, not a minor update.\r\n\r\n### Specific implementation notes\r\n1) Sometimes an empty file\/program is returned, but in the case of `parseExpression` there is no such thing as an \"empty expression\", so what's returned is just an object with errors and comments (because comments is a required field for `ParserOutput`s).\r\n2) In a couple places the parser tries a few different passes before failing. In particular it will try to parse certain code as JSX and when it fails will go on to parse it differently. If that second parse pass fails the original JSX parse error gets thrown. In this case I've restored the parse state before the error gets thrown. This ensures that the parse state matches the control flow, and as a result the JSX error is already in the state.errors list.\r\n3) The test fixtures have been updated because most errors no longer throw (some unicode invalid character errors still throw though, but that's independent of the parser itself). So the fixtures have moved most of those errors from the options file to the output file.\r\n4) Babel 8 can sometimes recover better than Babel 7. That means Babel 8 sometimes has more errors in the error list than babel 7. Because of this I added a mechanism to the test suite so that we can specify a different output file (if running babel 8 and the outputs are indeed different). \n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/14484\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\n\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/51719\/","Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/51719\/","This PR also gets us one step closer to being able to update our testing infrastructure to test errors both with errorRecovery `true` (`\"always\"` in this case) and `false` to check that they produce the same kind of errors (which would catch cases like this: https:\/\/github.com\/babel\/babel\/issues\/14146 )."],"labels":["PR: New Feature :rocket:","pkg: parser"]},{"title":"Throw a warning in the console when a plugin isn't necessary anymore","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nIn my plugins I've got thoses:\r\n\r\n```\r\n    \"@babel\/plugin-transform-runtime\",\r\n    \"@babel\/plugin-proposal-class-properties\",\r\n    \"@babel\/plugin-proposal-object-rest-spread\",\r\n    \"@babel\/plugin-proposal-optional-chaining\",\r\n```\r\n\r\nbut I also use `@babel\/preset-env` as preset.\r\n\r\nIt seems that all the proposal plugins are not necessary anymore as these features are now in at least stage-4.\n\n### Describe the solution you'd like\n\nIt could be great to display a warning in the shell.\n\n### Describe alternatives you've considered\n\nWell, none? \ud83d\ude2c\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @kud! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","> all the proposal plugins are not necessary anymore as these features are now in at least stage-4.\r\n\r\nThat's generally true. But there are a few exceptions:\r\n\r\n- One may want to override `preset-env` plugin configs. For example in the [Babel config](https:\/\/github.com\/babel\/babel\/blob\/f51fc614681153a366059f1f53994a13b88abbf5\/babel.config.js#L171) of this project we added `proposal-object-rest-spread` with `{ useBuiltIns: true }`\r\n- One may force certain plugins to be applied, either due to a bug\/performance issue in native implementation or the target support data is wrong\r\n\r\nIf we issue a warning in the console, then we will have to offer another option to suppress these warnings because there are valid use cases.\r\n\r\nFor common tools upgrading scenario, maybe we can provide a per-version `@babel\/preset-env` upgrade guide. We can list new plugins included in `preset-env` from 7.a to 7.b so you can check against the list and determine whether you should remove them from your Babel config.","It sounds great, yes! And thank you for your explanation."],"labels":["i: enhancement"]},{"title":"Support proper JSDoc block AST","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on this feature?\r\n\r\n### What problem are you trying to solve?\r\n\r\nBesides being a virtual standard for documentation, JSDoc has been blessed further by TypeScript in its using it to encode type information (in JavaScript mode).\r\n\r\n(JSDoc could even be used in theory to be used as a basis for conversion to TypeScript which could in turn be converted into WebAssembly through AssemblyScript, providing a role beyond documentation and type checking into actual running code.)\r\n\r\nHowever, until now there has been no standard way to represent JSDoc blocks, beyond treating them just as other comments, in AST.\r\n\r\nIn `eslint-plugin-jsdoc`, in conjunction with via [jsdoccomment](https:\/\/github.com\/es-joy\/jsdoccomment) , we use comment AST to allow rules to be defined which target particular contexts based on their AST structure. We do this so that users have full control of contexts to which rules apply, and so that they can require or prevent certain JSDoc structures from existing. A user could therefore require certain tags but only where a particular tag was present, or report that a particular type was used or shouldn't be used as the child of another type. These types include, via [`jsdoc-type-pratt-parser`](https:\/\/github.com\/jsdoc-type-pratt-parser\/jsdoc-type-pratt-parser), support for any TypeScript types that are used within JSDoc. In other words, any aspect of a JSDoc block can be targeted and targeted intelligently.\r\n\r\nIn a proof of concept ESLint parser, at https:\/\/github.com\/es-joy\/jsdoc-eslint-parser , I use `@babel\/eslint-parser` (or optionally `@typescript-eslint\/parser`) to get `jsdoc` and `jsdocBlocks` properties added which point to JSDoc AST (these are analogous to `leadingComments`\/`trailingComments` and `comments` respectively, but for JSDoc). Using a full-blown parser makes possible AST queries which, unlike our `eslint-plugin-jsdoc` hack, can combine JSDoc as well as regular JavaScript AST into a single expression, and be targeted by ESLint rules such as `no-restricted-syntax`. This AST could in theory be targeted by parser-specific ESLint rules as well.\r\n\r\nWhat this doesn't get us is the ability to manipulate AST, given that there apparently are not ESTree-capable tools which support such AST-aware manipulation as with `@babel\/traverse`.\r\n\r\nA specific use case we have with ESLint (and it is an approach I'd like to use in my own projects as well) is that we'd like to have certain directives in our JSDoc which can be stripped or modified before being supplied to TypeScript, so that we can keep our source code in plain JavaScript + JSDoc, while getting a declaration file built and one that doesn't need editing separately from the JavaScript, with its type information derived solely from inline JSDoc. (TypeScript's awareness of JSDoc + plain JavaScript, though good, doesn't currently provide quite as much robustness as regular TypeScript when in plain JSDoc+JavaScript mode, so we want to work around some of those limitations in our build process, for example, by stripping or expanding typedefs which TypeScript always exports, though we just want to use them as internal aliases.)\r\n\r\nI imagine there may be other use cases for transformation. Some might wish to convert JSDoc-enhanced JavaScript into asm.js, or as mentioned, into proper TypeScript for use by AssemblyScript, causing a pipeline from regular JavaScript to WebAssembly code. With ESLint's awareness of such comments, rules could be made to require or prevent certain syntax or structures for typing purposes (e.g., reporting against using the \"number\" type instead of a particular float\/integer type).\r\n\r\n### Describe the solution you'd like\r\n\r\nSo besides my [discussion question](https:\/\/github.com\/babel\/babel\/discussions\/14445) asking whether you might align more with ESTree (so your types and generator could work out of the box), I'm especially wondering if you would be open to supporting optional parsing and support of special JSDoc block AST properties which could be understood in code traversal, manipulation and generation (if not builders as well). We have an algorithm, originally used in ESLint, for determining the attachment points of a JSDoc node if that may help.\r\n\r\nWhile many will no doubt continue to favor the more succinct form that TypeScript proper provides, it is undoubtedly compelling for projects to maintain accessibility to a greater developer base by allowing plain JavaScript which can be progressively enhanced in a standard, simple way, whereby novices can more easily set aside concern of the JSDoc, while learning to make use of it or allowing others on the type to do so.\r\n\r\nIf such a pipeline existed, existing code might already be ready for type awareness as well.\r\n\r\n### Describe alternatives you've considered\r\n\r\nOne alternative is to fork Babel types and Babel generator to allow us to manipulate the JSDoc AST we have with the experimental `@es-joy\/jsdoc-eslint-parser` and then reserialize it. This wouldn't as easily allow others to benefit from the work, or ourselves to benefit as easily from future improvements. It also requires some extra work to get familiar with Babel, to make a fork, deal with the TypeScript source which is less familiar, etc.\r\n\r\nAnother alternative is to build our own ESTree-aware manipulating tools for use with our parser, but this would require even more work.\r\n\r\nYet another alternative is just using Babel as it is, and applying regular expressions against the stringified comments. Such manipulation can be unpleasant and prohibitive.\r\n\r\nYet another alternative is using Babel as it is, but manipulating the comments and then reserializing them back as regular comments (assuming Babel types' manipulation supports modification and then reserialization of comments too). This is probably the route I would take if there is no interest by your project, but besides this being less elegant than solely manipulating and serializing the JSDoc AST , it seems that it may be compelling for other use cases for JSDoc blocks to be treated as (optionally) first class citizens by the parser, manipulators and generator, especially given TypeScript and AssemblyScript applications.\r\n\r\n### Documentation, Adoption, Migration Strategy\r\n\r\nI can only think of adding an option like `structuredJsdoc: true` to the parser which triggers attachment of such structured comment nodes.\r\n\r\n`@babel\/types` might also expose builders like `t.jsdocBlock()`, `t.jsdocTag()`, `t.jsdocType()`, `t.jsdocDescriptionLine`, etc., but your traversal, manipulation methods, generator, etc. should require no public changes requiring any special documentation. \r\n\r\nI realize this may be rather ambitious, but I thought I'd spell about some of the potential appeal in case you may be willing to adopt. Thanks!","comments":["Hey @brettz9! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","The goal of `@babel\/parser` to parse ECMAScript and its proposal, as well as some popular extension such as TypeScript \/ Flow. However, JSDoc does not fall into this catalogue: In essence, JSDoc is an independent markup language, although it has been widely used in JavaScript projects, it can be, theoretically, used in any other programming language, as long as the language supports comments as whitespace.\r\n\r\nBecause comment is whitespace, `@babel\/parser` only attaches them to closest AST node. I don't think the parsed `jsdoc` AST should be attached to the JavaScript AST because they are whitespaces in JS world. Users can put assembly \/ machine code \/ html or anything in the comments and have a tool recognizing them to perform certain tasks. Therefore, adding `jsdoc` to the JS AST will be open-ended.\r\n\r\nIn you case, I think it is okay to \"manipulating the comments and then reserializing them back as regular comments\". Babel does support such usage:\r\n```js\r\ntraverse(ast, {\r\n  enter(path) {\r\n    const jsdocAST = JSDocParse(path.node.leadingComments);\r\n    transformJSDoc(jsdocAST);\r\n    path.node.leadingComments = JSDocGenerate(jsdocAST);\r\n  }\r\n}\r\n```","> The goal of `@babel\/parser` to parse ECMAScript and its proposal, as well as some popular extension such as TypeScript \/ Flow. However, JSDoc does not fall into this catalogue:\r\n\r\nBut in a sense I think it does fall under at least the TypeScript category. TypeScript has its own [formal handling](https:\/\/www.typescriptlang.org\/docs\/handbook\/jsdoc-supported-types.html) of JSDoc, blessing, extending, and formalizing it, especially through [tsdoc](https:\/\/tsdoc.org\/). When building a declaration file from plain JavaScript, the JSDoc types will be used in the resulting declaration file, so it is not purely for documentation, but for type-awareness.\r\n\r\n> Because comment is whitespace, `@babel\/parser` only attaches them to closest AST node. I don't think the parsed `jsdoc` AST should be attached to the JavaScript AST because they are whitespaces in JS world. \r\n\r\nIn the scheme I've used in `@es-joy\/jsdoc-eslint-parser`, they are also attached to the closest AST node; there is no need for AST specifiers to figure out the semantics of where it should belong. However,  our `@es-joy\/jsdoccomment` project has code to find out, for given ES AST, which JSDoc block is likely to satisfy (e.g., for a function expression, JSDoc on the preceding variable declaration should likely satisfy).\r\n\r\n> Users can put assembly \/ machine code \/ html or anything in the comments and have a tool recognizing them to perform certain tasks. Therefore, adding `jsdoc` to the JS AST will be open-ended.\r\n\r\nThe semantics at least are not too open-ended, as they codify types based on TypeScript. But performing tasks based on them is, I think, a feature. This is how TypeScript is able to do type checking on plain JavaScript+JSDoc files. Tools can already opt to attach comments, so I don't imagine it is opening a Pandora's Box to formalize the extension.\r\n\r\n> In you case, I think it is okay to \"manipulating the comments and then reserializing them back as regular comments\". Babel does support such usage:\r\n> \r\n> ```js\r\n> traverse(ast, {\r\n>   enter(path) {\r\n>     const jsdocAST = JSDocParse(path.node.leadingComments);\r\n>     transformJSDoc(jsdocAST);\r\n>     path.node.leadingComments = JSDocGenerate(jsdocAST);\r\n>   }\r\n> }\r\n> ```\r\n\r\nThe problem is that this does not allow querying the JSDoc (including querying the JSDoc within the same query expression as the ES).\r\n\r\nBy using the JSDoc-within-AST approach, you can see how light it was for us to use esquery at https:\/\/github.com\/es-joy\/js2ts-assistant for our use case, e.g., to [grab `@typedef`'s with `@local`](https:\/\/github.com\/es-joy\/js2ts-assistant\/blob\/main\/index.js#L48-L57) and then use that info to replace TypeScript-flavored JSDoc AST (the `JsdocTypeName` query which targets AST produced by `jsdoc-type-pratt-parser`) so as to be able to allow use of `@typedef` for type aliases within plain JavaScript, without getting all the `@typedef` aliases exported into the TypeScript declaration file."],"labels":["i: enhancement","i: needs triage"]},{"title":"[Bug]: path.remove() removes var binding by mistake","body":"### \ud83d\udcbb\r\n\r\n- [x] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n```js\r\nvar traverse = require(\"@babel\/traverse\").default;\r\nvar parser = require(\"@babel\/parser\");\r\n\r\nvar ast = parser.parse('var a=1;a=2;');\r\ntraverse(ast, {\r\n  AssignmentExpression(path) {\r\n    console.log(path.scope.getBinding(\"a\"));\r\n    path.remove();\r\n    console.log(path.scope.getBinding(\"a\"));\r\n  }\r\n});\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\ncurrent\r\n```\r\nBinding {identifier: Node, scope: Scope, path: NodePath, kind: 'var', constantViolations: Array(1), \u2026}\r\nundefined\r\n```\r\nexpected\r\n```\r\nBinding {identifier: Node, scope: Scope, path: NodePath, kind: 'var', constantViolations: Array(1), \u2026}\r\nBinding {identifier: Node, scope: Scope, path: NodePath, kind: 'var', constantViolations: Array(1), \u2026}\r\n```\r\n\r\n### Environment\r\n\r\n```\r\n  System:\r\n    OS: Windows 10 10.0.22000\r\n  Binaries:\r\n    Node: 16.4.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 7.18.1 - C:\\Program Files\\nodejs\\npm.CMD\r\n  npmPackages:\r\n    @babel\/core: ^7.10.4 => 7.10.4\r\n    @babel\/generator: ^7.17.3 => 7.17.9\r\n    @babel\/parser: ^7.17.3 => 7.17.9\r\n    @babel\/template: ^7.10.4 => 7.16.7\r\n    @babel\/traverse: ^7.17.9 => 7.17.9\r\n    @babel\/types: ^7.17.0 => 7.17.0\r\n```\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @liuxingbaoyu! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: bug"]},{"title":"[Bug]: Create Proxy with a Non-object as Target or Handler","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\n```js\r\n(async function () {\r\n    function v0(v1 = () => null) {\r\n    }\r\n    await null;\r\n});\r\nconst v0 = { alpha: { beta: { charlie: { delta: 'hello' } } } };\r\nfor (let v0 = 0; v0 < [].length; ++v0) {\r\n    if (v0 > 8) {\r\n        break;\r\n    }\r\n}\r\nconst v3 = new Proxy(v0, {\r\n    has: function (v3, v4) {\r\n        return v4 === 'value' ? false : Reflect.has(v3, v4);\r\n    }\r\n});\r\n```\r\nHere is the [PERL](https:\/\/babel.dev\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=false&spec=true&loose=true&code_lz=BQQwzgngdgxgBAMwK6wC4EsD2U7AJRwDeAUHGYijBtnAG4AMwtAjHALy4FsB8cUSAGwEES5OAF9S5EAHcQ6VH0ECA3MXF41MbGEUN2ROCAEAHABYgAXIYBGAU1RXDMCwCcB6O9cJwAJnYFHawByMwCBTGCJaPEJNQRMV1wBBzp6A3oVNLgAHjgAbQBdADoUqABzVDMsgGoahhEpMnQEXH1eAA5GsTEbVzsQAGs1MUlJbShdOgBmAyg7GTgABVdMAA8IJnoAGiImuAswa2Q0LBwmad3aABZunrJ-1CRXHBv2Ng5g2mMkOyiAfkQxjAdjg1gASnYECkqMVDhcrrcRuQxpogA&debug=false&forceAllTransforms=true&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=unambiguous&lineWrap=true&presets=env&prettier=false&targets=&version=7.17.8&externalPlugins=&assumptions=%7B%7D)\n\n### Configuration file name\n\nbabel.config.json\n\n### Configuration\n\n```json\r\n{\r\n  \"sourceType\": \"unambiguous\",\r\n  \"presets\": [\"@babel\/preset-env\"],\r\n  \"plugins\": [\r\n    \"@babel\/plugin-transform-runtime\"\r\n  ]\r\n}\r\n```\n\n### Current and expected behavior\n\nThe transpiler code run by node report an error:\r\n```shell\r\nvar v3 = new Proxy(v0, {\r\n         ^\r\n\r\nTypeError: Cannot create proxy with a non-object as target or handler\r\n```\r\nThis may be caused by Babel converting let variable to var. in the following new proxy, there is a bug caused by scope change\n\n### Environment\n\n- babel \r\n- - \u251c\u2500\u2500 @babel\/cli@7.17.0=6\r\n- - \u251c\u2500\u2500 @babel\/generator@7.17.3\r\n- - \u251c\u2500\u2500 @babel\/plugin-transform-runtime@7.17.0\r\n- - \u251c\u2500\u2500 @babel\/preset-env@7.16.11\r\n- Node: [v17.3.0]\r\n- npm version [8.5.2]\r\n- os [ubuntu 20.04]\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @clhiker! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","This might be a bug in regenerator, which modifies the scope in a wrong way. This is the minimal code to see the bug:\r\n```js\r\n(function* () { var v0; });\r\n\r\nconst v0 = 1;\r\nfor (let v0 = 2;;) break;\r\n\r\nconsole.log(v0);\r\n```\r\nWith just the `@babel\/plugin-transform-block-scoping` and `@babel\/plugin-transform-regenerator` plugins.","Yup, this is a [regenerator](https:\/\/github.com\/facebook\/regenerator\/) bug. This is the minimal bug reproduction:\r\n```js\r\nconst code = `\r\n(function* () { var v0; });\r\n\r\nvar v0;\r\n`;\r\n\r\nconst out = babel.transformSync(code, {\r\n  configFile: false,\r\n  plugins: [\r\n    require(\"regenerator-transform\"),\r\n    () => {\r\n      return {\r\n        visitor: {\r\n          Program: {\r\n            enter(path) {\r\n              console.log(Object.keys(path.scope.bindings));\r\n            },\r\n            exit(path) {\r\n              console.log(Object.keys(path.scope.bindings));\r\n            },\r\n          },\r\n        },\r\n      };\r\n    },\r\n  ],\r\n});\r\n```\r\n\r\nIt should log `[\"v0\"]` both times.","Actually, it would be better to fix this directly in `path.traverse()`. Consider this example:\r\n```js\r\nconst code = `\r\nfunction f() { }\r\nvar v = 1;\r\n`;\r\n\r\nconst out = babel.transformSync(code, {\r\n  configFile: false,\r\n  plugins: [\r\n    ({ template }) => {\r\n      return {\r\n        visitor: {\r\n          Function(path) {\r\n            path\r\n              .get(\"body\")\r\n              .pushContainer(\"body\", template.statement.ast`var v = 0`);\r\n\r\n            \/\/ path.scope.crawl();\r\n          },\r\n          VariableDeclaration(path) {\r\n            if (path.node.declarations[0].init.value === 0) path.remove();\r\n          },\r\n          Program: {\r\n            enter(path) {\r\n              console.log(Object.keys(path.scope.bindings));\r\n            },\r\n            exit(path) {\r\n              console.log(Object.keys(path.scope.bindings));\r\n            },\r\n          },\r\n        },\r\n      };\r\n    },\r\n  ],\r\n});\r\n```\r\n\r\nIt transforms the code like this:\r\n<table>\r\n<thead>\r\n<tr>\r\n  <th><\/th>\r\n  <th>Initial<\/th>\r\n  <th>After <code>Function<\/code> visitor<\/th>\r\n  <th>After <code>VariableDeclaration<\/code> visitor on <code>var v = 0;<\/code><\/th>\r\n<\/tr><\/thead>\r\n<tr><td>Code<\/td><td>\r\n\r\n```js\r\nfunction f() { }\r\nvar v = 1;\r\n```\r\n\r\n<\/td><td>\r\n\r\n```js\r\nfunction f() { var v = 0; }\r\nvar v = 1;\r\n```\r\n\r\n<\/td><td>\r\n\r\n```js\r\nfunction f() {  }\r\nvar v = 1;\r\n```\r\n\r\n<\/td><\/tr>\r\n<tr>\r\n  <td>Global scope<\/td>\r\n  <td><code>f<\/code>, <code>v<\/code><\/td>\r\n  <td><code>f<\/code>, <code>v<\/code><\/td>\r\n  <td><code>f<\/code><\/td>\r\n<\/tr><tr>\r\n  <td>Function scope<\/td>\r\n  <td>empty<\/td>\r\n  <td>empty<\/td>\r\n  <td>empty<\/td>\r\n<\/tr><tr>\r\n  <td>Notes<\/td>\r\n  <td><\/td>\r\n  <td>The visitor didn't register the new <code>v<\/code> binding)<\/td>\r\n  <td><code>path.remove()<\/code> wanted to remove the <code>v<\/code> binding of <code>var v = 0<\/code>, but since it wasn't registered it \"leaked\" to the other binding<\/td>\r\n<\/tr><\/table>\r\n\r\nWe can fix this in https:\/\/github.com\/babel\/babel\/blob\/954177842c0082447b47d9c77a44a7df6e4df8f6\/packages\/babel-traverse\/src\/path\/removal.ts#L25-L28.\r\n\r\nInstead of removing all the binding identifiers with `removeBinding`, we should do something like this:\r\n1. Detect if we need to use `var` semantics:\r\n    1. If the current node is a VariableDeclaration,\r\n       1. `isVar = node.kind === \"var\"`\r\n    2. else, if the current node is a `FunctionDeclaration`, `ClassDeclaration` or `ImportDeclaration`,\r\n       1. `isVar = false`\r\n    3. else, if the parent node is an `ObjectProperty` whose parent is an `ObjectPattern` (and the current node is the `ObjectProperty`'s `.value`),\r\n       1. repeat from 1.i using the `ObjectPattern` instead of the current node\r\n    5. else if the parent node is an `AssignmentPattern` (and the current node is its `.left`), or an `ArrayPattern`, or a `VariableDeclarator` (and the current node is its `.id`),\r\n       1. repeat from 1.i using the parent instead of the current node\r\n    7. else if the parent node is an `ModuleSpecifier` or an `ImportDeclaration`,\r\n       1. repeat from 1.i using the parent instead of the current node\r\n    6. else,\r\n      we are not in a declaration, we can completely exit from the function without deleting any binding\r\n1. Use `getBindingIdentifiers` to get the list of bindings we should remove\r\n1. If `isVar` is true remove them with `.removeOwnBinding` on `scope.getFunctionParent() || scope.getProgramParent()`, else remove them with `scope.removeOwnBinding()`\r\n\r\nThis should make sure that we only remove the correct bindings, and would also fix cases like this one:\r\n```js\r\nconst code = `\r\nvar a = 1;\r\n[a] = [];\r\n`;\r\n\r\nconst out = babel.transformSync(code, {\r\n  configFile: false,\r\n  plugins: [\r\n    () => {\r\n      return {\r\n        visitor: {\r\n          ArrayPattern(path) {\r\n            path.get(\"elements.0\").remove();\r\n          },\r\n          Program: {\r\n            enter(path) {\r\n              console.log(Object.keys(path.scope.bindings));\r\n            },\r\n            exit(path) {\r\n              console.log(Object.keys(path.scope.bindings)); \/\/ It should log [a], but it logs []\r\n            },\r\n          },\r\n        },\r\n      };\r\n    },\r\n  ],\r\n});\r\n```\r\n\r\n---\r\n\r\n@clhiker I'm assigning this to you since you selected \"Would you like to work on a fix?\". If you want to work on this please leave a comment!\r\n\r\n<!-- ALERT!!!!!!!\r\n    Before submitting this comment, please:\r\n      1. Write where to start searching the bug\r\n      2. Write where to add a new test\r\n    See https:\/\/github.com\/babel\/babel\/issues\/9563#issuecomment-466799807 for an example\r\n-->\r\n\r\nIf it is the first time that you contribute to Babel, follow these steps: (you need to have `make` and `yarn` available on your machine)\r\n1. **Write a comment there** to let other possible contributors know that you are working on this bug.\r\n1. Fork the repo\r\n1. Run `git clone https:\/\/github.com\/<YOUR_USERNAME>\/babel.git && cd babel`\r\n1. Run `yarn && make bootstrap`\r\n1. Wait :hourglass_flowing_sand: \r\n1. Run `make watch` (or `make build` whenever you change a file)\r\n1. Add a some tests in https:\/\/github.com\/babel\/babel\/blob\/main\/packages\/babel-traverse\/test\/removal.js (at least my first example in this issue, and one for every node handled by the above algorithm)\r\n1. Update the code!\r\n1. `yarn jest babel-traverse` to run the tests\r\n1. If it is working, run `make test` to run all the tests\r\n1. Run `git push` and open a PR!"],"labels":["i: bug","pkg: traverse (scope)"]},{"title":"[Bug]: Error Throw: Cannot Call a Class as a Function","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\n```js\r\nclass Polygon {\r\n    constructor() {\r\n        this.name = 'Polygon';\r\n    }\r\n}\r\nclass Square extends Polygon {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\nclass Rectangle {\r\n}\r\nObject.setPrototypeOf(Square.prototype, Rectangle.prototype);\r\nlet v21 = new Square();\r\nconsole.log(v21.name);\r\n```\r\nHere is [REPL](https:\/\/babel.dev\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=false&spec=false&loose=false&code_lz=MYGwhgzhAEAKD2ICeBzeA7aBvAUNf0wGEALgE4CuwJ8ZAFAJTZ4GskAWAlhAHTpgBbAKbQAvNADkCZGnQSA3C3wBfHKtCQYAZQCOFMGRFCAHiSHoAJjGmoMzVkXSlK1Wo3usCECgAch9BkVWVXVwKGgAJSFqMHQUEBFcVQB5ACMAK2iSHgghElgyeBoSJD9kgDM6XX1DHh9C4tKhABpIrNj4oTqGoqbAnASSaAA3ACYARjFodCEAd2hqgyFGRUcIRC6QeBQ6MfG-QSFAoA&debug=false&forceAllTransforms=true&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=unambiguous&lineWrap=true&presets=env&prettier=false&targets=&version=7.17.8&externalPlugins=&assumptions=%7B%7D)\n\n### Configuration file name\n\nbabel.config.json\n\n### Configuration\n\n```json\r\n{\r\n  \"sourceType\": \"unambiguous\",\r\n  \"presets\": [\"@babel\/preset-env\"],\r\n  \"plugins\": [\r\n    \"@babel\/plugin-transform-runtime\"\r\n  ]\r\n}\r\n```\n\n### Current and expected behavior\n\nAfter transforming by babel, the code throw a error:\r\n```bash\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n                                                                                            ^\r\n\r\nTypeError: Cannot call a class as a function\r\n```\r\nBut the original code can be run correctly by node.\n\n### Environment\n\n- babel \r\n- - \u251c\u2500\u2500 @babel\/cli@7.17.0=6\r\n- - \u251c\u2500\u2500 @babel\/generator@7.17.3\r\n- - \u251c\u2500\u2500 @babel\/plugin-transform-runtime@7.17.0\r\n- - \u251c\u2500\u2500 @babel\/preset-env@7.16.11\r\n- Node: [v17.3.0]\r\n- npm version [8.5.2]\r\n- os [ubuntu 20.04]\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @clhiker! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","@clhiker \r\n\r\nIs that issue fixed, currently I am also facing the issue.\r\n\r\nhttps:\/\/github.com\/microsoft\/vscode\/issues\/177039 \r\n\r\n","@LavanyaBurlagadda Can you provide a minimal reproducible code?"],"labels":["i: bug"]},{"title":"[Bug]: `ReferencedIdentifier` Inconsistency between `ts` and `js` code ","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n```js\r\nconst traverse = require('@babel\/traverse').default;\r\n\r\nconst code = `\r\n    class A {\r\n        xxx() {} \/\/ no reference\r\n    }\r\n\r\n    export interface IPublicTerminal extends IDisposable {\r\n      open(parent: HTMLElement): void;\r\n    }\r\n\r\n    export class BufferApiView implements IBufferApi {\r\n        constructor(\r\n          public readonly type: 'normal' | 'alternate'\r\n        ) { }\r\n\r\n        write(data: string | Uint8Array, callback?: () => void): void\r\n\r\n        public forEach(callback: (id: IServiceIdentifier<any>, instance: any) => any): void {}\r\n    }\r\n`\r\n\r\nconst ast = require(\"@babel\/parser\").parse(code, {\r\n    sourceType: 'module',\r\n    plugins: [\r\n        'typescript'\r\n    ]\r\n});\r\n\r\ntraverse(ast, {\r\n    ReferencedIdentifier(path) {\r\n        console.log(path.node.name);\r\n        \/\/ IPublicTerminal\r\n        \/\/ IDisposable\r\n        \/\/ open (why?)\r\n        \/\/ parent\r\n        \/\/ HTMLElement\r\n        \/\/ type (why?)\r\n        \/\/ write (why?)\r\n        \/\/ data\r\n        \/\/ Uint8Array\r\n        \/\/ callback\r\n        \/\/ id\r\n        \/\/ IServiceIdentifier\r\n        \/\/ instance\r\n        \/\/ IBufferApi\r\n    }\r\n});\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nExpected no reference identifiers for:\r\n- `open`\r\n- `type`\r\n- `write`\r\n\r\n(Or referenced identifier for: `xxx`)\n\n### Environment\n\n System:\r\n    OS: macOS 10.15.7\r\n  Binaries:\r\n    Node: 16.14.0 - ~\/.nvm\/versions\/node\/v16.14.0\/bin\/node\r\n    Yarn: 1.22.17 - ~\/.npm-packages\/bin\/yarn\r\n    npm: 8.3.0 - ~\/.npm-packages\/bin\/npm\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @coderaiser! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: bug","pkg: traverse"]},{"title":"Make babel-standalone smaller \/ add support for normal babel packages to work on the browser.","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nI'm working on a javascript playground with line to line output, for example:\r\n\r\n```\r\n5 + 5    \/\/ outputs 10\r\nfunction test(a) {\r\n  return a \/ 5\r\n}\r\n\r\ntest(20) \/\/ outputs 4\r\n```\r\n\r\nIn order to do this, I transform the code using a custom babel plugin to inject statements as so:\r\n\r\n```\r\ndebug(1, 5 + 5)\r\n\r\n...\r\n\r\ndebug(6, test(20))\r\n```\r\n\r\nSince this is happening on the browser (for offline-first support) and not on a server, I package @babel\/standalone with the website. Unfortunately, this library is quite big and isn't suitable for low-end devices to download.\n\n### Describe the solution you'd like\n\nI'm not sure how viable these solutions would be, but the best one I can think of is:\r\n\r\nAdd an auto-generated form of @babel\/core, possibly @babel\/browser that replaces any imports of package.json or config requests. This does _not_ replace standalone, which is useful for experimenting if you don't use a bundler, such as rollup.\n\n### Describe alternatives you've considered\n\nI've considered using an alternative AST modifier, but that would mean that many new proposals or compatibility with older browsers may not work.\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @LeoDog896! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Are you using a bundler? You could consider relying on `@babel\/parser` + `@babel\/traverse` + `@babel\/generator` rather than on `@babel\/standalone` or `@babel\/core`:\r\n\r\n```js\r\nimport { parse } from \"@babel\/parser\";\r\nimport traverse from \"@babel\/traverse\";\r\nimport generate from \"@babel\/generator\";\r\n\r\nfunction transform(code, visitor) {\r\n  const ast = parse(code);\r\n  traverse(code, visitor);\r\n  return generate(ast);\r\n}\r\n```","I'll try it out! I was under the impression that core was required but if that's the case then it makes it a lot easier!","Core is required if you want to use:\r\n- Plugins\r\n- Presets\r\n- Config resolution\r\n\r\nIf you just have a custom transform (i.e. a custom-made plugin), you can directly pas the visitor to `@babel\/traverse` rather than creating a real plugin (= you mostly just avoid the plugin wrapper function) :slightly_smiling_face: ","It seems that @babel\/types calls process.env.BABEL_TYPES_8_BREAKING, which doesn't work on the browser. I'll try using a Vite plugin to replace instances of it and see how it goes. Perhaps I can make a null check on BABEL_TYPES_8_BREAKING for @babel\/types?","I've just made a PR to resolve the comment above: #14350 ","> Are you using a bundler? You could consider relying on `@babel\/parser` + `@babel\/traverse` + `@babel\/generator` rather than on `@babel\/standalone` or `@babel\/core`:\r\n> \r\n> ```js\r\n> import { parse } from \"@babel\/parser\";\r\n> import traverse from \"@babel\/traverse\";\r\n> import generate from \"@babel\/generator\";\r\n> \r\n> function transform(code, visitor) {\r\n>   const ast = parse(code);\r\n>   traverse(code, visitor);\r\n>   return generate(ast);\r\n> }\r\n> ```\r\n\r\nI have tried this with esbuild. `@babel\/parser` works fine but `@babel\/traverse` tries to read `process.env.BABEL_TYPES_8_BREAKING` (as @LeoDog896 mentioned ) and also `process.platform`. Both of these can be defined by the bundler but there is also some dependency (`jsesc`) which uses `Buffer.isBuffer` which is a node.js API not available in browsers. Patching this is not trivial because you can only use JSON encodable stuff (same in webpack IIRC). I tried replacing it with just `false` and it seems to work but could break in subtle unexpected ways. Overall not a great user experience and also quite surprising (to me) that `@babel\/traverse` does not just work in the browser.\r\n\r\nIMO `@babel\/traverse` should be \"fixed\". If that is not an option than a new lightweight package such as suggested by OP that has these fixes already applied.","`Buffer` should also be a popular module, and you should be able to easily find a solution in the browser."],"labels":["i: discussion","i: enhancement"]},{"title":"[Bug]: Bundling @babel\/standalone by webpack emits warnings","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\nimport '@babel\/standalone';\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\nN\/A\n\n### Current and expected behavior\n\n**Current behavior:** When bundling a project with Webpack which includes code that imports '@babel\/standalone', Webpack reports:\r\n\r\n> WARNING in .\/node_modules\/@babel\/standalone\/babel.js 308:11-32\r\nCritical dependency: the request of a dependency is an expression\r\n @ .\/src\/index.js 9:0-27\r\n> \r\n> WARNING in .\/node_modules\/@babel\/standalone\/babel.js 346:11-24\r\nCritical dependency: the request of a dependency is an expression\r\n @ .\/src\/index.js 9:0-27\r\n\r\nI think this is due to `commonjsRequire`'s use of `require(path)`.\n\n### Environment\n\nTested in a fresh `create-react-app` environment, as well as a more minimal Webpack environment.\n\n### Possible solution\n\nGiven that @babel\/standalone is intended for use in a browser environment, I wonder why it includes bare `require()` calls. Perhaps these parts could be excluded from this build?\n\n### Additional context\n\nPlease let me know if there's anything else I can do to help. Thanks a bunch!","comments":["Hey @joshuahhh! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","<s>This is https:\/\/github.com\/rollup\/plugins\/issues\/1085.<\/s>\r\n\r\nUpdate: it is not. The `require` in `commonjsRequire` is the fallback in case we fail to bundle the dynamic required libraries used in `@babel\/standalone`, which should be a bug. `commonjsRequire` is in rollup commonjs helper so we can't simply remove it. For now you may ignore such warnings.","@JLHwung hello, is this bug has been fixed yet? I find the same question at version @babel\/standalone@7.18.9","@SxxPorsche I simply searched in the file content and didn't find anything similar to `require(path)`, can you provide a reproducible repo?","Still facing this issue in `7.21.2`. ","@radhasatam Can you provide a reproducible repo?","Still facing this issue in 7.21.4.\r\nSee: https:\/\/github.com\/Mity1299\/babel-standalone-webpack-bug\r\nrun `npm run build` will see the error: \r\nCritical dependency: the request of a dependency is an expression","Thanks, I can reproduce the problem.\r\nOpened an issue https:\/\/github.com\/rollup\/plugins\/issues\/1472.","\r\nThat issue https:\/\/github.com\/rollup\/plugins\/issues\/1472 was closed due to inactivity ;( Is there another way out?","It would be awesome if someone could work on a rollup PR to fix that issue :)","I'll try to do it in a few days. :) (previously I wasn't sure if this should open a rollup PR)"],"labels":["i: bug","area: upstream","pkg: standalone"]},{"title":"[Bug]: Parameter decorator (legacy mode) is not transpiled when there's also a method decorator","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n```js\r\nconst { Controller, GET, POST, BodyParam, UrlParam } = { };\r\n\r\n@Controller('\/api')\r\nclass DemoController {\r\n  @POST\r\n  async events(@BodyParam body) {\r\n    return body;\r\n  }\r\n}\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n[repl](https:\/\/babeljs.io\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.6&spec=false&loose=false&code_lz=MYewdgzgLgBA3jAwuKAnEAbDBTVAaGAcQFEAVAgBQHkBlcmAIRABMBPCgQ1Q4FsCBVVBk7ceMAL4wAvPAkBuAFAKAAsjBpMOVAAoA5AHoOABwCWugJQLgGDhAgwAIth4g1GrLngKYMZdTreMLasYMAw2ABu2OoQ2spMbCK8MABGLKzmXj4-qNhQAK6oYKnpij7iChVAA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=false&targets=&version=7.17.5&externalPlugins=&assumptions=%7B%7D) - need to change decorators version to \"legacy\"\r\n\r\n### Current and expected behavior\r\n\r\nCurrent behavior - output still contains the parameter decorator `@BodyParam`:\r\nExpected behavior - parameter decorator should be transpiled\r\n\r\n```js\r\n\"use strict\";\r\n\r\nvar _dec, _class, _class2;\r\n\r\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\r\n\r\nconst {\r\n  Controller,\r\n  GET,\r\n  POST,\r\n  BodyParam,\r\n  UrlParam\r\n} = {};\r\nlet DemoController = (_dec = Controller('\/api'), _dec(_class = (_class2 = class DemoController {\r\n  async events(@BodyParam\r\n  body) {\r\n    return body;\r\n  }\r\n\r\n}, (_applyDecoratedDescriptor(_class2.prototype, \"events\", [POST], Object.getOwnPropertyDescriptor(_class2.prototype, \"events\"), _class2.prototype)), _class2)) || _class);\r\n```\r\n\r\n### Environment\r\n\r\n\r\n  System:\r\n    OS: macOS 10.15.7\r\n  Binaries:\r\n    Node: 14.15.4 - \/var\/folders\/g_\/lf5b_ch11fgdwmbg3s90jxt80000gn\/T\/fnm-shell-1243492\/bin\/node\r\n    Yarn: 1.22.17 - \/var\/folders\/g_\/lf5b_ch11fgdwmbg3s90jxt80000gn\/T\/fnm-shell-1243492\/bin\/yarn\r\n    npm: 6.14.10 - \/var\/folders\/g_\/lf5b_ch11fgdwmbg3s90jxt80000gn\/T\/fnm-shell-1243492\/bin\/npm\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @kobiburnley! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","how can babel know whether it should transpile to legacy or current mode? do we need a config file for it?","Yes, you must pass a `\"version\"` option to `@babel\/plugin-proposal-decorators`."],"labels":["i: bug","area: typescript"]},{"title":"[Bug]: Safari class fields implementation is buggy - ReferenceError: Can't find variable","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nbabel-loader (webpack)\r\n\r\n### Input code\r\n\r\nThis bug can be triggered by input code like the following, when compiled with webpack and a babel config with preset-env that targets latest Safari\/iOS (class fields are not transformed).\r\n```js\r\nimport helper from '.\/helper'\r\n\r\nclass C {\r\n  property = helper(() => {})\r\n}\r\n```\r\n\r\n### Current and expected behavior\r\n\r\nExtra parens in class fields cause ReferenceErrors in Safari, see webkit bug: https:\/\/bugs.webkit.org\/show_bug.cgi?id=236843\r\n\r\nGenerated code will produce an error like \"ReferenceError: Can't find variable a\".\r\n\r\nUntil the webkit implementation is fixed, class fields should continue to be transpiled when targeting Safari\/iOS.\r\n\r\n\r\n### Environment\r\n\r\n@babel\/core 7.17\r\n@babel\/preset-env 7.16.11\r\n@babel\/compat-data 7.16.8\r\nwebpack 5.38.1\r\n\r\n\r\n### Possible solution\r\n\r\nRemove Safari and iOS from `proposal-class-properties` compat data:\r\nhttps:\/\/github.com\/babel\/babel\/blob\/v7.17.5\/packages\/babel-compat-data\/data\/plugins.json#L19-L29\r\n\r\nDoes this require updating the upstream compatibility data?\r\nhttps:\/\/github.com\/kangax\/compat-table\r\n\r\n### Workaround\r\n\r\nIf anyone else experiences this issue, the easy fix is to force transformation of class properties in preset-env config:\r\n```js\r\npresets: [\r\n  [\r\n    '@babel\/preset-env',\r\n    {\r\n      include: ['@babel\/plugin-proposal-class-properties'],\r\n    },\r\n  ]\r\n],\r\n```","comments":["Hey @liamcmitchell-sc! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","also hit this - just wanted to say great repro steps and workaround @liamcmitchell-sc \ud83d\ude4c ","We will need a bugfix plugin so when `bugfix: true` is enabled (Babel 8 defaults), we only transpile class properties when\r\n1. User code is affected by the specific browser bug\r\n2. User targets to affected browser versions\r\nAn example of bugfix plugin can be found in https:\/\/github.com\/babel\/babel\/pull\/13842, where we workaround another JSC bug.\r\n\r\nWe will need a new test in `compat-table`, similar to https:\/\/github.com\/kangax\/compat-table\/pull\/1765 and implement such plugin.\r\n\r\n## Experiments on this bug\r\n\r\nAnother affected example\r\n\r\n```js\r\n{\r\n  let a = [];\r\n  new class {\r\n    c = a[(0)]; \r\n  }\r\n}\r\n```\r\n\r\nThis one runs without `ReferenceError`, but `c` is correctly initialized as `42`, which should have been `undefined`:\r\n```js\r\nlet a = [42];\r\n{\r\n  let a = [];\r\n  new class {\r\n    c = a[(0)]; \r\n  }\r\n}\r\n```\r\n\r\nand this works as expected\r\n```js\r\nlet a = [];\r\nnew class {\r\n  c = a[(0)];\r\n}\r\n```\r\n\r\nSo the bug is that, when resolving referenced identifiers within field initializer (`a` under `c = ...`), Safari miscalculate the scope of such bindings to the upper level (if exists), if such referenced identifiers are seen outside of a parenthesized expression `(i)`. \r\n\r\nSo we don't have to apply the bug fix when\r\n1. the class is defined in top level (popular cases),\r\n2. the field initializer does not contain parenthesized expressions (popular cases)\r\n\r\nWhen `bugfix: false` is used, we will apply the complete `class-properties` transform on affected Safari versions.","@JLHwung \r\n\r\n> So we don't have to apply the bug fix when\r\n> \r\n> 1. the class is defined in top level (popular cases),\r\n\r\n Do plugins know if compiled code is run at the top level or bundled into functions?\r\n\r\n> 2. the field initializer does not contain parenthesized expressions (popular cases)\r\n\r\nThe parenthesized expressions in my case are produced by Webpack + Terser after all Babel transformations. Without knowing what transforms will happen after Babel, the fix would have to trigger if any variable is referenced.","> Do plugins know if compiled code is run at the top level or bundled into functions?\r\n\r\nGood point, we should probably be more conservative and apply the fix even if the plugin is at the top level.\r\n\r\n> The parenthesized expressions in my case are produced by Webpack + Terser after all Babel transformations\r\n\r\nI'd consider this something to be fixed in terser, since it takes working code and produces non-working code. It's identical to how Terser has a `safari10` option to avoid producing code that is buggy in Safari 10.","I propose to fix this bug by wrapping class fields initializers in an IIFE if they contain any reference to a variable defined in the parent scope, and that reference is not nested within another function:\r\n```js\r\nlet a = [];\r\n{\r\n  let b = [];\r\n  new class {\r\n    x = a[0];\r\n    y = b[0];\r\n    z = () => b[0];\r\n  };\r\n}\r\n```\r\nbecomes\r\n```js\r\nlet a = [];\r\n{\r\n  let b = [];\r\n  new class {\r\n    x = a[0];\r\n    y = (() => b[0])();\r\n    z = () => b[0];\r\n  };\r\n}\r\n```\r\n\r\nI don't think we should explicitly check for parentheses, because they are hard to predict in a transform. In some cases they are explicit, while in other cases they are implicitly printed by the generator (for example, when printing a multiplication between a number and a sum). Also, even if the class field _currently_ does not contain parentheses they could be easily introduced by new transforms that transform an expression nested within the class field value.\r\n\r\nAlso, we'll need tests to make sure that the bugfix plugin works with all our other class-related plugins.","Quick note to say that the WebKit bug has been fixed and no longer reproduces in Safari 16, but of course the issue still applies in Safari 15.","Just faced and fought this bug for 3 days. So it's not clear to me where should be fixed. In babel or in terser?","One important note for the workaround, if you start to use private methods you'll also need to include `@babel\/plugin-transform-private-methods`. There seems to be a dependency where `@babel\/plugin-proposal-class-properties` requires `@babel\/plugin-transform-private-methods`. (This makes intuitive sense, we probably need to transform private methods if we're going to transform class properties.)\r\n\r\nIf you start to use private methods in an environment that doesn't transform them but have applied the workaround to include `@babel\/plugin-proposal-class-properties`, you'll get an error like:\r\n\r\n```\r\nClass private methods are not enabled. Please add `@babel\/plugin-transform-private-methods` to your configuration.\r\n```\r\n\r\nI would update the workaround to include both:\r\n\r\n```jsonc\r\n{\r\npresets: [\r\n  [\r\n    '@babel\/preset-env',\r\n    {\r\n      include: [\r\n        \/\/ See https:\/\/github.com\/babel\/babel\/issues\/14289\r\n        '@babel\/plugin-proposal-class-properties',\r\n        \/\/ Private methods cannot be used with the class properties transform, ensure they're transformed as well\r\n        '@babel\/plugin-transform-private-methods'\r\n      ],\r\n    },\r\n  ]\r\n],\r\n}\r\n```\r\n\r\nThis is easy to see in the REPL. The following [fails without the additional transform](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=MYGwhgzhAEDC0G8BQ1oGIAOAnAlgNzABcBTABSwHsMBuFdAW2MIAsKATACgEpEBfJXkA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=&prettier=false&targets=&version=7.23.2&externalPlugins=%40babel%2Fplugin-transform-class-properties%407.22.5&assumptions=%7B%7D), but [is compiled correctly with both transforms](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=MYGwhgzhAEDC0G8BQ1oGIAOAnAlgNzABcBTABSwHsMBuFdAW2MIAsKATACgEpEBfJXkA&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=&prettier=false&targets=&version=7.23.2&externalPlugins=%40babel%2Fplugin-transform-class-properties%407.22.5%2C%40babel%2Fplugin-transform-private-methods%407.22.5&assumptions=%7B%7D):\r\n\r\n```js\r\nclass C {\r\n  #privateProp;\r\n  #method() {}\r\n}\r\n```","Faced similar issue for below code snippet in Safari < 16 with error - \"Reference error: Cant find variable t\".\r\n\r\n```\r\nvar t, a;   \r\n\r\nclass l {\r\n    static staticVar = null === (t = window.someVariable) || void 0 === t || null === (a = t.someRandomFn(\"abcd\")) || void 0 === a ? void 0 : a.then((e=>e));\r\n}\r\n```\r\n\r\nThe variable `t` was defined externally and initialized within a static variable of the class. While initializing `t`, the static variable failed to resolve the lexical scope for `t`. This issue occurred intermittently, resulting in a \"Reference error: Can't find variable t.\" It was resolved by adding the `@babel\/plugin-transform-class-properties` plugin.\r\n\r\nSeeking insights into the transient nature of this error. Any ideas on what might have caused this intermittent failure?"],"labels":["i: browser bug"]},{"title":"[Bug]: TypeScript enum and namespace should be treated as binding rather than global variable","body":"### \ud83d\udcbb\r\n\r\n- [x] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API \r\n\r\n### Input code\r\n\r\n```js\r\n\/\/ file: test.js\r\nconst parser = require('@babel\/parser');\r\nconst traverse = require('@babel\/traverse').default;\r\nconst code = `\r\nvar Foo;\r\n(function (Foo) {})(Foo || (Foo = {}));\r\nenum Bar {}\r\nnamespace ns {\r\n    export const c = 2\r\n}\r\nfunction func(){\r\n    g = 2\r\n};\r\nvar variable;\r\nvariable = 2;\r\n`;\r\n\r\nconst ast = parser.parse(code, { sourceType: 'module', plugins: ['typescript'] });\r\n\r\ntraverse(ast, {\r\n    enter(path) {\r\n        if (path.isProgram()) {\r\n            console.log('globals:', Object.keys(path.scope.globals));\r\n            console.log('bindings:', Object.keys(path.scope.bindings));\r\n        }\r\n    },\r\n});\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\n\r\nCurrent:\r\n```\r\nglobals: [ 'g', 'Bar', 'ns' ]\r\nbindings: [ 'Foo', 'func', 'variable' ]\r\n```\r\n\r\nExpected:\r\n\r\n```\r\nglobals: [ 'g' ]\r\nbindings: [ 'Foo', 'Bar', 'ns', 'func', 'variable' ]\r\n```\r\n\r\n### Environment\r\n```\r\n  System:\r\n    OS: macOS 12.1\r\n  Binaries:\r\n    Node: 17.5.0 - \/var\/folders\/sb\/lx5g8cjd3cs67qsglbb5lwym0000gn\/T\/fnm_multishells\/4990_1645249418679\/bin\/node\r\n    Yarn: 1.22.15 - \/var\/folders\/sb\/lx5g8cjd3cs67qsglbb5lwym0000gn\/T\/fnm_multishells\/4990_1645249418679\/bin\/yarn\r\n    npm: 8.4.1 - \/var\/folders\/sb\/lx5g8cjd3cs67qsglbb5lwym0000gn\/T\/fnm_multishells\/4990_1645249418679\/bin\/npm\r\n  Monorepos:\r\n    Yarn Workspaces: 1.22.15\r\n```\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @xiaoxiangmoe! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: bug","area: typescript","pkg: traverse (scope)"]},{"title":"Idea: compat data for build tools","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nThis isn't a problem that's specific to Babel, but I think Babel could help solve it given that it maintains compat data for JS features supported in various engines. I ran into an interesting problem today, which is that browsers are actually ahead of build tools in some areas. For example, all modern browsers support optional chaining and nullish coalescing, so browserslist might indicate that its safe to not transpile that. But if you are building a library that needs to be consumed by other build systems like webpack, this might not be a safe assumption. Webpack 4 is still extremely widely used (npm downloads are 3x webpack 5), and the version of acorn it uses does not support these features. This lead to us unintentionally shipping untranspiled code to npm, and breaking lots of builds.\n\n### Describe the solution you'd like\n\nI think Babel's [compat data](https:\/\/github.com\/babel\/babel\/blob\/main\/packages\/babel-compat-data\/data\/plugins.json) could be extended to include more \"engines\" such as build tools. This could be parsers like \"acorn\" or \"esbuild\", or higher level tools like \"webpack\" or even \"next.js\". However, there could also be mappings between higher level tools and parsers. Then, when building a library, you could declare build tools as targets rather than only browsers. Perhaps a browserslist-style metric could also be used to infer support, e.g. npm downloads or recency of release.\n\n### Describe alternatives you've considered\n\nManually maintaining a browserslist that happens to work in popular build tools, but that's not really sustainable...\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @devongovett! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Thanks for opening this issue! I 100% agree we need this because often people use tools that lag behind their browser queries.\r\n\r\nWe need to figure out where to get foot quality data about build tools, similarly to compat-table."],"labels":["i: enhancement"]},{"title":"Sketch of optional pipes","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | no <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          | no\r\n| Major: Breaking Change?  | no\r\n| Minor: New Feature?      |\ud83d\udc4d\r\n| Tests Added + Pass?      | \ud83d\udc4d\r\n| Documentation PR Link    |  tbd <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  | no\r\n| License                  | MIT\r\n\r\nAdd optional pipelines using the `|>` operator. Optional pipelines are to normal pipelines what [optional chaining](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Operators\/Optional_chaining) is to calling methods.\r\n\r\n| methods | pipelines\r\n| ----- | ----\r\n| `x.foo()` | `x \\|> foo(#)`\r\n| `x?.foo()` | `x ?> foo(#)`\r\n\r\nFull description is in the pipelines proposal: https:\/\/github.com\/tc39\/proposal-pipeline-operator#optional-hack-pipes\r\n\r\ncc @js-choi \r\n\r\nWhat this needs:\r\n\r\n- [ ] Align on whether this is a separate package or just an option\r\n- [ ] Gate it properly\r\n- [ ] Add it to docs\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/14255\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\n\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/51217\/","This definitely needs to be its own proposal before babel should implement it; it's decidedly not part of the pipeline proposal.","@ljharb Makes sense that pipeline proposal doesn't include this. Do we need a stage 0 proposal for optional pipelines before Babel can merge a PR for it? I'm trying to find rules on \"what will be accepted into babel\" but I can't find it in CONTRIBUTING and I'm out of the loop.","I would generally expect Babel not to support anything prior to stage 2, since solution shapes have a high risk of change before then.","Any chance of this landing as an opt-in?","imo babel shouldn't support anything that's not on track to be an actual language feature, opt-in or otherwise."],"labels":["PR: New Feature :rocket:","Spec: Pipeline Operator"]},{"title":"[Bug]: error message causing problems: \"Dynamic import can only be supported when transforming ES modules to AMD, CommonJS or SystemJS. Only the parser plugin will be enabled.\"","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\nAnything\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n`babel.config.json`:\r\n\r\n```json\r\n{\r\n  \"presets\": [\"@babel\/preset-flow\", [\r\n    \"@babel\/preset-env\", {\r\n      \"modules\": \"umd\"\r\n    }\r\n  ]]\r\n}\r\n```\r\n\r\nI also have this in `package.json`:\r\n\r\n```json\r\n{\r\n  \"main\": \"dist\/main.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"build\": \"babel index.js --out-dir dist\",\r\n    \"flow\": \"flow\",\r\n    \"lint\": \"eslint\",\r\n    \"clean\": \"rm -f dist\/*\"\r\n  },\r\n  \"browserslist\": \"> 0.25% and not dead\",\r\n  \"eslintConfig\": {\r\n    \"root\": true,\r\n    \"parser\": \"@babel\/eslint-parser\",\r\n    \"plugins\": [\"flowtype\"],\r\n    \"extends\": [\"plugin:flowtype\/recommended\", \"standard\"]\r\n  },\r\n  \"eslintIgnore\": [\"dist\/*\", \"node_modules\/*\", \"README.md\"],\r\n  \"devDependencies\": {\r\n    \"@babel\/cli\": \"7.17.0\",\r\n    \"@babel\/core\": \"7.17.0\",\r\n    \"@babel\/eslint-parser\": \"7.17.0\",\r\n    \"@babel\/preset-env\": \"7.16.11\",\r\n    \"@babel\/preset-flow\": \"7.16.7\",\r\n    \"eslint-config-standard\": \"17.0.0-0\",\r\n    \"eslint-plugin-flowtype\": \"8.0.3\",\r\n    \"flow-bin\": \"0.170.0\"\r\n  }\r\n  \/\/ ... author info\r\n}\r\n\r\n```\n\n### Current and expected behavior\n\n### Current behavior\r\n\r\nEvery time I run the `babel` CLI, or when SublimeLinter runs `eslint` (or I run it manually), this message appears:\r\n\r\n```\r\nDynamic import can only be supported when transforming ES modules to AMD, CommonJS or SystemJS. Only the parser plugin will be enabled.\r\n```\r\n\r\nThis is causing SublimeLinter to think eslint is erroring when it shouldn't.\r\n\r\n### Expected behavior\r\n\r\nFor messages to appear only when appropriate - when a real fixable error is happening.\n\n### Environment\n\nmacOS and Linux.\r\n\r\n```\r\n  \"devDependencies\": {\r\n    \"@babel\/cli\": \"7.17.0\",\r\n    \"@babel\/core\": \"7.17.0\",\r\n    \"@babel\/eslint-parser\": \"7.17.0\",\r\n    \"@babel\/preset-env\": \"7.16.11\",\r\n    \"@babel\/preset-flow\": \"7.16.7\",\r\n    \"eslint-config-standard\": \"17.0.0-0\",\r\n    \"eslint-plugin-flowtype\": \"8.0.3\",\r\n    \"flow-bin\": \"0.170.0\"\r\n  }\r\n```\n\n### Possible solution\n\nFor messages to appear only when appropriate - when a real fixable error is happening.\n\n### Additional context\n\n_No response_","comments":["Hey @taoeffect! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","> Dynamic import can only be supported when transforming ES modules to AMD, CommonJS or SystemJS\r\n\r\n`import()` is not supported when transforming ES modules to `\"umd\"`. You can ship ESM directly if your engine targets have native support.","@JLHwung `import()` does not appear anywhere in my code, but plain-old `import` does.","We could make `preset-env` inject a small plugin that warns when it sees `import()`, rather than unconditionally warning.","Should we have a to create a new plugin for this?","Yes, but we don't need a new package for that. You could create it in a new `babel-preset-env\/src\/plugins\/warn-dynamic-import.ts` file.","When I'm running tests in `babel-preset-env` many of the tests are failing which is making it difficult to check the warning added by new plugin, what can be a workaround for this?","Maybe try rebasing on `main` and re-running `make bootstrap` \ud83e\udd14"],"labels":["i: needs triage"]},{"title":"Investigate performance of `@babel\/register\/experimental-worker`","body":"I'm opening this issue just as a reminder to not forget about the great review @coderaiser left at https:\/\/github.com\/babel\/babel\/pull\/14025#issuecomment-1003547657.\r\n","comments":["https:\/\/github.com\/babel\/babel\/pull\/13199\r\nWhen I was investigating the slowness of `lint-staged`, I found that the first call to `babel.parse` in `eslint` took 2s, just a small file of a few hundred lines.\r\nI think this is a bit too slow.\r\nI'm guessing it might be a performance issue related to worker threads, this one looks similar to it, so I didn't open a new one.\r\nI will continue to investigate later and update the news.\r\n\r\nDoesn't seem to be related to worker threads \ud83d\ude13\r\n`loadPartialConfigAsync: 2022.98291015625 ms`"],"labels":["i: enhancement"]},{"title":"Fix: Traverse set correct scope for function declarations in sloppy mode","body":"| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #13549\r\n| Patch: Bug Fix?          | Yes\r\n| Major: Breaking Change?  | No\r\n| Minor: New Feature?      | No\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | n\/a\r\n| Any Dependency Changes?  | No\r\n| License                  | MIT\r\n\r\nFix for #13549.\r\n\r\nI believe this captures all the edge cases.\r\n\r\n* A sloppy-mode function declaration is hoisted to the furthest ancestor block which does not include another `const`, `let`, `param` or `module` binding.\r\n* Only applies to plain functions, not async or generator functions.\r\n* Binding location depends on whether environment *in which the function is declared* is strict mode, not whether the function itself is strict mode.\r\n\r\nA few notes about implementation:\r\n\r\n* Because it's necessary to know what other bindings exist in ancestor blocks before determining which scope the function declaration should be bound in, creating the binding has to be deferred until exiting the parent function \/ program. This deals with cases like this where at the time of visiting the function declaration, you don't have all the info you need to calculate the correct scope:\r\n\r\n```js\r\n{\r\n  function foo() {}\r\n}\r\nlet foo;\r\n```\r\n\r\n* The check for whether a function is strict mode [here](https:\/\/github.com\/overlookmotel\/babel\/blob\/sloppy-function-scope\/packages\/babel-traverse\/src\/scope\/index.ts#L329) is fairly expensive. However, it's bypassed for functions which are declared at top level in program, or directly nested in another function - which covers the vast majority of cases. The check is only run if it really needs to be.\r\n\r\n* Because of the several conditions on correct input to `_registerSloppyFunctionDeclarations()`, I thought it best to prefix method name with `_`, so it's not part of public API.\r\n\r\n* The [test I've modified](https:\/\/github.com\/overlookmotel\/babel\/blob\/sloppy-function-scope\/packages\/babel-plugin-transform-block-scoping\/test\/fixtures\/general\/switch\/input.js) in `@babel\/plugin-transform-block-scoping` I think maintains the intent of the test - the later `function f() {}` is meant to be scoped to inside the `switch` block.\r\n\r\n* I am not entirely clear how traversal starting from a node which is not the program root works. I think [this section](https:\/\/github.com\/overlookmotel\/babel\/blob\/sloppy-function-scope\/packages\/babel-traverse\/src\/scope\/index.ts#L1020) covers such cases, but would appreciate input on whether I have this right.\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/14203\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["I'm afraid I've discovered my assumptions were incorrect. I said above:\r\n\r\n> A sloppy-mode function declaration is hoisted to the furthest ancestor block which does not include another const, let, param or module binding.\r\n\r\nThis is not correct. It should be:\r\n\r\n> A sloppy-mode function declaration is hoisted to its parent function's scope if that scope *and no intermediate scopes* already have an existing binding.\r\n\r\nThere are some further complications if there are multiple function declarations.\r\n\r\nHere the inner function declaration is hoisted as a redeclaration:\r\n\r\n```js\r\n{\r\n  function f() { return 2; }\r\n}\r\nfunction f() { return 1; }\r\nconsole.log(f()); \/\/ Logs 2\r\n```\r\n\r\nWhereas here the more deeply nested function here does create a separate binding in its own block:\r\n\r\n```js\r\n{\r\n  function f() { return 1; }\r\n  {\r\n    function f() { return 2; }\r\n    console.log(f()); \/\/ 2\r\n  }\r\n}\r\nconsole.log(f()); \/\/ 1\r\n```\r\n\r\nSo unfortunately the implementation in my PR would need a lot of changes to be correct. Going to take some time or (to be honest) maybe never happen!","(I hate annex b)","MDN notes that there are differences between browsers in how they handle this:\r\n\r\nhttps:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Statements\/function#conditionally_created_functions\r\n\r\nIn NodeJS:\r\n\r\n```js\r\nconsole.log(f); \/\/ undefined\r\nconst getOuterF = () => f;\r\n{\r\n  console.log(typeof f); \/\/ function\r\n  console.log(typeof getOuterF()); \/\/ undefined <-- what???\r\n  function f() {}\r\n  console.log(typeof f); \/\/ function\r\n  console.log(typeof getOuterF()); \/\/ function\r\n  f = 123;\r\n  console.log(typeof f); \/\/ number\r\n  console.log(typeof getOuterF()); \/\/ function <-- what???\r\n}\r\nconsole.log(typeof f); \/\/ function\r\n```\r\n\r\nIt appears the nested function declaration creates *two* bindings - one at top level, and one in the block statement.\r\n\r\nI couldn't find a passage in ECMA spec which specifies the correct behavior. But I find the spec pretty impenetrable, so I may just have missed it. Anyone know if this exists?","It's specified here: https:\/\/tc39.es\/ecma262\/#sec-block-level-function-declarations-web-legacy-compatibility-semantics\r\n\r\nI can try to analyze how that example should work according to the spec.","Thanks very much for swift reply. Some bedtime reading! It looks complicated, but more comprehensible than much of the spec.","Btw, with your example I get the same result in Firefox and Node.js","Ok, for that example you probably have to look at B.3.2.2 and 16.1.7."],"labels":["PR: Bug Fix :bug:","pkg: traverse (scope)"]},{"title":"[Bug]: path.evaluate should not be confident about array literal variable initializer","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\nThis is a complete standalone reproduction:\r\n\r\n```js\r\nconst babel = require(\"@babel\/core\");\r\nconst assert = require(\"assert\");\r\n\r\nlet src = `\r\n  function example() {\r\n    let value = [];\r\n    value.push(Math.random());\r\n    return value;\r\n  }\r\n`;\r\n\r\nbabel.transform(src, {\r\n  plugins: [\r\n    function () {\r\n      return {\r\n        visitor: {\r\n          ReturnStatement(path) {\r\n            let result = path.get(\"argument\").evaluate();\r\n            assert.equal(result.confident, false);\r\n          },\r\n        },\r\n      };\r\n    },\r\n  ],\r\n});\r\n```\r\n\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nThe assertion in my repro program above fails, because Babel believes it can statically evaluate the value of the return statement. `path.evaluate()` returns `{ confident: true, depot: null, value: [] }`.\r\n\r\nInstead, it should return `{ confident: false }`, because it's not possible to statically determine the return value of this code snippet.\r\n\r\n### Environment\r\n\r\nTested against `@babel\/core` 7.16.12 in Node 16.\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @ef4! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","This is broken for object literals too. If you substitute:\r\n\r\n```js\r\nfunction example() {\r\n    let value = { a: 1 };\r\n    value.a = 2;\r\n    return value;\r\n  }\r\n```\r\n\r\n`path.evaluate()` says it is confident that the return value is `{a: 1}`.\r\n\r\n","If the initial length of the array is 0 then it should return `{ confident: false }`, what can be the condition for return to be `{ confident: true }`?","You can be confident only if there are no other references to the binding in between initialization and return:\r\n\r\n```js\r\nfunction() {\r\n  let value = { a: 1 };\r\n  return value; \/\/ confident\r\n}\r\n\r\nfunction() {\r\n  let value = { a: 2 };\r\n  anythingThatUses(value);\r\n  return value; \/\/ not confident\r\n}\r\n```\r\n\r\n","I'd like to work on this issue?","Can I work on this Issue?\r\n"],"labels":["i: bug","pkg: traverse"]},{"title":"[Bug]: errorRecovery: true should never throw SyntaxErrors","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\nThis is not meant as an umbrella bug to track making every currently unrecoverable `raise` a well thought out recoverable `raise`, but rather an appeal to just return `{ ast: t.Program([]), errors:[unrecoverableError] }` whenever we encounter an unrecoverable error too. The argument here is that `ast` is already untrustworthy post-error, so it doesn't really matter how sparse it is, it's a best guess, even if that best guess is just \"hey, it's a javascript program, can't tell you much else\"\r\n\r\nOn the other hand, this would allow callers of this API to simplify how they interact with errors, having just *one* place to look, instead of 2. For example, in RunKit, we use `{ errorRecover: true }` because we want to give the user as much feedback as possible. However, we have to bizarrely \"catch errors\" in two places to accomplish this:\r\n\r\n```javascript\r\nfunction parseRecoverableForReal(string) {\r\n  try {\r\n    return parse(string);\r\n  } catch (e) {\r\n    if (e instanceof SyntaxError) {\r\n      return { program: t.Program([]), errors: [e] };\r\n    }\r\n    throw e;\r\n  }\r\n}\r\n\r\n```\r\n\r\nThat way, we can just do this:\r\n\r\n```javascript\r\nconst { errors, ...rest } = parseRecoverableForReal(string);\r\nif (errors) {\r\n   errors.forEach(\/* show error UI *\/);\r\n}\r\n```\r\n\r\nIt would be nice to not have to do this wrapping ourselves, which really only exposes an implementation detail internal to the parser: the fact that you're really unsure how to proceed, which is irrelevant to most (all?) callers, as the resulting AST from an error can never be trusted anyways.\r\n\r\nMore important, this untangles *my errors* from *my users' errors*. That is to say, the above code should really look like this:\r\n\r\n```javascript\r\ntry {\r\n  const { errors, ...rest } = parseRecoverableForReal(string);\r\n  if (errors) {\r\n     errors.forEach(\/* show error UI *\/);\r\n  }\r\n} catch (e) {\r\n  reportToSentry(e);\r\n}\r\n```\r\n\r\nIn other words, *true implementation errors* from parse should be handled very differently than the *expected* errors that arise from a user's input. If I do `parse({ oops: true })` and get \"object is not a string\" or whatever, I need to go fix that. Currently, I have to do these `instanceof` gymnastics to tease apart legitimate errors, vs what I would call \"valid failure end states of a parse\". It would be nice for the API to do this for me, isntead of me having to make assumptions that \"user errors\" can only come in the form of `SyntaxError`, etc. I would argue this is true of almost all usage of babel with `{ errorRecovery: true }`, not just RunKit's. Even if you are writing a bundler, there is a big difference between what your bundler should do if the user typed incorrect code, vs. what it should do if it encountered an actual logic error.\r\n\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nCurrent: `{ errorRecovery: true }` can throw `SyntaxErrors`\r\nExpected: would like `{ errorRecovery: true }` to not throw `SyntaxErrors`\r\n\r\n### Environment\r\n\r\n- Babel version: 7.16.8\r\n\r\n### Possible solution\r\n\r\nFor now, I would like to just push this try\/catch `SyntaxError` instanceof check that I've wrapped `parse` into Babel proper.\r\n\r\nIn the future, after we've done more work on recoverability, I think it would be nicer to experiment with having `this.raise.unrecoverable` simply set `this.state.pos = stringLength`, such that the parse completes, and all the currently open nodes are finishAt'ed (or possible throw their own additional errors). Not sure if this is possible yet, but it would much more elegantly handle cases where you have 10,000 statements, and the very last statement has an unrecoverable error, which currently throws all that work away. Instead, a system like this would return a parse tree with 99,999 statements, and an error.\r\n\r\nAgain though, for now I'd just like to do a very quick try\/catch change to get this working soon.\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @tolmasky! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement","pkg: parser"]},{"title":"[Bug]: Update remaining interfaces that use Position\/index pairs to just Position","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\nN\/A\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nEver since https:\/\/github.com\/babel\/babel\/pull\/14130, functions that take Position\/index pairs are now redundant. That PR has already accounted for this in error-related functions, but I'd now like to do the same for the remaining function interfaces to just take in the `Position`. Beyond simplifying the code, there are also two correctness considerations that this would address:\r\n\r\n1. First, as these pairs always represent the same \"location\", it would remove the possibility of future accidental errors where the source index and line\/column location get out of sync. With this new setup, the one-to-one mapping between these two is made more concrete and there is no opportunity to have to derive them separately.\r\n\r\n2. Perhaps more importantly, there are a number of instances where we use either the `?number` type, the `pos: ?number` optional parameter, or both `pos?: ?number`. These are troublesome because Flow seems to not catch uses of \"!pos\", which are ambiguous and actually mean \"not null and not undefined **and not 0**\", where you probably mean \"not null\/undefined\". Once we exclusively use `Position` objects, `?Position` will be unambiguous in the sense that `Position { index: 0 }` can never accidentally be interpreted as a \"missing\" position. I don't believe we currently have any of these issues, but this is somewhat due to \"luck\". For example, https:\/\/github.com\/babel\/babel\/pull\/14130 removed this code which only works because it happens to be that a trailing comma couldn't exist at \"pos\" 0, but is arguably from the isolated context of the function's perspective, incorrect, and you could certainly imagine other such cases eventually popping up in parts of the code where pos *could* be equal to 0:\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/a6ca39cebb961255e825f3de8e8f59400df4db01\/packages\/babel-parser\/src\/parser\/lval.js#L231-L233\r\n\r\nFrom:\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/a6ca39cebb961255e825f3de8e8f59400df4db01\/packages\/babel-parser\/src\/parser\/lval.js#L207-L211\r\n\r\n\r\n### Environment\r\n\r\n- Babel version: 7.16.8 \r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @tolmasky! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement","pkg: parser"]},{"title":"[Bug]: Remove unnecessary final semicolon in minified output","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n```js\r\nconst {parse} = require('@babel\/parser'),\r\n  generate = require('@babel\/generator').default;\r\n\r\nconst codeIn = 'function f(){const x=1}const x=1';\r\nconst codeOut = generate(parse(codeIn), {minified: true}).code;\r\nconsole.log(codeOut);\r\n\/\/ Logs 'function f(){const x=1}const x=1;'\r\n```\r\n\r\n### Configuration file name\r\n\r\nn\/a\r\n\r\n### Configuration\r\n\r\nn\/a\r\n\r\n### Current and expected behavior\r\n\r\nNot a bug, but a tiny optimization being missed.\r\n\r\nIn the above example `function f(){const x=1}const x=1` is parsed and then generated with `minified` option.\r\n\r\nI'd expect the output to be the same as the input. However, the output is:\r\n\r\n```js\r\nfunction f(){const x=1}const x=1;\r\n```\r\n\r\nAn unnecessary extra semicolon has been added on the end. This is in contrast to the same statement in the function body, where the semicolon has been omitted before `}`.\r\n\r\nIs there a good reason why there needs to be a final semicolon?\r\n\r\n### Environment\r\n\r\n```\r\nSystem:\r\n  OS: macOS 10.15.7\r\nBinaries:\r\n  Node: 16.13.1 - ~\/.nvm\/versions\/node\/v16.13.1\/bin\/node\r\n  Yarn: 1.22.17 - ~\/.nvm\/versions\/node\/v16.13.1\/bin\/yarn\r\n  npm: 8.1.2 - ~\/.nvm\/versions\/node\/v16.13.1\/bin\/npm\r\nnpmPackages:\r\n  @babel\/core: ^7.16.7 => 7.16.7\r\n  @babel\/generator: ^7.16.8 => 7.16.8\r\n  @babel\/helper-module-transforms: ^7.16.7 => 7.16.7\r\n  @babel\/helper-plugin-utils: ^7.16.7 => 7.16.7\r\n  @babel\/parser: ^7.16.8 => 7.16.8\r\n  @babel\/plugin-transform-arrow-functions: ^7.16.7 => 7.16.7\r\n  @babel\/plugin-transform-modules-commonjs: ^7.16.8 => 7.16.8\r\n  @babel\/plugin-transform-react-jsx: ^7.16.7 => 7.16.7\r\n  @babel\/plugin-transform-strict-mode: ^7.16.7 => 7.16.7\r\n  @babel\/register: ^7.16.9 => 7.16.9\r\n  @babel\/traverse: ^7.16.8 => 7.16.8\r\n  @babel\/types: ^7.16.8 => 7.16.8\r\n  babel-jest: ^27.4.6 => 27.4.6\r\n  babel-plugin-dynamic-import-node: ^2.3.3 => 2.3.3\r\n  eslint: ^7.32.0 => 7.32.0\r\n  jest: ^27.4.7 => 27.4.7\r\n```\r\n\r\n### Possible solution\r\n\r\nAfter this line:\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/dc5f419fa9e4ba3b8393dd9e957be33292b2525c\/packages\/babel-generator\/src\/generators\/base.ts#L21\r\n\r\nadd:\r\n\r\n```js\r\nthis._buf.removeLastSemicolon();\r\n```\r\n\r\n### Additional context\r\n\r\nI am not sure if there's a reason why a final semicolon is needed. Is it required for compatibility with some old browser or something?\r\n\r\nIf not, I'll submit a PR.","comments":["Hey @overlookmotel! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","I believe the trailing semicolon is a safety measure to prevent nasty surprises when concatenating multiple separately-minified chunks of code.\r\n","@lightmare Thanks for your reply. Yes, I see what you mean.\r\n\r\nWould maintainers support addition of an option to control whether an additional semicolon is added or not?\r\n\r\nI know this is a tiny optimisation which is not of much interest to most. Unfortunately for me, I have painted myself into a corner with a library which uses Babel to generate code. I was using a simple \"if string ends with `;`, trim it off\" modification to Babel's output, but have now realised that's not safe in all cases e.g. `while ( f() ) ;`. So I now either need to propose this option be added to Babel, or amend every single test in the library to add a semicolon - and there's over 10,000 tests!\r\n\r\nAs this is likely of little interest to anyone else, I'd be happy to do all the running - make a PR, write the tests, update the docs - if maintainers would accept that.","This previous discussion might be relevant: https:\/\/github.com\/babel\/babel\/issues\/9540. I also wanted to remove the semicolons in the past.","@tolmasky Ah thanks. I had not noticed that existing issue.\r\n\r\nWhat I'm asking for is a bit different though. I'm not outputting an expression, I'm outputting a program (series of statements). In my use case, the output is never concatenated with other output, so the final semicolon is always unnecessary.\r\n\r\nAs I said, this is a tiny optimisation, so I totally understand if the answer is \"supporting this is not worthwhile\". However, I have a particular motivation to implement it, and it may help the odd other person (such as @lopugit who [made the same request](https:\/\/github.com\/babel\/babel\/issues\/9540#issuecomment-908320262) in the issue you opened).","> I'm outputting a program (series of statements).\r\n\r\nPerhaps you could check the last (top-level) statement, and only strip the semicolon when it's none of `if \/ for \/ while \/ do \/ with`.\r\n"],"labels":["i: needs triage"]},{"title":"Provide type definitions for babel-register","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on this feature?\r\n\r\n### What problem are you trying to solve?\r\n\r\nI'm currently working on a project with `checkJs: true` and Typescript, using babel to strip the types out.\r\n\r\nMy entrypoint is a `.js` file which requires `@babel\/register`, and then calls it with the extensions option to enable typescript.\r\n\r\nThis produces the following error:\r\n```\r\nCould not find a declaration file for module '@babel\/register'. 'myprojectpath\/node_modules\/@babel\/register\/lib\/index.js' implicitly has an 'any' type.\r\n```\r\n\r\n\r\n\r\n### Describe the solution you'd like\r\n\r\nShip a `.d.ts` file with `babel\/register` that defines the types for calling the register function.\r\n\r\n### Describe alternatives you've considered\r\n\r\nCurrently I've added my own project-local type definitions, with only the options I'm using in this project.\r\n\r\n```ts\r\ndeclare module \"@babel\/register\" {\r\n  function register(options: { presets: string[]; extensions: string[] }): void;\r\n\r\n  export = register;\r\n}\r\n```\r\n\r\nI can also use `@ts-expect-error` to silence things\r\n\r\n### Documentation, Adoption, Migration Strategy\r\n\r\nThis shouldn't require any changes by consumers:\r\n- People without types will now get IDE type hints\r\n- People who had their own local definitions will still have their local ones take precedence","comments":["Hey @glenjamin! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement","i: needs triage"]},{"title":"[Bug]: Syntax Error:support for 'jsx' is not enabled only when electron application has been packaged.","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n```\r\nconst babel = require(\"@babel\/core\");\r\n\r\nfunction transform(sourceCode) {\r\n    return babel.transformAsync(sourceCode,{});\r\n}\r\n```\n\n### Configuration file name\n\nbabel.config.json\n\n### Configuration\n\n```{\r\n    \"presets\":[\r\n        [\r\n            \"@babel\/preset-env\",\r\n            {\r\n                \"targets\":\"defaults\"\r\n            }\r\n        ],\r\n        \"@babel\/preset-react\"\r\n    ],\r\n    \"targets\":{\r\n        \"electron\":\"16.0.6\"\r\n    }\r\n}\r\n```\n\n### Current and expected behavior\n\nWhen i run my application through the terminal the application runs correctly however once i run a build version of the application the following error occurs once \r\n```\r\nSyntaxError: unknown: Support for the experimental syntax 'jsx' isn't currently enabled (91:13):\r\n\r\n  89 |     render() {\r\n  90 |         return (\r\n> 91 |             <div className=\"col-md-12 calculator\" >\r\n     |             ^\r\n  92 |                 <div className=\"display col-md-12\">\r\n  93 |                     <h2 className='alternate-equation'> { this.state.equation } <\/h2>\r\n  94 |                     <p className='answer'> { this.state.value } <\/p>\r\n\r\nAdd @babel\/preset-react (https:\/\/git.io\/JfeDR) to the 'presets' section of your Babel config to enable transformation.\r\nIf you want to leave it as-is, add @babel\/plugin-syntax-jsx (https:\/\/git.io\/vb4yA) to the 'plugins' section to enable parsing.\r\n```\r\n I'm trying to parse the above code that is throwing the error using the babel programmatic api.\n\n### Environment\n\nSystem:\r\n    OS: Windows 10 10.0.22000\r\n  Binaries:\r\n    Node: 16.13.1 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 8.1.2 - C:\\Program Files\\nodejs\\npm.CMD\r\n  npmPackages:\r\n    @babel\/core: ^7.16.7 => 7.16.7\r\n    @babel\/plugin-transform-classes: ^7.16.7 => 7.16.7\r\n    @babel\/preset-env: ^7.16.8 => 7.16.8\r\n    @babel\/preset-react: ^7.16.7 => 7.16.7\r\n    @babel\/preset-stage-0: ^7.8.3 => 7.8.3\r\n    babel-loader: ^8.2.3 => 8.2.3\r\n    grunt-babel: ^8.0.0 => 8.0.0\r\n    webpack: ^5.65.0 => 5.66.0\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nI'm not sure if this is a problem created by babel or by electron-builder which is what i used to build the application, but i thought since it was babel producing the error i should ask here. Here is my package.json file.\r\n```\r\n  {\r\n  \"name\": \"planck_app\",\r\n  \"productName\": \"planck_app\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"My Electron application description\",\r\n  \"main\": \"main.js\",\r\n  \"index\": \"index-bundled.js\",\r\n  \"indexHtml\": \"index.html\",\r\n  \"scripts\": {\r\n    \"start\": \"electron .\",\r\n    \"pack\": \"electron-builder --dir\",\r\n    \"dist\": \"electron-builder\",\r\n    \"lint\": \"echo \\\"No linting configured\\\"\",\r\n    \"postinstall\": \"electron-builder install-app-deps\",\r\n    \"unpack\":\"npx asar extract 'C:\\\\Users\\\\uncle-shaggy\\\\programs\\\\planck_app\\\\planck-app\\\\dist\\\\win-unpacked\\\\resources\\\\app.asar' '.\/dist\/unpacked'\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": {\r\n    \"name\": \"uncle-shaggy\",\r\n    \"email\": \"zanoxstoner@gmail.com\"\r\n  },\r\n  \"license\": \"MIT\",\r\n  \"build\": {\r\n    \"appId\": \"planck.web.dev.text.editor.app\",\r\n    \"linux\": {\r\n      \"target\": \"deb\",\r\n      \"category\": \"Development\"\r\n    },\r\n    \"win\": {\r\n      \"target\": \"squirrel\"\r\n    }\r\n  },\r\n  \"dependencies\": {\r\n    \"@babel\/core\": \"^7.16.7\",\r\n    \"@babel\/plugin-transform-classes\": \"^7.16.7\",\r\n    \"@babel\/preset-env\": \"^7.16.8\",\r\n    \"@babel\/preset-react\": \"^7.16.7\",\r\n    \"electron-builder-squirrel-windows\": \"^22.14.12\",\r\n    \"electron-log\": \"^4.4.4\",\r\n    \"electron-squirrel-startup\": \"^1.0.0\",\r\n    \"electron-unhandled\": \"^3.0.2\",\r\n    \"grunt-cli\": \"^1.4.3\",\r\n    \"json5\": \"^2.2.0\",\r\n    \"localforage\": \"^1.10.0\",\r\n    \"prettier\": \"^2.5.1\",\r\n    \"prop-types\": \"^15.7.2\",\r\n    \"react\": \"^17.0.2\",\r\n    \"react-dom\": \"^17.0.2\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel\/preset-stage-0\": \"^7.8.3\",\r\n    \"babel-loader\": \"^8.2.3\",\r\n    \"electron\": \"^16.0.6\",\r\n    \"electron-builder\": \"^22.14.5\",\r\n    \"grunt\": \"^1.4.1\",\r\n    \"grunt-babel\": \"^8.0.0\",\r\n    \"load-grunt-tasks\": \"^5.1.0\",\r\n    \"webpack\": \"^5.65.0\",\r\n    \"webpack-cli\": \"^4.9.1\"\r\n  }\r\n}\r\n``` ","comments":["Hey @athinimafu! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Can you provide a reproduction repo?","@JLHwung do you mean a repo that reproduces the error?","Yes, without a reproduction repo we can't prioritize the issue.","@JLHwung  [https:\/\/github.com\/athinimafu\/reprod.git](url) is the repo where i reproduced the same error. it's a small electron application where you write code and it is transpiled for you using babel it works fine for jsx when run through the terminal but again the packaged application displays the same syntax error.","You need to pass a filename for `preset-react` to work\r\n```js\r\nreturn (await babel.transformAsync(code,{ filename: \"example.jsx\" })).code;\r\n```\r\nthe filename is automatically determined by `@babel\/cli`, but if you are calling `@babel\/core` programmatically, you have to provide the `filename` option.","@JLHwung  i did as you suggested and exact error still persists","> https:\/\/github.com\/athinimafu\/reprod.git \r\n\r\nHow do I use it? `npm run pack` works without errors, and `npm run dist` gives this error:\r\n```\r\nreprod@1.0.0 dist\r\n> electron-builder\r\n\r\n  \u2022 electron-builder  version=22.14.5 os=5.13.0-1010-gcp\r\n  \u2022 loaded configuration  file=package.json (\"build\" field)\r\n  \u2022 writing effective config  file=dist\/builder-effective-config.yaml\r\n  \u2022 packaging       platform=linux arch=x64 electron=16.0.7 appOutDir=dist\/linux-unpacked\r\n  \u2022 building        target=deb arch=x64 file=dist\/reprod_1.0.0_amd64.deb\r\n  \u2a2f Please specify author 'email' in the application package.json\r\n\r\nSee https:\/\/docs.npmjs.com\/files\/package.json#people-fields-author-contributors\r\n\r\nIt is required to set Linux .deb package maintainer. Or you can set maintainer in the custom linux options.\r\n(see https:\/\/www.electron.build\/configuration\/linux).\r\n  failedTask=build stackTrace=Error: Please specify author 'email' in the application package.json\r\n                                                                                                                                                                                                                                                                                                                          See https:\/\/docs.npmjs.com\/files\/package.json#people-fields-author-contributors\r\n                                                                                                                                                                                                                                                                                                                          It is required to set Linux .deb package maintainer. Or you can set maintainer in the custom linux options.\r\n(see https:\/\/www.electron.build\/configuration\/linux).\r\n                                                                                                                                                                                                                                                                                                                              at FpmTarget.computeFpmMetaInfoOptions (\/workspace\/reprod\/node_modules\/app-builder-lib\/src\/targets\/fpm.ts:86:13)\r\n    at FpmTarget.build (\/workspace\/reprod\/node_modules\/app-builder-lib\/src\/targets\/fpm.ts:144:25)\r\n    at \/workspace\/reprod\/node_modules\/app-builder-lib\/src\/platformPackager.ts:154:11\r\n    at async Promise.all (index 0)\r\n    at AsyncTaskManager.awaitTasks (\/workspace\/reprod\/node_modules\/builder-util\/src\/asyncTaskManager.ts:65:25)\r\n    at Packager.doBuild (\/workspace\/reprod\/node_modules\/app-builder-lib\/src\/packager.ts:453:5)\r\n    at Object.executeFinally (\/workspace\/reprod\/node_modules\/builder-util\/src\/promise.ts:12:14)\r\n    at Packager._build (\/workspace\/reprod\/node_modules\/app-builder-lib\/src\/packager.ts:376:31)\r\n    at Packager.build (\/workspace\/reprod\/node_modules\/app-builder-lib\/src\/packager.ts:337:12)\r\n    at Object.executeFinally (\/workspace\/reprod\/node_modules\/builder-util\/src\/promise.ts:12:14)\r\n```\r\n\r\nEDIT: I added an email to `package.json`, and now also `npm run dist` works without problems.","sorry the squirrel.windows installer configuration for electron-builder requires an email field.","Btw, I cannot know for sure since I cannot reproduce the problem using your repository, but you could try specifying `configFile: __dirname + \"\/babel.config.json\"` in the `babel-loader` options in `webpack.config.js`","The webpack bundle is only responsible for bundling renderer process so i can't see how that would effect the code\r\n` await babel.transformAsync(code,{ filename:\"example.jsx\", })).code; ` which i execute in the main process but i did as you suggested anyway and the error still persists . When you say you cannot reproduce the error does that mean you can successfully transpile jsx using the build application. "],"labels":["i: needs triage"]},{"title":"[Bug]: Incorrect MissingSemicolon SyntaxError when errorRecovery is false, but correct InvalidDigit SyntaxError when errorRecovery is true","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\nAnother error I ran into while fixing https:\/\/github.com\/babel\/babel\/issues\/14123, and the fix for that will include a fix for this too. Compare the following runs of the parser, one with `errorRecovery` set to `false`, the other to `true`:\r\n\r\n```javascript\r\nrequire(\"@babel\/parser\").parse(\"0b111199\", { errorRecovery: true }).errors\r\n```\r\n```javascript\r\nrequire(\"@babel\/parser\").parse(\"0b111199\", { errorRecovery: false })\r\n```\r\n\r\nSee it here: https:\/\/runkit.com\/tolmasky\/incorrect-missingsemicolon-syntaxerror-when-errorrecover-set-to-false\r\n\r\nYou'll see the first gives you the error you expect: `Expected number in radix 2. (1:6)`, while the second gives you an erroneous error of `Missing semicolon. (1:6)`.\r\n\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nExplained above.\n\n### Environment\n\n- Babel version: 7.16.8\r\n- https:\/\/runkit.com\/tolmasky\/incorrect-missingsemicolon-syntaxerror-when-errorrecover-set-to-false\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @tolmasky! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: bug","pkg: parser"]},{"title":"[Bug]: Incorrect Documentation under @babel\/generator","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\ninput - main.js\r\n```\r\ninclude('secondary.js')\r\n\r\nconsole.log('I am Main');\r\nlet foo = new secondary();\r\n```\r\n\r\ninput - secondary.js\r\n```\r\nclass secondary {\r\n    constructor() {\r\n        console.log('I am secondary!');\r\n    }\r\n}\r\n```\r\n\r\nexpected translated code output:\r\n```\r\nclass secondary {\r\n    constructor() {\r\n        console.log('I am secondary!');\r\n    }\r\n}\r\n\r\nconsole.log('I am Main');\r\n```\r\n\r\nMy test code:\r\n```\r\n\"use strict\";\r\nconst util = require(\"util\");\r\nconst fs = require(\"fs\");\r\nconst babel = require(\"@babel\/core\");\r\n\r\ncompileJSX('ReactComponents.jsx');\r\n\r\nfunction compileJSX(jsxfile) {\r\n\tlet jsfile = jsxfile.replace('.jsx','.js');\r\n\tconsole.log(`JSX Cache Miss | Compiling scripts\/jsx\/${jsxfile} > cache\/js\/${jsfile}`);\r\n\r\n\tlet rendered = null;\r\n\r\n\tlet parserOpts = {\r\n\t\tpreserveComments: true,\r\n\t\tattachComment: true, \t\r\n\t\tstrictMode: true \t\t\r\n\t};\r\n\r\n\tlet generatorOpts = {\r\n\t\tcompact : false,\r\n\t\tminified: false,\r\n\t\tcomment : false,\r\n\t};\r\n\r\n\ttry {\r\n\t\tconst t = require(\"@babel\/types\");\r\n\r\n\t\tlet transformer = function(jsxFilename) {\r\n\t\t\tlet jsxFile = fs.readFileSync(`${jsxFilename}`, `utf8`);\r\n\t\t\tlet ret = babel.transformSync(jsxFile, {\r\n\t\t\t\ttargets: `defaults`,\r\n\t\t\t\tast: true,\r\n\t\t\t\tfilenameRelative: `${jsxFilename}`,\r\n\t\t\t\tsourceType: `unambiguous`,\r\n\t\t\t\tsourceMaps: true,\r\n\t\t\t\tsourceFileName: `\/js\/${jsxFilename}`,\r\n\t\t\t\tsourceRoot: `\/js\/maps\/`,\r\n\t\t\t\thighlightCode: true,\r\n\t\t\t\tpresets: [\r\n\t\t\t\t\t[`@babel\/preset-react`, {\r\n\t\t\t\t\t\t\tthrowIfNamespace: true \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t],\r\n\t\t\t\tplugins: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvisitor: {\r\n\t\t\t\t\t\t\tCallExpression(path,state) {\r\n\t\t\t\t\t\t\t\tif (path.node.callee.name == 'include') {\r\n\t\t\t\t\t\t\t\t\tlet included = transformer(path.node.arguments[0].value);\r\n\t\t\t\t\t\t\t\t\tlet sourceMapComment = babel.template.ast(`null;\/\/# sourceMappingURL=\/js\/maps\/${path.node.arguments[0].value}`,\r\n\t\t\t\t\t\t\t\t\t\t{\tpreserveComments: true,\r\n\t\t\t\t\t\t\t\t\t\t\tcomments: true\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\tincluded.ast.program.body.push(sourceMapComment);\r\n\t\t\t\t\t\t\t\t\tpath.replaceWithMultiple(included.ast.program.body);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\tparserOpts,\r\n\t\t\t\tgeneratorOpts\r\n\t\t\t});\r\n\r\n\t\t\tfs.writeFileSync(`${jsxFilename}.map`, util.inspect(ret.map), `utf8`);\r\n\r\n\t\t\treturn ret;\r\n\t\t}\r\n\r\n\t\tlet parsed = transformer(jsxfile);\r\n\r\n\t\tconsole.log(\"code:\")\r\n\t\tconsole.log(parsed);\r\n\t} catch (e) {\r\n\t\tconsole.log(util.inspect(e)); \r\n\r\n\treturn rendered;\r\n}\r\n```\r\n\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nAt https:\/\/babeljs.io\/docs\/en\/babel-generator#ast-from-multiple-sources,\r\n\r\nIt shows the following example:\r\n\r\n>AST from Multiple Sources\r\n>In most cases, Babel does a 1:1 transformation of input-file to output-file. However, you may be dealing with AST constructed from multiple sources - JS files, templates, etc. If this is the case, and you want the sourcemaps to reflect the correct sources, you'll need to pass an object to generate as the code parameter. Keys should be the source filenames, and values should be the source content.\r\n>\r\n>Here's an example of what that might look like:\r\n\r\n```\r\nimport { parse } from \"@babel\/parser\";\r\nimport generate from \"@babel\/generator\";\r\n\r\nconst a = \"var a = 1;\";\r\nconst b = \"var b = 2;\";\r\nconst astA = parse(a, { sourceFilename: \"a.js\" });\r\nconst astB = parse(b, { sourceFilename: \"b.js\" });\r\nconst ast = {\r\n  type: \"Program\",\r\n  body: [].concat(astA.program.body, astB.program.body),\r\n};\r\n\r\nconst { code, map } = generate(\r\n  ast,\r\n  { sourceMaps: true },\r\n  {\r\n    \"a.js\": a,\r\n    \"b.js\": b,\r\n  }\r\n);\r\n\r\n\/\/ Sourcemap will point to both a.js and b.js where appropriate.\r\n```\r\n\r\nI am unable to get this example working. I've tried modifying the code in a few ways that seem appropriate with no luck.\r\n\r\nA few docs pages show the options having `sourceFilename` and other docs pages show it having `sourceFileName`.\r\n\r\nhttps:\/\/babeljs.io\/docs\/en\/babel-parser shows sourceFilename\r\nhttps:\/\/babeljs.io\/docs\/en\/babel-generator shows sourceFileName\r\nhttps:\/\/babeljs.io\/docs\/en\/options shows sourceFileName\r\n\r\nEven if these were supposed to refer to different options, it feels odd that the casing is different and it's confusing and not consistent; in reality, parse won't accept sourceFilename anyway.\r\n\r\nI'm creating a Babel plugin that will replace a `include('filename')` with the contents of that file, eg:\r\n\n\n### Environment\n\nbabel 7.16.7^\r\nnode 17.2.0^\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @ForbiddenEra! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","With  #14246 and #14247, this sample code should work correctly.","> With #14246 and #14247, this sample code should work correctly.\r\n\r\nAwesome; I don't know if I'll have a chance to test my case anytime soon but if the sample code works then that's great!\r\n\r\nI think the docs still might need to be updated; so with that and the fact I haven't tested _I_ won't close this just yet; but if maintainers feel it's solved than feel free of course."],"labels":["i: question","i: docs"]},{"title":"[Bug]: Filename does not appear in SyntaxErrors when using Node < 16.9.0","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@babel\/node\r\n\r\n### Input code\r\n\r\nhttps:\/\/github.com\/codebling\/babel-issue-example contains a minimal reproducible example, along with instructions and expected and actual results. Key points of the README are copied here:\r\n\r\n```\r\ngit clone https:\/\/github.com\/codebling\/babel-issue-example.git\r\ncd babel-issue-example\r\nnvm use 16.8    # or any version between 12 and 16.8, possibly even earlier versions\r\nnpm i\r\nnpm start       # or: .\/node_modules\/.bin\/babel-node index.js\r\n```\r\n\r\n\r\n### Configuration file name\r\n\r\npackage.json\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\n\r\n## Expected Result\r\n\r\nUsing Node 16.9.0 or later, the problematic file name and lines are logged.\r\n```\r\nSyntaxError: \/tmp\/babel-issue-example\/index.js: Legacy octal literals are not allowed in strict mode. (1:4)\r\n\r\n> 1 | a = 01;\r\n    |     ^\r\n  2 |\r\n    at Parser._raise (\/tmp\/babel-issue-example\/node_modules\/@babel\/parser\/lib\/index.js:569:17\r\n```\r\n\r\n## Actual Result\r\n\r\nUsing Node 16.8 or earlier, we don't see the file name (though the line numbers still appear).\r\n```\r\nSyntaxError: Legacy octal literals are not allowed in strict mode. (1:4)\r\n    at Parser._raise (\/tmp\/babel-issue-example\/node_modules\/@babel\/parser\/lib\/index.js:569:17)\r\n```\r\n\r\n\r\n### Environment\r\n\r\n- Babel version: ^7.16\r\n- Node version: <= 16.8 (works in >= 16.9.0)\r\n- OS: linux or Mac\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @codebling! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","This issue only affects `@babel\/node`. I can't reproduce on `@babel\/cli`.","Sounds right, sorry about that. I've updated the issue description (`@babel\/node` wasn't in the template and I didn't think to change it afterwards)","**Babel is forced to open strict mode, is there a way to close it**\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/64947085\/230759414-e9041f71-a491-4ae5-ac32-6b20971aaa1e.png)\r\n`package.json`\r\n```json\r\n  \"dependencies\": {\r\n    \"@babel\/core\": \"^7.21.3\",\r\n}\r\n```\r\n","@r3x5ur how is that related\r\n","@r3x5ur You can set `sourceType` to `script` ([docs link](https:\/\/babel.dev\/docs\/options#sourcetype)). If you have further questions, please open a new issue instead of hijacking current thread.","Solved, thank you"],"labels":["i: bug","area: node"]},{"title":"parseExpressionAt","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on this feature?\r\n\r\n### What problem are you trying to solve?\r\n\r\nI'm working on a templating language that allows direct usage of JS expressions within the interpolation.\r\n\r\nDue to this, I have no concrete way of knowing when the expression ends, I'd have to check resulting JS AST to see where it ended (`node.end` + counting the parenthesis).\r\n\r\n### Describe the solution you'd like\r\n\r\nI would like to have something similar to acorn's [`parseExpressionAt`](https:\/\/github.com\/acornjs\/acorn\/tree\/master\/acorn#interface) method where I point it to parse starting from a specific index, and not throw if there are still more of the string left after the expression.\r\n\r\n### Describe alternatives you've considered\r\n\r\nPersonally, since I use `{expression}` for interpolation. What I could possibly try to do is to count up when encountering opening bracket, and count down when encountering closing bracket, it'll be considered as expression to parse if the count reaches 0.\r\n\r\nThis can be very wonky though, which is why I haven't went for this approach just yet.\r\n\r\n### Documentation, Adoption, Migration Strategy\r\n\r\nI'm not exactly sure how the method should be, as it's a very rare case for why you would need such a thing.\r\n\r\n```js\r\nlet ast = babel.parseExpressionAt('{foo}', 1);\r\n\/\/ -> { type: 'Identifier', name: 'foo', start: 1, ... }","comments":["Hey @intrnl! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","If you want a better solution in the immediate, just do:\r\n\r\n``` javascript\r\nfunction findClosingBrace(string)\r\n{\r\n    try { parseExpression(string); }\r\n    catch (error) { return error.pos; };\r\n\r\n    throw SyntaxError(\"Missing closing brace\");\r\n}\r\n\r\nfunction parseExpressionAt(string, index)\r\n{\r\n     const substring = string.substr(index);\r\n     const justExpressionString = substring.substr(0, findClosingBrace(string.substr(index)));\r\n\r\n     return parseExpression(justExpressionString);\r\n}\r\n```\r\n\r\nYou'll want to make it a little more rigorous by making sure e.pos actually is a closing brace for example, etc.\r\n\r\nHere is a working example: https:\/\/runkit.com\/tolmasky\/parse-expression-at-babel-14126\r\n\r\n","Interesting, I suppose that might also work (at the cost of parsing twice, still considering). Should I close this issue or is this still worth for consideration?"],"labels":["i: enhancement","i: needs triage"]},{"title":"[Bug]: _defineProperty binding references","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n```\r\nclass Test {\r\n  name = 3;\r\n  constructor() {\r\n\r\n  }\r\n}\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\nnone\n\n### Current and expected behavior\n\nwhen I use:\r\n babel.transformSync(code, {\r\n    plugins: [['@babel\/plugin-proposal-decorators', { legacy: true }], ['@babel\/plugin-proposal-class-properties']],\r\n    ast: true,\r\n    babelrc: false,\r\n    configFile: false,\r\n  })\r\n\r\nthe code will be transformed to\r\n```\r\nfunction _defineProperty(){...}\r\nclass Test {\r\n  constructor() {\r\n    _defineProperty(this, \"name\", 3);\r\n  }\r\n\r\n}\r\n\r\n```\r\n\r\nI  travserse the ast \u3002 the binding _defineProperty has no references, the value is 0\r\n\r\nwhat am I use wrong ? \r\n\r\nthanks !\n\n### Environment\n\nSystem:\r\n    OS: macOS 10.15.5\r\n  Binaries:\r\n    Node: 12.13.1 - \/usr\/local\/bin\/node\r\n    Yarn: 1.22.5 - \/usr\/local\/bin\/yarn\r\n    npm: 6.12.1 - \/usr\/local\/bin\/npm\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @xukaijie111! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","[Edited]\r\nInside `C:\\Users\\Lenovo\\Desktop\\Projects\\babel-exploration\\babel\\packages\\babel-core\\test\\fixtures\\transformation` I created a dir `transformsync-class-with-constructor\\input.mjs` I wrote the test case (to inspect the output OP described): \r\n```\r\nimport * as babel from \"@babel\/core\";\r\nbabel.transformSync(\"class Test{ name = 3; constructor(){}}\", {\r\n    plugins: [['@babel\/plugin-proposal-decorators', { legacy: true }], ['@babel\/plugin-proposal-class-properties']],\r\n    ast: true,\r\n    babelrc: false,\r\n    configFile: false,\r\n}).ast;\r\n```\r\nI also created `options.json` file containing `{\"sourceType\": \"module\"}`. However, after running the test I see `Cannot use import statement outside a module` error. Now I am trying to fix the error."],"labels":["i: needs triage"]},{"title":"[Bug]: using babel.config.js with cache.forever() still has significant performance impact due to expensive cache invalidation check","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on a fix?\n\n### How are you using Babel?\n\nbabel-loader (webpack)\n\n### Input code\n\nany project reproduces it\n\n### Configuration file name\n\nbabel.config.js\n\n### Configuration\n\nany configuration\n\n### Current and expected behavior\n\nbabel.config.js with api.cache(true) or api.cache.forever() is using the cache set in config\/files\/utils \r\n\r\nCache invalidation check here: https:\/\/github.com\/babel\/babel\/blob\/main\/packages\/babel-core\/src\/config\/files\/utils.ts#L15\r\nis being executed on each module require and the fileMtime check runs fs.statSync from Node.\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/packages\/babel-core\/src\/config\/files\/utils.ts#L29\r\n\r\nstatSync has a pretty expensive error handling routine https:\/\/github.com\/nodejs\/node\/blob\/e5c1fd7a2a1801fd75bdde23b260488e85453eb2\/lib\/fs.js#L1538\r\n\r\nOn a large codebase when using jest+babel calls to Node's `handleErrorFromBinding` and corresponding garbage collection on errors that Babel is not even checking took roughly 15% of CPU time of the entire run. \r\n\r\nI've also noticed that there are other uses of fileMtime even after switching config to json. If not running in watch mode, it's safe to memoize the function (or even use a limited size memory cache - something like https:\/\/www.npmjs.com\/package\/safe-memory-cache)\n\n### Environment\n\nany environment - the performance hit is in Node.js\n\n### Possible solution\n\n1. Quick solution: document that fact - more strongly encourage usage of babel.config.json instead of .js in the docs. Currently docs suggest caching it forever is the important change needed. It should strongly recommend using the json file and with env or overrides for the purpose of creating different configuration variants.\r\n\r\n2. Wider solution, but potentially a breaking change  (I'm not entirely sure at this point)\r\nMemoize the result instead of fileMtime (or remove it entirely) - effectively caching per process lifetime. \r\n\r\nI hacked some memoization into the fileMtime function and got a decent improvement - seemed larger than switching from .js to .json config file.\n\n### Additional context\n\nScreenshots from v8 profiler:\r\nOriginal situation with babel.config.js cached forever\r\n<img width=\"544\" alt=\"Screenshot 2021-12-21 at 12 31 25\" src=\"https:\/\/user-images.githubusercontent.com\/509375\/146924878-ffa1a28f-764c-46dd-9eb7-dbce3777e10c.png\">\r\n\r\n\r\nAfter switching to babel.config.json (still calls to the expensive stat functions left, but total time and GC impact is smaller)\r\n<img width=\"599\" alt=\"Screenshot 2021-12-21 at 12 27 35\" src=\"https:\/\/user-images.githubusercontent.com\/509375\/146924924-9adbe4fc-9613-4916-bd34-1abb82f3e037.png\">\r\n\r\nAdding a memoization hack eliminates further calls to expensive error handling.","comments":["Hey @naugtur! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["area: perf","pkg: core"]},{"title":"[Bug]: @babel\/traverse scope set the binding references","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n```\r\nlet a = 5;\r\na  = 6\r\n```\n\n### Configuration file name\n\nbabel.config.js\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nwhen use babel\/traverse the code ast .the scope has binding 'a',but bind.references is 0\u3002the variable when is only readed is not referenced to the binding ?\n\n### Environment\n\n System:\r\n    OS: macOS 10.15.5\r\n  Binaries:\r\n    Node: 16.6.1 - ~\/.nvm\/versions\/node\/v16.6.1\/bin\/node\r\n    Yarn: 1.22.5 - \/usr\/local\/bin\/yarn\r\n    npm: 7.20.3 - ~\/.nvm\/versions\/node\/v16.6.1\/bin\/npm\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @xukaijie111! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","If I recall correctly, we track reads in `references` and writes in `constantViolations`.","Good catch. I agree with OP. The LHS `a` in `a = 1` should be a referenced path, too.\r\n\r\nNote that in the spec `a` is an IdentifierRefernece descended from [AssignmentPattern](https:\/\/tc39.es\/ecma262\/#prod-AssignmentPattern). If I read correctly, if an Identifier is [referenced](https:\/\/github.com\/babel\/babel\/blob\/main\/packages\/babel-types\/src\/validators\/isReferenced.ts) in Babel's sense, it will be an IdentifierRefernece in the spec AND currently it can not descend from AssignmentPattern directly (Initializer and computed key is not considered directly). we should at least document the behaviour in that helper."],"labels":["i: enhancement","pkg: traverse (scope)"]},{"title":"[Bug]: @babel\/cli `--copy-files` `--ignore **\/**` can not work at the same time","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\n```js\r\nbabel src -d es --ignore src\/.umi\/ --copy-files\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\ncurrent: `src\/.umi` would be copied.\r\nexpected: ignored\n\n### Environment\n\n- @babel\/cli@7.16.0\r\n- node@v16.10.0\r\n- npm@7.24.0\r\n- macOS@12.0.1\r\n- Monorepo: no\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @joriewong! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Hi @joriewong , the meaning of `--ignore` means \"List of glob paths to **not** compile.\", `--no-copy-ignored` means \"Exclude ignored files when copying non-compilable files.\". \r\nSo if you don\u2019t want to copy the uncompiled code to the target directory you can use the following command:\r\n```sh\r\nbabel src -d es --ignore src\/.umi\/ --copy-files --no-copy-ignored\r\n```\r\n\r\nMaybe the docs [@babel\/cli](https:\/\/babeljs.io\/docs\/en\/babel-cli#ignore-files) should be updated.","@heiseshandian it's not working.","Hi, @joriewong, did you delete the previously generated es directory? @babel\/cli@7.16.0 works well on my computer.\r\n![image](https:\/\/user-images.githubusercontent.com\/7780463\/148719349-6cbec77e-ad5e-4679-abf8-d694df9f67ca.png)\r\n","@heiseshandian `--delete-dir-on-start` was using. you can try `--presets` to reproduce.","Hi, @joriewong , did some research on the code base, I have found that for `NON_COMPILABLE` files(which means these files can't be compiled by babel, such as markdown files and so on), @babel\/cli will copy it to the dest dir and ignore the `--no-copy-ignored` flag. For instance, there is a `foo.js` and a `bar.md` file on your `.umi` dir, when adding `--no-copy-ignored` flag, `foo.js` will not be copied to the dest dir, but `bar.md` will still be copied to the dest dir.\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/packages\/babel-cli\/src\/babel\/dir.ts#L90-L103\r\n```ts\r\nasync function handleFile(src: string, base: string): Promise<boolean> {\r\n  const written = await write(src, base);\r\n\r\n  if (\r\n    (cliOptions.copyFiles && written === FILE_TYPE.NON_COMPILABLE) ||\r\n    (cliOptions.copyIgnored && written === FILE_TYPE.IGNORED)\r\n  ) {\r\n    const filename = path.relative(base, src);\r\n    const dest = getDest(filename, base);\r\n    outputFileSync(dest, fs.readFileSync(src));\r\n    util.chmod(src, dest);\r\n  }\r\n  return written === FILE_TYPE.COMPILED;\r\n}\r\n```\r\n\r\nMaybe you can submit a feature request if you want to disable coping non-compilable files to the dest dir."],"labels":["i: needs triage"]},{"title":"[Bug]: traverse does not calculate scope in object deconstructor in catch clause","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n```js\r\nconst {transformSync} = require('@babel\/core');\r\n\r\nconst codeIn = `\r\n  try {\r\n    throw new Error('oops');\r\n  } catch ( {\r\n    message,\r\n    f = () => message\r\n  } ) {}\r\n`;\r\n\r\nconst {code} = transformSync(codeIn, {\r\n  plugins: [\r\n    () => ({\r\n      visitor: {\r\n        Identifier(path) {\r\n          if (!path.parentPath.isFunction()) return;\r\n          if (!path.scope.getBinding('message')) path.node.name += '_unbound';\r\n        }\r\n      }\r\n    })\r\n  ]\r\n});\r\n\r\nconsole.log(code);\r\n\/\/ ... f = () => message_unbound ...\r\n```\r\n\r\n### Configuration file name\r\n\r\nn\/a\r\n\r\n### Configuration\r\n\r\nn\/a\r\n\r\n### Current and expected behavior\r\n\r\nAs in example above:\r\n\r\n```js\r\ntry {\r\n  throw new Error('oops');\r\n} catch ( {\r\n  message,\r\n  f = () => message\r\n} ) {}\r\n```\r\n\r\nThis code is a little odd, but legal!\r\n\r\n`message` in `() => message` should be bound to the deconstructed property `message` of the error object.\r\n\r\nHowever, `path.scope.getBinding('message')` returns `undefined`.\r\n\r\n### Environment\r\n\r\n```\r\nSystem:\r\n  OS: macOS 10.15.7\r\nBinaries:\r\n  Node: 16.13.1 - ~\/.nvm\/versions\/node\/v16.13.1\/bin\/node\r\n  npm: 8.1.2 - ~\/.nvm\/versions\/node\/v16.13.1\/bin\/npm\r\nnpmPackages:\r\n  @babel\/core: ^7.16.0 => 7.16.0\r\n  @babel\/generator: ^7.16.0 => 7.16.0\r\n  @babel\/helper-module-transforms: ^7.16.0 => 7.16.0\r\n  @babel\/helper-plugin-utils: ^7.14.5 => 7.14.5\r\n  @babel\/parser: ^7.16.4 => 7.16.4\r\n  @babel\/plugin-transform-arrow-functions: ^7.16.0 => 7.16.0\r\n  @babel\/plugin-transform-modules-commonjs: ^7.16.0 => 7.16.0\r\n  @babel\/plugin-transform-react-jsx: ^7.16.0 => 7.16.0\r\n  @babel\/plugin-transform-strict-mode: ^7.16.0 => 7.16.0\r\n  @babel\/register: ^7.16.0 => 7.16.0\r\n  @babel\/traverse: ^7.16.3 => 7.16.3\r\n  @babel\/types: ^7.16.0 => 7.16.0\r\n  babel-jest: ^27.4.2 => 27.4.2\r\n  babel-plugin-dynamic-import-node: ^2.3.3 => 2.3.3\r\n  eslint: ^7.32.0 => 7.32.0\r\n  jest: ^27.4.3 => 27.4.3\r\n```\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\nI would be happy to work on a fix. Any pointers on where to look in the codebase would be appreciated.","comments":["Hey @overlookmotel! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","The culprit seems to be this condition:\r\nhttps:\/\/github.com\/babel\/babel\/blob\/2d989a983dc13c7682d65faa075c8a26d2f5b991\/packages\/babel-traverse\/src\/scope\/index.ts#L1131-L1136\r\n\r\nI tried adding a check for `!scope.path.isCatchClause()`, but that broke this test:\r\nhttps:\/\/github.com\/babel\/babel\/blob\/2d989a983dc13c7682d65faa075c8a26d2f5b991\/packages\/babel-traverse\/test\/fixtures\/rename\/catch-clause\/input.js#L1-L5\r\n\r\nI think to fix both a new `BindingKind` for catch params is needed.\r\n","We can register `\"param\"` binding for catch clause\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/a943f576d1f7181abc593f97b174fdcf8a6c421d\/packages\/babel-traverse\/src\/scope\/index.ts#L334\r\n\r\nAnd for declarations within the catch body, they will be registered in BlockStatement.\r\n\r\nI am not sure why it is registered as `let` and it seems that we don't have tests covering that, too.","Thanks for swift replies.\r\n\r\n@JLHwung \r\n\r\n> And for declarations within the catch body, they will be registered in BlockStatement.\r\n\r\nThis would be inconsistent with declarations in a function body, which are registered to the FunctionDeclaration \/ FunctionExpression.\r\n\r\ne.g.: `function f() { let x; return x; }` \r\n\r\nIf `path` is the identifier `x` in `return x`, `path.getBinding('x').scope.path.type === 'FunctionDeclaration'`.\r\n\r\nPersonally, I think that behavior is unintuitive - I would have expected it to be `'BlockStatement'`.\r\n\r\nCan you advise if that is desired behavior? If not, I'll make a PR to fix that before fixing behavior of params in CatchClause - so the two are consistent.","@overlookmotel You are right. We don't generate scope when BlockStatement is immediately nested in Function\/CatchClause,\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/94af0e5c629b63fa11512b2ea8a8ac81d11a9db5\/packages\/babel-types\/src\/validators\/isScope.ts#L14-L18\r\n\r\nso declarations within the catch body is registered in CatchClause.\r\n\r\n> I would have expected it to be 'BlockStatement'\r\n\r\nI agree with you. I guess merging BlockStatement with FunctionDeclaration is for performance: So we only generate one scope for function, instead of one for param \/ id and the other for block body."],"labels":["i: bug","pkg: traverse (scope)"]},{"title":"[Bug]: traverse calculates scope incorrectly for var in function expression with same name as var","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n```js\r\nconst {transformSync} = require('@babel\/core');\r\n\r\nfunction transformWithPlugin(code) {\r\n  return transformSync(code, {\r\n    plugins: [\r\n      () => ({\r\n        visitor: {\r\n          Identifier(path) {\r\n            const binding = path.scope.getBinding(path.node.name);\r\n            path.node.leadingComments = [{type: 'CommentBlock', value: binding.path.type}];\r\n          }\r\n        }\r\n      })\r\n    ],\r\n    retainLines: true\r\n  }).code;\r\n}\r\n\r\n\/\/ Correct\r\nconsole.log(transformWithPlugin('(function f() { let x = 1; return x; })'));\r\n\/\/ (function \/*FunctionExpression*\/f() {let \/*VariableDeclarator*\/x = 1;return (\/*VariableDeclarator*\/x);});\r\n\r\n\/\/ Wrong\r\nconsole.log(transformWithPlugin('(function x() { let x = 1; return x; })'));\r\n\/\/ (function \/*FunctionExpression*\/x() {let \/*FunctionExpression*\/x = 1;return (\/*FunctionExpression*\/x);});\r\n```\r\n\r\n### Configuration file name\r\n\r\nn\/a\r\n\r\n### Configuration\r\n\r\nn\/a\r\n\r\n### Current and expected behavior\r\n\r\nIn the example above, the first transform is correct:\r\n\r\n`(function f() { let x = 1; return x; })`\r\nis transformed to:\r\n`(function \/*FunctionExpression*\/f() {let \/*VariableDeclarator*\/x = 1;return (\/*VariableDeclarator*\/x);});`\r\n\r\n`path.scope.getBinding('x').path` points to the variable `let x`.\r\n\r\nBut if the function expression is named `x`, same as the var, it's incorrect (2nd transform):\r\n\r\n`(function x() { let x = 1; return x; })`\r\nis transformed to:\r\n`(function \/*FunctionExpression*\/x() {let \/*FunctionExpression*\/x = 1;return (\/*FunctionExpression*\/x);});`\r\n\r\nHere `path.scope.getBinding('x').path` erroneously points to `function x`.\r\n\r\nSame problem occurs if `let x` is replaced with `const x`, `var x`, `function x() {}` or `class x {}`.\r\n\r\n### Environment\r\n\r\n```\r\nSystem:\r\n  OS: macOS 10.15.7\r\nBinaries:\r\n  Node: 16.13.1 - ~\/.nvm\/versions\/node\/v16.13.1\/bin\/node\r\n  npm: 8.1.2 - ~\/.nvm\/versions\/node\/v16.13.1\/bin\/npm\r\nnpmPackages:\r\n  @babel\/core: ^7.16.0 => 7.16.0\r\n  @babel\/generator: ^7.16.0 => 7.16.0\r\n  @babel\/helper-module-transforms: ^7.16.0 => 7.16.0\r\n  @babel\/helper-plugin-utils: ^7.14.5 => 7.14.5\r\n  @babel\/parser: ^7.16.4 => 7.16.4\r\n  @babel\/plugin-transform-arrow-functions: ^7.16.0 => 7.16.0\r\n  @babel\/plugin-transform-modules-commonjs: ^7.16.0 => 7.16.0\r\n  @babel\/plugin-transform-react-jsx: ^7.16.0 => 7.16.0\r\n  @babel\/plugin-transform-strict-mode: ^7.16.0 => 7.16.0\r\n  @babel\/register: ^7.16.0 => 7.16.0\r\n  @babel\/traverse: ^7.16.3 => 7.16.3\r\n  @babel\/types: ^7.16.0 => 7.16.0\r\n  babel-jest: ^27.4.2 => 27.4.2\r\n  babel-plugin-dynamic-import-node: ^2.3.3 => 2.3.3\r\n  eslint: ^7.32.0 => 7.32.0\r\n  jest: ^27.4.3 => 27.4.3\r\n```\r\n\r\n### Possible solution\r\n\r\nNot specifically. I assume cause is that the scopes tracker is seeing the binding to function expression before the binding to `let x`.\r\n\r\n### Additional context\r\n\r\nI would be happy to work on a fix. Any pointers on where to look in the codebase would be appreciated.","comments":["Hey @overlookmotel! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Where can we write test for this issue?","> Where can we write test for this issue?\r\n\r\n?\r\n","@The-x-Theorist You can add a test to `packages\/babel-traverse\/test\/scope.js`. However I am afraid a proper fix for this issue may be a breaking change.\r\n\r\nThis issue is related to how Babel register bindings. In the OP's example\r\n\r\n```js\r\n(function x() { let x = 1; return x; })\r\n```\r\n\r\nThe first `x` is registered as a `local`-kind binding in the `function x...`'s scope, the `let x = 1` is registered as a `constantViolation` in the scope, which already has `x` bound. So `getBinding(\"x\")` returns the function id `x`. However, in this case the function body becomes the TDZ of the `let x` binding, in other words, if you inspect `x` before `let x`, `x` will not be the function, either. Effectively, `x` within the function body has been shadowed by the `x` binding.\r\n\r\nA simple fix may be to overwrite registered `local`-kind binding when we [see a new declaration](https:\/\/github.com\/babel\/babel\/blob\/94af0e5c629b63fa11512b2ea8a8ac81d11a9db5\/packages\/babel-traverse\/src\/scope\/index.ts#L775-L777), instead of registering constant violations. However, this approach can not handle the following example (neither can current main):\r\n\r\n```js\r\n(function x(y = x) { let x = 1; return x })\r\n```\r\n\r\nHence the `x` in `y = x` is a reference identifier to the `local`-kind `x` binding, while `x` in the function body referenced to another `x` binding. So the culprit is that we can't register two different bindings with the same name to one scope, because we merged the function scope and body scope.\r\n \r\nIn this example, a proper fix that I can come up with are one of:\r\n\r\n1) Register bindings in function body to the block statement. See also https:\/\/github.com\/babel\/babel\/issues\/14024#issuecomment-986707933. However it will break downstream usage such as `functionPath.scope.rename()` because we merged the BlockStatement and Function scope.\r\n\r\n2) Create a new binding storage to store bindings like function\/class expression id and duplicate all the binding methods.","@JLHwung Thanks for the extensive explanation. That makes sense.\r\n\r\nGiven that combining scopes for function params and function's body block is better for performance (as you say in https:\/\/github.com\/babel\/babel\/issues\/14024#issuecomment-987536484), option 2 seems like the better one.\r\n\r\nWould option 2 also be a breaking change?\r\n\r\nThat said, I wonder whether it's possible for a combined scope for params and body block to be correct in this edge case:\r\n\r\n```js\r\nfunction f(x, getParam = () => x) {\r\n  var x;\r\n  const initialX = x;\r\n  x = 2;\r\n  console.log(getParam(), initialX, x);\r\n}\r\nf(1); \/\/ Logs 1, 1, 2\r\n```\r\n\r\nThe two `x`s are separate vars. However, they aren't totally independent. You can't retain the same behaviour if you rename the param `x` and don't rename the var `x` the same too. It's very odd!\r\n\r\nDo you think this case requires separate scopes for function params and function body?","The edge case I mention above is discussed in https:\/\/github.com\/babel\/babel\/issues\/2471.","> 1. Register bindings in function body to the block statement. ... However it will break downstream usage such as functionPath.scope.rename() ...\r\n\r\nIf this option is chosen, then `scope.rename()` will need to be changed accordingly \u2014 i.e. if called on function-param scope, also look into the block scope for same-named local var and rename that as well; if called on block scope, also rename same-named param in parent scope.\r\n\r\n---\r\n\r\nHow would option 2. work? Wouldn't `scope.rename` need to be changed anyway, to rename both the param and var?\r\n","> How would option 2. work? Wouldn't `scope.rename` need to be changed anyway, to rename both the param and var?\r\n\r\nI don't *think* it would need to rename both function name and var. It'd behave same as if there's another var in upper scope with same name. This:\r\n\r\n```js\r\nfunction x() {\r\n  let x = 2;\r\n  return x;\r\n}\r\n```\r\n\r\nwould be treated the same as this:\r\n\r\n```js\r\nconst x = 1;\r\nfunction someOtherName() {\r\n  let x = 2;\r\n  return x;\r\n}\r\n```\r\n\r\nIn latter example, renaming `x` inside the function would not rename the `const x` outside the function too (from what little I understand of scope renaming anyway).","@overlookmotel you're right. I was misreading the function\/class ***expression id*** part. Now it makes sense, renaming the id won't touch params, nor local vars.\r\n\r\nNB: that last example does not actually illustrate the issue, because function declaration binds `x\/someOtherName` in outer scope. Function expression is different, there the name is bound inside:\r\n```js\r\nvar f = function x(g = x) {\r\n  let x = 2;\r\n  return x;\r\n}\r\n```\r\n","@lightmare OK great. Glad I'm not missing something. And yes you're right - it's only function expressions which are the problem, not function declarations. My example was not illustrative.\r\n\r\nNB Class declarations I think *are* affected though, as the class ID referenced *within the class* is a local binding, separate from the binding outside the class (which, unlike the binding inside the class, is equivalent to let not const).\r\n\r\n@JLHwung Can you comment on whether you think option 2 above would be a breaking change? I don't know well enough how common plugins use scope to know whether making this change would break things.","@overlookmotel I think although the second approach could be a non-breaking approach. Let's say we add `functionBodyBindings` to a function scope and create i.e. `renameOnlyFunctionBodyBindings` for `scope.rename` and other related methods. It complicates the API design as in this case we are merging two scope: function scope and body scope and the second approach introduces API variant for these two.\r\n\r\nI lean to the first approach, where we have function scope hosting function expression id, parameter bindings, and a function body scope where we have top-level (immediately nested) variable and lexical bindings. I am aware of the unwanted impact if we split every Babel 7 function scope to a function scope plus body scope. \r\n\r\n## Fix for my example\r\nThe spec ([step 27](https:\/\/tc39.es\/ecma262\/#sec-functiondeclarationinstantiation)) requires a new Environment Record (loosely corresponds to Babel scope) when [hasParameterExpression](https:\/\/tc39.es\/ecma262\/#sec-static-semantics-containsexpression) of function is true, which includes computed keys in object pattern and assignment patterns.\r\n\r\nI think we can minimize the impact here, by creating a body scope only when it is necessary to do so, specifically when the following conditions are both met:\r\n\r\n- a top level var\/lexical declaration shadows a binding in parameter scope\r\n- the shadowed binding has reference paths in parameters\r\n\r\nFor example, \r\n\r\n```js\r\n(function x(y = x) { let x = 1; })\r\n```\r\n\r\nwe have two scopes:\r\n\r\n```\r\nScope {\r\n  path: function ...\r\n  bindings: {\r\n    x: Binding { kind: \"local\", referencePaths: [NodePath { node: Identifier }] }\r\n    y: Binding { kind: \"param\" ... }\r\n  }\r\n}\r\n```\r\n\r\n```\r\nScope {\r\n  path: NodePath { node: BlockStatement }\r\n  bindings: {\r\n    x: Binding { kind: \"let\" }\r\n  }\r\n}\r\n```\r\n\r\nand these examples also have two scopes:\r\n\r\n```js\r\nfunction f(g, { [g]: h }) { let g; }\r\nfunction g(...[h = g]) { var g; }\r\n```\r\n\r\nIn other words, the body scope is created only when we are _necessary_ to differentiate these two bindings. The var\/lexical declarations are now registered as a constant violation. We have relatively low usage of `constantViolations` outside of `@babel\/traverse`: Currently affected will be `transform-parameters` and `transform-block-scoping`.\r\n\r\n## Fix for OP's example\r\n\r\nWith this breaking change, we can now fix the original issue and a similar derived example\r\n\r\n```js\r\n(function x() { let x = 1; return x; })\r\n(function x() { var x = 1; return x; })\r\n(function f(x) { let x = 1; return x; })\r\n```\r\n\r\nAlthough in all cases `x = 1` is a constant violation, we can overwrite the `local`\/`param`-binding `x` because the first binding is effectively not observable by users. We have done similar adjustments when a function id is shadowed by a param. (https:\/\/github.com\/babel\/babel\/pull\/13842\/files#diff-1eada791e422d5c106405549e5dc11c4f3f1db0ba6c395a750e3dda404982a21)\r\n\r\nNote that it does not apply to `(function f(x) { var x = 1; return x; })`, the `x` param binding is observable.","Can I ask (and I'm sure everyone does constantly!) do we have a rough ETA for Babel 8?\r\n\r\nIf it's going to be a while, I'll postpone work on this for now, but if it's imminent I'll try to get a fix sorted before the release.","It will be a while, the first prerelease will probably be in a few months.","Would it be viable to implement this now in Babel 7, but only enable the new logic if an option to `traverse()` is set? That option could be `false` by default in Babel 7, so not a breaking change, but would become default (and compulsory) behavior in Babel 8.\r\n\r\nWhat I have in mind is that option would fix all the issues relating to not enough scopes to accommodate all vars - this issue, #14024 and #2471.\r\n\r\nIf so, I'd be happy to work on it now. If not (and I hope this comes across as honesty rather than some kind of absurd threat!) I may not ever get around it, as I'll likely have to implement workarounds in my own library to do the same thing long before Babel 8 comes out. Please let me know what you think.","any update?"],"labels":["i: bug","pkg: traverse (scope)"]},{"title":"[Bug]: `@babel\/register` has incorrect `sourceMaps` default settings","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@babel\/register or @babel\/node\r\n\r\n### Input code\r\n\r\nAny code.\r\n\r\n### Configuration file name\r\n\r\nbabel.config.js\r\n\r\n### Configuration\r\n\r\n```js\r\nmodule.exports = {\r\n  sourceMaps: undefined\r\n};\r\n```\r\n\r\n### Current and expected behavior\r\n\r\n**Current Behavior**\r\n\r\n`@babel\/register` in [this line](https:\/\/github.com\/babel\/babel\/blob\/master\/packages\/babel-register\/src\/node.js#L64) sets the default to `\"both\"`:\r\n\r\n`sourceMaps: opts.sourceMaps === undefined ? \"both\" : opts.sourceMaps`\r\n\r\n**Expected Behavior**\r\n\r\n[According to the documentation](https:\/\/babeljs.io\/docs\/en\/options#sourcemaps), the default should be `false`.\r\n\r\n\r\n### Environment\r\n\r\n@babel\/register: 7.10.1\r\n\r\n### Possible solution\r\n\r\nChange code to:\r\n\r\n```\r\nsourceMaps: opts.sourceMaps === undefined ? false : opts.sourceMaps\r\n```\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @Domiii! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","We should update the `@babel\/register` [docs](https:\/\/babeljs.io\/docs\/en\/babel-register) to say that it overwrites the default value. The reason we enable them by default is you don't have access to the compiled sources, so the only way to make sense of errors is via source maps.","@nicolo-ribaudo Right, i came across the same problem. `source-maps` are a must. Agreed that it is a documentation issue.","@nicolo-ribaudo I would recommend, also adding such divergence (`register` being different from the rest) to [the configuration docs](https:\/\/babeljs.io\/docs\/en\/options#sourcemaps), since most people would not consider the idea that configuration is suddenly divergent (because divergence happens so rarely)."],"labels":["pkg: register","i: docs"]},{"title":"output perf: avoid redundant array copies (plugin-transform-spread)","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #13861 \r\n| Patch: Bug Fix?          | :heavy_check_mark: \r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      | some new helpers, do those count?\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  | only internal, in benchmark devdeps\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\n### 1. bug fix: spreading sparse array variable\r\nAn accidental side effect of this revamp is that it fixes #13861. (test included)\r\n\r\n### 2. perf: spreading `arguments`\r\nPreviously `Array.p.slice` was used to convert `[...arguments]` to array, but `Array.p.push` works faster.\r\n\r\n```\r\narray-spread-arguments baseline: 16_773 ops\/sec \u00b10.41% (0.06ms)\r\narray-spread-arguments current: 33_122 ops\/sec \u00b10.33% (0.03ms)\r\n```\r\n<details>\r\n<summary>benchmark transform<\/summary>\r\n\r\n```js\r\n\/\/ array-spread-arguments baseline\r\nfunction arrayOf() {\r\n  return Array.prototype.slice.call(arguments);\r\n}\r\n\r\nfunction work() {\r\n  return arrayOf(\"bacon\", \"egg\", \"spam\");\r\n}\r\n```\r\n```js\r\n\/\/ array-spread-arguments current\r\nfunction arrayOf() {\r\n  var _sprd;\r\n\r\n  return (_sprd = []).push.apply(_sprd, arguments), _sprd;\r\n}\r\n\r\nfunction work() {\r\n  return arrayOf(\"bacon\", \"egg\", \"spam\");\r\n}\r\n```\r\n<\/details>\r\n\r\n\r\n### 3. perf: spreading single array in call\r\nA call such as `foo(...bar)` was transformed into `foo.apply(void 0, _toConsumableArray(bar))`.\r\n`_toConsumableArray` returns a copy without holes. But if `bar` is already an array, there is no need to make a copy, even if it is sparse: `foo.apply` does not respect holes. At first I simply replaced `_toConsumableArray` with `_toArray`, but that helper was written for destructuring and gives a misleading error message when `bar` is not iterable. So I ended up adding a new helper.\r\n\r\n```\r\ncall-spread-sparse-array baseline: 7_221 ops\/sec \u00b10.52% (0.138ms)\r\ncall-spread-sparse-array current: 12_735 ops\/sec \u00b10.33% (0.079ms)\r\n```\r\n\r\n<details>\r\n<summary>benchmark transform<\/summary>\r\n\r\n```js\r\n\/\/ call-spread-sparse-array baseline\r\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\r\n\r\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || \/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\r\n\r\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\r\n\r\n\/\/ defer initialization to prevent Babel guessing variable type,\r\n\/\/ because if it can guess, the plugin emits Array-specific code\r\nvar bar;\r\nbar = new Array(3);\r\n\r\nfunction foo() {\r\n  return arguments.length;\r\n}\r\n\r\nfunction work() {\r\n  return foo.apply(void 0, _toConsumableArray(bar));\r\n}\r\n```\r\n```js\r\n\/\/ call-spread-sparse-array current\r\nfunction _spreadCoerceToArray(src) { return Array.isArray(src) ? src : _iterableToArray(src) || _unsupportedIterableToArray(src) || _nonIterableSpread(); }\r\n\r\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || \/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\r\n\r\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\r\n\r\n\/\/ defer initialization to prevent Babel guessing variable type,\r\n\/\/ because if it can guess, the plugin emits Array-specific code\r\nvar bar;\r\nbar = new Array(3);\r\n\r\nfunction foo() {\r\n  return arguments.length;\r\n}\r\n\r\nfunction work() {\r\n  return foo.apply(void 0, _spreadCoerceToArray(bar));\r\n}\r\n```\r\n<\/details>\r\n\r\n### 4. perf: calls with multiple arguments and spread\r\nPreviously calls like `foo(\"ham\", \"spam\", ...arguments, \"ham\", \"spam\");` were transformed such that each spread element was copied to a new array, and then all the chunks `concat`enated and `apply`ed. Assuming function calls usually get only a few arguments (even after spread), I think it makes more sense to accumulate them incrementally into a single temporary array; that is use a sequence of `temp.push` and `append(temp, iterable)` (new helper) calls.\r\n\r\n```\r\ncall-spread-with-arguments baseline: 9_219 ops\/sec \u00b11.86% (0.108ms)\r\ncall-spread-with-arguments current: 21_542 ops\/sec \u00b10.44% (0.046ms)\r\n```\r\n\r\n<details>\r\n<summary>benchmark transform<\/summary>\r\n\r\n```js\r\n\/\/ call-spread-with-arguments baseline\r\nfunction foo() {\r\n  return arguments.length;\r\n}\r\n\r\nfunction bar() {\r\n  return foo.apply(void 0, [\"ham\", \"spam\"].concat(Array.prototype.slice.call(arguments), [\"ham\", \"spam\"]));\r\n}\r\n\r\nfunction work() {\r\n  return bar(\"bacon\", \"egg\", \"spam\");\r\n}\r\n```\r\n```js\r\n\/\/ call-spread-with-arguments current\r\nfunction foo() {\r\n  return arguments.length;\r\n}\r\n\r\nfunction bar() {\r\n  var _sprd;\r\n\r\n  return foo.apply(void 0, ((_sprd = [\"ham\", \"spam\"]).push.apply(_sprd, arguments), _sprd.push(\"ham\", \"spam\"), _sprd));\r\n}\r\n\r\nfunction work() {\r\n  return bar(\"bacon\", \"egg\", \"spam\");\r\n}\r\n```\r\n<\/details>\r\n\r\n### 5. arrays with multiple spread elements\r\nPreviously, in array expression like `[x, ...a, y, ...b]` both `a` and `b` were each copied into their own array without holes, and all the pieces then concatenated. However, if there are no holes in the outer array expression, we don't need to copy `a` and `b` separately if they are already arrays, but instead use a `concat`-like helper that fills holes.\r\n\r\n```\r\narray-spread-multiple baseline: 3_042 ops\/sec \u00b10.52% (0.329ms)\r\narray-spread-multiple current: 5_618 ops\/sec \u00b10.26% (0.178ms)\r\n```\r\n\r\n<details>\r\n<summary>benchmark transform<\/summary>\r\n\r\n```js\r\n\/\/ array-spread-multiple baseline\r\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\r\n\r\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || \/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\r\n\r\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\r\n\r\nvar bar = [\"egg\",, \"spam\"];\r\n\r\nfunction work(a = bar) {\r\n  return [].concat(_toConsumableArray(a), _toConsumableArray(a), _toConsumableArray(a));\r\n}\r\n```\r\n```js\r\n\/\/ array-spread-multiple current\r\nfunction _concatArrayLike() { for (var ai = 0, an = arguments.length, dn = 0; ai < an;) dn += arguments[ai++].length; var dest = new Array(dn), di = 0; for (ai = 0; ai < an;) for (var src = arguments[ai++], si = 0, sn = src.length; si < sn;) dest[di++] = src[si++]; return dest; }\r\n\r\nfunction _spreadCoerceToArray(src) { return Array.isArray(src) ? src : _iterableToArray(src) || _unsupportedIterableToArray(src) || _nonIterableSpread(); }\r\n\r\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || \/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\r\n\r\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\r\n\r\nvar bar = [\"egg\",, \"spam\"];\r\n\r\nfunction work(a = bar) {\r\n  return _concatArrayLike(_spreadCoerceToArray(a), _spreadCoerceToArray(a), _spreadCoerceToArray(a));\r\n}\r\n```\r\n<\/details>\r\n\r\n```\r\narray-spread-large-array baseline: 101 ops\/sec \u00b11.39% (9.915ms)\r\narray-spread-large-array current: 188 ops\/sec \u00b10.32% (5.326ms)\r\n```\r\n\r\n<details>\r\n<summary>benchmark transform<\/summary>\r\n\r\n```js\r\n\/\/ array-spread-large-array baseline\r\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\r\n\r\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || \/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\r\n\r\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\r\n\r\nvar bar = Array.from({\r\n  length: 456000\r\n}, (_, i) => i);\r\n\r\nfunction foo(a) {\r\n  return [0].concat(_toConsumableArray(a), [1], _toConsumableArray(a), [2]);\r\n}\r\n\r\nfunction work() {\r\n  return foo(bar).length;\r\n}\r\n```\r\n```js\r\n\/\/ array-spread-large-array current\r\nfunction _concatArrayLike() { for (var ai = 0, an = arguments.length, dn = 0; ai < an;) dn += arguments[ai++].length; var dest = new Array(dn), di = 0; for (ai = 0; ai < an;) for (var src = arguments[ai++], si = 0, sn = src.length; si < sn;) dest[di++] = src[si++]; return dest; }\r\n\r\nfunction _spreadCoerceToArray(src) { return Array.isArray(src) ? src : _iterableToArray(src) || _unsupportedIterableToArray(src) || _nonIterableSpread(); }\r\n\r\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || \/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\r\n\r\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\r\n\r\nvar bar = Array.from({\r\n  length: 456000\r\n}, (_, i) => i);\r\n\r\nfunction foo(a) {\r\n  return _concatArrayLike([0], _spreadCoerceToArray(a), [1], _spreadCoerceToArray(a), [2]);\r\n}\r\n\r\nfunction work() {\r\n  return foo(bar).length;\r\n}\r\n```\r\n<\/details>\r\n\r\nThere's a caveat, though. If none of the spread elements are arrays, the new transform does the same amount of work as the old one \u2014 copy each iterable into an array, and then concatenate those \u2014 but the old transform uses built-in `concat`, whereas the new transform uses `concatArrayLike` helper, which is inevitably slower.\r\n\r\n```\r\narray-spread-large-set baseline: 93.68 ops\/sec \u00b11.29% (11ms)\r\narray-spread-large-set current: 86.81 ops\/sec \u00b10.37% (12ms)\r\n```\r\n\r\n<details>\r\n<summary>benchmark transform<\/summary>\r\n\r\n```js\r\n\/\/ array-spread-large-set baseline\r\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\r\n\r\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || \/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\r\n\r\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\r\n\r\nvar bar = Array.from({\r\n  length: 456000\r\n}, (_, i) => i);\r\nvar set = new Set(bar);\r\n\r\nfunction foo(a) {\r\n  return [0].concat(_toConsumableArray(a), [1], _toConsumableArray(a), [2]);\r\n}\r\n\r\nfunction work() {\r\n  return foo(set).length;\r\n}\r\n```\r\n```js\r\n\/\/ array-spread-large-set current\r\nfunction _concatArrayLike() { for (var ai = 0, an = arguments.length, dn = 0; ai < an;) dn += arguments[ai++].length; var dest = new Array(dn), di = 0; for (ai = 0; ai < an;) for (var src = arguments[ai++], si = 0, sn = src.length; si < sn;) dest[di++] = src[si++]; return dest; }\r\n\r\nfunction _spreadCoerceToArray(src) { return Array.isArray(src) ? src : _iterableToArray(src) || _unsupportedIterableToArray(src) || _nonIterableSpread(); }\r\n\r\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || \/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\r\n\r\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\r\n\r\nvar bar = Array.from({\r\n  length: 456000\r\n}, (_, i) => i);\r\nvar set = new Set(bar);\r\n\r\nfunction foo(a) {\r\n  return _concatArrayLike([0], _spreadCoerceToArray(a), [1], _spreadCoerceToArray(a), [2]);\r\n}\r\n\r\nfunction work() {\r\n  return foo(set).length;\r\n}\r\n```\r\n<\/details>\r\n\r\n```\r\narray-spread-small-set baseline: 2_212 ops\/sec \u00b10.52% (0.452ms)\r\narray-spread-small-set current: 2_183 ops\/sec \u00b10.8% (0.458ms)\r\n```\r\n\r\n<details>\r\n<summary>benchmark transform<\/summary>\r\n\r\n```js\r\n\/\/ array-spread-small-set baseline\r\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\r\n\r\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || \/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\r\n\r\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\r\n\r\nvar bar = Array.from({\r\n  length: 123\r\n}, (_, i) => i);\r\nvar set = new Set(bar);\r\n\r\nfunction foo(a) {\r\n  return [0].concat(_toConsumableArray(a), [1], _toConsumableArray(a), [2]);\r\n}\r\n\r\nfunction work() {\r\n  return foo(set).length;\r\n}\r\n```\r\n```js\r\n\/\/ array-spread-small-set current\r\nfunction _concatArrayLike() { for (var ai = 0, an = arguments.length, dn = 0; ai < an;) dn += arguments[ai++].length; var dest = new Array(dn), di = 0; for (ai = 0; ai < an;) for (var src = arguments[ai++], si = 0, sn = src.length; si < sn;) dest[di++] = src[si++]; return dest; }\r\n\r\nfunction _spreadCoerceToArray(src) { return Array.isArray(src) ? src : _iterableToArray(src) || _unsupportedIterableToArray(src) || _nonIterableSpread(); }\r\n\r\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || \/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\r\n\r\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\r\n\r\nvar bar = Array.from({\r\n  length: 123\r\n}, (_, i) => i);\r\nvar set = new Set(bar);\r\n\r\nfunction foo(a) {\r\n  return _concatArrayLike([0], _spreadCoerceToArray(a), [1], _spreadCoerceToArray(a), [2]);\r\n}\r\n\r\nfunction work() {\r\n  return foo(set).length;\r\n}\r\n```\r\n<\/details>\r\n\r\n### 6. potential follow-up changes, not included in this PR\r\n\r\nHelper `toConsumableArray` is made obsolete (and consequently `arrayWithoutHoles` as well). It is still referenced from a now-unused code path in `babel-traverse: Scope.toArray()` but it's no longer invoked from `babel-plugin-transform-spread`. I guess these can be removed in Babel 8.\r\n\r\nHelper `iterableToArrayLimit(o, n)` could delegate to new helper `maybeAppendIterable([], o, n)`.\r\nHelper `unsupportedIterableToArray(o, n)` could delegate to new helper `maybeAppendUnsupportedIterable([], o, n)`.\r\n\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/14015\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\n\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/50142\/","TODO notes for self:\r\n\r\n- [ ] in call spread, when all the parts are guaranteed array-like (such as in [this test case](https:\/\/github.com\/babel\/babel\/pull\/14015\/files#diff-1f0b4c20194935c63aa476852b7e6c908615c3525678d24c596de72d48e87bcb)), I should keep using the built-in `[].concat` (holes don't matter to `f.apply`), rather than introduce helpers.\r\n","@lightmare Not really related to this PR, but are you on slack\/twitter\/matrix\/somewhere-else-where-I-can-write-to-you? If not, could you write to me at nicolo.ribaudo@gmail.com? (I promise it's not bad news :sweat_smile:)"],"labels":["PR: Output optimization :microscope:"]},{"title":"Allow template strings as JSX attributes","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nI would really like to modify the JSX parser to support template strings as attributes (alongside double-quoted and single-quoted strings). It's a fairly trivial change that IMO just improves the consistency of the language and more importantly removes the annoyance of having to wrap template strings in curly braces. So, instead of this:\r\n\r\n```javascript\r\n<Element name = { `${firstName} ${lastName}` } key = { `index-${index}` } \/>\r\n```\r\n\r\nYou could do this:\r\n\r\n```javascript\r\n<Element name = `${firstName} ${lastName}` key = `index-${index}` \/>\r\n```\r\n\r\nIt's unclear to me whether this needs some sort of special \"JSX approval\" or something though, so wanted to check on that too.\n\n### Describe the solution you'd like\n\nDescribed above.\n\n### Describe alternatives you've considered\n\nN\/A\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @tolmasky! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","\/cc @babel\/react ","Dupe of https:\/\/github.com\/facebook\/jsx\/issues\/25? I think this is something that has to be decided in the JSX spec itself.","Unfortunately the JSX Draft Spec appears to be abandonware (the repo hasn't been updated in 3 years, the issues don't really get responded to anymore, and there's a fair deal of frustration there, see for example [here](https:\/\/github.com\/facebook\/jsx\/issues\/119), but most issues seem to eventually devolve to this).\r\n\r\nAnyways, if getting any sort of movement in that repo is a blocker to making any changes to JSX in babel then we should go ahead and close this issue, I don't really think its realistic to convince Facebook to hand over JSX to ECMA or whatever people are begging them to do there now.\r\n\r\nI wouldn't actually mind JSX being this static thing that's controlled entirely by an outside private party that seems no longer interested (but bizarrely largely implemented and maintained by outside open source contributors) if not for the fact that its also not possible to trivially add any of one's own syntax plugins to Babel. If I could just make \"my-jsx\" to experiment on for ourselves and possibly someday release and \"compete\", then that would be super satisfactory. However, Babel really goes out of its way with a belt-and-suspenders multi-layered approach to make any form of syntax extension impossible without forking (not only does Babel make the Parser classes private, it also then double checks to make sure you aren't passing new plugin names, etc.). If we could just get rid of these checks then it would be a lot easier to experiment with new syntax without having to maintain a separate Babel fork. As it stands though, the only real way of accomplishing anything like this is through the one allowed jsx plugin.","As mentioned in the linked thread, the outstanding issue in the JSX spec was to resolve which encoding should be used. Nobody ever wrote up a coherent plan for it.\n\nOther strings in JSX use HTML encoding like `<foo bar=\"&amp;\">` instead of the JS string encoding `<foo bar=\"\\\"\">`.\n\nI assume that you would want this to be different in this case and use JS encoding instead. (In fact, IMO, JSX should make a breaking change to always use JS encoding and breaking compatibility with HTML.)\n\nIt just needs to be spelled out and intentionally decided not to be future compatible with HTML if it adds template literal syntax. Perhaps input from HTML folks could be good too.\n\nNobody bothered to do the research and write down a concrete proposal and bring in this feedback.","Hi @sebmarkbage ,\r\n\r\nThanks for the response. I think part of the problem is that there's no clear process or indication as to what it takes to make it into the spec (and I believe nothing has ever made it into the spec from outside of Facebook, but I might be wrong about that, although there is a clear comment in one of the issues where it is explicitly stated that one of JSX's main selling points is its \"stability\"). All this comes together to make it hard to know how much is necessary to research\/prove. For example, even here I'm not sure what \"bringing HTML folks\" really means... like bringing in WHATWG people on this kind of feature addition? Especially considering that this is a binary decision (there's no real thing to \"solve\" here, just kind of a subjective decision to make, which I imagine no one really feels like they are entitled to since its not their project and are looking for direction). \r\n\r\nThat being said, if all that was really missing for the last 6 years is one person to make a strong argument either way, I am happy to post the below there if you think its sufficient (but I'll keep it out if the issue is stale and not worth working on):\r\n\r\n1. It should use JS encoding, matching the behavior it would have if you just added curly braces around it.\r\n2. I understand that the counter-argument is that `attribute = \"&amp;\"` behaves differently than `attribute = { \"&amp;\" }`\r\n3. However, I would argue that that is only important because it is matching an existing syntax construction in HTML. There is no `` attribute = `contents` `` syntax construction in HTML (well, technically writing `` attribute = `contents` `` would get interpreted as `` attribute = \"`contents`\" ``), so there's no confusing \"mis-matching\" behavior here where someone could copy a reasonable HTML snippet into JSX and have it behave bizarrely different due to encoding issues, and the same is true vice-versa.\r\n4. IMO this actually gives us an elegant non-breaking transitional solution to your idea here:\r\n  > IMO, JSX should make a breaking change to always use JS encoding and breaking compatibility with HTML.)\r\n\r\n   There is now an easy way to get JS-encoded string attributes, just use back-ticks, even if there's no \"templating\" taking place: `` attribute = `&amp;` `` won't HTML encode. This gives people a simple way of escape-hatch for dealing with entity issues, won't break any old code since that construction wasn't allowed before, and still matches HTML behavior if you use non-template strings. Going forward you can just optionally say that its best practice to use template-string-attributes if you want to move the community away from HTML-encoding, prior to a big breaking change that has all attributes behave this way. Seems win\/win.\r\n\r\n","I prefer the following codes.\r\n```jsx\r\n<Element name = {firstName}{lastName} key = {\"index-\"}{index} \/>\r\n```\r\n\r\nBecause we already have something similar in jsx.\r\n\r\n```jsx\r\n<div>\r\n  {firstName}{lastName}\r\n<\/div>\r\n```"],"labels":["i: discussion","i: enhancement","area: jsx"]},{"title":"Runtime transpiling of JSX code in an external .js file when the html file loads in to the browser, with out the need to separately compile the JSX code (with babel) ..","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nI have an existing project in which JavaScript is used for the front-end. Now I am moving some functionality to React JS and using JSX (to define elements).\r\n\r\nMy JSX code is in app.js file. Right now I have to separately compile my JSX code using babel and copy the generated .js file in to my working folder. (Code snippet below)\r\n\r\n<body>\r\n\t<script src=\"app.js\"><\/script>\r\n<\/body> \r\n\r\nI am not using NPM for developing my web application. \r\nI want the compilation of JSX to happen in the runtime when html file is executed.\n\n### Describe the solution you'd like\n\nTranspiling of JSX code to JS can happen when the html file is loaded in the browser. (I do not know implementation details).\r\n\r\nIf I have my JSX code in app.js, the below code should work.\r\n<body>\r\n\t<script type=\"text\/babel\" src=\"app.js\"><\/script>\r\n<\/body>\r\n\r\nRight now it only works if the JSX code is put inside the <script> tag (as below).\r\n\r\n<body>\r\n\t<script type=\"text\/babel\">\r\n\t\t\/\/ my JSX code goes here\r\n\t<\/script>\r\n<\/body>\r\n\n\n### Describe alternatives you've considered\n\nAlternatively, file with .jsx extension be identified as file having JSX code. When the browser loads the html file, the .jsx extension files are converted to .js files and included in the html code.\r\n\r\nThis approach is helpful in development process.\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @opencodespace! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement","i: needs triage"]},{"title":"[Bug]: May babel packages list dependencies that should be peer dependencies","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\nIt appears that the intent is to have plugins\/helpers\/etc reference \"mainline\" packages like `@babel\/types` and `@babel\/generator` as peerDependencies, but this isn't followed super strictly. This is causing us some issues as our install is a little more complicated than just doing `npm install` top-level, leading to duplicated packages in our tree. Here is a non-exhaustive list of packages that have this issue, and the packages they list as dependencies, that we have experienced:\r\n\r\n1. `@babel\/helper-builder-binary-assignment-operator-visitor` - `@babel\/types`\r\n2. `@babel\/helper-explode-assignable-expression` - `@babel\/types`\r\n3. `@babel\/helper-replace-supers` - `@babel\/types`, `@babel\/traverse`\r\n4. `@babel\/helper-function-name` - `@babel\/template`, `@babel\/types`\r\n5. `@babel\/helper-get-function-arity` - `@babel\/types`\r\n6. `@babel\/helper-annotate-as-pure` - `@babel\/types`\r\n7. `@babel\/helper-optimise-call-expression` - `@babel\/types`\r\n8. `@babel\/helper-split-export-declaration` - `@babel\/types`\r\n9. `@babel\/helper-skip-transparent-expression-wrappers` - `@babel\/types`\r\n10. `@babel\/helper-module-imports` - `@babel\/types`\r\n11. `@babel\/plugin-transform-jsx` - `@babel\/types`\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nCurrently, these packages are listed as true dependencies, and thus if you the resolution algorithm doesn't dedupe, you end up with multiple copies in your source tree. I'd like that not to be the case.\r\n\r\n### Environment\r\n\r\n- Babel 7.16.0\r\n\r\n### Possible solution\r\n\r\nI'd like to just make these all peer dependencies.\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @tolmasky! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","All those packages should have a `peerDependency` on `@babel\/core` and import `types`\/`traverse` from there. For `@babel\/plugin-transform-jsx` we could fix it now, but all the others need to wait for Babel 8.","Would moving them to peerDependencies now in the meanwhile have any negative consequences? If my understanding is correct, if they appear deeply in a tree the result would be identical due to the normal deduping logic, and if they were top level, you'd also get the same behavior due to npm's default behavior to include peer dependencies. Only people like me running with \"--omit=peer\" would get see any difference."],"labels":["i: needs triage"]},{"title":"[Bug]: Optional chaining unnecessarily memoized ","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n```js\r\nfoo?.bar()\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nCurrently compiled to\r\n```js\r\nvar _foo;\r\n\r\n(_foo = foo) == null ? void 0 : _foo.bar();\r\n```\r\nbut should be compiled to\r\n```js\r\nfoo == null ? void 0 : foo.bar();\r\n```\n\n### Environment\n\nbabel playground\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @Austaras! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","This is expected. Accessing global variable can have side effect:\r\n\r\n```js\r\nvar counter = 0;\r\nObject.assign(globalThis, {\r\n  get foo() {\r\n    counter++;\r\n    return { bar() {} }\r\n  }\r\n});\r\nfoo?.bar();\r\nexpect(counter).toBe(1);\r\n```","That would be a much rare case. So should babel add another assumption like 'pureGlobalThisGetter' or just assume global getter is pure when 'pureGetter' is set?","<s>Respecting the `pureGetters` assumption looks good to me. Do you want to open a PR?<\/s>\r\n\r\nThe `pureGetters` assumption can not cover the case, even if the getter is pure. The fact that everytime when `foo` is accessed, a new object is returned does prove that it should be memoized.","Yes ","> Respecting the `pureGetters` assumption looks good to me. Do you want to open a PR?\r\n> \r\n> The `pureGetters` assumption can not cover the case, even if the getter is pure. The fact that everytime when `foo` is accessed, a new object is returned does prove that it should be memoized.\r\n\r\nThat would apply to the docuemented case too consider\r\n\r\n```js\r\nlet a = { get b() { return function() {} } };\r\n\r\na.b?.();\r\n```\r\n\r\nsince every access to b will cause a new function to be constructed","Yeah, I agree that this can go behind `pureGetters`. The common definition of \"pure function\" is a function that:\r\n- Given the same arguments return the same result\r\n- Doesn't have side effects\r\n\r\n`let a = { get b() { return function() {} } };` can be considered as non-pure, because `a.b !== a.b` (it violates the first point, if we define \"same\" as `===`).\r\n","Maybe we can introduce a new assumption like `noGlobalThisGetters`?","Another question: should long optional chain like `a?.b?.c?.d` be cached?","> Maybe we can introduce a new assumption like `noGlobalThisGetters`?\r\n\r\nNormally maximum Getters will be not globalThis, Making an assumption only for globalGetters can make more sense?"],"labels":["i: enhancement","area: assumptions"]},{"title":"[Bug]: Destructuring to a Super Field is not Supported yet.","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\n```js\r\nclass Foo {\r\n  constructor(props) {\r\n    ;([x, ...super.client] = props);\r\n  }\r\n}\r\n```\r\nHere is the Babel [REPL](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=false&corejs=false&spec=false&loose=false&code_lz=MYGwhgzhAEBiD29oG8BQ1rHgOwgFwCcBXYPeAgCgAcD4qIBKFdDaAbgoG0APAGmgB0QiESoBTAgNABLMdjwBdaAF5oNOozYsAvqm1A&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=unambiguous&lineWrap=true&presets=env%2Cflow&prettier=false&targets=&version=7.16.3&externalPlugins=&assumptions=%7B%7D)\n\n### Configuration file name\n\nbabel.config.js\n\n### Configuration\n\n```js\r\nmodule.exports = function (api) {\r\n  api.cache(true);\r\n  const sourceType= \"unambiguous\";\r\n  const presets = [\r\n      [\"@babel\/preset-env\", { \"modules\": false}]\r\n  ];\r\n  const plugins = [  ];\r\n\r\n  return {\r\n    sourceType,\r\n    presets,\r\n    plugins\r\n  };\r\n}\r\n```\n\n### Current and expected behavior\n\n### Current\r\nI use babel to trans, get a SyntaxError:\r\n```bash\r\nSyntaxError: \/D\/N2ttFuzz\/corpus\/DiffTest\/es6-pre-tests\/11674.js: \r\nDestructuring to a super field is not supported yet.\r\n  1 | class Foo {\r\n  2 |   constructor(props) {\r\n> 3 |     ;([x, ...super.client] = props);\r\n    |              ^^^^^^^^^^^^\r\n  4 |   }\r\n  5 | }\r\n  6 |\r\n    at File.buildCodeFrameError (\/D\/N2ttFuzz\/src\/node_modules\/@babel\/core\/lib\/transformation\/file\/file.js:249:12)\r\n    at NodePath.buildCodeFrameError (\/D\/N2ttFuzz\/src\/node_modules\/@babel\/traverse\/lib\/path\/index.js:139:21)\r\n    at Object.destructureSet (\/D\/N2ttFuzz\/src\/node_modules\/@babel\/helper-replace-supers\/lib\/index.js:167:23)\r\n    at Object.handle (\/D\/N2ttFuzz\/src\/node_modules\/@babel\/helper-member-expression-to-functions\/lib\/index.js:434:31)\r\n    at Object.Super (\/D\/N2ttFuzz\/src\/node_modules\/@babel\/helper-replace-supers\/lib\/index.js:77:11)\r\n    at NodePath._call (\/D\/N2ttFuzz\/src\/node_modules\/@babel\/traverse\/lib\/path\/context.js:53:20)\r\n    at NodePath.call (\/D\/N2ttFuzz\/src\/node_modules\/@babel\/traverse\/lib\/path\/context.js:40:17)\r\n    at NodePath.visit (\/D\/N2ttFuzz\/src\/node_modules\/@babel\/traverse\/lib\/path\/context.js:100:31)\r\n    at TraversalContext.visitQueue (\/D\/N2ttFuzz\/src\/node_modules\/@babel\/traverse\/lib\/context.js:103:16)\r\n    at TraversalContext.visitSingle (\/D\/N2ttFuzz\/src\/node_modules\/@babel\/traverse\/lib\/context.js:77:19) {\r\n  code: 'BABEL_TRANSFORM_ERROR'\r\n}\r\n```\r\n### Expected Behavior\r\nThe following ss5 compliant code is converted from [SWC](https:\/\/github.com\/swc-project\/swc) and can run correctly.\r\n```js\r\nfunction _classCallCheck(instance, Constructor) {\r\n    if (!(instance instanceof Constructor)) {\r\n        throw new TypeError(\"Cannot call a class as a function\");\r\n    }\r\n}\r\nfunction _get(target, property, receiver) {\r\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\r\n        _get = Reflect.get;\r\n    } else {\r\n        _get = function _get(target, property, receiver) {\r\n            var base = _superPropBase(target, property);\r\n            if (!base) return;\r\n            var desc = Object.getOwnPropertyDescriptor(base, property);\r\n            if (desc.get) {\r\n                return desc.get.call(receiver);\r\n            }\r\n            return desc.value;\r\n        };\r\n    }\r\n    return _get(target, property, receiver || target);\r\n}\r\nfunction _getPrototypeOf(o) {\r\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\r\n        return o.__proto__ || Object.getPrototypeOf(o);\r\n    };\r\n    return _getPrototypeOf(o);\r\n}\r\nfunction _superPropBase(object, property) {\r\n    while(!Object.prototype.hasOwnProperty.call(object, property)){\r\n        object = _getPrototypeOf(object);\r\n        if (object === null) break;\r\n    }\r\n    return object;\r\n}\r\nvar Foo = function Foo(props) {\r\n    \"use strict\";\r\n    _classCallCheck(this, Foo);\r\n    ;\r\n    var ref;\r\n    ref = props, x = ref[0], _get(_getPrototypeOf(Foo.prototype), \"client\", this) = ref.slice(1), ref;\r\n};\r\n```\n\n### Environment\n\n- babel \r\n- - \u251c\u2500\u2500 @babel\/cli@7.16.0\r\n- - \u251c\u2500\u2500 @babel\/preset-env@7.16.0\r\n- Node: [v16.11.1]\r\n- npm version [8.0.0]\r\n- os [ubuntu 20.04]\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nI run babel use cmd as follows\r\n```bash\r\nnpx babel poc.js -o res\/poc.js\r\n```","comments":["Hey @clhiker! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","SWC's output is wrong: `_get(_getPrototypeOf(Foo.prototype), \"client\", this) = ref.slice(1)` is not valid JavaScript (could you report this bug to them \ud83d\ude4f).","Hi \ud83d\udc4b !\r\n\r\nNeed help there? Let me know if I could help. ^^","As a workaround, you can enable the [`constantSuper` assumption](https:\/\/babeljs.io\/docs\/en\/assumptions#constantsuper):\r\n\r\n```js\r\n{\r\n    sourceType,\r\n    presets,\r\n    plugins,\r\n    assumptions: { constantSuper: true }\r\n}\r\n```","@tony-go Yes! Do you have any idea about how it could be transpiled?","Hi @JLHwung @nicolo-ribaudo :)\r\n\r\nHope you're doing well and safe \ud83d\ude4c ?\r\n\r\nI understand the intent of this code from a user's point of view.\r\n\r\nFrom a technical aspect, I understand that we have to look into the `__proto__` in a recursive way to find the property back. (Tell me If I'm wrong \ud83d\ude48)\r\n\r\n```\r\nFoo.__proto__.client\r\n```\r\n\r\nIt's all that I know, from my naive POV ahahaha.\r\n\r\nIt's why I found that this issue could be a good challenge (with a bit of guidance)"],"labels":["i: bug"]},{"title":"[Bug]: Rewrite Iterative Method doesn't Work after Conversion","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\n```js\r\n\/\/ Take the array and the original iterative method\r\nvar arr = [1,2,3];\r\nvar iteratorMethod = arr[Symbol.iterator];\r\n\r\n\/\/ monitor method\r\nvar monitor = {\r\n  [\"return\"](value) {\r\n    console.log(\" >> RETURN\", this && this.name || '');\r\n    return {value, done: true};\r\n  }\r\n}\r\n\r\n\/\/ Rewrite iterative method\r\narr[Symbol.iterator] = function() {\r\n  var tor = iteratorMethod.call(this);\r\n  return Object.assign(tor, monitor);\r\n}\r\n\r\n\/\/ test\r\nfor (let i of arr) {\r\n  if (i === 2) break;\r\n  console.log(\" >>\", i);\r\n}\r\n```\r\nHere is [babel repl](https:\/\/babel.docschina.org\/repl\/#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&spec=false&loose=false&code_lz=PTAEBUEMGsFNQC4At6QE5sgT1JAdgCaIqgD2aAlgOYV6QA2oFCsmCFAbvALazKkEAUB3S4MoALygA2gEYANACZ5AZgC6AbmGjmrSAnIBZPkgGSxaaQGUs3AEal6AOl1tymwYJChupPM3IfEwFtNB8_ALCpAG9BUBkAIjQ-AFc0PAS1AAoRehTYAEpQWPj4gGM_AGdHWCd6UioshNAAPhbQACUAUXAAVQ6AOQT5YgpK0AAyCdHKpzpeUAAfRdAAclWCrVLQZIQ0vGLc_JGCP1gALkQ0fIBfLdAbwUevMA7YAHdKFiYWNk4eYJCdCWGz2RwuX76dzmABmKTwZXYfiyRRKoBEYQMUR-eixxn4BCcZQY9CyyDGmziO1S6VAAHk7AArWCIpyQSqVah4MnkEa-fxYynPbwsSoIQQwwJZeh8JhkGEWVFUigKrIUSQSKSKIp2ZIwe4VPDVGV1BpNVotYZMIVAA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=unambiguous&lineWrap=true&presets=env%2Ces2015%2Cenv&prettier=false&targets=Electron-1.8&version=7.16.2&externalPlugins=)\n\n### Configuration file name\n\nbabel.config.js\n\n### Configuration\n\n```js\r\nmodule.exports = function (api) {\r\n  api.cache(true);\r\n  const sourceType= \"unambiguous\";\r\n  const presets = [\r\n      [\"@babel\/preset-env\", { \"modules\": false}]\r\n  ];\r\n  const plugins = [  ];\r\n\r\n  return {\r\n    sourceType,\r\n    presets,\r\n    plugins\r\n  };\r\n}\r\n```\n\n### Current and expected behavior\n\ncurrent behavior:\r\nwhen I use node run the code transed by babel, I get\r\n```bash\r\n >> 1\r\n```\r\nthe expected result is  (it's the origin code result run by node )\r\n```bash\r\n >> 1\r\n >> RETURN\r\n```\r\nIn other word, I expect rewrite iterative method take effect.\n\n### Environment\n\n- babel \r\n- - \u251c\u2500\u2500 @babel\/cli@7.16.0\r\n- - \u251c\u2500\u2500 @babel\/preset-env@7.16.0\r\n- Node: [v16.11.1]\r\n- npm version [8.0.0]\r\n- os [ubuntu 20.04]\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nI run babel use cmd as follows\r\n```bash\r\nnpx babel poc.js -o res\/poc.js\r\n```","comments":["Hey @clhiker! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","> var arr = [1,2,3];\r\n\r\nBabel assumes the iterators of an array literal is always the builtin definition so that it can generate less code for the common array for-of loop. As a workaround, you can apply an identity function so that Babel will respect custom iterator method:\r\n\r\n```js\r\nconst identity = x => x;\r\nvar arr = identity([1,2,3]);\r\n```","But I find if setting babel config as preset-react, the result code run by node is \r\n```bash\r\n >> 1\r\n >> RETURN\r\n```\r\nHere is the [babel repl](https:\/\/babel.docschina.org\/repl\/#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&spec=false&loose=false&code_lz=PTAEBUEMGsFNQC4At6QE5sgT1JAdgCaIqgD2aAlgOYV6QA2oFCsmCFAbvALazKkEAUB3S4MoALygA2gEYANACZ5AZgC6AbmGjmrSAnIBZPkgGSxaaQGUs3AEal6AOl1tymwYJChupPM3IfEwFtNB8_ALCpAG9BUBkAIjQ-AFc0PAS1AAoRehTYAEpQWPj4gGM_AGdHWCd6UioshNAAPhbQACUAUXAAVQ6AOQT5YgpK0AAyCdHKpzpeUAAfRdAAclWCrVLQZIQ0vGLc_JGCP1gALkQ0fIBfLdAbwUevMA7YAHdKFiYWNk4eYJCdCWGz2RwuX76dzmABmKTwZXYfiyRRKoBEYQMUR-eixxn4BCcZQY9CyyDGmziO1S6VAAHk7AArWCIpyQSqVah4MnkEa-fxYynPbwsSoIQQwwJZeh8JhkGEWVFUigKrIUSQSKSKIp2ZIwe4VPDVGV1BpNVotYZMIVAA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=unambiguous&lineWrap=true&presets=env%2Creact%2Cenv&prettier=false&targets=Electron-1.8&version=7.16.2&externalPlugins=)","This is expected. Preset-react only transforms JSX, so the for-of is not transpired."],"labels":["i: needs triage"]},{"title":"[Bug]: allowImportExportEverywhere has inconsistent behavior","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n`allowImportExportEverywhere` seems to take on multiple duties, not only allowing one to place the import statement everywhere, but also allowing import and export to appear in \"script\" contexts. However, it does *not* allow `import.meta` to appear in \"script\" contexts. There appear to be two separate features that should be separated into two separate boolean options:\r\n\r\n1. `allowImportExportEverywhere`: *if* import and export are allowed, then allow them to be treated as statements instead of top level `ModuleItem`s.\r\n2. `allowImportExport`: Unconditionally turn on import and export features, regardless of the `sourceType`.\r\n\r\nAside from making the behavior of `allowImportExportEverywhere` more consistent and predictable, this also gives the user of the API the ability to have more control over the kinds of warnings and errors they want to use. In our case, we would use `allowImportExport` and not `allowImportExportEverywhere`, for similar reasons as to why you would want to use `allowImportExportEverywhere`, but not failing on `import.meta`.\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nSee above.\n\n### Environment\n\nBabel 7, node.\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @tolmasky! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","Related: https:\/\/github.com\/acornjs\/acorn\/pull\/1019. The option `allowImportExportEverywhere` has been there since [day one of acorn](https:\/\/github.com\/acornjs\/acorn\/commit\/980845994016f67f7c4b4ac606355477e487d441). Babel parser inherits the option interface.\r\n\r\nI think we can allow `import.meta` in scripts via `allowImportExportEverywhere`.\r\n\r\nOn the `allowImportExport`, I think we may need more use cases. Here are some workarounds based on how you use Babel parser:\r\n\r\n- If you are using `.parse()`, you can pass `allowImportExportEverywhere: true` only when `sourceType: \"module\"`.\r\n- If you are using `@babel\/core` and you have specific file pattern (e.g. `*.mjs`) to determine the `sourceType`, you can provide different parser options to different sourceType\r\n```js\r\n{\r\n  overrides: [\r\n    { test: \"*.mjs\", sourceType: \"module\", parserOpts: { allowImportExportEverywhere: true } },\r\n    { test: \"*.cjs\", sourceType: \"script\" }\r\n  ]\r\n}\r\n```\r\n","> Related: acornjs\/acorn#1019. The option allowImportExportEverywhere has been there since day one of acorn. Babel parser inherits the option interface.\r\n\r\nSure, but that was before `import.meta` was even proposed. In that original commit, the behavior was much more predictable and deterministic: \"all import related features would be allowed everywhere\". Only 2 years later was `import.meta` added, at which point this feature became \"undefined\" with respect to `import.meta`, and the mere emergent behavior of the existing code gave us today's behavior, which is that `allowImportExportEverywhere` \"turns on\" import and export, but does not \"turn on\" `import.meta`. I think even if we don't want to split these two features up for historical reasons or whatever, it still doesn't make a ton of sense to have a mode that unconditionally turns on an arbitrary subset of features of ESM regardless of sourceType.\r\n\r\n> If you are using .parse(), you can pass allowImportExportEverywhere: true only when sourceType: \"module\".\r\n\r\nI am experiencing this behavior specifically when I am using it with sourceType: \"script\".  I suppose an (unsatisfying) solution is to say \"well then, don't do that\", but in that case Babel should be more upfront and throw an error when using `allowImportExportEverywhere` with sourceType: \"script\". Again, this just goes back to the fact that the behavior when using `allowImportExportEverywhere` is very hard to understand when using sourceType \"script\". I think either \"it turns on ALL import-related syntax\" or \"it throws an error\" would at least not lead to surprising behavior.\r\n\r\nAn example of my use case is specifically that I want the nodes to be parsed in script contexts so I can overlay my own fancy UI to show the user that these aren't allowed. If I don't use `allowImportExportEverywhere`, babel errors out early and I can't show anything afterward. If I do use `allowImportExportEverywhere`, I still get errors when using `import.meta`, and I don't like relying on `errorRecovery` since its behaviors aren't well documented and I have no guarantees as to the nature of recoverable errors, etc (especially in later versions). If `allowImportExportEverywhere` simply allowed `import.meta`, then this task would be trivial, whenever I encounter an `import`, `export`, or `import.meta` node, I highlight that section of the code. Again, I can do 2\/3s of this today since `allowImportExportEverywhere` allows `import` and `export`.\r\n\r\nIf we are just concerned with \"breaking\" existing uses of `allowImportExportEverywhere`, then I'd be fine with a different set of options, but separate from that I'm just hoping we agree that this option is confusing, as it does in fact do *2 things*, turning on *some* of the features in every context, and *also* allowing them in any block, but respecting the source context for other import features. Additionally, hopefully confirming that the two options I presented seem like they would offer much more straight forward and predictable behavior, as they take into account the current state of the feature (vs. how it was defined in 2015), and recognizes the two separate dimensions it could affect (turning the feature on vs. changing its allowed place in the file).\r\n"],"labels":["i: enhancement","pkg: parser"]},{"title":"Support Frozen Namespaces in babel-plugin-transform-modules-commonjs","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nI am attempting to migrate my team's large codebase to Jest's [experimental ECMAScript module runtime](https:\/\/jestjs.io\/docs\/ecmascript-modules). Many source files currently import namespaces and instrument their named exports with spies:\r\n\r\n```\r\nimport * as foo from '.\/foo'\r\njest.spyOn(foo, 'bar')\r\n```\r\n\r\nIn conforming esModule implementations, this is a runtime error, since namespace exotic objects should be frozen. Babel has historically [not supported this](https:\/\/github.com\/babel\/babel\/issues\/4361) due to performance concerns. However, the ability to bring my test suite into compliance with the ECMAScript module spec ahead of migrating the Jest runtime \u2014\u00a0and the ability to stop new non-conforming code from being written \u2014\u00a0would be very helpful.\n\n### Describe the solution you'd like\n\nAn option that can be passed to `@babel\/plugin-transform-modules-commonjs` to emit frozen namespace objects; if necessary at the expense of performance.\n\n### Describe alternatives you've considered\n\nA wholesale migration to Jest without an opportunity to gradually shake down our test suite for conformance issues would be excessively complicated.\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @AprilArcus! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite."],"labels":["i: enhancement","i: needs triage"]},{"title":"[Bug]: Bodyless methods AST is different from `@typescript-eslint\/parser`","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n```js\r\nclass A {\r\n  x();\r\n  x() {}\r\n}\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n```jsonc\r\n{\r\n  plugins: [\"estree\", \"typescript\"]\r\n}\r\n```\n\n### Current and expected behavior\n\nFor the first `x();` we generate a `FunctionExpression` node without the `.body` property, while `@typescript-eslint\/parser` generates a `TSEmptyBodyFunctionExpression` node. It's probably better to align with them, so that `FunctionExpression`s always have a body.\r\n\r\nAlso, when it comes to function declarations we already do something similar (`TSDeclareFunction` instead of `FunctionDeclaration`).\n\n### Environment\n\n- `@babel\/parser` 7\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\nThis is a breaking change, it needs to wait for Babel 8.","comments":["Good first issue maybe?"],"labels":["pkg: parser","area: typescript","area: estree"]},{"title":"Make comment node to normal node like others ","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nThe current comment is a normal node, it cannot be traversed.\r\n\r\n**leadingComments** and **trailingComments** behave very strangely.\r\n\r\nthe next node is `leadingComments` is the same as the previous node's `trailingComments`.\r\n\r\n```js\r\nconst exp1 = 1 + 2 \/\/ foo\r\n\r\n\/\/ new line\r\nconst exp2 = 3 + 4 \/\/ bar\r\n```\r\n\r\n![\u622a\u5c4f2021-10-24 13 21 02](https:\/\/user-images.githubusercontent.com\/9758711\/138581960-30445b9f-0f6e-4f94-9cc6-546931ab82b6.png)\r\n\r\n\r\nIf it is a normal node, there will be no such problem.\r\n\r\n### Why am I concerned about this issue?\r\n\r\nI'm writing a custom generator. Regarding how to generate annotated code, I found that the AST is not clear enough\n\n### Describe the solution you'd like\n\nComments should be the same as other nodes(optional)\r\n\r\n```json\r\n[\r\n\t  {\r\n\t    \"type\": \"VariableDeclaration\"\r\n\t    ...\r\n\t  },\r\n\t  {\r\n\t    \"type\": \"CommentLine\"\r\n\t    ...\r\n\t  },\r\n\t  {\r\n\t    \"type\": \"VariableDeclaration\"\r\n\t    ...\r\n\t  }\r\n]\r\n```\n\n### Describe alternatives you've considered\n\nnone\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @axetroy! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","The problem is that comments can go anywhere. For example, how would you represent `1 + \/* x *\/ 2`?\r\n\r\nAlso, the AST is about the program structure: comembts are exactly like whitespace and don't have any meaning (from a compiler\/interpreter point of view).","> I'm writing a custom generator.\r\n\r\nIn JavaScript comments are whitespaces which have no semantic meaning. If you are developing a custom language where comments yield observable behaviour, you may need an CST parser.\r\n\r\n> the next node is leadingComments is the same as the previous node's trailingComments.\r\n\r\nSee https:\/\/github.com\/babel\/babel\/blob\/main\/packages\/babel-parser\/ast\/comment-attachment.md for the definitions of leading comments and trailing comments."],"labels":["i: enhancement","i: needs triage"]},{"title":"Consider breaking optimizations to `@babel\/types`","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on this feature?\r\n\r\nFrom https:\/\/github.com\/babel\/babel\/pull\/13843#pullrequestreview-782688935:\r\n\r\n@jridgewell\r\n> Before merging, can we discuss whether mutating `BUILD_KEYS` is actually an intentional API? For the Babel 8 breaking changes, we could stop doing this and perform much faster node building by specializing each builder function. Eg, `t.identifer(name)` can be (a little more than) `function identifier(name) { return { type: 'Identifier', name } }`.\r\n>\r\n> Re: https:\/\/github.com\/babel\/babel\/pull\/13843#issuecomment-944638130, https:\/\/github.com\/babel\/babel\/pull\/13843#issuecomment-944728040\r\n\r\n@nicolo-ribaudo \r\n> We support swapping the parser and the generator, but not the other packages.\r\nYou can handle custom AST modifications by changing `VISITOR_KEYS`.\r\n>\r\n> On the other hand, I don't see why someone would want to change `BUILDER_KEYS` (you can just directly create the node without using the builder function).\r\n\r\n@JLHwung\r\n> > On the other hand, I don't see why someone would want to change BUILDER_KEYS (you can just directly create the node without using the builder function).\r\n>\r\n> In our codebase we don't mutate `BUILDER_KEYS`. I think we can expand builder keys in babel-types from Babel 8 and leave a note that the `BUILDER_KEYS` export is for reference only, it does not change the builder behavior.\r\n>\r\n> On `VISITOR_KEYS`, I think we can offer an `overrideVisit(originalVisit)` API for those mutating `VISITOR_KEYS`: So we can expand `VISITOR_KEYS` in `babel-traverse`, too. It should remove the slow object access due to dynamic property access on different AST nodes. [TS expands visitor keys](https:\/\/github.com\/microsoft\/TypeScript\/blob\/fd6552a3c2fdfe92afd88ccf6616ec02946e7d9e\/src\/compiler\/parser.ts#L76), too.","comments":[],"labels":["pkg: types","babel 8"]},{"title":"[Bug]: array spread transform doesn't always fill holes","body":"### \ud83d\udcbb\n\n- [X] Would you like to work on a fix?\n\n### How are you using Babel?\n\nProgrammatic API (`babel.transform`, `babel.parse`)\n\n### Input code\n\n[REPL](https:\/\/babel.dev\/repl#?browsers=&build=&builtIns=false&corejs=false&spec=false&loose=false&code_lz=MYewdgzgLgBAhjAvDA2gGjQJgLoG4BQ-KAdKXHjAPSUwCWYoATowKbCwAUoDcsAJiBYQwAclgAzWgBspMABYgpQgJSESpdFmwVqMJq3aFxIEB1LE4y3FRr62nOAAdHUgJ4xJMiPMUr8x03NNHCsbPRBmexgOACMAV1g4ZjhXAHVaKAUEgAlfbzAQWDAWFj5S1SA&debug=false&forceAllTransforms=false&shippedProposals=true&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=script&lineWrap=false&presets=env&prettier=false&targets=&version=7.15.8&externalPlugins=&assumptions=%7B%7D)\r\n\r\nin particular this part:\r\n```js\r\nconst a = [,,2];\r\n\r\n[...a]; \/\/ incorrect (concat doesn't fill holes)\r\n```\r\n\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\ncurrent output:\r\n```js\r\nvar a = [,, 2];\r\n[].concat(a); \/\/ incorrect (concat doesn't fill holes)\r\n```\r\n\r\nexpected output:\r\n```js\r\nvar a = [,, 2];\r\n_arrayWithoutHoles(a); \/\/ or something to that effect\r\n```\r\n\n\n### Environment\n\nIIRC there used to be a \"create issue directly from REPL\" button, but I can't find it.\r\n\n\n### Possible solution\n\nPending... I discovered this while rewriting parts of the spread plugin, but won't have much time this week to finish it.\r\n\n\n### Additional context\n\nFound issue #12935 that is somewhat related, but was closed without a fix.\r\n\r\nWhen babel assumes something is an array (whether by checking variable type, or by `iterableIsArray: true`), that doesn't mean it has no holes.\r\n","comments":["Hey @lightmare! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","I'd like to work on this issue, But where to begin with?","@The-x-Theorist There are two culprits. One for the case of `iterableIsArray` assumption:\r\nhttps:\/\/github.com\/babel\/babel\/blob\/f731522125dbd5582187135bca4ebb02a9e6ae52\/packages\/babel-plugin-transform-spread\/src\/index.ts#L19-L25\r\nAnother for the case with no assumption:\r\nhttps:\/\/github.com\/babel\/babel\/blob\/f731522125dbd5582187135bca4ebb02a9e6ae52\/packages\/babel-traverse\/src\/scope\/index.ts#L637-L640\r\n\r\nI'm slowly rewriting parts of plugin-transform-spread logic, and am fixing this along the way. I created this issue just in case I forget\/fail to get back to it ;)\r\n"],"labels":["i: bug"]},{"title":"perf(traverse): generate faster code for `arguments -> Array` conversion","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | none\r\n| Patch: Bug Fix?          | no\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | only existing transform outputs updated\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  | `@babel\/benchmark` devdeps :heavy_plus_sign: chalk\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\nChanges the AST generated by `@babel\/traverse.Scope.toArray` when applied to `identifier(\"arguments\")`.\r\n\r\nInstead of `Array.prototype.slice.call(arguments)`, return `((tmp = []).push.apply(tmp, arguments), tmp)`.\r\n\r\nIncluded node micro benchmark:\r\n```\r\nbaseline: 2_149 ops\/sec \u00b10.38% (0.465ms)\r\ncurrent: 5_217 ops\/sec \u00b10.37% (0.192ms)\r\n```\r\n\r\nIn [Firefox benchmark](https:\/\/www.measurethat.net\/Benchmarks\/ShowResult\/232433) it appears marginally faster.\r\nIn [Chromium benchmark](https:\/\/www.measurethat.net\/Benchmarks\/ShowResult\/232435) it's so fast that I suspect it's completely optimized away. No clue how to measure it properly.\r\n\r\nI have another PR in the works for `plugin-transform-spread` that will obviate this change for that particular plugin, but `scope.toArray` can still be used from other places, right?\r\n\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/13857\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\n\n","comments":["This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/13857\/builds\/179752) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit ce26429fe71442f53642450fde722beb22653bca:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-qp9to)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-m711x)| Configuration |\n","Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/49242\/","> I have another PR in the works for plugin-transform-spread that will obviate this change for that particular plugin, but scope.toArray can still be used from other places, right?\r\n\r\nI think that it's the only way where we use it: if we don't need it anymore we will remove it in Babel 8.","Sorry for the noise. I'm going to turn this into a draft for the time being. Will probably use some pieces in plugin-transform-spread, but so far it appears I'll stay away from `scope.toArray` because it makes not-so-useful assumptions.\r\n"],"labels":["PR: Performance :running_woman:"]},{"title":"[Bug]: process.on(\"SIGINT\", () => proc.kill(\"SIGINT\"));","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@babel\/cli\r\n\r\n### Input code\r\n\r\nprocess.on(\"SIGINT\", () => proc.kill(\"SIGINT\"));\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nThis is not causing my SIGINT callback to fire (babel-node.js)\r\nprocess.on(\"SIGINT\", () => proc.kill(\"SIGINT\"));\r\n\r\nMeanwhile, if I replace it with this\r\nprocess.on(\"SIGINT\", () => process.exit(1));\r\n\r\nIt actually works\r\n\r\n### Environment\r\n\r\nSystem:\r\n    OS: Windows 10 10.0.19043\r\n\r\n  Binaries:\r\n    Node: 16.7.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    npm: 7.20.3 - C:\\Program Files\\nodejs\\npm.CMD\r\n\r\n  npmPackages:\r\n    @babel\/cli: ^7.15.7 => 7.15.7\r\n    @babel\/core: ^7.15.8 => 7.15.8\r\n    @babel\/node: ^7.15.8 => 7.15.8\r\n    @babel\/preset-env: ^7.15.8 => 7.15.8\r\n    babel-loader: ^8.2.2 => 8.2.2\r\n    webpack: ^5.57.1 => 5.57.1\r\n\r\n### Possible solution\r\n\r\nI don't know if it's safe to do only process.exit(1), if it is I can make a pull request if you guys want\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @NicholasBertazzon! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.","The `SIGINT` signal is request of termination. It can be captured by the delivered process, which can determine if it should exit or not.\r\n\r\n> process.on(\"SIGINT\", () => proc.kill(\"SIGINT\"));\r\n\r\nI think the current behavior is fine. Babel node just forward the signal and do nothing. It is up to the sub-process to interpret any signals.\r\n\r\nIf you want to kill the subprocess immediately, you can send a `SIGKILL` signal. But that is not recommended because the process does not get any chance to close opening files."],"labels":["i: question"]},{"title":"add api for async module resolution","body":"### \ud83d\udcbb\n\n- [x] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\n[linaria](https:\/\/github.com\/callstack\/linaria\/) is using babel and webpack to extract css-in-js at build time.\r\n\r\nwebpack provides an [api to resolve modules](https:\/\/webpack.js.org\/api\/loaders\/#thisresolve) based on the current webpack config.\r\n\r\nlinaria is [connecting](https:\/\/github.com\/callstack\/linaria\/blob\/c49df269ebbbc956d43720b007a92f9f865662c5\/packages\/webpack5-loader\/src\/index.ts#L59-L70) babels module resolution with the webpack module resolution\r\n\r\nunfortunately this breaks when using `nextjs` as next js ships with an [async module resolution](https:\/\/github.com\/vercel\/next.js\/issues\/29410)\n\n### Describe the solution you'd like\n\n[@babel\/core](https:\/\/babeljs.io\/docs\/en\/babel-core) `transform`, `transformSync` and `transformAsync` could allow to provide a custom module resolver e.g.:\r\n\r\n```js\r\nbabel.transform(\"code();\", {\r\n  resolver: (path, callback) => { \/*... *\/ }\r\n}, function(err, result) {\r\n  result.code;\r\n  result.map;\r\n  result.ast;\r\n});\r\n```\r\n\n\n### Describe alternatives you've considered\n\n- we could try to ensure that all nextjs plugins resolve modules synchronously: [vercel\/next.js\/issues\/29410](https:\/\/github.com\/vercel\/next.js\/issues\/29410)\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @jantimon! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\""],"labels":["i: enhancement","i: needs triage"]},{"title":"Improve message for `StrictNumericEscape`","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n```js\r\nconst randomText = 'lewb{+^PN_6-l 8eK2eqB:jn^YFgGl;wuT)mdA9TZlf 9}?X#P49`x\"@+nLx:BH5p{5_b`S\\'E8\\0{A0l\"(62`TIf(z8n2arEY~]y|bk,6,FYf~rGY*Xfa00q{=fdm=4.zVf6#\\'|3S!`pJ3 6y02]nj2o4?-`1v$mudH?Wbw3fZ]a+aE\\'\\'P4Q(6:NHBry)L_&\/7v]0<!7<kw~gLc.)\\'ajS>\\0~y\\8PZ*|-BRY&m%UaCe\\'3A,N?8&wbOP}*.O<47rnPzxO=4\"*|[%A):;E)Z6!V&x!1*OprW-*+q<F$6|864~1HmYX@J#Nl1j1`!$Y~j^`j;PB2qpe[_;.+vJGnE3) yo&5qRI~WHxK~r%+\\'P>Up&=P6M<kDdpSL#<Ur\/[NN0qI3dFEEy|>_VGx0O\/VOvPEez:7C58a^.N,\"Rxc|a6C[i$3QC_)~x!wd+ZMtYsGF&?';\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nI don't think it's a bug, but I didn't see a better issue template.\r\n\r\nWhen I try to parse this code with huge string, the parser throws a message [\"The only valid numeric escape in strict mode is '\\\\0'.\"](https:\/\/github.com\/babel\/babel\/blob\/6818b22dc0b1defcf39f6b876070d9ec5f8c4e46\/packages\/babel-parser\/src\/parser\/error-message.js#L187), I understand there is a code frame for it, I should see where the invalid character is, but in this case, the line is too long, it breaks in terminal, I didn't find it at first.\r\n\r\nI was wondering if we can print the `\\8` in message, so I can easily search for it.\r\n\r\nThis is a real world case https:\/\/github.com\/sindresorhus\/boxen\/pull\/65\/files\r\n\r\n### Environment\r\n\r\nI don't think this info is needed.\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @fisker! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","We could automatically wrap code in error messages at 100 or 80 chars, so that terminals won't wrap and won't move the `^`. If you read it on a large screen, the current error is fine:\r\n```\r\n\/repl.js: The only valid numeric escape in strict mode is '\\0'. (1:244)\r\n\r\n> 1 | const randomText = 'lewb{+^PN_6-l 8eK2eqB:jn^YFgGl;wuT)mdA9TZlf 9}?X#P49`x\"@+nLx:BH5p{5_b`S\\'E8\\0{A0l\"(62`TIf(z8n2arEY~]y|bk,6,FYf~rGY*Xfa00q{=fdm=4.zVf6#\\'|3S!`pJ3 6y02]nj2o4?-`1v$mudH?Wbw3fZ]a+aE\\'\\'P4Q(6:NHBry)L_&\/7v]0<!7<kw~gLc.)\\'ajS>\\0~y\\8PZ*|-BRY&m%UaCe\\'3A,N?8&wbOP}*.O<47rnPzxO=4\"*|[%A):;E)Z6!V&x!1*OprW-*+q<F$6|864~1HmYX@J#Nl1j1`!$Y~j^`j;PB2qpe[_;.+vJGnE3) yo&5qRI~WHxK~r%+\\'P>Up&=P6M<kDdpSL#<Ur\/[NN0qI3dFEEy|>_VGx0O\/VOvPEez:7C58a^.N,\"Rxc|a6C[i$3QC_)~x!wd+ZMtYsGF&?';\r\n    |                                                                                                                                                                                                                                                     ^\r\n  2 |\r\n```","Hi Guys \ud83d\udc4b \r\n\r\nIf I get it right we want something like:\r\n\r\n```bash\r\n\/repl.js: The only valid numeric escape in strict mode is '\\0'. (1:244)\r\n\r\n> 1 | const randomText -> [...]\\'ajS>\\0~y\\8PZ*|-BRY&m%U[...]\r\n    |                                     ^\r\n  2 |\r\n```\r\n\r\nor like this:\r\n\r\n\r\n```bash\r\n\/repl.js: The only valid numeric escape in strict mode is '\\0'. (1:244)\r\n\r\n> 1 | [...]\\'ajS>\\0~y\\8PZ*|-BRY&m%U[...]\r\n    |                 ^\r\n  2 |\r\n```"],"labels":["i: enhancement","area: errors"]},{"title":"[Bug]: Order of constructor parameter properties vs class properties initializers - Discrepency between typescript and bable ","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@rollup\/plugin-babel\n\n### Input code\n\nOriginal Code: \r\n\r\n```js\r\nclass Dashboard {\r\n    name = 'stats' + this.amount;\r\n\r\n    constructor(\r\n        readonly amount\r\n    ) { \r\n    }\r\n}\r\n```\r\n\r\nBabel Emit:\r\n\r\n```js\r\n\"use strict\";\r\n\r\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\n\r\nclass Dashboard {\r\n  constructor(amount) {\r\n    _defineProperty(this, \"name\", 'stats' + this.amount);\r\n\r\n    this.amount = amount;\r\n  }\r\n}\r\n```\r\n\r\nTypescript emits:\r\n\r\n```js\r\nclass Dashboard {\r\n    constructor(amount) {\r\n        this.amount = amount;\r\n        this.name = 'stats' + this.amount;\r\n    }\r\n}\r\n```\r\n\n\n### Configuration file name\n\nbabel.config.js\n\n### Configuration\n\nFor reproduction I've used the Babel online repl with Env stage 2 preset and Typescript preset. \r\n[link](https:\/\/babeljs.io\/repl\/#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.6&spec=false&loose=false&code_lz=MYGwhgzhAEAikAsBGB7MAnAJtA3gKGkOgDswBbAU2gF5oByCAFzEYjugGppGEBLCAHTkUAV2KMA3HgJFgKYk3QjgjFOgAUMokXQUwmeSACe0YWMZboASlzRLAXzz2gA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-2%2Ctypescript&prettier=false&targets=&version=7.15.7&externalPlugins=&assumptions=%7B%7D)\r\n\r\nFor typescript reproduction I've used Typescript playground.\r\n[link](https:\/\/www.typescriptlang.org\/play?ssl=9&ssc=2&pln=1&pc=1#code\/MYGwhgzhAEAikAsBGB7MAnAJtA3gKGkOgDswBbAU2gF5oByCAFzEYjugGppGEBLCAHTkUAV2KMA3HgJFgKYk3QjgjFOgAUMokXQUwmeSACe0YWMYAuEiLJIK6ADRboASlzTtAXzyegA)\n\n### Current and expected behavior\n\nCurrent Behavior - Babel puts parameter properties in the constructor after class properties assignment. Typescript puts them before.\r\n\r\nExpected Behavior - Its a discrepancy. Not sure if Babel is the responsible or Typescript. Typescript behavior is more preferable to me because it makes writing shorter for me.\n\n### Environment\n\n- Babel - 7.15.7\r\n- Typescript - 4.4.2\n\n### Possible solution\n\nNot sure. I've found some issues talking about plugin orders but I'm not sure.\n\n### Additional context\n\n_No response_","comments":["Hey @elpddev! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","When comparing TS with Babel, you should always enable the `useDefineForClassFields` TS option: it's the option that makes TS class fields like JS class fields, which is what Babel does and what TC will do in a future version.\r\n\r\nAfter enabling that option, if you target ES2015-ES2021 it will first initialize `this.amount` and then `this.name`. However, if you target ESNext (and soon ES2022, when it's supported), it first initializes `this.name` and then `this.amount`.\r\n\r\nI suggest reporting this inconsistency to the TS team: when they'll decide which is the correct order we'll do the same.","From developer.mozilla.org:\n> Public instance fields are added with Object.defineProperty() either at construction time in the base class (before the constructor body runs), or just after super() returns in a subclass.","Yeah, but MDN doesn't define parameter properties, which are a TS extension.","I think a solution would be to detect if a constructor parameter is used in a property initializer and throw an error indicating that babel doesn't support that construction. The more niche construction of something like\r\n```ts\r\nclass A {\r\n  bar = this.initBar();\r\n  constructor(public foo: string) {}\r\n  initBar() { return this.foo + 'bar' }\r\n}\r\n```\r\nshould issue a warning (as detecting property access in a method call can get complex, so better to just check the immediate syntax tree.)","when i try to add babel to a [typescript project](https:\/\/github.com\/Lyoko-Jeremie\/sugarcube-2-ModLoader), i face the same issue.\r\n\r\nwhen use code like follow:\r\n\r\n```ts\r\n\r\nclass B {\r\n\r\n    constructor(\r\n        public thisWin: Window,\r\n    ) {\r\n        console.log('B', [this, this.thisWin]);\r\n        \/\/ now the `this.thisWin` is undefined\r\n    }\r\n    \r\n    aFunc() {\r\n        this.thisWin.xxx;   \/\/ <<=== Error: this.thisWin is undefined\r\n    }\r\n\r\n}\r\n\r\nclass A {\r\n\r\n    constructor(\r\n        public thisWin: Window,\r\n    ) {\r\n        console.log('A', [this, this.thisWin]);\r\n    }\r\n\r\n    b = new B(this.thisWin);\r\n\r\n}\r\n\r\nconst a = new A(window);\r\n\r\na.b.aFunc();   \/\/ <<=== Error: this.thisWin is undefined\r\n\r\n```\r\n\r\nit will output if use babel\r\n\r\n```\r\nB [{...}, undefined ]\r\nA [{...}, window ]\r\n```\r\n\r\nbut only use typescript it will output :\r\n\r\n```\r\nB [{...}, window ]\r\nA [{...}, window ]\r\n```\r\n\r\n---\r\n\r\n\r\n```\r\n\/\/ package.json\r\n\r\n  \"dependencies\": {\r\n    \"cheerio\": \"^1.0.0-rc.12\",\r\n    \"core-js\": \"^3.33.2\",\r\n    \"idb-keyval\": \"^6.2.1\",\r\n    \"jquery\": \"^3.7.1\",\r\n    \"json5\": \"^2.2.3\",\r\n    \"jszip\": \"^3.10.1\",\r\n    \"libsodium-wrappers\": \"^0.7.13\",\r\n    \"lodash\": \"^4.17.21\",\r\n    \"lru-cache\": \"^10.0.1\",\r\n    \"moment\": \"^2.29.4\",\r\n    \"semver\": \"^7.5.4\",\r\n    \"ts-mixer\": \"^6.0.3\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel\/cli\": \"^7.23.0\",\r\n    \"@babel\/core\": \"^7.23.2\",\r\n    \"@babel\/preset-env\": \"^7.23.2\",\r\n    \"@babel\/preset-typescript\": \"^7.23.2\",\r\n    \"@types\/core-js\": \"^2.5.8\",\r\n    \"@types\/jquery\": \"^3.5.20\",\r\n    \"@types\/libsodium-wrappers\": \"^0.7.11\",\r\n    \"@types\/lodash\": \"^4.14.198\",\r\n    \"@types\/node\": \"^20.6.0\",\r\n    \"@types\/semver\": \"^7.5.2\",\r\n    \"@webpack-cli\/generators\": \"^3.0.7\",\r\n    \"babel-loader\": \"^9.1.3\",\r\n    \"browserslist\": \"^4.22.1\",\r\n    \"css-loader\": \"^6.8.1\",\r\n    \"expose-loader\": \"^4.1.0\",\r\n    \"fork-ts-checker-webpack-plugin\": \"^8.0.0\",\r\n    \"html-webpack-plugin\": \"^5.5.3\",\r\n    \"nodemon\": \"^3.0.1\",\r\n    \"sass\": \"^1.66.1\",\r\n    \"sass-loader\": \"^13.3.2\",\r\n    \"style-loader\": \"^3.3.3\",\r\n    \"ts-loader\": \"^9.4.4\",\r\n    \"tsconfig-paths-webpack-plugin\": \"^4.1.0\",\r\n    \"typescript\": \"^5.1.6\",\r\n    \"webpack\": \"^5.88.2\",\r\n    \"webpack-cli\": \"^5.1.4\",\r\n    \"webpack-dev-server\": \"^4.15.1\"\r\n  }\r\n```\r\n\r\n```tsconfig.comp.json\r\n{\r\n  \"compilerOptions\": {\r\n    \/* Projects *\/\r\n\r\n    \/* Language and Environment *\/\r\n    \"target\": \"ES5\",                                  \/* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. *\/\r\n     \"lib\": [\r\n       \"DOM\",\r\n       \"ES2015\",\r\n       \"ES2022.Object\"\r\n     ],                                        \/* Specify a set of bundled library declaration files that describe the target runtime environment. *\/\r\n\r\n    \/* Modules *\/\r\n    \"module\": \"ESNext\",                                \/* Specify what module code is generated. *\/\r\n     \"rootDir\": \".\/\",                                  \/* Specify the root folder within your source files. *\/\r\n     \"moduleResolution\": \"node\",                     \/* Specify how TypeScript looks up a file from a given module specifier. *\/\r\n     \"baseUrl\": \".\/\",                                  \/* Specify the base directory to resolve non-relative module names. *\/\r\n     \"types\": [\r\n     ],                                      \/* Specify type package names to be included without being referenced in a source file. *\/\r\n\r\n    \/* JavaScript Support *\/\r\n    \"allowJs\": true,                                  \/* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. *\/\r\n\r\n    \/* Emit *\/\r\n     \"declaration\": true,                              \/* Generate .d.ts files from TypeScript and JavaScript files in your project. *\/\r\n     \"declarationMap\": true,                           \/* Create sourcemaps for d.ts files. *\/\r\n     \"sourceMap\": true,                                \/* Create source map files for emitted JavaScript files. *\/\r\n     \"outDir\": \"..\/..\/dist-BeforeSC2\",                                   \/* Specify an output folder for all emitted files. *\/\r\n\r\n     \"downlevelIteration\": true,                       \/* Emit more compliant, but verbose and less performant JavaScript for iteration. *\/\r\n\r\n\r\n    \/* Interop Constraints *\/\r\n    \"esModuleInterop\": true,                             \/* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. *\/\r\n    \"forceConsistentCasingInFileNames\": true,            \/* Ensure that casing is correct in imports. *\/\r\n\r\n    \/* Type Checking *\/\r\n    \"strict\": true,                                      \/* Enable all strict type-checking options. *\/\r\n\r\n\r\n    \/* Completeness *\/\r\n    \"skipLibCheck\": true                                 \/* Skip type checking all .d.ts files. *\/\r\n  },\r\n  \"exclude\": [\r\n    \"node_modules\",\r\n    \"dist\",\r\n    \"webpack.config.js\"\r\n  ]\r\n}\r\n\r\n\r\n```\r\n\r\n\r\n```webpack-comp.config.js\r\n\/\/ Generated using webpack-cli https:\/\/github.com\/webpack\/webpack-cli\r\n\r\nconst path = require('path');\r\n\/\/ const HtmlWebpackPlugin = require('html-webpack-plugin');\r\n\r\nconst isProduction = process.env.NODE_ENV == 'production';\r\n\r\n\r\n\/\/ const stylesHandler = 'style-loader';\r\n\r\nconst ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');\r\nconst TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin');\r\n\r\n\/\/ const ZipPlugin = require('zip-webpack-plugin');\r\n\r\nconst config = {\r\n  \/\/ https:\/\/webpack.js.org\/configuration\/entry-context\/#entry\r\n  entry: {\r\n    BeforeSC2: '.\/src\/BeforeSC2\/init.ts',\r\n    polyfillWebpack: '.\/src\/BeforeSC2\/polyfill.ts',\r\n  },\r\n  output: {\r\n    path: path.resolve(__dirname, 'dist-BeforeSC2-comp'),\r\n    filename: '[name].js',\r\n  },\r\n  \/\/ https:\/\/webpack.js.org\/configuration\/devtool\/\r\n  \/\/ devtool: 'inline-source-map',\r\n  \/\/ https:\/\/webpack.js.org\/configuration\/target\/\r\n  target: 'web',\r\n  \/\/ target: 'node',\r\n  devtool: 'inline-source-map',\r\n\r\n  \/\/ devServer: {\r\n  \/\/   open: true,\r\n  \/\/   host: '0.0.0.0',\r\n  \/\/   port: 3000,\r\n  \/\/ },\r\n  plugins: [\r\n\r\n    \/\/      INFO: generate a html entry from the template\r\n    \/\/ new HtmlWebpackPlugin({\r\n    \/\/   template: 'src\/web\/1.html',\r\n    \/\/ }),\r\n\r\n    \/\/      INFO: run Ts Check in parallel, [use special tsconfig]\r\n    new ForkTsCheckerWebpackPlugin({\r\n      typescript: {\r\n        configFile: 'src\/BeforeSC2\/tsconfig.comp.json',\r\n      }\r\n    }),\r\n\r\n    \/\/ \/\/ https:\/\/www.npmjs.com\/package\/zip-webpack-plugin\r\n    \/\/ new ZipPlugin({\r\n    \/\/   \/\/ OPTIONAL: defaults to the Webpack output path (above)\r\n    \/\/   \/\/ can be relative (to Webpack output path) or absolute\r\n    \/\/   path: 'zip',\r\n    \/\/\r\n    \/\/   \/\/ OPTIONAL: defaults to the Webpack output filename (above) or,\r\n    \/\/   \/\/ if not present, the basename of the path\r\n    \/\/   filename: 'xxxxxxxxxxxxxxxx.zip',\r\n    \/\/\r\n    \/\/   \/\/ OPTIONAL: defaults to including everything\r\n    \/\/   \/\/ can be a string, a RegExp, or an array of strings and RegExps\r\n    \/\/   include: [\/\\.js$\/],\r\n    \/\/\r\n    \/\/   \/\/ OPTIONAL: defaults to excluding nothing\r\n    \/\/   \/\/ can be a string, a RegExp, or an array of strings and RegExps\r\n    \/\/   \/\/ if a file matches both include and exclude, exclude takes precedence\r\n    \/\/   exclude: [\/\\.png$\/, \/\\.html$\/],\r\n    \/\/ }),\r\n\r\n    \/\/ Add your plugins here\r\n    \/\/ Learn more about plugins from https:\/\/webpack.js.org\/configuration\/plugins\/\r\n  ],\r\n  module: {\r\n    rules: [\r\n      \/\/ {\r\n      \/\/   test: \/\\.(ts|tsx)$\/i,\r\n      \/\/   loader: 'ts-loader',\r\n      \/\/   exclude: ['\/node_modules\/'],\r\n      \/\/ },\r\n      {\r\n        test: \/\\.(ts|tsx)$\/i,\r\n        exclude: ['\/node_modules\/'],\r\n        use: {\r\n          loader: \"babel-loader\",\r\n          options: {\r\n            presets: [[\"@babel\/preset-typescript\", { targets: \"> 99% and not ie <= 12\"}]]\r\n          }\r\n        }\r\n      },\r\n      {\r\n        test: \/\\.m?js$\/,\r\n        \/\/ exclude: \/node_modules\/,\r\n        use: {\r\n          loader: \"babel-loader\",\r\n          options: {\r\n            presets: [['@babel\/preset-env', { targets: \"> 99% and not ie <= 12\"}]]\r\n          }\r\n        }\r\n      },\r\n      \/\/ {\r\n      \/\/   test: \/\\.css$\/i,\r\n      \/\/   use: [stylesHandler, 'css-loader'],\r\n      \/\/ },\r\n      \/\/ {\r\n      \/\/   test: \/\\.s[ac]ss$\/i,\r\n      \/\/   use: [stylesHandler, 'css-loader', 'sass-loader'],\r\n      \/\/ },\r\n      {\r\n        test: \/\\.(eot|svg|ttf|woff|woff2|png|jpg|gif)$\/i,\r\n        type: 'asset',\r\n      },\r\n\r\n      \/\/ Add your rules for custom modules here\r\n      \/\/ Learn more about loaders from https:\/\/webpack.js.org\/loaders\/\r\n    ],\r\n  },\r\n  resolve: {\r\n    extensions: ['.tsx', '.ts', '.jsx', '.js', '...'],\r\n    \/\/      INFO: set a special tsconfig if you have multi, otherwise 'ts-loader' will read default from root dir\r\n    plugins: [new TsconfigPathsPlugin({\r\n      configFile: 'src\/BeforeSC2\/tsconfig.comp.json'\r\n    })],\r\n\r\n    \/\/      INFO: set some UMD lib to special js file, can skip webpack importer check\r\n    \/\/ alias: {\r\n    \/\/   vue: 'vue\/dist\/vue.js'\r\n    \/\/ },\r\n  },\r\n};\r\n\r\n\r\nmodule.exports = () => {\r\n  if (isProduction) {\r\n    config.mode = 'production';\r\n\r\n    \/\/      INFO: add some special config or operate to the config\r\n    config.devtool = undefined;\r\n\r\n  } else {\r\n    config.mode = 'development';\r\n  }\r\n  return config;\r\n};\r\n```","Unfortunately we are waiting https:\/\/github.com\/microsoft\/TypeScript\/issues\/45995\r\n","@liuxingbaoyu \r\nI believe that initializing constructor parameters first should be the intuitive expected behavior. Users of TypeScript often come from backgrounds in other object-oriented programming languages such as C++, Java, C#, etc., where it is common for class internal members to be initialized using constructor parameters.","The problem is that TypeScript behaves like Babel when you run it according to JS semantics for class properties, and differently when you run it with old pre-JS-classes semantics.\r\n\r\nBefore making any change we need to know how they intend to align the two implementations."],"labels":["i: needs triage"]},{"title":"[Bug]: `scope.rename` global variable not working","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n```js\r\n#!\/usr\/bin\/env ts-node\r\nimport { test } from 'uvu';\r\nimport * as assert from 'uvu\/assert';\r\n\r\nimport { transformSync } from '@babel\/core'\r\nimport { declare } from \"@babel\/helper-plugin-utils\";\r\n\r\ntest('babel: rename global', async () => {\r\n  const code = transformSync(\r\n    'console.log(globalA);',\r\n    {\r\n      plugins: [\r\n        declare<{}>((api, _options) => {\r\n          api.assertVersion(7);\r\n          return {\r\n            name: 'babel-plugin-test',\r\n            visitor: {\r\n              Program(path) {\r\n                path.scope.rename(\"globalA\", \"globalB\");\r\n              }\r\n            }\r\n          }\r\n        })\r\n      ]\r\n    }\r\n  )?.code\r\n\r\n  assert.equal(code, 'console.log(globalB);' )\r\n})\r\n\r\ntest.run()\r\n```\r\n\r\n### Configuration file name\r\n\r\npackage.json\r\n\r\n### Configuration\r\n\r\n```json\r\n{\r\n  \"name\": \"babel-rename-test\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"ts-node babel-rename-test.ts\"\r\n  },\r\n  \"author\": \"loynoir\",\r\n  \"dependencies\": {\r\n    \"@babel\/core\": \"^7.15.5\",\r\n    \"@babel\/helper-plugin-utils\": \"^7.14.5\",\r\n    \"@types\/babel__core\": \"^7.1.16\",\r\n    \"@types\/babel__helper-plugin-utils\": \"^7.10.0\",\r\n    \"uvu\": \"^0.5.1\"\r\n  }\r\n}\r\n```\r\n\r\n### Current and expected behavior\r\n\r\n```txt\r\n   FAIL  \"babel: rename global\"                                                                                  \r\n    Expected values to be deeply equal:  (equal)\r\n\r\n        ++console.log(globalB);    (Expected)\r\n        --console.log(globalA);    (Actual)\r\n                            ^  \r\n```\r\n\r\n\r\n### Environment\r\n\r\n- Babel version(s): \r\n    @babel\/core: ^7.15.5 => 7.15.5 \r\n    @babel\/helper-plugin-utils: ^7.14.5 => 7.14.5\r\n- Node: 14.17.4\r\n- pnpm: 6.14.3\r\n- OS: Arch Linux\r\n\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @loynoir! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","A workaround could be visit `Identifier` and use `path.replaceWith(t.identifier('globalB'))`:\r\n``` js\r\nconst babel = require(\"@babel\/core\")\r\nconst t = require(\"@babel\/types\")\r\n\r\nconst result = babel.transformSync(\r\n    `console.log(globalA);`,\r\n    {\r\n        plugins: [\r\n            (() => {\r\n                return {\r\n                    name: 'babel-plugin-test',\r\n                    visitor: {\r\n                        Identifier(path) {\r\n                            const node = path.node\r\n                            if (node.name === 'globalA') {\r\n                                path.replaceWith(t.identifier('globalB'))\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        ]\r\n    }\r\n)\r\n\r\nconsole.log(result.code)  \/\/ console.log(globalB);\r\n```","And according to source code:\r\nhttps:\/\/github.com\/babel\/babel\/blob\/51c6a99c8e49967ff62b11da7a54554fd0e8387b\/packages\/babel-traverse\/src\/scope\/index.ts#L598-L604\r\n\r\n`rename()` seems only work for `scope.bindings`, which i think is `local variable` in JS, not `global variable`.\r\n\r\nI'm not sure whether it is designed only for `scope.bindings`? \ud83e\udd14","It's because we cannot rename the global variable definition.\r\n\r\nIf you have this code:\r\n```js\r\nvar a = 2;\r\nconsole.log(a);\r\n```\r\nand you rename `a` to `b`, it will correctly log `2`.\r\n\r\nIf you have this code:\r\n```js\r\nObject.defineProperty(globalThis, \"a\", { value: 2 });\r\nconsole.log(a);\r\n```\r\nand you rename `a` to `b`, it will stop working and log `undefined` (or throw a ReferenceError).","@nicolas-marien\r\nOh, I see that difficulty of implement.\r\nSo, if `global variable` and `local variable` are on two different road, then I think `path.scope.rename` should always keep `global variable` unchanged, but...\r\n\r\n```ts\r\n#!\/usr\/bin\/env ts-node\r\nimport { test } from \"uvu\";\r\nimport * as assert from \"uvu\/assert\";\r\n\r\nimport { transformSync } from \"@babel\/core\";\r\nimport { declare } from \"@babel\/helper-plugin-utils\";\r\nimport { scopeRenameGlobalUnsafe } from \".\/scopeRename\";\r\n\r\ntest(\"babel issue?: path.scope.rename may rename global\", async () => {\r\n  const code = transformSync(`console.log(XXX);const XXX = null;`, {\r\n    retainLines: true,\r\n    plugins: [\r\n      declare<{}>((api, _options) => {\r\n        api.assertVersion(7);\r\n        return {\r\n          name: \"babel-plugin-test\",\r\n          visitor: {\r\n            Program(path) {\r\n              path.scope.rename(\"XXX\", \"___\");\r\n            },\r\n          },\r\n        };\r\n      }),\r\n    ],\r\n  })?.code;\r\n\r\n  assert.not.equal(code, `console.log(XXX);const ___ = null;`);\r\n\r\n  assert.equal(code, `console.log(___);const ___ = null;`);\r\n});\r\n\r\ntest.run();\r\n```","@JuniorTour\r\n\r\nCurrently, I \r\n- prepend a defination to `Program.body`\r\n- conditionally logging `using two assumptions: ...`\r\n- `scope.rename`\r\n-  cleanup the prepended\r\n\r\nThus, seems safer and do less changes, things like parameters will not changed.\r\nAlthough top level variable overwrite changed too, but that also seems safe.\r\n```js\r\nconsole.log(___);const ___ = 2;\r\n```\r\n","```js\r\nconsole.log(a);\r\n\r\nconsole.log(b);\r\nconst b = 1;\r\n\r\nconst c = 1;\r\n\r\n(d)=>{};\r\n  \r\nconsole.log(e);\r\nimport e from 'e';\r\n```\r\n\r\n```js\r\n> path.scope.hasGlobal('a')\r\ntrue\r\n> path.scope.hasGlobal('b')\r\nfalse \/\/ expect: true\r\n> path.scope.hasGlobal('c')\r\nfalse\r\n> path.scope.hasGlobal('d')\r\nfalse\r\n> path.scope.hasGlobal('e')\r\nfalse\r\n```","> @nicolas-marien Oh, I see that difficulty of implement. So, if `global variable` and `local variable` are on two different road, then I think `path.scope.rename` should always keep `global variable` unchanged, but...\r\n> \r\n> ```ts\r\n> #!\/usr\/bin\/env ts-node\r\n> import { test } from \"uvu\";\r\n> import * as assert from \"uvu\/assert\";\r\n> \r\n> import { transformSync } from \"@babel\/core\";\r\n> import { declare } from \"@babel\/helper-plugin-utils\";\r\n> import { scopeRenameGlobalUnsafe } from \".\/scopeRename\";\r\n> \r\n> test(\"babel issue?: path.scope.rename may rename global\", async () => {\r\n>   const code = transformSync(`console.log(XXX);const XXX = null;`, {\r\n>     retainLines: true,\r\n>     plugins: [\r\n>       declare<{}>((api, _options) => {\r\n>         api.assertVersion(7);\r\n>         return {\r\n>           name: \"babel-plugin-test\",\r\n>           visitor: {\r\n>             Program(path) {\r\n>               path.scope.rename(\"XXX\", \"___\");\r\n>             },\r\n>           },\r\n>         };\r\n>       }),\r\n>     ],\r\n>   })?.code;\r\n> \r\n>   assert.not.equal(code, `console.log(XXX);const ___ = null;`);\r\n> \r\n>   assert.equal(code, `console.log(___);const ___ = null;`);\r\n> });\r\n> \r\n> test.run();\r\n> ```\r\n\r\nIf global variables are getting renamed then rename is also changing some globals this should be avoided as it can make conflicts for some code and may create some side-effects."],"labels":["i: enhancement","pkg: traverse (scope)"]},{"title":"[Bug]: Incorrect `this.#foo++` transform when using BigInts","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n(Cross posting https:\/\/github.com\/evanw\/esbuild\/issues\/1600)\r\n\r\n[REPL](https:\/\/babeljs.io\/repl#?browsers=Chrome%2080&build=&builtIns=false&corejs=3.6&spec=false&loose=false&code_lz=HYUw7gBAFAxgNgQwM5IgbwFAQgYgGYD2BEAvBAAzADcWEMBwSALgE4CuMTBLUAlOrWxMAFgEskAOnxEA1DJrYAvhkW8qQA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env&prettier=false&targets=&version=7.15.6&externalPlugins=&assumptions=%7B%7D)\r\n```js\r\nnew (class {\r\n  #foo = 0n;\r\n  constructor() {\r\n    this.#foo++;\r\n  }\r\n});\r\n```\r\n\r\n### Configuration file name\r\n\r\nbabel.config.js\r\n\r\n### Configuration\r\n\r\n```json\r\n{\r\n  \"presets\": [\"env\"],\r\n  \"targets\": \"Chrome 80\"\r\n}\r\n```\r\n\r\n### Current and expected behavior\r\n\r\nThe `this.#foo++` gets transformed into `_classPrivateFieldSet(this, _foo, (_this$foo = +_classPrivateFieldGet(this, _foo)) + 1)`, which is essentially equivalent to `_classPrivateFieldGet(this, _foo) + 1`.\r\n\r\nNormally, this is fine. However, when `#foo` is a BitInt, adding `+ 1` is a runtime TypeError. You have to add `+ 1n` to get the correct behavior.\r\n\r\n### Environment\r\n\r\nBabel v7.15.6\r\n\r\n### Possible solution\r\n\r\nWe can either add an `add`\/`subtract` helper (this'll happen for `this.#foo--` too), or we can reconfigure the the member to function helper to output a slightly uglier transform:\r\n\r\n```js\r\n_classPrivateFieldSet(this, _foo, (_this$foo = _this$foo2 = +_classPrivateFieldGet(this, _foo), ++this$foo2)), _this$foo;\r\n```\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["I lean to the second approach where we reuse the unary operator `++`\/`--` and it also future-proofs the [Decimal](https:\/\/github.com\/tc39\/proposal-decimal) proposal.","Esbuild went with a getter\/setter pair to avoid the issue:\r\n\r\n```js\r\n\/\/ input\r\nthis.#foo++;\r\n\r\n\/\/ output\r\nfunction privateWrapper(obj, field) {\r\n  return {\r\n    get _() { return field.get(obj); },\r\n    set _(v) { field.set(obj, v); },\r\n  };\r\n}\r\nprivateWrapper(this, _foo)._++\r\n```\r\n\r\nWe already have a very similar helper for [destructure targets](https:\/\/github.com\/babel\/babel\/blob\/710b3919fae1098e63e7d75535dd0c8597cf695f\/packages\/babel-helpers\/src\/helpers.ts#L1294-L1301)."],"labels":["i: bug","Spec: BigInt","Spec: Class Fields"]},{"title":"[Bug]: [Babel standalone import error]","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\nOther (Next.js, Gatsby, vue-cli, ...)\n\n### Input code\n\nI using Babel standalone with React. I can't import same js name component (different URL).\r\n\r\n```html\r\n...\r\n<script src='src\/lib\/react\/17.0.2\/react.production.min.js'><\/script>\r\n<script src='src\/lib\/react-dom\/17.0.2\/react-dom.production.min.js'><\/script>\r\n<script src='src\/lib\/react-router-dom\/5.2.0\/react-router-dom.min.js'><\/script>\r\n<script src='src\/lib\/babel\/standalone\/7.15.3\/babel.min.js'><\/script>\r\n...\r\n<script>\r\n    Babel.registerPreset(\"config-preset\", {\r\n        presets: [\r\n            [Babel.availablePresets[\"es2017\"], { modules: true }],\r\n            [Babel.availablePresets[\"react\"]]\r\n        ],\r\n        plugins: [\r\n            [Babel.availablePlugins[\"transform-modules-umd\"]]\r\n        ]\r\n    });\r\n<\/script>\r\n...\r\n<script type=\"text\/babel\" data-presets=\"config-preset\" src=\"src\/pages\/Home\/index.js\"><\/script>\r\n<script type=\"text\/babel\" data-presets=\"config-preset\" src=\"src\/pages\/Login\/index.js\"><\/script>\r\n...\r\n<script type=\"text\/babel\" data-presets=\"config-preset\" src=\"src\/routes\/index.js\"><\/script>\r\n...\r\n```\r\n\r\nroutes-index.js\r\n```js\r\nimport Home from \"..\/pages\/Home\/index.js\";\r\nimport Login from \"..\/pages\/Login\/index.js\";\r\n```\r\n\r\nI using `console.log(<Home \/>)` and `console.log(<Login \/>)` and see Babel generate by name of JS file. So, if I import components with same name, babel will generate `index.Home`, `index2.Login` => ERROR.\r\nI must change file name to fix this case\r\n\r\n```html\r\n<script type=\"text\/babel\" data-presets=\"config-preset\" src=\"src\/pages\/Home\/pages-home-index.js\"><\/script>\r\n<script type=\"text\/babel\" data-presets=\"config-preset\" src=\"src\/pages\/Login\/pages-login-index.js\"><\/script>\r\n```\r\n\r\nroutes-index.js\r\n```js\r\nimport Home from \"..\/pages\/Home\/pages-home-index.js\";\r\nimport Login from \"..\/pages\/Login\/pages-login-index.js\";\r\n```\r\n\r\nI think you need change the way to generate import file, and it's better if I have some config to auto import index.js (I want to babel auto check and find index.js `<script type=\"text\/babel\" data-presets=\"config-preset\" src=\"src\/pages\/Home\/index.js\"><\/script>` => `<script type=\"text\/babel\" data-presets=\"config-preset\" src=\"src\/pages\/Home\"><\/script>`\r\n\r\nThank you a lot.\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nI want to import without error\r\n```js\r\nimport Home from \"..\/pages\/Home\/index.js\";\r\nimport Login from \"..\/pages\/Login\/index.js\";\r\n```\n\n### Environment\n\nBabel standalone version 7.15.3\n\n### Possible solution\n\nChange the way to generate import object (full url instead only file name)\r\n\r\nIt's better if you add feature allow config auto import index.js if find url fail or alway find index.js if suffix isn't js file\n\n### Additional context\n\n_No response_","comments":["Hey @letanloc1998! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","https:\/\/stackoverflow.com\/questions\/59211788\/babel-standalone-react-import-statement-resolves-to-wrong-file"],"labels":["i: needs triage"]},{"title":"[Bug]: babel-node -e option Inconsistent behavior with node -e","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\nwhen -e is a param of an app.js\r\nnode app.js -e  != babel-node app.js -e\r\n\r\n\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\nwhen -e is a param of an app.js\r\nnode app.js -e  != babel-node app.js -e\r\n\r\nIs it possible to make their behavior the same?\n\n### Environment\n\n- babel-node 7.14.9\n\n### Possible solution\n\n_No response_\n\n### Additional context\n\n_No response_","comments":["Hey @yxwzaxns! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","As a workaround, you can explicitly separate user args and babel args by `--`\r\n\r\n```\r\nbabel-node app.js -- -e\r\n```","@JLHwung thinks, but my app.js is also a commander script, use -- not work for  params of my app.js","@yxwzaxns Can you also check if `babel-node -- app.js -e` works?\r\n\r\nThis needs to be fixed, but probably it needs to wait for a better solution in Babel 8 (https:\/\/github.com\/babel\/babel\/issues\/4373)","@nicolo-ribaudo  Thinks, it works for me."],"labels":["i: bug","pkg: node"]},{"title":"Package Request: official babel import hook","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on this feature?\r\n\r\n### What problem are you trying to solve?\r\n\r\nPackage Request: @babel\/node-loader\r\nLike [@babel\/register](https:\/\/www.npmjs.com\/package\/@babel\/register) is require hook.\r\n\r\n`@babel\/node-loader` is import hook.\r\n\r\n### Describe the solution you'd like\r\n\r\n`@babel\/node-loader` Requested official babel import hook\r\n\r\n#### Usage\r\n\r\n```sh\r\nnode --loader @babel\/node-loader file.mjs\r\n```\r\n```sh\r\nexport  NODE_OPTIONS=\"$NODE_OPTIONS --loader @babel\/node-loader\"\r\nnode file.mjs\r\n```\r\n\r\n### Describe alternatives you've considered\r\n\r\n[babel-register-esm](https:\/\/www.npmjs.com\/package\/babel-register-esm) babel import hook\r\n\r\n### Documentation, Adoption, Migration Strategy\r\n\r\n#### Related Link: esbuild ecosystem\r\n- [esbuild-register](https:\/\/www.npmjs.com\/package\/esbuild-register) esbuild require hook by [egoist](https:\/\/github.com\/egoist\/esbuild-register)\r\n\r\n- [esbuild-node-loader](https:\/\/www.npmjs.com\/package\/esbuild-node-loader) esbuild import hook by [antfu](https:\/\/github.com\/antfu\/esbuild-node-loader)\r\n\r\n\r\n#### Related Link: babel ecosystem\r\n- [@babel\/register](https:\/\/www.npmjs.com\/package\/@babel\/register) official babel require hook\r\n\r\n- [babel-register-esm](https:\/\/www.npmjs.com\/package\/babel-register-esm) babel import hook\r\n\r\n- `@babel\/node-loader` Requested official babel import hook\r\n\r\n","comments":["Hey @loynoir! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","The biggest reason we didn't support ESM import hook yet is that, as of Node 15, the ESM loader API \"is being redesigned. This hook may disappear or its signature may change. Do not rely on the API\".\r\n \r\nhttps:\/\/nodejs.org\/docs\/latest-v15.x\/api\/esm.html#esm_loaders","I'm closing this as a duplicate of https:\/\/github.com\/babel\/babel\/issues\/11934."],"labels":["i: enhancement","pkg: register"]},{"title":"[Bug]: F# pipeline right-hand side parsing errors","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nOther (Next.js, Gatsby, vue-cli, ...)\r\n\r\n### Input code\r\n\r\n*in the REPL you need to change Pipeline proposal option to `F#`*\r\n\r\n#### Parse error in arrow function block: [REPL](https:\/\/babel.dev\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.6&spec=false&loose=false&code_lz=B4AgvAfCoD5QnuKBvAUCEAnApgFwK6YB2IicIAZqgL6pA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-1&prettier=false&targets=&version=7.14.9&externalPlugins=) | [test](https:\/\/github.com\/lightmare\/babel\/commit\/61811e9c1316cc27e6ec9455d63a19245a0f3a33#diff-218a19c0f0cd05094a2599d3288e91b155a7facc415921ca11610623cea45209)\r\n```js\r\nx => x |> y => {\r\n  return y |> f\r\n}\r\n```\r\nDefinitely a bug.\r\n\r\n#### Parse error in conditional expression: [REPL](https:\/\/babel.dev\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.6&spec=false&loose=false&code_lz=J4AgPgfCAeILxVgfhuKAzEAuGBuAUEA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-1&prettier=false&targets=&version=7.14.9&externalPlugins=) | [test](https:\/\/github.com\/lightmare\/babel\/commit\/61811e9c1316cc27e6ec9455d63a19245a0f3a33#diff-8867c7e5b96ef0ecd28372f5fb06588f871af06d650ed1c53ba351cb4e09c19a)\r\n```js\r\ny |> x => x ? x |> f : x;\r\n```\r\nMay be a bug, or intended consequence of the \"arrow function on the RHS terminates at the first pipeline operator\" rule (which is not formalized in the draft spec).\r\n\r\nAnother consequence of the RHS arrow parsing rule is that it makes `|>` appear to bind less tightly than assignment:\r\n```js\r\nconst cache = {};\r\nconst work = x => x ** 2;\r\n\r\nconst memoizeF =           y => cache[y] ??= y |> work;\r\n\/\/ memoizeF stores `y |> work` in the cache\r\nconst memoizeG = x => x |> y => cache[y] ??= y |> work;\r\n\/\/ memoizeG stores `y` in the cache\r\n\r\nexpect(memoizeF(2)).toBe(4);\r\nexpect(cache[2]).toBe(4);\r\n\r\nexpect(memoizeG(3)).toBe(9);\r\nexpect(cache[3]).toBe(9); \/\/ fails\r\n```\r\n\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nThe arrow function block I'd expect to parse, it's perfectly valid code.\r\n\r\nThe conditional operator I'd expect to parse, because even if the RHS parsing rule were to stand, why terminate the arrow function body when you're in the \"consequent\" branch of a ternary? Is it to avoid confusion that'd arise if `|>` terminated the \"alternate\" branch but not the \"consequent\"?\r\n\r\nThe third example depends on how the spec eventually handles it. In my opinion the rule does more harm than good.\r\n\r\n\r\n### Environment\r\n\r\n\r\n  System:\r\n    OS: Linux 5.4 Linux Mint 20.1 (Ulyssa)\r\n  Binaries:\r\n    Node: 16.4.0 - ~\/.nodenv\/versions\/16\/bin\/node\r\n    Yarn: 2.4.1-git.20210125.0f31e6910 - ~\/.nodenv\/versions\/16\/bin\/yarn\r\n    npm: 7.18.1 - ~\/.nodenv\/versions\/16\/bin\/npm\r\n  Monorepos:\r\n    Yarn Workspaces: 2.4.1-git.20210125.0f31e6910\r\n  npmPackages:\r\n    @babel\/cli: ^7.14.5 => 7.14.5 \r\n    @babel\/core: ^7.14.6 => 7.14.6 \r\n    @babel\/eslint-config-internal: workspace:* => 7.14.5 \r\n    @babel\/eslint-parser: workspace:* => 7.14.9 \r\n    @babel\/eslint-plugin-development: workspace:* => 7.14.5 \r\n    @babel\/eslint-plugin-development-internal: workspace:* => 7.14.5 \r\n    @babel\/plugin-proposal-dynamic-import: ^7.14.5 => 7.14.5 \r\n    @babel\/plugin-proposal-export-namespace-from: ^7.14.5 => 7.14.5 \r\n    @babel\/plugin-proposal-object-rest-spread: ^7.14.5 => 7.14.5 \r\n    @babel\/plugin-transform-modules-commonjs: ^7.14.5 => 7.14.5 \r\n    @babel\/plugin-transform-runtime: ^7.14.5 => 7.14.5 \r\n    @babel\/preset-env: ^7.14.5 => 7.14.5 \r\n    @babel\/preset-flow: ^7.14.5 => 7.14.5 \r\n    @babel\/preset-typescript: ^7.14.5 => 7.14.5 \r\n    @babel\/register: ^7.14.5 => 7.14.5 \r\n    @babel\/runtime: ^7.14.6 => 7.14.6 \r\n    babel-plugin-transform-charcodes: ^0.2.0 => 0.2.0 \r\n    eslint: ^7.27.0 => 7.27.0 \r\n    jest: ^27.0.0 => 27.0.1 \r\n\r\n\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\nI'm not creating a PR this time because it's just broken tests which I don't know how to fix, so it would indefinitely be a draft.\r\nFeel free to incorporate the test fixtures I linked into any partial fixes.\r\n","comments":["Hey @lightmare! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","> Parse error in arrow function block\r\n\r\n<s>This is a regression introduced in #11600, unlike hack pipeline, the f-sharp proposal [allows](https:\/\/github.com\/valtech-nyc\/proposal-fsharp-pipelines#impact-on-precedence) arrow after pipeline operator.<\/s>\r\n\r\n> Parse error in conditional expression\r\n\r\nBabel 7.14.9 also throws so it is not a regression. We can continue discuss it in https:\/\/github.com\/valtech-nyc\/proposal-fsharp-pipelines\/issues\/12."],"labels":["i: bug","Spec: Pipeline Operator"]},{"title":"Support optional import jsx statement for automatic runtime","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nWe are evaluating component source code by a `new Function` call at runtime, in this case the generated `import { jsx as _jsx } from \"false\/jsx-runtime\";` breaks function code.\n\n### Describe the solution you'd like\n\nMaybe we can add a `importSource: false` condition to disable this import statement, `_jsx` function can be provided via function constructor like:\r\n\r\n```\r\nimport {jsx} from 'react\/jsx-runtime';\r\n\r\nconst module = {exports: {}};\r\nconst facotry = new Function('module', 'exports', '_jsx', componentBodyCode);\r\nfactory(module, module.exports, jsx);\r\n```\n\n### Describe alternatives you've considered\n\nAnother solution is to customize a babel plugin to erase import statement after it is generated, but it seems not performance friendly\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @otakustay! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\""],"labels":["i: enhancement","i: needs triage"]},{"title":"[Bug]: Function declarations not hoisted to upper scope in sloppy mode code","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nProgrammatic API (`babel.transform`, `babel.parse`)\r\n\r\n### Input code\r\n\r\n```js\r\n{\r\n  function f() {}\r\n}\r\nf();\r\n```\r\n\r\n### Configuration file name\r\n\r\nbabel.config.json\r\n\r\n### Configuration\r\n\r\nn\/a\r\n\r\n### Current and expected behavior\r\n\r\nIn strict mode, function declarations are scoped to the statement block in which they're defined (i.e. behave like `let`). In sloppy mode they are scoped to the next enclosing function \/ top-level (i.e. behave like `var`).\r\n\r\nThis code is valid in sloppy mode and will execute without an error:\r\n\r\n```js\r\n{\r\n  function f() {}\r\n}\r\nf();\r\n```\r\n\r\nBabel appears not to take strict\/sloppy mode into account, and applies the strict mode behavior regardless.\r\n\r\n```js\r\nconst srcCode = `\r\n  {\r\n    function f() {}\r\n  }\r\n  f();\r\n`;\r\n\r\nconst { code } = transformSync( srcCode, {\r\n  sourceType: 'script',\r\n  plugins: [\r\n    () => ( {\r\n      visitor: {\r\n        Identifier( path ) {\r\n          const binding = path.scope.getBinding( path.node.name );\r\n          if ( !binding ) path.node.name = `unreferenced_${ path.node.name }`;\r\n        }\r\n      }\r\n    } )\r\n  ]\r\n} );\r\nconsole.log(code);\r\n```\r\n\r\nThis outputs:\r\n\r\n```js\r\n{\r\n  function f() {}\r\n}\r\nunreferenced_f();\r\n```\r\n\r\ni.e. `path.scope.getBinding('f')` did not identify that `function f` is in scope of `f()`.\r\n\r\nNB As far as I can see from testing in NodeJS, the function declaration's scope is hoisted up to enclosing function's scope\/top-level scope if its *surrounding environment* is sloppy mode, regardless of whether the function itself is strict. i.e. `f` is still defined in top level scope in this case:\r\n\r\n```js\r\n\/\/ Sloppy mode\r\n{\r\n  function f() {\r\n    'use strict';\r\n  }\r\n}\r\nf();\r\n```\r\n\r\n### Environment\r\n\r\n```\r\nSystem:\r\n  OS: macOS 10.15.7\r\nBinaries:\r\n  Node: 16.4.2 - ~\/.nvm\/versions\/node\/v16.4.2\/bin\/node\r\n  Yarn: 1.22.10 - ~\/.nvm\/versions\/node\/v16.4.2\/bin\/yarn\r\n  npm: 7.18.1 - ~\/.nvm\/versions\/node\/v16.4.2\/bin\/npm\r\nnpmPackages:\r\n  @babel\/core: ^7.14.6 => 7.14.6 \r\n  @babel\/generator: ^7.14.5 => 7.14.5 \r\n  @babel\/helper-module-transforms: ^7.14.5 => 7.14.5 \r\n  @babel\/parser: ^7.14.7 => 7.14.7 \r\n  @babel\/plugin-transform-arrow-functions: ^7.14.5 => 7.14.5 \r\n  @babel\/plugin-transform-modules-commonjs: ^7.14.5 => 7.14.5 \r\n  @babel\/plugin-transform-react-jsx: ^7.14.5 => 7.14.5 \r\n  @babel\/plugin-transform-strict-mode: ^7.14.5 => 7.14.5 \r\n  @babel\/register: ^7.14.5 => 7.14.5 \r\n  @babel\/traverse: ^7.14.7 => 7.14.7 \r\n  @babel\/types: ^7.14.5 => 7.14.5 \r\n  babel-jest: ^27.0.6 => 27.0.6 \r\n  babel-plugin-dynamic-import-node: ^2.3.3 => 2.3.3 \r\n  eslint: ^7.30.0 => 7.30.0 \r\n  jest: ^27.0.6 => 27.0.6 \r\n```\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\nI'm happy to work on a fix but would appreciate it if someone can point me in right direction. Last time I looked at the scope logic in Babel, I had trouble getting my head around it.","comments":["Hey @overlookmotel! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","Does `traverse()` have a concept of\/track whether it's currently in a strict mode context or not? I can't see anything obvious recording this on `path` or `state` when traversing."],"labels":["i: bug","pkg: traverse (scope)"]},{"title":"[Bug]: plugin-transform-modules-commonjs does not transform `arguments` outside function","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/register or @babel\/node\n\n### Input code\n\n```js\r\n\/\/ ES Module\r\nconst a = arguments;\r\n```\r\n\r\n[REPL](https:\/\/babeljs.io\/repl\/#?browsers=&build=&builtIns=false&corejs=3.6&spec=false&loose=false&code_lz=MYewdgzgLgBAhjAvPATgcwK4FsCmYoQDcAUEA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=&prettier=true&targets=Node-16&version=7.14.7&externalPlugins=%40babel%2Fplugin-transform-modules-commonjs%407.14.5)\n\n### Configuration file name\n\nbabel.config.json\n\n### Configuration\n\n```json\r\n{\r\n  \"sourceType\": \"module\",\r\n  \"plugins\": [ \"@babel\/plugin-transform-modules-commonjs\" ]\r\n}\r\n```\n\n### Current and expected behavior\n\nIn an ES Module, `arguments` outside of a function evaluates to `globalThis.arguments` if it's defined, or throws a runtime error `ReferenceError: arguments is not defined`.\r\n\r\nIn CommonJS, `arguments` evaluates to the arguments object of the CommonJS wrapper function (`module`, `exports`, `require` etc).\r\n\r\n[@babel\/plugin-transform-modules-commonjs](https:\/\/babeljs.io\/docs\/en\/babel-plugin-transform-modules-commonjs) does not take this difference into account. `arguments` is passed through unchanged.\n\n### Environment\n\n```\r\nSystem:\r\n  OS: macOS 10.15.7\r\nBinaries:\r\n  Node: 16.4.2 - ~\/.nvm\/versions\/node\/v16.4.2\/bin\/node\r\n  npm: 7.18.1 - ~\/.nvm\/versions\/node\/v16.4.2\/bin\/npm\r\nnpmPackages:\r\n  @babel\/core: ^7.14.6 => 7.14.6 \r\n  @babel\/generator: ^7.14.5 => 7.14.5 \r\n  @babel\/helper-module-transforms: ^7.14.5 => 7.14.5 \r\n  @babel\/parser: ^7.14.7 => 7.14.7 \r\n  @babel\/plugin-transform-arrow-functions: ^7.14.5 => 7.14.5 \r\n  @babel\/plugin-transform-modules-commonjs: ^7.14.5 => 7.14.5 \r\n  @babel\/plugin-transform-react-jsx: ^7.14.5 => 7.14.5 \r\n  @babel\/plugin-transform-strict-mode: ^7.14.5 => 7.14.5 \r\n  @babel\/register: ^7.14.5 => 7.14.5 \r\n  @babel\/traverse: ^7.14.7 => 7.14.7 \r\n  @babel\/types: ^7.14.5 => 7.14.5 \r\n  babel-jest: ^27.0.6 => 27.0.6 \r\n  babel-plugin-dynamic-import-node: ^2.3.3 => 2.3.3 \r\n  eslint: ^7.30.0 => 7.30.0 \r\n  jest: ^27.0.6 => 27.0.6\r\n```\n\n### Possible solution\n\nA more correct transformation would be:\r\n\r\n```js\r\n\/\/ ESM input\r\nconst a = arguments;\r\n```\r\n\r\n```js\r\n\/\/ CommonJS output\r\nconst a = (0, eval)(\"arguments\");\r\n```\r\n\r\nOnly problem with above implementation is that `eval()` can be blocked by CSP in some environments. An alternative:\r\n\r\n```js\r\n\/\/ CommonJS output\r\nconst a = _helper_getArguments();\r\n\r\nfunction _helper_getArguments() {\r\n  if ( 'arguments' in globalThis ) return globalThis.arguments;\r\n  throw new ReferenceError( \"arguments is not defined\" );\r\n}\r\n```\r\n\r\nBut then you need a cross-platform implementation of `globalThis` which is [surprisingly tricky](https:\/\/mathiasbynens.be\/notes\/globalthis).\r\n\r\nMaybe, given how rare it would be to define `globalThis.arguments`, better to always throw.\n\n### Additional context\n\n_No response_","comments":["Hey @overlookmotel! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\""],"labels":["i: needs triage"]},{"title":"[Bug]: Generate invalid es3 code for class","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\n```js\r\nconst abstract = 123\r\n\r\nfunction boolean() {\r\n}\r\n\r\nclass A {\r\n  abstract() {\r\n  }\r\n}\r\n```\n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\nbabel-preset with target ie 8\n\n### Current and expected behavior\n\ncurrent output\r\n```js\r\nvar _abstract = 123;\r\n\r\nfunction _boolean() {}\r\n\r\nvar A = \/*#__PURE__*\/function () {\r\n  function A() {\r\n    _classCallCheck(this, A);\r\n  }\r\n\r\n  _createClass(A, [{\r\n    key: \"abstract\",\r\n    value: function abstract() {}\r\n  }]);\r\n\r\n  return A;\r\n}();\r\n```\r\nhowever `abstract` is a reserved word in es3, so it cannot be used in function name\n\n### Environment\n\nbabel website try it out page\n\n### Possible solution\n\nI don't have any old windows available so I don't know if it's actually a bug or could 'just work'\n\n### Additional context\n\n_No response_","comments":["Hey @Austaras! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","Seems to be caused by that selector not matching class method names.\r\nhttps:\/\/github.com\/babel\/babel\/blob\/fce35af69101c6b316557e28abf60bdbf77d6a36\/packages\/babel-plugin-transform-reserved-words\/src\/index.js#L10-L12","But it should match `BindingIdentifier` of the function expression generated by the class transform :thinking: ","I can give a look into this.","It seems to be caused by `@babel\/helper-function-name` adding the following key to the function declaration which then does not register the binding in traverse.\r\n```js\r\nSymbol.for('should not be considered a local binding'): true\r\n```\r\n\r\n----\r\nedit: do we have any particular reason for which we keep the method identifier in the value `FunctionExpression` when transforming classes?\r\n```js\r\n    key: \"abstract\",\r\n    value: function abstract() {}\r\n```","> do we have any particular reason for which we keep the method identifier in the value FunctionExpression when transforming classes?\r\n\r\nFor preserving function name, I believe","Function name is preserved by the `key` prop.","@Austaras is right, it's to preserve `A.prototype.abstract.name`. We don't give strong guarantees about function names (since sometimes it's impossible to preserve them), but we usually try to keep a \"nice\" name for debugging purposes."],"labels":["i: bug","pkg: preset-env"]},{"title":"breaking(babel-8): align options naming","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Part of #13170  <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  | Yes\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nSince Babel 8 should be released relatively soon, I am not sure we should already add support for this breaking change in v7.15.\r\n\r\n---\r\nedit: rebased on top of #13532 \r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/13518\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/47768\/","This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/13518\/builds\/155082) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit 5e1649b140426e13a4399f07b261d52fe6687b84:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-mvv2n)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-bn3jh)| Configuration |\n","Should we continue these changes under the BABEL_8_BREAKING flag like the those?","Maybe yes, but what benefits would that bring? We only put more effort in handling a double source of truth for probably a couple of months(?)","If you prefer we can keep this as-is, and wait merging it until Babel 8.","Yes, I think it would be more sustainable. \n[Instead, this is a bug](https:\/\/github.com\/babel\/babel\/issues\/13170#issuecomment-869221066) that should be addressed in v7.15, even if it may be a breaking change for someone.","Ok I just wanted too to check we were ok with it, it's a pretty small scope change otherwise? It wouldn't be great if it broke in a dep  that caused issues for people but that seems unlikely?","I'm not sure if that small change broke the entire CRA e2e. I'll investigate tomorrow."],"labels":["PR: Breaking Change :boom:"]},{"title":"Fix object destructuring with ...rest using keys twice (plugin-transform-destructuring)","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | couldn't find a matching issue\r\n| Patch: Bug Fix?          | :heavy_check_mark: \r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\nThis fixes two issues with `...rest` in `@babel\/plugin-transform-destructuring`.\r\n\r\n#### 1. computed key stringified twice\r\n\r\n```js\r\nconst { [key]: target, ...rest } = obj;\r\n\/\/ key.toString() should not be called twice\r\n```\r\n\r\n#### 2. different variable used to exclude keys\r\n\r\nThere was actually a test for this already in `fixtures\/destructuring\/es7-object-rest\/input.js`:\r\n```js\r\nvar { [x]: x, ...y } = z;\r\n```\r\nbut the expected output was wrong:\r\n```js\r\nvar _z3 = z,\r\n    x = _z3[x],\r\n    y = babelHelpers.objectWithoutProperties(_z3, [x].map(babelHelpers.toPropertyKey));\r\n```\r\nthe `x` in `_z3[x]` is from outer scope, whereas the `x` in `objectWithoutProperties` is the local variable assigned by destructuring\r\n\r\nedit: correction: it's not a different variable, but the same variable with a different value.\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/13514\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/47143\/","This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/13514\/builds\/145087) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit b66bca385086c39c31086ae1b7fa13693ed4d55f:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-04dzf)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-r5t20)| Configuration |\n","> The `@babel\/plugin-proposal-object-rest-spread` package (which is used when only compiling `...` but not destructuring) probably has the same problem.\r\n\r\nIndeed. For example in https:\/\/github.com\/babel\/babel\/blob\/6df0b7c25f9e1b34cbf41229a784ade38bebde6a\/packages\/babel-plugin-proposal-object-rest-spread\/test\/fixtures\/object-rest\/variable-destructuring\/output.js\r\n\r\nIt will be more difficult to fix there, though, as it would have to start tinkering with non-rest property bindings, which it currently doesn't do.\r\n\r\nBut I feel that the other plugin shouldn't be doing this at all. It should do one thing (spread) and do it well. Destructuring is a totally different thing, and trying to transpile just the `BindingRestElement` while leaving the rest of the declaration alone is a lost cause. It may work fine 99.99% of the time, but unless you transpile the whole declaration, there's no way to match spec evaluation order in non-trivial cases.\r\n```js\r\nvar { [A]: { [B]: first, ...xs }, [C]: third, ...ys } = obj;\r\n```\r\nI can't see how you would transpile just the `...xs` and `...ys` parts without changing observable evaluation order \u2014 `toString` on the keys, or reading `obj[A]` twice.\r\n","That specific example could be compiled to\r\n```js\r\nvar first, xs, _B, _A, _C;\r\nvar {\r\n      [_A = babelHelpers.toPropertyKey(A)]: _tmp,\r\n      [({ [_B = babelHelpers.toPropertyKey(B)]: first } = _A,\r\n        xs = babelHelpers.objectWithoutProperties(_A, [_B]),\r\n        _C = C\r\n      )]: third\r\n    } = obj,\r\n    ys = babelHelpers.objectWithoutProperties(obj, [_A, _C]);\r\n```\r\n\r\nbut this technique doesn't work with array destructuring.\r\n\r\nA few years ago I tried designing a correct output at https:\/\/gist.github.com\/nicolo-ribaudo\/f8ac7916f89450f2ead77d99855b2098, but I never finished it.","That's clever. However I still don't understand the need for handling this construct in two plugins, one fully unpacking the destructuring pattern, one only unpacking `...rest` elements. Although they produce different output, the parsing and ordering logic has to be duplicated, and as shown is hard to get right.\r\n","It's because there are many browsers that support destructuring (ES2015 aka ES6) but not object rest\/spread (ES2017), so you'll want to only compile the latter in some cases.\r\n\r\nBut yes, the duplicate implementation is a problem and in the future I'll merge the plugins, doing something similar to https:\/\/github.com\/babel\/babel\/pull\/13260.","Would it then be possible for `plugin-transform-destructuring` to detect the target and apply its transform selectively per node? If `(target < ES2015 || (target < ES2017 && hasRestElement))` then do the full transform. Not the same thing `plugin-proposal-object-rest-spread` currently does, but the upside is no need for \"merging\", simply remove destructuring logic from `plugin-proposal-object-rest-spread`.\r\n","Yeah that's a really good idea. It will need to wait for Babel 8, but we can start introducing that behavior behind an option."],"labels":["PR: Bug Fix :bug:","Spec: Object Rest\/Spread"]},{"title":"[Bug]: []plugin-transform-async-to-generator] doesn't transform `for await` correctly","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nbabel-loader (webpack)\r\n\r\n### Input code\r\n\r\nhttps:\/\/babeljs.io\/repl\/#?browsers=last%201%20Chrome%20version&build=&builtIns=false&corejs=3.6&spec=true&loose=true&code_lz=BQQwzgngdgxgBMAlHAvAPjgbwFBzjAeyjABc4DU4QB3EASzIAUAnAgWzrAFMA6ZrsAQA2ANy7AAjIgDcufEUFDeQggHNgBGXIBmBZlVoMEhYmQoFtcANoSANHABM9gMwBdZCcXK1GrQF9EJFkgA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=unambiguous&lineWrap=false&presets=&prettier=false&targets=&version=7.14.7&externalPlugins=%40babel%2Fplugin-transform-async-to-generator%407.14.5\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n```json\r\n{\r\n  \"sourceType\": \"unambiguous\",\r\n  \"plugins\": [\r\n    \"@babel\/plugin-transform-async-to-generator\"\r\n  ],\r\n}\r\n```\r\n\r\n### Current and expected behavior\r\n\r\nCurrently the `for await` is not transformed into a generator, which causes an `await` keyword to exist not within `async` function. \r\n\r\n### Environment\r\n```\r\n  System:\r\n    OS: macOS 11.2.3\r\n  Binaries:\r\n    Node: 12.20.2 - ~\/.nvm\/versions\/node\/v12.20.2\/bin\/node\r\n    Yarn: 1.22.10 - ~\/.nvm\/versions\/node\/v12.20.2\/bin\/yarn\r\n    npm: 6.1.0 - ~\/.nvm\/versions\/node\/v12.20.2\/bin\/npm\r\n  Monorepos:\r\n    Yarn Workspaces: 1.22.10\r\n  npmPackages:\r\n    @babel\/core: 7.14.6 => 7.14.6 \r\n    @babel\/generator: 7.14.5 => 7.14.5 \r\n    @babel\/helper-annotate-as-pure: 7.14.5 => 7.14.5 \r\n    @babel\/plugin-transform-runtime: 7.14.5 => 7.14.5 \r\n    @babel\/preset-env: 7.14.7 => 7.14.7 \r\n    @babel\/runtime: 7.14.6 => 7.14.6 \r\n    @babel\/template: 7.14.5 => 7.14.5 \r\n    babel-loader: 8.2.2 => 8.2.2 \r\n    eslint: 7.29.0 => 7.29.0 \r\n    webpack: 5.40.0 => 5.40.0 \r\n```\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @alan-agius4! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","Hey \ud83d\udc4b \r\n\r\nBe happy to help \u270b \r\n\r\nMaybe something wrong on the [generator package](https:\/\/github.com\/babel\/babel\/tree\/main\/packages\/babel-generator) ? ","It's because `for-await` is compiled by `@babel\/plugin-proposal-async-generator-functions` (since `for await` is about async iterables introduced by async generators).\r\n\r\nWe should probably throw an explicit error in the `async-to-generator` plugin.","Hi @nicolo-ribaudo \r\n\r\nI don't really understand why we should throw something ?\r\n\r\nCould you give more details ? (sorry for that :|)","When we compile async functions to generators, if there is a `for await` statement we generate invalid code:\r\nhttps:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=false&corejs=3.6&spec=false&loose=false&code_lz=IYZwngdgxgBAZgV2gFwJYHsLwBQEoYDeAUDPOgE4zADuwqyM2AHjOnDGLgNxEC-QA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=&prettier=false&targets=&version=7.14.7&externalPlugins=%40babel%2Fplugin-transform-async-to-generator%407.14.5\r\n\r\nWe should throw an error so that if we would generate invalid code we fail at build time."],"labels":["area: errors"]},{"title":"Do not parse async arrow type on all false","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | https:\/\/github.com\/babel\/babel\/pull\/13387\/files#r641736539\r\n| Patch: Bug Fix?          | Y\r\n| Tests Added + Pass?      | Yes\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nChecks `all: boolean` when we are parsing an ambiguous async arrow head. When `all` is `false`, `async < T > (x)` should be parsed as a nested binary expression instead of a call expression with flow type arguments.\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/13464\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\n\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/46889\/","This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/13464\/builds\/139774) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit 2e53c052d5cc650187aaff708a763f7895ac47b5:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-l35i4)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-9w1ms)| Configuration |\n","This one is a PITA to get correct without lots of overhead :) You should try to do speculative parsing, and reduce the amount of invalid cases where it's actually needed to speculate. E.g. `async <{}>(x) >> y + z` can be parsed straight out as a binary expr.  No need for lookahead \/ speculative parsing. \r\n\r\nI'm 90% done with my own refactoring of this edge cases. Maybe you can get some inspiration there :)","@JLHwung Here is a few edge cases that may help you solve this.  `async  <T, U>(x) >> y - z;`, `(async <T>(x));`, `(async<{}>(x));`, `(async <T>[(x)]);`, and `(async <T: U>(x) => y);`. I have 20+ more of this cases in the kataw repo.","Whops, I didn't mean to approve."],"labels":["PR: Spec Compliance :eyeglasses:","pkg: parser"]},{"title":"[Bug]: SSR with Node, Express, React, Babel, Webpack","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nOther (Next.js, Gatsby, vue-cli, ...)\r\n\r\n### Input code\r\n\r\n```js\r\nconst nodeExternals = require(\"webpack-node-externals\");\r\n\/\/import nodeExternals from \"webpack-node-externals\"\r\n\r\nconst common = {\r\n  devtool: \"cheap-module-source-map\",\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: \/\\.(js|jsx)$\/,\r\n        use: {\r\n          loader: \"babel-loader\", \/\/ asks bundler to use babel loader to transpile es2015 code\r\n          options: {\r\n            presets: [\"@babel\/preset-env\", \"@babel\/preset-react\"],\r\n          },\r\n        },\r\n        exclude: [\/node_modules\/, \/public\/],\r\n      },\r\n      {\r\n        test: \/\\.css$\/,\r\n        use: [\"style-loader\", \"css-loader\"],\r\n      },\r\n      {\r\n        test: \/\\.(jpe?g|png|gif|woff|woff2|eot|ttf)(\\?[a-z0-9=.]+)?$\/,\r\n        use: \"url-loader?limit=100000\",\r\n      },\r\n      {\r\n        test: \/\\.svg$\/,\r\n        use: [\"@svgr\/webpack\"],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst clientConfig = {\r\n  ...common,\r\n  entry: \".\/client\/src\/index\",\r\n  output: {\r\n    path: `${__dirname}\/public`,\r\n  },\r\n};\r\n\r\nconst serverConfig = {\r\n  ...common,\r\n  target: \"node\",\r\n  externals: [nodeExternals()],\r\n  entry: \".\/server.js\",\r\n  output: {\r\n    path: `${__dirname}\/dist`,\r\n  },\r\n};\r\n\r\nmodule.exports = [clientConfig, serverConfig];\r\n\r\n```\r\n\r\n### Configuration file name\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Current and expected behavior\r\n\r\nWhen running `npm run start` it get the following error:\r\n\r\n```\r\nnode:internal\/modules\/cjs\/loader:1126\r\n      throw new ERR_REQUIRE_ESM(filename, parentPath, packageJsonPath);\r\n      ^\r\n\r\nError [ERR_REQUIRE_ESM]: Must use import to load ES Module: \/<PATH_HERE>\/node_modules\/@babel\/runtime\/helpers\/esm\/extends.js\r\nrequire() of ES modules is not supported.\r\nrequire() of \/<PATH_HERE>\/node_modules\/@babel\/runtime\/helpers\/esm\/extends.js from \/<PATH_HERE>\/dist\/main.js is an ES module file as it is a .js file whose nearest parent package.json contains \"type\": \"module\" which defines all .js files in that package scope as ES modules.\r\nInstead rename extends.js to end in .cjs, change the requiring code to use import(), or remove \"type\": \"module\" from \/<PATH_HERE>\/node_modules\/@babel\/runtime\/helpers\/esm\/package.json.\r\n```\r\n\r\n### Environment\r\n\r\n    \"@babel\/runtime\": \"^7.14.0\",\r\n    \"@babel\/core\": \"^7.14.3\",\r\n    \"@babel\/plugin-proposal-class-properties\": \"^7.13.0\",\r\n    \"@babel\/plugin-transform-runtime\": \"^7.14.3\",\r\n    \"@babel\/preset-env\": \"^7.14.4\",\r\n    \"@babel\/preset-react\": \"^7.13.13\",\r\n    \"babel-loader\": \"^8.2.2\",\r\n    \"babel-plugin-import\": \"^1.13.3\",\r\n    \"babel-plugin-transform-assets\": \"^1.0.2\",\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\nMy package.json file:\r\n\r\n```json\r\n{\r\n  \"name\": \"Website Name\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"My Website\",\r\n  \"main\": \"dist\/main.js\",\r\n  \"module\": \"dist\/main.js\",\r\n  \"scripts\": {\r\n    \"client-install\": \"npm install --prefix client\",\r\n    \"start\": \"NODE_ENV=production node dist\/main.js\",\r\n    \"build\": \"rm -rf dist public && webpack --mode production --progress\",\r\n    \"server\": \"nodemon server.js\",\r\n    \"heroku-postbuild\": \"npm install --prefix client && npm run build\",\r\n    \"dev\": \"rm -rf dist public && webpack --mode development --progress\"\r\n  },\r\n  \"author\": \"It's me\",\r\n  \"license\": \"MIT\",\r\n  \"dependencies\": {\r\n    \"@babel\/runtime\": \"^7.14.0\",\r\n    \"@material-ui\/core\": \"^4.11.4\",\r\n    \"@material-ui\/icons\": \"^4.11.2\",\r\n    \"@material-ui\/styles\": \"^4.11.4\",\r\n    \"@svgr\/webpack\": \"^5.5.0\",\r\n    \"bcrypt\": \"^5.0.0\",\r\n    \"cjs-loader\": \"^0.1.0\",\r\n    \"compression\": \"^1.7.4\",\r\n    \"concurrently\": \"^5.3.0\",\r\n    \"cors\": \"^2.8.5\",\r\n    \"css-loader\": \"^5.2.5\",\r\n    \"dotenv\": \"^8.2.0\",\r\n    \"express\": \"^4.17.1\",\r\n    \"file-loader\": \"^6.2.0\",\r\n    \"humps\": \"^2.0.1\",\r\n    \"ignore-styles\": \"^5.0.1\",\r\n    \"jsonwebtoken\": \"^8.5.1\",\r\n    \"lodash\": \"^4.17.21\",\r\n    \"mongoose\": \"^5.11.8\",\r\n    \"normalizr\": \"^3.6.1\",\r\n    \"react\": \"^17.0.2\",\r\n    \"react-dom\": \"^17.0.2\",\r\n    \"react-hot-loader\": \"^4.13.0\",\r\n    \"react-router\": \"^6.0.0-beta.0\",\r\n    \"redux\": \"^4.1.0\",\r\n    \"redux-logger\": \"^3.0.6\",\r\n    \"style-loader\": \"^2.0.0\",\r\n    \"url-loader\": \"^4.1.1\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel\/core\": \"^7.14.3\",\r\n    \"@babel\/plugin-proposal-class-properties\": \"^7.13.0\",\r\n    \"@babel\/plugin-transform-runtime\": \"^7.14.3\",\r\n    \"@babel\/preset-env\": \"^7.14.4\",\r\n    \"@babel\/preset-react\": \"^7.13.13\",\r\n    \"babel-loader\": \"^8.2.2\",\r\n    \"babel-plugin-import\": \"^1.13.3\",\r\n    \"babel-plugin-transform-assets\": \"^1.0.2\",\r\n    \"html-webpack-plugin\": \"^5.3.1\",\r\n    \"nodemon\": \"^2.0.4\",\r\n    \"npm-run-all\": \"^4.1.5\",\r\n    \"react-jss\": \"^10.6.0\",\r\n    \"webpack\": \"^5.38.1\",\r\n    \"webpack-cli\": \"^4.7.0\",\r\n    \"webpack-dev-server\": \"^3.11.2\",\r\n    \"webpack-merge\": \"^5.7.3\",\r\n    \"webpack-node-externals\": \"^3.0.0\"\r\n  }\r\n}\r\n\r\n\r\n```","comments":["Hey @mib122! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\""],"labels":["i: needs triage"]},{"title":"[Bug]: plugin-proposal-decorators fails when using a private field in a decorated class property function field","body":"### \ud83d\udcbb\r\n\r\n- [ ] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\nbabel-loader (webpack)\r\n\r\n### Input code\r\n\r\n```js\r\n\r\nclass Example {\r\n  #priv;\r\n\r\n  @anydecorator\r\n  method = () => {\r\n    return this.#priv;\r\n  };\r\n}\r\n```\r\n\r\n### Configuration file name\r\n\r\nbabel.config.js\r\n\r\n### Configuration\r\n\r\n```js\r\n\r\nmodule.exports = {\r\n  presets: [\r\n    [\r\n      \"@babel\/preset-env\",\r\n      {\r\n        targets: [\"last 1 chrome versions\"],\r\n      },\r\n    ],\r\n  ],\r\n  plugins: [\r\n    [\"@babel\/plugin-proposal-decorators\", { legacy: true }],\r\n    [\"@babel\/plugin-proposal-class-properties\"],\r\n  ],\r\n};\r\n```\r\n\r\n### Current and expected behaviour\r\n\r\nGetting a syntax error where it shouldn't. Using a class method syntax instead works without issue. you can have a look at this sandbox: https:\/\/codesandbox.io\/s\/hungry-forest-px5l5\r\n\r\n```\r\nSyntaxError: \/Users\/jraoult\/Desktop\/babel-decorator\/src\/index.js: Unknown PrivateName \"#priv\"\r\n  4 |   @anydecorator\r\n  5 |   method = () => {\r\n> 6 |     return this.#priv;\r\n    |                 ^^^^^\r\n  7 |   };\r\n  8 | }\r\n  9 |\r\n```\r\n\r\n### Environment\r\n\r\n System:\r\n    OS: macOS 11.3.1\r\n  Binaries:\r\n    Node: 14.17.0 - ~\/.nvm\/versions\/node\/v14.17.0\/bin\/node\r\n    Yarn: 1.22.10 - \/usr\/local\/bin\/yarn\r\n    npm: 7.13.0 - ~\/.nvm\/versions\/node\/v14.17.0\/bin\/npm\r\n  npmPackages:\r\n    @babel\/core: 7.14.3 => 7.14.3 \r\n    @babel\/plugin-proposal-class-properties: 7.13.0 => 7.13.0 \r\n    @babel\/plugin-proposal-decorators: 7.14.2 => 7.14.2 \r\n    @babel\/preset-env: 7.14.2 => 7.14.2 \r\n    babel-loader: 8.2.2 => 8.2.2 \r\n    webpack: 5.37.1 => 5.37.1\r\n\r\n### Possible solution\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_","comments":["Hey @jraoult! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","I had the same problem"],"labels":["i: needs triage"]},{"title":"BABEL_SHOW_CONFIG_FOR - show final, merged config","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nWhen using `BABEL_SHOW_CONFIG_FOR` it shows all configs used in ascending priority. It would be cool if it at the end of all priorities, shows a \"Complete merged config\" that just shows exactly the options that will be used.\n\n### Describe the solution you'd like\n\nAdd a part at the end of the output that could look like this:\r\n\r\n```sh\r\nBabel configs on \"\/home\/userA\/code\/projectA\/server\/util\/__tests__\/crypt.unit.test.js\" (ascending priority):\r\nconfig \/home\/userA\/code\/projectA\/babel.config.json\r\n{\r\n  \"presets\": [\r\n    [\r\n      \"@babel\/preset-env\",\r\n      {\r\n        \"targets\": {\r\n          \"node\": \"current\"\r\n        },\r\n        \"shippedProposals\": true\r\n      }\r\n    ]\r\n  ]\r\n}\r\n\r\nconfig \/home\/userA\/code\/projectA\/babel.config.json .overrides[0]\r\n{\r\n  \"test\": \".\/server\/\",\r\n  \"plugins\": [\r\n    \"babel-plugin-transform-import-meta\",\r\n    \"@babel\/plugin-transform-modules-commonjs\"\r\n  ],\r\n  \"presets\": [\r\n    [\r\n      \"@babel\/preset-env\",\r\n      {\r\n        \"targets\": {\r\n          \"node\": \"current\"\r\n        },\r\n        \"shippedProposals\": true\r\n      }\r\n    ]\r\n  ]\r\n}\r\n\r\nprogrammatic options from @babel\/cli\r\n{\r\n  \"sourceFileName\": \"server\/util\/__tests__\/crypt.unit.test.js\",\r\n  \"caller\": {\r\n    \"name\": \"@babel\/cli\"\r\n  },\r\n  \"filename\": \"server\/util\/__tests__\/crypt.unit.test.js\"\r\n}\r\n\r\nFinal merged config:\r\n{\r\n  ...\r\n  ...\r\n  ...\r\n}\r\n```\n\n### Describe alternatives you've considered\n\nAnother option would be to have another env var `BABEL_SHOW_CONFIG_FOR_MERGED` to just show the final, merged config. But I feel it makes more sense to include this in the already existing env var.\n\n### Documentation, Adoption, Migration Strategy\n\nEven though the docs around merging could improve, see e.g. https:\/\/github.com\/babel\/website\/issues\/2536, it would maybe alleviate the problem a bit for some users.","comments":["Hey @thernstig! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","I like this idea"],"labels":["i: enhancement"]},{"title":"Permit specifying top-level `browserslistEnv` in presets","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on this feature?\n\n### What problem are you trying to solve?\n\nI maintain a [company-wide Babel preset](https:\/\/github.com\/kensho-technologies\/babel-preset). Generally, our apps are bundled twice to target modern and legacy browsers, respectively. The specific list of modern and legacy browsers varies between apps. (For example, App 1 might have a modern target of \"latest FF\" and a legacy target of \"IE 11\", whereas App 2 might have a modern target of \"latest Chrome\" and a legacy target of \"FF ESR\".)\r\n\r\nWe currently solve this by having the preset do something like this:\r\n\r\n```js\r\nmodule.exports = (api) => {\r\n  const env = api.env()\r\n  const browserslistEnv = env === 'modern' ? 'modern' : 'legacy'\r\n  return {presets: [['@babel\/preset-env', {browserslistEnv}]]}\r\n}\r\n```\r\n\r\nEach app is responsible for declaring a `.browserslistrc` containing `modern` and `legacy` groups, by convention, with the bundler passing the correct `envName` to Babel. This allows each app's Babel config to be only: `{presets: ['@kensho-technologies\/babel-preset']}`.\r\n\r\nI don't see how we can implement this using the new top-level `browserslistEnv` option without moving the config into each app, since it cannot currently be specified inside of presets.\n\n### Describe the solution you'd like\n\nIdeally, the preset could specify the top-level `browserslistEnv` option. \r\n\r\nI see that this limitation is mentioned in the [RFC's drawbacks](https:\/\/github.com\/babel\/rfcs\/blob\/master\/rfcs\/0002-top-level-targets.md#drawbacks) and I understand the distinction that it draws between \"target providers\" and \"target consumers\". (That note focuses on presets that want to specify `targets` which isn't quite the case here, but I think the principle is the same.)\r\n\r\nI haven't thought through this problem nearly as much as y'all have, but, at first glance, it seems conceptually odd to only be able to think of presets as \"target consumers\". From my perspective, the purpose of the company-wide preset is to provide a complete base config that projects can opt into to become fully configured; it's a provider in every available sense. This is basically the same argument that's presented in the [`assumptions` RFC](https:\/\/github.com\/babel\/rfcs\/blob\/master\/rfcs\/0003-top-level-assumptions.md#new-configuration-option) as motivation to permit specifying that option in presets.\r\n\r\nIs there a technical limitation that I haven't considered? Is the issue essentially that `@babel\/preset-env` needs to be able to query the targets, necessitating presets as consumers?\n\n### Describe alternatives you've considered\n\nAs mentioned, the alternative would be to move `browserslistEnv` into the Babel config for each app, defeating one purpose of the preset. The bundler could also pass `browserslistEnv` directly, but the preset uses Babel env to determine more than just the browserslist env, so this would still result in additional config for each app.\n\n### Documentation, Adoption, Migration Strategy\n\n_No response_","comments":["Hey @billyjanitsch! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","`browserslistEnv` must be resolved at the same time as the other `targets`-related options, since they all affect how targets are resolved. We already got other requests to allow them to be specified in presets, but we need to respect a few constraints:\r\n- Presets should be able to read the resolved targets if they need it\r\n- The resolved \"targets\" must be stable: we must not pass to presets a \"partial\" targets object which might still change\r\n\r\nSomething that we could do is to allow reading `api.targets()` in presets, but to throw an error if another preset sets `targets` (or any related option) after than `api.targets()` has already been read by a different preset.\r\n\r\nPresets are a tree\/DAG (each preset can have any number of children presets) and they are executed\/instantiated in breadth-first order.\r\nThis means that:\r\n- Child preset can access `targets` defined by parent presets\r\n- Sibling presets can access `targets` defined by previous presets\r\n- Child preset can access `targets` defined by any sibling (either before or after) of the parent preset. I dislike this, but disallowing it would require completely changing the order we instantiate presets to be depth-first in-order."],"labels":["i: enhancement","i: needs triage"]},{"title":"[wip] Allow gradual compilation of class features","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n### This PR is far from being ready, but it's easier for me to review the `input`\/`output` fixtures on GH rather than locally\r\n### Don't look at this!\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | `Fixes #1, Fixes #2` <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\nI'm sorry, this PR is getting big but it's not splittable in multiple PRs. Rather than clicking on \"Files\", you can use this link so that all the files are collapsed and it won't freeze your browser: https:\/\/github.com\/babel\/babel\/pull\/13260\/files?file-filters%5B%5D=.md. Since the diff is just new files, I suggest reviewing it locally.\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/13260\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\r\n\r\n","comments":["This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/13260\/builds\/153554) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit e471d023846d29668e433302cf5ea00126c865fc:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-pz02r)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-yotyp)| Configuration |\n","Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/47602\/"],"labels":["PR: New Feature :rocket:","Spec: Class Fields"]},{"title":"[Bug]: plugin-transform-block-scoping constant checks treats deconstruction incorrectly","body":"### \ud83d\udcbb\n\n- [ ] Would you like to work on a fix?\n\n### How are you using Babel?\n\n@babel\/cli\n\n### Input code\n\n```js\r\nconst c = 0;\r\nlet x = 1, y = 2;\r\ntry {\r\n  [x, c, y] = [11, 0, 22];\r\n} catch (e) {\r\n  console.log( { x, y } );\r\n}\r\n```\r\n\r\n[REPL](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=false&corejs=3.6&spec=false&loose=true&code_lz=MYewdgzgLgBMMF4YAYDcAoANgU1gD0RgEYAaGAT0ICYMoAnSgb3RhgG08zgzyBdQtkVIoyVKrwwBfOAEMowABYwAFNgCUMZq1CQQOAHSYQAc2WNOFSWqnogA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=&prettier=false&targets=Node-10&version=7.14.0&externalPlugins=%40babel%2Fplugin-transform-block-scoping%407.13.16) \n\n### Configuration file name\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Current and expected behavior\n\n`[x, c, y] = [11, 0, 22]` is transformed to `[11, 0, 22], _readOnlyError(\"c\")`.\r\n\r\nOriginal logs `{x: 11, y: 2}` whereas transpiled code logs `{x: 1, y: 2}`. It should assign to `x` before throwing, but not assign to `c` or `y`.\n\n### Environment\n\nBabel REPL\n\n### Possible solution\n\nBest solution I can see is:\r\n\r\n```js\r\n\/\/ Assignments to `c` and `y` have been removed\r\n[x] = [11, 0, 22], _readOnlyError(\"c\");\r\n```\r\n\r\nIf there's a nested object\/array on the receiving end of the assignment, all elements before the const-violating identifier should be retained, and all after it removed - at all levels of the nested object\/array.\r\n\r\ni.e.: if `c` is a const:\r\n\r\nInput: `[ p, q, { r: [ ...s ], t: [ u, c, v ], w, ...x }, y, ...z ] = arr;`\r\nOutput: `[ p, q, { r: [ ...s ], t: [ u ] } ] = arr, _readOnlyError(\"c\");`\r\n\r\n(note `c`, `v`, `w`, `x`, `y` and `z` have all been removed)\r\n\r\nNB `c` may also have a default e.g. `{ c = 1 } = {}`\n\n### Additional context\n\n#13248 fixed some other cases where const violations were transformed incorrectly, but didn't fix this one.","comments":["Hey @overlookmotel! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","Actually, solution is a bit more complex due to getters. e.g.:\r\n\r\n```js\r\nlet getterIsCalled = false;\r\nconst obj = {\r\n  get x() {\r\n    getterIsCalled = true;\r\n  }\r\n};\r\n\r\ntry {\r\n  const c = 1;\r\n  ( { x: c } = obj );\r\n} catch (e) {\r\n  console.log( getterIsCalled );\r\n}\r\n```\r\n\r\nThis logs \"true\".\r\n\r\nSo, to make sure getter is called before throwing, transformation would need to be:\r\n\r\n```js\r\nvar c = 1;\r\nvar _c;\r\n( { x: _c } = obj ), _readOnlyError(\"c\");\r\n```","Same bug with imports which are assigned to in object\/array deconstruction in [plugin-transform-modules-commonjs](https:\/\/babeljs.io\/docs\/en\/babel-plugin-transform-modules-commonjs). e.g.: this is not transformed correctly:\r\n\r\n```js\r\nimport c from 'foo';\r\nlet x = 0;\r\n[ x, c ] = [ 1, 2 ];\r\n```","There is one rather ugly solution which would be easier to implement.\r\n\r\nInput:\r\n\r\n```js\r\nconst c = 1;\r\nlet x = 0, y = 0;\r\n( { x, c, y } = { x: 1, c: 2, y: 3 } );\r\n```\r\n\r\nOutput:\r\n\r\n```js\r\nfunction _readOnlyErrorObject(name) {\r\n  return {\r\n    set a(v) {\r\n       _readOnlyError(name);\r\n    }\r\n  };\r\n}\r\n\r\nvar c = 1;\r\nvar x = 0, y = 0;\r\n( { x, c: _readOnlyErrorObject(\"c\").a, y } = { x: 1, c: 2, y: 3 } );\r\n```\r\n\r\nThis does behave correctly - the error only gets thrown when the setter is triggered, so `x` is assigned to, `y` is not, and any getter on the `c` property of right-hand object is called before throwing.\r\n\r\nIf you'd be willing to accept such an ugly solution, I'd be willing to make a PR.","Would reusing the existing helper work?\r\n```js\r\nvar c = 1;\r\nvar x = 0, y = 0;\r\n[ x, _readOnlyError(\"c\")._, y ] = [ 1, 2, 3 ];\r\n```\r\n`._` is just needed to have a syntactically valid code, it's never actually evaluated.","@nicolo-ribaudo No. I tried that. Problem is that `_readOnlyError(\"c\")` gets evaluated before the property getter on object on right-hand side gets called. So the error is thrown prematurely. Using a setter on the object being assigned to is the only way around it I could find.\r\n\r\nI mean:\r\n\r\n```js\r\nconst obj = {\r\n  get c() {\r\n    console.log('getter called');\r\n  }\r\n};\r\n\r\nconst c = 0;\r\nlet x;\r\n( {x, c} = obj );\r\n```\r\n\r\nThe original logs \"getter called\" but if `_readOnlyError(\"c\")._` is substituted for `c`, it doesn't.","Oh ok. Using a new helper looks good to me then (I'm working on almost the same thing but for private methods, and I didn't notice that `readOnlyError()._` doesn't work).","Well it doesn't work in Node anyway.\r\n\r\nStripping out assignments which will never be made is a cleaner solution in terms of producing more minimal output:\r\n\r\nInput:\r\n\r\n```js\r\nconst c = 0;\r\nlet x, y;\r\n[ x, c, y ] = [ 1, 2, 3 ];\r\n```\r\n\r\nOutput:\r\n\r\n```js\r\nvar c = 0;\r\nvar x, y;\r\nvar _c;\r\n[ x, _c ] = [ 1, 2, 3 ], _readOnlyError(\"c\");\r\n```\r\n\r\nThis also works perfectly. It's just that it'd be a pain to implement handling when the object\/array on the left is nested - `[ x, [ { y, c }, ...z ], q, v ]` etc.","I prefer the new runtime helper: even if it generates more code at runtime, this is an edge case and I don't think it's worth the implementation complexity.","OK great. I'll get onto that at some point. I'm afraid it may be a long time before I do though - really busy with work at the moment.","By the way, I was intending to amend [plugin-transform-modules-commonjs](https:\/\/babeljs.io\/docs\/en\/babel-plugin-transform-modules-commonjs) to reuse the `_readOnlyError` helper. Currently it produces this function to throw an error inline every time.\r\n\r\nHowever, I couldn't figure out how to access `state.addHelper()` deep within https:\/\/github.com\/babel\/babel\/blob\/main\/packages\/babel-helper-module-transforms\/src\/rewrite-live-references.ts Any ideas?","It's a change that we should do, but the answer is not nice :stuck_out_tongue: \r\n\r\nYou need to pass `state`\/`file` as a parameter to `@babel\/helper-module-transforms`, but also keep a fallback for when `state` is not passed (otherwise it would be a breaking change)","Uck. I generally consider that the documentation is the public API contract. In this case, it is... minimal.\r\n\r\nhttps:\/\/babeljs.io\/docs\/en\/babel-helper-module-transforms","It doesn't matter, every older version of `@babel\/plugin-transform-modules-commonjs` would break if we add a new required parameter."],"labels":["i: bug"]},{"title":"[Bug]: @babel\/plugin-transform-react-jsx references top-level \"this\" which is not defined in ESM","body":"### \ud83d\udcbb\r\n\r\n- [X] Would you like to work on a fix?\r\n\r\n### How are you using Babel?\r\n\r\n@rollup\/plugin-babel\r\n\r\n### Input code\r\n\r\nConsider the following React functional component:\r\n\r\n```js\r\n\/\/ my-component.jsx\r\nexport const MyComponent = () => {\r\n  return (\r\n    <span>Hello<\/span>\r\n  );\r\n};\r\n```\r\n\r\n\u2026 which is getting transpiled to the following code by Babel:\r\n\r\n```js\r\nvar _jsxFileName = \"\u2026\/my-component.jsx\";\r\nimport { jsxDEV as _jsxDEV } from \"react\/jsx-dev-runtime\";\r\nexport const MyComponent = () => {\r\n  return \/*#__PURE__*\/_jsxDEV(\"span\", {\r\n    children: \"Hello\"\r\n  }, void 0, false, {\r\n    fileName: _jsxFileName,\r\n    lineNumber: 4,\r\n    columnNumber: 5\r\n  }, this);\r\n};\r\n```\r\n\r\nNotice the last argument (`this`) of the call to the `_jsxDEV` function.\r\n\r\n### Configuration file name\r\n\r\nbabel.config.json\r\n\r\n### Configuration\r\n\r\n```json\r\n{\r\n  \"presets\": [\r\n    [\"@babel\/preset-react\", {\r\n      \"runtime\": \"automatic\",\r\n      \"development\": true\r\n    }]\r\n  ]\r\n}\r\n```\r\n\r\n### Current and expected behavior\r\n\r\nThis causes warning when using Rollup to build the ES module.\r\n\r\n### Environment\r\n\r\n```json\r\n\"@babel\/core\": \"^7.14.0\",\r\n\"@babel\/preset-react\": \"^7.13.13\",\r\n\"@rollup\/plugin-babel\": \"^5.3.0\",\r\n\"rollup\": \"^2.46.0\",\r\n```\r\n\r\n```bash\r\n$ node --version\r\nv14.16.1\r\n```\r\n\r\n```bash\r\n$ uname -a\r\nLinux \u2026 5.4.0-72-lowlatency #80-Ubuntu SMP PREEMPT Mon Apr 12 18:37:24 UTC 2021 x86_64 x86_64 x86_64 GNU\/Linux\r\n```\r\n\r\n```bash\r\n$ cat \/etc\/issue\r\nUbuntu 20.04.2 LTS\r\n```\r\n\r\n### Possible solution\r\n\r\nActually, I'm not sure what party should take measures regarding this issue, so I would appreciate another opinion on this.\r\n\r\n### Additional context\r\n\r\nUsing the mentioned `this` keyword in a global context produces the following warning in Rollup:\r\n\r\n> **Error: \"this is undefined\"**\r\n>\r\n> In a JavaScript module, this is undefined at the top level (i.e., outside functions). Because of that, Rollup will rewrite any this references to undefined so that the resulting behaviour matches what will happen when modules are natively supported.\r\n>\r\n> There are occasional valid reasons for this to mean something else. If you're getting errors in your bundle, you can use options.context and options.moduleContext to change this behaviour.\r\n\r\nThis effectively replaces `this` with the `undefined`.","comments":["Hey @slavafomin! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","It works as intended. The `this` here passed to `jsxDEV` is\r\n\r\n> A *temporary* helper to detect places where `this` is\r\n> different from the `owner` when React.createElement is called, so that we\r\n> can warn. We want to get rid of owner and replace string `ref`s with arrow\r\n> functions, and as long as `this` and owner are the same, there will be no\r\n> change in behavior.\r\n\r\nquoted from the [source](https:\/\/github.com\/facebook\/react\/blob\/0e100ed00fb52cfd107db1d1081ef18fe4b9167f\/packages\/react\/src\/jsx\/ReactJSXElement.js#L138-L142). So the intention is to print a warning for the string refs, e.g. `this.refs.textInput` in the `render()` when `this` is not the one where the component is initialized.\r\n\r\nNote that in your cases you cannot use `this.refs` in an arrow function because `this` is `undefined` in modules so a reference error will always be thrown before this warning message can be emitted.","I'm afraid I can't quite comprehend all the intrinsic details regarding this issue, therefore I'm not sure what should be done about it. Could you recommend a course of action for us? Should we ignore (filter out) these warnings, or should Rollup treat this case differently?","I think we can update the transform so this is turned into `undefined` is there's not a non-arrow function wrapping the node. The relevant `self` checks only make sense when they're inside a non-arrow function, arrow functions (that aren't nested in a non-arrow) function cannot have the bad behavior they're trying to check.","Relevant line is https:\/\/github.com\/babel\/babel\/blob\/b2d9156cc62d37f4c522c9505a00f50b99a1eb74\/packages\/babel-plugin-transform-react-jsx-self\/src\/index.js#L25, we need to check if there's any parent that's a non-arrow function\/method. If there is, then use `this`, else `undefined`.","I'm not sure, but shouldn't it be fixed here?\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/b2d9156cc62d37f4c522c9505a00f50b99a1eb74\/packages\/babel-plugin-transform-react-jsx\/src\/create-plugin.js#L464-L473","In both places: `__self` is necessary when using the old transform, and the code you pointed out is when using the \"automatic\" jsx runtime.\r\n\r\nIf you only want to fix it for the automatic transform (the code you linked), that's ok: we never got any report about the old transform using `this` anyway :shrug: "],"labels":["i: enhancement"]},{"title":"Default in Babel 8 to use @babel\/plugin-transform-runtime","body":"## Feature Request\r\n\r\n**Is your feature request related to a problem?**\r\nWe all want our bundles to be as small as possible. Using `@babel\/plugin-transform-runtime` definitely does this.\r\n\r\n**Describe the solution you'd like**\r\nIt would be nice if `@babel\/plugin-transform-runtime` was run by default. This helps double-up since first it will inject imports into files instead of helper functions, and then bundlers like Webpack will be even smarter to just use the code once. This is only beneficial to users.\r\n\r\n**Documentation, Adoption, Migration Strategy**\r\nThis needs to be done in babel 8 to not break current users setup.","comments":["Hey @thernstig! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","I think it's time to revive this thread now. Let's extend the requirement first:\r\n\r\n> We all want our bundles to be as small as possible, **and it should be easy to setup and understood by beginners.**\r\n\r\nFrom my perspective, Babel is on the right track. In my usecase for building a frontend app with the advantages listed:\r\n\r\n- It's clear for intermediate users that by `moduleName: '@babel\/runtime'` it does not include any _pure_ polyfills in the helpers provided by `@babel\/plugin-transform-runtime`. This removes the need for `core-js-pure`.\r\n- It's clear literally that `corejs3` is _probably_ the only polyfills provider and it adds _global_ polyfills upon usage only.\r\n- It's clear for intermediate users that by removing `\"useBuiltIns\"` option from `@babel\/preset-env`, it does not include any _global_ polyfills.\r\n\r\nMy config looks like this:\r\n\r\n```js\r\n\/\/ @filename: babel.config.mjs\r\nreturn {\r\n  plugins: [\r\n    '@babel\/plugin-transform-runtime', { moduleName: '@babel\/runtime' },\r\n    'babel-plugin-polyfill-corejs3', { method: 'usage-global' },\r\n  ],\r\n  presets: [\r\n    ['@babel\/preset-env', {...}], \/\/ without \"useBuiltIns\".\r\n    \/\/ ...\r\n  ]\r\n}\r\n```\r\n\r\nAs you can see, there are still some [leaky abstractions](https:\/\/en.wikipedia.org\/wiki\/Leaky_abstraction). (I will explain the details for beginners in the following section.) But I think it is a good starting point for asking some questions:\r\n\r\n- Is it possible to simplify it further?\r\n- Do we really have a usecase where a user does not want to extract helpers by `@babel\/plugin-transform-runtime`?\r\n- Do we really need to expose the ideas of pure\/global polyfills to developers when they just want to build an app?\r\n\r\n---\r\n\r\nThe following section is written for beginners.\r\n\r\nIt's intended to summarize\/clarify the long-opening thread:\r\n- #9853.\r\n\r\nFor a better referencing experience, please right-click every link with \"**Open Link in New Tab**\" to trigger the decent text-fragment feature I managed really hard for you.\r\n\r\n---\r\n\r\n### \ud83e\udd14 Using `@babel\/plugin-transform-runtime` for polyfills might not be a good idea for Apps\r\n\r\nFirst of all, you might not know that this plugin can add [_pure_ corejs polyfills](https:\/\/github.com\/babel\/babel\/blob\/3956c75123e713c5fa1d3279f6f92cfeac290173\/packages\/babel-runtime-corejs3\/package.json#L16) for you. I assume that most people are still using Babel v7(which is fine!), and I would like to mention some pitfalls before you might fall into any of those:\r\n\r\n1. If you're writing an **app** (i.e. anything will not be `import`ed), you probably don't want to bloat your bundle size by including \"too many\" pure polyfills from `@babel\/plugin-transform-runtime` when `corejs` set to either `2` or `3`, as it will **not** respect your browser targets. See: [the first problem](https:\/\/github.com\/babel\/babel-polyfills\/tree\/main?tab=readme-ov-file#:~:text=it%20wasn't%20possible%20to%20use) under \"Our old approach has two main problems\".\r\n\r\n2. If you're writing a **library**, or maybe you prefer _pure_ polyfills from `@babel\/plugin-transform-runtime` for some reason, you should remove the `\"useBuiltIns\"` option from `@babel\/preset-env` (in case you're using both). Otherwise, you will end up installing _two_ core-js libraries with different work styles (pure vs global) fighting for the same job(and `transform-runtime` will win, as it will be executed first), which means a bloated bundle again.\r\n\r\nOn the other hand, you should be aware that the `corejs` option of `@babel\/plugin-transform-runtime` [will be removed in Babel v8](https:\/\/github.com\/babel\/babel\/issues\/16310#:~:text=remove%20the%20corejs%20option). Why? That's for solving [the second problem](https:\/\/github.com\/babel\/babel-polyfills\/tree\/main?tab=readme-ov-file#:~:text=we%20forced%20our%20users%20to%20use) under \"Our old approach has two main problems\" and [avoiding overlapping](https:\/\/github.com\/babel\/babel\/issues\/16149#:~:text=as%20you%20can%20see%2C%20there%20is%20an%20overlap).\r\n\r\n---\r\n\r\n### \ud83d\ude35 Using `@babel\/plugin-transform-runtime` before version v7.18.0 is a bit complicated\r\n\r\nEnd of the pitfalls around polyfills for _basic stuff_. Now let's talk about the pitfalls around transpiling generator syntax:\r\n\r\n3. Before Babel v7.18.0, transforming generator syntax with only `@babel\/plugin-transform-regenerator`(which [is included in `@babel\/preset-env`](https:\/\/github.com\/babel\/babel\/blob\/87ec4fc3d2cf44c30ef007f7da47d7177e07ffec\/packages\/babel-preset-env\/package.json#L82)) was not enough [as it relies on a global runtime helper](https:\/\/github.com\/babel\/babel\/pull\/14538#:~:text=it%20relies%20on%20a%20globally%20available%20regeneratorruntime%20helper), which was not implemented\/included in the plugin itself. Instead, you had to either:\r\n\r\n    1. Import it manually with `import \"regenerator-runtime\"`.\r\n    2. Import it automatically with `@babel\/preset-env`'s [`\"useBuiltIns\": \"entry\"`](https:\/\/github.com\/babel\/babel\/issues\/8829#:~:text=if%20i%20switch%20to%20%22entry%22%20mode)(as there was a bug around `\"useBuiltIns\": \"usage\"`)\r\n    3. Import it automatically with `@babel\/transform-runtime`'s `\"regenerator\": true`. And yes, it was [the only thing still left as global](https:\/\/github.com\/babel\/babel\/pull\/14538#:~:text=where%20all%20the%20other%20helpers%20are%20%22pure%22) by `@babel\/transform-runtime` when `corejs: false`.\r\n\r\nAs long as you're on Babel v7.18.0 or above, there is NO global runtime helper anymore. It's _baked-in_: (basically a summary for #14538)\r\n\r\n- `@babel\/preset-env` does not depend on the global runtime helper. Instead, it becomes [an inlined function](https:\/\/github.com\/babel\/babel\/pull\/14538#:~:text=by%20default%20it%20can%20be%20injected%20inline%20in%20the%20code). But [it's huge](https:\/\/github.com\/babel\/babel\/pull\/14538#:~:text=the%20regeneratorruntime%20helper%20is%20huge), and you might want to consider `@babel\/transform-runtime`.\r\n- `@babel\/transform-runtime` does not treat generator syntax as a special case from helpers. (That's why [both `regenerator` and `helpers` will be removed](https:\/\/github.com\/babel\/babel\/issues\/16310#:~:text=remove%20the%20helpers%20option) as there is no need to differentiate between them :tada:)\r\n\r\n---\r\n\r\n### \ud83d\ude24 What's the conclusion...?\r\n\r\n> Wait, that's wordy... Could you just show me how to use Babel for **now**?\r\n\r\nI'm more than happy to share my experience so that more people can setup Babel as intended without any confusion. That's why I want to mention https:\/\/github.com\/babel\/babel-polyfills again:\r\n\r\n> [[source]](https:\/\/github.com\/babel\/babel\/issues\/16149#issuecomment-1838432234)\r\n> As you can see, there is an overlap in what the two plugins can do. To avoid confusion, we are moving towards a model where plugins are handled by a separate package:\r\n> \r\n> * `@babel\/plugin-transform-runtime` is only to inject imports to Babel helpers\r\n> * `@babel\/preset-env` is only for syntax transforms\r\n> * [`babel-plugin-polyfill-corejs3`](https:\/\/github.com\/babel\/babel-polyfills\/) for polyfills, with an option to choose between polyfills installed by modifying globals or \"pure\" polyfills.\r\n\r\nIn fact, I tried it and encountered a bug: https:\/\/github.com\/babel\/babel\/issues\/16238, which is covered by https:\/\/github.com\/babel\/babel\/pull\/16241 immediately :)\r\n\r\nThen, with the new `moduleName`, I tried something like the following (since my focus is on building an app) but [it didn't work](https:\/\/github.com\/babel\/babel\/issues\/16310#issuecomment-1972501607) before this week:\r\n\r\n```js\r\n\/\/ @filename: babel.config.mjs\r\nplugins: [\r\n  '@babel\/plugin-transform-runtime', { moduleName: '@babel\/runtime', regenerator: false },\r\n  'babel-plugin-polyfill-corejs3', { method: 'usage-global' },\r\n  'babel-plugin-polyfill-regenerator', { method: 'usage-global' } \/\/ I tried to use this to replace `regenerator: true`.\r\n],\r\npresets: [\r\n  ['@babel\/preset-env', {...}], \/\/ without \"useBuiltIns\".\r\n  \/\/ ...\r\n]\r\n```\r\n\r\nBUT, the fix has just been merged and landed on v7.24.1 [days ago](https:\/\/github.com\/babel\/babel\/releases#:~:text=%2316329-,respect%20modulename%20for%20%40babel%2Fruntime%2Fregenerator,-imports%20). With a better understanding of Babel, I simplified it even more, with my notes:\r\n\r\n- For `@babel\/plugin-transform-runtime`\r\n  - `regenerator` option is ignored from v7.18.0.\r\n  - `moduleName` is set to `@babel\/runtime` to avoid pure polyfill implied by `polyfill-corejs3` below.\r\n    - but this also implies that you will need to transpile `@babel\/runtime` yourself. I'm fine with this.\r\n- For `babel-plugin-polyfill-corejs3`\r\n  - this plugin is already included in `@babel\/preset-env`.\r\n  - I prefer to use `usage-global` to polyfill `@babel\/runtime` above.\r\n- For `babel-plugin-polyfill-regenerator`\r\n  - this plugin is already included in `@babel\/preset-env`.\r\n\r\n```js\r\n\/\/ @filename: babel.config.mjs\r\nplugins: [\r\n  '@babel\/plugin-transform-runtime', { moduleName: '@babel\/runtime' },\r\n  'babel-plugin-polyfill-corejs3', { method: 'usage-global' },\r\n],\r\npresets: [\r\n  ['@babel\/preset-env', {...}], \/\/ without \"useBuiltIns\".\r\n  \/\/ ...\r\n]\r\n```\r\n\r\nNow we arrive at basically the same script I provided at the beginning of this comment!"],"labels":["i: enhancement"]},{"title":"'Symbol' is undefined in IE after using babel Core Latest Version 3 : For 7597 Need Solution","body":"from the issue # 7597 i never get what the solution is to this problem. i added latest @babel\/Core my Babel version is 7.6.0. in depth list and Bebel config is given below. none of the configuration is working for IE 11. getting Symbol is undefined issue.\r\nplease help me as the project is stopped working in IE. i am new to all this so would appreciate if some one can be specific and let me know what is going wrong and where.\r\nmodule.exports = {\r\n  presets: [\r\n     \"@babel\/preset-react\",\r\n      [\"@babel\/preset-env\", {\r\n        \"targets\": {\r\n          \"browsers\": [\r\n            \"last 2 versions\",\r\n            \"ie >= 11\"\r\n          ]\r\n        },\r\n        useBuiltIns: \"entry\", \/\/ or \"entry\"\r\n   \r\n      }]\r\n  ],\r\n  plugins: [\r\n  [\"@babel\/plugin-transform-runtime\"],\r\n  [\"@babel\/plugin-transform-for-of\", {\r\n        \"assumeArray\": false \/\/ defaults to false\r\n      }]\r\n \r\n  ],\r\n};\r\n  \r\n\u251c\u2500\u2500 @babel\/core@7.13.15\r\n\u251c\u2500\u2500 @babel\/plugin-syntax-jsx@7.12.13\r\n\u251c\u2500\u2500 @babel\/plugin-transform-for-of@7.13.0\r\n\u251c\u2500\u2500 @babel\/plugin-transform-runtime@7.13.15\r\n\u251c\u2500\u2500 @babel\/polyfill@7.12.1\r\n\u251c\u2500\u2500 @babel\/preset-react@7.13.13\r\n\u251c\u2500\u2500 @babel\/runtime-corejs3@7.13.10\r\n\u251c\u2500\u2500 @saeris\/vue-spinners@1.0.8\r\n\u251c\u2500\u2500 @vue\/cli-plugin-babel@3.12.1\r\n\u251c\u2500\u2500 @vue\/cli-service@4.5.12\r\n\u251c\u2500\u2500 axios@0.19.2\r\n\u251c\u2500\u2500 babel-loader@8.2.2\r\n\u251c\u2500\u2500 babel-polyfill@6.26.0\r\n\u251c\u2500\u2500 bootstrap-vue@2.21.2\r\n\u251c\u2500\u2500 core-js@3.10.1\r\n\u251c\u2500\u2500 corejs@1.0.0\r\n\u251c\u2500\u2500 es6-promise@4.2.8\r\n\u251c\u2500\u2500 es6-symbol@3.1.3\r\n\u251c\u2500\u2500 idle-vue@2.0.5\r\n\u251c\u2500\u2500 jspdf-autotable@3.5.14\r\n\u251c\u2500\u2500 jspdf@2.3.1\r\n\u251c\u2500\u2500 lodash@4.17.21\r\n\u251c\u2500\u2500 moment@2.29.1\r\n\u251c\u2500\u2500 node-sass@4.14.1\r\n\u251c\u2500\u2500 query-string@5.1.1\r\n\u251c\u2500\u2500 regenerator-runtime@0.13.7\r\n\u251c\u2500\u2500 sass-loader@7.3.1\r\n\u251c\u2500\u2500 this@1.1.0\r\n\u251c\u2500\u2500 try@0.13.3\r\n\u251c\u2500\u2500 tslib@2.2.0\r\n\u251c\u2500\u2500 url-search-params-polyfill@8.1.1\r\n\u251c\u2500\u2500 v-select@0.0.1\r\n\u251c\u2500\u2500 vue-bootstrap-typeahead@0.2.6\r\n\u251c\u2500\u2500 vue-image-lightbox-carousel@1.0.7\r\n\u251c\u2500\u2500 vue-js-toggle-button@1.3.3\r\n\u251c\u2500\u2500 vue-json-csv@1.2.12\r\n\u251c\u2500\u2500 vue-json-excel@0.2.99\r\n\u251c\u2500\u2500 vue-lazyload@1.3.3\r\n\u251c\u2500\u2500 vue-moment@4.1.0\r\n\u251c\u2500\u2500 vue-pagination-2@2.0.3\r\n\u251c\u2500\u2500 vue-popperjs@2.3.0\r\n\u251c\u2500\u2500 vue-radio-toggle-buttons@0.0.5\r\n\u251c\u2500\u2500 vue-router@3.5.1\r\n\u251c\u2500\u2500 vue-select@3.11.2\r\n\u251c\u2500\u2500 vue-tables-2@2.2.1\r\n\u251c\u2500\u2500 vue-template-compiler@2.6.12\r\n\u251c\u2500\u2500 vue-upload-multiple-image@1.1.6\r\n\u251c\u2500\u2500 vue@2.6.12\r\n\u251c\u2500\u2500 vue2-dropzone@3.6.0\r\n\u251c\u2500\u2500 vuejs-datepicker@1.6.2\r\n\u251c\u2500\u2500 vuelidate@0.7.6\r\n\u2514\u2500\u2500 vuex@3.6.2\r\n\r\n","comments":["Hey @qadirfarooq! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","Did https:\/\/github.com\/babel\/babel\/issues\/11763#issuecomment-651792112 solve this question?","no. i tried this now.. still same issue. here is my config file.\n\nmodule.exports = {\n  presets: [\n     ***@***.***\/preset-react\",\n      ***@***.***\/preset-env\", {\n        \"targets\": {\n          \"browsers\": [\n            \"last 2 versions\",\n            \"ie >= 11\"\n          ]\n        },\n        useBuiltIns: \"entry\", \/\/ or \"entry\"\n\n      }]\n  ],\n  plugins: [\n  ***@***.***\/plugin-transform-runtime\"],\n  ***@***.***\/plugin-transform-for-of\", {\n        \/\/\"loose\": true, \/\/ defaults to false\n        \/\/\"assumeArray\": false, \/\/ defaults to false,\n        \"allowArrayLike\": true\n      }]\n\n  ],\n};\n\nOn Tue, Apr 13, 2021 at 12:54 PM Hu\u00e1ng J\u00f9nli\u00e0ng ***@***.***>\nwrote:\n\n> Did #11763 (comment)\n> <https:\/\/github.com\/babel\/babel\/issues\/11763#issuecomment-651792112>\n> solve this question?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/babel\/babel\/issues\/13147#issuecomment-818977058>, or\n> unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AGTJRKPZ7MTDE5Q2TYQPXOLTISHM5ANCNFSM4233DRUA>\n> .\n>\n","Can you provide a reproducing repo?","well i have to somehow take all my modules out and create one for you. will\ndo that today or tomorrow and let you know. thanks for all your help. will\nupdate you soon.\n\nOn Tue, Apr 13, 2021 at 2:16 PM Hu\u00e1ng J\u00f9nli\u00e0ng ***@***.***>\nwrote:\n\n> Can you provide a reproducing repo?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/babel\/babel\/issues\/13147#issuecomment-819024219>, or\n> unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AGTJRKLB5V3S7IUYRZDAULTTISRCJANCNFSM4233DRUA>\n> .\n>\n","Hi,\n\nsorry for the delay. I was busy with some other projects. Please open the\nlink thats  a test web FE. please download and open in VS code and run Npm\ninstall to get the npm module. Once you have all that done you will see the\nlogin page.\nyou will see the app can be open in chrome but not in IE 11. let me know if\nyou have any other questions. much appreciated. as i am new so i might be\ndoing something wrong.\n\nhttps:\/\/github.com\/qadirfarooq\/testApp\/tree\/main\n\nThanks,\nMuhammad\n\n\nOn Tue, Apr 13, 2021 at 2:26 PM Farooq Qadir ***@***.***> wrote:\n\n> well i have to somehow take all my modules out and create one for you.\n> will do that today or tomorrow and let you know. thanks for all your help.\n> will update you soon.\n>\n> On Tue, Apr 13, 2021 at 2:16 PM Hu\u00e1ng J\u00f9nli\u00e0ng ***@***.***>\n> wrote:\n>\n>> Can you provide a reproducing repo?\n>>\n>> \u2014\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub\n>> <https:\/\/github.com\/babel\/babel\/issues\/13147#issuecomment-819024219>, or\n>> unsubscribe\n>> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AGTJRKLB5V3S7IUYRZDAULTTISRCJANCNFSM4233DRUA>\n>> .\n>>\n>\n","Any updates on this?\n\nOn Fri, Apr 30, 2021 at 1:09 PM Farooq Qadir ***@***.***> wrote:\n\n> Hi,\n>\n> sorry for the delay. I was busy with some other projects. Please open the\n> link thats  a test web FE. please download and open in VS code and run Npm\n> install to get the npm module. Once you have all that done you will see the\n> login page.\n> you will see the app can be open in chrome but not in IE 11. let me know\n> if you have any other questions. much appreciated. as i am new so i might\n> be doing something wrong.\n>\n> https:\/\/github.com\/qadirfarooq\/testApp\/tree\/main\n>\n> Thanks,\n> Muhammad\n>\n>\n> On Tue, Apr 13, 2021 at 2:26 PM Farooq Qadir ***@***.***>\n> wrote:\n>\n>> well i have to somehow take all my modules out and create one for you.\n>> will do that today or tomorrow and let you know. thanks for all your help.\n>> will update you soon.\n>>\n>> On Tue, Apr 13, 2021 at 2:16 PM Hu\u00e1ng J\u00f9nli\u00e0ng ***@***.***>\n>> wrote:\n>>\n>>> Can you provide a reproducing repo?\n>>>\n>>> \u2014\n>>> You are receiving this because you were mentioned.\n>>> Reply to this email directly, view it on GitHub\n>>> <https:\/\/github.com\/babel\/babel\/issues\/13147#issuecomment-819024219>,\n>>> or unsubscribe\n>>> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AGTJRKLB5V3S7IUYRZDAULTTISRCJANCNFSM4233DRUA>\n>>> .\n>>>\n>>\n"],"labels":["i: question","i: needs reproduction"]},{"title":"Support for removing certain attribute from JSX Element using babel-plugin-transform-react-jsx","body":"## Feature Request\r\n\r\n<!-- Check this if you would like to implement a PR, we are more than happy to help you go through the process !-->\r\n- [x] I would like to work on this feature!\r\n\r\n**Is your feature request related to a problem?**\r\nIt is common to use custom attributes to help in selecting some elements by automated testing tools like Selenium or Cyprus or by unit testing tools. However, these custom attributes, appearing in the DOM in the production environment, are redundant.\r\n\r\n**Describe the solution you'd like**\r\nWe can specify the attribute to remove or strip as an option to the `@babel\/plugin-transform-react-jsx` in the production configuration. This can help in retaining those custom attributes only in the development\/staging environment where automation or unit tests can run.\r\n\r\n\r\n**Documentation, Adoption, Migration Strategy**\r\n```js\r\n{\r\n  \"plugins\": [\r\n    [\r\n      \"@babel\/plugin-transform-react-jsx\",\r\n      {\r\n        \"throwIfNamespace\": false, \/\/ defaults to true\r\n        \"runtime\": \"automatic\", \/\/ defaults to classic\r\n        \"importSource\": \"custom-jsx-library\", \/\/ defaults to react\r\n        \"removeAttribute\": \"data-auto-id\" \/\/ <-- new option to the plugin which can be a simple string or a regular experssion\r\n      }\r\n    ]\r\n  ]\r\n}\r\n```\r\n","comments":["Hey @asingh04! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","You can try doing it with a custom plugin, that you only enable in production.","I initially thought of making a custom plugin to do so, but I think this is a very common problem for most of the developers using react and this functionality of removing some attributes from the final dom could be provided from the babel transform plugin.","I agree that a custom plugin is the way to go, because you can trivially just match against JSXAttribute. Removing an attribute seems out of scope and unnecessarily complicate the code base."],"labels":["i: plugin idea"]},{"title":"Babel parser typescript should throw when accessors do not agree in visibility  ","body":"## Bug Report\r\n\r\n<!-- If you would like to implement a PR, we are more than happy to help you go through the process!-->\r\n- [ ] I would like to work on a fix!\r\n\r\n<!--\r\n@babel\/eslint-parser:\r\n  If you are having issues with JSX you might want to check out eslint-plugin-react. If there's an issue with new experimental syntax you might need to check if it's supported by @babel\/eslint-plugin.\r\n-->\r\n\r\n**Current behavior**\r\n<!-- A clear and concise description of the behavior. -->\r\nParsed successfully.\r\n\r\n- [REPL](https:\/\/babel.dev\/repl#?browsers=chrome%2088&build=&builtIns=usage&spec=false&loose=false&code_lz=MYGwhgzhAEDCCc9oG8BQBIADgJwJYDcwAXAU2gHMSjoAhMALwAoBKALgDsBXAWwCMTsKaNiqds7aAAYA3NAC-GTJ14hcwaBCq0Gjdhx79szFHOgB6M9AHYA9oIC00MMGAkodmABMb0djepg5CJkuBL4uBC4vLiqRACeqApAA&debug=false&forceAllTransforms=false&shippedProposals=true&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Ctypescript&prettier=false&targets=&version=7.13.15&externalPlugins=%40babel%2Fplugin-proposal-do-expressions%407.12.13)\r\n\r\n**Input Code**\r\n\r\n```ts\r\nclass C99 {\r\n\tprivate get Baz():number { return 0; }\r\n\tpublic set Baz(n:number) {} \/\/ error - accessors do not agree in visibility\r\n}\r\n```\r\n\r\n**Expected behavior**\r\n<!-- A clear and concise description of what you expected to happen (or code). -->\r\nBabel parser should throw when accessors do not agree in visibility\r\n\r\n**Babel Configuration (babel.config.js, .babelrc, package.json#babel, cli command, .eslintrc)**\r\nREPL\r\n\r\n**Possible Solution**\r\n<!--- If you have suggestions on a fix for the bug -->\r\n\r\n**Additional context**\r\n<!-- Add any other context about the problem here. Or a screenshot if applicable -->\r\nFound this issue when reviewing #13089.","comments":["Hey @JLHwung! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","Should this really be considered a syntax error, not a semantic one?","I think if an error can be thrown in compile time (in contrast runtime is running the type checking), then any early error belongs to syntax error.","Should we check for duplicate methods too?\r\n[REPL](https:\/\/babeljs.io\/repl#?browsers=&build=&builtIns=usage&spec=false&loose=false&code_lz=MYGwhgzhAEDC0G8BQ1oDMD2GAUBKRAviulnoUgUA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=typescript&prettier=false&targets=&version=7.13.15&externalPlugins=)","Duplicate public methods are allowed in ECMAScript:\r\n```js\r\nclass C { foo() {}; foo(v) {} }\r\n```\r\n\r\nThe TS error falls to diagnostic errors IMHO.","I think we can check it here by looking for some other methods in `classBody` with `kind === \"get\" || kind === \"set\"` and the same name as the method to push. \r\nhttps:\/\/github.com\/babel\/babel\/blob\/bdbd07d170f22b1b31252bdf8603af8a6de25f8f\/packages\/babel-parser\/src\/plugins\/typescript\/index.js#L2462-L2488\r\n\r\nHowever it is almost useless if a user can specify multiple getters\/setters with same name:\r\n```ts\r\nclass C {\r\n  public get foo() {}\r\n  private get foo() {}\r\n  public set foo(v) {}\r\n}\r\n```"],"labels":["i: bug","pkg: parser","area: typescript"]},{"title":"Export all node flow types from @babel\/types","body":"For some reason the flow type defs for `@babel\/types` export function type defs, but they don't export any of the node types used.  Would you accept a PR to add those exports?","comments":["Hey @jedwards1211! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\""],"labels":["i: enhancement","i: needs triage"]},{"title":"gather and expose usedHelpers within plugin-external-helpers","body":"Restore the metadata.usedHelpers functionality removed in babel 7.\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #6835\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  | No\r\n| Minor: New Feature?      | No\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/45024\/","This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/13107\/builds\/116528) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit 43c71760224fef70b58cb143665b2b232f066994:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-d9c48)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-z1puo)| Configuration |\n","Q: How do you use this metadata information? \/ Why cannot you use `@babel\/runtime` instead?","Large legacy apps I maintain can't accommodate modules, and it is too expensive to 'fix' them.\r\nSo `@babel\/plugin-transform-runtime` is not an option for me.\r\n\r\n`metadata.usedHelpers` facilitated using `babel.buildExternalHelpers()` in Babel 6; I am just restoring that functionaliy.\r\n(nb: I discovered that I have to interrogate `@babel\/helpers` to find helper dependencies now, but that is simple enough)"],"labels":["PR: New Feature :rocket:","area: helpers"]},{"title":"browserlist Firefox >= 52 adds regeneratorRuntime also if async is supported","body":"## Bug Report\r\n\r\nWith browserlist `Firefox >= 52` and using async functions, babel adds regeneratorRuntime also if this version of firefox supports [async functions](https:\/\/caniuse.com\/async-functions).\r\n\r\nAdding `Firefox >= 53` fixes this issue.\r\n\r\n**Current behavior**\r\n\r\nBabel polyfills async functions with regeneratorRuntime and the browser gives error if you don't include regeneratorRuntime: `Uncaught ReferenceError: regeneratorRuntime is not defined`\r\n\r\n**Input Code**\r\n\r\nIn .browserslistrc\r\n\r\n```\r\nFirefox >= 52\r\n```\r\n\r\nIn js:\r\n\r\n```\r\nconst accessEvent = async () => {\r\n}\r\naccessEvent()\r\n```\r\n\r\n**Expected behavior**\r\n\r\nBabel should not polyfill with this browserlist.\r\n\r\n**Babel Configuration (babel.config.js, .babelrc, package.json#babel, cli command, .eslintrc)**\r\n\r\n- Filename: `babel.config.js`\r\n\r\n```js\r\nmodule.exports = {\r\n  presets: [\r\n    [\r\n      '@babel\/preset-env',\r\n      {\r\n        useBuiltIns: 'entry',\r\n        corejs: 3,\r\n      },\r\n    ],\r\n  ],\r\n}\r\n```\r\n\r\n**Environment**\r\n\r\n```\r\n  System:\r\n    OS: macOS 11.2.2\r\n  Binaries:\r\n    Node: 14.15.5 - \/usr\/local\/bin\/node\r\n    Yarn: 1.3.2 - \/usr\/local\/bin\/yarn\r\n    npm: 6.14.11 - \/usr\/local\/bin\/npm\r\n  npmPackages:\r\n    @babel\/core: ^7.13.10 => 7.13.10 \r\n    @babel\/preset-env: ^7.13.10 => 7.13.10 \r\n    babel-loader: ^8.2.2 => 8.2.2 \r\n    webpack: 5.26.1 => 5.26.1 \r\n```\r\n- Babel version(s): 7.13.10\r\n- Node\/npm version: v14.15.5\r\n- How you are using Babel: webpack\r\n","comments":["Hey @minimit! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","We use https:\/\/github.com\/kangax\/compat-table\/ as a data source, because for JS features it's far more reliable than caniuse. Caniuse often marks things as supported even if they are only _partially_ supported.\r\n\r\n~Generators are fully supported starting from Firefox 53.~\r\n\r\nThe problem here is that for that specific Firefox version, async functions are supported but generators are not. We probably need an option to transform only generators in https:\/\/github.com\/facebook\/regenerator \ud83e\udd14","Thank you it's clear, i'll add firefox 53 so.","I think I edited my comment while you were replying and you didn't notice it \ud83d\ude05\r\n\r\nThis is hard to fix, but it can indeed be considered a bug.","@nicolo-ribaudo I don't understand which generator is not supported in 52 but is in 53, here I don't find it https:\/\/caniuse.com\/?search=generator","I checked our data source (https:\/\/github.com\/kangax\/compat-table\/blob\/af6d362c5040beb42776fbb5c7ce10aeabfd0fda\/data-es6.js#L4831), and it seems like they just don't have data for Firefox 52.\r\n\r\nIf you could open a PR to that repo testing and updating the data for Firefox 52 (or also older versions), we can then regenerate our data to stop compiling generators.","@nicolo-ribaudo I don't understand why there `firefox27: true,` so generators should be supported on firefox 52, right?\r\n\r\nMaybe it's yield that has `firefox53: true,` should be `firefox52: true,`?\r\n\r\n> I checked our data source (https:\/\/github.com\/kangax\/compat-table\/blob\/af6d362c5040beb42776fbb5c7ce10aeabfd0fda\/data-es6.js#L4831), and it seems like they just don't have data for Firefox 52.\r\n> \r\n> If you could open a PR to that repo testing and updating the data for Firefox 52 (or also older versions), we can then regenerate our data to stop compiling generators.\r\n\r\n","`firefoxXX: true` means \"someone tested this on version XX and it works\"; `firefoxYY: false` means \"someone tested this on version YY and it doesn't work\".\r\n\r\nSo `firefox53: true` doesn't mean \"firefox 53 is the first working version\" but only \"firefox 53 is known to work\". When a version is missing (e.g. `firefox52`) we get the data from the last previous tested version.\r\n\r\nWhile _some_ generator tests pass on Firefox 27 (for example the \"basic functionality\" one), this is not true for some generator features: `yield *, iterator closing`, `yield *, iterator closing via throw()` are only reported to work on firefox 53 and to fail on firefox 2.\r\nFor this reason, generators support is marked as incomplete in Firefox 52.","Ok I understand but I can't do the PR sorry.","Note that setting `presets.targets = \"supports async-functions\"` still transforms async\/await functions.\r\nTo fix this one has to use `supports async-functions and not firefox < 53`."],"labels":["i: bug","area: compat-table","pkg: compat-data"]},{"title":"@babel\/eslint-parser forces duplicating build dependencies across repos","body":"## Bug Report\r\n\r\n**Current behavior**\r\n<!-- A clear and concise description of the behavior. -->\r\n\r\n`@babel\/eslint-parser` makes it very tedious to work with React in any more elaborate setup than `create-react-app` and `create-next-app` where build dependencies are not necessarily present in modules\/microfrontends.\r\n\r\nWe're in this situation:\r\n- `@tooling\/build` includes a standardized build setup for webpack, babel, ts, etc.\r\n- `app-foo` is built in this context and as such does not contain any build dependencies or config files such as a `babel.config.json`\r\n- `module-bar` is included within `app-foo` and does not contain any build deps or config files either\r\n\r\nYet, in order to use `@babel\/eslint-parser` within `app-foo` or `module-bar`, I have to install tooling included in `@platform\/build` because `@babel\/eslint-parser` won't understand JSX natively (understandable) and has to load e.g. `@babel\/preset-react` (and in our case, like 6 other babel plugins), which it can't as it's not a direct dependency.\r\n\r\nIs our setup here so far from the norm? I see this would \"just work\" if it was a monorepo for example. This was not an issue with `babel-eslint` at all fwiw.\r\n\r\nIn contrast, I can detect just fine whether the project was bootstrapped through CRA or CNA, as the presence of `react-scripts` or `next` indicates their corresponding babel plugins transitively.\r\n\r\n\r\n**Expected behavior**\r\nI don't have to tell `@babel\/eslint-parser` about my entire babel setup a few repos away.\r\n<!-- A clear and concise description of what you expected to happen (or code). -->\r\n","comments":["Hey @ljosberinn! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","You can pass `requireBabelConfig: false` to `@babel\/eslint-parser`: https:\/\/github.com\/babel\/babel\/tree\/main\/eslint\/babel-eslint-parser#additional-parser-configuration if your babel config is a few repos away. But at that point `@babel\/eslint-parser` will only parse ES. You will have to manually set up parser plugins\r\n```jsonc\r\n\/\/ .eslintrc\r\n{\r\n  parserOptions: {\r\n    requireBabelConfig: false,\r\n    babelOptions: {\r\n      parserOpts: {\r\n         plugins: [\"jsx\"]\r\n      }\r\n    }\r\n }\r\n} \r\n```","Isn't that precisely the issue? This makes it basically impossible for generic eslint configs to properly parse _any_ given repository because I'd either:\r\n- need to tell the supposedly zero-config eslint config about my babel setup, although this project doesn't actually have any of those dependencies since they are a few repos away\r\n- pull all possible babel plugins into the generic eslint config to be prepared for everything, which pulls in a myriad of deps that may or may not have different versions etc.\r\n\r\nFor example, `@babel\/eslint-parser` can't work in CRA as it doesn't have a babel.config file. Neither does Next.js out of the box.\r\nYou'd need to give them a list and keep it in sync.\r\n\r\nI saw [your PR there](https:\/\/github.com\/facebook\/create-react-app\/pull\/10761) aswell and I think you ran into the same dilemma while trying to update `eslint-config-react-app`?\r\n\r\n","Have you tried using the [`babelOptions.configFile`](https:\/\/babeljs.io\/docs\/en\/options#configfile) option yet? This was intended to solve the case where a Babel config file may not be colocated with the code that Babel is running over.\r\n\r\n```js\r\n{\r\n  parserOptions: { \r\n    babelOptions: {\r\n      configFile: \"path\/to\/config.js\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIf this doesn't work for you, how could the API be improved for your use case?\r\n\r\nAlso, can you expand a bit more on what you mean by \"supposedly zero-config eslint config\"? While I would absolutely love for this to be the reality, I'm not aware of this being a stated feature of any of the Babel ESLint integrations. ESLint itself doesn't have a way to do this (nothing is on by default), so it doesn't seem like a fair expectation for Babel's integration to support this either. I'd love for the tooling community to head that direction, but we're just not there yet.","Yes, it doesn't work in our case:\r\n\r\nwith configFile:\r\n- build deps outside of this repo now must be present in this repo, where they do not belong; leads back to the original issue of this.. issue\r\n\r\nwithout configFile:\r\n- parser just throws on e.g. jsx\r\n\r\nI understand that this is an inherent issue linked to babel plugins and the parser needs some way to know how to parse code. I'm unfamiliar with the implementation before this major - how was it possible to \"just work\" prior? `babel-eslint` had no issues understanding jsx and I presume it didn't pull in all possible plugins all the time either.\r\n\r\nRe zero-config eslint config: I'm building [this over here](https:\/\/github.com\/ljosberinn\/eslint-config-galex); adding features dynamically based on userland `package.json`. E.g. given the presence of any React flavor, it'll automatically enable rules, using `@babel\/eslint-parser`. But right now it's not possible to do so because I don't know which babel plugins the consumer might be using.\r\n\r\nAt work I forked the config, extracted the babel setup from the build repo in a separate one and imported them:\r\n\r\n```js\r\nconst {\r\n  presets: babelPresets,\r\n  plugins: babelPlugins,\r\n} = require('@somewhere\/config\/babel\/presets\/react.babel.js');\r\n\r\nconst parser = '@babel\/eslint-parser';\r\nconst defaultParserOptions = {\r\n  requireConfigFile: false,\r\n  sourceType: 'module',\r\n  ecmaFeatures: {\r\n    jsx: true,\r\n  },\r\n  babelOptions: {\r\n    presets: babelPresets,\r\n    plugins: babelPlugins,\r\n  },\r\n};\r\n```\r\n[original source for ref](https:\/\/github.com\/ljosberinn\/eslint-config-galex\/blob\/master\/src\/overrides\/react.js)\r\n\r\nBut this led to coupling the eslint config to the build repo which I'm not happy with either and obviously isn't the intention of the config either.\r\n\r\n","`babel-eslint@10` does pull in many, if not all, [parser plugins](https:\/\/github.com\/babel\/babel-eslint\/blob\/4bd049e06e2c7ab31053020fc662f51bf6c179e3\/lib\/parse.js#L21-L52), which does not align to our philosophies: Nothing is on by default: A zero config `@babel\/core` only knows standard JavaScript.\r\n\r\nWhen using `babel-eslint`, the discrepancy between how linter parses your code and how Babel does is largely hidden, here I presume most users only use jsx and ES2022. But it will fail if 1) you are using a pipeline operator proposal other than `minimal`, 2) you are using new stage 1 proposals not covered in that `babel-eslint` list, such as decimal `0.1m`.\r\n\r\nIn `@babel\/eslint-parser` we remove the enabled parser plugins so `@babel\/eslint-parser` only parses JavaScript, nothing more. That's also why `@babel\/eslint-parser` has `@babel\/core` in `peerDependencies`. `@babel\/core` can load Babel config, so does `@babel\/eslint-parser`.\r\n\r\nWhen `@babel\/core` and its config are encapsulated in a builder tool like `@platform\/build`, the impact is that now only a builder knows the exact syntax used in your project, which should have been shared with whatever tools that will also consume your sources, e.g. linter and formatter.\r\n\r\nIf your projects does use novel ES syntax, you can extract the babel config to a standalone package (e.g. `babel-config-galex` ) and have it depended by `@platform\/build` and `eslint-config-galex`. Now in your project you will have two config:\r\n\r\n```jsonc\r\n\/\/ .eslintrc\r\n{ presets: [\"galex\"] }\r\n\r\n\/\/ babel.config.json\r\n{ extends: [\"babel-config-galex\"] }\r\n```\r\n\r\nIf you want to reduce the mental burden of multiple tool configs, you can specify a set of parser plugins using `requireBabelConfig: false`. \r\n\r\nFor example `prettier` configured Babel [in a way](https:\/\/github.com\/prettier\/prettier\/blob\/main\/src\/language-js\/parser-babel.js) that it supports all the Babel parser plugin. Of course the tradeoff here is that as a maintainer you have to frequently update `@babel\/parser` and add new plugins to this list, but as a user they are very unlikely to see a missing Babel plugin error even if they are using early proposals.\r\n\r\nYou don't have to support all the early proposals. Instead you can claim your eslint preset only support latest ES features and JSX. So\r\nhttps:\/\/github.com\/babel\/babel\/issues\/13078#issuecomment-810397122 should be a good start.\r\n\r\nAfter all, the more syntaxes you want to support, the more configs you have to take care about, not the vice."],"labels":["area: eslint"]},{"title":"Do not hardcode `<pkg>\/jsx-runtime` as entry point","body":"## Feature Request\r\n\r\n- [x] I would like to work on this feature!\r\n\r\n**Is your feature request related to a problem?**\r\nAt the moment, as a library author, it is not possible to use the nice automatic import feature of jsx-runtimes without having a second entrypoint because `jsxImportSource` always appends `\/jsx-runtime` to the import for no apparent reason.\r\n\r\n**Describe the solution you'd like**\r\nJust take the path that is configured by `jsxImportSource` as is so it would also work for the main entry point of a package\r\n\r\n**Describe alternatives you've considered**.\r\nThere are not really any, I can't get babel to not do the appending\r\n\r\n**Documentation, Adoption, Migration Strategy**\r\nThis would be a breaking change, so would have to be in babel 8\r\n","comments":["Hey @jvanbruegge! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","There isn't a single entry point (`jsx-runtime`), but two of them: `jsx-runtime` and `jsx-dev-runtime`. This allows libraries to provide an optimized production version (`jsx-runtime`) and a developement version with better errors and debugging support.\r\n\r\nAlso, these paths are part of the API of React-like JSX libraries (which are what `@babel\/plugin-transform-react-jsx` supports): any API change should first be discussed with the React team (either in https:\/\/github.com\/reactjs\/rfcs or https:\/\/github.com\/facebook\/react).\r\n\r\nI can suggest two alternatives:\r\n- You can use a custom Babel plugin that removes `jsx-runtime` and `jsx-dev-runtime` from your imports:https:\/\/astexplorer.net\/#\/gist\/aa534e733598f631ddabd87564a36b2c\/latest\r\n- The JSX library you use can point to the main entrypoint for those two paths, adding something this to `exports` in `package.json`:\r\n  ```json\r\n    \".\/jsx-runtime\": \".\/lib\/index.js\",\r\n    \".\/jsx-dev-runtime\": \".\/lib\/index.js\"\r\n  ```","The `exports` field is not supported by typescript at the moment, so that is not an option. But I can think of something simpler:\r\nAdd two new options to the jsx-transform plugin, `jsxRuntime` that defaults to `.\/jsx-runtime` and `jsxDevRuntime` that defaults to `.\/jsx-dev-runtime`. That way I could simply use the empty string for both and get the behavior I want and it is not a breaking change any more","Wouldn't something like https:\/\/astexplorer.net\/#\/gist\/aa534e733598f631ddabd87564a36b2c\/latest work the same then?\r\n\r\nMany of the JSX frameworks that rely on `@babel\/plugin-transform-react-jsx` already implemented support for the new runtime, so adding two options to customize their names seems a niche use case to me :sweat_smile: (and that's where custom plugins shine, since they give you unlimited customizability).\r\n\r\nAlso, the reason I'm hesitant to make it customizable is that we need to align with every compiler in the JSX ecosystem: we would also need to make sure that that option is accepted by TypeScript, ESBuild, etc","> we would also need to make sure that that option is accepted by TypeScript\r\n\r\nThat's actually the reason I am opening this issue here. I am using Typescript and they follow babel in this regard. This is also why a custom plugin won't help me, because I will get a compiler error from Typescript","> The exports field is not supported by typescript at the moment\r\n\r\nYeah, the TypeScript team is aware of this issue and track it in https:\/\/github.com\/microsoft\/TypeScript\/issues\/33079.\r\n\r\nBefore TypeScript supports this feature, you can add two proxy files to your library:\r\n\r\njsx-runtime.js\r\n```js\r\nmodule.exports = require(\".\");\r\n```\r\n\r\nditto for `.\/jsx-dev-runtime`.\r\n\r\nYou can migrate to exports map when TypeScript eventually implements it.","I haven't checked, but I'd also try _already using `\"exports\"`_ and just creating `jsx-runtime.d.ts` and `jsx-dev-runtime.d.ts` specifically for TS."],"labels":["i: enhancement","i: needs triage"]},{"title":"Feature: Output placeholders which can be easily replaced","body":"## Feature Request\r\n\r\n- [X] I would like to work on this feature!\r\n\r\n**Is your feature request related to a problem?**\r\n\r\nSometimes it would be useful to output JS from Babel which contains placeholders which are to be replaced later by another process.\r\n\r\nMy use case is:\r\n\r\nI am using `@babel\/generator` to generate code in a bundler. Every file output from the bundler has a filename including a hash of the file's content. The problem is that files can import each other cyclically. If X imports Y and Y imports X, it's impossible to determine the filenames until the content of both files has been generated.\r\n\r\nTherefore, I'd like to be able to produce output from `generate()` which includes `import X from <placeholder-X>` and `import Y from <placeholder-Y>`. Once both files are generated, the bundler can calculate the hashes, and replace the placeholders with the actual filenames.\r\n\r\nThis can already be achieved with the existing `Placeholder` node type. `t.placeholder( 'StringLiteral', t.identifier('X') )` is output as `%%X%%`.\r\n\r\nBut... there's one problem: What if the code also includes `%%X%%` elsewhere in a string literal or a comment? Then, when replacing the placeholders later, how can we differentiate between a real placeholder and something that *looks* like a placeholder?\r\n\r\ne.g.:\r\n\r\n```js\r\nconst ast = t.arrayExpression( [\r\n  t.placeholder( 'StringLiteral', t.identifier('X') ),\r\n  t.stringLiteral( '%%X%%' )\r\n] );\r\nast.trailingComments = [ { type: 'CommentBlock', value: ' %%X%% ' } ];\r\nconst code = generate( ast );\r\n```\r\n\r\nGenerated code is `'[ %%X%%, \"%%X%%\" ] \/* %%X%% *\/'`.\r\n\r\nA simple string replace would replace the placeholder, but also unintentionally replace the `%%X%%` in the string and the comment too.\r\n\r\n**Describe the solution you'd like**\r\n\r\nI can think of 2 possible solutions:\r\n\r\n#### 1. `OutputPlaceholder` node type\r\n\r\nA new AST node type `OutputPlaceholder`. The node has an optional name property. e.g. `t.outputPlaceholder( 'X' )`.\r\n\r\n`OutputPlaceholder` would be output as *something which it's impossible could occur in valid JS code*.\r\n\r\nThis is quite tricky as I don't think there are any characters which aren't valid in a comment. But I think this would produce output which it's impossible to produce any other way:\r\n\r\n```js\r\nfunction outputPlaceholder(name) {\r\n  return '_' \/\/ escape from a preceding '\\'\r\n    + '*\/' \/\/ escape from multi-line comment block\r\n    + '\\n' \/\/ escape from single-line comment\r\n    + '`\\'\"' \/\/ escape from string\r\n    + name\r\n    + '\\n'; \/\/ end of placeholder name delimiter\r\n}\r\n```\r\n\r\nAs long as your replacement text is 8 characters longer than the `name` you gave to the placeholder, you should be able to execute the replacements without altering the source map (though I'm not sure if the newlines in the placeholder output would complicate this).\r\n\r\n#### 2. Option to escape '%%'\r\n\r\nAn option to `generate()` which enables placeholders. When this option is enabled, any occurrences of `%%` in strings or comments would be escaped in some way, so that `%%` anywhere in output code would definitely be a placeholder.\r\n\r\nThe output could then be finalized later by (1) replacing all placeholders and then (2) unescaping the escaped `%%`s.\r\n\r\nThe disadvantage of this approach is that unless the escaped version of `%%` is 2 characters (same as the `%%` it replaces), source maps would be out of sync after un-escaping.\r\n\r\n**Describe alternatives you've considered**.\r\n\r\nFor my use case, I could use empty strings as the filenames initially, generate JS, calculate hash of JS, then put the real filenames into the AST and generate JS again to get final output.\r\n\r\nObviously the big disadvantage is the expense of doing 2 passes of generating JS from the AST.\r\n\r\n**Documentation, Adoption, Migration Strategy**\r\n\r\nThis feature would only be of use in the kind of specialist circumstances I outline above, so I imagine just documenting it would be sufficient.","comments":["Hey @overlookmotel! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","> (though I'm not sure if the newlines in the placeholder output would complicate this).\r\n\r\nThey would, because source maps don't map `index -> index` but `(line, column) -> (line, column)` ([here](https:\/\/www.bugsnag.com\/blog\/source-maps) there is a nice explanation).\r\n\r\nI wonder if doing something like this would work, without needing to modify Babel for this use case? With this your custom plugin can safely inject `t.placeholder` nodes.\r\n\r\n```js\r\nfunction escape(str) {\r\n  \/\/ Escape %% sequences with another %. This doesn't modify % operators.\r\n  return str.replace(\/%{2,}\/g, str => str + \"%\");\r\n}\r\n\r\nfunction unescape(str) {\r\n  return str.replace(\/%{3,}\/g, str => str.slice(1));\r\n}\r\n\r\nconst transformed = babel.transformSync(escape(inputCode), babelOptions).code;\r\n\r\nconst hash = computeHash(transformed);\r\n\r\nconst withFileNames = transformed.replace(\/(?<!%)%%(\\w+)%%(?!%)\/g, (_, filePlaceholder) => {\r\n  return filesNames.get(filePlaceholder);\r\n});\r\n\r\nconst finalCode = unescape(withFileNames);\r\n```\r\n\r\n> Obviously the big disadvantage is the expense of doing 2 passes of generating JS from the AST.\r\n\r\nIf you are only doing this in `import` statements, you don't need a full AST traverse:\r\n```js\r\nconst transformed = babel.transformSync(escape(inputCode), { ...babelOptions, ast: true });\r\n\r\nconst hash = computeHash(transformed.code);\r\n\r\ntransformed.ast.program.body.forEach(node => {\r\n  if (t.isImportDeclaration(node)) {\r\n    node.source = ...;\r\n  }\r\n});\r\n\r\nconst finalCode = babelGenerator(transformed.ast);\r\n```","Thanks for your reply.\r\n\r\nBummer that the line breaks would screw up source maps - I had hoped the VLQ-encoded mappings worked on character position only. In that case, I think my original proposal is not a goer.\r\n\r\nOne question about your suggested solution: If the input is escaped prior to to transform, wouldn't source maps then be wrong, as they'd be pointing to column numbers in the *escaped code* rather than the original source?\r\n\r\nConcerning the double-walk of the AST: Unfortunately, my main problem is with dynamic `import()` expressions not `import` statements. I've got the bundler splitting output so the graph of dependencies for `import` statements is acyclic, so this problem never arises - it's the dynamic imports where cyclic dependencies are unavoidable. I should have been clearer before."],"labels":["i: enhancement","i: needs triage"]},{"title":"Throw on duplicate declaration when errorRecovery enabled","body":"## Bug Report\r\n\r\n<!-- If you would like to implement a PR, we are more than happy to help you go through the process!-->\r\n- [ ] I would like to work on a fix!\r\n\r\n<!--\r\n@babel\/eslint-parser:\r\n  If you are having issues with JSX you might want to check out eslint-plugin-react. If there's an issue with new experimental syntax you might need to check if it's supported by @babel\/eslint-plugin.\r\n-->\r\n\r\nCan be related to #8262\r\n\r\n**Current behavior**\r\n<!-- A clear and concise description of the behavior. -->\r\n\r\n- [REPL](https:\/\/babel.dev\/repl), [Codesandbox](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-7s08o?file=\/src\/index.js), or GitHub Repo may increase triaging priority!\r\n\r\n**Input Code**\r\n\r\n```js\r\nconst { parse} = require(\"@babel\/parser\");\r\nconst traverse = require('@babel\/traverse').default\r\n\r\nconst ast = parse(\"let a;let a\", {\r\n    errorRecovery: true\r\n});\r\n\r\ntraverse(ast, {});\r\n```\r\n\r\nthrows:\r\n\r\n```js\r\n\/Users\/coderaiser\/putout\/node_modules\/@babel\/traverse\/lib\/scope\/index.js:427\r\n      throw this.hub.buildError(id, `Duplicate declaration \"${name}\"`, TypeError);\r\n                     ^\r\n\r\nTypeError: Cannot read property 'buildError' of undefined\r\n    at Scope.checkBlockScopedCollisions (\/Users\/coderaiser\/putout\/node_modules\/@babel\/traverse\/lib\/scope\/index.js:427:22)\r\n    at Scope.registerBinding (\/Users\/coderaiser\/putout\/node_modules\/@babel\/traverse\/lib\/scope\/index.js:587:16)\r\n    at Scope.registerDeclaration (\/Users\/coderaiser\/putout\/node_modules\/@babel\/traverse\/lib\/scope\/index.js:529:14)\r\n    at Object.BlockScoped (\/Users\/coderaiser\/putout\/node_modules\/@babel\/traverse\/lib\/scope\/index.js:246:12)\r\n    at Object.newFn (\/Users\/coderaiser\/putout\/node_modules\/@babel\/traverse\/lib\/visitors.js:216:17)\r\n    at NodePath._call (\/Users\/coderaiser\/putout\/node_modules\/@babel\/traverse\/lib\/path\/context.js:55:20)\r\n    at NodePath.call (\/Users\/coderaiser\/putout\/node_modules\/@babel\/traverse\/lib\/path\/context.js:38:14)\r\n    at NodePath.visit (\/Users\/coderaiser\/putout\/node_modules\/@babel\/traverse\/lib\/path\/context.js:92:31)\r\n    at TraversalContext.visitQueue (\/Users\/coderaiser\/putout\/node_modules\/@babel\/traverse\/lib\/context.js:116:16)\r\n    at TraversalContext.visitMultiple (\/Users\/coderaiser\/putout\/node_modules\/@babel\/traverse\/lib\/context.js:80:17)\r\n```\r\n\r\n**Expected behavior**\r\n<!-- A clear and concise description of what you expected to happen (or code). -->\r\n\r\nExpected to see exception with text: `Duplicate declaration \"a\"`\r\n\r\n**Babel Configuration (babel.config.js, .babelrc, package.json#babel, cli command, .eslintrc)**\r\n- Filename: `babel.config.js`\r\n\r\n```js\r\n{\r\n  \"your\": { \"config\": \"here\" }\r\n}\r\n```\r\n\r\n**Environment**\r\n<!--- Tip: Instead of filling out the questions below, you can run `npx envinfo --preset babel` and paste the result below ``` -->\r\n```\r\n\r\n```\r\n- Babel version(s): [e.g. v7.12.0]\r\n- Node\/npm version: [e.g. Node 12\/npm 7]\r\n- OS: [e.g. macOS 10.15.4, Windows 10]\r\n- Monorepo: [e.g. yes\/no\/Lerna]\r\n- How you are using Babel: [e.g. `webpack`, `rollup`, `parcel`, `babel-register`]\r\n\r\n**Possible Solution**\r\n<!--- If you have suggestions on a fix for the bug -->\r\n\r\n**Additional context**\r\n<!-- Add any other context about the problem here. Or a screenshot if applicable -->\r\n","comments":["Hey @coderaiser! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","`errorRecovery` is just so shallow errors from `@babel\/parser`, this one is thrown by `@babel\/traverse` (which doesn't have an option to ignore errors).\r\n\r\nYou can pass `noScope: true` to `@babel\/traverse`'s options, do disable scope tracking so that it doesn't throw on duplicated bindings.","The thing is I need `scope` to get information about declared variables. When I change code according to https:\/\/github.com\/babel\/babel\/issues\/11350#issuecomment-644118606\r\n\r\n```js\r\nconst {File} = require('@babel\/core');\r\nconst {parse} = require(\"@babel\/parser\");\r\nconst traverse = require('@babel\/traverse').default\r\n\r\nconst code = \"let a; let a\";\r\nconst ast = parse(code, {\r\n    errorRecovery: true\r\n});\r\nconst file = new File({filename: '__putout.js'}, {code, ast});\r\ntraverse(file, {});\r\n```\r\nIt throws `Duplicate declaration \"a\"`.\r\n\r\nBut when I change code:\r\n\r\n```diff\r\n-const code = \"let a; let a\";\r\n+const code = \"let a;\";\r\n```\r\n\r\nI get:\r\n\r\n```js\r\n   throw new Error(\"You must pass a scope and parentPath unless traversing a Program\/File. \" + `Instead of that you tried to traverse a ${parent.type} node without ` + \"passing scope and parentPath.\");\r\n      ^\r\n\r\nError: You must pass a scope and parentPath unless traversing a Program\/File. Instead of that you tried to traverse a undefined node without passing scope and parentPath.\r\n    at traverse (\/Users\/coderaiser\/putout\/node_modules\/@babel\/traverse\/lib\/index.js:53:13)\r\n    at Object.<anonymous> (\/Users\/coderaiser\/putout\/packages\/engine-parser\/1.js:10:1)\r\n```\r\n\r\nCould you please tell me how could I get `scope` to pass it?\r\n\r\nI got an idea to add auto-fix to [putout](https:\/\/github.com\/coderaiser\/putout): functions without `async` which uses `await`;\r\n\r\n```diff\r\n-const fn = () => await f();\r\n+const fn = async () => await f();\r\n```\r\n\r\nAnd I see that it's parsed good with `errorRecovery: true`. Would be amazing to have ability to `traverse` such code with a scope. I can't find information about it in:\r\n- https:\/\/babeljs.io\/docs\/en\/babel-traverse\r\n- [babel-handbook](https:\/\/github.com\/jamiebuilds\/babel-handbook\/blob\/master\/translations\/en\/plugin-handbook.md#toc-babel-traverse).","`@babel\/traverse` expects to be called directly with an AST node. If you have a `File` intance, you can grab a reference to the `NodePath` containing the wrapped AST:\r\n```js\r\nconst code = \"let a\";\r\nconst ast = parser.parse(code, {\r\n  errorRecovery: true,\r\n});\r\nconst file = new babel.File({ filename: \"__putout.js\" }, { code, ast });\r\nfile.path.traverse({\r\n  Identifier(path) {\r\n    console.log(path.toString());\r\n  },\r\n});\r\n```\r\n\r\nHowever, it seems like this won't work with `let a; let a` because `new File` constructs the scope information (I'm sorry we don't have much docs about this, I often have to try or read the source code to understand how things exactly work).","@nicolo-ribaudo could you please tell me where can I get `babel.File` from:\r\n\r\n```js\r\nconst file = new babel.File({ filename: \"__putout.js\" }, { code, ast });\r\n```","It should be exported by `@babel\/core`.","It seems difficult to get `@babel\/traverse` to support such erroneous scope information. Maybe you can copy and paste its source code and modify it to create a custom scope of your own. That might be a lot easier."],"labels":["i: question"]},{"title":"Can't use replaceWith of referencePath\u2018s .parentPath.parentPath from getBinding() when the target code is nested callexpression","body":"## Bug Report\r\n\r\n- [ ] I would like to work on a fix!\r\n\r\n\r\n**Current behavior**\r\n\r\nI want to replace a **nested callexpression** to their real code, so I cloned a new node and changed it. \r\n\r\nBut I got an error: `ReferenceError: Container is falsy` when used `p.parentPath.parentPath.replaceWith(newNode);`.\r\n\r\n**Input Code**\r\n\r\nThe nseted callexpression\uff1a\r\n```js\r\nvar r = {};\r\nr.foo(r.bar('x'));\r\n```\r\nBut it will work when the target code is `r.foo(r.bar('x') + 'x');`\r\n\r\nvisitor:\r\n```js\r\nconst defaultVisitor = {\r\n    Program(path) {\r\n        const binding = path.scope.getBinding(\"r\");\r\n\r\n        if (binding && binding.referenced) {\r\n            binding.referencePaths.forEach(p => {\r\n                \/\/ In fact, these two calls will be replaced with different complex nodes.\r\n                const newNode = t.stringLiteral(\"example node\");\r\n                p.parentPath.parentPath.replaceWith(newNode);\r\n            });\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected behavior**\r\n\r\n```js\r\nvar r = {};\r\n\"example node\";\r\n```\r\nJust example code.\r\n\r\n**Environment**\r\n<!--- Tip: Instead of filling out the questions below, you can run `npx envinfo --preset babel` and paste the result below ``` -->\r\n```\r\nSystem:\r\n  OS: Windows 10 10.0.19042\r\nBinaries:\r\n  Node: 14.15.2 - C:\\Program Files\\nodejs\\node.EXE\r\n  npm: 6.14.9 - C:\\Program Files\\nodejs\\npm.CMD\r\n```\r\n- Babel version(s): 7.13.8\r\n- Node\/npm version: Node v14.15.2\r\n- OS:  Windows 10\r\n- Monorepo: none\r\n- How you are using Babel: Nodejs\r\n\r\n**Possible Solution**\r\n<!--- If you have suggestions on a fix for the bug -->\r\n\r\n**Additional context**\r\nThis happens only when use `.parentPath.parentPath`. And it will work when target code is `r.foo(r.bar('x') + 'x')`.\r\n\r\nAfter some tests, I found that the container will be assigned to null in the source code: [babel\/context.ts at 233b17c4df0d42a5b0264f4ff5d4ddb9cc3effe0 \u00b7 babel\/babel](https:\/\/github.com\/babel\/babel\/blob\/233b17c4df0d42a5b0264f4ff5d4ddb9cc3effe0\/packages\/babel-traverse\/src\/path\/context.ts#L203) line 210 (probably is useless for you\ud83d\ude11)\r\n\r\n---\r\nThis situation is very similar to: [Can't replace callExpression with a string literal \u00b7 Issue #1764 \u00b7 babel\/babel](https:\/\/github.com\/babel\/babel\/issues\/1764)\r\nMaybe\uff1a[parentPath refers to grandParent instead of parent \u00b7 Issue #7596 \u00b7 babel\/babel](https:\/\/github.com\/babel\/babel\/issues\/7596)\r\n\r\nAs a rookie with poor english, I am very puzzled\ud83d\ude30. Is there any other available methods to accomplish my purpose?\r\n\r\n","comments":["Hey @Ercilan! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","Similar task, same issue. Did anyone find a workground?","@Numenorean You could try converting the parent node replacement logic to child node replacement, that should avoid the problem.","> @Numenorean You could try converting the parent node replacement logic to child node replacement, that should avoid the problem.\r\n\r\nYeah, it clearly would be a solution, but I wonder if it somehow possible to replace \"parent of parent\" while iterating through the references","Currently there is no reliable way.","> Currently there is no reliable way.\r\n\r\nOh, I got it. Thank you. Will consider traversing directly on CallExpression"],"labels":["i: bug","pkg: traverse"]},{"title":"Duplicate declaration of an imported identifier which is actually removed","body":"## Bug Report\r\n\r\n**Current behavior**\r\nI have a plugin which removes some blocks of code (those between `{}`) based on comments. Everything worked fine but suddenly an error appeared.\r\n\r\nThe issue is that when removing an import by `path.remove()`, it is still present in a scope. But the collision appears only with a class. So when a class with same name is declared it fails. When const is declared, there is no problem. Also if not an import is removed but a const declaration is removed, then class with same name can be declared.\r\n\r\nMore info in code in minimum repro repo\r\n\r\n**Input Code**\r\n\r\nSee https:\/\/github.com\/mariusrak\/babel-scope-error\r\n\r\n**Expected behavior**\r\n\r\nWhen imported const is removed by `path.remove()` and later a class with same name is declared, it should not throw a \"Duplicate declaration\" error.\r\n\r\nThe code should run without an error and should write 'compiled'. Eventually should be ran with node dist\/main.js and write works.\r\n\r\n```\r\n- Babel version(s): v7.13.8\r\n- Node\/npm version: Node 14\/npm 6\r\n- OS: Windows 10, Ubuntu 20\r\n- How you are using Babel: `webpack`\r\n","comments":["Hey @mariusrak! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\""],"labels":["i: bug","pkg: traverse (scope)"]},{"title":"parser(ts): implements and extends in classes and interfaces","body":"This bug has no definitive answer and requires some dialog, personally i prefer AST generated by babel rather than typescript-eslint in this case\r\n\r\n## Bug Report?\r\nbabel for class implements and interface extends generates `TSExpressionWithTypeArguments` node that has fields `expression` and `typeParameters` -> this part matches with typescript itself but does not with typescript-estree as it has 2 separate nodes for `TSClassImplements` and `TSInterfaceHeritage`\r\n\r\nas for `expression` babel in this case derives from what typescript does as it generates QualifiedName\/Identifier and typescript-eslint follows typescript on this and generates expression.\r\n\r\nI'm unsure witch direction we want to go with this, and its a thing that one team should decide\r\n\r\n**Example 1**\r\n\r\n```ts\r\nclass foo implements bar.baz() {\r\n}\r\n```\r\n\r\nin this case babel is going to fail\r\ntypescript is going to parse this, report AST and optionally report semantic\/synthetic error\r\ntypescript-eslint does not report semantic\/synthetic errors by default as its costly than there is no error reported\r\n\r\n**Example 2**\r\n\r\n```ts\r\nclass foo implements bar {\r\n}\r\n```\r\n\r\nall parser parse this code correctly, and report `bar` as identifier and only difference is that typescript-eslint produces `TSInterfaceHeritage` and babel `TSExpressionWithTypeArguments`\r\n\r\n\r\n**Additional examples**\r\n\r\n```ts\r\ninterface foo extends bar.baz<T> {\r\n}\r\n```\r\n\r\n```ts\r\nclass foo extedns bar.baz()<T> implements bar.baz()<T> {\r\n}\r\n```\r\n\r\n### ...\r\n\r\nI'd like to hear opinion of babel team on this as this should be changed one way or another or both, as having unified structure should (or get closer to) enable use of babel as parser for eslint (for those who choose to do so).\r\n\r\ni reported this as a bug but this is not really a bug, its a misalignment\r\n\r\ncc @bradzacher @JLHwung @sosukesuzuki @fedeci","comments":["Hey @armano2! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","Reorganizing known information:\r\n**Example 1**\r\n```ts\r\nclass foo implements bar.baz() {\r\n}\r\n```\r\nBoth `babel-parser` and `typescript-eslint` are not parsing `HeritageClause` node as `typescript` does. Because of this there is a \"hole\" in the AST for the `implements` keyword. This is the same also for the examples below.\r\n\r\nBabel is not parsing this, but is throwing a syntax error.\r\n\r\n**Example 2**\r\n```ts\r\nclass foo implements bar {\r\n}\r\n```\r\nParsed nodes for class implementations:\r\n- `typescript: ExpressionWithTypeArguments` \r\n- `babel-parser: TSExpressionWithTypeArguments` \r\n- `typescript-eslint: TSClassImplements`\r\n\r\n**Example 3**\r\n```ts\r\ninterface foo extends bar.baz<T> {\r\n}\r\n```\r\nParsed nodes for interface extensions:\r\n- `typescript: ExpressionWithTypeArguments` \r\n- `babel-parser: TSExpressionWithTypeArguments` \r\n- `typescript-eslint: TSInterfaceHeritage`\r\n\r\nConsidering the above I think that both `babel` and `typescript-eslint` should implement the `HeritageClause` as a \"wrapping\" node around classes and interfaces extensions. Babel should parse correctly `Example 1` recovering from the error.\r\n","> Because of this there is a \"hole\" in the AST for the implements keyword.\r\n\r\nThis isn't a problem. An AST node's children needn't explicitly wrap and cover every keyword.\r\n\r\nFor example - this is standard part of the ESTree AST spec:\r\n```ts\r\n    class Foo extends Bar { }\r\n\/\/  ^^^^^^^^^^^^^^^^^^^^^^^^^ ClassDeclaration\r\n\/\/        ^^^ Identifier (ClassDeclaration.id)\r\n\/\/                    ^^^ Identifier (ClassDeclaration.superClass)\r\n\/\/                        ^^^ ClassBody (ClassDeclaration.body)\r\n```\r\n\r\nThere is no AST node which \"wraps\" the `extends` keyword - it's just implied that if `ClassDeclaration.superClass != null` that there is an `extends` keyword between it and the `ClassDeclaration.id`"],"labels":["i: discussion","i: bug","pkg: parser","area: typescript"]},{"title":"RegExp groups broken on `v7.13.x` versions","body":"## Bug Report\r\n\r\n**Current behavior**\r\nThe latest v7.13.x version seem to break `RegExp(...).exec(...).groups` functionality. It is undefined for a correctly built RegExp when using these versions, but works correctly when setting:\r\n\r\n```json\r\n{\r\n  \"devDependencies\": {\r\n      \"@babel\/cli\": \"7.12.17\",\r\n      \"@babel\/core\": \"7.12.17\",\r\n      \"@babel\/plugin-transform-runtime\": \"7.12.17\",\r\n      \"@babel\/preset-env\": \"7.12.17\",\r\n      \"@babel\/preset-typescript\": \"7.12.17\",\r\n  },\r\n  \"resolutions\": {\r\n      \"@babel\/cli\": \"7.12.17\",\r\n      \"@babel\/core\": \"7.12.17\",\r\n      \"@babel\/plugin-transform-runtime\": \"7.12.17\",\r\n      \"@babel\/preset-env\": \"7.12.17\",\r\n      \"@babel\/preset-typescript\": \"7.12.17\",\r\n   }\r\n }\r\n ```\r\n**Input Code**\r\n\r\n```ts\r\nRegExp(\/*...*\/).exec(\/*...*\/).groups\r\n```\r\n\r\n**Expected behavior**\r\n\r\n`.groups` should be defined for correct regexes\r\n\r\n**Babel Configuration (babel.config.js, .babelrc, package.json#babel, cli command, .eslintrc)**\r\n- Filename: `babel.config.js`\r\n\r\n```js\r\nconst test = process.env.BABEL_ENV === 'test';\r\nconst useESModules = test ? {} : { useESModules: false };\r\n\r\nmodule.exports = {\r\n  sourceType: 'module',\r\n  presets: ['@babel\/preset-typescript', '@babel\/preset-react', '@babel\/preset-env'],\r\n  plugins: [['@babel\/plugin-transform-runtime', { ...useESModules }], 'lodash'],\r\n};\r\n```\r\n**Environment**\r\n\r\n- Babel version(s): v7.13.x\r\n- Node version: v15.9.0\r\n- OS: macOS Big Sur\r\n- Monorepo: no\r\n- How you are using Babel: Webpack \/ babel-jest\r\n","comments":["Hey @yoav-lavi! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","I cannot reproduce this with your config.\r\n\r\nIf I try to compile this code:\r\n```js\r\nnew RegExp(\"(?<foo>.)\").exec(\"a\").groups;\r\n```\r\n\r\nbabel leaves it as-is, so it works.\r\n\r\nCould you provide a repo I can clone to reproduce the bug :pray:","Hi @yoav-lavi! This issue is missing some important information we'll need to be able to reproduce this issue.\n\nPlease understand that we receive a high volume of issues, and there are only a limited number of volunteers that help maintain this project. The easier it is for us to decipher an issue with the info provided, the more likely it is that we'll be able to help.\n\nPlease make sure you have the following information documented in this ticket:\n1. Your Babel configuration (typically from `.babelrc` or `babel.config.js`)\n2. The current (incorrect) behavior you're seeing\n3. The behavior you expect\n4. A [short, self-contained example](http:\/\/sscce.org\/)\n\nPlease provide either a link to the problem via the [`repl`](https:\/\/babeljs.io\/repl\/), or if the `repl` is insufficient, a new and minimal repository with instructions on how to build\/replicate the issue.","@nicolo-ribaudo this looks like something non deterministic since I can get it to pass or fail tests by adding `console.log(\"#\")` before a `try\/catch` block in which the regex runs. \r\n\r\nWhen trying to create a demo project for this the issue happened on the older version as well.\r\n\r\nCould you please try running \r\n\r\n```\r\nconst userAgentRegex = \/(?<type>(Chrome))\\\/(?<version>\\d+)(.|\\s)\/;\r\n\r\nconst getBrowserInformation = (userAgent) => {\r\n  try {\r\n    const groups = RegExp(userAgentRegex).exec(userAgent)?.groups;\r\n    return groups;\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst browserInformation = getBrowserInformation(\r\n  \"Chrome\/88.0.4324.182\"\r\n);\r\n  ```\r\n  \r\n In a jest test using babel-jest? It seems to return undefined as `browserInformation` even though it should return `{type: \"Chrome\", version: \"88\"}` (and does in the browser \/ with some versions in some projects)","I'm also using the following:\r\n\r\n```\r\n  \"browserslist\": [\r\n    \"> 0.5%\",\r\n    \"last 3 versions\",\r\n    \"Firefox ESR\",\r\n    \"not dead\",\r\n    \"not ie > 0\",\r\n    \"not edge < 80\"\r\n  ],\r\n```\r\n\r\nin `package.json`","The REPL seems to polyfill this when converting to an old version of node (9) but it doesn't end up working:\r\nhttps:\/\/babeljs.io\/repl\/#?browsers=%3E0.5%25%2C%0Alast%203%20versions%2C%0AFirefox%20ESR%2C%0Anot%20dead%2C%0Anot%20ie%20%3E%200%2C%0Anot%20edge%20%3C%2080&build=&builtIns=false&spec=false&loose=false&code_lz=MYewdgzgLgBArhApgJwIIHNFigJUZgDxgF4YB6ACgH4AeKATwAdEA-CgYQAtkQBbRAJQCAOpVoA3FBACW4FsIAmAagEUAdAB9hEAWQDcAKAMxQkWJigAhHgHckyAJJgAZiGS8AhlFlgSMCggoGFhQAiQsMADexjBQyPRRMTAm4NAw6DxwjBB-eOgAogSMAfbB2HmIBAJqlYjAJUGY2AJUahkgWRCGycnIiFBwyL7tnd0wAL4mXsCciT0wfQNDMGBwADZrY-MG43pAA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=true&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-0%2Cstage-1%2Cstage-2%2Cstage-3%2Ctypescript&prettier=false&targets=Node-9&version=7.13.5&externalPlugins=","Thanks I see the bug :+1:","Actually, if you run your code (https:\/\/github.com\/babel\/babel\/issues\/12876#issuecomment-784306250) without Babel in Chrome's console it returns `undefined` :thinking: ","<img width=\"606\" alt=\"Screen Shot 2021-02-23 at 17 25 06\" src=\"https:\/\/user-images.githubusercontent.com\/14347895\/108874069-16396280-75fc-11eb-9c8f-82de3f83a086.png\">\r\nNot for me","Whops I forgot `console.log` :sweat_smile: ","I actually didn't add it in the example but referred to looking at `browserInformation`, that's on me\r\n\r\nthe last screenshot didn't include the log - \r\n\r\n<img width=\"525\" alt=\"Screen Shot 2021-02-23 at 17 26 24\" src=\"https:\/\/user-images.githubusercontent.com\/14347895\/108874247-441ea700-75fc-11eb-8f4a-cadc3e01c577.png\">\r\n","@nicolo-ribaudo so just to make sure, do you have enough information \/ can see the bug now?","Yes","Oh this is not a regression, it's broken in every version (for example, [7.9.0](https:\/\/babeljs.io\/repl\/version\/7.9.0#?browsers=%3E0.5%25%2C%0Alast%203%20versions%2C%0AFirefox%20ESR%2C%0Anot%20dead%2C%0Anot%20ie%20%3E%200%2C%0Anot%20edge%20%3C%2080&build=&builtIns=false&spec=false&loose=false&code_lz=MYewdgzgLgBArhApgJwIIHNFigJUZgDxgF4YB6ACgH4AeKATwAdEA-CgYQAtkQBbRAJQCyAbgBQY0JBAAbRADoZIdBTzoAogUYUEKDFlz5EBAfOOJgFAERce_MgA4H8gAzyALAGYATO_kBGB28rIREgA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=true&timeTravel=false&sourceType=module&lineWrap=true&presets=env&prettier=false&targets=Node-9&version=7.9.0&externalPlugins=)).\r\n\r\nThe problem is that the only way we have to support this syntax in old browsers is to compile it away and subclassing the regexp.\r\n\r\nThis works, however when you call `RegExp(...)` you are telling the browser \"please ignore any subclass, and give me an original regexp\": this breaks Babel's polyfill. I'm not sure whether this is fixable :thinking:  \r\n\r\nAs a workaround, you can avoid doing `RegExp(...)` and just use `userAgentRegex.exec(userAgent).`","It does work for me if I force `7.12.x` in my project, which is a bit weird, maybe it was fixed and regressed after `7.9`? It does behave really weirdly in some cases (like a log fixing the test) so I'm not sure if it's `7.12.x` specifically or a set of specific circumstances aligning. It's worth mentioning that my targets are relatively recent so it may be a bit different than what happens in the REPL example. I can try using what you sent and see if that works though","Regarding the polyfill, may be worth having some documentation or warning about that since it looks like it does try to polyfill it and then fails silently","Not using `RegExp()` does it fact fix it for the latest version, still a bit weird that it works with `7.12.x`","It would be really helpful if you could share a repo where I can see that it works with an older version. I _see_ the bug, but I don't understand how it could have possible been working in the past so I have no idea about what could have caused the regression :confused: ","Unfortunately I can't share the original repo, and the test repo I made to reproduce this always reproduces the issue (making me suspect further that there's something other than the version that affects this, since when it did reproduce adding a log fixed it in some cases). I may be able to try to get it to work similarly later on","Got it, sending you a repo","https:\/\/github.com\/yoav-lavi\/babel-issue-reproduction\r\nThere's a comment in the index file that tells you how to make it reproduce and stop reproducing, this specifically happens on 7.12","https:\/\/github.com\/yoav-lavi\/babel-issue-reproduction\/blob\/main\/src\/index.ts#L7","Ok thanks!","<img width=\"899\" alt=\"Screen Shot 2021-02-23 at 18 13 34\" src=\"https:\/\/user-images.githubusercontent.com\/14347895\/108880745-df1a7f80-7602-11eb-9cdf-36f040305081.png\">\r\n<img width=\"916\" alt=\"Screen Shot 2021-02-23 at 18 13 02\" src=\"https:\/\/user-images.githubusercontent.com\/14347895\/108880751-e0e44300-7602-11eb-95a0-306c197a1ef1.png\">\r\n\r\nI changed the instructions a bit, it looks like removing the comment itself also has something to do with it. Extremely weird, might be some babel-jest quirk. Adding the logs so you know I'm not making this up since a comment changing code output is extremely suspect.","It also seems to depend on whether `BABEL_ENV = test` was used (`BABEL_ENV=test yarn run jest`)","> Adding the logs so you know I'm not making this up\r\n\r\nAll these conditions seem so random that it's impossible to be so creative to make this up :stuck_out_tongue: ","<img width=\"1039\" alt=\"Screen Shot 2021-02-23 at 18 18 20\" src=\"https:\/\/user-images.githubusercontent.com\/14347895\/108881399-8e575680-7603-11eb-92ca-421b87797700.png\">\r\nvs\r\n<img width=\"938\" alt=\"Screen Shot 2021-02-23 at 18 18 12\" src=\"https:\/\/user-images.githubusercontent.com\/14347895\/108881415-91eadd80-7603-11eb-9cdc-31d3a20118fa.png\">\r\n","The bad news is that I still cannot reproduce it.\r\n\r\n1. What Node.js version are you using?\r\n2. Can you add `console.log(getBrowserInformation.toString());` to see the compiled function in both cases?","with comment\r\n```js\r\n    userAgent => {\r\n      console.log(\"#\");\r\n    \r\n      try {\r\n        var _userAgentRegex$exec, _RegExp$exec, _userAgentRegex$exec2;\r\n    \r\n        \/\/ 123\r\n        if (x) {\r\n          console.log(\"#\");\r\n        }\r\n    \r\n        const groups = (_userAgentRegex$exec = userAgentRegex.exec(userAgent)) === null || _userAgentRegex$exec === void 0 ? void 0 : _userAgentRegex$exec.groups;\r\n        console.log({\r\n          regex: (_RegExp$exec = RegExp(userAgentRegex).exec(userAgent)) === null || _RegExp$exec === void 0 ? void 0 : _RegExp$exec.groups\r\n        });\r\n        console.log({\r\n          regex: (_userAgentRegex$exec2 = userAgentRegex.exec(userAgent)) === null || _userAgentRegex$exec2 === void 0 ? void 0 : _userAgentRegex$exec2.groups\r\n        });\r\n        return groups;\r\n      } catch {\r\n        return null;\r\n      }\r\n    }\r\n```\r\n\r\n```js\r\n    userAgent => {\r\n      console.log(\"#\");\r\n    \r\n      try {\r\n        var _userAgentRegex$exec, _RegExp$exec, _userAgentRegex$exec2;\r\n    \r\n        if (x) {\r\n          console.log(\"#\");\r\n        }\r\n    \r\n        const groups = (_userAgentRegex$exec = userAgentRegex.exec(userAgent)) === null || _userAgentRegex$exec === void 0 ? void 0 : _userAgentRegex$exec.groups;\r\n        console.log({\r\n          regex: (_RegExp$exec = RegExp(userAgentRegex).exec(userAgent)) === null || _RegExp$exec === void 0 ? void 0 : _RegExp$exec.groups\r\n        });\r\n        console.log({\r\n          regex: (_userAgentRegex$exec2 = userAgentRegex.exec(userAgent)) === null || _userAgentRegex$exec2 === void 0 ? void 0 : _userAgentRegex$exec2.groups\r\n        });\r\n        return groups;\r\n      } catch {\r\n        return null;\r\n      }\r\n    }\r\n```\r\nwithout comment\r\n","```sh\r\nnode --version\r\nv15.9.0\r\n```","Unfortunately it looks like adding the additional log also changes how it works","Those two code snippets are the same when compiled (except for the comment), so it's even more unexpected that they behave differently:\r\nhttps:\/\/www.diffchecker.com\/jKBQwBS1","```\r\n   function getBrowserInformation(userAgent) {\r\n      console.log(\"#\");\r\n    \r\n      try {\r\n        var _userAgentRegex$exec, _RegExp$exec, _userAgentRegex$exec2;\r\n    \r\n        if (x) {\r\n          console.log(\"#\");\r\n        }\r\n    \r\n        var groups = (_userAgentRegex$exec = userAgentRegex.exec(userAgent)) === null || _userAgentRegex$exec === void 0 ? void 0 : _userAgentRegex$exec.groups;\r\n        console.log({\r\n          regex: (_RegExp$exec = RegExp(userAgentRegex).exec(userAgent)) === null || _RegExp$exec === void 0 ? void 0 : _RegExp$exec.groups\r\n        });\r\n        console.log({\r\n          regex: (_userAgentRegex$exec2 = userAgentRegex.exec(userAgent)) === null || _userAgentRegex$exec2 === void 0 ? void 0 : _userAgentRegex$exec2.groups\r\n        });\r\n        return groups;\r\n      } catch (_unused) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n```\r\nThis is the output when it does reproduce (if printing from the jest file)","It's still _almost_ the same :thinking: \r\nhttps:\/\/www.diffchecker.com\/AdAKHQcU","Why does removing a comment make it use `var` and `_unused` in the catch clause though? That's also a bit suspect","It's probably because it trying to compile for different targets (older): it's using the `transform-block-scoping` and `optional-catch-binding` plugins.\r\nMaybe there is another Babel config somewhere?","Try this:\r\n`BABEL_ENV=test BABEL_SHOW_CONFIG_FOR=.\/src\/index.ts yarn run jest`","```\r\nBabel configs on \"$$PATH\/babel-issue\/src\/index.ts\" (ascending priority):\r\nconfig $$PATH\/babel-issue\/babel.config.js\r\n{\r\n  \"sourceType\": \"module\",\r\n  \"presets\": [\r\n    \"@babel\/preset-typescript\",\r\n    \"@babel\/preset-react\",\r\n    \"@babel\/preset-env\"\r\n  ],\r\n  \"plugins\": [\r\n    [\r\n      \"@babel\/plugin-transform-runtime\",\r\n      {}\r\n    ],\r\n    \"lodash\"\r\n  ]\r\n}\r\n\r\nprogrammatic options from babel-jest\r\n{\r\n  \"cwd\": \"$$PATH\/babel-issue\",\r\n  \"caller\": {\r\n    \"name\": \"babel-jest\",\r\n    \"supportsDynamicImport\": false,\r\n    \"supportsExportNamespaceFrom\": false,\r\n    \"supportsStaticESM\": false,\r\n    \"supportsTopLevelAwait\": false\r\n  },\r\n  \"compact\": false,\r\n  \"plugins\": [],\r\n  \"presets\": [\r\n    \"$$PATH\/babel-issue\/node_modules\/babel-preset-jest\/index.js\"\r\n  ],\r\n  \"sourceMaps\": \"both\",\r\n  \"filename\": \"$$PATH\/babel-issue\/src\/index.ts\"\r\n}\r\n\r\n```\r\n```\r\nBabel configs on \"$$PATH\/babel-issue\/src\/index.ts\" (ascending priority):\r\nconfig $$PATH\/babel-issue\/babel.config.js\r\n{\r\n  \"sourceType\": \"module\",\r\n  \"presets\": [\r\n    \"@babel\/preset-typescript\",\r\n    \"@babel\/preset-react\",\r\n    \"@babel\/preset-env\"\r\n  ],\r\n  \"plugins\": [\r\n    [\r\n      \"@babel\/plugin-transform-runtime\",\r\n      {}\r\n    ],\r\n    \"lodash\"\r\n  ]\r\n}\r\n\r\nprogrammatic options from babel-jest\r\n{\r\n  \"cwd\": \"$$PATH\/babel-issue\",\r\n  \"caller\": {\r\n    \"name\": \"babel-jest\",\r\n    \"supportsDynamicImport\": false,\r\n    \"supportsExportNamespaceFrom\": false,\r\n    \"supportsStaticESM\": false,\r\n    \"supportsTopLevelAwait\": false\r\n  },\r\n  \"compact\": false,\r\n  \"plugins\": [],\r\n  \"presets\": [\r\n    \"$$PATH\/babel-issue\/node_modules\/babel-preset-jest\/index.js\"\r\n  ],\r\n  \"sourceMaps\": \"both\",\r\n  \"filename\": \"$$PATH\/babel-issue\/src\/index.ts\"\r\n}\r\n\r\n\r\n","Looks identical with and without comments","@nicolo-ribaudo why would it try to change targets based on whether there was a comment in the source code though?","No idea. One more thing: could you try adding\r\n\r\n```js\r\nconsole.log((() => \/(?<type>(Chrome|Firefox|Version|CriOS|FxiOS|SamsungBrowser))\\\/(?<version>\\d+)(.|\\s)\/).toString())\r\n```\r\n\r\nin your TS file? I'm doing it, and it seems like the regexp is _not_ being compiled.","That also causes it not to reproduce sadly","Since the output when it does reproduce is similar to what the function looks like when it's polyfilled for NodeJS 9, I think there may be two issues here: \r\n\r\n1. The RegExp groups polyfill doesn't work with the constructor \/ factory syntax\r\n2. Either babel or babel-jest will use a different target in some circumstances\r\n\r\nThis would theoretically explain why it is working in the cases where it is"],"labels":["i: bug"]},{"title":"Skip public class property transform when possible","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Skip properties transform under certain circumstances (see below)\r\n| Patch: Bug Fix?          | \r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nIn this PR we skip `proposal-class-properties` transform when all of the following conditions are satisfied\r\n- The `targets` has native support of class properties\r\n- There is no private element or static block inside class body\r\n- The class and its elements are not decorated\r\n\r\nI think we should discuss about where we should put the granular compat data. In this case it is the `public_class_fields` used only in `proposal-class-properties` transform. I put this table in `helper-create-features-plugin`, which is how a third-party plugin author would have done if he\/she wants to implement granular control on the plugin output given different `api.targets()`.","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/42816\/","This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/12849\/builds\/105128) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit e912525f80f5c26f8c0fcc0a697f41be5f7561a8:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-m9crl)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-jbmbt)| Configuration |\n","I think it's easier for us to keep all our own data in `@babel\/compat-data`, but we can still keep the \"granular data\" in a different file from the main plugins data (similarly to what we do for `bugfixes`).\r\n\r\nFyi, I did something like this in https:\/\/github.com\/babel\/babel\/pull\/12899 where I re-used existing `@babel\/compat-data` data.","What do you think about splitting the private and public transforms instead? If a class contains both private and public fields, we could still leave public fields intact.","> If a class contains both private and public fields, we could still leave public fields intact.\r\n\r\nI don't think we can leave public fields intact, for example when private elements are referenced in the initializer.\r\n\r\n```\r\nclass C {\r\n  #a = 1;\r\n  b = this.#a;\r\n}\r\n```","Well that can be compiled to\r\n```js\r\nclass C {\r\n  b = (INITIALIZE(this, #a, 1), this.#a);\r\n}\r\n```\r\nwhich means\r\n```js\r\nclass C {\r\n  b = (_a.set(this, { writable: true, value: 1 }), _classPrivateFieldGet(this, _a))\r\n}\r\n```\r\n\r\nanyway, this PR is already a good step in the correct direction."],"labels":["PR: Output optimization :microscope:"]},{"title":"put deprecating warning on npm's babel-runtime","body":"Could you put a [deprecation](https:\/\/docs.npmjs.com\/deprecating-and-undeprecating-packages-or-package-versions) warning on [babel-runtime](https:\/\/www.npmjs.com\/package\/babel-runtime) and tell folks to use @babel\/runtime instead?","comments":["Hey @jimmywarting! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","We either put the deprecation warning on all the Babel 6 packages or on none of them.\r\n\r\nI guess we could do it, but `babel-core` 6 still has 5M downloads\/week and `babel-runtime` almost 10M :frowning_face: \r\n\r\nMaybe we can wait until the Babel 8 release in a few months, so that people still using Babel 6 can do 6 -> 8 directly rather than 6 -> 7 -> 8.","> Maybe we can wait until the Babel 8 release in a few months, so that people still using Babel 6 can do 6 -> 8 directly rather than 6 -> 7 -> 8.\r\n\r\nI would be fine with that."],"labels":["i: discussion"]},{"title":"babel-parser(ts): Parse argument of TSImportType as TsType","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #12833\r\n| Patch: Bug Fix?          | Y?\r\n| Major: Breaking Change?  | N?\r\n| Tests Added + Pass?      | Yes\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nI'm not sure this is a breaking change. What do you think?","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/41201\/","This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/12834\/builds\/103481) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit 14341ce52c082f806502d168750b0027425be6f6:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-jv26s)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-zi11j)| Configuration |\n","i think you should hide this change behind breaking flag\r\n\r\nand can we add recoverable error if type is not a string? \r\n```\r\n\/\/ String literal expected. (1141)\r\n```"],"labels":["pkg: parser","area: typescript"]},{"title":" parser(ts): argument of TSTypeImport is not wrapped in TSLiteralType","body":"## Bug Report\r\n\r\n- [ ] I would like to work on a fix!\r\n\r\n**Current behavior**\r\nCurrently any literal node that is present in type context except `TSTypeImport` is wrapped into `TSLiteralType` node.\r\n\r\n**Input Code**\r\n\r\n```ts\r\ntype x = import('test')\r\ntype x = typeof import('test')\r\n```\r\n\r\n**Expected behavior**\r\n\r\n**Environment**\r\n- Babel version(s): latest\r\n- Node\/npm version: all\r\n- OS: any\r\n- Monorepo: no\r\n- How you are using Babel: @babel\/parse\r\n\r\n**Possible Solution**\r\n<!--- If you have suggestions on a fix for the bug -->\r\n\r\n**Additional context**\r\n\r\ntypescript actually allows to use any type as argument of `TSTypeImport` and report recoverable error \r\n```ts\r\ntype foo = 123\r\ntype x = import(foo) \/\/ String literal expected. (1141)\r\n```\r\n\r\n\r\nI'm currently working on aligning `TSTypeImport` between babel and typescript-eslint\/typescript-eslint#2998","comments":["Hey @armano2! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\""],"labels":["i: bug","pkg: parser","area: typescript"]},{"title":"@babel\/cli --copy-files won't ignore JSON files","body":"## Bug Report\r\n\r\n<!-- If you would like to implement a PR, we are more than happy to help you go through the process!-->\r\n- [ ] I would like to work on a fix!\r\n\r\n<!--\r\n@babel\/eslint-parser:\r\n  If you are having issues with JSX you might want to check out eslint-plugin-react. If there's an issue with new experimental syntax you might need to check if it's supported by @babel\/eslint-plugin.\r\n-->\r\n\r\n**Current behavior**\r\n<!-- A clear and concise description of the behavior. -->\r\n\r\n**Input Code**\r\n\r\nI have a `src` directory with two files in it, one JavaScript and one JSON:\r\n\r\n`src\/hello.js`:\r\n\r\n```js\r\nconsole.log('hello world')\r\n```\r\n\r\n`src\/obj.json`:\r\n\r\n```json\r\n{}\r\n```\r\n\r\nCommand line:\r\n\r\n```cmd\r\nnpx babel src --copy-files --ignore \"**\/*\" --no-copy-ignored --out-dir dist\r\n```\r\n\r\nThe output directory, `dist`, contains a single file.\r\n\r\n`dist\/obj.json`:\r\n\r\n```json\r\n{}\r\n```\r\n\r\n**Expected behavior**\r\n<!-- A clear and concise description of what you expected to happen (or code). -->\r\n\r\nSince I have specified an `--ignore` option with maximum wildcards, the output directory, `dist`, should contain no files at all. Both input files should have been ignored. However, no matter what I do and no matter what command line flags I use, I cannot get Babel to ignore the JSON file. I've also tried setting `--ignore \"*.json\"`, `--ignore \"src\/obj.json\"`, `--ignore \"**\/obj.json\"`, ...\r\n\r\n**Babel Configuration (babel.config.js, .babelrc, package.json#babel, cli command, .eslintrc)**\r\n\r\nNone, the command line is as you see it, with no options omitted. There are no Babel config files in this directory.\r\n\r\n**Environment**\r\n<!--- Tip: Instead of filling out the questions below, you can run `npx envinfo --preset babel` and paste the result below ``` -->\r\n```\r\n  System:\r\n    OS: Windows 10 10.0.19041\r\n  Binaries:\r\n    Node: 14.15.4 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.16.0 - C:\\Program Files (x86)\\Yarn\\bin\\yarn.CMD\r\n    npm: 6.14.10 - C:\\Program Files\\nodejs\\npm.CMD\r\n```\r\n- Babel version(s): v7.12.13\r\n- Node\/npm version: 14.15.4\r\n- OS: Windows 10\r\n- Monorepo: no\r\n- How you are using Babel: Windows `cmd.exe` prompt\r\n\r\n**Possible Solution**\r\n<!--- If you have suggestions on a fix for the bug -->\r\n\r\nFix the way the `--ignore` flag behaves I guess? Or, if this behaviour is intentional, make the documentation explaining it more prominent and provide a way to work around it.\r\n\r\n**Additional context**\r\n<!-- Add any other context about the problem here. Or a screenshot if applicable -->\r\n","comments":["Hey @s100! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","The behavior is expected.\r\n\r\n`--ignore` instructs Babel what it should ignore in the _compilable_ files (By default `[\".js\", \".jsx\", \".es6\", \".es\", \".mjs\"]`). So it is a no-op since `*.json` is _not_ a compilable file.\r\n\r\n`--copy-files` instructs Babel to copy all the non-compilable files, so `*.json` is copied.\r\n\r\n`--no-copy-ignored` instructs Babel that it should not copy those ignored _compilable_ files.\r\n\r\nIf you have a complicated use case, I suggest use `gulp-babel`, `grunt` or `webpack` instead. Avoid using `--copy-files` if you need to ignore some files."],"labels":["i: question"]},{"title":"fix: infer array type from outside of arrow function","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #12714 <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          | Yes\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nIf `ArrowFunctionExpression` is a child of `VariableDeclarator` we can try to guess the execution status relative to another expression. This allows to infer array type from outside of an arrow function.\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/12727\"><img src=\"https:\/\/gitpod.io\/api\/apps\/github\/pbs\/github.com\/fedeci\/babel.git\/cebc85bbbeb8c584bb6a54c8aefe1c5369da7e5d.svg\" \/><\/a>\n\n","comments":["This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/12727\/builds\/103496) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit 20fad3c5f1e9e8b74aee2f2b250d11e0495d4cdc:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-frvu6)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-biyu2)| Configuration |\n","Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/41225\/","> Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/39050\/\r\n\r\nThis REPL doesn't seem to work, I get this error:\r\n\r\n> Could not load Babel build #39050: Could not find valid @babel\/standalone artifact in build #39050","Yeah I know, it should be fixed by https:\/\/github.com\/babel\/babel\/pull\/12728 :sweat_smile: ","I don't know why the CI failed and I cannot reproduce it locally. If I run `make -j tscheck flowcheck-ci lint-ci` I just get a bunch of errors from `babel-generator`, but nothing from `babel-traverse`.\r\n```ts\r\n\/\/ A possible fix?\r\n((target.parent as t.VariableDeclarator).id as t.Identifier).name\r\n```","Since #12728 has been merged could you rebase this PR so the REPL works please","Tested and it does indeed fix the REPL provided in the issue, but when applied on the real code I extracted it from it doesn't as it returns the function that was created\r\n\r\n- [REPL](https:\/\/babeljs.io\/repl\/build\/39344\/#?browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=N4KABGDGD2B2DOAXMBrApgT3mAvGA2gLoDcI4UcSYAZtNLmABQCUuAfGKBBLQE5MwEydBjDRqqTPFZduAX3JzSCkLMFVa9PC3adyEdcKkMipfRSFgARgEN-21jg6zuNaP0aHJo8d-l7XCAVXJTJXXjREAFdeWGs7UiDlECA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=&prettier=false&targets=&version=7.12.12%2Bpr.12727&externalPlugins=%40babel%2Fplugin-transform-for-of%407.12.13)\r\n\r\n```js\r\n\/\/ Fixed in this PR\r\n{\r\n  const keys = [];\r\n\r\n  const foo = () => {\r\n    for (const key of keys) {\r\n    }\r\n  };\r\n}\r\n\r\n\/\/ Same output as before\r\n{\r\n  const foo = () => {\r\n    const keys = [];\r\n\r\n    const bar = () => {\r\n      for (const key of keys) {\r\n      }\r\n    };\r\n\r\n    return bar;\r\n  };\r\n}\r\n\r\n```","The `return` statement seems to break it\ud83e\udd14","Can also be reproduced if the function is exported - [REPL](https:\/\/babeljs.io\/repl\/build\/39344\/#?browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=MYewdgzgLgBA1gUwJ4RgXhgbQLoG4BQ-CAHgA4gBOsoksAZiCOjABQCU6AfDAN74wwGFVjWjxkMEHXEoOfAQF98C3EA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=&prettier=false&targets=&version=7.12.12%2Bpr.12727&externalPlugins=%40babel%2Fplugin-transform-for-of%407.12.13)\r\n\r\n```js\r\nconst keys = [];\r\n\r\nexport const foo = () => {\r\n  for (const key of keys) {\r\n  }\r\n};\r\n```","Exported function execution status is not guessed since #10417 and I think we should check it only when `keys` type is immutable.\r\nHowever I just realised that this should not be transformed to a C-like `for` since `keys` is mutable and may no longer be an iterable when the function is executed. Right?\r\n```js\r\n\/\/ Don't infer type\r\nvar keys = []\r\nconst foo = () => {\r\n  for (const key of keys) {}\r\n}\r\n\r\n\/\/ Infer type\r\nconst keys = []\r\nexport const foo = () => {\r\n  for (const key of keys) {}\r\n}\r\n\r\n\/\/ Infer type\r\nexport const bar = () => {\r\n  const keys = []\r\n  for (const key of keys) {}\r\n}\r\n\r\n\/\/ Don't infer type\r\nvar keys = []\r\nexport const baz = () => {\r\n  for (const key of keys) {}\r\n}\r\n```\r\n\r\n\/cc @nicolo-ribaudo ","In that case `keys` is mutable, but it's not mutated so we can safely consider it as an array. It's similar to what we do [in this example](https:\/\/babeljs.io\/repl#?browsers=chrome%2020&build=&builtIns=false&spec=false&loose=true&code_lz=G4QwTgBA1gpgngZwIwQLwQNoF0DcAoUSWRAJjU1zzwDMB7SACgGNaA7BAFwgA8Jbro8ZAEoIAbwC-NehGZtOPPgOIISoyVWoBXVkw4BLNhC0AHACYgOMBurwRBpcpPxSgA&debug=false&forceAllTransforms=false&shippedProposals=true&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Cflow&prettier=false&targets=&version=7.12.14&externalPlugins=)"],"labels":["PR: Bug Fix :bug:","pkg: traverse"]},{"title":"for of transform is unable to infer array type from outside of arrow function","body":"## Bug Report\r\n\r\n<!-- If you would like to implement a PR, we are more than happy to help you go through the process!-->\r\n- [ ] I would like to work on a fix!\r\n\r\n**Current behavior**\r\n\r\n- [REPL](https:\/\/babeljs.io\/repl#?browsers=defaults&build=&builtIns=false&spec=false&loose=false&code_lz=MYewdgzgLgBA1gUwJ4RgXhgbQLoG4BQ-AZiAE4wAUoksiSMIR8yEAlDAN74C-h10MEiHSV2aAHyd8MQWUr9ayBkzpspM3twLEArmGBQAluBgAjAIakK7LjJLkq4AXWXMUN6TE34gA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=&prettier=false&targets=&version=7.12.12&externalPlugins=%40babel%2Fplugin-transform-for-of%407.12.1)\r\n\r\n```js\r\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function () {}; return { s: F, n: function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function (e) { throw e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function () { it = o[Symbol.iterator](); }, n: function () { var step = it.next(); normalCompletion = step.done; return step; }, e: function (e) { didErr = true; err = e; }, f: function () { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || \/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$\/.test(n)) return _arrayLikeToArray(o, minLen); }\r\n\r\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\r\n\r\nconst keys = [];\r\n\r\nconst foo = () => {\r\n  var _iterator = _createForOfIteratorHelper(keys),\r\n      _step;\r\n\r\n  try {\r\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\r\n      const key = _step.value;\r\n    }\r\n  } catch (err) {\r\n    _iterator.e(err);\r\n  } finally {\r\n    _iterator.f();\r\n  }\r\n};\r\n```\r\n\r\n**Input Code**\r\n\r\n```js\r\nconst keys = [];\r\n\r\nconst foo = () => {\r\n  for (const key of keys) {\r\n  }\r\n};\r\n\r\n```\r\n\r\n**Expected behavior**\r\n\r\n```js\r\nconst keys = [];\r\nconst foo = () => {\r\n  for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\r\n    const key = _keys[_i];\r\n  }\r\n};\r\n```\r\n\r\n**Babel Configuration (babel.config.js, .babelrc, package.json#babel, cli command, .eslintrc)**\r\n- Filename: `babel.config.js`\r\n\r\n```js\r\n{\r\n  \"plugins\": [\"@babel\/plugin-transform-for-of\"]\r\n}\r\n```\r\n\r\n**Environment**\r\n- Babel version(s): 7.12.11\r\n- Node\/npm version: N\/A (Chrome 88.0.4324.104 \/ V8 8.8.278.14)\r\n- OS: Windows\r\n- Monorepo: N\/A\r\n- How you are using Babel: REPL","comments":["Hey @merceyz! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","I guess this bug is caused by the following function that early returns `'unknown'` as target is a `ArrowFunctionExpression`. I'm right?\r\nhttps:\/\/github.com\/babel\/babel\/blob\/b63be942cef487fa31a7fa35bd7694076d5b7ad9\/packages\/babel-traverse\/src\/path\/introspection.ts#L384-L393","Probably yes.\r\nHowever, we have to be careful fixing this. For example, it's not possible to statically know if `0;` is executed before or after `1;` in this case:\r\n\r\n```js\r\nrun(() => {\r\n  0;\r\n});\r\n\r\n1;\r\n```","Yes, I was thinking at that. Maybe we should just check that the container of the expression is a `VariableDeclarator`\ud83e\udd14"],"labels":["i: bug","pkg: traverse"]},{"title":"[babel 8] Remove TS Type Imports in `Program:exit`","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #9991, closes #10009\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  | Y but behind the BABEL_8_BREAKING flag\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\nThis PR backports #10009. It should be reviewed commit-by-commit. The first commit is cherry-picked from #10009, the second one cleanups the TypeScript plugin so we can implement in the third behind the flag.\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/12706\"><img src=\"https:\/\/gitpod.io\/api\/apps\/github\/pbs\/github.com\/JLHwung\/babel.git\/737bb01bdb0f75632804a9eca25cd59a2463d3c2.svg\" \/><\/a>\n\n\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/12706\"><img src=\"https:\/\/gitpod.io\/button\/open-in-gitpod.svg\"\/><\/a>\n\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/54184\/","This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/12706\/builds\/96632) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit 737bb01bdb0f75632804a9eca25cd59a2463d3c2:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-4v7jk)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-6dp9j)| Configuration |\n","In fact, I personally prefer to remove them at `enter`, and then save removed nodes somewhere for other plugins to use.\r\nBecause if we remove them at `exit`, this will break other plugins like the regression, and require extra work from other plugins, even if they don't care about TS.\r\nBut since that would be a very big job, I think it's fine to keep it that way in BABEL8.","Wdyt about removing `import type` in `enter`, and move the automatic analysis for imports that are not explicitly marked to `exit`? It's a possible way to fix the regression, that makes sure things work when users are explicit about their type imports.","From my understanding this may not fix the original issue https:\/\/github.com\/babel\/babel\/pull\/9689#issuecomment-473510963.\r\nIt dawned on me that this might not be too hard, we just need to store the removed `import type` in `Program`, I will try to open a PR.","It would fix the original issue because a plugin injecting a value reference to an `import type` is a buggy plugin (since those are only types), and the only imports that should not be stripped away are the `import` imports that are not initially (on `Program:enter`) referenced anywhere.\r\n\r\ni.e. if a plugin injects `let x = C` in this code:\r\n```js\r\nimport { C } from \"f\"\r\nlet c: C;\r\n```"],"labels":["PR: Breaking Change :boom:","area: typescript","babel 8"]},{"title":"@babel\/code-frame incorrectly marks lines containing tab characters","body":"## Bug Report\r\n\r\n<!-- If you would like to implement a PR, we are more than happy to help you go through the process!-->\r\n- [ ] I would like to work on a fix!\r\n\r\n**Current behavior**\r\n<!-- A clear and concise description of the behavior. -->\r\n\r\nThe `@babel\/code-frame` function `codeFrameColumns` incorrectly marks a location in a line that follows tab characters; the markers are not indented using the right mix of spaces and tab characters to indent enough to visually line up with the characters being marked.\r\n\r\nExample:\r\n\r\n```js\r\n\"use strict\";\r\n\r\nconst { codeFrameColumns } = require(\"@babel\/code-frame\");\r\n\r\nconsole.log(\r\n  codeFrameColumns(\r\n    'x\\t\\tabc',\r\n    {\r\n      start: { line: 1, column: 3 },\r\n      end: { line: 1, column: 6 },\r\n    },\r\n    { forceColor: true }\r\n  )\r\n);\r\n```\r\n\r\n<img width=\"649\" alt=\"Screen Shot 2021-01-27 at 3 11 49 pm\" src=\"https:\/\/user-images.githubusercontent.com\/1754873\/105941934-94185580-60b2-11eb-8079-66b03e72c4a6.png\">\r\n\r\n**Expected behavior**\r\n\r\nCode frame markers horizontally line up visually with the characters being marked.\r\n\r\n**Environment**\r\n\r\n- `@babel\/code-frame`: v7.12.11\r\n","comments":["Hey @jaydenseric! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","There are two different questions:\r\n1. **Is `@babel\/code-frame` doing the correct thing?**\r\n   Imo yes. A tab isn't 1-column-large, but it spawns multiple columns. If highlight \"abc\" in my editor, it says that it starts at column 9.\r\n2. **Is `@babel\/parser` (or whoever is generating that `line\/column` info) doing the correct thing?**\r\n   If it reports `\\t` as one column probably not, but it would require a `tabWidth` option or similar.","@nicolo-ribaudo\r\n\r\n- Regarding (1), a column in a text editor is whatever the character is. 1 tab character = 1 column.\r\n- Regarding (2), the columns numbers are correct as they are (as explained above).\r\n\r\nIt seems tabs and visual alignment of the markers have been accounted for in the past, but only for far-left indentation in lines:\r\n\r\nhttps:\/\/github.com\/babel\/babel\/pull\/3464\r\n\r\nI don't see the harm in making sure the markers line up correctly by indenting them with a combination of tabs and spaces, as required.","> a column in a text editor is whatever the character is. 1 tab character = 1 column\r\n\r\nAt least in vscode and gedit they are counted as multiple columns, while vim gives you both the number counting them as 1 and as multiple.\r\n\r\nAnyway, this is probably easier to fix in `@babel\/generator` as you suggest, so we can do it.","Here is step-by-step example.\r\n\r\nI'm using `@babel\/code-frame` for JSDoc related error messages in [`jsdoc-md`](https:\/\/www.npmjs.com\/package\/jsdoc-md). One such error, is if the user references a JSDoc member that doesn\u2019t exist in a namepath:\r\n\r\n<img width=\"310\" alt=\"Screen Shot 2021-01-28 at 9 46 39 am\" src=\"https:\/\/user-images.githubusercontent.com\/1754873\/106064965-af38a300-614e-11eb-95df-e0e1361812af.png\">\r\n\r\nNotice in this example, the user has indent-aligned the JSDoc tag values using spaces.\r\n\r\nThe link to the start of the problem code location can be CMD+Clicked in VS Code, and you can see that it places the carrot at the right spot:\r\n\r\n<img width=\"305\" alt=\"Screen Shot 2021-01-28 at 9 46 53 am\" src=\"https:\/\/user-images.githubusercontent.com\/1754873\/106065193-0a6a9580-614f-11eb-82ec-63de82dddb17.png\">\r\n<img width=\"366\" alt=\"Screen Shot 2021-01-28 at 9 47 05 am\" src=\"https:\/\/user-images.githubusercontent.com\/1754873\/106065201-0d658600-614f-11eb-9857-c06d5d0ede37.png\">\r\n\r\nNow, lets try the same thing but with the JSDoc tag values indent-aligned using tabs instead of spaces:\r\n\r\n<img width=\"312\" alt=\"Screen Shot 2021-01-28 at 9 50 06 am\" src=\"https:\/\/user-images.githubusercontent.com\/1754873\/106065299-384fda00-614f-11eb-9821-81b8f8f95c69.png\">\r\n<img width=\"302\" alt=\"Screen Shot 2021-01-28 at 9 50 19 am\" src=\"https:\/\/user-images.githubusercontent.com\/1754873\/106065315-4140ab80-614f-11eb-870a-691970577ed1.png\">\r\n<img width=\"365\" alt=\"Screen Shot 2021-01-28 at 9 50 28 am\" src=\"https:\/\/user-images.githubusercontent.com\/1754873\/106065334-47cf2300-614f-11eb-83c4-70c8e91946d1.png\">\r\n\r\nAs you can see, the start column number is correct how it is. What is incorrect is the way `@babel\/code-frame` visually indents the column location markers. Hence this issue."],"labels":["i: bug"]},{"title":"Can not enable `syntax-class-properties` with other fields related plugins","body":"## Bug Report\r\n\r\n<!-- If you would like to implement a PR, we are more than happy to help you go through the process!-->\r\n\r\n- [ ] I would like to work on a fix!\r\n\r\n<!--\r\n@babel\/eslint-parser:\r\n  If you are having issues with JSX you might want to check out eslint-plugin-react. If there's an issue with new experimental syntax you might need to check if it's supported by @babel\/eslint-plugin.\r\n-->\r\n\r\n**Current behavior**\r\n\r\n<!-- A clear and concise description of the behavior. -->\r\n\r\n- [REPL](https:\/\/babel.dev\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&spec=false&loose=false&code_lz=KYDwDg9gTgLgBAYwDYEMDOa4DEITgbwCg44BiAIxSjgF44BySqewgX0KA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=&prettier=false&targets=&version=7.12.12&externalPlugins=%40babel%2Fplugin-syntax-class-properties%407.12.1%2C%40babel%2Fplugin-proposal-private-methods%407.12.1)\r\n\r\n**Input Code**\r\n\r\n```js\r\nexport class Foo {\r\n  #bar = 'bar'\r\n}\r\n```\r\n\r\n**Expected behavior**\r\n\r\n<!-- A clear and concise description of what you expected to happen (or code). -->\r\n\r\nI'd like to keep class properties as-is.\r\n\r\n**Babel Configuration (babel.config.js, .babelrc, package.json#babel, cli command, .eslintrc)**\r\n\r\n- Filename: `babel.config.js`\r\n\r\n```js\r\nmodule.exports = {\r\n  plugins: [\r\n    '@babel\/syntax-class-properties',\r\n    '@babel\/proposal-private-methods',\r\n  ],\r\n}\r\n```\r\n\r\n**Environment**\r\n\r\n<!--- Tip: Instead of filling out the questions below, you can run `npx envinfo --preset babel` and paste the result below ``` -->\r\n\r\n```\r\n- Babel version(s): v7.12.10\r\n- Node\/npm version: Node v12.20.0\/npm 6.14.9\r\n- OS: macOS 11.2 Beta\r\n- Monorepo: no\r\n- How you are using Babel: API directly\r\n```\r\n\r\n**Possible Solution**\r\n\r\n<!--- If you have suggestions on a fix for the bug -->\r\n\r\nCheck `syntax-class-properties` instead of `proposal-class-properties` for `class fields`\r\n\r\n**Additional context**\r\n\r\n<!-- Add any other context about the problem here. Or a screenshot if applicable -->\r\n","comments":["Hey @JounQin! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","I think we should check if the property is private here, like we do for methods.\r\nhttps:\/\/github.com\/babel\/babel\/blob\/b727e67347984891e9941d774b39e5b44badac6b\/packages\/babel-helper-create-class-features-plugin\/src\/features.js#L171-L176","@fedeci\r\n\r\n`class-static-block` and `private-property-in-object` are both affected too.","@JounQin Cannot reproduce those\ud83d\ude15","@fedeci Sorry my fault, `private-property-in-object` is affected but not `class-static-block`.\r\n\r\n[REPL](https:\/\/babel.dev\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&spec=false&loose=false&code_lz=KYDwDg9gTgLgBAYwDYEMDOa4DEITgbwCg44BiAIxSjgF44BySqewgX0KA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=&prettier=false&targets=&version=7.12.12&externalPlugins=%40babel%2Fplugin-syntax-class-properties%407.12.1%2C%40babel%2Fplugin-proposal-private-property-in-object%407.12.1)","This is probably fixed by part of https:\/\/github.com\/babel\/babel\/pull\/12250, I can split that PR in two separate PRs.","I'm preparing https:\/\/github.com\/babel\/babel\/pull\/13260 as an alternative for #12250, which gives better and easier control on how the different class features transforms interact."],"labels":["i: bug","i: needs triage"]},{"title":"@babel\/parser(ts): literal computed property names in enums","body":"## Bug Report\r\n\r\n- [ ] I would like to work on a fix!\r\n\r\n**Current behavior**\r\nBabel fails if computed property is provided as key of enum, this synatx should be allowed only for computed properties with string literal value or template literal without arguments.\r\n\r\n**Input Code**\r\n\r\n- [REPL Babel](https:\/\/babeljs.io\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&spec=false&loose=false&code_lz=KYDwDg9gTgLgBMAdgVwLZwGIQnA3gKDiLgG0ByAIwEMAvMgXQBp8BffIA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Cstage-2%2Ctypescript&prettier=false&targets=&version=7.12.12&externalPlugins=), [REPL Typescript](https:\/\/www.typescriptlang.org\/play?#code\/KYDwDg9gTgLgBMAdgVwLZwGIQnA3gWACg4S4BtAcgCMBDALwoF0AaIgXyKA)\r\n\r\n```js\r\n\/\/ should work\r\nexport enum Foo { ['baz'] }\r\nexport enum Foo { [`baz`] }\r\n\r\n\/\/ should fail\r\nexport enum Foo { [foo] }               \/\/ Computed property names are not allowed in enums\r\nexport enum Foo { [1] }                 \/\/ An enum member cannot have a numeric name.\r\nexport enum Foo { [`test${foo}`] }      \/\/ Computed property names are not allowed in enums.\r\n```\r\n\r\n**Expected behavior**\r\nBabel should allow computed property or template literals\r\n\r\n**Note**\r\nIn my opinion this syntax is a issue in typescript as `Computed property names are not allowed in enums (1164)`, but as for now its parsed correctly and results in correct output\r\n\r\n----\r\n- Babel version(s): v7.12.0\r\n- Node\/npm version: 10-14\r\n- OS: ----\r\n- Monorepo: ----\r\n- How you are using Babel: @babel\/parser -> parse\r\n","comments":["Hey @armano2! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","Do you think we should always allow them, or throw when `errorRecovery` is not `true` for the \"should fail\" cases you mentioned?\r\n\r\nImo this is more about syntax than about types because `enum Foo { [foo] }` is an error even if `type Foo = \"foo\"`.","> Imo this is more about syntax than about types because enum Foo { [foo] } is an error even if type Foo = \"foo\".\r\n\r\nthat's correct, this is just about a syntax, I'm unsure if babel actually wants to support this, as it looks like a issue on typescript side. \r\n\r\n--------------\r\n\r\nsome weird uses:\r\n\r\n```ts\r\nexport enum Foo { 'baz' = 2 } \/\/ should work\r\nexport enum Foo { `baz` = 2 } \/\/ should fail\r\n```\r\n\r\n```ts\r\nexport enum Foo { [`'baz'`] = 2 }\r\nFoo[`'baz'`] \/\/ this should work\r\n```","> Do you think we should always allow them, or throw when errorRecovery is not true for the \"should fail\" cases you mentioned?\r\n\r\nwith error recovery babel should let it parse as typescript does, this is useful scenario for consumers like prettier","Should I submit a PR for this?","> Should I submit a PR for this?\r\n\r\n@fedeci yes :>"],"labels":["i: bug","pkg: parser","area: typescript"]},{"title":"Completely ignore `path.context` changes, and maintain a parallel call stack","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | todo\r\n| Patch: Bug Fix?          | Yes\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      |\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\nThere have been different bugs fixed by workarounds in the past months, caused by `path.context` being out of date.\r\n\r\nThis PR completely removes the `setContext`\/`pushContext` logic, and replaces it with a stack updated whenever we create\/discard a `TraversalContext`.\r\n\r\nThere are still some failing tests and a lot of `console.log`s in the code, this is far from being ready.\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/12634\"><img src=\"https:\/\/gitpod.io\/api\/apps\/github\/pbs\/github.com\/nicolo-ribaudo\/babel.git\/264490ecff6cb00d98e44b9156e0bdbf4080cd26.svg\" \/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/37591\/","This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/12634\/builds\/92167) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit 264490ecff6cb00d98e44b9156e0bdbf4080cd26:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-revwo)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-2l7kd)| Configuration |\n"],"labels":["PR: Bug Fix :bug:","pkg: traverse"]},{"title":"@babel\/helpers throws in IE 11, built by rollup-babel","body":"## Bug Report\r\nI want use X6 on IE11  (X6 repo url is: https:\/\/github.com\/antvis\/X6) \r\nBut I cannot make my code build with babel work on the IE11.\r\nCould someone help me to fix it?\r\n\r\n**Current behavior**\r\n![image](https:\/\/user-images.githubusercontent.com\/70048681\/104340772-00804a00-5534-11eb-9d71-c654b6736111.png)\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/70048681\/104339666-cf534a00-5532-11eb-8300-f1931921de08.png)\r\n\r\n\r\n```\r\n \/\/ https:\/\/tc39.es\/ecma262\/#sec-array.isarray\r\n\r\n  crash here=>\r\n_export({\r\n    target: 'Array',\r\n    stat: true\r\n  }, {\r\n    isArray: isArray$3\r\n  });\r\n\r\n```\r\n\r\n**Expected behavior**\r\ncan work on IE11\r\n\r\n**Babel Configuration (babel.config.js, .babelrc, package.json#babel, cli command, .eslintrc)**\r\n\r\npackage.json\r\n```\r\n{\r\n  \"name\": \"@antv\/x6\",\r\n  \"version\": \"1.8.2\",\r\n  \"description\": \"JavaScript diagramming library that uses SVG and HTML for rendering.\",\r\n  \"main\": \"lib\/index.js\",\r\n  \"module\": \"es\/index.js\",\r\n  \"unpkg\": \"dist\/x6.js\",\r\n  \"jsdelivr\": \"dist\/x6.js\",\r\n  \"types\": \"lib\/index.d.ts\",\r\n  \"files\": [\r\n    \"dist\",\r\n    \"es\",\r\n    \"lib\"\r\n  ],\r\n  \"keywords\": [\r\n    \"graph\",\r\n    \"diagram\",\r\n    \"flowchart\",\r\n    \"uml\",\r\n    \"x6-editor\",\r\n    \"editor\",\r\n    \"svg\",\r\n    \"x6\",\r\n    \"antv\"\r\n  ],\r\n  \"scripts\": {\r\n    \"clean:build\": \"rimraf dist es lib\",\r\n    \"clean:coverage\": \"rimraf .\/test\/coverage\",\r\n    \"clean\": \"run-p clean:build clean:coverage\",\r\n    \"lint:es\": \"eslint --ext .js scripts --fix\",\r\n    \"lint:ts\": \"tslint -c tslint.json -p tsconfig.json --fix\",\r\n    \"lint:style\": \"stylelint 'src\/**\/*.less' --syntax less --fix\",\r\n    \"lint\": \"run-s lint:ts lint:es lint:style\",\r\n    \"build:esm\": \"tsc --module esnext --target es2015 --outDir .\/es\",\r\n    \"build:cjs\": \"tsc --module commonjs --target es5 --outDir .\/lib\",\r\n    \"build:umd\": \"rollup -c\",\r\n    \"build:less\": \"node .\/scripts\/style\",\r\n    \"build:readme\": \"node .\/scripts\/readme.js\",\r\n    \"build:version\": \"node .\/scripts\/version.js\",\r\n    \"build:csstype\": \"node .\/scripts\/csstype.js\",\r\n    \"build:dev\": \"run-p build:csstype build:less build:cjs build:esm\",\r\n    \"build:watch\": \"yarn build:esm --w\",\r\n    \"build:watch:esm\": \"yarn build:esm --w\",\r\n    \"build:watch:cjs\": \"yarn build:cjs --w\",\r\n    \"build\": \"run-p build:readme build:version build:dev build:umd\",\r\n    \"prebuild\": \"run-s lint clean\",\r\n    \"test\": \"karma start\",\r\n    \"coveralls\": \"cat .\/test\/coverage\/lcov.info | coveralls\",\r\n    \"pretest\": \"run-p clean:coverage\",\r\n    \"prepare\": \"run-s build:version test build\",\r\n    \"precommit\": \"lint-staged\"\r\n  },\r\n  \"lint-staged\": {\r\n    \"src\/**\/*.less\": [\r\n      \"stylelint --syntax less --fix\"\r\n    ],\r\n    \"*.js\": [\r\n      \"eslint --fix\"\r\n    ],\r\n    \"src\/**\/*.ts\": [\r\n      \"tslint -c tslint.json -p .\/tsconfig.json --fix\"\r\n    ]\r\n  },\r\n  \"dependencies\": {\r\n    \"@babel\/runtime\": \"^7.12.5\",\r\n    \"@babel\/runtime-corejs3\": \"^7.12.5\",\r\n    \"core-js\": \"^3.8.2\",\r\n    \"csstype\": \"^3.0.3\",\r\n    \"jquery\": \"^3.5.1\",\r\n    \"jquery-mousewheel\": \"^3.1.13\",\r\n    \"lodash-es\": \"^4.17.15\",\r\n    \"mousetrap\": \"^1.6.5\",\r\n    \"regenerator-runtime\": \"^0.13.7\",\r\n    \"utility-types\": \"^3.10.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel\/core\": \"^7.12.10\",\r\n    \"@babel\/plugin-proposal-class-properties\": \"^7.12.1\",\r\n    \"@babel\/plugin-proposal-decorators\": \"^7.12.12\",\r\n    \"@babel\/plugin-transform-runtime\": \"^7.12.10\",\r\n    \"@babel\/preset-env\": \"^7.12.11\",\r\n    \"@babel\/preset-typescript\": \"^7.12.10\",\r\n    \"@rollup\/plugin-babel\": \"^5.2.2\",\r\n    \"@rollup\/plugin-commonjs\": \"^17.0.0\",\r\n    \"@rollup\/plugin-node-resolve\": \"^11.0.0\",\r\n    \"@rollup\/plugin-replace\": \"^2.3.4\",\r\n    \"@rollup\/plugin-typescript\": \"^8.1.0\",\r\n    \"@types\/jasmine\": \"^3.6.2\",\r\n    \"@types\/jquery\": \"^3.5.5\",\r\n    \"@types\/jquery-mousewheel\": \"^3.1.8\",\r\n    \"@types\/lodash-es\": \"^4.17.4\",\r\n    \"@types\/mousetrap\": \"^1.6.5\",\r\n    \"@types\/node\": \"^14.14.14\",\r\n    \"@types\/sinon\": \"^9.0.0\",\r\n    \"coveralls\": \"^3.1.0\",\r\n    \"eslint\": \"^7.16.0\",\r\n    \"jasmine-core\": \"^3.6.0\",\r\n    \"karma\": \"^5.2.3\",\r\n    \"karma-chrome-launcher\": \"^3.1.0\",\r\n    \"karma-cli\": \"^2.0.0\",\r\n    \"karma-jasmine\": \"^4.0.1\",\r\n    \"karma-spec-reporter\": \"^0.0.32\",\r\n    \"karma-typescript\": \"^5.2.0\",\r\n    \"karma-typescript-es6-transform\": \"^5.1.0\",\r\n    \"less\": \"^4.0.0\",\r\n    \"lint-staged\": \"^10.5.3\",\r\n    \"npm-run-all\": \"^4.1.5\",\r\n    \"rimraf\": \"^3.0.0\",\r\n    \"rollup\": \"^2.35.1\",\r\n    \"rollup-plugin-filesize\": \"^9.1.0\",\r\n    \"rollup-plugin-progress\": \"^1.1.2\",\r\n    \"rollup-plugin-terser\": \"^7.0.2\",\r\n    \"sinon\": \"^9.0.2\",\r\n    \"stylelint\": \"^13.8.0\",\r\n    \"ts-node\": \"^9.1.1\",\r\n    \"tslint\": \"^6.1.3\",\r\n    \"typescript\": \"^4.1.2\"\r\n  },\r\n  \"author\": {\r\n    \"name\": \"bubkoo\",\r\n    \"email\": \"bubkoo.wy@gmail.com\"\r\n  },\r\n  \"contributors\": [],\r\n  \"license\": \"MIT\",\r\n  \"homepage\": \"https:\/\/github.com\/antvis\/x6\",\r\n  \"bugs\": {\r\n    \"url\": \"https:\/\/github.com\/antvis\/x6\/issues\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"ssh:\/\/git@github.com\/antvis\/x6.git\",\r\n    \"directory\": \"packages\/x6\"\r\n  },\r\n  \"publishConfig\": {\r\n    \"access\": \"public\",\r\n    \"registry\": \"https:\/\/registry.npmjs.org\"\r\n  }\r\n}\r\n```\r\n\r\nrollup.config.js\r\n```\r\nimport { terser } from 'rollup-plugin-terser'\r\nimport replace from '@rollup\/plugin-replace'\r\nimport commonjs from '@rollup\/plugin-commonjs'\r\nimport filesize from 'rollup-plugin-filesize'\r\nimport resolve from '@rollup\/plugin-node-resolve'\r\nimport typescript from '@rollup\/plugin-typescript'\r\n\/\/ import progress from 'rollup-plugin-progress'\r\n\r\nimport babel from '@rollup\/plugin-babel'\r\n\r\n\r\nexport default {\r\n  input: '.\/src\/index.ts',\r\n  output: [\r\n    {\r\n      name: 'X6',\r\n      format: 'umd',\r\n      file: 'dist\/x6.js',\r\n      sourcemap: true,\r\n    },\r\n  ],\r\n  plugins: [\r\n    typescript({ declaration: false }),\r\n    resolve({\r\n      browser: true\r\n    }),\r\n    commonjs(),\r\n    replace({ 'process.env.NODE_ENV': JSON.stringify('production') }),\r\n    \/\/ progress(),\r\n    babel({\r\n      \/\/ exclude: \"node_modules\/**\", \/\/ only transpile our source code\r\n      \/\/ babelHelpers: 'bundled'\r\n      babelHelpers: 'runtime'\r\n    }),\r\n    \/\/ terser(),\r\n    filesize(),\r\n  ],\r\n}\r\n```\r\n\r\nbabel.config.json\r\n```\r\n{\r\n  \"presets\": [\r\n    [\r\n      \"@babel\/preset-env\", {\r\n        \"targets\": {\r\n          \"edge\": \"17\",\r\n          \"firefox\": \"60\",\r\n          \"chrome\": \"67\",\r\n          \"safari\": \"11.1\",\r\n          \"ie\": \"11\"\r\n        },\r\n        \"debug\":true,\r\n        \"shippedProposals\":true,\r\n      \"modules\": false,\r\n      \"loose\": true,\r\n      \"useBuiltIns\": \"entry\",\r\n      \"spec\": true,\r\n      \"forceAllTransforms\": true,\r\n      \"corejs\": { \"version\":3 }\r\n    }],\r\n    [\"@babel\/preset-typeScript\"],\r\n    \"@babel\/preset-react\"\r\n  ],\r\n  \"plugins\": [\r\n    [\"@babel\/plugin-proposal-decorators\",{\"decoratorsBeforeExport\":true}],\r\n    [\"@babel\/plugin-proposal-class-properties\"],\r\n    [\r\n      \"@babel\/plugin-transform-runtime\", \r\n      {\r\n        \"corejs\": { \"version\":3 }\r\n      }\r\n    ]\r\n  ]\r\n}\r\n```\r\n\r\nentry file: src\/index.ts\r\n```\r\n\/\/ import \"core-js\/stable\"\r\nimport \"core-js\/proposals\/string-replace-all\"\r\nimport \"regenerator-runtime\/runtime\"\r\n```\r\n\r\n**Environment**\r\n<!--- Tip: Instead of filling out the questions below, you can run `npx envinfo --preset babel` and paste the result below ``` -->\r\n```\r\nnpx: 1 \u5b89\u88c5\u6210\u529f\uff0c\u7528\u65f6 0.866 \u79d2\r\n\r\n  System:\r\n    OS: macOS 10.15.5\r\n  Binaries:\r\n    Node: 14.7.0 - ~\/.nvm\/versions\/node\/v14.7.0\/bin\/node\r\n    Yarn: 1.22.10 - ~\/.nvm\/versions\/node\/v14.7.0\/bin\/yarn\r\n    npm: 6.14.7 - ~\/.nvm\/versions\/node\/v14.7.0\/bin\/npm\r\n  npmPackages:\r\n    @babel\/core: ^7.12.10 => 7.12.10\r\n    @babel\/plugin-proposal-class-properties: ^7.12.1 => 7.12.1\r\n    @babel\/plugin-proposal-decorators: ^7.12.12 => 7.12.12\r\n    @babel\/plugin-transform-runtime: ^7.12.10 => 7.12.10\r\n    @babel\/preset-env: ^7.12.11 => 7.12.11\r\n    @babel\/runtime: ^7.12.5 => 7.12.5\r\n    @babel\/runtime-corejs3: ^7.12.5 => 7.12.5\r\n```\r\n- Babel version(s): [v7.12.10]\r\n- Node\/npm version: [e.g. Node 14 npm6]\r\n- OS: [macOS 10.15.4, Windows 10]\r\n- Monorepo: [e.g. Lerna]\r\n- How you are using Babel: [`rollup`]\r\n\r\n**Possible Solution**\r\n\r\n\r\n**Additional context**\r\n\r\n","comments":["Hey @quicklearning123! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","```\r\nbabel({\r\n      \/\/ exclude: \"node_modules\/**\", \/\/ only transpile our source code\r\n      \/\/ babelHelpers: 'bundled'\r\n      babelHelpers: 'runtime'\r\n    }),\r\n```\r\nI think `babelHelpers: 'bundled'` serves your purpose: bundle `X6` into a library that can run on `X6test.html`. \r\n\r\nIf you specify `runtime`, Rollup also suggests that you should mark `@babel\/runtime` as an external dependency so `require(\"@babel\/runtime\")` will be in the build artifacts, which is apparently not what you want.\r\n\r\nSee https:\/\/github.com\/rollup\/plugins\/tree\/master\/packages\/babel#babelhelpers for more info.\r\n\r\nCan you also attach the built `X6.js`?","> ```\r\n> babel({\r\n>       \/\/ exclude: \"node_modules\/**\", \/\/ only transpile our source code\r\n>       \/\/ babelHelpers: 'bundled'\r\n>       babelHelpers: 'runtime'\r\n>     }),\r\n> ```\r\n> \r\n> I think `babelHelpers: 'bundled'` serves your purpose: bundle `X6` into a library that can run on `X6test.html`.\r\n> \r\n> If you specify `runtime`, Rollup also suggests that you should mark `@babel\/runtime` as an external dependency so `require(\"@babel\/runtime\")` will be in the build artifacts, which is apparently not what you want.\r\n> \r\n> See https:\/\/github.com\/rollup\/plugins\/tree\/master\/packages\/babel#babelhelpers for more info.\r\n> \r\n> Can you also attach the built `X6.js`?\r\n\r\n@JLHwung \r\nI want to package x6 as npm packgae with rollup, and import into another project built with webpack.\r\nx6test.html is just for IE11 test. \r\n![image](https:\/\/user-images.githubusercontent.com\/70048681\/104404279-44f00200-5595-11eb-8bef-e9c3d22f269c.png)\r\n\r\nAnd when set babelHelpers to bundled, I got an error: \r\n\r\n```\r\n[\/Users\/qingyang\/dev\/X6-master\/node_modules\/tslib\/tslib.es6.js] Based on your code and targets, core-js polyfills were not added.\r\n[!] (plugin babel) Error: You have declared using \"bundled\" babelHelpers, but transforming \/Users\/qingyang\/dev\/X6-master\/node_modules\/tslib\/tslib.es6.js resulted in \"runtime\". Please check your configuration.\r\n..\/..\/node_modules\/tslib\/tslib.es6.js\r\nError: You have declared using \"bundled\" babelHelpers, but transforming \/Users\/qingyang\/dev\/X6-master\/node_modules\/tslib\/tslib.es6.js resulted in \"runtime\". Please check your configuration.\r\n    at error (\/Users\/qingyang\/dev\/X6-master\/node_modules\/rollup\/dist\/shared\/rollup.js:5265:30)\r\n    at throwPluginError (\/Users\/qingyang\/dev\/X6-master\/node_modules\/rollup\/dist\/shared\/rollup.js:17956:12)\r\n    at Object.error (\/Users\/qingyang\/dev\/X6-master\/node_modules\/rollup\/dist\/shared\/rollup.js:18563:24)\r\n    at Object.error (\/Users\/qingyang\/dev\/X6-master\/node_modules\/rollup\/dist\/shared\/rollup.js:18125:38)\r\n    at preflightCheck (\/Users\/qingyang\/dev\/X6-master\/packages\/x6\/node_modules\/@rollup\/plugin-babel\/dist\/index.js:204:9)\r\n    at \/Users\/qingyang\/dev\/X6-master\/packages\/x6\/node_modules\/@rollup\/plugin-babel\/dist\/index.js:433:13\r\n    at transformCode (\/Users\/qingyang\/dev\/X6-master\/packages\/x6\/node_modules\/@rollup\/plugin-babel\/dist\/index.js:245:24)\r\n    at ModuleLoader.addModuleSource (\/Users\/qingyang\/dev\/X6-master\/node_modules\/rollup\/dist\/shared\/rollup.js:18319:30)\r\n    at ModuleLoader.fetchModule (\/Users\/qingyang\/dev\/X6-master\/node_modules\/rollup\/dist\/shared\/rollup.js:18375:9)\r\n    at async Promise.all (index 0)\r\n    at ModuleLoader.fetchStaticDependencies (\/Users\/qingyang\/dev\/X6-master\/node_modules\/rollup\/dist\/shared\/rollup.js:18400:34)\r\n    at async Promise.all (index 0)\r\n    at ModuleLoader.fetchModule (\/Users\/qingyang\/dev\/X6-master\/node_modules\/rollup\/dist\/shared\/rollup.js:18377:9)\r\n    at async Promise.all (index 12)\r\n    at ModuleLoader.fetchStaticDependencies (\/Users\/qingyang\/dev\/X6-master\/node_modules\/rollup\/dist\/shared\/rollup.js:18400:34)\r\n    at async Promise.all (index 0)\r\n\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! errno 1\r\nnpm ERR! @antv\/x6@1.8.2 build:umd: `rollup -c`\r\nnpm ERR! Exit status 1\r\n\r\n```\r\n","@JLHwung  We are too slow to access github. \r\nThe built x6.js is here: https:\/\/gitee.com\/quicklearning123\/X6\/blob\/master\/packages\/x6\/dist_v1\/x6.js,\r\nand the code repo is also here:https:\/\/gitee.com\/quicklearning123\/X6\/tree\/master\/packages\/x6\r\n","still many  log when building even add exclude: \"node_modules\/**\"\r\nWhy it says \"Import of core-js was not found\" ?\r\n\r\n```\r\n[\/Users\/qingyang\/dev\/myx6\/X6\/node_modules\/core-js-pure\/es\/instance\/trim-right.js] Import of core-js was not found.\r\nThough the \"loose\" option was set to \"true\" in your @babel\/preset-env config, it will not be used for @babel\/plugin-proposal-private-methods since the \"loose\" mode option was set to \"false\" for @babel\/plugin-proposal-class-properties.\r\nThe \"loose\" option must be the same for @babel\/plugin-proposal-class-properties, @babel\/plugin-proposal-private-methods and @babel\/plugin-proposal-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding\r\n\t[\"@babel\/plugin-proposal-private-methods\", { \"loose\": false }]\r\nto the \"plugins\" section of your Babel config.\r\n\r\n[\/Users\/qingyang\/dev\/myx6\/X6\/node_modules\/core-js-pure\/es\/string\/virtual\/trim-left.js] Import of core-js was not found.\r\nThough the \"loose\" option was set to \"true\" in your @babel\/preset-env config, it will not be used for @babel\/plugin-proposal-private-methods since the \"loose\" mode option was set to \"false\" for @babel\/plugin-proposal-class-properties.\r\nThe \"loose\" option must be the same for @babel\/plugin-proposal-class-properties, @babel\/plugin-proposal-private-methods and @babel\/plugin-proposal-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding\r\n\t[\"@babel\/plugin-proposal-private-methods\", { \"loose\": false }]\r\nto the \"plugins\" section of your Babel config.\r\n\r\n[\/Users\/qingyang\/dev\/myx6\/X6\/node_modules\/core-js-pure\/es\/string\/virtual\/trim-left.js] Import of core-js was not found.\r\nThough the \"loose\" option was set to \"true\" in your @babel\/preset-env config, it will not be used for @babel\/plugin-proposal-private-methods since the \"loose\" mode option was set to \"false\" for @babel\/plugin-proposal-class-properties.\r\nThe \"loose\" option must be the same for @babel\/plugin-proposal-class-properties, @babel\/plugin-proposal-private-methods and @babel\/plugin-proposal-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding\r\n\t[\"@babel\/plugin-proposal-private-methods\", { \"loose\": false }]\r\nto the \"plugins\" section of your Babel config.\r\n\r\n[\/Users\/qingyang\/dev\/myx6\/X6\/node_modules\/core-js-pure\/es\/string\/virtual\/trim-right.js] Import of core-js was not found.\r\nThough the \"loose\" option was set to \"true\" in your @babel\/preset-env config, it will not be used for @babel\/plugin-proposal-private-methods since the \"loose\" mode option was set to \"false\" for @babel\/plugin-proposal-class-properties.\r\nThe \"loose\" option must be the same for @babel\/plugin-proposal-class-properties, @babel\/plugin-proposal-private-methods and @babel\/plugin-proposal-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding\r\n\t[\"@babel\/plugin-proposal-private-methods\", { \"loose\": false }]\r\nto the \"plugins\" section of your Babel config.\r\n\r\n[\/Users\/qingyang\/dev\/myx6\/X6\/node_modules\/core-js-pure\/es\/string\/virtual\/trim-right.js] Import of core-js was not found.\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502                              \u2502\r\n\u2502   Destination: dist\/x6.js    \u2502\r\n\u2502   Bundle Size:  2.62 MB      \u2502\r\n\u2502   Minified Size:  1 MB       \u2502\r\n\u2502   Gzipped Size:  284.73 KB   \u2502\r\n\u2502                              \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n(!) Circular dependencies\r\n..\/..\/node_modules\/@babel\/runtime-corejs3\/core-js\/instance\/slice.js -> ..\/..\/node_modules\/core-js-pure\/features\/instance\/slice.js -> ..\/..\/node_modules\/core-js-pure\/es\/instance\/slice.js -> ..\/..\/node_modules\/@babel\/runtime-corejs3\/core-js\/instance\/slice.js\r\n..\/..\/node_modules\/@babel\/runtime-corejs3\/core-js\/instance\/slice.js -> ..\/..\/node_modules\/core-js-pure\/features\/instance\/slice.js -> ..\/..\/node_modules\/core-js-pure\/es\/instance\/slice.js -> ..\/..\/node_modules\/core-js-pure\/es\/array\/virtual\/slice.js -> ..\/..\/node_modules\/@babel\/runtime-corejs3\/core-js\/instance\/slice.js\r\n..\/..\/node_modules\/@babel\/runtime-corejs3\/core-js\/instance\/slice.js -> ..\/..\/node_modules\/core-js-pure\/features\/instance\/slice.js -> ..\/..\/node_modules\/core-js-pure\/es\/instance\/slice.js -> ..\/..\/node_modules\/core-js-pure\/es\/array\/virtual\/slice.js -> ..\/..\/node_modules\/core-js-pure\/modules\/es.array.slice.js -> ..\/..\/node_modules\/@babel\/runtime-corejs3\/core-js\/instance\/slice.js\r\n```","I changed config, the v2 https:\/\/gitee.com\/quicklearning123\/X6\/blob\/master\/packages\/x6\/dist_v2\/x6.js\r\nerror on IE11 is :\r\n![image](https:\/\/user-images.githubusercontent.com\/70048681\/104492721-026b0b80-560f-11eb-9b0e-4c751cfb5fc0.png)\r\n![image](https:\/\/user-images.githubusercontent.com\/70048681\/104492781-1a428f80-560f-11eb-9774-450173a63103.png)\r\n\r\n","![image](https:\/\/user-images.githubusercontent.com\/70048681\/104493091-81f8da80-560f-11eb-9375-1b02e294fef6.png)\r\n","The error is thrown from lodash in your n_m:\r\n\r\nhttps:\/\/github.com\/lodash\/lodash\/blob\/2f79053d7bc7c9c9561a30dda202b3dcd2b72b90\/.internal\/nodeTypes.js#L6-L7\r\n\r\nwhere `typeof module` is replaced by `\"object\"` and thus it throws on IE 11. Since `lodash` is excluded in `rollup-babel` and `terser` is not enabled, please check if you have enabled some tools that evaluates `typeof module` to `\"object\"`."],"labels":["i: question"]},{"title":"@babel\/preset-typescript removes imported JSX pragma","body":"## Bug Report\r\n\r\n- [ ] I would like to work on a fix!\r\n\r\n**Input Code**\r\n\r\n```js\r\nimport { h, render } from \"preact\";\r\n\r\nconst root = document.getElementById(\"root\");\r\n\r\nrender(<div>hello<\/div>, root);\r\n```\r\n\r\n\r\n**Current behavior**\r\n```js\r\nimport { render } from \"preact\"; \/\/ `h` import is gone\r\nconst root = document.getElementById(\"root\");\r\nrender(h(\"div\", null, \"hello\"), root);\r\n```\r\n\r\n\r\n**Expected behavior**\r\n```js\r\nimport { h, render } from \"preact\";\r\nconst root = document.getElementById(\"root\");\r\nrender(h(\"div\", null, \"hello\"), root);\r\n```\r\n\r\n**Babel Configuration (babel.config.js, .babelrc, package.json#babel, cli command, .eslintrc)**\r\n- Filename: `.babelrc`\r\n\r\n```js\r\n{\r\n\t\"presets\": [\r\n\t\t\"@babel\/preset-typescript\",\r\n\t\t[\"@babel\/preset-react\", { \"pragma\": \"h\" }]\r\n\t]\r\n}\r\n```\r\n\r\n**Environment**\r\n\r\n```\r\n  System:\r\n    OS: macOS 10.15.5\r\n  Binaries:\r\n    Node: 14.15.3 - \/usr\/local\/opt\/node@14\/bin\/node\r\n    Yarn: 1.22.10 - \/usr\/local\/bin\/yarn\r\n    npm: 6.14.9 - \/usr\/local\/opt\/node@14\/bin\/npm\r\n  npmPackages:\r\n    @babel\/cli: ^7.12.10 => 7.12.10\r\n    @babel\/core: ^7.0.0 => 7.12.10\r\n    @babel\/preset-react: ^7.12.10 => 7.12.10\r\n    @babel\/preset-typescript: ^7.12.7 => 7.12.7\r\n\r\n```\r\n\r\n**Additional context**\r\nhttps:\/\/github.com\/parcel-bundler\/parcel\/issues\/5566\r\n","comments":["Hey @mischnic! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","It's unfortunate that you need to specify it twice, but you have to pass the [`jsxPragma`](https:\/\/babeljs.io\/docs\/en\/babel-preset-typescript#jsxpragma) option to the TS preset.\r\n\r\nThis will be resolved in Babel 8, when we'll stop removing unused imports by default."],"labels":["i: bug","i: needs triage"]},{"title":"Make option getModuleId be used with relative imports","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | None <!--`Fixes #1, Fixes #2` remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          | \ud83d\udc4d (I think so, depends on interpretation)\r\n| Major: Breaking Change?  | Maybe (not detected on tests)\r\n| Minor: New Feature?      | Maybe\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | #TO-DO <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  | No\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\nI want to make my UMD modules with AMD module IDs, but the `getModuleId()` option is not used on the imported module paths. Then a imported module gets a module ID when it is transformed, but the first module is not calling it by its new ID. I believe this to be a bug fix. I guess there are very few people using AMD modules and loaders anymore, but still.\r\n\r\nThere are some things in the code that are strange to me. For example, I'm assuming that import names that don't begin with \"\/\", \".\/\" or \"..\/\" should be left as they are. Maybe we could pass them to `getModuleId()` as well, but it looks that then I wouldn't be able to use `getModuleName()`, I'd have to call `getModuleId()` directly but I feel that adding another entry point might break something else.\r\n\r\nAnother thing that seems odd is that when using \"globals\" option, the entry module is searched by its `getModuleId()` value, but the imported module is called by its relative path despite also having a module Id. I don't like this asymmetry, shouldn't both names be get by the module Id or the relative path?\r\n\r\nIf someone else was using `getModuleId()` and relative imports, stuff might break for them. Maybe it would be necessary to add another option to the UMD plugin so users would opt-in into this feature.\r\n\r\nI guess the AMD implementation is compatible only with require.js or other loaders that compute module IDs from file paths, but there are lighter AMD loaders that call modules only by the ID. If your code has two modules and you use `getModuleId()` on them, I think that they should each call the other by the module ID and not the relative path.\r\n\r\nFor now, I tried to do the simplest thing possible that solved my use case, but I feel that there are many details still that could be debated further. What do you guys think?\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/12582\"><img src=\"https:\/\/gitpod.io\/api\/apps\/github\/pbs\/github.com\/arijs\/babel.git\/bc974c69fdfc8baae3184fe324e66771473019a1.svg\" \/><\/a>\n\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/36877\/","This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/12582\/builds\/89585) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit bc974c69fdfc8baae3184fe324e66771473019a1:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-ghp7x)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-9yedf)| Configuration |\n","I think we could introduce `getSource` parallel to `getModuleId` for this purpose\r\n```js\r\n(source: string, options: BabelOptions, moduleDefinition: \"amd\" | \"commonjs\" | \"systemjs\" | null) => string,\r\n```\r\nand extend `getModuleId` from `(source: string) => string` to\r\n```js\r\n(source: string, options: BabelOptions, moduleDefinition: \"amd\" | \"commonjs\" | \"systemjs\" | null) => string,\r\n```\r\nwhere a nullish value refers to `browserGlobals`.\r\n\r\nSo most logic in this PR can be shifted to the plugin land and thus it offers more flexibility for advanced users while minimizing the risk of breaking current usage."],"labels":["PR: New Feature :rocket:","area: modules"]},{"title":"@bable\/plugin-transform-runtime with corejs option doesn't replace Promise created by import()","body":"## Bug Report\r\n\r\n**Current behavior**\r\nHi guys,\r\nI'm working on a widget which is being implemented on various websites which is why I want to avoid polluting global scope with polyfills. The widget app is built using create-react-app and I add babel plugins to it thanks to react-app-rewired and customize-cra like this:\r\n```javascript\r\naddBabelPlugin([\r\n    \"@babel\/plugin-transform-runtime\",\r\n    {\r\n      corejs: 3,\r\n      version: \"^7.7.4\",\r\n    },\r\n  ])(config);\r\n```\r\nI have also MiniCssExtractPlugin enabled to handle css files.\r\n\r\nWhen I look at the compiled JS code, it looks like loading both JS and CSS chunks still tries to use the global Promise instead of being replaced with the corejs alias:\r\n\r\n\r\n**Writing the following code:**\r\n\r\n<details>\r\n  <summary>Toggle code<\/summary>\r\n  \r\n```javascript\r\nimport \".\/index.css\";\r\nimport(\".\/App\");\r\n\r\nconst test = () => Promise.resolve(\"resolve test\");\r\ntest();\r\n```\r\n<\/details>\r\n\r\n**Results in the following bundle:**\r\n\r\n<details>\r\n<summary>Toggle code <\/summary>\r\n\r\n```javascript\r\n\/\/ ...\r\nfunction(t){var n=[],r=e[t];if(0!==r)if(r)n.push(r[2]);else{var i=new Promise((function(n,o){r=e[t]=[n,o]}));n.push(r[2]=i);var c,u=document.createElement(\"script\");u.charset=\"utf-8\",u.timeout=120,o.nc&&u.setAttribute(\"nonce\",o.nc),u.src=function(t){return o.p+\"static\/js\/\"+({}[t]||t)+\".\"+{1:\"6a5fe460\"}[t]+\".chunk.js\"}(t);var a=new Error;c=function(n){u.onerror=u.onload=null,clearTimeout(f);var r=e[t];if(0!==r){if(r){var o=n&&(\"load\"===n.type?\"missing\":n.type),i=n&&n.target&&n.target.src;a.message=\"Loading chunk \"+t+\" failed.\\n(\"+o+\": \"+i+\")\",a.name=\"ChunkLoadError\",a.type=o,a.request=i,r[1](a)}e[t]=void 0}};var f=setTimeout((function(){c({type:\"timeout\",target:u})}),12e4);u.onerror=u.onload=c,document.head.appendChild(u)}return Promise.all(n)}\r\n\/\/ ...\r\nfunction(t,n,r){\"use strict\";r.r(n);var e=r(56),o=r.n(e);r(98);r.e(1).then(r.t.bind(null,99,7));o.a.resolve(\"resolved test\")}\r\n\/\/ ...\r\n```\r\n<\/details>\r\n\r\n\r\n** Repo with minimal example:**\r\nhttps:\/\/github.com\/jedlikowski\/babel-transform-runtime-dynamic-import\r\n\r\n**Expected behavior**\r\nChunk loading code is replaced with corejs alias instead of relying on global Promise\r\n\r\n**Environment**\r\n<!--- Tip: Instead of filling out the questions below, you can run `npx envinfo --preset babel` and paste the result below ``` -->\r\n```\r\nSystem:\r\n    OS: macOS 11.1\r\n  Binaries:\r\n    Node: 14.15.3 - \/usr\/local\/bin\/node\r\n    Yarn: 1.22.10 - \/usr\/local\/bin\/yarn\r\n    npm: 6.14.9 - \/usr\/local\/bin\/npm\r\n  npmPackages:\r\n    @babel\/plugin-transform-runtime: ^7.12.10 => 7.12.10 \r\n    @babel\/runtime-corejs3: ^7.12.5 => 7.12.5 \r\n```\r\n","comments":["Hey @jedlikowski! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","Just want to mention that this can be reproduced without `react-app-rewired` and `customize-cra`, thereby excluding them as suspects.\r\n\r\n### Steps to reproduce\r\n\r\nCreate a new CRA project and eject it so the config can be changed:\r\n\r\n```sh\r\n> npx create-react-app my-app\r\n> cd my-app\r\n> yarn eject\r\n```\r\n\r\nAdd the `@babel\/plugin-transform-runtime` plugin\r\n\r\n- Open config\/webpack.config.js\r\n- Find the comment that says \u201cProcess application JS with Babel.\u201d\r\n- Add the following entry in the plugins array:\r\n\r\n```javascript\r\n[\r\n  require.resolve(\"@babel\/plugin-transform-runtime\"),\r\n  {\r\n    corejs: 3,\r\n    version: \"^7.7.4\",\r\n  },\r\n]\r\n```\r\n\r\nBuild the project:\r\n\r\n```\r\n> yarn build\r\n```\r\n\r\nIt might fail with `Cannot find module '@babel\/plugin-syntax-jsx\u2019` (bug in create-react-app? \ud83e\udd37\u200d\u2642\ufe0f). Just add it for now and try again:\r\n\r\n```\r\n> yarn add --dev @babel\/plugin-syntax-jsx\r\n> yarn build\r\n```\r\n\r\nObserve that the built-in `Promise` is used:\r\n\r\n```\r\n> grep -Fl 'new Promise' build\/static\/js\/*.js\r\nbuild\/static\/js\/3.f0fca9c9.chunk.js\r\nbuild\/static\/js\/runtime-main.3bd33e7c.js\r\n```","This is probably impossible to fix.\r\n\r\nWith `babel-loader`, webpack passes to Babel every input file. However, the `Promise` used by dynamic import is not in a file passed to Babel, but in the wrapper that Webpack injects at the end of the bundling process (without passing it to Babel).\r\n\r\nYou could try running Babel not with `babel-loader`, but with `@babel\/cli` on the bundle generated by webpack.","Ah, so the Promise comes from Dynamic imports. It even says in the [webpack docs](https:\/\/webpack.js.org\/guides\/code-splitting\/#dynamic-imports):\r\n\r\n> `import()` calls use promises internally. If you use `import()` with older browsers (e.g., IE 11), remember to shim _Promise_ using a polyfill such as es6-promise or promise-polyfill.","Yeah. Still feels like something that should be handled somehow. @bable\/plugin-transform-runtime promises to alias the pollyfillable features and here it's not happening. Is there a way to hook up to the webpack compilation process to transform this Promise?\n\n"],"labels":["i: bug"]},{"title":"Parser packages' exports don't look normal.","body":"## Bug Report\r\n\r\n- [x] I would like to work on a fix!\r\n\r\n**Current behavior**\r\n\r\nAs the titlle, the utility packages' exports don't look normal. They are '@babel\/parser', '@babel\/traverse' and '@babel\/generator'.\r\n\r\nTo be honest, I can't believe this is going to happen, because it's a long-term project. If so many plugins use such poor API, how did this project develop?\ud83d\ude49\r\n\r\nI downloaded my dependencies many times, and checked the dependency folders. I can be sure this problem really exists.\r\n\r\n**Input Code**\r\n```js\r\nimport { parse } from \"@babel\/parser\";\r\nimport traverse from \"@babel\/traverse\";\r\nimport generator from \"@babel\/generator\";\r\n```\r\n\r\n**Expected behavior**\r\nI can use these packages in this way:\r\n\r\n```js\r\nimport { parse } from \"@babel\/parser\";\r\nimport { traverse } from \"@babel\/traverse\";\r\nimport { generator } from \"@babel\/generator\";\r\n```\r\n\r\nOr this way:\r\n\r\n```js\r\nimport parse from \"@babel\/parser\";\r\nimport traverse from \"@babel\/traverse\";\r\nimport generator from \"@babel\/generator\";\r\n```\r\n\r\n**Environment**\r\n- Babel version(s): v7.12.10\r\n- OS: Browser(Chrome 87)\r\n- Monorepo: no\r\n- How you are using Babel: on CodeSandbox\r\n\r\n**Possible Solution**\r\n\r\nExports 'default' at the package '@babel\/parser', and export 'traverse' and 'generator' at the packages '@babel\/traverse' and '@babel\/generator'.\r\n\r\n**Additional context**\r\n![image](https:\/\/user-images.githubusercontent.com\/23103705\/103137655-bc084800-4705-11eb-8fba-64357053c968.png)\r\n\r\n(I also have tried on VSCode and it is also not looks well.)","comments":["Hey @langyo! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","also encountering this\n(`\"type\": \"module\"` in `package.json`)"],"labels":["i: enhancement"]},{"title":"The first-line comment is removed unexpectedly","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #11971 <!-- remove the (`) quotes and write \"Fixes\" before the number to link the issues -->\r\n| Patch: Bug Fix?          | Yes\r\n| Major: Breaking Change?  | No\r\n| Minor: New Feature?      | No\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  | No\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\nAs explained in #11971, the first comment is sometimes removed while it shouldn't. Consider the following snippet from the issue:\r\n```javascript\r\n\/\/ test\r\nimport React from 'react';\r\n\r\nexport default class A extends B {}\r\n```\r\n\r\nThe bug occurs during the transformation of the AST. When the `ImportDeclaration` node is removed, its leading comment should be transferred to one of its new sibling nodes. And it pretty much does unless you want to compile for IE 11 or lower which causes some extra JavaScript code to be generated in the top of the file.\r\n\r\nThis results in a failure in two if statements. The comment will be added to the previous node if the removed node doesn't have a next node or to the next node if it doesn't have a previous node. If it has both a previous and a next node, then the comment is simply discarded.\r\n\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/12558\"><img src=\"https:\/\/gitpod.io\/api\/apps\/github\/pbs\/github.com\/Robinsstudio\/babel.git\/06153ecfe63c48ae52d1c298cae51b8a97190cd8.svg\" \/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/36471\/","This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/12558\/builds\/85612) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit 06153ecfe63c48ae52d1c298cae51b8a97190cd8:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-keqme)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-prl9h)| Configuration |\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-g3rt3)| Issue #11971 |\n"],"labels":["PR: Bug Fix :bug:","area: comments"]},{"title":"Fix disappearing polyfills when conflicting versions of preset are used","body":"| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #12545 \r\n| Patch: Bug Fix?          | Yes\r\n| Major: Breaking Change?  | No\r\n| Minor: New Feature?      | No\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | No\r\n| Any Dependency Changes?  | No\r\n| License                  | MIT\r\n\r\nIf the preset-env is applied twice and\r\n - one version includes the extension change  from #10862\r\n - the other version does not include the change \r\n \r\nThe core-js polyfills are removed from the bundle.\r\n \r\nExample of breaking configuration can be found in the demo project: \r\nhttps:\/\/github.com\/ertrzyiks\/babel-loader-lost-polyfills-demo\r\n \r\nThe demo project uses preset-env and preset-react-app. The minimal configuration causing polyfills to disappear is the following:\r\n```js\r\npresets: [\r\n  [\r\n    \/\/ => Found \"@babel\/preset-env@7.12.11\"\r\n    require('@babel\/preset-env').default,\r\n    { corejs: 3, useBuiltIns: 'entry' }\r\n  ],\r\n  [\r\n    \/\/=> Found \"babel-preset-react-app#@babel\/preset-env@7.12.1\"\r\n    require('babel-preset-react-app\/node_modules\/@babel\/preset-env').default, \r\n    { corejs: 3, useBuiltIns: 'entry' }\r\n  ],\r\n]\r\n```\r\n\r\n\r\n### Updated snapshots\r\n\r\nThe two updated snapshots are for cases when the input importing specific files like \r\n```\r\nimport 'core-js\/modules\/es.symbol';\r\nimport 'core-js\/modules\/es.object.from-entries';\r\nimport 'core-js\/modules\/esnext.string.replace-all';\r\n```\r\n\r\nso judging by the purpose of the original PR introducing the extensions won't be problematic: the original imports are kept untouched. No autogenerated code without .js extension though.\r\n\r\n\r\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/12554\"><img src=\"https:\/\/gitpod.io\/api\/apps\/github\/pbs\/github.com\/ertrzyiks\/babel.git\/28f6547f8d593ccb4001650e154fcbaf4c0fc386.svg\" \/><\/a>\r\n\r\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/36836\/","This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/12554\/builds\/89449) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit 28f6547f8d593ccb4001650e154fcbaf4c0fc386:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-5nzs6)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-02l1i)| Configuration |\n","It's possible that this will also be fixed by https:\/\/github.com\/babel\/babel\/pull\/12583","@ertrzyiks #12583 doesn't fix this bug, but since we are replacing our polyfills injection logic I have copied this PR to https:\/\/github.com\/babel\/babel-polyfills\/pull\/56 (also, I figured out how to properly add a test).\r\n\r\nThanks for the help anyway, and I set you as the author of the commits in the other repo!","@nicolo-ribaudo makes sense, thanks for letting me know and all the help with my very first PR. It was unexpectedly easy to work with such complex codebase. We can close this PR, right?","I don't know if #12583 will be merged before the next release, so I think it's better to keep this open for now."],"labels":["PR: Bug Fix :bug:"]},{"title":"Spread ...args is undefined in async function called from other async function in object","body":"## Bug Report\r\nFor me this looks like duplicate of https:\/\/github.com\/babel\/babel\/issues\/4219 which is closed.\r\nI've encountered this problem in our project but reproduced it in standalone version as well. Suppose we have this code:\r\n```js\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Document<\/title>\r\n<\/head>\r\n<body>\r\n  <script src=\"https:\/\/unpkg.com\/@babel\/standalone\/babel.min.js\"><\/script>\r\n  <!-- Your custom script here -->\r\n  <script type=\"text\/babel\">\r\n    const testObject = {\r\n      async bar(...args) {\r\n        args;\r\n        const arg = args[args.length - 1];\r\n        if (arg === 5) return true;\r\n        return false;\r\n      },\r\n      async foo() {\r\n        const result = await this.bar(5);\r\n        console.log(result)\r\n      },\r\n    };\r\n\r\n    (async () => testObject.foo())();\r\n  <\/script>\r\n<\/body>\r\n<\/html>\r\n```\r\nIf we will write `args;` in `bar` function (or replace `args[args.length - 1]` with `args.pop()`) this code will output `true` in console but if we remove `args;` or `args.pop()` it will return `false` as `args` will be `undefined`\r\nIs it intended behaviour or this bug appeared again?\r\n\r\nThanks\r\n","comments":["Hey @etharner! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\""],"labels":["i: bug","i: needs triage"]},{"title":"[preset-env] all the core-js imports are removed","body":"## Bug Report\r\n\r\n**Current behavior**\r\n\r\nNo core-js polyfills in the final bundle.\r\n\r\nSince https:\/\/github.com\/babel\/babel\/pull\/10862 the core-js polyfill paths always have `.js` extension.\r\nIn `shouldReplace` function https:\/\/github.com\/babel\/babel\/blob\/41085248560b1403b8d0f99f108491e679531c6c\/packages\/babel-preset-env\/src\/polyfills\/corejs3\/entry-plugin.js#L52-L64 \r\nthe module path is compared with the source. In my application the comparison happens between `core-js\/modules\/es.symbol` and `core-js\/modules\/es.symbol.js` causing the function to return different value than expected.\r\n\r\n - Repo to reproduce the problem: https:\/\/github.com\/ertrzyiks\/babel-loader-lost-polyfills-demo\r\n\r\n**Input Code**\r\n\r\n```js\r\nimport 'core-js'\r\n\r\nconsole.log([1, [2]].flat())\r\n```\r\n\r\n**Expected behavior**\r\nImporting core-js includes polyfill to the final bundle\r\n\r\n**Babel Configuration (babel.config.js, .babelrc, package.json#babel, cli command, .eslintrc)**\r\n- Filename: `babel.config.js`\r\n\r\n```js\r\nmodule.exports = {\r\n  mode: 'production',\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: \/\\.js$\/,\r\n        use: {\r\n          loader: 'babel-loader',\r\n          options: {\r\n            cacheDirectory: false,\r\n            presets: [\r\n              ['@babel\/preset-env', { corejs: 3, useBuiltIns: 'entry' }],\r\n               'react-app'\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\n```\r\n\r\n**Environment**\r\n<!--- Tip: Instead of filling out the questions below, you can run `npx envinfo --preset babel` and paste the result below ``` -->\r\n```\r\nnpx envinfo --preset babel\r\nnpx: installed 1 in 1.147s\r\n\r\n  System:\r\n    OS: macOS 10.15.4\r\n  Binaries:\r\n    Node: 12.16.1 - ~\/.nvm\/versions\/node\/v12.16.1\/bin\/node\r\n    Yarn: 1.22.4 - ~\/.nvm\/versions\/node\/v12.16.1\/bin\/yarn\r\n    npm: 5.1.0 - ~\/workspace\/app\/node_modules\/.bin\/npm\r\n  npmPackages:\r\n    @babel\/core: ^7.0.0 => 7.12.10 \r\n    @babel\/preset-env: ^7.12.11 => 7.12.11 \r\n    babel-loader: 8.2.2 => 8.2.2 \r\n    babel-preset-react-app: ^10.0.0 => 10.0.0 \r\n    webpack: ^4.44.2 => 4.44.2 \r\n```\r\n\r\n- How you are using Babel: webpack\r\n\r\n**Possible Solution**\r\nMake the comparison ignore module path extension. My application compiles correctly if I alter the condition to exclude the extension. (note hardcoded string slice)\r\n\r\n```\r\nfunction shouldReplace(source, modules) {\r\n    if (!modules) return false;\r\n\r\n    if (modules.length === 1 && polyfills.has(modules[0]) && available.has(modules[0]) && (0, _utils.getModulePath)(modules[0]).slice(0, -3) === source) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n```\r\n\r\n","comments":["Hey @ertrzyiks! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","We could use this to handle both the cases:\r\n```js\r\ngetModulePath(modules[0]) === source || getModulePath(modules[0]) === `${source}.js`\r\n```\r\n\r\nI'm marking this as a good first issue since it shouldn't be too hard to fix it, but it gives the opportunity to setup the repo and learn how our tests work, and fixing it has a good impact since currently the whole `useBuiltIns: \"entry\"` feature is probably broken.\r\n\r\n---\r\n\r\n<!-- ALERT!!!!!!!\r\n    Before submitting this comment, please:\r\n      1. Write where to start searching the bug\r\n      2. Write where to add a new test\r\n    See https:\/\/github.com\/babel\/babel\/issues\/9563#issuecomment-466799807 for an example\r\n-->\r\n\r\nIf it is the first time that you contribute to Babel, follow these steps: (you need to have `make` and `yarn` available on your machine)\r\n1. **Write a comment there** to let other possible contributors know that you are working on this bug.\r\n1. Fork the repo\r\n1. Run `git clone https:\/\/github.com\/<YOUR_USERNAME>\/babel.git && cd babel`\r\n1. Run `make bootstrap` to install deps and setup the monorepo\r\n1. Wait :hourglass_flowing_sand: \r\n1. Run `make watch` (or `make build` whenever you change a file)\r\n1. Add a test (only `input.js`\/`input.mjs`; `output.js` will be automatically generated)\r\n1. Update the code!\r\n1. `yarn jest preset-env` to run the tests\r\n    - If some test outputs don't match but the new results are correct, you can delete the bad `output.js` files and run the tests again\r\n    - If you prefer, you can run `OVERWRITE=true yarn jest preset-env` and they will be automatically updated.\r\n1. If it is working, run `make test` to run all the tests\r\n1. Run `git push` and open a PR!","Thanks @nicolo-ribaudo , I can work on a PR tomorrow morning","Thanks! :orange_heart: ","I narrowed it down even further. In the demo I show it breaks when used with `react-app` preset. The minimum breaking setup is the following:\r\n\r\n```js\r\n presets: [\r\n  [require('@babel\/preset-env').default, { corejs: 3, useBuiltIns: 'entry' }],\r\n  [require('babel-preset-react-app\/node_modules\/@babel\/preset-env').default, { corejs: 3, useBuiltIns: 'entry' }],\r\n]\r\n``` \r\n\r\nso we have two different versions of the preset applied.\r\n\r\n```js\r\n=> Found \"@babel\/preset-env@7.12.11\"\r\ninfo Has been hoisted to \"@babel\/preset-env\"\r\ninfo This module exists because it's specified in \"dependencies\".\r\ninfo Disk size without dependencies: \"216KB\"\r\ninfo Disk size with unique dependencies: \"3.9MB\"\r\ninfo Disk size with transitive dependencies: \"20.1MB\"\r\ninfo Number of shared dependencies: 84\r\n=> Found \"babel-preset-react-app#@babel\/preset-env@7.12.1\"\r\ninfo This module exists because \"babel-preset-react-app\" depends on it.\r\ninfo Disk size without dependencies: \"1.02MB\"\r\ninfo Disk size with unique dependencies: \"4.7MB\"\r\ninfo Disk size with transitive dependencies: \"20.9MB\"\r\ninfo Number of shared dependencies: 84\r\n```\r\n\r\nI'm not sure how to write a good regression test for this case. ","I've submitted a PR with just the code change. I tried to write a regression test but it works properly when only one version of the preset is used. I'm open for suggestions on how to approach it. If you think it makes sense to add a specific version of the preset to the dependencies and have a test anyway, I can try to make it happen.\r\n\r\nAlso, that change broke some other scenarios, so I'm not sure if I'm looking at the correct place. Need more digging.\r\n\r\nEdit: I think the breaking scenarios are valid without the extension, so \ud83d\udc4c ","![screenshot 2021-02-15 a las 13 03 05](https:\/\/user-images.githubusercontent.com\/22520811\/107944646-bfde7b00-6f8e-11eb-822d-2e156938f521.jpg)\r\n![screenshot 2021-02-15 a las 13 03 28](https:\/\/user-images.githubusercontent.com\/22520811\/107944653-c240d500-6f8e-11eb-934a-171e65bbcd20.jpg)\r\n![screenshot 2021-02-15 a las 13 03 32](https:\/\/user-images.githubusercontent.com\/22520811\/107944655-c2d96b80-6f8e-11eb-9cc4-474642543a0a.jpg)\r\n![screenshot 2021-02-15 a las 13 03 38](https:\/\/user-images.githubusercontent.com\/22520811\/107944658-c3720200-6f8e-11eb-852d-c774dd5531a8.jpg)\r\n![screenshot 2021-02-15 a las 13 03 44](https:\/\/user-images.githubusercontent.com\/22520811\/107944660-c40a9880-6f8e-11eb-9b57-089d64e8edc5.jpg)\r\n\r\nWhy does it always happen to me that it doesn't let me convert to ES6 nor with `.babelrc` apparently well configured? I don\u2019t know that it can do it because I\u2019ve seen how others have done it.","You need to pass `{ modules: false }` to preset env, assuming that the very old version you are using supports it.","> You need to pass `{ modules: false }` to preset env, assuming that the very old version you are using supports it.\r\n\r\nI have the lates Node JS and NPM version, in theory shouldn't be any trouble with this, but idk what is failed on my configuration... ","Currently `@babel\/node` does not support ESM (#6737), consider either remove `type: module` from `package.json` or pre-compiled `index.js` via `@babel\/cli`. This issue is not related to the OP's.","> Currently `@babel\/node` does not support ESM (#6737), consider either remove `type: module` from `package.json` or pre-compiled `index.js` via `@babel\/cli`. This issue is not related to the OP's.\r\n\r\nHe does because I\u2019m taking it off a MEVN course at Udemy and upgrading to ES6 with Babel, precisely.\r\n\r\n![screenshot 2021-02-15 a las 16 09 52](https:\/\/user-images.githubusercontent.com\/22520811\/107963392-66834580-6fa8-11eb-81f6-7e7d1bdcca5f.jpg)\r\n","If you want I can invited you to my GitHub repository, to you can work with me, fixing this trouble?","Is this issue still prevailing? Can I work onit?\r\n"],"labels":["good first issue","i: bug","i: regression"]},{"title":"Set the JSX runtime based on runtime-specific pragmas","body":"| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | fixes #12208\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      | x\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    |\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\nThe goal of this PR is to allow for **local** configuration (in the form of pragmas) to override the ones in the config. This is IMHO especially important for tools that configure Babel configs on behalf of the users and don't allow customization in this area (CRA) or it's just not immediately obvious that they are doing it (Next.js).\r\n\r\nIn my original issue, I've been claiming that this matches what TS has implemented but it turns out not to be true - or at least not fully. It is true in TS that `@jsxImportSource` overrides the classic runtime from `tsconfig.json` but it's not true that `@jsx` overrides the automatic runtime from `tsconfig.json`. I thought the latter is true as well but it has turned out that I've not been checking the emitted code for this situation but the resolution of the types and while indeed the classic runtime types have been chosen in this situation it was a bug that I have later fixed so this has never been released in the stable versions of TS.\r\n\r\nTo sum up the TS situation - currently, the automatic runtime is **always** chosen if it's configured anywhere, locally, or in the config. What should we do about this situation? Changing TS to the proposed semantic from this PR would be breaking change for them. Would it be OK for such a change to be made in TS 4.2? cc @weswigham , any thoughts about this one?\r\n\r\ncc @wooorm \n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/12542\"><img src=\"https:\/\/gitpod.io\/api\/apps\/github\/pbs\/github.com\/babel\/babel.git\/c853058dc9b14bb0ce10fbce7a6a8770fdd98ca3.svg\" \/><\/a>\n\n","comments":["This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/12542\/builds\/84927) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit c853058dc9b14bb0ce10fbce7a6a8770fdd98ca3:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-qw6bh)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-rzmdr)| Configuration |\n","I see this PR as a bugfix (because we previously were ignoring explicit configuration pragmas), but there is a _slightly_ chance that it could break if someone relies on the old behavior. For example, this code would start using the new runtime because of the `@jsxImportSource` pragma:\r\n\r\n```json5\r\n\/\/ babel.config.json\r\n{\r\n  \"plugins\": [[\"@babel\/plugin-transform-react-jsx\", { pragma: \"h\" }]]\r\n}\r\n```\r\n\r\n```js\r\n\/* @jsxImportSource preact *\/\r\n\r\n<div \/>\r\n```\r\n\r\nAlso, after this PR we **must** exactly match TypeScript's behavior. If TS won't make it's implementation of `@jsxImportSource`\/`@jsxPragma` consistent, we should probably modify this PR so that it doesn't do it either.","> I see this PR as a bugfix (because we previously were ignoring explicit configuration pragmas), but there is a slightly chance that it could break if someone relies on the old behavior. \r\n\r\nYes, every bugfix is somebody's breaking change \ud83e\udd2a question is if this particular \"breaking change\" sounds acceptable do you? I think the chances that somebody is relying on the current behavior in this regard are rather slim.\r\n\r\n> Also, after this PR we must exactly match TypeScript's behavior. If TS won't make it's implementation of @jsxImportSource\/@jsxPragma consistent, we should probably modify this PR so that it doesn't do it either.\r\n\r\nYes, I agree that TS & Babel should match in behavior - I hope @weswigham will get to us here to discuss this. It's a holiday season so I'm expecting that we might need to wait up to a few weeks. Don't want to rush anybody right now.","@weswigham friendly \ud83c\udfd3 ","@nicolo-ribaudo is there anything that can be done about this PR? could this be changed in v7? if not - could it be changed in v8?"],"labels":["area: react"]},{"title":"babel-node -r no longer supports implied .\/ in paths since 7.7.7 (probably OK but undocumented)","body":"## Bug Report\r\n\r\n<!-- If you would like to implement a PR, we are more than happy to help you go through the process!-->\r\n- [x] I would like to work on a fix!\r\n\r\n**Current behavior**\r\n<!-- A clear and concise description of the behavior. -->\r\n\r\nSee this branch demonstrating the regression: https:\/\/github.com\/serhalp\/babel-bug-introduced-by-10871\/commit\/1d7fe1019d0f991c324b77b57f37a808209c6671.\r\n\r\nBasically, since https:\/\/github.com\/babel\/babel\/pull\/10871 introduced an \"internal\" change to how `babel-node` resolves arguments to `-r`\/`--require`, paths without a leading `.\/` or `..\/` can no longer be found in the current working directory \/ babel root.\r\n\r\n**Input Code**\r\n\r\nGiven `foo.js` in the current working directory,\r\n```sh\r\nbabel-node --require foo.js bar.js\r\n```\r\nfails with an error like:\r\n```\r\n.\/babel-bug-introduced-by-10871\/node_modules\/resolve\/lib\/sync.js:92\r\n    throw err;\r\n    ^\r\n\r\nError: Cannot find module 'foo.js' from '.\/babel-bug-introduced-by-10871'\r\n    at Function.resolveSync [as sync] (.\/babel-bug-introduced-by-10871\/node_modules\/resolve\/lib\/sync.js:90:15)\r\n    at Object.<anonymous> (.\/babel-bug-introduced-by-10871\/node_modules\/@babel\/node\/lib\/_babel-node.js:158:32)\r\n    at Module._compile (internal\/modules\/cjs\/loader.js:1137:30)\r\n    at Object.Module._extensions..js (internal\/modules\/cjs\/loader.js:1157:10)\r\n    at Module.load (internal\/modules\/cjs\/loader.js:985:32)\r\n    at Function.Module._load (internal\/modules\/cjs\/loader.js:878:14)\r\n    at Function.executeUserEntryPoint [as runMain] (internal\/modules\/run_main.js:71:12)\r\n    at internal\/main\/run_main_module.js:17:47 {\r\n  code: 'MODULE_NOT_FOUND'\r\n```\r\n\r\nwhile\r\n```sh\r\nbabel-node --require .\/foo.js bar.js\r\n```\r\n\r\nworks just fine.\r\n\r\nThis started failing in @babel\/node@7.7.7 and still fails on the latest version (7.12.10). It worked just fine up until and including 7.7.4.\r\n\r\n**Expected behavior**\r\n<!-- A clear and concise description of what you expected to happen (or code). -->\r\n\r\nI would expect both examples above to behave identically, as they did in versions up to 7.7.4, at least _given the release notes for this version_.\r\n\r\nYou can see a repro repo showing it working in 7.7.4 here: https:\/\/github.com\/serhalp\/babel-bug-introduced-by-10871.\r\n\r\n**Babel Configuration (babel.config.js, .babelrc, package.json#babel, cli command, .eslintrc)**\r\n\r\n(irrelevant, can repro out of the box with no config)\r\n\r\n**Environment**\r\n\r\n- Babel version(s): 7.7.7 up to current (7.12.10)\r\n- Node\/npm version: node 12.18.3, yarn 1.9.4\r\n- OS: macOS 10.15.7 \/ Ubuntu 16.04.6\r\n- Monorepo: no\r\n- How you are using Babel: `babel-node` (see repro repo)\r\n\r\n**Possible Solution**\r\n<!--- If you have suggestions on a fix for the bug -->\r\n\r\nMaybe configure the `resolve` module with `moduleDirectory: ['.', 'node_modules']`? https:\/\/www.npmjs.com\/package\/resolve#resolveid-opts-cb\r\n\r\nI could understand an argument that this is behaving as intended (since `--require` kind of implies... well, `require()` module resolution logic, and seemingly `node --require foo.js bar.js` does not work), but in that case:\r\n- this should perhaps be documented (see note below)\r\n- a note about this should be added to the changelog, since I can imagine this affecting a number of people\r\n\r\n**Additional context**\r\n<!-- Add any other context about the problem here. Or a screenshot if applicable -->\r\n\r\nI was going to find a reference in the public docs for babel-node to convinced myself \/ prove that this isn't documented behavior, but actually it looks like `-r`\/`--register` isn't documented _at all_: https:\/\/babeljs.io\/docs\/en\/babel-node. Should I open a separate issue\/PR for that?","comments":["Hey @serhalp! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","The correct behaviour should be to match exactly what Node.js does, and any difference (except for transpiling obviously) is a bug.\r\n\r\nMaybe we should mention in the docs that for Node.js options we reflect the behaviour described in the Node.js docs, linking https:\/\/nodejs.org\/api\/cli.html."],"labels":["i: bug","i: needs triage"]},{"title":"@babel\/highlight should evaluate if color should be forced each time highlight is called","body":"## Bug Report\r\n\r\n`@babel\/highlight` should evaluate if color should be forced each time the `highlight` function is called, instead of only once when the module is loaded.\r\n\r\n**Current behavior**\r\n\r\n`@babel\/highlight` evaluates if color should be forced once; when the module is loaded. Changing the value of `process.env.FORCE_COLOR` at runtime has no effect on `@babel\/code-frame` output.\r\n\r\n**Expected behavior**\r\n\r\n`@babel\/highlight` should evaluate if color should be forced each time the `highlight` function is called. Changing the value of `process.env.FORCE_COLOR` at runtime should have an effect on `@babel\/code-frame` output.\r\n\r\n**Environment**\r\n\r\n- `@babel\/highlight`: 7.10.4\r\n- `@babel\/code-frame`: 7.10.4\r\n- Node: 15.3.0 \r\n- npm: 7.0.14\r\n- OS: macOS 11.0.1\r\n\r\n**Possible Solution**\r\n\r\nThe problem is that a static `supportsColor` value that `chalk` defines once when the module loads is used here:\r\n\r\nhttps:\/\/github.com\/babel\/babel\/blob\/c6aea4e85d2b8f3e82575642d30b01c8cbe112a9\/packages\/babel-highlight\/src\/index.js#L98-L103\r\n\r\n`chalk` uses `supports-color` to determine this value, here:\r\n\r\nhttps:\/\/github.com\/chalk\/chalk\/blob\/02abeebac3fa41b346ad1f0b4674d371953da932\/source\/index.js#L3\r\n\r\n`supports-color` exports a [`supportsColor`](https:\/\/github.com\/chalk\/supports-color#requiresupports-colorsupportscolorstream-options) function so this value could be determined on demand, using:\r\n\r\n```js\r\nrequire('supports-color').supportsColor(process.stdout);\r\n```\r\n\r\n**Additional context**\r\n\r\nIn a published package I author, I\u2019m trying to do snapshot testing of the error messages a function throws that contains fancy colorized syntax highlighting, etc. using `@babel\/code-frame`, which in turn uses `@babel\/highlight` under the hood. The problem is, when I run `npm test` locally in a terminal the snapshot contains colors, but in GitHub actions CI the snapshots fail because there are no colors.\r\n\r\nTypically in a situation like this before each snapshot test runs you could store the current `process.env.FORCE_COLOR` value, set it to `1`, run the snapshot test with color forced, then afterwards restore the `process.env.FORCE_COLOR` value back to what it was.\r\n\r\nUnfortunately due to this issue, changing `process.env.FORCE_COLOR` at runtime makes no difference when the \r\n`@babel\/code-frame` function `codeFrameColumns` is called, in turn calling the `@babel\/highlight` function `highlight`.","comments":["Hey @jaydenseric! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\""],"labels":["i: bug"]},{"title":"Should @babel\/polyfill not be used in entry-level usage docs?","body":"## Bug Report\r\n\r\n- [x] I would like to work on a fix!\r\n\r\n**Current behavior**\r\n\r\nThe [Usage Guide Overview](https:\/\/babeljs.io\/docs\/en\/usage#overview) talks about installing `@babel\/polyfill`, which is now deprecated.\r\n\r\n**Expected behavior**\r\n\r\nThe guide would provide instructions for the more contemporary way of providing polyfills with `core-js` and `regenerator-runtime`.\r\n\r\n**Environment**\r\n\r\nWeb\r\n\r\n**Possible Solution**\r\n\r\nCould be some pretty easy docs updates, would be happy to write them if I get can a \ud83d\udc4d  from someone on the team.","comments":["Hey @AndrewSouthpaw! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","Yes please! \ud83d\udc4d\r\n\r\nIf you need any help feel free to ask.","This is a **really** important fix.\r\n[For web js] \r\n'transpiles' work well, but I was unable to figure out how `core-js` and `regenerator-runtime` worked, or if they were needed.\r\nWith the `debug` option set, I get a ` useBuiltIns not set` warning messsage (but not which input-js\/polyfills caused it).\r\nIf I set `useBuiltIns`, I get lots of duplicated 'import' statements in the output js (is import safe web js?)\r\n- why not just one import each\r\n- should the actual polyfills be included in the output js, or do i need a separate `<script src=file>`\r\n\r\nI'm obviously missing something.\r\nThis might be a separate issue, but some debug message like \"array.entries() needs a 50K polyfill because of safari 10.x\" would be useful. Use it 100x, OK, use it once, it might be simpler to use an alternative."],"labels":["i: bug","i: needs triage"]},{"title":"Slow startup time due to iterating all files in ignored directory","body":"I find that the startup time of my app is a little slow. While running `DEBUG=\"*\" npm run dev` I noticed that a majority of the time it was skipping ignored files:\r\n```\r\n...\r\nbabel:config:config-chain No config is applied to \"\/Users\/michael\/repos\/MyApp\/node_modules\/@shopify\/koa-shopify-auth\/dist\/src\/auth\/client\/storage-access-helper.js\" because it matches one of `ignore: [\"node_modules\"]` from \"\/Users\/michael\/repos\/MyApp\" +1ms\r\nbabel:config:config-chain No config is applied to \"\/Users\/michael\/repos\/MyApp\/node_modules\/@shopify\/koa-shopify-auth\/dist\/src\/verify-request\/index.js\" because it matches one of `ignore: [\"node_modules\"]` from \"\/Users\/michael\/repos\/MyApp\" +1ms\r\nbabel:config:config-chain No config is applied to \"\/Users\/michael\/repos\/MyApp\/node_modules\/@shopify\/koa-shopify-auth\/dist\/src\/verify-request\/verify-request.js\" because it matches one of `ignore: [\"node_modules\"]` from \"\/Users\/michael\/repos\/MyApp\" +0ms\r\nbabel:config:config-chain No config is applied to \"\/Users\/michael\/repos\/MyApp\/node_modules\/koa-compose\/index.js\" because it matches one of `ignore: [\"node_modules\"]` from \"\/Users\/michael\/repos\/MyApp\" +15ms\r\nbabel:config:config-chain No config is applied to \"\/Users\/michael\/repos\/MyApp\/node_modules\/any-promise\/index.js\" because it matches one of `ignore: [\"node_modules\"]` from \"\/Users\/michael\/repos\/MyApp\" +1ms\r\nbabel:config:config-chain No config is applied to \"\/Users\/michael\/repos\/MyApp\/node_modules\/any-promise\/register.js\" because it matches one of `ignore: [\"node_modules\"]` from \"\/Users\/michael\/repos\/MyApp\" +0ms\r\nbabel:config:config-chain No config is applied to \"\/Users\/michael\/repos\/MyApp\/node_modules\/any-promise\/loader.js\" because it matches one of `ignore: [\"node_modules\"]` from \"\/Users\/michael\/repos\/MyApp\" +1ms\r\n...\r\n```\r\n\r\nI noticed that the ignore code ignores file by file matching. Can it instead ignore the folder without iterating every file in the directory?\r\n\r\nRelative file: https:\/\/github.com\/babel\/babel\/blob\/cb30c1dd54fd09f05045b5094ff9d038604768b3\/packages\/babel-core\/src\/config\/config-chain.js#L780\r\n\r\n\r\n```\r\nrequire('@babel\/register')({\r\n  presets: ['@babel\/preset-env'],\r\n  ignore: ['node_modules']\r\n});\r\n```\r\n\r\n\r\n```\r\n  System:\r\n    OS: macOS 11.0.1\r\n  Binaries:\r\n    Node: 12.18.3 - \/usr\/local\/bin\/node\r\n    npm: 6.14.8 - \/usr\/local\/bin\/npm\r\n  npmPackages:\r\n    @babel\/core: ^7.12.7 => 7.12.7 \r\n    @babel\/plugin-transform-runtime: ^7.12.1 => 7.12.1 \r\n    @babel\/polyfill: ^7.12.1 => 7.12.1 \r\n    @babel\/preset-env: ^7.12.7 => 7.12.7 \r\n    @babel\/preset-stage-3: ^7.8.3 => 7.8.3 \r\n    @babel\/register: ^7.12.1 => 7.12.1 \r\n```\r\n- Babel version(s): 7.12.7\r\n- Node\/npm version: Node v12.18.3, npm 6.14.8\r\n- OS: macOS 11.0.1\r\n- How you are using Babel: `register`\r\n","comments":["Hey @mozeryansky! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","Also I see this parameter in the compilerHook could be set to ignore node_module:\r\nhttps:\/\/github.com\/babel\/babel\/blob\/eea156b2cb8deecfcf82d52aa1b71ba4995c7d68\/packages\/babel-register\/src\/node.js#L99\r\n\r\n`ignoreNodeModules: true` gives me a slight speedup","Duplicate of #9383"],"labels":["area: perf","i: bug","pkg: register","i: needs triage"]},{"title":"Can not compile jsx when using .babelrc in the upper directory of current working dir","body":"I have a problem with my project.\r\n\r\nThis is my package.json\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/68621612\/99851996-1a159e80-2b4e-11eb-8297-100f2905e4b4.png)\r\n\r\nAnd this is my .babelrc\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/68621612\/99852072-37e30380-2b4e-11eb-8699-d6f973f3d582.png)\r\n\r\nAnd my webpack.config.js\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/68621612\/99852129-577a2c00-2b4e-11eb-80c2-6011157faf8e.png)\r\n\r\nAnd the result \r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/68621612\/99852146-65c84800-2b4e-11eb-9125-f320f435b1c9.png)\r\n","comments":["Hey @AndresToroGarcia! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","You can try rename `.babelrc` to `babel.config.json`.","And also, you'll need to pass `rootMode: \"upward\"` to `babel-loader` so that searches for `babel.config.json` in parent directories."],"labels":["i: question"]},{"title":"Unfriendly syntax error is thrown for parameter properties with rest parameters","body":"## Bug Report\r\n\r\n<!-- If you would like to implement a PR, we are more than happy to help you go through the process!-->\r\n- [x] I would like to work on a fix!\r\n\r\n<!--\r\n@babel\/eslint-parser:\r\n  If you are having issues with JSX you might want to check out eslint-plugin-react. If there's an issue with new experimental syntax you might need to check if it's supported by @babel\/eslint-plugin.\r\n-->\r\n\r\n**Current behavior**\r\n<!-- A clear and concise description of the behavior. -->\r\n\r\n[REPL](https:\/\/babeljs.io\/repl#?browsers=safari%2012&build=&builtIns=false&spec=false&loose=false&code_lz=MYGwhgzhAEDC0G8BQ1XWAewHYQC4CcBXYXDfACgAdCAjEAS2GgDpWAzDDASkQF8l-QA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=script&lineWrap=false&presets=typescript&prettier=false&targets=&version=7.12.3&externalPlugins=)\r\n\r\nUnfriendly syntax error`Unexpected token (2:23)` is thrown.\r\n\r\n**Input Code**\r\n\r\n```ts\r\nclass C {\r\n    constructor(public ...foo) {}\r\n}\r\n```\r\n\r\n**Expected behavior**\r\n<!-- A clear and concise description of what you expected to happen (or code). -->\r\n\r\nSyntax error `A parameter property cannot be declared using a rest parameter.` is thrown. like TypeScript ([Playground link](https:\/\/www.typescriptlang.org\/play?#code\/MYGwhgzhAEDC0G8BQ1XWAewHYQC4CcBXYXDfACgAdCAjEAS2GgDpWAzDDASkQF8l+QA))\r\n\r\n**Babel Configuration (babel.config.js, .babelrc, package.json#babel, cli command, .eslintrc)**\r\n\r\n```js\r\nconst { parse } = require(\"@babel\/parser\");\r\n\r\nparse(\r\n  `class C {\r\n    constructor(public ...foo) {}\r\n}`,\r\n  { plugins: [\"typescript\"] }\r\n);\r\n```\r\n\r\n**Environment**\r\n\r\n**Possible Solution**\r\n<!--- If you have suggestions on a fix for the bug -->\r\n\r\n**Additional context**\r\n<!-- Add any other context about the problem here. Or a screenshot if applicable -->\r\n","comments":[],"labels":["i: bug","pkg: parser","area: typescript"]},{"title":"Better interop between native Node.js modules and compiled modules","body":"## Feature Request\r\n\r\n<!-- Check this if you would like to implement a PR, we are more than happy to help you go through the process !-->\r\n- [ ] I would like to work on this feature!\r\n\r\n### **Is your feature request related to a problem?**\r\n\r\nA Babel-compiled module with a default export cannot be used in the same whey in a Babel-compiled module and in a native Node.js module.\r\n\r\nConsider this library:\r\n```js\r\nexport default function getOne() {\r\n  return 1;\r\n}\r\n```\r\n\r\nWhen compiled by Babel, it becomes something like\r\n```js\r\n\"use strict\";\r\nexports.__esModule = true;\r\nexports.default = function getOne() {\r\n  return 1;\r\n};\r\n```\r\n\r\nNow, let's suppose that a user of that library wants to use it in a Babel-compiled app. The have to write something like this:\r\n```js\r\nimport getOne from \"library\";\r\n\r\nconsole.log(getOne());\r\n```\r\n\r\nHowever, if that user wants to use native Node.js modules, they'll get an error similar to\r\n```\r\nTypeError: { default: [function getOne] } is not a function.\r\n```\r\n\r\nThey might try to rewrite that code as\r\n```js\r\nimport { default as getOne } from \"library\";\r\n\r\nconsole.log(getOne());\r\n```\r\n\r\nbut that still doesn't work, because `import { default as X }` is just an alias for `import X`.\r\n\r\nWhat they need to write is\r\n```js\r\nimport _getOne from \"library\";\r\nconst getOne = _getOne.default;\r\n\r\nconsole.log(getOne());\r\n```\r\n\r\nThis code is ugly but works on Node.js. However, we now have a problem: if the file importing `library` is bundled by an `__esModule`-aware tool, for example because it's meant to be used both in Node.js and in the browser, it will generate an error similar to\r\n```\r\nTypeError: undefined is not a function.\r\n```\r\n\r\nbecause `_getOne` _is_ the function, and thus `_getOne.default` is `undefined`.\r\n\r\nThe proper way of using a Babel-compiled library is this:\r\n```js\r\nimport _getOne from \"library\";\r\nconst getOne = _getOne.default ?? _getOne;\r\n\r\nconsole.log(getOne());\r\n```\r\n\r\nThis works but it's counter-intuitive, and it puts the burden on the library users rather than on the library author or (even better) on Babel.\r\n\r\n*Note that named exports don't have this problem*\r\n\r\n<!-- A concise description of what the problem is. Ex. I have an issue when [...] -->\r\n\r\n### **Context**\r\n\r\nThis issue is a result of discussion in different repositories, where other tools are trying to figure out Node.js interop now that native ES modules are becoming common:\r\n- Rollup: https:\/\/github.com\/rollup\/plugins\/issues\/635\r\n- esbuild: https:\/\/github.com\/evanw\/esbuild\/issues\/532\r\n- Webpack: https:\/\/github.com\/webpack\/webpack\/issues\/7973\r\n\r\n(cc @guybedford)\r\n\r\n### **History**\r\n\r\nBack in version 5, when there was only a default export Babel used to output something like this:\r\n```js\r\nexports.default = function getOne() {\r\n  return 1;\r\n};\r\nmodule.exports = exports.default;\r\n```\r\nHowever, this was a big refactoring hazard (https:\/\/github.com\/babel\/babel\/issues\/2047): just by adding an `export const x = 1` line to our \"libary\", the output would became\r\n```js\r\nexports.default = function getOne() {\r\n  return 1;\r\n};\r\nexports.x = 1;\r\n```\r\nwhich is a breaking change, because `require(\"library\")` doesn't return `getOne()` anymore. For this reason, this automatic interop was removed in Babel 6 (https:\/\/github.com\/babel\/babel\/issues\/2212).\r\n\r\n### **Describe the solution you'd like**\r\n\r\nWe can add an option to `@babel\/plugin-transform-modules-commonjs` to allow compiling `export default` to `module.exports`.\r\nThis option (`moduleExportsDefault`?) would **throw** if\r\n1. There is any named export in the file, or\r\n2. the export is `export { foo as default }` (because `module.exports` cannot reflect `foo`'s liveness), or\r\n3. the export is `export default class\/function X` and `X` is reassigned (for the same reason as above).\r\n\r\nWith these rules, it's impossible to accidentally introducing a breaking change in your library just by refactoring the exports, since Babel will explicitly throw about it. Thus, library authors will be encouraged to only use this option for their entry-point and not for all the internal files (where they may want to freely refactor things):\r\n```js\r\n\/\/ babel.config.json\r\n{\r\n  \"overrides\": [{\r\n    \"include: \"src\/index.js\",\r\n    \"plugins\": [\r\n      [\"@babel\/transform-modules-commonjs\", { \"moduleExportsDefault\": true }]\r\n    ]\r\n  }, {\r\n    \"exclude\": \"src\/index.js\",\r\n    \"plugins\": [\"@babel\/transform-modules-commonjs\"]\r\n  }]\r\n}\r\n```\r\n\r\n### **Describe alternatives you've considered**.\r\n\r\n1. We can decide that the current situation is OK. CJS modules will hopefully go away in a few years (Node.js 10, the last LTS version without ESM support, reached EOL in a few months).\r\n\r\n2. We can start recommending https:\/\/github.com\/59naga\/babel-plugin-add-module-exports by @59naga more prominently in our docs, maybe even publishing it under the `@babel\/*` namespace. However, this plugin replicates the exact Babel 5 behavior with the refactoring hazard.\r\n","comments":["Apart from what Babel should do here, there is also an issue of the overall DX of the whole situation. I believe it's just terrible for both consumers and library authors. The problem itself isn't only about a refactoring hazard but it also suddenly forces library authors to alter their public interfaces because - let's face it - we usually want to support node. This is **hostile** to both ends of the story because both authors and consumers need to alter their code.\r\n\r\nI've been thinking about this a lot over the past year, watching how things develop, and this saddens me a lot. I understand node's compatibility and correctness concerns but it's IMHO really not a good situation that somebody so late to the party (node) is influencing things so greatly, leaving a lot of package authors\/maintainers with so uneasy decisions on how to handle things like this. \r\n\r\nSure, CJS involvement will slowly die over the years but I highly doubt that it will get to a near-zero point in just a couple of years. Both a lot of packages will still be out there and also some packages will refuse to \"upgrade\" for a considerable amount of time. I've been advocating for adding `pkg.json#module` field to a lot of packages over the years and not always I had succeeded. People are afraid of those subtle changes. Sure - node introducing well-documented support for ESM should make it easier now but given how many tools and environments are out there it's still not an obvious decision to implement the `exports` field. \r\n\r\nOn top of that people will just make a lot of mistakes when implementing `exports` because they won't realize all intricacies up until it's too late and issues start pouring into their repos which will in a lot of situations lead only to people reverting a change and being afraid of attempting to reintroduce this.\r\n\r\nAttempting to deal with this in Babel feels a lot like a small bandaid for a bad wound to me. You will also have to pick the default of an option like this, document it, deal with issues. I don't feel it's something that Babel maintainers, nor their users should be troubled with. ","The only safe transpilation for ESM to CJS is `export default` -> `module.exports =`. By default, Babel should only facilitate this, and error if any named exports are encountered.\r\n\r\nWhen Babel transpiles CJS to ESM, it should allow the exports object to be created then do `export default exports`, so in Node.js importing the CJS file will be identical to importing its ESM transpiled version.\r\n\r\nIMO at this time there is not a good reason to transpile one module format to another. If you want to publish or deploy a CJS package, write CJS from the beginning. If you want to publish or deploy ESM, write ESM.\r\n\r\nWriting ESM, then attempting to published it transpiled to CJS is a bad idea. Writing ESM, and attempting to publishing ESM with copies of the same API in separate CJS files is an even worse idea, due to the [dual package hazard](https:\/\/nodejs.org\/api\/packages.html#packages_dual_package_hazard) and the bloated `node_modules` install size.\r\n\r\nThe right thing to do is to write the individual bits of your API as CJS files with single `module.exports =`, e.g:\r\n\r\nhttps:\/\/github.com\/jaydenseric\/graphql-upload\/blob\/1398e62a53ad8075d6d4fc0692e326ceef224ca0\/public\/GraphQLUpload.js#L77\r\n\r\nMake sure all the things required in these files are done using deep require paths to modules containing only `module.exports =`, so only necessary code gets loaded or bundled. Bundler tree-shaking is a hack we don\u2019t need if code is written correctly by only importing or requiring what\u2019s needed. For an efficient and healthy ecosystem all packages need to start publishing separate files for each part of their API so they can be deeply required\/imported.\r\n\r\nThen, use the package [`exports`](https:\/\/nodejs.org\/api\/packages.html#packages_exports) field with [conditional exports](https:\/\/nodejs.org\/api\/packages.html#packages_conditional_exports) to publicly expose index entry points for both CJS and ESM consumers, using separate and manually created index.js (CJS) and index.mjs (ESM) files, e.g:\r\n\r\nhttps:\/\/github.com\/jaydenseric\/graphql-upload\/blob\/bdb5f808e0d514c28c0f59c1abd71680aba29bae\/package.json#L36-L39\r\n\r\nIndex files should only be used by tools such as [bundlephobia](https:\/\/bundlephobia.com) and [Size Limit](https:\/\/github.com\/ai\/size-limit); actual source code should always use deep import\/require paths. Why would we rely on hacky and slow tree shaking when we can just write efficient code from the start!\r\n\r\nThe lowest hanging Babel fruit right now for Node.js ESM\/CJS style interop is https:\/\/github.com\/babel\/babel\/issues\/6242 : The `sourceType` should automatically be `script` if the input file has a `.cjs` or `.js` file extension, and `module` for `.mjs`. No one realizes they need to do this manually, like this (I left `.cjs` out of the `test` because I know there are no files like that in this particular project):\r\n\r\nhttps:\/\/github.com\/jaydenseric\/graphql-react\/blob\/d53cb2f0708a5afe403f52fc88bf1fd46a197c08\/src\/universal\/.babelrc.json#L17-L18\r\n\r\nIt should also factor in the `package.json` [`type`](https:\/\/nodejs.org\/api\/packages.html#packages_type) field if the input file extension is `.js`.\r\n\r\nFor housekeeping here are some issues on the same topic (dating back to the Node.js `--experimental-modules` days), that may now be duplicating this issue:\r\n\r\n- https:\/\/github.com\/babel\/babel\/issues\/7998\r\n- https:\/\/github.com\/babel\/babel\/issues\/7294","> Writing ESM, then attempting to published it transpiled to CJS is a bad idea. Writing ESM, and attempting to publishing ESM with copies of the same API in separate CJS files is an even worse idea\r\n\r\nThis is much easier said than done - Babel has to support the **existing** ecosystem and the ecosystem has been publishing \"dual mode\" packages (without the dual package hazard!) for a long time. We could change the tide but this is kinda up to package authors and not Babel itself (from what I believe). This has a severe ecosystem impact though as it will often influence package setups, public interfaces, documentation and so on.","question: doesn't https:\/\/github.com\/nodejs\/node\/pull\/35249 solve this? for users of newer nodejs versions, at least","No, it only solves the named exports problems (not the \"default export\" one).","oh, yikes.  well it's at least a half-fix.\n\nOn Tue, Mar 2, 2021 at 12:44 AM Nicol\u00f2 Ribaudo <notifications@github.com>\nwrote:\n\n> No, it only solves the named exports problems (not the \"default export\"\n> one).\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/babel\/babel\/issues\/12363#issuecomment-788733323>, or\n> unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAIGO56AHGBD7726R3XWSP3TBSQQJANCNFSM4TXDDG2Q>\n> .\n>\n"],"labels":["i: discussion","i: enhancement"]},{"title":"[Bug]Same function declaration will cause SyntaxError","body":"## Bug Report\r\n\r\n<!-- If you would like to implement a PR, we are more than happy to help you go through the process!-->\r\n- [ ] I would like to work on a fix!\r\n\r\n<!--\r\n@babel\/eslint-parser:\r\n  If you are having issues with JSX you might want to check out eslint-plugin-react. If there's an issue with new experimental syntax you might need check if it's supported by @babel\/eslint-plugin.\r\n-->\r\n\r\n**Current behavior**\r\n<!-- A clear and concise description of the behavior. -->\r\n\r\nSee [this](https:\/\/babeljs.io\/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&spec=false&loose=false&code_lz=GYVwdgxgLglg9mABMOcAUBKRBvAvgKH1ElgWVUx1yA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=false&targets=&version=7.12.3&externalPlugins=)\r\n\r\n**Input Code**\r\n\r\n```js\r\nfunction foo() {}\r\n\r\nfunction foo() {}\r\n```\r\n\r\nWill get `SyntaxError: Identifier 'foo' has already been declared` error\r\n\r\n**Expected behavior**\r\n<!-- A clear and concise description of what you expected to happen (or code). -->\r\nNo error. Because this is a valid javascript syntax and can be executed without any error thrown\r\n\r\n**Babel Configuration (babel.config.js, .babelrc, package.json#babel, cli command, .eslintrc)**\r\n\r\nSee REPL above\r\n\r\n**Environment**\r\n<!--- Tip: Instead of filling out the questions below, you can run `npx envinfo --preset babel` and paste the result below ``` -->\r\n```\r\nREPL\r\n```\r\n- Babel version(s): REPL\r\n- Node\/npm version: REPL\r\n- OS: Windows 10\r\n- Monorepo: no\r\n- How you are using Babel:  REPL\r\n\r\n**Possible Solution**\r\n<!--- If you have suggestions on a fix for the bug -->\r\n\r\n**Additional context**\r\n<!-- Add any other context about the problem here. Or a screenshot if applicable -->\r\n","comments":["Hey @NE-SmallTown! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","This is expected. By default Babel assumes `sourceType` is `module` and duplicate function declaration is a syntax error because module body is always in strict mode. You can specify `sourceType` as `script`.","Thanks for your clarification.\r\n\r\n> because module body is always in strict mode. \r\n\r\nI think this is not about strict mode because I can add strict mode to normal script(`application\/javascript`) and it won't throw the error. IMO, this is just about the `type`(i.e `module` or `application\/javascript`). \r\n\r\nBut here the question is, usually we use a `module` as a script(`application\/javascript`) after it's been compiled by Babel. So I think maybe we should rely on something like `targetType` rather than `sourceType`?","You are correct, this is not about strict mode, but it is about modules. \r\n\r\n> But here the question is, usually we use a module as a script(application\/javascript) after it's been compiled by Babel. So I think maybe we should rely on something like targetType rather than sourceType?\r\n\r\nThe error here is because the `input` file is parsed as a module, and modules do not allow the code you've provided. If you want to not treat the input as a `module` then you need to set `sourceType`. The way the file is used after it is processed by Babel is up to you once Babel has output the file somewhere.","Ah, I think this is a interesting case.\r\n\r\nIf we think finally our code is running on Browser ranther than Babel, then it should not throw error if the Browser doesn't\r\n\r\nThe key point is that when a developer declare the input file `sourceType` to `module`, does that means or can we confirm he will use it as `type=module` in the browser? Probably not, even from the reality I guess most developers will finally use the bundle or compiled ouput as `type=application\/javascript`.\r\n\r\n","> The key point is that when a developer declare the input file `sourceType` to `module`, does that means or can we confirm he will use it as `type=module` in the browser?\r\n\r\nNo, this means that the input code should have the same semantics as if it was run as a native module.\r\nSimilarly, if you use `class` in your input code many old browsers won't directly run it, but Babel makes sure that it runs with similar semantics.\r\n\r\nIf you run your input untranspiled code in a browser _as a module_ it throws because of the duplicated declaration: if you tell Babel that your code should be considered a module, it should throw.","> No, this means that the input code should have the same semantics as if it was run as a native module.\r\n\r\nYes, I agree. But from reality, it's not. \r\n\r\nThe current progress is, write a module -> pass it to Babel -> get the result -> use the result with `<script type='application\/javascript'>`\r\n\r\nSo, we don't want to set the input file as `script` because we want to use the `module` syntax(`import\/export`) when we are developing an app or library. Therefore, we would use `module`, but finally we will put the result into `<script type='application\/javascript'>` and it **won't** throw. If Babel doesn't throw, it's still ok becasue if finally we put the result into `<script type='module'>` and we **will** get the error by Browser. We **won't miss** the error if Babel didn't throw it\r\n\r\n\r\n> Similarly, if you use class in your input code many old browsers won't directly run it, but Babel makes sure that it runs with similar semantics.\r\n\r\nI think this is different. Especially for `SyntaxError`","You are saying that it's possible for Babel to accept invalid code and still produce code that runs.\r\n\r\nThat's true, but it's out of scope for the project. Our goal is to align to the specification so that when gradually disabling Babel transform over time your code doesn't suddenly start failing.\r\n\r\nIt's _not_ ok to silently shallow an error, because that error is mandated by the spec.\r\n\r\nThat said, you can pass the `errorRecovery: true` parser option which doesn't throw for early errors:\r\nhttps:\/\/runkit.com\/nicolo-ribaudo\/babel-babel-12354\r\n","> Our goal is to align to the specification so that when gradually disabling Babel transform over time your code doesn't suddenly start failing.\r\n\r\nThat's fair.\r\n\r\nBy the way, could we add more info when throw the error? For example, change _\"SyntaxError: Identifier 'foo' has already been declared\"_ to _\"SyntaxError: Identifier 'foo' has already been declared, **this is not allowed in a ESM**\"_"],"labels":["i: question","area: errors"]},{"title":"babelrcRoots matches by prefix, causing unexpected directories to be included","body":"## Bug Report\r\n\r\n<!-- If you would like to implement a PR, we are more than happy to help you go through the process!-->\r\n- [x] I would like to work on a fix!\r\n\r\n<!--\r\n@babel\/eslint-parser:\r\n  If you are having issues with JSX you might want to check out eslint-plugin-react. If there's an issue with new experimental syntax you might need check if it's supported by @babel\/eslint-plugin.\r\n-->\r\n\r\n**Current behavior**\r\n<!-- A clear and concise description of the behavior. -->\r\n\r\n- Reproduction: https:\/\/github.com\/cameron-martin\/vue-transpile-node-modules-repro\/tree\/just-webpack\r\n\r\nI have a `babel.config.js` file in the root of the repo, with\r\n\r\n```\r\n  babelrcRoots: [\r\n    '.',\r\n    'packages\/*',\r\n  ],\r\n```\r\n\r\nI then have webpack set up (for some reason I couldn't get this working with the babel cli) in a package in `packages\/my-app`, with all js files, including node_modules, compiled using `babel-loader` with `rootMode` set to `upward`, causing the `babel.config.js` in the root directory to apply.\r\n\r\nI have an npm package, `appauthhelper`, installed that also has a `.babelrc` file in its root. However, I would not expect this to apply since it is not listed in `babelrcRoots`. However, when I run package using `yarn workspace my-app run build`, babel fails with the following error:\r\n\r\n```\r\nError: Cannot find module 'babel-preset-minify' from '\/home\/user\/Repos\/vue-transpile-node-modules-repro\/node_modules\/appauthhelper'\r\n```\r\n\r\nThis means the .babelrc file from the appauthhelper package is being used.\r\n\r\n**Expected behavior**\r\n<!-- A clear and concise description of what you expected to happen (or code). -->\r\n\r\nTo not use the `.babelrc` file in `node_modules\/appauthhelper` since it isn't listed in babelrcRoots.\r\n\r\n**Babel Configuration (babel.config.js, .babelrc, package.json#babel, cli command, .eslintrc)**\r\n- Filename: `babel.config.js`\r\n\r\n```js\r\nmodule.exports = {\r\n  babelrcRoots: [\r\n    '.',\r\n    'packages\/*',\r\n  ],\r\n  presets: [\r\n    ['@babel\/preset-env', { useBuiltIns: 'entry' }],\r\n  ],\r\n};\r\n\r\n```\r\n\r\n**Environment**\r\n<!--- Tip: Instead of filling out the questions below, you can run `npx envinfo --preset babel` and paste the result below ``` -->\r\n```\r\n  System:\r\n    OS: Linux 5.4 Ubuntu 20.04.1 LTS (Focal Fossa)\r\n  Binaries:\r\n    Node: 15.0.1 - ~\/.nvm\/versions\/node\/v15.0.1\/bin\/node\r\n    Yarn: 1.22.5 - \/usr\/bin\/yarn\r\n    npm: 7.0.3 - ~\/.nvm\/versions\/node\/v15.0.1\/bin\/npm\r\n  Monorepos:\r\n    Yarn Workspaces: 1.22.5\r\n  npmPackages:\r\n    @babel\/cli: ^7.12.1 => 7.12.1 \r\n    @babel\/core: ^7.12.3 => 7.12.3 \r\n    @babel\/preset-env: ^7.12.1 => 7.12.1 \r\n    babel-loader: ^8.1.0 => 8.1.0 \r\n    webpack: ^5.4.0 => 5.4.0 \r\n```\r\n\r\n**Possible Solution**\r\n\r\nThe problem lies in the [`babelrcLoadEnabled` function](https:\/\/github.com\/babel\/babel\/blob\/0641a15030565e7f47ef0c5ff25f36264c182b11\/packages\/babel-core\/src\/config\/config-chain.js#L287-L326). If the fast path isn't hit, then the `.` babelrcRoot gets converted by `pathPatternToRegex` into a regex that matches any directory that has the repo root directory as a prefix, whereas it should only match that exact directory.\r\n\r\nFor example, the created regex looks like this:\r\n\r\n```\r\n\/\\\/repo(?:\\\/|$)\/\r\n```\r\n\r\nHowever, it should look more like this:\r\n\r\n```\r\n\/\\\/repo\\\/?$\/\r\n```\r\n\r\n**Additional context**\r\n<!-- Add any other context about the problem here. Or a screenshot if applicable -->\r\n","comments":["Hey @cameron-martin! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\""],"labels":["i: bug","i: needs triage"]},{"title":"Fix handling 'this' in class properties and jsx","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Fixes #11806, Fixes #12278\r\n| Patch: Bug Fix?          | Y\r\n| Tests Added + Pass?      | Yes\r\n| License                  | MIT\r\n\r\nCredit goes to @xc2!\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/12279\"><img src=\"https:\/\/gitpod.io\/api\/apps\/github\/pbs\/github.com\/babel\/babel.git\/bc9ab83c14a93eb865aa433f09092873d44d16e0.svg\" \/><\/a>\n\n","comments":["This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/12279\/builds\/67688) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit bc9ab83c14a93eb865aa433f09092873d44d16e0:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-g9m3v)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-y95vs)| Configuration |\n|[class properties jsx this bug](https:\/\/codesandbox.io\/s\/class-properties-jsx-this-bug-o5up5)| Issue #12278 |\n","@sebmarkbage I think this issue should also be addressed in the [JSX spec](https:\/\/github.com\/facebook\/jsx). From my reading, the current definition of JSXMemberExpression\r\n\r\n<details>\r\n\r\n```\r\nJSXMemberExpression :\r\n  JSXIdentifier . JSXIdentifier\r\n  JSXMemberExpression . JSXIdentifier\r\n\r\nJSXIdentifier :\r\n  IdentifierStart\r\n  JSXIdentifier IdentifierPart\r\n  JSXIdentifier NO WHITESPACE OR COMMENT -\r\n```\r\n<\/details>\r\n\r\nnot only allows `this` (and `super`) starts an JSXMemberExpression, but also MetaProperty e.g.\r\n\r\n```jsx\r\n<import.meta \/>\r\n<function.sent \/>\r\n```\r\n\r\neven invalid meta property is allowed in parser\r\n\r\n```jsx\r\n\/\/ will throw runtime syntax error after transpilation\r\n<import.foo \/> \r\n```\r\n\r\nHowever, how they should be interpreted in runtime is vague: If they should be special cased (like ecma spec did), they should be parsed in Babel as MetaProperty instead of JSXMemberExpression, so Babel don't need to _reinterpret_ AST (like we did in this PR) when handling JSXMemberExpression. Likewise for `this` and SuperProperty.\r\n\r\nI suggest we limit the start of JSXMemberExpression to be JSXIdentifier, `this`, `super` and then excluding all ReservedWord. I think allowing `this` and `super` is acceptable, but I can't think of any use case about interpreting JSXMemberExpression as a MetaProperty.\r\n\r\n```\r\nJSXMemberExpression :\r\n  JSXMemberStart . JSXIdentifier\r\n  JSXMemberExpression . JSXIdentifier\r\n\r\nJSXMemberStart :\r\n  JSXIdentifier but not ReservedWord\r\n  this\r\n  super\r\n```\r\n\r\nNot related: the optional chaining is now in the spec, should JSXMemberExpression support optional chaining?\r\n\r\n```jsx\r\n<compLibrary?.header \/>\r\n``` \r\n\r\n@existentialism Can you add a test on SuperProperty?\r\n```jsx\r\n<super.foo \/>\r\n```","I also noticed another inconsistency: we compile `this` differently from other keywords:\r\n\r\n```js\r\n<function\/>;\r\n<this \/>;\r\n<super \/>;\r\n<import \/>;\r\n<new \/>;\r\n```\r\n\r\n```js\r\n\/*#__PURE__*\/\r\nReact.createElement(\"function\", null);\r\n\r\n\/*#__PURE__*\/\r\nReact.createElement(void 0, null);\r\n\r\n\/*#__PURE__*\/\r\nReact.createElement(\"super\", null);\r\n\r\n\/*#__PURE__*\/\r\nReact.createElement(\"import\", null);\r\n\r\n\/*#__PURE__*\/\r\nReact.createElement(\"new\", null);\r\n```"],"labels":["PR: Bug Fix :bug:"]},{"title":"Class properties + JSX transform bug","body":"## Bug Report\r\n\r\n\r\n\r\n**Current behavior**\r\n\r\nhttps:\/\/codesandbox.io\/s\/class-properties-jsx-this-bug-6iqym\r\n\r\n**Input Code**\r\n\r\n```js\r\nclass MyComponent extends React.Component {\r\n  Foo = () => \"foo\";\r\n\r\n  renderFoo = () => {\r\n    \/\/ ERROR\r\n    return <this.Foo \/>;\r\n  };\r\n\r\n  renderFoo2 = () => {\r\n    \/\/ OK\r\n    const { Foo } = this;\r\n    return <Foo \/>;\r\n  };\r\n\r\n  renderFoo3() {\r\n    \/\/ OK\r\n    return <this.Foo \/>;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.renderFoo()}\r\n        {this.renderFoo2()}\r\n        {this.renderFoo3()}\r\n      <\/>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n\r\n\r\n**Environment**\r\n\r\n\r\n```\r\n\"react\": \"17.0.0\",\r\n\"react-dom\": \"17.0.0\",\r\n\"react-scripts\": \"3.4.3\"\r\n```","comments":["Hey @ambar! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","@ambar thanks for the issue, but I believe this has already been reported: #11806","Duplicate of #11806 "],"labels":["i: bug","i: needs triage"]},{"title":"Support \"extensions\" option in config files and presets","body":"<!--\r\nBefore making a PR, please read our contributing guidelines\r\nhttps:\/\/github.com\/babel\/babel\/blob\/main\/CONTRIBUTING.md\r\n\r\nPlease note that the Babel Team requires two approvals before merging most PRs.\r\n\r\nFor issue references: Add a comma-separated list of a [closing word](https:\/\/help.github.com\/articles\/closing-issues-via-commit-messages\/) followed by the ticket number fixed by the PR. (it should be underlined in the preview if done correctly)\r\n\r\nIf you are making a change that should have a docs update: submit another PR to https:\/\/github.com\/babel\/website\r\n-->\r\n\r\n### Original: #12151\r\n\r\n| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  | A <!--(Can use an emoji \ud83d\udc4d) -->\r\n| ------------------------ | ---\r\n| Fixed Issues?            | Closes #11409, fixes #8652, fixes #11394, fixes #10232, fixes #8962, fixes #11833, closes #8971\r\n| Patch: Bug Fix?          |\r\n| Major: Breaking Change?  |\r\n| Minor: New Feature?      | Yes\r\n| Tests Added + Pass?      | Yes\r\n| Documentation PR Link    | <!-- If only readme change, add `[skip ci]` to your commits -->\r\n| Any Dependency Changes?  |\r\n| License                  | MIT\r\n\r\n<!-- Describe your changes below in as much detail as possible -->\r\n\r\n> - It can be set in programmatic option, babel.config.json, .babelrc.json and in presets\r\n> - Files not matching any extension are ignored\r\n> - If no filename is given, the file is not ignored\r\n> - `\"*\"` is supported as a catch-all extension\r\n> \r\n> For backward compatibility reasons, this option defaults to `[\"*\"]`.\r\n\r\nThis PR makes it possible to specify, for example, `extensions: [\".ts\", \".tsx\"]` in the typescript preset, or in a config file. By doing so, users can keep their config in a single place instead of manually passing the extensions to `@babel\/register`\/`@babel\/cli`\/`@babel\/node` and other integrations.\r\n\r\nDepends on #11689, which makes it possible to know the list of extensions before instantiating the plugins.\r\n\r\n---\r\n\r\nThis PR fixes following issues, by defining `extensions: [\".ts\", \".tsx\"]` in `@babel\/preset-typescript` (so Babel can hook into `.ts` loading without explicitly specifying it in `@babel\/register`'s options):\r\n- #10232\r\n- #8962\r\n- #11833\r\n- #8971\r\n\r\nThese issues are fixed by not special-casing extensions handling in `@babel\/cli`:\r\n- #11394\r\n\r\n---\r\n\r\n## These are done in 4 different commits; I suggest reviewing them one by one!\r\n\r\nTODO:\r\n- [x] Add the option\r\n- [x] Use it in `@babel\/register`\r\n- [x] Use it in `@babel\/cli`\r\n- [x] Use it in the TS preset\r\n\r\n\n\n<a href=\"https:\/\/gitpod.io\/#https:\/\/github.com\/babel\/babel\/pull\/12216\"><img src=\"https:\/\/gitpod.io\/api\/apps\/github\/pbs\/github.com\/nicolo-ribaudo\/babel.git\/4805c696b4ad70650d3531e2fc494f9e841127c6.svg\" \/><\/a>\n\n","comments":["Build successful! You can test your changes in the REPL here: https:\/\/babeljs.io\/repl\/build\/30583\/","This pull request is automatically built and testable in [CodeSandbox](https:\/\/codesandbox.io).\n\n  To see build info of the built libraries, click [here](https:\/\/ci.codesandbox.io\/status\/babel\/babel\/pr\/12216\/builds\/64463) or the icon next to each commit SHA.\n\nLatest deployment of this branch, based on commit 4805c696b4ad70650d3531e2fc494f9e841127c6:\n\n|Sandbox| Source |\n|--|--|\n|[babel-repl-custom-plugin](https:\/\/codesandbox.io\/s\/babel-repl-custom-plugin-ono08)| Configuration |\n|[babel-plugin-multi-config](https:\/\/codesandbox.io\/s\/babel-plugin-multi-config-x45wh)| Configuration |\n","The e2e failures are caused by https:\/\/github.com\/terser\/terser\/issues\/854","@nicolo-ribaudo If it's useful, here's the WIP patch I had when I was experimenting with this: https:\/\/github.com\/babel\/babel\/compare\/main...loganfsmyth:__archive-allow-user-extensions\r\n\r\nPrimary differences I see is that:\r\n* I was trying to integrate the `extensions` value with the `ignore` system itself\r\n* I was planning to add a new API to Babel to get root-wide config from only `babel.config.js`, without any specific filename for context.\r\n\r\nSo on the `ignore` side, if you call Babel with a file that isn't a known extension, Babel will automatically ignore it, so for instance Webpack would no longer need its `test: \/\\.jsx?$\/` tests, and `babel-cli` would I think be able to just delete it's extension processing logic entirely (in the next major release). My thought had been to have `babel-register` use a new API like I mentioned on Slack as either like `babel.project(rootOpts)` or `babel.getRootExtensions(rootOpts)` or something, that would explictly return the list of extensions that are supported by the project by loading all the settings and presets reachable from the main config. I personally think that is the direction that `babel.config.js` is already going, so it felt pretty natural to start expanding the API to take more advantage of the root."],"labels":["PR: New Feature :rocket:","pkg: core"]},{"title":"set-file-extensions default behaviour breaks imports","body":"## Bug Report\r\n\r\n<!-- If you would like to implement a PR, we are more than happy to help you go through the process!-->\r\n- [ ] I would like to work on a fix!\r\n\r\n**Current behavior**\r\nThe default behaviour of Babel is to change javascript files to use `.js` ([set-file-extensions](https:\/\/babeljs.io\/docs\/en\/babel-cli#set-file-extensions)); however, import paths are not also updated, causing them to break.\r\n\r\n**Expected behavior**\r\nThe import path is not broken.\r\n\r\n- Babel version(s):\r\n  * @babel\/cli: 7.12.1\r\n  * @babel\/core: 7.12.3\r\n  * @babel\/plugin-transform-react-jsx: 7.12.1\r\n- Node\/npm version:\r\n  * node v13.12.0\r\n  * npm v6.14.4\r\n- OS: macOS 10.13.6\r\n- Monorepo: no\r\n- How you are using Babel: `cli`","comments":["Hey @jshado1! We really appreciate you taking the time to report an issue. The  collaborators on this project attempt to help as many people as  possible, but we're a limited number of volunteers, so it's  possible this won't be addressed swiftly.\n\nIf you need any help, or just have general Babel or JavaScript questions, we have a  vibrant [Slack community](https:\/\/babeljs.slack.com) that typically always has someone  willing to help. You can sign-up [here](https:\/\/slack.babeljs.io\/) for an invite.\"","> however, import paths are not also updated, causing them to break.\r\n\r\nBabel does not resolve the import paths. It is up to package authors to ensure the import path can be resolved.","I suggest taking a look at https:\/\/github.com\/tleunen\/babel-plugin-module-resolver","@JLHwung sooo you're saying the behaviour as designed is to break a project and then fixing it is \"someone else's problem\"?"],"labels":["i: question"]},{"title":"Make JSX pragmas override the configured runtime mode","body":"## Feature Request\r\n\r\nI'm basically requesting for what has been proposed by @nicolo-ribaudo [here](https:\/\/github.com\/babel\/babel\/pull\/11154#issuecomment-593362927) below the original PR introducing the new runtimes.\r\n\r\n- [x] I would like to work on this feature!\r\n\r\n**Is your feature request related to a problem?**\r\n\r\nCurrently, there is no way to override the configured runtime with JSX pragmas and I think it should be possible, they are mutually exclusive and pragmas should not only be used to configure the current runtime but they should also have the power to reconfigure which runtime is being used. This solution seems to be the most robust one from the alternatives - allowing the most flexibility.\r\n\r\nHow this has been shipped is causing problems, especially in 0-config tools like CRA. They detect which runtime should be used by inspecting the installed version of React (which is IMHO fine) and this suddenly causes errors to be thrown when old `@jsx` pragma is already used in the code. It unnecessarily bounds together upgrades of projects like CRA and Emotion (the latter is `@jsx`-based).\r\n\r\n*Note*: this already works like this in TS 4.1 betas (at least to some extent, need to test more combinations of pragmas and options), although there are still some issues with the overall implementation there, like https:\/\/github.com\/microsoft\/TypeScript\/issues\/41146 and some warnings\/errors for conflicting pragmas should be introduced. It shows though that they haven't thought about the need to restrict this which is what I'm asking for here.\r\n\r\n**Documentation, Adoption, Migration Strategy**\r\n\r\nRight now we have 3 situations that I'd like to make changes to:\r\n\r\n1. `runtime: classic` (default) + `@jsxImportSource`\r\n\r\n- **actual**: no error, no warning, the pragma is silently ignored\r\n- **expected**: new transform being used\r\n\r\n2. `runtime: automatic` + `@jsx` \r\n\r\n- **actual**: error is being thrown\r\n- **expected**: old transform being used\r\n\r\n3. `@jsx` + `@jsxImportSource`\r\n\r\n- **actual**: it depends on the runtime used, so it's either using classic runtime, ignoring the new pragma or an error is being thrown\r\n- **expected**: make it a `console.error`, I believe it should use the new transform though (so it would change the current behavior) unless you consider this being a breaking change.\r\n- **expected in Babel 8**: throw an error\r\n\r\nI believe that the proposed solutions for each combination **are not breaking changes**.\r\n\r\ncc @gaearon @lunaruan \r\n","comments":["@gaearon @lunaruan @sebmarkbage any problems that you foresee with this? I would like to get into adjusting the transforms asap if I only get a green light on this one","> this suddenly causes errors to be thrown when old @jsx pragma is already used in the code. \r\n\r\nWhat errors?\r\n\r\n>It unnecessarily bounds together upgrades of projects like CRA and Emotion (the latter is @jsx-based).\r\n\r\nI talked to Seb and he actually suggested the opposite. To decouple the upgrades, the solution could be to specify *both* pragmas in the transitional period. Then drop the old one when you upgrade the tools. This could be a simple codemod.","The downside of what you're proposing is that it's impossible to write a file that would work with both old and new transforms. E.g. if you run an internal company npm registry and you don't compile code until it's used in the app. If you have two apps with different CRA versions, with the proposed approach it would be impossible to write a component using Emotion correctly. But if the recommendation instead is to use both pragmas (when you want to support both tool versions), it works.","> What errors?\r\n\r\n```\r\nSyntaxError: \/test__\/index.js: pragma and pragmaFrag cannot be set when runtime is automatic.\r\n> 1 | \/** @jsx jsx *\/\r\n    | ^\r\n  2 | \r\n  3 | <div key=\"key\" {...props} \/>;\r\n```\r\n\r\n> I talked to Seb and he actually suggested the opposite. To decouple the upgrades, the solution could be to specify both pragmas in the transitional period.\r\n\r\n~Not sure if I fully understand the proposal - what would be an effect of both pragmas?~ Also - not sure if you got right the problem I'm describing so I'll try to rephrase - it's not a problem that one has to stick to one of the pragmas or smth but rather that if we don't make any changes to how this is implemented right now and if CRA sticks to configuring `runtime: automatic` based on the auto-detection (with which alone I have no problem with, I think the auto-detection there makes sense) then as soon as one upgrades their CRA version to the one supporting automatic runtime their Emotion-based projects will stop working because of the error I'm mentioning at the top of this comment.\r\n\r\nEDIT:\/\/ Sorry - I'm in a hurry and just have digested your comments in full. Still not sure if you were implying that currently the upgrades are not coupled or just if my proposal doesn't decouple them enough. I guess maybe the latter - but was not obvious for me at first.\r\n\r\n> E.g. if you run an internal company npm registry and you don't compile code until it's used in the app. If you have two apps with different CRA versions, with the proposed approach it would be impossible to write a component using Emotion correctly.\r\n\r\nIMHO this use case seems *very very* specific - not applicable to the majority of users. But sure - if u really want to support this then I would be OK with it, everything is better than throwing an error. My proposal would be for `@jsxImportSource` to simply override specificed `@jsx` and `@jsxFrag`.",">SyntaxError: \/test__\/index.js: pragma and pragmaFrag cannot be set when runtime is automatic\r\n\r\nOh I see. I forgot that there is an error on this. I think it would be fine to relax this and _have it be ignored_. This allows the transitional period where the same source file can be interpreted by either version as long as both pragmas are present. It is up to you, however, if this is valuable. We can always relax it later in a minor release too.\r\n\r\n>if we don't make any changes to how this is implemented right now and if CRA sticks to configuring runtime: automatic based on the auto-detection (with which alone I have no problem with, I think the auto-detection there makes sense) then as soon as one upgrades their CRA version to the one supporting automatic runtime their Emotion-based projects will stop working because of the error I'm mentioning at the top of this comment.\r\n\r\nIt will stop working until they replace the old pragma with the new one, right? In this case I argue that this is acceptable. People putting `\/* @jsx ... *\/` into every file know that they're opting into something special. I think it's reasonable that the \"default\" migration path is seamless but when you do customizations like this, upgrading might involve an extra step. I don't think Emotion users having to run a single Find-and-Replace operation in their project is the overriding concern here. It definitely needs to be communicated (e.g. wherever this technique is described in Emotion docs, or on StackOverflow), but once you do it, you no longer have the problem. Additionally, I think tools like CRA should provide an opt-out for the folks who use the new transform. I want to emphasize that at least in CRA's case, the new transform is bundled with a major version change, so people _do_ expect that upgrading would need some manual steps.","WDYT about never throwing but `console.warn()` if there is a pragma that is ignored by the used runtime? By doing so Dan's use case is satisfied (people using that two-modes setup can just ignore the warning), but we hint users that they are using the wrong pragma, since usually it would be a mistake.","> It will stop working until they replace the old pragma with the new one, right? In this case I argue that this is acceptable.\r\n\r\nYes, but they also need to upgrade Emotion to the latest v10 (we have to ship the new JSX factories after all( which shouldn't be a problem as it should be fully compatible but ideally this wouldn't be a required step - dependency upgrades are always \"risky\" (semver being human-driven and all). So I believe that if we could avoid this then it would be a preferable situation because upgrading things gradually rather than multiple things at once is usually a slower but safer approach\r\n\r\n> People putting \/* @jsx ... *\/ into every file know that they're opting into something special\r\n\r\nSpecial - but supported. There are probably a lot of \"special\" things handled automatically in CRA as webpack-based tool deviates from strict browser semantics - you can import assets \ud83d\ude31 ! And for newcomers, this doesn't really sound like anything different. From what I understand the CRA has been created both as a newcomer-friendly 0-config tool and a reusable boilerplate for others - I would argue that the current state of things just isn't that newcomer-friendly. And that's kinda my whole argument - because many people will just jump into upgrading both at once etc and I personally would not be affected by a mismatch like this. \r\n\r\n>  It definitely needs to be communicated (e.g. wherever this technique is described in Emotion docs, or on StackOverflow), but once you do it, you no longer have the problem.\r\n\r\nWe can't update resources out of our control (blog posts, videos, whatever) and people using such with the freshly installed CRA (when the new major ships) would still have a problem that can be avoided.\r\n\r\n> WDYT about never throwing but console.warn() if there is a pragma that is ignored by the used runtime?\r\n\r\nSure, that's a possibility - although this could warn quite a bit for larger codebases wanting to have both pragmas at once. \r\n\r\n---\r\n\r\nI think the bottom line is that all parties involved here (mainly Dan and me \ud83d\ude09 ) agree that the current restriction can be relaxed - the rest is bikeshedding about how much of a problem this whole thing is. Would you say this is correct? If yes - I would probably get into adjusting transforms soon and we could bikeshed during code review.","@gaearon It seems that the use case you have mentioned has not been considered at all - the implementation actually deliberately forces the user to choose the runtime. There is even a special pragma for that: \r\nhttps:\/\/github.com\/babel\/babel\/blob\/b4ae7b7893f841b8b0f957be7781f516360e7f61\/packages\/babel-helper-builder-react-jsx-experimental\/src\/index.js#L16\r\n\r\nIn addition to that, it seems that the new implementation (the one in `@babel\/helper-builder-react-jsx-experimental`) changed the \"rules\" around classic runtime:\r\nhttps:\/\/github.com\/babel\/babel\/blob\/b4ae7b7893f841b8b0f957be7781f516360e7f61\/packages\/babel-helper-builder-react-jsx-experimental\/src\/index.js#L256-L259\r\nThere was no such restriction in the past in the old implementation - one could just use `@jsx` without `@jsxFrag`.\r\n\r\nBoth of those restrictions are problematic from Emotion's PoV and I have started to get reports about this being problematic since CRA 4 has been already released. What is your opinion about this and about the proposed solution?\r\n",">And for newcomers, this doesn't really sound like anything different. From what I understand the CRA has been created both as a newcomer-friendly 0-config tool and a reusable boilerplate for others - I would argue that the current state of things just isn't that newcomer-friendly. \r\n\r\nI think my argument here is that \"copy and paste this JSX comment into every file\" is already not beginner-friendly, and a clear indication that you're breaking out of the default pattern. I'm not sure that beginners overwhelmingly choose Emotion when this manual workflow is involved. So I would argue that if they can copy and paste something into every file, they can also run a Replace-All codemod when they upgrade.\r\n\r\n>I have started to get reports about this being problematic since CRA 4 has been already released. \r\n\r\nCan you please file an issue in the CRA repo to alert the maintainers? Ideally this should be added to \"breaking changes\" \u2014 that people need to wait for Emotion support _or_ opt out of the new JSX transform (I believe there is an `.env` option for this now).","> dependency upgrades are always \"risky\" (semver being human-driven and all). So I believe that if we could avoid this then it would be a preferable situation because upgrading things gradually rather than multiple things at once is usually a slower but safer approach\r\n\r\nI would go further and say it would be best for Emotion users to *turn off* the new transform after they upgrade CRA instead of rushing a solution on Babel level which is a behavior we'll have to live with forever.","I certainly don't want to rush things on Babel - I genuinely believe that the proposed solution is slightly better than what got shipped. It's also not a rush idea based on my current problems - I have proposed pretty much the same back in March and it got positive feedback from @nicolo-ribaudo back then. It just has slipped in the flood of other comments etc - it was a pretty big PR after all. \r\n\r\nHow this currently works in Babel is also not consistent with what TS has implemented and I believe that matching the behavior regarding this between Babel and TS is a good goal, for the good of the whole community. However, TS has only shipped this in their beta versions so far - so one could argue that changes should be implemented there instead of here.",">How this currently works in Babel is also not consistent with what TS has implemented and I believe that matching the behavior regarding this between Babel and TS is a good goal, for the good of the whole community. \r\n\r\nYes but that's a separate issue. (We should report any discrepancies.) I think you filed one, was there something else too?","Ive fixed the createElement not being autoimported from jsxImportSource module. So that was a big one and its already the same for Babel and TS.\r\n\r\nThe other discrepancy is that they do not support `@jsxRuntime` pragma at all (from what ive grepped in their code) and that regardless of the global config for classic\/automatic runtime (its a jsx option in the tsconfig.json) it is enough to reconfigure that global runtime with the other one by just using `@jsx`\/`@jsxImportSource` (its acting like a local - per file - override).\r\n\r\nI have not reported this in their repo because I think their approach is better and I propose to match Babel\u2019s behavior to theirs in that aspect in this issue here","I'm trying to make sense of the different use cases posted, please correct me if I'm wrong:\r\n- @gaearon proposes to make it easy to use both runtimes in the same file at different times, depending on the environment.\r\n  ```js\r\n  \/* @jsxImportSource jsx-library *\/\r\n  \/* @jsx h *\/\r\n  import { h } from \"jsx-library\";\r\n  <div \/>;\r\n  ```\r\n  ```js\r\n  \/\/ babel config\r\n  export default api => ({\r\n    plugins: [\r\n      [\"@babel\/transform-react-jsx\", {\r\n        runtime: api.env() === \"classic-runtime\" ? \"classic\" : \"automatic\"\r\n      }]\r\n    ]\r\n  });\r\n  ```\r\n  This would, depending on the env, produce one of these outputs:\r\n  ```js\r\n  import { h } from \"jsx-library\";\r\n  import { jsx as _jsx } from \"jsx-library\/jsx-runtime\";\r\n  _jsx(\"div\");\r\n\r\n  \/\/ or\r\n\r\n  import { h } from \"jsx-library\";\r\n  h(\"div\");\r\n  ```\r\n\r\n- @Andarist proposes to make it possible using both the runtimes in different files at the same time, depending on what runtime library the file uses.\r\n  ```js\r\n  \/\/ a.jsx\r\n  \/* @jsxImportSource react *\/\r\n  <div \/>\r\n  ```\r\n  ```js\r\n  \/\/ b.jsx\r\n  \/* @jsx jsx *\/\r\n  import { jsx } from \"@emotion\/core\";\r\n  <div \/>\r\n  ```\r\n  Which, regardless of the runtime set in the Babel config, is compiled to\r\n  ```js\r\n  \/\/ a.jsx\r\n  import { jsx as _jsx } from \"react\/jsx-runtime\";\r\n  _jsx(\"div\");\r\n  ```\r\n  ```js\r\n  \/\/ b.jsx\r\n  import { jsx } from \"@emotion\/core\";\r\n  jsx(\"div\");\r\n  ```\r\n\r\n---\r\n\r\nThe problem we are discussing about is only during the transition period, and it's not clear why someone that successfully migrated their codebase to the `\"automatic\"` runtime would want to also run it in `\"classic\"` mode.\r\n- If it is a library that hasn't control on the React version used by their user they should stick with the most compatible option, i.e. `\"classic\"`.\r\n- If it is an application that has control on which React version to use, they'll only start migrating to `\"automatic\"` after upgrading React to a compatible version.\r\n\r\nI think that it's more common to have two different jsx factories: for example, I might start writing an app in pure React and then start using Emotion for some new components. I can understand that someone might want to migrate to the new runtime for React, and being able to use the `@jsx` pragma in the files where they are using Emotion makes it possible to migrate gradually. This would be similar to how we handle configuration files: options set nearer to the compiled file (for example, in the same directory) override options set further away (e.g. in the repo root).\r\n\r\nHowever, there is also a third scenario to think about: someone wants to completely migrate to the automatic runtime but forgets a `@jsx` somewhere in their code.\r\n\r\n---\r\n\r\nThe current behavior protects from the third scenario: if you opt-in into `\"runtime\": \"automatic\"`  it prevents you from accidentally leaving the classic runtime around.\r\n\r\nSo my question is: does it actually harm using the two runtimes _at the same time_ (e.g. maybe a bundle size increase?). If it doesn't, then based on my experience (i.e. using a jsx library only in some files) I think that optimizing for @Andarist's use case can be beneficial to more users.","The concern is that this just kicks the can down the road. If people think that the transform has switched (but it has not), they will not get the runtime that is able to provide the necessary deprecation warnings for the long term (explained in the original thread). So they would lag behind everyone else who is fixing their key spread issues.\r\n\r\n","I tried to upgrade Next.js from 9 to 10 today, alongside React 16.3 to 17.0.1, and I ran into this.\r\n\r\nThe underlying issue is related to Babel <> Emotion, as mentioned above.\r\nThere seems to be a workaround for `theme-ui` and CRA 4 as mentioned there:\r\nhttps:\/\/github.com\/system-ui\/theme-ui\/issues\/1160#issuecomment-715530924\r\n\r\nBut this doesn't work with Next.js, the babel compilation fails whether I use:\r\n- `DISABLE_NEW_JSX_TRANSFOR=true` in .env\r\n- `DISABLE_NEW_JSX_TRANSFORM=true` in the package.json script\r\n- `\/** @jsxRuntime classic *\/` on top of all files using `\/** @jsx jsx *\/`\r\n\r\nNone of those solutions work at this time, I'm working on https:\/\/github.com\/UnlyEd\/next-right-now\/pull\/189\r\n\r\nI'm not sure if it's related to the Next.js framework, but my understanding after reading a few issues on the subject is that the above solutions should work.\r\n\r\nI've opened an issue on the Next.js repository. https:\/\/github.com\/vercel\/next.js\/issues\/18461","> @gaearon proposes to make it easy to use both runtimes in the same file at different times, depending on the environment.\r\n\r\nThis is IMHO quite a convoluted use case. I understand it and I wouldn't be super against it but I doubt that many users would actually use this - it's also not supported right now by Babel, so my proposal would not change anything regarding that but I guess it could prevent this being implemented further down the road without introducing breaking changes so it might be a good time to discuss this right now.\r\n\r\n> @Andarist proposes to make it possible using both the runtimes in different files at the same time, depending on what runtime library the file uses.\r\n\r\nYes. This is currently supported with the help of the extra `@jsxRuntime` pragma but I wouldn't call this super user-friendly (a lot more to type). But given this is required to use the classic runtime when automatic one is configured via config (and most likely vice-versa) this requirement made the whole thing breaking change (an unnecessary one in my opinion) for consumers of higher-level tooling.\r\n\r\nThis is also not how this got implemented in TS and given that TS 4.1 is supposed to be released within a week I would hope that we could act here quickly to align both implementations for the good of the ecosystem.\r\n\r\n**Note**: I would have to test this to be sure but when I've been yesterday debugging some runtime-related issue in TS I came to the conclusion that if both pragmas are specified in a file:\r\n```ts\r\n\/** @jsx h *\/\r\n\/** @jsxImportSource @emotion\/react *\/\r\n```\r\nthen the classic runtime is being used.\r\n\r\n> This would be similar to how we handle configuration files: options set nearer to the compiled file (for example, in the same directory) override options set further away (e.g. in the repo root).\r\n\r\nExactly my line of thinking here.\r\n\r\n> However, there is also a third scenario to think about: someone wants to completely migrate to the automatic runtime but forgets a @jsx somewhere in their code.\r\n\r\nWell, this won't introduce a lot of negatives as long as the underlying library supports it. With time we could add a deprecation warning to Emotion's `jsx` factory. I also don't think this is necessarily different from any other migration related to any other library. This one might even be easier to do because grepping this in the codebase is easier with this one than for regular functions\/methods \r\n\r\n> So my question is: does it actually harm using the two runtimes at the same time (e.g. maybe a bundle size increase?). If it doesn't, then based on my experience (i.e. using a jsx library only in some files) I think that optimizing for @Andarist's use case can be beneficial to more users.\r\n\r\nIt probably hurts bundlesize a little bit - but personally, I wouldn't be overly cautious about this one. Smooth migration is IMHO more important than some extra bytes (and I'm a bytes-concerned guy \ud83d\ude05 ).\r\n\r\n> The concern is that this just kicks the can down the road. If people think that the transform has switched (but it has not), they will not get the runtime that is able to provide the necessary deprecation warnings for the long term (explained in the original thread). So they would lag behind everyone else who is fixing their key spread issues.\r\n\r\n@gaearon  How they can think that if they are using `@jsx` pragma? I understand that one can forget to remove this somewhere but when working on the codebase one should remove this over time - like I've mentioned: this feels to me like any other migration that just has to be done over time.\r\n\r\n> I'm not sure if it's related to the Next.js framework, but my understanding after reading a few issues on the subject is that the above solutions should work.\r\n\r\nYes, one of those should probably work. If you share a runnable repro case of your problem I might take a look at it. I've just skimmed through the issues you have mentioned but couldn't find such quickly - if it's there then please just link me to it.\r\n\r\n---\r\n\r\nWhile I still believe that my proposal has merit and I would love to see it being implemented (which I'm offering to do), the more pressing issue for me at the time is that those semantics should be aligned between Babel and TS and they clearly are not right now. So changes in one of the tools are required (or in both?) - I could try to work on both (although I'm feeling much more comfortable in making changes to Babel than to TS) but I'd really need to know what is the end game here. \r\n\r\n@gaearon could you discuss this with the React team? Or maybe you have already done that and the team's opinion of what has been shipped didn't change? What should be done with TS implementation? I'm happy to discuss this over a call or something to just establish what should be the final semantics of this without dragging this issue further over time.\r\n\r\n@nicolo-ribaudo regarding all presented arguments from both sides - what's your stance on this? are you inclined to support one of the proposed approaches over another? or would you feel better if the React team was to decide about this?","Re-reading the whole thread, I prefer the semantics that @Andarist is proposing.\r\n\r\nThe configuration defined inline in a file should always take precedence over what is defined in the configuration files, and an explicit `@jsx`\/`@jsxImportSource` pragma is a strong signal of the runtime that the user needs in that file.\r\n\r\nIn cases where there is a real conflict (i.e. two incompatible options in the config, or two incompatible pragmas in the source file) we should at least warn.\r\n\r\nHowever, I would accept a veto from the React team (but only if the TS implementation is changed to match the same semantics).\r\n\r\ncc @weswigham In case you aren't aware of this discussion: currently the TS and Babel semantics are different, and we should try to align on the same behavior.","@Andarist is currently working on adjusting the TS semantics a smidge to match this, and I'm open to the change, since it's pretty reasonable from a compatibility perspective.","@weswigham this is not quite accurate. [One bug I've fixed](https:\/\/github.com\/microsoft\/TypeScript\/pull\/41151) has indeed fixed a compatibility issue with Babel but [the current PR that I'm working on](https:\/\/github.com\/microsoft\/TypeScript\/pull\/41476) is focused on JSX namespace resolution and this is TS-specific.\r\n\r\nThe issue here is about:\r\n- whether the possibility to use a particular pragma should be restricted by the config option (or if an additional `@jsxRuntime` pragma should be required for the other pragma to work)\r\n- what should happen if one uses both `@jsx` and `@jsxImportSource` pragmas at the same time (in Babel the behavior is currently different based on the config option because it switches the implementation entirely) and","I think we all agree expected result on situation 1: `@jsxImportSource` should be respected in both runtime.\r\n\r\nI agree with @Andarist on situation 2. The pragma, by definition, should override config. I acknowledge that React teams worry that deprecation warnings are not shown for components run by classic runtime. We could introduce an option `allowJsxClassicPragmaInAutomatic: boolean` (defaulted to `false`) since it is not recommended for using classical runtime alongside the automatic one. By specifying that users opt in to such behaviours which may causes larger bundle size and loss of some deprecation warnings.\r\n\r\nAs for automatic runtime pragma inside classical runtime, I think it should be encouraged since it can be the case when users start migrating to the new runtime. In other words, `allowJsxClassicPragmaInAutomatic` only works for `runtime: \"automatic\"`.\r\n\r\nOn situation 3 where conflict pragma is detected, I agree that we should at least warn.","I would like to know what was the ending of this thread then. Everything frozen in the end of 2020...?"],"labels":["area: react","i: enhancement","area: jsx"]}]