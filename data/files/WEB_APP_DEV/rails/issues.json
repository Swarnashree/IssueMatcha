[{"title":"ActiveSupport::Cache.expand_cache_key sometimes returns falsely same key in parallel tests","body":"### Steps to reproduce\r\nThats the hard part here! I still didnt figure out how to reproduce it safely. \r\nWhat i can tell is that this does not happen when i execute a single testcase. It also doesnt happen when i set parallel workers to `1`.\r\n\r\nWhen parallel workers is set to `processors` and all tests are executed via `rails test`, the following test is breaking repeatedly:\r\n```ruby\r\n      it \"returns updated records omitting cache and returning new etag\" do\r\n        get \"\/apis\/v1\/me\/tickets\"\r\n        assert_valid_json_response\r\n\r\n        assert_changes ->{ last_response.headers[\"etag\"] } do\r\n          travel 1.second\r\n          tickets(:multi).touch\r\n\r\n          get \"\/apis\/v1\/me\/tickets\"\r\n          assert_valid_json_response\r\n        end\r\n      end\r\n```\r\nThe etag header is calculated basically via this line of code which i also found out to return the same **wrong key**. The `updated_at` on the record `tickets(:multi)` changes, but the underlying query fetching the `max(tickets.updated_at)` seem to return an older timestamp? At least the timestamp in the key remains the same.\r\n```\r\nActiveSupport::Cache.expand_cache_key current_user.tickets.visible\r\n```\r\nThe visible scope: \r\n```\r\nscope :visible, -> { joins(:admittances).where(tickets: {hidden: false}).merge(Admittance.visible).group(\"tickets.id\")}\r\n```\r\n\r\n### Expected behavior\r\nThe etag header should change in the same way whether i execute a single test or all together without flakiness. \r\n\r\n### Actual behavior\r\nThe etag header **remains equal** which is wrong. But this happens only when executing all tests parallelized which is kinda flaky.\r\n\r\n### Notes\r\nI found out that changing the scope implementation from `group` to `distinct` fixes it:\r\n```\r\nscope :visible, -> { joins(:admittances).where(tickets: {hidden: false}).merge(Admittance.visible).select(\"distinct on (#{table_name}.id) #{table_name}.*\")}\r\n```\r\n\r\n### System configuration\r\n**Rails version**: 7.1.2\r\n\r\n**Ruby version**: 3.2.2\r\n","comments":["Can you use one of the [bug report templates](https:\/\/github.com\/rails\/rails\/blob\/main\/guides\/bug_report_templates\/action_controller.rb) to provide something reproducible? Otherwise its not really possible to figure out what's happening","Can you post the output of `current_user.tickets.visible.to_sql` ? \r\nUnsure, but I suspect you might have an ambiguous column `updated_at` clashing from the join. \r\n"],"labels":["more-information-needed"]},{"title":"Ignore destroyed records in CollectionAssociation#empty?","body":"Fix: https:\/\/github.com\/rails\/rails\/issues\/51388\r\n\r\nThis commit isn't in a mergeable state, it's just to better understand the issue at hand. There is likely similar issues in other methods and it would need some tests.\r\n\r\n","comments":[],"labels":["activerecord"]},{"title":"[Fix #49259] backtrace_cleaner in the console","body":"### Motivation \/ Background\r\n\r\nThis Pull Request has been created because the current `backtrace_cleaner.rb` does not work as intended in the Rails console. The silencer is too aggressive and removes the entire backtrace. Users expect to be able to see what lines of their application code an exception was raised from. See the video below for a demo of the bug.\r\n\r\nThe reason this is an issue in the Rails console and not elsewhere is because of irb's `handle_exception` [method](https:\/\/github.com\/ruby\/irb\/blob\/89bca01bbac51325a605e31d55e451f251bc5255\/lib\/irb.rb#L1218), which generates the backtrace from `Exception#full_message` rather than `Exception#backtrace` - `Rails::BacktraceCleaner` expects the latter. The difference in formatting between the two results in the silencer removing all lines.\r\n\r\nCloses #49259 \r\n\r\n### Detail\r\n\r\nThis Pull Request creates a new `Rails::FullMessageCleaner` class which inherits from `ActiveSupport::BacktraceCleaner`. I'm proposing this as a solution rather than altering `Rails::BacktraceCleaner` because\r\n\r\n1. The existing class works as expected in other contexts - changing it to work in both the console and the other contexts would be difficult, because\r\n2. They are serving a similar but different enough purpose: one cleans `Exception#backtrace`, and one cleans an array of backtrace lines that irb gets from `Exception#full_message`. These inputs are different enough I think a new class is warranted.\r\n\r\n### Additional information\r\n\r\nI added tests that use a real exception from whatever ruby version the test environment is running, as well as a hard coded ruby 2 test. I wasn't able to tophat this on a rails app using a ruby 2 version - it was difficult to get a test rails app using my development version of rails running on ruby 2. \r\n\r\nhttps:\/\/github.com\/rails\/rails\/assets\/4535650\/81d2b486-5c26-4a08-8705-e25630bd3602\r\n\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["railties"]},{"title":"Expose @association as a reader in ActiveRecord_Associations_CollectionProxy","body":"This makes it possible to reflect on associations. For example, Blog.first.posts.association.owner would show that the blog is the owner of the association.\r\n\r\n## Why?\r\n\r\nI have a link helper in my Rails app that reflects on associations, like this: `show(@blog.posts)`. Currently I can't reflect on that association unless I access a private instance variable:\r\n\r\n```ruby\r\n@blog.posts.instance_variable_get(\"@association\").target\r\n```\r\n\r\nThis commit exposes the `@association` object in a public API so I can reflect on associations.\r\n","comments":[],"labels":["activerecord"]},{"title":"Bump `NODE_LTS_VERSION` to 20.11.1","body":"### Motivation \/ Background\r\n\r\nIn e8638c9a942e94f097dc8f37a3b58ac067a5ca16 we introduced a constant to\r\nstore the version of Node to be used when generating `.node-version`.\r\n\r\nSince then, the [current LTS][LTS] version of Node is now `20.11.1` as\r\nof [2024-02-14][date].\r\n\r\n[LTS]: https:\/\/nodejs.github.io\/nodejs.dev\/en\/about\/releases\/\r\n[date]: https:\/\/nodejs.org\/en\/blog\/release\/v20.11.1\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["railties"]},{"title":"Devcontainer using ruby image","body":"This Pull Request has been created because the Rails org now has a [ruby docker image](https:\/\/github.com\/rails\/devcontainer\/tree\/main\/images\/ruby\/.devcontainer) based on the [devcontainer feature](https:\/\/github.com\/rails\/devcontainer\/blob\/main\/features\/ruby\/README.md) that we built a couple weeks ago. The goal of this PR is to use that ruby image in the Rails dev container.\r\n\r\n### Detail\r\n\r\nThis Pull Request changes both the Rails devcontainer and the devcontainer generated for Rails apps. A few changes were needed:\r\n\r\nFirst of all, our image allows minor version to be specified. So I have updated that in both devcontainers.\r\n\r\nFor rails app devcontainer, we need to install libpq or mysql headers (if we are using those dbs) because the image does not have them. This is just a temporary fix, as our plan is to create devcontainer features that will install everything needed for those dbs, which I plan to work on next week. I did not update the db system change generator to add these packages to the dockerfile as it's a bit tricky to get right since we don't want to mess up the user's dockerfile (which may be customized). I will wait for the feature to be ready and then db system change can simply add a new feature to `devcontainer.json` when appropriate.\r\n\r\nFor the rails devcontainer there were a few more changes. I had to add a couple libraries that don't exist on our image. Also I noticed we are doing extra ceremony to build imagemagick instead of apt get. This is because of issue with some activestorage tests going [back to the original PR creating the devcontainer](https:\/\/github.com\/rails\/rails\/pull\/43061#issuecomment-903658579). But we just [use apt get in CI](https:\/\/github.com\/rails\/buildkite-config\/blob\/main\/Dockerfile#L46) and there is no issue. I realized the difference is that we use libvips in the devcontainer but libvips-dev on CI. Making that change to the devcontainer got the tests passing. I think its a win because building imagemagick was one of the slowest parts of building this container.\r\n\r\nAdditionally, we are no longer doing yarn install in the dockerfile. Our image does not include nvm or node. After discussion with @rafaelfranca we decided just to move yarn install out of the dockerfile and let it be done in the post setup script.\r\n\r\n### Additional information\r\n\r\nWhile testing I noticed I failed to add requires to the DB System Change generator when I modified it to work with devcontainers in rails\/rails@c90a870. Not sure how I missed that but I figured I'd just add the fix to this branch.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["railties"]},{"title":"[ci skip] Documentation for `Rails.env.local?`","body":"### Motivation \/ Background\r\n\r\nI couldn't find documentation about `Rails.env.local?`, so people don't know it exists.\r\n\r\n### Detail\r\n\r\nThis Pull Request adds documentation about `Rails.env.local?`.\r\n","comments":[],"labels":["railties"]},{"title":"Inconsistent behaviour with previous encryption schemes at global \/ attribute level","body":"### Steps to reproduce\r\n\r\nref: https:\/\/guides.rubyonrails.org\/active_record_encryption.html#support-for-previous-encryption-schemes\r\n\r\nConsider these three tests, to be added to [encryption_schemes_test.rb](https:\/\/github.com\/rails\/rails\/blob\/main\/activerecord\/test\/cases\/encryption\/encryption_schemes_test.rb):\r\n\r\n```ruby\r\n  test \"deterministic property is retained when using previous schemes at the attribute level\" do\r\n    ActiveRecord::Encryption.config.deterministic_key = \"12345\"\r\n\r\n    encrypted_author_class = Class.new(Author) do\r\n      self.table_name = \"authors\"\r\n\r\n      encrypts :name, deterministic: true, previous: { encryptor: PassthruEncryptor.new }\r\n    end\r\n\r\n    assert_includes encrypted_author_class.deterministic_encrypted_attributes, :name\r\n\r\n    author = encrypted_author_class.create!(name: \"Stephen King\")\r\n    assert_equal author, encrypted_author_class.find_by_name(\"Stephen King\")\r\n  end\r\n\r\n  test \"deterministic property is retained when using previous schemes at the global level\" do\r\n    ActiveRecord::Encryption.config.deterministic_key = \"12345\"\r\n    ActiveRecord::Encryption.config.previous = [{ encryptor: PassthruEncryptor.new }]\r\n\r\n    encrypted_author_class = Class.new(Author) do\r\n      self.table_name = \"authors\"\r\n\r\n      encrypts :name, deterministic: true\r\n    end\r\n\r\n    assert_includes encrypted_author_class.deterministic_encrypted_attributes, :name\r\n\r\n    author = encrypted_author_class.create!(name: \"Stephen King\")\r\n    assert_equal author, encrypted_author_class.find_by_name(\"Stephen King\")\r\n  end\r\n\r\n  test \"deterministic property can be explicitly provided when using previous schemes at the attribute level\" do\r\n    ActiveRecord::Encryption.config.deterministic_key = \"12345\"\r\n\r\n    encrypted_author_class = Class.new(Author) do\r\n      self.table_name = \"authors\"\r\n\r\n      encrypts :name, deterministic: true, previous: { encryptor: PassthruEncryptor.new, deterministic: true }\r\n    end\r\n\r\n    assert_includes encrypted_author_class.deterministic_encrypted_attributes, :name\r\n\r\n    author = encrypted_author_class.create!(name: \"Stephen King\")\r\n    assert_equal author, encrypted_author_class.find_by_name(\"Stephen King\")\r\n  end\r\n```\r\n\r\nThe second and third tests pass. The first fails:\r\n\r\n```\r\nFailure:\r\nActiveRecord::Encryption::EncryptionSchemesTest#test_deterministic_property_is_retained_when_using_previous_schemes_at_the_attribute_level [test\/cases\/encryption\/encryption_schemes_test.rb:195]:\r\nExpected: #<#<Class:0x00000001055dbcd0> id: 1>\r\n  Actual: nil\r\n```\r\n\r\n### Expected behavior\r\nI think either the first and second test should both pass, or they should both fail. I think the third test is passing correctly.\r\n\r\nI can make a PR but would like some guidance on which behaviour is expected. I think the root cause is that global previous schemes get merged [here](https:\/\/github.com\/rails\/rails\/blob\/68b20b6513fe56ca80e4966628c231b4d6113bea\/activerecord\/lib\/active_record\/encryption\/encryptable_record.rb#L73-L74) but attribute-level previous schemes do not.\r\n\r\n### System configuration\r\n**Rails version**: `main`\r\n\r\n**Ruby version**: any\r\n","comments":["@jorgemanrubia are you able to provide some guidance here?"],"labels":["activerecord","encryption"]},{"title":"Add :variants option to render-related documentation [ci skip]","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), the motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\nThis Pull Request has been created because; I couldn't find the `:variants` option in the API documentation. I noticed it was covered in the guidelines, but it didn't go over that render can intake a singular version of `:variant` and partial rendering should only intake a plural version of the option.\r\n\r\n### Detail\r\n\r\nThis Pull Request adds \r\n- `:variants` documentation to `ActionView::PartialRenderer`\r\n- `:variants` and `:variant` to `ActionController::Rendering`\r\n \r\n### Additional information\r\n\r\nIt's not clear to me what areas should also include the as an available option, any insights would be helpful! \ud83d\ude42 \r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["I see in Rails 7 that `:variants` can't be singular in partial rendering, I'm going to update that now.\r\n\r\n(example for clarification)\r\n\r\n```rb \r\nrender partial: 'account', variant: :mobile\r\nrender partial: 'account', variant: [:mobile]\r\n# => desktop partial\r\nrender partial: 'account', variants: :mobile\r\nrender partial: 'account', variants: [:mobile]\r\n# => mobile partial\r\n```\r\n\r\n```rb\r\nrender :index, variant: :mobile\r\nrender :index, variant: [:mobile]\r\nrender :index, variants: :mobile\r\nrender :index, variants: [:mobile]\r\n# => mobile template\r\n```","Corrected now."],"labels":["actionpack","actionview"]},{"title":"form_helper documentation using article instead of post [ci skip]","body":"### Motivation \/ Background\r\n\r\nThis Pull Request has been created because it will make the form_with documentation clearer.\r\n\r\n### Detail\r\n\r\nDocumentation previously uses post which is confusing as the methods\/verb is also post.\r\n\r\nBefore\r\n`<form action=\"\/posts\" method=\"post\">`\r\n\r\nAfter\r\n`<form action=\"\/articles\" method=\"post\">`\r\n\r\n### Method\r\n\r\nWorked through a new Rails app with scaffold of article and checking the output of the HTML. Other HTML changes make it more authentic:\r\n- \/> => at the end of the input\r\n- value attribute before name attribute\r\n\r\n\"is then equivalent to something like\" => \"is then equivalent to\"\r\n- I checked they were the same output - \"equivalent\" gives some leeway so I made it more concise.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [X] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [X] Tests are added or updated if you fix a bug or add a feature.\r\n* [X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["actionview"]},{"title":"fix hex bit strings with leading zeroes in postgresql","body":"### Motivation \/ Background\r\n\r\nCurrently when casting a hex string argument for a PostgreSQL `bit` or `bit_varying` column, leading zeroes are discarded. This is unexpected, and differs from the behavior of binary strings.\r\n\r\n### Detail\r\n\r\nThis Pull Request ensures leading zeroes are preserved, e.g. assigning a bit string column \"0x5F\" results in the bit string \"01011111\" instead of \"1011111\" being sent to Postgres.\r\n\r\n### Additional information\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["hmm. that test doesn't fail locally and also doesn't depend on the Postgres ActiveRecord adapter afaict "],"labels":["activerecord"]},{"title":"Add ability to modify read timeout in runtime","body":" ### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nMany different factors can impact the database query execution time from an application's point of view, such as network latency, query execution plan, table data shape, and others. \r\n\r\nCurrently, the application can provide a \"hardcoded\" `read_timeout` value in the database.yml, which helps to cap the maximum time it will take to execute one query.\r\n\r\nHowever, it is not uncommon for a web request to have multiple query executions, and multiple slow queries can impact its response time. To mitigate the long response times, our application has a maximum allowed request time budget, which can be exhausted by multiple types of these issues. We would like to control the application wait time dynamically and gradually reduce that as the web request progresses. It will allow us to prevent a query from exhausting the request time budget.\r\n\r\n### Detail\r\n\r\nI added the ability to customize the database `read_timeout` property dynamically. It will receive the `read_timeout` as a value or a callable object, and a block. Any connection execution within that block will have the read_timeout replaced by the provided value. For example:\r\n\r\n```ruby\r\nActiveRecord::Base.with_custom_conn_properties(read_timeout: 1) do\r\n  ...\r\n  Model.where(...).to_a # The read_timeout will be set to 1s\r\n  ...\r\nend\r\n```\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, references to other repositories, or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [ ] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Add `ActiveRecord::Relation#readonly?`","body":"Indicates whether a relation was marked readonly.\r\n\r\n### Motivation \/ Background\r\n\r\nThere's currently no documented API to check if a relation is readonly. Workarounds include loading the records and checking those for `readonly?` or using accessing the undocumented `readonly_value`.\r\n\r\nA Relation could be marked readonly and used as an indication to what should be rendered. This change makes that use case simpler.\r\n\r\n### Detail\r\n\r\nAdds `ActiveRecord::Relation#readonly?` which behaves the same as `ActiveRecord::Base#readonly?` for the contained records.\r\n\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [ x Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.","comments":[],"labels":["activerecord"]},{"title":"Update oracle connection name to match adapter in tests","body":"\r\n<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), the motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request has been created to enable running the activerecord test suite with the oracle-enhanced adapter post activerecord 7.1.0\r\n\r\n### Detail\r\n\r\nhttps:\/\/github.com\/rails\/rails\/pull\/48015 (specifically 7572a13af6444abf51720051c6a93d72a7aead0e) adds a check to ensure the connection name matches the adapter name for the test run. For oracle databases, the testing files call the connection `oracle`, but the adapter we use is `oracle_enhanced`, resulting in an error when the tests are run:\r\n\r\n```\r\nbundle exec rake test:oracle TEST=test\/cases\/base_test.rb\r\n\/usr\/local\/bin\/ruby -w -I\"lib:test\" \/usr\/local\/lib\/ruby\/gems\/3.2.0\/gems\/rake-13.0.6\/lib\/rake\/rake_test_loader.rb \"test\/cases\/base_test.rb\"\r\nUsing oracle\r\n\/app\/activerecord\/test\/support\/connection.rb:38:in `connect': The connection name did not match the adapter name. Connection name is 'oracle' and the adapter name is 'oracle_enhanced'. (ArgumentError)\r\n\r\n      raise ArgumentError, \"The connection name did not match the adapter name. Connection name is '#{connection_name}' and the adapter name is '#{arunit_adapter}'.\"\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\tfrom \/app\/activerecord\/test\/cases\/test_case.rb:248:in `<class:TestCase>'\r\n\tfrom \/app\/activerecord\/test\/cases\/test_case.rb:20:in `<module:ActiveRecord>'\r\n\tfrom \/app\/activerecord\/test\/cases\/test_case.rb:16:in `<top (required)>'\r\n\tfrom \/app\/activerecord\/test\/cases\/helper.rb:8:in `require'\r\n\tfrom \/app\/activerecord\/test\/cases\/helper.rb:8:in `<top (required)>'\r\n\tfrom \/app\/activerecord\/test\/cases\/base_test.rb:3:in `require'\r\n\tfrom \/app\/activerecord\/test\/cases\/base_test.rb:3:in `<top (required)>'\r\n\tfrom \/usr\/local\/lib\/ruby\/gems\/3.2.0\/gems\/rake-13.0.6\/lib\/rake\/rake_test_loader.rb:21:in `require'\r\n\tfrom \/usr\/local\/lib\/ruby\/gems\/3.2.0\/gems\/rake-13.0.6\/lib\/rake\/rake_test_loader.rb:21:in `block in <main>'\r\n\tfrom \/usr\/local\/lib\/ruby\/gems\/3.2.0\/gems\/rake-13.0.6\/lib\/rake\/rake_test_loader.rb:6:in `select'\r\n\tfrom \/usr\/local\/lib\/ruby\/gems\/3.2.0\/gems\/rake-13.0.6\/lib\/rake\/rake_test_loader.rb:6:in `<main>'\r\nrake aborted!\r\n```\r\n\r\nThis change updates the connection name to be `oracle_enhanced` so it matches the adapter. With these changes I can run\r\n```\r\nbundle exec rake test:oracle_enhanced TEST=test\/cases\/base_test.rb\r\n```\r\nwithout getting the connection name error.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, references to other repositories, or alternative solutions. -->\r\n\r\nI did not rename `activerecord\/test\/schema\/oracle_specific_schema.rb` because the config.example.yml has emulate_oracle_adapter set to true so `oracle_specific_schema` is still the name the LoadSchemaHelper looks for.\r\n\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Prevent autosave association with has_one defined on child class","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), the motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nAdjusts the logic in inverse_polymorphic_association_changed? to determine if a has_one association's polymorphic association should autosave the associated record for a type change.\r\n\r\nPreviously this would see the type as changed every time if the has_one is defined on a child class, since the polymorphic relationship saves the parent class as the *_type value. The new check resolves the correct class name to avoid these extra saves.\r\n\r\nFixes #51280\r\n\r\n### Detail\r\n\r\nAlso confirmed that the new test fails without the code change:\r\n\r\n```\r\nFailure:\r\nTestAutosaveAssociationOnAHasOneAssociation#test_should_not_saved_for_unchanged_sti_type_on_polymorphic_association [test\/cases\/autosave_association_test.rb:1652]:\r\nExpected: 2\r\n  Actual: 3\r\n\r\n\r\nbin\/rails test test\/cases\/autosave_association_test.rb:1620\r\n```\r\n\r\n### Additional information\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Address `RendererTest#test_rendering_with_a_class_renderer` failure against Ruby 3.4.0dev","body":"### Motivation \/ Background\r\nThis pull request addresses the following Rails Nightly CI error since https:\/\/github.com\/ruby\/ruby\/pull\/10262 has been merged to Ruby master branch. https:\/\/buildkite.com\/rails\/rails-nightly\/builds\/310#018e5929-ff70-4397-b978-9a0a03cd4706\/1255-1265\r\n\r\n### Detail\r\n- Without this commit:\r\n```ruby\r\n$ ruby -v\r\nruby 3.4.0dev (2024-03-19T08:26:49Z master 12be40ae6b) [x86_64-linux]\r\n$ cd actionpack\r\n$ RAILS_STRICT_WARNINGS=true bin\/test test\/controller\/renderer_test.rb:37\r\nRunning 25 tests in a single process (parallelization threshold is 50)\r\nRun options: --seed 14013\r\n\r\n\/home\/yahonda\/src\/github.com\/rails\/rails\/actionpack\/test\/fixtures\/ruby_template.ruby:2: warning: literal string will be frozen in the future\r\nE\r\n\r\nError:\r\nRendererTest#test_rendering_with_a_class_renderer:\r\nRuntimeError: Neutered Exception ActionView::Template::Error: \/home\/yahonda\/src\/github.com\/rails\/rails\/actionpack\/test\/fixtures\/ruby_template.ruby:2: warning: literal string will be frozen in the future\r\n\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/testing\/strict_warnings.rb:33:in 'ActiveSupport::RaiseWarnings#warn'\r\n    test\/fixtures\/ruby_template.ruby:2:in '_home_yahonda_src_github_com_rails_rails_actionpack_test_fixtures_ruby_template_ruby__3648742137162546161_6360'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/base.rb:282:in 'Kernel#public_send'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/base.rb:282:in 'ActionView::Base#_run'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/template.rb:275:in 'block in ActionView::Template#render'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/notifications.rb:212:in 'ActiveSupport::Notifications.instrument'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/template.rb:567:in 'ActionView::Template#instrument_render_template'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/template.rb:263:in 'ActionView::Template#render'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/renderer\/template_renderer.rb:66:in 'block (2 levels) in ActionView::TemplateRenderer#render_template'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/notifications.rb:212:in 'ActiveSupport::Notifications.instrument'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/renderer\/template_renderer.rb:60:in 'block in ActionView::TemplateRenderer#render_template'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/renderer\/template_renderer.rb:80:in 'ActionView::TemplateRenderer#render_with_layout'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/renderer\/template_renderer.rb:59:in 'ActionView::TemplateRenderer#render_template'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/renderer\/template_renderer.rb:11:in 'ActionView::TemplateRenderer#render'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/renderer\/renderer.rb:58:in 'ActionView::Renderer#render_template_to_object'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/renderer\/renderer.rb:31:in 'ActionView::Renderer#render_to_object'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/rendering.rb:135:in 'block in ActionView::Rendering#_render_template'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/base.rb:309:in 'ActionView::Base#in_rendering_context'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/rendering.rb:134:in 'ActionView::Rendering#_render_template'\r\n    lib\/action_controller\/metal\/streaming.rb:258:in 'ActionController::Streaming#_render_template'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/rendering.rb:121:in 'ActionView::Rendering#render_to_body'\r\n    lib\/action_controller\/metal\/rendering.rb:186:in 'ActionController::Rendering#render_to_body'\r\n    lib\/action_controller\/metal\/renderers.rb:142:in 'ActionController::Renderers#render_to_body'\r\n    lib\/abstract_controller\/rendering.rb:47:in 'AbstractController::Rendering#render_to_string'\r\n    lib\/action_controller\/metal\/rendering.rb:175:in 'ActionController::Rendering#render_to_string'\r\n    lib\/action_controller\/renderer.rb:136:in 'ActionController::Renderer#render'\r\n    test\/controller\/renderer_test.rb:37:in 'block in <class:RendererTest>'\r\n\r\nbin\/test test\/controller\/renderer_test.rb:35\r\n\r\nFinished in 0.294798s, 3.3921 runs\/s, 0.0000 assertions\/s.\r\n1 runs, 0 assertions, 0 failures, 1 errors, 0 skips\r\n$\r\n```\r\n\r\n### Additional information\r\n\r\nRefer to these Ruby issue and pull request for this change: https:\/\/bugs.ruby-lang.org\/issues\/20205\r\nhttps:\/\/github.com\/ruby\/ruby\/pull\/10262\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["This one raises another warning \"warning: assigned but unused variable - body\". then I use Object#dup here.\r\n\r\n```diff\r\n$ git diff\r\ndiff --git a\/actionpack\/test\/fixtures\/ruby_template.ruby b\/actionpack\/test\/fixtures\/ruby_template.ruby\r\nindex 5097bce47c..611221416a 100644\r\n--- a\/actionpack\/test\/fixtures\/ruby_template.ruby\r\n+++ b\/actionpack\/test\/fixtures\/ruby_template.ruby\r\n@@ -1,2 +1 @@\r\n-body = \"\"\r\n-body << [\"Hello\", \"from\", \"Ruby\", \"code\"].join(\" \")\r\n+body = [\"Hello\", \"from\", \"Ruby\", \"code\"].join(\" \")\r\n```\r\n\r\n```ruby\r\n$ RAILS_STRICT_WARNINGS=true bin\/test test\/controller\/renderer_test.rb:37\r\nRunning 25 tests in a single process (parallelization threshold is 50)\r\nRun options: --seed 8705\r\n\r\n# Running:\r\n\r\n\/home\/yahonda\/src\/github.com\/rails\/rails\/actionpack\/test\/fixtures\/ruby_template.ruby:1: warning: assigned but unused variable - body\r\nE\r\n\r\nError:\r\nRendererTest#test_rendering_with_a_class_renderer:\r\nRuntimeError: Neutered Exception ActionView::Template::Error: \/home\/yahonda\/src\/github.com\/rails\/rails\/actionpack\/test\/fixtures\/ruby_template.ruby:1: warning: assigned but unused variable - body\r\n\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/testing\/strict_warnings.rb:33:in 'ActiveSupport::RaiseWarnings#warn'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/template.rb:489:in 'Module#module_eval'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/template.rb:489:in 'ActionView::Template#compile'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/template.rb:424:in 'block (2 levels) in ActionView::Template#compile!'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/notifications.rb:212:in 'ActiveSupport::Notifications.instrument'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/template.rb:563:in 'ActionView::Template#instrument'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/template.rb:423:in 'block in ActionView::Template#compile!'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/template.rb:415:in 'Thread::Mutex#synchronize'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/template.rb:415:in 'ActionView::Template#compile!'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/template.rb:264:in 'block in ActionView::Template#render'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/notifications.rb:212:in 'ActiveSupport::Notifications.instrument'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/template.rb:567:in 'ActionView::Template#instrument_render_template'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/template.rb:263:in 'ActionView::Template#render'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/renderer\/template_renderer.rb:66:in 'block (2 levels) in ActionView::TemplateRenderer#render_template'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/notifications.rb:212:in 'ActiveSupport::Notifications.instrument'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/renderer\/template_renderer.rb:60:in 'block in ActionView::TemplateRenderer#render_template'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/renderer\/template_renderer.rb:80:in 'ActionView::TemplateRenderer#render_with_layout'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/renderer\/template_renderer.rb:59:in 'ActionView::TemplateRenderer#render_template'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/renderer\/template_renderer.rb:11:in 'ActionView::TemplateRenderer#render'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/renderer\/renderer.rb:58:in 'ActionView::Renderer#render_template_to_object'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/renderer\/renderer.rb:31:in 'ActionView::Renderer#render_to_object'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/rendering.rb:135:in 'block in ActionView::Rendering#_render_template'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/base.rb:309:in 'ActionView::Base#in_rendering_context'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/rendering.rb:134:in 'ActionView::Rendering#_render_template'\r\n    lib\/action_controller\/metal\/streaming.rb:258:in 'ActionController::Streaming#_render_template'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/actionview\/lib\/action_view\/rendering.rb:121:in 'ActionView::Rendering#render_to_body'\r\n    lib\/action_controller\/metal\/rendering.rb:186:in 'ActionController::Rendering#render_to_body'\r\n    lib\/action_controller\/metal\/renderers.rb:142:in 'ActionController::Renderers#render_to_body'\r\n    lib\/abstract_controller\/rendering.rb:47:in 'AbstractController::Rendering#render_to_string'\r\n    lib\/action_controller\/metal\/rendering.rb:175:in 'ActionController::Rendering#render_to_string'\r\n    lib\/action_controller\/renderer.rb:136:in 'ActionController::Renderer#render'\r\n    test\/controller\/renderer_test.rb:37:in 'block in <class:RendererTest>'\r\n\r\n\r\nbin\/test test\/controller\/renderer_test.rb:35\r\n\r\n\r\n\r\nFinished in 0.268554s, 3.7236 runs\/s, 0.0000 assertions\/s.\r\n1 runs, 0 assertions, 0 failures, 1 errors, 0 skips\r\n$\r\n```"],"labels":["actionpack"]},{"title":"[ci skip] Document `ActiveSupport::Subscriber` in guides","body":"### Motivation \/ Background\r\n\r\n`ActiveSupport::Subscriber` provides a nice way to handle `ActiveSupport::Notifications::Event`. However, there is a lack of guide.\r\n\r\n### Detail\r\n\r\nDocument how to subscribe event of given namespace using `ActiveSupport::Subscriber`.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, references to other repositories, or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [X] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [X] Tests are added or updated if you fix a bug or add a feature.\r\n* [X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["docs"]},{"title":"Replace Order with Book in \"Creating Namespaced Models\" section of docs for consistency","body":"<!--\nThanks for contributing to Rails!\n\nPlease do not make *Draft* pull requests, as they still send\nnotifications to everyone watching the Rails repo.\n\nCreate a pull request when it is ready for review and feedback\nfrom the Rails team :).\n\nIf your pull request affects documentation or any non-code\nchanges, guidelines for those changes are [available\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\n\nAbout this template\n\nThe following template aims to help contributors write a good description for their pull requests.\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), the motivation behind the changes, and complete the checklist below before opening a pull request.\n\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\n\n### Motivation \/ Background\n\n\n<!--\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\n-->\n\nThis Pull Request has been created because the documentation is improved by consistently using the same model names throughout.\nhttps:\/\/github.com\/rails\/rails\/pull\/51226#discussion_r1527578109\n\n### Detail\n\nThis Pull Request changes the Active Record Basics Guide \"Creating Namespaced Models\" section to use Book instead of Order in the examples, consistent with the rest of the document.\n\n\n<!-- Provide additional information such as benchmarks, references to other repositories, or alternative solutions. -->\n\n### Checklist\n\nBefore submitting the PR make sure the following are checked:\n\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\n* [x] Tests are added or updated if you fix a bug or add a feature.\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\n","comments":[],"labels":["docs"]},{"title":"Add ability to prevent access to a database","body":"### Motivation \/ Background\r\n\r\nFrom discussion: https:\/\/discuss.rubyonrails.org\/t\/proposal-prevent-activerecord-access\/85322\r\n\r\n> I have some methods that I know are being called in loops and these methods will become N+1 DB query situations if a database query is generated in any way. What I\u2019m hoping for is some sort of runtime policy that says \u201cno ActiveRecord access is allowed in here, you must load everything you need first\u201d\r\n> \r\n> Here\u2019s another way to put it. If I have some business logic that combines data loading with some kind of pure calculation, it would be nice to have the power, when it is useful, to strongly separate these concerns and be sure the separation remains.\r\n> \r\n> This power could be useful for any situation where a hot code path must remain free of queries. Perhaps it could be used to implement a policy to prevent database access during the render phase of an HTTP request.\r\n\r\nN+1 queries can be a real performance concern. It isn't always immediately obvious what the impacts could be of adding a new query. I wish engineers would be constantly watching the query log as they work. But things can get out of hand quickly, and even if you are watching the wall of queries being logged, N+1s can sometimes disappear into the noise.\r\n\r\nAlso, there are times when I want a pure in-memory algorithm. An API like this would allow me to both express and enforce the intention to not be hitting the database in a branch of code.\r\n\r\nJust today, I was working with some code that broke a test that asserts for a given controller action, exactly 118 queries are dispatched. This is a terrible test to have, but we have it because we have had real problems with query explosions emerging unexpectedly. I believe strict loading could help, but it would not have prevented all of the problems that led to write and maintain this test.\r\n\r\nThis is indeed a heavy hammer to use. But I don't see an alternative that can achieve the same level of assurance, and the implementation was pretty easy thanks to the prior art of `while_preventing_writes`.\r\n\r\n### Detail\r\n\r\nThis Pull Request adds `while_preventing_access` to the public API of ActiveRecord::Base much like was done for `while_preventing_writes` in https:\/\/github.com\/rails\/rails\/pull\/34505\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, references to other repositories, or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["> An alternative option is to not lean on or change the `connected_to` API and make a new API for preventing access. I feel like preventing access is somewhat of a separate concern from multi-db connection management that requires `prevent_writes` to be a feature (we use it for connections to act like they are on a replica for dev\/test). So I could see this being an entirely separate API.\r\n\r\nThis was bugging me too and I think it's worth exploring. Currently `connected_to` calls `with_role_and_shard`, and then `append_to_connected_to_stack` and all of these seem to be tied into the multi-db connection connection management concern which does seem separate from preventing access. The connected_to_stack itself also seems tied to these concepts.\r\n\r\nUltimately, what do you think should be appended to that stack when we're preventing access?","@eileencodes I have prepared a new implementation of the same feature. The new implementation is now separate from the multi-connection handling concerns. It stores a value on the current thread as opposed to a specific connection using thread_mattr_accessor (thank you for [this suggestion](https:\/\/discuss.rubyonrails.org\/t\/proposal-prevent-activerecord-access\/85322\/6) e_a)."],"labels":["activerecord"]},{"title":"Add `config.active_record.permanent_connection_checkout` setting","body":"Ref: https:\/\/github.com\/rails\/rails\/pull\/50793\r\n\r\nControls whether `ActiveRecord::Base.connection` raises an error, emits a deprecation warning, or neither.\r\n\r\n`ActiveRecord::Base.connection` checkouts a database connection from the pool and keep it leased until the end of the request or job. This behavior can be undesirable in environments that use many more threads or fibers than there is available connections.\r\n\r\nThis configuration can be used to track down and eliminate code that calls `ActiveRecord::Base.connection` and migrate it to use `ActiveRecord::Base.with_connection` instead.\r\n\r\nThe default behavior remains unchanged, and there is currently no plans to change the default.\r\n\r\nOne thing that I think may be missing is a way to wrap legacy code with something akin to `.with_connection`, but that wouldn't cause `.connection` to persist the checkout. Perhaps that should be a `.with_connection` keyword argument?\r\n\r\n@matthewd any opinion on the above?","comments":["Also I still ned to eliminate the remaining `.lease_connection` calls inside Active Record.","> One thing that I think may be missing is a way to wrap legacy code with something akin to .with_connection, but that wouldn't cause .connection to persist the checkout. Perhaps that should be a .with_connection keyword argument?\r\n\r\nWould that then permit config-ignoring use of `connection` within that block?\r\n\r\nI guess the use case here is \"I'm calling a 3rd-party method that will use `connection`, but I promise the returned value doesn't escape past me\"?\r\n\r\n","> I guess the use case here is \"I'm calling a 3rd-party method that will use `connection`, but I promise the returned value doesn't escape past me\"?\r\n\r\nThat's the idea yes.","Alright, I added `def with_connection(prevent_permanent_checkout: true)` for that purpose.\r\n\r\n@matthewd if you have no objections or concerns I'll merge Monday."],"labels":["activerecord","docs"]},{"title":"`PessimisticLockingTest#test_no_locks_no_wait` gets `ERROR:  cached plan must not change result type`","body":"Managed to reproduce CI error.\r\nhttps:\/\/buildkite.com\/rails\/rails\/builds\/105748#018e558b-b895-43cc-aa80-71180e80d01b\/1235-1330\r\n\r\n### Steps to reproduce\r\n```ruby\r\ngit clone https:\/\/github.com\/rails\/rails\r\ncd rails\/activerecord\r\nbundle install\r\nbundle exec rake db:postgresql:rebuild\r\nARCONN=postgresql bin\/test test\/cases\/associations\/nested_through_associations_test.rb test\/cases\/connection_management_test.rb test\/cases\/migration_test.rb test\/cases\/locking_test.rb -n \"\/^(?:NestedThroughAssociationsTest#(?:test_has_many_through_with_foreign_key_option_on_through_reflection)|ActiveRecord::ConnectionAdapters::ConnectionManagementTest#(?:test_cancel_asynchronous_queries_if_an_exception_is_raised)|MigrationTest#(?:test_instance_based_migration_up)|PessimisticLockingTest#(?:test_no_locks_no_wait))$\/\" --seed 38135\r\n```\r\n\r\n### Expected behavior\r\nIt should pass.\r\n\r\n### Actual behavior\r\n`PessimisticLockingTest#test_no_locks_no_wait` gets `ERROR:  cached plan must not change result type`.\r\n\r\n```ruby\r\n$ ARCONN=postgresql bin\/test test\/cases\/associations\/nested_through_associations_test.rb test\/cases\/connection_management_test.rb test\/cases\/migration_test.rb test\/cases\/locking_test.rb -n \"\/^(?:NestedThroughAssociationsTest#(?:test_has_many_through_with_foreign_key_option_on_through_reflection)|ActiveRecord::ConnectionAdapters::ConnectionManagementTest#(?:test_cancel_asynchronous_queries_if_an_exception_is_raised)|MigrationTest#(?:test_instance_based_migration_up)|PessimisticLockingTest#(?:test_no_locks_no_wait))$\/\" --seed 38135\r\nUsing postgresql\r\nRun options: -n \"\/^(?:NestedThroughAssociationsTest#(?:test_has_many_through_with_foreign_key_option_on_through_reflection)|ActiveRecord::ConnectionAdapters::ConnectionManagementTest#(?:test_cancel_asynchronous_queries_if_an_exception_is_raised)|MigrationTest#(?:test_instance_based_migration_up)|PessimisticLockingTest#(?:test_no_locks_no_wait))$\/\" --seed 38135\r\n\r\n# Running:\r\n\r\n...#<Thread:0x000078a1a0d27b38 \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/test\/cases\/locking_test.rb:809 run> terminated with exception (report_on_exception is true):\r\n\/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:915:in `rescue in exec_cache': ERROR:  cached plan must not change result type (ActiveRecord::PreparedStatementCacheExpired)\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:893:in `exec_cache'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:865:in `execute_and_clear'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql\/database_statements.rb:66:in `internal_exec_query'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:630:in `select'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:71:in `select_all'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/query_cache.rb:222:in `select_all'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/querying.rb:62:in `_query_by_sql'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/querying.rb:51:in `find_by_sql'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/statement_cache.rb:150:in `execute'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/core.rb:434:in `cached_find_by'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/core.rb:255:in `find'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/test\/cases\/locking_test.rb:788:in `block in test_no_locks_no_wait'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/transaction.rb:536:in `block in within_new_transaction'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/transaction.rb:533:in `within_new_transaction'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:344:in `transaction'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/transactions.rb:223:in `block in transaction'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:387:in `with_connection'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_handling.rb:270:in `with_connection'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/transactions.rb:222:in `transaction'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/test\/cases\/locking_test.rb:812:in `block in duel'\r\n\/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:903:in `exec_prepared': PG::FeatureNotSupported: ERROR:  cached plan must not change result type (ActiveRecord::StatementInvalid)\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:903:in `block (2 levels) in exec_cache'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/notifications\/instrumenter.rb:58:in `instrument'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1112:in `log'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:902:in `block in exec_cache'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:997:in `block in with_raw_connection'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:969:in `with_raw_connection'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:898:in `exec_cache'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:865:in `execute_and_clear'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql\/database_statements.rb:66:in `internal_exec_query'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:630:in `select'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:71:in `select_all'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/query_cache.rb:222:in `select_all'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/querying.rb:62:in `_query_by_sql'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/querying.rb:51:in `find_by_sql'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/statement_cache.rb:150:in `execute'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/core.rb:434:in `cached_find_by'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/core.rb:255:in `find'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/test\/cases\/locking_test.rb:788:in `block in test_no_locks_no_wait'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/transaction.rb:536:in `block in within_new_transaction'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/transaction.rb:533:in `within_new_transaction'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:344:in `transaction'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/transactions.rb:223:in `block in transaction'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:387:in `with_connection'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_handling.rb:270:in `with_connection'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/transactions.rb:222:in `transaction'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/test\/cases\/locking_test.rb:812:in `block in duel'\r\n\/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:903:in `exec_prepared': ERROR:  cached plan must not change result type (PG::FeatureNotSupported)\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:903:in `block (2 levels) in exec_cache'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/notifications\/instrumenter.rb:58:in `instrument'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1112:in `log'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:902:in `block in exec_cache'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:997:in `block in with_raw_connection'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:969:in `with_raw_connection'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:898:in `exec_cache'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:865:in `execute_and_clear'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/postgresql\/database_statements.rb:66:in `internal_exec_query'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:630:in `select'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:71:in `select_all'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/query_cache.rb:222:in `select_all'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/querying.rb:62:in `_query_by_sql'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/querying.rb:51:in `find_by_sql'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/statement_cache.rb:150:in `execute'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/core.rb:434:in `cached_find_by'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/core.rb:255:in `find'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/test\/cases\/locking_test.rb:788:in `block in test_no_locks_no_wait'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/transaction.rb:536:in `block in within_new_transaction'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/transaction.rb:533:in `within_new_transaction'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:344:in `transaction'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/transactions.rb:223:in `block in transaction'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:387:in `with_connection'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_handling.rb:270:in `with_connection'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/transactions.rb:222:in `transaction'\r\n\tfrom \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/test\/cases\/locking_test.rb:812:in `block in duel'\r\nFound 1 leaked connections\r\nowner: #<Thread:0x000078a1a0d27ca0 \/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/test\/cases\/locking_test.rb:799 sleep>\r\nbacktrace:\r\n[\"\/home\/yahonda\/.rbenv\/versions\/3.3.0\/lib\/ruby\/gems\/3.3.0\/gems\/concurrent-ruby-1.2.2\/lib\/concurrent-ruby\/concurrent\/synchronization\/mutex_lockable_object.rb:53:in `sleep'\", \"\/home\/yahonda\/.rbenv\/versions\/3.3.0\/lib\/ruby\/gems\/3.3.0\/gems\/concurrent-ruby-1.2.2\/lib\/concurrent-ruby\/concurrent\/synchronization\/mutex_lockable_object.rb:53:in `wait'\", \"\/home\/yahonda\/.rbenv\/versions\/3.3.0\/lib\/ruby\/gems\/3.3.0\/gems\/concurrent-ruby-1.2.2\/lib\/concurrent-ruby\/concurrent\/synchronization\/mutex_lockable_object.rb:53:in `ns_wait'\", \"\/home\/yahonda\/.rbenv\/versions\/3.3.0\/lib\/ruby\/gems\/3.3.0\/gems\/concurrent-ruby-1.2.2\/lib\/concurrent-ruby\/concurrent\/synchronization\/abstract_lockable_object.rb:47:in `ns_wait_until'\", \"\/home\/yahonda\/.rbenv\/versions\/3.3.0\/lib\/ruby\/gems\/3.3.0\/gems\/concurrent-ruby-1.2.2\/lib\/concurrent-ruby\/concurrent\/atomic\/event.rb:87:in `block in wait'\", \"\/home\/yahonda\/.rbenv\/versions\/3.3.0\/lib\/ruby\/gems\/3.3.0\/gems\/concurrent-ruby-1.2.2\/lib\/concurrent-ruby\/concurrent\/synchronization\/mutex_lockable_object.rb:48:in `block in synchronize'\", \"\/home\/yahonda\/.rbenv\/versions\/3.3.0\/lib\/ruby\/gems\/3.3.0\/gems\/concurrent-ruby-1.2.2\/lib\/concurrent-ruby\/concurrent\/synchronization\/mutex_lockable_object.rb:48:in `synchronize'\", \"\/home\/yahonda\/.rbenv\/versions\/3.3.0\/lib\/ruby\/gems\/3.3.0\/gems\/concurrent-ruby-1.2.2\/lib\/concurrent-ruby\/concurrent\/synchronization\/mutex_lockable_object.rb:48:in `synchronize'\", \"\/home\/yahonda\/.rbenv\/versions\/3.3.0\/lib\/ruby\/gems\/3.3.0\/gems\/concurrent-ruby-1.2.2\/lib\/concurrent-ruby\/concurrent\/atomic\/event.rb:84:in `wait'\", \"\/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/test\/cases\/locking_test.rb:804:in `block (2 levels) in duel'\", \"\/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/transaction.rb:536:in `block in within_new_transaction'\", \"\/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\", \"\/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/transaction.rb:533:in `within_new_transaction'\", \"\/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:344:in `transaction'\", \"\/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/transactions.rb:223:in `block in transaction'\", \"\/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:387:in `with_connection'\", \"\/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/connection_handling.rb:270:in `with_connection'\", \"\/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/lib\/active_record\/transactions.rb:222:in `transaction'\", \"\/home\/yahonda\/src\/github.com\/rails\/rails\/activerecord\/test\/cases\/locking_test.rb:801:in `block in duel'\"]\r\n\r\nE\r\n\r\nError:\r\nPessimisticLockingTest#test_no_locks_no_wait:\r\nActiveRecord::PreparedStatementCacheExpired: ERROR:  cached plan must not change result type\r\n\r\n    lib\/active_record\/connection_adapters\/postgresql_adapter.rb:915:in `rescue in exec_cache'\r\n    lib\/active_record\/connection_adapters\/postgresql_adapter.rb:893:in `exec_cache'\r\n    lib\/active_record\/connection_adapters\/postgresql_adapter.rb:865:in `execute_and_clear'\r\n    lib\/active_record\/connection_adapters\/postgresql\/database_statements.rb:66:in `internal_exec_query'\r\n    lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:630:in `select'\r\n    lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:71:in `select_all'\r\n    lib\/active_record\/connection_adapters\/abstract\/query_cache.rb:222:in `select_all'\r\n    lib\/active_record\/querying.rb:62:in `_query_by_sql'\r\n    lib\/active_record\/querying.rb:51:in `find_by_sql'\r\n    lib\/active_record\/statement_cache.rb:150:in `execute'\r\n    lib\/active_record\/core.rb:434:in `cached_find_by'\r\n    lib\/active_record\/core.rb:255:in `find'\r\n    test\/cases\/locking_test.rb:788:in `block in test_no_locks_no_wait'\r\n    lib\/active_record\/connection_adapters\/abstract\/transaction.rb:536:in `block in within_new_transaction'\r\n    \/home\/yahonda\/src\/github.com\/rails\/rails\/activesupport\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n    lib\/active_record\/connection_adapters\/abstract\/transaction.rb:533:in `within_new_transaction'\r\n    lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:344:in `transaction'\r\n    lib\/active_record\/transactions.rb:223:in `block in transaction'\r\n    lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:387:in `with_connection'\r\n    lib\/active_record\/connection_handling.rb:270:in `with_connection'\r\n    lib\/active_record\/transactions.rb:222:in `transaction'\r\n    test\/cases\/locking_test.rb:812:in `block in duel'\r\n\r\nError:\r\nPessimisticLockingTest#test_no_locks_no_wait:\r\nRuntimeError: Found 1 leaked connection after PessimisticLockingTest#test_no_locks_no_wait\r\n    test\/cases\/test_case.rb:82:in `check_connection_leaks'\r\n    test\/cases\/test_case.rb:38:in `after_teardown'\r\n\r\n\r\nbin\/test test\/cases\/locking_test.rb:787\r\n\r\n\r\n\r\nFinished in 1.057243s, 3.7834 runs\/s, 10.4044 assertions\/s.\r\n4 runs, 11 assertions, 0 failures, 1 errors, 0 skips\r\n$\r\n```\r\n\r\n### System configuration\r\n**Rails version**: main branch\r\n\r\n**Ruby version**: ruby 3.3.0 (2023-12-25 revision 5124f9ac75) [x86_64-linux]\r\n","comments":[],"labels":["activerecord","PostgreSQL","ci issues"]},{"title":"add `file_exist?` method for ActiveStorage::Blob, ActiveStorage::Variant, ActiveStorage::VariantWithRecord","body":"\r\n\r\nIt's help to check if all it's ok on the service storage\r\n\r\n### Motivation \/ Background\r\n\r\nThis Pull Request has been created because we (@captive-studio) handle a large number of files using ActiveStorage in our application where these files are central to the business.\r\n\r\nFor some time now, we have noticed that certain variants are not being properly saved in the storage (specifically Google Cloud Storage). We want to rectify this situation by retrieving the variants for which the file does not exist in the storage.\r\n\r\n### Detail\r\n\r\nThis Pull Request changes add new `file_exist?` method for ActiveStorage::Blob, ActiveStorage::Variant, ActiveStorage::VariantWithRecord\r\n\r\nThis method will help to check if a file exist on the storage service\r\n\r\n### Additional information\r\n\r\n\/\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activestorage"]},{"title":"Enable query log tags by default on development env","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), the motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis can be used to trace troublesome SQL statements back to the application code that generated these statements. I feel like this is a good default value that helps with debugging and code discovery.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["@rafaelfranca thoughts? If this is approved, I will add tests and a CHANGELOG entry.","We already have another feature doing the same in development `verbose_query_logs` with this one pointing to the exact line of code that generated the query. Why do we need both?","@rafaelfranca `verbose_query_logs` might point to a model scope or method (that might be called inside a view), so it might not be evident which controller **or job** generated that query. It is also useful when using multiple databases because the query logs can identify which db is being used.","Sounds good let's get this finished up.\r\n\r\nAs a general direction, don't open draft PRs, they are just ignored, and I would actually go as far as automatically closing draft PRs. Either the PR is ready to be reviewed or send a message in the Rails forum. Our attention spam is very small, so if we see a draft PR we will just close the tab since it isn't ready and never come back.","@rafaelfranca Thanks for letting me know! I think this is finished now.\r\n\r\nSide note: should we add the guideline to not open draft PRs in the contributing docs?"],"labels":["railties","docs"]},{"title":".eager_load when selecting another column sets the ID incorrectly to a record being eager loaded.","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n    t.integer :first_comment_id\r\n    t.integer :last_comment_id\r\n  end\r\n\r\n  create_table :comments, force: true do |t|\r\n    t.integer :post_id\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  has_many :comments\r\n\r\n  belongs_to :first_comment, class_name: \"Comment\"\r\n  belongs_to :last_comment, class_name: \"Comment\"\r\n\r\n  scope :select_another_column, -> { select(\"*\").select(\"TIME('now') as now\") }\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  belongs_to :post\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_association_stuff\r\n    post = Post.create!\r\n    post.first_comment = Comment.create!\r\n    post.last_comment = Comment.create!\r\n\r\n    post.save!\r\n\r\n    post = Post.find(post.id)\r\n    post_with_eager_loads = Post.eager_load(:first_comment, :last_comment).select_another_column.find(post.id)\r\n\r\n    assert_equal post.id, post_with_eager_loads.id\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\nExpect that IDs are consistent when using .eager_load\r\n\r\n### Actual behavior\r\n<!-- Tell us what happens instead -->\r\nID gets set to one of the other tables joined in\r\n\r\n### System configuration\r\n**Rails version**: main\r\n\r\n**Ruby version**: 3.3.0\r\n","comments":["@PhilCoggins When using `select(\"*\")` in a joins query, SQL will select all columns from all tables involved in the join. This can lead to unexpected results, especially in cases where tables share column names (the `id` column, in this case). The ambiguity of identical column names can cause data from one table to overwrite data from another.\r\n\r\nA more precise way to handle this situation is to specify the table name in the query, using `select(\"posts.*\")`.\r\n\r\nChange `select(\"*\").select(\"TIME('now') as now\")` to `select(\"posts.*, TIME('now') as now\")` should solve the issue.\r\n"],"labels":["activerecord"]},{"title":"Allow one to set `strict_loading_mode` globally","body":"### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nI was reading through [this summary of Rails' strict loading](https:\/\/jordanhollinger.com\/2023\/11\/11\/rails-strict-loading\/) and came across this paragraph:\r\n\r\n> If you\u2019re very brave, you can opt your entire application into strict loading. (Oddly, there doesn\u2019t seem to be an equivalent of :n_plus_one_only here. I can\u2019t imagine using this.)\r\n\r\nIn my app, we're setting `strict_loading!(mode: :n_plus_one_only)` on individual records; this paragraph made me realize it didn't have to be this way.\r\n\r\nThis Pull Request has been created because currently, `strict_loading_mode` is always set to `:all`. It may be preferable for users to have `:n_plus_one_only` on an individual model, or even on the entire app.\r\n\r\n### Detail\r\n\r\nThis Pull Request adds a new class_attribute `:strict_loading_mode`, defaulted to `:all`.  If it's set to `:n_plus_one_only`, that mode is used by default when doing strict loading checks.\r\n\r\n### Additional information\r\n\r\nn\/a\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Unrelated changes should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["@carlosantoniodasilva Thanks for the quick review! I added `.vscode` to `.gitignore`; please let me know if that's acceptable, otherwise I'll revert that change. I also left a reply re: linting. \r\n","> I added .vscode to .gitignore; please let me know if that's acceptable\r\n\r\nPer the comment at the top of that file, it is not.","Made all the requested changes. I think the current CI failure is something flakey:\r\n\r\n```\r\nUsing trilogy\r\nrake aborted!\r\nActiveRecord::ConnectionNotEstablished: Connection refused - trilogy_connect - unable to connect to mysql:3306 (ActiveRecord::ConnectionNotEstablished)\r\n```\r\n\r\nI also can't see a way to restart the build, I guess because of admin permissions. "],"labels":["activerecord","docs"]},{"title":"Retry known idempotent SELECT queries on connection-related exceptions","body":"### Motivation \/ Background\r\n\r\nTake 2 of https:\/\/github.com\/rails\/rails\/pull\/51166, but rather than assuming that any SQL coming from the `#select` methods is safe to retry, we retry only queries we have constructed and thus know to be idempotent.\r\n\r\n### Detail\r\n\r\nThis PR makes two types of queries retry-able by opting into our `allow_retry` flag: \r\n1) SELECT queries we construct by walking the Arel tree via `#to_sql_and_binds`. We use a new `retryable` attribute on collector classes, which defaults to true for most node types, but will be set to false for non-idempotent node types (functions, SQL literals, update \/ delete \/ insert statements, etc). The `retryable` value is returned from  `#to_sql_and_binds` and used by `#select_all` and passed down the call stack, eventually reaching the adapter's `#internal_exec_query` method.\r\n\r\n2) `#find` and `#find_by` queries with known attributes. We set `allow_retry: true` in `#cached_find_by`, and pass this down to `#find_by_sql` and `#_query_by_sql`.\r\n\r\nThese changes ensure that queries we know are safe to retry can be retried automatically.\r\n\r\n### Additional information\r\n\r\nTo verify:\r\n- Is test coverage sufficient? It's tricky to test every possible Active Record API that could lead to a given SQL query. I've tried to cover the most commonly used ones. I was hoping to test that inserts \/ updates \/ deletes are non-retryable, but since these are wrapped in transactions, we end up reconnecting on the `BEGIN`.\r\n- Are there Arel node types I've missed that might be non-idempotent? Note that we're considering all `NamedFunction` and `SqlLiteral` nodes to be non-idempotent, which likely excludes a lot of potential queries that _would_ be retry-able, but this is the safest option for now.\r\n- Is `cached_find_by` always guaranteed to produce an idempotent query? This is the only way to ensure `Post.find` \/ `Post.find_by(title: \"foo\")` etc. are retryable, and I definitely think we should make these types of queries retryable. `find_by` with a SQL fragment supplied as args will be flagged as non-retryable.\r\n\r\ncc @matthewd \r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [X] Tests are added or updated if you fix a bug or add a feature.\r\n* [X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Test failures seem unrelated.","This looks fantastic, thank you!\r\n\r\nIt'd be nice to have some test coverage at the Arel level, where we could just focus on \"does visiting this node make us un-retryable?\", and consequently be exhaustive without all the work of actually constructing queries and observing real reconnect\/retries [in addition to having some of that full-stack coverage, as you do now]... but given we don't seem to have so-shaped tests for `prepareable`, maybe that's tricky to set up. (Read: if you can see a straightforward way of doing so, IMO it would be a nice-to-have... but if not, that's fine too.)\r\n\r\nI have read through `to_sql.rb` and don't see any other nodes that strike me as retry-relevant. I've also confirmed that none of the affected visit methods are overridden in the dialect-specific subclasses (cc @yahonda).\r\n\r\n`cached_find_by` should indeed be safe: it's only called in the most \"plain\" circumstances -- e.g. it's not used if there's a scope active on the class.\r\n\r\nI do hope that we can independently figure out anything that's making Trilogy connections more prone to errors that would benefit from retrying (#51335?) -- this improves our ability to retry when necessary, but that still feels more like an improved workaround than a proper solution to the problem you're describing in the changelog.\r\n\r\nScrolling through, I'm spotting a couple of places where `allow_retry` doesn't get passed straight along... for example, does the public `select_all` method need\/want to expose it at all? ","> Did you investigate how many queries Rails generates with SQLLiteral nodes that we know are retriable?\r\n\r\nI think there are a few places we internally use `Arel.sql`, where we'll want to follow up with either (ideally) a new purpose-specific Arel node, or otherwise may need to introduce an internal-only \"trust me\" variety of SqlLiteral.","> It'd be nice to have some test coverage at the Arel level,\r\n\r\nDone!\r\n\r\n> I do hope that we can independently figure out anything that's making Trilogy connections more prone to errors that would benefit from retrying\r\n\r\nAgree, this mitigates the issue slightly but is ultimately a bandaid solution. It seems like the root of the issue is that it's easy for Trilogy to end up with a closed connection -- when an error (e.g. timeout) is encountered, in the case of infra blips or deploys, etc. We've generally been seeing connection errors pop up in long running background jobs, where Rails' ability to reconnect between requests \/ units of work doesn't help us. Mysql2 had an auto reconnect feature (though this appears to be deprecated for MySQL 8?), which was possibly why this wasn't a problem for us before.\r\n\r\n> I think there are a few places we internally use Arel.sql, where we'll want to follow up with either (ideally) a new purpose-specific Arel node, or otherwise may need to introduce an internal-only \"trust me\" variety of SqlLiteral.\r\n\r\nAgree, I think a lot of the internal SQL literals that are generated can be marked as \"known idempotent\", but this likely requires introducing a new Arel node or a safe SQL literal variant. Still, I think a good portion of queries will benefit from the changes in this PR, so this feels like a good first step. We might also want to make updates \/ deletes retryable eventually..\r\n","Actually, let me whip up a safe-SqlLiteral variant as part of this PR. Should be straightforward.","Okay, I've added https:\/\/github.com\/rails\/rails\/pull\/51336\/commits\/f2a8bf9ca99beed344a31ac9f9fe53717412c660. If we're okay merging this as a first pass, we can expand what we consider to be safe in future PRs.","Test are failing","@matthewd thanks for flagging a couple codepaths where user-generated SQL could be passed through -- I've removed the retryable option from any such nodes. Let me know if you think this is missing anything else. "],"labels":["activerecord"]},{"title":"`ActiveRecord::Migration::check_all_pending!` resets connection pool when in use in other threads","body":"This might not be a bug per se, but is unexpected behaviour that was exposed in our specific use case.\r\n\r\n### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\n\r\nIn production, we have a bunch of custom internal health-checks exposed via a controller endpoint that are pinged every 20s or so, one of which is a check for pending migrations. Up until recently we were using `ActiveRecord::Migration::check_pending!` which took an optional connection argument and would use it to access the migration context (presumably releasing the connection back into the pool immediately after) to check for pending migrations.\r\n\r\nThis method [has been deprecated in favour of `check_all_pending!`](https:\/\/github.com\/rails\/rails\/commit\/03379d1f599653d100dff9fbf3ce4434a930b915) and [was recently removed on `main`](https:\/\/github.com\/rails\/rails\/commit\/02f66fe3e25cef2b0dec8bca26e777fe788af35c). To comply with this (since we run against Rails edge) we ended up replacing `check_pending!` with `check_all_pending!` (which doesn't take any arguments) in the respective health-check. After deploying this change we started seeing this error intermittently:\r\n\r\n```\r\nActiveRecord::ConnectionNotEstablished:  No connection pool for 'ActiveRecord::Base' found.\r\n```\r\n\r\nAfter some debugging we found that it was due to `check_all_pending!` [using a temporary pool under the hood](https:\/\/github.com\/rails\/rails\/blob\/0dc84e2e7d942dcaac3bd75414ae55bfad9bb18a\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb#L542-L549), meaning it would establish a new connection for its checks, then establish another one once done, resetting the connection pool object each time. This meant that other threads (we're currently running `puma` with `3` threads) that attempted to retrieve the current (cached) pool during this time (to then retrieve a connection) would fail to find it and raise here:\r\nhttps:\/\/github.com\/rails\/rails\/blob\/0dc84e2e7d942dcaac3bd75414ae55bfad9bb18a\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/connection_handler.rb#L224\r\n\r\nWe've considered that maybe this specific health-check setup is a bit unconventional, but given that I can find [some public repos utilising this method the same way](https:\/\/github.com\/search?q=ActiveRecord%3A%3AMigration.check_all_pending%21+language%3ARuby&type=code&l=Ruby), I thought I'd open this up for discussion to see if there's any chance of changing \/ extending the implementation or even just warning against its use outside of something like a rake task so others don't run into a similar issue.\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# Ensure `ActiveRecord::Base.configurations.configs_for` returns a config for which a temporary pool is yielded.\r\nActiveRecord::Base.configurations = { development: { adapter: \"sqlite3\", database: \":memory:\" } }\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_connection_pool_does_not_reset\r\n    pool_before = ActiveRecord::Base.connection_pool\r\n\r\n    ActiveRecord::Migration.check_all_pending!\r\n\r\n    assert_equal pool_before.object_id, ActiveRecord::Base.connection_pool.object_id\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n<!-- Tell us what should happen -->\r\n\r\nConnection pool is not reset when checking for pending migrations with `check_all_pending!`.\r\n\r\n### Actual behavior\r\n<!-- Tell us what happens instead -->\r\n\r\nConnection pool is reset when checking for pending migrations with `check_all_pending!`.\r\n\r\n### System configuration\r\n**Rails version**: Edge\r\n\r\n**Ruby version**: 3.2.2","comments":["I'm not sure what to do here, we need to establish connections to be able to use this for multiple databases. I introduced the temporary connection because there's a future world where we don't clobber `Base` connections, although we're not there yet. Even if we got rid of the temporary pool, the problem would still exist in order to use this to work for multiple databases. I guess we could reintroduce check pending on just the default Base connection, but that feels confusing.\r\n\r\nI'm curious though, why is check pending migrations part of health checks in production? This feels like the wrong mechanism for making sure migrations were run on all the database servers.","> I'm not sure what to do here, we need to establish connections to be able to use this for multiple databases. I introduced the temporary connection because there's a future world where we don't clobber `Base` connections, although we're not there yet. Even if we got rid of the temporary pool, the problem would still exist in order to use this to work for multiple databases. I guess we could reintroduce check pending on just the default Base connection, but that feels confusing.\r\n\r\nThat's fair. Sounds like this was just never intended to be used the way we did. Do you think a warning of sorts in the docs would be useful to other users?\r\n\r\n> I'm curious though, why is check pending migrations part of health checks in production? This feels like the wrong mechanism for making sure migrations were run on all the database servers.\r\n\r\nHah, great question. It's a \"this was set up a long time ago and never revisited until now\" kind of thing. We're currently in the process of removing it as it turns out we already have a duplicate pre-deployment health-check that does the same thing. So this won't really affect us going forward, I only opened this to explore the possibility of an alternative implementation."],"labels":["activerecord"]},{"title":"Fix a crash when an  Executor wrapped fork exit.","body":"Fix #51298\r\n\r\nforking inside an Execution Wrapper crashes when running the completion callbacks.\r\n\r\nRails 7.0 was not Execution wrapping the `runner` command. \r\nRails 7.2 changed the definition of `active_connection?`, the new definition doesn't contain the bug. \r\n\r\nTherefore forking inside a script intended to be run with the `runner` command on 7.1 crashes. (see #51298)\r\n\r\nThis PR is targeting `7-1-stable`\n\nEdit: The regression test (with the fork) blew up the tests. I removed it, I'll revisit. \r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["I'm not sure this is the correct solution. The issue is the `ConnectionPool` gets `discard!`ed on `fork` here:\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/e58d59ce489f7b7c48c0ace1b9d2ac03cb458258\/activerecord\/lib\/active_record\/connection_adapters\/pool_config.rb#L82\r\n\r\nand based on this comment\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/e58d59ce489f7b7c48c0ace1b9d2ac03cb458258\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb#L284-L286\r\n\r\nyou really shouldn't be calling any methods on the `ConnectionPool` after calling `discard!`. So I think a proper fix would be checking for `discarded?` before whatever (the `Executor`?) is trying to interact with a discarded pool.\r\n\r\n","@skipkayhil I was trying to catch all uses of `active_connection?` in case there was more Executor hooks after this one, but you are right, as you pointed out, the `QueryCache` should not rely on the discarded pool not blowing up as this is explicitly undefined.\r\n\r\nI added a check for the status of the pool inside of `QueryCache` instead. What do you think? \r\n"],"labels":["activerecord"]},{"title":"[ci skip] Undocumented - validations enabled by autosave","body":"### Motivation \/ Background\r\n\r\nFixes #50807\r\n\r\nAs described in Issue #50807,  validations are enabled by default when the autosave option is set to true. Currently, that behavior is not documented for the `has_one` or `belongs_to` associations.   \r\n\r\n### Detail\r\n\r\nTo resolve this issue, the  API documentation has been updated to document the validation behavior when the `autosave: true` option is set in `Activerecord::Associations` for the `has_one` or `belongs_to` associations.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Do not use the alpha version if the major version is released","body":"This PR changes the active storage dependency version for action text. \r\n","comments":[],"labels":["actiontext"]},{"title":"Model.insert_all can accept an array of records with separate column names","body":"### Motivation \/ Background\r\n\r\nExpanding the `Model.insert_all` functionality to receive an array containing records and column names separately. This improvement eliminates the need for records to be in the hash format, providing a more streamlined approach, especially useful for handling large datasets when both the order of attributes and their alignment with the table structure are known in advance.\r\n\r\n```ruby\r\ncolumn_names = [:name, :author_id]\r\nbook_batches.each do |book_batch|\r\n\tBook.insert_all(book_batch, column_names: column_names)\r\nend\r\n```\r\n\r\nThis update enables users to provide an array of arrays for the records, while also specifying the column names separately. This enhancement enhances code flexibility and readability, simplifying data insertion without requiring pre-formatting into hashes.\r\n\r\n### Detail\r\n\r\n- Modified insert_all method to accept an array of arrays for records.\r\n- Added support for specifying column names separately using the columns option.\r\n\r\n```ruby\r\nBook.insert_all([\r\n  [\"Rework\", 1],\r\n  [\"Patterns of Enterprise Application Architecture\", 1]\r\n], column_names: [:name, :author_id])\r\n```\r\n\r\nTo showcase the API proposal, I opted for the simplest approach, which involved converting the array of records and column names into a Hash, as it aligns with the existing code.","comments":[],"labels":["activerecord"]},{"title":"Add and document ActionText without_layout reader and writer attributes","body":"If a site follows an `ActionText` editing form with a preview form prior to record creation, the natural way to set the editor content in the preview form is something like:\r\n\r\n`<%= hidden_field :message, :content %>`\r\n\r\nThis however does a `to_s`, which includes the content with the \"trix-content\" div layout wrapping. This wrapping gets saved, and the final rendering with layout has a double wrapping.\r\n\r\nA solution is to instead use\r\n\r\n`<%= hidden_field_tag 'message[content]', @message.content.to_trix_html %>`\r\n\r\nbut a cleaner solution would be to provide a non-wrapped accessor like\r\n\r\n`<%= hidden_field :message, :content_without_layout %>`\r\n\r\nThis PR does this. It also fixes the incorrect documentation of `has_rich_text` that [shows `to_s` as producing HTML without layout](https:\/\/github.com\/rails\/rails\/blob\/main\/actiontext\/lib\/action_text\/attribute.rb#L20), documents the `without_layout` variant, and adds a sentence suggesting when each should be used.","comments":[],"labels":["actiontext"]},{"title":"Fix exception raised from template should not show compiled code","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nFixes #51090 \r\n\r\nThis Pull Request has been created to fix exceptions raised from template shows the compiled code.\r\n\r\n### Detail\r\n\r\nThis Pull Request changes `activesupport\/lib\/active_support\/core_ext\/erb\/util.rb`\r\n\r\n### Additional information\r\n1. In this tokenize method we are not handling the text present after `%>` \r\n2. Updated that method to handle text present at end.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["cc: @rafaelfranca "],"labels":["activesupport"]},{"title":"Add composite key support to `Model.exists?`","body":"Fix #51295\r\n\r\n`.exists?` does not support composite primary key because it would [clash with the current expectation when passing an array.](https:\/\/github.com\/rails\/rails\/blob\/main\/activerecord\/lib\/active_record\/relation\/finder_methods.rb#L351)\r\n\r\nThis PR would make it possible to pass a composite primary key by wrapping it in an array:\r\n\r\n```ruby\r\nCpkModel.exists?([[1,1]]) # as in `CpkModel.exists?([composite_primary_key])`\r\n```\r\n\r\nIncidentally, it would also allow searching with multiple keys without having to use the hash form:\r\n\r\n```ruby\r\nCpkModel.exists?([[1,1], [1,2], [3,1]])  \r\nRegularModel.exists?([[1,2,3]]) # Even works for non regular models! Generates: `SELECT 1 AS one FROM \"regular_models\" WHERE \"users\".\"id\" IN (1, 2, 3)`\r\n``` \r\n\r\n\r\n## Considerations\r\n\r\nThis is a bit of hack and initially thought of answering #51295 by suggesting using the hash form instead, but after looking at what the hash form would look like for a primary key:\r\n\r\n```ruby\r\nCpkModel.exists?(CpkModel.primary_key => [[1,1]]) # You need to wrap the primary key in an array!\r\n```\r\nThis is quite verbose. So perhaps there is value in this.\r\nI did not edit the documentation and changelog yet. Only the code, plus a couple tests. If this diff is deemed valuable I'll add the required edits.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Can't use Model.exists? with composite primary keys","body":"### Steps to reproduce\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire 'bundler\/inline'\r\n\r\ngemfile(true) do\r\n  source 'https:\/\/rubygems.org'\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem 'rails'\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem 'sqlite3'\r\nend\r\n\r\nrequire 'active_record'\r\nrequire 'minitest\/autorun'\r\nrequire 'logger'\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true, primary_key: %i[user_id account_id] do |t|\r\n    t.integer 'user_id', null: false\r\n    t.integer 'account_id', null: false\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_association_stuff\r\n    Post.create!(user_id: 1, account_id: 1)\r\n\r\n    assert_equal [1, 1], Post.find([1, 1]).id\r\n    assert_equal true, Post.exists?([1, 1])\r\n  end\r\nend\r\n\r\n```\r\n\r\n### Expected behavior\r\n```exists?``` should return a boolean if a given row exist for this primary key, like it does for not composite keys.\r\n\r\n### Actual behavior\r\n```\r\nNoMethodError: undefined method `include?' for 1:Integer\r\n\r\n        elsif statement.include?(\"?\")\r\n                       ^^^^^^^^^\r\n    \/home\/pate\/.rvm\/gems\/ruby-3.1.2\/gems\/activerecord-7.1.3.2\/lib\/active_record\/sanitization.rb:167:in `sanitize_sql_array'\r\n    \/home\/pate\/.rvm\/gems\/ruby-3.1.2\/gems\/activerecord-7.1.3.2\/lib\/active_record\/sanitization.rb:37:in `sanitize_sql_for_conditions'\r\n    \/home\/pate\/.rvm\/gems\/ruby-3.1.2\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation\/query_methods.rb:1513:in `build_where_clause'\r\n    \/home\/pate\/.rvm\/gems\/ruby-3.1.2\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation\/query_methods.rb:943:in `where!'\r\n    \/home\/pate\/.rvm\/gems\/ruby-3.1.2\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation\/finder_methods.rb:437:in `construct_relation_for_exists'\r\n    \/home\/pate\/.rvm\/gems\/ruby-3.1.2\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation\/finder_methods.rb:366:in `exists?'\r\n    \/home\/pate\/.rvm\/gems\/ruby-3.1.2\/gems\/activerecord-7.1.3.2\/lib\/active_record\/querying.rb:23:in `exists?'\r\n    bug_report.rb:40:in `test_association_stuff'\r\n```\r\n\r\n### System configuration\r\n**Rails version**:  7.1.3.2\r\n\r\n**Ruby version**: 3.1\r\n","comments":["I've submitted a [PR](https:\/\/github.com\/rails\/rails\/pull\/51301) that could address this, It might not get accepted as [this clash with the existing api](https:\/\/github.com\/rails\/rails\/blob\/main\/activerecord\/lib\/active_record\/relation\/finder_methods.rb#L351), so I would not wait on it. \r\n\r\nAlternatively you could use the hash form. It's not super pretty, but it would work:\r\n\r\n```ruby\r\nPost.exists?(Post.primary_key => [[1, 1]])\r\n```\r\n"],"labels":["activerecord","attached PR"]},{"title":"Empty embeds when RichText is set to an empty content","body":"Fix #51269\r\n\r\nAction Text supports saving a RichText model with empty content. Passing _almost_ empty content (such as a space) flushes the embeds, but passing truly empty content does not. This defies expectations.\r\n\r\nThis change ensures that the embeds are flushed when empty content is passed\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[">  but not when nil is passed (for example, when omitted from a form).\r\n\r\nMy expected path to update from a form is:\r\n- Load the model (including any authorization checks)\r\n- Grab the params\r\n- Update the form possibly with `#update_attributes`\r\n\r\nIn that path if the ActionText field is not submitted with the form then the model value will not be set to nil, it just won't be changed.\r\n\r\nHowever if I did ever explicitly set the field to nil then I would expect embedded files to be removed.  ","@jeropaul I agree. I would also expect the embeds to be flushed if I set the field to nil explicitely.\r\nI was wary of allowing nil, because of the existing checks, but turns out, it's not really a problem.  \r\n\r\n"],"labels":["actiontext"]},{"title":"Using preload with composite keys can cause too many records to be read","body":"### Steps to reproduce\r\n\r\nUsing `preload` with composite keys can cause more records to be read than are required - consider this test case:\r\n\r\n```ruby\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  gem \"activerecord\", \"7.1.3.2\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :nodes, primary_key: [:node_id, :node_version] do |t|\r\n    t.integer :node_id\r\n    t.integer :node_version\r\n  end\r\n\r\n  create_table :node_tags, primary_key: [:node_id, :node_version, :k], force: true do |t|\r\n    t.integer :node_id\r\n    t.integer :node_version\r\n    t.text :k\r\n  end\r\nend\r\n\r\nclass Node < ActiveRecord::Base\r\n  has_many :tags, class_name: \"NodeTag\", query_constraints: [:node_id, :node_version], :inverse_of => :node\r\nend\r\n\r\nclass NodeTag < ActiveRecord::Base\r\n  belongs_to :node, query_constraints: [:node_id, :node_version], :inverse_of => :tags\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_preload\r\n    node = Node.create(id: [1, 1])\r\n    node.tags.create(k: \"a\")\r\n    node.tags.create(k: \"b\")\r\n    node = Node.create(id: [1, 2])\r\n    node.tags.create(k: \"c\")\r\n    node.tags.create(k: \"d\")\r\n    node = Node.create(id: [2, 1])\r\n    node.tags.create(k: \"e\")\r\n    node.tags.create(k: \"f\")\r\n\r\n    nodes = Node.preload(:tags)\r\n              .where(node_id: 1, node_version: 2)\r\n              .or(Node.where(node_id: 2, node_version: 1))\r\n              .order(:node_id, :node_version)\r\n\r\n    assert_equal 2, nodes.size\r\n\r\n    nodes.each do |node|\r\n      assert_equal 2, node.tags.size\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThe assertions pass, but if you look at the logged SQL for the preload you see this:\r\n\r\n```sql\r\nSELECT \"node_tags\".*\r\nFROM \"node_tags\"\r\nWHERE \"node_tags\".\"node_id\" IN (?, ?) AND \"node_tags\".\"node_version\" IN (?, ?)\r\n```\r\n\r\nwhere the bound ID values are 1 and 2 as are the bound version values.\r\n\r\nSo not only will that read the tags for `[1, 2]` and `[2, 1]` as expected but it will also read the tags for `[1, 1]` which are not needed.\r\n\r\nThose records don't appear to get attached to any node so are presumably being discarded when the preload is matched to the original records.\r\n\r\n### Expected behavior\r\n\r\nThe required records are preloaded.\r\n\r\n### Actual behavior\r\n\r\nExtra records are preloaded.\r\n\r\n### System configuration\r\n\r\n**Rails version**: 7.1.3.2\r\n**Ruby version**: 3.2.2\r\n","comments":["A bit of context: https:\/\/github.com\/rails\/rails\/pull\/48947#issuecomment-1681439294\r\n\r\nThis worst case was anticipated but a decision was made to go with `IN` statement since it doesn't break the public API of  and most likely will benefit most commonly used schema designs. \r\n\r\n>presumably being discarded when the preload is matched to the original records.\r\n\r\nyep\r\n\r\nThe solution would either be to get back to `OR` statements or build a row constructor statements `(node_id, node_version) IN ((1,2), (2, 1))` but maybe a solution that would satisfy everyone would be for Rails to allow the behavior to be configured so applications can choose what works best for them depending on db schemas and databases they use","https:\/\/github.com\/rails\/rails\/pull\/48947#issuecomment-1681439294\r\n\r\n> Having said that, I still think that we will be making a reasonable tradeoff by choosing the IN statements version of the query over the OR statements since the reproduction script I'm using may not necessarily represent a schema design from a real-world application while a setup where composite primary key or query_constraints has a shape of <tenant_key>, <unique_identifier> represents a real-world applications which will not be impacted by the issue described in my comment and will only benefit from the proposed improvement.\r\n\r\nIf your composite key has a unique_identifier as its part, why do you need a composite key?",">why do you need a composite key?\r\n\r\nto change the way mysql stores data on the disk \r\nhttps:\/\/shopify.engineering\/how-to-introduce-composite-primary-keys-in-rails"],"labels":["activerecord"]},{"title":"Conditionally skip test job in ci.yml","body":"### Motivation \/ Background\r\n\r\nIt's common to build new apps with `--skip-test`. When this is done, CI will raise the following error:\r\n\r\n```ruby\r\nUnrecognized command \"test\" (Rails::Command::UnrecognizedCommandError)\r\n```\r\n\r\n### Detail\r\n\r\nSkips the `test` job when a new application is generated with the `--skip-test` option. \r\n\r\n### Additional information\r\n\r\nUses [prior art](https:\/\/github.com\/rails\/rails\/blob\/029d31ca31ab72df7bb79372f4ff057231fd0196\/railties\/lib\/rails\/generators\/rails\/plugin\/plugin_generator.rb#L270) to determine if `options[:skip_test]` was set.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["railties"]},{"title":"Expire caching when a download fail while proxying in ActiveStorage","body":"Fix #51284\r\n\r\nBoth Proxy controllers in Active Storage set the caching headers early before streaming. \r\n\r\nIn some instances (see #51284), it is possible for the file download (from the service to server) to fail before we send the first byte to the client (response not yet committed). \r\n\r\nIn those instances, this change would invalidate the cache and return a better response status before closing the stream.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activestorage"]},{"title":"Ensure image_processing is installed with Trix","body":"Currently if the Gemfile does not contain a commented out line for image_processing, or the line uses single, not double quotes, image_processing will not be installed and Trix will not be able to correctly handle image attachments.\r\n\r\nThis ensures image_processing _is_ installed in those circumstances.\r\n\r\n<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request has been created because it is possible for the `bin\/rails action_text:install` command to fail to add `image_processing` to the Gemfile if the default comment has been removed, or if the double quotes have been changed to single ones (perhaps by a Rubocop auto-fix).\r\n\r\n### Detail\r\n\r\nThis Pull Request changes the ActionText install script to more thoroughly ensure `image_processing` is installed.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Note the Buildkit failure seems unrelated to anything I\u2019ve done and I presume is an intermittent issue."],"labels":["actiontext"]},{"title":"ActiveStorage ProxyController sets Cache-Control headers on errors like FileNotFoundError","body":"### Steps to reproduce\r\nIve observed occasional broken **representation** images on our site. After digging a little into this issue it became clear that the proxy cache in front of our application has cached a broken image. A cache purge always fixed it. \r\n\r\nAfter digging a little deeper i think i found the source. The proxy cache is getting a `cache-control` header instructing it to do so by the ActiveStorage::Representations::ProxyController!\r\n\r\nIve created a synthetic test which reproduces it. The response is successful with zero length and cache-control header set. The following test falsely passed!\r\n\r\n```ruby\r\n    ActiveStorage::Service::DiskService.any_instance.expects(:download).raises(ActiveStorage::FileNotFoundError)\r\n    \r\n    get active_storage_image_url # \"\/rails\/active_storage\/representations\/proxy\/...\"\r\n\r\n    assert_response :ok\r\n    assert_equal 'image\/png', response.content_type\r\n    assert_equal \"0\", response.headers['Content-Length']\r\n    assert response.headers.key? 'ETag'\r\n    assert_equal \"max-age=3155695200, public\", response.headers['Cache-Control']\r\n```\r\n\r\n### Expected behavior\r\nOn an error like `ActiveStorage::FileNotFoundError` the response should not be successful nor should it instruct caches to cache that empty response.\r\n\r\n### Actual behavior\r\nOn an error like `ActiveStorage::FileNotFoundError` the response is still successful (Statuscode: 200) and a cache-control header is instructing caches to cache this empty response.\r\n\r\n### System configuration\r\n**Rails version**: 7.0.8\r\n\r\n**Ruby version**: 3.1.2\r\n","comments":["Here's a one file repro using the templates.\r\nThe test asserts for the incorrect behavior, I am not sure what the correct behavior should be. It probably should 404 or 500 with no caching.\r\n\r\nIt looks like it's affecting both `Representations::ProxyController` and `Blobs::ProxyController`. The following script tests against `Blobs::ProxyController`. \r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\/railtie\"\r\nrequire \"active_storage\/engine\"\r\nrequire \"tmpdir\"\r\n\r\ndb_file = Tempfile.new(\"sqlite\")\r\nENV[\"DATABASE_URL\"] ||= \"sqlite3:#{db_file.path}\"\r\n\r\nclass TestApp < Rails::Application\r\n  config.load_defaults Rails::VERSION::STRING.to_f\r\n\r\n  config.root = __dir__\r\n  config.hosts << \"example.org\"\r\n  config.eager_load = false\r\n  config.session_store :cookie_store, key: \"cookie_store_key\"\r\n  config.secret_key_base = \"secret_key_base\"\r\n\r\n  config.logger = Logger.new($stdout)\r\n  Rails.logger  = config.logger\r\n\r\n  config.active_storage.service = :local\r\n  config.active_storage.service_configurations = {\r\n    local: {\r\n      root: Dir.tmpdir,\r\n      service: \"Disk\"\r\n    }\r\n  }\r\nend\r\n\r\n\r\nRails.application.initialize!\r\n\r\nrequire ActiveStorage::Engine.root.join(\"db\/migrate\/20170806125915_create_active_storage_tables.rb\").to_s\r\n\r\nActiveRecord::Schema.define do\r\n  CreateActiveStorageTables.new.change\r\n\r\n  create_table :users, force: true\r\nend\r\n\r\nclass User < ActiveRecord::Base\r\n  has_one_attached :profile\r\nend\r\n\r\nrequire \"minitest\/autorun\"\r\n\r\nclass ActiveStorage::Service::DiskService\r\n  def download(key, &block)\r\n    raise ActiveStorage::FileNotFoundError.new \"File not yet uploaded!\"\r\n  end\r\nend\r\n\r\n\r\nclass BugTest < Minitest::Test\r\n  include Rack::Test::Methods\r\n  def test_upload_and_download\r\n    get Rails.application.routes.url_helpers.rails_storage_proxy_path(file, only_path: true)\r\n\r\n    assert last_response.ok?\r\n    assert_equal 'text\/plain', last_response.content_type\r\n    assert last_response.headers.key? 'ETag'\r\n    assert_equal \"max-age=3155695200, public\", last_response.headers['Cache-Control']\r\n    assert_equal 0,  last_response.body.size\r\n  end\r\n  private\r\n  def file\r\n    User.create!(\r\n      profile: {\r\n        content_type: \"text\/plain\",\r\n        filename: \"dummy.txt\",\r\n        io: ::StringIO.new(\"dummy\"),\r\n      }\r\n    ).profile\r\n  end\r\n\r\n  def app\r\n    Rails.application\r\n  end\r\nend\r\n```","I thought it would be an easy fix, but the headers are already streamed by the time we call to download. \r\nI'll take a deeper look soon\u2122.","Pushed a potential fix #51288"],"labels":["attached PR","activestorage"]},{"title":"Move callsite for to lease_connection in AR::Sanitization up to `sanitize_sql_array`","body":"After looking at ways to refactor calls to `lease_connection`, this tiny PR came up for `sanitize_sql_array`\r\ncc @byroot ","comments":["I think I'd rather see `sanitize_sql_array` call `with_connection` and pass it to the others.\r\n\r\nThis `sanitize_array` API is only there for backward compatibility anyway, `Relation#where` no longer use it."],"labels":["activerecord"]},{"title":"Transform attributes during `ActiveModel::Serialization::JSON#from_json`","body":"### Motivation \/ Background\r\n\r\nThe problem\r\n---\r\n\r\nLoading JSON into an Active Model instance with\r\n`ActiveModel::Serializers:JSON#from_json` assumes that the property casings will match the class attribute casings. This works well with snake_casing, since idiomatic Ruby methods are snake_cased.\r\n\r\nWhen `#from_json` loads JSON properties that are camelCased, it silently ignores them:\r\n\r\n```ruby\r\nclass Person\r\n  include ActiveModel::Serializers::JSON\r\n\r\n  attr_accessor :name, :born_on\r\n\r\n  def attributes=(hash)\r\n    hash.each { |key, value| send(\"#{key}=\", value) }\r\n  end\r\nend\r\n\r\npayload <<~JSON\r\n  { \"name\": \"Alice\", \"bornOn\": \"2024-03-08\" }\r\nJSON\r\n\r\nperson = Person.new.from_json(payload)\r\nperson.name     # => \"Alice\"\r\nperson.born_on  # => nil\r\n```\r\n\r\n### Detail\r\n\r\nThe proposal\r\n---\r\n\r\nThis commit proposes extending `#from_json` to accept a block. After the JSON string is decoded (and un-nested from its root, depending on the model's configuration), yield the `Hash` to a block if one is passed as an argument:\r\n\r\n```ruby\r\npayload <<~JSON\r\n  { \"name\": \"Alice\", \"bornOn\": \"2024-03-08\" }\r\nJSON\r\n\r\nperson = Person.new.from_json(payload) { _1.deep_transform_keys!(&:underscore) }\r\nperson.name     # => \"Alice\"\r\nperson.born_on  # => \"2024-03-08\"\r\n```\r\n\r\nSupporting a block can be useful for context-specific overrides. If a class needs to provide a default transformation, it can override `#from_json`:\r\n\r\n```ruby\r\nclass PersonFromCamelCaseAPI < Person\r\n  def from_json(*, &block)\r\n    default_transform = proc { _1.deep_transform_keys!(&:underscore) }\r\n\r\n    super(*, &(block || defaul_transform))\r\n  end\r\nend\r\n```\r\n\r\n### Additional information\r\n\r\nWithout built-in support for transforming camelCased properties into snake_cased attributes, callers are responsible decoding the JSON themselves. In addition to the key transformations, they're also responsible for re-creating both the JSON decoding *and* the configurable root un-nesting provided by `#from_json`:\r\n\r\n```ruby\r\npayload <<~JSON\r\n  { \"name\": \"Alice\", \"bornOn\": \"2024-03-08\" }\r\nJSON\r\n\r\nattributes = ActiveSupport::JSON.decode(payload)\r\nattributes.deep_transform_keys!(&:underscore)\r\nperson = Person.new(attributes)\r\nperson.name     # => \"Alice\"\r\nperson.born_on  # => \"2024-03-08\"\r\n\r\nnested_payload <<~JSON\r\n  { \"person\": { \"name\": \"Alice\", \"bornOn\": \"2024-03-08\" } }\r\nJSON\r\n\r\nattributes = ActiveSupport::JSON.decode(nested_payload)\r\nattributes.deep_transform_keys!(&:underscore)\r\nperson = Person.new(attributes[\"person\"])\r\nperson.name     # => \"Alice\"\r\nperson.born_on  # => \"2024-03-08\"\r\n```\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activemodel"]},{"title":"Fix redundant resource_route Invocations in scaffold generator","body":"### Motivation \/ Background\r\n\r\nThe rails generate scaffold command triggers the resource_route hook twice, although routes are not created twice because Thor only invokes the same task once.\r\n\r\n```\r\n% bin\/rails generate scaffold Post name:string\r\n      invoke  active_record\r\n      create    db\/migrate\/20240303140443_create_posts.rb\r\n      create    app\/models\/post.rb\r\n      invoke    test_unit\r\n      create      test\/models\/post_test.rb\r\n      create      test\/fixtures\/posts.yml\r\n      invoke  resource_route\r\n       route    resources :posts\r\n      invoke  scaffold_controller\r\n      create    app\/controllers\/posts_controller.rb\r\n      invoke    erb\r\n      create      app\/views\/posts\r\n      create      app\/views\/posts\/index.html.erb\r\n      create      app\/views\/posts\/edit.html.erb\r\n      create      app\/views\/posts\/show.html.erb\r\n      create      app\/views\/posts\/new.html.erb\r\n      create      app\/views\/posts\/_form.html.erb\r\n      create      app\/views\/posts\/_post.html.erb\r\n      invoke    resource_route\r\n      invoke    test_unit\r\n      create      test\/controllers\/posts_controller_test.rb\r\n      create      test\/system\/posts_test.rb\r\n      invoke    helper\r\n      create      app\/helpers\/posts_helper.rb\r\n      invoke      test_unit\r\n      invoke    jbuilder\r\n      create      app\/views\/posts\/index.json.jbuilder\r\n      create      app\/views\/posts\/show.json.jbuilder\r\n      create      app\/views\/posts\/_post.json.jbuilder\r\n```\r\n\r\nDespite setting the --skip-routes option, which is a feature of the ScaffoldControllerGenerator designed to prevent route generation, the command still produces routes.\r\n\r\n```\r\n% bin\/rails g scaffold Post name:string --skip-routes\r\n      invoke  active_record\r\n      create    db\/migrate\/20240306035406_create_posts.rb\r\n      create    app\/models\/post.rb\r\n      invoke    test_unit\r\n      create      test\/models\/post_test.rb\r\n      create      test\/fixtures\/posts.yml\r\n      invoke  resource_route\r\n       route    resources :posts\r\n      invoke  scaffold_controller\r\n      create    app\/controllers\/posts_controller.rb\r\n      invoke    erb\r\n      create      app\/views\/posts\r\n      create      app\/views\/posts\/index.html.erb\r\n      create      app\/views\/posts\/edit.html.erb\r\n      create      app\/views\/posts\/show.html.erb\r\n      create      app\/views\/posts\/new.html.erb\r\n      create      app\/views\/posts\/_form.html.erb\r\n      create      app\/views\/posts\/_post.html.erb\r\n      invoke    resource_route\r\n      invoke    test_unit\r\n      create      test\/controllers\/posts_controller_test.rb\r\n      create      test\/system\/posts_test.rb\r\n      invoke    helper\r\n      create      app\/helpers\/posts_helper.rb\r\n      invoke      test_unit\r\n      invoke    jbuilder\r\n      create      app\/views\/posts\/index.json.jbuilder\r\n      create      app\/views\/posts\/show.json.jbuilder\r\n      create      app\/views\/posts\/_post.json.jbuilder\r\n```\r\n\r\n### Detail\r\nFollowing three parts of the code are related to multiple invocation of resource_route.\r\n\r\n- `hook_for :resource_route` within the ResourceGenerator, from which the ScaffoldGenerator inherits\r\n- `class_option :resource_route` in ScaffoldGenerator\r\n- `hook_for :resource_route` in ScaffoldControllerGenerator which is invoked by `hook_for :scaffold_controller` in ScaffoldGenerator\r\n\r\nThe resource_route hook within ScaffoldGenerator has been removed with remove_hook_for to ensure that the hook is called exclusively within the scaffold_controller hook.\r\nThe `class_option :resource_route, type: :boolean` has also been removed. Despite the removal of the resource_route hook in ScaffoldGenerator, invoking `class_option :resource_route` was still indirectly triggering resource_route.\r\nThis occurred due to a combination of the following reasons:\r\n\r\n- generator classes, which inherit from Thor::Group, execute all defined public instance methods upon command execution.\r\n- the hook_for method utilizes invoke_from_option, a method defined in Thor::Group to dynamically defines an invoke_from_option_* method at runtime, which persists even if remove_hook_for is called.\r\n  - https:\/\/github.com\/rails\/thor\/blob\/a43d92fad7ebd77d359b7b96eb3db8a73ef9057c\/lib\/thor\/group.rb#L124\r\n- the invoke_from_option_* method returns early when the option isn't available but `class_option :resource_route` in ScaffoldGeneratore makes the option available and Rails sets the resource_route option as default.\r\n  - https:\/\/github.com\/rails\/rails\/blob\/f7353283fd771e99b9675bcb9394e398964195f8\/railties\/lib\/rails\/generators.rb#L56\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["railties"]},{"title":"Kebabcase puma-dev configuration suggestion in bin\/seutp","body":"Following up on #51266. Trying to make sure the suggested `puma-dev` setup introduced in #51088 works out of the box.\r\n\r\nCreating a fresh app with `rails new --main AppName` (or any multi-word app name) will still give us the error message:\r\n\r\n![image](https:\/\/github.com\/rails\/rails\/assets\/986290\/7dd53909-8566-45ac-960c-84b58f3526a9)\r\n\r\nThis PR simply kebabcases the `puma-dev` symlink suggested in `bin\/setup`, making it work without additional configuration.","comments":[],"labels":["railties"]},{"title":"Add escape_html_entities option to JSON encoder","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request has been created because I sometimes want to override the global `Encoding.escape_html_entities_in_json` option for specific call sites.\r\n\r\nWhere I work, we tend to embed JSON in HTML, so the default html entity escaping is appreciated. But there are some cases where we'd like to turn it off.\r\n\r\n### Detail\r\n\r\nThis Pull Request changes ActiveSupport's JSON encoding code to accept an optional flag for whether or not to escape HTML entities (`escape_html_entities`). If not supplied, the existing global configuration flag will be used instead.\r\n\r\nThe idea is to make the following possible:\r\n\r\n```ruby\r\nclass MyController < ApplicationController\r\n  def index\r\n    render json: { some: '<data>' }, escape_html_entities: false\r\n  end\r\nend\r\n```\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\nSorry to show up with a code change out of the blue. I did a weird monkey patch like this in our codebase at work to solve a problem, and it seemed easy to upstream so I'm submitting this PR just in case. No hard feelings if it doesn't seem reasonable.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [ x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [ x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n\r\n","comments":[],"labels":["activesupport"]},{"title":"Enable Hash#compact_blank inside ActiveSupport::LogSubscriber","body":"### Motivation \/ Background\r\nUsing ActiveSupport::LogSubscriber#color inside a custom log subscriber causes NoMethodError.\r\n\r\n### Detail\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  gem \"activesupport\"\r\nend\r\n\r\nrequire \"active_support\"\r\n\r\nclass TestLogSubscriber < ActiveSupport::LogSubscriber\r\n  attach_to :test\r\n\r\n  def hi(event)\r\n    info(color(event.payload[:message], GREEN))\r\n  end\r\n\r\n  private\r\n    def log_exception(name, e)\r\n      super\r\n      raise e\r\n    end\r\nend\r\n\r\nActiveSupport::LogSubscriber.logger = ActiveSupport::Logger.new(STDOUT)\r\nActiveSupport::Notifications.instrument(\"hi.test\", message: \"Hello!\")\r\n```\r\n\r\n```\r\n\/rails\/activesupport\/lib\/active_support\/log_subscriber.rb:193:in `mode_from': undefined method `compact_blank' for an instance of Hash (NoMethodError)\r\n    \r\n      modes = MODES.values_at(*options.compact_blank.keys)\r\n                                      ^^^^^^^^^^^^^^\r\n```\r\n\r\n### Additional information\r\nI have encountered this while using kredis locally, like;\r\n\r\n```\r\n$ cd kredis\r\n$ bin\/console\r\nirb(main):001> Kredis.string \"mystring\"\r\nCould not log \"meta.kredis\" event. NoMethodError: undefined method `compact_blank' for an instance of Hash\r\n```\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activesupport"]},{"title":"ActionText::RichText attachments not cleaned up when content made empty","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\"\r\n\r\n  gem 'debug'\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\/railtie\"\r\nrequire \"active_storage\/engine\"\r\nrequire \"action_text\/engine\"\r\nrequire \"tmpdir\"\r\n\r\nclass TestApp < Rails::Application\r\n  config.load_defaults Rails::VERSION::STRING.to_f\r\n\r\n  config.root = __dir__\r\n  config.hosts << \"example.org\"\r\n  config.eager_load = false\r\n  config.session_store :cookie_store, key: \"cookie_store_key\"\r\n  config.secret_key_base = \"secret_key_base\"\r\n\r\n  config.logger = Logger.new($stdout)\r\n  Rails.logger  = config.logger\r\n\r\n  config.active_storage.service = :local\r\n  config.active_storage.service_configurations = {\r\n    local: {\r\n      root: Dir.tmpdir,\r\n      service: \"Disk\"\r\n    }\r\n  }\r\nend\r\n\r\nENV[\"DATABASE_URL\"] = \"sqlite3::memory:\"\r\n\r\nRails.application.initialize!\r\n\r\nrequire ActiveStorage::Engine.root.join(\"db\/migrate\/20170806125915_create_active_storage_tables.rb\").to_s\r\nrequire ActionText::Engine.root.join(\"db\/migrate\/20180528164100_create_action_text_tables.rb\").to_s\r\n\r\nActiveRecord::Schema.define do\r\n  CreateActiveStorageTables.new.change\r\n  CreateActionTextTables.new.change\r\n\r\n  create_table :users, force: true\r\nend\r\n\r\nclass User < ActiveRecord::Base\r\n  has_rich_text :description\r\nend\r\n\r\nrequire \"minitest\/autorun\"\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_rich_text_embed_behaviour\r\n    attached = ActiveStorage::Blob.create_and_upload!(\r\n      io: ::StringIO.new('dummy'),\r\n      filename: 'dummy.txt\"',\r\n      content_type: 'text\/plain',\r\n    )\r\n\r\n    user = User.create!(description: ActionText::Content.new(\"hello\").append_attachables(attached))\r\n\r\n    assert_equal 1, user.description.embeds.size\r\n\r\n    user.description = ActionText::Content.new('')\r\n\r\n    user.save\r\n\r\n    assert_empty user.description.embeds\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\nWhen the body of an ActionText::RichText object is set to the empty string.  I would expect attachments to be cleaned up.\r\n\r\n### Actual behavior\r\n\r\nActiveStorage attachments `ActionText::RichText.embeds` are retained until the body is modified to contain some data \r\n\r\n### System configuration\r\n**Rails version**: Rails 7.1.3.2 [source code is unchanged on mainline](https:\/\/github.com\/rails\/rails\/blob\/2fa3294618eba90e095020620ca9584190c2ec8e\/actiontext\/app\/models\/action_text\/rich_text.rb#L55) \r\n\r\n**Ruby version**: ruby 3.2.3\r\n","comments":["Opened a PR for a potential fix #51291"],"labels":["attached PR","actiontext"]},{"title":"Default Active Storage strict loading to strict_loading_by_default","body":"### Motivation \/ Background\r\n\r\nWhile Active Storage supports strict loading, it [defaults to false](https:\/\/github.com\/rails\/rails\/blob\/f7353283fd771e99b9675bcb9394e398964195f8\/activestorage\/lib\/active_storage\/attached\/model.rb#L106). This can be problematic in applications that enforce strict loading by default. It can be assumed that `strict_loading_by_default` includes Active Storage attachments, leading to n+1 issues.\r\n\r\n### Detail\r\n\r\nThis Pull Request changes the default of the `strict_loading` keyword parameter for `has_one_attached` and  `has_many_attached` to use the model's `strict_loading_by_default` to create a consistent developer experience.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activestorage"]},{"title":"Add support for pattern matching for parameters","body":"### Motivation \/ Background\r\n\r\nI have some RESTful endpoints where it makes sense to pattern match params to deal with different shape of incoming payloads, as illustrated in this endpoint:\r\n\r\n```ruby\r\ndef create\r\n  case params\r\n  in interview_time_availability: { interview_time_id:, person_id: }\r\n    @interview_time_availabilities.create! interview_time_id:, person_id:\r\n  in interview_time: { id: }\r\n    @students.each do |student|\r\n      student.interview_time_availabilities.create interview_time_id: id\r\n    end\r\n  end\r\n\r\n  redirect_to students_interview_time_availabilities_path\r\nend\r\n```\r\n\r\n### Detail\r\n\r\nThis PR adds a `deconstruct_keys(keys)` method on `StrongParameters` that called `to_unsafe_h` for pattern matching:\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [X] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Pattern matching for ActiveModel was [reverted](https:\/\/github.com\/rails\/rails\/pull\/45553#issuecomment-1179568855) because it wasn't clear what the API should be. I'm not sure if this applies to this PR as well.\r\n\r\nThe Rails PatternMatching gem has a slightly different implementation that makes sure only permitted params are deconstructed:\r\nhttps:\/\/github.com\/kddnewton\/rails-pattern_matching\/blob\/main\/lib\/rails\/pattern_matching.rb#L170-L219"],"labels":["actionpack"]},{"title":"ActiveRecord::Encryption is encrypting\/filtering other similar named attributes","body":"### Steps to reproduce\r\n\r\n- Create a model with similar named attributes\r\n```bash\r\n  bin\/rails g model User first_name last_name email other_first_name\r\n  bin\/rails db:migrate\r\n```\r\n- Encrypt one attribute\r\n```ruby\r\nUser.encrypts(:first_name)\r\n```\r\n\r\n- Initialize the model with both attributes\r\n```ruby\r\nuser = User.new(first_name: \"Hello\", last_name: \"World\", other_first_name: \"Hi\")\r\n\r\n# This outputs\r\n=> #<User:0x000000010c5ea648 id: nil, first_name: \"[FILTERED]\", last_name: \"World\", email: nil, other_first_name: \"[FILTERED]\", created_at: nil, updated_at: nil>\r\n\r\n# Encrypted attributes only has :first_name in the set\r\nUser.encrypted_attributes\r\n=> <Set: {:first_name}>\r\n```\r\n<img width=\"654\" alt=\"Screenshot 2024-03-05 at 7 21 18\u202fPM\" src=\"https:\/\/github.com\/rails\/rails\/assets\/27268721\/bbb18517-a068-4982-97ea-39cbd5f492a5\">\r\n\r\n### Expected behavior\r\n- `other_first_name` should not be [FILTERED]\r\n\r\n### Actual behavior\r\n- `other_first_name` is `[FILTERED]`\r\n\r\n### System configuration\r\n**Rails version**: `Edge`\r\n\r\n**Ruby version**: 3.2.2\r\n","comments":["This is not related to encryption, but rather parameter filtering, for example a new rails app `ssn` is part of the param filtering by default:\r\n```\r\n> Rails.application.config.filter_parameters\r\n=> [:passw, :secret, :token, :_key, :crypt, :salt, :certificate, :otp, :ssn]\r\n```\r\nCreate a model with ssn prefix\/suffix, the output is:\r\n\r\n```\r\n#<Staff:0x0000000109c79f48\r\n id: nil,\r\n first_name: \"tim\",\r\n ssn_name: \"[FILTERED]\",\r\n ssn: \"[FILTERED]\",\r\n other_ssn_name: \"[FILTERED]\",\r\n name_ssn: \"[FILTERED]\",\r\n created_at: nil,\r\n updated_at: nil>\r\n```","Did a little bit of debugging and it turns out something expected but really shouldn't be:\r\n\r\n```ruby\r\nparams = ActionController::Parameters.new(first_name: \"Hello\", other_first_name: \"Hello\", last_name: \"World\")\r\nparam_filter = ActiveSupport::ParameterFilter.new([:first_name])\r\n=> #<ActiveSupport::ParameterFilter:0x0000000107ae67a0 @blocks=nil, @deep_regexps=nil, @mask=\"[FILTERED]\", @no_filters=false, @regexps=[\/first_name\/i]>\r\n\r\n\r\n# #filter_param is filtering both first_name and other_first_name\r\nparam_filter.filter_param(\"first_name\", \"Value\")\r\n=> \"[FILTERED]\"\r\nparam_filter.filter_param(\"other_first_name\", \"Value\")\r\n=> \"[FILTERED]\"\r\nparam_filter.filter_param(\"last_name\", \"Value\")\r\n=> \"Value\"\r\n\r\n# #filter is filtering both first_name and other_first_name\r\nparam_filter.filter(params)\r\n=> #<ActionController::Parameters {\"first_name\"=>\"[FILTERED]\", \"other_first_name\"=>\"[FILTERED]\", \"last_name\"=>\"World\"} permitted: false>\r\n```\r\n\r\nThe reason why is simple:\r\n\r\n```ruby\r\n\/first_name\/i.match?(\"first_name\")\r\n=> true\r\n\/first_name\/i.match?(\"other_first_name\")\r\n=> true\r\n```","> ```\r\n> => [:passw, :secret, :token, :_key, :crypt, :salt, :certificate, :otp, :ssn]\r\n> ```\r\n\r\nI mean that's fine from ParamsFiltering concept and for explicitly provided `filter_parameters` values. But if we're encrypting attributes, we always would want exact text matches.\r\n\r\nI'd suggest we create `filter_exact_param` method which can be used instead of `filter_param` that does exact text matching for encrypted attributes.","I am also experiencing this with :email and :email_is_confirmed which is not in the ParamsFiltering "],"labels":["activesupport"]},{"title":"Raise on `in_batches` used on a relation with unpersisted records","body":"Prior https:\/\/github.com\/rails\/rails\/pull\/48876 using `in_batches` on a relation with unpersisted records would work but new records will not be included in the iteration. \r\n\r\nCurrently using `in_batches` on a loaded relation with unpersisted records will fail when we try to sort records by `id` as new records don't have `id` set and comparison with `nil` fails.\r\n\r\nSince both raising an ambiguous comparison error or implicitly skipping new records seem sub-option we are proposing to raise a clear error to let application explicitly decide whether it needs to iterate on a loaded relation in slices (i.e. `each_slice`) or explicitly drop \/ save the un-persisted record and continue using `in_batches` \r\n\r\ncc: @garyhtou ","comments":["Updated PR:\r\n\r\n- `record` instance is stored in the error instance\r\n- moved the check higher to avoid breaking where `start` or `finish` present\r\n- changes the error name and the message to point that we only care about presence of the cursor (primary key value) ","cc @rafaelfranca "],"labels":["activerecord"]},{"title":"QueryAttributes treated as strings in exec_query","body":"### Steps to reproduce\r\n\r\nI have a library [dynamic_records](https:\/\/github.com\/LukeClancy\/dynamic-records-meritfront) that uses exec_query alongside QueryAttributes to write sql. Recently I updated rails, pg and psql to a recent version and found that exec_query no longer works as expected.\r\n\r\nexec_query seems to be converting all parameters into strings. I do not believe this is expected functionality.\r\n\r\n```ruby\r\nvalue = 1\r\ntype = ActiveRecord::Type::Integer.new\r\nqa = ActiveRecord::Relation::QueryAttribute.new('int_input', value, type)\r\nx = ActiveRecord::Base.connection.exec_query(\"select $1\", 'query name', [qa])\r\nout_v = x.rows.first.first\r\n\r\nputs \"value: #{out_v.inspect}, class: #{out_v.class.to_s}\"\r\n```\r\n\r\n### Expected behavior\r\n\"value: 1, class: Integer\"\r\n\r\n### Actual behavior\r\n\"value \\\"1\\\", class: String\"\r\n\r\n### System configuration\r\nruby 3.2.2p53\r\nrails (7.1.3.2)\r\nactivemodel (= 7.1.3.2)\r\nactiverecord (= 7.1.3.2)\r\npg (1.5.6)\r\n\r\npsql (PostgreSQL) 16.2 (Ubuntu 16.2-1.pgdg22.04+1)","comments":["The tricky part here is that `QueryAttribute` seems to be `# :nodoc:` which most likely it was supposed to be private. So it may be hard to justify any changes as long as all of the public APIs that use `QueryAttribute` work as expected\r\n\r\nAny chance that we could come up with a reproduction using public APIs to reveal the issue? That would help tremendously to argue that this is indeed a bug ","I have reproduced the issue using find_by_sql. To my knowledge find_by_sql used to pass types to the database, but now seems to leave it for the database to \"deduce\" them from context.\r\n\r\n```\r\n#convert an integer to a string\r\nirb(main):006> User.find_by_sql(\"select $1 as x\", [1])\r\n  User Load (0.8ms)  select $1 as x  [[nil, 1]]\r\n=> [#<User x: \"1\", id: nil>]\r\n\r\n#pass the id as a string in a where statement (gets deduced as integer)\r\nirb(main):008> User.find_by_sql(\"select id from users where users.id = $1\", [\"1\"])\r\n  User Load (2.2ms)  select id from users where users.id = $1  [[nil, \"1\"]]\r\n=> [#<User id: 1>]\r\n\r\n#confuse the database by having it deduce string and integer from input. Raises  PG::AmbiguousParameter\r\nirb(main):009> User.find_by_sql(\"select id, $1 as r from users where users.id = $1\", [\"1\"])\r\n  User Load (0.8ms)  select id, $1 as r from users where users.id = $1  [[nil, \"1\"]]\r\n\/home\/luke\/.rbenv\/versions\/3.2.2\/lib\/ruby\/gems\/3.2.0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:894:in `exec_params':\r\nPG::AmbiguousParameter: ERROR:  inconsistent types deduced for parameter $1 (ActiveRecord::StatementInvalid)\r\nLINE 1: select id, $1 as r from users where users.id = $1\r\n                   ^\r\nDETAIL:  bigint versus text\r\n```\r\n\r\nThis could lead to many hard to find \/ track down bugs.","This example makes it clear that data types are not making it to the database at all","I don't think it even did. Can you provide a reproduction script with this template https:\/\/github.com\/rails\/rails\/blob\/main\/guides\/bug_report_templates\/active_record.rb that pass in any version of Rails without using private API?\r\n\r\nThat would help us to find which change broke this behavior.","[I created a gist for it](https:\/\/gist.github.com\/LukeClancy\/682fef41659f16790979a95e37555879). I tried on sqlite3, but it seemed to have different issues. For example Post.find_by_sql('select * from posts where id = ?', [\"3 bla bla bla\"]) did not throw an error (despite the id column being integers). I do not know enough about sqlite to call this a problem... but, seems iffy?\r\n\r\nSo the gist is using postgres"],"labels":["activerecord"]},{"title":"[Fix #50118] `:prepend` option not working with `run_after_transaction_callbacks_in_order_defined` config","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nFixes #50118.\r\n\r\n### Detail\r\n\r\nEnsures that the `:prepend` option for after transaction callbacks is respected when `config.run_after_transaction_callbacks_in_order_defined = true`. This allows prepending certain `after_commit` and `after_rollback` callbacks while still running the rest in the order defined on the model.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\nIn addition to the tests here there is also [this script](https:\/\/github.com\/rails\/rails\/issues\/50118#issuecomment-1975502684) which I tested against.\r\n\r\ncc @ghiculescu\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"[Fix #51242] Rework in_batches(use_ranges: true) to be more efficient","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\nTaken from: https:\/\/github.com\/rails\/rails\/issues\/51242\r\n\r\nIn ActiveRecord 7.1, a new option was added to [ActiveRecord::Batches#in_batches](https:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/Batches.html#method-i-in_batches), `use_ranges: true`, that enables a more efficient way to generate queries from the provided scope for each batch.\r\n\r\nThe resulting queries use ranges to select record ids, e.g. `WHERE id > 10000 AND id <= 20000` instead of passing a possibly very long list of ids in an `IN` clause, e.g. `IN (10000, 10001, [...,] 19999, 20000)`.\r\n\r\nThis option was implemented in https:\/\/github.com\/rails\/rails\/pull\/45414.\r\n\r\nThe implementation of `use_ranges: true` relies on the already implemented strategy to select all ids from the range (needed for `use_ranges: false`), when generating the scope for each batch.\r\n\r\nThe typical SQL query to generate a scope for a batch is (example with batches of 10k records):\r\n\r\n```sql\r\nSELECT \"users\".\"id\" FROM \"users\" WHERE \"users\".\"id\" > ... ORDER BY \"users\".\"id\" ASC LIMIT 10000;\r\n```\r\n\r\nBut subsequently, all these ids but the last one are discarded:\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/v7.1.3.2\/activerecord\/lib\/active_record\/relation\/batches.rb#L379-L380\r\n\r\n**This method wastes resources in the database (CPU, I\/O), in transit (bandwidth) and in the Ruby process (RAM).**\r\n\r\nThis Pull Request is a proposal to save these resources by implementing **an additional optimisation**.\r\n\r\n### Detail\r\n\r\nThe description below applies only to the use of `in_batches` **with** the option `use_ranges: true`.\r\n\r\nInstead of returning all the ids for each batch, we use `OFFSET` to search for the last id in the next batch and return just one id, e.g.\r\n\r\n```diff\r\n  -- queries for all batches but the last (before\/after)\r\n- SELECT \"users\".\"id\" FROM \"users\" WHERE \"users\".\"id\" > ... ORDER BY \"users\".\"id\" ASC LIMIT 10000;\r\n+ SELECT \"users\".\"id\" FROM \"users\" WHERE \"users\".\"id\" > ... ORDER BY \"users\".\"id\" ASC LIMIT 1 OFFSET 9999;\r\n```\r\n\r\nThere is one downside, however.\r\n\r\nOur `OFFSET`-based query won't be able to return the last id if the next batch is smaller than the limit or if there's no next batch. We always need one additional query to get the size and last id of the very last batch. We use the same query as before the optim for that purpose:\r\n\r\n```diff\r\n  -- queries for the last batch (before\/after)\r\n- SELECT \"users\".\"id\" FROM \"users\" WHERE \"users\".\"id\" > ... ORDER BY \"users\".\"id\" ASC LIMIT 10000;\r\n+ SELECT \"users\".\"id\" FROM \"users\" WHERE \"users\".\"id\" > ... ORDER BY \"users\".\"id\" ASC LIMIT 1 OFFSET 9999;\r\n+ SELECT \"users\".\"id\" FROM \"users\" WHERE \"users\".\"id\" > ... ORDER BY \"users\".\"id\" ASC LIMIT 10000;\r\n```\r\n\r\nUnless we only have a handful of small batches, this strategy is a winner overall, as it reduces the time and network resources spent generating batches, as shown by the benchmark below.\r\n\r\n### Additional information\r\n\r\n#### Benchmark\r\n\r\nLet's reuse the benchmark from the description of https:\/\/github.com\/rails\/rails\/pull\/45414, i.e. the same `users` table with `10M` records, but with two modifications:\r\n\r\n* Batches of 10k records instead of 1k;\r\n* No call to `batch.count` on each batch since we are measuring only on the time and resources needed to generate the scopes, not to use them.\r\n\r\nHere is the code used:\r\n\r\n```sql\r\nCREATE TABLE users (id bigserial PRIMARY KEY, val integer DEFAULT 0);\r\nINSERT INTO users SELECT i FROM generate_series(1, 10000000) AS i;\r\n```\r\n\r\n```ruby\r\nstart = Process.clock_gettime(Process::CLOCK_MONOTONIC)\r\n\r\ncount = 0\r\nUser.in_batches(of: 10_000) do |batch|\r\n  count += 1  # previously: batch.count, but we don't want to trigger any other queries in this benchmark\r\nend\r\n\r\nputs \"Count = #{count}\"\r\nelapsed = Process.clock_gettime(Process::CLOCK_MONOTONIC) - start\r\nputs \"Elapsed: #{elapsed}s\"\r\n```\r\n\r\nThe benchmark is executed on a single machine (a recent macbook), with a round-trip-time < 1ms.\r\n\r\nThe network (I\/O) stats are obtained by comparing the result of this command before\/after a benchmark run:\r\n\r\n```\r\ndocker stats --no-stream postgres --format 'table {{.NetIO}}'\r\n```\r\n\r\n**Here are the results:**\r\n\r\n| Batching method                      | Duration | Network (I\/O)     |\r\n|--------------------------------------|---------:|------------------:|\r\n| in_batches(use_ranges: true)         |    5.6 s.  |   &nbsp;&nbsp;1.2 MB \/ &nbsp;&nbsp;180 MB   |\r\n| in_batches(use_ranges: true) + optim from this PR |     2.3 s.  |   &nbsp;&nbsp;< 0.5 MB \/  < 0.2 MB   |\r\n\r\nIn this benchmark, we managed to **generate scopes for batches `x2.4` times faster and with `x900` times less bandwidth**. These results will of course typically vary with the batch size used, and the network speed.\r\n\r\nThe absolute values may not seem like huge gains, but I'm considering using `in_batches(use_ranges: true)` on tables with over 3 billion records, where this benchmark would show a saving of at least `16+ minutes` and `52.7 GB` of bandwidth (+ the database resources needed to extract\/send this traffic).\r\n\r\n#### Other strategies considered\r\n\r\nUsing `OFFSET` is not be the only way to achieve the same kind of optimisation.\r\n\r\nFor example, we could consider using a strategy based on the calculation of the maximum id + batch size for each batch (details folded below).\r\n\r\n<details>\r\n  <summary>Using a CTE<\/summary>\r\n<br \/>\r\nWe could use a CTE like this one:\r\n\r\n```sql\r\nWITH \"batch_ids\" AS (\r\n    -- same query as today\r\n    SELECT \"users\".\"id\" FROM \"users\" WHERE (id > 10000) ORDER BY \"users\".\"id\" ASC LIMIT 10000\r\n)\r\nSELECT COUNT(id) AS last_batch_size, MAX(id) AS last_batch_id FROM batch_ids;\r\n```\r\n\r\nThis would be advantageous, as we would not have to use that \"extra\" query for the last batch as we did above.\r\n\r\nNevertheless, using a CTE would have the following downsides:\r\n\r\n1. CTEs are not supported yet by all RDBMS supported by Active Record (MySQL < 8.0)\r\n2. To my knowledge, ActiveRecord does not provide any way to easily generate a query with two distinct calculations such as a count and a maximum. The \"manual\" workarounds for this could be complicated.\r\n\r\nFor the record, the query above can be generated with:\r\n\r\n```ruby\r\nUser.connection.select_one(\r\n  User\r\n    .with(batch_ids: User.select('id').where('id > 10000').order(:id).limit(10000))\r\n    .from('batch_ids')\r\n    .select('COUNT(id) AS last_batch_size', 'MAX(id) AS last_batch_id')\r\n)\r\n```\r\n<\/details>\r\n\r\n\r\n<details>\r\n  <summary>Using a subquery<\/summary>\r\n<br \/>\r\nWe could use a subquery like this one:\r\n\r\n```sql\r\nSELECT\r\n    COUNT(id) AS last_batch_size, MAX(id) AS last_batch_id\r\nFROM (\r\n    -- same query as today\r\n    SELECT \"users\".\"id\" FROM \"users\" WHERE (id > 10000) ORDER BY \"users\".\"id\" ASC LIMIT 10000\r\n) subquery;\r\n```\r\n\r\nEven better than the CTE version because this would be compatible with all RDBMS supported by ActiveRecord.\r\n\r\nFor the record, the query above can be generated with:\r\n\r\n```ruby\r\nUser.connection.select_one(\r\n  User.select('COUNT(id) AS last_batch_size', 'MAX(id) AS last_batch_id').from(\r\n    User.select('id').where('id > 10000').order(:id).limit(10000)\r\n  )\r\n)\r\n```\r\n\r\nBut to support all sorts of primary keys (including composite) and multiple calculations in a single query, I suspect some complicated work is required in Active Record. If you think this is feasible at a reasonable cost, please provide some guidance \ud83d\ude4f \r\n<\/details>\r\n\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Implementor of `use_ranges` here. I originally considered selecting only the last record, but the win was already so large, that I didn't bothered to make the code more complicated. But \ud83d\udc4d for the idea.\r\n\r\nDepending on what you are trying to achieve on yours 3 billion records table and how often you do this, you may even consider something like\r\n```ruby\r\nid = 1\r\nmax_id = Model.maximum(:id) + 100_000\r\nbatch_size = 1000\r\nwhile id < max_id\r\n  relation = Model.where(\"id >= ? AND id < ?\", id, id + batch_size)\r\n  # do something with the relation\r\n  id += batch_size\r\nend\r\n```\r\n\r\nthis will use much simpler queries and have x\/2 of them compared to the `in_batches`.",">Implementor of use_ranges here. I originally considered selecting only the last record, but the win was already so large, that I didn't bothered to make the code more complicated. But \ud83d\udc4d for the idea.\r\n>\r\n> Depending on what you are trying to achieve on yours 3 billion records table and how often you do this, you may even consider something like [efficient code example...]\r\n\r\n@fatkodima Thank you for the original optimization and the additional context about its implementation. Indeed, it did make sense to focus on the biggest gain then.\r\n\r\nI used your alternative strategy in some places already (it wasn't a Rails project) and I can confirm it is the fastest option where suited. Thanks for the reminder!\r\n\r\n> If we're generating a significantly different sql query now, it might be worth it adding a test case for the specific sql statement that was generated? especially to include the offset clause. otherwise lgtm!\r\n\r\n@yawboakye Good idea.\r\n\r\nThere were no assertions previously on the queries to generate the relations for each batch (only assertions on the queries subsequently created when using the relations). I've completed existing tests with assertions for both kinds of queries, and splitted in two steps to clarify what we are testing.\r\n\r\nPlease let me know if it makes sense to you \ud83d\ude4f.","Looks ready to me. Great win! cc @fatkodima "],"labels":["activerecord"]},{"title":"Extract `ActionText::Editor` to support WYSIWYG Editors","body":"## How to review this proposal\r\n\r\nThis exploration in expanding support for Action Text editors is motivated by [rails\/actiontext#41](https:\/\/github.com\/rails\/actiontext\/issues\/41).\r\n\r\nThis diff consists of a sequence of commits that could be merged incrementally over time, but are presented here as a unit to form a more cohesive narrative, and to demonstrate a potential end result.\r\n\r\nAt the moment, the theme of the commits is as follows:\r\n\r\n1. Add Promise support to Client-side JavaScript\r\n2. Deprecate Trix-specific Ruby methods\r\n3. Consolidate methods to the `ActionText::Editor` class, including a barebones demonstration of integrating with a third-party editor ([ProseMirror](https:\/\/prosemirror.net), in this case)\r\n4. Remove the barebones demonstration\r\n\r\n### Motivation \/ Background\r\n\r\nRelated to [rails\/actiontext#41](https:\/\/github.com\/rails\/actiontext\/issues\/41)\r\n\r\nThe main aim of this changeset is to provide a single, extensible entrypoint for third-party editors (that are not Trix) to integrate with Action Text.\r\n\r\nThe `Editor` class (and the `TrixEditor` implementation to integrate with [Trix](https:\/\/trix-editor.org)) is introduced without a public interface. They are both introduced marked with `:nodoc:` so that all of their methods are considered `:nodoc:` as well. They're the only \"public\" part of this PR at the moment. This diff acknowledges their existence, but doesn't commit to any particular interface. \r\n\r\nTheir surface area is intentionally small, and the scope of what's public is aggressively limited for the sake of deprecating the old methods and merging the changes that introduce the new methods. The idea is for Action Text to declare \"public interface bankruptcy\" for the majority of its inner classes. From that interface bankruptcy, third-party integrates can make ad-hoc extensions as they explore what methods are good candidates to be added and maintained as part of the `Editor` API (for all Ruby, HTTP, and JavaScript interfaces). Once there's a need to pave the cowpaths, Action Text will have an opportunity to make additions to the interface without much burden of responsibility to maintain historical choices.\r\n\r\nWithout the existence of the `Editor` class to consolidate the rich text processing and rendering canonicalized `<action-text-attachment>` elements, third-party extension would be challenging and potentially more tedious.\r\n\r\n### Detail\r\n\r\nThis proposes that the entry point should be the `ActionText::Editor` class. In addition to introducing the new class itself along with its first `ActionText::TrixEditor` subclass, this changeset also required additional integration points with the existing models and classes.\r\n\r\n#### Additions\r\n\r\nThe initial responsibilities of the `ActionText::Editor` have been determined by consolidating a variety of (class- and instance-) methods across a variety of classes to reduce the number of touchpoints for applications and engines that provide third-party editor integrations. The vast majority of its method definitions are direct copy-and-pastes from their original sources. Any method that previously mentioned `trix` in its name or argument list has replaced and generalized that occurrence with `editor`.\r\n\r\nFor example, this proposal draws inspiration from the `ActiveStorage::Service` class and its related `Registry` and `Configurator` infrastructural classes to store per-record information about the editor used to create its constituent data.\r\n\r\nTo store that metadata, this commit introduces a new migration that adds an `action_text_rich_texts.editor_name` column to encode the editor. Since the out-of-the-box configuration (and the only historical choice) uses `trix`, the migration backfills old data with `action_text_rich_texts.editor_name = 'trix'`.\r\n\r\nThe editors will be configured through a new `config\/rich_text.yml` file that also draws inspiration from `config\/storage.yml`. Applications (as well as third-party Editor engines) will provide their own `config\/rich_text.yml` files to introduce and configure additional editors.\r\n\r\n#### Changes\r\n\r\nWith the addition of the `ActionText::Editor` class and the `ActionText::RichText#editor` method, there is an opportunity to outsource the details of rendering editor form controls along with filling them out in System Tests to the Editor itself. This commit inverts the responsibility to render the field by introducing the `Editor#rich_text_area_tag`. The `rich_text_area_tag` method accepts an instance of `ActionView::Base` as the `view_context` argument to access the necessary render helpers. Similarly, the\r\n`Editor#fill_in_rich_text_area` method accepts a Capybara session argument.\r\n\r\nThere is an opportunity to define `Editor#rich_text_area_tag` in terms of `#render_in(view_context, **locals, &block)` once the `#render_in` interface is extended to incorporate call-site keyword arguments and blocks.\r\n\r\nOn the client-side, this changeset contains some noteworthy JavaScript modifications. For example, it exports the `AttachmentUpload` class so that third-party editors can utilize it. To do so, it also modifies the constructor arguments to be more generalized. Instead of expecting a `Trix.Attachment` instance and a browser `File`, it accepts a \"delegate\" object to provide the `File` and to respond to upload lifecycle methods.\r\n\r\nAdditionally, the `AttachmentUpload.start` function returns a `Promise` to match asynchronous programming styles that don't utilize callbacks.\r\n\r\n#### Deprecations\r\n\r\nThe introduction of the `Editor` class enables the deprecation of a variety of class- and instance-level methods across the `ActionText` namespace. The main motivation of these deprecations is to seize the opportunity to reset Action Text's public API.\r\n\r\nThere are two categories of deprecations in this changeset: `module`\/`class` deprecations and method deprecations.\r\n\r\nThe `module` and `class` deprecations target modules that are internal and \"private\" in intent, but public in Ruby and not marked as `:nodoc:`. They're either particular to Trix, or their responsibilities have been given to `ActionText::Editor`.\r\n\r\nThe method deprecations also target methods that are internal and \"private\" in intent, but `public` in Ruby and not marked as `:nodoc:`. In general, determining whether or not to deprecate a method hinged on whether its name or arguments mentioned `\"trix\"`, *or* if it lacked method-level documentation or comments of any kind.\r\n\r\nWhen possible, the previous code paths have been deprecated *and* re-implemented in terms of an `ActionText::TrixEditor` instance.\r\n\r\n### Additional information\r\n\r\nIn its current state, this PR includes a test suite that `ProsemirrorEditor` implementation to integrate with the [ProseMirror](https:\/\/prosemirror.net) package. It contains a Ruby-side implementation as well as an ad hoc JavaScript implementation. The main purpose of this code was to explore what it'd take to replace Trix, and to drive out the necessary extensible methods and points of integration.\r\n\r\nIt is not my intent to foist the burden of maintaining a third-party editor plugin in the test suite. I am also not proposing that ProseMirror be the first third-party editor to be given built-in support. I'm not sure how to proceed with the code, and have included it here to provide a general sketch of how an application or engine might integrate a WYSIWYG editor. I've left them included in the diff to provide code reviewers from Core with an opportunity to assess the client-side requirements and scan for opportunity to introduce new abstractions that Rails would want to support as part of its \"public\" JavaScript API.\r\n\r\nOnce the rest of the code is in a mergable state, I'm happy to remove the Prosemirror Ruby \/ JavaScript \/ test code.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["This change aims to *both* introduce the `ActionText::Editor` class as the central hub for all rich text processing and rendering *and* deprecate the old methods.\r\n\r\nIf that's too ambitious, risky, or the code review diff is too noisy, I'm happy to open a separate PR to deprecate the methods, then rebase this branch off that PR.","> For example, this proposal draws inspiration from the ActiveStorage::Service class and its related Registry and Configurator infrastructural classes to store per-record information about the editor used to create its constituent data.\r\n\r\nWhat would be a use-case for having this kind of configuration for ActionText? I can understand the case for ActiveStorage having multiple different \"services\" (mirroring, different regions, public vs private files, etc) but struggling to think of a case where a single Rails app would use multiple different text editor libraries. In my own codebase we have different \"instances\" of trix (for things like removing some formatting, changing styles, etc) but those are configured at the view-layer or with options passed to the underlying library.","> struggling to think of a case where a single Rails app would use multiple different text editor libraries.\r\n\r\nI think one potential use case is migration from one editor to another. For example, this diff's migration would backfill existing records to set `editor_name = \"trix\"`, then any new records could set `editor_name = \"prosemirror\"`.\r\n\r\nFor some period of time, the application could serve assets for both editors and use the `editor_name` column to determine which context to render the content in. It could render edit forms with Trix, then do some transformation when Trix submits the Trix-specific HTML content into the shape the new editor expects.\r\n\r\nFor some editors, there might not be any significant difference. Since the WYSIWYG landscape is vast, supporting an open-ended migration felt safest.\r\n\r\n> In my own codebase we have different \"instances\" of trix (for things like removing some formatting, changing styles, etc) but those are configured at the view-layer or with options passed to the underlying library.\r\n\r\nThis is another case I was imagining. Some consumer-facing pages might require real-time collaboration features, while other pages (back of house administrative pages, for example) might have different needs. While I agree with your point that using a consistent tool across the entire application would be the simplest approach, the spirit of this proposal is to provide flexibility when that isn't possible (for a variety of reasons, both in and out of teams' control).","My gut reaction was that I was expecting this to be configured\/designed more like `ActiveJob` (different adapters, a per-`has_rich_text` `editor` option, `config.action_text` options) and not like `ActiveStorage`. I have not explored that path in any depth, strictly speaking as a consumer of ActionText. Either way, very excited about this! It's a big undertaking!\r\n","> a per-`has_rich_text` editor option\r\n\r\nThis is an angle I hadn't considered. I think supporting `editor: :trix` and `editor: :prosemirror` could have value. Also supporting a callable could help with migrating from one to another. Something like:\r\n\r\n```ruby\r\nhas_rich_text :body # editor defaults to `ActionText::RichText.editor`\r\nhas_rich_text :body, editor: :trix\r\nhas_rich_text :body, editor: ActionText::RichText.editors[:trix]\r\nhas_rich_text :body, editor: ->(rich_text) { rich_text.method_to_determine_editor_during_migration } \r\n```","We migrated from Trix to TipTap over the course of 2023. Our app pre-dated ActionText but this type of PR could help other apps in a similar situation to ours:\r\n\r\n1. We needed to re-create our own version of the RichText model and ActiveStorage integration. This was necessary because ActionText was tied to Trix so we couldn't just adopt ActionText but our implementation doesn't really do anything different.\r\n2. It was a year-long process so we were concurrently running Trix and TipTap in different parts of the app, and even within the same part of the app as the migration process ran."],"labels":["actiontext"]},{"title":"Fix label with `for` option not getting prefixed by form `namespace` value","body":"### Motivation \/ Background\r\n\r\nThis PR is created because when a `form_for` has the `namespace` option, all other fields are prefixed with it except for the `label` tag which has the `for` option.\r\n\r\n### Detail\r\n\r\nExample:\r\n```rb\r\nform_for(@post, namespace: SecureRandom.urlsafe_base64) do |f|\r\n  concat f.label(:title, for: \"my_custom_post_title\")\r\n  concat f.text_field(:title, id: \"my_custom_post_title\")\r\nend\r\n```\r\nIn the above example, the label will not be linked to the text field, which shouldn't be the case just because the `namespace` option is present.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["actionview"]},{"title":"#update on CPK association requires an explicit reload to work correctly","body":"### Steps to reproduce\r\nSave the below script as `ar.rb` and run\r\n```shell\r\nruby ar.rb\r\n```\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :books, force: true, primary_key: %i[number] do |t|\r\n    t.integer :number\r\n    t.string :title\r\n    t.integer :main_chapter_number, null: true\r\n  end\r\n\r\n  create_table :chapters, force: true, primary_key: %i[book_number number] do |t|\r\n    t.integer :book_number\r\n    t.integer :number\r\n    t.string :title\r\n  end\r\n\r\n  add_foreign_key :books, :chapters, column: [:number, :main_chapter_number], primary_key: [:book_number, :number]\r\nend\r\n\r\nclass Book < ActiveRecord::Base\r\n  self.primary_key = %i[number]\r\n  has_many :chapters,\r\n           foreign_key: :book_number,\r\n           inverse_of: :book\r\n\r\n  belongs_to :main_chapter, class_name: \"Chapter\",\r\n             query_constraints: %i[number main_chapter_number],\r\n             optional: true,\r\n             inverse_of: :book\r\nend\r\n\r\nclass Chapter < ActiveRecord::Base\r\n  self.primary_key = %i[book_number number]\r\n\r\n  belongs_to :book, foreign_key: :book_number, inverse_of: :chapters\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_association_stuff\r\n    book = Book.create!(number: 1, title: \"First book\")\r\n\r\n    book.chapters << Chapter.new(book:, number: 1, title: \"Chapter one\") << Chapter.new(book:, number: 2, title: \"Chapter two\")\r\n\r\n    assert_equal 2, book.chapters.count\r\n    assert_equal 2, Chapter.count\r\n    assert_equal nil, book.main_chapter_number\r\n\r\n    book.update!(main_chapter: book.chapters.first)\r\n    assert_equal 1, book.main_chapter_number\r\n\r\n    # book.reload # This is a workaround that will make it work, but it should not be necessary\r\n\r\n    book.update!(main_chapter_number: nil) # This one will not update the database.\r\n    assert_equal nil, book.main_chapter_number\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\nI expect\r\n```\r\n1 runs, 5 assertions, 0 failures, 0 errors, 0 skips\r\n```\r\n\r\n### Actual behavior\r\nIt fails with\r\n```\r\nFailure:\r\nBugTest#test_association_stuff [ar.rb:72]:\r\nExpected: nil\r\n  Actual: 1\r\n```\r\n\r\nSee comment in script for workaround\r\n\r\n### System configuration\r\n**Rails version**: `main`\r\n\r\n**Ruby version**: 3.2.2\r\n\r\n**Maybe related issues**: https:\/\/github.com\/rails\/rails\/issues\/49597","comments":["cc\/ @nvasilevski can you take a look at this?","@jarl-dk , This issue is similar to the one addressed by #50297. The root cause for this one seems to be related to the stale state detection. I tested your script against that branch and can confirm it fixes the issue. You can verify the same using the following.\r\n\r\n```ruby\r\ngem \"rails\", github: \"iamradioactive\/rails\", branch: \"handle_composite_foreign_keys\"\r\n```\r\n\r\nLet me know if I missed something.\r\n","I confirm that my script works against that branch.","@jarl-dk , Since the PR is not merged yet, I think instead of closing this issue we should keep it open or maybe mark as duplicate. I can go ahead and update the PR description to include that this issue will be fixed as well."],"labels":["activerecord","attached PR"]},{"title":"Fix regression in isolated engine's `table_name_prefix` behaviour","body":"### Motivation \/ Background\r\n\r\nhttps:\/\/github.com\/rails\/rails\/pull\/50247 introduced a regression for engines already defining a `table_name_prefix` method which would make the default behaviour (ActiveRecord's config + engine's name) take precedence over the user defined method.\r\n\r\n### Detail\r\n\r\nThis Pull Request changes how `table_name_prefix` is programmatically defined when not already user-defined, removing usage of `ActiveSupport.on_load(:active_record)` which delay execution of the block until later.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["railties"]},{"title":"Doc Request: ActiveRecord FAQ","body":"This is with regards to the request for Documentation asks and help.\r\n\r\nActiveRecord has a design that I love with the layers of concerns that overlay each other. But it also means that there are not normal API docs that are complete for any of them. \r\n\r\nA great example is a question an engineer asked me today of whether doing an `update` or `save` when the values have not changed will result in a DB call. I answered him by testing in console, but when one tries a web search, one gets ancient answers one won't trust (see below) or very partial docs like https:\/\/api.rubyonrails.org\/v7.1.2\/classes\/ActiveRecord\/Persistence.html#method-i-save (noting also that to a new engineer, it is not obvious if that is the right 'save' method as there are many).\r\n![image](https:\/\/github.com\/rails\/rails\/assets\/204146\/70af9e75-3db1-41b7-b2e7-cc92aa091faa)\r\n\r\nMy suggestion is adding a separate 'guide' in the rails guides that is formatted as Q&As. It is not meant to be a free-for-all, but it does become a strong canonical resource where these types of questions that don't fit into a nice guide and don't have a good home in the docs can be placed. \r\n\r\nNote that I think other parts of Rails might benefit from FAQs, but ActiveRecord is the one that needs it the most, and it could be a guinea pig for the change. ","comments":["Hi @nhorton thanks for this issue! @carlosantoniodasilva and I had an interesting discussion around this, and while I don't think FAQ-style pages are the ideal solution, I wanted to share what we can possibly try in the near future to solve for this (phase 2 of the doc updates).\r\n\r\nFirst, why FAQs probably aren't ideal.\r\nIf we take a topic (Active Record to stick with your example), we already have both the API docs and the Guides themselves. Furthermore, those guides are already numerous:\r\n\r\n- Active Record Basics\r\n- Active Record Migrations\r\n- Active Record Validations\r\n- Active Record Callbacks\r\n- Active Record Associations\r\n- Active Record Query Interface\r\n\r\nAdding yet another page where a user needs to sift through a list of questions might introduce even more spread of information - if a question is related to Associations, people would naturally assume the answer to be found in the Associations guide. Ergo, that's where the answer should be found.\r\n\r\nFurthermore - the issue of which questions to include, and where to find those questions.\r\n\r\n(I will stop here and give credit to @viniciusalonso for [his comment on this issue](https:\/\/github.com\/rails\/rails\/issues\/51262#issuecomment-1982250985). It's a great idea to take the best (correct) answers in Stack Overflow and use it as research for the official guides.)\r\n\r\nBut I full agree that when people search for questions, the official guides should be the top answers.\r\n\r\nWe have two ideas on how to solve for this. They have as much to do with improving the SEO as they do with adding helpful content.\r\n\r\n1. Embed these frequently asked questions into the guides naturally, either in the existing copy or in their own section making sure to use similar wording one would in a search term or question. The team currently working on the docs is taking this approach, but we can be more deliberate with finding those common questions (re: Perusing Stack Overflow like @viniciusalonso's comment advised).\r\n2. We currently have small info boxes throughout the guides. We can also create small 'FAQ' box and pepper the most commonly asked questions throughout the existing guides near the section that most pertains to them. I had the UX designer make a quick mockup. We would have to use this solution sparingly, and only for the most commonly asked questions or misunderstood issues.\r\n\r\n<img width=\"369\" alt=\"Screenshot 2024-03-07 at 14 13 20\" src=\"https:\/\/github.com\/rails\/rails\/assets\/58528404\/36aac0a5-3ddf-4e99-86da-1a41c3c848fb\">\r\n\r\nBoth of these solutions are using the current structure of the Guides without adding additional pages, so they feel like a more natural way to go.\r\n\r\nWould love to hear your thoughts.\r\n","I think #2 would be hard as the content for the faq-ish stuff could be voluminous and disruptive inline. #1 feels more likely to work and might work.\n\nI want to be clear that I don't think there is a perfect here and I am aware of that, but I think the problem with the guides is that things don't partition well into them. For example, whether update touched the db and called callbacks when nothing changed could be in the callbacks guide or the basics guide where update is described.\n\nMy instinct is that having *any place* for these and just starting to collect them is the important thing. If #1 is the approach, either that works really well, or in 3 months we are talking about concrete cases that we have collected where it does not work and then we can come up with a next idea. So all in all - I would be very happy to see #1 start now, and will be happy to start putting in some content as soon as it is ready!","Great, that work (#1) actually started in late January already and is still ongoing, so let's see how this goes. :) \r\n\r\n"],"labels":["docs","rails foundation"]},{"title":"[Fix #49999] properly reference from Arel::Attribute args","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nFixes #49999 \r\n\r\n### Detail\r\n\r\nActiveRecord::Relation#order now properly references Arel::Attribute arguments\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Seems like CI fails. Do you mind taking a look? Thanks!"],"labels":["activerecord"]},{"title":"Add `predicate` method to `has_one` accessors","body":"Re-opens #47136 which was accidentally closed when dealing with a merge conflict.\r\n\r\n---\r\n\r\n### Motivation \/ Background\r\n\r\nIntroduces `other!` to the list of [generated methods][] for singular associations.\r\n\r\n```ruby\r\naccount.beneficiary\r\n#=> nil\r\n\r\naccount.benificiary!\r\n#=> #<ActiveRecord::RecordNotFound>\r\n\r\nBenificiary.create!(account: account)\r\naccount.benificiary!\r\n#=> #<Benificiary>\r\n\r\nBenificiary.create!(account: account)\r\naccount.benificiary!\r\n#=> #<ActiveRecord::SoleRecordExceeded>\r\n```\r\n\r\nRails provides the ability to [find the sole matching record via sole][sole]. I thought adding this predicate method would compliment that existing behavior.\r\n\r\n[generated methods]: https:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/Associations\/ClassMethods.html#module-ActiveRecord::Associations::ClassMethods-label-Singular+associations+-28one-to-one-29\r\n[sole]: https:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/FinderMethods.html#method-i-sole\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.","comments":[],"labels":["activerecord","docs"]},{"title":"[ci skip] docs: add around_update callback example","body":"### Motivation \/ Background\r\n\r\nThis Pull Request has been created because there's no example for `around_ ` callbacks, so I think it's useful for newcomers like me\r\n\r\n### Detail\r\n\r\nThis Pull Request changes 2 files, adding an example for an `around_update` callback:\r\n- `activerecord\/lib\/active_record\/callbacks.rb`\r\n- `guides\/source\/active_record_callbacks.md`\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["cc @rafaelfranca lgtm!"],"labels":["activerecord","docs"]},{"title":"Add `value_format` option to `numericality`, `length` and `comparison` validators","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nIn current implementations, formatting numerical or date values in messages generated by validations typically requires specifying the message option or implementing custom validators.\r\nHowever, I only want to format the `%{count}` and do not need to handle the message, apart from the message option, so I believe it should be a native feature of the framework.\r\n\r\n### Detail\r\n\r\nThis pull request introduces the value_format option for validations such as `numericality`, `length`, and `comparison`. With this option, it becomes possible to format the value passed to `%{count}` in i18n messages.\r\n\r\ne.g. messages like _\"must be equal to 1,000\"_ can now be generated.\r\n```ruby\r\nclass MyModel < ApplicationRecord\r\n  validates :my_attribute, numericality: {\r\n    equal_to: 1_000,\r\n    value_format: -> (value) { value.to_fs(:delimited) }\r\n  }\r\nend\r\n```\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\nThere have been several similar PRs submitted in the past:\r\n\r\n- https:\/\/github.com\/rails\/rails\/pull\/44076\r\n- https:\/\/github.com\/rails\/rails\/pull\/41482\r\n\r\nComparing them,\r\n\r\n- There is no impact on existing implementation since it can be specified with options.\r\n- It also supports `length` and `comparison` where `%{count}` is used, not limited to `numericality`.\r\n\r\n<br \/>\r\n\r\nIf there are any errors or inconsistencies in the English language in the change log or documentation, please point them out.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activemodel","docs"]},{"title":"Handle array values of belongs_to primary_key option","body":"### Motivation \/ Background\r\n\r\nResolves #50850\r\n\r\nResolves #51127 by allowing users to set all query constraints on association definitions, leaving model in a state compatible with active_storage (and active_text) associations.\r\n\r\n### Detail\r\n\r\nThis PR merges handling of primary keys by `belongs_to` association and `has_` associations into one, rendering aforementioned associations' behaviour expectedly symmetrical.\r\n\r\n### Additional information\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.","comments":["A note on CI failure - it looks like a forked process run out of resources in one case. I can't re-run the examples, however in local attempts to reproduce the error, the test passes in mysql, postgres, and sqlite[_mem] runs."," 7c9b10e works for me with Postgres "],"labels":["activerecord"]},{"title":"add linestring and multilinestring for mysql","body":"### Motivation \/ Background\r\n\r\nIn mysql, there are two column data types: linestring and multilinestring. At the moment, we cannot create those two using\r\n\r\n```rb\r\nt.column :test_col, :linestring\r\nt.column :test_mcol, :multilinestring\r\n```\r\n\r\nWhen run `db:migrate`, it will print to `schema.rb`\r\n\r\n```rb\r\n# Could not dump table \"tests\" because of following StandardError\r\n#   Unknown type 'linestring' for column 'ls'\r\n```\r\n\r\nTest repo: https:\/\/github.com\/zgid123\/test-mysql-data-type\r\n\r\n### Detail\r\n\r\nI followed this PR: https:\/\/github.com\/rails\/rails\/pull\/49842 to add those two types. I still not know how to write unit test for this case. Please help me this one.\r\n\r\n### Additional information\r\n\r\nHere the result after the fix\r\n\r\n```rb\r\nActiveRecord::Schema[7.2].define(version: 2024_02_25_192506) do\r\n  create_table \"tests\", charset: \"utf8mb3\", force: :cascade do |t|\r\n    t.string \"name\"\r\n    t.decimal \"number\", precision: 10\r\n    t.linestring \"ls\"\r\n    t.multilinestring \"mls\"\r\n    t.datetime \"created_at\", null: false\r\n    t.datetime \"updated_at\", null: false\r\n  end\r\nend\r\n```\r\n\r\n<img width=\"1159\" alt=\"image\" src=\"https:\/\/github.com\/rails\/rails\/assets\/15771072\/8bb7d5cb-c1d9-4028-92e3-ce4438b8b1fc\">\r\n\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Explore ways to reload gems","body":"(Discussion started in https:\/\/github.com\/fxn\/zeitwerk\/issues\/287.)\r\n\r\nThe purpose of this ticket would be to explore ways to let Rails reload some gems. This could be useful if the gem is being actively developed.\r\n\r\nThe documentation of Zeitwerk [warns](https:\/\/github.com\/fxn\/zeitwerk?tab=readme-ov-file#rules-of-thumb) this may be tricky:\r\n\r\n> In a given process, ideally, there should be at most one loader with reloading enabled. Technically, you can have more, but it may get tricky if one refers to constants managed by the other one. Do that only if you know what you are doing.\r\n\r\nIn the proposed use case, the application refers to constants in the gem, and the gem does not refer to constants from the application. This is important.\r\n\r\n\/cc @matthewd ","comments":["Any reason why this doesn't work today? We have many gems in our application (70+) and they are all reloaded. They just need to be Rails engines and inside the application directory.","@rafaelfranca I suggested this, but @davidmilo does not seem to want its gem to be an engine.\r\n\r\n@davidmilo to help discuss, could you please be more explicit about your use case?","That is the contract that Rails expects. If a library needs to integrate well with Rails and its reloaders it needs to include a Engine. I don't think we should change that contract.","I am a huge fan of extracting code from rails apps into gems. With larger codebases there are many things which can be extracted and either shipped as a.) public gem for everyone to use or b.) private gem which can be used in other product you are using within the company. I think that moving logic to gems helps you modularise large rails app better. It makes it easier to re-use lot of code across different products.\r\n\r\nThese gems are, in many cases, not related to rails at all. They either extract some piece of business domain specific to the company or product you are working on. Sometimes they can be some nice algorithm solving general problem. Some examples could:\r\n- gem which knows how to talk to some API service we are using which maybe doesn't have ruby client. \r\n- gem which knows how to talk to some internal service we are using in the company - for example wrapper on how to talk to our specific instance of Solr\/Elastic search\/<insert some other db>\r\n- gem made to crawl specific websites (I worked at a place which was crawling 50 public websites for different sources of information) - organising these different crawlers into smaller gems which know how to handle specific sources can be quite useful.\r\n- gem to wrap up our home made XML diffing algorithm\r\n- gem which wraps our internal design system\r\n\r\nWhy should these be Rails engines? They have nothing in common with Rails - they are not additions or any extensions of Rails. They do not add any features to the framework. They are just pure ruby classes doing something which can be used anywhere. Why should I make them dependant on Rails?\r\n\r\n**I could think about 3 different cases when extracting into gems would come handy:**\r\n\r\n**Example 1**\r\n- We have a huge product which is the main product of company A. Company wants to make some new products where lot of logic\/tooling could be shared.\r\n- My first step would to make local gems along side my main product. This might take some time because code extraction can sometimes be difficult. You need to find abstraction of the problem. It can be sometimes tricky to extract logic from Rails if code was not made with good separation of concerns and when code is too bound to the framework.\r\n```\r\nmy_repo\/\r\n  my_rails_app\/\r\n  my_gem_1\/\r\n  my_gem_2\/\r\n  my_gem_3\/\r\n```\r\n- Main product is the main consumer of these gems. Majority of changes and features are developed along side the development of the product. We can easily modify code of the gems and code of the product at the same time. These gems can be published to a private company repository as needed when it is meaningful to do a new version release.\r\n- We can eventually start making new products which can start re-using these gems to re-use lot of code which would be similar across the products.\r\n\r\n**Example 2**\r\nMono repos are getting extremely popular! They come with lot of benefits. It would be very common to run in a setup where you have 3-4 products and 5-7 gems in a same repo\r\n```\r\nmy_mono_repo\/\r\n  my_product_1\/ # rails app\r\n  my_product_2\/ # rails app\r\n  my_product_3\/ # rails app\r\n  my_gem_1\/\r\n  my_gem_2\/\r\n  my_gem_3\/\r\n  my_gem_4\/\r\n  my_gem_5\/\r\n```\r\nWorking across 8 different github repos can create lot of maintenance, manual work, headache and lot of wasted time. Mono repos come with their own problems, but benefits of being able to change some shared code and directly update products using it at the same time can provide huge boosts to development process. Imagine opposite process:\r\nUpdating gem in a github repo. Releasing the gem. Then update 3 other repos which are using the gem and release\/redeploy them separately. Lot of these things can be easily simplified by mono repo structure and good CI setup. \r\n\r\nWhat does Rails framework want to do about this new boom of mono repos? Should there be some support for it to make it easier to work on several different Rails products and share code in between?\r\n\r\n\r\n**Example 3**\r\n- I am making a framework which crawls lot of different public authority websites and collects different legal information\/regulations etc into a single place.\r\n- My Rails all is the framework itself which runs different crawlers. \r\n- To keep code nicely separated, it is good idea to make each crawler its own gem. Small gem which knows how to crawl single website and returns what was found in some generalised format. Each gem is easy to re-use, test and develop on it's own. Good separation of concerns - gems doesn't need to know about rest of the Rails app or other crawlers.\r\n- In this case gems will probably never be used by other products but process of extracting code into small gems helps keep codebase more clean and understandable.\r\n- Gems helps you to more clearly define dependencies and creates more natural modules.\r\n","Maybe I am not understanding the contract you are talking about well. I guess your idea would be that everything which wants to be used in Rails should ship with rails engine? Am I understanding it correctly? I think it is little weird to require that of gems and libraries which does not directly interact or depends on Rails. I think separation that:\r\n- gems which adds direct logic\/features to the framework, are Rails engines\r\n- gems which are just pure ruby classes which can be used any other framework or just other pure ruby code, should NOT be Rails engines.","> Why should these be Rails engines?\r\n\r\nBecause you want them to be reloaded in a Rails application. Engines aren't for telling a gem has to do with Rails. It is to teach Rails applications what to do with those gems.\r\n\r\nThe gems don't become Rails engines, they include Rails engines. For this gem to be used by other frameworks it doesn't need to load the Rails Engine.\r\n\r\nSo by including a `Rails::Engine` subclass in your gem your not making your gem a Rails engine, you are including an optional glue to to your gem for it to be able to be properly glued to a Rails application.\r\n\r\nNote that I'm telling you to do `rails plugin new my_gem`, I'm only telling you to include a subclass of `Rails::Engine`. Like many gems, that can and are used outside Rails app do.\r\n\r\nhttps:\/\/github.com\/drapergem\/draper\/blob\/26a18c8cc9ce112f7cf2a308b52952680d9a2cdf\/lib\/draper.rb#L32\r\nhttps:\/\/github.com\/instacart\/makara\/blob\/9e7960558a75aed3f97ba4cbab61abb64687ec3c\/lib\/makara.rb#L3\r\nhttps:\/\/github.com\/thoughtbot\/bourbon\/blob\/71d4776757bbd0d7da47b5660eb6d1f3bf73fc3f\/lib\/bourbon.rb#L5\r\nhttps:\/\/github.com\/carrierwaveuploader\/carrierwave\/blob\/ed8799191824a4d2762eb1028c01220102699377\/lib\/carrierwave.rb#L51\r\nhttps:\/\/github.com\/collectiveidea\/delayed_job\/blob\/b66bb64437a8606a414a390531ac73108911434e\/lib\/delayed\/railtie.rb#L5\r\nhttps:\/\/github.com\/primer\/octicons\/blob\/6bc78de32be1a218a69e10a731072331ba94e7f9\/lib\/octicons_helper\/lib\/octicons_helper.rb#L3","I believe that approach is not quite right for this use case.\r\n\r\nThe gem needs its own autoloader, because when it ships it needs to autoload its code by itself. And the gem has no initializer to run or any integration to be done with Rails projects.\r\n\r\nAlso, when the gem ships, Rails projects using the gem should not reload the gem.\r\n\r\nPoint is, it would be convenient to reload the gem's loader while the gem is being developed and used via a Rails application.\r\n\r\nThis does not necessarily mean we have to do anything in Rails, eh? This ticket only wants to trigger a discussion.\r\n\r\nI have a busy week and have not been able to sit down and think about this, but my main ideas to be explored are:\r\n\r\n* The gem should expose its loader instance.\r\n* The gem should expose its project tree.\r\n* The Rails application should be configured to watch the gem's project tree.\r\n* If the gem's source code changes, when the time arrives in Rails's liefcycle, the gem's loader would be reloaded first, and then the `main` loader would be reloaded. This order is important.\r\n\r\nIf something like that works with existing APIs, we do not need to do anything, the outcome of the discussion would be what to put in David's app initializers to make this happen."],"labels":["railties"]},{"title":"[Fix #51129] Fix issue with IDs reader on preloaded associations for composite primary keys","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nFixes https:\/\/github.com\/rails\/rails\/issues\/51129.\r\n\r\n### Detail\r\n\r\nWhen using composite primary keys in a model, the `primary_key` will be an array. This raises an issue when calling the `<association>_ids` method on a preloaded association. Internally, Rails uses the `pluck` method from Enumerable to retrieve the preloaded results. However, the `pluck` method does not accept an array as its argument. To accommodate that, we need to use the splat operator to split the array into multiple arguments dynamically.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Fix beginless and endless range comparisons","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request has been created because some endless and beginless range comparisons raise `RangeError` due to `ActiveSupport::CompareWithRange`\r\n\r\n### Detail\r\n\r\nThis Pull Request changes the `CompareWithRange#===` and `CompareWithRange#include?` methods to support begin and endless ranges on the left and right hand side of the comparison.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\nPOR:\r\n```ruby\r\n> (1..) === (2..)\r\n=> false\r\n> (..1) === (..2)\r\n=> false\r\n```\r\nRails 7.1.3:\r\n```ruby\r\n> (1..) === (2..)\r\nRangeError: cannot get the last element of endless range\r\nfrom \u2026\/activesupport-7.1.3\/lib\/active_support\/core_ext\/range\/compare_range.rb:23:in `last'\r\n> (..1) === (..2)\r\nRangeError: cannot get the first element of beginless range\r\nfrom \u2026\/activesupport-7.1.3\/lib\/active_support\/core_ext\/range\/compare_range.rb:24:in `first'\r\n```\r\nThis PR:\r\n```ruby\r\n> (1..) === (2..)\r\n=> true\r\n> (2..) === (1..)\r\n=> false\r\n> (..1) === (..2)\r\n=> false\r\n> (..2) === (..1)\r\n=> true\r\n```\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["> Both methods have this comment which should be changed:\r\n> \r\n> ```\r\n> # The given range must be fully bounded, with both start and end.\r\n> ```\r\n\r\nThanks for catching that! I've removed it.\r\n\r\n> Thinking out loud: It seems like `include?` ends up very similar if not the same as `cover?`, are there any differences left?\r\n\r\nI don't think there are any differences in numerical values, but in non-numeric ranges you can get [different answers](https:\/\/rubyapi.org\/3.1\/o\/range#method-i-member-3F):\r\n```ruby\r\n> ('a'..'d').=== 'cc'\r\ntrue\r\n> ('a'..'d').include? 'cc'\r\nfalse\r\n```\r\n\r\n> Edit: introduced in [99c6482](https:\/\/github.com\/rails\/rails\/commit\/99c64829ce71ecf07b576960ea8ff01dfee61be7), I wonder if we should just recommend people use `cover?` now \ud83e\udd14\r\n\r\nThe reason I ended up here is this extension messing with ranges makes some spec like `expect(array_of_beginless_ranges).to contain_exactly(expected)` blow up.  It might be better to remove these overrides entirely in some breaking Rails release, though!\r\n\r\n> @AlexMooney i've looked at the code over and over again and i think it could be written in a clearer way. a lot of things get in the way of comprehension. i recommend that you separate the endless\/beginless range concern, and handle with a private method.\r\n\r\n@yawboakye I've rewritten it to use smaller private methods so that I could name the concepts involved.  Let me know if you like this way better.  I'll squish the PR back into 1 commit after the code looks acceptable.","> one more (and final) refactoring. from where i sit, both `===` and `include?` seem to have identical implementations, so i recommend we make one the alias of the other. \n\nThat is almost but not entirely so. The `super` that they yield is subtly different from one another. See the string range from my previous comment for an example of the difference. ","> That is almost but not entirely so. The `super` that they yield is subtly different from one another. See the string range from my previous comment for an example of the difference.\r\n\r\ngood point \ud83d\udc4d! we can still move the range check condition outside of `compare_with_range` though so that we\u2019re only ever entering that method when we\u2019re certain `other` is a range. ","I've separated the `::Range` check method from the `compare_with_range` and also added tests to demonstrate the difference between `===` and `.include?`.","looks good to me cc @skipkayhil "],"labels":["activesupport"]},{"title":"Support IN queries on array columns","body":"### Motivation \/ Background\r\n\r\nA non-array column can be queried via `where(name: [value1, value2])` which is automatically converted to `name IN (value1, value2)` in SQL. An array column would treat that array as the value to search for, so it'd be natural to expect an array of arrays would result in an `IN` query. Unfortunately, that wasn't the case as `where(name: [[value1], [value2]])` would return `name = {{value1}, {value2}}` in SQL, instead of `name IN ({value1}, {value2})`.\r\n\r\n### Detail\r\n\r\nThat behavior stemmed from the fact that Active Record would force equality comparison for array columns if the value was an array. In order to allow `IN` queries this check was change to check whether it's a **one-dimensional** array by checking that the first item of is not an array.\r\n\r\nAfter these changes the following logic applies for querying array columns:\r\n\r\n1. Using a one-dimensional array results in an ordinary equality query.\r\n2. Using a two-dimensional array produces an `IN` query.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["> check whether it's a one-dimensional array\r\n\r\nDo we not properly store multi-dimensional array values? :confused:","@matthewd, wow, seems I was confused about Postgres arrays. I was assuming that putting `type[]` (which is what `array: true` does) on a column makes it a one-dimensional array, but seems Postgres is happy to accept higher-dimensional arrays, even though `type[][]` is also a thing. \ud83d\ude15\r\n\r\nRelevant excerpt from [PostgreSQL docs](https:\/\/www.postgresql.org\/docs\/current\/arrays.html):\r\n\r\n> The current implementation does not enforce the declared number of dimensions either. Arrays of a particular element type are all considered to be of the same type, regardless of size or number of dimensions. So, declaring the array size or number of dimensions in CREATE TABLE is simply documentation; it does not affect run-time behavior.\r\n\r\nGiven that an array column can contain a value of an arbitrary dimension it seems it's impossible to differentiate between arrays-as-single-values vs arrays-as-multiple-values. I'm afraid we can close this PR \ud83d\ude1e","... unless, we're open to adding some special syntax for those cases. Not sure if it'd be useful for other column types, though."],"labels":["activerecord"]},{"title":"Array primary keys (e.g. composite) break `collection_singular_ids` method when using preload","body":"### Steps to reproduce\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\"\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n  end\r\n\r\n  create_table :comments, force: true do |t|\r\n    t.integer :post_id\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  self.primary_key = [:id]\r\n  has_many :comments\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  self.primary_key = [:id]\r\n  belongs_to :post\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_association_stuff\r\n    post = Post.create!\r\n    post.comments.create!\r\n\r\n    assert_equal 1, post.comments.count\r\n    assert_equal 1, Comment.count\r\n    assert_equal post.id, Comment.take.post.id\r\n\r\n    assert_equal Comment.ids, Post.take.comment_ids\r\n    assert_equal Comment.ids, Post.preload(:comments).take.comment_ids\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\n`collection_singular_ids` should work the same when preloading or not.\r\n\r\n### Actual behavior\r\n\r\nPreloaded associations' `collection_singular_ids` returns an array of `nil` values when association was preloaded.\r\n\r\n### Analysis\r\n\r\nThe problem lies in different handling of array arguments to `Enumerable#pluck` and `ActiveRecord::Relation#pluck`:\r\n\r\n```ruby\r\n      def ids_reader\r\n        if loaded?\r\n          target.pluck(reflection.association_primary_key) # -> Enumerable#pluck\r\n        elsif !target.empty?\r\n          load_target.pluck(reflection.association_primary_key) # -> Enumerable#pluck\r\n        else\r\n          @association_ids ||= scope.pluck(reflection.association_primary_key) # -> ActiveRecord::Relation#pluck\r\n        end\r\n      end\r\n```\r\n\r\n`ActiveRecord::Relation#pluck` efectively flattens its arguments in `#arel_columns` call, whereas `Enumerable#pluck` uses them as is.\r\n\r\nIncidentally, arguments flattening results in column names not being processed with `#arel_column`.\r\n\r\n### System configuration\r\n\r\n**Rails version**: 7.1\r\n\r\n**Ruby version**: 3.3.0","comments":["https:\/\/github.com\/rails\/rails\/blob\/51ce412d1b51949de18089df6aed5b86fb6eb176\/activerecord\/lib\/active_record\/associations\/collection_association.rb#L51\r\nhttps:\/\/github.com\/rails\/rails\/blob\/51ce412d1b51949de18089df6aed5b86fb6eb176\/activesupport\/lib\/active_support\/core_ext\/enumerable.rb#L145\r\n\r\nIn this case, `reflection.association_primary_key` returns `[\"id\"]`, which, when passed to the pluck method, is further nested into `[[\"id\"]]` due to the splat operator `(*keys)` in the method's parameters. Consequently, this nesting results in `keys.first` within the pluck method being `[\"id\"]`, rather than the expected straightforward `\"id\"`.\r\n\r\nWhen using the Enumerable#pluck method with an array argument, like `[:id, :post_id]`, it leads to unexpected behavior. The method interprets the array as a single, composite attribute, which doesn't match any keys in the hash, resulting in nil values for each element:\r\n```\r\n[{ id: 1, post_id: 1 }, { id: 2, post_id: 1 }, { id: 3, post_id: 1 }].pluck([:id, :post_id])\r\n# Output: [nil, nil, nil]\r\n```\r\nTo accurately extract multiple attributes, each attribute name should be passed as a separate argument. This allows the method to correctly identify and retrieve the values for each attribute from the hashes:\r\n```\r\n[{ id: 1, post_id: 1 }, { id: 2, post_id: 1 }, { id: 3, post_id: 1 }].pluck(:id, :post_id)\r\n# Output: [[1, 1], [2, 1], [3, 1]]\r\n\r\n# This works too\r\n[{ id: 1, post_id: 1 }, { id: 2, post_id: 1 }, { id: 3, post_id: 1 }].pluck(*[:id, :post_id])\r\n# Output: [[1, 1], [2, 1], [3, 1]] \r\n```\r\n\r\nWe can utilize the splat operator (*) to distribute the array's elements as separate arguments to the method.\r\n```\r\ntarget.pluck(*reflection.association_primary_key)\r\n```","Upon a second look, I realize the example above might not be the best example. If we simply change `self.primary_key = [:id]` to `self.primary_key = :id` for the case above, everything will work as expected. The issue arose because Rails treated the primary_key as a composite primary key due to it being an array. However, this issue will still arise if we actually have a composite primary key.\r\n\r\nFrom 7.1.3.2:\r\nhttps:\/\/github.com\/rails\/rails\/blob\/6f0d1ad14b92b9f5906e44740fce8b4f1c7075dc\/activerecord\/lib\/active_record\/attribute_methods\/primary_key.rb#L118-L120\r\n\r\nFrom Edge:\r\nhttps:\/\/github.com\/rails\/rails\/blob\/9f1dec2ea5155205a880f6e6e232cf9ea6da2d8c\/activerecord\/lib\/active_record\/attribute_methods\/primary_key.rb#L134-L135\r\n\r\nI've written another test case for the composite primary key.\r\n\r\n```\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", \"7.1.3.2\"\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :authors do |t|\r\n  end\r\n\r\n  create_table :posts, primary_key: [:author_id, :id], force: true do |t|\r\n    t.integer :id\r\n    t.integer :author_id\r\n  end\r\n\r\n  create_table :comments, primary_key: [:author_id, :id], force: true do |t|\r\n    t.integer :id\r\n    t.integer :author_id\r\n    t.integer :post_id\r\n  end\r\nend\r\n\r\nclass Author < ActiveRecord::Base\r\n  has_many :posts\r\n  has_many :comments\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  self.primary_key = :author_id, :id\r\n\r\n  belongs_to :author\r\n  has_many :comments, query_constraints: [:author_id, :post_id]\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  self.primary_key = :author_id, :id\r\n\r\n  belongs_to :author\r\n  belongs_to :post\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_association_stuff\r\n    author = Author.create!\r\n    post_id = rand(1..10)\r\n    post = Post.create!(id: [author.id, post_id])\r\n    comment1 = Comment.create!(id: [author.id, rand(1..5)], post_id: post_id)\r\n\r\n    assert_equal 1, post.comments.count\r\n    assert_equal 1, Comment.count\r\n    assert_equal post.id, Comment.take.post.id\r\n\r\n    assert_equal Comment.ids, Post.take.comment_ids\r\n    assert_equal Comment.ids, Post.preload(:comments).take.comment_ids\r\n  end\r\nend\r\n```"],"labels":["activerecord","attached PR"]},{"title":"Rails 7.1: `ActiveRecord::Base#query_constraints` and composite keys are incompatible with ActiveStorage","body":"### Steps to reproduce\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\"\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\/railtie\"\r\nrequire \"active_storage\/engine\"\r\nrequire \"tmpdir\"\r\n\r\nclass TestApp < Rails::Application\r\n  config.load_defaults Rails::VERSION::STRING.to_f\r\n\r\n  config.root = __dir__\r\n  config.hosts << \"example.org\"\r\n  config.eager_load = false\r\n  config.session_store :cookie_store, key: \"cookie_store_key\"\r\n  config.secret_key_base = \"secret_key_base\"\r\n\r\n  config.logger = Logger.new($stdout)\r\n  Rails.logger  = config.logger\r\n\r\n  config.active_storage.service = :local\r\n  config.active_storage.service_configurations = {\r\n    local: {\r\n      root: Dir.tmpdir,\r\n      service: \"Disk\"\r\n    }\r\n  }\r\nend\r\n\r\nENV[\"DATABASE_URL\"] = \"sqlite3::memory:\"\r\n\r\nRails.application.initialize!\r\n\r\nrequire ActiveStorage::Engine.root.join(\"db\/migrate\/20170806125915_create_active_storage_tables.rb\").to_s\r\n\r\nActiveRecord::Schema.define do\r\n  CreateActiveStorageTables.new.change\r\n\r\n  create_table :users, force: true do |t|\r\n    t.bigint :tenant_id, null: false\r\n    t.index [:tenant_id, :id], unique: true\r\n  end\r\n\r\n  create_table :cats, primary_key: [:breed, :color], force: true do |t|\r\n    t.string :color, null: false\r\n    t.string :breed, null: false\r\n  end\r\nend\r\n\r\nclass User < ActiveRecord::Base\r\n  query_constraints :tenant_id, :id\r\n\r\n  has_one_attached :profile\r\nend\r\n\r\nclass Cat < ActiveRecord::Base\r\n  has_one_attached :profile\r\nend\r\n\r\nrequire \"minitest\/autorun\"\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_upload_and_download_query_constraint\r\n    user = User.create!(\r\n      tenant_id: 42,\r\n      profile: {\r\n        content_type: \"text\/plain\",\r\n        filename: \"dummy.txt\",\r\n        io: ::StringIO.new(\"dummy\"),\r\n      }\r\n    )\r\n\r\n    assert_equal \"dummy\", user.profile.download\r\n  end\r\n\r\n  def test_upload_and_download_primary_key\r\n    cat = Cat.create!(\r\n      breed: \"cat\",\r\n      color: \"orange\",\r\n      profile: {\r\n        content_type: \"text\/plain\",\r\n        filename: \"dummy.txt\",\r\n        io: ::StringIO.new(\"dummy\"),\r\n      }\r\n    )\r\n\r\n    assert_equal \"dummy\", cat.profile.download\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\nSince ActiveStorage storage tables are not configurable, it should simply work. Attaching a file should result in an attached file.\r\n\r\n### Actual behavior\r\n\r\n`query_constraints` route results in an attempt to query non-existing columns on `active_storage_attachments`. Redefining relations on a model doesn't help, since inverse `belong_to` association then attempts to compare two columns to one in `ActiveRecord::AutosaveAssociation#compute_primary_key`.\r\n\r\nComposite primary key route doesn't work, unless the key contains `:id` column.\r\n\r\n### Notes\r\n\r\nThis is kind-of solvable by adding exttra columns to `active_storage_attachments`, but that can get out of hand real fast.\r\n\r\nIncidentally, allowing `belongs_to` to accept an array `primary_key`, would solve the problem by letting the record have a regular `id` for use by ActiveSupport, but configure relations between models using composite keys. Right now, [this route doesn't work](https:\/\/github.com\/rails\/rails\/issues\/50850) due to `ActiveRecord::Reflection::BelongsToReflection#association_primary_key` transforming `primary_key` option with `to_s`.\r\n\r\n### System configuration\r\n\r\n**Rails version**: 7.1.3\r\n\r\n**Ruby version**: 3.3.0","comments":["@nvasilevski "],"labels":["activerecord","attached PR","activestorage"]},{"title":"ActionView::Template::Error (undefined method `variant' for an instance of ActiveStorage::Attached::One):","body":"i have in my model\r\n\r\n        class Profile < ApplicationRecord\r\n          has_one_attached :photo do |attachable|\r\n             attachable.variant :thumb, resize_to_limit: [100, 100]\r\n          end\r\n        end\r\n\r\nAfter creating proflle \r\n\r\n   @profile.photo.attached?\r\n        => true\r\n       [16] pry(#<#<Class:0x00007f749628aac0>>)> \r\n       [17] pry(#<#<Class:0x00007f749628aac0>>)> \r\n       [18] pry(#<#<Class:0x00007f749628aac0>>)> @profile.photo.url\r\n       NoMethodError: undefined method `url' for an instance of ActiveStorage::Attached::One\r\n       from \/home\/lap-053\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport- \r\n       7.1.3\/lib\/active_support\/core_ext\/module\/delegation.rb:336 :in `method_missing'\r\n\r\n       [19] pry(#<#<Class:0x00007f749628aac0>>)> \r\n       [20] pry(#<#<Class:0x00007f749628aac0>>)> rails_blob_path(@profile.photo)\r\n      NoMethodError: undefined method `filename' for an instance of ActiveStorage::Attached::One\r\n      from \/home\/lap-053\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport- \r\n      7.1.3\/lib\/active_support\/core_ext\/module\/delegation.rb:336:in `method_missing'\r\n\r\n       [21] pry(#<#<Class:0x00007f749628aac0>>)> \r\n       [22] pry(#<#<Class:0x00007f749628aac0>>)> @profile.photo.variant(:thumb)\r\n       NoMethodError: undefined method `variant' for an instance of ActiveStorage::Attached::One\r\n       from \/home\/lap-053\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport- \r\n       7.1.3\/lib\/active_support\/core_ext\/module\/delegation.rb:336:in `method_missing'\r\n\r\n       [23] pry(#<#<Class:0x00007f749628aac0>>)> \r\n       [24] pry(#<#<Class:0x00007f749628aac0>>)> @profile.photo.blob.url\r\n       ActiveStorage::Blob Load (0.3ms)  SELECT \"active_storage_blobs\".* FROM \"active_storage_blobs\" WHERE \r\n       \"active_storage_blobs\".\"id\" = $1 LIMIT $2  [[\"id\", 478], [\"LIMIT\", 1]]\r\n       \u21b3 (pry):7\r\n        S3 Storage (52.3ms) Generated URL for file at key: 3jys7zcmi0blkdz9r0y0ffyd95fs (https:\/\/bubbliest-staging-testing.s3.ap- \r\n        southeast-2.amazonaws.com\/3jys7zcmi0blkdz9r0y0ffyd95fs?response-content- \r\n        disposition=inline%3B%20filename%3D%22iffa.jpeg%22%3B%20filename%2A%3DUTF-8%27%27iffa.jpeg&response-content- \r\n        type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz- \r\n        Credential=AKIAWSRNAFXKRHEB736W%2F20240219%2Fap-southeast-2%2Fs3%2Faws4_request&X-Amz- \r\n        Date=20240219T065354Z&X-Amz-Expires=300&X-Amz-SignedHeaders=host&X-Amz- \r\n        Signature=164796ca39b5859c764828debb35903beb8ddd6e61e33037abe98a2a9cf128f5)\r\n\r\n        => \"https:\/\/bubbliest-staging-testing.s3.ap-southeast-2.amazonaws.com\/3jys7zcmi0blkdz9r0y0ffyd95fs?response-content- \r\n        disposition=inline%3B%20filename%3D%22iffa.jpeg%22%3B%20filename%2A%3DUTF-8%27%27iffa.jpeg&response-content- \r\n           type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz- \r\n        Credential=AKIAWSRNAFXKRHEB736W%2F20240219%2Fap-southeast-2%2Fs3%2Faws4_request&X-Amz- \r\n        Date=20240219T065354Z&X-Amz-Expires=300&X-Amz-SignedHeaders=host&X-Amz- \r\n        Signature=164796ca39b5859c764828debb35903beb8ddd6e61e33037abe98a2a9cf128f5\"\r\n\r\nThese methods not working please help.\r\n \r\n            1.     @profile.photo.variant(:thumb)\r\n            2.    @profile.photo.url \r\n           3.      rails_blob_path(@profile.photo)\r\n\r\n\r\n","comments":["Provide us a reproduction test script using this template - https:\/\/github.com\/rails\/rails\/blob\/main\/guides\/bug_report_templates\/active_storage.rb","i don't understand how to do it?","~~There's not much information here to attempt to reproduce. I attempted to write a reproduction script and couldn't reproduce myself. It'd be helpful to know what ruby and rails version are being used when encountering the issue.~~ Looks like the original post is for ruby `3.3.0-dev` and rails `7.1.3`.\r\n\r\nFor the sake of thoroughness here's what I used:\r\n\r\n```\r\nRuby: 3.2.2\r\nRails: 7.1.3.2\r\n```\r\n\r\nHere's the script:\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\"\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\/railtie\"\r\nrequire \"active_storage\/engine\"\r\nrequire \"tmpdir\"\r\n\r\nclass TestApp < Rails::Application\r\n  config.load_defaults Rails::VERSION::STRING.to_f\r\n\r\n  config.root = __dir__\r\n  config.hosts << \"example.org\"\r\n  config.eager_load = false\r\n  config.session_store :cookie_store, key: \"cookie_store_key\"\r\n  config.secret_key_base = \"secret_key_base\"\r\n\r\n  config.logger = Logger.new($stdout)\r\n  Rails.logger  = config.logger\r\n\r\n  config.active_storage.service = :local\r\n  config.active_storage.service_configurations = {\r\n    local: {\r\n      root: Dir.tmpdir,\r\n      service: \"Disk\"\r\n    }\r\n  }\r\nend\r\n\r\nENV[\"DATABASE_URL\"] = \"sqlite3::memory:\"\r\n\r\nRails.application.initialize!\r\n\r\nrequire ActiveStorage::Engine.root.join(\"db\/migrate\/20170806125915_create_active_storage_tables.rb\").to_s\r\n\r\nActiveRecord::Schema.define do\r\n  CreateActiveStorageTables.new.change\r\n\r\n  create_table :profiles, force: true\r\nend\r\n\r\nclass Profile < ActiveRecord::Base\r\n  has_one_attached :photo do |attachable|\r\n    attachable.variant :thumb, resize_to_limit: [100, 100]\r\n  end\r\nend\r\n\r\nrequire \"minitest\/autorun\"\r\n\r\nclass BugTest < Minitest::Test\r\n  ActiveStorage::Current.url_options = { host: \"https:\/\/www.example.com\" }\r\n  def setup\r\n    @profile = Profile.create!(\r\n      photo: {\r\n        content_type: \"image\/png\",\r\n        filename: \"rails-logo.png\",\r\n        io: File.open(\".\/rails-logo.png\")\r\n      }\r\n    )\r\n  end\r\n   \r\n  def test_attachment_url_methods_work\r\n    refute_nil @profile.photo.url\r\n    refute_nil @profile.photo.variant(:thumb)\r\n  end\r\n\r\n  # Fails since nothing is raised\r\n  def test_attachment_url_methods_throw_error\r\n    assert_raises NoMethodError do\r\n      @profile.photo.url\r\n      @profile.photo.variant(:thumb)\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThe first test passes while the second fails because nothing is being raised. If there's some more info provided I can try to reproduce a different way or if there's an error with my testing method LMK. If you want to reproduce this script you'll need a PNG file adjacent to this script called `rails-logo.png`.\r\n\r\n**Edit**: Same result with Ruby `3.3.0-dev` or `3.4.0dev` & Rails `7.1.3.2`.\r\n\r\nHowever something else weird occurs:\r\n```\r\nE, [2024-02-26T08:35:13.250805 #15533] ERROR -- : Error performing ActiveStorage::AnalyzeJob (Job ID: ce25dcf0-cac0-469c-85ad-3b2f76666107) from Async(default) in 2.23ms: ActiveJob::DeserializationError (Error while trying to deserialize arguments: SQLite3::SQLException: no such table: active_storage_blobs):\r\n```\r\n\r\n<details>\r\n<summary> Full Backtrace <\/summary>\r\n\r\n```E, [2024-02-26T08:35:13.250805 #15533] ERROR -- : Error performing ActiveStorage::AnalyzeJob (Job ID: ce25dcf0-cac0-469c-85ad-3b2f76666107) from Async(default) in 2.23ms: ActiveJob::DeserializationError (Error while trying to deserialize arguments: SQLite3::SQLException: no such table: active_storage_blobs):\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/sqlite3-1.7.2\/lib\/sqlite3\/database.rb:177:in 'SQLite3::Statement#initialize'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/sqlite3-1.7.2\/lib\/sqlite3\/database.rb:177:in 'Class#new'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/sqlite3-1.7.2\/lib\/sqlite3\/database.rb:177:in 'SQLite3::Database#prepare'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/connection_adapters\/sqlite3\/database_statements.rb:47:in 'block (2 levels) in ActiveRecord::ConnectionAdapters::SQLite3::DatabaseStatements#internal_exec_query'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1028:in 'block in ActiveRecord::ConnectionAdapters::AbstractAdapter#with_raw_connection'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport-7.1.3.2\/lib\/active_support\/concurrency\/null_lock.rb:9:in 'ActiveSupport::Concurrency::NullLock#synchronize'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1000:in 'ActiveRecord::ConnectionAdapters::AbstractAdapter#with_raw_connection'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/connection_adapters\/sqlite3\/database_statements.rb:33:in 'block in ActiveRecord::ConnectionAdapters::SQLite3::DatabaseStatements#internal_exec_query'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport-7.1.3.2\/lib\/active_support\/notifications\/instrumenter.rb:58:in 'ActiveSupport::Notifications::Instrumenter#instrument'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1143:in 'ActiveRecord::ConnectionAdapters::AbstractAdapter#log'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/connection_adapters\/sqlite3\/database_statements.rb:32:in 'ActiveRecord::ConnectionAdapters::SQLite3::DatabaseStatements#internal_exec_query'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:630:in 'ActiveRecord::ConnectionAdapters::DatabaseStatements#select'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:71:in 'ActiveRecord::ConnectionAdapters::DatabaseStatements#select_all'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/connection_adapters\/abstract\/query_cache.rb:112:in 'block in ActiveRecord::ConnectionAdapters::QueryCache#select_all'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/connection_adapters\/abstract\/query_cache.rb:152:in 'block in ActiveRecord::ConnectionAdapters::QueryCache#cache_sql'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport-7.1.3.2\/lib\/active_support\/concurrency\/null_lock.rb:9:in 'ActiveSupport::Concurrency::NullLock#synchronize'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/connection_adapters\/abstract\/query_cache.rb:147:in 'ActiveRecord::ConnectionAdapters::QueryCache#cache_sql'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/connection_adapters\/abstract\/query_cache.rb:112:in 'ActiveRecord::ConnectionAdapters::QueryCache#select_all'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/querying.rb:62:in 'ActiveRecord::Querying#_query_by_sql'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation.rb:998:in 'block in ActiveRecord::Relation#exec_main_query'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation.rb:1018:in 'ActiveRecord::Relation#skip_query_cache_if_necessary'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation.rb:984:in 'ActiveRecord::Relation#exec_main_query'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation.rb:962:in 'block in ActiveRecord::Relation#exec_queries'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation.rb:1018:in 'ActiveRecord::Relation#skip_query_cache_if_necessary'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation.rb:956:in 'ActiveRecord::Relation#exec_queries'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation.rb:742:in 'ActiveRecord::Relation#load'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation.rb:264:in 'ActiveRecord::Relation#records'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation\/finder_methods.rb:572:in 'ActiveRecord::FinderMethods#find_take'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation\/finder_methods.rb:121:in 'ActiveRecord::FinderMethods#take'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation\/finder_methods.rb:520:in 'ActiveRecord::FinderMethods#find_one'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation\/finder_methods.rb:499:in 'ActiveRecord::FinderMethods#find_with_ids'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation\/finder_methods.rb:92:in 'ActiveRecord::FinderMethods#find'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/querying.rb:23:in 'ActiveRecord::Querying#find'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/core.rb:246:in 'ActiveRecord::Core::ClassMethods#find'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/globalid-1.2.1\/lib\/global_id\/locator.rb:162:in 'GlobalID::Locator::BaseLocator#locate'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/globalid-1.2.1\/lib\/global_id\/locator.rb:210:in 'block in GlobalID::Locator::UnscopedLocator#locate'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/globalid-1.2.1\/lib\/global_id\/locator.rb:220:in 'block in GlobalID::Locator::UnscopedLocator#unscoped'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation.rb:929:in 'ActiveRecord::Relation#_scoping'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/relation.rb:467:in 'ActiveRecord::Relation#scoping'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/scoping\/default.rb:51:in 'ActiveRecord::Scoping::Default::ClassMethods#unscoped'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/globalid-1.2.1\/lib\/global_id\/locator.rb:220:in 'GlobalID::Locator::UnscopedLocator#unscoped'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/globalid-1.2.1\/lib\/global_id\/locator.rb:210:in 'GlobalID::Locator::UnscopedLocator#locate'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/globalid-1.2.1\/lib\/global_id\/locator.rb:31:in 'GlobalID::Locator.locate'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/arguments.rb:145:in 'ActiveJob::Arguments#deserialize_global_id'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/arguments.rb:129:in 'ActiveJob::Arguments#deserialize_argument'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/arguments.rb:43:in 'block in ActiveJob::Arguments#deserialize'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/arguments.rb:43:in 'Array#map'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/arguments.rb:43:in 'ActiveJob::Arguments#deserialize'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/core.rb:210:in 'ActiveJob::Core#deserialize_arguments'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/core.rb:200:in 'ActiveJob::Core#deserialize_arguments_if_needed'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/execution.rb:50:in 'ActiveJob::Execution#perform_now'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/instrumentation.rb:26:in 'block in ActiveJob::Instrumentation#perform_now'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/railties\/job_runtime.rb:13:in 'block in ActiveRecord::Railties::JobRuntime#instrument'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/instrumentation.rb:40:in 'block in ActiveJob::Instrumentation#instrument'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport-7.1.3.2\/lib\/active_support\/notifications.rb:206:in 'block in ActiveSupport::Notifications.instrument'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport-7.1.3.2\/lib\/active_support\/notifications\/instrumenter.rb:58:in 'ActiveSupport::Notifications::Instrumenter#instrument'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport-7.1.3.2\/lib\/active_support\/notifications.rb:206:in 'ActiveSupport::Notifications.instrument'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/instrumentation.rb:39:in 'ActiveJob::Instrumentation#instrument'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activerecord-7.1.3.2\/lib\/active_record\/railties\/job_runtime.rb:11:in 'ActiveRecord::Railties::JobRuntime#instrument'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/instrumentation.rb:26:in 'ActiveJob::Instrumentation#perform_now'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/logging.rb:18:in 'block in ActiveJob::Logging#perform_now'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/logging.rb:27:in 'ActiveJob::Logging#tag_logger'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/logging.rb:18:in 'ActiveJob::Logging#perform_now'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/execution.rb:30:in 'block in ActiveJob::Execution::ClassMethods#execute'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport-7.1.3.2\/lib\/active_support\/callbacks.rb:121:in 'block in ActiveSupport::Callbacks#run_callbacks'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/railtie.rb:67:in 'block (4 levels) in <class:Railtie>'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport-7.1.3.2\/lib\/active_support\/reloader.rb:77:in 'block in ActiveSupport::Reloader.wrap'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport-7.1.3.2\/lib\/active_support\/execution_wrapper.rb:92:in 'ActiveSupport::ExecutionWrapper.wrap'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport-7.1.3.2\/lib\/active_support\/reloader.rb:74:in 'ActiveSupport::Reloader.wrap'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/railtie.rb:66:in 'block (3 levels) in <class:Railtie>'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport-7.1.3.2\/lib\/active_support\/callbacks.rb:130:in 'BasicObject#instance_exec'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport-7.1.3.2\/lib\/active_support\/callbacks.rb:130:in 'block in ActiveSupport::Callbacks#run_callbacks'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activesupport-7.1.3.2\/lib\/active_support\/callbacks.rb:141:in 'ActiveSupport::Callbacks#run_callbacks'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/execution.rb:28:in 'ActiveJob::Execution::ClassMethods#execute'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/activejob-7.1.3.2\/lib\/active_job\/queue_adapters\/async_adapter.rb:70:in 'ActiveJob::QueueAdapters::AsyncAdapter::JobWrapper#perform'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/concurrent-ruby-1.2.3\/lib\/concurrent-ruby\/concurrent\/executor\/ruby_thread_pool_executor.rb:359:in 'Concurrent::RubyThreadPoolExecutor::Worker#run_task'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/concurrent-ruby-1.2.3\/lib\/concurrent-ruby\/concurrent\/executor\/ruby_thread_pool_executor.rb:350:in 'block (3 levels) in Concurrent::RubyThreadPoolExecutor::Worker#create_worker'\r\n<internal:kernel>:191:in 'Kernel#loop'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/concurrent-ruby-1.2.3\/lib\/concurrent-ruby\/concurrent\/executor\/ruby_thread_pool_executor.rb:341:in 'block (2 levels) in Concurrent::RubyThreadPoolExecutor::Worker#create_worker'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/concurrent-ruby-1.2.3\/lib\/concurrent-ruby\/concurrent\/executor\/ruby_thread_pool_executor.rb:340:in 'Kernel#catch'\r\n\/Users\/jd\/.rbenv\/versions\/3.3.0-dev\/lib\/ruby\/gems\/3.4.0+0\/gems\/concurrent-ruby-1.2.3\/lib\/concurrent-ruby\/concurrent\/executor\/ruby_thread_pool_executor.rb:340:in 'block in Concurrent::RubyThreadPoolExecutor::Worker#create_worker'\r\nI, [2024-02-26T08:35:13.250917 #15533]  INFO -- :   Disk Storage (2.5ms) Uploaded file to key: 75pq9av97yqko21f2e569403am0z (checksum: nXBd+VhZDQYMFWd1w4C1Ig==)\r\nI, [2024-02-26T08:35:13.263228 #15533]  INFO -- : Enqueued ActiveStorage::AnalyzeJob (Job ID: 6031c941-5563-44df-98ce-747a520133e9) to Async(default) with arguments: #<GlobalID:0x0000000163dbcd10 @uri=#<URI::GID gid:\/\/test-app\/ActiveStorage::Blob\/2>>\r\nD, [2024-02-26T08:35:13.263642 #15533] DEBUG -- :   Disk Storage (0.2ms) Generated URL for file at key: 75pq9av97yqko21f2e569403am0z (https:\/\/www.example.com\/rails\/active_storage\/disk\/eyJfcmFpbHMiOnsiZGF0YSI6eyJrZXkiOiI3NXBxOWF2OTd5cWtvMjFmMmU1Njk0MDNhbTB6IiwiZGlzcG9zaXRpb24iOiJpbmxpbmU7IGZpbGVuYW1lPVwicmFpbHMtbG9nby5wbmdcIjsgZmlsZW5hbWUqPVVURi04JydyYWlscy1sb2dvLnBuZyIsImNvbnRlbnRfdHlwZSI6ImltYWdlL3BuZyIsInNlcnZpY2VfbmFtZSI6ImxvY2FsIn0sImV4cCI6IjIwMjQtMDItMjZUMTQ6NDA6MTMuMjYzWiIsInB1ciI6ImJsb2Jfa2V5In19--9a9a56df97f7ce64817bdb522a5501f11201d8f1\/rails-logo.png)\r\nF\r\n\r\nFailure:\r\nBugTest#test_url_methods_throw_error [active-storage-51123.rb:82]:\r\nNoMethodError expected but nothing was raised.\r\n\r\n\r\nbin\/rails test active-storage-51123.rb:81\r\n\r\n\r\n\r\nFinished in 0.070641s, 28.3122 runs\/s, 42.4683 assertions\/s.\r\n2 runs, 3 assertions, 1 failures, 0 errors, 0 skips\r\n```\r\n<\/details>"],"labels":["activestorage"]},{"title":"Fix AllowBrowser versions","body":"### Motivation \/ Background\r\n\r\nThe new AllowBrowser feature was added in #50505 . It permits setting minimum browser versions for an application, defines and documents a `:modern` version-set as requiring a list of certain features, and adds that option to the default config for new apps.\r\n\r\nThis PR has been created to make two minor corrections to `:modern`, one to its versions, one to its documentation.\r\n\r\n### Detail\r\n\r\n1. In 24264baeae1d57743aa87b4fcb88e55a42cc850a, adjust the `:modern` browser versions to match the description of required features. Specifically, CSS nesting isn't supported by Chrome until 120, Opera until 106 ([1](https:\/\/caniuse.com\/css-nesting), [2](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/CSS\/Nesting_selector#browser_compatibility)).\r\n2. In ff0291291a2c93f40c92a306f4fc3025bd8bdbc0, remove badging from the documentation's list of required features, because it's still a [spec](https:\/\/www.w3.org\/TR\/badging\/) that isn't fully implemented by any current browser ([1](https:\/\/caniuse.com\/mdn-api_notification_badge), [2](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Badging_API#browser_compatibility)).\r\n\r\n### Additional information\r\n\r\nPersonally I'm not convinced this feature will be a good default for new apps, but if it's going to be offered, it should be correct for its stated purpose.\r\n\r\nFor fun, I benchmarked `UserAgent.parse.browser` on my laptop and it runs in about 40 microseconds, which is faster than I'd expected. But the runtime `require \"useragent\"` added 30 milliseconds to the first request.\r\n\r\nThe `useragent` gem was [last updated](https:\/\/github.com\/gshutler\/useragent) five years ago, and its browser recognition code is all [7 to 9 years old](https:\/\/github.com\/gshutler\/useragent\/tree\/master\/lib\/user_agent\/browsers). It seems inappropriate to have a `:modern` default that doesn't recognize Edge (2015). There's a [fork by art19](https:\/\/github.com\/art19\/useragent) that recognizes Edge, but it adds 54 other browsers too, so it has 4x the LoC, and its `require` is 90 milliseconds. Something in-between might be nice.\r\n\r\nI made a [google spreadsheet](https:\/\/docs.google.com\/spreadsheets\/d\/13hz5ndUBDeTqAKwYCv5CyAMGpcCVkc5hwJ7Is7BG0qo\/edit#gid=0) listing browser versions that support each of the `:modern` features listed. The tl;dr is that badges and css nesting are the most-restrictive requirement for every major browser except Firefox (which was late to support css :has).","comments":[],"labels":["actionpack","railties"]},{"title":"ActionDispatch `recognize_path` trips over domain constraints","body":"### Steps to reproduce\r\n\r\nThe following line of code may (under rare conditions) cause problems:\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/44db6bbfcbe66ac5926f01f3b693a378552b752f\/actionpack\/lib\/action_dispatch\/routing\/route_set.rb#L888\r\n\r\nThis mock request works fine for most Rails apps, however, if the app handles multiple domains and contains domain specific constraints, things go kaboom. Say you have a constraint like this one:\r\n\r\n```ruby\r\nget '(*path)', to: \"domains#redirect\", constraints: ->(request) do\r\n  request.host != 'myservice.com'\r\nend\r\n```\r\n\r\n(Things such a `DomainsController` might do: Redirect \"www.myservice.com\" to \"myservice.com\" or redirect shortcuts such as \"yourproject.myservice.com\" to \"myservice.com\/yourproject\".)\r\n\r\nWith such an entry in `routes.rb`, the mock request misbehaves because it is only fed with the `path` and therefore uses the [hardcoded fallback server name](https:\/\/github.com\/rack\/rack\/blob\/ae7d6a171963a70918b4e43525408c571a3f28fe\/lib\/rack\/mock_request.rb#L105) \"example.org\". And since `\"example.org\" != \"myservice.com\"`, the remainder of `recognize_path` works off the wrong route.\r\n\r\nThe solution is quite simple, something along the lines of:\r\n\r\n```ruby\r\n# replace...\r\nenv = Rack::MockRequest.env_for(path, method: method)\r\n\r\n# with...\r\nenv = Rack::MockRequest.env_for(url_helpers.root_url.delete(r{\/$}) + path, method: method)\r\n```\r\n\r\nBy passing the real URL instead of just the path, the mock request no longer uses the fallback but hits the router as a real request would.\r\n\r\nI'll work around this for now and take a look at the corresponding tests to check whether I can solder together a PR.\r\n\r\n### System configuration\r\n**Rails version**: 6.1.7.6 (but the code hasn't changed on `main` as of today)\r\n\r\n**Ruby version**: 3.1.4\r\n","comments":[],"labels":["actionpack"]},{"title":"Handle empty array value in query builder's tuple syntax","body":"Specifically, `.where([:id] => [])` is now equivalent to `where(:id => [])`.\r\n\r\n### Motivation \/ Background\r\n\r\nThis behaviour fixes `#collection_singular_ids=` for relations with composite query constraints when used in forms, as `ids_writer` compacts blank values before looking up matching records, efectively calling `.where(primary_key => [])` when, for example, all checkboxes were deselected by a user on a form.\r\n\r\nThe error indicative of the behaviour that this commit attempts to fix: `Arel::Visitors::UnsupportedVisitError: Unsupported argument type: NilClass. Construct an Arel node instead.`\r\n\r\n### Detail\r\n\r\n`#reduce` returns `nil` when operating on empty collections. This commit adds a separate branch for handling an empty query set in `PredicateBuilder#grouping_queries`.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.","comments":[">This behaviour fixes #collection_singular_ids= for relations with composite query constraints when used in forms, as ids_writer compacts blank values before looking up matching records, efectively calling .where(primary_key => []) when, for example, all checkboxes were deselected by a user on a form.\r\n\r\nIs this a fix for https:\/\/github.com\/rails\/rails\/issues\/51129 ?\r\n\r\nThe change looks clean and makes sense \ud83d\udc4d \r\n\r\n\r\n\r\n\r\n",">efectively calling .where(primary_key => [])\r\n\r\nAlso doesn't change the fact that this PR is useful but I wonder if we could look into `ids_writer` and avoid building relation completely if we know there is no `ids` to load records by. It's not going to result in a visible performance increase as long as an empty relation doesn't result in a db query but something I find to be a cleaner approach in general\r\n\r\n","> Is this a fix for #51129 ?\r\n\r\nNo, the two are distinct, I just happened to discover them in the same context, so the wording might be similar. I have a fix for that one half-done, as in the code changes are really simple, but I need to write succinct test cases before changing the code.\r\n\r\nThank you for your feedback. I'll prepare update to this PR ASAP.","This is a very similar version that extends relation tests with no-query checks and moves handling of empty values up a level to preserve unscoping ability.\r\n\r\n@nvasilevski thank you for pointing me at \"make no queries\" problem, it made me test unscoping behaviour, which showed a deficiency I overlooked in my original code.\r\n\r\n@matthewd I ended up not using Arel tautology in this solution. I have a [separate branch](https:\/\/github.com\/Slotos\/rails\/tree\/arel-impossibility) prepared, that adds test coverage to your work, adds `impossible?` predicate to `NodeExpression` and makes use of it in `WhereClause#contardiction?`. I do believe that that's an improvement, because it removes the use of magic strings and allows resolving nested conditions as impossible\/contradictory. I'll publish it as a separate PR to keep the scope focused.","@nvasilevski what would be the process for getting this PR merged? I'm reluctant to resolve merge conflicts, as they are likely to emerge anew with other PRs being merged."],"labels":["activerecord"]},{"title":"Change Default Variant Format from PNG to WEBP","body":"# Use WEBP as the default format for representations\r\n\r\nThis pull request updates the `default_variant_format` method in the `representable.rb` file. Previously, the default image format was PNG. With this change, the default image format is now WEBP.\r\n\r\nThis change is made to improve the performance of our web pages, as [all major browsers support WEBP images](https:\/\/caniuse.com\/webp), which are generally smaller in size compared to PNG images, without any significant loss in image quality. This will help in faster loading of images and improve the overall user experience.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["What about introducing a `default_image_format` config value? That way, the change of the default to webp could be opt-in initially, and in a later version, the default could change. \n\nI can imagine cases where suddenly switching to webp could create some issues, as new variants will be created for existing attachments. "],"labels":["needs work","activestorage"]},{"title":"[Fix #33155] Set through target for new records","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nFixes #33155\r\n\r\n### Detail\r\n\r\nUpdates `#load_target` in `ActiveRecord::Associations::CollectionAssociation` and `ActiveRecord::Associations::Association` (which is inherited by `ActiveRecord::Associations::SingularAssociation`) to set the through association target using the middle record when the current record has not yet been persisted.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\nThere also seems to have been [another attempted patch](https:\/\/github.com\/rails\/rails\/pull\/38562) which didn't end up getting merged.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Rails 7.1.* Deserializes Date Range with Infinities incorrectly with Postgres adapter","body":"### Steps to reproduce\r\n- Create a table with a postgres date range column (tsrange for example)\r\n- Create an entry in that table witha date range that has infinity on one end and save it\r\n  `range_test = RangeTest.create!(date_range: (DateTime.new(2024,1,1)...DateTime::Infinity.new))`\r\n- Reload that entry from the database (deserialize it)\r\n  `range_test.reload`\r\n- Look at the infinite part of the range now and it no longer is infinite... it is nil\r\n  `puts range_test.date_rage.end.class` returns `NilClass`\r\n\r\nIn previous version of rails (7.0.8 for example), it actuallly returned a Float::INFINITY class... this was a little off, but closer to the mark than nil.\r\n\r\nAt least with that, we could to a check like `date_range.end.to_s == 'Infinity'` in our logic, which looks reasonable\r\n\r\n```ruby\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  # gem \"rails\", '= 7.0.8'\r\n  gem \"rails\", '~> 7.1.3'\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"pg\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# You may need to change your pg settings accordingly\r\ndb_config = {\r\n  adapter: 'postgresql',\r\n  database: 'range_test',\r\n  host: '::1', # Change this to your PostgreSQL host\r\n  port: 5432,\r\n  username: 'postgres', # Change this to your PostgreSQL username\r\n  password: 'test'  # Change this to your PostgreSQL password\r\n}\r\n\r\nbegin\r\n  ActiveRecord::Base.establish_connection(db_config.except(:database))\r\n  ActiveRecord::Base.connection.drop_database(db_config[:database]) rescue nil\r\n  ActiveRecord::Base.connection.create_database(db_config[:database])\r\nend\r\nActiveRecord::Base.establish_connection(db_config)\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :range_tests do |t|\r\n    t.tsrange :date_range\r\n    t.timestamps\r\n  end\r\nend\r\n\r\nclass RangeTest < ActiveRecord::Base\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_date_range_infinity_deserialization\r\n    range = (DateTime.new(2024,1,1)...DateTime::Infinity.new)\r\n    range_test = RangeTest.create!(date_range: range)\r\n    assert_equal DateTime::Infinity, range_test.date_range.end.class\r\n    # Need to reload to deserialize the range back out from the DB to see the problem\r\n    range_test.reload\r\n    # Interestingly, even before rails 7.1.3, the end range would deserialize to a Float::INFINITY\r\n    # So we're checking the to_s representation to show the change in behavior\r\n    assert_equal \"Infinity\", range_test.date_range.end.to_s\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\nFrankly, it was a _bit_ of a bug before in that this would return a Float::INFINITY object before, where it should have returned a DateTime::INFINITY. At least with that you could, for example, check `date_range.end.to_s == 'Infinity'` for some kind of logical checking for an infinite range start or end.\r\n\r\nReturning nil seems to be undocumented change in behavior at the very least.\r\n\r\n### Actual behavior\r\nThe date range returns a nil object for whichever end of the range may be infinite.\r\n\r\n### System configuration\r\n**Rails version**: 7.1.3\r\n\r\n**Ruby version**: 3.2.2\r\n\r\n","comments":["That was changed in https:\/\/github.com\/rails\/rails\/pull\/45099. So I would say that this is expected behavior - the postgres adapter correctly returns an infinite range. Its just unfortunate that ruby represents one of its ends as `nil`."],"labels":["activerecord","With reproduction steps"]},{"title":"Accept a `child_index` lambda on `fields_for` with an argument","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nWhile `fields_for` currently accepts a lambda as an argument for `child_index`, that lambda is called without any arguments. Being that we are enumerating the association on `fields_for` at the time the lambda is called, we have an opportunity to pass the child of the association down to the lambda.  This could simplify the case where you may want to use the `id` of an Active Record object as the index.  So with this change you could do something like this:\r\n\r\n```html.erb\r\n<%= author_form.fields_for :books, child_index: ->(book) { book.id } do |book_form| %>\r\n  <%= book_form.text_field :name %>\r\n<% end %>\r\n```\r\n\r\nPrior to this, you would have had to enumerate the association yourself:\r\n\r\n```html.erb\r\n<% author.books.each do |book| %>\r\n  <%= author_form.fields_for :books, book, child_index: book.id do |book_form| %>\r\n    <%= book_form.text_field :name %>\r\n  <% end %>\r\n<% end %>\r\n```\r\n\r\n### Detail\r\n\r\nAccepts passing the association's child as an argument in a lambda as the `child_index` option in `fields_for`.\r\n\r\n### Additional information\r\n\r\nUsed [PR 19661](https:\/\/github.com\/rails\/rails\/pull\/19661) as a guide when passing a lambda to `child_index` was originally introduced.\r\n\r\n\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["actionview"]},{"title":"Fix `db:test:prepare` when using sharding and test primary config is named differently than development primary config","body":"When using sharding and the `test` primary config is named differently than `development` primary config, like\r\n```yml\r\ndevelopment:\r\n  primary: # can be any name, not necessary 'primary'\r\n    adapter: sqlite3\r\n    database: dev_db\r\n  secondary:\r\n    adapter: sqlite3\r\n    database: secondary_dev_db\r\n    schema_dump: false\r\ntest:\r\n  primary_test: # note the different name\r\n    adapter: sqlite3\r\n    database: test_db\r\n  secondary_test:\r\n    adapter: sqlite3\r\n    database: secondary_test_db\r\n    schema_dump: false\r\n```\r\n\r\n rails is unable to use the default `schema.rb` file when running `rails db:test:prepare`. It generates the following error:\r\n```\r\napp\/db\/shard_one_test_schema.rb doesn't exist yet. Run `bin\/rails db:migrate` to create it, then try again. \r\nIf you do not intend to use a database, you should instead alter app\/config\/application.rb to limit the \r\nframeworks that will be loaded.\r\n```\r\n\r\nWhen they both are named the same, rails just \"erroneously\" uses the one from the `development` configuration and it succeeds.","comments":["> I think this change isn't right because the configurations can't possibly work this way when running the tests. If you have `connects_to shards: { one: :primary, two: :secondary }` then it won't connect to `test_primary` or `test_secondary`. You'll get a connection not established error when running tests.\r\n\r\nWe dynamically configure shards by something like\r\n```ruby\r\nconnects_to shards: { \r\n  main: { reading: Rails.env.to_sym, writing: Rails.env.to_sym },\r\n  other: ...\r\n```\r\n\r\nand\r\n```yml\r\n# config\/database.yml\r\ndevelopment:\r\n  development:\r\n    # ...\r\n  other:\r\n    # ...\r\n\r\ntest:\r\n  test:\r\n    # ...\r\n  other:\r\n    # ...\r\n```","The entire point of building the 3-tier config was for apps to stop doing \"#{Rails.env.to_sym}_name\" when defining connections. \ud83d\ude15 ","We have different number of shards for different environments and dynamically configure connections to them by reading the `database.yml` contents and calling `connects_to`. For each env, we have a kinda main shard which is named as `Rails.env`.\r\n\r\nWdyt about this approach? Should I rename `Rails.env` shard for each env to something like `primary`\/`main`\/etc and then specify it as first in the `connects_to` (for it to become the default), something like:\r\n```ruby\r\nshards = calculate_shards\r\n# => { primary: { reading: :primary, writing: :primary }, ...the rest... }\r\nconnects_to shards: shards\r\n```"],"labels":["activerecord","railties"]},{"title":"Encryption: allow turning on `support_unencrypted_data` at a per-attribute level","body":"https:\/\/github.com\/rails\/rails\/pull\/49072 allowed you to turn `support_unencrypted_data` on a global level, then turn it off for specific attributes. But it didn't allow the inverse: you couldn't turn the config off globally, and then turn it on for a specific attribute.\r\n\r\nThis PR adds support for that, which should make the setting's behaviour less surprising.\r\n","comments":[],"labels":["activerecord"]},{"title":"Add a new option `early_expiration` to `ActiveSupport::Cache::Store#fetch` to avoid dog pile effect","body":"### Motivation \/ Background\r\n\r\nI encountered an issue that `:race_condition_ttl` can still suffer from dog pile effect in the use case of high intense services because during the period of extending expiration time, other process can still access the same entry and try to regenerate the cache at the same time.\r\n\r\nWhile searching for solutions, I realized probabilistic early expiration approach might be a simpler and more efficient solution. It is a technique to avoid the dog pile effect (aka cache stampede) by expiring the cache before the TTL.\r\n\r\nI implemented this method based on the paper[^1] which uses probabilistic decision with the exponential function `Exp(\u03bb)` and demonstrates to be optimal.\r\n\r\n[^1]: [Vattani, A.; Chierichetti, F.; Lowenstein, K. (2015), Optimal Probabilistic Cache Stampede Prevention, Proceedings of the VLDB Endowment, VLDB](https:\/\/cseweb.ucsd.edu\/~avattani\/papers\/cache_stampede.pdf)\r\n\r\n### Detail\r\n\r\n1. Add new option `early_expiration` to `ActiveSupport::Cache::Store#fetch`.\r\n2. Add new method `ActiveSupport::Cache::Entry#should_expire_early?(beta: 1)`.\r\n4. Add new instance variable `@generation_time` to `ActiveSupport::Cache::Entry`.\r\n\r\nHere is a simple implementation to illustrate the approach:\r\n\r\n```ruby\r\ndef x_fetch(key, ttl, beta = 1)\r\n  value, delta, expiry = read(key)\r\n  if value.nil? || Time.now \u2212 delta * beta * Math.log(rand) \u2265 expiry\r\n    start = Time.now\r\n    value = yield\r\n    delta = Time.now \u2013 start\r\n    write(key, value, delta, ttl)\r\n  end\r\n  return value\r\nend\r\n```\r\n\r\n### Additional information\r\n\r\nI created a stacked histogram comparing the stampede sizes between `:race_condition_ttl` (fetch) and `:early_expiration` (x_fetch):\r\n\r\n![800k_histogram](https:\/\/github.com\/rails\/rails\/assets\/809410\/01dc5a69-4206-458e-ad76-c52637f9f00b)\r\n\r\nAs the histogram shows, `:early_expiration` has smaller stampede size compared to `:race_condition_ttl`.\r\n\r\nFor the definition of \"the stampede sizes\", please refer to [the paper](https:\/\/cseweb.ucsd.edu\/~avattani\/papers\/cache_stampede.pdf).\r\n\r\nNote that the benchmark is generated using 16 threads. The difference could be more significant with higher number of threads.\r\n\r\nFor more information, please refer to the [benchmark repository](https:\/\/github.com\/tonytonyjan\/rails_cache_stampede_benchmark).\r\n\r\nThe benchmark repository: https:\/\/github.com\/tonytonyjan\/rails_cache_stampede_benchmark\r\nThe paper: https:\/\/cseweb.ucsd.edu\/~avattani\/papers\/cache_stampede.pdf\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["`buildkite\/rails` failed because of the error:\r\n\r\n> Can not start microsoftedge 17.17134 (Windows 10)\r\n\r\nI am not sure if it is caused by the change. Please let me know what I can do next to pass the CI, thanks!","Hi @eileencodes. Wonder if you can help rerun buildkite again or maybe provide some tips that can direct me to pass the CI check. I would appreciate it \ud83d\ude4f\n"],"labels":["activesupport"]},{"title":"Don't clear the local cache on each requests with `with_local_cache`:","body":"### Motivation \/ Background\r\n\r\nThe `ActiveSupport::LocalCache::Middleware` clears the local cache after each requests, but when using the `with_local_cache` method, this could be counter intuitive as this method is supposed to use a local cache for the duration of the block:\r\n\r\n```ruby\r\nRails.cache.with_local_cache do\r\n  get \"\/\" \r\n  # Before this patch: Cache is cleared here\r\nend\r\n# After this patch: Cache is cleared here\r\n```\r\n\r\nAsserting on the state of the cache in an integration test isn't possible (by default in test environment the store is a NullStore), unless the cache strategy is temporary changed.\r\nThis patch makes it easier to check the cache after a request but also allow make subsequent requests to hit the cache.\r\n\r\n```ruby\r\nRails.cache.with_local_cache\r\n  get \"\/\"\r\n  get \"\/\"\r\n  assert_no_cache_miss\r\nend\r\n```\r\n\r\nThis Pull Request has been created because [REPLACE ME]\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["LINK 1"],"labels":["activesupport","railties"]},{"title":"[Fix #51095] Missing template error page showing incorrect view path example for nested controller path","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nFixes #51095\r\n\r\n### Detail\r\n\r\nUpdates the error page displayed when a view template is missing to account for nested controller paths in the suggested correct path for the missing template.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\nTesting steps: https:\/\/github.com\/rails\/rails\/issues\/51095#issuecomment-1945603654\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["actionpack","ready"]},{"title":"Missing view template error page example does not account for nested controller paths","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\n\r\nWhen routing with nested controller paths (e.g. [in this setup](https:\/\/github.com\/joshuay03\/missing-exact-template-nested-controller-demo-app\/blob\/92fc37b932d3a224886482d968bc3472d68dee18\/config\/routes.rb#L8-L10)), if a view template is missing for a nested controller, the error page dsiplayed suggests the incorrect expected path for the corresponding view template. This is pretty confusing if you're seeing this error for the very first time, which is how I ran into this since it happened to one of our Junior devs.\r\n\r\n<details>\r\n<summary>Error snapshot<\/summary>\r\n\r\n<img width=\"1728\" alt=\"Screenshot 2024-02-15 at 6 26 49\u202fPM\" src=\"https:\/\/github.com\/rails\/rails\/assets\/54629302\/c0c5c0c5-4d32-489f-a352-6e12d0c09ebe\">\r\n\r\n<\/details>\r\n\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n\r\nClone https:\/\/github.com\/joshuay03\/missing-exact-template-nested-controller-demo-app\r\nRun `bundle`\r\nRun `rails s`\r\nNavigate to `http:\/\/127.0.0.1:3000\/users\/1\/posts`\r\n\r\n### Expected behavior\r\n<!-- Tell us what should happen -->\r\n\r\nExample suggests that the view template needs to be located at `app\/views\/users\/posts\/index.html.erb.`\r\n\r\n### Actual behavior\r\n<!-- Tell us what happens instead -->\r\n\r\nExample suggests that the view template needs to be located at `app\/views\/posts\/index.html.erb.`\r\n\r\n### System configuration\r\n**Rails version**: 7.1.3, main\r\n\r\n**Ruby version**: 3.3.0\r\n","comments":["I've opened #51096 to fix this.\r\n\r\nTo test against the patch:\r\n\r\nClone https:\/\/github.com\/joshuay03\/missing-exact-template-nested-controller-demo-app\r\nCheckout the `patch` branch\r\nRun `bundle`\r\nRun `rails s`\r\nNavigate to `http:\/\/127.0.0.1:3000\/users\/1\/posts`\r\n\r\n<details>\r\n<summary>Error snapshot<\/summary>\r\n\r\n<img width=\"1728\" alt=\"Screenshot 2024-02-15 at 6 40 08\u202fPM\" src=\"https:\/\/github.com\/rails\/rails\/assets\/54629302\/74cb9bbe-6a1b-49e4-be90-738026df9d83\">\r\n\r\n<\/details>\r\n\r\n**Note:** You can also navigate to `http:\/\/127.0.0.1:3000\/users` on both the `main` and `patch` branches to ensure no regressions are being introduced with non-nested controller paths. Both should look like this:\r\n\r\n<details>\r\n<summary>Error snapshot<\/summary>\r\n\r\n<img width=\"1728\" alt=\"Screenshot 2024-02-15 at 6 52 21\u202fPM\" src=\"https:\/\/github.com\/rails\/rails\/assets\/54629302\/83fc95ad-7519-4734-b906-7ba2078a7ea6\">\r\n\r\n<\/details>"],"labels":["actionpack","attached PR"]},{"title":"Syntax errors are not presented correctly in ERB templates","body":"Another ERB regression. Here's the template:\r\n\r\n```\r\n<p style=\"color: green\"><%= notice %><\/p>\r\n\r\n<% content_for :title, \"Posts\" %>\r\n\r\n<h1>Posts<\/h1>\r\n\r\n<div id=\"posts\">\r\n  <%# @posts.each do |post| %>\r\n    <%#= render post %>\r\n    <p>\r\n      <%= link_to \"Show this post\", post %>\r\n    <\/p>\r\n  <% end %>\r\n<\/div>\r\n\r\n<%= link_to \"New post\", new_post_path %>\r\n```\r\n\r\nHere's the exception screen:\r\n\r\n![CleanShot 2024-02-14 at 14 19 08@2x](https:\/\/github.com\/rails\/rails\/assets\/2741\/84d72fe0-32e6-4597-9424-756af8f56480)\r\n","comments":["cc @rafaelfranca ","Confirmed the same is case with rails older version (seems to be desired). how do we want to take this forward.\r\n\r\nMinimum code to regenerate (syntax error in erb)\r\n```\r\n<%= fun( %>\r\n```\r\n\r\nShould it be all code to be moved to Extracted source?"],"labels":["actionpack","actionview"]},{"title":"Exceptions raised from templates should show template code not compiled methods","body":"Seems like we've regressed on exceptions raised from within ERB templates. They're showing the backtrace of the compiled method instead of the underlying template. That's not very helpful.\r\n\r\n![CleanShot 2024-02-14 at 08 36 52@2x](https:\/\/github.com\/rails\/rails\/assets\/2741\/0064e1df-78c8-466c-a2a0-1f498bfb6471)\r\n","comments":["I just tried to reproduce in a new Rails application using Rails on main and could not:\r\n\r\n<img width=\"1229\" alt=\"Screenshot 2024-02-14 at 2 35 26\u202fPM\" src=\"https:\/\/github.com\/rails\/rails\/assets\/47848\/07bb0c64-e615-4fcf-be96-041caefbbc56\">\r\n\r\nMy Ruby version is `ruby 3.2.2 (2023-03-30 revision e51014f9c0) [aarch64-linux]`.\r\n\r\nWhat is your Ruby version?\r\n","> I just tried to reproduce in a new Rails application using Rails on main and could not:\r\n> \r\n> <img alt=\"Screenshot 2024-02-14 at 2 35 26\u202fPM\" width=\"1229\" src=\"https:\/\/private-user-images.githubusercontent.com\/47848\/304854080-07bb0c64-e615-4fcf-be96-041caefbbc56.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDc5NDI3MDcsIm5iZiI6MTcwNzk0MjQwNywicGF0aCI6Ii80Nzg0OC8zMDQ4NTQwODAtMDdiYjBjNjQtZTYxNS00ZmNmLWJlOTYtMDQxY2FlZmJiYzU2LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAyMTQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMjE0VDIwMjY0N1omWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWFjZDgyYzAzNTA0ODQ1MTYyZDUyZDBjY2NkOTcwZTgxODgxMTY2MTQwNzI4MDg3ZWYzYTIzZDVhODRiNjQ1MWYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.MCS2IU5odww8SNzH-pCsop08mJOczJXzxhP7eWBEWdY\">\r\n> My Ruby version is `ruby 3.2.2 (2023-03-30 revision e51014f9c0) [aarch64-linux]`.\r\n> \r\n> What is your Ruby version?\r\n<img width=\"1026\" alt=\"image\" src=\"https:\/\/github.com\/rails\/rails\/assets\/73736217\/24e9e9ad-22da-432d-b718-5c777404645d\">\r\n\r\nI could reproduce it on an apple silicone using `ruby version 3.2.2`","I just tried on apple silicon and linux the following steps:\r\n\r\n```\r\nrails new --dev my_app\r\ncd my_app\r\nbin\/rails g scaffold posts title body\r\nbin\/rails db:migrate\r\n```\r\n\r\nThen I edited `posts\/index.html.erb` to add the invalid code, started the server and got the error pointing to the template. I'm also using 3.2.2.\r\n\r\nWhich steps did you take to reproduce?","Oh this is a strange one. This triggers the busted exception:\r\n\r\n```\r\n<ul>\r\n  <li><%= link_to post.title, post %><\/li>\r\n<\/ul>\r\n\r\n<%= link_to \"New book\", new_book_path %>\r\n```\r\n\r\nbut this does not:\r\n\r\n```\r\n<ul>\r\n  <li>\r\n    <%= link_to post.title, post %>\r\n  <\/li>\r\n<\/ul>\r\n\r\n<%= link_to \"New book\", new_book_path %>\r\n```","aha! I think maybe the compiled template line isn't matching the source line.","Just confirmed this also happens on 7.1","Minimum code to regenerate the issue -->\r\n\r\n```\r\n<li><%= link_to post.title, post %><\/li>\r\n```\r\nEven if empty spaces are present after closing braces it will result in showing compiled string.\r\n\r\n```\r\n<%= link_to post.title, post %>  <empty_spaces>\r\n```\r\n\r\n**Problem**\r\n1. File- `activesupport\/lib\/active_support\/core_ext\/erb\/util.rb` method - `tokenize`\r\n2. In this `tokenize` method we are not handling end text that is present after the code `%>`\r\n3. Because of this if empty spaces or text is present after code `%>` it will result in `raise NotImplementedError`\r\n4. And the final output will be the compiled code because this method will return nil.\r\n\r\n**Solution**\r\n1. Handle the edge case if some text is present at the end in string.\r\n```\r\n  unless source.eos? || source.exist?(\/#{start_re}|#{finish_re}\/m)\r\n     tokens << [:TEXT, source.rest]\r\n     source.terminate\r\n  end\r\n```\r\n\r\n"],"labels":["actionpack","actionview"]},{"title":"Use ruby file: \".ruby-version\" when possible","body":"Bundler has a nice new feature to get the ruby version from .ruby-version. Would be nice to take advantage of that when possible. So the default Gemfile should generate `ruby file: \".ruby-version\"` when we can.","comments":["I had to revert the change because it blocks devcontainers. See 707b5cb60616c86cd554ada2ef8754dd0ab5e72a.\r\n\r\nI'll reapply it when we have our own devcontainer ruby images.","Any reason why we are trying to add the Ruby version on the Gemfile? Right now, the only tool that actually doesn't know how to read `.ruby-version` is Heroku, and I'm pretty sure we can teach Heroku to read it.","The original addition was here:\r\n* #30007\r\n* #30016\r\n\r\nI don't recall whether there is now, or was historically, a difference in how Bundler will resolve a gemfile given the presence\/absense of a `ruby` directive -- beyond the obvious hard-stop if the running version doesn't match.\r\n\r\nIn that original PR, @deivid-rodriguez recommended `ruby RUBY_VERSION` instead of duplicating the value; that still strikes me as a bit of a warty [and tautological] spelling, even compared to the new `file:` syntax... but it does leave me wondering what we lose by just omitting the line entirely.","Spellings aside, the fact the `file:` syntax locks us so rigidly to a precise version (per 707b5cb60616c86cd554ada2ef8754dd0ab5e72a) is IMO, Quite Unfortunate. ","We can also do `ruby \"~> 3.2.0\"` if we need to specify a version to match more what you expect this check do to. It is still duplicating the value, but at least it will not hard fail anymore.\r\n\r\nSo far, I don't know what we lose by omitting the `ruby` line. If all tooling is already reading from `.ruby-version`, that alone should keep consistent resolution for bundler.","I think `ruby` DSL just adds an extra dependency on the language version for your app. I think people will typically use it when directly depending on Ruby features particular to some Ruby versions. Transitive dependencies may or may not add a dependency on the language version. By using the Ruby DSL, you make what the application supports explicit. As mentioned, `ruby` can take a relaxed or exact requirement, making the application more or less picky when run on different rubies.\r\n\r\nI think it's up to each user\/use case what to use. Maybe for freshly generated Rails apps it's indeed best to be as flexible as possible by avoiding the `ruby` line altogether."],"labels":["railties","attached PR"]},{"title":"Run tests with `--profile` on CI","body":"~~Debugging why a CI job get stuck is particularly painful as the output doesn't contain any information whatsoever.~~\r\n\r\n~~By enabling `--verbose` we ensure the last line of the CI job is the name of the test that got stuck, helping debug.~~\r\n\r\nSimilarly, it's hard to figure out why a particular job is slow, so enabling `--profile` would make it easy to spot some low hanging fruits to improve CI speed.\r\n\r\nEdit: `--verbose` is a bit too much, so leaving it out for now.","comments":["I'm a bit on the fence about the `--verbose`. This makes Active Record jobs output 10k lines, which is a bit much.\r\n\r\nMaybe an alternative solution could be a reporter that print the current test in `prerecord` but then clear the line. \r\n\r\nHowever `--profile` is nice to have, e.g. :\r\n\r\n```\r\nFinished in 210.366616s, 44.7124 runs\/s, 150.8177 assertions\/s.\r\n9406 runs, 31727 assertions, 0 failures, 0 errors, 20 skips\r\n \r\nTop 10 slowest tests (44.83 seconds, 21.4% of total time):\r\n  ActiveRecord::LoadAsyncMultiThreadPoolExecutorTest#test_reset\r\n    10.0746 seconds test\/cases\/relation\/load_async_test.rb:410\r\n  ActiveRecord::ConnectionAdapters::ConnectionSwappingNestedTest#test_application_record_prevent_writes_can_be_changed\r\n    10.0296 seconds test\/cases\/connection_adapters\/connection_swapping_nested_test.rb:437\r\n  EagerLoadingTooManyIdsTest#test_eager_loading_too_many_ids\r\n    5.0744 seconds test\/cases\/associations\/eager_test.rb:46\r\n  PostgresqlEnumTest#test_schema_dump_scoped_to_schemas\r\n    3.2360 seconds test\/cases\/adapters\/postgresql\/enum_test.rb:224\r\n  ActiveRecord::DatabaseTasksDumpSchemaTest#test_db_dir_ignored_if_included_in_schema_dump\r\n    3.0289 seconds test\/cases\/tasks\/database_tasks_test.rb:476\r\n  SchemaDumperTest#test_no_dump_errors\r\n    3.0049 seconds test\/cases\/schema_dumper_test.rb:106\r\n  ActiveRecord::DatabaseTasksDumpSchemaTest#test_ensure_db_dir\r\n    2.9810 seconds test\/cases\/tasks\/database_tasks_test.rb:457\r\n  SecurePasswordTest#test_authenticate_by_takes_the_same_amount_of_time_regardless_of_whether_record_is_found\r\n    2.8800 seconds test\/cases\/secure_password_test.rb:27\r\n  PostgresqlHstoreTest#test_disable_enable_hstore\r\n    2.7333 seconds test\/cases\/adapters\/postgresql\/hstore_test.rb:42\r\n  EagerLoadingTooManyIdsTest#test_preloading_too_many_ids\r\n    1.7881 seconds test\/cases\/associations\/eager_test.rb:42\r\n```","I'm not sure how I feel about enabling this for every run, railties already is especially noisy. While I have a PR to fix that, I'm guessing there are cases where finding the failure in a sea of profile output might negatively impact developer experience.","> railties already is especially noisy.\r\n\r\nIs it? Thing is it's the one for which I want this the most because it's the current CI bottleneck, so I'd like to find way to make it faster.\r\n\r\nI guess we could have `--profile` not print anything on failure. ","> Is it?\n\nSorry I was confused with --verbose, carry on  \ud83d\ude02\n\n> Thing is it's the one for which I want this the most because it's the current CI bottleneck, so I'd like to find way to make it faster.\n\nThe PR I was referencing is #49679, which also has the affect of speeding up the tests a bit by stubbing some missed bundle \/ rails install commands.\n\n\n\n"],"labels":["actionmailer","actionpack","activemodel","activerecord","activesupport","railties","actionview","activejob","actioncable","activestorage","actionmailbox","actiontext"]},{"title":"Fix #51067 create_table if_not_exists guard S prevent force drop_table","body":"Solving https:\/\/github.com\/rails\/rails\/issues\/51067\r\n\r\nI'm only familiar with writing rails tests in rspec, I wrote a test after skimming the other syntax in the file but please let me know if there is a better way. `record.reload` should raise an exception if the record was deleted by `create_table` dropping the table.\r\n\r\n> [!NOTE]\r\n> Currently limited to a web editor so I don't have the ability to squash commits or run the full test suite, will try to grab some time to clean up the branch and validate tests when my personal machine is accessible\r\n\r\n<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request has been created because https:\/\/github.com\/rails\/rails\/issues\/51067\r\n\r\n### Detail\r\n\r\nThis Pull Request changes `create_table` to ignore the `force` option (which drops the table) if the `if_not_exists` option is present\r\n\r\n### Additional information\r\n\r\nIf you copy a `create_table` migration from a schema dump and add the `if_not_exists` guard but forget to remove `force`, it will drop your table when you migrate it. \r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"create_table `force` option drops table when `if_not_exists` option is present","body":"The problem is here:\r\nhttps:\/\/github.com\/rails\/rails\/blob\/36c1591bcb5e0ee3084759c7f42a706fe5bb7ca7\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/schema_statements.rb#L293-L300\r\n\r\nI can't submit this from my work computer, but can somebody put up a PR to make this change to L299:\r\n```ruby\r\ndrop_table(table_name, force: force, if_exists: true) unless td.if_not_exists\r\n```\r\n\r\nEdge case where this occurs:\r\nAdding guarded migrations to make migration schema consistent with schema dump for DB that has migrations applied to it that are not in the schema history.\r\nIf you copy the table definition from the schema dump and add the `if_not_exists`, running the migration will drop the table if it exists","comments":[],"labels":["activerecord","attached PR"]},{"title":"Fix destroy of has_one with multiple belongs_to","body":"With a bi-directional has one through association, where the join model belongs to each parent with `dependent: :destroy`, destroying either parent should destroy the through record and the other parent.\r\n\r\n    class Left < ActiveRecord::Base\r\n      has_one :middle, dependent: :destroy\r\n      has_one :right, through: :middle\r\n    end\r\n\r\n    class Middle < ActiveRecord::Base\r\n      belongs_to :left, dependent: :destroy\r\n      belongs_to :right, dependent: :destroy\r\n    end\r\n\r\n    class Right < ActiveRecord::Base\r\n      has_one :middle, dependent: :destroy\r\n      has_one :left, through: :middle\r\n    end\r\n\r\nHowever this only worked from one end.  When destroying the \"non-working\" end, the join model was correctly destroyed but the other end was not.\r\n\r\nIn the example above:\r\n\r\n- `right.destroy` correctly destroys its `middle` and its `left`;\r\n- `left.destroy` destroys its `middle` but not its `right`.\r\n\r\nThe end which worked depended on the order of `belongs_to` statements in the join model.\r\n\r\nThis commit ensures that the no matter which end you destroy, the far end is destroyed (along with the join record).\r\n\r\nFixes #50948.\r\n\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["@Edouard-chin All the tests are passing now.  Ready for you to look at again.","@Edouard-chin Thanks for reviewing!  Presumably I should combine all the commits into a single commit and rewrite the commit message?","Yes please :). Someone from the core team will give this the final merge when they get a chance.\r\n\r\nThanks for your work on this!","All done!  Thanks for all the guidance :-)","The build failure is due to unrelated test failures in ActiveStorage.","> Someone from the core team will give this the final merge when they get a chance.\r\n\r\n@Edouard-chin Is there a way to get this noticed by the core team?","> Is there a way to get this noticed by the core team?\r\n\r\nI added it to the next 7.1 milestone so it should be reviewed before the next release. If you want it merged quicker you could bring it up on [discord](https:\/\/discord.gg\/d8N68BCw49)","@skipkayhil Thank you."],"labels":["activerecord"]},{"title":"has_many through alias_method","body":"We are trying to do something like this:\r\n\r\n```\r\n  has_many :source_tracks\r\n  alias_method :source_objects, :source_tracks\r\n  has_many :source_object_genres, through: :source_objects\r\n```\r\n\r\nHowever it seems like ActiveRecord does not recognize the alias_method for source_objects:\r\n\r\n```\r\nActiveRecord::HasManyThroughAssociationNotFoundError: Could not find the association :source_objects\r\n```\r\n\r\n Is that something that could get added?\r\n\r\n### System configuration\r\n**Rails version**: 7.1.3\r\n**Ruby version**: 3.2.1\r\n","comments":["Similarly this isn't working either on the alias_method:\r\n\r\n```\r\nUTrack.where(id: u_object_ids).includes(:source_objects)\r\n```\r\nor\r\n\r\n```\r\nActiveRecord::Associations::Preloader.new(records: u_objects, associations: [:source_objects]).call\r\n```\r\n\r\n","I guess it would need something like an alias_association ","Hey, thanks for the report!\r\n\r\n>I guess it would need something like an alias_association\r\n\r\nThis is something that is being considered but hasn't gain much traction due to use-cases not being very clear https:\/\/github.com\/rails\/rails\/pull\/49801\r\n\r\nIt is expected that `alias_method` won't be sufficient to provide capability of aliasing an existing association, but perhaps you could achieve this by defining one more association with a different name, like:\r\n\r\n```ruby\r\n  has_many :source_tracks\r\n  has_many :source_objects, class_name: \"SourceTrack\"\r\n  has_many :source_object_genres, through: :source_objects\r\n```\r\n\r\n\r\n","Thanks @nvasilevski we are using this solution, however this is causing other issues when loading relations. So for example when doing this:\r\n\r\n```\r\nUTrack.includes(:source_tracks).each{ |ut| ut.source_objects }\r\n```\r\n\r\nThe preloading here doesn't work as now the relations source_objects and source_tracks are different even though they yield the same results."],"labels":["activerecord"]},{"title":"Do not force limits on nested records marked for destruction.","body":"Fixes #51029\r\n\r\n<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request has been created because the limits for nested attributes didn't reject records marked for destruction.\r\n\r\n### Detail\r\n\r\nThis Pull Request ensures records marked for destruction won't interfere on limits.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"ActiveModel::Dirty is broken in after_commit","body":"#45280 broke the [expected and documented](https:\/\/github.com\/rails\/rails\/blob\/main\/guides\/source\/active_record_callbacks.md?plain=1#L598-L608) behaviour by introducing a breaking change in Rails 7.1.\r\nIt leads to hard-to-find silent bugs and should be reverted, there's no workaround except disabling it completely with `config.active_record.run_commit_callbacks_on_first_saved_instances_in_transaction = true`.\r\nThe problem it was trying to solve is well-documented and easily dealt with `reload`.\r\n\r\n### Steps to reproduce\r\nOversimplified example:\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\"\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n    t.integer :comments_count, null: false, default: 0\r\n  end\r\n\r\n  create_table :comments, force: true do |t|\r\n    t.boolean :hidden, null: false, default: false\r\n    t.integer :post_id\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  has_many :comments\r\n\r\n  def update_comments_count!\r\n    self.update!(comments_count: comments.size)\r\n  end\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  belongs_to :post\r\n  after_commit :update_posts\r\n\r\n  def update_posts\r\n    if saved_change_to_post_id?\r\n      post.update_comments_count!\r\n    end\r\n  end\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_association_stuff\r\n    post_1 = Post.create!\r\n    post_1.comments.create!\r\n\r\n    assert_equal 1, post_1.comments_count\r\n\r\n    post_2 = Post.create!\r\n    comment = post_2.comments.build\r\n    Post.transaction do\r\n      comment.save!\r\n      comment.update!(hidden: true)\r\n    end\r\n    assert_equal 1, post_1.comments_count\r\n    assert_equal 1, post_2.comments_count\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n`saved_change_to_post_id? == true`\r\n\r\n### Actual behavior\r\n`saved_change_to_post_id? == false`\r\n\r\n### System configuration\r\n**Rails version**: 7.1+\r\n**Ruby version**: 3.2.3","comments":[],"labels":["activerecord"]},{"title":"[Fix #51044] Deprecate providing a non-boolean argument to `#distinct`","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nFixes #51044\r\n\r\n### Detail\r\n\r\nUpdates the documented `ActiveRecord::QueryMethods#distinct` and undocumented `ActiveRecord::QueryMethods#distinct!` methods to ~raise an `ArgumentError`~ log a deprecation warning if given a non-boolean argument.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\nNone.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Looks like there are [2 failures](https:\/\/buildkite.com\/rails\/rails\/builds\/104766) in other test cases that pass a non-boolean to `#distinct!`. I'll wait till [this question](https:\/\/github.com\/rails\/rails\/pull\/51045#discussion_r1485400123) is answered before I go and update them.\r\n\r\n**Edit:** Updated these to not pass a non-boolean into `#dstinct!`.","This might require a deprecation cycle since it\u2019s a breaking change. Similar to https:\/\/github.com\/rails\/rails\/pull\/50931","> This might require a deprecation cycle since it\u2019s a breaking change. Similar to #50931\r\n\r\nAddressed in [these changes](https:\/\/github.com\/rails\/rails\/compare\/487a6ef89cd182c97b2af45a89e6961cf6f8ae97..b8e6187f9c2939d2e6c594bcd2213f5a609bd19b)."],"labels":["activerecord"]},{"title":"Relation `#distinct` doesn't raise an error for invalid arguments","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\n\r\n[`#distinct`](https:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/QueryMethods.html#method-i-distinct) only takes in a single `value` argument that defaults to `true`. This determines whether or not the distinct clause is applied to the relation. However, the argument isn't validated and is always treated as truthy or falsey (e.g. [in this condition](https:\/\/github.com\/rails\/rails\/blob\/0f9aaa5ca9b8421ebf42b3d7720632d4c1cae5fc\/activerecord\/lib\/active_record\/relation.rb#L474)). This means that a non-boolean argument can be passed in with certain expectations (e.g. a column that's not the primary key expecting the query to result in a `DISTINCT ON`), but the `DISTINCT` clause will always only either apply or not apply on the base table's primary key.\r\n\r\nI've had to explain that passing (a truthy) argument this way doesn't change the outcome of the clause to junior engineers a couple of times, so I feel like this is something that should be validated. The script below is a good example of how one could misunderstand this API.\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :authors, force: true do |t|\r\n  end\r\n\r\n  create_table :posts, force: true do |t|\r\n    t.integer :author_id\r\n  end\r\nend\r\n\r\nclass Author < ActiveRecord::Base\r\n  has_many :posts\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  belongs_to :author\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_distinct_with_non_boolean_arguments\r\n    author = Author.create!\r\n    post_1 = Post.create!(author: author)\r\n    post_2 = Post.create!(author: author)\r\n\r\n    # Passes as expected\r\n    assert_equal 1, Post.where(id: [post_1.id, post_2.id]).select(\"DISTINCT author_id\").count\r\n\r\n    # Fails with 'expected 1, got 2' which is correct, but it should raise an ArgumentError\r\n    # since the `#distinct` argument is invalid and the DISTINCT clause is on id and not author_id\r\n    assert_equal 1, Post.where(id: [post_1.id, post_2.id]).distinct(:author_id).count\r\n  end\r\nend\r\n\r\n```\r\n\r\n### Expected behavior\r\n<!-- Tell us what should happen -->\r\n\r\nAn `ArgumentError` should be raised\r\n\r\n### Actual behavior\r\n<!-- Tell us what happens instead -->\r\n\r\nNo error is raised, argument is treated the same as `true` if truthy, and `false` if falsey\r\n\r\n### System configuration\r\n**Rails version**: 7.1.3 (latest), main\r\n\r\n**Ruby version**: 3.3.0","comments":["Agreed! For me this looks similar to https:\/\/github.com\/rails\/rails\/pull\/45229.","> Agreed! For me this looks similar to #45229.\r\n\r\nYes it does, I've got a PR up to address: #51045"],"labels":["activerecord","attached PR","With reproduction steps"]},{"title":"Add a basic railtie integration test for Active Storage","body":"As part of removing the dummy apps, in #50427, it was suggested to look at ways to improve test coverage from the point of view of Railties.\r\n\r\nThis PR is a first take at that, and always open to feedback\/suggestions :bow:","comments":[],"labels":["railties"]},{"title":"nested_attributes_for :limit does not account for records marked for deletion","body":"Noticed that when an update to a model that accepts nested attributes with a `:limit` specified that any batch update of nested records will count any records marked for deletion along with any new ones, which raises.\r\n\r\nWorkaround for now is to remove `limit` on the `nested_attributes_for` call and write a custom validation:\r\n\r\n```ruby\r\nclass Post < ApplicationRecord\r\n  has_many :comments, dependent: :destroy\r\n  accepts_nested_attributes_for :comments, allow_destroy: true\r\n\r\n  validate :validate_comments_count\r\n\r\n  private\r\n\r\n  def validate_comments_count\r\n    count = comments.count { |c| !c.marked_for_destruction? }\r\n\r\n    if count > 10\r\n      errors.add(:base, \"A post can have at most 10 comments\")\r\n    end\r\n  end\r\nend\r\n\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\"\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n  end\r\n\r\n  create_table :comments, force: true do |t|\r\n    t.integer :post_id\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  has_many :comments\r\n\r\n  accepts_nested_attributes_for :comments, allow_destroy: true, limit: 2\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  belongs_to :post\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_nested_attributes_limit\r\n    post = Post.create!(comments_attributes: [{}, {}])\r\n    first_comment, second_comment = post.comments\r\n\r\n    post.update!(comments_attributes: [\r\n      first_comment.attributes,\r\n      second_comment.attributes.merge(\"_destroy\" => 1),\r\n      {}\r\n    ])\r\n  end\r\nend\r\n\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe `limit` validation should reject any associated records `marked_for_deletion?`\r\n\r\n### Actual behavior\r\n\r\nIt instead counts all associated records.\r\n\r\n### System configuration\r\n**Rails version**:  7.1.3\r\n\r\n**Ruby version**: ruby 3.3.0 (2023-12-25 revision 5124f9ac75) [arm64-darwin23]\r\n","comments":[],"labels":["activerecord"]},{"title":"Revert \"Pin minitest version to 5.21\"","body":"Reverts rails\/rails#50978\r\n\r\n5.22.2 was released to address this, hopefully. :pray:","comments":["Still not fixed, so I've opened minitest\/minitest#986 with a hack I wrote this morning."],"labels":["activesupport"]},{"title":"Add `.shard_keys`, `.sharded?`, & `.on_all_shards` methods to AR Models","body":"### Motivation \/ Background\r\n\r\nCurrently, there is no (simple) way to ask a model if it connects to a single database or to multiple shards. Furthermore, without looping through a model's connections, I don't believe there's an easy way to return a list of shards a model can connect to.\r\n\r\n### Detail\r\n\r\nThis commit adds a `@shard_keys` ivar that's set whenever `.connects_to` is called. It sets the ivar to the result of `shards.keys`. `shards` in `.connects_to` defaults to an empty hash and therefore when calling `connects_to database: {...}` `@shard_keys` will be set to an empty array.\r\n\r\n`@shard_keys` is set _before_ the following lines:\r\n\r\n```ruby\r\nif shards.empty?\r\n  shards[:default] = database\r\nend\r\n```\r\n\r\nThis conditional sets the one and only shard (`:default`) to the value of `database` that we pass to `.connects_to`. This allows for calling `connected_to(shard: :default)` on models configured to only connect to a database e.g.:\r\n\r\n```ruby\r\nclass UnshardedBase < ActiveRecord::Base\r\n  self.abstract_class = true\r\n\r\n  connects_to database: { writing: :primary }\r\nend\r\n\r\nclass UnshardedModel < UnshardedBase\r\nend\r\n\r\nUnshardedBase.connected_to(shard: :default) { UnshardedBase.connection_pool.db_config.name } => primary\r\n```\r\n\r\nThis is ultimately still an _unsharded_ model which is why `@shard_keys` gets set before the conditional.\r\n\r\nWith the new `@shard_keys` ivar we need a way for descendants of the abstract AR model to return that same value. For that we leverage the existing `.connection_class_for_self` method. That method returns the ancestor of the model where `.connects_to` was called, or returns self if it's the connection class:\r\n\r\n```ruby\r\nclass UnshardedBase < ActiveRecord::Base\r\n  self.abstract_class = true\r\n\r\n  connects_to database: { writing: :primary }\r\nend\r\n\r\nclass UnshardedModel < UnshardedBase\r\nend\r\n\r\nActiveRecord::Base.connection_class_for_self => ActiveRecord::Base\r\n\r\nUnshardedBase.connection_class_for_self => UnshardedBase(abstract)\r\n\r\nUnshardedModel.connection_class_for_self => UnshardedBase(abstract)\r\n```\r\n\r\nThe new `.shard_keys` method is a getter which returns the value of `@shard_keys` from the connection class or it returns an empty array. The empty array is necessary in cases where `connects_to` was never called.\r\n\r\nFinally, I've added an `.on_all_shards` method which takes all of the arguments for `.connected_to` except for `shard`. Instead, it loops through every shard key and then delegates everything else to `.connected_to`. I've used `.map` instead of `.each` so that we can collect the results of each block.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Trilogy:EOFError cannot be recovered on ActiveRecord 7.1","body":"### Steps to reproduce\r\n\r\n```ruby\r\nrequire 'json'\r\nrequire 'rack'\r\nrequire 'base64'\r\nrequire \"bundler\"\r\n\r\nBundler.require(:default)\r\n\r\n#$app ||= Rack::Builder.parse_file(\"#{__dir__}\/config.ru\").first\r\n#RELATIVE_URL_ROOT = ENV['RAILS_RELATIVE_URL_ROOT']\r\n\r\nActiveRecord::Base.establish_connection(\r\n  adapter:            'trilogy',\r\n  database:           'test',\r\n  host:               'xxxx',\r\n  username:           'xxxxx',\r\n  password:           'xxxxx',\r\n  port:               4000,\r\n  ssl_mode:           'VERIFY_IDENTITY',\r\n  encoding:           'utf8mb4',\r\n  collation:          'utf8mb4_general_ci',\r\n  pool:               2500,\r\n  checkout_timeout:   5,\r\n  connect_timeout:    5,\r\n  read_timeout:       5,\r\n  idle_timeout:       0,\r\n  reaping_frequency:  0,\r\n)\r\n\r\nDir[\".\/app\/models\/*.rb\"].each do |file|\r\n  require file\r\nend\r\n\r\ndef handler(event:, context:)\r\n  httpMethod = event.fetch('httpMethod')\r\n  STDOUT.write Process.pid\r\n  STDOUT.write \"\\n\"\r\n  STDOUT.write httpMethod\r\n  STDOUT.write \"\\n\"\r\n\r\n  if httpMethod == \"POST\"\r\n    discard = Message.take().as_json()\r\n    STDOUT.write discard\r\n    STDOUT.write \"\\n\"\r\n    discard = 'returned'\r\n    return {\r\n      'statusCode' => 200,\r\n      'body' => discard,\r\n    }\r\n  else\r\n    return {\r\n      'statusCode' => 200,\r\n      'body' => \"pong\"\r\n    }\r\n  end\r\nend\r\n```\r\n\r\nWe are using ActiveRecord 7.1.3 on AWS Lambda Function to connect to database using Trilogy driver(2.7). We found occasionally there are `EOFError`. We tried to reproduce it and find when a connection is checked out from the pool, [after some time](https:\/\/docs.aws.amazon.com\/vpc\/latest\/userguide\/nat-gateway-troubleshooting.html#nat-gateway-troubleshooting-timeout) when the underlying TCP connection is broken, following query on the connection could trigger the error. On AWS Lambda Function we could steadily reproduce it with all 7.1.x versions. 7.0.8 works well. Can't reproduce it locally. And pool configuration like `idle_timeout`\/`reaping_frequency` doesn't change anything.\r\n![img_v3_027q_971706a5-dfe9-4e5b-ac37-114d993fc1dg](https:\/\/github.com\/rails\/rails\/assets\/3690895\/90e09bbf-828b-449d-8e10-8c6c3fcf496b)\r\n\r\n### Expected behavior\r\nThe broken connection could be recovered and doesn't affect application.\r\n\r\n### Actual behavior\r\nError is raised.\r\n### System configuration\r\n**Rails version**:\r\n7.1\r\n**Ruby version**:\r\n3.2.2","comments":["Hello! Could you make sure you are wrapping each unit of work (the body of your handler function) with `Rails.executor.wrap` https:\/\/guides.rubyonrails.org\/threading_and_code_execution.html#wrapping-application-code.\n\nUsing executor.wrap (which a standard Rails application will wrap the request in) will checkout and checkin the connection from the pool around the work being done. The checkout will also have a ping to verify the connection and will automatically reconnect if it fails. Without the executor wrap, Active Record doesn't know your expectations of it and so can't safely reconnect (though there is some exploration being done of).\n\nI'm not sure why a difference would be seen between 7.0 and 7.1"],"labels":["activerecord"]},{"title":"Add minimum size to connection pool","body":"### Motivation \/ Background\r\n\r\nThis PR implements the minimum connection pool size idea described in #50989.\r\n\r\nThe primary motivation with this is to ensure that we always have at least _N_ connections established to the DB so that we don't need to spend time connecting to the DB during the handling of a request.\r\n\r\nFixes #50989\r\n\r\n### Detail\r\n\r\nIn `ConnectionPool`, rename `:size` to `:max_size`, and add `:min_size` as a configuration option. `:min_size` is initialized from `db_config.min_size`, where I've also added a new configuration option.\r\n\r\n`ConnectionPool#initialize` calls a new method, `ensure_minimum_connections` when `min_size` is > 0.\r\n\r\nIn `ConnectionPool#flush`, we need to pay attention to the minimum pool size, and make sure that we don't close too many connections.\r\n\r\nFinally, `ConnectionPool::Reaper` also calls into `ensure_minimum_connections` after reaping\/flushing to ensure that we always have the desired number of established connections active.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Add the ability to configure minimum number of active connections for connection pool","body":"Currently ActiveRecord connection pools support configuring a maximum size via the [`pool`](https:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/ConnectionAdapters\/ConnectionPool.html#:~:text=database%20connection%20configuration%3A-,pool,-%3A%20maximum%20number%20of) configuration setting.\r\n\r\nEstablishing new connections to the DB can be a relatively expensive operation, and so we want to try and make sure that the application always has a minimum number of established connections to the DB. We can do that in our application's initialization path, but connections which have been idle for too long will get cleaned up by the reaper.\r\n\r\nI'd like to add support for specifying a minimum pool size to the connection pools so that we can ensure we always have a certain number of active connections to the DB established.\r\n\r\nAs a starting point, I propose the following changes:\r\n\r\n* [ ] Rename `size` to `max_size` in [`ConnectionPool`](https:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/ConnectionAdapters\/ConnectionPool.html)\r\n* [ ] Alias `size` to `max_size` for backwards compatibility\r\n* [ ] Add `min_size` as a supported option to [`ActiveRecord::DatabaseConfigurations::HashConfig`](https:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/DatabaseConfigurations\/HashConfig.html)\r\n* [ ] Optionally rename `pool` to `max_size` for clarity, and add an alias for `pool` for backwards compat\r\n* [ ] Modify `ConnectionPool` and `ConnectionPool::Reaper` to respect the minimum pool size\r\n\r\nI will add a PR that implements these ideas.","comments":[],"labels":["activerecord","attached PR"]},{"title":"Action Cable server adapterization","body":"### Motivation \/ Background\r\n\r\nThis PR aims to make Action Cable more flexible and extensible as a library\/framework by separating low-level, implementation specific details (e.g., handling WebSockets, dealing with concurrency) from abstractions (Connection, Channel classes). That would make it possible to use user-level Action Cable code with alternative web servers or execution models (e.g., Fibers) without rewriting it or monkey-patching internals.\r\n\r\n> [!TIP]\r\n> You can find a more detailed description of the problem, motivation and potential benefits of such refactoring in [this document](https:\/\/docs.google.com\/document\/d\/1oGf86NAzQL9sDw6rTfUNSe3mzzg7wX64sc34D-_3EDI\/edit#heading=h.d3db1fd03ano).\r\n\r\n> [!NOTE] \r\n> This PR does not introduce any new features or public API breaking changes. It doesn't affect the existing functionality of built-in Action Cable server.\r\n\r\n### Detail\r\n\r\nThe changes are grouped into commits to reflect the following major changes.\r\n\r\n1) **Reorganizing threaded executors**. \r\n\r\nAction Cable relies on two threaded executors right now: one to perform user-space code (Worker) and another one to perform internal async operations around pub\/sub. The latter was for some (historical?) reason hidden within the `StreamEventLoop` class that implements and IO loop to perform read\/write operations on sockets. I've extracted the executor and promoted it into a server attribute independent of IO event loop. The main motivation of this extraction is not only in enforcing SoC but to separate WebSocket-specific code from more generic async executor used throughout the codebase.\r\n\r\nI've also wrapped the Concurrent Ruby threaded executor into a custom class with a minimal interface (`#post`, `#timer` and `#shutdown` methods), so it will be possible to configure a custom executor for a server in the future (one use-case we have in mind is using a Fiber-based executor instead of a Thread-based one).\r\n\r\nNote that this PR doesn't include any configuration-related code (e.g., to support smth like `config.action_cable.async_executor = :fiber`) but I'm considering adding something like that in the follow-up PRs.\r\n\r\n2) **Limiting the scope of async operations**.\r\n\r\nThis step is the follow-up to the async executor extraction. We have a few places in the Channel internals which directly refer to the `event_loop` but they're all related to pub\/sub operations. So, to avoid unnecessary async operations at the abstraction level, I moved all it to the pub\/sub layer by and standardized it across adapters by using a `SubscriberMap::Async` subclass.\r\n\r\nPreviously, we might have double async calls when performing `#stream_from` (one from the channel and one from the pub\/sub adapter); now it's up to the adapter whether to create subscriptions asynchronously or not. We shouldn't duplicate this logic.\r\n\r\n3) **Splitting ActionCable::Connection::Base into ActionCable::Connection::Base and ActionCable::Server::Connection**\r\n\r\nToday, the Connection class knows about everything from performing user code to setting up WebSocket event listeners to dealing with Rails executor wrapping. That prevents from reusing this class in environments when we don't need to deal with all of these (non-WebSocket servers or unit tests, more about them below).\r\n\r\nThis change is mostly code reorganization and minor tests updates (e.g., we no longer need to always use `run_in_eventmachine`, because now we deal with pure Ruby classes).\r\n\r\nSo, now we have two types of connections: low-level Server::Connection and application-level Connection::Base. The _communicate_ with each other via the following interfaces:\r\n\r\n```mermaid\r\nclassDiagram\r\n  class _PubSub {\r\n    subscribe: (channel, handler, callback) -> void\r\n    unsubscribe: (channel, handler) -> void\r\n  }\r\n  \r\n  class _Executor {\r\n    post: (&block) -> void\r\n    timer: (interval, &block) -> handle\r\n  }\r\n  \r\n  class _Server {\r\n    pubsub: _PubSub\r\n    executor: _Executor\r\n    config: Configuration \r\n  }\r\n  \r\n  class _ServerConn {\r\n    logger: Logger\r\n    env: Hash[String, untyped]\r\n    request: Request\r\n    protocol: String\r\n    initialize: (_Server, env) -> void\r\n    transmit: (untyped) -> void\r\n    close: () -> void\r\n    perform_work: (untyped receiver, method_name Symbol, *untyped args) -> void\r\n  }\r\n  \r\n  class _Connection {\r\n    initialize: (_Server, _ServerConn) -> void\r\n    handle_open: () -> void\r\n    handle_incoming: (payload) -> void\r\n    handle_close: () -> void\r\n    beat: () -> void\r\n    statistics: () -> Hash[Symbol, untyped]\r\n  }\r\n  \r\n  _Server --> _PubSub\r\n  _Server --> _Executor\r\n  _Connection --> _ServerConn\r\n  _Connection --> _Server\r\n```\r\n\r\n### Examples \/ follow-ups\r\n\r\n#### Action Cable testing\r\n\r\nHere is an example commit (one of the future PRs) demonstrating how this refactoring simplifies Action Cable testing and make it more robust (no patches, real connection and channel classes, etc.): https:\/\/github.com\/palkan\/rails\/commit\/3ba6d35c788134faeb062b12f371aab5da1886b8\r\n\r\n#### Action Cable over SSE\r\n\r\nHere is a sketch of how SSE transport for Action Cable can be implemented (based on the changes from this PR): https:\/\/gist.github.com\/palkan\/270a192e79b05d5601fe497ad3ec83b5\r\n\r\n### Additional information\r\n\r\nHere is a [Discord thread](https:\/\/discord.com\/channels\/849034466856665118\/1168026423001366609) where we discuss the project.\r\n\r\nThere is an old PR attempting to achieve the same goal: https:\/\/github.com\/rails\/rails\/pull\/27648.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n\r\n\/cc @ioquatix @matthewd @rafaelfranca ","comments":["I am so going to make time today to review this!!!!","This PR looks like a good start to me.\r\n\r\nI would like to understand a little more how I might implement `async-actioncable` according to the changes presented in this PR.\r\n\r\nI would like to propose that we use some kind of traits class to control more of the internal execution model, and ideally, a clear separation of \"interface\" vs \"rack hijack_io implementation\". That would help me understand how things fit together (layered).","Added one more example of using new architecture\u2014Action Cable over SSE the Rails way (via ActionController::Live): https:\/\/gist.github.com\/palkan\/270a192e79b05d5601fe497ad3ec83b5\r\n\r\nWe can see some copy-pasting from `Server::Connection` (`server.config.connection_class.call`, `new_tagged_logger`) that makes me think that we should move this logic to the server object itself \ud83e\udd14","I need to build a WebSocket service, and I'm trying to find a modern WebSocket framework in Ruby,\r\nunfortunately, I don't see such an active Gem for this.\r\nAfter several hours of research, I found ActionCable has potential.\r\nThe AC original protocol can easily be overridden.","@jasl Are you building a backend service or are you looking for full stack?\r\n\r\nFor the backend, people have been having great success with https:\/\/github.com\/socketry\/async-websocket + falcon.\r\n\r\nFor full stack, https:\/\/github.com\/socketry\/live provides both a front end and a backend library. I'm going to fix the linked example so you can try it out.","> @jasl Are you building a backend service or are you looking for full stack?\r\n> \r\n> For the backend, people have been having great success with https:\/\/github.com\/socketry\/async-websocket + falcon.\r\n> \r\n> For full stack, https:\/\/github.com\/socketry\/live provides both a front end and a backend library. I'm going to fix the linked example so you can try it out.\r\n\r\nI already tried async-websocket + falcon. IMO it's much better than Faye stack, but it's low-level.\r\nFor a real product, I need to handle connection lifecycle, `ping-pong`, broadcast, etc.\r\n\r\nthat's why I seek this PR, if this works, async-websocket + falcon can be the backend (the executor)?","@ioquatix\r\nI made a PoC https:\/\/github.com\/jasl\/dephy-relay\/blob\/main\/app\/channels\/nostr_cable\/connection.rb\r\n\r\nMost of my codes are under https:\/\/github.com\/jasl\/dephy-relay\/blob\/main\/app\/channels\/nostr_cable\r\n\r\nThis sample replaces the ActionCable protocol with the NoStr protocol, including subscription and broadcasting"],"labels":["actioncable"]},{"title":"Active Record marks attributes as `_changed?` after `dup`ing a persisted instance","body":"Similar to https:\/\/github.com\/rails\/rails\/issues\/50971 to the point where I suspect the fix may end up being the same for both\r\n\r\nI'll be working on this bug, opening an issue for visibility and in case if someone disagrees that this is a bug.\r\n\r\n### Context\r\n\r\nCurrently calling `dup` on a persisted object with non-default attribute values makes all attributes as `_changed?` regardless of the actual state. Instead it should preserve the states of the duped object\r\n\r\n### Reproduction script:\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\"\r\n\r\n  gem \"sqlite3\"\r\n  gem \"debug\"\r\nend\r\n\r\nrequire \"debug\"\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :people, force: true do |t|\r\n    t.string :name\r\n    t.integer :age\r\n  end\r\nend\r\n\r\nclass Person < ActiveRecord::Base\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_dup_does_not_change_attribute_properties\r\n    person = Person.create(name: \"Nikita\", age: 1)\r\n    person.name = \"Nikita V\"\r\n\r\n    assert_predicate person, :name_changed?\r\n    refute_predicate person, :age_changed?\r\n\r\n    person_dup = person.dup\r\n\r\n    assert_predicate person_dup, :name_changed?\r\n    refute_predicate person_dup, :age_changed?\r\n  end\r\n\r\n  def test_clone_does_not_change_attribute_properties\r\n    person = Person.create(name: \"Nikita\", age: 1)\r\n    person.name = \"Nikita V\"\r\n\r\n    assert_predicate person, :name_changed?\r\n    refute_predicate person, :age_changed?\r\n\r\n    person_dup = person.clone\r\n\r\n    assert_predicate person_dup, :name_changed?\r\n    refute_predicate person_dup, :age_changed?\r\n  end\r\nend\r\n\r\n```\r\n\r\nFailure:\r\n\r\n```\r\nFailure:\r\nBugTest#test_dup_does_not_change_attribute_properties:\r\nExpected #<Person id: nil, name: \"Nikita V\", age: 1> to not be age_changed?.\r\n```\r\n\r\nNOTE: `clone` example passes as is. Adding it to make sure that changes around this area won't accidentally break `clone`","comments":["We found out that there are existing tests that have a completely opposite expectation in regards to `dup` behavior.\r\nThis makes it a little harder to push for the behavior to be considered a bug and be changed. But I still think that an assertion like `assert_predicate cloned_developer, :name_changed?  ` on a cloned object is wrong because the value didn't change. Yes, it differs from the default value, but it doesn't feel relevant\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/f5f4bca590ba6cdf5ef4a73bc9cccbf2cd0eb918\/activerecord\/test\/cases\/base_test.rb#L1106"],"labels":["activerecord","With reproduction steps"]},{"title":"Active Record marks attributes as `came_from_user?` after `dup`","body":"I'll be working on this bug. Opening an issue for visibility and to allow community to disagree whether the behavior is intended or not.\r\n\r\n### Context\r\n\r\nCalling `.dup` on an Active Record instance causes all attributes to be marked as \"came from user\" despite of their original state. \r\nThis seems like a bug as it leads to completely untouched attributes to return `true` from `came_from_user? calls. \r\nThe only small concern I have is that the `*_came_from_user?` methods don't seem to be publicly documented. However I assume they intend to become public and also Rails itself relies on the method to work correctly so it should be worth fixing\r\n\r\n### Reproduction script:\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\"\r\n\r\n  gem \"sqlite3\"\r\n  gem \"debug\"\r\nend\r\n\r\nrequire \"debug\"\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :people, force: true do |t|\r\n    t.string :name\r\n    t.integer :age\r\n  end\r\nend\r\n\r\nclass Person < ActiveRecord::Base\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_dup_does_not_change_attribute_value_type\r\n    person = Person.new(name: \"Nikita\")\r\n\r\n    assert_predicate person, :name_came_from_user?\r\n    refute_predicate person, :age_came_from_user?\r\n\r\n    person_dup = person.dup\r\n\r\n    assert_predicate person_dup, :name_came_from_user?\r\n    refute_predicate person_dup, :age_came_from_user?\r\n  end\r\n\r\n  def test_clone_does_not_change_attribute_value_type\r\n    person = Person.new(name: \"Nikita\")\r\n\r\n    assert_predicate person, :name_came_from_user?\r\n    refute_predicate person, :age_came_from_user?\r\n\r\n    person_copy = person.clone\r\n\r\n    assert_predicate person_copy, :name_came_from_user?\r\n    refute_predicate person_copy, :age_came_from_user?\r\n  end\r\nend\r\n```\r\n\r\nFailure:\r\n```\r\nFailure:\r\nBugTest#test_dup_does_not_change_attribute_value_type:\r\nExpected #<Person id: nil, name: \"Nikita\", age: nil> to not be age_came_from_user?.\r\n```\r\n\r\nNote: `clone` example works as is, I'm adding it just to ensure that the fix doesn't suddenly break `clone` behavior.","comments":[],"labels":["activerecord","With reproduction steps"]},{"title":"Enums should accept a proc for `default`","body":"### Steps to reproduce\r\nTrying to define a flexible (hence a lambda) default for an enumeration on a model.\r\n \r\n```ruby\r\nenum status: STATUSES.keys, _default: -> { account.in?(%i[superadmin admin]) ? :to_validate : :validated }\r\n```\r\n\r\n### Expected behavior\r\nIt should take into account the attribute of the current model instance.\r\n\r\n### Actual behavior\r\n```ruby\r\nNoMethodError:\r\n        undefined method `account' for User:Class\r\n        Did you mean?  accounts\r\n```\r\n\r\n### System configuration\r\n**Rails version**: 6.1.7.6\r\n\r\n**Ruby version**: 3.1.4\r\n\r\nI would love to contribute by submitting a PR for this.","comments":["Hey @ldlgds2, thanks for the report!\r\n\r\nThere are a few things I wanted to note.\r\nFirst of all it looks like the `_default` option is not publicly documented which usually implies it is reserved for Rails itself and not intended for application's use. Also the name starting with an underscore `_` often implies the same.\r\n\r\nWhich means we need to be treating this case as a feature proposal and feature proposals should be discussed on other platforms (Discord, [discourse](https:\/\/discuss.rubyonrails.org\/)) as github issues tracker is reserved for bug reports only.\r\n\r\nI should also note that since most likely it's going to be a new feature it won't be released in a patch version and certainly won't be backported to Rails 6.\r\n\r\nLet me know if you'd like to work on a proposal. If the change is relatively simple to make it could just be a pull request. I haven't though deeply enough about this but I think one of the possible APIs is for the proc to receive an instance as an argument, like: `default: -> (user)  { account.in?(%i[superadmin admin]) ? :to_validate : :validated }`\r\n","> First of all it looks like the `_default` option is not publicly documented which usually implies it is reserved for Rails itself and not intended for application's use. Also the name starting with an underscore `_` often implies the same.\r\n\r\nJust to note: underscored options are expected when an `enum` is defined using keywords arguments so that the arguments defining the `enum` name(s) can be separated from the options. Since I agree that this is incredibly confusing, I opened a PR to deprecate the keywords argument style #50987 ",">underscored options are expected\r\n\r\nAh, right, thanks for clarifying \ud83d\udc4d And also I overlooked the fact that `default:` option is documented \r\nhttps:\/\/github.com\/rails\/rails\/blob\/f0d433bb46ac233ec7fd7fae48f458978908d905\/activerecord\/lib\/active_record\/enum.rb#L51\r\nIf I'm following the code correctly, `default:` eventually gets passed to the `attribute` definition which makes me think this issue is very similar to \r\nhttps:\/\/github.com\/rails\/rails\/issues\/50961#issuecomment-1925794170"],"labels":["activerecord"]},{"title":"Improve ActiveStorage Proxy Documentation","body":"The current guide https:\/\/edgeguides.rubyonrails.org\/active_storage_overview.html#authenticated-controllers for building an authenticated controller in rails proxy mode isn't complete. If you follow the included example you will end up with the following error.\r\n\r\n```\r\nArgumentError:\r\n       Cannot generate URL for xxxxxxxx.jpg using Disk service, please set ActiveStorage::Current.url_options.\r\n```\r\n\r\n```ruby\r\n# app\/controllers\/logos_controller.rb\r\nclass LogosController < ApplicationController\r\n  # Through ApplicationController:\r\n  # include Authenticate, SetCurrentAccount\r\n\r\n  def show\r\n    redirect_to Current.account.logo.url\r\n  end\r\nend\r\n```\r\n\r\nThe proposed fix for this is to set the current host options by prepending `include ActiveStorage::SetCurrent` at the top of the controller.\r\n\r\n```ruby\r\n# app\/controllers\/logos_controller.rb\r\nclass LogosController < ApplicationController\r\n  include ActiveStorage::SetCurrent\r\n  # Through ApplicationController:\r\n  # include Authenticate, SetCurrentAccount\r\n\r\n  def show\r\n    redirect_to Current.account.logo.url\r\n  end\r\nend\r\n```\r\n","comments":["Hi @jmarsh24 thanks for bringing this to our attention. I have linked this issue in the task for updating the Active Storage guide, and will have a team look at it as soon as they can."],"labels":["docs","activestorage"]},{"title":"`ActiveRecord::Attributes::ClassMethod#attribute` `default:` proc should be evaluated in subclass or instance context","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\"\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n    t.string :type, null: false\r\n    t.string :title, null: false\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  attribute :title, default: -> { default_title }\r\nend\r\n\r\nclass InternalPost < Post\r\n  def self.default_title = \"Untitled Internal Post\" # Feels like it should call this...\r\n  def default_title      = \"Untitled Internal Post\" # ...or maybe this.\r\nend\r\n\r\nclass ExternalPost < Post\r\n  def self.default_title = \"Untitled External Post\"\r\n  def default_title      = \"Untitled External Post\"\r\nend\r\n\r\nclass BugTest < ActiveSupport::TestCase\r\n  test \"default title is assigned based on subclass\" do\r\n    assert_equal \"Untitled Internal Post\", InternalPost.new.title\r\n    # \ud83d\udca5 NameError: undefined local variable or method `default_title' for class Post\r\n    assert_equal \"Untitled External Post\", ExternalPost.new.title\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n<!-- Tell us what should happen -->\r\nThe `attribute` `default:` proc should be evaluated in the context of the model being created (or the instance being created).\r\n\r\n### Actual behavior\r\n<!-- Tell us what happens instead -->\r\nThe `attribute` `default:` proc should be evaluated in the context it closed around.\r\n\r\nThis makes it impossible to define defaults which differ per subclass within an inheritance hierarchy.\r\n\r\n### System configuration\r\n**Rails version**: rails 7.1.3\r\n\r\n**Ruby version**: ruby 3.3.0\r\n","comments":["An alternative implementation would be for the proc to receive the instance or model class as an argument (and maybe the attribute name too).\r\n\r\n```ruby\r\nclass Post < ActiveRecord::Base\r\n  attribute :title, default: -> { |instance| instance.default_title }\r\n  # or\r\n  attribute :title, default: -> { |instance, attr| instance.default_for(attr) }\r\n  # or\r\n  attribute :title, default: -> { |model| model.default_title }\r\n  # or\r\n  attribute :title, default: -> { |model, attr| model.default_for(attr) }\r\nend\r\n```\r\n\r\n---\r\n\r\nYet another alternative implementation would be to delegate to an instance method directly, although it's unclear what a good API would be for that, as we probably wouldn't want `respond_to?` checks for every attribute every time we need it's default. \ud83e\udd14\r\n\r\n```ruby\r\nclass Post < ActiveRecord::Base\r\n  attribute :title # delegates to default_attribute_value_for_title since we `respond_to?` it\r\n  \r\n  def default_attribute_value_for_title = \"...\"\r\nend\r\n```\r\n\r\n---\r\n\r\nA workaround to solve the problem of per-class defaults is a deferred (re-)declaration of the attribute once we can capture the correct scope.\r\n\r\n```ruby\r\nclass Post < ActiveRecord::Base\r\n  # This can be skipped if this class is abstract.\r\n  #   attribute :title, default: -> { default_title }\r\n  #   def self.default_title = \"Untitled Post\"\r\n\r\n  def self.inherited(subclass)\r\n    super\r\n\r\n    subclass.attribute :title, default: -> { subclass.default_title }\r\n  end\r\nend\r\n\r\nclass InternalPost < Post\r\n  def self.default_title = \"Untitled Internal Post\"\r\nend\r\n\r\nclass ExternalPost < Post\r\n  def self.default_title = \"Untitled External Post\"\r\nend\r\n```","I started work on a [branch](https:\/\/github.com\/rails\/rails\/compare\/main...sambostock:rails:attribute-defaults) for the proc arguments approach, but it looks like it would be tricky to implement because the `Attribute` doesn't have a reference to the model instance."],"labels":["activerecord"]},{"title":"`ActiveRecord::Store` with JSON column uses `nil` as default value instead of `{}`","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\" # , github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :nullable_settings, force: true do |t|\r\n    t.json :settings\r\n  end\r\n\r\n  create_table :non_nullable_settings, force: true do |t|\r\n    t.json :settings, null: false\r\n  end\r\nend\r\n\r\nclass BugTest < ActiveSupport::TestCase\r\n  self.test_order = :sorted # Not required, but makes it easier to look at the debug output.\r\n\r\n  setup { ActiveRecord::Base.logger.debug(name) }\r\n\r\n  test \"1_creating nullable settings without settings saves nil\" do\r\n    assert_stores_nil(Class.new(ActiveRecord::Base) do |model|\r\n      model.table_name = \"nullable_settings\"\r\n    end)\r\n  end\r\n\r\n  test \"2_creating non-nullable settings without settings raises error\" do\r\n    assert_raises_not_null_violation(Class.new(ActiveRecord::Base) do |model|\r\n      model.table_name = \"non_nullable_settings\"\r\n    end)\r\n  end\r\n\r\n  test \"3_creating nullable settings with attribute default saves empty hash\" do\r\n    assert_stores_empty_hash(Class.new(ActiveRecord::Base) do |model|\r\n      model.table_name = \"nullable_settings\"\r\n      model.attribute :settings, :json, default: {}\r\n    end)\r\n  end\r\n\r\n  test \"4_creating non-nullable settings with attribute default saves empty hash\" do\r\n    assert_stores_empty_hash(Class.new(ActiveRecord::Base) do |model|\r\n      model.table_name = \"non_nullable_settings\"\r\n      model.attribute :settings, :json, default: {}\r\n    end)\r\n  end\r\n\r\n  test \"5_creating nullable settings with store saves nil\" do\r\n    assert_stores_nil(Class.new(ActiveRecord::Base) do |model|\r\n      model.table_name = \"nullable_settings\"\r\n      model.store :settings\r\n    end)\r\n  end\r\n\r\n  test \"6_creating non-nullable settings with store raises error\" do\r\n    assert_stores_empty_hash(Class.new(ActiveRecord::Base) do |model|\r\n      model.table_name = \"non_nullable_settings\"\r\n      model.store :settings\r\n    end) # fails (NotNullViolation)\r\n  end\r\n\r\n  test \"7_creating nullable settings with store and attribute default saves nil\" do\r\n    assert_stores_empty_hash(Class.new(ActiveRecord::Base) do |model|\r\n      model.table_name = \"nullable_settings\"\r\n      model.attribute :settings, :json, default: {}\r\n      model.store :settings\r\n    end) # fails (nil, not {})\r\n  end\r\n\r\n  test \"8_creating non-nullable settings with store and attribute default raises error\" do\r\n    assert_stores_empty_hash(Class.new(ActiveRecord::Base) do |model|\r\n      model.table_name = \"non_nullable_settings\"\r\n      model.attribute :settings, :json, default: {}\r\n      model.store :settings\r\n    end) # fails (NotNullViolation)\r\n  end\r\n\r\n  private\r\n\r\n  def assert_stores_nil(model)                = assert_nil(model.create!.settings_before_type_cast)\r\n  def assert_raises_not_null_violation(model) = assert_raises(ActiveRecord::NotNullViolation) { model.create! }\r\n\r\n  def assert_stores_empty_hash(model)\r\n    assert_equal(\"{}\", model.create!.settings_before_type_cast)\r\n  rescue ActiveRecord::NotNullViolation => error\r\n    flunk error.message\r\n  end\r\nend\r\n\r\n```\r\n\r\n### Expected behavior\r\n<!-- Tell us what should happen -->\r\nWhen using `ActiveRecord::Store` with a column of type `json`, the default value written to the database should be an empty `Hash` (serialized as an empty JSON object `{}`), especially if the attribute is marked as having a default value of `{}`.\r\n\r\n### Actual behavior\r\n<!-- Tell us what happens instead -->\r\nWhen using `ActiveRecord::Store` with a column of type `json`, the default value written to the database is `nil`.\r\n\r\nThis is problematic when using non-nullable JSON columns, which cannot accept defaults at the database schema level, as there is no way to avoid violating the `NULL` constraint.\r\n\r\n### System configuration\r\n**Rails version**: rails 7.1.3\r\n\r\n**Ruby version**: ruby 3.3.0\r\n","comments":[],"labels":["activerecord"]},{"title":"Add a Rails Guide for tuning performance for deployment","body":"This pull request adds a new Rails Guide called \"Tuning Performance for Deployment\".\r\n\r\n### Motivation \/ Background\r\n\r\nA few weeks ago there was [an issue to change the default thread count for Puma in Rails](https:\/\/github.com\/rails\/rails\/issues\/50450) and [a PR to make that change](https:\/\/github.com\/rails\/rails\/pull\/50669).\r\n\r\nThe PR mentioned that a performance tuning guide would be the right way to document some issues, but no such guide exists. I wrote a basic guide and incorporated a lot of feedback from @byroot (Jean Boussier), who wrote the thread count PR.\r\n\r\nThis pull request adds the suggested Rails Guide.\r\n\r\nCC @nateberkopec - though I know you're very busy right now :-)\r\n\r\n### Detail\r\n\r\nIt's impossible to have a detailed guide for all possible Rails deployment options. This guide focuses on Puma (the default server) and CRuby, and on giving a good start to people who don't already know deployment well. I've tried to mention core performance issues without explaining every possible configuration change.\r\n\r\nNext time there is a deployment configuration change, there will be a place to document the tradeoffs.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [X] Tests are added or updated if you fix a bug or add a feature.\r\n* [X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["I'd love review\/critique of this proposed Rails Guide for deployment performance tuning if anybody has time, CC: @byroot, @rafaelfranca, @matthewd, @jhawthorn, @tenderlove, @bitsweat.","I'll try to get some time to review this. But also there's a current effort by the foundation to work on guides, so this might interest them. cc @carlosantoniodasilva and @ridhwana"],"labels":["docs"]},{"title":"Destroying bi-directional has_one through association only works from one end","body":"### Summary\r\n\r\nGiven a `has_one :through` association with `dependent: :destroy`, destroying the parent destroys the through record and the far end.  However if the association is bi-directional, destroying only works from one end \u2013 and the end which succeeds depends on the order of `belongs_to` declarations in the join model.  I believe it should work from both ends.\r\n\r\n### Steps to reproduce\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :lefts, force: true do |t|\r\n  end\r\n\r\n  create_table :rights, force: true do |t|\r\n  end\r\n\r\n  create_table :middles, force: true do |t|\r\n    t.references :left, foreign_key: true\r\n    t.references :right, foreign_key: true\r\n  end\r\nend\r\n\r\nclass Left < ActiveRecord::Base\r\n  has_one :middle, dependent: :destroy\r\n  has_one :right, through: :middle\r\nend\r\n\r\nclass Middle < ActiveRecord::Base\r\n  belongs_to :left, dependent: :destroy\r\n  belongs_to :right, dependent: :destroy\r\nend\r\n\r\nclass Right < ActiveRecord::Base\r\n  has_one :middle, dependent: :destroy\r\n  has_one :left, through: :middle\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_destroying_left_destroys_right\r\n    left = Left.create!\r\n    right = Right.create!\r\n    middle = Middle.create! left: left, right: right\r\n\r\n    left.destroy\r\n    assert right.destroyed?\r\n  end\r\n\r\n  def test_destroying_right_destroys_left\r\n    left = Left.create!\r\n    right = Right.create!\r\n    middle = Middle.create! left: left, right: right\r\n\r\n    right.destroy\r\n    assert left.destroyed?\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\nI expect:\r\n\r\n- `left.destroy` to also destroy its `middle` and its `right`\r\n- `right.destroy` to also destroy its `middle` and its `left`\r\n\r\n### Actual behavior\r\n\r\n- `right.destroy` destroys its `middle` and its `left`\r\n-  `left.destroy` destroys its `middle` but does not destroy its `right`\r\n\r\nHowever if I reverse the order of `Middle`'s `belongs_to` declarations, `right.destroy` stops working and `left.destroy` starts working.\r\n\r\n### Patch\r\n\r\nThis patch fixes the behaviour and does not break any existing tests (via `bundle exec rake test:sqlite3`):\r\n\r\n```diff\r\ndiff --git i\/activerecord\/lib\/active_record\/callbacks.rb w\/activerecord\/lib\/active_record\/callbacks.rb\r\nindex 29c72d1024..6e9c68b747 100644\r\n--- i\/activerecord\/lib\/active_record\/callbacks.rb\r\n+++ w\/activerecord\/lib\/active_record\/callbacks.rb\r\n@@ -418,7 +418,7 @@ module ClassMethods\r\n \r\n     def destroy # :nodoc:\r\n       @_destroy_callback_already_called ||= false\r\n-      return if @_destroy_callback_already_called\r\n+      return true if @_destroy_callback_already_called\r\n       @_destroy_callback_already_called = true\r\n       _run_destroy_callbacks { super }\r\n     rescue RecordNotDestroyed => e\r\n```\r\n\r\nCredit for the patch belongs to [Alex](https:\/\/stackoverflow.com\/a\/77917179\/151007).\r\n\r\n### System configuration\r\n\r\n**Rails version**: 7.1.3\r\n\r\n**Ruby version**: 3.3.0\r\n","comments":["After digging into the code, here's what I've discovered so far:\r\n\r\nIn the `ActiveRecord::Associations::BelongsToAssociation#handle_dependency`, the `target.destroy` method is expected to return a truthy value; otherwise, it triggers a rollback.\r\nhttps:\/\/github.com\/rails\/rails\/blob\/0add5dba834f2f1b84fcf1bd1b758545b325fb73\/activerecord\/lib\/active_record\/associations\/belongs_to_association.rb#L12\r\n\r\nThe current implementation return `nil` if the `@_destroy_callback_already_called` is set to true.\r\n\r\nThe patch seems like the correct fix to me, not sure if I've missed anything.","Thank you for the investigation!\r\n\r\n> [...] otherwise, it triggers a rollback.\r\n\r\nWorth to mention that it's doesn't trigger a rollback (altough a `AR::Rollback` error is raised). This is because we are in the edge case of a double transaction and the outer transaction doesn't see the rollback. \r\n\r\n--------------------\r\n\r\nThe fix makes sense to me as well, do you want to open a PR for the core team to review?","Thanks @Edouard-chin.  I'll open a pull request over the next few days (I'm currently moving house!).","@Edouard-chin Here's the PR: https:\/\/github.com\/rails\/rails\/pull\/51066 \ud83d\ude00"],"labels":["attached PR"]},{"title":"Fix error raised when running `db:schema:load:#{name}` and test DB config is missing","body":"### Motivation \/ Background\r\n\r\nFixes #50672\r\n\r\n### Detail\r\n\r\nThe task `db:schema:load:#{name}` depends on `db:test:purge:#{name}` since adb64db which requires the DB config to be present, otherwise an error is raised.\r\n\r\n```\r\n$ bin\/rails db:schema:load:one --trace\r\n** Invoke db:schema:load:one (first_time)\r\n** Invoke db:test:purge:one (first_time)\r\n** Invoke db:load_config (first_time)\r\n** Invoke environment (first_time)\r\n** Execute environment\r\n** Execute db:load_config\r\n** Invoke db:check_protected_environments (first_time) ** Invoke db:load_config\r\n** Execute db:check_protected_environments\r\n** Execute db:test:purge:one\r\n** Execute db:schema:load:one\r\n```\r\n\r\nThis commit fixes the problem by returning early when the DB config is indeed missing.\r\n\r\n### Additional information\r\n\r\nThe task `db:schema:load` may need to be updated to depend on `db:test:purge` too, to keep it consistent with `db:schema:load:#{name}`.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["@eileencodes Thanks for reviewing. I wasn't sure if the solution was ideal, and I agree with what you said.\r\n\r\nSo, if I understand correctly, the test DB config is required, and a proper solution would be to raise an error if it's missing so users can fix it by themselves? I could work on it if that's the case.\r\n\r\nRegarding the point 2., I tried changing the task `db:schema:load` to depend on `db:test:purge` too, but it was making some tests fail. I could review it on a separate PR if that's alright."],"labels":["activerecord","railties"]},{"title":"Enable DependencyTracker to evaluate interpolated paths","body":"Previously, neither the PrismRenderParser nor the RipperRenderParser would consider an interpolated string as a dependency. The RubyTracker even included a line to explcitly filter out interpolated paths returned from the RipperRenderParser since they would end in a \"\/\". However, the RubyTracker does include the ability to evaluate explicit \"Template Dependency\" comments with wildcard nodes.\r\n\r\nThis commit extends the RipperRenderParser and PrismRenderParser to convert interpolated strings into wildcard globs. Additionally, it changes the RubyTracker to evaluate wildcards the same for both implicit and explicit dependencies. This enables the RubyTracker to identify potential dependencies for interpolated renders, which it was previously unable to do.\r\n\r\ncc @jhawthorn if you think this is a good idea I can try to apply it to ActionView::Precompiler as well\r\n","comments":["Seems like a good improvement! I am a little uncertain about us adding a feature to the RubyTracker that the ERBTracker does not have, as currently that's what is enabled by default (though I would love to switch over as we should not be parsing Ruby via regex). On the other hand it could be argued this is just another way `RubyTracker` is more accurate \ud83d\ude05.","> I am a little uncertain about us adding a feature to the RubyTracker that the ERBTracker does not have\r\n\r\nI was afraid you would say this \ud83d\ude48 haha\r\n\r\nI'll see if I can figure out how hard it would be to add it to ERBTracker as well :+1:","@jhawthorn, I added the feature to the ERBTracker and updated the test to run against all three trackers. Anything else you think we should add?"],"labels":["actionview"]},{"title":"Retry `ActionableError`s when running tests","body":"### Motivation \/ Background\r\n\r\nThis Pull Request has been created because I want to make it easier to retry actionable errors that occur when running tests. Rails already knows how to recover these errors, so lets make it possible for the user to recover from them and run their tests without exiting the process.\r\n\r\n### Detail\r\n\r\nAllow Actionable Errors encountered when running tests to be retried. This can be configured by `config.actionable_command_line_errors` and is `true` in the test environment unless the `\"CI\"` env variable is set, and false otherwise.\r\n\r\n    \r\n    Migrations are pending. To resolve this issue, run:\r\n    \r\n            bin\/rails db:migrate\r\n    \r\n    You have 1 pending migration:\r\n    \r\n    db\/migrate\/20240201213806_add_a_to_b.rb\r\n    Run pending migrations? [Yn] Y\r\n    == 20240201213806 AddAToB: migrating =========================================\r\n    == 20240201213806 AddAToB: migrated (0.0000s) ================================\r\n    \r\n    Running 7 tests in a single process (parallelization threshold is 50)\r\n    Run options: --seed 22200\r\n    \r\n    # Running:\r\n    \r\n    .......\r\n    \r\n    Finished in 0.243394s, 28.7600 runs\/s, 45.1942 assertions\/s.\r\n    7 runs, 11 assertions, 0 failures, 0 errors, 0 skips\r\n    \r\n\r\n### Additional information\r\n\r\nRight now this is only implemented in the Test Runner, but I'd also like to follow up with a similar implementation for `Rails::Command::CorrectableNameError`s.\r\n\r\nAlso we could introduce a new framework default for the configuration if this is the direction in this PR is acceptable.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Looks like we have some railties tests continuously timing out. We'll look into that ASAP.","> Looks like we have some railties tests continuously timing out. We'll look into that ASAP.\r\n\r\nNeeded to turn off the flag in the generated app in a few more tests \ud83d\udc4d \r\n","@andrewn617 Let's go ahead and rebase + add the new framework default, so new apps can onboard to this behaviour."],"labels":["activesupport","railties","docs"]},{"title":"Add ability to see on which shard the migration is being run","body":"Currently, when the app uses sharding and the migration is run, there is not way to tell on which shard it is being run.\r\nThis is a problem, because when the migration adds a unique index and we have some duplicates, the migration blows up (with a `ActiveRecord::RecordNotUnique` error) and there is no way to easily know on which shard exactly. \r\n\r\nThe problem can be solved in at least 2 ways:\r\n1. somehow `puts` shard info when running a migration\r\n2. we have a `connection_pool` object attached to the mentioned `ActiveRecord::RecordNotUnique` error (thanks to https:\/\/github.com\/rails\/rails\/pull\/48295), but the error message is not include this info (https:\/\/github.com\/rails\/rails\/pull\/48295#issuecomment-1570702063), so needs to fix that\r\n\r\nI would like to provide a PR, but need a suggestion on which path to choose. \r\n@byroot you helped to implement the linked PR, can you please suggest? ","comments":["The second one for sure.","I recall that I opened https:\/\/github.com\/rails\/rails\/pull\/49337 some time ago for a similar problem. Updated it to also solve this problem.\r\n\r\nPlease, take a look when you have time. \ud83d\ude4f "],"labels":["activerecord","attached PR"]},{"title":"Add negative_scopes option to ActiveRecord's enum method","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nIn certain situation, we might need to store and query `negative` values. Having the option to bypass the auto-generated negative scopes can avoid the conflicts.\r\n\r\n### Detail\r\n\r\nAdd `negative_scopes` option to `ActiveRecord::Enum#enum`, this offers the flexibility to optionally skip the creation of negative scopes.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"[ci skip] [docs] make increment requirement explicit","body":"### Motivation \/ Background\r\n\r\nAs of December, [ActionController::Metal::RateLimiting](https:\/\/github.com\/rails\/rails\/blob\/main\/actionpack\/lib\/action_controller\/metal\/rate_limiting.rb) provides rate limiting through the `increment` method of any cache store. RateLimiting relies on a feature of the underlying store. This feature needs to be documented, so that it remains supported, and so alternative stores know to support it.\r\n\r\nThis PR has been created to document this behavior.\r\n\r\n### Detail\r\n\r\nThe feature is that `increment`, when passed `expires_in`, will set expiration time when the key is first created, and ignore that option if the key already exists.\r\n\r\nThat functionality is already tested [here](https:\/\/github.com\/rails\/rails\/blob\/cf26c5482924babca573e6c01594d77e3321ae58\/activesupport\/test\/cache\/behaviors\/cache_increment_decrement_behavior.rb#L34), in the `CacheIncrementDecrementBehavior` test module.\r\n\r\nThis Pull Request changes the documentation of `ActiveSupport::Cache::Store.increment` to reflect a now-required feature of existing stores.","comments":["Cc #50781 ","The force-push from [a88748f ](https:\/\/github.com\/rails\/rails\/commit\/a88748fb56d8328dfd61f0c670a3198dafc2383f)to [30a914d](https:\/\/github.com\/rails\/rails\/commit\/30a914d1af074563d598ca18b8bdee84876465ab) was just a rebase, no changes in the branch."],"labels":["activesupport"]},{"title":"Enhanced ActiveStorage variant tracking control","body":"### Motivation \/ Background\r\n\r\n#### My Specific Use Case\r\n\r\nIn my project, where `ActiveStorage.track_variants = true`, I needed to generate a variant of an image (a thumbnail for a room on a floorplan) but did not want to create a variant record of the original image record. This is because I intended to save the variant on a child relation, separate from the original image record.\r\n\r\n#### The Challenge\r\nWith `ActiveStorage.track_variants = true` every variant generated through `ActiveStorage` is automatically tracked in the database to the original record. There are cases in this application where we **do** want to track these variant records so I was unable to change the default configuration. This meant to properly generate my variant I had to use `ImageProcessing::Vips` directly to not generate the variant record. This worked but generated two concerns for me:\r\n\r\n1. This specific code is dependent on `ImageProcessing::Vips` and if we were to ever migrate to another image processor we would have to remember to update this code as well instead of just relying on the `ActiveStorage` default processor.\r\n2. It strays enough from the standard pattern when generating `ActiveStorage` variants that without good documentation it can become confusing to maintain.\r\n\r\n### Detail\r\n\r\nThis pull request adds the `track` option to the `variant` method which allows for overriding of the `ActiveStorage.track_variants`. This is useful when in cases where you want to stray from the application's standard configuration.\r\n\r\n```ruby\r\nActiveSupport.track_variants\r\n# => true\r\nuser.avatar.variant(track: false, resize_to_limit: [100, 100])\r\n# => #<ActiveStorage::Variant:0x00007f4e0004ffb0> \r\n```\r\nand\r\n```ruby\r\nActiveSupport.track_variants\r\n# => false\r\nuser.avatar.variant(track: true, resize_to_limit: [100, 100])\r\n# => #<ActiveStorage::VariantWithRecord:0x00007f4e0004ffb0> \r\n```\r\n\r\n### Additional information\r\n\r\nThis is my first time contributing to Rails and I appreciate anyone who takes the time to read all this. I tried my best to follow all conventions and to keep all current functionality, but in the case that I missed something I'd be happy to discuss and fix whatever is needed.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activestorage"]},{"title":"Add cost argument to has_secure_password","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThere may be instances where a developer is working in an environment where a higher cost than the default (12) for BCrypt is required either due to arbitrary security requirements or the recommended minimum changes and the version of bcrypt used isn't updated.\r\n\r\n### Detail\r\n\r\nThis change adds a `cost:` argument to `has_secure_password`. If provided, it will use that value for the password cost. Its value is validated to make sure it's between `BCrypt::Engine::MIN_COST` and `BCrypt::Engine::MAX_COST`.\r\n\r\nAdditionally `[password attribute]_cost` is exposed as a convenience method to determine the cost used for the set password hash. This can be used to review the current costs from a user record and either transparently upgrade the user's password or force a password reset.\r\n\r\n### Additional information\r\n\r\nI'm not 100% married to using `cost` as the argument name as it affects only new passwords created for the record going forward.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["> can we add a config for using the min cost in the test env (for performance)?\r\n\r\nIt's already there: https:\/\/github.com\/rails\/rails\/blob\/a9573eaa6beb62720b398154df4ae171e5526e85\/activemodel\/lib\/active_model\/railtie.rb#L17"],"labels":["activemodel"]},{"title":"Introduce `ActiveSupport::TestCase.around`","body":"### Motivation \/ Background\r\n\r\nWhen discussing testing frameworks for new projects, the absence of `around` hooks is usually a focal point of the conversation that pushes consensus toward alternative test harnesses.\r\n\r\nMinitest itself [will not support built-in `around` hooks](https:\/\/github.com\/minitest\/minitest\/issues\/892). While the [minitest-hooks](https:\/\/github.com\/jeremyevans\/minitest-hooks) gem provides support for `around`, Active Support's callback system makes adding `around` hooks fairly trivial, and is guaranteed to be implemented in the same way as all other callbacks (Controller, Jobs, Mailers, etc.).\r\n\r\n\r\n### Detail\r\n\r\nAdd a callback, which runs around `TestCase#setup`, the `test` block, and `TestCase#teardown`. Yields the test class instance and the test case to the block:\r\n\r\n```ruby\r\nclass Test < ActiveSupport::TestCase\r\n  around do |test_case, &block|\r\n    Client.with(stubbed: true, &block)\r\n  end\r\nend\r\n```\r\n\r\n### Additional Information\r\n\r\nTo support this change, rename the `activesupport\/test\/testing\/after_teardown_test.rb` file to `activesupport\/test\/testing\/callbacks_test.rb`.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Is this new callback supposed to wrap the entire test run or just the `setup` part? In your example\r\n\r\n```ruby\r\n  around do |_, test_case|\r\n    Client.with(stubbed: true) { test_case.call }\r\n  end\r\n\r\n  test \"#stubbed is true\" do\r\n    puts Client.stub # Is this supposed to be true?\r\n  end\r\n```\r\n\r\nFrom what I understand this patch just wraps the `setup` part. So in the snippet above, `Client.stub` is no longer `true`.\r\n\r\nThis is what works with this patch\r\n\r\n```ruby\r\n  around do |_, test_case|\r\n    Client.with(stubbed: true) { test_case.call }\r\n  end\r\n\r\n  setup do\r\n    puts Client.stub #=> true\r\n  end\r\n\r\n  test \"#stubbed is true\" do\r\n    puts Client.stub #=> false\r\n  end\r\n```\r\n\r\nHere is a full reproduction script:\r\n\r\n<details>\r\n<summary> Script <\/summary>\r\n\r\n```ruby\r\nrequire_relative \"abstract_unit\"\r\nrequire \"active_support\/core_ext\/object\/with.rb\"\r\n\r\nclass MyTest < ActiveSupport::TestCase\r\n  class Client\r\n    def self.stubbed=(stubbed)\r\n      @stubbed = stubbed\r\n    end\r\n\r\n    def self.stubbed\r\n      @stubbed\r\n    end\r\n  end\r\n\r\n  around do |_, test_case|\r\n    Client.with(stubbed: true) do\r\n      test_case.call\r\n    end\r\n  end\r\n\r\n  setup do\r\n    puts Client.stubbed #=> true\r\n  end\r\n\r\n  test \"some test\" do\r\n    assert_equal(\"true\", Client.stubbed) #=> test fails, Client.stubbed is nil\r\n  end\r\nend\r\n```\r\n<\/details>","@Edouard-chin thank you for sharing that. You're right, the callback only wraps `:setup`. I'm investigating further.","> It's not the case anymore now that we hooked into `Minitest#run`, the around callback wraps the whole test run (before and after any Minitest vanilla callbacks).\r\n> \r\n> This can potentially be problematic if a user decide to mutate the database as we are no longer inside a database transaction.\r\n> \r\n> ```ruby\r\n> around do |_, test|\r\n>   test.call\r\n> \r\n>   Book.destroy_all # We are no longer in a transaction and the state of the DB is changed for all subsequent tests.\r\n> end\r\n> ```\r\n> \r\n> Also, I think Minitest `after_teardown` method was designed mainly for library authors to clean things up at the very end and ensure no application code runs after. We are bypassing that a bit \ud83d\ude05 which could lead to some weird issues for the user (i.e. if you use a library like webmock to mock http requests, Webmock won't catch requests made in the around callback).\r\n\r\n@Edouard-chin Thank you for pointing that out! I agree, it is important to avoid those types of surprises.\r\n\r\nHaving said that, any Rails application that's currently utilizing `around` blocks through [minitest-around](https:\/\/github.com\/splattael\/minitest-around\/tree\/master) (the recommended 3rd party solution) would already face these same risks, since it's also defined as a [callback of sorts around `#run`](https:\/\/github.com\/splattael\/minitest-around\/blob\/d0fdbae13fdd7939d6a12f06d39a14e1e85b6a1e\/lib\/minitest\/around\/unit.rb#L6-L15):\r\n\r\n```ruby\r\n  alias_method :run_without_around, :run\r\n  def run(*args)\r\n    if defined?(around)\r\n      result = nil\r\n      around { result = run_without_around(*args) }\r\n      result\r\n    else\r\n      run_without_around(*args)\r\n    end\r\n  end\r\n```\r\n\r\n---\r\n\r\n> What do you think if we wrapped the `around` callback only for the test and none of the `before\/after` callbacks?\r\n\r\nSince tests can be defined in both `def test_method_name` and with `def self.test`, I'm not sure of how to hook into their declarations to wrap them in `run_callback :run` blocks. Do you have an idea on how I might explore that?\r\n\r\n---\r\n\r\n> Normally `setup` and `around` are called in the order they were defined, here in this case `around` will always run first since we are hooking at a different point. Not a big deal but I thought it was worth pointing out.\r\n\r\nThat's definitely worth documenting.\r\n\r\n","> utilizing around blocks through [minitest-around](https:\/\/github.com\/splattael\/minitest-around\/tree\/master) the recommended 3rd party solution\r\n\r\nThanks, I didn't know it was the recommended solution. Could be wrong but I find its usage quite limited if it overrides Minitest life cycle:\r\n\r\n```ruby\r\ndef around(&block)\r\n# Runs before any library has had a chance to call their before_setup hook\r\n# I.e. you can't setup the state of your DB without affecting subsequent tests,\r\n# can't mock or stub if you use mocha or other library that depends on Minitest life cycle...\r\n\r\nblock.call\r\n\r\n# Runs after any library called their after_teardown hook\r\nend\r\n```\r\n\r\n-----------\r\n\r\n> [...] how to hook into their declarations to wrap them in run_callback :run\r\n\r\nI dug a bit and Minitest doesn't make it easy, the only thing I could think of is the old `alias_method` chain trick, but it will need to be done at runtime.\r\n\r\n\r\n```ruby\r\nmodule Minitest\r\n  class Test\r\n    def self.new(test_name)\r\n      alias_method :run_test, test_name\r\n      alias_method test_name, :run_test_with_callback\r\n\r\n      super\r\n    end\r\n\r\n    def run_test_with_callback\r\n      run_callbacks(:run) do\r\n        run_test\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThat being said, let's wait for @rafaelfranca or other Core team member's decision, maybe adding a hook around `run` is enough and I'm overcomplicating things :).\r\n\r\nThanks for working on this!\r\n\r\n","> > utilizing around blocks through [minitest-around](https:\/\/github.com\/splattael\/minitest-around\/tree\/master) the recommended 3rd party solution\r\n> \r\n> Thanks, I didn't know it was the recommended solution. Could be wrong but I find its usage quite limited if it overrides Minitest life cycle:\r\n\r\n@Edouard-chin re-reading https:\/\/github.com\/minitest\/minitest\/issues\/892#issuecomment-1149437085, I'm realizing that the recommended third-party solution is [minitest-hooks](https:\/\/github.com\/jeremyevans\/minitest-hooks\/), and **not** [minitest-around](https:\/\/github.com\/splattael\/minitest-around\/tree\/master).\r\n\r\n`minitest-hooks` support for [around](https:\/\/github.com\/jeremyevans\/minitest-hooks\/#label-around+Hooks) and [around_all](https:\/\/github.com\/jeremyevans\/minitest-hooks\/#label-around_all+Hooks) is more sophisticated, and integrates more tightly with the setup-teardown behavior you've outlined above.\r\n\r\nScanning through [the `minitest-hooks` source](https:\/\/github.com\/jeremyevans\/minitest-hooks\/blob\/a51420bb2ffe0fe151cf82826d64a5d77c32ccf2\/lib\/minitest\/hooks\/test.rb#L61-L101), they're overriding some `# :nodoc:` methods like [time_it](https:\/\/github.com\/minitest\/minitest\/blob\/ebb468c81c0eea069234127bd6a101c84e955872\/lib\/minitest.rb#L322) and [with_info_handler](https:\/\/github.com\/minitest\/minitest\/blob\/ebb468c81c0eea069234127bd6a101c84e955872\/lib\/minitest\/test.rb#L232). \r\n\r\nOriginally, Active Support Callbacks were a trivial replacement for the `minitest-around`-style of implementing these hooks. After investigating the internals of `minitest-hooks`, a Callback-powered solution wouldn't be as trivial.\r\n\r\nHaving acknowledged that, built-in support for `around` blocks would be valuable to Active Support, especially when composed with other built-in block helpers like [travel_to](https:\/\/edgeapi.rubyonrails.org\/classes\/ActiveSupport\/Testing\/TimeHelpers.html#method-i-travel_to), [with_routing](https:\/\/edgeapi.rubyonrails.org\/classes\/ActionDispatch\/Assertions\/RoutingAssertions.html#method-i-with_routing), [I18n.with_locale](https:\/\/guides.rubyonrails.org\/i18n.html#managing-the-locale-across-requests), [Object#with](https:\/\/edgeapi.rubyonrails.org\/classes\/Object.html#method-i-with), etc. \r\n\r\nOf the two options, which would Core consider worth exploring:\r\n\r\n1. Build-in `ActiveSupport::TestCase.around`\r\n2. Mention `minitest-hooks` in the [Testing Rails Applications](https:\/\/edgeguides.rubyonrails.org\/testing.html#rails-meets-minitest) Minitest section","I think here is why minitest doesn't want to implement this \ud83d\ude04. I'm also not sure if Rails should implement it.\r\n\r\nThe implementation will not be simple and will likely rely on reaching out to many minitest internal methods that we should not.\r\n\r\nIt is clear that Rails will not mention any gem in our documentation because we don't mention 3rd-party gems in our documentation.\r\n\r\n@matthewd opiniions?","> I dug a bit and Minitest doesn't make it easy, the only thing I could think of is the old `alias_method` chain trick, but it will need to be done at runtime.\r\n> \r\n> ```ruby\r\n> module Minitest\r\n>   class Test\r\n>     def self.new(test_name)\r\n>       alias_method :run_test, test_name\r\n>       alias_method test_name, :run_test_with_callback\r\n> \r\n>       super\r\n>     end\r\n> \r\n>     def run_test_with_callback\r\n>       run_callbacks(:run) do\r\n>         run_test\r\n>       end\r\n>     end\r\n>   end\r\n> end\r\n> ```\r\n\r\n@Edouard-chin I've incorporated this suggestion into the branch. This restores the behavior I'd originally intended: the `around` should fire after `setup` and before `teardown`.\r\n\r\nI worry about the runtime costs, but otherwise, it's much less code without any dependencies on `# :nodoc:` or private methods.\r\n\r\nIn addition to using `alias_method` to wrap the test calls in the `run_callbacks` block, I'd also investigated hooking into [Module#method_added](https:\/\/docs.ruby-lang.org\/en\/master\/Module.html#method-i-method_added) for methods that begin with `\"test_\"`. I'd abandoned that, but could push up a version that utilizes that approach if we feel it's an improvement.","Yeah, this doesn't seem like we have great options. \r\n\r\n> Active Support's callback system makes adding around hooks fairly trivial,\r\n\r\nWith this claim seemingly invalidated, perhaps that's the end?\r\n\r\n---\r\n\r\nIf we did want to push ahead, in 15 minutes of reading, of the bad options available.... `def send`? \ud83d\ude43 (This is a reluctant, but serious, suggestion.)","> def send? \ud83d\ude43 (This is a reluctant, but serious, suggestion.)\r\n\r\nFWIW I also thought about this, and also felt it was the best of the worst option \ud83d\ude04 ","> This is a reluctant, but serious, suggestion.\r\n\r\nI've pushed up changes that amount to something like:\r\n\r\n```ruby\r\ndef send(name, ...) # :nodoc:\r\n  if name.start_with?(\"test_\")\r\n    run_callbacks :test do\r\n      capture_exceptions { super }\r\n    end\r\n  else\r\n    super\r\n  end\r\nend\r\n```\r\n\r\nThis is uncharted territory for me, personally. Is there prior art elsewhere in the codebase for extension in this way? What are the performance characteristics of changing message transmission at this level of the Object?\r\n\r\nHere's some **rough** benchmarking from `time bin\/rails test` on a moderately sized test suite changed to include callback definition, the conditional in `#send`, and `0` defined `around { ... }` hooks:\r\n\r\n**Before**\r\n\r\n```\r\nFinished in 15.794779s, 157.0772 runs\/s, 444.0708 assertions\/s.\r\n2481 runs, 7014 assertions, 0 failures, 0 errors, 0 skips\r\nrails test  104.56s user 46.58s system 810% cpu 18.640 total\r\n```\r\n\r\n**After**\r\n\r\n```\r\nFinished in 16.438474s, 150.9264 runs\/s, 426.6819 assertions\/s.\r\n2481 runs, 7014 assertions, 0 failures, 0 errors, 0 skips\r\nrails test  105.31s user 48.26s system 790% cpu 19.425 total\r\n```","Here's a rough benchmark:\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\nrequire \"benchmark\/ips\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"activesupport\"\r\nend\r\n\r\nrequire \"active_support\/all\"\r\n\r\nclass ControlTest < ActiveSupport::TestCase\r\n  def test_passes\r\n    assert true\r\n  end\r\nend\r\n\r\nclass VariableTest < ActiveSupport::TestCase\r\n  define_callbacks :test\r\n\r\n  def self.around(*args, &block)\r\n    set_callback(:test, :around, *args, &block)\r\n  end\r\n\r\n  def send(name, ...) # :nodoc:\r\n    if name.start_with?(\"test_\")\r\n      run_callbacks :test do\r\n        capture_exceptions { super }\r\n      end\r\n    else\r\n      super\r\n    end\r\n  end\r\n\r\n  def test_passes\r\n    assert true\r\n  end\r\nend\r\n\r\nBenchmark.ips do |x|\r\n  x.report(\"control\") { Minitest.run_one_method(ControlTest, \"test_passes\") }\r\n  x.report(\"variable\") { Minitest.run_one_method(VariableTest, \"test_passes\") }\r\n  x.compare!\r\nend\r\n```\r\n\r\nThe results show a **1.22x** decrease.\r\n\r\n```\r\nWarming up --------------------------------------\r\n             control    26.761k i\/100ms\r\n            variable    21.871k i\/100ms\r\nCalculating -------------------------------------\r\n             control    266.618k (\u00b1 1.5%) i\/s -      1.338M in   5.019700s\r\n            variable    219.303k (\u00b1 1.7%) i\/s -      1.115M in   5.087616s\r\n\r\nComparison:\r\n             control:   266618.1 i\/s\r\n            variable:   219303.0 i\/s - 1.22x  slower\r\n```\r\n\r\nWould it viable to conditionally override `#send` the first time that an `around` callback is defined?","I've pushed up https:\/\/github.com\/rails\/rails\/pull\/50889\/commits\/37435608e3d34b6010186e31685e472ac7548f26 to conditionally override `#send` to support around callbacks **only** after the test case defines its first `around { ... }` callback."],"labels":["activesupport","docs"]},{"title":"[Fix #50812] Don't duplicate selects, inner and outer joins when merging with STI","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nFixes https:\/\/github.com\/rails\/rails\/issues\/50812\r\n\r\n### Detail\r\n\r\nThis Pull Request changes `#merge_select_values`, `#merge_joins` and `#merge_outer_joins` in `ActiveRecord::Relation::Merger` to unionise selects, inner and outer joins when the two sources of a `merge` are related via STI.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\nThe only similar case left in `ActiveRecord::Relation::Merger` is when [merging preloads](https:\/\/github.com\/rails\/rails\/blob\/68eade83c87ae309191add6dfa4959d7d7e07464\/activerecord\/lib\/active_record\/relation\/merger.rb#L101).\r\n\r\nI don't think that is similar to these cases since the preload values are simply used to preload associations. I thought I would just mention it anyway.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Document Attached::Model#attachment_changes [ci skip]","body":"### Motivation \/ Background\r\n\r\nAdds documentation for the `attachment_changes` method of Active Storage.\r\n\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Having this as part of public API would be very nice. However there is at least one gotcha with this that I'm aware of:\r\nThe `attachment_changes` are cleared in an `after_commit` hook here https:\/\/github.com\/rails\/rails\/blob\/68eade83c87ae309191add6dfa4959d7d7e07464\/activestorage\/lib\/active_storage\/attached\/model.rb#L140\r\nhttps:\/\/github.com\/rails\/rails\/blob\/68eade83c87ae309191add6dfa4959d7d7e07464\/activestorage\/lib\/active_storage\/attached\/model.rb#L240\r\n\r\nIt's not immediatly obvious why the changes would be empty in your own `after_commit` just because you defined your callback after (or before depending on `run_after_transaction_callbacks_in_order_defined`) `has_one_attached`\/`has_many_attached`.","> Having this as part of public API would be very nice. However there is at least one gotcha with this that I'm aware of: The `attachment_changes` are cleared in an `after_commit` hook here\r\n> \r\n> https:\/\/github.com\/rails\/rails\/blob\/68eade83c87ae309191add6dfa4959d7d7e07464\/activestorage\/lib\/active_storage\/attached\/model.rb#L140\r\n> \r\n> https:\/\/github.com\/rails\/rails\/blob\/68eade83c87ae309191add6dfa4959d7d7e07464\/activestorage\/lib\/active_storage\/attached\/model.rb#L240\r\n> \r\n> It's not immediatly obvious why the changes would be empty in your own `after_commit` just because you defined your callback after (or before depending on `run_after_transaction_callbacks_in_order_defined`) `has_one_attached`\/`has_many_attached`.\r\n\r\nI\u2019m not sure I follow sorry, would that not be as expected? Surely after the commit, there _are_ no unsaved attachment changes, so you would expect `attachment_changes` to be empty.","> I\u2019m not sure I follow sorry, would that not be as expected? Surely after the commit, there _are_ no unsaved attachment changes, so you would expect `attachment_changes` to be empty.\r\n\r\nMaybe you're right. If you map this over to [changes](https:\/\/api.rubyonrails.org\/classes\/ActiveModel\/Dirty.html#method-i-changes) from `ActiveModel::Dirty` then my expectation would be wrong."],"labels":["docs","activestorage"]},{"title":"Put plural inverse association inference behind a configuration flag","body":"Ref: https:\/\/github.com\/rails\/rails\/pull\/50284\r\n\r\nWhile having the inverse association configured it generally positive as it avoid some extra queries etc, infering it may break legecy code, as evidenced by how it broke `ActiveStorage::Blob` in https:\/\/github.com\/rails\/rails\/pull\/50800\r\n\r\nAs such we can't just enable this behavior immediately, we need to provide and upgrade path for users.\r\n\r\nAt this stage this PR is just a quick draft to discuss how exactly we should gate this. We can just make it a regular framework default, but perhaps emitting a deprecation warning when we would have infered the inverse relation would help users upgrade?  cc @rafaelfranca as you generally have great insights on this kind of new framework default.\r\n\r\n","comments":["Forgot to cc @seanpdoyle and @davidstosik "],"labels":["activerecord","railties","docs"]},{"title":"dump schema: ignore tables from any postgres schema","body":"### Motivation \/ Background\r\n\r\nthis pull request improve the current implementation of ignoring table during the schema dump by allowing to ignore tables from other postgres schema than \"public\".\r\n\r\n### Detail\r\n\r\nThis Pull Request changes [REPLACE ME]\r\n\r\n### Additional information\r\n\r\nthe proposed implementation lack the ability to specify exactly from which schema, the table is ignored but I think that even do, it's better than the current implementation.\r\n\r\n- [pg_dump documentation](https:\/\/www.postgresql.org\/docs\/current\/app-pgdump.html)\r\n- [pattern documentation](https:\/\/www.postgresql.org\/docs\/current\/app-psql.html#APP-PSQL-PATTERNS\r\n\r\n### Checklist\r\n\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n\r\nI feel that the code change is too small to request updating CHANGELOG or writing new tests","comments":[],"labels":["activerecord"]},{"title":"Comparing `Time` object with an integer doesn't throw an error ","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\"\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\nend\r\n\r\nrequire \"active_support\"\r\nrequire \"active_support\/core_ext\/time\"\r\nrequire \"minitest\/autorun\"\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_stuff\r\n    # This would have raise an argument error in Ruby for trying to compare a Time object with an Integer\r\n    assert Time.now >= Time.now.to_i - 999_999\r\n\r\n    assert Time.now.to_i >= Time.now.to_i - 999_999\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\nI'm not sure but I would expect one of the following:\r\n\r\n1. Raise an argument error like what Ruby does when trying to compare a `Time` object with an `Integer`\r\n2. Convert the `Time` object to an `Integer` before comparing\r\n3. Convert the `Integer` to a `Time` object before comparing\r\n\r\n### Actual behavior\r\n\r\nNo errors are raised and the code will always evaluate to `false`.\r\n\r\n### System configuration\r\n**Rails version**: 7.1.3\r\n\r\n**Ruby version**: 3.2.2\r\n","comments":["I tried to follow the method chain for `Time#<=>`, since it's used for `>=` comparisons. In Rails, that method is defined as `#compare_with_coercion`:\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/c7551d08fc572655105da38394d8672b8259c22f\/activesupport\/lib\/active_support\/core_ext\/time\/calculations.rb#L315-L328\r\n\r\nThe integer value on the right side of the comparison isn't `Time`-ish, so the `Time` object on the left side gets converted to a `DateTime` and then compared to the integer value. `DateTime#<=>` checks if the object on the right side responds to `#to_datetime` and goes up the inheritance chain if not (which is the case here):\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/c7551d08fc572655105da38394d8672b8259c22f\/activesupport\/lib\/active_support\/core_ext\/date_time\/calculations.rb#L206-L214\r\n\r\nThe super-method in this case is `Date#<=>`. There's a method in Rails for this, but it ends up calling the native `#<=>` method for `DateTime` (which is defined on `Date`) if the object on the right side isn't a `Time`:\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/c7551d08fc572655105da38394d8672b8259c22f\/activesupport\/lib\/active_support\/core_ext\/date\/calculations.rb#L151-L160\r\n\r\nHere's the twist. While I didn't read through the C code for the native `Date#<=>`, https:\/\/ruby-doc.org\/3.2.2\/exts\/date\/Date.html#method-i-3C-3D-3E specifically notes that when comparing to a numeric value, the `#ajd` method is called on the `Date` and the resulting value is compared to the numeric value on the right side. That `#ajd` method is the \"astronomical Julian day number\"; I wouldn't have been able to tell you what that meant before today, but the important thing is that it's a count of days (since about 6700 years ago) and nowadays is between 2_000_000 and 3_000_000. But the integer on the right side of the comparison came from calling `Time#to_i`, and that's the number of seconds since January 1, 1970, currently a bit over 1_700_000_000. So you have to subtract a very large number from `Time.now.to_i` in order for `Time.now` to compare as greater. And for what it's worth, this also affects `DateTime` comparisons to integers.\r\n\r\nI haven't checked to see how far back this behavior goes.","To follow up on this a bit and lend support to the original statement of the issue, I think it makes sense that for any `Time` instances `t1` and `t2`,  if `t1 > t2` evaluates to true and `t1.to_i > t2.to_i` evaluates to true, then `t1 > t2.to_i` should either evaluate to true or raise an exception. Instead, due to unexpected coercion, `t1 > t2.to_i` is only true if `t2` is on or before 1970-01-29 (the latest day that included a time when the number of seconds since the Unix epoch was less than the astronomical Julian day number) or `t1` is very far in the future. All of this goes for `DateTime` instances as well.\r\n\r\nIn terms of solving this, I'm not sure whether it makes more sense to fix it in `Time` or `DateTime`. Fixing it in `DateTime` should also address the issue in `Time` (due to the partial delegation of `Time#<=>` to `DateTime#<=>`) but it isn't clear to me what the solution would be for `DateTime`. I'm assuming that there isn't much interest in making `DateTime#<=>` coerce the object into Unix time when comparing to a numeric value, since that could cause the method to return a completely different value just by adding Active Support to a project. Alternatively, the `DateTime#to_i` method in Active Support could be changed to return the astronomical Julian day number instead of Unix time, which would be more conceptually consistent with Ruby. But that method has returned the Unix time in Rails for almost 15 years, and `DateTime#to_f` has returned a comparable number for even longer. And since Ruby considers `DateTime` deprecated, maybe it makes sense to just fix the issue in `Time` and not worry about `DateTime`?"],"labels":["activesupport","With reproduction steps"]},{"title":"Initialize ActiveRecord::Migrator.migrations_paths at application initialization","body":"This is already done in rake tasks in the `load_config` task. However, if migrations want to be manipulated\/used by a non-rake program this initialization would miss any extra directories configured by the user.\r\n\r\nWe move the initialization to an initializer block. With this we can remove the rake config since it depends on `environment` anyway.\r\n\r\n### Motivation \/ Background\r\n\r\nIn our app we use schema-based multitenancy which means we need to setup and migrate for each tenant. We have created\r\na few helpers to aid in this task. \r\nRecently, we began modularizing our app, and started moving our migrations into packs. \r\nThen we started facing issues with migrations that tried to run more than once.\r\nWe diagnosed the root cause that our tenant creation command was not invoking `db:load_config` before loading the schema.\r\nThis resulted in \"packed\" migrations not being recorded in the initial seed of the `schema_migrations` table. Then when we attempted to run migrations on that tenant those migrations would try to run and fail. \r\n\r\nThis Pull Request has been created because a fix for this is to ensure whenever the app is loaded, the correct default paths\r\nare loaded.\r\n\r\n### Detail\r\n\r\nThis Pull Request changes the initialization from a rake task to the app initialization process.\r\n\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[">  Tests are added or updated if you fix a bug or add a feature.\r\n\r\nI don't know how to test this :("],"labels":["activerecord"]},{"title":"Accept Tempfile as ActiveStorage attachable","body":"`File` is already accepted as an attachable, so why not?","comments":[],"labels":["activestorage"]},{"title":"Support options for ActionMailer delivery callbacks","body":"Closes https:\/\/github.com\/rails\/rails\/issues\/50830.\r\n\r\nThe code works, but docs\/tests etc are currently missing. I want to validate the approach before proceeding.\r\n\r\nInside action mailer I am reusing private methods from the implementation of callbacks from the action controller, see https:\/\/github.com\/rails\/rails\/blob\/main\/actionpack\/lib\/abstract_controller\/callbacks.rb.\r\n\r\nThe questions to consider are:\r\n1. Should the mailer callbacks really depend on the internals of controller callbacks, considering that it already includes it https:\/\/github.com\/rails\/rails\/blob\/776626ff987a96201b0bdbd86d716ca6698fa8b3\/actionmailer\/lib\/action_mailer\/base.rb#L493\r\n2. Controllers callbacks have a `raise_on_missing_callbacks_action`, see https:\/\/github.com\/rails\/rails\/blob\/776626ff987a96201b0bdbd86d716ca6698fa8b3\/actionpack\/lib\/abstract_controller\/callbacks.rb#L36 which can be set via `config.action_controller. raise_on_missing_callbacks_action`. This kinda makes sense for action mailer too, so should we introduce `config.action_mailer.raise_on_missing_callbacks_action` config? \r\n3. Controller callbacks use the word `\"controller\"`, see https:\/\/github.com\/rails\/rails\/blob\/776626ff987a96201b0bdbd86d716ca6698fa8b3\/actionpack\/lib\/abstract_controller\/callbacks.rb#L54, while for mailer we should use the `\"mailer\"` word or should we make the message text more generic? \r\n\r\ncc @bensheldon ","comments":[],"labels":["actionmailer"]},{"title":"Document autosave validation behavior for ActiveRecord associations [ci skip]","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nThis Pull Request needs to be merged to document the behavior of autosave: true enabling validations for belongs_to and has_one associations in ActiveRecord. Currently, this behavior is implemented in the code but not mentioned in the official documentation. This can lead to confusion for developers who rely on the Rails guides for accurate information on how ActiveRecord associations work. Including this information will improve the clarity and comprehensiveness of the Rails documentation.\r\n-->\r\n\r\n### Detail\r\n\r\nThis Pull Request adds documentation comments to the belongs_to and has_one methods in ActiveRecord::Associations to explain that autosave: true also enables validations by default. This is to reflect the actual behavior of these methods, as described in the source code and observed in application behavior.\r\n\r\n### Additional information\r\n\r\nReference to the issue discussed in Rails: Undocumented - validations enabled by autosave #50807\r\nInline gemfile with bundler example -\r\n``` ruby\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile do\r\n  source \"https:\/\/rubygems.org\"\r\n  gem \"rails\", \"7.1.3\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :authors do |t|\r\n    t.string :name\r\n  end\r\n\r\n  create_table :books do |t|\r\n    t.belongs_to :author\r\n    t.string :title\r\n  end\r\nend\r\n\r\nclass Author < ActiveRecord::Base\r\n  has_one :book, autosave: true\r\nend\r\n\r\nclass Book < ActiveRecord::Base\r\n  belongs_to :author\r\n  validates :title, presence: true\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_autosave_with_validations\r\n    author = Author.new(name: \"J.K. Rowling\")\r\n    author.build_book # Not setting a title to trigger validation failure\r\n\r\n    refute author.save, \"Author should not be saved due to book validation failure\"\r\n    assert author.book.errors.full_messages.include?(\"Title can't be blank\"), \"Book should contain error on title\"\r\n  end\r\nend\r\n\r\n```\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change, specifically the addition of documentation for autosave: true behavior.\r\n* [x] Commit message includes a detailed description of the changes, for example: [Doc #50807] Document autosave validation behavior for associations.\r\n* [x] Tests are not required as this is a documentation update.\r\n* [x] CHANGELOG is not updated since this is a minor documentation change and does not affect library behavior.\r\n","comments":["Thanks for the PR. This seems to overlap with: https:\/\/github.com\/rails\/rails\/pull\/50820\r\n\r\nEdit.. nevermind. This makes changes to a different part of the docs. "],"labels":["activerecord"]},{"title":"Action View: Fallback to existing partial when possible","body":"Closes [#50844][]\r\n\r\nMotivation \/ Background\r\n---\r\n\r\nA controller declared in the top-level module can render a top-level Active Model instance whose partial is declared in the root view directory (like `articles\/_article.html.erb`).\r\n\r\nA controller scoped within a module can render an Active Model instance whose partial is similarly scoped within view directory (like `scoped\/articles\/_article.html.erb`).\r\n\r\nA controller scoped within a module cannot render an Active Model instance whose partial is declared in the root view directory (like `articles\/_article.html.erb`), despite the absence of a similarly scoped partial.\r\n\r\nThis is intended behavior that's powered by\r\n[`config.action_view.prefix_partial_path_with_controller_namespace = true`][prefix_partial_path_with_controller_namespace] (`true` by default).\r\n\r\nThis change was introduced in March of 2012 as part of [#5625][].\r\n\r\nDetail\r\n---\r\n\r\nAs a consumer of Action View, my intuition is that the lookup would fallback, in the same way that a controller that inherits from `ApplicationController` could define its own view, then rely on fallback to render an `app\/views\/application` partial.\r\n\r\nThis commit modifies the behavior to gracefully fall back to the root-level view partial.\r\n\r\nChecklist\r\n---\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n\r\n[#50844]: https:\/\/github.com\/rails\/rails\/issues\/50844\r\n[prefix_partial_path_with_controller_namespace]: https:\/\/guides.rubyonrails.org\/configuring.html#config-action-view-prefix-partial-path-with-controller-namespace\r\n[#5625]: https:\/\/github.com\/rails\/rails\/pull\/5625\r\n","comments":[],"labels":["actionview"]},{"title":"Fixes ActionView::Template::Error when pasting images via Trix","body":"The asset pipeline really shouldn't be checked for remote images regardless, but this also happens to fix an issue with images pasted into Trix that get serialized as action-text-attachments with \"blob:\" urls.\r\n","comments":[],"labels":["actiontext"]},{"title":"Set ActiveRecord::RecordNotFound#id when raised from a call to #reload a deleted record","body":"### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request has been created because I am writing some tests for my app around records being deleted by calling `reload`, and there was no easy way to assert that the record raising the `ActiveRecord::RecordNotFound` exception was the record I was expecting\r\n\r\n### Detail\r\n\r\nThis Pull Request changes `raise_record_not_found_exception!` to find IDs based on the primary key from the where condition, if no IDs are explicitly passed\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Fix SQLite table definition parsing bug to handle commas in default function definitions","body":"### Motivation \/ Background\r\n\r\nThis Pull Request fixes a bug in the low-level SQLite adapter introspection logic. I came across the bug when working with virtual columns and JSON, but there are many possible cases where this would cause problems. Here is one reproducible bug script though:\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\");\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n    t.json :payload, null: false, default: {}\r\n    t.virtual :external_id, type: :string, as: \"JSON_EXTRACT(payload, '$.id')\", stored: true, null: false, index: true\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base; end\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_virtual_column_with_comma_in_definition_is_autopopulated\r\n    post = Post.create!(payload: { id: 'pst_1' })\r\n\r\n    assert_equal 'pst_1', post.external_id\r\n  end\r\nend\r\n```\r\n\r\n### Detail\r\n\r\nThis Pull Request more intelligently parses the SQL string description of the table to ensure that we only split by commas that mark a new column definition. In order to accomplish this, the table parsing method needs the list of column names for the table. When `table_structure_sql` is called by `table_structure_with_collation`, these can be supplied as they are already present; when it is called by `foreign_keys`, however, they are not present and thus must be fetched.\r\n\r\nI also added a simple regression test as a part of the virtual column test case.\r\n\r\n### Additional information\r\n\r\nThis bug has existed for a long time, but I most recently touched the relevant code in https:\/\/github.com\/rails\/rails\/pull\/49376.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n\r\ncc: @byroot (this is related to #49346), @tenderlove (this is related to https:\/\/github.com\/rails\/rails\/pull\/49290), @yahonda (this is related to https:\/\/github.com\/rails\/rails\/pull\/49376)\r\n","comments":[],"labels":["activerecord"]},{"title":"Ensure pre-7.1 migrations use legacy index names when using `rename_table`","body":"Fixes https:\/\/github.com\/rails\/rails\/issues\/50833.\r\nFollow up to https:\/\/github.com\/rails\/rails\/pull\/47753 and https:\/\/github.com\/rails\/rails\/pull\/47863.\r\n\r\nThe easiest way to preserve the old behavior is to rename indexes back after the `rename_table` was run.","comments":[],"labels":["activerecord"]},{"title":"`ActiveRecord::Migration[7.0]`'s `rename_table` uses 7.1's new truncated index name format","body":"### Steps to reproduce\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", \"7.1.3\"\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_index_name_after_rename_table_with_long_table_name\r\n    long_table_name = \"a\" * 48\r\n\r\n    migration_class = Class.new(ActiveRecord::Migration[7.0]) do\r\n      define_method :migrate do |x|\r\n        create_table :posts do |t|\r\n          t.string :title\r\n          t.index :title\r\n        end\r\n        rename_table :posts, long_table_name\r\n      end\r\n    end\r\n    migration = migration_class.new\r\n\r\n    ActiveRecord::Migrator.new(\r\n      :up,\r\n      [migration],\r\n      ActiveRecord::Base.connection.schema_migration,\r\n      ActiveRecord::Base.connection.internal_metadata\r\n    ).migrate\r\n\r\n    assert_equal \"index_#{long_table_name}_on_title\", ActiveRecord::Base.connection.indexes(long_table_name).first.name\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe above test should pass.\r\n\r\nThis means that since the index name was renamed to `index_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_on_title` in Rails 7.0 and earlier, if `ActiveRecord::Migration[7.0]` or earlier is specified, the same name should be used even in Rails 7.1 or later.\r\n\r\n### Actual behavior\r\n\r\nThe above test fails with the following output:\r\n\r\n```\r\nF\r\n\r\nFailure:\r\nBugTest#test_index_name_after_rename_table_with_long_table_name [example.rb:53]:\r\n--- expected\r\n+++ actual\r\n@@ -1 +1 @@\r\n-\"index_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_on_title\"\r\n+\"idx_on_title_0b3d36c24b\"\r\n\r\n\r\n\r\nbin\/rails test example.rb:32\r\n\r\n\r\n\r\nFinished in 0.026827s, 37.2753 runs\/s, 37.2753 assertions\/s.\r\n1 runs, 1 assertions, 1 failures, 0 errors, 0 skips\r\n```\r\n\r\nAs a result, if db\/migrate contains `rename_table`, the index names created between Rails 7.0 and 7.1 may be different.\r\n\r\n### System configuration\r\n**Rails version**: 7.1.3\r\n\r\n**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]\r\n\r\n### Other information\r\n\r\nThis is due to the following change:\r\n\r\n- https:\/\/github.com\/rails\/rails\/pull\/47753\r\n\r\nI think a similar change to the following is needed for `#rename_table`:\r\n\r\n- https:\/\/github.com\/rails\/rails\/pull\/47863\r\n","comments":["Looking into it. Will open a PR soon."],"labels":["activerecord","attached PR","With reproduction steps"]},{"title":"Add support for `ActionMailer.*_delivery` callback `only` and `except` options","body":"### Steps to reproduce\r\n\r\nCurrently ActionMailer's `*_delivery` callbacks do not support `only` and `except` filters, which are quite useful because some callback actions are required for a subset of mailer methods. Technically, only\/except can be emulated via `if` option, but another problem is that's not clear from the documentation which options can be passed (currently `only` and `except` are simply ignored).\r\n\r\nI believe that many developers might except `ActionMailer` to behave just like `ActionController`,  so current API implementation might lead to unexpected bugs.\r\n\r\nNote that documentation on `before_action` (and similar callbacks) explicitly refer to possible options:\r\n\r\n> before_action(names, block)[Link](https:\/\/api.rubyonrails.org\/v7.1.3\/classes\/AbstractController\/Callbacks\/ClassMethods.html#method-i-before_action)\r\n> Append a callback before actions. See [_insert_callbacks](https:\/\/api.rubyonrails.org\/v7.1.3\/classes\/AbstractController\/Callbacks\/ClassMethods.html#method-i-_insert_callbacks) for parameter details.\r\n\r\n### Expected behavior\r\nAt least some explicit info on possible `*_delivery` callback options, or (which would be better) support for `only` and `except` options.\r\n\r\n### Actual behavior\r\nMentioned options are simply ignored, no documentation on possible options.\r\n\r\n### System configuration\r\n**Rails version**: 7.1.3\r\n\r\n**Ruby version**: 3.0.6\r\n","comments":["Delivery callbacks were added in https:\/\/github.com\/rails\/rails\/pull\/47630 (cc @bensheldon).\r\n\r\nThe feature request looks legitimate for me and I am willing to help by creating a PR. But, was there a reason to not add these options back then?","Those callback options being absent was unintentional. I think that makes sense for the `_delivery` callbacks to be consistent with `_action` callbacks. \r\n\r\nAlso, revisiting my implementation in light of this, I wonder if there is a better implementation for `_delivery` callbacks rather than including `ActiveSupport::Callbacks` and maybe they should have been created with something in `AbstractController` instead"],"labels":["actionmailer"]},{"title":"Fix query references for non-hash association where clause values","body":"### Detail\r\n\r\nThis PR fixes an issue where non-hash where-clause values for associations would not set `references_values`. This could (and often does) end up causing hard-to-debug SQL errors due to association name vs table name mismatch, e.g. querying on a singular association name while the actual join table is plural, or vice-versa due to a prior scope.\r\n\r\nMore detailed reproduction script:  https:\/\/gist.github.com\/ezekg\/5969735eb8c5092fb25198bd8fac4053\r\n\r\n#### Before\r\n\r\n```rb\r\nscope = Comment.where(post: { id: post })\r\nscope.references_values # => [\"post\"]\r\n\r\nscope = Comment.where(post: post)\r\nscope.references_values # => []\r\n```\r\n\r\nI'd expect these to be synonymous since [`#id` is called on `post`](https:\/\/github.com\/ezekg\/rails\/blob\/c37450b76b24cac7951032c4210db17a9c1b7f51\/activerecord\/lib\/active_record\/relation\/predicate_builder.rb#L58) for the second case.\r\n\r\n#### After\r\n\r\n```rb\r\nscope = Comment.where(post: { id: post })\r\nscope.references_values # => [\"post\"]\r\n\r\nscope = Comment.where(post: post)\r\nscope.references_values # => [\"post\"]\r\n```\r\n\r\nWith this patch, they're now more or less synonymous, both setting `references_values`.\r\n\r\nSince this is likely a breaking change (it broke a few tests in [keygen-sh\/keygen-api](https:\/\/github.com\/keygen-sh\/keygen-api) when testing against the patch), this may require some more thought. But it is worth noting that all broken tests were related to various workarounds for this particular bug.\r\n\r\nLet me know what you guys think is the best course of action here.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["I don't expect those to have the same `references_values`; my expectation would be that `post: { id: post }` will produce a query that needs the posts table joined, whereas `post: post` will not.\r\n\r\n> This could (and often does) end up causing hard-to-debug SQL errors\r\n\r\nCould you expand on that, within the context of the example?","@matthewd here's a reproduction script: https:\/\/gist.github.com\/ezekg\/5969735eb8c5092fb25198bd8fac4053. You can uncomment the Rails gem source at the top to see the fix.\r\n\r\nI think the issue is that Rails isn't keeping tabs on the fact that the association joins use the plural unaliased table name, while the association where clause uses a singular table alias.","@matthewd do you think this is the wrong approach to the problem?"],"labels":["activerecord"]},{"title":"Add examples for form helper tags [ci skip]","body":"### Detail\r\n\r\nThis Pull Request add examples for `FormTagHelper` methods.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["There are no examples for 3 similar methods near this one. We need to add to all of them or none of them? \ud83e\udd14 ","> There are no examples for 3 similar methods near this one. We need to add to all of them or none of them? \ud83e\udd14\r\n\r\nI'm creating a seperate PR for adding those.","I think you can add these in just the same.","> I think you can add these in just the same.\r\n\r\nUpdated the PR.","@p8 and @fatkodima Addressed all the review changes"],"labels":["actionview"]},{"title":"[docs] Add more examples to `#in_order_of` [ci-skip]","body":"### Motivation \/ Background\r\n\r\n`#in_order_of` is an excellent method and makes ordering enum columns easier, and many complex order case\/when queries can be refactored to use it.\r\n\r\nThis PR was created because I believe having more examples would help people understand this method a bit better.\r\n\r\nAlso, I think it's useful to document that this method will order results, but also FILTER them, excluding rows in which the column doesn't match any of the given values.\r\n\r\nSo I expanded the description and added these examples:\r\n- what happens when dealing with `enum` +columns+\r\n- what happens when passing `nil` as a +value+ for nullable columns\r\n\r\nHere's a gist with some tests: https:\/\/gist.github.com\/thdaraujo\/7d9aa5ffd1b61bf57604ded14535e357\r\n\r\nI'd be happy to add other examples for other usecases you think are relevant, just let me know!\r\n\r\n### Detail\r\n\r\nThis Pull Request expands the documentation for [in_order_of](https:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/QueryMethods.html#method-i-in_order_of)\r\n\r\n### Additional information\r\n\r\nn\/a\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* ~[ ] Tests are added or updated if you fix a bug or add a feature.~ not applicable\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Thanks for the review @p8 , I've updated the documentation, please take a look when you have some time.\r\nI created[ this gist](https:\/\/gist.github.com\/thdaraujo\/7d9aa5ffd1b61bf57604ded14535e357) with some example tests to double check the generated queries."],"labels":["activerecord"]},{"title":"Add methods to `ActiveRecord::Relation::FinderMethods` to determine if it contains exactly\/more than\/less than N records","body":"### Motivation \/ Background\r\n\r\nI've had to check in a few places if a relation had exactly or less than or more than N records. On top of that, if the collection contains a lot of records, counting on the entire collection not only is slower but also unnecessary and limiting the count the first N or N+1 records is sufficient and faster.\r\n\r\n### Detail\r\n\r\nAdds the following methods to `ActiveRecord::Relation::FinderMethods`:\r\n  * `exactly?` returns true if the relation contains exactly N records, false otherwise.\r\n  * `at_least?` returns true if the relation contains at least N records, false otherwise.\r\n  * `at_most?` returns true if the relation contains at most N records, false otherwise.\r\n  * `less_than?` returns true if the relation contains less than N records, false otherwise.\r\n  * `more_than?` returns true if the relation contains more than N records, false otherwise.\r\n\r\nThese methods perform a `limit(M).count` (where M = N or N + 1) under the hood.\r\n\r\n### Additional information\r\n\r\nI think the naming of these methods is fine as is. Don't know if others would prefer to prefix these with `has_` or `contains_`, ie `has_exactly?` or `contains_exactly?`.\r\n\r\nWith regards to performance of doing the count with and without the limit. Without the limit when there are 8M records I get:\r\n\r\n```sql\r\n  Referral Count (135.2ms)  SELECT COUNT(*) FROM \"referrals\" WHERE \"referrals\".\"company_id\" = $1  [[\"company_id\", \"29f1dfa2-01d0-4e5d-b482-7aa1f3ba7535\"]]\r\n=> 8467786\r\n```\r\n\r\nWith a limit of a 100:\r\n\r\n```sql\r\n  Referral Count (0.4ms)  SELECT COUNT(*) FROM (SELECT 1 AS one FROM \"referrals\" WHERE \"referrals\".\"company_id\" = $1 LIMIT $2) subquery_for_count  [[\"company_id\",\"29f1dfa2-01d0-4e5d-b482-7aa1f3ba7535\", [\"LIMIT\", 100]]\r\n=> 100\r\n```\r\n\r\nSo it's 300x faster even when doing an index only scan:\r\n\r\n```sql\r\nexplain SELECT COUNT(*) FROM \"referrals\" WHERE \"referrals\".\"company_id\" ='29f1dfa2-01d0-4e5d-b482-7aa1f3ba7535';\r\n\r\n                                                                          QUERY PLAN                                                                           \r\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n Finalize Aggregate  (cost=136744.58..136744.59 rows=1 width=8)\r\n   ->  Gather  (cost=136744.36..136744.57 rows=2 width=8)\r\n         Workers Planned: 2\r\n         ->  Partial Aggregate  (cost=135744.36..135744.37 rows=1 width=8)\r\n               ->  Parallel Index Only Scan using index_referrals_on_company_id_and_conversion_state on referrals  (cost=0.56..127008.31 rows=3494420 width=0)\r\n                     Index Cond: (company_id = '29f1dfa2-01d0-4e5d-b482-7aa1f3ba7535'::uuid)\r\n```\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Can you provide real world examples for each of the introduced methods?\r\n\r\nThese are the mostly used:\r\n\r\n1. For > 0 (`exists?` or `any?`)\r\n2. For > 1 (`many?`)\r\n3. For == 0 (`empty?`)\r\n4. For == N (`.count == N`)","@fatkodima here's a real-world use case for `#exactly?`\/`#count == N`: https:\/\/github.com\/keygen-sh\/keygen-api\/blob\/b69958d890692570d3c9fc0405686d06d95ba0ee\/app\/services\/license_validation_service.rb#L137\r\n\r\nI never thought of adding the limit there. It'd be useful for models with tens or hundreds of thousands of associations.\r\n\r\nI like the idea of this PR. Counting can be slow, especially in Postgres.","Yeah, forgot to mention I also had this issue with PG.\r\n\r\n@fatkodima don't think we need to compare each of these methods with count, as all of these are doing a `limit(N).count`. So we're really comparing `limit(N).count` with `count`.\r\n\r\nHere is an example loading 10M records and doing counts on a query that filters 1M of these records. I'm using sqlite for this, but as I said I was having this issue on PG.\r\n\r\n```ruby\r\nrequire \"active_record\"\r\nrequire \"benchmark\/ips\"\r\n\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :counts_examples, force: true do |t|\r\n    t.integer :number, index: true\r\n  end\r\nend\r\n\r\nclass CountsExample < ActiveRecord::Base; end\r\n\r\nBATCH_SIZE = 10_000\r\nTOTAL = 10_000_000\r\n\r\nputs \"Inserting #{TOTAL} records with number uniformly distributed between 1 and 10\"\r\n(TOTAL \/ BATCH_SIZE).times do\r\n  numbers = (1..10).to_a * (BATCH_SIZE \/ 10)\r\n  attributes = numbers.map { |number| { number: } }\r\n  CountsExample.insert_all(attributes)\r\nend\r\n\r\nscope = CountsExample.where(number: 1)\r\nlimit = 1\r\n\r\nwhile limit <= TOTAL \/ 10 do\r\n  Benchmark.ips do |x|\r\n    x.report(\"limit(#{limit}).count\") { scope.limit(limit).count }\r\n    x.report(\"count\") { scope.count }\r\n    x.compare!\r\n  end\r\n\r\n  limit *= 10\r\nend\r\n\r\ncount_sql = scope.limit(TOTAL \/ 10).select('count(*)').to_sql\r\n\r\nputs \"Comparing count with execute SQL '#{count_sql}'\"\r\nBenchmark.ips do |x|\r\n  x.report(\"count\") { scope.count }\r\n  x.report(\"execute SQL\") { ActiveRecord::Base.connection.exec_query(count_sql).entries }\r\n  x.compare!\r\nend\r\n```\r\n\r\n#### `limit(1).count` vs `count`\r\n```\r\nWarming up --------------------------------------\r\n      limit(1).count     1.160k i\/100ms\r\n               count     5.000 i\/100ms\r\nCalculating -------------------------------------\r\n      limit(1).count     11.602k (\u00b1 1.7%) i\/s -     59.160k in   5.100616s\r\n               count     54.597 (\u00b1 3.7%) i\/s -    275.000 in   5.041062s\r\n\r\nComparison:\r\n      limit(1).count:    11602.2 i\/s\r\n               count:       54.6 i\/s - 212.51x  slower\r\n```\r\n\r\n#### `limit(10).count` vs `count`\r\n```\r\nruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]\r\nWarming up --------------------------------------\r\n     limit(10).count     1.166k i\/100ms\r\n               count     5.000 i\/100ms\r\nCalculating -------------------------------------\r\n     limit(10).count     11.439k (\u00b1 1.1%) i\/s -     58.300k in   5.097076s\r\n               count     55.098 (\u00b1 1.8%) i\/s -    280.000 in   5.084119s\r\n\r\nComparison:\r\n     limit(10).count:    11439.2 i\/s\r\n               count:       55.1 i\/s - 207.62x  slower\r\n```\r\n\r\n#### `limit(100).count` vs `count`\r\n```\r\nruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]\r\nWarming up --------------------------------------\r\n    limit(100).count     1.130k i\/100ms\r\n               count     5.000 i\/100ms\r\nCalculating -------------------------------------\r\n    limit(100).count     11.254k (\u00b1 1.3%) i\/s -     56.500k in   5.021380s\r\n               count     55.022 (\u00b1 1.8%) i\/s -    275.000 in   5.000586s\r\n\r\nComparison:\r\n    limit(100).count:    11253.8 i\/s\r\n               count:       55.0 i\/s - 204.53x  slower\r\n```\r\n\r\n#### `limit(1000).count` vs `count`\r\n```\r\nruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]\r\nWarming up --------------------------------------\r\n   limit(1000).count   874.000 i\/100ms\r\n               count     5.000 i\/100ms\r\nCalculating -------------------------------------\r\n   limit(1000).count      8.698k (\u00b1 1.1%) i\/s -     43.700k in   5.025019s\r\n               count     55.106 (\u00b1 1.8%) i\/s -    280.000 in   5.085033s\r\n\r\nComparison:\r\n   limit(1000).count:     8697.5 i\/s\r\n               count:       55.1 i\/s - 157.83x  slower\r\n```\r\n\r\n#### `limit(10_000).count` vs `count`\r\n```\r\nruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]\r\nWarming up --------------------------------------\r\n  limit(10000).count   266.000 i\/100ms\r\n               count     5.000 i\/100ms\r\nCalculating -------------------------------------\r\n  limit(10000).count      2.677k (\u00b1 1.3%) i\/s -     13.566k in   5.069205s\r\n               count     52.349 (\u00b1 1.9%) i\/s -    265.000 in   5.064493s\r\n\r\nComparison:\r\n  limit(10000).count:     2676.6 i\/s\r\n               count:       52.3 i\/s - 51.13x  slower\r\n```\r\n\r\n#### `limit(100_000).count` vs `count`\r\n```\r\nruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]\r\nWarming up --------------------------------------\r\n limit(100000).count    34.000 i\/100ms\r\n               count     5.000 i\/100ms\r\nCalculating -------------------------------------\r\n limit(100000).count    350.795 (\u00b1 1.7%) i\/s -      1.768k in   5.041292s\r\n               count     53.460 (\u00b1 3.7%) i\/s -    270.000 in   5.055020s\r\n\r\nComparison:\r\n limit(100000).count:      350.8 i\/s\r\n               count:       53.5 i\/s - 6.56x  slower\r\n```\r\n\r\n#### `limit(1_000_000).count` vs `count`\r\n\r\nFor some reason doing  `limit(1_000_000).count` is actually slower than doing just the `count`, which is surprising.\r\n\r\n```\r\nruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]\r\nWarming up --------------------------------------\r\nlimit(1000000).count     3.000 i\/100ms\r\n               count     5.000 i\/100ms\r\nCalculating -------------------------------------\r\nlimit(1000000).count     34.011 (\u00b1 2.9%) i\/s -    171.000 in   5.031050s\r\n               count     52.696 (\u00b1 1.9%) i\/s -    265.000 in   5.030910s\r\n\r\nComparison:\r\n               count:       52.7 i\/s\r\nlimit(1000000).count:       34.0 i\/s - 1.55x  slower\r\n```\r\n\r\nI did an execute SQL with the query generated by  `limit(1_000_000).count` and it performs the same as just doing the `count` which is what I would expect. Maybe something is up with active record when doing `limit(N).count` where `N >= count`?\r\n\r\n```\r\nComparing count with execute SQL 'SELECT count(*) FROM \"counts_examples\" WHERE \"counts_examples\".\"number\" = 1 LIMIT 1000000'\r\nruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux]\r\nWarming up --------------------------------------\r\n               count     5.000 i\/100ms\r\n         execute SQL     5.000 i\/100ms\r\nCalculating -------------------------------------\r\n               count     54.345 (\u00b1 3.7%) i\/s -    275.000 in   5.065035s\r\n         execute SQL     56.509 (\u00b1 1.8%) i\/s -    285.000 in   5.045942s\r\n\r\nComparison:\r\n         execute SQL:       56.5 i\/s\r\n               count:       54.3 i\/s - same-ish: difference falls within error\r\n```\r\n\r\n","> Can you provide real world examples for each of the introduced methods?\r\n\r\nThere was for `.exact_count`. And for others? For counts except (0 and 1).","@fatkodima not sure what you're asking. As I explained above all these methods do a `limit(N).count` so they will all perform the same","> not sure what you're asking\r\n\r\nGive the examples of potential business usecases which will use these methods.","@fatkodima we certainly would use it at [Rewardful](https:\/\/rewardful.com), as an affiliate marketing platform there are certain analytics events that are triggered when certain thresholds are met. For instance, we trigger an event when the number of affiliates for a customer reaches 5 or when the number of affiliate referrals reaches 5 too. So we certainly would use `exactly?`, I've added the rest of the methods for completeness, but we don't have an immediate need for those.","> > not sure what you're asking\r\n> \r\n> Give the examples of potential business usecases which will use these methods.\r\n\r\nHere's some real-world use cases for `#at_least?`\/`#count >=`:\r\n\r\n- https:\/\/github.com\/keygen-sh\/keygen-api\/blob\/dc9caa5d9f9512415665184b71e1fcf52bdd1d65\/app\/models\/license.rb#L167\r\n- https:\/\/github.com\/keygen-sh\/keygen-api\/blob\/dc9caa5d9f9512415665184b71e1fcf52bdd1d65\/app\/models\/release.rb#L849\r\n- https:\/\/github.com\/keygen-sh\/keygen-api\/blob\/dc9caa5d9f9512415665184b71e1fcf52bdd1d65\/app\/models\/user.rb#L114\r\n- https:\/\/github.com\/keygen-sh\/keygen-api\/blob\/dc9caa5d9f9512415665184b71e1fcf52bdd1d65\/app\/models\/machine.rb#L177\r\n\r\nAnd here's some loose uses of `#at_most?`\/`#count <=`:\r\n\r\n- https:\/\/github.com\/search?q=repo%3Akeygen-sh%2Fkeygen-api+%22count+%3C%3D%22&type=code\r\n\r\nI say \"loose\" because those particular uses utilize a counter cache, but I could imagine not everybody will use counter caches.\r\n\r\nIn addition, we can do a search across all repos to see it is a common pattern when dealing with limits:\r\n\r\n- https:\/\/github.com\/search?q=%22.count+%3C%3D%22+OR+%22.count+%3E%3D%22+path%3Aapp%2F**%2F*.rb&type=code\r\n\r\nSome are even already doing `.limit(N).count >= N`.","@fatkodima thoughts?","I am \ud83d\udc4d for the feature, for `exactly?`\/`at_least?`\/`at_most?`. I do not think that `less_than?`\/`more_than?` are needed, because they can be emulated with `at_least?`\/`at_most?`. Not sure about the method names, but I do not have better in mind.\r\n\r\nIn any case, core people will make a final decision on this feature."],"labels":["activerecord"]},{"title":"docs: Update validation status based on autosave status","body":"This Pull Request has been created to enlighten users that validations are enabled by default when autosave is True for the  `has_one` and `belongs_to`.\r\n","comments":[],"labels":["activerecord"]},{"title":"Add format constraints for generated pwa routes","body":"### Motivation \/ Background\r\n\r\nAs a followup to #50528, which added default pwa manifest and service worker routes and files to the new app generator, I'd like to associate the new routes with the expected mime types.\r\n\r\n### Detail\r\n\r\nWe expect the `pwa#manifest` request to be limited to json, i.e. `manifest.json` and we expect the `pwa#service_worker` request to be limited to js, i.e. `service-worker.js`. This change adds format constraints to the generated routes.\r\n\r\n### Additional information\r\n\r\nI didn't see associated tests with the previous change but would be open to adding some if desired.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["railties"]},{"title":"Redundant JOIN produced when merging relations from STI classes","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\nMerging relations with joins to the same association by different classes in an STI tree results in duplicated, redundant JOINs in the emitted SQL.\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\"\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n    t.string :type\r\n  end\r\n\r\n  create_table :comments, force: true do |t|\r\n    t.integer :post_id\r\n    t.boolean :published\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  has_many :comments\r\n\r\n  scope :with_comments, -> { joins(:comments).where(comments: { published: true }) }\r\nend\r\n\r\nclass CustomPost < Post\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  belongs_to :post\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_merge_base_case\r\n    posts_with_comments1 = CustomPost.with_comments\r\n    posts_with_comments2 = CustomPost.with_comments\r\n\r\n    assert_equal [:comments], posts_with_comments1.joins_values\r\n    assert_equal [:comments], posts_with_comments2.joins_values\r\n\r\n    combined_scope = posts_with_comments1.merge(posts_with_comments2)\r\n\r\n    puts combined_scope.to_sql\r\n    assert_equal [:comments], combined_scope.joins_values\r\n  end\r\n\r\n  def test_merge_sti_case\r\n    posts_with_comments = Post.with_comments\r\n    custom_posts_with_comments = CustomPost.with_comments\r\n\r\n    assert_equal [:comments], posts_with_comments.joins_values\r\n    assert_equal [:comments], custom_posts_with_comments.joins_values\r\n\r\n    combined_scope = posts_with_comments.merge(custom_posts_with_comments)\r\n\r\n    puts combined_scope.to_sql\r\n    # FAILS! two joins are generated\r\n    assert_equal [:comments], combined_scope.joins_values\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n<!-- Tell us what should happen -->\r\nA query with a single join to the foreign table is produced\r\ne.g.\r\n```sql\r\nSELECT\r\n  \"posts\".*\r\nFROM\r\n  \"posts\"\r\n  INNER JOIN \"comments\" ON \"comments\".\"post_id\" = \"posts\".\"id\"\r\nWHERE\r\n  \"posts\".\"type\" = 'CustomPost'\r\n  AND \"comments\".\"published\" = 1\r\n```\r\n\r\n### Actual behavior\r\n<!-- Tell us what happens instead -->\r\nA query with two redundant joins to the foreign table is produced\r\n```sql\r\nSELECT\r\n  \"posts\".*\r\nFROM\r\n  \"posts\"\r\n  INNER JOIN \"comments\" ON \"comments\".\"post_id\" = \"posts\".\"id\"\r\n  INNER JOIN \"comments\" \"comments_posts\" ON \"comments_posts\".\"post_id\" = \"posts\".\"id\"\r\nWHERE\r\n  \"posts\".\"type\" = 'CustomPost'\r\n  AND \"comments\".\"published\" = 1\r\n```\r\nThis duplicated join is not referenced by the rest of the query in any way\r\n\r\n### System configuration\r\n**Rails version**: Rails 7.1.0\r\n\r\n**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]\r\n","comments":["Got this up: https:\/\/github.com\/rails\/rails\/pull\/50886"],"labels":["activerecord"]},{"title":"Add multiple databases AR bug template [ci skip]","body":"### Motivation \/ Background\r\n\r\nThis Pull Request has been created because there are a few PRs we'd like to open that relate to the multiple database code in Rails but there was no existing template for a multiple database setup. \ud83d\ude42 \r\n\r\n### Detail\r\n\r\nThis commit adds a new bug report template that's based off of the existing [Active Record bug report\r\ntemplate](https:\/\/github.com\/rails\/rails\/blob\/main\/guides\/bug_report_templates\/active_record.rb) but creates a multiple database setup.\r\n\r\nThe template creates an `UnshardedModel` abstract `ActiveRecord` model that connects to a single database (with a replica configured) and a `ShardedModel` abstract `ActiveRecord` model that has two shards configured, each with their own replica.\r\n\r\nEach sqlite3 in-memory database is separate because [opening multiple database connections each with the filename \":memory:\" will create independent in-memory databases](https:\/\/www.sqlite.org\/inmemorydb.html).\r\n\r\nNote, that while replica databases are configured, sqlite3 does not support database replication and therefore records written to the writer databases will not auto-populate on the replica\/reader databases. The replica configurations are included to allow for testing role switching, not for validating replication itself.\r\n\r\n### Additional information\r\n\r\nYou can test that the template works by running:\r\n\r\n `ruby guides\/bug_report_templates\/active_record_multiple_databases.rb` \r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["docs"]},{"title":"Undocumented - validations enabled by autosave","body":"Validations are enabled by default when autosave is true:\r\n\r\n    belongs_to :foo, autosave: true\r\n    has_one :foo, autosave: true\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/9c3ffab47c3bf59320ba08e9dafdb0275cf91a5a\/activerecord\/lib\/active_record\/reflection.rb#L653-L658\r\n\r\nHowever, this is not documented in `has_one` or `belongs_to`:\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/9c3ffab47c3bf59320ba08e9dafdb0275cf91a5a\/activerecord\/lib\/active_record\/associations.rb#L1660-L1669\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/9c3ffab47c3bf59320ba08e9dafdb0275cf91a5a\/activerecord\/lib\/active_record\/associations.rb#L1830-L1840","comments":[],"labels":["docs"]},{"title":"`app:update` from Rails 7.1.2 to 7.1.3 creates `new_framework_defaults_7_1.rb`","body":"### Steps to reproduce\r\nI made an update from Rails 7.1.2 to 7.1.3 by changing the rails version number to 7.1.3 in the gemfile and running `bundle update`. After that i ran `rails app:update` which produced the file `config\/initializers\/new_framework_defaults_7_1.rb`. I already have `config.load_defaults 7.1` in my `config\/application.rb`, so I think, this file shouldn't be generated?\r\n\r\n### Expected behavior\r\nThe file `config\/initializers\/new_framework_defaults_7_1.rb` should not be created, if `config.load_defaults 7.1` is already present in `config\/application.rb`.\r\n\r\n### Actual behavior\r\nThe file `config\/initializers\/new_framework_defaults_7_1.rb` is created after  `rails app:update`, despite `config.load_defaults 7.1` is already present in `config\/application.rb`.\r\n\r\n### System configuration\r\n**Rails version**: 7.1.3\r\n\r\n**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x64-mingw-ucrt]\r\n","comments":["I don't think `rails app:update` should be run when upgrading the tiny version `7.1.2` to `7.1.3`.\r\nIt just regenerates the config files for `7.1` which includes `new_framework_defaults_7_1.rb`, which don't change in tiny versions (but I might be mistaken).\r\nhttps:\/\/github.com\/rails\/rails\/blob\/4816684c857f7cdd7821f805c0cc024907754e2f\/railties\/lib\/rails\/tasks\/framework.rake#L5\r\n\r\nIt's seems to be mostly typo's, of course there could be a bug fix in here.\r\nhttps:\/\/github.com\/rails\/rails\/commits\/7-1-stable\/railties\/lib\/rails\/generators\/rails\/app\/templates\/config","I was following the update guide on https:\/\/guides.rubyonrails.org\/upgrading_ruby_on_rails.html, because i wanted to know, what is the right way to update rails. There was no difference made, which version i want to upgrade, when i was reading the section [1.4 The Update Task](https:\/\/guides.rubyonrails.org\/upgrading_ruby_on_rails.html#the-update-task)"],"labels":["railties"]},{"title":"Add note about `params` hash in Action Controller Overview [ci skip] ","body":"### Motivation \/ Background\r\n\r\nNewbies tend to misunderstand `params` hash is a plain old Hash. So I added a note that `params` hash is ActionController::Parameters.\r\n\r\n### Detail\r\n\r\nThis Pull Request changes \"4 Parameters\" in Action Controller Overview.\r\n\r\n![Screenshot 2024-01-18 at 10 31 55](https:\/\/github.com\/rails\/rails\/assets\/1148320\/de0dc860-35d1-4d3b-b209-ab4abbac5a17)\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n\r\n","comments":[],"labels":["docs"]},{"title":"Preserve `--asset-pipeline propshaft` when running `app:update`","body":"### Motivation \/ Background\r\n\r\nThis Pull Request has been created because `skip_sprockets?` wasn't being preserved when running `app:update` in a project using `propshaft`. Helpful when #50444 lands.\r\n\r\n### Detail\r\n\r\nThis Pull Request sets `options[:asset_pipeline]` in `AppUpdater` based on whether Sprockets\/Propshaft Railtie is defined.\r\n\r\nWithout this change, `app:update` will suggest injecting sprocket configuration in a propshaft project.","comments":[],"labels":["railties"]},{"title":"Tests can't run without yarn","body":"### Steps to reproduce\r\n\r\n1. Create a new rails app that uses yarn\r\n2. `docker build -t testimage:1 .`\r\n3. `docker run -it testimage:1 \/bin\/bash`\r\n4. `bin\/rails test`\r\n\r\n### Expected behavior\r\n\r\nAs the image already contains all precompiled assets I would expect the tests to be able to run successfully even without precompiling first.\r\n\r\n### Actual behavior\r\n\r\n`bin\/rails test` now always runs `test:prepare`, which tries to compile the assets and therefore crashes, because the default Dockerfile doesn't keep yarn in the image.\r\n\r\nI want an option to skip running `test:prepare` when running tests.\r\n\r\n### System configuration\r\n**Rails version**: 7.1.2\r\n\r\n**Ruby version**: 3.1.4","comments":["I don't think we should skip `test:prepare` since it can run more things, but I can see us not trying to compile assets if they are present like we used to do with sprockets.","BTW, I know the current dockerfile is supposed to be used to run tests, but I'm planning to change that. The Dockerfile used for CI will be the same one that will be used in development, and that will for sure include yarn. That is another way to solve this issue.","i ran into this today too after a Rails update where we have a docker setup where an image already has the precompiled assets (and no yarn executable). i learned though that `cssbundling-rails` allows you to bypass the build step with an ENV var:\r\n\r\nhttps:\/\/github.com\/rails\/cssbundling-rails\/blob\/main\/lib\/tasks\/cssbundling\/build.rake#L63"],"labels":["railties"]},{"title":"The `counter_cache_column?` method is depending of initialisation order.","body":"### Steps to reproduce\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :people, force: true do |t|\r\n    t.integer :cars_count, default: 0\r\n  end\r\n\r\n  create_table :cars, force: true do |t|\r\n    t.belongs_to :person\r\n  end\r\nend\r\n\r\nclass Car < ActiveRecord::Base\r\n  belongs_to :person, counter_cache: true\r\nend\r\n\r\n# If the `Person` class was defined before, the test below would work\r\nclass Person < ActiveRecord::Base\r\n  has_many :cars\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_counter_cache_column?\r\n    assert Person.counter_cache_column?(\"cars_count\")\r\n    assert_not Car.counter_cache_column?(\"cars_count\")\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\nthe `Person` class should identify clearly `cars_count` as a counter cache column\r\n\r\n### Actual behavior\r\n\r\nSince `Person` is initialized afterwards, when running `belong_to`, the `cars_count` column is not added to its counter_cache\r\n\r\n### System configuration\r\n**Rails version**: found in `7.1.2`, present in edge as well\r\n\r\n**Ruby version**: 3.2.1\r\n\r\n### Notes\r\n\r\nIn the actual ActiveRecord test suite, this test could fall if in the future a file requiring first `models\/car` is loaded before the `counter_cache_test` file.\r\n\r\nAlso I'd be so glad to work on the solution. It seems to me that the issue is that [this expression](https:\/\/github.com\/rails\/rails\/blob\/0656787be644d7d5550e82450153403853c73014\/activerecord\/lib\/active_record\/associations\/builder\/belongs_to.rb#L39C5-L39C5) can return `nil`. I'm just not sure how it should be solved (by raising, autoloading, warning, ...)\r\n","comments":["The inconsistency was introduced in 7b6720dfc8d1606c0b3ed7c92b735180dcfa7e9d, although I don't think the impact is very high at the moment (and is no worse than before the mentioned commit).\r\n\r\nIn that commit, `counter_cache_column?` was basically extracted from `attr_readonly` so that the `counter_cache` columns could continue to be updated by Rails but not by a user. So before the mentioned commit, I believe you would see the same behavior, but the inconsistency would be on whether the column was marked `attr_readonly`.\r\n\r\nI started looking into a fix, which I believe needs to come from the other side of the association. I've pushed up a wip branch here: https:\/\/github.com\/rails\/rails\/commit\/fa34f9a72ae00e928abbc3cde9ac28469afed1f7 however it appears the tests are failing due to my use of `inverse_of` raising. I haven't dug into why yet but wanted to dump my thoughts here in the meantime."],"labels":["activerecord"]},{"title":"Allow custom domain extractor class on ActionDispatch::Http::URL","body":"In these last years we have been using a monkey patch at our company that smartly detects domain and subdomains according to the [Public Suffix database](https:\/\/publicsuffix.org\/). There are a few gems in our ecosystems like [public_suffix](https:\/\/github.com\/weppos\/publicsuffix-ruby) and [mini_suffix](https:\/\/github.com\/discourse\/mini_suffix) that does exactly that. But Rails uses an older and primitive method that splits the domain tld using `config.action_dispatch.tld_length` option. This pull request changes that by allowing developers to specify a custom domain extractor class.\r\n\r\nThis is really useful for any SaaS company that offers custom domain and subdomains.","comments":["Related: https:\/\/github.com\/rails\/rails\/issues\/40200","@p8 Thanks for bringing this up.\r\n\r\n@rafaelfranca We need to address the domain resolution for cookies as well. Maybe a new option like `domain: :auto`?","Also wondering if this should be part of: https:\/\/github.com\/rails\/rails\/issues\/39566","> @rafaelfranca We need to address the domain resolution for cookies as well. Maybe a new option like `domain: :auto`?\r\n\r\nLet's keep this PR focused. That issue a different problem.\r\n\r\nIn fact, I don't believe it is an issue. It is a feature request. User expects Rails to automatically know where you want to store the cookie. I don't think Rails will ever do that.","@rafaelfranca Is it ready to merge? :D"],"labels":["actionpack"]},{"title":"Improve documentation of ActiveRecord::Core.configurations","body":"### Motivation \/ Background\r\n\r\nThe documenation of `ActiveRecord::Core.configurations=` [reads](https:\/\/edgeapi.rubyonrails.org\/classes\/ActiveRecord\/Core.html#method-c-configurations-3D) like the documentation for the getter instead of the setter.\r\nIt should not describe what is returned, but what arguments are expected.\r\n\r\nThis changes moves the documentation of the setter to the getter and adds a new comment to the setter.\r\n\r\nThis commit has 2 separate commits to make sure the diffs only apply to documentation and not the code.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Action Mailbox mistakes attachment as body if no body exists","body":"I have set up a mailbox to process DMARC reports. This has been working fine in most cases, but it seems that sometimes Google doesn't include body text in the email\u2014only a zipped XML file as an attachment.\r\n\r\nWhen this happens, Action Mailbox decodes the Base64 encoding of the attachment and assigns the string representation of the binary data to the body of the message without adding the file as an attachment. I have noticed that the email also isn't recognised as being multipart.\r\n\r\n### Steps to reproduce\r\n\r\nI've created [a gist which includes the unedited email source](https:\/\/gist.github.com\/HashNotAdam\/f5d08e370e70e9e39105fa765563c5b3) as copied from the EML file stored by Active Storage\r\n\r\n### Expected behavior\r\nThe body of the message should include the Base64 encoding of the attachment and there should be 1 attachment representing a ZIP file\r\n\r\n### Actual behavior\r\nCalling `body.to_s` on the underlying `Mail::Message` will return a string representation of the binary data which can be unzipped to return the XML. If the EML file were to be opened in an email client, this would be presented as an attachment\r\n\r\n### System configuration\r\n**Rails version**: 7.1.2\r\n\r\n**Ruby version**: 3.2.2","comments":["There is an open issue: https:\/\/github.com\/rails\/rails\/pull\/39364. Seems like Rails currently does not support SES. See supported providers here: https:\/\/guides.rubyonrails.org\/action_mailbox_basics.html. Here is the minimal test case to reproduce this problem:\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\"\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\/railtie\"\r\nrequire \"active_storage\/engine\"\r\nrequire \"action_mailbox\/engine\"\r\nrequire \"tmpdir\"\r\n\r\nclass TestApp < Rails::Application\r\n  config.load_defaults Rails::VERSION::STRING.to_f\r\n\r\n  config.root = __dir__\r\n  config.hosts << \"example.org\"\r\n  config.eager_load = false\r\n  config.session_store :cookie_store, key: \"cookie_store_key\"\r\n  config.secret_key_base = \"secret_key_base\"\r\n\r\n  config.logger = Logger.new($stdout)\r\n  Rails.logger  = config.logger\r\n\r\n  config.active_storage.service = :local\r\n  config.active_storage.service_configurations = {\r\n    local: {\r\n      root: Dir.tmpdir,\r\n      service: \"Disk\"\r\n    }\r\n  }\r\n\r\n  config.action_mailbox.ingress = :relay\r\nend\r\n\r\nENV[\"DATABASE_URL\"] = \"sqlite3::memory:\"\r\n\r\nRails.application.initialize!\r\n\r\nrequire ActiveStorage::Engine.root.join(\"db\/migrate\/20170806125915_create_active_storage_tables.rb\").to_s\r\nrequire ActionMailbox::Engine.root.join(\"db\/migrate\/20180917164000_create_action_mailbox_tables.rb\").to_s\r\n\r\nActiveRecord::Schema.define do\r\n  CreateActiveStorageTables.new.change\r\n  CreateActionMailboxTables.new.change\r\nend\r\n\r\nclass ApplicationMailbox < ActionMailbox::Base\r\n  routing (\/^report@\/i) => :dmarc_report\r\nend\r\n\r\nclass DmarcReportMailbox < ActionMailbox::Base\r\n  def process\r\n    $attachments = mail.attachments\r\n  end\r\nend\r\n\r\nrequire \"minitest\/autorun\"\r\n\r\nclass DmarcReportMailboxTest < ActionMailbox::TestCase\r\n   setup do\r\n    source = <<~SOURCE\r\n      From: noreply-dmarc-support@google.com \r\n      To: report@dmarc.eduadv.com.au\r\n\r\n      OTAzOTkueG1sUEsFBgAAAAABAAEAYAAAAFUCAAAAAA==\r\n    SOURCE\r\n\r\n    @inbound_email = receive_inbound_email_from_source(source)\r\n  end\r\n\r\n  test \"the email has an attachment\" do\r\n    assert_equal $attachments.size, 1\r\n  end\r\nend\r\n```","@bparanj I'm using [action_mailbox_amazon_ingress](https:\/\/github.com\/bobf\/action_mailbox_amazon_ingress) and I've tried the branch from that PR, neither handles this specific problem.\r\n\r\nGiven the raw email is handed off to Action Mailbox for processing, are you suggesting that SES structures emails in a way that is different from other providers? If so, do you happen to know of any examples of how this is handed by other providers? Given the SES\/SNS PR has been running for 4 years, I'd be interested in helping to get this fixed, but I can't say I know much about email standards"],"labels":["actionmailbox"]},{"title":"Allow named variants to evaluate dynamic transformation options","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nSometimes you want to build a transformation based on the user input, or information persisted in the database (i.e.: add a watermark to a picture, crop based on user input)\r\n\r\n### Detail\r\n\r\nThis PR allow the transformations to be built based on user input:\r\n\r\n```ruby\r\nclass User < ApplicationRecord\r\n  has_one_attached :photo do |attachable|\r\n    attachable.variant :default, crop: ->(user) { user.crop_positions }\r\n    attachable.variant :thumb, crop: :crop_positions,\r\n                               resize_to_limit: [100, 100]\r\n  end\r\n\r\n  def crop_positions\r\n    [crop_x1, crop_y1, crop_x2, crop_y2]\r\n  end\r\nend\r\n```\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n- [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n- [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n- [x] Tests are added or updated if you fix a bug or add a feature.\r\n- [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Thanks for the PR.\r\nI'm not sure this would work as expected.\r\nWhat happens if the crop values change?\r\nThe named variant would not to be updated as well right?","@p8 it would as soon as you request to get that variant\r\n\r\nThe variation key is calculated based on the final transformations: https:\/\/github.com\/rails\/rails\/blob\/v6.1.7.6\/activestorage\/app\/models\/active_storage\/variation.rb#L39\r\n\r\nThat means that once these values changed, a new variation would be generated.","Would it be possible to change the API to be more explicit and less magical?\r\nFor example yielding the model as well:\r\n```ruby\r\n  has_one_attached :photo do |attachable, user|\r\n    attachable.variant :default, crop: user.crop_positions\r\n    attachable.variant :thumb, crop: user.crop_positions,\r\n                               resize_to_limit: [100, 100]\r\n  end\r\n  ```","@p8 I believe the referred block is evaluated much before, that's why it has to be deferred to when the variation is needed. Why do you feel it is \"magical\"? Referring to instance methods as symbols is a common approach in rails for validations, callbacks, and even [within this same context for `preprocessed`](https:\/\/github.com\/rails\/rails\/pull\/47473\/files).\r\n\r\nThanks for your feedback!","Inferring the methods is less common I think, and mostly used for the first argument.\r\nFor most options (including validations, scopes and associations) we allow passing procs instead.\r\nI think `:preprocessed` gets [read as an option on transformations](https:\/\/github.com\/rails\/rails\/pull\/47473\/files#diff-cbfa03357fa2edd54d5c61a25b8b271ae99e13badf3bdf440264954ecfdd0c96R7):\r\n\r\nMaybe:\r\n```ruby\r\n  has_one_attached :photo do |attachable|\r\n    attachable.variant :default, crop: ->(user) { user.crop_positions },\r\n    attachable.variant :thumb, crop: -> { DEFAULT_CROP_POSITIONS },\r\n                               resize_to_limit: [100, 100]\r\n  end\r\n  ```\r\n  \r\n  For some procs we also allow skipping passing the model argument.\r\n  ```ruby\r\n      attachable.variant :default, crop: -> { crop_positions },\r\n```","> Inferring the methods is less common I think.\r\n\r\nI'm not sure if I'm following. What do you mean by inferring? In this case, I just extracted the same method a `preprocessed` option would go through, and reused for the options.\r\n\r\n> I think :preprocessed gets [read as an option on transformations](https:\/\/github.com\/rails\/rails\/pull\/47473\/files#diff-cbfa03357fa2edd54d5c61a25b8b271ae99e13badf3bdf440264954ecfdd0c96R7):\r\n\r\nI think I'm really missing something here, LOL. \r\n\r\n---\r\n\r\n> ```ruby\r\n>    has_one_attached :photo do |attachable|\r\n>     attachable.variant :default, crop: ->(user) { user.crop_positions },\r\n>     attachable.variant :thumb, crop: -> { DEFAULT_CROP_POSITIONS },\r\n>                                resize_to_limit: [100, 100]\r\n>   end\r\n> ```\r\n\r\nThis option is also available, I'll add this to the documentation.","Ah, I see we still support both the following for validations.\r\nI thought we were deprecating the first one, but maybe I'm wrong.\r\n```ruby\r\nvalidate :must_have_account, if: :allow_validation # allow_validation is a method\r\nvalidate :must_have_account, if: Proc.new { |user| user.signup_step > 2 })\r\n```\r\n\r\n> I'm not sure if I'm following. What do you mean by inferring? In this case, I just extracted the same method a preprocessed option would go through, and reused for the options.\r\n\r\nPassing a method name (`:crop_positions`) as an option and calling that method.\r\n\r\n> I think I'm really missing something here, LOL.\r\nSorry maybe I wasn't clear \ud83d\ude04 \r\n\r\nThe `preprocessed` method isn't defined on the model but on the the attachment.\r\nAnd you don't need to define it yourself.\r\nWe should be able to rename the method without having to rename the option.\r\n\r\n> This option is also available, I'll add this to the documentation.\r\n\ud83d\udc4d ","@p8 I'm still unsure about the problem.\r\n\r\n`preprocessed` allows you to set a method name within the record, as in [this example](https:\/\/github.com\/rails\/rails\/pull\/47473\/files#diff-ab7586f0c5183049d93c6d62d45e693842d98518a5f94a493fdfcf8e6e8ae87eR180) where it points to `should_preprocessed?`.","@p8 I noticed that there is no sufficient documentation for the named variants. Neither on `ActiveStorage::Attached::Model`, `ActiveStorage::NamedVariant`, or on `ActiveStorage::Reflection::HasAttachedReflection`. I'll leave any more documentation to another PR, but added a section to the rails guides."],"labels":["docs","activestorage"]},{"title":"docs: Update FormHelper comments to use `form_with` instead of `form_for` [ci skip]","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request has been created because comments in `ActionView::Helpers::FormHelper` refer to the deprecated `form_for` instead of the recommended `form_with`. This could potentially cause confusion for developers consulting the Rails API documentation, such as [Action View Form Builder page](https:\/\/api.rubyonrails.org\/classes\/ActionView\/Helpers\/FormBuilder.html).\r\n\r\n### Detail\r\n\r\nThis Pull Request changes  the comments in `ActionView::Helpers::FormHelper`, replacing instances of `form_for` with `form_with`.\r\n\r\n### Additional information\r\n\r\nThe Rails guide has already documented the usage of `form_with` on the [form_helpers page](https:\/\/guides.rubyonrails.org\/form_helpers.html).\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["actionview"]},{"title":"docs: Adjust composite primary keys documentation [skip ci]","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request has been created because the documentation for composite primary keys wasn't correct. \r\n\r\n### Detail\r\n\r\nWhile working on `shoulda-matchers` I noticed that the documentation is not correct. We actually need to declare the `query_constraints` option in the `has_many` association using the same attribute name as the ones in the associated object.\r\n\r\n```ruby\r\nclass Author < ApplicationRecord\r\n  self.primary_key = [:first_name, :last_name]\r\n  # This was incorrect as `first_name` and `last_name` don't exist on the `Book` model.\r\n  has_many :books, query_constraints: [:first_name, :last_name] \r\n  \r\n  # Correct way\r\n  has_many :books, query_constraints: [:author_first_name, :author_last_name]\r\nend\r\n\r\nclass Book < ApplicationRecord\r\n  belongs_to :author, query_constraints: [:author_first_name, :author_last_name]\r\nend\r\n```\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["docs"]},{"title":"Document passing hash as id option on create_table","body":"### Motivation \/ Background\r\n\r\nThe `id` keyword argument passed to [create_table](https:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/ConnectionAdapters\/SchemaStatements.html#method-i-create_table) method allow to receive a hash with options for column creation but it's not documented.","comments":[],"labels":["activerecord"]},{"title":"Action View Tests: Use `#with_routing` helper","body":"### Motivation \/ Background\r\n\r\nFollow-up to [#49819][]\r\n\r\n### Detail\r\n\r\nSince [#49819][] resolves an issue with\r\n`ActionDispatch::IntegrationTest#with_routing` helper support, Action View's `test\/abstract_unit.rb` file can rely on routing being reset within the block argument.\r\n\r\nThis means that the `RoutedRackApp` class and `.build_app` method is can be made unnecessary.\r\n\r\n[#49819]: https:\/\/github.com\/rails\/rails\/pull\/49819\r\n","comments":[],"labels":["railties","actionview"]},{"title":"Downcase the model name in the system scaffolds","body":"### Motivation \/ Background\r\n\r\nI noticed there is an inconsistency in the system test scaffold where the model name is sometimes capitalised. This fixes the two instances where the model name is humanised.\r\n\r\n```rb\r\ntest \"should create user\"\r\ntest \"should update User\"\r\ntest \"should destroy User\"\r\n```\r\n\r\nConsidering all the other scaffolds use lowercase text I think it's right these two are downcased in the same way.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Does this actually change anything to what we're trying to test here? It seems like just a [cosmetic change](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#write-your-code) which we don't accept.","Sure it's a cosmetic change, but it's not change for the sake of change. When you generate a standard scaffold, the system test created is inconsistent within itself, and not consistent with all the other tests generated which are downcased. I think it's fair to suggest that the code generated within a scaffold should be internally consistent.","Ok, actually I thought it's better to remove downcase and then I found #43473.\r\n\r\nI would investigate _why_ that one test needs to be downcased and if there is a way to make these tests seem less brittle. Personally, try to avoid tests which depend on the text of a button or element because those things change and would have no impact on this test otherwise.","This isn't changing the content of the test itself. It will have no impact on the test passing.\r\n\r\nIt is *changing the text description of the test itself*.","Sure, but does it make sense that we shouldn't need to downcase in the first place?","I think we should be downcasing;\r\n\r\n* the controller tests generated by a scaffold are all\r\n* it seems conventional that test names are downcased\r\n\r\nEither way - in a scaffolded system test 1 test uses a capitalized model name and 2 tests use a downcased model name. They should either all be capitalized or all downcased and the latter seems preferable.","Yeah it seems #41210 went pretty hard into downcasing the model names but still missing some spots. I'd like to get another opinion, maybe @seanpdoyle has thoughts here?"],"labels":["railties"]},{"title":"Expand documentation for ActiveRecord::Core #dup and #clone","body":"Splits the examples for `#clone` into separate sections for easier scanability.\r\n\r\nAdds examples to `#dup` to clarify the difference with `#clone`.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["@brendanh-katalyst I've added you as co-author.\r\n```\r\nCo-Authored-By: Brendan Hart\r\n```\r\n\r\nDo you want an email attached to that commit message comment?\r\n```\r\nCo-Authored-By: Brendan Hart <brendan@example.com>\r\n```","@p8 Oh yeah, it's brendan.hart@katalyst.com.au.\r\n\r\nThank you! (this was my first Rails contribution \ud83d\ude04  )"],"labels":["activerecord"]},{"title":"Update `ActionDispatch::Routing::Mapper:Scoping#constraints` documentation","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\nThe previous recommendation to place constraints in `lib\/constraints` did not work in practice on a default Rails install, as it will raise the following:\r\n\r\n```\r\nuninitialized constant Iphone (NameError)\r\n```\r\n\r\nInstead, recommend placing constraints in `app\/constraints` such that they will be eager loaded.\r\n\r\n### Additional information\r\n\r\nAlternatively, we could update the documentation to elaborate that `lib\/constraints` would need to be explicitly eager loaded.\r\n\r\n```ruby\r\nconfig.eager_load_paths << Rails.root.join(\"lib\/constraints\")\r\n```\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["actionpack"]},{"title":"Backport: Define missing attribute methods from `method_missing`","body":"Ref: https:\/\/github.com\/rails\/rails\/pull\/50594\r\n\r\nOpening a PR because the backport is non-trivial, so I want CI coverage. Also @ghiculescu pointed a possible issue in https:\/\/github.com\/rails\/rails\/commit\/d429bfb3b6fd2794f0d859b68e5dee24578d405f so I'd like to get to the bottom of that before merging the backport.\r\n\r\ncc @rafaelfranca ","comments":["Make sure to double check this scenario before merging: https:\/\/github.com\/rails\/rails\/pull\/50594#issuecomment-1968545000"],"labels":["activerecord"]},{"title":"Add warning for non-existent directories in autoload paths for Zeitwerk","body":"### Motivation \/ Background\r\n\r\nThis Pull Request has been created because I noticed that Rails does not warn the user when they specify a non-existing directory in the `config.autoload_paths` or `config.autoload_once_paths` settings. This can lead to confusion and hard-to-debug errors when the user expects some files to be loaded but they are not.\r\n\r\n### Detail\r\n\r\nThis Pull Request add a warning message when specified paths for `config.autoload_paths` and `config.autoload_once_paths` are not existing directories.\r\nBelow is the example message:\r\n\r\n```\r\nconfig.autoload_paths must be existing directories.\r\n'\/wrong\/path\/to\/load' is not an existing directory.\r\n```\r\n\r\n### Additional information\r\n\r\nSince this PR does not change the behavior itself, I believe existing tests cover this PR.\r\n\r\nThe warning message has been inspired by the following code.\r\nhttps:\/\/github.com\/rails\/rails\/blob\/91968e5a185927b8216b82c860a48b6367285456\/railties\/lib\/rails\/application\/bootstrap.rb#L23-L30\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["I am \ud83d\udc4d on this warning. Indeed, for Zeitwerk, a non-existing directory on setup is an error condition.\r\n\r\nHowever, IIRC the reason Rails is not as strict or emits warnings is that Action Mailer adds `test\/mailers\/previews` unconditionally to the autoload paths. It would not be coherent that a Rails component triggers a Rails warning.\r\n\r\nWhat about changing Action Mailer before going for this?"],"labels":["railties"]},{"title":"db:schema:load:<name> purges test database","body":"Commit [adb64db43d](https:\/\/github.com\/rails\/rails\/commit\/adb64db43dba5cad1007ce57e25df67f8b3e91f8#diff-4a42b5efdab725af0936f94b4a84dcf6a8be8738e28ed265e0a3e74f275f5048R491) changed task `db:schema:load:<name>` to invoke `db:test:purge:<name>`.\r\n\r\nBecause of that Rails 7.1 breaks my workflow for initializing a local environment:\r\n\r\n- create database with `db:create`\r\n- run custom SQL to create Postgres extensions, schemas and triggers\r\n- load schema with `db:schema:load:<name>`\r\n\r\nStrangely, `db:schema:load` keeps the old behavior, and I could not find the explanation for the change in the commit message or in related Github issues.\r\n\r\nAlso, it _requires_ a test database to be configured in `database.yml`; otherwise the task fails:\r\n\r\n```\r\n$ RAILS_ENV=development bin\/rails db:schema:load:primary\r\nbin\/rails aborted!\r\nTypeError: Invalid type for configuration. Expected Symbol, String, or Hash. Got nil (TypeError)\r\n\r\n        raise TypeError, \"Invalid type for configuration. Expected Symbol, String, or Hash. Got #{config.inspect}\"\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\r\nTasks: TOP => db:schema:load:primary => db:test:purge:primary\r\n(See full trace by running task with --trace)\r\n```\r\n\r\nCan someone confirm the change was intentional?\r\n\r\n**Steps to reproduce the failure**\r\n\r\n- `$ rails new rails_bug`\r\n- `$ cd rails_bug`\r\n- use the following `database.yml`:\r\n\r\n```\r\ndevelopment:\r\n  one:\r\n    adapter: sqlite3\r\n    database: storage\/development.sqlite3\r\n  two:\r\n    adapter: sqlite3\r\n    database: storage\/development_two.sqlite3\r\n    migrations_paths: db\/migrate_two\r\n```\r\n- `$ bin\/rails db:migrate:one`\r\n- `$ bin\/rails db:schema:load:one`\r\n\r\n**Expected behavior**\r\n\r\nNo error.\r\n\r\n**Actual behavior**\r\n\r\nTypeError invoking database task.\r\n\r\n**System configuration**\r\n\r\nRails 7.1.2\r\nRuby 3.2.2\r\n","comments":["I reproduced the problem.\r\n\r\n```\r\n$ bin\/rails db:schema:load:one --trace\r\n** Invoke db:schema:load:one (first_time)\r\n** Invoke db:test:purge:one (first_time)\r\n** Invoke db:load_config (first_time)\r\n** Invoke environment (first_time)\r\n** Execute environment\r\n** Execute db:load_config\r\n** Invoke db:check_protected_environments (first_time)\r\n** Invoke db:load_config \r\n** Execute db:check_protected_environments\r\n** Execute db:test:purge:one\r\nbin\/rails aborted!\r\nTypeError: Invalid type for configuration. Expected Symbol, String, or Hash. Got nil (TypeError)\r\n\r\n        raise TypeError, \"Invalid type for configuration. Expected Symbol, String, or Hash. Got #{config.inspect}\"\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/activerecord-7.1.2\/lib\/active_record\/database_configurations.rb:183:in `resolve'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/activerecord-7.1.2\/lib\/active_record\/connection_adapters\/abstract\/connection_handler.rb:324:in `resolve_pool_config'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/activerecord-7.1.2\/lib\/active_record\/connection_adapters\/abstract\/connection_handler.rb:134:in `establish_connection'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/activerecord-7.1.2\/lib\/active_record\/tasks\/database_tasks.rb:516:in `with_temporary_pool'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/activerecord-7.1.2\/lib\/active_record\/tasks\/database_tasks.rb:500:in `with_temporary_connection'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/activerecord-7.1.2\/lib\/active_record\/tasks\/database_tasks.rb:491:in `with_temporary_connection_for_each'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/activerecord-7.1.2\/lib\/active_record\/railties\/databases.rake:588:in `block (5 levels) in <main>'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/task.rb:281:in `block in execute'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/task.rb:281:in `each'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/task.rb:281:in `execute'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/task.rb:219:in `block in invoke_with_call_chain'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/task.rb:199:in `synchronize'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/task.rb:199:in `invoke_with_call_chain'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/task.rb:243:in `block in invoke_prerequisites'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/task.rb:241:in `each'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/task.rb:241:in `invoke_prerequisites'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/task.rb:218:in `block in invoke_with_call_chain'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/task.rb:199:in `synchronize'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/task.rb:199:in `invoke_with_call_chain'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/task.rb:188:in `invoke'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/application.rb:182:in `invoke_task'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/application.rb:138:in `block (2 levels) in top_level'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/application.rb:138:in `each'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/application.rb:138:in `block in top_level'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/application.rb:147:in `run_with_threads'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/application.rb:132:in `top_level'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/railties-7.1.2\/lib\/rails\/commands\/rake\/rake_command.rb:27:in `block (2 levels) in perform'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/application.rb:208:in `standard_exception_handling'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/railties-7.1.2\/lib\/rails\/commands\/rake\/rake_command.rb:27:in `block in perform'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/railties-7.1.2\/lib\/rails\/commands\/rake\/rake_command.rb:44:in `block in with_rake'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/rake-13.1.0\/lib\/rake\/rake_module.rb:59:in `with_application'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/railties-7.1.2\/lib\/rails\/commands\/rake\/rake_command.rb:41:in `with_rake'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/railties-7.1.2\/lib\/rails\/commands\/rake\/rake_command.rb:20:in `perform'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/railties-7.1.2\/lib\/rails\/command.rb:156:in `invoke_rake'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/railties-7.1.2\/lib\/rails\/command.rb:73:in `block in invoke'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/railties-7.1.2\/lib\/rails\/command.rb:149:in `with_argv'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/railties-7.1.2\/lib\/rails\/command.rb:69:in `invoke'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/railties-7.1.2\/lib\/rails\/commands.rb:18:in `<main>'\r\n<internal:\/Users\/bparanj\/.rvm\/rubies\/ruby-3.2.2\/lib\/ruby\/site_ruby\/3.2.0\/rubygems\/core_ext\/kernel_require.rb>:37:in `require'\r\n<internal:\/Users\/bparanj\/.rvm\/rubies\/ruby-3.2.2\/lib\/ruby\/site_ruby\/3.2.0\/rubygems\/core_ext\/kernel_require.rb>:37:in `require'\r\n\/Users\/bparanj\/.rvm\/gems\/ruby-3.2.2@50672\/gems\/bootsnap-1.17.0\/lib\/bootsnap\/load_path_cache\/core_ext\/kernel_require.rb:32:in `require'\r\nbin\/rails:4:in `<main>'\r\nTasks: TOP => db:schema:load:one => db:test:purge:one\r\n```","I've been digging into and it seems `db:test:purge:#{name}` expects a config entry for test databases otherwise it will fail. The task `db:schema:load:#{name}` depends on it and will fail too if that config is missing.\r\n\r\nI kind of understand the dependency between `db:schema:load:#{name}` and `db:test:purge:#{name}` tasks, but it seems that`db:schema:load` should be updated to depend on `db:test:purge` too, so everything stays consistent.\r\n\r\nI prepared this patch that should fix the issue but I'm not so sure if it's a definitive solution. I'm happy to open a PR if this is ok.\r\n\r\n```diff\r\ndiff --git a\/activerecord\/lib\/active_record\/railties\/databases.rake b\/activerecord\/lib\/active_record\/railties\/databases.rake\r\nindex 08c45c8fba..1a5a1a1694 100644\r\n--- a\/activerecord\/lib\/active_record\/railties\/databases.rake\r\n+++ b\/activerecord\/lib\/active_record\/railties\/databases.rake\r\n@@ -472,7 +472,7 @@ db_namespace = namespace :db do\r\n     end\r\n \r\n     desc \"Load a database schema file (either db\/schema.rb or db\/structure.sql, depending on `ENV['SCHEMA_FORMAT']` or `config.active_record.schema_format`) into the database\"\r\n-    task load: [:load_config, :check_protected_environments] do\r\n+    task load: [\"db:test:purge\"] do\r\n       ActiveRecord::Tasks::DatabaseTasks.load_schema_current(ActiveRecord.schema_format, ENV[\"SCHEMA\"])\r\n     end\r\n \r\n@@ -587,7 +587,7 @@ db_namespace = namespace :db do\r\n         task name => %w(load_config check_protected_environments) do\r\n           ActiveRecord::Tasks::DatabaseTasks.with_temporary_connection_for_each(env: \"test\", name: name) do |conn|\r\n             db_config = conn.pool.db_config\r\n-            ActiveRecord::Tasks::DatabaseTasks.purge(db_config)\r\n+            ActiveRecord::Tasks::DatabaseTasks.purge(db_config) if db_config\r\n           end\r\n         end\r\n       end\r\ndiff --git a\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb b\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb\r\nindex 0683e5862f..b72da4d401 100644\r\n--- a\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb\r\n+++ b\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb\r\n@@ -488,6 +488,7 @@ def clear_schema_cache(filename)\r\n       def with_temporary_connection_for_each(env: ActiveRecord::Tasks::DatabaseTasks.env, name: nil, clobber: false, &block) # :nodoc:\r\n         if name\r\n           db_config = ActiveRecord::Base.configurations.configs_for(env_name: env, name: name)\r\n+          return unless db_config\r\n           with_temporary_connection(db_config, clobber: clobber, &block)\r\n         else\r\n           ActiveRecord::Base.configurations.configs_for(env_name: env, name: name).each do |db_config|\r\n```\r\n\r\nAfter this change the sequence of tasks for both cases is the following:\r\n\r\n```\r\n$ bin\/rails db:schema:load --trace\r\n** Invoke db:schema:load (first_time)\r\n** Invoke db:test:purge (first_time)\r\n** Invoke db:load_config (first_time)\r\n** Invoke environment (first_time)\r\n** Execute environment\r\n** Execute db:load_config\r\n** Invoke db:check_protected_environments (first_time)\r\n** Invoke db:load_config\r\n** Execute db:check_protected_environments\r\n** Execute db:test:purge\r\n** Execute db:schema:load\r\n```\r\n\r\n```\r\n$ bin\/rails db:schema:load:one --trace\r\n** Invoke db:schema:load:one (first_time)\r\n** Invoke db:test:purge:one (first_time)\r\n** Invoke db:load_config (first_time)\r\n** Invoke environment (first_time)\r\n** Execute environment\r\n** Execute db:load_config\r\n** Invoke db:check_protected_environments (first_time)\r\n** Invoke db:load_config\r\n** Execute db:check_protected_environments\r\n** Execute db:test:purge:one\r\n** Execute db:schema:load:one\r\n```"],"labels":["activerecord","With reproduction steps"]},{"title":"Rails 7.1 Create model with has_many with lambda incorrect default","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\nIn Rails 7.1, when I create new model with lambda in `has_many` association without passing value to the parameter, it puts serialized value of array that passed in `where` in a lambda.\r\nRails 7.0 just put `nil` in this case.\r\n\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n```ruby\r\n\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", \"7.1.2\"\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n  end\r\n\r\n  create_table :users, force: true do |t|\r\n  end\r\n\r\n  create_table :post_accesses, force: true do |t|\r\n    t.string :access_type\r\n    t.references :post\r\n    t.references :user\r\n  end\r\nend\r\n\r\nclass PostAccess < ActiveRecord::Base\r\n  ROLES = %w[viewer editor owner]\r\n  STAFF_ROLES = %w[editor owner]\r\n\r\n  belongs_to :user\r\n  belongs_to :post\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  has_many :post_accesses\r\n  has_many :staff_post_accesses,\r\n           -> { where(access_type: PostAccess::STAFF_ROLES) },\r\n           class_name: 'PostAccess'\r\n\r\n  has_many :staff_users, through: :staff_post_accesses, class_name: 'User', source: :user\r\nend\r\n\r\nclass User < ActiveRecord::Base\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_association_stuff\r\n    user = User.create!\r\n    post = Post.create!(staff_users: [user])\r\n\r\n    assert_equal nil, post.post_accesses.first.access_type\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n<!-- Tell us what should happen -->\r\nIt should put `nil`, or one of the possible value\r\n\r\n### Actual behavior\r\n<!-- Tell us what happens instead -->\r\nIt put serialized array:\r\n'[\"editor\", \"owner\"]'\r\n\r\n### System configuration\r\n**Rails version**: 7.1.2\r\n\r\n**Ruby version**: 3.2.2\r\n","comments":["This started to fail after https:\/\/github.com\/rails\/rails\/pull\/47485 (cc @nvasilevski)","This is an interesting one!\r\n\r\n>Rails 7.0 just put nil in this case.\r\n\r\nSo I think that putting `nil` and actually creating a `staff_post_accesses` record with an empty `access_type` was incorrect. In a bit more simplified setup like:\r\n```ruby\r\n  has_many :staff_post_accesses, -> { where(access_type: 'owner') }, class_name: 'PostAccess'\r\n```\r\n\r\nRails application would expect `staff_post_accesses` join records to be created with `access_type` populated as `owner` so I don't think we can revert the PR as a fix. However this is trickier when the querying parameter is an Array as it leads to what we see here.\r\nI'm also curious, @nikita-railsware, would you mind elaborating how your application eventually sets the `access_type` column on the record since I assume technically an empty `access_type` value is invalid and you would want at least some value is required.  \r\n\r\nI haven't tried it just yet but as a fix we could consider excluding attributes where value is an Array from creation here\r\nhttps:\/\/github.com\/Shopify\/rails\/blob\/2801ea64c36852a1e07c9fcfa3785d56007d6052\/activerecord\/lib\/active_record\/associations\/has_many_through_association.rb#L78\r\n\r\nThough it feels a little hacky so what I'm leaning towards is actually changing the application a little bit. I think this may actually improve the handling and help setting the `access_type` properly:\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", \"7.1.2\"\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n  end\r\n\r\n  create_table :users, force: true do |t|\r\n  end\r\n\r\n  create_table :post_accesses, force: true do |t|\r\n    t.string :access_type\r\n    t.references :post\r\n    t.references :user\r\n  end\r\nend\r\n\r\nclass PostAccess < ActiveRecord::Base\r\n  ROLES = %w[viewer editor owner]\r\n  STAFF_ROLES = %w[editor owner]\r\n\r\n  belongs_to :user\r\n  belongs_to :post\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  has_many :post_accesses\r\n  # this is purely for querying\r\n  has_many :staff_post_accesses,\r\n           -> { where(access_type: PostAccess::STAFF_ROLES) },\r\n           class_name: 'PostAccess'\r\n\r\n  # this is purely for querying\r\n  has_many :staff_users, through: :staff_post_accesses, class_name: 'User', source: :user\r\n\r\n  # used to create staff users with the `editor` access type, can be used for querying\r\n  has_many :editor_staff_post_accesses, -> { where(access_type: 'editor') }, class_name: 'PostAccess'\r\n  has_many :editor_staff_users, through: :editor_staff_post_accesses, class_name: 'User', source: :user\r\n\r\n\r\n  # used to create staff users with the `owner` access type, can be used for querying\r\n  has_many :owner_staff_post_accesses, -> { where(access_type: 'owner') }, class_name: 'PostAccess'\r\n  has_many :owner_staff_users, through: :owner_staff_post_accesses, class_name: 'User', source: :user\r\n  \r\nend\r\n\r\nclass User < ActiveRecord::Base\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_association_stuff\r\n    user = User.create!\r\n    post1 = Post.create!(editor_staff_users: [user])\r\n    post2 = Post.create!(owner_staff_users: [user])\r\n\r\n    assert_equal 'editor', post1.post_accesses.first.access_type\r\n    assert_equal 'owner', post2.post_accesses.first.access_type\r\n  end\r\nend\r\n```\r\n\r\nI think that would be a nicer approach even though it's a little bit verbose and it heavily relies on the fact that eventually we do want the `access_type` to be populated somehow. \r\nBut I think the same principle can be applied even if we don't want `access_type` to be populated. We could also define a separate association purely for creation purposes which won't have custom lambda.\r\n\r\nBasically the conventional association:\r\n```ruby\r\n  has_many :post_accesses\r\n  has_many :users, through: :post_accesses\r\n```\r\n\r\nAnd I think this is also a reasonable solution since technically it's a bit misleading to use `staff_users: [user]` association to create a user which won't have any indication of being a staff member (having `access_type` as `nil`)\r\n","Agree with @nvasilevski's assessment. This looks like it was possibly incorrect behaviour in prior versions of Rails. The alternative would be to create an association for each entry of the array, which could lead to unexpected behaviour. Using explicit associations as per the proposed solution makes it clearer what the associations are intended to do, and that the actual behaviour should be considered the expected behaviour.","Consider refactoring by creating distinct associations for each role \u2013 something like `editor_staff_post_accesses `and `owner_staff_post_accesses`. \r\nEach of these would have its own lambda clearly defining a singular role. This method trades a bit of verbosity for precision, effectively eliminating any potential confusion about how `access_type `gets determined. \r\nIt\u2019s like labeling your food in a shared fridge \u2013 clear, straightforward, and avoids any unwanted surprises."],"labels":["activerecord","With reproduction steps"]},{"title":"Experiment | [Fix #47809] `load_async` support for collection associations","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nMostly an experiment to fix #47809 while trying to avoid a large refactor which [might be the ideal solution](https:\/\/github.com\/rails\/rails\/issues\/47809#issuecomment-1489832287). This only tackles collection associations.\r\n\r\n### Detail\r\n\r\nTODO\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\nTODO\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Make `group`\/`regroup` inside `merge` be applied to the merged relation","body":"### Motivation \/ Background\r\n\r\nWhen using `group` inside `merge`, the `group` is applied to the outermost relation instead of the merged relation, which is unexpected. The same is true for `regroup`.\r\n\r\n### Detail\r\n\r\nNow, `group` inside `merge` is applied to the merged relation, as intended. The behavior was changed for `regroup` as well, and documented.\r\n\r\nBefore:\r\n\r\n```rb\r\nProduct.joins(:items).group(:id).merge(Item.group(:title))\r\n# SELECT \"products\".* FROM \"products\"\r\n# INNER JOIN \"items\" ON \"items\".\"product_id\" = \"products\".\"id\"\r\n# GROUP BY \"products\".\"id\", \"products\".\"title\"\r\n\r\nProduct.joins(:items).group(:id).merge(Item.group(:title).regroup(:id))\r\n# SELECT \"products\".* FROM \"products\"\r\n# INNER JOIN \"items\" ON \"items\".\"product_id\" = \"products\".\"id\"\r\n# GROUP BY \"products\".\"id\"\r\n\r\nProduct.joins(:items).group(:id).merge(Item.group(:title).regroup(:id)).regroup(:title)\r\n# SELECT \"products\".* FROM \"products\"\r\n# INNER JOIN \"items\" ON \"items\".\"product_id\" = \"products\".\"id\"\r\n# GROUP BY \"products\".\"title\"\r\n```\r\n\r\nAfter:\r\n```rb\r\nProduct.joins(:items).group(:id).merge(Item.group(:title))\r\n# SELECT \"products\".* FROM \"products\"\r\n# INNER JOIN \"items\" ON \"items\".\"product_id\" = \"products\".\"id\"\r\n# GROUP BY \"products\".\"id\", \"items\".\"title\"\r\n\r\nProduct.joins(:items).group(:id).merge(Item.group(:title).regroup(:id))\r\n# SELECT \"products\".* FROM \"products\"\r\n# INNER JOIN \"items\" ON \"items\".\"product_id\" = \"products\".\"id\"\r\n# GROUP BY \"products\".\"id\", \"items\".\"id\"\r\n\r\nProduct.joins(:items).group(:id).merge(Item.group(:title).regroup(:id)).regroup(:title)\r\n# SELECT \"products\".* FROM \"products\"\r\n# INNER JOIN \"items\" ON \"items\".\"product_id\" = \"products\".\"id\"\r\n# GROUP BY \"products\".\"title\"\r\n```\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Pass render options and block to calls to `#render_in`","body":"### Motivation \/ Background\r\n\r\nCloses [#45432][]\r\n\r\nSupport for objects that respond to `#render_in` was introduced in [#36388][] and [#37919][]. Those implementations assume that the instance will all the context it needs to render itself. That assumption doesn't account for call-site arguments like `locals: { ... }` or a block.\r\n\r\n### Detail\r\n\r\nThis commit expands support for rendering with a `:renderable` option to incorporate locals and blocks. For example:\r\n\r\n```ruby\r\nclass Greeting\r\n  def render_in(view_context, **options, &block)\r\n    if block\r\n      view_context.render html: block.call\r\n    else\r\n      view_context.render inline: <<~ERB.strip, **options\r\n        Hello, <%= name %>\r\n      ERB\r\n    end\r\n  end\r\nend\r\n\r\nrender(Greeting.new)                    # => \"Hello, World\"\r\nrender(Greeting.new, name: \"Local\")     # => \"Hello, Local\"\r\nrender(Greeting.new) { \"Hello, Block\" } # => \"Hello, Block\"\r\n```\r\n\r\nSince existing tools depend on the `#render_in(view_context)` signature\r\nwithout options, this commit deprecates that signature in favor of one\r\nthat accepts options and a block.\r\n\r\n[#45432]: https:\/\/github.com\/rails\/rails\/pull\/45432\r\n[#36388]: https:\/\/github.com\/rails\/rails\/pull\/36388\r\n[#37919]: https:\/\/github.com\/rails\/rails\/pull\/37919\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["The support for blocks was somewhat incidental here. My main goal was to support passing `:locals` provided at the call sites.\r\n\r\n@joelhawksley (and @BlakeWilliams, since you've authored https:\/\/github.com\/rails\/rails\/pull\/45432) does this change support behavior that's desirable to ViewComponents?","Thanks for adding block support! I lost that one in my TODO's a while back since I've been pretty busy lately.\r\n\r\nI'm not positive the locals changes as-is would help us much since we expect all data to be passed in to components via the constructor, but also with the new API it's no longer clear to me when to pass something as a local vs constructor argument. e.g.\r\n\r\n```ruby\r\nrender(Greeting.new(name: \"Fox Mulder\"), name: \"Dana Scully\"))\r\n```\r\n\r\nI think the API changes make that valid code, but it's not obvious to me which argument would take precedence or how Greeting should respond to locals from a ViewComponent perspective (we use `render_in` as a hook into ActionView, but otherwise components are largely just Ruby including the constructor). I don't think this would be limited to ViewComponents, but all classes that implement `render_in` would have to reconcile constructor args with locals and provide guidance on when to use each.\r\n\r\nComing at this with a relatively heavy ViewComponent bias, I could see an API that delegates to the constructor making sense, maybe like:\r\n\r\n```ruby\r\nrender(Greeting.new(name: \"local\"))\r\nrender(Greeting, name: \"local\") # Equivalent to the above since Greeting has a `render_in` instance_method. `name:` is passed to the constructor\r\n```\r\n\r\nAll of that has a heavy ViewComponent bias of course, but I'm curious if you had any particular use-cases for the locals changes in mind, ViewComponent or otherwise?","> All of that has a heavy ViewComponent bias of course\r\n\r\nI can relate to that! Since ViewComponent was the pilot tool for driving out `render_in`, that makes a lot of sense. In my understanding of where ViewComponent fits in, its constructor state **is** its render context. That's also reasonable, since it's aiming to serve as a View Model. In my mind, ViewComponent has an opportunity to take a stance on requiring constructor-time state and rejecting render-time locals.\r\n\r\n> I could see an API that delegates to the constructor making sense\r\n\r\nWith access to the options, that'd be possible as a class-method:\r\n\r\n```ruby\r\nclass ViewComponent::Base\r\n  def self.render_in(view_context, locals: {}, **options, &block)\r\n    view_context.render renderable: new(locals, &block), **options \r\n  end\r\n\r\n  def render_in(view_context, **, &)\r\n    # render without :locals or &block\r\n  end\r\nend\r\n\r\nclass Greeting < ViewComponent::Base\r\n  # ...\r\nend\r\n\r\nrender Greeting, name: \"local\" do \r\n  \"from a block\"\r\nend\r\n\r\n# the abbreviated form above is equivalent to the long-form below\r\nrender renderable: Greeting, locals: { name: \"local\" } do \r\n  \"from a block\"\r\nend\r\n```\r\n\r\nSince `render_in` is meant to be flexible enough to hand-off all rendering responsibilities to the object, it has an opportunity to make as much information available at render-time. ViewComponent made the design decision to exclude the [local_assigns](https:\/\/edgeapi.rubyonrails.org\/classes\/ActionView\/Template.html#method-i-local_assigns) in favor of `attr_{accessor,reader}`, and instance variables. I don't think imposing that design decision on other integrators is necessary. A separate integrator might envision a View Model as a different balance between View and Model. Instead of accepting `:name` as a `:locals` value, it might expect that to be available from the object whereas a `:size` or `:variant` might be expected as a `:locals` value.\r\n\r\n> I'm curious if you had any particular use-cases for the locals changes in mind, ViewComponent or otherwise?\r\n\r\nAt the moment, the main motivating use case is internal to Rails. I'm in the process of exploring an Action Text branch that adds support for editors other than Trix.\r\n\r\nIncidentally, one part of the code I'm exploring re-structuring involves the [ActionText::ContentHelper](https:\/\/github.com\/rails\/rails\/blob\/b294a25a8a59abef00a72700607b53bac901f83d\/actiontext\/app\/helpers\/action_text\/content_helper.rb) helper module, namely the `render_action_text_attachment` method:\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/b294a25a8a59abef00a72700607b53bac901f83d\/actiontext\/app\/helpers\/action_text\/content_helper.rb#L43-L55\r\n\r\nIt's a `:nodoc:` method, and is only called within the module itself:\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/b294a25a8a59abef00a72700607b53bac901f83d\/actiontext\/app\/helpers\/action_text\/content_helper.rb#L30\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/b294a25a8a59abef00a72700607b53bac901f83d\/actiontext\/app\/helpers\/action_text\/content_helper.rb#L36\r\n\r\nThe implementation is fairly concerned with checking whether or not the `attachment` responds to various methods, all for the sake of building up the correct `Hash` or options to pass to `render`. One extra layer on top of that is that between the two call sites, the only difference is the `:in_gallery` local variable (`true` in one place, `false` in the other).\r\n\r\nI'm imagining a world where each editor adapter (ckeditor5, tinymce, etc) have an opportunity to subclass `ActionText::Attachment` and want to override the default behavior. They wouldn't be able (or advised to) reach into the module-private `:nodoc:` method. However, if `render_in` accepted options, they'd be available to the subclasses at call time.\r\n\r\n```ruby\r\nclass ActionText::Attachment\r\n  def to_attachable_partial_path\r\n    # to be overridden\r\n    to_partial_path\r\n  end\r\n\r\n  def render_in(view_context, **options)\r\n    view_context.render options.with_defaults(\r\n      partial: to_attachable_partial_path,\r\n      object: self,\r\n      as: model_name.element\r\n    )\r\n  end\r\nend\r\n```\r\n\r\nThat's a circumstance where the constructor arguments to the object and the values passed into the `:locals` wouldn't be similar enough to cause confusion. In this use case, it's more about the context with which they're rendered. The `ActionText::Attachment` objects are constructed in far-flung parts of Action Text very separate from the HTML rendering `render_in` calls. It would also provide the framework with an opportunity to maintain the consistency in the construction of the `ActionText::Attachment` instances while providing integrators with flexibility at render-time.\r\n\r\nOutside of that use case, I'm imagining other scenarios where an application might want to build renderable objects (maybe even ViewComponents) prior to their render. I don't have a concrete example handy, but I'm imagining a component that yields itself into another component without knowledge of how the receiving component would want to treat it.","@BlakeWilliams if this change is accepted, I'm also exploring adding a default `#render_in` implementation to the `ActiveModel::Conversion` module:\r\n\r\nhttps:\/\/github.com\/seanpdoyle\/rails\/compare\/action-view-render-in-options...seanpdoyle:rails:active-model-conversion-render-in#diff-8ec888bfb07b8d4a67ffa913e3286d4ffcb052d1bf3b232d2874c7177cd96fbc\r\n\r\nThe idea there would be that any Active Model or Active Record instance would provide a seam for applications to take over control of rendering (for example, mapping a `Person` to a `PersonComponent` class).","> I can relate to that! Since ViewComponent was the pilot tool for driving out `render_in`, that makes a lot of sense. In my understanding of where ViewComponent fits in, its constructor state **is** its render context. That's also reasonable, since it's aiming to serve as a View Model. In my mind, ViewComponent has an opportunity to take a stance on requiring constructor-time state and rejecting render-time locals.\r\n\r\nI wouldn't want us to take that stance since that creates a pretty awkward API for consumers since there's two supported paths but only one is correct. I chatted with the rest of the ViewComponent team and I think we're in agreement that this API change is fine, _but_ it will require us to make changes in ViewComponent to properly support it (which I'm somewhat excited about).\r\n\r\nIf this change is approved we'll need to update the library to support both paths:\r\n\r\n```ruby\r\nrender(MyComponent, name: \"Fox Mulder\")\r\nrender(MyComponent.new(name: \"Fox Mulder\"))\r\n```\r\n\r\nI'm excited because the first example above could be used to enable component authors to omit an `initializer`, which is something I've been wanting to see for a while but couldn't quite fit it in the existing API in a reasonable way. The second example would likely take that stance of dropping locals if we continue supporting it (which we likely will but I'm tempted to propose we don't).\r\n\r\nSo tl;dr is that this change seems fine (if not good) from a ViewComponent perspective. \ud83d\udc4d "],"labels":["actionpack","railties","docs","actionview"]},{"title":"Don't fail for uploads with content-type parameters in the ActiveStorage::DiskController","body":"Fixes #50600 by parsing the string content-type before comparing it to the `Mime::Type`. This comparison will ignore the parameters.\r\n\r\n@alexandergitter I added you as co-author for the reproduction test case.","comments":[],"labels":["actionpack","activestorage"]},{"title":"allow dom_id method to accept an array of records_or_classes","body":"# Context\r\n\r\nSee also: https:\/\/github.com\/hotwired\/turbo-rails\/pull\/476\r\n\r\n[hotwired\/turbo-rails\/pull\/476](https:\/\/github.com\/hotwired\/turbo-rails\/pull\/476) removed the ability to pass multiple ids\/models to the `turbo_frame_tag` helper method. In that PR it was suggested by @skipkayhil that this ability be passed down to the `dom_id` method (which is a part of rails core) method rather than the `turbo_frame_tag` helper (which is a part of turbo-rails).\r\n\r\nref: https:\/\/discuss.rubyonrails.org\/t\/allow-dom-id-method-to-accept-multiple-ids-models\/84408\r\n\r\n# Changes\r\n\r\nIf the first argument of the `dom_id` is an array, this change will loop through each value and form a singular dom ID, then join the parts together. This change will allow turbo frame tags to accept multiple models (similar to the `cache` helper from ActionView).\r\n\r\n```\r\n<%= turbo_frame_tag [customer, field] do %>\r\n  <!-- code -->\r\n<% end %>\r\n```\r\n\r\n***\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.","comments":["Related: https:\/\/github.com\/rails\/rails\/pull\/44081"],"labels":["actionview"]},{"title":"ActiveStorage::DiskController fails for uploads when Content-Type \/ media type contains a parameter","body":"`ActiveStorage::DiskController#update` returns a 422 error when the submitted content contains a parameter in its Content-Type \/ media type, for example `audio\/ogg; codecs=opus`.\r\n\r\nThis issue appears to have been introduced in https:\/\/github.com\/rails\/rails\/commit\/5fb4703471ffb11dab9aa3855daeef9f592f6388\r\n\r\n### Steps to reproduce\r\nHere's a test case that fails in `ActiveStorage::DiskControllerTest`:\r\n\r\n```ruby\r\ntest \"directly uploading blob with content type parameters\" do\r\n  data = \"Something else entirely!\"\r\n  blob = create_blob_before_direct_upload(\r\n    byte_size: data.size, checksum: OpenSSL::Digest::MD5.base64digest(data), content_type: \"audio\/ogg; codecs=opus\")\r\n\r\n  put blob.service_url_for_direct_upload, params: data, headers: { \"Content-Type\" => \"audio\/ogg; codecs=opus\" }\r\n  assert_response :no_content\r\n  assert_equal data, blob.download\r\nend\r\n```\r\n\r\n(The test passes when the `; codecs=opus` part is omitted.)\r\n\r\n### Expected behavior\r\nThe upload succeeds, since the content type from the uploaded content matches the content type in the direct upload token.\r\n\r\n### Actual behavior\r\nThe request fails with 422 Unprocessable Content.\r\n\r\n### System configuration\r\n**Rails version**: 7.2.0.alpha (1702b6cbfd)\r\n\r\n**Ruby version**: 3.2.2","comments":["Here is the test case. I cannot reproduce this issue.\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire 'bundler\/inline'\r\n\r\ngemfile(true) do\r\n  source 'https:\/\/rubygems.org'\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem 'rails'\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem 'sqlite3'\r\nend\r\n\r\nrequire 'active_record\/railtie'\r\nrequire 'active_storage\/engine'\r\nrequire 'tmpdir'\r\n\r\nclass TestApp < Rails::Application\r\n  config.load_defaults Rails::VERSION::STRING.to_f\r\n\r\n  config.root = __dir__\r\n  config.hosts << 'example.org'\r\n  config.eager_load = false\r\n  config.session_store :cookie_store, key: 'cookie_store_key'\r\n  config.secret_key_base = 'secret_key_base'\r\n  \r\n\r\n  config.logger = Logger.new($stdout)\r\n  Rails.logger = config.logger\r\n\r\n  config.active_storage.service = :local\r\n  config.active_storage.service_configurations = {\r\n    local: {\r\n      root: Dir.tmpdir,\r\n      service: 'Disk'\r\n    }\r\n  }\r\nend\r\n\r\nTestApp.routes.draw do\r\n  default_url_options :host => \"example.com\"\r\nend\r\n\r\nENV['DATABASE_URL'] = 'sqlite3::memory:'\r\n\r\nRails.application.initialize!\r\n\r\nrequire ActiveStorage::Engine.root.join('db\/migrate\/20170806125915_create_active_storage_tables.rb').to_s\r\n\r\nActiveRecord::Schema.define do\r\n  CreateActiveStorageTables.new.change\r\n\r\n  create_table :users, force: true\r\nend\r\n\r\nrequire 'minitest\/autorun'\r\n\r\nclass BugTest < Minitest::Test\r\n  def create_blob_before_direct_upload(filename: 'hello.txt', byte_size: 0, checksum: 'abc',\r\n                                       content_type: 'text\/plain')\r\n    ActiveStorage::Blob.create_before_direct_upload! filename:, byte_size:,\r\n                                                     checksum:, content_type:\r\n  end\r\n\r\n  def test_directly_uploading_blob_with_content_type_parameters\r\n    upload_data = 'Something else entirely!'\r\n    blob = create_blob_before_direct_upload(\r\n      byte_size: upload_data.size, checksum: OpenSSL::Digest::MD5.base64digest(upload_data), content_type: 'audio\/ogg; codecs=opus'\r\n    )\r\n    # Upload a file to the blob\r\n    blob.upload(StringIO.new(upload_data))\r\n\r\n    download_data = blob.download\r\n\r\n    assert_equal upload_data, download_data\r\n  end\r\nend\r\n```\r\n\r\n\r\nRails 7.1.2\r\nruby 3.3.0 (2023-12-25 revision 5124f9ac75) [x86_64-linux]","@bparanj I believe your test case does not test `ActiveStorage::DiskController#update`, which is where this issue happens. You are calling `ActiveStorage::Blob#upload`.","Please provide a test case to reproduce your problem.","He already did. See the description. You only need to put the test in the file he pointed at.","Here is the modified test case:\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\"\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  # gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\/railtie\"\r\nrequire \"active_storage\/engine\"\r\nrequire \"tmpdir\"\r\n\r\nclass TestApp < Rails::Application\r\n  config.load_defaults Rails::VERSION::STRING.to_f\r\n\r\n  config.root = __dir__\r\n  config.hosts << \"example.org\"\r\n  config.eager_load = false\r\n  config.session_store :cookie_store, key: \"cookie_store_key\"\r\n  config.secret_key_base = \"secret_key_base\"\r\n\r\n  config.logger = Logger.new($stdout)\r\n  Rails.logger = config.logger\r\n\r\n  config.active_storage.service = :local\r\n  config.active_storage.service_configurations = {\r\n    local: {\r\n      root: Dir.tmpdir,\r\n      service: \"Disk\"\r\n    }\r\n  }\r\n\r\n  routes.draw do\r\n    direct :main_app do\r\n      ActiveStorage::Engine.routes.url_helpers.rails_blob_path(params[:id], only_path: true)\r\n    end\r\n  end\r\nend\r\n\r\n\r\nENV[\"DATABASE_URL\"] = \"sqlite3::memory:\"\r\n\r\nRails.application.initialize!\r\n\r\nrequire ActiveStorage::Engine.root.join(\"db\/migrate\/20170806125915_create_active_storage_tables.rb\").to_s\r\n\r\nActiveRecord::Schema.define do\r\n  CreateActiveStorageTables.new.change\r\n\r\n  create_table :users, force: true\r\nend\r\n\r\nclass User < ActiveRecord::Base\r\n  has_one_attached :profile\r\nend\r\n\r\nrequire \"minitest\/autorun\"\r\n\r\nclass DiskControllerTest < Minitest::Test\r\n\r\n  def test_directly_uploading_blob_with_different_but_equivalent_content_type\r\n    data = \"Something else entirely!\"\r\n    user = User.create!\r\n    user.profile.attach(\r\n      io: StringIO.new(data), \r\n      filename: 'test.txt', \r\n      content_type: 'application\/x-gzip'\r\n    )\r\n\r\n    put rails_blob_url(user.profile.blob), params: data, headers: { \"Content-Type\" => \"application\/x-gzip\" }\r\n    assert_response :no_content\r\n    assert_equal data, user.profile.download\r\n  end\r\n\r\n  private\r\n\r\n  def put(url, params: {}, headers: {})\r\n    session = Rack::Test::Session.new(Rails.application)\r\n    session.put(url, params, headers)\r\n    @last_response = session.last_response\r\n  end\r\n\r\n  def last_response\r\n    @last_response\r\n  end\r\n\r\n  def assert_response(type)\r\n    response = last_response\r\n    assert response.send(\"#{type}?\"), \"Expected response to be #{type}, but was #{response.status}\"\r\n  end\r\n\r\n  def rails_blob_url(blob, disposition: :attachment)\r\n    Rails.application.routes.default_url_options[:host] = 'localhost'\r\n    Rails.application.routes.url_helpers.rails_blob_url(blob, disposition: disposition)\r\n  end\r\nend\r\n```\r\n\r\nI am getting 404:\r\n\r\n```\r\nStarted PUT \"\/rails\/active_storage\/blobs\/redirect\/eyJfcmFpbHMiOnsiZGF0YSI6MSwicHVyIjoiYmxvYl9pZCJ9fQ==--64d48bc30ced51a7b2646d0aadd1ed6493c25a84\/test.txt?disposition=attachment\" for 127.0.0.1 at 2024-01-05 16:54:20 +0000\r\nE, [2024-01-05T16:54:20.293214 #7059] ERROR -- :   \r\nActionController::RoutingError (No route matches [PUT] \"\/rails\/active_storage\/blobs\/redirect\/eyJfcmFpbHMiOnsiZGF0YSI6MSwicHVyIjoiYmxvYl9pZCJ9fQ==--64d48bc30ced51a7b2646d0aadd1ed6493c25a84\/test.txt\"):\r\n  \r\ntest\/cases\/50600.rb:87:in `put'\r\ntest\/cases\/50600.rb:78:in `test_directly_uploading_blob_with_different_but_equivalent_content_type'\r\nF\r\n\r\nFailure:\r\nDiskControllerTest#test_directly_uploading_blob_with_different_but_equivalent_content_type [test\/cases\/50600.rb:79]:\r\nExpected response to be no_content, but was 404\r\n\r\nbin\/rails test test\/cases\/50600.rb:69\r\n\r\nFinished in 0.221612s, 4.5124 runs\/s, 4.5124 assertions\/s.\r\n1 runs, 1 assertions, 1 failures, 0 errors, 0 skips\r\n```","Apply this diff in your local copy of Rails and you will get the error he is reporting\r\n\r\n```diff\r\ndiff --git a\/activestorage\/test\/controllers\/disk_controller_test.rb b\/activestorage\/test\/controllers\/disk_controller_test.rb\r\nindex 4c5b24aa28..38e1d5e615 100644\r\n--- a\/activestorage\/test\/controllers\/disk_controller_test.rb\r\n+++ b\/activestorage\/test\/controllers\/disk_controller_test.rb\r\n@@ -122,4 +122,14 @@ class ActiveStorage::DiskControllerTest < ActionDispatch::IntegrationTest\r\n       params: \"Something else entirely!\", headers: { \"Content-Type\" => \"text\/plain\" }\r\n     assert_response :not_found\r\n   end\r\n+\r\n+  test \"directly uploading blob with content type parameters\" do\r\n+    data = \"Something else entirely!\"\r\n+    blob = create_blob_before_direct_upload(\r\n+      byte_size: data.size, checksum: OpenSSL::Digest::MD5.base64digest(data), content_type: \"audio\/ogg; codecs=opus\")\r\n+\r\n+    put blob.service_url_for_direct_upload, params: data, headers: { \"Content-Type\" => \"audio\/ogg; codecs=opus\" }\r\n+    assert_response :no_content\r\n+    assert_equal data, blob.download\r\n+  end\r\n end\r\n```\r\n\r\nThere is no need to try to reproduce in a script if it can be reproduced in the own Rails test suite."],"labels":["attached PR","With reproduction steps","activestorage"]},{"title":"Document `upsert`\/`upsert_all` `on_duplicate: :skip` option","body":"### Detail\r\n\r\nI've stumbled on this when writing an `upsert` call that must produce a `ON CONFLICT () DO NOTHING` fragment.\r\n\r\nUsing `update_only: []` didn't worked as it does update all columns on the table, but reading `InsertAll` I noticed the use of `:skip` internally that worked for this scenario, but it isn't mentioned on the public docs.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Active Storage Variant causing Aws::S3::Errors::NoSuchKey error when deleting an attachment","body":"I am not sure if this is a bug or something is not configured correctly. \r\n\r\n### Steps to reproduce\r\n\r\nUsing Active Storage with a S3-compatible object storage from digital ocean or scaleway configured along the rails guide for active storage.\r\n\r\nActive Storage configuration\r\n\r\n```\r\ndigitalocean:\r\n  service: S3\r\n  access_key_id: <%= ENV.fetch(\"DIGITALOCEAN_S3_ACCESS_KEY_ID\") %>\r\n  secret_access_key: <%= ENV.fetch(\"DIGITALOCEAN_S3_ACCESS_KEY_SECRET\") %>\r\n  bucket: <%= ENV.fetch(\"DIGITALOCEAN_S3_BUCKET_NAME\") %>\r\n  endpoint: <%= ENV.fetch(\"DIGITALOCEAN_S3_ENDPOINT\") %>\r\n```\r\n\r\nenabled with \r\n\r\n```\r\n# config\/environments\/development.rb\r\nconfig.active_storage.service = :digitalocean\r\n```\r\n\r\nhaving a User model with \r\n\r\n```ruby\r\nhas_one_attached :avatar do |attachable|\r\n  attachable.variant(:thumb, resize_to_fill: [350, 350])\r\nend\r\n```\r\n\r\nAfter uploading a file from the edit form the variant gets created when accessing the show view. \r\n\r\nLogs look like this\r\n\r\n```\r\nActiveStorage::VariantRecord Create (1.8ms)  INSERT INTO \"active_storage_variant_records\" (\"blob_id\", \"variation_digest\") VALUES ($1, $2) RETURNING \"id\"  [[\"blob_id\", 116], [\"variation_digest\", \"cAfAf5iAxm52Ff0Mw7wXY2F9d4A=\"]]\r\nActiveStorage::Blob Load (1.2ms)  SELECT \"active_storage_blobs\".* FROM \"active_storage_blobs\" INNER JOIN \"active_storage_attachments\" ON \"active_storage_blobs\".\"id\" = \"active_storage_attachments\".\"blob_id\" WHERE \"active_storage_attachments\".\"record_id\" = $1 AND \"active_storage_attachments\".\"record_type\" = $2 AND \"active_storage_attachments\".\"name\" = $3 LIMIT $4  [[\"record_id\", 51], [\"record_type\", \"ActiveStorage::VariantRecord\"], [\"name\", \"image\"], [\"LIMIT\", 1]]\r\nActiveStorage::Attachment Load (0.2ms)  SELECT \"active_storage_attachments\".* FROM \"active_storage_attachments\" WHERE \"active_storage_attachments\".\"record_id\" = $1 AND \"active_storage_attachments\".\"record_type\" = $2 AND \"active_storage_attachments\".\"name\" = $3 LIMIT $4  [[\"record_id\", 51], [\"record_type\", \"ActiveStorage::VariantRecord\"], [\"name\", \"image\"], [\"LIMIT\", 1]]\r\nActiveStorage::Blob Create (0.3ms)  INSERT INTO \"active_storage_blobs\" (\"key\", \"filename\", \"content_type\", \"metadata\", \"service_name\", \"byte_size\", \"checksum\", \"created_at\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING \"id\"  [[\"key\", \"1dousqzwcx79wlpkfn0o0f1sjfci\"], [\"filename\", \"sigma-16mm.jpg\"], [\"content_type\", \"image\/jpeg\"], [\"metadata\", \"{\\\"identified\\\":true}\"], [\"service_name\", \"digitalocean\"], [\"byte_size\", 52716], [\"checksum\", \"d9vmvbLEGDR2ZLzl7XNgUg==\"], [\"created_at\", \"2024-01-04 17:49:27.381653\"]]\r\nActiveStorage::Attachment Create (0.4ms)  INSERT INTO \"active_storage_attachments\" (\"name\", \"record_type\", \"record_id\", \"blob_id\", \"created_at\") VALUES ($1, $2, $3, $4, $5) RETURNING \"id\"  [[\"name\", \"image\"], [\"record_type\", \"ActiveStorage::VariantRecord\"], [\"record_id\", 51], [\"blob_id\", 117], [\"created_at\", \"2024-01-04 17:49:27.382925\"]]\r\nTRANSACTION (0.4ms)  COMMIT\r\nS3 Storage (120.4ms) Uploaded file to key: 1dousqzwcx79wlpkfn0o0f1sjfci (checksum: d9vmvbLEGDR2ZLzl7XNgUg==)\r\n```\r\n\r\nAttachments are being displayed, everything is fine, until deleting an attachment where I get the following exception\r\n\r\n```\r\nDEBUG -- :   TRANSACTION (0.2ms)  BEGIN\r\nDEBUG -- :   ActiveStorage::Attachment Exists? (1.7ms)  SELECT 1 AS one FROM \"active_storage_attachments\" WHERE \"active_storage_attachments\".\"blob_id\" = $1 LIMIT $2  [[\"blob_id\", 119], [\"LIMIT\", 1]]\r\nDEBUG -- :   ActiveStorage::VariantRecord Load (0.5ms)  SELECT \"active_storage_variant_records\".* FROM \"active_storage_variant_records\" WHERE \"active_storage_variant_records\".\"blob_id\" = $1  [[\"blob_id\", 119]]\r\nDEBUG -- :   ActiveStorage::Attachment Load (0.8ms)  SELECT \"active_storage_attachments\".* FROM \"active_storage_attachments\" WHERE \"active_storage_attachments\".\"record_id\" = $1 AND \"active_storage_attachments\".\"record_type\" = $2 AND \"active_storage_attachments\".\"name\" = $3 LIMIT $4  [[\"record_id\", 119], [\"record_type\", \"ActiveStorage::Blob\"], [\"name\", \"preview_image\"], [\"LIMIT\", 1]]\r\nDEBUG -- :   ActiveStorage::Blob Destroy (1.4ms)  DELETE FROM \"active_storage_blobs\" WHERE \"active_storage_blobs\".\"id\" = $1  [[\"id\", 119]]\r\nDEBUG -- :   TRANSACTION (6.7ms)  COMMIT\r\n INFO -- :   S3 Storage (100.6ms) Deleted file from key: 5qag8y7y3qqol4wrgo9iapy2z8oy\r\n INFO -- :   S3 Storage (38.1ms) Deleted files by key prefix: variants\/5qag8y7y3qqol4wrgo9iapy2z8oy\/\r\nERROR -- : Error performing ActiveStorage::PurgeJob (Job ID: 508059d0-a343-4377-ae75-c89195417e61) from Sidekiq(default) in 161.91ms: Aws::S3::Errors::NoSuchKey (Aws::S3::Errors::NoSuchKey):\r\n```\r\n\r\nI see this error twice in my logs. One time for the original and one time for the variant.\r\n\r\nActive Storage uploads the blobs without any prefix. See logs on top. \r\n\r\nAm I doing something wrong? Is my application not configured correctly? What am I missing? Thank you \ud83d\ude4f \r\n\r\n### Expected behavior\r\n\r\nDeleting an attachment should not throw errors\r\n\r\nVariants are being uploaded to a `variants` subfolder \r\n\r\n### Actual behavior\r\n\r\nDeleting an attachment throws an `Aws::S3::Errors::NoSuchKey (Aws::S3::Errors::NoSuchKey)` error as with the used key `variants\/5qag8y7y3qqol4wrgo9iapy2z8oy\/` no objects can be found.\r\n\r\nThis is where Active Storage tries to delete the prefixed variants which have never been created before: https:\/\/github.com\/rails\/rails\/blob\/main\/activestorage\/app\/models\/active_storage\/blob.rb#L325\r\n\r\n### System configuration\r\n\r\n**Rails version**: 7.1.2\r\n\r\n**Ruby version**: 3.2.2\r\n","comments":["According to the great explanation by @alexandreruban in https:\/\/github.com\/rails\/rails\/issues\/50176#issuecomment-1830823747 I come to the conclusion that the behaviour described in this issue can be solved with something as proposed in https:\/\/github.com\/rails\/rails\/pull\/46210\r\n\r\nBasically the `delete_prefixed` method should only be called if we're not tracking variants. Otherwise there won't be any files in `variants\/#{key}\/`, which makes the [ActiveStorage::PurgeJob](https:\/\/github.com\/rails\/rails\/blob\/main\/activestorage\/app\/jobs\/active_storage\/purge_job.rb) fail.\r\n\r\nThis should be a common problem though. How can we fix the problem? Just not tracking variants?\r\n\r\nEDIT 1: I put together a fresh rails 7.1 application to proof the behaviour: https:\/\/github.com\/basiszwo\/active-storage-object-storage-demo \r\nOne needs to provide Object Storage information.\r\n\r\nEDIT 2: I checked the disk service and it turns out, its [`delete_prefixed`](https:\/\/github.com\/rails\/rails\/blob\/main\/activestorage\/lib\/active_storage\/service\/disk_service.rb#L63) covers \/ hides the issue.\r\n","@brunto I came across [your issue](https:\/\/github.com\/rails\/rails\/issues\/50176) and I am wondering if you encountered the same issue? ","Having configured the application to not track variants actually makes the problem worse, as it no longer removes the variants and throwing the same error.\r\n\r\nAfter disabling variant tracking with \r\n\r\n```\r\n# config\/application.rb\r\nconfig.active_storage.track_variants = false\r\n```\r\n\r\nI uploaded a new avatar. This gave me the variants folder in my bucket \r\n\r\n<img width=\"963\" alt=\"Screenshot 2024-01-05 at 01 13 28\" src=\"https:\/\/github.com\/rails\/rails\/assets\/24071\/45c4a23f-8729-4c62-a5b4-744e4a0131d7\">\r\n\r\nWhen deleting the avatar, the original file with key `l86c4s22s0qms6gh4phca4udid5x` gets purged while purging the variants in `variants\/l86c4s22s0qms6gh4phca4udid5x\/` fails.\r\n\r\n```bash\r\n INFO -- :   S3 Storage (120.2ms) Deleted file from key: l86c4s22s0qms6gh4phca4udid5x\r\n INFO -- :   S3 Storage (64.8ms) Deleted files by key prefix: variants\/l86c4s22s0qms6gh4phca4udid5x\/\r\nERROR -- : Error performing ActiveStorage::PurgeJob (Job ID: c4f4898d-c7a4-4bae-a20a-c291f78504c3) from Sidekiq(default) in 195.0ms: Aws::S3::Errors::NoSuchKey (The specified key does not exist.):\r\n```\r\n\r\nSo I now have an exception and stale files. \ud83d\ude12 \r\n\r\nI am still wondering, that I couldn't manage to find footage about this issue, as I assume it's a common problem.","> @brunto I came across [your issue](https:\/\/github.com\/rails\/rails\/issues\/50176) and I am wondering if you encountered the same issue?\r\n\r\nNo problem on my side! BTW I use S3, maybe you can try too. To see if the problem come from DigitalOcean or not?","@brunto thank you for the information. With it, it looks like a problem with s3-compatible object storage. I testet on Scaleway and DigitalOcean, having the same issues. Thank you. Will confirm on S3.","We are having the same issue with Cloudflare R2.","While I hope this will be fixed by merging the open PR, here's how it bypass the issue in my application \r\n\r\n```ruby\r\n# config\/initializers\/active_storage_blob_purge_patch.rb\r\n\r\n# ensure logger is available\r\nlogger = Rails.logger\r\n\r\nif ENV[\"SECRET_KEY_BASE_DUMMY\"]\r\n  logger.info \"SECRET_KEY_BASE_DUMMY is set. Skip loading Active Storage Patch ...\"\r\nelse\r\n  #\r\n  # Ensure variants are deleted only if variants tracking is disabled\r\n  # This is needed because ActiveStorage::PurgeJob fails if variants are tracked\r\n  # but also fails if variants are not tracked. The latter also keeps files in\r\n  # the variants folder which are basically stale.\r\n  # see https:\/\/github.com\/rails\/rails\/issues\/50583\r\n  Rails.application.config.to_prepare do\r\n    logger.info \"Loading Active Storage Blob Purge Patch ...\"\r\n\r\n    class ActiveStorage::Blob < ActiveStorage::Record\r\n      def delete\r\n        service.delete(key)\r\n        service.delete_prefixed(\"variants\/#{key}\/\") if image? && !ActiveStorage.track_variants\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n"],"labels":["activestorage"]},{"title":"Port `ActiveRecord::AttributeMethods::Query` to Active Model","body":"### Motivation \/ Background\r\n\r\nRelated to https:\/\/github.com\/rails\/rails\/issues\/50568\r\n\r\nThe backport of [type_for_attribute][] from Active Record to Active Model enables the backport of `ActiveRecord::AttributeMethods::Query` to define predicate methods for both Active Model and Active Record using the same code paths.\r\n\r\n### Detail\r\n\r\nThis commit renames `Active{Record,Model}::AttributeMethods::Query` then includes it into both into the original\r\n`ActiveRecord::AttributeMethods::Query` and into\r\n`ActiveModel::Attributes` by default.\r\n\r\nThe test coverage was copied directly from the [Active Record test suite][], then modified to work in a database-less environment.\r\n\r\n### Additional information\r\n\r\nThe `_query_attribute` method defined in\r\n`ActiveRecord::AttributeMethods::Query` is specific to Active Record, so do not include it in the migration.\r\n\r\n[type_for_attribute]: https:\/\/github.com\/rails\/rails\/commit\/83f543b8760308081ab1b58c25804c45c2597844\r\n[Active Record test suite]: https:\/\/github.com\/rails\/rails\/blob\/a73cbbea6a082cdd320ecc92e3c6f1d46fe6af74\/activerecord\/test\/cases\/attribute_methods_test.rb#L494-L596\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["What is the use case? This is one of the few features in Active Record that I wish I could delete. I don't see much value on it, and its implementation is confusing since depending on the type this method behaves very differently.\r\n\r\nJust to be very clear, Active Model will not have all the features of Active Record. We will add only what makes sense on it. There is no goal of making Active Model a Active Record-like object backed by memory.","> This is one of the few features in Active Record that I wish I could delete.\r\n\r\nThat's an interesting perspective! How would you prefer to replace this kind of behavior?\r\n\r\n> What is the use case? \r\n\r\nThe main motivations are Ruby predicate idioms and intuition\/familiarity with attribute interfaces. \r\n\r\nFor boolean attributes, Ruby idioms encourage muscle memory to reach for `?`-suffixed predicates. Without this support, calls raise `NoMethodError`. For other attribute types, the same behavior can often be achieved by chaining `.present?`. Since that isn't always the case (the breadth of the `case` statement demonstrates it can be more complex), providing the nuance and design decisions made in Active Record reinforces consistency so that consumer applications aren't responsible for handling the same edge cases. \r\n\r\nActive Model attributes handle value coercion during assignment in the same was as Active Record casts values according to column types. There isn't `#to_bool` coercion, and `#present?` isn't consistent across types and contexts. I propose that providing default `?`-suffixed attributes that behave consistently across Active Record and Active Model fits into the broader attribute ergonomics.","I'd replace with #46376. I still things that is more than enough, but even then, I'm not convinced this is really needed.\r\n\r\nRuby idioms for booleans as actually not `?`. You can't `?` a local variable for example.\r\n\r\nI'll review this in context of #46376. It might be valuable for boolean attributes, for others, the fact that it changes so much based on type, points to me that we are trying to define a concept that doesn't exist."],"labels":["activemodel","activerecord"]},{"title":"CI: SQLite adapter is running in Trilogy tests","body":"Ref #49373\r\n\r\nhttps:\/\/buildkite.com\/rails\/rails\/builds\/103367#018cd514-4e51-4bac-be7c-c8656888c21e\r\n\r\nI'm pretty sure this means that some other test is leaking, but I have not dug in at all.","comments":["Yes. That is a leak. The connections aren't properly removed after they are established. We need to fix https:\/\/github.com\/rails\/rails\/pull\/49382"],"labels":["activerecord","ci issues"]},{"title":"Document find_sole_by edge cases and correct syntax mistake [skip ci]","body":"### Motivation \/ Background\r\n\r\nThis Pull Request has been created because contributing to rails documentation says: Explore and document edge cases.\r\n\r\n### Detail\r\n\r\nThis Pull Request changes activerecord\/lib\/active_record\/relation\/finder_methods.rb (documentation only). The % symbol should NOT be there to use the method. The syntax mistake has been corrected.\r\n\r\n### Additional information\r\n\r\nEdge cases has been tested with:\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire 'bundler\/inline'\r\n\r\ngemfile(true) do\r\n  source 'https:\/\/rubygems.org'\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem 'rails', github: 'rails\/rails'\r\n  gem 'sqlite3'\r\nend\r\n\r\nrequire 'active_record'\r\nrequire 'minitest\/autorun'\r\nrequire 'logger'\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\r\nActiveRecord::Base.logger = Logger.new($stdout)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :articles, force: true do |t|\r\n    t.string :title\r\n    t.integer :rating\r\n  \r\n    t.datetime :published_at  \r\n  end\r\nend\r\n\r\nclass Article < ActiveRecord::Base\r\nend\r\n\r\n# \r\n# Input\r\n# \r\n# In `ActiveRecord find_sole_by(arg, *args)`, the input parameters are:\r\n#\r\n# - `arg`: Typically a hash specifying the attributes and their values to match in a record. \r\n#          For example, `{name: 'John', status: 'active'}`.\r\n# - `*args`: A splat operator allowing additional arguments, often used for more complex queries \r\n#            with SQL conditions and placeholders. \r\n#            For example, `find_sole_by(\"created_at > ?\", Date.yesterday)`.\r\n\r\n# The `find_sole_by` method returns the only record matching the criteria or \r\n# raises an error if multiple records match or no record matches.\r\n\r\nclass FindSoleBy < Minitest::Test\r\n  def setup\r\n    Article.create!(title: 'First Article', published_at: Time.now - 5.days, rating: 5)\r\n  end\r\n\r\n  def teardown\r\n    Article.destroy_all\r\n  end\r\n\r\n  # Documents the input and output of the method.\r\n  #\r\n  # @param input [Integer, String, Array<Integer>, Array<String>] The input to be passed to the find method.\r\n  # @return ActiveRecord the output type is ActiveRecord object.\r\n  def test_interface\r\n    result = Article.find_sole_by([\"rating = ?\", 5])\r\n\r\n    assert_equal Article, result.class\r\n  end\r\n\r\n  # Tests the behavior of the method when a non-existent record ID is passed as an argument.\r\n  #\r\n  # @raise [ActiveRecord::RecordNotFound] if the record with the given ID does not exist.\r\n  def test_non_existent_record\r\n    assert_raises(ActiveRecord::RecordNotFound) do\r\n      Article.find_sole_by([\"rating = ?\", 1])\r\n    end\r\n  end\r\n\r\n  # Tests the behavior of the method when nil is passed as an argument.\r\n  #\r\n  # @return ActiveRecord object if the argument is nil.\r\n  # Generated SQL: SELECT \"articles\".* FROM \"articles\" ORDER BY \"articles\".\"id\" ASC LIMIT ?  [[\"LIMIT\", 2]]\r\n  def test_find_with_nil\r\n    result = Article.find_sole_by(nil)\r\n\r\n    assert_equal 'First Article', result.title\r\n  end\r\n\r\n  # Tests the behavior of the method when no argument is passed.\r\n  # \r\n  # The first argument is required. \r\n  # The second argument is optional.\r\n  # \r\n  # @raise ArgumentError Message: <\"wrong number of arguments (given 0, expected 1+)\"> if no argument is provided.\r\n  def test_find_with_no_argument\r\n    assert_raises(ArgumentError) do\r\n      Article.find_sole_by\r\n    end\r\n  end\r\n\r\n  # Tests the behavior of the method when an empty array is passed as an argument.\r\n  #\r\n  # @return [Array] An empty array.\r\n  def test_find_with_empty_array\r\n    result = Article.find_sole_by([])\r\n\r\n    assert_equal 'First Article', result.title\r\n  end\r\n\r\n  # Tests the behavior of the method when there are multiple records that match the search criteria.\r\n  #\r\n  # @raise [ActiveRecord::SoleRecordExceeded] if multiple records match the search criteria.\r\n  def test_multiple_records_case\r\n    Article.create!(title: 'First Article', published_at: Time.now - 5.days, rating: 5)\r\n\r\n    assert_raises(ActiveRecord::SoleRecordExceeded) do\r\n      Article.find_sole_by([\"rating = ?\", 5])\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Publish ActiveModel::Attributes API","body":"`ActiveModel::Attributes` is public API of the framework since 7.1, but wasn't advertised in guides mostly because there are a few features missing, like [attribute composition](https:\/\/gist.github.com\/rafaelfranca\/d54e7a1e8beb40ae1ac79bbb779970fa).\r\n\r\n- [ ] `ActiveModel::Model` should include `ActiveModel::Attribute` by default when it is made public.\r\n- [ ] Merge `Model` support https:\/\/github.com\/rails\/rails\/pull\/44380\r\n- [ ] Merge `Collection` attribute https:\/\/github.com\/rails\/rails\/pull\/44324\r\n- [ ] Merge `validates_model` https:\/\/github.com\/rails\/rails\/pull\/49534\r\n- [ ] Decide what to do with `ActiveModel::NestedAttributes` https:\/\/github.com\/rails\/rails\/pull\/49637\r\n- [ ] Decide if we want a Boolean attribute type https:\/\/github.com\/rails\/rails\/pull\/46376\r\n- [ ] Write guide about this new feature\r\n- [ ] Decide what to do with https:\/\/github.com\/rails\/rails\/pull\/49675","comments":["Could https:\/\/github.com\/rails\/rails\/pull\/49675 (or https:\/\/github.com\/rails\/rails\/pull\/36183) be added to this checklist?","No promises, but I think so.","At the moment [ActiveModel::Model](https:\/\/api.rubyonrails.org\/classes\/ActiveModel\/Model.html) and [ActiveModel::API](https:\/\/api.rubyonrails.org\/classes\/ActiveModel\/API.html) are _nearly_ equivalent, `Model` has a couple extra trivial methods. \r\n\r\nSome historical discussion suggested the original intent of this split was to eventually include `ActiveModel::Attributes` in `ActiveModel::Model` (but not in `ActiveModel::API`).  \r\n\r\nPerhaps with this additional filling out of `ActiveModel::Attributes`, it's a good time to finally include `ActiveModel::Attributes` in `ActiveModel::Model` before Rails8, to provide more distinction between ::Model and ::API? ","We have recently been using extensively the `ActiveModel::Attributes` with @valentin-lifen and have implemented types that are pretty much the same as the `Model` and `Collection`. \r\n\r\nWe are delighted to see first-class support for those coming to Rails! We also have added a type that allows `Symbol` attributes, which we found useful, and have been wondering whether this could be a good addition to the API or not. \r\n\r\nConsidering that ActiveRecord does not support symbol attributes, I think not, but I'd still like to share this feedback."],"labels":["docs"]},{"title":"Incorrect notification order in ActiveRecord transactions","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire 'bundler\/inline'\r\n\r\ngemfile(true) do\r\n  source 'https:\/\/rubygems.org'\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem 'rails'\r\n  # If you want to test against edge Rails replace the previous line with this:\r\n  #\r\n  # first bad commit:\r\n  # gem 'rails', github: 'rails\/rails', ref: '542f0951dddac49bf06f7da35d990db4f3829307'\r\n\r\n  # The parent commit of the above ref will pass this test:\r\n  # gem 'rails', github: 'rails\/rails', ref: 'bb68040de45754b27f5064c5635f6d0944cfc727'\r\n\r\n  gem 'sqlite3'\r\nend\r\n\r\nrequire 'active_record'\r\nrequire 'minitest\/autorun'\r\nrequire 'logger'\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nclass Subscriber\r\n  attr_reader :events\r\n\r\n  def initialize\r\n    @events = []\r\n  end\r\n\r\n  def start(_name, _id, payload)\r\n    return if payload[:name] == 'SCHEMA'\r\n\r\n    # substitution here to strip out the new default return on the main branch\r\n    events << [:start, payload[:sql].sub(\/ RETURNING \"id\"\/, '')]\r\n  end\r\n\r\n  def finish(_name, _id, payload)\r\n    return if payload[:name] == 'SCHEMA'\r\n\r\n    events << [:finish, payload[:sql].sub(\/ RETURNING \"id\"\/, '')]\r\n  end\r\n\r\n  def publish(*); end\r\n\r\n  def publish_event(*); end\r\nend\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  belongs_to :post\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_association_stuff\r\n    subscriber = Subscriber.new\r\n    ActiveSupport::Notifications.subscribe('sql.active_record', subscriber)\r\n\r\n    post = Post.create!\r\n\r\n    post.destroy\r\n\r\n    create_events = subscriber.events.slice!(0, 6)\r\n    destroy_events = subscriber.events\r\n\r\n    expected_create_order = [\r\n      [:start, 'begin transaction'],\r\n      [:finish, 'begin transaction'],\r\n      [:start, 'INSERT INTO \"posts\" DEFAULT VALUES'],\r\n      [:finish, 'INSERT INTO \"posts\" DEFAULT VALUES'],\r\n      [:start, 'commit transaction'],\r\n      [:finish, 'commit transaction']\r\n    ]\r\n\r\n    expected_destroy_order = [\r\n      [:start, 'begin transaction'],\r\n      [:finish, 'begin transaction'],\r\n      [:start, 'DELETE FROM \"posts\" WHERE \"posts\".\"id\" = ?'],\r\n      [:finish, 'DELETE FROM \"posts\" WHERE \"posts\".\"id\" = ?'],\r\n      [:start, 'commit transaction'],\r\n      [:finish, 'commit transaction']\r\n    ]\r\n\r\n    assert_equal(create_events, expected_create_order)\r\n    assert_equal(destroy_events, expected_destroy_order)\r\n  end\r\nend\r\n\r\n```\r\n\r\n### Expected behavior\r\nThe evented notifications should appear in the order of the database executions, i.e.:\r\n\r\n- begin transaction\r\n- execute statement\r\n- commit transaction\r\n\r\n### Actual behavior\r\n\r\nThe statement execution is wrapped around `begin`, with `commit` trailing after both:\r\n\r\n- execute statement\r\n  - begin transaction\r\n- commit transaction\r\n\r\nOr, to put it in terms of start\/finish:\r\n\r\n- start execute statement\r\n- start begin\r\n- finish begin\r\n- finish execute statement\r\n- start commit\r\n- finish commit\r\n\r\nThis behavior changed in https:\/\/github.com\/rails\/rails\/pull\/44576. For loggers or other subscribers that receive a single notification per event, this probably did not change anything, as the 'finishes' are still in the correct order. However, for subscribers that process `start` and `finish` events individually (e.g., tracers), this ordering implies that \"execute statement\" is a parent event of \"begin\" \u2014\u00a0which is not correct in terms of how this was previously understood.\r\n\r\n### System configuration\r\n**Rails version**: 7.1.2\r\n\r\n**Ruby version**: 3.3.0\r\n","comments":["I have tested this test case.\r\n\r\n This fails:\r\n\r\n```ruby\r\ngem 'rails', '7.1.0.beta1'\r\n```\r\n\r\nThis works:\r\n\r\n```ruby\r\ngem 'rails', '7.0.8'\r\n```\r\n\r\nSo this bug was introduced in version `7.1.0.beta1`. \r\n\r\nRuby version: 3.3.0 \r\n","Yes, more specifically in this commit: https:\/\/github.com\/rails\/rails\/pull\/44576\/commits\/542f0951dddac49bf06f7da35d990db4f3829307","This has to do with the new ordering of `materialize_transactions`, which is now called within the `with_raw_connection` method. I have a potential fix in mind, but I'd like @matthewd to weigh in before I spend too much time on the implementation.\r\n\r\nThe gist is that the log messages for `transaction begin` are triggered by `materialize_transactions`, which is in turn triggered by `with_raw_connection`, which is now called _inside_ the log block for `internal_exec_query` (at least in the case of the sqlite3 adapter). Inverting the nesting of these blocks will trigger the messages in the expected order:\r\n\r\n```ruby\r\n        def internal_exec_query(sql, name = nil, binds = [], prepare: false, async: false) # :nodoc:\r\n          # ...\r\n          with_raw_connection do |conn|\r\n            log(sql, name, binds, type_casted_binds, async: async) do\r\n              # ...\r\n```\r\n\r\nHowever, the `log { with_raw_connection {` pattern occurs frequently, but I'm not sure this ordering is ever intentional or important. The previous design materialized transactions before `log` was called, and called `ActiveSupport::Dependencies.interlock.permit_concurrent_loads` inside the log block (same position as `with_raw_connection` is now). So the question is whether `with_raw_connection` should be instrumented itself (maybe with a new notification?), or if its ok for just the internal yield to be instrumented."],"labels":["activerecord"]},{"title":"Improve documentation for `action_text:install` task","body":"### Detail\r\n\r\nFirst, mimic the documentation and guidance provided for the `active_storage:install` task, including nudges the execute the command when tables are missing.\r\n\r\nSimilarly, adjust the source code text in the generator itself. By removing the newlines, the generator won't inject the JS and CSS source more than once if it already exists.\r\n\r\n### Additional information\r\n\r\nThis commit includes a diff scoped to `test\/dummy` that was generated by executing the following:\r\n\r\n```bash\r\ncd test\/dummy\r\nbin\/rails action_text:install\r\nbin\/rails db:migrate\r\n```","comments":["@zzak this might be related to the Railtie work you've been investigating for the various test harnesses.","\ud83d\ude48 Yeah can we not update the dummy apps until that PR is merged?"],"labels":["actionpack","railties","docs","actiontext"]},{"title":"Fix instantiation of inherited classes when querying","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request has been created because https:\/\/github.com\/rails\/rails\/issues\/50499\r\n\r\n### Detail\r\n\r\nPreviously, querying from the base class resulted in an object of the inherited type, with 'ignored_columns' included in the 'attributes' method.\r\n\r\nThis behavior was inconsistent, as it did not occur when querying directly from the inherited class. This fix ensures consistent behavior in the attributes between the two ways of instantiate inherited classes during querying.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Thanks \ud83d\udc4d . Someone from the core team will have a look and merge when they get a chance."],"labels":["activerecord"]},{"title":"Add Dockerfile section in the docs [skip ci]","body":"### Motivation \/ Background\r\n\r\nGetting started rails edge guide is missing details about Docker.\r\n\r\nThis Pull Request has been created because developers are opening issues due to lack of documentation on how to use it to run their Rails app.\r\n\r\n### Detail\r\n\r\nThis Pull Request changes guides\/source\/getting_started.md\r\n\r\n### Additional information\r\n\r\nThe section is based on Rafael's post: https:\/\/rubyonrails.org\/2023\/10\/5\/Rails-7-1-0-has-been-released\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Sorry I don't think the first thing a new developer should do when reading the very first guide is need to learn about Docker.","Explanation should start with docker build and just focus on sqlite so we don't have to muddy it with PostgreSQL stuff there."],"labels":["docs"]},{"title":"When quering on a base class that has inheritance, childs instantiate with full attributes including ignored columns","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n  gem \"rails\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n    t.string :title\r\n    t.string :exclusive_chile_column\r\n    t.string :type\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\nend\r\n\r\nclass Post::Chile < Post\r\nend\r\n\r\nclass Post::Peru < Post\r\n  self.ignored_columns += [:exclusive_chile_column]\r\nend\r\n\r\n\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_association_stuff\r\n    post_peru = Post::Peru.create!(title: 'hola')\r\n\r\n\r\n    # Correct behavior, the column is ignored when assigning the attributes from sti class\r\n    post_peru_called_from_sti = Post::Peru.find(post_peru.id)\r\n    assert post_peru_called_from_sti.attributes.keys.exclude?('exclusive_chile_column')\r\n    assert post_peru_called_from_sti.attributes.keys.size == Post::Peru.column_names.size\r\n\r\n    # This is the bug, the column is not being ignored when assigning the attributes from base class\r\n    post_peru_called_from_base_class = Post.find(post_peru.id)\r\n    assert post_peru_called_from_base_class.instance_of? Post::Peru\r\n    # fails \r\n    assert post_peru_called_from_base_class.attributes.keys.exclude?('exclusive_chile_column')\r\n    # also fails \r\n    assert post_peru_called_from_base_class.attributes.keys.size == Post::Peru.column_names.size\r\n  \r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\nSti classes when instantiated from the base_class on quering should not have ignored columns on the attributes associated with the records\r\n\r\n### Actual behavior\r\nSti classes when instantiated from the base_class on quering method have ignored columns associated whose is inconsistent with the behaviour on calling the same quering method directly on the sti class \r\nThis inconsistency results in instances of the STI class having different attributes, as demonstrated in the script above.\r\n\r\n\r\n### System configuration\r\n**Rails version**: 7.1.2\r\n\r\n**Ruby version**: 3.2.2\r\n\r\n### Contributing\r\nI am considering submitting a pull request to address this issue because we use a monkey patch on our software. However, before proceeding, I would like to hear your thoughts. Do you think this is something that can be changed?\r\n","comments":["Looks like a bug to me. Please, do open a PR.","Thanks, here is the [PR](https:\/\/github.com\/rails\/rails\/pull\/50553). Happy to recieve some feedback \ud83d\udc4c"],"labels":["activerecord","attached PR","With reproduction steps"]},{"title":"Remove unnecessary to_a conversion for readonly_attributes method call","body":"### Motivation \/ Background\r\n\r\nIn Rails 7.0 despite api documention, `readonly_attributes` returned a set:\r\nhttps:\/\/github.com\/rails\/rails\/blob\/7-0-stable\/activerecord\/lib\/active_record\/readonly_attributes.rb#L26\r\n\r\nThis was fixed in 7.1:\r\nhttps:\/\/github.com\/rails\/rails\/blob\/7-1-stable\/activerecord\/lib\/active_record\/readonly_attributes.rb#L31\r\n\r\nHowever the usage of `readonly_attributes` was guarded with a .to_a which is now no longer needed https:\/\/github.com\/rails\/rails\/blob\/590a675c4ecfaa9b7b06787a30adeb0136524879\/activerecord\/lib\/active_record\/insert_all.rb#L195\r\n\r\n### Detail\r\n\r\nThis Pull Request changes an unnecessary to_a call\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n\r\nNA:\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Active Storage can be configured by STORAGE_URL","body":"Fixes #50448\r\n\r\nNOTE: This is a proof-of-concept, that I came up with based on my understanding of ActiveRecord::DatabaseConfigurations and try to find a tiny seam to add support for this feature. Open to feedback and suggestions, but wanted to take a stab at this while it was fresh in my head.","comments":[],"labels":["activestorage"]},{"title":"support dumping PostgreSQL inheritance & partitioning options to `schema.rb`","body":"### Motivation \/ Background & Detail\r\n\r\n[`create_table`](https:\/\/api.rubyonrails.org\/v7.1.2\/classes\/ActiveRecord\/ConnectionAdapters\/SchemaStatements.html#method-i-create_table) provides an `options:` key that allows you to append options to your table definition. One of the things you can do this way with PostgreSQL 10+ is use [native partitioning](https:\/\/www.postgresql.org\/docs\/current\/ddl-partitioning.html) to declare partitioning definitions:\r\n\r\n```\r\ncreate_table :events, id: false, options: \"PARTITION BY LIST (account_id)\" do |t|\r\n  t.bigint :account_id, null: false\r\n  t.integer :kind, null: false\r\n  t.datetime :occurred_at, null: false\r\nend\r\n```\r\n\r\nAdding this to a migration and running it will properly create the partitioned table in development, but the dumped schema will not persist the specified partitioning options. Therefore, if you run your test suite which loads from `schema.rb`, your test database's table won't be properly partitioned.\r\n\r\nThis PR extends the PostgeSQL adapter's schema statements so that it can dump this partitioning definition as defined in the relevant system tables. \r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Hi @fatkodima, I've seen that you've done some work lately surrounding updates to the Postgres migrations and schema support in ActiveRecord. Would you mind taking a look at this and let me know if you think of it?","No need to ping anyone, just wait some time for some other reviewers (or ask for reviews in discord channel).\r\nAnd please squash your PR into a single commit.","@fatkodima pushed up a squashed commit, thanks for your time","`options:` can be used for some database-specific options like `options: 'ENGINE=InnoDB DEFAULT CHARSET=utf8mb4'` for MySQL.\r\n\r\nPostgreSQL native partition is one of them, not everything. It eventually add the string specified in the `option:` clause at the end of \r\n`create table <table_name> ()`, so it needs to consider the order of each options to be dumped to meet database specific requirements,\r\nthat should be hard for database adapter to consider every order. How about `config.active_record.schema_format = :sql` and run `rails db:schema:dump`?","Hi @yahonda. Yes, this is just one of things that `options:` can do and supporting all features for all adapters like this would be challenging. My thinking was that starting to add support for specific adapter features through options would be nice to have though. In terms of ordering, for Postgres the `create_table` option ordering is well documented and there aren't _that_ many, in case other options were to get added in this manner:\r\n\r\nhttps:\/\/www.postgresql.org\/docs\/current\/sql-createtable.html\r\n\r\nUsing the `:sql` schema format does work, but many teams have a preference to use `schema.rb` and I'm not sure how one could easily use native partitioning otherwise. It also felt unexpected to me to use `options:` to correctly create the partitioned parent table (which felt like a valid use case for it) to then have it not work as expected in the test environment when the schema was loaded.\r\n\r\nThanks for your time, let me know what you think. ","As a delayed follow-up, i pushed up support for `INHERITS` in this PR as well. Note that `INHERITS` is not compatible with `PARTITION` so there isn't a need to support combining those options"],"labels":["activerecord"]},{"title":"Read `ActionText::Attachment.tag_name` in Action Text Fixtures","body":"### Motivation \/ Background\r\n\r\nUtilizing the [ActionText::FixtureSet.attachment][] method in consumer application's test suites relies on a hard-coded\r\n`action-text-attachment` element tag name. While it's uncommon for that value to change, it _is_ possible to configure it with the `config.action_text.attachment_tag_name` configuration.\r\n\r\n### Detail\r\n\r\nThis commit replaces the hard-coded name by interpolating `ActionText::Attachment.tag_name`.\r\n\r\nInternal to the Rails test suite, Action Text's fixtures use HTML with `<p>` elements to wrap new blocks of text. Trix uses `<div>` elements by default for line breaking (and for [other historical reasons][]). This change is internal to this codebase, and will not affect users.\r\n\r\n### Additional information\r\n\r\n[ActionText::FixtureSet.attachment]: https:\/\/edgeapi.rubyonrails.org\/classes\/ActionText\/FixtureSet.html#method-c-attachment\r\n[other historical reasons]: https:\/\/github.com\/basecamp\/trix\/issues\/202#issuecomment-461166895\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["actiontext"]},{"title":"Add structured logging next to developer logging","body":"When you want to aggregate the data from your Rails application into a data analysis platform, it's a real pain trying to parse the developer-focused log lines that Rails spits out by default. In addition to these log lines, which are great in development and for manual inspection, we should add structured json logging on a per-request basis that can easily be digested by analytics.\r\n\r\nBoth Shopify and 37signals have been using in-house structured logging for a long time, so extracting something from those battle-tested scenarios is the path we intend to go.\r\n\r\ncc @Jeremy @rafaelfranca ","comments":["Huge +1 to having something out-of-the-box for this; we've managed to grow several different implementations of structured logging at Zendesk and I would very much like there to be a clear gold standard here to switch to!\r\n\r\nOne thing I would like to see addressed in a built-in structured logging solution is what to do about multiple independent processes writing to stdout.\r\n\r\nIt's very common, in my experience, for apps in container environments to be expected to write their logs to stdout, where it gets collected by the container engine and then forwarded to a centralised logging solution. It's also very common to run Rails apps in a multiprocess app server like Unicorn or Puma's cluster mode, so there might be several independent Rails processes running in the one container. The problem is, by default, all of those processes will share the single stdout stream, leading to issues where structured log messages might be interleaved and thus their structure broken.\r\n\r\nI've been sketching out a way to solve this for us at Zendesk (https:\/\/github.com\/zendesk\/multiproc_log_device). Essentially, it runs a parent process above Unicorn which exposes a unix socket, and reopens stdout in each process to connect to that socket.  Then, the parent process can merge the logs together in a structure aware way.\r\n\r\nI would be very interested in hearing how other Rails users have dealt with this issue, and very _very_ interested in trying to hammer out a way this problem can be addressed in a built-in Rails structured logging solution.","> we should add structured json logging on a per-request basis\r\n\r\nGood initiative!\r\n\r\nMaybe `logfmt` (https:\/\/brandur.org\/logfmt) could be supported as an output alternative to JSON?\r\n\r\nAssuming it's all strings and only one level deep (that's how JSON log lines are usually structured), logfmt is 1:1 with JSON log lines, so it's only a matter of output.\r\n\r\n***\r\n\r\nAlso, maybe this is an area where an RFC light might be useful.\r\n\r\nJust write down a rough plan on the interface and output structure, and ask a few large Rails users (Shopify, Zendesk, Github, etc) to provide feedback.","> Assuming it's all strings and only one level deep (that's how JSON log lines are usually structured), logfmt is 1:1 with JSON log lines, so it's only a matter of output.\r\n\r\nIt is not uncommon for JSON log lines to have multiple nested levels when using observability tools, so if logfmt is supported, I suggest making JSON the primary focus and gracefully degrading to logfmt. \r\n\r\n[Semantic Logger](https:\/\/github.com\/reidmorrison\/semantic_logger) has a nice approach of allowing the user to choose among a list of formatters for each appender that receives the logs. In fact, if you take a look at their documentation for [appenders](https:\/\/logger.rocketjob.io\/appenders.html) (a concept that I think would be _fantastic_ to have as part of this work), you'll find an [example payload](https:\/\/logger.rocketjob.io\/appenders.html#json-log-format) that shows a nested payload structure. :grin:","Is there any indication what the rough shape of the structured logging interfaces\/APIs might look like? Or, what's the best way to provide input on this?\r\n\r\nWe\u2019ve cooked up a bunch of home-grown interfaces for this in Zendesk:\r\n\r\n* making `Rails.logger.tagged(attr: 'value') { ... }` accept a hash of structured attributes\r\n* passing attributes to `Rails.logger.info \"message\", extra: 'attributes'`\r\n* entirely separate methods like `Rails.logger.append_attributes({attribute_for: 'remaining lifetime of this request'})`\r\n\r\n(I think the semantic logger gem mentioned above supports the first two methods, but we're not actually using that implementation).\r\n\r\nI\u2019m presently trying to consolidate all of these various interfaces in our code. I\u2019d ideally want to \u201cjust do what rails does\u201d, but of course rails doesn\u2019t do anything related to structured logging\u2026 yet. If I had a rough idea what direction Rails is planning to go in, it would greatly help me out with deciding which interfaces to keep and which to refactor \ud83d\ude4f ","API would be something like this:\r\n\r\n```ruby\r\nlogger.struct my_message: \"Something happened\"\r\n``` \r\n\r\nBut this isn't set and I'm not planning to work in the first half of the year."],"labels":["railties"]},{"title":"Add STORAGE_URL to Active Storage","body":"We can configure our database with DATABASE_URL, our Redis server with REDIS_URL, but our Active Storage still needs a yaml file. This makes it harder to specialize Active Storage in cases of one-application-multiple-deployments, and it needn't be so.\r\n\r\nI propose that we follow the same format as DATABASE_URL. Here's a set of URLs that could be used:\r\n\r\n```\r\ndisk:\/\/my\/root\/path\r\ns3:\/\/access_key_id:secret_access_key@us-east-1\/your-bucket\r\ngcs:\/\/path\/to\/gcs.keyfile@your_project\/your-bucket\r\nazure:\/\/storage_access_key@storage_account_name\/your-container\r\n```","comments":["Lets make sure that the `s3` URL scheme also supports other s3 compatible object store like https:\/\/min.io\/","I took a stab at this in #50477, would love to get feedback \/ direction on the approach. :pray:"],"labels":["attached PR","activestorage"]},{"title":"Add basic authentication generator","body":"Rails now include all the key building blocks needed to do basic authentication, but many new developers are still uncertain of how to put them together, so they end up leaning on all-in-one gems that hide the mechanics. While these gems are great, and many people enjoy using them, they should not be seen as a necessity. We can teach Rails developers how to use the basic blocks by adding a basic authentication generator that essentially works as a scaffold, but for authentication.\r\n\r\nNote: This ticket serves as a placeholder for the intention to do this work. Not as an open invitation to feature requests. Before we engage in broad discussion of what should or shouldn't be in such a generator, the core team will propose a solution first, so there's something tangible to discuss.\r\n\r\ncc @rafaelfranca ","comments":["Great!\r\n\r\nHave been waiting for this. ","@dhh are you thinking something similar to: https:\/\/github.com\/lazaronixon\/authentication-zero","@claudiug That's too much for what I have in mind, but the general direction of using generators instead of engines is correct.","Could a simple magic link approach be an elegant yet simple solution?","Going to tap the sign in the issue description about now diving into specific feature discussions before there's a PR proposal \ud83d\ude04","@dhh is this open for a PR, or we wait for the core team to build initial \"version\"?","Should include Passkey support ideally. If rails just supports that out of the box that'd be huge","Because it's DHH said, everyone will follow. But it's Rails problem for monopoly on DHH decision.\r\n\r\n100% of application has authentication builtin, this decision should be decided sice Rails 2.0.\r\n\r\nAlright, too late, but it's better than never.\r\n\r\nDevise is the reason Rails sucks, but it's ok, it's magical, it works, but it sucks anyway.","The Elixir Phoenix team used the same generator approach with the [mix phx.gen.auth](https:\/\/hexdocs.pm\/phoenix\/mix_phx_gen_auth.html) command.\r\n\r\nEven though it is a different language and framework I'm just mentioning it in case it can be interesting or useful to examine.","\"Device is the reason Rails sucks\" adds nothing of value to the technical discussion, and it's a violation of our Code of Conduct. This has merited a 30-day suspension from engagement here. Let's get back to discussing technical progress. ","I think that's an excellent decision. \n\nOne of the reasons authentication has always been a DIY\/Userspace feature has been that our Browsers didn't have a native solution ready. The common implementations of user\/password have been an unmitigated disaster for security by shifting identity responsibilities to the uses. This has now changed with Passkeys being implemented well on all evergreen browsers and operating systems. \n\nThe passkey spec is not perfect but it's a very good set of tradeoffs with a workable API. I feel it makes sense to consider a strong push towards passkeys as a default convention. ","I would rather go with passwordless or passkey based authentication approach. Any approach that does not require password would be ideal.","Seconding the calls for a passkeys-first approach; for the reasons outlined here: https:\/\/github.com\/heartcombo\/devise\/issues\/5527","We built a full passkey solution for ONCE #1 but the user ergonomics left a ton to be desired. So we pulled it out again. Long term, I can definitely see the appeal. But right now the way passkeys are synced or not on different platforms and browsers is hella confusing.\n\nSo I want to keep watching the puck, but for an application made with regular users today, it seems too soon to skate there.\n\nBut we should get all our infrastructure ready for when passkeys are not just viable but obvious everywhere. We will extract our work into a gem. Too much machinery to all just generate as part of a controller.","I strongly believe that this is an excellent decision.","That makes sense. Happy that it's on the radar though.","I've been working on https:\/\/github.com\/kobaltz\/action_auth for this very reason. Basically using only the Rails provided mechanisms, I wanted to have a simple authentication solution that could be yanked out in hopes that a Rails built-in solution would seamlessly (as much as possible) take over when or if that time ever came.","I just use [rodauth](https:\/\/rodauth.jeremyevans.net\/) and [rodauth-rails](https:\/\/github.com\/janko\/rodauth-rails). Simply because its out-of-the-box feature set is incomparably larger than Devise and any other authentication framework I've seen.\r\nWebauth? no problem, JWT ? Have you ever tried to embed jwt + refresh in devise? it's just available immediately here.\r\nBoth View and JSON api are available at once.\r\n\r\nAnd the library author is pretty reliable, after all it's a rack, ruby and sequel orm maintainer.\r\n\r\nAnd if something isn't there, it's either just integrate it yourself or there are plugins available:\r\n1. [oauth](https:\/\/gitlab.com\/os85\/rodauth-oauth)\r\n2. [omniauth](https:\/\/github.com\/janko\/rodauth-omniauth)\r\n3. [pwned](https:\/\/github.com\/janko\/rodauth-pwned)\r\n4. etc...\r\n","That is vastly out of scope for what this intends to be. Plenty of room for kitchen sink with gems to continue to serve that. In any case, as per the issue, let\u2019s hold off on discussing features until there\u2019s a proposal PR ready. ","this is cool finally some masterchef would do the omakase for auth in rails\r\n\r\nno more worry about \"did I do it correctly?\"","This is a great idea! In Phoenix land, there's the [phx.gen.auth](https:\/\/hexdocs.pm\/phoenix\/mix_phx_gen_auth.html) generators that use basic building blocks to build a secure solution out of the box. \r\n\r\nOnce generated you can tweak the code to your specific needs if necessary. Maybe something like this would be terrific for Rails.","great to here it. I switched from devise to authentication-zero, because it's generating all the code, so I can see it all and understand what is going on + modify it as much as I want.\r\n\r\nhttps:\/\/github.com\/lazaronixon\/authentication-zero","> great to here it. I switched from devise to authentication-zero, because it's generate all the code and I can see it all, so I can modify it as much as I want.\r\n> \r\n> https:\/\/github.com\/lazaronixon\/authentication-zero\r\n\r\nthat is cool, I wonder where u all keep discovering these shiny gems","even basic requirements are missing here :)\r\n\r\nwhat is auth here? auth for humans? auth for APIs? and this is only beginning of long question\/decision tree about how auth _may_ work\r\n\r\nI believe auth is so extremely broad question with so many opinions that to put into rails \u201cdistribution \u201c would be too questionable and opinionated ;)","If the goal is to give people a quick, easy to roll out alternative to the step of installing one of several rich featured gems out there - I would imagine then the focus should be on authenticating humans, and giving the developer the most dead-simple functionality that covers the most common use-case:\r\n\r\n * Sign up\r\n * Log in\r\n * Log out\r\n * A couple helpers to the tune of `current_user`\r\n\r\nA user model, with some basic infrastructure (like views) to handle this would go (in my opinion) as far as this would need to go.\r\n\r\nFor anything else there are gems. Maybe I'm over-simplifying here.\r\n\r\nThe new system would obviously need to be extendable. But maybe this could even be the realm of additional, optional, possibly 3rd party gems.\r\n\r\nFor example, if you need to have single sign on via providers like Github, Meta, etc - this will require things like callback routes, managing the tokens issued on the return trip, auth provider API keys, etc.",">  * Sign up\n> \n>  * Log in\n> \n>  * Log out\n> \n>  * A couple helpers to the tune of `current_user`\n\nI think there are other features that are not avoidable such as \"reset password\", \"confirm email\", \"safe email update\".\n\nI'd also advocate to have other security related features all websites should have, such as the ability to discard all existing sessions after a hack recovery.","@n-studio yep, agreed, things like you mentioned would also be important.","Here is my wishlist:\r\n\r\n- Auto register\r\n- Login with magic link\r\n- No signup\r\n- No password storing\r\n- No password reset\r\n- No confirm email\r\n\r\nIf craigslist using Perl can have magiclink login, then in 2024 Rails should be able to accomplish this feature. Here is the requirements documented and functioning [FastAPI project](https:\/\/github.com\/whythawk\/full-stack-fastapi-postgresql) ","I think a default auth generator can do as little as a sessions_controller, a registrations_controller, an authorizable concern and some before hooks in the right places.\r\nI (for myself) extracted the minimal required code into [this gem](https:\/\/github.com\/1klap\/tinytokenauth-rails), this is enough to get started and easy to move on if it needs to be extended.  ([Release post](https:\/\/dev.to\/1klap\/user-auth-in-rails-without-devise-a-step-into-a-simpler-world-17hi))\r\nThe generator could just do something similar in the project and i think it is simple enough for devs to look at the code and understand what it is doing (and tweak if needed)","The reason I want to replicate FastAPI way of doing this is due to security issues. They have already adopted best security practices for this feature. It is very well thought out with the end to end flow: You see it in their [authentication guide](https:\/\/github.com\/whythawk\/full-stack-fastapi-postgresql\/blob\/master\/docs\/authentication-guide.md). Without the password related stuff in this doc and retain only magiclink and maybe TOTP as another layer of defense.\r\n\r\nI glanced over the Ruby related repos. They don't have much in terms of security. I was thinking something very lightweight:\r\n\r\n```ruby\r\nhas_magiclink\r\n```\r\n\r\ndeclaration in the model. Bake in the best security practices in this method.","It has already been said that a proposal will be submitted. I don't think it's worth discussing things ahead of time.","hello @dhh one way could be implement is using [device](https:\/\/github.com\/heartcombo\/devise) i think could be use full also give a feature to implement OAuth ","A small thing to consider based on my recent auth work:\r\n\r\nMagic links don't work with PWAs on iOS. If you click the login link, it always opens in Safari and always log into Safari. The cookies in Safari are separate from the cookies in the PWA. So, it's impossible to get the magic link to open in the PWA. \r\n\r\nI preferred pin-based login over links for this reason.","Perhaps it is an idea to add something similar like has_secure_password that can store multiple credentials for a user. This way you can have a password and a passkey (or whatever other credential) at the same time.\r\n\r\nI once was investigating a simple setup in Rails to do something like this but i could not find a way to use has_secure_password to make something like this to work. I know it is not intended for any use other than passwords but it would be nice to have the functionality to encrypt credentials extracted out of has_secure_password.\r\n\r\nA data model could be something like this:\r\n\r\n```ruby\r\nclass User < ApplicationRecord\r\n  has_many :credentials, dependent: :destroy\r\nend\r\n\r\nclass Credential < ApplicationRecord\r\n  has_credential\r\n  belongs_to :user\r\nend\r\n```\r\n\r\n```ruby\r\nclass CreateCredentials < ActiveRecord::Migration\r\n  def change\r\n    t.references :user, null: false, foreign_key: true\r\n    t.(string or integer) :type, null: false\r\n    t.string :credential_digest, null: false\r\n    \r\n    t.timestamps\r\n  end\r\nend\r\n```\r\n\r\nThe authentication will become more complex but you will have more authentication options this way. For the generator perhaps this could be an option:\r\n\r\n```shell\r\nrails g authentication --credentials\r\n```"],"labels":["railties"]},{"title":"Make Propshaft the default asset pipeline in Rails 8","body":"It's time to have [Propshaft](https:\/\/github.com\/rails\/propshaft) take over from our venerable Sprockets in Rails 8. Our primary approach with #nobuild Hotwire is a better fit for Propshaft, and it also works great with out jsbundling\/cssbundling secondary approach.\r\n\r\nWe will need to thoroughly test, document, and work with popular gems\/plugins to ensure compatibility. Propshaft contains a small subset of features from Sprockets, and undoubtedly some will depend on these features. If incompatibilities can't be corrected in all cases, we should make sure that error\/guard messages are good.\r\n\r\nIf you're interested in helping with this effort, you can help us identify the incompatibilities in this issue.\r\n\r\ncc @brenogazzola ","comments":[],"labels":["railties"]},{"title":"Solid Cache should be the default caching backend for Rails 8","body":"Like with Solid Queue, [Solid Cache](https:\/\/github.com\/rails\/solid_cache) gives us a database-agnostic backend for Rails.cache that works well as an out-of-the-box default in production \u2013 without any configuration needed or dependencies (like Redis) required.\r\n\r\nThe tables should be setup out of the box with \"rails new\", but you should be able to avoid this using `--skip-solid-cache` or just `--skip-solid`.\r\n\r\nWork outstanding:\r\n\r\n- [ ] Add size-based trimming to prevent SC from filling up tiny DBs.\r\n- [ ] Release Solid Cache 1.0\r\n\r\ncc @djmb","comments":["Could this be a switch like `\u2014-cache=memory,solid,redis` like we have for `--database` and `\u2014-javascript` - or are we going for a \u201cSolidCache or setup yourself\u201d kinda direction?","Would `\u2014skip-solid` skip all the \u2018Solid\u2019 features e.g. Cache and Queues? (I\u2019m sure there\u2019s a Snake hiding somewhere here too)","As mentioned in person in Amsterdam, I don't think SolidCache is a good default because:\r\n\r\n  - It's not LRU but FIFO, so it needs a lot of space to thrive\r\n  - It needs a specialized configured backing DB to perform well.\r\n\r\n\r\nGiven that a very large part of users (especially people trying Rails for the very first time) are using a managed database with fairly low limits on the number of rows and total storage, it would be a big footgun.\r\n\r\nEven for users going the rented server + Kamal route, hosting a `memcached` with default settings will likely perform better and be less work than setting up a second MySQL or Postgres server with a tweaked config.\r\n\r\nAnd even for users going with SQLite, it means they are on a single server, so `FileStore` should be adequate.\r\n\r\nI agree it's annoying we can't have a cache store setup by default, but I don't think SolidCache is the solution.\r\n\r\nIf anything I'd be more in favor of enabling the `FileStore` as a default (even though it makes `cache.delete` inconsistent if you have multiple servers)","Here are the problems I'd like to solve:\n\n- The cache store should be auto-limit out of the box. A default file store cache will fill the disk until it's out of space. Solid Cache can be set with a conservative limit, like, say 1 week cache for starters.\n- The cache store should be multi-machine by default. Adding two dynos for the same app should share the same cache. That also rules out the file store, but would allow something like Redis.\n- The cache store should not require any additional moving parts than what's included by Rails by default. That makes Redis a tough fit.\n\nBut let's validate whether these design goals are compatible with the performance of envelopes of common, low-end VMs.\n\nI'd be surprised if you run into DB-related issues, given a low default Solid Cache limit, before you'd run out of other resources at the low end. If anything, the reverse may well be true. That more effective and longer lived caches makes your app perform better, even if it does lean on a constrained DB.\n\nBut this would be good to test! So let's open this issue to people who'd like to help us discern those factors. Try to setup Solid Cache on small VMs, run a bunch of benchmarks against an app that uses caching, and let's see where things might fall over.\n\nAppreciate the concerns you raise, @byroot! It's absolutely possible to add bad caching to the mix and make things worse. So we need to avoid that.","> * A default file store cache will fill the disk until it's out of space.\r\n\r\nThat's a good point It's something that we could try to improve though. Memsize would be complicated, but we could cap the number of entries, and LRU. Wouldn't be exactly ideal but doable.\r\n\r\n> The cache store should be multi-machine by default. Adding two dynos for the same app should share the same cache. That also rules out the file store\r\n\r\nYes and no. It only rule it out of you delete or overwrite existing keys, which IMO isn't great design since most caches are eventually consistent, but that's a much longer debate \ud83d\ude04 .\r\n\r\nThere is also the question of whether once you have multiple machine you aren't already past the point where it's OK to setup a dedicated cache service. I agree that Redis being a swiss army knife it requires a careful config, but Memcached is beyond trivial to setup.\r\n\r\nSo that's where I don't quite follow the direction. As I believe we both agree, defaults should try to optimize for the most common use case, people who know what they are doing shouldn't be afraid to change the defaults.\r\n\r\nSo I'm trying to put myself in the shoes of someone starting a new Rails app, that's not gonna handle a huge load right away. \r\n\r\nIn my mind they are either starting with a PaaS (e.g. Heroku, Fly, Render, etc):\r\n\r\n  - Databases there have a limited number of row and disk space.\r\n  - They can't be tuned for SolidCache\r\n  - It's very expensive to go on a higher tier.\r\n  - That's where they are likely to have multiple dynos relatively early, because of how weak each dyno is.\r\n\r\nOr they are starting with some cheap VPS or bare metal (e.g. capistrano or Kamal), in which case:\r\n\r\n  - They will likely stick with a single machine for a long time, making a local store acceptable.\r\n  - Even when they'll move to multiple machines, Memcached will be much easier to setup, monitor etc than one extra MySQL or PostgreSQL database.\r\n\r\nThat's why I don't see SolidCache fitting the bill for being the default. It's a bit too situational, and can turn into a footgun if it fills the limited database.\r\n","What are those limits? On say Heroku? If you're running a tiny app on a tiny dyno, you'll presumably also have few users, and thus not much data to cache? So I think these things go together, but let's explore.\n\nI think the current situation is not good. There's no default, persistent cache that won't fill up your disk. That's a problem we should fix. Solid Cache fixes that, but maybe in a way that demands too much of tiny DBs?\n\nOn small systems, though, I reckon you're more likely to be constrained with memory (Redis) and CPU (no cache) before disk (DB). Will explore some testing to validate this hypothesis.","> What are those limits? On say Heroku? \r\n\r\nFrom: https:\/\/elements.heroku.com\/addons\/heroku-postgresql\r\n\r\n| Name       | Row Limit | Size Limit | Price |   |\r\n|------------|-----------|------------|-------|---|\r\n| Mini       | 10k       | 1G         | $5    |   |\r\n| Basic      | 10M       | 10G        | $9    |   |\r\n| Standard 0 | None      | 64GB       | $50    |   |\r\n\r\n> I think the current situation is not good. [...] That's a problem we should fix.\r\n\r\nI totally agree with the premise, I just don't see a solution \ud83d\ude22.\r\n\r\n","Okay. If you're on that tiny tier, you may well not want to use that space for caching. But you could also just not. By default, Rails doesn't actually cache anything. \n\nI don't want to design primarily for such a poor setup. 1GB\/10K seems like limits that probably made sense for Heroku in 2009, and then just weren't ever updated since.\n\nA $7 DO Droplet has 25GB of storage, which could be used by a database.\n\nWe are never going to satisfy all the constraints. But a default setup that's multi-machine, uses disks over RAM, and supports both auto-trimming and encryption out of the box seems superior to what we have now.\n\nThen we can document what to do if you still want a large cache but live under the severe constraints of the smallest possible cloud VMs. Either way, even at 10K\/1GB, you're going to be fine for a long time.","But would love if anyone is ALSO interested in improving the filestore with trimming controls and encryption. Would be nice to have great options for both files, DB, and Redis\/memcached.","> I don't want to design primarily for such a poor setup.  [...] even at 10K\/1GB, you're going to be fine for a long time.\r\n\r\nNote that my apprehension isn't so much about being suitable for such small setups, but more about failure mode. My big worry is someone create a new Rails app, deploy it to one of these platforms (there are tons of tutorials for that), it works fine for a while until suddenly the DB is full and everything falls apart.\r\n\r\nIf it was only taking down the cache I wouldn't mind, but here it would also take down the app primary features.\r\n\r\nIt's really about \"unknown unknowns\", when a user opt-in to a feature, we can consider they are responsible for making sure it will work for their setup. When it's the default it's more our responsibility to make sure it won't bite them.\r\n\r\n> improving the filestore [...] encryption\r\n\r\nI have a big refactoring of Active Support Cache in the back of my mind for a couple years now, to solve a few perf problems but also make this sort of stuff easier. Not sure if \/ when I'll get around to work on it though.","Yeah filling up the DB with caching entries is a no go. Let's make this contingent on having a space-based limit in Solid Cache rather than just the current time-based limit. Then we can ensure that we only start the original setting at 100-250mb, leaving lots of room for data on a 1GB-capped DB. We will get that sorted before proceeding \ud83d\udc4c","But I would ALSO love to see a better file store with both auto-trimming and encryption. ","I wish I could have solid_cache, file_store_cache, and redis_cache in one app.\r\n\r\ne.g.\r\n\r\n```ruby\r\nRails.cache_storage(:redis).cache do ... end \r\nRails.cache_storage(:memcached).cache do ... end \r\n# or\r\nconfig.controller.cache_storage = :file\r\n```","@igorkasyanchuk Can you explain more why you need\/want to use multiple stores?","Solid Cache with SQLite seems like a better choice than Filestore (probably in most cases). \r\n\r\nSQLite seems more efficient at storage, it reads less from disk, more performant in my synthetic tests.\r\n\r\n@dhh \r\n> @igorkasyanchuk Can you explain more why you need\/want to use multiple stores?\r\n\r\n[composite_cache_store](https:\/\/github.com\/hopsoft\/composite_cache_store) explains really well why you might want to use multiple cache stores. ","Not sure that's worth the effort for most, but not opposed to let people use different stores in different blocks. Like we do with the multi-db setup. PDI.","@byroot \r\n> I have a big refactoring of Active Support Cache in the back of my mind for a couple years now, to solve a few perf problems but also make this sort of stuff easier. Not sure if \/ when I'll get around to work on it though.\r\n\r\nWould be interesting to hear what you would change? Somebody else might pick up this work (maybe me, I've been dabbling with rails cache related functionality last year).\r\n\r\n","> @igorkasyanchuk Can you explain more why you need\/want to use multiple stores?\r\n\r\nfor example, if I have a server with not a lot of RAM, but I still want to use Memcached for example + use file storage to do page\/action caching because I don't want to use a lot of RAM.\r\n","Is this a situation you've actually been in or a theory? Again, not necessarily against exploring it, but it's gotta be an extraction, not a speculation.","I would appreciate multi-backend for transition period (for migrating from Memcached to Solid Cache for example) to deploy code able to serve from old cache, but warw the new one to prevent missing the whole cache after cache storage switch. That would make transition to Solid Cache for example much smoother for some apps relying on cache a much, since cold cache could put a stress on DB (or other backend doing the hard work to warm the cache).\r\n\r\nOn the other side, it could be done manually by initializing cache store temporarily manually (like `new_cache = ActiveSupport::Cache::MyStore.new`) and handle the warmup manually. Could be at least mentioned in guides.","> Is this a situation you've actually been in or a theory? Again, not necessarily against exploring it, but it's gotta be an extraction, not a speculation.\r\n\r\nyes, for me was a real case. It was some time ago and my app was very simple, with many almost static pages and some stats that I wanted to cache in memory (for better performance). If in the future we can have such flexibility it would be great to be able to specify storage for caching.\r\n\r\nAnd thanks for your questions. ","Gotcha, yeah, I like the idea of a certain cache store governing a block. Please do look into that.","@igorkasyanchuk - you can set a different cache store for fragment caching already with `config.action_controller.cache_store = ....`. Would this have been enough for your situation?\r\n\r\n@simi - [this](https:\/\/gist.github.com\/djmb\/bd90a92d0b6cf4a6e44e94049c7352ec) is what we used in Basecamp to switch from Redis to Solid Queue. \r\n\r\nWe assigned X percent of traffic to Solid Cache or Redis by hashing the cache key and gradually shifted more traffic over over the course of a week. I don't know if it would work as a generic cache splitter - we were only using it for Rails fragment caching so there may be some cases or cache methods it doesn't work well with.","I've got some notes on how I'm planning to estimate the cache size [here](https:\/\/github.com\/rails\/solid_cache\/issues\/116#issuecomment-1875493230).\r\n\r\nI'd also like to introduce an indexed `key_hash` column which would be a 64 bit integer so the lookup index can be more compact (@byroot - this was something you suggested to me at Rails World). I think though that this is something that is only worth doing if we also drop the index on `key` which means losing support for `delete_matched`.\r\n\r\nWould that be acceptable, or it be a requirement to support it if Solid Cache was going to be the Rails default? \r\n\r\n`MemCacheStore` doesn't support it and `RedisCacheStore` does it by scanning all the keys which is not going to be a good idea with a large cache. I suppose we could have a similar slow `delete_matched` that checks batches of records, but that seems like something to be avoided.","> this was something you suggested to me at Rails World\r\n\r\nYup, that should quite drastically reduce your index size. \r\n\r\n> Would that be acceptable, or it be a requirement to support it if Solid Cache was going to be the Rails default?\r\n\r\nIMO `delete_matched` should be deprecated and removed from all stores. It's really a terrible pattern that most K\/V stores either can't handle at all, and do but with absolutely terrible performance. Even the file-store and in-memory store will do this with `O(N)` performance, so yeah it's a total anti-pattern if you ask me.\r\n\r\nI did ask on campfire why it was there though, and @dhh and @jeremy suggested a few use cases like clearing cache in development, and clearing a customer cache. IMO the former is better handled by clearing the entire cache, and the later by just throwing the decryption key given your cache entries are encrypted.\r\n\r\nAll this to say I think `delete_matched` should be deprecated in 7.2, and removed in 8.0.","> I did ask on campfire why it was there though, and @dhh and @jeremy suggested a few use cases like clearing cache in development, and clearing a customer cache. IMO the former is better handled by clearing the entire cache, and the later by just throwing the decryption key given your cache entries are encrypted.\r\n\r\nI'm going to keep the `key` column in the `solid_cache_entries` table, but leave it unindexed, so we can confirm there wasn't a cache collision (not impossible with 64 bit hashes and very large caches). So if someone was motivated they can add an index on key and implement `delete_matched` themselves.\r\n\r\n> All this to say I think delete_matched should be deprecated in 7.2, and removed in 8.0.\r\n\r\nSounds good! Another point in favour of this is that `delete_matched` implementations are not consistent anyway - `MemoryStore` and `FileStore` use regex, `RedisCacheStore` uses Redis globs and the current `SolidCacheStore` implementation uses a SQL `LIKE`.","> I'm going to keep the `key` column in the `solid_cache_entries` table, but leave it unindexed, so we can confirm there wasn't a cache collision (not impossible with 64 bit hashes and very large caches).\r\n\r\nIf that is a concern, you can store 128 bit hashes in a pair of bigint (int64) columns. \r\n\r\nBut yes, keeping the key doesn't cost much as long as it's not indexed, so why not."],"labels":["railties"]},{"title":"Solid Queue should be the default Active Job backend for Rails 8","body":"[Solid Queue](https:\/\/github.com\/basecamp\/solid_queue) should be the default Active Job backend for Rails 8 since it supports all our major databases and enables someone to run jobs in production without either additional dependencies (like Redis), using database-specific backends (like Good Job), or using commercially-restrained backends (like Sidekiq).\r\n\r\nThe necessary tables should be setup by default as part of rails new. The user should not have to do any configuration whatsoever to be able to deploy their application in production with Solid Queue as the job runner. We also need to figure out a standardized setup for running the worker jobs, especially as part of the default Dockerfile setup.\r\n\r\nYou should be able to avoid this using `--skip-solid-queue` or just `--skip-solid`.\r\n\r\ncc @rosa","comments":["\ud83d\udc4d \ud83d\udc4d  Feel free to assign it to me. ","Do not forget to add required database specificity.. like running full vacuum in postgresql to avoid full bloated table (simple vacuum is not enough for intensity table queue usage ) and MySQL optimize for MySQL database.","@mtparet That's a good thing to perhaps have general ergonomics for, but it's out of scope for this.","> We also need to figure out a standardized setup for running the worker jobs\r\n\r\nI don't know if this is the spot for this but what about using Docker Compose? It was made for running 1 or more containers associated with a specific project. Here's a working example https:\/\/github.com\/nickjj\/docker-rails-example that runs Postgres, Redis, Puma, Action Cable, Sidekiq, esbuild and Tailwind. Everything is spun up with a single `docker compose up` command. Nothing needs to be installed on the host except for Docker \/ Docker Compose.\r\n\r\nIt could easily be modified to run whatever Solid Queue processes are needed instead of Sidekiq.","Would you include https:\/\/github.com\/rails\/rails\/issues\/26045 in the Rails 8 milestone?","Do you know if this will be accompanied by Mission Control or not necessary?\r\nand if not would Mission Control be released seperetly by then?\r\n\r\nThanks ","#26045 looks different now that we can offer transactional guarantees by default. Need to consider the upgrade path closely, though. But don't want to cut people off from the significant benefit of transactional guarantees if their setup allows it (like a default Solid Queue installation does).","I'd like to see Mission Control by default as well, yes. But let's see if we can get it good enough in time for Rails 8. First we gotta release it \ud83d\ude04","Don't know if this is helpful but in Elixir, we can use Oban for queues\/jobs. All jobs are persisted in Postgres. https:\/\/github.com\/sorentwo\/oban\r\n\r\nMaybe some good ideas could be plucked from Oban!","Hi! I'm a Rails newbie. I just added Solid Queue to my 7.1 rails project, the experience was greatly simple.\r\nThe downside is that in the development environment, all the queries are logged, and now my console is full of Solid queue polling queries.\r\nIt would be great if you document how we could filter those queries, or even better if it is done by default.","@kidandcat you can silence these with [the `silence_polling` setting](https:\/\/github.com\/basecamp\/solid_queue?tab=readme-ov-file#other-configuration-settings). I think having this set to `true` by default makes sense, I'll look into it!","Since we now have a default backend for jobs, maybe we should add a rails command for it? We have one for server and console, but not one for the workers. Having a `rails w` seems more friendly than `bundle exec rake solid_queue:start` when you are already used to running `rails s` and `rails c`\r\n\r\n```\r\naliases = {\r\n  \"g\"  => \"generate\",\r\n  \"d\"  => \"destroy\",\r\n  \"c\"  => \"console\",\r\n  \"s\"  => \"server\",\r\n  \"db\" => \"dbconsole\",\r\n  \"r\"  => \"runner\",\r\n  \"t\"  => \"test\"\r\n}\r\n```","Great point @brenogazzola. Yes, we should definitely have that. And allow any of the job backends to hook into it.","I've never taken a look at this part of Rails, but I found the `server_command.rb` file and I can take a stab at doing something similar for the worker if no one is already planning to.","Hello, I am having the queuing backend system as delayed_job for now. I am planning to migrate to either solid_queue or sidekiq. To decide the queuing backend system, what I need to consider?","@AnushatRently You will have better chance of getting an answer to this question by asking in the official forum, since it's more visible:\r\n\r\nhttps:\/\/discuss.rubyonrails.org\/","Hey. I have been searching a lot that you can we handle the CRON jobs using the Solid Queue but Unfortunately did not get any viewpoint from any Resource from any where. As I am shifting my application from Sidekiq to Solid Queue and I have many background jobs that automatically trigger themselves using the CRON.\r\nFor Example:\r\nupdate_all_calls_data:\r\n    every: '1h'\r\n    class: Schedules::UpdateAllCallsDataJob\r\n As I am shifting from solid Queue so I also want to control all my jobs using the Solid Queue at that moment.\r\n \r\n And also a second thing that you have mentioned that **cron-like tasks are coming very soon.** I just want to know that when cron-like tasks will be available?\r\n\r\n","Hey @devsaimsohail, no ETA on when they'll be ready, but you can follow https:\/\/github.com\/basecamp\/solid_queue\/issues\/104 to be notified when that happens! ","> Hey @devsaimsohail, no ETA on when they'll be ready, but you can follow [basecamp\/solid_queue#104](https:\/\/github.com\/basecamp\/solid_queue\/issues\/104) to be notified when that happens!\r\n\r\nI am just Curious to know Does whenever Gem works with Solid Queue?\r\n","> Does whenever Gem works with Solid Queue\r\n\r\nWhenever has access to your Rails application via rake or the rails runner, so you can queue up jobs using that (its not specific to solid_queue). "],"labels":["activejob"]},{"title":"Setup Kamal by default for new applications","body":"[Kamal](https:\/\/kamal-deploy.org) has given us the power to easily deploy Rails applications anywhere without any commercial entanglements. This should be the default path we recommend for new people getting started with Rails, so it should be configured by default. This basically just means adding kamal to the gemfile by default and running kamal init during setup. You should be able to turn this off using `--skip-kamal`.","comments":["cc @djmb ","Awesome \ud83d\udc4d","this is great, just wish there is official use case example of only using 1 server\r\n\r\nhere is a good one https:\/\/nts.strzibny.name\/deploying-rails-single-server-kamal\/","If Kamal will be included by default, I think it would be nice if there is an official implementation guide as well, incorporating production level stuff. What would a production level implementation look like?\r\n\r\nI'm still very curious how you set up the databases in 37signals. Do you have any tools that automate MySQL backups for example? Maybe using XtraBackup along with something else for retention policy, etc.\r\n\r\nI mean, if Rails has a opinionated way of doing so many things, why couldn't you recommend something that works for most users by default? This would make developers feel more confident. Disaster recovery... etc. It would clear up many doubts","Would be happy to see someone work on that. But it\u2019s out of scope for this feature to also teach people everything they would ever have to know about running databases in production. Kamal merely facilitates the easy deployment of such systems. ","I'm glad to hear you're open to that, although there's a problem with just anyone documenting that sort of thing. While I would love to contribute to that, I wouldn't be the right person to do it because I simply don't have the same experience on that scale to recommend one approach over another. One thing is theory and another is the real world that is sustained by years of baggage, which at least at my young age I can't have haha.\r\n\r\nI just wanted to show the need and that it would be great if there was some minimal convention or recommended Rails implementation procedure safe enough for most. I don't imagine something too complicated either, maybe [this comment](https:\/\/github.com\/basecamp\/kamal\/discussions\/106#discussioncomment-5555234) from @jeremy can serve as a starting point for the general idea of the database using Kamal.\r\n\r\nBefore Kamal the answer for the database was simple, because the implicit default path was just Heroku (or recently Fly.io or Render). But if the path will now be Kamal, what is the answer to that question?\r\n\r\nIn my case I use Kamal just for the application and PostgreSQL (on a server without Kamal) for my side projects and could not come up with a reliable way to run backups within Kamal and send them to S3. That was the reason that led me to run it separately, using Ansible to automate it, with recurring full and incremental backups with pgBackRest sent to Cloudflare R2 and a retention policy configuration. Just as I found my way, many other people need to solve the same thing for Rails and are reinventing the wheel. I tried the same thing with Percona MySQL to see if I would be able to do it with Kamal, I succeeded but using a custom script and a somewhat more complicated configuration to achieve the same thing. I'm sure there is some simpler way to do it that at least I don't know about at the moment. Ultimately, I imagine the ultimate goal is to describe the entire application infrastructure in Kamal without having to use so many other tools, at least in the beginning when things are simpler.\r\n\r\nWith the rest, of course I could contribute by making a guide. The question is the final level of detail, ex: mention services like Cloudflare or some low-cost provider like Contabo in the process or not? So I understand that all these nuances have influenced why there is no official guide so far.\r\n\r\nI would be happy to contribute if you could give me some baseline guidelines and help me address those little concerns. I really think it would add a lot of value.\r\n\r\nThis is a very recurrent problem that exists in the community, you just need to read Kamal's Discord to notice it.","Rails as a framework is focused on developer's happiness and productivity. It should not include DevOps Day 2 operations. Providing a great DX is important. I can imagine doing:\r\n\r\n```ruby\r\nrails deploy staging\r\n```\r\n\r\nor \r\n\r\n```ruby\r\nrails deploy perf\r\n```\r\n\r\nto work on performance issues. It just deploys and I can give demos and iterate on the MVP. As a one person framework, it frees up my time in doing time consuming and beyond my skillset DevOps work. Eventually, DevOps team will use Cloud-Init, Ansible, Packer, Terraform etc to deploy to production, setup automated backups etc. As a developer, all I care is deploying as often as I can and iterate on the MVP.\r\n\r\n","@brunoprietog Would love to have a much more in-depth manual for Kamal! If you're up for it, please do pursue that in the kamal repos. Then we can link to those instructions from a Rails tutorial that talks broadly about deployment.","I think SSL setup out the box would be a great add here, or at least boilerplate for it commented out.  Figuring that out inside of a real app was painful.","Going to solve the SSL question via Thruster \ud83d\udc4d"],"labels":["railties"]},{"title":"Add a bug report for Action Cable","body":"This was the first approach that came to mind, maybe would be interesting to demonstrate using the built-in [TestHelper](https:\/\/edgeapi.rubyonrails.org\/classes\/ActionCable\/TestHelper.html).\r\n\r\nThere is probably some work to get this passing in CI, similar to #49527, too.","comments":["Sorry for the CI failure, I reverted the bk-config change until the 3.3 image become available.","> Sorry for the CI failure, I reverted the bk-config change until the 3.3 image become available.\n\nNo worries, thanks for taking a look and the recent work to CI!\n\nThis PR is failing mainly because it's not configured to use the remote chrome docker container during CI, but that is a unique case where we wouldn't expect a contributor to require such a setup, possibly.","Ok, I have this passing locally and using buildkite-config.\r\n\r\nIn CI, this will require we change the guides step to use a service which has a chrome container available, like av:\r\nhttps:\/\/github.com\/rails\/buildkite-config\/blob\/1965f6690e7d04332224c20961d008b65b53d2f5\/docker-compose.yml#L111-L119\r\n\r\nI'm still wondering if is the right test though, so waiting for feedback to proceed.\r\n\r\nBut here are just some random thoughts.\r\n\r\n* This feels like it could\/should be a railtie test\r\n* There are other Action Cable test cases we could use that don't require JavaScript\r\n* Users are probably also using the JS client, so this test case kind of makes sense\r\n  * It's a full integration test of the client and server\r\n* Do most bug reports need all of that? Probably not\r\n  * We could make this a guide (remove the remote chrome steps)\r\n  * Then the bug report could just test the server backend\r\n  \r\nI can sense some \"not every framework needs a bug report\" and \"we don't get that many action cable bug reports anyways\", but maybe that is just my ego.  ","Great work! This is really helpful.\r\n\r\nHowever, I hit a problem while trying to run it: `This version of ChromeDriver only supports Chrome version 109`. And it's gonna appear all the time with Selenium.\r\n\r\nThat's why I'd suggest using Cuprite instead (I checked\u2014works perfectly). My diff:\r\n\r\n```diff\r\n+ require \"capybara\/cuprite\"\r\n\r\n  class BugTest < ActionDispatch::SystemTestCase\r\n-   options = {\r\n-    browser: ENV[\"SELENIUM_DRIVER_URL\"] ? :remote : :chrome,\r\n-     url: ENV[\"SELENIUM_DRIVER_URL\"] ? ENV[\"SELENIUM_DRIVER_URL\"] : nil\r\n-   }\r\n-   driven_by :selenium, using: :headless_chrome, options: options\r\n+   driven_by :cuprite, options: { headless: ENV[\"HEADY\"] != \"true\" } \r\n\r\n```\r\n\r\nAs for CI, maybe, we can install Chrome within a [base image](https:\/\/github.com\/rails\/buildkite-config\/blob\/1965f6690e7d04332224c20961d008b65b53d2f5\/Dockerfile)? This way, we can avoid dealing with remote URLs (definitely not needed for the repro script).\r\n\r\nI believe, Action Cable reproduction scripts mostly makes sense for end-to-end scenarios. The only alternative to browser-based testing is to use a custom (Ruby) Action Cable (or WebSocket) client (like [wsdirector](https:\/\/github.com\/palkan\/wsdirector)). Though that seems to be out of the Rails scope."],"labels":["docs"]},{"title":"Rails 7.1: ActiveRecord polymorphic raise error after add query_constraints","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\nI got an error when I try to use Composite Primary Keys in Rails 7.1. When I add query_constraints to the model, the polymorphic won't work any more.\r\nIs it a bug or may I do something wrong? \r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n```ruby\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  # Activate the gem you are reporting the issue against.\r\n  gem \"rails\", \"~> 7.1.0\"\r\n  gem \"sqlite3\"\r\n  gem \"debug\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"logger\"\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :comments do |t|\r\n    t.bigint :ts, null: false\r\n    t.bigint :nonce, null: false\r\n    t.string :owner_type, null: false\r\n    t.string :owner_id, null: false\r\n\r\n    t.timestamps\r\n  end\r\n\r\n  create_table :articles do |t|\r\n    t.timestamps\r\n  end\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  query_constraints :ts, :nonce\r\n  belongs_to :owner, polymorphic: true\r\nend\r\n\r\nclass Article < ActiveRecord::Base\r\n  has_many :comments, as: :owner\r\nend\r\n\r\narticle = Article.new\r\narticle.save!\r\narticle.comments\r\n```\r\n\r\n### Expected behavior\r\n<!-- Tell us what should happen -->\r\nIt should work well and won't raise error\r\n### Actual behavior\r\n<!-- Tell us what happens instead -->\r\nraise error\r\n```ruby\r\n~\/.rbenv\/versions\/3.2.2\/lib\/ruby\/gems\/3.2.0\/gems\/activerecord-7.1.2\/lib\/active_record\/reflection.rb:799:in `derive_fk_query_constraints': The query constraints on the `Comment` model does not include the primary key so Active Record is unable to derive the foreign key constraints for the association. You need to explicitly define the query constraints for this association. (ArgumentError)\r\n\r\n            raise ArgumentError, <<~MSG.squish\r\n```\r\n### System configuration\r\n**Rails version**: 7.1.2\r\n\r\n**Ruby version**: 3.2.2\r\n","comments":["Working example:\r\n\r\n```ruby\r\nclass Comment < ActiveRecord::Base\r\n  belongs_to :owner, polymorphic: true\r\nend\r\n\r\nclass Article < ActiveRecord::Base\r\n  has_many :comments, as: :owner, query_constraints: [:ts, :nonce]\r\nend\r\n```\r\n\r\nPlease refer the [docs](https:\/\/guides.rubyonrails.org\/association_basics.html) ","@bparanj I'm afraid this is not a correct configuration to make the setup work.  `query_constraints:` option in associations can be seen as a \"composite foreign key\" and it won't make sense to say that the foreign key for the `article#comments` association is `[:ts, :nonce]` as there are no such fields on `Article`.\r\n\r\nI think the error message could be improved as it is not particularly clear which association needs attention and it explicitly asks for `query_constraints:` argument to be provided while it's not the only option here.\r\n```\r\nThe query constraints on the `Comment` model does not include the primary key so Active Record is unable to derive the foreign key constraints for the association. You need to explicitly define the query constraints for this association.\r\n```\r\nWhat it intends to tell is that because `Comment` model has a query constraints defined by default it expects the model to be queried by the composite key which means it tried to derive a composite foreign key automatically. Since it's not possible to reliably derive foreign key to match `[:ts, :nonce]` query constraints it raises an error. In order to prevent Rails from guessing the foreign key we could set it manually to preserve the non-composite primary key behavior:\r\n\r\n```ruby\r\nclass Comment < ActiveRecord::Base\r\n  query_constraints :ts, :nonce\r\n  belongs_to :owner, polymorphic: true, foreign_key: :owner_id\r\nend\r\n\r\nclass Article < ActiveRecord::Base\r\n    has_many :comments, as: :owner\r\nend\r\n\r\narticle = Article.create!\r\ncomment = Comment.create(ts: 1, nonce: 111, owner: article)\r\n\r\nraise \"owner is not the article\"  unless comment.owner == article\r\n\r\ncomments = article.comments.to_a\r\n\r\nraise \"comments are different\" unless [comment] == comments\r\n```\r\n\r\nBut this brings a question whether Rails could fallback to a default non-CPK `foreign_key: :owner_id` configuration instead of raising an error? In this case that would have worked but I believe the reason for raising an error was to at all cost avoid silently choosing a wrong foreign key and leaving an association in a broken or simply wrong state even if it works. We can have a closer look on it after the holidays to see if Rails could continue follow the convention in this case without risking to configure the association in a wrong way.\r\n\r\n@azhaizhai Let me know if the suggested `foreign_key: :owner_id` configuration doesn't work as you expected. Thanks!\r\n \r\n","@nvasilevski `foreign_key: :owner_id` worked for me as expected. Thank you!"],"labels":["activerecord"]},{"title":"Add `exclusion_constraint_exists?` and `unique_constraint_exists?` helpers","body":"Exclusion constraints were added in https:\/\/github.com\/rails\/rails\/pull\/40224 and unique constraints were added in https:\/\/github.com\/rails\/rails\/pull\/46192.\r\n\r\nBoth lacks an ability to check if the constraint already exists, to make, for example, adding constraints idempotent. \r\nThis ability already exists for check constraints, for example (same for foreign keys, indexes etc).","comments":[],"labels":["activerecord"]},{"title":"Introduce predicate definition when defining scopes","body":"### Motivation \/ Background\r\n\r\nCreates parity between scopes and instances of records, similar to how [enums](https:\/\/guides.rubyonrails.org\/active_record_querying.html#enums) automatically create instance methods that query whether the model belongs to that scope.\r\n\r\n```ruby\r\nclass Book < ApplicationRecord\r\n  scope :out_of_print, -> { where(out_of_print: true) }, predicate: true\r\n  # Creates instance method named `within_out_of_print?`\r\n\r\n  scope :in_print, -> { where(out_of_print: false) }, predicate: :in_print\r\n  # Creates instance method named `in_print?`\r\nend\r\n```\r\n\r\n```irb\r\nirb> Book.out_of_print.first.within_out_of_print?\r\n=> true\r\n\r\nirb> Book.in_print.first.in_print?\r\n=> true\r\n```\r\n\r\n### Detail\r\n\r\nAdds `**options` argument to `scope` definition, allowing caller to optionally pass `predicate: true` or `predicate: :desired_predicate_name`.\r\n\r\nThe goal is to keep this feature opt-in to avoid automatically creating a method for each and every scope.\r\n\r\nAdditionally, we default to `within_<scope_name>` as to not conflict with the instance methods generated by [enums](https:\/\/guides.rubyonrails.org\/active_record_querying.html#enums)\r\n\r\n### Additional information\r\n\r\nThis should be compatible with [Composite Primary Keys](https:\/\/guides.rubyonrails.org\/active_record_composite_primary_keys.html), but existing fixtures did not exist (as far as I could tell).\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["One issue with this feature is it's susceptible to the N + 1 query problem.\r\n\r\n```ruby\r\nclass Book < ApplicationRecord\r\n  scope :out_of_print, -> { where(out_of_print: true) }, predicate: true\r\nend\r\n\r\ndef index\r\n  @books = Book.all\r\nend\r\n``` \r\n\r\n```erb\r\n<% @books.each do |book| %>\r\n  <%# \u2b07\ufe0f This will execute a query for each book %>\r\n  <p>Out of print: <%= book.within_out_of_print? %><\/p>\r\n<% end %>\r\n```  ","@stevepolitodesign for the N+1 case, we could be getting into something like a `Book.all.with_predicate(:out_of_print)` to potentially preload the predicate as a `Hash[record_id] # => query result` as partly explored in something like https:\/\/github.com\/seejohnrun\/prelude"],"labels":["activerecord","docs"]},{"title":"[ActionMailbox] Replace test\/dummy with railtie-like test harness","body":"See #50427 for context.","comments":[],"labels":["actionmailbox"]},{"title":"[ActionText] Replace test\/dummy with railtie-like test harness","body":"See #50427 for context.","comments":[],"labels":["actiontext"]},{"title":"[ActiveStorage] Replace test\/dummy with railtie-like test harness","body":"## Motivation\r\n\r\nThe dummy apps were last updated in #47259 and previously in #42286.\r\n\r\nThere is an interest from inside the core team to get rid of them.\r\n\r\n> In my option, It doesn't make sense to upgrade dummy apps inside the framework every time we change the framework itself. Probably those dummy apps get outdated daily, and it is very likely we will change Rails in a way that would break those frameworks but the test will not catch because the dummy app is outdated.\r\n> \r\n> If you want to work in that direction, it would be great.\r\n\r\n","comments":["This PR makes sense. Let's move it forward. One thing that you might want to look is if there are any tests that should be moved to the railties folder in the style of: generate a new app, configure those things this way, see if the feature works."],"labels":["activestorage"]},{"title":"Add `to_sql` support for calculation methods like `count`","body":"### Motivation \/ Background\r\n\r\nAs the calculation methods directly return a result, it's not possible to call `to_sql` on the query.\r\n\r\nBy allowing `to_sql` to take an operation and column name as argument we can return the SQL:\r\n\r\n```ruby\r\nUser.all.to_sql(:count)\r\n# => \"SELECT COUNT(*) FROM `users`\"\r\n\r\nUser.all.to_sql(:maximum, :id)\r\n# => \"SELECT MAX(`users`.`id`) FROM `users`\"\r\n```\r\n\r\n### Additional information\r\n\r\nCombining `count` with a `group` is not yet supported.\r\nI'd like to add the same functionality to `explain`.\r\nRelated issue adding `:delete_all`: https:\/\/github.com\/rails\/rails\/pull\/37975\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Improve Action Text System Test coverage","body":"### Motivation \/ Background\r\n\r\nIntroduce the `ActionText::RichTextEditorTest` to exercise Action Text's integration with Active Storage. First, assert that Action Text renders an Active Storage blob preview of the image within the `<trix-editor>` element prior to persisting the rich-text record. Next, assert that Active Storage renders the uploaded file within the rendered rich-text content.\r\n\r\n### Detail\r\n\r\nIn addition to expanding System Test coverage, this commit also alters the existing `ActionText::SystemTestHelperTest` coverage to utilize Capybara's built-in [:element][] selector as an alternative to CSS. The `:element` selector supports arbitrary keyword arguments as HTML attribute filters. For example, `input: true` as a filter translates to asserting the presence of any `[input]` attribute. Similarly, it enables assertions with Ruby strings instead of interpolating Ruby strings **into** CSS selectors.\r\n\r\n[:element]: https:\/\/rubydoc.info\/github\/teamcapybara\/capybara\/master\/Capybara\/Selector\r\n\r\n### Additional information\r\n\r\nRelated to https:\/\/github.com\/rails\/rails\/pull\/49527 and https:\/\/github.com\/rails\/rails\/pull\/46807.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["actiontext"]},{"title":"Fix ensuring 7.2 defaults listed in configuring","body":"Previously, because the 7.2 header was missing from configuring.md, railspect was not checking that newly introduced 7.2 framework defaults are listed.\r\n\r\nThis commit adds the header to ensure they get checked, and then also fixes an issue that occurs if a versioned section has no defaults listed.\r\n","comments":[],"labels":["docs"]},{"title":"Change `active_model.i18n_customize_full_message` default from `false` to `true`","body":"### Motivation \/ Background\r\n\r\nFollow-up to #32956 and #35789\r\n\r\nThe introduction of this configuration in #32956 stated that:\r\n\r\n> The goal of this PR is to make it easier for an app to transition from\r\na #{attribute} #{message} to a #{message}, full_message error format.\r\n\r\nHowever, because the default value was set to `false`, this feature was difficult to discover.\r\n\r\nMoving forward, consumers will be able to [override the format of an individual attribute](https:\/\/guides.rubyonrails.org\/configuring.html#config-active-model-i18n-customize-full-message) by default.\r\n\r\n```yml\r\nen:\r\n  activemodel: # or activerecord:\r\n    errors:\r\n      models:\r\n        person:\r\n          # Override the format for all Person attributes:\r\n          format: \"Invalid %{attribute} (%{message})\"\r\n          attributes:\r\n            age:\r\n              # Override the format for the age attribute:\r\n              format: \"%{message}\"\r\n              blank: \"Please fill in your %{attribute}\"\r\n```\r\n\r\n### Detail\r\n\r\n`config.active_model.i18n_customize_full_message` defaults to `true` for `config.load_defaults 7.2` and above\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activemodel","railties","docs"]},{"title":"Add condensed #inspect for Pool, Adapter, Config","body":"### Motivation \/ Background\r\n\r\nPreviously, it was very easy to accidentally leak a database password in production logs if an error ends up calling inspect on a ConnectionPool or an individual connection (Adapter). This is due to the default `#inspect` output for Pools and Adapters being unnecessarily large, and both currently including passwords (through the DatabaseConfig of a Pool, and the internal configuration of an Adapter).\r\n\r\n### Detail\r\n\r\nThis commit addresses these issues by defining a custom `#inspect` for ConnectionPool, AbstractAdapter, and DatabaseConfig. The condensed `#inspect` only includes a few valuable fields instead of all of the internals, which prevents both the large output and passwords from being included.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Make the Relation -> Model delegation stricter","body":"In https:\/\/github.com\/rails\/rails\/pull\/50395 I noticed lots of methods are delegated from `Relation` to the model. The intent of this code is to allow using use defined class methods like scopes.\r\n\r\nBut because of this autmated delegation it allowed calling any `ActiveRecord::Base` class method on a `Relation`, which in itself may be desireable, however we very wastefully define the delegator on the first call, and worse we wrap it with a current scope setter.\r\n\r\nSo I think we should be more strict about it.\r\n\r\nNB: this of course breaks a tons of test, so I need to find more time to finish this, and it likely need a config flag and a deprecation notice of some sort. Or alternatively we can just accept this API, but delegate all the `AR::Base` class methods eagerly and without the scoping overhead. TBD.","comments":["Note to self:\r\n\r\n  - It's hard to know for sure the list of methods in `AR::Base` that require this scoped delegation\r\n  - We should make sure that if we get this wrong it end up in `NoMethodError` or in a scoped delegate, never in an unscoped-delegate, as it could lead to unscoped queries leaking or deleting data by accident (would be super bad).\r\n\r\n","Makes sense","perhaps relevant: #50760","> perhaps relevant: #50760\r\n\r\nYeah, it's in https:\/\/github.com\/rails\/rails\/pull\/50395, which in a way is similar, that I noticed this problem."],"labels":["activerecord"]},{"title":"[FIX] For Sqlite3 db:drop command output","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nFixes #50391 \r\n\r\nWhille executing command, in case when database already dosen't exist.\r\n\r\n```shell\r\nbin\/rails db:drop\r\nDropped database 'storage\/development.sqlite3'\r\nDatabase 'storage\/test.sqlite3' does not exist\r\n```\r\n\r\nIt is observed that for the non-existing database `storage\/development.sqlite3` on the disk, the command output displays `Dropped database 'storage\/development.sqlite3'`. Instead, it should state `Database 'storage\/development.sqlite3' does not exist`.\r\n\r\n---\r\nIn the ActiveRecord SQLite3 adapter code at \r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/462e8e8b1c74d46a78e7077c5b07bfbc6fab08b0\/activerecord\/lib\/active_record\/connection_adapters\/sqlite3_adapter.rb#L31-L39\r\n\r\nIt appears that every time a new connection to SQLite3 is established, an attempt is made to create a database due to the default configuration settings.\r\n\r\nThis behavior is defined in the SQLite3 Ruby gem code, specifically at \r\n\r\nhttps:\/\/github.com\/sparklemotion\/sqlite3-ruby\/blob\/302e9c0328bff2bb04e1d4a54614140ca06f3648\/lib\/sqlite3\/database.rb#L91-L101\r\n\r\nYou can also refer to the relevant documentation [here](https:\/\/rubydoc.info\/gems\/sqlite3\/SQLite3%2FDatabase:initialize), which outlines supported permission options.\r\n\r\nEach time a new connection to the database is established (used for dropping the database or executing other commands), the connection first attempts to create a database and then proceeds to drop it.\r\n\r\nAn issue arises when an exception is raised in the code snippet below, as it doesn't work as intended. The SQLite3 database is created with the default mode of `READWRITE | CREATE`. Consequently, a new database is created every time, even if it already exists. \r\n\r\n```ruby\r\nrescue Errno::ENOENT => error \r\n   if error.message.include?(\"No such file or directory\") \r\n     raise ActiveRecord::NoDatabaseError \r\n   else \r\n     raise \r\n   end \r\n end \r\n```\r\n\r\n### Detail\r\n\r\nIn this PR, I have made a modification to the default mode of SQLite3 from `READWRITE|CREATE` to just `READWRITE`. Consequently, if the database does not exist, it will now raise an exception `SQLite3::CantOpenException`.\r\n\r\nThis adjustment aligns with a similar approach used for MySQL and Postgres. Specifically, when establishing a connection, the database is not created automatically; instead, it is handled separately to ensure consistent behavior across different database systems.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n1. Default Mode in Sqlite3: https:\/\/rubydoc.info\/gems\/sqlite3\/SQLite3%2FDatabase:initialize\r\n2. Why Sqlite3 have not made it READWRITE as default mode?: https:\/\/github.com\/sparklemotion\/sqlite3-ruby\/pull\/174\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [ ] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #50391 50391]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["CI is failing for legitimate reasons:\r\n\r\n```\r\nError:\r\nPrimaryKeysTest#test_update_counters_should_quote_pkey_and_quote_counter_columns:\r\nActiveRecord::NoDatabaseError: Database not found\r\n    \/rails\/activerecord\/lib\/active_record\/connection_adapters\/sqlite3_adapter.rb:34:in `rescue in new_client'\r\n    \/rails\/activerecord\/lib\/active_record\/connection_adapters\/sqlite3_adapter.rb:31:in `new_client'\r\n    \/rails\/activerecord\/lib\/active_record\/connection_adapters\/sqlite3_adapter.rb:732:in `connect'\r\n    \/rails\/activerecord\/lib\/active_record\/connection_adapters\/sqlite3_adapter.rb:741:in `reconnect'\r\n    \/rails\/activerecord\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:692:in `block in reconnect!'\r\n    \/rails\/activesupport\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n```","@byroot , I'm having difficulty with the test case. I've fixed most of the errors, but some are still failing. Could you please help me fix the test?"],"labels":["activerecord","railties"]},{"title":"Treat `as: :html` tests request params as `:url_encoded_form`","body":"### Motivation \/ Background\r\n\r\nCloses [#50345][]\r\n\r\n### Detail\r\n\r\nFirst, handle the exception mentioned in [#50345][]:\r\n\r\n```\r\nBugTest#test_params_with_htm_content_type:\r\nNoMethodError: undefined method `to_html' for {:name=>\"Muad'Dib\"}:Hash\r\n    ...\/actionpack\/lib\/action_dispatch\/testing\/request_encoder.rb:39:in `encode_params'\r\n    ...\/actionpack\/lib\/action_dispatch\/testing\/integration.rb:251:in `process'\r\n```\r\n\r\nCalls with `as: :html` result in a `NoMethodError` because\r\n`Hash#to_html` does not exist.\r\n\r\nPassing `as: :html` implies that the request parameters will come from a\r\n`POST` body encoded as `text\/html`. That isn't entirely true -- browsers\r\nwill encode `POST` parameters as with the `Content-Type:` header set to\r\neither [application\/x-www-form-urlencoded][] or [multipart\/form-data][].\r\nThis commit skips setting the `CONTENT_TYPE` Rack header when processed\r\nwith `as: :html`.\r\n\r\nTo account for that, extend the `RequestEncoder` constructor to accept a\r\n`content_type `argument to use when provided. When omitted, continue to\r\nfall back to the provided MIME type. Extend the default `:html` encoder\r\nconfiguration to default to submitting with `Content-Type:\r\nx-www-form-urlencoded`.\r\n\r\n[#50345]: https:\/\/github.com\/rails\/rails\/issues\/50345\r\n[application\/x-www-form-urlencoded]: https:\/\/developer.mozilla.org\/en-US\/docs\/Learn\/Forms\/Sending_and_retrieving_form_data#the_post_method\r\n[multipart\/form-data]: https:\/\/developer.mozilla.org\/en-US\/docs\/Learn\/Forms\/Sending_and_retrieving_form_data#the_enctype_attribute\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["@rafaelfranca could you review this, since you've reviewed and merged https:\/\/github.com\/rails\/rails\/pull\/47144?"],"labels":["actionpack"]},{"title":"[Fix #49520] `strict_loading` violations ignored on `has_many` with query methods","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nFixes https:\/\/github.com\/rails\/rails\/issues\/49520\r\n\r\n### Detail\r\n\r\nUpdates `ActiveRecord::Relation#exec_queries` to raise or log on a strict loading violation. This gets called when association queries are executed with query methods.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Fix issue with destroy after RestartParentTransaction and SavepointTransaction rollback","body":"\r\n\r\n<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request has been created in order to fix issue #50338.\r\n\r\n### Detail\r\n\r\nThis Pull Request provides a working solution for the destroy function for the cases of RestartParentTransaction and SavepointTransaction. \r\n\r\nPreviously, the destroy function was not properly removing entries from the database for the RestartParentTransaction and SavepointTransaction. If @_trigger_destroy_callback is true at the beginning of the destroy function, destroy_row would never be invoked.\r\n\r\nThis Pull Request will ensure destroy_row is invoked when @_trigger_destroy_callback is true at the beginning of the destroy function. This will remove the corresponding row from the database. Otherwise, if @_trigger_destroy_callback is false, destroy_row is only invoked if persisted? is true.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["I suggest a fix to your branch, here is the pull request to review: https:\/\/github.com\/mguan2020\/rails\/pull\/1","@rubyrider Thank you very much for the fix! I have merged your fix into this PR.","thanks! ","@rubyrider I have squashed my changes into a single commit. ","> @rubyrider I have squashed my changes into a single commit.\r\n\r\nI think keeping that commit would give him co author contributing credit?","@auvipy thank you for your concern dear, but this is totally fine for me, I don't need a credit \ud83d\udc4d I am here as a volunteer purpose only. ","@auvipy Thank you for your idea. I am following the Contributing to Ruby on Rails guide, which states that commits should be squashed for cleaner commit history.\r\n\r\nI am really thankful for @rubyrider contributions to this PR and believe he should be listed as a co-author. It is very nice that we worked on this together.","I notice the build has failed. The reason seems to be from a failed test case in strict_loading_test.rb.\r\nI am a bit confused, as the command bundle exec ruby -Itest test\/cases\/strict_loading_test.rb passes with no errors.\r\n\r\nIs there anything I'm missing?","@mguan2020 i will take a look. ","@mguan2020 its passing locally. can you try re-running the test or rebase your branch and update your branch to see if the latest build fixes it? ","Thank you @rubyrider for your response. I reran the test and it is also passing locally on my end. I followed your advice of rebasing and updating my branch.\r\n\r\nAfter updating my feature branch and running all the tests in Active Record, I am getting the following output.\r\n\r\nFinished in 183.864905s, 47.2031 runs\/s, 160.3841 assertions\/s.\r\n8679 runs, 29489 assertions, 0 failures, 0 errors, 33 skips","Could you give me an update on how things are going?"],"labels":["activerecord"]},{"title":"Fix issue with regression in integration tests when providing as: :html","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request has been created in order to fix issue #50345. \r\n\r\n### Detail\r\n\r\nThis Pull Request solves the problem in Rails 7.1 where providing as: :html in the integration test for ActionDispatch causes a \"undefined method to_html\" error to be thrown.\r\n\r\nTo solve this issue, this Pull Request registers a param_encoder in addition to a HTML encoder in order to perform the request to the controller. \r\n\r\nAs a result, both the new tests provided in content_type_test.rb as well as the original tests for ActionDispatch are working.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["I think the fix requires more changes than what's proposed in this diff. I've opened https:\/\/github.com\/rails\/rails\/pull\/50390 as an alternative resolution to the issue."],"labels":["actionpack"]},{"title":"Ensure SQLite transaction default to IMMEDIATE mode","body":"### Motivation \/ Background\r\n\r\nAs SQLite's popularity grows as a production database engine for Rails applications, so does the need for robust and resilient default configuration. One of the most common issues faced when using SQLite in a Rails application are the occasional ActiveRecord::StatementInvalid (SQLite3::BusyException: database is locked) exceptions. These occur when a DEFERRED transaction attempts to acquire the SQLite database lock in the middle of a transaction once hitting a write query while another connection holds the database lock. Since this occurs in the middle of a transaction, SQLite does not attempt to retry to transaction by calling the set `busy_handler`\/`busy_timeout` callback, but instead immediately errors with a busy exception.\r\n\r\n### Detail\r\n\r\nThis PR has considered two different approaches over the course of its existence:\r\n\r\n1. globally change the default transaction mode for the SQLite adapter from `DEFERRED` to `IMMEDIATE`\r\n2. only change the transaction mode from `DEFERRED` to `IMMEDIATE` for transactions that Rails uses to wrap ActiveRecord write operations\r\n\r\nVarious test failures where tests are manually creating transactions, along with a stated preference to not expose a generic `mode` option to the `#transaction` method, which would have no meaning or purpose for other adapters, led me to go with option 2.\r\n\r\nWith option 2, `ActiveRecord::Base#with_transaction_returning_status` now calls `Adapter#transaction_returning_status` instead of `Adapter#transaction` directly. By default, that method is simply as alias, but the SQLite3 adapter implements the `transaction_returning_status` method to ensure that the immediate transaction mode is used. Transaction mode setting is done via the `use_*_transaction_mode!` methods added to the SQLite3 adapter, which the `test_fixtures.rb` module uses as well to ensure that fixture transactions always use deferred transactions.\r\n\r\n### Additional information\r\n\r\nAlongside https:\/\/github.com\/rails\/rails\/pull\/50370, this PR stabilizes SQLite's ability to handle concurrency without throwing intermittent but frequent busy exceptions.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["CI failures look legit:\r\n\r\n```\r\nError:\r\nDefaultScopingTest#test_default_scope_with_conditions_hash:\r\nRuntimeError: Wrapped undumpable exception for: ActiveRecord::StatementInvalid: SQLite3::BusyException: database is locked\r\n    \/usr\/local\/bundle\/gems\/sqlite3-1.6.9-x86_64-linux\/lib\/sqlite3\/resultset.rb:162:in `step'\r\n    \/usr\/local\/bundle\/gems\/sqlite3-1.6.9-x86_64-linux\/lib\/sqlite3\/resultset.rb:162:in `next_hash'\r\n    \/usr\/local\/bundle\/gems\/sqlite3-1.6.9-x86_64-linux\/lib\/sqlite3\/resultset.rb:97:in `next'\r\n    \/usr\/local\/bundle\/gems\/sqlite3-1.6.9-x86_64-linux\/lib\/sqlite3\/resultset.rb:125:in `each'\r\n```\r\n","@byroot: Interesting. I cannot reproduce locally.\r\n\r\n```\r\n$ bundle exec rake test:sqlite3\r\nUsing sqlite3\r\nRun options: --seed 41270\r\n\r\nFinished in 106.020541s, 81.4182 runs\/s, 276.5973 assertions\/s.\r\n8632 runs, 29325 assertions, 0 failures, 0 errors, 33 skips\r\n```\r\n\r\nI'm guessing Buildkite runs tests in parallel? How could I best mimic Buildkite's test setup on my local machine? I need to reproduce to start hunting down the best way to get tests passing on Buildkite.","> I'm guessing Buildkite runs tests in parallel?\r\n\r\nNot as far as I know. However it runs test on Linux, perhaps it's not linking to the same version of sqlite3? ","My first experiment failed, but I have honed in on where the issue arises, but without getting to the point of understanding precisely what the issue is. \n\nThe issue has to do with setting up fixtures. My bet is that the `setup_shared_connection_pool` method is where things get setup in a way that doesn\u2019t like immediate transactions. At the theoretical level, it would seem to the case that Rails is opening transactions for fixtures that never make a write. So, when transactions were deferred, those transactions never needed the db lock and thus ran fine. In immediate mode, they ask for the lock and doesn\u2019t receive it in the timeout window. Locally, it must be the case that my laptop is faster than Buildkite\u2019s machines and so my connections can complete their linear tasks in less than the timeout. \n\nI can see that we open transactions in 4 connections, 3 of which are for the same database file (fixtures.sqlite3). And the lock exception is thrown on the last connection. I'm not immediately certain why we need to have multiple connections to the same database file. But, regardless, I haven't yet found why trying to open an immediate transaction on the final connection throws a \"database locked\" exception. Will keep debugging. ","Making progress. I'm down to a few sporadic failures where the tests simply take longer than the `busy_timeout` and thus the busy exception is thrown.","What is the default busy timeout? Should it be higher?","> What is the default busy timeout? Should it be higher?\r\n\r\nFor tests, Rails sets up connections for the fixtures with a 5 second timeout (see [here](https:\/\/github.com\/rails\/rails\/blob\/main\/activerecord\/test\/config.example.yml)). This matches the 5 second default that Rails [generates](https:\/\/github.com\/rails\/rails\/blob\/main\/railties\/lib\/rails\/generators\/rails\/app\/templates\/config\/databases\/sqlite3.yml.tt) for a SQLite `database.yml` file. \r\n\r\nI'll try bumping the test timeout and seeing if that resolves the tests, tho it will be flaky of course. I can also keep working on trying to shore up the underlying logic for handling fixtures in tests. If we don't keep so many connections to the same database in our tests, this problem goes away more resiliently.","Still failing. It is a pretty consistent, and small, collection of test cases that are failing. My current hypothesis is that these tests have connections that aren't covered by the `config.yml` setup that sets the transaction mode for fixtures to `deferred`. Since the fixture setup starts a transaction for every connection present at the start of the test, if any connection is open that hasn't been configured to use the `deferred` transaction mode, the fixture setup will open an immediate transaction. Trying to open a second transaction to the same database after an `immediate` transaction has been opened will immediately throw a busy exception. \r\n\r\nI think that we may need to pair this PR with a refactor of the `fixture_setup` to always open `deferred` transactions for dealing with fixtures.","@dhh: Unrelated `ujs` and `app:update` test failures aside, this PR is green. Needed to ensure that fixture transactions were deferred. Instead of introducing a new option to the `transaction` method felt improper, as transaction modes are not meaningful to other DBMS. So, I isolated the change to the SQLite3 adapter and fixtures. Then, I needed one other fix for a transaction test.","Looks like there are still busy failures on the CI?\r\n\r\n![IMG_3896](https:\/\/github.com\/rails\/rails\/assets\/2741\/36dbc448-2402-418d-8c53-a8a95361204c)\r\n","Ah, I pushed what I thought was an irrelevant change (removing the `default_transaction_mode: deferred` from the test config), and it was clearly very relevant. There are a number of tests it seems that open multiple transactions to the same database. With the default `busy_timeout` blocking GVL, these tests take 5 seconds and then fail. It seems that this PR needs the non-blocking `busy_handler_timeout` that I am working to get into the SQLite3 repo (https:\/\/github.com\/sparklemotion\/sqlite3-ruby\/pull\/443) after another PR discussion (https:\/\/github.com\/rails\/rails\/pull\/50370) ended with the decision to move this logic from Rails down to the SQLite3 repo. I will inject that fix locally and try to isolate those tests that _require_ running deferred transactions and fix those. \r\n\r\nHowever, it seems that this PR is blocked for now.\r\n","An alternative thought I just had:\r\n\r\nWe could go another direction altogether and _only_ have the automatically created transactions used to wrap ActiveRecord's write operations run as `immediate`, while keeping the default behavior of `deferred` transactions for manually created transactions. I will see if I can make that happen. ","@dhh: I found the entry point for ActiveRecord write operation transactions. I have refactored the entire PR to _only_ make these operations INMEDIATE transactions. So, the default of deferred transactions remains the same. This was a long road, as I naively presumed that both automatic and manual transactions would basically always have a write operation. After slogging thru tests, I realize that a more isolated change is probably a more solid and resilient change for Rails. There are the flaky `app:update` and `ujs` test failures, but the ActiveRecord tests are all green (sorry for the false promise last time; double checked this time :wink:)","Other option is allowing the adapters to be able to take over that transaction method.","> Other option is allowing the adapters to be able to take over that transaction method.\r\n\r\nTrue. I can try that out and push it up and you can consider that as a wholistic diff. Will do that shortly. ","@dhh: `ActiveRecord::Base#with_transaction_returning_status` now calls `Adapter#transaction_returning_status` instead of `Adapter#transaction` directly. By default, that method is simply as alias, but the SQLite3 adapter implements the `transaction_returning_status` method to ensure that the immediate transaction mode is used. Transaction mode setting is done via the `use_*_transaction_mode!` methods added to the SQLite3 adapter, which the `test_fixtures.rb` module uses as well to ensure that fixture transactions always use deferred transactions.\r\n\r\nThis implementation doesn't leak the concept of \"transaction modes\" to any other adapters. WDYT?\r\n\r\n(as always, `rake test:ujs` tests are the only thing making this build red)","What's the point of creating #transaction_returning_status vs just letting the sqlite adapter overwrite #transaction?","If we override every call to `transaction` to use immediate mode, many tests fail. There are a lot of tests that manually call `transaction` multiple times to the same database. These all immediately error as the db is locked. I think the simpler solution is to scope the change to only the transactions Rails automatically wraps write operations in. ","Let's see if @matthewd or @byroot might have an idea here.","@matthewd @byroot: I resolved conflicts on the CHANGELOG, and I will squash commits once we agree on a direction. I'd greatly appreciate your thoughts here. I updated the initial post to match the current state of affairs, and I'm happy to answer any questions you might have. This really is a big pain for production SQLite applications, and I'd love to find a path forward here that works for everyone.","@byroot @matthewd: Another CHANGELOG resolution. I would love to get some eyes on this."],"labels":["activerecord"]},{"title":"`csrf_meta_tags`: use `safe_join` instead of `html_safe`","body":"### Motivation \/ Background\r\n\r\nWhile these are currently equivalent in `csrf_meta_tags`, it's safer for potential future code. It also helps communicate to users that `html_safe` can be a dangerous method and that there are safer alternatives to it.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["actionview"]},{"title":"ApplicationTests::AssetsTest#test_precompile_shouldn't_use_the_digests_present_in_manifest.json test failures","body":"### Steps to reproduce\r\n\r\nRunning Railties test suite on Fedora Rawhide, I am observing following test error more often then not (two last runs):\r\n\r\n~~~\r\n$  bundle exec ruby -Itest test\/application\/assets_test.rb -n \"\/test_precompile_shouldn't_use_the_digests_present_in_manifest.json\/\"\r\nRun options: -n \/test_precompile_shouldn't_use_the_digests_present_in_manifest.json\/ --seed 27991\r\n\r\n# Running:\r\n\r\nF\r\n\r\nFailure:\r\nApplicationTests::AssetsTest#test_precompile_shouldn't_use_the_digests_present_in_manifest.json [test\/application\/assets_test.rb:299]:\r\nExpected \"application-c56ef81d122dffa8b257b0546ba1b09bd2d8b97e4aef881de8db9f760b903af6.css\" to not be equal to \"application-c56ef81d122dffa8b257b0546ba1b09bd2d8b97e4aef881de8db9f760b903af6.css\".\r\n\r\n\r\nrails test test\/application\/assets_test.rb:282\r\n\r\n\r\n\r\nFinished in 0.668613s, 1.4956 runs\/s, 1.4956 assertions\/s.\r\n1 runs, 1 assertions, 1 failures, 0 errors, 0 skips\r\n\r\n\r\n$  bundle exec ruby -Itest test\/application\/assets_test.rb -n \"\/test_precompile_shouldn't_use_the_digests_present_in_manifest.json\/\"\r\nRun options: -n \/test_precompile_shouldn't_use_the_digests_present_in_manifest.json\/ --seed 62499\r\n\r\n# Running:\r\n\r\n.\r\n\r\nFinished in 0.653927s, 1.5292 runs\/s, 1.5292 assertions\/s.\r\n1 runs, 1 assertions, 0 failures, 0 errors, 0 skips\r\n~~~\r\n\r\nThe whole test setup, trying to replicate the Rails git directory structure can be seen [here](https:\/\/src.fedoraproject.org\/rpms\/rubygem-railties\/blob\/f81fd59f8c25811e5d46bb2d0697db2d96ebaaf8\/f\/rubygem-railties.spec#_120-227)\r\n\r\n### Expected behavior\r\nThe test passes every time\r\n\r\n### Actual behavior\r\nThe test passes sometime\r\n\r\n### System configuration\r\n**Rails version**: 7.0.8\r\n\r\n**Ruby version**: ruby 3.2.2 (2023-03-30 revision e51014f9c0) [x86_64-linux]\r\n","comments":["It looks this failure happens at the Rails CI https:\/\/buildkite.com\/rails\/rails\/builds\/102992#018ca76c-3700-4003-a5e2-30280d28f32b\/1206-1227","Interestingly enough, this failure was introduced in af7428c4acd0fcf9eed5c7215856594a078f23b7. Thank you bisect. \ud83d\udc1e ","Also wanted to note in my investigation, when comparing the assets before and after compilation, and stripping mtimes and sizes:\r\n\r\n* There is no difference when the tests fail\r\n* When the test passes there are additional entries for \"application.css\" and \"rails.png\"\r\n\r\n\r\n```diff\r\n--- before_assets\t2024-01-01 18:03:03.403130095 +0900\r\n+++ after_assets\t2024-01-01 18:02:44.393080299 +0900\r\n@@ -54,11 +54,19 @@\r\n    \"actioncable.esm-642a147cbb90e93c6f2bcaeeb817a4a263aa4f971a6d95795835270bd8519dfd.js\"=>\r\n     {\"logical_path\"=>\"actioncable.esm.js\",\r\n      \"digest\"=>\"a8f2d6b4af05541f004c31083fc52844b6d359dda59d48d2f8ba48d7db50b2cb\",\r\n-     \"integrity\"=>\"sha256-qPLWtK8FVB8ATDEIP8UoRLbTWd2lnUjS+LpI19tQsss=\"}},\r\n+     \"integrity\"=>\"sha256-qPLWtK8FVB8ATDEIP8UoRLbTWd2lnUjS+LpI19tQsss=\"},\r\n+   \"rails-2d6b24667d600f87c2a9526e7f0fee2b48b1448c1adea0b57a0e4fb57baa7e77.png\"=>\r\n+    {\"logical_path\"=>\"rails.png\",\r\n+     \"digest\"=>\"6738e33efa7b8d2036e0a0118601555f0b771ac042f6790f7538dd881a1a7f3a\",\r\n+     \"integrity\"=>\"sha256-ZzjjPvp7jSA24KARhgFVXwt3GsBC9nkPdTjdiBoafzo=\"},\r\n+   \"application-74526b9b4b031beed85a0a4130db604e14efbe2b1568bb69b9b93f3c61660177.css\"=>\r\n+    {\"logical_path\"=>\"application.css\",\r\n+     \"digest\"=>\"158846cde7282c0d01580e72d2688782055c347d6ba4d52b0f916fcde9cb407a\",\r\n+     \"integrity\"=>\"sha256-FYhGzecoLA0BWA5y0miHggVcNH1rpNUrD5FvzenLQHo=\"}},\r\n  \"assets\"=>\r\n   {\"manifest.js\"=>\"manifest-b4bf6e57a53c2bdb55b8998cc94cd00883793c1c37c5e5aea3ef6749b4f6d92b.js\",\r\n-   \"rails.png\"=>\"rails-b2a39959d30f6dd24423637ea1cc865ed070074043e519913e846c9d0859c4fb.png\",\r\n-   \"application.css\"=>\"application-c56ef81d122dffa8b257b0546ba1b09bd2d8b97e4aef881de8db9f760b903af6.css\",\r\n+   \"rails.png\"=>\"rails-2d6b24667d600f87c2a9526e7f0fee2b48b1448c1adea0b57a0e4fb57baa7e77.png\",\r\n+   \"application.css\"=>\"application-74526b9b4b031beed85a0a4130db604e14efbe2b1568bb69b9b93f3c61660177.css\",\r\n    \"actiontext.js\"=>\"actiontext-0e17dea0bbcecdc975d4166ad0414e9b0b08f89797093fd2402ca7a4b53f2841.js\",\r\n    \"actiontext.esm.js\"=>\"actiontext.esm-492b22a807659dd6cf22068522daaf906111f90474591bd48c75d515dd40fbca.js\",\r\n    \"trix.js\"=>\"trix-e17a480fcb4e30c8571f0fed42dc81de5faeef93755ca30fe9623eb3f5c709e5.js\",\r\n```","Here is also the output when the test passes:\r\n\r\n```\r\n** Invoke assets:precompile (first_time)\r\n** Invoke assets:environment (first_time)\r\n** Execute assets:environment\r\n** Invoke environment (first_time)\r\n** Execute environment\r\n** Execute assets:precompile\r\nI, [2024-01-02T12:32:40.998176 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/manifest-b4bf6e57a53c2bdb55b8998cc94cd00883793c1c37c5e5aea\r\n3ef6749b4f6d92b.js\r\nI, [2024-01-02T12:32:40.998350 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/manifest-b4bf6e57a53c2bdb55b8998cc94cd00883793c1c37c5e5aea\r\n3ef6749b4f6d92b.js.gz\r\nI, [2024-01-02T12:32:40.998660 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/rails-b2a39959d30f6dd24423637ea1cc865ed070074043e519913e84\r\n6c9d0859c4fb.png\r\nI, [2024-01-02T12:32:40.999223 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/application-c56ef81d122dffa8b257b0546ba1b09bd2d8b97e4aef88\r\n1de8db9f760b903af6.css\r\nI, [2024-01-02T12:32:40.999454 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/application-c56ef81d122dffa8b257b0546ba1b09bd2d8b97e4aef88\r\n1de8db9f760b903af6.css.gz\r\nI, [2024-01-02T12:32:40.999710 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/rails-b2a39959d30f6dd24423637ea1cc865ed070074043e519913e84\r\n6c9d0859c4fb.png\r\nI, [2024-01-02T12:32:41.000071 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/actiontext-0e17dea0bbcecdc975d4166ad0414e9b0b08f89797093fd\r\n2402ca7a4b53f2841.js\r\nI, [2024-01-02T12:32:41.000425 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/actiontext-0e17dea0bbcecdc975d4166ad0414e9b0b08f89797093fd\r\n2402ca7a4b53f2841.js.gz\r\nI, [2024-01-02T12:32:41.000709 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/actiontext.esm-492b22a807659dd6cf22068522daaf906111f904745\r\n91bd48c75d515dd40fbca.js\r\nI, [2024-01-02T12:32:41.001045 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/actiontext.esm-492b22a807659dd6cf22068522daaf906111f904745\r\n91bd48c75d515dd40fbca.js.gz\r\nI, [2024-01-02T12:32:41.001429 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/trix-e17a480fcb4e30c8571f0fed42dc81de5faeef93755ca30fe9623\r\neb3f5c709e5.js\r\nI, [2024-01-02T12:32:41.001666 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/trix-e17a480fcb4e30c8571f0fed42dc81de5faeef93755ca30fe9623\r\neb3f5c709e5.js.gz\r\nI, [2024-01-02T12:32:41.002035 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/trix-91ad87f30d9c53c7b05f534dc3c9994e4e90d50dff03a7222c132\r\n6f342f9c223.css\r\nI, [2024-01-02T12:32:41.002152 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/trix-91ad87f30d9c53c7b05f534dc3c9994e4e90d50dff03a7222c132\r\n6f342f9c223.css.gz\r\nI, [2024-01-02T12:32:41.002463 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/es-module-shims-69d0cb4dc1d01c9dc2ed52f2ab66874fd545fe7e35\r\nc7841009b4e8c55f231dee.js\r\nI, [2024-01-02T12:32:41.002692 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/es-module-shims-69d0cb4dc1d01c9dc2ed52f2ab66874fd545fe7e35\r\nc7841009b4e8c55f231dee.js.gz\r\nI, [2024-01-02T12:32:41.003105 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/es-module-shims.min-4ca9b3dd5e434131e3bb4b0c1d7dff3bfd4035\r\n672a5086deec6f73979a49be73.js\r\nI, [2024-01-02T12:32:41.003363 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/es-module-shims.min-4ca9b3dd5e434131e3bb4b0c1d7dff3bfd4035\r\n672a5086deec6f73979a49be73.js.gz\r\nI, [2024-01-02T12:32:41.003617 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/es-module-shims.js-c69f1a5dd068dfc08a4cedc0ad77b792985bf25\r\n6e162852bd03cdf764b666c4a.map\r\nI, [2024-01-02T12:32:41.003909 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/es-module-shims.js-c69f1a5dd068dfc08a4cedc0ad77b792985bf25\r\n6e162852bd03cdf764b666c4a.map.gz\r\nI, [2024-01-02T12:32:41.004221 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/activestorage-503a4fe23aabfbcb752dad255f01835904e6961d5f20\r\nd1de13987a691c27d9cd.js\r\nI, [2024-01-02T12:32:41.004583 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/activestorage-503a4fe23aabfbcb752dad255f01835904e6961d5f20\r\nd1de13987a691c27d9cd.js.gz\r\nI, [2024-01-02T12:32:41.004998 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/activestorage.esm-b3f7f0a5ef90530b509c5e681c4b3ef5d5046851\r\ne5b70d57fdb45e32b039c883.js\r\nI, [2024-01-02T12:32:41.005407 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/activestorage.esm-b3f7f0a5ef90530b509c5e681c4b3ef5d5046851\r\ne5b70d57fdb45e32b039c883.js.gz\r\nI, [2024-01-02T12:32:41.005617 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/actioncable-b561134b2bfb0d095c5329001e894d6d433544b2a0f427\r\n6e0e50591afa62bb46.js\r\nI, [2024-01-02T12:32:41.005861 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/actioncable-b561134b2bfb0d095c5329001e894d6d433544b2a0f427\r\n6e0e50591afa62bb46.js.gz\r\nI, [2024-01-02T12:32:41.006308 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/actioncable.esm-642a147cbb90e93c6f2bcaeeb817a4a263aa4f971a\r\n6d95795835270bd8519dfd.js\r\nI, [2024-01-02T12:32:41.006560 #42355]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/actioncable.esm-642a147cbb90e93c6f2bcaeeb817a4a263aa4f971a\r\n6d95795835270bd8519dfd.js.gz\r\n** Invoke assets:precompile (first_time)\r\n** Invoke assets:environment (first_time)\r\n** Execute assets:environment\r\n** Invoke environment (first_time)\r\n** Execute environment\r\n** Execute assets:precompile\r\nI, [2024-01-02T12:32:41.479027 #42496]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/rails-2d6b24667d600f87c2a9526e7f0fee2b48b1448c1adea0b57a0e\r\n4fb57baa7e77.png\r\nI, [2024-01-02T12:32:41.479492 #42496]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/application-74526b9b4b031beed85a0a4130db604e14efbe2b1568bb\r\n69b9b93f3c61660177.css\r\nI, [2024-01-02T12:32:41.479760 #42496]  INFO -- : Writing \/Users\/zzak\/code\/rails\/tmp\/d20240102-42354-ot2idz\/app\/public\/assets\/application-74526b9b4b031beed85a0a4130db604e14efbe2b1568bb\r\n69b9b93f3c61660177.css.gz\r\n```\r\n\r\nYou can see the second `precompile` step compiles 3 more files, which is missing from the failed case.\r\n\r\nAnd if I strip the timestamps and fingerprints from the files, there is an extra `rails.png` in the failed output:\r\n\r\n```diff\r\n--- pass_output\t2024-01-02 12:40:21.864393818 +0900\r\n+++ fail_output\t2024-01-02 12:39:22.676320805 +0900\r\n@@ -3,6 +3,7 @@\r\n I, INFO -- : Writing app\/public\/assets\/rails.png\r\n I, INFO -- : Writing app\/public\/assets\/application.css\r\n I, INFO -- : Writing app\/public\/assets\/application.css.gz\r\n+I, INFO -- : Writing app\/public\/assets\/rails.png\r\n I, INFO -- : Writing app\/public\/assets\/actiontext.js\r\n I, INFO -- : Writing app\/public\/assets\/actiontext.js.gz\r\n I, INFO -- : Writing app\/public\/assets\/actiontext.esm.js\r\n```\r\n\r\nI can come up with some theories based on this, and investigate more but wanted to document my research so far."],"labels":["asset pipeline"]},{"title":"Render Partial Collection with a layout parameter","body":"The current implementation does not respect the layout parameter in case of mixed collections.\r\n\r\nThis commit fixes the issue by ensuring that the code path for mixed collections render the partial inside the provided layout.\r\n\r\n### Motivation \/ Background\r\n\r\nFixes #49590\r\n\r\nThe current implementation of `render_collection_derive_partial` ignores the layout parameter in case of mixed collections.\r\n\r\n### Detail\r\n\r\nThis Pull Request changes`render_collection_derive_partial` to call a new `render_collection_with_no_partial` method which renders the partial inside the specified layout.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->","comments":["cc: @tenderlove - I have noticed you have done some work in this area, maybe you can help me understand more the role of `iter_vars`.","I did a benchmark between the option which renders a layout and the one without a layout, and they look similar:\r\n\r\n```\r\nWarming up --------------------------------------\r\n              layout   299.000  i\/100ms\r\n           no layout   337.000  i\/100ms\r\nCalculating -------------------------------------\r\n              layout      3.315k (\u00b1 7.4%) i\/s -     16.744k in   5.080468s\r\n           no layout      3.504k (\u00b1 9.5%) i\/s -     17.524k in   5.052954s\r\n\r\nComparison:\r\n           no layout:     3504.3 i\/s\r\n              layout:     3315.5 i\/s - same-ish: difference falls within error\r\n\r\n```\r\n\r\nI think this PR should be good to go!"],"labels":["actionview"]},{"title":"Regression in integration tests when providing as: :html","body":"### Steps to reproduce\r\n\r\n```ruby\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\nend\r\n\r\nrequire \"action_controller\/railtie\"\r\n\r\nclass TestApp < Rails::Application\r\n  config.hosts << \"www.example.com\"\r\n  routes.draw do\r\n    resources :characters\r\n  end\r\n\r\n  config.root   = __dir__\r\n  config.logger = Logger.new($stdout)\r\n  Rails.logger  = config.logger\r\nend\r\n\r\nclass CharactersController < ActionController::Base\r\n  def create\r\n    render head: :no_content\r\n  end\r\nend\r\n\r\nrequire \"minitest\/autorun\"\r\nrequire \"rack\/test\"\r\n\r\nclass BugTest < ActionDispatch::IntegrationTest\r\n  def test_params_without_content_type\r\n    post \"\/characters\", params: { name: \"Muad'Dib\" }\r\n  end\r\n\r\n  def test_params_with_htm_content_type\r\n    post \"\/users\", as: :html, params: { name: \"Muad'Dib\" }\r\n  end\r\n\r\n  private\r\n\r\n  def app\r\n    Rails.application\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\nIn Rails 7.0, the second test works.\r\n\r\n### Actual behavior\r\n\r\nIn Rails 7.1, the second test will raise an error :\r\n\r\n```\r\nBugTest#test_params_with_htm_content_type:\r\nNoMethodError: undefined method `to_html' for {:name=>\"Muad'Dib\"}:Hash\r\n    ...\/actionpack\/lib\/action_dispatch\/testing\/request_encoder.rb:39:in `encode_params'\r\n    ...\/actionpack\/lib\/action_dispatch\/testing\/integration.rb:251:in `process'\r\n    ...\/actionpack\/lib\/action_dispatch\/testing\/integration.rb:22:in `post'\r\n    ...\/actionpack\/lib\/action_dispatch\/testing\/integration.rb:379:in `post'\r\n    issue_bug.rb:39:in `test_params_with_htm_content_type'\r\n```\r\n\r\n### System configuration\r\n\r\n**Rails version**:\r\n\r\nRails 7.1.2 & main\r\n\r\n**Ruby version**:\r\n\r\nRuby 3.2.2","comments":["The issue comes from this new line in [action_dispatch\/testing\/request_encoder.rb](https:\/\/github.com\/rails\/rails\/commit\/8a57ba8c0ef7e041714f4c3b49444d81459b5a79#diff-d0d0b3a708a54ee9fd35226e4229fb7d443daada30134c1ead1bb73e49ef407eR55)\r\n\r\n\r\n```diff\r\n+   register_encoder :html, response_parser: -> body { Rails::Dom::Testing.html_document.parse(body) }\r\n```\r\n\r\nWithout HTML encoder, the default encoder`IdentityEncoder` returned the params as passed.\r\n\r\nNow that an HTML encoder has been registered, it tries to call `:\"to_#{@mime.symbol}\"` on params by default.\r\n\r\nMy first thought was to register a `param_encoder` :\r\n\r\n```ruby\r\nActionDispatch::IntegrationTest.register_encoder :html,\r\n  response_parser: ->(body) { Rails::Dom::Testing.html_document.parse(body) },\r\n  param_encoder: ->(params) { params }\r\n```\r\n\r\n~But it doesn't seem to work : the request is now performed but params are not passed to the controller.~\r\n\r\nEDIT: The patch suggested is working. I'll try to pull a request asap.\r\n","Thank you very much @inkstak for the detailed explanations. I have attached a PR that implements your suggested change as well as the corresponding tests.\r\n\r\nPlease let me know if there is anything you would like me to fix.","In the case you've shared above, passing `as: :html` implies that the request parameters will come from a `POST` body encoded as `text\/html`. That isn't entirely true -- browsers will encode `POST` parameters as either [application\/x-www-form-urlencoded](https:\/\/developer.mozilla.org\/en-US\/docs\/Learn\/Forms\/Sending_and_retrieving_form_data#the_post_method) or [multipart\/form-data](https:\/\/developer.mozilla.org\/en-US\/docs\/Learn\/Forms\/Sending_and_retrieving_form_data#the_enctype_attribute).\r\n\r\nIn the short-term, you might be better off omitting the `as: :html` entirely and letting Action Dispatch's test harness determine the proper content type and parameter encoding.\r\n\r\nIn the long-term, the `as: :html` keyword argument might require some special treatment. I've opened https:\/\/github.com\/rails\/rails\/pull\/50390 as an alternative to https:\/\/github.com\/rails\/rails\/pull\/50375.","> In the case you've shared above, passing as: :html implies that the request parameters will come from a POST body encoded as text\/html. That isn't entirely true -- browsers will encode POST parameters as either [application\/x-www-form-urlencoded](https:\/\/developer.mozilla.org\/en-US\/docs\/Learn\/Forms\/Sending_and_retrieving_form_data#the_post_method) or [multipart\/form-data](https:\/\/developer.mozilla.org\/en-US\/docs\/Learn\/Forms\/Sending_and_retrieving_form_data#the_enctype_attribute).\r\n\r\n@seanpdoyle  I couldn't agree more. Using `as: :html` seems unnecessary when you're testing endpoints that are intended to be used in a browser.\r\n\r\nI used to use it as RSpec metadata to explicitly test responses to unexpected formats against API endpoints.\r\nBecause Rails default format for `*\/*` is HTML, I used `as: :html` :\r\n\r\n\r\n```ruby\r\n\r\nRSpec.describe \"API::ResourcesController#create\" do\r\n  subject do\r\n    post \"\/resources\", as:, headers:, params:\r\n  end\r\n\r\n  let(:as) { |e| e.metadata[:as] }\r\n  \r\n  context \"when requesting JSON\", as: :json do\r\n    it_behaves_like \"it requires authentication\"\r\n    it_behaves_like \"it responds successfully when signed in\"\r\n  end\r\n\r\n  context \"when requesting HTML\", as: :html do\r\n    it_behaves_like \"it responds with not acceptable\"\r\n  end\r\nend\r\n\r\n"],"labels":["attached PR"]},{"title":"Help Active Job comply with Strict Loading","body":"### Motivation \/ Background\r\n\r\nBy the time an `ActiveJob::Base#perform` method is invoked, Active Record instances are already deserialized and reified through GlobalID integration.\r\n\r\nUnfortunately, since end-users don't have a means of configuring that loading process, it's common for Active Job executions to raise be at conflict with the application's Active Record strict loading configuration. That can result in errors like:\r\n\r\n```\r\nActiveRecord::StrictLoadingViolationError: `Article` is marked for strict_loading. The Tag association named `:tags` cannot be lazily loaded.\r\n```\r\n\r\nFortunately, calls to `GlobalID::Locator.locate` support an optional `includes:` keyword argument that's incorporated into the Active Record query to fetch the record.\r\n\r\n\r\n### Detail\r\n\r\nThis commit introduces a rudimentary interface to provide `ActiveJob::Base` descendants with a means of eager-loading associations to comply with strict loading.\r\n\r\nWhile it certainly isn't the public interface to ship, this change supports something in the realm of the following example:\r\n\r\n```ruby\r\nclass Article < ApplicationRecord\r\n  self.strict_loading_by_default = true\r\n\r\n  has_and_belongs_to_many :tags\r\nend\r\n\r\nclass Tag < ApplicationRecord\r\n  has_and_belongs_to_many :articles\r\nend\r\n\r\nclass PublishJob < ApplicationJob\r\n  def perform(article)\r\n    article.tags.each { |tag| ... }\r\n  end\r\n\r\n  private\r\n    def options_for_global_id(model_class)\r\n      if model_class == Article\r\n        { includes: [:tags] }\r\n      else\r\n        super\r\n      end\r\n    end\r\nend\r\n```\r\n\r\n### Additional information\r\n\r\nThe interface proposed in the current diff is awkward and not particularly well-named. It aims to demonstrate the necessary layers of abstraction that need to be breached in order for a Job to specify how to load records of a given model class. I'm hoping to gather feedback and guidance to shape the developer-facing public interface to configure how `GlobalID::Locator.locate` is invoked. **All feedback is welcomed**.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Can you give an example about how this would be used in an ActiveJob::Base class?\r\n\r\nAlso, I'm curious if this can be done entirely by introspecting the Active Record class\/associations without having to surface any configuration to the developer. It seems like this is something that Active Job's usage of GlobalId should handle transparently.","> Can you give an example about how this would be used in an ActiveJob::Base class?\n\nIn its current state, a job would define a `options_for_global_id(model_class)` instance method to return a Hash of options.\n\nThe ergonomics have a long way to go, but I wanted to open the PR to demonstrate the issue as it is, and also highlight the layers that would currently need to change.\n\nI'm not sure what the end result should look like. I'm skeptical that it'd be possible to introspect the proper eager loading to be done. I'm also unsure of whether or not disabling strict loading entirely would be viable. If either are possible, that'd be the lightest touch solution from the dev side, since it'd be managed internally.\n\nIf that isn't possible, I'm curious how to find an ergonomic balance. Maybe a class-level macro or callback, maybe the existing instance method with a far superior name. I'm not sure about those details, and would appreciate any and all feedback.","Have you seen the code block at the bottom of this comment? I think that's what's needed:\r\n\r\nhttps:\/\/github.com\/rails\/rails\/pull\/41181#issuecomment-763171558","@bensheldon thank you for sharing that. Manual intervention is the approach we're taking on our current application. I'm happy to introduce that change internally.\n\nThe intent behind the PR I it's current state is to explore what it might be like to **comply** with strict loading, not **circumvent** strict loading.\n\nWhile loading too much data or the N+1 query problem might not be as severe a risk from a background job, strict loading might still be worthwhile for some applications to minimize query times.\n\nIf it isn't possible to establish a seam to configure the GlobalID locator, we can always fall back on disabling on a record-by-record basis.\n\n@eileencodes what do you think are viable solutions?"],"labels":["activejob"]},{"title":"ActiveRecord >=7.1: `destroy` does not work after RestartParentTransaction\/SavepointTransaction rollback","body":"### Steps to reproduce\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"activerecord\", \" 7.1.0\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  has_many :comments\r\n\r\n  def self.test_restart_parent_transaction\r\n    post = self.first\r\n    ActiveRecord::Base.transaction do\r\n      ActiveRecord::Base.transaction(requires_new: true) do\r\n        post.destroy\r\n        raise \"Rollback\"\r\n      end\r\n    end\r\n  rescue\r\n    logger.info(\"destroy #{post.inspect}\")\r\n    post.destroy\r\n  end\r\n\r\n  def self.test_savepoint_transaction\r\n    post = nil\r\n    ActiveRecord::Base.transaction do\r\n      post = self.first\r\n      ActiveRecord::Base.transaction(requires_new: true) do\r\n        post.destroy\r\n        raise \"Rollback\"\r\n      end\r\n    end\r\n  rescue\r\n    logger.info(\"destroy #{post.inspect}\")\r\n    post.destroy\r\n  end\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def teardown\r\n    Post.delete_all\r\n  end\r\n\r\n  def test_destroy_after_restart_parent_transaction_rollback\r\n    Post.create!\r\n    assert_equal 1, Post.count\r\n\r\n    Post.test_restart_parent_transaction\r\n\r\n    assert_equal 0, Post.count\r\n  end\r\n\r\n  def test_destroy_after_savepoint_transaction_rollback\r\n    Post.create!\r\n    assert_equal 1, Post.count\r\n\r\n    Post.test_savepoint_transaction\r\n\r\n    assert_equal 0, Post.count\r\n  end\r\nend\r\n```\r\n\r\n`>=7.1.0` Failed\r\n![image](https:\/\/github.com\/rails\/rails\/assets\/1905688\/ae70afb7-730c-4375-81df-f337d232cd5f)\r\n\r\n`<7.1 (7.0.8)` Passed\r\n![image](https:\/\/github.com\/rails\/rails\/assets\/1905688\/e4f4f0be-56df-45d9-b617-b266e879e13c)\r\n\r\n\r\n### Expected behavior\r\n\r\nIt seems to me that it should behave the same as before 7.0.8. ( `post.destroy` after rollback should be work.)\r\n\r\n### Actual behavior\r\n\r\n`post.destroy` after rollback won't work.\r\n\r\n---\r\n\r\nThe following changes seem to be related.\r\n\r\n- #46197\r\n- #48303\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/6b93fff8af32ef5e91f4ec3cfffb081d0553faf0\/activerecord\/lib\/active_record\/persistence.rb#L780-L787\r\n\r\nSince `RestartParentTransaction`\/`SavepointTransaction` leave `@_trigger_destroy_callback` **true** after rollback, `destroy_row` won't executed.\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/v7.1.2\/activerecord\/lib\/active_record\/transactions.rb#L347\r\nhttps:\/\/github.com\/rails\/rails\/blob\/v7.1.2\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/transaction.rb#L200\r\nhttps:\/\/github.com\/rails\/rails\/blob\/v7.1.2\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/transaction.rb#L319\r\n\r\n### System configuration\r\n\r\n**Rails version**: >= 7.1.0\r\n**Ruby version**: 3.2.1 (2023-02-08 revision 31819e82c8) [x86_64-linux]\r\n","comments":["Thank you very much @hoshi-sano for bringing this issue to our attention and for providing the detailed information.\r\n\r\nFrom what I see here, @trigger_destroy_callback remains true after the rollback because the argument full_rollback_state in the record.rolledback? function call is false. In the file denoted by the link https:\/\/github.com\/rails\/rails\/blob\/v7.1.2\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/transaction.rb#L319, both the classes RestartParentTransaction and SavedpointTransaction set full_rollback? to false. This results in full_rollback_state being set to false.\r\n\r\nThis leads me to a question I have: **do we want @trigger_destroy_callback to be true for a RestartParentTransaction**?","My initial thought is to check whether @trigger_destroy_callback is true in the beginning of the destroy function. If @trigger_destroy_callback is true in the beginning of the destroy function, the destroy_row should be invoked to delete the corresponding record from the database. This should make your example (and the existing test cases) work correctly.\r\n\r\nI have linked a PR implementing my proposed change. Please let me know if there is anything you would like me to fix.","This issue has been automatically marked as stale because it has not been commented on for at least three months.\nThe resources of the Rails team are limited, and so we are asking for your help.\nIf you can still reproduce this error on the `7-1-stable` branch or on `main`, please reply with all of the information you have about it in order to keep the issue open.\nThank you for all your contributions.\n"],"labels":["stale"]},{"title":"Tag Builders: render keywords as dasherized HTML attributes","body":"### Motivation \/ Background\r\n\r\nWhile [Stimulus][] and [Turbo][] rely on values encoded into `data`-prefixed HTML attributes present in the document, other frameworks like [Alpine.js][] and [htmx][] rely on different prefixes (`x` and `hx`, respectively).\r\n\r\n### Detail\r\n\r\nTo add support for those frameworks and others like them, this commit expands the set of prefixes from `aria-` and `data-` to any nested `Hash` keyword option passed to the variety of Tag and Form Builder methods:\r\n\r\n```ruby\r\ntag.button \"POST to \/clicked\", hx: { post: \"\/clicked\", swap: :outerHTML, data: { json: true } }\r\n\r\n# => <button hx-post=\"\/clicked\" hx-swap=\"outerHTML\" hx-data=\"{&quot;json&quot;:true}\">POST to \/clicked<\/button>\r\n```\r\n\r\n[Stimulus]: https:\/\/stimulus.hotwired.dev\r\n[Turbo]: https:\/\/turbo.hotwired.dev\r\n[Alpine.js]: https:\/\/alpinejs.dev\r\n[htmx]: https:\/\/htmx.org\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["> Can't we always thread nested hashes except `:aria` the same way we do with `:data`?\r\n\r\nYes, I think that's a great idea. The configuration was mostly to avoid introducing a breaking change.\r\n\r\nIs adding that open-ended flexibility a [breaking change](https:\/\/github.com\/rails\/rails\/pull\/50320#discussion_r1431553376)?","@seanpdoyle not if we consider the old behavior a \"bug\""],"labels":["railties","docs","actionview"]},{"title":"Implement `button_to` in terms of `form_tag`","body":"### Motivation \/ Background\r\n\r\nWhile the ergonomics of calling `button_to` match those of `form_for`, `form_with`, or even `form_tag`, the implementation doesn't use much of those helper's existing infrastructure. There are chunks of logic repeated and re-implemented. For example:\r\n\r\n* determining the `[action]` and `[method]` attributes for the `<form>`\r\n* rendering an `<input type=\"hidden\" name=\"_method\">` for methods other than `POST` or `GET`\r\n* generating and rendering an authenticity token input\r\n* content exfiltration\r\n* encoding `[data-remote]` for UJS integration\r\n\r\n\r\n### Detail\r\n\r\nThis commit implements more of `button_to` in terms of the [form_tag][] helper method defined in `FormTagHelper`. That method handles responsibilities like determining `[method]`, rendering `<input type=\"hidden\">`, etc.\r\n\r\nThe only outward-facing changes (reflected in test suite cases) involve the order of the `<form>` element's content, and the introduction of an `[accept-charset=\"UTF-8\"]` attribute.\r\n\r\nThe `<button>` element will be rendered **after** hidden fields instead of **before** (the previous behavior).\r\n\r\nSimilarly, the `[accept-charset]` attribute wasn't being rendered before, but is rendered by `form_tag`. The `form_tag` helper doesn't currently expose a mechanism to skip that attribute (in the same way that `:enforce_utf8` is being used here to skip the `<input type=\"hidden\">`.\r\n\r\n\r\n### Additional information\r\n\r\nAs part of these changes, this commit also excises the `method_tag` and `token_tag` private helpers out of the `UrlHelper` module and into the `FormTagHelper` module, since that's the only remaining call site. The previous implementation relied on the fact that both `UrlHelper` and `FormTagHelper` end up being mixed into an `ActionView::Base` instance, so the cross-module `private` boundary wasn't effective.\r\n\r\n[form_tag]: https:\/\/edgeapi.rubyonrails.org\/classes\/ActionView\/Helpers\/FormTagHelper.html#method-i-form_tag\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Using the existing form tag helpers for `button_to` makes sense to me.\r\nAlso, form tags like `token_tag` and `method_tag` seem more at place in `FormTagHelper`, especially because they are already referenced in `FormTagHelper`."],"labels":["docs","actionview"]},{"title":"Collection Association's empty? method is not working correctly due to counter_cache","body":"### Steps to reproduce\r\nI'm using ActiveRecord 7.1.0 and Ruby 3.2.2 and I'm facing a bug due to counter_cache being negative. If you have a parent-child association like this:\r\n\r\n```ruby\r\nclass Post < ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  belongs_to :post, counter_cache: true\r\nend\r\n```\r\n\r\nThen say you have a Post with no comments\r\n```ruby\r\nfirst_post = Post.new(name: 'post 1')\r\n```\r\nNow if by any chance Post#comments_count becomes negative\r\n\r\n```ruby\r\nfirst_post.update!(comments_count: -1)\r\nfirst_post.comments.empty? \r\n```\r\nthis `empty?` returns false due to negative counter_cache. It should return true as the DB query would return true.\r\n\r\nHere is a standalone script that reproduces the issue:\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  # Activate the gem you are reporting the issue against.\r\n  gem \"activerecord\", \"~> 7.1.0\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n    t.integer :comments_count\r\n  end\r\n\r\n  create_table :comments, force: true do |t|\r\n    t.integer :post_id\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  belongs_to :post, counter_cache: true\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_comments_association_is_empty \r\n    post = Post.create!\r\n    post.update(comments_count: -1)\r\n    assert_equal true, post.comments.empty?\r\n  end\r\nend\r\n```\r\nSame issue occurs on older versions of ActiveRecord as well.","comments":["> I'm facing a bug due to counter_cache being negative\r\n\r\nThen the bug is that the counter cache is negative. It's not supposed to be. Do you know why it's negative?"],"labels":["activerecord"]},{"title":"`ActiveRecord::Store`: define predicate attribute method","body":"### Motivation \/ Background\r\n\r\nStoring attributes in database columns via the `.store` and `.store_accessor` class methods generates a collection of methods, including an attribute reader.\r\n\r\nThe methods are similar to the ones generated from `ActiveRecord::AttributeMethods` (and transitively `ActiveModel::AttributeMethods`), but do not include a presence predicate method (like\r\n`ActiveModel::AttributeMethods#attribute_present?`).\r\n\r\n### Detail\r\n\r\nThis commit generates an `#{attribute}?` method that reads from the store attribute, then chains a `#present?` predicate method on the return value.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Log trace of causes for unhandled exceptions","body":"https:\/\/github.com\/rails\/rails\/pull\/50145 recently added logging of an exception's causes' messages, which is great as I was going to add that. \r\n\r\nHowever, the backtraces of the causes are not included in that PR.\r\n\r\nThis PR adds the backtraces too, which can be helpful. Note that I also changed the \"header\" part from.\r\n\r\n```\r\nRuntimeError (Third error)\r\n\r\nCauses:\r\nRuntimeError (Second error)\r\nRuntimeError (First error)\r\n```\r\n\r\nTo:\r\n\r\n```\r\nRuntimeError (Third error)\r\nCaused by: RuntimeError (Second error)\r\nCaused by: RuntimeError (First error)\r\n```\r\n\r\nAnd I highlight that the first backtrace is from the \"main\" exception with this message: \r\n\r\n```\r\nInfos for: RuntimeError (Third error):\r\n```\r\n\r\nHere is a truncated example:\r\n\r\n```\r\nRuntimeError (Third error)\r\nCaused by: RuntimeError (Second error)\r\nCaused by: RuntimeError (First error)\r\n\r\nInfos for: RuntimeError (Third error):\r\n\r\n\/home\/max\/projects\/rails\/actionpack\/test\/dispatch\/debug_exceptions_test.rb:53:in `rescue in rescue in raise_nested_exceptions'\r\n\/home\/max\/projects\/rails\/actionpack\/test\/dispatch\/debug_exceptions_test.rb:50:in `rescue in raise_nested_exceptions'\r\n\/home\/max\/projects\/rails\/actionpack\/test\/dispatch\/debug_exceptions_test.rb:47:in `raise_nested_exceptions'\r\n\/home\/max\/projects\/rails\/actionpack\/test\/dispatch\/debug_exceptions_test.rb:113:in `call'\r\n\/home\/max\/.rvm\/gems\/ruby-3.2.2\/gems\/rack-3.0.8\/lib\/rack\/lint.rb:63:in `response'\r\n\/home\/max\/.rvm\/gems\/ruby-3.2.2\/gems\/rack-3.0.8\/lib\/rack\/lint.rb:35:in `call'\r\n\/and\/way\/more\r\n\r\nInfos for cause: RuntimeError (Second error):\r\n\r\n\/home\/max\/projects\/rails\/actionpack\/test\/dispatch\/debug_exceptions_test.rb:51:in `rescue in raise_nested_exceptions'\r\n\/home\/max\/projects\/rails\/actionpack\/test\/dispatch\/debug_exceptions_test.rb:47:in `raise_nested_exceptions'\r\n\/home\/max\/projects\/rails\/actionpack\/test\/dispatch\/debug_exceptions_test.rb:113:in `call'\r\n\/home\/max\/.rvm\/gems\/ruby-3.2.2\/gems\/rack-3.0.8\/lib\/rack\/lint.rb:63:in `response'\r\n\/home\/max\/.rvm\/gems\/ruby-3.2.2\/gems\/rack-3.0.8\/lib\/rack\/lint.rb:35:in `call'\r\n\/home\/max\/projects\/rails\/actionpack\/lib\/action_dispatch\/middleware\/debug_exceptions.rb:29:in `call'\r\n\/home\/max\/.rvm\/gems\/ruby-3.2.2\/gems\/rack-3.0.8\/lib\/rack\/lint.rb:63:in `response'\r\n\/and\/way\/more\r\n\r\nInfos for cause: RuntimeError (First error):\r\n\r\n\/home\/max\/projects\/rails\/actionpack\/test\/dispatch\/debug_exceptions_test.rb:48:in `raise_nested_exceptions'\r\n\/home\/max\/projects\/rails\/actionpack\/test\/dispatch\/debug_exceptions_test.rb:113:in `call'\r\n\/home\/max\/.rvm\/gems\/ruby-3.2.2\/gems\/rack-3.0.8\/lib\/rack\/lint.rb:63:in `response'\r\n\/home\/max\/.rvm\/gems\/ruby-3.2.2\/gems\/rack-3.0.8\/lib\/rack\/lint.rb:35:in `call'\r\n\/home\/max\/projects\/rails\/actionpack\/lib\/action_dispatch\/middleware\/debug_exceptions.rb:29:in `call'\r\n\/home\/max\/.rvm\/gems\/ruby-3.2.2\/gems\/rack-3.0.8\/lib\/rack\/lint.rb:63:in `response'\r\n\/and\/way\/more\r\n```\r\n","comments":["\"Infos for\" doesn't seem right to me.\r\n\r\nWhat is the difference between \"Infos for: <error>\" and \"Infos for cause: <error>\"?","The lastest \/ main exception is not a cause, so it only gets \"Infos for:\". Then the other ones, the causes, show \"Infos for cause:\".\r\n\r\nI agree that the wording could maybe be improved.\r\n\r\nNote that this wording only appears if the exception has a cause. Otherwise, it looks just as it used to."],"labels":["actionpack"]},{"title":"Document how to transform keys with `ActiveRecord::Store`","body":"### Detail\r\n\r\nFirst, add test coverage to ensure that the behavior supported by the private `read_store_attribute` and `write_store_attribute` doesn't change over time.\r\n\r\nNext, add method-level RubyDoc comments to describe how to override them correctly.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"alias_attribute gives a deprecation warning for store attributes in Rails 7.1","body":"When upgrading an app from Rails 7.0 to Rails 7.1 I'm getting these warnings:\r\n\r\n    DEPRECATION WARNING: MyModel model aliases `t`, but `t` is not an attribute.\r\n    Starting in Rails 7.2, alias_attribute with non-attribute targets will raise.\r\n\r\nThe attribute I want to alias is defined in an Active Record Store.\r\nThis behavior was introduced in this PR [48972](https:\/\/github.com\/rails\/rails\/pull\/48972).\r\n\r\n### Steps to reproduce\r\n\r\n``` ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  # Activate the gem you are reporting the issue against.\r\n  gem \"activerecord\", \"~> 7.1.2\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :my_models, force: true do |t|\r\n    t.string :properties\r\n  end\r\nend\r\n\r\nclass MyModel < ActiveRecord::Base\r\n  store :properties, accessors: [:t], coder: JSON\r\n  alias_attribute :title, :t\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_alias_attribute\r\n    my_model = MyModel.create!(title: \"My title\")\r\n    assert_equal my_model.title, \"My title\"\r\n    assert_equal my_model.t, \"My title\"\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\nNo warnings are given.\r\n\r\n### Actual behavior\r\n\r\n```\r\n-- create_table(:my_models, {:force=>true})\r\nRun options: --seed 9361\r\n# Running:\r\n\r\nDEPRECATION WARNING: MyModel model aliases `t`, but `t` is not an attribute. Starting in Rails 7.2, alias_attribute with non-attribute targets will raise. Use `alias_method :title, :t` or define the method manually.\r\n\r\nFinished in 0.004296s, 232.7610 runs\/s, 465.5219 assertions\/s.\r\n1 runs, 2 assertions, 0 failures, 0 errors, 0 skips\r\n```\r\n\r\n### System configuration\r\n**Rails version**: 7.1.2\r\n\r\n**Ruby version**: 3.2.2\r\n\r\n### Possible solutions\r\n\r\n1. Change the test in [ActiveRecord::AttributeMethods::ClassMethods](https:\/\/github.com\/ipc103\/rails\/blob\/eae26caec3e38c21835f4afd8622aad20c16c713\/activerecord\/lib\/active_record\/attribute_methods.rb#L83) to include attributes defined in stores (preferred)\r\n2. Add a method like `alias_store_attribute` which adds getter and setter methods for the aliased name","comments":["This is a bit tricky. The deprecation should be correct and aliasing AR store attributes should be broken once we drop the deprecation because store attributes implement direct reader&writer and don't go through the `attribute(:attr_name)` method to get the value\r\nhttps:\/\/github.com\/rails\/rails\/blob\/3881518c474b346940e328642d614ff49c05c735\/activerecord\/lib\/active_record\/store.rb#L142-L143\r\n\r\nAt the same time store attributes mimic Active Model attributes by implementing most (all?) of the related methods\r\nhttps:\/\/github.com\/rails\/rails\/blob\/3881518c474b346940e328642d614ff49c05c735\/activerecord\/lib\/active_record\/store.rb#L146\r\n\r\nSo just silencing the deprecation won't work, in order to fix this we need to either change AR store or provide a new helper to define an AR store attribute alias (suggestion n2) but unfortunately none of these changes can be back-ported so we may need to consider delaying the removal of this deprecation if aliasing AR store attributes is essential and must continue to work.\r\n\r\n","I'm not very familiar with AR internals. But I figured that [alias_attribute](https:\/\/github.com\/rails\/rails\/blob\/6b93fff8af32ef5e91f4ec3cfffb081d0553faf0\/activesupport\/lib\/active_support\/core_ext\/module\/aliasing.rb#L21) only defines some methods to access an existing store attribute so nothing bad would happen. If the changes in Rails 7.2 would break this particular situation then just suppressing the deprecation warning is obviously not going to work.\r\n\r\nA bit of background why I'm using these aliases. I have some attributes in an AR store where the proper name is quite long (like: 'general_product_category') and the table has a lot of records (> 100M). Just using a single character as the attribute name saves a lot of storage space for such a large table. This is certainly true when using a text or json database field and probably true when using a (postgres) jsonb field.\r\n\r\nFor me having aliases on store attributes is essential. But on the other hand easy to work around by adding a getter and a setter for each attribute (using `define_method`). Basically suggestion # 2 in a model concern."],"labels":["activerecord","With reproduction steps"]},{"title":"Fix stale state for composite foreign keys in belongs_to association","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nFixes #50256 \r\nFixes #51231\r\n\r\n**Context :** \r\n- A Model having query constraints and a belongs_to association.\r\n- Associated record is loaded once.\r\n\r\n**Action :** \r\n- Update Foreign key for the belongs_to association.\r\n- Call `model.association` to refer to the associated object.\r\n\r\n**Current Behaviour:**\r\n- State is not changed and no reload is triggered.\r\n- Association still points to the old record.\r\n\r\n**Updated Behaviour:**\r\n- State is updated and reload is triggered.\r\n- Association points to the updated record.\r\n\r\n### Detail\r\n\r\nThis Pull Request updates `stale_state` method in `belongs_to association` to handle composite foreign keys\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\nFor Additional context Please refer to #50256 \r\n\r\n### Dependency\r\n\r\n- This PR has a dependency on #50347 and is to be merged after those changes are approved and merged.\r\n- It is an independent bug, however when the stale state is updated correctly it results in loss of information because of the bug to be fixed in the mentioned PR.\r\n- Please refer to this [comment](https:\/\/github.com\/rails\/rails\/pull\/50297#issuecomment-1852817664) for additional description.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["@iamradioactive this PR introduces a new bug, which causes nested association to not be saved.. apparently it causes `reset` on the association because of \"stale_target\"\r\n\r\n```\r\n[3600] doing reset stale_state=, stale_state=1,\r\n\/Users\/yosi\/.rvm\/gems\/ruby-3.2.2\/bundler\/gems\/rails-6d89b876f012\/activerecord\/lib\/active_record\/associations\/belongs_to_association.rb:45:in `reset'\r\n\/Users\/yosi\/.rvm\/gems\/ruby-3.2.2\/bundler\/gems\/rails-6d89b876f012\/activerecord\/lib\/active_record\/associations\/association.rb:72:in `reload'\r\n\/Users\/yosi\/.rvm\/gems\/ruby-3.2.2\/bundler\/gems\/rails-6d89b876f012\/activerecord\/lib\/active_record\/associations\/singular_association.rb:11:in `reader'\r\n\/Users\/yosi\/.rvm\/gems\/ruby-3.2.2\/bundler\/gems\/rails-6d89b876f012\/activerecord\/lib\/active_record\/associations\/builder\/association.rb:104:in `author'\r\n```\r\n\r\n\r\nReproduction script:\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  # Activate the gem you are reporting the issue against.\r\n  # gem \"activerecord\", \"~> 7.1.0\"\r\n  gem \"rails\", github: \"iamradioactive\/rails\", branch: \"handle_composite_foreign_keys\"\r\n  gem \"pg\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"logger\"\r\nrequire \"minitest\/autorun\"\r\n\r\nActiveRecord::Base.establish_connection(\r\n  adapter: \"postgresql\",\r\n  database: \"test\",\r\n  encoding: \"unicode\",\r\n  host: \"localhost\",\r\n  port: \"5432\",\r\n  password: \"12345\",\r\n  username: \"test\")\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :tenants, force: true do |t|\r\n    t.string :name\r\n  end\r\n\r\n  create_table :comments, force: true do |t|\r\n    t.integer :tenant_id\r\n    t.integer :post_id\r\n    t.integer :author_id\r\n    t.string :body\r\n    t.integer :position\r\n  end\r\n\r\n  create_table :posts, force: true do |t|\r\n    t.integer :tenant_id\r\n  end\r\n\r\n  create_table :author, force: true do |t|\r\n    t.integer :tenant_id\r\n  end\r\nend\r\n\r\nclass Tenant < ActiveRecord::Base\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  query_constraints :tenant_id, :id\r\n\r\n  has_many :comments\r\n  belongs_to :tenant\r\nend\r\n\r\nclass Author < ActiveRecord::Base\r\n  query_constraints :tenant_id, :id\r\n  belongs_to :tenant\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  query_constraints :tenant_id, :id\r\n\r\n  before_save :touch_author\r\n\r\n  belongs_to :tenant\r\n  belongs_to :post\r\n  belongs_to :author\r\n\r\n  def touch_author\r\n    puts \"author: #{self.author}\"\r\n  end\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_assoc\r\n    Author.destroy_all\r\n    Post.destroy_all\r\n    Comment.destroy_all\r\n    Tenant.destroy_all\r\n\r\n    tenant = Tenant.create!\r\n\r\n    post = Post.create!(tenant: tenant)\r\n    post.comments << Comment.new(body: \"hello\", tenant: tenant, author: Author.new(tenant: tenant))\r\n    post.save!\r\n\r\n    assert_equal 1, Post.count, \"single post\"\r\n    assert_equal 1, Comment.count, \"2 comments\"\r\n    assert_equal 1, Author.count, \"1 author\"\r\n  end\r\nend\r\n```\r\n\r\nThis test passes on rails 7.1, but not on your branch.","@yosiat , Interestingly, It seems to be another bug uncovered by these changes. Thank you for testing it out. I have updated the PR.\r\n\r\nOn Rails 7.1 stable, if you verify the value of `tenant_id` before calling save.\r\n\r\n**With Query Constraints**\r\n - comment.tenant id is `nil`.\r\n - comment.tenant points to tenant with id 1.\r\n\r\n**Without Query Constraints**\r\n - comment.tenant id is 1\r\n - comment.tenant points to tenant with id 1.\r\n\r\nSince, Stale state is not working correctly on main branch as of now, reload is not getting triggered when the tenant id changes and there is no loss of unsaved associations. After this update, `stale_state` method started to detect changes and state was reset as soon as the `tenant_id` is changed.","If we are pivoting the fix from `stale_state` towards properly deriving the foreign key, could we change the PR title & description? ","Hi @iamradioactive \r\n\r\nThanks for your work and detailed investigation!\r\n\r\nI am bit confused, what this PR is going to fix? there were two issues:\r\n- Original one: accessing the `comment.author` and it's not loaded\r\n- The nested save\r\n\r\nI saw this comment about inversing (https:\/\/github.com\/rails\/rails\/issues\/50256#issuecomment-1851087930) which issue does it the address? the first one?","@nvasilevski , @yosiat \r\n\r\nThese are two independent and valid bugs. I'm gonna open a separate PR to derive the foreign key using the [commit](https:\/\/github.com\/rails\/rails\/pull\/50297\/commits\/0192b35e3bd711e32bab1b0a2bbddbcdd3975e76) and mark the new PR as a dependency for this one.\r\n\r\nThere are two bugs to be fixed \r\n\r\n- State state for composite foreign keys. (Original one)\r\n- Derived\/Inferred foreign key for models with Query constraints. (Nested save)\r\n\r\nI will update the PRs and drop a comment here.","I have updated the PR, this one contains only the changes related to the fix for `stale_state`. However it has a dependency on #50347 and is to be merged once those changes are approved and merged.\r\n\r\ncc: @nvasilevski  @yosiat ","Can someone please rebase this branch as the branch suffers from https:\/\/github.com\/rails\/rails\/issues\/49597 and I think it makes noise in the verification\/fix for this bug.","> Can someone please rebase this branch as the branch suffers from #49597 and I think it makes noise in the verification\/fix for this bug.\r\n\r\n@jarl-dk , I have rebased the branch with latest code from main.","@nvasilevski , Can you please review this again? The dependency #50347 is merged now "],"labels":["activerecord"]},{"title":"calling `ActiveSupport::Cache.lookup_store` in application.rb (or environments\/*.rb) causes deprecation warning","body":"### Steps to reproduce\r\n\r\ncall `ActiveSupport::Cache.lookup_store` w\/ default `config.active_support.cache_format_version` under `config.load_defaults 7.0`\r\n\r\nat that timing, `ActiveSupport::Cache.format_version` is still [the default `6.1`](https:\/\/github.com\/rails\/rails\/blob\/c1489a8ca4a9b91e21725f6a139e82e803c9eaa6\/activesupport\/lib\/active_support\/cache.rb#L55), thus causes [this warning](https:\/\/github.com\/rails\/rails\/blob\/c1489a8ca4a9b91e21725f6a139e82e803c9eaa6\/activesupport\/lib\/active_support\/cache.rb#L773-L778)\r\n\r\nsample app is here. you can see the warning just by running it.\r\nhttps:\/\/github.com\/nov\/rails7_1_sample\r\n\r\n### Expected behavior\r\n\r\nno warning.\r\n<!-- Tell us what should happen -->\r\n\r\n### Actual behavior\r\n\r\n```\r\n% rails server\r\nDEPRECATION WARNING: Support for `config.active_support.cache_format_version = 6.1` has been deprecated and will be removed in Rails 7.2.\r\n\r\nCheck the Rails upgrade guide at https:\/\/guides.rubyonrails.org\/upgrading_ruby_on_rails.html#new-activesupport-cache-serialization-format\r\nfor more information on how to upgrade.\r\n```\r\n<!-- Tell us what happens instead -->\r\n\r\n### System configuration\r\n**Rails version**:\r\n\r\n**Ruby version**:\r\n","comments":["Duplicate of https:\/\/github.com\/rails\/rails\/issues\/49892 and https:\/\/github.com\/rails\/rails\/issues\/49543","OK, so the only workaround is https:\/\/github.com\/rails\/rails\/issues\/49543#issuecomment-1760134318\r\n\r\nthus like this\r\n```ruby\r\nActiveSupport::Cache.lookup_store = config.active_support.cache_format_version # call this first\r\nconfig.cache_store = ActiveSupport::Cache.lookup_store :redis_cache_store # then lookup store \r\n```","There's no need for any workaround. The default value of `6.1` is deprecated, and if you try to use that version you will receive a deprecation warning.\r\n\r\nThe fix is to use `7.0` for the `cache_format_version`","no, as you can see, I'm getting this warning even I'm setting `cache_format_version` to `7.1`.\r\n\r\nhttps:\/\/github.com\/nov\/rails7_1_sample\/blob\/c140d6ed7b8a4350416f267f6af41d126b25b30c\/config\/application.rb#L12-L27\r\n\r\nand that's why this warning disappears if I call this beforehand.\r\n\r\n```ruby\r\nActiveSupport::Cache.lookup_store = config.active_support.cache_format_version\r\n```","Ah, sorry about that. In the original issue you had said `load_defaults 7.0` so I assumed your reproduction used that as well. I'll reopen because I agree your reproduction looks like a bug.","So the issue is that `load_defaults 7.1` sets `config.active_support.cache_format_version`, but that setting doesn't get copied to `ActiveSupport.cache_format_version` until initializers run (particularly `\"active_suport.set_configs\"`).\r\n\r\nI'm not sure if there's anything easy we can do to make this possible. Is there a reason you can't set `cache_store` to a symbol so that it can be looked up during an initializer?","We might can rewrite the `lookup_store` part for `cache_store`, but now we're sharing the same cache loader class for `cache_store` (setup in `application.rb`) and `session_store` (setup in `initializsers\/session_store.rb`) sharing various redis options w\/ different namespace.\r\nIf we can keep that, it would be better.","@fatkodima @nov I have proposed a pull request that fix this issue:\r\nhttps:\/\/github.com\/rails\/rails\/pull\/50434\r\n\r\nPlease let me know if this is okey or further changes are required :) ","This issue has been automatically marked as stale because it has not been commented on for at least three months.\nThe resources of the Rails team are limited, and so we are asking for your help.\nIf you can still reproduce this error on the `7-1-stable` branch or on `main`, please reply with all of the information you have about it in order to keep the issue open.\nThank you for all your contributions.\n"],"labels":["stale"]},{"title":"Fix `Time.now`\/`DateTime.now`\/`Date.today` to return results in a system timezone after `#travel_to` in 7-0-stable","body":"This is a backport of #50236 for 7-0-stable.\r\n\r\n### Motivation \/ Background\r\n\r\nFix incorrect `Date.today` result value that caused [a bug with the `Faker::Time.backward` method](https:\/\/github.com\/faker-ruby\/faker\/issues\/2861) in the Faker gem.\r\n\r\n### Detail\r\n\r\nThere is a bug in the current implementation of `#travel_to`: it remembers a timezone of its argument, and all stubbed methods (`Time.now`, `DateTime.now`, `Date.today`) start returning results in that remembered timezone. However, the expected behaviour is to return results in a system timezone.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["@byroot @zzak There is one more bug in 7-0-stable: it doesn't stub `Time.new` (without args) which should return the same result as `Time.now`. I put comments about it in the code. Should I try to add such a stub in the current PR?"],"labels":["activesupport"]},{"title":"Redefine autosave callbacks if associations are overridden","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nContext for this change is in #50040, specifically [this comment](https:\/\/github.com\/rails\/rails\/issues\/50040#issuecomment-1826306098).\r\nThis isn't necessarilly to fix that issue, since it was mostly a bad setup, but it does ensure that users don't get unexpected behaviour just because an association was duplicated \/ overridden.\r\n\r\n### Detail\r\n\r\nThis Pull Request changes `ActiveRecord::AutosaveAssociation::ClassMethods#define_non_cyclic_method` to return only if the method has been defined for the given reflection, as opposed to whether it's ever been defined on the class, to ensure that the autosave methods are redefined for associations that are overridden.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["> This isn't necessarilly to fix that issue, since it was mostly a bad setup\r\n\r\nCould we instead fail?\r\n\r\nI'm not a big fan of having to keep even more state on each model.","> Could we instead fail?\r\n> \r\n> I'm not a big fan of having to keep even more state on each model.\r\n\r\nSure, I'm open to that.\r\n\r\nI usually prefer that approach as well, but going [off of this discussion](https:\/\/github.com\/rails\/rails\/pull\/49056#discussion_r1341971738), I thought maybe we'd want to allow overriding associations the same way we allow for overriding `accepts_nested_attributes_for` i.e. maintain consistency across association related methods.","> I usually prefer that approach as well, but going [off of this discussion](https:\/\/github.com\/rails\/rails\/pull\/49056#discussion_r1341971738), I thought maybe we'd want to allow overriding associations the same way we allow for overriding `accepts_nested_attributes_for`\r\n\r\nDon't take my opinion as gospel, I only had a cursory look, you likely have more context than me. "],"labels":["activerecord"]},{"title":"Elaborate on support for hash helpers in Integration Tests [ci skip]","body":"Change the Testing Guide to emphasize that `session`, `flash`, and `cookies` helpers are only available to be read from **after** a request has been made.\r\n\r\nThis is a break from `ActionController::TestCase` support for writing to these Hash helpers **before** a request has been made, so it's worth emphasizing to avoid confusing the two practices.","comments":["\ud83d\udc4d  for documenting this behavior explicitly! This behavior comes up in discussions every now and then and I never have a source to link to.","@zzak I've squashed the commits. Is this ready to merge?"],"labels":["docs"]},{"title":"[ci skip] Clarify ConnectionPool timeout options","body":"### Motivation \/ Background\r\n\r\nLong story short: while trying to configure the timeout(s) for connections in a Zammad installation the current docs lead me to believe the `timeout` option would apply to database connections. This is compounded by the `timeout` and `checkout_timeout` options both default to 5 seconds. See also this Zammad Docs issue https:\/\/github.com\/zammad\/zammad\/pull\/4883#issuecomment-1815291895.\r\n\r\nThis Pull Request tries to clarify this in the docs by removing the `timeout` option from the Connection Pooling paragraph and explicitly explaining the Pool timeout options. The changes are broken into different Commits to keep formatting and content changes separate to make understanding what is changed easier. They might be squashed before merging.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["docs"]},{"title":"Infer default `:inverse_of` option for `delegated_type`","body":"### Motivation \/ Background\r\n\r\nPrior to this commit, delegated types were unable to infer their inverse associations, so saving records built with the generated `#build_ASSOCIATION` methods weren't writing to all the necessary places. For example:\r\n\r\n```ruby\r\nentry = Entry.create! entryable: Message.new(subject: \"Hello world!\")\r\nentry.message.subject # => \"Hello world!\"\r\n\r\nentry.build_entryable(subject: \"Goodbye world!\").save!\r\nentry.reload.message.subject # => \"Hello world!\"\r\n```\r\n\r\n### Additional information\r\n\r\nThe fact that the `Entry` test model declared a `delegated_type :entryable` definition with `types: %w[ Message Comment ]` was never reciprocated in the appropriate models.\r\n\r\nIn order to pass the tests, this commit needed to define the corresponding `has_one :entry` associations. To do so, introduce the `Entryable` concern in the same style as the one mentioned in the documentation. The same extraction is made for a `UuidEntryable` concern mixed into `UuidMessage` and `UuidComment`.\r\n\r\nUnfortunately, defining `delegated_type :thing, types: %w[ Post ]` was more tricky to fix. The `Post` test model is widely used, so defining a `has_one` had farther-reaching effects than intended. To resolve that issue, this commit redefines `:thing` to use `types: %w[ Essay ]`, which has much fewer unintended side effects.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["@composerinteralia I wonder if this is another manifestation of the issue at the root of https:\/\/github.com\/rails\/rails\/issues\/49574."],"labels":["activerecord"]},{"title":"Add `request.variant` API and guides documentation","body":"### Detail\r\n\r\nAdd prose and code samples for:\r\n\r\n* `request.variant=`\r\n* `request.variant`\r\n\r\nAdd sections to the Action View and Action Controller guides, along with some code samples.\r\n\r\nThe majority of these changes were excised from past pull requests, such as [#12977][] and [#18939][].\r\n\r\n[#12977]: https:\/\/github.com\/rails\/rails\/pull\/12977\r\n[#18939]: https:\/\/github.com\/rails\/rails\/pull\/18939\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["actionpack","docs"]},{"title":"Introduce `package_json` Generator Action","body":"### Motivation \/ Background\r\n\r\nIt's common to modify `package.json` with custom [scripts](https:\/\/docs.npmjs.com\/cli\/v6\/using-npm\/scripts).\r\n\r\nWe already support the ability to create [rake tasks](https:\/\/edgeapi.rubyonrails.org\/classes\/Rails\/Generators\/Actions.html#method-i-rakefile), so this change is in alignment with that. \r\n\r\n### Detail\r\n\r\nExtends existing [Generator Actions][] by allowing the consumer to modify `package.json`.\r\n\r\n```ruby\r\npackage_json scripts: { stylelint: \"npx stylelint 'app\/assets\/stylesheets\/**\/*.css'\" }\r\n```\r\n\r\nThis is especially useful when used with an [Application Template][] when creating or modifying a Rails application.\r\n\r\n```ruby\r\ngem \"cssbundling-rails\"\r\n\r\nafter_bundle do\r\n  rails_command \"css:install:postcss\"\r\n  run \"yarn add stylelint stylelint-config-standard\"\r\n  run \"touch .stylelintrc.json\"\r\n  insert_into_file \".stylelintrc.json\", <<~JSON\r\n    {\r\n      \"extends\": [\"stylelint-config-standard\"]\r\n    }\r\n  JSON\r\n\r\n  package_json scripts: { stylelint: \"npx stylelint 'app\/assets\/stylesheets\/**\/*.css'\" }\r\nend\r\n```\r\n\r\n[Generator Actions]: https:\/\/edgeapi.rubyonrails.org\/classes\/Rails\/Generators\/Actions.html\r\n[Application Template]: https:\/\/edgeguides.rubyonrails.org\/rails_application_templates.html\r\n\r\n### Additional information\r\n\r\nI opted to not create a `package.json` file if one does not exist. Instead, the command will raise an error. This is consistent with how the `gem` command works in that it assumes the file already exists. \r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["I suggested something like this previously (although in a downstream repo) and it was rejected:\r\nhttps:\/\/github.com\/rails\/jsbundling-rails\/issues\/35#issuecomment-928512097\r\n\r\n(to continue that discussion) is there a reason to not use `npm set-script`?","> I suggested something like this previously (although in a downstream repo) and it was rejected: [rails\/jsbundling-rails#35 (comment)](https:\/\/github.com\/rails\/jsbundling-rails\/issues\/35#issuecomment-928512097)\r\n> \r\n> (to continue that discussion) is there a reason to not use `npm set-script`?\r\n\r\nThank you for the additional context! Although `npm set-script` is an appropriate solution for setting scripts, this action is more flexible, and can modify all [supported keys](https:\/\/docs.npmjs.com\/cli\/v10\/configuring-npm\/package-json). For example, you could do something like `package_json private: true`.\r\n\r\nMaybe there\u2019s an opportunity for me to update the examples?","I think Rails shouldn't get into the business of parsing or modifying `package.json` and leave that up to the tools that maintain it.","> I think Rails shouldn't get into the business of parsing or modifying `package.json` and leave that up to the tools that maintain it.\r\n\r\nI can understand that. However, we already have a [yarn:install](https:\/\/github.com\/rails\/rails\/blob\/9064735ec5cd3c679f8ffabc42532dd85223af58\/railties\/lib\/rails\/tasks\/yarn.rake#L4) task. Admittedly, it doesn't parse or modifying `package.json`, but its existence implies there's an opportunity to further explore this concept.","Sorry I also don't see the need to wrap `yarn install` in Rails either, it seems like this was originally added to become a rake dependency on `assets:precompile`. Since that is the responsibility of the asset pipeline, it makes sense that dependency move there and we could deprecate this task within rails\/rails. This is just my perspective here though, you are welcome to investigate further and source other opinions. Sorry if my response comes off as a definitive \"no\", there are plenty of opinions out there, only trying to offer mine.\r\n\r\nOne possible question I would ask is who is the benefactor of such a feature?\r\n\r\nIs it Rails applications that depend on using npm? Is it generators? If so what kind? Or would this be useful in our testing environment?\r\n\r\nIf templates are the only benefactor, why not make a helper and release it as a gem?\r\n","> One possible question I would ask is who is the benefactor of such a feature?\r\n> \r\n> Is it Rails applications that depend on using npm? Is it generators? If so what kind? Or would this be useful in our testing environment?\r\n\r\nThese are great questions! This commit was inspired by [recent work on Suspenders](https:\/\/github.com\/thoughtbot\/suspenders\/blob\/439b3ee1768a94cc478079e5c6d6de08555991a8\/lib\/generators\/suspenders\/lint_generator.rb#L49-L61). I see this new action benefiting anyone building a generator.\r\n\r\n"],"labels":["railties","docs"]},{"title":"Eager loading bug with inverse_of and the same model in the query twice","body":"I'm using Rails 7.1.2 and Ruby 3.2.2 and I'm seeing a bug with how associated records are loaded when `has_many_inversing` is enabled and `inverse_of` is used in the association and the association is used in the query twice. If you have a parent-child association like this:\r\n\r\n```ruby\r\nclass User < ActiveRecord::Base\r\n  belongs_to :group, inverse_of: :users\r\nend\r\n\r\nclass Group < ActiveRecord::Base\r\n  has_many :users, inverse_of: :group\r\nend\r\n```\r\n\r\nThen say you have a group with 2 users:\r\n\r\n```ruby\r\ngroup = Group.create!(name: \"Test\")\r\n\r\nUser.create!(group: group, name: \"John\")\r\nUser.create!(group: group, name: \"Jane\")\r\n```\r\n\r\nNow let's say you load one of the users and eagerly load the group and the users in the group, like this:\r\n\r\n```ruby\r\nUser.eager_load(:group => :users).where(\"users.id = ?\", 1).first.group.users.map(&:name)\r\n```\r\n\r\nI would expect this to return the 2 users, like this:\r\n\r\n```ruby\r\n[\"John\", \"Jane\"]\r\n```\r\n\r\nBut instead the group is repeated, like this:\r\n\r\n```ruby\r\n[\"John\", \"John\", \"Jane\"]\r\n```\r\n\r\nThis bug only happens when `has_many_inversing` is set to `true`.\r\n\r\nHere is a standalone script that reproduces the issue:\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Base.has_many_inversing = true\r\n\r\nActiveRecord::Schema.define do\r\n  create_table \"groups\", force: :cascade do |t|\r\n    t.string \"name\"\r\n    t.datetime \"created_at\", null: false\r\n    t.datetime \"updated_at\", null: false\r\n  end\r\n\r\n  create_table \"users\", force: :cascade do |t|\r\n    t.integer \"group_id\", null: false\r\n    t.string \"name\"\r\n    t.datetime \"created_at\", null: false\r\n    t.datetime \"updated_at\", null: false\r\n    t.index [\"group_id\"], name: \"index_users_on_group_id\"\r\n  end\r\n\r\n  add_foreign_key \"users\", \"groups\"\r\nend\r\n\r\nclass User < ActiveRecord::Base\r\n  belongs_to :group, inverse_of: :users\r\nend\r\n\r\nclass Group < ActiveRecord::Base\r\n  has_many :users, inverse_of: :group\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_association_loads_correct_number_of_records\r\n    # Create a group\r\n    group = Group.create!(name: \"Test\")\r\n\r\n    # Create two users in the group\r\n    john = User.create!(group: group, name: \"John\")\r\n    jane = User.create!(group: group, name: \"Jane\")\r\n\r\n    group = Group.find(group.id)\r\n    john = User.find(john.id)\r\n    jane = User.find(jane.id)\r\n\r\n    # When you load the use then get the size of the users in the group, you correctly get 2\r\n    assert_equal 2, john.group.users.map(&:name).size\r\n\r\n    # But when you eager_load the first user, there are 3 users in the group\r\n    assert_equal 2, User.eager_load(:group => :users).where(\"users.id = ?\", 1).first.group.users.map(&:name).size,\r\n      \"expected the first group to have 2 users\"\r\n  end\r\nend\r\n```\r\n","comments":["Thank you for the details @pjb3, I'm taking a stab at this \ud83d\udc4d","This issue has been automatically marked as stale because it has not been commented on for at least three months.\nThe resources of the Rails team are limited, and so we are asking for your help.\nIf you can still reproduce this error on the `7-1-stable` branch or on `main`, please reply with all of the information you have about it in order to keep the issue open.\nThank you for all your contributions.\n"],"labels":["activerecord","With reproduction steps"]},{"title":"Rails 7.1: query_constraints: causes relation to not be loaded.","body":"While trying to use `query_constraints` (awesome feature \ud83d\ude4f ) I have seen a case where a relation is `nil` on `after_add` callback.\r\n\r\nI reduced my application to this reproduction script and to cause `comment.author` to be nil with `query_constraints` we need to have: Default order in `comments` & `after_initialize` that touches the model.\r\n\r\nSee the script below to better understand my reproduction.\r\n\r\n### Steps to reproduce\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  # Activate the gem you are reporting the issue against.\r\n  gem \"activerecord\", \"~> 7.1.0\"\r\n  gem \"pg\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"logger\"\r\n\r\nActiveRecord::Base.establish_connection(\r\n  adapter: \"postgresql\",\r\n  database: \"test\",\r\n  encoding: \"unicode\",\r\n  host: \"localhost\",\r\n  port: \"5432\",\r\n  password: \"12345\",\r\n  username: \"test\")\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :comments, force: true do |t|\r\n    t.integer :tenant_id\r\n    t.integer :author_id\r\n    t.string :body\r\n    t.integer :position\r\n  end\r\n\r\n  create_table :authors, force: true do |t|\r\n    t.integer :tenant_id\r\n  end\r\nend\r\n\r\nclass Author < ActiveRecord::Base\r\n  query_constraints :tenant_id, :id\r\n\r\n  has_many :comments, -> { order(position: :asc) }, after_add: :on_comment_added\r\n\r\n  def on_comment_added(comment)\r\n    puts \"added comment: #{comment.author}\"\r\n  end\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  query_constraints :tenant_id, :id\r\n\r\n  belongs_to :author\r\n\r\n  after_initialize :calculate_rating, if: :new_record?\r\n\r\n  def calculate_rating\r\n    # In our-case since we access `self.author` in `after_initialize` (which always be empty in this case - valid)\r\n    # this will make `comment.author` to be later (in `on_comment_added`) to be blank.\r\n    #\r\n    # In real-world we call this in `after_initialize` and in other callbacks.\r\n    puts \"author_id: #{self.author}\"\r\n  end\r\nend\r\n\r\nauthor = Author.create!(tenant_id: 1)\r\nauthor.comments << Comment.create(body: \"hello\", tenant_id: 1)\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\n`comment.author` to be accesible in `on_comment_added`, so if we run the reproduce script without `query_constraints`,\r\nwe should get this output:\r\n```\r\nauthor_id: \r\nadded comment: #<Author:0x00000001312f6a48>\r\n```\r\n\r\n<!-- Tell us what should happen -->\r\n\r\n### Actual behavior\r\n\r\n`comment.author` is nil in `on_comment_added`, so we get this output:\r\n```\r\nauthor_id: \r\nadded comment: \r\n```\r\n\r\n### System configuration\r\n**Rails version**: 7.1\r\n**Ruby version**: `ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin22]`\r\n","comments":["hey, thanks for the report! It does look like a bug so I'll have a look\r\n","I have identified the root cause for this issue. This [method](https:\/\/github.com\/rails\/rails\/blob\/main\/activerecord\/lib\/active_record\/associations\/belongs_to_association.rb#L150) is used to trigger a reload if the foreign key changes. Current logic is unable to handle the case of Composite foreign keys. I can open a PR for the changes.\r\n\r\nIt's output doesn't seem to be getting used for anything other than comparison with it's previous output. If that's the case, we can just simply return the array of composite foreign keys, maybe joined as a string.\r\n\r\nAfter this update, a reload will be triggered if any of the composite foreign key changes. Ideally it should, I haven't really thought about it much, but I can't think of a situation where it should not.","Hi @iamradioactive \r\n\r\nI tested your specific PR on my project and looks like it fixes some tests, thanks for it!\r\nI opened another bug regarding `query_constraints` https:\/\/github.com\/rails\/rails\/issues\/50310 - I tried to test with your branch but it didn't fixes it.","@yosiat , Thanks. I found another issue with Query constraints while working on a fix for this one and was already working on it. I have created an issue now so that others are aware of it, hoping it will help us find any other issues if they exist.\r\n\r\nReferenced issue: #50315","While I believe that `stale_state` is problematic there is something I noticed about this setup and wanted to point it out.\r\n\r\nIf we remove `query_constraints` from the reproduction script (just to get back to a working setup) accessing `comment.author` inside `on_comment_added` issues a query to get the author. This is surprising because we already have an author instance in-memory and it should have been properly set through the `inverse_of`\r\n\r\nBut it looks like that `inverse_of` config is not being automatically derived, even though Rails should be capable of doing so. Perhaps I'm missing something but anyway after adding explicit `inverse_of: :author` and `inverse_of: :comments` we can avoid unnecessary query when accessing `comment.author`.\r\nHowever if we bring `query_constraints` back along with explicit `inverse_of` this will reveal another bug with automatic association PK calculation:\r\n```ruby\r\n(ruby) Author.new.association(:comments).reflection.join_primary_key\r\n[\"tenant_id\", [\"tenant_id\", \"author_id\"]]\r\n```\r\n\r\nI'll craft a separate reproduction script a bit later.\r\n\r\n@yosiat But after fixing all related issues you should strongly consider making sure that `inverse_of:` is properly set (or automatically derived by Rails, if this is one more bug) to avoid unnecessary query being made inside `on_comment_added`\r\nOr, atlernative, perhaps it would be more correct to get author as `self`, for example:\r\n\r\n```ruby\r\n  def on_comment_added(comment)\r\n    puts \"added comment, the author is: #{comment.author}\"\r\n  end\r\n\r\n  ### should be the same as\r\n\r\n  def on_comment_added(comment)\r\n    puts \"added comment, the author is: #{self}\"\r\n  end\r\n```\r\nWhich should avoid query as well.","> But it looks like that `inverse_of` config is not being automatically derived, even though Rails should be capable of doing so.\r\n\r\nI think it may be an unfortunate effect of the bug report template (which does not use latest `load_default`). If you enable `has_many_inversing` does it work how you expect?",">If you enable has_many_inversing does it work how you expect?\r\n\r\nIt does! That's a great catch, thank you!\r\n\r\nNevermind my comment about `inverse_of:` then. I'll investigate what was wrong in my reproduction that caused `join_primary_key` to be messed up but if I won't be able to have a reproduction using some meaningful flow I'll consider this to be just my mistake","This is rather a bug of #foreign_key which I suggest https:\/\/github.com\/rubyrider\/rails\/pull\/2\/files to @iamradioactive as his pull request was trying to fix it in the query constraints. \r\n\r\nThe foreign key supposed to handle the query constraints method which return as an array. Let me know if you see my point. \r\n\r\n<img width=\"1129\" alt=\"Screenshot 2023-12-16 at 12 02 32 AM\" src=\"https:\/\/github.com\/rails\/rails\/assets\/417169\/32fe7c5a-8d2b-4613-aa2b-7f5eb6fbb373\">\r\n\r\nMy pull request: https:\/\/github.com\/rails\/rails\/pull\/50372\r\n\r\nI expect this will fix this issue as well.\r\n","> This is rather a bug of #foreign_key which I suggest https:\/\/github.com\/rubyrider\/rails\/pull\/2\/files to @iamradioactive as his pull request was trying to fix it in the query constraints.\r\n> \r\n> The foreign key supposed to handle the query constraints method which return as an array. Let me know if you see my point.\r\n> \r\n>\r\n> My pull request: #50372\r\n> \r\n> I expect this will fix this issue as well.\r\n\r\n**Update:** \r\n- It is an independent bug in itself.\r\n- This conversation was already resolved on another PR . Dropping a comment here in order to avoid the confusion.\r\n- Reference : #50347"],"labels":["activerecord"]},{"title":"Rails 7.1 attached image raises error because \"Cannot get a signed_id for a new record\" in image_tag","body":"### Steps to reproduce\r\nSay I have a model with an attached image, like such:\r\n\r\n```ruby\r\nclass Company < ApplicationRecord\r\n  has_one_attached :logo\r\n  \r\n  validates :name, presence: true\r\nend\r\n```\r\n\r\n...and there is also a controller to update it using the route defined by `resources :companies` like such:\r\n\r\n```ruby\r\ndef update\r\n  @company = Company.find(params[:id])\r\n  company_params = params.require(:company).permit(:name, :logo)\r\n\r\n  if @company.update(company_params)\r\n    flash[:success] = \"Successfully updated Company!\"\r\n    redirect_to edit_company_path(@company)\r\n  else\r\n    render :edit\r\n  end\r\nend\r\n```\r\n\r\nThe `edit` form is an HTML form that looks as follows:\r\n\r\n```ruby\r\n<%= simple_form_for @company, url: edit_company_path(@company) do |f| %>\r\n  <%= f.input :name %>\r\n  <%= f.input :logo %>\r\n  <% if @company.logo.attached? %>\r\n    <%= image_tag @company.logo.variant(resize: \"200x200\") %>\r\n  <% end %>\r\n<% end %>\r\n```\r\n\r\nNow when I pass in an update payload that generates an invalid state (as per my `Company` model's validations) but has a **valid, existing, readable** logo file, the following error occurs:\r\n\r\n```\r\nActionView::Template::Error: Cannot get a signed_id for a new record\r\n\r\nFailure\/Error: <%= image_tag @company.logo.variant(resize: \"200x200\") %>\r\n\r\n     ActionView::Template::Error:\r\n       Cannot get a signed_id for a new record\r\n```\r\n\r\nThis is because the `@company.update(...)` statement in the controller writes the attributes, but the actual raw _saving_ to the database fails because of validations.\r\n\r\nThe edit form then tries to display the new, updated **but not persisted** logo in the frontend, which raises the error about `signed_id`.\r\n\r\n### Expected behavior\r\nThe `edit` form should render, with the form showing errors on the `name` field according to the validators of the `company` model. Uploading a correct, readable logo should not cause the form to throw an error when rendering.\r\n\r\n### Actual behavior\r\nThe error above is being thrown.\r\n\r\n### System configuration\r\n**Rails version**: 7.1.2\r\n\r\n**Ruby version**: 3.2.2\r\n","comments":["I can't speak to whether the above behavior makes sense, but I handle displaying images in my edit forms like so:\r\n\r\n```ruby\r\n<% if @company.logo.attached? &&\r\n      @company.logo.attachment.blob.present? &&\r\n      @company.logo.attachment.blob.persisted? %>\r\n  <%= image_tag @company.logo.variant(resize: \"200x200\") %>\r\n<% end %>\r\n```","I tried this simple repro but without simple_form- https:\/\/github.com\/vipulnsward\/ActiveStorageTest50234\r\n- One difference there is no \"resize\", its \"resize_to_limit\" \r\n\r\n@gregorbg does this happen on a normal form tag for you?\r\n","Running into the similar issue, following https:\/\/edgeguides.rubyonrails.org\/active_storage_overview.html#form-validation and using regular form helpers\r\n\r\n**Update:** Fixed it for my case. I *thought* I was using direct-uploads, but I forgot to include the necessary javascript. After I added it, `signed_in` worked for new records as well. \/cc @gregorbg "],"labels":["third party issue","activestorage"]},{"title":"Adjusted an example to align with the documentation section on reversing a previous migration.","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nFixes #50189. \r\nThere is an error in the following section [this documentation section](https:\/\/guides.rubyonrails.org\/active_record_migrations.html#reverting-previous-migrations).\r\n\r\nThere is confusion between the steps \r\n\r\n```\r\n1. Reverse the order of create_table and reversible.\r\n2. Replace create_table with drop_table.\r\n3. Finally, replace up with down and vice-versa.\r\n```\r\n\r\nand the example below\r\n\r\nI suggest modifying the example.\r\n\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Modifying the example seems like it might be ok, at least to me. But I'm thinking maybe someone removed it for a specific reason, and without knowing what that reason was, maybe simply adding back in the 'create_table' isn't the solution? Idk, what do you think?","@Leo-U I think it's just an oversight when updating the documentation, what do you think @adrianna-chang-shopify ?"],"labels":["activesupport","docs"]},{"title":"Encrypted columns in DB are not backwards compatible between 7.0 and 7.1","body":"I'm not sure if this is expected or a bug, but I can't find it in the changelogs. There were changes related to encryption though so maybe it's not a bug.\r\n\r\nThe issue is that we upgrade from Rails 7.0.8 to 7.1.1 and had to roll back due to some unrelated issues. Now, after the roll back we couldn't decrypt fields that were encrypted while on 7.1.1 anymore (using AR `encrypts(:foo)`). I tested with 7.1.2 and had the same issue.\r\n\r\n### Steps to reproduce\r\n\r\n1. Generate a new rails app on 7.0.8\r\n2. Add a model with an encrypted field\r\n3. On 7.0.8, create a record in the DB\r\n4. Change gemfile to have rails 7.1.2 and bundle\r\n5. Create another record in the DB. At this point it's possible to decrypt the old record\r\n6. Add the setting `config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA256` to application.rb\r\n7. Create a third record in the DB\r\n8. Go back to Rails 7.0.8\r\n9. Read the records in the DB. First and second records are fine, but the third will fail with\r\n```\r\n\/Users\/...\/.asdf\/installs\/ruby\/3.1.2\/lib\/ruby\/gems\/3.1.0\/gems\/activerecord-7.0.8\/lib\/active_record\/encryption\/encryptor.rb:58:in `rescue in decrypt': ActiveRecord::Encryption::Errors::Decryption (ActiveRecord::Encryption::Errors::Decryption)\r\n\/Users\/...\/.asdf\/installs\/ruby\/3.1.2\/lib\/ruby\/gems\/3.1.0\/gems\/activerecord-7.0.8\/lib\/active_record\/encryption\/cipher\/aes256_gcm.rb:80:in `rescue in decrypt': ActiveRecord::Encryption::Errors::Decryption (ActiveRecord::Encryption::Errors::Decryption)\r\n\/Users\/...\/.asdf\/installs\/ruby\/3.1.2\/lib\/ruby\/gems\/3.1.0\/gems\/activerecord-7.0.8\/lib\/active_record\/encryption\/cipher\/aes256_gcm.rb:76:in `final': OpenSSL::Cipher::CipherError\r\n```\r\n\r\nI created a repository to easier reproduce this: https:\/\/github.com\/Linuus\/rails-encryption\/\r\n\r\n1. Clone the repo\r\n2. `git checkout 8a4a807faed975545b13fb710f7e119501daa261`\r\n3. `bundle`\r\n4. `rails c`\r\n5. `Bar.create!(secret: \"rails708\")`\r\n6. `git checkout e213132e7c85747560b395f0f34f6628b3b202cc` (switch to 7.1.2)\r\n7. `bundle`\r\n8. `rails c`\r\n9. `Bar.create!(secret: \"rails712\")`\r\n10. `git checkout 05f77873a0fb71de34e1fc15c8c786b543ead2b6` (sets `config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA256`)\r\n11. `rails c`\r\n12. `Bar.create!(secret: \"rails712-2\")`\r\n13. `git checkout 8a4a807faed975545b13fb710f7e119501daa261` (Roll back to 7.0.8)\r\n14. `rails c`\r\n15. `Bar.first.secret #=> rails708`\r\n16. `Bar.second.secret #=> rails712`\r\n17. `Bar.third.secret` crashes with the above decryption error\r\n\r\nIn 7.0.8 we have this:\r\n\r\n```\r\nLoading development environment (Rails 7.0.8)\r\nirb(main):001> Rails.configuration.active_support.key_generator_hash_digest_class\r\n=> OpenSSL::Digest::SHA256\r\n```\r\n\r\nIn 7.1.2 we haven't set the SHA1 setting (makes no difference as far as I can see. 7.1.2 can still decrypt data from 7.0.8)\r\n\r\n```\r\nLoading development environment (Rails 7.1.2)\r\nirb(main):001> Rails.configuration.active_record.encryption.support_sha1_for_non_deterministic_encryption\r\n=> nil\r\n```\r\n\r\nSo as far as I understand the docs, the encryption shouldn't change?\r\n\r\n### Expected behavior\r\n\r\nThe records should all be decryptable\r\n\r\n### Actual behavior\r\n\r\nThe record created in Rails 7.1.2 and with `config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA256` fail to decrypt.\r\n\r\n### System configuration\r\n**Rails version**: 7.0.8 -> 7.1.2 (or 7.1.1.)\r\n\r\n**Ruby version**:  ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [arm64-darwin21]","comments":["Update\r\n\r\nIf I'm in 7.1.2 and set `config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA1` instead. Create a record and then go back to 7.0.8 it seems to work. So maybe it's [this](https:\/\/github.com\/rails\/rails\/issues\/42922) and the data encrypted on 7.0.8 is SHA1?\r\n\r\nSo... can 7.1.2 decrypt SHA1 (even if configured for SHA256) but 7.0.8 can't decrypt SHA256 after rolling back?","Okay, so the issue seems to be:\r\n\r\n1. The data in 7.0.8 is SHA1 (even if it says SHA256)\r\n2. When moving to 7.1 and set SHA256, it reports `Rails.configuration.active_record.encryption.support_sha1_for_non_deterministic_encryption => nil` but internally it is set to `true` ([link](https:\/\/github.com\/rails\/rails\/blob\/v7.1.1\/activerecord\/lib\/active_record\/encryption\/configurable.rb#L25-L27)).\r\n3. 7.1 can now decrypt the SHA1 data until you load the 7.1 defaults which sets `support_sha1_for_non_deterministic_encryption` to `false`.\r\n\r\nSo, the alternatives for existing apps are:\r\n\r\n1. Go with the less secure SHA1. All should work.\r\n2. Go with SHA256, and set `support_sha1_for_non_deterministic_encryption` to `true` and accept that it is impossible to roll back to < 7.1.\r\n\r\nCan 2 above be made more clear in the upgrade docs since it looks like everything is fine until you need to roll back?","I'm currently going through the upgrade from 7.0 to 7.1 and experience the same.\r\nI think we will stick with SHA1 for now, but I tried to fiddle around a bit.\r\n\r\nIt should be possible to add a KeyProvider using SHA256 with Rails 7.0.x. So if you need to go back from 7.1 to 7.0 and have used SHA256 with 7.1 you can do something like this in application.rb:\r\n\r\n```ruby\r\nclass Sha256KeyGenerator < ActiveRecord::Encryption::KeyGenerator\r\n  def derive_key_from(password, length: ActiveRecord::Encryption.cipher.key_length)\r\n    ActiveSupport::KeyGenerator.new(password, hash_digest_class: OpenSSL::Digest::SHA256)\r\n                               .generate_key(Rails.application.credentials.active_record_encryption.key_derivation_salt!, length)\r\n  end\r\nend\r\n\r\nclass Sha256KeyProvider < ActiveRecord::Encryption::KeyProvider\r\n  def initialize(passwords)\r\n    super(Array(passwords).collect { |password| derive_key_from(password, using: Sha256KeyGenerator.new) })\r\n  end\r\n\r\n  private\r\n\r\n  def derive_key_from(password, using: key_generator)\r\n    secret = using.derive_key_from(password)\r\n    ActiveRecord::Encryption::Key.new(secret)\r\n  end\r\nend\r\n\r\n\r\nmodule MyApp\r\n  class Application < Rails::Application\r\n    # ...\r\n    config.active_record.encryption.previous = [\r\n      {key_provider: Sha256KeyProvider.new(Rails.application.credentials.active_record_encryption.primary_key!)}\r\n    ]\r\n    # ...\r\n  end\r\nend\r\n```\r\n\r\nThis is basically the same what Rails 7.1 does for compatibility with SHA1 when setting `support_sha1_for_non_deterministic_encryption = true`.\r\nThe custom KeyProvider and KeyGenerator are necessary because ActiveRecord 7.0.x `ActiveRecord::Encryption::KeyGenerator` does not support setting the `hash_digest_class` and `ActiveRecord::Encryption::DerivedSecretKeyProvider` does not support setting the `key_generator`.\r\n\r\n","@Flixt Thanks! Yeah we are currently doing something very similar in our codebase as well \ud83d\udc4d ","I'm stumbling over this same thing now, and I think the downgrade problem is a known issue. See the following comment: https:\/\/github.com\/rails\/rails\/pull\/44540#issuecomment-1082623602\r\n\r\n> ...that still leaves inaccessible data if someone upgrades and then reverts, say\r\n\r\nPerhaps it's worth adding more detail about this to the Rails upgrade guide to warn about this gotcha?\r\n\r\nThere's another somewhat related issue having to do with initialization order that I think may also be worth highlighting: https:\/\/github.com\/rails\/rails\/issues\/50212#issuecomment-1907637879\r\n\r\nAlso (this might be a stretch, but worth mentioning) we could consider trying to add a patch back in Rails 7.0 so that it would be possible to decrypt both sha1 and sha256. To my mind, if Rails 7.0 (and 7.1, ideally) could decrypt both sha1 and sha256, it doesn't much matter what the default is when writing since you'd be able to decrypt either. ","Thanks for the tip! I hadn't seen that before. I gave it a try following a modified script from https:\/\/github.com\/rails\/rails\/issues\/50212 but I still ran into an issue in the end where I had data created in Rails 7.1.3 that I wasn't able to decrypt in 7.0.8. I might be doing something wrong (or getting confused, because this is all very confusing!) but here's the script I ran through in case you'd like to try to reproduce:\r\n\r\n```\r\ncd test_rails_enc\r\nrails _7.0.8_ new test_rails_enc\r\ncd test_rails_enc\r\nbin\/rails db:encryption:init\r\nrails credentials:edit\r\nrails g model user email:string name:string\r\nrake db:migrate\r\n\r\n# app\/models\/user.rb\r\nclass User < ApplicationRecord\r\n  encrypts :email, deterministic: true\r\n  encrypts :name\r\nend\r\n\r\n# config\/application.rb\r\nconfig.active_record.encryption.store_key_references = true\r\n\r\nrails c\r\nUser.create(name: \"Zaratan\", email: \"zaratan@hey.com\")\r\n\r\n# all good so far on Rails 7.0.8, now let's upgrade to Rails 7.1.3...\r\n\r\n# Gemfile\r\ngem \"rails\", \"~> 7.1.3\"\r\n\r\nbundle install\r\n\r\nrails c\r\nUser.pluck(:email).first\r\n=> ActiveRecord::Encryption::Errors::Decryption # bad!\r\nUser.pluck(:name).first\r\n=> \"Zaratan\"\r\n\r\n# I wish we didn't have to make configuration changes here, but I believe it's necessary as per https:\/\/github.com\/rails\/rails\/pull\/44873 and I wonder if we should update the upgrade guide to make this more clear\r\n\r\n# config\/application.rb\r\nconfig.load_defaults 7.0 # 7.1 also works\r\nconfig.active_record.encryption.store_key_references = true\r\nconfig.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA256\r\nconfig.active_record.encryption.support_sha1_for_non_deterministic_encryption = true\r\n\r\nrails c\r\nUser.pluck(:email).first\r\n=> \"zaratan@hey.com\" # good!\r\nUser.pluck(:name).first\r\n=> \"Zaratan\" # good!\r\n\r\n# Now let's create a record in Rails 7.1.3 with the above config...\r\n\r\nUser.create(name: \"Zaratan2\", email: \"zaratan2@hey.com\")\r\n\r\n# ...and then downgrade back to Rails 7.0.8...\r\n\r\n# Gemfile\r\ngem \"rails\", \"~> 7.0.8\"\r\n\r\n# config\/application.rb\r\nconfig.load_defaults 7.0\r\nconfig.active_record.encryption.store_key_references = true\r\n\r\nbundle install\r\n\r\nrails c\r\nUser.pluck(:email).last\r\n=> \"zaratan2@hey.com\"\r\nUser.pluck(:name).last\r\n=> ActiveRecord::Encryption::Errors::Decryption # bad!\r\n\r\n# ...and this is where I think I've confused myself, because now I'm not able to read the record that was created in Rails 7.1.3 even with what I think should be the correct config:\r\n\r\n# config\/application.rb\r\nconfig.load_defaults 7.0\r\nconfig.active_record.encryption.store_key_references = true\r\nconfig.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA256\r\nconfig.active_record.encryption.support_sha1_for_non_deterministic_encryption = true\r\n\r\nrails c\r\nUser.pluck(:email).last\r\n=> \"zaratan2@hey.com\"\r\nUser.pluck(:name).last\r\nActiveRecord::Encryption::Errors::Decryption # bad!\r\n```\r\n\r\nAgain, I might be getting something wrong here (please do try to reproduce!) but it looks to me like it's impossible to downgrade from Rails 7.1.3 to 7.0.8 without data loss, if new encrypted records were created in Rails 7.1.3?","@trevorturk sorry, I was mistaken. I redact what I said. I was looking at a deterministically encrypted model, which wasn't effected. That was an oversight on my part. Upon further inspection, we do have some botched non-deterministic encrypted data now since we had to do a couple rollbacks and are implementing the above workaround until we can successfully roll out with 7.1 (which we're now going to do during off-hours because of the risk). This has been a headache.","Gotcha, ok. Yeah, I'm also dealing with some issues upgrading from 7.0.8 -> 71.13 that I'm still trying to debug, but luckily didn't deploy to production yet, and I'll be testing carefully before proceeding further!\r\n\r\nI'm trying to get my head around all of this so at least perhaps I can suggest some improvements to the documentation to reduce the chances that others will run into similar issues, but I left a comment here https:\/\/github.com\/rails\/rails\/pull\/48530#issuecomment-1908595655 because I'm wondering if the best solution would be a new config option for 7.1.x (also back-ported to 7.0.x) to enable decrypting any of the possible configs Rails has shipped with thus far. \r\n\r\nI'm not terribly concerned about which config I'm using, but I would like some assurance that I'll be able to read any preexisting data if the defaults change. With my current app, for example, I intentionally left things in the default state (no explicit config options) which I was hoping would be safest. But now I believe I'll have to add config options in order to read older data after I upgrade, since the default has changed. "],"labels":["activerecord","encryption"]},{"title":"(feat) Give `numericality` validation `Clusivity` considerations","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\nIn short, the `numericality` validator doesn't support method names, and we would like it to within our codebase.\r\n\r\nThis PR gives the `numericality` validator, in order of importance,\r\n\r\n1) the ability to accept a range returned from a method call\r\n2) more versatility, it can now accept an array or an array returned from a method call\r\n\r\n### Detail\r\n\r\n- `includes Clusivity` in `numericality.rb`\r\n- broadens initial type check within `check_validity!`\r\n- in `validate_each`, deals with cases of symbols\r\n- in `validate_each`, uses `includes?` to deal with ranges, arrays, and ranges\/arrays returned from method calls\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] This is my first Rails PR and I'm scared \/ please be nice \r\n","comments":[],"labels":["activemodel"]},{"title":"[Fix #50193] Allow custom Thor commands to load from `lib\/commands` by ensuring `lib` is added to the $LOAD_PATH before looking up commands","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nFixes #50193\r\n\r\nThis Pull Request makes Thor commands included in `lib\/commands\/*_command.rb` work. They previously did not work because the commands were loaded before the Application was required, which meant that `lib` had not yet been added to the $LOAD_PATH (requiring the Application adds `lib` to the $LOAD_PATH, explained in #48596).\r\n\r\nBecause requiring the application could slightly slow down invoking commands, this change will first try to find the command _without_ requiring the Application, and if not found, will then require the Application and try the lookup again\r\n\r\ncc @matthewd \r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\nI think Thor commands, especially the options syntax, is a big improvement over Rake, which is why I would like this to work, and it largely seems like it _should_ work with this very small tweak.\r\n\r\nThings to possible defer:\r\n\r\nDocumentation: Guides can be updated to explain Thor commands alongside Rake tasks. Maybe a default `lib\/commands\/.keep` too?\r\n\r\nAlso...\r\n\r\nWhile working on this, I did notice that it is _very easy_ for command files to collide and are thus load-order dependent. This is because the files are required with simply `lib\/commands\/*_command.rb`:\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/736353dda303a96a1e8972cf7dc2de0b2b493e58\/railties\/lib\/rails\/command\/behavior.rb#L40-L44\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/736353dda303a96a1e8972cf7dc2de0b2b493e58\/railties\/lib\/rails\/command\/behavior.rb#L56-L60\r\n\r\nSo if 2 gems, or the application and another gem each have matching filenames, only one of them will be loaded.  I want to call this out because `lib` is added at the front of $LOAD_PATH, which means it will always have the opportunity to clobber someone else.\r\n\r\nThese changes were introduced here: https:\/\/github.com\/rails\/rails\/commit\/115abd52b6bf6801dce7c3fbcb0e29d4213a5bb2\r\n\r\nSo maybe that `require` should be changed to a `load`, or the required paths should be changed to absolute file paths. \r\n\r\n\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["railties"]},{"title":"Changing a record's STI type using nested attributes breaks when classes have different validations","body":"When updating STI record's types using nested attributes the instance of the record doesn't become the new class automatically and therefore validations are run against the old class.\r\n\r\n### Steps to reproduce\r\n\r\n```ruby\r\nrequire 'bundler\/inline'\r\n\r\ngemfile(true) do\r\n  source 'https:\/\/rubygems.org'\r\n\r\n  gem 'rails', '7'\r\n  gem 'sqlite3'\r\nend\r\n\r\nrequire 'active_record'\r\nrequire 'minitest\/autorun'\r\nrequire 'logger'\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :people, force: true\r\n\r\n  create_table :animals, force: true do |t|\r\n    t.text :type\r\n    t.text :fav_toy\r\n    t.integer :person_id\r\n  end\r\nend\r\n\r\nclass Animal < ActiveRecord::Base\r\n  belongs_to :person\r\nend\r\n\r\nclass Cat < Animal\r\n  validates :fav_toy, inclusion: { in: %w[catnip mouse] }\r\nend\r\n\r\nclass Dog < Animal\r\n  validates :fav_toy, inclusion: { in: %w[lamb duck] }\r\nend\r\n\r\nclass Person < ActiveRecord::Base\r\n  has_many :animals\r\n  accepts_nested_attributes_for :animals\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_updating_type\r\n    # Create a `Person` with a `Cat`.\r\n    person = Person.create!(\r\n      animals_attributes: [{ type: 'Cat', fav_toy: 'catnip' }]\r\n    )\r\n\r\n    persons_cat = person.animals.first\r\n\r\n    # Now try to change the `Cat` to be a `Dog`. This fails\r\n    # because `Cat` validations are still being run.\r\n    person.update!(\r\n      animals_attributes: [{ id: persons_cat.id, type: 'Dog', fav_toy: 'duck' }]\r\n    )\r\n\r\n    assert Animal.find(persons_cat.id).is_a?(Dog)\r\n  end\r\n\r\n  # What works is to use `assign_attributes`, go through the\r\n  # association records and replace them with the correct\r\n  # instances and then save the parent.\r\n  def test_updating_type_and_changing_instances\r\n    person = Person.create!(\r\n      animals_attributes: [{ type: 'Cat', fav_toy: 'catnip' }]\r\n    )\r\n\r\n    persons_cat = person.animals.first\r\n\r\n    person.assign_attributes(\r\n      animals_attributes: [{ id: persons_cat.id, type: 'Dog', fav_toy: 'duck' }]\r\n    )\r\n\r\n    association = person.association(:animals)\r\n\r\n    association.target.each.with_index do |animal, i|\r\n      association.target[i] = animal.becomes!(animal.type.constantize) if animal.type_changed?\r\n    end\r\n\r\n    person.save!\r\n\r\n    assert Animal.find(persons_cat.id).is_a?(Dog)\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe `Cat` becomes a `Dog` and the update succeeds.\r\n\r\n### Actual behavior\r\n\r\nThe update fails with a validation error: `ActiveRecord::RecordInvalid: Validation failed: Animals fav toy is not included in the list`\r\n\r\n### System configuration\r\n**Rails version**: 7.0.0\r\n\r\n**Ruby version**: 2.7.5\r\n","comments":["This isn't necessarily a nested attributes problem cause the following will also fail validations:\r\n\r\n```ruby\r\nanimal = Animal.create!(type: 'Cat', fav_toy: 'catnip')\r\nanimal.update!(type: 'Dog', fav_toy: 'duck')\r\n```\r\n\r\nNested attributes simply assigns attributes to the target record in your case.\r\n\r\nIt's a tricky case nevertheless. One could argue that because the `type` change hasn't been persisted yet, the record is still a `Cat`. For example, if we remove the validations and the changes are persisted, the record is still an instance of `Cat`:\r\n\r\n```ruby\r\nanimal = Animal.create!(fav_toy: 'catnip')\r\n\r\nputs animal.class.to_s # => \"Cat\"\r\n\r\nanimal.update!(type: 'Dog', fav_toy: 'duck') # assume this succeeds\r\n\r\nputs animal.class.to_s # => \"Cat\"\r\n\r\nanimal.reload          # => ActiveRecord::RecordNotFound: Couldn't find Cat with ...\r\n```\r\n\r\nHowever, we do initialize the correct subclass [when initializing the record](https:\/\/github.com\/rails\/rails\/blob\/2fb05958a61e0c347b1e97b8a2efc54e7f8b8e87\/activerecord\/lib\/active_record\/inheritance.rb#L53-L56) (we get an instance of `Cat` despite creating an `Animal` because the `type` is provided), so it might make sense to do the same on update \ud83e\udd37\ud83c\udffd\u200d\u2642\ufe0f"],"labels":["activerecord"]},{"title":"Automatically disable joins for through associations across different connection pools ","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request changes the default behavior for through associations to disable joins when the connection pools differ, in which case the association would be broken if the user didn't specify `disable_joins: true`. \r\n\r\nThis is not a breaking change, as the only effect it could have would be to fix broken associations.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["@eileencodes thank you for the feedback! I'll do some more thorough testing"],"labels":["activerecord"]},{"title":"Add support for index storage parameters for PostgreSQL","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request adds support for [index storage parameters](https:\/\/www.postgresql.org\/docs\/current\/sql-createindex.html#SQL-CREATEINDEX-STORAGE-PARAMETERS) for PostgreSQL.\r\n\r\n### Detail\r\n\r\nThis Pull Request adds a `:with` option to `add_index`:\r\n\r\n```ruby\r\nadd_index :users, :email, with: { fillfactor: 50 }\r\n```\r\n\r\nwhich generates:\r\n\r\n```sql\r\nCREATE INDEX \"index_users_on_email\" ON \"users\" (\"email\") WITH (fillfactor=50);\r\n```\r\n\r\n### Additional information\r\n\r\n- This feature was added in [PostgreSQL 8.2](https:\/\/www.postgresql.org\/docs\/8.2\/sql-createindex.html).\r\n- [SQL Server](https:\/\/learn.microsoft.com\/en-us\/sql\/t-sql\/statements\/create-index-transact-sql?view=sql-server-ver16) also supports the `WITH` syntax.\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Hey @ankane \ud83d\udc4b \r\n\r\nNice to see your contribution. Some initial questions I had:\r\n\r\n1. Do you want to preemptively limit setting `fillfactor` to supported index types: B-tree, hash, GiST and SP-GiST? (Noticed the explicit list of types in docs)\r\n1. Do you want to document the default `fillfactor` value somewhere as part of the change? It's 90 for B-tree indexes.\r\n1. Do you want to verify the `fillfactor` value is a valid integer value (at least for B-tree) between 10 to 100 (per docs)? I'll check out the code.\r\n1. Should there be a warning (from PostgreSQL docs) about how raising the `fillfactor` to 100 could harm performance?\r\n1. Are you detecting or recommending fillfactor adjustments for indexes in PgHero <https:\/\/github.com\/ankane\/pghero> or other tools to help improve performance?\r\n\r\nFrom a workflow perspective:\r\n\r\nWould you recommend continuing to start with the default fillfactor value, then adjusting later as needed? Unfortunately it doesn't look like `ALTER INDEX` currently supports `CONCURRENTLY`. Please double check me on that. We'd be limited to creating a replacement index with the new `fillfactor` value, then dropping the previous index. Do third party tools like pg_repack or pg_squeeze have an online index fillfactor adjustment? I did a basic search for `fillfactor` on <https:\/\/reorg.github.io\/pg_repack\/> and didn't see a mention, but may have missed it.\r\n\r\nHere are some SQL queries to share for others if they're interested. These aren't intended to be part of the code changes, just some exploration I was doing locally with my indexes, that others may want to try out.\r\n\r\n```sql\r\n-- Change the fillfactor for an existing index called \"myindex\"\r\nALTER INDEX myindex SET (FILLFACTOR = 60);\r\n```\r\n\r\n```sql\r\n-- Inspect the current fillfactor value for \"myindex\"\r\nSELECT\r\n    idx.relname AS index_name,\r\n    idx.reloptions\r\nFROM pg_index i\r\nJOIN pg_class idx ON idx.oid = i.indexrelid\r\nWHERE idx.relname = 'myindex';\r\n```\r\n\r\nGood luck! Let me know how I can help.","Hey @andyatkinson,\r\n\r\nThanks for the response. This feature is for any storage parameters, so I don't think there should be anything specific to fillfactor (other than being an example). fwiw, my specific use case is for [Neighbor](https:\/\/github.com\/ankane\/neighbor) \/ [pgvector](https:\/\/github.com\/pgvector\/pgvector):\r\n\r\n```ruby\r\nadd_index :items, :embedding, using: :ivfflat, opclass: :vector_l2_ops, with: { lists: 100 }\r\n# and\r\nadd_index :items, :embedding, using: :hnsw, opclass: :vector_l2_ops, with: { m: 16, ef_construction: 64 }\r\n```\r\n\r\nAlso, altering storage parameters should be instantaneous (so no need for `CONCURRENTLY`). From the [Postgres docs](https:\/\/www.postgresql.org\/docs\/current\/sql-alterindex.html):\r\n\r\n> Note that the index contents will not be modified immediately by this command; depending on the parameter you might need to rebuild the index with REINDEX to get the desired effects."],"labels":["activerecord"]},{"title":"Fix duplicate `DEFERRABLE` directive added for foreign keys in PostgreSQL and SQLite","body":"When adding a foreign key with a `:deferrable` option, a duplicate `\"DEFERRABLE\"` directive is generated. \r\nSomething like:\r\n```sql\r\nALTER TABLE \"authors\" ADD CONSTRAINT \"fk_rails_94423a17a3\"\r\nFOREIGN KEY (\"author_address_id\")\r\n  REFERENCES \"author_addresses\" (\"id\")\r\n DEFERRABLE INITIALLY IMMEDIATE DEFERRABLE INITIALLY IMMEDIATE\r\n```\r\n\r\nThis PR fixes that.","comments":["I don't think this affects sqlite, but could be a version thing.\r\n\r\n```\r\nbrew info sqlite\r\n==> sqlite: stable 3.44.1 (bottled) [keg-only]\r\n```\r\n\r\nUsing this test to assert only one occurrence of \"DEFERRABLE INITIALLY IMMEDIATE\":\r\n\r\n```ruby\r\nassert_sql(\/\\(\"id\"\\)\\s+(DEFERRABLE INITIALLY IMMEDIATE){1}\\W*\\z\/i) do\r\n  @connection.add_foreign_key :astronauts, :rockets, column: \"rocket_id\", deferrable: :immediate\r\nend\r\n```\r\n\r\nHowever, running with postgres does produce a test failure:\r\n\r\n```bash\r\n$ ARCONN=postgresql bin\/test test\/cases\/migration\/foreign_key_test.rb\r\n\r\nFailure:\r\nActiveRecord::Migration::ForeignKeyTest#test_deferrable_foreign_key [\/Users\/zzak\/code\/rails\/activerecord\/test\/cases\/migration\/foreign_key_test.rb:522]:\r\nQuery pattern(s) \/\\(\"id\"\\)\\s+(DEFERRABLE INITIALLY IMMEDIATE){1}\\W*\\z\/i not found.\r\nQueries:\r\nALTER TABLE \"astronauts\" ADD CONSTRAINT \"fk_rails_78146ddd2e\"\r\nFOREIGN KEY (\"rocket_id\")\r\n  REFERENCES \"rockets\" (\"id\")\r\n DEFERRABLE INITIALLY IMMEDIATE DEFERRABLE INITIALLY IMMEDIATE.\r\nExpected [\/\\(\"id\"\\)\\s+(DEFERRABLE INITIALLY IMMEDIATE){1}\\W*\\z\/i] to be empty?.\r\n```\r\n\r\nI was lazy and the regex doesn't work on pg even with `{2}` but I think that is a separate problem.","Which postgres version do you have?","ping @zzak ","@fatkodima Sorry I missed your ping, I'm pretty sure it was `postgresql@14` from homebrew. You probably also want to `s\/assert_sql\/assert_queries_match` \ud83d\udc4d ","Tested for postgresql@14 - still works for me \ud83d\ude05 "],"labels":["activerecord"]},{"title":"`lib\/commands\/*_command.rb` should load custom Thor commands","body":"### Expected behavior\r\n\r\nI should be able to create custom Rails Thor commands for my application in a way that is analogous to adding custom Rake tasks:\r\n\r\n| Rake Task | Thor Command |\r\n|-----------|--------------|\r\n| `Rails.root\/lib\/tasks\/custom.task` | `Rails.root\/lib\/commands\/custom_command.rb` |  \r\n\r\nFor example, this should create the custom command `$ bin\/rails custom:something` with all of the Thor niceties:\r\n\r\n```ruby\r\n# lib\/commands\/custom_command.rb\r\nmodule Rails\r\n  module Command\r\n    class CustomCommand < Base\r\n      desc \"something\", \"Perform a custom task\"\r\n      method_option :nice, type: :boolean, desc: \"Thor args are nice\"\r\n      def something\r\n        puts \"Custom task performed!\"\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThis behavior already works for Rails Engines (aside: maybe the engine generator should automatically create a `lib\/commands` directory in addition to `lib\/tasks`). Here's where those lookups happen:\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/139c5678aa5d9a4209ca06919abea7a9da449b36\/railties\/lib\/rails\/command.rb#L163-L169\r\n\r\nThese are loaded via the `$LOAD_PATH`, for a specific command:\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/139c5678aa5d9a4209ca06919abea7a9da449b36\/railties\/lib\/rails\/command\/behavior.rb#L36-L45\r\n\r\n... or all commands for `help`:\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/139c5678aa5d9a4209ca06919abea7a9da449b36\/railties\/lib\/rails\/command\/behavior.rb#L55-L60\r\n\r\n### Actual behavior\r\n\r\nThe `Rails.root\/lib` directory does not get added to the $LOAD_PATH before those lookups happen, so they're never loaded and the commands are not found.\r\n\r\nI think the simple solution here is to make sure that `Rails.root\/lib` is added to the `$LOAD_PATH` when the `$ rails` command is initially run. That _normally_ happens when the Application is required and there's a custom command method to do that: [`require_application!`](https:\/\/github.com\/rails\/rails\/blob\/139c5678aa5d9a4209ca06919abea7a9da449b36\/railties\/lib\/rails\/command\/actions.rb#L13-L16), but I imagine there could be reasons why that's done selectively. Hence opening an issue in case someone has better ideas.\r\n\r\nThe \"add lib to $LOAD_PATH\" behavior was most recently solidified in https:\/\/github.com\/rails\/rails\/pull\/48596\r\n\r\n### System configuration\r\n\r\n**Rails version**: 7.1.1\r\n\r\n","comments":["I looked at this with @matthewd and we think this will work:\r\n\r\n```diff\r\ndiff --git a\/railties\/lib\/rails\/command.rb b\/railties\/lib\/rails\/command.rb\r\n--- a\/railties\/lib\/rails\/command.rb\r\n+++ b\/railties\/lib\/rails\/command.rb\r\n@@ -65,7 +65,12 @@\r\n         full_namespace = full_namespace.to_s\r\n         namespace, command_name = split_namespace(full_namespace)\r\n-        command = find_by_namespace(namespace, command_name)\r\n \r\n         with_argv(args) do\r\n+          command = find_by_namespace(namespace, command_name)\r\n+          unless command && command.all_commands[command_name]\r\n+            require_application!\r\n+            command = find_by_namespace(namespace, command_name)\r\n+          end\r\n+\r\n           if command && command.all_commands[command_name]\r\n             command.perform(command_name, args, config)\r\n```\r\n\r\n...now to write some tests.","This issue has been automatically marked as stale because it has not been commented on for at least three months.\nThe resources of the Rails team are limited, and so we are asking for your help.\nIf you can still reproduce this error on the `7-1-stable` branch or on `main`, please reply with all of the information you have about it in order to keep the issue open.\nThank you for all your contributions.\n","Still on my todo, but open if anyone else gets to it. "],"labels":["railties"]},{"title":"Inconsistency in Documentation: Mismatch Between `revert` Code Example and Subsequent Steps","body":"There is an apparent error in [this documentation section](https:\/\/guides.rubyonrails.org\/active_record_migrations.html#reverting-previous-migrations).\r\n\r\nThe point of confusion is the last part of the section where it says `the same migration could also have been written without using revert but this would have involved a few more steps` and proceeds to list some steps.\r\n\r\nTo my understanding, the phrase `the same migration` refers to the code example immediately above that text -- that code example demonstrates the use of `revert` to selectively rollback part of a previous migration. The way it works is that you copy and paste part of the code from a previous migration and wrap it in that `revert` block. Then, rails automatically does the opposite of what is included there. So, that part I think I understand.\r\n\r\nSo now, back to the text at the end. The steps listed are:\r\n```\r\n    1. Reverse the order of create_table and reversible.\r\n    2. Replace create_table with drop_table.\r\n    3. Finally, replace up with down and vice-versa.\r\n```\r\nHere's what I don't get: that second code example in the docs section that demonstrates the use of revert to selectively revert part of a migration does not involve dropping any table. It would make sense to me if that copy-pasted code included a create_table statement, but it doesn't. So, to my understanding, the steps listed with that last statement don't make sense.\r\n\r\nFor more context, the `ExampleMigration` referred to in that second code example appears to refer to a migration mentioned further up in the docs in another section, [here](https:\/\/guides.rubyonrails.org\/active_record_migrations.html#using-reversible).\r\n\r\n**It has been pointed out to me that the code example did originally have a `create_table` call, as you can see [here](https:\/\/github.com\/rails\/rails\/blob\/c4c3a44685b4cfb1ffd4c27309ccfbf1bb53d4e5\/guides\/source\/active_record_migrations.md?plain=1#L606C6-L606C6)**. Therefore, it looks to me like the cause of the confusion is that when the section was updated to remove the `create_table` call, it caused the last bit of the wording in that section to become nonsensical.\r\n\r\nI am not any kind of Rails expert, so I wouldn't want to try and edit the documentation myself, so I have decided to open this issue here. Thank you!","comments":["@zzak Can I work on this?","@apoorv1316 feel free to open a PR :)","Hi @Leo-U, i opened a PR, if you have any feedback ","> Hi @Leo-U, i opened a PR, if you have any feedback\r\n\r\nOh, i thought @apoorv1316 claimed it. btw this is actually my first rails issue report, so I don't feel qualified to approve any edits","Just a _very_ quick look at the context around this:\r\n\r\n* Seems it was added in a81845f26864d076970e706863c766aead432672\r\n* a5b3f372ab30e043d25b25b05e603e6ed33c0ee9 changed the table names and removed the `create_table`\r\n\r\nMaybe worth looking at those further, but also just looking at the other examples around them seem to support that each section should define the schema consistently. \ud83e\udd14 It's not like there is a \"setup\" section before all of these examples where we define the schema up-front -- it's all pretty ad-lib, but I think there is certainly room for improvement.\r\n\r\n> I don't feel qualified to approve any edits\r\n\r\nAlso, this is the beauty of OSS, you don't need anyone's approval to contribute. Thanks for reporting this issue!","@zzak Np, glad to!\r\n\r\nLooks like @cedriccarrard has added their commit as you can see [here](https:\/\/github.com\/rails\/rails\/pull\/50228). Will their commit be successful, and should I therefore close this issue?","> Will their commit be successful, and should I therefore close this issue?\r\n\r\nThe issue should close automatically once the PR that \"fixes #NNNN\" is merged.","@zzak Can you review my pull requests? Or do I need to speak to someone in charge of documentation? Thanks for help"],"labels":["docs"]},{"title":"ActiveStorage::VariantWithRecord should keep the variant key to store the file","body":"### Steps to reproduce\r\nWith `config.active_storage.track_variants = false`\r\n```ruby\r\nMyModel.last.photo.variant(resize_to_fit: [200, 100]).key\r\n=> \"variants\/xxxxxxx\"\r\n```\r\n\r\nWith `config.active_storage.track_variants = true`\r\n```ruby\r\nMyModel.last.photo.variant(resize_to_fit: [200, 100]).key\r\n=> nil\r\n```\r\n\r\n### Expected behavior\r\nWith `config.active_storage.track_variants = true` the variant should use [the key method](https:\/\/github.com\/rails\/rails\/blob\/354d68e8a63b21e47a529105a508411bfe8be869\/activestorage\/app\/models\/active_storage\/variant.rb#L73) in order to store the variants in the folder \"variants\".\r\n\r\n### Actual behavior\r\nIt stored the variation_digest in the root \"folder\" instead of the \"variants\" folder.\r\n\r\n### System configuration\r\n**Rails version**: 7.1\r\n\r\n**Ruby version**: 3.2.2\r\n","comments":["Hello! \r\n\r\nI'm not sure I understand your problem. When we write the following code: \r\n\r\n```rb\r\nuser.avatar.variant(resize_to_limit: [100, 100])\r\n```\r\n\r\nWe end up calling the `#variant` method defined in `ActiveStorage::Blob::Representable`:\r\n\r\n```rb\r\ndef variant(transformations)\r\n  if variable?\r\n    variant_class.new(self, ActiveStorage::Variation.xxx)\r\n  else\r\n    raise ActiveStorage::InvariableError\r\n  end\r\nend\r\n```\r\n\r\nThe `variant_class` here is determined by the configuration: \r\n\r\n```rb\r\ndef variant_class\r\n  ActiveStorage.track_variants ? ActiveStorage::VariantWithRecord : ActiveStorage::Variant\r\nend\r\n```\r\n\r\nWhen we `track_variants`, we use the `ActiveStorage::VariantWithRecord` class. In that case, when we `process` the image, we download the original image, transform it according to the variations and create a new `VariantRecord` to which we attach the transformed image:\r\n\r\n```rb\r\n# activestorage\/app\/models\/active_storage\/blob\/representable.rb\r\nhas_many :variant_records\r\n\r\n# activestorage\/app\/models\/active_storage\/variant_record.rb\r\nbelongs_to :blob\r\nhas_one_attached :image\r\n\r\n# activestorage\/app\/models\/active_storage\/variant_with_record.rb\r\n# When processing the variant: \r\ndef process\r\n  transform_blob { |image| create_or_find_record(image: image) }\r\nend\r\n\r\ndef transform_blob\r\n  # Transforms the image\r\nend\r\n\r\ndef create_or_find_record(image:)\r\n  # Create a variant record and attach the transformed image to it\r\nend\r\n```\r\n\r\nNote that before the variant is `process`, no image blob is created and that's why you have: \r\n\r\n```rb\r\nuser.avatar.variant(resize_to_limit: [100, 100]).key\r\n# => nil\r\n``` \r\n\r\nHowever, if you `process` the variant, you will get a key (the key of the new blob): \r\n\r\n```rb\r\nuser.avatar.variant(resize_to_limit: [100, 100]).processed.key\r\n# => \"mtbjgx3jz5zbt65ij08yx9hjcdew\"\r\n```\r\n\r\nWhen you don't track the variants, things are a little bit different. We use the we use the `ActiveStorage::Variant` class to process the variant. When processing the variant, the code looks like this: \r\n\r\n```rb\r\n# activestorage\/app\/models\/active_storage\/variant.rb\r\n\r\ndef process\r\n  blob.open do |input|\r\n    variation.transform(input) do |output|\r\n      service.upload(key, output, content_type: content_type)\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nIn that case, we upload the transformed file to the service without creating a record in our database. In order to be able to the transformed image later on the service, we need to derive a key from the original blob and that's why we have a key method in that case: \r\n\r\n```rb\r\ndef key\r\n  \"variants\/#{blob.key}\/#{OpenSSL::Digest::SHA256.hexdigest(variation.key)}\"\r\nend\r\n```\r\n\r\nI hope it helps. Let me know it it's not clear.\r\n\r\nNote that I'm not a frequent contributor so someone might have something to add here!","Thanks for your feedback, I'll detail my request a little better.\r\n\r\nFor example, I take the following configuration:\r\n\r\n`config.active_storage.track_variants = false`\r\n\r\nand generate a variant :\r\n\r\n`my_model.photo.variant(:thumb).url`\r\n\r\nMy variant is created in the `variant\/` \"folder\" of my S3 bucket.\r\n![Screenshot 2023-12-14 at 18 46 27](https:\/\/github.com\/rails\/rails\/assets\/1003351\/f782a49e-cba1-413e-bdab-0ef718de5a32)\r\n\r\n\r\nIf I now set the following configuration:\r\n\r\n`config.active_storage.track_variants = true`\r\n\r\nand generate a variant :\r\n\r\n`my_model.photo.variant(:thumb).url`\r\n\r\nthen the variant will be created directly at the bucket root instead of in the `variant\/` \"folder\".\r\n\r\n![Screenshot 2023-12-14 at 18 43 02](https:\/\/github.com\/rails\/rails\/assets\/1003351\/5f66dc70-1082-4130-88d0-f5d8121099b4)\r\n","I tried to add some tests and find a way to fix that. It works, but I broke some other tests.\r\nHere is an example: https:\/\/github.com\/brunto\/rails\/commit\/a610536e521917041194bde308e0510ba1054606 "],"labels":["activestorage"]},{"title":"Fix `#reload` consistency issue","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nIf you have an object that has strict_loading set and then need to call `reload` multiple times, it would only work the first time, and after that, the application would start throwing a strict loading violation errors.\r\n\r\n### Detail\r\nTo fix this, and keep `reload` working consistently between calls, we set `strict_loading`, if the original object has `strict_loading`, to the reloaded records to avoid the strict loading error. \r\n\r\nThis wasn't a problem for the first call, because it is using the original associations cache, but it isn't the case for the other calls of `reload` as they would be using new copies of it, and when the new cache is used to build the list of ` strict_loaded_associations`, the `assoc.owner.strict_loading?` check will return `false`, as this owner is the previous `fresh_object` reference that doesn't have `strict_loading` set.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Thanks for your patch @sarcilav!\r\n\r\nJust at first glance, I don't think this is the right fix, and `assert_nothing_raised` is basically testing nothing.\r\n\r\nCould you give a try at writing a [reproducible test case](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) ([example](https:\/\/github.com\/rails\/rails\/blob\/main\/guides\/bug_report_templates\/active_record_main.rb)) for the thing you're bumping into?","Hi @zzak thanks for taking an initial look into the patch.\r\n\r\nHere it is the example\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n  end\r\n\r\n  create_table :comments, force: true do |t|\r\n    t.integer :post_id\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  belongs_to :post\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_reload_stops_preloading_strictloaded_associations_between_calls\r\n    post = Post.create!\r\n    post.comments << Comment.create!\r\n\r\n    comment = Comment.strict_loading.preload(:post).first\r\n    assert_predicate comment.post, :present?\r\n\r\n    comment.reload\r\n    # After the first reload the post is present, and not strict loading error is raised\r\n    assert_predicate comment.post, :present?\r\n\r\n    comment.reload\r\n    # I was expecting after the second reload for the post to be present, but instead\r\n    # I'm getting ActiveRecord::StrictLoadingViolationError: `Comment` is marked for strict_loading. The Post association named `:post` cannot be lazily loaded.\r\n    assert_predicate comment.post, :present?\r\n  end\r\nend\r\n```\r\n\r\nAnd regarding the test case, I was trying to follow a similar approach to other tests in the file, similar to https:\/\/github.com\/rails\/rails\/blob\/main\/activerecord\/test\/cases\/strict_loading_test.rb#L227C7-L227C41 as I was looking to not get the Strict loading error after the second reload, but I'm happy to change it.","Yeah, I think in this case using `assert_nothing_raised` is probably sufficient, since that is the thing we care about and the surrounding tests are using the same strategy. Good call.\r\n\r\nThe main reason I think this isn't the right fix is because of the test failures look legit:\r\nhttps:\/\/buildkite.com\/rails\/rails\/builds\/102260#018c0b17-41f2-498a-9b57-3c6a6c94f1cc\/1193-1255\r\n\r\n```\r\nActiveRecord::ConnectionNotEstablished: No connection pool for 'ActiveRecord::Base' found.\r\n```\r\n\r\nSorry I don't have any more constructive feedback atm. :pray:","@zzak thanks for looking at it again \ud83d\ude47\ud83c\udffe \r\nI did a quick local run of `bundle exec rake test:postgresql` and it seems that it is fine,. For now I'm updating my branch to trigger another build, and I'll look into it again tomorrow to double check if it is an issue with my change or if somehow the CI db went away during the tests.","@zzak the new build is green, but I spent some time trying to understand why the original fail.\r\n\r\nThe first error was \r\n```\r\nActiveRecord::ConnectionNotEstablished: ActiveRecord::ConnectionNotEstablished\r\n```\r\nAnd after, it cascaded into\r\n```\r\nActiveRecord::ConnectionNotEstablished: No connection pool for 'ActiveRecord::Base' found.\r\n```\r\n\r\nAnd after may tries locally, the only way to reproduce similar errors was to stop postgresql while the tests were running."],"labels":["activerecord"]},{"title":"Check zone presence in find_zone!","body":"### Motivation \/ Background\r\n\r\nI've been running into some issues in some projects when calling `in_time_zone` which behind the scenes calls `find_zone!`. The cause was always the zone being an empty string, which I would've expected the method to behave in the same way as when passing nil as a parameter.\r\n\r\nThis Pull Request has been created because in my opinion instead of calling `.presence` each time we call `in_time_zone` the `find_zone!` method should check for the presence of the argument, making sure that what we just passed is not \"equivalent\" to nil. \r\n\r\n### Detail\r\n\r\nThis Pull Request changes the `find_zone!` method to check the `zone` argument presence before actually trying to find the corresponding time zone. \r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [X] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [X] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [X] Tests are added or updated if you fix a bug or add a feature.\r\n* [X] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included. -> Not sure if this counts as a minor bug fix, open to add the CHANGELOG file changes too\r\n","comments":[],"labels":["activesupport"]},{"title":"Introduce ActiveRecord:Errors registry for error translations","body":"### Motivation \/ Background\r\n\r\nIn our codebase, we heavily lean on PostgreSQL stored procedures. These procedures can raise errors through the `RAISE` statement. We've added custom error codes to these errors so we can throw custom exceptions in our Ruby code. Up until now this has always been a monkey patch to the `translate_exception` method in the PostgreSQL adapter. The upgrade to Rails 7.1 broke our monkey patch (again), this motivated us to work on a better solution in ActiveRecord.\r\n\r\n### Detail\r\n\r\nThis PR introduces the `ActiveRecord:Errors` registry to manage translations of database specific exceptions to ActiveRecord exceptions. Initially I wanted to only introduce this for custom errors, but after seeing the result I figured we can also use this for all specific translations in the adapters. This cleans up a lot of code and makes it easier to understand the translation.\r\n\r\nA translation for an error can be registered in the registry:\r\n\r\n```ruby\r\nActiveRecord::Errors.register(\"MY0001\", MyCustomException, adapter: ActiveRecord::ConnectionAdapters::PostgreSQL)\r\nActiveRecord::Errors.register(\/connection lost\/, CustomConnectionLostException, adapter: ActiveRecord::ConnectionAdapters::PostgreSQL)\r\nActiveRecord::Errors.register((e)-> { e.kind_of?(Exception) }, MyCustomException, adapter: ActiveRecord::ConnectionAdapters::PostgreSQL)\r\n```\r\n\r\nThe `AbstractAdapter` does a lookup in the registry to find the appropriate ActiveRecord exception. By supporting strings, Regexp and Procs, almost all translation cases in the specific adapters can be replaced.\r\n\r\n### Additional information\r\n\r\nChanging error handling for all database adapters should not be taken lightly. I've checked the test coverage for all errors and found that all errors are covered with tests spread over different test cases. \r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Nice! I was looking for this already few times. :muscle:","So I'm positive on the feature, but not really a fan of the implementation.\r\n\r\nI think providing a single callback that receive the original exception and is free to raise or not would be simpler and much more flexible.\r\n\r\nBut also with https:\/\/github.com\/rails\/rails\/pull\/50140, it's now super easy to substitute a standard adapter by subclass that redefines `translate_exception`. But I see how a more blessed API would be valuable.","> So I'm positive on the feature, but not really a fan of the implementation.\r\n> \r\n> I think providing a single callback that receive the original exception and is free to raise or not would be simpler and much more flexible.\r\n> \r\n> But also with #50140, it's now super easy to substitute a standard adapter by subclass that redefines `translate_exception`. But I see how a more blessed API would be valuable.\r\n\r\nSubclassing the adapter and changing the `translate_exception` still has a risk with changing internal APIs. I think a blessed API is better to prevent issues with future upgrades. The callback route is indeed simpler and more flexible. My main issue with my current implementation is the first argument being a string, Proc or Regexp, that is a smell that we maybe need another solution.\r\n\r\nIt would be nice to customize the exceptions within a specific model, but I think this is difficult because the queries are not executed in this context. So we probably need a callback definition on library level:\r\n\r\n```\r\nconfig.active_record.exception_handler = (exception, message:, sql:, binds:) -> { raise MyCustomException if exception.message.match?\/..\/ }\r\n```\r\n\r\nThe `translate_exception` method will then first call this exception handler. Only when the exception handler does not raise anything, the internal exceptions will be raised.\r\n\r\nDownsides:\r\n- In this approach, the user needs quite some understanding of the internals of the translation because not only the `exception` is available as an argument, but also `message`, `sql` and `binds`. Which are only needed to initialize the exception in some cases, but are never used for checking the original exception.\r\n- The current exception translation code can't be cleaned up. Which is fine because they are internal and the PR is less likely to break something.\r\n\r\n@byroot What do you think of this direction?","> What do you think of this direction?\r\n\r\nThat's pretty much what I had in mind yes."],"labels":["activerecord","needs feedback"]},{"title":"Nested associations with `touch: true` cause additional touch on next transaction","body":"I'm running into an edge case where creating a hierarchy of nested records with associations of the form\r\n\r\n```ruby\r\nComment belongs_to :post, touch: true\r\nPost belongs_to :blog, touch: true\r\n```\r\n\r\nwithin an transaction results in a `blog` object that performs an extra `touch` call before the next commit, overriding a manually passed `updated_at` timestamp:\r\n\r\n```ruby\r\n   ActiveRecord::Base.transaction do\r\n      blog = Blog.create\r\n      post = blog.posts.create\r\n      post.comments.create\r\n    end\r\n\r\n    blog.update(updated_at: 4.days.ago)\r\n    blog.updated_at.to_date # => today \r\n```\r\n\r\nIn my case the transaction was created implicitly via an `after_create` callback on the root model (in this case `Blog`) that scaffolded some nested associations. It was, thus, all the more surprising to obtain a record which did not allow updating its timestamps.\r\n\r\n### Steps to reproduce\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  # Activate the gem you are reporting the issue against.\r\n  gem \"activerecord\", \"~> 7.1.0\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :blogs, force: true do |t|\r\n    t.timestamps\r\n  end\r\n\r\n  create_table :posts, force: true do |t|\r\n    t.belongs_to :blog\r\n    t.string :title\r\n    t.timestamps\r\n  end\r\n\r\n  create_table :comments, force: true do |t|\r\n    t.belongs_to :post\r\n    t.text :body\r\n    t.timestamps\r\n  end\r\nend\r\n\r\nclass Blog < ActiveRecord::Base\r\n  has_many :posts\r\n\r\n  # Uncommenting the following two lines also makes the test fail with Rails 6.0\r\n  # before_commit do\r\n  # end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  belongs_to :blog, touch: true\r\n  has_many :comments\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  belongs_to :post, touch: true\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_touching\r\n    blog  = nil\r\n\r\n    ActiveRecord::Base.transaction do\r\n      blog = Blog.create\r\n      post = blog.posts.create(title: \"Some title\")\r\n      post.comments.create(body: \"LGTM\")\r\n    end\r\n\r\n    timestamp = 4.days.ago\r\n    blog.update(updated_at: timestamp)\r\n\r\n    assert_equal timestamp.to_date, blog.updated_at.to_date\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\nUpdating the `updated_at` attribute works. \r\n\r\n### Actual behavior\r\n\r\nRight before the transaction to update timestamp is committed, `Blog#touch` is invoked again undoing the manual update. \r\n\r\nTo me the situation looks as follows: Since #19324, parent touches are batched together at the end of the transaction. Before the transaction that creates the records is committed, `Post#touch` causes `Blog#touch_later` to be invoked (via the [`after_touch` callback defined in `Associations::Builder::BelongsTo`](https:\/\/github.com\/rails\/rails\/blob\/7-1-stable\/activerecord\/lib\/active_record\/associations\/builder\/belongs_to.rb#L99)). But since the `before_commit` callback is already in progress, this schedules `Blog#touch` for the commit of the next transaction. \r\n\r\nIn Rails 6.0 (before #39101), the above test passes since the `before_commit_without_transaction_enrollment` callback is not triggered unless `add_to_transaction` is called. This causes the additional `touch` to be skipped. Once we add a `before_commit` callback to `Blog`, the test also fails for Rails 6.0 since we again enforce enrollment in the transaction on each save. \r\n\r\nI'm wondering whether one might skip propagating touches along `belongs_to` associations (via the `after_touch` callback) during the `before_commit` phase since `touch_later` itself already appears to [handle this explicitly](https:\/\/github.com\/rails\/rails\/blob\/7-1-stable\/activerecord\/lib\/active_record\/touch_later.rb#L27).\r\n\r\n### System configuration\r\n**Rails version**: 6.1 - 7.1\r\n\r\n**Ruby version**: 3.2\r\n","comments":[],"labels":["activerecord","With reproduction steps"]},{"title":"Warn if frameworks are loaded too early","body":"If you use a gem that loads the Rails framework too early, you will get various problems.\r\n\r\nExamples of issues that are caused by gems loading Rails incorrectly (from https:\/\/github.com\/rails\/rails\/pull\/46047#issuecomment-1380712992)\r\n- https:\/\/github.com\/rails\/rails\/issues\/23589 \r\n- https:\/\/github.com\/rails\/rails\/issues\/27844\r\n- https:\/\/github.com\/rails\/rails\/issues\/33283\r\n- https:\/\/github.com\/rails\/rails\/issues\/36322\r\n- https:\/\/github.com\/rails\/rails\/issues\/37030\r\n\r\nFixes to gems that loaded Rails too early\r\n- https:\/\/github.com\/ViewComponent\/view_component\/issues\/1507\r\n- https:\/\/github.com\/collectiveidea\/delayed_job_active_record\/issues\/185\r\n\r\nPull requests that try to make Rails warn about this problem, when your Rails code has been loaded too early\r\n- https:\/\/github.com\/rails\/rails\/pull\/38024\r\n- https:\/\/github.com\/rails\/rails\/pull\/46047\r\n\r\nThis issue is here to track the efforts to fix this issue. It seems both above PRs are stalled.\r\n\r\n### Steps to reproduce\r\n```\r\n  # config\/initializers\/000_some_initializer.rb\r\n  ActiveRecord::Base.configurations # Make use of AR::Base which hasn't been loaded yet\r\n\r\n  # config\/initializers\/new_framework_defaults.rb\r\n  Rails.application.config.active_record.collection_cache_versioning = false\r\n  # Setting this configuration won't do anything since ActiveRecord::Base is already\r\n  # loaded and the `set_configs` initializer has already iterated over application\r\n  # config (see https:\/\/github.com\/rails\/rails\/blob\/b67785a476cf346b09f5ebc71b4d61aae3ac27b3\/activerecord\/lib\/active_record\/railtie.rb#L192)\r\n\r\n  puts ActiveRecord::Base.collection_cache_versioning # true\r\n```\r\n\r\n### Expected behavior\r\nRails would warn on stderr about this problem, or raise an error.\r\nExtra points, if it could pinpoint (stacktrace?) what code is doing the wrong loading.\r\n\r\n### Actual behavior\r\nInitializer configuration from new_framework_defaults of ActiveRecord is ignored.\r\n\r\n### System configuration\r\n**Rails version**:\r\n7.1.2\r\n**Ruby version**:\r\n2.7.7","comments":[],"labels":["attached PR","With reproduction steps"]},{"title":"Invalid SQL executing distinct.count on a model with a composite primary key","body":"The problem: when running a query `Model.distinct.count` on a model which as a composite primary key, the generated SQL is not valid.\r\n\r\n### Steps to reproduce\r\n\r\nTo reproduce the bug with postgresql (which is the adapter l'm using)\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", \"= 7.1.2\"\r\n  gem \"pg\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"postgresql\", database: \"distinct_count_bug\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :composite_pks, primary_key: [:col1, :col2] do |t|\r\n    t.string :col1\r\n    t.string :col2\r\n\r\n    t.timestamps\r\n  end\r\nend\r\n\r\nclass CompositePk < ActiveRecord::Base\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_distinct_count_invalid_sql_generated\r\n    CompositePk.create(col1: 'example', col2: 'example')\r\n    count = CompositePk.distinct.count\r\n\r\n    assert_equal 1, count\r\n  end\r\nend\r\n```\r\n\r\nTo reproduce the bug with sqlite3 (I tried to understand if this is a database adapter specific bug but sqlite3 generates the same query)\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", \"= 7.1.2\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :composite_pks, primary_key: [:col1, :col2] do |t|\r\n    t.string :col1\r\n    t.string :col2\r\n\r\n    t.timestamps\r\n  end\r\nend\r\n\r\nclass CompositePk < ActiveRecord::Base\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_distinct_count_invalid_sql_generated\r\n    CompositePk.create(col1: 'example', col2: 'example')\r\n    count = CompositePk.distinct.count\r\n\r\n    assert_equal 1, count\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\nRunning Model.distinct.count:\r\n\r\nNo exception raised and valid SQL generated\r\n\r\nExample of valid SQL\r\n```SQL\r\nSELECT COUNT(DISTINCT (\"col1\", \"col2\")) FROM \"composite_pks\"\r\n```\r\n\r\n### Actual behavior\r\n\r\nRunning Model.distinct.count:\r\n\r\nAn exception is raised (with postgresql):\r\n`ActiveRecord::StatementInvalid: PG::SyntaxError: ERROR:  syntax error at or near \"[\"\r\nLINE 1: SELECT COUNT(DISTINCT [\"col1\", \"col2\"]) FROM \"composite_pks\"`\r\n\r\nAn exception is raised (with sqlite):\r\n`ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: \"col1\", \"col2\"\"`\r\n\r\n### System configuration\r\n**Rails version**: 7.1.2\r\n\r\n**Ruby version**: 3.2.2\r\n\r\n**PostgresSQL**: 15\r\n\r\n**SQLite**: 3\r\n","comments":["I had the same problem yesterday and I think it's an issue with how Arel composes the query.","As a workaround, I would suggest you to:\r\n```ruby\r\nCompositePk.distinct.count(\"col1 || '-' || col2\")\r\n```","Hey, thanks for the report. \r\nI think we should fix this anyway but may I ask for a little bit more context on what is the use-case to run `Model. distinct.count`? \r\n\r\n`DISTINCT` by a primary key should be the same as `Model.count` since the primary key is by definition unique. Let me know if I'm missing some detail! Thank you","Maybe we can revisit https:\/\/github.com\/rails\/rails\/pull\/47862\r\n\r\nThere was something that made me concerned about `SELECT COUNT(DISTINCT (\"col1\", \"col2\"))` syntax for certain adapters but I can't immediately recall what that was ","Hey @nvasilevski,\r\n\r\nThanks for your quick answer. I'm using distinct.count because we're joining that model with other relations which can duplicate results. \r\n\r\n(I'm pasting SQLite examples only. This is broken with postgresql too. If you need them I can send more examples)\r\n\r\nHere is an example with an has_many on CompositePk model\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", \"= 7.1.2\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :composite_pks, primary_key: [:col1, :col2] do |t|\r\n    t.string :col1\r\n    t.string :col2\r\n\r\n    t.timestamps\r\n  end unless table_exists?(:composite_pks)\r\n\r\n  create_table :other_models do |t|\r\n    t.string :col1\r\n    t.string :col2\r\n\r\n    t.string :account\r\n\r\n    t.timestamps\r\n  end unless table_exists?(:other_models)\r\nend\r\n\r\nclass CompositePk < ActiveRecord::Base\r\n  has_many :other_models, query_constraints: [:col1, :col2]\r\nend\r\n\r\nclass OtherModel < ActiveRecord::Base\r\n  belongs_to :composite_pk, query_constraints: [:col1, :col2]\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_distinct_count_invalid_sql_generated\r\n    cp1 = CompositePk.create(col1: 'example', col2: 'example') unless CompositePk.find_by(col1: 'example', col2: 'example')\r\n    cp1.other_models.create({account: 'asdf'})\r\n    cp1.other_models.create({account: 'qwerty'})\r\n    cp1.other_models.create({account: 'qwertyuiop'})\r\n\r\n    CompositePk.joins(:other_models).count\r\n\r\n    assert_equal 1, CompositePk.joins(:other_models).where(\"other_models.account LIKE '%ert%'\").distinct.count\r\n    assert_equal 2, CompositePk.joins(:other_models).where(\"other_models.account LIKE '%ert%'\").count\r\n  end\r\nend\r\n\r\n```\r\n\r\nAs you can see the last assertions returns duplicated CompositePk models. I need to remove this duplication with distinct\r\n\r\nHere you can find a working example without composite pk\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", \"= 7.1.2\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :composite_pks do |t|\r\n    t.timestamps\r\n  end\r\n\r\n  create_table :other_models do |t|\r\n    t.string :composite_pk_id\r\n\r\n    t.string :account\r\n\r\n    t.timestamps\r\n  end\r\nend\r\n\r\nclass CompositePk < ActiveRecord::Base\r\n  has_many :other_models\r\nend\r\n\r\nclass OtherModel < ActiveRecord::Base\r\n  belongs_to :composite_pk\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_distinct_count_invalid_sql_generated\r\n    cp1 = CompositePk.create\r\n    cp1.other_models.create({account: 'asdf'})\r\n    cp1.other_models.create({account: 'qwerty'})\r\n    cp1.other_models.create({account: 'qwertyuiop'})\r\n\r\n    CompositePk.joins(:other_models).count\r\n\r\n    assert_equal 1, CompositePk.joins(:other_models).where(\"other_models.account LIKE '%ert%'\").distinct.count\r\n    assert_equal 2, CompositePk.joins(:other_models).where(\"other_models.account LIKE '%ert%'\").count\r\n  end\r\nend\r\n\r\n```","> Maybe we can revisit #47862\r\n> \r\n> There was something that made me concerned about `SELECT COUNT(DISTINCT (\"col1\", \"col2\"))` syntax for certain adapters but I can't immediately recall what that was\r\n\r\nSELECT DISTINCT(\"col1\", \"col2\") is valid SQL, however when DISTINCT is used as the first argument in the COUNT function it only accepts one value. I believe MySQL has built in support for multiple columns but it isn't standard.\r\n\r\nAs @knightq mentioned, using the concat || function with some type of delimiter between them is arguably the best way to merge the multiple columns into one for the purposes of the distinct count.\r\n\r\nNot all flavors of SQL support the CONCAT() function, but all should support it using double pipes || .\r\nThe main difference is the null support, which should be irrelevant when dealing with primary keys. This method should also be more efficient than the subquery method suggested in the above PR.\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", \"= 7.1.2\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :composite_pks, primary_key: [:col1, :col2] do |t|\r\n    t.string :col1\r\n    t.string :col2\r\n\r\n    t.timestamps\r\n  end unless table_exists?(:composite_pks)\r\n\r\n  create_table :other_models do |t|\r\n    t.string :col1\r\n    t.string :col2\r\n\r\n    t.string :account\r\n\r\n    t.timestamps\r\n  end unless table_exists?(:other_models)\r\nend\r\n\r\nclass CompositePk < ActiveRecord::Base\r\n  has_many :other_models, query_constraints: [:col1, :col2]\r\nend\r\n\r\nclass OtherModel < ActiveRecord::Base\r\n  belongs_to :composite_pk, query_constraints: [:col1, :col2]\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_distinct_count_invalid_sql_generated\r\n    cp1 = CompositePk.create(col1: 'example', col2: 'example') unless CompositePk.find_by(col1: 'example', col2: 'example')\r\n    cp1.other_models.create({account: 'asdf'})\r\n    cp1.other_models.create({account: 'qwerty'})\r\n    cp1.other_models.create({account: 'qwertyuiop'})\r\n\r\n    assert_equal 1, CompositePk.joins(:other_models).where(\"other_models.account LIKE '%ert%'\").distinct.count(\"composite_pks.col1 || '-' || composite_pks.col2\")\r\n    assert_equal 2, CompositePk.joins(:other_models).where(\"other_models.account LIKE '%ert%'\").count\r\n    assert_equal 3, CompositePk.joins(:other_models).count\r\n  end\r\nend\r\n```\r\n\r\n\r\n\r\n"],"labels":["activerecord"]},{"title":"Introduce `field_label` form helper","body":"### Motivation \/ Background\r\n\r\nGenerate the text-only label contents for a field:\r\n\r\n```ruby\r\n  # Helper method\r\n  field_label :article, :title    # => \"Title\"\r\n\r\n  # FormBuilder method\r\n  form_with model: @article do |form|\r\n    form.label :title             # => \"<label for=\\\"article_title\\\">Title<\/label>\"\r\n    form.field_label :title       # => \"Title\"\r\n  end\r\n```\r\n\r\nThis can be useful when utilizing `[aria-label]` in rare circumstances where rendering a `<label>` element for a form control isn't feasible.\r\n\r\nPrior to this commit, invoking `label_tag` or `form.label` was the only way to automatically determine a form control's (internationalized!) label text without providing call-site specific content (via a String argument or a block). Even with that automatic determination, the text content is nested within a `<label>` element.\r\n\r\n### Detail\r\n\r\nWith this change, views can separate the content text from the element for circumstances where they need to craft their own `[aria-label]` text based on the out-of-the-box translated label text:\r\n\r\n```erb\r\n<%= form_with model: @post do |form| %>\r\n  <%# a typical <label> + <input> combination %>\r\n  <%= form.label :title %>\r\n  <%= form.text_field :title %>\r\n\r\n  <%# an <input> with [aria-label] text %>\r\n  <%= form.text_field :title, aria: { label: form.field_label(:title) } %>\r\n\r\n  <%# a typical <label> + <input> combination with additional [aria-label] text %>\r\n  <%= form.label :title %>\r\n  <%= form.text_field :title, aria: {\r\n        label: \"#{form.field_label(:title)}, and then some additional text to be announced\"\r\n      } %>\r\n<% end %>\r\n```\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["needs feedback","actionview"]},{"title":"Add error connection tests for various db adapters","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\nFrom https:\/\/github.com\/rails\/rails\/pull\/48111#issuecomment-1531952728, it was found that there is currently no test coverage for the types of errors when connecting to the db.\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\n### Detail\r\nThis was done by modifying the database configs with invalid host\/user\/database. As a result, this PR also fixes the error code of `ER_DBACCESS_DENIED_ERROR` to return a no database error instead of a username error.\r\n\r\n**Looking into the CI error \ud83d\udc40 \r\n\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["It looks like one of the new tests added might be flaky in Trilogy https:\/\/buildkite.com\/rails\/rails\/builds\/102133#018bef73-859b-4304-b916-150e279d96ec\/1125-1134\r\n\r\nYou can try reproducing locally by using the same seed found up here https:\/\/buildkite.com\/rails\/rails\/builds\/102133#018bef73-859b-4304-b916-150e279d96ec\/1125-1128."],"labels":["activerecord","needs work"]},{"title":"prepend option is no longer supported for after_commit callbacks in Rails 7.1 defaults","body":"As a result of #46992 (@tenderlove), with new Rails 7.1 default `run_after_transaction_callbacks_in_order_defined` true, `prepend` option is _no longer supported_ for any transactional callbacks.  (after_commit)\r\n\r\nWe can see how in the presence of this configugration `prepend:true` is hardcoded, and then passed to `set_options_for_callbacks!` method such that it will over-ride any `prepend` arg otherwise passed in, for all `after_commit` and `after_rollback` \"transactional\" callbacks. \r\n\r\nhttps:\/\/github.com\/rails\/rails\/pull\/46992\/files#diff-8dd03b7fb9b72a3bd338955c1de75652d60453230c6544f3851c0d0b3746a675R270-R275\r\n\r\nThe effect of this is that prior to `run_after_transaction_callbacks_in_order_defined`, you could use `prepend:true` to alter callback order when definining new transactional callbacks. \r\n\r\nBut after #46992, not only is the default order reversed, but **you can no longer use prepend:true to alter the order**. \r\n\r\nThis is not mentioned in the #46992 or any related docs\/changenotes.  `prepend: true` is still mentioned as an option for `before_destroy` in [guide](https:\/\/github.com\/rails\/rails\/blob\/0ad26f789013f3e07d7dc453303a8240a4da0d38\/guides\/source\/active_record_callbacks.md#destroying-an-object) as well as [header docs on ActiveRecord::Callbacks](https:\/\/github.com\/rails\/rails\/blob\/0ad26f789013f3e07d7dc453303a8240a4da0d38\/activerecord\/lib\/active_record\/callbacks.rb#L198-L205)\r\n\r\n`prepend:true` is mentioned in passing in the [docs for run_after_transaction_callbacks_in_order_defined](https:\/\/github.com\/rails\/rails\/blob\/0ad26f789013f3e07d7dc453303a8240a4da0d38\/guides\/source\/configuring.md#configactive_recordrun_after_transaction_callbacks_in_order_defined), but I guess it's not clear if it's meant to apply to `after_commit` there?\r\n\r\n\r\n\r\n1. If it is intended that `prepend` option is removed from after_commit and transactional callbacks when `run_after_transaction_callbacks_in_order_defined` is set,  i guess the docs should mention this?\r\n\r\n2. If it is a bug that `prepend:true ` no longer works for after_commit callbacks in Rail 7.1 with default config, then we could fix it in a PR?\r\n","comments":["Would you mind creating a simple repro script so we could see this behavior for ourselves locally?  Thank you!","Yes, thank you, sorry!\r\n\r\nSorry this repro script demo's with just `puts` rather than actual test assertions, wasn't clear to me how to test order of callbacks easily with assertions.\r\n\r\nYou can see if you run:\r\n\r\n`CALLBACKS_IN_ORDER=true ruby .\/test.rb` (with Rails 7.1 default config)\r\n\r\nYou get callbacks in same order on `Cat` and `Dog` even though `prepend: true` is on Dog -- the `prepend:true` is a no-op. In both cases 'animal' comes first.\r\n\r\nBut if you run with legacy config `run_after_transaction_callbacks_in_order_defined`:\r\n\r\n     CALLBACKS_IN_ORDER=false ruby .\/test.rb\r\n\r\nThen you get callbacks in different orders on `Cat` vs `Dog`, since `Dog` has `prepend: true` -- for `Dog` \"animal\" comes first, but for `Cat` \"animal\" comes second. \r\n\r\n<details>\r\n<summary>test.rb<\/summary>\r\n\r\n```ruby\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  gem \"rails\", \"7.1.2\"\r\n  gem \"sqlite3\"\r\n  gem 'byebug'\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :animals, force: true do |t|\r\n    t.string :name\r\n    t.string :type\r\n  end\r\nend\r\n\r\n\r\nActiveRecord.run_after_transaction_callbacks_in_order_defined = (ENV['CALLBACKS_IN_ORDER'] == \"true\")\r\n\r\nclass Animal < ActiveRecord::Base\r\n  after_commit do\r\n    puts \"animal after_commit\"\r\n  end\r\nend\r\n\r\nclass Cat < Animal\r\n  after_commit do\r\n    puts \"cat after_commit\"\r\n  end\r\nend\r\n\r\nclass Dog < Animal\r\n  after_commit prepend: true do\r\n    puts \"dog after_commit\"\r\n  end\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_cat_after_commit_order_defined\r\n    puts \"creating Cat: ActiveRecord.run_after_transaction_callbacks_in_order_defined == #{ActiveRecord.run_after_transaction_callbacks_in_order_defined}\"\r\n    Cat.create!\r\n    puts \"---\"\r\n  end\r\n\r\n  def test_dog_after_commit_order_defined\r\n    puts \"creating Dog: ActiveRecord.run_after_transaction_callbacks_in_order_defined == #{ActiveRecord.run_after_transaction_callbacks_in_order_defined}\"\r\n    Dog.create!\r\n    puts \"---\"\r\n  end\r\nend\r\n```\r\n\r\n<\/details>\r\n\r\n\r\n","I've got an updated script below as well as a patch in #51244. Toggle the gem source in the script to run against the patch.\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  # issue\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n  # patch\r\n  # gem \"rails\", github: \"joshuay03\/rails\", branch: \"fix-prepend-not-working-when-running-after-transaction-callbacks-in-order\"\r\n\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  class_attribute :callback_run_logs, default: []\r\n\r\n  after_create_commit :first_callback\r\n\r\n  private\r\n    def first_callback\r\n      self.class.callback_run_logs << \"first\"\r\n    end\r\n\r\n    def second_callback\r\n      self.class.callback_run_logs << \"second\"\r\n    end\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def setup\r\n    Post.callback_run_logs = []\r\n  end\r\n\r\n  class RunAfterTransactionCallbacksInOrderDefinedFalseTest < BugTest\r\n    def setup\r\n      super\r\n\r\n      @value_before = ActiveRecord.run_after_transaction_callbacks_in_order_defined\r\n      ActiveRecord.run_after_transaction_callbacks_in_order_defined = false\r\n    end\r\n\r\n    def teardown\r\n      ActiveRecord.run_after_transaction_callbacks_in_order_defined = @value_before\r\n    end\r\n\r\n    def test_without_prepend\r\n      Post.after_create_commit :second_callback\r\n\r\n      post = Post.create!\r\n\r\n      assert_equal [\"second\", \"first\"], post.callback_run_logs # \u2705 passes\r\n    ensure\r\n      Post._commit_callbacks.to_a.pop\r\n    end\r\n\r\n    def test_with_prepend\r\n      Post.after_create_commit :second_callback, prepend: true\r\n\r\n      post = Post.create!\r\n\r\n      assert_equal [\"first\", \"second\"], post.callback_run_logs # \u2705 passes\r\n    ensure\r\n      Post._commit_callbacks.to_a.pop\r\n    end\r\n  end\r\n\r\n  class RunAfterTransactionCallbacksInOrderDefinedTrueTest < BugTest\r\n    def setup\r\n      super\r\n\r\n      @value_before = ActiveRecord.run_after_transaction_callbacks_in_order_defined\r\n      ActiveRecord.run_after_transaction_callbacks_in_order_defined = true\r\n    end\r\n\r\n    def teardown\r\n      ActiveRecord.run_after_transaction_callbacks_in_order_defined = @value_before\r\n    end\r\n\r\n    def test_without_prepend\r\n      Post.after_create_commit :second_callback\r\n\r\n      post = Post.create!\r\n\r\n      assert_equal [\"first\", \"second\"], post.callback_run_logs # \u2705 passes\r\n    ensure\r\n      Post._commit_callbacks.to_a.pop\r\n    end\r\n\r\n    def test_with_prepend\r\n      Post.after_create_commit :second_callback, prepend: true\r\n\r\n      post = Post.create!\r\n\r\n      assert_equal [\"second\", \"first\"], post.callback_run_logs # \u274c fails\r\n    ensure\r\n      Post._commit_callbacks.to_a.pop\r\n    end\r\n  end\r\nend\r\n```"],"labels":["activerecord","attached PR","With reproduction steps"]},{"title":"Update interceptors and observers registering examples","body":"### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nUsing the current `Interceptor` and `Observer` registering examples trigger deprecation warnings. The ones I proposed instead are similar to what is recommended in the `ActionMailer` [configuration guide](https:\/\/guides.rubyonrails.org\/configuring.html#config-action-mailer-observers).\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Could you share what warnings you were seeing? I tried to reproduce but I'm not seeing any warnings when I try the old steps","Wondering whether it's autoloading during the initialization phase that's the problem? The change is describe in the blog post here: https:\/\/rubyonrails.org\/2021\/9\/3\/autoloading-in-rails-7-get-ready"],"labels":["docs","needs work"]},{"title":"Add `application\/merge-patch+json` as subtype for `application\/json`","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\n[RFC 7396 JSON Merge Patch](https:\/\/www.ietf.org\/rfc\/rfc7396.txt) defines the JSON merge patch format and processing rules and registers `application\/merge-patch+json` as additional MIME media type. It expects the same encoding of `application\/json`.\r\n\r\n### Detail\r\n\r\nThis PR proposes adding `application\/merge-patch+json` as an additional recognized MIME subtype for `application\/json`.\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["actionpack","needs feedback"]},{"title":"Restore detailed error message for excessive password length","body":"### Motivation \/ Background\r\n\r\nThis Pull Request addresses a regression introduced in PR #47708, where the error message for an excessively long password was changed to a less informative \"is too long\". Previously, the error message included a dynamic count of the maximum allowed characters (e.g., \"is too long (maximum is %{count} characters)\"). This regression affects the user experience by providing less guidance on how to correct the input. Restoring the informative error message helps developers and users understand the validation constraints.\r\n\r\n### Detail\r\n\r\nThis Pull Request makes the following changes:\r\n- It restores the `count` parameter in the error message for a password exceeding the maximum length, ensuring users receive a detailed response (\"is too long (maximum is %{count} characters)\").\r\n- It reverts the validation error symbol from `:password_too_long` back to `:too_long` within `activemodel\/lib\/active_model\/secure_password.rb`.\r\n- It removes the `:password_too_long` key from `activemodel\/lib\/active_model\/locale\/en.yml` to align with the use of the `:too_long` symbol.\r\n\r\n### Additional information\r\n\r\nThe change is straightforward and restores functionality to its previous state as of v7.1.0.beta1, ensuring that the error message for password length validation is both informative and accurate.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why.\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n\r\n---\r\n\r\nThis PR was co-authored by ChatGPT.","comments":["The linked PR has discussion that led to the current message, including noting that the previous one is not accurate, and consequently not truly informative.\r\n\r\nOpening a PR to [partially] revert a previous change without addressing that seems... incomplete.","> The linked PR has discussion that led to the current message, including noting that the previous one is not accurate, and consequently not truly informative.\r\n> \r\n> Opening a PR to [partially] revert a previous change without addressing that seems... incomplete.\r\n\r\nHey @matthewd thanks for pointing that out. Is [this](https:\/\/github.com\/rails\/rails\/pull\/47708#pullrequestreview-1362753809) the discussion you're referring to? (also screenshotted below)\r\n\r\n<img width=\"947\" alt=\"image\" src=\"https:\/\/github.com\/rails\/rails\/assets\/530941\/94c4dc6c-a76d-419c-8cd3-8b7c706703ad\">\r\n\r\nOr did I miss something?\r\n\r\nIn any event, I believe the crux of this PR, and the partial revert, is that the error message `\u201cis too long\u201d` lacks information \/ guidance to the user, on how to fix the issue.\r\n\r\nWould there be other ways of achieving this, if passing the `count: ` param is not the way to go here?"],"labels":["activemodel","needs feedback"]},{"title":"Fix `run_generator` to work for generators calling other generators","body":"Fixes #50099 (see there for the description).\r\n\r\nTested locally - works as expected, but I am struggling to write a test for this.","comments":[],"labels":["railties","needs feedback"]},{"title":"Rails Generator Tests do not work with `generate` commands","body":"### Steps to reproduce\r\n\r\n_Example repository here: https:\/\/github.com\/practical-computer\/generator-test-failure_. Relevant files:\r\n* https:\/\/github.com\/practical-computer\/generator-test-failure\/blob\/main\/lib\/generators\/example\/example_generator.rb\r\n* https:\/\/github.com\/practical-computer\/generator-test-failure\/blob\/main\/test\/lib\/generators\/example_generator_test.rb\r\n\r\nWhen creating a new Generator from a fresh Rails install, the generated test case does not run. Instead, the following error is returned:\r\n\r\n```\r\n$ bundle exec rails test                                              \r\nRunning 1 tests in a single process (parallelization threshold is 50)\r\nRun options: --seed 42824\r\n\r\n# Running:\r\n\r\n\/...\/.rbenv\/versions\/3.0.2\/bin\/ruby: No such file or directory -- bin\/rails (LoadError)\r\n```\r\n\r\nCommand run to generate the generator:\r\n```shell\r\n bundle exec rails generate generator example\r\n      create  lib\/generators\/example\r\n      create  lib\/generators\/example\/example_generator.rb\r\n      create  lib\/generators\/example\/USAGE\r\n      create  lib\/generators\/example\/templates\r\n      invoke  test_unit\r\n      create    test\/lib\/generators\/example_generator_test.rb\r\n```\r\n\r\nThe generator body:\r\n```ruby\r\nclass ExampleGenerator < Rails::Generators::NamedBase\r\n  source_root File.expand_path(\"templates\", __dir__)\r\n\r\n  def run_test_generator\r\n    generate \"generator\", \"test\"\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\nThe generator tests should work\r\n\r\n### Actual behavior\r\nThe tests error out\r\n\r\n### System configuration\r\n**Rails version**: Rails 7.1.2\r\n\r\n\r\n**Ruby version**: `ruby 3.0.2p107 (2021-07-07 revision 0db68f0233) [arm64-darwin21]`\r\n\r\n### Research\r\n\r\n@garrettdimon has been extremely helpful with debugging this and pulled the following links together:\r\n* The test suites worked back in Rails 6.1.7.6: https:\/\/github.com\/rails\/rails\/commit\/ad0f0e69800db62a9bb198d427bb531fbd07e027\r\n* https:\/\/github.com\/rails\/rails\/commit\/ad0f0e69800db62a9bb198d427bb531fbd07e027#diff-a8b5ef8dfdaadc4ed11dae1c4e6762bb26a76f90e53e9fec87c9e92f14a83e0fL343-R343","comments":["The behavior was changed in https:\/\/github.com\/rails\/rails\/pull\/44502 (cc @matthewd).\r\n\r\nShould it be changed to something like\r\n```diff\r\ndiff --git a\/railties\/lib\/rails\/generators\/actions.rb b\/railties\/lib\/rails\/generators\/actions.rb\r\nindex 40ab71c5b2..db4678d748 100644\r\n--- a\/railties\/lib\/rails\/generators\/actions.rb\r\n+++ b\/railties\/lib\/rails\/generators\/actions.rb\r\n@@ -468,7 +468,10 @@ def execute_command(executor, command, options = {}) # :doc:\r\n             abort_on_failure: options[:abort_on_failure],\r\n           }\r\n\r\n-          in_root { run(\"#{sudo}#{Shellwords.escape Gem.ruby} bin\/#{executor} #{command}\", config) }\r\n+          in_root do\r\n+            executor_path = Rails.root.join(\"bin\", executor.to_s)\r\n+            run(\"#{sudo}#{Shellwords.escape Gem.ruby} #{executor_path} #{command}\", config)\r\n+          end\r\n         end\r\n\r\n         # Always returns value in double quotes.\r\n```\r\n\r\nIs it possible somehow that `Rails.root` is `nil` here? If not, I think this is the way to go.","Edit: After some more usage, this likely creates as many problems as it solves because any other relative directories (like `config`) will be \"missing\" unless they're symlinked as well. So while it can help in simple cases, loading a more complex app during testing will likely fail before the generator tests can even run.\r\n\r\nGiven that the behavior is only \"broken\" when testing, I'm optimistic that there's a good way to update how the tests are run to ensure that calls to `generate` or `rails_command` are run in `Rails.root` instead of `destination_root`, but I'll have to give it some more thought.\r\n\r\nLeaving the original solution here in case it's useful for anyone else looking into this. \r\n\r\n---\r\n\r\nAnother possible alternative (based on the workaround I'm trying out currently):\r\n\r\nI added the following method to `test_helper.rb` so that it can add a symlink from `tmp\/generators\/bin` to (Rails.root)`bin`. Then the calls to the `generate` (or `rails_command`) actions _seem_ to work. Logically, nothing is jumping out at me as problematic with this, but it's been a long day.\r\n\r\n```ruby\r\ndef ensure_tmp_generators_symlink\r\n  src_bin = File.join(Rails.root, 'bin')\r\n  dest_bin = File.join(destination_root, 'bin')\r\n\r\n  FileUtils.ln_s(src_bin, dest_bin) unless File.symlink?(dest_bin)\r\nend\r\n```\r\n\r\nThen, in the relevant generator test, I updated the `setup :prepare_destination` call:\r\n\r\n```ruby\r\nsetup :prepare_destination, :ensure_tmp_generators_symlink\r\n```\r\n\r\nIn theory, something similar could be added at the end of the [`prepare_destination`](https:\/\/github.com\/rails\/rails\/blob\/438cad462638b02210fc48b700c29dcd0428a8b7\/railties\/lib\/rails\/generators\/testing\/behavior.rb#L103-L106) method, and it might do the trick.\r\n\r\nI'm planning on testing it out for a bit, but based on what I've seen and tried so far, it feels like a good possibility.\r\n","I tried @garrettdimon's patch in the following commit, but there's an unexpected consequence: it's actually running the generator against the app itself, and saving the results in the app's structure.\r\n\r\nCan someone else try running the test suite at this commit & seeing if they're able to reproduce the issue?\r\n\r\nCommit: https:\/\/github.com\/practical-computer\/generator-test-failure\/commit\/e54d2647c1dbe79d031eaa96c91f180921771a78\r\n\r\nRun log:\r\n\r\n```sh\r\n$ gs\r\nOn branch 2023-11-18-attempt-1\r\nYour branch is up to date with 'origin\/2023-11-18-attempt-1'.\r\n\r\nnothing to commit, working tree clean\r\n$ be rails test\r\nRunning 1 tests in a single process (parallelization threshold is 50)\r\nRun options: --seed 23818\r\n\r\n# Running:\r\n\r\n.\r\n\r\nFinished in 0.655301s, 1.5260 runs\/s, 1.5260 assertions\/s.\r\n1 runs, 1 assertions, 0 failures, 0 errors, 0 skips\r\n$ gs\r\nOn branch 2023-11-18-attempt-1\r\nYour branch is up to date with 'origin\/2023-11-18-attempt-1'.\r\n\r\nUntracked files:\r\n  (use \"git add <file>...\" to include in what will be committed)\r\n  lib\/generators\/test\/\r\n  test\/lib\/generators\/test_generator_test.rb\r\n```","Something that may be related to this: when you add `debugger` statement inside the generator, the test task hangs infinitely; likely waiting for input as part of a process that is not directly tied to the test's process.\r\n\r\nExample generator:\r\n```ruby\r\nclass ExampleGenerator < Rails::Generators::NamedBase\r\n  source_root File.expand_path(\"templates\", __dir__)\r\n\r\n  def run_test_generator\r\n    debugger\r\n    generate \"generator\", \"test\"\r\n  end\r\nend\r\n\r\n```"],"labels":["railties","attached PR","With reproduction steps"]},{"title":"Add `query_cache_clearing_strategy` to customize how the query cache clears","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\nI work on a rather large, robust Rails application that has some custom multi-database code. The default behavior of `ActiveRecord::Base.clear_query_caches_for_current_thread` for cache clearing can result in a substantial number of cache misses between unrelated shards, (noted in #40622) - similarly as the methods passed to `dirties_query_cache` in `ActiveRecord::ConnectionAdapters::QueryCache` has changed (such as in #48061) this again changes the number of query cache hits, which can result in performance regressions. In both cases, the default behavior absolutely makes sense, however it is difficult to carve out an exception. In order to do so this requires making `clear_query_caches_for_current_thread` a noop and then overwriting the target methods on the adapter classes.\r\n\r\nRather than being prescriptive, this pull request maintains the current behavior and gives a more straightforward way for applications to modify the existing cache clearing behavior instead of monkey patching core Active Record classes. \r\n\r\n### Detail\r\n\r\n- Add `ActiveRecord#query_cache_clearing_strategy` as a singleton accessor that defaults to a `Proc` that just calls `ActiveRecord::Base.clear_query_caches_for_current_thread` \r\n- Replace the call to `ActiveRecord::Base.clear_query_caches_for_current_thread` in the inline method definition in `ActiveRecord::ConnectionAdapters::QueryCache` to call the new `Proc` with the arguments of `self`, the `method_name` and args. \r\n- Update the configuration guide to document this.\r\n\r\n### Additional information\r\n\r\nSince there is no change to the behavior as is, I have no additional tests added.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Out of curiosity, what is your alternative strategy?","@byroot Clear cache only on the connection that issues the query. Even the strategy outlined in #40622 - clearing on what is now `connection_name` would result in cache misses where peer shards have isolated data that are segregated by customer\/time\/etc. \r\n\r\n","I think this feels too much like handing the user a monkeypatching kit.\r\n\r\nWhile I would still push back on over-reliance on the query cache in general (it's faster than hitting the network again, and occurs at the layer where we can detect requerying, but it's much better again for application code to memoize things higher up whenever possible), it's reasonable for us to make it as effective as possible. As far as I can see, we should still be able to implement more granular behaviour, as a global default, only needing special consideration \/ manual config guidance in the edge case where multiple separate named connections are pointing to the same DB cluster.\r\n\r\nMy understanding of the discussion around #45246 is that we need to account for legacy connection setups (which do have that \"multiple named connections -> same cluster\" edge case), but I would expect that's \"just\" a matter of detecting that legacy-style, non role-and-shard, connection swapping is occurring and merging those connections into a single cache group. (And\/or introducing a global config setting so that only new apps default to strict cache maintenance.)","Right now, the only way to change the query caching behavior is to monkey patch, which is certainly not ideal. I think the follow up to the discussion about legacy connection setups was that even accounting for that, there's concern for breaking applications that don't test around query cache usage (#45260). I think this indicates there's no real \"one size fits all\" solution for query cache. Even in the more granular behavior of clearing the cache on just the connection, any replica connections for that database would also need to be cleared, so it would want to clear all roles for the shard. I think there's a legitimate case to change the behavior with more complex database topographies that aren't just limited to legacy connection setups.\r\n\r\n","This is just me thinking out loud but if Rails was to support multiple cache clearing strategies, I think the typical way is to define a set of accepted values for the config `AR. query_cache_clearing_strategy `, such as `:clear_query_caches_for_current_thread` and whatever other edge cases the team is willing to support."],"labels":["activerecord","docs"]},{"title":"Inconsistency on preload and eager_load of relation with query_constraints or json column type","body":"### Steps to reproduce\r\n```ruby\r\n# frozen_string_literal: true\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :authors, force: true do; end\r\n\r\n  create_table :books, force: true do |t|\r\n    # t.string :ref # (S)\r\n    t.json :ref # (J)\r\n  end\r\nend\r\n\r\nclass Author < ActiveRecord::Base; end\r\n\r\nclass Book < ActiveRecord::Base\r\n  # foreign key version (F)\r\n  # has_one :author, foreign_key: :id, primary_key: :ref, dependent: nil, inverse_of: false\r\n\r\n  # query constraints version (Q)\r\n  has_one :author, query_constraints: %i[id], primary_key: %i[ref], dependent: nil, inverse_of: false\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_pre_eager_lazy_loads\r\n    author = Author.create!(id: 2)\r\n    book1 = Book.create!(id: 1, ref: \"1\")\r\n    book2 = Book.create!(id: 2, ref: \"2\")\r\n\r\n    assert_nil book1.author\r\n    assert_equal author, book2.author\r\n    assert_equal [nil, author], Book.eager_load(:author).order(:id).map(&:author) # 3\r\n    assert_equal [nil, author], Book.preload(:author).order(:id).map(&:author) # 4\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\nThere are four setups: _FS_, _FJ_, _QS_, _QJ_, with _FS_ being the simplest. I expect the test to yield the same result for all setups. Also assertions 2 and 4 should probably either both fail or both succeed.\r\n\r\n### Actual behavior\r\n_FS_ passes, _FJ_ fails assertion 3, _QS_ fails assertion 4, _QJ_ fails assertions 3 and 4.\r\nIn all cases because the `.author` association on the second book is loaded but set to nil.\r\n\r\nThe queries look alright and don't depend on the setup, and the refs are sent unquoted on the preload.\r\n\r\n### System configuration\r\n**Ruby version**: 3.2.1 31819e82c8 arm64-darwin22","comments":["I checked just `FJ` case.\r\n\r\n For `3`, we get a query\r\n```sql\r\nSELECT \"books\".\"id\" AS t0_r0, \"books\".\"ref\" AS t0_r1, \"authors\".\"id\" AS t1_r0 FROM \"books\" \r\nLEFT OUTER JOIN \"authors\" ON \"authors\".\"id\" = \"books\".\"ref\" ORDER BY \"books\".\"id\" ASC\r\n```\r\n\r\nNote the `ON \"authors\".\"id\" = \"books\".\"ref\"` part. For sqlite (as in the repro script), this compares `json` (string) with an integer (`1 = '1'`) and this is false.So that's why there are no results. For PostgreSQL this will just raise an error: `operator does not exist: bigint = json`.","Interesting, that is the behaviour I expected mysql to have for json columns, but it actually seems to match:\r\n\r\n```sql\r\n# mysql 8.1.0\r\nCREATE TABLE books (id INTEGER PRIMARY KEY NOT NULL, ref JSON);\r\nCREATE TABLE authors (id INTEGER PRIMARY KEY NOT NULL);\r\nINSERT INTO books VALUES (1, \"1\"), (2, '\"1\"'), (3, \"2\"), (4, '\"2\"');\r\nINSERT INTO authors VALUES (2);\r\nSELECT books.id FROM books JOIN authors ON authors.id = books.ref; # id=3,4\r\nSELECT id FROM books WHERE ref = 2; # id=3\r\nSELECT id FROM books WHERE ref = \"2\"; # id=4\r\n```","MySQL converts strings to numbers when comparing them. I do not think this is a desired behavior from MySQL (as lots of other questionable behavior from it). There was even a fix for this some time ago https:\/\/github.com\/rails\/rails\/pull\/42440."],"labels":["activerecord","With reproduction steps"]},{"title":"Add BOOTSNAP_READONLY to Dockerfile template for production","body":"\r\n\r\n<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis was added in back in bootsnap 1.15.0 (https:\/\/github.com\/Shopify\/bootsnap\/pull\/428). This can save extra work and IO when the cache won't be changed, like is the case for docker containers\r\n\r\n### Detail\r\n\r\nThis Pull Request changes the Dockerfile template used when creating a new application to add `BOOTSNAP_READONLY=1`\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [ ] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [ ] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["This shouldn't make much of a difference in this context, Docker preserve mtime so bootsnap shouldn't have anything to update.\r\n\r\nBut actually, would need to measure, but I suspect this is actually harmful because you set it before `rake assets:precompile`, so I suspect Bootsnap won't be able to persist its load path cache, marking the final image boot slower.\r\n","Someone pointed out that the ENV would need to go into final image \ud83d\ude05 I think that would mitigate the concern about precompile since it wouldn't be read-only until the image is run.\r\n\r\n@byroot do you have any thoughts on how to measure the impact on this? Time to first request when running the docker image?","> do you have any thoughts on how to measure the impact on this?\r\n\r\nYeah, just need `time bin\/rails runner 1` in production mode.\r\n\r\nYou can also set `BOOTSNAP_LOG=1` to see if there is cache misses.","> I've tested it and it drastically changes application boot time: down from near 2mn to 30s \ud83d\ude03\r\n> \r\n> Edit: the app runs in Docker, on HDD drives\r\n\r\nThat's in \"too good to be true\" territory. Can you try just disabling Bootsnap to compare?"],"labels":["railties"]},{"title":"Add documentation for delegated methods on Metal","body":"Some of these were specifically mentioned earlier in the Metal docs (response_body=, content_type=, status=) but were not linked because the methods were not documented (due to being part of a delegation).\r\n\r\nThis commit separates all of the delegated methods so that they can be documented, adds links for the mentioned methods, and additionally documents two methods on Response that are mentioned in the new Metal documentation, but were not previously documented.","comments":[],"labels":["actionpack"]},{"title":"Fix permitting arrays in numbered parameters for `StrongParameters`","body":"Fixes #50051.\r\n\r\nThe test case is a preceding test case, adapted for this change.","comments":[],"labels":["actionpack"]},{"title":"Strong Parameters permit Array value in Hash","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\nend\r\n\r\nrequire \"action_controller\/railtie\"\r\nrequire \"minitest\/autorun\"\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_strong_parameters\r\n    hash = {\r\n      'a' => {\r\n        # '0' key can be any integer\r\n        '0' => [{ 'id' => 1, 'body' => [1] }],\r\n        '1' => [{ 'id' => 2, 'body' => [2] }]\r\n      }\r\n    }\r\n\r\n    # passes but keys, '0' & '1', needs to be specified, which may not be possible if they're variable, e.g. integer id of some sort\r\n    assert hash.eql?(ActionController::Parameters.new(hash).permit(a: {'0': [:id, body: []], '1': [:id, body: []]}).to_h)\r\n\r\n    # fails\r\n    assert hash.eql?(ActionController::Parameters.new(hash).permit(a: [:id, body: []]).to_h)\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n<!-- Tell us what should happen -->\r\n\r\nExpected to get a permitted hash of:\r\n\r\n```ruby\r\n    {\r\n      'a' => {\r\n        '0' => [{ 'id' => 1, 'body' => [1]}],\r\n        '1' => [{ 'id' => 2, 'body' => [2]}]\r\n      }\r\n    }\r\n```\r\n\r\n### Actual behavior\r\n<!-- Tell us what happens instead -->\r\n\r\nGot:\r\n\r\n```ruby\r\n    {\r\n      'a' => { }\r\n    }\r\n```\r\n\r\n\r\n### System configuration\r\n**Rails version**: 7.0.6\r\n\r\n**Ruby version**: 3.0.4p208\r\n","comments":["Verified on Rails 7.1.2 and Ruby ruby 3.2.2 (2023-03-30 revision e51014f9c0).\r\n\r\nThe [docs](https:\/\/edgeapi.rubyonrails.org\/classes\/ActionController\/Parameters.html#method-i-permit) indicate that this would be expected behaviour:\r\n> If your parameters specify multiple parameters indexed by a number, you can permit each set of parameters under the numeric key to be the same using the same syntax as permitting a single item.\r\n\r\nSo \r\n```ruby\r\nparams = ActionController::Parameters.new({\r\n  'a' => {\r\n    '0' => [{ 'id' => 1, 'body' => [1] }],\r\n   }\r\n})\r\nparams.permit(a: [:id, body: []]).to_h\r\n#<ActionController::Parameters {\"a\"=>[#<ActionController::Parameters {\"id\"=>1, \"body\"=>[1]} permitted: true>]} permitted: true>\r\n```\r\nwould be expected to behave the same as\r\n\r\n```ruby\r\nparams = ActionController::Parameters.new({\r\n  'a' => [{ 'id' => 1, 'body' => [1] }],\r\n})\r\nparams.permit(a: [:id, body: []]).to_h\r\n#<ActionController::Parameters {\"a\"=>[#<ActionController::Parameters {\"id\"=>1, \"body\"=>[1]} permitted: true>]} permitted: true>\r\n```","I think I found the solution. Going to open a PR."],"labels":["actionpack","attached PR"]},{"title":"`alias_attribute` no longer overrides reader method defined in concern","body":"I realize this is an edge case. Mainly posting the issue to document the change for others. Took me an hour today to understand a failure in our app caused by this change.\r\n\r\n### Steps to reproduce\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  # Activate the gem you are reporting the issue against.\r\n  gem \"activerecord\", \"~> 7.1.0\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n    t.string :title\r\n  end\r\nend\r\n\r\nmodule Displayable\r\n  # This is the a default implementation for classes that do not wish to implement display_name themselves\r\n  def display_name\r\n    \"Default name\"\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  include Displayable\r\n\r\n  alias_attribute :display_name, :title\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_association_stuff\r\n    post = Post.create!(title: \"Some title\")\r\n\r\n    assert_equal \"Some title\", post.display_name\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\n`alias_attribute` in Post overrides `display_name` reader method defined in `Displayable` module. Test passes.\r\n\r\n### Actual behavior\r\n\r\nI assume since https:\/\/github.com\/rails\/rails\/pull\/48533, `alias_attribute` no longer defines the `display_name` reader method on `Post` itself, but on `Post::GeneratedAttributeMethods` which comes after `Displayable` in the ancestor chain:\r\n\r\n```\r\nPost.ancestors\r\n# => [Post(id: integer, title: string), Displayable, Post::GeneratedAssociationMethods, Post::GeneratedAttributeMethods, ActiveRecord::Base, ...]\r\n```\r\n\r\nTest fails:\r\n\r\n```\r\n1) Failure:\r\nBugTest#test_association_stuff [alias_attribute_bug.rb:46]:\r\nExpected: \"Some title\"\r\n  Actual: \"Default name\"\r\n```\r\n\r\nChanging `activerecord` version to 7.0.0 fixes the test.\r\n\r\n### System configuration\r\n**Rails version**: 7.1.2\r\n\r\n**Ruby version**: 3.2.2\r\n","comments":["So using the module instead of defining method directly on the class wasn't a necessity but it was a convenient time for us to do that. And technically we should be able to get back to generating methods on the class without breaking any expectations\r\n\r\n@byroot Do you think we should consider this a bug and instead we should go through a deprecation cycle before switching to the module for the method generation? ","I think this specific issue could be fixed by eagerly including the generated methods module from the `inherited` callback."],"labels":["activerecord","With reproduction steps"]},{"title":"Nested Delegated Types with `accepts_nested_attributes_for` not updating as expected","body":"### Steps to reproduce\r\n\r\n```ruby\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  gem \"rails\", \"~> 7\"\r\n  gem \"sqlite3\", platform: :mri\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\n\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table \"transformation_pipeline_transformations\", force: :cascade do |t|\r\n    t.bigint \"transformation_pipeline_id\", null: false\r\n    t.bigint \"transformation_id\", null: false\r\n\r\n    t.datetime \"created_at\", null: false\r\n    t.datetime \"updated_at\", null: false\r\n  end\r\n\r\n  create_table \"transformation_pipelines\", force: :cascade do |t|\r\n    t.datetime \"created_at\", null: false\r\n    t.datetime \"updated_at\", null: false\r\n    t.string \"name\"\r\n  end\r\n\r\n  create_table \"transformations\", force: :cascade do |t|\r\n    t.string \"name\"\r\n    t.string \"transformable_type\", null: false\r\n    t.bigint \"transformable_id\", null: false\r\n    t.datetime \"created_at\", null: false\r\n    t.datetime \"updated_at\", null: false\r\n    t.index %w[transformable_type transformable_id], name: \"index_transformations_on_transformable\"\r\n  end\r\n\r\n  create_table \"transformations_tests\", force: :cascade do |t|\r\n    t.string \"args\"\r\n    t.datetime \"created_at\", null: false\r\n    t.datetime \"updated_at\", null: false\r\n  end\r\nend\r\n\r\nclass ApplicationRecord < ActiveRecord::Base\r\n  self.abstract_class = true\r\nend\r\n\r\nclass Transformation < ApplicationRecord\r\n  delegated_type :transformable, types: %w[Transformations::Test]\r\n  belongs_to :transformable, polymorphic: true\r\n  delegate :transform!, to: :transformable\r\n  accepts_nested_attributes_for :transformable\r\nend\r\n\r\nmodule Transformations\r\n  def self.table_name_prefix\r\n    \"transformations_\"\r\n  end\r\nend\r\n\r\nclass TransformationPipeline < ApplicationRecord\r\n  has_many :transformation_pipeline_transformations\r\n  has_many :transformations, through: :transformation_pipeline_transformations\r\n  accepts_nested_attributes_for :transformations\r\nend\r\n\r\nclass TransformationPipelineTransformation < ApplicationRecord\r\n  belongs_to :transformation_pipeline\r\n  belongs_to :transformation\r\nend\r\n\r\nclass Transformations::Test < ApplicationRecord\r\n  has_one :transformation, as: :transformable, touch: true\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_delegated_type_assignment\r\n    transformation = Transformation.create!(transformable: Transformations::Test.create(args: \"@\"), name: \"test\")\r\n    transformation_pipeline = TransformationPipeline.create!(name: \"test pipeline\")\r\n    transformation_pipeline_transformations =\r\n      TransformationPipelineTransformation.create!(\r\n        transformation_pipeline: transformation_pipeline,\r\n        transformation: transformation\r\n      )\r\n\r\n    pipeline = TransformationPipeline.first\r\n    new_transformable_args = \"New Args\"\r\n    new_transformation_name = \"New Transformation Name\"\r\n    pipeline.update(\r\n      name: \"New TransformationPipeline Name\",\r\n      transformations_attributes: [\r\n        {\r\n          id: transformation.id,\r\n          name: new_transformation_name,\r\n          transformable_attributes: {\r\n            id: transformation.transformable.id,\r\n            args: new_transformable_args\r\n          }\r\n        }\r\n      ]\r\n    )\r\n    assert_equal new_transformable_args, Transformation.find(transformation.id).transformable.args\r\n  end\r\nend\r\n``` \r\n\r\n### Expected behavior\r\n\r\nUpdate field args to be new_transformable_args or emit warning or error if it isn't possible. I've checked the [implementation PR](https:\/\/github.com\/rails\/rails\/pull\/41717\/files) and couldn't spot anything I'm doing wrong.\r\n\r\n### Actual behavior\r\n\r\nAll fields except args are updated, transaction is committed, no error is returned:\r\n\r\n```\r\n TRANSACTION (0.0ms)  begin transaction\r\n Transformation Load (0.1ms)  SELECT \"transformations\".* FROM \"transformations\" INNER JOIN \"transformation_pipeline_transformations\" ON \"transformations\".\"id\" = \"transformation_pipeline_transformations\".\"transformation_id\" WHERE \"transformation_pipeline_transformations\".\"transformation_pipeline_id\" = ? AND \"transformations\".\"id\" = ?  [[\"transformation_pipeline_id\", 1], [\"id\", 1]]\r\n Transformations::Test Load (0.0ms)  SELECT \"transformations_tests\".* FROM \"transformations_tests\" WHERE \"transformations_tests\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]]\r\n TransformationPipeline Update (0.0ms)  UPDATE \"transformation_pipelines\" SET \"updated_at\" = ?, \"name\" = ? WHERE \"transformation_pipelines\".\"id\" = ?  [[\"updated_at\", \"2023-11-13 16:02:38.941072\"], [\"name\", \"New TransformationPipeline Name\"], [\"id\", 1]]\r\n Transformation Update (0.0ms)  UPDATE \"transformations\" SET \"name\" = ?, \"updated_at\" = ? WHERE \"transformations\".\"id\" = ?  [[\"name\", \"New Transformation Name\"], [\"updated_at\", \"2023-11-13 16:02:38.941457\"], [\"id\", 1]]\r\n TRANSACTION (0.0ms)  commit transaction\r\n```\r\n\r\n### System configuration\r\n**Rails version**: Rails 7.1.2\r\n\r\n**Ruby version**: ruby 3.2.1 (2023-02-08 revision 31819e82c8) [arm64-darwin22]\r\n\r\n### Edit\r\n\r\nFrom what I found so far it looks like it's correctly assigning attributes to the model.\r\nIt's calling ActiveModel::AttributeAssignment#assign_attributes with the updated value:\r\n(It calls `args=` with `New Args` on `Transformations::Test`)\r\n\r\n But delegated type is not marked as one to be saved when transaction finishes. I will keep digging...\r\n\r\nIt works as expected when I change the hash to not have id under transformable_attributes:\r\n\r\n```ruby\r\npipeline1.update(\r\n      name: \"New TransformationPipeline Name\",\r\n      transformations_attributes: [\r\n        {\r\n          id: transformation.id,\r\n          name: new_transformation_name,\r\n          transformable_type: transformation.transformable_type,\r\n          transformable_id: transformation.transformable_id,\r\n          transformable_attributes: {\r\n            # id: transformation.transformable.id, # Commenting out it here, makes it work\r\n            args: new_transformable_args\r\n          }\r\n        }\r\n      ]\r\n    )\r\n```\r\n","comments":["Thanks for your report!\r\n\r\nI'm curious if this can reproduce in 7.0, just based on your last comment if it has something to do with the `id`.","When an id **is not** provided, [this logic](https:\/\/github.com\/rails\/rails\/blob\/354d68e8a63b21e47a529105a508411bfe8be869\/activerecord\/lib\/active_record\/nested_attributes.rb#L445-L447) calls the method defined [here](https:\/\/github.com\/rails\/rails\/blob\/354d68e8a63b21e47a529105a508411bfe8be869\/activerecord\/lib\/active_record\/delegated_type.rb#L230-L232), and the new record is saved via autosave (autosave always runs for new records). This explains why your id-less case passes.\r\n\r\nWhen an id **is** provided, [this logic](https:\/\/github.com\/rails\/rails\/blob\/354d68e8a63b21e47a529105a508411bfe8be869\/activerecord\/lib\/active_record\/nested_attributes.rb#L431-L433) assigns the new attributes to the existing record, and the record is only saved if `autosave` [here](https:\/\/github.com\/rails\/rails\/blob\/354d68e8a63b21e47a529105a508411bfe8be869\/activerecord\/lib\/active_record\/autosave_association.rb#L508) is `true`. This should always be the case for `accepts_nested_attributes_for` associations as the `autosave` option is set [here](https:\/\/github.com\/rails\/rails\/blob\/354d68e8a63b21e47a529105a508411bfe8be869\/activerecord\/lib\/active_record\/nested_attributes.rb#L359).\r\n\r\nBut, for some reason, when fetching the `autosave` option for the reflection in your test, it is `nil`.\r\n\r\n`#delegated_type` defines a `belongs_to` association for the provided role by default [here](https:\/\/github.com\/rails\/rails\/blob\/354d68e8a63b21e47a529105a508411bfe8be869\/activerecord\/lib\/active_record\/delegated_type.rb#L212), so my initial hunch was that because you're also manually defining the `belongs_to` for the same role, the association (and therefore the reflection) is being duplicated, and the autosave logic was grabbing the wrong reflection:\r\n\r\n```ruby\r\ndelegated_type :transformable, types: %w[Transformations::Test]\r\nbelongs_to :transformable, polymorphic: true # I thought this results in a duplicate reflection\r\naccepts_nested_attributes_for :transformable # Then autosave is set for one reflection here, but the autosave logic fetches the other\r\n```\r\n\r\n**But**, that doesn't seem to be the issue, cause associations aren't duplicated, [they are overridden](https:\/\/github.com\/rails\/rails\/blob\/354d68e8a63b21e47a529105a508411bfe8be869\/activerecord\/lib\/active_record\/reflection.rb#L25). In fact, I don't think this is a delegated type issue at all. Simply duplicating the association gives us the same result:\r\n\r\n```ruby\r\n# this passes\r\ndelegated_type :transformable, types: %w[Transformations::Test]\r\naccepts_nested_attributes_for :transformable\r\n\r\n# this passes\r\nbelongs_to :transformable, polymorphic: true\r\naccepts_nested_attributes_for :transformable\r\n\r\n# this fails\r\ndelegated_type :transformable, types: %w[Transformations::Test]\r\ndelegated_type :transformable, types: %w[Transformations::Test]\r\naccepts_nested_attributes_for :transformable\r\n\r\n# this fails\r\nbelongs_to :transformable, polymorphic: true\r\nbelongs_to :transformable, polymorphic: true\r\naccepts_nested_attributes_for :transformable\r\n```\r\n\r\nI'll have to keep digging to figure out why this happens, but for now you should be able to resolve your issue by removing the `belongs_to` which is not needed anyway (also reflected in the docs) when using `delegated_type`.","Update: The issue is that although a new reflection is created altogether, the autosave methods aren't redefined for it.\r\n\r\nI got this up: https:\/\/github.com\/rails\/rails\/pull\/50291","This issue has been automatically marked as stale because it has not been commented on for at least three months.\nThe resources of the Rails team are limited, and so we are asking for your help.\nIf you can still reproduce this error on the `7-1-stable` branch or on `main`, please reply with all of the information you have about it in order to keep the issue open.\nThank you for all your contributions.\n","@zzak @akhilgkrishnan Sorry for the tag, but can we add the attached PR label to this? I got a light review but it hasn't progressed past that.\r\n\r\n**Edit:** Thank you! @skipkayhil"],"labels":["activerecord","attached PR"]},{"title":"Add ability to detect a half-open connection","body":"### Motivation \/ Background\r\n\r\nI have IoT devices connecting to my Rails app via ActionCable, and I want to log when a device connects or disconnects.\r\n\r\nThis is already doable via `Cahnnel#subscribed` and `Channel#unsubscribed`; and it works pretty well when a device properly connects, subscribes, and disconnects.\r\n\r\nBut when a device improperly disconnects - e.g. if it gets unplugged from the network - its ActionCable connection doesn't close and can linger in the system for up to half an hour.\r\n\r\nThis means that the server is using up resources to manage this connection, and send messages to it, when there isn't a client to receive them (since a client will reconnect if it misses 2 heartbeats which is about 6 sec). Some of these issues have been commented on in #45112 and #24908\r\n\r\nCurrently, ActionCable doesn't have a mechanism to detect if its connection is half-open (if there is a client listening on the other end). \r\n\r\nThis PR changes the protocol so that a client has to respond to a PING message with a PONG message. If it doesn't do so within 2 heartbeats (6 sec) the connection is assumed to be half-open and is closed.\r\n\r\nFixes #45112\r\nFixes #24908\r\nFixes #29307\r\nFixes #32828\r\n\r\n### Detail\r\n\r\n#### Why not client-initiated heartbeats?\r\n\r\nI've considered implementing client-initiated heartbeats ([and did a proof of concept for it](https:\/\/github.com\/monorkin\/actioncable-presence-detection-demo\/commit\/82a851f0de0f8db414e3c8055fa28be4031ffd90)) as was suggested in #45112 and in #24908, but opted for PONG responses because [Chrome recently added a feature that throttles setTimeout and setInterval to run at most once a minute if a tab isn't in focus](https:\/\/developer.chrome.com\/blog\/timer-throttling-in-chrome-88\/). \r\n\r\nThis throttling would cause clients to reconnect loop if the half-open threshold is set to below 1 min. And heartbeats with intervals greater than 1 min aren't always desirable, like in my case where I want to know that a device went offline within seconds. Chrome's throttling also [prompted socket.io to change it's heartbeat to be server-initated](https:\/\/github.com\/socketio\/socket.io\/issues\/2769#issuecomment-639300952).\r\n\r\n#### Backwards and forwards compatibility\r\n\r\nTo ensure that clients that *don't* know about PONG messages can still work with servers that *do*, and for clients that *do* know about PONG messages to work with servers that *don't*; I've created a minor revision of the protocol - `actioncable-v1.1-json`.\r\n\r\nIf a client sends that in a `Sec-WebSocket-Protocol` header to the server and the server responds with `actioncable-v1.1-json` both the client and server know that they should send and expect PONG messages.\r\n\r\nIf the client doesn't send `Sec-WebSocket-Protocol: actioncable-v1.1-json` or the server doesn't respond with `Sec-WebSocket-Protocol: actioncable-v1.1-json` then the behavior from `actioncable-v1-json` is used.\r\n\r\n#### Why is this logic on the connection object instead of the stream object?\r\n\r\nIn #45112 there was a suggestion to implement this as a timeout in the event-loop \/ select-loop.\r\nFrom my understanding implementing it that way wouldn't be that much different from the implementation in this PR.\r\nThere would be some kind of last_message_read_at timestamp that's checked in each iteration, and if a threshold is exceeded the socket would be closed.\r\n\r\nI implemented everything on the connection object because doimainwise it makes sense to me that a connection keeps the heartbeat and responds to it. \r\n\r\nThough I can see the benefits of having everything in the event loop. I have no strong opinion on this.\r\n\r\n#### What about dropped message detection from #24908?\r\n\r\nI've opted not to tackle that in this PR as that seems like it could become a mini-framework within ActionCable.\r\n\r\n#### What about client-side latency measurements from #24908?\r\n\r\nI've opted not to include that in this PR. But this could probably be done by adding an `echo` type message (or repurposing `ping`) that just echos back what the client sends to the server.\r\n\r\n#### What about client-set heartbeat frequency from #24908?\r\n\r\nI've opted not to include that in this PR as it's an unrelated feature to this one.\r\n\r\n#### Why not native WebSocket PING and PONG messages like #32828?\r\n\r\nIt currently isn't possible to process native PING and PONG messages in browsers, so an additional sub-protocol level heartbeat would be needed for JS clients in browsers to be able to detect that they have been disconnected. Therefore it makes more sense to have just the one sub-protocol level heartbeat for everything.\r\n\r\n#### What about the changelog?\r\n\r\n~The CHANGELOG file contains a link to the changes in Rails 7.1. I'm not sure what to do.~\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Great! For the changelog just put the change at the beginning of the file. That line that exists now is good.\r\n\r\n```\r\n*   Something\r\n\r\n    *Stanko Krtali\u0107*\r\n```","@brunoprietog thank you for the instructions.\r\nI've updated the changelog."],"labels":["docs","actioncable"]},{"title":"db:create:all task fails for new app with mysql adapter","body":"### Steps to reproduce\r\n\r\n```\r\nrails new foo -d mysql\r\ncd .\/foo\r\nedit config\/database.yml # Enter root password\r\nbin\/rails db:create:all\r\n```\r\n\r\n### Expected behavior\r\nDatabases are being created.\r\n\r\n### Actual behavior\r\nError:\r\n\r\n```\r\nActiveRecord::NoDatabaseError: We could not find your database: foo_development. Available database configurations can be found in config\/database.yml file. (ActiveRecord::NoDatabaseError)\r\n\r\nTo resolve this error:\r\n\r\n- Did you create the database for this app, or delete it? You may need to create your database.\r\n- Has the database name changed? Check your database.yml config has the correct database name.\r\n\r\nTo create your database, run:\r\n\r\n        bin\/rails db:create\r\n```\r\n\r\nAfter calling `bin\/rails db:create`, `bin\/rails db:create:all` works as expected.\r\n\r\nI am aware that `db:create` now also creates the test database in the development env. I'm using the `db:create:all` task, though, to automatically create databases for a dummy application of a Rails engine, where `db:create` still only creates the test database when running in CI.\r\n\r\n### System configuration\r\n**Rails version**: 7.1.2 - 7.1.3\r\n\r\n**Ruby version**: 3.2.2\r\n","comments":["Was able to reproduce and find a fix. Going to open a PR.","Made further investigation. This is already working on `main`, thanks to https:\/\/github.com\/rails\/rails\/pull\/49378.\r\n@byroot Should that be backported?","I don't think we should backport it, because it's fairly big of a change in behavior. Do you have a more targeted fix?","My fix was \r\n```diff\r\ndiff --git a\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb b\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb\r\nindex a9fa52e7b8..ecf30e2dcd 100644\r\n--- a\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb\r\n+++ b\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb\r\n@@ -125,10 +125,9 @@ def create(configuration, *arguments)\r\n       end\r\n\r\n       def create_all\r\n-        db_config = migration_connection.pool.db_config\r\n-\r\n         each_local_configuration { |db_config| create(db_config) }\r\n\r\n+        db_config = migration_connection.pool.db_config\r\n         migration_class.establish_connection(db_config)\r\n       end\r\n```\r\n\r\nBut I had troubles writing a test for it. This reproduces only for MySQL. A proper place for the test is in https:\/\/github.com\/rails\/rails\/blob\/main\/railties\/test\/application\/rake\/dbs_test.rb, but it only had db configs for Postgres and SQLite. Should I update that? ","Thank would be great yes.","But also since the fix doesn't target `main` don't sweat it too much if testing is hard, since that code won't see as much changes as if it was on `main`, the risk for regression are much lower. ","Opened https:\/\/github.com\/rails\/rails\/pull\/50055.","The error is still the same in Rails 7.1.3. Can this issue be re-opened or should I create an identical one for the new Rails version?","Still works for me for the reproduction steps from the issue description.\r\nCan you provide a sample app or update the reproduction steps?","The above steps still reproduce the problem for me. \r\n\r\n<details>\r\n  <summary>Full stack trace of the final command<\/summary>\r\n\r\n```\r\n$ bin\/rails db:create:all --trace\r\n** Invoke db:create:all (first_time)\r\n** Invoke db:load_config (first_time)\r\n** Invoke environment (first_time)\r\n** Execute environment\r\n** Execute db:load_config\r\n** Execute db:create:all\r\nbin\/rails aborted!\r\nActiveRecord::DatabaseConnectionError: There is an issue connecting to your database with your username\/password, username: root. (ActiveRecord::DatabaseConnectionError)\r\n\r\nPlease check your database configuration to ensure the username\/password are valid.\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:42:in `rescue in new_client'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:35:in `new_client'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:159:in `connect'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:167:in `reconnect'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:685:in `block in reconnect!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activesupport-7.1.3\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:684:in `reconnect!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:788:in `verify!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:795:in `connect!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1001:in `block in with_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activesupport-7.1.3\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1000:in `with_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1113:in `valid_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1100:in `any_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:181:in `get_full_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_mysql_adapter.rb:87:in `get_database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/schema_cache.rb:374:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/schema_cache.rb:70:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/schema_cache.rb:200:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:871:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_mysql_adapter.rb:657:in `check_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:678:in `new_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:723:in `checkout_new_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:702:in `try_to_checkout_new_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:654:in `acquire_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:353:in `checkout'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:182:in `connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:501:in `block in with_temporary_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:518:in `with_temporary_pool'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:500:in `with_temporary_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:129:in `block in create_all'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:572:in `block in each_local_configuration'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:568:in `each'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:568:in `each_local_configuration'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:128:in `create_all'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/railties\/databases.rake:32:in `block (3 levels) in <main>'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:281:in `block in execute'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:281:in `each'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:281:in `execute'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:219:in `block in invoke_with_call_chain'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:199:in `synchronize'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:199:in `invoke_with_call_chain'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:188:in `invoke'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:182:in `invoke_task'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:138:in `block (2 levels) in top_level'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:138:in `each'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:138:in `block in top_level'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:147:in `run_with_threads'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:132:in `top_level'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/commands\/rake\/rake_command.rb:27:in `block (2 levels) in perform'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:208:in `standard_exception_handling'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/commands\/rake\/rake_command.rb:27:in `block in perform'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/commands\/rake\/rake_command.rb:44:in `block in with_rake'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/rake_module.rb:59:in `with_application'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/commands\/rake\/rake_command.rb:41:in `with_rake'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/commands\/rake\/rake_command.rb:20:in `perform'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/command.rb:156:in `invoke_rake'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/command.rb:73:in `block in invoke'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/command.rb:149:in `with_argv'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/command.rb:69:in `invoke'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/commands.rb:18:in `<main>'\r\n<internal:\/home\/tfischbach\/.rvm\/rubies\/ruby-3.2.2\/lib\/ruby\/3.2.0\/rubygems\/core_ext\/kernel_require.rb>:37:in `require'\r\n<internal:\/home\/tfischbach\/.rvm\/rubies\/ruby-3.2.2\/lib\/ruby\/3.2.0\/rubygems\/core_ext\/kernel_require.rb>:37:in `require'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/bootsnap-1.17.1\/lib\/bootsnap\/load_path_cache\/core_ext\/kernel_require.rb:30:in `require'\r\nbin\/rails:4:in `<main>'\r\n\r\nCaused by:\r\nMysql2::Error::ConnectionError: Access denied for user 'root'@'localhost' (using password: YES) (Mysql2::Error::ConnectionError)\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/mysql2-0.5.5\/lib\/mysql2\/client.rb:97:in `connect'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/mysql2-0.5.5\/lib\/mysql2\/client.rb:97:in `initialize'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:36:in `new'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:36:in `new_client'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:159:in `connect'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:167:in `reconnect'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:685:in `block in reconnect!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activesupport-7.1.3\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:684:in `reconnect!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:788:in `verify!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:795:in `connect!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1001:in `block in with_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activesupport-7.1.3\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1000:in `with_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1113:in `valid_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1100:in `any_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:181:in `get_full_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_mysql_adapter.rb:87:in `get_database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/schema_cache.rb:374:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/schema_cache.rb:70:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/schema_cache.rb:200:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:871:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_mysql_adapter.rb:657:in `check_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:678:in `new_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:723:in `checkout_new_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:702:in `try_to_checkout_new_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:654:in `acquire_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:353:in `checkout'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:182:in `connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:501:in `block in with_temporary_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:518:in `with_temporary_pool'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:500:in `with_temporary_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:129:in `block in create_all'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:572:in `block in each_local_configuration'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:568:in `each'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:568:in `each_local_configuration'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:128:in `create_all'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/railties\/databases.rake:32:in `block (3 levels) in <main>'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:281:in `block in execute'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:281:in `each'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:281:in `execute'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:219:in `block in invoke_with_call_chain'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:199:in `synchronize'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:199:in `invoke_with_call_chain'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:188:in `invoke'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:182:in `invoke_task'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:138:in `block (2 levels) in top_level'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:138:in `each'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:138:in `block in top_level'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:147:in `run_with_threads'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:132:in `top_level'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/commands\/rake\/rake_command.rb:27:in `block (2 levels) in perform'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:208:in `standard_exception_handling'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/commands\/rake\/rake_command.rb:27:in `block in perform'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/commands\/rake\/rake_command.rb:44:in `block in with_rake'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/rake_module.rb:59:in `with_application'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/commands\/rake\/rake_command.rb:41:in `with_rake'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/commands\/rake\/rake_command.rb:20:in `perform'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/command.rb:156:in `invoke_rake'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/command.rb:73:in `block in invoke'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/command.rb:149:in `with_argv'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/command.rb:69:in `invoke'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/railties-7.1.3\/lib\/rails\/commands.rb:18:in `<main>'\r\n<internal:\/home\/tfischbach\/.rvm\/rubies\/ruby-3.2.2\/lib\/ruby\/3.2.0\/rubygems\/core_ext\/kernel_require.rb>:37:in `require'\r\n<internal:\/home\/tfischbach\/.rvm\/rubies\/ruby-3.2.2\/lib\/ruby\/3.2.0\/rubygems\/core_ext\/kernel_require.rb>:37:in `require'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/bootsnap-1.17.1\/lib\/bootsnap\/load_path_cache\/core_ext\/kernel_require.rb:30:in `require'\r\nbin\/rails:4:in `<main>'\r\nTasks: TOP => db:create:all\r\n```\r\n\r\n<\/details>","Seems like you have incorrectly configured username\/password in the `database.yml`.","Sorry. I accidentally pasted the wrong stack trace :see_no_evil: \r\n\r\n<details>\r\n<summary>Here's the correct one<\/summary>\r\n\r\n```\r\n$ bin\/rake db:create:all --trace\r\n** Invoke db:create:all (first_time)\r\n** Invoke db:load_config (first_time)\r\n** Invoke environment (first_time)\r\n** Execute environment\r\n** Execute db:load_config\r\n** Execute db:create:all\r\nrake aborted!\r\nActiveRecord::NoDatabaseError: We could not find your database: foo3_development. Available database configurations can be found in config\/database.yml. (ActiveRecord::NoDatabaseError)\r\n\r\nTo resolve this error:\r\n\r\n- Did you not create the database, or did you delete it? To create the database, run:\r\n\r\n    bin\/rails db:create\r\n\r\n- Has the database name changed? Verify that config\/database.yml contains the correct database name.\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:40:in `rescue in new_client'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:35:in `new_client'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:159:in `connect'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:167:in `reconnect'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:685:in `block in reconnect!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activesupport-7.1.3\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:684:in `reconnect!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:788:in `verify!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:795:in `connect!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1001:in `block in with_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activesupport-7.1.3\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1000:in `with_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1113:in `valid_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1100:in `any_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:181:in `get_full_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_mysql_adapter.rb:87:in `get_database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/schema_cache.rb:374:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/schema_cache.rb:70:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/schema_cache.rb:200:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:871:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_mysql_adapter.rb:657:in `check_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:678:in `new_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:723:in `checkout_new_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:702:in `try_to_checkout_new_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:654:in `acquire_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:353:in `checkout'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:182:in `connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:501:in `block in with_temporary_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:518:in `with_temporary_pool'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:500:in `with_temporary_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:129:in `block in create_all'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:572:in `block in each_local_configuration'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:568:in `each'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:568:in `each_local_configuration'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:128:in `create_all'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/railties\/databases.rake:32:in `block (3 levels) in <main>'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:281:in `block in execute'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:281:in `each'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:281:in `execute'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:219:in `block in invoke_with_call_chain'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:199:in `synchronize'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:199:in `invoke_with_call_chain'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:188:in `invoke'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:182:in `invoke_task'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:138:in `block (2 levels) in top_level'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:138:in `each'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:138:in `block in top_level'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:147:in `run_with_threads'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:132:in `top_level'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:83:in `block in run'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:208:in `standard_exception_handling'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:80:in `run'\r\nbin\/rake:4:in `<main>'\r\n\r\nCaused by:\r\nMysql2::Error: Unknown database 'foo3_development' (Mysql2::Error)\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/mysql2-0.5.5\/lib\/mysql2\/client.rb:97:in `connect'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/mysql2-0.5.5\/lib\/mysql2\/client.rb:97:in `initialize'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:36:in `new'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:36:in `new_client'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:159:in `connect'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:167:in `reconnect'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:685:in `block in reconnect!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activesupport-7.1.3\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:684:in `reconnect!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:788:in `verify!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:795:in `connect!'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1001:in `block in with_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activesupport-7.1.3\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1000:in `with_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1113:in `valid_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1100:in `any_raw_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/mysql2_adapter.rb:181:in `get_full_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_mysql_adapter.rb:87:in `get_database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/schema_cache.rb:374:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/schema_cache.rb:70:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/schema_cache.rb:200:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:871:in `database_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract_mysql_adapter.rb:657:in `check_version'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:678:in `new_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:723:in `checkout_new_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:702:in `try_to_checkout_new_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:654:in `acquire_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:353:in `checkout'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/connection_adapters\/abstract\/connection_pool.rb:182:in `connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:501:in `block in with_temporary_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:518:in `with_temporary_pool'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:500:in `with_temporary_connection'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:129:in `block in create_all'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:572:in `block in each_local_configuration'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:568:in `each'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:568:in `each_local_configuration'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/tasks\/database_tasks.rb:128:in `create_all'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/activerecord-7.1.3\/lib\/active_record\/railties\/databases.rake:32:in `block (3 levels) in <main>'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:281:in `block in execute'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:281:in `each'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:281:in `execute'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:219:in `block in invoke_with_call_chain'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:199:in `synchronize'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:199:in `invoke_with_call_chain'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/task.rb:188:in `invoke'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:182:in `invoke_task'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:138:in `block (2 levels) in top_level'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:138:in `each'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:138:in `block in top_level'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:147:in `run_with_threads'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:132:in `top_level'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:83:in `block in run'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:208:in `standard_exception_handling'\r\n\/home\/tfischbach\/.rvm\/gems\/ruby-3.2.2\/gems\/rake-13.1.0\/lib\/rake\/application.rb:80:in `run'\r\nbin\/rake:4:in `<main>'\r\nTasks: TOP => db:create:all\r\n```\r\n\r\n<\/details>\r\n","Can you create and push to github a sample app and provide the steps needed to reproduce it?","Here's a [simple sample app](https:\/\/github.com\/tf\/db-create-all-repro) (basically just `rails new` and changes to `database.yml`) with a [GitHub Actions workflow](https:\/\/github.com\/tf\/db-create-all-repro\/blob\/main\/.github\/workflows\/db_create_all.yml) that [reproduces the bug in 7.1.3](https:\/\/github.com\/tf\/db-create-all-repro\/actions\/runs\/7561352109) and also shows that the workaround of calling `rake db:create` first also no long works. [Downgrading to Rails 7.1.2](https:\/\/github.com\/tf\/db-create-all-repro\/compare\/main...rails-7-1-2) makes at least [the workaround work](https:\/\/github.com\/tf\/db-create-all-repro\/actions\/runs\/7561392246).  ","Ok, I was able to reproduce. Probably, I made some mistake when tested locally that PR back then, I apologize.\r\nSeems like there is no an easy solution. So, I think we should revert that change and maybe backport https:\/\/github.com\/rails\/rails\/pull\/49378. @byroot  "],"labels":["activerecord","With reproduction steps"]},{"title":"Fix schema dumper to account for `ActiveRecord.dump_schemas` when dumping in `:ruby` format","body":"Fixes #49926.\r\n\r\nCurrently, `ActiveRecord.dump_schemas` (introduced in #19347) is only considered when dumping schema in a `:sql` format. This PR fixes that by considering it also when dumping in a `:ruby` format.","comments":["Ref #49555 which I think does something similar?","That is completely different  - it adds `ignore_schemas` config, but we already have a `dump_schemas`. I do not think that config is needed. And seems like that PR implementation is to just ignore dumping schemas in the schema list, but does not consider dumping or not schema prefixed tables, indexes etc. "],"labels":["activerecord","needs feedback"]},{"title":"test: update karma npm from 3.1.4 to 6.4.2","body":"### Motivation \/ Background\r\n\r\n[karma](https:\/\/www.npmjs.com\/package\/karma) npm package, used in actioncable and actionview, has been stale.\r\n\r\nkarma 3.x was stable in 2018, but 6.x is now the latest.\r\n\r\nThis Pull Request has been created because Rails developers are to use the latest karma and latest Node.js (20 LTS or 21).\r\n\r\n### Detail\r\n\r\nThis Pull Request updates karma package from 3.1.4 to 6.4.2, which prevents from using `chokidar@2` (or `fsevents@1`).\r\n\r\n### Additional information\r\n\r\nThe package was introduced in #34440 and #46206. Also this change follows up #49901 (Node.js 20).\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [n\/a] Tests are added or updated if you fix a bug or add a feature.\r\n* [n\/a] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Thanks @tnir for the PR!\r\nThis looks good to me.\r\nThe UJS test run fine: https:\/\/buildkite.com\/rails\/rails\/builds\/101823#018bbee0-2b70-408f-a450-31a35384d114","@p8 Thanks. Any help on this PR?","@zzak @yahonda Is this good to go?","FWIW, I had looked at this back in #48041 but haven't followed up. Been meaning to look at updating `yarn.lock` but, yeah not sure yet. Thank you for investigating!"],"labels":["actionview","actioncable","ready","need rebase"]},{"title":"Fix order of scope- vs user-derived attribute assignments","body":"### Motivation \/ Background\r\n\r\nFixes #26295. It was closed due to the issue becoming stale, not because it was fixed. It never had a satisfactory fix.\r\n\r\n### Detail\r\n\r\nThis Pull Request modifies the order of attribute assignments for associations, e.g. `collection.build` and `build_foo`. Previously, if you were to build a record from an association, the attributes derived from the scope would be applied last. This is problematic when a setter on the model expects those scope values to be present, since they were technically defined first. This has bitten me a few times in a multi-tenant application, requiring a workaround where you supply the scope attributes again in `#build`.\r\n\r\nI've tried to make this backwards compatible, by first applying the attributes from the scope via `#scope_for_create`, then applying the provided attributes to `#build` minus foreign keys from `#scope_for_create`, and then finally initializing the record normally.\r\n\r\nHere's a small reproduction script of the problem: https:\/\/gist.github.com\/ezekg\/5722f5af2b79061a4f945d49f3ce734b (modified from @heaven's original reproduction script: https:\/\/github.com\/rails\/rails\/issues\/26295#issuecomment-246189123)\r\n\r\nI've written tests that fail without the changes to the `#build_record` method.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["@zzak know of anybody in particular that may be a good reviewer for this PR?\r\n\r\nAlso need to rerun CI. I think it failed unrelated to this PR.","I can only add this would be a huge help. Currently, I have to build awkward constructions to make things work. Please review the PR.","The best way to get a review would be to bring it up on [Discord](https:\/\/discord.gg\/d8N68BCw49), pinging individual maintainers is usually frowned upon (unless they've asked you to ping them).","> The best way to get a review would be to bring it up on [Discord](https:\/\/discord.gg\/d8N68BCw49), pinging individual maintainers is usually frowned upon (unless they've asked you to ping them).\r\n\r\nIf only you could suggest anyone who might be available and potentially nterested in reviewing this.","> If only you could suggest anyone who might be available and potentially nterested in reviewing this.\r\n\r\nI have no idea how much time anyone has on their hands. That's why I suggested the Discord, where someone who _is_ available would be able to see it and provide feedback."],"labels":["activerecord","needs feedback"]},{"title":"Aggregate saved changes for all updates inside of a transaction","body":"### Motivation \/ Background\r\n\r\nThis Pull Request has been created because there is inconsistent behavior with dirty attributes in transaction callbacks when a record is updated multiple times inside of a transaction.\r\n\r\nConsider this case:\r\n\r\n```ruby\r\nclass User < ApplicationRecord\r\n  after_commit :notify_email_changes, if: :email_changed?\r\n\r\n  def notify_email_changes\r\n    NotifyEmailChangesJob.perform_later(id)\r\n  end\r\nend\r\n```\r\n\r\nThis breaks if a record is saved twice in a single transaction.\r\n\r\n```ruby\r\nuser.transaction do\r\n  user.update!(email: params[:email])\r\n  if user.last_visited_at < 1.day.ago\r\n    user.update!(last_visited_at: Time.now)\r\n  end\r\nend\r\n```\r\n\r\nIn the case where we update the `last_visited_at` field, the `email_changed?` method will return false since the email address was not changed in the last save operation and `notify_email_changes` method will not be called.\r\n\r\nFixes #49898, #48077\r\n\r\n### Detail\r\n\r\nThis Pull Request changes how `saved_changes` is calculated in transactions when a record is updated multiple times.\r\n\r\nAfter each save operation, the list of saved changes is pushed onto a list. `saved_changes` in an `after_save` callback is unaffected and will show only the changes for that save operation.\r\n\r\nBefore a transaction is committed, the list of saved changes for all saves in the transaction are merged by reapplying them to the original attributes. Checking `saved_changes` in an `after_commit` callback will use the merged mutation tracker which includes all changes. Checking `saved_changes` outside the transaction after it is committed will also include all changes.\r\n\r\n### Checklist\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["@rafaelfranca I would agree that it is not ideal. I've moved the bulk of the code to `active_record\/attribute_methods\/dirty.rb`.\r\n\r\nI still needed to hook into the code from the transactions code since the code to roll up the saved changes needs to happen when the transaction is committed. I think this is preferable to having dirty attributes hook into transaction lifecycles.\r\n\r\nI think using the mutation tracker is preferable to the solution in the `at_transaction_changes` gem since it provides consistency by being able to use `saved_changes` and the entire ActiveModel::Dirty API. It makes things like using `:if` filters on an `after_commit` callback work as expected (see example in the PR description). It also removes the possibility of bugs caused by developers using `saved_changes` since it work most of the time (which is the current situation).","@rafaelfranca Any thoughts on the changes made to this pull request?","This would be great to land! We've spent the better part of a day trying to figure out why emails were not being sent as part of our `after_commit` callbacks.","@pfeiffer FYI I did port my fix to a gem: [after_commit_changes](https:\/\/github.com\/bdurand\/after_commit_changes) so I could address my immediate issues while waiting for this to get picked up. This solved a number of subtle bugs in my application that I didn't even know were there.\r\n\r\nIt would be great to get this in since I'm pretty sure we're not the only ones with these issues."],"labels":["activerecord"]},{"title":"Add `actiontext` bug report template","body":"### Motivation \/ Background\r\n\r\nIntroduce Action Text bug report templates for contributors to reproduce issues with failing `ActionDispatch::SystemTestCase` instances.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n","comments":["I've sorted all the issues. This bug report template System Test is now passing locally.","This template is failing on CI.","Hmm, `ruby guides\/bug_report_templates\/action_text.rb` passes locally.\r\n\r\n@rafaelfranca Since its executing a System Test, is it possibly blocked for the same reasons as https:\/\/github.com\/rails\/buildkite-config\/pull\/33 and https:\/\/github.com\/rails\/rails\/pull\/49527?"],"labels":["docs"]},{"title":"Implement a `:force` option to delete cookies not present in the request","body":"Implement a :force option to delete cookies not present in the request.\r\n\r\n### Motivation \/ Background\r\n\r\nThis can be useful if you're trying to delete a cookie that has a path, from a different path, in which case it won't be present in the request and won't be deleted if the option is not passed.\r\n\r\nFixes #49746 \r\n\r\n### Detail\r\n\r\nThis Pull Request adds a `:force` option to `cookies.delete` that skips checking if the cookie is present before marking it for removal.\r\n\r\n### Additional information\r\n\r\nI initially tried simply removing the guard condition altogether (I gave my rationale for this in the linked Issue), but this broke some `cookies.clear` tests, so I though it should probably be an opt-in behavior through an option.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Looks like the build failed due to a temporary network error."],"labels":["actionpack"]},{"title":"Expect `ActiveRecord::Relation#order` to take `Arel::Attributes::Attribute` and properly `reference` joined table","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n```ruby\r\nTopic.includes(:posts).order(Post.arel_table[:created_at])\r\n```\r\n\r\n### Expected behavior\r\n<!-- Tell us what should happen -->\r\n```ruby\r\nTopic.includes(:posts).order(Post.arel_table[:created_at])\r\n# SELECT \"topics\".\"id\" AS t0_r0...\"posts\".\"id\" AS t1_r0...FROM \"topics\" LEFT OUTER JOIN \"posts\" ON \"posts\".\"topic_id\" = \"topics\".\"id\" ORDER BY \"posts\".\"created_at\"\r\n```\r\n\r\n### Actual behavior\r\n<!-- Tell us what happens instead -->\r\n```ruby\r\nTopic.includes(:posts).order(Post.arel_table[:created_at])\r\n# SELECT \"topics\".* FROM \"topics\" ORDER BY \"posts\".\"created_at\"\r\n# ActiveRecord::StatementInvalid: PG::UndefinedTable: ERROR:  missing FROM-clause entry for table \"posts\"\r\n```\r\n\r\n### System configuration\r\n**Rails version**: 7.1.1\r\n\r\n**Ruby version**: 3.2.2\r\n","comments":["`Topic.includes` does not do `JOIN` in your case, but 2 separate queries and `order` is relevant to the parent query (the one that gets topics). Did you mean `.eager_load`? But in this case it works for me.\r\n\r\nCan you create a reproduction test script using https:\/\/github.com\/rails\/rails\/blob\/main\/guides\/bug_report_templates\/active_record_gem.rb template?","So you can use a string within `order` to get your desired result:\r\n```ruby\r\n Post.includes(:authors).order('authors.created_at DESC')\r\n```\r\n\r\nYou can see that it is intended behavior to use strings with this method here:\r\n\r\nhttps:\/\/github.com\/rails\/rails\/blob\/c37efa154e39aba9aba9132d983cd7f908c44e50\/activerecord\/lib\/active_record\/relation\/query_methods.rb#L565-L582\r\n\r\nI've confirmed that this error does occur on my local test app. ","Can you guys provide a reproducible test script, cause works on my machine.","@fatkodima thanks for your quick response --\r\n\r\nThe root of this issue is that it would make sense for `ActiveRecord::Relation#order` to properly do the join if `order` is passed a `Arel::Attributes::Attribute` for a relation's table (where the relation is `include`'d already)\r\n\r\nLike you said, explicitly `eager_load`'ing the relation will work, but shouldn't (in my mind) be necessary, and instead `ActiveRecord::Relation` could be written to automatically do the `LEFT OUTER JOIN` when necessary.  \r\n\r\nLike @paulreece said, you could also ` Post.includes(:authors).order('authors.created_at')`, and it will properly do the `LEFT OUTER JOIN` -- so adding this behavior for `Arel::Attributes::Attribute` would add consistency with the behavior of `order` regardless of the type passed in args.\r\n\r\nFWIW - I plan to implement this once #50000  goes in (since #50000 touches the methods this would need to change).\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  # Activate the gem you are reporting the issue against.\r\n  gem \"minitest\"\r\n  gem \"activerecord\", \"~> 7.1.0\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n  end\r\n\r\n  create_table :comments, force: true do |t|\r\n    t.integer :post_id\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  has_many :comments\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  belongs_to :post\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_should_not_raise_sql_error\r\n    post = Post.create!\r\n    post.comments << Comment.create!\r\n\r\n    assert_equal 1, Post.includes(:comments).order(Comment.arel_table[:id]).to_a.size\r\n    # ActiveRecord::StatementInvalid: SQLite3::SQLException\r\n  end\r\nend\r\n```","Got it, thanks for the explanation. Yeah, that is a bug since `order` with a string is working. Please do implement a PR."],"labels":["activerecord","With reproduction steps"]},{"title":"Warn unclarity filed if joined table has multiple fields with same name.","body":"### Motivation \/ Background\r\n\r\nthis enhancement prevents an unintentional human error by developers.\r\nthis change helps to avoid a problem column name shadowing when `select('*')`with joined tables containing same column names.\r\n\r\n### Detail\r\n\r\nassume that you have models and records like this.\r\n```ruby\r\nclass Post < ApplicationRecord\r\n  scope :sort_by_station_matching, lambda { |near_station_ids|\r\n    select('*')\r\n      .select(\"(#{select_near_station_match_count_query(near_station_ids)}) AS near_station_match_count\")\r\n  }\r\n  \r\n  def select_near_station_match_count_query(railway_station_ids = [])\r\n    return 'SELECT 0' if railway_station_ids.blank?\r\n  \r\n    <<~SQL.squish\r\n      SELECT COUNT(stations.id)\r\n      FROM stations\r\n      WHERE stations.railway_station_id IN (#{railway_station_ids.join(',')})\r\n    SQL\r\n  end\r\nend\r\n```\r\n\r\nposts table\r\nid|created_at|updated_at\r\n--|--|--\r\n1|2023-08-03 14:30:23.040019000|2023-08-03 14:30:23.040019000\r\n\r\ncomments table\r\nid|post_id|created_at|updated_at\r\n--|--|--|--\r\n2|1|2023-08-03 14:30:23.040019000|2023-08-03 14:30:23.040019000\r\n\r\nthen, the id field of the instance of post model got with joins method has unexpected value. \r\n```ruby\r\nPost.joins(:comments).sort_by_station_matching.first\r\n```\r\n\r\nexpected\r\n```\r\n#<User:0x0000000114db6388\r\n id: 1,\r\n near_station_match_count: 3,\r\n created_at:\r\n  Thu, 03 Aug 2023 14:30:23.040019000 UTC +00:00,\r\n updated_at:\r\n  Thu, 03 Aug 2023 14:30:23.040019000 UTC +00:00>\r\n```\r\n\r\nactual\r\n```\r\n#<User:0x0000000114db6388\r\n id: 2,\r\n near_station_match_count: 3,\r\n created_at:\r\n  Thu, 03 Aug 2023 14:30:23.040019000 UTC +00:00,\r\n updated_at:\r\n  Thu, 03 Aug 2023 14:30:23.040019000 UTC +00:00>\r\n```\r\n\r\nexpected is `id: 1` from posts record but actual is `id: 2` from comments record .\r\n\r\nat first, I thought this is a bug.\r\nbut, after more research understood that this is cause a column name shadowing.\r\nthis warning will help other developers.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["I am having trouble reproducing the error in my development environment.\r\nI tried with this command.\r\n```\r\ncd activerecord && bundle exec rake sqlite3:test\r\n```\r\nhttps:\/\/buildkite.com\/rails\/rails\/builds\/101762#018bb753-9374-499c-9fa0-373d17a5f354","> I am having trouble reproducing the error in my development environment.\r\n> I tried with this command.\r\n\r\nresolved.\r\nhttps:\/\/github.com\/rails\/rails\/pull\/49992\/commits\/dc58fc0767a5132bd4053ec39dfc56a5183bdbd8"],"labels":["activerecord","needs feedback"]},{"title":"Let ActiveStorage::Blob#open return a tempfile for manual unlinking","body":"### Motivation \/ Background\r\n\r\nWrapping code in a block is not always (easily) possible, this way it behaves like stdlib Tempfile that can be unlinked manually in addition to the block form that closes for the caller.\r\n\r\nA use case I deal with at work involves processing a handful large-ish (10-100MB) CSVs into our models. Due to the way the business logic is structured it is more natural to keep track of open File handles and manually close them out at the end, rather than nesting the outermost layer in a handful of blocks for the current API.\r\n\r\nSimilarly https:\/\/github.com\/Shopify\/maintenance_tasks\/issues\/602 could benefit from being in charge of when to unlink the temporary file. \r\n\r\n### Additional information\r\n\r\nTempfile.create is recommended over Tempfile.new\/open per the documentation: https:\/\/docs.ruby-lang.org\/en\/3.2\/Tempfile.html\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["Test failures in the `activerecord postgresql (3.0)` suite is unrelated to the changes."],"labels":["needs feedback","activestorage"]},{"title":"Azure storage service dependency `azure-storage-blob` deprecated","body":"### Steps to reproduce\r\n\r\n1. Create a rails app\r\n2. Within the Gemfile, add the following:\r\n```\r\ngem \"azure-storage-blob\", \"~> 2.0\", require: false\r\ngem \"faraday\", \"~> 2.0\"\r\n```\r\n3. Run `bundle --verbose`\r\n4. See error\r\n\r\n### Expected behavior\r\nI would expect Rails applications to support newer versions of the Faraday gem because it is a popular dependency for many other gems that deal with HTTP requests.\r\n\r\nExample gems that have this dependency:\r\n- `json-jwt`\r\n- `oauth2` (also works with Faraday version 1)\r\n- `openid_connect`\r\n- `rack-oauth2`\r\n- `swd`\r\n- `webfinger`\r\n\r\n### Actual behavior\r\nWith any other dependency that relies on Faraday version 2 or above, the Azure storage cannot be used as instructed in the Active Storage documentation.\r\n\r\nThe Azure storage's dependency `azure-storage-blob` is deprecated as pointed out in the README of the project:\r\nhttps:\/\/github.com\/Azure\/azure-storage-ruby\r\n\r\nThis means that [fixes that would solve the issue](https:\/\/github.com\/Azure\/azure-storage-ruby\/pull\/228) are not getting merged in a timely manner and the gem has to be forked in order to apply the necessary changes making it harder to maintain the dependencies.\r\n\r\n### System configuration\r\n**Rails version**: 6.1 (applies also to version 7)\r\n\r\n**Ruby version**: 3.0.6\r\n","comments":["Just to be perfectly clear (as I'm not sure how the tagging system works here), I also want to add that `azire-storage-blob` is set as a hard dependency within the Active Storage gem's `AzureStorageService` as defined here:\r\nhttps:\/\/github.com\/rails\/rails\/blob\/4cc1de7910dee1dbb0f4abe509a7ca8995ea83ea\/activestorage\/lib\/active_storage\/service\/azure_storage_service.rb#L3\r\n\r\nThis is why I created the issue at the Rails repository in the first place.\r\n\r\nSo the solutions from Rails repository's perspective I would see for this issue are:\r\n1. Change the `azure-storage-blob` dependency to something else or create a custom integration for the necessary APIs (as suggested by the `azure-storage-blob` gem's deprecation note, call the APIs directly)\r\n2. Fork the `azure-storage-blob` gem and do the necessary changes there to keep the same dependency\r\n3. Remove the Azure storage support from the Rails repository","If `azure-storage-blob` is deprecated, then I think it's worth investigating a replacement or removal.","This issue has been automatically marked as stale because it has not been commented on for at least three months.\nThe resources of the Rails team are limited, and so we are asking for your help.\nIf you can still reproduce this error on the `7-1-stable` branch or on `main`, please reply with all of the information you have about it in order to keep the issue open.\nThank you for all your contributions.\n","This problem still exists for both the `main` and `7-1-stable` branches.\r\n\r\n`main`: https:\/\/github.com\/rails\/rails\/blob\/85c58ffa364414d74ab1f442218959818225d708\/activestorage\/lib\/active_storage\/service\/azure_storage_service.rb#L3\r\n\r\n`7-1-stable`: https:\/\/github.com\/rails\/rails\/blob\/ed84c0d8b0016fd8387d34453803e21c177bcb2b\/activestorage\/lib\/active_storage\/service\/azure_storage_service.rb#L3"],"labels":["third party issue"]},{"title":"[Fix #49981] Support enum definition with symbol values","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request has been created because Enum definition with symbol values are not correctly typed_casted\r\nreported here: https:\/\/github.com\/rails\/rails\/issues\/49981\r\n\r\nFixes #49981\r\n\r\n### Detail\r\nWhen an enum is defined with symbol values\r\n`enum :status, { draft: :draft, published: :published }`\r\na warning or an exception could be raised to force fixing, same kind as invalid enum definition.\r\nNot sure this is the correct approach since the value is correctly persisted.\r\n\r\nI'd expect the enum symbol value to be converted to string to allow correct type_cast.\r\n\r\n**Actual behavior**\r\n\r\nthe type_cast of a symbol value of an enum is always returning nil.\r\n\r\n### Additional information\r\n\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [ ] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["activerecord"]},{"title":"Enum definition with symbol values are not correctly typed_casted","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n    t.string :status\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  has_many :comments\r\n  enum :status, { draft: :draft, published: :published }\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_enum_symbol_value_definition_returns_nil_when_accessed_on_record\r\n    post = Post.create!(status: :draft)\r\n    assert_equal 'draft', post.status\r\n    # Failure:\r\n    # BugTest#test_enum_symbol_value_definition_returns_nil_when_accessed_on_record [rails_enum_symbol_value_issue.rb:36]:\r\n    # Expected: \"draft\"\r\n    #  Actual: nil\r\n  end\r\n\r\n  def test_enum_symbol_value_definition_breaks_predicates\r\n    post = Post.create!(status: :draft)\r\n    assert post.draft?\r\n    # Failure:\r\n    # BugTest#test_enum_symbol_value_definition_breaks_predicates [rails_enum_symbol_value_issue.rb:41]:\r\n    # Expected false to be truthy.\r\n  end\r\n\r\n  def test_enum_symbol_value_definition_is_correclty_saved_in_database\r\n    post = Post.create!(status: 'draft')\r\n    assert_equal 'draft', post.attributes_before_type_cast['status']\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n<!-- Tell us what should happen -->\r\nWhen an enum is defined with symbol values\r\n  `enum :status, { draft: :draft, published: :published }`\r\na warning or an exception could be raised to force fixing, same kind as invalid enum definition.\r\nNot sure this is the correct approach since the value is correctly persisted.\r\n\r\nI'd expect the enum symbol value to be converted to string to allow correct type_cast.\r\n\r\n### Actual behavior\r\n<!-- Tell us what happens instead -->\r\nthe type_cast of a symbol value of an enum is always returning `nil`.\r\n\r\n### System configuration\r\n**Rails version**: main (60d05cd)\r\n\r\n**Ruby version**: 3.2.2\r\n","comments":[],"labels":["activerecord","attached PR","With reproduction steps"]},{"title":"Add note for `method` argument in `button_to` in js guide","body":"This section describes replacing UJS attributes with Turbo.\r\nFor example replacing `method` with `turbo_method`.\r\nHowever, for `button_to` `method` should not be replaced with `turbo_method`,\r\nas it's unrelated to UJS.\r\nThis could avoid some confusion.\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["docs"]},{"title":"Add info to Testing Guide on filtering Rails tests [ci skip]","body":"- how Minitest works and names tests\r\n- how to use `--name` and `--exclude` in a Rails app\r\n\r\n### Motivation \/ Background\r\n\r\nThis Pull Request has been created because the testing guide isn't clear on how to filter Rails tests. Technically this is a minitest documentation issue but I've tried to tie it in with how Rails testing works.\r\n\r\n### Checklist\r\n\r\n* [x] This Pull Request is related to one change\r\n* [x] Commit message has a detailed description of what changed and why\r\n* [ ] ~~Tests are added or updated if you fix a bug or add a feature~~\r\n* [ ] ~~CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature~~\r\n","comments":["@matt17r Could you please do a [squash commit](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#squashing-commits)","Ahh, good pickup! I missed the usage info for `--name` because I was searching far and wide for how `--exclude` works. I think the information about how names are generated (for both flags) is still useful for anyone trying to use either flag. I\u2019ll have a go at reworking it all a bit more logically.\u00a0On 11 Nov 2023, at 02:13, Hartley McGuire ***@***.***> wrote:\ufeff\r\n@skipkayhil commented on this pull request.\r\n\r\nI think a lot of this is already covered in The Rails Test Runner section. I do think some of the new examples are valuable though, so what do you think about trying to add new content there instead of creating a new section?\r\n\r\n\u2014Reply to this email directly, view it on GitHub, or unsubscribe.You are receiving this because you were mentioned.Message ID: ***@***.***>"],"labels":["docs"]},{"title":"[Fix #49104] Add server response (xhr) to direct-upload:error event.","body":"### Motivation \/ Background\r\n\r\nFixes #49104\r\n\r\nThis Pull Request has been created because ActiveStorage's javascript does not provide access to the server response for error messaging when an error occurs during a direct upload.\r\n\r\nThis is a problem because we cannot distinguish between an upload failing due to authorization or the file being too large or any other validation error.\r\n\r\n### Detail\r\n\r\nThis Pull Request changes the error event to include the `xhr` object so that the server response is accessible to error handling code. This allows us to display the specific issues that caused the upload to be rejected such as:\r\n- You must be an admin to upload this file.\r\n- File must be less than 100MB.\r\n- Uploading .exe files is not permitted.\r\n\r\nBefore:\r\n```javascript\r\naddEventListener(\"direct-upload:error\", event => {\r\n  event.preventDefault()\r\n  const { id, error } = event.detail\r\n  const element = document.getElementById(`direct-upload-${id}`)\r\n  element.classList.add(\"direct-upload--error\")\r\n  element.setAttribute(\"title\", error)\r\n})\r\n```\r\n\r\nAfter:\r\n```javascript\r\naddEventListener(\"direct-upload:error\", event => {\r\n  event.preventDefault()\r\n  const { id, error, xhr } = event.detail\r\n  const element = document.getElementById(`direct-upload-${id}`)\r\n  const errorMessage = xhr.response['error'] \/\/ Example: File size must be less than 100MB\r\n  element.classList.add(\"direct-upload--error\")\r\n  element.setAttribute(\"title\", errorMessage)\r\n})\r\n```\r\n\r\n### Additional information\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature. **Are there tests for the javascript code? If so, where?**\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["needs feedback","activestorage"]},{"title":"Unable to combine in_order_of with distinct while using postgresql","body":"### Steps to reproduce\r\n<!-- (Guidelines for creating a bug report are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#creating-a-bug-report)) -->\r\nWe have a list of records with the preferred status order and joins leading to no-unique results. As a result, we want to combine `in_order_of` with `distinct`. This works fine with `mysql` and `sqlite` but fails on `postgresql`\r\n\r\n<!-- Paste your executable test case created from one of the scripts found [here](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#create-an-executable-test-case) below: -->\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n  # gem \"sqlite3\"\r\n  gem \"pg\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\n# ActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.establish_connection(\r\n  adapter: 'postgresql',\r\n  encoding: 'unicode',\r\n  # host: ENV.fetch(\"POSTGRES_HOST\", \"127.0.0.1\"),\r\n  # port: ENV.fetch(\"POSTGRES_PORT\", 5432),\r\n  database: 'rails_dev'\r\n)\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :users, force: true do |t|\r\n    t.string :state\r\n  end\r\nend\r\n\r\nclass User < ActiveRecord::Base\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_distint_with_in_order_of\r\n    User.create! state: \"a\"\r\n    User.create! state: \"b\"\r\n    User.create! state: \"c\"\r\n\r\n    result = User.in_order_of(:state, [\"c\", \"a\", \"b\"]).distinct\r\n    assert_equal [\"c\", \"a\", \"b\"], result.map(&:state)\r\n  end\r\nend\r\n\r\n```\r\n\r\n### Expected behavior\r\n<!-- Tell us what should happen -->\r\nUnique records returned in defined order\r\n\r\n### Actual behavior\r\n<!-- Tell us what happens instead -->\r\n```\r\nError:\r\nBugTest#test_distint_with_in_order_of:\r\nActiveRecord::StatementInvalid: PG::InvalidColumnReference: ERROR:  for SELECT DISTINCT, ORDER BY expressions must appear in select list\r\nLINE 1: ...WHERE \"users\".\"state\" IN ('c', 'a', 'b') ORDER BY CASE WHEN ...\r\n                                                             ^\r\n\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:896:in `exec_params'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:896:in `block (2 levels) in exec_no_cache'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1031:in `block in with_raw_connection'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activesupport\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1003:in `with_raw_connection'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:895:in `block in exec_no_cache'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activesupport\/lib\/active_support\/notifications\/instrumenter.rb:58:in `instrument'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1141:in `log'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:894:in `exec_no_cache'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb:874:in `execute_and_clear'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/connection_adapters\/postgresql\/database_statements.rb:61:in `internal_exec_query'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:628:in `select'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:71:in `select_all'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/query_cache.rb:114:in `select_all'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/querying.rb:62:in `_query_by_sql'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/relation.rb:983:in `block in exec_main_query'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/relation.rb:1003:in `skip_query_cache_if_necessary'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/relation.rb:969:in `exec_main_query'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/relation.rb:947:in `block in exec_queries'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/relation.rb:1003:in `skip_query_cache_if_necessary'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/relation.rb:941:in `exec_queries'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/relation.rb:727:in `load'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/relation.rb:264:in `records'\r\n    \/home\/marek\/.asdf\/installs\/ruby\/3.2.1\/lib\/ruby\/gems\/3.2.0\/bundler\/gems\/rails-d53ef2c18073\/activerecord\/lib\/active_record\/relation\/delegation.rb:99:in `each'\r\n    distinct-in_order_of-postgresql-bug.rb:53:in `map'\r\n    distinct-in_order_of-postgresql-bug.rb:53:in `test_distint_with_in_order_of'\r\n```\r\nThe ugly solution right now is to add dedicated select section:\r\n\r\n```ruby\r\nUser\r\n  .select(\"users.*, CASE WHEN users.state = 'c' THEN 1 WHEN users.state = 'a' THEN 2 WHEN users.state = 'b' THEN 3 END\")\r\n  .in_order_of(:state, [\"c\", \"a\", \"b\"]).distinct\r\n```\r\nBut it is fragile and can change even when updating between bug fix rails release (e.g. https:\/\/github.com\/rails\/rails\/pull\/45670 introduced in rails 7.0.7)\r\n\r\n\r\n### System configuration\r\n**Rails version**:\r\nTested from `7.0.5` till `main`\r\n\r\n**Ruby version**:\r\nTested with ruby `3.2.1`","comments":["cc @fatkodima ","Thanks for mentioning, I will take a look.","Investigated a bit. Not sure we can solve this in rails better than just updating this method docs with the example.\r\n\r\nThere are 2 problems:\r\n1. `in_order_of` should always be used after `distinct` in the query (meaning `.distinct.in_order_of`, but not `.in_order_of.distinct`), because we won't detect when to extend the `SELECT` clause. Yes, we can just always extend it, but the query will become much uglier in all the cases, not only when `distinct` is used.\r\n2. We need to extend the `SELECT` clause with this `CASE`. We can add something like `select(*, case ...)` in the implementation of the `in_order_of` method, but it would not work correctly if `in_order_of` will be followed by some custom `select`, because all the columns are already selected. So, `in_order_of.select(:column)` will do `SELECT *, CASE ..., column`, which is wrong.\r\n\r\nYou can also rewrite you query with a little simple code as `User.distinct.to_a.in_order_of(:state, [\"c\", \"a\", \"b\"])`.","Thx for looking at this issue. \r\n\r\n> 1. `in_order_of` should always be used after `distinct` in the query (meaning `.distinct.in_order_of`, but not `.in_order_of.distinct`), because we won't detect when to extend the `SELECT` clause. Yes, we can just always extend it, but the query will become much uglier in all the cases, not only when `distinct` is used.\r\n> 2. We need to extend the `SELECT` clause with this `CASE`. We can add something like `select(*, case ...)` in the implementation of the `in_order_of` method, but it would not work correctly if `in_order_of` will be followed by some custom `select`, because all the columns are already selected. So, `in_order_of.select(:column)` will do `SELECT *, CASE ..., column`, which is wrong.\r\n\r\nAs far as I understand you are proposing tackling this issue on the active record level (which will be method order dependent). Is Arel level (DB dependent part) also an option to investigate? \r\n\r\n> You can also rewrite you query with a little simple code as `User.distinct.to_a.in_order_of(:state, [\"c\", \"a\", \"b\"])`.\r\n\r\nThe problem with `to_a` is that the query stops being chainable and paginable. I found a walkaround for now by using `User.from(User.distinct, \"users\").in_order_of(:state, [\"c\", \"a\", \"b\"])`. The good part is that it is still chainable and paginable, bad is that I need to do all the filtering in the subquery.","> As far as I understand you are proposing tackling this issue on the active record level (which will be method order dependent). \r\n\r\nYes, but this is ugly and a hack. It should really not depend on the ordering. I would like to avoid such an implementation. \r\n\r\n> Is Arel level (DB dependent part) also an option to investigate?\r\n\r\nI do not think this is an appropriate place. This will be complicated and unnecessary, considering that it will be just for this method. ","I can confirm same issue here, but with a bit different implementation.\r\n\r\nWe have Users model, with a `default_scope { order(\"users.name ASC\") }`\r\nIn the other model (Course) where we implement `has_many :users,  -> { distinct }, :through`, we get the same error as mentioned before.\r\n\r\n This worked in Rails 7.0.4., Ruby 3.1.2\r\n Now upgrading to Rails 7.1.1, Ruby 3.2.2\r\n \r\n EDIT: To fix this kind of issue, just unscope default scope order by `unscope(:order)` and add order after distinct for this certain case."],"labels":["activerecord","With reproduction steps"]},{"title":"Fix sqlite3 dropping database with bad permissions test","body":"Fixes #49928.\r\n\r\nIt fails here https:\/\/github.com\/rails\/rails\/blob\/febd21da3438d190f0c6ce296a114baee983d1e1\/activerecord\/lib\/active_record\/railties\/databases.rake#L19 when trying to create a new connection down the road because of this recent change https:\/\/github.com\/rails\/rails\/blob\/febd21da3438d190f0c6ce296a114baee983d1e1\/activerecord\/lib\/active_record\/connection_adapters\/sqlite3_adapter.rb#L762 which tries to create WAL files.\r\n\r\nWe can ignore checking protected environments by setting an ENV variable, see https:\/\/github.com\/rails\/rails\/blob\/febd21da3438d190f0c6ce296a114baee983d1e1\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb#L65-L71\r\n","comments":["Thank you for the investigation. This test also fails in my environment.\r\n\r\nConsidering all new Rails application using sqlite3 adapter enables `PRAGMA journal_mode = WAL` by default, I'm wondering if setting `\"DISABLE_DATABASE_ENVIRONMENT_CHECK\"` inside this test is a good idea because it is unlikely user who does not have enough OS level permissions sets `DISABLE_DATABASE_ENVIRONMENT_CHECK` in advance to drop the SQLite3 database. \r\n\r\nI have not investigated in detail yet, what do you think about set `DISABLE_DATABASE_ENVIRONMENT_CHECK` at `ActiveRecord::Tasks::DatabaseTasks.drop` ? users wants to drop database anyway. ","> I have not investigated in detail yet, what do you think about set `DISABLE_DATABASE_ENVIRONMENT_CHECK` at `ActiveRecord::Tasks::DatabaseTasks.drop` ? users wants to drop database anyway. \r\n\r\nWouldn't that defeat the purpose of environments check if we are going to always drop it?","It sounds to me that the problem is `raw_execute(\"PRAGMA journal_mode = WAL\", \"SCHEMA\")`. It's not the first time I see issues related to it. I think once a problem was reported in case of read only databases?\r\n\r\nI wonder if it wouldn't be better to not fail the connection if this pragma fails.\r\n\r\nIt's kinda shitty that something that pretend to be a connection configuration end up mutating the database...","Spent some time on this and was not able to figure out the proper solution.\r\n\r\nFor reference, the failing test we are trying to fix is https:\/\/github.com\/rails\/rails\/blob\/488a7ce188803828c3e7111e23e70108d761c283\/railties\/test\/application\/rake\/dbs_test.rb#L271-L279\r\n\r\nOn line 272 it creates a database with the WAL pragma set in https:\/\/github.com\/rails\/rails\/blob\/488a7ce188803828c3e7111e23e70108d761c283\/activerecord\/lib\/active_record\/connection_adapters\/sqlite3_adapter.rb#L762 so that future modification queries will write to the WAL log.\r\n\r\nThen on line 274 it tries to drop a database, but the check for current environment takes place. https:\/\/github.com\/rails\/rails\/blob\/488a7ce188803828c3e7111e23e70108d761c283\/activerecord\/lib\/active_record\/railties\/databases.rake#L18-L20 \r\nIt creates a query down the road to get some relevant data from the db. And it runs `prepare` on this query, and, as I understand, this is a writing query and fails because of the mentioned pragma.\r\n\r\nBacktrace\r\n```\r\nbin\/rails aborted!\r\nActiveRecord::StatementInvalid: SQLite3::ReadOnlyException: attempt to write a readonly database\r\ngems\/3.2.0\/gems\/sqlite3-1.6.7-x86_64-darwin\/lib\/sqlite3\/database.rb:150:in `initialize'\r\ngems\/3.2.0\/gems\/sqlite3-1.6.7-x86_64-darwin\/lib\/sqlite3\/database.rb:150:in `new'\r\ngems\/3.2.0\/gems\/sqlite3-1.6.7-x86_64-darwin\/lib\/sqlite3\/database.rb:150:in `prepare'\r\nrails\/activerecord\/lib\/active_record\/connection_adapters\/sqlite3\/database_statements.rb:36:in `block (2 levels) in internal_exec_query'\r\nrails\/activerecord\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1031:in `block in with_raw_connection'\r\nrails\/activesupport\/lib\/active_support\/concurrency\/null_lock.rb:9:in `synchronize'\r\nrails\/activerecord\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1003:in `with_raw_connection'\r\nrails\/activerecord\/lib\/active_record\/connection_adapters\/sqlite3\/database_statements.rb:33:in `block in internal_exec_query'\r\nrails\/activesupport\/lib\/active_support\/notifications\/instrumenter.rb:58:in `instrument'\r\nrails\/activerecord\/lib\/active_record\/connection_adapters\/abstract_adapter.rb:1141:in `log'\r\nrails\/activerecord\/lib\/active_record\/connection_adapters\/sqlite3\/database_statements.rb:32:in `internal_exec_query'\r\nrails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:108:in `query'\r\nrails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/database_statements.rb:104:in `query_values'\r\nrails\/activerecord\/lib\/active_record\/connection_adapters\/abstract\/schema_statements.rb:45:in `data_source_exists?'\r\nrails\/activerecord\/lib\/active_record\/schema_migration.rb:86:in `table_exists?'\r\nrails\/activerecord\/lib\/active_record\/migration.rb:1295:in `get_all_versions'\r\nrails\/activerecord\/lib\/active_record\/migration.rb:1303:in `current_version'\r\nrails\/activerecord\/lib\/active_record\/migration.rb:1356:in `last_stored_environment'\r\nrails\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb:608:in `block in check_current_protected_environment!'\r\nrails\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb:518:in `with_temporary_pool'\r\nrails\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb:605:in `check_current_protected_environment!'\r\nrails\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb:69:in `block in check_protected_environments!'\r\nrails\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb:68:in `each'\r\nrails\/activerecord\/lib\/active_record\/tasks\/database_tasks.rb:68:in `check_protected_environments!'\r\nrails\/activerecord\/lib\/active_record\/railties\/databases.rake:19:in `block (2 levels) in <main>'\r\n``` ","Ah so that's the error I saw prior. I think we should rescue and swallow `SQLite3::ReadOnlyException` when running `raw_execute(\"PRAGMA journal_mode = WAL\", \"SCHEMA\")`. If the DB is read only, `journal_mode = WAL` doesn't matter.","It doesn't raise when running that pragma. It raises during the attempt to delete the database when trying to prepare the query, which gets values for environment check (see the backtrace in the previous message).","Urk, my bad \ud83e\udd26 "],"labels":["railties","needs feedback"]},{"title":"Test fails expecting \"Couldn't drop\" to match output from rails(\"db:drop\")","body":"### Steps to reproduce\r\ncd railties\r\nbin\/test test\/application\/rake\/dbs_test.rb:271\r\non line 274-5: the test is expecting the output from the rails(\"db:drop\") command to contain the string \"Couldn't drop\", but the output is \r\nbin\/rails aborted!\r\nActiveRecord::StatementInvalid: SQLite3::ReadOnlyException: attempt to write a readonly database\r\n\r\n### System configuration\r\nApple M2 Pro\r\nMacos 13.6\r\n\r\n**Rails version**: 7.2.0\r\n\r\n**Ruby version**: 3.2.2\r\n","comments":[],"labels":["railties","attached PR","With reproduction steps"]},{"title":"`db:schema:dump` ignores `ActiveRecord.dump_schemas`","body":"### The issue\r\n\r\nActiveRecord's `db:structure:dump` is using `PostgreSQLDatabaseTasks#stucture_dump` https:\/\/github.com\/rails\/rails\/blob\/febd21da3438d190f0c6ce296a114baee983d1e1\/activerecord\/lib\/active_record\/tasks\/postgresql_database_tasks.rb#L47-L55 and correctly dumps only specified schemas since https:\/\/github.com\/rails\/rails\/commit\/7ab36f4532c891e8a4bdaee8924a197311ff25ff and is using `db_config.configuration_hash` for that since https:\/\/github.com\/rails\/rails\/commit\/4ee9dab316296ee96629f2bffbab756a163d1b49\r\n\r\nOn the other hand, `db:schema:dump` is using more abstract `SchemaDumper::Dump` https:\/\/github.com\/rails\/rails\/blob\/febd21da3438d190f0c6ce296a114baee983d1e1\/activerecord\/lib\/active_record\/schema_dumper.rb#L44-L47 and does not respect this configuration and will always dump all `current_schemas` that are available to the Postgres db user, according to https:\/\/github.com\/rails\/rails\/blob\/febd21da3438d190f0c6ce296a114baee983d1e1\/activerecord\/lib\/active_record\/connection_adapters\/postgresql\/schema_statements.rb#L1092\r\n\r\n---\r\n\r\nI'm happy to open a PR as I've invested some time researching this, but need a direction on how to better approach this.\r\nI believe, we should obtain the `db_config.configuration_hash` in the `dump` method and pass it down to this last linked piece of code to resolve an array of schemas to use instead of `\"ANY (current_schemas(false))\"`\r\n\r\n`dump` already accepts a config, but it is of a different type. There was a recent refactor https:\/\/github.com\/rails\/rails\/commit\/9f82fb3f63015bbbd643bc624a49d98e97803681 that added support for passing generalized config to the `dump` method, but it is expecting an `ActiveRecord::Base` instance to resolve table name prefix and suffix, while the db_config is agnostic to that.\r\n\r\nWhat would be the best approach here? Is this even an issue we should address?\r\n\r\nP.S. I apologize for the lack of runnable tests.\r\n\r\n---\r\n\r\n### System configuration\r\n**Rails version**: 7.1.1\r\n\r\n**Ruby version**: 3.2.2\r\n\r\n**Database adapter**: Postgres","comments":["@wangjohn would appreciate your five cents here, since you seem to be working with this part of the code."],"labels":["activerecord","attached PR"]},{"title":"Compress large payloads in the Action Cable PostgreSQL adapter","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThe [PostgreSQL notify command](https:\/\/www.postgresql.org\/docs\/16\/sql-notify.html) has a limit of 8000 bytes, which means that the payload that can be broadcasted cannot be very large.\r\n\r\nThis is motivated by the simplicity of the solution and by leaving the Redis dependency, along the same lines of Solid Cache and Solid Queue.\r\n\r\n### Detail\r\n\r\nPayloads that are larger than 8000 bytes are now compressed with ActiveSupport::Gzip.\r\n\r\n```yaml\r\nproduction:\r\n  adapter: postgresql\r\n  channel_prefix: appname_production\r\n```\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\nIn the tests you can see a rather large string that can now be broadcasted with the PostgreSQL adapter.\r\n\r\nAdditionally, I've added the `ActionCable::SubscriptionAdapter::Compressor` class so other adapters can make use of it in the future.\r\n\r\nThere is another approach and another discussion in #49634.\r\n\r\nThanks to @palkan for the idea in this [comment](https:\/\/github.com\/rails\/rails\/pull\/49634#issuecomment-1765096837).\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":["I think if compression is going to be added, it should be added to ActionCable on the whole, similar to how every single ActiveSupport::Cache store supports compression. Additionally, ActiveSupport::Cache has a threshold for when to use compression or not. It defaults to compressing anything over 1KB. With compression, there are diminishing returns when compressing content under a certain size, which is why the threshold is helpful.\r\n\r\nI think ActionCable could use to take some pointers from ActiveSupport::Cache on this.","> I think if compression is going to be added, it should be added to ActionCable on the whole, similar to how every single ActiveSupport::Cache store supports compression.\r\n\r\nI really like this idea, is this something the Rails Core team would accept? I can work on this, it would be great to read thoughts from @matthewd and @palkan.\r\n\r\nIt could be something to enable or disable compression, set a compressor which by default would be Zlib as well as ActiveSupport::Cache, and set a threshold.\r\n\r\n> Additionally, ActiveSupport::Cache has a threshold for when to use compression or not. It defaults to compressing anything over 1KB. With compression, there are diminishing returns when compressing content under a certain size, which is why the threshold is helpful.\r\n\r\nGood point. In the meantime, I've set a 1 kilobyte threshold by default for now. Do you think we should make that configurable? Since there is a possibility that we will move these configurations out of the adapter, I'd like to read more opinions before proceeding.","@palkan thanks for your review! I've addressed all your comments, what do you think now?","Thanks @brunoprietog! Looks like I'm out of questions\/suggestions \ud83d\ude01\r\n\r\n@rafaelfranca @matthewd Looking for someone with merge permissions for the final review \ud83d\ude42","I like the idea of default compression a lot, like with caching. Let's apply it to all adapters, not just pgsql.","Great! Which threshold do you find suitable for the other adapters? Or do we go with the compressor default? (1 kb)"],"labels":["docs","actioncable"]},{"title":"[ci skip] Simplify and sync url_for options docs","body":"### Motivation \/ Background\r\n\r\nI got confused by all the supported options of `ActionView::RoutingUrlFor#url_for`, because it listed an incomplete list of options under the `==== Options` section. I know that if I had read the general description carefully, I would have seen the reference to `ActionDispatch::Routing::UrlFor#url_for` \ud83e\udd26, but I just looked at the options.\r\n\r\nI think it would be clearer to directly link to the more complete list of options, similar to what other `==== Options` sections do in various other places. Furthermore this also means that we don't need to maintain two separate lists of options, making the docs more complete with less code.\r\n\r\nOne downside would be the additional click required to get to the options. If you think this is not optimal, I'd be happy to sync both options lists.","comments":[],"labels":["actionpack","actionview"]},{"title":"`saved_changes` can be empty after persisting changes on a model","body":"### Steps to reproduce\r\n\r\nIf an `Account` belongs to a `Supplier`, and a `Supplier` has one `Account`, there are cases where calling `account.save` then inspecting `account.saved_changes` leads to an empty result of `{}`, even if changes have actually been made.\r\n\r\nCode that attempts to do something based on `saved_changes`, such as record an audit event, will incorrectly act as if no changes were made.\r\n\r\nFor example, this happens when building a new `supplier` associated with the `account`:\r\n\r\n```ruby\r\nrequire \"bundler\/inline\"\r\n\r\ngemfile(true) do\r\n  source \"https:\/\/rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https:\/\/github.com\/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails\/rails\", branch: \"main\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest\/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :suppliers, force: true do |t|\r\n    t.string :name\r\n  end\r\n\r\n  create_table :accounts, force: true do |t|\r\n    t.integer :supplier_id\r\n    t.string :name\r\n  end\r\nend\r\n\r\nclass Supplier < ActiveRecord::Base\r\n  has_one :account\r\nend\r\n\r\nclass Account < ActiveRecord::Base\r\n  belongs_to :supplier, optional: true\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_saved_changes_using_existing_child_with_build\r\n    Account.destroy_all\r\n    Supplier.destroy_all\r\n\r\n    account = Account.create!(name: \"initial account name\")\r\n    account.build_supplier(name: \"initial supplier name\")\r\n    account.name = \"updated account name\"\r\n\r\n    account.save!\r\n\r\n    # Fails, `saved_changes` is unexpectedly empty.\r\n    assert_equal account.saved_changes, { \"name\" => [\"initial account name\", \"updated account name\"] }\r\n  end\r\n\r\n  def test_saved_changes_using_existing_child_with_assignment\r\n    Account.destroy_all\r\n    Supplier.destroy_all\r\n\r\n    account = Account.create!(name: \"initial account name\")\r\n    account.supplier = Supplier.new(name: \"initial supplier name\")\r\n    account.name = \"updated account name\"\r\n\r\n    account.save!\r\n\r\n    # Fails, `saved_changes` is unexpectedly empty.\r\n    assert_equal account.saved_changes, { \"name\" => [\"initial account name\", \"updated account name\"] }\r\n  end\r\n\r\n  def test_saved_changes_using_new_records_saving_via_child\r\n    Account.destroy_all\r\n    Supplier.destroy_all\r\n\r\n    account = Account.new(name: \"initial account name\")\r\n    supplier = Supplier.new(name: \"initial supplier name\")\r\n    account.name = \"updated account name\"\r\n    account.supplier = supplier\r\n\r\n    account.save!\r\n\r\n    assert_predicate supplier.saved_changes, :present?\r\n    # Fails, `saved_changes` is unexpectedly empty.\r\n    assert_predicate account.saved_changes, :present?\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\n`account.saved_changes` should reflect the changes that were saved.\r\n\r\n### Actual behavior\r\n\r\n`account.saved_changes` is empty.\r\n\r\n### System configuration\r\n**Rails version**: 7.0.8, 7.1.1, and `main` as of a6099ed2b7a544d8fe67688e8a0f9237847404ee\r\n\r\n**Ruby version**: 3.2.2","comments":["This _may_ be addressed by something like #48130, which is targeting a problem around double callback execution, but which appears to have some overlap with `saved_changes` being cleared. That PR seemingly targets as a bug around `has_one`, but experimentation with an app I maintain shows that there may be 3 areas to fix within `AutosaveAssociation`:\r\n\r\n- [`save_belongs_to_association`](https:\/\/github.com\/rails\/rails\/blob\/6049a22b7021fe0c21c82c4585c754a7662d1814\/activerecord\/lib\/active_record\/autosave_association.rb#L502)\r\n- [`save_collection_association`](https:\/\/github.com\/rails\/rails\/blob\/6049a22b7021fe0c21c82c4585c754a7662d1814\/activerecord\/lib\/active_record\/autosave_association.rb#L388)\r\n- [`save_has_one_association`](https:\/\/github.com\/rails\/rails\/blob\/6049a22b7021fe0c21c82c4585c754a7662d1814\/activerecord\/lib\/active_record\/autosave_association.rb#L442)","Spent hours on this issue while upgrading Rails to 7.1, and the only working solution was to set this configuration option to true\r\n```\r\nconfig.active_record.run_commit_callbacks_on_first_saved_instances_in_transaction = true\r\n```"],"labels":["activerecord","With reproduction steps"]},{"title":"Cannot make query to db within migration","body":"Hello! I'm upgrading rails from 7.0 to 7.1 and got some problems with migrations\r\n\r\n### Steps to reproduce\r\nWhen I'm trying to get records from db within migration it freezes and does nothing. (I guess something related with transaction and isolation level here, but not sure)\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nclass SomeMigration < ActiveRecord::Migration[7.1]\r\n  def change\r\n    add_reference :files, :asset, foreign_key: true\r\n\r\n    File.all.each do |f| # <- Freezes here and does nothing\r\n      f.update(asset_id: f.folder.asset_id)\r\n    end\r\n  end\r\nend\r\n\r\n```\r\n\r\n### Expected behavior\r\nCan make query within migration file\r\n\r\n### Actual behavior\r\nQuery doesn't work\r\n\r\n### System configuration\r\nRails 7.1.1\r\n\r\nruby 3.2.2\r\n","comments":["Which database do you use? ","Hey there.  So in general it's recommended to not reference the ActiveRecord Model in the migrations.  A better approach would be to add this to your `db\/seed.rb` file, then run the migration above and seed your DB:\r\n```Ruby\r\nFile.all.each do |f| \r\n      f.update(asset_id: f.folder.asset_id)\r\n    end\r\n```\r\n","@fatkodima postgres 14.9","> Hey there. So in general it's recommended to not reference the ActiveRecord Model in the migrations. A better approach would be to add this to your `db\/seed.rb` file, then run the migration above and seed your DB:\r\n> \r\n> ```ruby\r\n> File.all.each do |f| \r\n>       f.update(asset_id: f.folder.asset_id)\r\n>     end\r\n> ```\r\n\r\nyeah, it's just old migration where we updated some data within migration. Just decided re-run all migrations after upgrade rails and got the problem. In rails 7.0 is no this issue","Ok, so while I agree that it is not a good idea to write data migrations like this, there shouldn't be a freeze.\r\n\r\nThe whole migration is run within transaction, `add_reference` creates an exclusive lock on the `files` and `assets` tables, but `File.all` issues `SELECT` on the locked table, but within the same transaction, so should work.\r\n\r\nCan you reproduce this within a sample rails app? If yes, can you share its code?","> A better approach would be to add this to your db\/seed.rb file\r\n\r\nData transformation is really not appropriate for seeds, IMO. Depending on application-defined models is unwise, but this update belongs in a migration, whether as an `execute \"UPDATE ..\"`, or a migration-local temporary AR model.\r\n\r\n> `File`\r\n\r\nI assume we're all just assuming that's not the real class name.\r\n\r\n> The whole migration is run within transaction, add_reference creates an exclusive lock on the files and assets tables, but File.all issues SELECT on the locked table, but within the same transaction, so should work.\r\n\r\nIs multiple database support involved here? That could break the above same-transaction assumption (when combined with use of the real model).","\r\n>  `File`\r\n> I assume we're all just assuming that's not the real class name.\r\n\r\nGiven that the migration is called `SomeMigration` I think that's a safe assumption. \r\n\r\nWe need more context and a repo script if possible.\r\n\r\n","Hi guys! Thanks for your helping!\r\n\r\nHere is repo where you can reproduce it. (I have configured it like my real application)\r\nhttps:\/\/github.com\/frostmark\/demo_rails\/tree\/main\r\n\r\n> Is multiple database support involved here? That could break the above same-transaction assumption (when combined with use of the real model).\r\n\r\nYes I'm using multiple databases (sharding) and it works fine on 7.0","I bisected this to https:\/\/github.com\/rails\/rails\/pull\/48353.\r\ncc @eileencodes ","Ok so I took a look at this and it's is only reproducible with the combination of postgres, a shard name that's not `default`, and a migration that changes the database and does a data transition in the same migration. The same migrations don't fail with mysql2. I'm not sure what postgres is doing different yet.","I'm not sure there's an easy solution to this in Rails. The problem is the migration opens its own connection and transaction using role `:writing` and shard `:default`. But the application doesn't have a `:default` shard, it has `:shard_one` and `:shard_two` so the transaction is a different connection context than the queries run by the migration.\r\n\r\nOne possible work around is to mark these migrations as not DDL migrations with `disable_ddl_transactions!` in the top of the migration file. Another option is to set the application default shard to `:shard_one` with `config.active_record.default_shard = :shard_one` in an initializer.\r\n\r\nI'll keep working on trying to find a proper fix that doesn't require intervention on the application side, but I think this is a non-trivial bug to fix.","@eileencodes yeah thanks! In my case I just renamed `:primary` to `:default` and it resolved the problem. BTW maybe would be nice to update this within documentation? \r\n\r\nlooks a bit misleading\r\n<img width=\"638\" alt=\"image\" src=\"https:\/\/github.com\/rails\/rails\/assets\/4071096\/99f476fd-84a3-4566-a719-e86010db6f4d\">\r\n\r\nhttps:\/\/guides.rubyonrails.org\/active_record_multiple_databases.html#setting-up-your-application\r\n","I reopened this because it is still a bug, just not one with an easy fix. There's a feature I was planning to implement that I think will resolve this and many other issues we have with multi-db and when connections are established.","This issue has been automatically marked as stale because it has not been commented on for at least three months.\nThe resources of the Rails team are limited, and so we are asking for your help.\nIf you can still reproduce this error on the `7-1-stable` branch or on `main`, please reply with all of the information you have about it in order to keep the issue open.\nThank you for all your contributions.\n"],"labels":["activerecord","pinned"]},{"title":"ActiveRecord objects created with explicit attribute values in \"new\" or \"build\" create unexpected rows if DB column defaults change","body":"Under some circumstances (viz, during rolling deploys), an explicit `new` or `build` value can be ignored when creating an ActiveRecord resource if that attribute has a column default that is changing during the deploy.\r\n\r\nie:\r\n```ruby\r\nwidget = Widget.new(size: 'small')\r\nwidget.size # \"small\"\r\nwidget.tap(&save!).reload.size # \"large\"\r\n\r\n# And for associations:\r\n\r\nsprocket = Widget.new.sprockets.build(material: 'steel')\r\nsprocket.material # \"steel\"\r\nsprocket.tap(&save!).reload.material # \"copper\"\r\n```\r\n\r\nFor this to happen the column needs to have a column `default` value in the DB, and that value should change \"under\" the ruby process.\r\n\r\nI have made a single ruby file demonstration for this (below).\r\n\r\n### Steps to reproduce\r\n1. Create a table with a column with a default value.\r\n2. Have ActiveRecord code that creates resources for that table using `new` for root objects or `build` for associations, which pass in a value for that column *which is the same as the column default value* (crucial).\r\n3. Do a rolling deploy which changes the default value of the DB column in a migration\r\n4. For the rest of the rolling deploy, any older boxes (and\/or non canary boxes) will create rows with unexpected data.\r\n\r\n### Expected behavior\r\nIf you pass in an explicit value for an attribute, it should be used, no matter what the `default` of the DB column is, even if it changes while the ruby process is running.\r\n\r\n### Actual behavior\r\nIf the value explicitly used is the same as the DB column default *when the Rails\/AR process started* then it will not be sent to the DB, and the table will contain unexpected data.\r\n\r\n### Thoughts\r\n\r\nI believe it is somewhat obvious what is happening here...\r\n\r\n1. Make a column with default \"foo\"\r\n2. When creating an AR object with explicit value \"foo\", the AR object treats that value as \"not dirty\",\r\n    so does not send it to the DB\r\n3. If the DB default has changed in the meantime, that new value will be the one that is used in the DB row.\r\n\r\nNote, a corollary to all of this is if you specify no value at all, you will still get an unexpected change in value after saving and reloading. But this is slightly more \"believable\". It is when you explicitly supply a value and it is ignored that is more unexpected.\r\n\r\nCould a resolution to all this be to treat attributes of AR objects that are set to the column default to be \"dirty\" so they are sent to the DB?\r\n\r\n### Example code\r\n\r\nI have used postgres to allow `ALTER COLUMN`, so start one with:\r\n\r\n`docker run -p 5430:5432 -e POSTGRES_PASSWORD=postgres postgres:14.7`\r\n\r\nThen run:\r\n\r\n```ruby\r\n# This code demonstrates that under some circumstances ActiveRecord will ignore an explicit value\r\n# passed into a `build` or `new` method. This is because ActiveRecord will use the default value\r\n# from the database if it thinks the value is the default value.\r\n\r\nrequire 'bundler\/inline'\r\n\r\ngemfile do\r\n  source 'https:\/\/rubygems.org'\r\n  gem 'activerecord', '7.1'\r\n  gem 'pg', '1.4.6'\r\n  gem 'colorize'\r\nend\r\n\r\nrequire \"active_record\"\r\n\r\n# Start a postgres on 5430\r\n# docker run -p 5430:5432 -e POSTGRES_PASSWORD=postgres postgres:14.7\r\n\r\n# Establish a database connection\r\nActiveRecord::Base.establish_connection(\r\n  adapter: 'postgresql',\r\n  database: 'postgres',\r\n  host: 'localhost', # Change this to your PostgreSQL host\r\n  port: 5430,\r\n  username: 'postgres', # Change this to your PostgreSQL username\r\n  password: 'postgres'  # Change this to your PostgreSQL password\r\n)\r\n\r\nbegin\r\n  ActiveRecord::Base.connection.execute(\"DROP TABLE widgets\")\r\n  ActiveRecord::Base.connection.execute(\"DROP TABLE sprockets\")\r\nrescue ActiveRecord::StatementInvalid\r\n  # First run time\r\nend\r\n\r\nclass Widget < ActiveRecord::Base\r\n  has_many :sprockets\r\nend\r\n\r\nclass Sprocket < ActiveRecord::Base\r\n  belongs_to :widget\r\nend\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :widgets do |t|\r\n    t.string :size, default: 'small'\r\n  end\r\n\r\n  create_table :sprockets do |t|\r\n    t.belongs_to :widget, index: true\r\n    t.string :material, default: 'steel'\r\n  end\r\nend\r\n\r\ndef debug(type, widget, expected)\r\n  colour = widget.size == expected ? :green : :red\r\n  puts \"#{type} initialized size: \" + widget.size.colorize(colour)\r\n  widget.tap(&:save!).reload\r\n  colour = widget.size == expected ? :green : :red\r\n  puts \"#{type} saved and reloaded size: \" + widget.size.colorize(colour)\r\nend\r\n\r\n# Tests\r\ndebug(\"Widget.new\", Widget.new, \"small\")\r\ndebug(\"Widget.new(size: 'medium')\", Widget.new(size: 'medium'), \"medium\")\r\n\r\n# Crucially we must make the ruby process load the column information for sprockets before\r\n# change the column defaults. It doesn't matter what the \"material\" value is here.\r\nWidget.new.sprockets.build(material: 'manganese').save!\r\n\r\nputs \"***\"\r\nputs \"Now we change the defaults in the DB to 'large' and 'copper' without restarting the ruby process\"\r\nputs \"***\"\r\n\r\n# Use ActiveRecord connection to execute an SQL command to change the defaults in the DB.\r\n# Note, after this command old ruby processes (say older boxes during a rolling deploy) are\r\n# unaware of this change.\r\nActiveRecord::Base.connection.execute(\"ALTER TABLE widgets ALTER COLUMN size SET DEFAULT 'large'\")\r\nActiveRecord::Base.connection.execute(\"ALTER TABLE sprockets ALTER COLUMN material SET DEFAULT 'copper'\")\r\n\r\n# I am not specifying anything, so the ruby will think the value will be \"small\" (and it is, in memory).\r\n# After the `reload` the ruby process will see the value is \"large\" in the DB, so it will change to that.\r\ndebug(\"Widget.new\", Widget.new, \"large\")\r\n# I am definitely specifying small, but it is being ignored after reload. This is because AR\r\n# can see the value is what (it thinks is) the DB default, so it is not sending it to the DB.\r\ndebug(\"Widget.new(size: 'small')\", Widget.new(size: 'small'), \"small\")\r\n# I am definitely specifying medium (which is not the old DB default), and it is being respected\r\ndebug(\"Widget.new(size: 'medium')\", Widget.new(size: 'medium'), \"medium\")\r\n\r\nputs \"***\"\r\nputs \"Now show how relations have the wrong default, even when it is specified in the build method\"\r\nputs \"***\"\r\n\r\n# This shows that relations do not use the attribute passed into the build method if it is what\r\n# the running ruby process thinks is the DB default\r\nsprocket = Widget.new.sprockets.build(material: 'steel') # I am specifying this should definitely be steel\r\nsprocket.tap(&:save!).reload\r\nputs \"sprocket.material should be steel: \" + sprocket.material.colorize(:red)\r\n\r\n```\r\n\r\nResults:\r\n\r\n![image](https:\/\/github.com\/rails\/rails\/assets\/299102\/1c4dd9c7-01b4-4898-a257-c1bfb47b9502)\r\n\r\n\r\n### System configuration\r\n**Rails version**: 6.1, 7.0, 7.1 (at least, maybe versions prior too)\r\n**Ruby version**: 3.1.3 (but probably more)\r\n\r\n","comments":["This is a known problem to avoid during zero donwtime migrations - https:\/\/github.com\/fatkodima\/online_migrations#changing-the-default-value-of-a-column","I expected it would be known! I couldn't find a GitHub issue for it. If the Rails team consider this fixed with the `config.active_record.partial_inserts = false` config, then we can close this and leave it as a support breadcrumb."],"labels":["activerecord","With reproduction steps"]},{"title":"Don\u2019t ignore X-Forwarded-For IPs with ports attached (again)","body":"<!--\r\nThanks for contributing to Rails!\r\n\r\nPlease do not make *Draft* pull requests, as they still send\r\nnotifications to everyone watching the Rails repo.\r\n\r\nCreate a pull request when it is ready for review and feedback\r\nfrom the Rails team :).\r\n\r\nIf your pull request affects documentation or any non-code\r\nchanges, guidelines for those changes are [available\r\nhere](https:\/\/edgeguides.rubyonrails.org\/contributing_to_ruby_on_rails.html#contributing-to-the-rails-documentation)\r\n\r\nAbout this template\r\n\r\nThe following template aims to help contributors write a good description for their pull requests.\r\nWe'd like you to provide a description of the changes in your pull request (i.e. bugs fixed or features added), motivation behind the changes, and complete the checklist below before opening a pull request.\r\n\r\nFeel free to discard it if you need to (e.g. when you just fix a typo). -->\r\n\r\n### Motivation \/ Background\r\n\r\n<!--\r\nDescribe why this Pull Request needs to be merged. What bug have you fixed? What feature have you added? Why is it important?\r\nIf you are fixing a specific issue, include \"Fixes #ISSUE\" (replace with the issue number, remove the quotes) and the issue will be linked to this PR.\r\n-->\r\n\r\nThis Pull Request has been created because I'd like to merge #39134 again, which was reverted due to Rack versions compatibility.\r\n\r\n### Detail\r\n\r\nThis Pull Request doesn't ignore X-Forwarded-For IPs with ports attached, e.g. `3.4.5.6:1234` or `[fe80:0000:0000:0000:0202:b3ff:fe1e:8329]:3000`, in the `ActionDispatch::RemoteIp` middleware. For details, see the description in #39134 (thanks to @duncanjbrown).\r\n\r\nI've cherry-picked the commit <https:\/\/github.com\/rails\/rails\/pull\/39134\/commits\/c2077c850715b359a24a6b083d2e042565587c52> and modified partially for the latest Rails code (added a test case for IPv6, too).\r\n\r\n### Additional information\r\n\r\n<!-- Provide additional information such as benchmarks, reference to other repositories or alternative solutions. -->\r\n\r\nI believe there is no longer a compatibility issue because:\r\n\r\n- the latest `actionpack` gem requires Rack 2.2.4 or later,\r\n  https:\/\/github.com\/rails\/rails\/blob\/bbc6230ae7a708750a9bc14102bd4627ba85cd1a\/actionpack\/actionpack.gemspec#L40\r\n- Rack 2.2.x series have supported the `Rack::Request#forwarded_for` API:\r\n  https:\/\/github.com\/rack\/rack\/blob\/v2.2.1\/lib\/rack\/request.rb#L330\r\n\r\n### Checklist\r\n\r\nBefore submitting the PR make sure the following are checked:\r\n\r\n* [x] This Pull Request is related to one change. Changes that are unrelated should be opened in separate PRs.\r\n* [x] Commit message has a detailed description of what changed and why. If this PR fixes a related issue include it in the commit message. Ex: `[Fix #issue-number]`\r\n* [x] Tests are added or updated if you fix a bug or add a feature.\r\n* [x] CHANGELOG files are updated for the changed libraries if there is a behavior change or additional feature. Minor bug fixes and documentation changes should not be included.\r\n","comments":[],"labels":["actionpack","needs feedback"]}]