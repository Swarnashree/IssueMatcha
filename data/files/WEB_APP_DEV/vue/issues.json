[{"title":"chore(deps-dev): bump vite from 5.0.5 to 5.0.12","body":"Bumps [vite](https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite) from 5.0.5 to 5.0.12.\n<details>\n<summary>Changelog<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/vitejs\/vite\/blob\/v5.0.12\/packages\/vite\/CHANGELOG.md\">vite's changelog<\/a>.<\/em><\/p>\n<blockquote>\n<h2><!-- raw HTML omitted -->5.0.12 (2024-01-19)<!-- raw HTML omitted --><\/h2>\n<ul>\n<li>fix: await <code>configResolved<\/code> hooks of worker plugins (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15597\">#15597<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15605\">#15605<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/ef89f80\">ef89f80<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15597\">#15597<\/a> <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15605\">#15605<\/a><\/li>\n<li>fix: fs deny for case insensitive systems (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15653\">#15653<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/91641c4\">91641c4<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15653\">#15653<\/a><\/li>\n<\/ul>\n<h2><!-- raw HTML omitted -->5.0.11 (2024-01-05)<!-- raw HTML omitted --><\/h2>\n<ul>\n<li>fix: don't pretransform classic script links (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15361\">#15361<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/19e3c9a\">19e3c9a<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15361\">#15361<\/a><\/li>\n<li>fix: inject <code>__vite__mapDeps<\/code> code before sourcemap file comment (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15483\">#15483<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/d2aa096\">d2aa096<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15483\">#15483<\/a><\/li>\n<li>fix(assets): avoid splitting <code>,<\/code> inside base64 value of <code>srcset<\/code> attribute (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15422\">#15422<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/8de7bd2\">8de7bd2<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15422\">#15422<\/a><\/li>\n<li>fix(html): handle offset magic-string slice error (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15435\">#15435<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/5ea9edb\">5ea9edb<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15435\">#15435<\/a><\/li>\n<li>chore(deps): update dependency strip-literal to v2 (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15475\">#15475<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/49d21fe\">49d21fe<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15475\">#15475<\/a><\/li>\n<li>chore(deps): update tj-actions\/changed-files action to v41 (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15476\">#15476<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/2a540ee\">2a540ee<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15476\">#15476<\/a><\/li>\n<\/ul>\n<h2><!-- raw HTML omitted -->5.0.10 (2023-12-15)<!-- raw HTML omitted --><\/h2>\n<ul>\n<li>fix: omit protocol does not require pre-transform (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15355\">#15355<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/d9ae1b2\">d9ae1b2<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15355\">#15355<\/a><\/li>\n<li>fix(build): use base64 for inline SVG if it contains both single and double quotes (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15271\">#15271<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/1bbff16\">1bbff16<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15271\">#15271<\/a><\/li>\n<\/ul>\n<h2><!-- raw HTML omitted -->5.0.9 (2023-12-14)<!-- raw HTML omitted --><\/h2>\n<ul>\n<li>fix: htmlFallbackMiddleware for favicon (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15301\">#15301<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/c902545\">c902545<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15301\">#15301<\/a><\/li>\n<li>fix: more stable hash calculation for depsOptimize (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15337\">#15337<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/2b39fe6\">2b39fe6<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15337\">#15337<\/a><\/li>\n<li>fix(scanner): catch all external files for glob imports (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15286\">#15286<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/129d0d0\">129d0d0<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15286\">#15286<\/a><\/li>\n<li>fix(server): avoid chokidar throttling on startup (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15347\">#15347<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/56a5740\">56a5740<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15347\">#15347<\/a><\/li>\n<li>fix(worker): replace <code>import.meta<\/code> correctly for IIFE worker (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15321\">#15321<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/08d093c\">08d093c<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15321\">#15321<\/a><\/li>\n<li>feat: log re-optimization reasons (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15339\">#15339<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/b1a6c84\">b1a6c84<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15339\">#15339<\/a><\/li>\n<li>chore: temporary typo (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15329\">#15329<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/7b71854\">7b71854<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15329\">#15329<\/a><\/li>\n<li>perf: avoid computing paths on each request (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15318\">#15318<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/0506812\">0506812<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15318\">#15318<\/a><\/li>\n<li>perf: temporary hack to avoid fs checks for \/<a href=\"https:\/\/github.com\/react-refresh\"><code>@\u200breact-refresh<\/code><\/a> (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15299\">#15299<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/b1d6211\">b1d6211<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15299\">#15299<\/a><\/li>\n<\/ul>\n<h2><!-- raw HTML omitted -->5.0.8 (2023-12-12)<!-- raw HTML omitted --><\/h2>\n<ul>\n<li>perf: cached fs utils (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15279\">#15279<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/c9b61c4\">c9b61c4<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15279\">#15279<\/a><\/li>\n<li>fix: missing warmupRequest in transformIndexHtml (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15303\">#15303<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/103820f\">103820f<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15303\">#15303<\/a><\/li>\n<li>fix: public files map will be updated on add\/unlink in windows (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15317\">#15317<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/921ca41\">921ca41<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15317\">#15317<\/a><\/li>\n<li>fix(build): decode urls in CSS files (fix <a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15109\">#15109<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15246\">#15246<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/ea6a7a6\">ea6a7a6<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15109\">#15109<\/a> <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15246\">#15246<\/a><\/li>\n<li>fix(deps): update all non-major dependencies (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15304\">#15304<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/bb07f60\">bb07f60<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15304\">#15304<\/a><\/li>\n<li>fix(ssr): check esm file with normal file path (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15307\">#15307<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/1597170\">1597170<\/a>), closes <a href=\"https:\/\/redirect.github.com\/vitejs\/vite\/issues\/15307\">#15307<\/a><\/li>\n<\/ul>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Commits<\/summary>\n<ul>\n<li><a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/ee81e196769c102a6b1bf30f8444ccde236e71d5\"><code>ee81e19<\/code><\/a> release: v5.0.12<\/li>\n<li><a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/91641c4da0a011d4c5352e88fc68389d4e1289a5\"><code>91641c4<\/code><\/a> fix: fs deny for case insensitive systems (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15653\">#15653<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/ef89f8092f0eb1d8fd7d21256e6af8c4e64fe9b2\"><code>ef89f80<\/code><\/a> fix: await <code>configResolved<\/code> hooks of worker plugins (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15597\">#15597<\/a>) (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15605\">#15605<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/b44c49302ffbf0c82f984f6219ed6376d1e4552a\"><code>b44c493<\/code><\/a> release: v5.0.11<\/li>\n<li><a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/d2aa0969ee316000d3b957d7e879f001e85e369e\"><code>d2aa096<\/code><\/a> fix: inject <code>__vite__mapDeps<\/code> code before sourcemap file comment (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15483\">#15483<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/2a540eee82f9a31deff8215bdbdccfa46d494a06\"><code>2a540ee<\/code><\/a> chore(deps): update tj-actions\/changed-files action to v41 (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15476\">#15476<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/5ea9edbc9ceb991e85f893fe62d68ed028677451\"><code>5ea9edb<\/code><\/a> fix(html): handle offset magic-string slice error (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15435\">#15435<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/49d21fe1feaac30dee0196bd484480a8000a4363\"><code>49d21fe<\/code><\/a> chore(deps): update dependency strip-literal to v2 (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15475\">#15475<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/8de7bd2b68db27b83d9484cc8d4e26436615168e\"><code>8de7bd2<\/code><\/a> fix(assets): avoid splitting <code>,<\/code> inside base64 value of <code>srcset<\/code> attribute (#...<\/li>\n<li><a href=\"https:\/\/github.com\/vitejs\/vite\/commit\/19e3c9a8a16847486fbad8a8cd48fc771b1538bb\"><code>19e3c9a<\/code><\/a> fix: don't pretransform classic script links (<a href=\"https:\/\/github.com\/vitejs\/vite\/tree\/HEAD\/packages\/vite\/issues\/15361\">#15361<\/a>)<\/li>\n<li>Additional commits viewable in <a href=\"https:\/\/github.com\/vitejs\/vite\/commits\/v5.0.12\/packages\/vite\">compare view<\/a><\/li>\n<\/ul>\n<\/details>\n<br \/>\n\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=vite&package-manager=npm_and_yarn&previous-version=5.0.5&new-version=5.0.12)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https:\/\/github.com\/vuejs\/vue\/network\/alerts).\n\n<\/details>","comments":[],"labels":["dependencies"]},{"title":"chore(deps-dev): bump follow-redirects from 1.15.3 to 1.15.4","body":"Bumps [follow-redirects](https:\/\/github.com\/follow-redirects\/follow-redirects) from 1.15.3 to 1.15.4.\n<details>\n<summary>Commits<\/summary>\n<ul>\n<li><a href=\"https:\/\/github.com\/follow-redirects\/follow-redirects\/commit\/65858205e59f1e23c9bf173348a7a7cbb8ac47f5\"><code>6585820<\/code><\/a> Release version 1.15.4 of the npm package.<\/li>\n<li><a href=\"https:\/\/github.com\/follow-redirects\/follow-redirects\/commit\/7a6567e16dfa9ad18a70bfe91784c28653fbf19d\"><code>7a6567e<\/code><\/a> Disallow bracketed hostnames.<\/li>\n<li><a href=\"https:\/\/github.com\/follow-redirects\/follow-redirects\/commit\/05629af696588b90d64e738bc2e809a97a5f92fc\"><code>05629af<\/code><\/a> Prefer native URL instead of deprecated url.parse.<\/li>\n<li><a href=\"https:\/\/github.com\/follow-redirects\/follow-redirects\/commit\/1cba8e85fa73f563a439fe460cf028688e4358df\"><code>1cba8e8<\/code><\/a> Prefer native URL instead of legacy url.resolve.<\/li>\n<li><a href=\"https:\/\/github.com\/follow-redirects\/follow-redirects\/commit\/72bc2a4229bc18dc9fbd57c60579713e6264cb92\"><code>72bc2a4<\/code><\/a> Simplify _processResponse error handling.<\/li>\n<li><a href=\"https:\/\/github.com\/follow-redirects\/follow-redirects\/commit\/3d42aecdca39b144a0a2f27ea134b4cf67dd796a\"><code>3d42aec<\/code><\/a> Add bracket tests.<\/li>\n<li><a href=\"https:\/\/github.com\/follow-redirects\/follow-redirects\/commit\/bcbb096b32686ecad6cd34235358ed6f2217d4f0\"><code>bcbb096<\/code><\/a> Do not directly set Error properties.<\/li>\n<li>See full diff in <a href=\"https:\/\/github.com\/follow-redirects\/follow-redirects\/compare\/v1.15.3...v1.15.4\">compare view<\/a><\/li>\n<\/ul>\n<\/details>\n<br \/>\n\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=follow-redirects&package-manager=npm_and_yarn&previous-version=1.15.3&new-version=1.15.4)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https:\/\/github.com\/vuejs\/vue\/network\/alerts).\n\n<\/details>","comments":[],"labels":["dependencies"]},{"title":"fix(core - patch)\uff1awhen before patch: old keys like [a, b, c ...] new \u2026","body":"\u2026keys like [d, b, b, e, ....], when patch the second key \"b\" Vnode by new children, the vnodeToMove will be undefined, so need add a condition for vnodeToMove\r\n\r\nfix an error when diff patch, when before patch: old keys like [a, b, c ...] new keys like [d, b, b, e, ....], when patch the second key \"b\" Vnode by new children, the vnodeToMove will be undefined, so need add a condition for vnodeToMove\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `main` branch for v2.x (or to a previous version branch)\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","comments":["```javascript\r\n\/\/ PatchChild.vue\r\n<template>\r\n  <div>\r\n    {{ data.key }}\r\n  <\/div>\r\n<\/template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    data: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n  },\r\n};\r\n<\/script>\r\n``` \r\n\r\n\r\n```javascript\r\n\/\/ Wrapper.vue\r\n<template>\r\n  <div>\r\n    <div>\r\n      <PatchChild v-for=\"item in list\" :key=\"item.key\" :data=\"item\" \/>\r\n    <\/div>\r\n    <div><button @click=\"changeList\">changeList<\/button><\/div>\r\n  <\/div>\r\n<\/template>\r\n\r\n<script>\r\nimport PatchChild from '.\/PatchChild.vue';\r\n\r\nexport default {\r\n  components: {\r\n    PatchChild,\r\n  },\r\n  data() {\r\n    return {\r\n      list: [\r\n        {\r\n          key: 'A',\r\n        },\r\n        {\r\n          key: 'B',\r\n        },\r\n        {\r\n          key: 'C',\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  methods: {\r\n    changeList() {\r\n      this.list = [\r\n        {\r\n          key: 'D',\r\n        },\r\n        {\r\n          key: 'B',\r\n        },\r\n        {\r\n          key: 'B',\r\n        },\r\n        {\r\n          key: 'E',\r\n        },\r\n      ];\r\n    },\r\n  },\r\n};\r\n<\/script>\r\n``` ","Keys cannot be repeated. Normally there is already an error for this but this shouldn\u2019t be \u00ab\u00a0fixed\u00a0\u00bb. It\u2019s supposed not to work"],"labels":["need repro"]},{"title":"Vue 2.7 strictTemplates error","body":"https:\/\/github.com\/xiaoxiangmoe\/issue-vue-2.7-on-click-type-error.git\r\n\r\n```\r\npnpm run type-check\r\n```\r\n\r\n```\r\nsrc\/App.vue:12:6 - error TS2559: Type '{ onClick: any; }' has no properties in common with type 'Readonly<Partial<{}> & Omit<Readonly<ExtractPropTypes<{ border: { type: PropType<boolean>; }; }>>, never>>'.\r\n\r\n12     <HelloWorld @click=\"handleClick\" \/>\r\n        ~~~~~~~~~~\r\n\r\n\r\nFound 1 error in src\/App.vue:12\r\n```\r\n\r\n\r\n---\r\nHelloWorld.vue\r\n```vue\r\n<script setup lang=\"ts\">\r\n\r\ninterface ButtonProps {\r\n    border?: boolean; \r\n}\r\n\r\nconst props = defineProps<ButtonProps>() \r\ndefineEmits<{\r\n    (event: 'click',payload: MouseEvent): void\r\n}>()\r\n<\/script>\r\n<template>\r\n    <div id=\"app\">\r\n        <button @click=\"$emit('click', $event)\">Click me<\/button>\r\n    <\/div>\r\n<\/template>\r\n```\r\n\r\nThis error come since vue-tsc 1.7.12","comments":["@xiaoxiangmoe Seemed to be a vue2 type issue. It doesn't convert emits to props","@LinusBorg could you help transfer this to vuejs\/vue? thanks.","? Are you GPT?","Also seeing something similar.\r\n\r\n```shell\r\nmodules\/src\/components\/CombinedModal.vue:94:14 - error TS2345: Argument of type '{ props: any; onClose: any; }' is not assignable to parameter of type 'Readonly<Partial<{ [x: number]: string; }> & Omit<Readonly<ExtractPropTypes<string[]>>, DefaultKeys<string[]>>> & Record<...>'.\r\n  Type '{ props: any; onClose: any; }' is not assignable to type 'Readonly<Partial<{ [x: number]: string; }> & Omit<Readonly<ExtractPropTypes<string[]>>, DefaultKeys<string[]>>>'.\r\n    Types of property 'toString' are incompatible.\r\n      Type '() => string' is not assignable to type '(() => string) & string'.\r\n\r\n94             <MergeModal @close=\"onClose\" v-bind:props=\"props\"><\/MergeModal>\r\n```\r\n\r\nDon't think I'm really doing anything special.\r\n\r\nShim file (removing doesn't seem to change anything): \r\n\r\n```ts\r\ndeclare module \"*.vue\" {\r\n  import type { DefineComponent } from \"vue\";\r\n  const component: DefineComponent;\r\n  export default component;\r\n}\r\n```\r\n\r\nRunning type checking with `vue-tsc --noEmit` with this config file:\r\n\r\n```json\r\n{\r\n  \"extends\": \"..\/tsconfig.json\",\r\n  \"include\": [\r\n    \".\/types\/shims-vue.d.ts\",\r\n    \".\/types\/vuejs-datepicker.d.ts\",\r\n    \"**\/*.js\", \/\/ required even if we're not directly type checking (see `allowJs` below)\r\n    \"**\/*.ts\",\r\n    \"**\/*.vue\"\r\n  ],\r\n  \"compilerOptions\": {\r\n    \"composite\": true,\r\n    \"allowJs\": true, \/\/ permits .ts\/.vue files we're type checking to import .js files, enabling us to gradually add type checking w\/o requiring an all-at-once migration. Worth noting that this is completely distinct from `checkJs`, which tells typescript to actually type check them.\r\n    \"types\": [\r\n      \"vite\/client\" \/\/ Supports Vite's `import.meta.env`\r\n    ],\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"@\/*\": [\".\/*\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nInheriting from this config file:\r\n\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \/\/ Base options \/ sensible defaults that we want to pretty universally apply across all of our services\r\n    \"target\": \"esnext\",\r\n    \"module\": \"esnext\",\r\n    \"moduleResolution\": \"node\",\r\n    \"resolveJsonModule\": true,\r\n    \"esModuleInterop\": true,\r\n    \"forceConsistentCasingInFileNames\": true,\r\n    \"strict\": true,\r\n    \"skipLibCheck\": true\r\n  }\r\n}\r\n```","It seems like there is a type mismatch between the props defined in HelloWorld.vue and how it is being used in App.vue. You need to make sure that the props passed to the HelloWorld component match the expected props.","In volar we convert `v-on:xxx` to `onXxx` and pass them as props to type-check required emits. Vue3 automatically converts events to props but vue2 doesn't. Just FYI @ZAID-BAARAB "],"labels":["bug"]},{"title":"style: remove WTF, also keep it classy [skip ci]","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [x] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [ ] It's submitted to the `main` branch for v2.x (or to a previous version branch)\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","comments":[],"labels":["ready to merge"]},{"title":"refactor(types): improve `isValidDuration` type","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [x] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [ ] It's submitted to the `main` branch for v2.x (or to a previous version branch)\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [ ] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","comments":[],"labels":["ready to merge"]},{"title":"css v-bind not working after build (production mode)","body":"### Version\r\n2.7.10\r\n\r\n### Reproduction link\r\n[https:\/\/github.com\/haomo-studio\/element-ui-vite-vue2](https:\/\/github.com\/haomo-studio\/element-ui-vite-vue2)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. npm run build\r\n2. publish dist\/ to nginx\r\n3. browse url: \/HmBgCard in development & production mode. They are different!\r\n\r\n### What is expected?\r\nv-bind work in production mode\r\n\r\n### What is actually happening?\r\ncss v-bind not working in production mode, but working in development mode\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Reproduction is not minimal. Please reduce the reproduction to only the components that are related to the bug."],"labels":["need repro"]},{"title":"Using defineComponent with options API change property and data types","body":"### Version\r\n2.7.10\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/vue](https:\/\/codesandbox.io\/s\/vue)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nThe following code illustrates the problem. Changing back to the `Vue.extend()` API makes the error disappear.\r\n\r\n```js\r\n<script lang=\"ts\">\r\nimport Vue, { defineComponent } from 'vue';\r\n\r\nclass Foo {\r\n  private readonly _bar: string;\r\n\r\n  constructor(bar: string) {\r\n    this._bar = bar;\r\n  }\r\n}\r\n\r\nfunction process(foo: Foo) {}\r\n\r\n\/\/ No error with the previous API\r\n\/\/ export default Vue.extend({\r\nexport default defineComponent({\r\n  name: 'Test',\r\n  data() {\r\n    return {\r\n      foo: new Foo('none'),\r\n    };\r\n  },\r\n  methods: {\r\n    process() {\r\n      return process(this.foo); \/\/ Argument of type '{}' is not assignable to parameter of type 'Foo'.\r\n    },\r\n  },\r\n});\r\n<\/script>\r\n```\r\n\r\n### What is expected?\r\nProperties and data preserve type \r\n\r\n### What is actually happening?\r\nError `Argument of type '{}' is not assignable to parameter of type 'Foo'.`\r\n\r\n---\r\nUsing `defineComponent` in Vue 2.7 with the options API really helps migration.\r\n\r\nAlthough the `Vue.extend()` API was reporting the correct type for classes with private members, now the `defineComponent` API reports an unwrapped type and causes typescript errors.\r\n\r\n### Workarounds?\r\n- How to handle this situation?\r\n- Does Vue provides a marker interface for classes with hidden state that have been constructed to be compatible with reactivity?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This is because the return type of `data()` now needs to account for unwrapping of potential nested refs. The unwrapping results in a mapped type of the class instance type, which cannot preserve private properties.\r\n\r\nUnfortunately this seems to be a case of correctness vs. inconvenience (you can workaround this by casting `this.foo as Foo`) - the unwrapping is technically correct and necessary, but TypeScript currently doesn't provide a way to create a mapped class instance type while preserving the class' private properties."],"labels":["2.7","feat:types"]},{"title":"Vue.extend alters default class and icons","body":"### Version\r\n2.7.0\r\n\r\n### Reproduction link\r\n[codesandbox.io](https:\/\/codesandbox.io\/s\/vue-extend-alters-default-class-mn0m92)\r\n\r\n### Steps to reproduce\r\nGreetings everyone and congratulations for a great job. Getting inspired by this webpage (https:\/\/css-tricks.com\/creating-vue-js-component-instances-programmatically), I tried to create and add custom components to one of my templates at runtime.\r\nTo sum up, I need to insert at runtime custom components which contain standard vue components (such as v-swith or v-radio-group for example).\r\n\r\nHere is what I've done for one of my custom components, containing v-switches:\r\nchild .ts file:\r\n```\r\nexport default class CheckboxComponent extends Vue {\r\n    @Prop({required: false, type: Boolean, default: null})\r\n    public defaultValue: boolean;\r\n\r\n    @Prop({required: true, type: Number, default: 0})\r\n    public id: number;\r\n\r\n    @Prop({required: true, type: String, default: \"\"})\r\n    public label: string;\r\n\r\n    public yes: boolean = false;\r\n    public no: boolean = false;\r\n```\r\nchild .vue file:\r\n```\r\n<template>\r\n    <v-row dense>\r\n        <v-col cols=\"8\">\r\n            {{ label }}\r\n        <\/v-col>\r\n\r\n        <v-col cols=\"2\">\r\n            <v-switch\r\n                v-model=\"yes\"\r\n                label=\"Yes\"\r\n                color=\"success\"\r\n            \/>\r\n        <\/v-col>\r\n\r\n        <v-col cols=\"2\">\r\n            <v-switch\r\n                v-model=\"no\"\r\n                label=\"No\"\r\n                color=\"red\"\r\n            \/>\r\n        <\/v-col>\r\n    <\/v-row>\r\n<\/template>\r\n```\r\nparent .ts file:\r\n```\r\n    let CheckboxClass = Vue.extend(CheckboxComponent);\r\n    let checkbox = new CheckboxClass({\r\n        propsData: { id: 1, value: null, label: \"Some checkbox\" }\r\n    });\r\n\r\n    checkbox.$mount();\r\n    (this.$refs.container as HTMLElement).appendChild(checkbox.$el);\r\n    checkbox.$on(\"change\", this.onCheckboxValueChanged);\r\n```\r\nAnd that works perfectly fine: https:\/\/i.stack.imgur.com\/mRhzS.png\r\n\r\nBut if I try to do the same with v-radio-groups instead, it goes like this:\r\nchild .ts file:\r\n```\r\nexport default class RadioButtonComponent extends Vue {\r\n    @Prop({required: false, type: String, default: null})\r\n    public defaultValue: string;\r\n\r\n    @Prop({required: true, type: Number, default: 0})\r\n    public id: number;\r\n\r\n    @Prop({required: true, type: String, default: \"\"})\r\n    public label: string;\r\n\r\n    @Prop({required: true, type: Array, default: () => []})\r\n    public options: string[];\r\n```\r\nchild .vue file:\r\n```\r\n<template>\r\n    <v-row dense>\r\n        <v-col cols=\"6\">\r\n            {{ label }}\r\n        <\/v-col>\r\n\r\n        <v-col cols=\"6\">\r\n            <v-radio-group\r\n                v-model=\"value\"\r\n                mandatory\r\n                row\r\n            >\r\n                <v-radio\r\n                    v-for=\"(option, index) in options\"\r\n                    :key=\"index\"\r\n                    :label=\"option\"\r\n                    :value=\"option\"\r\n                \/>\r\n            <\/v-radio-group>\r\n        <\/v-col>\r\n    <\/v-row>\r\n<\/template>\r\n```\r\nparent .ts file:\r\n```\r\n    let RadioButtonClass = Vue.extend(RadioButtonComponent);\r\n    let radioButton = new RadioButtonClass({\r\n        propsData: { id: 2, defaultValue: \"One\", label: \"Some radio button\", options: [\"One\", \"Two\", \"Three\", \"Four\"] }\r\n        });\r\n\r\n    radioButton.$mount();\r\n    (this.$refs.container as HTMLElement).appendChild(radioButton.$el);\r\n    radioButton.$on(\"change\", this.onRadioButtonValueChanged);\r\n```\r\nbut it's then rendered this way: https:\/\/i.stack.imgur.com\/LX8s2.png\r\n\r\n### What is expected?\r\nI was expecting the v-radio-boxes to properly be displayed, just as v-switches are.\r\n\r\n### What is actually happening?\r\nLet me explain what I found out, comparing that result to a \"regular\" added v-radio-group. It seems that all that's wrong comes from the `v-input-selection` styling:\r\n\r\n`<i aria-hidden=\"true\" class=\"v-icon notranslate material-icons theme--light accent--text\"\\>$radioOn<\/i\\>`\r\n\r\nAs you can see `$radioOn` stands right in the slot, where it should be empty, plus the class that doesn't seem right as it should either be `mdi mdi-radiobox-blank` or `mdi mdi-radiobox-marked` whether the option is selected or not.\r\n\r\nIf I manually edit the style to the correct one, I'll then get https:\/\/i.stack.imgur.com\/127ff.png\r\n\r\nSo, my question is:\r\n\r\n- is it a bug in `Vue.extend` that alters standard `v-radio-group` behaviour (I printed out in console and the created object `radioButton` already has the wrong values)\r\n\r\n- or is it designed to be this way, in order to let the developers customize their component, in which case I'm surely missing something.\r\n\r\n---\r\nI've also tried the same implementation with v-checkbox and gets the same result as with v-radio-group.\r\n\r\nI tried to reproduce the development environment in CodeSandbox but didn't manage to get it compiled using Vue 3 :\/\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Your `Vue` version in codesandbox is `3.2.39`.  Vue 3 does not support `Vue.extend`, you can use `createApp` .","Your reproduction isn't runnable and therefore doesn't really \"reproduce\" the problem, and seems to be quite different from your other code snippets. Please provide a reproduction that we can actually run and debug."],"labels":["need repro"]},{"title":"[2.7.10] [typescript] Cannot change the typing of $emit since 2.7.5","body":"### Version\r\n2.7.10\r\n\r\n### Reproduction link\r\n[github.com](https:\/\/github.com\/vidal7\/vue-2-7-issue-typed-emit)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n* Clone the repo\r\n* npm install\r\n* npm run compile\r\n\r\n### What is expected?\r\nNo typescript compilation errors\r\n\r\n### What is actually happening?\r\nThere is typescript compilation errors\r\n\r\n---\r\nSince 2.7.5 and https:\/\/github.com\/vuejs\/vue\/commit\/005e52d0b6f1a5bf9679789c5c4b90afd442d86b, $emit cannot be typed with vue-class-component.\r\n\r\nIf you checkout commit [62000a803bbe4ed1dc9d30c20772a948cab49d16](https:\/\/github.com\/vidal7\/vue-2-7-issue-typed-emit\/commit\/62000a803bbe4ed1dc9d30c20772a948cab49d16) and doing npm install to go back in vue 2.7.4 and npm run compile, everything is fine.\r\n\r\nSee file src\/ComponentWithTypedEvents.ts to see examples about working typing of events.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["BTW, still not working in typescript@4.8.3"],"labels":["2.7","feat:types"]},{"title":"When using spread syntax in tsx file, will cause a type error: TS2559","body":"### Version\r\n2.7.8\r\n\r\n### Reproduction link\r\n[codesandbox.io](https:\/\/codesandbox.io\/s\/vigorous-neumann-ofdtg3?file=\/src\/components\/A.tsx)\r\n\r\n### Steps to reproduce\r\n1. create two file A.tsx,B.tsx\r\n1. A.tsx content:\r\n```\r\n\/* eslint-disable *\/\r\nimport { defineComponent } from \"vue\";\r\nimport B from \".\/B\";\r\n\r\nexport default defineComponent({\r\n  props: {\r\n    aProps: String\r\n  },\r\n  render() {\r\n    const props = {\r\n      props: {\r\n        bProps: \"bb\"\r\n      }\r\n    };\r\n\r\n    return <B {...props} \/>;\r\n  }\r\n});\r\n```\r\n1. B.tsx,content\r\n```\r\nimport { defineComponent } from \"vue\";\r\n\r\nexport default defineComponent({\r\n  props: {\r\n    bProps: String\r\n  },\r\n  render() {\r\n    return <h1>bb<\/h1>;\r\n  }\r\n});\r\n```\r\n1. in A.tsx, render function's return `<B` will report an error\r\n\r\n\r\n### What is expected?\r\nwhen use spread props, there is no type error\r\n\r\n### What is actually happening?\r\ndefineComponent's return type may not support using spread props (like this: <B {...bProps}) \/>)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["2.7","feat:types"]},{"title":"@vue\/compiler-sfc@2.7 should support esm-browser","body":"### Version\r\n2.7.7\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\u6253\u5305 @vue\/compiler-sfc@2.7 \u65f6\u62a5node\u6a21\u5757\u4e0d\u5b58\u5728\r\n\r\n### What is expected?\r\n\u6253\u5305 @vue\/compiler-sfc@2.7 \u65f6\u4e0d\u62a5\u9519\r\n\r\n### What is actually happening?\r\n\u6253\u5305 @vue\/compiler-sfc@2.7 \u65f6\u62a5node\u6a21\u5757\u4e0d\u5b58\u5728\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["> ### Version\r\n> 2.7.7\r\n> \r\n> ### Steps to reproduce\r\n> \u6253\u5305 @vue\/compiler-sfc@2.7 \u65f6\u62a5node\u6a21\u5757\u4e0d\u5b58\u5728\r\n> \r\n> ### What is expected?\r\n> \u6253\u5305 @vue\/compiler-sfc@2.7 \u65f6\u4e0d\u62a5\u9519\r\n> \r\n> ### What is actually happening?\r\n> \u6253\u5305 @vue\/compiler-sfc@2.7 \u65f6\u62a5node\u6a21\u5757\u4e0d\u5b58\u5728\r\n\r\nhttps:\/\/github.com\/fyhhub\/compiler-sfc-browser-vue2\r\n\u53ef\u4ee5\u8bd5\u8bd5\u6211\u53d1\u5e03\u7684\u8fd9\u4e2a\u5e93\uff0c\u57fa\u4e8e@vue\/compiler-sfc@2.7 \u505a\u4e86\u4e8c\u6b21\u6253\u5305\uff0c\u53bb\u9664\u4e86node\u6a21\u5757","> > ### Version\r\n> > 2.7.7\r\n> > ### Steps to reproduce\r\n> > \u6253\u5305 @vue\/compiler-sfc@2.7 \u65f6\u62a5node\u6a21\u5757\u4e0d\u5b58\u5728\r\n> > ### What is expected?\r\n> > \u6253\u5305 @vue\/compiler-sfc@2.7 \u65f6\u4e0d\u62a5\u9519\r\n> > ### What is actually happening?\r\n> > \u6253\u5305 @vue\/compiler-sfc@2.7 \u65f6\u62a5node\u6a21\u5757\u4e0d\u5b58\u5728\r\n> \r\n> https:\/\/github.com\/fyhhub\/compiler-sfc-browser-vue2 \u53ef\u4ee5\u8bd5\u8bd5\u6211\u53d1\u5e03\u7684\u8fd9\u4e2a\u5e93\uff0c\u57fa\u4e8e@vue\/compiler-sfc@2.7 \u505a\u4e86\u4e8c\u6b21\u6253\u5305\uff0c\u53bb\u9664\u4e86node\u6a21\u5757\r\n\r\n\u8bd5\u8fc7\u4e86\uff0c\u5f88\u68d2\ud83d\udc4d\ud83c\udffb"],"labels":["feature request"]},{"title":"How to better cooperate with Vuex and Vue Router in <script setup><\/script> in 2.7","body":"### What problem does this feature solve?\r\nHello\uff01How to better cooperate with Vuex and Vue Router in <script setup><\/script> in 2.7\uff1f\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Vuex: Migrate to [pinia](https:\/\/github.com\/vuejs\/pinia)\r\nRouter: https:\/\/github.com\/vuejs\/vue-router\/issues\/3760","@kingyue737 Thanks for your advice.","I try like this [https:\/\/github.com\/tomieric\/vue2.7-playgroud\/blob\/master\/src\/router\/index.js](https:\/\/github.com\/tomieric\/vue2.7-playgroud\/blob\/master\/src\/router\/index.js)","I developed this simple solution. Maybe it could be useful to someone else.\r\n\r\nhttps:\/\/gist.github.com\/hugo-cardoso\/7c8da4f55d521a6288fc7a0f7d2ff06c","Does anyone have a solution for using Vuex that does not include Pinia and keeps the store calls the same as Vue3?. Hugo's works but I think it changes the syntax too much.","Vue router  has released version 3.6 to support Vue 2.7:\r\nhttps:\/\/github.com\/vuejs\/vue-router\/blob\/dev\/CHANGELOG.md\r\n\r\nVuex:\r\n\r\n```js\r\nimport  {  getCurrentInstance } from 'vue'\r\nexport function useStore() {\r\n  const vm = getCurrentInstance()\r\n  return vm.proxy.$store\r\n}\r\n```\r\n\r\n` useStore() ` can only be used in `setup`.","For some reason, when importing using the conventional form:\r\n\r\n```js\r\nimport { useRoute } from \"vue-router\";\r\n```\r\n\r\nI get this message in the build (and thus, the app cannot work properly):\r\n`export 'useRoute' was not found in 'vue-router'`\r\n\r\nI'm using\r\n* vue-router 3.6.3\r\n* vue: 2.7.10\r\n\r\nAm I misisng something?\r\n","@vate \r\nhttps:\/\/github.com\/vuejs\/vue-router\/blob\/dev\/CHANGELOG.md#360-2022-08-22\r\n`import { useRoute, useRouter, useLink, onBeforeRouteUpdate onBeforeRouteLeave } from 'vue-router\/composables'`\r\n","\r\n\r\n\r\n\r\n> import { useRoute, useRouter, useLink, onBeforeRouteUpdate onBeforeRouteLeave } from 'vue-router\/composables'\r\n\r\nAlready tried, but I'm getting this message:\r\n\r\n```bash\r\nThis dependency was not found:\r\n\r\n* vue-router\/composables in .\/node_modules\/cache-loader\/dist\/cjs.js??ref--13-0!.\/node_modules\/babel-loader\/lib!.\/node_modules\/cache-loader\/dist\/cjs.js??ref--1-0!.\/node_modules\/vue-loader\/lib?[...]\r\n```\r\n\r\n* using vue-cli 4.5.19 (may this be the problem?)","In `package.json` of `vue-router 3.6.3`:\r\n```json\r\n  \"exports\": {\r\n    \".\/composables\": {\r\n      \"import\": \".\/dist\/composables.mjs\",\r\n      \"require\": \".\/dist\/composables.js\",\r\n      \"types\": \".\/types\/composables.d.ts\"\r\n    },\r\n  },\r\n```\r\nIn `vue-cli 4.5.15`, it support for `*.mjs` is already available.\r\nIn Webpack 5, it support [Package exports](https:\/\/webpack.js.org\/guides\/package-exports\/), but in [Webpack 4](https:\/\/v4.webpack.js.org\/), I don't find it.\r\nI think you should go to vue-router and create a new issue. @vate ","Thanks for the hint! \ud83d\ude4c\ud83c\udffb\r\n\r\nFor the record, I managed to make it work using \r\n```js\r\nimport { useRoute } from \"vue-router\/dist\/composables.js\"\r\n```\r\n\r\nNot the cleanest solution, so I'll follow your advice to post a comment in vue-router.\r\n\r\n\r\n**UPDATE:**\r\n\r\nUsing\r\n\r\n```js\r\nimport { useRoute } from \"vue-router\/composables\"\r\n```\r\n\r\nworked fine for me on version 3.6.4","I'm glad I could give you some ideas.But after looking at router's `package.json` and its source code,I think we should use the `*.mjs`  file,which is:\r\n```js\r\nimport { useRoute } from \"vue-router\/dist\/composables.mjs\"\r\n```\r\nIf this works,then this is more recommended.\r\n\r\nUpdate:\r\nrouter 3.6.4 has supported webpack 4\r\nhttps:\/\/github.com\/vuejs\/vue-router\/blob\/dev\/CHANGELOG.md#364-2022-08-25","@YFengFly I tried the `useStore` that you suggested in https:\/\/github.com\/vuejs\/vue\/issues\/12651#issuecomment-1223450798, it worked, but I was not able to listen to changes from the store, I used `computed`, but it doesn't update when the store gets updated\r\n\r\n```\r\nconst userData = computed(() => store.getters['authentication\/userData'])\r\n```\r\n\r\nAny suggestions here?\r\n\r\n","@mohammedzamakhan \r\nSorry for not replying for so long!\r\nthis is very weird, I have tried `computed`, but nothing works.\r\nI wanted to reply after finding a solution,  but I don't have a good idea at present. feel very sorry","I think Vue core team should provide clear and detailed guide in terms of how to use `vuex@4` and `vue-router@4` with `vue@2.7.x`, if Composition API is supported in `Vue@2.7` then other official packages should support this as well"],"labels":["2.7","docs"]},{"title":"fix(core): hydrated node assertion in production","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [X] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [X] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [X] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\nThe `tag name` and `type` of hydration candidate nodes are currently checked only in development mode, for some reason.\r\nThis causes instability in production mode as TEXT type node can be chosen as hydration target for ELEMENT type node if there is a DOM structure mismatch, which can cause app crash when hydration process tries to access .appendChild() method non existing in text node throwing an unhandled exception and making the whole app unresponsive.\r\n\r\n","comments":["Any hints on how to make reproduction would be appreciated. Is there any sandbox with SSR out there?\r\n\r\nBasically you need to make a render function that renders conditionally:\r\nOn the server:\r\n```HTML\r\n<div>Text node<\/div>\r\n```\r\nOn the client:\r\n```HTML\r\n<div>\r\n  <a>Text node<\/a>\r\n<\/div>\r\n```\r\nand it should crash the Vue instance during hydration in production mode.\r\n\r\nYou can also Google \" Nuxt Failed to execute 'appendChild' on 'Node': This node type does not support this method.\" and most of the results would be symptoms of this bug.\r\nAlso lots of issues in the Nuxt repo for [this search query](https:\/\/github.com\/nuxt\/nuxt.js\/issues?q=is%3Aissue+Failed+to+execute+%27appendChild%27+on+%27Node).","It\u2019s normal for the app to crash. You are supposed to catch that kind of bug during development. The check is removed for perf reasons"],"labels":["need repro"]},{"title":"Property validator should report the property that failed type \/ validator check","body":"### What problem does this feature solve?\r\nComponents with multiple properties might fail property validation at the most inopportune time: assigning one property will trigger property validation for all `function initProps (vm, propsOptions)`. Stack trace will show that the issue was triggered by assigning a specific property \"prop1\" while validation will actually fail on \"prop2\". If this is combined with component actually rendering for the first time (\"prop1\" was the trigger), it will be unclear what property actually failed.\r\n\r\nIn my case, reported error message was:\r\n\r\n    [Vue warn]: Invalid prop type: \"[object Object]\" is not a constructor\r\n\r\nThis is from method `function assertType (value, type, vm)`\r\n\r\nClarify for the actual n00b error message I received: I specified prop type to be of an \"enum\" class declared with Object.freeze. Actual values are, naturally, Number.\r\n\r\n### What does the proposed API look like?\r\nIt would be clearer to add prop name to the message like this:\r\n\r\n    [Vue warn]: Invalid prop \"propName\" type: \"[object Object]\" is not a constructor\r\n\r\nThis would require to add `propName` (or just `name`) parameter to `assertType` in order to be able to include it in the message\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["contribution welcome","improvement","warnings"]},{"title":".exact modifier : Failed to generate render function","body":"### Version\r\n2.6.14\r\n\r\n### Reproduction link\r\n\r\nhttps:\/\/template-explorer.vuejs.org\/#%3Cbutton%20%40keydown.ctrl.shift.alt.meta.exact%3D%22console.log(%24event)%22%3EClick%3C%2Fbutton%3E\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nuse `v-on` with `.ctrl.shift.alt.meta.exact` modifiers\r\n\r\n### What is expected?\r\nadded event listener successfully\r\n\r\n### What is actually happening?\r\n[Vue warn]: Failed to generate render function:\r\nSyntaxError: Unexpected token ')' in\r\n\r\n---\r\ncompiler generates `if()return null;` that's a syntax error.\r\n```javascript\r\n else if (key === 'exact') {\r\n          var modifiers = (handler.modifiers);\r\n          genModifierCode += genGuard(\r\n            ['ctrl', 'shift', 'alt', 'meta']\r\n              .filter(function (keyModifier) { return !modifiers[keyModifier]; })\r\n              .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\r\n              .join('||')\r\n          );\r\n        }\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This should be an easy fix in the compiler: avoiding adding that last `if` when the condition is empty"],"labels":["bug","contribution welcome","has PR","feat:compiler"]},{"title":"fix(core): fix type check for Date prop","body":"It checks a prop by `[object Date]` instead of `instanceof Date`\r\n\r\nThis fixes a strange warning message:\r\n`[Vue warn]: Invalid prop: type check failed for prop \"date\". Expected Date, got Date`\r\nin some circumstances.\r\n\r\nThis happens when `type: Date`'s `Date` is in another context, such as used in dev mode in nuxt for example.\r\n\r\nI've written and [attached](https:\/\/github.com\/vuejs\/vue\/files\/7148341\/test.mjs.gz) a unit test script for nodejs to reproduce this issue easily, and I've confirmed by using the script that this PR resolves the issue.\r\nBut I'm sorry I don't know how to write and include a unit test file suitable for this project, so please someone translate the test script suitable for the project.\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [ ] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [x] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\nThis also happens on Vue3 and should be fixed in the same way.\r\n\r\nrelated issues in other projects:\r\nhttps:\/\/github.com\/nuxt\/nuxt.js\/issues\/5565\r\nhttps:\/\/github.com\/buefy\/nuxt-buefy\/issues\/36\r\n\r\n","comments":["Do you have a repro? don't attach files, post plain code only","Oh, I'm sorry. This is a repro.\r\n```js\r\nimport Vue from 'vue';\r\nimport { createRenderer } from 'vue-server-renderer';\r\nimport vm from 'vm';\r\n\r\nasync function test(name, script, obj) {\r\n  \/\/ console.log(`\\n\\n== ${name} =============================================`);\r\n\r\n  let lastError = null;\r\n  Vue.config.warnHandler = function (msg, vm, trace) {\r\n    lastError = msg;\r\n  }\r\n\r\n  const result = vm.runInNewContext(script, obj)\r\n  const html = await renderer.renderToString(result);\r\n\r\n  \/\/ console.log(html);\r\n  console.log('[test: ' + name + ']  => ' + (lastError ? `FAILED (${lastError})` : 'pass'));\r\n}\r\n\r\n\r\nconst renderer = createRenderer()\r\nconst date = new Date();\r\n\r\nconst HelloWorld = {\r\n  props: {\r\n    date: Date,\r\n  },\r\n  template: \"<div>Hello, It's {{ date }}<\/div>\",\r\n}\r\n\r\nconst script_1 = `\r\n  HelloWorld = HelloWorld || {\r\n    props: {\r\n      date: Date,\r\n    },\r\n    template: \"<div>Hello, It's {{ date }}<\/div>\",\r\n  }\r\n\r\n  new Vue({\r\n    components: { HelloWorld },\r\n    template: '<HelloWorld :date=\"date\" \/>',\r\n\r\n    data: () => ({ date: date || new Date() }),\r\n  })\r\n`;\r\n\r\n\r\nconst script_2 = `\r\n  HelloWorld = HelloWorld || {\r\n    props: {\r\n      date: Date,\r\n    },\r\n    template: \"<div>Hello, It's {{ date }}<\/div>\",\r\n  }\r\n\r\n  new Vue({\r\n    components: { HelloWorld },\r\n    template: '<HelloWorld :date=\"new Date()\" \/>',\r\n  })\r\n`;\r\n\r\n\/\/ pass if `HelloWorld` and `date` are in the same context\r\nawait test('A', script_1, { Vue, HelloWorld: null, date: null });\r\nawait test('B', script_1, { Vue, HelloWorld: null, date       }); \/\/ => FAILED\r\nawait test('C', script_1, { Vue, HelloWorld      , date: null }); \/\/ => FAILED\r\nawait test('D', script_1, { Vue, HelloWorld      , date       });\r\n\r\n\/\/ It failed when `HelloWorld` is in the script context,\r\n\/\/ so `new Date()` in the template is executed in this renderer context...?\r\nawait test('E', script_2, { Vue, HelloWorld: null }); \/\/ => FAILED\r\nawait test('F', script_2, { Vue, HelloWorld       });\r\n```","@posva I've made a much simpler code to reproduce, and now I know how to write a test code. Is this suitable?","Do you have an actual boiled down reproduction? Like on a js fiddle ?","It's based on https:\/\/github.com\/buefy\/nuxt-buefy\/issues\/36#issuecomment-486567317 but upgrade to the latest version of them.\r\nhttps:\/\/codesandbox.io\/s\/codesandbox-nuxt-forked-kdlsy\r\n\r\nI think nuxt and nuxt-buefy setup is the easiest way to reproduce.\r\nI have no idea that why this combination triggers this issue, but I'm sure that multiple contexts are involved during the nuxt SSR process.\r\nFor Nuxt, according to the https:\/\/github.com\/nuxt\/nuxt.js\/issues\/5565#issuecomment-724151739 , the behavior can be disabled by setting `runInNewContext: false` in the config file, but it's a workaround.\r\n\r\nI've also checked `value` directly on https:\/\/github.com\/vuejs\/vue\/blob\/515467a618479792abedf01a7b1dcef2ac2a17ed\/dist\/vue.common.dev.js#L1746  by editing the file directly to inject `console.log` and\/or to start REPL session in the context.\r\nAfter some investigations, the `value` is surely an instance of v8's internal `Date` but `value instanceof Date` returns `false` there, because a `Date` a constructor of `value`, and a `Date` there, are in a different context.","That looks more like a big they should be fixing. Changing the global Date is not something tou should do","Node has legitimate APIs to create a new running environment (context) for sandboxing or something else if you want.\r\nChanging the global `Date` variable by the user is usually a bad idea and should be prohibited strictly, but I think this is not a case because it is done automatically\/internally\/implicitly by Node\/v8 itself.\r\n\r\nAlthough the two `Date`s are valid native `Date` constructors for Node\/v8, Vue type checking relies on the current global constructor to identify whether it is an instance of `Date` or not, thus it fails.\r\n\r\nBy the way, I've also come up with a reproduction code to prove there is a case that `Date`s have different contexts each other in normal browser environment.\r\n\r\n```html:index.html\r\n<html>\r\n  <head>\r\n    <script src=\"https:\/\/cdn.jsdelivr.net\/npm\/vue@2.6.14\/dist\/vue.js\"><\/script>\r\n  <\/head>\r\n  <body>\r\n    <div id=\"app\">\r\n      <div>{{ date }}<\/div>\r\n      <test-component :date=\"date\" \/>\r\n    <\/div>\r\n\r\n    <iframe src=\"child.html\"><\/iframe>\r\n\r\n    <script>\r\n      const iframe = document.querySelector('iframe');\r\n      iframe.onload = function () {\r\n        const TestComponent = {\r\n          template: '<div>{{ date }}<\/div>',\r\n          props: {\r\n            date: Date,\r\n          }\r\n        }\r\n\r\n        new Vue({\r\n          el: '#app',\r\n          components: { TestComponent },\r\n\r\n          data() {\r\n            return {\r\n              \/\/ XXX: Date instance comes from another context!\r\n              date: iframe.contentWindow.date\r\n            }\r\n          },\r\n        })\r\n      };\r\n    <\/script>\r\n  <\/body>\r\n<\/html>\r\n```\r\n\r\n```html:child.html\r\n<html>\r\n  <head \/>\r\n  <body>\r\n    This is a child.\r\n    <script>\r\n      var date = new Date();\r\n    <\/script>\r\n  <\/body>\r\n<\/html>\r\n```\r\n\r\nAs you can see, I exploit `<iframe>` to make a specially crafted `Date` instance in this case.\r\n\r\n\r\nWell... How about using the following code to fix the issue?\r\n`value instanceof Date || Object.prototype.toString.call(value) === '[object Date]'`\r\nIn this way, I think it can minimize the chance of unexpected changes of behavior and can maximize backward compatibility.","What's the status on this? I'm currently working on a Vue app with Nuxt and getting lots of the `Expected Date, got Date` errors. It's easy enough to ignore them but this is still a fix that would be useful (and make things way simpler for developers who are new to Vue + Nuxt).","A temporary fix is to clone the date object before transmitting to the child component with `buggyDate = new Date(buggyDate.getTime())`"],"labels":["need repro"]},{"title":"New slot syntax doesn't work the same way as old syntax (in some cases)","body":"### Version\r\n2.6.14\r\n\r\n### Reproduction link\r\n[https:\/\/github.com\/hivokas\/vue-2-slots-issue](https:\/\/github.com\/hivokas\/vue-2-slots-issue)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Clone the repo\r\n2. Run `npm run serve`\r\n3. Change the value in the text input\r\n\r\n### What is expected?\r\nPreview updates with both old and new slot syntax (here: https:\/\/github.com\/hivokas\/vue-2-slots-issue\/blob\/cd7f3a6db790472b88421a1497ae14d4135d23ef\/src\/components\/PublishToSocialStep.vue#L4).\r\n\r\n### What is actually happening?\r\nPreview updates with old slot syntax, but doesn't update with new slot syntax.\r\n\r\nVideo demonstration of the problem:\r\n\r\nhttps:\/\/user-images.githubusercontent.com\/22997803\/130232152-bd5e445d-600e-4816-b140-685d1fd6c3a8.mp4\r\n\r\n\r\n\r\n---\r\nI've updated the old deprecated slot syntax to the new one.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Hey, thanks for the detailed report. On first sight this might rather be a bug with a special combination of slot usage. We'll investigate.","Online Reproduction link: https:\/\/jsbin.com\/sakiwam\/edit?html,output","> Hey, thanks for the detailed report. On first sight this might rather be a bug with a special combination of slot usage. We'll investigate.\r\n\r\nAs I investigated, the problem is inside `src\/compiler\/parser\/index.js` inside `processSlotContent` method, I did not have enough time to fix it, but `rawAttrsMap` is doing wrong behaviour. I am new in Vue, so I just looked at it for 1 hour and it was my first time, can you guid me about this variable? ","We ran into this recently.\r\n\r\nWe are using different names and it still doesn't work with the `#` syntax."],"labels":["bug"]},{"title":"v-if not patching component scoped slot correctly","body":"### Version\r\n2.6.14\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/5w1ydeu8\/3\/](https:\/\/jsfiddle.net\/5w1ydeu8\/3\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- Click between A and B => works\r\n- Click between A and C => works\r\n- Click between B and C => doesn't work\r\n\r\n### What is expected?\r\nThe scoped slot should update.\r\n\r\n### What is actually happening?\r\nThe scoped slot doesn't update.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Use `v-if` as a workaround:\r\n``` js\r\n  <Foo v-if=\"frame === 'a'\">\r\n    <template #default=\"x\">\r\n      a\r\n    <\/template>\r\n  <\/Foo>\r\n  <Foo v-if=\"frame === 'b'\">\r\n    <template #default=\"x\">\r\n      b\r\n    <\/template>\r\n  <\/Foo>\r\n  <Foo v-if=\"frame === 'c'\">\r\n    <template #default=\"x\">\r\n      c\r\n    <\/template>\r\n  <\/Foo>\r\n```\r\n\r\nBut it does have something wrong with `v-else-if`, I'm looking into it.","@JuniorTour Thanks, I'm aware of various workarounds (like using `key`), but I thought this behavior was odd."],"labels":["bug","has workaround"]},{"title":"fix: remove unnecessary deep condition check","body":"deep primative value watcher will fire even if value not changed\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [ ] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [ ] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","comments":["Do you have a boiled down repro or failing test case?"],"labels":["need repro"]},{"title":"<v-show>  style.display is incorrect when reusing the elm","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/CasperDai\/mred18vo\/7\/](https:\/\/jsfiddle.net\/CasperDai\/mred18vo\/7\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nclick 'change'\r\n\r\n### What is expected?\r\nel.style.display is 'flex'\r\n\r\n### What is actually happening?\r\nel.style.display is ''\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Use a `key` on the `<div>` as a workaround.","> Use a `key` on the `<div>` as a workaround.\r\nExcuse me, how should I operate?\r\n","@scientistzjf \r\n\r\nIt\u2019s usually best to use `key` with `v-if` + `v-else`, if they are the same element type (e.g. both `<div>` elements).\r\n\r\nBy default, Vue updates the DOM as efficiently as possible. That means when switching between elements of the same type, it simply patches the existing element, rather than removing it and adding a new one in its place. This can have unintended consequences if these elements should not actually be considered the same.\r\n\r\n### Good\r\n```html\r\n<div\r\n  v-if=\"error\"\r\n  key=\"search-status\"\r\n>\r\n  Error: {{ error }}\r\n<\/div>\r\n<div\r\n  v-else\r\n  key=\"search-results\"\r\n>\r\n  {{ results }}\r\n<\/div>\r\n```\r\n<hr>\r\n\r\n### Bad\r\n```html\r\n<div v-if=\"error\">\r\n  Error: {{ error }}\r\n<\/div>\r\n<div v-else>\r\n  {{ results }}\r\n<\/div>\r\n```","@scientistzjf \r\n\r\nuse key like below\r\n\r\n```vue\r\n<div id=\"app\">\r\n  <div>\r\n    <div @click=\"click\">change<\/div>\r\n    <div v-if=\"state === 0\">\r\n      <div key='first-key' v-show=\"hasChildren\">some data<\/div>\r\n    <\/div>\r\n    <div v-else>\r\n      <div ref=\"t\" key='second-key' style=\"display: flex;\">display: {{ val }}<\/div>\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n```\r\n","Is any working solution??","Use a key on the div"],"labels":["bug","has workaround"]},{"title":"`.once` modifier on input event prevents v-model from updating value on input element.","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/fxdez9qh\/](https:\/\/jsfiddle.net\/fxdez9qh\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nType some text in the input field.\r\n\r\n### What is expected?\r\nThe input handler is executed and the value in the input is updated.\r\n\r\n### What is actually happening?\r\nThe input handler is executed but the first update to the model is not applied. This means the first character typed will not show up.\r\n\r\n---\r\nI found this issue: https:\/\/github.com\/vuejs\/vue\/issues\/6552 It's a few years old and it was fixed but it seems to be the same problem.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["It seems like the change on micro tasks on v2.6.0 brought back this bug.\r\n\r\nNote: this bug is fixed on Vue 3","use  v-model.var=\"variable\" just update this variable ,not needs update components","[The event trigger order of capture and bubble was changed](https:\/\/chromium.googlesource.com\/chromium\/src\/+\/f73b047b99026f22c60f4541cab98346e9871f65) form Chrome Version 89.0.4383.0.\r\n\r\nIt is the root cause of this issue. \r\n\r\nAnd there might be more issues relate to it.\r\n\r\n\r\nRefs:\r\n- https:\/\/bugs.chromium.org\/p\/chromium\/issues\/detail?id=1202483&q=1202483&can=2\r\n- https:\/\/chromium.googlesource.com\/chromium\/src\/+\/f73b047b99026f22c60f4541cab98346e9871f65\r\n- https:\/\/github.com\/whatwg\/dom\/issues\/746"],"labels":["bug"]},{"title":"Checking whether v-on handler is a function invocation is broken","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/adamsol\/pknr8dae\/](https:\/\/jsfiddle.net\/adamsol\/pknr8dae\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nClick the buttons.\r\n\r\n### What is expected?\r\nAll the buttons should behave in the same way: a message should appear below.\r\n\r\n### What is actually happening?\r\nOnly the first button works correctly.\r\n\r\n---\r\nSee #11893 for the origin of the issue.\r\n\r\nThe problem lies probably here: https:\/\/github.com\/vuejs\/vue\/blob\/5255841aaff441d275122b4abfb099b881de7cb5\/packages\/vue-template-compiler\/build.js#L3801\r\n\r\nThe regexes used do not take into account cases such as additional spaces, parentheses, or chained function invocations. As a result, a promise is correctly returned only in the first case in the repro, and in all the other cases `errorHandler` won't capture the exception thrown in the async method.\r\n\r\nThe difference in the generated code (`return` is present only in the first case): https:\/\/template-explorer.vuejs.org\/#%3Cdiv%20id%3D%22app%22%3E%0A%20%20%3Cbutton%20%40click%3D%22click(1)%22%3E%0A%20%20%20%20click(1)%0A%20%20%3C%2Fbutton%3E%0A%20%20%3Cbutton%20%40click%3D%22click%20(2)%22%3E%0A%20%20%20%20click%20(2)%0A%20%20%3C%2Fbutton%3E%0A%20%20%3Cbutton%20%40click%3D%22click((3))%22%3E%0A%20%20%20%20click((3))%0A%20%20%3C%2Fbutton%3E%0A%20%20%3Cbutton%20%40click%3D%22(click(4))%22%3E%0A%20%20%20%20(click(4))%0A%20%20%3C%2Fbutton%3E%0A%20%20%3Cbutton%20%40click%3D%22click(5).then()%22%3E%0A%20%20%20%20click(5).then()%0A%20%20%3C%2Fbutton%3E%0A%3C%2Fdiv%3E\r\n\r\nSuggested solution: either add `return` in every case, or don't add it at all, so that the behaviour is consistent. If checking for the function invocation is crucial, then the code must be parsed in some other way.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["See https:\/\/github.com\/vuejs\/vue\/issues\/7628\r\n\r\nHandling all possible cases will require a parser instead of a regex but realistically speaking, people won't write `@click=\"method((2))\"`. The only that would be worth adding support for is `@click=\"click(5).catch(() => {})\"` but it has the same problem, it requires a full parsing to deduce make it fully consistent. You can wrap the call with a function: `() => method().catch(() => {})` or add a method to your component, which is prefered in such scenarios because the code becomes difficult to read. The same for more complicated expressions where parentheses are required, like mathematical expressions.\r\n\r\nThat being said, Vue 3 does support these syntaxes but it has a full parser built in it. So maybe someone finds a way to improve the existing regex","The documentation (https:\/\/vuejs.org\/v2\/api\/#errorHandler) says:\r\n\r\n> In 2.6.0+, [...] if any of the covered hooks or handlers returns a Promise chain (e.g. async functions), the error from that Promise chain will also be handled.\r\n\r\nSo I think the current behaviour should be considered a bug, since `v-on` is one of the covered hooks, `.then` and `.catch` create promise chains, but errors are not handled. Also, the behaviour is inconsistent even between `method()` and `method ()`, which is very surprising. Together with #10009, this makes `errorHandler` hardly usable with regard to async methods.\r\n\r\n---\r\n\r\nFor anyone who stumbles upon this issue: to catch all errors in promises, use `unhandledrejection` event as described here: https:\/\/stackoverflow.com\/a\/52076738. Note that you still need to set up `Vue.config.errorHandler`, since in the default handler Vue silences the errors that it manages to catch."],"labels":["improvement","feat:compiler"]},{"title":"feat(build): update build dependencies","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [x] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n\r\nUpdate rollup-plugin-node-resolve to @rollup\/plugin-node-resolve (the former is deprecated), also update rollup and commonjs plugin for updated type definitions and compatibility.","comments":[],"labels":["dependencies"]},{"title":"SSR: missing class and style attributes with async components","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n~~[https:\/\/github.com\/realityfilter\/bugreport-dynamic-components-ssr](https:\/\/github.com\/realityfilter\/bugreport-dynamic-components-ssr)~~\r\n\r\nhttps:\/\/replit.com\/@posva\/vuejsvue11837\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\n- run\r\n\r\n### What is expected?\r\n\r\n\r\n```html\r\n<app data-server-rendered=\"true\"><div class=\"child parent app\"><\/div> <div class=\"child async parent app\"><\/div><\/app>\r\n```\r\n\r\n### What is actually happening?\r\n\r\n```html\r\n<app data-server-rendered=\"true\"><div class=\"child parent app\"><\/div> <div class=\"child async parent\"><\/div><\/app>\r\n```\r\n\r\nThere are some workarounds for this issue:\r\n\r\n- avoiding async components via manual registering the components in a plugin\r\n- wrapping the DynamicComponent with a div\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["The incorrect DOM looks like: \r\n\r\n<img width=\"615\" alt=\"ssr-dom\" src=\"https:\/\/user-images.githubusercontent.com\/626228\/102796617-d44b3080-43ae-11eb-973d-ecf6da8e9f7a.png\">\r\n","I'm having the same issue.\r\n\r\nwhen manually bind `$attrs` like below, it seems to render attributes while SSR.\r\nbut I can't render class and style for some reason\r\n\r\n```\r\n<component is=\"SomeComponent v-bind=\"$attrs\" \/>\r\n```","I've managed to create bare minimum reproduction: https:\/\/replit.com\/@pi0\/vuejsvue11837#index.js\r\n\r\nEven without dynamic components, an async component fails to inherit a class from the two-level upper parent (check the difference between `<child>` and `<async-child>` classes). \r\n\r\nOnce made a fix PR can ensure these two issues are the same (root cause) but my guess is they are.\r\n\r\n"],"labels":["bug","has workaround","feat:ssr"]},{"title":"fix(ssr): prevent rendering duplicate css references","body":"There is a chance that the same css file is included in initial and async array, causing a <link>\r\nelement pointing to the same stylesheet to be included multiple times. This fix ensures that cannot\r\nhappen. Since multiple build systems exist, this defensive approach avoids any issues with how files\r\nare generated regardless of which one is being used by a given project.\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\n**Other information:**\r\n","comments":["So you have a boiled down repro?","@posva I don't have a reproduction at the moment, but considering that this will be affected by whatever build system is used, there might be countless reproductions.","Please read https:\/\/new-issue.vuejs.org\/?repo=vuejs\/vue#why-repro and provide a reproduction"],"labels":["need repro"]},{"title":"feat(ssr): add csp nonce to all elements","body":"\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [x] New\/updated tests are included\r\n\r\n**Other information:**\r\n\r\n[CSPv3](https:\/\/csp.withgoogle.com\/docs\/strict-csp.html)  allows simple nonce based policies and directives such as `stict-dynamic`. Declaring a policy such as:\r\n\r\n```\r\nContent-Security-Policy:\r\n  object-src 'none';\r\n  script-src 'nonce-{random}' 'unsafe-inline' 'unsafe-eval' 'strict-dynamic' https: http:;\r\n  base-uri 'none';\r\n  report-uri https:\/\/your-report-collector.example.com\/\r\n```\r\n\r\nWould not work with current nonce support with features such as resource hints. This policy creates errors such as \r\n\r\n```\r\nRefused to load the script 'http:\/\/localhost:8082\/manifest.js' because it violates the following Content Security Policy directive: \"script-src 'self' 'nonce-68f9bed4d31fcde221e7b5e871860ff2' 'unsafe-inline' 'unsafe-eval' 'strict-dynamic' http:\". 'strict-dynamic' is present, so host-based allowlisting is disabled. Note that 'script-src-elem' was not explicitly set, so 'script-src' is used as a fallback.\r\n```\r\n\r\nThis is because not all rendered elements have an associated nonce. \r\n\r\nTo support stricter policies that only work scripts \/ resource hinting add `nonce` attribute to all element that could be affected via a nonce based policy. \r\n","comments":["@posva is this good to merge - could be useful for many people. I forgot about this PR myself as we forked and patched the change. ","any update?\r\n","@posva @yyx990803 \r\n\r\nIs it possible to merge this as part of `2.7` was planning to upgrade to this version and realised this PR was still left open. My bad should have nudged this sooner","@yyx990803 i've updated this to the main branch"],"labels":["feat:ssr"]},{"title":"Enable performance measuring in production, at the user's request","body":"### What problem does this feature solve?\r\nSimilar to devtools, `Vue.config.devtools` is enabled by default for development and disabled by default for production.  However, the developer can choose to override that behavior (for example, for debugging) by manually setting `Vue.config.devtools = true`.  However, this same lenience is not afforded to `Vue.config.performance`.  Even if explicitly enabling it, the developer's setting will be overridden by Vue in production.\r\n\r\n### What does the proposed API look like?\r\nThis proposed solution brings `Vue.config.performance` in line with `Vue.config.devtools`, by disabling it by default in production, but gives the developer the ability to explicitly \u0017\u0017enable it; for example, for debugging performance issues.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["feature request"]},{"title":"Consider detecting browser environment just-in-time","body":"### What problem does this feature solve?\r\nWhen testing Vue components on Node with [@vue\/test-utils](https:\/\/www.npmjs.com\/package\/@vue\/test-utils), it is important that you mock a browser environment with [jsdom-global](https:\/\/www.npmjs.com\/package\/jsdom-global) *before* vue is loaded. If you fail to do this, you get a `TypeError: Cannot read property 'child' of undefined` (see https:\/\/github.com\/vuejs\/vue-test-utils\/issues\/1192) when trying to mount your component.\r\n\r\nThe reason is that when Vue is loaded, it checks the environment as\r\n```js\r\nconst inBrowser = typeof window !== 'undefined';\r\n```\r\nIt would be useful - at least for the mounting of components - if this check is performed just in time so that the order of loading is not important here.\r\n\r\nWhile one could argue that this is not a problem if you simply get the loading order correct, there is actually a problem when trying to load `.vue` files natively in Node. I've written an experimental library for this, call [vue-esm-loader](https:\/\/www.npmjs.com\/package\/vue-esm-loader). The problem I had when trying to get this to work with [@vue\/test-utils](https:\/\/www.npmjs.com\/package\/@vue\/test-utils) is that there's a cyclic problem: [vue-esm-loader](https:\/\/www.npmjs.com\/package\/vue-esm-loader) needs [vue-template-compiler](https:\/\/www.npmjs.com\/package\/vue-template-compiler), which in turn loads Vue first to check for a version mismatch. However, as the loader is loaded as the very first file, this means it's impossible to mock the browser environment before vue is loaded the first time.\r\n\r\nI was able to bypass this by directly requiring the build of vue-template-compiler which does not provide the version check, but this is not a good solution (see https:\/\/github.com\/sebamarynissen\/vue-esm-loader\/commit\/252f1df2337684613346373727f0f6203ac6aea9#diff-5dfe38baf287dcf756a17c2dd63483781b53bf4b669e10efdd01e74bcd8e780aR7). Therefore it would be useful if the environment check in Vue is done on the fly.\r\n\r\n### What does the proposed API look like?\r\nI propose to replace the `inBrowser` constant by an `env` object, which can look like\r\n```js\r\nconst env = {\r\n  get inBrowser() {\r\n    return typeof window === 'undefined';\r\n  }\r\n};\r\n```\r\nSubsequently the `$mount` method can use this as \r\n```js\r\nVue.prototype.$mount = function (\r\n  el,\r\n  hydrating\r\n) {\r\n  el = el && env.inBrowser ? query(el) : undefined;\r\n  return mountComponent(this, el, hydrating)\r\n};\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I did some additional tests and found out that the `inBrowser` check in the `$mount` function was not the problem. It looks like there are two functions that need would need to be updated for the just-in-time check to work:\r\n```js\r\n\/\/ This\r\nVue.prototype.__patch__ = inBrowser ? patch : noop;\r\n\r\n\/\/ Would need to become\r\nfunction patch (oldVnode, vnode, hydrating, removeOnly) {\r\n  if (!env.inBrowser) return;\r\n}\r\nVue.prototype.__patch__ = patch;\r\n\r\n\/\/ And\r\nfunction isUnknownElement (tag) {\r\n  if (!inBrowser) {\r\n    return true;\r\n  }\r\n}\r\n\r\n\/\/ Has to become\r\nfunction isUnknownElement (tag) {\r\n  if (!env.inBrowser) {\r\n    return true;\r\n  }\r\n}\r\n```\r\nThe key here being the `__patch__` function that cannot be set upon loading. I have to admit that I have no idea what the impact would be on SSR.","This is really cool! I'm looking forward to your work on `vue-esm-loader`. This is just a theory, but I'd think that because `vue-template-compiler` has a dependency check on `vue`, you might have luck lazy-loading it during the `transformSource()` subroutine. Since `transformSource()` can be async, you can then do one-time loading of your `compileTemplate` function.\r\n\r\n```js\r\n\/\/ `lib\/loader.js`\r\nlet compileTemplate\r\nexport async function transformSource(source, ctx, defaultTransformSource) {\r\n  const { url } = ctx\r\n  \r\n  if (templateRegex.test(url) || htmlRegex.test(url)) {\r\n    \/\/ Lazy-load the compiler due to compatibility checking with Vue module.\r\n    if (!compileTemplate) compileTemplate = (await import(\".\/compile-template.js\")).default\r\n\r\n    const source = compileTemplate(source, ctx)\r\n    return { source }\r\n  }\r\n\r\n  return defaultTransformSource(source, ctx, defaultTransformSource)\r\n}\r\n```\r\n\r\nAnd then remove the static import at the top of that file. By doing this, you should be safe by not loading too much ahead of what the code requires.\r\n\r\n**Edit:** It would seem that your module is also importing `vue-template-compiler` in other areas. I would suggest the same process for those: lazy-load only when the code demands it.","Yes, I figured this as well some time after opening this issue. I've solved it in a slightly different way, using \r\n```js\r\nimport { createRequire } from 'module';\r\nconst require = createRequire(import.meta.url);\r\n\r\nexport function getCompiler() {\r\n  return require('vue-template-compiler');\r\n}\r\n```\r\nSee https:\/\/github.com\/sebamarynissen\/vue-esm-loader\/blob\/master\/lib\/utils.js#L32 and https:\/\/github.com\/sebamarynissen\/vue-esm-loader\/blob\/master\/lib\/load.js#L27. This does indeed solve my problem so I no longer have to circumvent the version check. It makes this issue slightly less relevant. Of course the user is still responsible for loading `jsdom-global` before loading any `.vue` files though.","> Of course the user is still responsible for loading jsdom-global before loading any .vue files though.\r\n\r\nYes well, that can easily be done during setup (`mocha --require .\/test\/_setup.js`). If you want to keep everything async, I think you can use `await import()` these days instead of `createRequire()`. I haven't kept up in that area of Node.js development though..."],"labels":["discussion"]},{"title":"Strange ssr behavior in v-for loop with if-else and v-text","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/github.com\/TrueCarry\/linktest](https:\/\/github.com\/TrueCarry\/linktest)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nRun server, open localhost:8080. Problem is in components\/textWrapper.vue file. I've used some vue ssr template and removed almost everything unneeded. Same error as before.\r\n\r\n### What is expected?\r\nssr and client side versions are the same. It works if we don't use v-text on span. I changed it to v-text1, to test.\r\nNo hydration errors with v-text1\r\n![image](https:\/\/user-images.githubusercontent.com\/5431520\/99122979-58700280-2610-11eb-8b5c-0952d78fe951.png)\r\n\r\n\r\n### What is actually happening?\r\nServer doesn't render custom element.\r\nConsole output: \r\n![image](https:\/\/user-images.githubusercontent.com\/5431520\/99123015-70e01d00-2610-11eb-8196-28840adbdfc8.png)\r\nServer generated html:\r\n![image](https:\/\/user-images.githubusercontent.com\/5431520\/99123039-7b9ab200-2610-11eb-85e4-2fcce636ae34.png)\r\n\r\n\r\n---\r\nCan you give me few hours to respond next time you decide to close issue please? \r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["As a workaround, you can avoid `v-text`.\r\n\r\n> Can you give me few hours to respond next time you decide to close issue please?\r\n\r\nRead https:\/\/new-issue.vuejs.org\/?repo=vuejs\/vue#why-repro","Any updates?","Replace your `<span v-text=\"val\" \/>` with `<span>{{ val }}<\/span>`."],"labels":["bug","has workaround","feat:ssr"]},{"title":"when use key in Object.prototype carelessly as prop, it will work wrong way","body":"### Version\r\n2.6.12\r\n\r\n### Steps to reproduce\r\n```html\r\n<div><\/div>\r\n<script>\r\nnew Vue({\r\n  el: 'main',\r\n  template: '<MyDatetime :value=\"datetime\" \/>',\r\n  data: {\r\n    datetime: Date.now(),\r\n  },\r\n  components: {\r\n    MyDatetime: {\r\n      template: `\r\n        <div>\r\n          expect undefined: {{ toString + \"\" }}<br \/>\r\n          expect default: {{ toLocalString + \"\" }}<br \/>\r\n        <\/div>`,\r\n      props: {\r\n        value: {\r\n          type: Number,\r\n        },\r\n        toString: {\r\n          validator: mode => [ 'date-time', 'date', 'time' ].includes(mode),\r\n        },\r\n        toLocalString: {\r\n          validator: mode => [ 'date-time', 'date', 'time', 'default' ].includes(mode),\r\n          default: 'default',\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n<\/script>\r\n```\r\n\r\n### What is expected?\r\n\r\nThey are all keys match the uni simple rule: not start with `_` or `$`\r\n\r\n### What is actually happening?\r\n\r\nIf parent component doesn't pass the prop, then the component will get neither `undefined` nor `default`, but the value in `Object.prototype`.\r\n\r\n---\r\n\r\n1. `{}` in these two lines need to be replaced to `Object.create(null)`, the first line is required for two cases, and the second line is required for `default` case,\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/52719ccab8fccffbdf497b96d3731dc86f04c1ce\/src\/core\/vdom\/helpers\/extract-props.js#L24\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/33e669b22f69a1f9c9147528360fe0bba85534f0\/src\/core\/instance\/state.js#L66\r\n\r\n2. there still leave `constructor` which can't be used, it need `delete Vue.prototype.constructor`, and give an alternative way to do what `vm.constructor` (`Sub.prototype.constructor = Sub`) do in current source code.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["As said in vue-next repo, creating props named like existing functions seems like a bad idea because it could break any code relying on native object functions. It's also unrealistic from a naming perspective.\r\nBecause of that, I don't think it's reasonable to use `Object.create(null)` as proposed"],"labels":["feature request","discussion"]},{"title":"Warn about `this.` used in templates","body":"### What problem does this feature solve?\r\nSometimes when moving the code around, the `this.` can end up traveling with it. Or the finger memory will just type in the `this.` where none is required.\r\n\r\nDue to a side-effect, the `this` context is indeed present, but it breaks when it's used deeper in templates (haven't looked exactly, but i think it breaks in v-if's or somewhere around there.\r\n\r\nTo avoid inadvertent breakages, it would be nice if vue could warn about it.\r\n\r\n\r\n### What does the proposed API look like?\r\na `this.` spotted in javascript bits of template would show a warning in the javascript console\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["https:\/\/github.com\/vuejs\/vue\/issues\/11715\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\u827e\u6b23\u6b23\r\n2134328478@qq.com\r\n\r\nweb\u524d\u7aef\r\n\r\n---Original---\r\nFrom: \"Tom Striker\"<notifications@github.com&gt;\r\nDate: Thu, Oct 8, 2020 17:35 PM\r\nTo: \"vuejs\/vue\"<vue@noreply.github.com&gt;;\r\nCc: \"Subscribed\"<subscribed@noreply.github.com&gt;;\r\nSubject: [vuejs\/vue] Warn about `this.` used in templates (#11715)\r\n\r\n\r\n\r\n\r\n \r\nWhat problem does this feature solve?\r\n \r\nSometimes when moving the code around, the this. can end up traveling with it. Or the finger memory will just type in the this. where none is required.\r\n \r\nDue to a side-effect, the this context is indeed present, but it breaks when it's used deeper in templates (haven't looked exactly, but i think it breaks in v-if's or somewhere around there.\r\n \r\nTo avoid inadvertent breakages, it would be nice if vue could warn about it.\r\n \r\nWhat does the proposed API look like?\r\n \r\na this. spotted in javascript bits of template would show a warning in the javascript console\r\n \r\n\u2014\r\nYou are receiving this because you are subscribed to this thread.\r\nReply to this email directly, view it on GitHub, or unsubscribe.","#12343 "],"labels":["feature request","discussion","feat:compiler"]},{"title":"$scopedSlots is empty until render()","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/kaelwd\/pen\/rNLNYGL?editors=1011](https:\/\/codepen.io\/kaelwd\/pen\/rNLNYGL?editors=1011)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen the console\r\n\r\n### What is expected?\r\n`\"ScopedComponent beforeMount\" true` to be logged\r\n\r\n### What is actually happening?\r\n`\"ScopedComponent beforeMount\" false`\r\n\r\n---\r\nThis was discovered in vuetify: https:\/\/github.com\/vuetifyjs\/vuetify\/issues\/11533#issuecomment-705058227\r\n\r\nThe real setup is a watcher on a computed property that depends on `$slots`. The watcher is called before mount to get an initial value, causing the computed property to be executed and return an incorrect value. \r\n\r\nMinimal example with the watcher if that helps: https:\/\/codepen.io\/kaelwd\/pen\/vYKYWbV?editors=1010\r\n\r\nThis works as expected in vue 3: https:\/\/codepen.io\/kaelwd\/pen\/gOMOXoB?editors=1011\r\n\r\nThe bug seems to have existed since scoped slots were introduced in v2.1, but it wasn't a problem here until v2.6 when scoped slots started being used everywhere with `v-slot`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Hello, I fix this bug in PR #11726 .\r\nIn before mount, Vue2 will always create an empty object when init render. And in this PR, it will normalize scoped slots when parent vnode is not undefined."],"labels":["bug","has PR"]},{"title":"Build warnings in Mac OS and Node v12 (development)","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup](https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOn Mac OS Catalina (and probably prior versions), with Node v12 installed, follow the developer build instructions: \r\n\r\n* Clone the repository\r\n* Run `yarn`\r\n\r\n### What is expected?\r\nSuccessful report from `yarn` that all dependencies have been installed, with no warnings or errors\r\n\r\n### What is actually happening?\r\nThe following warning, followed by a slew of details (errors) concerning `fsevents` and one of its dependencies, `nan`\r\n\r\n`warning Error running install script for optional dependency: \"\/Users\/mark\/dev\/vue\/node_modules\/fsevents: Command failed.`\r\n\r\n---\r\nDev dependency installation works fine with Node v10. I think I understand the problem and am curious about the right solution. \r\nVue currently specifies `webpack` 4.x and `karma` 3.x as devDependencies, both of which ultimately bring in `chokidar` 2.x, which lists `fsevents` 1.2.x as an optional dependency. \r\n\r\nOld `fsevents` is really the problem, in two ways:\r\n* It references entities that have been removed in Node 12.x (e.g. v8::Handle; see https:\/\/github.com\/fsevents\/fsevents\/blob\/v1.2.2\/fsevents.cc#L89) \r\n* It relies on `nan` 2.9.x, which also references deprecated\/removed entities from the v8 API (e.g. `isNearDeath`). Newer versions of `nan` have addressed this issue. \r\n\r\nI imagine the easiest solution, assuming nothing else breaks, would be to update the `karma` and `webpack` dependencies to some minimal viable version that does away with reliance on these older libs without breaking other expectations. In the meantime, we could also put a note in the build instructions for Mac users noting that they may need to move down to Node v10 if they want to avoid this problem. I understand that this might be obvious to some audience that intends to pitch in with Vue development in the first place, but it might help some.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Contribution welcome to update the minimal dependencies in package.json (without committing changes to `yarn.lock`) so the project works on Node.js 12","@posva  i can take this up ,please guide me what needs to be updated","@ArjunDandagi unless @posva  thinks otherwise, I believe the two deps that need to be bumped up (due to their own indirect deps on old fsevents) are `webpack` and `karma`"],"labels":["contribution welcome"]},{"title":"Add feature to catch errors in a production build for compatibility with external error tracking","body":"### What problem does this feature solve?\r\nCurrently all warnings are suppressed when Vue is built with `process.env.NODE_ENV === production`. However,  many warnings are more severe than a warning - they break functionality. Duplicate keys are a good example. These are hard to filter out in a development environment because the production data could be different. \r\n\r\nI'm currently working on a project where parts of the API and corresponding data are over 15 years old.\r\n\r\nThis means that when a user triggers an error, we're flying blind. No errors are reported. We recently implemented Sentry (which we already ran for Laravel) but again, no errorHandler or warningHandler is triggered.\r\n\r\nWhat I would have liked was a way for us to see the error in production, but not show it to the user in their console. The error and warning handlers are perfect for this purpose, but lack this feature.\r\n\r\nAfter extensively digging through the code and making alterations I've been able to create a production build that outputs warnings and errors. Without activating development features (like devtools, perf traces etc.) - just the warnings. No loss in performance. But it took tweaking both the Vue core files and the `component-compiler-utils`.\r\n\r\nStill, it's possible, and for us, running Vue at scale, with many unknown variables - it's a must have. With these Sentries (or whatever bug tracker someone would choose) it's easy to quickly zero in on production bugs. So I'd love to improve on our solution, push it to the main repo and give back to your awesome framework :-)\r\n\r\n\r\n\r\n### What does the proposed API look like?\r\nMy proposal is to add a new `process.env` variable called `DEBUG_LEVEL`, `WARN_LEVEL` or something along those lines. Maybe a config setting. Something simple. With it you can pick your desired verbosity. When set to FULL, it's identical to the development build. When set to HANDLER it will only trigger custom handlers (which would then be where you'd call the Sentry \/ error tracker). This allows for more granular control over what is triggered, and how it's shown. And then the final setting would be NONE. Which would be identical to the current production build.\r\n\r\nCurrently the `process.env.NODE_ENV` controls both the warnings _and_ the debug tools. My proposal is to separate the two. \r\n\r\nI've already done most of the leg-work. With your thumbs-up I will clean things up, write tests and push it to the dev branch.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This probably should go through a detailed RFC (vuejs\/rfcs)","Will do. Currently still exploring and mapping the full scope of the issue. Even compile errors get ignored leading to non-functioning output without any feedback. To me, this feels weird. Granted, compile errors will surface in a local dev build. But still, if you run a CI\/CD pipeline with a build test (like we do), it undeservedly passes.","Still working on this. Another thing I discovered is the lack of warning \/ debug information on IE11 due to the usage of Proxy. One of the few things you can't polyfill. The errorHandler works, but the warningHandler, doesn't - it's unsupported. Couldn't find any mention of this in the documentation."],"labels":["feature request"]},{"title":"transition-group with flex parent causes removed items to fly","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/turboSheep\/pen\/OJNQGEG](https:\/\/codepen.io\/turboSheep\/pen\/OJNQGEG)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nClick the 'Remove Multiple' or 'Remove First 2' buttons and observe the movement of the items.\r\n\r\n### What is expected?\r\nThe rectangles being removed should fade out on the spot.\r\n\r\n### What is actually happening?\r\nThe rectangles fade out and also move to various locations on the canvas.\r\n\r\n---\r\nObserve that if the items 1 and 2 are to be removed, then the events fired in the following order:\r\n\r\n```\r\nbefore-leave#1\r\nleave#1\r\nbefore-leave#2\r\nleave#2\r\n```\r\n\r\nThis means that `beforeLeave` for the second element is called after `leave` is called for the first element. So when `beforeLeave` is called for the second element, the first element already has `position: absolute`. This means that (while the DOM has not yet rendered the change) the position of the second element has moved to be where the first element used to be, meaning that `el.offsetLeft` is now 'incorrect'. The visual effect is that the first two elements both float to the same position. \r\n\r\nThis can be shown clearly by clicking the 'Remove First 2' button.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->\r\n\r\nSimilar behaviour has been documented by issue #9713 but the issue was quickly closed in March 2019 with a workaround posted in Jan 2020. ","comments":["if i understood correctly , when the element inside the \"transition\" component is removed  , firstly the transition classes will be added to that element. it mentions in the documentation:\r\n\r\n    When an element wrapped in a transition component is inserted or removed, this is what happens:\r\n\r\n    Vue will automatically sniff whether the target element has CSS transitions or animations applied. If it does, CSS transition \r\n    classes will be added\/removed at appropriate timings.\r\n\r\n    If the transition component provided JavaScript hooks, these hooks will be called at appropriate timings.\r\n\r\n    If no CSS transitions\/animations are detected and no JavaScript hooks are provided, the DOM operations for insertion and\/or \r\n    removal will be executed immediately on next frame (Note: this is a browser animation frame, different from Vue\u2019s concept of \r\n    nextTick).\r\n","Yes, I agree that this behaviour is correct as far as documentation is concerned. However, this visually causes the fading elements to jump around as described above. \r\n\r\nI want to know whether there is a way to get the desired effect (no elements jumping around when transitioning out) using the current Vue version and if not, to bring this to the attention of a developer who knows to\/can point me in the direction of adding the necessary feature.","I believe I bumped into this issue as well today. Have a slightly different scenario: a FABs grid (floating-action-buttons) on the bottom-right of the viewport. Newly added buttons will appear to fly from `viewport` `top-left`, even though those elements (that are `absolute` when animated) are direct children of a `positon: relative` parent-container. \r\nCreating a new stacking context with `transform: translated(0,0,0)` or `isolation: isolate` or `will-change: transform` don't solve the issue as well.\r\n\r\nCodesandbox: https:\/\/9kt1h.csb.app\/\r\n\r\nEDIT: possibly related with https:\/\/github.com\/vuejs\/vue\/issues\/8785 and https:\/\/github.com\/vuejs\/vue\/issues\/7879 and https:\/\/github.com\/vuejs\/vue\/issues\/5800\r\n\r\nhttps:\/\/user-images.githubusercontent.com\/5116633\/133116064-ea4543fc-7bd5-4352-9a83-af2b5e829d00.mp4\r\n\r\n\r\n \r\n\r\n","I run in to a similar issue. \r\nI have modified the demo provided by @renatodeleao to use Vue 3.2 and the problem persists: https:\/\/j8uokg.csb.app\/","> I run in to a similar issue. I have modified the demo provided by @renatodeleao to use Vue 3.2 and the problem persists: https:\/\/j8uokg.csb.app\/\r\n\r\nSame here. Also using Vue 3.2. Currently using the workaround (https:\/\/github.com\/vuejs\/vue\/issues\/9713#issuecomment-572153283)","I think flex and grid layout do not play well with leaving transitions of FLIP animations in general.\r\n\r\nWe are applying an absolute layout for elements which are transitioned out. Elements with `position: absolute` will stay at their \"static position\" if their `top`\/`right`\/`bottom`\/`left` are all `auto`. For BFC this position is the original position before they are absolutely positioned as their size do not affect those elements before them in the flow. But for FFC and GFC, this \"static position\" becomes the start of the container as the layout for elements before absolute positioned elements are recalculated, so the position for \"as if they are still there\" doesn't make much sense."],"labels":["transition"]},{"title":"Native modifier for props","body":"### What problem does this feature solve?\r\nConsider the following component\r\n```vue\r\n<template>\r\n <div>\r\n  {{title}}\r\n <\/div>\r\n<\/template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'awesomeTitle',\r\n  props: {\r\n    title: String\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\nWhen using this component it now becomes impossible to set the title html attribute on the div\r\n\r\n```html\r\n<awesomeTitle title=\"Hello world\" title.native=\"Oopsy\"\/>\r\n```\r\n\r\nThis would just output\r\n```html\r\n<div title.native=\"Oopsy\">Hello world<\/div>\r\n```\r\nInstead of \r\n```html\r\n<div title=\"Oopsy\">Hello world<\/div>\r\n```\r\n\r\nAdding the native modifier for props would permit to avoid collision between html attributes and vue props.\r\nIt already exists for event listeners so it would also be more coherent.\r\n\r\nSometime libraries will forget that html attributes inheritance is a thing and adding some html attributes becomes impossible in those components, it will also make the component more future proof in case new html attributes are added in the spec as you don't have to worry about future collisions anymore\r\n\r\n### What does the proposed API look like?\r\n\r\n```html\r\n<awesomeTitle title=\"Hello world\" title.native=\"Oopsy\"\/>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Using a prop with the same name as a native attribute when you want to allow that attribute is confusing. But I think this is worth going through an RFC to gather feedback: https:\/\/github.com\/vuejs\/rfcs","`.prop` seems to work, but only with binding, not sure if it's intended\r\nhttps:\/\/codepen.io\/jkarczm\/pen\/rNeLyLG?editors=1010","@jacekkarczmarczyk Pretty sure it's not and is just a weird side effect but at least this issue got a very hackish workaround for now","@jacekkarczmarczyk Modifiers for props only seem to apply for bindings and not normal attribute, seems like a bug in which case this issue could be solved using the prop modifier which apparently already exist","The prop modifier is not a hack. It will work with attributes that have a property equivalent","@posva I just mean it's hackish that it works only with binding so you have to use quotes and single quote","Can you add 'hacktoberfest' topic to the repository? It will make this repository participating in [hacktoberfest](https:\/\/hacktoberfest.digitalocean.com\/). "],"labels":["feature request","discussion"]},{"title":"Safari doesn't see frame inside vue app","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n\r\nhttps:\/\/jsfiddle.net\/posva\/vczwh82g\/2\/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\nIn Safari click different links to load iframes\r\n\r\n### What is expected?\r\n\r\nall iframes should load\r\n\r\n### What is actually happening?\r\n\r\nthe one rendered inside vue doesn't load\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This is weird. I would guess Vue is adding some attribute or property that is making this fail in Safari but can't tell which one","Hey @posva may i give this a shot? i'd like to contribute","for sure @christoph-schaeffer !","I've created a PR with a detailed explanation on what caused this."],"labels":["bug","has PR","has workaround"]},{"title":"Vue SSR v-html on dynamic-component hydration warning","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\nThe reproduction is updated to use Vue SSR without NUXT\r\n[https:\/\/github.com\/privatenumber\/vue-ssr-vhtml-dyncomp-bug](https:\/\/github.com\/privatenumber\/vue-ssr-vhtml-dyncomp-bug)\r\n\r\n### Steps to reproduce\r\n_Dynamic.vue_\r\n```vue\r\n<template>\r\n  <component is=\"div\">\r\n    content necessary\r\n  <\/component>\r\n<\/template>\r\n```\r\n\r\n_App.vue_\r\n```vue\r\n<template>\r\n  <dynamic v-html=\"'<div>trigger hydration warning<\/div>'\" \/>\r\n<\/template>\r\n```\r\n\r\n### What is expected?\r\nThe expected behavior is for there to be no hydration warning when the SSR and client markup are identical.\r\n\r\n\r\n### What is actually happening?\r\nAlthough there isn't a discrepancy in rendered HTML between client and SSR, it gives warnings that there is.\r\n\r\n![warningD](https:\/\/user-images.githubusercontent.com\/1075694\/88136132-a28f2d00-cbb6-11ea-84db-f38d0bf3adf3.png)\r\n![warningE](https:\/\/user-images.githubusercontent.com\/1075694\/88136136-a327c380-cbb6-11ea-81e6-b3830645de60.png)\r\n\r\n### Work around\r\nI used a [render function](https:\/\/vuejs.org\/v2\/guide\/render-function.html) instead of a dynamic-component:\r\n```\r\nrender(h) {\r\n    return h(this.component, this.$slots.default);\r\n}\r\n```\r\n\r\n### Other info\r\nPrevious issue: https:\/\/github.com\/vuejs\/vue\/issues\/11532\r\n\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["nice bug report. very thorough","Having the same issue.\r\n\r\nSSR node counting strategy does not work properly when injecting HTML via the v-html prop.","This issue has a \"has workaround\" label - whats the workaround here? Having the same problem"],"labels":["bug","has workaround","feat:ssr"]},{"title":"PropType doesn't take undefined for optional props into account","body":"### Version\r\n2.6.11\r\n\r\n### Steps to reproduce\r\nCreate component with optional prop being an object and try to access its property\r\n\r\n```ts\r\nimport Vue, { PropType } from 'vue';\r\n\r\nVue.extend({\r\n  props: {\r\n    container: Object as PropType<{ n: number }>,\r\n    \/\/ or container: Number\r\n  },\r\n\r\n  mounted () {\r\n    \/\/ should fail because this.container could be undefined\r\n    console.log(this.container.n);\r\n  },\r\n});\r\n```\r\n\r\n\r\n### What is expected?\r\nTS error: Object is possibly undefined\r\n\r\n### What is actually happening?\r\nNo error\r\n\r\n### Note\r\n\r\nIt works as expected with Composition API plugin\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/15625235\/84488979-496fd780-aca1-11ea-9cd1-3f96ebdbdc28.png)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["@posva you mean vue behaviour is correct and VCA behaviour is not?","Hi @jacekkarczmarczyk, what's the `Object as PropTypeVCA<{ foo: number }>` are for? \r\n\r\nDo you mean:\r\n\r\n```ts\r\ndefineComponent({\r\n  props: {\r\n    foo: {\r\n      type: Number\r\n    }\r\n  },\r\n  setup (props) {\r\n    console.log(props.foo) \/\/ number | undefined  in both VCA and vue-next\r\n  },\r\n})\r\n```","I originally created this issue in vue repo (not vue-next), I'm not sure why @posva moved it here\r\nIn plain vue your example shows `number`, but IMHO it should be `number | undefined`, just like in VCA and vue-next\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/15625235\/84495904-4b8b6380-acac-11ea-868e-8218b1f21f29.png)\r\n","Sorry, because you focused on the composition-api error, it confused me","Yeah, I guess I didn't emphasised actual problem clear enough, sorry and thanks ","BWT - since `type: Number` reproduces the problem as well I think `PropType` in the issue title is not necessary, not sure how what title would be more appropriate though","I edited the code sample to reproduce to not include the Composition API plugin"],"labels":["improvement","typescript"]},{"title":"Line breaks in textarea are excessively removed.","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/kubotafumiya\/pen\/qBOwEOV](https:\/\/codepen.io\/kubotafumiya\/pen\/qBOwEOV)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Set the el option to an element that contains a textarea (or pre) with a newline at the beginning, and  create a Vue instance.\r\n\r\n\r\n```html\r\n<div id=\"app\">\r\n<textarea>\r\n\r\n\r\nThree line breaks are ignored.\r\n<\/textarea>\r\n<\/div>\r\n```\r\n\r\n```javascript\r\nnew Vue({\r\n  el: '#app',\r\n});\r\n```\r\n\r\n### What is expected?\r\nThe line breaks are removed.\r\n\r\n\r\n### What is actually happening?\r\nLine breaks are not deleted.\r\n\r\n---\r\nhttps:\/\/html.spec.whatwg.org\/multipage\/syntax.html#element-restrictions\r\n\r\nI think it's okay for a single line break to be ignored according to this specification.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I found the reason. Can i take this issue.","@wonhyoung05 Yes, I couldn't find an existing issue or PR for this problem"],"labels":["bug"]},{"title":"chore(warning): Add \"symbol\" and \"boolean\" for \"key\" warning","body":"Booleans as keys are supported since #6127 and symbols since #7271.\r\nThe warning should reflect that.\r\nI created PR as suggested [here](https:\/\/github.com\/vuejs\/vue\/issues\/7936#issuecomment-636984051). There is separat PR for [docs](https:\/\/github.com\/vuejs\/vuejs.org\/pull\/2614)\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [x] Other, please describe: changes warning text in devtools console\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","comments":[],"labels":["warnings"]},{"title":"`src` attribute of `img` inside `picture` should be set after `img` is appended to `picture` to avoid unnecessary requests","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/CaseJnr\/pen\/VwvWbPE](https:\/\/codepen.io\/CaseJnr\/pen\/VwvWbPE)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Open the codepen link in safari\r\n\r\n2. Inspect the element\r\n\r\n3. Reduce the view width below 900px and refresh the page\r\n\r\n4. You will notice that both the red and blue image is requested.\r\n\r\n5. Comment out the vue instance and refresh the page.\r\n\r\n6. You will notice only the red image is requested (as expected).\r\n\r\n\r\n\r\n\r\n### What is expected?\r\nOnly the required picture resource is requested. \r\n\r\n### What is actually happening?\r\nBoth of the pictures resources are requested, causing redundant downloads.\r\n\r\n---\r\nIn Safari, adding a vue instance to any page will cause redundant picture sources to be requested. The picture element will behave correctly if the vue instance is removed.\r\n\r\n\r\nE.g.\r\n\r\n\r\n&#x3C;picture&#x3E;\r\n    &#x3C;source media=&#x22;(max-width: 900px)&#x22; srcset=&#x22;small.jpg&#x22;&#x3E;\r\n    &#x3C;img src=&#x22;large.jpg&#x22; alt=&#x22;&#x22;&#x3E;\r\n  &#x3C;\/picture&#x3E;\r\n\r\n\r\n\r\nBy default, only the small.jpg should be requested when the view width is below 900px. However, if a vue instance is added to the page, then both the small.jpg and large.jpg are requested.\r\n\r\nThe mobile inspector shows the small.jpg request initiator as the page (expected). The large.jpg initiator is actually the vue instance.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["It seems to happen with vanilla JS:\r\n\r\n```js\r\nif(document.getElementById(\"app\")) {\r\n  \/\/ new Vue({ el: '#app'});\r\n}\r\n\r\nlet picture = document.createElement('picture')\r\nlet s1 = document.createElement('source')\r\ns1.media = '(max-width: 900px)'\r\ns1.srcset = \"https:\/\/www.abc.net.au\/radionational\/image\/6289622-4x3-340x255.png\"\r\n\r\nlet s2 = document.createElement('img')\r\ns2.src = \"https:\/\/www.solidbackgrounds.com\/images\/2560x1440\/2560x1440-brandeis-blue-solid-color-background.jpg\"\r\ns2.alt =''\r\n\r\npicture.appendChild(s1)\r\npicture.appendChild(s2)\r\n\r\nwindow.app.innerHTML = 'new'\r\nwindow.app.appendChild(picture)\r\n```\r\n\r\nCould you open a bug report at https:\/\/bugs.webkit.org please?","@posva The issue is how vue is constructing the picture. Creating an img element and setting the src will initiate a request, as expected. To eliminate the redundant img request, the img element must first be added to a picture element before the img.src is set.\r\n\r\nThe following code eliminates the redundant img.src request for views with a width less than 900px\r\n\r\n```\r\nlet picture = document.createElement('picture')\r\nlet source = document.createElement('source')\r\nsource.media = '(max-width: 900px)'\r\nsource.srcset = \"https:\/\/www.abc.net.au\/radionational\/image\/6289622-4x3-340x255.png\"\r\n\r\nlet img = document.createElement('img')\r\nimg.alt =''\r\n\r\npicture.appendChild(source)\r\npicture.appendChild(img) \/\/ Append img to picture before setting the src\r\n \r\nimg.src = \"https:\/\/www.solidbackgrounds.com\/images\/2560x1440\/2560x1440-brandeis-blue-solid-color-background.jpg\"\r\n\r\nwindow.app.appendChild(picture)\r\n```\r\n ","Good to know the order here matters. Did you find the section on the HTML spec defining this behavior? It's still surprising that Chrome handles it but Safari doesn't","@posva Any chance you could recommend a fix for this while I wait for a PR?","Good to know the order here matters. Did you find the section on the HTML spec defining this behavior? It's still surprising that Chrome handles it but Safari doesn't..","I'm currently facing the same issue with vue `v3.0.11` and Safari `v14.1.1`.\r\nNot sure if I should open an issue on https:\/\/github.com\/vuejs\/vue-next.\r\n","Maybe linked to https:\/\/bugs.webkit.org\/show_bug.cgi?id=190031","I'm currently facing the same issue with vue `3.2.20` and Chrome `4.0.4606.81`"],"labels":["improvement","browser quirks"]},{"title":"Add user timing measurement for lifecycle hooks","body":"### What problem does this feature solve?\r\nMy app had performance issue due to some slow lifecycle hooks.\r\nIt would be easy to find an issue like that if `Vue.config.performance` API records lifecycle hooks too.\r\n\r\n### What does the proposed API look like?\r\nWith `Vue.config.performance = true`, I can observe timings of lifecycle hooks as like `vue <Foo> mounted` in \"Timings\" section in the devtools as well as current `Vue.config.performance` behavior for init\/compile\/render\/patch events.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I think it would be achieved by adding mark\/measure call in this function:\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/0551226f8bf0884e31bb686b7116b60f1eaf77e6\/src\/core\/instance\/lifecycle.js#L336-L350\r\n\r\nlike this:\r\n\r\n```\r\n export function callHook (vm: Component, hook: string) { \r\n   \/\/ #7573 disable dep collection when invoking lifecycle hooks \r\n   pushTarget() \r\n   const handlers = vm.$options[hook] \r\n   const info = `${hook} hook` \r\n   if (handlers) { \r\n     const name = vm._name\r\n     const id = vm._uid\r\n     const startTag = `vue-hook-perf-start:${id}`\r\n     const endTag = `vue-hook-perf-end:${id}`\r\n     mark(startTag)\r\n     for (let i = 0, j = handlers.length; i < j; i++) { \r\n       invokeWithErrorHandling(handlers[i], vm, null, vm, info) \r\n     } \r\n     mark(endTag)\r\n     measure(`vue ${name} ${hook}`, startTag, endTag)\r\n   } \r\n   if (vm._hasHookEvent) { \r\n     vm.$emit('hook:' + hook) \r\n   } \r\n   popTarget() \r\n } \r\n```","\u7a7a\u95f4\u770b\u7a7a\u95f4"],"labels":["improvement"]},{"title":"correction when nodeOps.tagName returns value other than string","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [ ] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","comments":["Can you provide a reproduction of the bug you are fixing?","I have an application using Nuxt 2.12.2 and Vue 2.6.11, for some reason\nwhen adding the vue-chartjs the application crashes and presents the error\nattached just the function in which I sent the bugfix, when making the\nchange I sent in PR the error stopped occurring\n\nEm ter., 21 de abr. de 2020 \u00e0s 04:59, Eduardo San Martin Morote <\nnotifications@github.com> escreveu:\n\n> Can you provide a reproduction of the bug you are fixing?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/vuejs\/vue\/pull\/11332#issuecomment-617019554>, or\n> unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AHKNLQRFHGM3N4ILHNK2Y63RNVG5DANCNFSM4MM6YTLQ>\n> .\n>\n\n\n-- \nAtt. Andr\u00e9 Ferreira\nandrehrf@gmail.com\nTel: (21) 99992-6932\n","https:\/\/ibb.co\/hMZ0XrM","I understand you are trying to fix a problem you find in your code but I'm asking you for a boiled down reproduction or at the very least a test case that fails without the proposed change. Otherwise, we won't be able to accept the change\r\n\r\nYou can use https:\/\/jsfiddle.net\/chrisvfritz\/50wL7mdz\/ or https:\/\/codesandbox.io\/s\/vue to create a boiled down reproduction (no extra dependencies like Nuxt)\r\n\r\nBTW dist and packages files are generated and should be excluded from the PR.","Hello Eduardo, I don't know how to answer this bug because it occurs\nintermittently, in production mode it works normally, but when I'm using\nnuxt in dev mode when making any changes the error I sent appears, I\nbelieve it may be an error from nuxt and not from vue, I take an hour to\nthoroughly investigate which plugin may be causing this behavior, for now\nwhat I could do to resolve it was the change I sent, which is even a simple\nerror to use toLowerCase without being sure that the returned value is in\nfact a string, not accepting such a simple correction does not make much\nsense\n\nEm qua., 22 de abr. de 2020 \u00e0s 04:01, Eduardo San Martin Morote <\nnotifications@github.com> escreveu:\n\n> I understand you are trying to fix a problem you find in your code but I'm\n> asking you for a boiled down reproduction or at the very least a test case\n> that fails without the proposed change. Otherwise, we won't be able to\n> accept the change\n>\n> You can use https:\/\/jsfiddle.net\/chrisvfritz\/50wL7mdz\/ or\n> https:\/\/codesandbox.io\/s\/vue to create a boiled down reproduction (no\n> extra dependencies like Nuxt)\n>\n> BTW dist and packages files are generated and should be excluded from the\n> PR.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/vuejs\/vue\/pull\/11332#issuecomment-617591107>, or\n> unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AHKNLQXYL3G57UJVH3DA3HDRN2I6LANCNFSM4MM6YTLQ>\n> .\n>\n\n\n-- \nAtt. Andr\u00e9 Ferreira\nandrehrf@gmail.com\nTel: (21) 99992-6932\n","The reproduction is essential to understand if this is the right fix or not. The problem could be elsewhere leading to `tagName` not being a string.\r\nEither way, a unit test is also required for bug fixes.\r\nThis will stay open for anybody to pick up"],"labels":["need repro"]},{"title":"nextTick implementation breaks with core-js@3 Promise polyfill on Tizen 2016","body":"### Version\r\n2.6.11\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nJust cross-linking the issues here, it was opened in core-js repo:\r\nhttps:\/\/github.com\/zloirock\/core-js\/issues\/814\r\n\r\nThe reproduction is not easily doable as it requires a Samsung Tizen 2016 device (which I have because I develop specifically for TVs).\r\n\r\n### What is expected?\r\nUI updates correctly after events\r\n\r\n### What is actually happening?\r\nUI will only update if another task is queue.\r\n\r\n---\r\nIn the nextTick implementation there's a check for `isIOS` to trigger an extra `setTimeout` which, while hacky, works also for Tizen 2016.\r\n\r\nPerhaps a PR could be made adding an exception for Samsung Tizen as well?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["A boiled down repro is still required","Would you like me to prepare a Tizen package with minimal reproduction code @posva ?","The package could be useful for anybody who can reproduce it. A code sample would be useful\nIt\u2019s unclear why core js plays a role here though. If you have a simple fix, I think it would be better to send a PR","Core-js plays a role in the sense that Vue-cli 4 is using core-js@3 by default for polyfills. The implementation breaks in core-js@3 but doesn't in core-js2, hence my confusion. ","@posva a simple fix would be to detect Tizen user agent and do the same trick as it's done for iOS (using a setTimeout), but I noticed an impact in performance while doing user interaction e.g with longpress. I'm curious to know why it worked with core-js@2 with no special quirks.\r\n\r\nOne solution for me to move forward now is to use core-js v2 on this project, but it seems like going against the grain, as v2 is already deprecated in favor of v3. I don't want to send a PR unless it's absolutely necessary."],"labels":["need repro","browser quirks"]},{"title":"In Firefox, radiobuttons with `required` and `v-model` are marked as invalid immediately","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/t1po5sdh\/](https:\/\/jsfiddle.net\/t1po5sdh\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nIn Firefox 75.0, I get the two radio buttons marked as invalid (i.e. surrounded by a red border) immediately on pageload. This does not happen if I either remove `required` or `v-model`\r\n\r\n### What is expected?\r\nThe radios should only be marked as invalid after form submission - as with other required input controls.\r\n\r\n### What is actually happening?\r\nSee above\r\n\r\n---\r\nI've been observing this for years already.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This seems to happen in js as well as soon as the property `checked` is touched: https:\/\/jsfiddle.net\/Lz5u2wah\/ which we need to do for `v-model`","Firefox will mark the **required** radio input with a red border if you had operated the radio input **without giving it a selected value**.\r\nI guess vue had set the property `checked` of all the radio inputs to `false` when it created data bindings because of `null`, then the radio inputs had been marked as invalid by firefox."],"labels":["browser quirks"]},{"title":"Components slots are not rendered inside svg foreignObject","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/AleksandrasNovikovas\/w042x1c8\/](https:\/\/jsfiddle.net\/AleksandrasNovikovas\/w042x1c8\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nRun provided fiddle. There are three svg boxes with foreignObject:\r\n1. contains simple html tags\r\n2. contains simple vue component\r\n3. contains complex (with slot) vue component\r\n\r\n\r\n### What is expected?\r\nAll three boxes should show link and input elements\r\n\r\n### What is actually happening?\r\nThird box does not show link and input elements.\r\n\r\n---\r\nWhile inspecting DOM (in chrome or in firefox) you will find that elements of second box and third box are identical.\r\nProblem is their types: (in chome dev console select element and tab properties)\r\nselect input element from second box and you will find following list: Object->EventTarget->Node->Element->HTMLElement->HTMLInputElement->input;\r\nselect input element from third box and you will find following list: Object->EventTarget->Node->Element->SVGElement->input;\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["#11349 This is not a problem anymore because I have fixed it and submitted PR\ud83d\ude01.","Can we get this reviewed and fixed? I don't get why this obvious issue is not treated."],"labels":["bug","has PR"]},{"title":"SSR fails to render component inside v-else of a v-if with v-html","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/github.com\/tuomassalo\/vue-ssr-v-html-bug](https:\/\/github.com\/tuomassalo\/vue-ssr-v-html-bug)\r\n\r\n\r\n### Steps to reproduce\r\n- clone the repo\r\n- run `npm run dev`\r\n- open `localhost:8080`\r\n- observe Console log.\r\n\r\n\r\n### What is expected?\r\nI expect SSR to render \"bar: Bar!\", as the client-side does.\r\n\r\nOr, I'd like to get an eslint warning that this is a bad idea (if that is the problem).\r\n\r\n### What is actually happening?\r\n`App.vue` fails to render `bar-component` on the server. Instead, it outputs `<bar-component><\/bar-component>`, and the dev server gives the warning \"The client-side rendered virtual DOM tree is not matching server-rendered content.\"\r\n\r\n---\r\n\r\nThe key part of `App.vue` is this:\r\n\r\n```\r\n<div v-if=\"foo\" v-html=\"'Foo.'\"\/>\r\n<div v-else>\r\n  bar: <bar-component\/>\r\n<\/div>\r\n```\r\n\r\nMy original component was naturally longer. I ran into this problem after changing the `v-if` line from something like:\r\n\r\n    <div v-if=\"foo\">{{ foo }}<\/div>\r\n\r\nTo:\r\n\r\n    <div v-if=\"foo\" v-html=\"foo\"\/>\r\n\r\n... which *seemed* innocuous to me.\r\n\r\nFinally, apologies for posting a very possible duplicate.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["A workaround is using a `template` tag:\r\n\r\n```vue\r\n<div id=\"app\">\r\n  <template v-if=\"foo\" >\r\n    <div v-html=\"'Foo.'\" key=\"hey\"\/>\r\n  <\/template>\r\n  <div v-else>\r\n    bar: <BarComponent \/>\r\n  <\/div>\r\n<\/div>\r\n```\r\n\r\nFor SSR repros, it's usually easier to do them with the bare minimum. Here is an example:\r\n\r\n```js\r\nconst Vue = require('vue')\r\n\r\nconst BarComponent = {\r\n  template: `\r\n   <div>Bar!<\/div>\r\n  `,\r\n}\r\n\r\nconst app = new Vue({\r\n  template: `\r\n<div id=\"app\">\r\n  <div v-if=\"foo\" v-html=\"'Foo.'\" key=\"hey\"\/>\r\n  <div v-else>\r\n    bar: <BarComponent \/>\r\n  <\/div>\r\n<\/div>\r\n  `,\r\n  data: () => ({ foo: false }),\r\n  components: { BarComponent },\r\n})\r\n\r\nconst renderer = require('vue-server-renderer').createRenderer()\r\n\r\nrenderer.renderToString(app, (err, html) => {\r\n  if (err) throw err\r\n  console.log(html)\r\n})\r\n```\r\n\r\nIt could also help anybody picking up the issue","me too","having the same issue!","I also ran into an issue and spent half a day to figure out what was going on.\r\nFinally, I feel like a fool but:\r\n```\r\n<div v-if=\"smth === true\" v-html=\"html\"><\/div>\r\n<component v-else ... \/>                        <----- doesn't work\r\n\/\/ but...\r\n<div v-if=\"smth === true\" v-html=\"html\"><\/div>\r\n<component v-if=\"smth !== true\" \/>              <----- this works\r\n```\r\nHope this helps someone who stuck with that too.","> I also ran into an issue and spent half a day to figure out what was going on. Finally, I feel like a fool but:\r\n> \r\n> ```\r\n> <div v-if=\"smth === true\" v-html=\"html\"><\/div>\r\n> <component v-else ... \/>                        <----- doesn't work\r\n> \/\/ but...\r\n> <div v-if=\"smth === true\" v-html=\"html\"><\/div>\r\n> <component v-if=\"smth !== true\" \/>              <----- this works\r\n> ```\r\n> \r\n> Hope this helps someone who stuck with that too.\r\n\r\nthis does work, but how? can someone please explain what's going on here?\r\n\r\nwhen I wrote this it worked\r\n```\r\n<div v-if=\"colorModeIcon\">\r\n  <Icon @click=\"switchColorMode\" :name=\"colorModeIcon\" \/>\r\n<\/div>\r\n<div v-if=\"!colorModeIcon\"> \/\/ <- work\r\n  <Icon name=\"line-md:loading-twotone-loop\" \/>\r\n<\/div>\r\n```\r\n\r\nbut this does not\r\n```\r\n<div v-if=\"colorModeIcon\">\r\n  <Icon @click=\"switchColorMode\" :name=\"colorModeIcon\" \/>\r\n<\/div>\r\n<div v-else> \/\/ <- don't work\r\n  <Icon name=\"line-md:loading-twotone-loop\" \/>\r\n<\/div>\r\n```","I'm also having this problem with Nuxt .... strange"],"labels":["bug","has workaround","feat:ssr"]},{"title":"feat(server): make MAX_STACK_DEPTH configurable","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [ ] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n\r\nIn my scenario, there are many recursive calls in render function, and `SSR` application would throw the `Maximum call stack size exceeded` before the `stackDepth` reach `800`. I want the `MAX_STACK_DEPTH` to be configurable in this case.\r\n","comments":["@posva any plan to merge it?","ping"],"labels":["semver:minor","feat:ssr"]},{"title":".once modifier did'nt perform as expected if my event handler return null","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/q0v6m8dr\/1\/](https:\/\/jsfiddle.net\/q0v6m8dr\/1\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. bind a handler to an event which with a '.once' modifier \r\n3. set null for the hanlder's return value\r\n2. trigger the event,  and  trigger again\r\n\r\n### What is expected?\r\nonly the first trigger will invoke handler,  under '.once' influence\r\n\r\n### What is actually happening?\r\nsubsequent trigger will also invoke handler beside the first one\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I'm unsure about this one since the condition is explicitly stated at https:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/core\/instance\/events.js#L36 but I don't know if it's necessary.\r\n\r\n@gebilaoxiong do you remember why you added the check for `(res !== null)` at https:\/\/github.com\/vuejs\/vue\/pull\/8036","@posva  when deal with native once event, there is a `(res !== null)` guard just to make sure the \r\n`.self` modifier works. see the issure #4846.\r\nbut there is no such a problem when the event is component level, the problem should be solved maybe ","Thanks @hulkyhawk, let's keep this open as the code could potentially be adapted to allow an event listener to return `null` when `.once` is added","@posva I'm sorry I didn't notice the news;\r\n\r\nThis is not a broken change\uff0cThe logic used here is the old one:\r\nhttps:\/\/github.com\/vuejs\/vue\/pull\/8036\/files#diff-2b06abcad137617975c484105ce8f5a7L26-L28\r\n\r\nIt looks like a signal value, But I can not find the test-case;\r\n"],"labels":["improvement"]},{"title":"\"refInFor\" searches upwards of inline-template boundary","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/b71adnym\/2\/](https:\/\/jsfiddle.net\/b71adnym\/2\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nNest a component with an inline-template that has a ref in a v-for.\r\n\r\n\r\n### What is expected?\r\ncomponent.$ref.ref should point to the respective element.\r\n\r\n### What is actually happening?\r\ncomponent.$ref.ref is a singleton array with the element reference.\r\n\r\n\r\n---\r\ncheckInFor loops over the element ancestors up to the document root, so it believes that the ref is in a loop, but it actually isn't.\r\nThe check should stop at the component root.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["A patch like this seems to fix the issue for me:\r\n```\r\n    function checkInFor(el) {\r\n        var parent = el;\r\n        while (parent) {\r\n            if (parent.attrsMap['inline-template'] != null) {\r\n                return false\r\n            }\r\n            if (parent.for !== undefined) {\r\n                return true\r\n            }\r\n            parent = parent.parent;\r\n        }\r\n        return false\r\n    }\r\n```\r\n"],"labels":["bug"]},{"title":"Object with prototype of `null` cannot be displayed using text interpolation","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/hezedu\/pen\/GRJYXGR](https:\/\/codepen.io\/hezedu\/pen\/GRJYXGR)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nvue: 2.6.11\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/a59e05c2ffe7d10dc55782baa41cb2c1cd605862\/dist\/vue.runtime.js#L96-L102\r\n```js\r\ntoString(Object.create(null);\r\n```\r\nWill crash: \r\nTypeError: Cannot convert object to primitive value\r\n\r\n### What is expected?\r\nTypeError\r\n\r\n### What is actually happening?\r\nerror\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["What is the expectation here? Do you want it throw a certain kind of error? It is currently throwing `TypeError` which I feel is the most accurate. If a value doesn't contain the default `toString` property, it can't be trusted to output anything useful or more importantly, safe.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/71916\/77575073-331b6200-6e90-11ea-9a84-467bd3ab54ac.png)\r\n"],"labels":["improvement"]},{"title":"Vue form inputs broken on IE11 on browser refresh","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/affeman\/pen\/LYVzzYw](https:\/\/codepen.io\/affeman\/pen\/LYVzzYw)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nNot reproducible in CodePen but the code is the same used in the Vue official documentation (See below)\r\n\r\n1. Go to https:\/\/vuejs.org\/v2\/guide\/forms.html#Checkbox in Internet Explorer 11\r\n2. Click the checkbox\r\n3. Reload the page\r\n\r\n### What is expected?\r\nThe checkbox is unchecked and the label is false\r\n\r\n### What is actually happening?\r\nThe checkbox is checked and the label is false\r\n\r\n---\r\nThe same issue applies to the other components on the page as well.\r\n\r\nThe issue is not applicable after a hard refresh.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["U still use IE? \ud83e\udd23","It seems like an issue for checkboxes in IE  in general.\r\nhttps:\/\/stackoverflow.com\/a\/3176181","don't use that browser support is over in vue for that"],"labels":["browser quirks"]},{"title":"Swapping from functional to non-functional component using v-if does not change v-data-* attribute.","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/embed\/heuristic-brown-u7rvw?fontsize=14&hidenavigation=1&theme=dark](https:\/\/codesandbox.io\/embed\/heuristic-brown-u7rvw?fontsize=14&hidenavigation=1&theme=dark)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nClick the tick box.\r\n\r\n### What is expected?\r\nIt should say \"BLUE BOX\" with a blue background colour.\r\n\r\n### What is actually happening?\r\nIt says \"BLUE BOX\" with no background colour.\r\n\r\n---\r\nThe issue stems from the data-v-* attribute not being re-set for the blue_block div when it is swapped to. It is still using the data-v-* attribute of the child div in the functional component. Thus the CSS class styling does not apply. \r\n\r\n\r\nhttps:\/\/imgur.com\/a\/gukDePJ\r\n\r\n\r\nSwapping from a functional component to something else is useful. E.g. When showing a simple loading bar component before swapping to a more complex component.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I think this may have something to do with how Vue recycles nodes during update. As a workaround, adding a `key` to both the component and the div yields the expected behavior.","Might be related to https:\/\/github.com\/vuejs\/vue\/issues\/10416","test","I don't think this is a problem.\r\n\r\nAccording to the comment [here](https:\/\/github.com\/vuejs\/vue\/blob\/dev\/test\/unit\/features\/options\/_scopeId.spec.js#L92) :\r\n\r\n> functional component with scopeId will not inherit parent scopeId\r\n\r\nThe functional components **should not** inherit parent if the parent is scoped.\r\n\r\nI think we have a workarounds here: we can remove the `scoped` attribute in the parent component. Seems it works :\r\nhttps:\/\/codesandbox.io\/embed\/vigorous-frost-t1f84"],"labels":["bug"]},{"title":"Throw error\/warn if watch path doesn't resolve to an existing property","body":"### What problem does this feature solve?\r\nCurrently, if a watch path does not address an existing property, its handler would just silently never execute.\r\nThis may cause bugs due to a typo or refactoring that involves restructuring the app model. Especially if we want to watch something like `'$store.state.user.user.subscriptions'`.\r\n\r\nHere's a JSFiddle to play with: https:\/\/jsfiddle.net\/WofWca\/50feyxn7\r\n\r\n### What does the proposed API look like?\r\nJust throw an error (or warn?) in such case. Like it would happen if we used `this.$watch(() => this.$store.state.user.user.subscriptions, () => { .... });`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Wouldn't it be better if watcher run when the property becomes available? Not sure if it's doable though.","> Wouldn't it be better if watcher run when the property becomes available? Not sure if it's doable though.\r\n\r\nI think it's better to do this manually, in the handler.\r\n\r\nAnother possible option is optional chaining in watch path expression (like this `$store.state.user.user?.subscriptions`, with a question mark), but I feel like this would need a separate issue.","@posva I have a PR for this but I'm sort of weary of adding it to the codebase because there's already a solution for watching non-existent properties using `Vue.set`. You can see a test case for it here:\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/test\/unit\/modules\/observer\/watcher.spec.js#L36","In other words, for a lot of users this is going to produce a warning for expected behavior.","@despreston yeah, the warning would only make sense if it's referring to a property of a non declared object (like the jsfiddle). Maybe this is indeed way too far for a warning","@posva even for a non-declared object, you can create an object with `Vue.set` right? \r\n\r\n```js\r\nVue.set(this, 'completelyNew')\r\n```\r\nSo you _could_ have watchers for 'completelyNew' even before it exists.","It doesn't seemed to work when I tried","hm. ok. You're right, and the docs can back that up: https:\/\/vuejs.org\/v2\/guide\/reactivity.html#Change-Detection-Caveats"],"labels":["feature request","warnings"]},{"title":"Hydration fails when write like \"<div><span>123<\/span>{{value}}<\/div>\" in the template and the data \"value\" is a empty string","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/deqwin\/pen\/wvaMxoO](https:\/\/codepen.io\/deqwin\/pen\/wvaMxoO)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nopen the reproduction above and you will see a red vue warning in the console\r\n\r\n### What is expected?\r\na successful hydration\r\n\r\n### What is actually happening?\r\nthe hydration fails and the app re-renders absolutely\r\n\r\n---\r\nthis looks like the problem caused by the empty text node (src\/core\/vdom\/patch.js line:646)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["hello  do well ","Hello,Modify it so that there is no error,beacuse,The client-side rendered virtual DOM tree is not matching server-rendered content. You have one more {{value}} .\r\n```html\r\n<div id=\"app\" data-server-rendered=\"true\"><span>123<\/span><\/div>\r\n<template id=\"tpl\">\r\n  <div id=\"app\"><span>123<\/span><\/div>\r\n<\/template>\r\n```","> Hello,Modify it so that there is no error,beacuse,The client-side rendered virtual DOM tree is not matching server-rendered content. You have one more {{value}} .\r\n> \r\n> ```\r\n> <div id=\"app\" data-server-rendered=\"true\"><span>123<\/span><\/div>\r\n> <template id=\"tpl\">\r\n>   <div id=\"app\"><span>123<\/span><\/div>\r\n> <\/template>\r\n> ```\r\n\r\nYes, it works. But it's not easy to modify because i have written this many times in my project."],"labels":["bug","has PR","feat:ssr"]},{"title":"$http.delete shows warning \"avoid using JavaScript unary operator as property name\"","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/frOracle\/pen\/vYOEEVW](https:\/\/codepen.io\/frOracle\/pen\/vYOEEVW)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nuse $http.delete in @click\r\n\r\n### What is expected?\r\n$http.delete is a function, not unary operator\r\n\r\n### What is actually happening?\r\na warning \"avoid using JavaScript unary operator as property name\"\r\n\r\n---\r\nRelated https:\/\/github.com\/vuejs\/vue\/issues\/5464\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I think the point of this was to avoid problems by using keys in object with names like `delete` (looking at the commit where the file was changed to emit this error will probably have more info). Depending on that, we could avoid it on the expression if it's prefixed by an object.\r\nIt's still a warning, so it doesn't break the app.\r\nThe workaround is using `$http['delete']`, which is quite verbose\r\n\r\nFor anybody willing to give this a try: I marked this as a good first issue but it might be harder than I think because it depends on the logic that exists regarding the warning","created PR #11092 for this  #issue ","PR #11409","because you can't use delete keyword as variable name.. these are reserve keywords but if you still want to use it then try brackets like this : ['delete'] : value"],"labels":["improvement","has workaround","warnings","feat:compiler"]},{"title":"Slot wrapped in `v-if` disappears after re-render","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/y9kmcbg6\/](https:\/\/jsfiddle.net\/y9kmcbg6\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. JSFiddle will render both elements.\r\n2. After 3s, it will toggle off\r\n3. After 3s, it will toggle on\r\n4. To see it happen again, rerun the jsfiddle\r\n\r\n### What is expected?\r\nAt step 3, the bottom slot content should re-appear when ToggleComponent toggles back\r\n\r\n### What is actually happening?\r\nThe bottom slot never re-appears\r\n\r\n---\r\nSeems to be related to the `v-if` on line 21. I'm doing this b\/c it's useful to have an optional slot, but I don't want an extra div to appear when the slot isn't used (for layout reasons). I'm fairly new to vue, so I don't know if there's a different recommended way to do this.\r\n\r\nNot documented in the example, but if ParentComponent updates, the slot content will re-appear\r\n\r\nexample code included here for perusal:\r\n\r\n```vue\r\nconst ToggleComponent = {\r\n  data() {\r\n    return {\r\n      toggleEl: true,\r\n    };\r\n  },\r\n\r\n  created() {\r\n    setTimeout(() => this.toggleEl = false, 3000);\r\n    setTimeout(() => this.toggleEl = true, 6000);\r\n  },\r\n  render(h) {\r\n    return this.toggleEl ? h('div', this.$slots.default) : null\r\n  }\r\n};\r\n\r\nconst SlotComponent = {\r\n  template: `\r\n    <div>\r\n      <slot><\/slot>\r\n      <div v-if=\"$slots.other\">\r\n        <slot name=\"other\"><\/slot>\r\n      <\/div>\r\n    <\/div>\r\n  `\r\n}\r\n\r\nconst ParentComponent = {\r\n  template: `\r\n    <ToggleComponent>\r\n      <SlotComponent>\r\n        <template v-slot:default>\r\n          I should have an element below me\r\n        <\/template>\r\n        <template v-slot:other>\r\n          I am the element below you\r\n        <\/template>\r\n      <\/SlotComponent>\r\n    <\/ToggleComponent>\r\n  `,\r\n\r\n  components: {\r\n    ToggleComponent,\r\n    SlotComponent\r\n  },\r\n}\r\n\r\nvar demo = new Vue({\r\n  el: '#demo',\r\n  template: `\r\n    <ParentComponent\/>\r\n  `,\r\n\r\n  components: {\r\n    ParentComponent\r\n  },\r\n});\r\n\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This is because `v-slot` is like the old `slot-scope`. It seems that in this case `$slots` is not in sync with `$scopedSlots` but you can use `$scopedSlots` instead of `$slots` in the v-if you mentioned to workaround the issue","@posva Thanks, that worked!\r\nQuestions:\r\n- Are there any other implications of using `$scopedSlots` vs `$slots`?\r\n- What do you mean by \"`v-slot` is like the old `slot-scope`\"?","I just had the same issue, where checking `$slots.default` to conditionally render between slot or `<form>` element will work fine, something like \r\n``` \r\n    \/\/ component <foo-bar>\r\n    <template v-if=\"$slots.default\">\r\n      <slot v-bind:food=\"'chicken'\"\/>\r\n    <\/template>\r\n    <form v-else>\r\n    <\/form>\r\n```\r\nup until when consuming AND trying to utilize scoped slot props. (adding `v-slot:default=\"slotProps`)\r\n```\r\n      <foo-bar>\r\n        <template v-slot:default=\"slotProps\">\r\n          <p>slot stuff<\/p>\r\n        <\/template>\r\n      <\/foo-bar>\r\n\r\n\/\/ even tried with foo-bar having v-if=\"$slots.default' internally too\r\n    <foo-bar v-slot=\"slotProps\">\r\n      <p>slot stuff<\/p>\r\n    <\/foo-bar>\r\n```\r\n\r\n**TLDR**; Adding scoped slots to foo-bar (`<foo-bar v-slot=\"slotProps\">`) breaks inner v-if condition based on `$slots.default` unless when applying @posva's [suggestion](https:\/\/github.com\/vuejs\/vue\/issues\/11084#issuecomment-582801325), see below\r\n\r\n``` diff\r\n    \/\/ component <foo-bar>\r\n-    <template v-if=\"$slots.default\">\r\n+    <template v-if=\"$scopedSlots.default\">\r\n      <slot v-bind:food=\"'chicken'\"\/>\r\n    <\/template>\r\n    <form v-else>\r\n    <\/form>\r\n```\r\n\r\nI'm using the latest stable version,  2.6.11."],"labels":["bug","has workaround"]},{"title":"v-bind with empty key","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/andrewharvey4\/k6r3uzby\/10\/](https:\/\/jsfiddle.net\/andrewharvey4\/k6r3uzby\/10\/)\r\n\r\n### Steps to reproduce\r\nv-bind an object with a empty string key\r\n\r\n### What is expected?\r\nvue not to crash, it to either be silently ignored or a warning but not a fatal error\r\n\r\n### What is actually happening?\r\nan error is thown crashing the app\r\n\r\n```\r\nvue.js:4483 Uncaught DOMException: Failed to execute 'setAttribute' on 'Element': '' is not a valid attribute name.\r\n    at baseSetAttr (https:\/\/unpkg.com\/vue@2.6.11\/dist\/vue.js:6778:10)\r\n    at setAttr (https:\/\/unpkg.com\/vue@2.6.11\/dist\/vue.js:6753:7)\r\n    at Array.updateAttrs (https:\/\/unpkg.com\/vue@2.6.11\/dist\/vue.js:6708:9)\r\n    at invokeCreateHooks (https:\/\/unpkg.com\/vue@2.6.11\/dist\/vue.js:6064:24)\r\n    at initComponent (https:\/\/unpkg.com\/vue@2.6.11\/dist\/vue.js:5997:9)\r\n    at createComponent (https:\/\/unpkg.com\/vue@2.6.11\/dist\/vue.js:5980:11)\r\n    at createElm (https:\/\/unpkg.com\/vue@2.6.11\/dist\/vue.js:5920:11)\r\n    at createChildren (https:\/\/unpkg.com\/vue@2.6.11\/dist\/vue.js:6048:11)\r\n    at createElm (https:\/\/unpkg.com\/vue@2.6.11\/dist\/vue.js:5949:11)\r\n    at Vue.patch [as __patch__] (https:\/\/unpkg.com\/vue@2.6.11\/dist\/vue.js:6509:11)\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Exact same error is given when v-bind has an extra : infront of it \r\n`<my-comp v-bind:={prop1, prop2}> My Comp <\/my-comp> `\r\n\r\nThis is picked during run-time instead of compile with stack trace and message having no information about where it happened.\r\n\r\nNot sure if it's worth re-opening this, or creating another issue. \r\n\r\nThis happens in 2.6.11"],"labels":["improvement","warnings"]},{"title":"the string constructor cannot be used as a `key`","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/practical-shaw-br23c](https:\/\/codesandbox.io\/s\/practical-shaw-br23c)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen the codesandbox and you'll see a warning like `[Vue warn]: Duplicate keys detected: 'constructor'. This may cause an update error.`\r\n\r\nClick the \"swap\" button TWICE to swap the list in the data, triggering the error.\r\n\r\nIf the literal string \"constructor\" in the first list is changed for any other string, there are no errors or warnings.\r\n\r\n### What is expected?\r\nThe list should swap between the \"first\" and \"second\" list\r\n\r\n### What is actually happening?\r\n\"TypeError: Cannot read property 'key' of undefined\"\r\n\r\n---\r\n:( this was a hard bug to track down.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["As same, key name don't use `__proto__'`","I'm not sure if it's possible to allow reserved properties like those in the current codebase.\r\nOtherwise, the warning message should be different","If the problem was that you can't do `v-bind:key=\"foo.constructor\"`, because `constructor` is a reserved property, that's probably an ok thing to not support. But the problem here is that `v-bind:key=\"foo.name\"` cannot resolve to the string `\"constructor\"`.\r\n\r\nThis seems like a fairly scary bug, since it can cause Vue's rendering loop to arbitrary break when trying to render valid data. If I had to guess Vue is probably using the value of the key as a lookup key in an `Object`, rather than in a proper `Map` type? I'm new to Vue, so I'm probably oversimplifying things.\r\n\r\nFor context, in my case, I'm using normalized names for some database entities as a unique key (with a unique constraint in the db). One of those entities happens to be called \"constructor\", and using the unique name as the key completely breaks Vue. I could use the primary key for the key, but I didn't really want to leak the db's primary keys to the frontend.\r\n\r\nAlso, what does the `discussion` label mean?","Yes, Vue use `key` as a lookup key in an Object to avoid duplicate keys, and `constructor` is a original property in Object. So the `constructor` KEY has been exist in Object.\r\nSo, DO NOT use property of Prototype chain as key.\r\n\r\nYou can use like below:\r\n```\r\n<div v-for=\"(topic,index) in topics\" :data-someKey=\"topic.name\" v-bind:key=\"index\">\r\n    <div>{{ topic.name }}<\/div>\r\n<\/div>\r\n```\r\n\r\nThen you can get the value of someKey by HTML5 DOM method.\r\n "],"labels":["bug","discussion"]},{"title":"Generate distinct paths for supporting .vue files in sourcemaps","body":"### What problem does this feature solve?\r\nHello Vue \ud83d\udc4b\r\n\r\nI'm working on our [new JavaScript debugger](https:\/\/github.com\/microsoft\/vscode-js-debug) for VS Code, and ran into some problems when trying out Vue. The default vue-cli setup creates several supporting .vue scripts. For instance, open the Chrome devtools and ctrl p for \"App.vue\" in a new project. The top entry is the correct Vue file, the others aren't.\r\n\r\n![](https:\/\/memes.peet.io\/img\/Screen%20Shot%202020-01-17%20at%2011.47.46%20AM.png)\r\n\r\nFrom the VS Code perspective, the user might ask us to set a breakpoint in a Vue file. We know which file the breakpoint is attached to on disk, and we need to figure out which loaded file that breakpoint gets mapped to. However, because all these paths are quite similar and all (in the context of a generic web app) possibly the file we want, we end up putting the breakpoint in the wrong file and breaking in the incorrect place. And often the supporting scripts evaluate before the 'real' script does, so we can't, for example, wait and pick the best match from the possible candidates.\r\n\r\n### What does the proposed API look like?\r\nThe simplest solution would be to prefix the supporting files with some path like `__vue__`, or something along those lines. This would prevent the paths from incorrectly mapping to files that exist on disk.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Maybe @znck or @sodatea know more about where to do something here","This happens in vue-loader, right now I don\u2019t have bandwidth to take it but I can guide if someone is interested. ","I could probably find some time to help out. Code pointers or guidance would be appreciated \ud83d\ude42 ","This is turning out to be a little more tricky than I thought. Convincing webpack to resolve paths that don't actually exist on the filesystem is difficult; I've made some headway with the [virtual-module-webpack-plugin](https:\/\/github.com\/rmarscher\/virtual-module-webpack-plugin), though it's somewhat dangerous and there's more work to do to have imports from adjusted modules resolve correctly, I'm not really happy with this solution. Maybe there's a way to tweak change the locations in the sourcemaps for these files without needing to ask Webpack to treat them as entirely different disk files.\r\n\r\nI've pushed some ugly scratch work to https:\/\/github.com\/connor4312\/vue-loader","In https:\/\/github.com\/microsoft\/vscode-js-debug\/commit\/2f3c93a08df0ceb09eda86251d0309d34bfb26ef I introduced a heuristic that seems to work very well for plain Vue with JS files, where the path is different (as in the screenshot above). However, with `lang=\"ts\"` in vue components the path of the generated code is entirely indistinguishable from that of the generated code.\r\n\r\nE.g., only one of these is the right one:\r\n\r\n![](https:\/\/memes.peet.io\/img\/20-07-4e60d034-c849-4f82-b699-f9b5f1e52ad5.png)\r\n\r\nWithout doing some kind of source code analysis, which is complex and fragile, I can't deterministically tell which one is the 'right' script to map back to the file.","Would be neat to see this fixed as well. It's difficult to know which one is correct even as a human looking at Chrome Devtools :shrug: ","@znck let me know what you think a good solution is. We've gotten continued reports of people running into this with VS Code \ud83d\ude42 ","Looking forward to the fix","It's been almost 10 months with no indication of it being fixed...","@znck I would appreciate your input here. This continues to be a pain point for Vue users on VS Code. (most recently in https:\/\/github.com\/microsoft\/vscode-js-debug\/issues\/754)","It is quite tricky to make source maps and hot reload work simultaneously. I understand it's a huge pain point and I'll revisit it (hopefully coming weekend).","Awesome, let me know if I can help with anything","@znck @connor4312  Any movement on this issue? I can provide a project in early days that you can debug against ","> From the VS Code perspective, the user might ask us to set a breakpoint in a Vue file. We know which file the breakpoint is attached to on disk, and we need to figure out which loaded file that breakpoint gets mapped to. However, because all these paths are quite similar and all (in the context of a generic web app) possibly the file we want, we end up putting the breakpoint in the wrong file and breaking in the incorrect place. And often the supporting scripts evaluate before the 'real' script does, so we can't, for example, wait and pick the best match from the possible candidates.\r\n\r\nI've found a workaround which is to provide a custom function to webpack's `output.devtoolModuleFilenameTemplate` property which names component files according to which loaders are in use, i.e. if it is a `vue` file, the query is `type=script` and there are no additional loaders (e.g. `ts-loader`), then simply name the file `Component.vue` and breakpoints set in vscode work.\r\n\r\nThe following is only tested with `vue-loader@16` in a typescript without babel project:\r\n\r\n```js\r\noutput: {\r\n  devtoolModuleFilenameTemplate: info => {\r\n    if (info.allLoaders === '') {\r\n      \/\/ when allLoaders is an empty string the file is the original source\r\n      \/\/ file and will be prefixed with src:\/\/ to provide separation from\r\n      \/\/ modules transpiled via webpack\r\n      const filenameParts = ['src:\/\/']\r\n      if (info.namespace) {\r\n        filenameParts.push(info.namespace + '\/')\r\n      }\r\n      filenameParts.push(info.resourcePath.replace(\/^\\.\\\/\/, ''))\r\n      return filenameParts.join('')\r\n    } else {\r\n      \/\/ otherwise we have a webpack module\r\n      const filenameParts = ['webpack:\/\/']\r\n      if (info.namespace) {\r\n        filenameParts.push(info.namespace + '\/')\r\n      }\r\n      filenameParts.push(info.resourcePath.replace(\/^\\.\\\/\/, ''))\r\n      const isVueScript = info.resourcePath.match(\/\\.vue$\/) &&\r\n        info.query.match(\/\\btype=script\\b\/) &&\r\n        !info.allLoaders.match(\/\\bts-loader\\b\/)\r\n      if (!isVueScript) {\r\n        filenameParts.push('?' + info.hash)\r\n      }\r\n      return filenameParts.join('')\r\n    }\r\n  },\r\n}\r\n```\r\n\r\nThis assumes that a `.vue` file will only ever have one `<script><\/script>` element.\r\n\r\nAdditionally, for `vue-loader@16` (vue 3 users), an extra step is required so that source maps have the correct line numbering (due to the way newline handling prior to `<script><\/script>` is handled. `@vue\/compiler-sfc` requires `pad: true` but this isn't exposed anywhere by `vue-loader` so the function must be overridden until that functionality is added, i.e.\r\n\r\n```js\r\nconst CompilerSfc = require('@vue\/compiler-sfc')\r\nconst parse = CompilerSfc.parse\r\nCompilerSfc.parse = (source, options) => {\r\n  return parse(source, Object.assign({ pad: true }, options))\r\n}\r\n```\r\n\r\nI explain the reasoning behind the latter in a bit more detail in https:\/\/github.com\/vuejs\/vue-cli\/issues\/2897#issuecomment-788952677.\r\n\r\nWith those 2 changes, I'm able to set breakpoints in vscode and have execution pause at the correct place, including in async functions and timer callbacks, e.g. `setTimeout` and `setInterval`.\r\n\r\nI've created a minimal ts + vue 3 project to test with: https:\/\/github.com\/andrewmackrodt\/vue3-ide-breakpoint-test","@andrewmackrodt Thank you!\r\n\r\nFor anyone using vscode's debugger with this solution, you should also remember that to update the sourceMapPathOverrides in their launch config correspondingly.\r\nAs such:\r\n```json\r\n      \"sourceMapPathOverrides\": {\r\n        \"webpack:\/\/src\/*\": \"${webRoot}\/src\/*\",\r\n        \"src:\/\/src\/*\": \"${webRoot}\/src\/*\"\r\n      }\r\n```","@znck let me know what you think a good solution is. We've gotten continued reports of people running into this with VS Code and I remain more than happy to help get this fixed \ud83d\ude42","Beware that this code\r\n```js\r\nconst CompilerSfc = require('@vue\/compiler-sfc')\r\nconst parse = CompilerSfc.parse\r\nCompilerSfc.parse = (source, options) => {\r\n  return parse(source, Object.assign({ pad: true }, options))\r\n}\r\n```\r\nleads to huge bugs with latest versions of vue-loader (currently `16.8.3`, `17.0.0`, maybe a bit earlier). The most amazing is completely wrong source parsing, when even your variables names are splitted into several parts and then webpack complains `partial_var_name` is unknown :). But maybe it just me","Well, spend 4 hours trying to resolve this vue-sfc-debug-typescript issue. Finally only this helped https:\/\/github.com\/vuejs\/vue\/issues\/11023#issuecomment-789137369\r\nIn order to initially land breakpoint properly you also need to have:\r\n```\r\n      \"sourceMapPathOverrides\": {\r\n        \"webpack:\/\/src\/*\": \"${webRoot}\/*\"\r\n      }\r\n``` \r\n@andrewmackrodt you are genius, respect and many thanks for work done!","Thanks to everybody here, especially @andrewmackrodt  -- I owe you a beer (or beverage of your choice). [Your](https:\/\/github.com\/vuejs\/vue\/issues\/11023#issuecomment-789137369) `output.devtoolModuleFilenameTemplate` did the trick. (I didn't need the `@vue\/compiler-sfc`fix since I'm not using Vue 3).\r\n\r\nJust a few notes to help anybody else in my position. I'm working on a containerized project with Vue 2, manually configured (i.e. without vue-cli), using docker-compose and HMR. Also:\r\n\r\n  * vscode v1.65.2 (on macos)\r\n  * vue@2.6.14\r\n  * vue-loader@15.9.8\r\n  * webpack@5.70.0\r\n  \r\nWe have one repo, with the frontend in a subdirectory of the project root, and a `package.json` in that subdirectory, so\r\nsomething like this:\r\n```\r\nproject\r\n\u251c\u2500\u2500 backend-name\r\n\u2514\u2500\u2500 frontend-package-name\r\n    \u251c\u2500\u2500 package.json\r\n    \u2514\u2500\u2500 src\r\n        \u251c\u2500\u2500 App.vue\r\n        \u2514\u2500\u2500 components\r\n```\r\n\r\nWhen generating pathnames in the source map, vue-loader uses the package name (I think) at the root. After including the `output.devtoolModuleFilenameTemplate`, my source map pathnames look like this:\r\n\r\n`src:\/\/frontend-package-name\/src\/App.vue`\r\n\r\nAs a result, my path override is just:\r\n```\r\n      \"sourceMapPathOverrides\": { \r\n        \"src:\/\/*\": \"${webRoot}\/*\"\r\n      }\r\n```\r\n\r\nI recommend right-clicking on a filename in Chrome devtools (in the Sources tab's directory tree) and using **Copy link address** to see what you need for your sourceMapPathOverrides. Without this information I would have been lost.\r\n\r\nAlso, my vscode debug config is setup to attach to an already running chrome, launched from the command line with the `--remote-debugging-port=9222`. My `launch.json` is then:\r\n\r\n```\r\n    {\r\n      \"name\": \"Attach to Chrome\",\r\n      \"port\": 9222,\r\n      \"url\": \"http:\/\/localhost\/*\",\r\n      \"request\": \"attach\",\r\n      \"type\": \"pwa-chrome\",\r\n      \"sourceMapPathOverrides\": {\r\n        \"src:\/\/*\": \"${webRoot}\/*\"\r\n      }\r\n    },\r\n```\r\n\r\nOne final note: My webpack `devtool` is set to `eval-cheap-module-source-map`. This is probably something you don't have to worry about when you're using vue-cli, but I thought I'd mention it.\r\n\r\n\r\n","Hello All, \r\nI've a project in  vue 2.6.14, and I made it work only fully removing the propery name from package.json  and package-lock.json;\r\nThere's a question i answered in [stackoverflow](https:\/\/stackoverflow.com\/questions\/73211329\/vuejs-unbound-breakpoint-some-of-your-breakpoints-could-not-be-set-in-vscode) with details ","Connor Peet indicated I was experiencing this issue when he researched why I cannot set breakpoints in VS Code for my Vue3 app. \r\n\r\n[https:\/\/github.com\/microsoft\/vscode-js-debug\/issues\/1799]\r\n\r\n I just wanted to sound off here and say I spent many hours over several days trying to get breakpoint setting to work in VS Code. It gave me a pretty negative impression of the IDE. I'm glad I stuck with it and submitted the issue to you guys and learned that VS Code did indeed have an issue. \r\n\r\nI subsequently have migrated my project to Vite and as a result, no longer have the breakpoint setting issue. Apparently Vue3 with Vite does not suffer from the same issue. It took a few hours to migrate my project but it was worth it. Vite is fast!\r\n\r\nJohn"],"labels":["discussion","improvement"]},{"title":"Sometimes bubbling stops working on Safari","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/vue-safari-error-tg4mm](https:\/\/codesandbox.io\/s\/vue-safari-error-tg4mm)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nThe bug reproduction is quite specific, so please be patient\r\n\r\n- open \"App.vue\" in safari (my version is 13.0.4 (15608.4.9.1.3))\r\n- open the console so that you can watch the logs (the values \u200b\u200bof \"e.TimeStamp\" and \"attachedTimestamp\" from https:\/\/github.com\/vuejs\/vue\/blob\/dev\/dist\/vue.esm.js#L7549 are logged)\r\n- make sure that the variable \"WITH_GENERATE_NEW_VUE\" is false\r\n- wait a while. at least about a minute\r\n- click the \"Press me\" button several times to make sure that everything works. most likely, in the console there will be \"e.timeStamp, attachTimestamp 0 0\"\r\n\r\nNow the difficult and not completely clear part\r\n- change the value of the variable \"WITH_GENERATE_NEW_VUE\" to true\r\n- without reloading the browser page, click on the button\r\n- now, most likely, the log will change to something similar to \"e.timeStamp, attachedTimestamp 0 51478\"\r\n- this is Safari and \"e.timeStamp\" (the first number in the logs) is zero, but after some time or a few clicks, it will begin to grow and now until it becomes more than the value of \"attachedTimestamp\", the click will not work\r\n\r\n### What is expected?\r\nclick and method on it works\r\n\r\n### What is actually happening?\r\nin the above case, this check is not performed\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/dist\/vue.esm.js#L7549\r\n\r\n---\r\nThis is a specific situation - something like emulating an application in which there is a lot of legacy. different sections can be written on different technologies and sometimes this bug is caught when switching between sections. Unfortunately, I can\u2019t even suggest how this bug is related to the instantiation of a new vue, maybe this is a coincidence\r\n\r\nI think this can be fixed by adding \"e.target.contains (e.currentTarget)\" to the conditions specified in https:\/\/github.com\/vuejs\/vue\/blob\/dev\/dist\/vue.esm.js#L7549 but I don\u2019t know if this will not affect performance\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Seems to be result of a bug in safari. Basically, the event.timestamp should never be 0, and it seems to be for Safari. It's not in other browsers.\r\n\r\nSomeone else came across something similar in vanilla js:\r\n\r\nhttps:\/\/stackoverflow.com\/questions\/57744414\/safari-event-timestamp-is-0\r\n\r\nThis is the only info in that direction that i could find quickly.\r\n\r\n\r\nBasically, the event.timestamp should never be 0, and it seems to be for Safari. It's not in other browsers.","Yes, you are right, this is an error exclusively in safari, but the case with a zero value is taken into account in the conditions. https:\/\/github.com\/vuejs\/vue\/blob\/dev\/dist\/vue.esm.js#L7559\r\nThe error occurs when zero for some reason starts to grow","@LinusBorg as can I see you use [chain of next rules](https:\/\/github.com\/vuejs\/vue\/blob\/dev\/dist\/vue.esm.js#L7549):\r\n\r\n\/\/ crutch\r\n`e.target === e.currentTarget`\r\n\r\n\/\/ primary rule\r\n`e.timeStamp >= attachedTimestamp`\r\n\r\n\/\/ crutch\r\n`e.timeStamp <= 0`\r\n\r\n\/\/ crutch\r\n`e.target.ownerDocument !== document`\r\n\r\nOtherwise result is false, and event handler doesn't runs.\r\n\r\nIf you rely to timestamp rule why you not using `e.timeStamp >= attachedTimestamp` the first?\r\n\r\nRule `e.target === e.currentTarget` doesn't works in this case:\r\n\r\n```\r\n<button type=\"button\" v-on:click=\"myAwesomeHandler\">\r\n    <i class=\"fa fa-bars\"><\/I>&nbsp;Menu\r\n<\/button>\r\n```\r\n\r\nIn this case when i make click on icon the `e.target` and `e.currentTarget` will be different.\r\n\r\nI think the chain will should look like this:\r\n\r\n\/\/ primary rule\r\n`e.timeStamp >= attachedTimestamp`\r\n\r\n\/\/ crutch\r\n`e.timeStamp <= 0`\r\n\r\n\/\/ crutch when event started from handler - binded element\r\n`e.target === e.currentTarget`\r\n\r\n\/\/ crutch when event started from child element\r\n`e.currentTarget.contains(e.target)`\r\n\r\n\/\/ crutch\r\n`e.target.ownerDocument !== document`\r\n","I created the pull request https:\/\/github.com\/vuejs\/vue\/pull\/11031","in oppon, e.timeStamp size is 6,attachedTimestamp size is 13 .Event is alway no work .\r\n"],"labels":["browser quirks"]},{"title":"VSCode \"auto import\" of ESM module broken in 2.6.11 with umd namespace ","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/imgur.com\/a\/RxJz6fT](https:\/\/imgur.com\/a\/RxJz6fT)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nSince the 2.6.11 my IDE (VSCode) now suggest me import Vue from  the 'vue\/types\/umd' namespace instead of the ESModule 'vue'\r\n\r\nI'm using \r\nVue 2.6.11\r\nVue-CLI  4.1.0\r\nVScode 1.41.1\r\nTypescript 3.7.4\r\n\r\n### What is expected?\r\nPrior 2.6.11, VScode was suggesting to `import Vue from 'vue'` \r\n\r\n### What is actually happening?\r\nVSCode is suggesting me to `import Vue from 'vue\/types\/umd'` see screenshot\r\n\r\n---\r\nmaybe it's releated to https:\/\/github.com\/vuejs\/vue\/pull\/9912 ?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["You should import it from vue-property-decorator like `import { Component, Vue } from 'vue-property-decorator'`\r\n\r\nIt looks like Vue is automatically imported within VSCode as creating an empty vue file already allows you to use Vue with correct typings, so I imagine it would make sense for the IDE to not be able to import automatically. I don't know if this is something we can improve. @octref do you know if this is possible to change here or somewhere else?","Does this happen for TS file as well?","> Does this happen for TS file as well?\r\n\r\nyes","Then it's a typing\/TS server issue, not Vetur specific. #9912 does seem related, \/cc @ktsn.","I cannot reproduce it with the exact same versions of Vue, VSCode and TypeScript. Could you provide example project reproducing the issue as GitHub repo?","I reproduced it with the cli by creating a project with babel + ts and upgrading ts to its latest version (but it appears on 3.5.3 too)","> You should import it from vue-property-decorator like `import { Component, Vue } from 'vue-property-decorator'`\r\n> \r\n\r\nvue-property-decorator simply re-export a named Vue from the default export of the 'vue' package. There are a lot of case in typescript when you don't you use the decorator (in a Vuex store for example) and don't want to import Vue fromthe vue-property-decorator package (ie.  code splitting)\r\n\r\nI dont know if it's VSCode or TSServer related but the auto-import suggesting was always `import Vue from 'vue'`  prior 2.6.11 and that what we have everywhere our codebase. ","> I reproduced it with the cli by creating a project with babel + ts and upgrading ts to its latest version (but it appears on 3.5.3 too)\r\n\r\nThat's strange. I did the same thing while I tested it. Maybe editor config or some env specific things differentiate the behavior?\r\nIt does not suggest auto-import on my end even though I enabled auto-import config.\r\n<img width=\"783\" alt=\"Screenshot 2020-01-16 at 10 26 36 AM\" src=\"https:\/\/user-images.githubusercontent.com\/2194624\/72489034-1e01d180-3856-11ea-997c-d67ecd96caca.png\">\r\n","> > I reproduced it with the cli by creating a project with babel + ts and upgrading ts to its latest version (but it appears on 3.5.3 too)\r\n> \r\n> That's strange. I did the same thing while I tested it. Maybe editor config or some env specific things differentiate the behavior?\r\n> It does not suggest auto-import on my end even though I enabled auto-import config.\r\n> <img alt=\"Screenshot 2020-01-16 at 10 26 36 AM\" width=\"783\" src=\"https:\/\/user-images.githubusercontent.com\/2194624\/72489034-1e01d180-3856-11ea-997c-d67ecd96caca.png\">\r\n\r\nYou can try it directly in a .ts file , you should have auto-import","Can you please be **more precise**, for example, I did this and it doesn't reproduce for me:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/4033249\/72538559-4b627580-387e-11ea-8090-6b684ef679c9.png)\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/4033249\/72538692-7fd63180-387e-11ea-88ed-ca1959e04318.png)\r\n\r\n```bash\r\nmkdir foo\r\ncd foo\r\nyarn add vue vue-property-decorator\r\ntouch test.ts\r\ncode .\r\n```\r\n\r\n- Put below code into `test.ts`\r\n\r\n  ```ts\r\n  import { Component } from 'vue-property-decorator'\r\n\r\n  export default class Foo extends Vue {\r\n\r\n  }\r\n  ```\r\n\r\n- Have all extension diabled\r\n- Complete on `Vue`\r\n- I don't get the completion\r\n- I'm on VS Code 1.41.0, `vue` 2.6.11, `vue-property-decorator` 8.3.0","@octref from you example if you add Typescript you will have the auto-import suggesting by clicking on the \ud83d\udca1  from VSCode.\r\n\r\nhere's how i reproduced it using minimal deps (not the vue-cli)\r\n```\r\nmkdir foo\r\ncd foo\r\nyarn add typescript vue vue-property-decorator\r\nnpx tsc --init --module \"ES6\" --lib \"ES6\" --target \"ES6\" --types \"vue\" --moduleResolution \"Node\"\r\ntouch TestVue.ts\r\ncode .\r\n```\r\n\r\ninside TestVue.ts\r\n```\r\nconst component:Component = Vue.extend({});\r\n```\r\n\r\nThe named import work i still get the suggestion to import from 'vue'\r\n\r\n![NamedImport](https:\/\/user-images.githubusercontent.com\/581365\/72545582-3e7e5b80-3857-11ea-9550-6e7e153ba1f5.jpg)\r\n\r\nBut the default import do not appear\r\n![DefaultImport](https:\/\/user-images.githubusercontent.com\/581365\/72545677-64a3fb80-3857-11ea-88a9-df8871a36bea.jpg)\r\n\r\nIf i revert back to 2.6.10 i get the correct suggestion from the 'vue'\r\n![DefaultImport2610](https:\/\/user-images.githubusercontent.com\/581365\/72545823-a765d380-3857-11ea-934f-3183f6d998e8.jpg)\r\n\r\n\r\nMaybe it's a TSServer issue \ud83d\ude15 .. but because some of my dev on my team just use the suggested import regardless, i had to revert back to 2.6.10 \r\n","Thanks, I can repro now, but this is not a Vetur problem, but a Vue types \/ TS Server issue."],"labels":["typescript"]},{"title":"fix: Cannot read property 'isString' of undefined (it happend that ch\u2026","body":"\u2026idren is [undefined])\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","comments":["Can you please provide a repro of the bug?"],"labels":["need repro"]},{"title":"Should `fill` and `copyWithIn` methods be intercepted (observed) now ?","body":"### What problem does this feature solve?\r\n`fill` and `copyWithIn` methods are also mutating methods and has Standard status currently [ECMAScript 2015 Language Specification \u2013 ECMA-262 6th Edition - copywithin](https:\/\/www.ecma-international.org\/ecma-262\/6.0\/#sec-array.prototype.copywithin) , but they aren't being intercepted in https:\/\/github.com\/vuejs\/vue\/blob\/237294d88f65d65dcb790246394f1d37d64856a0\/src\/core\/observer\/array.js#L11-L19. Should they join now ? \r\n\r\n### What does the proposed API look like?\r\nnull\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Is this something I could work on?","Sure @abrahamguo ","\r\n\r\nThey wrote such an answer. I hope it can help.\r\n\r\nhttps:\/\/www.answerdeveloper.com\/questions-answers\/vue-questions\/should-fill-and-copywithin-methods-be-intercepted-observed-now\r\n\r\n\r\nThe fill and copyWithin methods are array methods that modify the elements of an array in place. In Vue.js, the array.js file you mentioned contains code that patches certain array methods (such as push, pop, shift, unshift, splice, sort, and reverse) in order to make them reactive, so that changes to the array are detected and trigger updates in the view.\r\n\r\nIt looks like the fill and copyWithin methods are not currently being intercepted in array.js. This means that changes made using these methods will not be detected by Vue.js and will not trigger updates in the view.\r\n\r\nIf you want the fill and copyWithin methods to be reactive in your Vue.js application, you can add them to the list of methods that are intercepted in array.js.\r\n\r\nTo do this, you can modify the methodsToPatch array in array.js to include fill and copyWithin.\r\n\r\nFor example:\r\n\r\n```\r\n\r\nconst methodsToPatch = [\r\n  'push',\r\n  'pop',\r\n  'shift',\r\n  'unshift',\r\n  'splice',\r\n  'sort',\r\n  'reverse',\r\n  'fill',\r\n  'copyWithin'\r\n]\r\n```\r\n\r\nWith this change, the fill and copyWithin methods will be intercepted and changes made using these methods will be detected by Vue.js and trigger updates in the view."],"labels":["feature request","discussion"]},{"title":"serverPrefetch rejection with no value creates broken response","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[http:\/\/sorry-no-can-do.com](Sorry, I don't have time to setup a reproduction case for SSR, that's not a 5 minute thing).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Use SSR\r\n2. Add a `serverPrefetch` with `return Promise.reject()`\r\n\r\n### What is expected?\r\nAn error to occur due to the rejection in `serverPrefetch`\r\n\r\n### What is actually happening?\r\nNo error occurs, but the rendered result will not contain the component with the bad `serverPrefetch`.\r\n\r\n---\r\nCurrently, rejecting a promise in `serverPrefetch` with no value will create a broken response from SSR. By broken I mean that no error will occur with `renderToString`, so it looks like it was successful, but the rendered DOM may be missing components, including the root component all together.\r\n\r\nThis is because the rejection value from `serverPrefetch` is wired straight through to the `done` callback on `render`, but that callback only considers an error to have occurred if a value is provided. Due to this straight wiring, any `serverPrefetch` which rejects without a value will allow rendering to continue, but will skip the rendering of the component on which the error occurs. If that's the root component, the rendered result has no element for hydration to use in the rendered result, which means there's no way for the client to recover. For a real-life example of this, see vuejs\/vue-apollo#901.\r\n\r\nHere's the relevant code, the `done` callback for `render`:\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/42fdf3f8378e5dc379808a4fa67b39c4a74ae191\/src\/server\/create-renderer.js#L84-L87\r\n\r\nAnd where the rejection value from `serverPrefetch` is wired through:\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/42fdf3f8378e5dc379808a4fa67b39c4a74ae191\/src\/server\/render.js#L65\r\n\r\nA fix could be as easy as expanding that `catch` to check for `err` and provide a default value if one is not provided. I'm punting on what that default would be, so I'm opening this as an issue rather than a PR.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["As a workaround, providing an error to `Promise.reject` should solve the problem. In practice, not providing a reason for a promise rejection is confusing for the developer themselves.\r\nI think the fix you propose is good. We could use a `new Error('Missing rejection reason in serverPrefetch')`","> As a workaround, providing an error to `Promise.reject` should solve the problem.\r\n\r\nYes, but any component library or plugin can provide a `serverPrefetch`, so it's often not in the developer's control to work around. See the `vue-apollo` example.\r\n\r\n> We could use a new `Error('Missing rejection reason in serverPrefetch')`\r\n\r\nSeems reasonable to me.","@posva, is there anything more that needs to be done here? I can open a PR with that rejection reason if that's all that needs to be done.","@dsanders11   I am having the same bug and not sure how to fix it exactly, as it randomly breaks my blog page built by vue, when the promise returning might sometimes delayed. Can you please help? \r\nThanks in advance for your time!  "],"labels":["improvement","has workaround"]},{"title":"Event bubbling does not trigger on older iOS devices","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\nhttps:\/\/github.com\/chenjiahan\/vue-event-bubble-issue\r\n\r\n\r\n### Steps to reproduce\r\nThis is a browser quirk on iOS <= 11.3\r\n\r\n1. Find an old iOS device. (I reproduced the issue on an iOS 8.4 device)\r\n2. Binding click events on parent and child elements\r\n3. Click child element\r\n4. Event listener for parent element is not firing\r\n\r\n### What is expected?\r\nCorrect event bubbling behavior\r\n\r\n### What is actually happening?\r\nMobile safari has buggy event.timeStamp implementations, the value of event.timestamp is abnormal when the page is first loaded. But event.timestamp will return to normal value after refreshing the page.\r\n\r\nWe receive a lot of [feedback from vant users](https:\/\/github.com\/youzan\/vant\/issues\/3015), it is currently observed that the problem may occur on iOS 8.4\u300110.2\u300110.3\u300111.3 (mobile safari and wechat browser)\r\n\r\nScreenshot: \r\n![](https:\/\/img.yzcdn.cn\/vant\/vue-bubble-log-code.png)\r\n\r\n![](https:\/\/img.yzcdn.cn\/vant\/vue-bubble-log-info.jpeg)\r\n\r\n---\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Tested on iOS 8, iPhone 6 Plus and it works fine:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" \/>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" \/>\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" \/>\r\n    <title>Document<\/title>\r\n\r\n    <style>\r\n      #app {\r\n        font-family: 'Avenir', Helvetica, Arial, sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n        text-align: center;\r\n        color: #2c3e50;\r\n        margin-top: 60px;\r\n      }\r\n\r\n      .father {\r\n        width: 300px;\r\n        height: 300px;\r\n        background-color: red;\r\n      }\r\n\r\n      .child {\r\n        width: 100px;\r\n        height: 100px;\r\n        background-color: blue;\r\n      }\r\n    <\/style>\r\n  <\/head>\r\n\r\n  <script src=\"https:\/\/unpkg.com\/vue\"><\/script>\r\n\r\n  <body>\r\n    <div id=\"app\">\r\n      <div class=\"father\" @click=\"onClickFather\">\r\n        Father\r\n        <div class=\"child\" @click=\"onClickChild\">Child<\/div>\r\n      <\/div>\r\n\r\n      <ul>\r\n        <li v-for=\"event in events\">{{ event }}<\/li>\r\n      <\/ul>\r\n    <\/div>\r\n\r\n    <script>\r\n      new Vue({\r\n        el: '#app',\r\n        data: { events: [] },\r\n        methods: {\r\n          onClickFather: function() {\r\n            this.events.push('father')\r\n            console.log('father clicked')\r\n          },\r\n          onClickChild: function() {\r\n            this.events.push('child')\r\n            console.log('child clicked')\r\n          },\r\n        },\r\n      })\r\n    <\/script>\r\n  <\/body>\r\n<\/html>\r\n```\r\n\r\nNext time, please provide a runnable repro for the target device, code sandbox doesn't run on iOS 8","@posva Sorry about the codesandbox link, this is the a repository that reproduced the problem:\r\n\r\nhttps:\/\/github.com\/chenjiahan\/vue-event-bubble-issue\r\n\r\nThe timeStamp is only incorrect in some cases. I am now looking for a way to reproduce the problem steadily, and found some possible related links:\r\n\r\n- https:\/\/github.com\/ftlabs\/fastclick\/issues\/549\r\n- https:\/\/github.com\/zilverline\/react-tap-event-plugin\/issues\/19\r\n- https:\/\/stackoverflow.com\/questions\/26177087\/ios-8-mobile-safari-wrong-timestamp-on-touch-events","event.timeStamp is unreliable, maybe we should use some alternatives.","Thanks for the extra links! Let's keep this open in case someone manage to reproduce it more consistently or even do a PR to fix it","@posva `event.timestamp` on safari devices  in some cases is more then 0 but less then attachedTimestamp.\r\n\r\nIt seems, that current issue is similar to [issue](https:\/\/github.com\/vuejs\/vue\/issues\/11014).\r\n\r\nTo resolve safari timestamp behavior, rule `e.target === e.currentTarget` is used.\r\n\r\nBut the rule, doesn't work when event started from child element.\r\n\r\nI make [PR](https:\/\/github.com\/vuejs\/vue\/pull\/11031), but still no response."],"labels":["need repro","browser quirks"]},{"title":"Inline style binding is NOT corporate with web standard","body":"### Version\r\n2.6.11\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/thirsty-heisenberg-elvz6?fontsize=14&hidenavigation=1&theme=dark](https:\/\/codesandbox.io\/s\/thirsty-heisenberg-elvz6?fontsize=14&hidenavigation=1&theme=dark)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. open the repo\r\n2. check the style of the green box\r\n\r\n### What is expected?\r\nThe green div's height should be 101px\r\n\r\n### What is actually happening?\r\nthe green div's height is 22px, cause inline style didn't work on this component\r\n\r\n---\r\nI check the web standard that if I assigned a string to a node's style with either `\"node.style.cssText\"` or add style directly in devtools with this `\"height: 100px; height:\" `,  the final height will be 100px. Obviously the invalid \"height: \" will be abandoned. \r\nThen I check the source code and find that the function `parseStyleText`  only uses regex to split the string and then assign it to result from value by value, no matter what the value is or if the value is valid. That is why the green box's height is incorrect.\r\nThen I create a PR try to fix this issue in web rendering but not in SSR.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["improvement"]},{"title":"slot fallback content is always rendered even when not used","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/vue-test-default-slot-always-exec-syuny](https:\/\/codesandbox.io\/s\/vue-test-default-slot-always-exec-syuny)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nwhen computed props or method  declared in slot fallback , looks like this: \r\n\r\n```\r\n\/\/ XXX component\r\n\r\n<slot>\r\n       no render, but always run {{p}}, {{print()}} <Func\/> \r\n<\/slot>\r\n\r\n\/\/ use it \r\n<XXX>\r\n actual replaced content \r\n<\/XXX>\r\n```\r\n\r\n\r\n### What is expected?\r\ncomputed and method not  invoked , because they can't  render \r\n\r\n### What is actually happening?\r\ncomputed is invoked once change.\r\nmethod is invoked once render .\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This is expected behavior, methods get executed at every render","On a second thought, maybe this could optimized when compiling the template: https:\/\/template-explorer.vuejs.org\/#%3Cdiv%20class%3D%22hello%22%3E%0A%20%20%20%20%7B%7Bmsg%7D%7D%20%0A%20%20%20%20%20%3Cslot%3E%0A%20%20%20%20%20%20%20no%20render%2C%20but%20always%20run%20%7B%7Bp%7D%7D%2C%20%7B%7Bprint()%7D%7D%20%3CFunc%2F%3E%0A%20%20%20%20%20%3C%2Fslot%3E%0A%20%20%3C%2Fdiv%3E\r\n\r\nA workaround is to wrap the slot fallback with an if:\r\n\r\n```html\r\n<slot>\r\n  <template v-if=\"!$slots.default\">\r\n       no render, but always run {{p}}, {{print()}} <Func\/>\r\n  <\/template>  \r\n<\/slot>\r\n```","ye, $slots.default works sometimes. but if component use scopedSlots,  the $slots.default is undefined . \r\n","If the component uses scoped slots, I think you can use `$scopedSlots`:\r\n```html\r\n<slot :data=\"data\">\r\n  <template v-if=\"!$scopedSlots.default\">\r\n       no render, but always run {{p}}, {{print()}} <Func\/>\r\n  <\/template>  \r\n<\/slot>\r\n```","Hi @posva. Looking at the documentation around [fallback content in Vue it says specifically](https:\/\/vuejs.org\/v2\/guide\/components-slots.html#Fallback-Content):\r\n\r\n> Fallback Content\r\n> There are cases when it\u2019s useful to specify fallback (i.e. default) content for a slot, **to be rendered only when no content is provided**.\r\n\r\nthat the provided content is rendered only when no content is provided. This contradicts what is happening here - content is being provided but the fall-back is still being rendered along with its method calls.\r\n\r\nAlso the behaviour seems arbitrary: computed properties and (non-functional) components in the fallback content aren't rendered\/called, yet the methods still are. It's confusing to know what to expect out of fallback content in terms of overhead; if I have an expensive method being run in the fallback content, I wouldn't expect it to still run if something is slotted over it.\r\n\r\nI think the documentation might need to be updated to clarify this."],"labels":["improvement","has workaround"]},{"title":"v-once on template not working inside a v-for in two cases","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/xiangyuecn\/pen\/eYmmPNP](https:\/\/codepen.io\/xiangyuecn\/pen\/eYmmPNP)\r\n\r\nmoved from https:\/\/github.com\/vuejs\/vue\/issues\/10892\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\nThe repro adds entries to an array, causing a re render that. The template intentionally displays the elapsed time to see which v-once work and which do not\r\n\r\n### What is expected?\r\n\r\nAll v-once to never render again\r\n\r\n### What is actually happening?\r\n\r\nTest 3 first template with a `v-once` re renders all the time. **Workaround** is to append an empty `span`: `<template v-once>[{{ getTime() }}] {{ obj.msg }}<span\/><\/template>`\r\nTest 5: the second template with `v-once` still rerenders. **Workaround** is to use a different tag like a span or use the `v-once` on the parent.\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["bug","has workaround"]},{"title":"When v-show render instruction is passed a reference object, the instruction will not work","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/SamirGuo\/pen\/vYBezXz](https:\/\/codepen.io\/SamirGuo\/pen\/vYBezXz)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n```html\r\n<div id=\"app\">\r\n<template>\r\n  <div>\r\n    <button @click=\"visible = !visible\">\u663e\u793a\/\u9690\u85cf<\/button>\r\n    <my-component :visible=\"visible\" style=\"border-bottom: solid 1px #ccc\" \/>\r\n  <\/div>\r\n<\/template>\r\n<\/div>\r\n```\r\n```js\r\nconst directive = {\r\n    name: 'show',\r\n    value: true\r\n};\r\n\r\nVue.component('MyComponent', {\r\n    props: {\r\n        mystyle: '',\r\n        visible: true\r\n    },\r\n    render(h) {\r\n        directive.value = this.visible;\r\n        return h('div', {\r\n            \/\/ do not work!\r\n            directives: [directive],\r\n            \/\/ work well!\r\n            \/\/ directives: [{\r\n            \/\/     name: 'show',\r\n            \/\/     value: this.visible\r\n            \/\/ }],\r\n            domProps: {\r\n                innerText: 'sssssss'\r\n            },\r\n            style: this.mystyle\r\n        });\r\n    }\r\n});\r\n\r\n\r\nvar Main = {\r\n    data() {\r\n      return { \r\n        visible: true\r\n      };\r\n    }\r\n  };\r\nvar Ctor = Vue.extend(Main)\r\nnew Ctor().$mount('#app')\r\n```\r\n### What is expected?\r\n\r\nv-show to be applied\r\n\r\n### What is actually happening?\r\n\r\nv-show isn't applied\r\n\r\n---\r\nWhen the instruction update logic assigns oldValue, oldVnode.data.directives [\"show\"] and vnode.data.directives [\"show\"] are actually the same object.\r\nSo dir.oldValue = oldDir.value is actually equivalent to dir.oldValue = dir.value; in the later update event, dir.oldValue === dir.value\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["You can just spread the global object: `[{...directive}],`. What is the use case for a shared directive object?","Thank you. But my components are dynamically generated from a library. We are passing in data, so there is no way to deconstruct it during generation.","Okay, so in your case, the code must be fixed in the library but what is the use case for a shared directive object?","Thanks for your response. This scenario was temporarily solved by hacking. However, this problem does exist. May be possible to consider whether there is a solution in Vue.","Okay, I'm glad you found a solution for it :)\r\nIs there a specific condition that forces you to use a shared directive declaration instead of creating a directive declaration inside of the `render` function like in the workaround I gave you?","\/\/ component is dynamically created by config. \r\n\r\nrender() {\r\n  ......\r\n  return (\r\n      <component\r\n        {...config}\r\n      >\r\n        { this.renderChild() }\r\n      <\/component>\r\n    );\r\n}","@posva I started, too look into this. This is happening because the render function is returning a reference and not creating a new value. One solution is to just copy the value from the directive after,  vnode = render.call(vm._renderProxy, vm.$createElement) in render.js line 91, so something like vnode.data.directives[0].value = JSON.parse(JSON.stringify(vnode.data.directives[0].value)) and you would of course iterate over the list. That would work, but, doing it for directives seems like an odd special case. Do you know of a sensible way to copy all of the data into the new vnode,instead of just returning the results from the render function?","it almost seems to me like the memento pattern might be appropriate here.\r\n","This still needs a use case:\r\n\r\n> Is there a specific condition that forces you to use a shared directive declaration instead of creating a directive declaration inside of the `render` function like in the workaround I gave you?","Note that the moment you return a VNode object from a render function, Vue.js claims ownership of objects you passed in to the `createElement` function, and some properties like `on`, `attrs` could even be modified."],"labels":["discussion","has workaround"]},{"title":"support computed as arrow function in typescript","body":"### What problem does this feature solve?\r\ntransform a project which has used lots of  ' xxx: vm => vm.prop ' as computed options to typescript easier\r\n\r\n### What does the proposed API look like?\r\nchange vue\/types\/options.d.ts type Accessors<T> to \r\n\r\n```ts\r\nexport type Accessors<T> = {\r\n  [K in keyof T]: (() => T[K]) | ComputedOptions<T[K]> | ((vm: any) => T[K])\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["typescript"]},{"title":"fix: mergeHook when parentVal is not an array","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [x] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n\r\nThis is related to a [vue-router issue](https:\/\/github.com\/vuejs\/vue-router\/issues\/3004).\u2028\u2028\r\n\r\nA bit of context: \r\n\r\nVueRouter comes with 3 hooks (beforeRouteEnter, beforeRouteLeave, beforeRouteUpdate).\r\nThe merging strategy to deal with inheritance with these hooks is defined in src\/install.js in VueRouter.\r\nThe chosen strategy is mergeHook (in vue\/src\/core\/util\/options.js, the same as the created hook of Vue).\r\n\r\nAs you can see in the code, mergeHook is expecting a different type parentVal or childVal. If parentVal ends up not being an array, the code crashes.\r\n\r\nThe fix we propose is to put parentVal into an array before calling concat, if parentVal is not an array.\r\n","comments":[],"labels":["priority: high"]},{"title":"Class Binding Type Missing","body":"### What problem does this feature solve?\r\nWhen writing a computed property for a class binding, I found I couldn't type it for typescript.\r\nI made a temporary one and remembered, there are more possibilities, so instead of writing them myself, I thought best to use the built in ones.\r\nYet I can't seem to find a built in one. Am I being really dense and they are actually there right in front of my nose and I can't see them?\r\n\r\nAt any rate, I have wrote my own as \r\n```\r\nexport type VueClassBinding = string | readonly string[] | {\r\n  readonly [className: string]: boolean,\r\n};\r\n```\r\nAm I missing anything?\r\nIs it possible someone can add this to the typings?\r\n\r\n### What does the proposed API look like?\r\n```\r\n...\r\ncomputed: {\r\n  inputClassList(): VueClassBinding {\r\n    if ( Math.random() > .5 ) return 'my-class-name';\r\n    if ( Math.random() > .5 ) return ['my-class-name'];\r\n    return {\r\n      'my-class-name': true,\r\n    };\r\n  }\r\n}\r\n...\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["discussion","typescript"]},{"title":"Allow accessing events registered via `vm.$on(...)` via a property, similar to `$listeners`","body":"### What problem does this feature solve?\r\n\r\nCurrently, if an event is registered via `vm.$on('event-name', handler)`, it does not appear in the `this.$listeners` object (Vue 2.6.x)\r\n\r\nIn some instances you only want to handle the event processing if there is indeed a listener registered (for performance reasons).  But when component event listeners are registered programatically via `this.$on` (or `vmReference.$on`) it is not currently possible to see them in `this.$listeners`, e.g.:\r\n\r\n```js\r\nif (this.$listeners['event-name']) {\r\n  \/\/ Do something computationally intensive\r\n  \/\/ then emit event\r\n  this.$emit('event-name', resultOfComputation)\r\n}\r\n```\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/2781561\/68885711-1013c100-06ec-11ea-8c4b-a447d3612629.png)\r\n\r\n### What does the proposed API look like?\r\n\r\nNo new API for the public.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["It makes sense not to have listeners registered via `$on` onto `$listeners` as those are usually passed via `v-on` by the parent and can be relayed to an element of the component with `v-on=\"$listeners\"`. It could be on a different object but why should this be added to Vue while it can be handled in user land easily by extending `Vue.$prototype.on`?","The case is where the application dynamically adds a listener after the instance has initialized (and may remove it later).\r\n\r\nAnd there doesn't appear to be any way to determine if a custom event listener has been added dynamically via `vm.$on(...)` (and when removed via `vm.$off(...)`).\r\n\r\nIn our use case, when a certain prop is set to `true`, the listener handler is instantiated on demand, and when the prop is false the listeners are removed.\r\n\r\nI don't think modifying the prototype would help in this situation.\r\n\r\nAdding a separate property would help if it isn't possible to place all the registered event listeners in the same object.","I suppose we could check the private object `vm._events`, which does have the the listeners from both `v-on` and `vm.$on(..)` registered (and check the array length), but since that is not a \"public\" API it wouldn't be as clean.","By modifying the prototype you could add those events to a custom property like $onListeners \n\nEduardo San Martin Morote\n\n> On 15 Nov 2019, at 20:00, Troy Morehouse <notifications@github.com> wrote:\n> \n> \ufeff\n> The case is where the application dynamically adds a listener after the instance has initialized (and may remove it later).\n> \n> And there doesn't appear to be any way to determine if a custom event listener has been added dynamically via vm.$on(...) (and when removed via vm.$off(...)).\n> \n> In our use case, when a certain prop is set to true, the listener handler is instantiated on demand, and when the prop is false the listeners are removed.\n> \n> I don't think modifying the prototype would help in this situation.\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n"],"labels":["discussion"]},{"title":"vue-template-compiler module types do not express the correct optional properties","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/vue-template-compiler-module-type-bug-wl0wn](https:\/\/codesandbox.io\/s\/vue-template-compiler-module-type-bug-wl0wn)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nIssue is surfaced by CodeSandbox' typescript linter - just load the sandbox.\r\n\r\n\r\n### What is expected?\r\nvue-template-compiler should accept modules with **0 or more** of the following properties:\r\n- `preTransformNode`\r\n- `transformNode`\r\n- `postTransformNode`\r\n- `genData`\r\n\r\n### What is actually happening?\r\nvue-template-compiler _requires_ modules to have all `transform` functions and `genData` defined. \r\n\r\n![codesandbox typescript error](https:\/\/puu.sh\/ECk1R\/7a7236e09e.png)\r\n\r\n---\r\nRan into this while developing a custom template compiler module. It doesn't effect output or compiler functionality in any way, but it does impact developer experience.\r\n\r\nFixed by #10743\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["typescript"]},{"title":"Computed Setter Does Not Work In Scoped Slot","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/jameswee\/pen\/BaaxLmE](https:\/\/codepen.io\/jameswee\/pen\/BaaxLmE)\r\n\r\n### Steps to reproduce\r\n1. Create computed setter in parent and pass it into scoped slot\r\n2. Attach computed setter via scoped slot into child's v-model\r\n3. Test\r\n\r\nA working example is available if you comment out line 2 and uncomment line 3. \r\n\r\n### What is expected?\r\nEditing the input box should trigger the alert function\r\n\r\n### What is actually happening?\r\nEditing input box isn't triggering the computed setter.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This is inherent to how reactivity works in Vue (by setting reactive keys in objects) and how slots receive the data as parameters in a function.\r\nTo make it work, you would have to wrap the variable in some kind of container that has reactive keys: \r\n\r\n```js\r\nconst parent = Vue.component('parent', {\r\n  template: '<div><slot :container=\"fooContainer\" \/><\/div>',\r\n  \r\n  computed: {\r\n    foo: {\r\n      get: function() {\r\n        return \"foo\";\r\n      },\r\n      set: function(value) {\r\n        alert(value);\r\n      }\r\n    },\r\n    fooContainer() {\r\n      const o = {}\r\n      Object.defineProperty(o, 'foo', {\r\n        get: () => this.foo,\r\n        set: foo => this.foo = foo\r\n      })\r\n      return o\r\n    }\r\n  }\r\n})\r\n\r\nnew Vue({\r\n  el: '#app',\r\n  components: {\r\n    parent\r\n  },\r\n  template: `\r\n    <parent>\r\n      <template #default=\"{ container }\">\r\n        <input v-model=\"container.foo\" \/>\r\n      <\/template>\r\n    <\/parent>`,\r\n})\r\n```\r\n\r\nFor it to work without containers, we would have to make the object you named `slot` reactive but that would add a cost for every slot usage and I think that would impact more users than it helps","Hmmm, this is tricky isn't it. At first glance it's really hard to understand the usage of `fooContainer` function, which eventually makes the code really hard to review. \r\n\r\nIt'll be nice if there's a way to make these a bit more consistent. I wonder if this will be addressed in v3 ?"],"labels":["discussion"]},{"title":"Fix #9847 Add shouldRenderAsyncScripts option","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [x] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","comments":["@yyx990803 Please look to this at affection :pray: :heart_eyes:","Hi guys, this is super important for performance. Do we have any ETA? Thanks :) ","Would be really great to see this one pushed through, this feature is very important to reduce Javascript load in front end, which will be a big boost to SEO","Any update on when this feature will be available? \r\nWe are using lazy hydration it will be a huge plus to not load the not needed bundles at first.","+1 for this - would speed out Vue\/Nuxt applications greatly. Any updates on when somebody pushes the merge button?","C'mon guys @jeanphilippeds did all the hard work on this one, it shouldn't even be that hard a merge as it's an optional boolean, can we get this in soon?","Can we merge this please? <3","WE WANT THIS! WE WANT THIS! WE WANT THIS! WE WANT THIS! \r\nWE WANT THIS! WE WANT THIS! WE WANT THIS! WE WANT THIS! ","PLEASE <3","please","yeah this would allow great performance improvements!","For everyone who is using nuxt, here is a workaround: https:\/\/github.com\/vuejs\/vue\/issues\/9847#issuecomment-626154095","@yyx990803 @posva @Akryum @Kingwl @LinusBorg Can we merge it please ? \ud83d\ude4f\r\n\r\n@jeanphilippeds Did a very usefull work here !","I wonder what's keeping us from merging this with latest release? How can I help?","Guys, any news? how can we help? Sice google Web Vitals now scan more for unused code, this would help greatly.","We currently focus all our efforts on bringing Vue 3 and its supor libs into RC stage.\r\n\r\nPlease understand that we currently have less bandwidth for Vue 2, and improvements such as this are currenty not a the very top of the list.\r\n\r\nWe will ge back to Vue 2 and do a round of bug fixes and improvements as soon as our bandwidth allows.","@LinusBorg Fully understandable. Can't wait for vue 3. However, is this fix expected to hit Vue 3 as well?","Man, this is killing me waiting for this! \r\n\r\n@jeanphilippeds, well done! Gutted it still hasn't made it's way in 7 months later","Hi, @LinusBorg, any progress on this? We are still waiting. It is even harder to get nice score after last PageSpeed Insights update.\r\n","Hi guys, there are still projects on Vue 2, can someone merge this, please? It really became a problem with new versions of Google Lighthouse.","can we merge this please?","How can I help getting this merged?","Is there any chance that this RP will be merged, as it has been over 3 years now."],"labels":["feat:ssr"]},{"title":"Trigger a warning when v-show and other incompatible directives are used on <template>","body":"### What problem does this feature solve?\r\nHi,\r\n\r\nI lost quite some time trying to figure out when my code didn't work.\r\nThe error was on my part, not vue, but i think Vue should trigger an error in this case.\r\n\r\nThe problem is that you CANNOT use `v-show` on a `<template>` tag, which make sense since `v-show` add inline style to the node and the `<template>` tag does not render a node.\r\n\r\n### What does the proposed API look like?\r\nA Vue warning\/error should suggest changing the `v-if` (if possible) or change the `<template>` tag for a DOM element (like a `<div>`)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["discussion","warnings"]},{"title":"Add non-passive event modifier","body":"### What problem does this feature solve?\r\nAn event modifier to support `passive` events was added in #5132.\r\n\r\nIn the last couple of years, browsers have adopted the `passive` behavior by default for `touchstart` and `touchmove` events ([reference](https:\/\/www.fxsitecompat.dev\/en-CA\/docs\/2018\/touch-event-listeners-are-now-passive-by-default-making-scrolling-faster-on-mobile\/)). Thus, to be able to cancel one of these events by calling `e.preventDefault()`, you need to explicitly pass `{ passive: false }` when adding the event listener.\r\n\r\nWith the current API this is impossible to achieve in a Vue template (as far as I can tell). You must manually add and remove the event listener in a component hook like so:\r\n\r\n```js\r\nthis.$refs.someElement.addEventListener('touchstart', this.start, { passive: false });\r\nthis.$refs.someElement.addEventListener('touchmove', this.move, { passive: false });\r\n\r\n\/\/ later\r\nthis.$refs.someElement.removeEventListener('touchstart', this.start);\r\nthis.$refs.someElement.removeEventListener('touchmove', this.move);\r\n```\r\n\r\n### What does the proposed API look like?\r\nAn event modifier that does the opposite of the `passive` event modifier, specifying the option as `false` instead of `true`.\r\n\r\nUnsure of the naming - perhaps `nonPassive`, `active`, `assertive`, `intentional`.\r\n\r\n```html\r\n<div\r\n  @touchstart.active=\"start\"\r\n  @touchmove.active=\"move\"\r\n><\/div>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["In [`vue\/src\/core\/vdom\/helpers\/update-listeners.js:22`](https:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/core\/vdom\/helpers\/update-listeners.js#L22), `normalizeEvent` always returns an object with a set `passive` property.\r\n\r\nI\u2019m not familiar with Vue\u2019s source code, but does that mean that when the `.passive` modifier is not present, each event handler is **always declared as active**? This seems wrong in the light of browser\u2019s changing the default for certain event types to be passive by default (see [Improving scrolling performance with passive listeners](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/EventTarget\/addEventListener#Improving_scrolling_performance_with_passive_listeners)). If `.passive` is not present, I don\u2019t expect event handlers to be marked as not passive.\r\n\r\nWith regards to the feature request itself, I think \u201cactive\u201d would be a natural choice here.","nonPassive seems like the more logical opposite of passive.\r\nJust wondering what wins if you do\r\n```\r\n@scroll.passive.nonPassive=\"...\"\r\n```\r\nvs\r\n```\r\n@scroll.nonPassive.passive=\"...\"\r\n```\r\nAny difference at all? which one wins?\r\nIf neither is passed, I believe passive should be left as undefined.","Any1 figure out a workaround to this?  touchstart & conditionally setting preventDefault in the running code doesn't seem to work to cancel the event.","In Vue 3, the following code generates a \"passive : false\" event listener attached to that `div`.\r\n\r\n```\r\n<div\r\n  @touchstart=\"function\"\r\n><\/div>\r\n```","I think vue need this feature, otherwise modern browser will report tons of warnings, now edge\/chrome need set the passive to true or false explictly in the addEventListener for some events, for example, touchstart, wheel and so on, otherwise it will report warnings, it is already disaster for me, I don't have easy way to solve it.\r\n\r\n<img width=\"562\" alt=\"image\" src=\"https:\/\/user-images.githubusercontent.com\/7458444\/203750845-5a07bda0-3c67-4c1b-9bb5-d8f83ac88be4.png\">\r\n\r\nHere is my code clip:\r\n\r\n```\r\n    ...\r\n    <div v-if=\"img.focused == true && img.selected == false\" class=\"photo_selection\" \r\n            v-on:click=\"on_toggle_photo_checkbox(img, true, $event, imgTypePos + start_list_idx_in_vw)\"\r\n            v-on:touchstart.prevent=\"on_toggle_photo_checkbox(img, true, $event, imgTypePos + start_list_idx_in_vw)\">\r\n    ...\r\n```\r\n\r\nIf I didn't use the v-on:touchstart\/wheel, and handle these events with raw javascript DOM API addEventListener, there is so much effort for me, because the elements binding \"touchstart\" event in my project are dynamically created or destroyed by v-if.\r\n\r\nCan vue team consider adding a new modifier to pass event option with passive: false?","@wangf1978 short term solution, you could add a ref and use vueuse's [useEventListener(divRef, 'touchstart', eventCallback, { passive: true })](https:\/\/vueuse.org\/core\/useEventListener\/)\r\n\r\nBut I am unsure if that solution would work for you as I am unsure where some of your variables are coming from.","> @wangf1978 short term solution, you could add a ref and use vueuse's [useEventListener(divRef, 'touchstart', eventCallback, { passive: true })](https:\/\/vueuse.org\/core\/useEventListener\/)\r\n> \r\n> But I am unsure if that solution would work for you as I am unsure where some of your variables are coming from.\r\n\r\n@WORMSS Thanks for your wonderful solution, but it seems not to be so fit for my scenario:\r\nThe div element is generated and destroyed dynamically and frequently by `v-if` directive in virtual DOM, actually I don't have chance to insert my javascript code for them, and all the related events are controlled `v-on:` directive, so event modifier seems to be the more direct, elegant and natural way.","the `divRef` would be what links the elements, the events would be added\/removed as soon as the elements are added\/removed from the dom. (it will internally add a watcher on `divRef` and when it changes, does what it needs to to add the event.\r\n```html\r\n<template>\r\n  <div\r\n    ref=\"divRef\"\r\n    v-if=\"condition\"\r\n    @click=\"yourevent\"\r\n \/>\r\n```\r\n```ts\r\n<script setup>\r\n  import { unref } from 'vue';\r\n  import { useEventListener } from '@vueuse\/core';\r\n  const divRef = ref(null);\r\n  const eventCallback = (evt) => {\r\n      on_toggle_photo_checkbox(unref(img), true, evt, unref(imgTypePos) + unref(start_list_idx_in_vw));\r\n  };\r\n  useEventListener(divRef, 'touchstart', eventCallback, { passive: true });\r\n<\/script>\r\n```\r\nagain, I've had to guesstimate some of this, so just assumed most of it are refs\/computed, but `unref` doesn't care if it's a value\/ref\/computed, it will get the value regardless.","> In Vue 3, the following code generates a \"passive : false\" event listener attached to that `div`.\r\n> \r\n> ```\r\n> <div\r\n>   @touchstart=\"function\"\r\n> ><\/div>\r\n> ```\r\n\r\nEven if it's true, then it doesn't do that in this case: `<div v-on=\"{ wheel: wheelHandler }\" ...` - it still produces the \"Added non-passive event listener to a scroll-blocking 'wheel' event.\" warning."],"labels":["feature request"]},{"title":"Property '$options' does not exist on type 'VueConstructor<Vue>'.","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/jafbudpk\/3\/#&togetherjs=HlrrSLGnsb](https:\/\/jsfiddle.net\/jafbudpk\/3\/#&togetherjs=HlrrSLGnsb)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n```\r\nimport Vue, { PluginFunction } from 'vue';\r\ninterface PluginOptions {}\r\n\r\nexport const Plugin: PluginFunction<PluginOptions> = function Plugin(Vue, PluginOptions): void {\r\n  Vue.mixin({\r\n    created() {\r\n      this.$options.socket = 1;\r\n    }\r\n  });\r\n};\r\n\r\n```\r\n\r\n### What is expected?\r\nThe `$option` should be already type right.\r\n\r\n### What is actually happening?\r\n  Property '$options' does not exist on type 'VueConstructor<Vue>'.ts(2339)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Is there a reason that some public members of the Vue class are not included in the type definition? This is getting really messy for me as I'm having to create a vue-shim.d.ts that augments the VueConstructor type as a work around for this issue.","Umbrella ticket: https:\/\/github.com\/vuejs\/vue\/issues\/8721","The umbrella issue doesn't appear to be covering the same issue here.\r\n\r\n"],"labels":["typescript"]},{"title":"Computed properties with getter\/setter do not provide expected Typescript type annotation","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/quiet-glitter-qk7fy?fontsize=14](https:\/\/codesandbox.io\/s\/quiet-glitter-qk7fy?fontsize=14)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1) Create a computed property in a single file component that is lang=\"ts\" - call it myComputedProp\r\n\r\n2) Add a get() and set() method for that computed prop\r\n\r\n3) Annotate the get() method (for example get(): string)\r\n\r\n4) Annotate the set() method (for example set(myValue: number): void ) \r\n\r\n5) Check the inferred types of myComputedProp - it looks like it will be string | number\r\n\r\n### What is expected?\r\nWhen the get() method of a computed property is annotated with a type, the computed properties type will correspond to that annotation. \r\n\r\n### What is actually happening?\r\nWhen the get() method of a computed property is annotated with a type (A), and the set() methods parameter has been annotated with a type as well (B), the computed property has a type of A | B\r\n\r\n---\r\nThis may very well be a user error on our part as well, and perhaps the community or Vue team has some suggestions for how to better handle this. We provide auto generated types from an api client, so having the \"or\" syntax with the computed annotation in this case means we need to use a type assertion to circumvent this. Thanks a ton! Happy to provide screenshots I took as well.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Pretty sure this is intentional, otherwise you wouldn't be able to assign a number to it. \r\n\r\n```ts\r\nthis.myComputedProp = 1 \/\/ Type '1' is not assignable to type 'string'\r\n```","I don't think it's possible because TypeScript forbid having different types between `get` and `set`.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/2194624\/67925611-d4a6cc00-fbee-11e9-926e-9010dc09623f.png)\r\n","If the types could be different then `this.myComputedProp = this.myComputedProp` would be an error. ","@ktsn Thank you! :pray: I didn't realise I was missing type annotations on my **setter**, I was getting like 50 errors all over the place just because of that missing annotation!","> I don't think it's possible because TypeScript forbid having different types between `get` and `set`.\r\n\r\nIt's updated. Now typescript allows different types for `get` and `set`.","@otomad In which version of typescript is it allowed, since I am using the computed method in vue and it sends me an error that I cannot use different types\r\n\r\n```js\r\n    const amount = computed({\r\n      get(): BigNumber {\r\n        return new BigNumber(car.modelValue)\r\n      },\r\n      set(new_val: string) {\r\n        emit(\"update:modelValue\", new_val)\r\n      },\r\n    })\r\n```","@joserick It's in native TypeScript. However, the type of setter must contain the type of getter. For example:\r\n\r\n```typescript\r\nconst obj = {\r\n    get amount(): BigNumber {\r\n        return new BigNumber(car.modelValue);\r\n    },\r\n    set amount(new_val: string | BigNumber) {\r\n        emit(\"update:modelValue\", new_val);\r\n    },\r\n};\r\n```\r\n\r\n<!-- And unavailable for `computed` of Vue currently. -->"],"labels":["typescript"]},{"title":"Vnode $scopedSlot with no prop (like callback)","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [x] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [x] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\nBecause use $scopedSlot with callback inside (with no prop)","comments":[],"labels":["typescript"]},{"title":"Symbol-keyed properties non-reactive","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/dansebcar\/b75n0uw6\/16\/](https:\/\/jsfiddle.net\/dansebcar\/b75n0uw6\/16\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- Press update to change each item's name to \"b\"\r\n\r\n### What is expected?\r\nThe list re-renders with the new name\r\n\r\n### What is actually happening?\r\nThe list does not change\r\n\r\n---\r\nIf we instead define \"symbol\" as any non-empty string, the expected re-render is observed, so I think the cause is just the parent list (items) is accessed through a symbol.\r\n\r\nNesting the symbol property an additional level (IE in config, rather than directly on data) is necessary to render the list at all; I guess symbols from data aren't directly transferred?\r\n\r\nI noticed in the devtools when I pressed \"refresh\" after mutating the items that I could see the new name, so I assumed something about the way I was setting the property didn't trigger the update, but even Vue.set did not help.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Because of the way defineproperty works, I don't know why. It should be OK to change defineproperty to proxy in vue 3.0 version.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/13390985\/67183448-11ffa280-f414-11e9-995c-dbe6f2be0690.png)\r\n","\r\n![image](https:\/\/user-images.githubusercontent.com\/18046379\/67197974-8cd6b680-f430-11e9-9217-82b5340dd904.png)\r\n","@Tipwheal  i made a mistake.","I tried to add some code in the function Observer.prototype.walk to support using Symbol, it works\r\n\r\n```\r\nObserver.prototype.walk = function walk (obj) {\r\n  var keys = Object.keys(obj);\r\n  if (Reflect.ownKeys) {\r\n    Reflect.ownKeys(obj).filter(k => typeof(k) === 'symbol').forEach(k => keys.push(k));\r\n  }\r\n  for (var i = 0; i < keys.length; i++) {\r\n    defineReactive(obj, keys[i]);\r\n  }\r\n};\r\n```","https:\/\/jsfiddle.net\/mwrjxLg8\/ `Vue.set` helps","> https:\/\/jsfiddle.net\/mwrjxLg8\/ `Vue.set` helps\r\n\r\nOnly if set after the object has been made reactive already. If the object is not reactive yet, Vue.set will do a simple property set.","> I tried to add some code in the function Observer.prototype.walk to support using Symbol, it works\r\n> \r\n> ```\r\n> Observer.prototype.walk = function walk (obj) {\r\n>   var keys = Object.keys(obj);\r\n>   if (Reflect.ownKeys) {\r\n>     Reflect.ownKeys(obj).filter(k => typeof(k) === 'symbol').forEach(k => keys.push(k));\r\n>   }\r\n>   for (var i = 0; i < keys.length; i++) {\r\n>     defineReactive(obj, keys[i]);\r\n>   }\r\n> };\r\n> ```\r\n\r\nOr:\r\n```js\r\nObserver.prototype.walk = function walk (obj) {\r\n  var keys = Object.keys(obj);\r\n  if (Object.getOwnPropertySymbols) {\r\n    for (let key of Object.getOwnPropertySymbols(obj))\r\n      keys.push(key);\r\n  }\r\n  for (var i = 0; i < keys.length; i++) {\r\n    defineReactive(obj, keys[i]);\r\n  }\r\n};\r\n```"],"labels":["feature request"]},{"title":"transition-group has stutter when component updated elsewhere","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/zncxud6q\/](https:\/\/jsfiddle.net\/zncxud6q\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nUse test1, test2, or test3 buttons to see transition without stutter.\r\nUse test4, test5, or test6 buttons to see transition with stutter.\r\n\r\n### What is expected?\r\nNo stutter\r\n\r\n### What is actually happening?\r\nWhile the DOM is updating, the transition restarts, even though the portion updating isn't a child of anything transitioning\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["It's even more noticeable with non-linear transitions. As a workaround, you can wrap the content into a component and pass the content through a Store instead of props but that's quite cumbersome.","What's the workaround for this?\r\n@posva Could you provide an example?"],"labels":["bug","transition"]},{"title":"<template> tag which inside v-pre directive, will be ignore if v-pre doesn't use at staticRoot","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/vuetest\/c5uw870y\/3\/](https:\/\/jsfiddle.net\/vuetest\/c5uw870y\/3\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1\u3001click jsfiddle link\r\n2\u3001you will see result is {{msg}}\uff0cis incorrect\r\n\r\n### What is expected?\r\nrender template tag as html element, dom looks like that:\r\n```html\r\n<div>\r\n  <p>\r\n    <template>\r\n      #document-fragment\r\n      <span>{{msg}}<\/span>\r\n    <\/template>\r\n  <\/p>\r\n<\/div>\r\n```\r\n\r\n### What is actually happening?\r\ntemplate tag disappeared\r\n```html\r\n<div>\r\n  <p>\r\n    <span>{{msg}}<\/span>\r\n  <\/p>\r\n<\/div>\r\n```\r\n\r\n---\r\nwhen v-pre used at the staticRoot, template render correctly, fixed by [#8146](https:\/\/github.com\/vuejs\/vue\/pull\/8146). see this also: https:\/\/jsfiddle.net\/vuetest\/c5uw870y\/5\/\r\n\r\nwhen v-pre does not used at the staticRoot, template tag will be skip, source code in `vue\/src\/compiler\/codegen\/index.js` is:\r\n```js\r\nexport function genElement (el: ASTElement, state: CodegenState): string {\r\n  \/\/ ...\r\n  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {\r\n    \/\/ template tag run into here, directively render it's children instead of him\r\n    return genChildren(el, state) || 'void 0'\r\n  } \/\/ ...\r\n```\r\n\r\nhow to slove this problem:\r\n```js\r\nexport function genElement (el: ASTElement, state: CodegenState): string {\r\n  if (el.parent) {\r\n    el.pre = el.pre || el.parent.pre; \r\n    \/\/ add this line\r\n    state.pre = el.pre;\r\n  }\r\n```\r\n\r\nI'm not  familiar with creating pr with test, someone else can help me?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["it seems that it was fixed in 2.5.18-beta-0 but regressed right after in 2.5.18","FYI @nmetulev and @vogtn","Found a workaround thanks to #11292. making a part of the template dynamic makes it work:\r\n\r\n\r\n```html\r\n<div>\r\n  \t<p v-pre>\r\n    \t<template><span>{{msg}}<\/span><\/template>\r\n\t\t<\/p>\r\n    {{ '' }}\r\n\t<\/div>\r\n```\r\n\r\nthe `{{ '' }}` outputs nothing but workarounds the problem"],"labels":["regression","has workaround"]},{"title":"Error compiling long string litteral  (many + on many lines)","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/embed\/vue-template-ysl83](https:\/\/codesandbox.io\/embed\/vue-template-ysl83)\r\n\r\n### Steps to reproduce\r\nJust click the link and you see the error and start editing.\r\nGo to the second of the component and you see a red line (line no 24?)\r\nIt says that the string literal is not correct, but its because it loads just a piece of it.\r\n\r\n### What is expected?\r\nNo compilation error\r\n\r\n### What is actually happening?\r\nA compilation error\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["it seems that the `<\/script>` string makes the SFC parser stop earlier than it should.\r\nAs a workaround you can escape the slash `<\\\/script>`"],"labels":["bug","has workaround"]},{"title":"transition-group with duration property doesn't work","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/vue-template-lcrsy](https:\/\/codesandbox.io\/s\/vue-template-lcrsy)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nClick \"Move\" button.\r\n\r\n### What is expected?\r\nBoth two lists move with animation.\r\n\r\n### What is actually happening?\r\nOnly second list which is applied duration with css has animation.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["`duration` only exists in `transition`. Since `transition-group` has 3 types of animations, we could have something like:\r\n\r\n**Number**: Applies the same duration to _enter_, _leave_ and _move_\r\n```vue\r\n<transition-group :duration=\"500\">...<\/transition-group>\r\n```\r\n\r\n**Object**: Explicit for every type of animation but requires the three of them\r\n```vue\r\n<transition-group :duration=\"{ enter: 500, leave: 800, move: 300 }\">...<\/transition-group>\r\n```\r\n","@posva I tried to resolve this: https:\/\/github.com\/vuejs\/vue\/pull\/10627\r\nPlease merge if it looks good."],"labels":["feature request","discussion","transition"]},{"title":"when <select> model and the option list changed at the same time, model may incorrectly set to `undefined`","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/4fyrj95L\/](https:\/\/jsfiddle.net\/4fyrj95L\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nset model binded to select element and the array that iterated the option list at the same time\r\n\r\nmake sure the new model value do not match any of the new options\r\n\r\nthe model will be set to `undefined`\r\n\r\n### What is expected?\r\n\r\nmodel value to be set to `1`\r\n\r\n### What is actually happening?\r\nmodel's value set to `undefined`\r\n\r\n---\r\nThis bug only appears when model and the options changed at the same and the new model value does not match any option, other situations behaves correctly as far as I tested.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["as a workaround you can set a `key` on the `select` element that changes alongside the selected list","It has nothing to do with the key, add key or keys do not resolve the problem.\r\nActurally the bug is triggered by an internal logic.\r\nSee the pr I created above.\r\n@posva\r\n","A workaround is only a temporary fix for the problem for you or anybody to have a solution until a fix is released: The original problem has nothing to deal with keys yet, adding a `key` **does remove the bug**","@posva Maybe im reading the description incorrectly but this sounds like expected behavior. If i change the list of available options, and then change the value to something not in the list of available options, it _should_ be `undefined`, right?","It should keep the set value instead of changing it to `undefined`","This issue is owned by the logic of the code:\r\nhttps:\/\/github.com\/vuejs\/vue\/pull\/10615\/files\r\nthe `$selectedValue` variable in line 121 may be an empty array, but the subsequent code read its first element, if the code is in c\/c++, that would be an error or index out of bound.\r\nsetting it to `undefined` is just an accident."],"labels":["bug","has workaround"]},{"title":"transitions with appear should be SSR with the \"-enter\" class","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n\r\n```sh\r\nmkdir vue-bug-repo\r\nyarn init -y\r\nyarn add vue vue-server-renderer\r\n```\r\n\r\n\r\n```js\r\n\/\/ Step 1: Create a Vue instance\r\nconst Vue = require('vue')\r\nconst app = new Vue({\r\n  data: () => ({ show: true }),\r\n  template: `<div>\r\n    <transition appear name=\"fade\">\r\n      <p v-if=\"show\">\r\n      Hello World\r\n      <\/p>\r\n    <\/transition>\r\n  <\/div>`\r\n})\r\n\r\n\/\/ Step 2: Create a renderer\r\nconst renderer = require('vue-server-renderer').createRenderer()\r\nrenderer.renderToString(app).then(html => {\r\n  console.log(html)\r\n}).catch(err => {\r\n  console.error(err)\r\n})\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\n- `node index.js`\r\n\r\n### What is expected?\r\n\r\nThe server response should contain the `*enter` classes applied to the transitioning element. The `*active` classes should then be applied during the `hydration` so that the transition can appear smoothly.\r\n\r\n### What is actually happening?\r\n\r\nThe element is first displayed, as if there were no transitions. Then then entire animation starts, causing wired animations.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This issue is still unresolved.","I have this issue too. Expecting appear transitions to have the appear-from class applied on static generation and SSR so the initial position can be appropriately rendered until vue mounts","Yeah I expected that `appear` works for initial animation when SSR or client side render occurs. Otherwise not sure the point of appear, if I need to toggle a v-if on mounted to get the initial animation to happen anyway. "],"labels":["transition"]},{"title":"Prevent Vue.use to be used without options parameter unless it's specified as optional (with `?`)","body":"### What problem does this feature solve?\r\n**Reproduction link**\r\nPlease see: https:\/\/tinyurl.com\/y5mlgqqh\r\n\r\n**Steps to reproduce**\r\n\r\n1. write a plugin\r\n2. overload Vue.use ( see the given link above for detail )\r\n\r\n**What is expected?**\r\nDuring compiling it fails, because the types are not matching.\r\n\r\n**What is actually happening?**\r\nIt compiles without errors\r\n\r\n### What does the proposed API look like?\r\nA possible solution is to change the type in vue\/types\/vue VueConstructor to: \r\n\r\n` use(plugin: PluginObject<unknown> | PluginFunction<unknown>, ...options: unknown[]): VueConstructor<V>;`\r\n\r\nSee: https:\/\/tinyurl.com\/y6anfs8b\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Vue.use is already typesafe. You shouldn't override it, Provide the `MessagePluginOptions` to the generic of PluginFunction like this: https:\/\/github.com\/vuejs\/vuefire\/blob\/master\/packages\/vuefire\/src\/firestore.ts#L104-L107","Thanks for the advise but it still not satisfy all constrains which are intended in the change. Please see: https:\/\/tinyurl.com\/y2aksjmw\r\n( It would be nice if you would not close the issue right away )","Okay, sorry, it took me some time to understand what you meant. Next time, make sure to correctly point what isn't working instead of saying _it compiles without errors_. I'm updating the title to reflect the intention. This is an easy PR and you already found the solution, can you send a PR with the change and the test? If you cannot that's fine, I will do it.","Thanks for your politeness! I try to make a more clearer description next time! Is there any chanel, if I have question, to poke you?\r\n ","if you need help with the PR message me on Discord but you are pretty much done with  https:\/\/tinyurl.com\/y6anfs8b \ud83d\ude42 "],"labels":["improvement","typescript"]},{"title":"Infinite loop in vue-template-compiler","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/github.com\/oguimbal\/vuebug](https:\/\/github.com\/oguimbal\/vuebug)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n```\r\ngit clone git@github.com:oguimbal\/vuebug.git\r\nnpm i\r\nnpm start\r\n```\r\n\r\nWait a couple of seconds, and your compilation process will be frozen.\r\n\r\nIf you attach a debugger to the node process, you will see the infinite loop in `generateCodeFrame()` method of vue-template-compiler:\r\n\r\n![bug](https:\/\/raw.githubusercontent.com\/oguimbal\/vuebug\/master\/bug.png)\r\n\r\n### What is expected?\r\nI would expect the compiler not to freeze\r\n\r\n### What is actually happening?\r\nThe compiler is freezing\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Hey, in order to check we need a boiled down repro without any extra dependency (like storybook). Ping me when you get a boiled down repro so I can get a look","@posva No problem... \r\n\r\nhttps:\/\/github.com\/oguimbal\/vuebug-simple\r\n\r\n```\r\ngit clone git@github.com:oguimbal\/vuebug-simple.git\r\ncd vuebug-simple\r\nnpm i\r\ncode .\r\n```\r\n\r\nThen hit F5 (if using vscode, otherwise `npm start`) => freeze.\r\n\r\nnb: I know that i forgot to include pug loader ... but thats the point, it freezes without error.\r\n\r\n[edit]  NB: The tight loop is in [generateCodeFrame()](https:\/\/github.com\/vuejs\/vue\/blob\/77796596adc48d050beefd11e827e8e4d44c6b3c\/src\/compiler\/codeframe.js), where  [line 16-17](https:\/\/github.com\/vuejs\/vue\/blob\/77796596adc48d050beefd11e827e8e4d44c6b3c\/src\/compiler\/codeframe.js#L17) seems fishy to me","It shows an error instead of freezing:\r\n\r\n```\r\nERROR in .\/bug.vue?vue&type=template&id=20e40a56&lang=pug& (.\/node_modules\/vue-loader\/lib\/loaders\/templateLoader.js??vue-loader-options!.\/node_modules\/vue-loader\/lib??vue-loader-options!.\/bug.vue?vue&type=template&id=20e40a56&lang=pug&)\r\nModule Error (from .\/node_modules\/vue-loader\/lib\/loaders\/templateLoader.js):\r\n(Emitted value instead of an instance of Error)\r\n\r\n  Errors compiling template:\r\n\r\n  Component template requires a root element, rather than just text.\r\n\r\n  1  |\r\n     |\r\n  2  |  div Whatever\r\n     |  ^^^^^^^^^^^^\r\n  3  |\r\n\r\n @ .\/bug.vue?vue&type=template&id=20e40a56&lang=pug& 1:0-202 1:0-202\r\n @ .\/bug.vue\r\n @ .\/main.js\r\n```\r\n\r\nThe error comes from vue-loader though. It could maybe display a warning if the specified lang does not contain a rule in the webpack config but at the same time the need of using pre processors is explained on the very first paragraph","Not on my machine oO'  (see screenshot as \"proof\")\r\n\r\nHowever, if you look at [this](https:\/\/github.com\/vuejs\/vue\/blob\/77796596adc48d050beefd11e827e8e4d44c6b3c\/src\/compiler\/codeframe.js#L17) , it is kind of obvious that this loop can never finish in some circumstances.\r\n\r\nFor me, with my repo, it gets called that way:\r\n\r\n```\r\ngenerateCodeFrame(`\r\ndiv Whatever\r\n`, 2, 16)\r\n```\r\n\r\nWhich freezes:  [https:\/\/codesandbox.io\/embed\/xenodochial-roentgen-5dbbq](https:\/\/codesandbox.io\/embed\/xenodochial-roentgen-5dbbq)\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/8973947\/65412381-6866ca80-ddef-11e9-87d7-679ea8505db0.png)\r\n","@posva I know know if you dont believe me or if you dont have the time to look at it, but I think it is probably due to the fact that I'm on **Windows** and you might not: My line breaks are `\\r\\n` instead of `\\n` ... \r\n\r\nThus generateCodeFrame() gets called with \"16\" as length in the example above (which should be 14 without `\\r`'s)\r\n\r\nThe split `const lines = source.split(\/\\r?\\n\/);` removes those two caracters.\r\n\r\nBut the line `count += lineLength + 1;`  does not take them into account (only adds 1 line return character), and there is no check that gets execution out of this infinite loop.\r\n\r\nAnyway I wont bother you further with that, the problem is solved for me anyway :)\r\n","I see, you should use LF ending. It can be enforced through eslint via `linebreak-style`.\r\nLet me check a bit more about this","Even when using CRLF endings in the bug.vue file (on osx), I get the same error as before, no infinite loop \ud83e\udd14 ","I just reproduced this issue\u2026 The repository URL in OP is different from the one in the screenshot. The correct one is https:\/\/github.com\/oguimbal\/vuebug-simple\r\nAfter cloning this repo & change the line endings I can reproduce the frozen output bug.","So\u2026 I believe this is a bug. PR's welcome.","Well I have found the culprit \ud83d\ude02\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/d2db6af1a55fdb4d65746fb67f7bfbced7d916f0\/src\/compiler\/codeframe.js#L8\r\n\r\nThis line.\r\nThere're many warnings that do not provide the `end` position.\r\nFor those warnings, `end` is calculated by `source.length`. However, in the following for-loop, `count` is incremented by `lineLength + 1`, which is incorrect if the line ends with CRLF. Thus the infinite loop.\r\n\r\nAlso, this only happens when the template does not have an indentation because otherwise Vue would have [normalized the template source during de-indentation](https:\/\/github.com\/vuejs\/vue\/blob\/d2db6af1a55fdb4d65746fb67f7bfbced7d916f0\/src\/sfc\/parser.js#L101)","The fix is as simple as\r\n```\r\nend: number = source.replace(\/\\r\\n\/g, '\\n').length\r\n```","Created [a pull request](https:\/\/github.com\/vuejs\/vue\/pull\/10553) that should fix it.\r\n\r\nJust a suggestion that is a bit more agnostic about wether if this funciton input has CR in source.\r\n( @sodatea fix would work, but only if caller does not provide the `end` argument).\r\n\r\nPlus it breaks out of the loop if `j >= lines.length` ... if i'm correct, there is no good reason to stick in the loop in this case :)","\u54c8\u54c8","xx","Any updates on this ?"],"labels":["bug","contribution welcome","has PR"]},{"title":"v-slot  to be used in case a slot prop is undefined error","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/gongph\/pen\/bGbQLGE?editors=1010](https:\/\/codepen.io\/gongph\/pen\/bGbQLGE?editors=1010)\r\n\r\n\r\nReproduction code at below:\r\n\r\nJavascript: \r\n```js\r\nVue.component('current-user', {\r\n  data () {\r\n    return {\r\n      item: {\r\n        user: {\r\n          name: 'defualt name'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  template: `\r\n    <div>\r\n      <slot v-bind=\"item\"><\/slot>\r\n    <\/div>\r\n  `\r\n})\r\nnew Vue({\r\n  el: '#app'\r\n})\r\n```\r\nHtml:\r\n\r\n```html\r\n<div id=\"app\">\r\n  <current-user v-slot=\"{ user }\">\r\n   <!-- page print: `default name` -->\r\n    {{ user.name }}\r\n  <\/current-user>\r\n  <current-user v-slot=\"{ user = { name: 'gongph' } }\">\r\n    <!-- page print: { 'name': 'default name' }-->\r\n    {{ user }}\r\n  <\/current-user>\r\n<\/div>\r\n```\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. open brower console\r\n2. console print [Vue warn] is :  \r\n\r\n```bash\r\n[Vue warn]: Error compiling template:\r\ninvalid expression: Invalid shorthand property initializer in\r\nv-slot=\"{ user = { name: 'gongph' } }\"\r\n```\r\n\r\n### What is expected?\r\nif prop is undefined show `gongph` value. for example:\r\n\r\n```js\r\nVue.component('current-user', {\r\n  data () {\r\n    return {\r\n      item: '' \/\/ item is undefined\r\n    }\r\n  },\r\n  template: `\r\n    <div>\r\n      <slot v-bind=\"item\"><\/slot>\r\n    <\/div>\r\n  `\r\n})\r\n```\r\n```html\r\n<current-user v-slot=\"{ user = { name: 'gongph' } }\"\r\n <!-- expected output `gongph` -->\r\n  {{  user.name }}\r\n<\/current-user>\r\n```\r\n### What is actually happening?\r\n`gongph` value can normal render , but console show warn message: \r\n\r\n```bash\r\n[Vue warn]: Error compiling template:\r\ninvalid expression: Invalid shorthand property initializer in\r\nv-slot=\"{ user = { name: 'gongph' } }\"\r\n```\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["The default value passed via `v-slot` does displays if no value is passed' but the error message shouldn't appear","I don't know why it show [Vue warn] @posva ","I think this is already fixed with https:\/\/github.com\/vuejs\/vue\/pull\/9917\r\nIn fact I just tested this with a built version 2.6.11 and I see no warning","Note that argument defaults work **only** if the value is exactly `undefined`. In your component you are setting it to `''` (an empty string) which is not `undefined`."],"labels":["improvement"]},{"title":"test named \"vdom patch: children\" occasionally fails","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/circleci.com\/gh\/vuejs\/vue\/13744?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link](https:\/\/circleci.com\/gh\/vuejs\/vue\/13744?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nTests are flaky on CI and also sometimes locally. Re-running the tests seem to work\r\n\r\n### What is expected?\r\nTests not to be flaky\r\n\r\n### What is actually happening?\r\nTests are flaky\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["The test have been passing before without problems, so it may be something within the PR causing the test to fail, and in that case, tests should be updated within the PR.\r\n\r\nMaybe someone will pick this up but the _Tests not to be flaky_ description is far from giving direction on when would you expect the test to fail or not","Well, I don't think they are related. Also If I try to run `yarn test` couple of times, I can see some flaky tests.\r\n\r\nBut it's true that the description is rather vague. But I don't really know what is wrong, but someone else might :)","I've seen this test fail locally (by using `fdescribe` to just run this suite) but I don't have a great handle on frequency since it was running in a loop without a counter.\r\n\r\nHave not yet seen it fail when running in isolation(`fit` on the shuffle test) after 50 runs in a loop.\r\n\r\nTough to tell what's going wrong in a test that is explicitly randomized and never quite testing the same thing.\r\n\r\nI've at least set up a harness that will allow me to run the suite until failure and capture some debugging logs, hopefully that will help clear things up.\r\n","The issue seems to be when the test generates an opacity value in the inclusive range 0.00001-0.00009. The assertion does not work because the patched element ends up with an opacity which is in scientific notation (e.g. 1e-05). With enough pulls on the slot machine this test will eventually produce such a value and fail.\r\n\r\nHere's a minimal test which reproduces the \"problem\". It fails with ` Expected '1e-05' to be '0.00001'.`\r\n```\r\nimport VNode from 'core\/vdom\/vnode'\r\nimport { patch } from 'web\/runtime\/patch'\r\nit('should reproduce the flaky test', () => {\r\n  const vnode1 = new VNode('div', { style: { opacity: '1' }})\r\n  const vnode2 = new VNode('div', { style: { opacity: '0.00001' }})\r\n  patch(null, vnode1)\r\n  const elm = patch(vnode1, vnode2)\r\n  expect(elm.style.opacity).toBe('0.00001')\r\n})\r\n```\r\n\r\nIf this is in fact the desired behavior and this test is useful, it should be possible to fix it by using less precision (four digits after the decimal) for the random opacity values.\r\n\r\n","Created a minimal PR to address. It reduce the number of post-decimal digits allowed in the random opacity values to 4, cutting out values in the range that case the test to fail. The previously failing assertion has been replaced with an equivalent, clearer assertion.","@posva Any interest in the patch here? Doing some math here, the random chance of failure for any given run of the test suite due to this issue is about 0.6% (70 chances to pull one of 9 'bad' values out of a pool of 100K). It doesn't seem likely to happen all that often, but if it's patched it shouldn't fail at all.\r\n\r\n"],"labels":["contribution welcome"]},{"title":"Click Event Triggers on Complex Buttons are ignored in Pale Moon browser","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/ye6vs8h3\/](https:\/\/jsfiddle.net\/ye6vs8h3\/)\r\n\r\n### Steps to reproduce\r\nInstall Pale Moon browser http:\/\/www.palemoon.org\/\r\nOpen the jsfiddle (https:\/\/jsfiddle.net\/ye6vs8h3\/).\r\n\r\nWhen clicking directly on the Vue logo image,  a click is not registered. \r\nWhen clicking just next to it, still on the grey background, a click *is* registered correctly.\r\n\r\n### What is expected?\r\nWhen clicking on a nested component, the click should bubble up to the parent element that has a `@click` handler.\r\n\r\n### What is actually happening?\r\nThe click is not bubbled up, so takes no effect.\r\n\r\n---\r\nThis issue is similar to several other bugfixes, for Adobe CEP and Mobile Safari:\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/issues\/9462\r\nhttps:\/\/github.com\/vuejs\/vue\/issues\/10366\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["browser quirks","has PR"]},{"title":"`$forceUpdate` do not update checked status of checkbox-","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/ahy27vu3\/](https:\/\/jsfiddle.net\/ahy27vu3\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. input[type=\"text\"] value is forced to` ''`, which is controlled completely\r\n2. input[type=\"checkbox\"] checked does not work\r\n\r\n### What is expected?\r\ninput[type=\"checkbox\"] checked is forced to `false`\r\n\r\n### What is actually happening?\r\ninput[type=\"checkbox\"] checked keep the value last entered\r\n\r\n---\r\nMaybe this is designed on purpose\uff0cCould you please explain why\uff1f\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/platforms\/web\/runtime\/modules\/dom-props.js#L67\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/platforms\/web\/runtime\/modules\/dom-props.js#L42\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Please see https:\/\/github.com\/vuejs\/vue\/issues\/9535 and https:\/\/github.com\/vuejs\/vue\/issues\/9340","@posva This issue has nothing to do with micro\/macro task","@posva I believe what @xiaodemen want is to implement a \u201cfully controlled\u201d checkbox.","It is related to micro\/macro task though as it used to work on 2.5\r\n\r\nI'm realising the `$forceUpdate` doesn't work anymore though and that is a problem","@posva It is not related to micro\/macro task, see:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/v2.6.0\/src\/platforms\/web\/runtime\/modules\/dom-props.js#L45","You're probably both \"right\". The change that you link to, @xiaodemen, was done because it was expected that the check for \"checked\" should no longer be necessary after we did the microtaks changes  in 2.6. But appearantly that's not always the caase.","I know this issue is pretty old, and it might even have gotten fixed in Vue 3, but is there any chance it will be looked at at some point? \ud83d\ude07","I've faced with the similar issue. `$forceUpdate` doesn't work if element (even text input) is wrapped inside custom component.\r\n\r\nMinimal example:\r\nhttps:\/\/sfc.vuejs.org\/#eNqNVMGOmzAQ\/ZVZVIlE2mD1miYrrXJpq17bXnyhMCRsjY08A2kV8e8d24Qke2oOgbHH772Z5+GSvfZ9MQ6YbbMdVb7t+UXbtuudZzi4rofGuw7yQoUgJOaftAXQFv\/EnBqbcjAMl7BaSY6zaJm2aQEixnN4neJ\/XXK5Wl83PfLg7TXSPJZmwC3kn9EYBz+dN\/VTnjanSJtAAs3AWM8kmlsr8Y90eAYDOCLfmO7Y+NRSEZkiZASPsOFHcijuPZxUCg4DsTTCuGNbATtoWsPoobS1ch46V7fNXxhIlqKY29kbHewhPgt239wZ\/aEkXK0Lj70pK1wprUkdnyHP14swgLaBJAie9vs7sAd9UWHjfIVS5MajrUWHiCQWQ4F6gaf77AjzIR743oslIuOOclraMrc+2J2aFFzYqeWeSMDYiXxGiQB2p48vVxsuqRExhGnaKdmLOX18ALwaAwZZukhQehRX7YhebA3KTWgQVNKh0OK5hJjmsXMj1kXEUglMML+KP4kRVveVwdn537ReMlPKuBHH0Ox1dhOpsyvWl5jTWmprkZWMX672O\/jaIdmcI82NJdz6ucz\/YIyzJa87tXQze87SEG66si\/eyFkZ0HTb5w3S2XLZdSaDGWKdnZh72ipFTRWm9Y0K549K3go\/WG47LJC6zS\/vznJXBVhn0VuxViivMx4+Bo\/G1u0IlSmJpIDUkVm87JFxDGouRRLfVTL9A4ovbM4="],"labels":["regression"]},{"title":"VueComponent instances retained after calling vm.$destroy","body":"### Version\r\n2.6.10\r\n\r\n### Minimal reproduction\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" \/>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" \/>\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" \/>\r\n    <title>Document<\/title>\r\n  <\/head>\r\n  <body>\r\n    <script src=\"https:\/\/unpkg.com\/vue\"><\/script>\r\n\r\n    <div id=\"app\">\r\n      <base-link>Link<\/base-link>\r\n    <\/div>\r\n\r\n    <button id=\"action\">Load<\/button>\r\n\r\n    <script>\r\n      let vm\r\n      const button = document.getElementById('action')\r\n      button.addEventListener('click', () => {\r\n        if (vm) {\r\n          vm.$destroy()\r\n          vm = null\r\n          button.textContent = 'Load'\r\n        } else {\r\n          vm = new Vue({\r\n            el: '#app',\r\n            components: {\r\n              BaseLink: {\r\n                template: `<a href=\"#\" @click=\"onClick\"><slot \/><\/a>`,\r\n                methods: {\r\n                  onClick(evt) {\r\n                    evt.preventDefault()\r\n                    console.log('clicked')\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          })\r\n          button.textContent = 'Destroy'\r\n        }\r\n      })\r\n    <\/script>\r\n  <\/body>\r\n<\/html>\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n- Load the app by clicking the button and take a heap snapshot\r\n- Load\/unload the app multiple times by clicking the button\r\n- End in loaded stat and take a heap snapshot\r\n- Search `Vue` in the memory snapshot viewer\r\n\r\nI've personally tested this in Chrome.\r\n\r\n### What is expected?\r\n\r\nVue retained size should not increase\r\n\r\n![Screen Shot 2019-09-06 at 09 42 58](https:\/\/user-images.githubusercontent.com\/664177\/64410231-de96cd80-d08a-11e9-968c-fee7ae1815a7.png)\r\n![Screen Shot 2019-09-06 at 09 43 03](https:\/\/user-images.githubusercontent.com\/664177\/64410232-de96cd80-d08a-11e9-85d8-5ee29bc0818e.png)\r\n\r\n### What is actually happening?\r\n\r\nVue retained size increases\r\n\r\n---\r\n**Background:** I'm using Vue and Turbolinks together in a project where the backend serves HTML with Vue templates inlined. This means I have to create and destroy Vue instances when navigating between pages.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I updated the issue @jukkakoskinen to be clear, I hope I didn't miss anything on the way, tell me if this is what you wanted to show in the first place","Thanks @posva! Not only Vue instance count increases, but I also see a dangling VueComponent instance. It has something to do with the BaseLink component's click handler, because without it the VueComponent instance gets collected.\r\n\r\n![Screenshot 2019-09-06 at 11 40 56](https:\/\/user-images.githubusercontent.com\/1039391\/64414147-86b49280-d09b-11e9-88f8-1a683eaa7c34.png)","I think the `VueComponent` is indeed the issue. I think a `VueComponent` is a child of `Vue`? (at least looks like it is responsible for the extra instance [from this call in the code](https:\/\/github.com\/vuejs\/vue\/blob\/95d8afa07c4a84d6c178e220913cec4b1afcf21d\/src\/core\/global-api\/extend.js#L36))\r\n\r\nSo when the `BaseLink` component is added, we get two `Vue` instances. After you have a heap snapshot with the 2x `Vue` instances, try this in the browser console:\r\n\r\n```\r\nObject.create(Vue.prototype)\r\n```\r\n\r\nThen take another snapshot, and you should have three instances.\r\n\r\nWhen the instance is destroyed, the `<base-link>Link<\/base-link>` does not exist any longer. It was replaced by a link. So the next time you create the `Vue` app again, the component is not found, so now you will have only 1 instance of `Vue`, as the `VueComponent` was not instantiated.\r\n\r\nBut if you re-create the `<base-link>Link<\/base-link>`, the heap snapshot should be consistent. Always 0 when destroyed, and always 2 when loaded (1 for `Vue` app, 1 for `VueComponent`).\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" \/>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" \/>\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" \/>\r\n    <title>Document<\/title>\r\n  <\/head>\r\n  <body>\r\n    <script src=\"vue.js\"><\/script>\r\n\r\n    <div id=\"app\">\r\n      <base-link>Link<\/base-link>\r\n    <\/div>\r\n\r\n    <button id=\"action\">Load<\/button>\r\n\r\n    <script>\r\n      let vm\r\n      const button = document.getElementById('action')\r\n      button.addEventListener('click', () => {\r\n        if (vm) {\r\n          vm.$destroy()\r\n          vm = null\r\n          button.textContent = 'Load'\r\n          \/\/ remove the dangling <a> element created by the VueComponent base-link...\r\n          document.getElementById('app').children[0].remove()\r\n          const baseLink = document.createElement('base-link')\r\n          baseLink.innerHTML = 'Link'\r\n          document.getElementById('app').appendChild(baseLink)\r\n        } else {\r\n          console.log('creating new instance!')\r\n          vm = new Vue({\r\n            el: '#app',\r\n            components: {\r\n              BaseLink: {\r\n                template: `<a href=\"#\" @click=\"onClick\"><slot \/><\/a>`,\r\n                methods: {\r\n                  onClick(evt) {\r\n                    evt.preventDefault()\r\n                    console.log('clicked')\r\n                  },\r\n                },\r\n                beforeDestroy () {\r\n                  console.log('ciao!')\r\n                }\r\n              },\r\n            },\r\n          })\r\n          button.textContent = 'Destroy'\r\n        }\r\n      })\r\n    <\/script>\r\n  <\/body>\r\n<\/html>\r\n\r\n```\r\n\r\nSo I think that's not really a bug.","Thanks for the comment @kinow! In your example, you remove the dangling <a> element, which seems to ensure that the VueComponent instance gets garbage collected. Seems like that after calling `vm.$destroy()` the link element is still bound to the `onClick` method, thus leading into that the instance is retained in memory.\r\n\r\nPossibly related: https:\/\/github.com\/vuejs\/vue\/issues\/7086","I noticed the same issue on our project. Issue reproduced with version 2.6.10, 2.6.9 and 2.6.0."],"labels":["bug"]},{"title":"(programmatically added) destroyed hooks retain on new instances","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/h86atdq4\/](https:\/\/jsfiddle.net\/h86atdq4\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen linked jsfiddle, open console and click toggle.\r\n\r\n### What is expected?\r\nThat the logged destroyed hook count is always 0 similar to the other hooks\r\n\r\n### What is actually happening?\r\nThe destroyed hook count keeps incrementing as it seems to retain hooks from already destroyed components\r\n\r\n---\r\nNote: I didnt check if this also happens with destroyed hook defined on the component itself\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I wouldn't consider it a bug. You are modifying component's options before component's instance is created. If you need to programmatically add some lifecycle hook, you should do that in `created` hook using `$on('hook:xxx`) pattern. I do not know why but it is not properly documented so not everyone knows about it.  Example usage:\r\n\r\n```js\r\ncreated() {\r\n  this.$on('hook:mounted', () => {\r\n    \/\/ do something when component is mounted\r\n  })\r\n}\r\n```\r\n\r\nAnd you don't have to worry about cleaning up the events added this way in beforeDestroy hook, Vue will handle it for you\r\n\r\n","Very interesting, did not know this indeed. I had also asked this on Vue-land discord but unfortunately to no avail.","You shouldn't write to `this.$options`. It is for reading only. If you want to attach hooks, you should do so using the public API [`this.$on()`](https:\/\/vuejs.org\/v2\/api\/#vm-on) or [`this.$once()`](https:\/\/vuejs.org\/v2\/api\/#vm-once). To listen to a lifecycle hook using the event system, you can prefix it with `hook:` like so: `this.$on(\"hook:mounted\", () => {})`","Unfortunately a vue core team member told me on discord that `hook:` is not a public API thus its not officially supported and shouldnt be relied on. Hence why its not documented.\r\n\r\nSo still looking for the official way to programmatically add lifecycle hooks.","To clarify, writing to `this.$options` in a `beforeCreate` hook is a very common way to manipulate options and it's used by many many plugins, it's not read-only, at least, in `beforeCreate` as it can still have an impact","It's worth pointing out that the `hook:` syntax is documented appropriately under [Handling Edge Cases: Programmatic Event Handlers](https:\/\/vuejs.org\/v2\/guide\/components-edge-cases.html#Programmatic-Event-Listeners).","It turns out (as found by @Remcoman with this jsfiddle https:\/\/jsfiddle.net\/c61xL8ar\/2\/) that the memory leak occurs on any programmatically added lifecycle hook if the component you are adding them to already list those lifecycle hooks. Ie in the updated jsfiddle the AComponent already has a mounted hook, the BComponent already has a created hook. Both are being retained now.\r\n\r\n@posva Does this mean its a bug or that we should use hook events anyway?","> It turns out (as found by @Remcoman with this jsfiddle https:\/\/jsfiddle.net\/c61xL8ar\/2\/) that the memory leak occurs on any programmatically added lifecycle hook if the component you are adding them to already list those lifecycle hooks. Ie in the updated jsfiddle the AComponent already has a mounted hook, the BComponent already has a created hook. Both are being retained now.\r\n\r\nOnce again, that fiddle is paving over an object on `this.$options`. Don't do that. It is a Vue internal property.","@sirlancelot Please read this comment https:\/\/github.com\/vuejs\/vue\/issues\/10458#issuecomment-528247551 and read this https:\/\/github.com\/vuejs\/vuejs.org\/issues\/2247\r\n\r\nAlthough I appreciate your time responding to this issue, there is conflicting information here and therefore I am asking the Vue core-team what I should do.\r\nAs a library maintainer I am unable to use a feature when I was specifically told not to use it. Not unless a go-ahead has been given to do so anyway. You might not agree with this approach, but you should at least respect it as Im only trying to do my due diligence here.\r\n\r\n","Understandable. I was rather short in my previous post, and I apologize. I am going to guess that the \"has workaround\" was added in regards to using `$on()` & `$once()` with the `hook:` prefix.","Hello, is there any way to use this workahound (`$once()`) in Vue 3.x?"],"labels":["has workaround"]},{"title":"Scoped CSS attribute is reused or discarded when switching between components with scoped CSS","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n\r\n- Functional components: [https:\/\/github.com\/sin1ght\/test](https:\/\/github.com\/sin1ght\/test)\r\n- Regular components and slots: https:\/\/codesandbox.io\/embed\/vue-template-3pnsx\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nAfter npm run serve, click the toggle button and find that child has no style.\r\n\r\nChild and child2 components are reused, child's data-v-* disappears, causing the style to disappear\r\n\r\n### What is expected?\r\n\r\nChild should have a black background scope style\r\n\r\n### What is actually happening?\r\n\r\nChild without style\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["not only functional components,use functional components just to make sameVnode true,a functional component and a normal dom is ok as well","i add two lines code in patchVnode,and it work will at my demo,but i'm not sure\r\n\r\n`oldVnode.fnScopeId = vnode.fnScopeId;\r\n    setScope(oldVnode);`\r\n\r\n![mt44X9.png](https:\/\/s2.ax1x.com\/2019\/08\/21\/mt44X9.png)","I tested with the 4 possible combinations among regular and functional components and the problem only appears when both are functional\r\n\r\nIf you are up to give the fix a try, you can. If other things break, you should see tests failing","if samaVnode true then patchVnode\r\n\r\n![mUrTBT.png](https:\/\/s2.ax1x.com\/2019\/08\/21\/mUrTBT.png)\r\n\r\nregular component's tag will changed,but  functional component not\r\n\r\n![mUrxjx.png](https:\/\/s2.ax1x.com\/2019\/08\/21\/mUrxjx.png)\r\n\r\nso,a normal dom is ok as well\r\n\r\n```javascript\r\n\/\/parent.vue\r\n\r\n<template>\r\n  <div class=\"parent\">\r\n    <Child class=\"child\" v-if=\"!test\"\/>\r\n    <div class=\"child2\" v-if=\"test\">\r\n  <\/div>\r\n<\/template>\r\n```\r\n\r\n","similar bug, affected pure normal components with slot, please see my simple demo.\r\n\r\nhttps:\/\/codesandbox.io\/s\/vue-template-jimot","@CzBiX \r\nI think your problem is same with me.\r\ntwo child reused but scopedId not be copied .\r\n![mRH28I.png](https:\/\/s2.ax1x.com\/2019\/08\/26\/mRH28I.png)","@sin1ght  It's weird I couldn't see the problem in your repro using regular components but others' repro do show so I adapted the title. Sorry about that!","Hi, I'm interested interested in this particular task, how to I go ahead","@posva I submitted a pull request for this issue #12938 . But I noticed the requirements state that I should merge to main instead of dev, even though the Contributing Guide says I shouldn't.\r\n\r\nShould I make one for main instead?"],"labels":["bug","contribution welcome"]},{"title":"fix: binding of `muted` dom property for <audio>","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n\r\nBinding the DOM `muted` property to a Vue.js property is currently working only on `<video>` elements, but not on `<audio>` elements. Example: https:\/\/jsfiddle.net\/jfLkynsg\/\r\n\r\nThis trivial change fixes the binding for `<audio>`.","comments":["Looks good to me","It's very important for VOIP app\uff0cIn VOIP app, always need to mute self audio."],"labels":["ready to merge"]},{"title":"Warn when v-for with a Range is not a valid integer","body":"### What problem does this feature solve?\r\nWhen using the v-for directive with a Range and the number passed is not a valid integer (valid integer = an integer between 0 and 2^32-1), Vue.JS still tries to create an Array and then throws the error `[Vue warn]: Error in render: \"RangeError: Invalid array length\"`.\r\n\r\nThis happened to me while passing a computed property to the directive: `v-for=\"n in lists\"` where `lists` is the computed property.\r\n\r\nWhen the developer has multiple v-for directives, it is unclear where the error occurs, making the debugging process though.\r\n\r\nIf the mistake is caught by Vue before creating the Array, rendering the component shouldn't have to stop. Instead we can throw a warning and render an empty v-for directive. This would would make debugging easier, since other v-for directives in the same component would still render.\r\n\r\n### What does the proposed API look like?\r\nAdd a check in \/src\/core\/instance\/render-helpers\/render-list.js at line 22, checking if a valid number is:\r\n* higher or equal to 0\r\n* lower or equal to 2^32 - 1\r\n* modules to 1 is equal to 0\r\n\r\n```javascript\r\nelse if (typeof val === 'number') {\r\n  if (val >= 0 && val <= 4294967295 && val % 1 === 0) {\r\n    ret = new Array(val)\r\n    for (i = 0; i < val; i++) {\r\n      ret[i] = render(i + 1, i)\r\n    }\r\n  } else {\r\n    warn (\r\n      `Number passed to v-for directive not valid (expected valid integer), got ${val}`,\r\n      this\r\n    )\r\n    ret = []\r\n  }\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Maybe a dev warning could be fired instead of adding https:\/\/github.com\/vuejs\/vue\/pull\/10341 but at the same time, I don't understand how you find yourself writing `v-for=\"n in 10000000000` apart from testing purposes but it is a very unrealistic case. Let's wait for more feedback on this\r\n\r\nFYI, the integer can also be writing in hex, making it more explicit that it is the upper bound of 4 bytes: `0xffffffff`","Directly passing a number to the v-for directive is indeed a very straight forward case, however when passing a computed variable to the v-for directive, the number can be anything. In my case it was a calculation possibly returning a number with decimal points, which will also break new Array().","Yeah, but that's different, as you should ensure the number is an integer in the computed property"],"labels":["discussion"]},{"title":"Click Event Triggers on Complex Buttons are ignored in some environments","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/s7hyqk13\/2\/](https:\/\/jsfiddle.net\/s7hyqk13\/2\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Configure one of the Adobe CEP [Sample Panels](https:\/\/github.com\/Adobe-CEP\/Samples). The [PProPanel](https:\/\/github.com\/Adobe-CEP\/Samples\/tree\/master\/PProPanel) is a good starting point as it has very clear documentation on how to [set up the environment](https:\/\/github.com\/Adobe-CEP\/Samples\/tree\/master\/PProPanel#2-enable-loading-of-unsigned-panels) for testing.\r\n1. Replace the HTML\/JavaScript\/CSS contents of the panel project with the contents of the [linked JSFiddle](https:\/\/jsfiddle.net\/s7hyqk13\/2\/).\r\n1. Open the panel.\r\n1. Attach a debugger (with the default PProPanel setup this would mean browsing to `localhost:7777` in Chrome).\r\n1. Set the \"_Mouse > `click`_\" **Event Listener Breakpoint** in the \"Sources\" tab of the Chrome Debugger.\r\n1. Click the Vue icon in the center of the silver `div`.\r\n\r\n### What is expected?\r\nMethod bound to the `@click` handler is triggered when the image embedded in the parent div is clicked. \r\n\r\n### What is actually happening?\r\nThe method bound to the `@click` handler is _only_ triggered when clicking outside of the parent div.\r\n\r\n---\r\nThis is a non-trivial bug to reproduce as the only place I've experienced it is in [Adobe CEP](https:\/\/github.com\/Adobe-CEP\/CEP-Resources\/blob\/master\/CEP_9.x\/Documentation\/CEP%209.0%20HTML%20Extension%20Cookbook.md) extensions (which run NW.js under the hood). That said, it does reproduce 100% of the time there.\r\n\r\nThe debugger (CEP context) seems to show several funny things at around [this line](https:\/\/github.com\/vuejs\/vue\/blob\/d40b7ddb8177944d1dd50f4f780e6fd92c9455c2\/src\/platforms\/web\/runtime\/modules\/events.js#L69) in the Vue events.js file. Specifically:\r\n\r\n1. The `e.timeStamp` value **does not change** between callbacks for _different buttons\/elements_.\r\n1. The `attachedTimestamp` is **_significantly_ larger** than the `e.timeStamp` value.\r\n1. The `attachedTimestamp` value _does_ change when the component is updated (the `e.timeStamp` remains identical).\r\n\r\nI should note that this affects at least [CEP 8.0 and CEP 9.0](https:\/\/github.com\/Adobe-CEP\/CEP-Resources\/blob\/master\/CEP_9.x\/Documentation\/CEP%209.0%20HTML%20Extension%20Cookbook.md#chromium-embedded-framework-cef) (tested in Premiere Pro).\r\n\r\n**Vue Versions Note:** This broke somewhere between versions 2.5.17 and 2.6.x. If we run a version of 2.5 (2.5.17 and some earlier versions verified), then this issue does not occur. In testing 2.6.x, we've found that this same issue occurs from 2.6.5 to 2.6.10 (latest). Versions of 2.6 prior to 2.6.5 are actually _worse_ in that the buttons basically don't work at all.\r\n\r\n**Important Note:** I should _further_ note that apparently right-clicking to open the basic CEF [not CEP] context menu will cause the `e.timeStamp` values to begin reporting as expected. Once this occurs, the buttons will _also_ work as expected. That said, we shouldn't have to instruct users to right-click prior to interfacing with the extension.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I don't own Photoshop so I won't be able to test nor debug this problem. Can it be on nw.js as well? Maybe that could be tested","@posva As a quick note, this issue isn't restricted to Photoshop. Just about [every major Creative Cloud application](https:\/\/github.com\/Adobe-CEP\/CEP-Resources\/blob\/master\/CEP_9.x\/Documentation\/CEP%209.0%20HTML%20Extension%20Cookbook.md#applications-integrated-with-cep) supports CEP extensions - and is affected by this problem. \ud83d\ude15","> right-clicking to open the basic CEF [not CEP] context menu will cause the `e.timeStamp` values to begin reporting as expected.\r\n\r\nIt appears that this isn't quite right. The `e.timeStamp` value is _updated_ when a right-click occurs. However, subsequent callbacks will then report the same updated value. This is, at least, what the following extremely simple test case shows:\r\n\r\n```js\r\nwindow.addEventListener('click', (evt)=>{console.log(evt.timeStamp);});\r\n```\r\n\r\nThis means that a post right-click event will work as expected _as long as the `attachedTimestamp` isn't reset!_ It appears that once a \"flush\" occurs and the event listener is re-attached, the issue reappears (until the next right-click).","I should point out that it is possible to distinguish a CEP environment and version with standard JavaScript calls. This may be helpful for adding an environment flag.\r\n\r\nSpecifically, the following snippet is designed to be inserted into the [existing environment flag setup](https:\/\/github.com\/vuejs\/vue\/blob\/a9a303009a4267b7f12b956741b4e34dfdc6566f\/src\/core\/util\/env.js#L6):\r\n\r\n```js\r\nconst  isAdobeCEP = inBrowser && typeof window.__adobe_cep__ !== undefined;\r\n```\r\n\r\nThe `__adobe_cep__` object also has the `getCurrentApiVersion` native function, which returns the CEP version encoded as a JSON string. See:\r\n\r\n```js\r\n\/\/ In Premiere Pro 13.1.3, outputs: \"{\"minor\":3,\"micro\":1,\"major\":9}\"\r\nwindow.__adobe_cep__.getCurrentApiVersion();\r\n```\r\n\r\nThe version JSON returned by this function may be easily parsed and accessed:\r\n\r\n```js\r\nconst cepVersion = JSON.parse(window.__adobe_cep_.getCurrentApiVersion());\r\n\r\ncepVersion.major; \/\/ = 9\r\ncepVersion.minor; \/\/ = 3\r\ncepVersion.micro; \/\/ = 1\r\n```\r\n\r\nHopefully this will prove helpful in some way.","I [made a standalone panel to demonstrate this](https:\/\/github.com\/Inventsable\/Vue-2.6-Issue-10366) but don't get the same behavior on Windows 10 and Vue 2.6.10, but I don't have a Mac to test:\r\n\r\n![](https:\/\/thumbs.gfycat.com\/RemarkableVeneratedAsiaticgreaterfreshwaterclam-size_restricted.gif)\r\n\r\nAny Mac user should be able to run a single terminal command: `defaults write com.adobe.CSXS.9 PlayerDebugMode 1`, then clone the repo into the specified directory in the README and open it in Illustrator, After Effects, Photoshop or Premiere Pro via `Windows > Extensions > clicktest`, then access the CEF debugger easily via the right-click context menu on the panel.\r\n\r\n---\r\n\r\nEDIT: Eric corrected me on the version, this is 2.6.10 (not 2.6.1)","_[**Update:** Please see [this comment](https:\/\/github.com\/vuejs\/vue\/issues\/10366#issuecomment-521703332) for more on the struck-through text below.]_\r\n\r\n~Thanks to @Inventsable I was able to narrow down the test case a bit more. In order to experience the issue I described, a click event handler must be installed on the contained element (in this case, an `<img>` element) _as well as_ the container. I have updated the JSFiddle link in the issue description.~\r\n\r\n~_[For the record, [this](https:\/\/jsfiddle.net\/1d8nbv7h\/2\/) was the previous version and [this](https:\/\/jsfiddle.net\/46bfrytw\/) is the adjusted version.]_~\r\n\r\nAlso, @Inventsable was able to verify that the `timeStamp` value appears to update correctly when run in Windows applications. I've tested on macOS-based Premiere Pro and can verify that the `timeStamp` issue does occur there (even in the graciously provided [bug report panel](https:\/\/github.com\/Inventsable\/Vue-2.6-Issue-10366)).","This is affecting me as well.\r\n\r\n- Vue 2.6.10\r\n- Photoshop CC 2019\r\n- macOS 10.14.6\r\n\r\nThank you @ericdrobinson for filing this issue!","**Update:** My [previous comment](https:\/\/github.com\/vuejs\/vue\/issues\/10366#issuecomment-521068621) about requiring a contained element to also have an event handler was 100% a **red herring**. This is entirely unnecessary to get the bug to reproduce.\r\n\r\nIt appears that small, fast-loading scripts result in the reported event `timeStamp` being **`0`**. This is unfortunate because it obscures the bug by passing as expected [here](https:\/\/github.com\/vuejs\/vue\/blob\/d40b7ddb8177944d1dd50f4f780e6fd92c9455c2\/src\/platforms\/web\/runtime\/modules\/events.js#L73).\r\n\r\nOn macOS, the event `timeStamp` value only increments when a right-click occurs to open a native context menu (provided it's not been disabled, of course). Great. The problem _now_ is that the \"`attachedTimestamp`\" is properly less than the currently-constant `timeStamp`. We need a way to ensure that the following occurs:\r\n\r\n1. The `Event.timeStamp` value is **greater than `0`**.\r\n2. The `attachedTimestamp` is greater than the `Event.timeStamp`.\r\n\r\nThat's easy: have the user right-click anywhere and then trigger some code that attaches a new listener!\r\n\r\nI've adjusted the [JSFiddle example](https:\/\/jsfiddle.net\/s7hyqk13\/2\/) to account for the above to ensure a 100% reproduction rate in Adobe CEP applications (e.g. Photoshop, Premiere Pro, Illustrator, InDesign, After Effects, etc.) running on macOS.","> I don't own Photoshop so I won't be able to test nor debug this problem. Can it be on nw.js as well? Maybe that could be tested\r\n\r\n@posva We've narrowed the repro for this down to **Adobe CEP contexts running on macOS**. Adobe is aware of the problem but a fix from them will not address released applications.\r\n\r\nFrom what I can gather by reading [this comment](https:\/\/github.com\/vuejs\/vue\/issues\/6566#issuecomment-329057367) from @yyx990803 on #6566, there is an issue here in event dispatch\/processing with respect to the micro\/macro task order.\r\n\r\nFurther, it appears that the code has subsequently been updated with [a few workarounds](https:\/\/github.com\/vuejs\/vue\/blob\/d40b7ddb8177944d1dd50f4f780e6fd92c9455c2\/src\/platforms\/web\/runtime\/modules\/events.js#L70) \"_for environments that have buggy `event.timeStamp` implementations_\".\r\n\r\nIt appears that the workaround for the event ordering issue that was implemented in ba0ebd4 to address #6566 ended up breaking things for CEP-on-macOS (as it did with a few other \"broken environments\").\r\n\r\nI would then propose that a solution would be to follow the examples set in 0bad7e2 and 7591b9d and simply bail out of this special-case processing when we detect that we're in the \"broken environment\" that is CEP-on-macOS. This can be done like so:\r\n\r\n1. Add the following to [env.js](https:\/\/github.com\/vuejs\/vue\/blob\/a9a303009a4267b7f12b956741b4e34dfdc6566f\/src\/core\/util\/env.js#L18)\r\n    ```js\r\n    export const isCEP = inBrowser && window.__adobe_cep__;\r\n    ```\r\n1. Add the following to [events.js](https:\/\/github.com\/vuejs\/vue\/blob\/d40b7ddb8177944d1dd50f4f780e6fd92c9455c2\/src\/platforms\/web\/runtime\/modules\/events.js#L74)\r\n    ```js\r\n    \/\/ #10366 Adobe CEP bug: event.timeStamp is not reliable\r\n    isCEP ||\r\n    ```\r\n\r\nYou will note that the above solution does not distinguish between macOS and Windows hosts (the latter of which does not have this issue). This would be for cross-platform consistency. It could easily be amended to check for macOS with something akin to the following:\r\n\r\n```js\r\n\/mac\/.test(window.navigator.platform.toLowerCase()); \/\/ True on macOS; false otherwise.\r\n```\r\n\r\nI have tested this locally and the above does appear to resolve the issue. Thoughts? Concerns?","I imagined it would be that, that's why I was asking about a nw.js version that we could target\r\nIt is weird that it doesn't appear on windows though, it would be worth seeing the differences in terms of user agent between them","I have no idea about whether `nw.js` would be similarly affected. Someone internal at Adobe would need to chime in there. @bbb999 perhaps?\r\n\r\nThe User Agent reported for Premiere Pro 13.1.4 on macOS 10.14.6 is as follows:\r\n```\r\nMozilla\/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/61.0.3163.91 Safari\/537.36\r\n```\r\nI've asked others if they can provide the Windows equivalent. Given that the _only_ difference between CEP's User Agent and the Chrome browsers' is the Chrome version, I'd be willing to bet it looks identical to a standard Windows Chrome User Agent for Chrome 61.0.3163.91...","@posva Here are the two User Agent versions:\r\n\r\nFrom **After Effects 16.1.2 on Windows 10**:\r\n\r\n```\r\nMozilla\/5.0 (Windows NT 10.0; WOW64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/61.0.3163.91 Safari\/537.36\r\n```\r\n\r\nFrom **Premiere Pro 13.1.4 on macOS 10.14.6**:\r\n\r\n```\r\nMozilla\/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/61.0.3163.91 Safari\/537.36\r\n```\r\n\r\nThe CEP version determines the User Agent. See [this table](https:\/\/github.com\/Adobe-CEP\/CEP-Resources\/blob\/master\/CEP_9.x\/Documentation\/CEP%209.0%20HTML%20Extension%20Cookbook.md#chromium-embedded-framework-cef) for a rough outline.","Okay, thanks a lot for the research. In that case I think the best option we have here is to use the check you showed at https:\/\/github.com\/vuejs\/vue\/issues\/10366#issuecomment-525424657.\r\nYou could integrate the code modification (there is no need for a test in this scenario) and create a PR. I won't be able to check it since I don't have the adobe suite but hopefully other people could give feedback and it shouldn't break anything for others","@posva Sounds good to me. Do you have any input on whether or not I should add the macOS platform check to restrict the fix to macOS? If yes, do you have a suggestion on detection approach? Either of these should work:\r\n\r\n1. ```js\r\n   \/mac\/.test(window.navigator.platform.toLowerCase())\r\n   ```\r\n1. ```js\r\n   UA && \/mac os x\/.test(UA)\r\n   ```\r\n\r\nAlso, I just heard that the issue is fixed in the upcoming versions of the Adobe apps. I'm getting version information from them right now. This will allow me to further restrict the workaround to affected versions (the version check can be based on the version code I pointed to at the end of [this comment](https:\/\/github.com\/vuejs\/vue\/issues\/10366#issuecomment-519644448)).","Here is a proposal for a snippet of code to add to event.js (somewhere around [here](https:\/\/github.com\/vuejs\/vue\/blob\/d40b7ddb8177944d1dd50f4f780e6fd92c9455c2\/src\/platforms\/web\/runtime\/modules\/events.js#L46)):\r\n\r\n```js\r\n\/\/ #10366: CEP <= 9.3.x on macOS has a buggy Event.timeStamp implementation.\r\nconst isMacCEP93orEarlier = isCEPMac && ((maxBadMajor, maxBadMinor) => {\r\n  const version = JSON.parse(window.__adobe_cep__.getCurrentApiVersion())\r\n  return version.major <= maxBadMajor && version.minor <= maxBadMinor\r\n})(9, 3)\r\n```\r\n\r\nThis `isMacCEP93orEarlier` flag would restrict the standard flow elision to only affected CEP versions on macOS.\r\n\r\nIn the above example, `isCEPMac` would be defined as follows in env.js:\r\n\r\n```js\r\nexport const isCEP = inBrowser && window.__adobe_cep__ !== 'undefined'\r\nexport const isCEPMac = isCEP && UA && \/mac os x\/.test(UA)\r\n```\r\n\r\nDoes this look reasonable? Are the variable names okay?\r\n\r\n(The above code works in my environment.)","> @posva Sounds good to me. Do you have any input on whether or not I should add the macOS platform check to restrict the fix to macOS?\r\n\r\nIdeally, the program should behave the same on CEP osx vs CEP windows\r\n\r\nOther than that the checks you wrote look good","I can confirm that @ericdrobinson's PR fixes the issue for me on Photoshop CC 2019 macOS","Awesome! Thanks for giving it a shot @derrickb! For the record, I've tested the fix on Premiere Pro CC 2019 on macOS and everything looks good!","Hi all, huge thank you for finding and fixing this bug. I spent the last couple days going crazy over debugging this, and I'm so happy to see this here. \r\n\r\nThis bug is causing our panel to be practically unusable in production in mac environments, and I wanted to ask how I could get this bugfix into our system? I really rather not wait for this to be merged & published. Is there a way to patch a bugfix such as this?\r\n\r\nAgain, huge kudos to finding and fixing this bug.\r\n\r\nEDIT: I decided to go with [patch-package](https:\/\/www.npmjs.com\/package\/patch-package).\r\n\r\nEDIT 2 : I really can't seem to make it work. I am having a lot of trouble building vue from source code. I hope this gets accepted as a fix ASAP.",">EDIT: I decided to go with patch-package.\r\n\r\nProbably wouldn't work. This PR only contains fixes for the source code - no `dist` modifications were committed. You'd have to grab this PR and run the correct build command to output the version of Vue that you need.\r\n\r\n\r\n>I wanted to ask how I could get this bugfix into our system?\r\n\r\n@atwhiteley Provided you only need the ESM build, you can use the branch I prepared on my own fork of the `vue` repository. Here's how you would install it with NPM:\r\n\r\n```\r\nnpm uninstall --save vue\r\nnpm install --save ericdrobinson\/vue#v2.6.10-with-cep-fix\r\n```\r\n\r\nIf you need a different build, you can do the following:\r\n\r\n1. Fork my `vue` repository on GitHub.\r\n1. Create your own branch off of my [`fix-adobe-cep-mouse-events`](https:\/\/github.com\/ericdrobinson\/vue\/tree\/fix-adobe-cep-mouse-events) branch.\r\n1. Build the version of Vue that your setup needs and commit it to your branch.\r\n1. Run the following in your project:\r\n    ```\r\n    npm uninstall --save vue\r\n    npm install --save atwhiteley\/vue#[your-branch-name]\r\n    ```\r\n\r\nThis approach works perfectly for us.","@ericdrobinson  Thanks a lot - I'm actually not a 100% sure which build we use but I'll check that now, though I think it's not the ESM one.\r\n\r\nI did fork vue and already did create a separate branch - but I ran into trouble trying to build the source code.\r\n\r\nYour response tells me I'm on the right path so I'll keep trying, thanks!\r\n\r\nUPDATE: It was my own stupid mistake that I couldn't build it, resolved it, built the files - and now my project is in good shape again in adobe premiere! \r\n\r\n\r\n","I've just observed the same behavior in CEF 79.1.28 on Windows 10. The problem can be reproduced with the following conditions:\r\n\r\n- Vue >2.5.17\r\n  - Click Events work fine when downgrading to Vue <= 2.5.17\r\n- CEF started with `--off-screen-rendering-enabled`\r\n  - Click Events work fine when CEF is started without off screen rendering\r\n  - I assume that CEP is using the off screen rendering inside the Adobe products\r\n- Windows \"Fast startup\" is enabled and the computer was actually started after a real shutdown \r\n  - Click Events work fine when \"Fast startup\" is disabled\r\n  - Click Events work fine after a restart\r\n  - see https:\/\/www.windowscentral.com\/how-disable-windows-10-fast-startup for more information\r\n\r\nThere is an issue reported on the CEF repo: https:\/\/bitbucket.org\/chromiumembedded\/cef\/issues\/2749\/osr-results-in-weird-eventtimestamp-values\r\n\r\nMaybe someone could check if the problem can be reproduced on their Windows 10 machine. CEF builds can be downloaded via http:\/\/opensource.spotify.com\/cefbuilds\/index.html (I've used cef_binary_79.1.28+gf272726+chromium-79.0.3945.117_**windows64_client.tar.bz2**)\r\n\r\nIf this is the case, then I would adapt the PR #10459 from @ericdrobinson to detect CEP and CEF.","Hey there! \r\nThis PR https:\/\/github.com\/vuejs\/vue\/pull\/11031 looks good to fix the issue. Similar to the PR mentioned https:\/\/github.com\/vuejs\/vue\/pull\/10459 but more agnostic of the platform involved","@joaomlemos #11031 does not mention CEP applications at all. Have you tested that PR in a CEP context? If so, which application and which version?\r\n\r\nI'm also not sure if the new logic in #11031 isn't so broad that it would negate the purpose of the check to begin with... Someone on the Vue team would need to weigh in on that. @posva perhaps?","@ericdrobinson, I didn\u2019t tested it with CEP applications. The issue that I\u2019m facing is in CEF applications. The same issue was mentioned by @boardend in the comment above https:\/\/github.com\/vuejs\/vue\/issues\/10366#issuecomment-574723737 \r\n","@joaomlemos Then, to be clear, you can **only** confirm that the proposed fix in #11031 handles the CE**F** case that @boardend mentioned, yes?\r\n\r\nThis is important because, if so, you cannot globally declare that #11031 fixes the issue for CE**P** as well, which your [initial comment](https:\/\/github.com\/vuejs\/vue\/issues\/10366#issuecomment-586047251) seemed to somewhat ambiguously imply.\r\n\r\nAlso, if this is the case, then it may be a good idea to comment on #11031 with a link to @boardend's comment above and mention on that PR that in your testing it seems to address the CE**F** problem.\r\n\r\n---\r\n\r\nI would still suggest that someone more familiar with the code in question take a good look at the proposed solution in #11031 as it seems that it _might_ be a little too \"lenient\".","Right, thank you for your suggestion @ericdrobinson !","@ericdrobinson \r\n\r\nSolution coudn't be so \"lenient\" because of first check is excludes browsers with normal timestamp behaviour.\r\n\r\nThe solution only extends a first crutch(e.currentTarget === e.target)","I think the problem is actually happend with CEF (Chrome Embeded Framework) \r\nI hit this issue https:\/\/stackoverflow.com\/questions\/60473957\/cef-vuejs-performance-issue-on-listening-mouse-click-event-after-4-5-times-ren#\r\n\r\n*note , this question is not asked by me, that mean other people hit it too*","@John0King That may very well be a separate core issue with a similar result. While Adobe CEP does indeed build on CEF, the issue described here explicitly occurred only on [macOS hosts](https:\/\/github.com\/vuejs\/vue\/issues\/10366#issuecomment-521068621). The CEF version in Adobe CEP is also relatively ancient, whereas the issue you posted describes _far_ more recent versions of CEF.\r\n\r\nThis issue [has an associated PR](https:\/\/github.com\/vuejs\/vue\/pull\/10459) that focuses the solution to as narrow a scope as possible. I would recommend opening a new issue and describe exactly the kind of values you're seeing for the event `timeStamp` that are causing the problem you're experiencing.","2022 and its still a thing..."],"labels":["contribution welcome","browser quirks","has PR"]},{"title":"feat(compiler): allow inline async functions in event handlers","body":"This allows using `async` inline functions in v-on event handlers https:\/\/github.com\/vuejs\/vue\/issues\/10338\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [X] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [ ] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [x] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","comments":["LGTM \ud83d\udc4d "],"labels":["semver:minor"]},{"title":"Create an \".async\" modifier for event handlers ","body":"### What problem does this feature solve?\r\nIn an event handler, one can easily mix property modifications and method calls (which is great), as in:\r\n\r\n    <span @click=\" accumulator += fetchNextItem() \">do it<\/span>\r\n\r\nHowever, if the called method is async, one need to actually wrap this code in an additional method like:\r\n\r\n    <span @click=\" fetchAndAccumulateNextItem() \">do it <\/span>\r\n    ....\r\n    methods: {\r\n        async fetchAndAccumulateNextItem() {\r\n            this.accumulator += await this.fetchNextItem()\r\n        },\r\n        async fetchNextItem() { .... } \/* unmodified *\/\r\n    }\r\n\r\nThis can be slightly inconvenient if there are many asynchronous methods of which we use the return value.\r\nI think this might become more and more common as people start understanding and using async\/await more and more.\r\n\r\nInitial context: I have a very specific use case of a vuejs<->python bridge that makes (among other things) all the python-written method callable from vuejs, but as the call goes through websockets, all methods end up async. https:\/\/github.com\/twitwi\/vuejs-python\r\n\r\n\r\n### What does the proposed API look like?\r\nI'd suggest a \".async\" modifier that would allow for \"await\" in the event handler snippet.\r\nFor the example above, it would be written as:\r\n\r\n    <span @click.async=\" accumulator += await fetchNextItem() \">do it<\/span>\r\n\r\n(this is probably useful for all types of events, not only click)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I don't think it's worth adding another modifier that only serves a very few uses cases: there are not many cases where the code is still readable when doing an `await` inside an event handler **in the html**. You don't need to create a method, you should be able to do:\r\n\r\n```vue\r\n<span @click=\" async () => accumulator += await fetchNextItem() \">do it<\/span>\r\n```\r\n\r\nYou could also create your own function helpers that are accessible globally like `asyncAdd`:\r\n\r\n```vue\r\n<span @click=\" asyncAdd(accumulator, fetchNextItem())\">do it<\/span>\r\n```\r\n\r\nwhich ends up being shorter than the proposal.\r\n\r\nLet's wait for more feedback on this\r\n","Thanks for the reply.\r\nI like the first workaround, I'd give it a try",":+1:\r\nFor some reason, I needed to add some parentheses around it, but it works well.\r\nFor the record, I give the result here.\r\n\r\nFor the example above, this yields:\r\n~~~vue\r\n<span @click=\"(async () => accumulator += await fetchNextItem())\">do it<\/span>\r\n~~~\r\n\r\nFor my use case (with affecting an attribute), this gives:\r\n~~~vue\r\n<a @click=\"(async()=> title = await fetchTitle())\">fetch<\/a>\r\n~~~\r\n\r\nOr, alternatively, inspired by the second suggestion:\r\n\r\n~~~vue\r\n    <a @click=\"asyncSet('title', fetchTitle())\">fetch<\/a>\r\n~~~\r\n~~~javascript\r\n    methods: {\r\n        async asyncSet (attr, asyncVal) {\r\n            this.$set(this, attr, await asyncVal)\r\n        },\r\n    }\r\n~~~\r\n\r\nThanks again for the workarounds.\r\n","@posva it looks like the parser doesn't understand async function expressions. Here's the compiler output:\r\n\r\n```js\r\nfunction render() {\r\n  with(this) {\r\n    return _c('span', {\r\n      on: {\r\n        \"click\": function ($event) {\r\n          async () => accumulator += await fetchNextItem()\r\n        }\r\n      }\r\n    }, [_v(\"do it\")])\r\n  }\r\n}\r\n```\r\n\r\n[async inline function epxression demo](https:\/\/template-explorer.vuejs.org\/#%3Cspan%20%40click%3D%22%20async%20()%20%3D%3E%20accumulator%20%2B%3D%20await%20fetchNextItem()%20%22%3Edo%20it%3C%2Fspan%3E)\r\n\r\nIt appears to nest the entire string inside a normal function. Should this issue be re-purposed or create a new one?\r\n\r\nI'm guessing the expected output should be:\r\n\r\n```js\r\nfunction render() {\r\n  with(this) {\r\n    return _c('span', {\r\n      on: {\r\n        \"click\": async () => accumulator += await fetchNextItem()\r\n      }\r\n    }, [_v(\"do it\")])\r\n  }\r\n}\r\n```","@sirlancelot you are right, I adapted the compiler to allow it: https:\/\/github.com\/vuejs\/vue\/pull\/10361","This works for me:\r\n`@input=\"(async function(){myVariable= await _queryVals($event)})()\"`\r\nbut this failed:\r\n`@input=\"(async ()=>{myVariable= await _queryVals($event)})()\"`\r\n\r\n>Syntax Error: SyntaxError: await is a reserved word\r\n\r\nIt appears I can't use await inside an arrow function inside of an inline event handler.\r\n"],"labels":["feature request","discussion"]},{"title":"Component is re-renedered when DOM changes around it","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/Richm8\/pen\/VoWZQZ](https:\/\/codepen.io\/Richm8\/pen\/VoWZQZ)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nIn the attached codepen, Open console and then click on the toggle button, you'll see that the created and destroyed hooks are called for the `logger` component even though the component is not having any manipulations performed on it.\r\n\r\n### What is expected?\r\nThe created and destroy hooks on `logger` not to be called\r\n\r\n### What is actually happening?\r\nThe created and destroy hooks on `logger` are being called\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Looks like a duplicate of https:\/\/github.com\/vuejs\/vue\/issues\/4362, here the divs are replaced, triggering the children destruction creation\r\n\r\nI'm leaving this open for the moment because I'm not sure it's a duplicate, as a workaround, you must key the `div` container the logger","Thank you for the workaround, I tired searching before making the issue but it\u2019s hard to know what to search for","yeah, it's not an easy one to find","Could someone explain a bit more in depth how the workaround is applied? My issue relates to #9473 but some clarity would be greatly appreciated.","From my codepen example, it was as simple as adding a key on the div which wrapped the element being incorrectly rendered.\r\n\r\n```vuejs\r\n<div class=\"my-4\">\r\n    <logger \/>\r\n<\/div>\r\n```\r\n\r\nbecame:\r\n```vuejs\r\n<div key=\"logger\" class=\"my-4\">\r\n    <logger \/>\r\n<\/div>\r\n```","I see, thank you. Unfortunately that is not working on my end for components with iframes or an iframe nested but it could be for other reasons as I am working in Nuxt."],"labels":["has workaround"]},{"title":"nested v-slot is not reactive when using abbreviated syntax (v-slot on component itself) combined with an v-if\/v-else","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/vue-template-j1w3r](https:\/\/codesandbox.io\/s\/vue-template-j1w3r)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nIn my example change the value by typing in the input field.\r\nIn the working example both values change.\r\nIn the not working example only the nested value changes.\r\nThe only difference is the wrapping `<template>` node\r\n\r\n### What is expected?\r\nscoped slot params (controllerSlotData) should be reactive in both cases\r\n\r\n### What is actually happening?\r\nscoped slot params (controllerSlotData) is not reative\r\n\r\n---\r\nThe problem exists only when combining v-slot on component itself in combination with v-if\/v-else\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I don't know why I didn't see this issue before opening #11553... Anyway, do you know when #10377 will be merged?"],"labels":["bug","has workaround"]},{"title":"Add JSDoc to types","body":"### What problem does this feature solve?\r\nThis will improve the developer experience when using Vue in editors such as VSCode.\r\n\r\nCurrently, the developer must look up the default value in the [documentation](https:\/\/vuejs.org\/v2\/guide\/components-props.html#Prop-Validation). And even there it is not clear, without trying it.\r\n\r\n### What does the proposed API look like?\r\nOne example:\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/b7c2d9366cf731a1551286b8ac712e6e0905070e\/types\/options.d.ts#L155\r\n\r\nThis line could get a JSDoc like:\r\n```\r\nIndicates whether the property must be set or is optional. Default is `false`.\r\n```\r\n\r\n### Example Result\r\n![Bildschirmfoto 2019-07-29 um 11 03 36](https:\/\/user-images.githubusercontent.com\/7195563\/62035661-91545000-b1f0-11e9-928d-f4f82cd6fb2b.png)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Wanted to implement this, realized that while the guide section of the documentation does not provide clear information about default values, the [api section](https:\/\/vuejs.org\/v2\/api\/#props) does.\r\n\r\nHaving a second source of truth to the official documentation is likely to cause more confusion than be convenient down the line. (outdated JSDoc comments are easily overlooked)\r\n\r\nOpinions?","@ww7w could the JSDoc be used to generate the documentation?","@kinow its definitely possible, but having to write the API documentation inside of type definition files introduces its own separation of concerns issues.\r\n\r\nAlso, JSDoc doesn't have one unified spec, which makes it hardly suitable for anything more than short comments like the one in the example."],"labels":["improvement"]},{"title":"Consistency in `$refs`: all children of $refs array using same format.","body":"### What problem does this feature solve?\r\nI know this is intended as a feature, but I encountered a lot of issues when trying to access $refs due to all the different formats:\r\n\r\n- If `ref` is inside a `v-for`, the `$refs` element will be an array. This wouldn't be necessary since is trivial to add an unique name to the `ref` inside a loop, [as seen in this example](https:\/\/forum.vuejs.org\/t\/this-refs-theid-returns-an-array\/31995\/4)\r\n- If `ref` is outside of a `v-for`, it will be a DOM Node.\r\n- Except that when the referenced item is a custom component, then it will be an object and to access the DOM node you would have to read the `$el` property...\r\n\r\nSo basically, if we wanted to select a ref's node, and we wouldn't know if it's a node or a custom component, if it's in a for-loop or not, this would be the code:\r\n\r\n```\r\nconst ref = (this.$refs.test && this.$refs.test[0] && this.$refs.test[0].$el) ? this.$refs.test[0].$el\r\n    : (this.$refs.test && this.$refs.test.$el) ? this.$refs.test.$el\r\n    : (this.$refs.test && this.$refs.test[0]) ? this.$refs.test[0]\r\n    : this.$refs.test ? this.$refs.test\r\n    : null;`\r\n```\r\n\r\nSo far I've never encountered this case, but I did encounter:\r\n\r\n- The case where the ref could be either a node or a custom component \u2014 I wanted to add a class and remove it with a timeout, for animation purposes. At the end, my workaround was to create a custom component to handle the \"empty state\" of a component, to consistently be able to reference the node using `.$el` (this was easier than refactoring all the parts where `.$el` was being referenced)-\r\n- The case where the ref could either be a node or an array of nodes, in a case of a list that had a default value (the default value was outside of the \"for loop\").\r\n\r\n\r\nMy proposal is to have a consistent way of referencing a node\/component inside templates.\r\n\r\nAn idea I found in [another issue of this repo](https:\/\/github.com\/vuejs\/vue\/issues\/2044) is to use a special syntax when the ref is expected to be an array:\r\n\r\n```\r\n<div ref:multiple=\"example\"><\/div>\r\n```\r\n\r\nAnother part of the proposed change is to be able to access the DOM Node using `$el` (__always__ and exclusively that way). \r\n\r\nSince this is a breaking change, it would be interesting to hear workarounds for this. For example, using a different keyword altogether.\r\n\r\nIn general, I think this would add a lot of sanity and consistency to the usage of `$refs`, and I think it's a common issue for a lot of beginners.\r\n\r\nNote: this feature request is not compatible with [this other feature request](https:\/\/github.com\/vuejs\/vue\/issues\/4035)\r\n\r\n### What does the proposed API look like?\r\n``` vue-html\r\n<!-- Refs inside loops: -->\r\n<div v-for=\"...\">\r\n    <div ref:multiple=\"example\"><\/div>\r\n    (or ref:nested=\"example\")\r\n<\/div>\r\n```\r\n\r\n``` js\r\n\/\/ Refs array\r\n[\r\n    0: { $el: <div><\/div> }, \/\/ simple node item\r\n    1: { $el: <div><\/div>, methods, data, etc..... }, \/\/ ref in custom component\r\n    ...\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Reworking refs as a breaking change should go through an RFC as it needs a deeper consideration of what is breaking.\r\n\r\nTo me the problem you are facing isn't clear and I'm not sure if it's a documentation problem instead. Some of the issues you are referencing are too old and now outdated in term of initial problem and comments, so let's keep this open as a discussion for the moment\r\n\r\nRegarding many of your points, I wanted to clarify on some of those:\r\n\r\n> f ref is inside a v-for, the $refs element will be an array. This wouldn't be necessary since is trivial to add an unique name to the ref inside a loop, as seen in this example\r\n\r\nIt's not the same, as having an array allows you to iterate through it, while having variable names with indexes attached to it doesn't if one of them is skipped with a v-if or other\r\n\r\n> If ref is outside of a v-for, it will be a DOM Node.\r\n\r\nOr a component\r\n\r\nThat example is quite misleading, such complexity would only exist in a case where all posibilities for ref exist in the same template. In which scenario the template itself would be a bigger problem probably\r\n\r\n> The case where the ref could be either a node or a custom component \r\n\r\nThat is a feature, limiting refs to just elements would not allow calling methods on the component and other patterns\r\n\r\n> The case where the ref could either be a node or an array of nodes, in a case of a list that had a default value (the default value was outside of the \"for loop\").\r\n\r\nIn that case there must be some conditional switching between the `v-for` + `ref` version and the regular `ref`, that same conditional could be used to know if `ref` should be treated as an array or as a single element (from a business-logic perspective). Most of the cases the handling is similar and using an `Array.isArray` check is enough\r\n"],"labels":["discussion"]},{"title":"dynamic v-slot maybe overwite when used together with v-for on same element","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/zrh122\/scg6eq1t\/](https:\/\/jsfiddle.net\/zrh122\/scg6eq1t\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. open the reproduction link\r\n2. look at the rendered result\r\n\r\n### What is expected?\r\n```js\r\na: a\r\nb: b\r\n```\r\n\r\n### What is actually happening?\r\n```js\r\na:\r\nb: b\r\n```\r\n\r\n---\r\nThis is an english version of issue #10165.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["bug","has workaround"]},{"title":"v-bind not update dom in client side when data in client side is different from the server side","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/github.com\/maunier\/nuxt-learning](https:\/\/github.com\/maunier\/nuxt-learning)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nnpm install\r\nnpm run dev\r\nhttp:\/\/127.0.0.1:8080\/\r\n\r\n### What is expected?\r\ni expect the div is like this:\r\n```\r\n<div text=\"isClient\">isClient<\/div>\r\n```\r\n\r\n### What is actually happening?\r\nbut now it is:\r\n```\r\n<div text=\"isServer\">isClient<\/div>\r\n```\r\n\r\n---\r\nit is not Nuxt's issue, I have tested in my own vue-ssr server without Nuxt, the problem is exsist still.  but the that project is not on the github, so i paste the nuxt project's link here\r\n\r\nthe core code is like this:\r\n```\r\n<div :text=\"text\">{{ text }}<\/div>\r\n```\r\n```\r\ndata () {\r\n      return {\r\n        text: ''\r\n      }\r\n    },\r\n\r\n    created () {\r\n      this.text = Vue.prototype.$isServer ? 'isServer' : 'isClient'\r\n    },\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Seems to be related to https:\/\/github.com\/vuejs\/vue\/issues\/7787, it looks like a bug to me but I might not considering something\r\n\r\nso a workaround is to use a `ref` on the element","I didn't say it, but next time please provide a real repro not a project you are testing things on. I created o bare foot Nuxt project to repro it and a correct minimal repro would have been what was provided at https:\/\/github.com\/vuejs\/vue\/issues\/9231","> so a workaround is to use a `ref` on the element\r\n\r\n@posva could you elaborate on this comment for me to understand what does `ref` do to make `v-bind` work?\r\n\r\nI have a similar problem that is reported in #11398 which the workaround that you suggested here fixed it."],"labels":["bug","has workaround"]},{"title":"Cannot bind external web-component's 'value' property as an object","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/embed.plnkr.co\/2KKE9ixZJLrRB6FUNIou\/](https:\/\/embed.plnkr.co\/2KKE9ixZJLrRB6FUNIou\/)\r\n\r\n### Steps to reproduce\r\nSteps to reproduce (see the attached plunkr):\r\n\r\n1. Create a web-component (not using Vue).\r\n2. Expose a 'value' property in this web component that accepts\/returns non-string objects (e.g. a Date object).\r\n3. Instantiate the web component in Vue and bind the property using :value.prop syntax\r\n\r\n### What is expected?\r\nThe object is passed as is.\r\n\r\n### What is actually happening?\r\nThe object is converted to string before being set to the web-component 's property.\r\n\r\n---\r\nIt is more and more common to include third party components written in other frameworks and directly use it in Vue.\r\nHowever, it seems that the Vue code always expect the 'value' property to be of type string. Let's suppose to import a date selector as ES5 web custom component, that defines the 'value' property to be a Date object.\r\nVue will always pass this value as string instead. Using a different property name works as expected.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["We do handle the `value` differently, we cast it as a string. I'm not sure if we should avoid this in all `ignoredElements` or only on registered components but I don't know if periodically checking has a perf impact.\r\n\r\nInternally we also set the element's `_value` to the original value, so it's funny but the way to workaround the problem is by not calling `this._value = v` in your code because it's already done by Vue","Any updates on this?"],"labels":["has workaround"]},{"title":"Wrong definition of the type AsyncComponentFactory","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/github.com\/vuejs\/vue](https:\/\/github.com\/vuejs\/vue)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. compare the [AsyncComponentFactory](https:\/\/github.com\/vuejs\/vue\/blob\/dev\/types\/options.d.ts) definition with the [document](https:\/\/vuejs.org\/v2\/guide\/components-dynamic-async.html#Handling-Loading-State)\r\n\r\n### What is expected?\r\nattribute 'component'  should be a promise\r\n\r\n### What is actually happening?\r\nAsyncComponentPromise\r\n\r\n---\r\nI'm looking forward to your solution to this [issue](https:\/\/github.com\/vuejs\/vue\/issues\/9788)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["It seems the type should be `Promise<Component | EsModuleComponent>`","Is this issue still available","@harshajayaweeraXHJ  The issue already has a PR","Any update here?","guys i wanna make things done\r\n\r\nSVG click event is not working..\r\n\r\nhttps:\/\/github.com\/tulpauction001\/tulp\r\nhttps:\/\/tulpauction001.github.io\/tulp\/path.html","is anyone working on this  issue ?","@guptadeepak8 This issue already has a PR but looks like it still needs to be merged.","Need help\r\n","@adamcole123 Seems like it, this PR has gone unnoticed.","I have the need to understand this proposed of resolution.","\u0644\u0642\u062f \u0645\u0631\u062a \u0647\u0630\u064a \u0627\u0644\u0639\u0644\u0627\u0642\u0627\u062a \u0627\u0644\u0639\u0627\u0645\u0647 \u0644\u0627\u0633\u062a\u0637\u064a\u0639 ","> ### Version\r\n> 2.6.10\r\n> \r\n> ### Reproduction link\r\n> https:\/\/github.com\/vuejs\/vue\r\n> \r\n> ### Steps to reproduce\r\n> 1. compare the [AsyncComponentFactory](https:\/\/github.com\/vuejs\/vue\/blob\/dev\/types\/options.d.ts) definition with the [document](https:\/\/vuejs.org\/v2\/guide\/components-dynamic-async.html#Handling-Loading-State)\r\n> \r\n> ### What is expected?\r\n> attribute 'component' should be a promise\r\n> \r\n> ### What is actually happening?\r\n> AsyncComponentPromise\r\n> \r\n> I'm looking forward to your solution to this [issue](https:\/\/github.com\/vuejs\/vue\/issues\/9788)\r\n\r\n.5","i get a lot of those oh and hi ","if u want me to help then I'll be happy to","Is this issue still available?","> Is this issue still available\r\nvue@2.6.10 Is it not maintained now, so what is the point of solving this issue?\r\n","Is this issue still available?"],"labels":["good first issue","typescript","has PR"]},{"title":"Vue does not work properly when setting the SVG style property in a lower version of the android browser","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/anon\/pen\/XLyPJe](https:\/\/codepen.io\/anon\/pen\/XLyPJe)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nenvironment:\r\n- qqBrowser 4.4\r\n- android 4.2.2\r\n- userAgent Mozilla\/5.0 (Linux; U; Android 4.2.2; zh-cn; Coolpad 8297 Build\/JDQ39) AppleWebKit\/533.1 (KHTML, like Gecko)Version\/4.0 MQQBrowser\/4.4 Mobile Safari\/533.1\r\n\r\n### What is expected?\r\nrender normally\r\n\r\n### What is actually happening?\r\nalert\r\nTypeError Cannot set property 'undefined' of null\r\n\r\n---\r\nif i remove `style=\"stroke: #FFDA05;\"` on SVG, it will be ok\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Everything seems to work fine on Android 4.2 and 4.1 with Chrome. I have no way to test on qqBrowser.\r\nCould you try by using `:style.prop=\"'stroke: #FFDA05;'\"` instead?","> Everything seems to work fine on Android 4.2 and 4.1 with Chrome. I have no way to test on qqBrowser.\r\n> Could you try by using `:style.prop=\"'stroke: #FFDA05;'\"` instead?\r\n\r\nIf I using `:style.prop=\"'stroke: #FFDA05;'\"`  instead, it is working fine.\r\nBut, \r\nthis is because it is assigned like this by using the `prop` modifier.\r\n![image](https:\/\/user-images.githubusercontent.com\/15967520\/60886187-e0f3cb80-a283-11e9-921a-299b5ae84653.png)\r\n\r\n\r\nIn general, Vue is updating `style` through `setProp`.\r\n![image](https:\/\/user-images.githubusercontent.com\/15967520\/60886091-af7b0000-a283-11e9-97b7-64746fde9f7c.png)\r\n\r\nIn some Android browsers that don't support SVG, The style attribute of the Element generated by createElementNS is null.\r\n![image](https:\/\/user-images.githubusercontent.com\/15967520\/60886356-53fd4200-a284-11e9-8d0d-b978ba39d48c.png)\r\n(`vnode.elm.style` is null.)\r\n\r\nThere is also a problem with using `v-show` in this case.\r\n"],"labels":["need repro"]},{"title":"feat(warn): Warn on colon shorthand usage on directive (fix #10191)","body":"fix #10191\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [x] New\/updated tests are included\r\n\r\n\r\n**Other information:**\r\n\r\n```html\r\n<template>\r\n  <div v-if=\"something\">foo<\/div>  <!-- does not throw a warning -->\r\n  <div :v-if=\"something\">foo<\/div> <!-- throws a warning -->\r\n<\/template>\r\n```\r\n\r\nThere are several things I _decided_ that could be improved, so any advice or suggestion is greatly appreciated :)\r\n\r\n- PR shows a warning for every bound attribute starting with `v-`. The reasoning is that \"The v- prefix serves as a visual cue for identifying Vue-specific attributes in your templates.\" ([source](https:\/\/vuejs.org\/v2\/guide\/syntax.html#Shorthands))\r\n- Do we need more test cases?\r\n- Is the warning message clear enough? If the attribute is not a valid Vue directive, should the message change?\r\n\r\nThanks!","comments":["np! Actually I was about to add that bit too \ud83d\ude02 but after not seeing it in the suggestion I restrained myself. Updated!","Can't this PR be merged? :) "],"labels":["semver:minor"]},{"title":"Warn if colon shorthand is used on v-if\/v-html\/etc.","body":"### What problem does this feature solve?\r\nI just spent way too long debugging something really weird until I realized I accidentally wrote `:v-if` instead of `v-if`. \r\n\r\nA warning when wrongly using shorthands like `:` on \"native\" vue attributes could prevent this bad experience easily. \r\n\r\n### What does the proposed API look like?\r\n`:v-if=\"foo\"`\r\n\r\n--> console.warn(\"You specified v-bind:\/ v-on: or a corresponding shorthand on a Vue attribute like v-if or similar. Usually this does not make sense.)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I've seen this happen so often when teaching Vue that even though having a prop named `vIf` is technically valid, I think this warning would help much more people than ever hurt","Yes. If you wanted a prop, why should have the same name as a `v-`attribute. That'd be incredibly confusing.\r\n\r\n```\r\n<ConfusingComponent \r\n  v-if=\"true\"\r\n  :v-if=\"false\"\r\n\/>\r\n\r\n```","I'll take this on.  It'll be my first issue here.","Thanks but as the tag suggest there is already a Pull request for this","\u4e60\u60ef\u5c31\u597d","@simonhermann ","I was going to give it a go but it seems there's a super old PR for this already  ","Why is this issue still open?","Niu Bi"],"labels":["contribution welcome","feature request","good first issue","has PR","warnings"]},{"title":"Can't use the new v-slot syntax inside a template tag that is there only for conditional purposes","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/vue-template-9r28t](https:\/\/codesandbox.io\/s\/vue-template-9r28t)\r\n\r\n### Steps to reproduce\r\nVisit the repo and check out the template compilation error for `App.vue`. Remove the `<template v-else>` to get rid of the error.\r\n\r\n### What is expected?\r\nThe template compiles properly\r\n\r\n### What is actually happening?\r\nThe template doesn't comiple\r\n\r\n---\r\nVue should allow to use slots inside a template tag that is inside component. Without this, the new slot syntax severely limits how one can put content into slots in more complex scenarios and forces repeating yourself on multiple template tags.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Duplicate of https:\/\/github.com\/vuejs\/vue\/issues\/7904","I'm confused because it doesn't work with the old syntax either, but it sounds like it did work for you with the old syntax","Now I am confused. It works with the old syntax. This is the same code as above just the slot syntax is different: https:\/\/codesandbox.io\/s\/vue-template-crbwt\r\n\r\nSorry for a duplicate, I haven't found it even though I was looking for it.","My bad, I was using both syntaxes at the same time. The other issue now works, so I'm not sure about so maybe it was reconsidered later and something is missing in the new implementation"],"labels":["improvement"]},{"title":"Only last element is accessible using ref in template-based functional components inside v-for loops","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/vue-template-bqe44?fontsize=14](https:\/\/codesandbox.io\/s\/vue-template-bqe44?fontsize=14)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Create a functional component\r\n2. Use that functional component inside a v-for\r\n3. Add a ref binding to the functional component to be able to get the DOM element in parent component\r\n\r\n### What is expected?\r\nThe ref in parent component is an array of DOM elements, like it is an array of vNodes when applying this steps to a non-functional component\r\n\r\n### What is actually happening?\r\nOnly the last DOM element of the v-for is bound to the ref. It's also just an element and not an array\r\n\r\n---\r\nThere's no warning about overriding previously existing ref\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["You need to pass down `data.refInFor` too, idk if that's possible without using render functions. ","Not sure what is the best way to handle this because the information about being in a v-for should be passed from the parent in the `context` and then passed down somehow to the `div`, maybe that last part should be picked up by vue-loader","@KaelWD Doesn't look like `ref-in-for` can be passed down in a template-based component.\r\n\r\n@posva Makes sense to me that vue-loader is the one responsible of passing that info. However, shouldn't Vue itself warn when some ref is being overwritten by a different one? Looks like an unexpected behaviour even though it's the intended one.\r\n\r\nJust for the record, the solution I ended up implementing is just wrapping those template-based functional components in a div and having only one ref for that div. It's not the ideal solution but it's the easiest way I've found.","The same issue with regular elements, like `input` if it has `v-model` attached.\r\nReplacing v-model `:value` and `@input` could be used as workaround in such case.\r\nThis behaviour should be changed, or at least mentioned in the documentation."],"labels":["improvement","has workaround"]},{"title":"Add context to warn message when adding reactive properties to an instance at runtime","body":"### What problem does this feature solve?\r\nThe  ` [Vue warn]: Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option.` message doesn't provide any insight about the component being affected or the property being set. Having those in place would make the deubbing way more easier.\r\n\r\n### What does the proposed API look like?\r\n` [Vue warn]: Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option. Property being added: 'propertyName'.\r\n<component trace>`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Is there any workaround to find similar place for now?"],"labels":["improvement","warnings"]},{"title":"Computed properties can have widely different performance characteristics on client and server (because they are not cached during SSR)","body":"### Version\r\n[`v2.4.3`](https:\/\/github.com\/vuejs\/vue\/releases\/tag\/v2.4.3) - current ([`v2.6.10`](https:\/\/github.com\/vuejs\/vue\/releases\/tag\/v2.6.10))\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/anc6Lf23\/2\/](https:\/\/jsfiddle.net\/anc6Lf23\/2\/)\r\n\r\n### Steps to reproduce\r\n1. Open the JSFiddle\r\n2. You will see the time it takes to compute a value without caching of computed properties (~1 second) in the output\r\n3. Set \"CACHE = true\" in the first line of the JS part to see the time it takes to compute the value with caching (~2 ms)\r\n\r\nThis issue concerns SSR but for simplicity I created the fiddle which emulates the behavior of the server render:\r\n- `CACHE = true` \u2013 the behavior we usually have in the client\r\n- `CACHE = false` \u2013 the behavior during SSR\r\n\r\n### What is expected?\r\nI would expect computed properties to have comparable performance characteristics on the server and client, so that I don't need to write custom code. \r\nI.e. I would expect computed properties to be cached during SSR.\r\n\r\n### What is actually happening?\r\nComputed properties are not cached and therefore have drastically different performance characteristics in some cases.\r\n\r\n---\r\n### Description if the issue\r\n\r\nSince [computed properties are not cached during SSR](https:\/\/ssr.vuejs.org\/guide\/universal.html#component-lifecycle-hooks) some components unexpectedly take significantly longer to render. This is the case if it is heavy to compute the property or if it is accessed a lot. \r\n\r\nI would usually expect a computed property to have constant time complexity (`O(1)`) no matter how often we access it. But on the server it suddenly becomes linear time complexity (`O(n)`). This is especially critical when the computed is accessed in a loop. When we have multiple computed properties relaying on each other, each containing loops, this gets *really* bad. Then it has polynomial time with the exponent being the amount of nested computed properties (E.g. `O(n^3)` for three levels of computes, like in the JSFiddle)\r\n\r\n### Real world example\r\n\r\nI noticed this issue because our server renderer suddenly took multiple seconds (5-8 seconds) to respond after enabling a new component for SSR. Normally rendering the app on the server takes about 100ms.\r\n\r\nThe effected component is part of a proprietary code base but it is similar to the one in the JSFiddle. You can see the component in production here: \r\n- Open: https:\/\/www.ikea.com\/de\/de\/bereiche\/wohnzimmer\/\r\n- Click on the \"Serien\" button\r\n- The flyout content is the effected component \r\n\r\nAfter finding out about this I also investigated other occurrences of this: \r\nIn our Vuex store we did not have any nested getters with loops, like described above, however some of the getters are somewhat heavy to compute (~1ms) and accessed a lot in various templates. So I decided to introduce a very simple custom caching layer to our store. This sped up server rendering by about 20%.\r\n\r\n**This could also be a low hanging fruit for optimizing SSR performance:**\r\nBased on analyzing our own app, I would roughly estimate that caching all computed properties could speed up server rendering by about 30% in an average Vue.js app.\r\n\r\nFor me this issue was hard to understand because the affected code seemed harmless at first.\r\n\r\n### Mitigation\r\n\r\nTo mitigate this issue you can move access to computes out of loops: access them once, store them in a local variable and then use this variable in the loop. This is generally a good idea since any look up of a property on a Vue.js VM has a small cost.  \r\n\r\nHowever this is not possible if you have a loop inside your templates.\r\n\r\n### References\r\n\r\n- The code that controls this behavior:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/0948d999f2fddf9f90991956493f976273c5da1f\/src\/core\/instance\/state.js#L208-L219\r\n\r\n- The issue that lead to this behavior being introduced: vuejs\/vuex#877\r\n\r\n- The commit that introduced this behavior 06741f32\r\n\r\n- Earlier occasion of someone stumbling over this: \r\n  - nuxt\/nuxt.js#2447\r\n  - https:\/\/forum.vuejs.org\/t\/ssr-performance-problems-due-to-lack-of-caching\/24653\/5\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I think you are aware of this (judging from how deep you digged into this), but I want to quickly re-iterate so people are on the same page:\r\n\r\n* Reactivity is disabled on the server for a reason. \r\n* Yet disabling it leads to stale caches for computed properties.\r\n* So disabling the cache for computed properties is technically necessary to ensure that the app shows the *correct* data.\r\n* The performance issues that you describe here are an ugly side effect of this.\r\n\r\nSo technically it's not a bug as it \"works as designed\", but the end result is not satisfactory, of course. And there's no straightforward solution to this either, as far as I can tell at least. \r\n\r\nThe best I can think of right now would be to \r\n\r\n1. Improve SSR docs to raise awareness and\r\n2. maybe provide a helper function or something to use for memoizing computed props when on the server.","I think your proposed changes would be good improvements but I'm wondering if we can not go a bit further.\r\n\r\nI would even question if the performance advantage of disabling reactivity on the server pays off, considering that that means computed properties aren't cached. It would be interesting to get some numbers on that.\r\n\r\nBut **maybe there is a way to cache computed properties without having stale caches**:\r\nAs far as I understand, caching for computed properties was only disabled because the Vuex state changes during SSR and getters then return outdated results. Though, in the Vuex case, we don't need the whole reactivity system to tell if the state changed because all state changes are encapsulated in mutations. So perhaps Vuex could just \"rest\" the computed cache for the getters after a mutation.\r\n\r\nThis would mean that the Vue.js Core had to provide a new API for \"resetting\" computes on the server. And Vuex would need to trigger that API after a mutation.","To @LinusBorg's second bullet, we ran into this recently and I wanted to drop in our optimization workaround.  We had a single getter that was massaging some data we get back from an API (in a particularly unuseful data structure) and the getter was converting the data into a much simpler data structure to be used in components.  However, computing the simpler structure took a triple-nested loop that could take close to 1ms - and that method could 50+ times during a single SSR page load because it was accessed in a bunch of places.\r\n\r\nOne option would have been to lift the getter access to a parent component and pass it via a prop all the way down - however, the component tree is fairly large and that would have been a pretty invasive change at the moment.  Another would be to move this computation out of the UI and offload to the api, but that would require a pretty significant refactor to the app as well.\r\n\r\nSo instead we decided to pre-compute the value during SSR and store it in the store `state`,  but since it's derivative data of other data in `state` we didn't want to increase the size of the stringified `state` sent to the client.  So we used a custom `JSON.stringify` replacer function to this key when stringifying the `state`.\r\n\r\nThe end code looked something like:\r\n\r\n```js\r\n\/\/ store.js\r\nreturn new Vuex.Store({\r\n    state: {\r\n        apiData: null,\r\n        _ssr_uiMap: null,\r\n    },\r\n    mutations: {\r\n        setApiData(state, apiData) {\r\n            state.apiData = apiData;\r\n        },\r\n        setUiMap(state, uoMap) {\r\n            state._ssr_uiMap = uiMap;\r\n        },\r\n    },\r\n    actions: {\r\n        loadApiData({ commit }) {\r\n            const apiData = await loadApiData();\r\n            commit('setApiData', apiData);\r\n\r\n            if (process.env.VUE_ENV === 'server') {\r\n                commit('setUiMap', computeUiMap(apiData));\r\n            }\r\n        },\r\n    },\r\n    getters: {\r\n        uiMap(state) {\r\n            if (process.env.VUE_ENV === 'server' && state._ssr_uiMap) {\r\n                return state._ssr_uiMap\r\n            }\r\n            return computeUiMap(state.apiData);\r\n        },\r\n    },\r\n});\r\n\r\n\r\n\/\/ And then when we stringify the store in entry-server.js, we use the following \r\n\/\/ to strip any _ssr_ prefixed keys from the state\r\nJSON.stringify(store.state, (k, v) => k.startsWith('_ssr_') ? undefined : v)\r\n```\r\n\r\nSo we can memoize the value on the server and only calculate it once, while still leveraging the built-in getter caching client side without impacting payload size of the stringified store.  \r\n\r\nIt's not a 100% ideal solution, but it works quite well in limited cases and we saw around a 20-25% increase in SSR render time.","I have also experienced significant performance issues in SSR mode due to this behaviour. Even if I have later found and optimized the main bottleneck, I still don't like such greatly different behaviour of computed properties in SSR mode. That's why I tried to find en easy way to selectively enable caching of computed properties in components, where it is safe to do. Here is my solution, which seems to work fine for me, so maybe it could be also useful for others.\r\n\r\nMy idea was to add support for a new option, which will enable\/control caching of computed properties on server.\r\n\r\n```javascript\r\n\/\/ Vue component\r\nexport default {\r\n  computed: {\r\n    compA () {},\r\n    compB () {}\r\n  },\r\n  ssrComputedCache: true, \/\/ enable caching for all computed properties\r\n  ssrComputedCache: ['compA'] \/\/ or enable cache for selected computed properties\r\n}\r\n```\r\n\r\nAnd here is a global mixin implementing this feature, which can be used in nuxt app as plugin\r\n\r\n```javascript\r\n\/\/ nuxt plugin (mode: 'server')\r\nimport Vue from 'vue'\r\n\r\nVue.mixin({\r\n  created () {\r\n    if (process.server && this.$options.ssrComputedCache) {\r\n      const { computed, ssrComputedCache } = this.$options\r\n      const cachedProperties = ssrComputedCache === true ? Object.keys(computed) : ssrComputedCache\r\n      cachedProperties.forEach(name => {\r\n        let value\r\n        let cached = false\r\n        Object.defineProperty(this, name, {\r\n          \/\/ for repeated re-definition in dev mode, depending on runInNewContext setting\r\n          \/\/ (https:\/\/github.com\/nuxt\/nuxt.js\/issues\/7171)\r\n          configurable: true, \r\n          get () {\r\n            if (cached) {\r\n              return value\r\n            }\r\n            value = computed[name].apply(this)\r\n            cached = true\r\n            return value\r\n          }\r\n        })\r\n      })\r\n    }\r\n  }\r\n})\r\n```\r\n"],"labels":["discussion","feat:ssr"]},{"title":"Regular slot and scoped slot with same name shouldn't be allowed","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/lee88688\/pen\/jjPpBm?editors=1010](https:\/\/codepen.io\/lee88688\/pen\/jjPpBm?editors=1010)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nas seen in codepen,  \"hello\" component have only one slot. but rendered 2 div tag at last. I have a look at Vue's code [renderSlot ](https:\/\/github.com\/vuejs\/vue\/blob\/530ca1b2db315fbd0e360807b2031d26665c5d3d\/src\/core\/instance\/render-helpers\/render-slot.js#L8) which seems renderSlot function would treat the normal slot as scoped slot. why it would be like this?\r\n\r\nthe following code is render function of hello component which is compiled by Vue.compile. _t is renderSlot function. when normal slot and scoped slot in same component the problem above will be present.\r\n```javascript\r\n(function anonymous() {\r\n    with (this) {\r\n        return _c('div', [_t(\"default\"), _v(\" \"), _t(\"default\", null, {\r\n            \"x\": x\r\n        })], 2)\r\n    }\r\n}\r\n)\r\n```\r\n\r\n### What is expected?\r\nrender just one slot.\r\n\r\n### What is actually happening?\r\nrender one slot twice.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["You cannot name a scoped slot and a regular slot the same way\r\nMaybe we could issue a warning for this","I really recommend adding this warning in docs. as I read the docs, I don't realize this may be a problem for me.","I think it`s correct.In a way, a regular slot is a socped slot,only the context is underfined, the same name solt is can used by twice times. Maybe the user want to do like this.","Not really because we want to merge slots and scoped slots (v-slot is there for that too) so we want to disallow that behavior \n\nEduardo San Martin Morote\n\n> On 20 Jun 2019, at 00:52, likui <notifications@github.com> wrote:\n> \n> I think it`s correct.In a way, a regular slot is a socped slot,only the context is underfined, the same name solt is can used by twice times. Maybe the user want to do like this.\n> \n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n","@posva I will work it.","We tried to solve this issue with a small group, but we were unable to reproduce it in Vue 3. In the docs for Vue 3 this seems to be using a different approach. We are unsure if this issue is still relevant for Vue 3. \r\n\r\n@kerm1it Does your commit fix the issue? If yes, are you planning on turning this into a PR?\r\n\r\nCould you please let us know if this is still an issue? If so, we'd like to help find a solution.\r\n\r\nIf not, it might be worth it to close this issue.","https:\/\/github.com\/kerm1it\/vue\/commit\/9811f315cd554e1769ea3a46022faf5afb9fe666","https:\/\/github.com\/vuejs\/vue\/pull\/10217"],"labels":["contribution welcome","feature request","warnings"]},{"title":"Unnecessary renders on parent update when $attrs is bound","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/anon\/pen\/zQVRgG?editors=1010](https:\/\/codepen.io\/anon\/pen\/zQVRgG?editors=1010)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nType something into the first field\r\n\r\nUncomment line 8 or 14 then try again\r\n\r\n### What is expected?\r\nIn console:\r\n```\r\nRender a\r\n```\r\n\r\n### What is actually happening?\r\nIn console:\r\n```\r\nRender a\r\nRender b\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This is basically the same problem as with `$listeners` at https:\/\/github.com\/vuejs\/vue\/issues\/7257\r\nIt's because we read parent.attrs: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/core\/instance\/lifecycle.js#L260","Ah yep, missed that one. \r\n\r\nLooks like we have `c('field', { attrs: { \"title\": \"b\" } })`, then title is removed at [`extractProps`](https:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/core\/vdom\/helpers\/extract-props.js#L63) leaving an empty object, so the `|| emptyObject` doesn't apply.  \r\nI'll leave this open as the fix will probably be different. ","The workaround I'm using for now is to mutate a single object instead:\r\n```js\r\ndata: () => ({\r\n  $_attrs: {},\r\n  $_listeners: {},\r\n}),\r\nwatch: {\r\n  \/\/ Work around unwanted re-renders: https:\/\/github.com\/vuejs\/vue\/issues\/10115\r\n  \/\/ Make sure to use `v-bind=\"$data.$_attrs\"` instead of `v-bind=\"$attrs\"`\r\n  $attrs: {\r\n    handler (val) {\r\n      for (const attr in val) {\r\n        this.$set(this.$data.$_attrs, attr, val[attr])\r\n      }\r\n    },\r\n    immediate: true\r\n  },\r\n  $listeners: {\r\n    handler (val) {\r\n      for (const listener in val) {\r\n        this.$set(this.$data.$_listeners, listener, val[listener])\r\n      }\r\n    },\r\n    immediate: true\r\n  }\r\n},\r\n```\r\nhttps:\/\/codepen.io\/anon\/pen\/rXpGbj?editors=1010\r\n\r\nI 100% guarantee there's bugs in this btw. ","> The workaround I'm using for now is to mutate a single object instead:\r\n> \r\n> ```js\r\n> data: () => ({\r\n>   $_attrs: {},\r\n>   $_listeners: {},\r\n> }),\r\n> watch: {\r\n>   \/\/ Work around unwanted re-renders: https:\/\/github.com\/vuejs\/vue\/issues\/10115\r\n>   \/\/ Make sure to use `v-bind=\"$data.$_attrs\"` instead of `v-bind=\"$attrs\"`\r\n>   $attrs: {\r\n>     handler (val) {\r\n>       for (const attr in val) {\r\n>         this.$set(this.$data.$_attrs, attr, val[attr])\r\n>       }\r\n>     },\r\n>     immediate: true\r\n>   },\r\n>   $listeners: {\r\n>     handler (val) {\r\n>       for (const listener in val) {\r\n>         this.$set(this.$data.$_listeners, listener, val[listener])\r\n>       }\r\n>     },\r\n>     immediate: true\r\n>   }\r\n> },\r\n> ```\r\n> \r\n> https:\/\/codepen.io\/anon\/pen\/rXpGbj?editors=1010\r\n> \r\n> I 100% guarantee there's bugs in this btw.\r\n\r\nYes, need to delete attrs which wasn't in $attrs any more.","Consider this scenario:\r\n\r\n```html\r\n<my-button v-if=\"visible\" \/>\r\n<my-button v-else detail \/>\r\n```\r\nIf we toggle `visible` once, `detail` will be in `$_attrs` even `visible` is true.\r\nI think the root cause is **vue v-dom diff policy**.\r\n\r\n**There are three ways to help this out:**\r\n\r\n1. use `v-show` instead of `v-if`\r\n```html\r\n<my-button v-show=\"visible\" \/>\r\n<my-button v-show=\"!visible\" detail \/>\r\n```\r\n2. add different `key` to these two components\r\n```html\r\n<my-button v-if=\"visible\" key=\"a\" \/>\r\n<my-button v-else=\"visible\" key=\"b\" detail \/>\r\n```\r\n3. delete attributes which wasn't in $attrs any more. (like 'detail') [the same with $listeners]\r\n```javascript\r\n  $attrs: {\r\n    handler (val) {\r\n      const oldKeys = Object.keys(this.$data.$_attrs)\r\n      for (const attr in val) {\r\n        this.$set(this.$data.$_attrs, attr, val[attr])\r\n        const index = oldKeys.indexOf(attr)\r\n        if (index > -1) {\r\n          oldKeys.splice(index, 1)\r\n        }\r\n      }\r\n\r\n      for (const attr of oldKeys) {\r\n        this.$delete(this.$data.$_attrs, attr);\r\n      }\r\n    },\r\n    immediate: true\r\n  },\r\n```\r\n"],"labels":["improvement"]},{"title":"Stringify Vue instance","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/vue-stringify-instance-2h78n](https:\/\/codesandbox.io\/s\/vue-stringify-instance-2h78n)\r\n\r\n### Steps to reproduce\r\nOpen the link, the error is reproduced right away as the code tries to serliaze the Vue instance.\r\n\r\n### What is expected?\r\nBeing able to serlialize the Vue instance.\r\n\r\n### What is actually happening?\r\nIs not possible as the Vue prototype is missing the toJSON method.\r\n\r\n---\r\nThe code is using `telejson` as the stringify library in order to remove circular references. Is the same utility used by Storybook 5 which will rise those errors in diferent scenarios, as for example when using the Action addon and passing as argument a Vue instance.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Yeah, there isn't a default toJSON method on classes, it's something that needs to be implemented. But I don't see what production use would `toJSON` have for Vue.\r\n\r\nIf the use case for this is being able to log messages during testing, error reporting or for a component style guide (like storybook), it should be implemented by those libraries so it fits their need. We cannot provide a silver bullet, dev-only `toJSON`","Maybe a simple `Vue.prototype.toJSON = () => 'Stringifying Vue instances is not supported'` in development mode would avoid confusion.","I'm labelling this as discussion because I'm not sure of the direction we should take and I don't want people to submit a PR and end up wasting their time if it gets rejected","Fair enough. Meantime a stupidly simple solution is to just do...\r\n\r\n```\r\nVue.prototype.toJSON = function () {\r\n    return this;\r\n};\r\n```","The Vue instance can't be serialized reliably. How to \u201cstringify\u201d the state differs across different use cases. I prefer userland solutions like the one you posted as nobody knows what output you want better than yourself.","You can't really serialise functions (computed, methods etc), VUE relies on them to work.\r\n\r\nIf you need to serialise your vue app, you may be doing something wrong. Data can be serialised, and you can have a method for that, which can integrate with your API, but it's not easily possible to serialise a vue instance, there would be too many edge cases.","@DominusVilicus, seriliazing an Object is quite common, a Vue instance is not more than that and all the edge cases are dealed by the serializing library. As stated in my last answer the solution is to just add the missing `_toJSON` function which could return the entire Vue instance or a new Object with just the important parts, as the `$data`.","This can be implemented in userland, I'm sure there's uses for this, but most users won't need to use this.\r\n\r\nThis would be better implemented as a plugin or library","That's fine with me."],"labels":["discussion"]},{"title":"Triggering a listener of a functional component breaks reactivity in Safari 12.1, if iframe is on the page","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/ebgj6fra\/2\/](https:\/\/jsfiddle.net\/ebgj6fra\/2\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- Access the fiddle\r\n- click the \"change\" button\r\n\r\n### What is expected?\r\n*Hello world!* should change to *tada!*\r\n\r\n### What is actually happening?\r\nIn latest Safari (12.1) on Mac OS, nothing happens, but it works as expected in other browsers.\r\n\r\n---\r\nRemoving the `iframe` from the page makes the issue go away, as seen here: https:\/\/jsfiddle.net\/ebgj6fra\/3\/\r\n\r\nSeems like maybe there's a difference in how\/when the latest Safari runs the `flushCallbacks`.\r\n\r\nConditionally rendering the iframe (`v-if=\"myExpression !== null`), triggering the listener inside a `setTimeout` or calling `$forceUpdate` circumvents the issue.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Thanks for the boiled down repro \ud83d\udc4c ","This issue still exists. Perhaps this should be mentioned somewhere in the Vue docs?\r\n\r\nWe used this as a fix in our main Vue instance:\r\n`mounted: function() {\r\n        this.$forceUpdate();\r\n }`","That example code seems to work when not within JSFiddle.\r\nI note that JSFiddle has one sandbox flag on the iframe as allow-same-origin.\r\n\r\nIf I remove the allow-same-origin to treat the code as foreign, then re-run the source, the button then functions as expected.\r\nBy removing the allow-same-origin I am referring to inspecting the JSFiddle page source and removing the property.\r\n\r\nIm wondering if its tripping up some sort of security?"],"labels":["bug","browser quirks","has workaround"]},{"title":"get error detail when use async component factory ","body":"### What problem does this feature solve?\r\nhttps:\/\/vuejs.org\/v2\/guide\/components-dynamic-async.html#Handling-Loading-State\r\n\r\n```\r\nconst component = new Promise(function (resolve, reject) {\r\n       reject('error detail');\r\n});\r\n```\r\n\r\n```\r\nconst AsyncComponent = () => ({\r\n  \/\/ The component to load (should be a Promise)\r\n  component: component,\r\n  \/\/ A component to use while the async component is loading\r\n  loading: LoadingComponent,\r\n  \/\/ A component to use if the load fails\r\n  error: ErrorComponent,\r\n  \/\/ Delay before showing the loading component. Default: 200ms.\r\n  delay: 200,\r\n  \/\/ The error component will be displayed if a timeout is\r\n  \/\/ provided and exceeded. Default: Infinity.\r\n  timeout: 3000\r\n})\r\n```\r\n\r\n\r\ni want get error detail in  `AsyncComponent.error` component,  make page friendly\r\n\r\n\r\n\r\n\r\n### What does the proposed API look like?\r\nmaybe inject error as props to  `AsyncComponent.error`  ?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I think it would make more sense to pass the error as a prop named `error` to the ErrorComponent","This would be very useful to debug an issue in production for example."],"labels":["feature request"]},{"title":"<keep-alive> within <transition-group> blocks leave transitions","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/sathomas\/pen\/Jqoyqo](https:\/\/codepen.io\/sathomas\/pen\/Jqoyqo)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nComponent structure:\r\n\r\n    <transition-group>\r\n      <keep-alive>\r\n        <component \/>\r\n      <\/keep-alive>\r\n    <\/transition-group>\r\n\r\nChange dynamic component. Leave transition does not occur.\r\n\r\nIn repro example, click <kbd>Switch View<\/kbd>\r\n\r\n- Note 1: In repro example if `<keep-alive>` is removed via checkbox, all transitions work as expected.\r\n- Note 2: In repro example if `<transition-group>` is replaced with `<transition>`, all transitions work as expected.\r\n\r\n### What is expected?\r\nInitial component should transition out while new component transitions in.\r\n\r\n### What is actually happening?\r\nInitial component is removed immediately while new component transitions in.\r\n\r\n---\r\nIn actual use case, `v-show` is not a good option as the dynamic components involved are quite complex (1000s of DOM elements) and leaving them in the actual DOM causes performance problems.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["it's not support use `keep-alive` in `transition-group`.I have a try which support it. it's maybe can become a new feature.Can I work it?","Sure, give it a try"],"labels":["improvement","transition"]},{"title":"this.$nextTick don't work fine in (android 5.1.1)android webview 55.0.2883.91.","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/embed\/k36zj3z5o7](https:\/\/codesandbox.io\/embed\/k36zj3z5o7)\r\n\r\n### Browser info\r\nandroid 5.1.1\r\nandroid system webview 55.0.2883.91.\r\n\r\n### Steps to reproduce\r\ninput phone number more than 3.\r\n\r\n### What is expected?\r\nwhen i input phone number more than 3 ,the position of cursor will be the last .\r\n\r\n### What is actually happening?\r\nwhen i input phone number more than 3 ,the position of cursor is not  on the last.I suppose the reason is the bug of microtask in this version of android webview.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I don't understand what you expect to happen. This is what happen on Android 5.1:\r\n\r\n![ScreenFlow](https:\/\/user-images.githubusercontent.com\/664177\/57365988-62e14e80-7186-11e9-8592-83828ed4f9b8.gif)\r\n\r\nthe same happens on desktop Chrome 55","> I don't understand what you expect to happen. This is what happen on Android 5.1:\r\n> \r\n> ![ScreenFlow](https:\/\/user-images.githubusercontent.com\/664177\/57365988-62e14e80-7186-11e9-8592-83828ed4f9b8.gif)\r\n> \r\n> the same happens on desktop Chrome 55\r\n\r\ni'm sorry about that i can't reproduct too before, i have updated the codesandbox link, please check it one more.\r\n\r\nThis is the what happen on my test phone-Samsung Galaxy J3 Pro :\r\n\r\n![20190508_210103](https:\/\/user-images.githubusercontent.com\/35187547\/57377586-62bc6f80-71d5-11e9-85e2-29d45064e175.gif)\r\n\r\n\r\n\r\n\r\n\r\n\r\n","It still doesn't reproduce on Chrome 55 nor android 5.1\r\nWhat is the bug of microtask you are talking about?","> It still doesn't reproduce on Chrome 55 nor android 5.1\r\n> What is the bug of microtask you are talking about?\r\n\r\nSorry, maybe i can't explain why i think it's a bug of microTask, but i supposed it is because if i use setTimeout, it will works fine. but there are no problem in other device when i use nextTick .\r\nIn the webview 55.0.2883.91. , i can get the right selectionEnd after this line when i debug\r\n` target.setSelectionRange(selectionEnd, selectionEnd);`\r\nbut the cursor position on the (selectionEnd - 1).\r\n\r\nAnd if i usethe keyup instead of input , the nextTick will not cause problem.","> It still doesn't reproduce on Chrome 55 nor android 5.1\r\n> What is the bug of microtask you are talking about?\r\n\r\nI reproduce it on chrome 55.0.2883.91 with android 6.0.1.\r\nThe key is the Android Chrome version should be 55.0.2883.91.Maybe it doesn't happen on desktop chrome.\r\n![screenrecorder_Trimmed_20190509_103102 mp4_20190509_105023](https:\/\/user-images.githubusercontent.com\/35187547\/57423914-6806d200-7248-11e9-8e96-7eca2fb826b0.gif)\r\n","Is this issue only reproducible with custom input methods (Sogou in your case)? I suspect it's related to IME.","> Is this issue only reproducible with custom input methods (Sogou in your case)? I suspect it's related to IME.\r\n\r\nOh! yes, it happened with Sougou and sony's xperia input method, but Google Gboard works fine. \r\n","I've had this problem before. I solved that with setTimeout."],"labels":["need repro","browser quirks"]},{"title":"ability to keep `enter-to` class after show transition completes","body":"### What problem does this feature solve?\r\nIn some CSS libraries, i.e. Bootstrap, many components have opacity set to `0` by default, and only have opacity set to `1` when a class is applied.  i.e. Bootstrap's `fade + show` classes:\r\n\r\n```css\r\n.fade:not(.show) { opacity: 0; }\r\n```\r\n\r\nThe current `<transition>` behaviour does not support retaining the `enter-to-class` (as it is immediately removed once the transition completes).\r\n\r\nCurrently one has to use javascript hooks and VM data to add\/remove the `show` class, which makes it impossible to make re-usable transition components, as simply adding a class via javascript to the `el` reference (via `el.classList.add\/remove('show')`) doesn't guarantee persistence if the content in the default slot manipulates it's own classes, meaning the transition component _must_ be integrated into the custom component, not as a re-usable utility wrapper component).\r\n\r\n### What does the proposed API look like?\r\nIt would be nice to either be able to retain the `enter-to-class` class after the transition completes, or create a new prop that provides this behaviour for a particular class name i.e. `enter-to-retain-class`. The class would be removed on leave.\r\n\r\nThe other option would be to create a new prop `active-class=\"classname\"` which is added one frame after insertion, and removed when the leave transition is to start (basically rolling the `enter-to-class` and `leave-class` into one prop, but retain the class until leave is initiated)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["In our (BootstrapVue's) use case, we have to hard-code the transition component and code into each component that uses the `fade+show` Bootstrap V4 transition classes (modals, toasts, alerts, tabs, etc), causing unnecessary code duplication, and making it difficult for us to allow users to provide their own custom transitions (which has been a common ask for the past while), due to the need for us to mix CSS+Javascript to make Vue's transition system work with Bootstrap.","Ran into this issue today. +1 for adding it to core. Here's the workaround I came up with today:\r\n\r\nTransparent wrapper around the default `transition` component with js hooks to add classes after the enter transitioning is done, and remove those classes before our leave transition starts.\r\n`after-enter-class` is the prop I added which in my case just mirrors `enter-to-class`.\r\n\r\n[https:\/\/codesandbox.io\/s\/serene-darwin-r7h4o?file=\/src\/components\/BetterTransition.vue](https:\/\/codesandbox.io\/s\/serene-darwin-r7h4o?file=\/src\/components\/BetterTransition.vue)\r\n```vue\r\n<template>\r\n  <transition\r\n    v-bind=\"$attrs\"\r\n    v-on=\"$listeners\"\r\n    v-on:after-enter=\"afterEnter\"\r\n    v-on:before-leave=\"beforeLeave\"\r\n  >\r\n    <slot><\/slot>\r\n  <\/transition>\r\n<\/template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    afterEnterClass: {\r\n      type: String,\r\n      default: \"\"\r\n    }\r\n  },\r\n  computed: {\r\n    classes() {\r\n      return this.afterEnterClass.split(\" \").filter(i => i);\r\n    }\r\n  },\r\n  methods: {\r\n    afterEnter(el) {\r\n      this.classes.forEach(cssClass => el.classList.add(cssClass));\r\n    },\r\n    beforeLeave(el) {\r\n      this.classes.forEach(cssClass => el.classList.remove(cssClass));\r\n    }\r\n  }\r\n};\r\n<\/script>\r\n```\r\n\r\n**Usage**\r\n```vue\r\n<better-transition\r\n  enter-active-class=\"transition duration-1000\"\r\n  enter-class=\"opacity-0\"\r\n  enter-to-class=\"opacity-50\"\r\n\r\n  after-enter-class=\"opacity-50\"\r\n        \r\n  leave-active-class=\"transition duration-1000\"\r\n  leave-class=\"opacity-50\"\r\n  leave-to-class=\"opacity-0\"\r\n>\r\n  <div v-if=\"open\" class=\"mt-5\">Our transition<\/div>\r\n<\/better-transition>\r\n```","We tried something similar, but ran into issue if the root element of the default slot updates (i.e. classes dynamically added or attributes changed), that the class added by the `afterEnter` hook can get trashed\/removed","Ahhh. Yup I'm getting the same thing. Easiest workaround is to wrap the content for the slot in a tag using and ensure it doesn't ever update. Not ideal; works for me since I'm in complete control of everything, but I can see this not being something you'd want to support in a public package.\r\n\r\n```vue\r\n<better-transition\r\n  enter-active-class=\"transition duration-1000\"\r\n  enter-class=\"opacity-0\"\r\n  enter-to-class=\"opacity-50\"\r\n\r\n  after-enter-class=\"opacity-50\"\r\n        \r\n  leave-active-class=\"transition duration-1000\"\r\n  leave-class=\"opacity-50\"\r\n  leave-to-class=\"opacity-0\"\r\n>\r\n  <div v-if=\"open\">\r\n    <div class=\"mt-5\" :class=\"{'text-white': isActive}\">Our transition<\/div>\r\n  <\/div>\r\n<\/better-transition>\r\n```\r\n\r\n@tmorehouse On a side note, thanks for all your work on [bootstrap-vue](https:\/\/github.com\/bootstrap-vue\/bootstrap-vue). We've used it in a few projects and it's been great!"],"labels":["feature request","transition"]},{"title":"feat: check if a tag is already in window.customElements","body":"Close #8855\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [x] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\nAdd the feature required in [issue #8855](https:\/\/github.com\/vuejs\/vue\/issues\/8855)","comments":["Great - could you rebase against `dev` to fix CI please?","> Great - could you rebase against `dev` to fix CI please?\r\n\r\nI have rebased the branch and passed all tests."],"labels":["semver:minor","ready to merge"]},{"title":"Custom directive binds differs on components vs elements","body":"### Version\r\n2.6.10\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/bponomarenko\/uom10qd2\/](https:\/\/jsfiddle.net\/bponomarenko\/uom10qd2\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Open browser console.\r\n2. Click on Toggle button two times. \r\n\r\n### What is expected?\r\nDirective will emit the same console messages when applied to DOM elements and to components (on init and after click on button).\r\n\r\nI'm not sure what should be expected output. Either\r\n```\r\nbind: first comp\r\nbind: first elem\r\nunbind: first comp\r\nunbind: first elem\r\nbind: first comp\r\nbind: first elem\r\n```\r\n\r\nor \r\n\r\n```\r\nbind: first comp\r\nbind: first elem\r\nunbind: second comp\r\nunbind: second elem\r\nbind: first comp\r\nbind: first elem\r\n```\r\n\r\n### What is actually happening?\r\nMessages from the directive are the same on init, but different after button have been clicked.\r\n\r\nActual console output:\r\n```\r\nbind: first comp\r\nbind: first elem\r\nunbind: first comp\r\nunbind: second elem\r\nbind: second comp\r\nbind: first elem\r\n```\r\n\r\n---\r\nIt seems that order in which directives are applied to DOM elements and components are different. In my setup I have custom directive which relies on some DOM attribute with configuration data. When this custom directive is bound\/unbound in a \"regular flow\" \u2013 everything works as expected (directive binds after element attributes are updated). However when directive is bound\/unbound in case of Vue \"in-place patch strategey\", behavior seems to be different.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Seems like the directive is called with the old component (because it's reused) but it still has old attrs\r\n\r\nAs a workaround, set a key on one of the components","@bponomarenko \r\nWhat @posva said is already covered in the documentation.\r\nYou can refer to this.\r\n\r\nhttps:\/\/vuejs.org\/v2\/guide\/conditional.html#Controlling-Reusable-Elements-with-key","@posva @pistis Thanks for the answer. Yeah, that is what we used eventually as a workaround, I had to mention that in the ticket. However presence of `key` attribute will not allow to use Vue.js rendering optimisations. Would be great to have it fixed.","The optimization is based on that you have stateless elements so Vue won\u2019t bother to take care of correctly managing event handlers or local states when trying to reuse an element. So I think this is not a bug but can be potentially improved in our docs so that our users can understand this more easily.","@Justineo I understand the concepts behind an optimization itself. In my situation, custom directive is responsible for adding the state attribute to element on `bind` and removing that attribute on `unbind`. And directive is perfectly added\/removed when component is re-used by Vue.js. However order of component properties update and directive initialization is different in different moments of component lifetime, which makes it hard to develop custom directives.\r\nIndeed additional documentation on these optimization techniques might be helpful, but inconsistent directives lifecycle events are rather a bug to fix in my opinion.","> As a workaround, set a key on one of the components","I am using a directive of vue-clipboard2 and this bug happened, the bug report comes from 2019: https:\/\/github.com\/Inndy\/vue-clipboard2\/issues\/75\r\n\r\nI've made a PR there that would bypass this issue, but like @bponomarenko said, the order should be fixed. Doesn't make sense for a directive to start to unbind without bind it first.\r\nIn the directive above, the key solution doesn't work...\r\n\r\n\r\n"],"labels":["bug","has workaround"]},{"title":"[template-renderer] Make it possible to not automatically render used async scripts","body":"### What problem does this feature solve?\r\nIn oder to make https:\/\/github.com\/maoberlehner\/vue-lazy-hydration more useful it would be great if we could prevent the template renderer from automatically injecting async scripts. The way vue-lazy-hydration works is, that it behaves differently on the server than it does on the client. On the server the script (of an async component) is loaded immediately so the template renderer correctly detects that it is used. But on the client the script might not be needed at all but because the template renderer has already injected it it is immediately loaded on page load.\r\n\r\nThere is currently kind of a backlash against loading huge amounts of JavaScript. vue-lazy-hydration can help with removing a lot of unnecessary JavaScript on server side rendered, mostly static sites like blogs and documentation. But currently it can't completely prevent loading all of the unnecessary JavaScript because of the way how template renderer works.\r\n\r\nHere is the relevant line in the code: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/server\/template-renderer\/index.js#L226\r\n\r\n### What does the proposed API look like?\r\nI propose to make this configurable:\r\n\r\n```js\r\nconst renderer = createBundleRenderer(serverBundle, {\r\n  template,\r\n  renderUsedAsyncScripts: false,\r\n});\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I'm working on an app where this would be a huge improvement to lighthouse scores. Would a PR be accepted to include this option?","this is the related PR https:\/\/github.com\/vuejs\/vue\/pull\/10794\r\nanything we can do to get this into the core?","That would be neat, Vue & Nuxt applications would see a huge performance boost, especially on LightHouse scores.","this would be super awesome to have, I'm currently struggling with lighthouse performance and this would make things a lot easier... ( want that nearly perfect score :) )","If you use nuxt, you can actually work around either by using modern mode (due to a bug) or by using a regex to remove the async deferred chunks from html ouput (render:route, see https:\/\/nuxtjs.org\/api\/internals-renderer#hooks)\r\n\r\nexample plugin:\r\n```js\r\nimport consola from 'consola';\r\n\r\nconst logger = consola.withScope('js-optimization:module');\r\n\r\nconst bodyRegex = \/<body[^>]*>(.*)<\\\/body>\/s;\r\n\/\/ list of all JS includes\r\nconst scriptRegex = \/<script[\\w\"= ]*src=\"(.*?)\".*?><\\\/script>\/g;\r\n\/\/ essenitials are all with \"pages\" or ending with \"app.js\"\r\nconst validScriptRegex = \/\\\/(legacy-)?.*?-(pages.*?|.*app).js\/;\r\n\r\nmodule.exports = async function JSOptimizer(moduleOptions) {\r\n\tif (!moduleOptions.setOutputFilenames) {\r\n\t\tlogger.error(\r\n\t\t\t'JS optimization works only when you explicitly opt in for overwriting output filenames in nuxt!'\r\n\t\t);\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!this.options.build) this.options.build = {};\r\n\tthis.options.build.filenames = {\r\n\t\t...this.options.build.filenames,\r\n\t\tapp: ({ isModern, isDev }) =>\r\n\t\t\t`${!isModern ? 'legacy-' : ''}${!isDev ? '[contenthash]' : '[name]'}-app.js`,\r\n\t\tchunk: ({ isModern, isDev }) =>\r\n\t\t\t`${!isModern ? 'legacy-' : ''}${!isDev ? '[contenthash]-' : ''}[name].js`\r\n\t};\r\n\r\n\tthis.nuxt.hook('render:route', async (url, page, { req, res }) => {\r\n\t\tif (!page.html || (res.statusCode && res.statusCode !== 200) || page.redirected || page.error) {\r\n\t\t\tif (moduleOptions.debug) {\r\n\t\t\t\tlogger.info(\r\n\t\t\t\t\t'skipping optimize JS render:route',\r\n\t\t\t\t\tJSON.stringify({\r\n\t\t\t\t\t\turl,\r\n\t\t\t\t\t\tisAmp: req.isAMP,\r\n\t\t\t\t\t\tmatchedRoute: req.matchedRoute,\r\n\t\t\t\t\t\tpage: page.html.length,\r\n\t\t\t\t\t\tstatusCode: res.statusCode,\r\n\t\t\t\t\t\terror: page.error,\r\n\t\t\t\t\t\tredirected: page.redirected\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (moduleOptions.debug) {\r\n\t\t\tlogger.info(\r\n\t\t\t\t'optimize JS render:route',\r\n\t\t\t\tJSON.stringify({ url, isAmp: req.isAMP, matchedRoute: req.matchedRoute })\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (!req.isAMP) {\r\n\t\t\t\/\/ remove all non-essential JS files\r\n\r\n\t\t\tlet { html } = page;\r\n\r\n\t\t\tconst bodyString = bodyRegex.exec(html);\r\n\r\n\t\t\tif (!bodyString || !bodyString[0]) {\r\n\t\t\t\tlogger.warn('no body tag found', html);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst body = bodyString[0];\r\n\r\n\t\t\tconst links = body.matchAll(scriptRegex);\r\n\r\n\t\t\tfor (const match of links) {\r\n\t\t\t\tif (!validScriptRegex.test(match[1])) {\r\n\t\t\t\t\t\/\/ remove non essential JS\r\n\t\t\t\t\thtml = html\r\n\t\t\t\t\t\t.replace(match[0], '') \/\/ script tag\r\n\t\t\t\t\t\t.replace(`<link rel=\"modulepreload\" href=\"${match[1]}\" as=\"script\">`, '') \/\/ module preload\r\n\t\t\t\t\t\t.replace(`<link rel=\"preload\" href=\"${match[1]}\" as=\"script\">`, ''); \/\/ preload\r\n\r\n\t\t\t\t\tif (moduleOptions.debug) {\r\n\t\t\t\t\t\tlogger.info('removed js tags for', match[1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpage.html = html; \/\/ set new response\r\n\t\t}\r\n\t});\r\n\r\n\tlogger.success('JS optimization module initialised');\r\n};\r\n```\r\n\r\nsave it in modules\/js-optimization.js and add `['modules\/js-optimizer.js', { setOutputFilenames: true }]`  to the modules of nuxt.config.js","@simllll \r\nTried this it works, one thing I had to block loading the preload links. awesome thank you! ","> @simllll\r\n> Tried this it works, one thing I had to block loading the preload links. awesome thank you!\r\n\r\nYou are welcome, I just updated the example plugin to also get rid of preload tags. How did you remove them?","I used another replace with the matched scripts: \r\n\r\n```head = head.replace(`<link rel=\"preload\" href=\"${match[1]}\" as=\"script\">`, '');```\r\n\r\nWill update to use fully your module :+1: ","@simllll I've got a question here. \r\nWill this manipulation work with a universal app? i.e remove all the unnecessary JS, but still have the SPA behavior after the SSR rendering?\r\nThank you","> @simllll I've got a question here.\r\n> Will this manipulation work with a universal app? i.e remove all the unnecessary JS, but still have the SPA behavior after the SSR rendering?\r\n> Thank you\r\n\r\nYes, that's exactly how we use it. It only makes sense to use with lazy hydration though, otherwise the JS will be needed for the inital page load and removing the preload tags would just slow down the page rendering.","Gotcha! It makes perfect sense. \r\nI'll get back to you with the results tonight. ","Unfortunately, I couldn't see any change in the scripts loaded nor in the performance. \r\nSo If I understand correctly your design, it's something like this: \r\nUse Lazy hydration on the page components: \r\n```\r\n <LazyHydrate ssr-only>\r\n         <ArticleContent :content=\"article.content\"\/>\r\n    <\/LazyHydrate>\r\n```\r\nThen \r\n\r\n```\r\nimport LazyHydrate from 'vue-lazy-hydration';\r\n \r\nexport default {\r\n  components: {\r\n    LazyHydrate,\r\n    ArticleContent: () => import('.\/ArticleContent.vue'),\r\n  },\r\n  \/\/ ...\r\n};\r\n```\r\nThen build: `nuxt build --universal`\r\nI could see a change in the scripts names (adding legacy-) But not much for the performance. \r\nYour help is appreciated","Your example looks right, you can easily add some output in \"mounted\" hook to see if everything works as expected. Lazy hydration with ssr-only mode, shouldn't call the mounted hook at all. So e.g if you place a console log in there, the browser should not log it. \r\nFor \"simple\" components with basically no logic in it and components that only occur once in your page, the performance benefit is small. But if you apply it to more components, you will see two things:\r\n- initial js loading & parsing is faster (lighthouse \"first cpu idle\")\r\n- page \"reacts\" faster (Estimated Input Latency)\r\n\r\nIt's very likely that you will only notice this on mobile phones though. Try reducing cpu and network performance in chrom dev tools to debug and analyze this on your desktop pc. Check out the performance tab, and watch the JS profiler.","Yes, did that and the JS files for that specific page were indeed deleted. However, the performance didn't improve at all. I guess there is a core issue with vuetify performance. \r\nI mean, if you start a fresh vue project and add vuetify, and run the Lighthouse score, you will get a pretty high First CPU idle and TTI. \r\nThere is an open issue with vuetify to fix this and honestly if it doesn't get any love soon, we are going to move out of Vuetify: \r\nhttps:\/\/github.com\/vuetifyjs\/vuetify\/issues\/7265","@simllll Hey Simon, I did exactly what you told, but I am getting:\r\n\r\n   \u2502   \u2716 Nuxt Fatal Error                                   \u2502\r\n   \u2502                                                        \u2502\r\n   \u2502   Error: Module `modules\/js-optimizer.js` not found.   \u2502\r\n   \u2502                                                        \u2502\r\n\r\nUpdate:\r\n\r\nHad to call it `['~\/modules\/js-optimization.js', { setOutputFilenames: true }],`","@simllll I am getting this error:\r\n\r\n```\r\n FATAL  body.matchAll is not a function                                                    01:59:47\r\n\r\n  at JSOptimizer.nuxt.hook (modules\/js-optimization.js:68:23)\r\n  at o (node_modules\/hable\/dist\/hable.js:1:1052)\r\n  at o.then.o (node_modules\/hable\/dist\/hable.js:1:270)\r\n  at process._tickCallback (internal\/process\/next_tick.js:68:7)\r\n```","@simllll Had to install the matchall polyfill (https:\/\/www.npmjs.com\/package\/string.prototype.matchall) (aparently only es2020). My file ended up looking like so:\r\n\r\n\timport consola from 'consola';\r\n\r\n\timport shim from 'string.prototype.matchall\/shim'\r\n\tshim()\r\n\r\n\tconst logger = consola.withScope('js-optimization:module');\r\n\r\n\tconst bodyRegex = \/<body[^>]*>(.*)<\\\/body>\/s;\r\n\t\/\/ list of all JS includes\r\n\tconst scriptRegex = \/<script[\\w\"= ]*src=\"(.*?)\".*?><\\\/script>\/g;\r\n\t\/\/ essenitials are all with \"pages\" or ending with \"app.js\"\r\n\tconst validScriptRegex = \/\\\/(legacy-)?.*?-(pages.*?|.*app).js\/;\r\n\r\n\t\/\/ eslint-disable-next-line require-await\r\n\tmodule.exports = async function JSOptimizer (moduleOptions) {\r\n\t\tif (!moduleOptions.setOutputFilenames) {\r\n\t\t\tlogger.error(\r\n\t\t\t\t'JS optimization works only when you explicitly opt in for overwriting output filenames in nuxt!'\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!this.options.build) { this.options.build = {}; }\r\n\t\tthis.options.build.filenames = {\r\n\t\t\t...this.options.build.filenames,\r\n\t\t\tapp: ({ isModern, isDev }) =>\r\n\t\t\t\t`${!isModern ? 'legacy-' : ''}${!isDev ? '[contenthash]' : '[name]'}-app.js`,\r\n\t\t\tchunk: ({ isModern, isDev }) =>\r\n\t\t\t\t`${!isModern ? 'legacy-' : ''}${!isDev ? '[contenthash]-' : ''}[name].js`\r\n\t\t};\r\n\r\n\t\tthis.nuxt.hook('render:route', async (url, page, { req, res }) => {\r\n\t\t\tif (!page.html || (res.statusCode && res.statusCode !== 200) || page.redirected || page.error) {\r\n\t\t\t\tif (moduleOptions.debug) {\r\n\t\t\t\t\tlogger.info(\r\n\t\t\t\t\t\t'skipping optimize JS render:route',\r\n\t\t\t\t\t\tJSON.stringify({\r\n\t\t\t\t\t\t\turl,\r\n\t\t\t\t\t\t\tisAmp: req.isAMP,\r\n\t\t\t\t\t\t\tmatchedRoute: req.matchedRoute,\r\n\t\t\t\t\t\t\tpage: page.html.length,\r\n\t\t\t\t\t\t\tstatusCode: res.statusCode,\r\n\t\t\t\t\t\t\terror: page.error,\r\n\t\t\t\t\t\t\tredirected: page.redirected\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (moduleOptions.debug) {\r\n\t\t\t\tlogger.info(\r\n\t\t\t\t\t'optimize JS render:route',\r\n\t\t\t\t\tJSON.stringify({ url, isAmp: req.isAMP, matchedRoute: req.matchedRoute })\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (!req.isAMP) {\r\n\t\t\t\t\/\/ remove all non-essential JS files\r\n\r\n\t\t\t\tlet { html } = page;\r\n\r\n\t\t\t\tconst bodyString = bodyRegex.exec(html);\r\n\r\n\t\t\t\tif (!bodyString || !bodyString[0]) {\r\n\t\t\t\t\tlogger.warn('no body tag found', html);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tconst body = bodyString[0].toString();\r\n\r\n\t\t\t\tconst links = body.matchAll(scriptRegex);\r\n\r\n\t\t\t\tfor (const match of links) {\r\n\t\t\t\t\tif (!validScriptRegex.test(match[1])) {\r\n\t\t\t\t\t\t\/\/ remove non essential JS\r\n\t\t\t\t\t\thtml = html\r\n\t\t\t\t\t\t\t.replace(match[0], '') \/\/ script tag\r\n\t\t\t\t\t\t\t.replace(`<link rel=\"modulepreload\" href=\"${match[1]}\" as=\"script\">`, '') \/\/ module preload\r\n\t\t\t\t\t\t\t.replace(`<link rel=\"preload\" href=\"${match[1]}\" as=\"script\">`, ''); \/\/ preload\r\n\r\n\t\t\t\t\t\tif (moduleOptions.debug) {\r\n\t\t\t\t\t\t\tlogger.info('removed js tags for', match[1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpage.html = html; \/\/ set new response\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlogger.success('JS optimization module initialised');\r\n\t}\r\n\r\nHowever, it didn't work. No scripts would be loaded to page at all.\r\n\r\nWhen visiting any page, having `yarn dev` running, this is the only log output I get:\r\n\r\n```\r\n\u2139 optimize JS render:route {\"url\":\"\/product\/lace-ring-pave-2\"}      js-optimization:module 02:31:51\r\n\u2139 removed js tags for \/_nuxt\/legacy-lang-da-DK.js                   js-optimization:module 02:31:51\r\n```","seems this workaround breaks with \r\n\r\nnuxt v2.13.2\r\nwhen http2.push is enabled\r\n\r\nnuxt v2.13.3\r\nalways\r\n\r\ndoes somebody has an updated solution?\r\n","@maoberlehner are you aware of a workaround to this solution posted by @simllll which unfortunately doesn't seem to work anymore?","Actually, I just tried again to use @simllll's solution on latest Nuxt version, and this time I didn't need the polyfill, and it worked out of the box. Will run a pagespeed test soon to see how\/if things have changed.","@simplenotezy Can you share any results, please?","@simllll Thanks for `js-optimizer.js` script! But looks like it removes `layout` and common styles too, which should be kept.\r\nFor my example, it removes all scripts, except `\/_nuxt\/runtime-app.js`. So `vue-awesome-swiper`, `v-popover` and `client-only` wont work.","Managed to adapt @simllll workaround to work with nuxt **full static mode**.\r\nYou should add `['~\/modules\/js-optimizer.js', { setOutputFilenames: true }]` to your `buildModules` and utilise the `generate:page` hook to edit the html. Also make sure component auto import is not messing with the chunks you want to lazy load - e.g. you'll have to explicitly ignore them from in the `nuxt.config.js` and import manually.\r\n\r\n```\r\nimport consola from 'consola'\r\n\r\nconst logger = consola.withScope('js-optimization:module')\r\n\r\nconst bodyRegex = \/<body[^>]*>(.*)<\\\/body>\/s\r\n\/\/ list of all JS includes\r\nconst scriptRegex = \/<script[\\w\"= ]*src=\"(.*?)\".*?><\\\/script>\/g\r\n\/\/ essenitials are all with \"pages\" or ending with \"app.js\"\r\nconst validScriptRegex = \/(\\\/(legacy-)?.*?-(pages.*?|.*app|.*index).js|\\\/static\\\/.*(state).js)\/\r\n\r\n\/\/ eslint-disable-next-line require-await\r\nmodule.exports = async function JSOptimizer(moduleOptions) {\r\n  if (!moduleOptions.setOutputFilenames) {\r\n    logger.error(\r\n      'JS optimization works only when you explicitly opt in for overwriting output filenames in nuxt!'\r\n    )\r\n    return\r\n  }\r\n\r\n  if (!this.options.build) this.options.build = {}\r\n  this.options.build.filenames = {\r\n    ...this.options.build.filenames,\r\n    app: ({ isModern, isDev }) =>\r\n      `${!isModern ? 'legacy-' : ''}${\r\n        !isDev ? '[contenthash]' : '[name]'\r\n      }-app.js`,\r\n    chunk: ({ isModern, isDev }) =>\r\n      `${!isModern ? 'legacy-' : ''}${!isDev ? '[contenthash]-' : ''}[name].js`,\r\n  }\r\n\r\n  \/\/ eslint-disable-next-line require-await\r\n  this.nuxt.hook('generate:page', async (page) => {\r\n    let { html } = page\r\n\r\n    const bodyString = bodyRegex.exec(html)\r\n\r\n    if (!bodyString || !bodyString[0]) {\r\n      logger.warn('no body tag found', html)\r\n      return\r\n    }\r\n\r\n    const body = bodyString[0]\r\n    const links = body.matchAll(scriptRegex)\r\n\r\n    for (const match of links) {\r\n      if (!validScriptRegex.test(match[1])) {\r\n        \/\/ remove non essential JS\r\n        html = html\r\n          .replace(match[0], '') \/\/ script tag\r\n          .replace(\r\n            `<link rel=\"modulepreload\" href=\"${match[1]}\" as=\"script\">`,\r\n            ''\r\n          ) \/\/ module preload\r\n          .replace(`<link rel=\"preload\" href=\"${match[1]}\" as=\"script\">`, '') \/\/ preload\r\n\r\n        if (moduleOptions.debug) {\r\n          logger.info('removed js tags for', match[1])\r\n        }\r\n      }\r\n    }\r\n    page.html = html \/\/ set new html\r\n  })\r\n\r\n  logger.success('JS optimization module initialised')\r\n}\r\n```","> Managed to adapt @simllll workaround to work with nuxt **full static mode**.\r\n> You should add `['~\/modules\/js-optimizer.js', { setOutputFilenames: true }]` to your `buildModules` and utilise the `generate:page` hook to edit the html. Also make sure component auto import is not messing with the chunks you want to lazy load - e.g. you'll have to explicitly ignore them from in the `nuxt.config.js` and import manually.\r\n> \r\n> ```\r\n> import consola from 'consola'\r\n> \r\n> const logger = consola.withScope('js-optimization:module')\r\n> \r\n> const bodyRegex = \/<body[^>]*>(.*)<\\\/body>\/s\r\n> \/\/ list of all JS includes\r\n> const scriptRegex = \/<script[\\w\"= ]*src=\"(.*?)\".*?><\\\/script>\/g\r\n> \/\/ essenitials are all with \"pages\" or ending with \"app.js\"\r\n> const validScriptRegex = \/(\\\/(legacy-)?.*?-(pages.*?|.*app|.*index).js|\\\/static\\\/.*(state).js)\/\r\n> \r\n> \/\/ eslint-disable-next-line require-await\r\n> module.exports = async function JSOptimizer(moduleOptions) {\r\n>   if (!moduleOptions.setOutputFilenames) {\r\n>     logger.error(\r\n>       'JS optimization works only when you explicitly opt in for overwriting output filenames in nuxt!'\r\n>     )\r\n>     return\r\n>   }\r\n> \r\n>   if (!this.options.build) this.options.build = {}\r\n>   this.options.build.filenames = {\r\n>     ...this.options.build.filenames,\r\n>     app: ({ isModern, isDev }) =>\r\n>       `${!isModern ? 'legacy-' : ''}${\r\n>         !isDev ? '[contenthash]' : '[name]'\r\n>       }-app.js`,\r\n>     chunk: ({ isModern, isDev }) =>\r\n>       `${!isModern ? 'legacy-' : ''}${!isDev ? '[contenthash]-' : ''}[name].js`,\r\n>   }\r\n> \r\n>   \/\/ eslint-disable-next-line require-await\r\n>   this.nuxt.hook('generate:page', async (page) => {\r\n>     let { html } = page\r\n> \r\n>     const bodyString = bodyRegex.exec(html)\r\n> \r\n>     if (!bodyString || !bodyString[0]) {\r\n>       logger.warn('no body tag found', html)\r\n>       return\r\n>     }\r\n> \r\n>     const body = bodyString[0]\r\n>     const links = body.matchAll(scriptRegex)\r\n> \r\n>     for (const match of links) {\r\n>       if (!validScriptRegex.test(match[1])) {\r\n>         \/\/ remove non essential JS\r\n>         html = html\r\n>           .replace(match[0], '') \/\/ script tag\r\n>           .replace(\r\n>             `<link rel=\"modulepreload\" href=\"${match[1]}\" as=\"script\">`,\r\n>             ''\r\n>           ) \/\/ module preload\r\n>           .replace(`<link rel=\"preload\" href=\"${match[1]}\" as=\"script\">`, '') \/\/ preload\r\n> \r\n>         if (moduleOptions.debug) {\r\n>           logger.info('removed js tags for', match[1])\r\n>         }\r\n>       }\r\n>     }\r\n>     page.html = html \/\/ set new html\r\n>   })\r\n> \r\n>   logger.success('JS optimization module initialised')\r\n> }\r\n> ```\r\n\r\nThis will stop all other components `js` files, no mater on lazy-hydrate or not! how to exclude them?","> If you use nuxt, you can actually work around either by using modern mode (due to a bug) or by using a regex to remove the async deferred chunks from html ouput (render:route, see https:\/\/nuxtjs.org\/api\/internals-renderer#hooks)\r\n> \r\n> example plugin:\r\n> \r\n> ```js\r\n> import consola from 'consola';\r\n> \r\n> const logger = consola.withScope('js-optimization:module');\r\n> \r\n> const bodyRegex = \/<body[^>]*>(.*)<\\\/body>\/s;\r\n> \/\/ list of all JS includes\r\n> const scriptRegex = \/<script[\\w\"= ]*src=\"(.*?)\".*?><\\\/script>\/g;\r\n> \/\/ essenitials are all with \"pages\" or ending with \"app.js\"\r\n> const validScriptRegex = \/\\\/(legacy-)?.*?-(pages.*?|.*app).js\/;\r\n> \r\n> module.exports = async function JSOptimizer(moduleOptions) {\r\n> \tif (!moduleOptions.setOutputFilenames) {\r\n> \t\tlogger.error(\r\n> \t\t\t'JS optimization works only when you explicitly opt in for overwriting output filenames in nuxt!'\r\n> \t\t);\r\n> \t\treturn;\r\n> \t}\r\n> \r\n> \tif (!this.options.build) this.options.build = {};\r\n> \tthis.options.build.filenames = {\r\n> \t\t...this.options.build.filenames,\r\n> \t\tapp: ({ isModern, isDev }) =>\r\n> \t\t\t`${!isModern ? 'legacy-' : ''}${!isDev ? '[contenthash]' : '[name]'}-app.js`,\r\n> \t\tchunk: ({ isModern, isDev }) =>\r\n> \t\t\t`${!isModern ? 'legacy-' : ''}${!isDev ? '[contenthash]-' : ''}[name].js`\r\n> \t};\r\n> \r\n> \tthis.nuxt.hook('render:route', async (url, page, { req, res }) => {\r\n> \t\tif (!page.html || (res.statusCode && res.statusCode !== 200) || page.redirected || page.error) {\r\n> \t\t\tif (moduleOptions.debug) {\r\n> \t\t\t\tlogger.info(\r\n> \t\t\t\t\t'skipping optimize JS render:route',\r\n> \t\t\t\t\tJSON.stringify({\r\n> \t\t\t\t\t\turl,\r\n> \t\t\t\t\t\tisAmp: req.isAMP,\r\n> \t\t\t\t\t\tmatchedRoute: req.matchedRoute,\r\n> \t\t\t\t\t\tpage: page.html.length,\r\n> \t\t\t\t\t\tstatusCode: res.statusCode,\r\n> \t\t\t\t\t\terror: page.error,\r\n> \t\t\t\t\t\tredirected: page.redirected\r\n> \t\t\t\t\t})\r\n> \t\t\t\t);\r\n> \t\t\t}\r\n> \t\t\treturn;\r\n> \t\t}\r\n> \r\n> \t\tif (moduleOptions.debug) {\r\n> \t\t\tlogger.info(\r\n> \t\t\t\t'optimize JS render:route',\r\n> \t\t\t\tJSON.stringify({ url, isAmp: req.isAMP, matchedRoute: req.matchedRoute })\r\n> \t\t\t);\r\n> \t\t}\r\n> \r\n> \t\tif (!req.isAMP) {\r\n> \t\t\t\/\/ remove all non-essential JS files\r\n> \r\n> \t\t\tlet { html } = page;\r\n> \r\n> \t\t\tconst bodyString = bodyRegex.exec(html);\r\n> \r\n> \t\t\tif (!bodyString || !bodyString[0]) {\r\n> \t\t\t\tlogger.warn('no body tag found', html);\r\n> \t\t\t\treturn;\r\n> \t\t\t}\r\n> \t\t\tconst body = bodyString[0];\r\n> \r\n> \t\t\tconst links = body.matchAll(scriptRegex);\r\n> \r\n> \t\t\tfor (const match of links) {\r\n> \t\t\t\tif (!validScriptRegex.test(match[1])) {\r\n> \t\t\t\t\t\/\/ remove non essential JS\r\n> \t\t\t\t\thtml = html\r\n> \t\t\t\t\t\t.replace(match[0], '') \/\/ script tag\r\n> \t\t\t\t\t\t.replace(`<link rel=\"modulepreload\" href=\"${match[1]}\" as=\"script\">`, '') \/\/ module preload\r\n> \t\t\t\t\t\t.replace(`<link rel=\"preload\" href=\"${match[1]}\" as=\"script\">`, ''); \/\/ preload\r\n> \r\n> \t\t\t\t\tif (moduleOptions.debug) {\r\n> \t\t\t\t\t\tlogger.info('removed js tags for', match[1]);\r\n> \t\t\t\t\t}\r\n> \t\t\t\t}\r\n> \t\t\t}\r\n> \r\n> \t\t\tpage.html = html; \/\/ set new response\r\n> \t\t}\r\n> \t});\r\n> \r\n> \tlogger.success('JS optimization module initialised');\r\n> };\r\n> ```\r\n> \r\n> save it in modules\/js-optimization.js and add `['modules\/js-optimizer.js', { setOutputFilenames: true }]` to the modules of nuxt.config.js\r\n\r\ni'm getting \r\nCannot read property 'startsWith' of undefined  ","\r\n> i'm getting Cannot read property 'startsWith' of undefined\r\n\r\ncheck node version\r\n"],"labels":["feature request"]},{"title":"TypeScript: Vue types $attrs should be type Record<string, any>","body":"### Version\r\n2.6.10\r\n\r\n### What is expected?\r\n`Vue.prototype.$attrs` should be type `Record<string, any>` and not `Record<string, string>`.\r\n\r\nSince `2.4.0`, `vm.$attrs` has contained extracted bindings not recognized as props. The type of these values is unknown.\r\n\r\n### Steps to reproduce\r\nTake the following component:\r\n```javascript\r\nnew Vue({\r\n  data: function () {\r\n    return {\r\n      count: 0\r\n    }\r\n  },\r\n  mounted() {\r\n    let someFunc = this.$attrs.someBoundAttr as Function\r\n    \/\/ Type 'string' cannot be converted to type 'Function'\r\n  },\r\n  template: `\r\n    <button v-on:click=\"count++\" :someBoundAttr=\"() => count\">\r\n      You clicked me {{ count }} times.\r\n    <\/button>`\r\n})\r\n```\r\n\r\nNotice the error in TypeScript checking:\r\n```\r\nType 'string' cannot be converted to type 'Function'\r\n```\r\n\r\n### What is actually happening?\r\n...\r\n\r\n\r\n### Reproduction link\r\n[http:\/\/www.typescriptlang.org\/play\/](http:\/\/www.typescriptlang.org\/play\/)\r\n\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["It's true that `$attrs` can be more than strings, but they come from the parent not the component itself"],"labels":["typescript"]},{"title":"Equivalent for this.$listeners for native events?","body":"### What problem does this feature solve?\r\nImagine a wrapper component where you need to pass events to a child component. This is possible for non native events using `this.$listeners`, but it strips out native events. It would be good if we had something like `this.$nativeListeners` so that we can pass native events down to child components as well.\r\n\r\n In the meantime, Is there a workaround to pass events to child components?\r\n\r\n### What does the proposed API look like?\r\n`this.$nativeListeners` \r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Maybe something like `inheritNativeListeners: true` (that default to false) to go in pair with `inheritAttrs`\r\n\r\nNative listeners are available in functional components but are passed to the root of the component in regular components","Thanks for the reply! Is there a workaround to get the native events out of the root?","not that i'm aware of","@DM2489 \r\n> Is there a workaround to get the native events out of the root\r\n\r\nYou can access them in `this.$vnode.data.nativeOn`","Note they will still be bound to the root element though and that you should avoid reading `$vnode` in general and never modify it"],"labels":["feature request"]},{"title":"Performance: compile default slots to functions","body":"### What problem does this feature solve?\r\nThe original v-slot implementation was not available in `this.$slots`, but that was added in 2.6.4. Scoped slots reduce unnecessary re-renders with nested slots, so this change would hopefully provide a performance improvement for component libraries. \r\n\r\n### What does the proposed API look like?\r\n`<foo>default slot<\/foo>`\r\n\r\nshould output\r\n\r\n```js\r\n_c('foo',{scopedSlots:_u([{key:\"default\",fn:function(){return [_v(\"default slot\")]},proxy:true}])})\r\n```\r\n\r\nEquivalent to `<foo v-slot>default slot<\/foo>`\r\n\r\n---\r\n\r\nNote #9580 could be a problem if lots of people rely on that behaviour. \r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I've got a working version of this locally but I'd like to test it further over the weekend, it's my first look here so have probably naturally oversimplified. I also auto-prettified `codegen\/index` which is a bit of a pain.\r\n\r\nWIP: https:\/\/github.com\/LukeeeeBennett\/vue\/commit\/677ac91cbe6f5cb71b01b8336070454f48be0018","After running the tests and seeing many failures, my suspicions were confirmed \ud83d\ude1b I corrected for a lot of them and I seem to have the general compilation of the function together but am struggling to handle cases like the following...\r\n\r\n```\r\n  <foo>\r\n    default-slot-content\r\n    <span slot=\"test\">\r\n      test-slot-content\r\n    <\/span>\r\n  <\/foo>\r\n```\r\n\r\nWith my current changes, `foo` is the same as `<foo v-slot>` and this breaks the `test` slot as no default slot placeholder is declared. Without `v-slot`, `default-slot-content` is ignored. I hope to put some more time into this as its beneficial to look around but let me know if you wanted to take it off me for a release.","Hmm that could be a problem, maybe why it wasn't done originally. I'm not familiar with the vue compiler but my first thought is to just filter anything without `slotTarget`","> Hmm that could be a problem, maybe why it wasn't done originally. I'm not familiar with the vue compiler but my first thought is to just filter anything without `slotTarget`\r\n\r\n@KaelWD I thought the same! It seems this isn't (always?) available but it has to be at some point so I'll keep digging, the behaviour might not even be in the same ground I've already covered \ud83d\udd0d Maybe its impossible or leads to some tough patterns and we leave it :)\r\n\r\nThought: Anyone know if there is a significantly rewritten compiler for 3.0?\r\n\r\nUpdate: No progress thus far. May end up in the wind."],"labels":["improvement"]},{"title":"vue-template-compiler lacks a stringify API","body":"### What problem does this feature solve?\r\nwhen i use vue-template-compiler parseComponent a vue file, and use  @babel\/parser @babel\/traverse @babel\/generator modify some code at vueTemplateComplier AST.script content \r\nBut can not find a api to auto generate file from  vueTemplateComplier AST it to origin file.\r\n\r\n\r\n### What does the proposed API look like?\r\nconst fileContent = compiler.generateComponent(<vueTemplateComplier AST>, {\r\n        pad: 'space'\r\n});\r\n\/\/ fileContent is same as *.vue file content\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["As I understand it's actually a feature request instead of a question so I modified your title.","Or we may consider adding it to [`@vue\/component-compiler-utils`](https:\/\/github.com\/vuejs\/component-compiler-utils).","Any updates here? I also wonder wether the code for stringification exists somewhere in the Vue Universe already\u2026 "],"labels":["feature request"]},{"title":"v-on listeners array","body":"### What problem does this feature solve?\r\nTwo components with scoped slots that provide events to a child component. If they are used together some listeners may be overwritten if not normalised first. \r\n\r\n```html\r\n<v-menu>\r\n  <template #activator=\"{ on: menu }\">\r\n    <v-tooltip bottom>\r\n      <template #activator=\"{ on: tooltip }\">\r\n        <v-btn v-on=\"{ ...tooltip, ...menu }\"> <!-- If both have a click event, only the menu will work -->\r\n          Dropdown w\/ Tooltip\r\n        <\/v-btn>\r\n      <\/template>\r\n      <span>Im A ToolTip<\/span>\r\n    <\/v-tooltip>\r\n  <\/template>\r\n  <v-list>[...]<\/v-list>\r\n<\/v-menu>\r\n```\r\n\r\n### What does the proposed API look like?\r\n```html\r\n<component v-on=\"[{ click: foo }, { click: bar }]\">\r\n```\r\nEquivalent to:\r\n```html\r\n<component v-on=\"{ click: [foo, bar] }\">\r\n```\r\n\r\nIn the first example:\r\n```html\r\n<v-menu>\r\n  <template #activator=\"{ on: menu }\">\r\n    <v-tooltip bottom>\r\n      <template #activator=\"{ on: tooltip }\">\r\n        <v-btn v-on=\"[tooltip, menu]\">\r\n          Dropdown w\/ Tooltip\r\n        <\/v-btn>\r\n      <\/template>\r\n      <span>Im A ToolTip<\/span>\r\n    <\/v-tooltip>\r\n  <\/template>\r\n  <v-list>[...]<\/v-list>\r\n<\/v-menu>\r\n```\r\n\r\nCurrently this throws `[Vue warn]: v-on without argument expects an Object value`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["at the moment, using a helper to merge looks like the way to go"],"labels":["feature request","has workaround"]},{"title":"Performance: Include\/Use uid in the name when using performance.measure","body":"### What problem does this feature solve?\r\nThis is in regards when Vue.config.performance is set to true. \r\nWhen there is multiple components of the same name, it is difficult to distinguish which component coincide to which performance information.\r\n\r\nOne simple use case is rendering components inside a v-for.\r\n\r\n### What does the proposed API look like?\r\nInstead of just using name (Vue._name), I suggest to include the _uid to better distinguish components with the same name\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["improvement"]},{"title":"Vue should not cause execution of content within <noscript> tags","body":"### Version\r\n2.6.8\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/ncwuvekm\/1\/](https:\/\/jsfiddle.net\/ncwuvekm\/1\/)\r\n\r\n### Steps to reproduce\r\nCheck the \"network\" tab.\r\n\r\nYou can see that Vue causes a request to the content within the `<noscript>`\r\n\r\n### What is expected?\r\nVue should not cause execution of `<noscript>`content\r\n\r\n### What is actually happening?\r\nVue causes requests to elements within `<noscript>`\r\n\r\n---\r\nIt's typical when websites are using Vue to supplement UI and a common pattern is to wrap the site with an `id=\"app\"`\r\n\r\nHowever, this introduces a problem when people are using `<noscript>` in various areas of the site that are not within Vue components as Vue will execute it regardless.\r\n\r\nA use case example would be using a lazy loading library with a `<noscript>` fallback.\r\n\r\n```html\r\n<img src=\"thumbnail.jpg\" data-src=\"hi-resolution.jpg\" \/>\r\n<noscript><img src=\"hi-resolution.jpg\" \/><\/noscript>\r\n```\r\n\r\nVue will cause the `hi-resolution.jpg` image to download even though it's within the `<noscript>`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->\r\n\r\n> For anybody experiencing this issue, a hack is to add `v-if=\"false\"` to your `<noscript>` to prevent the element from rendering e.g.`<noscript v-if=\"false\">`","comments":["It's not that Vue processes the content, the browser seems to fire the requests with `noscript` tags added dynamically (which I wonder if should even be allowed)\r\n\r\n```js\r\nconst noscript = document.createElement('noscript')\r\nconst img = document.createElement('img')\r\nimg.setAttribute('src', \"https:\/\/images.unsplash.com\/photo-1552084007-76f5feb8d22a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60\")\r\n\r\nnoscript.appendChild(img)\r\n\r\nwindow.app.appendChild(noscript)\r\n```\r\n\r\nI think we could avoid rendering `noscript` elements in general, using a v-if=\"false\" is a valid workaround, you can combine it with v-pre too so Vue skips rendering any of their children and probably boosting the performance a bit too","Sorry processing was probably the wrong word :) I could just see Vue was causing them to run.\r\n\r\nI\u2019ll try out the v-pre you\u2019ve mentioned as well to see what that affects, thanks for the tip :)\r\n\r\nI\u2019m a little confused with your code snippet, what is that trying to demonstrate? - the noscript itself is just in a PHP template for something else, however because the page wrapper is what the \u201cnew Vue ( el = #app )\u201d Vue starts to work it\u2019s magic which causes this side effect ","The code is showing the problem without Vue","Ah okay - do you think this is something Vue could handle? As if it works with v-if and v-pre then would suggest it can handle it without side effects?","It seems anti-intuitive (or an invalid use case) for `<noscript>` to be added through scripting -- the very thing that `<noscript>` indicates is disabled. \ud83d\ude1c ","@tony19 - that\u2019s \u201csort\u201d of my point. The noscript itself isn\u2019t added through JS it just happens to be in the server side page source ","What he's saying is that you are adding it through Vue by feeding it to Vue, which adds dynamically content. I get the usecase though, it's added in case there is no JS (Vue doesn't run) but if Vue runs you want it to be ignored the same way it is ignored upon first rendering","Just add the `inline-template` attribute to your `<noscript>` tag\r\n\r\n``` html\r\n<noscript inline-template>\r\n <img src=\"\/\/something.jpg\">\r\n<\/noscript>\r\n```","@Antoine-Demailly We've already established that there's several \"hacks\" to work around this issue, but that's not the point.\r\n\r\nThe solution should either be\r\n\r\n- Vue internally makes sure it doesn't cause any side effects or execution for `noscript` content\r\n- There's sufficient documentation, caveats or compatibility notices within the Vue documentation that highlight this side effect and explain an agreed \"best practice\" to follow to make sure it doesn't happen.\r\n\r\n---\r\n\r\n@posva - The `v-pre` trick did not work, I was hoping it would as it seems better than `v-if` or `inline-template` as it's more descriptive. You can see the example https:\/\/jsfiddle.net\/nvfuyj8k\/ - it still requests the content within the noscript","yeah, i said combine it to v-if to prevent vue from running inside, it's a performance improvement. Rendering wasn't the right word, interpreting maybe? Anyway, you can check it out in vue docs"],"labels":["has workaround"]},{"title":"Pass component instance as second argument in computed setters","body":"### What problem does this feature solve?\r\nAllow the usage of arrow functions  in copmuted setters\r\nFrom #7688 \r\n\r\n```js\r\ncomputed: {\r\n  value: {\r\n    get: vm => vm.someValue,\r\n    set: (val, vm) => vm.someValue = val\r\n  }\r\n}\r\n```\r\n\r\n### What does the proposed API look like?\r\n```js\r\ncomputed: {\r\n  value: {\r\n    get: vm => vm.someValue,\r\n    set (val, vm) {\r\n      this === vm \/\/ true\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["feature request","has PR"]},{"title":"Missing information regarding v1.x EOL\/LTS plans","body":"### Version\r\n1.0.28\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/3ay9r8hz\/](https:\/\/jsfiddle.net\/3ay9r8hz\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen README.md and search for End Of Life \/ LTS support\r\n\r\n### What is expected?\r\nFind information about expected response from VueJs regarding 1.x EOL\/LTS\r\n\r\n### What is actually happening?\r\nNothing is mentioned regarding the stance from VueJs on supporting 1.x branches\r\n\r\n---\r\nOpening after discussion with @LinusBorg on the forum: https:\/\/forum.vuejs.org\/t\/vue-1-x-end-of-life-support\/58143\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["We communicated EOL in a blogpost that announced v2, but never actually documented this propertly I think, so it's fair to add this to the README in the `v1` branch and maybe the docs as well (in the docs repo)"],"labels":["intend to implement","improvement","1.x"]},{"title":"feat: add access to context from serverPrefetch (fix #9447)","body":"**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\nFirst argument of hook will be `context`, not `vm`\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [x] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [x] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n#9447\r\n**Other information:**\r\n","comments":["@Justineo I've fixed all problems and added a test for this\r\n"],"labels":["semver:minor","feat:ssr"]},{"title":"transition before-leave js-hook does not manipulate the DOM which will be transitioned","body":"### Version\r\n2.6.7\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/8zcdpkv0\/](https:\/\/jsfiddle.net\/8zcdpkv0\/)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nPlease see jsfiddle.\r\n\r\nAny changes in the `before-leave` hook won't affect the DOM which is transitioned.\r\n\r\nMy actual problem is that I try to transition an element which has `aria-live=\"polite\"` or `rule=\"alert\"`, which will be read out by a screenreader.\r\nApparently the change of classes from the transition are noticed by the screenreader and the message will be read out again.\r\nI tried to fix this for accessibility purposes with the `before-leave` hook, but that doesn't seem to work correctly.\r\n\r\n\r\n\r\n### What is expected?\r\nIt would either be great if the transitioned DOM will remove all attributes which will cause the screenreader to read it out again, or to allow the javascript hook `\"before-leave\"` to actually change the DOM **before** the transition happens.\r\n\r\n### What is actually happening?\r\nThe old DOM will be transitioned (and the screenreader will read the content again).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I modified your code a little and the HTML now is:\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Vue Dev<\/title>\r\n  <link href=\"style.css\" rel=\"stylesheet\">\r\n  <script src=\"vue.js\"><\/script>\r\n  <script src=\"script.js\" defer><\/script>\r\n<\/head>\r\n<body>\r\n<div id=\"app\">\r\n  <button @click=\"handleClick\">\r\n    toggle\r\n  <\/button>\r\n\r\n  <transition mode=\"out-in\" name=\"fade\" appear @before-leave=\"onBeforeLeave\" @after-enter=\"role = 'alert'\">\r\n    <p v-if=\"isActive\" :role=\"role\" id=\"test\">{{ message }}<\/p>\r\n  <\/transition>\r\n<\/div>\r\n<\/body>\r\n<\/html>\r\n```\r\nThe JS is:\r\n```js\r\nnew Vue({\r\n  el: '#app',\r\n  data(){\r\n    return {\r\n      message: 'Hello Vue.js!',\r\n      role: null,\r\n      isActive: true,\r\n    }\r\n  },\r\n  methods: {\r\n    handleClick() {\r\n      document.getElementById('test').textContent = 'new message';\r\n      this.isActive = !this.isActive;\r\n    },\r\n    onBeforeLeave() {\r\n      this.message = 'new message'; \/\/ this does not affect the DOM which will fade out\r\n      this.role = 'document'; \/\/ this does not affect the DOM which will fade out ---> screenreaders will detect the class-changes and read out the content again :\\\r\n    }\r\n  }\r\n})\r\n```\r\nI added an `id` to the element to be modifed and in the click listener I used native JavaScript to change the `textContent` of the element. The code above works as you expect.\r\n\r\nActually I am not giving a solution to this situation but trying to figure out what is missed here. I also checked the devtool. I found that `message` property was changed immediately when I clicked the button, however it was not rerendered before the beginning of the animation.\r\n\r\nI will continue paying attention to this problem. I am not sure if I can work it out later, but I will try.","**UPDATE:** If I use `vm.$nextTick` to set the `isActive` attribute it also works.\r\n```js\r\nnew Vue({\r\n  el: '#app',\r\n  data(){\r\n    return {\r\n      message: 'Hello Vue.js!',\r\n      role: null,\r\n      isActive: true,\r\n    }\r\n  },\r\n  methods: {\r\n    handleClick() {\r\n      this.message = 'new message';\r\n      this.$nextTick(() => {\r\n        this.isActive = !this.isActive;\r\n      });\r\n    },\r\n    onBeforeLeave() {\r\n      this.message = 'new message'; \/\/ this does not affect the DOM which will fade out\r\n      this.role = 'document'; \/\/ this does not affect the DOM which will fade out ---> screenreaders will detect the class-changes and read out the content again :\\\r\n    }\r\n  }\r\n})\r\n```","This is indeed one of the limitations of current transition, I'm not sure if it's something that can be changed.\r\nThe current way to deal with this is changing the data used in the template in one function and then, after one tick, change the variable that triggers the animation like @DaKoala showed with nextTick"],"labels":["has workaround"]},{"title":"make serverPrefetch() rejection trappable","body":"### What problem does this feature solve?\r\nCurrently, rejections in `serverPrefetch` cannot be handled\r\neg.\r\n```\r\nserverPrefetch() {\r\n\r\n   return Promise.reject('myError')\r\n}\r\n```\r\n\r\n\r\n### What does the proposed API look like?\r\nMaybe send `serverPrefetch` rejections as `renderStream` error event ?\r\n\r\neg.\r\n\r\n```\r\nconst renderStream = renderer.renderToStream(context)\r\nrenderStream.on('error', err => { ... })\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Is there necessary to stop the renderer and throw an error for renderStream?\r\nIn Vue 2.6.x, I thinks this means \"only this component has error, not the hold app\",so it choose to stop render this component only, and the warning will be report when hydrating in browser.","I agree that stopping the rendering is too severe for a rejection, but we need at least a mean to accurately detect that something is going wrong during a `serverPrefetch`.\r\n\r\nAFAIU, serverPrefetch rejection arrives here (`arguments[0]` of `end()`):\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/6fe07ebf5ab3fea1860c59fe7cdd2ec1b760f9b0\/src\/server\/render-stream.js#L44-L49\r\nand could be simply pass as argument of `this.emit('beforeEnd')`","Just came across this. This issue actually prevents me from implementing `renderToStream` in my app at all because there's just no way of recovering from that state and for example refresh the page using `renderToString`. Really hope this could be fixed in Vue 2.7 and we'd get an error event if serverPrefetch fails."],"labels":["improvement"]},{"title":"Chrome overrides value if superior to max value of input[type=range] because Vue sets attributes in the same order as they are provided","body":"### Version\r\n2.6.6\r\n\r\n### Reproduction link\r\nhttps:\/\/codepen.io\/posva\/pen\/LqMMNV\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\r\n- set value attribute before max with a value > 100 on Chrome\r\n\r\n### What is expected?\r\nVue should respect the value attr regardless of whether it is outside of the bounds of the default min\/max threshold\r\n\r\n### What is actually happening?\r\nVue sets the value to 100 if it is >100\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I made the example better by sticking a delay in before loading Vue:\r\nhttps:\/\/jsfiddle.net\/kvwsmnc6\/2\/\r\n\r\nAnd I noticed that default browser behaviour is that values >100 are not accepted because of the default min\/max.\r\n\r\nSo I suspect this does boil down as I said to \"Vue does not support range min\/max\" \u2013 the only slider that is actually behaving unlike the browser default is the last one in my example, where min and max are supplied.","Updated to reflect above:\r\nhttps:\/\/jsfiddle.net\/kvwsmnc6\/3\/","There are many things going on here, first it seems to be browser related, as it doesn't happen on Safari. On chrome it seems the value is coerced to 100 by the browser. When providing the min\/max attributes, the order matters because if the value is set before max, it will have a default max of 100 on Chrome (apparently), so doing\r\n\r\n```html\r\n<input type=\"range\" min=\"0\" max=\"1000\"  value=\"200\">\r\n```\r\n\r\nwill fix the problem\r\n\r\nI'm not sure we should workaround this. It's already very weird for Chrome to setup a default of 100 but I haven't checked the spec on this","Wow, can confirm that  reordering the attributes does workaround the problem, and you're right, it doesn't happen in Safari.","yep, reordering works for me. Thanks @posva"],"labels":["browser quirks","has workaround"]},{"title":"\u5347\u7ea72.6\u4ee5\u4e0a\u7248\u672c\u540e\u5728\u90e8\u5206\u5b89\u5353\u673a\u4e0ainput\u4f7f\u7528v-model\u7684\u540c\u65f6\u6709\u5bf9\u6570\u636e\u683c\u5f0f\u5316\u65f6\u5149\u6807\u5f02\u5e38","body":"### Version\r\n2.6.6\r\n\r\n### Reproduction link\r\nhttps:\/\/codepen.io\/matf5\/project\/editor\/ARGnKV\r\n\r\n\r\n```\r\ncomputed: {\r\n    cardNoFormat: {\r\n      get() {\r\n        return this.cardNo.replace(\/(\\d{4})(?=\\d)\/g, '$1 ');\r\n      },\r\n      set(value) {\r\n        this.cardNo = value;\r\n      }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n\u4f8b\u5982\u8f93\u5165\u8f93\u516562148\u65f6\uff0c\u6570\u636e\u4f1a\u53d8\u4e3a6214 8\r\n\r\n### What is expected?\r\n\u5149\u6807\u4f4d\u4e8e8\u540e\u9762\r\n\r\n### What is actually happening?\r\n\u6709\u95ee\u9898\u7684\u5b89\u5353\u673a\u5982vivo\uff0c\u534e\u4e3a\u8363\u8000\u5728\u90e8\u5206\u6d4f\u89c8\u5668\u5185\u6838\u4e0b\uff08\u5982uc\uff09\u5149\u6807\u4f1a\u5361\u57288\u524d\u9762\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["> # After upgrading to 2.6 or higher, the input v-model behaves differently than expected on some Android devices.\r\n> \r\n> ### Version\r\n> 2.6.6\r\n> \r\n> ### Reproduction link\r\n> [https:\/\/codepen.io\/matf5\/project\/editor\/ARGnKV](https:\/\/codepen.io\/matf5\/project\/editor\/ARGnKV)\r\n> \r\n> ```\r\n> computed: { cardNoFormat: { get() { return this.cardNo.replace(\/(\\d{4})(?=\\d)\/g, '$1 '); }, set(value) { this.cardNo = value; } } }\r\n> ``` \r\n> ### Steps to reproduce\r\n> For example, when you enter 62148, the data will change to 6214 8.\r\n> \r\n> ### What is expected?\r\n> The cursor is after the 8.\r\n> \r\n> ### What is actually happening?\r\n> On some Android devices (such as Vivo and Huawei Glory) in some browser kernels (such as uc) the cursor will be stuck before of 8.\r\n\r\n\r\nAs a sidenote: I cannot reproduce on my OnePlus 6(t) using Chrome or Firefox, but can using the mentioned UC Browser. Pretty sure it's not an issue with Vue.","> > # After upgrading to 2.6 or higher, the input v-model behaves differently than expected on some Android devices.\r\n> > ### Version\r\n> > 2.6.6\r\n> > ### Reproduction link\r\n> > https:\/\/codepen.io\/matf5\/project\/editor\/ARGnKV\r\n> > ```\r\n> > computed: { cardNoFormat: { get() { return this.cardNo.replace(\/(\\d{4})(?=\\d)\/g, '$1 '); }, set(value) { this.cardNo = value; } } }\r\n> > ```\r\n> > ### Steps to reproduce\r\n> > For example, when you enter 62148, the data will change to 6214 8.\r\n> > ### What is expected?\r\n> > The cursor is after the 8.\r\n> > ### What is actually happening?\r\n> > On some Android devices (such as Vivo and Huawei Glory) in some browser kernels (such as uc) the cursor will be stuck before of 8.\r\n> \r\n> As a sidenote: I cannot reproduce on my OnePlus 6(t) using Chrome or Firefox, but can using the mentioned UC Browser. Pretty sure it's not an issue with Vue.\r\n\r\nThanks for helping reproduce. I think it is a browser quirks too. However, I do not know why the version '2.5.22' has not this problem but the version above '2.6.0-beta.1' can reproduce. Maybe due to the dependencies updating?","https:\/\/imgur.com\/a\/vi2EaVk\r\nipad air2\r\n5.0 (iPad; CPU OS 12_1_4 like Mac OS X) AppleWebKit\/605.1.15 (KHTML, like Gecko) Version\/12.0 Mobile\/15E148 Safari\/604.1\r\n\r\nI can reproduce.\r\n\r\n\r\nI think it\u2019s implement issue. You should modify your implement method to avoid display result to affect input.\r\nAfter It sets from computed is 12345, it will dispaly 1234 5. It\u2019s right.\r\nBut it re-uses the display value 1234 5 and append 6, it will set 1234 56 in vue instance.\r\n"],"labels":["need repro","browser quirks"]},{"title":"feat(ssr): add ability to cleanup after request","body":"close #9463\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [x] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [x] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\nThe point of this \"feature\" is to be able to do something to the `app` to mark it as \"invalid\" so that `vue-router` has a way to detect and cleanup objects it might have left hanging around in memory. This feature might be able to be used for other reasons, but it is probably truly a fix. Also, a change would need to be approved in `vue-router` as well for the memory leak there to even go away (see https:\/\/github.com\/vuejs\/vue-router\/issues\/2606), and that might get fixed by other means, so this might not be worth doing anything with if that doesn't also get approved.\r\n\r\nBecause we're in control of when the app is created in SSR it didn't seem like there was any other sensible option but to give us control of when to clean it up, though maybe something can be done based on `runInNewContext`. Also, maybe a more explicit API would be better, e.g. some way to mark the app as \"served\", `$isServer && $isServed`.\r\n\r\nNote I'm submitting this knowing that there is a good chance that this will be tossed, so feel free to do so if this is not what is wanted.","comments":["Is it going to be merged ?","PR made in vue-router illustrating what would need to be done there as well: https:\/\/github.com\/vuejs\/vue-router\/pull\/2867\r\n\r\nAgain I am skeptical as to whether or not this is the right approach, but I am skeptical of everything I do so take that for what it's worth.","Note I made another PR made in vue-router illustrating a way to fix the leak without requiring this PR: https:\/\/github.com\/vuejs\/vue-router\/pull\/2875"],"labels":["semver:minor"]},{"title":"Custom error message from prop validator","body":"### What problem does this feature solve?\r\nCurrently, if a custom validator fails, we get a console error log saying `Invalid prop: custom validator check failed for prop 'email'` which is not helpful if you're using a third-party component. The only way to find out what failed is to jump into the source code of the component and try to understand what does this custom validator do. If the custom validator can provide a custom message that immensely changes developer experience e.g. Instead of `Invalid prop: custom validator check failed for prop 'email'`, it can say, `Invalid prop: the prop 'email' should be a valid GMail address.`\r\n\r\n### What does the proposed API look like?\r\nNo change in API signature only behavior of `validator` function. If a validator function throws an error, use it as a custom message for prop validation. Also, allow `{{name}}` interpolation in error message. So the `email` can be defined as:\r\n\r\n``` js\r\n...\r\n  props: {\r\n    email: {\r\n      validator(value) {\r\n        if (!value.endsWith('@gmail.com')) throw new Error('the prop '{{name}}' should be a valid GMail address.')\r\n        return true\r\n     }\r\n   }\r\n...\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Duplicate of #8726 tho \ud83d\ude06\r\nI think we should talk about the api a bit first","It was one-liner but I agree on finalizing the API first. With custom validation messages, we can have user-land packages shipping complex validation helpers. I, myself, can use it in [znck\/prop-types](https:\/\/github.com\/znck\/prop-types).","FYI: At the moment, there is a way to have a better warning though, one where you can add the value passed to the prop in the warning message:\r\n```javascript\r\n\/**\r\n * @type {RegExp}\r\n *\/\r\nconst validatorWarningRegExp = \/Invalid prop: custom validator check failed for prop \"(.*?)\"\\.\/;\r\n\r\n\/**\r\n * Better warn messages than the built-ins (adds value for invalid prop, ...).\r\n *\r\n * @see {@link https:\/\/vuejs.org\/v2\/api\/#warnHandler}\r\n *\r\n * @function\r\n * @param {VueConstructor} vue\r\n * @param {function(...*)} handler\r\n *\/\r\nexport const initGlobalWarnHandlerForVue = (vue, handler) => {\r\n  vue.config.warnHandler = (message, vm, trace) => {\r\n    const validatorWarning = validatorWarningRegExp.exec(message);\r\n    if (validatorWarning) {\r\n      handler('[APP] Vue:', message, '\\nValue:', vm[validatorWarning[1]], trace);\r\n    } else {\r\n      handler('[APP] Vue:', message, trace);\r\n    }\r\n  };\r\n};\r\n```","When the returned value from a validator is truthy, I wonder if it would be simpler to check if what's returned is a string, then if it is, make that the warning message. Thoughts?","@chrisvfritz that would break validators that look like `val => val.name`, i personally expect only the truthiness of a validation result to be checked.","@diachedelic That's true. I like the thrown error better then. \ud83d\ude42 \r\n\r\n@posva As for the API, I think it can be discussed separately if throwing an error could be an acceptable solution. Though my personal thought is that unless we're using `this` for something else in validators, I think it might be most intuitive to just bind props (and `$props`) directly to the function, so they can be accessed the same way as anywhere else in the component.","But right now validation takes place in order so not all props are available to validate. I don't think validators should have access to `this` though","@posva Yes, the change would require postponing prop validation until after the first pass of processing props. Regarding validators having access to `this`, what are your concerns?","It would allow people to test against anything related to the component and I don't think we should allow that because a validator should be a pure function. Apart from props and maybe slots presence, what would you use from `this` ","@posva That's it - probably just props and maybe slots. I wouldn't expect the entire instance to be initialized at that point, similar to how not everything is available on `this` in `beforeCreate`. When you say \"a validator should be a pure function\", what are the disadvantages or edge cases you're trying to avoid?","I want to avoid access to other properties, for example the `$router`, `$store` or other things.","This is exactly what is asked on the forum: [Props validation error message override](https:\/\/forum.vuejs.org\/t\/props-validation-error-message-override\/46765)\r\n\r\nSo to resume my point of view:\r\n\r\nWe could\/should be able to do things like this:\r\n\r\n```javascript\r\nprops: {\r\n    foobar: {\r\n        type: String,\r\n        validator: ( value ) => { return [ 'foo', 'bar' ].includes( value ) },\r\n        errorMessage: 'Invalid prop \"foobar\", available values are \"foo\", \"bar\".'\r\n    }\r\n}\r\n```\r\n\r\nand the incriminated code with one implementation to that purpose could be:\r\n\r\n```javascript\r\n\/**\r\n * Assert whether a prop is valid.\r\n *\/\r\nfunction assertProp (\r\n    prop,\r\n    name,\r\n    value,\r\n    vm,\r\n    absent\r\n) {\r\n    if (prop.required && absent) {\r\n        if (prop.errorMessage) {\r\n            warn(\r\n                prop.errorMessage,\r\n                vm\r\n            );\r\n        } else {\r\n            warn(\r\n                'Missing required prop: \"' + name + '\"',\r\n                vm\r\n            );\r\n        }\r\n        return\r\n    }\r\n    if (value == null && !prop.required) {\r\n        return\r\n    }\r\n    var type = prop.type;\r\n    var valid = !type || type === true;\r\n    var expectedTypes = [];\r\n    if (type) {\r\n        if (!Array.isArray(type)) {\r\n            type = [type];\r\n        }\r\n        for (var i = 0; i < type.length && !valid; i++) {\r\n            var assertedType = assertType(value, type[i]);\r\n            expectedTypes.push(assertedType.expectedType || '');\r\n            valid = assertedType.valid;\r\n        }\r\n    }\r\n    if (!valid) {\r\n        if (prop.errorMessage) {\r\n            warn(\r\n                prop.errorMessage,\r\n                vm\r\n            );\r\n        } else {\r\n            warn(\r\n                \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\r\n                \" Expected \" + (expectedTypes.map(capitalize).join(', ')) +\r\n                \", got \" + (toRawType(value)) + \".\",\r\n                vm\r\n            );\r\n        }\r\n        return\r\n    }\r\n    var validator = prop.validator;\r\n    if (validator) {\r\n        if (!validator(value)) {\r\n            if (prop.errorMessage) {\r\n                warn(\r\n                    prop.errorMessage,\r\n                    vm\r\n                );\r\n            } else {\r\n                warn(\r\n                    'Invalid prop: custom validator check failed for prop \"' + name + '\".',\r\n                    vm\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nSo what about a such implementation ?\r\n","I think the validator method should pass some kind of a reject function that let the developer throw an error according to the validation. Or the validator function could return true, false, or a string that will be displayed as the error message. The `errorMessage` property you propose is too limiting in my opinion.","Why not let the validator return the error message? If result is a function call the function, this allows custom logging nicely, if it returns a string use it as the message. Otherwise return the default message.\r\n","`errorMessage` is definitely too limiting. e.g. I'm coding composable run-time type validators for deep objects where I need to report a validation error on a nested value in a complex Object prop (I forked and [adapted a lib](https:\/\/github.com\/tohagan\/runtime-validation\/) for use in Vue).\r\n  \r\n@rahicks26  I agree that just returning a string as validation error would be preferred BUT sadly it's not backward compatible with the existing API so I think throwing an exception is the only option. Its also safer since your custom validator may itself have a bug that throws an exception.","This doubles the console messages, but you can currently just `console.warn` or `console.error` from within existing validators.\r\n\r\n```\r\nvalidator(value) {\r\n  const isValid = !!<what you\u2019d normally return from your validator>\r\n  if (!isValid) {\r\n    console.warn(`${value} is not valid`)\r\n  }\r\n  return isValid\r\n}\r\n```","The simplest way for now to print a custom error message and not produce a double error is to raise a console error (in my case I don't want to throw an Error) and return true in the validator function.\r\nLike in this example:\r\n\r\n```js\r\nselectableRows: {\r\n      validator: value => {\r\n        if (![undefined, true, false, 1, '1', ''].includes(value)) {\r\n          console.error(\r\n            'Wrong value for the `selectableRows` prop. ' +\r\n            `Given: \"${value}\", expected one of: [undefined, true, false, 1, '1', ''].`\r\n          )\r\n        }\r\n        return true\r\n      }\r\n    }\r\n```","> The simplest way for now to print a custom error message and not produce a double error is to raise a console error (in my case I don't want to throw an Error) and return true in the validator function. Like in this example:\r\n> \r\n> ```js\r\n> selectableRows: {\r\n>       validator: value => {\r\n>         if (![undefined, true, false, 1, '1', ''].includes(value)) {\r\n>           console.error(\r\n>             'Wrong value for the `selectableRows` prop. ' +\r\n>             `Given: \"${value}\", expected one of: [undefined, true, false, 1, '1', ''].`\r\n>           )\r\n>         }\r\n>         return true\r\n>       }\r\n>     }\r\n> ```\r\n\r\nWhilst this does work, it still doesn't feel like it should be the way to achieve this. Logging an error could be useful (in an isolated context within a custom validator) but I would guess most who are writing code that is going to production shouldn't be adding `console.error` in places.\r\n\r\nMy use case for needing custom error messages is for both cross prop validation and validation on itself. I am the author of a design system and therefore I am concerned about consumers\/other developers being aware of prop validation when in development. I need to avoid errors to leak to anywhere but development (Vue warn won't do this).\r\n\r\nI have had to create this which I am using in a props watch handler with `immediate: true` to be able to validate a component's props against each other:\r\n```js\r\nexport function validateVueProps(propCondition, errorMessage) {\r\n  if (propCondition && process.env.NODE_ENV !== \"production\") {\r\n    throw new TypeError(`${errorMessage}`);\r\n  }\r\n}\r\n```\r\nMy second use case is having a custom validator for prop type of `Array`. I want to specify a `value` and `label` key that exists in the passed `Array`. It would be nice to display custom message - `\"Your options must contain a label and value\"`, for example. A similar thing referenced here https:\/\/github.com\/vuejs\/vue\/issues\/6496#issuecomment-922364934. e.g.\r\n```js\r\nvalidator: (options) => options.map(key => Object.keys(key)).includes(\"label\" && \"value\")\r\n```\r\nA generic `[Vue warn]` on quite specific validation seems antithetical. \r\n\r\nMy specific use cases (I appreciate cross prop validation is not really on topic here) shouldn't necessarily deter from the idea that:\r\n- Vue supplies a way of passing in custom validators. This could determine any behaviour you like given that prop.\r\n- A `[Vue warn]` is useful insofar that it tells you something that has happened but not why. Surely only half the way there for the reason you wanted to write a custom validator in the first place? I am currently relying on writing `JSDoc` in the component to specify prop behaviour.\r\n- Relying on `[Vue warn]` is a good thing in that the `warnHandler` is turned off for `\"production\"`.\r\n\r\nJust my thoughts, thanks all.","Is this still in progress?","+1"],"labels":["feature request"]},{"title":"Provide way to destroy app in SSR","body":"### What problem does this feature solve?\r\n\r\nThis issue is related to: https:\/\/github.com\/vuejs\/vue-router\/issues\/2606\r\nProviding a way to destroy the app or mark the SSR request as complete (maybe on `$ssrContext`) is a potential fix to this problem, though maybe not the best one.\r\n\r\nTo recap:\r\nA memory leak happens when the `router-view` is programmed to appear conditionally, and the component matching the view has a `beforeRouteEnter` guard and a callback is passed to it's `next(...)` method (e.g. `next(vm => {})`).\r\n\r\nThis will cause `vue-router` to poll every 16ms until the `router-view` materializes.\r\n\r\nIn a typical SSR application an instance of the app is created per request, which means the `router-view` will never appear, causing infinitely recursing poll methods.\r\n\r\n### What does the proposed API look like?\r\nA potential fix to this would be to detect when the app is destroyed in `vue-router`'s `poll` method, and allow the user to destroy the app that they created in `entry-server.js`.\r\n\r\nA simplified example:\r\n```javascript\r\nexport default context => {\r\n  return new Promise((resolve, reject) => {\r\n    const { app, router } = createApp(context)\r\n\r\n    const { url } = context\r\n\r\n    router.push(url)\r\n\r\n    router.onReady(() => {\r\n      resolve(app)\r\n    }, reject)\r\n  }).then(destroyApp)\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["feature request"]},{"title":"Add beforeDeactivated hook","body":"### What problem does this feature solve?\r\nI use :key and keep-alive tag to display chats. And in order to maintain the position of the scroll when switching between chat rooms, I need to save the scrollTop when the hook is deactivated and put it on the element when the hook is activated. But the deactivated hook is already called when the element has been removed from the DOM, so I needed a new hook - beforeDeactivated.\r\n\r\nSeriously, this hook is needed just like the others before* hooks.\r\n\r\n### What does the proposed API look like?\r\nHere, I think, everything is clear. Simple hook.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I want to do this","oops"],"labels":["feature request"]},{"title":"Ability to access context from serverPrefetch","body":"### What problem does this feature solve?\r\nAfter vue 2.6 was released and serverPrefetch hook was introduces I lost a possibility to update `httpCode` during SSR if there was a data fetching failure.\r\n\r\n### What does the proposed API look like?\r\nProvide access to `context` from the `serverPrefetch` hook.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["We should probably provide `context` as the first argument. In the meanwhile you can use `this.$ssrContext`."],"labels":["intend to implement","feature request","feat:ssr"]},{"title":"Ability to cancel rendering","body":"### What problem does this feature solve?\r\nUnder high-load, some pages are rendered to slow. The connection is aborted by the remote side. It would be nice to be able to cancel pages rendering in this case.\r\n\r\n### What does the proposed API look like?\r\nconst rendererId = renderer.renderToString(...);\r\n\r\nrendererId.cancel();\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["@yyx990803 Do you have any suggestion how to solve this problem in current SSR implementation?"],"labels":["feature request","feat:ssr"]},{"title":"feat: add origin prop for <transition-group>, fix #8424","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [x] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\nAs described in #8424, `<transition-group>` now records the items' position relative to the viewport (via `getBoundingClientRect()`). While page scroll happens just before the items start to perform transition, it will look like that they are flashed out of the container and slowly move to their original position.\r\n\r\nThis PR added a new prop: `origin` for `<transition-group>`, which is a `string` value that indicates how we are gonna calculate the position of transition items. Available values are `viewport` (the current behavior) and `document`. When set to `document`, the position of the items are always calculated relative to the top left corner of the document element, which will retain their position in the document when page scroll occurs.\r\n","comments":["On second thought: we are not always performing page scroll on the root element. If the page scroll is triggered by an element other than the root element, this fix would fail. Perhaps we should provide a way for users to specify the \u201corigin\u201d element themselves?","What about detecting the `scrollParent` of the element? walking up the DOM tree to find out which element is scrollable.","@tmorehouse The problem is that scroll doesn't have to be triggered on the closest `scrollParent`. We may have enum values like `viewport`\/`document`\/`scrollParent` or find a way to let users specify the origin manually."],"labels":["semver:minor"]},{"title":"Types of FunctionalComponentOptions breaks","body":"### Version\r\n\r\nvue: 2.5.22\r\n\r\ntypescript: 3.2.4\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/meteorlxy\/9x2ts16a\/1\/](https:\/\/jsfiddle.net\/meteorlxy\/9x2ts16a\/1\/)\r\n\r\n\r\n### Steps to reproduce\r\n\r\n```ts\r\n\/\/ works with vue 2.5.17\r\n\/\/ fails with vue 2.5.18+\r\nimport Vue, { FunctionalComponentOptions } from 'vue'\r\n\r\nconst testFunctionalOptions: FunctionalComponentOptions = {\r\n  functional: true,\r\n}\r\n\r\nVue.component('Test', testFunctionalOptions)\r\n```\r\n\r\n### What is expected?\r\nNo types error as in v2.5.17\r\n\r\n### What is actually happening?\r\n```sh\r\nerror TS2345: Argument of type 'FunctionalComponentOptions<Record<string, any>, PropsDefinition<Record<string, any>>>' is not assignable to parameter of type 'ComponentOptions<Vue, DefaultData<Vue>, DefaultMethods<Vue>, DefaultComputed, PropsDefinition<Record<string, any>>, Record<string, any>>'.\r\n  Types of property 'render' are incompatible.\r\n    Type '(this: undefined, createElement: CreateElement, context: RenderContext<Record<string, any>>) => VNode | VNode[]' is not assignable to type '(createElement: CreateElement, hack: RenderContext<Record<string,\r\nany>>) => VNode'.\r\n      Type 'VNode | VNode[]' is not assignable to type 'VNode'.\r\n        Type 'VNode[]' is missing the following properties from type 'VNode': isRootInsert, isComment\r\n```\r\n\r\n### PS\r\n\r\nIt seems to be introduced here:\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/commit\/bf2e2ed159f680cd4e230427ce94739c657c1b61#diff-23d7799dcc9e9be419d28a15348b0d99R116\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["As a workaround, you can give the props an explicit type:\r\n\r\n```ts\r\nconst testFunctionalOptions: FunctionalComponentOptions<{}> = {\r\n  functional: true,\r\n}\r\n```","@posva Yeah thanks","Related to https:\/\/github.com\/vuejs\/vue\/issues\/9357"],"labels":["typescript","has workaround"]},{"title":"feat(types): add DOM type definition for JSX element","body":"**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n\r\n# Descriptions\r\n- Inspired by [vue-tsx-support](https:\/\/github.com\/wonderful-panda\/vue-tsx-support) by @wonderful-panda who was also inspired by [@types\/react](https:\/\/github.com\/DefinitelyTyped\/DefinitelyTyped\/tree\/master\/types\/react\/v15)\r\n- This PR is not aiming for perfection. I'd love to hear feedbacks from Vue core team as this is my very first PR.\r\n\r\nBy providing officially maintained HTML Attributes Types, developers can get a huge benefit when they are writing TSX.\r\n\r\n![2019-01-25 19 04 08](https:\/\/user-images.githubusercontent.com\/8381075\/51739106-07f28280-20d4-11e9-849f-ce708eef0765.png)\r\n\r\nAll you need is just a few tweaks on `shims-tsx.d.ts`\r\n\r\n```js\r\n\/\/ shims-tsx.d.ts\r\nimport Vue, { VNode, VIntrinsicElementAttributes } from 'vue'\r\n\r\ndeclare global {\r\n  namespace JSX {\r\n    \/\/ tslint:disable no-empty-interface\r\n    interface Element extends VNode {}\r\n    \/\/ tslint:disable no-empty-interface\r\n    interface ElementClass extends Vue {}\r\n    interface IntrinsicElements extends VIntrinsicElementAttributes {\r\n      [elem: string]: any\r\n    }\r\n  }\r\n}\r\n```","comments":["@andoshin11 \r\nThank you for your PR!\r\nIt looks nice to me, but it looks like it should be provided in other ways (e.g. Vue CLI plugin), not Vue Core.\r\n\r\n@ktsn @HerringtonDarkholme \r\nWhat do you think?","I think this is a nice add. However I agree with @kazupon this change is not suitable to be included in Vue's core repo. The reason is that dom definition alone cannot provide tsx improvement by default: users have to include shim-tsx.d.ts manually.\r\n\r\nMy point is if we want to include the dom definition for tsx, we should support tsx support at core repo at first (which is already scheduled in Vue 3). Otherwise this change is better to reside in tsx-support library. @ktsn any opinion?","I think it is fine to include this in core repo now as we'll do that sooner or later. We can update `shim-tsx.d.ts` in Vue CLI template to use the dom types until we support it by default."],"labels":["typescript","semver:minor"]},{"title":"transition-group replacing group flicker","body":"### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/y3910wr9j9](https:\/\/codesandbox.io\/s\/y3910wr9j9)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nClick the change button in the link, no matter if animation is on or off (changing the animation name) - there is a brief flicker where both groups are present. \r\n\r\nThis is barely visible in this scenario, but on a full page and more rows it's a lot more visible.\r\n(Might need to click multiple times to notice) \r\n\r\n### What is expected?\r\nGroups would transition \"atomically\" without having a moment where both groups are present\r\n\r\n### What is actually happening?\r\nBoth groups are present for a moment \r\n\r\n---\r\nThe only way to solve this is to remove the the transition-group component completely, not even changing the name of the transition to null or something that doesn't match works.\r\n\r\nHappened when I was working on a data table and was using the move transition for sorting, and then when replacing rows completely I saw this flicker and couldn't get around it easily.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["You have two workarounds, either use a `key` on transition-group to change it while changing lists which would make the most sense since you are replacing the whole list anyway. Or add some CSS to make the animation immediate and hide the elements while leaving\r\n\r\n```css\r\n.test-enter, .test-leave-to {\r\n  display: none;\r\n}\r\n```\r\n\r\nI think this is expected because you are using a transition but you don't want one. As described in the docs, transitions add `leave` + `leave-active`, then removes `leave` and adds `leave-to` (after a tick) when removing elements, then removes `leave-active` and `leave-to`.\r\nTo make transitions work when we don't want one, we would need to check for a transition-duration of 0. But it's making the transition work in a scenario it is not needed.","I tried doing the display:none thingy when I tried working around the case - but that didn't work. it also doesn't work in the example (I added the display:none and the transition-duration 0 and still seeing the flicker - did I do it wrong?).\r\n\r\nAbout checking if the whole group changed - it's not always trivial, especially in a data table that will have pagination, sorting, filtering etc, and sometimes only some element change.","Perhaps the best solution to this would be to explicitly say what transitions I am interested in for a transition-group with a default for all - (also maybe for normal transition? not sure if that's already implemented).","adding\r\n\r\n```css\r\n.test-enter,\r\n.test-leave-to {\r\n  display: none;\r\n}\r\n```\r\n\r\ndoes work tho","https:\/\/codesandbox.io\/s\/y3910wr9j9 nope - unless I did something wrong here - I can still see both groups at the same time.","@posva it seems the display: none does indeed works around the issue - it seems I needed to refresh after saving the code sandbox, sorry about that! \r\n\r\n@LinusBorg I was using Date + index just to mimic a random id, it works now because of the display: none I added, I will remove it from the example though as to not confuse.","To summarise: Workaround is working - I added to the example with and without workaround, wether to close this or leave open - up to you guys, thanks! :)","What?\r\n        --xiaobai","@phouri can you please provide a codesandbox.io link with the working example?","https:\/\/codesandbox.io\/s\/y3910wr9j9 the example before has the workaround (click on the right button). I must say I think that it worked ok in this example but when I tried in a heavy application scenario it wasn't perfect.","I have a related question, about transition keys.\r\n\r\nI checked the Vue source code (2.6.10).  It appears that it does not respect key names for transitions -- it mangles it to includes its own prefix (`__transition-${this._uid}-` + myKey) , which is subject to change if a prop changes.  This appears to have been on-purpose (it literally checks to make sure it's using the internal prefix).  I consider this a bug, as it causes a full re-render of the transitioned vnode if all I want to do is change the exit transition class.  \r\n\r\nFor example, I might have a \"stack\" of pages that slide to the left to exit when going forward, or to the right to enter if going backwards; otherwise no animation.  So the transition depends on what the user is doing.  The enter transition is not the issue, but if I change the leave active class, Vue will change the transition key, which will re-render the page (though nothing has changed), causing a brief flicker.\r\n\r\nAnd I can't find a work around...\r\n\r\nMy question(s): what is the rationale for not respecting a supplied transition key?  And is there a work-around?"],"labels":["has workaround"]},{"title":"feat(props): allow defining a required prop as null","body":"Based on #1961. It wasn't possible to specify a required prop of type object and pass null as the\r\nvalue\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [X] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [ ] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [ ] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n\r\nThe tests cases reflect what I'm trying to fix. I remember this was pointed out multiple times in the past. We cannot explicitely pass a `null` prop when the type is `Object` and the prop is required. This would keep current behaviour but allow having the type `null` for explicit null values. I want to add more tests and maybe refactor but I remember this was problematic as it could break some validation, so I would like so feedback about types you may use that would break with this","comments":["Some potential inconsistency here:\r\n\r\n```js\r\nprops: {\r\n  foo: null, \/\/ skip\r\n  bar: {\r\n    type: null \/\/ skip\r\n  },\r\n  baz: {\r\n    type: [String, null] \/\/ String or null\r\n  }\r\n}\r\n```\r\n\r\nWhile using constructors, all three usage share the same semantics.","Added some tests to reflect that as well","There are tests for this now. Is there still something preventing this from going in?"],"labels":["feature request","discussion","improvement","semver:minor"]},{"title":"Function-type props broken in TypeScript","body":"### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/keegan_openbay\/gehkx7pf\/10\/](https:\/\/jsfiddle.net\/keegan_openbay\/gehkx7pf\/10\/)  \r\n[https:\/\/jsfiddle.net\/keegan_openbay\/018rs3ae\/11\/](https:\/\/jsfiddle.net\/keegan_openbay\/018rs3ae\/11\/)\r\n\r\n(More explanation in the fiddle, but keep in mind that JSFiddle doesn't show TS errors)\r\n\r\n### Steps to reproduce\r\n1. Declare a prop of type `Function`, and with a default function that returns some value; e.g.,\r\n\r\n```ts\r\n\/\/ ...\r\n  props: {\r\n    fooFn: {\r\n      type: Function,\r\n      default: () => true,\r\n    },\r\n  },\r\n\/\/ ...\r\n```\r\n\r\n2. Try to use that function elsewhere in your component options; e.g.,\r\n\r\n```ts\r\n\/\/ ...\r\n  methods: {\r\n    useFooFn(): void {\r\n      const bar = this.fooFn();\r\n      \/\/ ...\r\n    },\r\n  },\r\n\/\/ ...\r\n```\r\n\r\n### What is expected?\r\n```ts\r\ntype FooFn = typeof this.fooFn; \/\/ Function\r\nthis.fooFn(); \/\/ no errors\r\n```\r\n\r\n### What is actually happening?\r\n```ts\r\ntype FooFn = typeof this.fooFn; \/\/ boolean | Function\r\nthis.fooFn();\r\n\/\/ Cannot invoke an expression whose type lacks a call signature.\r\n\/\/ Type 'boolean | Function' has no compatible call signatures.\r\n```\r\n\r\n---\r\nVue version: 2.5.22\r\nTypeScript version: 3.0.3\r\n\r\ntsconfig.json:\r\n\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"declaration\": false,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"lib\": [\"es7\", \"dom\"],\r\n    \"module\": \"es2015\",\r\n    \"moduleResolution\": \"node\",\r\n    \"sourceMap\": true,\r\n    \"target\": \"es5\",\r\n    \"allowSyntheticDefaultImports\": true,\r\n    \"esModuleInterop\": true,\r\n    \"baseUrl\": \".\/app\/javascript\",\r\n    \"noImplicitThis\": true\r\n  },\r\n  \"include\": [\r\n    \"app\/javascript\/**\/*.ts\",\r\n    \"app\/javascript\/**\/*.tsx\",\r\n    \"app\/javascript\/**\/*.vue\"\r\n  ],\r\n  \"exclude\": [\r\n    \"**\/*.spec.ts\",\r\n    \"node_modules\"\r\n  ],\r\n  \"compileOnSave\": false\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I tried adding the test case to the project and couldn't reproduce:\r\n\r\n```ts\r\nVue.extend({\r\n  props: {\r\n    isValid: {\r\n      type: Function,\r\n      default: () => true,\r\n    }\r\n  },\r\n  methods: {\r\n    useFooFn(): void {\r\n      const bar = this.isValid()\r\n      alert(bar)\r\n    }\r\n  }\r\n});\r\n```","@posva Are you using the same TypeScript setup and seeing no compile errors?","no, I'm using the one we have in the repo","Can you try with the setup I posted?","@posva \r\n\r\n![screen shot 2019-01-23 at 3 45 55 pm](https:\/\/user-images.githubusercontent.com\/18669659\/51635963-06835780-1f26-11e9-8a1c-1a6173d04406.png)\r\n\r\n![screen shot 2019-01-23 at 3 45 12 pm](https:\/\/user-images.githubusercontent.com\/18669659\/51635914-eeabd380-1f25-11e9-94e8-95158e23b8bd.png)","Found a clue:\r\n\r\nI just downgraded `vue` (and `vue-template-compiler`) to **2.5.17** and it works fine, as it used to. Then I upgraded both to **2.5.18**, and now I see a bunch of compiler errors (including this one) which had never occurred before:\r\n\r\n```ts\r\n\/\/ for Function-type props with a default like `() => false`, `(arg: number) => false`, etc.:\r\n\/\/ => TS2349: Cannot invoke an expression whose type lacks a call signature. Type 'boolean | Function' has no compatible call signatures.\r\n\/\/ (same error occurs with any return value)\r\n\r\nfunction foo(barEl: HTMLElement) { \/* ... *\/ }\r\nfoo(this.$el);\r\n\/\/ => TS2345: Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.\r\n\r\nconst bar = this.$el.innerText;\r\n\/\/ => TS2339: Property 'innerText' does not exist on type 'Element'.\r\n```\r\n\r\nSeems that:\r\n\r\n1. Function props' types are being recognized as either `Function` _or_ the return type of their `default` function\r\n1. The type of `this.$el` has become `Element` instead of `HTMLElement`\r\n1. This occurs in `vue`\/`vue-template-compiler` 2.5.18+, but not 2.5.17\r\n\r\n~It may have something to do with `\"noImplicitThis\": true` in `tsconfig.json`; setting it to `false` removes all those errors (there is one new error in our project after setting it to `false` but it's to do with a lack of type inference on `this.$store`, all in one component rather than scattered across the project)~","Reverting https:\/\/github.com\/vuejs\/vue\/pull\/8537, specifically this change:\r\n\r\n```diff\r\ndiff --git a\/types\/options.d.ts b\/types\/options.d.ts\r\nindex cc58affe6a..25eb8a0fdf 100644\r\n--- a\/types\/options.d.ts\r\n+++ b\/types\/options.d.ts\r\n@@ -133,7 +133,7 @@ export type PropValidator<T> = PropOptions<T> | Prop<T> | Prop<T>[];\r\n export interface PropOptions<T=any> {\r\n   type?: Prop<T> | Prop<T>[];\r\n   required?: boolean;\r\n-  default?: T | null | undefined | (() => object);\r\n+  default?: T | null | undefined | (() => T | null | undefined);\r\n   validator?(value: T): boolean;\r\n }\r\n```\r\n\r\n...fixes the `Function`-type prop issue.","And reverting https:\/\/github.com\/vuejs\/vue\/pull\/8809, specifically this change:\r\n\r\n```diff\r\ndiff --git a\/types\/vue.d.ts b\/types\/vue.d.ts\r\nindex 44a892ead3..3832f2c9e4 100644\r\n--- a\/types\/vue.d.ts\r\n+++ b\/types\/vue.d.ts\r\n@@ -21,7 +21,7 @@ export interface CreateElement {\r\n }\r\n \r\n export interface Vue {\r\n-  readonly $el: HTMLElement;\r\n+  readonly $el: Element;\r\n   readonly $options: ComponentOptions<Vue>;\r\n   readonly $parent: Vue;\r\n   readonly $root: Vue;\r\n```\r\n\r\n...fixes the `this.$el` defaulting to `Element` issue.","I'll see if I can write up a PR for a fix without resurfacing the original issues those PRs were trying to solve.","Aaaaand I've realized over the past few days that I am not good enough with TypeScript to figure out how to do this.\r\n\r\nWhere...\r\n\r\n1. `\"noImplicitThis\": true` in `tsconfig.json`, and\r\n2. Vue version is 2.5.18 and above,\r\n\r\n...in order to get a prop definition such as this:\r\n\r\n```ts\r\n\/\/ ...\r\n  props: {\r\n    isValid: {\r\n      type: Function,\r\n      default: () => true,\r\n    }\r\n  },\r\n\/\/ ...\r\n```\r\n\r\n...to yield a type of:\r\n\r\n```ts\r\nthis.isValid \/\/=> Type: () => boolean\r\n```\r\n\r\n...instead of:\r\n\r\n```ts\r\nthis.isValid \/\/=> Type: boolean | () => boolean\r\n```\r\n\r\nYou'd have to edit the `PropOptions` interface such that:\r\n\r\n```ts\r\nexport interface PropOptions<T=any> {\r\n  type?: Prop<T> | Prop<T>[];\r\n  required?: boolean;\r\n  \/\/ default?: T | null | undefined | (() => T | null | undefined);\r\n  \/\/ I guess...?\r\n  default?: Function extends T ? (T | null | undefined) : (T | null | undefined | (() => T | null | undefined));\r\n  validator?(value: T): boolean;\r\n}\r\n```\r\n\r\nUnfortunately, that example doesn't work, and the types of other properties on `Vue` are lost. I've tried a _lot_ of different things over the past few days, but clearly I don't have the expertise to understand exactly how to fix the issue.\r\n\r\nI believe, currently, a **Function-type** prop is a **unique** case. It is (correct me if I'm wrong), the _only_ prop type that does not have the option of a default \"factory\" function:\r\n\r\n```ts\r\nprops: {\r\n  fnProp1: {\r\n    type: Function,\r\n    default: () => false, \/\/ type of this.fnProp1 should be `() => boolean`\r\n  },\r\n  fnProp2: {\r\n    type: Function,\r\n    default: () => (() => false), \/\/ type of this.fnProp2 should be `() => (() => boolean)`\r\n  },\r\n  boolProp1: {\r\n    type: Boolean,\r\n    default: false, \/\/ type of this.boolProp1 should be `boolean`\r\n  },\r\n  boolProp2: {\r\n    type: Boolean,\r\n    default: () => false, \/\/ type of this.boolProp2 should STILL be `boolean`\r\n  },\r\n  strProp1: {\r\n    type: String,\r\n    default: 'hi', \/\/ type of this.strProp1 should be `string`\r\n  },\r\n  strProp2: {\r\n    type: String,\r\n    default: () => 'hi', \/\/ type of this.strProp2 should STILL be `string`\r\n  },\r\n  \/\/ etc.\r\n},\r\n```","Furthermore, if you want to return an _object_ from the default, it _completely_ skips the function type altogether:\r\n\r\n```ts\r\n\/\/ ...\r\n\r\n  props: {\r\n    returnsAnObject: {\r\n      type: Function,\r\n      default: () => ({}),\r\n    }\r\n  },\r\n\r\n\/\/ ...\r\n\r\n  \/\/ Type SHOULD be `Function`, or `() => {}`, but...\r\n  this.returnsAnObject; \/\/=> Type: {}\r\n  \/\/ ...which is not even the [broken] union `{} | () => {}` type like the other cases\r\n\r\n  this.returnsAnObject();\r\n  \/\/ Cannot invoke an expression whose type lacks a call signature.\r\n  \/\/ Type '{}' has no compatible call signatures.\r\n\r\n\/\/ ...\r\n```","I'd rather not keep bumping this unnecessarily, since it's mostly an echo chamber at the moment, but this `2.5.17` to `2.5.18+` patch update breaks our build, necessitates a lot of boilerplate around what used to be correctly-inferred properties on our components, and the causal changes seem to be fairly clear. Any attention or help would be greatly appreciated!","if you annotate with the `PropType<>` it should work, this was a fix on https:\/\/github.com\/vuejs\/vue\/pull\/9733\r\n\r\n```ts\r\nconst Example = Vue.extend({\r\n\ttemplate: `\r\n  \t<button @click=\"doSomethingWithFoo()\">\r\n    \t<slot><\/slot>\r\n    <\/button>\r\n  `,\r\n\r\n  props: {\r\n    \/\/ original issue\r\n    fooFn: {\r\n      type: Function as PropType<()=>string>,\r\n      default: () => { return 'hey this is the default return value'; },\r\n    },\r\n\r\n\r\n     returnsAnObject: {\r\n      type: Function as PropType<()=>object>,\r\n      default: () => ({}),\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    doSomethingWithFoo(): void {\r\n      const obj = this.returnsAnObject(); \/\/obj is object\r\n    \tconst bar = this.fooFn(); \/\/ bar is string\r\n  \r\n      alert(bar);\r\n    },\r\n  },\r\n});\r\n```\r\n\r\n\r\nthere's an PR https:\/\/github.com\/vuejs\/vuejs.org\/pull\/2068 to update docs\r\n\r\n\r\n\r\n\r\n","Is this issue back on TypeScript 3.6? The following compiles fine on TS 3.5.3 and fails on the latest TS 3.6.3.\r\n\r\nVue: 2.6.10\r\nTypeScript: 3.6.3\r\n```\r\nimport Vue from 'vue';\r\n\r\nexport default Vue.extend({\r\n  props: {\r\n    cb: {\r\n      type: Function,\r\n      default: () => {},\r\n    },\r\n  },\r\n\r\n  created() {\r\n    this.cb();\r\n  }\r\n});\r\n```\r\n\r\n```\r\n13:10 This expression is not callable.\r\n  No constituent of type 'void | Function' is callable.\r\n    11 | \r\n    12 |   created() {\r\n  > 13 |     this.cb();\r\n       |          ^\r\n    14 |   }\r\n    15 | });\r\n```\r\n\r\nRemoving `default: () => {}` from `cb` as well as annotating it with `PropOptions<() => void>` helps, but this wasn't needed before.\r\n\r\nPut a repro here: https:\/\/github.com\/romansp\/vue-typescript-prop-function-default. \r\n\r\nMay be related to #10455.","@romansp I'm fairly confident that hasn't worked without annotation since Vue 2.5.17. Annotating with `PropType<...>` (**note:** _not_ `PropOptions<...>`) works just fine on Vue 2.6.10 and TypeScript 3.6.3, though.","@kjleitz I'm sure that it does work on TS 3.5.3 and Vue 2.6.10. You can try cloning my repro https:\/\/github.com\/romansp\/vue-typescript-prop-function-default. I just pushed `ts-3.5.3` branch where `vue serve` runs fine.","@romansp Ah, I see, you're not using the same `tsconfig.json` as in my original example. The fact that you're using `\"strict\": true` instead of `\"noImplicitThis\": true` fixes it in your `ts-3.5.3` branch (we've also switched to using `\"strict\": true` since the time this ticket was written; much better!). Even with `\"strict\": true` though, if you set Vue back to v2.6.8 it's actually still broken in your `ts-3.5.3` branch. It's always been wonky.\r\n\r\nVue v2.6.10 & TS v3.5.3 must be one of those special combinations that don't error for function props \ud83e\udd37\u200d\u2642 But even in that branch, the \"working\" case loses type info from `this.cb`\u2014better to use `type: Function as PropType<() => void>,` instead of a bare `type: Function,`.","This is still broken, even with `\"strict\": true`; can't use a `default` for a function-type prop. A more complete example:\r\n\r\n```ts\r\nconst ComponentWithFunctionProps = Vue.extend({\r\n  props: {\r\n    functionProp: {\r\n      type: Function,\r\n      default: () => true,\r\n    },\r\n    functionPropWithBooleanReturnType: {\r\n      type: Function as PropType<() => boolean>,\r\n      default: () => true,\r\n    },\r\n    booleanProp: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    booleanPropWithFunctionDefault: {\r\n      type: Boolean,\r\n      default: () => true,\r\n    },\r\n  },\r\n  methods: {\r\n    test(): void {\r\n      \/\/ ERROR!\r\n      \/\/ (property) functionProp: boolean | Function\r\n      \/\/ -------------------------------------------\r\n      \/\/ This expression is not callable.\r\n      \/\/   No constituent of type 'boolean | Function' is callable.ts(2349)\r\n      this.functionProp();\r\n\r\n      \/\/ ERROR!\r\n      \/\/ (property) functionPropWithBooleanReturnType: boolean | (() => boolean)\r\n      \/\/ -----------------------------------------------------------------------\r\n      \/\/ This expression is not callable.\r\n      \/\/   Not all constituents of type 'boolean | (() => boolean)' are callable.\r\n      \/\/     Type 'false' has no call signatures.ts(2349)\r\n      this.functionPropWithBooleanReturnType();\r\n\r\n      \/\/ const foo: boolean\r\n      const foo = this.booleanProp;\r\n\r\n      \/\/ const bar: boolean\r\n      const bar = this.booleanPropWithFunctionDefault;\r\n    },\r\n  },\r\n});\r\n```\r\n\r\nI submitted a fix for this in https:\/\/github.com\/vuejs\/vue\/pull\/11223."],"labels":["typescript"]},{"title":"Vue-Mobx integration broken with PR #7828","body":"### Version\r\n2.5.18\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/k90k8kwn2r](https:\/\/codesandbox.io\/s\/k90k8kwn2r)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n* Use the `mobxjs\/mobx-vue` package (or a custom integration with Mobx)\r\n* Everything worked fine on Vue 2.5.17 and is broken on 2.5.18 and above\r\n* See that TypeErrors are thrown\r\n\r\n### What is expected?\r\nVue would not attempt to to set the `__proto__` property of a Proxy.\r\n\r\n### What is actually happening?\r\nReactivity with Mobx is broken:\r\n\r\n[Vue warn]: Error in event handler for \"input\": \"TypeError: 'set' on proxy: trap returned falsish for property '__proto__'\"\r\n---\r\nWe attempted to upgrade Vue from 2.5.17 to latest version for our applications - thought it would be smooth because upgrade target was still 2.5.x, but ever version after 2.5.18 is broken with Mobx integration.\r\n\r\nWe have a custom integration with Mobx-state-tree, but some of the code is very similar to `mobxjs\/mobx-vue` integration code.  We are not using that library, and I'm not a Vue internals expert,  but I _think_ I  tracked the problem down to this PR: https:\/\/github.com\/vuejs\/vue\/pull\/7828.  \r\n\r\nSince then I have searched around and found this issue reported to that package also: https:\/\/github.com\/mobxjs\/mobx-vue\/issues\/15#issuecomment-453570397.  @Nemikolh wrote the codesandbox example I referenced above and it appears to be the same conclusion.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Thanks for mentioning me, the other option that I think would be doable is to change mobx itself so that it would allow setting `__proto__` for an array. The problematic code is in `arrayTraps.set` function:\r\n\r\nhttps:\/\/github.com\/mobxjs\/mobx\/blob\/daf6ac0ac8dd369fb6179ec6a7fbbb231f383f9f\/src\/types\/observablearray.ts#L96-L109\r\n\r\nI'm not sure of the impact of such a change though.\r\n\r\nEither way, it would be nice to have test(s) that are run as part of the test suite to verify the mobx integration. I think they should go into the [`mobx-vue`](https:\/\/github.com\/mobx\/mobx-vue) repo but they would need to be triggered whenever a new minor version of vue and\/or mobx is released. That might not be trivial to do.","Good point @Nemikolh - I have no context for which might be the better place to fix this.  I followed the Vue path because that's the package that appeared to break. Maybe core Vue and\/or Mobx contributors will have an opinion (that is compatible\ud83d\ude1c).   It does seem that tests would  be well placed in `mobx-vue`.","what is the actual thing breaking Vue, without any mobx\/mobx-vue import?","Hi @posva, to be honest, probably nothing; but neither is anything broken in Mobx unless you try to use Vue - so I'm a bit at a loss as to how to proceed \ud83d\ude1e With my personal apps (using Vue and Vuex) nothing is wrong.  When I'm working with my employers app (Vue, Mobx, MST) this function:\r\n```\r\nfunction protoAugment (target, src: Object) {\r\n  \/* eslint-disable no-proto *\/\r\n  target.__proto__ = src\r\n  \/* eslint-enable no-proto *\/\r\n```\r\nin `vue\/src\/core\/observer\/index.js` invokes the Mobx `set` on observable arrays and returns `false` (causing the vue warning). https:\/\/github.com\/mobxjs\/mobx\/blob\/daf6ac0ac8dd369fb6179ec6a7fbbb231f383f9f\/src\/types\/observablearray.ts#L96-L109\r\n\r\nI forked the Mobx repo and added a check to the end of the `set` function:\r\n```\r\n        if (name === \"__proto__\") {\r\n            return true\r\n        }\r\n        return false\r\n``` \r\nBut I have a really bad feeling about that as I have no idea what I might be breaking in Vue.  It looks like Vue is trying to hook into the prototype chain to observe changes, but Mobx is already doing that.  So, I don't know what the answer is."],"labels":["need repro"]},{"title":"Allow nested transition to trigger upon removal","body":"### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/wx91uLft\/](https:\/\/jsfiddle.net\/wx91uLft\/)\r\nother: https:\/\/jsfiddle.net\/ae82rfnv\/\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- Show\/hide elements with the  \"Toggle\" button.\r\n- Show\/hide elements with the  \"Toggle Ticked\" button. Shows a workaround.\r\n\r\n### What is expected?\r\nAll transitions should be triggered on leave, even for nested child elements.\r\n\r\n### What is actually happening?\r\nTransition classes don't get applied to nested child elements, when conditions for leaving transitions occur on the same tick.\r\n\r\nWorkaround: Delaying the parent transitions by one tick fixes the problem.\r\n\r\n---\r\nThis has been reported, but got closed due to the sample code did not use `appear` on the `<transition>` elements. (See issues [#7643](https:\/\/github.com\/vuejs\/vue\/issues\/7643) and [#9243](https:\/\/github.com\/vuejs\/vue\/issues\/9243))\r\n\r\nMy example is more detailed and also provides a workaround.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This is working as expected because when both conditions are set to false on the same tick, only the parent is removed by the `v-if`, nothing inside is evaluated. That's why the inner transition doesn't trigger, it wasn't removed directly","Wow, that's disappointing. \ud83d\ude22\r\nSo if we want to have working nested transitions in Vue, this should be considered a feature request?","it could be via a new prop on transition I think \ud83e\udd14 . I haven't checked the feasibility though although it should be possible","Nice! \ud83d\ude0a\ud83d\udc4d","For future reader, @posva is right, we can achieve that via props.\r\n\r\nI made a quick [example here](https:\/\/jsfiddle.net\/tsnkff\/yuh9j3qp\/6\/) for the matter.\r\nI used `@before-leave=\"\"` to trigger the parent transition (change of state), and `@before-enter=\"\"` on the parent, to trigger the animation on the child element."],"labels":["feature request","transition"]},{"title":"Modifier to propagate\/forward events to parent","body":"### What problem does this feature solve?\r\nCurrently, and as far as I know, if we want to propagate an event fired by a child component to the parent (the child's grandparent) we need to $emit the event again, and we need to pass all the arguments one more time. This can become a problem, for example, if the event has a variable number of arguments because we need to specify them manually or pass the whole array as a new argument.\r\n\r\nThe current way would be something like\r\n```\r\n@blur=\"$emit('blur')\"\r\n@create=\"$emit('create', arguments[0])\"\r\n@input=\"$emit('input', arguments[0], arguments[1])\"\r\n```\r\n\r\n### What does the proposed API look like?\r\n```\r\n@blur.propagate\r\n@create.propagate\r\n@input.propagate\r\n```\r\nAnd if we want to both handle the event and propagate it to the parent, we would use\r\n```\r\n@input.propagate=\"someFunction\"\r\n```\r\n----\r\nEDIT: Maybe since .propagate may be confused with the function .stopPropagation(), a better term could be simply .emit\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["why not just `@input=\"$emit('input', arguments)\"` ?\r\n\r\nI do like having a dedicated keyword though","@lopugit because passing the whole array in one argument would make users handle the same event differently in different components, plus it is a little redundant.","Isn't propagating arguments upwards what you want??\n\nOn Wed., 16 Jan. 2019, 6:50 pm Vontus <notifications@github.com wrote:\n\n> @lopugit <https:\/\/github.com\/lopugit> because passing the whole array in\n> one argument would make users handle the same event differently in\n> different components, plus it is a little redundant.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/vuejs\/vue\/issues\/9325#issuecomment-454683246>, or mute\n> the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AM_3BshACHBnU8nluMZLTLrOAGxiD6NEks5vDtmzgaJpZM4aAyIG>\n> .\n>\n","You should be able to use the spread operator, ala:\r\n```\r\n@input=\"$emit('input', ...arguments)\"\r\n```","@laander That solves the issue with the arguments, but I think a modifier to let Vue do it would be a nice addition.\r\n\r\nI think this modifier can be specially useful for wrapper components that need to emit most events they receive from their child component.","I think this would be a cool addition","+1","`@input=\"$emit('input', ...arguments)\"` works great, however `@input.propagate` would be an awesome addition\r\n","nice!!! OPEN SOURCE FTW","That's also great for keeping the whole app more maintainable","I believe you can achieve this by adding `v-on=\"$listeners\"` on a root element of the nested component?","> I believe you can achieve this by adding `v-on=\"$listeners\"` on a root element of the nested component?\r\n\r\nI didn't know that, thank you for the tip! The only problem I find is that you aren't able to select which events are being propagated to the parent, it just forwards every event from the nested component.","@Vontus you can! Just wrap $listeners with your own computed property that filters the keys","Hey, not considered anymore?","Is anyone working on this? I'd love to see this feature","I posted the same request back in 2018 for a `bubble` modifier, but it was rejected as syntax sugar: https:\/\/github.com\/vuejs\/vue\/issues\/7965\r\n\r\nIn Svelte you can just do `<button on:click>` to [forward the event](https:\/\/svelte.dev\/tutorial\/dom-event-forwarding), so it would be really nice if you could just do\r\n`<button @click>` in Vue (or at least had a modifier).","It seems like `$listeners` was removed in Vue 3. What's the recommended way for building a transparent wrapping component now?","@bryanmylee Listeners are now in `$attrs`, and they begin with `on` (e.g., `onClick`)."],"labels":["feature request"]},{"title":"Transition's @appear hook invoked even when appear not specified \/ falsy","body":"### Version\r\n2.5.22\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/anon\/pen\/jXdLGV](https:\/\/codepen.io\/anon\/pen\/jXdLGV)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen the repro and note that the rendered page says \"initial appear\".\r\n\r\n### What is expected?\r\nThe `@appear` hook should not be invoked and the page should just say \"initial\".\r\n\r\n### What is actually happening?\r\nThe `@appear` hook is invoked even though the `transition` doesn't have an `appear` attribute, and hence shouldn't be triggering on appear.  The same thing happens if you add `:appear =\"false\"` to the `transition`.\r\n\r\n---\r\nRan into this when building some custom transition components where `appear` should be user-controlled, but was being invoked all the time instead.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["It's also worth noting that we could improve the docs in this matter: https:\/\/vuejs.org\/v2\/guide\/transitions.html#Transitions-on-Initial-Render\r\n\r\nI'm not sure what is exactly expected here, but I would also say no `appear` events if `appear=false`. It seems there is a `done` callback to it","Hey guys! I am learning this code base so I have implemented a fix for that without knowing if that would be ever needed, feel free to review it if you find it useful or disregard if not. Thanks!","I think this is not a code bug, but the document needs to be described more clearly.\r\n\r\nBoth `appear attribute` and `@appear hook` will cause an appear transition, and `@appear hook` will have a higher priority. If you don't want an appear transition, don't specify `@appear hook`. Because `@appear hook` has a higher priority, using `:appear=false` does not cancel the transition."],"labels":["bug","transition"]},{"title":"[SSR] Add option to output the server entry through webpack","body":"### What problem does this feature solve?\r\nThe guide for Server-Side rendering creates 2 webpack builds, one for the client and one for the server. Then you create a file that imports the outputs from those 2 builds and returns the responses to whatever framework you use (e.g. express). Let's call this file the server handler.\r\nThe issue with this approach is that you would need a third webpack build to process the server handler through webpack as well. You might want to do that for a few different reasons:\r\n 1. To have the same flow for all your files\r\n 2. Because you use typescript\/babel\/minification or other transformations\r\n 3. To use the same style of imports (i.e. ES modules)\r\n\r\n### What does the proposed API look like?\r\nI can think of a few possible solutions:\r\n\r\n#### 1. Define the name of the server handler to emit\r\n\r\nThere could be a configuration option for `VueSSRServerPlugin` that defines one additional entry to emit in the Webpack configuration. This would mean that there could be at most 2 entries, one is used for creating the JSON bundle, the other one to emit the server handler\r\n\r\n```javascript\r\n\/\/ webpack.config.js\r\nconst VueSSRServerPlugin = require('vue-server-renderer\/server-plugin')\r\n\r\nmodule.exports = {\r\n  \/\/ Point entry to your app's server entry file\r\n  entry: {\r\n     main: '\/path\/to\/server-entry.js',\r\n     handler: '\/path\/to\/server-handler.js'\r\n  },\r\n  resolve: {\r\n    alias: {\r\n      'client-manifest': '\/path\/to\/dist\/client\/vue-ssr-client-manifest.json'\r\n    }\r\n  },\r\n  plugins: [\r\n    new VueSSRServerPlugin({ serverHandler: 'handler' })\r\n  ]\r\n}\r\n```\r\n\r\nThe handler would look something like this:\r\n```javascript\r\n\/\/ server-handler.js\r\nimport clientManifest from 'client-manifest';\r\n\/\/ This alias could be created by the VueSSRServerPlugin itself\r\nimport serverBundle from 'server-bundle';\r\nimport { createBundleRenderer } from 'vue-server-renderer';\r\n\r\nconst template = `[...]`;\r\n\r\nconst renderer = createBundleRenderer(serverBundle, {\r\n  template,\r\n  clientManifest,\r\n  runInNewContext: false\r\n});\r\n\r\nexport function handler(event, context) {\r\n  \/\/ use the renderer in here\r\n}\r\n```\r\n\r\nThe upside of this approach is that it should be relatively easy to accomplish this.\r\nAnother upside is that this would be backwards compatible.\r\nThe downside is that there would be quite a bit of configuration necessary to make it look nice \u2014 to avoid importing build outputs directly in code, which would add a dependency on our webpack configuration in the code.\r\n\r\n#### 2. Provide an alias that resolves to the renderer instead of emitting a JSON bundle\r\n\r\nAnother possible approach would be to change completely the way the VueSSRServerPlugin works to reduce the additional webpack configuration necessary. Here's how the webpack configuration would look like:\r\n\r\n```javascript\r\n\/\/ webpack.config.js\r\nconst VueSSRServerPlugin = require('vue-server-renderer\/server-plugin')\r\n\r\nmodule.exports = {\r\n  \/\/ Point entry to your app's server entry file\r\n  entry: '\/path\/to\/server-handler.js',\r\n  plugins: [\r\n    new VueSSRServerPlugin({\r\n      clientManifest: '\/path\/to\/dist\/client\/vue-ssr-client-manifest.json',\r\n      serverEntry: '\/path\/to\/server-entry.js',\r\n      template: '\/path\/to\/template.html'\r\n    })\r\n  ]\r\n}\r\n```\r\n\r\nAnd here is how the server handler would look like:\r\n\r\n```javascript\r\n\/\/ alias defined by the plugin, returns the renderer\r\nimport renderer from 'vue-ssr-server-renderer'\r\n\r\nexport function handler(event, context) {\r\n  \/\/ use renderer here\r\n}\r\n```\r\n\r\nThe clear upside is the reduction of the boilerplate.\r\nThe first big downside is that this would not be backwards compatible. It could be implemented as a new, different plugin.\r\nThe second downside is that there might be other use cases I haven't considered. `createBundleRenderer` takes other arguments as well, and you might not want to instantiate it at the top level.\r\nA smaller downside is that some pieces are connected in webpack rather than in the code, making it unclear where the template is referenced from.\r\n\r\n#### 3. Use a loader to transform the server entry\r\n\r\nThis would be similar to the first proposal, but it would change the way `createBundleRenderer` works.\r\n\r\nStarting from the server handler this time, here is how the usage would look like:\r\n\r\n```javascript\r\nimport App from '\/path\/to\/server-entry.js'\r\nimport clientManifest from 'client-manifest';\r\n\/\/ This function has the client manifest already pulled in by the plugin\r\nimport { createAppRenderer } from 'vue-server-renderer';\r\n\r\nconst template = `[...]`;\r\n\r\nconst renderer = createAppRenderer(app, {\r\n  clientManifest,\r\n  template,\r\n  runInNewContext: false\r\n});\r\n\r\nexport function handler(event, context) {\r\n  \/\/ use renderer here\r\n}\r\n```\r\n\r\nAnd the webpack configuration would be something like this:\r\n\r\n```javascript\r\n\/\/ webpack.config.js\r\n\r\nmodule.exports = {\r\n  \/\/ Point entry to your app's server entry file\r\n  entry: '\/path\/to\/server-handler.js',\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: \/entry-server\\.js$\/,\r\n        loader: 'vue-ssr-loader'\r\n      }\r\n    ]\r\n  },\r\n  resolve: {\r\n    alias: {\r\n      'client-manifest': '\/path\/to\/dist\/client\/vue-ssr-client-manifest.json'\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis approach would have the upside of not requiring magic to happen on the webpack entries, making it possible to have multiple entrypoints.\r\nThe second upside would be to just configure a loader where appropriate, instead of adding a plugin.\r\nThe first downside is that we still have to include the client manifest from the build.\r\nThe second downside is that is could not be feasible with a webpack loader.\r\n\r\n#### So which one?\r\nI believe this problem needs a deeper reflection on the implications for all possible use cases, so someone with a better understanding of the usages of this plugin should trace the path to follow. Other ideas could be possible that would in the future also lead to simpler usages that hide the complexity from the users.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I had to create this issue \"manually\" since using the tool I get `414 Request-URI Too Large` \ud83d\ude2d \r\nThere should be a `feature request` label, which I can't add myself apparently....","More than how to configure SSR entrance","any news on this one ? In my use case, I'm trying to set the `runInNewContext` from the vue.config.js, without having to create 2 webpack build files."],"labels":["feature request"]},{"title":"Support Array subclassing","body":"### Version\r\n2.5.21\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/AmrIKhudair\/pen\/NevxML](https:\/\/codepen.io\/AmrIKhudair\/pen\/NevxML)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1- create a class extending Array and add a custom method\r\n2- instantiate a new instance of the class and add it to data\r\n3- try to call the method on the instance in the template\r\n\r\n### What is expected?\r\nThe method is successfully executed\r\n\r\n### What is actually happening?\r\nError not a function\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Vue 2 currently does not support Array subclassing (Vue 3 development branch already does). I will convert this into a feature request.","@AmrIKhudair \r\nI needed this as well and made it work in user-land. When Vue 3 arrives you can remove it.\r\n\r\n```js\r\nexport function makeReactive (obj) {\r\n  \/\/ eslint-disable-next-line no-proto\r\n  const proto = obj.__proto__\r\n\r\n  Object.defineProperty(obj, '__proto__', {\r\n    get () { return proto },\r\n    \/\/ eslint-disable-next-line no-proto\r\n    set (newValue) { proto.__proto__ = newValue }\r\n  })\r\n}\r\n```\r\n\r\n```js\r\nimport { makeReactive } from 'util'\r\n\r\nexport default class UserCollection extends Array {\r\n  constructor (...args) {\r\n    super(...args)\r\n\r\n    makeReactive(this)\r\n  }\r\n}\r\n```","@edcoreweb\r\nThanks a lot","> @AmrIKhudair I needed this as well and made it work in user-land. When Vue 3 arrives you can remove it.\r\n> \r\n> ```js\r\n> export function makeReactive (obj) {\r\n>   \/\/ eslint-disable-next-line no-proto\r\n>   const proto = obj.__proto__\r\n> \r\n>   Object.defineProperty(obj, '__proto__', {\r\n>     get () { return proto },\r\n>     \/\/ eslint-disable-next-line no-proto\r\n>     set (newValue) { proto.__proto__ = newValue }\r\n>   })\r\n> }\r\n> ```\r\n\r\nYou saved my day in 2022\r\n\r\n"],"labels":["feature request"]},{"title":"Transition is erroneously run when placed with bizarre sequence of sibling elements. ","body":"\r\n### Version\r\n2.5.21\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/analyzeplatypus\/eywraw8t\/513878\/](https:\/\/jsfiddle.net\/analyzeplatypus\/eywraw8t\/513878\/)\r\n\r\n![screen recording 2018-12-20 at 8 21 07 pm mov](https:\/\/user-images.githubusercontent.com\/18376110\/50303197-00b4d500-0495-11e9-9f02-145099a68d15.gif)\r\n\r\n### Steps to reproduce\r\nThe fiddle contains a seemingly random sequence of elements that illustrates the issue (described below). \r\n\r\n1. Open the JSFiddle\r\n2. Click the \"Change\" button\r\n3. The transition plays (it should not).\r\n\r\nTry removing any of the DOM elements and the errant transition no longer plays!\r\n\r\n### What is expected?\r\nThe transition should not run.\r\n(CSS transition classes should not be applied, hooks should not be called, etc.)\r\n\r\n### What is actually happening?\r\nThe transition is run (CSS transition classes are applied).\r\n\r\n---\r\nI came across this while building a complex form with multiple buttons that appear\/disappear based on form state.\r\nI noticed duplicated buttons in one of my unit tests, and found that a transition was being run even though its child's `v-if` binding was not being changed. I duplicated the component and whittled it down until I arrived at the attached JSFiddle.\r\n\r\n\r\nThis issue appears when the following sequence of elements are aligned:\r\n1. A boolean entry in the Vue component's `data` dictionary (`hasChanges: false`, in the JSFiddle)\r\n\r\nThe DOM contains\r\n2. A `<div>` whose `v-if` is bound to the boolean entry (1).\r\n2. A `<transition>` containing a button which modifies the boolean entry (1).\r\n3. An empty `<transition>` element.\r\n4. A `<div>` whose `v-if` is bound to the boolean entry (1) modified by logical NOT (!). (In the fiddle, `v-if=\"!hasChanges\"`).\r\n\r\nWith this exact structure, modifying the boolean entry (1) will run the transition - even though the transition is not bound to the boolean at all!\r\n\r\nIf you remove any of the above elements, **or even reorder them** (!) the errant transition will not run (which is the correct behavior).\r\n\r\n\r\nWhy does the transition run when placed with this particular set of siblings in this particular order?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["It also seems like the `<button>` in the fiddle is **duplicated by the transition system** (watch the DOM in your web inspector!) and simultaneously transitioned in and out: one `<button>` with `-enter-active` and one with `-leave-active`. ","Looks like a bug, as a workaround, wrapping one of the transitions with a simple container should do it","\u4f7f\u7528Vue\u5f00\u53d1\u6df7\u5408APP Vue\u6253\u5305\u540e\u62a5\u9519Uncaught SyntaxError: Unexpected reserved word  \u5230\u65f6\u5b89\u53537.0\u2014\u20145.1\u4e4b\u95f4\u7684\u7248\u672c\u4e0d\u80fd\u4f7f\u7528  \u6c42\u89e3\u51b3\r\n","think i have the same issue:\r\n```vue\r\n<page>\r\n  <component-a \/>\r\n  <transition name=\"page-slide\">\r\n    <component :is=\"comp\" \/>\r\n  <\/transition>\r\n  <component-b \/>\r\n<\/page>\r\n```\r\nafter the `comp` change and the transition done(after leave), the siblings compoents(`component-a` and `component-b`) will have a flash like rerender","@beica1 , try wrapping your `<transition>` in a `div`.","@AnalyzePlatypus Yes, Thank you!, it's worked for me."],"labels":["bug","has workaround","transition"]},{"title":"Add an option to throw global errors, making it possible for debuggers to automatically break on error.","body":"### What problem does this feature solve?\r\nCurrently, the [globalHandleError](https:\/\/github.com\/nialna\/vue\/blob\/dev\/src\/core\/util\/error.js#L27) function will intercept all errors thrown in components and log them. It can also pass them to an external error handler, but that external error handler won't be able to throw it because the call to `config.errorHandler` is wrapped in a try catch.\r\n\r\nIn vanilla JS, when an unhandled error happens in your code, the debugger can break immediately, giving you access to the stack and context. When using VueJS, we have no way of doing this because the errors are always handled by Vue.\r\n\r\n### What does the proposed API look like?\r\nThe simplest way I can think of is to add a new `config` option, for example:\r\n\r\n```js\r\nVue.config.throwUnhandledErrors = true;\r\n```\r\n\r\nThen in `globalHandleError`, we could check for that flag and throw errors:\r\n\r\n```js\r\nfunction globalHandleError (err, vm, info) {\r\n  if (config.throwUnhandledErrors) {\r\n    throw(err);\r\n  } else if (config.errorHandler) {\r\n    try {\r\n      return config.errorHandler.call(null, err, vm, info)\r\n    } catch (e) {\r\n      logError(e, null, 'config.errorHandler')\r\n    }\r\n  }\r\n  logError(err, vm, info)\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["More specifically, to keep the original stack when the debugger breaks, the best thing would be to _not_ catch errors thrown by hook handlers, since this is where user code gets called. In this function:\r\n\r\n```js\r\n\r\nfunction callHook (vm, hook) {\r\n  \/\/ #7573 disable dep collection when invoking lifecycle hooks\r\n  pushTarget();\r\n  var handlers = vm.$options[hook];\r\n  if (handlers) {\r\n    for (var i = 0, j = handlers.length; i < j; i++) {\r\n      try {\r\n        handlers[i].call(vm);\r\n      } catch (e) {\r\n        handleError(e, vm, (hook + \" hook\"));\r\n      }\r\n    }\r\n  }\r\n  if (vm._hasHookEvent) {\r\n    vm.$emit('hook:' + hook);\r\n  }\r\n  popTarget();\r\n}\r\n```\r\n\r\n(I can't find which part of the repo it came from. Copied that from my chrome console). If the `throwUnhandledErrors` option could allow this function to not wrap the handler in a try catch, then we would actually be able to have the browser debugger break properly on user code."],"labels":["feature request"]},{"title":"Impossible to preserve directive dom changes when the dom element is shared by multiple vnodes.","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/8y0yqono38](https:\/\/codesandbox.io\/s\/8y0yqono38)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nCreate a wrapper component that has another custom component as its root node. Put a directive on the wrapper component that adds a class to the element. Do anything that updates the child's class. The classes assigned in the directive of the parent vnode will be wiped out, and the directive has no way of knowing it. I _think_ this is because the vnodes were merged into the same element. So, the child vnode gets patched, causing the class update and the dom change to the same element that the parent vnode is using, but, because no actual patch happened to the parent vnode, the parent directive never has a chance to readd it's class.\r\n\r\nI think this probably _technically_ correct behavior, but it still presents (in my opinion) an issue with directive functionality. Which is that my host dom element can be mutated by a different vnode and I'm not aware of it.\r\n\r\n### What is expected?\r\nThe `update` trigger runs when my host element is mutated.\r\n\r\n### What is actually happening?\r\nThe class the directive adds is overwritten and my directive has no chance to readd the class.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Yeah, your understanding is correct. Just so you know in 3.0 this will not be an issue as all data on the component node is merged onto the component's root node instead of patched separately as it is now in 2.x.\r\n\r\nI'm not sure if we will be able to address this in 2.x since it's a pretty risky change that may lead to unexpected breakage.","@yyx990803 Thanks for the quick response! I guess that was what I expected. I don't suppose there's anyway to make DOM changes like this in a directive that the current vDom merge strategy _wouldn't_ overwrite?"],"labels":["improvement"]},{"title":"fix(types): Allow WatchHandler to be of string type even when used with WatchOptions","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [x] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","comments":["Thanks for contributing but please do not include changes to dist files in the PR.","Hi @yyx990803, I've removed the changes to `vue.min.js` - my mistake.\r\n\r\nAlso, I wanted to let you know I made an additional change to allow for `ComponentOptions`'s `watch` to be an array, and I've updated the tests to match the examples given at the [`watch` documentation](https:\/\/vuejs.org\/v2\/api\/#watch)","Is there any reason this was never merged?"],"labels":["typescript"]},{"title":"match (getTypeIndex) is called lot of time when props changed and consume lot of memory","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/anon\/pen\/MzpZoz?editors=1011](https:\/\/codepen.io\/anon\/pen\/MzpZoz?editors=1011)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen google chrome dev console  \r\nGo in 'Memory' tab  \r\nSelect 'Allocation instrumentation timeline' and check 'Record allocation stacks'  \r\nLaunch for 30 seconds  \r\nOn your snapshot select 'Allocation' on the top left drop-down  \r\nOrder by 'Count'  \r\nYou will see high number of match called (a lot more than the actual var change)\r\n\r\n### What is expected?\r\nExpected to have match number closer to the number of var change.\r\n\r\n### What is actually happening?\r\nMatch is executed lot of time and consume lot of memory.\r\n\r\n---\r\nI think it's the way i deal with the object that it's not the right way but i search in the doc and couldn't find something related to that behavior and how to manage it (perhaps use store ?).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["improvement"]},{"title":"Unexpected component destroyed trigger by sibling component","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/teddy_scmp\/2m6kv3rn\/](https:\/\/jsfiddle.net\/teddy_scmp\/2m6kv3rn\/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Open console\r\n2. click the TOGGLE bottom\r\n\r\n### What is expected?\r\nIt is weird that the component between the two v-if will destroy and mount again\r\n\r\n### What is actually happening?\r\n1. AComponent is destroyed which is unexpected\r\n2. BComponent will keep, which I only added a class there.\r\n\r\n---\r\nIn addition, I find that DIV will cause this issue, if I added a class \/ change it to a tag \/ button, it won't destroy.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["it's because the div is being reused by Vue to create the TOP div.\r\nYou can get around it by adding a `key` to the div wrapping the component a or the TOP div.\r\n","@posva \ud83d\ude4f thanks a lot. The workaround works, it helps to prevent the bug in my project."],"labels":["improvement","has workaround"]},{"title":"feat(parser): throw error when using interpolation instead of expresssion (#9038)","body":"**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [x] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [x] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\nYes it's already an open issue with `good first issue` label. Resolves: #9038\r\n","comments":[],"labels":["in review"]},{"title":"Conditional template not rendering when it has the same slot name","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/ad17bgtq](https:\/\/jsfiddle.net\/ad17bgtq)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Create a component that has a named slot exposing a boolean flag in its scope\r\n2. Consume the component with two templates inside it, each with a v-if using the exposed boolean flag\r\n3. Only the last template written in the order of code is rendered\r\n\r\n### What is expected?\r\nAll templates using the same slot name should render when their v-if evaluates true.\r\n\r\n### What is actually happening?\r\nOnly the last template written in the code order is rendered. Any other template with the same slot name will not render even if its v-if permits it.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["The work-around I'm currently using is to change the slot name based on the flag:\r\n\r\n```html\r\n<template :slot=\"visible ? 'content' : 'content-x'\">\r\n    ...\r\n<\/template>\r\n```","From a quick look I see you are binding the value prop to the `visible` attribute on the child component. But `visible` is a data attribute on the parent. \r\n\r\n`Vue.component('example', {\r\n\tprops: ['value'],\r\n\ttemplate: '<div><slot name=\"content\" :visible=\"value\"><\/slot><\/div>'\r\n})`\r\n\r\nFrom my understanding slot-scope is needed when you are trying to use a data attribute that is in the child component from the parent, when passing in the scope. In this case you already have the `visible` data attribute accessible on the parent so you could do something like this. \r\nhttps:\/\/jsfiddle.net\/0ockh2td\/"],"labels":["has workaround"]},{"title":"Throw error when using interpolation instead of JS expression for slot names","body":"### What problem does this feature solve?\r\nFor this demo:\r\n\r\n[https:\/\/jsfiddle.net\/2os9jken\/](https:\/\/jsfiddle.net\/2os9jken\/)\r\n\r\nopening the console and running it throws the `Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead.` error for the `span`, but it should also throw it for the `slot`, as it has the exact same issue for its `name` attribute.\r\n\r\n### What does the proposed API look like?\r\nN\/A\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Thanks for the proposal, the warning was meant for people coming from v1 where this was allowed. Personally, I don't think it is worth adding any more warnings regarding this as it will rarely help any user","Well, old references still exist, and it's not that obvious for new users. It surely confused me in #9037.","Hello ! Is this issue fixed or yet open to be worked on ?","Is this issue fixed or yet to be fixed?\r\n","can I work on this?","It is not supported to use interpolation {{}} to assign values to attributes, so use the v-bind command (or abbreviated \":\") to specify attributes."],"labels":["feature request","good first issue","has PR"]},{"title":"vnode reference to original component (reopened)","body":"### What problem does this feature solve?\r\nBecause we have to have lots of ads on our site we cannot hydrate our SSR'd page with VUE completely as the ads would break VUE. Also most of our site ist static and it would be stupid to ship our entire app for only some parts of our page being interactive.\r\n\r\nInstead we **partially hydrate** the page (with our own plugin https:\/\/github.com\/spring-media\/vue-plugin-moisturizer). For this we need to map SSR'd HTML to the corresponding VUE components, so we need to put some `data-attribute` in the HTML match them. \r\n\r\nWe use the `name` setting of a component for this,  so if I have component like this:\r\n\r\n```js\r\n{\r\n  name: 'my-component'\r\n}\r\n```\r\n\r\nthe html would read\r\n\r\n```html\r\n<div data-hydration-name=\"my-component\">...<\/div>\r\n```\r\n\r\n\r\nbut this does not work for 3rd party components. Anything we get without that ID we cannot hydrate. It would be great if we could find the component from a component's instance \/ vnode.\r\n\r\nThere is a `cid` property, but this is not the same on the server and on the client,  because we have a different number and oder of components on the client and server so we cannot use this.\r\n\r\nThere is a similiar issue for this here: https:\/\/github.com\/vuejs\/vue\/issues\/7213 but one of your members suggested to create a new issue because the old one would just not show up under your pile of issues.\r\n\r\n### What does the proposed API look like?\r\n```js\r\nthis.$vnode.cuuid \/\/ hash based on the filename and path\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Hi Lukas,\r\n\r\nNice idea you have going on with your moisturizer plugin!\r\n\r\nUnfortunately, I think your proposal isn't really feasable:\r\n\r\n```javascript\r\nthis.$vnode.cuuid \/\/ hash based on the filename and path\r\n```\r\n\r\nThe reasoning is simple:\r\n\r\n1. That id would have to be generated at build time (where we can actually know file paths through nodejs), not runtime (so even if possible it would be a job for  vue-loader, or an additional loader, not vue-core).\r\n2. 3rd party components  can and regularly do come bundled in one file (e.g. `\/dist\/3rdPartyComponentCollection.umd.js`).\r\n3. So if you have a 3rd party lib that exports a bunch of components, you possibly would end up with duplicate `cuuid` values.\r\n\r\nThat means that even if we can make it work, you will still end up not being able to identify 3rd party components reliably as soon as more than one comes bundled in a single file.\r\n\r\n### Alternative Approaches\r\n\r\nHave you thought about defining a name for the 3rd party components that you use yourself? \r\n\r\nSince [this code](https:\/\/github.com\/spring-media\/vue-plugin-moisturizer\/blob\/master\/lib\/hydrateComponents.js#L6-L9) seems to indicate that you know and control the collection of components you intend to \"moisturize\" this way, that seems like a viable path to take.\r\n\r\nThere's nothing wrong with doing this:\r\n```javascript\r\nimport ThirdPartyComp1 from 'thirdparty-collection'\r\n\r\nexport default {\r\n   ...ThirdPartyComp1,\r\n   name: 'YourDesiredName'\r\n})\r\n\r\n\/\/ or even just:\r\n\r\nThirdPartyComp1.name = 'YourDesiredName'\r\nexport default ThirdPartyComp1\r\n```\r\n\r\nThe above example expects `ThirdPartyComp1` to be defined as an options object, but a similar thing could be done to a component that's distributed as a constructor already.\r\n\r\nAnd extending this thought you could even use something other than the `name` property (you can set any custom options on the options object, so you could add a `moisturizeId` to every component that you want to), which means you can leave the name untouched.","Ah ok, I understand that this cannot be done by filename \/ path. We _could_ attach names to each component manually, that would probably work, thank you! But that also means overhead for the developer. Particularly we are loading SVGs with the `vue-svg-loader` and it'd be quite annoying to give a name to each SVG. Still, this can be a fallback-scenario for us.\r\n\r\nI am currently seeing into ways to fingerprint components, like this:\r\n\r\n```js\r\nfunction fingerprint(component) {\r\n  if (component.name) return md5(component.name); \/\/ Components with a name\r\n  if (component.render) return md5(component.render.toString()); \/\/ Functional components\r\n};\r\n```\r\n\r\nWhat do you think about that and do you see other attributes that can be used to fingerprint a component?","Bonus question: Functional components have a render function. Compiled components have a render function. How do I get the render function for a component that has not been compiled yet. And how can I compile it to get the render function?","Bonus question 2: I found this in the debugger on the `$vnode`:\r\n\r\n```js\r\n{\r\n  \"ssrContext\": {\r\n    \"_registeredComponents\": [\r\n      \"592f84f2\", \"cb0b8b00\", \"5ece1878\", \/* ... *\/\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nSeems to me like a mal op components that the SSR module knows about. Can this be made use of?"],"labels":["feature request"]},{"title":"refactor: remove duplicate code","body":"\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [x] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","comments":[],"labels":["in review"]},{"title":"Allow <noscript> in Vue templates for SSR usage","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/brophdawg11\/pen\/OBdZyX](https:\/\/codepen.io\/brophdawg11\/pen\/OBdZyX)\r\n\r\n\r\n### Steps to reproduce\r\nI'm opening this issue as a follow up to https:\/\/github.com\/vuejs\/vue\/issues\/8247, as I don't think the solution provided there is suitable for all use-cases.  In a fairly simple UI, where everything is relatively positioned and flows downward, it would likely be fine to include `<noscript>` outside the context of the Vue application, and it would render correctly above the entire app.\r\n\r\nHowever, there are plenty of other UI's that it may not be desirable or feasible to include `<noscript>` _outside_ of the Vue application context and display it properly.  The linked codepen shows a simple fixed-header layout, where including the `<noscript>` tag outside the Vue application context results in the `<noscript>` tag being hidden _behind_ the fixed header, where in reality it is intended to be rendered inside the main body content, and thus below the fixed header.  \r\n\r\nThe `<noscript>` outside the Vue context also has the unintended effect of pushing down the main content, which has a proper margin-top to account for the static-height fixed header.\r\n\r\nPer MDN, `<noscript>` is Flow Content (https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Guide\/HTML\/Content_categories#Flow_content), it is perfectly viable to exist outside the `<head>` (https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Element\/noscript), and is perfectly valid to nest inside the DOM in a `<div>`, as div's allow Flow Content as their children (https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Element\/div).\r\n\r\nPlease reconsider the decision to not permit `noscript` tags in Vue templates.\r\n\r\n### What is expected?\r\n`<noscript>` elements should render properly in Vue templates\r\n\r\n### What is actually happening?\r\n`<noscript>` elements do not render properly in Vue templates and cause hydration issues when in SSR\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["As a workaround, we are currently doing the following, but it feels quite hackish:\r\n\r\n```\r\n<template> \r\n    <main>\r\n        <div v-once v-html=\"noscriptHtml\" \/>\r\n        ...\r\n    <\/main\r\n<\/template>\r\n\r\n<script>\r\nexport default {\r\n   ...\r\n    created() {\r\n        this.noscriptHtml = '<noscript>...<\/noscript>';\r\n    }\r\n};\r\n<\/script>\r\n```\r\n","I don't know, but I think it doesn't make sense.\r\n\r\n`<noscript>` is for disabled Javascript on the browser. And, Vue apps are just Javascript. So, if Javascript is disabled, Vue templates don't works.\r\n\r\nSo, `<noscript>` needs to stay out of Vue and should be in vanilla HTML.","Sorry, it's not super clear in the description here - but the linked\/closed issue is specific to using SSR with Vue, as is my case.  With JavaScript disabled - we still SSR a perfectly valid page.\r\n\r\nThe problem is that we include `noscript` tags for when the browser _doesn't_ have JavaScript enabled.  But Vue's inability to render them client side breaks browsers that _do have_ JavaScript enabled (insofar as hydration fails and a full re-render is performed).","Ok, even with SSR, Vue components are not place for `<noscript>`. If you want to prevent errors when browser Javascript is disabled, write a global `<noscript>` in the `index.html`.\r\n\r\nIf you want to show an user friendly content, put a `<meta>` redirect into `<noscript>` and head to a static vanilla HTML page.\r\n\r\nIt makes more sense.","I disagree.  What the code pen is showing is that with a fixed header UX, it is not feasible to put the noscript tag in the index.html template, completely outside of the Vue app.  It must be part of the app in order to be displayed to the user in a meaningful location.\r\n\r\nAnd redirecting to a separate page defeats the purpose of allowing users with JS disabled to browse and use the site.  If the site is already 100% user friendly with JS disabled, why would we redirect instead of showing a message that some advanced UI functionality might not work, but core browsing and usage will be fine.\r\n\r\nWhat is the reasoning behind Vue templates supporting only a subset of valid HTML markup?  One of the major advantages of SSR is that is opens up the possibility of using Vue and not giving up support for JS disabled users.\r\n\r\n","Using the redirect described above would also not be very good for SEO","I don't see why `<noscript>` shouldn't be allowed in vue. \r\n\r\nObviously, it makes no sense in the client-side **but if you are using SSR** to provide html & css to the client, it's an incredibly **useful feature**","@alexbruno It makes sense to have noscript in component in some case : like SEO (one of the main purpose of SSR provided by Vue).\r\n\r\nIf you lazy-loading image you can have a component like that :\r\n\r\n``` html\r\n<div class=\"lazy-image-component\">\r\n  <img :src=\"inView && src\"  \/>\r\n\r\n  <noscript inline-template>\r\n    <img :src=\"src\" \/>\r\n  <\/noscript>\r\n<\/div>\r\n```\r\n\r\nIn this case it's important for the `img` tag contain in noscript to be at this place for better UI integration.\r\n","One small caveat, should anybody come here in search for a solution for `noscript`. The children of the `<noscript\/>` are not rendered if it is inside a conditional.\r\n\r\n```html\r\n<div>\r\n    <noscript inline-template>\r\n        <span>OMG<\/span>\r\n    <\/noscript>\r\n<\/div>\r\n```\r\n\r\nsends `<noscript><span>OMG<\/span><\/noscript>` to the client\r\n\r\n```html\r\n<div v-if=\"someTrueCondition\">\r\n    <noscript inline-template>\r\n        <span>OMG<\/span>\r\n    <\/noscript>\r\n<\/div>\r\n```\r\n\r\nsends an empty `<noscript>` tag.","What's the status on this? I would love some workaround for this that's less hacky.","@Sevensidedmarble @brophdawg11 \r\n\r\nHere is a simple workaround using Vue's `<component>` component (which doesn't feel too \"hacky\"):\r\n\r\n```html\r\n<component is=\"noscript\">\r\n  <p>No Script Content Here<\/p>\r\n<\/component>\r\n```\r\n\r\nThis will let you get around Vue's constraints on the `<noscript>` tag (also works for rendering `<style>` tags as well)\r\n\r\nYou could even make it conditional for rendering on the server generated pages only (and clients\/cralwers with javascript disabled will still see it):\r\n\r\n```html\r\n<component v-if=\"$isServer\" is=\"noscript\">\r\n  <p>No Script Content Here<\/p>\r\n<\/component>\r\n```\r\n","It absolutely makes sense to include `<noscript>` alternatives inside Vue components. Each component encapsualtes a defined piece of functionality, so where better to put the noscript alternative than inside that specific component. e.g.\r\n\r\n```\r\n<form action=\"\">\r\n    ...\r\n    <button @click=\"ajaxSubmit\">Submit<\/button>\r\n\r\n    <noscript>\r\n        <input type=\"button\">Submit<\/input>\r\n    <\/noscript>\r\n<\/form>\r\n```\r\n\r\nOtherwise you will need to have a duplicate set of components\/HTML\/CSS in a different part of the codebase for users that have JS disabled.","> It absolutely makes sense to include `<noscript>` alternatives inside Vue components. Each component encapsualtes a defined piece of functionality, so where better to put the noscript alternative than inside that specific component. e.g.\r\n> \r\n> ```\r\n> <form action=\"\">\r\n>     ...\r\n>     <button @click=\"ajaxSubmit\">Submit<\/button>\r\n> \r\n>     <noscript>\r\n>         <input type=\"button\">Submit<\/input>\r\n>     <\/noscript>\r\n> <\/form>\r\n> ```\r\n> \r\n> Otherwise you will need to have a duplicate set of components\/HTML\/CSS in a different part of the codebase for users that have JS disabled.\r\n\r\n@lukenofurther your example could be solved without the need for `<noscript>`\r\n\r\n```\r\n<form action=\"\">\r\n    ...\r\n    <button type=\"submit\" @click.prevent=\"ajaxSubmit\">Submit<\/button>\r\n<\/form>\r\n```\r\nthat said, I totally agree `<noscript>` should be allowed. @tmorehouse 's solution worked well for my needs though.","> @lukenofurther your example could be solved without the need for `<noscript>`\r\n> \r\n> ```\r\n> <form action=\"\">\r\n>     ...\r\n>     <button type=\"submit\" @click.prevent=\"ajaxSubmit\">Submit<\/button>\r\n> <\/form>\r\n> ```\r\n\r\n@spacedawwwg ok thanks for that, it was a simple contrived example I plucked out of nowhere though. There are real-world examples that can't be so easily solved without noscript tags.\r\n\r\n> that said, I totally agree `<noscript>` should be allowed. @tmorehouse 's solution worked well for my needs though.\r\n\r\nI'm really glad @tmorehouse's solution works too, thank you @tmorehouse! It is still hack  though, and noscript tags should be supported in the core library or at least the server renderer.\r\n\r\nThere are plenty of people on this issue alone who genuinely need it. If you want a real-world example, take a look at the markup on bbc.co.uk and you'll see loads of noscript tags that provide no-JS fallbacks **deeply** embedded in what look to be React components.\r\n\r\n<img width=\"800\" alt=\"image\" src=\"https:\/\/user-images.githubusercontent.com\/3300647\/79553914-2821af00-8095-11ea-97fa-e33feca3f2c9.png\">\r\n\r\nAt the moment, the lack of this functionality out of the box is impeding Vue developers from achieving modern accessibility standards. On our project we're using noscripts to achieve WCAG level AA, which isn't even the most difficult level to achieve. \r\n\r\n\r\n","None of these are necessary.\r\n\r\n```html\r\n<form @submit.prevent='ajaxSubmit'>\r\n  ...\r\n  <button type='submit'>Submit<\/submit>\r\n<\/form>\r\n```\r\n\r\nIf JS is enabled, Vue capture the event. Else, native HTML action will happen.","@alexbruno that's not the point - I made that example up out of my head, it's not a real world example and it's very simple. There are other situations that can't be solved so easily with that kind of workaround.","Here is a quick component for creating a `<noscript>` (as an alternative to using `<component is=\"noscript\">`).\r\n\r\nNote that render functions allow you to use tags that vue-loader normally filters out:\r\n\r\n```js\r\nexport default {\r\n  name: 'NoScript',\r\n  functional: true,\r\n  render(h, { data, children }) {\r\n    return h('noscript', data, children)\r\n  }\r\n}\r\n```\r\n\r\nAnd then use it like so:\r\n\r\n```html\r\n<no-script>\r\n  <p>JavaScript you have not. Hmmm.<\/p>\r\n<\/no-script>\r\n```","@alexbruno - another example of where noscript is required is with an SSR and infinite scrolling with none JS pagination as a fallback (as per Google guidelines). Enabling noscript like in the following example would be a massive help as the contents of the noscript is rendered by Vue.\r\n\r\n```html\r\n<infinite-loading @infinite=\"infiniteHandler\" spinner=\"spiral\">\r\n    ...\r\n<\/infinite-loading>\r\n<noscript><Pager :info=\"$page.posts.pageInfo\" \/><\/noscript>\r\n```\r\nUnfortunately @tmorehouse solution doesn't work in our case. ","@dozyio you could have a `<div>` rendered SSR, and then when mounted set it's display to none:\r\n\r\n```html\r\n<template>\r\n  <infinite-loading @infinite=\"infiniteHandler\" spinner=\"spiral\">\r\n    ...\r\n  <\/infinite-loading>\r\n  <div v-show=\"showPager\">\r\n    <Pager :info=\"$page.posts.pageInfo\" \/>\r\n  <\/div>\r\n<\/template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      showPager: true\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.showPager = false\r\n    })\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\nIf Javascript is not enabled on the client, then the pager link will remain visible.","@tmorehouse thank you! That works - still seems like a hack around noscript though","In fact, `noscript` is like an HTML native hack in modern web!\r\nFor today web apps, disabled JS is **very** uncommon.","@tmorehouse I tried using your solution, but once I try to nest anything inside `<noscript>` on SSR phase I get\r\n```\r\nProperty or method \"children\" is not defined on the instance but referenced during render.\r\n```\r\nI've created a code sandbox to showcase the issue https:\/\/codesandbox.io\/s\/functional-image-jjnn3?file=\/components\/NoScript.js:77-85\r\ncould you look into it? Thanks","@alexbruno `<noscript>` has plenty of valid use-cases in SSR, ADA and SEO so this feature request is more than valid.\r\nyour suggestion to use a meta element and redirect to a completely different html-only page is ridiculous.\r\nsimply because you fail to envision a scenario where it would be useful doesn't make it so.\r\nyou are being a troll. please stop.","@bpossolo some people are just too active on the topics they have 0 competence in - a side effect of open dev environments :)","Ok @bpossolo and @AndrewBogdanovTSS  , I think it is surprising that someone needs this markup in modern frontend applications.\r\nBut there is a lot of mentions about SSR and SEO here...\r\nMaybe, for SSR someone would find a use for `noscript`, but SEO is not the case since years ago.\r\nGoogle Developer docs says that Google Search Engine is able to load, render and crawling from websites built with JS frameworks with dynamic content since 2015.\r\nThat said, I can't understand where is the SEO needs for `noscript`.\r\nSo, @bpossolo and @AndrewBogdanovTSS , I'm sorry if my web dev competence is very limited to contribute, despite my 10 years of experience.","@alexbruno really, I don't see why is it so critical for you to not have it. If you don't see cases that it can be used in your daily tasks - just don't use it, it's that simple. Why you want to forbid it for other who really have a need for it is beyond my understanding","@AndrewBogdanovTSS I can't forbid anyone to use anything (maybe my children \ud83e\udd23 ) !\r\nI'm just trying to say that maybe it is not critical to have it.\r\nMaybe there are better ways to develop Vue apps to doesn't need `noscript`.\r\nLike this:\r\n\r\nhttps:\/\/developers.google.com\/search\/blog\/2015\/10\/deprecating-our-ajax-crawling-scheme.html\r\nhttps:\/\/developers.google.com\/search\/blog\/2014\/05\/understanding-web-pages-better\r\n\r\nBut, I want to apologize again if I can't be able to see your needs.","@alexbruno there are definitely valid use cases. Some sites\/apps need to function for users who don't have JS enabled. That's a very tiny fraction of people, but when you're developing government services for example, these need to be usable by every person in the country (within reason), and that includes users who have JS switched off, ether by choice or JS has failed to work in their client for some reason. \r\n\r\nFor such services, it's best to take a progressive enhancement approach. This is where the noscript tag is invaluable and allows you to place fallback controls for no-JS users that aren't required for users who have JS enabled.","My point here is simple, from the point of W3C spec `<no-script>` is regular tag, which is as valid to use as any other tag, it wasn't deprecated in the spec, it's there for a reason, so it should be rendered as any other valid tag, why should it throw any exceptions? What developers want to use it for - is completely other topic and shouldn't affect base functionality","Anyone know if this is fixed in Vue3?  Doing some github issue house cleaning and am not working with Vue as much these days...","In my project with Vue 3 I fixed like that:\r\n```vue\r\n\/\/ script\r\nconst noScript = `<img src='${props.src}' alt='${props.alt}' \/>`;\r\n\r\n\/\/ template\r\n<noscript v-html=\"noScript\"><\/noscript>`\r\n"],"labels":["discussion","improvement"]},{"title":"'inject' Properties are not added to the CombinedVueInstance type definition","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/rr18r3vm9p](https:\/\/codesandbox.io\/s\/rr18r3vm9p)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Copy Minimal reproduction link into a local environment, and run the webpack compilation process.\r\n\r\n**OR**\r\n\r\n1. Initialize a vue vm\r\n```typescript\r\nlet vm = new Vue({\r\n    el: \"#app\",\r\n    render: (h: any) => h(someComponent, {}),\r\n    provide: { service: { something: \"Hello, World\" } }\r\n});\r\n```\r\n2. Try and access service in a SFC\r\n\r\n```typescript\r\nexport default Vue.extend({\r\n    name: \"someComponent\",\r\n    inject: [\"service\"],\r\n    data() {\r\n        return {\r\n            accessService: this.service.something \/\/ Property 'service' does not exist on type CombinedVueInstance...\r\n        }\r\n    }\r\n});\r\n```\r\n\r\n### What is expected?\r\nWhen declaring injections in a component in typescript, you should be able to access the injection with `this.injection`\r\n\r\n### What is actually happening?\r\nWhen accessing an injection in a vue single file component, it is currently throwing an error during the webpack compilation process, stating that the injection `Property 'injection' does not exist on type 'CombinedVueInstance<Vue...`\r\n\r\n---\r\n**Please note:** that the link to minimal reproduction won't show the error logs from the webpack compiling, as it will compile successfully, but with errors. This will need to be tested in a local environment to see what is happening. \r\n\r\nAs this is in typescript, we're currently using Webpack to compile it to a single file, and then use this on our application.\r\n\r\nThe compilation will complete successfully, however will print multiple errors to the console after compiling, about not being able to access properties, etc. When running in the browser it works successfully.\r\n\r\nWe've dug around in the `vue\/types` folder, and to the best of our knowledge think that Inject should be a part of the `type DataDef` or something of this sort.\r\n\r\nIs there possibly a temporary workaround that we can use to avoid having these errors, until a fixed release is proposed?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Yep, I come across a similar question. I have written the property \"provide\" in father vue-component and have used \"inject\" in son vue-component, but the chrome console show:  [Vue warn]: Injection \"color\" not found.   Here is my sectional code.\r\n\r\n\/********** parent **********\/\r\n...\r\nexport default {\r\n    name: \"father\",\r\n    provide: {\r\n      color: 'blue'\r\n    },\r\n    components: {\r\n      son\r\n    },\r\n...\r\n\/********** son **********\/\r\n...\r\nexport default {\r\n    name: 'pagesTable',\r\n    inject: ['color'],\r\n    mounted(){\r\n        console.log(this.color);\r\n    }\r\n}\r\n...\r\n------------------------------------------------------------------------\r\nAnd then \r\n![image](https:\/\/user-images.githubusercontent.com\/26158725\/66902065-94621e00-f032-11e9-80ad-51d46f9e0bf9.png)\r\n\r\n\r\n","Any news on this?","Issue open >1 year. Does that mean DI is not supported with TypeScript?","I'm working around this by modifying Vue in my component. Example:\r\n\r\n```typescript\r\n\/\/ main.ts\r\n\r\nimport Vue from 'vue';\r\nimport App from '.\/App.vue';\r\n\r\nexport interface Collection {\r\n  dog: string;\r\n  cat: number;\r\n  cow: boolean;\r\n}\r\n\r\nconst myCollection: Collection = {\r\n  dog: 'dog',\r\n  cat: 0,\r\n  cow: false,\r\n};\r\n\r\nexport const myServices = {\r\n  api: 'api',\r\n  auth: {\r\n    do: 'something',\r\n  },\r\n};\r\n\r\nnew Vue({\r\n  render: h => h(App),\r\n  provide: {\r\n    ...myCollection,\r\n    ...myServices,\r\n  },\r\n}).$mount('#app');\r\n```\r\n\r\n```typescript\r\n\/\/ src\/helpers\/vue.ts\r\n\r\nimport { VueConstructor } from 'vue';\r\n\r\nexport function makeInjector<TProvider>() {\r\n  \/\/ eslint-disable-next-line @typescript-eslint\/no-unused-vars\r\n  return function<V extends Vue, K extends keyof TProvider>(v: VueConstructor<V>, properties: K[]) {\r\n    return v as VueConstructor<V & Pick<TProvider, K>>;\r\n  };\r\n}\r\n\r\nexport function makePropertySelector<TProvider>() {\r\n  return function<K extends keyof TProvider>(properties: K[]) {\r\n    return properties;\r\n  };\r\n}\r\n```\r\n\r\n```typescript\r\n\/\/ src\/components\/my-component.vue\r\n\r\nimport Vue from 'vue';\r\nimport { makeInjector, makePropertySelector } from '..\/helpers\/vue';\r\nimport { Collection, myServices } from '..\/main';\r\n\r\n\/\/ use a type ...\r\nconst collectionPropInjector = makeInjector<Collection>();\r\n\r\n\/\/ ... or typeof\r\nconst serviceInjector = makeInjector<typeof myServices>();\r\n\r\n\/\/ use propertySelector to reuse across injector and inject\r\nconst injectServices = makePropertySelector<typeof myServices>();\r\nconst services = injectServices(['auth']);\r\n\r\n\/\/ add properties from one or many types to this Vue instance ...\r\nexport default serviceInjector(collectionPropInjector(Vue, ['dog', 'cat']), services).extend({\r\n  \/\/ ... and inject properties as normal here\r\n  inject: ['dog', 'cat', ...services],\r\n  created() {\r\n    console.log(this.dog); \/\/ 'dog'\r\n    console.log(this.cat); \/\/ 0\r\n    console.log(this.cow); \/\/ undefined\r\n\r\n    console.log(this.api); \/\/ undefined\r\n    console.log(this.auth.do); \/\/ 'something'\r\n  },\r\n});\r\n```\r\n\r\nWorks with VSCode Intellisense as well.","Been facing the same issue with my TypeScript project. I resorted to use `$parent` and methods in subcomponents to be accessed in descendent component. Would really appreciate if I could use DI with TypeScript.","A temporary workaround is define it in data as optional.\r\nThat worked for me.\r\n\r\n```\r\ninterface IData {\r\n  accessService: Something\r\n  service?: Service \/\/ injected property\r\n}\r\n\r\nexport default Vue.extend({\r\n  name: 'someComponent',\r\n  inject: ['Service'],\r\n  data(): IData {\r\n    return {\r\n      accessService: this.service?.something\r\n    }\r\n  },\r\n```","I had to workaround this by defining fake prop for injected property. I am on vue js  2.6.13 version,  I hope this gets fixed in new version. \r\n\r\n### Before \r\n![image](https:\/\/user-images.githubusercontent.com\/51008782\/182581293-f5f357f5-6651-4efd-9edf-0c49605fa0aa.png)\r\n\r\n### After workaround with fake prop\r\n![image](https:\/\/user-images.githubusercontent.com\/51008782\/182582169-e4f4a48a-b556-4193-b842-84f01bdd2298.png)\r\n\r\n","\u60a8\u597d\uff0c\u4f60\u53d1\u9001\u7684\u4fe1\u606f\u6211\u5df2\u6210\u529f\u63a5\u6536\uff0c\u6211\u4f1a\u5c3d\u5feb\u56de\u590d\u60a8\u3002Lambert Yim"],"labels":["typescript"]},{"title":"A deliberately empty slot-scope attribute will not be rendered as a scoped slot","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/decademoon\/50wL7mdz\/759740\/](https:\/\/jsfiddle.net\/decademoon\/50wL7mdz\/759740\/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n```\r\n<foo>\r\n  <bar slot-scope\/>\r\n<\/foo>\r\n```\r\n\r\n### What is expected?\r\n`<bar slot-scope>` should be a scoped slot.\r\n\r\n### What is actually happening?\r\n`<bar slot-scope>` is rendered as a child as if `slot-scope` were not present.\r\n\r\n---\r\nAs a workaround, I've been using a dummy variable to force it to be a scoped slot:\r\n\r\n```<bar slot-scope=\"scope\"\/>```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I'm pretty sure we talked about this in another issue but couldn't find it \ud83e\udd14 ","Hi @decademoon I'd like to pick this up, can you check this sandbox and tell me if it's the correct behavior for your use case?\r\nhttps:\/\/codesandbox.io\/s\/4q15jlq12w","For my curiosity, what is the use case for doing this?\r\n\r\nScott","@basselAhmed Yes that appears to be correct.\r\n\r\n@smolinari One example is the `Foo` component may want to render the slot multiple times, in which case the slot needs to be scoped in order for it to be a function which will return a different vnode instance each time it is called.","Um, can you expand that with a real world example, maybe even with code? I'm still not understanding. Sorry. And thanks for being patient with me.\r\n\r\nScott","@smolinari See #8496. Currently Vue doesn't allow a slot to be rendered more than once, the workaround for now is using a scoped slot without meaningful scope arguments.","Thanks, I'll create a PR for this shortly.","Thanks. With the breadcrumb separator use case, this issue now makes sense. \r\n\r\nScott","> @smolinari See #8496. Currently Vue doesn't allow a slot to be rendered more than once, the workaround for now is using a scoped slot without meaningful scope arguments.\r\n\r\nIs that true? Because if you add two default slots, it's rendered twice. (Which I am trying to actually not happen)","The comment was added before the fix was released"],"labels":["improvement"]},{"title":"Non-breaking space acts different than other characters - outputs \"&nbsp;\" in template when passed via props","body":"### Version\r\n2.5.17\r\n\r\n\r\n### Reproduction link\r\nhttps:\/\/codepen.io\/avertes\/pen\/LYYpNRe\r\n[https:\/\/jsfiddle.net\/50wL7mdz\/756973\/](https:\/\/jsfiddle.net\/50wL7mdz\/756973\/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Create a new component that accepts a string prop.\r\n1. Display the prop within the component's template.\r\n1. Use the component in a Vue application and pass a string containing a non-breaking space character for the prop.\r\n\r\n### What is expected?\r\nThe output should contain a non breaking space\r\n\r\n### What is actually happening?\r\nThe output shows `&nbsp;`\r\n\r\n---\r\nIn the example provided I've made 3 cases\r\n\r\n- First case is that `&#160;` get turned into `&nbsp;`\r\n- Second case is that in a long list of UTF-8 characters only `NON-BREAKING SPACE` is escaped.\r\n- And third when getting the same list of characters, but retrieving it from a regular `HTMLElement` with `document.querySelector('#test').title` the character aren't escape.\r\n\r\n\r\n**Note**: When copying the non-breaking space character it might turn into a regular space in the clipboard. Therefor use https:\/\/en.wikipedia.org\/wiki\/Non-breaking_space#Keyboard_entry_methods to make sure how to insert the character.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I've added a new example - where in a list of html entities (including other whitespace and zero width characters) - only `&nbsp;` not decoded.\r\n\r\n- https:\/\/jsfiddle.net\/50wL7mdz\/765399\/\r\n\r\nAlso I've noticed that in [mathiasbynens\/he](https:\/\/github.com\/mathiasbynens\/he\/) there are two entries for `&nbsp;` one without simicolon and one with simicolon. \r\n\r\n- https:\/\/github.com\/mathiasbynens\/he\/blob\/master\/data\/entities.json#L1470\r\n\r\nMight be a shot in the dark, but could this have any influence on the result above?","I've tried using [mathiasbynens\/he](https:\/\/github.com\/mathiasbynens\/he\/) v1.1.1 to find any inconsistencies with `&nbsp;`, but haven't been able to find any.\r\n\r\nI've tried duplicating my previous jsfiddles, to see if `&nbsp;` would react any different.\r\n- https:\/\/jsfiddle.net\/ebpcx1do\/3\/\r\n\r\nIf anyone can give me some pointers for where to look for this error, I'm more than happy to give it a shot.\r\n\r\nI would also very much appreciate any response on issue.\r\n\r\n","Looks like a bug to me - a fix would be nice ","Ive noticed issues with `&times;` on occasion.  say a component prop has a default of `&times;`, which is rendered in the component (v-html). When rendering it shows the actual `x` character and causes an SSR hydration bail.","Other example: https:\/\/jsfiddle.net\/onbzk0m6\/ (character &nbsp;)","Yeah - it does seem to be related the way Vue parses html attributes in general.\r\n\r\nI've made a similar example based of @approached example\r\nhttps:\/\/jsfiddle.net\/onbzk0m6\/3\/\r\n\r\n\r\n\r\n\r\n","as a workaround, try to put the JS escape code for `&nbsp;` - `\\xa0`\r\n\r\nfound [here](https:\/\/github.com\/kazupon\/vue-i18n\/issues\/318#issuecomment-380103519), worked for me in nonbreakinspacification function\r\n```\r\n    public static noBreakingSpaces(str: string): string {\r\n        return str.replace(' ', '\\xa0');\r\n    }\r\n```\r\nstrings returned by this function are being rendered with `&nbsp`s instead of spaces.","I stumbled upon the same issue: The html entity &shy; results in\"&shy;\" as text when used in templates instead of the soft hyphen. The same for \"&#173;\" and others.\r\nVue 2.6.10","for folks that are looking for a workaround for this:\r\nWhen passing a string with non-breaking spaces as a prop, I just replaced the spaces with characters unlikely to be part of the string, in my case 'zzz'\r\n`var newName = program_name.replace(\/\\s\/g,'zzz');`\r\n\r\nThen, in the actual component where I need to display or use this prop, I have a computed function that undoes the above action and replaces the placeholder chars with spaces again\r\n\r\n```\r\ncorrectedProgramName(){ \/\/this reverses the space-replacing we had to do in reporting-dashboard.js\r\n        let correctedProgramName = this.program_name.replace(\/zzz\/g, ' ')\r\n        return correctedProgramName\r\n      }\r\n```","@posva Sorry to trouble you , I found a solution for this issue. \r\n\r\nAfter my fix, the behavior of Vue will be the same as HTML, just like the screenshot below,\r\n\r\nCan I pick up this issue and make a Pull Request?\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/14243906\/89121411-58307900-d4f1-11ea-9569-4db2ad67ffd5.png)\r\n\r\n \r\n![image](https:\/\/user-images.githubusercontent.com\/14243906\/89121517-2b309600-d4f2-11ea-8214-4f879958b528.png)\r\n","Sure @JuniorTour \r\n\r\nThis issue might be related to https:\/\/github.com\/vuejs\/vue\/issues\/10485 and https:\/\/github.com\/vuejs\/vue\/issues\/11059\r\nSo it's worth taking a look at the existing PRs as well","@posva \r\nCan you or someone else please revisit this issue? @JuniorTour 's PR #11599 will fix the problem mentioned where a non-breaking space character entered in props is output as &nbsp; in the template. This is causing problems for us in a project where we are passing translated strings to props and need to preserve nbsp, and it would be great to have this in place rather than having to do a string replace on everything coming back from translation. Thanks!"],"labels":["bug"]},{"title":"Functional component not rendering named slot (following #8871)","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/p9mx85qpz0](https:\/\/codesandbox.io\/s\/p9mx85qpz0)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nnothing in particular.\r\n\r\n### What is expected?\r\nIt should display `Hello World`  \r\n\r\n### What is actually happening?\r\nIt displays `Hello`\r\n\r\n---\r\nFollowing https:\/\/github.com\/vuejs\/vue\/issues\/8871 I made App.vue non-functional: \r\n\r\nIf you make Child.vue non-functional it works: https:\/\/codesandbox.io\/s\/pw5lzx2w90\r\n\r\nIf you use default (not named) slots it works: https:\/\/codesandbox.io\/s\/04jrp3y4ln\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Responded on the Vue Forum as well, is this maybe the same issue as in #7587?\r\n\r\nIt works by using a scoped slot:\r\nhttps:\/\/codesandbox.io\/s\/0p96w8o1pw","I've been running into this for a little while now, trying to make a simple functional component to use with values created by daggy.js.\r\n\r\nI've created [a codesandbox thingy with a number of cases showing the effects of this](https:\/\/codesandbox.io\/s\/7yx4zl839q).\r\n\r\nPeeking at the VNodes being created during the render call, the issue seems to be caused by the root element of a named unscoped slot passed to a functional component still having `data.slot` on its VNode when that VNode is returned by the functional component.\r\n\r\nExample results of using a named, unscoped slot with a plain DOM node:\r\n\r\n```\r\nRender Template:\r\n  transition[name=overlay-fade]\r\n    my-functional-component\r\n      div.busy-overlay[slot=waiting]\r\n        spinner\r\n\r\nVNode: transition[name=overlay-fade]\r\n  tag: 'vue-component-19-transition'\r\n  children: undefined\r\n  componentOptions:\r\n    tag: 'transition'\r\n    children: [\r\n      VNode: div.busy-overlay[slot=waiting]\r\n        tag: 'div'\r\n        data:\r\n          slot: 'waiting'\r\n        children: [\r\n          VNode: spinner\r\n            tag: 'vue-component-25-spinner'\r\n            children: undefined\r\n            componentOptions:\r\n              tag: 'spinner'\r\n        ]\r\n    ]\r\n```\r\n\r\nCompare this to the use of a template tag as the slot root:\r\n\r\n```\r\nRender Template:\r\n  transition[name=overlay-fade]\r\n    my-functional-component\r\n      template[slot=waiting]\r\n        div.busy-overlay\r\n          spinner\r\n\r\nVNode: transition[name=overlay-fade]\r\n  tag: 'vue-component-19-transition'\r\n  children: undefined\r\n  componentOptions:\r\n    tag: 'transition'\r\n    children: [\r\n      VNode: div.busy-overlay\r\n        tag: 'div'\r\n        data:\r\n          slot: (not present)\r\n        children: [\r\n          VNode: spinner\r\n            tag: 'vue-component-25-spinner'\r\n            children: undefined\r\n            componentOptions:\r\n              tag: 'spinner'\r\n        ]\r\n    ]\r\n```\r\n\r\nThe exact component used to wrap the functional component doesn't matter, as demonstrated in the codesandbox example at the top of this post, I just ran into this using the Transition component most recently, hence the appearance of `transition` in the outlines above.\r\n\r\nFor now, I'm going to stick to wrapping the contents of slots in `<template>`s.  I may also add a wrapper function for getting normalized slot contents in functional components.","I've ran into this issue too. Seems to only occur when a functional component wraps another functional component.","I have same problem, When a functional component wraps another functional component.","there should be an anwser you want here\r\n#7587","> there should be an anwser you want here\r\n> #7587\r\n\r\nOk, can be a solution , but I use SFC functional with default slot: \r\n```js\r\n<template functional>\r\n<\/template>\r\n```","In this specific scenario, the `Parent` component should be written like this:\r\n\r\n```js\r\n  render(h, context) {\r\n    context.data.scopedSlots = {\r\n      username: () => h('span', {}, 'World')\r\n    }\r\n    return h(Child, context.data, [])\r\n  },\r\n```\r\n\r\nI think we may need to adapt the functional component to allow passing a child with a `slot` attribute:\r\n\r\n```js\r\n  render(h, context) {\r\n    context.data.scopedSlots = {\r\n      username: () => h('span', {}, 'World')\r\n    }\r\n    return h(Child, context.data, [\r\n      h('span', { slot: 'username' }, 'World')\r\n    ])\r\n  },\r\n```\r\n\r\n@nickmessing I imagine the jsx plugin transforms into this because it has no way of knowing if `Child` is functional or not"],"labels":["has workaround"]},{"title":"Binding the bind directive and change events to the <input\/> tag doesn\u2018t work","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/MoriGirl\/50wL7mdz\/755097\/](https:\/\/jsfiddle.net\/MoriGirl\/50wL7mdz\/755097\/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nEnter two numbers less than 10(etc, 7 , 8) in succession twice, observe page display and console output.\r\n\r\n### What is expected?\r\nI originally expected the page and console to display 10 after each input.\r\n\r\n### What is actually happening?\r\nWhen I input numbers less than 10 for two consecutive times, such as ( 7, 8 ), it was observed that after the first input, the page and console display 10 at the same time, but after the second input, the page displays 8 and the console displays 10.\r\n\r\n---\r\n## reluctant solution\r\n1. Get the native input element and modify its value\r\n\r\n   *  use ref   \r\n```\r\n<input  :value='num' @change='handleChange' ref='inputnumber' \/>\r\n...\r\nhandleChange(event){\r\n   this.num=this.check(event.target.value);\r\n   this.$refs.inputnumber.value=this.num;\r\n}\r\n``` \r\n   *  use event  \r\n\r\n```\r\nhandleChange(event){\r\n    this.num=this.check(event.target.value);\r\n    event.target.value=this.num;\r\n}\r\n```\r\nbut if I replace the input element with a custom component, this may not work.\r\n2.  use both v-model and watch\r\n```\r\n<input  v-model.lazy='num' \/>  \/\/.lazy: Data synchronization using the change event\r\n...\r\nwatch:{\r\n    num:function(v){\r\n      \tthis.num=this.check(v);\r\n    }\r\n},\r\n```\r\n\r\nI want to know why such  outputs appear and if there is a better solution.\r\nThank you\uff01\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Probably a race condition here.\r\nYou can get around it by doing `this.$forceUpdate()` after setting `this.num`","> Probably a race condition here.\r\n> You can get around it by doing `this.$forceUpdate()` after setting `this.num`\r\n\r\nGood idea.Thank you!","You're using `v-bind:value` on your input element. The input element can't mutate the Vue instance's reactive data on its own. As far as the Vue instance is concerned, the second time the user sets the input to a number less than 10, the value of `this.num` doesn't change. It was already set to 10, and it is being set to 10 again.\r\n\r\nTo illustrate, try adding the line ```this.num = event.target.value``` to the beginning of `handleChange` in your fiddle. That will make it work as expected, because `this.num` is set to a number less than 10, and then it's set to 10, triggering the update.\r\n\r\nThis is effectively the same as your second relucatant solution: The change event is emitted, the value of `this.num` is set to a number below 10, then `this.num` is immediately set to 10.\r\n\r\nDepending on what you're going for, there are a few different options: Your second reluctant solution with `v-model.lazy` most closely resembles the behavior you're looking for. If you don't feel comfortable with `this.num` getting set to a string before the watcher casts it to a number with `this.check`, you can use the [`.number`  modifier for `v-model`](https:\/\/vuejs.org\/v2\/guide\/forms.html#number).\r\n\r\nYou can also use two separate data properties: one to use as a `v-model` on your input, and another that you set the value of whenever you change\/submit that input field. Since `v-model` will keep the `value` of your input in sync with the data property you've bound it to (by listening to the `input` event instead of `change`), you won't have to guess the value being held in Vue's reactivity system.\r\n\r\nThe Vue cookbook has a [section on form validation](https:\/\/vuejs.org\/v2\/cookbook\/form-validation.html) that you might find interesting as well."],"labels":["has workaround"]},{"title":"Check if tag is already in the window.customElements registry on top of checking config ignoredElements","body":"### What problem does this feature solve?\r\nWhen Vue is mounting, the function `isUnknownElement` is called and checks, among others, whether the element tag is in the list of `ignoredElements`. In the context of an app that uses multiple web components, we don't want to manually add every new component's tag to the `ignoredElements` list. Maintaining that list could quickly become a headache. If the  `isUnknownElement` also checks the custom elements registry, it could figure out that the element in question is not necessarily unknown.\r\n\r\n### What does the proposed API look like?\r\nThe API would stay the same, but on top of checking for `config.ignoredElements` in the function `isUnknownElement`, we would also check if `window.customElements.get(vnode.tag)` is defined or not. If it is defined, then we return false.\r\n\r\nI am happy to submit a pull request, I just wanted to discuss this first to make sure there aren't design constraints to adding something like this.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I want to work on this issue."],"labels":["feature request","improvement"]},{"title":"Using multiple selects with v-model and bound and unbound values causes value overriding","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/du578xc0\/32\/](https:\/\/jsfiddle.net\/du578xc0\/32\/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nchange first select to \"Some\", then change newly displayed select. You will see that val2 is being set to the bound vals from the val1 select instead of it's own values.\r\n\r\nYou can change the first select to use the .number modifier on the v-model and exchange the bound number values for strings to fix this issue. (at least for this very specific desired effect).\r\n\r\nYou can \"fix\" the problem by either using v-bind:value on all values, or by using non-bound values on all values - but as far as I can tell, if you mix them, then it will cause this override bug\r\n\r\n### What is expected?\r\ndifferent values for each variable\r\n\r\n### What is actually happening?\r\nsecond variable is being overwritten with the first's value\r\n\r\n---\r\nThis was posted\/discussed in the discord chat\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["As I said on Discord, this is not really a bug, but related to how Vue is reusing DOM elements when re-rendering on state changes. In this particular case, the select and the first two of its options are reused, and for some reason (ok, this might be a small bug \ud83d\ude42 ) the `<option>`s remain bound to their initial values. There's two ways you can fix this:\r\n- bind the values in the second select, too: https:\/\/jsfiddle.net\/du578xc0\/49\/ , or\r\n- use a distinct key on the `<select>`s, to explicitly tell Vue not to reuse them: https:\/\/jsfiddle.net\/du578xc0\/51\/ .","Use of the key attr is the perfect solution to this, thank you!"],"labels":["bug","has workaround"]},{"title":"On SSR, do not escape RAW nodes","body":"### What problem does this feature solve?\r\nWhen rendering a script tag on server the content is escaped, breaking the js code.\r\n\r\n```html\r\n<script>\r\n  var x = \"y\";\r\n<\/script>\r\n```\r\n\r\nis rendered as \r\n\r\n```html\r\n<script>\r\n  var x = &quot;y&quot;;\r\n<\/script>\r\n```\r\n\r\n\r\n### What does the proposed API look like?\r\nA solution would be to allow users to define what to be escaped, to override this map\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/833175e9d6e8f47367e49e1752cd149a677cdae8\/src\/platforms\/web\/server\/util.js#L43\r\n\r\nOr a option to disable escaping et all here \r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/52719ccab8fccffbdf497b96d3731dc86f04c1ce\/src\/server\/optimizing-compiler\/codegen.js#L228\r\n\r\nThanks.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Your components should not include script tags. There is even a Vue error\/warning for that\r\nIf you are talking about something else, could you please provide a small repro?","When using Vue for SSR only(without intention to hidrate) i surely can use scripts and styles in templates.\r\n\r\nSee the condition for that error to appear:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/52719ccab8fccffbdf497b96d3731dc86f04c1ce\/src\/compiler\/parser\/index.js#L133\r\n\r\nHere is the repro\r\nhttps:\/\/runkit.com\/sleewoo\/5ba897abdcb0ef0012e77a49\r\n\r\n<img width=\"600\" alt=\"screen shot 2018-09-24 at 10 59 23 am\" src=\"https:\/\/user-images.githubusercontent.com\/9264860\/45941901-efb90c80-bfe8-11e8-9e8d-6a5a3bff7734.png\">\r\n","mmh, true, was added at https:\/\/github.com\/vuejs\/vue\/pull\/3425","thanks\r\n","turns out that even when i disable the escaping entirely here, \r\nit still escapes the quotes if there are `{{ something }}` in the script\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/52719ccab8fccffbdf497b96d3731dc86f04c1ce\/src\/server\/optimizing-compiler\/codegen.js#L228\r\n","\r\n```html\r\n<div>\r\n  <script>\r\n    var x = \"y\";\r\n    var a = \"{{ something }}\";\r\n  <\/script>\r\n<\/div>\r\n```\r\n\r\nis rendered like\r\n\r\n```html\r\n<div data-server-rendered=\"true\"><script>\r\n    var x = &quot;y&quot;;\r\n    var a = &quot;something&quot;;\r\n  <\/script><\/div>\r\n```\r\n","Guys thank you for the help I really appreciate it. But pls note that I have little or next to no knowledge on programming or coding..\n\nAnyways SW, is the code something I can just cut and paste or share?\n\nThanks\n\n\n\nNBaules\n\nGet Outlook for iOS<https:\/\/aka.ms\/o0ukef>\n\n________________________________\nFrom: Slee Woo <notifications@github.com>\nSent: Tuesday, September 25, 2018 9:28 PM\nTo: vuejs\/vue\nCc: Ngerikl Baules; Manual\nSubject: Re: [vuejs\/vue] On SSR, do not escape RAW nodes (#8829)\n\n\n<div>\n  <script>\n    var x = \"y\";\n    var a = \"{{ something }}\";\n  <\/script>\n<\/div>\n\nis rendered like\n\n<div data-server-rendered=\"true\"><script>\n    var x = &quot;y&quot;;\n    var a = &quot;something&quot;;\n  <\/script><\/div>\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub<https:\/\/nam02.safelinks.protection.outlook.com\/?url=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Fissues%2F8829%23issuecomment-424340963&data=02%7C01%7C%7C4b441f57a06a432f355308d622ead0ed%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636734789245204018&sdata=nRrAVbBJF3mGEoejWNuPIFF%2F1O2MBfv0OTVqg3PFFPA%3D&reserved=0>, or mute the thread<https:\/\/nam02.safelinks.protection.outlook.com\/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAQTcduA6bPu9d8_qLFh4djy6aPlw2ZyLks5uei-LgaJpZM4W100r&data=02%7C01%7C%7C4b441f57a06a432f355308d622ead0ed%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636734789245204018&sdata=kYSai4X53Ikx4HFO3zLRQM6qACsJPDrrX80k%2F5pr%2FYM%3D&reserved=0>.\n","so this time is `vue-server-renderer`\r\n\r\nreplacing this\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/3d36a443c755bf16f2656a8595dda9076f021a4a\/src\/server\/optimizing-compiler\/runtime-helpers.js#L21\r\n\r\nwith\r\n\r\n```js\r\n_ssrEscape: (s) => s,\r\n```\r\n\r\nwill disable escaping and render valid script\r\n","@yyx990803 can you please take a look,\r\nfor sure you have a better idea how to address this issue,\r\nthanks\r\n","here is a new repro - https:\/\/runkit.com\/sleewoo\/5c12c6621c8e9f0014a02e7a\r\n","Possible ugly hack thanks to `v-pre` directive...\r\n\r\n```\r\n<body onload=\"var javascripts = document.querySelectorAll('javascript'); for (var javascript of javascripts) { var script = document.createElement('script'); var type = javascript.getAttribute('type'); if (type) script.setAttribute('type', type); script.innerText = javascript.innerText; javascript.parentNode.insertBefore(script, javascript); javascript.remove(); }\">\r\n      <javascript type=\"text\/javascript\" style=\"display: none\" v-pre>\r\n          \/\/ JS code here in <javascript> tag will be switched to <script> tag (Vue does not allow to disable escaping for some element)\r\n      <\/javascript>\r\n<\/body>\r\n```\r\n\r\nFor simple server side html generation with just a few lines of javascript needed on frontend we really do not want to implement client hydration and add client.js with several hundreds of kB.\r\n\r\n**In future it will be nice to have some per-element option e.g. `v-noescape`.** Everyone who use it know what and why he is doing - so sane developer will not use it for user input (the same as exists `v-html` - it is developer responsibility for input). I need <script> tag in template, I do not want it outside template and set using v-html as mentioned here https:\/\/github.com\/vuejs\/vue\/issues\/8996#issuecomment-433479939."],"labels":["improvement"]},{"title":"Different functional componens has the same key","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/github.com\/vedmaque\/vue-functional-bug](https:\/\/github.com\/vedmaque\/vue-functional-bug)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1) create `Component1`\r\n```\r\n<template functional>\r\n  <div class=\"a\">\r\n    <div class=\"b\">first (template)<\/div>\r\n    <div class=\"b\">component<\/div>\r\n  <\/div>\r\n<\/template>\r\n```\r\n2) create `Component2`\r\n```\r\n<template functional>\r\n  <div class=\"x\">\r\n    <div class=\"y\">second (template)<\/div>\r\n    <div class=\"y\">component<\/div>\r\n  <\/div>\r\n<\/template>\r\n```\r\n3) render them in App.\r\n```\r\n<template>\r\n  <div id=\"app\">\r\n    <component1 \/>\r\n    <component2 \/>\r\n  <\/div>\r\n<\/template>\r\n```\r\n\r\n### What is expected?\r\nEverything works fine\r\n\r\n### What is actually happening?\r\nVue warns about same key\r\n```\r\n[Vue warn]: Duplicate keys detected: '__static__0'. This may cause an update error.\r\n```\r\n\r\n---\r\nIf you create the same components from render function directly, it works fine, without duplicated keys (keys are `undefined` in this situation)\r\n```\r\n<script>\r\nexport default {\r\n  functional: true,\r\n  render(createElement) {\r\n    return createElement(\"div\", {\r\n        staticClass: \"a\"\r\n    }, [createElement(\"div\", {\r\n        staticClass: \"b\"\r\n    }, [\"first\"]), createElement(\"div\", {\r\n        staticClass: \"b\"\r\n    }, [\"component\"])])\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\nThis image shows the difference in VNode objects.\r\n![screenshot](https:\/\/github.com\/vedmaque\/vue-functional-bug\/raw\/master\/functional-bug.png)\r\n\r\nMoreover, if `Component1` looks likes this, it works fine too.\r\n```\r\n<template functional>\r\n  <div class=\"a\">first (template) component<\/div>\r\n<\/template>\r\n```\r\n\r\nVue Template Exporer will go crazy too if you try to compile `Component1`\r\nhttps:\/\/template-explorer.vuejs.org\/#%3Cdiv%20class%3D%22a%22%3E%0A%20%20%3Cdiv%20class%3D%22b%22%3Efirst%20(template)%3C%2Fdiv%3E%0A%20%20%3Cdiv%20class%3D%22b%22%3Ecomponent%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I had the same warning using version `2.6.10`. I had a component using three child functional components and it would give me this warning, so what I did was assign the root element for each functional component with a unique key from each other and the warning went away. Not sure if that was right though but it got rid of the error.\r\n\r\n","there is indeed a problem with template-based static functional components.\r\nYou have two workarounds: moving it to a render function, or making it non statical by having anything on the template using a v-bind or mustache expression\r\n\r\nI think this belongs to vue-loader though \ud83e\udd14 cc @sodatea ","I had the same issue and by defining a key in the template root element can resolve this issue. Example below:\r\n### First Component\r\n```\r\n<template functional>\r\n  <div class=\"a\" :key=\"'component1'\">\r\n    <div class=\"b\">first (template)<\/div>\r\n    <div class=\"b\">component<\/div>\r\n  <\/div>\r\n<\/template>\r\n```\r\n### Second Component\r\n\r\n```\r\n<template functional>\r\n  <div class=\"x\" :key=\"'component2'\">\r\n    <div class=\"y\">second (template)<\/div>\r\n    <div class=\"y\">component<\/div>\r\n  <\/div>\r\n<\/template>\r\n```\r\n\r\nAfter defining the key to the very root element of the template you can solve this issue. You can see the static generated keys in Vue-Dev Tools(Browser) as well, so defining your own key attribute resolve the issue. Once you add your key attribute in template's root element, you can see your defined keys in Vue-Dev Tools.\r\n\r\nPlease let me know your outcome on this.\r\n","@inamandev That works, but since the keys are static strings, it can just be written without the binding: `<div class=\"a\" key=\"component1\">`","@posva Is this something that will be addressed in Vue 3?"],"labels":["has workaround"]},{"title":"Race condition in transition-group","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/nkovacs\/Lskfredn\/](https:\/\/jsfiddle.net\/nkovacs\/Lskfredn\/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Click the add button\r\n\r\n\r\n### What is expected?\r\nthe animation should work properly, and animation classes should be cleaned up\r\n\r\n### What is actually happening?\r\nthe enter animation doesn't work and the new item's element keeps the `list-enter-to` class forever\r\n\r\n---\r\nThe style tag binding triggers a second rerender of the transition-group component between the transition-group setting `_enterCb` on the entering new child and `nextFrame` triggering its callback. `prevChildren` is updated to include the new item, and `update` calls the pending `_enterCb` callback. Then after that, `nextFrame` triggers, but because `_enterCb`  can only be called once, it won't be called, so the `enter-to` class will remain on the element.\r\n\r\nThis only happens if the transition-group has a move transition.\r\n\r\nThe bug also occurs if the elements are changed between `update` and `nextFrame`: https:\/\/jsfiddle.net\/nkovacs\/cnjso1h5\/\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This is happening for me too. However it is only happening when trying to transition the `transform` property. The `left` property works as expected. ","That's strange, it shouldn't matter what you are transitioning, the only important thing is that you have a move class with a transition."],"labels":["transition"]},{"title":"Oddity with JS transition hooks used in combination with CSS","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/6x4k5vrrkn](https:\/\/codesandbox.io\/s\/6x4k5vrrkn)\r\n\r\n### Steps to reproduce\r\nRemove the [unused] `done` parameter from the `leave` callback signature in `SideSheet.vue`.\r\n\r\n### What is expected?\r\nThe component to transition both on enter and leave.\r\n\r\n![want](https:\/\/user-images.githubusercontent.com\/22343\/45375530-28221900-b5ed-11e8-90ca-f7eff6d20bc8.gif)\r\n\r\n### What is actually happening?\r\nThe component enters immediately (without transitioning).\r\n\r\n![get](https:\/\/user-images.githubusercontent.com\/22343\/45375595-5bfd3e80-b5ed-11e8-8894-7c839df72cb3.gif)\r\n\r\n---\r\nThe `done` callback shouldn't be needed if the transition duration is implicit in CSS (as noted in the docs). However, by retaining the `done` parameter in the function signature it is unclear why it should \"work\" (since it's unused within the function definition itself).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This is the same as #8279 but it is unclear to me why the CSS transition isn't triggering.\r\nHowever, your transition seems to be using the leave while it should be using the enter (try changing durations","Thanks for pointing me at the other issue, @posva; apologies for not finding that.\r\n\r\nYou're right, it should be the `enter` transition\/cb that should be the concern. It was by fluke that I discovered that an unused `done` arg  (which as @yyx990803 points out is the cue that the `userWantsControl`) provided a \"solution\", so suspected it had relevance.\r\n\r\nAfter stepping through the code, I noticed the `nextFrame` trick (defined in the transition util file and utilised in the transition module) which nests a `requestAnimationFrame` call to remove the `beforeEnter` transition class, so wondered if it was a timing issue (since that happens asynchronously to any user defined `enter` callback). And that leads to an alternative, more appropriate solution:\r\n\r\n```js\r\nbeforeEnter(el) {\r\n  el.style.marginLeft = `-${this.width}px`;\r\n},\r\n\r\nenter(el) {\r\n  window.requestAnimationFrame(() =>\r\n    window.requestAnimationFrame(() => {\r\n      el.style.marginLeft = null;\r\n    })\r\n  );\r\n},\r\n\r\nleave(el) {\r\n  el.style.marginLeft = `-${this.width}px`;\r\n},\r\n```\r\n\r\nBut the code is brittle since it's arguably reliant on what's happening internally.\r\n\r\nDoes it suggest that the user defined hooks should actually run within that `nextFrame` cb? \ud83e\udd37\u200d\u2642\ufe0f Else the DOM change in the `beforeEnter` hook appears not to actually [re]paint, hence why a transition never occurs.\r\n\r\n(Area in code of relevance, [here](https:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/platforms\/web\/runtime\/modules\/transition.js#L146-L169).)"],"labels":["transition"]},{"title":"Key Event wrongly triggered for unknown Modifier\/Alias\/Keycode on every Key in Safari 9","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/cb109\/pen\/xarvBZ](https:\/\/codepen.io\/cb109\/pen\/xarvBZ)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nPlease open the codepen link in Safari 9 on iOS, which is where I observed the bug (works fine in Chrome 68 on Ubuntu 18).\r\n\r\n\r\n\r\n\r\n\r\n### What is expected?\r\nThere are two inputs, the first working as expected, the second showing some weird behaviour:\r\n\r\nThe first textfield has a handler to fire only when pressing escape. Typing should work as expected, pressing escape while focused should clear the input.\r\n\r\nThe second textfield has a handler for an unknown key code by using an unknown key modifier alias. Typing should work the same as for the first input.\r\n\r\n### What is actually happening?\r\nTyping into the second input in Safari 9 on iOS it will always trigger the `@keyup` handler, thus clearing the input while typing. This feels wrong.\r\n\r\nIMHO this should not happen. If a key modifier-alias\/code is not recognized, it should not be triggered by any key.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Maybe we can provide a warning if a modifier doesn't exist (except numbers)","That would help :+1: But it would be more useful to have consistent behaviour across browsers (aka do nothing for unknown\/non-existing modifiers), although it's not clear for me if this is entirely within Vue's control."],"labels":["improvement"]},{"title":"Style binding: implicitly assign 'px' as the default unit for numeric values for certain css properties","body":"### What problem does this feature solve?\r\nWhen assigning values to a CSS property via style binding like\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width : width}\"><\/div>\r\n````\r\n\r\nor using the shorthand syntax...\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width}\"><\/div>\r\n````\r\n\r\nthis will actually not gonna work because we need to explicitly set the `unit`:\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width : width + 'px'}\"><\/div>\r\n````\r\n\r\nor via interpolation...\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width : `${width}px`}\"><\/div>\r\n````\r\n\r\nNow our code becomes more verbose. Combining all the number of occurrences of such binding, it's becoming ridiculous.\r\n\r\nI'm not sure if currently there is an elegant solution for this, but if there is. It would be also good if it is referenced in in the [docs](https:\/\/vuejs.org\/v2\/guide\/class-and-style.html).\r\n\r\nIn React, this is the default behavior. It will add 'px' if the `unit` is not specified.\r\n\r\n### What does the proposed API look like?\r\nFor common css properties like `width` and `height`, having vue implicitly assign 'px' to the value it would definitely make our code much more cleaner.\r\n\r\nThis code...\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width}\"><\/div>\r\n````\r\n\r\nwill be interpreted as:\r\n\r\n````html\r\n    <div class=\"d-inline-block\" :style=\"{width : width + 'px'}\"><\/div>\r\n````\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["TBH I'm not a fan of this feature. A CSS property can accept multiple value types and even it's \u201cunitless\u201d today doesn't mean it will stay \u201cunitless\u201d forever, and vice versa. As the language evolves,  maybe someday a \u201cunitless\u201d property can take length units, or those accept length units can take \u201cunitless\u201d values. If a property use to not accept \u201cunitless\u201d values and later changed to accept them, we would never know the true semantics behind a number if we had supported appending `px` to it by default.","Hi @Justineo,\r\n\r\nI see your point, but I think you're a little bit exaggerating such concern. We know CSS' implementation in relation to the units of values of css properties hasn't changed that much between versions. Take the width or height for example, ever since the birth of CSS, it hasn't changed much. It didn't go unitless.  \r\n\r\nAnd also, I am certain that some properties wouldn't go unitless, particularly those properties where `length` are involved like the `height`, `width` and `border` for example. As far as CSS' maturity is concerned, I'm pretty much sure that we won't be seeing something like `height: 1` or `opacity: 1em` in the future. \r\n\r\nAnyway, this is implemented in ReactJS, so there shouldn\u2019t be that much problem having it in Vue since it will definitely improve our productivity.","I'm not a fan of this either, it means we have to keep another list of [unitless properties](https:\/\/github.com\/facebook\/react\/blob\/4131af3e4bf52f3a003537ec95a1655147c81270\/src\/renderers\/dom\/shared\/CSSProperty.js#L15-L59) and keep it up to date, and it has to be added at runtime too because a property name could be dynamic","Hi @posva,\r\n\r\nI think we we don\u2019t necessarily need to list all unitless or non-unitless properties. We could just list the commonly used properties in real world scenarios. Like the `height` and `width`, there are cases where we assign these properties via javascript.","Unfortunately, that wouldn't be consistent and confusing to users","Hi @posva ,\r\n\r\nYes, you are right.","I think this would be doable with a sort of feature-detection solution. For example, if a value of type \"number\" were passed, then during normalization a one-time check is done to see whether the property in question supports unitless values.\r\n\r\nAt least in Chrome, if a value isn't allowed to be unitless, it won't get set:\r\n\r\n```js\r\ntmpDiv = document.createElement(\"div\")\r\ntmpDiv.style.width = 20\r\nconsole.log(tmpDiv.style.width) \/\/ output: \"\"\r\n```\r\n\r\nThe output will *always* be a string so for the comparison check, the input value should be converted to a string. This should allow Vue to maintain high performance in this area due to the solution's opt-in nature. If a developer never passes a number type, then they'll never encounter that branch.","<s>As you can see, feature is already included in Vue 3:\r\n\r\nhttps:\/\/github.com\/vuejs\/vue-next\/blob\/eaf414f06366b413e36a688749a6524687b952d7\/packages\/shared\/src\/domAttrConfig.ts#L44-L55\r\n\r\nAlthough I mentioned this is theoretically not a safe move, the reality is that this feature already exists in React and we would have to take this into account when trying to evolve CSS, to prevent conflicts with the most popular JavaScript frameworks.\r\n\r\nMaybe we can back port this into 2.7 after 3.0 and the companion libs are fully ready. But we still have to maintain a list because feature detection doesn\u2019t work on the server side.<\/s>\r\n\r\nVue 3 only used this to remove \"invalid\" declarations for SSR and the feature was already removed.","Yes, that's what I'm saying ever since I started this discussion. React has been implementing it, so why shouldn't we?\r\n\r\nAnyway, it's really cool seeing this getting pushed despite the tons of dislikes. \ud83d\ude05\r\nI'm looking forward to Vue 3.0. \u2764\ufe0f\r\n\r\nPS: @julian-ca is my older account. "],"labels":["feature request","discussion"]},{"title":"2 transition-groups with different tags   v-if \/ v-else = Cannot read property '$vnode' of null","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/anon\/pen\/BOpJZb](https:\/\/codepen.io\/anon\/pen\/BOpJZb)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1- Open the console\r\n2- Click the button\r\n\r\n### What is expected?\r\nIn fact I don't know.  I would expect not to see the error but I'm thinking maybe I'm doing something wrong. \r\n\r\n### What is actually happening?\r\nCannot read property '$vnode' of null appears in the console\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Note: I've dug into the issue.\r\nIf I use v-shows instead of v-if \/ else it works.\r\nIf all my transition-group have the same tag it works, even with v-if-else.  However, this is not practical in my case.\r\nIf there are no components in transition-group children, it works.","I've also thought of nesting my transition-groups in 2 divs that I'd apply the v-if\/else on and I get the same error\r\nI've added the code in my codePen\r\n","You can add a `key` attribute to the `transition-group` as well to remove the error but the error shouldn't appear indeed","@posva thank you for the workaround =D"],"labels":["improvement","has workaround","transition"]},{"title":"fix(#8728): only execute the dependArray function once","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [x] Other, please describe: This PR is not a bug fix, but a performance improvement for issue #8728.\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [x] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\nThe `newDepIds` property of each Watcher instance object holds all the dependencies collected by this evaluation. We can prevent the `dependArray` function from being called multiple times by checking if the dependency has been collected.\r\n","comments":["em.. I think the changes in this PR cause a regression bug.\r\n\r\nIt looks like the `dependArray` method was designed to solve the dependency problem in a nested array.\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <p>{{ nest[0] }}<\/p>\r\n    <button @click=\"nest[0].push('next')\">add one<\/button>\r\n  <\/div>\r\n<\/template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      nest: [\r\n        ['init'],\r\n      ],\r\n    };\r\n  },\r\n}\r\n<\/script>\r\n```\r\n\r\nHave not try this example with your branch yet, but I think the `checkRelated` will cause the nest array not reactive.","The `dependArray` function will still execute, except that it will only execute `once`.\r\n`Watcher` collects dependencies by executing getters, and each time the getter is executed, the `watcher.cleanupDeps` function is executed to reset `newDepIds`. That is, everything is a new start every time the watcher's getter is re-executed, but in the process, there is no need to execute the `dependArray` function multiple times. It does not cause nested arrays to be not reactive.","my bad, the check was executed before depend so it is ok:)","@wangyi7099 \r\nWhen value is a plain-object, your code will cause it to fail to collect dependencies. And performance issues only occur in the case of large arrays, usually we don't need to care about objects","@HcySunYang \r\nI'm sorry. My sample code has some errors. I  have updated it.\r\n\r\n>  And performance issues only occur in the case of large arrays, usually we don't need to care about objects\r\n\r\nI think you are right. But I also think care about plain-object will also save some performance cost."],"labels":["in review"]},{"title":"Vue treat every element attribute named like 'v-[something]' as directive","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[http:\/\/jsfiddle.net\/wf48v9de\/3\/](http:\/\/jsfiddle.net\/wf48v9de\/3\/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nRun the fiddle and look at console.\r\n\r\n### What is expected?\r\nIf there is not registered directive named 'v-fake', Vue should ignore this attribute of an element.\r\n\r\n### What is actually happening?\r\nVue treat every 'v-[something]' attribute as directive, regardless if it is registered globally or locally, or not at all. It is trying to compute the value of 'v-' beginning attribute, and in effect throws TypeError, as it doesn't find property named like string passed to attribute. \r\n\r\n---\r\nif it is intentional, there should be information about such behavior in Vue docs. However in my opinion it should ignore such attributes.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["IMHO, I think the docs are clear enough. The `v-*` lookup has a good behavior. It makes debugging easier, if you want to add a property `v-something` and not want Vue to treat it as a directive, you should be using data attributes\r\n\r\nSo instead of `<div v-fake\/>` it should be `<div data-v-fake\/>`","Maybe it would make more sense to resolve the directive and show an error (like when there is no value)","@posva I guess that could work."],"labels":["improvement"]},{"title":"An anti-pattern in computed property may cause performance issue","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/140202wlq](https:\/\/codesandbox.io\/s\/140202wlq)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nOpen the code sandbox link and click the button to use the computed property 'filteredEntities', and you will find it cost a lot of time.\r\n\r\nAfter check the call tree, I found this is because the code calls the getter of 'entities'  many times which will then call the `dependArray` function.\r\n\r\nThe code leading to this is:\r\n```js\r\nconst len = this.entities.length;\r\nfor (let i = 0; i < len; i++) {\r\n  const e = this.entities[i];\r\n  \/\/ do something with e\r\n}\r\n```\r\nIf this.entities has a length of n, its getter will be called n + 1 times. And every time when the getter was called, it will call dependArray on the value of this.entities, which is the array with length n.\r\nSince dependArray will iterate the value, the depend function will be called **(n + 1)^2** times totally.\r\n\r\nI found this code when I'm reviewing someone's PR, and the original code use `for (let i = 0; i < this.entities.length; i++) ` and make another n times call to the getter.\r\n\r\nIt was easy to avoid this problem, such as using some array methods like `filter` to only call getter once.\r\nEven cache the value of entities by `const cache = this.entities` can solve it.\r\n\r\nAlthough it was easy to avoid of this pattern, I still think it is dangerous because the original code was not an obvious anti-pattern.\r\nAnd this will not show any performance issue when the array is small, but may cause serious performance issue when the array is large in some production environment.\r\n\r\n### What is expected?\r\nI've read the related source code and I think this is the expected result of the observer system.\r\n\r\nThen I read some chapter of the guide again to ensure there is no mention about this, so I'm not sure whether we need to add this as a NOT TODO in the computed property chapter.\r\n\r\n### What is actually happening?\r\nDescribed.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Is this issue going to be fixed in vue version 2.+ \uff1f"],"labels":["has PR"]},{"title":"Property 'xxx' does not exist on type CombinedVueInstance ?","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link \r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. use vue-cli init a ts hello-world project .\r\n2. code like that\r\n```js\r\n<script lang=\"ts\">\r\nimport Vue from \"vue\";\r\nexport default Vue.extend({\r\n  name: \"HelloWorld\",\r\n  props: {\r\n    msg: String\r\n  },\r\n  data():any {\r\n    return {\r\n      wtf: this.initData(), \/\/ throw ts error : Property 'initData' does not exist on type 'CombinedVueInstance<Vue, {}, {}, {}, Readonly<{ msg: string; }>>'.\r\n    }\r\n  },\r\n \r\n  methods: {\r\n    initData():any {\r\n        return {\r\n          a: ''\r\n        }\r\n    },\r\n  },\r\n \r\n});\r\n<\/script>\r\n```\r\n\r\n\r\n### What is expected?\r\nHow can i fix it ?\r\n\r\n### What is actually happening?\r\n**Property 'initData' does not exist on type 'CombinedVueInstance<Vue, {}, {}, {}, Readonly<{ msg: string; }>>'.**\r\n\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["It seems to be intentional, I guess so you can't accidentally access computed properties via a method? https:\/\/github.com\/vuejs\/vue\/blob\/3b43c81216c2e29bd519c447e930d6512b5782e8\/types\/options.d.ts#L34\r\n\r\nedit: https:\/\/github.com\/vuejs\/vue\/pull\/6391\/commits\/540a38fb21adb7a7bc394c65e23e6cffb36cd867, https:\/\/github.com\/vuejs\/vue\/pull\/5887#discussion_r122128852","I don't understand. What bad would happen if i access computed properties via a method ?  ","They don't exist yet: https:\/\/codepen.io\/kaelwd\/pen\/pOErZw?editors=0011","Uh... I didn't use `computed` property, just use a `method` function, and the `methods` does exist in `data`.     \r\n   \r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/13402013\/44784873-96181a80-abc1-11e8-98dc-b53011ce97c5.png)\r\n    \r\n\r\n  \r\nAnd I may turn to `vue-class-component` instead of `Vue.extend`,  the native vue is still not so friendly to typescript (Maybe just because i am not so proficient in vue). Anyway, thanks for helping me.","Yeah I know, it is a bit silly. Just a guess as to why they might've done that. ","Same here.\r\n\r\n```\r\n\"vue\": \"^2.5.17\"\r\n\r\n\"typescript\": \"^3.0.0\"\r\n```\r\n\r\nIs there any way to access methods in `data` function?","Since this appears to be only a typing issue and not a runtime issue, there is an (ugly?) workaround available: cast `this` as type `any`:\r\n```\r\nreturn {\r\n  wtf: (this as any).initData(),\r\n};\r\n```\r\n\r\nAdditionally omit the `()` to store a reference to the method that is executable outside of the current scope, e.g. if you pass it to a child via a prop.","Same here. Vue 2.5 has [better type declaration support for TypeScript](https:\/\/medium.com\/the-vue-point\/upcoming-typescript-changes-in-vue-2-5-e9bd7e2ecf08) but this seems broken.","Same problem for me","I guess we should remove `this` type from `data` option function and make it as the same as other function `this` type. The use case that OP provides looks totally valid.\r\n\r\nI also faced another use case which I need comprehensive `this` type in `data` function when writing some function in it.\r\n\r\n```ts\r\ndata() {\r\n  return {\r\n    someFunc: () => {\r\n      this.someComputed() \/\/ `this` type here should be comprehensive\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAs a similar case, [`this` type of `beforeCreate`](https:\/\/github.com\/vuejs\/vue\/blob\/dev\/types\/options.d.ts#L76) seems also to be removed.\r\n\r\nBut they probably breaks existing apps type checking as we need to explicitly declare `data` function return type since it no longer infers return type of `data` due to [this restriction](https:\/\/vuejs.org\/v2\/guide\/typescript.html#Annotating-Return-Types). I'm not sure how much the change affects the existing apps...","vue-tsx-support","\ud83d\udc4d ","> Since this appears to be only a typing issue and not a runtime issue, there is an (ugly?) workaround available: cast `this` as type `any`:\r\n> \r\n> ```\r\n> return {\r\n>   wtf: (this as any).initData(),\r\n> };\r\n> ```\r\n> \r\n> Additionally omit the `()` to store a reference to the method that is executable outside of the current scope, e.g. if you pass it to a child via a prop.\r\n\r\nSo is this the proposed solution at the moment?","One workaround I had been using is to add an Interface for the Vue instance like this:\r\n```\r\ninterface IComponent {\r\n    $refs: {\r\n        Form: HTMLFormElement;\r\n    };\r\n    InitData(): void;\r\n}\r\n\r\nexport default (Vue as VueConstructor<IComponent>).extend({\r\n...\r\n```\r\n\r\nThis will let you add typing for methods and $refs, does not seem to be any side effects.\r\n\r\nEDIT:\r\n\r\nI will add this too since I struggled to work with the types for nullable properties (late initialization) with Vue.extend.  if you try to return a type | null that is initialized as null, the typings think its literally null and that it cannot be the type.  Workaround is to cast the return again, which is annoying so I made a wrapper type.  This works well if you have data that needs to be set in mounted, or is a component level data that maybe doesn't get initialized until a certain method is called (Form validator and Dialog reference in UI framework in my cases:\r\n\r\n```\r\nexport type Nullable<T> = T | null;\r\n\r\nVue.extend({\r\n    data() {\r\n         const dialog: Nullable<Dialog> = null;\r\n\r\n        return {\r\n            dialog: dialog as Nullable<Dialog>\r\n        };\r\n    },\r\n    methods: {\r\n        ButtonClick(): void {\r\n            this.dialog = new Dialog({});\r\n        }\r\n    }\r\n});\r\n```","EDIT: See @IAMtheIAM's [answer](https:\/\/github.com\/vuejs\/vue\/issues\/8721#issuecomment-574892176) below\r\n\r\nI had this error while working inside of a computed property. My data and computed were organized like this:\r\n\r\n```\r\nexport default Vue.extend({\r\n    name: 'componentName',\r\n    data() {\r\n        return {\r\n            myDataPoint: false,\r\n        };\r\n    },\r\n    computed: {\r\n        trueOrFalse() {\r\n            return this.myDataPoint ? 'is-true' : 'is-false';\r\n        }\r\n    },\r\n})\r\n```\r\n\r\nIt would give me the same error (`Property myDataPoint does not exist on type CombinedVueInstance`...)\r\n\r\nHowever, when I declared what type would be returned by the function, the error went away: \r\n(look to the `trueOrFalse` computed property for the change)\r\n\r\n```\r\nexport default Vue.extend({\r\n    name: 'componentName',\r\n    data() {\r\n        return {\r\n            myDataPoint: false,\r\n        };\r\n    },\r\n    computed: {\r\n        \/\/ declare the type returned by your function\/computed\/method\r\n        trueOrFalse(): string {\r\n            return this.myDataPoint ? 'is-true' : 'is-false';\r\n        }\r\n    },\r\n})\r\n```\r\n\r\nHope this helps!","Declare the return type worked for me as well... But such strange behavior.","FWIW, the error shows for me only in VSCode, but when compiling with `tsc` directly, there's no error. Also, when I edit one of the falsely highlighted properties (like deleting one char and putting it back), most of the time the error just goes away.","@stoically https:\/\/github.com\/microsoft\/TypeScript\/issues\/34999?","Declare the return type worked for me sometimes, but turn to `vue-class-component`  instead of `Vue.extend` will work awalys\uff01","> Declare the return type worked for me as well... But such strange behavior.\r\n\r\nSame here. Odd behavior but it works nonetheless. I supposed having a return in TypeScript never hurts haha!","This happens for all my methods and data properties. What's the solution?\r\n\r\nUPDATE: Apparently, you have to annotate the return type for your computed methods, otherwise all your `methods` and `data` properties won't appear to typescript as if they are on the `CombinedVueInstance`. As soon as I did that, all errors went away regarding this.","Thanks @IAMtheIAM, your hint solved it for me. I was having the issue with `methods` that called vuex actions - and I thought initially the error might be in the type resolution for the vuex actions somehow. But it turned out I had added another `computed` property in the component that did not have a return type set. Adding this one solved it for my case.","I had this issue until I gave _all_ my computed properties return types.\r\nHowever, Jest unit tests continued to throw the same TypeScript error.\r\n\r\nI had to alter my expectation to follow this pattern:\r\n```js\r\nexpect((wrapper.vm as any).subtotalFormatted).toBe('\u00a31,234.56');\r\n```\r\n\r\nYuk! I hope this can be resolved soon.","I have this issue - but 'computed' statement is **nowhere** in my dummy project. I'm using just 'methods'. Basically reproduction is the same as the original post at the top. I tried the solution with the type declaration, this didn't help me (ts 3.8.3)","Having the same issue when using the new Vue.js Composition API with vscode-insiders. The code compiles without TS errors but vscode shows an error nonetheless. \r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/10828570\/81380116-955fb780-910a-11ea-9c39-34099b85ca61.png)\r\n\r\n\r\n```javascript\r\n\/\/ setup(props, context) { \r\nwatch(\r\n    () => context.root.$q.screen.width,\r\n    () => setMiniState(undefined)\r\n)\r\n```\r\n\r\n**Details**\r\nVersion: typescript 3.8.3, eslint 6.8.0\r\n```\r\nVersion: 1.46.0-insider (system setup)\r\nCommit: d487078dc7fc1c276657cadb61b4f63833a8df55\r\nDate: 2020-05-07T16:19:54.327Z\r\nElectron: 7.2.4\r\nChrome: 78.0.3904.130\r\nNode.js: 12.8.1\r\nV8: 7.8.279.23-electron.0\r\nOS: Windows_NT x64 10.0.14393\r\n```\r\n\r\nPossible related issues: [#23987](https:\/\/github.com\/microsoft\/TypeScript\/issues\/23897), [#29511](https:\/\/github.com\/microsoft\/TypeScript\/issues\/29511) [#32573](https:\/\/github.com\/microsoft\/TypeScript\/issues\/32573) [#34999](https:\/\/github.com\/microsoft\/TypeScript\/issues\/34999)\r\n\r\nType declaration didn't work here either as a workaorund. So this failed too in vscode:\r\n```javascript\r\nwatch(\r\n   (): number => context.root.$q.screen.width,\r\n   () => setMiniState(undefined)\r\n)\r\n```","I also have this problem in vscode","Typescript 3.9 has made this even worse, I have to specify return types for methods too now. ","I'm very new to TypeScript. I tried all the advice here without any success, but I managed to build on @danjohnso's workaround to \"solve\" this with intersection types:\r\n\r\n`export default (Vue as VueConstructor<Vue & Interface1 & Interface2>).extend({`\r\n\r\nI have no idea if doing that is bad, but everything seems to work fine.\r\n\r\nEdit: My issue is with properties from mixins not being recognized.","Solution from @tipsy solved it for me. My use case was using `mapState`.\r\n\r\n```ts\r\ninterface HomeMapState {\r\n  plants: Plant[]\r\n}\r\n\r\nexport default (Vue as VueConstructor<Vue & HomeMapState>).extend({\r\n  name: 'Home',\r\n  computed: {\r\n    ...mapState<HomeState>('home', {\r\n      plants: (state: HomeState) => state.plants,\r\n    }),\r\n    plantData(): Array<Plant | {}> {\r\n      if (this.loading) {\r\n        return new Array(5).fill({})\r\n      }\r\n      return this.plants\r\n    },\r\n  }\r\n})\r\n```\r\n\r\n`this.plants` in `plantData()` was previously always yielding an error and couldn't be found on the Vue instance.","I'm having this problem with Jest unit tests as well","Annotating the computed properties got rid of the error in vscode. However, I still get an error when running `yarn build`. I had to resort to [this ugly hack](https:\/\/github.com\/r-darwish\/pokestats\/commit\/ca50e3da3562d0750417340f5e3065d12f3b0c16)","> I had this error while working inside of a computed property. My data and computed were organized like this:\r\n> \r\n> ```\r\n> export default Vue.extend({\r\n>     name: 'componentName',\r\n>     data() {\r\n>         return {\r\n>             myDataPoint: false,\r\n>         };\r\n>     },\r\n>     computed: {\r\n>         trueOrFalse() {\r\n>             return this.myDataPoint ? 'is-true' : 'is-false';\r\n>         }\r\n>     },\r\n> })\r\n> ```\r\n> \r\n> It would give me the same error (`Property myDataPoint does not exist on type CombinedVueInstance`...)\r\n> \r\n> However, when I declared what type would be returned by the function, the error went away:\r\n> (look to the `trueOrFalse` computed property for the change)\r\n> \r\n> ```\r\n> export default Vue.extend({\r\n>     name: 'componentName',\r\n>     data() {\r\n>         return {\r\n>             myDataPoint: false,\r\n>         };\r\n>     },\r\n>     computed: {\r\n>         \/\/ declare the type returned by your function\/computed\/method\r\n>         trueOrFalse(): string {\r\n>             return this.myDataPoint ? 'is-true' : 'is-false';\r\n>         }\r\n>     },\r\n> })\r\n> ```\r\n> \r\n> Any time I've run into this error, this is the technique I used to fix it. I hope it helps someone else, too\r\n\r\nThis does not work with props:\r\n![err](https:\/\/user-images.githubusercontent.com\/49137104\/89710237-fc467400-d978-11ea-9c7a-139fd7fd6582.png)\r\n","> This does not work with props:\r\n\r\nAfter explicitly typing out the return type of the `getHeight()` function the errors went away. \r\nI'm glad i found this fix. Thanks to everyone :)\r\n![code](https:\/\/user-images.githubusercontent.com\/49137104\/89735062-bd3b2000-da57-11ea-9f44-994d93e3b8fd.png)\r\n","I still struggling with this error.\r\nDeclaring the return type on computed properties solve part of the errors.\r\nBut it does not work for : \r\n- mixins imported and used in methods\r\n- module mixins\r\n\r\n``` javascript\r\nexport default Vue.extend({\r\n  name: 'ConfigrationOptions',\r\n  mixins: [global],\r\n  computed: {\r\n    exportConfig(): string {\r\n      return JSON.stringify(this.$store.state.scrape.list)\r\n    }\r\n  },\r\n  methods: {\r\n    importConfig() {\r\n      const jsonImport = ((this.$refs.jsonImport as Vue).$el as HTMLInputElement).value\r\n      if (this.isJson(jsonImport)) { \/\/ <-- this give me an error ('isJson' is a method from the custom imported mixin)\r\n        this.$store.commit('scrape\/import', jsonImport)\r\n        this.makeToast('Import', 'success')\r\n      } else {\r\n        this.makeToast('Import', 'danger')\r\n      }\r\n    },\r\n    makeToast(action: string, variant: string) {\r\n      const textFromVariant = variant === 'success' ? 'sucess' : 'failed';\r\n      this.$bvToast.toast(`${action} ${textFromVariant}`, { \/\/ <-- this give me an error ('$bvToast' is a bootstrap-vue mixin)\r\n        title: `Configuration options`,\r\n        variant: variant,\r\n        solid: true,\r\n      })\r\n    },\r\n  },\r\n})\r\n```\r\n\r\nAnyone know how to fix this without using the 'ugly' workaround `(this as any)` ?","@remirobichet did you try `export default (Vue as VueConstructor<Vue & Interface1 & Interface2>).extend({` ?","> @remirobichet did you try `export default (Vue as VueConstructor<Vue & Interface1 & Interface2>).extend({` ?\r\n\r\nI tried to implement it quickly but got `Cannot find name 'VueConstructor'` error...","> Cannot find name 'VueConstructor'\r\n\r\nImporting the type might help","OK it's working, but I'll have to create a interface method for each mixins i use ? Even imported from external libraries ? ",">  I'll have to create a interface method for each mixins i use ? Even imported from external libraries ?\r\n\r\nIt's not ideal, but it's the only way I got it to work.","`InstanceType<typeof mixin>` or use this mixins utility I made for Vuetify: https:\/\/github.com\/vuetifyjs\/vuetify\/blob\/master\/packages\/vuetify\/src\/util\/mixins.ts\r\n\r\nVue 3 has proper typings for mixins. ","> `InstanceType<typeof mixin>` or use this mixins utility I made for Vuetify: https:\/\/github.com\/vuetifyjs\/vuetify\/blob\/master\/packages\/vuetify\/src\/util\/mixins.ts\r\n> \r\n> Vue 3 has proper typings for mixins.\r\n\r\n@KaelWD Would you mind explaining how we'd use `InstanceType<typeof mixin>`?","For those experiencing the same error thrown as a result of using mixins in Vue 2.x, I'm going to dump some information and the solutions I found in my research below.\r\n\r\nHere's a [helpful explanation](https:\/\/forum.vuejs.org\/t\/vue-global-mixin-with-typescript\/48620\/2) of why you're having this problem:\r\n> This is because you\u2019re importing Vue from \u2018vue\u2019 package, thus TypeScript doesn\u2019t have a clue that somewhere else you added property $myGlobalProperty to it.\r\n\r\nAfter researching and reading around online, the consensus everywhere (including this thread) seems to be that in order to get proper mixin typings without any complications or workarounds, you'll want to upgrade to Vue 3. \r\n\r\nIf that isn't an option for you right now, [this answer](https:\/\/stackoverflow.com\/questions\/59239650\/how-to-fix-linter-issues-with-mixins-in-vue-typescript) is what helped us overcome it. We went with option 1 until we can discuss option 2, and it will do until we can find a less limiting solution. \r\n\r\nHere are some other solutions I came across today:\r\n* The solution @morkro [gave earlier in this thread](https:\/\/github.com\/vuejs\/vue\/issues\/8721#issuecomment-640429661)\r\n* [This thread on the Vue forum](https:\/\/forum.vuejs.org\/t\/using-mixins-with-typescript\/24256) has some solutions-- some for the standard Vue syntax everyone is using here, and some for component class-style syntax\r\n    * [This comment](https:\/\/forum.vuejs.org\/t\/using-mixins-with-typescript\/24256\/17) at the end of the thread provides another possible solution\r\n* And another answer with a couple possible solutions [here.](https:\/\/forum.vuejs.org\/t\/vue-global-mixin-with-typescript\/48620\/2)","I really can't believe this nightmare for not using decorators,\r\nEven using a lot of typescript (`Vues as VueConstructor...`), It doesn't infers the types at all, and you can't access computed properties between them.\r\nThis is such a downer.\r\nThank you for you help everyone\r\n\r\n","+1 in 2021. \ud83d\ude05\r\n\r\nTL:DR for anybody else coming from Google after hours of searching:\r\n- For those expecting a fix like me. Vue.js 2  development was stopped at end of 2020.\r\n- This issue is 3 years old. [Yeah, it is](https:\/\/forum.vuejs.org\/t\/using-mixins-with-typescript\/24256?u=seupedro).\r\n- If you don't want use any hack. Yours options are: Vue 3 or class-components.\r\n\r\nHope it helps ","> +1 in 2021. \r\n> \r\n> TL:DR for anybody else coming from Google after hours of searching:\r\n> \r\n> * For those expecting a fix like me. Vue.js 2  development was stopped at end of 2020.\r\n> * This issue is 3 years old. [Yeah, it is](https:\/\/forum.vuejs.org\/t\/using-mixins-with-typescript\/24256?u=seupedro).\r\n> * If you don't want use any hack. Yours options are: Vue 3 or class-components.\r\n> \r\n> Hope it helps\r\n\r\nIt's still there in 3.0","> @baybal  \r\n> It's still there in 3.0\r\n\r\nYou mean that there are still same problems of Vetur in Vue 3.0 like in Vue 2.0?","> > @baybal\r\n> > It's still there in 3.0\r\n> \r\n> You mean that there are still same problems of Vetur in Vue 3.0 like in Vue 2.0?\r\n\r\nYes","I am still experiencing the problems described in this ticket.. :-\/\r\n\r\nMy Setup:\r\n\r\n- Vue 3.0.11\r\n- Typescript 4.3.x\r\n- Single File Components defined by using `defineComponent`\r\n\r\n```ts\r\n<template>\r\n  <div>Hello World 2<\/div>\r\n<\/template>\r\n\r\n<script lang=\"ts\">\r\n<template>\r\n  <div>Hello World 2<\/div>\r\n<\/template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue';\r\n\r\ninterface IHelloWorldObject {\r\n  helloWorld: string;\r\n}\r\n\r\ninterface IGoodbyeWorldObject {\r\n  goodByWorld: string;\r\n}\r\n\r\ninterface IData {\r\n  goodByWorld: string;\r\n  goodByWorldObject: IGoodbyeWorldObject;\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'HelloWorld',\r\n  props: {\r\n    helloWorld: {\r\n      type: String,\r\n      default: 'hello world',\r\n      validator(value: string): boolean {\r\n        return [\r\n          'hello-world',\r\n          'hello world',\r\n          'hello.world',\r\n        ].includes(value);\r\n      },\r\n    },\r\n    helloWorldObject: {\r\n      type: Object as PropType<IHelloWorldObject>,\r\n      required: true,\r\n    },\r\n  },\r\n  data(): IData {\r\n    return {\r\n      goodByWorld: 'Good By World',\r\n      goodByWorldObject: {\r\n        goodByWorld: 'Good By World Object',\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    halloWorldExtended(): string {\r\n      \/\/ Property this.helloWorldObject does not exist on type ComponentPublicInstance\r\n      return `${this.helloWorldObject.helloWorld}!`;\r\n    },\r\n  },\r\n  mounted () {\r\n    \/\/ Property this.helloWorldObject does not exist on type ComponentPublicInstance\r\n    console.log(this.helloWorldObject.helloWorld)\r\n    \/\/ Property this.helloWorldObject does not exist on type ComponentPublicInstance\r\n    console.log(this.helloWorld)\r\n    console.log(this.goodByWorld)\r\n    console.log(this.goodByWorldObject.goodByWorld)\r\n  }\r\n});\r\n<\/script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped><\/style>\r\n```\r\n\r\nI typed all return types of methods in computed \/ data. Typescript still says, that props being used in a method in computed \/ lifecycle \/ methods do not exist.. \r\n\r\n### Update\r\nIt turned out, that the problem was the way, how my prop validator is written:\r\n\r\n- `validator(value: string) {` => props not defined when using in computed \/ lifecycle methods\r\n- `validator: (value: string) => {` => props all working when using in computed \/ lifecycle methods\r\n\r\nAfter I figured it out, I have found other tickets describing this issue: \r\n- https:\/\/github.com\/vuejs\/vue-next\/issues\/2474\r\n- https:\/\/github.com\/vuejs\/vue-next\/issues\/2738#issuecomment-795080280\r\n- https:\/\/github.com\/vuejs\/vue\/issues\/8679","\r\n> > I'll have to create a interface method for each mixins i use ? Even imported from external libraries ?\r\n> \r\n> It's not ideal, but it's the only way I got it to work.\r\n\r\nMy problem is the same. Through the computed of mixins, I can't find its declaration on the component.\r\n\r\nSo is there a better solution now?","Adding a type to all computed properties fixed it here.","I had the same error after adding head() section to nuxt vue page. After adding return type :any to head, the error disappeared. Maybe this will be helpful to somebody.\r\n\r\nhead(): any {","I encountered this issue when trying to import non-ts component and use it inside ts component. Tried every fix and finally got it work by rewrite the imported component with ts. This might be useful for people migrating to ts.","https:\/\/github.com\/vuejs\/vue\/issues\/8721#issuecomment-671060954\r\nworks for me as well! Thanks!\r\n<img width=\"903\" alt=\"Screenshot 2021-11-25 at 10 29 22\" src=\"https:\/\/user-images.githubusercontent.com\/74208065\/143406372-9f5b6991-1f4f-44ad-b18e-a5c3178ad6ba.png\">\r\n<img width=\"586\" alt=\"Screenshot 2021-11-25 at 10 30 05\" src=\"https:\/\/user-images.githubusercontent.com\/74208065\/143406381-e25be511-b52b-4f29-ba1e-b0d2af56049a.png\">\r\n\r\n\r\n","I have a somehow related type error as soon as switching from `2.7.10` to `2.7.11`:\r\n\r\nIn my case, the error `Property 'getCompleteConfigs' does not exist on type 'CreateComponentPublicInstance...` appears when calling methods defined via options API, e.g. `this.myMethod()`. I could **workaround** this in some cases by changing `data() { ...` to `data: () =>`. In this case, the type is correctly inferred. However, when I want to access the props in data and I need to change to `data: (vm) => vm.myProp` the inference is also broken.\r\n\r\nThe exact same problem appear in the IDE when using Volar (https:\/\/github.com\/johnsoncodehk\/volar\/issues\/1996#issuecomment-1275832609).","## Maybe you haven't turned on the `\"strict\": true`  in your tsconfig.json\r\n\r\nThis is my demo code\r\n\r\n```js\r\nimport { defineComponent } from 'vue';\r\n\r\nexport default defineComponent({\r\n  data() {\r\n    return {\r\n      type: 1,\r\n      haha: 1,\r\n    };\r\n  },\r\n  methods: {\r\n    hello() {\r\n\r\n    },\r\n    world() {\r\n      this;\r\n    },\r\n  },\r\n});\r\n```\r\n\r\n## Before I turned on the \"strict\" config, I got this\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/31957758\/205857572-5093c254-ecee-49f0-a625-09f3ef6a8480.png)\r\n\r\n## After that I got\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/31957758\/205856278-21fc56b7-5916-4b77-8fea-dff8eac386e6.png)\r\n\r\n","We can't turn on strict mode yet. However, we migrated to Vue 3 in the meantime. From our side this issue is not relevant anymore."],"labels":["typescript"]},{"title":"Vue.component doesnt except argument of type `Component`","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/8z04jxj3y8](https:\/\/codesandbox.io\/s\/8z04jxj3y8)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n- Click repro link\r\n- Open test.ts\r\n- See type errors\r\n- Uncomment vue type augmentation to see errors disappear\r\n\r\n\r\n### What is expected?\r\nI can pass any component to `Vue.component`\r\n\r\n### What is actually happening?\r\nType error:\r\n```\r\nArgument of type 'Component<DefaultData<never>, DefaultMethods<never>, DefaultComputed, Record<string, any>>' is not assignable to parameter of type 'ComponentOptions<Vue, DefaultData<Vue>, DefaultMethods<Vue>, DefaultComputed, PropsDefinition<Rec...'.\r\n  Type 'VueConstructor<Vue>' is not assignable to type 'ComponentOptions<Vue, DefaultData<Vue>, DefaultMethods<Vue>, DefaultComputed, PropsDefinition<Rec...'.\r\n    Value of type 'VueConstructor<Vue>' has no properties in common with type 'ComponentOptions<Vue, DefaultData<Vue>, DefaultMethods<Vue>, DefaultComputed, PropsDefinition<Rec...'. Did you mean to call it?\r\n```\r\n\r\n---\r\nAdding the following overload to `Vue.component` will fix it:\r\n```ts\r\n    component<Data, Methods, Computed, Props>(\r\n      id: string,\r\n      definition: Component<Data, Methods, Computed, Props>,\r\n    ): ExtendedVue<V, Data, Methods, Computed, Props>;\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This is because `Component` type is a union type with `VueConstructor` and `ComponentOptions`.\r\n\r\nWhy do you use `Component` type? It means your `getComponent` function can return both Vue constructor and component options object.\r\nI think you should use more concrete type such as `VueConstructor` or `ComponentOptions` as the return type.","Because the function loads components via webpacks require.context. Also there is a EsModule type for async comps that hints against Component. There is also a Vue.component overload foreach member type of the Component union. I think that is just a problem of typescript not being able to check that correctly.","Another indicator for this being a ts problem is that the following works:\r\n```ts\r\nconst comp: Component = {};\r\nVue.component('test', comp);\r\n```","well, `{}` is a valid component","ofc it is. that is not the point. but then TS somehow finds the correct `Vue.component` overload:\r\n\r\n```ts\r\n\/\/ type Component = typeof Vue | ComponentOptions | FunctionalComponentOptions;\r\n\r\nconst first = {};\r\nconst firstComponent: Component = first;\r\nVue.component('first', first); \/\/ ok\r\nVue.component('firstComponent', firstComponent); \/\/ ok\r\n\r\nconst second = { functional: true };\r\nconst secondComponent: Component = second;\r\nVue.component('second', second); \/\/ ok\r\nVue.component('secondComponent', secondComponent); \/\/ ok\r\n\r\nconst third = Vue.extend({});\r\nconst thirdComponent: Component = third;\r\nVue.component('thrid', third); \/\/ ok\r\nVue.component('thirdComponent', thirdComponent); \/\/ ok\r\n\r\ndeclare function getComponent(): Component;\r\nconst final: Component = getComponent();\r\nVue.component('final', final); \/\/ type error\r\n```\r\n\r\nIt is a typescript problem. TS seems like it doesnt allow multiple overloads to match (what the final case is requiring).","here is a plain typescript example demonstrating the problem:\r\n```ts\r\ninterface A {\r\n  a: string;\r\n}\r\ninterface B {\r\n  b: string;\r\n}\r\ninterface C {\r\n  c: string;\r\n}\r\ntype union = A | B | C;\r\ndeclare function acceptsUnion(x: A): void;\r\ndeclare function acceptsUnion(x: B): void;\r\ndeclare function acceptsUnion(x: C): void;\r\ndeclare function returnsUnion(): union;\r\nacceptsUnion(returnsUnion()); \/\/ type error\r\n```","I see your use case. I'm not sure that union type sometimes passes overload but we can replace fallback overload of `component` method with `Component` type.","any update on this?\r\n\r\ni am using the following `vue.d.ts` in my projects, which solves the type problem according to @ktsn proposed solution:\r\n```ts\r\nimport Vue, { Component } from 'vue';\r\nimport { ExtendedVue } from 'vue\/types\/vue';\r\n\r\ndeclare module 'vue\/types\/vue' {\r\n  interface VueConstructor<V extends Vue = Vue> {\r\n    component<Data, Methods, Computed, Props>(\r\n      id: string,\r\n      definition: Component<Data, Methods, Computed, Props>,\r\n    ): ExtendedVue<V, Data, Methods, Computed, Props>;\r\n  }\r\n}\r\n\r\n```"],"labels":["typescript"]},{"title":"transitionend event isn't fired on element inside <transition> when leaving","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/guanzo\/xcLk083u\/1\/](https:\/\/jsfiddle.net\/guanzo\/xcLk083u\/1\/)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\n1. Open reproduction demo in a non-Chrome browser.\r\n2. Attach `transitionend` listener to the component root $el. (It can be on any element, doesn't matter)\r\n3. Transition out a child element with `<transition>` and `v-if`.\r\n4. Listener callback isn't fired.\r\n\r\n### What is expected?\r\nThe transitionend event is fired in all browsers.\r\n\r\n### What is actually happening?\r\nThe transitionend event is only fired in Chrome.\r\n\r\n---\r\nMy use case does NOT allow me to use the template, therefore I cannot use the <transition> javascript hooks, such as `leave` and `afterLeave`.  Regardless, this is inconsistent behavior and should be figured out. Is vue stopping the propagation of the event somehow?\r\n\r\nFor a complete context of the use case, read this issue: https:\/\/github.com\/guanzo\/vue-smooth-reflow\/issues\/3\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Doesn't show for me in chrome either, v68.0.3440.106 on windows 10. Adding `mode=\"out-in\"` fixes it for chrome, but not firefox or edge. ","Weird. Works for me, v68.0.3440.106 (Official Build) (64-bit) on windows 10. ","Seems to be related to the element being removed from the dom"],"labels":["transition"]},{"title":"Cache access to process.env","body":"### What problem does this feature solve?\r\nAccess to `process.env` is a slow, system-bound call.\r\n\r\nAfter react restructured their project to cache access to `process.env`, they had a 2.4x - 3.8x performance improvement for server-side rendering,\r\n\r\nhttps:\/\/github.com\/facebook\/react\/issues\/812\r\n\r\nThis should also be done for vue, vue-server-renderer, vuex ... anything that accesses `process.env`.\r\n\r\n### What does the proposed API look like?\r\nAn easy strategy might be to replace references to `process.env.NODE_ENV` with a reference to a singleton that checks process.env.NODE_ENV.\r\n\r\n```\r\n\/\/ foo.js\r\nif (process.env.NODE_ENV !== 'production') {\r\n  \/\/ do stuff\r\n}\r\n```\r\n\r\nbecomes\r\n\r\n```\r\n\/\/ isDevEnv.js\r\nexport default process.env.NODE_ENV !== 'production';\r\n\r\n\/\/ foo.js\r\nimport isDevEnv from '.\/isDevEnv';\r\n\r\nif (isDevEnv) {\r\n  \/\/ do stuff\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["feature request"]},{"title":"Property 'X' does not exist on type CombinedVueInstance using TypeScript   Prop Validator","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/muhammadrehansaeed\/pen\/XPWKyJ](https:\/\/codepen.io\/muhammadrehansaeed\/pen\/XPWKyJ)\r\n\r\n\r\n\r\n\r\n\r\n### Steps to reproduce\r\nUse Typescript to build this component:\r\n\r\n```\r\nexport default Vue.extend({\r\n  props: {\r\n    delay: {\r\n      default: 600,\r\n      type: Number,\r\n      validator: function(value: number) {\r\n        return value >= 0;\r\n      }\r\n    },\r\n    minValue: {\r\n      default: 0,\r\n      type: Number\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      valueInternal: 0\r\n    };\r\n  },\r\n  methods: {\r\n    reset(): void {\r\n      this.valueInternal = this.minValue; <----THIS LINE ERRORS\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n### What is expected?\r\nThe component builds.\r\n\r\n### What is actually happening?\r\nThe following error is thrown:\r\n\r\n```\r\nProperty 'minValue' does not exist on type 'CombinedVueInstance<Vue, { isVisibleInternal: boolean; valueInternal: number; }, { reset(): void; }, {}, Readonly<{}>>'.\r\nmethods: {\r\n  reset(): void {\r\n    this.valueInternal = this.minValue;\r\n                                               ^\r\n  }\r\n}\r\n````\r\n\r\nIf I remove the validator from the prop, the error goes away. If I remove the data section, the error also goes away.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Typescript bug? `validator: (value: number) =>  value >= 0` also removes the error. ","@KaelWD That works! But why?","\u00af\\\\\\_(\u30c4)\\_\/\u00af\r\n\r\nThey both have the same type signature, so no idea. I'd try to reproduce it without vue and open an issue on https:\/\/github.com\/Microsoft\/TypeScript","if you do\r\n```typescript\r\n    delay: {\r\n      default: 600,\r\n      type: Number ,\r\n      validator(value:number){\r\n        return value >= 0;\r\n      }\r\n    } as PropOptions<number>\r\n```\r\n\r\nseems to be working, typescript seems not picking up the type","Ran into this issue yesterday and @pikax suggestion fixed this for me. I didn't know about `PropOptions<Type>`.","I had this happen with a Date prop.  If I had just the type, it was ok:\r\n```\r\n date: {\r\n    type: Date\r\n}\r\n```\r\nBut when I added a default value, everything broke in the component:\r\n```\r\n date: {\r\n    type: Date,\r\n    default: () => new Date()\r\n}\r\n```\r\nUnless you cast the object like mentioned above:\r\n```\r\n date: {\r\n    type: Date,\r\n    default: () => new Date()\r\n} as PropOptions<Date>\r\n```\r\n For anyone googling the seemingly unrelated error, you will get this for every property in your component:\r\n> Property 'Name' does not exist on type 'CombinedVueInstance<Vue, object, object, object, Record<never, any>>' Vetur(2339)","```\r\nimport {PropOptions} from 'vue';\r\n\r\n date: {\r\n    type: Date,\r\n    default: () => new Date()\r\n} as PropOptions<Date>\r\n```\r\n\r\nleads to eslint error\r\n```\r\n  11:13  error  'PropOptions' is defined but never used  no-unused-vars\r\n```\r\n\r\nbut I do not want to switch off `no-unused-vars` rule. what should I do?\r\n```\r\nparserOptions:\r\n    parser: \"@typescript-eslint\/parser\"\r\n    ecmaVersion: 8\r\n    sourceType: module\r\n\r\nplugins:\r\n    - \"@typescript-eslint\"\r\n\r\nextends:\r\n    - 'eslint:recommended'\r\n    - 'plugin:vue\/strongly-recommended'\r\n    - 'plugin:@typescript-eslint\/recommended'\r\n```","> ```\r\n> import {PropOptions} from 'vue';\r\n> \r\n>  date: {\r\n>     type: Date,\r\n>     default: () => new Date()\r\n> } as PropOptions<Date>\r\n> ```\r\n> \r\n> leads to eslint error\r\n> \r\n> ```\r\n>   11:13  error  'PropOptions' is defined but never used  no-unused-vars\r\n> ```\r\n> \r\n> but I do not want to switch off `no-unused-vars` rule. what should I do?\r\n> \r\n> ```\r\n> parserOptions:\r\n>     parser: \"@typescript-eslint\/parser\"\r\n>     ecmaVersion: 8\r\n>     sourceType: module\r\n> \r\n> plugins:\r\n>     - \"@typescript-eslint\"\r\n> \r\n> extends:\r\n>     - 'eslint:recommended'\r\n>     - 'plugin:vue\/strongly-recommended'\r\n>     - 'plugin:@typescript-eslint\/recommended'\r\n> ```\r\n\r\ntry `import type` its avalible on newer ts versions"],"labels":["typescript"]},{"title":"<transition> \u5728 UIWebView\u548cWKWebView \u4e2d\u6ca1\u6709\u8d77\u4f5c\u7528","body":"### Version\r\n2.5.17\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/50wL7mdz\/608590\/](https:\/\/jsfiddle.net\/50wL7mdz\/608590\/)\r\n\r\n### Steps to reproduce\r\n\u8fd9\u6bb5\u4ee3\u7801\u5728\u6d4f\u89c8\u5668\u548c\u5b89\u5353\u4e2d\u90fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\uff0c\u4f46\u662f\u5728UIWebView\u548cWKWebView\u4e2d\u4e0d\u53ef\u4ee5\r\n\r\n### What is expected?\r\ntoast \u80fd\u591f\u4ece\u5e95\u90e8\u52a8\u6001\u6ed1\u51fa\r\n\r\n### What is actually happening?\r\n0.3s\u540e\uff0c\u76f4\u63a5\u663e\u793a\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Can't reproduce with iOS 11 & the [WebView](https:\/\/itunes.apple.com\/cn\/app\/webview-wkwebview-and-uiwebview-rendering\/id928647773?mt=8) app","\u5728UIWebView\u53ef\u80fd\u662f\u56e0\u4e3a300ms\u5ef6\u65f6\u5bfc\u81f4","\u8fdb\u4e00\u6b65\u4f7f\u7528\u4e2d\u53d1\u73b0\uff0c\u5f53webview\u6253\u5f00\u4e00\u6bb5\u65f6\u95f4\u4ee5\u540e\uff0c\u591a\u6b21\u64cd\u4f5c\uff0ctransition\u52a8\u753b\u8868\u73b0\u8d8a\u6765\u8d8a\u5dee\uff0c\u7ecf\u5e38\u52a8\u753b\u4e0d\u8fde\u8d2f\uff0c\u6700\u540e\u52a8\u753b\u6548\u679c\u5b8c\u5168\u6ca1\u6709\u3002\r\n\u4e0d\u77e5\u9053\u662f\u5426\u548c\u6027\u80fd\u6709\u5173\u3002\r\n\u6709\u4e00\u4e2a\u7279\u70b9\u662f\uff0c\u5982\u679c\u6211\u628a\u52a8\u753b\u65f6\u95f4\u5ef6\u957f\uff0c\u6bd4\u598210s\uff0ctransition\u4ecd\u6709\u6548\u679c\uff0c\u53ea\u662f\u5728\u52a8\u753b\u5feb\u7ed3\u675f\u65f6\uff0c\u7a81\u7136\u8df3\u8fc7\u4e2d\u95f4\u52a8\u753b\u8fc7\u7a0b\uff0c\u76f4\u63a5\u7ed3\u675f","\u4e0a\u8ff0\u4ee3\u7801\u4ecd\u7136\u65e0\u6cd5\u590d\u73b0\u4f60\u8bf4\u7684\u6548\u679c\uff0c\u8bf7\u63d0\u4f9b\u6b63\u786e\u7684\u590d\u73b0\u4ee3\u7801\u3002","![10 -30-2018 15-14-38](https:\/\/user-images.githubusercontent.com\/11312811\/47702471-f5dd8100-dc57-11e8-8998-a3386fba8c7a.gif)\r\n\u8fd9\u4e2a\u662ftransition-duration\u4e3a3s\r\n![10 -30-2018 15-26-25](https:\/\/user-images.githubusercontent.com\/11312811\/47702537-34733b80-dc58-11e8-9a66-9a01719f7428.gif)\r\n\u8fd9\u4e2a\u662ftransition-duration\u4e3a0.3s\r\n\u8bf7\u95ee\u4f60\u662f\u600e\u4e48\u91cd\u73b0\u7684\uff0c\u80fd\u5426\u7528\u7c7b\u4f3cteamview\u7684\u5de5\u5177\u7ed9\u4f60\u770b\u4e0b","@ZiQiangWang \r\n\r\n\u4f60\u53d1\u7684\u52a8\u56fe\u548c\u4f60 issue \u91cc\u7684 JSFiddle \u5bf9\u5e94\u4e0d\u4e86\u554a\u3002","![10 -30-2018 15-48-18](https:\/\/user-images.githubusercontent.com\/11312811\/47703485-676afe80-dc5b-11e8-9802-78b53a2c26f6.gif)\r\n![10 -30-2018 15-48-53](https:\/\/user-images.githubusercontent.com\/11312811\/47703491-69cd5880-dc5b-11e8-8631-feeb2b5e5fad.gif)\r\n\u6211\u7528codepen\u91cd\u65b0\u505a\u4e86\u4e0b\uff0c\u5730\u5740\uff1ahttps:\/\/codepen.io\/ziqiangwang\/pen\/jeoVWG","ios\u90a3\u8fb9\u4f7f\u7528NSURLProtocol\u5bfc\u81f4\u4e86\u5f53\u524d\u95ee\u9898\uff0c\u4f46\u662f\u5177\u4f53\u4ec0\u4e48\u539f\u56e0\u8fd8\u4e0d\u4e86\u89e3 @sodatea @Justineo ","\u6211\u4eec\u4e5f\u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u51fa\u73b0\u95ee\u9898\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5ba2\u6237\u7aef\u505a\u4e86\u622a\u5c4f\u64cd\u4f5c\uff0c\u622a\u5c4f\u64cd\u4f5c\u4e4b\u540e\uff0c\u8fd9\u4e2a\u52a8\u753b\u5c31\u4f1a\u5230\u7ed3\u5c3e\u7684\u65f6\u5019\uff0c\u4e00\u4e0b\u5b50\u5c31\u7ed3\u675f\u4e86\uff0c\r\n\/\/ \u5b58\u5728\u95ee\u9898\u7684\u622a\u5c4f\u65b9\u5f0f\r\n[DMAPPDELEGATE.window drawViewHierarchyInRect:DMAPPDELEGATE.window.frame afterScreenUpdates:YES];\r\n\/\/ \u4fee\u6539\u540e\u7684\u622a\u5c4f\u65b9\u5f0f\r\n[DMAPPDELEGATE.window.layer renderInContext:UIGraphicsGetCurrentContext()];"],"labels":["need repro"]},{"title":"(fix #8337) test(component-slot): new child vnode gets destroyed instead of old one","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [x] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\nI'm not confident in the quality of the fix (whether it's addressing the bug directly or indirectly) but deep-cloning the vnode in `createElm` when a vnode used in a previous render is encountered seems to fix the bug.\r\n\r\nIn any case, a test has been added to repro the bug.","comments":["Not sure what's up with the failed lint-flow-type test since I didn't touch the file it's throwing an error at\r\n\r\n_Edit:_ Looks like [this direct commit](https:\/\/github.com\/vuejs\/vue\/commit\/3d36a443c755bf16f2656a8595dda9076f021a4a) bypassed the test"],"labels":["in review"]},{"title":"Typescript - Component's property types are not correct","body":"### Version\r\nVuejs: 2.5.16\r\nTypescript: 2.8.1\r\n\r\n### Reproduction link\r\n[https:\/\/stackblitz.com\/edit\/typescript-rrnw8z?file=index.ts](https:\/\/stackblitz.com\/edit\/typescript-rrnw8z?file=index.ts)\r\n\r\n### Steps to reproduce\r\n- Use typescript\r\n- Create a component with at least one property\r\n\r\n### What is expected?\r\nIf your property of type `X` is not required, its type should be `X | undefined`\r\n\r\n### What is actually happening?\r\nIf your property of type `X` is not required, its type is still `X`\r\n\r\n---\r\nMore dangerous: The properties are not required by default and you can easily write code that will fail at runtime.\r\n\r\nNote: The stackblitz above won't show the error because the types are not correctly assumed and `this` is assumed as `any`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["https:\/\/github.com\/vuejs\/vue\/issues\/6901#issuecomment-339054776","Will this issue be fixed in Vue 3.x ? \r\nOr how to correct it with TS 3.4+ ? \ud83d\ude15 "],"labels":["typescript"]},{"title":"Slots with only comments use fallback instead","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/sg0bkLhv\/7\/](https:\/\/jsfiddle.net\/sg0bkLhv\/7\/)\r\n\r\n### Steps to reproduce\r\n* Register a component with a slot\r\n* Use the component in a Vue instance with comments=true, filling the slot with only HTML comment(s)\r\n\r\n### What is expected?\r\nThe HTML comment is rendered into the slot.\r\n\r\nThis could be a breaking \"fix\" for someone who is running with comments=true and still relying on this behavior. If the current behavior is kept, I think it should at least be documented.\r\n\r\n### What is actually happening?\r\nThe HTML comment is discarded and the slot uses its fallback content instead.\r\n\r\nIf any other content is provided together with the HTML comment, all content is kept.\r\n\r\n---\r\nI am developing for a CMS which uses HTML comments to provide its editing capabilities. It has the concept of \"areas\", which are similar to Vue's slots, so it would be handy to render areas into slots. An empty area (e.g. in a newly created page) consists solely of an HTML comment. Since the comment is stripped by Vue, the editing tools are not available.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Try to use a variable instead of a string inside the `<my-component><\/my-component>`.\r\nSee this example: https:\/\/jsfiddle.net\/sg0bkLhv\/90\/","Thanks, @webther! It does seem to cover some cases: https:\/\/jsfiddle.net\/wz5y3svp\/.\r\n\r\nHowever, it has some problems as well:\r\n\r\n* v-html does not accept direct string input, but instead goes looking for data or props in the parent component. I think parents should not have to be aware of the contents of their children.\r\n* v-html will also not work when the content includes other Vue components, since it is inserted as raw HTML instead of being compiled. Using a slot instead work since the comment is no longer on its own in this case, but it is again not nice to have to inspect content from outside the component.","If you want to use the inline html string, I think you should encode the html tags like this:\r\n`\r\n<my-component>\r\n  &lt;!-- kept --&gt;\r\n<\/my-component>\r\n`\r\nSee the example: https:\/\/jsfiddle.net\/wz5y3svp\/3\/","It should still be treated as an HTML comment, not rendered as text. The second example renders correctly but relies on a data property in the parent instead of allowing text to be rendered directly into the template (server side, pre-Vue).\r\n\r\nOur workaround for now is to append `<div style=\"display: none;\">` when we detect an empty area. This is not amazing as it requires code in every affected template (and may affect styling), but since it at least *works*, I am more interested in seeing whether this behavior is a bug or intended.","This is a problem for me. Wasted some time trying to figure out why my application stopped working. It was due comment as a slot..."],"labels":["improvement"]},{"title":"Error thrown when using transition-group with conditionally rendered children","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/riophae\/pen\/EpgWdZ](https:\/\/codepen.io\/riophae\/pen\/EpgWdZ)\r\n\r\n### Steps to reproduce\r\n1. Open the pen and it shows 1, 3, 5\r\n2. Click the button\r\n\r\n### What is expected?\r\nIt should show 3, 5\r\n\r\n### What is actually happening?\r\nGot this error in console:\r\n\r\n```\r\n[Vue warn]: Error in render: \"TypeError: c$1.elm.getBoundingClientRect is not a function\"\r\n\r\nfound in\r\n\r\n---> <TransitionGroup>\r\n       <Root>\r\n\r\nTypeError: c$1.elm.getBoundingClientRect is not a function\r\n   at Proxy.render (VM643 vue.js:8383)\r\n   at VueComponent.Vue._render (VM643 vue.js:4535)\r\n   at VueComponent.updateComponent (VM643 vue.js:2788)\r\n   at Watcher.get (VM643 vue.js:3140)\r\n   at Watcher.run (VM643 vue.js:3217)\r\n   at flushSchedulerQueue (VM643 vue.js:2981)\r\n   at Array.<anonymous> (VM643 vue.js:1839)\r\n   at MessagePort.flushCallbacks (VM643 vue.js:1760)\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["The transition try to modify an element from the v-for that is not rendered because of the v-if. You can use v-show instead of v-if to render the element. The best solution for me would be to filter the list in a computed property and give the filtered list in your v-for.","@maxirozay Hi Maxime, thanks for your reply.\r\n\r\nMy actual use case is that, I was not rendering a list inside `<transition-group \/>`, but some different components . And I was not using template but JSX. So there is no `v-if` or `v-show`. I was conditionally rendering the children using `if` statement in the child component's render function. When I didn't want to show the compent, I returned `null` in its return function. So I should try change that to set `display: none`.\r\n\r\nBut I still think it would be better for Vue to be able to handle cases like mine, since my code is very normal and not doing anything wrong :) Anyway, with `display: none` it should work.","You're welcome Fangzhou.\r\n\r\n`display: none` should work. But if you still have a `v-for` with a list the best solution is still to filter the list then give the filtered list to your `v-for`. Then in your JSX component you only care about rendering the component and never return null.\r\n\r\nYes that is weird that transition-group is trying to transition something that doesn't exist but it can be easily avoided. Maybe somebody who knows more about that can look at it.","what is `c$1.elm.getBoundingClientRect is not a function`?\r\nDid you fix?","@shinriyo See: https:\/\/github.com\/vuejs\/vue\/blob\/504d5da7eff1c77117c2f57b0c4238e56de80fc5\/src\/platforms\/web\/runtime\/components\/transition-group.js#L80","Any update?","i have the same issue","I am having the same issue but with `v-show` on 2.6.10","@selfagency This issue is almost 1.5 years old and using v-show was established as a workaround.\r\n\r\nSo if you have the same issue now, 1.5 years later, but with v-show, it might be a good idea to \r\n\r\n1. Open a new issue\r\n2. Provide runnable code that demonstrates the problem. \r\n\r\nOtherwise you will likely not get helpful feedback.","@LinusBorg I figured out my issue\u2014\r\n\r\nIn my component, I was trying to alternate between two global components using `v-show`. My guess was that the subcomponent needed to render before trying to attach an event to it, and there was a race condition preventing it from doing so.  So, I wrapped the global components in `div` tags and put the `v-show` on those, and then my problem was solved. Could this possibly also be resolved by using an async component?\r\n\r\n**Before (throws error)**\r\n```html\r\n<transition-group name=\"zoom\" mode=\"out-in\"> \r\n  <inline-svg v-show=\"modal\" key=\"close\" :src=\"close\" width=\"25\" height=\"25\"><\/inline-svg>\r\n  <inline-svg v-show=\"!modal\" key=\"open\" :src=\"open\" width=\"25\" height=\"25\"><\/inline-svg>\r\n<\/transition-group> \r\n```\r\n\r\n**After (no error)**\r\n```html\r\n<transition-group name=\"zoom\" mode=\"out-in\">\r\n  <div v-show=\"modal\" key=\"close\">\r\n    <inline-svg :src=\"close\" width=\"25\" height=\"25\"><\/inline-svg>\r\n  <\/div>\r\n  <div v-show=\"!modal\" key=\"open\">\r\n    <inline-svg :src=\"open\" width=\"25\" height=\"25\"><\/inline-svg>\r\n  <\/div>\r\n<\/transition-group>\r\n```\r\n\r\nI hope this helps others.","PR which would fix this issue: #11128 ","For me, I just wrapped my custom elements with `div`s and applied the `v-if` statements on those `div`s","Make sure all child elements have a unique `key` attribute. Also be careful if you are rendering fragments inside."],"labels":["transition"]},{"title":"Possible memory leak when v-for in development mode","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/anon\/pen\/KBMaOY](https:\/\/codepen.io\/anon\/pen\/KBMaOY)\r\n\r\n### Steps to reproduce\r\n- Open the codepen https:\/\/codepen.io\/anon\/pen\/gjMgzG\r\n- Click a couple of times to list 0 item, then 1000\r\n- See the memory increasing\r\n- Try force GC (trash icon) before measure it\r\n- Take heap snapshots in Chrome \"Memory\" tab\r\n- Watch the memory usage in the Chome task manager (shift   esc)\r\n- Watch the memory usage in OS task manager\r\n\r\n### What is expected?\r\nSame memory usage after garbage collector\r\n\r\n### What is actually happening?\r\nDespite the \"Performance\" tab displays the same memory usage, the \"Memory\" heap snapshot displays a memory increase.\r\nAlso, the both Chrome and OS task managers show the memory only increasing.\r\n\r\n---\r\nIt get worse when:\r\n- Using Vuei18n (even without translating)\r\n- Having big children components\r\n\r\nTested on:\r\n- Windows 7 64 Bits\r\n- Chrome 67.0.3396.99 64 bits\r\n\r\nPlease, consider that:\r\n- I may be doing something wrong\r\n- It can be a Chrome issue\r\n- It can be an OS issue\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["It seems there is a leak in non-production mode only. You should be fine in production","Thanks for the return @posva .\r\n\r\nI also created an issue on vue-i18n, since the memory usage gets way too heavy when using it.\r\nI'm using vue-virtual-scroller too, which do destroy and create a lot for components when paginate or scroll the page.\r\n\r\nI don't know how much these can be related, but these two packages together with some complex or deeper components structure are taking a lot of memory usage even on production mode.\r\n\r\nLooking into Google task manager, my app tab increases by ~2.400K each item I scroll down\/up (each one is destroyed\/created in the processes).\r\nIn less than a minute scrolling up and down I get get almost 1GB memory usage, production mode or developer tools closed or after GC. And it doesn't go much down after route.\r\n\r\nI'm not used to the core code of vue or vue-i18n, but It looks like the installed components structure are getting copied for each nested component in the app, and the GC can't clean that up after destroy that nested components. It can be the way vue-i18n installs itself, I really don't know. The data below is what makes me think about that:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/1561360\/42843561-d694731c-89e6-11e8-9ff5-49fcdaa94805.png)\r\n","I have the same issue, any advance about this?"],"labels":["improvement"]},{"title":"When a getter is defined that does not define a setter, no recursive reactive is made.","body":"### Version\r\n2.5.17-beta.0\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/ts0307\/pd8zr3sk\/](https:\/\/jsfiddle.net\/ts0307\/pd8zr3sk\/)\r\n\r\n### Steps to reproduce\r\nRun JSFiddle snippet\r\n\r\n### What is expected?\r\nI expect, the result is shown as {\"bar\": \"b\"} instead of {\"bar\": \"a\"}\r\n\r\n### What is actually happening?\r\n  if ((!getter || setter) && arguments.length === 2) {\r\n    val = obj[key]\r\n  }\r\n\r\n  let childOb = !shallow && observe(val)\r\n\r\nMy example is that the data object defines that the getter does not define a setter, causing the above judgment to fail, val is not evaluated, and no recursive reactive is made.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["FYI:  Ignoring getters was done on purpose due to #7280.  I added an exception for getter\/setter pairs in #7828 to fix my own use case.  I don't know whether ignoring pure getters is right or not, but either way it's clear that somebody will be unhappy.","It seems that it is difficult to be compatible with all use cases.","@ts0307 if a getter is defined, proving that the property is an accessor property. If an accessor property does not have a setter, that means the property cannot be set new Value, thus there is no need to make it be recursive reactive.","why not?\r\nlet childOb = !shallow && observe(val) -->\r\nget: function reactiveGetter () { const value = getter ? getter.call(obj) : val; childOb = !shallow && observe(value);"],"labels":["has workaround"]},{"title":"Component scope attribute is lost when conditionally rendering root node","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/5vj19q8yk](https:\/\/codesandbox.io\/s\/5vj19q8yk)\r\n\r\n### Steps to reproduce\r\n1. observe that text is green\r\n2. click two times on checkbox to trigger slot's hide and show cycle\r\n\r\n\r\n### What is expected?\r\n3. text should still be green\r\n\r\nIn other words, the toggled `div` should have `GreenSlot`'s `data-v` attribute applied\r\n\r\n### What is actually happening?\r\n3. observe that text is red\r\n\r\nIn other words, the toggled `div` doesn't have correct `data-v` applied.\r\n\r\n---\r\nAlso tested on beta, issue persists.\r\n\r\nIn my use-case, I cannot trivially replace it with external `v-if`, as the component that does the toggling contains important internal logic that decides if it should be shown or not. It's not just a simple prop.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["As a workaround make sure to always have a node for the ConditionalSlot component (`<div v-else\/>`)\r\nBut I'm not sure it should be green actually, why would the style of the wrapper component leak into the slot that was written in the parent?","That's because the `<slot>` is also a part of component, so it receives it's scope. In the case from the example, it ends up being the `div` with \"I should be green\" text directly. In fact, this `div` is a node present in all `App`, `GreenSlot` and `ConditionalSlot` components at the same time."],"labels":["has workaround"]},{"title":"Add a global Vue.depTarget api support","body":"Add a global Vue.depTarget api\r\nEnable vuex to use the same domain name across windows\r\nCross-window includes window.open and iframe\r\n\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [X] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [X] Other, please describe:Add a global Vue.depTarget api support\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [X] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [X] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [X] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n[Resolved demo:vuex-open-window.zip](https:\/\/github.com\/vuejs\/vue\/files\/2187013\/vuex-open-window.zip)\r\n```shell\r\nunzip vuex-open-window.zip\r\ncd vuex-open-window\r\nnpm i\r\nnpm run dev\r\nopen \"http:\/\/127.0.0.1:8080\"\r\n```\r\n\r\n![gif5](https:\/\/user-images.githubusercontent.com\/11555571\/42612461-0dc7770c-85ce-11e8-86d4-5bd317ee922e.gif)\r\n\r\n\r\n\r\n[more-nuxt-issues-unsolved](https:\/\/cmty.app\/nuxt\/nuxt.js\/issues\/c7367)","comments":["To support the point\r\n\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d","\u4fe1\u606f\u592a\u7b80\u7565\u4e86\uff0c\u8bf7\u7528\u4e2d\u6587\u5b8c\u6574\u5730\u89e3\u91ca\u8fd9\u4e2a PR \u7684\u9700\u6c42\u573a\u666f\u3002","\u7528\u4f8b\u6211\u660e\u767d\u4e86\uff0c\u6709\u65f6\u95f4\u6211\u4f1a\u770b\u7684\uff0c\u4e0d\u8981\u8001\u662f at \u6211\u3002","There's no guarantee that this feature will be accepted so you'd better not make this pull request a blocking issue for your real project.\r\n\r\nAnd BTW, it's really impolite to pinging others all the time, especially when Evan already asked you not to.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/1726061\/42981419-9ccc95d6-8c0e-11e8-9eaa-8aa176077c33.png)\r\n","\ud83d\ude42"],"labels":["in review","semver:minor"]},{"title":"Vue.compile should return the errors which happens during compilation even in prod env","body":"### What problem does this feature solve?\r\nI am building a VueJS frontend where templates are coming from a backend where end users contributed them in a CMS or something else. VueJS is bundled with esm in order to have the Vue.compile method.\r\n\r\nWhen I run Vue.compile with the template string coming from the backend, I have no way to know if a compilation error occured in order to display a message to the user. In development I just have the warn messages in the console.\r\n\r\n### What does the proposed API look like?\r\nVue.compile could return an error boolean in an attribute or an array of all errors that occured during compilation.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Vue already does that. If it's failing at some specific scenario it shouldn't be failing at, please provide a repro","@posva  : I don't think it does. `Vue.compile` just returns an object like this : \r\n\r\n```\r\n{\r\n    render: function() { .... },\r\n    staticRenderFns: []\r\n}\r\n```\r\n\r\nThere is no indication that compilation had error. Just the warn message in dev environment.","oh, indeed the errors are not returned as I thought","Was this every addressed?, or is there a way to detect compilation errors, namely more than oen parent node?","I just got bit by this, loading up templates that I $mount().$el.outerHTML to get the rendered output of for pasting templated data into emails.\r\n\r\nIs there no method for obtaining the actual errors, Vue itself must do it somehow i would assume it uses the same .compile to compile the  inline templates. I had to paste the template into a mockup to get the error message."],"labels":["feature request","improvement"]},{"title":"Error thrown when using transition-group with component v-bind:is directive","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/50wL7mdz\/451168\/](https:\/\/jsfiddle.net\/50wL7mdz\/451168\/)\r\n\r\n### Steps to reproduce\r\nRender a `component` (not just any component, but the build-in one: https:\/\/vuejs.org\/v2\/api\/#component), with the `v-bind:is` directive set to `\"transition-group\"` (or simply `is=\"transition-group\"`):\r\n\r\n```\r\n<component is=\"transition-group\"><\/component>\r\n```\r\n\r\n### What is expected?\r\nI expect no errors to be thrown.\r\n\r\n### What is actually happening?\r\nThis component appears to work as expected but throws the following error in the console:\r\n\r\n```\r\nvue.js:597 [Vue warn]: Unknown custom element: <component> - did you register the component correctly? For recursive components, make sure to provide the \"name\" option.\r\n\r\nfound in\r\n\r\n---> <TransitionGroup>\r\n       <TransitionWrapper>\r\n         <Root>\r\n```\r\n\r\nNo error is thrown if `transition` is used instead of `transition-group`.\r\n\r\n---\r\nI came across this bug because I was building a re-usable animation component that looks like this:\r\n\r\n```\r\n<template>\r\n  <component\r\n    :is=\"group ? 'transition-group' : 'transition'\"\r\n    @enter=\"velocityEnter\"\r\n    @leave=\"velocityLeave\"\r\n  >\r\n    <slot\/>\r\n  <\/component>\r\n<\/template>\r\n```\r\n\r\nThe component actually seems to work as expected, but the error described above is thrown.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["`transition-group` has to render a root-node, which by default, is a `<span>`,and which ca be customized with the `tag` attribute.\r\n\r\nHowever - and this is not clearly documented I think - if you are using `transition-group` through the special `is=\"\"` attribute, `transition-group` will actually try and use the tag that you used the `is` on as the element for the root node:\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/platforms\/web\/runtime\/components\/transition-group.js#L52\r\n\r\nWhile that may seem confusing, it's actually pretty useful. `is=\"\"` can be used on any element - it's most often used in that way to turn a `<tr>` in a DOM-template into a component, since other elements would be hoisted out of the `<table>` befoe Vue can touch the template:\r\n\r\n```html\r\n<tr is=\"mycomponent\">\r\n```\r\n\r\nIn terms of `transition-group`, the usecase would be:\r\n```html\r\n<transition-group tag=\"li\"> \r\n\r\n<!-- has the same result as: -->\r\n\r\n<li is=\"transition-group\"> \r\n\r\n<!-- if transitiongroup didn't do what I explained above, \r\n        you would have to do the following, which feels a bit redundant:\r\n-->\r\n<li is=\"transition-group\" tag=\"li\"> \r\n```\r\n\r\nNow the consequence of your code is that `transition-group` actually renders a literal `<component>` element as it's root node, which is neither a native HTML Element nor a Vue component - it's just a placeholder not meant to be rendered to the DOM, really.\r\n\r\n### Solution\r\n```html\r\n<span\r\n    :is=\"group ? 'transition-group' : 'transition'\"\r\n```\r\n\r\n--- \r\n\r\n\/ping @chrisvfritz should we document this?","Hm, I'm wondering how feasible it would be to have `transition-group` make an exception and still fall back to a `span` when the tag is `component`. Then it would behave as expected and there'd be no need to document the gotcha.\r\n\r\n@LinusBorg What do you think?","Would be totally feasable as what I described wasn't a default behaviour of Vue, but rather an intentional decision in the code of that component. "],"labels":["transition"]},{"title":"Allow to call original `errorHandler` when custom one defined","body":"### What problem does this feature solve?\r\nWhen custom `Vue.config.errorHandler` defined by the user, it will stop firing original [`logError `](https:\/\/github.com\/vuejs\/vue\/blob\/c2b1cfe9ccd08835f2d99f6ce60f67b4de55187f\/src\/core\/util\/error.js#L38).\r\n\r\nThe problem is that there is no straight way to recreate `logError ` behavior in custom `Vue.config.errorHandler` without requiring some Vue's internals.\r\n\r\nThis issue is partially related to [raven-js#1416](https:\/\/github.com\/getsentry\/raven-js\/issues\/1416), which defines custom `errorHandler`... which prevents Vue from login errors to the console.\r\n\r\n### What does the proposed API look like?\r\nI think Vue should by default expose original `errorHandler` under `Vue.config.errorHandler`. In other words, `Vue.config.errorHandler` shouldn't be `undefined` by default.\r\n\r\nIf the user would like to override `errorHandler`, he will reassign it. Otherwise, it would be possible to save original `Vue.config.errorHandler` into some variable and call it within custom `errorHandler`.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["You should be able to recreate it easily:\r\n\r\n```js\r\nfunction logError (err, vm, info) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    warn(`Error in ${info}: \"${err.toString()}\"`, vm)\r\n  }\r\n  console.error(err)\r\n}\r\n```\r\n\r\nApart from that, this looks reasonable to me","`warn` content isn't easily re-creatable (that's what I meant when said \"there is no straight way to recreate `logError` behavior\", I had to be more specific), and it's importable only from Vue sources, that's not an option in most cases.","I just ran into this error too. It looks like the warn function is actually available via `Vue.util.warn`. So the custom error handler can be:\r\n\r\n```javascript\r\n  Vue.config.errorHandler = (err, vm, info) => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      Vue.util.warn(`Error in ${info}: \"${err.toString()}\"`, vm)\r\n    }\r\n    console.error(err)\r\n  }\r\n```\r\n\r\nI am using Vue 2.6.2","Since the request looks reasonable and it simplifies configuration of external loggers, I am wondering if anyone is working on a PR for this? If not I'd be happy to try to propose something (basically exposing original `errorHandler` under `Vue.config.errorHandler`)."],"labels":["improvement"]},{"title":"<transition-group> not working as expected on page scroll","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/kxkmp9mov3](https:\/\/codesandbox.io\/s\/kxkmp9mov3)\r\n\r\n### Steps to reproduce\r\n1. Create a list using `<transition-group>`.\r\n2. Put the list at the end of a long page.\r\n3. Scroll to the bottom of the page.\r\n4. Trigger some change so that the page height is reduced and force the viewport to scroll upwards a little bit.\r\n\r\n### What is expected?\r\nThe existing items should stick to the container, instantly appear in the final position, without transitions.\r\n\r\n### What is actually happening?\r\nThe existing items jump out of the container because of the sudden change on vertical position and slowly move back to the expected position.\r\n\r\n---\r\nInternally, `<transition-group>` is using `getBoundingClinetRect()` to track the positions of transition items. This works fine when no page scroll is introduced. But when browsers force page scroll on certain situations, the container (and the rest of the page) flashed into the final position while transition items are stuck in the old position based on the viewport, which makes it look like they suddenly jump out of the document and start performing unexpected transitions.\r\n\r\nMaybe we can provide some new prop on `<transition-group>`, say, `origin: 'viewport' | 'document'`, to optionally calculate positions based on the canvas origin instead of the viewport.\r\n\r\nF.Y.I.\r\n\r\nWhen forced page scroll is triggered:\r\n\r\n![jun-28-2018 14-55-05](https:\/\/user-images.githubusercontent.com\/1726061\/42018058-80ecc336-7ae3-11e8-91da-f8774d873946.gif)\r\n\r\nWhen not triggered:\r\n\r\n![jun-28-2018 14-55-12](https:\/\/user-images.githubusercontent.com\/1726061\/42018090-97fb94c6-7ae3-11e8-879c-6212e952ecda.gif)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Same problem. How to fix?","FWIW I worked around this by forcing scrolling to the top on route transitions:\r\nhttps:\/\/router.vuejs.org\/guide\/advanced\/scroll-behavior.html\r\n```\r\nconst router = new Router({\r\n  mode: 'history',\r\n  scrollBehavior(to, from, savedPosition) {\r\n      return { x: 0, y: 0 }\r\n  },\r\n...\r\n```"],"labels":["has PR","transition"]},{"title":"Style bindings with !important don't work properly in IE 11.540","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/anon\/pen\/QxVRyW?editors=1010](https:\/\/codepen.io\/anon\/pen\/QxVRyW?editors=1010)\r\n\r\n### Steps to reproduce\r\nI've only seen this occur in IE 11.540 (through BrowserStack). The issue is not present in IE 11.0.\r\n\r\n1. Click \"toggle\" button\r\n2. \"Surprise!!\" should show up\r\n3. Click \"toggle\" button again\r\n4. \"Surprise!!\" is still visible\r\n\r\n### What is expected?\r\nClicking \"toggle\" should hide the message. This works properly in chrome, and probably other browsers as well.\r\n\r\n### What is actually happening?\r\nThe message is still visible, and has the `display: block !important` styling applied.\r\n\r\n---\r\nThis causes problems with modals in semantic ui vue. See Semantic-UI-Vue\/Semantic-UI-Vue#191\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["As a workaround, you can change `'none'` to `'none !important'` and the new style will apply."],"labels":["browser quirks"]},{"title":"Transitions classes are added after `before-enter` or `before-leave`","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/codesandbox.io\/s\/zq5mw2zk9x](https:\/\/codesandbox.io\/s\/zq5mw2zk9x)\r\n\r\n### Steps to reproduce\r\n1. Open browser console (to trigger the debugger)\r\n2. Click on \"Page 2\"\r\n3. Inspect elements inside `<main`>`\r\n\r\n### What is expected?\r\nThe two children `<sections>` are supposed to have the transitions classes.\r\n\r\n### What is actually happening?\r\nThe two children`<sections>` are already added but without any transition class, which are added on next tick. So the new `<section>` is visible on top on the old one for 1 frame, causing a flickering effect.\r\n\r\n---\r\nRemove this fix in `App.vue`:\r\n\r\n```css\r\nmain > :first-child {\r\n  z-index: 1; \/* Prevent flickering on first frame when transition classes not added yet *\/\r\n}\r\n```\r\n\r\nAnd navigate through the app to see the flicker effect.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This is not what I see (Vue 2.6.11): When the `@before-leave` function is called, the element does already have the transition classes. In fact, I had hoped the `@before-*` functions would be called at a moment I can still prevent a transition: I want to be able to conditionally set a boolean used in `:css=\"bool\"`. For me this now does work fine with `@before-enter`, but not with `@before-leave`."],"labels":["transition"]},{"title":"Computed Watchers Not Firing","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/vuejs.org\/v2\/guide\/computed.html#Watchers](https:\/\/vuejs.org\/v2\/guide\/computed.html#Watchers)\r\n\r\n### Steps to reproduce\r\nUse the demo for entering a question on the Docs page using a Amazon Kindle 7'' or Android Tablet (I used a Lenovo Tab 3 7'' version)\r\nhttps:\/\/vuejs.org\/v2\/guide\/computed.html#Watchers\r\n\r\n### What is expected?\r\nWhen typing in the field the value is evaluated after each letter is tapped when using a browser on a tablet, as per the demo instructions. \r\n\r\n### What is actually happening?\r\nNothing is evaluated until the space bar is tapped or a question mark \/ exclamation mark is selected from the keyboard. \r\n\r\n---\r\nI use this to create a drop down list of options when a user starts typing into a text field using Android tablet specifically Amazon Fire.\r\nThe user starts typing and after letters are entered the list is shown..\r\nAfter updating then the list is only shown if the user taps the space bar or the enter key on the on screen keyboard.\r\nThis works as expected when using a browser on a computer.\r\nI have tested my code on Mac using Safari, Chrome and Firefox and no errors are in the console. \r\nOn Amazon Fire and it works as expected when on version 2.5.13\r\nUpdating my VueJS to version 2.5.16 and this stops working on the tablet and requires the space key, exclamation mark, question mark or enter key to be tapped for the evaluation to fire\/run when using the tablet device.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["hi, may I try to fix this as my first bug?","@zaggy Sure! \ud83d\ude00","Just a guess but would it be this issue that was fixed that causes it? https:\/\/github.com\/vuejs\/vue\/pull\/7121 \r\nI'm not sure how I would exclude that from a version for testing.\r\nThe reason being that the form field is not being processed until a 'button' such as enter is tapped whereas before it was processing the content as soon as it changed.","What's the status of this?","Issue still remains.","@zaggy are you working on it? if not I would like to pick this up! \ud83d\ude42","is this still an issue?","Yes it is. I'm using the standard help page \/ demo page on a Kindle Fire and you have to tap the enter key when typing letters before the check is made. A question mark or an exclaimation mark after a word does fire the check the same as tapping the enter key. ","Just a note this may have to do with `v-model` preventing temporary updates during a composition (which is necessary for some input methods e.g. Chinese) - and some devices may be firing composition events even for normal English keyboards. That said I don't have a Kindle Fire so it's hard for me to reproduce.","I could replicate also on a Lenovo Tab 3. On both I have spell check \/ suggestions disabled in off chance that would help but it doesn't. ","@zaggy Did you fix you first bug? Been a while and I am still experiencing this issue.","Does this problem exist for all Android devices? (I'm using an online emulator running on CentOS, and it's kinda working fine, although I wouldn't really count on results given by emulators)","It okay on an old Android 5 device I tested with but the Kindle Fires have the issue. Even with all the spelling options disabled there is an underline on the text you type in the field. Once you press space bar or enter that line goes and then the event is fired and in my case the dropdown shown.","Is this reproducible with Android emulation? If so, would be a fun bug to work on. Had a similar issue with an application for work. "],"labels":["browser quirks","help wanted"]},{"title":"Dynamic input field type renders invalid code in IE11","body":"### Version\r\n2.5.17-beta.0\r\n\r\n### Reproduction link\r\n[https:\/\/github.com\/nirazul\/vue-loader-bug-repro](https:\/\/github.com\/nirazul\/vue-loader-bug-repro)\r\n\r\n### Steps to reproduce\r\n1. `npm install`\r\n2. `npm run build`\r\n3. `npm run watch`\r\n4. Open `.\/public\/index.html`\r\n5. Inspect `main.bundle.js` in dev tools\r\n6. On line 9044 you will find a duplicated key `value`\r\n\r\n### What is expected?\r\nA valid output from vue-template-compiler without duplicated value props, or at least a warning that the usage of dynamic input field types is prohibited in certain cases.\r\n\r\n### What is actually happening?\r\nIn IE11 a blank page is rendered\r\n\r\n---\r\nI'm using a centralized component for both radio and checkbox input fields as the markup is 90% the same.\r\nAs we switched from webpack 3 to webpack 4, we had to also upgrade the vue-loader version from 12 to 13 or 14, which introduced this bug. \r\nPrior to version 13, vue-template-renderer was not enforcing strict mode on all of its rendered templates. This is now the case, introducing this critical bug.\r\n\r\n\r\nReferences:\r\nhttps:\/\/vuejs.org\/v2\/guide\/forms.html#Radio-1\r\nhttps:\/\/github.com\/vuejs\/vue\/issues\/7048\r\nhttps:\/\/github.com\/vuejs\/vue\/issues\/6917\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["See discussions here: https:\/\/github.com\/vuejs\/vue\/pull\/7406\r\n\r\nIn this case, we are more likely to patch code generation to suppress :value emission when both type is dynamic and v-model is set. Thanks for pointing out!","@sodatea \r\nThanks for the clarification. I agree that `:value` suppression would be the right way to go with that.","I've just experienced this exact same 'white screen' issue with IE11, whereas no warnings or problems were experienced in modern browsers (Chrome, Firefox, Safari, Edge).\r\n\r\nThe IE11 JS console showed the following error:\r\n\r\n```\r\nMultiple definitions of a property not allowed in strict mode\r\n```\r\n\r\nI jumped down the rabbit hole and followed a few threads between different issues and PRs here, but struggled to find a clearly documented solution. After some trial and error, I've come up with something that works for my needs.\r\n\r\nFor the benefit of others in the same situation, this is the solution I've come up with:\r\n\r\n## Solution\r\n\r\nOriginally I'd bound the `input` `type` attribute to a variable, which would either be `checkbox` or `radio`:\r\n\r\n```vue\r\n<input :type=\"type\" :value=\"value\" v-model=\"model\" \/>\r\n```\r\n\r\nSince the issue seems to stem from dynamically binding the `type` attribute, I changed my template to conditionally render the input using `v-if`:\r\n\r\n```vue\r\n<input v-if=\"type === 'checkbox'\" type=\"checkbox\" :value=\"value\" v-model=\"model\" \/>\r\n<input v-if=\"type === 'radio'\" type=\"radio\" :value=\"value\" v-model=\"model\" \/>\r\n```\r\n\r\nBy hardcoding the `type` attribute for each of the possible types, and showing them conditionally depending on the value of `type`, I was able to workaround this particular bug. IE11 seems to be fine with this.","Just spent a few hours trying to debug the same issue.\r\nThis is still an issue in v2.6.10..\r\n","I've also spend now some time debugging this on a async module, which complicated the bug search a lot. It would be great to have this fixed <3"],"labels":["improvement"]},{"title":"VNode.componentInstance is undefined when rendered by a functional component","body":"### Version\r\n2.5.17-beta.0\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/anon\/pen\/rKwWXq?editors=1010](https:\/\/codepen.io\/anon\/pen\/rKwWXq?editors=1010)\r\n\r\n### Steps to reproduce\r\nOpen the console\r\n\r\n### What is expected?\r\nAn instance of `MyComponent` should be logged\r\n\r\n### What is actually happening?\r\n`undefined` is logged\r\n\r\n---\r\nThis worked in 2.5.15\r\nIt also works if you change `RootComponent` to be non-functional:\r\n```js\r\nconst content = h(MyComponent, {}, this.slots.default)\r\n```\r\nI'm guessing this was caused by 62a922e8, `cloneVNode` doesn't include that property. \r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["IMHO, private APIs may not be the best idea to rely on as they are always subject to change.","Yeah probably. It would be nice if it was usable though, because functional components don't have a reliable way to access `$refs` as far as I know. ","Ok I've figured out a bit of a workaround using `context.data.ref` and `context.parent.$refs[context.data.ref]`, but it fills `$refs` with `undefined` when the parent re-renders: \r\n![image](https:\/\/user-images.githubusercontent.com\/16421948\/41928926-17dae7f8-79ba-11e8-987f-9b9d67bd9fab.png)\r\n\r\nIs there anything like `_uid` to tell functional components apart? (again, more private interfaces)\r\n","Also is `componentInstance` even really private API? It doesn't have a `_` prefix, and is pretty common to see when working directly with VNodes. ","@KaelWD Did you solve this issue? The componentInstance is also undefined when I use named slot like:\r\n\r\nA component  template\r\n```JS\r\n<template v-slot:body>\r\n  <test>Hello world<\/test>\r\n<\/template>\r\n```\r\n\r\nB component template\r\n```JS\r\n<div>\r\n  <slot name=\"body\"><\/slot>\r\n<\/div>\r\n```\r\n\r\nB component script\r\n```JS\r\nexport default {\r\n  mounted () {\r\n    console.log(this.$slots.body)\r\n  }\r\n}\r\n```","> @KaelWD Did you solve this issue? The componentInstance is also undefined when I use named slot like:\r\n> \r\n> A component template\r\n> \r\n> ```js\r\n> <template v-slot:body>\r\n>   <test>Hello world<\/test>\r\n> <\/template>\r\n> ```\r\n> \r\n> B component template\r\n> \r\n> ```js\r\n> <div>\r\n>   <slot name=\"body\"><\/slot>\r\n> <\/div>\r\n> ```\r\n> \r\n> B component script\r\n> \r\n> ```js\r\n> export default {\r\n>   mounted () {\r\n>     console.log(this.$slots.body)\r\n>   }\r\n> }\r\n> ```\r\n\r\nQuite an old issue I know... but did you find a solution @sc0Vu ?","Are there any updates?\r\nThis problem is still present in the latest version","I solved this using the `slot` attribute. But the problem is that official documents of Vue.js say the `slot` attribute has already been discarded, and it won't be supported in Vue3. However, we can still use it in all versions of 2.x. Therefore, I think it's probably a bug of `v-slot`. See [Slot Attribute [Deprecated-Syntax]](https:\/\/v2.vuejs.org\/v2\/guide\/components-slots.html#Deprecated-Syntax)"],"labels":["regression"]},{"title":"vdom: warn innerHTML not watch when the string have some escaped chars","body":"### Version\r\n2.5.17-beta.0\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/cxtom\/pen\/XYKgde](https:\/\/codepen.io\/cxtom\/pen\/XYKgde)\r\n\r\n### Steps to reproduce\r\n1. using v-html and the string has \\&quot; \\&#39;\r\n2. ssr\r\n3. warn not match during hybrating in browser\r\n\r\n### What is expected?\r\nnot warn The client-side rendered virtual DOM tree is not matching server-rendered content\r\n\r\n### What is actually happening?\r\nwarn The client-side rendered virtual DOM tree is not matching server-rendered content.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["improvement"]},{"title":"Make vue available to other libraries without having to import it","body":"Title needs work, idk what to call this. \r\n\r\n### What problem does this feature solve?\r\nWriting a component library with typescript requires importing Vue so you can use `Vue.extend(...)` to get typings. This causes problems when webpack decides to load a different instance of vue. \r\nSee https:\/\/github.com\/vuetifyjs\/vuetify\/issues\/4068\r\n\r\n### What does the proposed API look like?\r\n[Local registration](https:\/\/vuejs.org\/v2\/guide\/components-registration.html#Local-Registration) to accept a function that **synchronously** returns a component, calling it with the parent vue instance. \r\n\r\nThe library can then do:\r\n```ts\r\nexport default function MyComponent (Vue: VueConstructor) {\r\n  return Vue.extend({ ... })\r\n}\r\n```\r\n\r\nAnd be used like:\r\n```js\r\nimport MyComponent from 'some-library'\r\n\r\nexport default {\r\n  components: { MyComponent }\r\n}\r\n```\r\n\r\nOf course that would then cause other problems, particularly where we use methods directly from other components. Maybe something that adds types like `Vue.extend()` but doesn't have any runtime behaviour would be better instead?\r\n\r\n```ts\r\n\/\/ When used, this will behave the same as a bare options object, instead of being an entire vue instance\r\nexport default Vue.component({\r\n  ...\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["You may want to use https:\/\/github.com\/ktsn\/babel-plugin-remove-vue-extend","\ud83d\udc4c \r\n\r\nHow does that handle stuff like [mixins](https:\/\/github.com\/vuetifyjs\/vuetify\/blob\/dev\/src\/util\/mixins.ts) ([usage](https:\/\/github.com\/vuetifyjs\/vuetify\/blob\/dev\/src\/components\/VBtn\/VBtn.ts#L19)) or [directly calling methods](https:\/\/github.com\/vuetifyjs\/vuetify\/blob\/dev\/src\/components\/VAvatar\/VAvatar.js#L33)? \r\n\r\nEDIT: Didn't rtfm, this looks perfect. I'll have to try it out to see how well it actually works though. I might have to massage the types a bit to get &#35;2 working. ","@ktsn can we close this or is there anything we could do in Vue core to improve the situation? ","The plugin doesn't work on everything, it seems to assume that all exports are `Vue.extend()`\r\n![image](https:\/\/user-images.githubusercontent.com\/16421948\/40799873-16b13a02-6552-11e8-9111-9cef69bc996d.png)\r\n\r\nEDIT: Or not, I still get the same error if I wrap that component. ","I'm fine with having to use `Vue.extend`, it's just not ideal that it creates a standalone instance. It would be nice if vue still resolved component references and everything else the same way as with bare options objects. It isn't really a problem anyway unless one of our users messes up and somehow ends up with two different vue imports. ","Alternatively we may try to detect duplicate Vue imports.","Yeah that would be helpful, the current errors don't really indicate what's actually going on very well. Is our current setup likely to be a problem with vue-test-utils and `createLocalVue` though? vuejs\/vue-test-utils#532 seems similar to this one. ","![image](https:\/\/user-images.githubusercontent.com\/16421948\/41507789-3fa7f6a2-727d-11e8-8acc-05261e89242d.png)\r\n\r\nhttps:\/\/github.com\/vuetifyjs\/vuetify\/blob\/c722f79b92550405e94ec6bb0129ad56ac869aed\/src\/mixins\/routable.ts#L69\r\nhttps:\/\/github.com\/vuetifyjs\/vuetify\/blob\/c722f79b92550405e94ec6bb0129ad56ac869aed\/src\/components\/VBtn\/VBtn.ts#L150","A few months ago I have asked for help with [an issue related](https:\/\/stackoverflow.com\/questions\/48570028\/webpack-vue-typescript-vue-in-main-package-and-in-library-is-imported-twi) to this one on stackoverflow.\r\nI've been living with my temporary solution since then (passing the Vue instance to the library initializer, and not importing Vue in the library), but I'm not very happy about it and now I'm stuck because Vuetify also started to use typescript and creates a separate Vue instance and it's not clear how to tell to webpack (or to Vue) that it's always the same instance that has to be used.\r\nThe solution provided at the top of this thread does not help me much, since I'm not using babel.\r\nAre you aware of an existing solution to have a package and dependencies, all written in typescript and compiled with webpack, to share the same Vue instance?","The solution should also allow to use .vue files in packages, which, with the original proposal at the top of this thread would probably not be possible.","After giving a hard look at the problem, the only solution that I found at the moment (with webpack) is to add vue as an external import wherever you import it.\r\nIn webpack.config.js\r\n````\r\nexternals: {\r\n    vue: 'Vue'\r\n},\r\n````\r\nand then import vue.js with a script tag (or an equivalent solution) in your html file.\r\nThis avoids that vue is instantiated more than once. Depending on your package and subpackage structure, you probably need to import your subpackages and or vuetify also as external modules.\r\n\r\nThat means that you have to pack them as standalone libraries, with, in webpack.config.js\r\n````\r\n    output: {\r\n        path: 'path\/to\/your\/output',\r\n        filename: 'build.js',\r\n        library: 'LibraryName',\r\n    },\r\n\r\n````\r\nand in tsconfig.json\r\n````\r\n\"compilerOptions\": {\r\n    ...\r\n    \"module\": \"es2015\"\r\n    ...\r\n}\r\n````\r\nAs a side effect with this solution you can also work with vue files in your libraries. The proposed solution at the top of this issue would in any case not allow that, because you cannot inject the vue constructor in a vue file (as far as I understand).\r\nIf you are working with tests suites like karma and phantomjs you need to inject vue and the other external libraries there as well.\r\nThis is now a workaround and a better solution would be if vue would have at initialization an option to detect if there is another VueConstructor outside the actual bundle and use it (as an option, because that may or may not be desired). \r\n\r\n","I use this to make sure the same file is always loaded, you can omit the `path.resolve` if there's no symlinks or other weird directory setup being used. \r\n```js\r\nresolve: {\r\n  alias: {\r\n    'vue$': path.resolve(__dirname, '..\/node_modules\/vue\/dist\/vue.runtime.esm.js')\r\n    \/\/ 'vue$': 'vue\/dist\/vue.runtime.esm.js'\r\n  }\r\n}\r\n```","I had the \"duplicate import\" problem in a monorepo project using [Lerna](https:\/\/github.com\/lerna\/lerna), and it seems to be related to the same problem when using `npm link` or `yarn link`. My project has a shared component package that multiple apps import, including an Electron app and a browser extension. It seems that `lerna bootstrap` uses symlinks, ultimately leading to some bundle confusion, in which Vue is separately imported for the main repo and the dependency, thereby causing the '`$listeners` and `$attrs` are readonly' errors. \r\n\r\nFrom what I've found, the common generalized solution seems to be to mark your dependency as an 'external' in whatever build configuration you're using.\r\n\r\nI'm using Electron with `electron-builder` and `@vue\/cli`. I solved this problem by adding this to my `vue.config.js`:\r\n\r\n```js\r\nmodule.exports = {\r\n  pluginOptions: {\r\n    electronBuilder: {\r\n      \/\/ List native deps here if they don't work\r\n      externals: ['my-shared-components'],\r\n    }\r\n  }\r\n}\r\n```\r\n"],"labels":["discussion"]},{"title":"Transition using js hooks always run the initial render","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/p1dthw6z\/](https:\/\/jsfiddle.net\/p1dthw6z\/)\r\n\r\n### Steps to reproduce\r\nIn the demo link, toggle checkbox 'odd'.\r\n\r\n### What is expected?\r\nWhen rows appeared, both inner element transition using CSS (fade) and transition using hooks (slide) should not do initial render.\r\n\r\n### What is actually happening?\r\nTransition using CSS do not run the initial render, as expected.\r\nBut the transition using hooks run the initial render, as if I have used `<transition appear>`, which I didn't.\r\n\r\n---\r\nI don't know if it is the intended behavior. If it is, I would like to know how to avoid the initial render in the hooked transition.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Hi, I looked at your JSFiddle, and toggling the checkbox 'odd' collapses the a2 and a4 rows. Are you referring to the initial slide transition that occurs when odd is unchecked?","@jwanggggg yes"],"labels":["transition"]},{"title":"VueSSRServerPlugin produces a slow-to-parse JSON for large projects","body":"### What problem does this feature solve?\r\nMakes for a better development experience with vue SSR.\r\n\r\nI was looking into why it takes 500ms to render an single-component page from the server in our fairly large application and found an interesting issue. Webpack creates ~40 bundles for us. Altogether, these weigh ~20MB. The way  `VueSSRServerPlugin` plugin works, as you know, is it combines all of these files into a single `vue-ssr-server-bundle.json` file. Reading that file in node is fast (5ms on average) for us, but after reading it we need to `JSON.parse` it before providing to `createBundleRenderer` and _that_ takes ~400ms.\r\n\r\nInitially I was thinking of using webpack's `splitChunks`, to reduce the file-size (our router dynamically imports top-level pages, so each chunk could benefit from not having to bring in common component) but `VueSSRServerPlugin` does not support that (and throws the \"Server-side bundle should have one single entry file\" error).\r\n\r\n### What does the proposed API look like?\r\nI'm not exactly sure what to do here at this point as I just noticed this issue. I'm concerned that as the app grows, the json parse time will increase adding seconds to the load-time in development.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["400ms reload during dev seems acceptable for \"a fairly large application\"... unless you expect your app to be 3~4 times larger than it already is in the future?","Thanks for responding, @yyx990803. We're anticipating the app to grow by more pages. That is what's making me concerned that a single JSON file containing all of the code (without at least the ability to split out common chunks) will not scale for us. Also (and this is subjective, of course) 400ms is a noticeable penalty for every refresh of the app.","I would be willing to bet 95% of your ~20MB file is redundant code from external libraries.  You should never be recompiling external libraries and bunching them into your bundle file.\r\n\r\nAnalyze the bundle file and make sure only your app's proprietary code is inside.  This should only be page template, business logic, routing logic, state management logic.  If you see the Vue library in there that should set off alarm bells.\r\n\r\nAlways externalize vendor libraries.  On the server, on the client, everywhere.\r\n\r\nAnother rule of thumb is if npm run build takes longer than 10 seconds, something is wrong.\r\n\r\nOnce you axe out the redundant code you'll notice your real app is actually something along the lines of 500KBs tops, and JSON.parse will be back to bearable speed.","Thanks for your analysis and care for the ecosystem, @zeltice!\r\n\r\nYou're correct in that by externalizing our vendor libraries the size of the `vue-ssr-server-bundle.json` goes down. The amount of reduction we see with the use of `webpack-node-externals` isn't quite 95% unfortunately, but is a decent ~20%. This brings us down to ~16MB.\r\n\r\nThe next big chunk of that file is made up of source-maps, disabling which unsurprisingly gives us a ~50% reduction (to ~8MB of first party code). Of course, this also means that we can't debug, so disabling these isn't an option, but it's important to know that it isn't just code in there.\r\n\r\nAs I wrote, we're running a large website with ~30-and-growing top-level page components and many features across those pages. Although tolerable for now, I don't believe the single-json-file approach of the` VueSSRServerPlugin` scales well. That being said, 90% of the time is spent parsing the JSON file, and not reading it, so perhaps a low-hanging fruit is to optimize that, maybe by using an alternative serialization format, or maybe by allowing source-maps to be their own file.","In regards to source maps, you're likely working with two environments:  dev & production\r\n\r\nIn dev:  you should never have source maps enabled since your JS should not be minified anyway.  Therefore, source map size should be 0 bytes.\r\n\r\nIn production:  During the build stage, webpack creates a separate file for the source maps -- those are never part of your js bundle, unless there was a misconfiguration.  Remember that the source maps are retrieved as separate files in separate HTTP requests in production.  These source map URLs are hinted by specialized commented hints in your minified, packaged js and css files.\r\n\r\nRegardless, the original problem is slow development experience -- so dev environment.  Source map should not exist in dev.\r\n","Thanks again for your comment, @zeltice. Webpack combines our source files into a single bundle and uses the loaders to compile the source `.vue` templates and styles into JS. Thus, disabling source maps in development would mean that we would get post-combine-and-compile bundle-specific line & column numbers in stack traces instead of source-file-specific line numbers, making it very difficult to identify the source of errors.","I see.  If you *must* have source maps in dev, try the cheaper but still effective source map solutions going for a balance of filesize and speed:\r\n\r\nhttps:\/\/webpack.js.org\/configuration\/devtool\/\r\n\r\nMy company does not use source maps in dev so my advice is only based on experience from 4 years ago where I used \"cheap-eval-source-map\"; which was good enough to identify the file and line number of the problem, yet fast enough to be ~1 second delay in updates on every code change.","> In production: During the build stage, webpack creates a separate file for the source maps -- those are never part of your js bundle, unless there was a misconfiguration. Remember that the source maps are retrieved as separate files in separate HTTP requests in production. These source map URLs are hinted by specialized commented hints in your minified, packaged js and css files.\r\n> \r\n> Regardless, the original problem is slow development experience -- so dev environment. Source map should not exist in dev.\r\n\r\n\r\nIn my projet server bundle vue-ssr-server-bundle.json file size is 21.4 mb because of source map. i don't know why server bundle including source map. i am using [this scaffolding](https:\/\/github.com\/JZ-FE\/vue-ssr-demo ). can you guys tell me where i am doing wrong ?\r\n","It has now been two years since I opened this issue. Whereas the `vue-ssr-server-bundle.json` was 20MB then and took 400ms to reload it is now **51MB** in size and **takes seconds to reload**. The application is 3-4 times larger now (or rather we've converted the rest of it to use vue) @yyx990803 . If you have any suggestions we'd happily try them out, as we're finding it more and more difficult to tolerate the reload time. Thank you for your amazing work!"],"labels":["improvement"]},{"title":"\ud83d\udc4b Vue reactivity engine and MobX \ud83d\udd96","body":"Hey,\r\n\r\nVue is cool, over at React land MobX ( https:\/\/github.com\/mobxjs\/mobx\/ ) takes a similar approach by defining getters\/setters. \r\n\r\nThe architectural nature of Vue apps is much closer to React+MobX than the typical React architecture and MobX is used and trusted by some [big companies](https:\/\/github.com\/mobxjs\/mobx\/issues\/681)\r\n\r\nI am not aware of any knowledge sharing or idea sharing between the projects. I think it would be really cool if we explore possibilities to collaborate.\r\n\r\nSome areas of collaboration which could be cool:\r\n - Standardized benchmarks.\r\n - Optimization tips and what things that worked out and didn't.\r\n - Good user experience for things like circular references.\r\n - What code can be shared between libraries or extracted.\r\n - Discuss the transition to from getters\/setters to proxies.\r\n - Discuss what's hard from the language PoV to provide feedback to TC39.\r\n\r\nI am explicitly not suggesting anything concrete. Just to get the discussion started. I got the idea after I started participating in SinonJS and someone from Jest reached out to us in order to use a shared code component.\r\n\r\nWhat do you think?\r\n\r\n(And I want to point out that \"no\" is also a perfectly acceptable response here)\r\n\r\n----\r\n\r\nFull disclosure - I am a part of the MobX team - MobX is written and is the brainchild of @mweststrate - I am also probably quite terrible at Vue itself :D\r\n\r\nIt's possible Michel reached out in the past (or vice versa) and the discussion simply isn't public.","comments":["Hello, your issue has been closed because it does not conform to our issue requirements. In order to ensure every issue provides the necessary information for us to investigate, we require the use of the [Issue Helper](https:\/\/new-issue.vuejs.org\/?repo=vuejs\/vue) when creating new issues. Thank you!\n","Don't mind if this is closed or open in order to keep the tracker just bugs - ping @yyx990803 though.","See also: https:\/\/github.com\/dwqs\/vue-mobx and https:\/\/github.com\/mmlpxjs\/mobx-vue","Any chance we could get this discussion going @sodatea @yyx990803? \r\n\r\nWhat would be a better way to interact?"],"labels":["discussion"]},{"title":"Support `components` obj in functional components (fix #7492) (fix #6872)","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [x] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [x] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\nFixes #7492 #6872 (duplicates)","comments":["\ud83d\udc4d ","In which circumstances will you need this functionality? Just curious!","@kushalmahajan we (the projects i'm involved with) tend to write all components in single vue files with template blocks and avoid render function as much as possible since without JSX it could become quite messy very fast. Here's the typical use-case :\r\n\r\n```\r\n<template functional>\r\n  <div class=\"you-can-imagine-complex-domtree-here\">\r\n    <my-custom-component \/>\r\n  <\/div>\r\n<\/template>\r\n\r\n<script>\r\nimport MyCustomComponent from 'somehwere-else'\r\n\r\nexport default {\r\n  components: { MyCustomComponent }\r\n}\r\n<\/script>\r\n```\r\n\r\nIf i'm not mistaken, this would be the only reason for such a thing.","@y-nk. I see! Same like the normal components property on non-functional Vue components.  \r\n\r\nIf it helps, then I would like to mention that if you write functional components with render functions, the components property is not required for it to work. I don't know the underlying reason but it's definitely not mandatory there. Plus, I am writing just **.js file** only so the advantage one gets is **full fledged dev tooling**,  which .vue is still not offering ,  apart from just doing function without template as a component.\r\n\r\nBelow is an  example of a simple dropdown component I built\r\n```\r\nimport { DropdownWrapper } from \".\/styles\";\r\nimport VList from \"..\/list\/list\";\r\nimport VItem from \"..\/item\";\r\n\r\nconst Dropdown = {\r\n  functional: true,\r\n  props: {\r\n    list: Array,\r\n    wrapperStyles: Object\r\n  },\r\n  \/\/ eslint-disable-next-line\r\n  render(h, { props, listeners }) {\r\n    const handleClick = listeners.click ? listeners.click : () => {};\r\n    return (\r\n      <DropdownWrapper styles={props.wrapperStyles || {}}>\r\n        <VList\r\n          list={props.list || []}\r\n          renderItem={item => <VItem size=\"sm\">{item}<\/VItem>}\r\n          onClick={handleClick}\r\n        \/>\r\n      <\/DropdownWrapper>\r\n    );\r\n  }\r\n};\r\nexport default Dropdown;\r\n\r\n```\r\n","Can this go into 2.6.1? Please?","This would be very handy, sometimes I separate some components that contains just some svg icons using vue-svg-loader and has no additional logic within them. I wish I could write them as functional.\r\n\r\nWriting them with render function is unpractical in larger teams with varied skill levels.\r\n\r\nI read in a [comment in another PR](https:\/\/github.com\/vuejs\/vue\/pull\/8287#issuecomment-432327101) that  in v3 stateful components will be much faster to initialize, and I agree that we should keep functional components minimal and don't add all the options that a stateful component has.\r\n\r\nBut using other components is great for composition and, in my opinion, would be a great addition and allow for cleaner components. \r\n\r\nAlso we might not be able to migrate all precious codebases to v3 when it is released, so the faster initialization times and memory gains we could have now with this is much beneficial, in my opinion.","Some new info on Evan's vision of functional components: https:\/\/github.com\/vuejs\/rfcs\/blob\/functional-async-api-change\/active-rfcs\/0000-functional-async-api-change.md\r\n\r\nStill a proposal but based on this, it seems more unlikely this will ever get merged.\r\n","> Some new info on Evan's vision of functional components: https:\/\/github.com\/vuejs\/rfcs\/blob\/functional-async-api-change\/active-rfcs\/0000-functional-async-api-change.md\r\n> \r\n> Still a proposal but based on this, it seems more unlikely this will ever get merged.\r\n\r\nBased on the information in the above link, it's best to avoid future use of the `<template functional>` option for functional components and focus on purely render functional components if needed.\r\n\r\nEven though he states that there will be a graceful degradation of this feature.","The v3 the difference between functional and regular components won't be as significant performance wise. So, you can keep writing templates, it may be easier to refractor to functional components now and maybe again in v3"],"labels":["semver:minor"]},{"title":"fix: In development mode, warns if user tries to Vue.set a property t\u2026","body":"\u2026hat already exists.\r\n\r\nIn development mode, warns if user tries to Vue.set a property that already exists. Issue reported\r\nin #8129. Codepen demonstrating the issue available at\r\nhttps:\/\/codepen.io\/chrisvfritz\/pen\/rvzgBR?editors=1010\r\n\r\nfix #8129\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [x] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [x] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","comments":["@posva I'm trying to add a test for this, but struggling a bit.  Here is a codepen of a test that I expect should pass for this.  https:\/\/codepen.io\/bigtunacan\/pen\/rvGgoB?editors=0010#\r\n","> I'm trying to add a test for this, but struggling a bit.\r\n\r\nCould you provide more information on where you struggled? For example, are you not sure where the test should go, or did running the tests not work, etc?","@chrisvfritz I placed the test in `test\/unit\/modules\/observer\/observer.spec.js`.\r\n\r\nThe test fails with the generic message `FAILED Observer Cannot enable reactivity on a property that is already defined`\r\n\r\nSo then I ran the tests against Chrome with inspector to see what is happening; the warning is getting hit in test the same as in dev, but yet it fails in my test (which I also linked in the codepen above).\r\n\r\nI could also push my changes onto this pull request, but I didn't necessarily want to do that when I know the test isn't working yet.","@bigtunacan You may have to wrap your expectation with `waitForUpdate` (like in [this test](https:\/\/github.com\/vuejs\/vue\/blob\/dev\/test\/unit\/modules\/observer\/observer.spec.js#L307-L311)).","@chrisvfritz I tried that as well, with the same results.\r\n\r\nhttps:\/\/codepen.io\/bigtunacan\/pen\/RyxbLa?editors=0010#","Can you upload the exact code you're trying? It's OK if the test is failing - we'll squash when we merge anyway.","@chrisvfritz Ok; I've updated the PR","@posva I believe this should be ready to merge now.","@posva Just curious since it's been sitting for awhile and shows as \"Changes requested\".  Are you still waiting on anything from me to merge this in?  I thought everything was good now?","I think it makes more sense to convert a property to a reactive one if it's not, which should be the intention in most cases anyways.","> I think it makes more sense to convert a property to a reactive one if it's not, which should be the intention in most cases anyways.\r\n\r\nI think the issue is that someone may add a property with standard assignment after the fact as shown in this codepen from the original issue https:\/\/codepen.io\/chrisvfritz\/pen\/rvzgBR?editors=1010\r\n\r\nMost likely this is not what the person meant to do so it would be good to provide a warning in dev environments.\r\n\r\nIt could be changed to set the property to reactive, but that would seem inconsistent as you would being with a property that is not reactive and then at some point in time it becomes reactive.","I agree with you @bigtunacan. We just had an internal discussion about this in the Vue team and never came up with any valid use cases for making an unreactive property reactive - and the ability just opens a subtle hole for reactivity bugs. So a warning does seem ideal here."],"labels":["in review"]},{"title":"warn if $set is used on a property that already exist","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/JJPandari\/pen\/gzLVBq?editors=1010](https:\/\/codepen.io\/JJPandari\/pen\/gzLVBq?editors=1010)\r\n\r\n### Steps to reproduce\r\nSee the codepen snippet. Follow the comment there to change the vm's data and see what happens.\r\n\r\n### What is expected?\r\nEven if the prop already exists, using `set` still makes it reactive, thus trigger view update.\r\n\r\n### What is actually happening?\r\nUsing `set` later doesn't update the view.\r\n\r\n---\r\nRelated source code: https:\/\/github.com\/vuejs\/vue\/blob\/3eb37acf98e2d9737de897ebe7bdb7e9576bcc21\/src\/core\/observer\/index.js#L192 I think most users would expect `set` to make the prop reactive whenever it's used. I initially opened [an issue for the api doc](https:\/\/github.com\/vuejs\/vuejs.org\/issues\/1601) because it wasn't clear (for me) about this. But the comment in the source code is.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["You're setting 2 different `setCameLate`, your last line should be\r\n\r\n```js\r\nthis.$set(this, 'setCameLate', 'yes');\r\n```\r\n\r\n---\r\n\r\nPlease, next time consider using the [forum](http:\/\/forum.vuejs.org\/), the [Discord server](https:\/\/vue-land.js.org\/) or [StackOverflow](http:\/\/stackoverflow.com\/tags\/vue.js) for questions first. But feel free to come back and open an issue if it turns out to be a bug \ud83d\ude42","Sorry I messed the example up. Try read it again. Or you can read the source code of `set` I linked to above briefly, it should be easy to see what I'm talking about in the title of this issue. I'm asking about a design decision here, \"why not (do it the other way)?\"","Im not sure I get your question, but vue cannot detect the assignment, so you need set.","@posva I think what @JJPandari would like to do is use `Vue.set` to make a property reactive _after_ it's already been added, like in [this example](https:\/\/codepen.io\/chrisvfritz\/pen\/rvzgBR?editors=1010). I don't see a use case for this, but if the property already exists, I think it would be good to provide a development warning to users, so they know they've done something wrong. For example, for:\r\n\r\n```js\r\nVue.set(this.person, 'job', 'Educator')\r\n```\r\n\r\nIf `this.person.job` had previously been created _without_ `Vue.set`, so that it's non-reactive, then I think a warning like this would be useful:\r\n\r\n> [Vue warn]: You tried to use Vue.set on the existing, non-reactive property \"job\".  Properties cannot be made reactive after they've already been added to an object. Instead, use `Vue.set` where you want to initially create that property.\r\n\r\nWhat do you think?","seems fine. I also think it's hardly useful but a warning is ok","@chrisvfritz Would you see this being logged to the browser console, or something that would be in the build process?  Just thinking about taking a stab at this.","it's a runtime dev only warning if you want to add it \ud83d\ude42 ","I think there's a valid use case for setting $set on existing properties. In my application code I have a `hashMap` object that is initially empty, and I call `this.$set(hashMap, object.id, object)` after getting the object from API. It will be called more than once if I get updated object sent from API again (`apiCall().then(object => this.$set(hashMap, object.id, object))`). I don't really want to check if the property exist s before using $set since that would be too verbose.","@fnlctrl It's a bit unclear the way this issue was initially worded, but Chris' codepen is a good example of the real issue here.  [https:\/\/codepen.io\/chrisvfritz\/pen\/rvzgBR?editors=1010](https:\/\/codepen.io\/chrisvfritz\/pen\/rvzgBR?editors=1010)\r\n\r\nJJPandari's real issue was that they created a non-reactive property then later called  `$set` on the non-reactive property expecting that `$set` would switch the property from non-reactive to reactive. \r\n\r\nThe pull request I added on this https:\/\/github.com\/vuejs\/vue\/pull\/8138 is also addressing only that usage of a call to set.  In a non-production environment, it will check if you are trying to set a non-reactive property in which case you would get a warning that said property will not be reactive.","I see... though there's another question: Why not just make it work too when there's already a non-reactive property?  \ud83d\ude04 I don't see why there should be a limit.","@fnlctrl My thinking was that if someone first creates an unreactive property, then tries to make it reactive _later_, any reference to that property in between those two events is very likely to create a difficult-to-diagnose bug. \r\n\r\nBy showing a warning that they should make the property reactive from the start, we encourage a best practice that eliminates the window for bugs to occur.","this issue seems close to me, why does it still say \"Open\" near the title?\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/22025584\/119341397-9b7bf400-bc8b-11eb-86aa-dcfd3722f0fc.png)\r\n","It's probably fixed but I'm not sure, haven't used vue recently. @posva Would you link the PR to this issue and close this if fixed?","Does this problem still exist?"],"labels":["feature request","good first issue","has PR"]},{"title":"Vue breaks the styling when using comments in inline style attribute","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/jsbin.com\/gutivaf\/edit?html,css,js,output](https:\/\/jsbin.com\/gutivaf\/edit?html,css,js,output)\r\n\r\n### Steps to reproduce\r\n- Add a comment inside any style attribute on an element within the Vue app instance. Example:\r\n\r\n      ... style=\"color:blue; \/* This is a comment *\/ background-color:yellow;\" ...\r\n\r\n\r\n### What is expected?\r\nThe element should have blue text on yellow background.\r\n\r\n### What is actually happening?\r\nThe comment breaks the attribute and all the style properties *after* the comment are ignored (not coming in effect).\r\n\r\nIn the reproduction example the text is blue but the background is *not* yellow. \r\n\r\n---\r\n(The JSBin contains a slightly different example. I hope you can live with that.)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This is because of [this regex](https:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/platforms\/web\/util\/style.js#L7). The second rule starts with the comment of the first rule(`[\"color:blue\", \" \/* This is a valid comment *\/ background-color: darkseagreen\"]`)  and that is the reason for this issue. \r\n\r\n> The comment breaks the attribute and all the style properties after the comment are ignored (not coming in effect).\r\n\r\nThis is not true. It breaks only the second property. If there are any properties after that, they are preserved.\r\n\r\nI am working on improving this. Will update it once a PR is ready.","Honestly though, I can't think of a good reason to use or support this. If you need comments for your inline styles you should probably use an object \/ computed property. Adding extra logic to handle this is just incurring perf\/code size\/maintenance cost for... what?","Maybe so @yyx990803. In my case I use it during development\/scaffolding to temporarily disable properties. It's the same technique that Chrome uses when unchecking a single property in web tools.\r\n\r\nIn my opinion, Vue should strive to, as far as possible, not change the behavior of templates. But I understand if you don't prioritize this.","The existing regex `\/;(?![^(]*\\))\/g` has to be changed to `\/;(?:\\s*\\\/\\*.*\\*\\\/)?(?![^(]*\\))\/g`(off the top of my head). I will leave it to @yyx990803 and @posva to take the call on whether they would like a PR for this.\r\n\r\nIMO, I would like Vue to allow this.\r\n\r\n"],"labels":["improvement"]},{"title":"Have template compiler add source metadata to HTML tags","body":"### What problem does this feature solve?\r\nI'm developing an all-in-one editor for webdevs that runs inside Chrome DevTools.\r\n\r\nJust by replacing `npm start` with `[name-not-finalized] start`, users can have a fully featured text editor right inside Chrome DevTools shell, automatically pointing at their project directory.\r\n\r\nIt comes with DOM inspector, where you pick an element and it'll literally take you to `file:line:col` where that element was defined. So you don't have to look through files to figure out where that button below the header is coming from. Useful when a new dev joins a project or you're revisiting your work after a very long time.\r\n\r\n\u25b6 [Watch 30 sec demo w\/ a React project](http:\/\/goo.gl\/d64cgv)\r\n\r\n___\r\n\r\nAnd of course, it also works with Vue projects, just as awesome.\r\n\r\n\u25b6 [Watch 20 sec demo w\/ a Vue project](https:\/\/drive.google.com\/open?id=1rGeFiNLezxzaJqnhnDbjvD_OvLMyaMIh)\r\n\r\nAbove demos were shot using locally tinkered compilers (just not clean enough to be a PR)\r\n\r\nThe goal is to deliver the ultimate developer experience ever. Other features are in development as we speak, like CSS QuickEditing, built-in image editor and a SVG editor so devs don't have to fire up Illustrator or Photoshop to make minor tweaks to their stuff.\r\n\r\nThe only hurdle in me releasing the app is getting external players to participate in revolutionizing how we write web.\r\n\r\nSo to wrap up I have only two requests:\r\n- Please have the template compilers add metadata to each tag (either as data attribute, or property on DOM node itself), that contains path to `*.vue` file (can be relative to project root), `line:col`\/offset where the tag opens and last `line:col`\/offset where the tag closes.\r\n\r\n- Please star this issue: https:\/\/bugs.chromium.org\/p\/chromium\/issues\/detail?id=811036\r\n\r\n### What does the proposed API look like?\r\nSomething like this:\r\n```javascript\r\nconsole.log(someElement.__vue__._debugSource)\r\n\/\/ > { file: 'src\/components\/Header.vue', line: 12, col: 4, lineEnd: 16, col: 8 }\r\n\/\/ or\r\n\/\/ > { file: 'src\/components\/Header.vue', start: 241, end: 352 }\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["@yyx990803 Gentle ping on this. Thanks","I think there is no need to change vue core for this, it should be doable in vue-loader only plus, if necessary, vue plugins\r\nBTW that editor looks pretty cool \ud83d\ude42 ","I definitely understand, in fact, this something anyone would want when `process.env.NODE_ENV == 'development'`, so of course no need to have it in core.\r\n\r\nThe primary concern is to get the Vue squad on board and maybe get some help from you guys in implementing those changes[1]\r\n\r\nI'm also trying to reach out React and Angular teams in parallel as we speak.\r\n\r\n[1] I'm not  so familiar with Vue's codebase and at this time, I'm the only one trying to tie all the loose ends together. So some help would very appreciated.","#7127 will add source info (start & end index) to `ASTElement`. We can add `domProps.__vue_source__` with a [template compiler module](https:\/\/www.npmjs.com\/package\/vue-template-compiler#compilercompiletemplate-options) after the pr get merged.","@gzzhanghao looks great, thanks. But can we not have just this feature in a separate PR instead of making a big PR even bigger?"],"labels":["feature request"]},{"title":"keep-alive: include\/exclude components by component key attribute","body":"### What problem does this feature solve?\r\nThe include and exclude props allow components to be conditionally cached only by component name. If we want to reuse components but force replacement using the `key` attribute, there is no control over which components we want to keep-alive only matching components by their name.\r\n\r\n### What does the proposed API look like?\r\nhttps:\/\/jsfiddle.net\/9nk92wuy\/\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["> ### What problem does this feature solve?\r\n> The include and exclude props allow components to be conditionally cached only by component name. If we want to reuse components but force replacement using the `key` attribute, there is no control over which components we want to keep-alive only matching components by their name.\r\n> \r\n> ### What does the proposed API look like?\r\n> https:\/\/jsfiddle.net\/9nk92wuy\/\r\n\r\n\u5927\u795e\u4f60\u597d\uff0c\u4e3a\u5565\u7528keep-alive \u5305\u542brouter-view\u7684\u65f6\u5019key\u914d\u5408include\u4e0d\u8d77\u4f5c\u7528\u5462\uff1f","I would love this feature to be added to Vue since it is a critical feature needed for switching from our old framework to Vue! Are there any notions about if and when the proposed pull request might be merged?","\u867d\u7136\u95ee\u9898\u9694\u5f97\u6709\u70b9\u4e45\uff0c\u4f46\u76ee\u524d\u6211\u5df2\u7ecf\u7b80\u5355\u5b9e\u73b0\u4e86\u4e00\u4e2a\u65b9\u6848\u3002  \r\n### \u6982\u8981\uff1a\r\n\u56e0\u4e3akeep-alive\u6807\u7b7e\u662f\u4e0d\u4f1a\u88ab\u6e32\u67d3\u7684\uff0c\u6240\u4ee5\u901a\u8fc7ref\u7b49\u65b9\u5f0f\u65e0\u6cd5\u83b7\u53d6\u3002\u53ea\u80fd\u901a\u8fc7\u5728keep-alive\u5305\u542b\u7684\u7ec4\u4ef6\u4e2d\u83b7\u53d6\u7236\u8282\u70b9\uff0c\u6765\u83b7\u53d6keep-alive\u4e2d\u7684\u6570\u636e\u3002\r\n\r\n### \u6b65\u9aa4\uff1a\r\n#### \u67e5\u770b\u7ec4\u4ef6\u7f13\u5b58\u7684\u5bf9\u8c61\r\n\u8fd9\u91cc\u5bf9\u8c61\u7684key\u5c31\u662f\u6211\u4eec\u5728\u7f13\u5b58\u4e2d\u7ed1\u5b9akey\uff0c\u5982\u679c\u6ca1\u6709\u7ed1\u5b9akey\uff0c\u5c31\u968f\u673a\u751f\u6210\u3002\uff08\u8fd9\u91cc\u7684\u751f\u6210\u89c4\u5219\u6211\u6682\u65f6\u8fd8\u6ca1\u6709\u53bb\u4e86\u89e3\uff09\r\n![](http:\/\/ww1.sinaimg.cn\/large\/00760Iw1gy1g5xu8l2yzjj30pv077aar.jpg)\r\n\r\n#### \u5728\u539f\u578b\u4e0a\u589e\u52a0\u4e00\u4e2a\u8fc7\u6ee4\u89c4\u5219\r\n\u8fd9\u91cc\u6211\u53ea\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53ef\u4ee5\u6839\u636e\u540c\u540d\u7ec4\u4ef6\u4e0d\u540ckey\u6765\u9650\u5236\u6700\u5927\u7f13\u5b58\u6570\u91cf\u7684\u65b9\u6cd5\r\n\r\n```js\r\nVue.prototype.$destroyKey = function () {\r\n  let cache = this.$vnode.parent.componentInstance.cache\r\n  let keys = this.$vnode.parent.componentInstance.keys\r\n  \/\/ \u5ffd\u7565\u6389\u7ec4\u4ef6\u4e3anull\u7684key\u503c\r\n  let cacheLen = 0\r\n  for (let item in cache) {\r\n    \/\/ cache\u5bf9\u8c61\u539f\u578b\u6ca1\u6709\u4e1c\u897f\uff0c\u65e0\u9700\u8c03\u7528hasOwnProperty\r\n    if (cache[item]) {\r\n      cacheLen++\r\n    }\r\n  }\r\n  if (cacheLen > this.keyMax) {\r\n    let outKey = keys.shift()\r\n    cache[outKey].componentInstance.$destroy()\r\n    cache[outKey] = null\r\n  }\r\n}\r\n```\r\n#### \u5728\u5207\u6362\u7ec4\u4ef6\u65f6\u8c03\u7528\u89c4\u5219\r\n\r\n##### 1. \u5728keep-alive\u7f13\u5b58\u4e2d\u4f7f\u7528\u52a8\u6001\u7ec4\u4ef6\r\n```js\r\nactivated () {\r\n    this.$destroyKey()\r\n  }\r\n```\r\n##### 2. \u5728\u8def\u7531\u9875\u9762\u5207\u6362\u4e2d\u4f7f\u7528\r\n```js\r\nbeforeRouteUpdate (to, from, next) {\r\n    this.$destroyKey()\r\n  }\r\n```\r\n#### \u7b80\u5355\u793a\u4f8b\r\nhttps:\/\/codepen.io\/waldonUB\/pen\/xvOgQB?editors=1111\r\n#### \u53c2\u8003\r\n- [keep-alive\u7684\u5b9e\u73b0](https:\/\/github.com\/vuejs\/vue\/commit\/2cba6d4cb1db8273ee45cccb8e50ebd87191244e)  \r\n- [issue6509](https:\/\/github.com\/vuejs\/vue\/issues\/6509) ","Why hasn't it been solved","keep-alive \u7684\u95ee\u9898\u5df2\u7ecf\u5b58\u572867\u5e74\u4e86\uff0c\u6846\u67b6\u4f9d\u65e7\u6ca1\u6709\u6dfb\u52a0\u624b\u52a8\u7ef4\u62a4\u7684\u6253\u7b97\uff0c\u54ce~~~"],"labels":["feature request","has PR"]},{"title":"Creating a component named map should warn the user (as with button)","body":"### Version\r\n2.5.15\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/e2yxoomh\/2\/](https:\/\/jsfiddle.net\/e2yxoomh\/2\/)\r\n\r\n### Steps to reproduce\r\nCreate a component that includes the word \"map\" (case insensitive). For example:\r\n- Map\r\n- MapView\r\n- mapper\r\n\r\n\r\n### What is expected?\r\nI expect these to work, or at least give me some sort of error message.\r\n\r\n### What is actually happening?\r\nNothing happens. The components do not render. There is no error message.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Because you're using the in-browser templates, self-closing tags are not working as expected, so it's not that anything containing map isn't working, it's that things are not passed to Vue as you expect.\r\n\r\nAbout the `map` element, it should indeed warn it is an existing element (same warning as button), so I'm changing the title of the issue to reflect that","Ah, I forgot that `map` is a valid HTML element. But, even if I don't use self-closing tags, a component named `MapView` doesn't work :\/\r\nhttps:\/\/jsfiddle.net\/e2yxoomh\/11\/\r\n","it does work, you need to use `map-view` beacuse in browser you cannot use uppercase for element names","Hmm ok. Well, it seems uppercase works for the first character.\r\n- Foobar => Works\r\n- FooBar => Doesn't work","You should checkout the style guide section of the docs, it will help you with that \ud83d\ude42 ","Ok, thanks. In any case, some warnings would be useful. I wasted quite a few hours trying to figure out what was wrong.","<details>\r\n  <summary>@posva Comparison of reserved Vue HTML tags vs specs. `map` is already in there.\r\n<\/summary>\r\n\r\n<table>\r\n<thead>\r\n<tr>\r\n<th align=\"left\"><a href=\"https:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/platforms\/web\/util\/element.js#L11\">Vue HTML<\/a><\/th>\r\n<th align=\"left\"><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Element\" rel=\"nofollow\">MDN<\/a><\/th>\r\n<th align=\"left\"><a href=\"https:\/\/html.spec.whatwg.org\/multipage\/indices.html#elements-3\" rel=\"nofollow\">WHATWG<\/a><\/th>\r\n<\/tr>\r\n<\/thead>\r\n<tbody>\r\n<tr>\r\n<td align=\"left\">abbr<\/td>\r\n<td align=\"left\">abbr<\/td>\r\n<td align=\"left\">abbr<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">acronym<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">address<\/td>\r\n<td align=\"left\">address<\/td>\r\n<td align=\"left\">address<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">applet<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">area<\/td>\r\n<td align=\"left\">area<\/td>\r\n<td align=\"left\">area<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">article<\/td>\r\n<td align=\"left\">article<\/td>\r\n<td align=\"left\">article<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">aside<\/td>\r\n<td align=\"left\">aside<\/td>\r\n<td align=\"left\">aside<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">audio<\/td>\r\n<td align=\"left\">audio<\/td>\r\n<td align=\"left\">audio<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">b<\/td>\r\n<td align=\"left\">b<\/td>\r\n<td align=\"left\">b<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">base<\/td>\r\n<td align=\"left\">base<\/td>\r\n<td align=\"left\">base<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">basefont<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">bdi<\/td>\r\n<td align=\"left\">bdi<\/td>\r\n<td align=\"left\">bdi<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">bdo<\/td>\r\n<td align=\"left\">bdo<\/td>\r\n<td align=\"left\">bdo<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">bgsound<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">big<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">blink<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">blockquote<\/td>\r\n<td align=\"left\">blockquote<\/td>\r\n<td align=\"left\">blockquote<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">body<\/td>\r\n<td align=\"left\">body<\/td>\r\n<td align=\"left\">body<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">br<\/td>\r\n<td align=\"left\">br<\/td>\r\n<td align=\"left\">br<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">button<\/td>\r\n<td align=\"left\">button<\/td>\r\n<td align=\"left\">button<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">canvas<\/td>\r\n<td align=\"left\">canvas<\/td>\r\n<td align=\"left\">canvas<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">caption<\/td>\r\n<td align=\"left\">caption<\/td>\r\n<td align=\"left\">caption<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">center<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">cite<\/td>\r\n<td align=\"left\">cite<\/td>\r\n<td align=\"left\">cite<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">code<\/td>\r\n<td align=\"left\">code<\/td>\r\n<td align=\"left\">code<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">col<\/td>\r\n<td align=\"left\">col<\/td>\r\n<td align=\"left\">col<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">colgroup<\/td>\r\n<td align=\"left\">colgroup<\/td>\r\n<td align=\"left\">colgroup<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">command<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">content<\/td>\r\n<td align=\"left\">content<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">data<\/td>\r\n<td align=\"left\">data<\/td>\r\n<td align=\"left\">data<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">datalist<\/td>\r\n<td align=\"left\">datalist<\/td>\r\n<td align=\"left\">datalist<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">dd<\/td>\r\n<td align=\"left\">dd<\/td>\r\n<td align=\"left\">dd<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">del<\/td>\r\n<td align=\"left\">del<\/td>\r\n<td align=\"left\">del<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">details<\/td>\r\n<td align=\"left\">details<\/td>\r\n<td align=\"left\">details<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">dfn<\/td>\r\n<td align=\"left\">dfn<\/td>\r\n<td align=\"left\">dfn<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">dialog<\/td>\r\n<td align=\"left\">dialog<\/td>\r\n<td align=\"left\">dialog<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">dir<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">div<\/td>\r\n<td align=\"left\">div<\/td>\r\n<td align=\"left\">div<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">dl<\/td>\r\n<td align=\"left\">dl<\/td>\r\n<td align=\"left\">dl<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">dt<\/td>\r\n<td align=\"left\">dt<\/td>\r\n<td align=\"left\">dt<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">element<\/td>\r\n<td align=\"left\">element<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">em<\/td>\r\n<td align=\"left\">em<\/td>\r\n<td align=\"left\">em<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">embed<\/td>\r\n<td align=\"left\">embed<\/td>\r\n<td align=\"left\">embed<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">fieldset<\/td>\r\n<td align=\"left\">fieldset<\/td>\r\n<td align=\"left\">fieldset<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">figcaption<\/td>\r\n<td align=\"left\">figcaption<\/td>\r\n<td align=\"left\">figcaption<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">figure<\/td>\r\n<td align=\"left\">figure<\/td>\r\n<td align=\"left\">figure<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">font<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">footer<\/td>\r\n<td align=\"left\">footer<\/td>\r\n<td align=\"left\">footer<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">form<\/td>\r\n<td align=\"left\">form<\/td>\r\n<td align=\"left\">form<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">frame<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">frameset<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">h1<\/td>\r\n<td align=\"left\">h1<\/td>\r\n<td align=\"left\">h1<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">h2<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">h2<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">h3<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">h3<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">h4<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">h4<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">h5<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">h5<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">h6<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">h6<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">head<\/td>\r\n<td align=\"left\">head<\/td>\r\n<td align=\"left\">head<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">header<\/td>\r\n<td align=\"left\">header<\/td>\r\n<td align=\"left\">header<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">hgroup<\/td>\r\n<td align=\"left\">hgroup<\/td>\r\n<td align=\"left\">hgroup<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">hr<\/td>\r\n<td align=\"left\">hr<\/td>\r\n<td align=\"left\">hr<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">html<\/td>\r\n<td align=\"left\">html<\/td>\r\n<td align=\"left\">html<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">i<\/td>\r\n<td align=\"left\">i<\/td>\r\n<td align=\"left\">i<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">iframe<\/td>\r\n<td align=\"left\">iframe<\/td>\r\n<td align=\"left\">iframe<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">image<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">img<\/td>\r\n<td align=\"left\">img<\/td>\r\n<td align=\"left\">img<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">input<\/td>\r\n<td align=\"left\">input<\/td>\r\n<td align=\"left\">input<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">ins<\/td>\r\n<td align=\"left\">ins<\/td>\r\n<td align=\"left\">ins<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">isindex<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">kbd<\/td>\r\n<td align=\"left\">kbd<\/td>\r\n<td align=\"left\">kbd<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">keygen<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">label<\/td>\r\n<td align=\"left\">label<\/td>\r\n<td align=\"left\">label<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">legend<\/td>\r\n<td align=\"left\">legend<\/td>\r\n<td align=\"left\">legend<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">li<\/td>\r\n<td align=\"left\">li<\/td>\r\n<td align=\"left\">li<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">link<\/td>\r\n<td align=\"left\">link<\/td>\r\n<td align=\"left\">link<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">listing<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">main<\/td>\r\n<td align=\"left\">main<\/td>\r\n<td align=\"left\">main<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">map<\/td>\r\n<td align=\"left\">map<\/td>\r\n<td align=\"left\">map<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">mark<\/td>\r\n<td align=\"left\">mark<\/td>\r\n<td align=\"left\">mark<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">marquee<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">menu<\/td>\r\n<td align=\"left\">menu<\/td>\r\n<td align=\"left\">menu<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">menuitem<\/td>\r\n<td align=\"left\">menuitem<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">meta<\/td>\r\n<td align=\"left\">meta<\/td>\r\n<td align=\"left\">meta<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">meter<\/td>\r\n<td align=\"left\">meter<\/td>\r\n<td align=\"left\">meter<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">multicol<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">nav<\/td>\r\n<td align=\"left\">nav<\/td>\r\n<td align=\"left\">nav<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">nextid<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">nobr<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">noembed<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">noframes<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">noscript<\/td>\r\n<td align=\"left\">noscript<\/td>\r\n<td align=\"left\">noscript<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">object<\/td>\r\n<td align=\"left\">object<\/td>\r\n<td align=\"left\">object<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">ol<\/td>\r\n<td align=\"left\">ol<\/td>\r\n<td align=\"left\">ol<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">optgroup<\/td>\r\n<td align=\"left\">optgroup<\/td>\r\n<td align=\"left\">optgroup<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">option<\/td>\r\n<td align=\"left\">option<\/td>\r\n<td align=\"left\">option<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">output<\/td>\r\n<td align=\"left\">output<\/td>\r\n<td align=\"left\">output<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">p<\/td>\r\n<td align=\"left\">p<\/td>\r\n<td align=\"left\">p<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">param<\/td>\r\n<td align=\"left\">param<\/td>\r\n<td align=\"left\">param<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">picture<\/td>\r\n<td align=\"left\">picture<\/td>\r\n<td align=\"left\">picture<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">plaintext<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">pre<\/td>\r\n<td align=\"left\">pre<\/td>\r\n<td align=\"left\">pre<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">progress<\/td>\r\n<td align=\"left\">progress<\/td>\r\n<td align=\"left\">progress<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">q<\/td>\r\n<td align=\"left\">q<\/td>\r\n<td align=\"left\">q<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">rp<\/td>\r\n<td align=\"left\">rp<\/td>\r\n<td align=\"left\">rp<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">rt<\/td>\r\n<td align=\"left\">rt<\/td>\r\n<td align=\"left\">rt<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">rtc<\/td>\r\n<td align=\"left\">rtc<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">ruby<\/td>\r\n<td align=\"left\">ruby<\/td>\r\n<td align=\"left\">ruby<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">s<\/td>\r\n<td align=\"left\">s<\/td>\r\n<td align=\"left\">s<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">samp<\/td>\r\n<td align=\"left\">samp<\/td>\r\n<td align=\"left\">samp<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">script<\/td>\r\n<td align=\"left\">script<\/td>\r\n<td align=\"left\">script<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">section<\/td>\r\n<td align=\"left\">section<\/td>\r\n<td align=\"left\">section<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">select<\/td>\r\n<td align=\"left\">select<\/td>\r\n<td align=\"left\">select<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">shadow<\/td>\r\n<td align=\"left\">shadow<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">slot<\/td>\r\n<td align=\"left\">slot<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">small<\/td>\r\n<td align=\"left\">small<\/td>\r\n<td align=\"left\">small<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">source<\/td>\r\n<td align=\"left\">source<\/td>\r\n<td align=\"left\">source<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">spacer<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">span<\/td>\r\n<td align=\"left\">span<\/td>\r\n<td align=\"left\">span<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">strike<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">strong<\/td>\r\n<td align=\"left\">strong<\/td>\r\n<td align=\"left\">strong<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">style<\/td>\r\n<td align=\"left\">style<\/td>\r\n<td align=\"left\">style<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">sub<\/td>\r\n<td align=\"left\">sub<\/td>\r\n<td align=\"left\">sub<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">summary<\/td>\r\n<td align=\"left\">summary<\/td>\r\n<td align=\"left\">summary<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">sup<\/td>\r\n<td align=\"left\">sup<\/td>\r\n<td align=\"left\">sup<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">table<\/td>\r\n<td align=\"left\">table<\/td>\r\n<td align=\"left\">table<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">tbody<\/td>\r\n<td align=\"left\">tbody<\/td>\r\n<td align=\"left\">tbody<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">td<\/td>\r\n<td align=\"left\">td<\/td>\r\n<td align=\"left\">td<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">template<\/td>\r\n<td align=\"left\">template<\/td>\r\n<td align=\"left\">template<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">textarea<\/td>\r\n<td align=\"left\">textarea<\/td>\r\n<td align=\"left\">textarea<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">tfoot<\/td>\r\n<td align=\"left\">tfoot<\/td>\r\n<td align=\"left\">tfoot<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">th<\/td>\r\n<td align=\"left\">th<\/td>\r\n<td align=\"left\">th<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">thead<\/td>\r\n<td align=\"left\">thead<\/td>\r\n<td align=\"left\">thead<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">time<\/td>\r\n<td align=\"left\">time<\/td>\r\n<td align=\"left\">time<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">title<\/td>\r\n<td align=\"left\">title<\/td>\r\n<td align=\"left\">title<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">tr<\/td>\r\n<td align=\"left\">tr<\/td>\r\n<td align=\"left\">tr<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">track<\/td>\r\n<td align=\"left\">track<\/td>\r\n<td align=\"left\">track<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">tt<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">u<\/td>\r\n<td align=\"left\">u<\/td>\r\n<td align=\"left\">u<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">ul<\/td>\r\n<td align=\"left\">ul<\/td>\r\n<td align=\"left\">ul<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">var<\/td>\r\n<td align=\"left\">var<\/td>\r\n<td align=\"left\">var<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">video<\/td>\r\n<td align=\"left\">video<\/td>\r\n<td align=\"left\">video<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">wbr<\/td>\r\n<td align=\"left\">wbr<\/td>\r\n<td align=\"left\">wbr<\/td>\r\n<\/tr>\r\n<tr>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<td align=\"left\">xmp<\/td>\r\n<td align=\"left\">&nbsp;<\/td>\r\n<\/tr><\/tbody><\/table>\r\n<\/details>\r\n\r\n---\r\n\r\n\r\nedited by @posva: collapsed the table as it took too much space","Warnings only work when components are registered globally e.g. \r\n```js\r\nVue.component('map', () => import('@js\/components\/Map'))\r\n```\r\nWhen imported and registered locally in `components`, no warnings are triggered. e.g.\r\n```html\r\n<script>\r\nimport Map from '@js\/components\/Map';\r\nexport default {\r\n    components: {Map}\r\n}\r\n<\/script>\r\n<template>\r\n    <div><map\/><\/div>\r\n<template>\r\n```","> In any case, some warnings would be useful. I wasted quite a few hours trying to figure out what was wrong.\r\n\r\n@pqvst If you use in-DOM template, Vue cannot warn you about the use of something like `MapView`. They are parsed by the browser first and what Vue got is just an element with the tagname `mapview`:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/1726061\/38796112-f808e8b8-418c-11e8-84cd-c965fdbda3da.png)","I'm thinking of working on this. Will upload a PR in a while!","![screenshot 2018-05-31 at 8 28 05 pm](https:\/\/user-images.githubusercontent.com\/29069199\/40814955-4cab2dca-6511-11e8-989b-1616a1fc0e70.png)\r\n\r\nI was able to find the error but not where it was coming from because vue has a `warn()` function and the errors always link to that instead of where the error is coming from.","Ok, so it's not working because of the browser by default setting the tag names to lowercase but vue is still looking for the elements with the upper case letters resulting in it not working\r\n\r\nand here is proof: https:\/\/jsfiddle.net\/e2yxoomh\/50\/\r\n\r\nyou just need to replace\r\n`Vue.component(\"MapView\"`\r\nwith\r\n`Vue.component(\"Mapview\"`\r\neverything else can stay the same","Hi guys, is there anything needed for this Issue? It has bee open for over a year.\r\n\r\nI can work on it if you want too.\r\n","Seems intresting. Think to work on it ","is there anything needed for this issuse?","> Hmm ok. Well, it seems uppercase works for the first character.\r\n> \r\n> * Foobar => Works\r\n> * FooBar => Doesn't work\r\n\r\nYeah the first Letter should be uppercase"],"labels":["contribution welcome","improvement","good first issue","has PR"]},{"title":"v-once for component tag doesn't work in v-for","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/hL0rrbs9\/6\/](https:\/\/jsfiddle.net\/hL0rrbs9\/6\/)\r\n\r\n### Steps to reproduce\r\nRun code, and watch.\r\n\r\n### What is expected?\r\n\"Yay Yay ;)\" values should not change to \"hell naw!\" in 3 seconds.\r\n\r\n### What is actually happening?\r\n\"Yay Yay ;)\" values are changing in to \"hell naw!\" in 3 seconds.\r\n\r\n---\r\n<h2>\r\n  Wait 3 seconds. Behavior is not consistent. \"component\" tag in v-for should not change. \r\n<\/h2>\r\n<div id=\"app\">\r\n  <component :is=\"comp\" v-once><\/component>\r\n  <p v-once>{{comp}}<\/p>\r\n  \r\n  <div v-for=\"n in items\" :key=\"n.id\">\r\n    <component :is=\"comp\" v-once><\/component>\r\n    <p v-once>{{comp}}<\/p>\r\n  <\/div>\r\n<\/div>\r\n<script>\r\nvar z = new Vue({\r\n\tel: \"#app\",\r\n  data: {\r\n  \tcomp:\t\"comp1\",\r\n    items: [{id:1}, {id:2}]\r\n  },\r\n  components: {\r\n  \t\"comp1\": {\r\n    \ttemplate: \"<p style='background:green;color:white'>yay yay ;)<\/p>\"\r\n    },\r\n  \t\"comp2\": {\r\n    \ttemplate: \"<p style='background:red;color:white'>hell naw!<\/p>\"\r\n    }\r\n  }\r\n});\r\n\r\nsetTimeout(function() {\r\n\tz.comp = \"comp2\"\r\n}, 3000);\r\n<\/script>\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["`v-once` should be in `v-for`, not in its children.","1. If v-once is in v-for, the iteration is rendered once. Ex: If there are 2 children originally, and a child is added later, the 3rd child is not rendered. This is not the scenario.\r\n\r\n2. if :key is provided to v-for, the idea is to patch each element in-place. Ex: In 1st item's example, the existing 2 children are not re-rendered. Hence the binding persists.\r\n\r\n3. In my JSFiddle example, **_<p v-once>{{comp}}<\/p>_** is behaving as expected in v-for. v-once is placed in v-for's child. \"comp1\" text does not change to \"comp2\". \r\n\r\n4. In my JSFiddle example, **_component_** is **NOT** behaving as expected in v-for. v-once is placed in v-for's child. \"yay yay ;)\" text does change to \"hell naw!\". This is the bug.\r\n\r\nGiven above, the expected behavior for v-for to still be bound to data and render when children array count changes. But each child to render only once. In this scenario, the v-once behavior is required in children, not the parent.\r\n\r\nIn short, this behavior is currently consistent except for **component** element. JS line 10 is working fine. Line 9 is not.\r\n\r\n\r\n"],"labels":["bug","has PR"]},{"title":"Vue Selected Bind Does Not Work on Option Tags","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/jbenner\/pen\/geJqex](https:\/\/codepen.io\/jbenner\/pen\/geJqex)\r\n\r\n### Steps to reproduce\r\n1. Instantiate a Vue instance with a `data` property named `locations` which is an array consisting of `['all', 'north', 'south', 'east', 'west']`.\r\n2. Iterate over the locations in an `option` tag like so `<option v-for=\"location in locations\" :selected=\"location === 'all'\">{{ location }}<\/option>`.\r\n\r\n### What is expected?\r\nThe `selected` attribute to be set on the \"all\" `option` element.\r\n\r\n### What is actually happening?\r\nThe `selected` attribute is not being set.\r\n\r\n---\r\nI've also tried the following while attempting to debug but to no avail:\r\n\r\n```\r\n<option v-for=\"(location, index) in locations\" :selected=\"index === 0\">{{ location }}<\/option>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["`selected` is set as an element prop, not as an attribute because the attribute is only taken into account upon page loading, so setting the `selected` attribute would be worthless","I humbly ask that you reconsider this issue. You are 100% correct about `selected` only being taken into account upon page load. But if you are using pre-rendering or server-side rendering then the property will be present upon page load. Also, if you are using the standard client-side rendering implementation you can call `document.forms.formId.reset()` after the template render to have the browser honor the `selected` property.\r\n\r\nRegardless, thank you for your hard work on an excellent product.","It is indeed useful for SSR but I haven't checked if it's not added yet","See https:\/\/codepen.io\/anon\/pen\/Overbe","I'm running into a similar issue on a select box where I can't use v-model.  Is there a workaround or fix for this issue?","One workaround is to create a [directive](https:\/\/vuejs.org\/v2\/api\/#Vue-directive) (named `\"attr\"`) that sets the attribute:\r\n\r\n```js\r\nVue.directive('attr', (el, binding) => {\r\n  \/\/ Boolean attributes take the empty string as a `true` value\r\n  if (binding.value === true) binding.value = ''\r\n\r\n  if (binding.value === '' || binding.value) {\r\n    el.setAttribute(binding.arg, binding.value)\r\n  }\r\n})\r\n```\r\n\r\nThen use it in your template like `v-bind` but with `v-attr`:\r\n\r\n```html\r\n<option v-attr:selected=\"location === 'all'\">\r\n```\r\n\r\n[updated codepen](https:\/\/codepen.io\/tony19\/pen\/poeEwJK?editors=1010)\r\n\r\nhttps:\/\/stackoverflow.com\/a\/67577063\/6277151"],"labels":["improvement"]},{"title":"Merge common class names of component and root element of that component","body":"### What problem does this feature solve?\r\nIt looks a little awkward if there are duplicate class names in a DOM element.\r\n\r\n### What does the proposed API look like?\r\nIf you look into [this fiddle](https:\/\/jsfiddle.net\/zLnzuh1f\/). \r\n\r\nThe `div` element of `foo` component will have two `bar` classes in it. So it looks like.\r\n\r\n```html\r\n<div class=\"bar bar\"><\/div>\r\n```\r\n\r\nIf the two classes would have been merged into one.\r\n\r\n```html\r\n<div class=\"bar\"><\/div>\r\n```\r\n\r\nIt would have worked and behaved exactly in the same way but the code will look a lot cleaner.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I am working on this.\r\n\r\nUpdate: I have created a PR at https:\/\/github.com\/vuejs\/vue\/pull\/8035.","I have the same issue. I need to keep the class in the component because it make sense for the component to know it's own class name for style etc..\r\n\r\nBut also need to keep the class attribute on the component call because it's a wrapper component around some server side generated content (header and footer), so without this class I have a glitch while Vuejs mount the component with the class name and so the browser doesn't apply the css.\r\n\r\nI tried to look in `beforeMount` or `mounted`to remove duplicates but can't find a way. I know it works anyway, but the double class name looks weird, so if you know a solution to remove this, it would be nice."],"labels":["improvement","has PR"]},{"title":"feat(weex): add code coverage test","body":"1. Add `rollup-plugin-istanbul` to instrument weex package build, this let us see the coverage of each source file rather than the built file.\r\n2. Add nyc package to call istanbul from cli.\r\n3. Add `.weex.nycrc` to config nyc for weex.\r\n4. Add npm script `test:weex:cover` to run the test.\r\n\r\nHere is the result from `coverage\/lcov-report\/index.html`:\r\n![image](https:\/\/user-images.githubusercontent.com\/8298849\/38661912-16e38fde-3e65-11e8-95ff-39ae2a567ecd.png)\r\n\r\nEmmmm... the coverage is very low now, and I'll write more test case in the next time .\r\n\r\n---\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [x] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [x] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","comments":["I have added some test case and ignore some line. Now it is:\r\n![image](https:\/\/user-images.githubusercontent.com\/8298849\/40719233-875b4b70-6445-11e8-9204-2b10dae38773.png)\r\n"],"labels":["weex"]},{"title":"The values of some attributes are replaced with the attribute name, which breaks MathML","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/gist.github.com\/VelizarHristov\/edaf4cf0d7b9f90c1e5d6070c027237f](https:\/\/gist.github.com\/VelizarHristov\/edaf4cf0d7b9f90c1e5d6070c027237f)\r\n\r\n### Steps to reproduce\r\nOpen the HTML in a browser (Internet connection is required to fetch the libraries).\r\n\r\n### What is expected?\r\n[] should be displayed\r\n\r\n### What is actually happening?\r\nopen] is displayed\r\n\r\n---\r\nIt comes from this line of code: https:\/\/github.com\/vuejs\/vue\/blob\/aa1356e83de1112660e7a88ff955f49d64bb5b1f\/src\/platforms\/web\/server\/modules\/attrs.js#L49\r\n\r\nThe list of rewritten attributes is here: https:\/\/github.com\/vuejs\/vue\/blob\/7116af4e07520040ed7328c39d0a456808bfe1e1\/src\/platforms\/web\/util\/attrs.js#L22\r\n\r\nThis is a general problem when including a block of XML in the HTML.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["improvement"]},{"title":"add `options` property to the render context of functional component","body":"### What problem does this feature solve?\r\nCustom properties in the options of functional component can't be accessed easily.\r\n\r\n### What does the proposed API look like?\r\nIn the render function of functional component, options can be accessed by `context.options`, just like `vm.$options`(https:\/\/vuejs.org\/v2\/api\/index.html#vm-options)\r\n\r\nrelated issue #7492\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I would also use this feature pretty extensively. Writing powerful mixins that work with functional components becomes much more difficult when you don't have access to the $options object in the rendering context.","I forgot to ask, but could you please share specific scenarios where this would be useful?\r\nAlso, keep in mind this is already possible by putting the object into a variable before exporting it","My use case it that I'm writing a mixin to handle reading and checking a \"type\" list that's custom property on my vue components. It checks attributes and applies specific css if an attribute name matches any of the given types specified in the vue instance \"type\" property. This works fine for full, non-functional components. But functional components can't access custom properties in the render function, so I can't access what type properties are set (because `$options` doesn't exist on the `context` object) when I'm actually composing styles for my component.\r\n\r\nAnd I'm fine to do the export option, it just seems odd that `$options` isn't present on the `context` object, given all the other vue instance attributes which are.","Here is one scenario: https:\/\/github.com\/vuejs\/vue\/issues\/7492#issuecomment-379570456\r\n\r\nIn my project, I want to make vue route components \"responsive\".\r\n```javascript\r\nconst BaseResponsive = {\r\n  functional: true,\r\n  render(h, context) {\r\n    \/\/ The options of extended component can't be accessed in base render.\r\n    \/\/ My workaround is using injections, but looks weird.\r\n    let component = context.injections.components[getDeviceType()];\r\n    return h(component, context.data);\r\n  },\r\n};\r\n\r\nconst routes = [\r\n  {\r\n    path: '\/foo',\r\n    component: {\r\n      extends: BaseResponsive,\r\n      inject: {\r\n        components: {\r\n          default: {\r\n            desktop: {\/* ... *\/},\r\n            mobile: {\/* ... *\/},\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n  {\r\n    path: '\/bar',\r\n    component: {\r\n      extends: BaseResponsive,\r\n      inject: {\r\n        components: {\r\n          default: {\r\n            desktop: {\/* ... *\/},\r\n            mobile: {\/* ... *\/},\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n];\r\n```","@caikan That's quite different, you need to import it or, in vue files, see #7492","What would you write on a mixin for functional components apart from `props`?","My initial idea was to let functional components can be extended dynamically. Extended components have the same render logic but different options.\r\nNow I think I have found another workaround: using a factory function.\r\n```javascript\r\nfunction createResponsiveComponent(options) {\r\n  return {\r\n    functional: true,\r\n    render(h, context) {\r\n      let component = options[getDeviceType()];\r\n      return h(component, context.data);\r\n    },\r\n  };\r\n}\r\n```\r\n","@posva , custom options are great options for writing mixins to encapsulate reusable behavior that doesn't rely on reactive data. It's would be nice to be able to use custom properties in mixins, so to not be forced to pollute the prop list with things that aren't going to change or be publicly exposed on the component API, just so those properties are accessible to a mixin.","I still don't get what you're trying to do. Can you share a piece of code, please?","Sure! Disclaimer though, I'm fairly new to vue. I have pretty extensive experience in other front end frameworks, but I'm new to adopting vue. There's a very real chance I'm doing something ridiculous and unintuitive, but the use case doesn't strike me that way, personally.\r\n\r\nSuppose I have a mixin that takes a custom property \"types\" from a component definition, assuming its present, and checks for matching attributes on the component's host element. It then concatenates a string of styles, derived from the attributes specified on the component element that match a type specified in the component definition. Here's how I might do it (I'm using styled components. Hopefully you're familiar with the library):\r\n\r\nSo, suppose this is my component:\r\n\r\n```\r\nimport styled                 from 'vue-styled-components';\r\nimport IsTyped                from '@Composables\/IsTyped';\r\nimport { Typography, Colors } from '@Constants\/style';\r\nlet SmallLabel = {\r\n functional: true,\r\n  name : 'SmallLabel,\r\n  mixins : [IsTyped],\r\n  render : function(h, context) {\r\n    let Label = styled.span`\r\n        \/\/ define base styles\r\n        font-size   : ${Typography.size.medium};\r\n        color       : ${Colors.black};\r\n        \/\/ now add any styles based on types provided in the attributes\r\n        ${context.$options.typedStyles} \/\/ this will be set by my mixin\r\n      `;\r\n    return (<Label>{context.$slots.default}<\/Label>);\r\n  },\r\n\r\n  types : {\r\n    bright : `color      : ${Colors.smoke};`,\r\n    dark   : `color      : ${Colors.sepia};`,\r\n    bold   : `font-weight: ${Typography.weight.bold};`,\r\n    light  : `font-weight: ${Typography.weight.bold};`\r\n  }\r\n};\r\n```\r\n\r\nAnd here's my `IsTyped` mixin:\r\n```\r\nimport {keys, intersection, values} from 'lodash';\r\n\r\nexport default {\r\n    beforeMount: function() {\r\n      let styles = '';\r\n      \/\/ looks for intersection between a components attribute and specified types\r\n      intersection(keys(this.$options.types), values(this.$attrs))\r\n        .forEach((t) => {styles = styles.concat(this.types[t]);})\r\n      \/\/ concatenates the styles and then attaches them to the custom options of the component\r\n      this.$options.typedStyles = styles;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nUnfortunately, this **does not** work. Because `$options` is not on the `context` object provided to the render function.","There is no lifecycle in functional components, they just call render. The only thing you can put in a mixin for functional components is props.\r\nedit: oh and inject. I may be missing some now that I think about it \ud83e\udd14 \r\nInstead, you can set up functions to return an object of options and directly use that object in your render function, which also looks more straightforward IMO \ud83d\ude04 ","Ah, didn't realize lifecycle methods didn't exist in functional components (like I said, vue newb here). And yes, I actually ended up doing what you suggested in the end, and it probably is cleaner. I just figured I'd give you my original use case, in case it gave you additional perspective about the original request.","Here are two other use cases for this:\r\n\r\n## 1. Detachable elements\r\n\r\nLibraries such as `vuetify` rely on \"detachable elements\" (elements created and added to the dom programatically, outside the \"inner dom tree\" of the component). An example is menus.\r\n\r\nhttps:\/\/github.com\/vuetifyjs\/vuetify\/blob\/8bb752b210d25fbebcea12cd073d2ce4986f5e12\/packages\/vuetify\/src\/mixins\/detachable\/index.ts#L111-L117\r\n\r\nAs you can see in this snippet, vuetify will try to use the context's `$options` to determine the `scopeId` to apply on the created elements.\r\n\r\nthe missing `$options` breaks the ability to add scoped css for this kind of elements.\r\n\r\n\r\n## 2. Functionnal i18n\r\n\r\ni18n in functional components is not ideal since functional components do not have an i18n instance.\r\n\r\nOne way to make it work is to use a small `translator` utility as in:\r\n\r\n```js\r\n\r\nconst getI18n = ({ parent: vm }) => {\r\n  do if (vm.$i18n) return vm.$i18n\r\n  while ((vm = vm.$parent))\r\n}\r\n\r\nconst translator = (Component, ctx, locale) => {\r\n  const i18n = getI18n(ctx)\r\n  const { messages } = Component.options.i18n ?? {}\r\n  return (key, ...values) =>\r\n    i18n?._t(key, locale || i18n.locale, messages ?? i18n._getMessages(), null, ...values) ?? key\r\n}\r\n\r\nconst XComponent = Vue.extend({\r\n  name: 'x-component',\r\n\r\n  functional: true,\r\n\r\n  i18n: {\r\n    messages: {\r\n      en: { foo: 'my foo' },\r\n      fr: { foo: 'le foo' },\r\n    },\r\n  },\r\n\r\n  props: {\r\n    locale: { type: String, default: null },\r\n  },\r\n\r\n  render(h, ctx) {\r\n    const t = translator(XComponent, ctx, ctx.props.locale)\r\n\r\n    return h('div', {}, t('foo'))\r\n  }\r\n})\r\n\r\nexport default XComponent\r\n```\r\n\r\nAs you can see from this example, having the ability to \"find\" `$options` in `ctx` would make the code a lot nicer"],"labels":["feature request"]},{"title":"Transition on overflowed elements prevents scroll","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/johnjleider\/pen\/MVqyXB](https:\/\/codepen.io\/johnjleider\/pen\/MVqyXB)\r\n\r\n### Steps to reproduce\r\n- Click the button to open the menu\r\n- As the element is transitioning in, begin to scroll (try not to move your mouse while scrolling)\r\n\r\n### What is expected?\r\nThe scrollable area continues to scroll\r\n\r\n### What is actually happening?\r\nThe scrolling area will get stuck. The scrolling event is still being fired but is not actually scrolling the content. Once you move your mouse and start to scroll again, it works as expected.\r\n\r\nIf you wait for the transition to finish before scrolling, the bug does not present itself.\r\n![scroll](https:\/\/user-images.githubusercontent.com\/9064066\/38321350-643295b6-3805-11e8-92ff-ddd2fb3eecd2.gif)\r\n\r\n---\r\nWe had a report of the `v-select` component not scrolling. We have confirmed this is only happening in Chrome 65, but extends back to even 0.15 of the framework (Vuetify). I created the attached codepen to determine if it was framework specific or generally reproducible.\r\n\r\nWhile their may be other css properties that trigger this issue, I have only had success with opacity and happens specifically with the `enter` declaration. If you remove the entry animation, this does not occur.\r\n\r\n**Removed entry animation** https:\/\/codepen.io\/johnjleider\/pen\/ZxMObZ?editors=1111\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I'm unable to reproduce it on OSX, are you sure this isn't just a browser bug? Could you try adding the classes manually without Vue?","Here is an example without the transition system: https:\/\/codepen.io\/johnjleider\/pen\/BrOzdV\r\n\r\nAs far as it being a Chrome bug, no idea.\r\n\r\nedit: I'm on Windows 10. Can confirm other OSX users cannot reproduce either.","FYI: Linux with chrome is working for me ","@johnleider assuming your commit fixes this issue, thus will close this ticket. Feel free to reopen, if the issue persists and is a `vue core` issue","My commit does not fix this issue. I discovered this issue while debugging a Chrome 65 related bug with the **contain** css property in Vuetify."],"labels":["browser quirks","transition"]},{"title":"Provide a way to define different name for prop attribute","body":"### What problem does this feature solve?\r\nIn most of cases, it's not really comfortable to use `initialProp` as prop name, for example, or have `normalizedProp` inside a component, which takes some passed prop and transforms it. Code looks bloated and reminds more workaround than a good solution.\r\n\r\nHaving ability to change attribute name of prop would be great. Something like:\r\n```javascript\r\nrawProp: { attributeName: \"prop\" }\r\n```\r\n\r\n### What does the proposed API look like?\r\n```html\r\n<component size=\"md\"> ... <\/component>\r\n```\r\n```javascript\r\ncomputed: {\r\n  size: {\r\n    switch (this.rawSize) { ... } \/\/ returns something in case blocks\r\n  }\r\n},\r\nprops: {\r\n  rawSize: {\r\n    attributeName: \"size\",\r\n    type: String\r\n  }\r\n}\r\n```\r\n\r\nThus, using any of proposed solutions above, `this.size` inside component would return transformed value (for example, `h4` or just `4`).\r\n\r\nI believe having this feature would be very awesome and help us to write cleaner code.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I'm interested in this feature too. Is this feature confirmed to be implemented? I'm willing to work on this.\r\n\r\nEdit:\r\n\r\nI'm currently now working on this, please feel free to jump in.","Besides, there's also another enhancement about `props`.\r\n\r\nHere's a simple code.\r\n\r\n```js\r\nprops:{\r\n  size: {\r\n    type: Number,\r\n  }\r\n}\r\n```\r\n\r\nAnd here's a parent component:\r\n\r\n```html\r\n<parent>\r\n  <child size=\"1\"><\/child>\r\n<\/parent>\r\n```\r\n\r\nWe know it's a wrong usage, but I think, now that we provided the field `type`, we can call `Number(value)` to change it's type?\r\n\r\nAfter seeing this issue, I think maybe my choice can be a default function of his `transform` function.","Regarding the transform, it's basically `coerce` from Vue 1 and it was removed. The feature request is about **having different name locally for a prop** but the transform feature has been asked many times already (#2218, https:\/\/github.com\/vuejs\/vue\/issues\/7657) and it's achievable in userland: https:\/\/github.com\/posva\/vue-coerce-props. ","@posva, I've updated FR description.","To give this some life again, I am also very much interested regarding this feature.  I would though call it `propName` to stay in line with it being props:\r\n\r\n```js\r\nprops: {\r\n  rawSize: {\r\n    propName: 'size',\r\n    type: Number,\r\n    default: 1,\r\n  }\r\n}\r\n```","Here is a Vue mixin ([fjc0k\/vue-messenger](https:\/\/github.com\/fjc0k\/vue-messenger)) including a series of useful enhancements to Vue components props:\r\n\r\n- [Transform props](https:\/\/github.com\/fjc0k\/vue-messenger#transform-props)\r\n- [Enum-type props](https:\/\/github.com\/fjc0k\/vue-messenger#enum-type-props)\r\n- [Numeric-type props](https:\/\/github.com\/fjc0k\/vue-messenger#numeric-type-props)\r\n- [Listen for receiving props](https:\/\/github.com\/fjc0k\/vue-messenger#listen-for-receiving-props)\r\n- [Two-way data binding props](https:\/\/github.com\/fjc0k\/vue-messenger#two-way-data-binding-props)\r\n\r\nHope this helps.","It's been a while, but I'm going to bring it up again, what's the status of this feature request? Is it confirmed or already implemented? \r\n\r\nThe proposed ([fjc0k\/vue-messenger](https:\/\/github.com\/fjc0k\/vue-messenger)) does not solve the issue. Again, we simply want an alias to prop names, so we wouldn't have to write `initialThis`, `initialThat` all the time.\r\n\r\nI'm willing to work on this feature, is it confirmed\/implemented? ","I'm also very interested in this. I just have something to point out:\r\nCurrently we look at props as being a component's documentation. An alias would be just for internal use.\r\nWouldn't it be better if aliases were a separate option? Something like:\r\n```javascript\r\nexport default {\r\n    props: {\r\n        size: {\r\n            type: Number,\r\n            default: 100\r\n        },\r\n\r\n        position: {\r\n            type: Object,\r\n            default: () => ({ x: 0, y: 0 })\r\n        }\r\n    },\r\n\r\n    aliases: {\r\n        initialPosition: 'position'\r\n    }\r\n}\r\n```\r\nThis way, props are kept with just the information the caller needs, nothing more.","Not really because it's part of the prop definition so it belongs in one property. Documentation tools can still skip it","It seems to me that this would be preferable:\r\n```javascript\r\nprops: {\r\n  size: {\r\n    type: String,\r\n    alias: \"rawSize\"\r\n  }\r\n}\r\n```\r\nRather than this:\r\n```javascript\r\nprops: {\r\n  rawSize: {\r\n    type: String,\r\n    propName: \"size\"\r\n  }\r\n}\r\n```\r\n\r\nThe external facing prop name should remain as the key in the `props` object regardless of whether an alias is set or not. Adding an alias for internal use should simply require the addition of a property to that prop spec, not changing the property key.\r\n\r\nHere is an example of an existing `size` prop which the develop later wants to alias within this component:\r\n\r\nOriginal proposal:\r\n```javascript\r\nprops: {\r\n  size: {\r\n    type: String\r\n  }\r\n}\r\n```\r\ngets changed to:\r\n```javascript\r\nprops: {\r\n  rawSize: {\r\n    type: String,\r\n    propName: \"size\"\r\n  }\r\n}\r\n```\r\n\r\nMy suggestion:\r\n```javascript\r\nprops: {\r\n  size: {\r\n    type: String\r\n  }\r\n}\r\n```\r\ngets added to:\r\n```javascript\r\nprops: {\r\n  size: {\r\n    type: String,\r\n    alias: \"rawSize\"\r\n  }\r\n}\r\n```\r\n","**Edit**: Oops, I made a mistake, I was intending to reply to vuejs\/rfcs#10. But it's still valid here. I'll reply in there too.\r\n\r\nI think the examples list in the Motivation section of the RFC (as well as some use cases commented) are not good arguments for this proposal.\r\n1. This example expresses its intent quite accurately, the prop name indicates that it's the initial value, which is different from the internal mutable value. I think making this distinction is preferable.\r\n```js\r\nprops: ['initialCounter'],\r\ndata() {\r\n  return {\r\n    counter: this.initialCounter\r\n  }\r\n}\r\n```\r\n2. This example is a bit representative for a lot of arguments around the previously commented use cases of props coercion, sanitization or preprocessing in general.\r\n```js\r\nprops: ['size'],\r\ncomputed: {\r\n  normalizedSize() {\r\n    return this.size.trim().toLowerCase()\r\n  }\r\n}\r\n```\r\nWith the introduction of Composition API, those use cases could be handled elegantly:\r\n```js\r\nprops: ['size'],\r\nsetup(props) {\r\n  const size = computed(() => {\r\n    return props.size.trim().toLowerCase()\r\n  })\r\n\r\n  return {\r\n    size\r\n  }\r\n}\r\n```\r\n\r\n<hr\/>\r\n\r\nThat being said, I'm **not** entirely against this. The Swift example in the RFC regarding argument labels is what in the similar vein with this proposal.\r\nTake that example into the context of Vue:\r\n```js\r\nprops: {\r\n  person: String,\r\n  from: {\r\n    as: 'hometown',\r\n    type: String\r\n  }\r\n}\r\n```\r\nAnd take the example of the new `<teleport>` component (though it's not implemented with normal component options). Its target prop name is `to`, but it's not ideal to refer it internally as `to`.\r\nFor the sole purpose of renaming (or aliasing), we could do it in setup function:\r\n```js\r\nprops: {\r\n  to: {\r\n    type: [String, Element]\r\n  }\r\n},\r\nsetup(props) {\r\n  const target = toRef(props, 'to')\r\n\r\n  \/\/ setting up\r\n\r\n  return {\r\n    target\r\n  }\r\n}\r\n```\r\nBut it's not as expressive and cohesive as following IMO:\r\n```js\r\nprops: {\r\n  to: {\r\n    as: 'target',\r\n    type: [String, Element]\r\n  }\r\n},\r\nsetup(props) {\r\n  \/\/ setting up\r\n\r\n  return {\r\n    \/\/\r\n  }\r\n}\r\n```\r\n\r\nSo, in summary:\r\n1. IMHO it's a bit of a detour to use this feature to solve the problems of props preprocessing of sort.\r\n2. This proposal can be useful for providing the feature of argument labels.","This is a cool feature. I think the idea is similar to that of how Swift allows you to have an internal variable and external parameter name. (https:\/\/useyourloaf.com\/blog\/swift-named-parameters\/)\r\n\r\nSometimes it makes sense to have verbose external names for clarity, and shorter names inside the component.\r\n\r\nFor example, a component can have a long name like this:\r\n```html\r\n<MyTable v-bind:userDataFromSomeAPI=\"data\" \/>\r\n```\r\n\r\nbut inside the component I don't want to refer to it as ```userDataFromSomeAPI```, but just as ```user```.\r\n\r\nSo I would really like this! I think ```as``` or ```alias``` are good, though I like ```as``` for brevity.\r\n","Another use case for such alias is having components created with `:is=\"component\"` where you create completely different components with different internal logic, but you pass data inside of such components with a unified prop, something like `payload`, but for clarity reasons you want the prop to be named differently in every component that receives it","Something like `from` from provide\/inject would be awesome also\r\nhttps:\/\/vuejs.org\/v2\/api\/#provide-inject\r\n\r\n```\r\ninject: {\r\n    foo: {\r\n      from: 'bar',\r\n      default: 'foo'\r\n    }\r\n}\r\n```\r\n\r\n  ","It's very annoying to have different names for `data` and `props` or having ugly hacks like `<some-component :props=\"{myProp: someVal }\"\/>` to overcome Vue limitations in this area.","Any progress?  would be a nice to have...!\r\n(my use case is to support international developers, so the prop name is more intuitive in each language)\r\n\r\nas a workaround: (in the meantime) add a new prop for every alias, and then using computed value ... but it adds more lines to the component (compared to a simple one line as @hrobertson suggested with:\r\n`props: {\r\n  size: {\r\n    type: String,\r\n    alias: \"rawSize\"\r\n  }\r\n}`","> Another use case for such alias is having components created with :is=\"component\" where you create completely different components with different internal logic, but you pass data inside of such components with a unified prop, something like payload, but for clarity reasons you want the prop to be named differently in every component that receives it\r\n\r\nThis is my use case. Currently what I do isn't terrible, just looking for more elegance and eliminating one extra variable:\r\n\r\n`<component :is=\"component\" :payload=\"data\" \/>`\r\n\r\nWith 20 components or so, and inside any given component pass prop payload into a const.\r\n\r\nExample: Customer component:\r\n\r\n```\r\nconst props = defineProps<{\r\n    payload: any\r\n}>()\r\nconst Customer = computed(() => props.payload)\r\n```\r\n\r\nWhich allows me to use `Customer` in the template, and not `payload` peppered everywhere."],"labels":["feature request"]},{"title":"root opts attributes support","body":"### What problem does this feature solve?\r\nThe desired opts feature should offer the possibility to provide data from the markup (mostly from backend) to the vue instance.\r\nSo you can pass options\/params from outside the vue scope. Example use case:\r\nhttps:\/\/forum.vuejs.org\/t\/passing-props-to-root-instances-in-2-0\/244\r\n\r\nRight now this requires custom helpers\/code to pipe the data through to the component.\r\nMuch better would be a more comfortable way similar the way riot does it with opts\r\nhttp:\/\/riotjs.com\/api\/#mounting\r\n\r\n\r\n### What does the proposed API look like?\r\nSince the instance root is not a custom tag (compared to riot) I can imagine using prefixed attributes e.g. `data-opt-[NAME]`\r\nSo the root may look like this:\r\n```html\r\n<div id=\"myRoot\" data-opt-firstname=\"John\" data-opt-lastname=\"Smith\"><\/div>\r\n```\r\nand within the template you can access it as\r\n```\r\n<template>\r\n    <span>Hello {{ opts.firstname }} {{ opts.lastname }}<\/span>\r\n<\/template>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["> Much better would be a more comfortable way similar the way riot does it with opts\r\n> http:\/\/riotjs.com\/api\/#mounting\r\n\r\nThat doesn't look at all like the API you propose further down:\r\n```html\r\n<div id=\"myRoot\" data-opt-firstname=\"John\" data-opt-lastname=\"Smith\"><\/div>\r\n```\r\n\r\n\r\nIt looks much more like simply passing `propsData` when creating the instance, which looks like this:\r\n\r\n```javascript\r\nnew Vue ({\r\n  el: '#app',\r\n  propsData: {\r\n    firstname: 'John'\r\n  }\r\n})\r\n```\r\nAdding all  `data-` properties as props could be as imply as:\r\n```javascript\r\nconst el = document.getElementById('app')\r\nnew Vue ({\r\n  el: el,\r\n  propsData: {\r\n    ...el.dataset\r\n  }\r\n})\r\n```\r\n","Thanks @LinusBorg  for the quick response!\r\n\r\nI've tried to implement your example with the propsData like this, but it doesn't work:\r\nnothing appears in the template and the vue browser extension tells me the same (undefined)\r\n\r\n```html\r\n<div id=\"myRoot\" data-firstname=\"John\"><\/div>\r\n```\r\n```javascript\r\nimport Vue from 'vue'\r\nimport myRoot from '.\/myRoot.vue')\r\nconst el = document.getElementById('myRoot')\r\nnew Vue({\r\n    el: el,\r\n    propsData: {\r\n        ...el.dataset\r\n    },\r\n    render: h => h(myRoot)\r\n})\r\n```\r\n```\r\n<template>\r\n    <span>Hello {{ firstname }}<\/span>\r\n<\/template>\r\n<script>\r\n    export default {\r\n        props: ['firstname']\r\n    }\r\n<\/script>\r\n```\r\n\r\nHowever even if this would work it has several downsides:\r\n\r\n- it assumes I'm working with IDs what I'm not because let's 'myRoot' call 'pagination' and I want more than one pagination on the page\r\n- I need to specify all of my options as props within the template (vue file)\r\n\r\nMaybe I'm wrong and just overseeing something but I haven't seen a way yet to pipe through data from markup (non vue origin) to the template. At least no way to do it as easy as in riot where it's really that simple:\r\n\r\n- custom tag in the markup (= vue root elem) with custom attr (just like `<mytag name=\"John\"><\/mytag>`\r\n- easy access in the tag file (= vue component \/ template) via `<span>{ opts.name }<\/span>`\r\n\r\nFor me the propsData solution doesn't meet that demand, does it?\r\n","**- Update -**\r\n\r\nI've found a way that works for me although it somehow doesn't feel straight forward.\r\nLooks like this (this time I'm using pagination to have a more 'realistic' example):\r\n\r\nhome.html\r\n```html\r\n<body>\r\n    <div class=\"pagination\" data-page=\"1\"><\/div>\r\n    <p>Lorem ipsum<\/p>\r\n    <div class=\"pagination\" data-page=\"1\"><\/div>\r\n    <script src=\"\/assets\/dist\/pagination.js\"><\/script>\r\n<\/body>\r\n````\r\n\r\nsrc\/pagination.js\r\n```javascript\r\nimport Vue from 'vue';\r\nimport Pagination from '.\/pagination.vue';\r\ndocument.querySelectorAll('.pagination').forEach(function(elem){\r\n    new Vue({\r\n        el: elem,\r\n        render: h => h(Pagination),\r\n        data: { opts: {} },\r\n        beforeMount: function() {\r\n            this.opts = this.$el.dataset;\r\n        }\r\n    });\r\n});\r\n```\r\n\r\nsrc\/pagination.vue\r\n```vue\r\n<template>\r\n    <div>\r\n        <span>Current page: {{ opts.page }}<\/span>\r\n    <\/div>\r\n<\/template>\r\n<script>\r\n    export default {\r\n        data() {\r\n            return {\r\n                opts: this.$root.opts\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n```\r\n\r\nIf there's no easier way to do this and you don't think there's the need to simplify this via vue, you may close this feature request.","From the previous two comments I have two suggestions:\r\n\r\nYou won't be able to drop this right in, but might give you something to consider and try.\r\n\r\nIf you had a vue instance that wrapped your html (closer to the level of the body) you could pass in variables just like you do with your pagination.vue template:\r\n\r\npagination.js\r\n```\r\n...\r\nimport Pagination from '.\/Pagination.vue'\r\n...\r\ncomponents: { Pagination },\r\n...\r\n```\r\ntemplate\r\n```\r\n<body>\r\n    <div id=\"app\">\r\n        <pagination :data=\"opts.data1\" data-page=\"1\"><\/div>\r\n       <p>Lorem ipsum<\/p>\r\n        <pagination :data=\"opts.data2\" data-page=\"1\"><\/div>\r\n    <\/div>\r\n<\/body>\r\n```\r\n\r\nAlternatively, is it possible to solve this with a plugin? Inspired by the way using Vuex gives the stores to all children, could you make a plugin which provides these props to all components?\r\n\r\n```javascript\r\nconst userOptionsFromServer = {...}\r\n\r\nconst UserDataPlugin = {\r\n  install (Vue) {\r\n    Vue.mixin({\r\n      created() {\r\n        this.opts = userOptionsFromServer\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nVue.use(UserDataPlugin)\r\n```","Thank you @ejweiler for your help!\r\n\r\nCorrect me if I'm wrong but the template syntax of your example requires the vue compiler in client, right?\r\nOr can this be interpreted by vue with runtime only?\r\n\r\n```\r\n<pagination :data=\"opts.data1\" ...\r\n```\r\n\r\nThe reason I'm breaking down all my components (pagination, search etc.) into independent files instead of one big bundled app.js is that I want load as less code on each page as possible.\r\nThus I'm using vue without compiler.\r\n\r\nSince the HTML gets build in the backend I can't precompile it (SSR of vue is not an option) and thus can only precompile the vue files.\r\n\r\nThe way I've posted above is the only one I've found so far that let's my include the same component on the page with different data\/options from the backend\r\n\r\n```html\r\n<body>\r\n    <div class=\"pagination\" data-title=\"header pagination 123\"><\/div>\r\n    <p>Lorem ipsum<\/p>\r\n    <div class=\"pagination\" data-title=\"footer pagination 456\"><\/div>\r\n    <script src=\"\/assets\/dist\/pagination.js\"><\/script>\r\n<\/body>\r\n```","@SassNinja I didn't realize you had those constraints, how about the option of trying a plugin?","So I also found a solution that is pretty easy to use, but I'm not sure if it violates some of vue's rules since we will have the `root component` and `template component` bound to the same DOM element.\r\n\r\nex: https:\/\/codepen.io\/duprasa\/pen\/mvZQrB?editors=1010\r\n\r\ncode:\r\n```\r\n<component id=\"component\" prop-a =\"Value A\"><\/component>\r\n```\r\n\r\n```\r\nlet el = document.getElementById(\"component\")\r\nlet component_instance = (new Vue({el: el, components: {component: component_options}})).$children[0];\r\n```"],"labels":["feature request"]},{"title":"<transition-group> and v-show triggers move transition on enter","body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/chrisvfritz\/845Lee66\/](https:\/\/jsfiddle.net\/chrisvfritz\/845Lee66\/)\r\n\r\n### Steps to reproduce\r\n1. Open the fiddle\r\n2. Click the \"Toggle\" button\r\n3. Watch the `move` transition trigger on enter\r\n\r\n### What is expected?\r\nJust like with `v-if`, move transitions should not be triggered on enter (note that it is already _not_ triggered on leave). \r\n\r\n### What is actually happening?\r\nI haven't checked in the source yet, but I'm guessing that since elements with `display: none` still technically have coordinates:\r\n\r\n```\r\nDOMRect { x: 0, y: 0, width: 0, height: 0, top: 0, right: 0, bottom: 0, left: 0 }\r\n```\r\n\r\nThe `move` transition is triggered on enter. I'm not sure why it wouldn't also occur on leave though. \r\n\r\n---\r\nThis may be connected to [#5800](https:\/\/github.com\/vuejs\/vue\/issues\/5800). Also, special thanks to @rachelnabors for finding this bug!\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Woohoo! I managed to break something!","Can I give this issue a try?","@vctt94 Of cause, welcome \ud83d\ude03"," this coordinate is using getBoundingClientRect method to get value.\r\ngetBoundingClientRect method is value 0 when display: none \r\n\r\nHow about change of line 8424 of vue.js\r\nc$1.elm.style.display = 'block';\r\nc$1.data.pos = c$1.elm.getBoundingClientRect();\r\n\r\nThe value can be taken\r\n\r\n","hey @wlkuro, I believe you are right, and that is the cause. But we are not supposed to make changes on dist files. It is a self generated file, but the change you suggested does work. ","@wlkuro @vctt94 I think a better solution is not to add `v-move` on element and and not to execute `_enterCb` just like `v-if`.","I see, what exactly this _enterCb does? ","@vctt94 sorry for not seeing your pr \ud83d\ude2d\r\n[`_enterCb`](https:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/platforms\/web\/runtime\/modules\/transition.js#L115) should be executed when enter transition was finished or move transition was triggered. \r\nbut I think it is better that `v-show` has similar behavior as `v-if`.\r\nif `_enterCb` was executed, `v-show` would lose enter transition.","I was playing around with an example from the docs and hit the same issue as described (e.g. toggle button: https:\/\/codepen.io\/pen\/BGjJGL).\r\n\r\nSince the PR is still open - are there currently any workarounds for this? Using `v-if` works perfectly but is not an option due to performance reasons."],"labels":["bug","has PR","transition"]},{"title":"Subscribe to all custom events on a child component","body":"### What problem does this feature solve?\r\nWould make writing wrapper components easier\r\n\r\n### What does the proposed API look like?\r\nWhen v-on receives a function it should trigger on every custom event emitted by the child\r\n\r\n    <my-custom-component v-bind=\"$props\" v-on=\"onAnyEvent\"><\/my-custom-component>\r\n\r\nArgument one could be the name of the event\r\n\r\n    onAnyEvent(eventName, eventArgs) { \/\/ do something }\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["IMHO, in cases to proxy events, `v-on=\"$listeners` would be more intuitive.\r\n\r\nAnd if the case is that you want to do different things for different events.\r\n``` vue\r\n<my-custom-component v-bind=\"$props\" v-on=\"onAnyEvent\"><\/my-custom-component>\r\n\r\nonAnyEvent(eventName, eventArgs) {\r\n  switch (eventName) {\r\n    case 'click':\r\n    case 'input':\r\n  }\r\n}\r\n```\r\nis not make things easier than:\r\n``` vue\r\n<my-custom-component v-bind=\"$props\" v-on=\"{ click: handler1, input: handler2 }\"><\/my-custom-component>\r\n```","The idea is to wrap every event and treat them equally (like re-emit them from the wrapper component)"],"labels":["feature request"]},{"title":"feat(compiler): add warning when directives other than v-for and v-if used on template tag","body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [x] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\nAccording to the docs, the `v-show` directive [doesn't support](https:\/\/vuejs.org\/v2\/guide\/conditional.html#v-show)  the `<template>` element. So, if a `v-show` is used on a template, it is essentially ignored. However, it currently does that without any warning. This pull request adds a warning when a `v-show` directive is used on a template tag.","comments":["I've made the changes. I was thinking other directives also wouldn't be allowed, but I wasn't sure if that was the case 100% of the time.","Shouldn't `v-slot` also be allowed?"],"labels":["in review"]},{"title":"Extending object syntax of v-on to support modifiers","body":"### What problem does this feature solve?\r\nThe object syntax of the v-on directive is vital in achieving conditional binding of event listeners, as shown in the discussions at https:\/\/github.com\/vuejs\/vue\/issues\/7349.\r\n\r\n    <div v-on=\"{ mouseover: condition ? handler : null }\">\r\n\r\nHowever, the current object syntax does not allow modifiers.\r\n\r\nThis feature request suggest that we extend the object syntax in the following way to allow modifiers.\r\n\r\n    <div v-on=\"{ click: { left: { prevent: condition ? leftClickHandler : null } },  mouseover: { stop: mouseoverHandler } }\">\r\n\r\nThe above example would conditionally install leftClickHandler on \"click.left.prevent\" and mouseoverHandler on \"mouseover.stop\".\r\n\r\nThe embedded object notation is also conceptually consistent with the dot-notation already adopted in both function and inline syntax.\r\n\r\n\r\n### What does the proposed API look like?\r\nThe proposed v-on object syntax would like like this, which is an extension of the current syntax.\r\n\r\n    <div v-on=\"{ click: { left: { prevent: condition ? leftClickHandler : null } },  mouseover: { stop: mouseoverHandler } }\">\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I think the below syntax would be better (no object embedding):\r\n\r\n```vue\r\n<div v-on=\"{ 'click.left.prevent': condition ? leftClickHandler : null,  'mouseover.stop': mouseoverHandler }\">\r\n```","This is possible today by using https:\/\/vuejs.org\/v2\/guide\/render-function.html#Event-amp-Key-Modifiers\r\n\r\n```vue\r\n<button v-on=\"{ '~click': () => foo = new Date() }\">Trigger only once<\/button>\r\n```","Hi! I'm sorry to bring up such an old issue, but with the update to 2.6.11 i found that a thing related to this i used a lot in my project broke down.\r\nI'm attaching `v-on:click` and `v-on:click.native` to a `<component` tag, which can dynamically be a Vue component or a DOM element. \r\nThis now emits warnings, flooding logs and affecting development performance. \r\nI tried to attach those listeners dynamically but there's no object syntax for the `.native` modifier. How can i handle this?","@Zsavajji if you think you found a bug please file a new issue with a  boiled down reproduction","Not sure if it is a bug or expected behavior. Will open a bug report tomorrow :)","Hello.\r\nI tried to do it like this, but it does not work.\r\n```js\r\n\/\/ not working\r\nv-on=\"{ [condition ? 'click.stop' : 'click'] : eventfunc }\"\r\n\/\/ or\r\n\/\/ error\r\nv-on=\"{ condition ? 'click.stop' : 'click' : eventfunc }\"\r\n```\r\nIs there any other solution?\r\nThanks in advance!","This does not seem to work for all event methods. Only those which have the proprietary prefixes.","> This is possible today by using [vuejs.org\/v2\/guide\/render-function.html#Event-amp-Key-Modifiers](https:\/\/vuejs.org\/v2\/guide\/render-function.html#Event-amp-Key-Modifiers)\r\n> \r\n> ```\r\n> <button v-on=\"{ '~click': () => foo = new Date() }\">Trigger only once<\/button>\r\n> ```\r\n\r\nThis seems nice, even if undocumented. However, the `.native` modifier has no prefix, and seems unsupported with the object syntax. Is there any workaround for now?","There doesn't seem to be an event amp key modifier for `.native`, which is what I need.","I needed `.prevent`\r\n\r\nTo work around this I did:\r\n`<div @contextmenu=\"condition ? ($event.preventDefault(), handler($event)) : null\">`\r\n\r\nIf the object syntax for v-on included `.prevent` I would probably be able to bind conditionally, which would be my preference.","[This is now documented here](https:\/\/v3.vuejs.org\/api\/directives.html#v-on):\r\n>  v-on also supports binding to an object of event\/listener pairs without an argument. **Note when using the object syntax, it does not support any modifiers.**\r\n\r\nThis means `{ 'keyup.left': onLeftRelease }` doesn't work. The alternative is obviously to handle this the old school way - [the native JS equivalents of some modifiers are described here](https:\/\/v3.vuejs.org\/guide\/render-function.html#v-on) (Event Modifiers section)\r\n\r\nOn one hand I know v-on object syntax is rarely used, however it's surprising this doesn't exist. As rationale, Vue is doing something similar with [multiple v-models](https:\/\/v3.vuejs.org\/guide\/component-custom-events.html#multiple-v-model-bindings) no? Seeing the magic behavior of emitting `update:propName` sort of has the same vibe as passing the magic string `keyup.left` to v-on. This probably reads funny but hopefully you can see where I'm coming from.\r\n","**Read the update at the bottom, you probably don't want this solution**\r\n\r\nI previously ran into this issue (you can see the PR where I linked here in the feed above about a month ago) and then today I ran into this same problem again. Not content with not having a solution, I kept digging around, and discovered that you can use [`withModifiers`](https:\/\/vuejs.org\/api\/render-function.html#withmodifiers) (you can import from `@vue\/runtime-dom`, though it is marked as `@private` :shrug:). You can see it working on this codesandbox:\r\n\r\nhttps:\/\/codesandbox.io\/s\/nice-brown-j4q94s?file=\/src\/components\/HelloWorld.vue:2364-2565\r\n\r\nIn fact, I randomly tried to get it working with multiple different listeners (because I wanted to be able to bind both a capture and non-capture event listener) and it totally works.\r\n\r\nI have no idea if this is documented anywhere. I'd searched the Vue documentation so carefully before for _some_ solution to this problem. I have also not looked into how this is working in the Vue source code to tell whether this is working by accident or by design (or if there are any significant drawbacks to using this method.\r\n\r\nHope this helps someone else too :grinning: \r\n\r\nUpdate: After checking the implementation, there are limitations:\r\n\r\n```\r\nconst systemModifiers = ['ctrl', 'shift', 'alt', 'meta'];\r\nconst modifierGuards = {\r\n    stop: e => e.stopPropagation(),\r\n    prevent: e => e.preventDefault(),\r\n    self: e => e.target !== e.currentTarget,\r\n    ctrl: e => !e.ctrlKey,\r\n    shift: e => !e.shiftKey,\r\n    alt: e => !e.altKey,\r\n    meta: e => !e.metaKey,\r\n    left: e => 'button' in e && e.button !== 0,\r\n    middle: e => 'button' in e && e.button !== 1,\r\n    right: e => 'button' in e && e.button !== 2,\r\n    exact: (e, modifiers) => systemModifiers.some(m => e[`${m}Key`] && !modifiers.includes(m))\r\n};\r\n\/**\r\n * @private\r\n *\/\r\nconst withModifiers = (fn, modifiers) => {\r\n    return (event, ...args) => {\r\n        for (let i = 0; i < modifiers.length; i++) {\r\n            const guard = modifierGuards[modifiers[i]];\r\n            if (guard && guard(event, modifiers))\r\n                return;\r\n        }\r\n        return fn(event, ...args);\r\n    };\r\n};\r\n```\r\n\r\nThat list are the only modifiers supported, all ones that can be easily applied manually anyway without pulling in @vue\/runtime-dom into your bundle.\r\n\r\n**So probably this isn't a very good solution, sorry for the false alarm** :cry: ","This problem still at vue3. \r\n\r\n`v-on supports binding to an object but it does not support any modifiers.`","I ended up creating a wrapper component like this:\r\n\r\n```\r\n<template>\r\n  <router-link v-bind=\"$attrs\" v-on=\"$listeners\" @click.native=\"onClick\">\r\n    <slot \/>\r\n  <\/router-link>\r\n<\/template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'RouterLinkWithClickEvent',\r\n  methods: {\r\n    onClick(...args) {\r\n      this.$emit('click', ...args);\r\n    }\r\n  }\r\n};\r\n<\/script>\r\n```"],"labels":["feature request"]},{"title":"keep-alive breaks initial transition","body":"### Version\r\n2.5.16 (but I also checked to version 2.5.5)\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/bpkpz6v6\/](https:\/\/jsfiddle.net\/bpkpz6v6\/)\r\n\r\n### Steps to reproduce\r\n- Add 3 items. You can see the animation on every item \u2705\r\n- Remove items in this order 3 -> 2 -> 1\r\n- Add 3 item. This time animation for item 1 is not being applied \u274c\r\n- Remove items but in reverse order 1 -> 2 -> 3\r\n- Again add items. Animation works correctly again \u2705\r\n\r\n\r\n### What is expected?\r\nTransition to work every time\r\n\r\n### What is actually happening?\r\nWhen transition-group inside keep-alive is activated after being deactivated, it sometimes does't apply a transition on the first rendered element.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["hmm I've just noticed that when I don't reset the id counter (`this.id--`) after removing an item then it works fine \ud83e\udd14 ","I think it's because of the `v-if`. It triggers before the component renders with the empty list of items. When you add a new one, it reactives, but the item is already there, so no animation happens. Ideally you should deactivate the component once the transition is finished. If you keep-alive the component, wouldn't make more sense to just use v-show without keep-alive?"],"labels":["transition"]},{"title":"v-model support for web components (stenciljs)","body":"### What problem does this feature solve?\r\nV-model support for web components(tested with web component implemented with ionic's stenciljs compiler).\r\n\r\nDoes not work:\r\n```\r\n<ui-input v-model=\"mySelect\" \/>\r\n```\r\n\r\nWorks:\r\n```\r\n<ui-input :value=\"mySelect\" @input=\"mySelect = $event.target.value\" \/>\r\n```\r\n\r\nCan this be enabled to support ignored elements as well that have been declared with:\r\n\r\n```Vue.config.ignoredElements = [\/^ui-\/];```\r\n\r\n### What does the proposed API look like?\r\nDeclaration\r\n```\r\nVue.config.ignoredElements = [\/^ui-\/];\r\n```\r\nUsage\r\n```\r\n<ui-input v-model=\"mySelect\" \/>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I tracked this down a bit and seems to come from how Vue treats custom components differently than a regular element like an `<input \/>`. \r\n\r\nFor regular inputs, Vue looks for the value in `$event.target.value` and finds it because the browser is emitting a regular InputEvent object.\r\n\r\nFor custom components like ion-input, it seems that Vue is expecting the value to be emitted directly and not as a subclass of Event. So, Vue looks for the value in `$event` rather than `$event.target.value`.\r\n\r\nThis behaviour is documented here: https:\/\/vuejs.org\/v2\/guide\/components.html#Using-v-model-on-Components\r\n\r\nThis was probably done to make the coding of custom components simpler: the developer wouldn't need to instantiate a new Event and emit it. \r\n\r\nA simple fix (and uneducated guess on my part) would be to get rid of the special case for custom components and check if what is being `$emit`'ed is actually an Event object and wrap it in an Event if it isn't.","Leaving a comment here as it may be helpful to others, whilst this definitely should be handled inside the vue project itself in the meantime if you're looking for a solution right now I've created a compile directive that is configurable and allows you to use the same syntax on web-components until a proper solution is in place:\r\n\r\nhttps:\/\/www.npmjs.com\/package\/vue-wc-model \r\n\r\nI wouldn't mind creating a PR and getting something implemented in vue itself but there is some unknowns regarding how this should be handled. For example, not all web components use the `input` and `change` handlers nor even expose `value` as a property on the event target (eg. components created via `vue-web-component-wrapper`). \r\n\r\nI think this needs to be thought out some more in terms of what to do. ","What if `v-model` accepted an event name as a directive argument? i.e.:\r\n\r\n `v-model:blur=\"fooBar\"`\r\n\r\nCould even be used for custom event names (as long as they didn't contain any colons or periods)\r\n\r\nAny event specified this way would set the model value to `event.target.value`, and do no underlying \"magic\" that happens with regular `v-model` or `.lazy` modifier.","Has anyone began to investigate this. This has had a huge impact on us in moving forward with using Vue. It also appears that Vue is the only framework where we are seeing binding issues with our web components. ","I really like the idea of `v-model:eventName`, that would definitely help us out. We've created a series of form web components that have their own APIs that work fine in Angular and React, but this issue is hampering out adoption in Vue. Would love to see some input from maintainers on this and would be interested in helping implement if needed.","We've also trying to use WebComponents with Vue. The problem here is, Vue must know this WebComponent implemented `input` event and have `value` in target, as what `<input>` do. I believe Vue can just assume this when `v-model` tis applied to any tag which is not a Vue component, nor a known non-text form component.","> Vue.config.ignoredElements = [\/^ui-\/];\r\n\r\nThat imho is not a good option name, should be more self-explanatory.\r\n\r\nHow about `.native` modifier? `v-model=\"foo\"` would use `$event` as a value, `v-model.native=\"foo\"` would use `$event.target.value`","Why should there be an extra modifier\/directive? The `v-model:<event>` construct is useful but isn't that a separate feature request?\r\n\r\nFor regular inputs Vue uses `$event.target.value` and for Vue components it uses `$event`. We already tell Vue that our web-components aren't Vue components by adding them to `Vue.config.ignoredElements`. Why can't v-model check this config, notice that an element is not a Vue component, and not use the Vue specific syntax in that case?\r\n","@ngfk 's solution looks better to me. No change to current api, and nothing should break in this way.","Note there are currently two 3.0 RFCs that uses the `v-model` directive argument for a different purpose: https:\/\/github.com\/vuejs\/rfcs\/pull\/8 https:\/\/github.com\/vuejs\/rfcs\/pull\/31\r\n\r\n[In RFC#31 there is a section that talks about `v-model` usage on custom elements.](https:\/\/github.com\/vuejs\/rfcs\/blob\/v-model\/active-rfcs\/0000-v-model-api-change.md#usage-on-custom-elements)\r\n\r\nThe problem with `Vue.config.ignoredElements` is that it is **runtime only**, so the compiler does not have that information and ends up outputting code that intended to be used for a Vue component. A solution for 2.x would be adding an option to the template compiler (configured via [`vue-loader` options](https:\/\/vue-loader.vuejs.org\/options.html#compileroptions)) which serves as the compile-time counterpart of `Vue.config.ignoredElements`.","I created a custom directive that makes this less painful. Suggestions or improvements are welcome!\r\n\r\n```js\r\n\/\/ model-custom-element.js\r\nimport Vue from 'vue';\r\n\r\nconst wm = new WeakMap();\r\n\r\nexport default {\r\n  bind(el, binding, vnode) {\r\n    const inputHandler = event => Vue.set(vnode.context, binding.expression, event.target.value);\r\n    wm.set(el, inputHandler);\r\n    el.value = binding.value;\r\n    el.addEventListener('input', inputHandler);\r\n  },\r\n\r\n  componentUpdated(el, binding) {\r\n    el.value = binding.value;\r\n  },\r\n\r\n  unbind(el) {\r\n    const inputHandler = wm.get(el);\r\n    el.removeEventListener(el, inputHandler);\r\n  }\r\n};\r\n```\r\n\r\n```js\r\n\/\/ main.js\r\nimport modelCustomElement from '.\/model-custom-element.js';\r\n\r\n\/\/ ... your vue init here\r\n\r\nVue.directive('model-custom-element', modelCustomElement);\r\n```\r\n\r\n```html\r\n<!-- Usage example -->\r\n<flux-textfield v-model-custom-element=\"name\"><\/flux-textfield>\r\n```","@claviska I just used your code and adapted it to my custom WC input ;-) Thanks a lot!!! :tada: \r\n\r\nI had to do add na\u00efve support for \"dot notation\" and since I already had lodash in the project, I used its `get` function.","The current situation with `v-model` is causing some difficulties in creating a simple API for our custom components. To support the unadorned `v-model` parameter for a two-way prop binding, the component needs to introduce a new `modelValue` prop. To support a one-way prop binding, either users are asked to assign `:model-value=\"x\"` or the component can introduce a second prop value, such as `value` or `checked` or whatever's appropriate.\r\n\r\nIn the second case, the component seemingly needs to watch (f.ex) both of `modelValue` and `value` and use whichever was updated most recently, which makes the code more confusing to write and to document. In the first case, it's simply not intuitive coming from a vue-2 background where a static initial binding to `value` or `checked` is often used.\r\n\r\nMy preference if it's possible would be to allow components to override the default model value binding with a new top-level property on the definition, maybe something like this:\r\n\r\n```typescript\r\nexport const MyComp = defineComponent({\r\n  props: { value: String },\r\n  modelValue: \"value\",\r\n  setup(props, ctx) { .. }\r\n})\r\n```\r\n\r\nWith this definition writing `<my-comp v-model=\"x\" \/>` would effectively bind `value: x` and `onUpdate:value: val => (x = val)`. Specific named properties could still be bound using the extended `v-model:value=` syntax.\r\n\r\nThis change would also allow the default model value binding for that component to be changed later on without updating all invocations of the component, for example to bind by default to a live `input` property instead of the committed `value`.","> I created a custom directive that makes this less painful. Suggestions or improvements are welcome!\r\n> \r\n> ```js\r\n> \/\/ model-custom-element.js\r\n> import Vue from 'vue';\r\n> \r\n> const wm = new WeakMap();\r\n> \r\n> export default {\r\n>   bind(el, binding, vnode) {\r\n>     const inputHandler = event => Vue.set(vnode.context, binding.expression, event.target.value);\r\n>     wm.set(el, inputHandler);\r\n>     el.value = binding.value;\r\n>     el.addEventListener('input', inputHandler);\r\n>   },\r\n> \r\n>   componentUpdated(el, binding) {\r\n>     el.value = binding.value;\r\n>   },\r\n> \r\n>   unbind(el) {\r\n>     const inputHandler = wm.get(el);\r\n>     el.removeEventListener(el, inputHandler);\r\n>   }\r\n> };\r\n> ```\r\n> \r\n> ```js\r\n> \/\/ main.js\r\n> import modelCustomElement from '.\/model-custom-element.js';\r\n> \r\n> \/\/ ... your vue init here\r\n> \r\n> Vue.directive('model-custom-element', modelCustomElement);\r\n> ```\r\n> \r\n> ```\r\n> <!-- Usage example -->\r\n> <flux-textfield v-model-custom-element=\"name\"><\/flux-textfield>\r\n> ```\r\n\r\nThis is great! Thank you!","Here is a detailed article on how to support v-model with web components using a custom directive.\r\n\r\nhttps:\/\/muhimasri.com\/blogs\/how-to-create-custom-v-model-for-web-components\/\r\n\r\nCheers","@claviska @muhimasri Thank you for awesome solutions. Do you have any idea how to do the same in Vue3?\r\nThis code doesn't work because of breaking changes: the `expression` string is no longer passed as part of the `binding` object (https:\/\/v3.vuejs.org\/guide\/migration\/custom-directives.html#overview).","You are welcome @rahmanroman I will look into making it work in Vue3. As you mentioned, the `expression`  string is no longer being passed making it challenging to figure which data to update on input change.","> I created a custom directive that makes this less painful. Suggestions or improvements are welcome!\r\n> \r\n> ```js\r\n> \/\/ model-custom-element.js\r\n> import Vue from 'vue';\r\n> \r\n> const wm = new WeakMap();\r\n> \r\n> export default {\r\n>   bind(el, binding, vnode) {\r\n>     const inputHandler = event => Vue.set(vnode.context, binding.expression, event.target.value);\r\n>     wm.set(el, inputHandler);\r\n>     el.value = binding.value;\r\n>     el.addEventListener('input', inputHandler);\r\n>   },\r\n> \r\n>   componentUpdated(el, binding) {\r\n>     el.value = binding.value;\r\n>   },\r\n> \r\n>   unbind(el) {\r\n>     const inputHandler = wm.get(el);\r\n>     el.removeEventListener(el, inputHandler);\r\n>   }\r\n> };\r\n> ```\r\n> \r\n> ```js\r\n> \/\/ main.js\r\n> import modelCustomElement from '.\/model-custom-element.js';\r\n> \r\n> \/\/ ... your vue init here\r\n> \r\n> Vue.directive('model-custom-element', modelCustomElement);\r\n> ```\r\n> \r\n> ```\r\n> <!-- Usage example -->\r\n> <flux-textfield v-model-custom-element=\"name\"><\/flux-textfield>\r\n> ```\r\n\r\nThanks for this, works pretty well for primitive based models :) \r\nFor people wondering how to make it work as well for **Object based models**, you can replace this code : \r\n\r\n` const inputHandler = event => Vue.set(vnode.context, binding.expression, event.target.value);`\r\n\r\nBy this (using lodash) : \r\n\r\n```\r\nimport {set} from 'lodash';\r\n\/\/ ....\r\n\r\nconst inputHandler = event => set(vnode.context, binding.expression, event.target.value);\r\n```\r\n\r\n","this still happens in 2023,gods..."],"labels":["feature request"]},{"title":"Globally registered component naming converts to kebap-case when PascalCase is used","body":"### Version\r\n2.5.15\r\n\r\n### Steps to reproduce\r\nCurrently all globally registered components automatically convert their name to  kebap-case. \r\n\r\n```js\r\n\/\/ register component\r\nVue.component('RouterLink', {...})\r\n\r\n\/\/ get component fails, returns undefined\r\nVue.component('RouterLink')\r\n\r\n\/\/ get component works, returns the component\r\nVue.component('router-link')\r\n```\r\n\r\nIt would be nice to have the registered components also available as with their PascalCase naming. This would also mean that you could use the PascalCase naming in `.vue` templates, which is a nice way to quickly distinguish Vue components from HTML elements. Right now its is not possible, and to make it work this code has to be used:\r\n\r\n```html\r\n<template>\r\n\r\n  <RouterLink :to=\"link\">Link<\/RouterLink>\r\n\r\n<\/template>\r\n<script>\r\n{\r\n    components: {\r\n       RouterLink: Vue.component('router-link')\r\n   }\r\n}\r\n<\/script>\r\n```\r\n\r\n\r\n### What is expected?\r\nAccess globally registered components with their PascalCase naming if it was provided on register function call.\r\n\r\n### What is actually happening?\r\nFor now the component naming always converts to kebap-case.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["You probably mean the other way around:\r\n\r\n```js\r\nVue.component('FooLink', { template: `<p>Foo<\/p>` })\r\n\r\n!!Vue.component('FooLink') \/\/ -> true\r\n!!Vue.component('foo-link') \/\/ -> false (should be true)\r\n```","@posva You are right, sorry my bad. I recently tried to use the VueRouter with `RouterLink` which didn't work, looked up the repo a saw `Vue.component('RouterLink', Link)` which got me confused. However this was not the actual released version 3.0.1 i was using, which is still doing `Vue.component('router-link', Link)`.\r\n"],"labels":["improvement"]},{"title":"[SSR] \u670d\u52a1\u7aef\u6e32\u67d3\u80fd\u5426\u589e\u52a0\u81ea\u5b9a\u4e49 TemplateRenderer \u6216\u8005 \u63d0\u4f9b\u90e8\u5206inject\u7684\u53c2\u6570\uff1f","body":"### What problem does this feature solve?\r\n\u5f53\u6211\u4f7f\u7528 inject: true \u7684\u53c2\u6570\u6e32\u67d3 ssr \u9875\u9762\u65f6\uff0c\u6211\u53ea\u60f3\u5bf9 renderScripts \u8fd9\u90e8\u5206\u505a\u81ea\u5b9a\u4e49\u4fee\u6539\uff0c\u5176\u4ed6\u7ee7\u7eed\u6cbf\u7528\u9ed8\u8ba4templateRenderer\u7684render**\u3002\r\n\r\n\u5982\u679c \u6211\u8bbe\u7f6e\u4e86 inject: false\uff0c\u90a3\u6211\u5fc5\u987b\u5728 html\u6a21\u677f\u4e2d \u6dfb\u52a0 \u5404\u79cd {{ render** }} \u3002\r\n\r\n\u8bf7\u95ee\u6709\u6ca1\u6709\u66f4\u65b9\u4fbf\u7684\u65b9\u6cd5\uff1f\r\n\r\n### What does the proposed API look like?\r\n```\r\ncreateBundleRenderer({\r\n  inject:true,\r\n  renderScripts: function() { ... },\r\n})\r\n\r\n```\r\nor \r\n\r\n```\r\ncreateBundleRenderer({\r\n  inject:true,\r\n  templateRenderer: new otherTemplateRenderer(),\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["```\r\nconst { createBundleRenderer } = require('vue-server-renderer');\r\nconst Vue = require('vue');\r\n\r\n\/\/ \u521b\u5efa\u81ea\u5b9a\u4e49\u7684 templateRenderer\r\nconst customTemplateRenderer = {\r\n  renderScripts: function() {\r\n    \/\/ \u5728\u8fd9\u91cc\u81ea\u5b9a\u4e49\u4fee\u6539 renderScripts \u7684\u903b\u8f91\r\n    \/\/ \u60a8\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5df1\u7684\u4ee3\u7801\u6765\u4fee\u6539 renderScripts \u90e8\u5206\r\n  }\r\n};\r\n\r\n\/\/ \u521b\u5efa BundleRenderer \u65f6\u4f20\u5165 customTemplateRenderer\r\nconst renderer = createBundleRenderer(bundle, {\r\n  template: customTemplateRenderer,\r\n  \/\/ \u5176\u4ed6\u9009\u9879...\r\n});\r\n\r\n```"],"labels":["feature request"]},{"title":"SFC: Invalid root tag structure should throw error","body":"**Moved from**: [vue-loader#1161](https:\/\/github.com\/vuejs\/vue-loader\/issues\/1161)\r\n\r\n### What problem does this feature solve?\r\nIn Single File Component, `<script>` tag may or may not closed, so this works:\r\n\r\n```html\r\n<template>\r\n  <div class=\"chicken\">\r\n    Chicken: {{ chicken }}\r\n  <\/div>\r\n<\/template>\r\n\r\n<script>\r\nexport default {\r\n  data() { return { chicken: 'fried' } }\r\n}\r\n\/\/ (EOF)\r\n```\r\n\r\nHowever, `<style>` isn't; if there's no `<\/style>`, styles are **simply ignored** without any warning or errors.\r\n\r\n```html\r\n<template>\r\n  <div class=\"chicken\">\r\n    Chicken: {{ chicken }}\r\n  <\/div>\r\n<\/template>\r\n\r\n<script>\r\nexport default {\r\n  data() { return { chicken: 'fried' } }\r\n}\r\n<\/script>\r\n\r\n<style scoped>\r\n.chicken { \/* super important *\/\r\n  font-weight: 900;\r\n}\r\n\/* (EOF) *\/\r\n```\r\n\r\n### What does the proposed API look like?\r\nAny `<template>`, `<script>`, `<style>` tags should **explicitly**:\r\n\r\n* Closed - unclosed tag should throw a warning and refuse to build.\r\n* ~or May not closed - contents should build correctly even it's not closed.~\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["@posva can I take up this issue.","![2018-03-30 07 28 59](https:\/\/user-images.githubusercontent.com\/5380174\/38116658-0f679bf2-33ec-11e8-991a-cbe58c341436.png)\r\n\r\nEven on this stupid situation, SFC compiler doesn't throw any error.\r\n\r\nAt least, with my config, `<script type=\"sass\">` seems invoke both of sass-loader and eslint, and sass got transpiled and worked. is this intended behavior?","Also when multiple `<script>` tag exists, all but last tags are simply ignored."],"labels":["improvement"]},{"title":"Vue warns about missing required prop that has a default value","body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[http:\/\/jsfiddle.net\/df4Lnuw6\/207\/](http:\/\/jsfiddle.net\/df4Lnuw6\/207\/)\r\n\r\n### Steps to reproduce\r\nSpecify a required prop with a default value:\r\n\r\n```js\r\nVue.component('comp', {\r\n    template: '<div>{{ typeof x }} {{ x }}<\/div>',\r\n    props: {\r\n        x: {\r\n            type: Number,\r\n            required: true,\r\n            default: 5,\r\n        },\r\n    },\r\n});\r\n```\r\n\r\nRender the component without specifying a value for that prop:\r\n\r\n```html\r\n<comp><\/comp>\r\n```\r\n\r\n### What is expected?\r\nThe component should render the following without any prop validation errors:\r\n\r\n```html\r\n<div>number 5<\/div>\r\n```\r\n\r\n### What is actually happening?\r\nThe component renders OK, but warns about missing required prop `x`.\r\n\r\n---\r\nWhile it's true that prop `x` is not specified, since it has a default value, there should be no warning message.\r\n\r\nWhat exactly does `required` check for? It appears that it checks two things:\r\n\r\n1. The prop should be *provided*, as in at least `<comp :x=\"...\"><\/comp>`.\r\n2. The prop value should be non-null and non-undefined.\r\n\r\nI think in the case where a required prop has a default value, (1) should be relaxed.\r\n\r\nOtherwise, how can I enforce a prop to never be null while also providing a default value if the prop value was not provided?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["TLDR; Maybe we should indeed allow required + default value in [this check](https:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/core\/util\/props.js#L101)\r\n\r\nBy saying the prop is required you expect the user to always provide a value, so making it have a default value defeats the purpose of the prop being required.\r\nWhen you require a prop, it means that you need that information from the user and that there is no way for you to provide a fallback value.\r\n\r\n> Otherwise, how can I enforce a prop to never be null while also providing a default value if the prop value was not provided?\r\n\r\nNo, because `null` and `undefined` values always skip validation\r\n\r\nIf you want to take a deeper look at how the prop validation works, you can check https:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/core\/util\/props.js#L94\r\n\r\nAfter doing some research in past issues, I found [this comment](https:\/\/github.com\/vuejs\/vue\/issues\/6768#issuecomment-335527318)\r\n\r\n> Hmm, yeah so it needs to be more accurate:\r\n> \r\n> - `null` indicates the value is explicitly marked as not present and it should remain `null`.\r\n> - `undefined` indicates the value is not present and a default value should be used if available.\r\n> - `required: true` indicates neither `null` or `undefined` are allowed (unless a default is used)\r\n> \r\n> I agree this could be confusing, just as the existence of `null` vs. `undefined` in the language itself. But the design was trying to stay close to what these values are designed represent in JS, and changing them would be break","Yeah, currently the issue that is `required: true` implies that the prop cannot be absent, but then if `required: false` and the prop value is nully then validation is skipped altogether. There is no way to enforce a prop to be non-nully at all times without `required: true` and hence prop omission is disallowed.\r\n\r\nI also think the docs could be more clear about the precise definition of the `required` option.","~The validation will always be skipped with nully values though.~\r\nThe validation will always be skipped with nully values and `required: false` though.\r\nContributions to docs are always welcome \ud83d\ude04 ",">The validation will ***always*** be skipped with nully values though.\r\n\r\nIt's NOT when `required: true` was given. [http:\/\/jsfiddle.net\/df4Lnuw6\/225\/](http:\/\/jsfiddle.net\/df4Lnuw6\/225\/)\r\n\r\n<img width=\"535\" alt=\"2018-02-28 7 12 42\" src=\"https:\/\/user-images.githubusercontent.com\/5391892\/36784724-71fd92dc-1cbb-11e8-978a-de94a2acec20.png\">\r\n","@javoski That's confirmed in this section of code https:\/\/github.com\/vuejs\/vue\/blob\/cd334070f3b82d3f5892c4999cc290ccd4f56fd8\/src\/core\/util\/props.js#L101-L110","That's right! it is for undefined that validation is skipped with non-required props","How about a new flag `useDefaultForNull`\r\n\r\n``` js\r\nVue.component('comp', {\r\n    template: '<div>{{ typeof x }} {{ x }}<\/div>',\r\n    props: {\r\n        x: {\r\n            type: Number,\r\n            default: 5,\r\n            useDefaultForNull: true\r\n        },\r\n    },\r\n});\r\n```","`useDefaultForNull ` is toooooooooooo long  \r\nhope to find a keyword only has one word \ud83c\udf1a","> `useDefaultForNull` is toooooooooooo long\r\n\r\nIt also reads ... awkwardly. Am I the only one who thinks that? Personally I'd go with adding `nullable` as a `type` declaration and using that as a flag, but I realize that's a little outside of the typical Vue approach.","> By saying the prop is required you expect the user to always provide a value, so making it have a default value defeats the purpose of the prop being required.\r\n\r\nActually, `required: ture` and default value are coexisting. If the value is `undefined`, the default value will apply.","> > By saying the prop is required you expect the user to always provide a value, so making it have a default value defeats the purpose of the prop being required.\r\n> \r\n> Actually, `required: ture` and default value are coexisting. If the value is `undefined`, the default value will apply.\r\n\r\nIn fact it works as intended, it just warns for no reason (since property IS present cause not null in code being it the default value)"],"labels":["discussion","improvement"]},{"title":"Use better types to model prop type","body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https:\/\/github.com\/zsky\/vue-date-type-issue](https:\/\/github.com\/zsky\/vue-date-type-issue)\r\n\r\n### Steps to reproduce\r\n```\r\nnpm i\r\nnpm run build\r\n```\r\n\r\n### What is expected?\r\nNo typescript error\r\n\r\n### What is actually happening?\r\nTypescript report error: Property 'getTime' does not exist on type 'string'\r\n\r\n***\r\nI use vue with typescript, I want to set a component prop type as Date, so I do this:\r\n```typescript\r\nVue.extend({\r\n  props: { start: Date },\r\n  created() { \r\n     this.start;  \/\/ Expect type Date, but String\r\n  }\r\n});\r\n```\r\n\r\nThen I find something could be userful:\r\nIn options.d.ts,\r\n```typescript\r\nexport type Prop<T> = { (): T } | { new (...args: any[]): T & object }\r\n```\r\nMake a simple test:\r\n```typescript\r\nfunction test<T>(opts: { p1: Prop<T> }): T {\r\n    return {} as T;\r\n}\r\nlet result = test({ p1: Date });  \/\/ Expect type Date, but String\r\n```\r\nBut I still don't know how to solve it, thanks for any suggestion.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["The problem is in `DateConstructor`\r\n\r\n```ts\r\ninterface DateConstructor {\r\n    new(): Date;\r\n    (): string;\r\n}\r\n```\r\n\r\nThe call signature returns `string` so TS gets a wrong inference.\r\n\r\nI think the best solution is to await conditional type in TS 2.8. cc @ktsn ","Yes, it seems we cannot handle the DateConstructor without conditional types.\r\n\r\nFYI, you can manually annotate it for now:\r\n\r\n```ts\r\nVue.extend({\r\n  props: { \r\n    start: Date as new () => Date\r\n  },\r\n  created() { \r\n     this.start;\r\n  }\r\n});\r\n```","I workaround it by using `PropType`\r\n```\r\nimport Vue, { PropType } from 'vue';\r\nVue.extend({\r\n  props: { \r\n    start: Date as PropType<Date>\r\n  },\r\n  created() { \r\n     this.start.getMonth();\r\n  }\r\n});\r\n```","For both examples:\r\n\r\n```js\r\nstart: Date as new () => Date,\r\n```\r\nI'm getting on the end of the Date *_*\r\n\r\n```js\r\n\r\nvar Date: DateConstructor\r\nEnables basic storage and retrieval of dates and times.\r\n\r\nParsing error: Unexpected token, expected \",\"\r\n```"],"labels":["typescript"]},{"title":"extended components fall back to global component definition. (instead of local one in \"super\/parent\")","body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/dasdeck\/pen\/NyMvjQ](https:\/\/codepen.io\/dasdeck\/pen\/NyMvjQ)\r\n\r\n### Steps to reproduce\r\nThe codepen shows the bug on opening.\r\n\r\n### What is expected?\r\nI'd expect \"extComp\" to behave exactly like \"baseComp\" since it is extended.\r\n\r\n### What is actually happening?\r\n\"extComp\" uses the global \"my-comp\" definition instead of the one in the super\/parent component\r\n\r\n---\r\nThis might be expected\/intended behavior, however, all people I asked agree that this is counter intuitive and feels more like a bug than a feature.\r\n\r\nCheer!\r\n\r\nJM\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["It's not consistent, indeed, but you should name components with CamelCase: `Vue.component('MyComp', CompB);`, that will fix the error btw.\r\nThere is probably a normalization going on that is not working correctly","Yes, I (mostly) use PascalCasing in my actual code (not camelCasing ;)), thought the name comes from a third party library. \r\n\r\nBut this will help for now! Though a bit tricky if the naming is done in 3rd party libraries. So consistent normalization will be good!\r\n\r\n\r\n\r\nCheers!"],"labels":["improvement"]},{"title":"SSR Component Cache doesn't cache Strings","body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https:\/\/runkit.com\/martinlg\/issue-vue-renderer-cache](https:\/\/runkit.com\/martinlg\/issue-vue-renderer-cache)\r\n\r\n### Steps to reproduce\r\nRun the Runkit code. If you prefer a git repository I can provide you one.\r\n\r\n### What is expected?\r\nThe value passed to the ```set``` function should be a string.\r\n\r\n### What is actually happening?\r\nThe value passed to the ```set``` function is an object, with 2 properties:\r\n\r\n* html: a ```string``` containing the rendered component\r\n* components: a ```Set``` containing nothing or function, depending on context (sub-components I think)\r\n\r\n---\r\nThis issue breaks any external cache possibility (Redis in my case).\r\nThe only possible cache is in the process memory, like the LRUCache, but it seems impossible to scale processes and share a common cache.\r\n\r\nMoreover, the documentation explain clearly that the cached value should be a string, and even provides a small Redis example implementation, that could just not work.\r\n\r\nI think that the documentation describe the expected behavior, so I don't want to \"fix\" the documentation, I think we should fix the behavior.\r\n\r\nI will try to help but I may need some explanations on some parts of the RenderContext, can I ask my questions on this thread ?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["#7593 Old issue, rejected for heavy example.","I don't think SSR cache behavior is expected, either.\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/packages\/vue-server-renderer\/types\/index.d.ts#L46-L48\r\n\r\nHowever, component cache also needs to cache component's lifecycle in rendering. So the type definition and documentation are both outdated. ","Actually, I don't see why we should cache component's lifecycle in rendering.\r\n\r\nThe component should be rendered, its template should be cached as a string (the html part of the currently stored object). Then when the component get fetched from the cache, it's template is static, and should not depend of the store. So I don't see why we should register all its child components.\r\n\r\nOf course the browser takes back the hand, and make them dynamic like every components.\r\n\r\nDid I miss something ?","I just tried to remove the component registration and I see now that it breaks the inline styles on the cached version.\r\n\r\nStill looking for a solution to store the cache on an external data store.","@Atinux This is the issue I told you about. If you have any suggestions that could help me on SSR, I would love to ear it.","I don't believe caching doesn't work as it should be o_O Maybe some PR will help fix this? And it still opened... from February? Does no one use the cache or what?","Any updates on this? Having same issue with redis client. ","the same issue . I want to use redis client , but the components is a Set .","Wow, this is just extremely disappointing. Especially since the SSR docs explicitly show a redis client example. https:\/\/ssr.vuejs.org\/api\/#cache","Has there been any progress on this or has everyone given up on having a shared cache?","This will make it work, but I am not sure how safe it is considering that is doesn't provide back the register callbacks (no idea what they're needed for):\r\n\r\n```js\r\ncache: {\r\n  get: (key, cb) => {\r\n    redisClient.get(key).then((res) => {\r\n      if (!res) cb();\r\n      else cb({ components: [], html: res });\r\n    });\r\n  },\r\n  set: (key, val) => {\r\n    redisClient.set(key, val.html);\r\n  },\r\n},\r\n```","The same problem, now try use similar code as @CyberAP, but my inline styles not worked\r\nUPDATE\r\nTry add `yahoo\/serialize-javascript`, but code include some global vars: `injectStyles`, `moduleIdentifier`\r\n```\r\nfunction (context) {\r\n  \/\/ 2.3 injection\r\n  context =\r\n    context || \/\/ cached call\r\n    (this.$vnode && this.$vnode.ssrContext) || \/\/ stateful\r\n    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) \/\/ functional\r\n  \/\/ 2.2 with runInNewContext: true\r\n  if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\r\n    context = __VUE_SSR_CONTEXT__\r\n  }\r\n  \/\/ inject component styles\r\n  if (injectStyles) {\r\n    injectStyles.call(this, context)\r\n  }\r\n  \/\/ register component module identifier for async chunk inferrence\r\n  if (context && context._registeredComponents) {\r\n    context._registeredComponents.add(moduleIdentifier)\r\n  }\r\n}\r\n```","@CyberAP solutions seems working but I don't think it's too safe to use cache without components set. So is there any other solution for this?","> The same problem, now try use similar code as @CyberAP, but my inline styles not worked UPDATE Try add `yahoo\/serialize-javascript`, but code include some global vars: `injectStyles`, `moduleIdentifier`\r\n> \r\n> ```\r\n> function (context) {\r\n>   \/\/ 2.3 injection\r\n>   context =\r\n>     context || \/\/ cached call\r\n>     (this.$vnode && this.$vnode.ssrContext) || \/\/ stateful\r\n>     (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) \/\/ functional\r\n>   \/\/ 2.2 with runInNewContext: true\r\n>   if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\r\n>     context = __VUE_SSR_CONTEXT__\r\n>   }\r\n>   \/\/ inject component styles\r\n>   if (injectStyles) {\r\n>     injectStyles.call(this, context)\r\n>   }\r\n>   \/\/ register component module identifier for async chunk inferrence\r\n>   if (context && context._registeredComponents) {\r\n>     context._registeredComponents.add(moduleIdentifier)\r\n>   }\r\n> }\r\n> ```\r\n\r\nSorry, where actually did you put this code?","@SuperIbm \r\nThis code i get from `cache.set` arg `val.components`, it some internally function of `vue-renderer`\r\n\r\nGet it when try place it to redis"],"labels":["improvement"]},{"title":"Vue.extend mutates original object","body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[http:\/\/jsfiddle.net\/vmvabzam\/](http:\/\/jsfiddle.net\/vmvabzam\/)\r\n\r\n### Steps to reproduce\r\n- run the fiddle and look at the code vs the html\r\n\r\n### What is expected?\r\n`Foo.props` should still be an array after extending it\r\n\r\n### What is actually happening?\r\n`Foo.props` are normalized after using Vue.extend on it\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":[],"labels":["discussion"]},{"title":"Functional single file component with components option.","body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n\r\nNG pattern (functional)\r\nhttps:\/\/codesandbox.io\/s\/004vv2onw0\r\n\r\nOK pattern (no functional)\r\nhttps:\/\/codesandbox.io\/s\/q9k5q8qq56\r\n\r\n### Steps to reproduce\r\nI found can't use `components` option when  `functional` single file component.\r\n\r\n```html\r\n<template functional>\r\n  <div>\r\n    <some-children \/>\r\n  <\/div>\r\n<\/template>\r\n\r\n<script>\r\nimport SomeChildren from \".\/SomeChildren\"\r\n\r\nexport default {\r\n  components: {\r\n    SomeChildren\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\nIt's occure `Unknown custom element`.\r\n\r\n### What is expected?\r\nNot occure `Unknown custom element` and use child component\r\n\r\n### What is actually happening?\r\nIt's occure `Unknown custom element`\r\n\r\n---\r\n\r\nIn workaround, it not occure when use `Vue.component`.\r\n\r\n```js\r\nimport Vue from \"vue\"\r\nimport SomeChildren from \".\/SomeChildren\"\r\nVue.component(\"some-children\", SomeChildren);\r\n\r\nexport default {}\r\n\r\n\/\/ can use  <some-children \/>\r\n```\r\n\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Ran into exact same issue here, nice workaround!!!","Just learning Vue and struggling with this for the past few hours! Thanks for bringing it up!","Here is another workaround, **it avoids global component**, but looks not pretty\r\n\r\n```js\r\n<template functional>\r\n  <div>\r\n    <component :is=\"props.components.SomeChildren\"><\/component>\r\n  <\/div>\r\n<\/template>\r\n\r\n<script>\r\nimport SomeChildren from \".\/SomeChildren.vue\";\r\nexport default {\r\n  props: {\r\n    components: {\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          SomeChildren\r\n        };\r\n      }\r\n    }\r\n  }\r\n};\r\n<\/script>\r\n```","I think it's worth mentioning here that the error message is quite unintuitive. The `Unkown custom element` error bubbles up to the first instance component. If for some reason the feature for local functional component registration does not get implemented, at least add a dev warning that says something to the effect of `Invalid property \"components\" on functional component X`.\r\n\r\nAlso, as awkward as it is, registering the unknown component in the first parent instance component clears the error without polluting the global component name scope. It's a strange coupling of components though. Choose your hack for now I suppose.","@ywwhack Your workaround is great! I made some improvements. We can use injections instead of props, so that props will not be polluted, and the code looks a little prettier.\r\n```vue\r\n<template functional>\r\n  <div>\r\n    <component :is=\"injections.components.SomeChildren\"><\/component>\r\n  <\/div>\r\n<\/template>\r\n\r\n<script>\r\nimport SomeChildren from \".\/SomeChildren.vue\";\r\nexport default {\r\n  inject: {\r\n    components: {\r\n      default: {\r\n        SomeChildren\r\n      }\r\n    }\r\n  }\r\n};\r\n<\/script>\r\n```","any update on implementing components option in functional components ?\r\n\r\nThe workarounds are good but that seems pretty hacky IMO especially when mentioning that `<component :is=\"injections.components.SomeChildren\"><\/component>` must be fore dynamic components and not for known components","\r\nparent:\r\n```javascript\r\n\/\/ template functional \r\n    v-list\r\n        component(\r\n            :is='injections.components.myListItem'\r\n            v-for='item in props.data',\r\n            :key='item.title',\r\n            :data='item')\r\n\r\n\/\/ script\r\nimport myListItem from '.\/listItem'\r\nexport default {\r\n    name: 'myList',\r\n    inject: {\r\n        components: {\r\n            default: {myListItem}\r\n        }\r\n    }\r\n}\r\n```\r\nchildren:\r\n```javascript\r\n\/\/ template functional\r\n    v-list-group(v-if='Array.isArray(props.data.children)')\r\n        v-list-tile(slot='activator')\r\n            v-list-tile-content\r\n                v-list-tile-title {{props.data.title}}\r\n        my-list-item(\r\n            v-for='item in props.data.children',\r\n            :key='item.title',\r\n            :data='item')\r\n    v-list-tile(v-else)\r\n        v-list-tile-content\r\n            v-list-tile-title {{props.data.title}}\r\n\r\n\/\/ script\r\nexport default {\r\n    name: 'myListItem'\r\n}\r\n```\r\napp:\r\n```javascript\r\n\/\/ template\r\n    #app\r\n        my-list(:data='list')\r\n\r\n\/\/ script\r\nimport myList from '.\/list'\r\nexport default {\r\n    name: 'App',\r\n    components: {myList},\r\n    data() {\r\n        return {\r\n            list: [\r\n                {title: 1},\r\n                {title: 2},\r\n                {title: 3},\r\n                {\r\n                    title: 4,\r\n                    children: [\r\n                        {title: 41},\r\n                        {title: 42},\r\n                        {title: 43}\r\n                    ]\r\n                },\r\n                {title: 5}\r\n            ]\r\n        }\r\n    }\r\n}\r\n\r\n```\r\nchildren error: Unknown custom element\r\nmulti-level functional components nesting failed.\r\nhelp me!~","Any ideas how to implement dynamic async components inside functional components? \r\n\r\nE.g. functional should be simple wrapper like \r\n\r\n```vue\r\n<component :is=\"componentName\" \/> \r\n```\r\n\r\nwhere `componentName` is one of the dynamically imported components?\r\n\r\nFor non-functional component it looks like this:\r\n\r\n```vue\r\n<template>\r\n  <component :is=\"componentName\" v-bind=\"$attrs\"\/>\r\n<\/template>\r\n\r\n<script>\r\nconst someCondition = Math.random() > 0.5\r\n\r\nexport default {\r\n  name: 'PolicyRequestInfo',\r\n  components: {\r\n    FirstDynamic: () => import('.\/FirstDynamic'),\r\n    SecondDynamic: () => import('.\/SecondDynamic')\r\n  },\r\n  computed: {\r\n    componentName() {\r\n      return SomeCondition ? 'FirstDynamic' : 'SecondDynamic'\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n```\r\n\r\nFor functional component I have no idea how to make it work.","https:\/\/github.com\/vuejs\/vue\/blob\/70754084ec2d84e44effeb8f82efda3397a08b0d\/types\/options.d.ts#L123-L133\r\n\r\nThe type declaration shows that, functional component of current version can't accept `components` option in fact.\r\n\r\nOf course a possible solution is to use the render function:\r\n\r\n```js\r\n<script>\r\nimport SomeChildren from '.\/SomeChildren.vue'\r\n\r\nexport default {\r\n  render (h) {\r\n\treturn h('div', [\r\n      h(SomeChildren),\r\n    ])\r\n  }\r\n}\r\n<\/script>\r\n```","Yep, it actually works with render functions. I use something like that now:\r\n\r\n```vue\r\n<script>\r\nconst component = Math.random() > 0.5 \r\n    ? () => import('.\/compA') \r\n    : () => import('.\/compB')\r\n\r\nexport default {\r\n  functional: true,\r\n  render(h, context) {\r\n    return h(component, context.data, context.children)\r\n  }\r\n}\r\n<\/script>\r\n```","Would really love to see `components` option being supported for functional components.","This feature would certainly extend the usefulness of functional components in a natural way. I for one had not realised that `components` _wasn't_ supported in functional components until we tried it and found out. We have a library of components as SFCs, and wanted to mark some of the simple ones with no internal state as functional.\r\n\r\nAt the moment, if a component is a SFC and has child component dependencies and we want to mark it functional, the options would seem to be:\r\n* convert the template to a render function\r\n* globally register all the child components required\r\n* an ingenious workaround described above by @ywwhack @caikan and others that loads the dependency child components using `props` or `inject` and then references them with a `<component :is=\"...\">`\r\n\r\nHowever, in a library of many interlinked components all done as SFCs it is desirable to retain the template for consistency with the other components, and undesirable to globally register names. The workaround for all its ingenuity looks rather messy\/fiddly and would require explanation for maintenance. It would be much neater just to be able to declare child components with `components` exactly as for non-functional SFCs.\r\n\r\nFix #8143 looks good and ready to go. If there isn't a reason not to, can it be delivered? We've held off from making any of our components functional atm, and would use it right away :-)","> I for one had not realised that `components` *wasn't* supported in functional components until we tried it and found out.\r\n\r\nThat was my experience too. I remember being quite surprised when I discovered components weren't supported in functional components. This really, *really* diminished the usefulness of functional components and I rarely use them because of this.\r\n\r\nI do use JSX in my Vue projects because sometimes I need to drop down into the render function, so this isn't technically a huge issue for me, but I like to avoid JSX whenever possible.\r\n\r\nI'm hoping Vue 3 will improve on this in some way. React already does functional components well.\r\n\r\n> an ingenious workaround described above by @ywwhack @caikan and others that loads the dependency child components using `props` or `inject` and then references them with a `<component :is=\"...\">`\r\n\r\nI'm not a fan of this hack TBH. I will just stay clear of functional components until this issue is officially resolved.","~~I just made a SFC with `<template functional>` and a `components` option in the script object, and there are no complaints by the build system or during runtime.~~\r\n\r\n~~This is with Vue 2.6.6.~~\r\n\r\nCorrection: After restarting the build it does **not work** in fact.","Is the workaround from @ywwhack \/ @caikan  workaround still the best way to go these days? With all the mentions at the end it's hard to tell if there's an official fix.","+1. Will not be using the work around as it decreases code readability (since it cannot be found in Vue documentation). Please implement this much needed fix. Thank you","I suspect this, like some other features for functional components, will not be implemented since Vue 3 (the alpha\/proposal) alleviates the whole issue by making the difference between functional and non-functional components small. See this and the following comments: https:\/\/github.com\/vuejs\/vue\/pull\/8143#issuecomment-482481117","hey @maksnester I'm working on this for a Vue 2.6.x project. I'm trying to allow the functional component to accept a `name` prop to make it even more dynamic. Any clue on how I can implement your solution dynamically?\r\n\r\nAsked on Stackoverflow too ([here](https:\/\/stackoverflow.com\/questions\/61668562\/advanced-vue-js-dynamic-functional-component-using-is-syntax-and-render-funct)) if you want more details about my problem. Thanks!","As an alternative option, [vue-import-loader](https:\/\/github.com\/privatenumber\/vue-import-loader) offers support for component resolution in functional components","Still no improvements on this till now?\r\nI found a future-proof way to do it but still not happy with it:\r\n```vue\r\n<script>\r\nimport ChildComp from '@\/components\/ChildComp.vue';\r\nexport default {\r\n  components: {\r\n    ChildComp,\r\n  },\r\n};\r\n<\/script>\r\n<template>\r\n  <component :is=\"$options.components.ChildComp\" any-prop=\"value\" \/>\r\n<\/template>\r\n```","@darkylmnx it's a #wontfix since Vue 3 will make functional components irrelevant, as I understood.","Oh... I see.\n\nLe jeu. 18 juin 2020 \u00e0 22:30, andreas <notifications@github.com> a \u00e9crit :\n\n> @darkylmnx <https:\/\/github.com\/darkylmnx> it's a #wontfix since Vue 3\n> will make functional components irrelevant, as I understood.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/vuejs\/vue\/issues\/7492#issuecomment-646289731>, or\n> unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAK4HNNSMXAU3KXBWHRMYKTRXJ2NNANCNFSM4EMWWNEA>\n> .\n>\n","There's RFC: https:\/\/github.com\/vuejs\/rfcs\/blob\/master\/active-rfcs\/0007-functional-async-api-change.md\r\n\r\nWe will just rewrite our functional components as plain functions, that's all, much better, imo."],"labels":["feature request","improvement","has PR"]},{"title":"Double value appear in textarea when using render function to create in .vue file.","body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/SunnyLyu\/ntoboxev\/](https:\/\/jsfiddle.net\/SunnyLyu\/ntoboxev\/)\r\n\r\n### Steps to reproduce\r\n1. sorry for things that it could not use .vue file definition in jsfiddle, please follow the steps below.\r\n\r\n2. to create a textarea component like this: \r\n\r\n    export default {\r\n        props: {\r\n           value: {\r\n              type: String\r\n           }\r\n        },\r\n        render: function(h) {\r\n  \t    var _this = this;\r\n            return h('textarea', {\r\n               'on': {\r\n                  'input': function(e){\r\n                      _this.$emit('update:value', e.target.value);\r\n                  }\r\n               }\r\n            }) \r\n         }\r\n      };\r\n\r\n3. import into a .vue file and use as a Vue component:\r\n<!-- ta means the component defined above -->\r\n<ta id=\"main\" :value.sync=\"msg\"><\/ta>\r\n\r\n4. run all these codes\r\n\r\n### What is expected?\r\nType '1' in textarea once, a character '1' would appear in the textarea, in IE11.\r\n\r\n### What is actually happening?\r\nType '1' in textarea once, 2 characters '11' would appear in the textarea at the same time, in IE11.\r\n\r\n---\r\n1. Just use the component definition in HTML, everything goes well in both IE and Chrome (like the example running in jsfiddle).\r\n\r\n2. Once when using the definition in .vue file, after compiled would get wrong in IE11, but still ok in Safari and Chrome.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Is there any progress ?","Hi @Fuji-sunny, I am not able to reproduce your issue under IE 11 with following code:\r\n```vue\r\n<script>\r\nexport default {\r\n  props: {\r\n    value: {\r\n      type: String\r\n    }\r\n  },\r\n  render(h) {\r\n    return h('textarea', {\r\n      on: {\r\n        input: e => {\r\n          this.$emit('update:value', e.target.value)\r\n        }\r\n      }\r\n    })\r\n  }\r\n}\r\n<\/script>\r\n\r\n<style>\r\n\r\n<\/style>\r\n```\r\n![repro](https:\/\/user-images.githubusercontent.com\/2851517\/35316773-4ea2fa3e-010e-11e8-9cf1-d44e568a4fe7.gif)\r\n\r\n---\r\n\r\nIf you are still facing this issue, I suggest you open a github repro, and upload your problematic code, and give the repo address back to us.","@jkzing \r\nI am still facing this problem so I push the reproduction code in here:\r\nhttps:\/\/github.com\/Fuji-sunny\/vuerepo\r\n\r\n\r\nMy ie version is 11.0.9600.18738, hope the reproduction would help.","@Fuji-sunny just did some investigation on it and found you can get it work simply replace `[this.value]` with `this.value`\r\n\r\n``` js\r\nrender(h) {\r\n  return h('textarea', {\r\n    on: {\r\n      input: e => {\r\n        this.$emit(\"update:value\", e.target.value);\r\n      }\r\n    },\r\n  }, this.value);\r\n}\r\n```\r\nIt's vue's patch mechanism which caused that, but the root cause is a different behavior in Chrome and IE11, see this fiddle: [https:\/\/jsfiddle.net\/9fshvom1\/2\/](https:\/\/jsfiddle.net\/9fshvom1\/2\/). I'm not sure if we need to do improvement on it or it's just a wontfix...\ud83d\ude02","@jkzing \r\nMuch thanks for your investigation ! \r\n\r\nIn this scenario, I would like to use your solution. \r\nHope that this would not happen in other situation. ","@jkzing \r\nUnfortunately here comes another problem.\r\n\r\nYour solution works when adding text in the textarea, but when press backspace to omit text till no text in textarea, IE11 throws an error says something like \"arguments invalid\".\r\n\r\nI've gone through into vue's code, when pass [this.value] to createElement, it won't cause this error. When pass this.value to createElement, it would go into setTextContent method. and node.wholeText is about this error.\r\n\r\nAny other solutions or suggestions ?\r\n\r\nps. The same reproduction above: [https:\/\/github.com\/Fuji-sunny\/vuerepo](url)"],"labels":["browser quirks"]},{"title":"feat(ssr): add 'renderCriticalStyles' function for template","body":"**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [X] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [X] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [X] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [ ] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [X] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n\r\nSplits the ssr `renderStyles` function to two functions. Does not break existing code, but allows developers to handle how _non critical css_ is loaded.\r\n","comments":["Any progress on this?","This will be review\/merged when we are cutting the next minor release. Please be patient.","Any progress?"],"labels":["semver:minor"]},{"title":"[SSR] Support inline resource for specified files for server side rendering.","body":"### What problem does this feature solve?\r\nWhen we are using SSR with CommonsChunkPlugin, we often generate a `manifest.js` at the same time, but `manifest.js` is always very small (about 1kb).\r\n\r\nWithout SSR using `html-webpack-plugin` and its inline resource plugin, we are able to make `manifest.js` transformed inline into html file.\r\n\r\nBut for now we can not do for SSR that because the html output is generated by `vue-server-render` automatically.\r\n\r\n### What does the proposed API look like?\r\n```js\r\ncreateBundleRenderer(bundle, {\r\n  inlineResources: [] \/\/ string or RegExp\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["\u8bf7\u95ee\u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528 inlineResources\uff1f \u73b0\u5728\u8fd8\u662f\u6ca1\u6709\u6548\u679c \u662f\u4e0d\u662f\u4f7f\u7528\u59ff\u52bf\u4e0d\u5bf9\uff1f","\u8fd9\u76ee\u524d\u8fd8\u53ea\u662f\u4e00\u4e2a feature request\u3002","@Justineo  \u597d\u7684 \u8c22\u8c22 \u6709\u673a\u4f1a\u4ec0\u4e48\u66f4\u65b0\u53d1\u5417\uff1f\r\n\u4f60\u73b0\u5728\u5982\u4f55\u5728ssr \u60c5\u51b5\u4e0b inline resources\uff1f \u6709\u4ec0\u4e48\u597d\u65b9\u6848\u63a8\u8350\uff1f","\u8fd9\u4e2a\u529f\u80fd\u73b0\u5728\u6709\u4ec0\u4e48\u8fdb\u5c55\u5417\uff1f\u6216\u8005\u6709\u4ec0\u4e48\u597d\u7684\u66ff\u4ee3\u65b9\u6848\u5417\uff1f"],"labels":["feature request"]},{"title":"Required inputs in child components are highlighted as invalid on render in Firefox.","body":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/50wL7mdz\/85928\/](https:\/\/jsfiddle.net\/50wL7mdz\/85928\/)\r\n\r\n### Steps to reproduce\r\nNo additional steps required. Opening the JSFiddle in Firefox should automatically cause the issue to display.\r\n\r\n### What is expected?\r\nRequired inputs that are rendered in a child component without a valid default value should display normally.\r\n\r\n### What is actually happening?\r\nUnselected required inputs are being highlighted as though a submit attempt was made despite no user action being taken.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["It looks like Firefox highlights inputs as soon as you touch them using js (`input.value = ''`)\r\nI imagine we could add a condition but I'm not sure if this is just a Firefox bug (https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=1399046)","I just ran into this issue too. For what its worth, Angular implemented the additional condition check @posva mentioned in order to work-around it. [Here's](https:\/\/github.com\/ggershoni\/angular.js\/commit\/cc311740c6b680c68a88c44fecd97ede1f18f831) their commit.","Temporary workaround is to dynamically build object for checked property. It wouldn't contain `checked` key on first render of the component, but it would have it after user interacted with inout. We can pass this object to `v-bind` directive.\r\n\r\nFor example:\r\n```vue\r\n<template>\r\n<input type=\"checkbox\"\r\n  required\r\n  @change=\"!this.checked\"\r\n  v-bind=\"getCheckedState()\">\r\n<\/template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      checked: null\r\n    }\r\n  },\r\n  methods: {\r\n    getCheckedState () {\r\n      if (this.checked !== null) {\r\n        return { checked: this.checked }\r\n      }\r\n\r\n      return {}\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n```"],"labels":["browser quirks"]},{"title":"Is Vue performing unnecessary re-render when using $listeners?","body":"### Version\r\n2.5.11 (and earlier versions)\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/xb4172g8\/](https:\/\/jsfiddle.net\/xb4172g8\/)\r\n\r\n### Steps to reproduce\r\n1. Open console and observe while typing something into input fields\r\n2. Enter some text into name field -> Vue re-renders all three Textfield components\r\n3. In line 21 replace `{ ...this.$listeners }` with an empty object\r\n4. Once again enter some text into any field -> Vue re-renders only updated Textfield \r\n\r\n### What is expected?\r\nVue should re-render only the component whose props has changed.\r\n\r\n### What is actually happening?\r\nUsing `$listeners` in component's render function causes the component to be rendered whenever its parent is updated even though his props hasn't changed.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["At the moment we always set `$listeners` when updating the parent, so yes, it triggers children updates if the use `$listeners` in the render function. Maybe this could be prevented by making sure the listeners have been updated before setting `$listeners` (https:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/core\/instance\/lifecycle.js#L243)","Unfortunately even if we do a shallowEqual check before setting `$listeners`, your specific example would still re-render because your `@input` listeners are created as a new anonymous function for each render, so technically they are different. This is similar to passing down a different anonymous function as prop on every render.","Has there been made any plans to implement such a check?","Is there any workaround for this issue? I had to manually set up all listeners on a transparent wrapper, but it doesn't feel right. Actually, how is it going to work in Vue 3?","is only resolve this problem  like [vuetify](https:\/\/github.com\/vuejs\/vue\/issues\/10115#issuecomment-518503180)?\r\n"],"labels":["improvement"]},{"title":"Date Fields appear empty on first load when initialized with Vue","body":"### Version\r\n2.5.11\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/u1wssnwL\/3\/](https:\/\/jsfiddle.net\/u1wssnwL\/3\/)\r\n\r\n### Steps to reproduce\r\nCreate an input with a type date and initialize with any valid date value. \r\n\r\nView on Safari IOS and you'll see that it will appear as empty although the value is set because when you click the field, you'll see that the IOS datepicker will be set to the value you provided.\r\n\r\nIt only affects date inputs that have been initialized with Vue and in the JSFiddle provided, there are 2 date inputs for easier reproduction\r\n\r\n### What is expected?\r\nBoth date inputs should have the same value\r\n\r\n### What is actually happening?\r\nThe date input that was initialized with Vue appears empty\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["mmh, it looks like dynamically adding the element to the doc makes this behaviour appear:\r\n\r\n```js\r\nvar i = document.createElement('input')\r\ni.setAttribute('type', 'date')\r\ni.setAttribute('value', '2017-07-07')\r\ndocument.body.appendChild(i)\r\n```\r\n\r\nNot sure this is something we should workaround in Vue\r\n\r\nFor the moment you can use this workaround:\r\n\r\n```js\r\n<input type=\"date\" :value.prop=\"'2017-07-05'\">\r\n```\r\n\r\nthis will set input's `value` with js\r\n","Yes, thanks for that workaround, I ended up using Vue to initialize the form field in my project.\r\n\r\nI think it's something that Vue should address because it breaks expected behavior. In my app, the entire page is a div with an ID of \"#app\" and because Vue is instantiated on that, it affects pages that don't use Vue. This convention is what Laravel comes out of the box with so I have a feeling other developers might be affected too.","Keep in mind it breaks expected behaviour because Safari has a bug\r\nIf laravel comes with that convention, I imagine it's also possible to workaround there.\r\n\r\nI'd like to give you some hints for a PR but I'm not sure where to add the workaround \ud83d\ude1e ","I see. If this is a Safari bug, I don't think it has to be resolved in Vue. \r\n\r\nMaybe I can contribute a note in the documentation on this browser quirk instead? Not sure if this warrants an inclusion in the docs though. ","Ran into the same issue as well. As @bzarzuela mentioned as well, my app is also wrapped in a \"#app\" div. On page load the date field is empty, but a value is set. When setting is manually later of selecting another date the date is shown. When disabling Vue.js, it worked like expected.","Did anyone solve this yet? I have the same problem."],"labels":["browser quirks"]},{"title":"Establish a standard way to document component and its props","body":"### What problem does this feature solve?\r\nhttps:\/\/github.com\/vuejs\/vetur\/issues\/276\r\n\r\nCurrently, Vetur offers auto-completion & hover info for custom components defined in ElementUI, OnsenUI and Bootstrap-Vue. However, hand-maintaining such json files seem to be a lot of work. Also not co-locating the doc and the component definition can make updating component challenging.\r\n\r\nHelper-json repos at:\r\n\r\n- https:\/\/github.com\/ElementUI\/element-helper-json\r\n- https:\/\/www.npmjs.com\/package\/vue-onsenui-helper-json\r\n- https:\/\/github.com\/bootstrap-vue\/bootstrap-vue-helper-json\r\n\r\nThis feature makes it possible to write the doc in the SFC \/ js component file, and auto-generate a helper json that can be used for enhancing editing experience or auto-generating API \/ doc website.\r\n\r\n### What does the proposed API look like?\r\nTwo more optional attributes on the default export:\r\n\r\n```js\r\nexport default {\r\n  name: 'v-card',\r\n  description: 'A card component',\r\n  props: ['width', 'height'],\r\n  propsDescription: [\r\n    'width of the rendered card component',\r\n    'height of the rendered card component'\r\n  ]\r\n}\r\n```\r\n\r\nI was thinking maybe using a custom block for it, but then that only applies to SFC, not js components. jsdoc might be another option.\r\nOther ideas welcome.\r\n\r\nAnother idea is similar to the `typings` in package.json, have a `vueTypings` for component libraries. It'll point to the generated helper-json file and editors could pick it up to enhance editing experience.\r\n\r\n\/cc\r\n\r\n@Leopoldthecoder for ElementUI\r\n@masahirotanaka for OnsenUI\r\n@pi0 for Bootstrap-Vue\r\n@rstoenescu for Quasar\r\n@johnleider for Vuetify\r\n\r\nWould you be interested in using this feature in the Vue component libraries that you are maintaining? Would you be interested in helping spec'ing a format for the generated json file and the editing experiences that should be enabled by using that file?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Wouldn't it be more interesting to add `description` to the props:\r\n\r\n```js\r\nprops: {\r\n     width: {\r\n        type: Number,\r\n         description: 'Width of the modal'\r\n    }\r\n}\r\n```\r\n\r\nLibs usually use the object syntax already\r\n\r\nAs long as it can be stripped off from build productions, I think it could be nice to add something like this. But maybe prepending those attributes with a special character could be even better, something like `'#description'` or `$description` to clearly make the distinction ","Does this have to be part of the component options \/ API? It seems they don't serve any particular purpose for Vue's own runtime behavior. In that case, would a comment-based syntax be more reasonable (as it is stripped by default)?\r\n\r\nUsing a component option would require extra toolchain changes to properly strip them.","Is it possible to read comments with the language server? \ud83d\ude2e ","Hey. For specific BootstrapVue we needed component typings from a long time ago. The first iteration was exactly using component's runtime instance to extract props and auto-generating documentation. Here is [componentdoc.vue](https:\/\/github.com\/bootstrap-vue\/bootstrap-vue\/blob\/dev\/docs\/components\/componentdoc.vue#L62) implementation.\r\n\r\nPROS:\r\n- Doesn't adds any extra bytes to runtime\r\n- General purpose and can be used to document any type of Vue components on the fly even at runtime. \r\n- Can be used for both SFCs and JS components.\r\n\r\nCONS:\r\n- Can not add any custom description for each prop (If we add additional `description` field to props it costs lots of unneeded runtime comments)\r\n- Custom slots and events not supported\r\n\r\nSo we added a custom meta descriptor for components inside `package.json` which can be used for making a full set of docs and hintings. ([Example](https:\/\/github.com\/bootstrap-vue\/bootstrap-vue\/blob\/dev\/src\/components\/table\/package.json))\r\n\r\nBoth of above methods are both used for our nuxt based docs and also for [generate-vetur-helpers.js](https:\/\/github.com\/bootstrap-vue\/bootstrap-vue-helper-json\/blob\/master\/scripts\/generate-vetur-helpers.js) (Written by @alexsasharegan)\r\n\r\nMaybe we can unify metadata structure which is used by BV, Onesen and Vuetify and hand-craft or auto-generate meta for any component library in either `package.json` or `vue.json` file.\r\n\r\n\r\n**This way, just like any other part of Vue's ecosystem tooling can be delegated to library authors. We may also provide some helpers making the process easier and not forcing to use specific syntax like JSDocs.**\r\n\r\n(`vue-xxx\/package.json` or `vue-xxx\/vue.json`)\r\n\r\n```js\r\n{\r\n  \"vue\": {\r\n     \"library\": true,\r\n     \"components\": [\r\n         {\r\n             \"name\": \"b-table\" \/\/ Use for hinting of <b-table> tags\r\n             \"props\": [  \r\n                 {\r\n                   name: \"title\",\r\n                   type: \"Boolean\",\r\n                   description: \"Table title\"\r\n                 }\r\n             ],\r\n          }\r\n     ],\r\n     directives: [\r\n       \/\/ ....\r\n     ]\r\n  }\r\n}\r\n```\r\n\r\n\/CC @tmorehouse @egoist @mosinve @alexsasharegan","Something cool I've discovered so far is Project polymer's component [documentation spec](https:\/\/www.polymer-project.org\/2.0\/docs\/tools\/documentation).\r\n\r\nThey have a nice CLI which analyzes components JSDocs and extracting meta json:\r\n\r\n```js\r\npolymer analyze > analysis.json\r\n```\r\n\r\nThen using a similar component like our `ComponentDoc` we can use `iron-component-page` to visually render the docs. or exporting Via `package.json` for vue-language-server usage.\r\n\r\n","It would be great t have vue-language-server parse the JSDoc inside the components \ud83d\ude04 ","@yyx990803 \r\n\r\n> Does this have to be part of the component options \/ API? It seems they don't serve any particular purpose for Vue's own runtime behavior. In that case, would a comment-based syntax be more reasonable (as it is stripped by default)?\r\n\r\nI disagree. I can imagine a lot of cases where Vue's warnings and devtools could be improved by this extra information. Here are [some examples](https:\/\/gist.github.com\/chrisvfritz\/c53eadb124dfbb69023ae3a3d2c2f1ca).\r\n\r\n> Using a component option would require extra toolchain changes to properly strip them.\r\n\r\nYes, but I think the changes would be quite simple, since we're already manipulating the options exported from SFCs. It's possible there's a complexity I'm not realizing though, so please correct me if that's the case.\r\n\r\n---\r\n \r\n@pi0 I'd really like to avoid having to manage a separate types file, as I find these can fall out of date very quickly when their accuracy is not enforced by a compiler. Plus, remembering to check another file every time you want to update a component is pretty significant cognitive overhead.","@chrisvfritz SFCs only manipulate the options at runtime, so all the big description strings will be included in the  bundle and cannot be minified. They can only be dropped with a special babel plugin or hacked buble transform.","@posva \r\n> Is it possible to read comments with the language server? \ud83d\ude2e\r\n\r\nIt won't be easy, but it's possible, since TypeScript server supports analysis of JSDoc.\r\n\r\n@pi0 \r\n> So we added a custom meta descriptor for components inside package.json which can be used for making a full set of docs and hintings.\r\n\r\nI agree with @chrisvfritz -- one of the strength of Vue SFC is a sensible way of organizing related information by colocating html\/css\/js. It'd be very un-vue-like to put this component specific information to some centralized place.\r\n\r\nThe idea is to make it possible to write components that's self-documenting, in the same spirit of JSDoc \/ JavaDoc \/ etc. This also helps reading Vue libraries' source code.\r\n\r\n> https:\/\/www.polymer-project.org\/2.0\/docs\/tools\/documentation\r\n\r\n\ud83d\udc4d  This is something we can look into & learn from.\r\n\r\n@yyx990803 \r\n> Does this have to be part of the component options \/ API? It seems they don't serve any particular purpose for Vue's own runtime behavior. In that case, would a comment-based syntax be more reasonable (as it is stripped by default)?\r\n\r\nDoesn't have to be, and I agree it doesn't help runtime and would be a bloat for code size. It has to be compiled away at build time.\r\nI think it's achievable through babel plugin though.\r\n\r\nHowever, after thinking through this, I think JSDoc might be a better approach.\r\nEither way, I can't have the runtime info easily so I need to parse the script myself and find the descriptions. The parser can be reused in the vue-template-compiler 2.0 redesign: https:\/\/github.com\/vuejs\/vue-component-compiler\/issues\/28#issuecomment-333139601, where the descriptions go into `descriptor.metadata` or `descriptor.descriptions`.\r\n\r\nAnother idea is to make this a custom block in SFC like so (chose yaml since it looks cleanest)\r\n\r\n```\r\n<script>\r\nexport default {\r\n  name: 'v-card',\r\n  props: ['width', 'height']\r\n}\r\n<\/script>\r\n\r\n<description>\r\ndescription: A card component\r\nprops:\r\n  width: width of the rendered card component\r\n  height: height of the rendered card component\r\n<\/description>\r\n```\r\n\r\nFor libraries that's using js components, they can convert to this format by putting their js file into a `<script>` tag and the extra description info into this custom tag. It can be compiled away in compile time. This also makes it super easy to extract the description data.\r\n\r\n---\r\n\r\nAs I mentioned this info can be used by Vetur, component doc generator, etc for better DX, but it can go beyond that. One example is ElementUI's `subtags`:\r\n\r\nhttps:\/\/github.com\/ElementUI\/element-helper-json\/blob\/master\/element-tags.json#L4\r\n```json\r\n{\r\n  \"el-row\": {\r\n    \"attributes\": [\"gutter\", \"type\", \"justify\", \"align\", \"tag\"],\r\n    \"subtags\": [\"el-col\"],\r\n    \"description\": \"A row in grid system\"\r\n  }\r\n}\r\n```\r\n\r\nWe can just use this info to enhance `eslint-plugin-vue` to warn the user, but we can do runtime check too.\r\n\r\n","I like the idea with custom block, as this pattern already used by some VueJS-ecosystem libraries, like @kazupon [vue-i18n ](https:\/\/github.com\/kazupon\/vue-i18n). And we sure can easily strip this block away at compile time.","I wrote [`@vuedoc\/parser`](https:\/\/github.com\/vuedoc\/parser) to generate SFC doc.\r\n\r\nIt supports:\r\n- Extract the component name (from the name field of from the filename)\r\n- Extract the component description\r\n- Keywords Support: You can define your own keywords with the `@` symbol like `@author S\u00e9bastien`\r\n- Extract component props\r\n- Extract component data\r\n- Extract computed properties with dependencies\r\n- Extract component events\r\n- Extract component slots\r\n- Extract component methods\r\n\r\n**[Sample:](https:\/\/raw.githubusercontent.com\/vuedoc\/parser\/master\/test\/fixtures\/checkbox.vue)**\r\n```vue\r\n<template>\r\n  <label>\r\n    <input :disabled=\"disabled\" type=\"text\" v-model=\"checkbox\">\r\n    <!-- Default slot comment -->\r\n    <slot><\/slot>\r\n    <!-- Use this slot to set the checkbox label -->\r\n    <slot name=\"label\">Unamed checkbox<\/slot>\r\n  <\/label>\r\n<\/template>\r\n\r\n<script>\r\n\/**\r\n * A simple checkbox component\r\n * \r\n * @author S\u00e9bastien\r\n *\/\r\nexport default {\r\n  name: 'checkbox',\r\n  props: {\r\n    \/**\r\n     * The checkbox model\r\n     * @model\r\n     *\/\r\n    value: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n\r\n    \/**\r\n     * Initial checkbox value\r\n     *\/\r\n    checked: {\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      initialValue: null\r\n    }\r\n  },\r\n  computed: {\r\n    id () {\r\n      return `checkbox-${this.initialValue}`\r\n    }\r\n  },\r\n  created () {\r\n    \/**\r\n     * Emit when the component has been loaded\r\n     *\/\r\n    this.$emit('loaded')\r\n  },\r\n  methods: {\r\n    \/**\r\n     * Check the checbox\r\n     *\/\r\n    check () {\r\n      \/**\r\n       * Event with identifier name\r\n       *\/\r\n      this.$emit('check', true)\r\n    }\r\n}\r\n<\/script>\r\n```\r\n\r\nWill generate something like:\r\n\r\n```js\r\n{\r\n  \"header\": [\r\n    {\r\n      \"entry\": {\r\n        \"name\": \"checkbox\" \/\/ The component name\r\n      },\r\n      \r\n      \/\/ The component description\r\n      \"comments\": [\r\n        \"A simple checkbox component\"\r\n      ],\r\n      \r\n      \/\/ Attached keywords\r\n      keywords: [\r\n        { name: \"author\", \"description\": \"S\u00e9bastien\" }\r\n      ]\r\n    }\r\n  ],\r\n  \"props\": [\r\n    {\r\n      \"entry\": {\r\n        \"v-model\": {\r\n          \"type\": \"Array\",\r\n          \"required\": true\r\n        }\r\n      },\r\n      \"comments\": [\r\n        \"The checbox model\"\r\n      ]\r\n    },\r\n    {\r\n      \"entry\": {\r\n        \"checked\": {\r\n          \"type\": \"Boolean\",\r\n          \"default\": true\r\n        }\r\n      },\r\n      \"comments\": [\r\n        \"Initial checbox value\"\r\n      ]\r\n    }\r\n  ],\r\n  \"data\": [\r\n    {\r\n      \"visibility\": \"public\",\r\n      \"description\": null,\r\n      \"keywords\": [],\r\n      \"value\": null,\r\n      \"name\": \"initialValue\"\r\n    }\r\n  ],\r\n  \"computed\": [\r\n    {\r\n      \"visibility\": \"public\",\r\n      \"description\": null,\r\n      \"keywords\": [],\r\n      \"value\": [Object],\r\n      \"name\": \"id\",\r\n      \"dependencies\": [\r\n        \"initialValue\"\r\n      ]\r\n    }\r\n  ],\r\n  \"slots\": [\r\n    {\r\n      \"name\": \"label\",\r\n      \"comments\": [\r\n        \"Use this slot to set the checkbox label\"\r\n      ]\r\n    }\r\n  ],\r\n  \"events\": [\r\n    {\r\n      \"name\": \"loaded\",\r\n      \"comments\": [\r\n        \"Emited when the component has been loaded\"\r\n      ]\r\n    },\r\n    {\r\n      \"name\": \"check\",\r\n      \"comments\": [\r\n        \"Event with identifier name\"\r\n      ]\r\n    }\r\n  ],\r\n  \"methods\": [\r\n    {\r\n      \"entry\": {\r\n        \"check\": {\r\n          \"type\": \"FunctionExpression\"\r\n        }\r\n      },\r\n      \"comments\": [\r\n        \"Check the checbox\"\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```","@yyx990803 Thanks for clarifying. \ud83d\ude42  I just did a little research to see how difficult a Babel plugin would be and much to my amazement, I accidentally created a [working proof-of-concept](https:\/\/gist.github.com\/chrisvfritz\/63055b655014d8a4f76f84ae4ce64e77)! \ud83d\ude04  I'm definitely not a Babel expert, so there could be issues with it, but it seemed to work on the 2 codebases I just tested it against without breaking anything. It could even be expanded to strip out other properties not needed in production, like `required` and `validator` for props.\r\n\r\nDoes this change your thoughts on feasibility at all?","> However, after thinking through this, I think JSDoc might be a better approach.\r\nEither way, I can't have the runtime info easily so I need to parse the script myself and find the descriptions. The parser can be reused in the vue-template-compiler 2.0 redesign: vuejs\/vue-component-compiler#28 (comment), where the descriptions go into descriptor.metadata or descriptor.descriptions.\r\n\r\n@octref Just saw this comment. When you say you can't access this information easily, how difficult are you thinking it would be and is there any way I could help explore possibilities? I ask, because I'd personally prefer to avoid JSDoc. We already have some meta information as properties (like component name and prop types) and with comments, we'd lose the ability to use additional information in the Vue's warnings or devtools.\r\n\r\nAs for the custom block, it would solve the 2nd problem assuming Vue's template compiler could parse it into a JavaScript object, but there's still the issue of component meta information being fragmented (some included as a component option, some in a new custom tag). Some other things that bother me about it:\r\n\r\n- If we use this information in Vue's warnings and devtools, we'll have made those dev features exclusive to SFCs, when they didn't really need to be. If we _don't_ make this meta information exclusive to SFCs, then Vetur would have to learn how to parse it anyway for people who chose not to use the custom block.\r\n- From an education perspective, I'd personally prefer to avoid introducing a completely new concept in SFCs.","@chrisvfritz I was thinking along the line of using TypeScript to extract the data and use it to supplement the html completion, but actually it doesn't have to be this way.\r\n\r\nWe can:\r\n1. Have one independent tool that takes commands such as `vue-component-doc .\/src\/**\/*.vue`\r\n2. The tool generates a manifest file\r\n3. User edit vue files to add documentation\r\n4. manifest file is regenerated\r\n5. Vetur reloads the manifest file to enhance html editing\r\n\r\nTask 1 and 2 should exist independent of Vetur, so they can also be used for other tools.","Might want to include non SFC components and functional components (i.e. `.js` files)","@octref I like the idea of tooling to create a manifest file! Then Vetur, eslint-plugin-vue, and other tooling would never have to worry about parsing that information themselves - but we still have it available for Vue's warnings and devtools. Best of all worlds. \ud83d\ude42 \r\n\r\nHaving a separate tool like `vue-component-doc` might have some issues though, since having these properties in JavaScript means they could be runtime dependent (e.g. `description: myDynamicDescription()`). To solve this problem, I wonder if `vue-loader` could build a manifest file (or perhaps a manifest file per component) at runtime? If we stored these manifest files in a standardized location, then Vetur and other tools would be able to check that location for extra information. As an added bonus, the parsing would be agnostic to syntax (e.g. Babel, TypeScript, CoffeeScript, etc). @yyx990803 Is this remotely possible? \ud83d\ude04  What are your thoughts?","@tmorehouse It could be tricky for the Babel plugin to detect non-SFC Vue components, since files unrelated to Vue could export similarly-shaped JS objects. Also, functional components can now exist as `.vue` files as well, so there isn't really a reason not to use SFCs for any kind of component if you're using a build system (which you would be, if you're expecting a Babel plugin to strip out these properties in production).","When generating ES style builds (transpiling to a es directory module structure) there is currently no vue-template compiler that will handle this situation.  One shouldn't conclude that every one is using SFCs.\r\n\r\nWe ran into this issue when generating ES module build for Bootstrap-Vue (to allow user's to have better tree shaking), and `.vue` files were causing SSR errors, due to differences in vue-loader options. So we converted to using render functions instead of `.vue` files","@tmorehouse According to @chrisvfritz idea we can still have both ES style builds and SFCs as the source with custom props. And stripping\/extracting those comments using babel during build into meta.json.","Just as a summary to all of the nice comments until now, Something I think all of us agree on it is that we need a final **manifest** (Something like @demsking suggested) which can be used for both documentation and IDE hintings. The big questions are **where to declare typings** and **how to extract** it. SFCs seems the best place and we can put it inside:\r\n\r\n- JSDocs \/ TS\r\n- A new custom block\r\n- Inline props (Which will be stripped out when production compiling)\r\n\r\nAnd we've got some possible methods for extracting this manifest:\r\n\r\n- Using `vue-language-server` to parse `.vue` files and extract the needed parts\r\n- Adding support for `vue-loader` which can extract meta when loading SFCs\r\n- Making an external CLI tool to do the job\r\n- ~Manually Document Components~\r\n\r\nBut IMO if we enforce *any combination* of above methods, we are still forcing a toolchain and methodology for this task. What if we just agree on a standard manifest structure and let developers make and choose the best tooling? We can then **recommend** and add support for the best method which is probably `SFCs + vue-loader` or something else ...\r\n\r\nPS: Sorry if talking a lot. I'm just little excited about this enhancement \ud83d\ude06 ","I want to add some observations from Vetur's report.\r\n\r\nMost users use third library as global plugin. E.g. element-ui\/bootstrap-vue provide global components.\r\nIt would be hard for Vue-language-server to find all components in a third lib if we don't specify library component manifest. So declaration extraction is also crucial in the spec.\r\n\r\nAnother problem is how to ship component library. We should support shipping component in SFC format as well as compiled JS.\r\n\r\n@pi0 has already done an awesome summary. Thanks!","> Another problem is how to ship component library. We should support shipping component in SFC format as well as compiled JS.\r\n\r\nSFC should be preferred over JS as component render functions are built in two ways now \u2013 a javascript function (in browser build) and string concatenation (in SSR build).\r\n\r\n---\r\n\r\nI'm experimenting with [a utility library](http:\/\/github.com\/znck\/prop-types) to define prop validation rules. I'm shimming all utility functions for the production build, then using prepack, extra meta is dropped. I think similar techniques can be used for documentation. Maybe a babel plugin can analyze AST and export meta at compile time.","I agree with Evan this does not seem to serve any particular purpose. If you want to allow this feature however I like @pi0  idea of adding it inside the prop","Some time ago, I was interested in creating a Vetur integration with Quasar framework by @rstoenescu (which I delayed as it approaches 0.15 and 1.0). As Quasar is deliberately huge, I toyed a very simple [JS-to-Vetur-like JSON converter](https:\/\/github.com\/leopiccionia\/vetur-custom-tags) to make things more sane.\r\n\r\nFrom this (brief) [experience](https:\/\/github.com\/leopiccionia\/quasar-helper-json\/tree\/next), my two cents is that, if the community is going to settle on the custom block approach, JS (e.g. `export default` some object + some import custom logic) seems like a better alternative to structured-text formats (like YAML or JSDoc), due to some use cases where it'll avoid duplication, thus improving maintainability, like the following:\r\n* Components extending other components;\r\n* Components sharing common properties.\r\n\r\nDisconsider this message if this is doable otherwise and I'm missing something.","One can also use [propdocs](https:\/\/github.com\/propellant\/doctor) which presents a pretty neat (although maybe not original) way to write documentation for Vue components.\r\nYou can add descriptions, notes (even explanatory code), flags, etc. as `props` and even render this documentation as a separate component.","I made a proposal: https:\/\/github.com\/octref\/vuetypes. Feedback welcome!\r\n\r\nMy proposal is only about the \"JSON format\" and the \"Editor Behavior\" part. I don't know how each library is building the current helper json files for Vetur, so I hope I can get some feedback from @alexsasharegan @rstoenescu @asial-matagawa @jtommy @QingWei-Li @nekosaur.\r\n\r\nAlso, would any of you be interested in collaborating with me to build the JSON of this new format for your library? We can add documentation to your library's source code & work on the tool to extract the metadata into a JSON. I can do most of the work, but I probably would need help from the library authors.\r\n\r\nThere are still open questions as to where & how to author the data. @leopiccionia has a point: If 10 components all have the `width` attribute, it feels messy to have 10 descriptions scattered in 10 Vue files.\r\n\r\n","I see this thread mentioned for continuing the proposal discussion. Is this where we want to comment, or should we encourage issues to be raised on the proposal repo?","There are 3 things:\r\n\r\n1. How \/ Where to write the typing data in source code\r\n2. How to store & distribute the data\r\n3. What the data should look like & what editor should do based on the data\r\n\r\nFor 1, continue the discussion here. For 2\/3, open issues at https:\/\/github.com\/octref\/vuetypes,","Regarding _How \/ Where to write the typing data_, I'm in favor of the first way the proposal illustrates where to put typing data:\r\n\r\n> Put it in the NPM module you are publishing, and add a key vueTypes that points to the path of the file. Benefit is the JSON always has the right version.\r\n\r\nIn effect, this just following the existing behavior of things like `main`, `module`, and `types`. Familiarity is good, and I haven't seen any side-effects to this approach. \r\n\r\nA package.json approach also means library authors can use build-time scripting to generate an up-to-date set of component definitions. There are no permissions to manage for publishing apart from what is required for publishing a library in general.\r\n\r\nThe second option listed is:\r\n\r\n>Publish it a VerilyTyped, which can automatically publish it to vuetypes. (I don't know if this is worth the hassle)\r\n\r\nThe only benefit to a separate repository (not mutually exclusive to a package.json distribution) is that it allows community members to produce component defs for libraries that don't have them available. This is definitely valuable, but far less pressing. \r\n\r\nThe relationship between the two distribution methods is exactly what we see already in the typescript community with embedded library definitions and community-contributed definitions to DefinitelyTyped. I think this is a good balance, but embedded publishing is the primary concern and a community registry a secondary one.","@alexsasharegan That is about topic 2. I should have made it more explicit \u2014 topic 1 is how \/ where to write the data in your source code (JSDocs,  fields of default export, custom block, etc).","Ah, my bad. Should I move my comment to proposal repo then? I don't mind.","I like jsDoc or TS.\r\nHere is the reason:\r\n1. Use jsDoc don't break the code.\r\n2. It has been dev long time.\r\n\r\nUse props seem to be easy, but i think it isn't a good design for vue.","Hi all! Based on ideas around a format for vue.js components metadata (@octref's vue-types, bootstrap-vue, quasar and vuetify metadata), at JetBrains we've came up with `web-types`, which are supposed to be a generic format for any web components framework (https:\/\/github.com\/JetBrains\/web-types), but for now is focused on Vue.js only. IDE developer can provide support for tags and attributes completion\/documentation only, or, for a particular framework, support more advanced features like slots, events, etc. The format is still under development but a support for Vue.js with it has been added to the latest WebStorm 2019.2. The web-types JSON might be published under `@web-types` on NPM, or preferably included with the package. So far we have published web-types for `vuetify`, `bootstrap-vue`, `quasar` and `vue` itself based on our generator, which tries to extract as much data as possible from the published package (source in the repository). We are waiting for PRs to improve the format, so that it covers needs of every Vue.js library. If you are a library developer, please have a look at web-types repository and let's cooperate on improving the format and integrating web-types JSON into your library build.","I just wanted to point out that [Vue Styleguidist](https:\/\/github.com\/vue-styleguidist\/vue-styleguidist) also extracts this sort of information from Vue components, as already has a tool, called [vue-docgen-api](https:\/\/github.com\/vue-styleguidist\/vue-styleguidist\/tree\/dev\/packages\/vue-docgen-api) to do the extraction:\r\n\r\n> vue-docgen-api is a toolbox to help extracting information from Vue components, and generate documentation from it.\r\n> Use @babel\/parser to parse the code and analyze the contents of the component extracting methods, props events and slots. The output is a JavaScript object.\r\n\r\nPerhaps @elevatebart has some input to this discussion?","Hey @dflock, you are right, vue-docgen-api has a standardized format for this kind of documentation. It is not the only one, but it has the advantage of using JSDoc format.\r\n\r\nCheck out [this article on vue-comunity](https:\/\/vue-community.org\/guide\/ecosystem\/documentation.html) to know more possible documentation engines.\r\n\r\nI will be working soon with @shilman on [storybook docs](https:\/\/github.com\/storybookjs\/storybook) to base the automated documentation of vuejs components on the vue-docgen-api. We could see about adopting other formats in the future if it feels necessary.\r\n\r\nI hope to hear from this soon as @octref is right, it would be great to know the recommended way to document components.\r\n","Additionally, vue-docgen-api and @demsking parser [@vuedoc\/parser](https:\/\/gitlab.com\/vuedoc\/parser) are both using about the same syntax loosely based on JSDoc. \r\nSo there is that ;-).","@elevatebart [vue-docgen-api](https:\/\/github.com\/vue-styleguidist\/vue-styleguidist\/tree\/dev\/packages\/vue-docgen-api) seems pretty good. Would you be interested in working together to define a spec \/ JSON format?\r\n\r\nMeanwhile I'm also working on https:\/\/github.com\/microsoft\/vscode-custom-data that allows you to declaratively define data to enhance HTML\/CSS language servers. I think for Vue, there would be two different specs for two different use cases:\r\n\r\n- A spec by which Vetur loads extra HTML tags, CSS properties, etc, this spec should be close to https:\/\/github.com\/microsoft\/vscode-custom-data. For example, for a Vue component `<foo :prop1>`, the custom data for it should include a tag `foo` and a list of props `[\"prop1\"]`. Vetur would then complete `foo` at `<|` and `prop1` at `<foo :`. Vetur issue here: https:\/\/github.com\/vuejs\/vetur\/issues\/1364.\r\n- A spec which [vue-docgen-api](https:\/\/github.com\/vue-styleguidist\/vue-styleguidist\/tree\/dev\/packages\/vue-docgen-api), Vue Language Server, etc could generate. This is essentially the AST of a Vue component with some metadata (such as JSDocs). Other than doc generation, this can be used for static analysis as well (for example calculating the dependency tree between Vue components).","@octref I would absolutely love to. \r\n\r\nDo you know the best way to document this specification?\r\n\r\nIt would be a great opportunity to document what docgen is returning now. \r\nIt would also allow us to check for inconsistencies.  \r\n\r\nI have been preparing the next major version of the ecosystem for a few months now. I am waiting for Vue 3.0 beta to launch. I would like to avoid my users to have to upgrade twice. We could piggyback on this new release to document and, if necessary, fix the API.\r\n\r\nPlease reach me on vue-land at ElevateBart#1057","@elevatebart @dflock @octref Could you please elaborate what do you find missing in `web-types` format? The format is designed so that any IDE (or tool) can take advantage of it, including VSCode. With the recent changes it seems to be pretty complete. It has support for `typescript` types only at the moment, but there is no problem with adding `JSDoc` types to it. I've chosen typescript, because many Vue libraries already uses TS. One of the things I was looking at when designing the format was `vue-docgen-api`, so IMHO `web-types` is it's superset (with exclusion of some very specific JSDoc elements).\r\n\r\n@octref The format is also designed in such a way that any component library (like Web Components) could use it, thus allowing IDEs to have a generic support for content assist within HTML. I've looked at VSCode solutions for supporting libraries and each of them requires installing some plugin. Having a common format acceptable by all IDEs, which can be shipped within the library, seems to me a more efficient way to go. ","My feedback for `web-types` is:\r\n- There's no clean separation between metadata specific to Vue and the data format needed to drive LSP methods (such as completion, hover).\r\n- It's unclear to me what data is used in what editor features, and it seems all the features are Jetbrains product specific. The custom data for VS Code can be loaded in [vscode-html-langaugeservice](https:\/\/github.com\/Microsoft\/vscode-html-languageservice) and [vscode-css-languageservice](https:\/\/github.com\/Microsoft\/vscode-css-languageservice) (you can build your own language support using these libraries), and the transformation from data => LSP methods are done in a transparent way. \r\n\r\n> VSCode solutions for supporting libraries and each of them requires installing some plugin\r\n\r\nThis was not the case until [Jan 2019](https:\/\/code.visualstudio.com\/updates\/v1_31#_html-and-css-custom-data-support) when we bundled custom data format into VS Code, and we marked it as stable [last month](https:\/\/code.visualstudio.com\/updates\/v1_38#_custom-data-marked-as-stable).","> There's no clean separation between metadata specific to Vue and the data format needed to drive LSP methods (such as completion, hover).\r\n\r\nThe format of data is designed in a way to satisfy not only IDE, but other tooling as well, such as documentation generators. I have used several existing formats, like `vue-docgen-api`, `quasar` docs, VSCode formats, etc. and created something, which should satisfy most needs and enclose all of the related information (tags, attributes, components, directives, etc.) in a single file.\r\n\r\nAs far as Vue specific items are concerned in the format, all of such are prefixed with \"vue\" in the metadata. So there is a lot of generic information available. I.e. `slots` are generic concept present in Web Components, or Angular; however `scopedSlots` with types, etc. are specific to Vue and thus prefixed.\r\n\r\nThere is some mapping required to extract list of available tags, or attributes; or to provide list of available scopes, because format is data oriented, not IDE feature oriented.\r\n\r\n> It's unclear to me what data is used in what editor features, and it seems all the features are Jetbrains product specific.\r\n\r\nNothing in the format is JetBrains specific. It is up to IDE developer to transform data and fetch it into IDE specific feature like LSP. You can check how it's bootstrapped in WebStorm Vue plugin here https:\/\/github.com\/JetBrains\/intellij-plugins\/blob\/2617aca68c9086d07a2927df9ce41d0a95a1c78a\/vuejs\/src\/org\/jetbrains\/vuejs\/model\/webtypes\/VueWebTypesEntitiesContainer.kt","@piotrtomiak you got me curious.\r\n\r\nDo you have an example of what a documented Vue components code looks like? \r\nCan it document both the `<template>` and the `<script>` part?\r\nGoogle is not being very cooperative. It's giving me the **12 different types of websites** when I search for **web-types**.\r\n\r\nAdditionally, is it implemented today in any other IDE than in JetBrains?","I have found that it is harder to maintain the documentation of a component in a separate JSON file than in the components code itself. It can not only be updated more quickly if the feature changes but also can help an onboarding developer understand the objective of the documented function.\r\n\r\nI just opened the link to [web-types](https:\/\/github.com\/JetBrains\/web-types) and it seems that for each library, someone had to create the JSON files describing the library. \r\n\r\nDid I understand it correctly?","On would use a script to generate the JSON file (preferably), based on information pulled out from the library (and possibly other meta files).\r\n\r\nWith source code JSDOC, one would need to pull that info out into some file during build.  For component definitions, the actual component definition most likely wouldn't have any description fields for props (as that would greatly bloat the compiled component size with text that is not used at runtime)\r\n\r\n","@tmorehouse the JSON files would be generated then, that makes total sense.\r\n\r\nI do not think it does not answer the issue itself though: **establish a standard way to document a component**. I believe the question to be more about authoring (writing the code of the) documentation.\r\n\r\nAbout the description field of the prop, I agree. The dev documentation should not be available for end users in production. It would needlessly bloat the final package. The use of HTML comments and JSDoc is preferable.","@elevatebart I think there are two sides to the problem. One is documenting the source code (and I am 100% with you that code should be self documented) and the other is sharing documentation of a compiled library with others. As a tooling author I am more interested in the latter and that's what web-types format aims on providing solution for. Having a common metadata interchange format allows various source code documentation styles, which by their dedicated tooling are compiled into common format and than pulled by various other tools like web documentation creators, validators or IDEs.","Thank you @piotrtomiak, I completely missed this part of the subject.\r\nSince the web-types files would be generated, what script would generate it? \r\nDoes an NPM package that compiles web-types already exist? \r\nIf it does, do you have an example of the conventions it is using in the sources?\r\n\r\nI cannot help much on the tooling standard as I am not supporting any IDE myself.","@elevatebart As far as I know, there is no standard ways for documenting source code and every library provider is writing their own generator at the moment. Just 2 weeks ago quasar has merged PR to include web-types (https:\/\/github.com\/quasarframework\/quasar\/pull\/4749) and the feature should be released soon (dev branch was merged yesterday). Bootstrap-vue and vuetify have opened PRs to generate web-types. On my side I've written a generic generator which extracts information during runtime and combines it with static code analysis (https:\/\/github.com\/JetBrains\/web-types\/tree\/master\/scripts\/vue), which is used for extracting web-types for older versions of libraries already published on NPM. There are still some missing pieces of information in the format (e.g. https:\/\/github.com\/JetBrains\/web-types\/issues\/7) and thanks to reports from the community the format is being improved.\r\n\r\nSome of WebStorm users are surprisingly generating `web-types` for their own source files to have a better code completion when working with their own components. \r\n\r\nI am interested on working to support `web-types` output format for whatever tool will support the standard Vue components source code documentation.","Just my humble opinion, but since JSDoc already has ways to generate documentation from comments, I want to experiment just writing JSDoc style comments and then worry about having that comment show up in VSCode later.\r\n\r\nMy question is, does anyone have a recommended way, or ever experiment with prop documentation extraction, if your props has JSDoc comments?\r\n\u2193\r\n```js\r\nexport default {\r\n  props: {\r\n    \/**\r\n     * The state you want the component to have. Can be 'on' or 'off'.\r\n     * @type {'on' | 'off'}\r\n     *\/\r\n    state: {\r\n      type: String,\r\n    }\r\n  }\r\n}\r\n```\r\nI'd love to be able to generate some docs based on the above!","@mesqueeb have you looked into vue-styleguidist. I believe it does all you want... and more.\n\nHttps:\/\/vue-styleguidist.github.io\n","@elevatebart thanks so much !! This is what I was looking for. There are so many links to competing projects here, that all looked very complex! But I must have missed this one. ;)","I'm in favor of web-types and I've created a feature request in Vetur to consider it (https:\/\/github.com\/vuejs\/vetur\/issues\/2090).\r\n\r\nSome comments about the competing JSDoc-based solution:\r\na) the JSDoc comments would have to be stripped on publishing the component as otherwise, the comments would add to component size. So how would a language server (like Vetur) then read that information when all of that would be stripped?\r\nb) if the idea is to parse the JSDoc and include parsed form of it separately on releasing, then those could be as well just transformed into web-types right? Why invent another format?\r\n\r\nI'm not sure I fully understand the idea of JSDoc-based solution so excuse me if I completely missed the point.","@rchl good feedback.\r\n\r\nYou did not miss the point at all.\r\n\r\n## Questions\r\nKeep in mind we are talking about 2 very different subjects here that are often confused.\r\n1. How documentation is written? \r\nIn extenso, how the author of a component writes the docs for his component. \r\nOptions mentioned above are:\r\n    - JSDoc\r\n    - A separate JSON file\r\n    - a generated TOML object in an additional block\r\n    - additional members added to props like suggested above\r\n\r\n2. How this documentation is consumed? \r\nid-est, what files are necessary for Vetur and WebStorm or any editor to understand the library the user has imported in his project.\r\nOptions mentioned above are:\r\n    - WebTypes\r\n    - Vetur typings\r\n\r\n## Architecture\r\n\r\nOne file format does not have to take care of both. \r\nOne does not have to read the components themselves directly.\r\nWhen we publish a library we could have a build step generating any format we want.  \r\n\r\n## Choices - Authoring\r\n\r\nOn the choice of formats to author documentation, there are a couple of consideration that will orient your choice:\r\n- **Size of a component file**: Since JSDoc can be very verbose with 3 lines for every comment, it can extend the number of lines of a component a lot. If size matters to you JSDoc might not be your thing. Prefer having a separate JSON file.\r\n- **Ease of adoption\/learning curve**: Explaining to a new developer that he needs to open an extra file when he adds a new prop to you component brings extra friction to documentation, that is most of the time completely ignored. If onboarding new dev is something you do, then you should look at JSDoc instead of JSON.\r\n- **Escaping text**: If you are OK using `\\'` instead of `'` in the description of your props and do not wish to use markdown, then an additional member in props like below might be a better more readable solution (less verbose, more standard)\r\nNOTE: this last format can easily be removed in production with a babel plugin. No worries about bloating the final bundle.\r\n\r\n```js\r\nexport default {\r\n  props: {\r\n    color:{\r\n      type: String,\r\n      required: true,\r\n      docs: { \r\n        description: \"use this prop to color your button\",\r\n        examples: \"`blue`, `grey`\",\r\n        deprecated: true\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Choices - Usage\r\n\r\nChoosing web-types as a standard for the Vue LSP:\r\n@octref was saying above that web-types were more complete therefore more complex than Vetur types format, making web-types a little slower to parse and to maintain.\r\n\r\n@znck and @octref are working on a TypeScript plugin for vue 3 that will leverage the Language Server Protocol.\r\n\r\nI am with you on that last point, I can't wait to know more.","It looks like the JSDoc approach of documenting components is more or less standarized with `vue-docgen-api` package present (thanks to styleguidist project), so I've just added basic support for generating web-types using it - https:\/\/www.npmjs.com\/package\/vue-docgen-web-types . If there are \"api\" packages available for other documentation options I'll be glad to add generators for them as well. \r\n\r\nHere is a screenshot of documentation popup taking advantage of web-types generated from styleguidist example:\r\n\r\n<img width=\"810\" alt=\"vue-styleguidist-web-types-test\" src=\"https:\/\/user-images.githubusercontent.com\/4244523\/90419090-543a5480-e0b6-11ea-8a8d-db569d826722.png\">\r\n\r\n","@piotrtomiak are these popups usable in VSCode as well?","@mesqueeb VSCode does not have support for \"web-types.json\", it uses a much more simplified format split into two files. As @rchl has mentioned above he has filed a feature request for Vetur to support web-types - vuejs\/vetur#2090.","Also don't forget that we need a way to access the documentation (in IDE\/static analysis) even when using [dynamic components](https:\/\/vuejs.org\/v2\/guide\/components.html#Dynamic-Components), e.g.\r\n\r\n> `<component :is=\"condition ? 'v-textarea' : 'v-text-field'\" any-documented-prop \/>`\r\n\r\nwhich is currently very cumbersome to use (plus it's difficult to apply any form of defensive programming to ensure that we only use existing props). As an alternative we could implement our own wrapper that exposes the same props, but there's also no way to **inherit** an existing documentation, making integration with third party libraries very painful (and not forward compatible, lacking warnings).","@scscgit this is a valid point, dynamic component resolution should be working.\r\n\r\nAre you still talking about adding documentation to the available props\/events\/slots?\r\n-> I do not see a proper way to display it in VSCode or WebStorm without being extremely confusing. TS tried to merge all the definitions and the errors you get are confusing, to say the least.\r\n\r\nIf you are talking about the validation of prop types in the IDE this is another story. \r\n\r\nI believe that most of the time what you want to achieve here should be accomplished with a `v-if` unless you **do not know** the component you are going to get. I would let aside the dynamic analysis for runtime and focus, for the live documentation, on static components.\r\n\r\nWhat do you think? Any good ideas on how to display all the possible props of all the possible components?","For dynamic components, TS\/VueDX would show intersection of props. It's not a good idea to use dynamic components with very different props, either use if\/else or a render function. ","Yeah, the set of all possible (dynamic) components may not be known beforehand, but it'd be great if we could cover at least the scenarios when they are constants (and the best case would include inference of actual prop values if they utilize the same conditions as in `:is`) - and in the worst case, there's always an opportunity to introduce workarounds like some special comment above the `<component>` tag, in which we'd specify everything we expect (maybe with metadata to for example include\/exclude props as required), describing the intention that also validates further refactoring.\r\n\r\nAs the if\/else causes a huge duplication of code, especially when using children (and there's sadly no such thing as conditional props), the render function does indeed seem like the best alternative; it's just that it may obviously over-complicate the component (and sadly can't be done \"inline\" within an existing template). Well, it'd be way easier for us if we could use v-if on parents that share the same child.\r\n\r\nI don't know the details of integration between VueDX and tools like Vetur, so if it already supports showing intersection of props, is there any DX-oriented guide for new users about the currently \"best\" options of setting up the project (possibly including further static\/dynamic analysis, considering that Vue silently ignores so many problems even with eslint)? Searching for setup recommendations currently feels very random (including this lack of consensus on documentation, which especially hurts new library authors), and that's even if one starts on Nuxt.js, so maybe some hints could be back-integrated into official articles.","@scscgit it would probably be awesome indeed, but very complicated. \r\nIn short, you would have to deduce the component used from the props passed in order to re-validate the prop types.\r\n\r\nI believe @znck VueDX does this already. \r\n\r\nI insist though. If you want your code to be readable by noobs and newcomers, you should avoid using `<component>`. \r\nIf you already know the components you might want to use and they have exactly the same API, maybe make an intermediary component with a render function that does the mapping. If the 2 are completely different, then you should use a `v-if`, even if they have one thing (a slot) in common","@elevatebart I agree that `<component>` doesn't increase readability for newcomers, but it does remove a code duplication, making the long-term maintenance way easier as you don't have to guess by using eyes to make a diff; and you face the same decision of using `v-if` even in the intermediary component (and it's difficult to document an intention if some aspects don't live in any single place). In any case, the key requirement here would be to be able to inherit (prop) documentation and types from the (proxied) components.\r\n\r\n_Still, it feels like overkill if every time you make a small change requiring changing component you risk having to create a new component, re-document all props and duplicate them (using `v-if`), plus make a new render function to insert the child._\r\n* Thinking about a compromise, maybe in the future we could have one generic component intended specifically for the scenario of switching between components that provide the same props.\r\n  * Though this wouldn't even be very different from being bridged by `<component>` that would accept a list of props that are \"expected to be of the same type` (possibly inferring all props implicitly), and maybe a name of primary component supplying the documentation (but when prop descriptions differ, it could make more sense to display both).","Is [vue storybook](https:\/\/storybook.js.org\/tutorials\/intro-to-storybook\/vue\/en\/get-started\/) basically the most developed option for users needing this on a per-project basis? [Vue styleguidist](https:\/\/github.com\/vue-styleguidist\/vue-styleguidist) looks ok but it doesn't seem like the documentation lives as close to the component as with storybook.\r\n","@travis5491811 I invite you to try styleguidist if the proximity of the docs is important to you.\r\n\r\nThe SFC model of styleguidist contains a docs block with all the needed examples.\r\n\r\n````vue\r\n<template functional>\r\n\t<!-- @prop {string} id name attribute of the button -->\r\n\t<button :name=\"props.id\" style=\"background: pink;\">\r\n\t\t<!-- @slot name of the button -->\r\n\t\t<slot \/>\r\n\t<\/button>\r\n<\/template>\r\n\r\n<docs>\r\nDocument your functional templates in docs blocks\r\n\r\n```vue\r\n<FunctionalButton id=\"test\">\r\n    In the docs block\r\n<\/FunctionalButton>\r\n```\r\n<\/docs>\r\n````\r\n\r\n[Example](https:\/\/github.com\/vue-styleguidist\/vue-styleguidist\/blob\/dev\/examples\/basic\/src\/components\/Functional\/FunctionalButton.vue)\r\n\r\n[Documentation](https:\/\/vue-styleguidist.github.io\/docs\/Documenting.html#usage-examples-and-readme-files)","Thanks for the link @elevatebart. Proximity is important but id also like the ability to easily test different states of my components or show (through code and interactivity) how they work with different props. I don't see how to do that with styleguidist.\r\n\r\nHowever, assuming the following are my goals when documenting components:\r\n\r\n1. Ability to document component description, name, props, actions and event.\r\n2. Ability to document my style guide (typography, css classes, etc)\r\n3. Ability to display examples of my components in isolation for use when building the component and showcasing it to others.\r\n4. Ability to interact with my component for testing (example i want to see if i put a date range \"from date\" newer than \"to date\") (should i just be using my test suite for this kind of stuff)\r\n5. Have the documentation live as close to the component as possible so it's more likely to be updated when the component changes.\r\n6. Be as DRY as possible\r\n\r\nAre you able to accomplish all those with styleguidist? From the docs and examples i can see you can do 1, [2](https:\/\/vue-styleguidist.github.io\/sections\/#\/Documentation\/Files\/First%20File), 3, 5, and 6. ~~I don't see how you can do the rest.~~ What is your workflow for automated testing?\r\n\r\n\r\n\r\n\r\n","For anybody interested, there is a interesting video on this topic from Vue Mastery here [Component Documentation Made Easy by Bart Ledoux | VueConf US 2020](https:\/\/www.youtube.com\/watch?v=ryyAiUYvfY8)\r\n\r\n\r\n\r\n","Hey @travis5491811, I love it !! \r\nYou just made my day.\r\nYou linked my talk about storybook and styleguidist.\r\n\r\n1. SB & VSG use the same library (vue-docgen-api maintained by yours truly) to extract those descriptions. Even WebTypes generation from the WebStorm intelliJ ecosystem use the same lib.\r\n2. Check out the [vue design system](https:\/\/vueds.com\/) example, it shows how to do this quite simply on top of styleguidist. I took the liberty of updating the shell [in the home repo of styleguidist](https:\/\/vue-styleguidist.github.io\/Examples.html#vueds) since the main vueds is not maintained anymore by the original author. But @viljamis did an incredible job.\r\n3. These examples are the heart and soul of styleguidist and are meant to document each component with some proper live and editable use cases. I tried to write a [simple documentation](https:\/\/vue-styleguidist.github.io\/docs\/Documenting.html#writing-code-examples) but any question would help me make it more useful.\r\n4. For real testing today my opinion is that you should extract the logic from the rendering of your components. This way, you can use node to test your logic and only have examples of the visual parts of your components that you can check at a glance. [Cypress.io](https:\/\/www.cypress.io\/) can help you at this point test and screenshot the components from your styleguide and compare it with previous screenshots or test properties visually.\r\n5. Component Workbench 101 and my philosophy forever with both Styleguidist and Storybook\r\n6. That is hard to achieve and can push you into doing some stuff that are impossible to understand. But overall I agree (and my team at cypress is working on solving it).","Thanks @elevatebart for the feedback and I'm glad that video will reach more people. \r\n\r\nI noticed the `vue design system` examples depend on `react` (first import) \r\n\r\n- https:\/\/github.com\/vue-styleguidist\/vue-styleguidist\/blob\/dev\/examples\/vueds\/styleguide\/components\/Playground.js\r\n- https:\/\/github.com\/vue-styleguidist\/vue-styleguidist\/blob\/dev\/examples\/vueds\/styleguide\/components\/ReactComponent.js\r\n\r\nIs the library mainly geared toward `react` users? Do teams have to know both `react` and `vue` to effectively used the systems or is that only if you need to use `vue design system`, or maybe it's just that the example is not fully for `vue`?\r\n\r\nI am still trying to get styleguidist working with `nuxt` so i can play with it more in a real project.\r\n","> Hey @travis5491811, I love it !! You just made my day. You linked my talk about storybook and styleguidist.\r\n> \r\n> 1. SB & VSG use the same library (vue-docgen-api maintained by yours truly) to extract those descriptions. Even WebTypes generation from the WebStorm intelliJ ecosystem use the same lib.\r\n> 2. Check out the [vue design system](https:\/\/vueds.com\/) example, it shows how to do this quite simply on top of styleguidist. I took the liberty of updating the shell [in the home repo of styleguidist](https:\/\/vue-styleguidist.github.io\/Examples.html#vueds) since the main vueds is not maintained anymore by the original author. But @viljamis did an incredible job.\r\n> 3. These examples are the heart and soul of styleguidist and are meant to document each component with some proper live and editable use cases. I tried to write a [simple documentation](https:\/\/vue-styleguidist.github.io\/docs\/Documenting.html#writing-code-examples) but any question would help me make it more useful.\r\n> 4. For real testing today my opinion is that you should extract the logic from the rendering of your components. This way, you can use node to test your logic and only have examples of the visual parts of your components that you can check at a glance. [Cypress.io](https:\/\/www.cypress.io\/) can help you at this point test and screenshot the components from your styleguide and compare it with previous screenshots or test properties visually.\r\n> 5. Component Workbench 101 and my philosophy forever with both Styleguidist and Storybook\r\n> 6. That is hard to achieve and can push you into doing some stuff that are impossible to understand. But overall I agree (and my team at cypress is working on solving it).\r\n\r\nvery cool!\r\n"],"labels":["discussion"]},{"title":"shouldPrefetch enhancement","body":"### What problem does this feature solve?\r\nCurrently, I use\r\n`import(\/* webpackChunkName: \"lang-[request]\" *\/ json!yaml!.\/myForm.lang.${currentLocale}.yaml)`\r\nto load the appropriate translation for my components.\r\n\r\nThis generates `numberOfForms * numberOfLangages` chunks that are prefetched when the application starts.\r\n\r\nI would like to load only translations for the current language.\r\n\r\n`shouldPrefetch(file, type)` gives\r\n```\r\n0.js script\r\n1.js script\r\n2.js script\r\n...\r\n```\r\nThere is not enough information to filter files that should not been prefetched.\r\n\r\n### What does the proposed API look like?\r\nI don't know what are the available information at `shouldPrefetch`.\r\nBut probably API should look like:\r\n`shouldPrefetch(file, type, originalFilename)`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["FYI `shouldPreload` has the same parameters as `shouldPrefetch` : https:\/\/ssr.vuejs.org\/en\/api.html#shouldpreload","I also need to prefetch only files related to the current user's langage.\r\nUser's langage is stored (server-side) in the application i18n.locale.\r\n`shouldPrefetch()` should also expose the application that is currently server-side rendering (or at least its context).","ping !","Agree. `file` param of `shouldPrefetch` and `shouldPreload` are too hard to use.\r\n\r\nI'm a user of vuepress, it make's me very difficult to decide which pages to prefetch while number of pages growing fast. Although with this option provided, but it's just like a simple boolean value: 'prefetch everything' or 'prefetch nothing'.\r\n\r\nHopefuly there will be any enhencements. Thanks!"],"labels":["feature request"]},{"title":"Issues with v-model.number","body":"### Version\r\n2.5.8\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/50wL7mdz\/79189\/](https:\/\/jsfiddle.net\/50wL7mdz\/79189\/)\r\n\r\n### Steps to reproduce\r\nIncluded in fiddle\r\n\r\n### What is expected?\r\nInput type='number' should  not clear values, accept stings formatted in different locales. v-model.number should not return string.\r\n\r\n### What is actually happening?\r\nInput value is cleared sometimes, v-model.number returns \"\" for \"\" and partially typed numbers.\r\n\r\n---\r\nThis issue started with topic on forum https:\/\/forum.vuejs.org\/t\/extra-directive-for-number-inputs\/22438, it was suggested to open an issue for that. Here is original post:\r\n\r\nHi!\r\n\r\nI've found that `v-model.number` has limitations and requires some boilerplate in some cases. This is mostly because `input[type=\"number\"]` returns `''` for partially input numbers (like `1.`). Here are some problems with it:\r\n\r\n- App has no difference when input is either empty or invalid\/partial.\r\n- Bound attribute has to be of `[String, Number]` type.\r\n- `''`, `undefined`, and `0` are falsy values. This leads to `val !== ''` checks in all places this attribute is used.\r\n\r\n2nd and 3d issues can be solved with computed property, but it's hard to implement for nested ones and array of values.\r\n\r\nI came to using separate field for casted values: \r\n\r\n```\r\n<input\r\n  type='number' \r\n  v-model='obj.val' \r\n  @input='$set(obj, \"valCasted\", _nOrNull($event.target.value))'\r\n\/>\r\n```\r\n\r\nI wanted to it implement with custom directive (like `v-model-number='obj.valCasted'`), but I see that `v-model` is handled differently by compiler. This way it can automatically use `$set` when property is not defined on object. But I have not found how this  can be implemented with custom directives.\r\n\r\n So here are questions :)  :\r\n\r\n- Is there a better way to work with `input[type=\"number\"]`?\r\nIf not:\r\n- Can this be implemented with custom directives as convenient as `v-model` is?\r\n- Should this be added to vue?\r\n\r\n-----\r\n\r\nAfter that post I've tried to implement custom component, it's included in fiddle, but it also has some issues.\r\nI've also added different types of inputs to fiddle to check their behaviour and checked against different locales.\r\n\r\nThank you!\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["The number becoming 1 is expected as that's what happens in js, they're the same numbers after all. If you need the zeros, you want a string, not a number. **but it happens when the user changes focus** which is IMO the ux you want here.\r\n\r\nAbout localization, it's handled by the browser and it's out of vue scope. It's the browser that makes some syntaxes work differently on different computers\r\n\r\nAbout your custom component, it behaves how you told it to behave, it modifies the value and adapt it to either `null` or the number. The part that may be confusing is that you change it to null when it's not valid, doing backspace changes it back to a valid number and triggers a re render, which is why it changes on the input as well\r\n\r\ncc @LinusBorg What was the part that you thought we might improve?","Thanks for feedback!\r\n\r\nI've included plain `input[type=number]` to fiddle to check it's behaviour in this cases. You can see that it does not clear trailing zeroes at all. Actually I also don't see a problem in stripping trailing zeroes on blur, but I think it should not clear them when changing 1.001 to 1.002. It's the 1) and 4) cases in fiddle.\r\n\r\nOriginal post was more about how to make `v-model.number` to cast values to Number|null but not Number|String as it is now. I've made some proposal but it's not clear for me how to implement it. As I understood, Linus said that it may be good if vue provide this feature itself. Please check 'Here is original post: Hi! I've found that... ' in first comment for more info.","For now I don't see how it can be done without having 2 separate fields: 1 - string to keep `input[type=number]` fine, and 2 - numeric for app. Is it possible somehow to prevent rerender of input on `input` event? I think this could solve all the issues.","> but I think it should not clear them when changing 1.001 to 1.002.\r\n\r\nThat only happens with the custom input. The explanation is here:\r\n\r\n> The part that may be confusing is that you change it to null when it's not valid, doing backspace changes it back to a valid number and triggers a re render, which is why it changes on the input as well\r\n\r\nv-model.number will cast values to Number or empty string, but you're of course free to create your own custom component that handles things differently using or not the `number` modifier","> That only happens with the custom input\r\n\r\nNot only, see 1) case in fiddle (fill 1st input with 1.0000.0 ...), though it's for malformed value.\r\n\r\n>  but you're of course free to create\r\n\r\nSo is it not interesting to vue team to provide more type-strict interface? It's error prone and such errors are easy to leave, because there are no exceptions on misuse. Also to check that input is empty it's not enough to `val != null` but it also requires `val != null && val !== '' ` in every place it's used.","It does not happen with 1), or I'm not getting the instructions(typing 1.0000.0, then backspace x2).\r\n\r\n> it also requires val != null && val !== '' in every place it's used.\r\n\r\nNo, it does not. It's either a number or `''` no null. In your example, it's null because that's the initial value you're giving to it\r\nVue's job here is to link the value of the input to the state and make it a number whenever possible because of the `number` modifier.\r\nThe empty string is actually very useful because it allows you know if the input contains a valid number, it makes it flexible to use in different scenarios","> No, it does not.\r\n\r\nHere is example: https:\/\/jsfiddle.net\/hbov4mmr\/8\/\r\nChecks `item.value != null && item.value !== ''` are repeated 3 times.\r\n\r\n> The empty string is actually very useful\r\n\r\nI'm not sure it's useful at all, because there is same value for empty string and for invalid value. In locales with `,` delimiter `1.` is invalid (returns '') but `1.2` is valid and returns `1.2`. So empty string has ambiguous, very different meanings.","Your example is completely different: the value is not initialized, it's as if you explicitly set it to undefined. Checking if an input is _dirty_ or not is yet, another different thing, unrelated to numbers\r\n\r\n> I'm not sure it's useful at all, because there is same value for empty string and for invalid value. In locales with , delimiter 1. is invalid (returns '') but 1.2 is valid and returns 1.2. So empty string has ambiguous, very different meanings.\r\n\r\nThat's the browser setting it to an empty string... Number validation is out of Vue scope\r\n\r\nAnyway, just waiting for @LinusBorg input on what could be improved","Once again, this all is not about checking if an input is dirty, but about providing more solid and type-strict interface: if it returns numbers it should not return empty string or any other string. Returning empty string now is just a workaround, and i think it can be fixed.\r\n\r\nCan we please treat it more as feature request and ask few more maintainers look at it.\r\n\r\nI also wonder why I can not implement `v-model.number` in \"user-space\": https:\/\/jsfiddle.net\/rubx2fcb\/1\/ Here I took all the code from internals (https:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/platforms\/web\/compiler\/directives\/model.js) but it still does not allow to input `1.0` into this input. Am I missing something?\r\n\r\nUPD. I was checking in chrome. In safari It allows to input `1.0` or `1,0` but clears trailing zeroes when removing last digit in `1.0001`. FF does not respect OS locale settings and ignores `1,23` formatted numbers, while still has issue with removing last digit in `1.0001`.","@printercu Here's a try at making a numeric input component: https:\/\/codesandbox.io\/embed\/2wrqj87q0y?module=%2FApp.vue . It uses `NaN` as the empty \/  not valid value. The only issue it has is that if you typed an invalid number, you can't clear it by setting the `v-model` value to `NaN`, as it can't distinguish between empty and not valid.","@lbogdan Looks great! Thank you! I've slightly changed and it also works with `null` instead of `NaN`: https:\/\/codesandbox.io\/embed\/4wk0k64yw0. I will give it a try in the app soon.\r\n\r\nCan you please help with (from my previous comment):\r\n\r\n> I also wonder why I can not implement v-model.number in \"user-space\": https:\/\/jsfiddle.net\/rubx2fcb\/1\/ Here I took all the code from internals (https:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/platforms\/web\/compiler\/directives\/model.js) but it still does not allow to input 1.0 into this input. Am I missing something?","With `v-model.number` happily returning `\"\"` instead of `null`, for empty values, I'm not sure what the value of `v-model.number` even is.  Isn't the entire point of the directive to ensure that the value is actually a number? If not, I would argue it's named inappropriately. ","At the moment `v-model.number` doesn't even produce a number if there is text in the input. It only works if the first character is a number (only tested this in Firefox).\r\n\r\nIt's easy to reproduce, just go to https:\/\/vuejs.org\/guide\/essentials\/forms.html#basic-usage and click \"Try it in the Playground\" and add `.number` to `v-model`. Then just type text in the \"edit me\" field."],"labels":["discussion"]},{"title":"Quadratic memory usage","body":"### Version\r\n2.5.4\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/anon\/pen\/KyyxKB?editors=1010](https:\/\/codepen.io\/anon\/pen\/KyyxKB?editors=1010)\r\n\r\n### Steps to reproduce\r\n1. Open browser devtools\r\n2. Launch reproduction with different MAX variable (100, 200, 500, 1000, 1500, 2000, 4000)\r\n3. Note that memory usage growth quadratically with the MAX variable, while number of computed properties and their implied dependencies in the program is proportional to the MAX variable.\r\n\r\n### What is expected?\r\nExpected linear (i.e. proportional) growth of memory consumption with growth of MAX variable\r\n\r\n### What is actually happening?\r\nAll `data_X` observables have all `computed_X` computed values as their subscribers, so total number of subscriptions growth quadratically.\r\n\r\n---\r\nIt's quite hard to write a code that would really affect users with the bug, but anyway it feels like a flaw in reactive system design.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["After some investigation, I wonder if this usage worth a major redesign in reactive system.\r\n\r\n Vue has two reactive components under hood, `Watcher` and `Dep`. They are quite like `Output` and `Input`: `Watcher` will execute callback when `Dep` changes. The problem is there is no such component acting like `pipe`: both executes callback and notifies watchers. \r\n\r\n> All observables have all computed values as their subscribers\r\n\r\nThis is how we mock `pipe` with only watcher and dep. To optimize memory usage, we probably need a new reactive component like `Rx` in https:\/\/github.com\/lihaoyi\/scala.rx . \r\n\r\nHowever, that new class might only optimize limited usage. As OP has already stated:\r\n\r\n> It's quite hard to write a code that would really affect users with the bug"],"labels":["improvement"]},{"title":"feat(v-on): add more precise names for pointer modifiers","body":"re #6877\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/.github\/CONTRIBUTING.md#development-setup\r\n- [x] New\/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [x] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n\r\nHaving a warning \"uncaught\" with `toHaveBeenWarned` fails otherwise valid tests. Adding assertions about warnings seems excessive in those tests. What is the proper way to do it?\r\n\r\nAlso questions posed in https:\/\/github.com\/vuejs\/vue\/issues\/6877#issuecomment-344174202 are relevant. Currently names are `primary`, `secondary`, `auxiliary` for `left`, `right`, `middle` correspondingly.","comments":["Thanks for the PR!\r\n\r\nI think it makes sense to assert that the warning has indeed been warned whenever it should be. That's the point of the warn check.\r\n\r\nNaming looks good.\r\n\r\nFinal note: we probably won't merge\/ship this until 2.6 since we want to avoid introducing deprecations in patch releases.","Thank you!\r\n\r\nI'll add the warn checks in a bit.\r\n\r\n2.6 is totally fine. But if the new API is welcome in a patch release while deprecation warnings are not, and if it would be beneficial, I can move deprecation warnings into another PR that would wait for the minor version bump and keep new names with working old ones here for the patch."],"labels":["semver:minor"]},{"title":"Create a package for building custom renderers","body":"### What problem does this feature solve?\r\nAs the author of nativescript-vue I had to set up a similar build setup as Vue's in order to be able to import certain parts of Vue directly into nativescript-vue. The main source of issues was the aliases used across the Vue repository (which do make sense btw!). \r\n\r\nTo solve that issue, I would love to have an official package for creating (and registering) custom renderers into Vue, which would enclose most of the Vue specific logic of patching \/ hydrating etc.\r\n\r\nA good example of what I have in mind would be the react's package that does it: https:\/\/github.com\/facebook\/react\/tree\/master\/packages\/react-reconciler\r\n\r\nI would love to get some work done on this, but I'd work with the core team to make sure the best possible quality.\r\n\r\n\r\n\r\n### What does the proposed API look like?\r\n```js\r\n\/\/ my custom renderer\r\n\/\/ for example: nativescript-vue.js\r\nimport VueRenderer from 'vue-renderer'\r\n\r\n\/\/ a class for creating native views in NativeScript\r\nimport ViewUtils from '.\/ViewUtils.js'\r\n\r\nexport default new VueRenderer({\r\n  \/\/ Node operations\r\n  createElement(tagName) {},\r\n  createElementNS(namespace, tagName) {},\r\n  createTextNode(text) {},\r\n  createComment(text) {},\r\n  insertBefore(parentNode, newNode, referenceNode) {},\r\n  removeChild(node, child) {},\r\n  appendChild(node, child) {},\r\n  parentNode(node) {},\r\n  nextSibling(node) {},\r\n  tagName(node) {},\r\n  setTextContent(node, text) {},\r\n  setAttribute(node, attribute, value) {},\r\n\r\n  \/\/ Additional methods that need to be specified\r\n  \/\/ but for example:\r\n  createRoot() {} \/\/ this would get called to create the root element for the root Vue instance\r\n})\r\n```\r\n\r\n```js\r\n\/\/ then in userland we could just do\r\nimport Vue from 'vue'\r\nimport NativescriptVue from 'nativescript-vue'\r\n\r\nVue.use(NativescriptVue)\r\n\r\n\r\nnew Vue({\r\n  render(h) => h('label', { text: 'Hello World' })\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["This is something I've had in mind for a while - definitely something valuable to have. And thanks for the suggested API design.","It seems to me this is pretty important for the future of Vue. \r\n\r\nAny chance it can be added somewhere into the official roadmap? Even if its just in the backlog?\r\nhttps:\/\/github.com\/vuejs\/roadmap\r\n\r\nConsider also that React and Angular already have this.\r\n\r\nFor example take a look at this list of React custom renderers:\r\nhttp:\/\/iamdustan.com\/react-renderers\/","Any updates here? Been nearly six months since it's gotten any love from a Vue contributor.","@Aaron-Pool looks like its coming in Vue 3.0","> @Aaron-Pool looks like its coming in Vue 3.0\r\n\r\nIf it's coming in 3.0 is there existing progress?","@yyx990803 Will this be possible with Vue.js 3?","@moritzruth yes! Vue 3.x is built with custom renderers in mind - in fact the DOM\/web version is also a \"custom\" renderer on top of the core library. \r\n\r\nSee https:\/\/github.com\/vuejs\/vue-next\/tree\/master\/packages\/runtime-dom","thanks Vue.js 3.0, I build a custom canvas renderer named [Vuvas](https:\/\/github.com\/huruji\/vuvas) based on [https:\/\/github.com\/vuejs\/vue-next\/tree\/master\/packages\/runtime-core](https:\/\/github.com\/vuejs\/vue-next\/tree\/master\/packages\/runtime-core)\uff0cso we can use css + vue3.0 to build our UI, just like flutter. The layout based on yoga-layout\uff0cso we can use flex layout. Maybe you will be interested @rigor789 @yyx990803 "],"labels":["intend to implement","feature request"]},{"title":"<input> rerenders while changes affects only sibling elements","body":"### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https:\/\/codepen.io\/anon\/pen\/OxKqbL?editors=1111](https:\/\/codepen.io\/anon\/pen\/OxKqbL?editors=1111)\r\n\r\n### Steps to reproduce\r\nPlease open codepen example and type something into input\r\n\r\n### What is expected?\r\nInput should not lose focus\r\n\r\n### What is actually happening?\r\ninput rerenders and loses focus\r\n\r\n---\r\nhappens only if there is such conditional elements exists before and after input. Workaround is to use v-show instead of v-if in such cases.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["You can also simply give the `<input>` a key to ensure it is not replaced.","i tried your solution in codepen and still cant get it working.\r\n\r\ni tried this\r\n`<input type=\"text\" v-model=\"inputVal\" :key=\"1\">`","U need to have same DOM structure before your input. Look [this](https:\/\/codepen.io\/IlyaOsotov\/pen\/qVNMzr). It can be after update your DOM before your input tag ","Actually, it is the same input element, but first remove from the document then move it to other places, for example: \r\n\r\nit first renders like\r\n\r\n``` HTML\r\n <!----> \/\/ A\r\n<input \/>\r\n <!----> \/\/ B\r\n```\r\n\r\nthen you focus input and input some words, then virtual dom insert `<span>before<\/span>`, and it then parent.insertBefore(input, A), it moves the input element before the A comment element, so it will eventually lose focus, then it will delete the comment node.\r\n\r\nso, I think you could use v-show better to avoid the insertBefore move problem(remove from the document then insert before the reference node, in this case, which is comment A ). This is the default action for virtual dom of vue which doesn't replace comment node. ","> You can also simply give the `<input>` a key to ensure it is not replaced.\r\n\r\n`<input>` element focus is lost in either case.","https:\/\/github.com\/google\/incremental-dom\/issues\/237  \r\nseems like this one","I have tried to fix this issue  \r\nBut I encountered some problem \r\nhave we got some way to access vnode from html element?  \r\nI want to get vnode path as https:\/\/github.com\/google\/incremental-dom\/issues\/237  \r\nBut I did not find a good way to do that  \r\nhave i missing something? or have other better solution?\ud83d\ude05\r\n  ","@Kingwl you can use `v-show`. It works correctly.","Alternative way:\r\nhttps:\/\/codepen.io\/furrya_black\/pen\/ZVVLpQ\r\n\r\nJust html-layout usually  has a more complex structure. What do you thing?\r\nAs a proof you can see any css framework: material disign, bulma, bootstrap, etc (what else)\r\n\r\nUPD: if your case require rerender-mehanic (with v-if) ","It also seems to break (loose focus) if the spans are shown initially: \r\n\r\nhttps:\/\/codepen.io\/janschoenherr\/pen\/NoJpoY?editors=1111\r\n\r\nI would think that it doesn't  need to do `insertBefore` in this case.","Other reproductions:\r\n\r\nhttps:\/\/codepen.io\/adamwathan\/pen\/vMJrYj\r\nhttps:\/\/codesandbox.io\/s\/q9mqnjnxr9","[Thread on twitter](https:\/\/twitter.com\/adamwathan\/status\/1117071894111330305)","F.Y.I. It seems that #9473, #9496, #9808 all share the same root cause.","I'm using Vue 2.6.7 and this issue is still relevant, i was able to work it out by using v-show instead of v-if on a sibling, but it's still confusing why it doesn't work when v-if is used ","I found that @focus is not reliable when using DOM manipulation, such as v-if and therefore, directives would be the best approach:\r\n\r\n```\r\n<template>\r\n    <form method=\"POST\"\r\n          autocomplete=\"off\"\r\n          @submit.prevent=\"onSubmit\">\r\n\r\n<!--     We set the directive here v-focus with the function prop handleFocus -->\r\n        <div class=\"flex mt-1 rounded-md shadow-sm\">\r\n            <input id=\"title\"\r\n                   type=\"text\"\r\n                   v-focus=\"handleFocus\"\r\n                   v-model=\"form.title\">\r\n        <\/div>\r\n\r\n    <\/form>\r\n<\/template>\r\n\r\n\r\n<script>\r\n        export default {\r\n            name: \"FormComponent\",\r\n            data() {\r\n                return {\r\n                    \/\/ A form class example, but you could just have a var\r\n                    form: new this.$form({\r\n                        title: null,\r\n                    })\r\n                }\r\n            },\r\n            directives: {\r\n                focus: {\r\n                    inserted(el,binding) {\r\n                        \/\/ We set focus on the element\r\n                        el.focus();\r\n                        \/\/ optional if you had other operations. Data and props, etc. are not available inside\r\n                        \/\/ a direective uless yoru decorate the provider, which is a pain. So we call the binding\r\n                        \/\/ which is the handleFocus set on input. We pass the el but we could inject nothing or a event, binding, etc\r\n                        if (!_.isUndefined(binding.value)) binding.value(el)\r\n                    }\r\n                }\r\n            },\r\n            methods: {\r\n                handleFocus: function() {\r\n                    \/\/ For example reset a form v-model\r\n                    this.form.title = null;\r\n                },\r\n            }\r\n        }\r\n    <\/script>\r\n\r\n```\r\n","> v-show\r\nit worked thanks.\r\n","I had the problem where a `v-if` causes the parent modal to lose focus so that pressing `<esc>` does not close the modal. `v-show` did not fix my problem since rendering the element when the `v-if` condition is not met results in an error due to a `null` value.\r\n\r\nI worked around this by focusing an invisible dummy `<Input \/>` in the modal whenever the `v-if` condition changes."],"labels":["bug","has workaround"]},{"title":"Request: add v-model.lazy for components","body":"### What problem does this feature solve?\r\nv-model for components already supports .trim and .number.\r\nLazy modifier support for components would make it more uniform across the platform.\r\n\r\n### What does the proposed API look like?\r\nThe only change (backwards compatible) would be to add a new property to model definition:\r\n```\r\nmodel: {\r\n  prop: 'value',\r\n  event: 'input',\r\n  eventLazy: 'change'\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Is it going to be done?","I think a bunch of us are desperately waiting for this; mid-size forms get very slow as soon as you implement some basic VUE logic around the components, we really need this!","yeah, exactly. I have an app made with Vuetify and on larger forms instead of using v-model I am typing\r\n`:value=\"sth\" @change=\"($event) => sth = $event.target.value\"`\r\n\r\nIt would be nicer to type just\r\n`v-model.lazy = \"sth\"`","I would love to have it as well!","Also custom rules for Vuelidate need sometimes `v-model.lazy`, so it'd be useful not to introduce workarounds for it \ud83d\ude4c","Please add this!","Waiting for it! Would be a great enhance on productivity \ud83d\ude04 ","This would keep components much cleaner especially when binding to vuex data. Being able to use the `.lazy` modifier would allow me to keep both `get` and `set` functions in the computed properties rather than having to get the data in computed and commit the mutation with a method to be called `@change`. Please add!!!","Please, add this asap :+1: ","Pleeeeeeeeeeease","I have the same need. Workaround: https:\/\/stackoverflow.com\/questions\/56197736\/how-to-avoid-v-text-field-to-emit-input-events","![image](https:\/\/user-images.githubusercontent.com\/5469845\/173546947-c5aaa100-9040-4f06-80b2-29f665c29854.png)\r\n","I had the same issue. Here's my workaround : \r\n`<div\r\n  class=\"\r\n    el-input el-input--small\r\n    el-input-group el-input-group--append\r\n  \"\r\n>\r\n  <input\r\n    size=\"small\"\r\n    class=\"el-input__inner\"\r\n    type=\"text\"\r\n    @blur=\"checkNameRecord(index)\"\r\n    autocomplete=\"off\"\r\n    v-model.lazy=\"record.name\"\r\n  \/>\r\n  <div\r\n    class=\"el-input-group__append\"\r\n  >\r\n    {{ \".\" + soa.name + \".\" }}\r\n  <\/div>\r\n<\/div>`\r\n\r\n\r\nHope this help"],"labels":["feature request","has PR"]},{"title":"TypeScript: add Props type to component constructor","body":"### What problem does this feature solve?\r\nIt would be useful if we can infer Props type from component (`ExtendedVue`).\r\n\r\nFor example, we can write type safe wrapper of `CreateElement` with it (or improve interface of `CreateElement` directly).\r\n\r\n```typescript\r\nfunction renderComponent<Props>(\r\n        h: CreateElement,\r\n        component: ExtendedVue<Vue, {}, {}, {}, Props>,\r\n        data: VNodeData & { props: Partial<Props> },\r\n        children?: VNodeChildren): VNode {\r\n  return h(component, data, children);\r\n}\r\n\r\nconst MyComponent = Vue.extend({\r\n  props: { foo: String },\r\n  render(h) { return h(\"div\", this.foo) };\r\n});\r\n\r\nconst Parent = Vue.extend({\r\n  render(h) {\r\n    return renderComponent(h, MyComponent, { props: { foo: 0 } }); \/\/ error: type of property 'foo' are imcompatible\r\n  }\r\n});\r\n\r\n``` \r\n\r\n\r\n### What does the proposed API look like?\r\nNow, `ExtendedVue<Vue, {}, {}, {}, { foo: string }>` and `ExtendedVue<Vue, {}, {}, { foo: string }, {}>` generate same type.\r\n\r\nThis means we can't determine `Props` type from `ExtendedVue` object.\r\n\r\nI think, easiest (and most reasonable) way to achieve this is adding types to `$props` and `$data`\r\n\r\n```diff\r\n- export type CombinedVueInstance<Instance extends Vue, Data, Methods, Computed, Props> = Instance & Data & Methods & Computed & Props;\r\n+ export type CombinedVueInstance<Instance extends Vue, Data, Methods, Computed, Props> = Instance & Data & Methods & Computed & Props & { $data: Data, $props: Props };\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Actually we can do better here. By changing `Vue` to a generic type constructor (with default so no breaking change), we can encode `Vue.extend` to return a constructor with `$props` and `$data` typed. Plus, typed JSX will be enabled.\r\n\r\nBut this will make our complex typing file more complicated. Let's first make Vue2.5 stable and wait for more feedback.\r\n\r\nIf you like this idea, please vote by emoji!\r\n\r\ncc @ktsn @yyx990803 @octref @kaorun343 ","Sounds nice.\r\nAbove all, it would be very nice if vue supports typed JSX by default.\r\n(I have a small [library](https:\/\/github.com\/wonderful-panda\/vue-tsx-support) to add types to component for typed JSX. AAMOF, this issue comes from it.)\r\n\r\nBTW, current typing loses the information about each props are required or optional, which is necessary for typed JSX.","> current typing loses the information about each props are required or optional\r\n\r\nFairly I don't think we can make a typing for current API, at least current TS' type system does not support it.\r\n\r\n[Example](http:\/\/www.typescriptlang.org\/play\/#src=type%20Class%3CT%3E%20%3D%20%7B%20new(...args%3A%20any%5B%5D)%3A%20T%20%7D%0Atype%20Required%3CT%3E%20%3D%20%7B%0A%20%20%20%20%5BK%20in%20keyof%20T%5D%3A%20%7B%20type%3A%20Class%3CT%5BK%5D%3E%2C%20required%3A%20true%20%7D%0A%7D%0Atype%20Optional%3CT%3E%20%3D%20%7B%0A%20%20%20%20%5BK%20in%20keyof%20T%5D%3A%20%7B%20type%3A%20Class%3CT%3E%20%7D%0A%7D%0A%0Adeclare%20function%20test%3CU%2C%20V%3E(opt%3A%20Required%3CU%3E%20%26%20Optional%3CV%3E)%3A%20U%20%26%20V%0Atest(%7B%0A%20%20%20%20foo%3A%20%7B%0A%20%20%20%20%20%20%20type%3A%20String%0A%20%20%20%20%7D%2C%0A%20%20%20%20bar%3A%20%7B%0A%20%20%20%20%20%20%20%20type%3A%20Number%2C%0A%20%20%20%20%20%20%20%20required%3A%20true%0A%20%20%20%20%7D%0A%7D))","I have been using library mentioned, I think first step we can do is make all props optional when using TSX with Partial, unless passing a declared interface. \r\n\r\nIt will then be an enhancement when TS does support it. I think we should also create a TS issue to make awareness of this requirement linking back to this issue. \r\n\r\nI do believe we should support typed TSX out of the box with props inferred. Unfortunately but ultimately great Vue API also has more custom attributes to TSX such as scoped slots and events that we need to cater for. So interfaces will still be required as far as I can see. However where possible we should reduce the needed typing especially where duplication occurs, such as prop definitions. \r\n\r\n","How about an approach like below ?\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/1205852\/31987066-960d5672-b9a5-11e7-8049-2c3ede9b5bb1.png)\r\n\r\n(It works, but type definitions will become more complicated ...)\r\n","@wonderful-panda we could form requiredProps from props object no?","@blake-newman\r\nIt may be impossible to obtain requiredProps from props at compile time.\r\n\r\nIn above example, type of `repuiredProps` is `(\"foo\"|\"bar\")[]`","Yes sorry forgot about that","Hello, \r\n\r\nWhat's the current state of this issue?\r\nI'm taking a look on these really old GFI tickets. \r\nI can try to help, just need some details about how to proceed.\r\n\r\nThanks in advance. "],"labels":["improvement","typescript"]},{"title":"Functional components data merging util","body":"### What problem does this feature solve?\r\nHi! Components have the extend feature, but there is nothing similar for functional components. The problem and the solution is well explained at https:\/\/github.com\/alexsasharegan\/vue-functional-data-merge and while that works fine and I am very grateful to the author, I would like to request an official in core solution.\r\n\r\nWhy? Because there are edge situations or new features that 3rd party solutions will have a difficult time to be on top.\r\n\r\n### What does the proposed API look like?\r\nSimilar as done by @alexsasharegan\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["+1 I thinks this is necessary for all users of functional components. Otherwise it can hardly work as expect."],"labels":["feature request"]},{"title":"Mouse button modifiers for \"v-on\" should have more precise aliases","body":"### What problem does this feature solve?\r\nCurrently mouse button modifiers, introduced in #4866, are `left`, `middle`, `right` for `$event.button` values `0`, `1`, `2` correspondingly. But that is only correct for the \"default\" right-handed layout. In the left-handed mode (when the buttons are switched in the OS) the right button has `0` value and the left button - `2`. Besides, also some right-handed users may reverse or remap the mouse buttons. And working with code with these names for mouse buttons may lead to confusion and bugs among developers not familiar with the \"default\" right-handed mode being the target for these modifiers.\r\n\r\n### What does the proposed API look like?\r\nKeep `left` and `right` as deprecated and add `main` and `secondary` as their aliases.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I am currently working on it. What names should the modifiers really have?\r\n\r\n1. Since the \"mouse\" modifiers for `left` and `right` have already clashed with keyboard modifiers `left` and `right` (#5046, #5060), and to avoid such future name issues, should we perhaps include something pointer device \/ mouse related like `ptrMain`? Introducing two-word modifiers doesn't seem like a good idea though because of all the case related stuff.\r\n2. What should the main signifiers be?\r\n  * for 0 (now `left`) - `main` \/ `primary` \/ your suggestions\r\n  * for 1 (now `middle`) - `aux` (but might be confusing since `auxclick` [is fired for all the mouse buttons except the primary one](https:\/\/developers.google.com\/web\/updates\/2016\/10\/auxclick)) \/ your suggestions\r\n  * for 2 (now `right`) - `secondary` \/ your suggestions\r\n  \r\nPrevious names `left`, `right`, `middle` of course are kept but deprecated with warnings.","If using `primary` and `secondary`, then `tertiary` would be the consistent name for the third, typically middle, button.","The discussion kinda moved to the pull request, and [Evan okayed the naming](https:\/\/github.com\/vuejs\/vue\/pull\/7069#issuecomment-344938670)."],"labels":["feature request","has PR"]},{"title":"Alert (possibly fix) SSR Mismatch in Production","body":"### What problem does this feature solve?\r\nCurrently there is no way to receive alerts (and possibly rerender) in production concerning SSR vs VDom mismatch.  \r\n\r\nThis is critical because different browsers will handle this in unexpected ways.  For instance, I just finished trouleshooting an issue that is specific to Windows 10 and IE11 where a rendered vdom tree does not match ssr rendered html and causes a white screen.  Chrome and other browsers were able to recover. The mismatch renders fine when navigating to this from an already rendered vue. Just not when the initial rendering happens with a specific page.\r\n\r\nDiscussion in forum.  \r\nhttps:\/\/forum.vuejs.org\/t\/ssr-render-mismatch-error-emit-in-production\/20083\r\n\r\n### What does the proposed API look like?\r\nI think the bulk of code currently lives here.\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/adff0084e1b7bc4b8ffa2b87390c66afbc435582\/src\/core\/vdom\/patch.js#L662\r\n\r\nI think during initial ssr render we need more granular flags to opt in to alerts on this behavior.  Currently it is only NODE_ENV \r\n\r\nInitial (maybe too verbose) thoughts would be.\r\n  WARN_ON_SSR_MISMATCH\r\n  RECOVER_ON_SSR_MISMATCH\r\n  \r\nThen if those are true we can change behavior.\r\n\r\nI understand that this is performance critical so am very open to suggestions.  I would be willing to implement this myself in a PR.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Please provide a reproduction of failed recovery (white screen) in IE11.","@yyx990803 was able to boil this down on another issue we were running into with Safari 8.1\r\n\r\nhttps:\/\/github.com\/Austio\/vue-hackernews-2.0\/pull\/1","@yyx990803 , appears this was a bug in safari's sort function and\/or type coersion.\r\n\r\n```\r\n\/\/ node\/chrome\/etc returns what you would expect from looking at this\r\n> [null, true, true].sort((a,b) => a < b)\r\n[ true, true, null ]\r\n\r\n\/\/ safari, does not\r\n> [null, true, true].sort(function(a,b){ return a < b })\r\n[null, true, true] \r\n```\r\n\r\nSwitching to using the -1,0,1 comparitor function renders properly.","Still would like to see if it makes sense to have a way to detect this in production.  Would be very helpful, i think I would rather have the development behavior in production for re-rendering if there is invalid markup in order to prevent white screens","Would be awesome , cause we also have problems sometimes with whitescreeen \/ node append errors (only in production), so it would be really nice to be able to see WHY in Production.","@yyx990803 bumping on this to get thoughts on this subject or how to approach.  Also am happy to make a PR to allow this check to happen while in production.  When this has happened to us, it is a hard failure which results in a white screen and no content rendered\r\n\r\nToday it was on mobile safari 11 on ios8.  When i wrap the span in a no-ssr component (which only renders during mount cycle) everything renders fine.\r\n\r\nAccording to the HTML li spec, it allows flow content inside of it, which are all of the contained nodes https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Guide\/HTML\/Content_categories#Flow_content\r\n\r\n```\r\n  <li\r\n    data-test-location-list-item\r\n  >\r\n    <small class=\"editlinks\" v-if=\"profileEditable\">\r\n      <router-link\r\n        :to=\"{ name: 'profiles-locations-edit', params: { profileUUID: this.profileUUID, locationUUID: this.id} }\"\r\n      >\r\n        <i class=\"icon-pencil\"><\/i>\r\n      <\/router-link>\r\n    <\/small>\r\n    <strong v-if='primary'>Office<\/strong>\r\n    <vg-no-ssr>\r\n      <span class=\"br contacts\">\r\n        <a\r\n        v-if=\"hasGoogleMapLink\"\r\n        target=\"_blank\"\r\n        :href=\"googleMapLink\">\r\n          {{ address_1 }}<br>\r\n          {{ address_2 }}<br v-if='address_2'>\r\n          {{ city_state_zip_country }}<br>\r\n          <template v-if='phone_number'>\r\n            <span class='clabel'>Phone<\/span>\r\n            {{ phone_number }}\r\n            <span v-if='phone_number_extension'>x<\/span>\r\n            {{ phone_number_extension }}\r\n            <br>\r\n          <\/template>\r\n          <span class='clabel' v-if='fax_number'>Fax<\/span>\r\n          {{ fax_number }}\r\n        <\/a>\r\n      <\/span>\r\n    <\/vg-no-ssr>\r\n  <\/li>\r\n```","@yyx990803 Bump, any thoughts on this.  Still happy to make a PR on this if the approach recommended is something that would be ok in light of your view of where SSR and Vue should head.  \r\n\r\nUltimate goal: When there is a \"White screen\" event in production, provide a way for the client to signal that they want a complete re-render instead of hard white screen.","Also curious about configuring this behavior in production. It would be ideal to allow the client to rebuild DOM best it can if there is a node mismatch (current dev mode behavior, as far as I know), rather than throwing a hard exception and aborting the render."],"labels":["improvement"]},{"title":"Asset support for functional components","body":"### What problem does this feature solve?\r\nFunctional components with templates allow users to improve performance without sacrificing readability or ease of use. However, currently these do not support the \"components\" option. This limits this feature a lot, to a very limited set of use cases. \r\n\r\n### What does the proposed API look like?\r\nSimply support the components option just like non-functional components\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Also, how to call methods and emit events in functional components with templates?","You cannot, you use a regular component if you need that","Support for local directives would be awesome!\r\n\r\nAnd @c01nd01r if you need to respond to an action, you can use plain old functions\r\n\r\n```js\r\n\/\/ event handler\r\nfunction onClick(context, e) {\r\n    console.log('you clicked the div');\r\n\r\n    \/\/ to emit an event, look at the listeners in your context\r\n    if (context.listeners.click) {\r\n        context.listeners.click(e);\r\n    }\r\n}\r\n\r\n\/\/ component\r\nexport default {\r\n    functional: true,\r\n    render(h, context) {\r\n        return <div onClick={e => onClick(context, e)}>click me<\/div>;\r\n    },\r\n};\r\n```","Yes, @scottbedard, thank you. I know about this, but I can't do it in a \"functional\" html template.\r\n```vue\r\n<template functional>\r\n  <div>\r\n    <button @click=\"$emit('click')\">Emit click<\/button> <!-- error -->\r\n    <button @click=\"logClick\">Log click<\/button> <!-- ??? -->\r\n  <\/div>\r\n<\/template>\r\n\r\n<script>\r\n  import { logClick } from 'logg';\r\n<\/script>\r\n```","Yea, that would be great. Right now we can't really expose things to our template in a clean way. The only technique I thought of, was a prop with a default value. This works, but it looks terrible in my opinion, and unnecessary bloats the component's API.","@yyx990803, are there any plans ahead about supporting local directives with functional components? It would allow, among others, to convert some more advanced components as functional where those features could be replaced by directives.\r\n\r\nI assume there are some technical limitations about it but would like to know if it's planned, what it requires, etc. So I can at least know why I must keep using normal components, for now.","I opened a PR for supporting `components` in functional-components (#8143). I opened a separate issue regarding making `methods` accessible in functional-components (#8142); can open a PR if the feature request gets approved.","What is holding up the PR? It's been almost 4 months since it was opened.","I would love to see this merged.","Any further update on this improvement?","It seems the PR is blocked since of conflicts in options interface.","Do you have new news?\r\nI really want to use components option with functional component.","@kahirokunn \r\n\r\nThis will likely never get approved. In v3, functional components are getting stripped of features even more in favor of stateful components supporting everything functional components can do; basically, you'll be able to update your functional component to be stateful and you'll rarely have a need for functional components in the future.\r\n\r\nRead the RFC [here](https:\/\/github.com\/vuejs\/rfcs\/pull\/27)"],"labels":["intend to implement","feature request","improvement","has PR"]},{"title":"vue SSR webpack plugin support template syntax for filename option","body":"### What problem does this feature solve?\r\nmultiple entry and output point, because webpack plugin option of filename don't support template syntac like [name]\u3001[id], so It's not convenient on this situation. \r\n\r\n### What does the proposed API look like?\r\nnew VueSSRServerPlugin({\r\n        filename: '[name]\/vue-ssr-server-bundle.json'\r\n })\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I meet the same problem!"],"labels":["feature request"]},{"title":"Export flow types in dist file","body":"### What problem does this feature solve?\r\nIf people want to use Vue flow types, they can import them from the Vue npm module. \r\n\r\n### What does the proposed API look like?\r\nWe would include the flow directory in the npm dist files\r\n\r\n(I'm happy to make a PR)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["FYI, we already have a PR tracking this. https:\/\/github.com\/vuejs\/vue\/pull\/5027"],"labels":["feature request"]},{"title":"Improve diff intuition for components nested under plain elements","body":"### Version\r\n2.3.3\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/vitorDeng\/50wL7mdz\/63147\/](https:\/\/jsfiddle.net\/vitorDeng\/50wL7mdz\/63147\/)\r\n\r\n### Steps to reproduce\r\n\u6253\u5f00\u6d4f\u89c8\u5668\u63a7\u5236\u53f0\uff0c\u70b9\u51fbRun\r\n\r\n### What is expected?\r\n\u5176\u4ed6v-if\u7684\u5143\u7d20\u4e0d\u5e94\u8be5\u5f71\u54cd\u4e92\u4e0d\u76f8\u5e72\u7684\u7ec4\u4ef6\r\n\r\n### What is actually happening?\r\n\u540c\u7ea7\u4e0b\uff0c\u82e5\u524d\u540e\u4f7f\u7528\u4e86\u4e0e\u5305\u88f9\u7ec4\u4ef6\u7684\u5143\u7d20\u4e00\u6837\u7684\uff0c\u5e76\u4f7f\u7528\u4e86v-if\u6307\u4ee4\uff0c\u5219v-if\u6307\u4ee4\u4f1a\u5f71\u54cd\u8be5\u7ec4\u4ef6\u4e0d\u65ad\u521b\u5efa\u548c\u9500\u6bc1\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["\u4e3b\u8981\u662f\u4f60\u90a3\u4e2a\u53d1\u751f\u6539\u53d8\u7684\u7ec4\u4ef6\u548c `v-if` \u91cc\u7684\u4e1c\u897f\u5b8c\u5168\u4e00\u6837\uff0cdiff \u7684\u65f6\u5019\u96be\u514d\u4f1a\u5224\u65ad\u9519\u8bef\uff0c\u4f46\u6700\u8d77\u7801\u4e5f\u53ef\u4ee5\u4fdd\u6301\u6e32\u67d3\u51fa\u6765\u7684\u7ed3\u679c\u662f\u4e00\u6837\u7684\u3002\u4e34\u65f6\u89e3\u51b3\u529e\u6cd5\u5c31\u662f\u5728\u8fd9\u4e9b\u6807\u7b7e\u4e0a\u52a0\u4e00\u4e9b\u4e0d\u4e00\u6837\u7684 attribute\uff0c\u5c31\u7acb\u523b\u5de5\u4f5c\u6b63\u5e38\u4e86\u3002\r\n\r\n----\r\n\r\nTranslate into English:\r\n\r\nTemporarily you can easily change:\r\n\r\n```html\r\n<div><custom-component ref=\"componentPlugin\"><\/custom-component><\/div>\r\n```\r\n\r\ninto:\r\n\r\n``` html\r\n<div marked><custom-component ref=\"componentPlugin\"><\/custom-component><\/div>\r\n```\r\n\r\nto avoid the re-render of the custom component in the middle.\r\n\r\nBecause the `v-if` component and the element above is all the same tag + without any props\/attrs. So It's hard to the detect update details very exactly. But you can add special attribute to solve this.\r\n\r\nThanks.","For now you can use a `key` on the div to mark it: https:\/\/jsfiddle.net\/50wL7mdz\/63293\/\r\n\r\nHowever this can be improved for sure.","\u8c22\u8c22","\u770b\u4e0d\u61c2\u54df","key is importatnt","I'll take a stab at this."],"labels":["improvement"]},{"title":"Provide\/inject for custom directives","body":"### What problem does this feature solve?\r\nIf a user uses a custom directive in their app in multiple places they might need to configure the directive in two or more different ways depending on the area of the app in which the directive is being used. If this configuration is used in many instances in one of these areas, providing this configuration on every instance becomes redundant and cumbersome.\r\n\r\n### What does the proposed API look like?\r\nI think the provide\/inject pattern would be a good solution to this. A user could add different configurations in the top level provider components and use the custom directive normally in their descendants.\r\n\r\n```js\r\nvar Provider = {\r\n  provide: {\r\n    foo: 'bar'\r\n  },\r\n  \/\/ ...\r\n}\r\n\r\nvar OtherProvider = {\r\n  provide: {\r\n    foo: 'baz'\r\n  },\r\n  \/\/ ...\r\n}\r\n\r\nVue.directive('bar', {\r\n  inject: ['foo'],\r\n  bind (el, binding) {\r\n    \/\/ binding.injections.foo or binding.foo \r\n  }\r\n})\r\n```\r\n\r\n```html\r\n<provider><div v-bar=\"something\"><\/div><\/provider>\r\n<other-provider><div v-bar=\"somethingElse\"><\/div><\/other-provider>\r\n```\r\n\r\nI'm not confident on what the best place is for the actual injections to live in the directive hook arguments but there are some ideas in the code example above.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Can you please be more explicit about what kind of directive would need that, please?\r\nA configuration could be extracted into one single js file and import it in different directives if that's what you mean, but I don't think that's cumbersome nor redundant\r\n\r\nIf you mean setting the configuration when using the directives (in the template), well, I think it's much better to explicitly give the directive a configuration that making it depend on an injected value somewhere else, which could lead to hard to debug bugs.\r\n\r\nOn a side note, inject\/provide is meant for advanced usage on libs where we want to make things easier to use without having the user to worry about connecting explicitly many things together, but is discouraged in applications because it makes things implicit and harder to understand\/debug","I don't think this is really needed. If you really want to have a global configuration for all your directives I would do this with a vuex store object, this would even make it easy to update when you need to","@jsnanigans I'm not sure what you mean. How does a plugin have access to the user's Vuex store? And this is not about global configuration. It's about context-aware configuration.","I was thinking you could define the config `something: {foo: 'bar'}` in your store, then in your component you get the config and pass it to your directive `<tag v-bar=\"something\" \/>`.\r\n\r\nI think I misunderstood what you are trying to accomplish with provide\/inject for directives..\r\ndo you want to avoid passing the config in the directive attribute? \r\nso that you only have to write `<tag v-bar \/>` and config is provided by the components and injected in the directive?","@posva I understand provide\/inject is for advanced usage and I'm not trying to change that. All I'm saying is that provide\/inject should work the same way for directives as it does already for components. And for the same reasons. Let me give you a more concrete example (apologies I should have done this from the start):\r\n\r\nI have a plugin that provides the `v-css` directive. The directive takes a JavaScript function (in the example below `primaryColor`), executes it by passing a `config` object to it, and when the function returns a string with CSS styles, the directive generates a CSS class name for styles, injects the styles into the page, and appends the CSS class name to the elements `class` property:\r\n\r\n```js\r\nprimaryColor (config) {\r\n   return `color: ${config.theme === 'fun' ? '#ff0000' : '#000'};`\r\n}\r\n```\r\n\r\n```html\r\n<greetings>\r\n  <div v-css=\"primaryColor\">Nice<\/div>\r\n  <div>to<\/div>\r\n  <div v-css=\"primaryColor\">meet<\/div>\r\n  <div v-css=\"fontWeight700\">you<\/div>\r\n<\/greetings>\r\n```\r\n\r\nThe `config` object that is passed to the function (the directive value) has to be passed to the plugin beforehand in some way so one way to do it is to pass it before the plugin is installed:\r\n\r\n```js\r\nVue.use(cssDirective(config))\r\n```\r\n\r\nOk, that works globally, but what if we want to use different themes in our app:\r\n\r\n```html\r\n<greetings>\r\n  <div v-css=\"primaryColor\">Nice<\/div>\r\n  <div>to<\/div>\r\n  <div v-css=\"primaryColor\">meet<\/div>\r\n  <div v-css=\"fontWeight700\">you<\/div>\r\n<\/greetings>\r\n<features>\r\n  <div v-css=\"primaryColor\">Shiny<\/div>\r\n  <div>Affordable<\/div>\r\n  <div v-css=\"primaryColor\">Durable<\/div>\r\n  <div v-css=\"fontWeight700\">Eco-friendly<\/div>\r\n<\/features>\r\n```\r\n\r\nIn my suggestion, the greetings and features components can `provide` config objects with different themes. The `v-css` directive can then inject the config object instead of getting it before install or having the user pass it in with the directive value. I was saying passing it in with the directive value is cumbersome and redundant because it would look like this:\r\n\r\n```html\r\n<greetings>\r\n  <div v-css=\"[config, primaryColor]\">Nice<\/div>\r\n  <div>to<\/div>\r\n  <div v-css=\"[config, primaryColor]\">meet<\/div>\r\n  <div v-css=\"fontWeight700\">you<\/div>\r\n<\/greetings>\r\n<features>\r\n  <div v-css=\"[otherConfig, primaryColor]\">Shiny<\/div>\r\n  <div>Affordable<\/div>\r\n  <div v-css=\"[otherConfig, primaryColor]\">Durable<\/div>\r\n  <div v-css=\"fontWeight700\">Eco-friendly<\/div>\r\n<\/features>\r\n```\r\n\r\n**Please do not get hung up on this somewhat-complex CSS-in-JS example. I can think of other use cases as well, but this is my most immediate use case.**","I really think directives are probably not what you want to use for CSS in js.\r\nTo me, your example looks perfectly fine using the config + primaryColor. Yes, it looks cumbersome but I think adding provide\/inject to directives would allow users to easily mess up things and make them really hard to debug\r\n\r\n> I understand provide\/inject is for advanced usage and I'm not trying to change that.\r\n\r\nI want to reemphasize that It's meant for libs not applications","would it be so much easier to just do this with `:style` or even just a class?\r\n```vue\r\n<greetings>\r\n  <div class=\"primaryColor\">Nice<\/div>\r\n  <div>to<\/div>\r\n  <div :style=\"primaryColor\">meet<\/div>\r\n  <div :style=\"fontWeight700\">you<\/div>\r\n<\/greetings>\r\n```\r\n```javascript\r\nprimaryColor: _ => {color: this.config.theme.primaryColor}\r\n```","> I really think directives are probably not what you want to use for CSS in js.\r\n\r\nI strongly disagree. This use case fits within the guides description of \"low-level DOM access on plain elements\" and is a perfect example of why directives should exist in the first place. Why? Because the directive is only changing the class value on a single element. No user wants to litter their app with a bunch of Higher Order Components just to deliver a class name.\r\n\r\n> I think adding provide\/inject to directives would allow users to easily mess up things and make them really hard to debug\r\n\r\nYes, I agree, this is a downside, but you could say the same for provide\/inject functionality in components and that is already in Vue. You could also say the same about React's Context.\r\n\r\n> I want to reemphasize that It's meant for libs not applications\r\n\r\nI'm sorry but I don't really understand this. Provide\/inject can be used in components right? Components are only used in applications.","> Yes, I agree, this is a downside, but you could say the same for provide\/inject functionality in components and that is already in Vue. You could also say the same about React's Context.\r\n\r\nAs you can imagine, it's not because _it's dirty that we can throw dump to it_\r\n\r\n> I'm sorry but I don't really understand this. Provide\/inject can be used in components right? Components are only used in applications.\r\n\r\nComponents can be added by libs\r\nhttps:\/\/vuejs.org\/v2\/api\/#provide-inject","@posva That is not a fair summation of what I was saying. I'm saying that debating provide\/inject's pros and cons is pretty much pointless because it is already a framework feature. It solves the same problem as React's Context: the need for context-aware data delivery. My issue is that components can receive data in this way and directives cannot. Why? You can do just as much harm if not more with components. This feature exists anyway because maintainers ( maybe even yourself :) ) have decided that the pros outweigh the cons. Is there a con that applies to directives that doesn't also apply to components?\r\n\r\n> Components can be added by libs\r\n\r\nYes and directives can be added by libs too.\r\nhttps:\/\/vuejs.org\/v2\/api\/#Vue-directive","What I'm trying to say is that adding p\/i to directives could make more harm than help...\r\n\r\nI pointed out the link because it talks about the purpose of provide-inject...\r\nThat last part of your comment was provocative and unnecessary... I found it offensive because I was trying to help...","@posva Sorry, that was not my intention at all. I just wanted to clarify for anyone reading this that both directives and components can be installed via libraries and so that is not a difference between the two when considering whether one or both have a legitimate use for P\/I.","> I just wanted to clarify for anyone reading this that both directives and components can be installed via libraries and so that is not a difference between the two when considering whether one or both have a legitimate use for P\/I.\r\n\r\nBut it's not like that, there's a difference.\r\nSo, do you have an other use case apart from the CSS one you mentioned?","> But it's not like that, there's a difference.\r\n\r\nOk, what is the difference you're referring to? Or what is it about what you quoted that is incorrect (I'm legitimately trying to figure out what you mean)? \r\n\r\nI have another use case involving input validation but it's not much different from the use case I've already laid out. They are both essentially a more convenient way to set configuration so that you don't have to specify it over and over again as long as you're within a certain context. This seems to me like it is the whole point of P\/I as a feature but I feel like you are dismissing my use case without giving a reason.\r\n\r\nJust to be clear, I'm advocating for this feature as a library author. My end goal is to make using the library easier in the event that the library's API is better suited to use directives instead of components.","I just stumbled onto this as well. I would have liked to write a directive to access a shared object that is injected in components but inaccessible in a directive. \r\n\r\nThe shared object is the main instance of our application which gives us access to some state. In this case whether or not running on a Phone,Tablet,Desktop etc. Based on that information the v-responsive directive would behave slightly differently when setting appropriate classes on the bound element. \r\n\r\nI have to duplicate some detection code out now and still won't be able to allow a consumer of our application instance to override within that instance (there can be more than one on screen in some scenarios). Overriding is also required for SSR btw.\r\n","```javascript\r\nvnode.context.$root\r\n```\r\n\r\nwill give you the main instance as well.","This is very useful for situations when you want to add contextual meaning. For example, I have a `Popover` which have a slot for body. And I want to dismiss\/hide popover when user clicks on a particular link. \r\n\r\n```html\r\n<popover>\r\n   <h1>Not dismissable title<\/h1>\r\n   <button type=\"button\" dismiss-popover>close<\/button>\r\n   <router-link to=\"...\" dismiss-popover>go to...<\/router-link>\r\n   <button type=\"button\" dismiss-popover @click=\"changeStatus\">make offline<\/button>\r\n<\/popover>\r\n```\r\n\r\nIn this way we have kind of contextual directive for Popover component. Popover can provide own instance for everybody inside and `dismiss-popover` can easily get it.","...or use a scoped slot.","@LinusBorg  I can't use scoped slot because then I need to bind `@click` or whatever event. In Vue files I can't do this (it shows error telling me that there 2 duplicated attributes). Also I don't want to make my template handlers to be complicated:\r\n\r\n```html\r\n<popover>\r\n   <template slot-scope=\"popover\">\r\n      <h1>Not dismissable title<\/h1>\r\n      <button type=\"button\" dismiss-popover>close<\/button>\r\n      <router-link to=\"...\" dismiss-popover>go to...<\/router-link>\r\n      <button type=\"button\" @click=\"changeStatus\" @click=\"popover.close\">make offline<\/button>\r\n   <\/template>\r\n<\/popover>\r\n```\r\n\r\n>  - duplicate attribute: @click\r\n\r\n**Update**: Also if I create a scoped to Popover directive I can't use it inside provided slots. shows error:\r\n> Failed to resolve directive: v-dismiss-popover ","> it shows error telling me that there 2 duplicated attributes\r\n```html\r\n<button type=\"button\" @click=\"changeStatus(); popover.close()\">make offline<\/button>\r\n```\r\n> Also I don't want to make my template handlers to be complicated:\r\n\r\nThat's a valid opinion to have - personally I think scoped slots are worthy to learn and should be in everyone's arsenal.\r\n\r\n> Update: Also if I create a scoped to Popover directive I can't use it inside provided slots. shows error:\r\n\r\nWell that shouldn't be an issue because we are trying to use scoped slots *instead* of this directive...\r\n","@LinusBorg what about cases when Popover and its content in different components? Then you can't easily access popover to close the dialog by clicking or selecting somethid.\r\n\r\nUse case:\r\n\r\n```html\r\n<popover>\r\n   <canned-responses \/>\r\n<\/popover>\r\n```\r\n\r\nCannedResponses:\r\n```html\r\n<acordion>\r\n   <acordion-group>\r\n      <survey-list \/>\r\n   <\/acordion-group>\r\n   <acordion-group>\r\n      <prepared-responses-list \/>\r\n   <\/acordion-group>\r\n<\/acordion>\r\n```\r\n\r\nThen inside SurveyList I need to close Popover when user selects a survey. The only possible way currently is to emit event 2 times to reach Popover","That would probably be a solid usecase for provide\/inject if you don't want to pass down the scoped slot't callback 2 levels, but why through a directive? do it in the component the regular way.\r\n\r\nPersonally I would probably still prefer the `CannedResonses` component to emit an event when something was selected so I can do:\r\n```javascript\r\n<popover>\r\n   <canned-responses slot-scope=\"{ close }\" @selected=\"close\"\/>\r\n<\/popover>\r\n```\r\n\r\nOr even better, simply use a v-if in the parent:\r\n```javascript\r\n<popover v-if=\"show\">\r\n   <canned-responses @selected=\"show = false\"\/>\r\n<\/popover>\r\n```\r\n\r\nEdit: By the way, jus to give some perspective: If it seems like we actively try to resist adding this feature, it's because we generally try to challenge each feature request thoroughly because we want to try and keep both filesize and API surface increases to a minimum.\r\n\r\nThe codebase has already grown 20% since 2.0, we want to keep an eye on that. So for every new feature request that comes in and the potential is unclear, we challenge it by arguing against you, the ones arguing *for* it, to see if all options to solve this adequatly with the current API have been tried and found to not suffice.\r\n\r\nOnly then will we consider a feature request to make it into core.","Although this behaviour can be worked around, I agree that it would be useful to allow directives to access providers. My use case is for a wizard component where any other component can trigger an instructional animation which presents hints as tooltips that point to themselves. This could be achieved by wrapping each component in an Instruction component, but this is both verbose and unnecessary and would not easily allow for contextual help as in my opinion the instance component itself should be responsible for describing it's own help information, rather than the Instruction wrapper. I have written a library that side-steps these shortcomings, and it does work as described, but ideally would like to use the regular Vue logic to accomplish the same results.","Till this feature will be released I found a example how to use vnode for this case https:\/\/codepen.io\/Kradek\/pen\/zZmpNo","Is there any workaround to get parent's provide in the directive?\r\n\r\nHere is my user story:\r\n\r\nThe svg group has no width and height, so I build a provider(viewBox) on it. and it will be used on the the directive `v-text-wrap` to wrap text.\r\n\r\n```tsx\r\n<svg-group viewBox={width: 200, height: 200}>\r\n  <text v-text-wrap>Its very long long long text to wrap......\r\n  <\/text>\r\n<\/svg-group>\r\n```\r\n\r\nBTW, Defining the viewbox provider as directive to better reuse code. So when do implement this feature?\r\n","From the source there is no collected providers in `vm`. So currently the only workaround is :\r\n\r\n```ts\r\nimport { DirectiveOptions } from 'vue';\r\n\r\nexport const M6yDirective: DirectiveOptions = {\r\n  bind(el, bind, vnode) {\r\n      \/\/ todo: native element hasn't component instance.\r\n      const vm = vnode.componentInstance;\r\n      \/\/ cache the providers to speedup.\r\n      const providers = vm._providers = getProviders(vm);\r\n     if (providers.viewBox) ....\r\n  },\r\n  update(el, bind, vnode){\r\n      const vm = vnode.componentInstance;\r\n      \/\/ use the cached vm._providers  directly\r\n     vm._providers['viewBox']\r\n  },\r\n};\r\n\r\nfunction cloneExclude(dest, src, excludes: string|string[]) {\r\n  let vKeys = Object.keys(src);\r\n  if (typeof excludes === 'string') excludes = [excludes];\r\n  vKeys = vKeys.filter(value => -1 === excludes.indexOf(value));\r\n  vKeys.forEach(key => dest[key] = src[key]);\r\n  return dest;\r\n}\r\n\r\nfunction getProviders(vm) {\r\n  const providers:Object = {};\r\n  while (vm) {\r\n    if (vm._provided) {\r\n      cloneExclude(providers, vm._provided, Object.keys(providers));\r\n    }\r\n    vm = vm.$parent\r\n  }\r\n  return providers;\r\n}\r\n\r\n```","> On a side note, inject\/provide is meant for advanced usage on libs where we want to make things easier to use without having \r\n> the user to worry about connecting explicitly many things together, but is discouraged in applications because it makes things\r\n> implicit and harder to understand\/debug\r\n\r\nI agree with this, however, I don't understand the reasoning for having inject\/provide available in components but not directives.\r\nWhy can those advanced usages on libraries be implemented with components but not with directives? I always get the feeling directives are second class citizens in Vue for no particular reason.\r\n","From ealier in the conversation by @posva \r\n\r\n> But it's not like that, there's a difference.\r\n\r\nPossible to have some justification on this phrase ? I really don't get what the difference is.\r\n\r\nWhat I want to do is to expose register\/unregister methods in a parent component that needs to be aware of some of its children elements whereabouts. Similar to form validation in vuetify that uses a [registrable mixin](https:\/\/github.com\/vuetifyjs\/vuetify\/blob\/master\/packages\/vuetify\/src\/mixins\/registrable\/index.ts), but where the children are very non-intrusive directives, not components. I really don't see why this pattern would be suitable for components but not directives.","Just my two cents on this.\r\n\r\nI'm a Vue developer since 2017 (maybe more?) I recently started the transition of my company to Vue 3 and I'm trying to port some useful tools we've been using in Vue 2 to Vue 3 (Composition API) , one of these is the [Flip Toolkit](https:\/\/www.npmjs.com\/package\/flip-toolkit) which was [previously ported to Vue 2 here](https:\/\/github.com\/mattrothenberg\/vue-flip-toolkit).\r\n\r\nI'm trying to do a pure composition API of such a library and, given setup functions don't have access to the `this.$el `element anymore, I'm facing a dilemma.\r\n\r\nLet me explain: the core of the Flip toolkit are `Flipper` and a `Flipped` elements, the `Flipper` is a container for `Flipped` elements and `Flipped` elements register their `$el` with the Flipper element in order for the magic to work.\r\n\r\nPseudo-code looks like this:\r\n\r\nFlipper\r\n```js\r\nimport { Flipper } from 'flip-toolkit'\r\n[...]\r\nconst flipInstance = new Flipper({\r\n  element: this.$el,\r\n  [...]\r\n})\r\n\r\nconst addFlippedElement = () => {\r\n  flipInstance.addFlipped([...])\r\n}\r\n\r\nprovide('addFlippedElement', addFlippedElement)\r\n```\r\n\r\nFlipped\r\n```js\r\nconst addFlippedElement = inject('addFlippedElement')\r\naddFlippedElement({\r\n  element: this.$el\r\n})\r\n```\r\n\r\nUsage\r\n\r\nRoot of the app, maybe?\r\n```vue\r\n<template>\r\n  <Flipper>\r\n    <router-view \/>\r\n  <\/Flipper>\r\n<\/template>\r\n```\r\n\r\nRandomComponent.vue (inside a router view)\r\n```vue\r\n<template>\r\n  <Flipped>\r\n    <something \/>\r\n  <\/Flipped>\r\n<\/template>\r\n```\r\nThe system supports nested `Flipper`s and `Flipped` element, this is why provide\/inject works well, and this is how the vue 2 version of the library was developed.\r\n\r\nThe main concern of the `Flipper` components is:\r\n1. provide a way for child `Flipped` to register themselves\r\n2. access the `$el` of itself and its contained `Flipped` in order to register them with the library\r\n3. do the two points above with nesting support\r\n\r\nThe main concern of the `Flipped` component is:\r\n1. find its nearest parent of type `Flipper` \r\n2. give the nearest `Flipper` a reference to its `$el`\r\n\r\nA directive would be a much better fit for these kind of component in my opinion, the original vue-flip-toolkit uses `this.$el` in both of them in order to accomplish this task, and that's ok. But how would you translate a situation like this with composition API Components?\r\n\r\nIsn't a Directive more suited for accessing and manipulating DOM elements than a Component in these cases?\r\n\r\nIn this particular case, given I didn't write the APIs of the library I'm using, I find that a directive that can `provide` to its children would be very useful, probably also more ergonomic to use (but that's a highly subjective opinion)","It can be achieved now with\r\n\r\n`vnode.ctx.provides[InjectionKey]`","```js\r\nvnode.ctx.provides[InjectionKey]\r\n```\r\n\r\n`ctx` is not found in typescript declaration.\r\nif ignore warning, worked...","```\r\ndeclare module 'vue' {\r\n    interface VNode {\r\n        ctx: {\r\n            provides: Record<symbol | string, any>;\r\n        }\r\n    }\r\n}\r\n```"],"labels":["feature request"]},{"title":"Update slot content without rerendering rest of component","body":"### What problem does this feature solve?\r\nI have developed some components that can generate large amounts of HTML, and allow content to be added via slot. It appears that if the slot content is updated, the render function is called for the component; however, this seems like something that could be avoided through optimization which would significantly improve the performance of my component in some instances.\r\n\r\nIs this possible?\r\n\r\n### What does the proposed API look like?\r\nNot proposing API changes.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["Note: I understand this wouldn't be possible for scoped slots. However, an optimization that might help even for scoped slots would be to only trigger rerender of the child component if the rerender of the parent component generated a delta for the actual slot content.","Well, I think it would be possible to implement something that would diff slot contents before updateiung the components but - ignoring difficulties in implementing this for the moment, because I can't say much about this right now - it would come with a performance tradeoff:\r\n\r\nWith your proposal, we would save rendering the virtualdom of the child if nothing in the slot changed -\r\n but everytime the diffing of slot content **does** find changes in the slot content, we would be diffing the slot content twice - because after the render function of the child has run, the new vdom has to be diffed again.\r\n\r\nEssentially this means that now, children with big templates and small slot contents would run better, while children with small templates and big slots woudl run worse when changes happen.\r\n\r\nNot sure what is better...\r\n\r\nAlso, technically the child would keep an outdated virtualDOM, because while the content of the slot nodes is the same, the parent created fresh nodes when it re-rendered, so I suspect that this might be a technical hurdle.\r\n  ","In my case it's a slot that the component uses in a v-for loop to apply to hundreds or more repeats. In this case it's unquestionably faster to calculate the delta. I wonder if this can be reasonably detected.","> I wonder if this can be reasonably detected. \r\n\r\nHardly, and if so, only during compile time, not runtime. That would require some analysis during compilation that would have to derminate when a template is \"expensive, then set some flag so the component resolts to slot diffing during runtime, and doesn't for cheap components.\r\n\r\nSounds easy but measuring \"expensiveness\" would be very tricky considering `v-if` having a big impactr on when a temnplate is actually expensive and when not, and the small fact that we cannot statically analyse during compilation  how big the arrays that you render will be during runtime, etc. pp.\r\n\r\nA new API would be thinkable to set that flag manually, at least in theory.","I would say if either:\r\n\r\n- the slot is used inside any loop\r\n- the slot contents are smaller than the template\r\n\r\nThen that's a time it's probably worth it to test the delta.\r\n\r\nIn my particular case, it would save me having to make some rather unintuitive changes to the structure of a library that's used by a lot of developers in my company.","Also, calling the render function is typically much slower than performing a diff on two strings of data.","Hi.\r\n\r\nIs this issue still active? ","Yes.","@LinusBorg \r\n\r\n> everytime the diffing of slot content does find changes in the slot content, we would be diffing the slot content twice - because after the render function of the child has run, the new vdom has to be diffed again.\r\n\r\nWould it be possible to introduce a new watcher boundary API? This would be an internal implementation, to which template slot content would compile to.\r\n\r\nThis way, the slot's content wouldn't even have to re-render if the data it depends on doesn't change. Since it doesn't re-render, it doesn't need to be diffed.","Just to show another use-case of how I bumped into this:\r\n\r\nVue's computed properties currently can't take any arguments. Instead, if you want to use some calculated data in a loop (which is generally where you'd need to pass data into a computed), you have to resort to one of these:\r\n\r\n1. Using a regular method, such as `calculateOrderTotal(order)`.\r\n\r\n    However, using a regular method means that the data is recomputed with every render. That's bad for performance.\r\n\r\n1. Create a separate functional component for the list item, and create an instance of that component for each item in the list, such as `<Order v-for=\"order of orders\" :order=\"order\">`. The component will then only re-render when the data passed to it is changed, which is what we want.\r\n\r\n    However, putting the template in the component is not ideal because **a)** these are usually small snippets that don't really warrant being in their own template **b)** if the component uses a template then it needs its own `.vue` file, which makes this solution feel even heavier than it already is.\r\n\r\n    So the solution I came up with is to have the component only calculate the data, but render all of its HTML via the default slot, thereby forgoing the template altogether. And **now we get to the crux of the issue: if we pass content in the slot to the child component, it will always re-render along with the parent, which means that the data will also be recalculated on every single render**<sup>1<\/sup>. This totally negates any benefit we got over using a regular method.\r\n\r\nHere's demo in action: https:\/\/codepen.io\/JosephSilber\/pen\/MXJZro\r\n\r\n---\r\n\r\n<sup>1<\/sup> A potential solution would be to have a `computed` property within the child component, but then the component can no longer be functional. When rendering a big list, using functional components makes a huge difference.","You can create a computed prop that returns an array of total order values for all orders","@jacekkarczmarczyk the problem with that is that if _any_ of the orders changes, _all_ order totals then have to be recalculated.","Good news! It seems like this will be resolved in Vue 3.0:\r\n\r\n> All compiler-generated slots are now functions and invoked during the child component\u2019s render call. This ensures dependencies in slots are collected as dependencies for the child instead of the parent.\r\n>\r\n> This means that:\r\n>\r\n> 1. when slot content changes, only the child re-renders;\r\n> 2. when the parent re-renders, the child does not have to if its slot content did not change.\r\n\r\nhttps:\/\/medium.com\/the-vue-point\/plans-for-the-next-iteration-of-vue-js-777ffea6fabf","will there be a 2.6 update to fix this?\r\n\r\nI have a basic spreadsheet like app where some slots are overridden with slots representing validation or special formatting of the data. When a user updates a the model within an input and tabs to the next input, the components child slots re-render causing the parent to re-render, and the user's input box loses its focus.","Any news on this ? it make some code\/lib (using a lot slots) unusable.\r\nIn my case it make Vuetify very performance hungry as a lot of thing rerender without need.","@stygmate the just-released [v2.6.0-beta.2](https:\/\/github.com\/vuejs\/vue\/releases\/tag\/v2.6.0-beta.2) includes #9371, which addresses this issue.","@JosephSilber That doesn't seem to address dynamically created slots, right?\r\n\r\nWe have a lot of forms where the structures are defined by a json document on load, this does mean that the slots are dynamically defined (even if they don't change once loaded in)\r\n\r\nA big issue the rerender is causing is that certain sub-components fetch extra data, which it's doing on every re-render in this case.\r\nIf anyone can provide a viable workaround that would be great too \ud83d\udc4d ","> We have a lot of forms where the structures are defined by a json document on load, this does mean that the slots are dynamically defined (even if they don't change once loaded in)\r\n\r\nThis short explanation doesn't really explain what exactly you do and mean by \"dynamically created slots\".\r\n\r\nI would advise you to join us in the forums @ forum.vuejs.org and open a more in-depth topic explaining your situation there.","A `.json` fetched from the server (see [docs](https:\/\/docs.laravel-enso.com\/packages\/form-builder.html#usage) for format example)\r\n\r\nall `\"custom\": true,` fields are translated to a slot in [EnsoForm.vue](https:\/\/github.com\/laravel-enso\/FormBuilder\/blob\/master\/src\/resources\/js\/components\/enso\/vueforms\/EnsoForm.vue) which are then filled by the page implementing the form.\r\n\r\nA simple example is a custom multi-select where a sum is added\r\n\r\n```vue\r\n<template slot=\"example\" slot-scope=\"{ field, errors, i18n, locale }\">\r\n    <div>\r\n        <select-field\r\n            :errors=\"errors\"\r\n            :field=\"field\"\r\n            :i18n=\"i18n\"\r\n            :locale=\"locale\"\r\n            ref=\"example\"\r\n            :custom-params=\"{ repairType: lastParent.id || null }\"\r\n            @input=\"serviceSelected\"\r\n        \/>\r\n        <span>Total: {{ total }}<\/span>\r\n    <\/div>\r\n<\/template>\r\n```\r\n\r\nCurrently, when the total is updated the whole form is re-rendered, which causes all ([server-side](https:\/\/docs.laravel-enso.com\/packages\/form-builder.html#server-side-select)) `<select-field>` components to fetch their options from the server again","any news for this one ? Vuetify (the most stared Vuejs project) seems generate a lot of slot dynamically and performance are really really bad in some case. vuetifyjs\/vuetify#6201","Would be helpful to have some. Up-to-date example that demonstrates the effect, especially with the new slot syntax. \r\n\r\nFrom what I've read I don't entirely get the problem. ","@LinusBorg, it is really quite simple if you have an component with a slot\r\n```html\r\n<component>\r\n  <slot :value=\"value\" @change=\"v => value = v\" \/>\r\n<\/component>\r\n```\r\n\r\nWhenever the `@change` handler is fired `value` is updated. That is good. The problem is that when this value is updated vue rerenders the `slot`. That is exactly what you would want to happen and it does. The problem is that it does this by re-rendering the whole `component` not just the slot. You can test this out by putting anything else in the `component` and it get re-rendered too.\r\n\r\n```html\r\n<component>\r\n  <input \/>\r\n  <slot :value=\"value\" @change=\"v => value = v\" \/>\r\n<\/component>\r\n```\r\n\r\nSet the focus to the `input` field and when `value` changes, you'll the focus leave the `input`\r\n","@LinusBorg I can show you a live project where we are using a lot of `@change` on a v-text-field\r\n\r\n[Vetura Kosove](https:\/\/www.tepazari.com\/posto-shpallje-falas\/vetura\/vetura-kosove)\r\n\r\nPS.\r\nThe language is Albanian but if you write in a good pc you will not notice a delay, but trying to write in input from a mobile (especially Android) will make typing a hell.\r\n\r\nCheers","> ..., but trying to write in input from a mobile (especially Android) will make typing a hell.\r\n\r\n@LinusBorg @besnikh exactly the same problem in my app !","I see what you mean but I don't really see a via able way to accomplish this except *not* using a virtualDOM, which means writing a new framework, essentially. \r\n\r\nYou find similar challenges in all vDom based frameworks (react etc.) - to update a slot he whole patent has to re-render in order to determine what to even send to the slot, that's determined by the render function. \r\n\r\nAnd nested slots that do a lot wig work on re-renders get expensive if the dependency that's being updated by e.g. an input is being provided by some distant ancestor-component.\r\n\r\nFor the framework that we have, we should rather investigate better patterns to compose our components in order to prevent these deep re-renders.","@LinusBorg I'm not an expert in virtual DOMs, so I'm interested in doing a 5 whys here: \r\n>  to update a slot he whole patent has to re-render in order to determine what to even send to the slot, that's determined by the render function.\r\n\r\nWhy? What's the importance of it being a slot? If it wasn't a slot it would work correctly, and the resultant html and javascript look the same.  The parent would get the updated property intentionally and then the child would be afterwards. However, we know something, we know that this isn't a property changing, instead we know it is a slot changing. Soooo....\r\n\r\nI'm going to say something that is probably dumb:\r\n* Why don't we just wrap the slot in a component and treat it as a component that has inputs passed in:\r\ni.e.\r\n```html\r\n<component :props=\"parent\">\r\n  <slot-component :props=\"parent + child\">\r\n    <input>\r\n  <\/slot-component>\r\n<component>\r\n```\r\nbut instead of those inputs `parent` here being edit which cause the component to rerender, bypass re-rendering the `component` and just pass those same props to the `slot-component`.  Since we know it is a slot what could possibly make the `component` need to re-render?","I'll answer aboutbrh why tomorrow, it's 1am here. \r\n\r\n But as I see a risk of us  talking past each other I would *still* be thankful for an actually runnable example clearly demonstrating your issue instead of 3 lines from above. \r\n\r\nThe thing about the focus is clearly not the performance issue we are discussing here... ","Solving this seems to require decoupling the scope of rendering from the scope of a component. This will be coming with Vue 3, I think it is highly unlikely in Vue 2.","Is this fixed now in vue 3? @adamvleggett ","Aside from the optimizations we already introduced to Vue 2 with `v-slot`: No. \r\n\r\nVirtualDOM implementations rely on this behavior in general. Vue 3 is no different.\r\n\r\nVue 3 might offer improvements in terms of performance as we now only need to re-render and diff vDOM for dynamic elements - if you generate large structured of static HTML, those can now be ignored by the renderer due to compiler optimizations.","@LinusBorg I think I have use-case similar to `jlsjonas` and `wparad`, but not to the OP example. \r\n\r\n### disclaimer\r\nI'm posting it here because I think is related, if you think is not or is simply the way Vue works and I should read more about VDOM topic feel free to mark it as spam \u2014 no problem at all \ud83d\ude4f.\r\n\r\n### long read\r\n\r\nHere's the [demo sandbox](https:\/\/rnm83.csb.app\/)\r\n\r\n```vue\r\n<template>\r\n  <!-- parent -->\r\n  <div class=\"parent\">\r\n    <slot v-bind=\"{ binding }\"><\/div>\r\n  <\/div>\r\n<\/template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Parent',\r\n  data() {\r\n     return { binding: 0 }\r\n  },\r\n  \/\/ something that mutates 'binding', omitted for brevity, check demo\r\n}\r\n<\/script>\r\n```\r\n\r\n```vue\r\n<template>\r\n  <!-- child -->\r\n  <div class=\"child\">\r\n    <slot>Default slot content<\/slot>\r\n  <\/div>\r\n<\/template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Child',\r\n}\r\n<\/script>\r\n```\r\n\r\n#### Usage\r\n\r\n```vue\r\n<parent v-slot:default=\"{ binding }\">\r\n  <!-- do stuff with binding -->\r\n  <pre> binding: {{ binding }}.<\/pre>\r\n\r\n  <!-- these do not do anything with \"binding\" but are re-rendered -->\r\n  <child id=\"1\" \/>\r\n  <child id=\"2\">Why am I updated?<\/child>\r\n<\/parent>\r\n```\r\n\r\nIs it expected that the `<Child>`s are re-rendered even though nothing really changes for it? I was not expecting and makes me think about some of my renderless patterns. But maybe I missed some part in docs about it or missing something obvious?! \ud83e\udd37 \r\n\r\n*EDIT*: actually updated `<parent>` and `<child>` to use render functions at the demo to properly check for re-render. It does make some sense if we see things through the render function eyes: the `$scopedSlots.default({})` at `<parent>` needs to be called when \"`binding`\" updates thus re-rendering everything: I thought Vue diff mechanism could `caught` that and prevent `<Child \/>` re-rendering. Even the provided `binding` is not reactive value, like a method, re-render is still triggered.\r\n\r\n#### Real use case\r\n\r\n\r\n- `<Parent>` = is actually `popper.js` wrapper that I use to make flyout menus\/tooltips\/selectboxes wtv. And \"`binding`\" is for example the updated position object, that consumers can bind to any element or component to be dynamically positioned.\r\n\r\n- `<Child>` = can be anything, but a common example could be a `Menu` and a `MenuItem` that receives the text and other content \u2014 or other components ex: `<app-icon>` \u2014 via default slot content.\r\n\r\n```vue\r\n<v-popper #default=\"{ reference, popper, close }\">\r\n  <button v-bind=\"reference.attrs\">Some Ref<\/button>\r\n  <div :style=\"popper.styles\">\r\n     <!-- re-renders when popper.styles is updated -->\r\n     <app-menu>\r\n\t     <app-menu-item>Go to x<\/app-menu-item>\r\n\t     <app-menu-item @click=\"close\">Dismiss<\/app-menu-item>\r\n\t     <app-menu-item @click=\"close\">\r\n\t        <app-icon name=\"pen\" \/>\r\n\t        <span>Edit<\/span>\r\n\t     <\/app-menu-item>\t        \r\n\t <\/app-menu-item>\r\n  <\/div>\r\n<v-popper>\r\n```\r\n\r\nEven if I make wrapper components for the \"slots\" and orchestrate everything with provide\/Inject, passing a reference to a method via slot scope also triggers a re-render. Not using `slot-scope` does not re-render as expected. The only alternative that I'm seeing is using `$refs` instead of slot scope, but I really don't like that idea.\r\n\r\n[Real-world-ish demo](https:\/\/codesandbox.io\/s\/v-popper-demo-3j01i?file=\/src\/App.vue)\r\n\r\n<details><summary>Code example<\/summary>\r\n\r\n```vue\r\n<v-popper-provider>\r\n  <v-popper-reference>Some Ref<\/v-popper-reference>\r\n  <v-popper-el v-slot:default=\"{ close }\">\r\n     <!-- re-renders on VPopperEl internal style updates -->\r\n     <app-menu>\r\n\t     <app-menu-item>El<\/app-menu-item>\r\n\t     <app-menu-item @click=\"close\" >El<\/app-menu-item>\r\n\t <\/app-menu-item>\r\n  <\/v-popper-el>\r\n<v-popper-provider>\r\n```\r\n\r\nThe alternative is to use $refs and call method \r\n\r\n```vue\r\n<v-popper-provider ref=\"popper\">\r\n  <v-popper-reference>Some Ref<\/v-popper-reference>\r\n  <v-popper-el >\r\n     <!-- no scoped slot, no re-render, but refs feels like a dirty workaround -->\r\n     <app-menu>\r\n\t     <app-menu-item>El<\/app-menu-item>\r\n\t     <app-menu-item @click=\"$refs.popper.close\">El<\/app-menu-item>\r\n\t <\/app-menu-item>\r\n  <\/v-popper-el>\r\n<v-popper-provider>\r\n```\r\n<\/details>","Some articles introduce the use of 'renderless' component to provide e.g. data binding. I guess it's not recommended due to this issue? (if the slot is large)"],"labels":["improvement"]},{"title":"Line numbers for errors in the html parser","body":"### What problem does this feature solve?\r\nErrors raised by the html parser (`options.warn` in the code) don't register the location of the error.\r\n\r\nWith the location it will be much easier to debug.\r\n\r\nFor example if I forget to close an HTML tag, the compiler will complain and tell me the name of the tag. However I will have no idea where the opening tag is located. For moderately big files it's quite impractical.\r\n\r\n### What does the proposed API look like?\r\nIn `parseHTML` we could add a property in options that will include the line at which the HTML is included in the `.vue` file. We can use this to offset the location before printing it.\r\n\r\nAs for getting the locations themselves I have no idea how to proceed. If someone can give me some pointers I may submit a pull request.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["**Is this what we should be looking at in relation to this issue?**\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/compiler\/parser\/html-parser.js#L299\r\n\r\n----------------\r\n\r\nWell, there's also this one:\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/compiler\/parser\/html-parser.js#L188\r\n\r\nIt's location is self-explanatory.","Yes, these are definitely the warnings I am referring to.","+1 for this. Right jumped into vue and that would realy help to debug the html code\r\n\r\nThis request is related to this pr: https:\/\/github.com\/vuejs\/vue\/pull\/7127"],"labels":["feature request","improvement","has PR"]},{"title":"Callback refs as additional alternative to \"named\" refs","body":"### What problem does this feature solve?\r\nCurrently if you want to use refs to elements (DOM elements or Vue components - see attribute\/prop \"ref\") you have to provide a string as \"ref\" attribute. A callback function as \"ref\" attribute like in React is currently not supported in Vue.\r\nIt would be great if also callback functions could be provided as \"ref\" attributes (especially when doing a bit more advanced stuff using the \"render\" function).\r\n\r\nThe callback function should be called both when the referred element is created and also when it is disposed (React for example passes null in the latter case).\r\n\r\nIt seems that this feature had already been implemented in the past but has been reverted later (I do not know for what reasons the changes have been reverted) => see: \"[WIP] Support for ref callback #4807\"\r\n\r\nThank you very much.\r\n\r\n### What does the proposed API look like?\r\nPlease see line 178 here:\r\nhttps:\/\/github.com\/vuejs\/vue\/pull\/4807\/commits\/90c6c2902b1f124093ad0d514984230194cb818e\r\n\r\nconst myRefCallback(ref, remove) {...} (where \"remove\" is boolean) seems to me like a better solution that the one that is used in React where in the \"remove\" case the ref callback function is just called with null.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["FYI this feature has been dropped at the time because of this bug https:\/\/github.com\/vuejs\/vue\/issues\/4998","I am not very sure what you preferred, but i think `v-bind:ref` could help with most of the situations. Although using `:ref` with `v-for` will still make the `$refs` be Arrays and disposing a components will not destroy the Array but destroy the components inside (may result in empty array\/s).\r\nTake a look at this example: <https:\/\/jsfiddle.net\/no1xsyzy\/036scaat\/4\/>, pay attention to the console output.","Thanks a lot, no1xsyzy, for that information and your demo.\r\nBut the problem is a bit deeper:\r\n'String refs' are fine - I normally use them as-is in most cases.\r\nBut 'callback refs' are far more powerful.\r\nEspecially for those cases where you do not use templates (let's say you develop some kind of extension library for Vue) the lack of 'callback refs' may really be a show stopper.\r\n\r\nThat's why Facebook\/React have switched from 'string refs' to 'callback ref':\r\nhttps:\/\/facebook.github.io\/react\/docs\/refs-and-the-dom.html#legacy-api-string-refs\r\n\r\nMoreover in Vue it's not possible to use refs in templates for functional components (as that would require callback refs).\r\nIn React that's possible:\r\nhttps:\/\/jsfiddle.net\/ozjdyr9L\r\n\r\nIn some cases and only for non-functional component it may be possible to simulate the behavior of callback refs by using unique generated ref names and some additional logic in certain lifecycle methods - but that would be really ugly, in some cases slow and not that powerful.\r\n\r\nThe feature to allow 'ref callback' would open Vue some really interessting new possibilites.\r\n","I changed my mind regarding the above suggested signature of the callback function:\r\nI think it would be better to make the callback signature somehow compatible with React to make it easy for wrapper or whatsoever libraries that provide something that could be used for both React and Vue.\r\n\r\nInstead of \r\n```function myRefCallback(ref, remove) {...}``` \r\n\r\nI would now suggest:\r\n```function myRefCallback(ref, prevRef) {...}``` \r\n\r\nMeans \"myRefCallback\" will either be called:\r\n```myRefCallback(ref, null)``` (on rendering)\r\nor\r\n```myRefCallback(null, ref)``` (on removing)\r\n\r\nReact does not have that second argument in the ref callbacks, but the first argument would behave exactly like in React.\r\n","I'm also interested in Vue implementing callback refs. They're so much more powerful in my opinion.\r\n\r\nIn my situation, as a workaround, I've resorted to storing a reference to the `vnode` whose component instance I want a ref for, then delegating to `vnode.componentInstance` to get the ref at a later time.\r\n\r\nUnfortunately I have no way of knowing when the instance has been created\/mounted, because until then `vnode.componentInstance` is undefined. I'm pulling the instance instead of relying on a push from the framework.","Frankly speaking I don't think that it's a good idea. Function as a `ref` allows to do crazy side effect stuff. Moreover, you can create internal state using closures and you will recreate this internal state each time your render function is called. Render function of functional components are called together with parent's render function\r\n\r\nSo, eventually it may have performance issues","Maybe we can use directive to implement ref callback function.\r\nI published a plugin [vue-ref](https:\/\/github.com\/vueComponent\/vue-ref), you can try it.\r\nI used it in [ant-design-vue](https:\/\/github.com\/vueComponent\/ant-design-vue) and found no problems for the time being.","I really don't know why is this issue is neglected.","> Frankly speaking I don't think that it's a good idea. Function as a `ref` allows to do crazy side effect stuff. Moreover, you can create internal state using closures and you will recreate this internal state each time your render function is called. Render function of functional components are called together with parent's render function\r\n> \r\n> So, eventually it may have performance issues\r\n\r\nThat's a pretty disingenuous argument. Just because you can do bad things with the feature doesn't mean the feature is bad. You could easily create infinite update cycles with get\/set refs, but that doesn't mean we don't support it.\r\n\r\nIn addition, \"crazy side effect stuff\" over-generalizes an entire class of necessary features. The whole point of UI libraries is to manage side effects, otherwise what's the point of building UIs? It's the reason why we need `watchEffect` in the first place.","I'm building a library for Vue 3 and this is one of the limiting factors. I have controlled components that can receive an `as-child` boolean prop which causes the component to render as a fragment and \"pass\" the required props to its children via `v-slot`.\r\n\r\n```vue\r\n<Dialog.Content>\r\n  ...\r\n<\/Dialog.Content>\r\n<!-- becomes -->\r\n<div id=\"ally-0-content\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"ally-0-title\" aria-describedby=\"ally-0-description\" data-state=\"open\">\r\n  ...\r\n<\/div>\r\n\r\n\r\n<Dialog.Content as-child v-slot=\"props\">\r\n  <section v-bind=\"props\">\r\n    ...\r\n  <\/section>  \r\n<\/Dialog.Content>\r\n<!-- becomes -->\r\n<section id=\"ally-0-content\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"ally-0-title\" aria-describedby=\"ally-0-description\" data-state=\"open\">\r\n  ...\r\n<\/section>\r\n```\r\n\r\nHowever, the controlled component sometimes needs a reference to the DOM node to implement stuff like focus trapping, custom event management, layout measurements etc. If rendering as a fragment, there's no official way to get the DOM node that's supposed to receive the props, but a callback ref passed via `v-slot` would work perfectly.\r\n\r\n### Workarounds\r\n\r\nSurprisingly, when I simply pass the callback ref as a property of the slot props, the callback ref works as expected.\r\n\r\nWhile this solves my issue, I'm not sure if this is intended behaviour or if it will be removed in the future by a fix.\r\n\r\n```\r\n<!-- DialogContent -->\r\n<script setup lang=\"ts\">\r\nconst setRef = (node: HTMLElement | null) => {\r\n  ...\r\n};\r\n<\/script>\r\n\r\n<template>\r\n  <slot v-bind=\"{ref: setRef}\"\r\n<\/template>\r\n\r\n<!-- App -->\r\n<Dialog.Content as-child v-slot=\"props\">\r\n  <section v-bind=\"props\"> <!-- the callback ref is correctly triggered here -->\r\n    ...\r\n  <\/section>  \r\n<\/Dialog.Content>\r\n```"],"labels":["feature request"]},{"title":"transition-group DOM update lag when using css frameworks","body":"### Version\r\n2.3.3\r\n\r\n### Reproduction link\r\n[http:\/\/jsbin.com\/fegogus\/edit?html,css,js,output](http:\/\/jsbin.com\/fegogus\/edit?html,css,js,output)\r\n\r\n### Steps to reproduce\r\nApply a transition group to v-for when using popular CSS frameworks, most noticeable with Semantic-UI but also apparent with Bootstrap. Example uses table rows but issue also appears with something more simple, such as an unordered list.\r\n\r\n### What is expected?\r\nTransition group continues to have similar performance as it does without any CSS applied\r\n\r\n### What is actually happening?\r\nThere is a considerable amount of update lag, particularly when changing the v-for array using slice\r\n\r\n---\r\nThis obviously walks the line between a VueJS issue and an issue for one of the involved frameworks. I'm opening the case here though as honestly I don't know that anyone on the Semantic-UI side of things would be able to help.\r\n\r\nThe example is a little more complicated than needed to reproduce the issue simply because I wanted to show my use case - which is animating additions to the array used by v-for but otherwise having no transitions. This is because the table will also be paginated (sliced) or sorted and I don't want to animate that process at all.\r\n\r\nIn the example you can toggle using a transition-group on and off. Without the transition group the DOM updates instantly as expect. With it turned on, and even without any transition being active, you can see that toggling between sliced and the full array is very slow to update the visible DOM.\r\n\r\nAlso sorry for submitting this three times, the new issue vue site was doing something goofy in Chrome, had to switch to Safari.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["It seems to be Chrome only bug. Work fine on Firefox.","I'm still seeing it in Firefox in Windows and macOS.   Also tried Chrome Canary and Firefox beta channel.  Its really noticeable if you toggle the transition group off and then slice the array using the other button there.","Looking a bit more into it. It looks like having a dynamic `name` for the transition is greatly adding the lag sensation. Setting `name=\"fade\"` improves a lot.\r\nIt looks like something is editing inline styles with too many components while only one should be animated (I may be wrong)\r\n\r\n<img width=\"400\" alt=\"screen shot 2017-06-08 at 16 35 43\" src=\"https:\/\/user-images.githubusercontent.com\/664177\/26934165-e0a81852-4c68-11e7-9f20-0df9c90ade41.png\">\r\n","I figured the dynamic name was adding to some of the lag, but if you remove name completely, or setup a style without any transition applied, there's still a pretty noticeable pause.    This becomes more pronounced with a more complicated v-for.  For instance the table in my app has a lot more data and some other functions generating the table and the display lag is a pretty big bummer. \r\n \r\nSince I'm not actually interested in animating the entire list I might try to see if there's a way I can just animate the additions without wrapping v-for with a transition group.","My observation is that `transition-group` enables flip technique by default. However, it requires at least one call to `getBoundingClientRect`. Source: https:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/platforms\/web\/runtime\/components\/transition-group.js#L65.\r\nThis forces style recalculation and layout reflow. As the chart show below.\r\n\r\n<img width=\"368\" alt=\"screen shot 2017-06-14 at 10 38 43 am\" src=\"https:\/\/user-images.githubusercontent.com\/2883231\/27113142-c6232a38-50ed-11e7-9899-24c1821298cf.png\">\r\n\r\nThis is usually cheap with small style sheet, but with a full blown CSS framework recomputing styles is too expensive. ","I don't think this is fixable in Vue framework, though. I have tried some way to optimize away `getBoundingClientRect` call but it requires `getTransformationInfo` which causes style recalculation as well. Since transition-group is designed for FLIP technique, there is little chance we can avoid at least one style recalculation call. \r\n\r\nFairly, the click event listener still respond in about 100ms even for CPU 20X slowdown, which seems acceptable. If the CSS framework adds too many rules, well, then FLIP technique is something you might want to avoid.","Thank you for investigating further, that explanation makes sense.  Even without any specific classes applied its obvious that Semantic-UI and others are making changes to elements like body, text, etc directly.  Thus causing the recalculation load.","I have the same problem with Bulma"],"labels":["improvement","transition"]},{"title":"Provided props are not injected into functional components ","body":"### Version\r\n2.3.3\r\n\r\n### Reproduction link\r\nhttp:\/\/jsfiddle.net\/p861bj9y\/\r\n\r\n### Steps to reproduce\r\nI created a minimal reproduction of the behavior I am trying to test, the example just needs JSX to work. \r\n\r\n### What is expected?\r\nThe properties passed down from parent should show up in `ctx.injections`.\r\n\r\n### What is actually happening?\r\n`Ctx.injections` exists but remains empty. The properties are not being passed down to the functional component context.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["It's because that instead of `parent`,  `child` is considered to be children of `vm` (maybe an issue). So you may need to write `provide` in `vm`.\r\n\r\nBTW, your fiddle is using vue@1.0.16 \ud83d\ude05","\r\nThe lookup algorithm for provide inject is the child looks at itself for provided attributes and then loops up it's `$parent` hierarchy in search of provided props until it is at the root.\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/b182ac40697edbe8253d4bd68b6ac09e93259e1c\/src\/core\/instance\/inject.js#L59-L59\r\n\r\nCouldn't get your fiddle to run, but when i ran https:\/\/jsfiddle.net\/Austio\/vhgztp59\/7\/ this fiddle the $parent was undefined on the child component when i got to the lookup context.  At least that is a start if this is not an issue with rendering into slots and there not being a relationship between the components.","it looks like the functional component is rendered before slots is resolved\r\n","@Kingwl correct, and that's kind of a technical requirement.","I remember I raised the point because I was getting crazy about it. At the end, it looked normal to me because functional components are attached to component they're rendered in and therefore when used in a slot, they get attached to the outer component. However, this is not the case with non-functional components:\r\n\r\nContainer injects `mode: 'foo'` and renders `<div><slot\/><\/div>`\r\n```html\r\n<!-- rendered in App -->\r\n<container>\r\n   <!-- parent is App, mode is undefined -->\r\n  <functional><\/functional>\r\n<\/container>\r\n\r\n<container>\r\n   <!-- parent is container, mode is foo -->\r\n  <not-functional><\/not-functional>\r\n<\/container>\r\n```\r\n\r\nhttp:\/\/jsfiddle.net\/p861bj9y\/\r\n\r\nedit: @alidcastano I updated the fiddle in your comment since yours wasn't even using Vue 2","Haha sorry for using the wrong Vue version in the fiddle, I was too caught up on not being able to configure JSX that I didn't realize. @posva Thanks for fixing my example! \r\n\r\n--\r\n\r\nSo the issue here is not that the functional component can't receive the provided properties, it's that the functional component is rendered before the slot?\r\n\r\n@LinusBorg By \"technical requirement\" does that mean that there is no workaround or that the behavior is intended? \r\n\r\nShould a container be created to serve as the `vm` that passes down the props? For example, the design would change to this:\r\n\r\n```\r\n\/\/ before\r\n<parent-component>\r\n  <child-component \/>\r\n<\/parent-component>\r\n\r\n\/\/ after\r\n<vm-container>\r\n   <parent-component>\r\n     <child-component \/>\r\n   <\/parent-component>\r\n<vm-container>\r\n```\r\nBut the above example seems unnecessarily bloated since the essence of the parent component already entailed all the data it needed to provide to the child. But I'm open to discussion; is this what you guys suggest? ","the `vm-container` will not change anything because the slot is rendered in `app` context","> By \"technical requirement\" does that mean that there is no workaround or that the behavior is intended?\r\n\r\nThe behaviour is a result of the way functional components work. Consider this set of components:\r\n```html\r\n<!-- template of a `parent` component -->\r\n<template>\r\n  <Child>\r\n    <functional \/>\r\n  <\/Child>\r\n<\/template>\r\n```\r\nWhen you pass a functional component into another component's slot, it has to be rendered befor it is passed to the child, so that that child component can receive the resulting vNodes as the slot content. (*)\r\n\r\nIn the context of my example above, that means that at the moment that the `<functional>` component renders, the available parent is the outer component (`<parent>`), not the `<child>`.\r\n\r\nConsequently, the only injections available to the functional component are those that are available in `<parent>` as well.\r\n\r\n----\r\n(*): That's just how the current implementaiton of the virtualdom works with functional components. To change that would require quite changing quite a lot of internal mechanics.","@posva @LinusBorg Got it, thanks for explaining.\r\n\r\nSo due to these requirements, the only way to use provide\/inject with functional components is to have the props provided in the `app` context.\r\n\r\nI'm sure this constraint will be clarified in the documentation. Please go ahead and close this issue if there isn't anything else that needs to be done or clarified; thanks again! ","Maybe we can find a way to improve functional component in slot\r\nBut at the moment, it should be done like @posva  and @LinusBorg  said","@Kingwl Thanks for keeping this open.\r\n\r\nI finally had some time to try to incorporate this into my [vue-mobiledoc-editor](https:\/\/github.com\/alidcastano\/vue-mobiledoc-editor)  plugin using the above advice. One problem that I foresee if the component needs to be used from the `app` instance, is that it's more difficult to allow flexibility with the nested components used.\r\n\r\nFor example, I have to export the components already registered under the app instance: \r\n\r\n```\r\n...\r\n\r\nexport default Vue.extend({\r\n  render (h) {\r\n    return (\r\n      <div>\r\n        <ParentComp>\r\n          <ChildFuncComp\/>\r\n        <\/ParentComp>\r\n      <\/div>\r\n    )\r\n  },\r\n\r\n  provide () { \/\/ data that needs to be injected into functional components \r\n    return {\r\n       msg: 'hello'\r\n    }\r\n  },\r\n\r\n  components: {\r\n    ParentComp,\r\n    ChildFuncComp\r\n  }\r\n})\r\n```\r\nThen from my understanding, when the user is using the plugin, it would be like so: \r\n\r\n```\r\n\/\/ template\r\n<div id=\"app\">\r\n   <div id=\"#someWhereInApp\" \/>\r\n<\/div>\r\n\r\n\/\/ script \r\nimport SuperCoolComponent from 'SuperCoolComponent' \r\n\r\nexport default {\r\n   mounted () {\r\n    this.$once('mounted', () => new SuperCoolComponent().$mount('#someWhereInApp'))\r\n    this.$emit('mounted')\r\n  }\r\n}\r\n```\r\n\r\nIf my implementation is correct then this severely limits the usage of provide\/inject with functional components since you're not allowed to individually import and register the components you wish to use.","I would use full components instead to support the provide\/inject","i'm trying to resolve this\r\nmaybe It is a long process\ud83c\udf1a","@Kingwl Were you able to resolve it?","Are there plans to address this issue in v3?\r\n\r\nEg I am trying to abstract a v-for away into a render function but my childs can be functional components (so they are already rendered when entering the render function and I cant clone them).","Any update?"],"labels":["bug"]},{"title":"Transition group classes not being properly deleted when using v-show","body":"### Version\r\n2.3.3\r\n\r\n### Reproduction link\r\n[https:\/\/jsfiddle.net\/ma7moudat\/u82ugj8z\/1\/](https:\/\/jsfiddle.net\/ma7moudat\/u82ugj8z\/1\/)\r\n\r\n### Steps to reproduce\r\nSet up a transition group that automatically rotates through a list of items and shows one item at a time (a slider if you will).\r\n\r\n\r\n\r\n### What is expected?\r\nThe last item disappears and the new item appears at the specified intervals.\r\n\r\n### What is actually happening?\r\nEverything seems to be running perfectly fine, but if you leave the window for a minute or so (go to a new tab or another window) and then come back, the transition group becomes a mess, because the transition classes get added over and over without being removed from the items.\r\n\r\nSo you would get something like this!\r\n\r\n```<div class=\"item crossfade-enter-to crossfade-enter-to crossfade-leave-to crossfade-enter-to crossfade-leave-to crossfade-enter-to crossfade-leave-to crossfade-enter-to crossfade-leave-to crossfade-enter-to crossfade-leave-to crossfade-enter-to crossfade-leave-to crossfade-enter-to crossfade-leave-to crossfade-enter-to crossfade-leave-to .........\">```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","comments":["I don't think we're dealing with Vue issue here. Chrome\/Firefox are throttling timers in inactive tabs to simply reduce ram\/cpu usage, so you can't rely on setTimeout running every x second as you want it to. A solution for your problem is rather simple, pause the animation when user leaves to another tab, and then restart it when he comes back\r\n\r\nFixed example - https:\/\/jsfiddle.net\/605wqn3k\/1\/","Makes sense. Thanks a lot for the quick response :)\r\n\r\nBut I still gotta ask, is there anything against checking if transition classes already exsist when the change occurs regarldess of whether transitionend\/animationend was fired or not?","I think this issue also occurs when the tab is still active, not just when it's hidden. I'm getting the following after adding several elements to my transition group:\r\n\r\n![](https:\/\/i.imgur.com\/wdWqoM4.png)\r\n\r\nThe docs state that the enter-to class should be removed after the transition finishes.","@yunyu Could you please check [this issue](https:\/\/github.com\/vuejs\/vue\/issues\/6024) ? Is it related with your situation?","@jkzing Actually, yeah, it seems to affect me as well. Any transitions I put in the enter-active class don't work at all, and only the ones in enter-to do. Should I move my example to that issue?","@yunyu, thanks, but there is already a quite clear reproduce in that issue.\ud83d\ude01","I was going to create a new issue, but found this one. My bug is different, but it seems that it might help to solve current issue, because I've created a very simple situation how to reproduce this transition bug.\r\n\r\n**Reproduction link:**\r\nhttps:\/\/jsfiddle.net\/ace7s75e\/\r\n\r\n**Steps to reproduce:**\r\n1) Click on \"Show\/Hide\" button;\r\n2) Switch to another browser tab (you have only 2 seconds to do it);\r\n3) Go back to JsFiddle and see that the message is not displayed.\r\n\r\n**What is expected?** (and it works like this if not switching browser tabs)\r\n1) After clicking on \"Show\/Hide\" button the fiddle waits for 2 seconds and hides the message.\r\n2) Then the fiddle waits for 1 more second and shows up the message.\r\n\r\n**What is actually happening?**\r\nAfter clicking on \"Show\/Hide\" button and switching to another browser tab during those 2 seconds - when you come back you will not see the message, because of `class=\"fade-leave-to\"` in `<p>`-element.","@alexbazilev I think your case is a different situation, created a separate issue for you: [https:\/\/github.com\/vuejs\/vue\/issues\/7411](https:\/\/github.com\/vuejs\/vue\/issues\/7411)\r\n\r\n----\r\n\r\nNVM, your are in the situation [https:\/\/github.com\/vuejs\/vue\/issues\/5800#issuecomment-315089833](https:\/\/github.com\/vuejs\/vue\/issues\/5800#issuecomment-315089833) is saying, sorry for the spam...\ud83d\ude02\r\n  ","Any update on this ?\r\nI'm building a chrome extension that clicks on buttons when the tab isn't active. \r\nSome elements doesn't show because of this problem. Tab inactive -> animation not finished.\r\n\r\nI'd love a workaround \u270c\ufe0f"],"labels":["improvement","has PR","transition"]},{"title":"Allow Component Tag in Transition Group","body":"Allow this kind of feature for transition-group or transition\r\n\r\n```html\r\n<transition-group tag=\"todo-layout-container\">\r\n    <!-- Which will render a component rather a tag -->\r\n<\/transition-group>\r\n```\r\n\r\nand will compile to\r\n```html\r\n\r\n<todo-layout-container>\r\n\r\n<\/todo-layout-container>\r\n```\r\nand compiles to what is inside of the todo-layout-container\r\n```js\r\nlet Todo = Vue.extend({\r\n   name: 'todo-layout-container',\r\n   methods: {\r\n      \/\/Per todo methods\r\n   }\r\n});\r\n```","comments":["That would be great! No more unwanted `div's` used just for transitions.","Also, it would be helpful to add support for passing props\/event\/attributes.\r\nSomething like\r\n```\r\n<transition-group tag=\"todo-layout-container\"\r\n                  :props=\"someValue\" \r\n                  @event=\"someMethod()\" \r\n                  class=\"css-class\"\r\n>\r\n\r\n  <!-- Which will render a component rather a tag -->\r\n\r\n<\/transition-group>\r\n```\r\nwill compile to\r\n```\r\n<todo-layout-container :props=\"someValue\" @event=\"someMethod()\" class=\"css-class\">\r\n\r\n<\/todo-layout-container>\r\n```"],"labels":["feature request","transition"]},{"title":"<textarea> and <input type=text> cursor issue in IE 11.0","body":"To reproduce:\r\n- open https:\/\/vuejs.org\/v2\/guide\/forms.html#Multiline-text with IE 11.0 (Edge) on Windows 7\r\n- type some text in the textarea\r\n- move the cursor at the beginning of the text (press the Home key)\r\n- quickly type random chars\r\n=> the cursor jumps to the end\r\n\r\nsame issue with input type=text (https:\/\/vuejs.org\/v2\/guide\/forms.html#Text)\r\n","comments":["Hi, thanks for opening the issue!\r\nYou can also do it by using `ctrl + \u2190`\r\n","I can't reproduce this in Edge 15 or IE11  \ud83e\udd37","@jdalton Hey thanks for tuning in. Do you think it got patched on IE 11 in the meanwhile? I'll have to try again","IE 11 isn't getting patches like that, so not likely.","It seems to still be happening:\r\n![uoeu](https:\/\/cloud.githubusercontent.com\/assets\/664177\/24557560\/65c8af90-1638-11e7-8df4-20e7d91b3ae5.gif)\r\n","Ah ha! It's a tricky one! After trying it a few more times I could repro in IE11 too.\r\nStill not able to repo in Edge 15 though \ud83d\ude03 ","yeah, it doesn't happen on edge","I tried and was unable to reproduce in IE11 version 11.1066.14393.0 (Windows 10) (Update Versions: 11.0.41)\r\nor in edge 38.14393.1066.0\r\n\r\n\r\n\r\n","Same on safari 11.0 (13604.1.38.1.6) (macOS)  and earlier versions\r\n\r\n![vue-input](https:\/\/user-images.githubusercontent.com\/297255\/30864176-33389144-a2d3-11e7-9cc4-1c6853b73df1.gif)\r\n\r\nTry use custom component with input, like this:\r\nhttps:\/\/vuejs.org\/v2\/guide\/components.html#Form-Input-Components-using-Custom-Events\r\n\r\n\r\nerror is caused by\r\n`this.$emit(\"input\",...)`","I'm having this exact issue but it also happens in Chrome 68. Does anyone have a workaround?","@yyx990803 I have the feeling this is just caused by people using ```.trim``` as this causes the input to re-render often (and then the cursor jumps). A simple solution would be to add ```.trimlazy``` which only trims after a ```change``` event.","Is this issue fixed? I'm facing similar issue, can anyone help to fix this?","@ThomHurks You can nest modifiers, like `v-model.trim.lazy` - https:\/\/jsfiddle.net\/782y3e5g\/\r\n\r\nCan anyone see if this fixes the issue on the older browsers?"],"labels":["improvement"]},{"title":"\u0410n unexpected behaviour when using <transition> with a Vue component.","body":"### Vue.js version\r\n2.1.10\r\n\r\n### Reproduction Link\r\nhttps:\/\/jsfiddle.net\/bhrztdjn\/4\/\r\n\r\n### Steps to reproduce\r\nClick on \"Toggle\" button.\r\n\r\n### What is Expected?\r\nTransitions for a component should have the same behavior as transitions applied to HTML element.\r\n\r\n### What is actually happening?\r\nA CSS transition works fine with an HTML element with both directive - `v-if` and `v-show` (as [declared in docs](https:\/\/vuejs.org\/v2\/guide\/transitions.html#Transitioning-Single-Elements-Components)).\r\nBut for the component, which has a directive v-show on its root element the transition isn't applied on entering and leaving states.\r\nAnd for the component, which has a directive v-if on its root element the transition isn't applied on leaving state.","comments":["Thanks for opening the issue. Even though I'd add the V-if\/v-show in the parent template (https:\/\/jsfiddle.net\/posva\/bhrztdjn\/5\/), the behaviour is not consistent and at the very least docs should be updated to add a warning about it.\r\n\r\nWhy do you add the `visible` prop, are you using it inside of the component for other things? Do you mind sharing a bit more about the component itself?","> Why do you add the `visible` prop, are you using it inside of the component for other things?\r\n\r\n@posva, yes. For example it needed in modal component. Watcher on the `visible` prop allow to do some internal things like add\/remove event listeners to `body` (for `Esc` behavior), add\/remove some html classes to `<html>` and etc. It difficult without `visible` prop.","@posva , is this the expected behavior? Is the tag allowed transition only if follow `<transition>` tag \r\n@antixrist , I think maybe we can pass the transition type intention into template.\r\n\r\n```\r\ntemplate: `\r\n<transition :name='transtype'>\r\n<div v-show=\"visible\">I am a component with v-show directive (inside transition)<\/div>\r\n<\/transition>\r\n`,\r\nprops: [ 'visible', 'transtype']\r\n```\r\n\r\nHere is the code: [jsfiddle](https:\/\/jsfiddle.net\/Plasmatium\/bhrztdjn\/13\/)\r\n","@antixrist \r\n\r\nDear antixrist  : )\r\n\r\nI think this is not a good idea\r\n\r\nbecause `transition` is a component,  `cmp-v-if`(child component) is also a component\r\n\r\nit looks like you want to use `child component` props to control the parent\r\n\r\n","@gebilaoxiong nope.\r\nChild component can take `value` prop for control it from parent by `v-model` and can emit `input` event.\r\nSo only parent component decides about change state and the children is aware about this state.\r\n\r\n[Here is](https:\/\/gist.github.com\/antixrist\/4458c76b34c183c3fa93975d39bdd12b) my modal component with example.\r\nIn this component data flow is not broken, but I still can not manage transitions outside of the `<modal>` component. Although the documentation [says otherwise](https:\/\/vuejs.org\/v2\/guide\/transitions.html#Transitioning-Single-Elements-Components) (which is confirmed by a @posva):\r\n\r\n> Vue provides a transition wrapper component, allowing you to add entering\/leaving transitions for any element or component in the following contexts:\r\n> * Conditional rendering (using v-if)\r\n> * Conditional display (using v-show)\r\n> * Dynamic components\r\n> * Component root nodes","I had a transition which worked with v-if but not with v-show. I had to resort to this solution https:\/\/medium.com\/vuejs-tips\/css-only-v-show-fade-animation-6f7818fdff4 for it to work","I am facing the same problem @antixrist describes in the initial post.\r\n\r\nMy child component holds data that, among other things, contains whether it should be visible (mutableDisplayData.visible).\r\nThe child component is wrapped inside a `<transition>` and arranged at a for the child unknown position in the parent. Might be on the left, might be on the right.\r\nDepending on the status of mutableDisplayData.visible, this should be animated \/ transitioned.\r\nThe parent needs to control where the child is positioned and the transition must be chosen according to the position. This is why the transition needs to be in the parent.\r\n\r\nThis is how the structure looks (simplified)\r\n```javascript\r\n<transition>\r\n      <child>\r\n           <template>\r\n                <div v-if=\"mutableDisplayData.visible\">\r\n                        ...\r\n                <\/div>\r\n           <\/template>\r\n      <child>\r\n <\/transition>\r\n```\r\n\r\nThe enter animation runs fine. On leave, it is immediately removed from the dom which I think is a bug.\r\nIf I move the v-if directly to `<child>` it would work. But I cannot do that because I do not know about the visibility of the child in the parent (in my special case).\r\n\r\nAny ideas on how to achieve what I need?","It appears that this issue is back. Im having the same warningson version 2.6.6","I think\r\n> transition behavior is inconsistent for v-show\/v-if and components\/elements\r\n\r\n(or something like that) would be a better title. Would make it easier to find it.","Hi @antixrist \r\nDid you managed the modal component? If so, I want some help\r\n\r\nUpdate:\r\nSeems no issues Vue 3. In my case, leave-to transition not worked because of :hover styles applied."],"labels":["improvement","transition"]},{"title":"v-on:change randomly fails on range input bound on a computed property","body":"### Vue.js version\r\n2.1.10\r\n\r\n### Reproduction Link\r\nhttp:\/\/jsbin.com\/bapoca\/edit?html,js,console,output\r\n\r\n### Steps to reproduce\r\nThe above JSBin contains a slider (range) that logs the value of a computed property it is bound to (`sliderRadius`), when it changes: `v-on:change=\"log\"` (log is a declared function)\r\n\r\n### What is Expected?\r\nI would expect that each time the slider changes, the prop is logged in the console.\r\n\r\n### What is actually happening?\r\nTwo different scenarios: \r\n- you drag and release the slider handler (aka thumb): the prop is *always* logged in the console (i.e. the change handler fires properly all the times)\r\n- you directly click where you want the handler to get to: the prop isn't logged all the times (i.e. the change handler fails about in 3 out of 5 occasions).\r\n\r\nSee the animated gif below, using the provided JSBin (recorded on Google Chrome, OSX \u2013 the same happens on Safari, thought)\r\n\r\n[![vueRangeChangeError.gif](https:\/\/s29.postimg.org\/lvgj9pepz\/vue_Range_Change_Error.gif)](https:\/\/postimg.org\/image\/a6cjlqnr7\/)\r\n\r\nThank you.","comments":["Thanks @undavide, seems to be a bug. I am looking into it.","@defcc I simplified the example to make it less random: http:\/\/jsfiddle.net\/posva\/cm8sa7pk\/\r\nClick within the bar and you'll see","Thanks @posva :)","@posva  will you please help to check this issue. I haven't got enough time to follow through these days.","The browser seems not to be triggering the change event on purpose and we don't manually trigger a `change` event on our side. I'm not sure if we should, though. This needs further research.\r\n\r\n@undavide You may be already doing this: instead of listening for the `change` event, watch for the slider value, it's more reliable that way","Actually the example I've posted was implemented in a slightly more complex scenario.\r\n\r\nI'm building an interface to a Photoshop plugin where the user drags the slider and\/or directly types a number in the stepper. A routine is run either when the user press the enter key in the stepper (easy implemented) or is done dragging the handler, i.e. he drops it.\r\n\r\nSo I don't need the routine to be constantly run while the slider (or the bound value) is `onChanging`, but `onChange`. While dragging\/`onChanging` the number should properly be mirrored in the stepper (and this is done thanks to the 2 ways binding \/ v-model), while dropping\/`onChange`, some function needs to be called.\r\n\r\nI could perhaps implement some kind of [debounce](https:\/\/davidwalsh.name\/javascript-debounce-function) function, but it's really far from ideal in my case.\r\n\r\nThank you!\r\n\r\n\u2013Davide","I imagined that you needed to do the computation only on release. Maybe a mouseup event works as well","maybe you should listen the input event","It seems when the value in setter and getter are different, the change event will not be triggered.\r\n\r\nHere is same code with extra log info @undavide provided:\r\nhttp:\/\/jsbin.com\/bevuca\/1\/edit?js,console,output","Just using `radius` as your v-model with no custom get\/set will work fine, so something's wrong with your computed get\/set functions.","Hello guys,\r\n\r\nI've just came across exactly the same issue with `on:change=\"changeHandler\"`. From my point of view it doesn't work in a proper way with Chrome.\r\n\r\nDoes it mean that it's better to use `watch` syntax instead?\r\n\r\n**Fail** (freezing):\r\n```\r\n<input type=\"text\" \r\n        placeholder=\"Filter by name\"\r\n        v-model=\"term\" \r\n        v-on:change=\"changeHandler\"\/>\r\n```\r\n\r\n**Success** (works like a charm):\r\n```\r\nwatch: {\r\n    term: function(oldValue, newValue) {\r\n        console.log(oldValue, newValue);\r\n    }\r\n}\r\n```\r\n\r\nTia."],"labels":["bug","has workaround"]},{"title":"list rendering optimization fails in some cases","body":"I have virtual scrolling list with a lot of rows. I only show a few of them at a time using\r\n\r\nthis.view = this.items.splice(position, position + 5)\r\n\r\nIf 'position' is incremented or decremented, you would expect that in the DOM one element gets added, and one  gets deleted. In the 'up' direction, that is the case. But in the down direction, all elements get removed and added again. I have a couple of images in each row, and this hurts performance quite a bit.\r\n\r\n### Vue.js version\r\n2.1.3\r\n\r\n### Reproduction Link\r\nhttps:\/\/jsbin.com\/netereyuxa\/1\/edit?html,console,output\r\n\r\n### Steps to reproduce\r\npress up \/ down, see that in the up direction one LI is removed and one added at each step, and in the down direction all LIs are replaced every time.\r\n\r\n### What is Expected?\r\nOnly one LI added, one LI removed\r\n\r\n### What is actually happening?\r\nAll LI's removed and added\r\n","comments":["To be specific:\r\n\r\n1. the `<li>`s are being properly reused (i.e. not replaced by newly-created elements)\r\n2. there are indeed more \"move\" operations than necessary.\r\n\r\nHowever, based on Chrome's timeline tracing, it seems both moving up and down has very similar rendering\/painting costs. I wouldn't really consider this \"failing\", but maybe it can be improved. Are you experiencing visible slow down in your app? How complex is each item in your actual list?","On a reasonably modern laptop you can't see the difference. I think can see a slight difference on my Asus TF300T tablet, but that one is four years old.\r\n\r\nThe use case is a virtual scroller. It shows a couple of rows in the viewport, and when scrolling rows are inserted \/ deleted as they scroll into \/ out of view. Each row is a LI element, which contains 5 DIVS, each with an IMG (20K jpeg) and some text.\r\n\r\nI was just trying to optimize the list rendering in my component, noticed this issue, and thought this was a small bug in the algorithm, that's why I reported it. If it's hard to fix correctly, or impossible to fix without some other performance impact, then please don't bother :)\r\n\r\nThanks for the quick reply!\r\n\r\nMike.","I am also implementing a virtual scroll feature and I came across the exact same problem. Unfortunately the problem seems to hurt performance quite a lot when smooth scrolling, e.g. on a Macbook Pro with the touchpad. Scrolling upwards is buttery smooth, while scrolling downwards creates micro-stutter caused by the many dom updates. Here's a capture from #7477 that shows the problem very well (https:\/\/jsfiddle.net\/1m5vx6dc\/1\/):\r\n\r\n![dom](https:\/\/user-images.githubusercontent.com\/2785983\/35117214-3ae74d44-fc8e-11e7-9cbf-fb8007175cf5.gif)\r\n","I just tested this with Vue 3 - with the example provided by mofux above. It looks like this is fixed now, so this issue can perhaps be closed.","If you're using Vue version 2:\r\nI found a dirty fix that seems to work for me. I had a input control inside a list item that lost focus when the current list item moved down, but not up. \r\nThis problem can be (kind of) avoided when adding a watch combined with a nextTick that checks if the control has lost focus. I don't know that this works 100% in every case, but this is how I fixed my issue:\r\n\r\n```javascript\r\nitems: {\r\n    handler(newValue) {\r\n        const focusedElement = document.activeElement;\r\n        console.log(focusedElement);\r\n        this.$nextTick(function () {\r\n            if (document.activeElement !== focusedElement) {\r\n                focusedElement.focus();\r\n            }\r\n        });\r\n    },\r\n    deep: true,\r\n}\r\n```\r\n\r\nHere is an example:\r\nhttps:\/\/codepen.io\/and3k5\/pen\/zYewLxN"],"labels":["improvement"]},{"title":"Recusive Local Components - Uncaught RangeError: Maximum call stack size exceeded","body":"<!--\r\n\u4e2d\u6587\u7528\u6237\u8bf7\u6ce8\u610f\uff1a\r\n\r\n1. issue \u53ea\u63a5\u53d7\u5e26\u91cd\u73b0\u7684 bug \u62a5\u544a\uff0c\u8bf7\u4e0d\u8981\u7528\u6765\u63d0\u95ee\u9898\uff01\u4e0d\u7b26\u5408\u8981\u6c42\u7684 issue \u4f1a\u88ab\u76f4\u63a5\u5173\u95ed\u3002\r\n2. \u8bf7\u5c3d\u91cf\u7528\u82f1\u6587\u63cf\u8ff0\u4f60\u7684 issue\uff0c\u8fd9\u6837\u80fd\u591f\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u5e2e\u5230\u4f60\u3002\r\n\r\nGot a question?\r\n===============\r\nThe issue list of this repo is **exclusively** for bug reports and feature requests. For simple questions, please use the following resources:\r\n\r\n- Read the docs: https:\/\/vuejs.org\/guide\/\r\n- Watch video tutorials: https:\/\/laracasts.com\/series\/learning-vue-step-by-step\r\n- Ask in the Gitter chat room: https:\/\/gitter.im\/vuejs\/vue\r\n- Ask on the forums: http:\/\/forum.vuejs.org\/\r\n- Look for\/ask questions on stack overflow: https:\/\/stackoverflow.com\/questions\/ask?tags=vue.js\r\n\r\nReporting a bug?\r\n================\r\n- Try to search for your issue, it may have already been answered or even fixed in the development branch.\r\n\r\n- Check if the issue is reproducible with the latest stable version of Vue. If you are using a pre-release, please indicate the specific version you are using.\r\n\r\n- It is **required** that you clearly describe the steps necessary to reproduce the issue you are running into. Issues with no clear repro steps will not be triaged. If an issue labeled \"need repro\" receives no further input from the issue author for more than 5 days, it will be closed.\r\n\r\n- It is recommended that you make a JSFiddle\/JSBin\/Codepen to demonstrate your issue. You could start with [this template](http:\/\/jsfiddle.net\/5sH6A\/) that already includes the latest version of Vue.\r\n\r\n- For bugs that involves build setups, you can create a reproduction repository with steps in the README.\r\n\r\n- If your issue is resolved but still open, don\u2019t hesitate to close it. In case you found a solution by yourself, it could be helpful to explain how you fixed it.\r\n\r\nHave a feature request?\r\n=======================\r\nRemove the template from below and provide thoughtful commentary *and code samples* on what this feature means for your product. What will it allow you to do that you can't do today? How will it make current work-arounds straightforward? What potential bugs and edge cases does it help to avoid? etc. Please keep it product-centric.\r\n-->\r\n\r\n<!-- BUG REPORT TEMPLATE -->\r\n### Vue.js version\r\n1.0.28\r\n\r\n### Reproduction Link\r\n<!-- A minimal JSBin, JSFiddle, Codepen, or a GitHub repository that can reproduce the bug. -->\r\n<!-- You could start with this template: http:\/\/jsfiddle.net\/df4Lnuw6\/ -->\r\nhttps:\/\/jsfiddle.net\/25fdgLgr\/3\/\r\n\r\n### Steps to reproduce\r\nJust run new Vue() or let app demo app load\r\n\r\n### What is Expected?\r\nApp loads as expected. (btw this does work in vue 2.0, but we are not quite ready to migrate the rest of our app.\r\n\r\n### What is actually happening?\r\nJS Error\r\nvue.js:10148 Uncaught RangeError: Maximum call stack size exceeded\r\n    at new Function (<anonymous>)\r\n    at createClass (https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/vue\/1.0.28\/vue.js:10148:12)\r\n    at Function.Vue.extend (https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/vue\/1.0.28\/vue.js:10113:15)\r\n    at guardComponents (https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/vue\/1.0.28\/vue.js:1927:31)\r\n    at mergeOptions (https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/vue\/1.0.28\/vue.js:2004:3)\r\n    at Function.Vue.extend (https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/vue\/1.0.28\/vue.js:10117:19)\r\n    at guardComponents (https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/vue\/1.0.28\/vue.js:1927:31)\r\n    at mergeOptions (https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/vue\/1.0.28\/vue.js:2004:3)\r\n    at Function.Vue.extend (https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/vue\/1.0.28\/vue.js:10117:19)\r\n    at guardComponents (https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/vue\/1.0.28\/vue.js:1927:31)","comments":["Just submitted a PR #4739. Review needed.\r\n","Just noticed that this is marked 1.x, should it be closed? If not, has\/should the PR be reviewed? Or am I missing something (which is likely)?","perhaps v1 is discontinued?"],"labels":["1.x"]},{"title":"A child components `destroyed` hook is called before its `detached` hook","body":"### Vue.js version\n\n1.0.28\n### Reproduction Link\n\nhttps:\/\/jsfiddle.net\/w0r85tus\/\n### Steps to reproduce\n- Open the JSFiddle, then open devtools\n- Click \"show modal\" in the result view\n- Click \"Ok\" in the modal\n- Observe the console.log statement order\n### What is Expected?\n- Components should be `detached` before they are `destroyed`.\n- The `destroyed` hook should always be the very last hook fired.\n### What is actually happening?\n- The `destroyed` hook is getting called first, then the `detached` hook later.\n\nNote that it makes no difference if the component has a `transition` applied. You can remove the `transition` attribute from the modal but the hook order stays the same.\n\nWhen I'm using a tool like [selectize.js](https:\/\/github.com\/selectize\/selectize.js) inside a modal, I want Selectize to stay until the modal is off-screen, then destroy it. If I use the `beforeDestroy` or `destroyed` events, they will fire before the modal has transitioned out and the effect is that you will see a flash of the destroyed Selectize control.\n","comments":[],"labels":["1.x"]},{"title":"$refs should be reactive to be able to use them in computed properties","body":"Now that refs are no longer reactive, we need to emit events and payloads from child components.\nThis is fine and works well, but it becomes hard to maintain in the following scenario:\n\nWhen you create a custom form input component, that basically wraps an input into it's own re-usable component, we can no longer access the input's value (and other props) reactively in e.g. a computed prop in the parent.\n\nTake the following use-case:\n\n```\n<my-input ref=\"email\"><\/my-input>\n<my-input ref=\"password\"><\/my-input>\n<p>This is {{ isValid ? 'valid' : 'invalid' }}<\/p>\n```\n\nPreviously we could create a computed prop like this:\n\n```\nisValid() {\n  return this.$refs.email.isValid && this.$refs.password.isValid\n}\n```\n\nSince refs don't work reactively anymore, we now need to use `$emit` to inform the parent of changes.\nHowever, these emits are handled by methods, so we need a separate handler per input to deal with the events.\n\nSomething like:\n\n```\n<my-input @valid=\"handleValidEmail\"><\/my-input>\n<my-input @valid=\"handleValidPassword\"><\/my-input>\n\nhandleValidEmail(value) {\n  this.email = value\n  this.emailIsValid = true\n},\n\nhandleValidPassword(value) {\n  this.password = value\n  this.passwordIsValid = false\n}\n```\n\nYou could refactor this a bit, but it's not a nice way of dealing with this and I'm assuming using forms is quite a common occurence for a lot of devs.\n\nCan we think about a better solution to something like this?\n","comments":["How about using one handler with multiple parameters?\n\n```\n<my-input @valid=\"handleValid\"><\/my-input>\n<my-input @valid=\"handleValid\"><\/my-input>\n\nhandleValid(value, type) {\n  this[type]= value\n  this[type + 'Valid'] = true\n},\n```\n\ninside components:\n\n```\nthis.$emit('valid', value, 'email')\n...\n\nthis.$emit('valid', value, 'password')\n```\n","Because you can have multiple of the same type of fields.\nMaybe I could use their ID's in that case instead?\n","Try something like this:\n\n``` vue\n<template>\n  <form>\n    <my-input v-model='fields.email'><\/my-input>\n    <my-input v-model='fields.password'><\/my-input>\n    <p>This is {{ isValid ? 'valid' : 'invalid' }}<\/p>\n  <\/form>\n<\/template>\n\n<script>\nexport default {\n  data () {\n    return {\n      fields: {\n        email: { value: '', valid: false },\n        password: { value: '', valid: false },\n      }\n    }\n  },\n  computed: {\n    isValid () {\n      return Object.values(this.fields).every(field => field.valid)\n    }\n  }\n}\n<\/script>\n```\n\nWhere the input components `v-model` both the value of the input, and the validity status.\n","So this is where I get confused.\nHow does the model update the `valid` part? I thought it only update the value?\n\n```\nthis.$emit({\n  value: event.target.value,\n  valid: someValidationMethod(this)\n})\n```\n\nOr something?\nIf that works it would be good (certainly not great).\n\nThe main issue I have with this, is that I need all those fields in my state, whereas previously I didn't, because I could just use the refs.\n\nHaving them in my state is a pretty major pain in the ass, because it clutters my state without a good reason.\n","> The main issue I have with this, is that I need all those fields in my state, whereas previously I didn't, because I could just use the refs.\n\n@TheDutchCoder This is inconvenient indeed. :(\n\n@yyx990803 Do you have something in mind for situations like these? \n","Just to add some context, this is what I could do previously:\n\n``` js\ncomputed: {\n  isReady() {\n    return this.$refs.email.isValid && this.$refs.password.isValid\n  }\n}\n```\n\nBut now I need to add additional state and a handler to deal with this:\n\n``` js\ndata() {\n  return {\n    email: { value: '', isValid: false },\n    password: { value: '', isValid: false }\n  }\n}\n\n\/\/ Some method that dynamically handles input changes\n\n\/\/ Computed prop\ncomputed: {\n  isReady() {\n    return this.email.isValid && this.password.isValid\n  }\n}\n```\n\nMainly the extra (not very useful) state and the handler are a bit of a pain, would be great if there could be some alternative to what used to be $refs that remain reactive. Not sure what the implications would be and why it was deprecated, I'm just trying to illustrate a use case when the old $refs were very useful.\n","Would it be ok to rename the issue to something like: \"$refs should be reactive to be able to use them in computed properties\"?\n","Sure go for it! Thanks for the discussion guys, it;s appreciated.\nVue is an amazing framework and the open conversations around it make it only better ;)\n","> So this is where I get confused.\n> How does the model update the valid part? I thought it only update the value?\n\nIf a component emits an `input` event while accepting a `value` prop, v-model will update the value in the parent. So your `my-input` component would need to do something like this:\n\n``` vue\n<template>\n  <input :value='value.value' @input=\"onInput($event)\">\n<\/template>\n\n<script>\n...\n  props: ['value'],\n...\n  onInput(event) {\n    this.$emit({ value: event.target.value, valid: this.someValidatorFunction() })\n  }\n...\n<\/script>\n```\n\nI imagine there's a better way, though. Without reactive refs, that is. Perhaps using mixins, somehow...\n\nI'm still for reactive refs, though. It's a super useful thing to have in general.\n","Alright, at least your example works.\nNow with the added state, the real issue is the combination with Vuex.\n\nSince the Vuex getters aren't yet available when the state is defined, we can't use them to populate the values.\n\nWe could use `mounted` or something, but again, that's quite dirty.\n","Here's two repos that compare the two scenarios:\n\nVue1: https:\/\/jsfiddle.net\/okv0rgrk\/8330\/\nVue2: http:\/\/jsfiddle.net\/5sH6A\/744\/\n\nI hope this clearly illustrates the current problem. The biggest issue right now is the fact that you can't use computed props in the child component anymore. Even `this.$nextTick` doesn't work in the emit event, because the `v-model` hasn't updated yet.\n","I've also found reactive $refs to be useful in unit tests.... like so:\n\n```\n    var component = vm.$refs.testComponent\n\/\/ .....   do something that's expected to trigger a modification of the DOM .....\n    vm.$nextTick(() => {\n      expect(component.value).to.equal('Something')\n      done()\n    })\n```\n\nIs there some suggested way to replace this sort of pattern?  Otherwise it would be nice for this to work again.\n","I have to agree with @TheDutchCoder\n\nUsing refs is an easy way for parent to read child information. Which inadvertently makes $refs seem useless without reactivity. \n\nI commonly also use this practice, to check the validity of ref components to validate the parent component. \n","Do you have access to `my-input`? Then you could create a `$emit('validity-changed',this.isValid)`\nand where you use it:\n\n``` html\n<my-input @validity-changed=\"isValid=$event\"><\/my-input>\n<my-input @validity-changed=\"isValid=$event\"><\/my-input>\n<p>This is {{ isValid ? 'valid' : 'invalid' }}<\/p>\n```\n\n``` js\n\/\/ with\ndata: function() {return {isValid:true}}\n```\n\nfor a normal Input I would try a computed setter:\n\n``` js\ntemplate: \"<input v-model='username'><\/input>\",\ncomputed: {\n  username: {\n    get: function() { return this.name }\n    set: function(val) {\n      this.valid = this.validate(val)\n      if (this.valid) {\n        this.name = val\n      }\n    }\n  }\n},\ndata: function() {\n  return {name:\"name\", valid: true}\n}\n```\n\nI'm using `ref` only for testing (checking out some component instance) or for calling methods on child components.\nAll data stuff I do with `computed`, `data`, `methods` and\/or `watch` - and I never had a problem with it.\n","Using Vue in Meteor, I really miss this feature. But in Meteor's default frontend Blaze, $ref was available as a part of 3rd party package, not as part of the core. So if it's not possible in the core in Vue2, at least having it as a plugin would be a valuable option.","This is indeed inconvenient. I'm trying to use computed properties to control the appearance of an element based on a property of two of its siblings:\r\n\r\n```html\r\n<h1 v-if=\"showTitle\">codus<\/h1>\r\n<modal ref=\"loginModal\">\r\n  ...\r\n<\/modal>\r\n<modal ref=\"signupModal\">\r\n  ...\r\n<\/modal>\r\n```\r\n```js\r\ncomputed: {\r\n  showTitle() {\r\n    return !(this.$refs.loginModal.shown || this.$refs.signupModal.shown);\r\n  },\r\n},\r\n```\r\n\r\nI believe this is a legitimate use case and it'd be nice to be able to do something like this.\r\n\r\nHowever, it seems `this.$refs` is empty when the computed property is executed. As a simple test, I included the following in my computed property:\r\n```js\r\nconsole.log(this.$refs);\r\nsetTimeout(() => console.log(this.$refs), 1000);\r\n```\r\n`{}` is logged, and a second later the populated refs object is logged.\r\n\r\nThoughts?","Another use case I'm running into is testing whether a component is focused to use it to control state:\r\n\r\n```html\r\n<template>\r\n  <div class=\"my-component-wrapper\">\r\n    <div class=\"my-component\" tabindex=\"0\"><\/div>\r\n  <\/div>\r\n<\/template>\r\n```\r\n\r\n```javascript\r\ncomputed: {\r\n  hasFocus() {\r\n    return this.$refs.myElement === document.activeElement\r\n  }\r\n}\r\n```\r\n\r\nRight now, I'm listening for `focus` and `blur`, with separate methods to set a data property called `focused` (true\/false) and while it works, it's a pain to implement while the above solution is where computed properties shine.","Well, that use case would not even work if `$refs` was reactive, because no refs changed in any way, and neither did their data, only the DOM changed. ","Ah good call, technically `document.activeElement` is the only thing changing here. Damn. \ud83d\ude1e ","Can't recall if the focus event bubbles, but if it does, register an event listener in `created()` and save the target element in the component's data? That would be reactive, and the computer prop could re-evaluate. ","On second thought that could lead to unnecessary rerenders. ","The simplest workaround is using `$watch`: https:\/\/jsfiddle.net\/kenberkeley\/9pn1uqam\/","I also find situations when reactive `$refs` is handy. Without it, you must resort to more complex solution, e.g. emit\/vuex, to get the children's state.\r\n\r\nAnyway, i think getting the children's state from parent is natural and straightforward. Without reactive feature, `$refs` is actually useless.","Related: https:\/\/forum.vuejs.org\/t\/split-modal-and-its-contents-slots\/18338\/6\r\n\r\nAs I'm thinking about it, it seems to me that if `$refs` isn't reactive, it's completely useless outside event handlers, isn't it?","&lt;v-disclaimer&gt;not a guru&lt;\/v-disclaimer&gt;\r\nAn awful lotta folk seem to get into trouble because they don't think _view-model_. Vue is \"loosely inspired by MVVM\". You should at least be at [step 1 of the store pattern](https:\/\/vuejs.org\/v2\/guide\/state-management.html): a global variable that contains all your page state. To take your example, email and password, their current values, and, I would say, their validity, are page level state. Your inputs should be interacting directly with the state (declared in their `data` if they're components). And your computed prop, isValid, also just looks at the state variable. You can implement all this without `ref`, and if you can do without ref, you should.\r\n\r\nI see so many folk getting into knots because they don't think about their store. Having Vue stuff directly talking to other vue stuff is an anti-pattern. Vue wants to interact with a store.","But when an application starts to have multiple controls and various components, then you start have multiple stores (component's store) in order to *organize* the state of the application into logical reactive objects bound to their respective component.\r\nThen you need to access them from the main Vue, and then `$refs` reactivity start to be useful because otherwise you start using signal for top-down and signal's mess is not far away.\r\n","Personally, my impression of $refs was that it is mostly meant to be useful as a means to get an html element reference when you absolutely need it, and these aren't reactive anyway. Using it as a way to directly access a child component's state seems like a violation of good component design. I agree that it would be convenient, but I could see myself being tempted to take advantage of that convenience in ways that would ultimately make the components harder to manage. Especially with a third party component - the component creator only makes guarantees about its props\/events interface. It's ultimately no one's business how it uses its internal state, and we shouldn't make any assumptions about it remaining compatible between versions, nor should the author have to worry about others relying on its use of internal state.","Of course everyone tries to design components that way. But when you have sibling components like in my case, where a button lives in a different slot of a parent, I think $refs to components actually make the code cleaner instead of cluttering it with meaningless container components which hold part of the state of their children.","It's true, I see your point as well. I imagine the middle ground would be something like distinguished public and private properties\/computeds\/methods. That way a component's interface could remain well-defined and components could take useful references on their children.","The more I think about it, the more I kinda like that idea. Could maintain compatibility by making everything public by default, but if someone wants to privatize data they could specify which fields are part of the public interface by using a property like \"public\": [\"field1\", \"computed2\", \"method3\"]. Then component refs could be proxy objects that only contain the exposed members.","Any updates on this?","> But when you have sibling components like in my case, where a button lives in a different slot of a parent,\r\n\r\nYou can use a \"bus\" instance (for example `const bus = new Vue()`) or use dedicated state management solutions like [vuex](https:\/\/vuex.vuejs.org\/) ([more info](https:\/\/vuejs.org\/v2\/guide\/state-management.html)).\r\n\r\n> with meaningless container components which hold part of the state of their children.\r\n\r\nThis is not that meaningless and may be a good solution to make this maintainable. What is your use case?","@Akryum https:\/\/forum.vuejs.org\/t\/split-modal-and-its-contents-slots\/18338 is my use case.","> Here is a solution with provide and inject, without using `$refs`, only with reactive data: https:\/\/jsfiddle.net\/Akryum\/ekf2oyef\/\r\n[Documentation of provide\/inject](https:\/\/vuejs.org\/v2\/api\/#provide-inject)","Hi. An expression by `key` attribute does not require any reactivity and will be computed by `setInterval` or something else by \"internal Vue logic\", is it? So why is it always  \"Child is an undefined\"?\r\n\r\n```html\r\n<span :key=\"typeof $refs.myChild\">\r\n    Child is an {{ typeof $refs.myChild }}\r\n<\/span>\r\n                        \r\n<my-component ref=\"myChild\"\/>\r\n```\r\n\r\nThank you.","If $refs were reactive, they could also be watched. :+1: ","Is there any progress with this feature?","I see the problem reactive refs solve. But I also think there's a good reason why they're not reactive. As it says in the docs, refs are \"only meant as an escape hatch for direct child manipulation - you should avoid accessing $refs from within templates or computed properties.\"\r\n\r\nAs we all know, it's an important pattern that components are kept isolated and communicate through the props and events interface. Refs only exist for edge cases where this pattern is insufficient. \r\n\r\nOnce refs are reactive, it'll allow for an anti-pattern where refs are used instead of events which will result in components being coupled.\r\n\r\nSo I agree that it's messy making forms with Vue where the inputs are in separate components, and no doubt reactive refs would be convenient here. I just think it's too easy for them to be abused, so a better solution should be considered.","For me, non-reactive `$refs` makes is harder accomplish things with DOM stuff that isn't reactive (by nature).\r\n\r\nRight now, I'm working on a dropdown component and I use `getBoundingClientRect()` of the element holding the content to improve UX. Because refs isn't reactive, I need to watch when the dropdown becomes active (and is therefore mounted) and make the DOM call then. This gets even more complicated when that component is extended and the things determining when the dropdown is active, change. So I have a computed property `isActive`, my element has `v-if=\"isActive\"` and I have to watch `isActive` where I update make the DOM call in `$nextTick`...\r\nIf refs were reactive, I could simply `watch` them, check when the dropdown is available, and do whatever I've got to do. I don't have to care what other components extending the base component do, I only care when the element is present. Non-reactive refs make things complicated for no reason.\r\n\r\nI agree with @anthonygore \r\n>Once refs are reactive, it'll allow for an anti-pattern where refs are used instead of events which will result in components being coupled.\r\n>\r\n>So I agree that it's messy making forms with Vue where the inputs are in separate components, and no doubt reactive refs would be convenient here. I just think it's too easy for them to be abused, so a better solution should be considered.\r\n\r\nConventions should be followed, no doubt, but doing things the right way is a responsibility of the developer. What a great tool like Vue should do is to give you as much functionality as it can while remaining efficient. People break rules all the time and stripping away useful functionality in an attempt to prevent that is not the right way to handle things, in my opinion.\r\n\r\nIt's the tool's job to give you options, it's your job to educate yourself and do things right.","The  biggest issue with `$refs` reactivity is that it's already tied to side-effects of your state. `$refs` represent output and you shouldn't rely on that output to feed back in to your state because it will almost always result in a circular dependency.\r\n\r\nIf your problem depends on `$refs` being reactive, there is always a better solution. Have you looked at the [`updated()` hook](https:\/\/vuejs.org\/v2\/api\/#updated)? That is where you have access to the latest values stored in `$refs`. Give it a try and you'll quickly realize the circular dependency it would make.","> The biggest issue with $refs reactivity is that it's already tied to side-effects of your state. $refs represent output and you shouldn't rely on that output to feed back in to your state because it will almost always result in a circular dependency.\r\n\r\nWhy not? You can depend on computed properties? And so if we see `$refs` as a computed property of a special type, why you could not depend on that?\r\n\r\nYou can make a cycle with computed properties and you can make `$refs` cycle. This does not change anything. On the other hand, if updating `$refs` already does the transformation of the state you want, why not use it?\r\n\r\nFor example, imagine that I want a counter of how many visible components are displayed as children, where component can contain logic to hide itself or not. I can duplicate this logic and have on the parent component logic which counts how many components should be visible. Or I can simply just count the visible components in `$refs`. Why would that introduce a cycle is beyond me.","I've had luck with including a dummy test on a reactive prop\/data\/computed value, and then returning an element dom property:\r\n\r\n```html\r\n<my-input v-model=\"email\" ref=\"email\"><\/my-input>\r\n<my-input v-model=\"password\" ref=\"password\"><\/my-input>\r\n<p>This is {{ isValid ? 'valid' : 'invalid' }}<\/p>\r\n```\r\n```js\r\ncomputed: {\r\n  isValid() {\r\n    \/\/ dummy test to make this reactive to changes\r\n    if (this.email === this.$el || this.password === this.$el) {\r\n      \/\/ this return will never happen, but by 'getting' the v-models values registers\r\n      \/\/ this computed prop as reactive to changes in the form input values\r\n      return\r\n    }\r\n    return this.$refs.email.isValid && this.$refs.password.isValid\r\n  }\r\n}\r\n```\r\n\r\nIf you need to react to changes in the DOM (i.e. adding new child elements, attribute changes), you can use a `MutationObserver` (see https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/MutationObserver) and then set a data value when the element (and\/or it's children) changes.","Just to add my own two cents on this, my work around for non-reactive $refs involved using v-bind.sync. That allows me to hold some state in the parent that is updated as needed by the children.\r\n\r\nWhile a $refs approach was more intuitive in my case, v-bind.sync did end up cleaner.","I've almost completely eliminated my own needs for `$refs` by leveraging Vue's `provide\/inject` options.\r\n\r\nIf you have a pair of components that need to be coupled together, you make it available to children through `provide()`, and then `inject` it in children that need it.\r\n\r\nConsider this simplified RadioGroup component snipped from a real component that I'll be using in production soon:\r\n\r\n```js\r\nexport default {\r\n  name: \"RadioGroup\",\r\n  provide() {\r\n    return { $radio: this } \/\/ Be careful how you name this to not overlap with Vue.js!!\r\n  },\r\n  data: () => ({\r\n    inputs: []\r\n  },\r\n  methods: {\r\n    register(input) {\r\n      this.inputs.push(input)\r\n      input.$on(\"hook:beforeDestroy\", () => spliceItem(this.inputs, input))\r\n      \/\/ Do anything else needed for initialization\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThen, child components can register with their parent like so:\r\n\r\n```js\r\nexport default {\r\n  name: \"RadioOption\",\r\n  inject: {\r\n    $radio: { default: null }\r\n  },\r\n  created() {\r\n    if (!this.$radio) throw new Error()\r\n    this.$radio.register(this)\r\n  }\r\n}\r\n```\r\n\r\nA few benefits come along with this method:\r\n\r\n1. `$refs` is not used\r\n1. Better documentation through Dependency Injection\r\n1. It's `vue-devtools` inspectable\r\n1. Best of all: `inputs` is reactive :tada:","@sirlancelot I understand what you're doing here. But I don't see where you defined `spliceItem`. Did you just mean for us to write a function that splices a component after destroy again from the array? Eg. find the index via the component id and splice that index?\r\n\r\nI also wanted to ask if you'd recommend `$on('hook:beforeDestroy')` or  `$once('hook:beforeDestroy')`.","@mesqueeb I would recommend `$once` over `$on` as it would ever only be called once.","Yes, `spliceItem()` is a simple function to remove an item from an array using `Array#splice()`\r\n\r\nNo, you don't need to use `$once` as the component you are adding it to is being destroyed. Using `$once` is a waste of CPU cycles.","Although I don't totally approve having reactive $refs as it can show a bad design choice in the model structure, I think it has its valid use cases so I created a small plugin to make `$refs` reactive: https:\/\/github.com\/posva\/vue-reactive-refs. It probably have caveats, so if you found any, please open an issue on the repo \ud83d\ude42 ","@posva why would it be a bad choice to use reactive refs. In your plugin, you've used `observable` to make the refs reactive. will it affect performance? where might it go wrong?","Wanted to share this approach I just stumbled onto.\r\n\r\nAgain, using a .sync approach or event is clearly recommended and preferred. However sometimes, it's just not enough - sometimes components have methods and variables on them that need to be called or bound to respectively by the parent component (e.g. the Vuetify Calendar component). Or maybe the component is outside of your scope of control and they made a poor decision in that regard.\r\n\r\nRegardless, if the component in question does not exist when the parent is mounted (e.g. due to a v-if on the component), then any references to some state on it through `this.$refs[component_name]`will fail to update in the parent until something else triggers the parent to re-render since $refs is not reactive.\r\n\r\nI ran into this case recently and since I didn't see it elsewhere in this thread, I thought I'd post about $forceUpdate here: https:\/\/vuejs.org\/v2\/api\/#vm-forceUpdate\r\n\r\nWhat I was able to do was hook on the event that caused my component to mount and then in $nextTick, I called $forceUpdate in the parent. This caused the parent to rerender which then fixed my stale `this.$refs[component_name]` reference.\r\n\r\nUPDATE:\r\n\r\nOne weakness to this approach is that it forces the component to render, but it doesn't force computeds to recompute. So, if you have a reference in your template via $refs, it will work. If you are relying on a reference in a computed to $refs it will not.\r\n\r\nHowever, I did find this little gem which shows you how to force a computed to update if needed: https:\/\/github.com\/vuejs\/vue\/issues\/214#issuecomment-656700453\r\n\r\n```\r\nthis._computedWatchers.myComputedValue.run();\r\n```","> @posva why would it be a bad choice to use reactive refs. In your plugin, you've used `observable` to make the refs reactive. will it affect performance? where might it go wrong?\r\n\r\n\r\n\r\n> Wanted to share this approach I just stumbled onto.\r\n> \r\n> Again, using a .sync approach or event is clearly recommended and preferred. However sometimes, it's just not enough - sometimes components have methods and variables on them that need to be called or bound to respectively by the parent component (e.g. the Vuetify Calendar component). Or maybe the component is outside of your scope of control and they made a poor decision in that regard.\r\n> \r\n> Regardless, if the component in question does not exist when the parent is mounted (e.g. due to a v-if on the component), then any references to some state on it through `this.$refs[component_name]`will fail to update in the parent until something else triggers the parent to re-render since $refs is not reactive.\r\n> \r\n> I ran into this case recently and since I didn't see it elsewhere in this thread, I thought I'd post about $forceUpdate here: https:\/\/vuejs.org\/v2\/api\/#vm-forceUpdate\r\n> \r\n> What I was able to do was hook on the event that caused my component to mount and then in $nextTick, I called $forceUpdate in the parent. This caused the parent to rerender which then fixed my stale `this.$refs[component_name]` reference.\r\n> \r\n> UPDATE:\r\n> \r\n> One weakness to this approach is that it forces the component to render, but it doesn't force computeds to recompute. So, if you have a reference in your template via $refs, it will work. If you are relying on a reference in a computed to $refs it will not.\r\n> \r\n> However, I did find this little gem which shows you how to force a computed to update if needed: [#214 (comment)](https:\/\/github.com\/vuejs\/vue\/issues\/214#issuecomment-656700453)\r\n> \r\n> ```\r\n> this._computedWatchers.myComputedValue.run();\r\n> ```\r\n\r\n","It seems like a bug that even when adding `Vue.observable` to elements accessed by ref, that a computed property still doesn't detect changes. For example, if I want to watch when all `<img>` elements are loaded ie. `complete` is `true` (since there's no corresponding event afaik), something like this doesn't even work (change `loaded` to always return `true` if you want to see the images):\r\n```\r\n<!-- Include the library in the page -->\r\n<script src=\"https:\/\/cdn.jsdelivr.net\/npm\/vue@2\/dist\/vue.js\"><\/script>\r\n\r\n<!-- App -->\r\n<div id=\"app\">\r\n  <div class=\"images-loading\">\r\n  \t<div v-for=\"src in urls\">\r\n  \t\t<img v-show=\"loaded\" :src=\"src\" ref=\"images\" \/>\r\n      <p v-show=\"!loaded\">Loading\u2026<\/p>\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n```\r\n\r\n```\r\n  data: () => ({\r\n    isMounted: false,\r\n  }),\r\n  mounted() {\r\n    const watch = (el) => Vue.observable(el);\r\n    this.$refs.images.map(watch);\r\n    this.isMounted = true;\r\n  },\r\n  computed: {\r\n    loaded() {\r\n      const isLoaded = (image) => image.complete;\r\n      return this.isMounted && this.$refs.images.every(isLoaded);\r\n    },\r\n    urls() {\r\n      return [\r\n        \"https:\/\/ddz4ak4pa3d19.cloudfront.net\/cache\/44\/c1\/44c1b378803bfb4cea3cf36190343de9.jpg\",\r\n        \"https:\/\/ddz4ak4pa3d19.cloudfront.net\/cache\/61\/ed\/61ed55ee07ca54d75c63081959fc87d2.jpg\",\r\n        \"https:\/\/gooseberry.blender.org\/wp-content\/uploads\/2015\/05\/gooseberry_teaser_image.jpg\",\r\n        \"https:\/\/orange.blender.org\/wp-content\/themes\/orange\/images\/media\/gallery\/s3_telephone_t.jpg\",\r\n        \"https:\/\/peach.blender.org\/wp-content\/uploads\/rodents.thumbnail.png\",\r\n      ]\r\n    }\r\n  }\r\n```\r\n\r\nhttps:\/\/jsfiddle.net\/cytduw8k\/\r\n\r\nIs this due to non-reactivity in `$refs`, or because `complete` is a getter, or something else?"],"labels":["feature request","discussion"]},{"title":"Allow SSR to render unescaped inlined script tags.","body":"I have a feature request  - In order to fully replace templating engine server should be able to output raw unescaped contents for some tags like &lt;script&gt;. Currently all the transcluded content or the content provided by v-text\/v-html is automatically escaped and the script becomes unusable. \n\nExample of usage - output json-ld: \n\n```\n<script type=\"application\/ld+json\">\n{\n  \"@context\": \"http:\/\/schema.org\",\n  \"@type\": \"Person\",\n  \"name\": \"John Doe\",\n  \"jobTitle\": \"Graduate research assistant\",\n  \"affiliation\": \"University of Dreams\",\n  \"additionalName\": \"Johnny\",\n  \"url\": \"http:\/\/www.example.com\",\n  \"address\": {\n    \"@type\": \"PostalAddress\",\n    \"streetAddress\": \"1234 Peach Drive\",\n    \"addressLocality\": \"Wonderland\",\n    \"addressRegion\": \"Georgia\"\n  }\n}\n<\/script>\n```\n","comments":["Also have the same issue here and it's a blocking issue for me. Any updates to this? Or, if you can point me to what files to look into I can look to building a PR for this. ","Also have the same issue here and it's a blocking issue for me. The inline script is escaped . Any update plan to this? Now, I can only insert the script after the page is rendered to html","+1 I would like this too, it's a major blocker for us right now.","I would love this feature too. I had a very quick and brief look into the compiler:\r\n\r\nhttps:\/\/github.com\/vuejs\/vue\/blob\/dev\/src\/compiler\/parser\/html-parser.js#L64\r\n\r\nIt seems like it was intended to skip endTags\/plainTexts, but that does not seem to work. The replacement takes place when `handleStartTag` is called. Shouldn't it be `!lastTag && !isPlainTextElement(lastTag)` instead of `!lastTag || !isPlainTextElement(lastTag)` anyway?\r\n\r\nWhatever the cause might or might not be, if someone makes a PR, should this behaviour be configurable? This kind of  stuff seems like a breaking change and the escaping could be seen as security-measurement.","Is there any workaround\/progress on this? Pretty essential to provide metadata for SEO."],"labels":["feature request"]}]