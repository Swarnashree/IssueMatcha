[{"title":"docs: add new html-bundler-webpack-plugin to plugins list in README","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n- Update README.md\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n- Yes\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n- No\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n\r\n## Summary\r\n\r\nHallo @sokra, hello @alexander-akait,\r\n\r\nI have added the new modern [html-bundler-webpack-plugin](https:\/\/github.com\/webdiscus\/html-bundler-webpack-plugin) to the Plugin's list in the README.\r\n\r\n## Details\r\n\r\nThis plugin allows using a template file as an [entry point](https:\/\/github.com\/webdiscus\/html-bundler-webpack-plugin#option-entry).\r\n\r\nThe HTML Bundler generates static HTML or template function from [any template](https:\/\/github.com\/webdiscus\/html-bundler-webpack-plugin#template-engine) (EJS, Handlebars, Nunjucks, Pug, etc.) containing source files of scripts, styles, images, fonts and other resources, similar to how it works in [Vite](https:\/\/vitejs.dev\/guide\/#index-html-and-project-root).\r\n\r\n> **Note**\r\n> \r\n> This plugin should increase the popularity of Webpack as it simplifies the creation of websites similar to `Vite`.\\\r\n> It is also a huge developer experience improvement as many things can be inferred from the HTML.\r\n\r\nFor example, the template contains references to source assets:\r\n```html\r\n<html>\r\n<head>\r\n  <!-- source SCSS file -->\r\n  <link href=\".\/style.scss\" rel=\"stylesheet\">\r\n  <!-- source TypeScript file -->\r\n  <script src=\".\/App.ts\" defer=\"defer\"><\/script>\r\n<\/head>\r\n<body>\r\n  <!-- source image file -->\r\n  <img src=\".\/map.png\">\r\n<\/body>\r\n<\/html>\r\n```\r\n\r\nThe generated HTML contains the output filenames of the processed source files:\r\n\r\n```html\r\n<html>\r\n<head>\r\n  <link href=\"assets\/css\/style.05e4dd86.css\" rel=\"stylesheet\">\r\n  <script src=\"assets\/js\/app.f4b855d8.js\" defer=\"defer\"><\/script>\r\n<\/head>\r\n<body>\r\n  <img src=\"assets\/img\/map.58b43bd8.png\">\r\n<\/body>\r\n<\/html>\r\n```\r\n\r\nVery simple config using only one plugin:\r\n```js\r\nconst HtmlBundlerPlugin = require('html-bundler-webpack-plugin');\r\n\r\nmodule.exports = {\r\n  pugins: [\r\n    new HtmlBundlerPlugin({\r\n      \/\/ define a relative or absolute path to template pages\r\n      entry: 'src\/views\/',\r\n      \r\n      \/\/ OR define templates manually\r\n      entry: {\r\n        index: {\r\n          import: 'src\/views\/home.ejs', \/\/ EJS template => dist\/index.html\r\n          data: { title: 'Homepage' } \/\/ pass variables into template\r\n        },\r\n        'news\/sport': 'src\/views\/news\/sport\/index.html', \/\/ => dist\/news\/sport.html\r\n      },\r\n      \r\n      js: {\r\n        \/\/ output filename of JS extracted from source script specified in `<script>`\r\n        filename: 'assets\/js\/[name].[contenthash:8].js',\r\n        inline: 'auto', \/\/ inline JS in dev mode, extract to file in production mode\r\n      },\r\n\r\n      css: {\r\n        \/\/ output filename of CSS extracted from source file specified in `<link>`\r\n        filename: 'assets\/css\/[name].[contenthash:8].css',\r\n        inline: 'auto', \/\/ inline CSS in dev mode, extract to file in production mode\r\n      },\r\n    }),\r\n  ],\r\n};\r\n```\r\n\r\nThe plugin supports template engines such as  Eta, EJS, Handlebars, Nunjucks, LiquidJS and others \"out of the box\" without additional plugins and loaders.\r\n\r\nThe plugin extracts JS and CSS form source files referenced in HTML into output files.  Compiled JS and CSS can be inlined into generated HTML using the `\u00ecnline` plugin option.\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed"]},{"title":"Webpack BannerPlugin with `raw` option should put `use strict` on the very first line","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the GitHub Discussions. -->\r\n<!-- https:\/\/github.com\/webpack\/webpack\/discussions -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\n1. When using BannerPlugin with `raw` option, it appends the code before `\"use strict\"`, this will cause strict mode to not function properly.\r\n2. When set `minimize` to true, `TerserPlugin` will remove `\"use strict\"` in between.\r\n\r\n**Context:** Before https:\/\/github.com\/webpack\/webpack\/pull\/13842, webpack add `\"use strict\"` inside each function, so we don't have this issue. But after this, webpack seems like shift all `\"use strict\"` to the top, that's the root cause of this issue.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nRepo to reproduce the bug: https:\/\/github.com\/anothertempore\/webpack-banner-use-strict\r\n\r\nSteps:\r\n1. clone the repo\r\n2. run `pnpm install`\r\n3. run `pnpm build`, then check `dist\/async` file, `\"use strict\"` is not in the very first line, which is incorrect.\r\n5. change [this line](https:\/\/github.com\/anothertempore\/webpack-banner-use-strict\/blob\/main\/webpack.config.js#L26) to true, then check `dist\/async`, `\"use strict\"` will be removed.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n`\"use strict\"` statement should always in the very first line.\r\n\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.90.3\r\nNode.js version: 18\r\nOperating System: MacOS\r\nAdditional tools:\r\n","comments":["> When the output code is ESM, it will have \"use strict\" in the very first line, this is expected.\r\n\r\nYou don't need \"use strict\" when your output is ESM...","@alexander-akait Sorry I just updated to Non-ESM code, seems like get the same behaviour. Could you please check it again, Thanks!\r\n\r\nhttps:\/\/github.com\/anothertempore\/webpack-banner-use-strict\/tree\/main","hey I cloned the code and tried out the steps and I see that \"use strict\" is infact on the 2 nd line , could you please elaborate more as to what is the main bug. Thank you . I am a student wanting to help contribute as part of the google summer of code \r\n","I want to say it is not a bug, because BannerPlugin is not for including acustom code, but yes, you can use this for it and in some cases it will work, https:\/\/github.com\/webpack\/webpack\/pull\/13842 is not related to your problem, we don't remove\/generate `\"use strict\"`, it is from your source code, I recommend to use:\r\n```\r\nnew webpack.BannerPlugin({\r\n  banner: \"const hello = 'fromBannerPlugin';\",\r\n  footer: true,\r\n  raw: true,\r\n  include: \/\\.js$\/,\r\n}),\r\n```\r\n\r\nfor code    ","@alexander-akait Thanks for your suggestion. I want to double check if I understand this correctly. \r\n\r\nI tried webpack `v5.46.0`, which is before https:\/\/github.com\/webpack\/webpack\/pull\/13842, the bundled code is:\r\n\r\n```\r\nconst hello = 'fromBannerPlugin';\r\n(self[\"webpackChunkwebpack_banner_use_strict\"] = self[\"webpackChunkwebpack_banner_use_strict\"] || []).push([[931],{\r\n\r\n\/***\/ 463:\r\n\/***\/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\r\n\r\n\"use strict\";\r\n__webpack_require__.r(__webpack_exports__);\r\n\/* harmony export *\/ __webpack_require__.d(__webpack_exports__, {\r\n\/* harmony export *\/   \"all\": () => (\/* binding *\/ every$1),\r\n...\r\n```\r\n\r\nThe `use strict` is inside of function block.\r\n\r\n---\r\n\r\nHowever the webpack after `v.5.47.0`, which is after  https:\/\/github.com\/webpack\/webpack\/pull\/13842, the bundled code changed to:\r\n\r\n```\r\nconst hello = 'fromBannerPlugin';\r\n\"use strict\";\r\n(self[\"webpackChunkwebpack_banner_use_strict\"] = self[\"webpackChunkwebpack_banner_use_strict\"] || []).push([[931],{\r\n\r\n\/***\/ 463:\r\n\/***\/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {\r\n\r\n__webpack_require__.r(__webpack_exports__);\r\n\/* harmony export *\/ __webpack_require__.d(__webpack_exports__, {\r\n\/* harmony export *\/   \"all\": () => (\/* binding *\/ every$1),\r\n```\r\n\r\nThe `use strict` is at the top of the file.\r\n\r\n---\r\n\r\nNo need to modify any source code can notice the difference, so I am wondering which part is related to the source code?","@anothertempore This change was due another things, but yes, it affected your code, but `BannerPlugin` was not design for such purposes like code injection (but yes, it is possible, that is why I reccomend to use footre for such purposes), we can't rollback `use strict` changed, because it will return some problems again","hey @anothertempore there is an issue while cloning this repository can you help me with this: \r\n![Screenshot 2024-03-19 222318](https:\/\/github.com\/webpack\/webpack\/assets\/141476611\/87fa50af-e3c3-441f-8e4e-a97af803ee7e)\r\n"],"labels":["question"]},{"title":"chore(deps-dev): bump terser from 5.29.1 to 5.29.2","body":"Bumps [terser](https:\/\/github.com\/terser\/terser) from 5.29.1 to 5.29.2.\n<details>\n<summary>Changelog<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/terser\/terser\/blob\/master\/CHANGELOG.md\">terser's changelog<\/a>.<\/em><\/p>\n<blockquote>\n<h2>v5.29.2<\/h2>\n<ul>\n<li>Make sure 'computed_props' creates string keys<\/li>\n<li>Take into account the evaluated size when inlining<\/li>\n<\/ul>\n<\/blockquote>\n<\/details>\n<details>\n<summary>Commits<\/summary>\n<ul>\n<li><a href=\"https:\/\/github.com\/terser\/terser\/commit\/2b0fb289023d4d7fb5053e5a41b8fd39a8744d00\"><code>2b0fb28<\/code><\/a> 5.29.2<\/li>\n<li><a href=\"https:\/\/github.com\/terser\/terser\/commit\/f2901b6589cf92c4f82021aa55b89af56c1b480c\"><code>f2901b6<\/code><\/a> update changelog<\/li>\n<li><a href=\"https:\/\/github.com\/terser\/terser\/commit\/1cdfba8eec2be2ea16c842c9e7e30be78793e9ae\"><code>1cdfba8<\/code><\/a> make sure 'computed_props' creates string keys. Closes <a href=\"https:\/\/redirect.github.com\/terser\/terser\/issues\/1500\">#1500<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/terser\/terser\/commit\/03660f863918f82b20121da31312de57372acabd\"><code>03660f8<\/code><\/a> take into account the evaluated size when inlining. Closes <a href=\"https:\/\/redirect.github.com\/terser\/terser\/issues\/1454\">#1454<\/a><\/li>\n<li>See full diff in <a href=\"https:\/\/github.com\/terser\/terser\/compare\/v5.29.1...v5.29.2\">compare view<\/a><\/li>\n<\/ul>\n<\/details>\n<br \/>\n\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=terser&package-manager=npm_and_yarn&previous-version=5.29.1&new-version=5.29.2)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n<\/details>","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","dependencies"]},{"title":"chore(deps-dev): bump less-loader from 8.1.1 to 12.2.0","body":"\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=less-loader&package-manager=npm_and_yarn&previous-version=8.1.1&new-version=12.2.0)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n<\/details>","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","dependencies"]},{"title":"fix:  library module without export statement","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nfixes https:\/\/github.com\/webpack\/webpack\/issues\/18056\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nWhen library === module and providedExport === false we also flag exportsInfo by FlagDependencyExportsPlugin but only for the entry module. Not sure if this is the optimal solution, but I tested it and it is indeed feasible.\r\n\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nYes\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nNo\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","\/cc @sokra "],"labels":["PR: unreviewed","PR: conflict"]},{"title":"fix: LoaderContext type","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\nType wrong.\r\n\r\n**Did you add tests for your changes?**\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\nThe `resourcePath`, `resourceQuery`, and `resourceFragment` properties within `LoaderRunnerLoaderContext` may not be defined if a loader is invoked without an associated resource.\r\n\r\nFor evidence of this behavior, refer to the test case located in `test\/cases\/loaders\/query\/index.js`. The test titled \"should pass query to loader without resource\" confirms this scenario.\r\n\r\nHowever, this behavior could lead to type errors for loaders written in TypeScript. To address this, the `loader-runner` can be updated to assign an empty string as a default value for these properties.\r\n\r\nWhich plan do you think is better?\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><br ><ul><li>:white_check_mark:login: SyMind \/ (e29ce63080526923c14a686d143525fd2e20a729)<\/li><\/ul><br>The committers listed above are authorized under a signed CLA.","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed"]},{"title":"feat: Extend worklet support","body":"**What kind of change does this PR introduce?**\r\n\r\nAs discussed in #11543 this PR prepares a new dedicated plugin for Worklets sharing still most parts of the workflow with the Web Worker plugin through a base class. \r\n\r\nI consider this PR for now a \"draft\" and \"starting point\" for finalization. I am a bit reluctant to fully complete the PR with all expectations towards contributors (Signing CLA with personal details like mailing address, also expecting that the website docs to be provided, 'tests or no merge'). Its a bit sad but it rather feels like working for a company with harsh requirements instead of contributing to a welcoming community. \r\n\r\nI also understand your side a bit to keep things but I'm not willing to invest so much energy. Maybe some other dev might want to take over from this state. \r\n\r\nOpen points:\r\n- [ ] Proper test coverage\r\n- [x] Proper Chunk URL resolving (content hashes are not ready at this stage and might change). \r\n- [ ] Documentation. \r\n\r\n**Did you add tests for your changes?**\r\n\r\nNo. \r\n\r\n* I have the feeling there is a bit the infrastructure missing to setup the right kind of verifications. * Existing test seem to be there but don't verify the outputs reasonably. Hence are rather useless. \r\n* Working on `main` already doesn't allow successful test execution. Bad starting point. Maybe a devcontainer should be added to the project? \r\n* It is really hard for external\/new contributors to oversee these mountain of tests and the related structure. I'm not even sure where to start there. \r\n\r\nI'd be happy to write some reasonable tests for the plugin if you can guide me or even provide some boilerplate code to get kick-started. \r\n\r\nI tested this branch successfully with my project which spawns multiple workers and an audio worklet. \r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo, I expect changes to be backwards compatible.\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nA Worklet documentation similar to the [WebWorker](https:\/\/webpack.js.org\/guides\/web-workers\/) guide would be helpful for devs. Especially regarding the default syntax and how to customize. \r\n","comments":[" <a href=\"https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/18149\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-not-signed.svg\" alt=\"CLA Not Signed\" align=\"left\" height=\"28\" width=\"328\"><\/a><br\/><br \/><ul><li><a href='https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/18149\/#\/?version=2' target='_blank'>:x:<\/a> - login: @Danielku15 \/ name: Daniel Kuschny . The commit (9a8027777cf69c7a49016ea434bcd6352ffba40b, c8c0de8ce2a7a062f428ef86c0b07506e0f1e5b1, 23d4dc37c952c317cc34bb4877a16e616fb30488, afe169edc1f756ed0eed02d1a1887d7ab85e78f9) is not authorized under a signed CLA. <a href='https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/18149\/#\/?version=2' target='_blank'>Please click here to be authorized<\/a>. For further assistance with EasyCLA, <a href='https:\/\/jira.linuxfoundation.org\/servicedesk\/customer\/portal\/4' target='_blank'>please submit a support request ticket<\/a>.<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"[experiment] Implement `import defer` TC39 proposal","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nThis PR is a rebased and cleaned up version of #16567, adding experimental support for the TC39 [defer import evaluation](https:\/\/github.com\/tc39\/proposal-defer-import-eval) Stage 2 proposal. It only includes the `import defer` experiment, and not the `syncImportAssertion` experiment that that PR also implements.\r\n\r\nGiven that async modules cannot be deferred, the proposal is currently going ahead with eagerly evaluating async parts of deferred module graphs. However, this PR still implement the various possible strategies:\r\n- what the proposal does\r\n- ignore the `webpackDefer` marker if a module is async or has async deps\r\n- error when deferring an async module\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\nYes. Tests are passing locally, but I'm marking this as draft until when I see them passing on CI.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n\r\nThis PR introduces a new option, `experiments.deferImport`, that can either be set to `false` or to an object whose `asyncModule` must be `\"proposal\" | \"ignore\" | \"defer\"`.","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@alexander-akait The only remaining failure is a job that has been cancelled because it took longer than 60 minutes -- I believe this is ready for review :)","I was testing this in a real-world app and found some cases in which `webpackDefer:true` is ignored, I'm investigating.\r\n\r\n---\r\n\r\n**EDIT**\r\n\r\n```js\r\n\/\/ entrypoint.js\r\nimport defer * as a from \"a\";\r\nimport defer * as b from \"b\";\r\n\r\n\/\/ b.js\r\nimport \"a\";\r\n```\r\n\r\n`a` doesn't get deferred. Working on a fix.","I was working on the above and realised it was a bug in my test \u2014 that code is correctly bundled. \ud83d\ude05"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"fix: using shared default export in mjs module","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\nbugfix\r\n\r\n**Did you add tests for your changes?**\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\nyes\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\nno\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n\r\nWhen importing a shared module from `.mjs`, the default variable refers to the module object instead of the default exported value.\r\n\r\nThis [codesandbox](https:\/\/codesandbox.io\/p\/devbox\/webpack-module-federation-forked-w4pcrq?layout=%257B%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522rootPanelGroup%2522%253A%257B%2522direction%2522%253A%2522horizontal%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522id%2522%253A%2522ROOT_LAYOUT%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522clt5ka0eg00063b6ly6xh692v%2522%252C%2522sizes%2522%253A%255B70%252C30%255D%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522EDITOR%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522id%2522%253A%2522clt5ka0ef00023b6lfhjajj4x%2522%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522SHELLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522id%2522%253A%2522clt5ka0ef00043b6lf1hkau23%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522DEVTOOLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522id%2522%253A%2522clt5ka0ef00053b6l5m82bk58%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%252C%2522sizes%2522%253A%255B50%252C50%255D%257D%252C%2522tabbedPanels%2522%253A%257B%2522clt5ka0ef00023b6lfhjajj4x%2522%253A%257B%2522id%2522%253A%2522clt5ka0ef00023b6lfhjajj4x%2522%252C%2522activeTabId%2522%253A%2522clt5kntrp01si3b6l79mm7h6l%2522%252C%2522tabs%2522%253A%255B%257B%2522type%2522%253A%2522FILE%2522%252C%2522filepath%2522%253A%2522%252F.codesandbox%252Ftasks.json%2522%252C%2522id%2522%253A%2522clt5kntrp01si3b6l79mm7h6l%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522state%2522%253A%2522IDLE%2522%257D%255D%257D%252C%2522clt5ka0ef00053b6l5m82bk58%2522%253A%257B%2522id%2522%253A%2522clt5ka0ef00053b6l5m82bk58%2522%252C%2522activeTabId%2522%253A%2522clt5l8cm004py3b6lrksrwmth%2522%252C%2522tabs%2522%253A%255B%257B%2522type%2522%253A%2522TASK_PORT%2522%252C%2522port%2522%253A8080%252C%2522taskId%2522%253A%2522start%2522%252C%2522id%2522%253A%2522clt5l8cm004py3b6lrksrwmth%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522path%2522%253A%2522%252F%2522%257D%255D%257D%252C%2522clt5ka0ef00043b6lf1hkau23%2522%253A%257B%2522id%2522%253A%2522clt5ka0ef00043b6lf1hkau23%2522%252C%2522tabs%2522%253A%255B%257B%2522type%2522%253A%2522TASK_LOG%2522%252C%2522taskId%2522%253A%2522start%2522%252C%2522id%2522%253A%2522clt5kbncz009a3b6lld2xdqqh%2522%252C%2522mode%2522%253A%2522permanent%2522%257D%255D%252C%2522activeTabId%2522%253A%2522clt5kbncz009a3b6lld2xdqqh%2522%257D%257D%252C%2522showDevtools%2522%253Atrue%252C%2522showShells%2522%253Atrue%252C%2522showSidebar%2522%253Atrue%252C%2522sidebarPanelSize%2522%253A15%257D) shows a minimal repro. The console shows that `Vue` points to the module object, which should have been `Vue.default` instead.\r\n\r\n<img width=\"693\" alt=\"image\" src=\"https:\/\/github.com\/webpack\/webpack\/assets\/5051221\/97dacf88-fd36-462f-ba03-875eff87f9cc\">\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><br ><ul><li>:white_check_mark:login: gzzhanghao \/ (7a2e4ac05efd0992efb7cda0354fcb6646e71f17)<\/li><\/ul><br>The committers listed above are authorized under a signed CLA.","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","I don't think it is a valid fix, you need more complex logic, look at code the `getExportsType` in other places "],"labels":["PR: unreviewed"]},{"title":"chore(deps-dev): bump mini-css-extract-plugin from 1.6.2 to 2.8.1","body":"Bumps [mini-css-extract-plugin](https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin) from 1.6.2 to 2.8.1.\n<details>\n<summary>Release notes<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/releases\">mini-css-extract-plugin's releases<\/a>.<\/em><\/p>\n<blockquote>\n<h2>v2.8.1<\/h2>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/compare\/v2.8.0...v2.8.1\">2.8.1<\/a> (2024-02-27)<\/h3>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>add <code>nonce<\/code> if <code>__webpack_nonce__<\/code> has been defined (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/c7f0aee5feaa1b8d047f575e94a91662eb8c314c\">c7f0aee<\/a>)<\/li>\n<\/ul>\n<h2>v2.8.0<\/h2>\n<h2><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/compare\/v2.7.7...v2.8.0\">2.8.0<\/a> (2024-02-01)<\/h2>\n<h3>Features<\/h3>\n<ul>\n<li>added the <code>beforeTagInsert<\/code> hook (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1054\">#1054<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/6313bf629c1c76ec7b07dc60fef06e39702a63d9\">6313bf6<\/a>)<\/li>\n<li>support named exports with any characters (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/b656c5c98dcffcae51f5208e961ce089be6607a8\">b656c5c<\/a>)<\/li>\n<\/ul>\n<h2>v2.7.7<\/h2>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/compare\/v2.7.6...v2.7.7\">2.7.7<\/a> (2024-01-10)<\/h3>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>add ';' to import media queries (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1051\">#1051<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/98acf2bbd08ba0988318c6d364b9aa14f84ed79a\">98acf2b<\/a>)<\/li>\n<li>add <code>ChunkLoadError<\/code> name to chunk loading error (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1073\">#1073<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/e3f837574bdad9dc583028c6f9a9a2f3082d9ecb\">e3f8375<\/a>)<\/li>\n<li>adding media, supports and layer for external import (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1072\">#1072<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/60c53311c125425d2e742414ed6dbd59cea8cbe4\">60c5331<\/a>)<\/li>\n<li>css experiment detection (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1067\">#1067<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/82f4a47f3ddc7cdbba311bee50d85dd4b3e6bfb1\">82f4a47<\/a>)<\/li>\n<\/ul>\n<h2>v2.7.6<\/h2>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/compare\/v2.7.5...v2.7.6\">2.7.6<\/a> (2023-05-19)<\/h3>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>compatibility with built-in CSS support (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1035\">#1035<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/f576ed6a530db555d7442ebab1f9a09f3acff13f\">f576ed6<\/a>)<\/li>\n<\/ul>\n<h2>v2.7.5<\/h2>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/compare\/v2.7.4...v2.7.5\">2.7.5<\/a> (2023-03-16)<\/h3>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>don't invalidate cache after timeout refresh (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1023\">#1023<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/38d8513f97983698b3b4417abb8bacaee0ea68fb\">38d8513<\/a>)<\/li>\n<li>readable identifier (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1024\">#1024<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/721bbf104030c96acff14ad2b7a23edc4f1e277d\">721bbf1<\/a>)<\/li>\n<\/ul>\n<h2>v2.7.4<\/h2>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/compare\/v2.7.3...v2.7.4\">2.7.4<\/a> (2023-03-16)<\/h3>\n<h3>Bug Fixes<\/h3>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Changelog<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/blob\/master\/CHANGELOG.md\">mini-css-extract-plugin's changelog<\/a>.<\/em><\/p>\n<blockquote>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/compare\/v2.8.0...v2.8.1\">2.8.1<\/a> (2024-02-27)<\/h3>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>add <code>nonce<\/code> if <code>__webpack_nonce__<\/code> has been defined (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/c7f0aee5feaa1b8d047f575e94a91662eb8c314c\">c7f0aee<\/a>)<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/compare\/v2.7.7...v2.8.0\">2.8.0<\/a> (2024-02-01)<\/h2>\n<h3>Features<\/h3>\n<ul>\n<li>added the <code>beforeTagInsert<\/code> hook (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1054\">#1054<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/6313bf629c1c76ec7b07dc60fef06e39702a63d9\">6313bf6<\/a>)<\/li>\n<li>support named exports with any characters (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/b656c5c98dcffcae51f5208e961ce089be6607a8\">b656c5c<\/a>)<\/li>\n<\/ul>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/compare\/v2.7.6...v2.7.7\">2.7.7<\/a> (2024-01-10)<\/h3>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>add ';' to import media queries (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1051\">#1051<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/98acf2bbd08ba0988318c6d364b9aa14f84ed79a\">98acf2b<\/a>)<\/li>\n<li>add <code>ChunkLoadError<\/code> name to chunk loading error (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1073\">#1073<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/e3f837574bdad9dc583028c6f9a9a2f3082d9ecb\">e3f8375<\/a>)<\/li>\n<li>adding media, supports and layer for external import (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1072\">#1072<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/60c53311c125425d2e742414ed6dbd59cea8cbe4\">60c5331<\/a>)<\/li>\n<li>css experiment detection (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1067\">#1067<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/82f4a47f3ddc7cdbba311bee50d85dd4b3e6bfb1\">82f4a47<\/a>)<\/li>\n<\/ul>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/compare\/v2.7.5...v2.7.6\">2.7.6<\/a> (2023-05-19)<\/h3>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>compatibility with built-in CSS support (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1035\">#1035<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/f576ed6a530db555d7442ebab1f9a09f3acff13f\">f576ed6<\/a>)<\/li>\n<\/ul>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/compare\/v2.7.4...v2.7.5\">2.7.5<\/a> (2023-03-16)<\/h3>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>don't invalidate cache after timeout refresh (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1023\">#1023<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/38d8513f97983698b3b4417abb8bacaee0ea68fb\">38d8513<\/a>)<\/li>\n<li>readable identifier (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1024\">#1024<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/721bbf104030c96acff14ad2b7a23edc4f1e277d\">721bbf1<\/a>)<\/li>\n<\/ul>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/compare\/v2.7.3...v2.7.4\">2.7.4<\/a> (2023-03-16)<\/h3>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>module identifier, don't merge modules with different media\/suppors\/layer (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1021\">#1021<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/ad3729ba9d3fed328a170340eafb66e8c2a13bdc\">ad3729b<\/a>)<\/li>\n<\/ul>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/compare\/v2.7.2...v2.7.3\">2.7.3<\/a> (2023-03-07)<\/h3>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Commits<\/summary>\n<ul>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/c7ff30d52ff0c6068a89b7f938b4c77d6f82fa7e\"><code>c7ff30d<\/code><\/a> chore(release): 2.8.1<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/fba92cc8be4bc766b96c58c7e2219a5dc0a3739b\"><code>fba92cc<\/code><\/a> test: update (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1083\">#1083<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/c7f0aee5feaa1b8d047f575e94a91662eb8c314c\"><code>c7f0aee<\/code><\/a> fix: add <code>nonce<\/code> if <code>__webpack_nonce__<\/code> has been defined<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/878822ba4ca6c2b8869ef93c88b2477a44db8813\"><code>878822b<\/code><\/a> chore: update dependency-review-action to the latest version (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1079\">#1079<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/3ef3765c70ed613c646d5f6f1e65eef15727b334\"><code>3ef3765<\/code><\/a> chore(release): 2.8.0<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/b656c5c98dcffcae51f5208e961ce089be6607a8\"><code>b656c5c<\/code><\/a> feat: support named exports with any characters<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/aeb97fcf81cdf97ec9df8b92c7db21b920aa6dac\"><code>aeb97fc<\/code><\/a> refactor: code (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1077\">#1077<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/c6cab84286ca95e4d7a97e0e6fd87b69e936b0c3\"><code>c6cab84<\/code><\/a> ci: bump github actions (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1076\">#1076<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/6313bf629c1c76ec7b07dc60fef06e39702a63d9\"><code>6313bf6<\/code><\/a> feat: added the <code>beforeTagInsert<\/code> hook (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/1054\">#1054<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/commit\/8480bce915fbb9482823397bff296817db7924d6\"><code>8480bce<\/code><\/a> chore(release): 2.7.7<\/li>\n<li>Additional commits viewable in <a href=\"https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/compare\/v1.6.2...v2.8.1\">compare view<\/a><\/li>\n<\/ul>\n<\/details>\n<br \/>\n\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=mini-css-extract-plugin&package-manager=npm_and_yarn&previous-version=1.6.2&new-version=2.8.1)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n<\/details>","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","dependencies"]},{"title":"fix: parser hook calls for compiler plugins","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nFixes #18113\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes, I added some new tests to ensure that the hooks are called. Needed to use the whole compiler to ensure all plugins (like InnerGraphPlugin) are registered as expected. \r\n\r\nI tried first to extend the JavaScriptParser.unittest.js but it didn't behave like the whole compiler. \r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNo special docs needed I'd say. ","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"," <a href=\"https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/18128\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-not-signed.svg\" alt=\"CLA Not Signed\" align=\"left\" height=\"28\" width=\"328\"><\/a><br\/><br \/><ul><li><a href='https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/18128\/#\/?version=2' target='_blank'>:x:<\/a> - login: @Danielku15 \/ name: Daniel Kuschny . The commit (7cf15cc7f6246abc437e047305c2021d5ab8a27b) is not authorized under a signed CLA. <a href='https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/18128\/#\/?version=2' target='_blank'>Please click here to be authorized<\/a>. For further assistance with EasyCLA, <a href='https:\/\/jira.linuxfoundation.org\/servicedesk\/customer\/portal\/4' target='_blank'>please submit a support request ticket<\/a>.<\/li><\/ul>","@snitin315 Please see https:\/\/github.com\/webpack\/webpack\/issues\/18113#issuecomment-1967437311 and https:\/\/github.com\/webpack\/webpack\/pull\/18149#issue-2164876703 \r\n\r\nHence: unfortunately no. I am willing to agree to the terms of the CLA but not to the process involved to sign it (specifically providing my real address). ","No problem, I'll fix it"],"labels":["PR: reviewed-changes-requested"]},{"title":"chore: \ud83e\udd16 remove redundant file","body":"\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n1. refactoring\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nYes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nNothing\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n\r\nRemove the redundant file since it is unused.","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: IWANABETHATGUY  (2b4ee4c0c2347e4eb2f27ad196ca42e380cb167d, 4ec627343b74a594faf3c9ce430688ea057bab94)<\/li><\/ul>","We need this file...","> We need this file...\r\n\r\nSorry, I delete the wrong file."],"labels":["PR: unreviewed"]},{"title":"Fetching remote-entry files dynamically and support of experiments.outputModule","body":"Hello Webpack contributors,\r\n\r\nI've encountered an issue with dynamically loading remote-entry files (fetching  remote-entry files as needed) using Module Federation. I have a custom module loader that uses `__webpack_require__.l()` to fetch remote-entry files dynamically, as described in the [Module Federation Plugin documentation](https:\/\/webpack.js.org\/plugins\/module-federation-plugin).\r\n\r\nTo ensure `__webpack_require__.l()` is defined, I'm employing a workaround that involves dynamically importing a fake module (`await import('.\/FakeModule.js')`). While this successfully generates the `__webpack_require__.l()` definition, it has an unintended side effect: the `webpack\/runtime\/publicPath` (`__webpack_require__.p`) is set based on the baseURL of my module loader, rather than being recalculated for each use.\r\n\r\nThis has led to incorrect URLs for chunk loading, as `__webpack_require__.f.j()` calculates the chunk URL using the following pattern:\r\n\r\n```js\r\nvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\r\n```\r\nI've found that setting `output.library.type: 'module'` and enabling `experiments.outputModule` allows `__webpack_require__.p` to be set correctly using `import.meta.url`. However, this is not an ideal solution as it relies on experimental features.\r\n\r\nI have two questions for the community:\r\n\r\n1. I would like to avoid building my own script tag creation and eventing code, and utilize as much in model webpack code as possible.  \r\n\r\n2. Are there any plans to support `experiments.outputModule` in future Webpack versions, or to stabilize this in the feature?\r\n\r\n\r\nAny insights or suggestions on this matter would be greatly appreciated.\r\n\r\nThank you for your time and assistance.\r\n\r\nBest regards,\r\nHari","comments":["@ScriptedAlchemy do you have any inputs?","For us problems with module federation (stack trace within a federation entry file, i[e] is not a function on the console => i[e] is a chunk usually but appears to be `undefined`) by switching from 5.90.1 (working) to 5.90.2 (broken). I tested 5.90.3 as well (still broken in seemingly the same way to this regard).\r\n\r\nIt's a huge project with loads of modules, only one of these looks like creating some kind of trouble for some reason. I lack experience in debugging within the packager. Is there anything useful I can\/should provide to help. I have the feeling it might be related to what is being described here, but could also be an unrelated error.","@harirsskrishna Please format your issue using the issue template, otherwise I will move it in `Dicussions`, thank you","@alexander-akait , I believe this better fits in the `Discussions` section. Please feel free to move it to `Discussions`.","Look at module-federation\/enhanced. I forked it out of webpack and added a hook lifecycle for runtime plugins. \n\nOr module-federation\/runtime which has all the mechanics. ","@ScriptedAlchemy Do we need something improve on webpack side?","Im not sure if webpack will accept the enhancements made in here, it is also easier to maintain parity with webpack and rspack when both depend on a central runtime vs it coupled deeply to bundler. \r\n\r\nWhat i did is extract the runtime code from webpack and author a library, then i added the hooks on require as needed, like f.consumes etc to bind it back to the bundler runtime. \r\n\r\nIf users want to adjust internals etc. You can write a runtime plugin that gives you access to the lifecycles.\r\nfor example: \r\nhttps:\/\/github.com\/module-federation\/module-federation-examples\/blob\/master\/runtime-plugins\/remote-control\/app1\/pick-remote.ts\r\n\r\nMight be useful.","@ScriptedAlchemy sounds intresting, it can be useful, we have hooks, so I think we can solve it by them","indeed, im not sure what your opinion is on depending on module-federation\/runtime - but we would always introcude this back into the webpack plugin, otherwise one can use the enhanced plugin "],"labels":["question"]},{"title":"`parser.hooks.new` not called for classes within the same file. ","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the GitHub Discussions. -->\r\n<!-- https:\/\/github.com\/webpack\/webpack\/discussions -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nThe `parser.hooks.new(\"Item\")` hooks are not called when the class `Item` is within the same file\/module. It works if the class `Item` is imported from another module.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. Use this repository: https:\/\/github.com\/Danielku15\/webpack-parser-hook-call\r\n2. Run `npm install && npm run build`\r\n3. Notice in the console output that the hook is not called for `new NotWorkingClass`\r\n\r\nIn the `webpack.config.js` you will find a small plugin tapping into the `parser.hooks.new` for ESM javascript files. It then expects to be called for all the `new` expressions within input.mjs. But there is no call for `NotWorkingClass`\r\n\r\n**What is the expected behavior?**\r\n\r\nThe parser hook should also be called for the `new NotWorkingClass` expression. From what I could see is following path prevents the hook to be called: \r\n\r\n* `JavaScriptParser.walkNewExpression` is called for all expressions which calls `JavaScriptParser.callHooksForExpression`\r\n* For `WorkingClass` and `Uint8Array` the `JavaScriptParser.getMemberExpressionInfo` returns some data which allows the right hooks to be called. \r\n* For `NotWorkingClass` undefined is returned. This is because in `JavaScriptParser.getFreeInfoFromVariable` the `freeName` is set to `true` instead of a string bailing the whole code path:\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/611bded369b5a9ea695f2669b25a6f88b67d7826\/lib\/javascript\/JavascriptParser.js#L4535\r\n\r\nI'm not sure what `getFreeInfoFromVariable` should return in this case from a low level behavior. Either the parser somehow needs to fill `freeName` to the className or the hook calling might need adoption to work with Identifiers.\r\n\r\n**Other relevant information:**\r\nwebpack version: 5.90.3\r\nNode.js version: v20.9.0\r\nOperating System: Windows 11 Professional\r\nAdditional tools: \r\n","comments":["I found something suspicious which might allow an easy fix: \r\n\r\n1. Various top level symbols are marked by the InnerGraphPlugin: \r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/611bded369b5a9ea695f2669b25a6f88b67d7826\/lib\/optimize\/InnerGraphPlugin.js#L133\r\n2. The `InnerGraph.tagTopLevelSymbol` first defines a variable in the parser with the name and then additionally tags the variable with the top level symbol. \r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/611bded369b5a9ea695f2669b25a6f88b67d7826\/lib\/optimize\/InnerGraph.js#L269-L279\r\n3. The problem: \r\n    1. `parser.defineVariable` [adds a variable](https:\/\/github.com\/webpack\/webpack\/blob\/611bded369b5a9ea695f2669b25a6f88b67d7826\/lib\/javascript\/JavascriptParser.js#L4385-L4391) with the current scope as value. \r\n    2. `parser.tagVariable` [also defines a variable](https:\/\/github.com\/webpack\/webpack\/blob\/611bded369b5a9ea695f2669b25a6f88b67d7826\/lib\/javascript\/JavascriptParser.js#L4356-L4380) but with the correct top level symbol as value. But as there is already a VariableInfo registered from `defineVariable` [resulting in the name not to be set](https:\/\/github.com\/webpack\/webpack\/blob\/611bded369b5a9ea695f2669b25a6f88b67d7826\/lib\/javascript\/JavascriptParser.js#L4373) \r\n\r\nI see two potential fixes in this code path: \r\n\r\n1. In `InnerGraph.tagTopLevelSymbol` we remove the call to `parser.defineVariable`. (or move it into the if-statement when a tag already exists). \r\n   * Feels like the safer option as the change is quite isolated and just ensures we do not double-define the variable with missing info. \r\n3. In `JavaScriptParser.tagVariable` we fill the name we know instead of `true` into the VariableInfo. \r\n   * It seems the old name was used before and things were refactored as part of https:\/\/github.com\/webpack\/webpack\/commit\/ec518945f18618d4c3b4992f129442e73dd331da I'm not so sure about the impact of this change. \r\n\r\n","Feel free to send a PR, we have a lot of tests, so we will catch potential problems","Just looked at the reproducible test repo, yeah, we need to fix it, because other plugins can be broken, it can work for the development mode, but broken for the production mode, it is a critical issue... Will you look at this?","Yes, I will try to open a PR soon. Should be there the next few days latest. Locally solution 1 worked fine for me. But have to check all unit tests first. ","Made a proposal for fixing the problem. I'm willing to contribute the change as an individual developer but I'm a bit reluctant to provide so many personal details (e.g. mailing address) in the EasyCLA to just contribute some code to this project. \r\n\r\n","I wanted to resolve this issue\r\n","see if we directly adjust the hook registration logic to work with identifiers ,\r\n(node:8984) [DEP_WEBPACK_COMPILATION_NORMAL_MODULE_LOADER_HOOK] DeprecationWarning: Compilation.hooks.normalModuleLoader was moved to NormalModule.getCompilationHooks(compilation).loader\r\n\r\nit will give you just deprecation warning ,so if incase we adjust it so that we're tapping into the expression hook for the \"new\" keyword. Then, we check if the argument to new is an identifier (assuming it's a simple class name without further qualification) and directly check if it matches \"NotWorkingClass\"\r\nThis approach circumvents the need for the parser to fill freeName correctly and directly handles the class name. Try this adjustment in your code to see if it resolves the issue with NotWorkingClass expressions not triggering the hook.\r\n\r\nI am going to attach my piece of code......\r\n![Screenshot (44)](https:\/\/github.com\/webpack\/webpack\/assets\/138312154\/0c371c39-ccf0-4613-9a43-e24a39a9b35f)\r\n\r\n\r\ntell me if it helps you if not then we will work on this issue more\r\n"],"labels":["bug","Send a PR"]},{"title":"Chunk's `auxiliaryFiles` set contains `undefined` ","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\nI'm so sorry I can't provide a simple reproduction. I'm using Sharetribe Web Template (which is based on create-react-app) but injecting an Astro rendered site inside it. Also, they Sharetribe customized `react-scripts` which I also had to modify to add an `html-loader`. So, as you imagine` the whole setup is a mess.\r\n\r\nBut I'm really in a hurry to deliver this project so any help or tip on how to hunt this issue down myself is really appreciated.\r\n\r\nAlso, if this turns out to be a bug in webpack, I don't mind making a PR to fix it.\r\n\r\nThe react-scripts can be found here: https:\/\/github.com\/tokilabs\/calligo-sharetribe-scripts\/tree\/master\/packages\/react-scripts\r\n\r\nSome files of interest:\r\n\r\n- [`config\/webpack.config.js`](https:\/\/github.com\/tokilabs\/calligo-sharetribe-scripts\/blob\/master\/packages\/react-scripts\/config\/webpack.config.js)\r\n- [`config\/sharetribeWebpackConfig.js`](https:\/\/github.com\/tokilabs\/calligo-sharetribe-scripts\/blob\/master\/packages\/react-scripts\/config\/sharetribeWebpackConfig.js)\r\n- [the build script](https:\/\/github.com\/tokilabs\/calligo-sharetribe-scripts\/blob\/master\/packages\/react-scripts\/scripts\/build.js)\r\n\r\n<!-- Please ask questions on StackOverflow or the GitHub Discussions. -->\r\n<!-- https:\/\/github.com\/webpack\/webpack\/discussions -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nThis issue only happens during build, during dev (handled by [`start.js`](https:\/\/github.com\/tokilabs\/calligo-sharetribe-scripts\/blob\/master\/packages\/react-scripts\/scripts\/start.js) script) everything works fine\r\n\r\nThe issue is that a Chunk contains is emitted which contains an `undefined` value in the `auxiliaryFiles` array. Which causes the `webpack-manifest-plugin` to throw the famous `The \"path\" argument must be of type string. Received undefined` error.\r\n\r\nI updated both webpack and `webpack-manifest-plugin` to the latest version and the error persists.\r\n\r\n```\r\nChunk {\r\n  id: 1590,\r\n  ids: [ 1590 ],\r\n  debugId: 1223,\r\n  name: 'main',\r\n  idNameHints: SortableSet(0) [Set] {\r\n    _sortFn: undefined,\r\n    _lastActiveSortFn: Symbol(not sorted),\r\n    _cache: undefined,\r\n    _cacheOrderIndependent: undefined\r\n  },\r\n  preventIntegration: false,\r\n  filenameTemplate: undefined,\r\n  cssFilenameTemplate: undefined,\r\n  _groups: SortableSet(1) [Set] {\r\n    Entrypoint {\r\n      groupDebugId: 5223,\r\n      options: [Object],\r\n      _children: [SortableSet [Set]],\r\n      _parents: [SortableSet [Set]],\r\n      _asyncEntrypoints: [SortableSet [Set]],\r\n      _blocks: [SortableSet [Set]],\r\n      chunks: [Array],\r\n      origins: [Array],\r\n      _modulePreOrderIndices: [Map],\r\n      _modulePostOrderIndices: [Map],\r\n      index: 0,\r\n      _runtimeChunk: [Circular *1],\r\n      _entrypointChunk: [Circular *1],\r\n      _initial: true\r\n    },\r\n    _sortFn: [Function: compareChunkGroupsByIndex],\r\n    _lastActiveSortFn: Symbol(not sorted),\r\n    _cache: undefined,\r\n    _cacheOrderIndependent: undefined\r\n  },\r\n  runtime: 'main',\r\n  files: SetDeprecatedArray(2) [Set] {\r\n    'static\/css\/main.197612e5.css',\r\n    'static\/js\/main.4d49beed.js'\r\n  },\r\n  auxiliaryFiles: Set(29) {\r\n    undefined,\r\n    'static\/media\/ajuda.6YqU9CzO_12KKKI.1040acbd8ce60d962529.webp',\r\n    'static\/media\/aspas-1.z59pUXt-_1eRcin.2f2e124ec067761e5e85.webp',\r\n    'static\/media\/aspas-2.-EiBRoJU_ZHdEGP.7f94225a67e9f54574e7.webp',\r\n    'static\/media\/brandname-mobile.cE0fo98j_yPyW6.5aa727667d024e408330.webp',\r\n    'static\/media\/brandname.R6hE-dgi_Z24WGa9.8b6a8cb15d446ba324ed.webp',\r\n    'static\/media\/close-button.xvo2w6Qb_ZCNIrY.3f64e46271ec3784df49.webp',\r\n    'static\/media\/home-banner-1.fvKG1TnX_Z1W5NLe.1927c91520b372fd25a3.webp',\r\n    'static\/media\/home-banner-2.WYXhwgI5_Z1S0yVs.578270f245ad21a975b9.webp',\r\n    'static\/media\/icon_24h.b2JuyspM_Z1i2vwG.917c619d4fe0b5cf6f57.webp',\r\n    'static\/media\/icon_mic.AR32n9vK_Z1RNmzF.6df7a7f5e8e45a0a5f62.webp',\r\n    'static\/media\/icon_quality.HUQTyq3i_Z1HViM0.b94727adc5460117c00c.webp',\r\n    'static\/media\/icon_security.qVqq06UK_Z22QDpX.1d7be0c0afc854e1e690.webp',\r\n    'static\/media\/ilustra_whyTherapy.SzFvI7Cm_Z1kSpyu.5e18e3a4648111e78b25.webp',\r\n    'static\/media\/ilustracao-1.IA7dMa1K_Z1FLGuf.0c16543c21e8481a3b53.webp',\r\n    'static\/media\/ilustracao-2.piZ1cl7N_ZPl9VA.2a5e03e4ed70f95934f7.webp',\r\n    'static\/media\/intro-image-mobile.YjE86yTX_Z2s0Nzg.474ff6231b0f3d1eae95.webp',\r\n    'static\/media\/logo-mobile-white.EROkUeKD_ZOhhKN.3d4327dfad3049f40381.webp',\r\n    'static\/media\/logo-mobile.5O6x2LMT_2tfGEI.1940a1107bc7f1a0a1f9.webp',\r\n    'static\/media\/menu-icon-white.SkmDkwAX_Z20v2Md.f1779de8e6c3fe1089b5.webp',\r\n    'static\/media\/menu-icon.Vo66JKZW_ZvRFz2.362b30f7c2ea270b2466.webp',\r\n    'static\/media\/play.l9OIX63r_Zn8ImP.4029d2e2490cb1a824d9.webp',\r\n    'static\/media\/biketribe-brandImage-1500.ec1b40e5a91c583c7295.jpg',\r\n    'static\/media\/biketribe-facebook-sharing-1200x630.e244f01f60dd7ddc16c1.jpg',\r\n    'static\/media\/biketribe-logo-desktop.c130ff2b233ec5e2ef55.png',\r\n    'static\/media\/biketribe-twitter-sharing-600x314.d1d46bae577cac2c840a.jpg',\r\n    'static\/media\/hoisted.Qrnbjwdl.af6c33e948be84d6612c.js',\r\n    'static\/css\/main.197612e5.css.map',\r\n    'static\/js\/main.4d49beed.js.map'\r\n  },\r\n  rendered: true,\r\n  hash: 'c6ab5d7bc99144ce0702bc19e69e22b7',\r\n  contentHash: [Object: null prototype] {\r\n    'css\/mini-extract': '1adc89212a36c9c70659',\r\n    javascript: 'dc0fcfb331e40e903b16'\r\n  },\r\n  renderedHash: 'c6ab5d7bc99144ce0702',\r\n  chunkReason: undefined,\r\n  extraAsync: false\r\n}\r\n```\r\n\r\n**Stack Trace**\r\n\r\n```bash\r\nHookWebpackError: The \"path\" argument must be of type string. Received undefined\r\n    at makeWebpackError (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/webpack\/lib\/HookWebpackError.js:48:9)\r\n    at \/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/webpack\/lib\/Compilation.js:3075:12\r\n    at eval (eval at create (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:13:1)\r\n    at fn (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/webpack\/lib\/Compilation.js:481:17)\r\n    at _next7 (eval at create (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:11:1)\r\n    at eval (eval at create (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:25:1)\r\n    at eval (eval at create (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:14:1)\r\n    at process.processTicksAndRejections (node:internal\/process\/task_queues:95:5)\r\n-- inner error --\r\nTypeError: The \"path\" argument must be of type string. Received undefined\r\n    at new NodeError (node:internal\/errors:405:5)\r\n    at validateString (node:internal\/validators:162:11)\r\n    at Object.basename (node:path:1308:5)\r\n    at \/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/webpack-manifest-plugin\/dist\/helpers.js:66:26\r\n    at Array.forEach (<anonymous>)\r\n    at Object.reduceChunk (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/webpack-manifest-plugin\/dist\/helpers.js:60:44)\r\n    at \/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/webpack-manifest-plugin\/dist\/hooks.js:43:82\r\n    at Array.reduce (<anonymous>)\r\n    at WebpackManifestPlugin.emit (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/webpack-manifest-plugin\/dist\/hooks.js:43:48)\r\n    at \/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/webpack-manifest-plugin\/dist\/index.js:66:72\r\n    at fn (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/webpack\/lib\/Compilation.js:479:10)\r\n    at _next7 (eval at create (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:11:1)\r\n    at eval (eval at create (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:25:1)\r\n    at eval (eval at create (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:14:1)\r\n    at process.processTicksAndRejections (node:internal\/process\/task_queues:95:5)\r\ncaused by plugins in Compilation.hooks.processAssets\r\nTypeError: The \"path\" argument must be of type string. Received undefined\r\n    at new NodeError (node:internal\/errors:405:5)\r\n    at validateString (node:internal\/validators:162:11)\r\n    at Object.basename (node:path:1308:5)\r\n    at \/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/webpack-manifest-plugin\/dist\/helpers.js:66:26\r\n    at Array.forEach (<anonymous>)\r\n    at Object.reduceChunk (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/webpack-manifest-plugin\/dist\/helpers.js:60:44)\r\n    at \/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/webpack-manifest-plugin\/dist\/hooks.js:43:82\r\n    at Array.reduce (<anonymous>)\r\n    at WebpackManifestPlugin.emit (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/webpack-manifest-plugin\/dist\/hooks.js:43:48)\r\n    at \/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/webpack-manifest-plugin\/dist\/index.js:66:72\r\n    at fn (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/webpack\/lib\/Compilation.js:479:10)\r\n    at _next7 (eval at create (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:11:1)\r\n    at eval (eval at create (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:25:1)\r\n    at eval (eval at create (\/Users\/svallory\/projects\/calligo\/workspace\/repos\/scripts\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:14:1)\r\n    at process.processTicksAndRejections (node:internal\/process\/task_queues:95:5)\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI believe webpack shouldn't have an `undefined` in the set of `chunk.auxiliaryFiles`\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.90.3\r\nNode.js version: 18.18.2\r\nOperating System: OS X\r\nAdditional tools:\r\n","comments":["Sounds like a bug in non official webpack plugin, we need reproducible test repo to fix a place","> Sounds like a bug in non official webpack plugin, we need reproducible test repo to fix a place\r\n\r\nAs I said, I don't mind hunting it down. The error blows up in `webpack-manifest-loader` but the real issue is that the `main` chunk is generated with an `undefined` value in the `axuiliaryFiles`.\r\n\r\nI checked the documentation but did not find a good explanation of how chunks are created in webpack.\r\n\r\nWith some guidance, mainly regarding how chunks are created in webpack and what's the role of loaders in it, I could isolate the real culprit and create a reproduction.","You can use proxy (https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Proxy) on the `auxiliaryFiles` field (just do patch inside webpack in your dev deps) and find where it was added","> You can use proxy (https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Proxy) on the `auxiliaryFiles` field (just do patch inside webpack in your dev deps) and found where it was added\r\n\r\nexcelent idea! (why didn't I thought of that?! \ud83e\udd26\ud83c\udffb)"],"labels":["bug","question"]},{"title":"Add a reproduction for module rules not applying to a resource added by a plugin","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nThis PR is trying to demonstrate a reproduction of the issue described in #17747, so that we can try to find a fix that doesn't also add a regression for #16466.\r\n\r\nI'm submitting a draft PR, because it makes no sense to merge until a fix is found.\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\nThis PR adds a new `statsCases` test case, that when run, currently produces an error like:\r\n\r\n```\r\n$ yarn jest StatsTestCases -t issue-17747\r\nyarn run v1.22.19\r\n$ node --expose-gc --max-old-space-size=4096 --experimental-vm-modules --trace-deprecation node_modules\/jest-cli\/bin\/jest --logHeapUsage StatsTestCases -t issue-17747\r\n FAIL  test\/StatsTestCases.basictest.js (50 MB heap size)\r\n  warmup\r\n    \u25cb skipped should warmup webpack\r\n  StatsTestCases\r\n    \u2715 should print correct stats for issue-17747 (210 ms)\r\n\r\n...(snip)...\r\n\r\n  \u25cf StatsTestCases \u203a should print correct stats for issue-17747\r\n\r\n    Child compilation failed:\r\n    Module parse failed: Unexpected token (1:8)\r\n    File was processed with these loaders:\r\n     * .\/loader.js\r\n    You may need an additional loader to handle the result of these loaders.\r\n    > {\"asset\":\"3ee037f347c64cc372ad.txt\"}:\r\n    SyntaxError: Unexpected token (1:8)\r\n\r\n      39 |           .join(\"\\n\");\r\n      40 |\r\n    > 41 |         throw new Error(`Child compilation failed:\\n${errorDetails}`);\r\n         |               ^\r\n      42 |       }\r\n      43 |     }\r\n      44 |   };\r\n\r\n      at handleMake (test\/statsCases\/issue-17747\/plugin.js:41:15)\r\n\r\n...(snip)...\r\n```\r\n\r\nYou can also demonstrate that this test passes if you comment out the following lines from `NormalModuleFactory.js`:\r\n\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/51f0f0aeac072f989f8d40247f6c23a1995c5c37\/lib\/NormalModuleFactory.js#L528-L530\r\n\r\nThis PR also includes the snapshot that's generated when you run the test with these lines commented out.\r\n\r\n**Did you add tests for your changes?**\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\nThis PR _only_ contains tests, no implementation changes.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\nNo.\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n\r\nDocumentation is unaffected.\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: ezzatron \/ name: Erin  (b6afa32b875288ff654a9611a14a6e6d357b35fe)<\/li><\/ul>"],"labels":["PR: unreviewed"]},{"title":"fix: Consumption of eager shared modules","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nFixes eager consumption of shared dependencies. Full description is in this discussion: https:\/\/github.com\/webpack\/webpack\/discussions\/18001#discussioncomment-8381548\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNo, the reason for no tests attached can be found in the discussion link above. cc @alexander-akait \r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo, as far as I understand how webpack container works.\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nThis is yet to be defined, this PR is needed as a starting point.\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: cmath10 \/ name: Kirill Zaytsev  (7a795115dcb7eab13726e408614aea07cf875d0a)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","Any updates?","Don't worry, I will ping you when we need some advices\/dicussions, I am fine with your changes","@2hea1 Do we need to port this back to module-federation\/enhanced or did our rewrite already address all these problems? ","> @2hea1 Do we need to port this back to module-federation\/enhanced or did our rewrite already address all these problems?\r\n\r\n@ScriptedAlchemy  @cmath10  I use `@module-federaion\/enhanced` , and it has solved the issue .\r\n\r\nrelated pr: https:\/\/github.com\/cmath10\/module-federation-incorrect-version-resolution\/pull\/1","@2heal1 Is this part required:\r\n`publicPath: 'http:\/\/localhost:8080\/public\/build-legacy\/'`\r\n`buildNext: 'buildNext@http:\/\/localhost:8080\/build-next\/mf-manifest.json',`\r\n?\r\n\r\nIn my app when I build it for production, all files and pages are served by the same NGINX server and I have URLs like `https:\/\/myapp.domain\/mypage` and `https:\/\/myapp.domain\/build\/runtime.js` etc. And URLs with protocol I use only in serve mode in development, and only if my team requires.","@ScriptedAlchemy Are you fine with these changes?","> @2heal1 Is this part required: `publicPath: 'http:\/\/localhost:8080\/public\/build-legacy\/'` `buildNext: 'buildNext@http:\/\/localhost:8080\/build-next\/mf-manifest.json',` ?\r\n> \r\n> In my app when I build it for production, all files and pages are served by the same NGINX server and I have URLs like `https:\/\/myapp.domain\/mypage` and `https:\/\/myapp.domain\/build\/runtime.js` etc. And URLs with protocol I use only in serve mode in development, and only if my team requires.\r\n\r\n@cmath10  ahh i got you , the port can be removed https:\/\/github.com\/cmath10\/module-federation-incorrect-version-resolution\/pull\/1\/commits\/03377bcf6780973e2ce528b05507f44e2bae5b1b","@2heal1 Thanks for the reply! I'll check the solution as soon as possible.","@2heal1 That works, but now I have a question. As I understand, mf-manifest is loaded via a network to get info about a federated module. I noticed there is no hash in the manifest's name and wonder how that will work if a browser caches it. Or do I understand it incorrectly?","@cmath10 I'm a little out of context, we still need this fix, am I right?","@alexander-akait yes, if there is no solution for caching.","> @2heal1 That works, but now I have a question. As I understand, mf-manifest is loaded via a network to get info about a federated module. I noticed there is no hash in the manifest's name and wonder how that will work if a browser caches it. Or do I understand it incorrectly?\r\n\r\nYes, this is a question . But since you can control server to dispatch data , so you can use our `snapshot` to avoid the cache issue. \r\n\r\nFirst you can generate snapshot by invoking `generateSnapshotFromManifest` api which is provided by `@module-federation\/sdk` , and then you can dispatch the `snapshot` to `html`. \r\n\r\nSecond, set mf runtime plugin to consume the `snapshot` . \r\n\r\nAnd when the remote need to be loaded , it will just use the remoteEntry , and the real entry has hash ,so it will not have the cache issue . \r\n\r\nThat's also what we have done in bytedance . I hope it can help you as well.\r\n","@cmath10  I have pushed the commit , you can view [this](https:\/\/github.com\/cmath10\/module-federation-incorrect-version-resolution\/pull\/1\/commits\/ab10613aeb93c609e6242d9a27e986bcef7db1c4) for details .\r\n\r\nThe start steps: \r\n1. `yarn install` \r\n2.  `yarn build`\r\n3. `yarn serve`\r\n4. visit `http:\/\/localhost:8080\/` to see the moduleInfo\r\n\r\n![image](https:\/\/github.com\/webpack\/webpack\/assets\/41466093\/31a16dac-431f-4345-8285-19de423f068b)\r\n","@cmath10 Feel free to ping when you try the solutions and decide there is no solution ","I need to port it to PHP first \ud83d\ude05","@2heal1 this is the only solution?"],"labels":["PR: unreviewed"]},{"title":"chore(deps-dev): bump lint-staged from 13.2.2 to 15.2.2","body":"Bumps [lint-staged](https:\/\/github.com\/okonet\/lint-staged) from 13.2.2 to 15.2.2.\n<details>\n<summary>Release notes<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/okonet\/lint-staged\/releases\">lint-staged's releases<\/a>.<\/em><\/p>\n<blockquote>\n<h2>v15.2.2<\/h2>\n<h3>Patch Changes<\/h3>\n<ul>\n<li><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1391\">#1391<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/fdcdad42ff96fea3c05598e378d3c44ad4a51bde\"><code>fdcdad4<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - <em>Lint-staged<\/em> no longer tries to load configuration from files that are not checked out. This might happen when using sparse-checkout.<\/li>\n<\/ul>\n<h2>v15.2.1<\/h2>\n<h3>Patch Changes<\/h3>\n<ul>\n<li><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1387\">#1387<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/e4023f687616dcf4816545b8eefbcce50e255c9c\"><code>e4023f6<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - Ignore stdin of spawned commands so that they don't get stuck waiting. Until now, <em>lint-staged<\/em> has used the default settings to spawn linter commands. This means the <code>stdin<\/code> of the spawned commands has accepted input, and essentially gotten stuck waiting. Now the <code>stdin<\/code> is ignored and commands will no longer get stuck. If you relied on this behavior, please open a new issue and describe how; the behavior has not been intended.<\/li>\n<\/ul>\n<h2>v15.2.0<\/h2>\n<h3>Minor Changes<\/h3>\n<ul>\n<li><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1371\">#1371<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/f3378be894fb84800341800b1e4f6f8bc8dfd904\"><code>f3378be<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - Using the <code>--no-stash<\/code> flag no longer discards all unstaged changes to partially staged files, which resulted in inadvertent data loss. This fix is available with a new flag <code>--no-hide-partially-staged<\/code> that is automatically enabled when <code>--no-stash<\/code> is used.<\/li>\n<\/ul>\n<h3>Patch Changes<\/h3>\n<ul>\n<li>\n<p><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1362\">#1362<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/17bc480c0f8767407a87527931558de8d1d1551d\"><code>17bc480<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/antonk52\"><code>@\u200bantonk52<\/code><\/a>! - update lilconfig@3.0.0<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1368\">#1368<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/7c55ca9f410043016e8b33b3b523b9b7e764acf4\"><code>7c55ca9<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - Update most dependencies<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1368\">#1368<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/777d4e976852af4c181ffbe055f3531343349695\"><code>777d4e9<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - To improve performance, only use <code>lilconfig<\/code> when searching for config files outside the git repo. In the regular case, <em>lint-staged<\/em> finds the config files from the Git index and loads them directly.<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1373\">#1373<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/85eb0ddab1eba0c0bcc8cc109e17dc2bbb3d044e\"><code>85eb0dd<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - When determining git directory, use <code>fs.realpath()<\/code> only for symlinks. It looks like <code>fs.realpath()<\/code> changes some Windows mapped network filepaths unexpectedly, causing issues.<\/p>\n<\/li>\n<\/ul>\n<h2>v15.1.0<\/h2>\n<h3>Minor Changes<\/h3>\n<ul>\n<li><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1344\">#1344<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/04233115a5e25d6fa7d357cbe9d42173ae8a1acf\"><code>0423311<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/danielbayley\"><code>@\u200bdanielbayley<\/code><\/a>! - Add support for loading configuration from <code>package.yaml<\/code> and <code>package.yml<\/code> files, supported by <code>pnpm<\/code>.<\/li>\n<\/ul>\n<h3>Patch Changes<\/h3>\n<ul>\n<li><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1355\">#1355<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/105d9012fc92fca549987816406450075cf255f3\"><code>105d901<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - Suppress some warnings when using the &quot;--quiet&quot; flag<\/li>\n<\/ul>\n<h2>v15.0.2<\/h2>\n<h3>Patch Changes<\/h3>\n<ul>\n<li><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1339\">#1339<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/8e82364dd89155e96de574cfb38a94d28b8635af\"><code>8e82364<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - Update dependencies, including listr2@7.0.2 to fix an upstream issue affecting lint-staged.<\/li>\n<\/ul>\n<h2>v15.0.1<\/h2>\n<h3>Patch Changes<\/h3>\n<ul>\n<li><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1217\">#1217<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/d2e6f8b1e1cd84ba6eb2f3f6a7f650c882987041\"><code>d2e6f8b<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/louneskmt\"><code>@\u200blouneskmt<\/code><\/a>! - Previously it was possible for a function task to mutate the list of staged files passed to the function, and accidentally affect the generation of other tasks. This is now fixed by passing a copy of the original file list instead.<\/li>\n<\/ul>\n<h2>v15.0.0<\/h2>\n<h3>Major Changes<\/h3>\n<ul>\n<li>\n<p><a href=\"https:\/\/redirect.github.com\/okonet\/lint-staged\/pull\/1322\">#1322<\/a> <a href=\"https:\/\/github.com\/okonet\/lint-staged\/commit\/66b93aac870d155ca81302b2574617da99409ca7\"><code>66b93aa<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - <strong>Require at least Node.js 18.12.0<\/strong><\/p>\n<p>This release drops support for Node.js 16, which is EOL after 2023-09-11.<\/p>\n<\/li>\n<\/ul>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Changelog<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/blob\/master\/CHANGELOG.md\">lint-staged's changelog<\/a>.<\/em><\/p>\n<blockquote>\n<h2>15.2.2<\/h2>\n<h3>Patch Changes<\/h3>\n<ul>\n<li><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1391\">#1391<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/fdcdad42ff96fea3c05598e378d3c44ad4a51bde\"><code>fdcdad4<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - <em>Lint-staged<\/em> no longer tries to load configuration from files that are not checked out. This might happen when using sparse-checkout.<\/li>\n<\/ul>\n<h2>15.2.1<\/h2>\n<h3>Patch Changes<\/h3>\n<ul>\n<li><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1387\">#1387<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/e4023f687616dcf4816545b8eefbcce50e255c9c\"><code>e4023f6<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - Ignore stdin of spawned commands so that they don't get stuck waiting. Until now, <em>lint-staged<\/em> has used the default settings to spawn linter commands. This means the <code>stdin<\/code> of the spawned commands has accepted input, and essentially gotten stuck waiting. Now the <code>stdin<\/code> is ignored and commands will no longer get stuck. If you relied on this behavior, please open a new issue and describe how; the behavior has not been intended.<\/li>\n<\/ul>\n<h2>15.2.0<\/h2>\n<h3>Minor Changes<\/h3>\n<ul>\n<li><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1371\">#1371<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/f3378be894fb84800341800b1e4f6f8bc8dfd904\"><code>f3378be<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - Using the <code>--no-stash<\/code> flag no longer discards all unstaged changes to partially staged files, which resulted in inadvertent data loss. This fix is available with a new flag <code>--no-hide-partially-staged<\/code> that is automatically enabled when <code>--no-stash<\/code> is used.<\/li>\n<\/ul>\n<h3>Patch Changes<\/h3>\n<ul>\n<li>\n<p><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1362\">#1362<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/17bc480c0f8767407a87527931558de8d1d1551d\"><code>17bc480<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/antonk52\"><code>@\u200bantonk52<\/code><\/a>! - update lilconfig@3.0.0<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1368\">#1368<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/7c55ca9f410043016e8b33b3b523b9b7e764acf4\"><code>7c55ca9<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - Update most dependencies<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1368\">#1368<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/777d4e976852af4c181ffbe055f3531343349695\"><code>777d4e9<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - To improve performance, only use <code>lilconfig<\/code> when searching for config files outside the git repo. In the regular case, <em>lint-staged<\/em> finds the config files from the Git index and loads them directly.<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1373\">#1373<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/85eb0ddab1eba0c0bcc8cc109e17dc2bbb3d044e\"><code>85eb0dd<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - When determining git directory, use <code>fs.realpath()<\/code> only for symlinks. It looks like <code>fs.realpath()<\/code> changes some Windows mapped network filepaths unexpectedly, causing issues.<\/p>\n<\/li>\n<\/ul>\n<h2>15.1.0<\/h2>\n<h3>Minor Changes<\/h3>\n<ul>\n<li><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1344\">#1344<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/04233115a5e25d6fa7d357cbe9d42173ae8a1acf\"><code>0423311<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/danielbayley\"><code>@\u200bdanielbayley<\/code><\/a>! - Add support for loading configuration from <code>package.yaml<\/code> and <code>package.yml<\/code> files, supported by <code>pnpm<\/code>.<\/li>\n<\/ul>\n<h3>Patch Changes<\/h3>\n<ul>\n<li><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1355\">#1355<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/105d9012fc92fca549987816406450075cf255f3\"><code>105d901<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - Suppress some warnings when using the &quot;--quiet&quot; flag<\/li>\n<\/ul>\n<h2>15.0.2<\/h2>\n<h3>Patch Changes<\/h3>\n<ul>\n<li><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1339\">#1339<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/8e82364dd89155e96de574cfb38a94d28b8635af\"><code>8e82364<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/iiroj\"><code>@\u200biiroj<\/code><\/a>! - Update dependencies, including listr2@7.0.2 to fix an upstream issue affecting lint-staged.<\/li>\n<\/ul>\n<h2>15.0.1<\/h2>\n<h3>Patch Changes<\/h3>\n<ul>\n<li><a href=\"https:\/\/redirect.github.com\/lint-staged\/lint-staged\/pull\/1217\">#1217<\/a> <a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/d2e6f8b1e1cd84ba6eb2f3f6a7f650c882987041\"><code>d2e6f8b<\/code><\/a> Thanks <a href=\"https:\/\/github.com\/louneskmt\"><code>@\u200blouneskmt<\/code><\/a>! - Previously it was possible for a function task to mutate the list of staged files passed to the function, and accidentally affect the generation of other tasks. This is now fixed by passing a copy of the original file list instead.<\/li>\n<\/ul>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Commits<\/summary>\n<ul>\n<li><a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/4d4270b4125a5c0286cf2bdf2cb01283c47e0873\"><code>4d4270b<\/code><\/a> chore(changeset): release<\/li>\n<li><a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/a7c5957bfa0d1683ed4ca4b890af71de19643e7b\"><code>a7c5957<\/code><\/a> Merge pull request <a href=\"https:\/\/redirect.github.com\/okonet\/lint-staged\/issues\/1391\">#1391<\/a> from lint-staged\/fix-sparse-checkout<\/li>\n<li><a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/c1b2a6a2a57fe56c1e092379728feea8b7116dce\"><code>c1b2a6a<\/code><\/a> ci: use macOS Sonoma M1 runners<\/li>\n<li><a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/fdcdad42ff96fea3c05598e378d3c44ad4a51bde\"><code>fdcdad4<\/code><\/a> fix: do not try to load configuration from files that are not checked out<\/li>\n<li><a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/999dcceea206e2b856a3e1d469ba47f566db50a2\"><code>999dcce<\/code><\/a> chore(changeset): release<\/li>\n<li><a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/52a9e3f9d861ee109e85cbbfe132619c8e19a63c\"><code>52a9e3f<\/code><\/a> Merge pull request <a href=\"https:\/\/redirect.github.com\/okonet\/lint-staged\/issues\/1387\">#1387<\/a> from lint-staged\/ignore-stdin<\/li>\n<li><a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/dd72fdeb6bc0acca018ff8503bcf7c475efb8963\"><code>dd72fde<\/code><\/a> ci: update &quot;actions\/cache@v4&quot;<\/li>\n<li><a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/e4023f687616dcf4816545b8eefbcce50e255c9c\"><code>e4023f6<\/code><\/a> fix: ignore stdin of spawned commands<\/li>\n<li><a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/46f2c43c93f81b01a34e03c69ab459af1be51665\"><code>46f2c43<\/code><\/a> ci: update <code>actions\/setup-node@v4<\/code><\/li>\n<li><a href=\"https:\/\/github.com\/lint-staged\/lint-staged\/commit\/a684125ec3381a4a6c98fd7c16760b948eaa31f1\"><code>a684125<\/code><\/a> ci: update CodeQL action v3<\/li>\n<li>Additional commits viewable in <a href=\"https:\/\/github.com\/okonet\/lint-staged\/compare\/v13.2.2...v15.2.2\">compare view<\/a><\/li>\n<\/ul>\n<\/details>\n<br \/>\n\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=lint-staged&package-manager=npm_and_yarn&previous-version=13.2.2&new-version=15.2.2)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n<\/details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","PR: conflict","dependencies"]},{"title":"when setting `optimization.providedExports` to false, outputModule wouldn't generate export statement","body":"### Discussed in https:\/\/github.com\/webpack\/webpack\/discussions\/17902\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **hardfist** December 28, 2023<\/sup>\r\nI'm not sure whether it's by design or bug, it seems outputModule relys on setting `optimization.providedExports` to true, otherwise it wouldn't generate the export statement\r\nyou can reproduce here https:\/\/github.com\/web-infra-dev\/rspack-repro\/tree\/esm-output\r\n* optimization.providedExports=true\r\n```js\r\nconst external_react_namespaceObject = x({ [\"default\"]: () => __WEBPACK_EXTERNAL_MODULE_react__[\"default\"] });\r\n;\/\/ CONCATENATED MODULE: .\/src\/index.js\r\n\r\nconsole.log({React: external_react_namespaceObject[\"default\"]});\r\n\r\nvar __webpack_exports__React = __webpack_exports__._;\r\nexport { __webpack_exports__React as React };\r\n\r\n```\r\n* optimization.providedExports = false\r\n```js\r\nvar __webpack_exports__ = {};\r\n\r\n;\/\/ CONCATENATED MODULE: external \"react\"\r\nvar x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\r\nvar y = x => () => x\r\nconst external_react_namespaceObject = x({ [\"default\"]: () => __WEBPACK_EXTERNAL_MODULE_react__[\"default\"] });\r\n;\/\/ CONCATENATED MODULE: .\/src\/index.js\r\n\r\nconsole.log({React: external_react_namespaceObject[\"default\"]});\r\n\/\/ missing the export statement\r\n\r\n\r\n```<\/div>","comments":["@hardfist Feel free to send a PR","I found that the issue has always existed since version [5.41.0](https:\/\/github.com\/webpack\/webpack\/releases\/tag\/v5.41.0) which add EcmaScript modules support.\r\n\r\nI'm willing to fix this issue, and I've spent some time looking at it.\r\n\r\nThe problem I found is that when `renderStartup` in ModuleLibraryPlugin `moduleGraph.getExportsInfo(module).exports` equals to [] which caused by `optimization.providedExports: false`.\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/6842c9a2c9b70e760143188ffa5baa19a72799cb\/lib\/library\/ModuleLibraryPlugin.js#L80\r\n\r\n\r\nI have a solution that when `library === module` and  `providedExport === false` we also flag exportsInfo by `FlagDependencyExportsPlugin` but only for the entry module. Not sure if this is the optimal solution, but I tested it and it is indeed feasible. \r\n\r\nBut I also feel that doing so violates the meaning of `providedExport`. I will send PR to fix this issue. \r\n","@hai-x yeah, feel free to send a pr "],"labels":["Send a PR"]},{"title":"Allow aliases to be resolved without an extra slash (#14370)","body":"## Feature request\r\n\r\nFirst off, thank you so much for all your amazing work on this project. I would like to propose the subject of a previously closed issue #14370, but this time as a feature request.\r\n\r\nAs described in #14370, TypeScript allows you to configure your project in a way that allows the following code:\r\n```ts\r\nimport X from \"@y\"\r\n```\r\n\r\nThis is accomplished using the following `tsconfig.json` options:\r\n```json\r\n{\r\n\t\"extends\": \"..\/..\/..\/tsconfig.base.json\",\r\n\t\"compilerOptions\": {\r\n\t\t\"outDir\": \".\/dist\",\r\n\t\t\"rootDir\": \".\/src\",\r\n\t\t\"paths\": {\r\n\t\t\t\"@\": [\".\/src\"],\r\n\t\t\t\"@*\": [\".\/src\/*\"]\r\n\t\t}\r\n\t}\r\n}\r\n\r\n```\r\n\r\nDespite this, Webpack does not support a matching `resolve.alias` configuration option, and instead necessitates that you to fall back to the following unnecessarily extraneous and redundant style:\r\n```ts\r\nimport X from \"@\/y\"\r\n```\r\n\r\nWhen this was originally brought up in #14370, @alexander-akait [mentioned](https:\/\/github.com\/webpack\/webpack\/issues\/14370#issuecomment-931403769) that the reason why this doesn't work as you'd expect is because there may be naming conflicts between custom aliases and modules located in `node_modules`:\r\n\r\n> Because `@utility` is package name (yes, npm doesn't allow to use it, but it can be used potentially), you should use `@\/utility`, it means resolve `@` directory and looking for `utility` module\r\n\r\nWhile I understand the implications of this, I feel quite strongly that if the user goes far enough to explicitly specify how they want a particular module identifier to be interpreted, (i.e. by explicitly mapping `~alias` or `@utility` in TypeScript's `compilerOptions.paths` or Webpack's `resolve.alias`), that Webpack should respect that. TypeScript allows the exact same.\r\n\r\n### What is the expected behavior?\r\n\r\nI believe that Webpack should allow you to write the first (and objectively more logical) import style, as such:\r\n```ts\r\nimport X from \"@y\"\r\n```\r\n\r\n### What is motivation or use case for adding\/changing the behavior?\r\n\r\nAs mentioned above:\r\n> I feel quite strongly that if the user goes far enough to explicitly specify how they want a particular module identifier to be interpreted, (i.e. by explicitly mapping `~alias` or `@utility` in TypeScript's `compilerOptions.paths` or Webpack's `resolve.alias`), that Webpack should respect that. TypeScript allows the exact same.\r\n\r\nAdditionally, the combo of Webpack + TS already gives us great freedom to augment our application development with QOL improvements, and this feels like a natural step in that direction. I can't imagine anybody that wouldn't benefit from this feature being added.\r\n\r\n### How should this be implemented in your opinion?\r\n\r\nAs mentioned earlier, I understand and recognize the issue of conflicting package names. To remedy this, this feature could be disabled by default, and made accessible only by enabling a specific webpack configuration option. As for the internal implementation details, I am not so sure, but I would be happy to look if you are open to accepting a pull request for this.\r\n\r\n### Are you willing to work on this yourself?\r\nI will happily work towards submitting a pull request for this, if this is something that you would be interested in merging. Let me know.\r\n\r\n### Footnotes\r\nThank you for reading my issue and again thank you for all your work on this tool. It is much appreciated.\r\n\r\nP.S. If anyone knows of a loader or plugin that implements this already, please let me know, as I couldn't find one \ud83d\ude03","comments":["This is one of the best issues I've seen in a long time, really well written.","PR welcome","@Threebow [TsconfigPathsPlugin](https:\/\/github.com\/dividab\/tsconfig-paths-webpack-plugin\/tree\/master) does exactly what you're trying to do, you can check it out."],"labels":["enhancement"]},{"title":"chore(deps-dev): bump css-loader from 5.2.7 to 6.10.0","body":"Bumps [css-loader](https:\/\/github.com\/webpack-contrib\/css-loader) from 5.2.7 to 6.10.0.\n<details>\n<summary>Release notes<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/releases\">css-loader's releases<\/a>.<\/em><\/p>\n<blockquote>\n<h2>v6.10.0<\/h2>\n<h2><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/compare\/v6.9.1...v6.10.0\">6.10.0<\/a> (2024-01-30)<\/h2>\n<h3>Features<\/h3>\n<ul>\n<li>add <code>@rspack\/core<\/code> as an optional peer dependency (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1568\">#1568<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/3924679cb9a8f31996c742290a71a3446c9782b9\">3924679<\/a>)<\/li>\n<li>pass the <code>resourceQuery<\/code> and <code>resourceFragment<\/code> to the <code>auto<\/code> and <code>mode<\/code> callback (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1569\">#1569<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/d641c4d48264518dfeb77d7e1e8ef03bbb09b645\">d641c4d<\/a>)<\/li>\n<li>support named exports with any characters (<a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/6f439299838eab7e6fb18f6e9f47b9dee2208463\">6f43929<\/a>)<\/li>\n<\/ul>\n<h2>v6.9.1<\/h2>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/compare\/v6.9.0...v6.9.1\">6.9.1<\/a> (2024-01-18)<\/h3>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>css nesting support<\/li>\n<li><code>@scope<\/code> at-rule support<\/li>\n<\/ul>\n<h2>v6.9.0<\/h2>\n<h2><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/compare\/v6.8.1...v6.9.0\">6.9.0<\/a> (2024-01-09)<\/h2>\n<h3>Features<\/h3>\n<ul>\n<li>updated generateExportEntry to expose node details (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1556\">#1556<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/05002f39e29afd7e12f9efca4d073bc23e3d2150\">05002f3<\/a>)<\/li>\n<\/ul>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>css experiment detection (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1559\">#1559<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/f2cfe30a8f6b0053a268c0d9c1943bb3c8f01338\">f2cfe30<\/a>)<\/li>\n<\/ul>\n<h2>v6.8.1<\/h2>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/compare\/v6.8.0...v6.8.1\">6.8.1<\/a> (2023-05-28)<\/h3>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>use <code>cause<\/code> for original errors and warnings (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1526\">#1526<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/ae3d8ae54ecb5706fe9c3449487cc8306699469f\">ae3d8ae<\/a>)<\/li>\n<\/ul>\n<h2>v6.8.0<\/h2>\n<h2><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/compare\/v6.7.4...v6.8.0\">6.8.0<\/a> (2023-05-27)<\/h2>\n<h3>Features<\/h3>\n<ul>\n<li>use template literal when it possible to prevent <code>Maximum call stack size exceeded<\/code> (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1525\">#1525<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/6eb56618185e974abf339c952c263cc7b8a9a066\">6eb5661<\/a>)<\/li>\n<\/ul>\n<h3>Bug Fixes<\/h3>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Changelog<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/blob\/master\/CHANGELOG.md\">css-loader's changelog<\/a>.<\/em><\/p>\n<blockquote>\n<h2><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/compare\/v6.9.1...v6.10.0\">6.10.0<\/a> (2024-01-30)<\/h2>\n<h3>Features<\/h3>\n<ul>\n<li>add <code>@rspack\/core<\/code> as an optional peer dependency (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1568\">#1568<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/3924679cb9a8f31996c742290a71a3446c9782b9\">3924679<\/a>)<\/li>\n<li>pass the <code>resourceQuery<\/code> and <code>resourceFragment<\/code> to the <code>auto<\/code> and <code>mode<\/code> callback (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1569\">#1569<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/d641c4d48264518dfeb77d7e1e8ef03bbb09b645\">d641c4d<\/a>)<\/li>\n<li>support named exports with any characters (<a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/6f439299838eab7e6fb18f6e9f47b9dee2208463\">6f43929<\/a>)<\/li>\n<\/ul>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/compare\/v6.9.0...v6.9.1\">6.9.1<\/a> (2024-01-18)<\/h3>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>css nesting support<\/li>\n<li><code>@scope<\/code> at-rule support<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/compare\/v6.8.1...v6.9.0\">6.9.0<\/a> (2024-01-09)<\/h2>\n<h3>Features<\/h3>\n<ul>\n<li>updated generateExportEntry to expose node details (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1556\">#1556<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/05002f39e29afd7e12f9efca4d073bc23e3d2150\">05002f3<\/a>)<\/li>\n<\/ul>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>css experiment detection (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1559\">#1559<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/f2cfe30a8f6b0053a268c0d9c1943bb3c8f01338\">f2cfe30<\/a>)<\/li>\n<\/ul>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/compare\/v6.8.0...v6.8.1\">6.8.1<\/a> (2023-05-28)<\/h3>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>use <code>cause<\/code> for original errors and warnings (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1526\">#1526<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/ae3d8ae54ecb5706fe9c3449487cc8306699469f\">ae3d8ae<\/a>)<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/compare\/v6.7.4...v6.8.0\">6.8.0<\/a> (2023-05-27)<\/h2>\n<h3>Features<\/h3>\n<ul>\n<li>use template literal when it possible to prevent <code>Maximum call stack size exceeded<\/code> (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1525\">#1525<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/6eb56618185e974abf339c952c263cc7b8a9a066\">6eb5661<\/a>)<\/li>\n<\/ul>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>warning and error serialization (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1523\">#1523<\/a>) (<a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/3e52969f0f6b1c9d4d16db41ebff8804b340742c\">3e52969<\/a>)<\/li>\n<\/ul>\n<h3><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/compare\/v6.7.3...v6.7.4\">6.7.4<\/a> (2023-05-19)<\/h3>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Commits<\/summary>\n<ul>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/7bbb57c9b54dbcba89d5598a7f32f9098917b867\"><code>7bbb57c<\/code><\/a> chore(release): 6.10.0<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/d641c4d48264518dfeb77d7e1e8ef03bbb09b645\"><code>d641c4d<\/code><\/a> feat: pass the <code>resourceQuery<\/code> and <code>resourceFragment<\/code> to the <code>auto<\/code> and `mode...<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/3924679cb9a8f31996c742290a71a3446c9782b9\"><code>3924679<\/code><\/a> feat: add <code>@rspack\/core<\/code> as an optional peer dependency (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1568\">#1568<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/6f439299838eab7e6fb18f6e9f47b9dee2208463\"><code>6f43929<\/code><\/a> feat: support named exports with any characters<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/f9192eeb2773d8c5ea8e6424363ad6b8fb2b397b\"><code>f9192ee<\/code><\/a> chore(release): 6.9.1<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/6515be0e35ea3f15e29def7cca26b4157472ec00\"><code>6515be0<\/code><\/a> fix: css nesting support and <code>@scope<\/code> at-rule<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/0751f7a5fd45972340435e898020dce7d8cc9d4f\"><code>0751f7a<\/code><\/a> docs: update (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1562\">#1562<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/2d17551deea6e4513de70c471cf91fd504075e59\"><code>2d17551<\/code><\/a> chore(release): 6.9.0<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/e38116ff5315cca01e46fa152840aafdbbd3ec35\"><code>e38116f<\/code><\/a> chore: update dependencies to latest version (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1561\">#1561<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/commit\/d09ff738fea06551eeccd9871ab6e3c3c0dfac66\"><code>d09ff73<\/code><\/a> test: getLocalIdent and node type (<a href=\"https:\/\/redirect.github.com\/webpack-contrib\/css-loader\/issues\/1560\">#1560<\/a>)<\/li>\n<li>Additional commits viewable in <a href=\"https:\/\/github.com\/webpack-contrib\/css-loader\/compare\/v5.2.7...v6.10.0\">compare view<\/a><\/li>\n<\/ul>\n<\/details>\n<br \/>\n\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=css-loader&package-manager=npm_and_yarn&previous-version=5.2.7&new-version=6.10.0)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n<\/details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","PR: conflict","dependencies"]},{"title":"this.importModule broken in esm packages","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the GitHub Discussions. -->\r\n<!-- https:\/\/github.com\/webpack\/webpack\/discussions -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nI am using the Webpack loader API [`this.importModule`](https:\/\/webpack.js.org\/api\/loaders\/#thisimportmodule) which invokes [`vm.runInThisContext`](https:\/\/nodejs.org\/api\/vm.html#scriptrunincontextcontextifiedobject-options) to execute the module code.\r\n\r\nHowever, as soon as the `package.json` file includes `\"type\": \"module\"` `vm.runInThisContext` does not have access to `require` and `module` anymore:\r\n\r\n![error screenshot](https:\/\/github.com\/jantimon\/reproduction-webpack-import-module-bug\/assets\/4113649\/17735e8e-5b63-4619-ba17-cb378ee73be8)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nHere is a reproduction:\r\n\r\nhttps:\/\/github.com\/jantimon\/reproduction-webpack-import-module-bug\r\n\r\n[webpack.config.js\r\n](https:\/\/github.com\/jantimon\/reproduction-webpack-import-module-bug\/blob\/main\/webpack.config.cjs)\r\n```js\r\nmodule.exports = {\r\n    module: {\r\n        rules: [\r\n            {\r\n                test: \/\\.js$\/,\r\n                use: require.resolve('.\/loader.cjs'),\r\n                issuerLayer: \"\",\r\n                exclude: \/node_modules\/,\r\n            },\r\n        ],\r\n    }\r\n};\r\n```\r\n\r\n[`.\/loader.cjs`](https:\/\/github.com\/jantimon\/reproduction-webpack-import-module-bug\/blob\/main\/loader.cjs)\r\n```js\r\nmodule.exports = function (source) {\r\n    const callback = this.async();\r\n    this.importModule('.\/banner.js', {\r\n        layer: \"banner-loader\"\r\n    }, function (err, result) {\r\n        if (err) return callback(err);\r\n        callback(null, (result?.banner || \"\") + source);\r\n    });\r\n}\r\n```\r\n\r\n[`.\/banner.js`](https:\/\/github.com\/jantimon\/reproduction-webpack-import-module-bug\/blob\/main\/src\/banner.js)\r\n```js\r\nconst cowsay = require(\"cowsay\");\r\n\r\nconsole.log(cowsay.say({\r\n    text : \"I'm a moooodule\",\r\n    e : \"oO\",\r\n    T : \"U \"\r\n}));\r\n\r\nmodule.exports = {\r\n    banner: `;console.log(\"Build at ${new Date()}\");\\n`\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n`module` and `require` should be available in `webpack\/lib\/javascript\/JavascriptModulesPlugin.js`\r\n\r\nThe following change would fix the bug:\r\n\r\n\r\n```diff\r\ndiff --git a\/node_modules\/webpack\/lib\/javascript\/JavascriptModulesPlugin.js b\/node_modules\/webpack\/lib\/javascript\/JavascriptModulesPlugin.js\r\nindex 4249a2f..31cd251 100644\r\n--- a\/node_modules\/webpack\/lib\/javascript\/JavascriptModulesPlugin.js\r\n+++ b\/node_modules\/webpack\/lib\/javascript\/JavascriptModulesPlugin.js\r\n@@ -441,8 +441,11 @@ class JavascriptModulesPlugin {\r\n \t\t\t\t\tconst { module, moduleObject } = options;\r\n \t\t\t\t\tconst code = source.source();\r\n \r\n+\t\t\t\t\tconst { createRequire } = require(\"module\");\r\n+\t\t\t\t\tconst universalRequire = typeof require !== \"function\" ? createRequire(module.resource) : require;\r\n+\r\n \t\t\t\t\tconst fn = vm.runInThisContext(\r\n-\t\t\t\t\t\t`(function(${module.moduleArgument}, ${module.exportsArgument}, ${RuntimeGlobals.require}) {\\n${code}\\n\/**\/})`,\r\n+\t\t\t\t\t\t`(function(${module.moduleArgument}, ${module.exportsArgument}, ${RuntimeGlobals.require}, require, module) {\\n${code}\\n\/**\/})`,\r\n \t\t\t\t\t\t{\r\n \t\t\t\t\t\t\tfilename: module.identifier(),\r\n \t\t\t\t\t\t\tlineOffset: -1\r\n@@ -453,7 +456,9 @@ class JavascriptModulesPlugin {\r\n \t\t\t\t\t\t\tmoduleObject.exports,\r\n \t\t\t\t\t\t\tmoduleObject,\r\n \t\t\t\t\t\t\tmoduleObject.exports,\r\n-\t\t\t\t\t\t\tcontext.__webpack_require__\r\n+\t\t\t\t\t\t\tcontext.__webpack_require__,\r\n+\t\t\t\t\t\t\tuniversalRequire,\r\n+\t\t\t\t\t\t\tmoduleObject\r\n \t\t\t\t\t\t);\r\n \t\t\t\t\t} catch (e) {\r\n \t\t\t\t\t\te.stack += printGeneratedCodeForStack(\r\n```\r\n\r\nThis fix would requires Node 12: `The 'module.createRequire' is not supported until Node.js 12.2.0 `\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.90.0\r\nNode.js version: 20.9.0\r\n\r\nIn Next.JS the problem exists also for typescript files even for ESM syntax:\r\nhttps:\/\/github.com\/jantimon\/reproduction-webpack-import-module-bug\/tree\/nextjs\r\n\r\n![ReferenceError: require is not defined\r\nGenerated code for external commonjs \"cowsay\"\r\n1 | module. exports = require(\"cowsay\");](https:\/\/github.com\/webpack\/webpack\/assets\/4113649\/76482471-c4ba-4ea6-b684-eec1d9773ff1)\r\n","comments":["Honestly there are no problems here, you set `\"type\": \"module\"`, it means **all** files are ESM, but `banner.js` is using `require` (you know that `require` does not exist in ESM), just rename `banner.js` to `banner.cjs` (or alternative solution is putting `package.json` with `type: \"commonjs\"` inside `src`). This is how Node.js and ESM logic works. I don't think we should change anything otherwise we won't follow and align ESM logic, also it will require introducing global variables and other things.","The problem is not about `banner.js` as it used webpack_require but rather the webpack generated code for the external import:\n\n```\nReferenceError: require is not defined\r\nGenerated code for external commonjs \"cowsay\"\r\n1 | module.exports = require(\"cowsay\");\n```\n\nthere is a nextjs branch in the reproduction repository - there banner.ts is using `import` but still the error says `require is undefined`:\n\nhttps:\/\/github.com\/jantimon\/reproduction-webpack-import-module-bug\/blob\/nextjs\/app\/banner.ts","In the case of nextjs you have `external commonjs \"cowsay\"`, but run code in ESM env (open `.next\/` and look at files), no problems with webpack here , ~~if you rename `next.config.mjs` to `next.config.cjs` all works fine~~\r\n\r\ntechnically this should work:\r\n\r\n```js\r\nconfig.externals.unshift({\r\n  \"cowsay\": \"node-commonjs cowsay\"\r\n})\r\n```\r\n\r\nIt's better to create this question in nextjs repo","renaming `next.config.mjs` to `next.config.cjs` works because `next.config.cjs` is ignored and therefore the loader will not be used\r\n\r\nI am not sure what I could see inside the next folder this is the `page.js`:\r\n\r\n```\r\nthrow Error('Module build failed (from .\/loader.cjs):\\nHookWebpackError: require is not defined\\n    at tryRunOrWebpackError (\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:28:311563)\\n    at __webpack_require_module__ (\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:28:131195)\\n    at __nested_webpack_require_153754__ (\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:28:130634)\\n    at Module.<anonymous> (javascript\/auto|\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/build\/webpack\/loaders\/next-swc-loader.js??ruleSet[1].rules[14].oneOf[6].use[0]!\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/app\/banner.ts|banner-loader:5:64)\\n    at \/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:28:915116\\n    at Hook.eval [as call] (eval at create (\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:13:28645), <anonymous>:7:1)\\n    at \/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:28:131228\\n    at tryRunOrWebpackError (\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:28:311517)\\n    at __webpack_require_module__ (\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:28:131195)\\n    at __nested_webpack_require_153754__ (\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:28:130634)\\n-- inner error --\\nReferenceError: require is not defined\\n    at Object.<anonymous> (external commonjs \"cowsay\":1:1)\\n    at \/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:28:915116\\n    at Hook.eval [as call] (eval at create (\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:13:28645), <anonymous>:7:1)\\n    at \/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:28:131228\\n    at tryRunOrWebpackError (\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:28:311517)\\n    at __webpack_require_module__ (\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:28:131195)\\n    at __nested_webpack_require_153754__ (\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:28:130634)\\n    at Module.<anonymous> (javascript\/auto|\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/build\/webpack\/loaders\/next-swc-loader.js??ruleSet[1].rules[14].oneOf[6].use[0]!\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/app\/banner.ts|banner-loader:5:64)\\n    at \/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:28:915116\\n    at Hook.eval [as call] (eval at create (\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/compiled\/webpack\/bundle5.js:13:28645), <anonymous>:7:1)\\n\\nGenerated code for external commonjs \"cowsay\"\\n1 | module.exports = require(\"cowsay\");\\n\\nGenerated code for javascript\/auto|\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/node_modules\/next\/dist\/build\/webpack\/loaders\/next-swc-loader.js??ruleSet[1].rules[14].oneOf[6].use[0]!\/Users\/jannicklas\/Desktop\/webpack-import-module-bug\/app\/banner.ts|banner-loader\r\n```\r\n\r\n","I mean you will see files in ESM format, please open an issue in the nextjs repo, webpack works fine here","Also looks like there is the nextjs bug, because using:\r\n```\r\nconfig.externals.unshift({\r\n  \"cowsay\": \"node-commonjs cowsay\"\r\n})\r\n```\r\n\r\nStill generates `module.exports = require(\"cowsay\");`, but should generate https:\/\/webpack.js.org\/configuration\/externals\/#externalstypenode-commonjs ","Thanks for your help and time @alexander-akait!\r\n\r\nI'll try to investigate further to find out how `module.exports = require(\"cowsay\");` gets generated"],"labels":["question"]},{"title":"Add null check to avoid `TypeError: Cannot read properties of undefined (reading 'call')`","body":"## Feature request\r\n\r\nNote that this is not a bug report, this is a UX improvement ticket. It won't actually solve the underlying issue but it might help webpack users understand it better.\r\n\r\n**What is the expected behavior?**\r\n\r\nOccasionally webpack fails to properly load modules and it fails on this line, causing:\r\n\r\n<img src=\"https:\/\/user-images.githubusercontent.com\/4714727\/168748348-cdbcd7af-9e60-4549-94d4-2823c149f90f.png\" width=\"651\">\r\n\r\n- https:\/\/github.com\/webpack\/webpack\/issues\/15582\r\n\r\nAnd others like it: https:\/\/github.com\/webpack\/webpack\/issues?q=is:issue+sort%253Aupdated-desc+%2522Cannot+read+properties+of+undefined%2522+in%253Atitle+is%253Aclosed++call\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nThe error is in webpack's own code and it's far removed from the cause. \r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nCatching the error and rewording it will help people find a solution.\r\n\r\nA better error would look like this, including as much information as possible regarding its context\r\n\r\n\"The module `sugar\/free.js` could not be loaded from '.\/wood-cake.js' etc\"\r\n\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nIf the fix looks like this yes:\r\n\r\n```diff\r\n+ if (typeof __webpack_modules__[moduleId] !== 'function') {\r\n+ \tthrow new Error(`The module xyz could not be loaded`)\r\n+ }\r\n  __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n```\r\n","comments":["Feel free to send a PR, but let's do it only for dev enviroment to avoid extra runtime","can you provide more detail relating to this issue? "],"labels":["enhancement"]},{"title":"force enable mangling to see effects","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":[" <a href=\"https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/18015\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-not-signed.svg\" alt=\"CLA Not Signed\" align=\"left\" height=\"28\" width=\"328\"><\/a><br\/><br \/><ul><li><a href='https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/18015\/#\/?version=2' target='_blank'>:x:<\/a> - login: @vjhebbar \/ name: Vijay Hebbar . The commit (1a96080090abf5c4bfdfb29b1bbc795b180d9733) is not authorized under a signed CLA. <a href='https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/18015\/#\/?version=2' target='_blank'>Please click here to be authorized<\/a>. For further assistance with EasyCLA, <a href='https:\/\/jira.linuxfoundation.org\/servicedesk\/customer\/portal\/4' target='_blank'>please submit a support request ticket<\/a>.<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"test: terser bailout test","body":"This is a test case for #17626\r\n\r\nRequested by @alexander-akait here: https:\/\/github.com\/webpack\/webpack\/issues\/17626#issuecomment-1906509649\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nTest case demonstrating an optimization issue\r\n\r\n**Did you add tests for your changes?**\r\n\r\nIt is only a test, which fails\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nThe test fails\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNot applied","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: head-main -->\n\nHi @laverdet.\n\nJust a little hint from a friendly bot about the best practice when submitting pull requests:\n\n> Don't submit pull request from your own `main` branch. It's recommended to create a feature branch for the PR.\n\n*You don't have to change it for this PR, just make sure to follow this hint the next time you submit a PR.*"],"labels":["PR: unreviewed"]},{"title":"Dynamic Imports that are marked external are hoisted","body":"Given this code:\r\n\r\n```\r\n\/\/ a.js\r\nconsole.log('a');\r\n\r\n\/\/ b.js\r\nconsole.log('b');\r\n\r\n\/\/ index.js\r\nasync function onButtonClick() {\r\n  await import('.\/a.js') \r\n  await import('.\/b.js')\r\n}\r\n```\r\n\r\nWhere we mark `b.js` as external, the bundler prints this:\r\n\r\n- dynamically imports \"b\" => console logs \"b\"\r\n- User clicks on button\r\n- dynamically imports \"a\" => console logs \"a\"\r\n\r\nIt should rather be:\r\n\r\n- User clicks on button\r\n- dynamically imports \"a\" => console logs \"a\"\r\n- dynamically imports \"b\" => console logs \"b\"\r\n\r\nWebpack hoists all external dynamic imports to the very top, not making it dynamic import. Which defeats its purpose.\r\n```\r\n{\r\n  mode: \"production\",\r\n  externalsType: 'module'\r\n  externals: {\r\n    \/b.js\/i,\r\n  },\r\n  output: {\r\n    chunkFormat: 'module',\r\n    chunkLoading: 'import',\r\n    module: true\r\n  }\r\n}\r\n```\r\n\r\nIt would be great if Webpack does not wrap native ESM imports with promises as well.\r\n\r\n**Other relevant information:**\r\n\"webpack\": \"5.89.0\",\r\n\"webpack-cli\": \"5.1.4\",\r\n\"webpack-dev-server\": \"4.15.1\",\r\n","comments":["I want to say it is not a bug, just change `externalsType: 'module'` to `externalsType: \"import\",`.\r\n\r\nI think we should add a new value for `externalsType` - `import-module`\/`module-import` (maybe the best name) and set it by default for ES modules, i.e. keep `import(...)` and `import ... from \"module\";` for externals how they were written","Also you can specify the type for an each item using https:\/\/webpack.js.org\/configuration\/externals\/#string","Thank you @alexander-akait , that actually solves the hoisting, but it brings that hoisting still back to the main bundle into a function. For example, `index.ts` dynamically imports `lazy.ts`, and `lazy.ts` dynamically imports an external named `external.ts`. The definition of `externals` is hoisted to the main bundle `index.js`, instead it should have been inside `external.js`\r\n\r\nI don't think we need another `externalsType`, why would someone who specifies `module` would want the imports hoisted for dynamic imports? That feels wrong. If they want it to be hoisted, then define them as `import \"foo\"` instead of `import(\"foo\")`. It feels more like a bug. By definition in webpack docs: ` webpack will output ECMAScript module syntax whenever possible`\r\n\r\nMy recommendation would be to keep `externalsType` as `module` and don't transform it, just keep it in its place. ","@mohamedmansour No, it is not a bug, I can't find a discussion about it, but there was already a question about it here, there are scenarios when developers want to hoist (preload big modules in the first run), some want to load dynamically (lazy evaluation), especial in diffucult applications (you can improve perf in some cases, for example some modules can take a lot of time on import but you used them in rare cases and you can't change vendor library code), that is why I said, we need the another value to allow to keep dynamic import as dynamic and static as static. The same logic works for other values of the `externalsType` option.","It is actually a more serious bug when we move to `import` it breaks the natural ESM sequence since our web app is strictly ESM (esnext, modules). So we cannot use it. \r\n\r\nWe need true browser platform ESM outputs. In the example below, `chromejs` is marked external. And we get the error:\r\n```\r\nUncaught TypeError: Cannot read properties of undefined (reading 'log')\r\n```\r\n\r\nFor example, `chrome.js` is marked external:\r\n\r\nindex.ts\r\n```\r\nimport '.\/chrome.js';\r\nimport 'app.js';\r\n```\r\n\r\nchrome.js\r\n```\r\nwindow.chrome = {\r\n  'log': () => console.log('logger');\r\n} \r\n```\r\n\r\napp.js\r\n```\r\nwindow.chrome.log();\r\n```\r\n\r\nTo your question, when developers want to hoist big modules, can't they just do the following which solves that scenario:\r\n\r\n```\r\nimport 'big-module.js';\r\n\r\nasync function OnClick() {\r\n  await import('small-module.js');\r\n}\r\n```\r\nSince `big-module` is marked as external, it will not bundle it.\r\n\r\nDoing some re-arrangement to assume all \"dynamic\" imports get hoisted to the top, breaks a core use case of dynamic imports.","As I said above we just need a new value -  `import-module`, we can't keep them as is when you have `import` or `module`, because it will be breaking change and can break a lot of configurations"],"labels":["enhancement"]},{"title":"`__non_webpack_require__` incompatible with `experiments.outputModule` + `devtool: 'eval-source-map'`","body":"# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using `experiments.outputModule = true` in combination with `__non_webpack_require__` and `devtool: 'eval-source-map'` (or any other of the `eval`-based devtools), then you get `Error: Cannot use 'import.meta' outside a module` when trying to run the bundled file. This is because `import.meta` is accessed in the code that is passed as a string to `eval`, which does not have access to `import.meta`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nFull minimal sample project: https:\/\/stackblitz.com\/edit\/github-qjzdxl?file=webpack.config.cjs&view=editor\r\n\r\nRun `npm install && npm run build && npm run start` to get the error.\r\n\r\nImportant files:\r\n\r\n- `package.json` which specifies `type: \"module\"`\r\n- `webpack.config.cjs`:\r\n  ```js\r\n\tconst path = require('path');\r\n\t\r\n\tmodule.exports = {\r\n\t  entry: '.\/src\/index.js',\r\n\t  devtool: 'eval-source-map',\r\n\t  output: {\r\n\t    filename: 'main.js',\r\n\t    path: path.resolve(__dirname, 'dist'),\r\n\t  },\r\n\t  experiments: {\r\n\t    outputModule: true,\r\n\t  },\r\n\t  optimization: {\r\n\t    minimize: false,\r\n\t  },\r\n\t};\r\n  ```\r\n- `src\/index.js`:\r\n  ```js\r\n\t__non_webpack_require__('path');\r\n\tconsole.log('it worked');\r\n  ```\r\n\r\n**What is the expected behavior?**\r\n\r\nWebpack should use a different mechanism to access `import.meta` when using an eval-based devtool that avoids accessing `import.meta` inside of strings passed to `eval`. Running the compiled file should print `it worked` to the console.\r\n\r\n**Other relevant information:**\r\nwebpack version: 5.89.0\r\nNode.js version: 18.18.0\r\nOperating System: Linux\r\nAdditional tools: None\r\n","comments":["Yeah, not sure how we can solve it, because we need `import.meta.url` for https:\/\/nodejs.org\/api\/module.html#modulecreaterequirefilename, I want to say it is a limitation, why do not use `createRequire` in code?","I am unable to use `createRequire`, because I'd need `import.meta.url` for it:\r\n\r\nInput:\r\n\r\n```\r\nconst path = require('path');\r\n\r\nmodule.exports = {\r\n  entry: '.\/src\/index.js',\r\n  devtool: 'eval-source-map',\r\n  target: 'node18',\r\n  externalsPresets: { node: true },\r\n  output: {\r\n    filename: 'main.js',\r\n    path: path.resolve(__dirname, 'dist'),\r\n  },\r\n  experiments: {\r\n    outputModule: true,\r\n  },\r\n  optimization: {\r\n    minimize: false,\r\n  },\r\n};\r\n```\r\n\r\n```\r\nimport * as module from 'node:module';\r\n\r\nconst customRequire = module.createRequire(import.meta.url);\r\ncustomRequire('something');\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n\/*\r\n * ATTENTION: An \"eval-source-map\" devtool has been used.\r\n * This devtool is neither made for production nor for readable output files.\r\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\r\n * If you are trying to read the output file, select a different devtool (https:\/\/webpack.js.org\/configuration\/devtool\/)\r\n * or disable the default devtool with \"devtool: false\".\r\n * If you are looking for production-ready output files, see mode: \"production\" (https:\/\/webpack.js.org\/configuration\/mode\/).\r\n *\/\r\nimport { createRequire as __WEBPACK_EXTERNAL_createRequire } from \"module\";\r\n\/******\/ var __webpack_modules__ = ({\r\n\r\n\/***\/ 590:\r\n\/***\/ (() => {\r\n\r\neval(\"\\n;\/\/ CONCATENATED MODULE: external \\\"node:module\\\"\\nconst external_node_module_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)(\\\"node:module\\\");\\n;\/\/ CONCATENATED MODULE: .\/src\/index.js\\n\\n\\nconst customRequire = external_node_module_namespaceObject.createRequire(\\\"file:\/\/\/home\/projects\/github-qjzdxl\/src\/index.js\\\");\\ncustomRequire('something');\\n\/\/# sourceURL=[module]\\n\/\/# sourceMappingURL=data:application\/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTkwLmpzIiwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxvQ0FBNEIsb0U7O0FDQUk7O0FBRXRDLHNCQUFzQixrREFBb0IsQ0FBQyxrREFBZTtBQUMxRCIsInNvdXJjZXMiOlsid2VicGFjazovL2dldHRpbmctc3RhcnRlZC11c2luZy1hLWNvbmZpZ3VyYXRpb24vZXh0ZXJuYWwgbm9kZS1jb21tb25qcyBcIm5vZGU6bW9kdWxlXCI\/YTRiNSIsIndlYnBhY2s6Ly9nZXR0aW5nLXN0YXJ0ZWQtdXNpbmctYS1jb25maWd1cmF0aW9uLy4vc3JjL2luZGV4LmpzPzg4YjciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IF9fV0VCUEFDS19FWFRFUk5BTF9jcmVhdGVSZXF1aXJlKGltcG9ydC5tZXRhLnVybCkoXCJub2RlOm1vZHVsZVwiKTsiLCJpbXBvcnQgKiBhcyBtb2R1bGUgZnJvbSAnbm9kZTptb2R1bGUnO1xuXG5jb25zdCBjdXN0b21SZXF1aXJlID0gbW9kdWxlLmNyZWF0ZVJlcXVpcmUoaW1wb3J0Lm1ldGEudXJsKTtcbmN1c3RvbVJlcXVpcmUoJ3NvbWV0aGluZycpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n\/\/# sourceURL=webpack-internal:\/\/\/590\\n\");\r\n\r\n\/***\/ })\r\n\r\n\/******\/ });\r\n\/************************************************************************\/\r\n\/******\/ \r\n\/******\/ \/\/ startup\r\n\/******\/ \/\/ Load entry module and return exports\r\n\/******\/ \/\/ This entry module can't be inlined because the eval-source-map devtool is used.\r\n\/******\/ var __webpack_exports__ = {};\r\n\/******\/ __webpack_modules__[590]();\r\n\/******\/ \r\n```\r\n\r\nAs you can see, this still leads to `import.meta.url` being used inside of `eval` and the actual `import.meta.url` being replaced with a hard-coded filepath.\r\n\r\n","I see..."],"labels":["question"]},{"title":"chore(deps-dev): bump rimraf from 3.0.2 to 5.0.5","body":"Bumps [rimraf](https:\/\/github.com\/isaacs\/rimraf) from 3.0.2 to 5.0.5.\n<details>\n<summary>Changelog<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/isaacs\/rimraf\/blob\/main\/CHANGELOG.md\">rimraf's changelog<\/a>.<\/em><\/p>\n<blockquote>\n<h1>5.0<\/h1>\n<ul>\n<li>No default export, only named exports<\/li>\n<\/ul>\n<h1>4.4<\/h1>\n<ul>\n<li>Provide Dirent or Stats object as second argument to filter<\/li>\n<\/ul>\n<h1>4.3<\/h1>\n<ul>\n<li>Return boolean indicating whether the path was fully removed<\/li>\n<li>Add filter option<\/li>\n<li>bin: add --verbose, -v to print files as they are deleted<\/li>\n<li>bin: add --no-verbose, -V to not print files as they are deleted<\/li>\n<li>bin: add -i --interactive to be prompted on each deletion<\/li>\n<li>bin: add -I --no-interactive to not be prompted on each\ndeletion<\/li>\n<li><strong>4.3.1<\/strong> Fixed inappropriately following symbolic links to\ndirectories<\/li>\n<\/ul>\n<h1>v4.2<\/h1>\n<ul>\n<li>Brought back <code>glob<\/code> support, using the new and improved glob v9<\/li>\n<\/ul>\n<h1>v4.1<\/h1>\n<ul>\n<li>Improved hybrid module with no need to look at the <code>.default<\/code>\ndangly bit. <code>.default<\/code> preserved as a reference to <code>rimraf<\/code>\nfor compatibility with anyone who came to rely on it in v4.0.<\/li>\n<li>Accept and ignore <code>-rf<\/code> and <code>-fr<\/code> arguments to the bin.<\/li>\n<\/ul>\n<h1>v4.0<\/h1>\n<ul>\n<li>Remove <code>glob<\/code> dependency entirely. This library now only\naccepts actual file and folder names to delete.<\/li>\n<li>Accept array of paths or single path.<\/li>\n<li>Windows performance and reliability improved.<\/li>\n<li>All strategies separated into explicitly exported methods.<\/li>\n<li>Drop support for Node.js below version 14<\/li>\n<li>rewrite in TypeScript<\/li>\n<li>ship CJS\/ESM hybrid module<\/li>\n<li>Error on unknown arguments to the bin. (Previously they were\nsilently ignored.)<\/li>\n<\/ul>\n<h1>v3.0<\/h1>\n<ul>\n<li>Add <code>--preserve-root<\/code> option to executable (default true)<\/li>\n<li>Drop support for Node.js below version 6<\/li>\n<\/ul>\n<h1>v2.7<\/h1>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Commits<\/summary>\n<ul>\n<li><a href=\"https:\/\/github.com\/isaacs\/rimraf\/commit\/3cc9222c646393713f671b807731f2d70f554850\"><code>3cc9222<\/code><\/a> 5.0.5<\/li>\n<li><a href=\"https:\/\/github.com\/isaacs\/rimraf\/commit\/562b9127be791fe866ddfb7a4d84f653a4ade94e\"><code>562b912<\/code><\/a> tshy 1.2.2, build with main<\/li>\n<li><a href=\"https:\/\/github.com\/isaacs\/rimraf\/commit\/ffc44d3a0b9bd6be386f08bed6ad559c0f0f75ee\"><code>ffc44d3<\/code><\/a> 5.0.4<\/li>\n<li><a href=\"https:\/\/github.com\/isaacs\/rimraf\/commit\/0a84af6eecb188312a75a6742353c4ea817c1594\"><code>0a84af6<\/code><\/a> bin: remove realpath, use testing env instead<\/li>\n<li><a href=\"https:\/\/github.com\/isaacs\/rimraf\/commit\/2e8e0d367593ee0aa2874b644e92db2253530ef5\"><code>2e8e0d3<\/code><\/a> GitHub Actions: Node.js v20<\/li>\n<li><a href=\"https:\/\/github.com\/isaacs\/rimraf\/commit\/15656aa0fae2b4899680624a5d962a66b19b4743\"><code>15656aa<\/code><\/a> 5.0.3<\/li>\n<li><a href=\"https:\/\/github.com\/isaacs\/rimraf\/commit\/14a14061414b498a699484e60862718fb99d7e3f\"><code>14a1406<\/code><\/a> detect main module properly<\/li>\n<li><a href=\"https:\/\/github.com\/isaacs\/rimraf\/commit\/6297992df2ca8ecf07d2b6b4863e2bff73e2f10c\"><code>6297992<\/code><\/a> 5.0.2<\/li>\n<li><a href=\"https:\/\/github.com\/isaacs\/rimraf\/commit\/92a4e2cb06b3f9792350a2e5f4ad4c138a858532\"><code>92a4e2c<\/code><\/a> move all types related to options to opt-arg.js<\/li>\n<li><a href=\"https:\/\/github.com\/isaacs\/rimraf\/commit\/5739c76796ae9ec17451021cd84078e1c8213386\"><code>5739c76<\/code><\/a> tap 18, build with tshy<\/li>\n<li>Additional commits viewable in <a href=\"https:\/\/github.com\/isaacs\/rimraf\/compare\/v3.0.2...v5.0.5\">compare view<\/a><\/li>\n<\/ul>\n<\/details>\n<br \/>\n\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=rimraf&package-manager=npm_and_yarn&previous-version=3.0.2&new-version=5.0.5)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n<\/details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","dependencies"]},{"title":"chore(deps): bump eslint-scope from 5.1.1 to 8.0.0","body":"Bumps [eslint-scope](https:\/\/github.com\/eslint\/eslint-scope) from 5.1.1 to 8.0.0.\n<details>\n<summary>Release notes<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/eslint\/eslint-scope\/releases\">eslint-scope's releases<\/a>.<\/em><\/p>\n<blockquote>\n<h2>v8.0.0<\/h2>\n<h2><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/compare\/v7.2.2...v8.0.0\">8.0.0<\/a> (2024-01-04)<\/h2>\n<h3>\u26a0 BREAKING CHANGES<\/h3>\n<ul>\n<li>use ESTree <code>directive<\/code> property when searching for <code>&quot;use strict&quot;<\/code> (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/118\">#118<\/a>)<\/li>\n<li>class <code>extends<\/code> is evaluated in the class scope (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/116\">#116<\/a>)<\/li>\n<li>Require Node.js ^18.18.0 || ^20.9.0 || &gt;=21.1.0 (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/115\">#115<\/a>)<\/li>\n<\/ul>\n<h3>Features<\/h3>\n<ul>\n<li>Require Node.js ^18.18.0 || ^20.9.0 || &gt;=21.1.0 (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/115\">#115<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/ed678573aca7b00815ecb3c5dc4eee913b53a162\">ed67857<\/a>)<\/li>\n<li>use ESTree <code>directive<\/code> property when searching for <code>&quot;use strict&quot;<\/code> (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/118\">#118<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/23fe81f5861ade17a2f17f9518fdde376dd2395f\">23fe81f<\/a>)<\/li>\n<\/ul>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>class <code>extends<\/code> is evaluated in the class scope (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/116\">#116<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/42ef7a995771f0700fc6af7eee03bab977f272c6\">42ef7a9<\/a>)<\/li>\n<\/ul>\n<h3>Documentation<\/h3>\n<ul>\n<li>Update README with analyze() options (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/111\">#111<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/2122fdb237cc0c115cd2473f383f741b1f055791\">2122fdb<\/a>), closes <a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/110\">#110<\/a><\/li>\n<\/ul>\n<h3>Chores<\/h3>\n<ul>\n<li>Remove add-to-triage (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/106\">#106<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/dc75851b92b47eb37ed617448c0291129db676e1\">dc75851<\/a>)<\/li>\n<li>run tests in Node.js 21 (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/109\">#109<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/957748e7fb741dd23f521af0c124ce6da0848997\">957748e<\/a>)<\/li>\n<li>standardize npm script names (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/105\">#105<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/115ded3cb6f768a37f0dcb17bb16e2299849e16f\">115ded3<\/a>)<\/li>\n<\/ul>\n<h2>v7.2.2<\/h2>\n<h2><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/compare\/v7.2.1...v7.2.2\">7.2.2<\/a> (2023-07-27)<\/h2>\n<h3>Chores<\/h3>\n<ul>\n<li>Add PRs to triage (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/104\">#104<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/a4dd8884726758ed513210a6b537105a07e8bf70\">a4dd888<\/a>)<\/li>\n<li>generate provenance statements when release (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/102\">#102<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/a27ce6bbf70d7ba5af763a4d1650bfd87eee8136\">a27ce6b<\/a>)<\/li>\n<\/ul>\n<h2>v7.2.1<\/h2>\n<h2><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/compare\/v7.2.0...v7.2.1\">7.2.1<\/a> (2023-05-31)<\/h2>\n<h3>Chores<\/h3>\n<ul>\n<li>run tests on Node.js v20 (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/97\">#97<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/675f7de78c312546441fa9b204734c26376710f7\">675f7de<\/a>)<\/li>\n<li>set up release-please (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/99\">#99<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/6bc2619fff2aa401fe43d3fda60e0c127d2d39a8\">6bc2619<\/a>)<\/li>\n<\/ul>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Changelog<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/eslint\/eslint-scope\/blob\/main\/CHANGELOG.md\">eslint-scope's changelog<\/a>.<\/em><\/p>\n<blockquote>\n<h2><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/compare\/v7.2.2...v8.0.0\">8.0.0<\/a> (2024-01-04)<\/h2>\n<h3>\u26a0 BREAKING CHANGES<\/h3>\n<ul>\n<li>use ESTree <code>directive<\/code> property when searching for <code>&quot;use strict&quot;<\/code> (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/118\">#118<\/a>)<\/li>\n<li>class <code>extends<\/code> is evaluated in the class scope (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/116\">#116<\/a>)<\/li>\n<li>Require Node.js ^18.18.0 || ^20.9.0 || &gt;=21.1.0 (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/115\">#115<\/a>)<\/li>\n<\/ul>\n<h3>Features<\/h3>\n<ul>\n<li>Require Node.js ^18.18.0 || ^20.9.0 || &gt;=21.1.0 (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/115\">#115<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/ed678573aca7b00815ecb3c5dc4eee913b53a162\">ed67857<\/a>)<\/li>\n<li>use ESTree <code>directive<\/code> property when searching for <code>&quot;use strict&quot;<\/code> (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/118\">#118<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/23fe81f5861ade17a2f17f9518fdde376dd2395f\">23fe81f<\/a>)<\/li>\n<\/ul>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li>class <code>extends<\/code> is evaluated in the class scope (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/116\">#116<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/42ef7a995771f0700fc6af7eee03bab977f272c6\">42ef7a9<\/a>)<\/li>\n<\/ul>\n<h3>Documentation<\/h3>\n<ul>\n<li>Update README with analyze() options (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/111\">#111<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/2122fdb237cc0c115cd2473f383f741b1f055791\">2122fdb<\/a>), closes <a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/110\">#110<\/a><\/li>\n<\/ul>\n<h3>Chores<\/h3>\n<ul>\n<li>Remove add-to-triage (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/106\">#106<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/dc75851b92b47eb37ed617448c0291129db676e1\">dc75851<\/a>)<\/li>\n<li>run tests in Node.js 21 (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/109\">#109<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/957748e7fb741dd23f521af0c124ce6da0848997\">957748e<\/a>)<\/li>\n<li>standardize npm script names (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/105\">#105<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/115ded3cb6f768a37f0dcb17bb16e2299849e16f\">115ded3<\/a>)<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/compare\/v7.2.1...v7.2.2\">7.2.2<\/a> (2023-07-27)<\/h2>\n<h3>Chores<\/h3>\n<ul>\n<li>Add PRs to triage (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/104\">#104<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/a4dd8884726758ed513210a6b537105a07e8bf70\">a4dd888<\/a>)<\/li>\n<li>generate provenance statements when release (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/102\">#102<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/a27ce6bbf70d7ba5af763a4d1650bfd87eee8136\">a27ce6b<\/a>)<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/compare\/v7.2.0...v7.2.1\">7.2.1<\/a> (2023-05-31)<\/h2>\n<h3>Chores<\/h3>\n<ul>\n<li>run tests on Node.js v20 (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/97\">#97<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/675f7de78c312546441fa9b204734c26376710f7\">675f7de<\/a>)<\/li>\n<li>set up release-please (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/99\">#99<\/a>) (<a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/6bc2619fff2aa401fe43d3fda60e0c127d2d39a8\">6bc2619<\/a>)<\/li>\n<\/ul>\n<p>v7.2.0 - April 13, 2023<\/p>\n<ul>\n<li><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/70c8db16962830f20e27765cd4d1fd0e29b93c08\"><code>70c8db1<\/code><\/a> feat: Add isGlobalReturn method on scopeManager. (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/96\">#96<\/a>) (Nicholas C. Zakas)<\/li>\n<\/ul>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Commits<\/summary>\n<ul>\n<li><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/f33ae985ada33f33f140fba9685405690936a93f\"><code>f33ae98<\/code><\/a> chore: release 8.0.0 (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/107\">#107<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/23fe81f5861ade17a2f17f9518fdde376dd2395f\"><code>23fe81f<\/code><\/a> feat!: use ESTree <code>directive<\/code> property when searching for <code>&quot;use strict&quot;<\/code> (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/118\">#118<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/42ef7a995771f0700fc6af7eee03bab977f272c6\"><code>42ef7a9<\/code><\/a> fix!: class <code>extends<\/code> is evaluated in the class scope (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/116\">#116<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/ed678573aca7b00815ecb3c5dc4eee913b53a162\"><code>ed67857<\/code><\/a> feat!: Require Node.js ^18.18.0 || ^20.9.0 || &gt;=21.1.0 (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/115\">#115<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/2122fdb237cc0c115cd2473f383f741b1f055791\"><code>2122fdb<\/code><\/a> docs: Update README with analyze() options (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/111\">#111<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/957748e7fb741dd23f521af0c124ce6da0848997\"><code>957748e<\/code><\/a> ci: run tests in Node.js 21 (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/109\">#109<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/115ded3cb6f768a37f0dcb17bb16e2299849e16f\"><code>115ded3<\/code><\/a> chore: standardize npm script names (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/105\">#105<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/dc75851b92b47eb37ed617448c0291129db676e1\"><code>dc75851<\/code><\/a> chore: Remove add-to-triage (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/106\">#106<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/8f7e63bb62c5057289c007cc5c510ca2e0f80178\"><code>8f7e63b<\/code><\/a> chore: release 7.2.2 (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/103\">#103<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/eslint\/eslint-scope\/commit\/a4dd8884726758ed513210a6b537105a07e8bf70\"><code>a4dd888<\/code><\/a> chore: Add PRs to triage (<a href=\"https:\/\/redirect.github.com\/eslint\/eslint-scope\/issues\/104\">#104<\/a>)<\/li>\n<li>Additional commits viewable in <a href=\"https:\/\/github.com\/eslint\/eslint-scope\/compare\/v5.1.1...v8.0.0\">compare view<\/a><\/li>\n<\/ul>\n<\/details>\n<br \/>\n\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=eslint-scope&package-manager=npm_and_yarn&previous-version=5.1.1&new-version=8.0.0)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n<\/details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","dependencies"]},{"title":"chore(deps): bump json-parse-even-better-errors from 2.3.1 to 3.0.1","body":"Bumps [json-parse-even-better-errors](https:\/\/github.com\/npm\/json-parse-even-better-errors) from 2.3.1 to 3.0.1.\n<details>\n<summary>Release notes<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/releases\">json-parse-even-better-errors's releases<\/a>.<\/em><\/p>\n<blockquote>\n<h2>v3.0.1<\/h2>\n<h2><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/compare\/v3.0.0...v3.0.1\">3.0.1<\/a> (2023-11-27)<\/h2>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/1e54107648d0b9a86f6c64aac538252726e501c4\"><code>1e54107<\/code><\/a> <a href=\"https:\/\/redirect.github.com\/npm\/json-parse-even-better-errors\/pull\/25\">#25<\/a> refactor for new error style in node 20 (<a href=\"https:\/\/github.com\/lukekarrys\"><code>@\u200blukekarrys<\/code><\/a>)<\/li>\n<\/ul>\n<h2>v3.0.0<\/h2>\n<h2><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/compare\/v2.3.1...v3.0.0\">3.0.0<\/a> (2022-10-10)<\/h2>\n<h3>\u26a0\ufe0f BREAKING CHANGES<\/h3>\n<ul>\n<li><code>json-parse-even-better-errors<\/code> now supports the following semver range for node: <code>^14.17.0 || ^16.13.0 || &gt;=18.0.0<\/code><\/li>\n<\/ul>\n<h3>Features<\/h3>\n<ul>\n<li><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/abf97b2502a1f57adfbf173f35ad7e7e6b598902\"><code>abf97b2<\/code><\/a> <code>@npmcli\/template-oss@4.4.4<\/code> (<a href=\"https:\/\/github.com\/lukekarrys\"><code>@\u200blukekarrys<\/code><\/a>)<\/li>\n<\/ul>\n<\/blockquote>\n<\/details>\n<details>\n<summary>Changelog<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/blob\/main\/CHANGELOG.md\">json-parse-even-better-errors's changelog<\/a>.<\/em><\/p>\n<blockquote>\n<h2><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/compare\/v3.0.0...v3.0.1\">3.0.1<\/a> (2023-11-27)<\/h2>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/1e54107648d0b9a86f6c64aac538252726e501c4\"><code>1e54107<\/code><\/a> <a href=\"https:\/\/redirect.github.com\/npm\/json-parse-even-better-errors\/pull\/25\">#25<\/a> refactor for new error style in node 20 (<a href=\"https:\/\/github.com\/lukekarrys\"><code>@\u200blukekarrys<\/code><\/a>)<\/li>\n<\/ul>\n<h2><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/compare\/v2.3.1...v3.0.0\">3.0.0<\/a> (2022-10-10)<\/h2>\n<h3>\u26a0\ufe0f BREAKING CHANGES<\/h3>\n<ul>\n<li><code>json-parse-even-better-errors<\/code> now supports the following semver range for node: <code>^14.17.0 || ^16.13.0 || &gt;=18.0.0<\/code><\/li>\n<\/ul>\n<h3>Features<\/h3>\n<ul>\n<li><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/abf97b2502a1f57adfbf173f35ad7e7e6b598902\"><code>abf97b2<\/code><\/a> <code>@npmcli\/template-oss@4.4.4<\/code> (<a href=\"https:\/\/github.com\/lukekarrys\"><code>@\u200blukekarrys<\/code><\/a>)<\/li>\n<\/ul>\n<h2>2.0.0<\/h2>\n<ul>\n<li>Add custom error classes<\/li>\n<\/ul>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><\/p>\n<h2><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/compare\/v1.0.1...v1.0.2\">1.0.2<\/a> (2018-03-30)<\/h2>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li><strong>messages:<\/strong> More friendly messages for non-string (<a href=\"https:\/\/redirect.github.com\/npm\/json-parse-even-better-errors\/issues\/1\">#1<\/a>) (<a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/a476d42\">a476d42<\/a>)<\/li>\n<\/ul>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><\/p>\n<h2><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/compare\/v1.0.0...v1.0.1\">1.0.1<\/a> (2017-08-16)<\/h2>\n<h3>Bug Fixes<\/h3>\n<ul>\n<li><strong>license:<\/strong> oops. Forgot to update license.md (<a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/efe2958\">efe2958<\/a>)<\/li>\n<\/ul>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><\/p>\n<h1>1.0.0 (2017-08-15)<\/h1>\n<h3>Features<\/h3>\n<ul>\n<li><strong>init:<\/strong> Initial Commit (<a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/562c977\">562c977<\/a>)<\/li>\n<\/ul>\n<h3>BREAKING CHANGES<\/h3>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Commits<\/summary>\n<ul>\n<li><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/cbdd5271b6596b9b2388e4ebe46a74eb5595eda3\"><code>cbdd527<\/code><\/a> chore: release 3.0.1 (<a href=\"https:\/\/redirect.github.com\/npm\/json-parse-even-better-errors\/issues\/45\">#45<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/0a13e9c255c2f840dd3a79f6afd7b038aee0d122\"><code>0a13e9c<\/code><\/a> chore: auto publish (<a href=\"https:\/\/redirect.github.com\/npm\/json-parse-even-better-errors\/issues\/46\">#46<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/875d80fc5427a8db16c6c802c00aa7ddac7927a6\"><code>875d80f<\/code><\/a> chore: rename default branch<\/li>\n<li><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/977736c7eedad7cb896da3f88660f3a2d7a3115f\"><code>977736c<\/code><\/a> chore: <code>@\u200bnpmcli\/template-oss<\/code><a href=\"https:\/\/github.com\/4\"><code>@\u200b4<\/code><\/a>.20.0<\/li>\n<li><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/1e54107648d0b9a86f6c64aac538252726e501c4\"><code>1e54107<\/code><\/a> fix: refactor for new error style in node 20<\/li>\n<li><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/bc6d77dd108be7a9550cb8a79ae3067d3019efe9\"><code>bc6d77d<\/code><\/a> chore: postinstall for dependabot template-oss PR<\/li>\n<li><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/c94f7242423c91568cf561747aac26e76991a783\"><code>c94f724<\/code><\/a> chore: bump <code>@\u200bnpmcli\/template-oss<\/code> from 4.18.1 to 4.19.0<\/li>\n<li><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/25d9898034a1641a5bd3aa34446838a7932ee954\"><code>25d9898<\/code><\/a> chore: postinstall for dependabot template-oss PR<\/li>\n<li><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/4f63505715cbd9e4219442e26cd3c0dd8be3f778\"><code>4f63505<\/code><\/a> chore: bump <code>@\u200bnpmcli\/template-oss<\/code> from 4.18.0 to 4.18.1<\/li>\n<li><a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/commit\/02128764b78f39843292582f77ea67999f4b1e5f\"><code>0212876<\/code><\/a> chore: postinstall for dependabot template-oss PR<\/li>\n<li>Additional commits viewable in <a href=\"https:\/\/github.com\/npm\/json-parse-even-better-errors\/compare\/v2.3.1...v3.0.1\">compare view<\/a><\/li>\n<\/ul>\n<\/details>\n<details>\n<summary>Maintainer changes<\/summary>\n<p>This version was pushed to npm by <a href=\"https:\/\/www.npmjs.com\/~npm-cli-ops\">npm-cli-ops<\/a>, a new releaser for json-parse-even-better-errors since your current version.<\/p>\n<\/details>\n<br \/>\n\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=json-parse-even-better-errors&package-manager=npm_and_yarn&previous-version=2.3.1&new-version=3.0.1)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n<\/details>\n\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","PR: conflict","dependencies"]},{"title":"Add faulty test case for css\/auto case","body":"Adds the faulty test case for the css\/auto cases.\r\nWe see that the test keyframe is not correctly transpiled, as in the snapshot you see that the snapshot itself got a different identifier, but the following css code that calls the variable didn't get changed.\r\n\r\n<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\ncopilot:summary\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\ncopilot:walkthrough\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed"]},{"title":"add allowNumericOnlyHash option for asset\/resource","body":"fixes https:\/\/github.com\/webpack\/webpack\/issues\/13628#issuecomment-1870026048\r\n\r\n#### What kind of change does this PR introduce?\r\nfeature\r\n\r\n#### Did you add tests for your changes?\r\nyes\r\n\r\n#### Does this PR introduce a breaking change?\r\nno\r\n\r\n#### What needs to be documented once your changes are merged?\r\n\r\nthe generator options for asset\/resource have a new `allowNumericOnlyHash` option. Defaults to false. Setting it to true will opt-out from prefixed numeric hash with character `a`\uff08bypass [nonNumericOnlyHash](https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/util\/nonNumericOnlyHash.js) when `emit` is false\uff09.\r\n\r\n\r\n#### Related problem\r\nusing `generator.emit: false` result in incorrect content hash of specific gif\r\n\r\nUsing a [gif](https:\/\/static.arkread.com\/ark\/pics\/author-annual\/2023\/no-data\/woman-1.63269829.gif) which hash using the hashing algorithm SHA-1 is: `63269829566710439434dae6582fa16f9345afbf`.\r\n\r\nIn React jsx\r\n```\r\nimport gif1 from '**\/gif-1.gif'\r\n\r\n...\r\n\r\n<img src={gif1} \/>\r\n```\r\n\r\nIn `webpack.config.js`\r\n```\r\n...\r\noutput: {\r\n  ...\r\n  hashFunction: 'sha1',\r\n  ...\r\n},\r\nmodule: {\r\n  ...\r\n  rules: [\r\n    ...\r\n   {\r\n      test: \/\\.(png|jpg|gif)(?:[?#].+)?$\/,\r\n      issuer: \/\\.(jsx?|tsx?)$\/,\r\n      type: 'asset\/resource',\r\n      generator: {\r\n        filename: '[name].[contenthash:8][ext]',\r\n        emit: false,\r\n      },\r\n    },\r\n    ...\r\n  ]\r\n  ...\r\n}\r\n```","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: makaria \/ name: maka  (8c3814bd4b8340e4d27b40c61ea40f7c7214315b, a0eca572ae0c5bbf5b5586ab15a8736757b0ca6d)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","Can you accept CLA? Also can you describe the problem deeply, because https:\/\/github.com\/webpack\/webpack\/issues\/13628#issue-928672598 we had a bug in `image-minimizer-webpack-plugin`, so I don't understand the problem","i will try confirm CLA later.\r\n\r\nas described in #13628 title, when module.rule.generator.emit is false, if output filename contains contenthash, it may result in different filename when emit is true.\r\nin [AssetGenerator](https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/asset\/AssetGenerator.js)\r\nfirst, emit affect getTypes\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/ea3d248c999acf01239a49c276b2fcd4f1cefe4d\/lib\/asset\/AssetGenerator.js#L402\r\nthen in generate\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/ea3d248c999acf01239a49c276b2fcd4f1cefe4d\/lib\/asset\/AssetGenerator.js#L225-L225\r\nbecause it's type is JS_TYPES, it's run into default branch\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/ea3d248c999acf01239a49c276b2fcd4f1cefe4d\/lib\/asset\/AssetGenerator.js#L240\r\nand then calculate content hash using nonNumericOnlyHash\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/ea3d248c999acf01239a49c276b2fcd4f1cefe4d\/lib\/asset\/AssetGenerator.js#L303\r\n\r\nand nonNumericOnlyHash will return hash with prefixed `a` if the first 20 characters of the hash is all number\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/ea3d248c999acf01239a49c276b2fcd4f1cefe4d\/lib\/util\/nonNumericOnlyHash.js#L18-L21\r\n\r\nit happen because the `sha1` hash of the problem gif start with 20 number characters, the solution can be:\r\n1. set output hashDigestLength to 40.  acceptable for now.  only when some file's hash contains 40 number character, then problem again\r\n2. set `emit` to true. acceptable too, but we need delete the emitted assets after each build\r\n3. change output hashFunction to something other than 'sha1', unacceptable for now, need purge all cdn files\r\n4. disable `nonNumericOnlyHash` with a new generator option, this is what this pr doing\r\n\r\nit's more relevant with nonNumericOnlyHash introduced in https:\/\/github.com\/webpack\/webpack\/pull\/15289\r\n","@makaria So you need the same filename when emit is true and false? Just want to undestand this deeply","> @makaria So you need the same filename when emit is true and false? Just want to undestand this deeply\r\n\r\nyes, to be more accurately, the content hash need to be exactly the same as full hash sliced.\r\n\r\nthe assets is uploaded by backend with hashed filename, frontend calculate file content hash and replace file url with uploaded url","@makaria can you fix CI?","sorry, but i've no idea about how to fix [Error: Deprecations while compiling](https:\/\/github.com\/webpack\/webpack\/pull\/17903\/checks?check_run_id=19999058503), can you help me fix it?\r\nbtw, do you think there is other solution for such case(content hash same as full hash sliced)?I don't quite understand the issue related with nonNumericOnlyHash, maybe this PR is not compatible with the [original issue](https:\/\/github.com\/webpack\/webpack\/issues\/15288)"],"labels":["PR: unreviewed"]},{"title":"Allows bundle-time definition of arbitrary path for chunk loading.","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\ncopilot:summary\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\ncopilot:walkthrough\r\n","comments":[" <a href=\"https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/17901\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-not-signed.svg\" alt=\"CLA Not Signed\" align=\"left\" height=\"28\" width=\"328\"><\/a><br\/><br \/><ul><li><a href='https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/17901\/#\/?version=2' target='_blank'>:x:<\/a> - login: @nl-brett-stime \/ name: Brett Stime . The commit (32d275ba62a7c14386e163e7a219f3168e901988) is not authorized under a signed CLA. <a href='https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/17901\/#\/?version=2' target='_blank'>Please click here to be authorized<\/a>. For further assistance with EasyCLA, <a href='https:\/\/jira.linuxfoundation.org\/servicedesk\/customer\/portal\/4' target='_blank'>please submit a support request ticket<\/a>.<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","Addresses https:\/\/github.com\/webpack\/webpack\/issues\/16447 ","<!-- identifier: head-main -->\n\nHi @nl-brett-stime.\n\nJust a little hint from a friendly bot about the best practice when submitting pull requests:\n\n> Don't submit pull request from your own `main` branch. It's recommended to create a feature branch for the PR.\n\n*You don't have to change it for this PR, just make sure to follow this hint the next time you submit a PR.*","> It is only for Node.js env, do you really want this?\r\n\r\nYeah. The use-case I'm most aware of is with AWS Lambda, which is Node-based. I think similar improvements should be possible on the browser side but my use-case doesn't lend itself to testing additional\/new functionality in those scenarios.","Anyway please add tests case and fix the CI, thank you"],"labels":["PR: unreviewed"]},{"title":"Aggregate errors or errors with cause are not logged","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the GitHub Discussions. -->\r\n<!-- https:\/\/github.com\/webpack\/webpack\/discussions -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nIf an [`AggregateError`](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/AggregateError) or `Error` with [`cause`](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Error\/cause) is thrown, Webpack intercepts and only logs the primary message.  For these cases, that message is often just an annotation on the real error, making it impossible to debug them from a Webpack plugin.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nThrow an instance of `AggregateError` or an instance of `Error` with a `cause` property from any plugin, and then just examine the console output.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n- For `AggregateError`, each of the `errors` should be logged\r\n- For `Error` with `cause`, the `cause` should be logged as well\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.89.0\r\nNode.js version: 20\r\nOperating System: Linux\r\nAdditional tools:\r\n","comments":["I seem to have the same problem.\r\n\r\nI tried the following in NestJS with `nest start --watch`:\r\n```\r\n    try {\r\n      await this.createEventStream()\r\n    } catch (error) {\r\n      throw new Error('creating stream', { cause: error })\r\n    }\r\n```\r\n\r\nIn the terminal I see that the cause is not logged:\r\n```\r\n...\/src\/subscriber\/subscriber.service.ts:44\r\n      throw new Error('creating stream', { cause: error })\r\n            ^\r\nError: creating stream\r\n    at SubscriberService.onModuleInit (...\/src\/subscriber\/subscriber.service.ts:44:13)\r\n    at async Promise.all (index 1)\r\n    at callModuleInitHook (...\/node_modules\/@nestjs\/core\/hooks\/on-module-init.hook.js:43:5)\r\n    at NestApplication.callInitHook (...\/node_modules\/@nestjs\/core\/nest-application-context.js:223:13)\r\n    at NestApplication.init (...\/node_modules\/@nestjs\/core\/nest-application.js:100:9)\r\n    at NestApplication.listen (...\/node_modules\/@nestjs\/core\/nest-application.js:169:33)\r\n    at bootstrap (...\/src\/main.ts:18:3)\r\n```\r\n\r\nWhen I run `nest build` and then `node dist\/main`, I have the expected stack trace:\r\n```\r\n...\/dist\/subscriber\/subscriber.service.js:37\r\n            throw new Error('creating stream', { cause: error });\r\n                  ^\r\n\r\nError: creating stream\r\n    at SubscriberService.onModuleInit (...\/dist\/subscriber\/subscriber.service.js:37:19)\r\n    at async Promise.all (index 1)\r\n    at async callModuleInitHook (...\/node_modules\/@nestjs\/core\/hooks\/on-module-init.hook.js:43:5)\r\n    at async NestApplication.callInitHook (...\/node_modules\/@nestjs\/core\/nest-application-context.js:223:13)\r\n    at async NestApplication.init (...\/node_modules\/@nestjs\/core\/nest-application.js:100:9)\r\n    at async NestApplication.listen (...\/node_modules\/@nestjs\/core\/nest-application.js:169:33)\r\n    at async bootstrap (...\/dist\/main.js:15:5) {\r\n  [cause]: NatsError: TIMEOUT\r\n      at NatsError.errorForCode (...\/node_modules\/nats\/lib\/nats-base-client\/core.js:140:16)\r\n      at timeout (...\/node_modules\/nats\/lib\/nats-base-client\/util.js:57:48)\r\n      at new RequestOne (...\/node_modules\/nats\/lib\/nats-base-client\/request.js:103:41)\r\n      at NatsConnectionImpl.request (...\/node_modules\/nats\/lib\/nats-base-client\/nats.js:349:23)\r\n      at JetStreamManagerImpl.<anonymous> (...\/node_modules\/nats\/lib\/jetstream\/jsbaseclient_api.js:73:37)\r\n      at Generator.next (<anonymous>)\r\n      at ...\/node_modules\/nats\/lib\/jetstream\/jsbaseclient_api.js:22:71\r\n      at new Promise (<anonymous>)\r\n      at __awaiter (...\/node_modules\/nats\/lib\/jetstream\/jsbaseclient_api.js:18:12)\r\n      at JetStreamManagerImpl._request (...\/node_modules\/nats\/lib\/jetstream\/jsbaseclient_api.js:66:16) {\r\n    code: 'TIMEOUT',\r\n    chainedError: undefined\r\n  }\r\n}\r\n```\r\n\r\nThe webpack version that is used by nest cli is 5.90.1.","Feel free to send a PR","In my case it seems it's not webpack, my error is logged somewhere else in Nest."],"labels":["enhancement","Send a PR"]},{"title":"feat: add nvmrc file","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16[[deprecated]](https:\/\/githubnext.com\/copilot-for-prs-sunset) Generated by Copilot at dd30832<\/samp>\n\nAdded `.nvmrc` file to specify Node.js version for nvm. This ensures a stable and consistent Node.js environment for webpack development.\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16[[deprecated]](https:\/\/githubnext.com\/copilot-for-prs-sunset) Generated by Copilot at dd30832<\/samp>\n\n*  Add `.nvmrc` file to specify the Node.js version to use with nvm ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17830\/files?diff=unified&w=0#diff-2c8effdf840690ccb88c7e21e56148978c6adb2c6926530c58ff0e47a9588b44R1))\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed"]},{"title":"Add tests for ModuleFilenameHelpers","body":"As per #16851, add tests for ModuleFilenameHelpers. This PR only adds tests for functions behaving as expected. Refer to #16851 for details on others\r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at b2262eb<\/samp>\n\nThis pull request improves the documentation and testing of the webpack project. It fixes some formatting and style issues in `_SETUP.md`, `CONTRIBUTING.md`, and `README.md`, and adds a reference to `SECURITY.md` in the contribution guidelines. It also adds unit tests for the `ModuleFilenameHelpers` module in `test\/ModuleFilenameHelpers.test.js`.\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at b2262eb<\/samp>\n\n*  Capitalize `webpack` in `README.md` and `CONTRIBUTING.md` for consistency and branding ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17784\/files?diff=unified&w=0#diff-eca12c0a30e25b4b46522ebf89465a03ba72a03f540796c979137931d8f92055L53-R48), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17784\/files?diff=unified&w=0#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5L80-R80), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17784\/files?diff=unified&w=0#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5L105-R103), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17784\/files?diff=unified&w=0#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5L136-R133), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17784\/files?diff=unified&w=0#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5L250-R254))\n*  Fix broken link to `concepts` page in `README.md` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17784\/files?diff=unified&w=0#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5L304-R288))\n*  Add `Reporting Security Issues` section from `SECURITY.md` to `CONTRIBUTING.md` to consolidate information for contributors ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17784\/files?diff=unified&w=0#diff-f6ed156e4bf5c791680662464b94ea5d753f219ee816b385f67870e2c0d7d4c7L3-R5))\n*  Remove duplicate and extra line breaks in `CONTRIBUTING.md` for better readability ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17784\/files?diff=unified&w=0#diff-eca12c0a30e25b4b46522ebf89465a03ba72a03f540796c979137931d8f92055L3-R7), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17784\/files?diff=unified&w=0#diff-eca12c0a30e25b4b46522ebf89465a03ba72a03f540796c979137931d8f92055L38-R31))\n*  Add missing code block for `yarn lint` command and remove duplicate code block in `_SETUP.md` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17784\/files?diff=unified&w=0#diff-56780eff3553b683abcc58b718e3397e1c164545434e438ebfbbe39a66fee38fR68-R71), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17784\/files?diff=unified&w=0#diff-56780eff3553b683abcc58b718e3397e1c164545434e438ebfbbe39a66fee38fL75-L78))\n*  Add unit tests for `ModuleFilenameHelpers` module in `test\/ModuleFilenameHelpers.test.js` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17784\/files?diff=unified&w=0#diff-9f81dcf50343f58f72e1a227e7da1290f0f423d23baf46269b46918a78c79689L1-R145))\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","Could you please review this ?","@mayankkamboj47 Can you fix CI?"],"labels":["PR: unreviewed"]},{"title":"fix: using chunkGraph from hook context","body":"Use chunkGraph from hook context instead of compilation\r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at cc6d740<\/samp>\n\nThis pull request refactors and improves the runtime module system for webpack. It adds support for new features such as container references, CSS modules, WebAssembly compilation, and chunk prefetching and preloading. It also updates the plugin API to use the new `chunkGraph` argument and the `RuntimeRequirementsContext` type. It modifies various plugins and hooks to use the new runtime modules and runtime requirement hooks. It removes some redundant or deprecated code and adds type annotations for better type checking and documentation.\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at cc6d740<\/samp>\n\n*  Refactor `compilation` hooks to use `chunkGraph` as an argument instead of accessing the deprecated `compilation.chunkGraph` property ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-0b8525fd4794c93b31dd9e959e7e664fc6a79c68091046764063e3eace891764L166-R170), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-0b8525fd4794c93b31dd9e959e7e664fc6a79c68091046764063e3eace891764L176-R182), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-0d3f79e9df5c6a7bb0d571e576adba0ba29f0cdcc8d2f2c0335f810ada6c37f8L129-R129), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-5ed91987d44d425c1ee78a765f3851da329b41a9c2b9d9b5379ac4e3f1209030L117-R131), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-46cdc2408ceac339f6b00fee887c067946010d6451160b038b35dfbc2126e78bL161-R165), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-46cdc2408ceac339f6b00fee887c067946010d6451160b038b35dfbc2126e78bL170-R175), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-eeceb01bb42e9f84c137db6e29d94ee3559f93933375f2677dc0dec8d29ac6f6L49-R54), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-c22f77f8ec671e00d7d4e997e1d17ad7524c295d65acc6994be3b83287999122L68-R76), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-64a44d3330656769cf90fe1216471a86ff8e5e242a6b52e7fdf072bb2c584b4cL92-R114), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-a662d3c68335d196f97f0c88c5c0f84719b7a3b069f8581fab0419b837da71e7L84-R85), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-cdcce88f2f19b714e7763e61ac874b2fcf63ee41649a9179db8b388c0ee9b688L68-R71), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-cdcce88f2f19b714e7763e61ac874b2fcf63ee41649a9179db8b388c0ee9b688L81-R85), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-1f6c9dd2a670408f845477b54bae6d20edd21b5304a7bfc8313eb904f844e4b3L74-R88), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L150-R154), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L159-R164), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L168-R174), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L177-R184), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L186-R194), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L195-R210), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L261-R279), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L288-R307), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L312-R332), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L333-R354), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L353-R375), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L371-R404), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L391-R432), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L412-R449), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L436-R481), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L451-R498), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-95295794507032fb0378671d31c45acbdc88b14a3dbf0ec52301226c47e3a02fL47-R48), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-0e5a4b4a7d04870bb1427e804465eb6c422de2536c9cd7f27f0af7b7bbf12c6eL61-R62))\n*  Add `context` argument to `additionalTreeRuntimeRequirements` hook to access `chunkGraph` and other properties ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-a51a7d4ed3bdf6b771fd5d055c9a8a2d71ebc1c65f3b4968e8af32dcd36f24e2L752-R752), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L230-R259), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L459-R510), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-48300ec9215ae0f99dcfc8a85080f12e464793b6e855f7e0687f74aad4fc7c1bL328-R331), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-c22f77f8ec671e00d7d4e997e1d17ad7524c295d65acc6994be3b83287999122L42-R45), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-72fc90cd1227eb7a5e625ed217abf5afe2b965668c785b4f3fab0cc58bf49984L62-R65), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-cdcce88f2f19b714e7763e61ac874b2fcf63ee41649a9179db8b388c0ee9b688L40-R41), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-545c55d1798dd44e1dc934ab0180669a92c2672369c08fcac5cb5a217edf9a8aL305-R305), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-048ba0f5a4029383ab14c69739f5777aaec9a7074805d0b5d49b1af17d1bafe0L41-R44))\n*  Add various runtime modules to handle different runtime requirements, such as `hot module replacement`, `chunk loading`, `wasm compilation`, `shared modules`, etc. ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-a51a7d4ed3bdf6b771fd5d055c9a8a2d71ebc1c65f3b4968e8af32dcd36f24e2L759-R760), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L213-R222), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L224-R233), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L254-R272), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L282-R301), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L306-R326), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L327-R348), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L347-R369), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L360-R383), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L385-R413), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L406-R439), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L421-R469), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-8ca568ebcc2831549e2d258ee4a9aeeb1b84ca32394824ac94c3de622c1f6606L444-R492), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-0d3f79e9df5c6a7bb0d571e576adba0ba29f0cdcc8d2f2c0335f810ada6c37f8L135-R139), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-48300ec9215ae0f99dcfc8a85080f12e464793b6e855f7e0687f74aad4fc7c1bL341-R347), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-c22f77f8ec671e00d7d4e997e1d17ad7524c295d65acc6994be3b83287999122L51-R54), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-72fc90cd1227eb7a5e625ed217abf5afe2b965668c785b4f3fab0cc58bf49984L71-R74), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-a662d3c68335d196f97f0c88c5c0f84719b7a3b069f8581fab0419b837da71e7L103-R103), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-cdcce88f2f19b714e7763e61ac874b2fcf63ee41649a9179db8b388c0ee9b688L54-R56), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-cdcce88f2f19b714e7763e61ac874b2fcf63ee41649a9179db8b388c0ee9b688L61-R64), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-cdcce88f2f19b714e7763e61ac874b2fcf63ee41649a9179db8b388c0ee9b688L75-R79), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-cdcce88f2f19b714e7763e61ac874b2fcf63ee41649a9179db8b388c0ee9b688L88-R93), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-1f6c9dd2a670408f845477b54bae6d20edd21b5304a7bfc8313eb904f844e4b3L67-R68), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-545c55d1798dd44e1dc934ab0180669a92c2672369c08fcac5cb5a217edf9a8aL314-R315), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-95295794507032fb0378671d31c45acbdc88b14a3dbf0ec52301226c47e3a02fL64-R64), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-0e5a4b4a7d04870bb1427e804465eb6c422de2536c9cd7f27f0af7b7bbf12c6eL81-R81), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-048ba0f5a4029383ab14c69739f5777aaec9a7074805d0b5d49b1af17d1bafe0L50-R53))\n*  Import `RuntimeRequirementsContext` type definition from `lib\/APIPlugin.js` in files that use it ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-1ede558d550bf27773fff6d4f110076dc6e187ddccbea0645a66c67742b689dbL18), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-48300ec9215ae0f99dcfc8a85080f12e464793b6e855f7e0687f74aad4fc7c1bR42), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-c5d4f993897e06b2577f256473c37db962d87ba30de1d3d2c631d6eb68d7c95cL36-R38), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-c22f77f8ec671e00d7d4e997e1d17ad7524c295d65acc6994be3b83287999122R13), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-72fc90cd1227eb7a5e625ed217abf5afe2b965668c785b4f3fab0cc58bf49984R12), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17778\/files?diff=unified&w=0#diff-048ba0f5a4029383ab14c69739f5777aaec9a7074805d0b5d49b1af17d1bafe0R12))\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: JSerFeng \/ name: Fy  (cc6d740b22d001c65bd021b3038753979dd71c3c)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","There is a replacement of compilation.chunkGraph in compilation.executeModule, [code is here](https:\/\/github.com\/webpack\/webpack\/blob\/87660921808566ef3b8796f8df61bd79fc026108\/lib\/Compilation.js#L4906-L4915), I assume it's because plugins might use the chunkGraph from compilation, causing some logic can't be applied to the chunkGraph that compilation.executeModule created, so here is a replacement for this.\r\n\r\nIt's not actually necessary tho, just found that there are many plugins do that not use chunkGraph from hook parameters.\r\n\r\nIt's fine to ignore this PR ^, If I think it wrong, please let me know"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"Fix formatting and grammar","body":"- Remove newlines from sentences, and rely only on text editors' text wrap so\r\nthat \r\nawkward line breaks like this one can be avoided\r\n- Fix minor grammar\r\n- Put command before explanation\r\n\r\n<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 1b9bdbc<\/samp>\n\nThis pull request enhances the documentation of webpack by reorganizing and updating some of the files in the root directory. It fixes some minor issues in `_SETUP.md` and `README.md`, and moves some content from `README.md` and `SECURITY.md` to `CONTRIBUTING.md` to make it more accessible and comprehensive for potential contributors.\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 1b9bdbc<\/samp>\n\n*  Add and remove `yarn lint` command in `_SETUP.md` to run all linters ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17768\/files?diff=unified&w=0#diff-56780eff3553b683abcc58b718e3397e1c164545434e438ebfbbe39a66fee38fR68-R71), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17768\/files?diff=unified&w=0#diff-56780eff3553b683abcc58b718e3397e1c164545434e438ebfbbe39a66fee38fL75-L78))\n*  Copy several sections from `README.md` to `CONTRIBUTING.md` to provide more information and context for contributors ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17768\/files?diff=unified&w=0#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5L80-R80), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17768\/files?diff=unified&w=0#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5L105-R103), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17768\/files?diff=unified&w=0#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5L136-R133), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17768\/files?diff=unified&w=0#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5L250-R254))\n*  Fix broken link in `Optimizations` section of `CONTRIBUTING.md` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17768\/files?diff=unified&w=0#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5L304-R288))\n*  Copy `Reporting Security Issues` section from `SECURITY.md` to `CONTRIBUTING.md` to inform contributors about security vulnerabilities ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17768\/files?diff=unified&w=0#diff-f6ed156e4bf5c791680662464b94ea5d753f219ee816b385f67870e2c0d7d4c7L3-R5))\n*  Remove extra line breaks and capitalize `webpack` in `CONTRIBUTING.md` to improve readability and consistency ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17768\/files?diff=unified&w=0#diff-eca12c0a30e25b4b46522ebf89465a03ba72a03f540796c979137931d8f92055L3-R7), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17768\/files?diff=unified&w=0#diff-eca12c0a30e25b4b46522ebf89465a03ba72a03f540796c979137931d8f92055L38-R31), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17768\/files?diff=unified&w=0#diff-eca12c0a30e25b4b46522ebf89465a03ba72a03f540796c979137931d8f92055L53-R48))\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: head-main -->\n\nHi @mayankkamboj47.\n\nJust a little hint from a friendly bot about the best practice when submitting pull requests:\n\n> Don't submit pull request from your own `main` branch. It's recommended to create a feature branch for the PR.\n\n*You don't have to change it for this PR, just make sure to follow this hint the next time you submit a PR.*"],"labels":["PR: unreviewed"]},{"title":"Webpack build's [contenthash] diverges from build to build","body":"# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nI am noticing that the contenthash on my production builds is not consistent from build to build. A few observations:\r\n\r\n1. Sometimes contenthash is consistent for 2 builds, and other times it is consistent for 5, and so on and so forth. Typically the first two builds are inconsistent with one another, and subsequent builds are consistent, but this is not always the case.\r\n2. The offending files typically appear in a chunk tree that is imported by workers, i.e. `new Worker(new URL('...', import.meta.url));`.\r\n3. I attempted to reproduce the issue without thread-loader, babel-loader, and `mode=\"production\"`, but I was unable to do so. I was also unable to reproduce the issue with a significantly less complex source tree. That is not to say that the issue cannot be produced under these conditions, only that 30 rebuilds did not reproduce the issue for me.\r\n4. The offending files contain (or import a tree which contains) minified variable names which differ. This appears to be the only difference.\r\n\r\nSince the build is not deterministic, my production builds are not reproducible, and the contenthash breaks caching.\r\n\r\nAdditionally, in this case it appears that the output is functionally identical, but in another case my webpack configuration had a bug (introduced by me) that created functional differences in the build output. Because an inconsistent contenthash is often produced, the the bug I introduced was harder to detect, as I could not simply diff filenames as a sanity check.\r\n\r\nI have created a repository with a minimal reproduction - https:\/\/github.com\/abirmingham\/repro-webpack-issue-17757. In my experience the issue is typically reproduced within 5 builds, but sometimes more are required.\r\n\r\nHere is an example diff of an offending file:\r\n<img width=\"487\" alt=\"image\" src=\"https:\/\/github.com\/webpack\/webpack\/assets\/1661498\/913c86c5-aee1-4818-92fc-3ac2dd52373a\">\r\n\r\n**What is the expected behavior?**\r\n\r\nIf no build inputs have changed, all filenames and file content should be identical from build to build.\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.89.0\r\nNode.js version: 18.18.2\r\nOperating System: Ubuntu 20.04.6 LTS running docker \"node:18\" image\r\nAdditional tools: None\r\n","comments":["I've been able to replicate this issue (using `buildah` + `podman` in place of `docker`) after nine builds of the repro application code.\r\n\r\nDo you know whether this is a regression @abirmingham?  (I'm planning to test v5.88.2 - the version I'm using for a work project at the moment - next to see whether the same behaviour occurs)","Yep, this was also replicable using v5.88.2 after three iterations - I haven't tested any earlier versions of `webpack`.","Hey James, thanks for taking a peek at this. I haven't tested any other versions with the minimal repro, but in my main project I am using `webpack@5.70.0` and am seeing issues. I hesitate to confirm that it is the same issue, however, as my main project is quite a bit more complex and the nondeterminism may be coming from other places. All of that is to say that I don't know if it is a regression or not :)","You're welcome.  Issue #17009 sounds potentially related.\r\n\r\nI notice that the [list of entrypoints generated in the webpack config](https:\/\/github.com\/abirmingham\/repro-webpack-issue-17757\/blob\/28d3e3a5783d37e5543a2d28a151e67d43caea59\/webpack.config.js#L13-L16) seems deterministic (generated from numbers 0..6) - is there a reason to use that many input files?  The contents of each code file seem to be the same.","@jayaddison good question! While attempting to reproduce the issue, I noticed that projects under a certain size took a lot longer to reproduce the problem, or were unable to reproduce the problem at all. I wanted a short feedback loop, so I continued adding entrypoints until the problem was reliably reproduced in under 10 iterations. The same is true of the TS files in the `autogenerated` folder.","Could you try removing more of the webpack config, JavaScript code in the modules, etc to continue to narrow this down without affecting the repeatability of it?  (I will try to do the same soon too, but not sure when I'll get around to it)\r\n\r\nIt'll probably be a slightly annoying process, but I think we should be able to continue to remove items until -- ideally -- there's a removal where we cross some threshold and the problem stops occurring.\r\n\r\nThen there'll be the equally tricky part of debugging from there to determine why whatever small difference that is causes the problem in the first place.","Note: I briefly wondered whether [`realContentHash`](https:\/\/webpack.js.org\/configuration\/optimization\/#optimizationrealcontenthash) could be relevant here; the documentation does mention that when it is set to `false`, content hashes may not be deterministic.  However: the [default for that setting is to match `production` flag](https:\/\/github.com\/webpack\/webpack\/blob\/87660921808566ef3b8796f8df61bd79fc026108\/lib\/config\/defaults.js#L1332) -- and that's set [`true` in the repro `webpack.config.js`](https:\/\/github.com\/abirmingham\/repro-webpack-issue-17757\/blob\/28d3e3a5783d37e5543a2d28a151e67d43caea59\/webpack.config.js#L19).","A few more observations:\r\n\r\n* Removing the [`threadloader`](https:\/\/github.com\/abirmingham\/repro-webpack-issue-17757\/blob\/28d3e3a5783d37e5543a2d28a151e67d43caea59\/webpack.config.js#L46) from the repro configuration seems to produce different results, something that's probably not ideal.\r\n* From inspection of one of the differing-files using `cmp`, the difference tends to be in an object whose properties are integers and whose values look like hashes near the very end of the output `.js` files, just after a special-case `==='monaco'` check (maybe not relevant for the investigation, but a useful tracer: this may be due to some [`webpackChunkName` directives](https:\/\/github.com\/abirmingham\/repro-webpack-issue-17757\/blob\/28d3e3a5783d37e5543a2d28a151e67d43caea59\/src\/entrypoint_2.js#L27)).  Usually only one of the property values differs.\r\n* It's possible to move most of the `repro.sh` contents into the `Dockerfile`, as long as the `webpack.config.js` and `src` directories are also `COPY`'d into the layers during build.  This is something I'm going to reduce size (albeit not really time, yet) of the iteration loop.","I've confirmed that this variance is replicable as far back as `webpack=5.56.1`.  It may be replicable in earlier versions too, but that's the least-recent version I've tested so far (I was squinting at 3fa83c6c77de88b9874ecd06322ada787b90ac25 - but reproducing the issue on v5.56.1 predates that change, so I think it is unrelated).\r\n\r\nSo far it does seem that the [`thread-loader`](https:\/\/github.com\/webpack-contrib\/thread-loader) component makes this issue more repeatable.  Whether it is definitively the cause, however, I cannot yet confirm\/reject.","Hey @jayaddison - I was able to spend more time on this, and attempted the following changes:\r\n\r\n#### 1\r\n- Changes:\r\n-- Dropped thread-loader to 2 workers, 2 workerParallelJobs\r\n-- Dropped entrypoints from `Array(7)` to `Array(3)`\r\n-- Load CPU: `for i in 1 2 3 4; do while : ; do : ; done & done`\r\n- Results:\r\n-- Reproduced on second build\r\n\r\n#### 2\r\n- Changes:\r\n-- Dropped entrypoints from `Array(3)` to `Array(1)`\r\n- Results:\r\n-- Reproduced on 8th build\r\n#### 3\r\n- Changes:\r\n-- Removed all extra entrypoints\r\n- Results:\r\n-- 13 builds failed to reproduce\r\n\r\n#### 4\r\n- Changes:\r\n-- Reverted change # 3\r\n-- Removed all references to `autogenerated` directory\r\n- Results:\r\n-- 50 builds failed to reproduce\r\n\r\n#### 5\r\n- Changes:\r\n-- Reverted change #4\r\n-- Removed half of autogenerated files\r\n- Results:\r\n-- Reproduced on 21st build\r\n\r\nHere is the commit containing my stopping point, which can be seen in the repro repository on branch `10_23_2023_minimal_build`:\r\n```\r\ncommit 21c561c1483963a1069943e5b351190faa990d89 (HEAD -> main, abirmingham-github\/10_23_2023_minimal_build)\r\nAuthor: Alex Birmingham <abirmingham@extrahop.com>\r\nDate:   Mon Oct 23 15:39:51 2023 -0700\r\n\r\n    Attempt More Minimal Reproduction\r\n    \r\n    - Delete half of autogenerated files\r\n    - Reduce entrypoints from 8 to 2\r\n    - Reduce thread-loader workers from 4 to 2\r\n    - Reduce thread-loader workerParallelJobs from 3 to \r\n```\r\n\r\nNote that in the final iteration the bug was only reproduced after the 21st build, and in a prior iteration I stopped running builds at 13 builds. So it is certainly possible that the bug would have been reproduced if builds had continued.\r\n\r\nThis is a tricky one. It's unclear to me whether the extra complexity is necessary or is simply helpful in reproducing the issue in a less prohibitive amount of time.\r\n\r\nThank you for your time!","Thanks - yep, more clues.  I do have a feeling that the `autogenerated` content -- and potentially the stack\/module depth of it, the way that the modules are connected -- could be relevant.  And the entrypoints seem relevant, as you've confirmed.  At the moment I do think threading could be a relevant interaction too.  Perhaps it requires all three of those in combination, but we'll need more info to prove or disprove that."],"labels":["bug"]},{"title":"satisfy version miscomputed tilde ranges","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the GitHub Discussions. -->\r\n<!-- https:\/\/github.com\/webpack\/webpack\/discussions -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nThe webpack inner semver function computed result is different from the npm package semver , and the webpack inner function result seems not right.\r\n\r\n**What is the current behavior?**\r\n\r\nRunning the function satisfy from [semver]( https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/util\/semver.js)  and [parseRange](https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/util\/semver.js#L91) results in a possible bug. Specifically:\r\n\r\n```js\r\nsatisfy(parseRange('~1'), '1.2.3') === false\r\n```\r\n\r\n**What is the expected behavior?**\r\n```js\r\nsatisfy(parseRange('~1'), '1.2.3') === true\r\n```\r\n\r\n**Other relevant information:**\r\nthe result is not the same with [semver](https:\/\/www.npmjs.com\/package\/semver)\r\n```js\r\nconst semver = require('semver');\r\nsemver.satisfies('1.2.3','~1') === true\r\n```","comments":["I added a reproduction repository\r\n\r\nhttps:\/\/github.com\/2heal1\/webpack-demo\r\n\r\nRunning test by the follow steps: \r\n\r\n1. instal deps\r\n\r\n```js\r\nnpm i\r\n```\r\n\r\n2. run test\r\n\r\n```js\r\nnpm run test-special-tilde\r\n```\r\n\r\n```js\r\nnpm run test-special-x-range\r\n```\r\n","@2heal1 Sounds like a bug, do you want to send a PR?","@alexander-akait hey is the issue still open? can i try it ?\r\n","Yes, feel free to send a PR"],"labels":["Send a PR"]},{"title":"After version 5.78.0, module rules don't seem to apply to resource assets added by a plugin","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the GitHub Discussions. -->\r\n<!-- https:\/\/github.com\/webpack\/webpack\/discussions -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nAs of version `5.77.0`, my Webpack plugin was working, but after upgrading to Webpack `5.78.0`, with the same Webpack config, it suddenly broke, and Webpack builds produce a loader error like:\r\n\r\n```\r\n[webpack-cli] Error: Child compilation failed:\r\nModule parse failed: Unexpected token (1:0)\r\nFile was processed with these loaders:\r\n * ..\/..\/..\/src\/loader\/browser-config.js\r\nYou may need an additional loader to handle the result of these loaders.\r\n> <?xml version=\"1.0\" encoding=\"utf-8\"?><browserconfig><msapplication><tile><TileColor>#D5415C<\/TileColor><square70x70logo src=\"windows-tile-140x140.4ea90b233f275740f1be.png\"\/><square150x150logo src=\"windows-tile-300x300.583170e9c7187396bd19.png\"\/><square310x310logo src=\"windows-tile-620x620.6901e2a2aa9eec520db4.png\"\/><wide310x150logo src=\"windows-tile-620x300.35ee4cc5a0623f8ddb18.png\"\/><\/tile><\/msapplication><\/browserconfig>:\r\nSyntaxError: Unexpected token (1:0)\r\nModule parse failed: Unexpected token (1:19)\r\nFile was processed with these loaders:\r\n * ..\/..\/..\/src\/loader\/web-manifest.js\r\nYou may need an additional loader to handle the result of these loaders.\r\n> {\"background_color\":\"#D5415C\",\"description\":\"A build system for web application icon and image assets\",\"display\":\"standalone\",\"icons\":[{\"sizes\":\"1024x1024\",\"src\":\"web-app-icon-masked-1024x1024.977f0131906d6dbb3ed4.png\",\"type\":\"image\/png\"},{\"sizes\":\"512x512\",\"src\":\"web-app-icon-masked-512x512.c5c0291479056f764d01.png\",\"type\":\"image\/png\"},{\"sizes\":\"192x192\",\"src\":\"web-app-icon-masked-192x192.afde9fac71fdd382c9b8.png\",\"type\":\"image\/png\"},{\"purpose\":\"maskable\",\"sizes\":\"1024x1024\",\"src\":\"web-app-icon-maskable-1024x1024.21684f043d33aac811f6.png\",\"type\":\"image\/png\"},{\"purpose\":\"maskable\",\"sizes\":\"512x512\",\"src\":\"web-app-icon-maskable-512x512.fbb222c8ca0221ced8a6.png\",\"type\":\"image\/png\"},{\"purpose\":\"maskable\",\"sizes\":\"192x192\",\"src\":\"web-app-icon-maskable-192x192.d53570717a45888030c6.png\",\"type\":\"image\/png\"}],\"lang\":\"en-US\",\"name\":\"Iconduit\",\"related_applications\":[{\"id\":\"915056765\",\"platform\":\"itunes\",\"url\":\"https:\/\/itunes.apple.com\/app\/id915056765\"},{\"id\":\"com.google.android.apps.maps\",\"platform\":\"play\",\"url\":\"https:\/\/play.google.com\/store\/apps\/details?id=com.google.android.apps.maps\"},{\"id\":\"9wzdncrdtbvb\",\"platform\":\"windows\",\"url\":\"https:\/\/microsoft.com\/p\/app\/9wzdncrdtbvb\"}],\"short_name\":\"Iconduit\",\"start_url\":\".\",\"theme_color\":\"#D5415C\"}:\r\nSyntaxError: Unexpected token (1:19)\r\n    at handleMake (\/Users\/erin\/grit\/github.com\/iconduit\/html-webpack-plugin\/src\/index.js:126:15)\r\n    at process.processTicksAndRejections (node:internal\/process\/task_queues:95:5)\r\n```\r\n\r\nI've looked through the release notes for that version, but I can't see anything that could explain this breakage.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\nI've created a simple reproduction in [the plugin repo](https:\/\/github.com\/iconduit\/html-webpack-plugin):\r\n\r\n- `git clone git@github.com:iconduit\/html-webpack-plugin.git`\r\n- `cd html-webpack-plugin`\r\n- `git switch webpack-5-78-repro`\r\n- `npm ci`\r\n- `cd test\/integration\/simple`\r\n- `npx webpack`\r\n\r\nYou can also reproduce the (working) behavior under `5.77.0` by using the `webpack-5-77-repro` branch:\r\n\r\n- `git clone git@github.com:iconduit\/html-webpack-plugin.git`\r\n- `cd html-webpack-plugin`\r\n- `git switch webpack-5-77-repro`\r\n- `npm ci`\r\n- `cd test\/integration\/simple`\r\n- `npx webpack`\r\n\r\nI've also verified that problem is reproducible under GitHub Actions. See these workflow runs for working and non-working results:\r\n\r\n- https:\/\/github.com\/iconduit\/html-webpack-plugin\/actions\/runs\/6516561925\/job\/17700204695#step:5:10 (not working under `5.78.0`)\r\n- https:\/\/github.com\/iconduit\/html-webpack-plugin\/actions\/runs\/6516564935\/job\/17700211008#step:5:10 (working under `5.77.0`)\r\n\r\nMy Webpack config is pretty simple: \r\n\r\n```js\r\nconst HtmlPlugin = require(\"html-webpack-plugin\");\r\nconst IconduitHtmlPlugin = require(\"..\/..\/..\/src\/index.js\");\r\n\r\nmodule.exports = {\r\n  mode: \"development\",\r\n  plugins: [\r\n    new HtmlPlugin(),\r\n    new IconduitHtmlPlugin({\r\n      manifestPath: \".\/src\/assets\/site.iconduitmanifest\",\r\n    }),\r\n  ],\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: \/\\.(png|svg|xml|webmanifest)$\/,\r\n        type: \"asset\/resource\",\r\n      },\r\n    ],\r\n  },\r\n  output: {\r\n    assetModuleFilename: \"[name].[contenthash][ext][query]\",\r\n  },\r\n};\r\n```\r\n\r\nWhat I think is happening, is that my plugin is adding a `.xml` and `.webmanifest` asset to the build, but despite the above module rules that should match these and mark them as `asset\/resource`, the rules are ignored for some reason.\r\n\r\nIt's also completely possible that I'm doing something the wrong way in my plugin. Any help would be greatly appreciated \ud83d\ude4f\r\n\r\n**What is the expected behavior?**\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\nThe Webpack build should succeed. In particular, it seems like the `rules` section of the Webpack config is being ignored for assets that are emitted by the plugin.\r\n\r\n**Other relevant information:**\r\nwebpack version:  `v5.78.0`\r\nNode.js version: `v20.8.0`\r\nOperating System: N\/A\r\nAdditional tools: N\/A\r\n","comments":["@ezzatron This sounds VERY much like what [we've been experiencing](https:\/\/github.com\/webpack\/webpack\/issues\/17417). The problem only showed up for us in watch mode for the recompilations, the first build never reports any issues. It also doesn't break anything for us which is also super weird. I tracked it down to a specific PR and file\/line change but I didn't know enough about how that part of the system worked to really know where to start fixing it. \r\n\r\nIf you try removing the mentioned lines with the latest version, report back if it's the same culprit \ud83e\udd1e ","@thecontstruct Thanks for the tip. I can confirm that commenting out [these lines](https:\/\/github.com\/webpack\/webpack\/blob\/b1826ac07b7e6a6f02a0e1ed35d54045e0fb13c8\/lib\/NormalModuleFactory.js#L528-L530) in the latest Webpack release fixes my issue too.","Sounds like a small bug, we need improve our checks, do you want to send a PR?","@alexander-akait I could probably get together a PR, but I'm not confident I could fix the issue without introducing a regression for #16466. Any advice on what that section of the code should actually _do_?\r\n\r\nIf nothing else I could at least submit a PR with a test that highlights the issue.","@ezzatron \r\n\r\n> If nothing else I could at least submit a PR with a test that highlights the issue.\r\n\r\nLet's do it and will try to optimize our `if`","Took me a while, but I managed to get a repro together in #18065 \ud83c\udf89"],"labels":["bug","Send a PR"]},{"title":"Repro for issue #17740","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at d89bc01<\/samp>\n\nThis pull request adds a new test case to verify that webpack handles class inheritance correctly when concatenating modules. It uses a library module that exports a class that extends `Error` and a test file that imports and uses the class. It also adds a webpack configuration file that toggles the `concatenateModules` option.\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at d89bc01<\/samp>\n\n* Add a test case to verify that webpack does not generate an invalid extends clause when concatenating modules ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17739\/files?diff=unified&w=0#diff-6bf01dd3399c79ea8e961d4376e478962a8ef1f0e5f2b29f4188f774365a8ec5R1-R23), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17739\/files?diff=unified&w=0#diff-6da5aa31836d6bb587df62e2ae9a2a7a1e02dabf953066e92df962bac890e99cR1-R7), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17739\/files?diff=unified&w=0#diff-c9848667bbd1bcc49b2d8d910c29cf85d6154253590fb955f72dd0d3d2bf0c9fR1-R8))\n  - Import a class that extends `Error` from `library.js` and expect the source code to contain `export { MyError }` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17739\/files?diff=unified&w=0#diff-6bf01dd3399c79ea8e961d4376e478962a8ef1f0e5f2b29f4188f774365a8ec5R1-R23))\n  - Use a helper function to assert that the source code contains a given string ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17739\/files?diff=unified&w=0#diff-6bf01dd3399c79ea8e961d4376e478962a8ef1f0e5f2b29f4188f774365a8ec5R1-R23))\n  - Export a class that extends `Error` and a constant value from `library.js` to create a reference to the module ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17739\/files?diff=unified&w=0#diff-6da5aa31836d6bb587df62e2ae9a2a7a1e02dabf953066e92df962bac890e99cR1-R7))\n  - Export two configurations with `concatenateModules` set to `false` and `true` respectively from `webpack.config.js` and run the test with both ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17739\/files?diff=unified&w=0#diff-c9848667bbd1bcc49b2d8d910c29cf85d6154253590fb955f72dd0d3d2bf0c9fR1-R8))\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed"]},{"title":"Feature\/container entry module\/add has method","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary\r\n\r\nAdded a method to check if a module is present in a container without downloading all the module's dependencies.\r\n\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\r\ncopilot:summary\r\n-->\r\n### <samp>\ud83e\udd16 Generated by Copilot at 77e4521<\/samp>\r\n\r\nThis pull request enhances the `ContainerEntryModule` to support module existence checks. It adds a `has` function to the runtime code and exposes it as a `get.has` property.\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\r\ncopilot:walkthrough\r\n-->\r\n### <samp>\ud83e\udd16 Generated by Copilot at 77e4521<\/samp>\r\n\r\n*  Add `has` function to check module availability in container ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17722\/files?diff=unified&w=0#diff-c798734f94334ac7c470ee7fe7966504acc68e5b4bf0d5e3a6080e189202f189R226-R228), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17722\/files?diff=unified&w=0#diff-c798734f94334ac7c470ee7fe7966504acc68e5b4bf0d5e3a6080e189202f189R241))\r\n  - Define `has` function in runtime code of `ContainerEntryModule` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17722\/files?diff=unified&w=0#diff-c798734f94334ac7c470ee7fe7966504acc68e5b4bf0d5e3a6080e189202f189R226-R228))\r\n  - Attach `has` function as property of `get` function ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17722\/files?diff=unified&w=0#diff-c798734f94334ac7c470ee7fe7966504acc68e5b4bf0d5e3a6080e189202f189R241))\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: MuTaToR08  (891435ae22783e277ac5e4dff165f6669f5804f5, 77e45219d40d04c9262e5c42010ee920b44de9ad, db42bf3baa1992863c00a69d6d36217c8d311f76, e571624c03664b0c06a7ce6eafbfefbd521b3258)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@MuTaToR08 Sorry for delay, can you describe why you need this?"],"labels":["PR: unreviewed"]},{"title":"Custom conditionNames break default conditionNames","body":"Hi, I was looking to figure out the correct Webpack configuration to load with condition names, and there is very little information about what default condition names apply.\r\n\r\nI'm using the Webpack `resolve` `conditionNames` configuration to add a custom platform condition for `\"fastly\"`. But from reading the documentation I'm unable to determine how this will interact with other conditions in Webpack.\r\n\r\nIt took a lot of searching to find https:\/\/gist.github.com\/sokra\/e032a0f17c1721c71cfced6f14516c62, which is a great resource, although doesn't clarify the interaction with custom `resolve: { conditionNames }` either.\r\n\r\nWhen specifying custom conditionNames, I do not want the Webpack default handling of standard conditions to be disabled.\r\n\r\nSpecifically I had the following questions:\r\n\r\n1. Do I need to explicitly configure the `\"default\"` condition? Reading the code, I can't see this condition being always used, despite the fact that Node.js specifies that it must always be resolved.\r\n2. From reading other issues, I see that `\"import\"` and `\"require\"` aren't automatically used and must be specified, due to the resolver having no context bit to know if the importer is CJS or ESM. Again, this is breaking against the Node.js specification of how resolution should work.\r\n3. I know Webpack automatically uses the `\"module\"` condition, again there is no documentation on whether this condition is automatically applied, or if I need to specify it manually.\r\n4. It's also not clear to me if the `\"browser\"` or `\"node\"` conditions are being automatically added.\r\n\r\nesbuild has really great handling for the above in doing \"the right thing\" and covers all these details really succinctly in https:\/\/esbuild.github.io\/api\/#conditions.\r\n\r\nPerhaps Webpack should offer a new `platformConditions` or otherwise field that simply composes with the default condition names handling. The final list is always a union of different rules, having users provide it explicitly is just not a great user experience.\r\n\r\nIf there's a better way and I've missed it, I would really appreciate a pointer as well.","comments":["<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Hello, you can use such things like `conditionNames: [\"my-name\", \"...\"]` or `conditionNames: [\"...\", \"my-name\"]` to modify `conditionNames` and keep `default` variants, also you can set it on loader level or globally, also you can set it by type https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/config\/defaults.js#L1448, also you can see all default values"],"labels":["question","inactive"]},{"title":"fix: stats.hasWarnings() should respect ignoreWarnings","body":"## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\nActually, I am not sure if this is a bug or if it was done intentionally. But I think `hasWarnings` in `stats` should respect `ignoreWarnings`\u3002\r\n\r\n Especially in the compiler.hooks.done hooks, stats obtained is directly processed via hasWarnings to handle warnings.\r\n\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 345939a<\/samp>\n\nRefactor `Stats.hasWarnings` to use `Compilation.getWarnings`. This is part of a larger effort to optimize and enhance the stats output.\r\n\r\n## Details\r\n\r\n`stats.hasWarnings()` should respect `ignoreWarnings`\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 345939a<\/samp>\n\n*  Refactor warnings handling logic in `Compilation` class (0,10,10,1,F0L3R\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: nanianlisao \/ name: chenxiang  (345939a0b978d5e6c597d666c8aa73d20dea7306)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@alexander-akait \r\nHi,\r\nI've noticed that my pull request hasn't been reviewed yet. If you could find some time to review it, I'd really appreciate it.\r\n\r\nThanks a lot!\r\n","@alexander-akait Yeah, this could be a potential breaking change. I believe we should consider this change for webpack v6"],"labels":["PR: unreviewed"]},{"title":"EvalSourceMapDevToolPlugin with append= false add always source map url","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the GitHub Discussions. -->\r\n<!-- https:\/\/github.com\/webpack\/webpack\/discussions -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\naccording with documentation https:\/\/webpack.js.org\/plugins\/eval-source-map-dev-tool-plugin\/#options\r\nappend = false the sourceURL should be not be appended\r\n\r\ninstead in the dist\/main.js is added sourceURL \r\n\/\/# sourceURL=[module]\\n\/\/# sourceMappingURL=\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\ngit clone https:\/\/github.com\/francesc79\/webpack-source-map\r\nnpm i\r\nnpm run build\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nthat sourceURL will not be added but create a file. Thi works with SourceMapDevToolPlugin\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.88.2\r\nNode.js version: v18.17.1\r\nOperating System:\r\nAdditional tools:\r\n","comments":["Interestingly this bug only occurs when map files names end in `*.map` As long as I change this to something else, this setting is respected.","Yeah, it is a bug, feel free to send a PR with fix, it should be easy","I have studied the problems carefully. \r\n\r\nYou need to set `devtool: false` if you use sourcemaps plugins, i.e. `EvalSourceMapDevToolPlugin` or `SourceMapDevToolPlugin`\r\n\r\nBut yes, append is broken, WIP on this","@francesc79 Can you provide information why do you want to disable it, because I don't see any point for eval source maps without `\"\/\/# sourceURL=[module]\\n\/\/# sourceMappingURL=[url]\"`","Not OP, but I've had Django deployments blow up because WebPack would include `\/\/# sourceURL=something.mjs` where `something.mjs` didn't exist in bundle or final build.","@alexander-akait thanks for time to investigate for my problem.\r\nMy idea is to include source map in a production bundle and import them with chome dev tools when need for debug. If sourceURL is not set another developer can't see the source. I would like to store the source map in a protected folder from server.","@francesc79 Can you provide steps how do you want to do it? Just want to undestand better, thank you","the steps are:\r\n\r\n1.  open dev tools\r\n2. go to source tab\r\n3. select a chunk\r\n4. in a source code press dx mouse button and select add source map\r\n5. add a link a source map","@francesc79 where did you get source maps? because eval source maps generate base64 code inside eval","@alexander-akait when use EvalSourceMapDevToolPlugin or SourceMapDevToolPlugin the plugin create a source map file \r\nes. something.mjs where is something.js module. If append = false (now not working) in module something.js you not have \/\/# sourceURL=something.mjs  so in this case the browser not known about source map. But if you go in devtools you can add sourcemap and debug easaly your code.","@francesc79 So you want to use source maps generated by `SourceMapDevToolPlugin`, but when `EvalSourceMapDevToolPlugin` is used? Why just don't use `hidden-nosources-source-map`?","@alexander-akait you have right, For my use case hidden-nosources-source-map is a right way. Thanks "],"labels":["enhancement","Send a PR"]},{"title":"Bump terser-webpack-plugin to v4 to fix an issue with Node 18.","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at f67b661<\/samp>\n\nThis pull request adds Node.js 18.17.1 to the CI pipeline and updates the `terser-webpack-plugin` dependency to fix security issues.\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at f67b661<\/samp>\n\n* Add and update matrix entries for Node.js version 18.17.1 in the CI pipeline ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17659\/files?diff=unified&w=0#diff-7915b9b726a397ae7ba6af7b9703633d21c031ebf21682f3ee7e6a4ec52837a5R95-R96), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17659\/files?diff=unified&w=0#diff-7915b9b726a397ae7ba6af7b9703633d21c031ebf21682f3ee7e6a4ec52837a5R147-R148), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17659\/files?diff=unified&w=0#diff-7915b9b726a397ae7ba6af7b9703633d21c031ebf21682f3ee7e6a4ec52837a5R199-R200)) in `azure-pipelines.yml`\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","Thanks for the md4 issue fix in v4.47.0, will the terser-webpack-plugin package bump be available in v4.48.0?","Is there any update on this one? I also encountered an error thrown from terser-webpack-plugin when upgrading to Node v18.18.0 and Webpack v4.47.0. This PR would help to resolve the error.","@nguyenvu9405 You may be able to work around this with a forced resolution\/override in your `package.json`.\r\n\r\nYarn 2+\r\n```json\r\n  \"resolutions\": {\r\n    \"webpack@npm:4.47.0\/terser-webpack-plugin\": \"^4.2.3\"\r\n  },\r\n```\r\n\r\nNPM\r\n```json\r\n  \"overrides\": {\r\n    \"webpack@4.47.0\": {\r\n      \"terser-webpack-plugin\": \"^4.2.3\"\r\n    }\r\n  }\r\n```","Thank you @chadlwilson , I have applied that solution and it worked.  But it is a work-around, so I hope this PR can be merged to resolve it officially. ","+1 from me for getting this merged in to avoid having to use the NPM override please.","I can accept the fix `md4` in `terser-webpack-plugin@1`, so let's do it firstly and then just bump the patch version here"],"labels":["PR: unreviewed","PR: webpack-4"]},{"title":"fix: simplify getting max char code","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\nI just a little simplified getting max char code\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed"]},{"title":"Module concatenation causes Terser bailout conditions","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\nI have created a simple 5-line reproduction case here:\r\nhttps:\/\/gist.github.com\/laverdet\/1b8537f56dca2d990fe63decf66a2cc6\r\n\r\nWhen we export hoistable function declarations which consume concatenated modules Webpack creates bailout conditions in Terser.\r\n\r\nIf you run this example with `npm i && npx webpack && cat dist\/344.js` we can see the output:\r\n```\r\n\/\/ [runtime noise omitted]\r\nconst e={title:\"main\",aaaaaaaaaaaaaaaaaaaa:\"bbbbbbbbbbbb\"};function s(){console.log(e.title)}\r\n```\r\n\r\nIf instead you you comment out line 2, and uncomment line 3 in `async.js` we get this output instead:\r\n```\r\n\/\/ [runtime noise omitted]\r\nconst c=()=>{console.log(\"main\")}\r\n```\r\n\r\n<!-- Please ask questions on StackOverflow or the GitHub Discussions. -->\r\n<!-- https:\/\/github.com\/webpack\/webpack\/discussions -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nThe code that Webpack generates cannot be optimized well because Terser assumes that as soon as the function is referenced it may be invoked. Therefore it would be incorrect to inline the object keys since the hoisted function would throw if invoked before the object is defined.\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nThis deopt is a bug because we know from the es-262 specification that the default export of `payload.js` will be evaluated fully before any other module can reference the function defined in `async.js`.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nIf concatenated modules were injected *before* the export runtime invocation (sorry I don't know what you call this internally) then the code could be optimized. You can observe this effect pretty easily at the Terser REPL by pasting the two examples in:\r\n\r\nhttps:\/\/try.terser.org\/\r\n\r\n```js\r\nconst a = { aaaaaaaaaaaaaaaaa: 'a' };\r\nglobalThis.foo = function() {\r\n  console.log(a.aaaaaaaaaaaaaaaaa);\r\n}\r\n```\r\n\r\noutput: `const o=\"a\";globalThis.foo=function(){console.log(o)};`\r\n\r\n```js\r\nglobalThis.foo = function() {\r\n  console.log(a.aaaaaaaaaaaaaaaaa);\r\n}\r\nconst a = { aaaaaaaaaaaaaaaaa: 'a' };\r\n```\r\n\r\noutput: `globalThis.foo=function(){console.log(a.aaaaaaaaaaaaaaaaa)};const a={aaaaaaaaaaaaaaaaa:\"a\"};`\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version: 5.88.2\r\nNode.js version: main [996f3904bc]\r\nOperating System: macOS 13.3.1(a)\r\n","comments":["@laverdet Can you add the webpack config you are using and the `payload.js` file to your repro gist? Also would be better to share the repro as a self contained repo rather than gists.","@ronakj Of course. Sorry I didn't notice I was missing 2 files from the reproduction. The configuration is a dead simple default.\r\n\r\nEdit: On the topic of gist vs repo I report a lot of issues in a lot of repositories. I always make an effort to submit high quality reports, so if I use repos I end up with dozens of \"react-issue-2\", \"webpack-issue4\" repositories. I don't want those hanging around my account forever but cleaning them up reduces the historic quality of the report since you can no longer trace commit to PR to issue to reproduction case. Gists allow me to leave the reproduction up forever.","For context I discovered this bailout because we're using CSS modules which export something like `{ \"source-class-name\": \"a9-c\" }`. Due to the order Webpack writes concatenated modules we aren't actually shaking out the lengthy `\"source-class-name\"` key names. We can work around it on our end by using lambda expressions which compress better anyway but I believe a fix for the underlying issue would provide byte savings for most applications.","I made a prototype with broken semantics to get an idea of how many bytes we're talking about. On our bundle we saved 1.39kb on a 356.23kb [gzip] bundle, so a paltry savings of ~0.4%.\r\n\r\nThis could also be handled by terser maybe with an \"unsafe_use_before_define\" option which implies a well-behaved program that doesn't trigger any use-before-define errors.\r\n\r\nThe diff I used follows. The source output doesn't work correctly but I believe all the output content should be there, just in an order the runtime doesn't expect.\r\n\r\n```diff\r\ndiff --git a\/lib\/InitFragment.js b\/lib\/InitFragment.js\r\nindex 415660b..b81e3c3 100644\r\n--- a\/lib\/InitFragment.js\r\n+++ b\/lib\/InitFragment.js\r\n@@ -175,8 +175,8 @@ InitFragment.prototype.merge = undefined;\r\n \r\n InitFragment.STAGE_CONSTANTS = 10;\r\n InitFragment.STAGE_ASYNC_BOUNDARY = 20;\r\n-InitFragment.STAGE_HARMONY_EXPORTS = 30;\r\n-InitFragment.STAGE_HARMONY_IMPORTS = 40;\r\n+InitFragment.STAGE_HARMONY_IMPORTS = 30;\r\n+InitFragment.STAGE_HARMONY_EXPORTS = 40;\r\n InitFragment.STAGE_PROVIDES = 50;\r\n InitFragment.STAGE_ASYNC_DEPENDENCIES = 60;\r\n InitFragment.STAGE_ASYNC_HARMONY_IMPORTS = 70;\r\ndiff --git a\/lib\/optimize\/ConcatenatedModule.js b\/lib\/optimize\/ConcatenatedModule.js\r\nindex f889b5e..129a004 100644\r\n--- a\/lib\/optimize\/ConcatenatedModule.js\r\n+++ b\/lib\/optimize\/ConcatenatedModule.js\r\n@@ -1478,33 +1478,6 @@ class ConcatenatedModule extends Module {\r\n \t\t\t);\r\n \t\t}\r\n \r\n-\t\t\/\/ define exports\r\n-\t\tif (exportsMap.size > 0) {\r\n-\t\t\truntimeRequirements.add(RuntimeGlobals.exports);\r\n-\t\t\truntimeRequirements.add(RuntimeGlobals.definePropertyGetters);\r\n-\t\t\tconst definitions = [];\r\n-\t\t\tfor (const [key, value] of exportsMap) {\r\n-\t\t\t\tdefinitions.push(\r\n-\t\t\t\t\t`\\n  ${propertyName(key)}: ${runtimeTemplate.returningFunction(\r\n-\t\t\t\t\t\tvalue(requestShortener)\r\n-\t\t\t\t\t)}`\r\n-\t\t\t\t);\r\n-\t\t\t}\r\n-\t\t\tresult.add(`\\n\/\/ EXPORTS\\n`);\r\n-\t\t\tresult.add(\r\n-\t\t\t\t`${RuntimeGlobals.definePropertyGetters}(${\r\n-\t\t\t\t\tthis.exportsArgument\r\n-\t\t\t\t}, {${definitions.join(\",\")}\\n});\\n`\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t\/\/ list unused exports\r\n-\t\tif (unusedExports.size > 0) {\r\n-\t\t\tresult.add(\r\n-\t\t\t\t`\\n\/\/ UNUSED EXPORTS: ${joinIterableWithComma(unusedExports)}\\n`\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n \t\t\/\/ generate namespace objects\r\n \t\tconst namespaceObjectSources = new Map();\r\n \t\tfor (const info of neededNamespaceObjects) {\r\n@@ -1645,6 +1618,33 @@ ${defineGetters}`\r\n \t\t\t}\r\n \t\t}\r\n \r\n+\t\t\/\/ define exports\r\n+\t\tif (exportsMap.size > 0) {\r\n+\t\t\truntimeRequirements.add(RuntimeGlobals.exports);\r\n+\t\t\truntimeRequirements.add(RuntimeGlobals.definePropertyGetters);\r\n+\t\t\tconst definitions = [];\r\n+\t\t\tfor (const [key, value] of exportsMap) {\r\n+\t\t\t\tdefinitions.push(\r\n+\t\t\t\t\t`\\n  ${propertyName(key)}: ${runtimeTemplate.returningFunction(\r\n+\t\t\t\t\t\tvalue(requestShortener)\r\n+\t\t\t\t\t)}`\r\n+\t\t\t\t);\r\n+\t\t\t}\r\n+\t\t\tresult.add(`\\n\/\/ EXPORTS\\n`);\r\n+\t\t\tresult.add(\r\n+\t\t\t\t`${RuntimeGlobals.definePropertyGetters}(${\r\n+\t\t\t\t\tthis.exportsArgument\r\n+\t\t\t\t}, {${definitions.join(\",\")}\\n});\\n`\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t\/\/ list unused exports\r\n+\t\tif (unusedExports.size > 0) {\r\n+\t\t\tresult.add(\r\n+\t\t\t\t`\\n\/\/ UNUSED EXPORTS: ${joinIterableWithComma(unusedExports)}\\n`\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n \t\tconst data = new Map();\r\n \t\tif (chunkInitFragments.length > 0)\r\n \t\t\tdata.set(\"chunkInitFragments\", chunkInitFragments);\r\n```","@laverdet Do you want to send a PR with test cases?","Sure, submitted in #17997.\r\n\r\nSorry did you mean literally just a test case or a fix for the issue? A fix is outside my familiarity with this project unfortunately."],"labels":["enhancement"]},{"title":"Allow opt-in tree-shaking of class properties","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nDisclaimer: I assume this is not possible, and has already been discussed and rejected many times \u2013\u00a0but I couldn't find any previous discussion, so I thought I'd raise the topic in case there have been any advances in tree-shaking that could allow this.\r\n\r\n**What is the expected behavior?**\r\n\r\nGiven a library that exposes an instance with methods for most operations ([real-world example](https:\/\/github.com\/openai\/openai-node\/blob\/v4\/src\/index.ts#L123-L124)):\r\n\r\n```ts\r\nimport Completions from '.\/completions'\r\nimport Images from '.\/images'\r\n\r\nexport default class OpenAI extends APIClient {\r\n  completions: Completions = new Completions(this);\r\n  images: Images = new Images(this);\r\n}\r\n```\r\nwhich is used like so:\r\n```ts\r\nimport OpenAI from 'openai'\r\n\r\nconst client = new OpenAI()\r\n\r\nconst result = await client.completions.create()\r\n```\r\n\r\nIt would be nice to have a way to tree-shake away the `images` API in the above example. \r\n\r\nOf course, this would have the dangerous result of changing the structure of the `OpenAI` class, here, in such a way that properties which are supposed to be a certain type would throw at runtime \u2013\u00a0eg, `client[calculateService()]` would either have to disable tree-shaking or throw.\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nThere is a [tension between those who want efficient builds](https:\/\/twitter.com\/jaredpalmer\/status\/1690420651117477888) (e.g., for fast boots on edge runtimes), and [developers](https:\/\/twitter.com\/SheltonLouisX\/status\/1690421167373303808) who [like fluent APIs](https:\/\/twitter.com\/mattpocockuk\/status\/1690446495542067200). \r\n\r\nFor example, AWS had to fully [rewrite their SDK](https:\/\/aws.amazon.com\/blogs\/developer\/modular-packages-in-aws-sdk-for-javascript\/) to allow modularity, but this unfortunately hurts discoverability \u2013\u00a0per one developer I know, \"I've used the new version of the AWS SDK and it is completely terrible when it comes to being able to actually find what you need\". \r\n\r\nDevlopers would ideally [like to see](https:\/\/twitter.com\/dillon_mulroy\/status\/1690423856320626688) bundlers improve their ability to handle patterns like this, to dodge the tradeoff entirely.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nPerhaps like so:\r\n\r\n```ts\r\nimport Completions from '.\/completions'\r\nimport Images from '.\/images'\r\n\r\nexport default class OpenAI extends APIClient {\r\n  \/** webpackTreeShakeableProperty: true *\/\r\n  get completions(): Completions {\r\n    return this._completions ??= new Completions(this);\r\n  }\r\n  \r\n  \/** webpackTreeShakeableProperty: true *\/\r\n  get files(): Files {\r\n    return this._files ??= new Files(this);\r\n  }\r\n}\r\n```\r\n\r\nwhich, with the above usage, would get transpiled to this:\r\n\r\n```ts\r\nimport Completions from '.\/completions'\r\nexport default class OpenAI extends APIClient {\r\n  get completions() {\r\n    return this._completions ??= new Completions(this);\r\n  }\r\n  \r\n  get files() {\r\n    throw new Error('property `files` on class `OpenAI` removed by webpack tree-shaking; see https:\/\/some.url\/with-docs')\r\n  }\r\n}\r\n```\r\n\r\nEven better if the library author can use normal properties instead of getter methods.\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nI'd be willing to fund this work, depending on the scope.\r\n","comments":["<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","This would still be really helpful!","Technically, I think you can setup terser to do it without `webpackTreeShakeableProperty`, but yeah, terser doesn't build a graph so you need manually provide values, and yes, it is a hard tasks, you can try to implement your own plugin to make such things, we have an API for it"],"labels":["question","inactive"]},{"title":"Fix typo in test comment","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nWhile reading this pr #17214 I noticed that there is a typo in the comment section for the `index.js` file \r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at b5a5d47<\/samp>\n\nFix a typo in a comment in `test\/configCases\/code-generation\/import-export-format\/index.js`. The comment clarifies the code generation logic for import and export statements.\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at b5a5d47<\/samp>\n\n* Fix a typo in a comment about import and export syntax ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17551\/files?diff=unified&w=0#diff-8f8e0d42a1a273f5eb69b922ee5970bd3e454da7ed35286de4e1588df4c9889fL13-R13))\r\n","comments":[" <a href=\"https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/17551\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-missing-id.svg\" alt=\"CLA Missing ID\" align=\"left\" height=\"28\" width=\"328\"><\/a> <a href=\"https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/17551\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-not-signed.svg\" alt=\"CLA Not Signed\" align=\"left\" height=\"28\" width=\"328\"><\/a><br\/><br \/><ul><li> :x: The email address for the commit (b5a5d479b2190e6172b6b6e74d1d6c0608bb0fd1) is not linked to the GitHub account, preventing the EasyCLA check. Consult <a href='https:\/\/confluence.linuxfoundation.org\/pages\/viewpage.action?pageId=86641302' target='_blank'>this Help Article<\/a> and <a href='https:\/\/help.github.com\/en\/github\/committing-changes-to-your-project\/why-are-my-commits-linked-to-the-wrong-user' target='_blank'>GitHub Help<\/a> to resolve. (To view the commit's email address, add .patch at the end of this PR page's URL.) For further assistance with EasyCLA, <a href='https:\/\/jira.linuxfoundation.org\/servicedesk\/customer\/portal\/4' target='_blank'>please submit a support request ticket<\/a>.<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","> @mercyg Can you accept CLA?\r\n\r\n@snitin315 I just signed the CLA","\/easycla","@snitin315 can you please merge this ","@mercyg CLA check is still failing, please make sure you sign CLA via the same email you commit your changes.","@snitin315 just signed again \r\n"],"labels":["PR: reviewed-changes-requested","PR: reviewed-approved"]},{"title":"Unable to set target for Web Workers","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the GitHub Discussions. -->\r\n<!-- https:\/\/github.com\/webpack\/webpack\/discussions -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nUnable to set target for Web Workers\r\n\r\n```\r\nnew Worker(new URL('.\/worker.js', import.meta.url));\r\n```\r\nMy worker uses the package named `decode-named-character-reference`, the package exports as bellow,\r\n```\r\n\"exports\": {\r\n    \".\": {\r\n      \"deno\": \".\/index.js\",\r\n      \"react-native\": \".\/index.js\",\r\n      \"worker\": \".\/index.js\",\r\n      \"browser\": \".\/index.dom.js\",\r\n      \"default\": \".\/index.js\"\r\n    }\r\n  }\r\n```\r\nWhen I compile my website with webpack, the target is to use Defaults to `browserslist`, and it compile my web worker use its exports `\"browser\": \".\/index.dom.js\"`,  the error happens `ReferenceError: document is not defined`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\nHow can I set my web worker's target to `webworker` separately? \r\nI want to compile the package named `decode-named-character-reference` use its exports `\"worker\": \".\/index.js\"`, then it can work well.\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.73.0\r\nNode.js version: 14.20.0\r\nOperating System: macOS Big Sur\r\nAdditional tools: VS code\r\n","comments":["<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["bug","inactive"]},{"title":"Skip webpackPrefetch if the module is already preloaded","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Motivation \/ Use-Case\r\n\r\nIt prevents an additional network request for prefetching (webpackPrefetch) when the module is already preloaded.\r\n\r\nIt fixes the issue https:\/\/github.com\/webpack\/webpack\/issues\/17496.\r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at f5dab1b<\/samp>\n\nAvoid duplicate prefetch links for JSONP chunks. Check existing preload link elements in `lib\/web\/JsonpChunkLoadingRuntimeModule.js` before creating and appending prefetch links.\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at f5dab1b<\/samp>\n\n*  Prevent duplicate prefetch links for the same chunk ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17497\/files?diff=unified&w=0#diff-99b22d1932803b7795bbe843d01cdf63d32e52a247610bfd9cffb95170227cc6L228-R276))\r\n","comments":[" <a href=\"https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/17497\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-not-signed.svg\" alt=\"CLA Not Signed\" align=\"left\" height=\"28\" width=\"328\"><\/a><br\/><br \/><ul><li><a href='https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/17497\/#\/?version=2' target='_blank'>:x:<\/a> - login: @FogelAI . The commit (f5dab1b6e65d6c590e61207395ab2dc6caadf86a) is not authorized under a signed CLA. <a href='https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/17497\/#\/?version=2' target='_blank'>Please click here to be authorized<\/a>. For further assistance with EasyCLA, <a href='https:\/\/jira.linuxfoundation.org\/servicedesk\/customer\/portal\/4' target='_blank'>please submit a support request ticket<\/a>.<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: head-main -->\n\nHi @FogelAI.\n\nJust a little hint from a friendly bot about the best practice when submitting pull requests:\n\n> Don't submit pull request from your own `main` branch. It's recommended to create a feature branch for the PR.\n\n*You don't have to change it for this PR, just make sure to follow this hint the next time you submit a PR.*","Any updates? The PR is very important for me.","Why? The browser will load it from the cache anyway. This code increase runtime size without any profit","> Why? The browser will load it from the cache anyway. This code increase runtime size without any profit\r\n\r\n@alexander-akait\r\n\r\nTry the example in the issue https:\/\/github.com\/webpack\/webpack\/issues\/17496.\r\nFor me, the first time loading on the Chrome browser results in 2 network requests, and neither of the requests receives its content from the cache.\r\nThe runtime increases by only 245 bytes, I believe it's worth it.","Firefox:\r\n\r\n![image](https:\/\/github.com\/webpack\/webpack\/assets\/4567934\/c512f671-9e90-4dd3-b45e-faa0859f5bc0)\r\n\r\nChrome is buggy here, we need to report them.\r\n\r\nWhy you use`<link rel=\"preload\" as=\"script\" href=\"http:\/\/localhost:3000\/Module.js\">` if you have `webpackPrefetch: true`?\r\n\r\n","Because browsers have different behaviour I don't want to land this PR right now, before deciding to fix it, we need to get feedback and understand which behavior is correct.\r\n\r\nThat is intresting if you have:\r\n```\r\n<html>\r\n        <head>\r\n          <link rel=\"preload\" as=\"script\" href=\"http:\/\/localhost:3000\/Module.js\">\r\n          <link rel=\"preload\" as=\"script\" href=\"http:\/\/localhost:3000\/Module.js\">\r\n        <\/head>\r\n<\/html>\r\n```\r\n\r\nChrome doesn't create an extra request, but if you have\r\n\r\n```\r\n<html>\r\n        <head>\r\n          <link rel=\"preload\" as=\"script\" href=\"http:\/\/localhost:3000\/Module.js\">\r\n        <\/head>\r\n<\/html>\r\n```\r\n\r\nAnd then create `<link rel=\"preload\" as=\"script\" href=\"http:\/\/localhost:3000\/Module.js\">` dynamically using javascript, chrome makes an extra request \r\n","\/cc @paulirish @addyosmani Should I open a bug report? Thanks"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"chore(deps-dev): bump babel-loader from 8.3.0 to 9.1.3","body":"Bumps [babel-loader](https:\/\/github.com\/babel\/babel-loader) from 8.3.0 to 9.1.3.\n<details>\n<summary>Release notes<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/babel\/babel-loader\/releases\">babel-loader's releases<\/a>.<\/em><\/p>\n<blockquote>\n<h2>v9.1.3<\/h2>\n<h2>Security dependency updates<\/h2>\n<ul>\n<li>Bump http-cache-semantics from 4.1.0 to 4.1.1 by <a href=\"https:\/\/github.com\/dependabot\"><code>@\u200bdependabot<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/982\">babel\/babel-loader#982<\/a><\/li>\n<li>Bump semver from 7.3.2 to 7.5.2 by <a href=\"https:\/\/github.com\/dependabot\"><code>@\u200bdependabot<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/993\">babel\/babel-loader#993<\/a><\/li>\n<li>bump find-cache-dir to v4 by <a href=\"https:\/\/github.com\/JLHwung\"><code>@\u200bJLHwung<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/995\">babel\/babel-loader#995<\/a><\/li>\n<\/ul>\n<h2>New Contributors<\/h2>\n<ul>\n<li><a href=\"https:\/\/github.com\/piwysocki\"><code>@\u200bpiwysocki<\/code><\/a> made their first contribution in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/981\">babel\/babel-loader#981<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/comoser\"><code>@\u200bcomoser<\/code><\/a> made their first contribution in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/897\">babel\/babel-loader#897<\/a><\/li>\n<\/ul>\n<p><strong>Full Changelog<\/strong>: <a href=\"https:\/\/github.com\/babel\/babel-loader\/compare\/v9.1.2...v9.1.3\">https:\/\/github.com\/babel\/babel-loader\/compare\/v9.1.2...v9.1.3<\/a><\/p>\n<h2>v9.1.2<\/h2>\n<p>9.1.1 was a broken release, it didn't include all the commits.<\/p>\n<h2>Dependencies updates<\/h2>\n<ul>\n<li>Bump qs from 6.5.2 to 6.5.3 by <a href=\"https:\/\/github.com\/dependabot\"><code>@\u200bdependabot<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/977\">babel\/babel-loader#977<\/a><\/li>\n<li>Bump json5 from 2.2.1 to 2.2.3 by <a href=\"https:\/\/github.com\/dependabot\"><code>@\u200bdependabot<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/980\">babel\/babel-loader#980<\/a><\/li>\n<\/ul>\n<h2>Misc<\/h2>\n<ul>\n<li>GitHub Workflows security hardening by <a href=\"https:\/\/github.com\/sashashura\"><code>@\u200bsashashura<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/976\">babel\/babel-loader#976<\/a><\/li>\n<\/ul>\n<h2>New Contributors<\/h2>\n<ul>\n<li><a href=\"https:\/\/github.com\/sashashura\"><code>@\u200bsashashura<\/code><\/a> made their first contribution in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/976\">babel\/babel-loader#976<\/a><\/li>\n<\/ul>\n<p><strong>Full Changelog<\/strong>: <a href=\"https:\/\/github.com\/babel\/babel-loader\/compare\/v9.1.0...v9.1.2\">https:\/\/github.com\/babel\/babel-loader\/compare\/v9.1.0...v9.1.2<\/a><\/p>\n<h2>v9.1.0<\/h2>\n<h2>New features<\/h2>\n<ul>\n<li>Pass external dependencies from Babel to Webpack by <a href=\"https:\/\/github.com\/nicolo-ribaudo\"><code>@\u200bnicolo-ribaudo<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/971\">babel\/babel-loader#971<\/a><\/li>\n<\/ul>\n<p><strong>Full Changelog<\/strong>: <a href=\"https:\/\/github.com\/babel\/babel-loader\/compare\/v9.0.1...v9.1.0\">https:\/\/github.com\/babel\/babel-loader\/compare\/v9.0.1...v9.1.0<\/a><\/p>\n<h2>v9.0.1<\/h2>\n<h2>Bug Fixes<\/h2>\n<ul>\n<li>remove &quot;node:&quot; builtin prefix by <a href=\"https:\/\/github.com\/JLHwung\"><code>@\u200bJLHwung<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/970\">babel\/babel-loader#970<\/a><\/li>\n<\/ul>\n<p><strong>Full Changelog<\/strong>: <a href=\"https:\/\/github.com\/babel\/babel-loader\/compare\/v9.0.0...v9.0.1\">https:\/\/github.com\/babel\/babel-loader\/compare\/v9.0.0...v9.0.1<\/a><\/p>\n<h2>v9.0.0<\/h2>\n<h2>What's Changed<\/h2>\n<ul>\n<li>update hash method mechanism so it doesn't fail on a fips enabled machine by <a href=\"https:\/\/github.com\/darmbrust\"><code>@\u200bdarmbrust<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/939\">babel\/babel-loader#939<\/a><\/li>\n<li>Require babel ^7.12.0 and Node.js &gt;= 14.15.0 versions by <a href=\"https:\/\/github.com\/JLHwung\"><code>@\u200bJLHwung<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/956\">babel\/babel-loader#956<\/a><\/li>\n<li>Remove dependency on loader-utils and drop webpack 4 support by <a href=\"https:\/\/github.com\/nied\"><code>@\u200bnied<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/942\">babel\/babel-loader#942<\/a><\/li>\n<\/ul>\n<h2>New Contributors<\/h2>\n<ul>\n<li><a href=\"https:\/\/github.com\/darmbrust\"><code>@\u200bdarmbrust<\/code><\/a> made their first contribution in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/939\">babel\/babel-loader#939<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/nied\"><code>@\u200bnied<\/code><\/a> made their first contribution in <a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/pull\/942\">babel\/babel-loader#942<\/a><\/li>\n<\/ul>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Commits<\/summary>\n<ul>\n<li><a href=\"https:\/\/github.com\/babel\/babel-loader\/commit\/b89dfbd3bca9154ebee6d8ea10f99b7722a0125c\"><code>b89dfbd<\/code><\/a> 9.1.3<\/li>\n<li><a href=\"https:\/\/github.com\/babel\/babel-loader\/commit\/54fb7811434fbead1407bcb68414d3161da8f189\"><code>54fb781<\/code><\/a> Update caniuse<\/li>\n<li><a href=\"https:\/\/github.com\/babel\/babel-loader\/commit\/6f300f3bcb8b580ad9ffb8c06ea601e2a6b2026a\"><code>6f300f3<\/code><\/a> bump find-cache-dir to v4 (<a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/issues\/995\">#995<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/babel\/babel-loader\/commit\/2fd1c0a3750cb5760566ba88691054256e41f464\"><code>2fd1c0a<\/code><\/a> Bump semver from 7.3.2 to 7.5.2 (<a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/issues\/993\">#993<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/babel\/babel-loader\/commit\/b3682fd256f939d7256016ef30b235ca026dd75c\"><code>b3682fd<\/code><\/a> Add more exhaustive example on customized-loader (<a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/issues\/897\">#897<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/babel\/babel-loader\/commit\/a797c3b74acba0833a9f84cc0ff33c194b6fa57a\"><code>a797c3b<\/code><\/a> ci: bump actions\/checkout (<a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/issues\/981\">#981<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/babel\/babel-loader\/commit\/170350e7ba9e82758402fa953e3818f8f04203ac\"><code>170350e<\/code><\/a> Bump http-cache-semantics from 4.1.0 to 4.1.1 (<a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/issues\/982\">#982<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/babel\/babel-loader\/commit\/78bd0a1c22166208dc0aec1d529f5dffec3702c8\"><code>78bd0a1<\/code><\/a> Update README.md (<a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/issues\/987\">#987<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/babel\/babel-loader\/commit\/c0491875f8dab8c6799ff22dd9b6a4d560f2b2d9\"><code>c049187<\/code><\/a> Bump webpack from 5.74.0 to 5.76.0 (<a href=\"https:\/\/redirect.github.com\/babel\/babel-loader\/issues\/986\">#986<\/a>)<\/li>\n<li><a href=\"https:\/\/github.com\/babel\/babel-loader\/commit\/0406d168671087b11176cf6a298a58596397dbe1\"><code>0406d16<\/code><\/a> 9.1.2<\/li>\n<li>Additional commits viewable in <a href=\"https:\/\/github.com\/babel\/babel-loader\/compare\/v8.3.0...v9.1.3\">compare view<\/a><\/li>\n<\/ul>\n<\/details>\n<br \/>\n\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=babel-loader&package-manager=npm_and_yarn&previous-version=8.3.0&new-version=9.1.3)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nYou can trigger a rebase of this PR by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n<\/details>\n> **Note**\n> Automatic rebases have been disabled on this pull request as it has been open for over 30 days.\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","PR: conflict","dependencies"]},{"title":"feat: exclude version ranges from federation","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\r\ncopilot:summary\r\n-->\r\n### <samp>\ud83e\udd16 Generated by Copilot at 4a3cc04<\/samp>\r\n\r\nNo summary available (Limit exceeded: required to process 50446 tokens, but only 50000 are allowed per call)\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\r\ncopilot:walkthrough\r\n-->\r\n### <samp>\ud83e\udd16 Generated by Copilot at 4a3cc04<\/samp>\r\n\r\n*  Add a new feature to allow excluding modules or version ranges from sharing based on the exclusion criteria ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-97cf9595aa0477127a56ec4cdc2431f0b916d0f813821466b99018eb800287a9R20), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-97cf9595aa0477127a56ec4cdc2431f0b916d0f813821466b99018eb800287a9R47), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-545c55d1798dd44e1dc934ab0180669a92c2672369c08fcac5cb5a217edf9a8aR8), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-545c55d1798dd44e1dc934ab0180669a92c2672369c08fcac5cb5a217edf9a8aL14-R15), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-545c55d1798dd44e1dc934ab0180669a92c2672369c08fcac5cb5a217edf9a8aR72), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-545c55d1798dd44e1dc934ab0180669a92c2672369c08fcac5cb5a217edf9a8aR102), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-545c55d1798dd44e1dc934ab0180669a92c2672369c08fcac5cb5a217edf9a8aL246-R250), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-545c55d1798dd44e1dc934ab0180669a92c2672369c08fcac5cb5a217edf9a8aR259-R314), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-39f49e6cddc6fe77beabbd28da52c44e76afa03c96341915c34428342f66fa35R11), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-39f49e6cddc6fe77beabbd28da52c44e76afa03c96341915c34428342f66fa35R33), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-39f49e6cddc6fe77beabbd28da52c44e76afa03c96341915c34428342f66fa35R57), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-39f49e6cddc6fe77beabbd28da52c44e76afa03c96341915c34428342f66fa35R66), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-39f49e6cddc6fe77beabbd28da52c44e76afa03c96341915c34428342f66fa35R150-R156), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-d17cae8b91fcb66f2e343d48f07f5ca8cb9a3a71184d3b4de4ba80e66428ce1bL11-R11), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-d17cae8b91fcb66f2e343d48f07f5ca8cb9a3a71184d3b4de4ba80e66428ce1bR46), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-d17cae8b91fcb66f2e343d48f07f5ca8cb9a3a71184d3b4de4ba80e66428ce1bR53-R58), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-d17cae8b91fcb66f2e343d48f07f5ca8cb9a3a71184d3b4de4ba80e66428ce1bR73), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-260b12729ec74ae844ab979b5bb4344874cd0a89eeb39dc78a66d284a44a2919R11), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-260b12729ec74ae844ab979b5bb4344874cd0a89eeb39dc78a66d284a44a2919R314-R331), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-c958852e895141ed7f40ef05c570bbf2b43c79e08c12c3b9bf700f8a4741c749R34-R36), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-c958852e895141ed7f40ef05c570bbf2b43c79e08c12c3b9bf700f8a4741c749R100-R110), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-8826bf3c861f8076f252a8551a5adfc06c6b0889c3d1850abc9fede8a81833b0L6-L5), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-00924ce3be46a57d6f5699fa1ac625c6cb73eb802efaab778d62885ad3f9dee7R391-R393), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-00924ce3be46a57d6f5699fa1ac625c6cb73eb802efaab778d62885ad3f9dee7R457-R467), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-3b886fe71f47b4dd8f67cca07101d5e285cfae983b39b19bfdcb5869c63946cbL6-L5), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-0f757e1715e5038f648c0318c4924fc1ed6d289262ce697a30efb2724dcf3cfcR34-R36), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-0f757e1715e5038f648c0318c4924fc1ed6d289262ce697a30efb2724dcf3cfcR106-R130), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-401ae14f0716323eb158640030411d3afc9b8780339b18096719055804776e35L6-L5), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-b9a9e173286cde296cc006f031ec35f2bd0268982f83c5dcfb46dc4d63472ef0R34-R36), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-b9a9e173286cde296cc006f031ec35f2bd0268982f83c5dcfb46dc4d63472ef0R81-R91), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-a9f08ce102400ae856f182ee1081886b4379694cfb5731b0e2bb273c210f0870L6-L5), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-3ad39b82cdaea1659d707187a6043a01a0080b93a68f49fb8a7d98ee3283760cR34-R36), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-3ad39b82cdaea1659d707187a6043a01a0080b93a68f49fb8a7d98ee3283760cR100-R110))\r\n  * Define the `SharedExclusionCriteria` type and schema, which has a `version` property that represents a version or semver range of the dependency to exclude from sharing ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-97cf9595aa0477127a56ec4cdc2431f0b916d0f813821466b99018eb800287a9R20), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-c958852e895141ed7f40ef05c570bbf2b43c79e08c12c3b9bf700f8a4741c749R100-R110), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-00924ce3be46a57d6f5699fa1ac625c6cb73eb802efaab778d62885ad3f9dee7R457-R467), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-0f757e1715e5038f648c0318c4924fc1ed6d289262ce697a30efb2724dcf3cfcR106-R130), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-b9a9e173286cde296cc006f031ec35f2bd0268982f83c5dcfb46dc4d63472ef0R81-R91), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-3ad39b82cdaea1659d707187a6043a01a0080b93a68f49fb8a7d98ee3283760cR100-R110))\r\n  * Add the `exclusionCriteria` property to the `SharedConfig` type and schema, which references the `SharedExclusionCriteria` type and schema ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-c958852e895141ed7f40ef05c570bbf2b43c79e08c12c3b9bf700f8a4741c749R34-R36), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-00924ce3be46a57d6f5699fa1ac625c6cb73eb802efaab778d62885ad3f9dee7R391-R393), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-0f757e1715e5038f648c0318c4924fc1ed6d289262ce697a30efb2724dcf3cfcR34-R36), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-b9a9e173286cde296cc006f031ec35f2bd0268982f83c5dcfb46dc4d63472ef0R34-R36), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-3ad39b82cdaea1659d707187a6043a01a0080b93a68f49fb8a7d98ee3283760cR34-R36))\r\n  * Add the `exclusionCriteria` property to the config object and the item object for the `ConsumeSharedPlugin` and the `ProvideSharedPlugin` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-545c55d1798dd44e1dc934ab0180669a92c2672369c08fcac5cb5a217edf9a8aR72), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-545c55d1798dd44e1dc934ab0180669a92c2672369c08fcac5cb5a217edf9a8aR102), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-39f49e6cddc6fe77beabbd28da52c44e76afa03c96341915c34428342f66fa35R57), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-39f49e6cddc6fe77beabbd28da52c44e76afa03c96341915c34428342f66fa35R66), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-d17cae8b91fcb66f2e343d48f07f5ca8cb9a3a71184d3b4de4ba80e66428ce1bR53-R58), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-d17cae8b91fcb66f2e343d48f07f5ca8cb9a3a71184d3b4de4ba80e66428ce1bR73))\r\n  * Add the `fallbackVersion` property to the `exclusionCriteria` property for the `ConsumeSharedPlugin`, which is set to the `version` property of the config object if it exists ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-0f757e1715e5038f648c0318c4924fc1ed6d289262ce697a30efb2724dcf3cfcR34-R36), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-0f757e1715e5038f648c0318c4924fc1ed6d289262ce697a30efb2724dcf3cfcR106-R130))\r\n  * Add the `path`, `semver`, and `utils` modules as dependencies for the `ConsumeSharedPlugin` and the `ProvideSharedPlugin` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-545c55d1798dd44e1dc934ab0180669a92c2672369c08fcac5cb5a217edf9a8aR8), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-545c55d1798dd44e1dc934ab0180669a92c2672369c08fcac5cb5a217edf9a8aL14-R15), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-39f49e6cddc6fe77beabbd28da52c44e76afa03c96341915c34428342f66fa35R11), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-d17cae8b91fcb66f2e343d48f07f5ca8cb9a3a71184d3b4de4ba80e66428ce1bL11-R11), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-260b12729ec74ae844ab979b5bb4344874cd0a89eeb39dc78a66d284a44a2919R11))\r\n  * Add the `validateShareOptions` function to the `utils` module, which performs additional validation logic for the share options and throws an error if any of the options have both `exclusionCriteria` and `singleton` set to true ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-260b12729ec74ae844ab979b5bb4344874cd0a89eeb39dc78a66d284a44a2919R314-R331))\r\n  * Add the `exclusionCriteria` property to the `ConsumeSharedFallbackDependency` class, which holds the criteria used to exclude modules or version ranges from sharing for the dependency ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-97cf9595aa0477127a56ec4cdc2431f0b916d0f813821466b99018eb800287a9R47))\r\n  * Add a variable declaration for the `consumedModule`, which is an instance of the `ConsumeSharedModule` class, representing a module that consumes a shared module ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-545c55d1798dd44e1dc934ab0180669a92c2672369c08fcac5cb5a217edf9a8aL246-R250))\r\n  * Add a block of code that checks if the `exclusionCriteria` is provided for the `consumedModule`, and if so, performs a check against the resolved import and the fallback version to determine if the consumption should be excluded ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-545c55d1798dd44e1dc934ab0180669a92c2672369c08fcac5cb5a217edf9a8aR259-R314))\r\n  * Add a block of code that checks if the `exclusionCriteria` is provided for the shared module in the `ProvideSharedPlugin`, and if so, performs a check against the version of the module using the `satisfy` and `parseRange` functions from the `semver` module ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-39f49e6cddc6fe77beabbd28da52c44e76afa03c96341915c34428342f66fa35R150-R156))\r\n  * Add a call to the `validateShareOptions` function in the `SharePlugin`, passing the `sharedOptions` array, which contains the options for each shared module ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-d17cae8b91fcb66f2e343d48f07f5ca8cb9a3a71184d3b4de4ba80e66428ce1bR46))\r\n* Update the generated code for the schema validation files for the `ModuleFederationPlugin`, the `ConsumeSharedPlugin`, the `ProvideSharedPlugin`, and the `SharePlugin` to reflect the changes in the JSON schema files ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-8826bf3c861f8076f252a8551a5adfc06c6b0889c3d1850abc9fede8a81833b0L6-L5), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-3b886fe71f47b4dd8f67cca07101d5e285cfae983b39b19bfdcb5869c63946cbL6-L5), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-401ae14f0716323eb158640030411d3afc9b8780339b18096719055804776e35L6-L5), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-a9f08ce102400ae856f182ee1081886b4379694cfb5731b0e2bb273c210f0870L6-L5))\r\n* Add test cases for the new feature of excluding modules from sharing based on the exclusion criteria ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-32ba6e120aa108717a494a144e44217386ab165ad58159393dca62b0589cc5cbL1-R36), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-4904738eefeef61f9d3d5a98e81c0062e47a1e242222c6918a28002da3e25b92L1-R8), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-75d579e6f15be3e747c8618e429ff3b125fa4069bc09371ba51f7e33b6ba4642L1-R8), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-daf5076ba23c2a9f781934429b099461690c56e86a1c4949bce85439164c3148R1-R28), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-5ad753a401f96d0cd52ef20fb2e942064e23149fa2bafa271adba9391b69ad0dL265-R300), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-e744aff9dfe9a0652918222082b7d2051e3f86f694bdc4d83a3c72ade4a39bb4L5-R9))\r\n  * Add a test case in `test\/configCases\/container\/container-exclude-sharing` to test the feature with the `ModuleFederationPlugin` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-32ba6e120aa108717a494a144e44217386ab165ad58159393dca62b0589cc5cbL1-R36), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-4904738eefeef61f9d3d5a98e81c0062e47a1e242222c6918a28002da3e25b92L1-R8), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-75d579e6f15be3e747c8618e429ff3b125fa4069bc09371ba51f7e33b6ba4642L1-R8), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-daf5076ba23c2a9f781934429b099461690c56e86a1c4949bce85439164c3148R1-R28))\r\n  * Add a test case in `test\/configCases\/sharing\/consume-module` to test the feature with the `SharePlugin` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-5ad753a401f96d0cd52ef20fb2e942064e23149fa2bafa271adba9391b69ad0dL265-R300), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17425\/files?diff=unified&w=0#diff-e744aff9dfe9a0652918222082b7d2051e3f86f694bdc4d83a3c72ade4a39bb4L5-R9))\r\n\r\n## First PR based on the discussion here: https:\/\/github.com\/webpack\/webpack\/issues\/17404#issuecomment-1597285835\r\n\r\n### New property `exclusionCriteria`\r\n\r\nThis new property is a object that in the current PR accepts a version range object using the `version` property.\r\n\r\nThe following logic is used for excluding a module\/package from sharing\r\n\r\n#### ProvideSharedPlugin\r\n1. Check if `exclusionCriteria.version` is defined.\r\n2. If yes, check if `version` is defined. If `version` is not provided, attempt to find version from closest `package.json`.\r\n3. Check if version satisfies the exclusion range. If yes, exclude, else include.\r\n\r\n#### ConsumeSharedPlugin\r\n\r\nThis plugin is more involved since there is no \"inherent\" version, but there is only `requiredVersion`. While it is possible to do range intersection of `requiredVersion` and `exclusionCriteria.version`, the current semver util lib in webpack makes this difficult to do. Instead, we pass the `version` property from ModuleFederationPlugin as `exclusionCriteria.fallbackVersion`, and use that version to check. If this property is missing, use the nearest `package.json` file corresponding to the resolved import.\r\n\r\nIf neither conditions match, it will be shared.\r\n\r\nI've added inline comments to the PR to explain what I'm doing. Open to feedback\/suggestions, thank you.\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@alexander-akait Friendly bump","@tmpaul Sorry for long delay (long store), is it still valid?","> @tmpaul Sorry for long delay (long store), is it still valid?\r\n\r\n@alexander-akait Yes. Due to the time gap, I assumed that it would not be reviewed. I have merged the latest changes. Please take a look when you can","@ScriptedAlchemy Hello, what do you think about this PR?\r\n"],"labels":["PR: unreviewed"]},{"title":"feat: remove unused css from final bundle when using css modules","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 59987dc<\/samp>\n\nThis pull request adds a new feature for CSS dead code removal, which eliminates unused class names and selectors from CSS modules in the output bundle. It also adds support for CSS modules with nested selectors and media queries, which require new dependency types and templates. It also updates the test cases for CSS modules to reflect the new feature and the new syntax. The main files affected are `lib\/css\/CssModulesPlugin.js`, `lib\/css\/CssParser.js`, `lib\/dependencies\/CssLocalIdentifierDependency.js`, `lib\/dependencies\/CssSelfLocalIdentifierDependency.js`, `lib\/dependencies\/CssModuleDefineDependency.js`, `lib\/util\/internalSerializables.js`, and the files under `test\/configCases\/css\/css-dead-code-removal` and `test\/configCases\/css\/css-modules`.\r\n\r\n## Details\r\n\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 59987dc<\/samp>\n\n*  Introduce a new dependency type `CssModuleDefineDependency` to represent CSS module definitions with nested selectors and media queries ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-055cd9bccc822214bd8cc7262e226ffefa13f07f9080f6e4cad7f6bdc471e940R1-R241), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-48300ec9215ae0f99dcfc8a85080f12e464793b6e855f7e0687f74aad4fc7c1bR23), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-48300ec9215ae0f99dcfc8a85080f12e464793b6e855f7e0687f74aad4fc7c1bR127-R130), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-ef63b4182257c6097c9ee4bb5a99494df20bc47d405cfe3ee3156c94b164ac09R74-R75))\n*  Modify `CssParser` to use a stack of `CssModuleDefineDependency` instances to keep track of the current CSS module definitions when parsing CSS modules ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-37ddc51f6c610706a74ec7aa006cbe834fb0d9ef9d69e58af824c5ac0f32a054R16), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-37ddc51f6c610706a74ec7aa006cbe834fb0d9ef9d69e58af824c5ac0f32a054R161-R169), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-37ddc51f6c610706a74ec7aa006cbe834fb0d9ef9d69e58af824c5ac0f32a054R221-R223), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-37ddc51f6c610706a74ec7aa006cbe834fb0d9ef9d69e58af824c5ac0f32a054R832-R854), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-37ddc51f6c610706a74ec7aa006cbe834fb0d9ef9d69e58af824c5ac0f32a054L835-R920))\n*  Modify `CssLocalIdentifierDependency` and `CssSelfLocalIdentifierDependency` to take an optional `parentCssModule` parameter and property of type `CssModuleDefineDependency` to store a reference to the parent CSS module definition, if any ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-9bf760a85c5f4670fd86981a9c38529a288886ea0169d76bcd592496a0afccf6R9), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-9bf760a85c5f4670fd86981a9c38529a288886ea0169d76bcd592496a0afccf6L24-R32), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-9bf760a85c5f4670fd86981a9c38529a288886ea0169d76bcd592496a0afccf6R65), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-9bf760a85c5f4670fd86981a9c38529a288886ea0169d76bcd592496a0afccf6R77), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-ee9e3b5379c262529060d26274fa175e728cba6c40de28207a44cbf82c23bcf3R21), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-ee9e3b5379c262529060d26274fa175e728cba6c40de28207a44cbf82c23bcf3L26-R38))\n*  Modify `CssParser` to pass the `parentCssModule` argument to the constructors of `CssLocalIdentifierDependency` and `CssSelfLocalIdentifierDependency` when creating them for class names, custom property names, and custom property values in rules and selectors ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-37ddc51f6c610706a74ec7aa006cbe834fb0d9ef9d69e58af824c5ac0f32a054L389-R406), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-37ddc51f6c610706a74ec7aa006cbe834fb0d9ef9d69e58af824c5ac0f32a054L413-R433), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-37ddc51f6c610706a74ec7aa006cbe834fb0d9ef9d69e58af824c5ac0f32a054L600-R625), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-37ddc51f6c610706a74ec7aa006cbe834fb0d9ef9d69e58af824c5ac0f32a054L631-R660), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-37ddc51f6c610706a74ec7aa006cbe834fb0d9ef9d69e58af824c5ac0f32a054L849-R931), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-37ddc51f6c610706a74ec7aa006cbe834fb0d9ef9d69e58af824c5ac0f32a054L884-R970))\n*  Add a new test case `css-dead-code-removal` to test the CSS dead code removal feature by importing some used and unused class names from CSS modules and checking if they are renamed or removed in the output bundle ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-cdf1131a89617e2d2f0a1f4e3c3fa96effeba7c7937d61008991059eb36649e2R1-R21), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-d56142925589f4c15a02d5880df831b723ae636438ca261c2638437c20a3426bR1-R46), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-05d437c584a39668b7fb33a99231911af22e82f82a14f121757cbee95158804eR1-R308), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-94f5da16a05f67c00a51918cf736c3fbb35c91cce395a3f7ef7895d9cee51818L1-R6), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-55389c0b9c3244e1bb1cfa9e8ea7d9542dcec326e3f41e3378412f9d35da76c0R1-R7), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-e01c1667bc908ab74d0b179545317c96d75478cee34dff0034a3670c3568a5b6R1-R44))\n*  Update the expected warnings for the `css-modules` test case after the CSS dead code removal feature is implemented ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17421\/files?diff=unified&w=0#diff-fec389fae76710026b96eb296a734a96d51b91b13ebe4b0f8c86b078cfbaaa69L2-R7))\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"Add experimental option to skip loader options schema checking","body":"Found this saves quite a bit of time for each call to the loader, but especially the first time as it skips loading ajv\n\n<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\n\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\n<!-- Try to link to an open issue for more information. -->\n\n## Summary\n\n<!-- cspell:disable-next-line -->\n\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 2f22e07<\/samp>\n\nThis pull request introduces a new option `skipLoaderOptionsSchemaChecking` that allows users to skip the schema validation of the loader options for faster builds. It modifies the file `lib\/NormalModule.js` to implement the option logic and the file `schemas\/WebpackOptions.json` to update the schema definition.\n\n## Details\n\n<!-- cspell:disable-next-line -->\n\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 2f22e07<\/samp>\n\n*  Add `skipLoaderOptionsSchemaChecking` option to webpack options to improve performance ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17343\/files?diff=unified&w=0#diff-a5db25852bfa94348bb69d94ab95dbef8474d789240b4345cf518e5dd64547ccL584-R584), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17343\/files?diff=unified&w=0#diff-0cdb656a2796a80418de2964257360de642bd5a770102d52366890a65aa912a0R836-R839))\n  - Skip schema validation of loader options in `lib\/NormalModule.js` if option is `true` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17343\/files?diff=unified&w=0#diff-a5db25852bfa94348bb69d94ab95dbef8474d789240b4345cf518e5dd64547ccL584-R584))\n  - Document and validate option in `schemas\/WebpackOptions.json` with boolean type and description ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17343\/files?diff=unified&w=0#diff-0cdb656a2796a80418de2964257360de642bd5a770102d52366890a65aa912a0R836-R839))\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: timneutkens \/ name: Tim Neutkens  (2f22e072df721e7285fbdd2c23e7cae4efbd3c9d, 465007b40d5d4ed307b7be6c54722a9e7531fb78)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@timneutkens Yeah, it can help, but I think the valid implementation is WeakCache (i.e. don't validate options which will be validated), we can't just skip it, because developers start to disable it and make errors, also just for intresting - can you compare benches with and without ","> but I think the valid implementation is WeakCache\r\n\r\nI'd like to avoid this as we're already having memory issues as-is with larger Next.js applications. In case of Next.js we know the configuration for all loaders so the checking is \"dead time\" in a way. What I found is that on a small application with a single `.css` file it shaves off about 60ms, any additional `.css` file would take another 20ms. In Next.js we already don't pass a schema to getOptions for the loaders that we use internally, only exception is mini-css-extract-plugin which is why it only affects `.css` in Next.js. Alternatively I can vendor the mini-css-extract-plugin code and make the change there, this seemed like the better approach though.","@timneutkens I understand this, but ideally solve this problem not only for `Next.js`\r\n\r\n> I'd like to avoid this as we're already having memory issues as-is with larger Next.js applications\r\n\r\nBut you already have options object, so I don't see a lot of memory overhead, we just do not run validation on already validated options\r\n\r\nAs an alternative solution we can implement https:\/\/github.com\/webpack\/webpack\/blob\/465007b40d5d4ed307b7be6c54722a9e7531fb78\/lib\/NormalModule.js#L561 with an additional argument `skipValidation`, so you can skip it when you know your own options","@timneutkens I think I found the best solutions for everyone:\r\n\r\nI did some research about schema-utils perf, if you have a lot of modules we try to validate schema in every loader calls and it takes a lot of time, really:\r\n- We can't cache schema + options, because on every loader call we create a new object with options, maybe we can change this behaviour, but it is tricky and required major release, some bad loaders use it to store different values between different calls, it is dirty way, but developers use it\r\n- But, we can cache compiledSchema https:\/\/github.com\/webpack\/schema-utils\/blob\/master\/src\/validate.js#L124, because schema is always the same (i.e.  require(\".\/options.json\") in the each loader) we will not spend time on it, we can use WeakCache to allow gc keep memory feels good\r\n- Very often loaders are used without options, so we can skip schema validation for empty objects, but there is required  and some other keywords (anyOf , oneOf  and etc too) and in such cases an empty options object should be failed (because you need to set some required options), our official loaders usually do not use such things, but we can't say the same for other non official loaders, technically we can use this logic - try to compile schema on the first call, if options is empty object cache it and skip in future validation for an empty object and the same schema, but validation empty object is very fast with cache compiled schema (from above) and I don't see any wins here\r\n- When you run a production build you don't need to validate options at all in 99.99%, because you configurate options in the development  mode, you don't need to spend compilation time on validation, so what we can do here - implement API for schema-utils - enableValidation  and disableValidation , these options allow to disable validation at all, so validate(schema, options)  call will do nothing, on webpack side - new  skipValidation option, if true we use disableValidation and disable validation at all, tools like CRA , next.js  and other developers which know your configuration and don't allow to modify them by users can set it to true  and for production and for development mode. Also we have futureDefaults which already speedup build around 20-30%, we can do more and for webpack 6 setup skipValidation: true  by default for production\r\n","So shorty:\r\n- New options `skipValidation` (by default `false`)\r\n- `skipValidation: true` we use `schemaUtils.disableValidation()` API and `validate` calls in loaders and plugins do nothing\r\n- `futureDefaults: true` (i.e. default options for webpack v6) will set `skipValidation` to `true` only for production builds, so in future we will not validate options for the production mode at all\r\n\r\nYou will have two abilities to control validation:\r\n- use `skipValidation`\r\n- use raw `schema-utils` API to enable\/disable options validation\r\n\r\nI think it should solve most of cases and improve perf for many developers, some companies and developers can use `skipValidation: true` if they don't change configuration or know what they change","So you don't need to modify loaders\/plugins code"],"labels":["PR: unreviewed"]},{"title":"feat: minimize css when css experiment is enabled","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nPart of https:\/\/github.com\/webpack\/webpack\/issues\/14893\r\n> css minimizer\r\n\r\nMaybe we could start with using the existing webpack plugin rather than building another one from scratch?\r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at d3ad1ac<\/samp>\n\nThis pull request adds support for CSS minification as an experimental feature in webpack 5. It introduces a new dev dependency, `css-minimizer-webpack-plugin`, and modifies the default configuration, the test framework, and the test cases to enable and verify the feature.\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at d3ad1ac<\/samp>\n\n*  Add CSS minification as an experimental feature in webpack 5 ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17309\/files?diff=unified&w=0#diff-c0078e4713a0e7a24dbc56d6dfda3cf139376325fc65ea70a8389d4d30b27f04R1354-R1359), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17309\/files?diff=unified&w=0#diff-7ae45ad102eab3b6d7e7896acd08c427a9b25b346470d7bc6507b6481575d519R17))\n* Modify `describeCases` function in `test\/ConfigTestCases.template.js` to append `css-minimizer-webpack-plugin` to the `minimizer` array if `css` experiment is enabled ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17309\/files?diff=unified&w=0#diff-9c103db668ffcbafc9bfb3b93055a40c9576fa72211631de81ffa83f666ac5deL99-R102))\n* Add a new test case for CSS minification in `test\/configCases\/optimization\/css-minimize` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17309\/files?diff=unified&w=0#diff-c03df477a8048bda55ce702589742003cfc28e4d4d5e3ed1ab408954ca0c076fR1-R10), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17309\/files?diff=unified&w=0#diff-338f8f6895599244cc20f852a5dfbe8ffbe736b3aa5f8c4dc8167c86206e4b5bL1-R2), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17309\/files?diff=unified&w=0#diff-e81237c7b53e185766cf839f6bdf1d285ae5ceb3a9afac9432d4bc0f6295c5d7R1-R8), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17309\/files?diff=unified&w=0#diff-ae20d51fa3bbfbd8be2700edf9af1eb17651bb9a4f59b9a1fdb6e094b8d6fafeR1-R35))\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","> I think we should postpone it for webpack v6, cssnano is big and slow and we need to think about it deeply, perhaps we can collaborate with the rspack team\r\n\r\nIf speed is the concern then we could try out [LightningCSS](https:\/\/lightningcss.dev\/). `css-minimizer-webpack-plugin` has support for LightningCSS - https:\/\/lightningcss.dev\/docs.html#with-webpack\r\n\r\nThough a different problem with `css-minimizer-webpack-plugin` is Node v10 support. ","@hardfist We should collaborate here, maybe not this exact implementation but have a common goal for CSS minification for native CSS support? ","> @hardfist We should collaborate here, maybe not this exact implementation but have a common goal for CSS minification for native CSS support?\r\n\r\nwe are using swc-css to minify css because we are also using swc-css to support native css\uff0cbut swc-css might have bigger size than lightning css\uff0cwhich may be a concern for webpack\r\nif we use lightning-css or swc-css in webpack\uff0cshould we use the wasm version or napi version\uff1fsince webpack 5 still sipports node10 then it may have some compatible in old node version","@hardfist Node.js 10 is not our radar, so we can say - if you want the latest feature - do not use node.js 10, you the latest LTS, but yeah wasm solution will be fine (still need check perf)","since webpack already implemented a css parser for native css support, it seems webpack could reimplement the css minification using the same parser(same parser for parse & minification seems ideal, but it maybe out of scope)","> I think we should postpone it for webpack v6, cssnano is big and slow and we need to think about it deeply, perhaps we can collaborate with the rspack team\r\n\r\nI agree with that, webpack's default css minifier should be small & fast otherwise people may blame webpack for speed, and it seems vite5 may plan to choose lightning css as css minifier https:\/\/github.com\/vitejs\/vite\/discussions\/12466#:~:text=Vite%205%20will%20give%20us%20a%20new%20opportunity%20to%20introduce%20breaking%20changes%20(that%20will%20probably%20be%20needed%20if%20we%20end%20up%20using%20Lightning%20CSS%20instead%20of%20PostCSS%20for%20example).","@hardfist yeah, but there is a performance bottleneck between js and rust - serialization (you know :smile: ), I honestly don't know what would be better for us:\r\n- on the one hand, implement another minifier is a bad idea, I already implemened swc css minification (there are still a lot of improvement, but it is out of this dicussion) and there is a cssnano, which is also under my responsibility\r\n- on the other side - cssnano built on PostCSS, it is slow and have a big size, using swc minificator will cost perfomance for us due serialization\r\n\r\n","Perhaps we should really look at wasm and focus our efforts on swc minificator","serialization maybe not a problem for minify but a problem for parse\uff0cif size is not a concern for webpack i think swc minification or lightingcss is a better option for css minify","Yeah, I will think about it more","vite has added support for lightningcss https:\/\/github.com\/vitejs\/vite\/pull\/12807","@burhanuday We've been supporting this for a long time (minimizers), even more - we support all known CSS minimizer"],"labels":["PR: reviewed-changes-requested","PR: conflict"]},{"title":"Apply same ESM\/CJS interop in `.mts`\/`.ts` files as in `.mjs`\/`.js` files","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\nWebpack changes the behavior of imports of CJS files with `__esModule` to be more compatible with Node when the importing file extension is `.mjs`, or `.js` in scope of a package.json with `\"type\": \"module\"`:\r\n\r\n```js\r\n\/\/ @Filename: dep.js\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = \"default\";\r\n\r\n\/\/ @Filename: main1.js\r\nimport dep from \".\/dep.js\";\r\nconsole.log(\"from .js\", dep);\r\n\r\n\/\/ @Filename: main2.mjs\r\nimport dep from \".\/dep.js\";\r\nconsole.log(\"from .mjs\", dep);\r\n```\r\n\r\n```\r\nfrom .js default\r\nfrom .mjs { [__esModule], default }\r\n```\r\n\r\nFor TypeScript to offer checking behavior that reflects this, the behavior of `.ts` files needs to match the behavior of `.js` files, and the behavior of `.mts` files needs to match the behavior of `.mjs` files. However, Webpack doesn\u2019t know what these extensions are, so they don\u2019t get considered for Webpack\u2019s Node-like ESM\/CJS interop layer. If I add `main3.mts` with identical content, I get:\r\n\r\n```\r\nfrom .js default\r\nfrom .mjs { [__esModule], default }\r\nfrom .mts default\r\n```\r\n\r\nThe fact that a default import behavior is different in a `.mjs` and `.mts` file makes it impossible for TypeScript to implement a module checking mode for Webpack.\r\n\r\n**What is the expected behavior?**\r\n\r\n1. The behavior of an import in Webpack does not change when renaming the importing file extension between `.ts` and `.js`, `.mts` and `.mjs`, or `.cts` and `.cjs`.\r\n2. Module syntax and interop restrictions placed on `.js`\/`.mjs` files based on their extension or package.json `\"type\"` are also applied to their TypeScript counterparts. For example, whenever it\u2019s an error to `require` an ESM file or to use `import`\/`export` syntax in a file in Webpack, that error should persist when renaming the file to its equivalent TypeScript file extension. (This is less important to us than (1).)\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nI\u2019m trying to implement better support for bundlers in TypeScript, and this behavior of differentiating module interop based on file extension, but not including TS file extensions in that differentiation, is a blocker. (I can explain why if necessary, but I don\u2019t think it\u2019s super relevant here.) We\u2019re tracking at https:\/\/github.com\/microsoft\/TypeScript\/issues\/54102\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nI\u2019m not a Webpack expert, but it seems like there could be advantages to letting the loader API set the module format:\r\n\r\n- No TypeScript-specific carve-outs need to be implemented in Webpack core\r\n- Other non-TS loaders that consume non-JS file extensions could adopt this behavior if desired\r\n- Webpack could expose the new API in a SemVer minor, while ts-loader et al. could adopt it in a SemVer major, which would probably be easier for users to adopt than waiting for a new Webpack major version\r\n\r\nThe goal for us would be that TypeScript\/Webpack users get consistent behavior between .ts\/.js files by default in the near future.\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nHappy to discuss solutions, and can potentially put up a PR with guidance if necessary\r\n\r\n**Additional info**\r\n\r\nI forked Tobias\u2019s interop-test repo while researching this issue, and have changed quite a bit to show how various bundlers handle TS extensions and what they do with this issue in particular. Notably, esbuild exhibits the behavior we\u2019re advocating for. Take a look at https:\/\/andrewbranch.github.io\/interop-test\/#synthesizing-default-exports-for-cjs-modules if interested.","comments":["Sorry, we can't, it was dicussed a lot of time and you can found a lot of issues about it (in 2020, 2021, 2022), people still have mix of esm and commonjs code, it will be big breaking change for webpack v5\r\n","> it was dicussed a lot of time and you can found a lot of issues about it (in 2020, 2021, 2022)\r\n\r\nThis is not possible, because the TypeScript-specific file extensions I\u2019m referring to were first created one year ago, in 2022.\r\n\r\n> Developer can setup `type: \"javascript\/esm\"` on the loader level\r\n\r\nCan you say more about this? It sounds like what I\u2019m proposing, but I couldn\u2019t find anything about it in the docs. https:\/\/webpack.js.org\/guides\/ecma-script-modules\/#flagging-modules-as-esm doesn\u2019t give much info on how a loader would interact with this.","> This is not possible, because the TypeScript-specific file extensions I\u2019m referring to were first created one year ago, in 2022.\r\n\r\nI mean other developers ask this question (not you :smile: )\r\n\r\n> Can you say more about this? It sounds like what I\u2019m proposing, but I couldn\u2019t find anything about it in the docs. https:\/\/webpack.js.org\/guides\/ecma-script-modules\/#flagging-modules-as-esm doesn\u2019t give much info on how a loader would interact with this.\r\n\r\n```js\r\nconst path = require(\"path\");\r\n\r\nmodule.exports = {\r\n\tmode: \"production\",\r\n\tdevtool: \"source-map\",\r\n\tentry: {\r\n\t\tmain: \".\/src\/entry.mjs\",\r\n\t},\r\n\tmodule: {\r\n\t\trules: [\r\n\t\t\t{\r\n\t\t\t\ttest: \/main1\\.js$\/,\r\n\t\t\t\ttype: \"javascript\/esm\",\r\n\t\t\t}\r\n\t\t],\r\n\t},\r\n};\r\n```\r\n\r\noutput:\r\n```\r\nfrom .js { default: 'default' }\r\nfrom .mjs { default: 'default' }\r\n```\r\n","Yeah, that doesn\u2019t look like something we can expect every user to set up in their own ts-loader config. Also, it doesn\u2019t seem like it allows the `type` for a `.ts` file to be set based on its package.json context. User-land config may be an interim solution, but at some point we would expect webpack + [any TypeScript loader] to implement an interop behavior that is possible to type check without additional configuration.","@andrewbranch esbuild and webpack do the same:\r\n```\r\nesbuild --bundle .\/src\/entry.mjs &> esbuild.js && node esbuild.js\r\n```\r\n\r\noutput:\r\n```\r\nfrom .js default\r\nfrom .mjs { default: 'default' }\r\n```\r\n\r\nwebpack\r\n\r\n```\r\nwebpack-cli && node .\/dist\/main.js\r\n```\r\n\r\noutput:\r\n```\r\nfrom .js default\r\nfrom .mjs { default: 'default' }\r\n```\r\n\r\nI think without additional options on typescript level it is impossible to solve, look at other bundlers, they have the same problem and provide option(s) to change logic (some of them are broken by default :smile: ), so developers can setup any configuration and you will not work out of the box.\r\n\r\n> Yeah, that doesn\u2019t look like something we can expect every user to set up in their own ts-loader config. Also, it doesn\u2019t seem like it allows the type for a .ts file to be set based on its package.json context. User-land config may be an interim solution, but at some point we would expect webpack + [any TypeScript loader] to implement an interop behavior that is possible to type check without additional configuration.\r\n\r\nWebpack knows nothing about ts-loader (other loaders). So you can ask about it `ts-loader` developers. We internally discussed about changing it before release webpack v5, but when checking popular repositories at that time, it broke almost everything, now I think the situation is much better, but unfortunately still not good enough.\r\n\r\nTechnically you are right and I agree that `\"type\": \"module\"` should set `\"javascript\/esm\"` everywhere, we can start warning about potential problems and then, in future, enable it by default (I think we have an issue about it)","> Technically you are right and I agree that `\"type\": \"module\"` should set `\"javascript\/esm\"` everywhere\r\n\r\nThis is very much not what I\u2019m proposing. What we need is for `.ts` files to act like `.js` files and `.mts` files to act like `.mjs` files. That\u2019s all.\r\n\r\n> I think without additional options on typescript level it is impossible to solve\r\n\r\nI am the person trying to make additional options in TypeScript; that\u2019s why I opened this issue \ud83d\ude04 Additional options are impossible for us to make for bundlers that can\u2019t treat TS extensions the same as JS extensions.\r\n\r\n> esbuild and webpack do the same\r\n\r\nPlease see https:\/\/andrewbranch.github.io\/interop-test\/#synthesizing-default-exports-for-cjs-modules again\u2014esbuild differs between `.mjs` and `.js` files like Webpack; I think this is good \ud83d\udc4d. But esbuild also treats `.mts` and `.mjs` files the same (good \ud83d\udc4d), where Webpack treats them differently (bad \ud83d\udc4e). That\u2019s why esbuild gets the \ud83d\udc99 in the table and Webpack does not. My goal here is to get Webpack a \ud83d\udc99.","> Please see https:\/\/andrewbranch.github.io\/interop-test\/#synthesizing-default-exports-for-cjs-modules again\u2014esbuild differs between .mjs and .js files like Webpack; I think this is good +1. But esbuild also treats .mts and .mjs files the same (good +1), where Webpack treats them differently (bad -1). That\u2019s why esbuild gets the blue_heart in the table and Webpack does not. My goal here is to get Webpack a blue_heart.\r\n\r\nHm, can you provide an example with webpack configuration and code? I may be confused because it should work identically, if not, I want to say it is a bug on ts-loader side, but I want to investigate ","And what output do you expect, just to clarify","https:\/\/github.com\/andrewbranch\/example-webpack-ts-extensions\r\n\r\nI would be thrilled if it were a ts-loader bug, but I didn\u2019t think loaders had a way of controlling this.","> I would be thrilled if it were a ts-loader bug, but I didn\u2019t think loaders had a way of controlling this.\r\n\r\nThank you, I will look soon, webpack doesn't know when source code is stricky ESM, so I am afraid we can't do this without loader API, `mts` and `cts`, and even `ts` are unknown extensions :smile: \r\n\r\nBut I will provide more feedback later","@andrewbranch I looked at code and yeah, `type: \"javascript\/esm\"` solves the problem, technically it can be fixed here https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/config\/defaults.js#L633, just change it to `test: \/\\.m(js|ts)$\/i,`, **but**:\r\n- webpack doesn't know non standard extensions and I think loader should do this things \r\n- Is it possible to generate `commonjs`\/other in `mts`? Is it **always** ESM? I don't know some small details so need to clarify\r\n- Another very simple solution is put `loaderContext._module.type = \"javascript\/esm\";` in ts-loader, here https:\/\/github.com\/TypeStrong\/ts-loader\/blob\/main\/src\/index.ts#L136 (it will not work for `happypack`, but it is not popular usage, for happypack users the solution is set `type: \"javascript\/esm\"` manually)\r\n\r\nI think the last solution is better because only ts-loader and typescript know when the source code is ESM (I think typescript can have API to get it, at the least there is `tsconfig.json` to undestand it). \r\n\r\nAlso I can implement public API to change `type` of a module (but it will require some dicussions some loaders may start to abuse it and this is not very good, although it is still possible) to avoid using `_module`.\r\n\r\nAnd yes - updating ts-loader docs for ESM will be great too. \r\n\r\nAlso my concern is that if we add `cts` and `mts`, other tools can start to ask do add them extensions too, this will make many settings inflexible and may create a situation when, with a new update of a tool we will need to change something, and this may be a breaking change(s).","I agree that a loader would be a good place to set the module kind. It\u2019s great that there\u2019s a (private API?) way to do it already!\r\n\r\n> Is it possible to generate commonjs\/other in mts?\r\n\r\nOnly under unsupported combinations of tsconfig options. I\u2019m looking into making those combinations illegal.\r\n\r\n> Also I can implement public API to change `type` of a module (but it will require some dicussions some loaders may start to abuse it and this is not very good, although it is still possible) to avoid using `_module`.\r\n\r\nI think this would be great. Please keep me posted on these discussions. Thanks for looking into this!","> Only under unsupported combinations of tsconfig options. I\u2019m looking into making those combinations illegal.\r\n\r\nYeah, it will be good \r\n\r\n> I think this would be great. Please keep me posted on these discussions. Thanks for looking into this!\r\n\r\nTheoretically, we can fix it right now :smile: Also if we will use `loaderContext._module.type = \"javascript\/esm\";` we will support old webpack versions too, then we can implement public API to change it, so almost every webpack versions (for 5) will work with it","Yeah. I\u2019ll plan to open a PR on ts-loader (maybe some others?), but a public API would be good, just so I can be sure the functionality will be available in future Webpack versions.","@andrewbranch I agree, maybe we should just add test cases to avoid regression in future, I will do it when we shipped it to `ts-loader`, so we it will be a guarantee for us (not 100%), but better than nothing","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","https:\/\/github.com\/TypeStrong\/ts-loader\/pull\/1614 seems to be stalled in the ts-loader side, so I'm going to be \"that guy\" to keep the thread alive for a little longer until the official public API for this makes its way into webpack \ud83d\ude04 ","The root of the stalling is actually my part on TypeScript itself \ud83d\ude05","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Still valid for ts-loader","Yes, a small update: I\u2019m finally unblocked to work on the TS side of this issue and hope it will land in 5.5. Thanks for the patience!","@andrewbranch Friendly ping, any news? Do you need a help?","This is a prerequisite: https:\/\/github.com\/microsoft\/TypeScript\/pull\/57896\r\n\r\nIf this lands within a week or two, I probably have time to do the second part in TS in time to ship in 5.5."],"labels":["question"]},{"title":"feat(#16618): add real error message in jsonp evaluation error","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary\r\nPR for the issue #16618 : The real error message has been added to webpack error log in case of an error during evaluation of the script (syntax errors like safari regex with lookbehind). \r\n\r\nYou can review the changes on the reproducible repo i made for the mentioned issue:\r\nhttps:\/\/aespinolopez.github.io\/webpack_script_evaluation_error\/\r\n\r\ncc @alexander-akait\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 32d43f1<\/samp>\n\nImprove error handling for JSONP chunks in web targets. Add a global error listener and enhance error messages in `lib\/web\/JsonpChunkLoadingRuntimeModule.js`.\r\n\r\n## Details\r\nChanges to the runtime are weird to test as it is a template and i didn't find any test as a reference. Maybe I can test the error listener in isolation.\r\nThere are some errors in local tests due to a change of size of the runtime (4kb!??), there is an easy way to update those values \ud83e\udd72 ?\r\n\r\nBasically i'm adding a global error listener for each chunk and cleaning the listener on loadingEnded (executed both in error and load). I think order of events is deterministic so i don't expect any problem (an error during evaluation will be always triggered before the load event,  as [it is the last step](https:\/\/html.spec.whatwg.org\/#script-processing-model) during script processing)\r\n\r\ni would like also to change the error type from \"missing\" to a different value as if the load event triggers the resource has been loaded so i don't understand the meaning of missing there \ud83d\ude13 \r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 32d43f1<\/samp>\n\n*  Add global error listener for JSONP chunk scripts ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17273\/files?diff=unified&w=0#diff-99b22d1932803b7795bbe843d01cdf63d32e52a247610bfd9cffb95170227cc6L171-R185))\n* Append evaluation error message to original error message if exists ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17273\/files?diff=unified&w=0#diff-99b22d1932803b7795bbe843d01cdf63d32e52a247610bfd9cffb95170227cc6R195))\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: aespinolopez  (1ef08808a91400ec882a6dd3e85a211028bdd6cf, 437d9520b79d119362f068e530e8453f1821b7fa, 0aaa9ddfa7706d8f4f3157966d597fd100373e87, 86dbc087ba269d507c678ec11feed60161c5258f, d5093ef3d1599cd12bc69d25781914f4e7c7902d)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","i've made the wrong assumption that window will be available, i suppose i need to tackle cases for web workers \/ node no?","So, this MR will report the **error msg of root cause** of Webpack `ChunkLoadError: Loading chunk 456 failed. (error: https:\/\/example.com\/a.js)`,\r\nDo I understand correctly?\r\n\r\nIf so, I hope this MR will get merged ASAP. It is a tricky error msg, makes lot of user confused: https:\/\/stackoverflow.com\/questions\/69047420\/webpack-code-splitting-chunkloaderror-loading-chunk-x-failed-but-the-chunk-e\r\n\r\nThanks for your great work!","> \r\n\r\nHi @JuniorTour,  unfortunately this PR won't solve your issue, let me explain:\r\nFor this chunk loading error there are 3 possibilities:\r\n\r\n1. ChunkLoadError: Loading chunk X failed. (**error**: \r\n2.  ChunkLoadError: Loading chunk X failed. (**timeout**:\r\n3.  ChunkLoadError: Loading chunk X failed. (**missing**:  \r\n\r\nError case is triggered with error event on the script, so it means there was some problem related with networking, the error event won't give you much more info and to correlate with a network error you might need to use PerformanceObserver and it will give you at least the status code.\r\n\r\nTimeout case is specific from webpack, a timeout is defined when the script is added to the dom so if neither error or onload are triggered you will see this error\r\n\r\nMissing case is the one we are handling on this PR and it is very misleading as it happens when the load event is triggered but the chunk has not being executed, if the load event is triggered from a script it means that the resource has actually being loaded so in reality this means there has been a runtime error executing the script.\r\nThe error should be logged in console also but if you are reviewing logs from an APM tool you won't see the real reason on the log and this is the case i will try to solve with this PR.\r\n","Hi @TheLarkInn , @alexander-akait !\r\nFriendly ping on this topic, not sure if there is a lack of visibility as there is no assignee","Hi @alexander-akait \r\nSure, i can add it as an option. i'll work on it soon"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"ProfilingPlugin not rendering in Chrome","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nI'm getting an error when using the ProfilingPlugin. I get an error reporting that `n.args.data.frames is not iterable` when dropping the events.json into Chrome.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. Create new project with npx create-react-app test-project.\r\n2. Eject (cd test-project && npm run eject)\r\n3. Add new webpack.debug.ProfilingPlugin() to plugins section at config\/webpack.config.js\r\n4. Start dev server with npm start then shutdown it (or just npm run build).\r\n5. Drag and drop generated events.json into the Chrome DevTools Profiler.\r\n\r\nThe attached file gives me this experience: [events.json.zip](https:\/\/github.com\/webpack\/webpack\/files\/11525245\/events.json.zip)\r\n\r\nThese are the same steps defined in https:\/\/github.com\/webpack\/webpack\/issues\/11780 where @leimonio reported the same problem.\r\n\r\n\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nChrome should render the profiler as per the instructions in the Usage: https:\/\/webpack.js.org\/plugins\/profiling-plugin\/#usage-custom-outputpath\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.83.1\r\nNode.js version: v16.19.0\r\nOperating System: MacOSX\r\nAdditional tools:\r\nChrome version Version 113.0.5672.92","comments":["Can you try this https:\/\/github.com\/webpack\/webpack\/issues\/11780#issuecomment-763845922?","Due to this https:\/\/github.com\/webpack\/webpack\/issues\/11780#issuecomment-763840997","I've tried to reproduce this issue, and can confirm it occurs even after restarting the laptop. Just followed the steps @edhgoose mentioned above.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","This is not inactive - it's just hasn't picked up yet as an issue to resolve.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["inactive"]},{"title":"refactor: remove extra param","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nHi~ based on `statsFactory` hook signature and the way its called. I thinke the param `context` is redundant. so I just removed it.\r\n\r\n\r\n\r\nsignature\r\n```js\r\nstatsFactory: new SyncHook([\"statsFactory\", \"options\"]),\r\n```\r\n\r\ncall hook \r\n```js\r\ncreateStatsFactory(options) {\r\n  const statsFactory = new StatsFactory();\r\n  this.hooks.statsFactory.call(statsFactory, options);\r\n  return statsFactory;\r\n}\r\n```\r\n\r\nAnd this is my first pr,  feel free to close it if it's inappropriate.\r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\ncopilot:summary\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\ncopilot:walkthrough\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: lalalazero  (167517e806bbeb4a66ecbd7a00008c685aead868)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed"]},{"title":"feat: add preset configuration support to webpack","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary\r\n\r\nMotivation:\r\nCurrently, setting up Webpack configurations can be a time-consuming process, especially for new users. By introducing preset support, we aim to simplify this process and provide a more streamlined experience. Users can select a preset that aligns with their project requirements, reducing the need to write complex configurations from scratch.\r\n\r\nThis PR introduces a new feature to Webpack, allowing users to add presets as their configuration. A preset is a base configuration that can be extended from, providing a convenient way for users to set up their projects quickly and efficiently.\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\r\ncopilot:summary\r\n-->\r\n### <samp>\ud83e\udd16 Generated by Copilot at 15be2ad<\/samp>\r\n\r\nThis pull request adds a new feature to support `Presets` in webpack configuration. `Presets` are arrays of predefined options that can be applied to the whole configuration or to individual configurations in an array. The pull request introduces a new class `PresetProcessor` that uses the `webpack-merge` module to merge the preset configurations into the webpack options object. It also updates the `lib\/webpack.js`, `schemas\/WebpackOptions.json`, `lib\/config\/normalization.js`, `.eslintignore`, `package.json`, and `package-lock.json` files to enable and support the new feature.\r\n\r\n## Details\r\n\r\nThe syntax i am working towards is:\r\n```typescript\r\nmodule.exports = {\r\n  presets: WebpackOptions[]\r\n  \/\/ Other configuration options...\r\n};\r\n```\r\n\r\nso that the usage looks something like this\r\n\r\n```typescript\r\n\/\/ non existent packages\r\nconst react = require(\"react-preset-webpack\");\r\nconst tailwind = require(\"tailwind-preset-webpack\");\r\n\r\nmodule.exports = {\r\n  presets: [react(), tailwind()]\r\n  \/\/ Other configuration options...\r\n};\r\n```\r\n\r\nThis opens up the possibility to pass an options object to the plugin\r\n\r\n```typescript\r\n\/\/ non existent packages\r\nconst tailwind = require(\"tailwind-preset-webpack\");\r\n\r\nmodule.exports = {\r\n  presets: [tailwind({\r\n    config: \".\/tailwind.config.js\"\r\n  })]\r\n  \/\/ Other configuration options...\r\n};\r\n```\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\r\ncopilot:walkthrough\r\n-->\r\n### <samp>\ud83e\udd16 Generated by Copilot at 15be2ad<\/samp>\r\n\r\n*  Add support for presets in webpack configuration ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17171\/files?diff=unified&w=0#diff-cabfbdeecf612ff3fd25c03f2f6ff1ba78765ee15717e6ff2a42ee61bcf89da2R391), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17171\/files?diff=unified&w=0#diff-7979ef8b26e853797876ef65fffd2669a8c088f6ae7853028ed4b876f9f0be65L62-R64), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17171\/files?diff=unified&w=0#diff-0cdb656a2796a80418de2964257360de642bd5a770102d52366890a65aa912a0R3561-R3568), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17171\/files?diff=unified&w=0#diff-0cdb656a2796a80418de2964257360de642bd5a770102d52366890a65aa912a0R5277-R5279), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17171\/files?diff=unified&w=0#diff-0cdb656a2796a80418de2964257360de642bd5a770102d52366890a65aa912a0R5433-R5435))\r\n* Exclude `.mjs` files from linting process ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17171\/files?diff=unified&w=0#diff-a0fdacd2ade87c5238dde44378f574f7e123e669acdf8b740878b14b33b20275R28))\r\n* Add `webpack-merge` dependency to `package.json` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17171\/files?diff=unified&w=0#diff-7ae45ad102eab3b6d7e7896acd08c427a9b25b346470d7bc6507b6481575d519R31))\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@alexander-akait @TheLarkInn @snitin315 let me know your thoughts on this. if this is not the approach we want to take, i'll drop this","@TheLarkInn added a complex working example with the situation you mentioned above\r\n\r\nThe `webpack.config.js` has two presets `simple` and `react`. The `simple` preset depends on preset `css`\r\n\r\n```\r\nwebpack.config.js \r\n        => simple\r\n              => css\r\n        => react\r\n```","Opened a PR in webpack-merge to deep merge loader options - https:\/\/github.com\/survivejs\/webpack-merge\/pull\/206","The webpack-merge PR has been merged. It means that options will now be deep merged. This approach is viable \ud83c\udf89 ","@TheLarkInn friendly ping here","Let's rebase @burhanuday and this is going through review here this week. Appreciate the patience and work on this. \ud83d\udc4f","<!-- identifier: review-outdated -->\n\n@ Thanks for your update.\n\nI labeled the Pull Request so reviewers will review it again.\n\n@TheLarkInn Please review the new changes."],"labels":["PR: review-outdated"]},{"title":"fix: css url public path","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary\r\n\r\nfixes https:\/\/github.com\/webpack\/webpack\/issues\/16969\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 33215ce<\/samp>\n\nThis pull request adds a new feature to the CSS modules plugin that allows using a placeholder for the public path in the CSS source and dependencies. This enables the public path to be resolved at runtime instead of being hardcoded in the generated CSS assets. It also adds a test case to verify the functionality and refactors some code for clarity and consistency.\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 33215ce<\/samp>\n\n* Import `ReplaceSource` class and `getUndoPath` function to enable replacing public path placeholder in CSS module source ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17170\/files?diff=unified&w=0#diff-48300ec9215ae0f99dcfc8a85080f12e464793b6e855f7e0687f74aad4fc7c1bL8-R12), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17170\/files?diff=unified&w=0#diff-48300ec9215ae0f99dcfc8a85080f12e464793b6e855f7e0687f74aad4fc7c1bR32))\n* Obtain `filename` and `info` properties of CSS asset by calling `compilation.getPathWithInfo` and compute `publicPath` property using `getUndoPath` or `compilation.getAssetPath` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17170\/files?diff=unified&w=0#diff-48300ec9215ae0f99dcfc8a85080f12e464793b6e855f7e0687f74aad4fc7c1bR283-R300))\n* Replace `filenameTemplate` and `pathOptions` properties of CSS asset with `filename`, `info`, `publicPath`, and `modules` properties ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17170\/files?diff=unified&w=0#diff-48300ec9215ae0f99dcfc8a85080f12e464793b6e855f7e0687f74aad4fc7c1bL286-R313))\n* Add `publicPath` parameter to `renderContentAsset` method of `CssModulesPlugin` class and wrap `moduleSource` in `ReplaceSource` instance to replace public path placeholder ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17170\/files?diff=unified&w=0#diff-48300ec9215ae0f99dcfc8a85080f12e464793b6e855f7e0687f74aad4fc7c1bR496), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17170\/files?diff=unified&w=0#diff-48300ec9215ae0f99dcfc8a85080f12e464793b6e855f7e0687f74aad4fc7c1bR505), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17170\/files?diff=unified&w=0#diff-48300ec9215ae0f99dcfc8a85080f12e464793b6e855f7e0687f74aad4fc7c1bR522-R536))\n* Define `PUBLIC_PATH_PLACEHOLDER` constant as a special string to mark public path in CSS url dependencies and use it in `runtimeTemplate.assetUrl` calls in `CssUrlDependencyTemplate` class ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17170\/files?diff=unified&w=0#diff-c85dc2a9c290801c9f4e932610d2842ca2e5bb54822499d862680e19e7b71d61R28-R29), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17170\/files?diff=unified&w=0#diff-c85dc2a9c290801c9f4e932610d2842ca2e5bb54822499d862680e19e7b71d61L129-R131), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17170\/files?diff=unified&w=0#diff-c85dc2a9c290801c9f4e932610d2842ca2e5bb54822499d862680e19e7b71d61L138-R140), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17170\/files?diff=unified&w=0#diff-c85dc2a9c290801c9f4e932610d2842ca2e5bb54822499d862680e19e7b71d61R155))\n* Add test case to `test\/configCases\/css\/urls-css-filename\/index.js` to check styles in `div.css` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17170\/files?diff=unified&w=0#diff-503ef489e64731ba94842d9d2aa3ab32b22928520d82e49a2edeeaff32b7e6f3R1-R18))\n* Add `nested.css` file to `test\/configCases\/css\/urls-css-filename\/` to test nested import and url handling ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17170\/files?diff=unified&w=0#diff-ca0c4ac34dab4a3b01cda810029054f7f53c6c79a5677403f24ee174c13e11d3R1-R5))\n* Add `webpack.config.js` file to `test\/configCases\/css\/urls-css-filename\/` to set up output options, CSS experiments, and split chunks optimization for test case ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17170\/files?diff=unified&w=0#diff-df099f71774e3bee03e017ffc5783f26ed75fe26d67446ec5ffab1ba9559b729R1-R32))\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@ahabhgk I tried different solution and I think I found. We have two problems here:\r\n1. When we have an asset only in CSS module we include runtime for loading assets modules in JS bundle, but there is no asset module for loading in JS, we should fix it, I will do it in a separate PR\r\n2. Your solution is not bad, we need to improve path using getUndoPath (so we need to do it late), I will finish your PR soon too\r\n\r\nTime to finish CSS feature ","A lot of tests... If you have time you can add them to your solution to ensure the idea is working","And feel free to rebase","<!-- identifier: review-outdated -->\n\n@ahabhgk Thanks for your update.\n\nI labeled the Pull Request so reviewers will review it again.\n\n@alexander-akait Please review the new changes."],"labels":["PR: review-outdated"]},{"title":"Runtime error after fibWorker.postMessage()","body":"See associated bug https:\/\/github.com\/webpack\/webpack\/issues\/17125\r\n\r\n---\r\n\r\nUpdating worker example to output ESM fails to load on-demand async worker chunk at runtime.\r\n\r\n```bash\r\n# update to include webpack-dev-server\r\n$ yarn\r\n# cd examples\/workers\r\n$ ..\/..\/bin\/webpack.js serve --config webpack.config.js --mode development\r\n```\r\n\r\n1. Change value of third input `<input id=\"fib2\" type=\"number\">`\r\n2. Observer runtime errors:\r\n\r\n```\r\nUncaught (in promise) TypeError: Cannot read properties of undefined (reading 'length')\r\n    at installChunk (http:\/\/localhost:8080\/dist\/workers\/fibonacci.js:521:25)\r\n    at async Promise.all (index 0)\r\n    at async onmessage (webpack:\/\/\/.\/fib-worker.js?:2:24)\r\ninstallChunk @ fibonacci.js:521\r\n```\r\n\r\n```javascript\r\n\/\/ examples\/worker\/fib-worker.js\r\nonmessage = async event => {\r\n        \/\/ THIS chunk fails to load \ud83d\ude22 \r\n\tconst { fibonacci } = await import(\".\/fibonacci\");\r\n\t\/* ... *\/\r\n};\r\n```\r\n\r\n<img width=\"1424\" alt=\"Screenshot 2023-05-02 at 1 51 45 PM\" src=\"https:\/\/user-images.githubusercontent.com\/1148713\/235783232-a3efd034-b35d-4bfb-9dbe-566572193b75.png\">","comments":[" <a href=\"https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/17124\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-not-signed.svg\" alt=\"CLA Not Signed\" align=\"left\" height=\"28\" width=\"328\"><\/a><br\/><br \/><ul><li><a href='https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/17124\/#\/?version=2' target='_blank'>:x:<\/a> - login: @jasonsanjose \/ name: Jason San Jose . The commit (f28a1a032c089499956f52c2baac76c06db6d08d) is not authorized under a signed CLA. <a href='https:\/\/api.easycla.lfx.linuxfoundation.org\/v2\/repository-provider\/github\/sign\/18915764\/3678731\/17124\/#\/?version=2' target='_blank'>Please click here to be authorized<\/a>. For further assistance with EasyCLA, <a href='https:\/\/jira.linuxfoundation.org\/servicedesk\/customer\/portal\/4' target='_blank'>please submit a support request ticket<\/a>.<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"Experiments ","body":"- [ ] Build HTTP (Modules?)\r\n  - [ ] `importMap` in HTML Support \r\n  - [ ] Allow to specify a resolver function to resolve (bare) imports in HTTP Module (@sokra ?) \r\n  - [ ] `forceLock` to force locking `Cache-Control: no-cache` resources.\r\n  - [ ] `minCacheDuration` to allow to override very short Cache-Control headers. ","comments":["Is it possible to refer to importmap?\r\n\r\nhttps:\/\/stackoverflow.com\/questions\/76309809\/how-can-i-configure-webpack-to-use-external-javascript-module","@benlieb You can use the `import` field in your package.json https:\/\/nodejs.org\/api\/packages.html#subpath-imports","@alexander-akait I'm not sure this solves the problem I'm having. It would be great if it did though!\r\n\r\nI have a writeup on SO: https:\/\/stackoverflow.com\/questions\/76309809\/how-can-i-configure-webpack-to-use-external-javascript-module","@benlieb Okay, you can:\r\n- parse HTML and extract importmap\r\n- convert `\"imports\"` to `externals`\r\n\r\nYou need to get:\r\n```\r\nexternals: {\r\n  constants: \"import http:\/\/localhost:3000\/assets\/constants.js\"\r\n},\r\n```\r\n\r\nNote - webpack will use `import(...)` (we have other externals types, follow our docs to look find other possible values if you need) so if you need to support very old envs you need to think about other ways\r\n\r\n","Thank you for your help, I really need it. But I still don't understand. \r\n\r\nWhy would I use \r\n\r\n```\r\nexternals: {\r\n  constants: \"import http:\/\/localhost:3000\/assets\/constants.js\"\r\n},\r\n```\r\nWhen it is already loaded in to the browser with:\r\n\r\n```html\r\n<script type=\"importmap\">\r\n  {\r\n    \"imports\": {\r\n      \"constants\": \"http:\/\/localhost:3000\/assets\/constants.js\"\r\n    }\r\n  }\r\n<\/script>\r\n```\r\n\r\nI thought the following would work with this:\r\n\r\n```js\r\nmodule.exports = {\r\n externals: {\r\n  constants: 'module constants',\r\n }\r\n}\r\n```\r\n\r\nBut guess not?\r\n\r\nOne complicating factor is that the url for the import map is actually dynamically generated with hashes (url changes when file contents change) via a rails view helper and really looks like this:\r\n\r\n```html\r\n<script type=\"importmap\">\r\n  {\r\n    \"imports\": {\r\n      \"constants\": \"http:\/\/localhost:3000\/assets\/rails-constants-0ac54660d36cd34c7e89b718a2521795e9a894af62143d83adcf0a786ee8badf.js\"\r\n    }\r\n  }\r\n<\/script>\r\n```\r\n\r\nThat url isn't hard-codeable into my webpack config file.\r\n\r\nIs there any other way that using the `import` type in the webpack config?\r\n\r\n\r\n","What is `http:\/\/localhost:3000\/assets\/rails-constants-0ac54660d36cd34c7e89b718a2521795e9a894af62143d83adcf0a786ee8badf.js` format? Maybe you can a create github repo with an example of code and how you run, because your solution should work too\r\n\r\nAlso please run `npm ls webpack` (we should have webpack v5)","Looks like maybe webpacker is too old:\r\n\r\n```\r\nthreadable-api@0.1.0 \/Users\/benlieb\/code\/th\/threadable_api\r\n\u251c\u2500\u252c @rails\/webpacker@5.4.3\r\n\u2502 \u251c\u2500\u252c compression-webpack-plugin@4.0.1\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@4.46.0 deduped\r\n\u2502 \u251c\u2500\u252c css-loader@3.6.0\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@4.46.0 deduped\r\n\u2502 \u251c\u2500\u252c file-loader@6.2.0\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@4.46.0 deduped\r\n\u2502 \u251c\u2500\u252c mini-css-extract-plugin@0.9.0\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@4.46.0 deduped\r\n\u2502 \u251c\u2500\u252c optimize-css-assets-webpack-plugin@5.0.8\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@4.46.0 deduped\r\n\u2502 \u251c\u2500\u252c sass-loader@10.1.1\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@4.46.0 deduped\r\n\u2502 \u251c\u2500\u252c style-loader@1.3.0\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@4.46.0 deduped\r\n\u2502 \u251c\u2500\u252c terser-webpack-plugin@4.2.3\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@4.46.0 deduped\r\n\u2502 \u251c\u2500\u252c webpack-assets-manifest@3.1.1\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@4.46.0 deduped\r\n\u2502 \u251c\u2500\u252c webpack-cli@3.3.12\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@4.46.0 deduped\r\n\u2502 \u2514\u2500\u252c webpack@4.46.0\r\n\u2502   \u2514\u2500\u252c terser-webpack-plugin@1.4.5\r\n\u2502     \u2514\u2500\u2500 webpack@4.46.0 deduped\r\n\u251c\u2500\u252c babel-loader@8.2.3\r\n\u2502 \u2514\u2500\u2500 webpack@4.46.0 deduped\r\n\u2514\u2500\u252c webpack-dev-server@3.11.3\r\n  \u251c\u2500\u252c webpack-dev-middleware@3.7.3\r\n  \u2502 \u2514\u2500\u2500 webpack@4.46.0 deduped\r\n  \u2514\u2500\u2500 webpack@4.46.0 deduped\r\n\r\n```","The format of the js file is like:\r\n\r\n```js\r\nexport const CIRCLE_VISIBILITY_TYPES = {\"OPEN\":\"open\",\"PUBLIC\":\"public\",\"EXPERT\":\"expert\",\"SOLO\":\"solo\",\"PRIVATE\":\"private\"};\r\n```","@benlieb Yeah, this explains why your solution didn't work, make sense to migrate https:\/\/github.com\/rails\/jsbundling-rails\/, if it is not possible you can try to proxy some requests on request URLs  ","We are deciding between that and shakpacker. Thank you for your time. Very appreciated! I'll check in when we have progress!\r\n","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["enhancement"]},{"title":"Webpack Hints ","body":"- [x] #11695 \r\n- [ ] Notify (warn) user to use `optimization.runtimeChunk: true` when runtime is in a large chunk ( Example: #12145 ) \r\n- [ ] Notify (warn) user to that a _added rule_ RuleSet\/Loader is unused\r\n- [ ] Optimization Bailouts (Generalized). \"Weird optimization bailouts\" (@sokra?)\r\n- [ ] Default configuration (@sokra?)\r\n- [ ] `[not cacheable]` Where and why the hell does this show up? Report on it? Stats Printer? (Example: #748)\r\n- [ ] Warn when multiple versions of library appear in one build (Example: #385) \r\n- [ ] [NEED TO CONFIRM] - Notify (?) when user _dosn't_ use OS neutral RegExp (Example: #2553)\r\n- [ ] `Did you mean ...` error when a module isn't found (Low priority - Help Wanted) (Example: #5543)\r\n- [ ] Force users to provide name for cache when in MultiCompiler mode (#15460), Potentially Rework Approach\r\n- [ ] \"Hints are disabled in green\" (@sokra ?)\r\n- [ ] Keep a hash of hints as random seed to select the hint + make more deterministic \r\n- [ ] `stats.hints: number | false | true`","comments":["Let's reorder this by priority once @sokra responds to some of the ? issue items. ","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["enhancement","inactive","webpack-5"]},{"title":"ESM Module Output","body":"- [ ] Consuming build output at build time\r\n  - [ ] Build output supports tree-shaking\r\n  - [ ] Weird CommonJS modules are wrapped\r\n  - [ ] \ud83d\udc8e`import()` is statically analyse-able\r\n  - [ ] \ud83d\udc8eNice CommonJS modules are converted to ESM\r\n  - [ ] No additional runtime code\r\n  - [ ] module-wide side-effect information is kept in build output (generate package.json? use `PURE` flag?)\r\n- [ ] Developer Expreience\r\n  - [ ] Inform (warn) the user about modules that are converted to strict mode\r\n  - [ ] `delete x` in modules should be a build error as code is compiled in strict mode\r\n- [ ] Use the platform\r\n  - [ ] load HMR manifest via `import()` + cache busting (mem leak? is fetch better?)\r\n  - [ ] load HMT chunks via `import()`\r\n  - [ ] prefetch JS chunks via module preload\/prefetch + `new URL(...)`\r\n- [ ] Consuming build output at runtime\r\n  - [ ] \ud83d\udc8eLive Bindings to entrypoint \r\n  - [ ] \ud83d\udc8eTest case for circular dependency w\/ external\r\n- [ ] Other\r\n  - [ ] Import chunks with `new URL()` instead of public path #15947 \r\n  - [ ] Preserve CSS Import - (@vankop more information)\r\n  - [ ] Preserve Reexport from Externals\r\n  - [ ] Preserve `new URL()`, `new Worker()`. Maybe magic comment for this? \r\n  - [ ] Support `workerChunkLoading: \"module\"` for `node` target","comments":["Related https:\/\/github.com\/webpack\/webpack\/issues\/2933, I will go through everything and add what we might have missed","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bumping to keep from closing. "],"labels":["enhancement","webpack-5","gsoc-2024"]},{"title":"Transpiling with a Web Worker (webpack 5 worker import syntax) crashes Webpack","body":"# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nTranspiling with a Web Worker (webpack 5 worker import syntax) crashes Webpack\r\n\r\n```\r\n  89% sealing hashing\/project\/node_modules\/webpack\/lib\/Compilation.js:4050\r\n          otherInfo.referencedBy.push(info);\r\n                    ^\r\n\r\n  TypeError: Cannot read properties of undefined (reading 'referencedBy')\r\n      at Compilation.createHash (\/project\/node_modules\/webpack\/lib\/Compilation.js:4050:15)\r\n      at \/project\/node_modules\/webpack\/lib\/Compilation.js:3033:39\r\n      at \/project\/node_modules\/webpack\/lib\/Compilation.js:3280:6\r\n      at \/project\/node_modules\/neo-async\/async.js:2818:7\r\n      at done (\/project\/node_modules\/neo-async\/async.js:3522:9)\r\n      at \/project\/node_modules\/webpack\/lib\/Compilation.js:3243:8\r\n      at \/project\/node_modules\/webpack\/lib\/Compilation.js:3354:5\r\n      at \/project\/node_modules\/webpack\/lib\/Cache.js:93:5\r\n      at Hook.eval [as callAsync] (eval at create (\/project\/node_modules\/webpack\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:16:1)\r\n      at Cache.get (\/project\/node_modules\/webpack\/lib\/Cache.js:75:18)\r\n      at ItemCacheFacade.get (\/project\/node_modules\/webpack\/lib\/CacheFacade.js:111:15)\r\n      at Compilation._codeGenerationModule (\/project\/node_modules\/webpack\/lib\/Compilation.js:3322:9)\r\n      at \/project\/node_modules\/webpack\/lib\/Compilation.js:3229:11\r\n      at arrayIterator (\/project\/node_modules\/neo-async\/async.js:3467:9)\r\n      at processTicksAndRejections (node:internal\/process\/task_queues:78:11)\r\n  error Command failed with exit code 1.\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nWebpack config (partial export):\r\n```\r\n  {\r\n    mode: 'development',\r\n    target: 'web',\r\n    entry: {\r\n      app: '.\/app\/client\/app.js'\r\n    },\r\n    output: {\r\n      globalObject: 'this',\r\n      path: '\/project\/app\/assets\/builds',\r\n      filename: '[name].js',\r\n      chunkFilename: '[name]-[contenthash].digested.js',\r\n      sourceMapFilename: '[file]-[fullhash].digested.map',\r\n      hashFunction: 'sha256',\r\n      hashDigestLength: 64\r\n    },\r\n    plugins: [\r\n      CaseSensitivePathsPlugin {\r\n        options: {},\r\n        logger: [Object [console]],\r\n        pathCache: Map(0) {},\r\n        fsOperations: 0,\r\n        primed: false\r\n      },\r\n      DefinePlugin { definitions: [Object] },\r\n      MinChunkSizePlugin { options: [Object] },\r\n      NodePolyfillPlugin { options: [Object] },\r\n      Dotenv { config: [Object] }\r\n    ],\r\n    optimization: { minimizer: [], nodeEnv: false, splitChunks: { chunks: 'async' } },\r\n    performance: { hints: 'warning' },\r\n    module: {\r\n      rules: [\r\n        {\r\n          test: \/\\.js$\/,\r\n          exclude: \/(node_modules)\/,\r\n          use: { loader: 'babel-loader' }\r\n        },\r\n        {\r\n          \/\/ not this worker\r\n          test: \/some-other-specific-node_module-worker-file\\.js\/,\r\n          type: 'asset\/resource',\r\n          generator: { filename: '[name]-[contenthash].digested[ext]' }\r\n        }\r\n        \/\/ ... some other rules for fonts and style (non-js extensions, should not matter)\r\n      ]\r\n    },\r\n    node: { __filename: false, __dirname: false, global: true },\r\n    resolve: {\r\n      alias: {\r\n        \/\/ ... some more aliases \r\n        workers: '\/project\/app\/client\/workers'\r\n      },\r\n      fallback: { fs: false, net: false, tls: false }\r\n    },\r\n    stats: { preset: 'errors-warnings', children: true },\r\n    watchOptions: {\r\n      ignored: \/node_modules\/,\r\n      aggregateTimeout: 1000,\r\n      followSymlinks: true\r\n    },\r\n    devtool: 'eval'\r\n  }\r\n```\r\n\r\nFile using worker:\r\n```\r\n  const myWorker = new Worker(\r\n    new URL('workers\/myworker.worker.js', import.meta.url)\r\n  );\r\n\r\n  \/\/ ....\r\n\r\n  async someFunction(data) {\r\n    return new Promise((resolve, reject) => {\r\n      myWorker.onmessage = () => {\r\n        \/\/ do stuff\r\n      }\r\n      myWorker.postMessage(data)\r\n    });\r\n  }\r\n```\r\n\r\nWorker:\r\n```\r\n  import 'core-js\/stable';\r\n  import 'regenerator-runtime\/runtime';\r\n\r\n  onmessage = async (data) => {\r\n    \/\/ not doing anything\r\n  };\r\n  \r\n  \/\/ Actually, an empty file compiles, but any code at all seems to crash the webpack (even just a console.log statement)\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nNot to crash.\r\n\r\n**Other relevant information:**\r\n\r\n```\r\n  System:\r\n    OS: macOS 13.3.1\r\n    CPU: (16) x64 Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz\r\n    Memory: 122.82 MB \/ 16.00 GB\r\n  Binaries:\r\n    Node: 16.18.1 - ~\/.nvm\/versions\/node\/v16.18.1\/bin\/node\r\n    Yarn: 1.22.19 - ~\/.nvm\/versions\/node\/v16.18.1\/bin\/yarn\r\n    npm: 8.19.2 - ~\/.nvm\/versions\/node\/v16.18.1\/bin\/npm\r\n  Browsers:\r\n    Chrome: 112.0.5615.137\r\n    Firefox: 112.0.2\r\n    Safari: 16.4\r\n  Packages:\r\n    babel-loader: ^9.1.2 => 9.1.2\r\n    case-sensitive-paths-webpack-plugin: ^2.4.0 => 2.4.0\r\n    css-loader: ^6.7.3 => 6.7.3\r\n    dotenv-webpack: ^8.0.1 => 8.0.1\r\n    file-loader: ^6.2.0 => 6.2.0\r\n    node-polyfill-webpack-plugin: ^2.0.1 => 2.0.1\r\n    style-loader: ^3.3.2 => 3.3.2\r\n    terser-webpack-plugin: ^5.3.7 => 5.3.7\r\n    webpack: ^5.78.0 => 5.80.0\r\n    webpack-cli: ^5.0.1 => 5.0.2\r\n```","comments":["Can you put this in github repo, and pelase try to disable `MinChunkSizePlugin`, thank you","Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!","Also make sure you remove webpack cache (`.\/node_modules\/.cache\/webpack`), you can have old cache from other build and override cache options, so webpack used the old cache but you have a new webpack version, anyway feel free to feedback","@alexander-akait I prepared a minimal project reproducing the problem using current version of Webpack: 5.89.0. \r\n[webpack-worker-test.zip](https:\/\/github.com\/webpack\/webpack\/files\/13705676\/webpack-worker-test.zip)\r\n\r\nTo reproduce the problem perform\r\n```\r\nnpm install\r\nnpm run start\r\n```\r\n\r\nThe Webpack v5 will crash.\r\n\r\nSimply creating a worker as described in the v5 documentation, causes the problem reported.\r\n```\r\nconst worker = new Worker(\r\n    \/* webpackChunkName: \"my-worker\" *\/ new URL('.\/my-worker.js', import.meta.url)\r\n);\r\n```","@chebum Sorry for delay, I see... "],"labels":["bug"]},{"title":"shard unit and integration tests in ci","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at ed3139a<\/samp>\n\nThis pull request improves the integration test workflow by using the `--shard` option to run tests in parallel and removes unused scripts from `package.json`.\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at ed3139a<\/samp>\n\n*  Add and modify test commands to use `--shard` option for parallelization ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17098\/files?diff=unified&w=0#diff-faff1af3d8ff408964a57b2e475f69a6b7c7b71c9978cccc8f471798caac2c88L47-R51), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17098\/files?diff=unified&w=0#diff-faff1af3d8ff408964a57b2e475f69a6b7c7b71c9978cccc8f471798caac2c88L142-R147))\n*  Increase the number of shards for the test workflow in `.github\/workflows\/test.yml` to speed up execution and avoid timeouts ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17098\/files?diff=unified&w=0#diff-faff1af3d8ff408964a57b2e475f69a6b7c7b71c9978cccc8f471798caac2c88R36-R39), [link](https:\/\/github.com\/webpack\/webpack\/pull\/17098\/files?diff=unified&w=0#diff-faff1af3d8ff408964a57b2e475f69a6b7c7b71c9978cccc8f471798caac2c88R98))\n*  Remove unused scripts from `package.json` for simplicity and clarity ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17098\/files?diff=unified&w=0#diff-7ae45ad102eab3b6d7e7896acd08c427a9b25b346470d7bc6507b6481575d519L171-L172))\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed"]},{"title":"RFC: Webpack Diagnostics Meta Data","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n**What is the expected behavior?**\r\nHope that webpack can provide a built-in data structure for analysis and diagnosis of the bundle process and product.\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\nThe existing stats data is not conducive to bundle analysis and diagnosis. In order to deeply analyze the entire webpack bundle process, developers often need to do some extra work to reassemble a data structure, such as\r\n- Data Collection: Register various hooks to obtain sufficient information\r\n  - Intercept loader to collect the loader data, for querying the loader that the file has passed through, as well as the time and intermediate products of each loader\r\n  - Intercept compiler\/compilation hooks to collect the plugin data,  for recording the running order and running time of external plugins in hooks\r\n  - Reassembling resolver data, for tracking the process status of compiling all paths within the project, aiming to help users identify how the erroneous path is generated\r\n  - Stringify the webpack configuration, allow users to easily view the currently effective configuration\r\n- Data Processing: In the process of collecting data, create data structures for analysis and diagnosis\r\n  - Generate chunk graph\r\n  - Generate module graph\r\n  - Generate package graph\r\n- Data Diagnosis: Users often need to manually troubleshoot issues, so we could establish a set of Linter mechanisms, and write rules to take processed data as input and output diagnostic results, used to diagnose such things as\r\n  - Writing rules to take processed data as input and output diagnostic results, used to diagnose such things as\r\n    - Duplicate Packages\r\n    - Default Import Check\r\n    - Loader Performance Optimization\r\n- Data Display: Write web pages to display processed data in a user-friendly interface and assist users in troubleshooting problems through visual aids, even directly locating problematic code and fixing it with one click\r\n\r\n**How should this be implemented in your opinion?**\r\n1. Design a standardized diagnostic data structure and linter mechanism that allows developers to investigate the bundle process and develop rules around this data structure. To avoid affecting the build time of the production environment, it is necessary to use a configuration to enable it.\r\n2. Develop a webpack plugin that reads this meta data through a diagnostic service and provides users with web pages and api for troubleshooting and diagnosis:\r\n  - Compile Analysis\r\n    1. Webpack Loaders: Investigate and analyze Webpack Loaders-related call data and time-consuming information\r\n    2. Webpack Plugins: Query the number of calls and time of Webpack Compiler \/ Compilation Hooks\r\n    3. Module Resolve: Help you quickly query the final path after the module path of an import\/require in a file is parsed\r\n\r\n  - Bundle Analysis\r\n    1. Bundle Size: The volume data, first screen resource size, duplicate package, module reference relationship and other information of the current compiled product\r\n    2. Tree Shaking: Help you further analyze and investigate the tree shaking bailout reason of a file in the project\r\n\r\n- **Prototype Page**\r\n  - Overall Page: In addition to giving an overall overview, we will also provide a Bundle Alerts module to scan for problems to be fixed through rules, such as duplicate package detection. It supports the tracing of each duplicate package introduction chain.\r\n![image](https:\/\/user-images.githubusercontent.com\/11739753\/234492082-c1acb696-20f7-4cbe-8bed-eabdd13deca5.png)\r\n  - Loader Page: Show the loader timing diagram, as well as the loader time consumption and changes before and after the loader of each module.It not only supports viewing the Loaders details of a single file, but also supports viewing the Loaders data of the file directory.\r\n![image](https:\/\/user-images.githubusercontent.com\/11739753\/234492105-b5dddf54-e5c7-4fba-acea-77433884282f.png)\r\n![image](https:\/\/user-images.githubusercontent.com\/11739753\/234492131-da767e02-5b25-4801-9655-dd05fad82985.png)\r\n  -  Plugin Page: Support viewing the call data information of all plugin-in-used Compiler Hooks and Compilation Hooks in the current Webpack project\r\n![image](https:\/\/user-images.githubusercontent.com\/11739753\/234492160-ae0799d0-d0a3-463b-b41b-ac57bd024c56.png)\r\n  - Bundle Page: Show the parsed size of each module, that is, the volume actually packaged into the bundle product.\r\n![image](https:\/\/user-images.githubusercontent.com\/11739753\/234492186-4ff4f9b0-79ba-4081-8927-3b2ad84aee89.png)\r\n![image](https:\/\/user-images.githubusercontent.com\/11739753\/234492200-0baccd6d-25e8-40f9-8805-3cd465d1d518.png)\r\n\r\n  - Tree shaking Page: You can know the reason why the code is not shaken for reasons such as \"where variables are used\" through it.\r\n![image](https:\/\/user-images.githubusercontent.com\/11739753\/234492236-55365271-338d-4080-9fc0-ccd727aebaed.png)\r\n\r\nAre you willing to work on this yourself?\r\nyes\r\n\r\n@TheLarkInn ","comments":["Currently we don't have structured data to report on hinting. See (https:\/\/github.com\/webpack\/webpack\/issues\/17122). I'm 100% on board with this. I think we need to break. ","This proposal can allow us to create a structural format for Optimization Bailouts instead of strings. ","This RFC Work should be broken down into (at least) two pieces: \r\n- [ ] Restructure Data Format to accomplish \r\n  - [ ] Add additional data structures in Stats\r\n  - [ ] Additional Profiling API's can be stored in https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/ModuleProfile.js\r\n- [ ] Creation of the UI\/Reporting (Plugin)\r\n\r\nShould we have a format for Vite\/Parcel\/webpack\/rspack\/esbuild\/etc\/Prior Work\r\n- https:\/\/bundle-buddy.com\r\n- https:\/\/github.com\/relative-ci\/bundle-stats\r\n- https:\/\/github.com\/statoscope\/statoscope","another motivate for structural metainfo is that when we migrate some buildtools to anther buildtools | version, we want to know which has changed, since diff the bundle assets code is nearly not readable for human, we always do stats diff | meta diff to find out whether module|assets|chunk|resolveResult changed | deleted | added.","Hi~ @TheLarkInn @alexander-akait !\r\n\r\nWe are trying to count the time spent by each Loader. Since the Loader does not expose the Hook, we need to consult the Core Team about the implementation method. Currently, we have three candidate solutions:\r\n- Solution 1: Write a official built-in webpack plugin, which traverses all module.rules and inserts our proxy-loader, sample code:\r\n\r\n``` ts\r\n\/\/ Plugin\r\nexport class InternalLoaderPlugin {\r\n  public readonly name = 'loader';\r\n\r\n  public apply(compiler: Compiler) {\r\n    compiler.hooks.afterPlugins.tap(this.tapPostOptions, this.afterPlugins);\r\n  }\r\n\r\n  public afterPlugins = (compiler: Compiler) => {\r\n    if (compiler.isChild()) return;\r\n    \/\/ intercept loader to collect the costs of loaders\r\n    compiler.options.module.rules = interceptLoader(\r\n      compiler.options.module.rules as RuleSetRule[],\r\n      require.resolve('..\/loader-proxy')\r\n    );\r\n  };\r\n}\r\n\r\n\/\/ loader-proxy\r\nconst loaderModule: LoaderDefinition<ProxyLoaderOptions> = function (...args) {\r\n  if (shouldSkipLoader(this)) {\r\n    this.callback(null, ...args);\r\n    return;\r\n  }\r\n\r\n  this.cacheable(false);\r\n\r\n  const mod = getOriginLoaderModule(this);\r\n\r\n  if (mod.default) {\r\n    \/\/ https:\/\/webpack.js.org\/api\/loaders\/#raw-loader\r\n    if (mod.raw === false && Buffer.isBuffer(args[0])) {\r\n      args[0] = args[0].toString();\r\n    }\r\n\r\n    let start: number;\r\n    let startHRTime: [number, number];\r\n\r\n    const trap = BuildUtils.createLoaderContextTrap.call(this, (err, res, sourceMap) => {\r\n      reportLoader(this, start, startHRTime, false, false, args[0].toString(), err, res, sourceMap);\r\n    });\r\n\r\n    start = Date.now();\r\n    startHRTime = process.hrtime();\r\n\r\n    try {\r\n      const result = mod.default.apply(trap, args);\r\n\r\n      \/\/ sync function\r\n      if (result) {\r\n        if (!(result instanceof Promise)) {\r\n          reportLoader(this, start, startHRTime, false, true, args[0].toString(), null, result);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      reportLoader(this, start, startHRTime, false, true, args[0].toString(), error as Error, null);\r\n      throw error;\r\n    }\r\n  }\r\n  this.callback(null, ...args);\r\n};\r\n\r\nloaderModule.pitch = function () {\r\n  if (shouldSkipLoader(this)) {\r\n    return;\r\n  }\r\n\r\n  this.cacheable(false);\r\n\r\n  const mod = getOriginLoaderModule(this);\r\n\r\n  if (mod.pitch && typeof mod.pitch === 'function') {\r\n    let start: number;\r\n    let startHRTime: [number, number];\r\n\r\n    const trap = BuildUtils.createLoaderContextTrap.call(this, (err, res) => {\r\n      reportLoader(this, start, startHRTime, true, false, err ? 'Loader Pitch Async Error' : '', err, res);\r\n    });\r\n\r\n    start = Date.now();\r\n    startHRTime = process.hrtime();\r\n\r\n    try {\r\n      \/\/ @ts-ignore\r\n      const res = mod.pitch.apply(trap, arguments);\r\n\r\n      \/\/ with pitch result\r\n      if (res) {\r\n        if (!(res instanceof Promise)) {\r\n          reportLoader(this, start, startHRTime, true, true, '', null, res);\r\n        }\r\n      }\r\n\r\n      return res;\r\n    } catch (error) {\r\n      reportLoader(this, start, startHRTime, true, true, 'Loader Pitch Sync Error', error as Error, null);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n\/\/ set `raw: true` for every resources, so that can control the result for the correct loader.\r\n\/\/ @ts-ignore\r\nloaderModule.raw = true;\r\n\r\n\/\/ @ts-ignore\r\nexport = loaderModule;\r\n\r\n```\r\n\r\n- Solution 2: Directly insert the logic of solution 1 before and after the actual loader in the place where webpack processing configs, such as https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/config\/normalization.js#L242 \r\n- Solution 3: Modify the https:\/\/github.com\/webpack\/loader-runner to expose the hook of a single loader\r\n\r\nDo you have any suggestions? Is there a more suitable implementation method? I need your guidance~\r\n\r\ncc @hardfist ","@alexander-akait friendly ping, any suggestions for us?","@hardfist Let's look at this after tomorrow release, a lot of small tasks need to finish"],"labels":["enhancement","webpack-5"]},{"title":"import binding not linked in `define` function","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nKeywords:\r\n- AMD\r\n- define\r\n- import\r\n\r\n**What is the current behavior?**\r\n\r\nimport binding in define function will cause referenceError.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\nPlayground: https:\/\/stackblitz.com\/edit\/node-y2sktu?file=dist\/main.js&view=editor\r\n\r\nInput:\r\n\r\n```JavaScript\r\n\/\/ lib.js\r\nexport default 42;\r\n\r\n\/\/ index.js\r\nimport foo from '.\/lib.js';\r\nconst bar = require('.\/lib.js');\r\n\r\ndefine(function (require) {\r\n  console.log(foo); \/\/ not work\r\n  console.log(bar); \/\/ ok\r\n});\r\n\r\nnoop(function () {\r\n  console.log(foo); \/\/ ok\r\n  console.log(bar); \/\/ ok\r\n});\r\n\r\nfunction noop() {}\r\n\r\n```\r\n\r\noutput:\r\n\r\n```JavaScript\r\n\/\/ omitted\r\n\r\n\/* harmony import *\/ var _lib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\/*! .\/lib.js *\/ \".\/src\/lib.js\");\r\n\r\nconst bar = __webpack_require__(\/*! .\/lib.js *\/ \".\/src\/lib.js\");\r\n\r\ndefine(function (require) {\r\n  console.log(foo); \/\/ not work\r\n  console.log(bar); \/\/ ok\r\n});\r\n\r\nnoop(function () {\r\n  console.log(_lib_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \/\/ ok\r\n  console.log(bar); \/\/ ok\r\n});\r\n\r\nfunction noop() {}\r\n\r\n\/\/ omitted\r\n```\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nI am not sure if it's a bug.\r\nBut I expect that `foo` should be transpiled into `_lib_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]`.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.38.1\r\nNode.js version: 16.20.0\r\nOperating System: Darwin arm64\r\nAdditional tools:\r\n\r\nrelated issues:\r\n- #14307 \r\n- swc-project\/swc\/issues\/7334","comments":["yeah, AMD again, not sure why developers still use it in 2023, feel free to send a fix","I am willing to fix it.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","Despite several attempts, I did not get the expected result. \r\nIf someone is ready to work on it, go ahead.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["bug","webpack-5"]},{"title":"Investigate breaks in experiments for webpack on `performance-benchmark`.","body":"1. Fork or clone: https:\/\/github.com\/TheLarkInn\/performance-compare\r\n2. Add `experments.futureDefaults` & `experiments.lazyCompilation` to both babel and swc webpack configurations \r\n3. Run the individual start command `npm run start:webpack`\r\n4. Open the dev server link\r\n\r\nExpected Output: \r\n- webpack dev mode loads the page just like all the other benchmarks do\r\n\r\nActual Outcome: \r\n- Console errors related to `lazyCompilation`\r\n![image](https:\/\/user-images.githubusercontent.com\/3408176\/233437790-aa559634-c6ea-4deb-95f1-343d23aa0912.png)\r\n\r\n- Console errors related to `futureDefaults`\r\n![image](https:\/\/user-images.githubusercontent.com\/3408176\/233437001-dc0e9466-6b6b-48cd-83f9-91f0e356409b.png)\r\n","comments":["I believe since there isn't many integrations that this is caused by: https:\/\/github.com\/pmmmwh\/react-refresh-webpack-plugin","@TheLarkInn Is it broken?","I think this plugin breaks when used with `experiments.futureDefaults` and `experiments.lazyCompilation`. We can reduce further if needed but the original repo should be enough to triage I think. cc @pmmmwh","My concern is that this is a very popular plugin for webpack+react users so we should prioritize futureproofing finding the bugs in the plugin for when we enable these future defaults and features. ","Yeah, agree","@TheLarkInn @alexander-akait \r\nI'm digging this issue to investigate how fast webpack rebuild can become, and find it's the `experiments.css:true` and `node.global:warn` cause the runtime error and warning.\r\nthis config works on my machine\r\n```js\r\nmodule.exports = \r\n{\r\n   node: {\r\n    global: false,\r\n  },\r\n  experiments: {\r\n    css:false,\r\n    futureDefaults:true\r\n  }\r\n}\r\n```\r\nrelated MR https:\/\/github.com\/web-infra-dev\/performance-compare\/pull\/3\r\n\r\nthe performance gain is shown in the following\r\n\r\n* before\r\n![image](https:\/\/github.com\/webpack\/webpack\/assets\/8898718\/c2456d2f-390c-4543-83a8-1899b679d388)\r\n\r\n* after\r\n![image](https:\/\/github.com\/webpack\/webpack\/assets\/8898718\/6c5db382-d980-4b57-806e-d36f10abaf3e)\r\n\r\n\r\nI'm wondering are there any configuration could improve rebuild performance of webpack, the problems we met in rspack when following webpack's rebuild strategy is that it seems the rebuild cost is linear to project's scale (related to module number and chunk number), so we take another approach like parcel's https:\/\/github.com\/parcel-bundler\/parcel\/issues\/6047 which is faster in some normal edit case.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Bump - I'll try to investigate this soon and hopefully we can figure out what's wrong","bump","@alexander-akait  I investigated it before, it's not related to react-refresh-webpack-plugin, it's caused by futureDefault enable experiments.css by default which conflicts with style-loader, so disable experiments.css could solve this ","@hardfist oh, thank you, I think we need to send a fix there"],"labels":["bug"]},{"title":"fix: esm with splitChunks","body":"fixes #17014, I think before was valid fix, want to investigate why our tests failed\r\n\r\n## Summary\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 57cdb41<\/samp>\n\nAdded `import` function as a new way to load chunks for ESM modules. Enabled startup dependencies optimization for `import` and async chunks.\r\n\r\n## Details\r\n\r\n<!-- cspell:disable-next-line -->\r\n\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 57cdb41<\/samp>\n\n* Enable `import` function as a chunk loading mechanism for ESM modules by:\n  - Importing `StartupChunkDependenciesPlugin` module ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17015\/files?diff=unified&w=0#diff-c22f77f8ec671e00d7d4e997e1d17ad7524c295d65acc6994be3b83287999122R11))\n  - Applying `StartupChunkDependenciesPlugin` to the compiler with `import` function and async chunk loading options ([link](https:\/\/github.com\/webpack\/webpack\/pull\/17015\/files?diff=unified&w=0#diff-c22f77f8ec671e00d7d4e997e1d17ad7524c295d65acc6994be3b83287999122R22-R25))\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","This might have potential issue for exporting value\r\n\r\nfor example:\r\n\r\n```js\r\n\/\/ index.js\r\nimport common from '.\/common.js'\r\n\r\nconsole.log('common: ', common)\r\n\r\nexport default common; \/\/ <---- add this line\r\n```\r\n\r\n```js\r\n\/\/ common.js\r\nexport default true;\r\n```\r\n\r\nand add `output.libraryTarget: \"module\"`, when another file import the default as lib, lib will be `undefined`\r\n\r\n```js\r\nimport lib from '.\/dist\/main.mjs'\r\nconsole.log(lib) \/\/ <---- undefined\r\n```\r\n\r\nyou can checkout the repro at https:\/\/github.com\/ahabhgk\/webpack-output-module-repro\/tree\/lib\r\n\r\nPS: I'm not sure whether it's appropriate to use `splitChunks` and `libraryTarget` together, just reporting..","I will check it","This fix worked for me.  As a workaround I just added the plugin to my webpack config but it would be great to merge this pr so that a workaround isn't needed."],"labels":["PR: unreviewed"]},{"title":"Generated code not run when `outputModule: true` and entry chunk dependent on common chunk","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nrepro: https:\/\/github.com\/ahabhgk\/webpack-output-module-repro\r\n\r\n\r\n**What is the current behavior?**\r\n\r\nindex.js:\r\n```js\r\nimport common from '.\/common.js`\r\nconsole.log(common)\r\n```\r\ncommon.js:\r\n```js\r\nexport default true\r\n```\r\n\r\nwebpack config:\r\n```js\r\nmodule.exports = {\r\n  experiments: {\r\n    outputModule: true,\r\n  },\r\n  target: 'es2020',\r\n  optimization: {\r\n    splitChunks: {\r\n      cacheGroups: {\r\n        common: {\r\n          test: \/common\\.js\/,\r\n          minSize: 0,\r\n          chunks: 'all'\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nrun the build output: `node .\/dist\/main.mjs`, it will log nothing, but it should log `true`\r\n\r\n\r\n\r\n**Other relevant information:**\r\nwebpack version:  ^5.79.0\r\nNode.js version:  16\r\nOperating System:  OSX\r\n\r\n","comments":["Yeah, I see","@ahabhgk ~~Oh, there is no problems with webpack runtime, something wrong with `target`, if you change it to `target: \"web\"` (or `node`) all works fine, but if you change it to `['es2020', 'web']`, it doesn't work~~ Yeah, we don't generate right output for `es2020` with `import(...)`","Also if you speficity options manually (chunkFormat and etc) all works fine too, so something wrong with our defaults...","Note: `target: 'es2020',` is not valid good value, because we don't know your env, so you should use `target: ['es2020', 'web']` or `['es2020', 'node']`, anyway if you use just `es2020` you will need to setup chunkFormat (and etc) manually","I'm trying to find a chunkFormat that can run both on browser and node, [`target: \"universal\"`](https:\/\/github.com\/webpack\/webpack\/issues\/6525) would be perfect, but not implement yet, so I tried `chunkFormat: \"module\"` and found this bug.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Certainly should keep this open.  It also causes ESM web workers not to load if they are split using default optimization as discussed in #17298.","@alexander-akait \r\n>https:\/\/github.com\/webpack\/webpack\/issues\/17014#issuecomment-1513226276\r\n\r\nCould you please help with the config options that we need to pass manually until this is fixed ?  I tried the following. But didnt work !\r\n```\r\n  output: {\r\n    ...\r\n    chunkFormat: \"module\",\r\n    chunkLoading: \"import\"\r\n    asyncChunks: true\r\n  },\r\n```\r\n","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["bug","inactive","webpack-5"]},{"title":"Introduce a new option for workers chunks' filenames","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\nThe source of this feature request is this [discussion](https:\/\/github.com\/webpack\/webpack\/discussions\/16843). The aim is to specify the filename for worker chunks only. Currently, there is no straightforward way to determine whether the chunk being processed in `chunkFilename` is a worker. Therefore, the request is for an option similar to [`workerPublicPath`](https:\/\/github.com\/webpack\/webpack\/pull\/16671), but only for the worker chunk's filename, such as `workerChunkFilename`.\r\n\r\nDuring the aforementioned discussion, @alexander-akait suggested identifying worker chunks by checking if `chunkLoading === 'import-scripts'` in `pathData?.chunk?._groups` within the `chunkFilename` function. However, this approach is considered hacky and not very robust.\r\n","comments":["So my understanding is that the `output.workerPublicPath` feature is not enough? ","@TheLarkInn No, it only set public path for workers, but sometimes you need another location for workers than `dist`, right now you can implement this using `chunkFilename: (pathData) => { \/* ... *\/ }`, but it is really hard to undestand when chunk is worker's chunks when not, so it is more like about user experience ","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["enhancement","inactive","webpack-5"]},{"title":"Angular project build failed after upgrading to Webpack 5.79.0","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nAfter updating to version 5.79.0 I am receiving this error during the build on my angular project:\r\n\r\n```\r\nError: Module parse failed: parser.destructuringAssignmentPropertiesFor is not a function\r\nFile was processed with these loaders:\r\n * .\/node_modules\/@angular-devkit\/build-angular\/src\/babel\/webpack-loader.js\r\nYou may need an additional loader to handle the result of these loaders.\r\nTypeError: parser.destructuringAssignmentPropertiesFor is not a function\r\n```\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nUpdate the package to version 5.79.0 and try to build the Angular project.\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nNo errors during the build of the project.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.79.0\r\nNode.js version: 14.X\r\nOperating System: Linux\r\nAdditional tools:\r\n","comments":["Due this https:\/\/github.com\/webpack\/webpack\/commit\/45754f45d06f01773f2c3a499591250c9c863f0e\r\n\r\n\/cc @vankop Can we return old name, looks like a breaking change and let's put TODO for webpack v6","You are using DefinePlugin not from the same webpack version. You are using latest  DefinePlugin, but building with old webpack\n\n\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0441 iPad\n\n> 13 \u0430\u043f\u0440. 2023 \u0433., \u0432 23:12, Alexander Akait ***@***.***> \u043d\u0430\u043f\u0438\u0441\u0430\u043b(\u0430):\n> \n> \ufeff\n> Due this 45754f4\n> \n> \/cc @vankop Can we return old name, looks like a breaking change\n> \n> \u2014\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n> You are receiving this because you were mentioned.\n","\/cc @alan-agius4","@ArturQuirino Can you run `npm ls webpack`?","@alexander-akait , Sure.\r\n\r\nHere is my `npm ls webpack`\r\n\r\n```\r\nmy-app@0.0.0 \/home\/artur\/source\/my-app\r\n\u251c\u2500\u252c @angular-devkit\/build-angular@13.3.11\r\n\u2502 \u251c\u2500\u252c @angular-devkit\/build-webpack@0.1303.11\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c @ngtools\/webpack@13.3.11\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c babel-loader@8.2.5\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.76.1 deduped\r\n\u2502 \u251c\u2500\u252c circular-dependency-plugin@5.2.2\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c copy-webpack-plugin@10.2.1\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c css-loader@6.5.1\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c less-loader@10.2.0\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c mini-css-extract-plugin@2.5.3\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c postcss-loader@6.2.1\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c sass-loader@12.4.0\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c source-map-loader@3.0.1\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c stylus-loader@6.2.0\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c webpack-dev-middleware@5.3.0\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c webpack-dev-server@4.7.3\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c webpack-subresource-integrity@5.1.0\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.76.1 deduped\r\n\u2502 \u2514\u2500\u2500 webpack@5.76.1\r\n\u251c\u2500\u252c babel-loader@8.3.0\r\n\u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u251c\u2500\u252c git-revision-webpack-plugin@5.0.0\r\n\u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u251c\u2500\u252c webpack-subresource-integrity@1.5.2\r\n\u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2514\u2500\u252c webpack@5.79.0\r\n  \u2514\u2500\u252c terser-webpack-plugin@5.3.7\r\n    \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n    \r\n```\r\n","Yeah, due to this `webpack@5.76.1` and `webpack@5.79.0`, we are trying to avoid such changes, but sometimes it happens, can you update webpack everywhere?, i.e.\r\n\r\n```\r\nwebpack-subresource-integrity@5.1.0\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.76.1 deduped\r\n```","To update everywhere I would have to update the `@angular-devkit\/build-angular` to the version 16.x, because 13.3, 14.2 and 15.2 are using webpack at 5.76.1.\r\n\r\nBut I do not intend to update the angular version of the project right now. Version 16 is not even LTS yet.\r\n\r\nI'd rather fix webpack at 5.78.0 than update  from Angular 13 to 16 right now.","> I'd rather fix webpack at 5.78.0 then update from Angular 13 to 16 right now. \r\n\r\nWe can't fix it here, because you have incompatibility webpack versions\r\n\r\n> To update everywhere I would have to update the @angular-devkit\/build-angular to the version 16.x, because 13.3, 14.2 and 15.2 are using webpack at 5.76.1.\r\n\r\nYou don't need to update everywhere, you need update only `webpack` in `webpack-subresource-integrity`","You have `webpack-subresource-integrity@1.5.2` and `webpack-subresource-integrity@5.1.0`, do you really need two versions?","I updated the webpack-subresource-integrity to the version 5.1.0 and the error persists. Same error.\r\n\r\n```\r\nmy-app@0.0.0 \/home\/artur\/source\/my-app\r\n\u251c\u2500\u252c @angular-devkit\/build-angular@13.3.11\r\n\u2502 \u251c\u2500\u252c @angular-devkit\/build-webpack@0.1303.11\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c @ngtools\/webpack@13.3.11\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c babel-loader@8.2.5\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.76.1 deduped\r\n\u2502 \u251c\u2500\u252c circular-dependency-plugin@5.2.2\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c copy-webpack-plugin@10.2.1\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c css-loader@6.5.1\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c less-loader@10.2.0\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c mini-css-extract-plugin@2.5.3\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c postcss-loader@6.2.1\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c sass-loader@12.4.0\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c source-map-loader@3.0.1\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c stylus-loader@6.2.0\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c webpack-dev-middleware@5.3.0\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u251c\u2500\u252c webpack-dev-server@4.7.3\r\n\u2502 \u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2502 \u2514\u2500\u2500 webpack@5.76.1\r\n\u251c\u2500\u252c babel-loader@8.3.0\r\n\u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u251c\u2500\u252c git-revision-webpack-plugin@5.0.0\r\n\u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u251c\u2500\u252c webpack-subresource-integrity@5.1.0\r\n\u2502 \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n\u2514\u2500\u252c webpack@5.79.0\r\n  \u2514\u2500\u252c terser-webpack-plugin@5.3.7\r\n    \u2514\u2500\u2500 webpack@5.79.0 deduped\r\n    \r\n```\r\n\r\n","You still have `webpack@5.76.1`, `babel-loader` use it, update them too","I think a lot of people using Angular + custom webpack with the Define plugin are going to run into this issue, since  `@angular-devkit\/build-angular` [depends specifically on `webpack@5.76.1`](https:\/\/github.com\/angular\/angular-cli\/blob\/15.2.x\/packages\/angular_devkit\/build_angular\/package.json#L64). \r\n\r\nSolutions I'm aware of (none are really ideal):\r\n- `npm install` an older version of wepback like 5.78 that stays \"compatible\" with 5.76\r\n- `npm dedupe` to hopefully get just one version of webpack (will be 5.76.1 for the angular scenario above) - but also dedupes other node modules\r\n\r\nI don't know the \"correct\" solution here, but if it affects enough users, maybe the most user-friendly solution is to to keep webpack 5 versions compatible (i.e. don't rename methods)?","Using the same version that `@angular-devkit\/build-angular` does seem like a reasonable solution.  \r\n\r\nThat said, rename a non private method does sound like a breaking change to be.\r\n\r\nMaybe the new property can be aliased with the old name, marked as deprecated and removed in the next major?","@alan-agius4 To be honestly, it was not the public method, don't know why it was used...","@mikejpeters @ArturQuirino I think we should raise an issue with angular\/angular-cli and coordinate with them to find a resolution for you all. I agree that this is problematic. ","@TheLarkInn maybe that's a good idea, although I guess Angular CLI treats webpack as an internal dependency and they want to avoid things breaking as well. I think this issue only happens with Angular CLI when using [@angular-builders\/custom-webpack](https:\/\/github.com\/just-jeb\/angular-builders\/tree\/master\/packages\/custom-webpack), but in that project I don't even see a `webpack` dependency (maybe in the goal of using whatever version Angular CLI already has installed).","Agreed. Can I ask you to open an issue on `angular\/angular-cli` so we can track this and coordinate with them also? ","@TheLarkInn  no need to open an issue. I am on the Angular team and I am following this.\r\n\r\nFrom the Angular CLI point of view, by using a non official builder the user made the decision to go off the supported path. \r\n\r\nThat said, let me have a chat with the rest of the team if we want to bump a dependency on a patch version. \r\n","Appreciate the quick response @alan-agius4 ","We did have a chat around this and since this is not a supported use-case in this case users need to manage the versions themselves. \r\n\r\nTherefore in this case changing the dev dependency to match the same \r\n`webpack` version provided by `@angular-devkit\/build-angular` is the right solution.\r\n\r\nThis could also be seen as feature request to the custom webpack builder, to provide access to the webpack used to avoid issues caused by mismatching versions.\r\n\r\n","FYI, this is also a problem with @storybook\/builder-webpack5.","@markwoon No problems with angular or storybook, check your dependecies, looks like you have hoisted old webpack version","Installing 5.78 fixed it for me for both Angular 15 (Custom webpack builder) and Storybook 6","Hey, I've got same issue with webpack@5.79.0 and storybook 6 version.\r\n\r\n@noorsilkaredia1 thank you, after downgrading to 5.78 it seems to work again.","### Storybook 6\r\n\r\nWith Yarn, using resolutions is a decent workaround `\"@storybook\/builder-webpack5\/webpack\": \"5.83.1\",` , eg:\r\n\r\n##### package.json\r\n```json\r\n\"resolutions\": {\r\n  \"@storybook\/builder-webpack5\/webpack\": \"5.83.1\"\r\n}\r\n```\r\n\r\nReplace `\"5.83.1\"` with your webpack version.\r\n\r\nThis may also be possible with the **npm `overrides` field**, but I haven't tested it.","https:\/\/github.com\/webpack\/webpack\/issues\/16981#issuecomment-1507662465\r\n\r\nI had to dedupe my webpacks. `npx yarn-deduplicate` might save your life.\r\n\r\nhttps:\/\/github.com\/scinos\/yarn-deduplicate","I encountered the same message `parser.destructuringAssignmentPropertiesFor is not a function` in a different context: deploying a Next.js app to Chromatic. I ran `pnpm dedupe` and that addressed the issue. Thanks @mizozobu for the comment, it saved my Saturday \ud83e\udd73 "],"labels":["question","X0: need more information","webpack-5"]},{"title":"docs: add verbose stats example","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary\r\n\r\nRelated to https:\/\/github.com\/webpack\/webpack\/issues\/13950\r\n<!-- cspell:disable-next-line -->\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 20794af<\/samp>\n\nThis pull request adds a new example to the webpack repository, which demonstrates the use of the verbose stats option in webpack. It also adds a new feature to the `build-common.js` script, which allows the user to enable or disable the color output of the stats. The new example consists of several files, such as `example.js`, `webpack.config.js`, `build.js`, `README.md`, and `template.md`, which are explained in detail in the change descriptions.\r\n\r\n## Details \r\n<!-- cspell:disable-next-line -->\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 20794af<\/samp>\n\n* Add a new example for the verbose stats option in webpack (F1-F5)\n* Add a new variable `statsColorsArg` to the `build-common.js` script to enable or disable the color output of the stats ([link](https:\/\/github.com\/webpack\/webpack\/pull\/16973\/files?diff=unified&w=0#diff-6ffe427ad83b3681440060a5419b3fcf92860ed684a0840a20aee574b697499bL19-R20))\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","Please fix lint","<!-- identifier: review-outdated -->\n\n@ersachin3112 Thanks for your update.\n\nI labeled the Pull Request so reviewers will review it again.\n\n@alexander-akait Please review the new changes."],"labels":["PR: reviewed-approved"]},{"title":"chore: update source map examples","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\nfix  #9599\r\nupdate source map examples\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary \r\n<!-- cspell:disable-next-line -->\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 676a61f<\/samp>\n\nThis pull request refactors and improves the source-map example by using different devtool options for development and production modes, simplifying the webpack config and the build script, and updating the documentation.\r\n\r\n## Details \r\n<!-- cspell:disable-next-line -->\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at 676a61f<\/samp>\n\n*  Simplify the source-map example by using two modes and a function config ([link](https:\/\/github.com\/webpack\/webpack\/pull\/16955\/files?diff=unified&w=0#diff-d1d251cd4965a25e71c5ed751e80d4a7537bb6e244ffc64917e71afe6ee401a8L1-R1), [link](https:\/\/github.com\/webpack\/webpack\/pull\/16955\/files?diff=unified&w=0#diff-d1d251cd4965a25e71c5ed751e80d4a7537bb6e244ffc64917e71afe6ee401a8L17-R32), [link](https:\/\/github.com\/webpack\/webpack\/pull\/16955\/files?diff=unified&w=0#diff-40b15f54cbdd9a6439b2dd3c4a4b4285c4722d99b21fcdb163b100464b2f7c8bL1-R8))\n*  Remove the redundant `--devtool none` option from the development mode compilation in `build-common.js` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/16955\/files?diff=unified&w=0#diff-6ffe427ad83b3681440060a5419b3fcf92860ed684a0840a20aee574b697499bL70-R70))\n*  Use the new syntax for injecting the generated code into the template in `template.md` ([link](https:\/\/github.com\/webpack\/webpack\/pull\/16955\/files?diff=unified&w=0#diff-d1d251cd4965a25e71c5ed751e80d4a7537bb6e244ffc64917e71afe6ee401a8L17-R32))\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: review-outdated -->\n\n@ersachin3112 Thanks for your update.\n\nI labeled the Pull Request so reviewers will review it again.\n\n@snitin315 Please review the new changes."],"labels":["PR: review-outdated"]},{"title":"fix: avoid double compilation when for context dependencies","body":"fixes https:\/\/github.com\/webpack\/webpack\/issues\/16886\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary \r\n<!-- cspell:disable-next-line -->\r\n<!--\ncopilot:summary\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at f634635<\/samp>\n\nFix a bug in `FileSystemInfo` that could cause an error when checking snapshot validity. Add a condition to `checkSnapshotValid` to handle undefined timestamp hashes in file system snapshots.\r\n\r\n## Details \r\n<!-- cspell:disable-next-line -->\r\n<!--\ncopilot:walkthrough\n-->\n### <samp>\ud83e\udd16 Generated by Copilot at f634635<\/samp>\n\n* Fix a bug where the timestamp hash of a file system snapshot could be undefined, causing an error when comparing it to the current timestamp hash ([link](https:\/\/github.com\/webpack\/webpack\/pull\/16908\/files?diff=unified&w=0#diff-c0c10e6e053a0266c639aca3e65bbe2e42fbc196c58332371b72e7b31966c346R2568))\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@TheLarkInn I think we can add test case for such case, I will look how we can test it"],"labels":["PR: waiting for other changes"]},{"title":"generate the exported part at the end of the module #16888","body":"<!-- The webpack team is currently a beta pilot for GitHub Copilot for Pull Requests, please leave this template unchanged for now -->\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n## Summary \r\n\r\nrelated to #16888 \r\n\r\n## Details \r\n\r\nIf there is no reason to verify the significance of the position, just put it at the end of the module to make it more reasonable as it accesses the scope. Could you just break it without supporting any options?\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","I think some code should be moved too, look at tthe tests","<!-- identifier: head-main -->\n\nHi @aleen42.\n\nJust a little hint from a friendly bot about the best practice when submitting pull requests:\n\n> Don't submit pull request from your own `main` branch. It's recommended to create a feature branch for the PR.\n\n*You don't have to change it for this PR, just make sure to follow this hint the next time you submit a PR.*","> I think some code should be moved too, look at tthe tests\r\n\r\nOK, check it later"],"labels":["PR: unreviewed"]},{"title":"Webpack 5 LoaderContext:  `addContextDependency` causes  loader to rerun once after any change in watch mode","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\nOur project relies heavily on custom 'heavy' loaders, and fast compilation is crucial. In watch mode, every loader that utilizes `addContextDependency` reruns one more time after any project change, leading to longer build times. Trying to find a solution to minimize the re-running of these loaders and improve watch mode performance.\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nAfter initial compilation in watch mode every loader that uses `addContextDependency` will rerun one more time after any change in the project.\r\n\r\n## What is the current behavior?\r\n\r\nCustom loaders that use `addContextDependency` will rerun only if supplied context dependencies are changed.\r\n\r\n## If the current behavior is a bug, please provide the steps to reproduce.\r\n\r\nReproducible example here:  \r\nhttps:\/\/github.com\/modjke\/webpack-5-add-context-dependency-issue\r\n`txt-loader.js` will run twice: at startup and for the first time `index.js` is changed\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n## What is the expected behavior? \r\n\r\nLoaders with `addContextDependency` should run only once on initial compilation in watch mode.\r\n\r\n## What have we tried?\r\n- debugging `watchpack`, as it turns out `watchpack` reports changes correctly\r\n- using async\/sync loaders (same bug appears)\r\n- increasing `aggregateTimeout` \r\n- disabling hot module reload\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n## Other relevant information:\r\nwebpack version:  5.76.3\r\nNode.js version: 18.15.0\r\nOperating System:  Mac OS (M1), Windows 11 H22, Windows 10\r\nAdditional tools: ~\r\n","comments":["Do you use WSL? Do you have something specific? I can't reproduce it on linux (Ubuntu), Windows 11\r\n\r\nEven more, we have the same logic in many loaders and I known only about WSL bugs, but we don't have reports from other devleopers, so I am thinking something wrong with os envs... Need more information.\r\n\r\n**Note - please verify you don't have antivirus or something similar, sounds like when a program open a file, some kind of program is checking the file too**","> Do you use WSL? Do you have something specific? I can't reproduce it on linux (Ubuntu), Windows 11\r\n> \r\n> Even more, we have the same logic in many loaders and I known only about WSL bugs, but we don't have reports from other devleopers, so I am thinking something wrong with os envs... Need more information.\r\n> \r\n> **Note - please verify you don't have antivirus or something similar, sounds like when a program open a file, some kind of program is checking the file too**\r\n\r\nWell, i do use WSL but not in this case. \r\nWe have 100% reproducibility on windows 11, windows 10 and Mac OS on m1 and intel chipsets.\r\nSo what you telling is me that you don't see the `[!!!] Running txt-loader.js` message twice after running it in watch mode?\r\nTalking about this repo https:\/\/github.com\/modjke\/webpack-5-add-context-dependency-issue\r\nLet me clarify a bit:\r\n1. Run `webpack --watch`\r\n2. Observe `[!!!] Running txt-loader.js` message\r\n3. Change `index.js`\r\n4. Observe `[!!!] Running txt-loader.js` message once again even thou no dependencies was changed <- bug i'm trying to clear up\r\n5. Change `index.js` again, and again, no message - that's correct\r\n\r\nUPDATE: also we did check what `watchpack` reports after step 3 and it is only `index.js`","Webpack logs after step 4\r\n```\r\n> webpack-watchbug@1.0.0 start\r\n> webpack watch\r\n\r\n\r\n[!!!] Running txt-loader.js at ***\\projects\\webpack-watchbug\\source\\assets\r\n\r\nasset main.js 4.25 KiB [compared for emit] (name: main)\r\nruntime modules 670 bytes 3 modules\r\ncacheable modules 77 bytes\r\n  .\/source\/index.js 55 bytes [built] [code generated]\r\n  .\/source\/assets\/data.txt 22 bytes [built] [code generated]\r\nwebpack 5.76.3 compiled successfully in 129 ms\r\n\r\n[!!!] Running txt-loader.js at ***\\projects\\webpack-watchbug\\source\\assets\r\n\r\nassets by status 4.25 KiB [cached] 1 asset\r\ncached modules 670 bytes [cached] 3 modules\r\ncacheable modules 77 bytes\r\n  .\/source\/index.js 55 bytes [built]\r\n  .\/source\/assets\/data.txt 22 bytes [built]\r\nwebpack 5.76.3 compiled successfully in 26 ms\r\n```","> 1. Run webpack --watch\r\n> 2. Observe [!!!] Running txt-loader.js message\r\n> 3. Change index.js\r\n> 4. Observe [!!!] Running txt-loader.js message once again even thou no dependencies was changed <- bug i'm trying to clear up\r\n> 5. Change index.js again, and again, no message - that's correct\r\n\r\nI see, the original report was some misleading, investigate","Something wrong with `needBuild` in `NormalModule.js`:\r\n1. First run we have `true` and `true` for `index.js` and `data.txt`\r\n2. Second run the same\r\n3. Third and etc only `true` for `index.js`\r\n\r\nUpdate: here https:\/\/github.com\/webpack\/webpack\/blob\/eed37e93c5ea2eb18dd452953b6be33f0d5150b8\/lib\/FileSystemInfo.js#L2696","Threre is potential fix https:\/\/github.com\/webpack\/webpack\/pull\/16908, let's look at tests, because logic is really complex","> Threre is potential fix #16908, let's look at tests, because logic is really complex\r\n\r\nThis fix is working fine on our end. Not sure about side effects though.","For future fixes - the problem here:\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/FileSystemInfo.js#L1201 for files\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/FileSystemInfo.js#L1212 for directories\r\n\r\nShortly - watchpack returns `{}` for some files and directories (https:\/\/github.com\/webpack\/watchpack\/blob\/main\/lib\/DirectoryWatcher.js#L721 ) and return only `{ safeTime: 1682648759183 }` (directories), so we don't have the `timestampHash` properties for snapshots\r\n\r\nSo webpack thinks they are invalid when check files and directories and rebuild them on the second run and rewrite values on valid, and no problems on the third run.\r\n\r\nThe same for files, not only directories","`{}` seem to be the \"existance only\" object. So watchpack doesn't known about anything but that this file\/directory exists.\r\n\r\nThat doesn't seem to be enough for snapshoting, so webpack need to read more information about this file\/directory when snapshoting. The snapshoting already have an implementation for that in the case of `undefined`, but that doesn't seem to be used when `{}` is found. This should be fixed.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","> `{}` seem to be the \"existance only\" object. So watchpack doesn't known about anything but that this file\/directory exists.\r\n> \r\n> That doesn't seem to be enough for snapshoting, so webpack need to read more information about this file\/directory when snapshoting. The snapshoting already have an implementation for that in the case of `undefined`, but that doesn't seem to be used when `{}` is found. This should be fixed.\r\n\r\nIssue was closed due to inactivity, but the problem is clearly still present and described above.\r\n"],"labels":["bug","webpack-5"]},{"title":"webpack tries to resolve `new URL('.\/', import.meta.url)` to a module and fails or succeeds (both are wrong)","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWebpack's resolution of `new URL(..., import.meta.url)` does something unexpected when the target is a directory, which doesn't correspond to what either the browser or Node will do.  For comparison, try this in $BROWSER_OF_YOUR_CHOICE:\r\n```html\r\n<pre id=\"output\">\r\n<\/pre>\r\n<script type=\"module\">\r\n  const pre = document.getElementById(\"output\");\r\n  pre.innerHTML += new URL(\".\/\", import.meta.url).href;\r\n<\/script>\r\n```\r\nor in Node, create `index.mjs` and run it:\r\n```js\r\nconsole.log(new URL(\".\/\", import.meta.url).href);\r\n```\r\nIn both cases you should see something like:\r\n```\r\nfile:\/\/\/home\/dhd\/work\/webpack-wasm-test\/importmeta\/\r\n```\r\nWebpack does ... something else.  See below.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nGiven the `index.mjs` file above, run:\r\n```\r\nwebpack .\/index.mjs\r\n```\r\nIt will fail with an error like this:\r\n```\r\nERROR in .\/index.mjs 1:12-42\r\nModule not found: Error: Can't resolve '.\/' in '\/home\/dhd\/work\/importmeta'\r\nresolve '.\/' in '\/home\/dhd\/work\/importmeta'\r\n  Parsed request is a directory\r\n  No description file found in \/home\/dhd\/work\/importmeta or above\r\n  No description file found in \/home\/dhd\/work or above\r\n  as directory\r\n    existing directory \/home\/dhd\/work\/importmeta\r\n      No description file found in \/home\/dhd\/work\/importmeta or above\r\n      using path: \/home\/dhd\/work\/importmeta\/index\r\n        No description file found in \/home\/dhd\/work\/importmeta or above\r\n        no extension\r\n          \/home\/dhd\/work\/importmeta\/index doesn't exist\r\n```\r\n(if there is a `package.json` somewhere in a parent directory it will output some other stuff about that, but it will still fail in the same way)\r\n\r\nI can make it \"work\" if I initialize the current directory as a module:\r\n```\r\nnpm init\r\nnpm install -D webpack-cli webpack\r\ntouch index.js\r\nnpx webpack .\/index.mjs\r\n```\r\nThis is *not* what I want, because it will resolve the `new URL` above to the module in the current directory, then bundle whatever it can find in that module.  All I wanted was a URL that pointed to the current directory! (and a Pepsi)\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n\r\nSee the example here: https:\/\/github.com\/dhdaines\/webpack-wasm-test\/tree\/main\/importmeta\r\n\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nWebpack should just pass `new URL('.\/', import.meta.url)` through unchanged.  It should not try to resolve a directory as a module. \r\n Ideally it should also pass through unchanged any other instance of `new URL(..., import.meta.url)` where the target can't be resolved as an asset, since the user might create them after the fact.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  ^5.76.3 => 5.76.3\r\nNode.js version: 14.18.2\r\nOperating System: Linux 5.19 Ubuntu 22.04.2 LTS 22.04.2 LTS (Jammy Jellyfish)\r\n","comments":["Of course, I can also make it \"work\" if I listen to webpack and create `index` in the current directory, but the resolved `URL` in the output code will still be wrong in that case.  If I create `index.html` in `dist\/` and open it:\r\n```html\r\n<script src=\"main.js\"><\/script>\r\n```\r\nThen I get this in the console:\r\n```\r\nfile:\/\/\/home\/dhd\/work\/importmeta\/dist\/31d6cfe0d16ae931b73c\r\n```","Do you want to ignore only `console.log(new URL(\".\/\", import.meta.url).href);` or all `new URL(...)` syntax?\r\n\r\n> Ideally it should also pass through unchanged any other instance of new URL(..., import.meta.url) where the target can't be resolved as an asset, since the user might create them after the fact.\r\n\r\ncan you clarify, we already do it, or Am I missing something?","> Do you want to ignore only `console.log(new URL(\".\/\", import.meta.url).href);` or all `new URL(...)` syntax?\r\n> \r\n> > Ideally it should also pass through unchanged any other instance of new URL(..., import.meta.url) where the target can't be resolved as an asset, since the user might create them after the fact.\r\n> \r\n> can you clarify, we already do it, or Am I missing something?\r\n\r\nHi! As mentioned above, webpack should make `new URL(relative_path, import.meta.url)` do what you expect it to do, that is, return a URL to the thing referenced by `relative_path`.  Currently, this works with assets that you want to bundle, see: https:\/\/webpack.js.org\/guides\/asset-modules\/\r\n\r\nThe current behaviour of Webpack is *fantastic* and *fabulous* in the case where `relative_path` points to an asset that you want to bundle, i.e. a file relative to the source file containing `new URL`.  Webpack will bundle it, and rewrite the code so that you get a URL to the output asset.\r\n\r\nThe main problem is when it points to a directory.  Webpack will try to resolve it as a module.  This is wrong, because `new URL` is not a module import.  Minimally it should just pass it through in this case.\r\n\r\nI think it would be helpful if it would also pass through anything else that it is unable to resolve to an asset, but maybe that gets into something beyond my comprehension of how Webpack works...\r\n\r\n","See specifically https:\/\/webpack.js.org\/guides\/asset-modules\/#url-assets for the current (good) behaviour of webpack for files referenced with `new URL`","> The main problem is when it points to a directory. Webpack will try to resolve it as a module. This is wrong, because new URL is not a module import. Minimally it should just pass it through in this case.\r\n\r\n\r\nyeah, do you want to send a fix - https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/dependencies\/URLPlugin.js#L52?\r\n","> > The main problem is when it points to a directory. Webpack will try to resolve it as a module. This is wrong, because new URL is not a module import. Minimally it should just pass it through in this case.\r\n> \r\n> yeah, do you want to send a fix - https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/dependencies\/URLPlugin.js#L52?\r\n\r\nSure! Thanks for the pointer to the relevant code, it would have taken me a lot longer to find that ;-)  I'll make a PR...","@dhdaines let us know if you need any additional guidance. Commenting to keep from getting stale :-) ","Thanks!  I haven't had the time to look at this in the last couple weeks, but should have some today, I'll let you know!","I looked at our code and I am afraid it will be breaking change, anyway I agree with yor and we should do nothing with it (by default as minimum),  unfortunately it is not possible to change the logic now (we don't know how many developers can use it and based on our logic it can be used and it will work), anyway we can implement an options for this, i.e. I want:\r\n- implement an option to allow ignore this\r\n- set it `true` by default when you have `experiments.futureDefaults`\r\n- set `fullySpecified` to `true` for any `new URL(...)` syntax, i.e. you should always write full URL when you use `new URL(...)`\r\n\r\nFirstly I want to start with `1` and `2` and postpone `3` for webpack 6","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","> * implement an option to allow ignore this\r\n> * set it `true` by default when you have `experiments.futureDefaults`\r\n> * set `fullySpecified` to `true` for any `new URL(...)` syntax, i.e. you should always write full URL when you use `new URL(...)`\r\n> \r\n> Firstly I want to start with `1` and `2` and postpone `3` for webpack 6\r\n\r\nAh, thank you - sorry I didn't get any time to look further into this, I was a bit lost in the code.  Having it be an experimental option would make sense to me.  Commenting to avoid it getting stale as well! I hope I can look at it this week or next!","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","> I looked at our code and I am afraid it will be breaking change, anyway I agree with yor and we should do nothing with it (by default as minimum), unfortunately it is not possible to change the logic now (we don't know how many developers can use it and based on our logic it can be used and it will work), anyway we can implement an options for this, i.e. I want:\r\n> \r\n> * implement an option to allow ignore this\r\n> * set it `true` by default when you have `experiments.futureDefaults`\r\n> * set `fullySpecified` to `true` for any `new URL(...)` syntax, i.e. you should always write full URL when you use `new URL(...)`\r\n> \r\n> Firstly I want to start with `1` and `2` and postpone `3` for webpack 6\r\n\r\ni would like to help, but i don't know how to test the code in URLPlugin.js after rewrite","Just put config case here https:\/\/github.com\/webpack\/webpack\/tree\/main\/test\/configCases"],"labels":["bug","enhancement","webpack-5","webpack-6"]},{"title":"Treeshake dynamic imports based on destructuring","body":"Given the following code: \r\n\r\n```javascript\r\nimport('lodash-es').then(({uniq}) => uniq)\r\n```\r\n\r\nWhen webpack bundles this code, it should only include the module tree for `uniq` and tree-shake the rest of the exports in `lodash-es` as unused. ","comments":["Question: \r\n\r\nDo we need to support this syntax style also: \r\n\r\n```javascript\r\n\r\nconst {uniq} = await import('lodash-es');\r\n\r\n```","with `then` it is very tricky. we definitely could not support all cases. I thought about async\/await support or simply -> only assigning support, like:\r\n```js\r\nimport * as ns from 'a';\r\n const {b} = ns;\r\n const {c} = await import('c');\r\n const {d} = process.env; \/\/ or any defined value","What are the scenarios which couldn't be supported with `.then()`? ","We are facing the same issue too, for a really long time.\r\nWhat I currently do to bypass this is to add an intermediate file that imports statically and re-export.\r\nlike  \r\n``` \r\nimport { uniq} from 'lodash-es' \r\nexport uniq\r\n```\r\nI understand that object deconstruction dead code elimination is very difficult, which means performing dead code on object property. \r\nAs we wrote `const {uniq} = await import('lodash-es');`, a [module namespace object](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Operators\/import#module_namespace_object) has already been created.\r\nA single-line analyzation of `const {uniq} = await import('lodash-es');` would not be that hard?  @vankop \r\nWhat is tricky is when using babel to compile\r\nA simple \r\n``` js\r\nasync function main() {\r\n    const {uniq} = await import('lodash-es);\r\n    console.log(uniq);\r\n}\r\nmain();\r\n```\r\nwould be transpiled to \r\n``` js\r\nimport _regeneratorRuntime from \"@babel\/runtime\/helpers\/regeneratorRuntime\";\r\nimport _asyncToGenerator from \"@babel\/runtime\/helpers\/asyncToGenerator\";\r\nfunction main() {\r\n  return _main.apply(this, arguments);\r\n}\r\nfunction _main() {\r\n  _main = _asyncToGenerator( \/*#__PURE__*\/_regeneratorRuntime().mark(function _callee() {\r\n    var _yield$import, uniq;\r\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\r\n      while (1) {\r\n        switch (_context.prev = _context.next) {\r\n          case 0:\r\n            _context.next = 2;\r\n            return import('lodash-es');\r\n          case 2:\r\n            _yield$import = _context.sent;\r\n            uniq = _yield$import.uniq;\r\n            console.log(uniq);\r\n          case 5:\r\n          case \"end\":\r\n            return _context.stop();\r\n        }\r\n      }\r\n    }, _callee);\r\n  }));\r\n  return _main.apply(this, arguments);\r\n}\r\nmain();\r\n```\r\nwhich uses \"switch case\" based on runtime value, making it impossible to statically analyze.","BUT, Treeshake dynamic imports based on destructuring are still pretty important for bundlers because of the possible code size it could save. \r\nMaybe we could \r\n1. Somehow add intermediate files automatically by user's plugin , which creates a virtual module that statically imports and re-exports the used exports and changes this source code before handing it to babel.  \r\n2. Do javascript parsing before any loaders for js, and mark unused export before any loaders. \r\n@vankop @alexander-akait @sokra \r\nWhat is your opinions on this?","@TheLarkInn  because of javascript complexity:\r\n```js\r\nconst a = import('a');\r\na.then(({b}) => {});\r\na.then(({c}) => {}); \/\/ this will work I guess\r\n\r\na.then(v => {\r\n  const {c} = v;\r\n  return v;\r\n}).then(() => {}); \/\/ quite difficult to catch all thens here\r\n```\r\n\r\nwe could support **only** this syntax like:\r\n```js\r\nimport().then((__destructing_here__) => {});\r\n```\r\n\r\nproblem here we introduce some \"non-stable\" build in terms of tree-shaking. e.g. like in example user will \"refactor\" destructing to destructing from variable. in case of async\/await:\r\n```js\r\nconst b = await import('b');\r\nconst { a, c } = b;\r\n```\r\nshould work as I remember ( we have something like variable replacement in JavascriptParser )","What about `(await import('.\/index.js')).meta`?","Note - we have `\/* webpackExports: [\"abc\", \"default\"] *\/` for non analizable imports","So there definitely appears to be a variety of scenarios which would be hard to analyze treeshaking. \n\n_HOWEVER_ we can encourage people to **achieve** treeshaking from dynamic imports by using a particular set of conventions. For now let's just call it \"inline import() destructuring\": \n\n### Using `.then()`\n\n```javascript\nimport(\"lodash-es\").then(({uniq}) => {\n  uniq([1,5,6,7,7,4,2]);\n});\n```\n\n### Using `await`\n\n```javascript\n\nconst {uniq} = await import(\"lodash-es\");\n\nuniq([1,1,1,34,5,6]);\n\n```\n\nWe can guide people to sticking with \"inline import() destructuring\". Others can setup lint rules, etc if they want to enforce bundle-size performance-forward patterns.\n\n\n\n\n\n\n","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["enhancement","X5: work required (PR \/ Help Wanted)","performance","X4: work required","P2: Very Important","gsoc-2024"]},{"title":"Add public path option to url","body":"If the generator for asset\/resource has a custom public path, respect that option also in Css Url calls.\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nBugfix\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nNot yet.\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@alexander-akait will add a test in your style, thank you!","<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: janlent1  (44e88388b888820167c3a2a5801e3e9ab2135884)<\/li><\/ul>"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"Fix Uncaught TypeError: Cannot read properties of undefined (reading \u2026","body":"\u2026\u2018indexOf\u2019)\r\n\r\nWhen creating a link for a css chunk to be loaded, src is missing. The href is set previously, so we can get via the URL the origin, which is what we need to compare here.\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\nBugfix\r\n**Did you add tests for your changes?**\r\nNo\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@janlent1 Sorry for delay, can you add a test case?"],"labels":["PR: unreviewed"]},{"title":"Implement new benchmark test\/ci system","body":"## webpack performance test harness\r\n\r\nFor a while, we had setup a performance benchmark system on CI which would compare the performance of any fix\/feature at PR time made to webpack\/webpack. However, this was so flakey that we had to get rid of it for PR reliability reasons. \r\n\r\nI'd like to rebuild a test\/CI system that will run performance benchmarks against PR's that we submit to webpack. This could incorporate any of the systems we've set up in `\/benchmark` in the repository. \r\n\r\nPerformance is one of the key competitive features in bundlers today, and since we are not making any clear stances so far on native technology bets, I would like to keep performance in a tight feedback loop for the project. \r\n\r\n### Scenario\r\n\r\n- [ ] As a maintainer, I want to see a clear performance impact on every PR made to the repository\r\n- [ ] As a maintainer, I want to block any PR on large performance regressions\r\n- [ ] As a maintainer, I want the CI\/PR quality gate to be _reliable_ and something I can trust \r\n- [ ] As a contributor, I want a clear\/understandable feedback from the performance benchmarking system when I submit a PR.","comments":["@jakebailey I heard from @rbuckton that you all are working on shoring up the reliability of your benchmark framework for TS. Do you have any referenceable issues we could study to implement\/improve our own benchmarking suite. ","I am still experimenting, but one thing that has helped a little is:\r\n\r\n- Following\/using https:\/\/pyperf.readthedocs.io\/en\/latest\/system.html, e.g. setting up a machine where a core is isolated. But if you want to use more than one core, things get really weird based on scheduling, and I'm working on figuring that one out.\r\n- In general, hide benchmark results that are not \"significant\"; I added to our perf infrastructure something which performs a U-test like https:\/\/pkg.go.dev\/golang.org\/x\/perf\/benchstat and hides the results which are unlikely to be \"real\" in that they are indistiguishable from random chance to p=0.05.\r\n\r\nThere are some other flags I'm testing, specifically `--predictable`, which make benchmarks _super_ comparable, but I'm still working to udnerstand the implications of this flag and if it's not a good idea to use.\r\n\r\nAlso: https:\/\/github.com\/faster-cpython\/ideas\/issues\/480","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","@jakebailey are you still working on this?","Er, performance stuff for TypeScript? Or this issue specifically? I'm not working on anything for webpack, no.","I meant this issue. Thx!\r\n\r\n\r\n","@TheLarkInn I'd like to reserve this for gsoc next year, if that is ok?","@snitin315 needs gsoc label","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","@snitin315 reopen this","Dear @snitin315 \r\nAfter going through the project details and related issue #16827, I am genuinely excited about the prospect of contributing to the development of the Webpack Benchmark Tooling. I have a  background in JavaScript, Node.js, CSS, and HTML and C++ which are essential prerequisites for this project. \r\n\r\nThank you for considering my expression of interest. I look forward to the opportunity to contribute to the Webpack Benchmark Tooling project and contribute to the continuous improvement of this fantastic tool.","I see ! interesting project to work on. Seems simple, yet tricky.  would love to contribute here , as  @TheLarkInn  mentioned it's crucial for a bundler.\ud83d\ude43  cc: @snitin315 , @dhruvdutt ","Hey @snitin315 , @dhruvdutt \r\nAfter going through the project would like to contribute in the development of Webpack Benchmark Tooling. Having familiarity with the skills required in this project .\r\nI look forward for an opportunity and look forward for sincere development."],"labels":["X5: work required (PR \/ Help Wanted)","performance","P2: Very Important","gsoc-2024"]},{"title":"webpack-dev-server fails if `#` in project path","body":"### Bug report\r\n\r\nIf you run the `npx webpack serve` on a project whose path contains a `#` character, then `webpack-dev-server` will fail to serve the content. \r\n\r\n### Actual Behavior\r\n\r\nHere are some error logs:\r\n\r\n<summary>\r\n<details>\r\n\r\n```\r\n\uf17c \uf07c ~\/projects\/f#\/webpack                                                                     \uf017 07:57:20\r\n\u276f npx webpack serve\r\n<i> [webpack-dev-server] Project is running at:\r\n<i> [webpack-dev-server] Loopback: http:\/\/localhost:8080\/\r\n<i> [webpack-dev-server] On Your Network (IPv4): http:\/\/192.168.1.225:8080\/\r\n<i> [webpack-dev-server] On Your Network (IPv6): http:\/\/[fe80::c3db:1547:cf82:8d44]:8080\/\r\n<i> [webpack-dev-server] Content not from webpack is served from '\/home\/felix\/projects\/f#\/webpack\/public' directory\r\nassets by status 87.9 KiB [cached] 1 asset\r\nruntime modules 27.1 KiB 12 modules\r\ncacheable modules 551 KiB\r\n  modules by path ..\/..\/f#\/webpack\/node_modules\/webpack\/hot\/*.js 4.59 KiB\r\n    ..\/..\/f#\/webpack\/node_modules\/webpack\/hot\/dev-server.js 1.88 KiB [built] [code generated]\r\n    ..\/..\/f#\/webpack\/node_modules\/webpack\/hot\/log.js 1.34 KiB [built] [code generated]\r\n    ..\/..\/f#\/webpack\/node_modules\/webpack\/hot\/log-apply-result.js 1.29 KiB [built] [code generated]\r\n    ..\/..\/f#\/webpack\/node_modules\/webpack\/hot\/emitter.js 75 bytes [built] [code generated]\r\n  ..\/..\/f#\/webpack\/src\/index.js 217 bytes [built] [code generated]\r\n  ..\/..\/f#\/webpack\/node_modules\/lodash\/lodash.js 531 KiB [built] [code generated]\r\n  ..\/..\/f#\/webpack\/node_modules\/events\/events.js 14.5 KiB [built] [code generated]\r\n\r\nWARNING in configuration\r\nThe 'mode' option has not been set, webpack will fallback to 'production' for this value.\r\nSet 'mode' option to 'development' or 'production' to enable defaults for each environment.\r\nYou can also set it to 'none' to disable any default behavior. Learn more: https:\/\/webpack.js.org\/configuration\/mode\/\r\n\r\nERROR in Module not found: Error: Can't resolve '\/home\/felix\/projects\/f#\/webpack\/node_modules\/webpack-dev-server\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true' in '\/home\/felix\/projects\/f#\/webpack'\r\nresolve '\/home\/felix\/projects\/f#\/webpack\/node_modules\/webpack-dev-server\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true' in '\/home\/felix\/projects\/f#\/webpack'\r\n  using description file: \/home\/felix\/projects\/f#\/webpack\/package.json (relative path: .)\r\n    Field 'browser' doesn't contain a valid alias configuration\r\n    root path \/home\/felix\/projects\/f#\/webpack\r\n      using description file: \/home\/felix\/projects\/f#\/webpack\/package.json (relative path: .\/home\/felix\/projects\/f#\/webpack\/node_modules\/webpack-dev-server\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true)\r\n        no extension\r\n          Field 'browser' doesn't contain a valid alias configuration\r\n          \/home\/felix\/projects\/f#\/webpack\/home\/felix\/projects\/f#\/webpack\/node_modules\/webpack-dev-server\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true doesn't exist\r\n        .js\r\n          Field 'browser' doesn't contain a valid alias configuration\r\n          \/home\/felix\/projects\/f#\/webpack\/home\/felix\/projects\/f#\/webpack\/node_modules\/webpack-dev-server\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true.js doesn't exist\r\n        .json\r\n          Field 'browser' doesn't contain a valid alias configuration\r\n          \/home\/felix\/projects\/f#\/webpack\/home\/felix\/projects\/f#\/webpack\/node_modules\/webpack-dev-server\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true.json doesn't exist\r\n        .wasm\r\n          Field 'browser' doesn't contain a valid alias configuration\r\n          \/home\/felix\/projects\/f#\/webpack\/home\/felix\/projects\/f#\/webpack\/node_modules\/webpack-dev-server\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true.wasm doesn't exist\r\n        as directory\r\n          \/home\/felix\/projects\/f#\/webpack\/home\/felix\/projects\/f#\/webpack\/node_modules\/webpack-dev-server\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true doesn't exist\r\n    using description file: \/home\/felix\/projects\/f#\/webpack\/node_modules\/webpack-dev-server\/package.json (relative path: .\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true)\r\n      no extension\r\n        Field 'browser' doesn't contain a valid alias configuration\r\n        \/home\/felix\/projects\/f#\/webpack\/node_modules\/webpack-dev-server\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true doesn't exist\r\n      .js\r\n        Field 'browser' doesn't contain a valid alias configuration\r\n        \/home\/felix\/projects\/f#\/webpack\/node_modules\/webpack-dev-server\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true.js doesn't exist\r\n      .json\r\n        Field 'browser' doesn't contain a valid alias configuration\r\n        \/home\/felix\/projects\/f#\/webpack\/node_modules\/webpack-dev-server\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true.json doesn't exist\r\n      .wasm\r\n        Field 'browser' doesn't contain a valid alias configuration\r\n        \/home\/felix\/projects\/f#\/webpack\/node_modules\/webpack-dev-server\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true.wasm doesn't exist\r\n      as directory\r\n        \/home\/felix\/projects\/f#\/webpack\/node_modules\/webpack-dev-server\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true doesn't exist\r\n  using description file: \/home\/felix\/projects\/f#\/webpack\/package.json (relative path: .)\r\n    Field 'browser' doesn't contain a valid alias configuration\r\n    root path \/home\/felix\/projects\/f#\/webpack\r\n      using description file: \/home\/felix\/projects\/f#\/webpack\/package.json (relative path: .\/home\/felix\/projects\/f)\r\n        no extension\r\n          Field 'browser' doesn't contain a valid alias configuration\r\n          \/home\/felix\/projects\/f#\/webpack\/home\/felix\/projects\/f doesn't exist\r\n        .js\r\n          Field 'browser' doesn't contain a valid alias configuration\r\n          \/home\/felix\/projects\/f#\/webpack\/home\/felix\/projects\/f.js doesn't exist\r\n        .json\r\n          Field 'browser' doesn't contain a valid alias configuration\r\n          \/home\/felix\/projects\/f#\/webpack\/home\/felix\/projects\/f.json doesn't exist\r\n        .wasm\r\n          Field 'browser' doesn't contain a valid alias configuration\r\n          \/home\/felix\/projects\/f#\/webpack\/home\/felix\/projects\/f.wasm doesn't exist\r\n        as directory\r\n          \/home\/felix\/projects\/f#\/webpack\/home\/felix\/projects\/f doesn't exist\r\n    No description file found in \/home\/felix\/projects or above\r\n    no extension\r\n      Field 'browser' doesn't contain a valid alias configuration\r\n      \/home\/felix\/projects\/f doesn't exist\r\n    .js\r\n      Field 'browser' doesn't contain a valid alias configuration\r\n      \/home\/felix\/projects\/f.js doesn't exist\r\n    .json\r\n      Field 'browser' doesn't contain a valid alias configuration\r\n      \/home\/felix\/projects\/f.json doesn't exist\r\n    .wasm\r\n      Field 'browser' doesn't contain a valid alias configuration\r\n      \/home\/felix\/projects\/f.wasm doesn't exist\r\n    as directory\r\n      \/home\/felix\/projects\/f doesn't exist\r\n\r\nwebpack 5.75.0 compiled with 1 error and 1 warning in 2701 ms\r\n^C<i> [webpack-dev-server] Gracefully shutting down. To force exit, press ^C again. Please wait...\r\n```\r\n<\/details>\r\n<\/summary>\r\n\r\n\r\n### Expected Behavior\r\n\r\nThe server should run regardless of the characters in the folder path.\r\n\r\n### How Do We Reproduce?\r\n\r\nHere is a minimal project that can trigger this behavior. \r\n\r\n[webpack.tar.gz](https:\/\/github.com\/webpack\/webpack-dev-server\/files\/10922481\/webpack.tar.gz)\r\n\r\nThis script should reproduce the behavior if you are using something POXIX-y.\r\n\r\n```bash\r\nmkdir \"test#\"\r\ntar -xzvf webpack.tar.gz -C \"test#\"\r\ncd \"test#\/webpack\"\r\nnpx webpack serve\r\n```\r\n\r\nSystem:\r\n    OS: Linux 5.10 Debian GNU\/Linux 11 (bullseye) 11 (bullseye)\r\n    CPU: (4) x64 Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz\r\n    Memory: 8.45 GB \/ 15.31 GB\r\n  Binaries:\r\n    Node: 16.19.1 - ~\/.asdf\/installs\/nodejs\/16.19.1\/bin\/node\r\n    npm: 9.6.0 - ~\/.asdf\/plugins\/nodejs\/shims\/npm\r\n  Browsers:\r\n    Chrome: 106.0.5249.119\r\n    Firefox: 102.8.0esr\r\n  Packages:\r\n    webpack: ^5.75.0 => 5.75.0 \r\n    webpack-cli: ^5.0.1 => 5.0.1 \r\n    webpack-dev-server: ^4.11.1 => 4.11.1 \r\n\r\n\r\n","comments":["thanks so much","Reproducible example (code from dev server):\r\n```js\r\nconst additionalEntry = [\r\n  '\/home\/akait\/IdeaProjects\/webpack-cli\/test#\/webpack\/node_modules\/webpack-dev-server\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true',\r\n  '\/home\/akait\/IdeaProjects\/webpack-cli\/test#\/webpack\/node_modules\/webpack\/hot\/dev-server.js'\r\n];\r\n\r\nif (typeof webpack.EntryPlugin !== \"undefined\") {\r\n      for (const additionalEntry of additionalEntries) {\r\n        new webpack.EntryPlugin(compiler.context, additionalEntry, {\r\n          name: undefined,\r\n        }).apply(compiler);\r\n      }\r\n    }\r\n```    \r\n\r\nAnd the problem in ` '\/home\/akait\/IdeaProjects\/webpack-cli\/test#\/webpack\/node_modules\/webpack-dev-server\/client\/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8080&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true'`, if we remove all after `?...` we will not have the problem, so I think we have a problem in our resolver, somwhere here https:\/\/github.com\/webpack\/enhanced-resolve\/blob\/main\/lib\/util\/identifier.js\r\n\r\n","@vankop Hello, can you give an advice here, I feel like we don't resolve it valid way","yeah looks like we reverted this https:\/\/github.com\/webpack\/enhanced-resolve\/pull\/244 unsure why..","I would still consider this as a webpack limitation since webpack treat file path as url path ( with `#` and `?` as a \"special\" chars )\r\n","@vankop I tried to use `file:\/\/` but it doesn't work, maybe we can fix this limitation using `file:\/\/`, so `file:\/\/` will always parsered and handled as URL without any limitations\r\n\r\nAnd it should not break nothing (I hope :smile: )","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["bug","inactive","webpack-5"]},{"title":"Support import.meta.resolve","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n```js\r\nconst url = import.meta.resolve(\"...\");\r\n```\r\nNote: This differs from the Node.js' experimental version, which is asynchronous.[^1][^2]\r\n\r\nI'm not sure whether it should act like `require.resolve` or `new URL`.\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\nhttps:\/\/html.spec.whatwg.org\/#hostgetimportmetaproperties\r\nhttps:\/\/chromestatus.com\/feature\/5086507990777856\r\n\r\n**How should this be implemented in your opinion?**\r\n.\r\n\r\n**Are you willing to work on this yourself?**\r\nno\r\n\r\n[^1]: https:\/\/github.com\/nodejs\/modules\/issues\/550#issuecomment-685146852\r\n[^2]: https:\/\/github.com\/whatwg\/html\/pull\/5572#issuecomment-1041876685","comments":["@devongovett @lukastaegert lets try to align on this picking which way to go on this so theres not a freaking mess . ","While Rollup has facilities to let plugins add any implementation that they fancy, a `require.resolve` based\nimplementation will likely never make it into Rollup core. After all, Rollup does not even support require, and it feels less standard than the browser implementation. So I would definitely lean towards the new URL implementation, with the option for plugins to override this.","As I mentioned in the above parcel issue, I think it is weird that `import.meta.resolve` would _influence_ the resolution rather than only resolving to what is already there.`new URL('...', import.meta.url)` creates a dependency, therefore moving the target module or asset to a separate file\/bundle, and it would be weird if `import.meta.resolve` did that IMO. That would mean using `import.meta.resolve` would change the file structure of the output vs not using it. Maybe providing a URL reference to the resolved module within whatever bundle it ends up in via other dependencies would be more expected?","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","not stale"],"labels":["enhancement","webpack-5","Send a PR"]},{"title":"Maximum call stack size exceeded -> In SourceMapDevToolPlugin\/ Tappable","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWhen running the dev-server in live-reload mode and changing files the dev server will immediately die with this stack trace when changing a file. With this stack trace:\r\n\r\n```\r\nRangeError: Maximum call stack size exceeded\r\n    at eval (eval at create (\/Users\/tim.mcconechy\/Dev\/enterprise-wc\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:11:1)\r\n    at \/Users\/tim.mcconechy\/Dev\/enterprise-wc\/node_modules\/webpack\/lib\/SourceMapDevToolPlugin.js:549:10\r\n    at \/Users\/tim.mcconechy\/Dev\/enterprise-wc\/node_modules\/neo-async\/async.js:2830:7\r\n    at Object.each (\/Users\/tim.mcconechy\/Dev\/enterprise-wc\/node_modules\/neo-async\/async.js:2857:9)\r\n    at \/Users\/tim.mcconechy\/Dev\/enterprise-wc\/node_modules\/webpack\/lib\/SourceMapDevToolPlugin.js:384:17\r\n    at \/Users\/tim.mcconechy\/Dev\/enterprise-wc\/node_modules\/neo-async\/async.js:2830:7\r\n    at Object.each (\/Users\/tim.mcconechy\/Dev\/enterprise-wc\/node_modules\/neo-async\/async.js:2857:9)\r\n    at \/Users\/tim.mcconechy\/Dev\/enterprise-wc\/node_modules\/webpack\/lib\/SourceMapDevToolPlugin.js:207:15\r\n    at \/Users\/tim.mcconechy\/Dev\/enterprise-wc\/node_modules\/webpack\/lib\/Compilation.js:501:18\r\n    at Hook.eval [as callAsync] (eval at create (\/Users\/tim.mcconechy\/Dev\/enterprise-wc\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:7:1)\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nCan see it in our repo\r\n-  clone https:\/\/github.com\/infor-design\/enterprise-wc\r\n-  edit `webpack.config.dev.js` so that  `devtool: 'cheap-module-source-map' ` (not `eval-source-map` as it is now as a workaround)\r\n- `nvm use` (node 18 or 16 so not a node issue)\r\n- `npm i` \r\n- `npm run start`\r\n- change any file like src\/components\/ids-about\/ids-about.ts (remove a `;`) and press save\r\n- stack trace will appear\r\n\r\n**What is the expected behavior?**\r\nThis seems to be a new issue with something introduced recently in the `npm` ecosystem, as it happens on old and new versions of our project with various versions of the dependencies.\r\n\r\ndevtool seems related ->https:\/\/webpack.js.org\/configuration\/devtool\/ \r\nI also changed some of these options in webpack.config.dev.js and the \"eval\" ones seem to work...\r\n\r\nSeems also to happen with more files like our repo has. We can run in \"filter mode\" with less entries and the issue does not occur `npm --components=about run start`\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.75.0\r\nNode.js version: 18\r\nOperating System: Mac\r\nAdditional tools: \r\n","comments":["Looks like some source maps is really deep to merge... I will look deeply soon","@tmcconechy would you be willing to test this on the latest version of webpack? ","@TheLarkInn no it does not seem to be fixed on the latest. I added one step as you need to  make `devTool='cheap-module-source-map'` - we have a workaround in place with `eval-cheap-module-source-map` but this isnt good as it requires us to ignore [CSP](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/CSP) ","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["bug","X4: work required","S4: Broken","X1: Inspection required","inactive"]},{"title":"Support of asynchronous computation in DefinePlugin.runtimeValue","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nDefinePlugin.runtimeValue supporting async function \/ promise \/ callback for resolving value.\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\nDefinePlugin.runtimeValue allow dynamic generation of define values and re-generation based on file-system changes. \r\nLack of async support means that \r\n\r\n* If value is calculated from file contents they have to be read synchronously\r\n* The processing can not use any library that provide exclusively async (promise\/callback) api\r\n* Blocking sequential operations will slow down the build\r\n* Blocking operations will block the whole process which may be a big problem if webpack is as part of bigger program  \r\n\r\n\r\n**How should this be implemented in your opinion?**\r\nI do not understand the code enough to suggest solution.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n","comments":["Feel free to send a PR","@AGrzes if you have questions or need guidance, don't hesitate to submit a draft PR, or follow up with @alexander-akait or myself in this issue. ","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","@alexander-akait I would like to work on this, do you have any recommendations on where to get started?","Hello, no, just implement an async support, it should be not hard","@alexander-akait would it not be a problem if [`RuntimeValue.exec`](https:\/\/github.com\/webpack\/webpack\/blob\/4fb4890dae7516c41c1592073845ce8a36fae8ec\/lib\/DefinePlugin.js#L97) were to return a promise, since `DefinePlugin.apply` is completely synchronous?","You can refactor code and make it async","@alexander-akait which would require `AsyncHook`s to be added to `JavascriptParser.hooks`, correct?"],"labels":["enhancement","X5: work required (PR \/ Help Wanted)","webpack-5","Send a PR"]},{"title":"Provide more info in `ChunkLoadError`","body":"<!-- Bug reports and Feature requests must use other templates, or will be closed -->\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https:\/\/gitter.im\/webpack\/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nWould it be possible to provide more info in [ChunkLoadError](https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/web\/JsonpChunkLoadingRuntimeModule.js#L309), i.e. exact reason of failing?\r\n\r\n\r\nI have an interesting case where from time to time my chunk is not loaded. When I open `devtools` I can see that request for chunk is successful but the chunk is still not loaded. I have implemented retry strategy for these cases but it seems it does not help. \r\n\r\nI would like to provide you with minimal working example but unfortunately I am not able to provide one. I think there is something interfering with the webpack code. Maybe some old library or something hence more info in the error or original event attached to the error would be nice to have. Maybe the original event contains more information about failing. \r\n\r\n\r\nAs you can see from the screenshot the bundle loads correctly but it still throws ChunkLoadError hence I try it again 3x but it still fails.\r\n\r\n![Screenshot 2023-01-06 at 15 57 48](https:\/\/user-images.githubusercontent.com\/12775440\/211039272-819e6efc-1d69-49ea-9d1d-dd1604091b72.png)\r\n\r\n\r\nWould it be please possible to attach original event to Error the same way as [Error.request](https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/web\/JsonpChunkLoadingRuntimeModule.js#L182) is?","comments":["Hello, do you mean you need original timeout error?","I need to know the reason why it failed. Is there any timeout for load? I did not known about that. Anyway you can see from the screenshot that the chunk is loaded but it still failed, so there might be something going on and I am not able to find out from the `ChunkLoadError`. I need to see rather the original error. It can be added as a property to `ChunkLoadError`.","Do you want to improve it and send a PR?","Unfortunately no... I am not very familiar with the source code and build process. ","I faced recently a similar scenario: the error was caused by a syntax error in safari due to a lookbehind regex (not supported in safari).\r\nThe chunk was downloaded successfully but an exception was triggered during script evaluation and reported by webpack runtime as loading error.\r\n\r\nI can share a reproducible example if needed and glad to take a look at it and send a PR!","Hi @alexander-akait \r\nI created a [reproducible repo](https:\/\/github.com\/aespinolopez\/webpack_script_evaluation_error) for my comment above.\r\n\r\nBoth the parsing error and webpack chunk error are reported to console and the orignal error should always be displayed by the [specificatoin](https:\/\/html.spec.whatwg.org\/multipage\/webappapis.html#creating-scripts) if i understand it correctly.\r\nThe parsing error will be opaque in case of cross origin scripts and it will log Script Error.\r\n\r\nIn order to add the original error to ChunkLoadError a global error handler is needed and i don't know if this is a good idea (i'm open to suggestions but i think it is the only possible implementation) so my suggestion would be to change the error message of ChunkLoadError IF my assumptions are correct:\r\n\r\nWebpack reports the error on **lib\/web\/JsonpChunkLoadingRuntimeModule.js:177**. This callback is attached to the script onload\/onerror handlers and only runs if **installedChunks** is truthy (only possible truthy value is [res, rej, promise]) meaning the chunk has not load correctly.\r\nIn this scenario if the handler for the callback is onload the error type is set to **missing** and i think this is misleading and incorrect because the only possible scenario here is that the script has actually being loaded but an exception was thown during parsing \/ evaluation otherwise installedChunkData will be 0.\r\n\r\nAs conclusion i think the log  \"missing: {url}\" should be change to a value like ChunkError: {url}\r\n\r\n","@aespinolopez sorry for delay, if you are intresting you can send a PR and I can help you","@alexander-akait sure, glad to send a PR, but i don't know which is the preferred solution. \r\n\r\n- 1. Changing the wording of the error message to reflect a runtime error during evaluation \/ execution\r\n- 2. Looking for the real error message to report it in webpack's runtime\r\n- some alternative solution","@aespinolopez I think\r\n\r\n> Looking for the real error message to report it in webpack's runtime\r\n\r\nI think is better","Would also love to see this merged. We are facing some similar issues, where at least from the metrics perspective the number of errors we get is higher than the failed network requests - so we are a bit in the dark of what is going on.\r\n\r\nWould be great if we can get some more information in our logs on the reason why chunks failed to load :)","Hi @Joozty! Any chance you managed to figure out what is the issue? I am getting the exact same error, i can see the chunk in my devtools but somehow failing to load it :\/","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","Hey folks, I encountered same issue in my app and found something interesting which could explain randomness.\r\n\r\n- I have chunk CSS (`my-chunk.css`) which imports fonts from google fonts like this `@import url('https:\/\/fonts.googleapis.com\/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');`\r\n- and if I block `fonts.googleapis.com` domain, I get ChunkLoadError with information that `my-chunk.css` failed to be loaded even I see that it was loaded fine in network\r\n\r\nAnd as far as I know, googleapis is blocked in some countries (e.g. China) or can be blocked by some firewalls or maybe even browser extensions because Google tracks user IP address.","@flucivja hm sounds intresting, can you provide an example? Because maybe you need try\/catch in your case","@alexander-akait here is an example: https:\/\/codesandbox.io\/p\/sandbox\/frosty-feynman-m79rwq.\r\n\r\nBut you must download code and run it locally because codesandbox does not apply MiniCssExtractPlugin for some reason.\r\nWhen you run it locally, check network, there is font loading from googleapis which is imported in `Article.css` chunk.\r\nThen block this request to googleapis and refresh page (also attaching screenshots below with showing this behavior).\r\n\r\nBefore blocking request to googleapis:\r\n![image](https:\/\/github.com\/webpack\/webpack\/assets\/4375072\/7d43eccf-4859-4273-b0a3-c406be5f0846)\r\n\r\nAfter blocking request to googleapis:\r\n![image](https:\/\/github.com\/webpack\/webpack\/assets\/4375072\/7d296ff8-a0f3-44a3-9dfa-102754abe864)\r\n\r\n","@flucivja Sorry for the delay in response, yes I see the problem. An interesting problem is that if at least some module in the application\/chunk is not available, then the application is broken, it is fully true for JS, because you code will be broken, but there are a cases for CSS like you, I think we need an option for such cases, and the developers must decide for themselves, because theoretically any code you have could be related to this, for example you CSS file can set custom properties and your JS logic can rely on such values\r\n\r\nCan you open an issue in mini-css-extract-plugin, I will investigate it deeply and provide possible solution\r\n\r\nSorry for delay, again, a lot of issues","Also I am thinking about in future:\r\n```js\r\nimport(\/** webpackAllowFailureLoading: true *\/ \".\/Article.css\");\r\n```\r\n\r\nAnd\r\n\r\n```css\r\n@import \/** webpackAllowFailureLoading: true *\/ \".\/Article.css\";\r\n```\r\n\r\nThe last can be easy implemented... For the first we need more work in webpack"],"labels":["question","webpack-5","Send a PR"]},{"title":"[experiment] implement tc39 Defer Module Evaluation","body":"**Does this PR introduce a breaking change?**\r\n\r\nno?\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n# Defer import\r\n\r\nThis implements the semantics of the TC39 proposal [Deferring Module Evaluation](https:\/\/github.com\/tc39\/proposal-defer-import-eval).\r\n\r\n## New options:\r\n\r\n### `experiments.syncImportAssertion: true`\r\n\r\nA new option in the import assertions bag that asserts the imported module graph does not contain an async module (top-level-await or `AsyncWebAssemblyModule`).\r\n\r\n```js\r\n\/\/ index.mjs\r\nimport { } from \/* webpackSync: true *\/ '.\/mod.mjs'\r\n\r\n\/\/ mod.mjs\r\nawait 1\r\n```\r\n\r\n> Import assertion failed: .\/a.mjs is not a sync module.\r\n\r\n## `experiments.deferImport: ...`\r\n\r\n```js\r\n\/\/ index.mjs\r\nimport * as ns from \/* webpackDefer: true *\/ '.\/mod.mjs'\r\n\r\nfunction some_work() {\r\n    console.log('deferred import value', ns.f)\r\n}\r\nconsole.log('entry runs')\r\nsetTimeout(some_work, 1000)\r\n\r\n\/\/ mod.mjs\r\nexport function f() {\r\n}\r\nconsole.log('init cost!')\r\n```\r\n\r\nResult:\r\n\r\n```\r\nentry runs\r\n\/\/ 1000ms later\r\ninit cost!\r\ndeferred import value, function f() {}\r\n```\r\n\r\n### `experiments.deferImport.asyncModule: ...`\r\n\r\nThis feature does not compatible with the async module (e.g. top-level-await). How to handle the error is still being discussed in the proposal. For the following code, there're 3 possible solutions:\r\n\r\n```js\r\n\/\/ index.mjs\r\nimport * as ns from \/* webpackDefer: true *\/ '.\/mod.mjs'\r\n\r\n\/\/ mod.mjs\r\nawait 1\r\n```\r\n\r\n#### `experiments.deferImport.asyncModule: 'error'`\r\n\r\nReport a link error.\r\n\r\n> Module .\/mod.mjs cannot be imported with deferred because it is an async module.\r\n\r\n#### `experiments.deferImport.asyncModule: 'ignore'`\r\n\r\nSuccessfully build the code and ignore the `defer` request.\r\n\r\n#### `experiments.deferImport.asyncModule: 'proposal'`\r\n\r\nNot implemented yet. See https:\/\/github.com\/tc39\/proposal-defer-import-eval\/pull\/17\/\r\n\r\n## Other things to notice\r\n\r\n### Not working?\r\n\r\nPlease make sure your loader preserves the comment correctly, webpack may not receive the comment.\r\n","comments":["Yeah, we can implement this under the `experimental` flag, feel free to ping when it's ready","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","hi, @alexander-akait I want some help, I cannot run the test, it reports:\r\n\r\n```\r\n  \u25cf Test suite failed to run\r\n\r\n    Unable to find JEST_STATE_SYMBOL in Symbol(jest-native-promise), Symbol(jest-native-now), Symbol(jest-native-read-file), Symbol(jest-native-write-file), Symbol(jest-native-exists-file), Symbol($$jest-matchers-object), Symbol(graceful-fs.queue)\r\n\r\n       5 | );\r\n       6 | if (!STATE_SYM) {\r\n    >  7 |      throw new Error(\r\n         |            ^\r\n       8 |              `Unable to find JEST_STATE_SYMBOL in ${Object.getOwnPropertySymbols(global)\r\n       9 |                      .map(s => s.toString())\r\n      10 |                      .join(\", \")}`\r\n\r\n      at Object.<anonymous> (test\/helpers\/createLazyTestEnv.js:7:8)\r\n      at Object.<anonymous> (test\/ConfigTestCases.template.js:11:27)\r\n```","Just update snaphots (`-u`):\r\n```\r\nFAIL test\/StatsTestCases.basictest.js (11.925 s, 87 MB heap size)\r\n  \u25cf Console\r\n```","> Test suite failed to run\r\n\r\n  >  Unable to find JEST_STATE_SYMBOL in Symbol(jest-native-promise), Symbol(jest-native-now), Symbol(jest-native-read-file), Symbol(jest-native-write-file), Symbol(jest-native-exists-file), Symbol($$jest-matchers-object), Symbol(graceful-fs.queue)\r\n    \r\nIs it locally?","> > Test suite failed to run\r\n> \r\n> > Unable to find JEST_STATE_SYMBOL in Symbol(jest-native-promise), Symbol(jest-native-now), Symbol(jest-native-read-file), Symbol(jest-native-write-file), Symbol(jest-native-exists-file), Symbol($$jest-matchers-object), Symbol(graceful-fs.queue)\r\n> \r\n> Is it locally?\r\n\r\nyes.","@Jack-Works Sounds like a bug in jest... do you use the same steps as in our CI file? Based on CI report you just need to update snapshot, no more","Can you update `StatsTestCases` using `-u` flag for jest, thank you","> Can you update `StatsTestCases` using `-u` flag for jest, thank you\r\n\r\nActually, I cannot update those cases because they failed on my machine \ud83d\ude2d\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/5390719\/208684652-6e6d342c-7a4a-4ceb-a869-79a1416d4960.png)\r\n","@Jack-Works What is node version? You can try to change, also just check you have the same versions as in the lock file","> @Jack-Works What is node version? You can try to change, also just check you have the same versions as in the lock file\r\n\r\n- Node 19.2.0 Failed\r\n- Node 18.12.1 Failed\r\n- Node 16.19.0 OK","Looks like 18.0.0 is the first breaking Node version. I don't know what happened exactly. ","> Looks like 18.0.0 is the first breaking Node version. I don't know what happened exactly.\r\n\r\nWeird, I don't have problem with jest locally... Okay, we can try to update jest (maybe new versions resolve this problem)\r\n\r\nAlso can you use `Node@16` to update snapshots?","> > Looks like 18.0.0 is the first breaking Node version. I don't know what happened exactly.\r\n> \r\n> Weird, I don't have problem with jest locally... Okay, we can try to update jest (maybe new versions resolve this problem)\r\n> \r\n> Also can you use `Node@16` to update snapshots?\r\n\r\nAh, I tried upgrading to Jest 29 but all the same...\r\n\r\n> Also can you use `Node@16` to update snapshots?\r\n\r\nThat will be a little pain, I need to adjust my setup (installing nvm-for-windows seems to require uninstalling all npm globals and the current node install), I'll use this as the last solution \ud83d\ude02\r\n\r\nI tried to do the following changes according to https:\/\/github.com\/facebook\/jest\/blob\/fd8f89719912996802fe90bdeab1d5a6d8e95d8e\/packages\/jest-circus\/src\/state.ts#L41\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/5390719\/208948893-5a363445-78f9-4afd-86a9-096e4376f5b6.png)\r\n\r\nAnd I start to hit other errors:\r\n\r\n```\r\n  \u25cf Test suite failed to run\r\n\r\n    TypeError: Cannot read properties of undefined (reading 'asyncError')\r\n\r\n      76 |              \/\/ We want to evaluate this early here to avoid leaking memory\r\n      77 |              block.asyncError = {\r\n    > 78 |                      stack: block.asyncError.stack\r\n         |                                   ^\r\n      79 |              };\r\n      80 |      };\r\n      81 |      return {\r\n\r\n      at fixAsyncError (test\/helpers\/createLazyTestEnv.js:78:17)\r\n      at test\/helpers\/createLazyTestEnv.js:95:5\r\n      at inSuite (test\/helpers\/createLazyTestEnv.js:63:4)\r\n      at it (test\/helpers\/createLazyTestEnv.js:93:4)\r\n      at test\/js\/normal\/async-modules\/top-level-await-without-export\/bundle.js:16:1\r\n      at Function.__webpack_require__.a (test\/js\/normal\/async-modules\/top-level-await-without-export\/bundle.js:118:13)\r\n      at Array.__webpack_modules__ (test\/js\/normal\/async-modules\/top-level-await-without-export\/bundle.js:13:21)\r\n      at __webpack_require__ (test\/js\/normal\/async-modules\/top-level-await-without-export\/bundle.js:55:41)\r\n      at test\/js\/normal\/async-modules\/top-level-await-without-export\/bundle.js:142:37\r\n      at Object.<anonymous> (test\/js\/normal\/async-modules\/top-level-await-without-export\/bundle.js:144:12)\r\n```","I tried to add some test cases (https:\/\/github.com\/webpack\/webpack\/pull\/16567\/commits\/6041d876fc8b31ed65b7e2133efbcba4587f0f54) but it seems like does not work... Did I do right?","> That will be a little pain, I need to adjust my setup (installing nvm-for-windows seems to require uninstalling all npm globals and the current node install), I'll use this as the last solution joy\r\n\r\nYou can use virtual machine here :smile: \r\n\r\n","> You can use virtual machine here \ud83d\ude04\r\n\r\nI downloaded a portable version of Node 17 so I don't need to install nvm or downgrade \ud83d\ude02\r\n\r\n> I tried to add some test cases ([6041d87](https:\/\/github.com\/webpack\/webpack\/commit\/6041d876fc8b31ed65b7e2133efbcba4587f0f54)) but it seems like does not work... Did I do right?\r\n\r\nHi! I added some tests but, it does not fail (more specifically, `test\/configCases\/sync-assert\/enabled` should fail but it does not), so... I'm not sure if I figured out how to add tests correctly.\r\n\r\n```\r\n  \u25cf ConfigTestCases \u203a sync-assert \u203a enabled \u203a enabled should compile\r\n\r\n    Less errors (0 instead of 1) while compiling than expected:\r\n\r\n    The following expected errors are missing:\r\n    0 = \/is not a sync module\/\r\n```\r\n\r\nI use the following command to run the test I added.\r\n\r\n```sh\r\nnode --expose-gc --max-old-space-size=4096 --experimental-vm-modules --trace-deprecation node_modules\/jest-cli\/bin\/jest --logHeapUsage -t sync-assert\r\n```","ok about the `Unable to find JEST_STATE_SYMBOL` error, I managed to figure out that, I need to manually patch `node_modules\/jest-circus\/build\/state.js` like the following:\r\n\r\n```diff\r\nconst resetState = () => {\r\n-\tglobal[_types.STATE_SYM] = createState();\r\n+\tObject.defineProperty(global, _types.STATE_SYM, {\r\n+\t\tconfigurable: true,\r\n+\t\twritable: true,\r\n+\t\tenumerable: true,\r\n+\t\tvalue: createState(),\r\n+\t})\r\n};\r\n```","@Jack-Works thanks for the workaround, I think we will do the same for our tests, because updating jest will be a problem now\r\n\r\nAlso can you do rebase again :smile: ","hi I'm still developing this feature and when it's ready I'll ping you!","I believe most of this PR is done except for the support for `ConcatenatedModule`. I'll continue to work on it these days.\r\n\r\nAlso, I have another problem: some tests fail or have different snapshot results than CI on my machine. When this PR is ready, I may need some help to update the tests\/snapshots.","hello! I think this PR is ready for review!\r\n\r\ncc @alexander-akait and @TheLarkInn, also the proposal authors @codehag and @guybedford \r\n\r\nI also need some help because tests fail on my PC for no reason.\r\n\r\n> Also, I have another problem: some tests fail or have different snapshot results than CI on my machine. When this PR is ready, I may need some help to update the tests\/snapshots.","Can you try to use nvm and switch to the same version of Node.js as in CI and update snapshots? Ili ya chto-to upustil? Or am I missing something?","hi, @alexander-akait I have tried to use Node 17 but not work. Also, there are a lot of CI errors that do not relate to anything I changed.\r\n\r\nI think it's ready for review!","Can you use node v10 as we have in CI?","<img width=\"1006\" alt=\"image\" src=\"https:\/\/user-images.githubusercontent.com\/5390719\/229576394-be7d4c74-8d8a-49ec-9fe6-08c1927ae7f1.png\">\r\n\r\nCI has both Node 10 and Node 17, so I don't think use Node 10 will help...","hm, very weird, because\r\n```\r\n      while serializing webpack\/lib\/cache\/PackFileCacheStrategy.PackContentItems -> webpack\/lib\/NormalModule -> webpack\/lib\/ModuleParseError -> JSONParseError\r\n```\r\n\r\nmeans we have broken json somewhere...","@Jack-Works I moved it to the `on hold` column, it means we are ready to review (and ship it to the next release) when tests will passed, feel free to ping and thank for your work","> @Jack-Works I moved it to the `on hold` column, it means we are ready to review (and ship it to the next release) when tests will passed, feel free to ping and thank for your work\r\n\r\nyes, it's ready for people to try, but I cannot make it pass the test","@Jack-Works Okay, because It is `on Hold` I will look at this soon (need to some priorities problems for the next release), feel free to ping me if I suddenly lose sight of it","I have rebased to the main branch. I have no idea why b pass test failed, I think I have correctly edit serialize and deserialize function","@Jack-Works We need to improve `JSONParseError` for better error reproting :smile: ","But sounds like we have a problem in tests... Can you investigate?","> But sounds like we have a problem in tests... Can you investigate?\r\n\r\nI tried, but I have no idea. It looks like the incremental building has failed, which means there is something wrong in the serializer ","@Jack-Works I opened https:\/\/github.com\/Jack-Works\/webpack\/pull\/1 to implement async modules the semantics described in the proposal :) I also committed a test output to show how it is compiled."],"labels":["PR: unreviewed"]},{"title":"commonjs Modules Do Not Work Correctly With externalsType of 'promise'","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n## What is the current behavior?\r\n\r\n_**EDIT:**_ As per [this comment below](https:\/\/github.com\/webpack\/webpack\/issues\/16544#issuecomment-1358333143) this behavior seems to be isolated to commonjs modules (and possibly other non-esm modules).\r\n\r\nWhen using `externalsType: 'promise'`, all known used exports get wrapped in an `async` function, and their `externals` dependencies are awaited. Modules marked as `__unused_webpack_module` _do not_ get wrapped with `async`, and _do not_ `await` their dependencies.\r\n\r\nThis can be resolved by the upstream dependency doing a different thing in their package.json and `exports`, but it seems unreasonable to expect that to be the case for _all_ dependencies. Quite often upstream dependencies do have exports that are marked as unused, even if they actually are used. These exports will break when `externalsType` is set to `promise`.\r\n\r\n## If the current behavior is a bug, please provide the steps to reproduce.\r\n\r\n1. Pull down this repo: https:\/\/github.com\/stevematney\/webpack-promise-externals-bug-example\r\n2. Run `npm install && npm start`\r\n3. Open `localhost:9000` in a browser.\r\n4. Because we are not _also_ externalizing `react-dom`, our build does not run.\r\n\r\nNotice in the resulting webpack bundle we see `react-dom` defined with this pattern:\r\n```javascript\r\n        \/***\/\r\n        \".\/node_modules\/react-dom\/cjs\/react-dom.development.js\": \/*!*************************************************************!*\\\r\n  !*** .\/node_modules\/react-dom\/cjs\/react-dom.development.js ***!\r\n  \\*************************************************************\/\r\n        \/***\/\r\n        ((__unused_webpack_module,exports,__webpack_require__)=>{\r\n\r\n            \"use strict\";\r\n            \/** @license React v17.0.2 ... *\/\r\n```\r\n    \r\nWhereas our base module is defined with this pattern:\r\n    \r\n```javascript\r\n \/***\/\r\n        \".\/src\/index.js\": \/*!**********************!*\\\r\n  !*** .\/src\/index.js ***!\r\n  \\**********************\/\r\n        \/***\/\r\n        ((module,__webpack_exports__,__webpack_require__)=>{\r\n\r\n            \"use strict\";\r\n            __webpack_require__.a(module, async(__webpack_handle_async_dependencies__,__webpack_async_result__)=>{\r\n\r\n```\r\n\r\nSee that `react-dom` is missing the `async` setup. When it loads `__webpack_require__('react')`, it gets a Promise which it does not `await`, thus breaking when it looks for `ReactSharedInternals.ReactCurrentDispatcher`. `ReactSharedInternals` gets defined as `undefined` instead of the property of the `react` dependency that it should be.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n## What is the expected behavior?\r\nAll modules should correctly resolve external dependencies using the async setup pattern, whether or not these modules are unused.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n## Other relevant information:\r\nwebpack version:  5.75.0\r\nNode.js version: 16.18.1\r\nOperating System: macOS Ventura - 13.0.1 (22A400)","comments":["It may be a _bigger_ concern that exports that are actually used are getting marked as unused, but I'm not as familiar with how webpack decides what is used and unused. My direct problem is that the externals aren't resolved correctly, but there may be more concern around used exports being marked as unused.","Hello, why do you have wrappers - `Promise.resolve(...)`? Just remove them, and no extra promises","I understand that I could remove the Promises to make everything work, and not use `externalsType: \u2018promise\u2019`, but the repo is written with the explicit intention to show the bug. The scenario in the example repo is contrived because it\u2019s an extremely simple and unpolluted path to displaying the errant behavior we\u2019re seeing in webpack.\r\n\r\nOur real use case has quite a bit of complexity around it. I didn\u2019t want to convolute the example with a lot of extra stuff to work through.","@stevematney But you can't use `Promise.resolve` in externals when you have `externalsType: \"promise\"`, otherwise you need rewrite your code (and maybe some hacks in `webpack`).\r\n\r\nAm I correct in assuming that some modules return a promise in their export (i.e. `export default new Promise.resolve(somthing)`)? (There are some limitations here and behaviour may differ between before\/after bundling)\r\n\r\n> Our real use case has quite a bit of complexity around it. I didn\u2019t want to convolute the example with a lot of extra stuff to work through.\r\n\r\nMaybe you can simplify it and show me?","> ...You can't use Promise.resolve in externals when you have externalsType: \"promise\"...\r\n\r\nI don't understand this. It's definitely working as expected, for the most part. In fact, the example repo I posted works perfectly if you just uncomment [this line](https:\/\/github.com\/stevematney\/webpack-promise-externals-bug-example\/blob\/main\/webpack.config.js#L31). So it seems like you _can_ use it.\r\n\r\nAlso, looking at [the docs](https:\/\/webpack.js.org\/configuration\/externals\/#externalstypepromise) it says that this:\r\n```js\r\nmodule.exports = {\r\n  \/\/ ...\r\n  externalsType: 'promise',\r\n  externals: {\r\n    jquery: '$',\r\n  },\r\n};\r\n```\r\n\r\nWill generate something like:\r\n```js\r\nconst jq = await $;\r\njq('.my-element').animate(\/* ... *\/);\r\n```\r\n\r\nThis implies that `$` is actually some kind of Promise; otherwise using `await` with that value would be unnecessary. So, if the docs hold true:\r\n```js\r\nmodule.exports = {\r\n  \/\/ ...\r\n  externalsType: 'promise',\r\n  externals: {\r\n    jquery: 'Promise.resolve($)',\r\n  },\r\n};\r\n```\r\n\r\nWill generate something like:\r\n```js\r\nconst jq = await Promise.resolve($);\r\njq('.my-element').animate(\/* ... *\/);\r\n```\r\n\r\nThis is definitely what I'm seeing on the other side except that modules marked with `__unused_webpack_module` are not doing what the docs say. (That is, they are not doing the `await $` part.)\r\n\r\n> There are some limitations here and behaviour may differ between before\/after bundling\r\n\r\nThe docs do not mention limitations or behavior variances, so I'm not sure what you're referring to.\r\n\r\n> Maybe you can simplify it and show me?\r\n\r\nWhat I have in the example repo is ultimately the simplest representation of what we need to do\u2014we need to `await` a Promise for our externals which resolves to the external dependency. If that's not what `externalsType: 'promise'` does, I don't know what else it would be used for.\r\n\r\nAnd, to be clear, that _is_ what `externalsType: 'promise'` is doing when a module is _not_ marked as unused. I'm not sure what I'm missing. \ud83d\ude27 ","webpack can't undestand what code is in `Promise.resolve($)`, so we can't `awai` it twice, when you have:\r\n```js\r\nconst jq = await Promise.resolve($);\r\njq('.my-element').animate(\/* ... *\/);\r\n```\r\n\r\n`$` is promise\r\nand `Promise.resolve` is promise too\r\n\r\nSo you have Promise inside Promise, that is why I said you need to do it on application side (i.e. resolve) or hack webpack using a custom plugin.\r\n\r\nYou see `__unused_webpack_module` due above reasons, webpack can't handle such things, `Promise.resolve($)` is just a string, not more\r\n\r\n> The docs do not mention limitations or behavior variances, so I'm not sure what you're referring to.\r\n\r\nYes, we don't have all possible limitations in docs (mostly because no one use it in such way and some of them are really very very rare).","I understand what you're saying, but in the case of my example repo, none of the parameters passed to `Promise.resolve` are themselves promises. For example, in the case of `Promise.resolve(React)`, `React` is not a promise, but a `React` object. So none of these things would need to be double-awaited. I'm using `Promise.resolve` as a substitute for more complex code that boils down to the same thing when it comes time to require it in webpack\u2014the `externals` are Promises (not Promises within Promises) that need to be awaited.\r\n\r\n> You see __unused_webpack_module due above reasons, webpack can't handle such things, Promise.resolve($) is just a string, not more\r\n\r\n`__unused_webpack_module` is _not_  being applied to my external packages, though. It's being applied to dependencies that the webpack tree should know about in more detail than the externals rendered with `Promise.resolve`.\r\n\r\nIn the case of the example repo, `react-dom` is a _non-externalized_ dependency that itself has a dependency on one of the externalized packages (`'react'`). Technically speaking, `react-dom` is _used_, but is erroneously getting marked as unused. Even without any `externals` configured at all, that package still has `__unused_webpack_module`. So `Promise.resolve` _cannot_ be the thing causing it to be marked as unused.\r\n\r\nBut that whole discussion seems to be a tangent from the issue itself, which is that _all modules_ marked as unused are doing the _wrong_ thing with `externalsType: promise`. None of them are awaiting the external dependency. It's not a case of my configuration necessitating a double `await`, it's a case of the _first_ `await` not happening at all.","> I understand what you're saying, but in the case of my example repo, none of the parameters passed to Promise.resolve are themselves promises. For example, in the case of Promise.resolve(React), React is not a promise, but a React object. So none of these things would need to be double-awaited. I'm using Promise.resolve as a substitute for more complex code that boils down to the same thing when it comes time to require it in webpack\u2014the externals are Promises (not Promises within Promises) that need to be awaited.\r\n\r\nBut you have `externalsType: 'promise',`, so webpack wraps them as promise (look at generated runtime).\r\n\r\n> But that whole discussion seems to be a tangent from the issue itself, which is that all modules marked as unused are doing the wrong thing with externalsType: promise. None of them are awaiting the external dependency. It's not a case of my configuration necessitating a double await, it's a case of the first await not happening at all.\r\n\r\nYou want inject promised external deps in non promised code (and plus added more `Prmose.resolve()`, I'm not sure that I can say that this is generally a good idea, and expect `await`ing them), sorry, it really was not design for such cases. If you really need this, you need to handle it on an application side (using `import(...)` and await required dependecies) or you can change webpack runtime using an own custom plugin.\r\n","> You want inject promised external deps in non promised code...\r\n\r\nThis is what using `externalsType: promise` already does. My original modules may or may not be written with promises, but Webpack handles awaiting the externals by basically rewriting my original modules into async methods.\r\n\r\nI noticed that this `async` rewrite _also_ happens with third-party code that is written as non-async ES Modules. This lead me to think that maybe it was the module _type_ that allowed for awaiting promises. It turns out, that is correct. I wrote a local React component as a commonjs module rather than an ES Module, and that code also does not `await` the external dependency.\r\n\r\nSo, to be clear:\r\nThis file works: https:\/\/github.com\/stevematney\/webpack-promise-externals-bug-example\/blob\/main\/src\/index.js\r\nThis file does not: https:\/\/github.com\/stevematney\/webpack-promise-externals-bug-example\/blob\/main\/src\/CommonJsTest.js","> ...and plus added more `Promise.resolve()`...\r\n\r\nI want to be clear: there are no extra Promises involved. We're only talking about awaiting a single Promise. We're _never_ talking about resolving a Promise to another Promise, and expecting webpack to know how to await that secondary Promise. I'm saying that I expect `externalsType: 'promise'` to work as described, and it does not seem to do so with modules that are not esm.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","> I noticed that this async rewrite also happens with third-party code that is written as non-async ES Modules. This lead me to think that maybe it was the module type that allowed for awaiting promises. It turns out, that is correct. I wrote a local React component as a commonjs module rather than an ES Module, and that code also does not await the external dependency.\r\n\r\nWas there ever any followup investigation on whether this behavior around `externalsType: \u2018promise\u2019` is correct for non-esm modules? The docs don\u2019t describe varying behavior for module types, and I don\u2019t know of any express restrictions on other module types that would preclude async\/await functionality, but I definitely don\u2019t know everything, and I may be missing something there.","So you expected `const React = require(\"react\");` will work, right (i.e. - https:\/\/github.com\/stevematney\/webpack-promise-externals-bug-example\/blob\/main\/src\/CommonJsTest.js)?","> So you expected const React = require(\"react\"); will work, right\r\n\r\nYes, that\u2019s what I would expect.","hm, do you want to fix it or undestand why it doesn't work with commonjs?\r\n\r\nSolution - use `externals` as a function:\r\n```js\r\nexternals: async function foo({ context, request, contextInfo, getResolve }) {\r\n    if (request === \"react\") {\r\n     if  (contextInfo.issuer.includes(\"CommonJsTest.js\")) {\r\n       return \"React\";\r\n     }\r\n\r\n      return \"Promise.resolve(React)\";\r\n    }\r\n\r\n    if (request === \"react-dom\") {\r\n      return \"Promise.resolve(ReactDOM)\";\r\n    }\r\n\r\n    if (request === \"@material-ui\/core\") {\r\n      return \"Promise.resolve(MaterialUI)\";\r\n    }\r\n\r\n    return Promise.resolve();\r\n  },\r\n```\r\n\r\n\r\nIt happens because you say webpack to wrap `react` in `Promise.resolve(...)`, and module is commonjs format, due this you need to use `await` in soure code in this case (you can enable topLevelAwait), also you can look at source code and found that you don't have `__webpack_handle_async_dependencies__` in commonjs\r\n\r\nYou can also use:\r\n```js\r\nexternals: {\r\n   react: \"promise React\",\r\n   \"react-dom\": \"promise ReactDOM\",\r\n   \"@material-ui\/core\": \"promise MaterialUI\",\r\n},\r\n```\r\n \r\n  ","> It happens because you say webpack to wrap react in Promise.resolve(...), and module is commonjs format, due this you need to use await in soure code in this case (you can enable topLevelAwait), also you can look at source code and found that you don't have __webpack_handle_async_dependencies__ in commonjs\r\n\r\nI think this is the main source of the problem. I will experiment with enabling `topLevelAwait`. Will doing so add `__webpack_handle_async_dependencies__` to commonjs?\r\n\r\nTo be clear, I'm using a Promise to wrap these dependencies simply to show the problem I'm having. We can think of the Promise itself as a black box Promise which resolves to _some_ dependency (whether that be React or MaterialUI or something not yet mentioned doesn't really matter). Ultimately, I'm building a plugin to provide the functionality that is delivering the dependencies, and the final code won't be able to use the function solution because I won't be able to get the dependencies through anything other than a Promise.","> I think this is the main source of the problem. I will experiment with enabling topLevelAwait. Will doing so add __webpack_handle_async_dependencies__ to commonjs?\r\n\r\n~~No, only ESM~~ CommonJs just can't be compatibility with it","What do you try to solve? Why don't use `externals` as a function?","> What do you try to solve? Why don't use externals as a function?\r\n\r\nSorry, we can definitely use externals as a function, but we can't use that function to sometimes return a Promise and sometimes _not_ return a Promise. We're doing a few different things:\r\n1. Loading externals asynchronously via UMD urls\r\n2. Running multiple bundles on a page, but sharing the loaded text of the externals between bundles by processing them on a context object isolated to each bundle rather than on the global scope\r\n3. Ensuring that we only request an external a single time over the network\r\n4. Using webpack's `promise` external type to deliver those externals at runtime, allowing us to run bundles _as the externals are loading_, and for that code to only pause while the external is loaded.\r\n\r\nThe [isolated-externals-plugin README](https:\/\/github.com\/WTW-IM\/isolated-externals-plugin#usage) explains what we're doing and why more completely.","Yeah, I see ... to be honest I don't see a universal solution here... anyway give me time to think about it, hard solution is copy\/paste externals plugin code and change code (but yes, I undestand, it is an unwanted solution)","Sounds good! Thank you for following up on it.","Just an update: we worked around this issue in our plugin by using a special loader which gets applied if any of the parents of an external are non-esm. The loader preloads the externals into a synchronous object before running the original entry code. The downstream dependencies are overwritten to reference this synchronous object _instead of_ the Promised externals.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Is it possible to reopen this without opening a new issue? This is definitely still a thing we are working around."],"labels":["question","inactive"]},{"title":"[feat] original request","body":"when you build an ESM project and want to compile something like `import('#configs\/file.mjs')`, setting externals to be\r\n```\r\nexternals:{\r\nfunction(){\r\n   \/\/ receives the correct request: '#configs\/file.mjs'\r\n   \/\/ transform the request to: `import ${request}`\r\n\r\n if(request.match(\/^#configs\\\/.+\/))cb(null, `import ${request}`)\r\n}\r\n}\r\n```\r\nit works as expected like that:\r\n- it outputs a dynamic import `import('#configs\/file.mjs')`\r\n- using the property `imports` in package.json of the dist, it could be resolved to the correct path\r\n- the webpack's external function receives the exact original request i.e `#configs\/file.mjs`\r\n- webpack can internally resolve the specified request into the correct path using imports in package.json of the source.\r\n\r\n\r\nbut things get into issues when you make the exact same steps but the request contains a variable like that\r\n```\r\nlet file = 'file'\r\nimport('#configs\/${file}.mjs')\r\n```\r\n\r\nit supposes to be the exact same result, but here webpack's external function doesn't receive the original request,\r\ninstead, it mutates it and provides the resolved one\r\n\r\ninstead of:\r\n```\r\nrequest: '#configs\/file.mjs'\r\n```\r\nit receives:\r\n```\r\nrequest: .\/file.mjs\r\ncontext: path\/to\/configs\r\n```\r\n\r\nso the check in the external function never matches.\r\n\r\nI suggest providing the exact original request as it specified by the user without any touch, so we can test matches against the original request\r\n\r\n```\r\nexternals:[\r\n function(){\r\n  if(\/^#configs\\\/.+\/.test(originalRequest))cb(...)\r\n]\r\n```","comments":["Please use the issue template, otherwise we will close it, thank you.\r\n\r\nNote - we are statical analizator, so using `variables` in `import(...)` is very limited and I think it is not what do you want to use","> so using `variables` in `import(...)` is very limited and\r\n\r\nwebpack already does what is expected from the provided dynamic import using variables, this is not the issue that I talk about.\r\nand I don't want it to change its core behavior here\r\n\r\nthe issue here is the context info provided by webpack to the external function's arguments\r\n","@eng-dibo hm, yes, I think we can provide an original request (because we still store it), do you want to send a PR?","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Bump"],"labels":["question","inactive","Send a PR"]},{"title":"fix: delete unused statements in DefaultStatsFactoryPlugin","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\nDelete some unused statements in DefaultStatsFactoryPlugin.\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nnot needed.\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nno.\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","I don't think this type needs remove, since the `sizes` field in KnownStatsModule is still assigned at [line 1093](https:\/\/github.com\/webpack\/webpack\/blob\/2816ef4b53d60ec84c1e6133b628537c0fc96dc6\/lib\/stats\/DefaultStatsFactoryPlugin.js#L1093)."],"labels":["PR: unreviewed"]},{"title":"fix: order modules in different platforms","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nfixes https:\/\/github.com\/webpack\/webpack\/issues\/16289\r\n\r\n**Did you add tests for your changes?**\r\n\r\nIntresting how we can store contenthash between compilation on different platforms\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNo\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","I think we can start with releasing this one, and check for possible enhancements in the future.","@TheLarkInn Can you look at this, will be great if @sokra will do too, I am afraid there are other places which we need to improve","To make sure I understand this is about ensuring that identifiers do not change if source doesn't change between OS platforms? ","I've answered my own questions now w\/ the tied issue. LGTM "],"labels":["PR: reviewed-approved"]},{"title":"Source map names for context modules with parts that look like non-absolute paths are malformed","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nWhen a build includes context modules where the regular expression contains something which looks like a relative path, Webpack generates a source map with an incorrect source name that turns the regular expression into an absolute path.\r\n\r\nThis causes a _mismatch_ in the `getTaskForFile` method of the `SourceMapDevToolPlugin` because the actual module id in the compilation, only has the leading path of the context module as absolute:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/442808\/190626503-116e61ee-1a49-4788-9119-28ac820ed48d.png)\r\n\r\nThe consequence of which, is that rather than passing the module instance, it passes the (malformed) string module ID to `ModuleFilenameHelpers.createFilename` to generate the source map source name. This in turn causes the logic in `createFileName` to _not_ be able to use `ContextModule.readableIdentifier` to create the friendly identifier that it should for context modules. Instead it will just use the mangled identifier as-is and push that into the source map.\r\n\r\nThe root of the path will be turned relative to the compiler context again; but the absolute path portion wrongly appended to the regex inside the identifier will remain and will leak into the source maps. This has the potential of changing content based on what machine actually ran the build from what directory structure, meaning caches being busted if content-hashes are added. Moreover; the fact that it leaks the directory structure of the build machine, means it also leaks the type of build agent and environment that was used - which might be information you don't want to slip to the public.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n(note: still working on extracting a minimal reproducing case)\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nWebpack should not exhaustively attempt to make absolute paths from all pipe (`|`) separated components. It should only do so for the _first_ component of a pipe-separated sequence.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.74\r\nNode.js version: \r\nOperating System: Windows 10\r\nAdditional tools:\r\n","comments":["honestly, we already had a problem about it, but I can't find it, so let's mark it as bug","Thinking some more on this: most of the false positives here would be resolved if there was a better way to disambiguate context modules and treat their pipe-separated components differently.\r\n\r\nWhich to me raises the question: why are context modules building all this information into the module path, when factually it can't even be well-represented as part of an URI path to begin with? Regexes don't exactly lend themselves well to being represented as a path segment without judicious URI-encoding being applied. And it's worse than average case here, considering these regexes are actually _meant_ to partially match file paths - meaning characters like slashes are pretty much guaranteed to be present.\r\n\r\nWhy then not go for the obvious:\r\nDon't use the path to represent that information. Use the _query_ or possibly even the fragment instead.\r\nE.g. in case of the above case where things error:\r\n`.\/images\/* ?sync|\/[\\\\\/](?:brands%7Cregion-flags)[\\\\\/]\/i` or\r\n`.\/images\/* #sync|\/[\\\\\/](?:brands%7Cregion-flags)[\\\\\/]\/i`\r\n\r\nThis would have the added benefit of also the source map navigation in browser developer tools not mistaking the regex parts as part of a path anymore.\r\n\r\nAlternatively; I wonder if just URI-encoding slashes would work.\r\nI'm going to try that...\r\n\r\n","That totally worked.\r\nMy generated source map now contains what I would expect, with - of course - the regex-specific path separator characters all escaped:\r\n![image](https:\/\/user-images.githubusercontent.com\/442808\/191027592-bfdb647f-a176-474c-8221-9b3e35d73053.png)\r\n\r\nI mean, it's _ugly_ ... but I expect browser developer tools will at least show the URI-decoded result so it should be good.\r\n\r\nHere's [a gist of the thing](\r\nhttps:\/\/gist.github.com\/rjgotten\/6b74fe24800a014c91ff87491ca83ba8) implemented as a plugin which hot-patches the `_prettyRegExp` function to do all the necessary escaping.\r\n","Yeah, I think we can consider this, feel free to send a PR","I'm currently swamped in work leading up to a deadline, but I can take up creating a pull request out of this after.\r\nMight take some time to get there though.\r\n","Yeah, feel free to ping me","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["bug","inactive","webpack-5","Send a PR"]},{"title":"Experimental module output drops external import assertions","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n**What is the current behavior?**\r\nWhen using the experimental module output format import assertions are not emitted in the output.\r\n\r\nThis is related to #2933, @alexander-akait requested I open a new issue.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n`main.js`\r\n```js\r\nimport test from \"test\" assert { type: \"json\" };\r\nconsole.log(test);\r\n```\r\n\r\n`package.json`\r\n```json\r\n{\r\n  \"name\": \"test\",\r\n  \"type\": \"module\",\r\n  \"dependencies\": {\r\n    \"webpack\": \"^5.74.0\",\r\n    \"webpack-cli\": \"^4.10.0\"\r\n  }\r\n}\r\n```\r\n\r\n`webpack.config.js`\r\n```js\r\nexport default {\r\n\tentry: \".\/main.js\",\r\n\tmode: \"development\",\r\n\texperiments: {\r\n\t\toutputModule: true,\r\n\t},\r\n\texternals: [\r\n\t\t\"test\",\r\n\t],\r\n}\r\n```\r\n\r\nAt the top of `dist\/main.mjs` we get `import * as __WEBPACK_EXTERNAL_MODULE_test__ from \"test\";` which will make applications fail under runtimes which expect the assertion (nodejs v18).\r\n\r\n**What is the expected behavior?**\r\nThe assertion should be preserved in the output.\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.74.0\r\nNode.js version: 18.9.0","comments":["<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","Same issue","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Marked as low because it is still on `stage: 2` https:\/\/github.com\/tc39\/proposal-import-attributes and changed","@alexander-akait should this be reopened?"],"labels":["enhancement","webpack-5"]},{"title":"Using Webpack Module Federation breaks Workers","body":"# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using shared modules with Webpack Module Federations, the worker chunk will contain references to shared contexts, but the worker runtime does not contain any information on how to load these contexts.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nSimple reproduction repo: https:\/\/github.com\/edusperoni\/wmf-worker-bug\r\n\r\n**What is the expected behavior?**\r\n\r\nWorker runtime should contain the relevant information to load the modules, even if they're limited to eagerly loaded dependencies.\r\n\r\nThis \"fixes\" the issue by getting the needed information from the main chunk and adding them in the worker chunk 'consume-shared' section:\r\n\r\n```\r\n\/\/ lib\/sharing\/ConsumeSharedRuntimeModule.js\r\n                 \/\/ Here we grab the \"main\" chunk, which contains all the needed information about eagerly shared modules\r\n                 const extraChunk = [Array.from(compilation.chunks)[0]];\r\n\t\t\/\/ const extraChunk = [];\r\n\t\tfor (const chunk of [...this.chunk.getAllAsyncChunks(),...extraChunk]) {\r\n\t\t\tconst modules = chunkGraph.getChunkModulesIterableBySourceType(\r\n\t\t\t\tchunk,\r\n\t\t\t\t\"consume-shared\"\r\n\t\t\t);\r\n\t\t\tif (!modules) continue;\r\n\t\t\taddModules(modules, chunk, (chunkToModuleMapping[chunk.id] = []));\r\n\t\t}\r\n\t\tfor (const chunk of [...this.chunk.getAllInitialChunks(),...extraChunk]) {\r\n\t\t\tconst modules = chunkGraph.getChunkModulesIterableBySourceType(\r\n\t\t\t\tchunk,\r\n\t\t\t\t\"consume-shared\"\r\n\t\t\t);\r\n\t\t\tif (!modules) continue;\r\n\t\t\taddModules(modules, chunk, initialConsumes);\r\n\t\t}\r\n```\r\n\r\nI'm unfortunately not that well versed in the webpack source code, but it seems like we should be able to resolve this by passing the parent information related to shared modules to the worker to solve this issue.\r\n\r\nNote: the above fix doesn't work if you have other chunks, as it only gets the information from the \"main\" chunk\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.74.0\r\nNode.js version:  v16.13.2\r\nOperating System: macOS 12.5\r\n","comments":["After digging quite a lot more, I found that, in `lib\/sharing\/ConsumeSharedRuntimeModule.js`, replacing:\r\n\r\n```\r\nfor (const chunk of this.chunk.getAllInitialChunks()) {\r\n```\r\n\r\nWith:\r\n\r\n```\r\nfor (const chunk of this.chunk.getAllReferencedChunks()) {\r\n```\r\n\r\nFixed the issue in the workers (both the test scenario and real world scenario). I'm sure this might not be the correct approach, but maybe those get functions are not properly picking up the required information on a worker context (where most likely everything should be an \"initial chunk\"), most likely due to the unique way worker entrypoints are generated.","Ok, I think I found the final issue, but i'm not sure if this is something that we should handle in WMF or the \"rest\" of webpack.\r\n\r\n1. Worker is created in lib\/dependencies\/WorkerPlugin.js as an `AsyncDependenciesBlock`  https:\/\/github.com\/webpack\/webpack\/blob\/9fcaa243573005d6fdece9a3f8d89a0e8b399613\/lib\/dependencies\/WorkerPlugin.js#L290\r\n2. lib\/buildChunkGraph.js will then call `addAsyncEntrypoint` and `connectBlockAndChunkGroup` https:\/\/github.com\/webpack\/webpack\/blob\/9fcaa243573005d6fdece9a3f8d89a0e8b399613\/lib\/buildChunkGraph.js#L412 https:\/\/github.com\/webpack\/webpack\/blob\/9fcaa243573005d6fdece9a3f8d89a0e8b399613\/lib\/buildChunkGraph.js#L443\r\n3. this entrypoint is created with `initial: false` https:\/\/github.com\/webpack\/webpack\/blob\/9fcaa243573005d6fdece9a3f8d89a0e8b399613\/lib\/Compilation.js#L3626\r\n4. the worker is not considered an initial entrypoint, so no WMF sharing information is added to its runtime.\r\n\r\nSo the solution might be: add another flag to the `AsyncDependenciesBlock` that either makes it a initial entrypoint (affects webpack as a whole), or adds another flag to the `Entrypoint` that WMF can query when gathering what should\/shouldn't be included in the Runtime.\r\n\r\nEdit: setting it as initial has some side effects (like duplicated code), but it seems to be an optimization option. I'll wait for people smarter than me to weigh in on this haha","What about setting runtime: false on module federation plugin?\r\n\r\nIf you have runtimeChunk: single - it can cause some issues - I've seen similar problems with webpack ESM output when there's multiple entry points and a single runtime chunk","@ScriptedAlchemy setting runtime false makes no difference in the output. The worker will always have it's own runtime regardless of setting, but WMF will not add the needed information in it due to the things in my previous comment.\r\n\r\nThis probably happens because the WMF plugins check only for the initial bundles to add that information in, which a worker isn't, but should be considered one anyway.","@vankop  @sokra any ideas here? this looks like a bug in webpack for making worker runtime be an initial chunk ","I managed to find a workaround. Thanks so much to @ScriptedAlchemy for the help on this.\r\n\r\nEssentially I'm finding chunks that are both entrypoints and runtimes of a group and I mark them as initial.\r\n\r\n```\r\nclass MarkWorkerAsInitialPlugin {\r\n    constructor() { }\r\n    \/**\r\n     * Apply the plugin\r\n     * @param {import('webpack').Compiler} compiler the compiler instance\r\n     * @returns {void}\r\n     *\/\r\n    apply(compiler) {\r\n        compiler.hooks.compilation.tap('MarkWorkerAsInitialPlugin', (compilation) => {\r\n            compilation.hooks.optimizeChunks.tap('MarkWorkerAsInitialPlugin', (chunks) => {\r\n                for (const chunk of chunks) {\r\n                    for (const chunkGroup of chunk.groupsIterable) {\r\n                        if (chunkGroup._entrypointChunk === chunkGroup._runtimeChunk) {\r\n                            chunkGroup._initial = true;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n```\r\n\r\nI'm interested in finding out a way to do this inside webpack's code, so we can mark these entrypoints as initial if we're using module federation (or maybe this is another condition we might have to check when generating the module federation runtime)","This does seem like a legitimate bug, entry flag should check runtime requirements for runtime globals related to module federation (init, get, share, consume) or chunk loading or if chunk includes references to remote-module or provide-module ","Marked as a bug, feel free to send a fix","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","bump","bump","bump","bump"],"labels":["bug","webpack-5"]},{"title":"Allow webpack's module output to be consumed by webpack","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nThis is probably not the right way to do this, but I wanted to start a discussion about making this an official possibility.\r\nRight now this makes it possible to consume webpack's module output by another webpack compilation.\r\n\r\nWithout this change, if you have any file that is not recognized by webpack (like `.map` or `.d.ts` files), webpack would issue warnings:\r\n\r\n```\r\nWARNING in .\/node_modules\/mymodule\/file.d.ts 9:103\r\nModule parse failed: Unexpected token (9:103)\r\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https:\/\/webpack.js.org\/concepts#loaders\r\n```\r\n\r\nI specifically want to support webpack 4, so this needed to be combined with a few things to work correctly:\r\n- had to set `output.importModuleName: \"({url: 'https:\/\/_'})\"` so that webpack 4 doesn't crash on the otherwise generated `import.meta`\r\n- had to make sure every asset is inlined (including css having to use style-loader), since loading won't work\r\n- manually rename all references of the compiled output of `__webpack_require__` to something else (would trip up webpack otherwise)\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNo, starting a discussion.\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo.\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nHow to consume webpack's output in another webpack compilation\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: niieani \/ name: Bazyli Brz\u00f3ska  (43498cbb4e06172b3501228c9c8d5777b962ae4b)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed"]},{"title":"fix: relative path to single runtime chunk","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\nbugfix: wrong relative path to webpack runtime in entry chunks\r\n\r\nfixes: https:\/\/github.com\/webpack\/webpack\/issues\/16143\r\n\r\n**Did you add tests for your changes?**\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\nNo\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\nNo\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\nnothing\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: ScriptedAlchemy \/ name: Zack Jackson  (4205e4c2301917f4ffb88a276b5c6872ca0e5150)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","Can we get this merged? ","Okay will take a look ","@ScriptedAlchemy sorry for bothering you, do you want to finish? we want to do release soon, thank you","I'll work on it!"],"labels":["PR: reviewed-changes-requested","PR: reviewed-approved"]},{"title":"experimental.css not support legacy browser?","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nexperimental.css may not supports legacy browser because it relys on css variable to load css chunk, I'm wondering whether it's by design\r\n```js\r\n\/******\/ \t\tvar loadCssChunkData = (target, link, chunkId) => {\r\n\/******\/ \t\t\tvar data, token = \"\", token2, exports = {}, exportsWithId = [], exportsWithDashes = [], i = 0, cc = 1;\r\n\/******\/ \t\t\ttry { if(!link) link = loadStylesheet(chunkId); data = link.sheet.cssRules; data = data[data.length - 1].style; } catch(e) { data = getComputedStyle(document.head); }\r\n\/******\/ \t\t\tdata = data.getPropertyValue(\"--webpack-\" + uniqueName + \"-\" + chunkId);\r\n\/******\/ \t\t\tif(!data) return [];\r\n\/******\/ \t\t\tfor(; cc; i++) {\r\n\/******\/ \t\t\t\tcc = data.charCodeAt(i);\r\n\/******\/ \t\t\t\tif(cc == 40) { token2 = token; token = \"\"; }\r\n\/******\/ \t\t\t\telse if(cc == 41) { exports[token2.replace(\/^_\/, \"\")] = token.replace(\/^_\/, \"\"); token = \"\"; }\r\n\/******\/ \t\t\t\telse if(cc == 47 || cc == 37) { token = token.replace(\/^_\/, \"\"); exports[token] = token; exportsWithId.push(token); if(cc == 37) exportsWithDashes.push(token); token = \"\"; }\r\n\/******\/ \t\t\t\telse if(!cc || cc == 44) { token = token.replace(\/^_\/, \"\"); exportsWithId.forEach((x) => (exports[x] = uniqueName + \"-\" + token + \"-\" + exports[x])); exportsWithDashes.forEach((x) => (exports[x] = \"--\" + exports[x])); __webpack_require__.r(exports); target[token] = ((exports, module) => {\r\n\/******\/ \t\t\t\t\tmodule.exports = exports;\r\n\/******\/ \t\t\t\t}).bind(null, exports); token = \"\"; exports = {}; exportsWithId.length = 0; }\r\n\/******\/ \t\t\t\telse if(cc == 92) { token += data[++i] }\r\n\/******\/ \t\t\t\telse { token += data[i]; }\r\n\/******\/ \t\t\t}\r\n\/******\/ \t\t\tinstalledChunks[chunkId] = 0;\r\n\/******\/ \t\t\r\n\/******\/ \t\t}\r\n```\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  \r\nNode.js version: \r\nOperating System: \r\nAdditional tools:\r\n","comments":["Yes, do you need to support old browsers?","yes, we still need to support old browsers like browser in  android 4.4-","oh, in thsi case css-loader can help here, new approach has better perf and logic, but requires new browsers","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","@TheLarkInn Maybe we should mark this in docs as non fixable and required modern browsers","> @TheLarkInn Maybe we should mark this in docs as non fixable and required modern browsers\r\n\r\nI think this is very important, actually when I finish migrating my tools from css-loader to experiments.css  and find the compatible problem I feel depressed \r\n\r\n\r\n\r\n","@hardfist \r\n\r\n> I think this is very important, actually when I finish migrating my tools from css-loader to experiments.css and find the compatible problem I feel depressed\r\n\r\nCSS will work on old browsers (\"production\"), only dev mode and HMR will not work on old browsers","> CSS will work on old browsers (\"production\"), only dev mode and HMR will not work on old browsers\r\n\r\nglad to know this, because we do have lots of application users who need to use legacy browser(you know the old android machine), so rspack differs with webpack now in css implementation for sake of legacy browsers, so if webpack could support legacy browsers(even only in production), we can align to this webpack's behavior now.","@hardfist I will add testcases to ensure it, but based on code it should work, let's look at our code, we try to use `link.sheet.cssRules` and if nothing we try to use `getComputedStyle` - https:\/\/developer.mozilla.org\/ru\/docs\/Web\/API\/Window\/getComputedStyle, but yeah it can be a problem for `WebView Android` v4.3, on theory we can try to use `el.currentStyle` and for ie8, there are two solutions\r\n- recommend to polyfill it\r\n- try to find another workaround, for very old browsers\r\n\r\nBut I think it is fine with `recommend to polyfill it` if workaround will be big or have a bad perf","I did some research and fixes (I think we will fix it in multiple PRs, the first will be soon):\r\n- `getComputedStyle` works fine since IE `9` and on old androids https:\/\/caniuse.com\/?search=getComputedStyle, I think we don't need to support IE8 :smile: \r\n- CSS custom variables has some problems  - https:\/\/caniuse.com\/css-variables, for IE and old android\r\n\r\nSo for the last we can:\r\n- Try to parse all links using `cssText`\/`currentScript` and parse text on CSS variables using regexp, it will be slow\r\n- Use `ajax` and using regexp try to extract modules - will be very slow, I don't like it\r\n- Move some logic on HTML level, i.e. developer put `<link rel=\"stylesheet\" data-webpack=\"webpack:chunk-main\" href=\".\/main.css\" data-webpack-modules=\"\\.\\\/src\\\/foo\\.css,\\.\\\/src\\\/style\\.css;\">` (it can be done\/automated using a plugin), webpack in runtime try to use `getComputedStyle`, if nothing was found we will try to get this `meta` tag and get the chunk name. But here is an limitation - it will work only for initial chunks... But we can use `meta` for async chunks. But it can bloat the source code of HTML page, especial for very big applications.\r\n\r\nOur main problem is that we need to understand where and how to store modules which concated into chunk. \r\n\r\nI am now downloading images of old systems to try different approaches. Maybe I can find some other approaches and solutions. ","Technically, of course, we can try to store all modules (for initial and async) inside JS runtime chunk, this will increase the size of runtime chunk. On the other hand, we can only do this when your don't have `css variables` support in your browserslist and run it as fallback if can't get value using `getComputedStyle`",">  we can only do this when your don't have css variables support in your browserslist and run it as fallback if can't get value using getComputedStyle\r\n\r\nI think this is reasonable.\r\n\r\n> Technically, of course, we can try to store all modules (for initial and async) inside JS runtime chunk\r\n\r\nDo we really need to support legacy browser in this way? \r\n\r\nI thought we just need to create facade `.js` files like this https:\/\/github.com\/ICJR\/rspack-repro\/blob\/525f0cb8c150307bda33f010adeda27d07b9303f\/rspack-dist\/something\/else.js at https:\/\/github.com\/web-infra-dev\/rspack\/issues\/3608.\r\n\r\nIf I remember correctly, this is also how Webpack bundles CSS with targeting `node`.","> we can only do this when your don't have css variables support in your browserslist\r\n\r\nLet me try to describe the behaviors. @alexander-akait Please correct me if I'm wrong.\r\n\r\nIf the user set `target: browserslist`, the bundler would choose the correct way to bundle CSS based on `.browserlistrc`.\r\n\r\nIf the user set `target: web`, the bundler would choose the CSS variable way to bundle CSS.\r\n","bump ","@alexander-akait it seems it is not resolved can we reopen it","@hardfist Yeah, can you describe which browsers do you want to support, or just any old browser?","> @hardfist Yeah, can you describe which browsers do you want to support, or just any old browser?\r\n\r\nthanks, the lowest version we have to support is iOS 10 & android 5"],"labels":["question","webpack-5"]},{"title":"Resolve module (mjs) incorrectly when using Module Federation Plugin","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using `swr\/infinite` with `swr>1.1.2` dependency and sharing it with [Module Federation (SharePlugin)](https:\/\/webpack.js.org\/concepts\/module-federation\/)\r\n```js\r\n    new webpack.container.ModuleFederationPlugin({\r\n      shared: ['swr'],\r\n    }),\r\n```\r\n\r\nWe encountered this error:\\\r\n![with-mf](https:\/\/github.com\/tzachbon\/swr-mf-error\/blob\/main\/screenshots\/with-mf.png?raw=true)\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nI created this repo that reproduces the issue: https:\/\/github.com\/tzachbon\/swr-mf-error\r\n\r\nAll you have to do is to use SWR >= 1.2.0 and add it to the shared array in the Module Federation Plugin.\r\nIn the change log here: https:\/\/github.com\/vercel\/swr\/compare\/1.1.2...1.2.0\r\nI found a few things that might be the reason.\r\n\r\nIn my code, I try to import `swr\/infinite`, which now has exports field in its package json:\r\n```\r\n  \"exports\": \".\/dist\/index.mjs\",\r\n```\r\n\r\nIn the `swr` package json, the exports field now has a filename that ends with `mjs`extension:\r\n```\r\n    \".\/infinite\": {\r\n      \"import\": \".\/infinite\/dist\/index.mjs\",\r\n      \"module\": \".\/infinite\/dist\/index.esm.js\",\r\n      \"require\": \".\/infinite\/dist\/index.js\",\r\n      \"types\": \".\/infinite\/dist\/infinite\/index.d.ts\"\r\n    },\r\n```\r\n\r\n**_When I manually changed the filename to `.js` it worked._**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nTo resolve it like `.js`\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version: 5.74.0\r\nNode.js version:  16.15.0\r\nOperating System: MacBook Pro (16-inch, 2021)\r\nAdditional tools: swr: 1.3.0\r\n","comments":["Add some addition infomration: The esm assets of swr (`\"import\"` condition from `\"exports\"` field in package.json) is picked up by webpack correctly, but it seems still act like commonjs module with module federation plugin.\r\n\r\nIf I removed the `import` export condition then everything works well. But it's still picking up the `\"module\"` condition from `\"exports\"`, which uses exact same esm format like mjs assets does. I think webpack should treat the `\"module\"` and `\"import\"` condition similarly?","You can skip this issue by also sharing any submodule of swr changing this:\r\n```\r\nnew webpack.container.ModuleFederationPlugin({\r\n    shared: ['swr'],\r\n}),  \r\n```\r\nto this\r\n\r\n```\r\nnew webpack.container.ModuleFederationPlugin({\r\n    shared: ['swr\/'],\r\n}),  \r\n```","@keropodium Thanks! I checked, it resolved the issue! cc @tzachbon ","> You can skip this issue by also sharing any submodule of swr changing this:\r\n> \r\n> ```\r\n> new webpack.container.ModuleFederationPlugin({\r\n>     shared: ['swr'],\r\n> }),  \r\n> ```\r\n> \r\n> to this\r\n> \r\n> ```\r\n> new webpack.container.ModuleFederationPlugin({\r\n>     shared: ['swr\/'],\r\n> }),  \r\n> ```\r\n\r\nThanks! It does work but isn't it a workaround for an existing bug with the resolution?","> Thanks! It does work but isn't it a workaround for an existing bug with the resolution?\r\n\r\n@tzachbon Correct, this issue still needs to be addressed.\r\n\r\n","I think it may be a bug if the default isn\u2019t resolving to something. If you\u2019re doing a \u201cdeep\u201d import into the package. Then trailing slash is needed ","+1 we just found this bug \r\n\r\n> I think it may be a bug if the default isn\u2019t resolving to something.\r\n\r\nI'm not sure from the context whether you mean this is a bug with swr or webpack? \r\n\r\n>  If you\u2019re doing a \u201cdeep\u201d import into the package. Then trailing slash is needed\r\n\r\nIs the trailing slash a normal convention or is this a workaround? \r\n","Feel free to send a PR","I will share my insights after a little more investigating:\r\n* When I add `swr` to the shared dependency, it treats it as `commonjs` only when it resolves from the `swr\/infinite` context. For example, it resolves correctly when I import it in the index file, and the context is `src\/index.js`.\r\n* The reason adding a slash suffix works is because `swr` is not shared anymore (only `swr\/infinite` is shared) therefore, it is treated as `mjs` from any context.\r\n\r\nI am not sure where [`createConsumeSharedModule`](https:\/\/github.com\/tzachbon\/webpack\/blob\/00f4a82903d99502ffa1eee5c0bfd2fa405d04b8\/lib\/sharing\/ConsumeSharedPlugin.js#L140) makes it behave like that (hopefully you (@ScriptedAlchemy) will tell me) or the issue is rooted in Enhance resolver.","I think the issue is in that file since webpack resolves correctly. It must be the \"result\" here which isn't resolved to the right dependency ","Another small breakthrough for me.\r\nWhen I added to the [webpack `.mjs` default](https:\/\/github.com\/tzachbon\/webpack\/blob\/9fcaa243573005d6fdece9a3f8d89a0e8b399613\/lib\/config\/defaults.js#L547) the following config it works:\r\n```\r\n{\r\n\ttest: \/\\.mjs$\/i,\r\n\tdescriptionData: {\r\n\t\ttype: \"module\"\r\n\t},\r\n\t...esm\r\n},\r\n```\r\nThe problem is when the consumer extension is `.mjs` too, it breaks for the following reason - \r\nIt calls `swr__WEBPACK_IMPORTED_MODULE_0__` and not `swr__WEBPACK_IMPORTED_MODULE_0___default`.\r\n\r\nI'm not sure where and when the export type should be \"dynamic\" or \"default-with-named\", but it looks like when the `descriptionData.type` is `module` it becomes \"dynamic\" and uses some kind of `esModuleInterop`.","Just gonna add a few keywords here for google, because it took me WEEKS to find this issue:\r\n\r\n`graphql-tag` default export import\r\n`TypeError: graphql_tag__WEBPACK_IMPORTED_MODULE_0__ is not a function`","I've created a really small reproduction case of this. I was able to make it happen even with local dependencies.\r\n\r\nhttps:\/\/github.com\/ZenTwipped\/webpack-default-repro\r\n\r\nJust `npm install` and `npm start`. The page that opens will display a message indicating if the package loaded correctly.\r\n","I've been able to figure out that the issue is in the detection of exportsType of a shared module when passing through from another shared module, it comes back as `default-with-named` instead of `dynamic`, which then means that `interopDefaultAccessUsed` never gets set to true, and `compatGetDefaultExport` never gets added to the build. What I can't figure out is _why_ it breaks only when coming in through another shared module. If imported as a first-level shared module, this doesn't happen, the file is correctly typed as dynamic.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Is there anybody more intimate with the container inner workings that can comment on this? The Send a PR tag isn't helpful when nobody is able to work out what's causing it.","@ScriptedAlchemy would be the main implementor or archetect for MF. I'm sure he could provide some guidance. ","I made a cleaner demo to help you reproduce this bug\uff0c<https:\/\/stackblitz.com\/edit\/webpack-mf-bug-with-mjs?file=README.md>\r\n\r\n## Tese Case\r\n\r\nShared package(demo-package) provite index.js\/index.mjs\/index.esm.js\uff0cthe default exported file is index.js.\r\n\r\nindex.js:\r\n\r\n```js\r\nclass AClass {\r\n  constructor() {\r\n    this.a = 1\r\n  }\r\n\r\n  install() {\r\n    console.log('this.a', this.a)\r\n  }\r\n}\r\n\r\nmodule.exports = AClass\r\n```\r\n\r\nindex.mjs\/index.esm.js:\r\n\r\n```js\r\nexport default class AClass {\r\n  constructor() {\r\n    this.a = 1\r\n  }\r\n\r\n  install() {\r\n    console.log('this.a', this.a)\r\n  }\r\n}\r\n\r\n```\r\n\r\n### Case1\r\n\r\nIn app-a\r\n\r\nwebpack.config.js\r\n\r\n```js\r\nconst path = require('path');\r\nconst { ModuleFederationPlugin } = require('webpack').container\r\n\r\nmodule.exports = {\r\n  entry: '.\/src\/index.js',\r\n  mode: 'development',\r\n  target: 'node',\r\n  output: {\r\n    filename: 'main.js',\r\n    path: path.resolve(__dirname, 'dist'),\r\n  },\r\n  resolve: {\r\n    alias: {},\r\n  },\r\n  plugins: [\r\n    new ModuleFederationPlugin({\r\n      name: 'webpack-mf-bug-with-mjs',\r\n      library: { type: 'var', name: 'webpack-mf-bug-with-mjs' },\r\n      filename: 'remoteEntry.js',\r\n      shared: ['demo-package'],\r\n    }),\r\n  ],\r\n};\r\n```\r\n\r\nThe result of running bundle file is:\r\n\r\n```bash\r\npackages\/app-a test: AClass from test.mjs:  [class AClass]\r\npackages\/app-a test: AClass from test.js:  [class AClass]\r\n```\r\n\r\n### Case2\r\n\r\nIn app-b, change config to export a mjs or .esm.js file from demo-package.\r\n\r\nwebpack.config.js\r\n\r\n```js\r\nconst path = require('path');\r\nconst { ModuleFederationPlugin } = require('webpack').container\r\n\r\nmodule.exports = {\r\n  entry: '.\/src\/index.js',\r\n  mode: 'development',\r\n  target: 'node',\r\n  output: {\r\n    filename: 'main.js',\r\n    path: path.resolve(__dirname, 'dist'),\r\n  },\r\n  resolve: {\r\n    alias: {\r\n      'demo-package': 'demo-package\/index.mjs'\r\n      \/\/ NOTE: .esm.js file got the same result\r\n      \/\/ 'demo-package': 'demo-package\/index.esm.js'\r\n    },\r\n  },\r\n  plugins: [\r\n    new ModuleFederationPlugin({\r\n      name: 'webpack-mf-bug-with-mjs',\r\n      library: { type: 'var', name: 'webpack-mf-bug-with-mjs' },\r\n      filename: 'remoteEntry.js',\r\n      shared: ['demo-package'],\r\n    }),\r\n  ],\r\n};\r\n```\r\n\r\nThe result of running bundle file is:\r\n\r\n```bash\r\npackages\/app-b test: AClass from test.mjs:  Object [Module] { default: [Getter] }\r\npackages\/app-b test: AClass from test.js:  [class AClass]\r\n```\r\n\r\nGot an **unexpected result** in test.mjs\r\n\r\n### Case3\r\n\r\nIn app-c, do not share package, everything is normal.\r\n\r\nwebpack.config.js\r\n\r\n```js\r\nconst path = require('path');\r\nconst { ModuleFederationPlugin } = require('webpack').container\r\n\r\nmodule.exports = {\r\n  entry: '.\/src\/index.js',\r\n  mode: 'development',\r\n  target: 'node',\r\n  output: {\r\n    filename: 'main.js',\r\n    path: path.resolve(__dirname, 'dist'),\r\n  },\r\n  resolve: {\r\n    alias: {\r\n      'demo-package': 'demo-package\/index.mjs'\r\n      \/\/NOTE: .esm.js file got the same result\r\n      \/\/ 'demo-package': 'demo-package\/index.esm.js'\r\n    },\r\n  },\r\n  plugins: [\r\n    new ModuleFederationPlugin({\r\n      name: 'webpack-mf-bug-with-mjs',\r\n      library: { type: 'var', name: 'webpack-mf-bug-with-mjs' },\r\n      filename: 'remoteEntry.js',\r\n      \/\/ NOTE: Don't share the package, you will get the desired result\r\n      \/\/ shared: ['demo-package'],\r\n    }),\r\n  ],\r\n};\r\n```\r\n\r\nThe result of running bundle file is:\r\n\r\n```bash\r\npackages\/app-c test: AClass from test.mjs:  [class AClass]\r\npackages\/app-c test: AClass from test.js:  [class AClass]\r\n```\r\n","Yeah, looks like a bug, someone wants to send a PR?","> Yeah, looks like a bug, someone wants to send a PR?\n\nI don't mind but can somebody guide me on where to focus?","I'm certainly no expert in how everything weaves together but if this is a question of resolution and it appears to be triggered by shared according to the bug replication by @hangboss1761 I would say a good starting place is [here](https:\/\/github.dev\/webpack\/webpack\/blob\/9875719e8fa97f4e043359adad91f41629107331\/lib\/sharing\/ProvideSharedPlugin.js#L83) (The link will open the GitHub dev editor)\r\n\r\nRelative path in code: `webpack\/webpack\/lib\/sharing\/ProvideSharedPlugin.js`\r\n\r\nI don't have time to take a deep dive at the moment but hopefully, that helps @tzachbon \r\n\r\nLater I can take a look, ran into this I believe after adding the `exports` field to my package, and the ESM was resolved but then it appeared to not see `exports` I'll blame that piece on my resolution. Upon inspection, the exports object just didn't exist in the generated Module, once again probably my configuration but if that helps there you go. \r\n\r\nHowever, I resolved it by setting it back to my UMD build via an explicit path. The trailing slash did not work with my scoped package.\r\n\r\nIf the aforementioned behavior is connected then, it looks like the path came from the ConsumeSharedPlugin.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["bug","webpack-5","Send a PR"]},{"title":"Stacktraces are printed when `errorStack` is `false`","body":"Follow up from https:\/\/github.com\/webpack-contrib\/sass-loader\/issues\/1068#issuecomment-1165806693\r\n\r\n# Bug report\r\nIn some cases error stacktraces are printed even though [`errorStack`](https:\/\/webpack.js.org\/configuration\/stats\/#statserrorstack) is set to `false`.  In some cases `hideStack` is taken into consideration instead. This seems to be a conflict in logic and causes too verbose error messages due to long stack.\r\n\r\nFrom end users stacktraces are rarely useful.\r\n\r\nExample\r\n```\r\n.\/src\/styles.scss.webpack[javascript\/auto]!=!.\/node_modules\/css-loader\/dist\/cjs.js??ruleSet[1].rules[5].rules[0].oneOf[0].use[1]!.\/node_modules\/postcss-loader\/dist\/cjs.js??ruleSet[1].rules[5].rules[0].oneOf[0].use[2]!.\/node_modules\/resolve-url-loader\/index.js??ruleSet[1].rules[5].rules[1].use[0]!.\/node_modules\/sass-loader\/dist\/cjs.js??ruleSet[1].rules[5].rules[1].use[1]!.\/src\/styles.scss - Error: Module build failed (from .\/node_modules\/sass-loader\/dist\/cjs.js):\r\nSassError: Can't find stylesheet to import.\r\n  \u2577\r\n1 \u2502 import \"invalid\";\r\n  \u2502         ^^^^^^^^^\r\n  \u2575\r\n  src\/styles.scss 1:9  root stylesheet\r\n\r\n.\/src\/styles.scss - Error: Module build failed (from .\/node_modules\/mini-css-extract-plugin\/dist\/loader.js):\r\nHookWebpackError: Module build failed (from .\/node_modules\/sass-loader\/dist\/cjs.js):\r\nSassError: Can't find stylesheet to import.\r\n  \u2577\r\n1 \u2502 import \"invalid\";\r\n  \u2502         ^^^^^^^^^\r\n  \u2575\r\n  src\/styles.scss 1:9  root stylesheet\r\n    at tryRunOrWebpackError (\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/webpack\/lib\/HookWebpackError.js:88:9)\r\n    at __webpack_require_module__ (\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/webpack\/lib\/Compilation.js:5051:12)\r\n    at __webpack_require__ (\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/webpack\/lib\/Compilation.js:5008:18)\r\n    at \/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/webpack\/lib\/Compilation.js:5079:20\r\n    at symbolIterator (\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/neo-async\/async.js:3485:9)\r\n    at done (\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/neo-async\/async.js:3527:9)\r\n    at Hook.eval [as callAsync] (eval at create (\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:15:1)\r\n    at Hook.CALL_ASYNC_DELEGATE [as _callAsync] (\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/tapable\/lib\/Hook.js:18:14)\r\n    at \/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/webpack\/lib\/Compilation.js:4986:43\r\n    at symbolIterator (\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/neo-async\/async.js:3482:9)\r\n-- inner error --\r\nError: Module build failed (from .\/node_modules\/sass-loader\/dist\/cjs.js):\r\nSassError: Can't find stylesheet to import.\r\n  \u2577\r\n1 \u2502 import \"invalid\";\r\n  \u2502         ^^^^^^^^^\r\n  \u2575\r\n  src\/styles.scss 1:9  root stylesheet\r\n    at Object.<anonymous> (\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/css-loader\/dist\/cjs.js??ruleSet[1].rules[5].rules[0].oneOf[0].use[1]!\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/postcss-loader\/dist\/cjs.js??ruleSet[1].rules[5].rules[0].oneOf[0].use[2]!\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/resolve-url-loader\/index.js??ruleSet[1].rules[5].rules[1].use[0]!\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/sass-loader\/dist\/cjs.js??ruleSet[1].rules[5].rules[1].use[1]!\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/src\/styles.scss:1:7)\r\n    at \/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/webpack\/lib\/javascript\/JavascriptModulesPlugin.js:441:11\r\n    at Hook.eval [as call] (eval at create (\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/tapable\/lib\/HookCodeFactory.js:19:10), <anonymous>:7:1)\r\n    at Hook.CALL_DELEGATE [as _call] (\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/tapable\/lib\/Hook.js:14:14)\r\n    at \/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/webpack\/lib\/Compilation.js:5053:39\r\n    at tryRunOrWebpackError (\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/webpack\/lib\/HookWebpackError.js:83:7)\r\n    at __webpack_require_module__ (\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/webpack\/lib\/Compilation.js:5051:12)\r\n    at __webpack_require__ (\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/webpack\/lib\/Compilation.js:5008:18)\r\n    at \/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/webpack\/lib\/Compilation.js:5079:20\r\n    at symbolIterator (\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/neo-async\/async.js:3485:9)\r\n\r\nGenerated code for \/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/css-loader\/dist\/cjs.js??ruleSet[1].rules[5].rules[0].oneOf[0].use[1]!\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/postcss-loader\/dist\/cjs.js??ruleSet[1].rules[5].rules[0].oneOf[0].use[2]!\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/resolve-url-loader\/index.js??ruleSet[1].rules[5].rules[1].use[0]!\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/node_modules\/sass-loader\/dist\/cjs.js??ruleSet[1].rules[5].rules[1].use[1]!\/usr\/local\/xxxxxxx\/cli-reproductions\/showwcase-v14-rc0\/src\/styles.scss\r\n1 | throw new Error(\"Module build failed (from .\/node_modules\/sass-loader\/dist\/cjs.js):\\nSassError: Can't find stylesheet to import.\\n  \u2577\\n1 \u2502 https:\/\/github.com\/import \\\"invalid\\\";\\n  \u2502         ^^^^^^^^^\\n  \u2575\\n  src\/styles.scss 1:9  root stylesheet\");\r\n```\r\n\r\nExamples of problematic code. (Not limited too):\r\n- https:\/\/github.com\/webpack\/webpack\/blob\/e2f1592f7e4d8f0578e5bb23d6a863b4a2b5f309\/lib\/ModuleBuildError.js#L31-L32\r\n- https:\/\/github.com\/webpack\/webpack\/blob\/e2f1592f7e4d8f0578e5bb23d6a863b4a2b5f309\/lib\/ModuleParseError.js#L79-L81\r\n\r\n- https:\/\/github.com\/webpack\/webpack\/blob\/e2f1592f7e4d8f0578e5bb23d6a863b4a2b5f309\/lib\/ModuleDependencyError.js#L33\r\n\r\n**What is the expected behavior?**\r\nWhen `errorStack` is set to `false` no stacktraces are displayed.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\n```\r\nWebpack: 5.73.0\r\n System:\r\n    OS: Linux 5.17 Debian GNU\/Linux rodete 12 (rodete)\r\n    CPU: (48) x64 AMD EPYC 7B12\r\n    Memory: 152.19 GB \/ 188.89 GB\r\n  Binaries:\r\n    Node: 14.19.2 - ~\/.nvm\/versions\/node\/v14.19.2\/bin\/node\r\n    Yarn: 1.22.17 - ~\/.nvm\/versions\/node\/v14.19.2\/bin\/yarn\r\n    npm: 8.11.0 - ~\/.nvm\/versions\/node\/v14.19.2\/bin\/npm\r\n  Browsers:\r\n    Chrome: 103.0.5060.53\r\n    Firefox: 91.10.0esr\r\n```\r\n\r\nFYI: @alexander-akait ","comments":["`errorStack` only refers to (webpack)-internal stack traces.\r\nStack traces from loaders can be disabled with `errorDetails: false`","I am pretty sure that sure that even when `errorDetails` is set to false the above stacktraces are also shown. ","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Okay, I done investigation on the latest version of webpack and sass-loader (and other CSS like loaders), shorty:\r\n- `errorStack` allows to enable and disable stack, so it works correctly\r\n- `errorDetails` show details from error in some cases it not looks good, because it duplicate an error message\r\n- `hideStack` works fine and webpack hide stack\r\n\r\nThe main problem some tools (for example node-sass, maybe due bindling) put stack inside message, so because of `errorDetails` enabled by default you see the stack, but this stack just in error message, so I don't think we can solve it on webpack level...\r\n\r\nAnyway I see this problem:\r\n- when `hideStack: true` and `errorDetails: true`, webpack duplicate error mesage, because when we try to print error we print stack + message and here we have duplication\r\n- we should avoid using `this.name` in  `${this.name} : ${error.message}`, because webpack already prints it","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["bug","webpack-5"]},{"title":"export in library works only for last entry module","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\nexport in library works only for last entry module\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nin webpack config like:\r\n```js\r\nmodule.exports = {\r\n  entry: [\"a\", \"b\", \"c\"],\r\n  output: {\r\n    library: { type: \"global\" }\r\n  }\r\n};\r\n```\r\n\r\nonly exports from `c` will be used\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nhttps:\/\/github.com\/TGRHavoc\/webpack-mvp\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nshould use all exports\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  latest\r\nNode.js version: \r\nOperating System: \r\nAdditional tools:\r\n","comments":["<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","Is there any workaround for this? Other than creating a barrel?","@alan-agius4 currently, no workaround (only multi compiler builds), but feel free to fix send a PR with fix","> @alan-agius4 currently, no workaround (only multi compiler builds), but feel free to fix send a PR with fix\r\n\r\nDoes anyone know where one would get started at debugging\/fixing this issue?","@TGRHavoc I'd start by checking what the default for the `output.library.name` configuration is.\r\n\r\nA client of mine used [some custom output.library.name logic back in the day](https:\/\/rossta.net\/blog\/from-sprockets-to-webpack.html#exporting-from-webpack) to support multiple library sub-modules."],"labels":["bug","webpack-5","Send a PR"]},{"title":"Respect browserslist env on config.target if browerslist config extends","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nIf the browserslist config references an exported Browserslist like\r\n`extends @foo\/browserslist-config` with configs for two or more environments\r\n\r\n```\r\nmodule.exports = {\r\n    production: [\r\n        '>= 0.5%',\r\n        'not Explorer <= 11'\r\n    ],\r\n    legacy: [\r\n        '>= 1%',\r\n        'Explorer >= 11'\r\n    ]\r\n}\r\n```\r\n\r\nthe environment will not be respected if you set config.target like\r\n`config.target = 'browserslist:production'`\r\n\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nNo\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nI don't think so\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\nNothing\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: refsz \/ name: refs  (4e0a34cc03122abac93f03c52875d299cde2ab7e)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"Support `import.meta.env`","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n`import.meta.env.NODE_ENV`\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nmigrate `process.env.NODE_ENV`\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nNo idea\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nNo idea\r\n","comments":["which tools support it? only Vite.js?","> which tools support it? only Vite.js?\r\n\r\nTo my knowledge yes.\r\n\r\nWebpack 5 has taken a big step by stepping away from Node in bundled code by removing NodeJS library polyfills from being included in bundles. Removing `process` seems like the next big step in the same direction.\r\n\r\nViteJS also provides a powerful tool to replace CommonJS `require` statements: [`import.meta.glob` and `import.meta.globEager`](https:\/\/vitejs.dev\/guide\/features.html#glob-import).","yeah, webpack supports `import.meta.webpackContext` https:\/\/github.com\/webpack\/webpack\/pull\/15446","To be honestly I am always thinking what we should use `globalThis` to check env, i.e. `globalThis.ENV` \/`globalThis.NODE_ENV`\/etc , `import.meta` only for import meta and functions related to import (hot replacement\/resolving\/etc), not sure why we should store env in `import.meta.env`, also using `globalThis` is solution for any platform - browser\/node\/deno, `import.meta.env` only for bundlers, and you need again using bundler to change it, just my option","For example we can found many issues like https:\/\/github.com\/immerjs\/immer\/issues\/557 (and workaround https:\/\/github.com\/immerjs\/immer\/issues\/557#issuecomment-621491287) for these packages, `import.meta.env` is an unofficial solution for any platform.\r\n\r\n","Anyway we can merge https:\/\/github.com\/webpack\/webpack\/pull\/15841\/ to solve problems with packages which already migrate on `import.meta.url`, but the question is more bigger, will be great if developers from Node.js, Deno, Rollup, Parcel, Esbuild and other had an discussion here. It is not good that vite just decide to use `import.meta.env` for env and start to recommend it, it can be destructive for ecosystem.","@alexander-akait Just FYI, I looked at the tc39 proposal for `import.meta`. It seems the ECMAScript committee decided it _should_ be extensible.[^1] Particular hosts, such as Node.js and Deno, may lock down the API if they choose. I wouldn't extend it for a Node.js script. But in the browser, it's fair game.\r\n\r\n[^1]: https:\/\/github.com\/tc39\/proposal-import-meta#will-this-object-be-locked-down-in-any-way","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump, still need a dicussion (anyway it can be done using a plugin)","You can try to use [import-meta-loader](https:\/\/www.npmjs.com\/package\/import-meta-loader).\r\nIt will support you to use vite's import.meta in webpack. Because it can convert vite's import.meta syntax to webpack's syntax.\r\n\r\nexample:\r\n```js\r\n\/\/ vite => webpack\r\nimport.meta.env \/\/=> process.env\r\nimport.meta.env.MODE \/\/=> process.env.NODE_ENV\r\nimport.meta.env.BASE_URL \/\/=> process.env.BASE_URL\r\nimport.meta.env.PROD \/\/=> process.env.NODE_ENV === 'production'\r\nimport.meta.env.DEV \/\/=> process.env.NODE_ENV !== 'production'\r\n\r\nnew URL('filePath', import.meta.url).href \/\/=> require('filePath')\r\n\r\nimport.meta.glob('filePath') \/\/=> ... require.context('dirPath', useSubdirectories: boolean, RegExp, 'lazy') ...\r\nimport.meta.glob('filePath', { eager: true }) \/\/=> vite3 ... require.context('dirPath', useSubdirectories: boolean, RegExp, 'sync') ...\r\nimport.meta.globEager('filePath') \/\/=> vite2 ... require.context('dirPath', useSubdirectories: boolean, RegExp, 'sync') ...\r\n```","I'm like to have a more standard way because `process` is not standard global variable.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","The modern way of doing it in node is an explicit import:\r\n\r\n```js\r\nimport {env} from 'node:process';\r\nconsole.info(env.NODE_ENV);\r\n```\r\n\r\nMaybe the runtime code of webpack could export it? Using special `webpack:` protocol which ensures the module is not a valid npm name:\r\n\r\n```js\r\nimport {env} from 'webpack:runtime';\r\nconsole.info(env.NODE_ENV);\r\n```\r\n\r\nCould be used for other stuff as well:\r\n\r\n```js\r\nimport {setPublicPath} from 'webpack:runtime';\r\nsetPublicPath('\/');\r\n```\r\n\r\nThe only downside is that `import` protocols are to my knowledge not standardizes by ECMA, so it's pretty much a node-only convention at this point."],"labels":["enhancement","webpack-5"]},{"title":"bugfixed: Webpack 5 is compiling twice in watch mode sometimes","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\na bugfix. Webpack 5 is compiling twice in watch mode sometimes. I think aggregateTimeout should be increased. \r\nhttps:\/\/github.com\/webpack\/webpack\/issues\/12140\r\nhttps:\/\/github.com\/jantimon\/html-webpack-plugin\/issues\/1576\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/30360513\/167194557-73dfb012-2e98-462c-8537-4e535644e4e1.png)\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nyes. In my own project.\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo.\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nNo.\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: qieqie7 \/ name: ZhangQi  (0ed3e24f4f4376e4e69e5ce7c450547d86c3871f)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","This is not valid fix","The bug cannot be reproduced in debugger mode. I saw that the default value was 200ms before. Why was it changed to 20ms? I think it is possible to increase on the previous value. This can ensure the efficiency of execution while avoiding some problems that may be caused by the system","![image](https:\/\/user-images.githubusercontent.com\/30360513\/167239370-9967d731-bc27-412b-91ce-7d144458563c.png)\r\n![image](https:\/\/user-images.githubusercontent.com\/30360513\/167239449-fe0f39d8-4f2a-4890-95b1-1b11156d2d64.png)\r\n","@alexander-akait .It looks like the problem is because of chokidar. I use chokidar to listen for file changes. It triggers two updates. I found this issue https:\/\/github.com\/paulmillr\/chokidar\/issues\/610. His maintainer suggested using the debounce function to solve this problem. Thanks for reading.","Do you have problems with static files only?","which static files? I don't understand.","When you have double compilation? When you touch which files?","maybe you can try https:\/\/github.com\/qieqie7\/double-complication .\r\n\r\nThere may be two compilations when I edit this project's `src\/index.js`\r\n\r\nmacos 12.3.1 \r\nnode 14.19.1\r\npnpm 7.0.0   (npm 8.7.0)\r\nvscode 1.67.0\r\n","> maybe you can try https:\/\/github.com\/qieqie7\/double-complication .\r\n> \r\n> There may be two compilations when I edit this project's `src\/index.js`\r\n> \r\n> macos 12.3.1 node 14.19.1 pnpm 7.0.0 (npm 8.7.0) vscode 1.67.0\r\n\r\nthis demo was too small, i use a react-app demo, when i set `aggregateTimeout: 600`, it will still build twice, i think change this might not be a valid way, it may cause other problems","> > maybe you can try https:\/\/github.com\/qieqie7\/double-complication .\r\n> > There may be two compilations when I edit this project's `src\/index.js`\r\n> > macos 12.3.1 node 14.19.1 pnpm 7.0.0 (npm 8.7.0) vscode 1.67.0\r\n> \r\n> this demo was too small, i use a react-app demo, when i set `aggregateTimeout: 600`, it will still build twice, i think change this might not be a valid way, it may cause other problems\r\n\r\nIt looks like the problem is because of chokidar. Chokidar uses fsevents to monitor file changes in mac. Maybe you can help take a look at this module.\r\n\r\n\u4f60\u5199\u4e00\u4e2a\u5c0f\u7684demo\u4f7f\u7528 chokidar \u53bb\u76d1\u542c\u6587\u4ef6\uff0c\u4f1a\u6709\u8fd9\u6837\u7684\u95ee\u9898\u5417 @fabianishere  \u6211\u8fd9\u8fb9\u4e5f\u4f1a\u51fa\u53d1\u4e24\u6b21 change \u4e8b\u4ef6\uff0c\u5b83\u4f9d\u8d56 fsevents \uff0c\u91cc\u9762\u662f .node \u6587\u4ef6\uff0c\u6211\u4e0d\u662f\u5f88\u770b\u5f97\u61c2\uff0c\u53ef\u80fd\u95ee\u9898\u51fa\u73b0\u5728\u8fd9\u91cc","I found it was because of eslint running every time I save a file in my editor, which I suspect result in an initial save and then, after 20+ ms, eslint finishes and the last save happens.","> I found it was because of eslint running every time I save a file in my editor, which I suspect result in an initial save and then, after 20+ ms, eslint finishes and the last save happens.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/30360513\/168128584-ae168f1a-2a4b-47ce-a8ac-dfd90bfd8908.png)\r\n\r\n@nikolaik  I used the text editor that comes with the system. But the problem still occurs.","@qieqie7 You might be hit by this #15431"],"labels":["PR: unreviewed"]},{"title":"Move types to devDependencies","body":"I ran in to an issue with `@types\/eslint` over here: https:\/\/github.com\/typed-ember\/ember-cli-typescript\/issues\/1502\r\n\r\nhere is how I came to conclude the issue was with webpack:\r\n```\r\n\u276f pnpm why @types\/eslint\r\n\r\ndevDependencies:\r\n@embroider\/webpack 1.6.0\r\n\u251c\u2500\u252c @embroider\/babel-loader-8 1.6.0\r\n\u2502 \u2514\u2500\u252c babel-loader 8.2.5\r\n\u2502   \u2514\u2500\u252c webpack 5.72.0 peer\r\n\u2502     \u2514\u2500\u252c @types\/eslint-scope 3.7.3\r\n\u2502       \u2514\u2500\u2500 @types\/eslint 8.4.2\r\n\u251c\u2500\u252c @embroider\/hbs-loader 1.6.0\r\n\u2502 \u2514\u2500\u252c webpack 5.72.0 peer\r\n\u2502   \u2514\u2500\u252c @types\/eslint-scope 3.7.3\r\n\u2502     \u2514\u2500\u2500 @types\/eslint 8.4.2\r\n\u251c\u2500\u252c babel-loader 8.2.5\r\n\u2502 \u2514\u2500\u252c webpack 5.72.0 peer\r\n\u2502   \u2514\u2500\u252c @types\/eslint-scope 3.7.3\r\n\u2502     \u2514\u2500\u2500 @types\/eslint 8.4.2\r\n\u251c\u2500\u252c css-loader 5.2.7\r\n\u2502 \u2514\u2500\u252c webpack 5.72.0 peer\r\n\u2502   \u2514\u2500\u252c @types\/eslint-scope 3.7.3\r\n\u2502     \u2514\u2500\u2500 @types\/eslint 8.4.2\r\n\r\n(etc, for a few more pages)\r\n```\r\n\r\nThis is problematic, because I'm using eslint@v7. _but_ I'm not even working with eslint plugins in the project where I discovered this, and my type checking was throwing errors due to mismatched types versions:\r\n```\r\nnode_modules\/.pnpm\/@types+eslint@7.29.0\/node_modules\/@types\/eslint\/helpers.d.ts:1:6 - error TS2300: Duplicate identifier 'Prepend'.\r\n\r\n1 type Prepend<Tuple extends any[], Addend> = ((_: Addend, ..._1: Tuple) => any) extends (..._: infer Result) => any\r\n       ~~~~~~~\r\n\r\n  node_modules\/.pnpm\/@types+eslint@8.4.2\/node_modules\/@types\/eslint\/helpers.d.ts:1:6\r\n    1 type Prepend<Tuple extends any[], Addend> = ((_: Addend, ..._1: Tuple) => any) extends (..._: infer Result) => any\r\n           ~~~~~~~\r\n    'Prepend' was also declared here.\r\n```\r\n\r\nThis is, of course, solved by pinning \/ overrides \/ resolutions-ing to `@types\/eslint @ v7, but this is a bandaid on the real problem -- that webpack is bringing in dev dependencies when it should not be.\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: NullVoxPopuli  (c82f1c8e8de2396cb0d1097db9d5b2a5b3165036, 211bfc558905d825b460fe5176d49fd2ac2a6f18)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","I don't think it is valid fix","@alexander-akait why's that?\r\n\r\n","You should put `@types\/eslint` in your deps","> You should put @types\/eslint in your deps\r\n\r\nWhy? that makes no sense. I'm not developing with eslint in the project where I found this error.","But you use types from `@types\/eslint`","`eslint-scope` doesn't used in `webpack\/types.d.ts`, so `@types\/eslint-scope` can be moved to `devDependencies`.\r\nBut `estree` used in `webpack\/types.d.ts`, so `@types\/estree` should remain in `dependencies`.","both estree and eslint-scope are used ( estree as types inside webpack code base, eslint-scope https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/optimize\/ConcatenatedModule.js#L8 )","`eslint-scope` used, but only as `devDependency`. There are no `eslint-scope` 's types exports.","@Semigradsky is correct! As a rule of thumb, the only types which should be in `dependencies` are types which are re-exposed as part of *your* public API. Types which are part of your implementation details can be in `devDependencies`, as they are not exposed to end users.\r\n\r\nOne way of making that intuition concrete is: is the type in your published `.d.ts` *and* are you getting types via the `@types` package for it? Then the `@types` package needs to be in your `dependencies` or your `peerDependencies`.","@NullVoxPopuli could you update your PR and sign CLA?","@NullVoxPopuli hi! `@types\/estree` still should be in `dependencies`.","@NullVoxPopuli Hi, could you take a look at Semigradsky's note above so this can be merged in the future?","Updated","Hi @sokra,\nI see there's some merge activity again, can we get this merged?"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"Webpack module federation not using webpack nonce","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nWhen setting a webpack nonce as per the [webpack content security policy page](https:\/\/webpack.js.org\/guides\/csp\/), the webpack nonce is not being properly inserted in the remoteEntry.js file, so the desired CSP doesn't pass.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nI've reproduced the problem on my github, at https:\/\/github.com\/trevorgithub\/module-federation-nonce-issue.  Detailed repro steps are in the readme.md, along with my analysis of the problem\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nWhen the webpack nonce is set, it should cause all webpack related code (included those files generated as part of webpack module federation) to look at the webpack nonce and set it on script and style tags, so that the page hosting the webpack generated code's CSP that provides the same nonce value should be satisified, and the browser allows the code to execute.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.72.0\r\nNode.js version: v16.13.2\r\nOperating System: Windows 10 (but will also fail on Ubuntu 20.04 and presumably other OSs)\r\nAdditional tools:\r\n","comments":["Sounds like enhancement","I thought it was more of a bug, as the [Webpack CSP docs ](https:\/\/webpack.js.org\/guides\/csp\/) say:\r\n> Webpack is capable of adding nonce to all scripts that it loads\r\n\r\nThis is script it both loads and generates.  There's really no workaround, except having a wide open CSP.  Regardless of how it's categorized, I'm really hopeful the team can implement the fix and\/or add the feature soon. Module federation is very cool. \r\nThank you :)","but nonce could be changed and `remoteEntry` could be the same..","Hi all, \r\nwith addition of [strict-dynamic](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/Headers\/Content-Security-Policy\/script-src#strict-dynamic) in CSP3 nonce is getting more important. \r\nHere is a nice [article](https:\/\/towardsdatascience.com\/content-security-policy-how-to-create-an-iron-clad-nonce-based-csp3-policy-with-webpack-and-nginx-ce5a4605db90) that explains issues with current __webpack_nonce__ implementation. \r\n\r\nTLDR: That nonce will not be added to entry bundle js script, and without it CSP will block it.\r\n\r\nIt would be nice if there would be a config for webpack to inject nonce to those scripts as well. Of course it would be more of a placeholder for a value that will be provided via server since it should be unique per request. \r\nMaybe it could be a settings for [html-webpack-plugin](https:\/\/github.com\/jantimon\/html-webpack-plugin) as well.\r\n@trevorgithub I verified that solution from the article works, and will probably go in that direction for now. So maybe it helps you as well.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","https:\/\/gist.github.com\/ScriptedAlchemy\/642b31c375843152b7c7860ba47eaa7c"],"labels":["enhancement","webpack-5"]},{"title":"fix cache invalidation in progress plugin","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nfixes #14946 \r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nyes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nnothing\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","Any chance we can get this in please?","@alan-agius4 Yea, sorry for delay, in near future"],"labels":["PR: reviewed-approved","PR: conflict"]},{"title":"fix: fix the check of this._redirect","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nthe left of `!this._redirectTo !== undefined` is if type `boolean`, but it is compared to `undefined`.\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nno\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nno\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers listed above are authorized under a signed CLA.<ul><li>:white_check_mark: login: zh-lx \/ name: zhoulixiang  (8356281b5857532702c4c6efefd9fbcad45100b9)<\/li><li>:white_check_mark: login: sokra \/ name: Tobias Koppers  (5bb60fe46cdb1d300e184bda973c5e8e06a57681)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: reviewed-changes-requested","PR: reviewed-approved"]},{"title":"Treeshaking with side effect free package is unexpectedly slow","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nGiven that one uses package that has multiple ESM exports, and marked as side effect free, all sub-trees seems to be analyzed or even compiled, which causes great performance loss. Inclusion (or not inclusion) into final bundle works correctly.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nI've created this setup to demonstrate https:\/\/github.com\/archfz\/webpack-treeshake-issue\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nI am not sure if this is a bug or this is intended to work like this. I would expect the subtree that is not imported to not be analyzed and\/or compiled at all. Given the example repository I would expect the same webpack compile duration using either `some-module` or `some-module-less`. Instead there is a big performance difference.\r\n\r\nGiven this performance I do not see the use of `tree-shaking` versus `used-exports` optimization. Indeed with sideeffectless ESM it is quite easier and faster to determine when to not include unused exports, than with `used-exports` optimization, but the big gains is the latter where the whole sub-tree is completely skipped.  \r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.72.0\r\nNode.js version: 16.x\r\nOperating System: Ubuntu 22\r\nAdditional tools: N\/A\r\n","comments":["yeah, thats how current webpack version works.. tree-shaking happens after building a tree.\r\n\r\nAlso this will not work great with incremental builds and cache. For incremental build in your case all sub tree should be build since all subtree will be invalidated in cache ( if e.g. on watch you will change imports ). Right now only affected module will be invalidated. ( Since we store all modules tree and \"side effects free\" does not affect module tree )\r\n\r\n_____\r\nMaybe this could be improved in the next major version","Yeah this would then be a real nice feature.\r\n\r\nQuestion still remains: is there only treebuilding happening? or is there also compilation upon the subtree? or something else that is expensive? Because I don't understand why it's 12x slower. Parsing some imports in couple of files shouldn't take that long.\r\n\r\nIn case of incremental builds I am not sure I follow. Why does the whole subtree need to be invalidated in cache for that file that is changed? As I see upon change only imports need to be checked what was added and what was removed. If treeshaken module was imported on change only then load that subtree and add to cache. Wouldn't this work similarly to how new imports are added from new unseen files for webpack?","> is there only treebuilding happening?\r\n\r\nall modules are parsed.\r\n\r\n> or is there also compilation upon the subtree?\r\n\r\nnot sure what you mean by compilation.. module graph is optimizing  after exports analyze ( side effects apply here ). no output generated for \"tree-shaken\" modules\r\n\r\n> Why does the whole subtree need to be invalidated in cache for that file that is changed?\r\n\r\nNot modules itself by exports that this modules provide.\r\ne.g. in case `A` module  import `B` module and `B` imports unused `C` module (A -> B -> C and C is unused and side effect free)\r\nSo on first build A and partial B module exports is known.\r\nIf we change module A the way that C module is used, this will trigger exports invalidation for module B + parsing\/analyze module C subtree. Things become a lot more complex when one module is imported in different modules ( common scenario )\r\n\r\nMaybe this could be optimized, but definitely things are more complex comparing to how right now this works ( building tree, then optimize ) ","Ok I am no expert in this. Hope it's possible tho.\r\n\r\nBy compilation I meant running the files through loaders.","> By compilation I meant running the files through loaders.\r\n\r\nyes, this is a part of creating module graph.","> yes, this is a part of creating module graph.\r\n\r\nJust to make sure I understand correctly. In the above example repo babel will be ran on each file loaded from some-module and its dependencies?\r\n\r\nWhy is this needed to build the module graph? Ofc talking here about third party packages with precompiled JS. Which is almost always the case with packages.","> In the above example repo babel will be ran on each file loaded from some-module and its dependencies?\r\n\r\nyes\r\n\r\n> Why is this needed to build the module graph?\r\n\r\nbecause loaders transforms module code and we don't know how resulted code will looks like.","I will do some more fiddleing to see the impact of the discovery vs loaders running on graph building.\r\n\r\nBut my initial thought is that for graph building needing loaders to run through the code is an edge case, and maybe should be able to opt out. As what is and what isn't imported in most cases for sideffectfree js won't be changed by loaders. But maybe I am in the wrong here.","I've made another branch https:\/\/github.com\/archfz\/webpack-treeshake-issue\/tree\/no_babel_on_modules and here I transformed all jsx in the 3rd party packages to js. I've also made babel not parse files from node modules.\r\n\r\nWith this change it's confirmed that the loaders are also run on module graph building. Now the slowdown is down from `12x` to only `3.5x`. Which is a big improvement, but still not quite there. This would then essentially mean that module graph building of unimported side effect free modules still add a lot of wasted resource usage.\r\n\r\nMy argument still stands. I don't see the point, in 99% of cases, running the loaders on js files prior to module graph building. Babel here is a very good example, as most probably all projects configure this loader to compile all files, even ones loaded from third party packages, due to the fact that one cannot know for sure what that package targets as ecmascript version.\r\n\r\nWould it be easily possible to introduce an optout flag for loaders for module graph building? Or are there any counter arguments? ","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Maybe loaders should mark themselves sideeffect free, or by default be and can opt out.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","So idea is: \r\n\r\n- webpack on cold start analyzes all modules\r\n- with `sideEffects: false`, can we skip unused modules when we are parse the modules"],"labels":["X3: discussion required","inactive","webpack-6"]},{"title":"add [root] and [internal-path] placeholders","body":"prevent asset path leading outside of build context\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nbugfix\r\nfixes #14392 \r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nyes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n- `[root]` prevents asset path leading outside of build context\r\nthis placeholder mostly should be used with `[path]` and `[name]` placeholders.\r\ne.g. if `output.filename=\"some[path][name].js\"` and looks like `some\/..\/..\/main.js`, with `[root]` (`\"some[root][path][name].js\"`) it will result in `some\/_\/_\/main.js`.\r\nNote if in case above `output.filename=\"[root]some[path][name].js\"`, result will looks like `_\/main.js`\r\n- `[internal-path]` is like `[path]` guarded by `[root]` (`[root][path]`)\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","`[root]` isn't my favorite naming here, if we add another interpolation token we _really_ need it to be descriptive and understandable. "],"labels":["PR: unreviewed"]},{"title":"add warning on unsupported environment","body":"\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nfeature\r\n\r\nin case of async\/await check that environment support async functions\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nyes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\ntop-level-await works only in environment that supports async functions\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"WebAssembly with Reference Types cannot be parsed","body":"Reopened #13559\r\n\r\n# Bug report\r\nWebAssembly modules with enabled Reference Types cannot be loaded. The webpack version I tested this with is 5.38.1\r\n\r\nFor a minimal reproduction I created this repository: https:\/\/github.com\/Tarnadas\/webpack-5-wasm-reftypes\r\n\r\nThe error message is the following:\r\n\r\n```\r\nERROR in .\/pkg\/webpack_5_wasm_reftypes_bg.wasm\r\nModule parse failed: Internal failure: parseVec could not cast the value\r\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https:\/\/webpack.js.org\/concepts#loaders\r\nError: Internal failure: parseVec could not cast the value\r\n    at new CompileError (\/home\/marior\/projects\/webpack-5-wasm-reftypes\/node_modules\/@webassemblyjs\/helper-api-error\/lib\/index.js:40:109)\r\n    at parseVec (\/home\/marior\/projects\/webpack-5-wasm-reftypes\/node_modules\/@webassemblyjs\/wasm-parser\/lib\/decoder.js:328:15)\r\n    at parseTypeSection (\/home\/marior\/projects\/webpack-5-wasm-reftypes\/node_modules\/@webassemblyjs\/wasm-parser\/lib\/decoder.js:360:22)\r\n    at parseSection (\/home\/marior\/projects\/webpack-5-wasm-reftypes\/node_modules\/@webassemblyjs\/wasm-parser\/lib\/decoder.js:1363:24)\r\n    at Object.decode (\/home\/marior\/projects\/webpack-5-wasm-reftypes\/node_modules\/@webassemblyjs\/wasm-parser\/lib\/decoder.js:1712:25)\r\n    at decode (\/home\/marior\/projects\/webpack-5-wasm-reftypes\/node_modules\/@webassemblyjs\/wasm-parser\/lib\/index.js:248:21)\r\n    at WebAssemblyParser.parse (\/home\/marior\/projects\/webpack-5-wasm-reftypes\/node_modules\/webpack\/lib\/wasm-async\/AsyncWebAssemblyParser.js:48:19)\r\n    at \/home\/marior\/projects\/webpack-5-wasm-reftypes\/node_modules\/webpack\/lib\/NormalModule.js:1018:26\r\n    at processResult (\/home\/marior\/projects\/webpack-5-wasm-reftypes\/node_modules\/webpack\/lib\/NormalModule.js:745:11)\r\n    at \/home\/marior\/projects\/webpack-5-wasm-reftypes\/node_modules\/webpack\/lib\/NormalModule.js:809:5\r\n @ .\/pkg\/webpack_5_wasm_reftypes.js 1:0-58 4:0-21\r\n @ .\/src\/index.js 1:0-16\r\n\r\nwebpack 5.38.1 compiled with 1 error in 572 ms\r\nerror Command failed with exit code 1.\r\n```\r\n\r\nI used Rust with wasm-bindgen, which provides a cli option to enable reference types. Instead of directly using wasm-bindgen, I\u2019ve been using wasm-pack, but since it\u2019s unmaintained, you will need my fork to pass the cli option down to wasm-bindgen. You can see my PR for wasm-pack here: [rustwasm\/wasm-pack#888](https:\/\/github.com\/rustwasm\/wasm-pack\/pull\/888)\r\n\r\nBy looking at the error message, it seems to be a problem with the wasm parser library. I checked its repository and couldn\u2019t find any mentions about reference types unfortunately, so I\u2019m not sure how to proceed with this.","comments":["I think parser does not support them.. (`@webassemblyjs\/wasm-parser`) . Right now there is no workaround for this.","Why webpack try to parse it? can we just use file-loader?","> Why webpack try to parse it?\r\n\r\nThere are some exports optimization.. so webpack parsing wasm.\r\n\r\n> can we just use file-loader?\r\n\r\nyes, sure. also in webpack@5 there is `asset` type.","@xtuc ","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","*ping*","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Last time you at least gave a warning, and it's marked as completed?? This has to be the worst bot ever.","Ok dude","@xtuc Friendly ping"],"labels":["inactive","webpack-5","wasm"]},{"title":"support expressionMemberChain in DefinePlugin","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nfeature\r\ncloses #15559 \r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nyes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nnothing\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: review-outdated -->\n\n@vankop Thanks for your update.\n\nI labeled the Pull Request so reviewers will review it again.\n\n@sokra Please review the new changes."],"labels":["PR: review-outdated","PR: conflict"]},{"title":"Module Federation: unable to share externalized dependency between host and remote","body":"# Bug report\r\n\r\n**TLDR**: `ModuleFederationPlugin` won't expose a host's dependency to a remote if the dependency is an `external`.  \r\nTo be honest, I'm not completely sure if this is a bug, a missing feature, or just a technical limitation of `ModuleFederationPlugin`... but i'd like to be able to do that \ud83d\ude04\r\n\r\n> **NOTE**: i'm using React as an example, but this behavior occurs regardless of what library i'm trying to externalize+share.\r\n\r\n---\r\n\r\n### Context\r\n\r\nOur module federation setup is pretty standard (except for the externals, apparently). We've got two apps:\r\n\r\n```\r\n(Host)           (Remote)\r\nSomePage  ---->  SomeWidget\r\n```\r\nBoth of these are React apps, with React stuff shared via a typical `ModuleFederationPlugin` config:\r\n```\r\nshared: {\r\n  'react': { singleton: true },\r\n  'react-dom': { singleton: true }\r\n}\r\n```\r\nThis all works fine.\r\n\r\nNow, we'd like `SomePage` to get React from a CDN link, so we tried externalizing it in `SomePage` via a typical\r\n```\r\nexternals: {\r\n  'react': 'SomeGlobalVar',\r\n  'react-dom': 'AnotherGlobalVar',\r\n}\r\n```\r\nthe idea being that React would get wired up everywhere like this:\r\n```\r\nScript tag  <script src=\"\/our-cdn\/react-stuff.js>\r\n      |\r\n      |\r\n      |   webpack `external` (global var)\r\n      |\r\n      v\r\nSomePage (Host app)\r\n      |\r\n      |\r\n      |    ModuleFederationPlugin's `shared` exposes React\r\n      |\r\n      v\r\nSomeWidget (Remote component)\r\n```\r\n\r\n### What is the current behavior?\r\nUnfortunately, despite `SomePage` successfully loading React from the CDN, this doesn't work.\r\n**The externalized React doesn't end up getting get shared between `SomePage` and `SomeWidget`**, so we get two copies of React in one tree, which leads to a crash for the usual reasons. From my testing, it appears that despite the `ModuleFederationPlugin` config, `SomePage` never puts React into the shared WMF scope, so `SomeWidget` understandably loads its fallback. The versions are the same between both, and removing them doesn't change anything. I've also tried this with lodash, and that also results in two copies, one from the CDN, and one loaded via `SomeWidget`'s fallback.\r\n\r\n### What is the expected behavior?\r\nDependencies should be shared between host and remote even if they're externals, as illustrated in the diagram a few paragraphs up.\r\n\r\n### Steps to reproduce\r\nI've added some externals to `basic-host-remote` from `module-federation-examples` to reproduce this setup:\r\n\r\nhttps:\/\/github.com\/lubieowoce\/module-federation-examples\/tree\/externals-test\/basic-host-remote\r\n\r\nthe change is [very small](https:\/\/github.com\/lubieowoce\/module-federation-examples\/commit\/27f38561f87eda727d9c4d510bad8b4977af1cf5). You can run it via `cd basic-host-remote && yarn && yarn start`, then navigating to http:\/\/localhost:3001\/. It'll flash and then turn blank, because when you when mix two copies of React in the same tree, it'll crash with \"Error: Invalid hook call\". This demonstrates that the library isn't actually being shared between the host and remote.\r\n\r\n### Other relevant information:\r\nwebpack version:  `5.70.0`\r\nNode.js version: `14.17.6`\r\nOperating System: macOS 11.6, ARM\r\n","comments":["I think you should use such config\r\n```\r\nexternals: {\r\n  'react': 'global var',\r\n  'react-dom': 'global var',\r\n}\r\n```\r\nin both apps\r\n______\r\n`external` kind of mean to be not part of \"build\", so sharing it sounds weird.","@vankop I know that that's an option! I guess what I'm trying to argue is that -- for me as a user -- the remote *shouldn't have to know* that the host externalizes React (or how). Consider if the same `SomeWidget` is used in two places (two different hosts), one with externalized React, and another where it's externalized *differently* (or even a normal part of the bundle). \"Hardcoding\" externalization in the remote will require some ugliness to support this.\r\n\r\nI understand that this may just be a limitation of how webpack models this stuff, but i think sharing an external is a legitimate usecase :) \r\n\r\nSome illustration for the scenario above:\r\n```js\r\n\/\/ Host 1 - react is already on the page\r\nexternals: { 'react': 'var React' }\r\n```\r\n```js\r\n\/\/ Host 2 - creates a script, different global\r\nexternalsType: 'script'\r\nexternals: { 'react': ['https:\/\/firstsite.com\/assets\/newer-react.js', 'ReactNext'] }\r\n```\r\n```js\r\n\/\/ Remote, used in both hosts\r\nexternals: ????\r\n\/\/ ^ i guess you could do `(window.React || window.ReactNext)` here but... gross.\r\n\/\/ it'd be much nicer if we could just get react via WMF sharing...\r\n```\r\nBasically, needing to know the actual global var name is antimodular. This bites us in particular because getting React from `ReactNext` instead of `React` is how we do gradual updates at work (w\/ multiple roots on the same page, each root can switch over to `ReactNext` when it's ready)","I'm not sure that every external module could be shared... ( there is a lot of external module types )","yeah, i imagine it's not easy with the various async flavors, but at least `var` (and other similar ones like `window`) sound doable, at least to an outsider :) So i guess the question is, do you think there's a chance to leave this open as a feature request? Or is this just a `WONTFIX`?\r\n\r\n(also `ModuleFederationPlugin` itself seems to add an external for the remote, so it sounds like a hairy problem all around... but that makes any potential \"user-space\" workarounds even harder) ","So the problem here. I think, is the remote container initialization phase. If a host marks it as external the runtime should still register react, and just point to the global variable. \r\nSo the share scope still contains the keys to pass them into remote containers. Otherwise if my remote has import:false set - it crashes because share scope is missing keys, but loadSingleton is still part of the logic ","@ScriptedAlchemy tbh it's been a while since i've had this problem, but yeah, iirc being able to just stick the externalized react in the share-scope (if i remember my terminology right) would do the job, i.e. the remote module would then be able to pick it up. but i didn't have enough experience with webpack externals to do that myself \ud83d\ude05\n\nalso not sure what to do with the version-negotiation stuff -- how do we deal with the fact that we don't (and can't) know what version the externalized module has? make the user specify \"i pinky promise it'll be react@17.0.2\"? or perhaps fallback it to some magic `*`\/ `ALWAYS_WINS_NEGOTIATION` value, since the user clearly doesn't want the module loaded via webpack? or maybe allow choosing either, with a config switch...? hairy stuff...","Well if the webpack still registered externals in its api\/share scope. Then you could manually specify the version and make the import value be external React \n\nThat way share scope registers the global variable along with its version and if it's singleton or not. \n\nIdeally it's still tracked, just not imported. \n\nIf you had mixed remotes. Where some may not set external, things would break. So this would be nice to still just keep the register() methods in the runtime. \n\nThis causes me problems in node envs where react isn't bundled. Just require()d - I had to make sure all remotes treated react as external too because the host is missing keys. ","> I had to make sure all remotes treated react as external too because the host is missing keys.\r\n\r\nYeah, this is kind of what we did, except we made the remote in question have two builds - one w\/ externalized react (for interop with stuff that externalizes react), and one \"vanilla\" (for WMF-native things where sharing Just Works). annoying but it works i guess\r\n\r\nanyway, i think we agree that it's a useful feature, so do you think this issue should be reopened? i mean, for me, i no longer have a pressing need for this, so i'm fine either way. but maybe there's SOMEONE out there who needs it \ud83d\ude04 \r\n\r\n(also if you know a way to make sharing externals happen \"in userspace\", i'd love to see how! mostly out of curiosity but also hey, might come in handy sometime)","I think it should be reopened, this can cause strange regressions where there doesn't need to be. \r\nI believe what would need to change is the SharingRuntimeModule.js \r\n\r\nRegarding sharing externals in userspace; something like this might work. \r\n\r\n```js\r\n{\r\n  shared: {\r\n    fakeReactKey: {\r\n      import: 'var React',\r\n      import: 'external React',\r\n      import: 'data:text\/javascript,module.exports = window.React;',\r\n      shareKey: 'react'\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nBut we would need a way to ensure it isnt tree shaken out as being \"unused\" in the graph. \r\n\r\nIn the webpack runtime, what we need is something like\r\n\r\n`register(\"react\", \"18.0.0\", function() { return React});`\r\n\r\n\r\n","@vankop @sokra - any ideas on how we can make this happen? ","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","@ScriptedAlchemy Do we need reopen this?","yes please!","same problems, I find remoteEntry will build externals module and ignore share modules, if the are the same. but the host not use externals , it will throw a error , TypeError: Cannot read properties of undefined (reading 'React')","That's because share scope is omnidirectional and the initialization phase is called by all runtimes who then register what they can offer, none of it loads at that point but they need to be callable since hosts call initExternal() which is remote.init() ","If you guys figured this out then you could have an MFE specify an external and the root could specify this same dependency as both external and a module federated shared dependency?","@alexander-akait  Reopen again?"],"labels":["enhancement","question","webpack-5"]},{"title":"Lazy compilation can fail when switching \"routes\" quickly","body":"# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using the experimental lazy compilation feature (in Storybook), when you change stories quickly (thus triggering many different lazy compilation jobs), *sometimes* the HMR for the lazy update can fail in various ways, which can lead to `react-refresh` errors or simply the whole app having to reload itself.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nIt is not entirely predictable, and I have not managed to reproduce outside of Storybook (yet), but this is a very very simple Storybook project and I think it is quite obvious the bug is in Webpack, but I am ready to be corrected ;)\r\n\r\nhttps:\/\/github.com\/tmeasday\/storybook-lazy-compilation-webpack -- see the instructions from the repo.\r\n\r\nThe key point in this reproduction is that when a bunch of lazy updates are created on the server, the browser, which is otherwise doing nothing, will sometimes 404 on a `hot-update.json` request:\r\n\r\n<img width=\"1293\" alt=\"image\" src=\"https:\/\/user-images.githubusercontent.com\/132554\/158745570-9f68a0fc-9a76-49fa-9598-272327a7763a.png\">\r\n\r\nNote we have seen other (less reproducible) issues around HMR and lazy compilation, that you might see if you play with this repository, including:\r\n\r\n - Sometimes the storybook fails to load initially with a HMR error. This definitely seems to be a timing issue with when the auto-launched browser loads relative to the initial entries compilation (it happens maybe 10% of the time or less when I simply run `rm -rf node_modules\/.cache\/ && yarn storybook` and let the browser launch).\r\n \r\n<img width=\"612\" alt=\"image\" src=\"https:\/\/user-images.githubusercontent.com\/132554\/158747305-639e03b9-5b7f-425f-a191-9a49e175fd9d.png\">\r\n\r\n - You can also trigger a bug by changing stories in the sidebar directly quickly while lazy compilation is going on (i.e. start SB, open up, change stories as fast as you can (you can use `option-down` and `option-up` to do this). However I cannot make this happen reliably enough to create a reproduction that would be useful. If you'd like to see what I mean I can likely get a screen recording of it happening at least.\r\n\r\n**What is the expected behavior?**\r\n\r\nLazy compilation should be fairly transparent to the consumer, beyond `import()` requests taking a little longer than they otherwise might. If updates come over the wire from compilations triggered by other browsers, they should not fail.\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.70.0\r\nNode.js version: 14.18.1\r\nOperating System: MacOS\r\nAdditional tools: Storybook 6.5.0-alpha.48\r\n\r\n**NOTE**\r\n\r\nThe tool we are using here to trigger the bug is the Storybook test runner, which opens the Storybook up in 4 separate, concurrent playwright instances, each of which will trigger a different dynamic (and thus lazy-compiled) `import()` statement.","comments":["do you using `output.clean=true` ?","No, I don't think so. You can see the full webpack config SB generates with `yarn storybook --debug-webpack`.","OK, I simplified the repro a lot and brought it out of Storybook!\r\n\r\nhttps:\/\/github.com\/tmeasday\/webpack-lazy-compilation-repro-simple\r\n\r\n1. `yarn webpack serve`\r\n2. Open browser, ensure \"preserve log\" is on\r\n3. Run `all()`\r\n4. Notice logs:\r\n\r\n```\r\nGET http:\/\/localhost:8080\/main.01ce74ce55d820aed88a.hot-update.json 404 (Not Found)\r\n[HMR] Cannot find update. Need to do a full reload!\r\n[HMR] (Probably because of restarting the webpack-dev-server)\r\n```\r\n\r\nThe content of `all()`:\r\n\r\n```js\r\nwindow.all = async () => {\r\n  import('.\/a');\r\n  await new Promise((r) => setTimeout(r, 0));\r\n  import('.\/b');\r\n  await new Promise((r) => setTimeout(r, 0));\r\n  import('.\/c');\r\n};\r\n```\r\n\r\nInterestingly the issue doesn't occur if you remove the final call to `import('.\/c')`","@tmeasday still does not work with latest webpack?","<strike>Hey @vankop. Hmmm, OK, so the reproduction I just posted is fixed in `5.72.0`. But the original issue posted at the top is not. \ud83e\udd14 I'll keep trying to reproduce in pure webpack.<\/strike>","@vankop I am not quite sure what happened 6 days ago in [my comment directly above](https:\/\/github.com\/webpack\/webpack\/issues\/15541#issuecomment-1098945201), but I came back to this today and tried it again, and it the [reproduction I posted](https:\/\/github.com\/webpack\/webpack\/issues\/15541#issuecomment-1098860467) **definitely does occur** in `5.72.0`.\r\n\r\nIt is a pretty simple reproduction so hopefully it should make the problem clear :)","@vankop I dug into this a bit and I think I have some more context on what is going wrong here, in case it helps. Apologies in advance for my lack of understanding of how HMR stuff works in detail.\r\n\r\nSo, just to reiterate, what's happening in [the failing repro above](https:\/\/github.com\/webpack\/webpack\/issues\/15541#issuecomment-1098860467) is that we are `import()`-ing three files with a very small delay between each import. \r\n\r\nActually the issue can happen even when even importing two files with a delay, but it doesn't happen every time. It's interesting to see what happen when it *does* work vs when it does.\r\n\r\n----\r\n\r\nWhen the **lazy compilation works**, on the terminal (with all logging turned on), I see:\r\n\r\n```\r\n[webpack-cli] Compiler is watching files for updates...\r\n[LazyCompilationBackend] \/Users\/tom\/GitHub\/Repros\/webpack-lazy-compilation-repro-simple\/a.js is now in use and will be compiled.\r\n[LazyCompilationBackend] \/Users\/tom\/GitHub\/Repros\/webpack-lazy-compilation-repro-simple\/b.js is now in use and will be compiled.\r\n[webpack-cli] File 'null' was modified\r\n[webpack-cli] Changed time is Wed Feb 13 54385 03:50:43 GMT+1100 (Australian Eastern Daylight Time) (timestamp is 1654061359843)\r\n[webpack-dev-middleware] Compilation starting...\r\n[webpack-cli] Compiler starting...\r\n[webpack-cli] Compiler is using config: '\/Users\/tom\/GitHub\/Repros\/webpack-lazy-compilation-repro-simple\/webpack.config.js'\r\n[webpack-cli] Compiler finished\r\n[webpack-dev-middleware] Compilation finished\r\n```\r\n\r\nNotice in particular the two messages `.... is now in use and will be compiled.` that come in around the same time. This message is logged right before the [`lazyCompilationBackend` calls `compiler.watching.invalidate()`](https:\/\/github.com\/webpack\/webpack\/blob\/96da7660021e8aa31e163bacd3515960eb253422\/lib\/hmr\/lazyCompilationBackend.js#L85-L86).\r\n\r\nThe two modules do not actually get \"used\" at the same time, there is a 2ms gap between them, but for whatever reason the new compilation triggered by the invalidate hasn't actually started yet.\r\n\r\nOn the client, on the HMR socket we see a really straightforward set of messages for a single HMR update and it all works fine:\r\n![image](https:\/\/user-images.githubusercontent.com\/132554\/171334596-126955d1-1a65-437c-a58e-4aecbfbd28b0.png)\r\n\r\n---\r\n\r\nWhen it doesn't work, **it is because the compilation starts before the second invalidation**:\r\n\r\n```\r\n[webpack-cli] Compiler is watching files for updates...\r\n[LazyCompilationBackend] \/Users\/tom\/GitHub\/Repros\/webpack-lazy-compilation-repro-simple\/a.js is now in use and will be compiled.\r\n[webpack-cli] File 'null' was modified\r\n[webpack-cli] Changed time is Sun Feb 10 54385 23:26:14 GMT+1100 (Australian Eastern Daylight Time) (timestamp is 1654061171174)\r\n[webpack-dev-middleware] Compilation starting...\r\n[webpack-cli] Compiler starting...\r\n[webpack-cli] Compiler is using config: '\/Users\/tom\/GitHub\/Repros\/webpack-lazy-compilation-repro-simple\/webpack.config.js'\r\n<w> [LazyCompilationBackend] Error: read ECONNRESET\r\n<w>     at TCP.onStreamRead (internal\/stream_base_commons.js:209:20) {\r\n<w>   errno: -54,\r\n<w>   code: 'ECONNRESET',\r\n<w>   syscall: 'read'\r\n<w> }\r\n[LazyCompilationBackend] \/Users\/tom\/GitHub\/Repros\/webpack-lazy-compilation-repro-simple\/b.js is now in use and will be compiled.\r\n[webpack-cli] File 'null' was modified\r\n[webpack-cli] Changed time is Sun Feb 10 54385 23:26:32 GMT+1100 (Australian Eastern Daylight Time) (timestamp is 1654061171192)\r\n[webpack-cli] Compiler starting...\r\n[webpack-cli] Compiler is using config: '\/Users\/tom\/GitHub\/Repros\/webpack-lazy-compilation-repro-simple\/webpack.config.js'\r\n[webpack-cli] Compiler finished\r\n[webpack-dev-middleware] Compilation finished\r\n```\r\n\r\nIn this case, notice the \"Compilation starting...\" message is logged **before** the \"...b.js is now in use and will be compiled.\" message. Ultimately this leads to the following messages over the websocket:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/132554\/171334686-5aabe73c-2717-4b20-86b5-433b807bb35c.png)\r\n\r\n(Here's where I get a bit more hazy) -- what this means is that there are actually two \"changes\" in compilation -- we go from an initial hash, to a second hash with `a.js`, to a third hash with `a.js` and `b.js`. However, the HMR mechanism tries to fetch the `hot-update.json` based on the initial hash, after the compilation of the third hash, and it no longer exists in the dev server.\r\n\r\nI am not sure exactly what the root problem is. I suspect that maybe the lazy compilation backend shouldn't (or shouldn't be able to) invalidate the compilation **while it is compiling**. Perhaps somewhere in the pipeline there should be a queue of invalidations that blocks on previous compilations?","@vankop FYI I implemented a workaround on SB's end by putting some pipelining\/throttling in our client side code to avoid overlapping `import()` calls: https:\/\/github.com\/storybookjs\/storybook\/pull\/18432\r\n\r\nTo be clear, I don't think this is a great solution because\r\n (a) it feels like it's the wrong place for the fix (it's crude as it doesn't really know when the compilation is done, it probably slows things down).\r\n (b) it doesn't help if there is >1 client, which is the scenario from the original reproduction on this ticket (and is still an issue for us).\r\n\r\nI wonder if the right solution is to add a similar throttle to [this `requestListener`](https:\/\/github.com\/webpack\/webpack\/blob\/96da7660021e8aa31e163bacd3515960eb253422\/lib\/hmr\/lazyCompilationBackend.js#L53) so that incoming requests are queued up and not handled until a previous compilation triggered by [this invalidation](https:\/\/github.com\/webpack\/webpack\/blob\/96da7660021e8aa31e163bacd3515960eb253422\/lib\/hmr\/lazyCompilationBackend.js#L85) is complete?\r\n\r\nI tried it out and it did resolve the problem, although I did need to put a little delay in (>10ms <100ms) between one compilation finishing and the next one starting (I think because otherwise the HMR update gets invalidated before the browser has a chance to grab it, although I didn't dig in too much). I'm really unsure if this is the right approach or not (plus how I'd go about adding a test to webpack for it).","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","As a note we are still working around this problem in Storybook in a way which probably isn't ideal for performance: https:\/\/github.com\/storybookjs\/storybook\/blob\/15dd0ad6891e964f807a22e3e3827c0e7f599a1b\/code\/lib\/core-webpack\/src\/to-importFn.ts#L50-L55","@tmeasday Something which I am still facing too in my repo. Issue: https:\/\/github.com\/storybookjs\/storybook\/issues\/22706\r\nThis is how it looks.\r\nIf you see in the video, whenever i click on any component it is downloading duplicate assets and resources and the page continuosly refreshes.\r\nI am using \r\n```\r\n\"storybook\": \"^7.0.12\",\r\n\"webpack\": \"^5.83.1\"\r\n```\r\n\r\nhttps:\/\/github.com\/webpack\/webpack\/assets\/8790510\/e0a3647b-9bae-4857-a14e-bceec54bc241\r\n\r\n"],"labels":["bug","webpack-5"]},{"title":"add extractSourceMap option for modules","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nfeature\r\ncloses #10265 \r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nnot yet\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\ndeprecate `source-map-loader`\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [x] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@vankop Can you rebase too? Thank you","Also rebase needed. ","<!-- identifier: review-outdated -->\n\n@snitin315 Thanks for your update.\n\nI labeled the Pull Request so reviewers will review it again.\n\n@TheLarkInn Please review the new changes."],"labels":["PR: review-outdated"]},{"title":"MultiCompiler didn't release memory after one compiler is finished.","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nI use MultiCompiler configs.  \r\nIf i run them one by one, Webpack can build them all.  \r\n```js\r\nconst config = {}\r\nwebpack(config)\r\n```\r\nIf i run them together, OOM appeares.\r\n```js\r\nconst configs = [config1, config2, config3, config4]\r\nwebpack(configs)\r\n```\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nMultiCompiler uses more memory than single compiler.\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nEach compiler should work separately. when one is finished, who's memory should be released.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.70.0\r\nNode.js version: 14.17.1\r\nOperating System: macOS 11.6\r\nAdditional tools: none\r\n\r\n**Part of configuration**\r\nentries (each compiler): 2 + 159 + 230\r\ncache: dsiabled\r\nmode: 'production'\r\nloaders: babel \/ postcss \/ vue-laoder\r\nminimizer: terser \/ css-minimizer-webpack-plugin\r\ndevtool: false\r\ntarget: ['web', 'es5']\r\n","comments":["in multicompiler mode next compilation could depends on previous one https:\/\/github.com\/webpack\/webpack\/blob\/main\/schemas\/WebpackOptions.json#L396 . but maybe this could be improved.","> in multicompiler mode next compilation could depends on previous one\r\n\r\n@vankop  Is there any way to stop such behavior because in my scenario, there is no dependencies between multicompilers","not sure.. lets keep tracking issue for now.","The strange thing is even all assets are emited. OOM still appeares at last.","@Edge00 Can you provide OOM message?","@alexander-akait  Sure\r\n```bash\r\n<--- Last few GCs --->\r\n\r\n[94438:0x1048db000]   239481 ms: Scavenge (reduce) 3886.2 (4100.5) -> 3886.0 (4103.8) MB, 11.5 \/ 0.0 ms  (average mu = 0.090, current mu = 0.033) allocation failure\r\n[94438:0x1048db000]   239494 ms: Scavenge (reduce) 3887.0 (4108.3) -> 3886.9 (4109.5) MB, 11.9 \/ 0.0 ms  (average mu = 0.090, current mu = 0.033) allocation failure\r\n[94438:0x1048db000]   239510 ms: Scavenge (reduce) 3888.1 (4102.8) -> 3888.0 (4106.0) MB, 12.2 \/ 0.0 ms  (average mu = 0.090, current mu = 0.033) allocation failure\r\n\r\n\r\n<--- JS stacktrace --->\r\n\r\nFATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory\r\n 1: 0x10130d5e5 node::Abort() (.cold.1) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n 2: 0x1000b2289 node::Abort() [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n 3: 0x1000b23ef node::OnFatalError(char const*, char const*) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n 4: 0x1001f68c7 v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, bool) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n 5: 0x1001f6863 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n 6: 0x1003a47e5 v8::internal::Heap::FatalProcessOutOfMemory(char const*) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n 7: 0x1003a628a v8::internal::Heap::RecomputeLimits(v8::internal::GarbageCollector) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n 8: 0x1003a19b5 v8::internal::Heap::PerformGarbageCollection(v8::internal::GarbageCollector, v8::GCCallbackFlags) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n 9: 0x10039f2e0 v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace, v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n10: 0x1003ad9ea v8::internal::Heap::AllocateRawWithLightRetrySlowPath(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n11: 0x1003ada71 v8::internal::Heap::AllocateRawWithRetryOrFailSlowPath(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n12: 0x100376cce v8::internal::FactoryBase<v8::internal::Factory>::NewRawTwoByteString(int, v8::internal::AllocationType) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n13: 0x10078f54d v8::internal::IncrementalStringBuilder::Extend() [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n14: 0x1004bd866 v8::internal::JsonStringifier::SerializeString(v8::internal::Handle<v8::internal::String>) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n15: 0x1004bf3dd v8::internal::JsonStringifier::Result v8::internal::JsonStringifier::Serialize_<false>(v8::internal::Handle<v8::internal::Object>, bool, v8::internal::Handle<v8::internal::Object>) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n16: 0x1004c37c4 v8::internal::JsonStringifier::Result v8::internal::JsonStringifier::Serialize_<true>(v8::internal::Handle<v8::internal::Object>, bool, v8::internal::Handle<v8::internal::Object>) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n17: 0x1004c07ee v8::internal::JsonStringifier::Result v8::internal::JsonStringifier::Serialize_<false>(v8::internal::Handle<v8::internal::Object>, bool, v8::internal::Handle<v8::internal::Object>) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n18: 0x1004ba503 v8::internal::JsonStringify(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Object>) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n19: 0x1002a0253 v8::internal::Builtin_JsonStringify(int, unsigned long*, v8::internal::Isolate*) [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n20: 0x100a82099 Builtins_CEntry_Return1_DontSaveFPRegs_ArgvOnStack_BuiltinExit [\/Users\/qiongen\/.nvm\/versions\/node\/v14.17.1\/bin\/node]\r\n```","@Edge00 Cache enabled? What is `mode`? If you can will be great to provide configuration","@alexander-akait Sorry. The configuration are generated by some complicated logic. I supplemented some configuration information on the issue description. If you need more information please let me know. Thank you!","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","@vankop Still valid?","lets implement `compiler.runOnce` that will run and close compilers. ( maybe use in in `webpack-cli` then )","first of all we need to solve memory leak issue with [module graph](https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/ModuleGraph.js#L849).. otherwise all modules will be in this `WeakMap` until `compiler. _cleanupLastCompilation` will not be called..","> first of all we need to solve memory leak issue with [module graph](https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/ModuleGraph.js#L849).. otherwise all modules will be in this `WeakMap` until `compiler. _cleanupLastCompilation` will not be called..\r\n\r\nthe same problem we have too. I record mutli times momory useage in chrome devtool after compiler.close trigger.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/40595135\/182284385-a0ea5ffe-c680-4051-af91-60e29ef8b5f3.png)\r\n\r\n","Do you think that you can provide a reproducible repo which portrays this memory leak @Edge00. We have interesting in working on this but hard to reproduce without a small example to profile. "],"labels":["enhancement","X0: need more information","inactive","webpack-5","blocked"]},{"title":"add guards support in JavascriptParser","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nfeature\r\ncloses #14814 \r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nyes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nnothing\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n\r\n** notes regarding design **\r\nadd in `parser.scope` `parser.scope.guards`\/`parser.scope.inGuardPosition`\r\n\r\ntermins:\r\n`guard` - chain of ids that is safe to use ( is truthy ) in current `parser.scope`\r\n`in guard position`- any possible `guard` ( chain of ids ) could be added to `parser.scope.guards`, this means that this `guard` will be safe to use in current and all children parser scopes. e.g. `&&` logical expression:\r\n```js\r\nimport * as b from \"b\";\r\n\/\/ x && y is a guard position since it is truthy only if both operands are truthy, also y could be guarded by x\r\n\/\/ b is namespace, always safe to use\r\n\/\/ b.a could be a guard\r\nif (b && b.a) {\r\n  if (c) b.a(); \/\/ b.a is a guard\r\n}\r\n```\r\n\r\nalso 2 binary expressions could be guard position:\r\n`x in y` \/ `x != y ( when x falsy )`\r\nlets assume that `y` is import specifier then:\r\n```js\r\nimport {y} from \"y\";\r\n\r\n\/\/ y.x is a guard\r\n\"x\" in y ? y.x() : null;\r\n\r\n\/\/ y is a guard\r\nif (null != y) {y();} \/\/ non strict equality is important since null !== y could be true with falsy y\r\n```\r\n\r\nalso this could work with several guards positions, e.g. complex example:\r\n```js\r\nimport {a, b, c} from \"a\";\r\n\r\n\/\/  not in guard position, we support only &&\r\nif ((x in a && b) || c) {\r\n}\r\n\r\nif (\"x\" in a && b || c) {\r\n   a.x(); \/\/ is guarded\r\n   b(); \/\/ not guarded\r\n   c(); \/\/ not guarded\r\n}\r\n```\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","Hey guys, any updates? :)"],"labels":["PR: unreviewed"]},{"title":"Allow turning off tree shaking for external modules or marking external modules as having side-effects","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nIn my application, I am seeing various external modules (specifically those with side-effect only imports, i.e. \"import \"myModule\"\") being removed by tree shaking from the bundle when in production mode.\r\n\r\nAccording to the [tree shaking documentation](https:\/\/webpack.js.org\/guides\/tree-shaking\/), I can mark npm packages as having side effects \/ not having side-effects, but that same option is not documented for external modules (even when using the function method of identifying externals).\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\nI would like to preserve these imports since webpack can't really know if I need them or not.\r\n\r\nMy current workaround is to use \"require\" on only these imports (since only \"import\" statements are eligible for treeshaking), but that's hard to remember and I'd love to flag all externals as non-treeshakable.\r\n\r\n**How should this be implemented in your opinion?**\r\nEither\r\n1. Change the tree-shaking algorithm to ignore all external modules\r\n2. Provide a new input parameter (or options object) to the callback function for the externals function that allows specifying whether the external has side-effects or not.\r\n\r\n**Are you willing to work on this yourself?**\r\nLikely, if this isn't already secretly supported and there's buy-in on which of the two approaches to take.\r\n","comments":["> Change the tree-shaking algorithm to ignore all external modules\r\n\r\nall external modules should be preserved in bundle. could you provide a reproducible repo with bug?","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","there is nothing to do from webpack @alexander-akait . user should correctly mark side effects with `sideEffects` flag.","For clarification, this is specifically for \u201cexternal modules\u201d which are not loaded from node_modules and may not have a corresponding package.json or even correspond to an npm package! Since the sideEffects flag can only be set in a package.json, this solution is not applicable to the external modules case.\n\nOn Fri, Apr 14, 2023, at 2:16 AM, Ivan Kopeykin wrote:\n> \n> \n> there is nothing to do from webpack @alexander-akait <https:\/\/github.com\/alexander-akait> . user should correctly mark side effects with `sideEffects` flag.\n> \n> \n> \u2014\n> Reply to this email directly, view it on GitHub <https:\/\/github.com\/webpack\/webpack\/issues\/15486#issuecomment-1507978838>, or unsubscribe <https:\/\/github.com\/notifications\/unsubscribe-auth\/AB32RZYQ25LJU6BFDHOUJGTXBDTUXANCNFSM5QEOO3VA>.\n> You are receiving this because you are subscribed to this thread.Message ID: ***@***.***>\n> \n","@vankop yeah, we don't check `sideEffects` for externals, so we need to allow to set developer `sideEffects` for externals, but maybe we can do it using `module`... need to check","GitHub didn't create a backlink to our discussion on this, so I'm doing so now, for others to read: https:\/\/github.com\/webpack\/webpack\/discussions\/16980#discussioncomment-5609953"],"labels":["enhancement","webpack-5"]},{"title":"validate compiler options in multicompiler mode","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nfeature\r\ncloses #14843 \r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nyes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nnothing\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed"]},{"title":"add virtual resource","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\ncloses #14851 \r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nyes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nnot sure..\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nnothing\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed"]},{"title":"fix chunk prefetch\/preload","body":"- add connection type set to parent chunk group\r\n- use connection type in iterable by type methods\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nfixes #12393 \r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nuse existing stats\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nnothing\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@sokra Need your attention, thanks","- [ ] Rebase\r\n- [ ] Test Case \r\n- [ ] Follow-up verify on performance"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"more informative error in DefinePlugin","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n[evaluating](https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/DefinePlugin.js#L397) inside `DefinePlugin` could result in error. \r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nWill be great to improve DX and improve error message\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\ncatch error, and provide more informative message\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n","comments":["<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["enhancement","webpack-5"]},{"title":"Sync Module Federation","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nrefactoring to allow MF to be loaded synced\r\n\r\n**Did you add tests for your changes?**\r\n\r\nnot yet\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nthe impact should be low, but will be good to update all plugins that are using MF at the same time than the host\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n* remotes will be managed as promises in order to allow initial loads and avoid the bootstrap hack way that was breaking that we can manage the package as NPM library\r\n\r\nhttps:\/\/github.com\/webpack\/webpack\/issues\/15240\r\nhttps:\/\/github.com\/webpack\/webpack\/issues\/11811\r\nhttps:\/\/github.com\/webpack\/webpack\/discussions\/15256\r\n\r\nthese 2 links contains a lot information about why im doing this change\r\n\r\nexample for host\r\n```\r\nnew ModuleFederationPlugin({\r\n        name: 'remoteModuleName',\r\n        filename: 'remote-module-name-federation.js',\r\n        exposes: {\r\n          '.\/ComponentContext': { import: '.\/src\/modules\/Component\/ComponentContext', shared: true },\r\n          '.\/ComponentProvider': { import: '.\/src\/modules\/Component\/ComponentProvider', shared: true }\r\n        },\r\n        shared: [\r\n          {\r\n            react: { singleton: true, requiredVersion: false, eager: true },\r\n            'react-dom': { singleton: true, requiredVersion: false, eager: true },\r\n            'react-redux': { singleton: true, requiredVersion: false, eager: true }\r\n          }\r\n        ]\r\n      })\r\n```\r\nand example for child consuming host\r\n\r\n```\r\nnew ModuleFederationPlugin({\r\n        name: `moduleName`,\r\n        filename: `module-name-federation.js`,\r\n        remotes: {\r\n          remoteModuleName: [\r\n            'remoteModuleName@host',\r\n            'remoteModuleName@http:\/\/localhost:3001\/remote-module-name-federation.js'\r\n          ]\r\n        },\r\n        exposes: {\r\n          Plugin: '.\/src\/component\/index.js'\r\n        },\r\n        shared: {\r\n          react: { singleton: true, requiredVersion: false },\r\n          'react-dom': { singleton: true, requiredVersion: false },\r\n          'react-redux': { singleton: true, requiredVersion: false }\r\n        }\r\n      })\r\n```","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@ScriptedAlchemy well MF internally will change a bit, and thats what i would need to discuss with you on deep to confirm all user cases and from there write the correct documentation\r\n\r\nbut, with this way MF can works fully sync because we are taking the premise that shared libraries are globals and remotes are being loaded as promises that are easy to manage at high level code like react with react.lazy and react.suspense\r\n\r\nthe second point is  that a MF library loaded as child into a host, MUST have direct access to the data exposes from the host, for the moment im making this available via shared library also but probably we can improve this more, and in remotes i added a way to import parent details instead be downloading this like we was talking before\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/86263126\/151655382-01adc9a5-191e-4afd-b69f-e059f7d62518.png)\r\n","@ScriptedAlchemy @sokra this change is not just for MF, with the change done we can finally solve the problem about duplicated dependencies like react and the popular error message, because when we share libraries like react, they will be available globally  as singleton access\r\n\r\nhttps:\/\/github.com\/webpack\/webpack\/pull\/15271\/files#diff-c3b1610b00ec187ec39f60ef90682220aef7392d2943458cc005d123cbcd8dd9R89","@sokra @alexander-akait hi guys, this PR is working but i would like to ask feedbacks about how to improve this, im feeling that can be done in a better way but i dont have a deep knowledge about how works webpack and if you could you give me feedbacks about tests please will help me\r\n","Based on test, you generate invalid js:\r\n```\r\n\u25cf ConfigTestCases \u203a container \u203a module-federation \u203a module-federation should compile\r\n\r\n    \/home\/vsts\/work\/1\/s\/test\/js\/ConfigTestCases\/container\/module-federation\/container2.js:117\r\n    \t\t\t\t});,\r\n    \t\t\t\t   ^\r\n```\r\n","added back compatibility that will solve all broken tests and solved your comment @ScriptedAlchemy ","If this is a viable solution that Webpack foundation is willing to accept internally, it would be very beneficial. ","hi @alexander-akait @sokra  any update about this one please ?","hi @vankop could you review this PR plz","To be honest I'm really confused by the changes in the PR, so I would like to understand the problem you are trying to solve first.\r\n\r\nThat's how I currently understand what you are trying to do (but I'm really unsure if I understand that correctly):\r\n\r\n* You have a scenario where the \"host\" loads other containers as \"plugins\"\r\n* Plugins want to access shared libraries from the host, e. g. react\r\n* Plugins want to access exposed modules from the host, e. g. app name\r\n\r\nNot sure if this is correct, because it's very different from the linked issues.\r\n\r\nIf this is correct, my question is \"why doesn't that work with the current implementation in your case?\"\r\n\r\n``` js\r\n\/\/ in the host\r\nnew ModuleFederationPlugin({\r\n  name: \"host\", \/\/ this also defines the name of the global\r\n  filename: \"container.js\",\r\n  exposes: {\r\n    \".\/AppName\": \".\/src\/app-name.js\"\r\n  },\r\n  shared: {\r\n    react: { singleton: true }\r\n  }\r\n})\r\n\r\n\/\/ in the plugin\r\nnew ModuleFederationPlugin({\r\n  name: \"myPlugin\",\r\n  shared: {\r\n    react: { singleton: true }\r\n  },\r\n  remotes: {\r\n    \/\/ host remote is available in a global variable\r\n    host: \"var host\"\r\n  }\r\n})\r\n```\r\n\r\nin the host HTML make sure to load `container.js` before the `app.js` to make sure it's available for plugins. (or at least before loading plugins)\r\n","@sokra i will answer in multiple parts\r\n\r\none of the main problems with MF is that only works in async mode and if u want to build a component that can be imported in NPM as a package this fails in weird modes because we have to do the bootstrap setup to avoid do the initial load in webpack, and also contain multiple problems like the next\r\n\r\n* as a plugin if i want to consume exposed modules from host i have to load it as \"remote\" but that doesnt make sense because the host is who is LOADING the plugin, and in that moment those modules should be already loaded, to avoid do breaking changes i introduced a new kind of \"remote\" called `host` like the next example\r\n\r\n ```\r\nnew ModuleFederationPlugin({\r\n        name: `PlitziPlugin${PluginName.charAt(0).toUpperCase() + PluginName.slice(1)}Federation`,\r\n        filename: `plitzi-plugin-${PluginName}-federation.js`,\r\n        remotes: {\r\n          plitziSdkFederation: [\r\n            'plitziSdkFederation@host'\r\n          ]\r\n        },\r\n        exposes: {\r\n          Plugin: '.\/src\/component\/index.js'\r\n        },\r\n        shared: {\r\n          react: { singleton: true, requiredVersion: PACKAGE.dependencies.react },\r\n          'react-dom': { singleton: true, requiredVersion: PACKAGE.dependencies['react-dom'] },\r\n          'react-redux': { singleton: true, requiredVersion: PACKAGE.dependencies['react-redux'] }\r\n        }\r\n      })\r\n```\r\nif we can see here, i am telling to webpack that the remote `plitziSdkFederation` is my host and i want to be consumed this as sync way because his exposed modules should be already loaded and this will prevent to load twice the remote because doesnt make any sense\r\n\r\n* second point, shared modules should be loaded in order to be sure that they will be available when plugin modules will be loaded and the way to acomplish this was keeping them as eager mode\r\n\r\n* third point, exposed modules now will be considered shared also, because they will be available always from the host, and for this i introduced a new OPTIONAL way to handle this\r\n\r\n```\r\nnew ModuleFederationPlugin({\r\n        name: 'plitziSdkFederation',\r\n        filename: 'plitzi-sdk-federation.js',\r\n        exposes: {\r\n          '.\/usePlitziServiceContext': { import: '.\/src\/services\/hooks\/usePlitziServiceContext', shared: true },\r\n          '.\/ComponentContext': { import: '.\/src\/modules\/Component\/ComponentContext', shared: true },\r\n          '.\/ComponentProvider': { import: '.\/src\/modules\/Component\/ComponentProvider', shared: true }\r\n        },\r\n        shared: [\r\n          {\r\n            react: { singleton: true, requiredVersion: false, eager: true },\r\n            'react-dom': { singleton: true, requiredVersion: false, eager: true },\r\n            'react-redux': { singleton: true, requiredVersion: false, eager: true }\r\n          }\r\n        ]\r\n      })\r\n```\r\nas we can see i added a new optional attribute called `shared` in exposed modules, so this is telling to webpack that these modules must be available as shared before load any plugin to be sure that they will be available and wont be separated in chunks\r\n\r\nalso i introduced an important change in sharedPlugin where i can be able to share modules across nested bundles compiled to fix the problem with react for example that was crashing with the error `react is duplicated` the common error with hooks\r\n\r\nhttps:\/\/github.com\/webpack\/webpack\/pull\/15271\/files#diff-c3b1610b00ec187ec39f60ef90682220aef7392d2943458cc005d123cbcd8dd9R80 (when nested webpack bundles are compiled for second time, i was able to handle these scenarios to support sharePlugin in a better way)\r\n\r\nall of these changes are optional to grant the functionality in sync scenarios.\r\n\r\nthe main reasons of this change are:\r\n*  MF only works in async mode (host and plugins)\r\n* you cant import a plugin inside another plugin using NPM (the normal way) because the index.js is async loading a bootstrap https:\/\/webpack.js.org\/concepts\/module-federation\/#troubleshooting (this weird way to setup MF using bootstrap.js)\r\n* if i want to have multiple hosts that imports their plugins is not possible because always is loading the host as remote\r\n* i want to be able to load plugins as remote plugins in a controlled way like was suggested in the docs but also i want to have the way to import those plugins as NPM package way \r\n\r\n```\r\n import Plugin from 'pluginA';\r\n<Host>\r\n  <Plugin \/>\r\n<\/Host>\r\n```\r\n\r\n* when plugins are compiled with MF plugin they cant be used like the previous way or forcing me use lazy loads everytime making harder to manage it because the default export is a promise\r\n\r\n\r\nfrom your example, how can you handle the scenario where you have multiple hosts loading the same plugin, and i am asking this because i am building a web\/widgets builder, with the current solution there are many limitations and unnecesary complexity to consume MF\r\n\r\n![Screenshot from 2022-02-23 16-11-42](https:\/\/user-images.githubusercontent.com\/86263126\/155359643-6f9bc4ef-6570-4d26-a2b3-b0740a39a348.png)\r\n\r\ni can continue describing more scenarios where the current implementation is a problem and more benefits if is required to be honest\r\n\r\nNote:\r\n\r\nall changes were added in a way that they are optional so i am keeping back compatibility with legacy MF plugins, also they can continue working in async modes, but with this change now we can support SYNC MF\r\n\r\nScenarios tested\r\n* host1 -> host2 -> plugins\r\n* host2 -> plugins\r\n* host1 load plugins via NPM packages (so they will be consumed in sync way too)\r\n* host1 load host2 via NPM packages and plugins are loaded by host2 in async mode (https:\/\/webpack.js.org\/concepts\/module-federation\/#dynamic-remote-containers)\r\n\r\n@sokra if you have any question please ask me, but i believe that this PR is important","@sokra i had to fix a few problems like sharedPlugin is not working well with nested bundles where i had to do changes in this file\r\nhttps:\/\/github.com\/webpack\/webpack\/pull\/15271\/files#diff-c3b1610b00ec187ec39f60ef90682220aef7392d2943458cc005d123cbcd8dd9R80\r\n\r\nand also the support for host remotes to work in sync way\r\n\r\ncould be solved in a new runtime module plugin but doesnt make sense, this should be fixed in core webpack\r\n\r\n```\r\ngenerate() {\r\n    const { compilation } = this;\r\n    const { runtimeTemplate } = compilation;\r\n\r\n    return Template.asString([\r\n      `\r\n        debugger;\r\n        console.log(${RuntimeGlobals.shareScopeMap});\r\n        console.log(eval('${RuntimeGlobals.shareScopeMap}'));\r\n        if (eval('typeof ${RuntimeGlobals.require} !== \"undefined\"') && eval('${RuntimeGlobals.shareScopeMap}')) {\r\n          ${RuntimeGlobals.shareScopeMap} = eval('${RuntimeGlobals.shareScopeMap}');\r\n        }\r\n      `\r\n    ]);\r\n  }\r\n```\r\nthis is just an example\r\n\r\nif we remember `RuntimeGlobals.shareScopeMap` in nested bundles internally is renamed, so im doing this memory pointer relation there, so now my nested bundle will have access to parent shared modules like `react`"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"Preserve star exports for externalized dependencies in module output","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n**What is the current behavior?**\r\nWhen code contains exports from externalized libraries, the export statements are not preserved in output when they should be.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nSimple isolated repro (with details in the README): https:\/\/github.com\/dzearing\/test-webpack-esm\r\n\r\nWe bundle a simple entry point which contains:\r\n\r\n```js\r\nexport * from '@fluentui\/utilities';\r\n```\r\n\r\nWe turn on `output.library.type=\"module\"` in the webpack config and mark the library as external. The bundle preserved should still emit the export. Instead it contains a bunch of unexpected content:\r\n\r\n```js\r\nimport*as e from\"@fluentui\/utilities\";var r={d:(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r)};r.d({},{});\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe output should match the input and export * from the library.\r\n\r\nwebpack version:  5.67.0\r\nNode.js version:  16.13.1\r\nOperating System: Windows 11\r\n","comments":["Can you clarify? Do you expected output as in source file? If yes, there is issue https:\/\/github.com\/webpack\/webpack\/issues\/2933, currently we don't support output without runtime code, if you expected reexport, there is bug...","Hi Everyone , Its Adesh here Actually I want contribute to this project but there is was not any good first issue label in the repository can anyone please help me in this?\r\n","@alexander-akait to clarify:\r\n\r\nThis is certainly related to #2933 in that I'm enabling the experimental module output. I did expect a re-export, and I'm just filing the bug to track that external libraries are not re-exported, when they should be.\r\n\r\nThe repro link I've included is a very trimmed down example so, while the actual repro is a little more involved, this scenario is greatly simplified:\r\n\r\n1. Bundle (using `module` output) a file which has the line `export * from 'some-library';`\r\n2. Normally, this would produce a bundled JS containing all the content from `some-library`, however our config marks `some-library` as external, so bundling it should preserve the export.\r\n\r\nThe use case for this is that we will load the produced ESM in the browser, and use an import-map to resolve `some-library` from another location. This allows us to switch the resolution on the fly via url change.\r\n\r\nWhen we bundle it, the word `export` does not even exist in the ESM, effectively making the bundle useless in the browser because the expected named exports are missing.\r\n\r\nThis is also an issue with ESBuild, you can read about that issue here: https:\/\/github.com\/evanw\/esbuild\/issues\/1737\r\n","Yep, there is limitation, shorty - we don't know exported names because you use `*` and we can't recreate export (there is no in JS `export * from myObjectWithExports;`), in theory we can do deep analyze and recreate it, but it will be with limitations (if library add new export we will not re export it and recreation increases size of bundle very), looks like esbuild uses the same approach\r\n\r\nAnother approach - avoiding runtime and just keep `export * from \".\/something.js\";` but it is bit tricky ","The scenario where we use this is:\r\n\r\n* We have a component library consists of many components. Each component is in a separate package.\r\n* App devs just import { Button } from component library.\r\n* The component library has something like `export * from 'button-package';`\r\n\r\nWhen we bundle the library, but externalize `button-package`, apps can no longer import `{ Button }` from the library.\r\n\r\nIt looks like named exports will address. If I say `export { Button } from 'button-package'`, it looks like the webpack output will try and import * from the library, and then explicitly export the named thing.\r\n\r\nSo the workaround is; don't export * from a library, but use named exports. (This is a better practice anyway.) I think we can use a lint rule to enforce this. I still think it would still be correct to preserve the star export if possible.","I understand what you want to achieve, but currently only one workaround - named export  ","Thanks @alexander-akait for the input and help. I've adjusted the title to fit more; either we can use this to track the specific ask, or close if it's already tracked in the module support issue.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["bug","enhancement","webpack-5"]},{"title":"Experimental native CSS runtime\/loader throws error on async entry points","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\nThanks for the great work on #14893, @sokra. I was recently testing it and it looks very promising.\r\n\r\nHowever, I did find a quirk when trying to use the resulting bundle using `<script async>`.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nSuppose I have the following config:\r\n\r\n```javascript\r\nmodule.exports = {\r\n\tdevtool: false,\r\n\tentry: {test: path.resolve('.\/src\/test.js')},\r\n\toutput: {\r\n\t\tpath: path.resolve('.\/dist'),\r\n\t},\r\n\texperiments: {\r\n\t\tcss: true,\r\n\t},\r\n};\r\n```\r\n\r\nAnd two files, `src\/test.js`:\r\n\r\n```javascript\r\nimport '.\/test.css';\r\n```\r\n\r\nand `src\/test.css`:\r\n\r\n```css\r\n.example {\r\n\tfont-weight: 800;\r\n}\r\n```\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nUsing webpack 5.67.0, this will create a `dist\/test.css` with my CSS contents and a `dist\/test.js` that also contains a `__webpack_require__` call:\r\n\r\n```javascript\r\n__webpack_require__(\/*! .\/test.css *\/ \".\/src\/test.css\");\r\n```\r\n\r\nHowever, this call will only succeed if the CSS has already been loaded. Otherwise, it will fail with:\r\n\r\n```\r\nUncaught TypeError: __webpack_modules__[moduleId] is not a function\r\n    __webpack_require__ \/dist\/test.js:23\r\n    <anonymous> \/dist\/test.js:166\r\n    <anonymous> \/dist\/test.js:171\r\n```\r\n\r\nWhen the JS is loaded using `async`, the chances of this are about 50:50 (even when the `<script>` tag for the JS is after the `<link>` for the CSS.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nI would assume the whole `__webpack_require__` call could be dropped since the entrypoint CSS is supposed to be a static include anyway (it would be a different story for a lazily-loaded chunk \u2013 which, by the way, seems to always work correctly).\r\n\r\nBut even if the `__webpack_require__` call is there to ensure the CSS gets loaded, it currently doesn\u2019t do that, which seems to be a bug.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.67.0\r\nNode.js version: 14.17.1\r\nOperating System: WSL2\r\nAdditional tools: N\/A\r\n","comments":["The css support requires that CSS has been loaded (in a render blocking way) before JS is executed. (currently)\r\n\r\nThe ` __webpack_require__(\/*! .\/test.css *\/ \".\/src\/test.css\")` is correct that way, at least with the current implementation. It might return CSS Module class name mappings","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["question","webpack-5"]},{"title":"test: Failing test case for missing exports when using ImportNamespaceSpecifier","body":"Failing test for https:\/\/github.com\/webpack\/webpack\/issues\/14814\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nNo change, only tests\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes\r\n\r\n**Does this PR introduce a breaking change?**\r\n \r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNothing\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers are authorized under a signed CLA.<ul><li>:white_check_mark:  Sebastian Silbermann (006ca7fb06c5b6304804371e794105336225fae7)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed"]},{"title":"Add typedef for `ResolveData[\"createData\"]`","body":"Fixes #15112\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nInternal type documentation. Only external impact should be consumers of `types.d.ts` who will now have more accurate typing.\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNo - not entirely sure if that's applicable here. Happy to add any if there's particular areas which are testable here.\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nPotentially for Typescript users who consume types for affected hooks (i.e. `NormalModuleFactory`'s `createModule` and `module` hooks) and incorrectly read properties from `createData`.\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nn\/a\r\n\r\n## Lingering issues\r\n\r\nI've opened this as a draft PR since these changes have surfaced a type error:\r\n\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/ccecc17c01af96edddb931a76e7a3b21ef2969d8\/lib\/NormalModuleFactory.js#L750-L764\r\n\r\n```\r\nType '{}' is missing the following properties from type 'NormalModuleCreateData': type, request, userRequest, rawRequest, and 9 more.ts(2740)\r\n\r\nNormalModuleFactory.js(78, 4): The expected type comes from property 'createData' which is declared here on type 'ResolveData'\r\n```\r\n\r\nThe error is correct - according to the typing of `ResolveData`, the initial `resolveData` object _should_ have a fully complete `createData` object. Any suggestions on how to best address this? Perhaps there's some reasonable defaults that can be applied here?","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers are authorized under a signed CLA.<ul><li>:white_check_mark:  Chris Santamaria (3dc4ad657356138a610b7df04bdf3bdc9bbb6982)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"Module Federation shared some dependencies, the module type is not correct when require the shared dependency in the module where in node_modules ","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n# **What is the current behavior?**\r\nThe compiled code didn't recognize the \"[vue](https:\/\/github.com\/vuejs\/vue)\"  type correctly in \"[vue-demi](https:\/\/github.com\/vueuse\/vue-demi)\" and \"[@vue\/composition-api](https:\/\/github.com\/vuejs\/composition-api)\" When I shared the \"[vue](https:\/\/github.com\/vuejs\/vue)\" module\r\n> The host app webpack config\r\n```js\r\n    new ModuleFederationPlugin({\r\n      remotes: {\r\n        remote_mf: \"remote_mf@http:\/\/localhost:3001\/remoteEntry.js\",\r\n      },\r\n      shared: [\"vue\", \"@vue\/composition-api\"],\r\n    }),\r\n```\r\n> The remote app webpack config\r\n```js\r\n    new ModuleFederationPlugin({\r\n      name: \"remote_mf\",\r\n      filename: \"remoteEntry.js\",\r\n      library: { type: \"var\", name: \"remote_mf\" },\r\n      exposes: {\r\n        \".\/component\": \".\/src\/components\/index.js\",\r\n      },\r\n      shared: [\"vue\", \"@vue\/composition-api\"],\r\n    }),\r\n```\r\n\r\n![shard-vue](https:\/\/user-images.githubusercontent.com\/12776732\/147397805-aa3b7852-f98a-49e3-aaaa-05026ad3bdde.png)\r\n\r\n\r\n# **If the current behavior is a bug, please provide the steps to reproduce.**\r\n### Step1: clone the repository\r\n```bash\r\ngit clone git@github.com:zhuoqi-chen\/Vue-Module-Federation-Demo.git \r\ncd Vue-Module-Federation-Demo && git checkout bad-case\r\nyarn & yarn bootstrap\r\nyarn start\r\n```\r\n### Step2: Close Chrome \"Enable JavaScript source map\" setting\r\n![image](https:\/\/user-images.githubusercontent.com\/12776732\/147397957-ea3056fb-32ff-4698-b63e-10038a2c4d56.png)\r\n\r\n### Step3: View host app **http:\/\/localhost:8081\/**,  look at the error in console tab.\r\n![image](https:\/\/user-images.githubusercontent.com\/12776732\/147398239-58e02d02-f545-494c-a674-fdda9d975b81.png)\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n# **What is the expected behavior?**\r\nshould add \"default\" property\r\n![no-shared-vue](https:\/\/user-images.githubusercontent.com\/12776732\/147398010-190f8fb5-c804-4169-84a4-5861f43551bb.png)\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.65.0\r\nNode.js version:  v14.17.5\r\nOperating System: macOS\r\nAdditional tools: Chrome\r\n","comments":["<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","So the problem is not solved? @webpack-bot "],"labels":["bug","webpack-5"]},{"title":"Async modules not resolved correctly with module federation","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nasync modules (e.g. using top-level-await) are resolved into promise by Module Federation\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nhttps:\/\/github.com\/vincenthend\/webpack-module-federation-async-modules\r\nRepo above is two webpack apps using module-federation\r\n`main-app` is importing a function from `component-app`, where there is a top-level-await in the imported module.\r\n\r\nThe imported module is resolved as Promise instead of object (even if using `import` syntax)\r\n![image](https:\/\/user-images.githubusercontent.com\/23435348\/147226375-f98c2402-c195-4d24-8bb5-78d4ab63dad4.png)\r\n\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nImported modules from module federation should resolve normally whether it's async modules or not\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.61.0\r\nNode.js version: 14.8\r\nOperating System: macOS 10.15\r\nAdditional tools: -\r\n","comments":["Yep, sounds like a bug","![imagen](https:\/\/user-images.githubusercontent.com\/19596334\/147315828-1961a663-b383-4260-9b55-89500c3ea1dd.png)\r\n![imagen](https:\/\/user-images.githubusercontent.com\/19596334\/147315835-724f8afa-a92f-4cef-b585-536218628025.png)\r\n![imagen](https:\/\/user-images.githubusercontent.com\/19596334\/147315842-8c90fc0e-1c56-44d7-83ec-e7f0aaeac7fd.png)\r\n\r\nIm seeing the same behaviour on a Next.js app","@jorgev259 No need to duplicate, on the top we have example of the problem ","It seems the top-level-await should be placed in your `main-app` instead of `component-app` according to the [doc](https:\/\/webpack.js.org\/concepts\/module-federation\/#offer-a-host-api-to-set-the-publicpath).","> It seems the top-level-await should be placed in your `main-app` instead of `component-app` according to the [doc](https:\/\/webpack.js.org\/concepts\/module-federation\/#offer-a-host-api-to-set-the-publicpath).\r\n\r\nThis solution is different from the expected behavior above. Normal import statement should work normally (no await needed) for async modules as stated [here](https:\/\/webpack.js.org\/blog\/2020-10-10-webpack-5-release\/#async-modules).\r\n\r\nWhile for now, if the async module is within module federation, it resolves into a promise","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","> ![imagen](https:\/\/user-images.githubusercontent.com\/19596334\/147315828-1961a663-b383-4260-9b55-89500c3ea1dd.png)\r\n\r\nWhen working with async modules you need to make sure that your are working only with ESM imports. And also make sure to not accidentically transpile them (via babel) to CommonJs (as shown in the screenhot, `(0, _utils).hasRole` is how babel transpiles imports)","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Imported modules from module federation should resolve normally whether it's async modules or not\r\n\r\n> # Bug report\r\n> **What is the current behavior?** async modules (e.g. using top-level-await) are resolved into promise by Module Federation\r\n> \r\n> **If the current behavior is a bug, please provide the steps to reproduce.** https:\/\/github.com\/vincenthend\/webpack-module-federation-async-modules Repo above is two webpack apps using module-federation `main-app` is importing a function from `component-app`, where there is a top-level-await in the imported module.\r\n> \r\n> The imported module is resolved as Promise instead of object (even if using `import` syntax) ![image](https:\/\/user-images.githubusercontent.com\/23435348\/147226375-f98c2402-c195-4d24-8bb5-78d4ab63dad4.png)\r\n> \r\n> **What is the expected behavior?** Imported modules from module federation should resolve normally whether it's async modules or not\r\n> \r\n> **Other relevant information:** webpack version: 5.61.0 Node.js version: 14.8 Operating System: macOS 10.15 Additional tools: -\r\n\r\nI have the same problem, it seems to be a bug?","any work arounds here?"],"labels":["bug","inactive","webpack-5"]},{"title":"Using ProgressPlugin with MiniCssExtractPlugin causes FS cache pack to be invalidated","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nIt appears that when using `ProgressPlugin`, `MiniCssExtractPlugin` and File System cache, the first cache pack gets invalidated with the following reason `Pack got invalid because of write to: ProgressPlugin|counts` \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n```js\r\nconst { resolve } = require(\"path\");\r\nconst { ProgressPlugin } = require(\"webpack\");\r\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\r\n\r\nmodule.exports = {\r\n  mode: \"development\",\r\n  entry: {\r\n    styles: [\".\/style.css\"],\r\n  },\r\n  output: {\r\n    path: resolve(__dirname, \"dist\"),\r\n    filename: \"[name].js\",\r\n  },\r\n  plugins: [new MiniCssExtractPlugin(), new ProgressPlugin()],\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: \/\\.css$\/i,\r\n        use: [MiniCssExtractPlugin.loader, \"css-loader\"],\r\n      },\r\n    ],\r\n  },\r\n  infrastructureLogging: {\r\n    level: \"verbose\",\r\n  },\r\n  cache: {\r\n    profile: true,\r\n    type: \"filesystem\",\r\n    maxMemoryGenerations: 1,\r\n  },\r\n};\r\n\r\n```\r\n\r\n```\r\n\u279c  webpack-test yarn webpack              \r\n$ \/Users\/cli-reproductions\/webpack-test\/node_modules\/.bin\/webpack\r\n    [webpack-cli] Compiler starting... \r\n    [webpack-cli] Compiler is using config: '\/Users\/cli-reproductions\/webpack-test\/webpack.config.js'\r\n<t> [webpack.cache.PackFileCacheStrategy] restore cache container: 35.202082 ms\r\n    [IdleFileCachePlugin] Initial cache was generated and cache will be persisted in 5s.\r\n    [webpack-cli] Compiler finished\r\n    [webpack.cache.PackFileCacheStrategy] Pack got invalid because of write to: ResolverCachePlugin|normal|dependencyType=|esm|path=|\/Users\/cli-reproductions\/webpack-test|request=|.\/style.css\r\n    [webpack.cache.PackFileCacheStrategy] Storing pack...\r\n<t> [webpack.cache.PackFileCacheStrategy] resolve build dependencies: 762.821528 ms\r\n<t> [webpack.cache.PackFileCacheStrategy] snapshot build dependencies: 21.222197 ms\r\n    [webpack.cache.PackFileCacheStrategy] 27 fresh items in cache put into pack 0\r\n<t> [webpack.cache.PackFileCacheStrategy] store pack: 27.86769 ms\r\n    [webpack.cache.PackFileCacheStrategy] Stored pack (27 items, 1 files, 0 MiB)\r\nasset styles.js 2.03 KiB [compared for emit] (name: styles)\r\nasset styles.css 222 bytes [compared for emit] (name: styles)\r\nEntrypoint styles 2.25 KiB = styles.css 222 bytes styles.js 2.03 KiB\r\norphan modules 2.76 KiB (javascript) 937 bytes (runtime) [orphan] 7 modules\r\nruntime modules 274 bytes 1 module\r\ncacheable modules 50 bytes (javascript) 21 bytes (css\/mini-extract)\r\n  .\/style.css 50 bytes [built] [code generated]\r\n  css .\/node_modules\/css-loader\/dist\/cjs.js!.\/style.css 21 bytes [built] [code generated]\r\nwebpack 5.64.4 compiled successfully in 281 ms\r\n\u2728  Done in 1.69s.\r\n\r\n\r\n\u279c  webpack-test yarn webpack \r\n$ \/Users\/cli-reproductions\/webpack-test\/node_modules\/.bin\/webpack\r\n    [webpack-cli] Compiler starting... \r\n    [webpack-cli] Compiler is using config: '\/Users\/cli-reproductions\/webpack-test\/webpack.config.js'\r\n<t> [webpack.cache.PackFileCacheStrategy] restore cache container: 59.647659 ms\r\n<t> [webpack.cache.PackFileCacheStrategy] check build dependencies: 43.416812 ms\r\n<t> [webpack.cache.PackFileCacheStrategy] restore cache content metadata: 2.01511 ms\r\n    [webpack.cache.PackFileCacheStrategy] starting to restore cache content 0 (32.8 KiB) because of request to: ProgressPlugin|counts\r\n<t> [webpack.cache.PackFileCacheStrategy] restore cache content 0 (32.8 KiB): 10.16656 ms\r\n    [IdleFileCachePlugin] Initial cache was generated and cache will be persisted in 5s.\r\n    [webpack-cli] Compiler finished\r\n    [webpack.cache.PackFileCacheStrategy] Pack got invalid because of write to: ProgressPlugin|counts\r\n    [webpack.cache.PackFileCacheStrategy] Storing pack...\r\n    [webpack.cache.PackFileCacheStrategy] 1 fresh items in cache put into pack 1\r\n<t> [webpack.cache.PackFileCacheStrategy] store pack: 48.41304 ms\r\n    [webpack.cache.PackFileCacheStrategy] Stored pack (27 items, 2 files, 0 MiB)\r\nasset styles.js 2.03 KiB [compared for emit] (name: styles)\r\nasset styles.css 222 bytes [compared for emit] (name: styles)\r\nEntrypoint styles 2.25 KiB = styles.css 222 bytes styles.js 2.03 KiB\r\ncached modules 50 bytes (javascript) 21 bytes (css\/mini-extract) 274 bytes (runtime) [cached] 3 modules\r\nwebpack 5.64.4 compiled successfully in 278 ms\r\n\u2728  Done in 0.94s.\r\n```\r\n\r\n**What is the expected behavior?**\r\nI expect that since the are no file changes the pack is not invalidated. \r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.65.0\r\nNode.js version: 14.18.1\r\nOperating System: darwin x64\r\nAdditional tools:\r\n","comments":["Yep, bug, thanks for issue","> Pack got invalid because of write to: ProgressPlugin|counts\r\n\r\nThe progress plugin caches the module count when it changes. Somehow it seem to unexpectedly change...","I believe this is a bug in LoaderPlugin not calling `processModuleDependencies` when using `loaderContext.importModule` (used in MiniCssExtractPlugin).\r\n\r\nWe can narrow it down to this location by noting this bug isnt present when `experimentalUseImportModule = false`.\r\n\r\nSince css-loader is injecting other imports (`css-loader\\\\dist\\\\runtime\\\\api.js`, etc), they need to be accounted for in the packs, else on future runs (when `styles.css` is unchanged -> cached -> doesnt run through `pitch` of `MiniCssExtractPlugin.loader`), these dependencies show up as not previously known (in this case, via `ProgressPlugin` not seeing any build for these modules).\r\n","Yep, I think you are right","i cant build any new project on this webpacks version, cause says: TypeError: MiniCssExtractPlugin is not a constructor, what can i do?","Is there a workaround for this?","using `experimentalUseImportModule=false` in mini-css should help.","this should be solved another way around.. `this.importModule` should not \"count\" as module, e.g. scenario\r\n\r\n`module A` => `module B` ( loader `importModule` `module C`)\r\n\r\nhere on second build we have only `A` and `B` modules.. (modules are in cache already builded)","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","This is still very much an issue.\r\n\r\nsee https:\/\/github.com\/angular\/angular-cli\/issues\/24179\r\n\r\n"],"labels":["bug","webpack-5"]},{"title":"Add ability to rename asset module for code generation (Loader API, image conversion issues)","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nEdit: The goal is to implement new API to be able to rename the output file e.g. in an image optimization loader, which can convert the source image to different format and return that as its result (need to change [ext]). Current solutions for this situation are based on the [deprecated](https:\/\/webpack.js.org\/api\/loaders\/#this_module) `this._module` and overwriting `this.resourcePath` , `this._module.matchResource`. See [the idea of the new \"resourceURL\"](https:\/\/github.com\/webpack\/webpack\/issues\/14851#issuecomment-986040540) below, which could be used for code generation, if it was provided by module (i.e. loader sets it).\r\n\r\n~~Be able to define custom placeholders when developing loaders. Consider these custom placeholders `[width]` and `[newext]` in an image loader plugin which can convert and resize:~~\r\n```js\r\n{\r\n  test: \/\\.(jpe?g|png|webp|avif|tiff)$\/i,\r\n  type: 'asset',\r\n  generator: {\r\n    filename: '[name]-[width]-[hash].[newext]'\r\n  },\r\n  use: [\r\n    {\r\n      loader: path.resolve(__dirname, 'MyImageLoader.js'),\r\n      options: {}\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nThink of a custom image loader which can resize and convert images e.g. from CSS urls like `some.jpg?format=webp&width=800`. Now I can only change the output file extension in my Webpack config like this:\r\n\r\n```js\r\n  generator: {\r\n    filename: (pathData) => {\r\n      \/\/ get query params for the current file (e.g. ?format=webp)\r\n      const info = pathData.module.resourceResolveData;\r\n      const params = new URLSearchParams(info.query);\r\n\r\n      \/\/ determine the new output file extension\r\n      const format = params.get('format') || path.extname(info.path).split('.').pop();\r\n\r\n      \/\/ default filename\r\n      let fileName = '[name].[contenthash:8][ext]';\r\n\r\n      \/\/ change the extension to the converted format\r\n      format && (fileName = fileName.replace(\"[ext]\", `.${format}`));\r\n\r\n      return fileName;\r\n    }\r\n  },\r\n```\r\n\r\nOf course this should be done by the loader itself, but it can't because `this._module` [is deprecated](https:\/\/webpack.js.org\/api\/loaders\/#this_module) and this would be an ugly hack.\r\n\r\nMaybe it's my lack of knowledge but currently I can't find an elegant way to let the converted image file emitted with the new extension and at the same time properly rewrite the url in CSS to the converted output. AFAIK **`[ext]`** cannot be overwritten, that's why I started thinking on custom placeholders, because in my case my own `[newext]` placeholder could solve this problem nicely. \r\n\r\nWith `loaderContext.emitFile`  I was able to emit the converted file with proper extension, but I was no able to change the url in CSS with `this.callback(null, 'newfilename')`. When I avoid `emitFile` and return the buffer with the converted file in the async callback then the url in CSS is OK, but the extension remains the old one.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nMaybe some new function to `loaderContext` \/ `this` like `setCustomPlaceholder(name, value)`, but it's just a sudden idea.\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nUnfortunately I'm not at that level...\r\n","comments":["Sorry out of scope, you can implement own logic using `Function`","And by default we keep query param, and you can rename `this.resourcePath` to enforce new extension","> And by default we keep query param, and you can rename `this.resourcePath` to enforce new extension\r\n\r\n@alexander-akait Sad to hear that this got rejected but I accept that it's not a priority thing. Also thank you for the hints on the workaround, I've already tried that but without success. What's worse is that after 2 days of hunting some relevant docs on Webpack documentation pages, searching on Google, examining similar packages on NPM, I still haven't find a working solution for this problem, even though I tried lots of variations in my code. Many similar packages are for Webpack 4 and they are using some hacks with `file-loader` but as I'm using Webpack 5, where `file-loader` is deprecated, I would like to have a solution only using Asset Modules. Other packages are just doing optimizations on the images and doesn't want to let the output file a different format or name.\r\n\r\n**In fact, my real problem is that it is not documented anywhere how to alter the output filename ([name] and [ext]) inside a loader.** Asking for some more guidance here is my last try on this task (normally I would never ask this here on GitHub). \r\n\r\n**Source SCSS:**\r\n```css\r\n.webp section.hero {\r\n  background-image: url(\"\/assets\/images\/bg-hero.jpg?format=webp&width=1200\");\r\n}\r\n```\r\n\r\n**Desired output in Webpack build destination - output - dir based on `[name].[contenthash:8][ext]`:**\r\nbg-hero-1200-81af97af.webp\r\n\r\n**Final URL in the output CSS file:**\r\n`background-image: url(\"\/build\/bg-hero-1200-81af97af.webp\");`\r\n\r\nMy async loader:\r\n- based on the query params it can build the desired output name like: `bg-hero-1200-81af97af.webp`\r\n- it does the conversion with Sharp\r\n- has the result converted and resized image in a buffer\r\n- need to let Asset Module emit the result file with that new name and extension to the output dir\r\n- need to change the url in CSS to this new filename\r\n\r\nThe problem:\r\n- just sending back `callback(null, buffer);` will keep the original filename for the emitted file and in CSS either.\r\n- calling `this.emitFile` can write the output file with new name, but CSS url cannot be changed. Also I think the preferred way should be the callback method. Also if `Rule.generator.emit` is not disabled, an extra file gets created.\r\n- altering `this.resourcePath` or `this.resource` not working (also is documented nowhere)\r\n- The docs says that async loaders have to send back `return undefined` so that `return module.export = __webpack_public_path__ + JSON.stingify(newURL)` thing - which is also not documented anywhere - cannot be used I assume. I've tried it but didn't work either.\r\n\r\n**The only working solution:**\r\nUsing a custom `Rule.generator.filename` in `webpack.config.js`, like I presented in the first post \/ 2nd code block. That way the output file can be renamed how I want and the url in CSS will automatically updated by Webpack with the name returned in that function. All is fine, but this logic should be inside my loader.\r\n\r\nSo... how to alter output **[filename]** and **[ext]** inside a loader for the current `asset` ?\r\n\r\n\r\n","We are working on the same https:\/\/github.com\/webpack-contrib\/image-minimizer-webpack-plugin (right now), anyway it should not introduce new placeholders, because it is impossible (we don't know about module, it can be any type), and very dirty solution.\r\n\r\n> `altering this.resourcePath or this.resource not working (also is documented nowhere)\r\n\r\nIt should work (was tested)\r\n\r\nYou want to change module resource path (extension, but it is only edge case, if we are looking on the problem more deeply, developer can change any place, not only extension), also don't forget about module can be outputed as base64, so no extension here, for this we need something like virtual modules, because original module still can be request in other part in your application and we can't just rename it.\r\n","Thank you. I used that plugin before (and many other Imagemin based), but because `npm install` containing `imagemin` takes ages to run, I moved to Sharp (ways faster). Build time matters for e.g. static site builds on Netlify and others.","We can create `sharp` minimizer and generator, it should be not hard, feel free to open an issue, also in roadmap move imagemin in deps, so developer will choose what they want to use","@alexander-akait I'm really sorry, I know that GitHub is not a support forum, but please let me ask one final question related to this thread because I'm totally clueless and wasn't able to find any documentation in the last 5 days. I'm trying to achieve something similar but in a different way.\r\n\r\nIn my async loader's callback I'm sending the new image as a Buffer and a generated metaData like this:\r\n```js\r\n\/\/ result.imageBuffer is the new image as a Buffer\r\n\/\/ result.metaData object stores the new width, height, mimetype, ext, etc...\r\ncallback(null, resultImageBuffer, null, resultMetaData);\r\n```\r\n...and in my Webpack config, I have a Rule using my loader like this:\r\n```js\r\n{\r\n  test: \/\\.(jpe?g|png|webp|avif|tiff)$\/i,\r\n  type: 'asset',\r\n  generator: {\r\n    filename: (pathData) => {\r\n      \/\/ console.debug(pathData);\r\n      \/\/ console.debug(pathData.module);\r\n\r\n      let filename = '[name][width][height].[contenthash:8][ext]';\r\n\r\n      \/\/ now I need to somehow access my resultMetaData\r\n      \/\/ to let [width] replaced by metaData.width\r\n      \/\/ to let [height] replaced by metaData.height\r\n      \/\/ to let [ext] replaced by metaData.ext (the ext of the converted file)\r\n      \/\/ ...but it seems impossible...\r\n\r\n      return filename;\r\n    }\r\n  },\r\n  use: [\r\n    {\r\n      loader: require.resolve('.\/MyImageLoader.js'),\r\n      options: { \/* some options *\/ }\r\n    }\r\n  ]\r\n}\r\n```\r\nI just can't believe that there's no way to access my `resultMetaData` in `Rule.generator.filename` (being a function)... If it's not implemented yet, then should I open a new feature request for this? Or am I on a totally wrong way? I'm not an expert bot also not a newbie to JS and Webpack but this one is completely driving me crazy... \ud83d\ude1e There's no page of the Webpack docs that I have not read so far... \r\n\r\nI'm already opened a [Stackoverflow question](https:\/\/stackoverflow.com\/questions\/70218071\/how-to-access-metadata-in-rule-generator-filename-as-function-generated-in-the) too, but I don't expect any usable answer soon (if any...)","I think I am wrong, here my solution https:\/\/github.com\/webpack-contrib\/image-minimizer-webpack-plugin\/blob\/master\/src\/loader.js#L142, but it is very dirty, we need API to rename module (and change other parts like `resourceQuery`, `resourceHash` and etc), let's open this as feature request, but not as adding ability to use `[newext]`, but how ability to rename module (`resourcePath`\/etc of the module)","Thank you. I was aware of `this._module` but as it's deprecated, I don't want to use it. I'm happy that you agree that some new API is needed, but I not exactly understand the renaming thing you mentioned. I assume that normally `resource` and `resourcePath` are referencing to some **existing** source file - which initially triggered the loader - and renaming\/overwriting them would make them not existing (e.g. for upper loaders in the chain). Is that ok? Would not this bring in new problems?\r\n\r\nThis all is not in issue for image optimization loaders, because extension and mimetype won't change after optimization. But if a loader returns a `Buffer` with new image type, the `[ext]` placeholder and the initial `mimetype` gets invalid for [filename](https:\/\/webpack.js.org\/configuration\/module\/#rulegeneratorfilename) and [base64 dataUrl generation](https:\/\/webpack.js.org\/configuration\/module\/#ruleparserdataurlcondition) for Asset Modules. This is the real problem and unfortunately a complex one.\r\n\r\nI know that the loader could save the converted file with `this.emit` with any name, but in this case `Rule.generator.emit` has to be disabled and the there's still the problem of renaming the resource for correct Asset Module filename generation... (e.g. to let the `background: url()` in CSS to be actualized to the manually emitted file)\r\n\r\n\r\n\r\n","> I assume that normally resource and resourcePath are referencing to some existing source file - which initially triggered the loader - and renaming\/overwriting them would make them not existing (e.g. for upper loaders in the chain). Is that ok? Would not this bring in new problems?\r\n\r\nWe have resolved path to real file and currently `resourcePath` used only for code generation, so if you change something in `resourcePath`, it will change only generated code, anyway there is bottleneck - logic in non official loaders can be different and can be broken. So we need something new in webpack to avoid it, maybe `this.virtualResource` and webpack will use it for code generation instead of `resource`\/`resourcePath` and other (just idea).\r\n\r\n> This all is not in issue for image optimization loaders, because extension and mimetype won't change after optimization. But if a loader returns a Buffer with new image type, the [ext] placeholder and the initial mimetype gets invalid for filename and base64 dataUrl generation for Asset Modules. This is the real problem and unfortunately a complex one.\r\n\r\nYou need change mimetype in your loader too, I want to say it is expected, if you change something, you need change not only buffer, webpack doesn't know about mimetype nothing, now you can do it only using https:\/\/github.com\/webpack-contrib\/image-minimizer-webpack-plugin\/blob\/master\/src\/loader.js#L155, but it is dirty workaround (try it)\r\n\r\n> I know that the loader could save the converted file with this.emit with any name, but in this case Rule.generator.emit has to be disabled and the there's still the problem of renaming the resource for correct Asset Module filename generation... (e.g. to let the background: url() in CSS to be actualized to the manually emitted file)\r\n\r\nIt is wrong usage, `this.emit` adds asset to module, but there is module as asset, I want to say it is wrong direction, for example JS\/CSS\/HTML can contains assets, so module has assets, but `image.png` can't contains assets, because it is already asset... You should avoid using `this.emit`, because it will not work for code generation (as you write it here), this problem related to initial problem - ability to change module resource.\r\n\r\nAnyway I see we have very complex and unpredictable logic, maybe we should move ahread and do some things better:\r\n1. Introduce the new property - `resourceURL`, store only URLs there (i.e. regular paths are converting to `file:\/\/\/`, Node.js allows to use it in most of std API, `data`\/`file:`\/`http:`\/etc stored as is), i.e. we will store `new URL(...)` result there, to avoid performance problem we can use `getter`, JS ecosystem is moving to using URLs, so I think we should do the same\r\n2. Allow to change any part of `resourceURL` and it will be easy, because we have result of the `new URL(...)` parsing\r\n3. webpack uses `resourceURL` for code generation, if it was provided by module (i.e. loader sets it)\r\n\r\nSo we solved two problems - standardized and simplify logic using `resourceURL` and allow to rename module (also no `virtualResource`).\r\n\r\nAlso not fake virtual modules and hacks for them, if you want to have virtual modules, you need to pass\/rename module to `data:` URI and it will be like virtual module (we have requests on this feature).\r\n\r\n","Thank you very much for your time and efforts on this!! I like the idea of `resourceURL`, actually, I'm already using this in my loader with the `file:` protocol (default), as you mentioned. \"_Allow to change any part of `resourceURL`_\" seems to be an effective and elegant solution.\r\n\r\nPreviously you mentioned that a new feature request should be opened for this. Do you still want me to open one or are you willing to do that? Maybe you could describe this problem - and your idea - more properly. As you said, `image-minimizer-webpack-plugin` suffers from this deficiency either... (dirty code, deprecated API usage). As you wish - I understand if you are busy.\r\n\r\nAs for my original problem, looking at your code - thanks! - I decided to refactor my loader (remove my custom workarounds) and start using `this._module` (overwriting `resourcePath` and `matchResource`) as you confirmed that currently there's no existing API for this renaming issue. Now there's hope, so until then it will be fine. Hopefully, the deprecated `this._module` won't be removed sooner.","> Do you still want me to open one or are you willing to do that?\r\n\r\nLet's keep open this issues, because we have context of the problem here and ideas how we can fix it, this will allow you not to lose something. Yes, I hope we will improve API in near future, because we need this for official solutions too. \r\n\r\n> Hopefully, the deprecated this._module won't be removed sooner.\r\n\r\n`this._module` will be never removed due compatibility problems between versions, so you can use it when you don't have other solutions (anyway I prefer say to do not use if you have good API)","> Let's keep open this issues, because we have context of the problem here and ideas how we can fix it, this will allow you not to lose something.\r\n\r\nOkay. What about the original title? Shouldn't at least that be renamed to something more relevant? (Any tip for a good one? - if you think so)\r\n\r\n> Yes, I hope we will improve API in the near future because we need this for official solutions too.\r\n\r\nThis is good news. Thank you very much!","> Okay. What about the original title? Shouldn't at least that be renamed to something more relevant? (Any tip for a good one? - if you think so)\r\n\r\nYep, this can be changed :+1: ","@alexander-akait what should we do here?","@vankop There are two ideas:\r\n1. Refactor code using `file:\/\/\/` (so inside webpack we will work only with URL and allow to change it, like other platform starts to do - Node.js\/Deno), but it is tricky and require a lot of refactor (maybe we should to do it\/think about it in v6?), current;y we have `resource`\/`resourcePath`\/`resourceQuery`\/`resourceFragment` and more inside code, also we start to supports http\/https\/file\/data protocols, it complicates DX experience and do code more complex\r\n2. Implement new property in loader context and allow, set it by default on `resourcePath`, and allow to change it in loader context, if it was changed we will use it as filename for asset loader (and not only), the main problem - we have `image-minimizer-webpack-plugin` and we need rename `image.png` to `image.webp`\/`image.avif`, currently I use https:\/\/github.com\/webpack-contrib\/image-minimizer-webpack-plugin\/blob\/master\/src\/loader.js#L133 this workaround","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["enhancement","webpack-5"]},{"title":"add hint\/warning for the same cacheLocation in multi compiler mode","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nRight now in multi compiler mode `cache.cacheLocation` for each config is the same. Will be great to force user to name cache differently per config.\r\n\r\n**What is the expected behavior?**\r\n\r\ncorrect caching for each compiler\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nfix persistance caching in multi compiler mode\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nI think warning on multi complier basis will be ok.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n\r\n","comments":["<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["enhancement","webpack-5"]},{"title":"Worker type classic is not preserved when using libraryTarget module","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nBundling with libraryTarget module, `new Worker` with [options type classic](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Worker\/Worker) will be rewritten from:\r\n\r\n```js\r\nconst myWorker = new Worker(new URL(\"worker.js\", import.meta.url), {\r\n  type: \"classic\",\r\n});\r\n```\r\nto:\r\n```js\r\nconst myWorker = new Worker(new URL(\/* worker import *\/ __webpack_require__.p + __webpack_require__.u(695), __webpack_require__.b), {\r\n  type: \"module\",\r\n});\r\n```\r\n\r\nThat's an issue when the imported worker contains `importScripts` as loading it as module will throw:\r\n`Uncaught TypeError: Failed to execute 'importScripts' on 'WorkerGlobalScope': Module scripts don't support importScripts().`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nGist with repro case: https:\/\/gist.github.com\/dmnsgn\/1b6b464a6c6aa2ed4d4c1d2a18042e02\r\n\r\n```bash\r\ngit clone https:\/\/gist.github.com\/dmnsgn\/1b6b464a6c6aa2ed4d4c1d2a18042e02\r\ncd 1b6b464a6c6aa2ed4d4c1d2a18042e02\/\r\nnpm i\r\nnpm run build\r\n```\r\n\r\nTo see the importScripts error in a browser (otherwise just look at the output dist\/bundle.js):\r\n```\r\nnpm serve\r\n```\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should keep type classic even when setting a libraryTarget to module.\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.64.3\r\nNode.js version: 17.1\r\nOperating System: MacOS\r\nAdditional tools:\r\n","comments":["Without libraryTarget module, it outputs `type: undefined` btw.","Expected, you ask webpack to output ESM, webpack rewrite code to ESM, you can't use `importScripts`","As you can't use `importScripts` to import ESM or inside in ESM without webpack","And webpack doesn't support bundling `importScript` as dependency within workers. We only support ESM and CommonJs in workers.","In principle it makes sense, you ask ESM you get ESM. But does that mean that Workers should necessarily be transformed as _module Workers_? Their execution context being different.\r\n\r\nMy point are:\r\n- in regular JavaScript, without a bundler, passing `type: \"module\"` is opt-in, the default is \"classic\".\r\n- **module Worker** support is far from **JavaScript modules** support\r\n- if my library has an external dependency on a worker using `importScripts` and I want it bundled in my esm output lib, I am stuck\r\n\r\n---\r\n\r\n> And webpack doesn't support bundling `importScript` as dependency within workers. We only support ESM and CommonJs in workers.\r\n\r\nCould type: 'classic' and their importScripts be bundled as is, with just their `publicPath` updated?","But it is weird `self.importScripts(new URL(\".\/foo.js\", import.meta.url));`, `import.meta.url` available only in `module`, but you use `classic`...\r\n\r\nAnd versa vice if you use `module`, you can't use `importScripts`, try it without webpack...","> But it is weird `self.importScripts(new URL(\".\/foo.js\", import.meta.url));`, `import.meta.url` available only in `module`, but you use `classic`...\r\n> \r\n> And versa vice if you use `module`, you can't use `importScripts`, try it without webpack...\r\n\r\nYeah true, I did this because with only `self.importScripts(\".\/foo.js\");` it doesn't output foo.js to `dist`.","So you can:\r\n- do not use `new URL(\"worker.js\", import.meta.url)` and webpack will not change it, bad idea for you, I think\r\n- use multi compiler mode set `target: webworker` and bundle worker as script output, then load it inside application using `import`\r\n- do not use `importScripts` in favor `import()`","Separately bundling with `target: webworker` does work but produces bigger files and put the Workers outside webpack module resolution logic.\r\nI'd still like to be able to use the more future proof syntax:\r\n```js\r\n    new Worker(\r\n      new URL('some-dependency\/worker.js', import.meta.url),\r\n      { name: 'my-dep-worker', type: 'classic' }\r\n    )\r\n```\r\nthan hoping that url resolution still works `new Worker('.\/worker.js')`.\r\n\r\nCurrently it also look like any other properties in the worker `options` (credentials or name) would they be scrapped off?","> Separately bundling with target: webworker does work but produces bigger files\r\n\r\nIt should be not very big... Can you provide example?\r\n\r\n> I'd still like to be able to use the more future proof syntax:\r\n\r\nI don't think we should add new semantic to JS, it can be unsafe\r\n\r\n> Currently it also look like any other properties in the worker options (credentials or name) would they be scrapped off?\r\n\r\nWe should keep them, it is bug if we remove them","> We should keep them, it is bug if we remove them\r\n\r\nNevermind, they are preserved, no problem\r\n\r\n> I don't think we should add new semantic to JS, it can be unsafe\r\n\r\nHa I am not suggesting to add anything. Just hoping that the native and valid JS code above stays the same once bundled and that webpack can determine if the target should be compiled as \"classic\" or \"module\" according to this property since it is [in the spec](https:\/\/html.spec.whatwg.org\/multipage\/workers.html#module-worker-example). I understand it is probably requiring some work to make the compiler aware of a different target for a dependency in the webpack graph but making the WorkerPlugin a bit more flexible in checking options might be enough?\r\n\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/bb51f18a519485255d639cc5b7c0dc351bf642db\/lib\/dependencies\/WorkerPlugin.js#L312-L354\r\n\r\n> It should be not very big... Can you provide example?\r\n\r\nWith `monaco-editor\/esm\/vs\/language\/typescript\/ts.worker.js` for instance it goes from 4.33 MiB (libraryTarget\/library.type = module) to 4.51 MiB (target: 'webworker').\r\n\r\n","Weird, we need investigate why it is bigger, should be same, with small runtime overhead. Maybe we should support allow to keep script worker as is and do not rewrite it to esm, but I think it will not solve your problem, because you use `import.meta.url`, as I written before you can't use it in classic workers","In an ideal world, the Worker script I am importing should be valid either as classic or module worker. But because of the complexity of bundling workers in the JavaScript ecosystem, it looks like there are a lot of edge cases.\r\n\r\n> Maybe we should support allow to keep script worker as is and do not rewrite it to esm, but I think it will not solve your problem, because you use `import.meta.url`, as I written before you can't use it in classic workers\r\n\r\nLoading the worker as is would definitely work for some of these edge cases but yes, for my use case above, I would need more granularity to be able to set a different target (webworker) for these \"external\" graph dependencies.","In theory you can create custom plugin and do what you want and generate any runtime code (you can look at our source code), but I agree, it is not easy and you have to support it and spend time on it","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","Finding this when I'm trying to bundle jupyterlite in an es module. It imports pyodide from an external URL, entirely different project, and uses a non module script to do that which is created on the fly in a blob URL. Which given the source is created entirely outside webpack doesn't get moduleised. Check out the constructor here:\r\n\r\nhttps:\/\/github.com\/jupyterlite\/jupyterlite\/blob\/ba4c2450cdfb1c84b3eaab25e09e361fa4a17fa7\/packages\/pyolite-kernel\/src\/kernel.ts\r\n\r\nI'm gonna do a pr to jupyterlite to make it use either the standard or es module version of pyodide, but it would be nice if the webpack code didn't force modules for things that it isn't generating.","@joemarshall didn't get what you mean.. webpack does nothing with \r\n```js\r\nthis._worker = new Worker(window.URL.createObjectURL(blob));\r\n```\r\nsince this is not statically analyzable","@vankop  You're absolutely right, sorry. The code I was running had added a sub-module inside a worker which was breaking things. Ignore me.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["enhancement","inactive","webpack-5"]},{"title":"webpack should not warn import usage, when import is unreachable (e.g. guarded by `if` statement)","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nBundling\r\n```js\r\nimport * as React from \"react\";\r\nif (React.useId !== undefined) {\r\n  \/\/ do something with React.useId\r\n}\r\n```\r\nwill currently warn with `export 'useId' (imported as 'React') was not found in 'react' `  (or crash if `strictExportPresence` is enabled).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. Clone https:\/\/github.com\/eps1lon\/webpack-export-shim\r\n2. `yarn start:webpack`\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nNo warning in this case (just like Node.js and browsers with ES modules support. The repro repository has steps to verify the above code is safe in an ES module browser and Node.js).\r\nWe want to write code that works for both React 17 and React 18 (or rather provides improved behavior for React 18). However, this warning makes using the library very disruptive and even impossible if you have `strictExportPresence` enabled ([like Create React App has](https:\/\/github.com\/facebook\/create-react-app\/blob\/v4.0.3\/packages\/react-scripts\/config\/webpack.config.js#L371)): https:\/\/github.com\/mui-org\/material-ui\/issues\/29860.\r\nThe warning should probably apply to unconditional usage but in our case we have usage guarded with `Module.namedExport !== undefined`. This seems statically analyzeable and safe to disable the warning for every usage in that block).\r\n\r\n**Other relevant information:**\r\nwebpack version:  npm:5.64.3\r\nNode.js version: 16.13.0\r\nOperating System: Ubuntu 20.04.3 LTS\r\nAdditional tools: Chrome Version 96.0.4664.45 \r\n","comments":["> The warning should probably apply to unconditional usage but in our case we have usage guarded with Module.namedExport !== undefined \r\n\r\nguarding make sense, not sure that this will be implemented..","for now you can do something like:\r\n```\r\nif (\"useId\" in React) {\r\n  \/\/ do something with React[\"useId\".toString()]\r\n}\r\n```\r\nbut thats will bundle all `React`..","> guarding make sense, not sure that this will be implemented..\r\n\r\nIn the absence of it, the warning shouldn't exist considering bundlers don't guard against any other missing property access. A type system is much better equipped to handle these issues.\r\n\r\n> but thats will bundle all React..\r\n\r\nThat's generally not an issue since `react` is relatively small and you oftentimes use most of the module anyway.","Hi there,\r\n\r\nJust to add, these two bugs will crash a Vercel setup. So hope that this bug can be resolved soon.\r\n1. **.\/node_modules\/@mui\/utils\/esm\/useId.js\r\nAttempted import error: 'useId' is not exported from 'react' (imported as 'React').**\r\n\r\n2. **.\/node_modules\/@mui\/utils\/esm\/useId.js\r\nAttempted import error: 'useId' is not exported from 'react' (imported as 'React').**\r\n\r\n---\r\n\r\nThank you.","# Fix\r\n\r\n`strictExportPresence: false` \r\n\r\nSolves this.\r\n\r\nAre there any better ideas?\r\n\r\nIs webpack coming up with a patch? ","We will fix it, no need to duplicate, just wait","> We will fix it, no need to duplicate, just wait\r\n\r\nThank you, looking forward.","> Hi there,\r\n> \r\n> Just to add, these two bugs will crash a Vercel setup. So hope that this bug can be resolved soon.\r\n> \r\n> 1. **.\/node_modules\/@mui\/utils\/esm\/useId.js\r\n>    Attempted import error: 'useId' is not exported from 'react' (imported as 'React').**\r\n> 2. **.\/node_modules\/@mui\/utils\/esm\/useId.js\r\n>    Attempted import error: 'useId' is not exported from 'react' (imported as 'React').**\r\n> \r\n> Thank you.\r\n\r\n---\r\n\r\nAdding some further context on the Vercel breakage if it helps the team as well:\r\n\r\n<img width=\"389\" alt=\"Screenshot 2021-11-25 at 6 29 07 PM\" src=\"https:\/\/user-images.githubusercontent.com\/759805\/143425265-f72cf4b5-2b6a-466c-812d-e98fa05c2775.png\">\r\n\r\n```\r\n(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[179],{60400:function(){\"trimStart\"in String.prototype||(String.prototype.trimStart=String.prototype.trimLeft),\"trimEnd\"in String.prototype||(String.prototype.trimEnd=String.prototype.trimRight),\"description\"in Symbol.prototype||Object.defineProperty(Symbol.prototype,\"description\",{configurable:!0,get:function(){var a=\/\\((.*)\\)\/.exec(this.toString());return a?a[1]:void 0}}),Array.prototype.flat||(Array.prototype.flat=function(a,b){return b=this.concat.apply([],this),a>1&&b.some(Array.isArray)?b.flat(a-1):b},Array.prototype.flatMap=function(a,b){return this.map(a,b).flat()}),Promise.prototype.finally||(Promise.prototype.finally=function(a){if(\"function\"!=typeof a)return this.then(a,a);var b=this.constructor||Promise;return this.then(function(c){return b.resolve(a()).then(function(){return c})},function(c){return b.resolve(a()).then(function(){throw c})})})},96086:function(a){\"use strict\";var b=Object.assign.bind(Object);a.exports=b,a.exports.default=a.exports},56007:function(a,b){\"use strict\";function c(a,b){return null!=b&&\"undefined\"!=typeof Symbol&&b[Symbol.hasInstance]?b[Symbol.hasInstance](a):a instanceof b}Object.defineProperty(b,\"__esModule\",{value:!0}),b.isEqualNode=f,b.default=function(){var a=null;return{mountedInstances:new Set(),updateHead:function(b){var c=a=Promise.resolve().then(function(){if(c===a){a=null;var d={};b.forEach(function(a){if(\"link\"===a.type&&a.props[\"data-optimized-fonts\"]){if(document.querySelector(\"style[data-href=\\\"\".concat(a.props[\"data-href\"],\"\\\"]\")))return;a.props.href=a.props[\"data-href\"],a.props[\"data-href\"]=void 0}var b=d[a.type]||[];b.push(a),d[a.type]=b});var g=d.title?d.title[0]:null,h=\"\";if(g){var i=g.props.children;h=\"string\"==typeof i?i:Array.isArray(i)?i.join(\"\"):\"\"}h!==document.title&&(document.title=h),[\"meta\",\"base\",\"link\",\"style\",\"script\"].forEach(function(a){!function(a,b){for(var c,d=document.getElementsByTagName(\"head\")[0],g=d.querySelector(\"meta[name=next-head-count]\"),h=Number(g.content),i=[],j=0,k=g.previousElementSibling;j<h;j++,k=(null==k?void 0:k.previousElementSibling)||null)(null==k?void 0:null===(c=k.tagName)|| void 0===c?void 0:c.toLowerCase())===a&&i.push(k);var l=b.map(e).filter(function(a){for(var b=0,c=i.length;b<c;b++)if(f(i[b],a))return i.splice(b,1),!1;return!0});i.forEach(function(a){var b;return null===(b=a.parentNode)|| void 0===b?void 0:b.removeChild(a)}),l.forEach(function(a){return d.insertBefore(a,g)}),g.content=(h-i.length+l.length).toString()}(a,d[a]||[])})}})}}},b.DOMAttributeNames=void 0;var d={acceptCharset:\"accept-charset\",className:\"class\",htmlFor:\"for\",httpEquiv:\"http-equiv\",noModule:\"noModule\"};function e(a){var b=a.type,c=a.props,e=document.createElement(b);for(var f in c)if(c.hasOwnProperty(f)&&\"children\"!==f&&\"dangerouslySetInnerHTML\"!==f&& void 0!==c[f]){var g=d[f]||f.toLowerCase();\"script\"===b&&(\"async\"===g||\"defer\"===g||\"noModule\"===g)?e[g]=!!c[f]:e.setAttribute(g,c[f])}var h=c.children,i=c.dangerouslySetInnerHTML;return i?e.innerHTML=i.__html||\"\":h&&(e.textContent=\"string\"==typeof h?h:Array.isArray(h)?h.join(\"\"):\"\"),e}function f(a,b){if(c(a,HTMLElement)&&c(b,HTMLElement)){var d=b.getAttribute(\"nonce\");if(d&&!a.getAttribute(\"nonce\")){var e=b.cloneNode(!0);return e.setAttribute(\"nonce\",\"\"),e.nonce=d,d===a.nonce&&a.isEqualNode(e)}}return a.isEqualNode(b)}b.DOMAttributeNames=d},77339:function(a,b,c){\"use strict\";var d,e,f,g,h,i,j,k,l=(d=c(28520))&&d.__esModule?d:{default:d};function m(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,\"value\"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}function n(a){return(n=Object.setPrototypeOf?Object.getPrototypeOf:function(a){return a.__proto__||Object.getPrototypeOf(a)})(a)}function o(a,b){return null!=b&&\"undefined\"!=typeof Symbol&&b[Symbol.hasInstance]?b[Symbol.hasInstance](a):a instanceof b}function p(a,b){return(p=Object.setPrototypeOf||function(a,b){return a.__proto__=b,a})(a,b)}Object.defineProperty(b,\"__esModule\",{value:!0}),b.initNext=function(){return ja.apply(this,arguments)},b.render=la,b.renderError=ma,b.emitter=b.router=b.version=void 0,c(60400);var q=L(c(67294)),r=L(c(73935)),s=c(8771),t=c(8404),u=L(c(35660)),v=c(63462),w=c(76273),x=c(78689),y=c(50466),z=c(88027),A=c(63794),B=c(32207),C=L(c(56007)),D=L(c(95181)),E=L(c(59302)),F=c(48982),G=c(90387),H=L(c(80676)),I=c(77813);function J(a,b,c,d,e,f,g){try{var h=a[f](g),i=h.value}catch(j){c(j);return}h.done?b(i):Promise.resolve(i).then(d,e)}function K(a){return function(){var b=this,c=arguments;return new Promise(function(d,e){var f=a.apply(b,c);function g(a){J(f,d,e,g,h,\"next\",a)}function h(a){J(f,d,e,g,h,\"throw\",a)}g(void 0)})}}function L(a){return a&&a.__esModule?a:{default:a}}function M(a){for(var b=arguments,c=1;c<arguments.length;c++)!function(c){var d=null!=b[c]?b[c]:{},e=Object.keys(d);\"function\"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(d).filter(function(a){return Object.getOwnPropertyDescriptor(d,a).enumerable}))),e.forEach(function(b){var c,e,f;c=a,e=b,f=d[b],e in c?Object.defineProperty(c,e,{value:f,enumerable:!0,configurable:!0,writable:!0}):c[e]=f})}(c);return a}var N=JSON.parse(document.getElementById(\"__NEXT_DATA__\").textContent);window.__NEXT_DATA__=N,b.version=\"12.0.4\";var O=function(a){return[].slice.call(a)},P=N.props,Q=N.err,R=N.page,S=N.query,T=N.buildId,U=N.assetPrefix,V=N.runtimeConfig,W=N.dynamicIds,X=N.isFallback,Y=N.locale,Z=N.locales,$=N.domainLocales,_=N.isPreview;N.rsc;var aa=N.defaultLocale,ba=U||\"\";c.p=\"\".concat(ba,\"\/_next\/\"),z.setConfig({serverRuntimeConfig:{},publicRuntimeConfig:V||{}});var ca=A.getURL();w.hasBasePath(ca)&&(ca=w.delBasePath(ca)),N.scriptLoader&&(0,c(20699).zD)(N.scriptLoader);var da=new D.default(T,ba),ea=function(a){var b,c=function(a){if(Array.isArray(a))return a}(b=a)||function(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!b||c.length!==b);d=!0);}catch(i){e=!0,f=i}finally{try{d||null==h.return||h.return()}finally{if(e)throw f}}return c}(b,2)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}(),d=c[0],e=c[1];return da.routeLoader.onEntrypoint(d,e)};window.__NEXT_P&&window.__NEXT_P.map(function(a){return setTimeout(function(){return ea(a)},0)}),window.__NEXT_P=[],window.__NEXT_P.push=ea;var fa=C.default(),ga=document.getElementById(\"__next\");b.router=f,fa.getIsSsr=function(){return f.isSsr};var ha=function(a){!function(a,b){if(\"function\"!=typeof b&&null!==b)throw new TypeError(\"Super expression must either be null or a function\");a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),b&&p(a,b)}(g,a);var b,c,d,e=function(a){var b=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(a){return!1}}();return function(){var c,d,e,f,g=n(a);if(b){var h=n(this).constructor;f=Reflect.construct(g,arguments,h)}else f=g.apply(this,arguments);return d=this,(e=f)&&(\"object\"==((c=e)&&\"undefined\"!=typeof Symbol&&c.constructor===Symbol?\"symbol\":typeof c)||\"function\"==typeof e)?e:(function(a){if(void 0===a)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return a})(d)}}(g);function g(){return!function(a,b){if(!(a instanceof b))throw new TypeError(\"Cannot call a class as a function\")}(this,g),e.apply(this,arguments)}return b=g,c=[{key:\"componentDidCatch\",value:function(a,b){this.props.fn(a,b)}},{key:\"componentDidMount\",value:function(){this.scrollToHash(),f.isSsr&&\"\/404\"!==R&&\"\/_error\"!==R&&(X||N.nextExport&&(x.isDynamicRoute(f.pathname)||location.search||!1)||P&&P.__N_SSG&&(location.search||!1))&&f.replace(f.pathname+\"?\"+String(y.assign(y.urlQueryToSearchParams(f.query),new URLSearchParams(location.search))),ca,{_h:1,shallow:!X})}},{key:\"componentDidUpdate\",value:function(){this.scrollToHash()}},{key:\"scrollToHash\",value:function(){var a=location.hash;if(a=a&&a.substring(1)){var b=document.getElementById(a);b&&setTimeout(function(){return b.scrollIntoView()},0)}}},{key:\"render\",value:function(){return this.props.children}}],m(b.prototype,c),d&&m(b,d),g}(q.default.Component),ia=u.default();function ja(){return(ja=K(l.default.mark(function a(c){var d,e,j,k,m,n,o,p;return l.default.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return d=void 0===c?{}:c,e=Q,a.prev=3,a.next=6,da.routeLoader.whenEntrypoint(\"\/_app\");case 6:if(!(\"error\"in(j=a.sent))){a.next=9;break}throw j.error;case 9:k=j.component,m=j.exports,g=k,n=m&&m.reportWebVitals,h=function(a){var b,c=a.id,d=a.name,e=a.startTime,f=a.value,g=a.duration,h=a.entryType,i=a.entries,j=\"\".concat(Date.now(),\"-\").concat(Math.floor(8999999999999*Math.random())+10e11);i&&i.length&&(b=i[0].startTime);var k={id:c||j,name:d,startTime:e||b,value:null==f?g:f,label:\"mark\"===h||\"measure\"===h?\"custom\":\"web-vital\"};null==n||n(k),I.trackWebVitalMetric(k)},a.next=17;break;case 17:return a.next=19,da.routeLoader.whenEntrypoint(R);case 19:a.t0=a.sent;case 20:if(!(\"error\"in(o=a.t0))){a.next=23;break}throw o.error;case 23:i=o.component,a.next=28;break;case 28:a.next=33;break;case 30:a.prev=30,a.t1=a.catch(3),e=H.default(a.t1)?a.t1:new Error(a.t1+\"\");case 33:if(!window.__NEXT_PRELOADREADY){a.next=37;break}return a.next=37,window.__NEXT_PRELOADREADY(W);case 37:return b.router=f=G.createRouter(R,S,ca,{initialProps:P,pageLoader:da,App:g,Component:i,wrapApp:sa,err:e,isFallback:Boolean(X),subscription:function(a,b,c){return la(Object.assign({},a,{App:b,scroll:c}))},locale:Y,locales:Z,defaultLocale:aa,domainLocales:$,isPreview:_}),la(p={App:g,initial:!0,Component:i,props:P,err:e}),a.abrupt(\"return\",ia);case 44:return a.abrupt(\"return\",{emitter:ia,renderCtx:p});case 45:case\"end\":return a.stop()}},a,null,[[3,30]])}))).apply(this,arguments)}function ka(){return(ka=K(l.default.mark(function a(b){var c;return l.default.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:if(!b.err){a.next=4;break}return a.next=3,ma(b);case 3:return a.abrupt(\"return\");case 4:return a.prev=4,a.next=7,ta(b);case 7:a.next=17;break;case 9:if(a.prev=9,a.t0=a.catch(4),!(c=o(a.t0,Error)?a.t0:new Error(a.t0+\"\")).cancelled){a.next=14;break}throw c;case 14:return a.next=17,ma(M({},b,{err:c}));case 17:case\"end\":return a.stop()}},a,null,[[4,9]])}))).apply(this,arguments)}function la(a){return ka.apply(this,arguments)}function ma(a){var b=a.App,d=a.err;return console.error(d),console.error(\"A client-side exception has occurred, see here for more info: https:\/\/nextjs.org\/docs\/messages\/client-side-exception-occurred\"),da.loadPage(\"\/_error\").then(function(a){var b=a.page,d=a.styleSheets;return(null==k?void 0:k.Component)===b?Promise.resolve().then(function(){return(function(a){if(a&&a.__esModule)return a;var b={};if(null!=a){for(var c in a)if(Object.prototype.hasOwnProperty.call(a,c)){var d=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(a,c):{};d.get||d.set?Object.defineProperty(b,c,d):b[c]=a[c]}}return b.default=a,b})(c(89185))}).then(function(a){return{ErrorComponent:a.default,styleSheets:[]}}):{ErrorComponent:b,styleSheets:d}}).then(function(c){var e=c.ErrorComponent,g=c.styleSheets,h=sa(b);return Promise.resolve(a.props?a.props:A.loadGetInitialProps(b,{Component:e,AppTree:h,router:f,ctx:{err:d,pathname:R,query:S,asPath:ca,AppTree:h}})).then(function(b){return ta(M({},a,{err:d,Component:e,styleSheets:g,props:b}))})})}b.emitter=ia;var na=!0;function oa(){A.ST&&(performance.mark(\"afterHydrate\"),performance.measure(\"Next.js-before-hydration\",\"navigationStart\",\"beforeRender\"),performance.measure(\"Next.js-hydration\",\"beforeRender\",\"afterHydrate\"),h&&performance.getEntriesByName(\"Next.js-hydration\").forEach(h),qa())}function pa(){if(A.ST){performance.mark(\"afterRender\");var a=performance.getEntriesByName(\"routeChange\",\"mark\");a.length&&(performance.measure(\"Next.js-route-change-to-render\",a[0].name,\"beforeRender\"),performance.measure(\"Next.js-render\",\"beforeRender\",\"afterRender\"),h&&(performance.getEntriesByName(\"Next.js-render\").forEach(h),performance.getEntriesByName(\"Next.js-route-change-to-render\").forEach(h)),qa(),[\"Next.js-route-change-to-render\",\"Next.js-render\"].forEach(function(a){return performance.clearMeasures(a)}))}}function qa(){[\"beforeRender\",\"afterHydrate\",\"afterRender\",\"routeChange\"].forEach(function(a){return performance.clearMarks(a)})}function ra(a){var b=a.children;return q.default.createElement(ha,{fn:function(a){return ma({App:g,err:a}).catch(function(a){return console.error(\"Error rendering page: \",a)})}},q.default.createElement(v.RouterContext.Provider,{value:G.makePublicRouterInstance(f)},q.default.createElement(t.HeadManagerContext.Provider,{value:fa},q.default.createElement(s.StyleRegistry,null,b))))}var sa=function(a){return function(b){var c=M({},b,{Component:i,err:Q,router:f});return q.default.createElement(ra,null,q.default.createElement(a,Object.assign({},c)))}};function ta(a){var b,c=function(){if(!o)return!1;var a=O(document.querySelectorAll(\"style[data-n-href]\")),b=new Set(a.map(function(a){return a.getAttribute(\"data-n-href\")})),c=document.querySelector(\"noscript[data-n-css]\"),d=null==c?void 0:c.getAttribute(\"data-n-css\");return o.forEach(function(a){var c=a.href,e=a.text;if(!b.has(c)){var f=document.createElement(\"style\");f.setAttribute(\"data-n-href\",c),f.setAttribute(\"media\",\"x\"),d&&f.setAttribute(\"nonce\",d),document.head.appendChild(f),f.appendChild(document.createTextNode(e))}}),!0},d=function(){if(o&&!s){for(var b=new Set(o.map(function(a){return a.href})),c=O(document.querySelectorAll(\"style[data-n-href]\")),d=c.map(function(a){return a.getAttribute(\"data-n-href\")}),e=0;e<d.length;++e)b.has(d[e])?c[e].removeAttribute(\"media\"):c[e].setAttribute(\"media\",\"x\");var f=document.querySelector(\"noscript[data-n-css]\");f&&o.forEach(function(a){var b=a.href,c=document.querySelector(\"style[data-n-href=\\\"\".concat(b,\"\\\"]\"));c&&(f.parentNode.insertBefore(c,f.nextSibling),f=c)}),O(document.querySelectorAll(\"link[data-n-p]\")).forEach(function(a){a.parentNode.removeChild(a)})}a.scroll&&window.scrollTo(a.scroll.x,a.scroll.y)},g=function(){b()},h=a.App,i=a.Component,l=a.props,m=a.err,n=a.__N_RSC,o=\"initial\"in a?void 0:a.styleSheets;i=i||k.Component,l=l||k.props;var p=M({},l,{Component:n?j:i,err:m,router:f});k=p;var s=!1,t=new Promise(function(a,c){e&&e(),b=function(){e=null,a()},e=function(){s=!0,e=null;var a=new Error(\"Cancel rendering route\");a.cancelled=!0,c(a)}});c();var u=q.default.createElement(q.default.Fragment,null,q.default.createElement(va,{callback:d}),q.default.createElement(ra,null,q.default.createElement(h,Object.assign({},p)),q.default.createElement(B.Portal,{type:\"next-route-announcer\"},q.default.createElement(F.RouteAnnouncer,null))));return!function(a,b){A.ST&&performance.mark(\"beforeRender\");var c=b(na?oa:pa);na?(r.default.hydrate(c,a),na=!1):r.default.render(c,a)}(ga,function(a){return q.default.createElement(ua,{callbacks:[a,g]},u)}),t}function ua(a){var b=a.callbacks,c=a.children;return q.default.useLayoutEffect(function(){return b.forEach(function(a){return a()})},[b]),q.default.useEffect(function(){E.default(h)},[]),c}function va(a){var b=a.callback;return q.default.useLayoutEffect(function(){return b()},[b]),null}},22870:function(a,b,c){\"use strict\";var d=c(77339);window.next={version:d.version,get router(){return d.router},emitter:d.emitter,render:d.render,renderError:d.renderError},d.initNext().catch(console.error)},82392:function(a,b){\"use strict\";function c(a){return a.endsWith(\"\/\")&&\"\/\"!==a?a.slice(0,-1):a}Object.defineProperty(b,\"__esModule\",{value:!0}),b.removePathTrailingSlash=c,b.normalizePathTrailingSlash=void 0,b.normalizePathTrailingSlash=c},95181:function(a,b,c){\"use strict\";function d(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,\"value\"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}Object.defineProperty(b,\"__esModule\",{value:!0}),b.default=void 0;var e,f=c(76273),g=(e=c(73891))&&e.__esModule?e:{default:e},h=c(78689),i=c(36305),j=c(82392),k=c(22669),l=function(){var a,b,c;function e(a,b){!function(a,b){if(!(a instanceof b))throw new TypeError(\"Cannot call a class as a function\")}(this,e),this.routeLoader=k.createRouteLoader(b),this.buildId=a,this.assetPrefix=b,this.promisedSsgManifest=new Promise(function(a){window.__SSG_MANIFEST?a(window.__SSG_MANIFEST):window.__SSG_MANIFEST_CB=function(){a(window.__SSG_MANIFEST)}})}return a=e,b=[{key:\"getPageList\",value:function(){return k.getClientBuildManifest().then(function(a){return a.sortedPages})}},{key:\"getMiddlewareList\",value:function(){return k.getMiddlewareManifest()}},{key:\"getDataHref\",value:function(a){var b=a.href,c=a.asPath,d=a.ssg,e=a.rsc,k=a.locale,l=this,m=i.parseRelativeUrl(b),n=m.pathname,o=m.query,p=m.search,q=i.parseRelativeUrl(c),r=q.pathname,s=function(a){if(\"\/\"!==a[0])throw new Error(\"Route name should start with a \\\"\/\\\", got \\\"\".concat(a,\"\\\"\"));return\"\/\"===a?a:a.replace(\/\\\/$\/,\"\")}(n),t=function(a){if(e)return a+\"?__flight__\";var b=g.default(j.removePathTrailingSlash(f.addLocale(a,k)),\".json\");return f.addBasePath(\"\/_next\/data\/\".concat(l.buildId).concat(b).concat(d?\"\":p))},u=h.isDynamicRoute(s),v=u?f.interpolateAs(n,r,o).result:\"\";return u?v&&t(v):t(s)}},{key:\"_isSsg\",value:function(a){return this.promisedSsgManifest.then(function(b){return b.has(a)})}},{key:\"loadPage\",value:function(a){return this.routeLoader.loadRoute(a).then(function(a){if(\"component\"in a)return{page:a.component,mod:a.exports,styleSheets:a.styles.map(function(a){return{href:a.href,text:a.content}})};throw a.error})}},{key:\"prefetch\",value:function(a){return this.routeLoader.prefetch(a)}}],d(a.prototype,b),c&&d(a,c),e}();b.default=l},59302:function(a,b,c){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.default=void 0;var d,e=c(38745),f=location.href,g=!1;function h(a){d&&d(a);var b=function(){fetch(g,{body:e,method:\"POST\",credentials:\"omit\",keepalive:!0}).catch(console.error)},c={dsn:\"5dcfMsM2ywNPDi1NOOKkAs6sWYj\",id:a.id,page:window.__NEXT_DATA__.page,href:f,event_name:a.name,value:a.value.toString(),speed:\"connection\"in navigator&&navigator.connection&&\"effectiveType\"in navigator.connection?navigator.connection.effectiveType:\"\"},e=new Blob([new URLSearchParams(c).toString()],{type:\"application\/x-www-form-urlencoded\"}),g=\"https:\/\/vitals.vercel-insights.com\/v1\/vitals\",h=navigator.sendBeacon&&navigator.sendBeacon.bind(navigator);try{h(g,e)||b()}catch(i){b()}}b.default=function(a){d=a,g||(g=!0,e.getCLS(h),e.getFID(h),e.getFCP(h),e.getLCP(h),e.getTTFB(h))}},32207:function(a,b,c){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.Portal=void 0;var d,e=(d=c(67294))&&d.__esModule?d:{default:d},f=c(73935);b.Portal=function(a){var b,c=a.children,d=a.type,g=e.default.useRef(null),h=function(a){if(Array.isArray(a))return a}(b=e.default.useState())||function(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!b||c.length!==b);d=!0);}catch(i){e=!0,f=i}finally{try{d||null==h.return||h.return()}finally{if(e)throw f}}return c}(b,2)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}(),i=h[1];return e.default.useEffect(function(){return g.current=document.createElement(d),document.body.appendChild(g.current),i({}),function(){g.current&&document.body.removeChild(g.current)}},[d]),g.current?f.createPortal(c,g.current):null}},9311:function(a,b){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.cancelIdleCallback=b.requestIdleCallback=void 0;var c=\"undefined\"!=typeof self&&self.requestIdleCallback&&self.requestIdleCallback.bind(window)||function(a){var b=Date.now();return setTimeout(function(){a({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-b))}})},1)};b.requestIdleCallback=c;var d=\"undefined\"!=typeof self&&self.cancelIdleCallback&&self.cancelIdleCallback.bind(window)||function(a){return clearTimeout(a)};b.cancelIdleCallback=d},48982:function(a,b,c){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.RouteAnnouncer=g,b.default=void 0;var d,e=(d=c(67294))&&d.__esModule?d:{default:d},f=c(90387);function g(){var a,b=f.useRouter().asPath,c=function(a){if(Array.isArray(a))return a}(a=e.default.useState(\"\"))||function(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!b||c.length!==b);d=!0);}catch(i){e=!0,f=i}finally{try{d||null==h.return||h.return()}finally{if(e)throw f}}return c}(a,2)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}(),d=c[0],g=c[1],h=e.default.useRef(!1);return e.default.useEffect(function(){if(!h.current){h.current=!0;return}if(document.title)g(document.title);else{var a,c=document.querySelector(\"h1\");g((null!==(a=null==c?void 0:c.innerText)&& void 0!==a?a:null==c?void 0:c.textContent)||b)}},[b]),e.default.createElement(\"p\",{\"aria-live\":\"assertive\",id:\"__next-route-announcer__\",role:\"alert\",style:{border:0,clip:\"rect(0 0 0 0)\",height:\"1px\",margin:\"-1px\",overflow:\"hidden\",padding:0,position:\"absolute\",width:\"1px\",whiteSpace:\"nowrap\",wordWrap:\"normal\"}},d)}b.default=g},22669:function(a,b,c){\"use strict\";var d;Object.defineProperty(b,\"__esModule\",{value:!0}),b.markAssetError=i,b.isAssetError=function(a){return a&&h in a},b.getClientBuildManifest=k,b.getMiddlewareManifest=function(){return self.__MIDDLEWARE_MANIFEST?Promise.resolve(self.__MIDDLEWARE_MANIFEST):j(new Promise(function(a){var b=self.__MIDDLEWARE_MANIFEST_CB;self.__MIDDLEWARE_MANIFEST_CB=function(){a(self.__MIDDLEWARE_MANIFEST),b&&b()}}),3800,i(new Error(\"Failed to load client middleware manifest\")))},b.createRouteLoader=function(a){var b=function(a){var b,c,d=h.get(a);return d||(document.querySelector(\"script[src^=\\\"\".concat(a,\"\\\"]\"))?Promise.resolve():(h.set(a,d=(b=a,new Promise(function(a,d){(c=document.createElement(\"script\")).onload=a,c.onerror=function(){return d(i(new Error(\"Failed to load script: \".concat(b))))},c.crossOrigin=void 0,c.src=b,document.body.appendChild(c)}))),d))},c=function(a){var b=k.get(a);return b||k.set(a,b=fetch(a).then(function(b){if(!b.ok)throw new Error(\"Failed to load stylesheet: \".concat(a));return b.text().then(function(b){return{href:a,content:b}})}).catch(function(a){throw i(a)})),b},d=new Map(),h=new Map(),k=new Map(),m=new Map();return{whenEntrypoint:function(a){return f(a,d)},onEntrypoint:function(a,b){(b?Promise.resolve().then(function(){return b()}).then(function(a){return{component:a&&a.default||a,exports:a}},function(a){return{error:a}}):Promise.resolve(void 0)).then(function(b){var c=d.get(a);c&&\"resolve\"in c?b&&(d.set(a,b),c.resolve(b)):(b?d.set(a,b):d.delete(a),m.delete(a))})},loadRoute:function(e,g){var h=this;return f(e,m,function(){var f=h;return j(l(a,e).then(function(a){var f=a.scripts,g=a.css;return Promise.all([d.has(e)?[]:Promise.all(f.map(b)),Promise.all(g.map(c)),])}).then(function(a){return f.whenEntrypoint(e).then(function(b){return{entrypoint:b,styles:a[1]}})}),3800,i(new Error(\"Route did not complete loading: \".concat(e)))).then(function(a){var b=a.entrypoint,c=a.styles,d=Object.assign({styles:c},b);return\"error\"in b?b:d}).catch(function(a){if(g)throw a;return{error:a}})})},prefetch:function(b){var c,d=this;return(c=navigator.connection)&&(c.saveData||\/2g\/.test(c.effectiveType))?Promise.resolve():l(a,b).then(function(a){return Promise.all(g?a.scripts.map(function(a){var b,c,d;return b=a,c=\"script\",new Promise(function(a,e){var f=\"\\n      link[rel=\\\"prefetch\\\"][href^=\\\"\".concat(b,\"\\\"],\\n      link[rel=\\\"preload\\\"][href^=\\\"\").concat(b,\"\\\"],\\n      script[src^=\\\"\").concat(b,\"\\\"]\");if(document.querySelector(f))return a();d=document.createElement(\"link\"),c&&(d.as=c),d.rel=\"prefetch\",d.crossOrigin=void 0,d.onload=a,d.onerror=e,d.href=b,document.head.appendChild(d)})}):[])}).then(function(){var a=d;e.requestIdleCallback(function(){return a.loadRoute(b,!0).catch(function(){})})}).catch(function(){})}}},(d=c(73891))&&d.__esModule;var e=c(9311);function f(a,b,c){var d,e=b.get(a);if(e)return\"future\"in e?e.future:Promise.resolve(e);var f=new Promise(function(a){d=a});return b.set(a,e={resolve:d,future:f}),c?c().then(function(a){return d(a),a}).catch(function(c){throw b.delete(a),c}):f}var g=function(a){try{return a=document.createElement(\"link\"),!!window.MSInputMethodContext&&!!document.documentMode||a.relList.supports(\"prefetch\")}catch(b){return!1}}(),h=Symbol(\"ASSET_LOAD_ERROR\");function i(a){return Object.defineProperty(a,h,{})}function j(a,b,c){return new Promise(function(d,f){var g=!1;a.then(function(a){g=!0,d(a)}).catch(f),e.requestIdleCallback(function(){return setTimeout(function(){g||f(c)},b)})})}function k(){return self.__BUILD_MANIFEST?Promise.resolve(self.__BUILD_MANIFEST):j(new Promise(function(a){var b=self.__BUILD_MANIFEST_CB;self.__BUILD_MANIFEST_CB=function(){a(self.__BUILD_MANIFEST),b&&b()}}),3800,i(new Error(\"Failed to load client build manifest\")))}function l(a,b){return k().then(function(c){if(!(b in c))throw i(new Error(\"Failed to lookup route: \".concat(b)));var d=c[b].map(function(b){return a+\"\/_next\/\"+encodeURI(b)});return{scripts:d.filter(function(a){return a.endsWith(\".js\")}),css:d.filter(function(a){return a.endsWith(\".css\")})}})}},90387:function(a,b,c){\"use strict\";function d(a,b,c){return(d=!function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(a){return!1}}()?function(a,b,c){var d=[null];d.push.apply(d,b);var f=new(Function.bind.apply(a,d))();return c&&e(f,c.prototype),f}:Reflect.construct).apply(null,arguments)}function e(a,b){return(e=Object.setPrototypeOf||function(a,b){return a.__proto__=b,a})(a,b)}function f(a){return(function(a){if(Array.isArray(a)){for(var b=0,c=new Array(a.length);b<a.length;b++)c[b]=a[b];return c}})(a)||(function(a){if(Symbol.iterator in Object(a)||\"[object Arguments]\"===Object.prototype.toString.call(a))return Array.from(a)})(a)||(function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance\")})()}Object.defineProperty(b,\"__esModule\",{value:!0}),Object.defineProperty(b,\"Router\",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(b,\"withRouter\",{enumerable:!0,get:function(){return k.default}}),b.useRouter=function(){return g.default.useContext(i.RouterContext)},b.createRouter=function(){for(var a=arguments.length,b=new Array(a),c=0;c<a;c++)b[c]=arguments[c];return m.router=d(h.default,f(b)),m.readyCallbacks.forEach(function(a){return a()}),m.readyCallbacks=[],m.router},b.makePublicRouterInstance=function(a){var b=a,c={},d=!0,e=!1,g=void 0;try{for(var i,j=n[Symbol.iterator]();!(d=(i=j.next()).done);d=!0){var k=i.value;if(\"object\"==typeof b[k]){c[k]=Object.assign(Array.isArray(b[k])?[]:{},b[k]);continue}c[k]=b[k]}}catch(l){e=!0,g=l}finally{try{d||null==j.return||j.return()}finally{if(e)throw g}}return c.events=h.default.events,o.forEach(function(a){c[a]=function(){for(var c,d=arguments.length,e=new Array(d),g=0;g<d;g++)e[g]=arguments[g];return(c=b)[a].apply(c,f(e))}}),c},b.default=void 0;var g=l(c(67294)),h=l(c(76273)),i=c(63462),j=l(c(80676)),k=l(c(38981));function l(a){return a&&a.__esModule?a:{default:a}}var m={router:null,readyCallbacks:[],ready:function(a){if(this.router)return a();this.readyCallbacks.push(a)}},n=[\"pathname\",\"route\",\"query\",\"asPath\",\"components\",\"isFallback\",\"basePath\",\"locale\",\"locales\",\"defaultLocale\",\"isReady\",\"isPreview\",\"isLocaleDomain\",\"domainLocales\",],o=[\"push\",\"replace\",\"reload\",\"back\",\"prefetch\",\"beforePopState\",];function p(){if(!m.router){var a=\"No router instance found.\\nYou should only use \\\"next\/router\\\" on the client side of your app.\\n\";throw new Error(a)}return m.router}Object.defineProperty(m,\"events\",{get:function(){return h.default.events}}),n.forEach(function(a){Object.defineProperty(m,a,{get:function(){return p()[a]}})}),o.forEach(function(a){m[a]=function(){for(var b,c=arguments.length,d=new Array(c),e=0;e<c;e++)d[e]=arguments[e];return(b=p())[a].apply(b,f(d))}}),[\"routeChangeStart\",\"beforeHistoryChange\",\"routeChangeComplete\",\"routeChangeError\",\"hashChangeStart\",\"hashChangeComplete\",].forEach(function(a){m.ready(function(){h.default.events.on(a,function(){for(var b,c=arguments.length,d=new Array(c),e=0;e<c;e++)d[e]=arguments[e];var g=\"on\".concat(a.charAt(0).toUpperCase()).concat(a.substring(1)),h=m;if(h[g])try{(b=h)[g].apply(b,f(d))}catch(i){console.error(\"Error when running the Router event: \".concat(g)),console.error(j.default(i)?\"\".concat(i.message,\"\\n\").concat(i.stack):i+\"\")}})})}),b.default=m},20699:function(a,b,c){\"use strict\";function d(a,b){return(function(a){if(Array.isArray(a))return a})(a)||(function(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!b||c.length!==b);d=!0);}catch(i){e=!0,f=i}finally{try{d||null==h.return||h.return()}finally{if(e)throw f}}return c})(a,b)||(function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")})()}b.zD=function(a){a.forEach(k)},(function(a){if(a&&a.__esModule)return a;var b={};if(null!=a){for(var c in a)if(Object.prototype.hasOwnProperty.call(a,c)){var d=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(a,c):{};d.get||d.set?Object.defineProperty(b,c,d):b[c]=a[c]}}b.default=a})(c(67294)),c(8404);var e=c(56007),f=c(9311),g=new Map(),h=new Set(),i=[\"onLoad\",\"dangerouslySetInnerHTML\",\"children\",\"onError\",\"strategy\",],j=function(a){var b=a.src,c=a.id,f=a.onLoad,j=void 0===f?function(){}:f,k=a.dangerouslySetInnerHTML,l=a.children,m=void 0===l?\"\":l,n=a.strategy,o=a.onError,p=c||b;if(!(p&&h.has(p))){if(g.has(b)){h.add(p),g.get(b).then(j,o);return}var q=document.createElement(\"script\"),r=new Promise(function(a,b){q.addEventListener(\"load\",function(b){a(),j&&j.call(this,b)}),q.addEventListener(\"error\",function(a){b(a)})}).catch(function(a){o&&o(a)});b&&g.set(b,r),h.add(p),k?q.innerHTML=k.__html||\"\":m?q.textContent=\"string\"==typeof m?m:Array.isArray(m)?m.join(\"\"):\"\":b&&(q.src=b);var s=!0,t=!1,u=void 0;try{for(var v,w=Object.entries(a)[Symbol.iterator]();!(s=(v=w.next()).done);s=!0){var x=d(v.value,2),y=x[0],z=x[1];if(!(void 0===z||i.includes(y))){var A=e.DOMAttributeNames[y]||y.toLowerCase();q.setAttribute(A,z)}}}catch(B){t=!0,u=B}finally{try{s||null==w.return||w.return()}finally{if(t)throw u}}q.setAttribute(\"data-nscript\",void 0===n?\"afterInteractive\":n),document.body.appendChild(q)}};function k(a){var b=a.strategy,c=void 0===b?\"afterInteractive\":b;\"afterInteractive\"===c?j(a):\"lazyOnload\"===c&&window.addEventListener(\"load\",function(){f.requestIdleCallback(function(){return j(a)})})}},77813:function(a,b,c){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.trackWebVitalMetric=function(a){f.push(a),e.forEach(function(b){return b(a)})},b.useExperimentalWebVitalsReport=function(a){var b=d.useRef(0);d.useEffect(function(){for(var c=function(c){a(c),b.current=f.length},d=b.current;d<f.length;d++)c(f[d]);return e.add(c),function(){e.delete(c)}},[a])},b.webVitalsCallbacks=void 0;var d=c(67294),e=new Set();b.webVitalsCallbacks=e;var f=[]},38981:function(a,b,c){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.default=function(a){var b=function(b){return e.default.createElement(a,Object.assign({router:f.useRouter()},b))};return b.getInitialProps=a.getInitialProps,b.origGetInitialProps=a.origGetInitialProps,b};var d,e=(d=c(67294))&&d.__esModule?d:{default:d},f=c(90387)},89185:function(a,b,c){\"use strict\";function d(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,\"value\"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}function e(a){return(e=Object.setPrototypeOf?Object.getPrototypeOf:function(a){return a.__proto__||Object.getPrototypeOf(a)})(a)}function f(a,b){return(f=Object.setPrototypeOf||function(a,b){return a.__proto__=b,a})(a,b)}Object.defineProperty(b,\"__esModule\",{value:!0}),b.default=void 0;var g=i(c(67294)),h=i(c(5443));function i(a){return a&&a.__esModule?a:{default:a}}var j={400:\"Bad Request\",404:\"This page could not be found\",405:\"Method Not Allowed\",500:\"Internal Server Error\"};function k(a){var b=a.res,c=a.err;return{statusCode:b&&b.statusCode?b.statusCode:c?c.statusCode:404}}var l=function(a){!function(a,b){if(\"function\"!=typeof b&&null!==b)throw new TypeError(\"Super expression must either be null or a function\");a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),b&&f(a,b)}(l,a);var b,c,i,k=function(a){var b=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(a){return!1}}();return function(){var c,d,f,g,h=e(a);if(b){var i=e(this).constructor;g=Reflect.construct(h,arguments,i)}else g=h.apply(this,arguments);return d=this,(f=g)&&(\"object\"==((c=f)&&\"undefined\"!=typeof Symbol&&c.constructor===Symbol?\"symbol\":typeof c)||\"function\"==typeof f)?f:(function(a){if(void 0===a)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return a})(d)}}(l);function l(){return!function(a,b){if(!(a instanceof b))throw new TypeError(\"Cannot call a class as a function\")}(this,l),k.apply(this,arguments)}return b=l,c=[{key:\"render\",value:function(){var a=this.props.statusCode,b=this.props.title||j[a]||\"An unexpected error has occurred\";return g.default.createElement(\"div\",{style:m.error},g.default.createElement(h.default,null,g.default.createElement(\"title\",null,a?\"\".concat(a,\": \").concat(b):\"Application error: a client-side exception has occurred\")),g.default.createElement(\"div\",null,g.default.createElement(\"style\",{dangerouslySetInnerHTML:{__html:\"body { margin: 0 }\"}}),a?g.default.createElement(\"h1\",{style:m.h1},a):null,g.default.createElement(\"div\",{style:m.desc},g.default.createElement(\"h2\",{style:m.h2},this.props.title||a?b:g.default.createElement(g.default.Fragment,null,\"Application error: a client-side exception has occurred (see the browser console for more information)\"),\".\"))))}}],d(b.prototype,c),i&&d(b,i),l}(g.default.Component);l.displayName=\"ErrorPage\",l.getInitialProps=k,l.origGetInitialProps=k,b.default=l;var m={error:{color:\"#000\",background:\"#fff\",fontFamily:\"-apple-system, BlinkMacSystemFont, Roboto, \\\"Segoe UI\\\", \\\"Fira Sans\\\", Avenir, \\\"Helvetica Neue\\\", \\\"Lucida Grande\\\", sans-serif\",height:\"100vh\",textAlign:\"center\",display:\"flex\",flexDirection:\"column\",alignItems:\"center\",justifyContent:\"center\"},desc:{display:\"inline-block\",textAlign:\"left\",lineHeight:\"49px\",height:\"49px\",verticalAlign:\"middle\"},h1:{display:\"inline-block\",borderRight:\"1px solid rgba(0, 0, 0,.3)\",margin:0,marginRight:\"20px\",padding:\"10px 23px 10px 0\",fontSize:\"24px\",fontWeight:500,verticalAlign:\"top\"},h2:{fontSize:\"14px\",fontWeight:\"normal\",lineHeight:\"inherit\",margin:0,padding:0}}},22227:function(a,b,c){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.AmpStateContext=void 0;var d,e=((d=c(67294))&&d.__esModule?d:{default:d}).default.createContext({});b.AmpStateContext=e},13240:function(a,b,c){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.isInAmpMode=g,b.useAmp=function(){return g(e.default.useContext(f.AmpStateContext))};var d,e=(d=c(67294))&&d.__esModule?d:{default:d},f=c(22227);function g(a){var b=void 0===a?{}:a,c=b.ampFirst,d=b.hybrid,e=b.hasQuery;return void 0!==c&&c|| void 0!==d&&d&& void 0!==e&&e}},8404:function(a,b,c){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.HeadManagerContext=void 0;var d,e=((d=c(67294))&&d.__esModule?d:{default:d}).default.createContext({});b.HeadManagerContext=e},5443:function(a,b,c){\"use strict\";function d(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}Object.defineProperty(b,\"__esModule\",{value:!0}),b.defaultHead=k,b.default=void 0;var e,f=function(a){if(a&&a.__esModule)return a;var b={};if(null!=a){for(var c in a)if(Object.prototype.hasOwnProperty.call(a,c)){var d=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(a,c):{};d.get||d.set?Object.defineProperty(b,c,d):b[c]=a[c]}}return b.default=a,b}(c(67294)),g=(e=c(55188))&&e.__esModule?e:{default:e},h=c(22227),i=c(8404),j=c(13240);function k(a){var b=[f.default.createElement(\"meta\",{charSet:\"utf-8\"})];return void 0!==a&&a||b.push(f.default.createElement(\"meta\",{name:\"viewport\",content:\"width=device-width\"})),b}function l(a,b){return\"string\"==typeof b||\"number\"==typeof b?a:b.type===f.default.Fragment?a.concat(f.default.Children.toArray(b.props.children).reduce(function(a,b){return\"string\"==typeof b||\"number\"==typeof b?a:a.concat(b)},[])):a.concat(b)}var m=[\"name\",\"httpEquiv\",\"charSet\",\"itemProp\"];function n(a,b){var c,e,g,h;return a.reduce(function(a,b){var c=f.default.Children.toArray(b.props.children);return a.concat(c)},[]).reduce(l,[]).reverse().concat(k(b.inAmpMode)).filter((c=new Set(),e=new Set(),g=new Set(),h={},function(a){var b=!0,d=!1;if(a.key&&\"number\"!=typeof a.key&&a.key.indexOf(\"$\")>0){d=!0;var f=a.key.slice(a.key.indexOf(\"$\")+1);c.has(f)?b=!1:c.add(f)}switch(a.type){case\"title\":case\"base\":e.has(a.type)?b=!1:e.add(a.type);break;case\"meta\":for(var i=0,j=m.length;i<j;i++){var k=m[i];if(a.props.hasOwnProperty(k))if(\"charSet\"===k)g.has(k)?b=!1:g.add(k);else{var l=a.props[k],n=h[k]||new Set();(\"name\"!==k||!d)&&n.has(l)?b=!1:(n.add(l),h[k]=n)}}break}return b})).reverse().map(function(a,c){var e=a.key||c;if(!b.inAmpMode&&\"link\"===a.type&&a.props.href&&[\"https:\/\/fonts.googleapis.com\/css\",\"https:\/\/use.typekit.net\/\"].some(function(b){return a.props.href.startsWith(b)})){var g=function(a){for(var b=1;b<arguments.length;b++){var c=null!=arguments[b]?arguments[b]:{},e=Object.keys(c);\"function\"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(c).filter(function(a){return Object.getOwnPropertyDescriptor(c,a).enumerable}))),e.forEach(function(b){d(a,b,c[b])})}return a}({},a.props||{});return g[\"data-href\"]=g.href,g.href=void 0,g[\"data-optimized-fonts\"]=!0,f.default.cloneElement(a,g)}return f.default.cloneElement(a,{key:e})})}b.default=function(a){var b=a.children,c=f.useContext(h.AmpStateContext),d=f.useContext(i.HeadManagerContext);return f.default.createElement(g.default,{reduceComponentsToState:n,headManager:d,inAmpMode:j.isInAmpMode(c)},b)}},94317:function(a,b){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.normalizeLocalePath=function(a,b){var c,d=a.split(\"\/\");return(b||[]).some(function(b){return!!d[1]&&d[1].toLowerCase()===b.toLowerCase()&&(c=b,d.splice(1,1),a=d.join(\"\/\")||\"\/\",!0)}),{pathname:a,detectedLocale:c}}},35660:function(a,b){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.default=function(){var a=Object.create(null);return{on:function(b,c){(a[b]||(a[b]=[])).push(c)},off:function(b,c){a[b]&&a[b].splice(a[b].indexOf(c)>>>0,1)},emit:function(b){for(var c=arguments.length,d=new Array(c>1?c-1:0),e=1;e<c;e++)d[e-1]=arguments[e];(a[b]||[]).slice().map(function(a){var b;a.apply(void 0,function(a){if(Array.isArray(a)){for(var b=0,c=new Array(a.length);b<a.length;b++)c[b]=a[b];return c}}(b=d)||function(a){if(Symbol.iterator in Object(a)||\"[object Arguments]\"===Object.prototype.toString.call(a))return Array.from(a)}(b)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance\")}())})}}}},63462:function(a,b,c){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.RouterContext=void 0;var d,e=((d=c(67294))&&d.__esModule?d:{default:d}).default.createContext(null);b.RouterContext=e},76273:function(a,b,c){\"use strict\";var d,e=(d=c(28520))&&d.__esModule?d:{default:d};function f(a,b,c,d,e,f,g){try{var h=a[f](g),i=h.value}catch(j){c(j);return}h.done?b(i):Promise.resolve(i).then(d,e)}function g(a){return function(){var b=this,c=arguments;return new Promise(function(d,e){var g=a.apply(b,c);function h(a){f(g,d,e,h,i,\"next\",a)}function i(a){f(g,d,e,h,i,\"throw\",a)}h(void 0)})}}function h(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,\"value\"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}function i(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}function j(a){for(var b=1;b<arguments.length;b++){var c=null!=arguments[b]?arguments[b]:{},d=Object.keys(c);\"function\"==typeof Object.getOwnPropertySymbols&&(d=d.concat(Object.getOwnPropertySymbols(c).filter(function(a){return Object.getOwnPropertyDescriptor(c,a).enumerable}))),d.forEach(function(b){i(a,b,c[b])})}return a}function k(a,b){return(function(a){if(Array.isArray(a))return a})(a)||(function(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!b||c.length!==b);d=!0);}catch(i){e=!0,f=i}finally{try{d||null==h.return||h.return()}finally{if(e)throw f}}return c})(a,b)||(function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")})()}Object.defineProperty(b,\"__esModule\",{value:!0}),b.getDomainLocale=function(a,b,c,d){return!1},b.addLocale=B,b.delLocale=C,b.hasBasePath=E,b.addBasePath=F,b.delBasePath=G,b.isLocalURL=H,b.interpolateAs=I,b.resolveHref=K,b.default=void 0;var l=c(82392),m=c(22669),n=z(c(80676)),o=c(74522),p=c(94317),q=z(c(35660)),r=c(63794),s=c(78689),t=c(36305),u=c(50466),v=z(c(72431)),w=c(33888),x=c(64095),y=c(49820);function z(a){return a&&a.__esModule?a:{default:a}}function A(){return Object.assign(new Error(\"Route Cancelled\"),{cancelled:!0})}function B(a,b,c){return a}function C(a,b){return a}function D(a){var b=a.indexOf(\"?\"),c=a.indexOf(\"#\");return(b> -1||c> -1)&&(a=a.substring(0,b> -1?b:c)),a}function E(a){return\"\"===(a=D(a))||a.startsWith(\"\/\")}function F(a){return(function(a,b){if(!a.startsWith(\"\/\")||!b)return a;var c=D(a);return l.normalizePathTrailingSlash(\"\".concat(b).concat(c))+a.substr(c.length)})(a,\"\")}function G(a){return(a=a.slice(0)).startsWith(\"\/\")||(a=\"\/\".concat(a)),a}function H(a){if(a.startsWith(\"\/\")||a.startsWith(\"#\")||a.startsWith(\"?\"))return!0;try{var b=r.getLocationOrigin(),c=new URL(a,b);return c.origin===b&&E(c.pathname)}catch(d){return!1}}function I(a,b,c){var d=\"\",e=x.getRouteRegex(a),f=e.groups,g=(b!==a?w.getRouteMatcher(e)(b):\"\")||c;d=a;var h=Object.keys(f);return h.every(function(a){var b=g[a]||\"\",c=f[a],e=c.repeat,h=c.optional,i=\"[\".concat(e?\"...\":\"\").concat(a,\"]\");return h&&(i=\"\".concat(b?\"\":\"\/\",\"[\").concat(i,\"]\")),e&&!Array.isArray(b)&&(b=[b]),(h||a in g)&&(d=d.replace(i,e?b.map(function(a){return encodeURIComponent(a)}).join(\"\/\"):encodeURIComponent(b))||\"\/\")})||(d=\"\"),{params:h,result:d}}function J(a,b){var c={};return Object.keys(a).forEach(function(d){b.includes(d)||(c[d]=a[d])}),c}function K(a,b,c){var d,e=\"string\"==typeof b?b:r.formatWithValidation(b),f=e.match(\/^[a-zA-Z]{1,}:\\\/\\\/\/),g=f?e.substr(f[0].length):e;if((g.split(\"?\")[0]||\"\").match(\/(\\\/\\\/|\\\\)\/)){console.error(\"Invalid href passed to next\/router: \".concat(e,\", repeated forward-slashes (\/\/) or backslashes \\\\ are not valid in the href\"));var h=r.normalizeRepeatedSlashes(g);e=(f?f[0]:\"\")+h}if(!H(e))return c?[e]:e;try{d=new URL(e.startsWith(\"#\")?a.asPath:a.pathname,\"http:\/\/n\")}catch(i){d=new URL(\"\/\",\"http:\/\/n\")}try{var j=new URL(e,d);j.pathname=l.normalizePathTrailingSlash(j.pathname);var k=\"\";if(s.isDynamicRoute(j.pathname)&&j.searchParams&&c){var m=u.searchParamsToUrlQuery(j.searchParams),n=I(j.pathname,j.pathname,m),o=n.result,p=n.params;o&&(k=r.formatWithValidation({pathname:o,hash:j.hash,query:J(m,p)}))}var q=j.origin===d.origin?j.href.slice(j.origin.length):j.href;return c?[q,k||q]:q}catch(t){return c?[e]:e}}function L(a){var b=r.getLocationOrigin();return a.startsWith(b)?a.substring(b.length):a}function M(a,b,c){var d=k(K(a,b,!0),2),e=d[0],f=d[1],g=r.getLocationOrigin(),h=e.startsWith(g),i=f&&f.startsWith(g);e=L(e),f=f?L(f):f;var j=h?e:F(e),l=c?L(K(a,c)):f||e;return{url:j,as:i?l:F(l)}}function N(a,b){var c=l.removePathTrailingSlash(o.denormalizePagePath(a));return\"\/404\"===c||\"\/_error\"===c?a:(b.includes(c)||b.some(function(b){if(s.isDynamicRoute(b)&&x.getRouteRegex(b).re.test(c))return a=b,!0}),l.removePathTrailingSlash(a))}var O=Symbol(\"SSG_DATA_NOT_FOUND\");function P(a,b,c){return fetch(a,{credentials:\"same-origin\"}).then(function(d){if(!d.ok){if(b>1&&d.status>=500)return P(a,b-1,c);if(404===d.status)return d.json().then(function(a){if(a.notFound)return{notFound:O};throw new Error(\"Failed to load static props\")});throw new Error(\"Failed to load static props\")}return c.text?d.text():d.json()})}function Q(a,b,c,d,e){var f=new URL(a,window.location.href).href;return void 0!==d[f]?d[f]:d[f]=P(a,b?3:1,{text:c}).catch(function(a){throw b||m.markAssetError(a),a}).then(function(a){return e||delete d[f],a}).catch(function(a){throw delete d[f],a})}var R=function(){var a,b,c;function d(a,b,c,e){var f,g=e.initialProps,h=e.pageLoader,i=e.App,j=e.wrapApp,k=e.Component,m=e.err,n=e.subscription,o=e.isFallback,p=e.locale,q=e.locales,u=e.defaultLocale,v=e.domainLocales,w=e.isPreview,x=this;!function(a,b){if(!(a instanceof b))throw new TypeError(\"Cannot call a class as a function\")}(this,d),this.sdc={},this.sdr={},this.sde={},this._idx=0,this.onPopState=function(a){var b,c=a.state;if(!c){var d=x.pathname,e=x.query;x.changeState(\"replaceState\",r.formatWithValidation({pathname:F(d),query:e}),r.getURL());return}if(c.__N){var f=c.url,g=c.as,h=c.options,i=c.idx;x._idx=i;var j=t.parseRelativeUrl(f).pathname;x.isSsr&&g===x.asPath&&j===x.pathname||x._bps&&!x._bps(c)||x.change(\"replaceState\",f,g,Object.assign({},h,{shallow:h.shallow&&x._shallow,locale:h.locale||x.defaultLocale}),b)}},this.route=l.removePathTrailingSlash(a),this.components={},\"\/_error\"!==a&&(this.components[this.route]={Component:k,initial:!0,props:g,err:m,__N_SSG:g&&g.__N_SSG,__N_SSP:g&&g.__N_SSP,__N_RSC:!!(null===(f=k)|| void 0===f?void 0:f.__next_rsc__)}),this.components[\"\/_app\"]={Component:i,styleSheets:[]},this.events=d.events,this.pageLoader=h,this.pathname=a,this.query=b;var y=s.isDynamicRoute(a)&&self.__NEXT_DATA__.autoExport;if(this.asPath=y?a:c,this.basePath=\"\",this.sub=n,this.clc=null,this._wrapApp=j,this.isSsr=!0,this.isFallback=o,this.isReady=!!(self.__NEXT_DATA__.gssp||self.__NEXT_DATA__.gip||self.__NEXT_DATA__.appGip&&!self.__NEXT_DATA__.gsp|| !y&&!self.location.search),this.isPreview=!!w,this.isLocaleDomain=!1,\"\/\/\"!==c.substr(0,2)){var z={locale:p};z._shouldResolveHref=c!==a,this.changeState(\"replaceState\",r.formatWithValidation({pathname:F(a),query:b}),r.getURL(),z)}window.addEventListener(\"popstate\",this.onPopState)}return a=d,b=[{key:\"reload\",value:function(){window.location.reload()}},{key:\"back\",value:function(){window.history.back()}},{key:\"push\",value:function(a,b,c){var d;return a=(d=M(this,a,b)).url,b=d.as,this.change(\"pushState\",a,b,void 0===c?{}:c)}},{key:\"replace\",value:function(a,b,c){var d;return a=(d=M(this,a,b)).url,b=d.as,this.change(\"replaceState\",a,b,void 0===c?{}:c)}},{key:\"change\",value:function(a,b,c,f,h){return g(e.default.mark(function g(){var i,k,o,p,q,u,v,y,z,A,K,L,P,Q,R,S,T,U,V,W,X,Y,Z,$,_,o,aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa;return e.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(H(b)){e.next=3;break}return window.location.href=b,e.abrupt(\"return\",!1);case 3:i=f._h||f._shouldResolveHref||D(b)===D(c),f._h&&(this.isReady=!0),k=this.locale,e.next=18;break;case 18:if(f._h||(this.isSsr=!1),r.ST&&performance.mark(\"routeChange\"),u={shallow:q=void 0!==(p=f.shallow)&&p},this._inFlightRoute&&this.abortComponentLoad(this._inFlightRoute,u),c=F(B(E(c)?G(c):c,f.locale,this.defaultLocale)),v=C(E(c)?G(c):c,this.locale),this._inFlightRoute=c,y=k!==this.locale,!(!f._h&&this.onlyAHashChange(v)&&!y)){e.next=35;break}return this.asPath=v,d.events.emit(\"hashChangeStart\",c,u),this.changeState(a,b,c,f),this.scrollToHash(v),this.notify(this.components[this.route],null),d.events.emit(\"hashChangeComplete\",c,u),e.abrupt(\"return\",!0);case 35:return A=(z=t.parseRelativeUrl(b)).pathname,K=z.query,e.prev=38,e.next=42,Promise.all([this.pageLoader.getPageList(),m.getClientBuildManifest(),this.pageLoader.getMiddlewareList(),]);case 42:L=(Q=e.sent)[0],P=(R=Q[1]).__rewrites,e.next=52;break;case 48:return e.prev=48,e.t0=e.catch(38),window.location.href=c,e.abrupt(\"return\",!1);case 52:if(this.urlIsNew(v)||y||(a=\"replaceState\"),S=c,A=A?l.removePathTrailingSlash(G(A)):A,i&&\"\/_error\"!==A&&(f._shouldResolveHref=!0,z.pathname=N(A,L),z.pathname!==A&&(A=z.pathname,z.pathname=F(A),b=r.formatWithValidation(z))),H(c)){e.next=61;break}e.next=59;break;throw new Error(\"Invalid href: \\\"\".concat(b,\"\\\" and as: \\\"\").concat(c,\"\\\", received relative href and external as\")+\"\\nSee more info: https:\/\/nextjs.org\/docs\/messages\/invalid-relative-url-external-as\");case 59:return window.location.href=c,e.abrupt(\"return\",!1);case 61:return S=C(G(S),this.locale),e.next=64,this._preflightRequest({as:c,cache:!0,pages:L,pathname:A,query:K});case 64:if(\"rewrite\"!==(T=e.sent).type){e.next=69;break}K=j({},K,T.parsedAs.query),S=T.asPath,A=T.resolvedHref,z.pathname=T.resolvedHref,b=r.formatWithValidation(z),e.next=81;break;case 69:if(!(\"redirect\"===T.type&&T.newAs)){e.next=73;break}return e.abrupt(\"return\",this.change(a,T.newUrl,T.newAs,f));case 73:if(!(\"redirect\"===T.type&&T.destination)){e.next=78;break}return window.location.href=T.destination,e.abrupt(\"return\",new Promise(function(){}));case 78:if(\"refresh\"!==T.type){e.next=81;break}return window.location.href=c,e.abrupt(\"return\",new Promise(function(){}));case 81:if(U=l.removePathTrailingSlash(A),!s.isDynamicRoute(U)){e.next=97;break}if(W=(V=t.parseRelativeUrl(S)).pathname,X=x.getRouteRegex(U),Y=w.getRouteMatcher(X)(W),Z=U===W,$=Z?I(U,W,K):{},!(!Y||Z&&!$.result)){e.next=96;break}if(!((_=Object.keys(X.groups).filter(function(a){return!K[a]})).length>0)){e.next=94;break}throw new Error((Z?\"The provided `href` (\".concat(b,\") value is missing query values (\").concat(_.join(\", \"),\") to be interpolated properly. \"):\"The provided `as` value (\".concat(W,\") is incompatible with the `href` value (\").concat(U,\"). \"))+\"Read more: https:\/\/nextjs.org\/docs\/messages\/\".concat(Z?\"href-interpolation-failed\":\"incompatible-href-as\"));case 94:e.next=97;break;case 96:Z?c=r.formatWithValidation(Object.assign({},V,{pathname:$.result,query:J(K,$.params)})):Object.assign(K,Y);case 97:return d.events.emit(\"routeChangeStart\",c,u),e.prev=98,e.next=102,this.getRouteInfo(U,A,K,c,S,u);case 102:if(ca=(ba=e.sent).error,da=ba.props,ea=ba.__N_SSG,fa=ba.__N_SSP,!((ea||fa)&&da)){e.next=129;break}if(!(da.pageProps&&da.pageProps.__N_REDIRECT)){e.next=114;break}if(!((ga=da.pageProps.__N_REDIRECT).startsWith(\"\/\")&& !1!==da.pageProps.__N_REDIRECT_BASE_PATH)){e.next=112;break}return(ha=t.parseRelativeUrl(ga)).pathname=N(ha.pathname,L),ja=(ia=M(this,ga,ga)).url,ka=ia.as,e.abrupt(\"return\",this.change(a,ja,ka,f));case 112:return window.location.href=ga,e.abrupt(\"return\",new Promise(function(){}));case 114:if(this.isPreview=!!da.__N_PREVIEW,da.notFound!==O){e.next=129;break}return e.prev=117,e.next=120,this.fetchComponent(\"\/404\");case 120:la=\"\/404\",e.next=126;break;case 123:e.prev=123,e.t1=e.catch(117),la=\"\/_error\";case 126:return e.next=128,this.getRouteInfo(la,la,K,c,S,{shallow:!1});case 128:ba=e.sent;case 129:return d.events.emit(\"beforeHistoryChange\",c,u),this.changeState(a,b,c,f),f._h&&\"\/_error\"===A&&(null===(o=self.__NEXT_DATA__.props)|| void 0===o?void 0:null===(aa=o.pageProps)|| void 0===aa?void 0:aa.statusCode)===500&&(null==da?void 0:da.pageProps)&&(da.pageProps.statusCode=500),ma=f.shallow&&this.route===U,oa=null!==(na=f.scroll)&& void 0!==na?na:!ma,pa=oa?{x:0,y:0}:null,e.next=138,this.set(U,A,K,v,ba,null!=h?h:pa).catch(function(a){if(a.cancelled)ca=ca||a;else throw a});case 138:if(!ca){e.next=141;break}throw d.events.emit(\"routeChangeError\",ca,v,u),ca;case 141:return d.events.emit(\"routeChangeComplete\",c,u),e.abrupt(\"return\",!0);case 146:if(e.prev=146,e.t2=e.catch(98),!(n.default(e.t2)&&e.t2.cancelled)){e.next=150;break}return e.abrupt(\"return\",!1);case 150:throw e.t2;case 151:case\"end\":return e.stop()}},g,this,[[38,48],[98,146],[117,123]])}).bind(this))()}},{key:\"changeState\",value:function(a,b,c,d){var e=void 0===d?{}:d;(\"pushState\"!==a||r.getURL()!==c)&&(this._shallow=e.shallow,window.history[a]({url:b,as:c,options:e,__N:!0,idx:this._idx=\"pushState\"!==a?this._idx:this._idx+1},\"\",c))}},{key:\"handleRouteInfoError\",value:function(a,b,c,f,h,i){return g(e.default.mark(function g(){var j,k,l,o,p;return e.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!a.cancelled){e.next=2;break}throw a;case 2:if(!(m.isAssetError(a)||i)){e.next=6;break}throw d.events.emit(\"routeChangeError\",a,f,h),window.location.href=f,A();case 6:if(e.prev=6,!(void 0===j|| void 0===k)){e.next=18;break}return e.next=14,this.fetchComponent(\"\/_error\");case 14:j=(o=e.sent).page,k=o.styleSheets;case 18:if((p={props:l,Component:j,styleSheets:k,err:a,error:a}).props){e.next=30;break}return e.prev=20,e.next=23,this.getInitialProps(j,{err:a,pathname:b,query:c});case 23:p.props=e.sent,e.next=30;break;case 26:e.prev=26,e.t0=e.catch(20),console.error(\"Error in error page `getInitialProps`: \",e.t0),p.props={};case 30:return e.abrupt(\"return\",p);case 33:return e.prev=33,e.t1=e.catch(6),e.abrupt(\"return\",this.handleRouteInfoError(n.default(e.t1)?e.t1:new Error(e.t1+\"\"),b,c,f,h,!0));case 36:case\"end\":return e.stop()}},g,this,[[6,33],[20,26]])}).bind(this))()}},{key:\"getRouteInfo\",value:function(a,b,c,d,f,h){return g(e.default.mark(function g(){var i,j,k,l,m,o,p,q,s,t,u,v,w,x;return e.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,i=this,j=this.components[a],!(h.shallow&&j&&this.route===a)){e.next=5;break}return e.abrupt(\"return\",j);case 5:if(k=void 0,!j||\"initial\"in j||(k=j),e.t0=k,e.t0){e.next=12;break}return e.next=11,this.fetchComponent(a).then(function(a){return{Component:a.page,styleSheets:a.styleSheets,__N_SSG:a.mod.__N_SSG,__N_SSP:a.mod.__N_SSP,__N_RSC:!!a.page.__next_rsc__}});case 11:e.t0=e.sent;case 12:m=(l=e.t0).Component,o=l.__N_SSG,p=l.__N_SSP,q=l.__N_RSC,e.next=18;break;case 18:return(o||p||q)&&(s=this.pageLoader.getDataHref({href:r.formatWithValidation({pathname:b,query:c}),asPath:f,ssg:o,rsc:q,locale:this.locale})),e.next=22,this._getData(function(){return o||p?Q(s,i.isSsr,!1,o?i.sdc:i.sdr,!!o&&!i.isPreview):i.getInitialProps(m,{pathname:b,query:c,asPath:d,locale:i.locale,locales:i.locales,defaultLocale:i.defaultLocale})});case 22:if(t=e.sent,!q){e.next=31;break}return u=this,e.next=27,this._getData(function(){return u._getFlightData(s)});case 27:w=(v=e.sent).fresh,x=v.data,t.pageProps=Object.assign(t.pageProps,{__flight_serialized__:x,__flight_fresh__:w});case 31:return l.props=t,this.components[a]=l,e.abrupt(\"return\",l);case 36:return e.prev=36,e.t1=e.catch(0),e.abrupt(\"return\",this.handleRouteInfoError(n.default(e.t1)?e.t1:new Error(e.t1+\"\"),b,c,d,h));case 39:case\"end\":return e.stop()}},g,this,[[0,36]])}).bind(this))()}},{key:\"set\",value:function(a,b,c,d,e,f){return this.isFallback=!1,this.route=a,this.pathname=b,this.query=c,this.asPath=d,this.notify(e,f)}},{key:\"beforePopState\",value:function(a){this._bps=a}},{key:\"onlyAHashChange\",value:function(a){if(!this.asPath)return!1;var b=k(this.asPath.split(\"#\"),2),c=b[0],d=b[1],e=k(a.split(\"#\"),2),f=e[0],g=e[1];return!!g&&c===f&&d===g||c===f&&d!==g}},{key:\"scrollToHash\",value:function(a){var b=k(a.split(\"#\"),2)[1];if(\"\"===b||\"top\"===b){window.scrollTo(0,0);return}var c=document.getElementById(b);if(c){c.scrollIntoView();return}var d=document.getElementsByName(b)[0];d&&d.scrollIntoView()}},{key:\"urlIsNew\",value:function(a){return this.asPath!==a}},{key:\"prefetch\",value:function(a,b,c){var d=void 0===b?a:b,f=void 0===c?{}:c;return g(e.default.mark(function b(){var c,g,h,i,k,m,n,o,p,q,s;return e.default.wrap(function(b){for(;;)switch(b.prev=b.next){case 0:return c=this,h=(g=t.parseRelativeUrl(a)).pathname,i=g.query,b.next=6,this.pageLoader.getPageList();case 6:k=b.sent,m=d,b.next=21;break;case 13:n=(o=b.sent).__rewrites,m=C(G((p=v.default(F(B(d,this.locale)),k,n,g.query,function(a){return N(a,k)},this.locales)).asPath),this.locale),p.matchedPage&&p.resolvedHref&&(h=p.resolvedHref,g.pathname=h,a=r.formatWithValidation(g)),b.next=22;break;case 21:g.pathname=N(g.pathname,k),g.pathname!==h&&(h=g.pathname,g.pathname=h,a=r.formatWithValidation(g));case 22:b.next=24;break;return b.abrupt(\"return\");case 24:return b.next=26,this._preflightRequest({as:F(d),cache:!0,pages:k,pathname:h,query:i});case 26:return\"rewrite\"===(q=b.sent).type&&(g.pathname=q.resolvedHref,h=q.resolvedHref,i=j({},i,q.parsedAs.query),m=q.asPath,a=r.formatWithValidation(g)),s=l.removePathTrailingSlash(h),b.next=31,Promise.all([this.pageLoader._isSsg(s).then(function(b){return!!b&&Q(c.pageLoader.getDataHref({href:a,asPath:m,ssg:!0,locale:void 0!==f.locale?f.locale:c.locale}),!1,!1,c.sdc,!0)}),this.pageLoader[f.priority?\"loadPage\":\"prefetch\"](s),]);case 31:case\"end\":return b.stop()}},b,this)}).bind(this))()}},{key:\"fetchComponent\",value:function(a){return g(e.default.mark(function b(){var c,d,f,g,h;return e.default.wrap(function(b){for(;;)switch(b.prev=b.next){case 0:return c=this,d=!1,f=this.clc=function(){d=!0},g=function(){if(d){var b=new Error(\"Abort fetching component for route: \\\"\".concat(a,\"\\\"\"));throw b.cancelled=!0,b}f===c.clc&&(c.clc=null)},b.prev=4,b.next=7,this.pageLoader.loadPage(a);case 7:return h=b.sent,g(),b.abrupt(\"return\",h);case 12:throw b.prev=12,b.t0=b.catch(4),g(),b.t0;case 16:case\"end\":return b.stop()}},b,this,[[4,12]])}).bind(this))()}},{key:\"_getData\",value:function(a){var b=this,c=!1,d=function(){c=!0};return this.clc=d,a().then(function(a){if(d===b.clc&&(b.clc=null),c){var e=new Error(\"Loading initial props cancelled\");throw e.cancelled=!0,e}return a})}},{key:\"_getFlightData\",value:function(a){var b=this,c=new URL(a,window.location.href).href;return!this.isPreview&&this.sdc[c]?Promise.resolve({fresh:!1,data:this.sdc[c]}):Q(a,!0,!0,this.sdc,!1).then(function(a){return b.sdc[c]=a,{fresh:!0,data:a}})}},{key:\"_preflightRequest\",value:function(a){return g(e.default.mark(function b(){var c,d,f,g,h,i,j,m,n,o,q,r,s;return e.default.wrap(function(b){for(;;)switch(b.prev=b.next){case 0:return d=C(E(a.as)?G(a.as):a.as,this.locale),b.next=4,this.pageLoader.getMiddlewareList();case 4:if(g=(f=b.sent).some(function(a){var b=k(a,2),c=b[0],e=b[1];return w.getRouteMatcher(y.getMiddlewareRegex(c,!e))(d)})){b.next=8;break}return b.abrupt(\"return\",{type:\"next\"});case 8:return b.next=10,this._getPreflightData({preflightHref:a.as,shouldCache:a.cache});case 10:if(!(null===(c=(h=b.sent).rewrite)|| void 0===c?void 0:c.startsWith(\"\/\"))){b.next=18;break}return i=t.parseRelativeUrl(p.normalizeLocalePath(E(h.rewrite)?G(h.rewrite):h.rewrite,this.locales).pathname),j=l.removePathTrailingSlash(i.pathname),a.pages.includes(j)?(m=!0,n=j):(n=N(j,a.pages))!==i.pathname&&a.pages.includes(n)&&(m=!0),b.abrupt(\"return\",{type:\"rewrite\",asPath:i.pathname,parsedAs:i,matchedPage:m,resolvedHref:n});case 18:if(!h.redirect){b.next=24;break}if(!h.redirect.startsWith(\"\/\")){b.next=23;break}return r=(q=M(this,o=l.removePathTrailingSlash(p.normalizeLocalePath(E(h.redirect)?G(h.redirect):h.redirect,this.locales).pathname),o)).url,s=q.as,b.abrupt(\"return\",{type:\"redirect\",newUrl:r,newAs:s});case 23:return b.abrupt(\"return\",{type:\"redirect\",destination:h.redirect});case 24:if(!(h.refresh&&!h.ssr)){b.next=26;break}return b.abrupt(\"return\",{type:\"refresh\"});case 26:return b.abrupt(\"return\",{type:\"next\"});case 27:case\"end\":return b.stop()}},b,this)}).bind(this))()}},{key:\"_getPreflightData\",value:function(a){var b=this,c=this,d=a.preflightHref,e=a.shouldCache,f=void 0!==e&&e,g=new URL(d,window.location.href).href;return!this.isPreview&&f&&this.sde[g]?Promise.resolve(this.sde[g]):fetch(d,{method:\"HEAD\",credentials:\"same-origin\",headers:{\"x-middleware-preflight\":\"1\"}}).then(function(a){if(!a.ok)throw new Error(\"Failed to preflight request\");return{redirect:a.headers.get(\"Location\"),refresh:a.headers.has(\"x-middleware-refresh\"),rewrite:a.headers.get(\"x-middleware-rewrite\"),ssr:!!a.headers.get(\"x-middleware-ssr\")}}).then(function(a){return f&&(b.sde[g]=a),a}).catch(function(a){throw delete c.sde[g],a})}},{key:\"getInitialProps\",value:function(a,b){var c=this.components[\"\/_app\"].Component,d=this._wrapApp(c);return b.AppTree=d,r.loadGetInitialProps(c,{AppTree:d,Component:a,router:this,ctx:b})}},{key:\"abortComponentLoad\",value:function(a,b){this.clc&&(d.events.emit(\"routeChangeError\",A(),a,b),this.clc(),this.clc=null)}},{key:\"notify\",value:function(a,b){return this.sub(a,this.components[\"\/_app\"].Component,b)}}],h(a.prototype,b),c&&h(a,c),d}();R.events=q.default(),b.default=R},4611:function(a,b,c){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.formatUrl=function(a){var b=a.auth,c=a.hostname,f=a.protocol||\"\",g=a.pathname||\"\",h=a.hash||\"\",i=a.query||\"\",j=!1;b=b?encodeURIComponent(b).replace(\/%3A\/i,\":\")+\"@\":\"\",a.host?j=b+a.host:c&&(j=b+(~c.indexOf(\":\")?\"[\".concat(c,\"]\"):c),a.port&&(j+=\":\"+a.port)),i&&\"object\"==typeof i&&(i=String(d.urlQueryToSearchParams(i)));var k=a.search||i&&\"?\".concat(i)||\"\";return f&&\":\"!==f.substr(-1)&&(f+=\":\"),a.slashes||(!f||e.test(f))&& !1!==j?(j=\"\/\/\"+(j||\"\"),g&&\"\/\"!==g[0]&&(g=\"\/\"+g)):j||(j=\"\"),h&&\"#\"!==h[0]&&(h=\"#\"+h),k&&\"?\"!==k[0]&&(k=\"?\"+k),g=g.replace(\/[?#]\/g,encodeURIComponent),k=k.replace(\"#\",\"%23\"),\"\".concat(f).concat(j).concat(g).concat(k).concat(h)};var d=function(a){if(a&&a.__esModule)return a;var b={};if(null!=a){for(var c in a)if(Object.prototype.hasOwnProperty.call(a,c)){var d=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(a,c):{};d.get||d.set?Object.defineProperty(b,c,d):b[c]=a[c]}}return b.default=a,b}(c(50466)),e=\/https?|ftp|gopher|file\/},73891:function(a,b){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.default=function(a,b){return(\"\/\"===a?\"\/index\":\/^\\\/index(\\\/|$)\/.test(a)?\"\/index\".concat(a):\"\".concat(a))+(void 0===b?\"\":b)}},49820:function(a,b,c){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.getMiddlewareRegex=function(a,b){var c=void 0===b||b,e=d.getParametrizedRoute(a),f=c?\"(?!_next).*\":\"\",g=c?\"(?:(\/.*)?)\":\"\";return\"routeKeys\"in e?\"\/\"===e.parameterizedRoute?{groups:{},namedRegex:\"^\/\".concat(f,\"$\"),re:new RegExp(\"^\/\".concat(f,\"$\")),routeKeys:{}}:{groups:e.groups,namedRegex:\"^\".concat(e.namedParameterizedRoute).concat(g,\"$\"),re:new RegExp(\"^\".concat(e.parameterizedRoute).concat(g,\"$\")),routeKeys:e.routeKeys}:\"\/\"===e.parameterizedRoute?{groups:{},re:new RegExp(\"^\/\".concat(f,\"$\"))}:{groups:{},re:new RegExp(\"^\".concat(e.parameterizedRoute).concat(g,\"$\"))}};var d=c(64095)},78689:function(a,b){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.isDynamicRoute=function(a){return c.test(a)};var c=\/\\\/\\[[^\/]+?\\](?=\\\/|$)\/},36305:function(a,b,c){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.parseRelativeUrl=function(a,b){var c=new URL(d.getLocationOrigin()),f=b?new URL(b,c):c,g=new URL(a,f),h=g.pathname,i=g.searchParams,j=g.search,k=g.hash,l=g.href,m=g.origin;if(m!==c.origin)throw new Error(\"invariant: invalid relative URL, router received \".concat(a));return{pathname:h,query:e.searchParamsToUrlQuery(i),search:j,hash:k,href:l.slice(c.origin.length)}};var d=c(63794),e=c(50466)},50466:function(a,b){\"use strict\";function c(a){return\"string\"!=typeof a&&(\"number\"!=typeof a||isNaN(a))&&\"boolean\"!=typeof a?\"\":String(a)}Object.defineProperty(b,\"__esModule\",{value:!0}),b.searchParamsToUrlQuery=function(a){var b={};return a.forEach(function(a,c){void 0===b[c]?b[c]=a:Array.isArray(b[c])?b[c].push(a):b[c]=[b[c],a]}),b},b.urlQueryToSearchParams=function(a){var b=new URLSearchParams();return Object.entries(a).forEach(function(a){var d,e=function(a){if(Array.isArray(a))return a}(d=a)||function(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!b||c.length!==b);d=!0);}catch(i){e=!0,f=i}finally{try{d||null==h.return||h.return()}finally{if(e)throw f}}return c}(d,2)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}(),f=e[0],g=e[1];Array.isArray(g)?g.forEach(function(a){return b.append(f,c(a))}):b.set(f,c(g))}),b},b.assign=function(a){for(var b=arguments.length,c=new Array(b>1?b-1:0),d=1;d<b;d++)c[d-1]=arguments[d];return c.forEach(function(b){Array.from(b.keys()).forEach(function(b){return a.delete(b)}),b.forEach(function(b,c){return a.append(c,b)})}),a}},33888:function(a,b,c){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.getRouteMatcher=function(a){var b=a.re,c=a.groups;return function(a){var e=b.exec(a);if(!e)return!1;var f=function(a){try{return decodeURIComponent(a)}catch(b){throw new d.DecodeError(\"failed to decode param\")}},g={};return Object.keys(c).forEach(function(a){var b=c[a],d=e[b.pos];void 0!==d&&(g[a]=~d.indexOf(\"\/\")?d.split(\"\/\").map(function(a){return f(a)}):b.repeat?[f(d)]:f(d))}),g}};var d=c(63794)},64095:function(a,b){\"use strict\";function c(a){var b=(a.replace(\/\\\/$\/,\"\")||\"\/\").slice(1).split(\"\/\"),c={},d=1;return{parameterizedRoute:b.map(function(a){if(a.startsWith(\"[\")&&a.endsWith(\"]\")){var b,e,f,g=((e=(b=a.slice(1,-1)).startsWith(\"[\")&&b.endsWith(\"]\"))&&(b=b.slice(1,-1)),(f=b.startsWith(\"...\"))&&(b=b.slice(3)),{key:b,repeat:f,optional:e}),h=g.key,i=g.optional,j=g.repeat;return c[h]={pos:d++,repeat:j,optional:i},j?i?\"(?:\/(.+?))?\":\"\/(.+?)\":\"\/([^\/]+?)\"}return\"\/\".concat(a.replace(\/[|\\\\{}()[\\]^$+*?.-]\/g,\"\\\\$&\"))}).join(\"\"),groups:c}}Object.defineProperty(b,\"__esModule\",{value:!0}),b.getParametrizedRoute=c,b.getRouteRegex=function(a){var b=c(a);return\"routeKeys\"in b?{re:new RegExp(\"^\".concat(b.parameterizedRoute,\"(?:\/)?$\")),groups:b.groups,routeKeys:b.routeKeys,namedRegex:\"^\".concat(b.namedParameterizedRoute,\"(?:\/)?$\")}:{re:new RegExp(\"^\".concat(b.parameterizedRoute,\"(?:\/)?$\")),groups:b.groups}}},88027:function(a,b){\"use strict\";var c;Object.defineProperty(b,\"__esModule\",{value:!0}),b.setConfig=function(a){c=a},b.default=void 0,b.default=function(){return c}},55188:function(a,b,c){\"use strict\";function d(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,\"value\"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}function e(a){return(e=Object.setPrototypeOf?Object.getPrototypeOf:function(a){return a.__proto__||Object.getPrototypeOf(a)})(a)}function f(a,b){return(f=Object.setPrototypeOf||function(a,b){return a.__proto__=b,a})(a,b)}Object.defineProperty(b,\"__esModule\",{value:!0}),b.default=void 0;var g=function(a){!function(a,b){if(\"function\"!=typeof b&&null!==b)throw new TypeError(\"Super expression must either be null or a function\");a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),b&&f(a,b)}(i,a);var b,c,g,h=function(a){var b=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(a){return!1}}();return function(){var c,d,f,g,h=e(a);if(b){var i=e(this).constructor;g=Reflect.construct(h,arguments,i)}else g=h.apply(this,arguments);return d=this,(f=g)&&(\"object\"==((c=f)&&\"undefined\"!=typeof Symbol&&c.constructor===Symbol?\"symbol\":typeof c)||\"function\"==typeof f)?f:(function(a){if(void 0===a)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return a})(d)}}(i);function i(a){var b;return!function(a,b){if(!(a instanceof b))throw new TypeError(\"Cannot call a class as a function\")}(this,i),(b=h.call(this,a)).emitChange=function(){if(b._hasHeadManager){var a;b.props.headManager.updateHead(b.props.reduceComponentsToState(function(a){if(Array.isArray(a)){for(var b=0,c=new Array(a.length);b<a.length;b++)c[b]=a[b];return c}}(a=b.props.headManager.mountedInstances)||function(a){if(Symbol.iterator in Object(a)||\"[object Arguments]\"===Object.prototype.toString.call(a))return Array.from(a)}(a)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance\")}(),b.props))}},b._hasHeadManager=b.props.headManager&&b.props.headManager.mountedInstances,b}return c=[{key:\"componentDidMount\",value:function(){this._hasHeadManager&&this.props.headManager.mountedInstances.add(this),this.emitChange()}},{key:\"componentDidUpdate\",value:function(){this.emitChange()}},{key:\"componentWillUnmount\",value:function(){this._hasHeadManager&&this.props.headManager.mountedInstances.delete(this),this.emitChange()}},{key:\"render\",value:function(){return null}}],d((b=i).prototype,c),g&&d(b,g),i}(function(a){if(a&&a.__esModule)return a;var b={};if(null!=a){for(var c in a)if(Object.prototype.hasOwnProperty.call(a,c)){var d=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(a,c):{};d.get||d.set?Object.defineProperty(b,c,d):b[c]=a[c]}}return b.default=a,b}(c(67294)).Component);b.default=g},63794:function(a,b,c){\"use strict\";var d,e=(d=c(28520))&&d.__esModule?d:{default:d};function f(a,b,c,d,e,f,g){try{var h=a[f](g),i=h.value}catch(j){c(j);return}h.done?b(i):Promise.resolve(i).then(d,e)}function g(a,b,c){return(g=!function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(a){return!1}}()?function(a,b,c){var d=[null];d.push.apply(d,b);var e=new(Function.bind.apply(a,d))();return c&&i(e,c.prototype),e}:Reflect.construct).apply(null,arguments)}function h(a){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(a){return a.__proto__||Object.getPrototypeOf(a)})(a)}function i(a,b){return(i=Object.setPrototypeOf||function(a,b){return a.__proto__=b,a})(a,b)}function j(a){var b=\"function\"==typeof Map?new Map():void 0;return(j=function(a){var c;if(null===a||(c=a,-1===Function.toString.call(c).indexOf(\"[native code]\")))return a;if(\"function\"!=typeof a)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==b){if(b.has(a))return b.get(a);b.set(a,d)}function d(){return g(a,arguments,h(this).constructor)}return d.prototype=Object.create(a.prototype,{constructor:{value:d,enumerable:!1,writable:!0,configurable:!0}}),i(d,a)})(a)}Object.defineProperty(b,\"__esModule\",{value:!0}),b.execOnce=function(a){var b,c=!1;return function(){for(var d,e=arguments.length,f=new Array(e),g=0;g<e;g++)f[g]=arguments[g];return c||(c=!0,b=a.apply(void 0,function(a){if(Array.isArray(a)){for(var b=0,c=new Array(a.length);b<a.length;b++)c[b]=a[b];return c}}(d=f)||function(a){if(Symbol.iterator in Object(a)||\"[object Arguments]\"===Object.prototype.toString.call(a))return Array.from(a)}(d)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance\")}())),b}},b.getLocationOrigin=m,b.getURL=function(){var a=window.location.href,b=m();return a.substring(b.length)},b.getDisplayName=n,b.isResSent=o,b.normalizeRepeatedSlashes=function(a){var b=a.split(\"?\");return b[0].replace(\/\\\\\/g,\"\/\").replace(\/\\\/\\\/+\/g,\"\/\")+(b[1]?\"?\".concat(b.slice(1).join(\"?\")):\"\")},b.loadGetInitialProps=p,b.formatWithValidation=function(a){return k.formatUrl(a)},b.HtmlContext=b.ST=b.SP=b.urlObjectKeys=void 0;var k=c(4611),l=c(67294);function m(){var a=window.location,b=a.protocol,c=a.hostname,d=a.port;return\"\".concat(b,\"\/\/\").concat(c).concat(d?\":\"+d:\"\")}function n(a){return\"string\"==typeof a?a:a.displayName||a.name||\"Unknown\"}function o(a){return a.finished||a.headersSent}function p(a,b){return q.apply(this,arguments)}function q(){return(q=(function(a){return function(){var b=this,c=arguments;return new Promise(function(d,e){var g=a.apply(b,c);function h(a){f(g,d,e,h,i,\"next\",a)}function i(a){f(g,d,e,h,i,\"throw\",a)}h(void 0)})}})(e.default.mark(function a(b,c){var d,f,g;return e.default.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:a.next=5;break;case 5:if(d=c.res||c.ctx&&c.ctx.res,b.getInitialProps){a.next=13;break}if(!(c.ctx&&c.Component)){a.next=12;break}return a.next=10,p(c.Component,c.ctx);case 10:return a.t0=a.sent,a.abrupt(\"return\",{pageProps:a.t0});case 12:return a.abrupt(\"return\",{});case 13:return a.next=15,b.getInitialProps(c);case 15:if(f=a.sent,!(d&&o(d))){a.next=18;break}return a.abrupt(\"return\",f);case 18:if(f){a.next=21;break}throw g=\"\\\"\".concat(n(b),\".getInitialProps()\\\" should resolve to an object. But found \\\"\").concat(f,\"\\\" instead.\"),new Error(g);case 21:return a.abrupt(\"return\",f);case 23:case\"end\":return a.stop()}},a)}))).apply(this,arguments)}b.urlObjectKeys=[\"auth\",\"hash\",\"host\",\"hostname\",\"href\",\"path\",\"pathname\",\"port\",\"protocol\",\"query\",\"search\",\"slashes\",];var r=\"undefined\"!=typeof performance;b.SP=r;var s=r&&\"function\"==typeof performance.mark&&\"function\"==typeof performance.measure;b.ST=s;var t=function(a){!function(a,b){if(\"function\"!=typeof b&&null!==b)throw new TypeError(\"Super expression must either be null or a function\");a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),b&&i(a,b)}(c,a);var b=function(a){var b=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(a){return!1}}();return function(){var c,d,e,f,g=h(a);if(b){var i=h(this).constructor;f=Reflect.construct(g,arguments,i)}else f=g.apply(this,arguments);return d=this,(e=f)&&(\"object\"==((c=e)&&\"undefined\"!=typeof Symbol&&c.constructor===Symbol?\"symbol\":typeof c)||\"function\"==typeof e)?e:(function(a){if(void 0===a)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return a})(d)}}(c);function c(){return!function(a,b){if(!(a instanceof b))throw new TypeError(\"Cannot call a class as a function\")}(this,c),b.apply(this,arguments)}return c}(j(Error));b.DecodeError=t;var u=l.createContext(null);b.HtmlContext=u},38745:function(a){a.exports=(function(){var a={770:function(a,b){!function(a,c){c(b)}(this,function(a){\"use strict\";var b,c,d,e,f=function(a,b){return{name:a,value:void 0===b?-1:b,delta:0,entries:[],id:\"v2-\".concat(Date.now(),\"-\").concat(Math.floor(8999999999999*Math.random())+10e11)}},g=function(a,b){try{if(PerformanceObserver.supportedEntryTypes.includes(a)){if(\"first-input\"===a&&!(\"PerformanceEventTiming\"in self))return;var c=new PerformanceObserver(function(a){return a.getEntries().map(b)});return c.observe({type:a,buffered:!0}),c}}catch(d){}},h=function(a,b){var c=function c(d){\"pagehide\"!==d.type&&\"hidden\"!==document.visibilityState||(a(d),b&&(removeEventListener(\"visibilitychange\",c,!0),removeEventListener(\"pagehide\",c,!0)))};addEventListener(\"visibilitychange\",c,!0),addEventListener(\"pagehide\",c,!0)},i=function(a){addEventListener(\"pageshow\",function(b){b.persisted&&a(b)},!0)},j=function(a,b,c){var d;return function(e){b.value>=0&&(e||c)&&(b.delta=b.value-(d||0),(b.delta|| void 0===d)&&(d=b.value,a(b)))}},k=-1,l=function(){return\"hidden\"===document.visibilityState?0:1\/0},m=function(){h(function(a){k=a.timeStamp},!0)},n=function(){return k<0&&(k=l(),m(),i(function(){setTimeout(function(){k=l(),m()},0)})),{get firstHiddenTime(){return k}}},o=function(a,b){var c,d=n(),e=f(\"FCP\"),h=function(a){\"first-contentful-paint\"===a.name&&(l&&l.disconnect(),a.startTime<d.firstHiddenTime&&(e.value=a.startTime,e.entries.push(a),c(!0)))},k=performance.getEntriesByName&&performance.getEntriesByName(\"first-contentful-paint\")[0],l=k?null:g(\"paint\",h);(k||l)&&(c=j(a,e,b),k&&h(k),i(function(d){c=j(a,e=f(\"FCP\"),b),requestAnimationFrame(function(){requestAnimationFrame(function(){e.value=performance.now()-d.timeStamp,c(!0)})})}))},p=!1,q=-1,r={passive:!0,capture:!0},s=new Date,t=function(a,e){b||(b=e,c=a,d=new Date,w(removeEventListener),u())},u=function(){if(c>=0&&c<d-s){var a={entryType:\"first-input\",name:b.type,target:b.target,cancelable:b.cancelable,startTime:b.timeStamp,processingStart:b.timeStamp+c};e.forEach(function(b){b(a)}),e=[]}},v=function(a){if(a.cancelable){var b,c,d,e,f,g=(a.timeStamp>10e11?new Date:performance.now())-a.timeStamp;\"pointerdown\"==a.type?(b=g,c=a,d=function(){t(b,c),f()},e=function(){f()},f=function(){removeEventListener(\"pointerup\",d,r),removeEventListener(\"pointercancel\",e,r)},addEventListener(\"pointerup\",d,r),addEventListener(\"pointercancel\",e,r)):t(g,a)}},w=function(a){[\"mousedown\",\"keydown\",\"touchstart\",\"pointerdown\"].forEach(function(b){return a(b,v,r)})},x=new Set;a.getCLS=function(a,b){p||(o(function(a){q=a.value}),p=!0);var c,d=function(b){q> -1&&a(b)},e=f(\"CLS\",0),k=0,l=[],m=function(a){if(!a.hadRecentInput){var b=l[0],d=l[l.length-1];k&&a.startTime-d.startTime<1000&&a.startTime-b.startTime<5000?(k+=a.value,l.push(a)):(k=a.value,l=[a]),k>e.value&&(e.value=k,e.entries=l,c())}},n=g(\"layout-shift\",m);n&&(c=j(d,e,b),h(function(){n.takeRecords().map(m),c(!0)}),i(function(){k=0,q=-1,c=j(d,e=f(\"CLS\",0),b)}))},a.getFCP=o,a.getFID=function(a,d){var k,l=n(),m=f(\"FID\"),o=function(a){a.startTime<l.firstHiddenTime&&(m.value=a.processingStart-a.startTime,m.entries.push(a),k(!0))},p=g(\"first-input\",o);k=j(a,m,d),p&&h(function(){p.takeRecords().map(o),p.disconnect()},!0),p&&i(function(){var g;k=j(a,m=f(\"FID\"),d),e=[],c=-1,b=null,w(addEventListener),g=o,e.push(g),u()})},a.getLCP=function(a,b){var c,d=n(),e=f(\"LCP\"),k=function(a){var b=a.startTime;b<d.firstHiddenTime&&(e.value=b,e.entries.push(a)),c()},l=g(\"largest-contentful-paint\",k);if(l){c=j(a,e,b);var m=function(){x.has(e.id)||(l.takeRecords().map(k),l.disconnect(),x.add(e.id),c(!0))};[\"keydown\",\"click\"].forEach(function(a){addEventListener(a,m,{once:!0,capture:!0})}),h(m,!0),i(function(d){c=j(a,e=f(\"LCP\"),b),requestAnimationFrame(function(){requestAnimationFrame(function(){e.value=performance.now()-d.timeStamp,x.add(e.id),c(!0)})})})}},a.getTTFB=function(a){var b,c=f(\"TTFB\");b=function(){try{var b=performance.getEntriesByType(\"navigation\")[0]||function(){var a=performance.timing,b={entryType:\"navigation\",startTime:0};for(var c in a)\"navigationStart\"!==c&&\"toJSON\"!==c&&(b[c]=Math.max(a[c]-a.navigationStart,0));return b}();if(c.value=c.delta=b.responseStart,c.value<0)return;c.entries=[b],a(c)}catch(d){}},\"complete\"===document.readyState?setTimeout(b,0):addEventListener(\"pageshow\",b)},Object.defineProperty(a,\"__esModule\",{value:!0})})}},b={};function c(d){if(b[d])return b[d].exports;var e=b[d]={exports:{}},f=!0;try{a[d].call(e.exports,e,e.exports,c),f=!1}finally{f&&delete b[d]}return e.exports}return c.ab=\"\/\/\",c(770)})()},80676:function(a,b){\"use strict\";Object.defineProperty(b,\"__esModule\",{value:!0}),b.default=function(a){return\"object\"==typeof a&&null!==a&&\"name\"in a&&\"message\"in a}},74522:function(a,b){\"use strict\";function c(a){return a.replace(\/\\\\\/g,\"\/\")}Object.defineProperty(b,\"__esModule\",{value:!0}),b.normalizePathSep=c,b.denormalizePagePath=function(a){return(a=c(a)).startsWith(\"\/index\/\")?a=a.slice(6):\"\/index\"===a&&(a=\"\/\"),a}},28520:function(a){var b=function(a){\"use strict\";var b,c=Object.prototype,d=c.hasOwnProperty,e=\"function\"==typeof Symbol?Symbol:{},f=e.iterator||\"@@iterator\",g=e.asyncIterator||\"@@asyncIterator\",h=e.toStringTag||\"@@toStringTag\";function i(a,b,c,d){var e=b&&b.prototype instanceof o?b:o,f=Object.create(e.prototype),g=new B(d||[]);return f._invoke=x(a,c,g),f}function j(a,b,c){try{return{type:\"normal\",arg:a.call(b,c)}}catch(d){return{type:\"throw\",arg:d}}}a.wrap=i;var k=\"suspendedStart\",l=\"executing\",m=\"completed\",n={};function o(){}function p(){}function q(){}var r={};r[f]=function(){return this};var s=Object.getPrototypeOf,t=s&&s(s(C([])));t&&t!==c&&d.call(t,f)&&(r=t);var u=q.prototype=o.prototype=Object.create(r);function v(a){[\"next\",\"throw\",\"return\"].forEach(function(b){a[b]=function(a){return this._invoke(b,a)}})}function w(a,b){var c;function e(c,f,g,h){var i=j(a[c],a,f);if(\"throw\"===i.type)h(i.arg);else{var k=i.arg,l=k.value;return l&&\"object\"==typeof l&&d.call(l,\"__await\")?b.resolve(l.__await).then(function(a){e(\"next\",a,g,h)},function(a){e(\"throw\",a,g,h)}):b.resolve(l).then(function(a){k.value=a,g(k)},function(a){return e(\"throw\",a,g,h)})}}this._invoke=function(a,d){function f(){return new b(function(b,c){e(a,d,b,c)})}return c=c?c.then(f,f):f()}}function x(a,b,c){var d=k;return function(e,f){if(d===l)throw new Error(\"Generator is already running\");if(d===m){if(\"throw\"===e)throw f;return D()}for(c.method=e,c.arg=f;;){var g=c.delegate;if(g){var h=y(g,c);if(h){if(h===n)continue;return h}}if(\"next\"===c.method)c.sent=c._sent=c.arg;else if(\"throw\"===c.method){if(d===k)throw d=m,c.arg;c.dispatchException(c.arg)}else\"return\"===c.method&&c.abrupt(\"return\",c.arg);d=l;var i=j(a,b,c);if(\"normal\"===i.type){if(d=c.done?m:\"suspendedYield\",i.arg===n)continue;return{value:i.arg,done:c.done}}\"throw\"===i.type&&(d=m,c.method=\"throw\",c.arg=i.arg)}}}function y(a,c){var d=a.iterator[c.method];if(d===b){if(c.delegate=null,\"throw\"===c.method){if(a.iterator.return&&(c.method=\"return\",c.arg=b,y(a,c),\"throw\"===c.method))return n;c.method=\"throw\",c.arg=new TypeError(\"The iterator does not provide a 'throw' method\")}return n}var e=j(d,a.iterator,c.arg);if(\"throw\"===e.type)return c.method=\"throw\",c.arg=e.arg,c.delegate=null,n;var f=e.arg;return f?f.done?(c[a.resultName]=f.value,c.next=a.nextLoc,\"return\"!==c.method&&(c.method=\"next\",c.arg=b),c.delegate=null,n):f:(c.method=\"throw\",c.arg=new TypeError(\"iterator result is not an object\"),c.delegate=null,n)}function z(a){var b={tryLoc:a[0]};1 in a&&(b.catchLoc=a[1]),2 in a&&(b.finallyLoc=a[2],b.afterLoc=a[3]),this.tryEntries.push(b)}function A(a){var b=a.completion||{};b.type=\"normal\",delete b.arg,a.completion=b}function B(a){this.tryEntries=[{tryLoc:\"root\"}],a.forEach(z,this),this.reset(!0)}function C(a){if(a){var c=a[f];if(c)return c.call(a);if(\"function\"==typeof a.next)return a;if(!isNaN(a.length)){var e=-1,g=function c(){for(;++e<a.length;)if(d.call(a,e))return c.value=a[e],c.done=!1,c;return c.value=b,c.done=!0,c};return g.next=g}}return{next:D}}function D(){return{value:b,done:!0}}return p.prototype=u.constructor=q,q.constructor=p,q[h]=p.displayName=\"GeneratorFunction\",a.isGeneratorFunction=function(a){var b=\"function\"==typeof a&&a.constructor;return!!b&&(b===p||\"GeneratorFunction\"===(b.displayName||b.name))},a.mark=function(a){return Object.setPrototypeOf?Object.setPrototypeOf(a,q):(a.__proto__=q,h in a||(a[h]=\"GeneratorFunction\")),a.prototype=Object.create(u),a},a.awrap=function(a){return{__await:a}},v(w.prototype),w.prototype[g]=function(){return this},a.AsyncIterator=w,a.async=function(b,c,d,e,f){void 0===f&&(f=Promise);var g=new w(i(b,c,d,e),f);return a.isGeneratorFunction(c)?g:g.next().then(function(a){return a.done?a.value:g.next()})},v(u),u[h]=\"Generator\",u[f]=function(){return this},u.toString=function(){return\"[object Generator]\"},a.keys=function(a){var b=[];for(var c in a)b.push(c);return b.reverse(),function c(){for(;b.length;){var d=b.pop();if(d in a)return c.value=d,c.done=!1,c}return c.done=!0,c}},a.values=C,B.prototype={constructor:B,reset:function(a){if(this.prev=0,this.next=0,this.sent=this._sent=b,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=b,this.tryEntries.forEach(A),!a)for(var c in this)\"t\"===c.charAt(0)&&d.call(this,c)&&!isNaN(+c.slice(1))&&(this[c]=b)},stop:function(){this.done=!0;var a=this.tryEntries[0].completion;if(\"throw\"===a.type)throw a.arg;return this.rval},dispatchException:function(a){if(this.done)throw a;var c=this;function e(d,e){return h.type=\"throw\",h.arg=a,c.next=d,e&&(c.method=\"next\",c.arg=b),!!e}for(var f=this.tryEntries.length-1;f>=0;--f){var g=this.tryEntries[f],h=g.completion;if(\"root\"===g.tryLoc)return e(\"end\");if(g.tryLoc<=this.prev){var i=d.call(g,\"catchLoc\"),j=d.call(g,\"finallyLoc\");if(i&&j){if(this.prev<g.catchLoc)return e(g.catchLoc,!0);if(this.prev<g.finallyLoc)return e(g.finallyLoc)}else if(i){if(this.prev<g.catchLoc)return e(g.catchLoc,!0)}else if(j){if(this.prev<g.finallyLoc)return e(g.finallyLoc)}else throw new Error(\"try statement without catch or finally\")}}},abrupt:function(a,b){for(var c=this.tryEntries.length-1;c>=0;--c){var e=this.tryEntries[c];if(e.tryLoc<=this.prev&&d.call(e,\"finallyLoc\")&&this.prev<e.finallyLoc){var f=e;break}}f&&(\"break\"===a||\"continue\"===a)&&f.tryLoc<=b&&b<=f.finallyLoc&&(f=null);var g=f?f.completion:{};return(g.type=a,g.arg=b,f)?(this.method=\"next\",this.next=f.finallyLoc,n):this.complete(g)},complete:function(a,b){if(\"throw\"===a.type)throw a.arg;return\"break\"===a.type||\"continue\"===a.type?this.next=a.arg:\"return\"===a.type?(this.rval=this.arg=a.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===a.type&&b&&(this.next=b),n},finish:function(a){for(var b=this.tryEntries.length-1;b>=0;--b){var c=this.tryEntries[b];if(c.finallyLoc===a)return this.complete(c.completion,c.afterLoc),A(c),n}},\"catch\":function(a){for(var b=this.tryEntries.length-1;b>=0;--b){var c=this.tryEntries[b];if(c.tryLoc===a){var d=c.completion;if(\"throw\"===d.type){var e=d.arg;A(c)}return e}}throw new Error(\"illegal catch attempt\")},delegateYield:function(a,c,d){return this.delegate={iterator:C(a),resultName:c,nextLoc:d},\"next\"===this.method&&(this.arg=b),n}},a}(a.exports);try{regeneratorRuntime=b}catch(c){Function(\"r\",\"regeneratorRuntime = r\")(b)}},34155:function(a){var b,c,d,e=a.exports={};function f(){throw new Error(\"setTimeout has not been defined\")}function g(){throw new Error(\"clearTimeout has not been defined\")}function h(a){if(b===setTimeout)return setTimeout(a,0);if((b===f||!b)&&setTimeout)return b=setTimeout,setTimeout(a,0);try{return b(a,0)}catch(c){try{return b.call(null,a,0)}catch(d){return b.call(this,a,0)}}}!function(){try{b=\"function\"==typeof setTimeout?setTimeout:f}catch(a){b=f}try{c=\"function\"==typeof clearTimeout?clearTimeout:g}catch(d){c=g}}();var i=[],j=!1,k=-1;function l(){j&&d&&(j=!1,d.length?i=d.concat(i):k=-1,i.length&&m())}function m(){if(!j){var a=h(l);j=!0;for(var b=i.length;b;){for(d=i,i=[];++k<b;)d&&d[k].run();k=-1,b=i.length}d=null,j=!1,(function(a){if(c===clearTimeout)return clearTimeout(a);if((c===g||!c)&&clearTimeout)return c=clearTimeout,clearTimeout(a);try{c(a)}catch(b){try{return c.call(null,a)}catch(d){return c.call(this,a)}}})(a)}}function n(a,b){this.fun=a,this.array=b}function o(){}e.nextTick=function(a){var b=new Array(arguments.length-1);if(arguments.length>1)for(var c=1;c<arguments.length;c++)b[c-1]=arguments[c];i.push(new n(a,b)),1!==i.length||j||h(m)},n.prototype.run=function(){this.fun.apply(null,this.array)},e.title=\"browser\",e.browser=!0,e.env={},e.argv=[],e.version=\"\",e.versions={},e.on=o,e.addListener=o,e.once=o,e.off=o,e.removeListener=o,e.removeAllListeners=o,e.emit=o,e.prependListener=o,e.prependOnceListener=o,e.listeners=function(a){return[]},e.binding=function(a){throw new Error(\"process.binding is not supported\")},e.cwd=function(){return\"\/\"},e.chdir=function(a){throw new Error(\"process.chdir is not supported\")},e.umask=function(){return 0}},69887:function(a){\"use strict\";a.exports=function(a){for(var b=5381,c=a.length;c;)b=33*b^a.charCodeAt(--c);return b>>>0}},15919:function(a,b,c){\"use strict\";b.__esModule=!0,b.useStyleRegistry=b.createStyleRegistry=b.StyleRegistry=void 0;var d=c(28122);b.StyleRegistry=d.StyleRegistry,b.createStyleRegistry=d.createStyleRegistry,b.useStyleRegistry=d.useStyleRegistry},39035:function(a,b,c){\"use strict\";b.__esModule=!0,b.computeId=function(a,b){if(!b)return\"jsx-\"+a;var c=String(b),d=a+c;return f[d]||(f[d]=\"jsx-\"+(0,e.default)(a+\"-\"+c)),f[d]},b.computeSelector=function(a,b){\"undefined\"==typeof window&&(b=b.replace(\/\\\/style\/gi,\"\\\\\/style\"));var c=a+b;return f[c]||(f[c]=b.replace(\/__jsx-style-dynamic-selector\/g,a)),f[c]};var d,e=(d=c(69887))&&d.__esModule?d:{\"default\":d},f={}},44287:function(a,b,c){\"use strict\";var d=c(34155);function e(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,\"value\"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}b.__esModule=!0,b.default=void 0;var f=void 0!==d&&d.env&&!0,g=function(a){return\"[object String]\"===Object.prototype.toString.call(a)},h=function(){function a(a){var b=void 0===a?{}:a,c=b.name,d=void 0===c?\"stylesheet\":c,e=b.optimizeForSpeed,h=void 0===e?f:e,j=b.isBrowser;i(g(d),\"`name` must be a string\"),this._name=d,this._deletedRulePlaceholder=\"#\"+d+\"-deleted-rule____{}\",i(\"boolean\"==typeof h,\"`optimizeForSpeed` must be a boolean\"),this._optimizeForSpeed=h,this._isBrowser=void 0===j?\"undefined\"!=typeof window:j,this._serverSheet=void 0,this._tags=[],this._injected=!1,this._rulesCount=0;var k=this._isBrowser&&document.querySelector(\"meta[property=\\\"csp-nonce\\\"]\");this._nonce=k?k.getAttribute(\"content\"):null}var b,c,d,h=a.prototype;return h.setOptimizeForSpeed=function(a){i(\"boolean\"==typeof a,\"`setOptimizeForSpeed` accepts a boolean\"),i(0===this._rulesCount,\"optimizeForSpeed cannot be when rules have already been inserted\"),this.flush(),this._optimizeForSpeed=a,this.inject()},h.isOptimizeForSpeed=function(){return this._optimizeForSpeed},h.inject=function(){var a=this;if(i(!this._injected,\"sheet already injected\"),this._injected=!0,this._isBrowser&&this._optimizeForSpeed){this._tags[0]=this.makeStyleTag(this._name),this._optimizeForSpeed=\"insertRule\"in this.getSheet(),this._optimizeForSpeed||(f||console.warn(\"StyleSheet: optimizeForSpeed mode not supported falling back to standard mode.\"),this.flush(),this._injected=!0);return}this._serverSheet={cssRules:[],insertRule:function(b,c){return\"number\"==typeof c?a._serverSheet.cssRules[c]={cssText:b}:a._serverSheet.cssRules.push({cssText:b}),c},deleteRule:function(b){a._serverSheet.cssRules[b]=null}}},h.getSheetForTag=function(a){if(a.sheet)return a.sheet;for(var b=0;b<document.styleSheets.length;b++)if(document.styleSheets[b].ownerNode===a)return document.styleSheets[b]},h.getSheet=function(){return this.getSheetForTag(this._tags[this._tags.length-1])},h.insertRule=function(a,b){if(i(g(a),\"`insertRule` accepts only strings\"),!this._isBrowser)return\"number\"!=typeof b&&(b=this._serverSheet.cssRules.length),this._serverSheet.insertRule(a,b),this._rulesCount++;if(this._optimizeForSpeed){var c=this.getSheet();\"number\"!=typeof b&&(b=c.cssRules.length);try{c.insertRule(a,b)}catch(d){return f||console.warn(\"StyleSheet: illegal rule: \\n\\n\"+a+\"\\n\\nSee https:\/\/stackoverflow.com\/q\/20007992 for more info\"),-1}}else{var e=this._tags[b];this._tags.push(this.makeStyleTag(this._name,a,e))}return this._rulesCount++},h.replaceRule=function(a,b){if(this._optimizeForSpeed||!this._isBrowser){var c=this._isBrowser?this.getSheet():this._serverSheet;if(b.trim()||(b=this._deletedRulePlaceholder),!c.cssRules[a])return a;c.deleteRule(a);try{c.insertRule(b,a)}catch(d){f||console.warn(\"StyleSheet: illegal rule: \\n\\n\"+b+\"\\n\\nSee https:\/\/stackoverflow.com\/q\/20007992 for more info\"),c.insertRule(this._deletedRulePlaceholder,a)}}else{var e=this._tags[a];i(e,\"old rule at index `\"+a+\"` not found\"),e.textContent=b}return a},h.deleteRule=function(a){if(!this._isBrowser){this._serverSheet.deleteRule(a);return}if(this._optimizeForSpeed)this.replaceRule(a,\"\");else{var b=this._tags[a];i(b,\"rule at index `\"+a+\"` not found\"),b.parentNode.removeChild(b),this._tags[a]=null}},h.flush=function(){this._injected=!1,this._rulesCount=0,this._isBrowser?(this._tags.forEach(function(a){return a&&a.parentNode.removeChild(a)}),this._tags=[]):this._serverSheet.cssRules=[]},h.cssRules=function(){var a=this;return this._isBrowser?this._tags.reduce(function(b,c){return c?b=b.concat(Array.prototype.map.call(a.getSheetForTag(c).cssRules,function(b){return b.cssText===a._deletedRulePlaceholder?null:b})):b.push(null),b},[]):this._serverSheet.cssRules},h.makeStyleTag=function(a,b,c){b&&i(g(b),\"makeStyleTag acceps only strings as second parameter\");var d=document.createElement(\"style\");this._nonce&&d.setAttribute(\"nonce\",this._nonce),d.type=\"text\/css\",d.setAttribute(\"data-\"+a,\"\"),b&&d.appendChild(document.createTextNode(b));var e=document.head||document.getElementsByTagName(\"head\")[0];return c?e.insertBefore(d,c):e.appendChild(d),d},c=[{key:\"length\",get:function(){return this._rulesCount}}],e((b=a).prototype,c),d&&e(b,d),a}();function i(a,b){if(!a)throw new Error(\"StyleSheet: \"+b+\".\")}b.default=h},28122:function(a,b,c){\"use strict\";b.__esModule=!0,b.createStyleRegistry=l,b.StyleRegistry=function(a){var b=a.registry,c=a.children,d=(0,e.useContext)(k),f=(0,e.useState)(function(){return d||b||l()})[0];return e.default.createElement(k.Provider,{value:f},c)},b.useStyleRegistry=function(){return(0,e.useContext)(k)},b.StyleSheetContext=b.StyleSheetRegistry=void 0;var d,e=function(a){if(a&&a.__esModule)return a;if(null===a||\"object\"!=typeof a&&\"function\"!=typeof a)return{\"default\":a};var b=h();if(b&&b.has(a))return b.get(a);var c={},d=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var e in a)if(Object.prototype.hasOwnProperty.call(a,e)){var f=d?Object.getOwnPropertyDescriptor(a,e):null;f&&(f.get||f.set)?Object.defineProperty(c,e,f):c[e]=a[e]}return c.default=a,b&&b.set(a,c),c}(c(67294)),f=(d=c(44287))&&d.__esModule?d:{\"default\":d},g=c(39035);function h(){if(\"function\"!=typeof WeakMap)return null;var a=new WeakMap();return h=function(){return a},a}var i=function(){function a(a){var b=void 0===a?{}:a,c=b.styleSheet,d=void 0===c?null:c,e=b.optimizeForSpeed,g=void 0!==e&&e,h=b.isBrowser;this._sheet=d||new f.default({name:\"styled-jsx\",optimizeForSpeed:g}),this._sheet.inject(),d&&\"boolean\"==typeof g&&(this._sheet.setOptimizeForSpeed(g),this._optimizeForSpeed=this._sheet.isOptimizeForSpeed()),this._isBrowser=void 0===h?\"undefined\"!=typeof window:h,this._fromServer=void 0,this._indices={},this._instancesCounts={}}var b=a.prototype;return b.add=function(a){var b=this;void 0===this._optimizeForSpeed&&(this._optimizeForSpeed=Array.isArray(a.children),this._sheet.setOptimizeForSpeed(this._optimizeForSpeed),this._optimizeForSpeed=this._sheet.isOptimizeForSpeed()),this._isBrowser&&!this._fromServer&&(this._fromServer=this.selectFromServer(),this._instancesCounts=Object.keys(this._fromServer).reduce(function(a,b){return a[b]=0,a},{}));var c=this.getIdAndRules(a),d=c.styleId,e=c.rules;if(d in this._instancesCounts){this._instancesCounts[d]+=1;return}var f=e.map(function(a){return b._sheet.insertRule(a)}).filter(function(a){return -1!==a});this._indices[d]=f,this._instancesCounts[d]=1},b.remove=function(a){var b=this,c=this.getIdAndRules(a).styleId;if(j(c in this._instancesCounts,\"styleId: `\"+c+\"` not found\"),this._instancesCounts[c]-=1,this._instancesCounts[c]<1){var d=this._fromServer&&this._fromServer[c];d?(d.parentNode.removeChild(d),delete this._fromServer[c]):(this._indices[c].forEach(function(a){return b._sheet.deleteRule(a)}),delete this._indices[c]),delete this._instancesCounts[c]}},b.update=function(a,b){this.add(b),this.remove(a)},b.flush=function(){this._sheet.flush(),this._sheet.inject(),this._fromServer=void 0,this._indices={},this._instancesCounts={}},b.cssRules=function(){var a=this,b=this._fromServer?Object.keys(this._fromServer).map(function(b){return[b,a._fromServer[b]]}):[],c=this._sheet.cssRules();return b.concat(Object.keys(this._indices).map(function(b){return[b,a._indices[b].map(function(a){return c[a].cssText}).join(a._optimizeForSpeed?\"\":\"\\n\")]}).filter(function(a){return Boolean(a[1])}))},b.styles=function(a){var b,c;return b=this.cssRules(),void 0===(c=a)&&(c={}),b.map(function(a){var b=a[0],d=a[1];return e.default.createElement(\"style\",{id:\"__\"+b,key:\"__\"+b,nonce:c.nonce?c.nonce:void 0,dangerouslySetInnerHTML:{__html:d}})})},b.getIdAndRules=function(a){var b=a.children,c=a.dynamic,d=a.id;if(c){var e=(0,g.computeId)(d,c);return{styleId:e,rules:Array.isArray(b)?b.map(function(a){return(0,g.computeSelector)(e,a)}):[(0,g.computeSelector)(e,b)]}}return{styleId:(0,g.computeId)(d),rules:Array.isArray(b)?b:[b]}},b.selectFromServer=function(){return Array.prototype.slice.call(document.querySelectorAll(\"[id^=\\\"__jsx-\\\"]\")).reduce(function(a,b){return a[b.id.slice(2)]=b,a},{})},a}();function j(a,b){if(!a)throw new Error(\"StyleSheetRegistry: \"+b+\".\")}b.StyleSheetRegistry=i;var k=(0,e.createContext)(null);function l(){return new i()}b.StyleSheetContext=k},8771:function(a,b,c){a.exports=c(15919)},72431:function(){}},function(a){a.O(0,[9774],function(){return a(a.s=22870)}),_N_E=a.O()}])\r\n\r\n```\r\n\r\n---\r\n\r\nCheers! And looking forward to the fix! Thank you! \r\n\r\n","@sgrobert How did you make it crash with NextJS? Could you share a cloneable repository I can take a look at?\r\n\r\nEven with `strictExportPresence: true,` NextJS will compile the original code just fine.\r\n\r\nWorkaround for library authors faced with the same issue:\r\n\r\nInstead of accessing potentially unavailable exports from a namespace import via static keys (e.g. `React.useId`) you can use a simple computed key. Webpack does not seem to attempt to figure out what specific export one wants to access i.e. `const maybeReactUseId = React['useId' + '']` does not produce compilation warnings\/errors.","Hi @eps1lon,\r\n\r\nI think this matter was previously resolved with the recent patch updates.\r\n\r\nThank you for reaching out on this matter! ;)","Any updates on when this will be fixed? We are running into this with our consumption of @radix-ui\/react-tooltip.","> Workaround for library authors faced with the same issue:\r\n> \r\n> Instead of accessing potentially unavailable exports from a namespace import via static keys (e.g. React.useId) you can use a simple computed key. Webpack does not seem to attempt to figure out what specific export one wants to access i.e. const maybeReactUseId = React['useId' + ''] does not produce compilation warnings\/errors.\r\n\r\nI've found that downstream bundlers have a tendency to remove the unnecessary string concatenation. It appears that `React['useId'.toString()]` ([as seen in this commit to floating-ui](https:\/\/github.com\/hawkstein\/floating-ui\/commit\/961ec59dc03af9ffc2ea14b9f8b0108d3db609f1)) survives subsequent bundling, so I'd recommend library authors use this instead.","Yeah, just make it non analyzable :smile: "],"labels":["enhancement","webpack-5"]},{"title":"Support destructuring","body":"## Feature request\r\n\r\nsupport destructuring in:\r\n  - [x] EnvironmentPlugin, DefinePlugin, ImportMetaPlugin (partial support?), other plugins?\r\n  - [ ] #16872\r\n  - [x] #16941 treeshaking when using namespace object, e.g. `import * as b from 'b';const {a} = b;` \r\n  - [x] json treeshaking, e.g. `import b from '1.json'; const {a} = b;`\r\n  \r\n**What is the expected behavior?**\r\n\r\nWebpack should support destructuring on parser level\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nModern versions of runtime environments (browsers, Node.js, Deno) support destructuring\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\n`JavascriptParser` should be improved\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n","comments":["<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","6 other issues were redirected to this one, let's not make it die","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.",">  EnvironmentPlugin, DefinePlugin, ImportMetaPlugin (partial support?), other plugins?\r\n\r\n@vankop this piece is already supported now correct?","@TheLarkInn webpack doesnt support destructing.. so what actually happens right now:\r\n```js\r\nconst { a } = process.env;\r\n```\r\nwebpack renders to:\r\n```js\r\nconst { a } = {...all envs here...};\r\n```\r\n\r\nissue is about providing **only** required properties:\r\n```js\r\nconst { a } = { a: 1 };\r\n```\r\n\r\nmain reason why it didn't solved yet, as we discussed with @sokra we need to support <es2015 ( mainly babel version ) as well to make build result independent to `target`. otherwise we could have:\r\n\r\n```js\r\nconst { a } = { a: 1 };\r\n```\r\nfor >=es2015 and\r\n```js\r\nvar _b = {...all envs...},\r\n  a = _b.a;\r\n```\r\n[for es<2015](https:\/\/babeljs.io\/repl#?browsers=ie%209&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=MYewdgzgLgBA3gQwL4wLwwEYG4g&debug=false&forceAllTransforms=false&modules=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=false&targets=&version=7.21.2&externalPlugins=&assumptions=%7B%7D)\r\n\r\nbut supporting babel version is tricky.. I would vote to drop this and support **only** destructing\r\n","Last time I tried, `process.env;` was not replaced at all because EnvironmentPlugin and DefinePlugin did a string search and replace for exactly `\"process.env.NAME\"`. Has this changed since? What you're saying only worked if you used something along the lines of `DefinePlugin({'process.env':{NAME: 'foo'}})`","> What you're saying only worked if you used something along the lines of DefinePlugin({'process.env':{NAME: 'foo'}})\r\n\r\nthat is a correct usage.. not sure what you mean..\r\n\r\n------------------------------\r\n\r\nif you define `process.env.a` and use `const { a } = process.env;` it will not work","> that is a correct usage.. not sure what you mean..\r\n\r\n\"Correct\" but far from ideal since `EnvironmentPlugin` exists for this reason but it exclusively supports `process.env.a`","yes, api is not optimal, but breaking change could lead to security leaks like:\r\n\r\nwebpack.config.js\r\n```js\r\nconst define = new DefinePlugin({'env': {..blabla}, 'env.SECRET': 1});\r\nmodule.exports = [{\r\n  name: 'my-awesome-backend',\r\n  entry: 'backend.js',\r\n  plugins: [define]\r\n}, {\r\n name: 'my-awesome-frontend',\r\n  entry: 'frontend.js',\r\n  plugins: [define]\r\n}];\r\n```\r\n\r\nbackend.js\r\n```js\r\n\/\/ I love to use secrets on backend since it is quite save\r\nconst { SECRET } = env;\r\n\/\/ or case that works right now\r\nenv.SECRET;\r\n```\r\n\r\nfrontend.js\r\n```js\r\n\/\/ I dont like secrets in my frontend to be exposed\r\nconst { data } = env;\r\n```\r\n\r\nThats why we cant fix api right now","_For the record, I don't care about `DefinePlugin` specifically, I only mentioned it because \"it's the only way to do it\". `EnviromentPlugin` is the only plugin I would use to set ENVs._ \r\n\r\nThe argument in https:\/\/github.com\/webpack\/webpack\/issues\/5392 is that I would expect:\r\n\r\n```js\r\nnew EnvironmentPlugin(['NAME'])\r\n```\r\n\r\nto support both `const NAME = process.env.NAME` and `const {NAME} = process.env` indiscriminately.  \r\n\r\nLint rules like [`prefer-destructuring`](https:\/\/eslint.org\/docs\/latest\/rules\/prefer-destructuring) effectively push users into webpack\u2019s own limitations and rightfully refuse to \"fix\" it: https:\/\/github.com\/eslint\/eslint\/issues\/14918#issuecomment-900725954\r\n\r\nThe only security argument I see is against allowing `const {[dynamic] = myvar} = process.env`, which doesn't apply to `EnviromentPlugin` anyway\r\n\r\n--- \r\n\r\nI posted my own repos\/tests in:\r\n\r\n- https:\/\/github.com\/fregante\/webpack-sandbox\/blob\/main\/environmentplugin-destructuring\r\n- https:\/\/github.com\/fregante\/webpack-sandbox\/tree\/main\/defineplugin-destructuring","> issue is about providing only required properties:\n> `const { a } = { a: 1 };`\n\nThis doesn't account for the following though :\n```js\nconst {\n  env: {\n    a\n  }\n} = process;\n```","Could we try and implement these scenarios behind `experiments.supportModernDestructuring` or something similar (we can bikeshed the experiment name if needed). "],"labels":["enhancement","performance","S2: Inconvenient","webpack-5","gsoc-2024"]},{"title":"HMR is not working for web workers","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWhen updating the code loaded by web worker nothing happens.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nThis is a very simple configuration where HMR doesn't work:\r\nhttps:\/\/github.com\/wclr\/webpack-worker-hot-reload\r\n\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nI believe it should work the following way:\r\n\r\n1) If the worker's entry script accepts hot reload, hot reload should be executed in the context of running web worker(s).\r\n2) Otherwise it should be upstreamed to the parent context (probably parent script where `new URL` of the worker script was created). \r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5\r\nNode.js version: 14\r\nOperating System: \r\nAdditional tools:\r\n","comments":["Yep, the same https:\/\/github.com\/webpack\/webpack-dev-server\/issues\/3794","@alexander-akait should we track issue in webpack repo?\r\n","No, it should be implemented on webpack-dev-server side","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","I'm also having a use-case where I would like to use hot reloading in a worker thread. I'm using a custom react renderer in a worker to perform heavy computations. Reloading the page every time in development is becoming a bit of a deal breaker for that use case. I have spent a lot of time researching this topic and it looks like this is not supported in Webpack?!\r\n\r\n@alexander-akait (hope you don't mind me asking directly), do you have any tips \/ hints if \/ how this could be done? I would be happy to create a minimal reproducer (using a dummy react renderer in a worker?!), if you're interested.","@donalffons yes, it will be useful, I will investigate it deeply ","I greatly appreciate that! Thanks for your work on this!\r\n\r\nFwiw, I have found [this PR for vite](https:\/\/github.com\/vitejs\/vite\/pull\/6483), which aims to implement HMR for workers. This does seem to work and provides the `module.hot` api in a worker, which lets me accept and react to module changes. However, it does not work in combination with react (i.e. as soon as I start using JSX syntax) - because their React tooling relies on main-thread properties like `window` etc. to be available.\r\n\r\nFor my specific use case & webpack, I wonder if it would be possible to\r\n- create multiple entry-points for the main thread and the worker,\r\n- then \"manually\" start the worker using the worker entrypoint (i.e. w\/o webpack's interference)\r\n- then using some sort of modified version of [@pmmmwh\/react-refresh-webpack-plugin](https:\/\/github.com\/pmmmwh\/react-refresh-webpack-plugin), to enable react-refresh on my worker.\r\n\r\n@alexander-akait, does this sound like a reasonable approach or am I missing something?","> then \"manually\" start the worker using the worker entrypoint (i.e. w\/o webpack's interference)\r\n\r\nIn theory you can multi compiler mode, so you don't need to manually start, also you can set `dependecies` so worker will be built first\r\n\r\nBut yes, approach sounds good ","@alexander-akait Just wanted to quickly thank you (your suggestion to use multi compiler mode was very helpful) and share my learnings here.\r\n\r\nI was able to make HMR and react-refresh work nicely with my custom React renderer (at least I haven't noticed any issues yet :wink:). The setup is fairly simple and updates work as expected and preserve the application state. I did not have to make any modifications to webpack or @pmmmwh\/react-refresh-webpack-plugin (they don't rely on `window`, as it is the case with vite). Here's what I did:\r\n\r\n- I copied the `typescript-with-babel` example from [@pmmmwh\/react-refresh-webpack-plugin](https:\/\/github.com\/pmmmwh\/react-refresh-webpack-plugin).\r\n- Duplicated the `webpack.config.js` to `webpack.config.worker.js` with these changes:\r\n```diff\r\n\/\/ ...\r\n  entry: {\r\n-    main: '.\/src\/index.tsx',\r\n+    worker: '.\/src\/worker\/index.tsx',\r\n  },\r\n+  target: \"webworker\",\r\n  plugins: [\r\n    isDevelopment && new ReactRefreshPlugin(),\r\n    new ForkTsCheckerWebpackPlugin(),\r\n-    new HtmlWebpackPlugin({\r\n-      filename: '.\/index.html',\r\n-      template: '.\/public\/index.html',\r\n-    }),\r\n  ].filter(Boolean),\r\n\/\/ ...\r\n```\r\n- Set up [multi-compiler mode](https:\/\/webpack.js.org\/api\/node\/) with a simple NodeJS script:\r\n```js\r\nimport webpack from 'webpack';\r\nimport config from '.\/webpack.config.js';\r\nimport configWorker from '.\/webpack.config.worker.js';\r\nimport WebpackDevServer from 'webpack-dev-server';\r\n\r\nconst compiler = webpack([configWorker, config]);\r\n\r\nconst devServer = new WebpackDevServer({}, compiler);\r\ndevServer.start();\r\n```\r\n- Start worker from main thread:\r\n```js\r\nconst w = new Worker(\"\/worker.js\")\r\n```\r\n\r\nAfter that, I can `module.hot.accept` HMR updates from `worker\/index.tsx`. If I don't accept these changes, there will be an error about `window` being undefined, when webpack tries to `window.location.reload()`. Most importantly for me, though: React-refresh updates in React components imported from `worker\/index.tsx` just work without any further modifications (...so far, at least :wink:).\r\n\r\n(This was much less painful than I anticipated :slightly_smiling_face:)","@donalffons\r\n\r\n> If I don't accept these changes, there will be an error about window being undefined, when webpack tries to window.location.reload(). \r\n\r\nhm, sounds like a bug in webpack-dev-server too, dev server assumes we have window's context and try to reload, but it is wrong :confused: can you provide small example with original configuration too, I would like to to look","Here is a simple example that reproduces the error I had: [ocjsx-hello-world-webpack-issue.zip](https:\/\/github.com\/webpack\/webpack\/files\/8756463\/ocjsx-hello-world-webpack-issue.zip) @alexander-akait \r\n\r\nTo reproduce:\r\n1. `npm i && npm run start`, visit `localhost:3000`\r\n2. change `src\/worker\/Models.tsx`, e.g.\r\n    ```diff\r\n    -  <bool op=\"cut\">\r\n    +  <bool op=\"common\">\r\n    ```\r\n3. notice how the scene updates\r\n4. change `src\/worker\/index.tsx`\r\n    ```diff\r\n    + console.log(\"Hello, World!\");\r\n    ```\r\n5. notice the console error\r\n    ```\r\n    Uncaught (in promise) ReferenceError: window is not defined\r\n    ```\r\n\r\nI'm ~80% happy with this proof of concept. What's missing for me would be the possibility to ship the custom react renderer (i.e. ~ src\/worker\/index.tsx) as an npm package that can be used with user-defined models (src\/worker\/Model.tsx). Currently, \/src\/worker\/index.tsx statically imports src\/worker\/Model.tsx, which wouldn't work in that case. I'm not sure what would be the best way of doing that - maybe by writing some sort of Webpack Plugin?","> Here is a simple example that reproduces the error I had: [ocjsx-hello-world-webpack-issue.zip](https:\/\/github.com\/webpack\/webpack\/files\/8756463\/ocjsx-hello-world-webpack-issue.zip) @alexander-akait\r\n\r\nYep, bug, we should fix it, if you want to help feel free to send a PR\r\n\r\n> I'm not sure what would be the best way of doing that - maybe by writing some sort of Webpack Plugin?\r\n\r\nYep, a good question, ideally you need to pass path to worker as argument (you will faced with the same problem not only for webpack, for any other bundlers), multi compiler mode can be useful here too","> if you want to help feel free to send a PR\r\n\r\nWill do!","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["question","inactive","webpack-5","Send a PR"]},{"title":"feature: delete old packs after serialization","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nfeature: delete old packs after serialization\r\n\r\ncloses #13291 \r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nnot yet\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nnothing\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","Any plan to merge this?","@hardikpatel043 near future","Hi Team, This would benefit the world greatly and avoid burning SSD faster..."],"labels":["PR: CI-ok","PR: unreviewed","PR: conflict"]},{"title":"feature manifest option","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nfeature\r\nadd experimental manifest option\r\n\r\ncloses #11562 \r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nyes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n`experiments.manifest` enables: \r\n  - option `manifest` - path to write compilation manifest\r\n  - in configuration\r\n```\r\nmodule.exports = [\r\n    {\r\n        name: \"web\",\r\n        target: \"web\"\r\n    },\r\n    {\r\n        name: \"node\",\r\n        target: \"node\",\r\n        entry: \".\/src\/node.js\",\r\n        experiments: {\r\n            manifest: true\r\n        },\r\n        dependencies: [\"web\"]\r\n    }\r\n];\r\n```\r\n\r\nin `node` app you can access manifest of `web` app via `webpack-manifest` schema like:\r\n```js\r\nimport manifest from \"webpack-manifest:web\";\r\n```\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [x] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","hm, what about if I want to use it in PHP\/Ruby\/Python, now developers can generate json file and read it","@alexander-akait Did not get what you mean.. Developers can generate manifest and consume it in PHP\/Ruby\/Python. ","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon."],"labels":["PR: CI-ok","PR: unreviewed","PR: conflict"]},{"title":"feat: allow to map splitted chunks by option \"name\"","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nMotivation: Let developer stop split into chunks in some cases. For example, split chunks only for xx% of chunks of a multi-entries project.\r\n\r\nDemo: https:\/\/github.com\/lsycxyj\/disableSplitChunks\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nAdd \"false\" as the return type of \"name\" function of cacheGroups.\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNot yet. If this feature could be accepted, I will add it later.\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNope.\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nAdd \"false\" as the return type.\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers are authorized under a signed CLA.<ul><li>:white_check_mark:  Light Leung (216c982d448fe118d599c376a59f79c41222ac89)<\/li><\/ul>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\n@lsycxyj The most important CI builds failed. This way your PR can't be merged.\n\nPlease take a look at the CI results from azure ([1 errors \/ 0 warnings](https:\/\/dev.azure.com\/webpack\/60b36df0-23d2-44f7-82d7-6d18e498d900\/_build\/results?buildId=14879)) and [appveyor](https:\/\/ci.appveyor.com\/project\/sokra\/webpack\/builds\/41161945) (success) and fix these issues.","There is already a `chunks` option, which also accepts a function. Does that work in your use case?","What is the use case for this and What benefits would it bring?\r\nWe split code into chuncks to reduce loading time and only load What is necessary, when necessary.","@sokra I suppose the arguments of `chunks` options are not enough.\r\n\r\n@AllanOricil Use case is just as the demo repo. Let's say I have a large multi-pages project, which has lots of small sub-project. To improve the perfomance, I need a multi-level chunks optimzation strategy. \r\n\r\nFor some chunks of the same sub-project, their shared modules should be extracted as something like \"sub-project-common\" chunk, which can be checked with the `chunks` of `name` function to see if they are only used by the same sub-project.\r\n\r\nAnd for some modules used by most sub-projects' entry chunks, they can be extracted to a \"global common\" chunk to increase the load speed of other sub-projects, once the user visisted one of the sub-project.\r\n\r\nAnd for some modules only used by few pages, I can return `false` to stop extracting them into common chunks, to reduce the unsed codes for most projects.","Sounds like you can do that with a cacheGroup per sub project with a chunks filter, and an additional global commons cacheGroup with chunks filter on entry chunks and a minChunks option.","> Sounds like you can do that with a cacheGroup per sub project with a chunks filter, and an additional global commons cacheGroup with chunks filter on entry chunks and a minChunks option.\r\n\r\n@sokra Sounds like not exact what I want. Even in sub-project, there are quite a few pages, and even some chunks are not page entries (some of them may be global lib or others), and what I care about are only the page entries. With what kind of chunks depends on the module, I can split them more precisely (eg. xx% of page chunks in the same sub-project, or xx% among some relative sub-projects, or even there are some pages granted higher factor to decide if the module should be splitted for some reasons (eg. traffic)), which is not a number option \"minChunks\" can tell. \r\n\r\nBesides, by creating cacheGroups dynamiclly in a programatical way, instead of declaring a bunch of named cacheGroups imperatively (some of them may even never be created since they may not meet the condition), I think it's a more effective way for coding.","@lsycxyj could you show with \"data\" how much better your solution is for the same use case when this prop is On and Off. This way people will have better way of concluding if this is a good feature or not. And devs will also understand when they should toggle it on","> @lsycxyj could you show with \"data\" how much better your solution is for the same use case when this prop is On and Off. This way people will have better way of concluding if this is a good feature or not. And devs will also understand when they should toggle it on \r\n\r\n @AllanOricil One of the cases but not the only use case, with \"data\":\r\n \r\nLet's say 10 pages shares 90% of traffic, and 90 other pages shares 10% of traffic. If I extract them by the 50% amount of used chunks, the worst case is that all the extracted modules are from the 90 pages, which means users will not use those modules in 90% of time.\r\n \r\nBut with the traffic factor, a kind of strategy which could be defined by myself, I can expect the common modules will be always used more than 50% of time:\r\n* When a modules used by one of the 10 pages, the factor will be increased by 0.1; \r\n* When a modules used by one of the 90 pages, the factor will be increased by 0.01;\r\n* When the factor larger than 0.5, the module should be extracted into the common chunk.\r\n \r\nThe point is that the chunks infomation helps devs to split chunks more precisely and what they need to split. In addition, I think it's a more effective way for coding to let the devs generate chunk names on the fly, instead of making a group of chunks declarations that may not exists ahead.\r\n\r\nBy the way it's not a feature which simply can be turned ON or OFF. It's a \"option\" which helps the devs to better control the splitting behavior.","@sokra So can this feature be accepted? Or is there anything to be improved?","> Let's say 10 pages shares 90% of traffic, and 90 other pages shares 10% of traffic. If I extract them by the 50% amount of used chunks, the worst case is that all the extracted modules are from the 90 pages, which means users will not use those modules in 90% of time.\r\n\r\nIn this case none of these 10 pages will reference the shared chunk at all, so it's not influenced by that at all.\r\n\r\nWith the recommended options, it's not possible that splitChunks loads additional modules for any chunk. But it can increase the number of requests needed for loading.\r\n\r\nLoading additional modules is only possible if they force merge chunks with the `name` option.\r\n\r\nBut anyway I see that there are cases where you want to avoid one part of the application to influence another part, e. g. avoiding unnecessary requests or avoiding long term cache invalidation due to unrelated changes. Example: you want to isolate the `main` application from the `admin` application.\r\n\r\nThe traffic difference is another thing you can come up with. e. g. weighting the `home` pages more than the `about` page.\r\n\r\nSo we are talking about:\r\n\r\n* isolation, and\r\n* weight\r\n\r\nBut I think `name` option is the wrong tool here. e. g. it would be called with `chunks: [\"home\", \"about\", \"contact\"]` and you might return `false` here, because you want the `home` page not influenced. But actually you wanted to allow `[\"about\", \"contact\"]`. So I think for the isolation case you actually want to specify the `chunkCombinations` that are allowed. e. g. a function mapping `[\"home\", \"about\", \"contact\"]` to `[[\"home\"], [\"about\", \"contact\"]]`.\r\n\r\nFor the `weight` case you might want to have a `chunkWeight` option, which maps a chunk to a value and next to the `minChunks` to might want a `minChunksWeight`.\r\n\r\nBut the whole thing might be a bit tricky to configure on chunk level. It might be easier for the user to specify a `weight` on the entry point, which is then propagated to all chunks referenced from there. (Note a chunk might be referenced by multiple entrypoints where we want to compute the maximum weight)\r\n\r\nAnd maybe you want the same for the isolation case where you specify something like `home` on the `home` entrypoint and all referenced chunks get these flag. Not sure exactly how this would look like. Maybe `tags: [\"home\"]` on the entry. And `chunk.hasTag(\"home\")`?\r\n\r\nIs that something that sounds right for you?","> In this case none of these 10 pages will reference the shared chunk at all, so it's not influenced by that at all.\r\n>\r\n>With the recommended options, it's not possible that splitChunks loads additional modules for any chunk. But it can increase the number of requests needed for loading.\r\n\r\nWell... Maybe I didn't give an exact example. For example, all pages shares 1 module, and others are only shares by 90 ones, the common chunk will contain all of them. Anyway, we are talking about some kind of option for devs to decide the splitting strategy, for better isolation or weight control etc..\r\n\r\n>So I think for the isolation case you actually want to specify the chunkCombinations that are allowed. e. g. a function mapping [\"home\", \"about\", \"contact\"] to [[\"home\"], [\"about\", \"contact\"]].\r\n\r\nYes, I think it would be better than only returning `false` to stop splitting. And for the `weight` case, I think it's possible for devs to achieve it since now all chunks can be mapped by themselves, only if the chunks info is provided in the function.\r\n\r\nIn my opinion, `chunkWeight` or `minChunks` is just a sugar for this option.\r\n\r\nIs the chunksCombination mapping function possible to be implemented and can it be accepted in current webpack design?\r\n","@sokra Instead of by returning `false`, I add `Map<string, Chunk[]>` as return type of `name` option to represent the mapping relation: \r\n* The keys of the map is the chunk that devs want the module splitted to; \r\n* The corresponding value of each key tells which chunks they want to extract from;\r\n*  When the chunks aren't returned from the selectedChunks, it means the module stays in those chunks without being splitted.\r\n\r\nAnd I updated the [demo repo](https:\/\/github.com\/lsycxyj\/disableSplitChunks) as the usage example."],"labels":["PR: unreviewed","PR: conflict"]},{"title":"feature: add types to devtool option","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\nadd typings to `devtool` option\r\n\r\n**Did you add tests for your changes?**\r\n\r\nno\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nnothing\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon."],"labels":["PR: CI-ok","PR: unreviewed"]},{"title":"asset\/resource builds outside of dist when [pathname] contains references to hoisted node_modules","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nFiles located in hoisted node_modules of a workspace and loaded as `asset\/resource` are built outside of dist. This differs from what `file-loader` does\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nhttps:\/\/github.com\/dreyks\/asset-resource-bug\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nAll built files should end up inside the dist folder no matter where they are located on the fs\r\n\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  webpack@5.56.0\r\nNode.js version: v14.13.1\r\nOperating System: MacOS\r\nAdditional tools:\r\n","comments":["Interesting, because `[path]` is full path to a module, you get `..\/node_modules\/slick-carousel\/slick\/fonts\/slick.eot` (as relative path), but when you concat it with `output.path` (i.e. `\/dist`) you will get `.\/dist\/..\/node_modules\/slick-carousel\/slick\/fonts\/slick.eot`, you can fix it using:\r\n```\r\nmodule.exports = {\r\n  context: path.resolve(__dirname, '..\/'),\r\n  mode: 'development',\r\n  entry: path.resolve(__dirname, '.\/src\/index.js'),\r\n  output: {\r\n    assetModuleFilename: '[path][name]-[hash][ext]'\r\n  },\r\n};\r\n```\r\n\r\nthe main problem - we don't know what is `node_modules`, it is just directory, even more you can use another directory for modules (using configuration files). if we change logic we will not be able to write something above `output.path`, but some developers are doing it. \r\n\r\nYou keep modules above your sources, so you have extra `..\/`","the thing is i want `context` to remain `.` because that's where the app code is. the `..\/` appears only because of how workspaces hoist node_modules. Additionally, as you can see from my example `file-loader` doesn't have this issue - it replaces all `..` with `_` and the path becomes `dist\/_\/node_modules\/....`","@dreyks yes, `file-loader` is doing it, but here limitation, you can't emit assets above `output.path` (as I said before)","hmm... I see. I'll probably have to drop the `[pathname]` part as a workaround (I can't change the context because too many things in the build rely on it: babel config files, browserslist, etc.)","@dreyks yep, I see, let's wait @sokra answer, here interesting case","@dreyks just interesting - are you using monorepos? Why do not use default values (for debug purpose)? ","@alexander-akait  yes, I'm using a monorepo powered by yarn workspaces. which hoist all the node_modules to the root level.\r\n\r\nwhat do you mean by \"default values\"?","> what do you mean by \"default values\"?\r\n\r\n`[hash][ext][query]`","well... I don't really remember why it was done like this (years ago). I think I'll just use the defaults now, was just surprised that webpack5 behaves differently than file-loader","yes, there are some breaking changes between asset modules and `file-loader`","can we close this?","I think I have exactly the same issue, but I'm using npm workspaces.\r\n\r\nPlease don't close.\r\n\r\n---\r\n\r\nWith the generator filename `assets\/fonts\/[path][name]-[hash:8][ext]`, files are being saved to the parent directory of `assets`, not even the parent directory of `fonts`.","@glen-84 But, how we should fix it? \u0421hanging logic will be breaking change and break behavior for developer whom emitted files above `path.output`? I see only one solution `[context-relative-path]`","Ya, I was thinking about another placeholder token, but wasn't sure of what it would be called.\r\n\r\nThe other direction would be to configure webpack to let it know the name of your modules directory, etc.\r\n\r\nIf you're sure that developers _are_ relying on this behaviour, then I suppose a placeholder token may be the only\/best option.","```css\r\n\/* barlow-latin-500-normal*\/\r\n@font-face {\r\n  font-family: \"Barlow\";\r\n  font-style: normal;\r\n  font-display: swap;\r\n  font-weight: 500;\r\n  src: url(http:\/\/127.0.0.1:4200\/assets\/fonts\/..\/..\/node_modules\/@fontsource\/barlow\/files\/barlow-latin-500-normal-9d34d8c5.woff2) format(\"woff2\"), url(http:\/\/127.0.0.1:4200\/assets\/fonts\/..\/..\/node_modules\/@fontsource\/barlow\/files\/barlow-all-500-normal-ea42a9e8.woff) format(\"woff\");\r\n  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\r\n}\r\n```\r\n\r\nYou can see the double `..` here, which is why it ends up in the `public` directory.\r\n\r\nIt'd be good if these relative segments could be removed, resulting in just `\/assets\/fonts\/node_modules\/...`.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Not stale.","@alexander-akait right now if `[path]` is outside of build context it does not work.. ( there is no asset emit ) so maybe we can just use `file-loader` logic as a fix here..\r\n________\r\nso `[path]` placeholder works only for assets with `filename`, so technically current behaviour in this case (when filename is outside of build context) should be treat as bug I think..","@vankop hm, I think we should have two things - `[path] and `[relative-path]`, because it can be breaking changes, but I agree, current behavior is strange","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","@alexander-akait Wouldn't it be easier to just label\/pin this issue in some way, so that it doesn't keep getting marked as inactive?","@glen-84 Yeah, we should do it, sometimes developers are lazy :smile: ","In case anyone was still hitting this issue, a workaround I used for this issue was to use a function in the filename generator instead of the `[path]` placeholder (definitely not as pretty). I believe you can use this same kind of function for the `output.assetModuleFilename` as well\r\n```js\r\n{\r\n  \/\/ ...\r\n  rules: [\r\n    {\r\n      test: \/some-test\/i,\r\n      type: 'asset\/resource',\r\n      generator: {\r\n        filename: (pathData) => {\r\n          const filenameArr = pathData.filename.split('\/')\r\n          filenameArr.pop() \/\/ last element is the filename, we only want directories\r\n          const path = filenameArr.join('\/').replaceAll('..', '_')\r\n          return `${path}\/[name]-[contenthash][ext]`\r\n        },\r\n      }\r\n    }\r\n  ],\r\n  \/\/ ...\r\n}\r\n```","I can see a year-old PR fixing this issue, but will it be merged any time soon? \ud83e\udd72","I\u2019m not sure why the bot closed this, but this is still an issue in main; please reopen.","That's why I hate github bots","@dreyks hi! can you please reopen this issue?","i don't think i have the permissions to do that \ud83e\udd37\u200d\u2642\ufe0f "],"labels":["bug","question","inactive","webpack-5"]},{"title":"Webpack-native parallelism to obviate the need for the (unmaintained?) parallel-webpack package","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nPer the [webpack documentation](https:\/\/webpack.js.org\/guides\/build-performance\/) , the package [parallel-webpack](https:\/\/github.com\/trivago\/parallel-webpack) is recommended to optimize multiple compilations. However, this package is increasingly outdated (it's not even specified for webpack 5). It would be good to have such functionality as a part of webpack itself, without relying on an outside project (that may itself be abandoned) to offer such support.\r\n\r\n**What is the expected behavior?**\r\n\r\nWebpack-native parallelism\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nThe recommended package no longer appears to be actively maintained\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nI am not a lawyer, but the license of parallel-webpack suggests it might be possible to fork it directly.\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nnot at this time\r\n\r\n**Related issue**\r\n\r\nhttps:\/\/github.com\/trivago\/parallel-webpack\/issues\/107\r\n","comments":["Feel free to send a PR to remove it from docs, now we are focused on cache (it already works very good), the next goal is parallelism ","@alexander-akait I'm working on that PR now. I see that the only other utility mentioned in the docs in this context is `webpack-contrib\/cache-loader` - which is actually explicitly deprecated already. I will remove that as well in the PR.\r\n\r\nWhat I _won't_ remove is the reference to `cache-loader` in the following code, as this appears to be used to build the site and I'm not sure what effect that might have:\r\n\r\nhttps:\/\/github.com\/webpack\/webpack.js.org\/blob\/cd9568f0ec189cde5a9115302874f22e31d4c434\/src\/utilities\/constants.mjs#L18","`cache-loader` is deprecated and should be not used","@alexander-akait I'm not sure if the convention here is for your team to close the issue or for me to close it myself. The updated text is visible on https:\/\/webpack.js.org\/ now, so I consider this concluded.","I think we can implement parallelization in future as built-in feature","Thanks for updating docs!","Wait, this issue only tracked the removal of the reference to the unmaintained plugin and not the new development?","Let's keep open native parallelism is good idea","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","bump","Bumpity bump ","Is there an alternative to parallel-webpack? I have 38 packages being built in parallel and this is relevant for me to upgrade to webpack 5. Now these packages are built in 3 minutes. If you build in series with thread-loader connected, it takes 15 minutes and this is critical.","Sorry, no alternative, which things are slow"],"labels":["enhancement","inactive","Send a PR","webpack-6"]},{"title":"track returned state in function body","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nfeature\r\n\r\ncloses #14347 \r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nyes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nnothing\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n**Notes regarding feature design**\r\n\r\nAdded 2 properties to parser current scope (`parser.scope`)\r\n- `terminated` marks that further parsing of nearest `BlockStatement` should be terminated. Has 3 states `'return'|'throw'|undefined`, where `undefined` = false, `'return'|'throw'` types of termination\r\n`returned` is inherited from child `BlockStatement` (or terminate node in case of `if (true) return;`) to nearest parent `BlockStatement` if `executedPath=true`\r\n- `executedPath` marks that current statement will be executed if nearest `BlockStatement` will be reached, e.g.\r\n\r\n```js\r\nfunction a() {  \/\/ <- executedPath=true\r\n  return; \/\/ <- terminated=return\r\n  \/\/ should terminate parsing of current BlockStatement\r\n}\r\n```\r\n\r\n```js\r\nfunction a() {  \/\/ <- executedPath=true\r\n  if (rand()) { \/\/ <- executedPath=false marks 'unknown' state\r\n     return 1; \/\/ terminated=return\r\n  }  \/\/ <- terminated=undefined we do not know will this be executed or not (child block executedPath=false)\r\n  \r\n  if (true) {  \/\/ <- executedPath=true\r\n       throw 2;  \/\/ <- terminated=throw\r\n  }\r\n   \/\/ should terminate parsing of current BlockStatement\r\n   require('c')\r\n}\r\n```\r\n```js\r\nfunction a() {  \/\/ <- executedPath=true\r\n  for (;;) {  \/\/ <- executedPath=false for all loops\r\n     require('a') \/\/ should be required\r\n     if (true) {  \/\/ <- executedPath=true\r\n         return;  \/\/ <- terminated=return\r\n     }\r\n     \/\/ should terminate parsing of current BlockStatement\r\n     require('c')\r\n  } \/\/ <- terminated=undefined\r\n  \r\n  try { \/\/ <- executedPath=true same executedPath for each inner block\r\n     throw 2; \/\/ <- terminated=throw\r\n     \/\/ should not be parsed\r\n     require()\r\n  } catch(e) {  \/\/ executedPath=false for every catch\r\n   \r\n  } \/\/ terminated=undefined throw in try\r\n  \/\/ continue parsing..\r\n}\r\n```\r\n\r\ncomplex example\r\n```js\r\nfunction a() {  \/\/ <- executedPath=true\r\n  if (rand()) {  \/\/ <- executedPath=false\r\n    if (true) {  \/\/ <- executedPath=true\r\n        return;  \/\/ <- terminated=return\r\n    }\r\n    \/\/ should terminate parsing of current BlockStatement\r\n    require('c')\r\n  }  \/\/ <- executedPath=true, terminated=undefined\r\n  \r\n  if (true) {  \/\/ <- executedPath=true\r\n       throw 2;  \/\/ <- terminated=throw\r\n  }  \/\/ <- executedPath=true, terminated=throw\r\n\r\n   \/\/ should terminate parsing of current BlockStatement\r\n   require('c')\r\n}\r\n```\r\n\r\nand one more  \ud83d\udd1e\r\n```js\r\nfunction a(name) { \/\/ executedPath=true\r\nswitch (name) { \/\/ executedPath=false for each switch\r\n  case \"a\": { \/\/ executedPath=false from parent\r\n     if (true) return; \/\/ executedPath=true, terminated=return\r\n     \/\/ skip parsing current block\r\n     require('a')\r\n     return 1;\r\n  } \/\/ terminated=undefined since `case: a` block is executedPath=false\r\n  case \"b\":\r\n     if (true) return; \/\/ executedPath=true, terminated=return\r\n     \/\/ skip parsing current switch case, but not current block \u26a0\ufe0f\r\n     \/\/ we should not mark current block as returned=true\r\n     require('a');\r\n     return 2;\r\n  case \"c\":\r\n    \/\/ should be parsed\r\n     return require('c');\r\n  case \"d\":\r\n    \/\/ \/\/ should be parsed\r\n     return require('c');\r\n  default:\r\n     throw new Error(\"Unexcepted test data\");\r\n}\r\n}\r\n```\r\n\r\n**Notes regarding feature implementation**\r\n\r\n- right now `parser.hooks.terminate` looks kind of useless, not sure about it..\r\n\r\n**TODO**\r\ndrop skipped code. Any ideas how to do it better? we should do this from `terminated!=undefined` blocks till `terminated=undefined` blocks\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","@vankop Can you rebase? Thank you","- [ ] Add test case for hoisted function after return\r\n- [ ] Add test case for dynamic import after return\r\n- [ ] Change test case to use `require(\"fail\")` instead of importing in existing module (so it actually fails compiling when parsing that part)"],"labels":["PR: CI-ok","PR: unreviewed"]},{"title":"Dead code eliminator for constant expression doesn't handle \"return early\" if statements","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nDead code eliminator for constant expression doesn't handle \"return early\" `if` statements.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. `git clone git@gist.github.com:38b17bb4757ddab9f65efc3bd4e3c083.git`\r\n2. `npm install`\r\n3. `npm run build:dev`\r\n\r\nAfter run you can see that a new chunk was created and the expression `(await import('.\/module')).getSomething();` is parsed by webpack.\r\n\r\n```js\r\nasync function main() {\r\n\tif (true) { \/\/ it might be a result of expression with `DefinePlugin`\r\n\t\treturn;\r\n\t} else {\r\n\t\t\/\/ this expression is NOT parsed and the new chunk is NOT created\r\n\t\t\/\/ (await import('.\/module')).getSomething();\r\n\t}\r\n\r\n\t\/\/ this expression is parsed and the new chunk is created\r\n\t(await import('.\/module')).getSomething();\r\n}\r\n```\r\n\r\nBut if you comment [this line](https:\/\/gist.github.com\/timocov\/38b17bb4757ddab9f65efc3bd4e3c083#file-index-js-L10) and uncomment [this one](https:\/\/gist.github.com\/timocov\/38b17bb4757ddab9f65efc3bd4e3c083#file-index-js-L6) a chunk will not be created.\r\n\r\n---\r\n\r\nFrom https:\/\/github.com\/webpack\/webpack\/issues\/16672\r\n\r\nHowever, this case is just a simple example of what can pre dead code elimination can achieve.\r\n\r\nThere are still a lot of scenarios not covered.\r\n1. Per File level optimization, like if-return.\r\n``` typescript\r\nexport const treeShakingTestAsync = async () => {\r\n    console.log('treeShakingTestAsync');\r\n\r\n\r\n    const { foo } = await import(\/* webpackChunkName: \"bundle_pc\" *\/ '.\/pc');\r\n    console.log(foo);\r\n    \/\/ Code wont't be reached after if_return, but still get to be bundled, and Baz get to be bundled as well, due to splitchunk.\r\n    if (false) {\r\n        return;\r\n    }\r\n    const { Baz } = await import(\/* webpackChunkName: \"bundle_mobile\" *\/'.\/mobile');\r\n    console.log(Baz);\r\n};\r\n\r\n```\r\n2. unused exports\r\n``` typescript\r\nexport const treeShakingTestAsync = async () => {\r\n    console.log('treeShakingTestAsync');\r\n    \r\n    const { foo } = await import(\/* webpackChunkName: \"bundle_pc\" *\/ '.\/pc');\r\n    console.log(foo);\r\n};\r\n\r\nexport const unusedExport = async () => {\r\n    console.log('unusedExport');\r\n    \/\/ this never be refered from entry.\r\n    const { Baz } = await import(\/* webpackChunkName: \"bundle_mobile\" *\/ '.\/mobile');\r\n    console.log(Baz);\r\n};\r\n```\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nNo chunk created in both cases since they both are \"inaccessible\".\r\n\r\nI'd say that this pattern (return early) is quite common so it was surprised that it is not handled so far.\r\n\r\nOf course it might be easily \"fixed\" with a workaround by placing the code to `else` statement, but I think it would be better to have handling of this in webpack.\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.54.0\r\nNode.js version: v14.16.0\r\nOperating System: win10 x64\r\nAdditional tools: none\r\n","comments":["<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Bump. Fixing this issue can save a lot of build time and memory due to large dead chunks being eliminated.","Shouldn't the issue be reopened?","bump","Bump?","Bump pls","I'd love to keep this issue tracked, as this would be perfect to tackle optional dependencies dynamic import and the tree-shakability of related chunks.\r\n\r\nIs it possible to achieve this with other configuration that we're unaware of?"],"labels":["enhancement","inactive","webpack-5"]},{"title":"support `\\\\` windows UNC paths","body":"Feature request\r\n\r\n@vankop I think we should open an issue for supporting `\\\\` windows UNC paths (https:\/\/docs.microsoft.com\/ru-ru\/dotnet\/standard\/io\/file-path-formats#unc-paths), not high priority,\r\n\r\n_Originally posted by @alexander-akait in https:\/\/github.com\/webpack\/webpack\/issues\/12212#issuecomment-920035556_\r\n","comments":["<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump, still make sense","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["enhancement","webpack-5"]},{"title":"resolve.fallback and resolve.alias do not work with `node:` prefix","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\nresolve.fallback and resolve.alias do not work with `node:` prefix\r\n\r\n**What is the current behavior?**\r\n\r\n```\r\nModule build failed: UnhandledSchemeError: Reading from \"node:fs\" is not handled by plugins (Unhandled scheme).\r\nWebpack supports \"data:\" and \"file:\" URIs by default.\r\nYou may need an additional plugin to handle \"node:\" URIs.\r\n```\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nmodule.exports = {\r\n    mode: \"development\",\r\n    target: \"web\",\r\n    entry: \".\/entry.js\",\r\n    resolve: {\r\n      fallback: {\r\n        path: false,\r\n        'node:path': false,\r\n      },\r\n      alias: { \r\n        path: false,\r\n        'node:path': false,\r\n      }\r\n    }\r\n};\r\n```\r\n\r\n**entry.js**\r\n\r\n```js\r\nimport * as mod from \"node:fs\";\r\n\r\nconsole.log(mod);\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nfallback and aliases should work\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.52.0\r\nNode.js version: any\r\nOperating System: any\r\nAdditional tools: any\r\n","comments":["Since this isn't already supported, wouldn't it be easier to support `node:` _also_ for `target: \"web\"`? From what I understand webpack already supports it for `target: \"node\"`","browser doesn't have `node:` schema (i.e. Node.js modules), so for web target it is not possible","@alexander-akait So what behavior webpack should implement? keep request unmodified? ","@vankop Like we do with `require('fs')` for `web` target and allow to ignore `import(\"node:fs\")` using `resolve.alias`\/`resolve.fallback` options","as I understand it should work this way \r\n```\r\nexternals: {\r\n     'node:fs': 'commonjs2 node:fs'\r\n}\r\n```\r\n\r\nI checked it works with configuration above","@alexander-akait can we close this?","@vankop is additional esoteric configuration really the solution here? Can this be handled internally? Does that match the expected result of `\"node:fs\": false`?","The equal external to a false alias would be: `externals: { \"node:fs\": \"{}\" }`","@sokra Another problem - `target: 'node'` doesn't ignore `node:os` packages","on `webpack@6` board..","it seems `target:electron-main` can't resolve `node:net` as well","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","I'm not sure if externals like this are valid\r\n```\r\nexternals: {\r\n     'node:http': 'commonjs2 node:http'\r\n}\r\n```\r\n\r\nBecause in this case, did it means that on a broiwser the polyfill defined with NodePolyfillPlugin fallback will be applied...\r\n\r\nFor now I'm blocked on this issue because I want to use a 3rd part module **@apidevtools\/json-schema-ref-parser** and this one has a dep over **node-fetch** module that block me totally\r\n\r\nI'm not sure about what to do here...\r\n\r\n\r\nFor info the NodePolyfillWebpackPlugin do this fallbacks\r\n\r\n```\r\n\r\n\t\tcompiler.options.resolve.fallback = {\r\n\t\t\t...filter({\r\n\t\t\t\tassert: require.resolve('assert\/'),\r\n\t\t\t\tbuffer: require.resolve('buffer\/'),\r\n\t\t\t\tconsole: require.resolve('console-browserify'),\r\n\t\t\t\tconstants: require.resolve('constants-browserify'),\r\n\t\t\t\tcrypto: require.resolve('crypto-browserify'),\r\n\t\t\t\tdomain: require.resolve('domain-browser'),\r\n\t\t\t\tevents: require.resolve('events\/'),\r\n\t\t\t\thttp: require.resolve('stream-http'),\r\n\t\t\t\thttps: require.resolve('https-browserify'),\r\n\t\t\t\tos: require.resolve('os-browserify\/browser'),\r\n\t\t\t\tpath: require.resolve('path-browserify'),\r\n\t\t\t\tpunycode: require.resolve('punycode\/'),\r\n\t\t\t\tprocess: require.resolve('process\/browser'),\r\n\t\t\t\tquerystring: require.resolve('querystring-es3'),\r\n\t\t\t\tstream: require.resolve('stream-browserify'),\r\n\t\t\t\t\/* eslint-disable camelcase *\/\r\n\t\t\t\t_stream_duplex: require.resolve('readable-stream\/lib\/_stream_duplex'),\r\n\t\t\t\t_stream_passthrough: require.resolve('readable-stream\/lib\/_stream_passthrough'),\r\n\t\t\t\t_stream_readable: require.resolve('readable-stream\/lib\/_stream_readable'),\r\n\t\t\t\t_stream_transform: require.resolve('readable-stream\/lib\/_stream_transform'),\r\n\t\t\t\t_stream_writable: require.resolve('readable-stream\/lib\/_stream_writable'),\r\n\t\t\t\tstring_decoder: require.resolve('string_decoder\/'),\r\n\t\t\t\t\/* eslint-enable camelcase *\/\r\n\t\t\t\tsys: require.resolve('util\/'),\r\n\t\t\t\ttimers: require.resolve('timers-browserify'),\r\n\t\t\t\ttty: require.resolve('tty-browserify'),\r\n\t\t\t\turl: require.resolve('url\/'),\r\n\t\t\t\tutil: require.resolve('util\/'),\r\n\t\t\t\tvm: require.resolve('vm-browserify'),\r\n\t\t\t\tzlib: require.resolve('browserify-zlib')\r\n\t\t\t}),\r\n\t\t\t...compiler.options.resolve.fallback\r\n\t\t};\r\n```"],"labels":["bug","X3: discussion required","webpack-5"]},{"title":"Adds option to skip storing cache to the filesystem","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nThis PR adds the capability to not store the filesystem cache. This is specially useful when running Webpack in a disposable CI environment: storing the cache back to the filesystem is a waste since it is a disposable environment, and according to my tests it can speed up Webpack compilation up to 60 seconds.\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nNew feature.\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nRun `yarn test`.\r\nLinked it to my project and tested the new option.\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo, is a new config option.\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nUpdate https:\/\/webpack.js.org\/configuration\/cache\/#cachestore\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n\r\n**Related issues**\r\n#13581","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","> The behavior is equal to cache: true\/cache: { type: \"memory\" }? Which new behavior are you trying to add?\r\n\r\nI don't think it is. I want Webpack to read the cache from the filesystem, but not bother serializing and writing it back if something has changed.\r\n\r\nThe main use case is CI: we run CI on a docker image that already has a pre-populated webpack cache from a previous build. In some cases that cache will be outdated and Webpack will have to compile everything again (as expected). But in those cases we don't want to write it back to the filesystem, because the container will get disposed after the build anyway.","> I want Webpack to read the cache from the filesystem, but not bother serializing and writing it back if something has changed.\r\n\r\nah ok, but that's not what the PR implements. It also disables restoring from cache.","> The main use case is CI: we run CI on a docker image that already has a pre-populated webpack cache from a previous build. In some cases that cache will be outdated and Webpack will have to compile everything again (as expected). But in those cases we don't want to write it back to the filesystem, because the container will get disposed after the build anyway.\r\n\r\nThis idea of the cache it that you store it somewhere outside of the docker container, so it is able to keep the cache between runs.","> ah ok, but that's not what the PR implements. It also disables restoring from cache.\r\n\r\nAh I see what you mean \ud83e\udd26\ud83c\udffc . What do you think a good implementation would be? Some config option that we can read from `PackFileCacheStrategy#afterAllStored` and make that method basically a noop?"],"labels":["PR: CI-ok","PR: reviewed-changes-requested","PR: conflict"]},{"title":"Fix: managedPaths\/snapshot is expected to return absolute paths.","body":"Webpack throws when `applySnapshotDefaults` resolves watchpack and it returns a relative path rather than absolute.\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n`applySnapshotDefaults` already does a regex check. This PR adds an `isAbsolute` check if there's a match.\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNo.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo.\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNo.\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","In which cases does `require.resolve` return a non-absolute path?","require.resolve is replaced with (or returns) a relative path when webpack is built with webpack. ","<!-- identifier: head-main -->\n\nHi @SahidMiller.\n\nJust a little hint from a friendly bot about the best practice when submitting pull requests:\n\n> Don't submit pull request from your own `main` branch. It's recommended to create a feature branch for the PR.\n\n*You don't have to change it for this PR, just make sure to follow this hint the next time you submit a PR.*"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"Circular hash dependency for hashed folder names","body":"The same https:\/\/github.com\/webpack\/webpack\/issues\/16858\r\n\r\n___\r\n\r\n<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nA `Circular hash dependency` compilation error is thrown for hash collisions in folder names.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nApplying this patch to my webpack config (from create-react-app):\r\n\r\n```diff\r\ndiff --git a\/config\/webpack\/webpack.config.ts b\/config\/webpack\/webpack.config.ts\r\nindex fc4bca3fc3..3bd779a7c1 100644\r\n--- a\/config\/webpack\/webpack.config.ts\r\n+++ b\/config\/webpack\/webpack.config.ts\r\n@@ -273,13 +273,13 @@ const config = function (webpackEnv: Configuration['mode'], target = 'web'): Con\r\n           \/\/ There will be one main bundle, and one file per asynchronous chunk.\r\n           \/\/ In development, it does not produce real files.\r\n           filename: isEnvProduction\r\n-            ? 'static\/js\/[name].[contenthash:8].js'\r\n+            ? 'static\/js\/[contenthash:2]\/[name].[contenthash:8].js'\r\n             : isEnvDevelopment\r\n             ? 'static\/js\/bundle.js'\r\n             : undefined,\r\n           \/\/ There are also additional JS chunk files if you use code splitting.\r\n           chunkFilename: isEnvProduction\r\n-            ? 'static\/js\/[name].[contenthash:8].chunk.js'\r\n+            ? 'static\/js\/[contenthash:2]\/[name].[contenthash:8].chunk.js'\r\n             : isEnvDevelopment\r\n             ? 'static\/js\/[name].chunk.js'\r\n             : undefined,\r\n@@ -715,8 +715,8 @@ const config = function (webpackEnv: Configuration['mode'], target = 'web'): Con\r\n               new MiniCssExtractPlugin({\r\n                 \/\/ Options similar to the same options in webpackOptions.output\r\n                 \/\/ both options are optional\r\n-                filename: 'static\/css\/[name].[contenthash:8].css',\r\n-                chunkFilename: 'static\/css\/[name].[contenthash:8].chunk.css'\r\n+                filename: 'static\/css\/[contenthash:2]\/[name].[contenthash:8].css',\r\n+                chunkFilename: 'static\/css\/[contenthash:2]\/[name].[contenthash:8].chunk.css'\r\n               }),\r\n             \/\/ Generate an asset manifest file with the following content:\r\n             \/\/ - \"files\" key: Mapping of all asset filenames to their corresponding\r\n```\r\n\r\nproduces a `Circular hash dependency` compilation error. I suspect a reasonably large project and\/or many chunks would be required to reliably produce a collision.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nI expect content hash collisions to be tolerated for folder names.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.51.1\r\nNode.js version: 14.17.5\r\nOperating System: Tested on OSX & Linux\r\n","comments":["Please provide steps to reproduce ","@alexander-akait\r\n\r\n1. Make a large project, big enough to produce hash collisions in chunks\r\n2. Configure webpack to include content hashes in output folder names\r\n3. Observe the error","I ask to provide because hash collision is not easy to reproduce and debug","Note, shorted hash is always has hash collision ","You should not use value is less than `8`","> You should not use value is less than 8\r\n\r\nIf you read my report, I wrote that I expect content hash collisions to be tolerated for folder names. Can you explain why this is an invalid assumption? It worked fine in webpack 4. ","Because webpack v4 do not has real content hash values, now we replace all urls\/links\/imports on real content hash, so there is place for collision ","It should be possible to place two chunk files with non-colliding 8-character hashes into a folder with colliding 2-character hashes. ","There are limitations as I described above","I don't see why the hash replacement mechanism can't check if it's a folder name or a file name before throwing.","Okay, feel free to send a PR, if you think it is easy","And, yes, when we generate hashes, no files and directories exists, writing them happens only after hashes were calculated ","I never said it's easy, only that it's expected functionality that worked in v4.","You can disable real content hashing with `output.realContentHash: false` to get the webpack 4 behavior.","Another the same problem https:\/\/github.com\/webpack\/webpack\/issues\/14574, contenthash can overlap with existing value in source code, for example:\r\n```\r\nvar f=[1,1.387039845,1.306562965,1.175875602,1,.785694958,.5411961,.275899379]\r\n```\r\n\r\nAnd `785694958` can be override on `hash` (collision). To solve it we need keep places for replacing ","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","closing in favor of https:\/\/github.com\/webpack\/webpack\/issues\/15288","@vankop It is another problem","Let's keep open","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","It looks like this is still an issue, is there a way to prevent it from being auto-closed?\r\n\r\nThis behaviour is quite difficult to catch and can cause catastrophic failures in builds (in our case, it was replacing moduleids so dynamic imports would fail)\r\n\r\nEdit: For others, we fixed this issue by changing our hash length from 5 to 10. Anything less than 5 or 6 can easily collide with module IDs which are numerical","I can't stress how dangerous this bug can be. We use `[contenthash:8]\/chunk-[contenthash].min.js` as `chunkFilename` so that the chunks are namespaced in different folders rather than a single one (such namespacing being required on very large S3 buckets to avoid some stability issues).\r\n\r\nAs the size of our application grew we started to hit *very regular* overlaps, which end up corrupting the generated files. Since they may hide inside lazy-loaded chunks, CI tests may fail to detect these errors, eventually causing a broken build to reach production. We managed to avoid that so far, but it's a very uncomfortable position to be in. We can't increase the hash length, as otherwise the namespacing will be too granular and the S3 issues may come back.\r\n\r\nWe're now running a pass after each Webpack build to ensure the generated files are correct. It's not perfect however (Webpack may generate a corrupted but syntactically valid file), so we're still hoping to find a better fix."],"labels":["bug","webpack-5","Send a PR"]},{"title":"commonjs tree shaking not work in webpack5","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nall the methods defined in commonjs module will be include in dist file\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nThis is the [repo](https:\/\/github.com\/FBI-tool\/webpack5) for reproduce\u3002\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nonly include used methods in my commonjs module\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  \r\n- \"webpack\": \"^5.51.1\",\r\n- \"webpack-cli\": \"^4.8.0\"\r\nNode.js version:  v12.14.0\r\nOperating System: Win 10\r\nAdditional tools: null\r\n","comments":["Not implemented yet https:\/\/github.com\/webpack\/webpack\/projects\/5#card-30291446, but we strongly recommend migrate on ECMA modules","> Not implemented yet https:\/\/github.com\/webpack\/webpack\/projects\/5#card-30291446, but we strongly recommend migrate on ECMA modules\r\n\r\nI know ECMA modules is the future. But there're still lots of npm packages are commonjs modules, which increase the size of my project.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Still make sense"],"labels":["enhancement","webpack-5"]},{"title":"[Breaking change] NormalModuleReplacementPlugin resolves modules using old resource's context in 5.49.0","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of Webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nUsing the NormalModuleReplacementPlugin, the context in which imports were resolved inside the replacing resource (newResource) was changed in version 5.49.0.\r\n\r\nPreviously with 5.48.0 and lower, imports were resolved in context specific to the replacing resource (newResource).\r\nIn 5.49.0 the resolution context remains the same as the original resource.\r\n\r\nperhaps issue is caused by this line\r\nhttps:\/\/github.com\/webpack\/webpack\/compare\/v5.48.0...v5.49.0#diff-a5db25852bfa94348bb69d94ab95dbef8474d789240b4345cf518e5dd64547ccR249\r\n`lib\/NormalModule.js` at line 249:\r\n```js\r\nsuper(type, context || getContext(resource), layer);\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nhttps:\/\/codesandbox.io\/s\/setup-basic-node-js-server-forked-r1d0c?file=\/src\/index.js\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nIf this is intended\/necessary change, then it should be explicitly stated in the documentation for NormalModuleReplacementPlugin and released as a breaking change.\r\nOtherwise, it should resolve imports in replacing resource (newResource) using newResource context.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.49.0\/5.48.0\r\nNode.js version: v14.16.1\r\nOperating System:  MacOS BigSur 11.5.1\r\nAdditional tools: \r\n","comments":["I can contribute on this","Sure,we just waiting for webpack team statement on that. ","ok..","Any updates?","As a workaround it's needs to set a context of new resource.\r\nIn my case `NormalModuleReplacementPlugin` resolves regex in `afterResolve` phase, so I use `createData`:\r\n```ts\r\nnew webpack.NormalModuleReplacementPlugin(regex, (resource) => {\r\n  if (resource.createData) {\r\n    resource.createData.resource = newResource;\r\n    resource.createData.context = path.dirname(newResource);\r\n  }\r\n})\r\n```\r\nIt's worked for me.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["bug","webpack-5"]},{"title":"Feature: allow module cache-busting in development mode","body":"## Feature request\r\n\r\n**What is the expected behavior?**\r\n\r\nThis feature is related to this issue: https:\/\/github.com\/module-federation\/module-federation-examples\/issues\/1025\r\nThe short of it is that I want to implement hot reloading for Module Federation, but for this to work I need some way to tell webpack to invalidate loaded modules so that the latest version of a Federated Module can be loaded.\r\n\r\nA typical setup would look like this:\r\n\r\n1. A host runs in a separate server instance\r\n2. A remote (federated module) runs in its own webpack-dev-server instance\r\n3. Changes are made to the remote, which rebuilds\r\n4. In response to the changes, the host reloads the latest version of the remote, instantly reflecting the changes rather than reloading the page.\r\n\r\nI have gotten most of the above to work, however, whenever I load a new version of the remote, Webpack still uses the old code. It seems as if once webpack has loaded a module, it will always fetch it from cache on future invocations, meaning newer versions are never loaded.\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nTo have a hot reloading setup for Module Federation.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nAssuming it's correct that module cache is the problem, there should be some way (e.g. a client-side API) for telling Webpack to invalidate all module caches, so that the next load of a module results in a fresh load of whatever code is available for it.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n","comments":["There is a [`module.hot.invalidate()` API](https:\/\/webpack.js.org\/api\/hot-module-replacement\/#invalidate), which allows to schedule a HMR update of a module. All invalidated modules will be re-executed on `module.hot.apply()`.\r\n\r\nBut that might not work for RemoteModules, since they are loaded during chunk loading. Re-evaluating will not lead to loading them from a *new* remote, but loading them again from the *same* remote. So if your exposed module is self-accepting, it would work.","Eventually we probably would like to implement cross-container HMR, where the remote would expose a `hot` export, which bubbles the HMR event from the exposed module to the remote module.","@sokra thanks for the reply! Sorry if I'm misunderstanding, but would this imply that if I exposed my remote as a new container with each build, I could essentially achieve the same effect? I.e. get the latest compiled version every time? Is there a programmatic way to make sure the container is unique between each build for that purpose?","To answer the above - it makes no difference. Seems like the entire container needs to be busted for this to work (new, unique module IDs etc).","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","bump","Guessing this is closed due to inactivity. Just pointing out to anyone finding it that it has **not** been resolved.","Is this completed? ","Sorry, no"],"labels":["enhancement","inactive","webpack-5","module-federation"]},{"title":"Initial styles are broken with lazyCompilation and style-loader","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nThe `lazyCompilation` experimental feature is very useful for multi-entry projects, the switch to webpack 5 did cause an overall slow down for cold builds and hot module reload times but I've been able to improve the situation with a bit of tuning.\r\n\r\nThis issue is kind of minor since reloading the page does fix the broken styles, but it's still a big enough issue that I'm going to have to continue using `mini-css-extract-loader` in development until this issue is resolved.\r\n\r\n**What is the current behavior?**\r\n\r\nAt startup with `lazyCompilation`, it seems that styles from **external** styles, such as those loaded from a shared component library, are not being injected into the document. As mentioned, the styles do load successfully after reloading the page.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nI'm using `less`, so the config looks like this:\r\n\r\n```js\r\n  {\r\n    test: \/\\.less$\/,\r\n    use: [\"style-loader\", \"css-loader\", \"less-loader\"],\r\n  }\r\n```\r\n\r\nUse `lazyCompilation`:\r\n```js\r\n experiments: {\r\n    lazyCompilation: true,\r\n  },\r\n```\r\n\r\nExample entry point:\r\n\r\n```js\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\/\/ Local component that has it's own stylesheet.\r\nimport Widget from \"..\/components\/Widget\";\r\n\/\/ Component from component library that also imports it's own stylesheet.\r\nimport SharedWidget from \"shared-components\/Widget\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      {\/* Styles work as expected *\/}\r\n      <Widget \/>\r\n      {\/* Styles are not added to the document after the initial compilation. *\/}\r\n      <SharedWidget \/>\r\n    <\/>\r\n  );\r\n};\r\n\r\nReactDOM.render(<App \/>, document.getElementById(\"root\"));\r\n\r\n```\r\nI'm actually using Suspense here with a lazy loaded App component but it doesn't seem to affect this issue.\r\n\r\n\r\n1. Start webpack dev server\r\n2. Load the entry point\r\n3. Wait for the entry point to compile\r\n4. `Widget` styles are added to the document, `SharedWidget` styles are not.\r\n5. Refresh the page to fix the issue.\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n`SharedWidget` styles should be added to the document without having to manually reload the page.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  ~5.45.0\r\nNode.js version: 10, same on 14\r\nOperating System: macos\r\nAdditional tools:\r\n\r\nSome of the related dependencies:\r\n```json\r\n\/\/ v5 claims not to be compatible with webpack 5 but we haven't been able to switch over yet\r\n\/\/ due to some breaking changes. I get the same results on v7.\r\n\"less-loader\": \"^5.0.0\",\r\n\"mini-css-extract-plugin\": \"1.3.6\",\r\n\"css-loader\": \"^3.4.1\",\r\n\"style-loader\": \"^2.0.0\",\r\n\"esbuild-loader\": \"^2.13.0\",\r\n```\r\n\r\n","comments":["I can contribute","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["bug","webpack-5"]},{"title":"Dynamic imports don't work when `exports` specified in package.json and aliases","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\n---\r\n**The same problem in `require.context` and `import.meta.webpackContext`**, so need to be fixed too\r\n---\r\n\r\nFor example, `highlight.js` has the following in `exports` of `package.json`:\r\n```json\r\n{\r\n\t\"exports\": {\r\n\t\t\".\/lib\/languages\/*\": {\r\n\t\t\t\"require\": \".\/lib\/languages\/*.js\",\r\n\t\t\t\"import\": \".\/es\/languages\/*.js\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nI tried to import a language dynamically using the following code in a Vue 3 \/ TS 4 app:\r\n```js\r\nconst langName = ref('')\r\nconst message = ref('')\r\nconst module = await import(\r\n  `highlight.js\/lib\/languages\/${langName.value}`\r\n)\r\nmessage.value = module.default.name\r\n```\r\n\r\nThis leads to the following error:\r\n```\r\n error  in .\/src\/App.vue?vue&type=script&lang=ts\r\n\r\nModule not found: Error: Package path .\/lib\/languages is not exported from package <path_to_proj>\/node_modules\/highlight.js (see exports field in <path_to_proj>\/node_modules\/highlight.js\/package.json)\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n0. Clone [minimum reproduction repo](https:\/\/github.com\/dhruvkb\/expcheck) and `npm install`.\r\n0. Run the project with `npm run serve`.\r\n0. See error.\r\n\r\n**What is the expected behavior?**\r\n\r\nReplacing `${langName.value}` with a literal value works and imports the file as expected:\r\n\r\n```js\r\nconst langName = ref('')\r\nconst message = ref('')\r\nconst module = await import(\r\n  `highlight.js\/lib\/languages\/javascript`\r\n)\r\nmessage.value = module.default.name\r\n```\r\n\r\nDynamic import should work equally well.\r\n\r\n**Workarounds**\r\n\r\nThe comment https:\/\/github.com\/highlightjs\/highlight.js\/issues\/3223#issuecomment-886143417 contains possible workarounds, if that helps to narrow the problem.\r\n\r\n**Other relevant information:**\r\nwebpack version: 5\r\nNode.js version: 14\r\nOperating System: mac OS\r\nAdditional tools: TypeScript 4, Vue 3, Babel 7\r\n","comments":["Yep, bug, feel free to send a fix","@alexander-akait can you give me some pointers on where to start looking? I'm clueless about what to do to fix this.","I think you need to start debug here https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/ContextModuleFactory.js#L155","This may is a bit more involved to fix...","should this even work.. spec disallow requesting directories..","@vankop this problem is not for importing directories, it occurs when dynamically importing a file (which is present in the `exports` key) from the directory. The import works when the path is statically specified but not when it is generated from string interpolation.","Not sure if related to this, but I get this error from my Next.js app when using `highlight.js@v11.2.0` in my local dev.\r\n```bash\r\nError [ERR_PACKAGE_PATH_NOT_EXPORTED]: Package subpath '.\/lib\/languages\/arduino' is not defined by \"exports\" in \/xxx\/node_modules\/highlight.js\/package.json imported from \/xxx\/node_modules\/lowlight\/lib\/common.js\r\n```\r\n\r\nThen when trying to reproduce in code sandbox, I get a different error: https:\/\/codesandbox.io\/s\/interesting-fire-thu88?file=\/pages\/index.js","@dominicarrojado the Next.js error you mention is the same that I faced.","~~Rewriting the import to only contain a variable and not a constructed string fixed the build for me.~~\r\n~~So in the example app this helped: https:\/\/github.com\/dhruvkb\/expcheck\/pull\/1\/files~~\r\n\r\n**update**: however this breaks the dynamic import and thus the chunks for these packages will not be build.\r\n\r\nI tried various things (`webpackInclude`, `webpackExclude`, `webpackExports` magical comments) to remove the `lib\/languages` from the modules being resolved but none of them worked. Looks like webpack tries to resolve the prefix first when trying to perform an dynamic import. While this works with directories (`languages` directory must exist for `languages\/javascript.js` to exist) it fails with package.js exports.","I ran the build again with `--profile` writing to a json log.\r\n<details><summary>Trace taken with `--profile`<\/summary>\r\n\r\n```\r\nModuleNotFoundError: Module not found: Error: Package path .\/lib\/languages is not exported from package \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/highlight.js (see exports field in \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/highlight.js\/package.json)\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/webpack\/lib\/Compilation.js:1768:28\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/webpack\/lib\/ContextModuleFactory.js:210:15\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/neo-async\/async.js:2830:7\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/neo-async\/async.js:6877:13\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/webpack\/lib\/ContextModuleFactory.js:180:26\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/Resolver.js:340:22\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/Resolver.js:408:21\r\n    at eval (eval at create (\/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:9:1)\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/Resolver.js:408:21\r\n    at eval (eval at create (\/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:24:1)\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/DescriptionFilePlugin.js:84:26\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/Resolver.js:408:21\r\n    at eval (eval at create (\/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:24:1)\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/Resolver.js:408:21\r\n    at eval (eval at create (\/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:55:1)\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/ConditionalPlugin.js:50:25\r\n```\r\n\r\n<\/details>","> I think you need to start debug here https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/ContextModuleFactory.js#L155\r\n\r\n<details> <summary>The one entry in `dependencies` at that point<\/summary>\r\n\r\n```\r\ncategory: \"esm\"\r\nchunkName: \"highlight\/[request]\"\r\nexclude: null\r\ngroupOptions: {}\r\ninclude: null\r\nmode: \"lazy\"\r\nnamespaceObject: true\r\nrecursive: true\r\nreferencedExports: null\r\nregExp: \/^\\.\\\/.*$\/\r\nrequest: \"highlight.js\/lib\/languages\"\r\ntypePrefix: \"import()\"\r\n```\r\n<\/details>\r\nLooks like it is really trying to resolve `highlight.js\/lib\/languages`.\r\n\r\nI think there should not be an attempts to resolve `highlight.js\/lib\/languages` in the first place. But maybe that's okay and should succeed?","<details>\r\n<summary>Trace of the inner error<\/summary>\r\n\r\n```\r\nError: Package path .\/lib\/languages is not exported from package \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/highlight.js (see exports field in \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/highlight.js\/package.json)\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/ExportsFieldPlugin.js:104:7\r\n    at Hook.eval [as callAsync] (eval at create (\/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:22:1)\r\n    at Hook.CALL_ASYNC_DELEGATE [as _callAsync] (\/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/tapable\/lib\/Hook.js:18:14)\r\n    at Resolver.doResolve (\/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/Resolver.js:407:16)\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/DescriptionFilePlugin.js:74:17\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/DescriptionFileUtils.js:118:13\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/forEachBail.js:16:12\r\n    at onJson (\/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/DescriptionFileUtils.js:108:6)\r\n    at Array.<anonymous> (\/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/DescriptionFileUtils.js:68:7)\r\n    at runCallbacks (\/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/CachedInputFileSystem.js:27:15)\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/CachedInputFileSystem.js:200:4\r\n    at Array.<anonymous> (\/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/CachedInputFileSystem.js:440:8)\r\n    at runCallbacks (\/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/CachedInputFileSystem.js:27:15)\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/enhanced-resolve\/lib\/CachedInputFileSystem.js:200:4\r\n    at \/home\/azul\/code\/nextcloud\/server\/apps\/text\/node_modules\/graceful-fs\/graceful-fs.js:123:16\r\n    at FSReqCallback.readFileAfterClose [as oncomplete] (internal\/fs\/read_file_context.js:71:3)\r\n```\r\n\r\n<\/details>","#14598 was an attempt at fixing this by ignoring exports in context resolvers. While this fixes the build it's also too permissive.","So how are people dealing with this in real life other than begging package maintainers to stop using `imports`?\r\n\r\nIt would be nice to have a workaround to suggest to our users, particular if this is not going to be fixed anytime soon.","> So how are people dealing with this in real life other than begging package maintainers to stop using `imports`?\r\n> \r\n> It would be nice to have a workaround to suggest to our users, particular if this is not going to be fixed anytime soon.\r\n\r\nWhile suboptimal, we switched to an expression.\r\n\r\nFrom:\r\n\r\n```js\r\nimport(\r\n\/* webpackInclude: \/(en|nl|tk|de)\\.js$\/ *\/\r\n  `\/@angular\/common\/locales\/${language}.js`\r\n)\r\n```\r\n\r\nTo:\r\n\r\n```js\r\nconst moduleName = `\/@angular\/common\/locales\/${language}.js`;\r\nimport(\r\n  \/* webpackInclude: \/(en|nl|tk|de)\\.js$\/ *\/\r\n  moduleName\r\n)\r\n```\r\n\r\nThis does yield a warning:\r\n\r\n> Warning: Critical dependency: the request of a dependency is an expression\r\n\r\nBut it seems to work in our case for now.\r\n\r\n---\r\nEdit:\r\n\r\nScrap all of that, as @Hypnosphi correctly identified, it does not work on-demand, it seemed to work at first but seemingly our translations are loaded from a different source.","@milo526 by \"work\", do you mean that your build passes or that languages are actually being loaded on demand? I'm asking because your example is very similar to this: https:\/\/github.com\/webpack\/webpack\/issues\/13865#issuecomment-953327279","> So how are people dealing with this in real life other than begging package maintainers to stop using `imports`?\r\n> \r\n> It would be nice to have a workaround to suggest to our users, particular if this is not going to be fixed anytime soon.\r\n\r\nTo overcome this in an Angular app, I've used a relative path to the loaded module, for example:\r\n\r\n```typescript\r\nimport(`@angular\/common\/locales\/${this.userLanguageCode}.js`)\r\n```\r\n\r\nbecame\r\n\r\n```typescript\r\nimport(`..\/..\/..\/..\/node_modules\/@angular\/common\/locales\/${this.userLanguageCode}.mjs`)\r\n```\r\n (ignore path differences, it should not matter)\r\n\r\nApp builds and successfully loads the languages again","I got a temporary hack for this issue. import file normaly from package in a file then do dynamic import of that file.\r\n\r\nsrc\/components\/externalForm\/fwkComponentOnticFormRenderer.tsx\r\n```\r\nimport { OnticFormRenderer } from \"fwk-components\";  \/\/ our internal package. which I was not able to dynamic import directly\r\nexport default OnticFormRenderer;\r\n```\r\n\r\n\r\n```\r\nconst OnticFormRenderer = dynamic(\r\n    \/\/ https:\/\/github.com\/webpack\/webpack\/issues\/13865\r\n  () => import('.\/fwkComponentOnticFormRenderer'),\r\n  {\r\n    ssr: false,\r\n  }\r\n);\r\n```\r\n\r\n","@ichangela-ontic unfortunately it doesn't help with cases like the one mentioned in this issue, where the import string itself is dynamic:\r\n\r\n```\r\nconst module = await import(\r\n  `highlight.js\/lib\/languages\/${langName.value}`\r\n)\r\n```","If you add a webpack alias to `highlight.js`, you can then use that instead of a relative path\r\n\r\n```js\r\n\/\/ this uses webpack-chain, but the idea is the same\r\n  config.resolve.alias.set('highlight-js-alias', path.dirname(require.resolve('highlight.js\/package.json')));\r\n```\r\n\r\nthen you can do \r\n```js\r\nconst file = await import(\r\n          \/* webpackChunkName: \"highlight-js-[request]\" *\/\r\n          `highlight-js-alias\/lib\/languages\/${file}`\r\n        );\r\n```\r\n\r\nThe benefit of this, is that in a monorepo setup for example, `webpack` can find `highlight.js` using node's resolving mechanisms, so if things get hoisted up, you dont have to worry about that.","Also need to fix https:\/\/github.com\/webpack\/webpack\/discussions\/17737"],"labels":["bug","webpack-5"]},{"title":"`experiments.outputModule: true` throws type-error for property on runtime chunk","body":"# Bug report\r\n\r\n**What is the current behavior?**\r\nSetting `experiments.outputModule: true` provokes an error in the compiled bundle in the browser, when using a (single) runtime chunk. The error occurs in the main file `main.9557a1f0.js`, on the very last line of the file:\r\n> Uncaught TypeError: (intermediate value).X is not a function\r\n\r\nThe last few lines in `main.9557a1f0.js`, error happens on the last line:\r\n```js\r\n\/\/ load runtime\r\nimport __webpack_require__ from \".\/runtime.45fa48bb.js\";\r\nimport * as __webpack_self_exports__ from \".\/main.9557a1f0.js\";\r\n__webpack_require__.C(__webpack_self_exports__);\r\nvar __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))\r\nvar __webpack_exports__ = __webpack_require__.X(0, [532,736], () => (__webpack_exec__(5762)));\r\n```\r\n\r\n`runtime.45fa48bb.js` looks like this:\r\n```js\r\n\/******\/ \"use strict\";\r\n\/******\/ var __webpack_modules__ = ({});\r\n\/************************************************************************\/\r\n\/******\/ \/\/ The module cache\r\n\/******\/ var __webpack_module_cache__ = {};\r\n\/******\/ \r\n\/******\/ \/\/ The require function\r\n\/******\/ function __webpack_require__(moduleId) {\r\n\/******\/ \t\/\/ Check if module is in cache\r\n\/******\/ \tvar cachedModule = __webpack_module_cache__[moduleId];\r\n\/******\/ \tif (cachedModule !== undefined) {\r\n\/******\/ \t\treturn cachedModule.exports;\r\n\/******\/ \t}\r\n\/******\/ \t\/\/ Create a new module (and put it into the cache)\r\n\/******\/ \tvar module = __webpack_module_cache__[moduleId] = {\r\n\/******\/ \t\t\/\/ no module.id needed\r\n\/******\/ \t\t\/\/ no module.loaded needed\r\n\/******\/ \t\texports: {}\r\n\/******\/ \t};\r\n\/******\/ \r\n\/******\/ \t\/\/ Execute the module function\r\n\/******\/ \t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\r\n\/******\/ \r\n\/******\/ \t\/\/ Return the exports of the module\r\n\/******\/ \treturn module.exports;\r\n\/******\/ }\r\n\/******\/ \r\n\/******\/ \/\/ expose the modules object (__webpack_modules__)\r\n\/******\/ __webpack_require__.m = __webpack_modules__;\r\n\/******\/ \r\n\/************************************************************************\/\r\n\/******\/ \/* webpack\/runtime\/compat get default export *\/\r\n\/******\/ (() => {\r\n\/******\/ \t\/\/ getDefaultExport function for compatibility with non-harmony modules\r\n\/******\/ \t__webpack_require__.n = (module) => {\r\n\/******\/ \t\tvar getter = module && module.__esModule ?\r\n\/******\/ \t\t\t() => (module['default']) :\r\n\/******\/ \t\t\t() => (module);\r\n\/******\/ \t\t__webpack_require__.d(getter, { a: getter });\r\n\/******\/ \t\treturn getter;\r\n\/******\/ \t};\r\n\/******\/ })();\r\n\/******\/ \r\n\/******\/ \/* webpack\/runtime\/create fake namespace object *\/\r\n\/******\/ (() => {\r\n\/******\/ \tvar getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\r\n\/******\/ \tvar leafPrototypes;\r\n\/******\/ \t\/\/ create a fake namespace object\r\n\/******\/ \t\/\/ mode & 1: value is a module id, require it\r\n\/******\/ \t\/\/ mode & 2: merge all properties of value into the ns\r\n\/******\/ \t\/\/ mode & 4: return value when already ns object\r\n\/******\/ \t\/\/ mode & 16: return value when it's Promise-like\r\n\/******\/ \t\/\/ mode & 8|1: behave like require\r\n\/******\/ \t__webpack_require__.t = function(value, mode) {\r\n\/******\/ \t\tif(mode & 1) value = this(value);\r\n\/******\/ \t\tif(mode & 8) return value;\r\n\/******\/ \t\tif(typeof value === 'object' && value) {\r\n\/******\/ \t\t\tif((mode & 4) && value.__esModule) return value;\r\n\/******\/ \t\t\tif((mode & 16) && typeof value.then === 'function') return value;\r\n\/******\/ \t\t}\r\n\/******\/ \t\tvar ns = Object.create(null);\r\n\/******\/ \t\t__webpack_require__.r(ns);\r\n\/******\/ \t\tvar def = {};\r\n\/******\/ \t\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\r\n\/******\/ \t\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\r\n\/******\/ \t\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\r\n\/******\/ \t\t}\r\n\/******\/ \t\tdef['default'] = () => (value);\r\n\/******\/ \t\t__webpack_require__.d(ns, def);\r\n\/******\/ \t\treturn ns;\r\n\/******\/ \t};\r\n\/******\/ })();\r\n\/******\/ \r\n\/******\/ \/* webpack\/runtime\/define property getters *\/\r\n\/******\/ (() => {\r\n\/******\/ \t\/\/ define getter functions for harmony exports\r\n\/******\/ \t__webpack_require__.d = (exports, definition) => {\r\n\/******\/ \t\tfor(var key in definition) {\r\n\/******\/ \t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\r\n\/******\/ \t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\r\n\/******\/ \t\t\t}\r\n\/******\/ \t\t}\r\n\/******\/ \t};\r\n\/******\/ })();\r\n\/******\/ \r\n\/******\/ \/* webpack\/runtime\/ensure chunk *\/\r\n\/******\/ (() => {\r\n\/******\/ \t__webpack_require__.f = {};\r\n\/******\/ \t\/\/ This file contains only the entry chunk.\r\n\/******\/ \t\/\/ The chunk loading function for additional chunks\r\n\/******\/ \t__webpack_require__.e = (chunkId) => {\r\n\/******\/ \t\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\r\n\/******\/ \t\t\t__webpack_require__.f[key](chunkId, promises);\r\n\/******\/ \t\t\treturn promises;\r\n\/******\/ \t\t}, []));\r\n\/******\/ \t};\r\n\/******\/ })();\r\n\/******\/ \r\n\/******\/ \/* webpack\/runtime\/get javascript chunk filename *\/\r\n\/******\/ (() => {\r\n\/******\/ \t\/\/ This function allow to reference async chunks\r\n\/******\/ \t__webpack_require__.u = (chunkId) => {\r\n\/******\/ \t\t\/\/ return url for filenames based on template\r\n\/******\/ \t\treturn \"chunks\/\" + chunkId + \".\" + {\"62\":\"4d22a6c6\",\"67\":\"eb5bd192\",\"76\":\"a053f510\",\"101\":\"11f763f3\",\"154\":\"4ed28fbc\",\"164\":\"58123216\",\"252\":\"689b50e8\",\"328\":\"39fece55\",\"357\":\"3dcc8e36\",\"364\":\"00dedba0\",\"389\":\"a8523a16\",\"414\":\"e59e9e99\",\"458\":\"37991620\",\"470\":\"aba0e8ed\",\"538\":\"6f777776\",\"615\":\"414e5680\",\"694\":\"53e67fa9\",\"708\":\"b4af9267\",\"777\":\"1c04f591\",\"800\":\"cc3bed2e\",\"805\":\"02503685\",\"806\":\"c545008d\",\"842\":\"35ac0e89\",\"930\":\"d9316a87\",\"968\":\"247135fd\",\"970\":\"60833f54\",\"991\":\"64dd4b9c\"}[chunkId] + \".js\";\r\n\/******\/ \t};\r\n\/******\/ })();\r\n\/******\/ \r\n\/******\/ \/* webpack\/runtime\/get mini-css chunk filename *\/\r\n\/******\/ (() => {\r\n\/******\/ \t\/\/ This function allow to reference all chunks\r\n\/******\/ \t__webpack_require__.miniCssF = (chunkId) => {\r\n\/******\/ \t\t\/\/ return url for filenames based on template\r\n\/******\/ \t\treturn \"\" + \"styles\" + \".\" + \"c71fa8d7\" + \".css\";\r\n\/******\/ \t};\r\n\/******\/ })();\r\n\/******\/ \r\n\/******\/ \/* webpack\/runtime\/global *\/\r\n\/******\/ (() => {\r\n\/******\/ \t__webpack_require__.g = (function() {\r\n\/******\/ \t\tif (typeof globalThis === 'object') return globalThis;\r\n\/******\/ \t\ttry {\r\n\/******\/ \t\t\treturn this || new Function('return this')();\r\n\/******\/ \t\t} catch (e) {\r\n\/******\/ \t\t\tif (typeof window === 'object') return window;\r\n\/******\/ \t\t}\r\n\/******\/ \t})();\r\n\/******\/ })();\r\n\/******\/ \r\n\/******\/ \/* webpack\/runtime\/hasOwnProperty shorthand *\/\r\n\/******\/ (() => {\r\n\/******\/ \t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\r\n\/******\/ })();\r\n\/******\/ \r\n\/******\/ \/* webpack\/runtime\/make namespace object *\/\r\n\/******\/ (() => {\r\n\/******\/ \t\/\/ define __esModule on exports\r\n\/******\/ \t__webpack_require__.r = (exports) => {\r\n\/******\/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n\/******\/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n\/******\/ \t\t}\r\n\/******\/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n\/******\/ \t};\r\n\/******\/ })();\r\n\/******\/ \r\n\/******\/ \/* webpack\/runtime\/publicPath *\/\r\n\/******\/ (() => {\r\n\/******\/ \t__webpack_require__.p = \"\/static\/\";\r\n\/******\/ })();\r\n\/******\/ \r\n\/******\/ \/* webpack\/runtime\/export webpack runtime *\/\r\n\/******\/ export default __webpack_require__;\r\n\/******\/ \r\n\/******\/ \/* webpack\/runtime\/import chunk loading *\/\r\n\/******\/ (() => {\r\n\/******\/ \t\/\/ no baseURI\r\n\/******\/ \t\r\n\/******\/ \t\/\/ object to store loaded and loading chunks\r\n\/******\/ \t\/\/ undefined = chunk not loaded, null = chunk preloaded\/prefetched\r\n\/******\/ \t\/\/ [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\r\n\/******\/ \tvar installedChunks = {\r\n\/******\/ \t\t666: 0,\r\n\/******\/ \t\t532: 0\r\n\/******\/ \t};\r\n\/******\/ \t\r\n\/******\/ \tvar installChunk = (data) => {\r\n\/******\/ \t\tvar {ids, modules, runtime} = data;\r\n\/******\/ \t\t\/\/ add \"modules\" to the modules object,\r\n\/******\/ \t\t\/\/ then flag all \"ids\" as loaded and fire callback\r\n\/******\/ \t\tvar moduleId, chunkId, i = 0;\r\n\/******\/ \t\tfor(moduleId in modules) {\r\n\/******\/ \t\t\tif(__webpack_require__.o(modules, moduleId)) {\r\n\/******\/ \t\t\t\t__webpack_require__.m[moduleId] = modules[moduleId];\r\n\/******\/ \t\t\t}\r\n\/******\/ \t\t}\r\n\/******\/ \t\tif(runtime) runtime(__webpack_require__);\r\n\/******\/ \t\tfor(;i < ids.length; i++) {\r\n\/******\/ \t\t\tchunkId = ids[i];\r\n\/******\/ \t\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\r\n\/******\/ \t\t\t\tinstalledChunks[chunkId][0]();\r\n\/******\/ \t\t\t}\r\n\/******\/ \t\t\tinstalledChunks[ids[i]] = 0;\r\n\/******\/ \t\t}\r\n\/******\/ \t\r\n\/******\/ \t}\r\n\/******\/ \t\r\n\/******\/ \t__webpack_require__.f.j = (chunkId, promises) => {\r\n\/******\/ \t\t\t\/\/ import() chunk loading for javascript\r\n\/******\/ \t\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\r\n\/******\/ \t\t\tif(installedChunkData !== 0) { \/\/ 0 means \"already installed\".\r\n\/******\/ \t\r\n\/******\/ \t\t\t\t\/\/ a Promise means \"currently loading\".\r\n\/******\/ \t\t\t\tif(installedChunkData) {\r\n\/******\/ \t\t\t\t\tpromises.push(installedChunkData[1]);\r\n\/******\/ \t\t\t\t} else {\r\n\/******\/ \t\t\t\t\tif(!\/^(532|666)$\/.test(chunkId)) {\r\n\/******\/ \t\t\t\t\t\t\/\/ setup Promise in chunk cache\r\n\/******\/ \t\t\t\t\t\tvar promise = import(\".\/\" + __webpack_require__.u(chunkId)).then(installChunk, (e) => {\r\n\/******\/ \t\t\t\t\t\t\tif(installedChunks[chunkId] !== 0) installedChunks[chunkId] = undefined;\r\n\/******\/ \t\t\t\t\t\t\tthrow e;\r\n\/******\/ \t\t\t\t\t\t});\r\n\/******\/ \t\t\t\t\t\tvar promise = Promise.race([promise, new Promise((resolve) => (installedChunkData = installedChunks[chunkId] = [resolve]))])\r\n\/******\/ \t\t\t\t\t\tpromises.push(installedChunkData[1] = promise);\r\n\/******\/ \t\t\t\t\t} else installedChunks[chunkId] = 0;\r\n\/******\/ \t\t\t\t}\r\n\/******\/ \t\t\t}\r\n\/******\/ \t};\r\n\/******\/ \t\r\n\/******\/ \t__webpack_require__.C = installChunk;\r\n\/******\/ \t\r\n\/******\/ \t\/\/ no on chunks loaded\r\n\/******\/ })();\r\n\/******\/ \r\n\/************************************************************************\/\r\n\/******\/ \r\n\/******\/ \r\n```\r\n\r\n**What is the expected behavior?**\r\nThere shouldn't be an error on calling `__webpack_require__.X()`; i.e. `X` should be an exsiting property on `__webpack_require__`.\r\n\r\n**Other relevant information:**\r\nwebpack version:  `5.46.0`\r\nNode.js version: `14.17.3`\r\nOperating System: `Ubuntu`","comments":["It was fixed here https:\/\/github.com\/webpack\/webpack\/releases\/tag\/v5.44.0, run `npm ls webpack`","Seem to be another problem. Here runtimeChunk and splitChunks for the initial chunks is used...","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump.","bump?","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","bump"],"labels":["bug","inactive","webpack-5"]},{"title":"[WIP] feat: add documentation links in schema","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nfeature, add links to show in the error output.\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nWIP\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nNothing\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@alexander-akait With the current stacks of the webpack document site (A single page application hosted on github pages), we can't support server side redirects. However we can support client side redirection for urls of `https:\/\/webpack.js.org\/r\/webpack\/?option=output\/chunkLoadTimeout` pattern with just one intermediate page - `r\/webpack.mdx` in this case. Pattern like `https:\/\/webpack.js.org\/webpack-options\/output\/chunk-load-timeout` would require us to generate a lot of intermediate pages.\r\n\r\nDo you think it's reasonable with a pattern like `https:\/\/webpack.js.org\/r\/webpack\/?option=output\/chunkLoadTimeout`? It's not the best option to me -- a server side redirect would be much better in my opinion, but it's the best trade-off we can have as far as I know.\r\n\r\nAnother option is to host the site on maybe vercel alike service which does support [server side redirects](https:\/\/vercel.com\/docs\/configuration#project\/redirects).","@chenxsan I agree server side redirects are better, but maybe we can emulate right now redirects using `<meta http-equiv=\"refresh\" content=\"0; url=http:\/\/example.com\/\" \/>` and then discuss  about migrate on vercel\/etc","> @chenxsan I agree server side redirects are better, but maybe we can emulate right now redirects using `<meta http-equiv=\"refresh\" content=\"0; url=http:\/\/example.com\/\" \/>` and then discuss about migrate on vercel\/etc\r\n\r\nThat would require us to generate a lot of intermediate pages as far as I know.\r\n\r\nE.g., with a url like `https:\/\/webpack.js.org\/webpack-options\/output\/chunk-load-timeout`, we need to generate a html file under `dist\/webpack-options\/output\/chunk-load-timeout\/index.html` with content like:\r\n\r\n```html\r\n<meta http-equiv=\"refresh\" content=\"0; url=https:\/\/webpack.js.org\/configuration\/output\/#outputchunkloadtimeout\" \/>\r\n```\r\n\r\nHere's an example we already have https:\/\/github.com\/webpack\/webpack.js.org\/blob\/gh-pages\/loaders\/file-loader\/index.html which is created by RedirectWebpackPlugin. But I want to remind you that it won't work against urls with a hash like `#amd`, see https:\/\/github.com\/webpack\/webpack.js.org\/pull\/5146#discussion_r663510210.\r\n\r\nThe client side redirect might be the only feasible one besides the server side redirect at the moment.","@chenxsan Then let's do this for now and improve this in future","<!-- identifier: ci-result -->\n\n@snitin315 The most important CI builds failed. This way your PR can't be merged.\n\nPlease take a look at the CI results from azure ([1 errors \/ 0 warnings](https:\/\/dev.azure.com\/webpack\/60b36df0-23d2-44f7-82d7-6d18e498d900\/_build\/results?buildId=14409)) and [appveyor](https:\/\/ci.appveyor.com\/project\/sokra\/webpack\/builds\/40380202) (success) and fix these issues."],"labels":["PR: unreviewed","PR: conflict"]},{"title":"Deduplicate chunks using resolved virtual filepath when using PnP (Yarn Berry)","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nYarn Berry introduces the concept of \"virtuals\" whereby multiple instances of a package may be created and referred to by virtual filenames. This is to ensure isolation of modules when the same package is served multiple sets of peer dependencies, based on how it's imported.\r\n\r\nRather than include the source code for each instance (as it's based on the module filename), I'd like the ability to only include the source code once for all instances of the same package.\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nSwitching to Yarn Berry with PnP has increased the bundle size of my application. It's not always so easy to remove virtuals, especially when dealing with a lot of dependencies.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\n```\r\nconst pnp = require('pnpapi')\r\npnp.resolveVirtual(require.resolve('some-dependency')) \/\/ will give the real path\r\n```\r\n\r\nWe can resolve the virtual and use the real path when indexing the module. We'd still need to ensure each module is \"isolated\", so we might need an additional layer of indirection (wrap the source code in a closure for example -- the module cache cannot be shared).\r\n\r\n**Are you willing to work on this yourself?**\r\nyes -- I've tried to see how this might be implemented and was originally thinking of some new type of ProxyModule, but I'm not sure how it fits into the current architecture of webpack. If there's a suggestion for how this might be implemented, I'd be more than happy to put in the time.\r\n\r\nAlthough my main concern is bundle size, there's also an issue in terms of build performance, since the same code is processed multiple times by various loaders. I think that can _probably_ be handled separately though.\r\n","comments":[],"labels":["question","webpack-5"]},{"title":"add `\"...\": DELETE` syntax to delete properties during merge","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nblocked by ajv supporting `\"type\": \"symbol\"`\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nfeature\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nyes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nIn all merged objects the special key `\"...\"` can be used to override all existing keys. `webpack.utils.DELETE` can be used as value for this key or all others to remove a property.\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","Maybe syntax:\r\n```js\r\nval: webpack.util.only({\r\n    val1: \"val\"\r\n})\r\n```\r\nis more elegant? this is also could work with arrays\r\n```js\r\nval: webpack.util.only([]) \/\/ instead of searching for \"...\"\r\n```\r\n\r\nas well as right\/left (user first\/defaults first) merge could be introduced\r\n```js\r\nval: webpack.util.overide({} \/* [] *\/) \/\/ overides defaults\r\n```\r\n\r\n```js\r\nval: webpack.util.merge({} \/* [] *\/) \/\/ defaults first\r\n```\r\n\r\nto implement this we can also use Symbols or `__proto__` staff","@alexander-akait other ideas?","Make sense...","Hello"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"Byte order marks included in output file","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nWhen running on Windows and when the webpack mode=development byte order marks from the source files are copied to the output file. This results in broken Javascript.\r\n\r\nThis was reported a few years ago here https:\/\/github.com\/webpack\/webpack\/issues\/2868 and was never resolved.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n1. On a Windows 10 machine with node.js installed.\r\n2. Clone this repo https:\/\/github.com\/Bikeman868\/frag\/tree\/Webpack_issue_2021_06_26\r\n3. From a command prompt in the root directory of the repo type `npm install`\r\n4. In the command prompt window type `npx webpack`\r\n5. Look at the generated `dist\/frag.js` file and see that it contains weird characters at the start of each module.\r\n\r\nThis is a very simple solution with the following Webpack config:\r\n```javascript\r\nconst path = require('path');\r\n\r\nmodule.exports = {\r\n  mode: 'development',\r\n  entry: '.\/src\/index.js',\r\n  output: {\r\n    filename: 'frag.js',\r\n    path: path.resolve(__dirname, 'dist')\r\n  },\r\n  devtool: 'source-map',\r\n  watchOptions: {\r\n    ignored: '**\/node_modules'\r\n  }\r\n};\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nByte-order-marks in Windows files are there to indicate whether the file is little-endian or big-endian. These are written into files automatically by most Windows software, and ignored when the file is opened in any application.\r\n\r\nWebpack is copying the byte-order-mark bytes from source files into the output file resulting in broken Javascript.\r\nIt seems to do this only when the webpack mode is 'development'. I have not seen this when the mode is 'production'.\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.38.1\r\nNode.js version: 15.14.0\r\nOperating System: Windows 10\r\nAdditional tools: Windows Terminal + WSL + Ubuntu\r\n","comments":["Expected, ~~we don't remove `Byte order marks` in development mode, because we try to make optimizations in production, also in some cases developers may want to keep it (but by default terser remove it)~~. I recommend setup linter and enable this rule https:\/\/eslint.org\/docs\/rules\/unicode-bom, better to check on problems on lint step, feel free to feedback","Sorry, but this is really dumb. Why would developers want BOM in the middle\nof their output when it makes the Javascript unparsable and therefore\nunusable.\nBOM only makes sense as the first few bytes of a file as stored on disk. It\nnever makes sense to include BOM in the middle of a file.\nThis is utter nonsense. If you just don't want to fix it, then just say\nthat you don't want to fix it. Making up some bogus excuse just makes you\nlook stupid.\n\n\nOn Mon, Jun 28, 2021 at 3:49 AM Alexander Akait ***@***.***>\nwrote:\n\n> Closed #13642 <https:\/\/github.com\/webpack\/webpack\/issues\/13642>.\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/webpack\/webpack\/issues\/13642#event-4946654278>, or\n> unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/ABLKRG2F6YJ54MQ7V4URBYLTVBHTDANCNFSM47LYDKSA>\n> .\n>\n","Why do not setup linter and avoid BOM in files? It was middle due bundling, but I think it makes sense to remove it, feel free to send a fix","Setting up the linter does not fix the problem, it just tells you that the problem exists. This is an improvement, but actually it's quite easy to see already, the browser refuses to parse the JavaScript and stops at line 1 character 1. I recognized it right away as BOM.\r\n\r\nTo anyone reading this that wants to know how to fix the problem, you need to open each source file in VS Code, then on the bottom toolbar there is a button that will say \"UTF-8 with BOM\". Click this button and choose \"Save with encoding\" then choose \"UTF-8\".","I agree that BOM should be removed in development.\r\n","PR welcome","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Hi, I have been experiencing this issue even in production mode ever since I upgraded my app to webpack 5. Can this be taken up and fixed? Or are there any known workarounds for this?","The workaround is to remove the byte order marks from your source files.\n\nOn Tue, Nov 2, 2021 at 10:19 AM Divyansh Choudhary ***@***.***>\nwrote:\n\n> Hi, I have been experiencing this issue even in production mode ever since\n> I upgraded my app to webpack 5. Can this be taken up and fixed? Or are\n> there any known workarounds for this?\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/webpack\/webpack\/issues\/13642#issuecomment-957963584>,\n> or unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/ABLKRG4CUSESA4UFAGHCCIDUKAMTXANCNFSM47LYDKSA>\n> .\n> Triage notifications on the go with GitHub Mobile for iOS\n> <https:\/\/apps.apple.com\/app\/apple-store\/id1477376905?ct=notification-email&mt=8&pt=524675>\n> or Android\n> <https:\/\/play.google.com\/store\/apps\/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.\n>\n>\n","We handle it:\r\n- https:\/\/github.com\/webpack\/loader-runner\/blob\/master\/lib\/LoaderRunner.js#L11\r\n- https:\/\/github.com\/webpack\/webpack\/blob\/main\/lib\/json\/JsonParser.js#L43","Can someone help with [this](https:\/\/stackoverflow.com\/questions\/69916675\/is-there-a-way-to-parse-the-output-of-webpack-without-adding-the-byte-order-mark) ?","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","what is the proper fix for this?\r\n\r\nis this error\r\n\r\nSyntaxError: Invalid character '\\u20ac'\r\n\r\nrelated to BOM ?","Ideally - setup linter to catch such problems, it is more about linting, but we still need to fix it"],"labels":["bug","inactive","webpack-5"]},{"title":"perf problems with `require.context`","body":"@sokra this issue is very much alive in webpack5 and also affects dynamic `require()` and `import()` calls. I created another repro, although probably @ericpitcher's is just as good: https:\/\/github.com\/tmeasday-shopify\/webpack-require-context-repro\r\n\r\nWe are very interested about this for Storybook in large code bases because we rely on `require.context()` or some other globbing mechanism to import story files.\r\n\r\nWould you like me to open a new ticket or can this ticket be reopened?\r\n\r\n_Originally posted by @tmeasday in https:\/\/github.com\/webpack\/webpack\/issues\/6093#issuecomment-868293507_","comments":["@tmeasday yep, I think we have critical perf bug here","Thanks @alexander-akait. Happy to help with a solution once the path forward is known. Naively it feels like perhaps there are opportunities to avoid scanning the `require.context()` when the event that triggers the update is a single file modification (and so is already known to match or not match the context).","@alexander-akait, with the help of @tmeasday, I found a workaround.\r\n\r\nSee https:\/\/github.com\/storybookjs\/storybook\/issues\/14894#issuecomment-941906840","@vidal7 Can you provide example?","@alexander-akait, sure instead of doing\r\n\r\n```js\r\nmodule.exports = {\r\n    stories: [\r\n        '.\/src\/**\/*.stories.ts',\r\n    ]\r\n};\r\n```\r\n\r\nI am doing something like this. I oversimplified my code just for this example.\r\n\r\n```js\r\nconst { sync } = require('glob');\r\n\r\nmodule.exports = {\r\n    stories: sync('.\/src\/**\/*.stories.ts')\r\n};\r\n```","I believe there's a developer experience caveat \u2013 [In my tests](https:\/\/github.com\/storybookjs\/storybook\/issues\/14894#issuecomment-942687411), the technique described above has an undesirable side effect: the glob function generates an array of files at start time, and after that, it won't dynamically index newly added\/renamed files.\r\n\r\nThis means developers need to restart Storybook whenever they add a new `<filename>.stories.ts` file, as the newly glob-generated array will then contain this new file.\r\n\r\nIdeally, we'd have something fast, with the same \"dynamic globbing\" as before.","@kaelig, yes you are right. I have this caveat too. I didn't realized that by doing this, storybook on webpack rebuild does not scan new stories files. I don't have a better solution for now. Guess this issue will have to be resolved if you want new stories files to be indexed. I am sorry.","In theory you can create `entry.js` file and apply loader, inside loader run `glob` and create imports like:\r\n```\r\nimport oneStory from \".\/one-story\/index.js\";\r\nimport twoStory from \".\/two-story\/index.js\";\r\n```\r\n\r\ninside loader, use `glob-parent` (i.e. extract `src` directory) and use `this.addContextDependency` https:\/\/webpack.js.org\/api\/loaders\/#thisaddcontextdependency, it can be some \r\nslow on initial run, but will be fast for incremental builds, also it will tract all changes inside `src` directory, i.e. we just generate entry file based on glob.\r\n\r\nBut why do not use https:\/\/webpack.js.org\/configuration\/experiments\/#experimentslazycompilation with `import()`? All stories can be loaded using `import()`. If you need to add new story just add new lines to your source file with stories. This is actually very close to how it works in browser, even more it can work in browser without bundlers (in theory). WE don't have glob\/require.context in browser and we should migrate from these hacky workarounds.\r\n","@alexander-akait - are you suggesting that they write a big file full of `import()` functions?\r\n\r\nThat is definitely possible, but for a development-time tool like Storybook which prioritizes DX over \"correctness\" in this way, we'd like to figure out a way to make it possible for users to provide a glob but still have good performance.\r\n\r\nOne idea I've been looking at is to have storybook generate that file of imports, in a similar way to your first suggestion, see this thread: https:\/\/webpack.slack.com\/archives\/C1LUX2DS9\/p1633338458009500?thread_ts=1633265679.007900&cid=C1LUX2DS9\r\n\r\n---\r\n\r\nAll this aside, I'm still not sure what webpack is doing that leads to the poor performance in the first place. When I use watchpack alone and make a change to a single file in a big directory full of stuff, it is fast. My guess is that webpack is re-scanning the glob every time watchpack detects a (set of?) change(s). I'm not sure why it would need to do that, but if there is a good reason I am very interested to know why.\r\n\r\nTheoretically there is no reason to re-scan the glob after the initial scan and a stream of changes, especially if those changes are small.","Yes, problems in that we need scan whole directory (include nested) for each build, otherwise we can't catch new\/deleted files...","> Yes, problems in that we need scan whole directory (include nested) for each build, otherwise we can't catch new\/deleted files...\r\n\r\nThis problem was already solved several years ago in the Jest, and [jest-haste-map](https:\/\/github.com\/facebook\/jest\/tree\/main\/packages\/jest-haste-map) was made especially for this. It would be great to use it for such cases, but the problem is that it is not well documented.","Yes, hope somebody found time to help us here"],"labels":["webpack-5","critical-bug"]},{"title":"Allow adding additional watch paths","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nCurrently, there is no way to tell Webpack to watch additional paths for changes when using `watch`.  It would be nice if this was possible.\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\nIn one of my projects I use `BannerPlugin` to add some text to the top of my Webpack bundle. This text is stored in a separate file; in my `webpack.config.js` I use\r\n```javascript\r\nplugins: [\r\n\tnew webpack.BannerPlugin({\r\n\t\tbanner: fs.readFileSync('.\/my_text_file').toString(),\r\n\t\t...\r\n```\r\nto pass the banner text into `BannerPlugin`. But Webpack doesn't watch that file, so changes to it don't trigger a rebuild.\r\n\r\n**How should this be implemented in your opinion?**\r\nWith a new `watchOptions.additional` option, with usage equivalent to `watchOptions.ignored`.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes, but not sure where to look\r\n","comments":["What about if `my_text_file` have other `import`\/`require` or something else?","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Still make sense","maybe move buildDependencies to root (`options.buildDependencies`) instead of `options.cache.buildDependencies` in webpack@6","bump","Is there any way right now to watch the entire src directory or an entire subdirectory of src so that any new source dropped there is automatically webpacked into the output tree?  [This plugin](https:\/\/www.npmjs.com\/package\/webpack-watch-files-plugin) looks promising, but it would be better not to need a plugin.\r\n\r\n"],"labels":["enhancement","webpack-5"]},{"title":"webpack serve compiling twice with a specific dependency package.json","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWebpack is compiling the project twice, when running in serve mode, if the project imports a library with the following `package.json` `main` config:\r\n```\r\n\"main\": \".\/lib\/\",\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. Open https:\/\/stackblitz.com\/edit\/webpack-double-compilation\r\n2. Run `npm start`\r\n3. Notice that compilation is run twice on start:\r\n```\r\nwebpack 5.38.1 compiled successfully in 649 ms\r\n...\r\nwebpack 5.38.1 compiled successfully in 54 ms\r\n```\r\n\r\nThis will fix the problem:\r\n1. Open `webpack.config.js`\r\n2. Add the commented `sdp-transform` alias\r\n3. Run `npm start` again\r\n4. Notice that compilation is run once only:\r\n```\r\nwebpack 5.38.1 compiled successfully in 588 ms \r\n```\r\n\r\nYou can also test this locally following this steps:\r\n1. Install `sdp-transform` as a dependency\r\n2. Import `sdp-transform` in an entry point\r\n3. Run `webpack serve`\r\n4. Notice that the compilation is now run twice\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nCompilation should only run once.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version: 5.38.1 and 5.37.1\r\nNode.js version: v14.16.0 and v14.17.0\r\nOperating System: stackblitz OS (?) and Windows 10\r\nAdditional tools: none\r\n","comments":["Something wrong with `filesystem` in stackblitz.com, please report them about the problem, containers often have these problem, it requires better setup","Sorry we can't fix it in webpack or webpack-dev-server, anyway feel free to feedback","@alexander-akait This is not related with stackblitz, me and my team are able to reproduce this locally using both MacOS and Windows 10, please follow local steps and you should be able to repro.","@nevcos I try to run in on linux and windows and no problems, should I use only these steps?","@alexander-akait After import you'll need to use the import otherwise the import will be ignored, something like:\r\n```\r\nimport sdpTransform from 'sdp-transform';\r\nsdpTransform.test;\r\n```\r\nThat should be enough.","Do you use docker\/containers locally? I really can't reproduce it using your setup","@alexander-akait Not using docker or containers.","Do you use WSL? ","@alexander-akait Not using WSL, just plain Windows 10 with nodejs v14.17.0 and npm 6.14.13.\r\nI can test it using WSL, just to confirm if it reproduces.","Maybe you can debug `fs` calls?","@alexander-akait I'm also able to reproduce using Ubuntu 20.04.2 LTS (Windows 10 WSL), with same nodejs v14.17.0 and npm 6.14.13 versions.\r\nSorry, how can I debug `fs` calls?\r\n\r\nWith `stats: { all: true }` shows:\r\n```\r\n2021-06-07 18:03:28: webpack 5.38.1 compiled successfully in 431 ms (b6dca03cebb99acbc879)\r\n\u2139 \uff62wdm\uff63: Compiled successfully.\r\n3% setup watch run WebpackDevMiddleware\u2139 \uff62wdm\uff63: Compiling...\r\n```","I am on `Ubuntu 20.04.2 LTS` too and no problems, what is your steps?","@alexander-akait Followed the above stackblitz setup \/ steps:\r\n\r\n1. Created package.json:\r\n```\r\n{\r\n  \"name\": \"webpack-double-compilation\",\r\n  \"version\": \"0.0.0\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"start\": \"webpack serve --progress\"\r\n  },\r\n  \"dependencies\": {\r\n    \"sdp-transform\": \"2.14.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"webpack\": \"^5.37.1\",\r\n    \"webpack-cli\": \"^4.7.0\",\r\n    \"webpack-dev-server\": \"^3.11.2\"\r\n  }\r\n}\r\n```\r\n\r\n2. Created `webpack.config.js`:\r\n```\r\nmodule.exports = {\r\n  mode: 'development',\r\n  entry: {\r\n    test: '.\/src\/index.js'\r\n  },\r\n  resolve: {\r\n    alias: {\r\n      \/\/ 'sdp-transform': '..\/node_modules\/sdp-transform\/lib\/index.js'\r\n    }\r\n  },\r\n  stats: {\r\n    all: true\r\n  }\r\n};\r\n```\r\n\r\n3. Created `src\/index.js`:\r\n```\r\nimport sdpTransform from 'sdp-transform';\r\nsdpTransform.test;\r\n```\r\n\r\n4. Run `npm install`\r\n5. Run `npm start`","Found problem - `main` should be `file`, not directory:\r\n```\r\nmain\r\nThe main field is a module ID that is the primary entry point to your program. That is, if your package is named foo, and a user installs it, and then does require(\"foo\"), then your main module's exports object will be returned.\r\n\r\nThis should be a module relative to the root of your package folder.\r\n\r\nFor most modules, it makes the most sense to have a main script and often not much else.\r\n\r\nIf main is not set it defaults to index.js in the packages root folder.\r\n```\r\nhttps:\/\/docs.npmjs.com\/cli\/v7\/configuring-npm\/package-json#main\r\n\r\nI think better to create an issue in repo, even more it will be broken in ECMA modules (becaue you need to specify path to file with extension).","@alexander-akait Given this is a configuration accepted by NPM, can't webpack handle this transparently as well?\r\nThanks!","@nevcos it is interesting case, it works due some magic in Common JS, when you have `\"main\": \".\/lib\/\"`, Node.js try to use `require('.\/lib\/')`, because Common JS in Node.js load `index.js` when you try to import directory it becomes `require(''.\/lib\/index.js)` and works fine. But yes we should fix it","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","hm.. maybe related to https:\/\/github.com\/webpack\/webpack\/issues\/15206","Problem in resolver, due `\"main\": \".\/lib\/\"`, in this case we do invalid watching ","hm.. but how this triggers second rebuild?","I think resolver try to watch something wrong, I do not look it deeply, but if you change `\"main\": \".\/lib\/index.js\"` (i.e. `index.js`) all works fine, anyway using `\"main\": \".\/lib\/\"` is working in commonjs Node.js, because by default we try to load `index.js` in directly, it is very intresting, because no RFC or something else about it, it s just side effect built-in Node.js commonjs loader","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Rare problem, but I think we still need fix it","I think I am experiencing the same issue with storybook webpack5 doing a build twice"],"labels":["bug","inactive","webpack-5"]},{"title":"swc as a javascript parser","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nFollow up of https:\/\/github.com\/webpack\/webpack\/discussions\/13408#discussioncomment-760254\r\n\r\nI'm author of the [swc][] project and I'm looking for way to improve the performance of webpack.\r\n\r\nParsing something in javascript is a very expensive task, so I think using the parser of swc with libuv worker thread will improve performance a lot. (Also, it does not block js thread, so other codes can run while parsing.)\r\n\r\n\r\n\r\nBut currently, webpack does not allow overriding dependency analysis and it seems like I have to reimplement the whole `JavascriptPlugin`. If there's an easier way to improve performance, it would be great.\r\n\r\nI'll create a standalone parser package if required.\r\n\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nReturning dependency graph from a loader.\r\n\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nHuge performance improvements.\r\n\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nBy returning graph object or list from a loader.\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nYes.\r\n\r\n\r\n[swc]: http:\/\/swc.rs\/","comments":["@kdy1 Let's start, does `swc` is using `estree` compatibility tree? \r\n\r\nBecause I think we can add hook(s) on parser stage so you can change `acorn` parser on `swc`. Or you can provide more information? Do you want avoid double parsing right?\r\n\r\n","Parsing in javascript is slow, and blocks the js thread for a while, so I want to see if it's possible to offload parsing to nodejs thread pool using swc. I think double parsing with swc is not a big problem, as it the not block js thread.\r\n\r\nBut I'm not sure if it's `estree` compatible. It can emit the ast of babel, but I'm not sure if the babel ast is `estree`.\r\n\r\n> add hook(s) on parser stage so you can change acorn parser on swc.\r\n\r\nIf this is possible, it would make the job much easier\r\nI was actually considering other things like forking `JavascriptPlugin`","> But I'm not sure if it's estree compatible. It can emit the ast of babel, but I'm not sure if the babel ast is estree.\r\n\r\nShould be yes (due https:\/\/github.com\/estree\/estree#estree-steering-committee, but need check), but here other problem webpack understand only stage 4, so if you return new\/unknown AST node the result will be unpredictable.\r\n\r\n> Parsing in javascript is slow, and blocks the js thread for a while, so I want to see if it's possible to offload parsing to nodejs thread pool using swc. I think double parsing with swc is not a big problem, as it the not block js thread.\r\n\r\nCan you describe it deeply? Do you want handle js parsring\/code generation in multi threading? Maybe you can provide place where you need inject cwd?","> here other problem webpack understand only stage 4, so if you return new\/unknown AST node the result will be unpredictable.\r\n\r\nswc supports stage 3+ and swc has compatibility transforms so it would not be a problem.\r\n\r\n\r\n> Can you describe it deeply? Do you want handle js parsring\/code generation in multi threading? Maybe you can provide place where you need inject cwd?\r\n\r\nWhat I want to do is reducing time used by the parser.\r\nUsing other threads is a kind of way to achieve it. \r\n\r\nAnd by\r\n\r\n> I think double parsing with swc is not a big problem, as it the not block js thread.\r\n\r\nI mean parsing twice would not affect performance greatly.\r\nParsing twice, once from the loader and once from the alternative `JavascriptPlugin` would result in acceptable performance.\r\n\r\n","> What I want to do is reducing time used by the parser.\r\n> I mean parsing twice would not affect performance greatly.\r\n\r\nBut why do not use loader in this case? I'm a little confused, maybe you can show it using pseudo code on `JavascriptPlugin`?","Oh, you are right.\r\nLoader is not required at all in this case.\r\n\r\n","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","@kdy1 still valid?","@alexander-akait Of course, I'd be happy to make it faster.","For at least initial\/demonstration purposes, I think tacking on to swc-loader makes sense here (otherwise, we would have to make a bunch of changes to asyncify the parser parsing - not impossible, but isnt necessarily blocking).\r\n\r\nAssuming ast's are compatible (which small test indicates they arent, but they may be close)\r\n\r\nThe simplest way to get this working using swc-loader, IMO:\r\n1. Modify (either always, or by opt-in) the return type of `@swc\/core` `transform[Sync]` to include an `ast` property (essentially just the output of `swc.parse`)\r\n2. Return the parsed AST property as the fourth argument in swc-loader callback `{ webpackAST: JSON.parse(output.ast)) }`\r\nhttps:\/\/github.com\/swc-project\/swc-loader\/blob\/da457e55ac9bc8365e434de95d62324a3bf41cd2\/src\/index.js#L92\r\n3. Setting this \"known\" property will allow webpack to skip its built-in acorn parsing, so we are off to the races!\r\n\r\nThe main incompatible property set that stands out right now, though, is start\/end\/loc\/range properties. I dont see an option to get the exact `loc` info from swc, and the start\/end properties are encapsulated in a seperate `span` object\r\n![image](https:\/\/user-images.githubusercontent.com\/16494982\/149601210-007cae82-69f1-4fa6-a65e-66b452a097b8.png)\r\n\r\nAdditionally, webpack expects comment blocks to be parsed and available in the AST, which seems to also be missing from swc\r\n @kdy1 lemme know if you need assistance from me, as I am also interested in seeing this happen\r\n\r\nedit:i also have done some reading on the issues related to sending back ASTs and see the perf hits, so thats definitely also something to be considered, because the whole JavascriptParser class probabably cant be moved to native due to all the hooks usage","Yeah actually I made rust module that can generate acorn AST from source code. I'll check how it performs using swc-loader first. Of course, it has start\/end\/loc\/comments\/etc..\r\nWe need benchmark, but definitely worth trying.\r\n","@kdy1 as @markjm mentioned AST has to have comments embedded in it. Does you parser include comments too?","@mohsen1 The swc codebase has rust code to create babel\/acorn ast and of course those have comments stored in the struct.\r\nAdditionally, acorn version is designed to work with webpack (because next.js uses webpack)\r\n\r\n\r\nI'll add a way to get webpack ast from node js. Filed https:\/\/github.com\/swc-project\/swc\/issues\/3437","I have one question. Should I add the API to `@swc\/core`?\r\nI'm worried about the size.\r\n\r\n`@swc\/core` is quite big because it has lots of code and even a wasm runtime.\r\n","@kdy1 `@swc\/core` is great place, it already has `parseSync`, so why not :).\r\n\r\nAbout comments, does it supported or not? I\u2019m confused a bit \ud83e\udd14 (https:\/\/github.com\/swc-project\/swc\/issues\/2964#issuecomment-1030633307)","@coderaiser You can don't worry, because if decide to do it (and most likely it will), it will be experiment, so you can report about any problems in swc","It's supported and rust type definitions for acorn\/babel AST store comments inline. \r\nBut I'm not sure about the binary size and I think I should be careful about adding an API.","@alexander-akait I also waiting for ability to use rust-based solution to produce `estree` or `Babel` AST.\r\n\r\nI\u2019m working on linter \ud83d\udc0a[`Putout`](https:\/\/github.com\/coderaiser\/putout)  that can fix everything it can find and on tool that converts [swc AST to Babel](https:\/\/github.com\/coderaiser\/swc-to-babel) and `SWC` AST has no comments support, I\u2019m also working on tool that converts [`ESTree` to `Babel`](https:\/\/github.com\/coderaiser\/estree-to-babel) which does it\u2019s job perfectly.\r\n\r\nSo, thank you, but I cannot not worry  :), since it\u2019s related to software I\u2019m working on.\r\n\r\n@kdy1  Here is one of the ways how API can look like:\r\n\r\n```js\r\nconst {parseSync} = require('@swc\/core');\r\nconst ast = parseSync(`const hello = 'world'`, {\r\n    type: \u2018estree | babel | swc (default)\u2019\r\n});\r\n```\r\n\r\nNo need to use any experimental flags, such API is obvious and straight forward, and of course any bug will be reported to swc repo :).\r\n\r\nWorry not about bundle size, if it will be less then one that TypeScript has it will be already amazing \ud83d\ude0f. But practical usage is more useful then very long term planning.\r\n","@coderaiser Yep, it is not hard task, we need add new options to allow setup parser in webpack (and mark it as experimental so we can do breaking changes between versions) and add cross tests to check all our tests (I think we can catch some problems on early stage).\r\n\r\nFor for your interest we are working on rust based linter solution https:\/\/github.com\/swc-project\/swc\/tree\/main\/crates\/swc_ecma_lints, so if you want to be more faster and safely you can help :star: ","> For for your interest we are working on rust based linter solution https:\/\/github.com\/swc-project\/swc\/tree\/main\/crates\/swc_ecma_lints, so if you want to be more faster and safely you can help \u2b50.\r\n\r\nI am interested. I\u2019m not as good in rust as in JavaScript \ud83d\ude05, but I have two questions:\r\n\r\n### \ud83e\udd37 Why so much code for such simple task, as warning about [`DebuggerStatement`](https:\/\/github.com\/swc-project\/swc\/blob\/v1.2.138\/crates\/swc_ecma_lints\/src\/rules\/no_debugger.rs)? \r\n\r\n\u261d\ufe0f49 Lines! Compare it to 7 lines of [`remove-debugger`](https:\/\/github.com\/coderaiser\/putout\/blob\/v24.6.0\/packages\/plugin-remove-debugger\/lib\/remove-debugger.js):\r\n\r\n```js\r\n'use strict';\r\n\r\n\r\nmodule.exports.report = () => 'Unexpected \"debugger\" statement';\r\n\r\n\r\nmodule.exports.replace = () => ({\r\n    debugger: '',\r\n});\r\n```\r\n\r\nIt reminded me the [case with `hasOwn`](https:\/\/twitter.com\/coderaiser_\/status\/1472521802802991106?s=21), when \ud83d\udc0a`Putout` implementation had **6 lines** vs **112** of `ESLint` \ud83d\ude0f. So don\u2019t tell me that this is because of `Rust` syntax \ud83d\ude38.\r\n\r\n### \ud83e\udd37 Where is the `fix`?\r\n\r\nLook, I don\u2019t think that program should tell me what to do, what it really should do: is does things \ud83e\udd16! So ability to fix is mandatory for linter, that\u2019s why \ud83d\udc0a[`Putout`](https:\/\/github.com\/coderaiser\/putout) exists.\r\n\r\n### \ud83c\udf88Anyways\u2026\r\n\r\n\u2026Anyways, I have something to suggest you: \ud83d\udc0a[`PutoutScript`](https:\/\/github.com\/coderaiser\/putout\/tree\/v24.6.0\/packages\/compare): `JavaScript` with superpowers: **identifiers with additional meaning** \ud83c\udf89. \r\n\r\nThere is already similar concepts like [one that ruleguard](https:\/\/github.com\/quasilyte\/go-ruleguard) uses and [a lot more](https:\/\/github.com\/quasilyte\/go-ruleguard\/issues\/36).","Just a little question about swc: If I use swc-loader as a babel-loader replacement, what are the trade-offs excluding the compilation speed?"],"labels":["enhancement","webpack-5"]},{"title":"Improve Persistent Caching for multiple configurations","body":"## Feature request\r\n\r\nFirst, I don't know if all this even makes sense, just wanted to expose my use-case and get some feedback.\r\n\r\nI work on the [Docusaurus](https:\/\/github.com\/facebook\/docusaurus) framework, we are [migrating to Webpack 5](https:\/\/github.com\/facebook\/docusaurus\/pull\/4089) and are happy to leverage the benefits of the new persistent cache.\r\n\r\nThis is not a critical feature I absolutely need, I am just wondering if, in addition to the great benefits of this new caching, there's still room for even better improvements.\r\n\r\nI thought about asking this to @alexander-akait in our PR (as he proposed to help), but I thought it would be better to discuss this in a dedicated issue.\r\n\r\n**What is the expected behavior?**\r\n\r\nImprove incremental build performance when you build multiple Webpack configurations in a row, all of them being quite similar and using some shared code.\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nThe Docusaurus build system is using a client (browser) config and a server (SSR) config.\r\n\r\nWhen using the i18n feature, we loop over a list of locales and create one distinct SPA per locale (we'll likely explore module federation later).\r\n\r\nThe process looks a bit like that:\r\n\r\n```jsx\r\nfunction compile(configs: Configuration[]): Promise<void> {\r\n  return new Promise((resolve, reject) => {\r\n    const compiler = webpack(configs);\r\n    compiler.run((err, stats) => {\r\n      \/\/\r\n      compiler.close(errClose => {\r\n        \/\/ ...\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nconst locales = [\"en\", \"fr\", \"de\"];\r\n\r\n\/\/ sequential (on purpose)\r\nfor (locale of locales) {\r\n  await compile([\r\n    getConfig({ server: true, locale }),\r\n    getConfig({ server: false, locale })\r\n  ]);\r\n}\r\n```\r\n\r\nThe build time perfs I see for a single locale is already great:\r\n\r\n- cold cache: 100s\r\n- warm cache: 25s\r\n\r\nBut if I build multiple locales with a cold cache, I end up with 100s \\* number of locale, so 300s for 3 locales for example. I am wondering if Webpack could not be able to build \"en\" and then reuse some part of the cache to speed up the build of \"fr\" and \"de\"?\r\n\r\nWe have multiple i18n deployment strategies (subdomain `fr.domain.io` vs subpath `domain.io\/fr`)\r\nBy default, each locale has a different `output.path` (like `dist\/fr` and `output.publicPath` (like `\/fr\/`), but it's also possible to build the site for the subdomain strategy.\r\n\r\nMy impression is that the current caching system will bail-out of using the cache if any config has changed between 2 runs (config is provided through CLI args, I'm not editing `buildDependencies` `__filename`)\r\n\r\nThat's why by default I need to use a distinct cache name per locale to be able to make the incremental build work:\r\n\r\n```js\r\ncache: {\r\n   type: 'filesystem',\r\n   name: `${isServer ? \"server\" : \"client\"}-${mode}-${locale}`,\r\n}\r\n```\r\n\r\nI've tried to use the non-default i18n deployment strategy (which use a subdomain deployment, for which `path: 'dist'` and `publicPath: '\/'` for all locales), and use a shared cache for all locales: `name:`${isServer ? \"server\" : \"client\"}-${mode}`.\r\n\r\nSome tests I've done:\r\n\r\n```\r\nclear cache\r\nbuild --locale en => 100s\r\nbuild --locale fr => 50s\r\n```\r\n\r\nThe second build is significantly faster because the cache created for \"en\" has been successfully leveraged for \"fr\". But \"en\" and \"fr\" are not strictly equivalent code (as it diverse on translated texts and mdx docs), so quite expectedly, building \"fr\" after \"en\" is not as fast as building twice for the same locale:\r\n\r\n```\r\nclear cache\r\nbuild --locale en => 100s\r\nbuild --locale en => 25s\r\n```\r\n\r\nNow let's try something else:\r\n\r\n```\r\nclear cache\r\nbuild --locale en => 100s\r\nbuild --locale fr => 50s\r\nbuild --locale en => 50s\r\n```\r\n\r\nWhat we can see is that the last build is not as fast as if we built twice in \"en\" in a row. This lets me think that the persistent cache only preserves the cache entries of the very last build.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nMake it possible to keep entries of older builds in the cache? I'd like to have these perfs:\r\n\r\n```\r\nclear cache\r\nbuild --locale en => 100s\r\nbuild --locale fr => 50s\r\nbuild --locale en => 25s (-25s reduction!)\r\n```\r\n\r\nMake it possible to share a cache across multiple builds using different but slightly similar config (ie for different locales, only `output.path`, `output.publicPath` and some `i18n.json` and `myDoc.mdx` are different, but much of code remains shared between all locales)\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nI don't feel skilled enough to work on this.\r\n\r\n---\r\n\r\nNote: I've seen the [build-performance\/#multiple-compilations](https:\/\/webpack.js.org\/guides\/build-performance\/#multiple-compilations) info, but thought this may be stale doc? Should we still use `cache-loader` for such usecase? Do we need `parallel-webpack` when webpack can compile multiple configs at once? (also last release was 1 year ago)\r\n\r\nNote: our server\/client config are quite different, the goal for our usecase is more to share the cache on the \"locales axis\" rather than the \"client\/server axis\".\r\n","comments":["Each name `name: `${isServer ? \"server\" : \"client\"}-${mode}-${locale}` create own file for cache.\r\n\r\n> This lets me think that the persistent cache only preserves the cache entries of the very last build.\r\n\r\nYep.\r\n\r\nI think you want to say here about **shared cache here between different compilers**. \r\n\r\nIt makes sense. Maybe before we need solve https:\/\/github.com\/webpack\/webpack\/issues\/10400.\r\n\r\n\/cc @sokra ","In general the persistent cache can only when config is equal. So in general it's not possible to share the cache between different configs.\r\nIf you still want to do that, we need to carefully validate if your configs are compatible. What are the config differences between two locales.\r\nI recently added a system to allow invalidating modules based on external factors. So e. g. you can vary values of the DefinePlugin without invalidating the whole cache. You may need something similar for your locales.\r\nAnother thing you would need is parallel access to the build cache. Currently it's implemented as 1. read cache, 2. build, 3. store cache. When building all locales in parallel, you probably need a cache service where all builds read and write cache entries from\/to. Preferable within a worker_thread, so all builds can be in different worker_threads and access the cache via a common worker_thread.","Thanks.\r\n\r\nApart the output path and publicPath I don't thing there is any significant difference between the configs of 2 locales, but will have to double check. \r\n\r\nOh there's a mistake in my sample code: we build locale SPAs in series, not in parallel, so I guess it might reduce the complexity to make this work. \r\n\r\n","If that would be the only difference, all build would generate the same result. How does the locale influence the build?","Between 2 locales, the possible differens I think of are:\r\n\r\nWebpack config:\r\n- `output.path`\r\n- `output.publicPath`\r\n- `resolve.roots` (not yet implemented)\r\n\r\nWe have some codegeneration that will likely trigger different `import()` calls, and the locale is in the import path.\r\n\r\n```diff\r\nexport default {\r\n-  '0042d5e9': () => import(\/* webpackChunkName: '0042d5e9' *\/ \"@site\/i18n\/en\/myMarkdownDoc.mdx\"), \r\n+  '0042d5e9': () => import(\/* webpackChunkName: '0042d5e9' *\/ \"@site\/i18n\/fr\/myMarkdownDoc.mdx\"), \r\n } \r\n```\r\n\r\nThere are imports where the path is the same but the file content is different per locale\r\n\r\n```\r\nimport i18n from \"@generated\/i18n\"\r\n```\r\n\r\nSomething probably worth mentioning: we'll eventually implement (not 100% sure, not high priority) a Babel plugin to inline translation strings directly into the React JSX code at build time:\r\n\r\n```diff\r\n- <Translate>Hello World<\/Translate>\r\n+ <>Hello World<\/>\r\n+ <>Bonjour le monde<\/>\r\n```\r\n\r\n\r\n---\r\n\r\nFYI I tried to build 2 locales with a shared cache:\r\n\r\n```\r\nyarn build --locale en => 100s\r\nyarn build --locale fr => 50s\r\n```\r\n\r\nLooking at the `fr` build in the browser, it looks like it works fine at first glance.","> * `resolve.roots` (not yet implemented)\r\n\r\nThe resolver cache would ignore changes to the base resolving options. But it would work if you put your `resolve.roots` config into the `module.rules`. Resolve options specified here will become part of the cache key.\r\n\r\n> We have some codegeneration\r\n\r\nHow is this attached with webpack? As loader or babel plugin. Or is that a preprocessing step running before webpack?\r\n\r\n> Babel plugin\r\n\r\nThat's the tricky part. You probably want to assign the affected modules to a different cache key, so each locale has its own module cache. It might be difficult to figure out which modules are affected, since we need to know before processing the module (to load it from the right cache).\r\n\r\nMaybe you need to assign all application code to a different cache key, but I guess that would be fine since node_modules cache and non-code modules can be still cached.","The code generation happens before webpack kicks in. We generate code that is imported statically by webpack. Afaik we don't have any code generation in loaders.\r\n\r\nAbout the babel part, this is just something I'd like to explore but honestly I'd rather improve build times than provide this micro optimization to the app output. But I'm curious how I could assign a specific module to a different cache key, how can this be configured? ","> how I could assign a specific module to a different cache key, how can this be configured?\n\nIt's not possible right now, but won't be too difficult to add.\n\nYou would set `cacheName` in `module.rules`","That would be really great if we could do that :) \r\n\r\n- Being able to assign modules to different caches\r\n- Having a way to customize the cache entry expiration","Just seen the maxGenerations options, that might help improve the perfs for my usecase, will test that","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","I still think it would be a useful perf improvement, but nothing hurry on my side, just want to keep this issue open","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["question","webpack-5","cache"]},{"title":"Multiple UMD libraries sharing the same namespace change not to compete each other","body":"## Summary\r\nWhen building UMD module with multiple output sharing the same library namespace, those output modules cannot be loaded into browser at the same time\r\nbecause UMD loader does not care whether global object already assigned or not.\r\n\r\n## Example\r\n```js\r\n\/\/ webpack.config.js\r\nconst path = require(\"path\");\r\n\r\nmodule.exports = {\r\n  mode: \"development\",\r\n  entry: {\r\n    moduleA: \".\/src\/moduleA.js\",\r\n    moduleB: \".\/src\/moduleB.js\",\r\n  },\r\n  output: {\r\n    path: path.resolve(__dirname, \"dist\"),\r\n    filename: \"[name].js\",\r\n    library: [\"MyLibrary\"],\r\n    libraryTarget: \"umd\",\r\n    globalObject: \"this\",\r\n  },\r\n};\r\n```\r\n\r\nIf you load moduleA and moduleB into <script> tag\r\n```html\r\n<script src=\".\/moduleA.js\" ><\/script>\r\n<script src=\".\/moduleB.js\"><\/script>\r\n<script type=\"text\/javascript\">\r\nMyLibrary.moduleA; \/\/ === undefined\r\nMyLibrary.moduleB; \/\/ !== undefined\r\n<\/script>\r\n```\r\nI created working sample here.\r\nhttps:\/\/hinaser.github.io\/webpack-pr-example\/current\/index.html\r\nhttps:\/\/github.com\/Hinaser\/webpack-pr-example\/tree\/master\/current\r\n\r\nThis is because UMD loader always assigns exported module into global object.\r\n```js\r\n(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\tmodule.exports = factory();\r\n\telse if(typeof define === 'function' && define.amd)\r\n\t\tdefine([], factory);\r\n\telse if(typeof exports === 'object')\r\n\t\texports[\"MyLibrary\"] = factory();\r\n\telse\r\n\t\troot[\"MyLibrary\"] = factory(); \/\/ <- This always clears module previously loaded.\r\n})(this, function() {\r\n```\r\n\r\nSo I propose UMD loader to be like this.\r\n```js\r\n(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\tmodule.exports = factory();\r\n\telse if(typeof define === 'function' && define.amd)\r\n\t\tdefine([], factory);\r\n\telse if(typeof exports === 'object')\r\n\t\texports[\"MyLibrary\"] = factory();\r\n\telse{\r\n\t\tvar a = factory();\r\n\t\troot[\"MyLibrary\"] = root[\"MyLibrary\"] || {};\r\n\t\tfor(var i in a) root[\"MyLibrary\"][i] = a[i];\r\n\t}\r\n})(this, function() {\r\n```\r\n\r\nThe working example of this proposal is here.\r\nhttps:\/\/hinaser.github.io\/webpack-pr-example\/proposing\/index.html\r\nhttps:\/\/github.com\/Hinaser\/webpack-pr-example\/tree\/master\/proposing\r\n\r\n\r\n**What kind of change does this PR introduce?**\r\nMultiple UMD libraries sharing the same namespace change not to compete each other.\r\n\r\n**Did you add tests for your changes?**\r\nI couldn't find any existing UMD library test in webpack repository.\r\nSo I created working example.\r\nhttps:\/\/github.com\/Hinaser\/webpack-pr-example\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo. This PR will preserve modules previously loaded.\r\n\r\n**What needs to be documented once your changes are merged?**\r\nI don't think additional documentation is required because the original behaviour might not be expected\/cared by many developers.","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@alexander-akait I'll try after having some sleep :sleepy:","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","@alexander-akait I've just added a test. By the way, I took really hard time understanding how test works :tired_face:"],"labels":["PR: CI-ok","PR: unreviewed","PR: conflict"]},{"title":"fix: allow to assets have absolute paths","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nbugfix, fixes #12759, I'm not sure if we should allow this \r\n\r\n**Did you add tests for your changes?**\r\n\r\nNo, but I can you we accept this change\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNo\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\n@alexander-akait The most important CI builds failed. This way your PR can't be merged.\n\nPlease take a look at the CI results from azure ([1 errors \/ 2 warnings](https:\/\/dev.azure.com\/webpack\/60b36df0-23d2-44f7-82d7-6d18e498d900\/_build\/results?buildId=13164)) and [appveyor](https:\/\/ci.appveyor.com\/project\/sokra\/webpack\/builds\/38248642) (success) and fix these issues."],"labels":["PR: unreviewed","PR: conflict"]},{"title":"fix: UNC for make relative\/absolute","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nbugfix\r\n\r\n**Did you add tests for your changes?**\r\n\r\nHard to test, but I am fine to do it, don't know how to better test it\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNo need\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","I tried to test UNC paths with webpack, but this seem to be very broken. We need to test and fix that in enhanced-resolve first if we really plan to add UNC path support.","@sokra Strange... I tested it too and no problems except it, can you provide steps how you tested it, I think it is not hard to fix it","The problem was that `cdUp` in enhanced-resolve had some problems. It returns `\\` for `\\` which brings the description file lookup into a endless loop.\r\n\r\nIn windows you can prefix any path with `\\\\?\\` to make it an UNC path: e. g. `\\\\?\\C:\\test\\case`. I changed the test suite to prefix this early on."],"labels":["PR: CI-ok","PR: unreviewed"]},{"title":"refactor: simplify lazy compilation communication","body":"Use http get request instead of SSE in lazy compilation communication.\r\n\r\nServer Sent Events have a limitation when is used over http connection. \r\n\r\n> When not used over HTTP\/2, SSE suffers from a limitation to the maximum number of open connections, which can be especially painful when opening multiple tabs, as the limit is per browser and is set to a very low number (6). The issue has been marked as \"Won't fix\" in Chrome and Firefox.\r\n\u2013 From: https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Server-sent_events\/Using_server-sent_events\r\n\r\nThis limitation is probably the root cause of one sporadic issue that we are seeing in some engs laptops:\r\n\r\n<img width=\"547\" alt=\"Screen Shot 2021-03-08 at 8 33 27 PM\" src=\"https:\/\/user-images.githubusercontent.com\/7464663\/110395775-8f4da680-804d-11eb-9090-d18733daa6dd.png\">\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nrefactoring, maybe bugfix.\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNo\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo.\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNothing","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\n@ramasilveyra The most important CI builds failed. This way your PR can't be merged.\n\nPlease take a look at the CI results from azure ([9 errors \/ 6 warnings](https:\/\/dev.azure.com\/webpack\/60b36df0-23d2-44f7-82d7-6d18e498d900\/_build\/results?buildId=13055)) and [appveyor](https:\/\/ci.appveyor.com\/project\/sokra\/webpack\/builds\/38123246) (failure) and fix these issues.","@ramasilveyra Sorry for delay, is it actual?","can I customize hmr backend to avoid using localhost, to use an IP or another hostname to expose them in LAN over IP or ngrok ?"],"labels":["PR: CI-not-ok","PR: unreviewed","PR: conflict"]},{"title":"`new Worker(import.meta.url)` doesn't work as expected","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\nI have code like this:\r\n\r\n```js\r\nnew Worker(import.meta.url)\r\n```\r\n\r\nwhere module spawns itself as a Worker when multithreading is enabled.\r\n\r\n**What is the current behavior?**\r\n\r\nWebpack transforms `import.meta.url` into a `file:` URI, which fails to get spawned in runtime.\r\n\r\n**What is the expected behavior?**\r\n\r\nHandling of\r\n\r\n```js\r\nnew Worker(import.meta.url)\r\n```\r\n\r\nshould be equivalent to\r\n\r\n```js\r\nnew Worker(new URL('explicit-own-filename.js', import.meta.url))\r\n```\r\n\r\nwhich Webpack already supports.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version: 5.20.1","comments":["script tag must be support ESM.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Still valid","Having thought about this a bit more, while I think it would be useful, it's likely not the most uncommon usecase and other bundlers don't seem to support this either. To keep consistency I suppose I'll close it.","@RReverser I think we can keep open, for me it is feature\/enhancement than bug","> and other bundlers don't seem to support this either\r\n\r\nFYI I just implemented support for this in Parcel (see link above). Came across this issue while I was researching so thought I would let you know. \ud83d\ude09 ","> \r\n> \r\n> > and other bundlers don't seem to support this either\r\n> \r\n> FYI I just implemented support for this in Parcel (see link above). Came across this issue while I was researching so thought I would let you know. \ud83d\ude09\r\n\r\nAh thanks :)","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["enhancement","webpack-5"]},{"title":"Bug: unwanted webpackPrefetch when using with webpackChunkName","body":"# Bug report\r\n\r\n**What is the current behavior?**\r\n Using webpackChunkName and webpackPrefetch together results in prefetching even when it's not wanted\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nClone the repo: https:\/\/github.com\/Allain55\/webpack_issue_12393\r\n$ npm i\r\n$ npm start\r\nVisit http:\/\/localhost:3500\/pageA\r\nHere \"chunkA\" is prefetched as it should be because webpackPrefetch is used in bundleA.js\r\n\r\nVisit http:\/\/localhost:3500\/pageB\r\nHere \"chunkA\" is also prefetched but it shouldn't be as webpackPrefetch is not set in bundleB.js\r\n\r\n**What is the expected behavior?**\r\n webpackChunkName should not affect prefetching\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.13\r\nNode.js version: 15.5.1\r\nOperating System: Ubuntu 16.04.7\r\nAdditional tools:\r\n","comments":["Please describe the problem, not code and provide configuration or example of the problem","OK I updated the issue","Yep, bug","I need more information about the issue. I didn't understand well.","@akgupta0777 It is bug, do you want to fix it?","Yes I want to fix it. But I have no idea what is the problem actually I ran the steps to reproduce the error but I need a proper view of the problem so that I can come up with a fix.\r\n","@alexander-akait https:\/\/github.com\/Allain55\/webpack_issue_12393\/blob\/master\/app\/bundleB.js#L5, `webpackChunkName` should not set `webpackPrefetch` to `true`, I think it is not hard to fix, I think problem somewhere here https:\/\/github.com\/webpack\/webpack\/blob\/master\/lib\/dependencies\/ImportParserPlugin.js, need debug","@Allain55 Explain This\r\n\r\n```\r\nconsole.log('BundleB')\r\n\r\nsetTimeout(() => {\r\n\timport(\r\n\t\t\r\n\t\t'.\/chunkA.js'\r\n\t\t)\r\n\t\t.then(({default: chunkA}) => {\r\n\t\t\tchunkA();\r\n\t\t})\r\n}, 1000);\r\n```\r\nI understand you are not prefetching chunkA in BundleB.js but you are importing it By doing this it will actually load chunkA.js and then you are attaching the chunkA() callback which will call after the promise is resolved.","Hi @akgupta0777,\r\nthanks for checking this. You're description is correct. This is the most simple example of dynamic importing I could come up with. In this case I'd need to use chunkA in some point but I don't want to prefetch it as it can wait","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Bump","I came once again to this issue after researching on this webpack prefetch. So under the hood it actually just adds a\r\n `<link rel=\"prefetch\" as=\"script\" href=\"\/AChunk.bundle.js\">` in your HTML files that signals the browser to prefetch the module in idle state. \r\nSo once browser prefetches the Module it stores that module in module cache so it will be loaded instantly when you want to load it.\r\n\r\nin Page B dynamically importing ChunkA.js file returns a promise and then it will resolve and call the default export and chunk is console logged. \r\nChunkA is not prefetched on Page B. Its loaded.","@Allain55 You can clearly see here in HTML of Page A\r\nyou can see <link rel=\"prefetch\" as=\"script\" href=\"\/AChunk.bundle.js\"> in  head tag. which means it is prefetching.\r\n\r\n![pageA](https:\/\/user-images.githubusercontent.com\/51379307\/120070707-821ee180-c0a9-11eb-9fb6-61aa8b7d9e5e.jpg)\r\n\r\nbut this is not in case of Page B as you can see below.\r\nno link to prefetching it's natural promise resolved.\r\n\r\n![PageB](https:\/\/user-images.githubusercontent.com\/51379307\/120070756-ada1cc00-c0a9-11eb-8333-6e83db252fd1.jpg)\r\n\r\n\r\n","I don't think so it's kind of any bug.\r\n","Hi @akgupta0777,\r\nDid you follow the steps I described? I still get the same bug after cloning that repo. I tried with the latest webpack too and I still see that \"\/myChunk.bundle.js\" is prefetched on pageB. \r\n\r\nIn your picture a script named \"AChunk.bundle.js\" is prefetched on pageA but this should be \"myChunk.bundle.js\", there is no \"Achunk.bundle.js\"","@Allain55 I changed the chunkname property to \"Achunk\" in bundleA and \"Bchunk\" in BundleB so that I can differentiate between the two and seperate bundles will be applied to seperate pages","I see. If you use different webpackChunkNames or skip it than there is no bug. The bug only happens when webpackChunkName is set at least 2 times and webpackPrefetch is true at least 1 times but not 2 times. Since in this case we prefetch the same chunk I used the name \"myChunk\" for both but I only added webpackPrefetch for 1 chunk","Ohh It means webpack chunknames have name collisions. ","But this doesn't make sense you actually importing same module dynamically twice in two different javascript files.","That is why it is a chunk. I'd use the same chunk in 2 bundles eg. a gallery that is not needed on page load","can you tell me what will happen if multiple webpages are prefetching the same resources ?. I mean they will be cached and when requesting on other pages will instantly serve the resource.","Yes, the resources should be cached. But they should be cached regardless of prefetching.\r\nI used prefetch to speed up the initial render of a big resource that is not needed right away.","@Allain55 I mean that if for instance the pageA prefetches the chunk already and when user moved to pageB then another network call is made or not to prefetch the chunk again. Does this impacts performance ?\r\n","Prefetching happens in the background with low priority so I don't think it has any noticeable performance impact. Still another network call will be made","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["bug","webpack-5"]},{"title":"Async Entries","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n* add `initialChunkFilename`\r\n* add `initialChunkFilename` and `chunkFilename` to entry description\r\n* add `chunkFormat` to entry description\r\n* fix `entryOptions.runtime` for Worker support\r\n* add `runtimeName` options to entry description\r\n* TODO\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nfeature, experiment\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nTODO\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nTODO\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@sokra I thought it is done under `experiments.layers`","> @sokra I thought it is done under `experiments.layers`\r\n\r\nYes, part of that work has already been merged in a separate PR"],"labels":["PR: unreviewed"]},{"title":"globalObject: \"this\" work incorrect with ModuleFederation after 5.2.0","body":"# Bug report\r\n\r\n**What is the current behavior?**\r\nthe ModuleFederation crashed with `output.globalObject: \"this\" `\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n- clone `https:\/\/github.com\/module-federation\/module-federation-examples\/tree\/master\/basic-host-remote`\r\n- add `ModuleFederationPlugin`\r\n- set `output.globalObject: \"this\" `\r\n- set `package.json` (disable `arrowFunctions`)\r\n```\r\n\"browserslist\": {\r\n    \"production\": [\r\n      \">0.2%\",\r\n      \"not dead\",\r\n      \"not op_mini all\"\r\n    ],\r\n    \"development\": [\r\n      \"last 1 chrome version\",\r\n      \"last 1 firefox version\",\r\n      \"last 1 safari version\"\r\n    ]\r\n  }\r\n```\r\n- build and run\r\n\r\nthe output `remoteEntry.js` error:\r\n\r\n```js\r\n\/\/ this is undefined\r\nvar chunkLoadingGlobal = this[\"webpackChunkreact_app_shared\"] = this[\"webpackChunkreact_app_shared\"] || [];\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n`ModuleFederation` should works correct with: `output.globalObject: \"this\" `\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.2.0~5.5.1\r\n","comments":["it works correct when set `output.globalObject: \"self\"`","~~Can't reproduce, all works fine, please create minimum reproducible test repo and I will reopen an issue, both values works fine~~ reproduced","I think it is the limitation, when you set `globalObject` webpack attach all runtime to this object, but in some cases it is not safe to do it, so it is why we use `self` by default, if you use `globalObject: 'something'` you will get problem too, what is use case to use `this`?","1. [create-react-app](https:\/\/github.com\/facebook\/create-react-app\/issues\/7741) use `globalObject: this` for worker.\r\n2. it works well at 5.1.3\uff08with `arrowFunctions`\uff09\r\n\r\n>so I think this is a bug.","@lomocc No, it is not bug, it is limitation, `globalObject: this` will not work in workers, there is not `this` in web workers, you should use `self`","> it works well at 5.1.3\uff08with arrowFunctions\uff09\r\n\r\nYes, because arrow functions doesn't create context","It could be indeed a bug. Sounds like the bundle becomes strict mode only and `this` is undefined in strict mode.\n\nAs workaround avoid this as global object. Using the default should be fine instead.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","I'm running into an issue where `new Worker(new URL(...))` syntax used with a worker target that uses e.g.\r\n\r\n```js\r\nthis.onmessage = console.log;\r\n```\r\n\r\nsilently produces a broken worker that contains only\r\n\r\n```js\r\nconsole.log;\r\n```\r\n\r\nIs this the same issue or do I need to raise a separate one?","@RReverser Can you provide more information? Need check ","Well... that's pretty much it. Put the code above:\r\n\r\n```js\r\nthis.onmessage = console.log;\r\n```\r\n\r\nin e.g. `worker.js` and then in `main.mjs` put\r\n\r\n```js\r\nnew Worker(new URL('.\/worker.js', import.meta.url));\r\n```\r\n\r\nAnd compile with Webpack with `webpack .\/main.mjs --mode=production`.\r\n\r\nThe output for the worker contains just `console.log;`.","Perhaps it's assuming that any Worker is ESM and hence strict by default, when it should be looking for `new Worker(..., {type: 'module'})` to determine whether it's a script Worker, or a module Worker.","`this` in modules (e. g. CommonJs or ESM) is not the same as `this` in a script.\r\n\r\n`this.onmessage = console.log;` this is equal to `exports.onmessage = console.log;` in CommonJs or `undefined.onmessage = console.log;` in ESM. So that won't work.","@sokra I'm aware it's not the same. That's what I'm saying - that Webpack seems to assume that Worker is always a module, whereas by default in browsers it's a regular script and `this` is just a global object.\r\n\r\nThat is, if you try the code above in a browser, it works as expected, and `this.onmessage` will set the handler and log events.","Perhaps it would be easiest for Webpack to just skip over workers without `type: 'module'` for now? Unless there's an easy way to tell it that others are regular scripts and should correspondingly have `this == global object`.","You could try `new ProvidePlugin({ this: \"global\" })` maybe that works are workaround.\r\n\r\nBut it affects all modules...\r\n\r\nOtherwise you can write your code as:\r\n\r\n``` js\r\nconst asset = new URL(\".\/worker.js\", import.meta.url);\r\nconst worker = new Worker(asset);\r\n```\r\n\r\nThis skips webpack processing for the worker file and treats it as normal `asset`.","Yeah I guess that works as a workaround - in my case I went ahead and updated that legacy Worker that caused an issue to be strict mode compliant.\r\n\r\nI just wanted to report this as it will probably catch others by surprise too, and takes a while to debug what's happening.\r\n\r\nI think Webpack should either skip non-module usages of Workers, or provide correct environment to them, or at least warn on such usages - current behaviour quietly emits broken code, which seems like the worst of those options DX-wise.","My case:\r\nFirst i found complied code contains **arrow fucntion**. so i add `target: ['web', 'es5']` to solve the problem.\r\nThen code became:\r\n```js\r\n! function () {\r\n  \"use strict\";\r\n  \/* `this` is undefined in strict mode *\/\r\n  n = this.webpackChunkFoo = this.webpackChunkFoo || []\r\n}\r\n```\r\nSo i need to add `output.globalObject: 'window'` to solve this problem.\r\n\r\nBut it seems a little weird because once you set `target: ['web', 'es5']`. You need to configure `output.globalObject: 'window'` too. Which is not mentioned in documentation.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","@alexander-akait what should we do here? sounds like this is limitation to use `globalObject: \"this\"` ( in this case )\r\n______\r\n\r\nMostly we use arrow functions where we can use them..","@vankop I think we should not use arrow function in some cases, but yes, it can be tricky to analyze (maybe regexp or warning?) ","> I think we should not use arrow function in some cases\r\n\r\nwe use it only if environment supports it.","Still an issue probably."],"labels":["bug","webpack-5"]},{"title":"Wrong line numbers when processing files after ts-loader","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nWebpack in some cases reports errors according to .js files instead of originating .ts files. For the repro below the error is\r\n```\r\nERROR in .\/startup.ts 8:11-31\r\nModule not found: Error: Can't resolve 'some_file' in 'C:\\src\\webpack-5\\test'\r\n```\r\n\r\nLine number of error is 8 instead of 13 as in startup.ts - line 8 is the corresponding number from the .js file if package would be compiled with typescript.\r\n\r\nIf there would be a typescript error, the correct line of the error will be output.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nhttps:\/\/github.com\/jeffrson\/webpack-ts-line-numbers.git\r\n\r\ncall `yarn`\r\nthen `yarn webpack`\r\nfinally check `yarn tsc` for comparing startup.js\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nshould report line 13 and correct columns for file startup.ts\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.5.1\r\nNode.js version: 14.15.1\r\nOperating System: Windows 10\r\nAdditional tools:\r\n","comments":["I think it is expected, because resolving based on outputed file from loader, but yes, we can improve this, something like:\r\n```\r\nERROR in .\/startup.ts 8:11-31 (original 13:11-31)\r\n```","In this case it seems to be simple, but in a real project it's quite confusing if you look at the reported line and cannot find the cause.\r\n\r\nIn theory the transpiled .js could be reported (instead of .ts), but since this does not exist to have a look at for reference this is not quite helpful as well.","Yep, it will be great to improve this","Assign it to me so that I can try to solve this.","But which loader are you using to process typescript @jeffrson \r\n","Just ts-loader","ts-loader is a custom package created by TypeStrong. Its not a webpack owned loader in Webpack-contrib Github account.\r\nI think I should go to ts-loader repo in order to fix this.\r\n\r\n","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Still valid, we can get real position from source map, if they present","Is there a workaround ? Or do we need to wait for this to be completed? ","ts-loader makes wrong source map line\/column numbers.","In case anyone comes across this issue and just wants a temporary workaround, I've added what works for me [here](https:\/\/github.com\/TypeStrong\/ts-loader\/issues\/882#issuecomment-1014247589)\r\n\r\nUPDATE A more user-friendly and perhaps more permanent solution [here](https:\/\/github.com\/TypeStrong\/ts-loader\/issues\/882#issuecomment-1014278729)","Since the other issue is closed does this mean there won't be any fix?\r\nI have the same config as in the examples but the lines are still wrong - however I use Vue if that matters","I had a chance to work a bit on this issue. I'm able to get the original lines and locations of the error using the source map as @alexander-akait advised. I used [source-map](https:\/\/github.com\/mozilla\/source-map) library for the conversion, but I wonder where is the right place to do it. For example it could be done here for the `ModuleNotFoundError`:\r\n\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/0bc85d127c14347d646f1354a6cbf2d1142905d8\/lib\/Compilation.js#L2094-L2098\r\n\r\nI could update the dependency location (`loc` property), but it seems like this logic should be implemented for all errors.\r\nSo my idea is to do this conversion using the [`failedModule`](https:\/\/webpack.js.org\/api\/compilation-hooks\/#failedmodule) hook. Basically it'll check if the source map is available, if yes it'll do the conversion. Does this make sense?","I think we should do it after loader processing"],"labels":["enhancement","webpack-5"]},{"title":"How can I pass importObject to a WebAssembly module with Webpack 5 as a building tool?","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nThere should be a way to pass importObject for the instantiation of some special WebAssembly modules. So, how can I do that with Webpack 5 as a building tool?\r\n\r\nLet's say, for example, to use the below Wasm module, I need a way to pass the implementation of the function \"minus\" to instantiate the module instance.\r\n\r\n```\r\nimport { cal } from '.\/program.wasm'\r\n\r\nconsole.log(cal(5, 2)) \/\/ -3.\r\n```\r\n\r\nCurrently, I get this error while running the app:\r\n\r\n```\r\nprogram.wasm:1 Uncaught (in promise) Error: Cannot find module 'env'\r\n    at webpackMissingModule (program.wasm:1)\r\n    at eval (program.wasm:1)\r\n    at Object..\/src\/program.wasm (src_program_wasm.bundle.js:23)\r\n    at __webpack_require__ (main.bundle.js:494)\r\n    at Function.fn (main.bundle.js:687)\r\n```\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] webpack-4\n* [ ] webpack-5\n* [ ] bug\n* [ ] critical-bug\n* [ ] enhancement\n* [ ] documentation\n* [ ] performance\n* [ ] dependencies\n* [ ] question","Thank you for creating this issue. However, issues need to follow one of our templates so that we can clearly understand your particular circumstances.\r\n\r\nPlease help us help you by recreating the issue using one of our templates.\r\n\r\nDo not ignore the issue template questions, I will reopen the problem after you fix it","Hi there. The ability to instantiate wasm with importObject is paramount for 99.99999(9)% of real world use cases. \r\nI'll elaborate the ticket to re-open it:\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nOnly trivial wasm examples like \"fibonacci\"  have 'export' fields, but  no 'import' dependencies to interoperate with JS.\r\nWebpack 5 wasm import with config `experiments.asyncWebAssembly: true `and `module.rules: { test: \/\\.wasm$\/, type: 'webassembly\/async' }` works perfectly fine for those trivial cases of wasm containing 'export' fields only. \r\n\r\nMost bigger examples generated with Cheerp, Emscripten, etc. have wasm containing 'export' AND 'import' fields (for JS dependencies referred by some as 'glue code').\r\n\r\nAt present, Webpack 5 wasm import results in a WebAssemply Instance with, what seems to me, an empty  'importObj'.\r\nHence, trivial wasm instantiates fine, but any wasm with 'import' fields throws 'LinkError: WebAssembly.instantiate():' as it should.\r\n\r\nAfter searching webpack repo, I found that importObject is not being passed along with fetched binary into  WebAssembly.instantiateStreaming(binary, impObj) at all on line 52: [\/lib\/web\/FetchCompileAsyncWasmPlugin.js#L52](https:\/\/github.com\/webpack\/webpack\/blob\/93ce24d2dc40ee972a2ea5138f3c181563c913fd\/lib\/web\/FetchCompileAsyncWasmPlugin.js#L52)\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\na) provide option for passing  importObject upon import, e.g. \r\n\r\n`const testPromise = import('.\/test.wasm')(importObj)`\r\n\r\nOR\r\n\r\nb)  provide 'experiments.asyncWebAssembly**AsModule**', i.e.  the ability to import wasm as a wasm-module instead of wasm-instance. At present [lib\/wasm-async\/AsyncWasmChunkLoadingRuntimeModule.js](https:\/\/github.com\/webpack\/webpack\/blob\/af52c8f0457b1055098d6b7b545b257404d06c93\/lib\/wasm-async\/AsyncWasmChunkLoadingRuntimeModule.js) goes too far and instantiates  \r\nwith WebAssembly.instantiateStreaming() and fallback WebAssembly.instantiate().\r\n\r\nHaving wasm imported as wasm-module instead of wasm-instance will allow passing importObj and instantiate manually according to the spec: [WebAssembly\/Module](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/WebAssembly\/Module) \r\n\r\n\r\n\r\n\r\n\r\n\r\n","Why is this issue closed?","\r\n\r\n\r\n\r\n> Why is this issue closed?\r\n\r\n@[alexander-akait](https:\/\/github.com\/alexander-akait) ignored my elaborated comment and did not re-open the issue. However, I found a complex way to work around this issue using type: 'asset\/resource' instead of 'webassembly\/async' to load the wasm file and monkey-patch it to inject the import object.\r\n","@alexander-akait this is still an issue. If it is possible to pass a `importObject` to wasm somehow then please point me to the relevant documentation. The only thing I found is `asyncWebAssembly` in https:\/\/webpack.js.org\/configuration\/experiments\/","> > Why is this issue closed?\r\n> \r\n> @[alexander-akait](https:\/\/github.com\/alexander-akait) ignored my elaborated comment and did not re-open the issue. However, I found a complex way to work around this issue using type: 'asset\/resource' instead of 'webassembly\/async' to load the wasm file and monkey-patch it to inject the import object.\r\n\r\ncan you elaborate on the workaround?","> > > Why is this issue closed?\r\n> > \r\n> > \r\n> > @[alexander-akait](https:\/\/github.com\/alexander-akait) ignored my elaborated comment and did not re-open the issue. However, I found a complex way to work around this issue using type: 'asset\/resource' instead of 'webassembly\/async' to load the wasm file and monkey-patch it to inject the import object.\r\n> \r\n> can you elaborate on the workaround?\r\n\r\n@[HarikrishnanBalagopal](https:\/\/github.com\/HarikrishnanBalagopal) please check in documentation if this issue is solved already. If not, please reply here and I'll do a demo with a screencast to show my hack.  Also, I'll use it to open a new issue for @[alexander-akait](https:\/\/github.com\/alexander-akait) here. I'm quite busy right now, but will reserve time for it in 2-3 weeks if you really need a solution for that problem.","@congineer Can you provide reproducible example? Nothing to use `env`, so maybe problem in your env, need investigate...","> \r\n\r\n@alexander-akait what has env to do with it? In my comment  Apr 13, 2021 I clearly explained that webpack code has no means to handle the import object: \"importObject is not being passed along with fetched binary\". If you confirm that you are willing to investigate the issue I'll schedule to create an elaborated demo within 2-3 weeks in my agenda.","@congineer Can you create reproducible example?","> @congineer Can you create reproducible example?\r\n\r\n@alexander-akait Ok, I will write a test case and let you know here.","Hi @congineer, do you know if this issue has been solved? Seems like a no-brainer feature...","Hi @braulio-balanza. My project's WASM part shifted from spring towards December. Hence, I'll report here with examples after I'll dig into it. I have a workaround for Cheerp compiler, but I assume that the community is more interested in Emscripten example.","Hi @congineer, thank you for your reply. Actually, Go compiled wasm requires the use of an import object defined in the glue javascript code. Without this import object, you cannot bundle even the simplest hello world program, making webpack unusable with wasm binaries compiled from Go. If necessary, I could pull up a hello world example real quick that shows the need for an import object.","Yes, @braulio-balanza, such example could potentially help open this ticket.","I bumped into this issue as well, as I'd need to pass `WebAssembly.Memory` through the `importObjects`. \r\n\r\nI have resorted to using the [wasm-loader](https:\/\/github.com\/ballercat\/wasm-loader) plugin . It's marked as deprecated (due to webpack's official support of wasm) but it works well for me.\r\n\r\nSince an example was requested, I am going to copy-paste one from the README of wasm-loader:\r\n```js\r\nimport makeFactorial from 'wasm\/factorial';\r\n\r\nmakeFactorial({\r\n  'global': {},\r\n  'env': {\r\n    'memory': new WebAssembly.Memory({initial: 100, limit: 1000}),\r\n    'table': new WebAssembly.Table({initial: 0, element: 'anyfunc'})\r\n  }\r\n}).then(instance => { \/* code here *\/ });\r\n```\r\nBut more in general, details about the `importObjects` that `WebAssembly.instantiate` accepts can be found in: https:\/\/developer.mozilla.org\/en-US\/docs\/WebAssembly\/JavaScript_interface\/instantiate#syntax .\r\n\r\nAs the others have said, it's quite fundamental to be able to pass this input.","Any update on this? I just came across it today. The code Webpack generates for loading the WASM has an error built in to the call to the loader:\r\n\r\n```\r\n\/***\/ \".\/src\/wasm-code.wasm\":\r\n\/*!****************************!*\\\r\n  !*** .\/src\/wasm-code.wasm ***!\r\n  \\****************************\/\r\n\/***\/ ((module, exports, __webpack_require__) => {\r\n\r\n\"use strict\";\r\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module 'env'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\r\nmodule.exports = __webpack_require__.v(exports, module.id, \"9e16aacb11ad6b85b0d4\", {\r\n\t\"env\": {\r\n\t\t\"memory\": Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'env'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())\r\n\t}\r\n});\r\n\r\n```\r\n\r\nWithout a way of setting the \"env\" in the module doing the import of the wasm code, it seems impossible to use this feature (where the WASM doesn't provides its own memory and imports).","Let's reopen, make sense, someone want to send a PR?","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","I am also running into this issue trying to use Emscripten to generate an ES6 module.  I was unsuccessful with `wasm-loader`.  Has anyone found a workaround?","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["enhancement","inactive","webpack-5","Send a PR"]},{"title":"Compile top-level await to ES5","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nReproduction for https:\/\/github.com\/webpack\/webpack\/issues\/11874.\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\nAdded a failing test.\r\n\r\n**Did you add tests for your changes?**\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\nYes\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n\r\nNothing","comments":["[![CLA assistant check](https:\/\/cla.js.foundation\/pull\/badge\/not_signed)](https:\/\/cla.js.foundation\/webpack\/webpack?pullRequest=11881) <br\/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https:\/\/cla.js.foundation\/webpack\/webpack?pullRequest=11881) before we can accept your contribution.<br\/>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@sokra I saw that you worked on this topic in https:\/\/github.com\/webpack\/webpack\/pull\/9177. I'm wondering if this is something that you consider a goal? It seems to me like it's not a quick fix, therefore I wanted to ask in advance if I'm on the right path here before I spend a lot of time on this.\r\n\r\nI dug a bit more into the code and some tasks that I see are:\r\n1. Replace `async () => ` declaration of async modules in `HarmonyCompatibilityDependency` where the `InitFragment` is pushed with `STAGE_ASYNC_BOUNDARY` with a regular ES5 function.\r\n2. Add something like `_topLevelAwait2__WEBPACK_IMPORTED_MODULE_0__.then(function(_topLevelAwait2__WEBPACK_IMPORTED_MODULE_0__) {` at the beginning of the consumption code. I guess this is possible to insert with `InitFragment.STAGE_ASYNC_DEPENDENCIES`.\r\n3. Somehow add a closing function body to the end of the module consumption. It seems to me like `InitFragment` only supports adding content to the beginning of the source code, not at the end, therefore would you have to create a new kind of fragment that adds to the end?\r\n4. Somehow transform the async module, so the top-level await is replaced with exporting the promise directly, which should be resolved at the call site. For this I'm quite clueless how to do this.\r\n\r\nIt seems like quite a hack to me, therefore I wanted to ask in advance if this is the right way to go or if you'd like to change this at all.\r\n\r\nThank you for your feedback!","Supporting top level await requires a complex transformation of the code. That's probably not something webpack can perform. Maybe we can only cover the simple cases and the complex cases need to be handled within a Babel transform.\n\n``` js\n\/\/ Simple\nawait something;\n\n\/\/ Complex\nimport \"using-default-export-circular\"\nexport function f() { return value; }\nwhile(await something) {}\nexport default function () { return f() }\nconst value = \"has tdz\";\n```\n\nI don't even know how to transpile the TDZ correctly, but this might not matter so much...","@sokra Good point, there are quite sophisticated cases.\r\n\r\nI did an experiment with adding another transformation step with `babel-plugin-transform-async-to-promises` after the webpack compilation is done (see https:\/\/github.com\/amannn\/webpack-top-level-await\/tree\/babel). I've also added an async `while` loop and it seems like the output works as expected.\r\n\r\nI'm not sure how that should work in a traditional setup as Babel is typically invoked before the webpack compilation \u2026 Would you suggest to use a webpack plugin that does this transformation for webpack to support top-level await in ES5 environments?","<!-- identifier: ci-result -->\n\n@amannn The most important CI builds failed. This way your PR can't be merged.\n\nPlease take a look at the CI results from azure ([1 errors \/ 0 warnings](https:\/\/dev.azure.com\/webpack\/60b36df0-23d2-44f7-82d7-6d18e498d900\/_build\/results?buildId=11836)) and [appveyor](https:\/\/ci.appveyor.com\/project\/sokra\/webpack\/builds\/36053039) (failure) and fix these issues."],"labels":["PR: CI-not-ok","PR: unreviewed"]},{"title":"Compile top-level await to ES5","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nTop-level await code is currently always compiled to native async\/await code and therefore doesn't work in browsers like IE11.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nReproduction repository: https:\/\/github.com\/amannn\/webpack-top-level-await\r\n\r\nHere's the relevant part of [the output](https:\/\/github.com\/amannn\/webpack-top-level-await\/blob\/main\/dist\/main.js):\r\n\r\n```js\r\n!(function () {\r\n  \"use strict\";\r\n  var r = {\r\n      568: function (r, o) {\r\n        r.exports = (async () => ((o.Z = await Promise.resolve(1)), o))();\r\n      },\r\n      138: function (r, o, e) {\r\n        r.exports = (async () => {\r\n          var r = e(568);\r\n          (r = await Promise.resolve(r)), console.log(r.Z);\r\n        })();\r\n      },\r\n    },\r\n    o = {};\r\n  !(function e(t) {\r\n    if (o[t]) return o[t].exports;\r\n    var s = (o[t] = { exports: {} });\r\n    return r[t](s, s.exports, e), s.exports;\r\n  })(138);\r\n})();\r\n```\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would be great if the code would compile to regular promises that are awaited by calling `.then`.\r\n\r\nI tried configuring `target: ['web', 'es5']` and adding a `browserslist` config, but it seems like that doesn't have an effect.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.3.1\r\nNode.js version: 14.15.0\r\nOperating System: macOS\r\nAdditional tools: I initially observed this behaviour in a Next.js app and have created [a failing test in the Next.js repository](https:\/\/github.com\/vercel\/next.js\/pull\/18487).\r\n","comments":["You need babel-loader to transform it for IE11","As you can see there is not magic for `topLevelAwait` https:\/\/github.com\/webpack\/webpack\/blob\/master\/lib\/dependencies\/HarmonyDetectionParserPlugin.js#L51\r\n","Thanks for your quick response!\r\n\r\nI've created a `babel-loader` branch based on your feedback in my repo: https:\/\/github.com\/amannn\/webpack-top-level-await\/tree\/babel-loader\r\n\r\n> It is invalid syntax, you can't use await in export\r\n\r\nIs it? It seems like it at least compiled. I've now changed the code to this:\r\n\r\n```js\r\nconst value = await Promise.resolve(1);\r\n\r\nexport default value;\r\n```\r\n\r\nDoes that look ok to you?\r\n\r\n> You need babel-loader to transform it for IE11\r\n\r\nI've added babel loader, `@babel\/preset-env` and `@babel\/plugin-transform-async-to-generator` in the branch now. I've also included some regular async\/await code in the example code. The regular async\/await code is transformed as expected, but not the top-level async\/await.\r\n\r\nI've read at https:\/\/babeljs.io\/docs\/en\/babel-plugin-syntax-top-level-await that this plugin only parses the syntax but doesn't do any transformation itself.\r\n\r\nAs far as I understand, Babel runs before the webpack compilation, right? So in this case webpack inserts new async\/await statements in the code that was already compiled by Babel, so Babel wouldn't be able to transform the result \u2013 is that correct?","Yep, you are right","Feel free to send a PR https:\/\/github.com\/webpack\/webpack\/blob\/master\/lib\/async-modules\/AwaitDependenciesInitFragment.js","Thanks for the pointer! I've created an initial PR with a failing test (https:\/\/github.com\/webpack\/webpack\/pull\/11881), but I'm struggling a bit to understand how I can wrap the whole module consumption in a `.then(\u2026)`. If you could help with some more guidance, that would be great! I'm a first-time contributor and not really familiar with the internals of webpack.","Just use `then` :smile: ","I'm really not sure how \ud83d\ude42. It looks like with `AwaitDependenciesInitFragment` I can add a line before the module exports are consumed, but how can I wrap the whole consumption? I'd need to insert code at the end as well, right?","try experimenting, just open `node_modules\/webpack\/lib\/async-modules\/AwaitDependenciesInitFragment.js` in your reproducible test repo and change runtime and look what webpack generated","I took a look at this yesterday, and realised something. In order for untranspiled top-level await user code to work, webpack needs to provide it with an async context. The only way to do that is by [wrapping it with an `async` function](https:\/\/github.com\/webpack\/webpack\/blob\/d770a55ec0403fdf52fbd0fbeb8829ea3f28e574\/lib\/dependencies\/HarmonyCompatibilityDependency.js#L75). We can't replace this `async` function with `.then` because that would remove the async context and make untranspiled top-level await fail. I think that in order to make top-level await compatible with ie11, webpack output will need to be transpiled in a post-processing step.\r\n\r\n**edit**\r\n\r\n\ud83e\udd26 nvm,  I somehow missed https:\/\/github.com\/webpack\/webpack\/pull\/11881, ofcourse you guys are already there, and further.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Let's keep open, I think we can improve warnings\/docs here ","lol bad bot!","I need this PR","well , I write a wepack plugin to transform async to es5 \r\n```javascript\r\nclass BabelTransformAsyncPlugin {\r\n  apply(compiler) {\r\n    compiler.hooks.compilation.tap(\r\n      \"BabelTransformAsyncPlugin\",\r\n      (compilation) => {\r\n        compilation.hooks.optimizeChunkAssets.tapAsync(\r\n          \"BabelTransformAsyncPlugin\",\r\n          (chunks, done) => {\r\n            chunks.forEach(function(chunk) {\r\n              chunk.files.forEach(function(fileName) {\r\n                var result = compilation.assets[fileName].source();\r\n                console.log(fileName);\r\n                if (fileName.endsWith(\".js\") && result.includes(\"async \")) {\r\n                  console.log(\"babel async trans\", fileName);\r\n\r\n                  result = require(\"@babel\/core\").transformSync(result, {\r\n                    configFile: false,\r\n                    plugins: [\"@babel\/plugin-transform-async-to-generator\"],\r\n                  }).code;\r\n                  \/\/ ...require(\".\/babel.config\"),\r\n\r\n                  compilation.assets[fileName] = new ConcatSource(result);\r\n                }\r\n              });\r\n            });\r\n            done();\r\n          }\r\n        );\r\n      }\r\n    );\r\n  }\r\n}\r\n```","Hi @vanceeasleaf, Have you created the webapck plugin? If not how are you achieving the the top level await for IE11?","we discussed this internally so.. supporting promises on webpack side would require huge code transformation, that webpack in current version can not perform. There is a [PR](https:\/\/github.com\/webpack\/webpack\/pull\/15612) to add warning in case when output environment does not supports async\/await.\r\n\r\nAs user you can:\r\n\r\n- build for environment that supports async\/await\r\n- don't use top-level-await","@vankop Just wanted to make sure that this issue will be fixed in a future version of webpack right? adding a warning is a temporary solution I guess.","we didn't plan this yet.","> well , I write a wepack plugin to transform async to es5\r\n> \r\n> ```js\r\n> class BabelTransformAsyncPlugin {\r\n>   apply(compiler) {\r\n>     compiler.hooks.compilation.tap(\r\n>       \"BabelTransformAsyncPlugin\",\r\n>       (compilation) => {\r\n>         compilation.hooks.optimizeChunkAssets.tapAsync(\r\n>           \"BabelTransformAsyncPlugin\",\r\n>           (chunks, done) => {\r\n>             chunks.forEach(function(chunk) {\r\n>               chunk.files.forEach(function(fileName) {\r\n>                 var result = compilation.assets[fileName].source();\r\n>                 console.log(fileName);\r\n>                 if (fileName.endsWith(\".js\") && result.includes(\"async \")) {\r\n>                   console.log(\"babel async trans\", fileName);\r\n> \r\n>                   result = require(\"@babel\/core\").transformSync(result, {\r\n>                     configFile: false,\r\n>                     plugins: [\"@babel\/plugin-transform-async-to-generator\"],\r\n>                   }).code;\r\n>                   \/\/ ...require(\".\/babel.config\"),\r\n> \r\n>                   compilation.assets[fileName] = new ConcatSource(result);\r\n>                 }\r\n>               });\r\n>             });\r\n>             done();\r\n>           }\r\n>         );\r\n>       }\r\n>     );\r\n>   }\r\n> }\r\n> ```\r\n\r\nDid you succeed with this plug-in? Thanks for sharing\r\n","This should probably remain open","So I decided to write a plugin as well for this and put it on NPM: https:\/\/www.npmjs.com\/package\/transform-async-modules-webpack-plugin.\r\n\r\nIt's kind of similar to the one pasted above by @vanceeasleaf in that it uses Babel, but with some key advantages:\r\n\r\n- Handles source maps\r\n- Operates on the modules directly before they are written to chunks instead of transforming the chunks, meaning  Babel helper injections won't pollute the global scope and it still works if an \"eval\" `devTool` is used\r\n- Uses `@babel\/preset-env` to be able to just specify targets and so that the generators can also be transpiled down to ES5 (just `plugin-transform-async-to-generator` is not enough)\r\n\r\nFunctionally it seems to work fine.  The biggest issue I have is that it doesn't use `@babel\/plugin-transform-runtime` because it's way too late in the Webpack process to handle injected imports.  So if you have a lot of TLAs or even just 1 or 2 that permeate and result in a lot of downstream async modules, then the repeated helper and regenerator functions add up quickly in a large bundle.  I plan to try and address this: https:\/\/github.com\/steverep\/transform-async-modules-webpack-plugin\/issues\/1.\r\n\r\n@alexander-akait  or @vankop if you have any ideas or advice on the best way to seamlessly add the `@babel\/runtime` dependencies, I would appreciate it.  I'm looking at doing something similar to the way `ProvidePlugin` works, but I'm just starting to get myself familiar with how the `InitFragment` class works.  I'm not sure if there is a hook order that will work to replace the imports or if I need to flag and rebuild to make it work.","at least as I know there is no plan to support code transformation since this will require huge internal webpack changes. old `Dependency` design will no longer work since dependencies operate not on AST level of source code, but only insert\/remove\/change strings inside source code.\r\n\r\nUnfortunately, I am not familiar with babel, but I guess transforming top level await does not help.. since it is required to `await` module import. e.g. in example:\r\n\r\n\r\nmodule A\r\n```\r\nconst a = await somePromise;\r\nexport { a }\r\n```\r\n\r\nmodule B\r\n```\r\nimport { a } from 'module-a';\r\n\/\/ here we should wait for promise 'somePromise'\r\n\r\nconsole.log(a);\r\n```\r\n\r\nin case of transformation just async\/await this will not work correctly since you need to transform hole module tree ( thats an issue with currect webpack design, we dont have all code as an AST internally )\r\n\r\nTo sum up. as a user you can do things that [I mention above](https:\/\/github.com\/webpack\/webpack\/issues\/11874#issuecomment-1100652054) + chunk transformation ( this will bring additional code unfortunately )","@vankop I think maybe you are misunderstanding how the plugin and transformations work.  I don't think huge Webpack changes are necessary to support this.\r\n\r\n> Unfortunately, I am not familiar with babel, but I guess transforming top level await does not help.\r\n\r\nAs you probably know, Babel cannot transform top level await; it simply supports the syntax to possibly transpile the expression, but otherwise leaves the `await` as is.  However, once the `await` is inside an `async` function,it transpiles that function by:\r\n1. Turning it into a generator function that yields a promise\r\n2. Turning that generator into a regular function using a state machine that returns the promise\r\n\r\n> in case of transformation just async\/await this will not work correctly since you need to transform hole module tree \r\n\r\nThat's not necessary. Once Webpack wraps the original module in an `async function`, the new modified module can be transformed by Babel with no other knowledge of the tree.  My plugin does this by tapping into the `renderModuleContent` hook in the `JavascriptModulesPlugin`, so right before it gets wrapped in a container for the chunk.  This works fine.\r\n\r\nThe enhancement I'd like to make is regarding helper code.  As part of that transformation, Babel inserts some expensive helpers at the top of the module:\r\n\r\n```js\r\nvar helper1 = function (...) \/\/ expensive state machine function\r\nvar helper2 = function (...) \/\/ expensive asyncToGenerator converter function\r\n... \/\/ Transpiled version of async-wrapped module\r\n```\r\n\r\nInstead of repeating those expensive helpers over and over again, Babel can instead import them from  the `@babel\/runtime` package:\r\n\r\n```js\r\nvar helper1 = require(\"@babel\/runtime\/helper1\");\r\nvar helper2 = require(\"@babel\/runtime\/helper2\");\r\n... \/\/ Transpiled version of async-wrapped module\r\n```\r\n\r\nSo my question is: is there a way I can not repeat those helpers by replacing those requires with something Webpack understands?  From what I can see, there's no way to add dependencies at that stage as the graphs are already built and optimized.  And there's no way to know which modules are wrapped in async functions without building and optimizing the graph first.  Correct me if I'm wrong there.\r\n\r\n\r\nMy only thought was to flag the async modules on 1st pass, then add the dependencies on a call to `module.rebuild()`, but that seems risky as the graph could keep changing?  Or maybe the helpers could be added to Webpack's runtime code somehow to avoid all that?\r\n","you need to do this on loader level. `modulGraph.isAsync` returns `true` for any module that imports top-level-await module.","> you need to do this on loader level. `modulGraph.isAsync` returns `true` for any module that imports top-level-await module.\r\n\r\nI don't see how to use the loader interface to accomplish it at all.  You don't know where the TLAs are without parsing and you don't know which others import it until the whole graph is finished, right?\r\n\r\nThese imports also cannot be treated like any other dependency because then they'll be wrapped inside the async function.  They need to be in the module scope.\r\n","Let's keep open if sombody wants to improve it, right now I think we need to output a warning for our users to prevent some problems on production (when you have lower the `target` option)"],"labels":["enhancement","Send a PR"]},{"title":"creating the runtime requirements in the ModuleFederationPlugin","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n#11691 \r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nCreating the Runtime Requirements in the Module Federation Plugin.js (which was lacked earlier so that runtimeChunk wont remain vacate)\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\nFeature \r\n**Did you add tests for your changes?**\r\nNo\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNO\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nYes ModuleFederationPlugin updation needs to be documented\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","@ScriptedAlchemy  I have implemented in this manner. Have a look!\r\n","@evilebottnawi @sokra  Plzzz review the PR and tell the required changes to be made ","<!-- identifier: tests-result -->\n\nIt looks like this Pull Request doesn't include [enough test cases](https:\/\/codecov.io\/gh\/webpack\/webpack\/compare\/ab555844701209492debf23cc3168a0efafb3251...83656acf5a3da9af5ae1e94ea395f32948e8bd1b) (based on Code Coverage analysis of the PR diff).\n\nA PR need to be covered by tests if you add a new feature (we want to make sure that your feature is working) or if you fix a bug (we want to make sure that we don't run into a regression in future).\n\n@Cronus1007 Please check if this is appliable to your PR and if you can add more test cases.\n\nRead the [test readme](https:\/\/github.com\/webpack\/webpack\/blob\/master\/test\/README.md) for details how to write test cases.","cc @evilebottnawi  @sokra  @ScriptedAlchemy  @snitin315 ","Looks good to me but I'll leave it to @evilebottnawi @sokra who are familiar with intersecting running connections ","cc @evilebottnawi  @sokra ","Looking forward to this merged \ud83d\udc40","I love this","@ScriptedAlchemy  @v-anton  Actually I am waiting for @sokra  @evilebottnawi  to review the PR once.","So apparently you can use \r\n\r\n`\r\n```entry: {\r\n{\r\n  main: {\r\n    import: \".\/main.js\",\r\n    runtime: \"someRuntime\"\r\n  }\r\n}\r\n```\r\n\r\nWhich in theory lets you do something to webpack runtimes, has anyone ever tried this before?","how is `enablingRuntimeRequirements` called? attempting this in a normal plugin didn't work","@ScriptedAlchemy Here the end user have to call the class and then call the `enablingRuntimeRequirements`. This mathod has been provided as an optional if the end user is willing to do it.","@ScriptedAlchemy @Cronus1007 can  https:\/\/github.com\/module-federation\/module-federation-examples\/issues\/646 be related to this.\r\nif yes is there an alternate in the meantime this PR is waiting for approval?\r\nThanks for the help","Are there still plans to merge in these changes? Would love to be able to set `runtimeChunk: 'single'` back into the project along with module federation.","> Are there still plans to merge in these changes? Would love to be able to set `runtimeChunk: 'single'` back into the project along with module federation.\r\n\r\n@tingc10 check https:\/\/github.com\/module-federation\/module-federation-examples\/issues\/646#issuecomment-767132370 in the mean time as workaround if it resolves your issue","I was using a \"merge runtime\" plugin which concatinated the remote container and the webpack runtime together ","Nice feature, looking forward to this merged ","Hi, Are there still plans to merge in these changes? ","Not required. Use runtime:false in federation plugin "],"labels":["PR: unreviewed","PR: conflict"]},{"title":"allow to use non-eager shared and remote modules in the initial page load","body":"* bundle will become async to load the required remotes and chunks\r\n* fix a bug with circular remote module loading\r\n* fix duplicate remote and shared runtime module when using plugin multiple times\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nfeature, bugfix\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nyes\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nno. This caused an error before.\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nUsing shared modules in initial chunks is now possible, but this will delay bootstraping of the application until all remotes and the shared modules are loaded. For performance reasons this should be avoided if possible.\r\n\r\nCurrently the performance is lacking behind what's possible: (need to be improved in further PRs)\r\n* Shared and remote modules are loaded sequencially instead of in parallel\r\n* When using a single runtime chunk, all remote and shared modules for all entrypoints are loaded.\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [x] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","works on example repos, but errors out on something like a next.js build. \r\n\r\nhttps:\/\/github.com\/ScriptedAlchemy\/nextv5\r\n\r\nLooks like it might not cater for multiple entrypoints? ","This resolves most cases IMO, with requiring import(bootstrap) no longer a most\n\nI do see some edge cases \/ challenges with entry point loaders where multiple entry points are used over a code splitting. (Next.js) \n\n","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","@sokra in order to make this work with multi-entrypoints. \r\n\r\nWould we need to add some startup requirements to single entry points we well? \r\nIn cases where runtimeChunk: single exists, when the chunk is pushed into webpack, we would need a form of startup module. Correct? "],"labels":["PR: unreviewed","PR: conflict"]},{"title":"Module federation: internal async boundary","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\nPosting here for visibility @sokra \r\n\r\nProjects that work synchronously, like next.js - cause problems with sharing vendor code. Since next has no async boundary internally to pause execution while container negotiations take place between runtimes. \r\n\r\nTo solve this, we change the webpack runtime startup to prevent base app boot till sharing is resolved. \r\n\r\n**What is the expected behavior?**\r\nI want to use federated imports without requiring a async import above the modules I'm planning to share which are static imports. \r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nIt's inconvenient and unreliable waiting on third parties to get with the program and update projects to be async. \r\n\r\nMore users will be able to use MF regardless of framework limitations by delegating the responsibility to webpack runtime directly. \r\n\r\n**How should this be implemented in your opinion?**\r\nQuoting @sokra :\r\n\r\nWe modify `StartupEntrypointRuntimeModule` to work similar to `ShareRuntimeModule`. \r\n\r\n**Are you willing to work on this yourself?**\r\nHell yes\r\n\r\nFork and relevant branch https:\/\/github.com\/ScriptedAlchemy\/webpack\/pull\/5\r\nPlayground for testing: https:\/\/github.com\/ScriptedAlchemy\/webpack-federation-playground\r\nThis is work in progress","comments":["Any progress on this?\r\n\r\nI very much looking forward to building federated next.js application.","This was too complex to implement last we tried. ","Do we have any updates on this? I am very much looking to build next federated apps too.","I created a plugin called nextjs-MF which solves the problem for nextjs ","Thanks Zack. I believe [nextjs-mf](https:\/\/github.com\/module-federation\/nextjs-mf#readme) works great for CSR, but doesn't support SSR apps. For SSR, the only workaround I've seen is [this one](https:\/\/github.com\/module-federation\/module-federation-examples\/tree\/master\/nextjs-ssr) which uses [telenkos' package](https:\/\/github.com\/telenko\/node-mf)","I have others which are not publicly available. You can use fetch() and post to have remotes SSR themselves inside a next\/dynamic instance server side","any updates on this problem?","> any updates on this problem?\n\nToo complex if I remember correctly ","Do you plan to continue working here?","No plans to continue working on this problem. ","@ScriptedAlchemy @sokra hi, i would like to revive this topic, after few days debugging the whole sharing modules i think we can do some changes to make sync works\r\n\r\nbasically the main problem is\r\n![Screenshot from 2022-01-24 02-54-24](https:\/\/user-images.githubusercontent.com\/86263126\/150714473-9b8b7a0c-f5f6-476b-9e56-8eafcaae084e.png)\r\n\r\nwhen we do the initial load and we try to load shared dependencies, like react in this example, this is trying to call the next code\r\n\r\n`\"webpack\/sharing\/consume\/default\/react\/react\": () => (loadSingletonFallback(\"default\", \"react\", () => (__webpack_require__.e(\"vendors-node_modules_react_index_js\").then(() => (() => (__webpack_require__(\/*! react *\/ \".\/node_modules\/react\/index.js\"))))))),`\r\n\r\nlogically this is wrong because, in the initial load we should not wait for the chunk, instead of that, dependencies should be loaded and stored in cache and when this be required by chunks we should be able to read the cache to get the references,\r\n\r\nthe second things is that this should be considered a cascade imports\r\n\r\n![Screenshot from 2022-01-24 03-04-56](https:\/\/user-images.githubusercontent.com\/86263126\/150715649-cec13217-e8ed-4349-a949-2d7a0f58a013.png)\r\n\r\ni was trying to fix it but im not very involved in the core of react, but after debugging this im thinking that the fix should not be too complicated to make MF be able to work in `sync` mode, and can be optional with props to keep original functionality like is actually,\r\n\r\nthe reason that MF works async is because primitive dependencies (from node_modules) are already loaded, but this doesnt make sense if from the beginning we dont have access to them, basically the `HOST` must have it loaded but the logic should not require to have `eager` enabled, this can be refactored to works in a better way to support scenarios like\r\n\r\nscenario1: HOST1 -----> HOST2 ------> PLUGINS\r\nscenario2: HOST1 -----> PLUGINS\r\n\r\nwhat we should check if in the initial load shared dependencies arent loaded, should be loaded\r\n\r\nwhen we works based on the shared we should consider that the `HOST` should provide these shared dependencies to keep some armony between dependencies\r\n\r\nthe main file where the problem i think is located is this one\r\n\r\n`\/webpack\/lib\/sharing\/ConsumeSharedRuntimeModule.js`","I believe the problem becomes that in order for webpack to attempt to negotiate what version of react to use, since it's a singleton, it would require loading the remotes to know which version of a dependency should be consumed, and these dependencies are usually only discovered by executing the application. If it's possible to do, I'm all ears. \n\nBut it does present a challenge to start an application if the dependencies are not hoisted and frontloaded asynchronously. \n\nI believe there is a workaround that if you use shareKey and import, and give the object some key other than react, like fakeReact: it won't move out of the graph into another chunk. However you are then in host only mode, similar to eager:true ","was thinking that and its true, the main problem is webpack and how he negotiate the shared resources, and thats why im suggesting it, and about versions can be designed in the way that we can store the versions also, and if the shared that is expecting the child MF plugin or the chunk is not there, we can implement a way to continue loading it in the current way getting this from `node_modules`\r\n\r\nat high level should be like this\r\nUser Story\r\nAPP (entry point, chunk1, chunk2) and will load as MF (plugin1)\r\nconfig = react will be singleton\r\n\r\nhow webpack should manage this complex scenario in sync way\r\n\r\nsomething like this\r\n![image (53)](https:\/\/user-images.githubusercontent.com\/86263126\/150754303-3857de44-62fe-489f-a426-d4adbf4d7b02.png)\r\n\r\n"," webpack load process and negotiations should be based on tree logic, the first one that loads a shared dependency can be considered the host when this is configured as singleton, and works based on cache, if a MF plugin or chunk or anything else is trying to load a shared library and the version dont match, should load it and store it in the cache and keep the same flow\r\n\r\nin any case if u want to use same resource across the whole execution this should keep using `requiredVersion: false` and also, this can solve the problem about run the whole stuff in sync way and finally remove the bootstrap hack way that is being used to make it works\r\n\r\n```\r\nBut it does present a challenge to start an application if the dependencies are not hoisted and frontloaded asynchronously.\r\n\r\nI believe there is a workaround that if you use shareKey and import, and give the object some key other than react, like fakeReact: it won't move out of the graph into another chunk. However you are then in host only mode, similar to eager:true\r\n```\r\nif a shared resource is remote, we can detect it and also we could add new attributes in webpack config to make it explicit,\r\nbut to be honest shared singleton shouldnt be remote, for remote we have explicitly `remotes` \r\n\r\n ```\r\nnew ModuleFederationPlugin({\r\n      name: \"app1\",\r\n      filename: \"remoteEntry.js\",\r\n      remotes: {\r\n        app2: \"app2@http:\/\/localhost:3005\/remoteEntry.js\",\r\n      },\r\n      exposes: {\r\n        \".\/Button\": \".\/src\/Button\",\r\n      },\r\n      \/\/ sharing code based on the installed version, to allow for multiple vendors with different versions\r\n      shared: [\r\n        {\r\n          react: { singleton: true, requiredVersion: false },\r\n          \"react-dom\": { singleton: true, requiredVersion: false },\r\n          \"react-redux\": { singleton: true, requiredVersion: false },\r\n        },\r\n      ],\r\n    })\r\n```\r\n\r\n\r\nhopefully this makes sense, sadly i still reading webpack to try be able to help, but the logic and negotiations i think is pretty clear\r\n\r\ni updated this project just in case https:\/\/github.com\/crodriguez-plitzi\/webpack-federation-playground","So it is not possible to federate modules from nextJS CSR without a plugin at all? What about sidecar (sub-app) that Jack showed in his video?","> So it is not possible to federate modules from nextJS CSR without a plugin at all? What about sidecar (sub-app) that Jack showed in his video?\n\nIt's possible, I maintain both SSR and CSR implementations. \n\nSidecars work and are free - but I know it can sometimes be a little tricky to get shared modules on next.js via sidecars sometimes, that can be worked around tho "],"labels":["enhancement","webpack-5","module-federation"]},{"title":"[#11670] Adds a warning about incorrect use of HMR chunks","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nThis update is related to the discussion in https:\/\/github.com\/webpack\/webpack\/issues\/11670. When a user generates his HTML template himself, and takes from Webpack stats the names of generated JS chunks to inject them into his HTML, it is easy to overlook that with HMR enabled in development mode the generated `xxx.hot-update.js` chunks will be also listed in the stats alongside the regular JS chunks, and should not be injected into HTML explicitly. If user overlooks it, the issue will be invisible until HMR is enabled, some updates are done, and then something (_e.g._ re-loading the page) injects `xxx.hot-update.js` scripts directly. When that happens, it leads to very obscure errors inside Wepback HMR code.\r\n\r\nThis update adds a simple check to the beginning of each generated `xxx.hot-update.js` chunk. It checks the chunk was loaded with `<script data-webpack=\"...\" src=\"...\"><\/script>`, as expected from the Webpack HMR machinery. If it is not the case, it throws error right away, resulting in a clearer error message, than would happen otherwise.\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nSmall internal update.\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNo.\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo.\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNothing.\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon."],"labels":["PR: CI-ok","PR: unreviewed"]},{"title":"Watcher issue on Window's short paths like C:\\PROGRA~1\\","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nI'm an author of the fork-ts-checker-webpack-plugin and I noticed that behavior in my recent PR: https:\/\/github.com\/TypeStrong\/fork-ts-checker-webpack-plugin\/pull\/516\/files.\r\n\r\nWhen I navigate to a path using MS-DOS compatible path (for example temp directory on GitHub Actions on Windows image - `C:\\Users\\RUNNER~1\\AppData\\Local\\Temp\\`), and I add a directory to the `compilation.contextDependencies` (for example `C:\\Users\\RUNNER~1\\AppData\\Local\\Temp\\my-app\\src`), webpack will trigger unnecessary rebuilds. I checked `compiler.modifiedFiles` and `compiler.removedFiles` and they randomly contain `C:\\Users\\RUNNER~1\\AppData\\Local\\Temp\\my-app\\src` directory (which shouldn't be the case - there should be only files). \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n1. Copy webpack project to `C:\\Program Files\\my-app`\r\n2. Add a hook that will add `path.join(process.cwd, 'src')` to `compilation.contextDependencies`\r\n3. Run webpack in a watch mode with CWD = `C:\\PROGRA~1\\my-app`\r\n4. Add\/update\/delete some files in `C:\\Program Files\\my-app\\src` and debug `compiler.modifiedFiles` and `compiler.removedFiles` Set\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nAs in webpack 4, the watcher should not trigger unnecessary rebuild and report directory as changed or removed file.\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.1.0\r\nNode.js version: 10\r\nOperating System: Windows 10\r\nAdditional tools:\r\n","comments":["I don't understand the problem. If you add `src` as `contextDependency` it will report `src` as changed once anything in `src` changes. And this also triggers a rebuild.\r\n`modifiedFiles` will only list entries of `fileDependencies` or `contextDependencies`. It will not list the file changed if this is not a direct dependency.","I would expect that `modifiedFiles` and `removedFiles` contains a list of files - not directories. And that's the case on Linux, Mac, and Windows with normal paths, but not on Windows with MS-DOS compatible paths. It seems like related to https:\/\/github.com\/webpack\/watchpack\/issues\/130","@piotr-oles how it is related to chokidar?","@evilebottnawi I didn't notice such an issue with webpack 4 which AFAIK uses chokidar as a low-level watching library. But I don't know if that's the source of the issue.","@piotr-oles \r\n\r\n> modifiedFiles will only list entries of fileDependencies or contextDependencies.\r\n\r\nExpected, what do you want?","As I said above, it works differently on Linux and Mac OS. If it's expected, then the name \u2019modifiedFiles\u2019 is misleading :)","@piotr-oles What is work differently? Yes, it is some misleading ","I tried running the watchpack test suite within a 8.3 folder and there where no problems.\r\n\r\n> If it's expected, then the name \u2019modifiedFiles\u2019 is misleading :)\r\n\r\nyes maybe it's a bit off.\r\n\r\n> As I said above, it works differently on Linux and Mac OS\r\n\r\nIt should not do that.","But I really noticied a small difference when using 8.3 names. It reports `C:\\PROGRA~1` as removed as it wasn't able to find the folder with readdir...","Yes, there is something off with 8.3 names. I resolved an 8.3 path using `fs.resolveSync.native` in my tests as a CWD for the spawned webpack process and now they pass :)","@piotr-oles so we can close it?","It's up to you. The problem still exists, but I was able to do a workaround :)","@piotr-oles please describe what you expected, because \r\n\r\n> As I said above, it works differently on Linux and Mac OS\r\n\r\nIt should not do that.","> I resolved an 8.3 path using `fs.resolveSync.native` in my tests\r\n\r\nHow did you do that exactly? I wasn't able to find `fs.resolveSync.native`?","ah it's `fs.realpathSync.native`","Yep, sorry for the wrong function :)","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","still valid","bump"],"labels":["bug","webpack-5"]},{"title":"Generation of empty JS file in output folder from CSS only entry point","body":"# Bug report\r\nMy assumption was that with webpack 5 CSS only entry points don't generate a .JS file or that `optimization.removeEmptyChunks` removes the empty files\r\n\r\n**What is the current behavior?**\r\nCSS only entry points generate empty .JS file in output folder.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nTest repo:\r\nhttps:\/\/github.com\/martinherweg\/webpack-css-chunks\r\n\r\nClone repo, `npm install` and `npm run webpack`\r\n\r\n**What is the expected behavior?**\r\nNo empty .JS file in output folder\r\n\r\n**Other relevant information:**\r\nwebpack version:  5.1.0\r\nNode.js version: 10.16.3\r\nOperating System: Mac OS Catalina\r\n\r\nAdditional note:\r\nBehaviour was discussed with @evilebottnawi in https:\/\/github.com\/webpack\/webpack\/issues\/7300 he suggested it being a bug and creating a new issue.\r\n\r\nThanks for your work.\r\n\r\n---\r\n\r\nNotes (need fix too):\r\n\r\n```js\r\n'use strict';\r\n\r\nconst path = require('path');\r\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\r\n\r\nmodule.exports = {\r\n  mode: 'development',\r\n  output: {\r\n    path: path.resolve('.\/dist'),\r\n    filename: '[name].css'\r\n  },\r\n  stats: {\r\n    children: true\r\n  },\r\n  name: 'scss',\r\n  entry: {\r\n    file1: path.resolve('.\/test1.scss'),\r\n    file2: path.resolve('.\/test2.scss')\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: \/(.)*\\.scss$\/,\r\n        use: [\r\n          MiniCssExtractPlugin.loader,\r\n          'css-loader',\r\n          'postcss-loader',\r\n          {\r\n            loader: 'sass-loader',\r\n            options: {\r\n              implementation: require('node-sass'),\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  plugins: [\r\n    new MiniCssExtractPlugin()\r\n  ]\r\n};\r\n```\r\n\r\nAlso not working because due `Multiple assets emit different content to the same filename`","comments":["\/cc @sokra ","Gosh, how hard can it be to fix this","This issue exists for years now. See https:\/\/github.com\/webpack-contrib\/mini-css-extract-plugin\/issues\/151\r\nPlease fix, please!!!","Any update?","Please fix this issue","Dear community, what's the current workaround until this is fixed?","> what's the current workaround\r\n\r\nI think it's https:\/\/github.com\/webdiscus\/webpack-remove-empty-scripts but I have not personally tried it.","I just made a discovery while playing with webpack options:\r\n\r\nhttps:\/\/github.com\/webpack\/webpack\/issues\/7300#issuecomment-813365409\r\n\r\nIt turns out, \r\n\r\n> Using test: \/\\.(sa|sc|c)ss$\/ in the chunk configuration does emit the js file besides the css file.\r\n> Removing that and using type: 'css\/mini-extract' instead stops emitting the js file and only emits the css file.\r\n\r\nAnd I'm said that...\r\n\r\n> type was implement for this, test doesn't know which modules should be dropped, it is right solution","Still having the same issue.\r\n\r\nAn empty js file is output when the entry has a css file, no matter what I try to configure it with.\r\n\r\nFrom skimming all the comments, it seems to work if you move the css entries into a js file.\r\nNot quite suitable for my project, but it seems better than using plugins or a non-webpack workaround to prevent it.\r\n\r\nI'd love to see this fixed, and seemingly many others that have had (and still have) the same issue over the years :heart: ","I managed to get it to work with this plugin: https:\/\/github.com\/webdiscus\/webpack-remove-empty-scripts","> I just made a discovery while playing with webpack options:\r\n> \r\n> [#7300 (comment)](https:\/\/github.com\/webpack\/webpack\/issues\/7300#issuecomment-813365409)\r\n> \r\n> It turns out,\r\n> \r\n> > Using test: \/.(sa|sc|c)ss$\/ in the chunk configuration does emit the js file besides the css file.\r\n> > Removing that and using type: 'css\/mini-extract' instead stops emitting the js file and only emits the css file.\r\n> \r\n> And I'm said that...\r\n> \r\n> > type was implement for this, test doesn't know which modules should be dropped, it is right solution\r\n\r\nI tried adding a `styles` cache group in my config with `\"type\": \"css\/mini-extract\"` and it didn't stop the `.js` files from being emitted, so that can't be the solution. It also combines all my CSS into one file, which I also don't want (I have many CSS entry points which are referenced in different places). Oddly, even though it combines all the CSS into one `styles.css` file, the `.js` files all matched the entry point names like the CSS ones do without the cache group.\r\n\r\nThe only way I've been able to prevent this from happening is either A. create my own simple plugin to find matching `.js` files for `.css` files (seems hacky) or B. to use the `webpack-remove-empty-scripts` plugin. The latter solution works well, but it's yet another dependency that has to be maintained and that could break in the future.\r\n\r\nIt'd be nice if this was just fixed in either `webpack` or `mini-css-extract-plugin`...","Any news regarding this issue? It's pretty frustrating :)","i am also running into the same issue. The issue can be seen in https:\/\/github.com\/rvramesh\/empty-js-webpack-repo\r\n\r\nSteps\r\n\r\n- Clone the repo\r\n- execute npm run build\r\n- In the dist folder we see main.js which is empty and I don't expect the file to be there.\r\n\r\nPlease let me know if I am missing something."],"labels":["bug","enhancement","webpack-5"]},{"title":"Consider to add `error.code` to all internal webpack errors.","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\nMake error identification more simple via `error.code`.\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen an error occurs, then provide to the community a fast way to find \r\n- solutions in StackOverflow\r\n- discussions in issues\r\n- and places in the source\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nI met with 5 or 6 errors while playing with module federation. And finding a solution was quite hard.\r\n\r\nThe last cryptic error was\r\n\r\n<img width=\"1100\" alt=\"Screen Shot 2020-10-08 at 22 08 34\" src=\"https:\/\/user-images.githubusercontent.com\/1946920\/95747675-a369c380-0cba-11eb-9b73-615870659a9d.png\">\r\n\r\nYep, right now, it pinned in the issue list. Anyway, a lot of people will not notice it. More new errors will come in the future. And with most webpack errors is quite hard to find a correct phrase for googling or searching in issues.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nIf an `error` object has a `code` WP1055, then in that place where the error is printing can be automatically added links.\r\nFor example:\r\n```diff\r\n- ERROR in .\/node_modules\/@babel\/runtime-corejs3\/helpers\/esm\/defineProperty.js 1:0-74\r\n+ ERROR[WP1055] in .\/node_modules\/@babel\/runtime-corejs3\/helpers\/esm\/defineProperty.js 1:0-74\r\nModule not found: Error: Can't resolve '..\/..\/core-js\/object\/define-property' in 'xxx\\node_modules\\@babel\\runtime-corejs3\\helpers\\esm'\r\n @ .\/index.js 1:0-58\r\n+ Technical details: https:\/\/github.com\/webpack\/webpack\/search?q=WP1055&type=issues\r\n+ Solution&help: https:\/\/stackoverflow.com\/search?q=%5Bwebpack%5D+WP1055 \r\n```\r\n\r\nBenefits from error codes:\r\n- Faster way for error identification\r\n- Better work with the issue duplicates\r\n- Maybe in the future can be used for telemetry\r\n\r\n**Are you willing to work on this yourself?**\r\nNo. The decision & initial implementation can be made only by @sokra \r\n\r\nError codes should be unique. And for solving this problem - errors may have fixed prefixes for different webpack scopes eg. WP1xxx for ModuleGraph, WP2xxx for loaders, WP3xxx for cache, and so on. I don't know very well all webpack internals to suggest a good prefix schema. Besides this, it requires some additions to the contribution guide that all maintainers begin to follow this error code pattern.","comments":["<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["enhancement","inactive","webpack-5"]},{"title":"add __webpack_promise__","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\ncloses https:\/\/github.com\/webpack\/webpack\/issues\/3531\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNot yet\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nI think not.\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n\r\n#### 1. `__webpack_promise__`\r\n\r\nwebpack runtime code use `Promise` a lot which requires you to include a Promise polyfill for browsers without Promise support, e.g. IE 11, unfortunately that might pollute the browser environment causing problems for other libraries.\r\n\r\nWith `__webpack_promise__`, you can tell webpack to reuse the Promise library your code has imported, which would eliminate the pollution of the global scope.\r\n\r\nE.g., you can set `__webpack_promise__` in your code:\r\n\r\n```js\r\n__webpack_promise__ = require('bluebird')\r\n```\r\n\r\n#### 2. `output.environment.promise`","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: review-outdated -->\n\n@chenxsan Thanks for your update.\n\nI labeled the Pull Request so reviewers will review it again.\n\n@sokra Please review the new changes.","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","I think we need update this in `mini-css-extract-plugin` too","We should pulling `__webpack_promise__` in worker scope too, otherwise we can't solve https:\/\/github.com\/webpack\/webpack\/issues\/12877","Could we revive this PR?","Any movement on this? I ran into this with IE11 using web workers just like the scenario described in https:\/\/github.com\/webpack\/webpack\/issues\/12877. I'm using the suggested workaround but it would be great to handle this via `__webpack_promise__`.\r\n\r\nHappy to help if there are tests\/fixes\/conflicts"],"labels":["PR: CI-ok","PR: review-outdated","PR: conflict"]},{"title":"Webpack Manifest Plugin","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues that contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature needs to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\nDocs about manifest for webpack  https:\/\/webpack.js.org\/guides\/output-management\/#the-manifest says:\r\n\r\n>The manifest data can be extracted into a json file for easy consumption using the\u00a0WebpackManifestPlugin.\r\n\r\nBut \r\nhttps:\/\/github.com\/danethurber\/webpack-manifest-plugin\r\nhttps:\/\/www.npmjs.com\/package\/webpack-manifest-plugin\r\n\r\nwas deprecated by the author\r\n\r\nMost likely this plugin will stop working with webpack 5:\r\nhttps:\/\/github.com\/danethurber\/webpack-manifest-plugin\/issues\/186\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\nmany developers use this plugin:\r\nhttps:\/\/www.npmtrends.com\/webpack-manifest-plugin (2.6M per week)\r\n\r\n\r\n**How should this be implemented in your opinion?**\r\ncreate `webpack-manifest-plugin` by `webpack` or `webpack-contrib` organization\r\n\r\n\r\n**Are you willing to work on this yourself?**\r\nmaybe\r\n","comments":["We have `stats` and you can get information from stats, why do not use `stats`?","@pustovalov I am guessing you will still be able to use https:\/\/github.com\/webdeveric\/webpack-assets-manifest in place of `webpack-manifest-plugin` if you prefer to, no?","@rkumorek at the moment I'm using https:\/\/github.com\/webdeveric\/webpack-assets-manifest like as a third level dependency. \r\n\r\nBut there are some problems with that package and I have been waiting for a response from the author for almost a year\r\nhttps:\/\/github.com\/webdeveric\/webpack-assets-manifest\/pull\/59\r\n\r\n>We have stats and you can get information from stats, why do not use stats?\r\n\r\n@evilebottnawi thx for your answer, I will check if that functionality can be achieved by using `stats`","\/cc @danethurber just interesting, why is it deprecated? ","@evilebottnawi lack of support\/maintenance mostly. i haven't contributed since 2016 and the other people that were involved are not longer around. I have no plans to maintain the project going further","re: `stats`, I found it extremely difficult to use it to get a mapping between output filename and input filename. If the output filename can be predicted ahead of time e.g. because it contains `[name]` then `assets` can be searched easily enough.\r\n\r\nIf the output filename is not uniquely predictable then the best I could come up with is to search `modules`, sometimes the module will have `.assets` populated with the filename and you're done. Sometimes you get a chunk id and can guess which of the `.files`\/`.auxilaryFiles` in said chunk is the right one but sometimes that is also non obvious. Sometimes you get neither `.assets` nor `.chunks`. Often plugins emit modules with more complicated names, e.g. `css .\/node_modules\/css-loader\/dist\/cjs.js!.\/example.css`. That is about where I gave up","I think we can improve stats for this, but it can require more time for this, because a lot of plugins and loaders don\u2019t return original names, anyway we need to solve this","> It's Back!\r\n> This repo was recently transferred and we're going to be giving the project a refresh. Please do continue to add your issues and pull requests and we'll get to them as soon as is possible. \ud83c\udf7b\r\n\r\n-- https:\/\/github.com\/shellscape\/webpack-manifest-plugin","\/cc @shellscape in long term we should have this abilities out of box, but we need improve some things, for example https:\/\/github.com\/webpack-contrib\/copy-webpack-plugin\/issues\/104, I can emit original filename (https:\/\/github.com\/webpack-contrib\/copy-webpack-plugin\/blob\/master\/src\/index.js#L480), so it will be easy to get original name on the plugins side","Yeah, would be good to have this mapping out of box. It's must have for ssr, also reduce custom code on plugin side. For example https:\/\/github.com\/jantimon\/html-webpack-plugin generate it for injecting assets.  ","SSR chunk mappings would be helpful. Especially with module federation, it would be nice to have a simple mapping that can be accessed. Stuff like webpack flush chunks is quite intense to track down chunks from stats. \r\n\r\nWe can also use startup code and have a remote container ship it\u2019s chunk correlation to other SSR hosts ","Any news on this one?","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","@alexander-akait did not get what is this issue about.. adding manifest like plugin to webpack core? could you explain? \r\n\r\nmaybe I would like to help here","@vankop like https:\/\/github.com\/shellscape\/webpack-manifest-plugin, we already have this in stats, but stats is not good fox DX, also `vite` have the same built-in plugin https:\/\/vitejs.dev\/guide\/backend-integration.html, I think we should allow to generate something the same"],"labels":["inactive"]},{"title":"support worklet","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n```js\r\n\/\/ Worklets are always modules\r\nmyAudioContext.audioWorklet.addModule('.\/audio-worklet.js')\r\nCSS.paintWorklet.addModule('.\/paint-worklet.js')\r\nCSS.layoutWorklet.addModule('.\/layout-worklet.js')\r\nCSS.animationWorklet.addModule('.\/animation-worklet.js')\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nWorking with `worklet`s out of box\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nWhy not?\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nLike `web workers`, maybe under options\r\n\r\n\r\n**Are you willing to work on this yourself?**\r\n\r\nNot right now\r\n","comments":["hm.. I think `parser.worker` should work here.. Since structure should be` <defined path>(new URL(...))`","> hm.. I think `parser.worker` should work here.. Since structure should be` <defined path>(new URL(...))`\r\n\r\nyep, expect for the audio worklet, that should work.","for \"base\" audio there is https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/BaseAudioContext\/audioWorklet\r\n\r\nfor custom thing there is a workaround to\r\nMyAwesomeWorker.js\r\n```\r\nexport default whateverWorker.a.b;\r\n```\r\n\r\nindex.js\r\n```\r\nimport Worker from \".\/MyAwesomeWorker\";\r\n\/\/ use Worker\r\n```\r\n\r\nin parser.worker => `[\"Worker from .\/MyAwesomeWorker\"]`","@vankop Maybe we can support it out of box as I written in the issue :smile: ","@evilebottnawi we can add this to defaults https:\/\/github.com\/webpack\/webpack\/blob\/master\/lib\/dependencies\/WorkerPlugin.js#L31\r\n\r\n@sokra approve?","Which stage is the worklet spec? Is this final or still a proposal?","`Working Draft` https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Worklet, but many used them already, maybe improving docs is enough or using `experimentals` \r\n\r\n\r\n","I've been trying to create a AudioWorklet with Webpack 5 for 3 hours and I cannot seem to find any way to make it work. Even by trying to add everything I could think of in `parser.worker`, nothing works. In some case the AudioWorklet file is imported as a normal JS file (and emit an error as the class `AudioWorkletProcessor` is not available in the main context), in other case the file is imported a a data URI with a video mimetype (is this the default?) and lastly, some time it throws this error:\r\n\r\n```\r\nUncaught (in promise) ReferenceError: importScripts is not defined\r\n    at Object.__webpack_require__.f.i (importScripts chunk loading:25)\r\n    at ensure chunk:6\r\n    at Array.reduce (<anonymous>)\r\n    at Function.__webpack_require__.e (ensure chunk:5)\r\n    at Function.__webpack_require__.x (startup chunk dependencies:3)\r\n    at startup:2\r\n    at startup:2\r\n```\r\n\r\nWith Webpack 4 I can use https:\/\/github.com\/reklawnos\/worklet-loader but it's not compatible with Webpack 5. It would be useful to have a modular way to indicate that we want to create a new JS chunk when importing and return this chunk URL instead of the actual JS import. For now, I'm going to stick with Webpack 4 as it seems that there is no way to use Worklets with Webpack 5.","@geekuillaume Can you provide reproducible test repo? ","My bad, worklet-loader is working with Webpack 5 (with some deprecation warnings).","@geekuillaume Anyway can you provide example of the problem, I want to fix it, we should avoid `worklet-loader` in future in favor built-in support","@evilebottnawi Here is the test case: https:\/\/github.com\/geekuillaume\/webpack-audioworklet-testcase\r\n\r\nIf you look at the console, you'll see this error:\r\n```\r\nUncaught DOMException: Failed to construct 'AudioWorkletNode': AudioWorkletNode cannot be created: AudioWorklet does not have a valid AudioWorkletGlobalScope. Load a script via audioWorklet.addModule() first.\r\n```\r\n\r\nThe `src\/audioworklet.js` file is not emitted as a new entrypoint. It is directly loaded in the main scope.","@geekuillaume Do you use `https` (stupid question :smile: )?","It is running on localhost, there is no protection about loading external module on local hosts. You can verify this as there is no warning or error in the console.","@geekuillaume Sorry you need https for this feature, try to use this feature without webpack - the same problem","@evilebottnawi My bad, there was an error in my code, I was not waiting for the promise returned by `addModule()`. It's working now (even in http when running on 127.0.0.1). I still need to find out why it's not working in my other project but as the build system is quite complex this can be because of a number of things unrelated to this issue.\r\n\r\nWe can close this issue but it would be great to document this in the webpack doc.","@geekuillaume Let's keep open, because we need to add tests and improve docs after this","If you use `new URL()` then it's treating the worklet as an asset, and the code is not bundled\/transpiled. That means you can't import other files and have them bundled with the worklet.  Is there a way to get around this?\r\n\r\nUsing `worket-loader`:\r\nhttps:\/\/codesandbox.io\/s\/webpack-v5-audio-worklet-89vy3?file=\/src\/index.js\r\n\r\nUsing `new URL()`:\r\nhttps:\/\/codesandbox.io\/s\/webpack-v5-audio-worklet-forked-3292t?file=\/src\/index.js\r\n\r\n(notice the 2nd example fails due to the `import` statement in the noise-generator.js file).\r\n","@skratchdot For this you need to specify `parser.worker`, so webpack can understand what it is not assets, it is entry point","> @skratchdot For this you need to specify `parser.worker`, so webpack can understand what it is not assets, it is entry point\r\n\r\nI don't know how to do that. I've tried a few things and keep seeing errors. When I try examples higher up in the thread I see `ReferenceError: AudioWorkletProcessor is not defined`. It would be nice if someone could modify this example:\r\nhttps:\/\/codesandbox.io\/s\/webpack-v5-audio-worklet-forked-3292t?file=\/src\/index.js\r\nto use `parser.worker` appropriately.","Yep, I will update example in the next future","Sorry for delay, I think should work:\r\n```js\r\n{\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: \/\\.js$\/,\r\n        parser: {\r\n          \/\/ For other use the same \r\n          worker: [\"CSS.paintWorklet.addModule()\", \"...\"]\r\n        }\r\n      }\r\n    ]\r\n  },\r\n}\r\n```\r\n\r\n@chenxsan I think we can create small guide for worklets on docs site","> Sorry for delay, I think should work:\r\n> \r\n> ```js\r\n> {\r\n>   module: {\r\n>     rules: [\r\n>       {\r\n>         test: \/\\.js$\/,\r\n>         parser: {\r\n>           \/\/ For other use the same \r\n>           worker: [\"CSS.paintWorklet.addModule()\", \"...\"]\r\n>         }\r\n>       }\r\n>     ]\r\n>   },\r\n> }\r\n> ```\r\n> \r\n\r\n@alexander-akait Sorry for a dumb question, but how would you specify an audio worklet parser.worker?","`myAudioContext.audioWorklet.addModule()` (`myAudioContext` depend on now you named audio context), maybe we should improve this like `[\"*.audioWorklet.addModule()\", \"...\"]`","Could somebody provide a complete example or link to some documentation please?","I just spent a day trying to get this to work with Webpack 5 with no luck:\r\n\r\n * the `parser.worker` hack did not do anything in my code (it's unclear to me how this parser thing works anyway - how does it deal with the params to `addModule`? Seems too magical for me. ). \r\n * the URL approach gives me a URL to an asset, but I'm unable to load it because it's an ESM module (`SyntaxError: Unexpected token 'export'`). \r\n\r\nSo for now I'm using https:\/\/github.com\/GoogleChromeLabs\/worker-plugin - which works as expected: \r\n\r\n```\r\nimport AudioWorklet from '!worker-plugin\/loader!.\/worklets\/recorder.worklet'\r\n```\r\n\r\ngives me a URL that I can use in `addModule`. \r\n\r\nThe only problem I have now is that `worker-plugin` uses a deprecated API: \r\n\r\n```\r\n(node:9662) [DEP_WEBPACK_COMPILATION_CACHE] DeprecationWarning: Compilation.cache was removed in favor of Compilation.getCache()\r\n````\r\nSo I guess that this is going to come back to haunt me at some point. So I'm really interested in the correct way to create and load an audio worklet with Webpack 5. ","@thovden please provide example how and what you try","@alexander-akait thanks for following up. \r\n\r\nI'm using Typescript, so I've made two example repos - one for Javascript and one for Typescript: \r\n\r\n* https:\/\/github.com\/thovden\/webpack-5-worklet-js\r\n* https:\/\/github.com\/thovden\/webpack-5-worklet-ts\r\n\r\nIn both examples I try to load the worklet using two strategies. **Strategy A** is creating a URL `new URL(\".\/recorder.worklet.js\", import.meta.url)`  and **Strategy B** tries to use the magic `parser.worker` approach. \r\n\r\nFor Javascript I'm able to get Strategy A (URL) to work (but not Strategy B (`parser.worker`)), for Typescript neither of them work - possibly because of extension issues. If you could have a quick look and comment on what the best approach would be I appreciate it. ","@thovden thanks, I will look at near future and give advises (maybe tomorrow)","Yep, we need improve our custom syntax, all works fine except `AudioContext`, because here `context` (or other name), webpack doesn't work with:\r\n```\r\nparser: {\r\n  worker: [\"context.audioWorklet.addModule()\", \"...\"],\r\n},\r\n```\r\n\r\n\/cc @sokra need advises ","Definitely interested in WebAudio context working with this as well. Tried a few hackeries by defining a custom class that would take the URL object into its constructor and defining it in the `parser.worker` ala \"Worker\" but to no avail. Seems like the `expr` is generated correctly in the handleWorker fun, but the output chunk is still an untranspiled \"asset\" file containing original code.  I am currently developing a massive commercial project based on Next.js, and would love to enable webpack 5, as compile times are so much better. Only blocker is the Audio Worklet bundling :\/","I'm still hitting this problem. I'm using <https:\/\/github.com\/GoogleChromeLabs\/worker-plugin> as a workaround, but that is causing other issues - using the `import \"!worker-plugin\/loader!.\/worklet...\"` syntax works within the same package, but across packages it does not due to the problems described in https:\/\/github.com\/jantimon\/html-webpack-plugin\/issues\/1451 (not using html-webpack-plugin, this problem is hitting on other plugins as well). This makes sense as the plugin will `require` webpack and will get another instance. Using a regular loader in the webpack config for `worker-loader` makes Webpack run out of memory. So I'm in a bit of a catch 22 here. \r\n\r\n**EDIT** - I got around the webpack loading issues with hoisting, but now my packages are not self contained, so it's not a permanent solution. \r\n\r\n@sokra @alexander-akait any thoughts on how to solve this in Webpack?","@thovden What is the problem, this problem only for worklet.","@alexander-akait  yes - the problem is for an audio worklet. I use the loader from `worker-plugin\/plugin` to generate a single worklet js file. ","@thovden yep `audio worklet` syntax is not supported right now, as workaround you can use multi compiler mode, we will improve it in future","Here is another workaround:\r\n\r\n1. Create a marker function in a separate file:\r\n\r\n``` js\r\n\/\/ modules\/audio-worklet\/index.js\r\nexport function AudioWorklet(url) { return url; }\r\n```\r\n\r\n2. Add this function to the parser rules:\r\n\r\n``` js\r\nmodule: {\r\n  parser: {\r\n    javascript: {\r\n      worker: [\"AudioWorklet from audio-worklet\", \"...\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n3. use this as flag to enable parsing for audio worklets:\r\n\r\n``` js\r\nimport { AudioWorklet } from \"audio-worklet\";\r\n\r\ncontext.audioWorklet.addModule(new AudioWorklet(new URL(\"worklet.js\", import.meta.url));\r\n```\r\n\r\nEDIT: fixed it","@sokra - Thanks for creating this project and for all your work!\r\n\r\nThis workaround does not seem to work.  I'm assuming it's because I'm not sure what to put for `\"...\"` (is that the actual syntax to use)?  Anyways, I've updated links to an example, inline below:\r\n\r\n> Here is another workaround:\r\n> \r\n>     1. Create a marker function in a separate file:\r\n> \r\n> \r\n> ```js\r\n> \/\/ modules\/audio-worklet\/index.js\r\n> export function AudioWorklet(url) { return url; }\r\n> ```\r\n\r\nhttps:\/\/codesandbox.io\/s\/webpack-v5-audio-worklet-forked-fv4z0?file=\/src\/audio-worklet.js:0-51\r\n\r\n> \r\n>     1. Add this function to the parser rules:\r\n> \r\n> \r\n> ```js\r\n> module: {\r\n>   parser: {\r\n>     javascript: {\r\n>       worker: [\"AudioWorklet() from audio-worklet\", \"...\"]\r\n>     }\r\n>   }\r\n> }\r\n> ```\r\n> \r\n\r\nhttps:\/\/codesandbox.io\/s\/webpack-v5-audio-worklet-forked-fv4z0?file=\/webpack.config.js:489-656\r\n\r\n>     1. use this as flag to enable parsing for audio worklets:\r\n> \r\n> \r\n> ```js\r\n> import { AudioWorklet } from \"audio-worklet\";\r\n> \r\n> context.audioWorklet.addModule(AudioWorklet(new URL(\"worklet.js\", import.meta.url));\r\n> ```\r\n\r\nhttps:\/\/codesandbox.io\/s\/webpack-v5-audio-worklet-forked-fv4z0?file=\/src\/index.js:0-48\r\nand\r\nhttps:\/\/codesandbox.io\/s\/webpack-v5-audio-worklet-forked-fv4z0?file=\/src\/index.js:120-231\r\n\r\nWhen I do the above, and hit:\r\nhttps:\/\/fv4z0.sse.codesandbox.io\/\r\n\r\nI click the \"start audio worklet\" button and don't hear any noise like I should.  The worklet it \"loads\" still has an import statement (and is not \"webpackified\"):\r\nhttps:\/\/fv4z0.sse.codesandbox.io\/9efe5e6ba9e625f72a48.js\r\n\r\n\r\n","When you write `import { AudioWorklet } from \".\/audio-worklet\";` you also need to write \r\n`worker: [\"AudioWorklet() from .\/audio-worklet\", \"...\"]`. That's why I recommended to create a package (or use resolve.alias).\r\n\r\nYour location of the parser options where incorrect. Either define it globally via `module.parser.javascript.worker` or in the rules via `module.rules[].parser.worker` (no `javascript` key).\r\n\r\nBut it still doesn't work. Seem to be a webpack bug. But it works with `new AudioWorklet`.\r\n\r\nHere is a working version:\r\n\r\nhttps:\/\/codesandbox.io\/s\/webpack-v5-audio-worklet-forked-spqvy\r\n\r\nI also fixed my comment above.","> Here is a working version:\r\n> \r\n> https:\/\/codesandbox.io\/s\/webpack-v5-audio-worklet-forked-spqvy\r\n> \r\n> I also fixed my comment above.\r\n\r\nThis is awesome!  Thanks again for all your work!  \ud83d\ude4f \ud83c\udf89","@sokra Thanks for all the work! Would it be possible to create an example with `module.rules[].parser.worker`? I am able to get it to work with `javascript`, but it fails due to how Next works with imports and globalscopes, so I have to define it in `next-babel-loader` config instead. I am using typescript.","Update: seems like importing any non-trivial packages (like lodash) or files into worklet processor files forces webpack to inject `installChunks` into the bundle, which uses `importScripts`, which is not available in WorkletGlobalScope.. This will result not only fail due to importScripts being non-existent, but also error `Uncaught TypeError: Cannot read property 'webpackChunk_N_E' of undefined`, which can be circumvented with `globalObject = (self || this || globalThis)`.\r\n\r\nI.e. importing complex code makes worklets unusable in webpack 5.\r\n\r\nEdit: Even if you are not importing anything, but using, for example, structures like ArrayBuffer and using babel (which is the instance with Next.js), it imports its own shims and helpers, causing the same issues.\r\n\r\nEdit 2: Here's the issue in full -> https:\/\/github.com\/vercel\/next.js\/issues\/24907","@thecynicalpaul I think your problem not related to this, webpack v5 is not supported AudioWorkers without workaround right now","> @thecynicalpaul I think your problem not related to this, webpack v5 is not supported AudioWorkers without workaround right now\r\n\r\n@alexander-akait are there any plans to work on its support? Or this out of scope for a long time?","@thecynicalpaul now we focused on ES modules code generation, we are on Node.js 12 and should start to migrate on ESMA modules everywhere","I am using `worker-plugin` as a workaround here. It has given me warnings\/errors under Webpack 5, but it has worked regardless.  The errors are:\r\n\r\n```\r\n ERROR (node:98924) [DEP_WEBPACK_COMPILATION_CACHE] DeprecationWarning: Compilation.cache was removed in favor of Compilation.getCache()\r\nERROR (node:98924) [DEP_WEBPACK_TEMPLATE_PATH_PLUGIN_REPLACE_PATH_VARIABLES_HASH] DeprecationWarning: [hash] is now [fullhash] (also consider using\r\n[chunkhash] or [contenthash], see documentation for details)\r\n```\r\n\r\nSome release after `5.24` the previous warnings disappears but the compilation stops with the following error: \r\n\r\n```\r\nThe 'compilation' argument must be an instance of Compilation\r\n```\r\n\r\nSo for others who are using Webpack 5 and needs Audioworklets that are a bit advanced (e.g., requires other modules) - current versions of Webpack + `worker-plugin` is broken. I've pinned version `5.24` and it works again for me. ","> I am using `worker-plugin` as a workaround here. It has given me warnings\/errors under Webpack 5, but it has worked. Some release after `5.24` the previous warnings disappears but the compilation stops with the following error:\r\n> \r\n> ```\r\n> The 'compilation' argument must be an instance of Compilation\r\n> ```\r\n> \r\n> So for others who are using Webpack 5 and needs Audioworklets that are a bit advanced (e.g., requires other modules) - current versions of Webpack + `worker-plugin` is broken. I've pinned version `5.24` and it works again for me.\r\n\r\nThat's good to hear that there is some sort of way. Unfortunately for me, I am using [Next.js](vercel\/next.js) and they are bundling webpack together with their code, and I don't really know what they do to it, but even older versions of webpack 5 don't work with `worker-plugin`.","@alexander-akait Sorry to be a sore spot, but is there any way at all to disable splitting chunks for workers specifically? Along the lines of what `worker-plugin` used to do? With the latest webpack 5 update, everything works flawlessly in dev, but once production build kicks in, vendor and common chunks fly into their own bundles and that's when `importScripts` happens.","@thecynicalpaul Why do you need disable this?","> @thecynicalpaul Why do you need disable this?\r\n\r\n@alexander-akait We are utilizing Audio Worklets with a few imports, and these don't support `importScripts`, or any kind of import for that matter.","I created a simple workaround:\r\n`npm i --save-dev worker-url`\r\n\r\n**webpack.config.js**\r\n\r\n```js\r\nconst WorkerUrlPlugin = require('worker-url\/plugin');\r\n\r\nmodule.exports = {\r\n  plugins: [\r\n    new WorkerUrlPlugin(),\r\n  ],\r\n};\r\n```\r\n**index.js**\r\n\r\n```js\r\nconst { WorkerUrl } = require('worker-url');\r\n\r\nconst workerUrl = new WorkerUrl(new URL('.\/worker.js', import.meta.url), {\r\n  name: 'worker',\r\n});\r\nconst worker = new Worker(workerUrl);\r\n\r\nconst workletUrl = new WorkerUrl(new URL('.\/worklet.js', import.meta.url), {\r\n  name: 'worklet',\r\n});\r\naudioContext.audioWorklet.addModule(workletUrl);\r\n```\r\n\r\nSee:\r\nhttps:\/\/github.com\/popelenkow\/worker-url","Thanks a lot @popelenkow! I can confirm that your plugin works for my use case (audioworket written in Typescript, transpiled to ESM module - see discussion above in this thread) and I can now get rid of the Google  `worker-plugin` (which uses deprecated webpack APIs)","@popelenkow That looks great, thanks. Would you be able to provide an example `next.config.js` along with this?","For the TypeScript case I'm missing some configuration step: My audio worklet ends up in the output \/dist directory as a TypeScript file, e.g., 48bb04d451bf2b731278.ts (types have been stripped out but hasn't been minified). And the main program tries to load it with that name (i.e., including the \".ts\" extension) which obviously doesn't succeed.\r\n@thovden?","@ctrlaltdavid here's the snippet I use in my Typescript file. I refer to a `.js` so there's some magic going on here that I don't fully understand. I'm using `ts-loader` so perhaps that + the @popelenkow plugin will create an intermediate `.js` that will resolve fine here. Not sure. Anyway - this is how I create the worklet URL. \r\n\r\n```\r\n    const workletUrl = new WorkerUrl(new URL('.\/worklets\/recorder.worklet.js', import.meta.url), {\r\n      name: 'recorder',\r\n    })\r\n```\r\n\r\n`.\/worklets\/recorder.worklet.js` does not exist on disk, `.\/worklets\/recorder.worklet.ts` does. ","Thanks very much, @thovden! That should help point me in the right direction.","I published a minor release.\r\n`npm i --save-dev worker-url`\r\n\r\nAdded typescript file to readme:\r\n**index.ts**\r\n```js\r\nimport { WorkerUrl } from 'worker-url';\r\n\r\nconst workerUrl = new WorkerUrl(new URL('.\/worker.ts', import.meta.url), {\r\n  name: 'worker',\r\n});\r\nconst worker = new Worker(workerUrl);\r\n\r\nconst workletUrl = new WorkerUrl(new URL('.\/worklet.ts', import.meta.url), {\r\n  name: 'worklet',\r\n});\r\naudioContext.audioWorklet.addModule(workletUrl);\r\n```\r\n\r\nThe repository now has examples:\r\nDemo | Source\r\n--- | ---\r\n[JS WorkerUrl](https:\/\/popelenkow.github.io\/worker-url\/js\/) | [.\/js](https:\/\/github.com\/popelenkow\/worker-url\/tree\/main\/examples\/js\/)\r\n[TS WorkerUrl](https:\/\/popelenkow.github.io\/worker-url\/ts\/) | [.\/ts](https:\/\/github.com\/popelenkow\/worker-url\/tree\/main\/examples\/ts\/)\r\n\r\nAdded runtime routing with `customPath`:\r\n**index.ts**\r\n```js\r\nconst workerUrl = new WorkerUrl(new URL('.\/worker.ts', import.meta.url), {\r\n  name: 'worker',\r\n   \/\/ Override original url\r\n  customPath: () => {\r\n    \/\/ Use any code\r\n    return new URL('worker.js', window.location.href);\r\n  },\r\n});\r\n```\r\n\r\nSee:\r\nhttps:\/\/github.com\/popelenkow\/worker-url","> Here is another workaround:\r\n> \r\n> 1. Create a marker function in a separate file:\r\n> \r\n> ```js\r\n> \/\/ modules\/audio-worklet\/index.js\r\n> export function AudioWorklet(url) { return url; }\r\n> ```\r\n> \r\n> 1. Add this function to the parser rules:\r\n> \r\n> ```js\r\n> module: {\r\n>   parser: {\r\n>     javascript: {\r\n>       worker: [\"AudioWorklet from audio-worklet\", \"...\"]\r\n>     }\r\n>   }\r\n> }\r\n> ```\r\n> \r\n> 1. use this as flag to enable parsing for audio worklets:\r\n> \r\n> ```js\r\n> import { AudioWorklet } from \"audio-worklet\";\r\n> \r\n> context.audioWorklet.addModule(new AudioWorklet(new URL(\"worklet.js\", import.meta.url));\r\n> ```\r\n> \r\n> EDIT: fixed it\r\n\r\n@sokra It seems this workaround is not working with next.js middleware https:\/\/github.com\/vercel\/next.js\/issues\/30646 any recommonedation on how to solve it? I suspect it's due to the target being `web` which results in `document` not being available when the middleware runs.","Is there a way to get the AudioWorklet working on webpack 4? I'm trying with the [worker-plugin package](https:\/\/github.com\/GoogleChromeLabs\/worker-plugin) but can't get anything working","I'm at my wits' end here too: I've tried all the solutions above, and can get things _mostly_ working. However, I hit the snag many others have mentioned here: any non-trivial `import` in my audio worklet causes webpack to use `self` in `installScripts()` and that's just not defined in the audio worklet world.\r\n\r\n@thecynicalpaul were you able to find a way to prevent chunking or similar happening just for the worklets, or do you have another workaround?","Same as @mattgodbolt (I think) -- when I use the `worker-url` solution provided by @popelenkow above (https:\/\/github.com\/webpack\/webpack\/issues\/11543#issuecomment-927374737), `WorkerUrl()` does compile\/bundle my audio worklet processor as a separate resource and returns a URL I can pass to `context.audioWorklet.addModule(url)`, but I get a runtime error about `self`:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/51939\/148299968-55e729de-171e-46a3-a4a9-9a117d6e5194.png)\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/51939\/148300689-2f3fae49-61a6-4ec3-bd95-5db258e9c6ac.png)\r\n","@mattgodbolt @mrmachine My team is currently working on figuring this one out, but we don't have any updates yet, sadly. One thing about the `self` is that it _can_ be fixed. `self` comes from the worker scope, because that's what this workaround makes webpack think of the worklets, so you can just sub it using `config.output.globalObject` in webpack config. Problem comes from what webpack actually tries to get out of it, which is `importScripts` method - something that exists in Web Workers, but not in Worklets. So, if you are dealing with chunk splitting, which you mostly likely are, this is going to happen.","@mrmachine I am new to workers and audio worklets, but I'll try to tell you what I know.\r\n\r\n### AudioWorklet\r\nI've never seen a self variable in an audio worklet. Moreover, deliberately googling could not find a single mention of the `self` variable in audio worklets. Perhaps you need something of this:\r\n1. Descriptor parameters are available on every processor call\r\nhttps:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/AudioWorkletNode\/parameters\r\n```js\r\n\/\/ If you are using a typescript, be sure to declare process method with parameters\r\n\/*\r\ntype AudioWorkletProcessorType = {\r\n\treadonly port: MessagePort;\r\n\tprocess(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean;\r\n};\r\ndeclare const AudioWorkletProcessor: {\r\n\tprototype: AudioWorkletProcessorType;\r\n\tnew(options?: AudioWorkletNodeOptions): AudioWorkletProcessorType;\r\n};\r\n*\/\r\n\r\nclass TestProcessor extends AudioWorkletProcessor {\r\n  static get parameterDescriptors () {\r\n    return [{\r\n      name: 'customGain',\r\n      defaultValue: 0.5,\r\n      minValue: 0,\r\n      maxValue: 1,\r\n    }]\r\n  }\r\n\r\n  process (inputs, outputs, parameters) {\r\n    \/\/ Example of getting parameter\r\n    const getGain = () => {\r\n      if (parameters.customGain.length === 1) return parameters.customGain[0];\r\n      return undefined;\r\n    };\r\n    const customGain = getGain();\r\n    return true\r\n  }\r\n}\r\n```\r\n2. You need a port to post message. Use `this.port` inside processor.\r\nhttps:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/AudioWorkletNode\/port\r\n```js\r\n\/\/ If you are using a typescript, be sure to declare port field\r\n\/*\r\ntype AudioWorkletProcessorType = {\r\n\treadonly port: MessagePort;\r\n\tprocess(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean;\r\n};\r\ndeclare const AudioWorkletProcessor: {\r\n\tprototype: AudioWorkletProcessorType;\r\n\tnew(options?: AudioWorkletNodeOptions): AudioWorkletProcessorType;\r\n};\r\n*\/\r\n\r\nclass TestProcessor extends AudioWorkletProcessor {\r\n  constructor () {\r\n    super()\r\n    this.port.onmessage = () => {\r\n      this.port.postMessage('Received')\r\n    }\r\n  }\r\n  process (inputs, outputs, parameters) {\r\n    this.port.postMessage('OnProcess ')\r\n    return true\r\n  }\r\n}\r\n```\r\n3. Global variables that are available everywhere: `sampleRate`, `currentTime`, `currentFrame`\r\nhttps:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/AudioWorkletGlobalScope\r\n```js\r\n\/\/ If you are using a typescript, be sure to declare a global variable\r\n\/\/ declare const sampleRate: number;\r\n\r\nclass TestProcessor extends AudioWorkletProcessor {\r\n  constructor () {\r\n    super()\r\n    \/\/ When starting constructor\r\n    const mySampleRate = sampleRate\r\n  }\r\n  process (inputs, outputs, parameters) {\r\n     \/\/ For each processor call\r\n    const mySampleRate = sampleRate\r\n    return true\r\n  }\r\n}\r\n```\r\n4. \u0421lass fields. Refer to them using `this`.\r\nhttps:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Classes\/Public_class_fields\r\n```js\r\nclass TestProcessor extends AudioWorkletProcessor {\r\n\tmyCustomVar = 0;\r\n\r\n\tprocess([input], [output]) {\r\n\t\t\/\/ get value\r\n\t\tlet myCustomVar = this.myCustomVar;\r\n\r\n\t\t\/\/ Some code\r\n\r\n\t\t\/\/ set value\r\n\t\tthis.myCustomVar = myCustomVar;\r\n\t\treturn true;\r\n\t}\r\n}\r\n```\r\nThere is no self variable in all these examples. Perhaps, after switching from worker to audio worklet, you continued to use the self variable and this was the mistake. Worker and audio worklet have different syntax, don't try to convert one to the other. Use suitable practices.\r\n\r\n### Worker\r\nThe worker has a global variable of Worker type. If you write a worker script in pure javascript without using a webpack and run it, then you can refer to the global variable in two ways: `this` and `self`.\r\n```js\r\n\/\/ Post message using self\r\nself.postMessage('123');\r\n\r\n\/\/ Post message using this\r\nthis.postMessage('123');\r\n\r\n\/\/ The code is identical and does the same thing. These two variables contain the same worker object\r\n```\r\nIf you are using a webpack, then you are forced to use a `self` variable, because `this` is not compiled correctly by the webpack.\r\n```js\r\n\/\/ If you are using a typescript, be sure to declare a global variable\r\n\/\/ declare const self: Worker;\r\n\r\n\/\/ Post message using self\r\nself.postMessage('123');\r\n\r\n\/\/ Runtime fail\r\n\/\/ this.postMessage('123');\r\n```\r\nYou can verify that this is only a webpack compilation problem by excluding this variable from compilation using a dirty trick.\r\n```js\r\n\/\/ Works identically to previous examples\r\n\/\/ Never use this code, created for demonstration purposes only.\r\nconst myWorker = eval('this');\r\nmyWorker.postMessage('123');\r\n```","@thecynicalpaul I just added this brute force optimisation to my webpack config:\r\n\r\n```\r\noptimization: {\r\n    splitChunks: {\r\n        chunks(chunk) {\r\n            return false\r\n        },\r\n    },\r\n},\r\n```\r\n\r\nThis seems to have resolved the `self` error. It might be better to be more selective with the chunks that are excluded. @popelenkow the use of `self` was not my code, it was webpack splitting the code into chunks.","@mrmachine Noted and attempted. Seems to do the trick on our local \"production\" builds. We are starting vigorous testing, and will report once we have a proper production build running with this. Depending on your setup, detecting \"worklet\" chunks might be trivial with the use of just `chunk.name`.\r\n\r\nThanks!","@alexander-akait what we should do here? add complete example\/update docs?\r\n","Maybe we can improve options for https:\/\/github.com\/webpack\/webpack\/issues\/11543#issuecomment-779400101","We would definitely appreciate having extra options to handle this, as the aforementioned \"hack\" basically makes most of the more fine-grained splitchunk configurations either impossible or incredibly difficult.","It is maybe worth considering\/discussing  a common approach which works for both [inline workers](https:\/\/github.com\/webpack\/webpack\/discussions\/14066) and audio worklets. \r\n\r\nCurrently WebPack generates a worker style wrapper in case you use `new Worker(new URL('<module>', import.meta.url))` but there is a need for accessing the URL WebPack generates with this expression for usage in inline workers. If we can come up with a good expression which triggers the same logic of generating a Worker style wrapper we are already one step closer to also supporting audio worklets out-of-the-box by writing something like:  \r\n\r\n```js\r\nconst workletUrl = __webpack_get_worker_url__('.\/audio-worklet.js'); \/\/ same syntax as for inline workers and audio worklets, needs discussion&decision\r\nmyAudioContext.audioWorklet.addModule(workletUrl)\r\n```\r\n\r\nUnfortunately there is a second challenge to solve: AudioWorklets do not have a `importScripts` function fully rely on ES module import statements and expressions. The wrapper WebPack currently generates for WebWorkers uses `importScripts` to load all the chunks and dependencies. As WebPack chunks are not ES modules we cannot use the default browser import. The only solution I currently can think of is to load the chunks manually using `XMLHttpRequest` and using `eval` to register them in the WebPack dependency context.","@thecynicalpaul Any updates on how the production build performs with this particular _hack_...","@alexander-akait does worklet module behave same as `Worker` module? I am thinking about maybe this should be separate plugin..","@vankop Treating worklets as workers through the URL api causes errors and the audio worklets don't even get registered. Worklets probably behave a bit differently than workers. Also, can we expect a plugin to resolve this issue in the future?","@vankop hm, they are still workers, just with additional logic, but maybe another plugin(s) with more options is not bad idea... ","> @thecynicalpaul Any updates on how the production build performs with this particular _hack_...\r\n\r\n@meditating-monkey It's been working without problems so far! Our Next app is pretty massive, so it's tough to tell if there were any serious build implications, but no issues at this moment.","Hi all,\r\n\r\n[popelenkow](https:\/\/github.com\/popelenkow) thank you very much for your WorkerURL it helps a lot.\r\nHowever, it looks like it is still not possible to import libraries from \"node_modules\" folder.\r\nI'm trying to use \"aubiojs\" library for an AudioWorklet:\r\n\r\n`import aubio from \"aubiojs\";`\r\n\r\nHowever, Webpack is not able to resolve it. It compiles to:\r\n`var aubiojs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\/*! aubiojs *\/ \".\/node_modules\/aubiojs\/build\/aubio.js\");`\r\n\r\nAnd actually it doesn't load the necessary files.\r\n\r\nDoes anybody know how to workaround this issue?\r\n","@novikov-alexander please create separate issue, I will take a look.","Is there any update on this? It would be great to be able to generate persistent URLs for worklet scripts in development rather than random strings. I tried the `worker-url` plugin [but I couldn't get it working.](https:\/\/github.com\/popelenkow\/worker-url\/issues\/8) \r\n\r\nAccording to this issue, our worklet may not actually be getting processed properly? https:\/\/github.com\/zloirock\/core-js\/issues\/1173\r\n\r\nCan anyone provide any insight into this issue and whether there's a roadmap\/if this is on it?","@Slapbox What is your problem?","The worklets are at a URL that's randomly generated and according to @zloirock our script doesn't appear to be processed by Webpack. I could work with the random URLs, but if @zloirock is right then Webpack isn't processing our worklet properly and so inappropriate (breaking) core-js polyfills are being injected.\r\n\r\nAny thoughts @alexander-akait?","@Slapbox Sorry for long delay :disappointed: Can you create small reproucible test repo, with code it is easy to say how we can solve it, thank you","There is a new syntax to handle audio worklet - https:\/\/github.com\/webpack\/webpack\/pull\/17212 and not only","Thanks for implementing the new syntax @alexander-akait! Quite fortuitious that it was added just weeks before I needed a way to use worklets.\r\n\r\nI could get it working with the worklet written in plain JS, but am having trouble with Typescript. I was hoping this would work similarly to [web workers](https:\/\/webpack.js.org\/guides\/web-workers\/), which work even when the workers are written in Typescript. Is there any special configuration I need to get this new worklet syntax to work with Typescript?\r\n\r\nHere's the simple test I used that simply attempts to add it as a module. Works for JS, but errors in TS with `DOMException: The user aborted a request.` The problem is at the `addModule` level, so the AudioNode hookups don't really matter, but are in place to demo that it works for JS.\r\n\r\nmain file:\r\n```\r\nconst context = new AudioContext();\r\n\r\n\/\/ vanilla JS - works\r\ncontext.audioWorklet.addModule(new URL('.\/audioworklets\/JavascriptWorklet.audioworklet', import.meta.url).then(() => {\r\n\tconsole.log('js module loaded!');\r\n\tconst whiteNoiseNode = new AudioWorkletNode(\r\n          context,\r\n          'javascript-worklet'\r\n        );\r\n        whiteNoiseNode.connect(context.destination);\r\n}).catch(e => {\r\n\tconsole.log('js module failed with error', e);\r\n});\r\n\r\n\/\/ TS - doesn't work\r\ncontext.audioWorklet.addModule(new URL('.\/audioworklets\/TypescriptWorklet.audioworklet', import.meta.url).then(() => {\r\n\tconsole.log('TS module loaded!');\r\n\tconst whiteNoiseNode = new AudioWorkletNode(\r\n          context,\r\n          'typescript-worklet'\r\n        );\r\n        whiteNoiseNode.connect(context.destination);\r\n}).catch(e => {\r\n\tconsole.log('TS module failed with error', e);\r\n});\r\n```\r\nthe worklet written in TS (TypescriptWorklet.audioworklet.ts)\r\n```\r\nclass TypescriptWorklet extends AudioWorkletProcessor {\r\n  process(inputs: any, outputs: any, parameters: any) {\r\n    const output = outputs[0];\r\n    output.forEach((channel: any) => {\r\n      for (let i = 0; i < channel.length; i++) {\r\n        channel[i] = Math.random() * 2 - 1;\r\n      }\r\n    });\r\n    return true;\r\n  }\r\n}\r\n\r\nregisterProcessor('typescript-worklet', TypescriptWorklet);\r\n\r\nexport {};\r\n```\r\nThe worklet written in JS (JavascriptWorklet.audioworklet.js)\r\n```\r\nclass JavascriptWorklet extends AudioWorkletProcessor {\r\n  process(inputs, outputs, parameters) {\r\n    const output = outputs[0];\r\n    output.forEach(channel => {\r\n      for (let i = 0; i < channel.length; i++) {\r\n        channel[i] = Math.random() * 2 - 1;\r\n      }\r\n    });\r\n    return true;\r\n  }\r\n}\r\n\r\nregisterProcessor('javascript-worklet', JavascriptWorklet);\r\n\r\nexport {};\r\n```\r\n\r\nThanks for any help!","@thurinus  without `tsconfig.json` it is really hard to answer, you need to look at `typescript` output, it should generate analizable code, firstly I think you have typo in code (no extra `)` before `then`, just want to make sure it is just typo here, not you code):\r\n```js\r\ncontext.audioWorklet\r\n\t.addModule(\r\n\t\tnew URL(\".\/audioworklets\/TypescriptWorklet.audioworklet\", import.meta.url)\r\n\t)\r\n\t.then(() => {\r\n\t\tconsole.log(\"TS module loaded!\");\r\n\t\tconst whiteNoiseNode = new AudioWorkletNode(context, \"typescript-worklet\");\r\n\t\twhiteNoiseNode.connect(context.destination);\r\n\t})\r\n\t.catch(e => {\r\n\t\tconsole.log(\"TS module failed with error\", e);\r\n\t});\r\n\r\n``` \r\n\r\nThe second idea why it doesn't work, `typescript` can convert `import.meta.url` to something else, that is why we need to look at your output.\r\n\r\nIf you provide github reproducible example (small) I will show you how to setup it","Thanks for picking this up @alexander-akait! Yeah that was a typo when I was transcribing for the question, sorry about that. I've set up a quick test here: https:\/\/github.com\/thurinus\/worklet-playground\r\n\r\nIt's bootstrapped with CRA to replicate how my main app's set up - I hope it's okay.","I will look soon","@thurinus oh, CRA doesn't support new syntax, becaue you need access to configuration for it :disappointed: to setup this options https:\/\/github.com\/webpack\/webpack\/pull\/17212, we don't support worklets out of box, because they are still experimental in whatwg.\r\n\r\nJS example works only because in your case you load worklet as a file, not as a worker code (so you can't use `import`\/`require` in your worklet code), that is why typescript doesn't work...\r\n\r\nCan you get access to configuration or modify it?","@alexander-akait ah okay. I wasn't sure if the configs cited in #17212 had to be added explicitly, or if worklets are supported by default as long as webpack@5.85.0+ is installed (looks like I have 5.86.0).\r\n\r\nI think I can use [react-app-rewired](https:\/\/github.com\/timarney\/react-app-rewired) to modify the webpack configs? Tried it, but it didn't seem to do anything. I might be doing it wrong, though. I've updated the sandbox repo with my changes if you'd like to take a look.","@thurinus if you open an issue on CRA we can help them land this change if needed. But yeah it is just a webpack config update so that should work for you. ","@thurinus try this:\r\n```js\r\nmodule.exports = function override(config, env) {\r\n  \/\/do stuff with the webpack config...\r\n  config.module.parser =  {\r\n    javascript: {\r\n      worker: [\r\n        \"*context.audioWorklet.addModule()\",\r\n        \"*audioWorklet.addModule()\",\r\n        \/\/ *addModule() is not valid syntax\r\n        \"...\",\r\n      ],\r\n    }\r\n  };\r\n\r\n  return config;\r\n};\r\n```\r\n\r\nBetter to define syntax globally, because you can already have rules for `js`\/`ts`\/etc, you still can apply them for rules, but it is fine tuning, you don't need it in 99%\r\n\r\nAfter this I put `console.log(globalThis)` in the each worker and get output:\r\n```\r\nAudioWorkletGlobalScope\u00a0{currentFrame: 0, currentTime: 0, sampleRate: 48000, registerProcessor: \u0192, Object: \u0192,\u00a0\u2026}\r\nApp.tsx:17 js worklet loaded\r\nTypescriptWorklet.worklet.ts:14 AudioWorkletGlobalScope\u00a0{currentFrame: 50176, currentTime: 1.0453333333333332, sampleRate: 48000, registerProcessor: \u0192, Object: \u0192,\u00a0\u2026}\r\nApp.tsx:31 TS worklet loaded\r\n```\r\n\r\nSo we are in valid scope :smile: ","@alexander-akait I assume you got it working in the sandbox just by changing the `config-overrides.js`? I tried that, but am now getting this error:\r\n\r\n```\r\nimportScripts chunk loading:26 Uncaught ReferenceError: importScripts is not defined\r\n    at __webpack_require__.f.i (importScripts chunk loading:26:1)\r\n    at ensure chunk:6:1\r\n    at Array.reduce (<anonymous>)\r\n    at __webpack_require__.e (ensure chunk:5:1)\r\n    at __webpack_require__.x (startup chunk dependencies:3:1)\r\n    at startup:3:1\r\n    at startup:3:1\r\n__webpack_require__.f.i @ importScripts chunk loading:26\r\n(anonymous) @ ensure chunk:6\r\n__webpack_require__.e @ ensure chunk:5\r\n__webpack_require__.x @ startup chunk dependencies:3\r\n(anonymous) @ startup:3\r\n(anonymous) @ startup:3\r\nApp.tsx:31 TS worklet loaded\r\n```\r\nWas there anything else you had to change?\r\n\r\nSomewhat tangential, but I also wasn't able to add `console.log(globalThis)` to the JS worklet. Gives me `'globalThis' is not defined`. Could add it to the TS worker, but couldn't verify owing to the issue above.","@thurinus weird, maybe cache? Becaue you even don't have `import`\/`require` in worklets, so there is no `importScripts`","@alexander-akait I had to clear `node_modules` cache to get the overrides to take, so I did that, and also cleared browser cache. Yeah this is really weird, but probably out of scope for this thread. I'll keep digging, and update here if I get any breakthroughs. Thanks much for helping me with this so far!","@thurinus weird, give me a time to look at this again","@thurinus Oh, the problem is only for `start`, because of `ReactRefreshPlugin`, it injects extra code into worklets (I think we need a `worklet` target in future), you can use:\r\n```js\r\nconst ReactRefreshPlugin = require(\"@pmmmwh\/react-refresh-webpack-plugin\");\r\n\r\nmodule.exports = function override(config, env) {\r\n  if (env === \"development\") {\r\n    config.plugins = config.plugins.filter(plugin => plugin.constructor.name !== 'ReactRefreshPlugin');\r\n    config.plugins.push(new ReactRefreshPlugin({\r\n      overlay: false,\r\n      exclude: \/(node_modules)|(.+\\.worklet\\.(ts|js)$)\/i,\r\n      include: \/\\.([cm]js|[jt]sx?|flow)$\/i\r\n    }));\r\n  }\r\n\r\n  config.module.parser =  {\r\n    javascript: {\r\n      worker: [\r\n        \"*context.audioWorklet.addModule()\",\r\n        \"*audioWorklet.addModule()\",\r\n        \/\/ *addModule() is not valid syntax\r\n        \"...\",\r\n      ],\r\n    }\r\n  };\r\n\r\n  return config;\r\n};\r\n```\r\n\r\nit will fix a problem, but there is another problem - autoreloading, CRA has:\r\n```\r\nwatch: {\r\n        \/\/ Reportedly, this avoids CPU overload on some systems.\r\n        \/\/ https:\/\/github.com\/facebook\/create-react-app\/issues\/293\r\n        \/\/ src\/node_modules is not ignored to support absolute imports\r\n        \/\/ https:\/\/github.com\/facebook\/create-react-app\/issues\/1065\r\n        ignored: ignoredFiles(paths.appSrc),\r\n      },\r\n```\r\n\r\nSo they forcibly disable page reloading in `src`, I really sometimes don't undestand why they do some strange things and block developers to be more flexible","@alexander-akait it works! Thanks so much for digging into CRA's scripts to find the issue.\r\n\r\nYeah CRA has its problems, and looks like people are generally moving away from it now. I don't know if it's worth raising this with them to update their configs. This'll be a good solution for existing CRA apps - I'll update my sandbox and leave it up for anyone else who might stumble on this looking for the same answers.","So is there a complete, reliable solution? None of your comments were helpful. Just some random chunks of code who knows how to get together. Maybe my issue is that I use project type module?","I have tried so many workarounds \/ new features that were merged, none of them allowed me to import external files. I always ended up with `unable to read 'register' of undefined ` or `importScripts is not defined` error when I tried to import an external file to my audioWorklet\r\n\r\nThe only thing that worked for me is to set up copy-webpack-plugin on my workerLib directory and use the vanilla API to load workers and import files....\r\nIt is sad that in 2023 I'm still struggling to set up a webpack configuration even when I read all the possible documentation and the community discussions in issue threads.","The syntax specified in https:\/\/github.com\/webpack\/webpack.js.org\/issues\/6869 appears to work for me but I'm hitting an issue with `publicPath`. Webpack appears to inject automatic public path resolution logic into the compiled worklet file that doesn't seem to work in the worklet context.\r\n\r\n```\r\nAutomatic publicPath is not supported in this browser\r\n```\r\n\r\nI can make that error go away by setting `output.publicPath` to something else than `\"auto\"` but that then breaks other things. Has anyone seen this before or has a tip for how to work around it?","@Johennes Sorry for delay, sounds like a bug, I can fix it, do you use `new URL(...)` syntax in the worklet?","@marcusletric Sorry for delay too, can you provide a code where you try to use them, because we have a lot of tests and I think you have something strange in your configuration, thank you","@alexander-akait Regarding the `importScripts` topic I think I have the same problem like @marcusletric : The key point is that the worklet needs to be in a separate chunk which is loaded by the bootstrapping script. WebPack currently has the wrong assumption that `importScripts` is available in worklets. When the main worker script is in a different chunk, the bootstrap script will try to load the worker file via `importScripts` and this fails. \r\n\r\nTo reproduce: \r\n\r\n1. Move the worklet into a chunk (https:\/\/github.com\/webpack\/webpack\/tree\/main\/test\/configCases\/worker\/worklet\/webpack.config.js)\r\n```\r\n...\r\n\toptimization: {\r\n        splitChunks: {\r\n          cacheGroups: {\r\n            worklet: {\r\n              minSize: 0,\r\n              chunks: \"all\",\r\n              name: \"chunk-worklet\",\r\n              priority: 10,\r\n              test: \/.*worklet\\.js.*\/,\r\n            },\r\n          },\r\n        },\r\n      },\r\n```\r\n2. Run `yarn test:basic` to execute this test: https:\/\/github.com\/webpack\/webpack\/tree\/main\/test\/configCases\/worker\/worklet\/\r\n3. Find the written worker file in `test\/js\/ConfigTestCases\/worker\/worklet` \r\n   1. Open the main.js and search for `audioWorklet.addModule`\r\n   2. Take the number in `__webpack_require__.u` and open the matching `<number>.js`\r\n4. Notice how webpack will have now the startup script which results in following calls: \r\n![image](https:\/\/github.com\/webpack\/webpack\/assets\/674916\/0974098f-acc9-499f-bbd3-a9f95c43cd77)\r\n\r\nThe current solution to support worklets is to use the Web Worker plugin with an additional syntax matching. This results in `importScripts` being used. \r\n\r\nMy initial thought was that we could maybe do this: \r\n```\r\nif (typeof importScripts === 'function') {\r\n   importScripts(...)\r\n} else {\r\n   promises.push(import(...))\r\n}\r\n```\r\n\r\nI'm not sure yet how webpack could solve this. Fetch, XMLHttpRequest and dynamic imports are not available. But WebPack might need to load chunks dynamically. \r\n\r\n- https:\/\/github.com\/WebAudio\/web-audio-api\/issues\/1439\r\n- https:\/\/github.com\/w3c\/css-houdini-drafts\/issues\/506\r\n","@mrmachine Thank you your feedback and report, I will look at this soon","@Danielku15 I see your problem, we should not apply `splitChunks` for worklet chunks (runtime optimization too). \r\n\r\nWhy do you use `cacheGroups` for worklet? Do you have a problem with built-in default\/defaultVendor splitting?\r\n\r\nThere are three problems:\r\n- Automatic public path is impossible...\r\n- We don't have `self`...\r\n- We don't have `importScripts`\r\n\r\nCurrent workaround - exclude worklet chunks in `splitChunks`\r\n\r\nI think we need to implement `module.rules.parser.worklet` (like we have `module.rules.parser.worker`) and no optimizations should be applied for such chunks, also make sense to implement `target: \"worklet\"`.\r\n\r\nI am fine if someone will send PR","Shorty - if you have:\r\n- `Automatic publicPath is not supported in this browser`\r\n- `unable to read 'register' of undefined`\r\n- `importScripts is not defined`\r\n\r\nCheck your `optimization.splitChunks` configuration, you should exclude worklet chunk(s) from them, we have https:\/\/webpack.js.org\/plugins\/split-chunks-plugin\/#splitchunkschunks to allow specify it","Greetings, everyone, I really do hope you'll be able to assist me with this exact problem. I've tried everything described here, but still receive: `DOMException: The user aborted a request.` error.\r\n\r\nPrerequisites:\r\n1. Ejected CRA app with typescript preset.\r\n2. Typescript-written audio worklet. \r\n3. Added `rules.%babel_loader%.parser.worker` and `parser.javascript.worker` entries into ejected config - still no luck.\r\n\r\nIt seems I've tried everything I could've found in the net and thought myself with zero result.\r\n\r\nLink to the repo in the current state: https:\/\/github.com\/LoserAntbear\/telenes \r\n\r\n- `AudioWorklet` can be found under `src\/core\/workers\/worklets\/AudioWorklet.worklet.ts`\r\n- it's import can be found at `src\/core\/systems\/audio\/AudioSystem.ts:64`\r\n\r\n\r\nReally hope to find some help, since I'm desperately stuck.\r\n\r\nI was able to compile it using `worklet-loader` plugin, but then I get next error: \r\n\"Failed to construct 'AudioWorkletNode': AudioWorkletNode cannot be created: The node name 'AUDIO_WORKER' is not defined in AudioWorkletGlobalScope.\" \r\n\r\nWhich, it seems, means, that despite it was compiled it is not being loaded for some reason.\r\n\r\n[UPD1]:\r\nThe thing that I learned, if you receive `DOMException: The user aborted a request.` error - that means js\/ts has an error within that file (e.g. you have imports\/exports, which are not allowed it seems) OR it cannot reach it (e.g. wrong path).\r\n\r\nInterestingly enough, it appeared, that after adjusting webpack config's parser it actually works. Webpack-dev-server DOES serve the static worklet `.ts` file. Although it does nothing with it. Possibly, since it's `.ts` it can't read it properly.\r\nAfter converting the file to `.js` it loaded the worklet, hooray.\r\n\r\nAlthough it does not want to process imports within that file, I receive `TypeError: Failed to resolve module specifier \"module\". Relative references must start with either \"\/\", \".\/\", or \"..\/` error for any import (library or relative one). \r\n\r\nI expect it happens since worklet is being served and treated as `public static` file, and relative imports just break here. \r\nFrom the other hand, it's not clear, why node modules cannot be loaded, but I feel that's happening for the same reason.\r\n  ","@alexander-akait \r\n>  Why do you use `cacheGroups` for worklet? Do you have a problem with built-in default\/defaultVendor splitting?\r\n\r\nOn one hand it is primarily to show the problem that the worklet support is not capable of dynamically loading chunks. The problem does not appear in the tests due to the small size and not using any node_modules. \r\n\r\n<details>\r\n<summary>In reality I am having a setup like described in here. (expand me)<\/summary>\r\n\r\nI have a shared foundation for my main library code and background workers\/worklets. And this shared foundation might also pull further dependencies from external libraries. \r\n\r\n```mermaid\r\nflowchart LR\r\n    app.js-- import -->mylib.main.js\r\n    mylib.main.js-- new Worker -->mylib.worker.js\r\n    mylib.main.js-- import -->mylib.shared.js  \r\n    mylib.main.js-- audioworklet.addModule -->mylib.worklet.js\r\n    mylib.worker.js-- import -->mylib.shared.js  \r\n    mylib.worklet.js-- import -->mylib.shared.js  \r\n    mylib.shared.js-- import --> vendor[some npm libs from node_modules]\r\n```\r\n\r\n* The `mylib.main.js` is simply the end user facing API surface to use the lib. You can consider this the API client for the backend. \r\n* The `mylib.worker.js` and `mylib.worklet.js` are the backend \/ background workers where processing is off-loaded. You can consider this the API server offering API calls. \r\n* The `mylib.shared.js` contains shared code like validators, common data structures, helper functions etc. \r\n\r\nI've seen in various scenarios that some code (mylib.shared.js) was duplicated into multiple chunks. To optimize the sizes of chunks and avoid the duplication I deliberatly move some files into a dedicated chunk. \r\n\r\nIf WebPack is used together with frameworks like Angular, React or Vue, I think it is easily possible to end up in a scenario where a worklet might need to pull some other chunks or dependencies (e.g. the typical vendor.js). \r\n\r\n<\/details>\r\n\r\n> Current workaround - exclude worklet chunks in splitChunks\r\n\r\nUnfortunately I have to agree that this might be the only workaround unless we or the standard comitees invent something which allows loading other files into the worklet context. \r\n\r\nBut I fear it might be against the goals developers want to achieve with WebPack. \r\n\r\nUnfortunately many people assume still that workers or worklets might be just some simple small code snippets. But in reality (considering background canvas rendering and audio synthesizing) those workers might be doing very complex tasks. And for this also the worklets\/workers might require\/import again other modules and dependencies. \r\n\r\nFor worklets this means: Duplicating all dependencies and modules into the worklet file instead of benefiting from single chunks being cached and reused by the browser. \r\n\r\n@LoserAntbear \r\n> ... Interestingly enough, it appeared, that after adjusting webpack config's parser it actually works. Webpack-dev-server DOES serve the static worklet .ts file. Although it does nothing with it. Possibly, since it's .ts it can't read it properly.\r\nAfter converting the file to .js it loaded the worklet, hooray.\r\n\r\nIt is great to here that you made progress. I am currently working on an approach where at least I can import 1 level of dependencies into the worklet by using an inline blob worklet and static imports. I am not there yet but progressing. Maybe it also helps you getting things running: \r\n\r\n```js\r\nclass AlphaTabWorkletUrl {\r\n    static create(url: URL) { return url; }\r\n}\r\n\r\nfunction createWebPackWorklet(context: AudioContext) {\r\n    \/\/ .\/alphaTab.worklet is rewritten to .\/alphaTab.worklet.mjd in the typescript transpilation\r\n    \/\/ before things go into webpack\r\n    const workletUrl = AlphaTabWorkletUrl.create(new URL('.\/alphaTab.worklet', import.meta.url));\r\n    const sharedPartUrl = AlphaTabWorkletUrl.create(new URL('.\/alphaTab.core', import.meta.url)); \/\/ TODO: just need the URL of the chunk containing alphaTab.core, not an own worker bootstrapping script. \r\n    const workletCode = `\r\n        debugger;\r\n        import * as shared from ${JSON.stringify(sharedPartUrl)};\r\n        import * as worklet from ${JSON.stringify(workletUrl)};\r\n    `;\r\n    const workletBlob = new Blob([workletCode], { type: \"application\/javascript; charset=utf-8\" });\r\n    const workletBlobUrl = window.URL.createObjectURL(workletBlob);\r\n\r\n    return context.audioWorklet.addModule(workletBlobUrl);\r\n}\r\n\r\n\/* \r\ncombined with: \r\n    module: { \r\n        rules: [ \r\n            {\r\n                test(path) {\r\n                    return path.includes('alphaTab.worklet.mjs');\r\n                },\r\n                parser: {\r\n                    worker: [\r\n                        \"AlphaTabWorkletUrl.create()\",\r\n                        '...'\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n*\/\r\n```\r\n\r\n","Yeah, anyway if you have ideas how we can solve it feel free to send any PRs, I see the problem, I suggested excluding this from any optimization so that it would at least work out of the box without problems","@Danielku15 Thanks for the heads up!\r\nIn my investigations i've stumbled upon `audio-worklet-loader` on npm,  [github link](https:\/\/github.com\/leviance\/audio-worklet-loader\/tree\/main\/dist). It allowed me to load both `.js` and `.ts` worklet together with inner imports (library and relative imports).\r\n\r\nSo great thanks and big credit to @leviance for the effort and making it work.\r\nI'll dig further in his approach, maybe it'll help with a proper application without external loaders.","Progress! With manual modifications of the WebPack output I managed to get audio worklets running for me. Now I have to figure out how WebPack could generate the exact same code dynamically for devs. \r\n\r\nThe idea is like this:\r\n\r\n1. You can call `context.audioWorket.addModule(<file>)` with multiple files from the main context. They will end up being executed in the same context. \r\n2. We include\/inject all dependent chunks\/modules of the worker into the worklet by calling `addModule`. Dynamic imports will not work, but any static dependencies work. \r\n3. We then inject the main entry point via `addModule` and it should find all pre-registered chunks. \r\n\r\nThe approach is similar to the `HtmlWebpackPlugin` just that we call `addModule`. \r\n\r\n\r\nWhat the webpack \"AudioWorklet\" plugin would need to do is transforming the code like this:\r\n\r\n**Input Source:** `context.audioWorklet.addModule(new URL('module.js', import.meta.url))`\r\n**Output source:**\r\n```js\r\n(async function(__webpack_worklet__) {\r\n    \/\/ dynamic worklet bootstrapping script \r\n    await __webpack_worklet__.addModule(window.URL.createObjectURL(new Blob([`\r\n\t\t\/\/ support for Automatic publicPath\r\n\t\tglobalThis.location = '${__webpack_require__.b}';\r\n\t\t\/\/ compatibility with current WebWorker bootstrapping script\r\n\t\t\/\/ but just report errors that dynamic imports are not working\r\n\t\t\/\/ -> Could be added to webpack\/runtime\/importScripts directly to detect missing importScripts functions\r\n\t\tglobalThis.importScripts = (url) => { throw new Error(\"Cannot import scripts dynamically in worklets\", url); }\r\n\t\t\/\/ compatibility with webpack\/runtime\/importScripts which simply uses \"self\" instead of __webpack_require__.g\r\n\t\t\/\/ -> Proper fix could be done in webpack\/runtime\/importScripts to use __webpack_require__.g\r\n\t\tglobalThis.self = globalThis;        \r\n\t`], { type: \"application\/javascript; charset=utf-8\" })));\r\n\t\r\n\t\/\/ import all dependency chunks of the worklet entry \r\n\t\/\/ -> similar to how HtmlWebpackPlugin does it?\r\n\tawait __webpack_worklet__.addModule(new URL(\/* worker import *\/ __webpack_require__.p + '<dependent chunk>', __webpack_require__.b));\r\n\t\r\n\t\/\/ import worklet bootstrapping script (as generated today)\r\n\tawait __webpack_worklet__.addModule(new URL(\/* worker import *\/ __webpack_require__.p + __webpack_require__.u(<worklet entry chunk>), __webpack_require__.b));\r\n})(context.audioWorklet);\r\n```\r\n\r\nAdditionally we have to make 1 fix in `webpack\/runtime\/importScripts`. It has to also register any included previously: \r\n\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/611bded369b5a9ea695f2669b25a6f88b67d7826\/lib\/webworker\/ImportScriptsChunkLoadingRuntimeModule.js#L159-L161\r\n\r\n```diff\r\nvar chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\r\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\r\n+ chunkLoadingGlobal.forEach(installChunk);\r\nchunkLoadingGlobal.push = installChunk;\r\n```\r\n\r\nI will check if I can bring this into a new Worklet plugin. \r\n","@alexander-akait I have a draft change to the worker plugin ready which works for my library to import some dependencies into the worklet before launching the original worklet. But to finalize it properly I'd need some guidance. I'm lacking a bit the knowledge how to do things correctly within WebPack. \r\n\r\n**The current change:** \r\nhttps:\/\/github.com\/webpack\/webpack\/compare\/main...Danielku15:webpack:feature\/worklets-with-imports\r\n\r\n**The change does following:** \r\n1. It introduces a separate syntax to indicate the worklet generation `<>` instead of `()`. \r\n2. It rewrites the original call to addModule with an async wrapper function setting things up: \r\n    1. An an inline bootstrap script is injected to the worklet making the current webworker runtime module compatible with the worklet scopes.\r\n    2. It injects all the `entrypoint.getEntrypointChunk().getAllReferencedChunks()` individually ensuring the dependencies are there. The worklet itself is part of this and will launch. \r\n3. It ensures pre-loaded chunks are installed on the bootstrapping script. \r\n\r\n**Clarifications I need:** \r\n1. I wanted to keep using the WorkerPlugin and not refactor too much into common functions. But if you prefer, I could make a dedicated `WorkletPlugin` with respective settings and then share some common functions for parsing and decoding the AST. Currently I inject different dependencies based on the syntax.\r\n2. Is there a better way to transform the original expression to the new one? I'd like to reuse the code of some expressions and emit it directly in my DependencyTemplate instead. \r\n3. Is there a more reliable or better way of obtaining all chunk URLs from the dependency graph than I'm doing now? The current solution is more a result of trial-and-error using own project.\r\n\r\nOf course alternatively you can adopt my idea and write a plugin\/change in your preferred style. I'm happy to test anything in my project. \r\n","@Danielku15 Looks intresting, can you send this PR and adopt existing worklet tests for it?\r\n\r\n> I wanted to keep using the WorkerPlugin and not refactor too much into common functions. But if you prefer, I could make a dedicated WorkletPlugin with respective settings and then share some common functions for parsing and decoding the AST. Currently I inject different dependencies based on the syntax.\r\n\r\nGood idea, I like it\r\n\r\n> Is there a better way to transform the original expression to the new one? I'd like to reuse the code of some expressions and emit it directly in my DependencyTemplate instead.\r\n\r\nCan you clarify?\r\n\r\n> Is there a more reliable or better way of obtaining all chunk URLs from the dependency graph than I'm doing now? The current solution is more a result of trial-and-error using own project.\r\n\r\nit is not trivial task","> Is there a better way to transform the original expression to the new one? I'd like to reuse the code of some expressions and emit it directly in my DependencyTemplate instead.\r\n\r\nI mean this part of the code which is quite messy: https:\/\/github.com\/Danielku15\/webpack\/blob\/765efb28a6122c0a3bc97690b2d0438de4fe3c12\/lib\/dependencies\/WorkerPlugin.js#L454-L493 ModuleDependencies can overwrite source file ranges with custom strings but I need to know how I can (efficiently) adopt parts of the original sources to be used in the string I generate in my ModuleDependency.   \r\n\r\nThe inefficient solution I found is to copy known ranges from the `ReplaceSource` via `source.original().source().slice()`. Also it doesn't allow other replacements to occur on this location as we access the original.\r\n\r\n**My goal:** \r\n\r\nWe have an expression of `context.audioWorklet.addModule(new URL('.\/worklet', import.meta.url), { credentials: true })` which I want to rewrite to `(async function(__webpack__worklet__, __webpack__worklet_options__) { ... })(context.audioWorklet, { credentials: true })`. Depending on the syntax (constructor, function call, method call) this rewrite might also vary .\r\n\r\nTalking in placeholders we have on a `*.moduletype.modulefunction()` syntax an expression like `<memberaccess>.<moduletype>.<modulefunction>(<url>, <options>)` and I want to get it rewritten to `<custom code>(<memberacces>.<moduletype>, <option>)` within my ModuleDependency implementation. \r\n\r\n> > Is there a more reliable or better way of obtaining all chunk URLs from the dependency graph than I'm doing now? The current solution is more a result of trial-and-error using own project.\r\n>\r\n> it is not trivial task\r\n\r\nAny suggestion how the new worklet plugin should deal with the import? The `html-webpack-plugin` relies on `EntryPoint.getFiles()` but it this seems not available for the worker entry point in the ModuleDependency source generation stage. Otherwise I'd stick with the `EntryPoint.getEntryPointChunk().getAllReferencedChunks()` solution for now. ","I prepared a draft of a new plugin which I tested successfully in my project. The hurdles to actually contribute to WebPack feel still a bit high, maybe with community effort we can complete this PR (unittest, manual tests in some projects, writing website\/docs,...). "],"labels":["enhancement","webpack-5"]},{"title":"Bugfix\/remove script timeout attribute","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\nRemove the `script.timeout` as it's not defined anywhere in the HTML standard https:\/\/www.w3.org\/TR\/html52\/semantics-scripting.html#the-script-element, and there's no effect as I tested in modern browsers with network throttling enabled:\r\n\r\n```js\r\nvar script = document.createElement('script')\r\nscript.src = 'https:\/\/code.jquery.com\/jquery-3.5.1.js'\r\nscript.timeout = 120\r\nscript.onerror = () => console.log('error')\r\nscript.onload = () => console.log('load')\r\ndocument.head.appendChild(script)\r\n```\r\n\r\nThe browser would spend more than 10 minutes (20:33:40 - 20:44:44) to load the script without timeout:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/1091472\/93668577-bde7bd00-fabf-11ea-8c02-7f9c210a1eab.png)\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNo. But I've updated all those examples with `script.timeout`.\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\nI don't think so.\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNothing.\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","Are there any updates on this? The configuration `output.chunkLoadTimeout` seems to only be used on this line. I have been getting `ChunkLoadError` timeouts and am looking to increase the timeout."],"labels":["PR: CI-ok","PR: unreviewed","PR: conflict"]},{"title":"More intelligently guess the required version of shared modules","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nIn current module federation, the required version of a shared module defaults to the version requirement in package.json. However, sometimes a module is installed from the local filesystem (for example, when testing a local copy). \r\n\r\nCurrently, if the dependency in package.json looks like `\"mypackage\": \"..\/mypackage\"`, then the string is parsed as a version number leading to a nonsensical required version. This is a bug in master.\r\n\r\nThis change first checks to see if the required version is a valid range, and if not, tries to resolve the path on disk and get the version number from the path on disk.\r\n\r\nThis does not handle more exotic ways of installing packages, such as with github urls, etc. Perhaps an even better approach is to try to resolve the package name to find the version installed, and use that version number.\r\n\r\nIn order to resolve paths on the filesystem, I also added a simplified optional `resolve` method to the filesystem interface. Join does not work since paths can be relative or absolute.\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nbugfix and feature enhancement\r\n\r\n**Did you add tests for your changes?**\r\n\r\nI don't know where I should add a test. Where should one go?\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","Should we also check here: https:\/\/github.com\/webpack\/webpack\/blob\/1a607c3e05e594b025571a3677e82714b040a280\/lib\/sharing\/ConsumeSharedPlugin.js#L184\r\nif the configured requireVersion is valid and parse it, or just continue passing it through?",">  if the configured requireVersion is valid and parse it, or just continue passing it through?\r\n\r\nAh, I see that it is parsed above, though I'm not sure if the config in the init is the same as the config in the apply. Should we check it above at https:\/\/github.com\/webpack\/webpack\/blob\/1a607c3e05e594b025571a3677e82714b040a280\/lib\/sharing\/ConsumeSharedPlugin.js#L85 before we parse it, to throw an error if someone passes in something like `..\/mypackage`, for example?","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.",">  if the configured requireVersion is valid and parse it, or just continue passing it through?\r\n\r\nI added a validity check for strings in d620fce","<!-- identifier: tests-result -->\n\nIt looks like this Pull Request doesn't include [enough test cases](https:\/\/codecov.io\/gh\/webpack\/webpack\/compare\/e32daa9be5fed184c8befac87216a88872f7df4a...d620fce26ac54fce5364638969b5bbea34c7886e) (based on Code Coverage analysis of the PR diff).\n\nA PR need to be covered by tests if you add a new feature (we want to make sure that your feature is working) or if you fix a bug (we want to make sure that we don't run into a regression in future).\n\n@jasongrout Please check if this is appliable to your PR and if you can add more test cases.\n\nRead the [test readme](https:\/\/github.com\/webpack\/webpack\/blob\/master\/test\/README.md) for details how to write test cases.","> @jasongrout Please check if this is appliable to your PR and if you can add more test cases.\r\n\r\nI looked, but I'm still not sure where similar test cases are, or where I should add a test case. Are there test cases for similar scenarios somewhere in the code?"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"Logger: out of box color support for errors and warnings","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\nLogger should support colors for errors and warnings out of the box.\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nif we log warning with logger.warn('warning') it should print the warning in yellow color. same for errors with red colors.\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\nwe have use color ourself like `logger.warn(chalk.yellow('warning'))`\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n","comments":["![image](https:\/\/user-images.githubusercontent.com\/1365881\/88329749-b9569080-cd2a-11ea-938b-cab91264e049.png)\r\n\r\nIt does already do that","```\r\nconst logging = require('webpack\/lib\/logging\/runtime');\r\n\r\nlogging.getLogger('test').info('helllo');\r\n```\r\nThe above code outputs without color, do we have to specify some other configurations to get the colors?\r\n![Screenshot at 2020-07-29 16-08-38](https:\/\/user-images.githubusercontent.com\/46647141\/88790424-cb668200-d1b5-11ea-9020-d3de2ce5e006.png)\r\n","@snitin315 strange, can you try to use `warning`\/`error`?","Same behavior. \r\n![Screenshot at 2020-07-29 17-59-46](https:\/\/user-images.githubusercontent.com\/46647141\/88800175-5d29bb80-d1c5-11ea-90e0-50502667ed83.png)\r\n","This is not how to use the webpack logger. Use `compilation.getLogger(\"my-plugin\")`","we use logging before we run webpack and sometimes after, and when we do other actions that don't need webpack (like init\/info\/migrate\/generate), so I think we can't use infrastructure logger.","@snitin315 we need to search way how we can implement colors using built-in logger","@sokra isn't it possible to have colors with runtime?","@snitin315 Please check the code, it is easy","The runtime logger is intended for in browser usage where the browser devtools take care of colors and filtering.\n\nIt's not intended for usage in node.js, because you won't have the ability to filter.\n\nIt probably makes sense to offer multiple different runtime loggers for web and node.js targets. A node.js logger could apply console colors and filter e. g. via env variable.\n\nwebpack would alias the logger depending on target.\n\nAs side effect you would be able to use the node.js runtime logger for your stuff too.","@sokra makes sense, How should I go ahead in Implementing this feature?","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["enhancement","webpack-5"]},{"title":"Federated Modules: Dynamic Remotes","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nIt seems that although dynamic imports are supported in federated modules, and it is possible to obtain `remoteEntry.js` on runtime, the *remotes* are still statically defined in webpack config.\r\n\r\n```\r\nnew ModuleFederationPlugin({\r\n      name: 'application_b',\r\n      library: { type: 'var', name: 'application_b' },\r\n      filename: 'remoteEntry.js',\r\n      exposes: {\r\n        'SayHelloFromB': '.\/src\/app',\r\n      },\r\n      remotes: {\r\n        'application_a': 'application_a',\r\n      },\r\n      shared: ['react', 'react-dom'],\r\n    }),\r\n```\r\n\r\nHere, *application_b* is statically defining *application_a* as a remote.\r\n\r\nIs there a way that remotes can be defined dynamically instead?\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nA plugin system that spreads its plugins over many microservices.\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nSimilar to lazy loading in code splitting, could dynamic imports (remotes) be preemptively prepared?\r\n\r\n**Are you willing to work on this yourself?**\r\nI am not very well-versed in webpack's internals, unfortunately.\r\n","comments":["You can dynamically load remote modules using this:\r\n\r\n``` js\r\n\/\/ Initializes the share scope.\r\n\/\/ This fills it with known provided modules from this build and all remotes\r\nawait __webpack_init_sharing__(\"default\");\r\n\/\/ TODO: load the script tag somehow. e. g. with a script loader\r\nconst container = window.application_a;\r\n\/\/ Initialize the container, it may provide shared modules\r\nawait container.init(__webpack_share_scopes__.default);\r\nconst module = await container.get(\".\/module\");\r\n```","`await __webpack_init_sharing__(\"default\");` not initialize","Thanks fixed","In the actual project, services in remote host, and we may be exposed multiple module, can we do this?\r\n\r\n```jsx\r\nconst { Routes, Button } = await __webpack_init_module_federation_remote('https:\/\/localhost\/order\/remoteEntry.js');\r\n```","@shaodahong It's completely possible to dynamically import modules; we use the following code to load the compiled code into the `window` object dynamically:\r\n\r\n```\r\n   await new Promise((resolve, reject) => {\r\n      const element = document.createElement('script');\r\n\r\n      element.src = url;\r\n      element.type = 'text\/javascript';\r\n      element.async = true;\r\n\r\n      element.onload = () => {\r\n        element.parentElement.removeChild(element);\r\n        resolve();\r\n      };\r\n      element.onerror = (error) => {\r\n        element.parentElement.removeChild(element);\r\n        reject(error);\r\n      };\r\n\r\n      document.head.appendChild(element);\r\n    });\r\n\r\n  const factory = await window[webpackModuleName].get(component);\r\n  return factory();\r\n```\r\n\r\nNote this doesn't seem to work properly when you have multiple plugins with identical component names running in development mode with HMR.","yup, it's broken when using dev hmr ","HMR and MF do not work currently. ","> HMR and MF do not work currently.\r\n\r\n@ScriptedAlchemy https:\/\/github.com\/webpack\/webpack-dev-server\/issues\/2692 Any plan?","hi @ScriptedAlchemy and @sokra \r\n\r\nJust wanted to confirm if it is actually possible to load dynamically federated modules from a dynamically loaded remote. It seems it is possible. I will give it a try to the code @sokra put above, but would be nice to get a confirmation from you that it is actually possible.\r\n\r\n","@royriojas check my code above: https:\/\/github.com\/webpack\/webpack\/issues\/11033#issuecomment-711693729. We have this working fine in dev loading federated modules just using a URL.","You're likely not running remote containers over wds. The issue appears when WDS is used to host containers. I've experienced this issue and it still remains. Though I've not tested with webpack-cli\/serve\n\n\nI've not looked into webpack dev server or this issue further. A workaround you could apply is to add startup code and manually define the container to the window. Since WDS adds a module to the end, we can use startup code to add our own module and basically set it ourselves. \n\nhttps:\/\/link.medium.com\/ierojo0DKab\n\n","Hi @ScriptedAlchemy based on all that I've found I came with this for dynamic loading modules from remotes (without hardcoding them in the webpack config)\r\n\r\nhttps:\/\/github.com\/royriojas\/mfe-webpack-demo\/tree\/attempt_dynamic\r\n\r\nBut here is something very weird I noticed:\r\n\r\n`React` from `app_03` is resolved to the same React in that remote if not loaded before executing any code from the `app_01`.  Not sure if it is a bug or it is intended to be like that. But since what I want is to load arbitrary code without caring about the order, this might be a deal breaker. Well not really, but it will force us to think of a workaround (like preload certain dependencies in a vendors.js file maybe?\r\n\r\nIf you comment this line here: https:\/\/github.com\/royriojas\/mfe-webpack-demo\/blob\/attempt_dynamic\/packages\/app-01\/src\/index.jsx#L8 you will see that the app fails to load the `app_03`\r\n\r\nFor now preloading it solves my issue, but it would be really nice to not need that.\r\n\r\nThe error that I get when I don't preload that given remote is that there are 2 React versions in the page :(\r\n\r\n\r\n\r\n","This is the error, if @sokra or @ScriptedAlchemy or anybody knows why does this error happen.\r\n```\r\nreact.development.js:1465 Uncaught Error: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\r\n1. You might have mismatching versions of React and the renderer (such as React DOM)\r\n2. You might be breaking the Rules of Hooks\r\n3. You might have more than one copy of React in the same app\r\nSee https:\/\/fb.me\/react-invalid-hook-call for tips about how to debug and fix this problem.\r\n    at resolveDispatcher (react.development.js:1465)\r\n    at useDebugValue (react.development.js:1529)\r\n    at styled-components.browser.esm.js:1\r\n    at styled.button (styled-components.browser.esm.js:1)\r\n    at renderWithHooks (react-dom.development.js:14825)\r\n    at updateForwardRef (react-dom.development.js:16840)\r\n    at mountLazyComponent (react-dom.development.js:17392)\r\n    at beginWork (react-dom.development.js:18635)\r\n    at HTMLUnknownElement.callCallback (react-dom.development.js:188)\r\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:237)\r\nresolveDispatcher @ react.development.js:1465\r\nuseDebugValue @ react.development.js:1529\r\n(anonymous) @ styled-components.browser.esm.js:1\r\nstyled.button @ styled-components.browser.esm.js:1\r\nrenderWithHooks @ react-dom.development.js:14825\r\nupdateForwardRef @ react-dom.development.js:16840\r\nmountLazyComponent @ react-dom.development.js:17392\r\nbeginWork @ react-dom.development.js:18635\r\ncallCallback @ react-dom.development.js:188\r\ninvokeGuardedCallbackDev @ react-dom.development.js:237\r\ninvokeGuardedCallback @ react-dom.development.js:292\r\nbeginWork$1 @ react-dom.development.js:23234\r\nperformUnitOfWork @ react-dom.development.js:22185\r\nworkLoopSync @ react-dom.development.js:22161\r\nperformSyncWorkOnRoot @ react-dom.development.js:21787\r\n(anonymous) @ react-dom.development.js:11111\r\nunstable_runWithPriority @ scheduler.development.js:653\r\nrunWithPriority$1 @ react-dom.development.js:11061\r\nflushSyncCallbackQueueImpl @ react-dom.development.js:11106\r\nworkLoop @ scheduler.development.js:597\r\nflushWork @ scheduler.development.js:552\r\nperformWorkUntilDeadline @ scheduler.development.js:164\r\nreact_devtools_backend.js:2273 The above error occurred in the <styled.button> component:\r\n    in styled.button (created by UiLibraryPage)\r\n    in Suspense (created by UiLibraryPage)\r\n    in div (created by Page)\r\n    in div (created by Page)\r\n    in Page (created by UiLibraryPage)\r\n    in UiLibraryPage (created by Context.Consumer)\r\n    in Route (created by Routes)\r\n    in Switch (created by Routes)\r\n    in Routes (created by App)\r\n    in div (created by App)\r\n    in Router (created by HashRouter)\r\n    in HashRouter (created by App)\r\n    in App\r\n\r\nConsider adding an error boundary to your tree to customize error handling behavior.\r\nVisit https:\/\/fb.me\/react-error-boundaries to learn more about error boundaries.\r\noverrideMethod @ react_devtools_backend.js:2273\r\nlogCapturedError @ react-dom.development.js:19560\r\nlogError @ react-dom.development.js:19597\r\nupdate.callback @ react-dom.development.js:20741\r\ncallCallback @ react-dom.development.js:12512\r\ncommitUpdateQueue @ react-dom.development.js:12533\r\ncommitLifeCycles @ react-dom.development.js:19916\r\ncommitLayoutEffects @ react-dom.development.js:22834\r\ncallCallback @ react-dom.development.js:188\r\ninvokeGuardedCallbackDev @ react-dom.development.js:237\r\ninvokeGuardedCallback @ react-dom.development.js:292\r\ncommitRootImpl @ react-dom.development.js:22572\r\nunstable_runWithPriority @ scheduler.development.js:653\r\nrunWithPriority$1 @ react-dom.development.js:11061\r\ncommitRoot @ react-dom.development.js:22412\r\nfinishSyncRender @ react-dom.development.js:21838\r\nperformSyncWorkOnRoot @ react-dom.development.js:21824\r\n(anonymous) @ react-dom.development.js:11111\r\nunstable_runWithPriority @ scheduler.development.js:653\r\nrunWithPriority$1 @ react-dom.development.js:11061\r\nflushSyncCallbackQueueImpl @ react-dom.development.js:11106\r\nworkLoop @ scheduler.development.js:597\r\nflushWork @ scheduler.development.js:552\r\nperformWorkUntilDeadline @ scheduler.development.js:164\r\n```","You can't unload react and magically load another copy. Webpack can only negotiate versions sharing of singletons upfront. \n\nOnly use module-federation-examples for configuring. Your webpack config is old and you're sharing api isn't right for what you're trying to do. \n\nPlease refer to my repos under the MF organization. \n\nOne look at your repo, you're not using semver sharing, webpack probably doesn't know if it can \/ should share. React also needs to be a singleton to function. \n\nYou can upgrade to react 17 if you need multiple copies of react for whatever reason \n","@ScriptedAlchemy I don't want to load two versions of react. I actually want to share the same `React` version across the board. I will check the webpack config, but I was sure I recently upgraded it.\r\n\r\nI'm not trying to share anything yet. I was just trying to understand what was possible to do with module federation. I will take a look a semver sharing. \r\n\r\nThank you for your feedback.\r\n","Thanks for your feedback @ScriptedAlchemy. Using a shared singleton fixed all the issues I had. Thank u. \ud83d\udc4d \r\n\r\nhttps:\/\/github.com\/royriojas\/mfe-webpack-demo\/commit\/4711f371dfc8a69f47b69c57070158f1a3405c9e#diff-3d864b4f5a6e000cbf1420a6b94dd5ce3688b24b01a3cff1ecb817e8e5f44708R46","Yeeeeee!!! \ud83e\udd73\n\nThrilled it resolved the problem. \nWhere did you read about the old config? Or is this just an old copy from beta 16 that you've been using. \n\nNeed to know if I should actually update my articles or not \ud83d\ude02\ud83d\ude02","@ScriptedAlchemy Old example forked from https:\/\/github.com\/mizx\/mfe-webpack-demo which was using the beta version","Ahhh yep. He helped me build out some examples, he was the first outside user. Module federation examples was actually based on his initial effort to help us make example projects. Will DM and see if he wants to drop a link or update some examples ","For anyone googling into this, the module federation documentation has been updated and a example added:\r\n- https:\/\/webpack.js.org\/concepts\/module-federation\/#dynamic-remote-containers\r\n- https:\/\/github.com\/module-federation\/module-federation-examples\/tree\/7930cd5452555928801e1550f836ffe3d438a66b\/advanced-api\/dynamic-remotes\r\n- Full diff between mizx\/mfe-webpack-demo master branch and royriojas\/mfe-webpack-demo master branch:\r\nhttps:\/\/github.com\/mizx\/mfe-webpack-demo\/compare\/mizx:9b1b2f8...royriojas:1f9ca14\r\n\r\nSo I have issue, I have code loading in modules 'synchronously' so something like:\r\n```jsx\r\nimport urls from \"remoteModule\/constants\";\r\n\r\nasync function getSomething(params) {\r\n  \/\/ ...Other processing\r\n  return fetch(urls.aThing);\r\n}\r\n```\r\n\r\nUnless I'm misunderstanding something, the technique used in the example wouldn't work for what I'm trying to do?\r\n\r\nOr I would have to restructure my code to be something like:\r\n```jsx\r\nasync function getSomething(params) {\r\n  const { aThing } = await someKindOfDynamicLoading(\"remoteModule\/constants\");\r\n    \/\/ ...Other processing\r\n  return fetch(urls.aThing);\r\n}\r\n```\r\n\r\nThe thing is I really don't want to do that, I guess the argument could be made that it should be explicit whether a module is being loaded externally via a function like `someKindOfDynamicLoading`, but for 'middleware'\/non-jsx code it seems out of place?\r\n\r\nIs there a way to modify the example(s) given so that I could load my modules synchronously? Or am I'm using federated modules in a 'unintended'\/bad way?\r\n\r\n**Update:** Several community members helped and figured out the issue mentioned in this comment, a example is now available under: [advanced-api\/dynamic-remotes-synchronous-imports](https:\/\/github.com\/module-federation\/module-federation-examples\/tree\/d5cf265c2d4fd040797cbae806badd8267ad5b8f\/advanced-api\/dynamic-remotes-synchronous-imports)","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","> You can dynamically load remote modules using this:\r\n> \r\n> ```js\r\n> \/\/ Initializes the share scope.\r\n> \/\/ This fills it with known provided modules from this build and all remotes\r\n> await __webpack_init_sharing__(\"default\");\r\n> \/\/ TODO: load the script tag somehow. e. g. with a script loader\r\n> const container = window.application_a;\r\n> \/\/ Initialize the container, it may provide shared modules\r\n> await container.init(__webpack_share_scopes__.default);\r\n> const module = await container.get(\".\/module\");\r\n> ```\r\n\r\nI am able to load remote module dynamically with the above approach. Just curious if I can pass props to the remote component? If yes, refer some sample code please!","```tsx\r\nconst factory = await container.get(moduleToLoad); \/\/ where moduleToLoad is the path to the module (including a `\/.` if I recall correctly\r\nconst Module = factory();\r\n\r\nModule.default(\/* pass props here*\/); \/\/ this is the function, or component or whatever that is being federated\r\n```\r\n","> ```tsx\r\n> const factory = await container.get(moduleToLoad); \/\/ where moduleToLoad is the path to the module (including a `\/.` if I recall correctly\r\n> const Module = factory();\r\n> \r\n> Module.default(\/* pass props here*\/); \/\/ this is the function, or component or whatever that is being federated\r\n> ```\r\n\r\n@royriojas  thank you for your reply. I was trying the follow the steps you mentioned. But now luck. In my component I have a property called 'name' with a type of string I was trying to pass the data like Module.default({name:'abcd'}) which did not work Also I tried with Module.default(name='abcd') which is also not working. Can you please help me here.","How are you exporting your component? is that the default? otherwise you\nmight not need the default keyword\n\n\n\n\nRoy Ronald Riojas Montenegro\n\n\n\nOn Mon, Apr 12, 2021 at 5:04 PM Somnath ***@***.***> wrote:\n\n> const factory = await container.get(moduleToLoad); \/\/ where moduleToLoad is the path to the module (including a `\/.` if I recall correctlyconst Module = factory();\n> Module.default(\/* pass props here*\/); \/\/ this is the function, or component or whatever that is being federated\n>\n> @royriojas <https:\/\/github.com\/royriojas> thank you for your reply. I was\n> trying the follow the steps you mentioned. But now luck. In my component I\n> have a property called 'name' with a type of string I was trying to pass\n> the data like Module.default({name:'abcd'}) which did not work Also I tried\n> with Module.default(name='abcd') which is also not working. Can you please\n> help me here.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/webpack\/webpack\/issues\/11033#issuecomment-818320826>,\n> or unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AABABWSINU5VQRE6Z2QPYSTTIODCXANCNFSM4N5DZLIA>\n> .\n>\n","> How are you exporting your component? is that the default? otherwise you might not need the default keyword Roy Ronald Riojas Montenegro\r\n> [\u2026](#)\r\n> On Mon, Apr 12, 2021 at 5:04 PM Somnath ***@***.***> wrote: const factory = await container.get(moduleToLoad); \/\/ where moduleToLoad is the path to the module (including a `\/.` if I recall correctlyconst Module = factory(); Module.default(\/* pass props here*\/); \/\/ this is the function, or component or whatever that is being federated @royriojas <https:\/\/github.com\/royriojas> thank you for your reply. I was trying the follow the steps you mentioned. But now luck. In my component I have a property called 'name' with a type of string I was trying to pass the data like Module.default({name:'abcd'}) which did not work Also I tried with Module.default(name='abcd') which is also not working. Can you please help me here. \u2014 You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub <[#11033 (comment)](https:\/\/github.com\/webpack\/webpack\/issues\/11033#issuecomment-818320826)>, or unsubscribe <https:\/\/github.com\/notifications\/unsubscribe-auth\/AABABWSINU5VQRE6Z2QPYSTTIODCXANCNFSM4N5DZLIA> .\r\n\r\nI am exporting as default. Here is the snippet :\r\n\r\nimport * as React from \"react\";\r\ninterface OwnProps {\r\n  name: string;\r\n}\r\nconst Widget: (React.FC<OwnProps>) = props => {\r\n  const renderMain = (): JSX.Element => {\r\n    return (\r\n      <div\r\n         \/\/ my additional implementation goes here\r\n          {props.children}\r\n      <\/div>\r\n    );\r\n  }\r\n  return renderMain();\r\n}\r\nexport default Widget;\r\n\r\nI am loading the above component from my host app port 3001 and remote component is running in port 3002\r\n\r\n","Could you share your webpack config for remotes?\n\nRoy Ronald Riojas Montenegro\n\n\n\nOn Mon, Apr 12, 2021 at 5:22 PM Somnath ***@***.***> wrote:\n\n> How are you exporting your component? is that the default? otherwise you\n> might not need the default keyword Roy Ronald Riojas Montenegro\n> \u2026 <#m_2640954308268869088_>\n> On Mon, Apr 12, 2021 at 5:04 PM Somnath *@*.**> wrote: const factory =\n> await container.get(moduleToLoad); \/\/ where moduleToLoad is the path to the\n> module (including a \/. if I recall correctlyconst Module = factory();\n> Module.default(\/ pass props here*\/); \/\/ this is the function, or\n> component or whatever that is being federated @royriojas\n> <https:\/\/github.com\/royriojas> https:\/\/github.com\/royriojas thank you for\n> your reply. I was trying the follow the steps you mentioned. But now luck.\n> In my component I have a property called 'name' with a type of string I was\n> trying to pass the data like Module.default({name:'abcd'}) which did not\n> work Also I tried with Module.default(name='abcd') which is also not\n> working. Can you please help me here. \u2014 You are receiving this because you\n> were mentioned. Reply to this email directly, view it on GitHub <#11033\n> (comment)\n> <https:\/\/github.com\/webpack\/webpack\/issues\/11033#issuecomment-818320826>>,\n> or unsubscribe\n> https:\/\/github.com\/notifications\/unsubscribe-auth\/AABABWSINU5VQRE6Z2QPYSTTIODCXANCNFSM4N5DZLIA\n> .\n>\n> I am exporting as default. Here is the snippet :\n>\n> import * as React from \"react\";\n> interface OwnProps {\n> name: string;\n> }\n> const Widget: (React.FC) = props => {\n> const renderMain = (): JSX.Element => {\n> return (\n> <div\n> \/\/ my additional implementation goes here\n> {props.children}\n>\n> );\n> }\n> return renderMain();\n> }\n> export default Widget;\n>\n> I am loading the above component from my host app port 3001 and remote\n> component is running in port 3002\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/webpack\/webpack\/issues\/11033#issuecomment-818327792>,\n> or unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AABABWRZMCU7N3GFD7RA3ZLTIOFGBANCNFSM4N5DZLIA>\n> .\n>\n","> Could you share your webpack config for remotes? Roy Ronald Riojas Montenegro\r\n> [\u2026](#)\r\n> On Mon, Apr 12, 2021 at 5:22 PM Somnath ***@***.***> wrote: How are you exporting your component? is that the default? otherwise you might not need the default keyword Roy Ronald Riojas Montenegro \u2026 <#m_2640954308268869088_> On Mon, Apr 12, 2021 at 5:04 PM Somnath *@*.**> wrote: const factory = await container.get(moduleToLoad); \/\/ where moduleToLoad is the path to the module (including a \/. if I recall correctlyconst Module = factory(); Module.default(\/ pass props here*\/); \/\/ this is the function, or component or whatever that is being federated @royriojas <https:\/\/github.com\/royriojas> https:\/\/github.com\/royriojas thank you for your reply. I was trying the follow the steps you mentioned. But now luck. In my component I have a property called 'name' with a type of string I was trying to pass the data like Module.default({name:'abcd'}) which did not work Also I tried with Module.default(name='abcd') which is also not working. Can you please help me here. \u2014 You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub <#11033 (comment) <[#11033 (comment)](https:\/\/github.com\/webpack\/webpack\/issues\/11033#issuecomment-818320826)>>, or unsubscribe https:\/\/github.com\/notifications\/unsubscribe-auth\/AABABWSINU5VQRE6Z2QPYSTTIODCXANCNFSM4N5DZLIA . I am exporting as default. Here is the snippet : import * as React from \"react\"; interface OwnProps { name: string; } const Widget: (React.FC) = props => { const renderMain = (): JSX.Element => { return ( <div \/\/ my additional implementation goes here {props.children} ); } return renderMain(); } export default Widget; I am loading the above component from my host app port 3001 and remote component is running in port 3002 \u2014 You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub <[#11033 (comment)](https:\/\/github.com\/webpack\/webpack\/issues\/11033#issuecomment-818327792)>, or unsubscribe <https:\/\/github.com\/notifications\/unsubscribe-auth\/AABABWRZMCU7N3GFD7RA3ZLTIOFGBANCNFSM4N5DZLIA> .\r\n\r\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\r\nconst ModuleFederationPlugin = require(\"webpack\").container\r\n  .ModuleFederationPlugin;\r\nconst path = require(\"path\");\r\n\r\nmodule.exports = {\r\n  entry: \".\/src\/index\",\r\n  mode: \"development\",\r\n  devServer: {\r\n    contentBase: path.join(__dirname, \"dist\"),\r\n    port: 3002,\r\n  },\r\n  output: {\r\n    publicPath: \"auto\",\r\n  },\r\n  resolve: {\r\n    extensions: [\".ts\", \".tsx\", \".js\"],\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: \/bootstrap\\.tsx$\/,\r\n        loader: \"bundle-loader\",\r\n        options: {\r\n          lazy: true,\r\n        },\r\n      },\r\n      {\r\n        test: \/\\.tsx?$\/,\r\n        loader: \"babel-loader\",\r\n        exclude: \/node_modules\/,\r\n        options: {\r\n          presets: [\"@babel\/preset-react\", \"@babel\/preset-typescript\"],\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  plugins: [\r\n    new ModuleFederationPlugin({\r\n      name: \"app2\",\r\n      filename: \"remoteEntry.js\",\r\n      exposes: {\r\n        \".\/Button\": \".\/src\/Button\",\r\n        \".\/Widget\": \".\/src\/Widget\",\r\n      },\r\n      shared: [\"react\", \"react-dom\"],\r\n    }),\r\n    new HtmlWebpackPlugin({\r\n      template: \".\/public\/index.html\",\r\n    }),\r\n  ],\r\n};\r\n","For people not sure how to implement this for React lazy loaded components, assuming you have the following config available (hardcode it, preload it, add using SSR, or whatever other method of choice):\r\n```ts\r\n\/* This is basically the same object you'd have in webpack config *\/\r\nwindow.__remotes__ = {\r\n    'myapp': 'myapp@http:\/\/localhost:9001\/remoteEntry.js'\r\n};\r\n```\r\ndo:\r\n```ts\r\ndeclare global {\r\n    interface Window {\r\n        __remotes__: Record<string, string>;\r\n    }\r\n\r\n    const __webpack_init_sharing__: any;\r\n    const __webpack_share_scopes__: any;\r\n}\r\n```\r\n```ts\r\nasync function dynamicImport (path: string) {\r\n    const [ remoteName, remoteUrl ] = Object.entries(window.__remotes__).find(([ r ]) => path.startsWith(r));\r\n\r\n    if (!remoteName) throw new Error(`URL not configured for remote '${path}'.`);\r\n    if (remoteUrl.split('@').length !== 2) throw new Error(`URL misconfigured for remote '${path}'`);\r\n\r\n    const [ moduleName, moduleUrl ] = remoteUrl.split('@');\r\n\r\n    await __webpack_init_sharing__('default');\r\n\r\n    await new Promise<void>((resolve, reject) => {\r\n        const element = document.createElement('script');\r\n\r\n        element.src = moduleUrl;\r\n        element.type = 'text\/javascript';\r\n        element.async = true;\r\n\r\n        element.onload = () => {\r\n            element.parentElement.removeChild(element);\r\n            resolve();\r\n        };\r\n\r\n        element.onerror = (err) => {\r\n            element.parentElement.removeChild(element);\r\n            reject(err);\r\n        };\r\n\r\n        document.head.appendChild(element);\r\n    });\r\n\r\n    const container = window[moduleName];\r\n    await container.init(__webpack_share_scopes__.default);\r\n\r\n    const component = `.${path.replace(remoteName, '')}`;\r\n    const factory = await container.get(component);\r\n\r\n    return factory();\r\n}\r\n```\r\nand then just replace `import(...)` with `dynamicImport`:\r\n```ts\r\nconst MyComponent = React.lazy(() => dynamicImport('myapp\/MyComponent'));\r\n```","Btw, @sokra @ScriptedAlchemy - are these `__webpack_init_sharing__` and `__webpack_share_scopes__` going to be added to `@types\/webpack-env`? Is that package owned by webpack team?","> Is that package owned by webpack team?\r\n\r\nnope, but we could add that to our own typings...","@sokra @ScriptedAlchemy I'm able to load the component dynamically, however, it seems like host container cannot share the React Context with the Remote container. Do you have any idea why? I have been stuck at this for some time\r\n\r\nI tried to combine these 2 examples to enable the remote containers to consume context from the host container, but it doesn't seem to work:\r\n- shared-context: https:\/\/github.com\/module-federation\/module-federation-examples\/tree\/master\/shared-context\r\n- dynamic-system-host: https:\/\/github.com\/module-federation\/module-federation-examples\/tree\/master\/dynamic-system-host","It should work. Is more than one copy of react getting loaded? If not then I don't see a reason why it wouldn't work. \n\nAre you perhaps not sharing something that depends on react context. Like a node module","Thank you @ScriptedAlchemy for your reply. Really appreciate it!\r\n\r\n> Is more than one copy of react getting loaded? \r\n\r\nI'm loading just one copy of react, I'm setting the webpack config for both host and remote containers to be\r\n\r\n`react: { singleton: true, requiredVersion: deps['react'] }`\r\n\r\nIf I understand correctly, `singleton` would ensure that only one copy of react is loaded\r\n\r\n> Are you perhaps not sharing something that depends on react context. Like a node module\r\n\r\nMay I clarify what do you mean by this?\r\n\r\nEDIT:\r\nI managed to make it work with the example repo. However, I realise that the example repo is using `yarn workspaces`. I'm having difficulty in replicating it in my own project using `npm` + `lerna` setup. Do you know whether this could be the source of the issue?\r\n","Regarding dynamic remotes. They might be getting initialized too late or early, a remote can only be initialized once so if it depends on something from another remotes share scope as a singleton, the scare scopes cannot be reinitialized with more modules at a later stage. ","I have tried the mentioned by @grzegorzjudas, but I can't get past this error\r\n`TypeError: __webpack_init_sharing__ is not a function`\r\n\r\nIs there something else I am needing to expose these values?","That won't work if your consuming app doesn't have anything shared. If you're not planning to share any modules from the consuming app then you don't want to init sharing since there's nothing to share. ","I created a library that abstracts some of the business logic and works for suspense, loadable or others https:\/\/github.com\/MichaelDurfey\/mf-dynamic-remote-component","@MichaelDurfey nice. Would love to house this under the federation git organization if you\u2019d want to maintain it there. Utilities like this make or break the experience :) ","@ScriptedAlchemy Sounds good to me! ","@ScriptedAlchemy  I Want to know how we can dynamically fetch remotes on server-side (in node server)\r\nalso If we are able to fetch remote components on server then I believe it's async process\r\nthen how we can make it synchronous process as we can't add 'await' to renderToString(<App \/>) ?","The node technology is currently proprietary. \n\nThere's a package on npm called node-mf, it's the least buggy option. \n\nI do plan to release module-federation\/node in the near future. \n\nOur internal technology is the the most stable and powers many enterprise clients. It's also what's powering SSR support on next.js and is the core tech running module-federation\/aegis (hexagonal backend architecture that enables federation for any language on any compute primitive) \n\nAlso works sync or async ","> For people not sure how to implement this for React lazy loaded components, assuming you have the following config available (hardcode it, preload it, add using SSR, or whatever other method of choice):\r\n> \r\n> ```ts\r\n> \/* This is basically the same object you'd have in webpack config *\/\r\n> window.__remotes__ = {\r\n>     'myapp': 'myapp@http:\/\/localhost:9001\/remoteEntry.js'\r\n> };\r\n> ```\r\n> \r\n> do:\r\n> \r\n> ```ts\r\n> declare global {\r\n>     interface Window {\r\n>         __remotes__: Record<string, string>;\r\n>     }\r\n> \r\n>     const __webpack_init_sharing__: any;\r\n>     const __webpack_share_scopes__: any;\r\n> }\r\n> ```\r\n> \r\n> ```ts\r\n> async function dynamicImport (path: string) {\r\n>     const [ remoteName, remoteUrl ] = Object.entries(window.__remotes__).find(([ r ]) => path.startsWith(r));\r\n> \r\n>     if (!remoteName) throw new Error(`URL not configured for remote '${path}'.`);\r\n>     if (remoteUrl.split('@').length !== 2) throw new Error(`URL misconfigured for remote '${path}'`);\r\n> \r\n>     const [ moduleName, moduleUrl ] = remoteUrl.split('@');\r\n> \r\n>     await __webpack_init_sharing__('default');\r\n> \r\n>     await new Promise<void>((resolve, reject) => {\r\n>         const element = document.createElement('script');\r\n> \r\n>         element.src = moduleUrl;\r\n>         element.type = 'text\/javascript';\r\n>         element.async = true;\r\n> \r\n>         element.onload = () => {\r\n>             element.parentElement.removeChild(element);\r\n>             resolve();\r\n>         };\r\n> \r\n>         element.onerror = (err) => {\r\n>             element.parentElement.removeChild(element);\r\n>             reject(err);\r\n>         };\r\n> \r\n>         document.head.appendChild(element);\r\n>     });\r\n> \r\n>     const container = window[moduleName];\r\n>     await container.init(__webpack_share_scopes__.default);\r\n> \r\n>     const component = `.${path.replace(remoteName, '')}`;\r\n>     const factory = await container.get(component);\r\n> \r\n>     return factory();\r\n> }\r\n> ```\r\n> \r\n> and then just replace `import(...)` with `dynamicImport`:\r\n> \r\n> ```ts\r\n> const MyComponent = React.lazy(() => dynamicImport('myapp\/MyComponent'));\r\n> ```\r\n\r\nHow do you handle errors from the script tag?\r\nFor example, there was an issue loading the remote entry because of a missing chunk.","> How do you handle errors from the script tag? For example, there was an issue loading the remote entry because of a missing chunk.\r\n\r\n@tzachbon \r\nTry defining this in the remote's Webpack config\r\n```\r\noutput {\r\n  publicPath: 'auto'\r\n}\r\n```\r\n\r\nI believe the remote is trying to fetch its resources on the host instead of its own server. Webpack is clever enough to resolve this for you. See [here](https:\/\/stackoverflow.com\/questions\/69632866\/uncaught-chunkloaderror-loading-chunk-module-federation-webpack-5-while-loadi)","If you only need dynamic connection code, im working on delegate modules - have just released it for next.js and will work on normal support.\r\n\r\nThis lets you use static imports, but can dynamically resolve the location of the remote container as needed. \r\n\r\nhttps:\/\/github.com\/module-federation\/module-federation-examples\/pull\/2756\r\nhttps:\/\/github.com\/module-federation\/universe\/tree\/main\/packages\/nextjs-mf#beta-delegate-modules","@tzachbon You could return a custom function that wraps `factory()` in try\/catch clause. Haven't tried it, but something along this should work:\r\n```ts\r\nreturn () => {\r\n    try {\r\n        factory();\r\n    } catch (err) {\r\n        \/\/ handle the error somehow\r\n    }\r\n};\r\n```","I got stuck with Vite for few days https:\/\/github.com\/originjs\/vite-plugin-federation\/issues\/518 _(and I started to be desperate)_ until I found this issue @MichaelDurfey library.\r\n\r\nThis library was a gem to me :+1:\r\n\r\nThanks again!"],"labels":["module-federation"]},{"title":"fix: should not fail when output directory is the root directory","body":"Fixes #10544.\r\n\r\nThough the `EISDIR` error code is not mentioned in the POSIX standard,\r\nFreeBSD and `memfs` both throw this error when trying to run `mkdir` on\r\n`\/`. So essentially we should treat it the same as `EEXIST`.\r\n\r\nReferences:\r\n* https:\/\/bugs.freebsd.org\/bugzilla\/show_bug.cgi?id=59739\r\n* https:\/\/github.com\/streamich\/memfs\/pull\/326\/\r\n\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nA bugfix\r\n\r\n**Did you add tests for your changes?**\r\n\r\nI'm not sure how I should add tests, because this issue only happens on BSD systems.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNothing","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","\/cc @sodatea friendly ping","I think I need to work out a more generic way to deal with the root directory case, instead of relying on the error code because different OSes\ud83d\ude05\r\nI'll try to fix it this weekend.","<!-- identifier: review-outdated -->\n\n@sodatea Thanks for your update.\n\nI labeled the Pull Request so reviewers will review it again.\n\n@sokra Please review the new changes.","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon."],"labels":["PR: CI-ok","PR: review-outdated"]},{"title":"webpack 5 can't set output path to `\/`","body":"# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nWhen the `output.path` is set to `\/`, webpack 5 will fail with an `EISDIR` error. It works in webpack 4.\r\n`\/` is commonly used when targeting an in-memory filesystem such as https:\/\/github.com\/streamich\/memfs; we used it quite often in tests.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n```sh\r\ngit clone https:\/\/github.com\/sodatea\/webpack-rootdir-bug.git\r\ncd webpack-rootdir-bug\r\nyarn && yarn build\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nShould successfully build.\r\n\r\n**Other relevant information:**\r\nwebpack version: v5.0.0-beta.14\r\nNode.js version: v12.16.1\r\nOperating System: macOS Catalina 10.15.3\r\nAdditional tools: None\r\n","comments":["Yep, `memory-fs` for dev server also has that limitation, what is use case?","See the linked pull request.\r\n\r\n`memory-fs` throws `EEXIST`, which webpack's `fs.mkdirp` implementation could recognize.\r\nBut BSD systems and `memfs` throws `EISDIR`. The refactored `fs.mkdirp` in webpack 5 couldn't handle that error and fails.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Still valid"],"labels":["bug","webpack-5"]},{"title":"Set cross origin loading on the fly (at runtime)","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\nActually we can set [`output.crossOriginLoading`](https:\/\/webpack.js.org\/configuration\/output\/#outputcrossoriginloading) in the Webpack configuration.\r\n\r\nIt would be nice to also be able to set this **on the fly** (at runtime).\r\n\r\nKind of how `output.publicPath` can be [set on the fly](https:\/\/webpack.js.org\/guides\/public-path\/#on-the-fly) using `__webpack_public_path__`.\r\n\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\n\r\nI'm using Webpack to build a library that may be integrated using different [cross origin](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Attributes\/crossorigin) behaviour depending on the client needs (to simplify sometimes the library may be used as public or sometimes as private).\r\n\r\nMy personal use-case is the following:\r\n\r\nI would like to be able to propagate the \"initial\" [`crossorigin`](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTML\/Attributes\/crossorigin) behaviour from the root `<script>`:\r\n\r\n```html\r\n<script crossorigin=\"anonymous\" src=\"https:\/\/domain.com\/my-webpack-bundle\/entry-point.js\" \/>\r\n```\r\n\r\n```html\r\n<script crossorigin=\"use-credentials\" src=\"https:\/\/domain.com\/my-webpack-bundle\/entry-point.js\" \/>\r\n```\r\n\r\nI'm using some technics to extract the initial `crossorigin` value. But I'm struggling propagating that value dynamically to Webpack chunks fetching mechanism (basic JSONP in my case).\r\n\r\n\r\n**How should this be implemented in your opinion?**\r\n\r\nThe `crossOriginLoading` condition should be handled directly within the JSONP template:\r\n\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/6f413ae2e63897aef5e1956cb1c351ab33f6dbfe\/lib\/web\/JsonpTemplatePlugin.js#L147-L155\r\n\r\nThe JSONP template should check the condition based on a new `__webpack_cross_origin_loading__` global variable exposed by Webpack and defined by [`output. crossOriginLoading`](https:\/\/webpack.js.org\/configuration\/output\/#outputcrossoriginloading).\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n\r\n**Workaround**\r\n\r\nAs a workaround I'm planing to build 2 versions of my Webpack bundle with different `output.crossOriginLoading` settings, one with `anonymous` and another one with `use-credentials` and use a custom entry point that will \"route\" to the appropriate \"core\" entry point.\r\n\r\nDoes anyone know some workaround easier to implement? \ud83d\ude05 ","comments":["<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump"],"labels":["enhancement"]},{"title":"Add async-webworker target","body":"As asked at #10320 and following the discussion in #6472, this PR introduces a new target called `async-webworker` for webpack 5.\r\nDynamic import statements in web workers are transpiled by default into importScripts statements. Those statements are synchronous and yield bad performance. The aforementioned target transpiles dynamic imports into fetch followed by dynamic code evaluation. Using this technique the chunks can be downloaded asynchronously.\r\n\r\nAdditional changes that has been made to support this feature:\r\n* `self[\"webpackChunk\"]` was changed to an object that maps chunk IDs to their corrosponding execution completion callback\r\n* `installedChunks` stores chunk loading state: \r\n  * `1` for loaded chunks\r\n  * `Promise` for a chunk that is already loading (can be reused for different requests)\r\n* Chunks invoke `self[\"webpackChunk\"][chunk.id]` instead of `self[\"webpackChunk\"]`\r\n\r\nNot yet implemented:\r\n* Timeout handling - what should happen if fetch takes more than X seconds\r\n* Verifying fetch return code to assert success\r\n* Make sure redirect return codes (3XX) works as expected\r\n\r\nWhat kind of change does this PR introduce?\r\nNew feature\r\n\r\nDid you add tests for your changes?\r\nI will add tests once we agree on the implementation details\r\n\r\nDoes this PR introduce a breaking change?\r\nNo\r\n\r\nWhat needs to be documented once your changes are merged?\r\nTargets table\r\n\r\n","comments":["[![CLA assistant check](https:\/\/cla.js.foundation\/pull\/badge\/not_signed)](https:\/\/cla.js.foundation\/webpack\/webpack?pullRequest=10361) <br\/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https:\/\/cla.js.foundation\/webpack\/webpack?pullRequest=10361) before we can accept your contribution.<br\/>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","<!-- identifier: tests-result -->\n\nIt looks like this Pull Request doesn't include [enough test cases](https:\/\/codecov.io\/gh\/webpack\/webpack\/compare\/4109327e88eaad12c957ad8cdd8e18ed8d01495c...0e82f94879dbc7daefb69435ea04619c8ec7379c) (based on Code Coverage analysis of the PR diff).\n\nA PR need to be covered by tests if you add a new feature (we want to make sure that your feature is working) or if you fix a bug (we want to make sure that we don't run into a regression in future).\n\n@giladsegal Please check if this is appliable to your PR and if you can add more test cases.\n\nRead the [test readme](https:\/\/github.com\/webpack\/webpack\/blob\/master\/test\/README.md) for details how to write test cases.","<!-- identifier: head-master -->\n\nHi @giladsegal.\n\nJust a little hint from a friendly bot about the best practice when submitting pull requests:\n\n> Don't submit pull request from your own `master` branch. It's recommended to create a feature branch for the PR.\n\n*You don't have to change it for this PR, just make sure to follow this hint the next time you submit a PR.*","I would love to hear your input about this PR so I can polish it up \ud83d\ude4f (add tests, documentation etc')\r\nThanks!","I would love to push this forward, still waiting for feedback","Don't make fun of me when I ask: But we have been doing some \"spring cleaning\" on all our PR's and priorities and this one slipped through the cracks. Would you be willing to rebase or work on this? \ud83d\ude47\u200d\u2642\ufe0f\ud83d\ude47\u200d\u2642\ufe0f\ud83d\ude47\u200d\u2642\ufe0f\ud83d\ude47\u200d\u2642\ufe0f\ud83d\ude47\u200d\u2642\ufe0f\ud83d\ude47\u200d\u2642\ufe0f\ud83d\ude47\u200d\u2642\ufe0f\ud83d\ude47\u200d\u2642\ufe0f","Hey @TheLarkInn ! I'm currently busy with other tasks and unfortunately can't push this forward","No problems at all! We can take the reigns! Appreciate the quick response. "],"labels":["PR: CI-ok","PR: unreviewed","PR: tests-needed","PR: conflict"]},{"title":"move source-map-loader into core","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nBundle codes with eval sourcemap, but reference to a package that ships with standalone sourcemap will not convert standalone sourcemap to eval sourcemap, this will emit a lot of warning in browser console.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n1. Import a package that ships with standalone sourcemap\r\n2. Set `devtool: 'eval'` in webpack.config.js\r\n3. Start with dev server\r\n4. Check browser console\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/19658647\/72504001-f0c61b00-3877-11ea-8b23-192ebc6cce55.png)\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\nStandalone sourcemap in package should be converted to eval sourcemap or truncated\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.39.3 (Not able to tryout latest due typescript types issue)\r\nNode.js version: 12.13.0\r\nOperating System: Ubuntu 18.04.3\r\nAdditional tools:\r\n","comments":["Please try to use the `source-map-loader` to import the existing SourceMap.","Hi @sokra. Is there a way to avoid installing one more package? I don't care about this sourcemaps. Everything worked fine before this release https:\/\/github.com\/webpack\/webpack\/releases\/tag\/v4.41.5","@TrySound ~~It's not about webpack, it's about Chrome:~~\r\n>  ~~- We report more errors than previously, which is a WONTFIX.~~\r\n\r\n~~https:\/\/bugs.chromium.org\/p\/chromium\/issues\/detail?id=1052872#c14~~\r\n\r\nUPD: I am not sure about it.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump, I think we should improve it out of box","I add this loader to solve the problem\r\n```\r\nmodule.exports = source => {\r\n  return source.replace(\/\\n[^\\n]*sourceMappingURL[^\\n]*\\n?\/, '\\n');\r\n};\r\n```","Yep, we need an option to import default behavior of existing source maps, possible situations:\r\n- remove them if you don't need it (no warnings)\r\n- handle them (move `source-map-loader` into core, logic it very simple, so it should be not hard)\r\n- keep as is (maybe useful in some cases)","I think we can move this into the core.","Low priority, if anyone want to help, PR welcome\r\n","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Activate","Oh no","Still a problem"],"labels":["Send a PR"]},{"title":"Fix:9206 index.js is not resolved by dll reference plugin ","body":"**What kind of change does this PR introduce?**\r\n\r\nBugfix for issue [9206](https:\/\/github.com\/webpack\/webpack\/issues\/9206)\r\n\r\n**Tests**\r\nhttps:\/\/github.com\/andrescst\/webpack\/commit\/8cf87ef6bda17197bfd69f46a64d366016283174\r\nOne for the vendor, for creating the manifest file.\r\nOne for the DLLReference who uses the manifest.\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nThe file under the folder in which you want to access should be called \"index.js\"\r\n","comments":["[![CLA assistant check](https:\/\/cla.js.foundation\/pull\/badge\/not_signed)](https:\/\/cla.js.foundation\/webpack\/webpack?pullRequest=10207) <br\/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https:\/\/cla.js.foundation\/webpack\/webpack?pullRequest=10207) before we can accept your contribution.<br\/>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","This is weird, I already signed it and because of that, I am not able to sign it again.\r\n\r\n> [![CLA assistant check](https:\/\/camo.githubusercontent.com\/246c4bf37547ead9332a6afcd321d7f65edb2fe3\/68747470733a2f2f636c612e6a732e666f756e646174696f6e2f70756c6c2f62616467652f6e6f745f7369676e6564)](https:\/\/cla.js.foundation\/webpack\/webpack?pullRequest=10207)\r\n> Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you \r\nsign our [Contributor License Agreement](https:\/\/cla.js.foundation\/webpack\/webpack?pullRequest=10207) before we can accept your contribution.\r\n\r\n","<!-- identifier: review-outdated -->\n\n@andruts Thanks for your update.\n\nI labeled the Pull Request so reviewers will review it again.\n\n@sokra Please review the new changes."],"labels":["PR: CI-ok","PR: review-outdated","PR: conflict"]},{"title":"feat(wasm): allow WebAssembly module filenames to use more path templates (e.g. [file], [base])","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\nSolves https:\/\/github.com\/webpack\/webpack\/issues\/9517 (I used this to dive into the webpack source a bit since this issue looked inactive)\r\n\r\nThe problem is that currently you can only use `[hash]` to set a wasm output filename:\r\n\r\n```\r\noutput: {\r\n  webassemblyModuleFilename: \"[hash].wasm\"\r\n},\r\n```\r\n\r\nMore options would be useful, such as: `[base].wasm`, etc.\r\n\r\nChanges were needed in `TemplatedPathPlugin.js` because the wasm path templates were not being set correctly. For example, in the output, I would get the path string:\r\n\r\n```\r\nreadFile(join(__dirname, \"[base].wasm\"), ...\r\n```\r\n\r\nbut, I wanted the output:\r\n\r\n```\r\nreadFile(join(__dirname, \"\" + {\".\/wasm.wat\":\"wasm.wat\"}[wasmModuleId] + \".wasm\"), ...\r\n```\r\n\r\nI adjusted the `TemplatedPathPlugin` so that it could be easier to handle the many templates that stem from the `filename` property (e.g. `base`, `ext`, `file`) in this situation.\r\n\r\n\r\nI added tests using configs that encompass many of the template cases: `webassemblyModuleFilename: \"[fullhash].[hash].[hash:16].[base][ext].wasm\"`\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nfeature\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo, there should be no breaking changes.\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nwasm in general seems to not be documented well, so that in addition to the new path templates for `webassemblyModuleFilename`.\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon."],"labels":["PR: CI-ok","PR: unreviewed"]},{"title":"Pass options to a devtool plugin thru devtool option","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\n\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nA feature that closes [this](https:\/\/github.com\/webpack\/webpack\/projects\/5#card-10780167) card\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYep\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNope\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nAbout new features of the `devtool` option\r\n\r\n---\r\nAfter done with it, I will create a PR with these changes to webpack 4 and the docs","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.",">  it complicates for checking the sourcemap option in plugins\r\n\r\n@evilebottnawi devtool plugins check the options by the scheme inside of themself"],"labels":["PR: CI-ok","PR: unreviewed","PR: tests-needed"]},{"title":"Webpack sourcemaps do not work well with ES6 imports (repost)","body":"<!-- Please don't delete this template because we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n\r\n# Bug report\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nThis is a repost of #4560, which was closed due to inactivity.\r\n\r\nCurrent behavior is that sourcemaps do not work well with ES6 imports.\r\n\r\nExample:\r\n`import { printToConsole } from '.\/util';` becomes `_util__WEBPACK_IMPORTED_MODULE_0__.printToConsole`. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n1. Clone minimal project: https:\/\/github.com\/abirmingham\/webpack-sourcemap-repro\r\n2. Open <repository>\/index.html with Chrome. I used Chrome `74.0.3729.169 (Official Build) (64-bit)` but the issue has been present in all builds for awhile. Also tested Firefox `68.0 (64-Bit)`.\r\n3. Open developer tools\r\n4. Set a breakpoint on line 3 of index.js\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub repository -->\r\n<!-- The most helpful is a minimal reproduction with instructions on how to reproduce -->\r\n<!-- Repositories with too many files or large `webpack.config.js` files are not suitable -->\r\n<!-- Please only add small code snippets directly into this issue -->\r\n<!-- https:\/\/gist.github.com is a good place for longer code snippets -->\r\n<!-- If your issue is caused by a plugin or loader, please create an issue on the loader\/plugin repository instead -->\r\n\r\n**What is the expected behavior?**\r\n\r\n1. In scope pane, `printToConsole` should be shown. Instead, `_util__WEBPACK_IMPORTED_MODULE_0__.printToConsole` is shown. There are likely other areas where it should show up mapped as well.\r\n2. User should be able to input `printToConsole('foo')` and see the `printToConsole` function successfully execute. Instead, `Uncaught ReferenceError: printToConsole is not defined` is shown. (I'm curious as to whether this part is even solvable by webpack or if I am making a browser feature request here).\r\n\r\n<!-- \"It should work\" is not a helpful explanation -->\r\n<!-- Explain exactly how it should behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.37.0\r\nNode.js version: 8.10.0\r\nOperating System: Ubuntu\r\nAdditional tools: Chrome 74.0.3729.169 (Official Build) (64-bit)\r\n\r\n**Chrome**\r\n![image](https:\/\/user-images.githubusercontent.com\/1661498\/61755921-8b80e980-ad6e-11e9-8366-f4fc998b04b0.png)\r\n**Firefox**\r\n![image](https:\/\/user-images.githubusercontent.com\/1661498\/61814946-09d89c80-adfe-11e9-9f0c-9ccc339d708d.png)\r\n\r\n","comments":["<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","@abirmingham problem still exists?","@evilebottnawi yes.","@abirmingham Do you use latest versions of webpack and terser plugin?","@evilebottnawi yes. I've reproduced the issue using a `create-react-app` template and `webpack-dev-server` using the newest versions of webpack\/terser-webpack-plugin and chrome browser at https:\/\/github.com\/abirmingham\/repro-webpack-9461\/commit\/c05be9ca8ba07da4109a62ec221a08f829bcc8ae\r\n\r\nTo reproduce:\r\n1. Checkout the repository\r\n2. Run `npm run start`\r\n3. Add a breakpoint to `App.js`\r\n4. Note that `logToConsole` is not defined\r\n5. Note that `_SomeDep__WEBPACK_IMPORTED_MODULE_3__.logToConsole` is defined\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/1661498\/72457767-2be32400-377c-11ea-997e-5582247cf922.png)\r\n\r\nChrome version Version 79.0.3945.117 (Official Build) (64-bit)","Source maps works as expected, what is a problem? `logToConsole` should be not defined in global scope because it is ES modules","In scope pane, printToConsole should be shown. Instead, \r\n> _util__WEBPACK_IMPORTED_MODULE_0__.printToConsole is shown. There are likely other areas where it should show up mapped as well.\r\n\r\nWebpack changes some names for internal purpose, what is the problem with renaming, source maps contains an original code and allow to set breakpoints on source code.\r\n\r\n> User should be able to input printToConsole('foo') and see the printToConsole function successfully execute. Instead, Uncaught ReferenceError: printToConsole is not defined is shown. (I'm curious as to whether this part is even solvable by webpack or if I am making a browser feature request here).\r\n\r\nNo, as i described above it is a module scope (https:\/\/stackoverflow.com\/questions\/30287977\/es6-module-scope)","@evilebottnawi -\r\n\r\nIn the code, `logToConsole` is in scope in `App.js`. It would be useful if `logToConsole` was in scope in the browser as well. I agree that `logToConsole` should not be in global scope, just in scope in `App.js` because it is imported in `App.js`. I understand that this is complex, and may require additional browser support, because of certain requirements in the ES module spec. Nonetheless it would be quite useful, and I think that the current behavior is likely unexpected to most users.","> It would be useful if logToConsole was in scope in the browser as well.\r\n\r\nCan you clarify? Do you want to have `windows.logToConsole`?","> Can you clarify? Do you want to have windows.logToConsole?\r\n\r\nI assume you mean `window.logToConsole`? No, I don't. Sorry if I'm not being clear, let me try and explain using es6 modules directly in the browser, without webpack.\r\n\r\nI've added [a new commit](https:\/\/github.com\/abirmingham\/repro-webpack-9461\/commit\/426d2b0dd6a4c111bf2ee7b7ee313db372a9567c) to the repro. Please access `working-es6-modules-example\/index.html` in a browser and set a breakpoint in `app.js`, you will see the behavior that I'm looking for:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/1661498\/72819846-d1860f80-3c22-11ea-95c5-6ef1fce1745f.png)\r\n\r\nNote that you must serve the files through a webserver, e.g. `python3.6 -m http.server 8000` because [CORS applies to es6 modules](https:\/\/stackoverflow.com\/questions\/46992463\/es6-module-support-in-chrome-62-chrome-canary-64-does-not-work-locally-cors-er?rq=1).","I think it can be implement in webpack@5, we can't save module scope due some internal reasons in webpack@4, but it is possible for webpack@5","For webpack 4, use this plugin. This will simplify names if you're using `eval` and allow straight import vars to be used with  source maps when debugging (if they're not reassigned, which probably counts for 99.9% of the cases). \r\n\r\nSo this code:\r\n\r\n```js\r\nimport a, {b, c as d} from 'foo'\r\na()\r\n```\r\n\r\nbecomes \r\n\r\n```js\r\nvar __foo = webpack_require('...'); let {default: a, b, c: d} = __foo; if (typeof d === \"undefined\") d = _foo\r\n_foo.a()\r\n```\r\n\r\nhttps:\/\/gist.github.com\/staeke\/f197ff144e379aa884f91b95003f4ee1","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","@sokra this issue has been filed and closed several times now. Is it worth refiling? Should I consider it very unlikely to be fixed? Thanks.","@abirmingham somebody should send a fix, a lot of work with other problem"],"labels":["enhancement"]},{"title":"Support Windows network shares as absolute paths","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nWindows shares start with `\\\\`. It would be nice if webpack could output a bundle directly to a folder on a Windows share.\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nAllows `config.output.path` to start with `\\\\` which, on Windows systems, is a valid absolute path to a network share.\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNo - it is not clear to me how to \"test\" this.\r\nDo I add a test that checks if a path that starts with `\\\\` is now allowed?\r\nOr a test that depends on a network share being available and actually writing to that output?\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo.\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nhttps:\/\/webpack.js.org\/concepts\/output\/ should probably include an example of using a Windows share.\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["[![CLA assistant check](https:\/\/cla.js.foundation\/pull\/badge\/not_signed)](https:\/\/cla.js.foundation\/webpack\/webpack?pullRequest=9382) <br\/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https:\/\/cla.js.foundation\/webpack\/webpack?pullRequest=9382) before we can accept your contribution.<br\/>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This need to be documented (issue in webpack\/webpack.js.org will be filed when merged)","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","> Do I add a test that checks if a path that starts with `\\\\` is now allowed?\r\n\r\nYou can test this in `test\/Validation.test.js`. Instead of testing that an absolute path is allowed for `output.path`, test that an absolute path (network share) is forbidden for i. e. `output.filename`\r\n\r\n``` js\r\noutput: {\r\n  filename: \"\/\/computer\/share\/path\"\r\n}\r\n```\r\n\r\nThis should cause an validation error, because absolute paths are not allowed here.","> test that an absolute path (network share) is forbidden for i. e. `output.filename`\r\n> \r\n> ```js\r\n> output: {\r\n>   filename: \"\/\/computer\/share\/path\"\r\n> }\r\n> ```\r\n> \r\n> This should cause an validation error, because absolute paths are not allowed here.\r\n\r\nI'm not following. The point of this was to allow another form of absolute path for the `output.path`. I'm not seeing how `output.filename` relates. Could you please elaborate?","> Could you please elaborate?\r\n\r\nThey use the same check for absolute paths, just inversed. This way you test that network share paths are disallowed for `output.filename`. That's easy to test compared to really using an network share in CI...","I think I see what you're saying. How would that differ from just testing that a path starting with `\\\\` is allowed in `output.path`?","> How would that differ from just testing that a path starting with `\\\\` is allowed in `output.path`?\r\n\r\nYou can do this too.","I still intend to finish this but this has been kicked low on my priority list. If someone else wants to add the tests, please feel free.\r\n\r\nI might get inspired to push this over the finish line one night but I'd be happy if someone else took the lead.\r\n\r\nAs it stands, I'll be at TTITD and won't have time to look at this again until September.","\/cc @sokra this PR we should move in schema-utils, right?"],"labels":["PR: Abandoned but important","PR: unreviewed","PR: conflict"]},{"title":"Rule with issuer is not applied when importing via require.context","body":"# Bug report\r\n\r\n**What is the current behavior?**\r\nLoaders are not applied for files, imported via `require.context`, if rule has \"issuer\" option.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\nSee reproduction https:\/\/github.com\/huston007\/webpack-issuer-repro\r\n\r\nIn short:\r\nIn webpack.config:\r\n```\r\nrules: [\r\n      {\r\n        test: \/\\.svg\/,\r\n        issuer: \/\\.js\/, \/\/ Remove this line and everything works\r\n        loader: 'url-loader'\r\n      }\r\n    ]\r\n```\r\n\r\na.js:\r\n```\r\nfunction importAll (r) {\r\n  r.keys().forEach(r);\r\n}\r\n\r\nimportAll(require.context('.', false, \/\\.svg$\/));\r\n```\r\n\r\nBuild error:\r\n```\r\nWARNING in .\/circle.svg 1:0\r\nModule parse failed: Unexpected token (1:0)\r\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https:\/\/webpack.js.org\/concepts#loaders\r\n> <svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" viewBox=\"0 0 16 16\"><circle cx=\"8\" cy=\"8\" r=\"8\"\/><\/svg>\r\n @ . sync nonrecursive \\.svg$ .\/circle.svg\r\n @ .\/a.js\r\n```\r\n\r\nNote that it is doesn't matter what is inside [\"issuer\"](https:\/\/github.com\/huston007\/webpack-issuer-repro\/blob\/master\/webpack.config.js#L9) property.\r\nIt also breaks if using wildcarded require like `require('.\/'+fileName+'.svg')`\r\n\r\n**What is the expected behavior?**\r\nLoaders are applied in-spite of a way how file is imported: via direct require or via context.\r\n\r\n**Known workaround**\r\nIt is possible to workaround by inlining loader syntax like: `require.context('!file-loader!.\/', true, \/\\.svg$\/)`\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.35.0\r\nNode.js version: 10.15.0\r\nOperating System: macOS\r\n\r\nMaybe related to #6915","comments":["Looks like a bug, PR welcome","Same problem with ``import(`.\/${icon}.svg`)`` and ``require(`.\/${icon}.svg`)``\r\nMy config:\r\n```\r\n{\r\n  test: \/\\.svg$\/,\r\n  issuer: \/\\.jsx?$\/,\r\n  use: [\r\n    { loader: '@svgr\/webpack' },\r\n  ],\r\n},\r\n```","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","Same problem for me.\r\n\r\n**webpack.config.js**:\r\n\r\n```js\r\n      {\r\n        test: \/index\\.html$\/,\r\n        use: [\r\n            {\r\n              loader: 'file-loader',\r\n              options: {\r\n                \/\/ specifies output path relative to output.path\r\n                outputPath: '.\/',\r\n                name: '[name].[ext]',\r\n              },\r\n            },\r\n            \"extract-loader\",\r\n            {\r\n              loader: \"html-loader\",\r\n              options: {\r\n                  attributes: {\r\n                    list: [\r\n                      {\r\n                        tag: 'link',\r\n                        attribute: 'href',\r\n                        type: 'src',\r\n                      }\r\n                    ],\r\n                  },\r\n              }\r\n            }\r\n        ]\r\n      },\r\n      {\r\n        test: \/\\.(sa|sc)ss$\/,\r\n        use: (info) => ([\r\n          {\r\n            loader: 'file-loader',\r\n            options: {\r\n              esModule: false,\r\n              name: '[contenthash].css',\r\n              outputPath: 'css',\r\n              publicPath: path.basename(info.issuer) === 'index.html' ? '.\/css\/' : '..\/css\/',\r\n            }\r\n          },\r\n          {\r\n            loader: 'extract-loader',\r\n          },\r\n          {\r\n            loader: 'css-loader'\r\n          },\r\n          {\r\n            loader: 'postcss-loader'\r\n          },\r\n          {\r\n            loader: 'sass-loader',\r\n            options: {\r\n              implementation: require(\"sass\")\r\n            }\r\n          }\r\n        ]),\r\n      }\r\n```\r\n\r\n**index.html**:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    ...\r\n    <link rel=\"stylesheet\" type=\"text\/css\" href=\"..\/scss\/index.scss\">\r\n<\/head>\r\n<body>\r\n<\/body>\r\n<\/html>\r\n```\r\n\r\nRunning `npx webpack` I get:\r\n\r\n```\r\nThe \"path\" argument must be of type string. Received null\r\n```","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","i think this is still an issue. there's also an unreviewed PR #10362 for it.","What is the status on this guys ?\r\nFor webpack `4.42.0` this is still an issue :(","Still an issue on 4.46. Any plan to fix it?","Only webpack v5","> Only webpack v5\r\n\r\nCan't this be fixed in v4?","No, v4 only security fixes","Bump. Still facing this issue when loading svg from different extensions like tsx or less.","Bump. Still facing this issue when loading fonts for preloading by env from different folders.","There is note why it is not easy https:\/\/github.com\/webpack\/webpack\/pull\/10362#issuecomment-674068381, but anyway it is solvable ","`npm webpack --version` yields 8.18.0 but I think I'm also suffering from this bug as it relates to https:\/\/github.com\/vercel\/next.js\/discussions\/15437"],"labels":["bug","webpack-5"]},{"title":"Amd optimizations (AMD for code-split chunks)","body":"I am looking to update webpack to increase AMD performance for chunk dependencies.\r\n\r\nSee https:\/\/github.com\/webpack\/webpack\/issues\/5489\r\n\r\nI have a proof of concept working, but realize it will probably take a some more work to get this PR working correctly. \r\n\r\nTo this end i was hoping I could get some review\/ feedback on the best way to proceed.\r\n\r\n","comments":["[![CLA assistant check](https:\/\/cla.js.foundation\/pull\/badge\/not_signed)](https:\/\/cla.js.foundation\/webpack\/webpack?pullRequest=8837) <br\/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https:\/\/cla.js.foundation\/webpack\/webpack?pullRequest=8837) before we can accept your contribution.<br\/>","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This need to be documented (issue in webpack\/webpack.js.org will be filed when merged)","<!-- identifier: ci-result -->\n\nThe basic integration tests failed.\n\n@sandersonatlatitude Please review the following output log for errors:\n\n```text\n FAIL  test\/TestCasesNormal.test.js (17.921s)\n  \u25cf TestCases \u203a normal \u203a errors \u203a crash-missing-import \u203a crash-missing-import should compile\n\n    More errors while compiling than expected:\n\n    .\/errors\/crash-missing-import\/a.js\n    Module not found: Error: Can't resolve '.\/missing' in '\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import'\n    resolve '.\/missing' in '\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import'\n      using description file: \/home\/travis\/build\/webpack\/webpack\/package.json (relative path: .\/test\/cases\/errors\/crash-missing-import)\n        Field 'browser' doesn't contain a valid alias configuration\n        using description file: \/home\/travis\/build\/webpack\/webpack\/package.json (relative path: .\/test\/cases\/errors\/crash-missing-import\/missing)\n          no extension\n            Field 'browser' doesn't contain a valid alias configuration\n            \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import\/missing doesn't exist\n          .mjs\n            Field 'browser' doesn't contain a valid alias configuration\n            \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import\/missing.mjs doesn't exist\n          .webpack.js\n            Field 'browser' doesn't contain a valid alias configuration\n            \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import\/missing.webpack.js doesn't exist\n          .web.js\n            Field 'browser' doesn't contain a valid alias configuration\n            \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import\/missing.web.js doesn't exist\n          .js\n            Field 'browser' doesn't contain a valid alias configuration\n            \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import\/missing.js doesn't exist\n          .json\n            Field 'browser' doesn't contain a valid alias configuration\n            \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import\/missing.json doesn't exist\n          as directory\n            \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import\/missing doesn't exist\n    [\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import\/missing]\n    [\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import\/missing.mjs]\n    [\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import\/missing.webpack.js]\n    [\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import\/missing.web.js]\n    [\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import\/missing.js]\n    [\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import\/missing.json]\n     @ .\/errors\/crash-missing-import\/a.js 1:0-30 3:0-1\n     @ .\/errors\/crash-missing-import\/index.js\n\n    chunk main [entry]\n    bundle.js\n    \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import\/a.js\n    Cannot read property 'externalType' of null\n    TypeError: \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/crash-missing-import\/a.js\n    Cannot read property 'externalType' of null\n\n      161 | \t\t\tcallContext: !dep.directImport,\n      162 | \t\t\timportVar:\n    > 163 | \t\t\t\tdep._module.externalType !== \"amd\"\n          | \t\t\t\t            ^\n      164 | \t\t\t\t\t? dep.getImportVar()\n      165 | \t\t\t\t\t: `__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(\n      166 | \t\t\t\t\t\t\t`${dep._module.request}`\n\n      at HarmonyImportSpecifierDependencyTemplate.getContent (lib\/dependencies\/HarmonyImportSpecifierDependency.js:163:17)\n      at HarmonyImportSpecifierDependencyTemplate.apply (lib\/dependencies\/HarmonyImportSpecifierDependency.js:149:24)\n      at JavascriptGenerator.sourceDependency (lib\/JavascriptGenerator.js:171:12)\n      at JavascriptGenerator.sourceBlock (lib\/JavascriptGenerator.js:64:9)\n      at JavascriptGenerator.generate (lib\/JavascriptGenerator.js:28:8)\n      at NormalModule.source (lib\/NormalModule.js:500:33)\n      at ModuleTemplate.render (lib\/ModuleTemplate.js:54:32)\n      at modules.map.module (lib\/Template.js:233:28)\n          at Array.map (<anonymous>)\n      at Function.renderChunkModules (lib\/Template.js:230:30)\n      at compilation.mainTemplate.hooks.modules.tap (lib\/JavascriptModulesPlugin.js:87:23)\n      at SyncWaterfallHook.eval (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:19:10), <anonymous>:7:16)\n      at SyncWaterfallHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at MainTemplate.hooks.render.tap (lib\/MainTemplate.js:160:25)\n      at SyncWaterfallHook.eval (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:19:10), <anonymous>:7:16)\n      at SyncWaterfallHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20). Check expected warnings: errors\n      at checkArrayExpectation (test\/checkArrayExpectation.js:27:6)\n      at webpack (test\/TestCases.template.js:189:12)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at Object.eachLimit (node_modules\/neo-async\/async.js:3461:14)\n      at emitFiles (lib\/Compiler.js:321:13)\n      at node_modules\/mkdirp\/index.js:30:20\n```\n<details>\n  <summary>Show remaining errors<\/summary>\n\n```text\n  \u25cf TestCases \u203a normal \u203a errors \u203a harmony-import-missing \u203a harmony-import-missing should compile\n\n    More errors while compiling than expected:\n\n    .\/errors\/harmony-import-missing\/module.js\n    Module not found: Error: Can't resolve '.\/missing' in '\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing'\n    resolve '.\/missing' in '\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing'\n      using description file: \/home\/travis\/build\/webpack\/webpack\/package.json (relative path: .\/test\/cases\/errors\/harmony-import-missing)\n        Field 'browser' doesn't contain a valid alias configuration\n        using description file: \/home\/travis\/build\/webpack\/webpack\/package.json (relative path: .\/test\/cases\/errors\/harmony-import-missing\/missing)\n          no extension\n            Field 'browser' doesn't contain a valid alias configuration\n            \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing\/missing doesn't exist\n          .mjs\n            Field 'browser' doesn't contain a valid alias configuration\n            \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing\/missing.mjs doesn't exist\n          .webpack.js\n            Field 'browser' doesn't contain a valid alias configuration\n            \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing\/missing.webpack.js doesn't exist\n          .web.js\n            Field 'browser' doesn't contain a valid alias configuration\n            \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing\/missing.web.js doesn't exist\n          .js\n            Field 'browser' doesn't contain a valid alias configuration\n            \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing\/missing.js doesn't exist\n          .json\n            Field 'browser' doesn't contain a valid alias configuration\n            \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing\/missing.json doesn't exist\n          as directory\n            \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing\/missing doesn't exist\n    [\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing\/missing]\n    [\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing\/missing.mjs]\n    [\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing\/missing.webpack.js]\n    [\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing\/missing.web.js]\n    [\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing\/missing.js]\n    [\/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing\/missing.json]\n     @ .\/errors\/harmony-import-missing\/module.js 1:0-26 1:0-26\n     @ .\/errors\/harmony-import-missing\/index.js\n\n    chunk main [entry]\n    bundle.js\n    \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing\/module.js\n    Cannot read property 'externalType' of null\n    TypeError: \/home\/travis\/build\/webpack\/webpack\/test\/cases\/errors\/harmony-import-missing\/module.js\n    Cannot read property 'externalType' of null\n\n      458 | \t\tconst importedModule = dep._module;\n      459 | \t\tconst importVar =\n    > 460 | \t\t\tdep._module.externalType !== \"amd\"\n          | \t\t\t            ^\n      461 | \t\t\t\t? dep.getImportVar()\n      462 | \t\t\t\t: `__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(\n      463 | \t\t\t\t\t\tdep._module.request\n\n      at HarmonyExportImportedSpecifierDependencyTemplate.getContent (lib\/dependencies\/HarmonyExportImportedSpecifierDependency.js:460:16)\n      at HarmonyExportImportedSpecifierDependencyTemplate.harmonyInit (lib\/dependencies\/HarmonyExportImportedSpecifierDependency.js:412:24)\n      at HarmonyInitDependencyTemplate.apply (lib\/dependencies\/HarmonyInitDependency.js:52:18)\n      at JavascriptGenerator.sourceDependency (lib\/JavascriptGenerator.js:171:12)\n      at JavascriptGenerator.sourceBlock (lib\/JavascriptGenerator.js:64:9)\n      at JavascriptGenerator.generate (lib\/JavascriptGenerator.js:28:8)\n      at NormalModule.source (lib\/NormalModule.js:500:33)\n      at ModuleTemplate.render (lib\/ModuleTemplate.js:54:32)\n      at modules.map.module (lib\/Template.js:233:28)\n          at Array.map (<anonymous>)\n      at Function.renderChunkModules (lib\/Template.js:230:30)\n      at compilation.mainTemplate.hooks.modules.tap (lib\/JavascriptModulesPlugin.js:87:23)\n      at SyncWaterfallHook.eval (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:19:10), <anonymous>:7:16)\n      at SyncWaterfallHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at MainTemplate.hooks.render.tap (lib\/MainTemplate.js:160:25)\n      at SyncWaterfallHook.eval (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:19:10), <anonymous>:7:16). Check expected warnings: errors\n      at checkArrayExpectation (test\/checkArrayExpectation.js:27:6)\n      at webpack (test\/TestCases.template.js:189:12)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at Object.eachLimit (node_modules\/neo-async\/async.js:3461:14)\n      at emitFiles (lib\/Compiler.js:321:13)\n      at node_modules\/mkdirp\/index.js:30:20\n\n FAIL  test\/ConfigTestCases.test.js (21.173s)\n  \u25cf ConfigTestCases \u203a scope-hoisting \u203a esModule \u203a exported tests \u203a should have the __esModule flag\n\n    expect(received).toBe(expected) \/\/ Object.is equality\n\n    Expected: true\n    Received: undefined\n\n    Difference:\n\n      Comparing two different types of values. Expected boolean but received undefined.\n\n      151 | it(\"should have the __esModule flag\", () => {\n      152 | \treturn __webpack_require__.e(\/*! import() *\/ 0).then(__webpack_require__.bind(null, \/*! .\/module *\/ \".\/module.js\")).then(mod => {\n    > 153 | \t\texpect(mod.__esModule).toBe(true);\n          | \t\t                       ^\n      154 | \t\texpect(mod.default).toBe(84);\n      155 | \t})\n      156 | })\n\n      at __webpack_require__.e.then.then.mod (test\/js\/config\/scope-hoisting\/esModule\/bundle0.js:153:26)\n\n  \u25cf ConfigTestCases \u203a web \u203a prefetch-preload \u203a exported tests \u203a should prefetch and preload child chunks on chunk load\n\n    expect(received).toBeTypeOf(expected)\n\n    Expected value to be (using typeof):\n      \"function\"\n    Received:\n      \"undefined\"\n\n      298 | \texpect(script.getAttribute(\"nonce\")).toBe(\"nonce\")\n      299 | \texpect(script.crossOrigin).toBe(\"anonymous\");\n    > 300 | \texpect(script.onload).toBeTypeOf(\"function\");\n          | \t                      ^\n      301 | \n      302 | \t\/\/ Test preload of chunk1-b\n      303 | \tlink = document.head._children[2];\n\n      at it (test\/js\/config\/web\/prefetch-preload\/bundle0.js:300:24)\n      at Object.<anonymous> (test\/helpers\/createLazyTestEnv.js:12:13)\n\n FAIL  test\/StatsTestCases.test.js (7.719s)\n  \u25cf StatsTestCases \u203a should print correct stats for aggressive-splitting-entry\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for aggressive-splitting-entry 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,20 +1,20 @@\n    - \"Hash: 6b5ddd5d48acc0426e7a6b5ddd5d48acc0426e7a\n    + \"Hash: 78ff2fcea505b5cc6de978ff2fcea505b5cc6de9\n      Child fitting:\n    -     Hash: 6b5ddd5d48acc0426e7a\n    +     Hash: 78ff2fcea505b5cc6de9\n          Time: Xms\n          Built at: Thu Jan 01 1970 00:00:00 GMT\n                            Asset      Size  Chunks             Chunk Names\n          33966214360bbbb31383.js  1.94 KiB       2  [emitted]  \n          445d4c6a1d7381d6cb2c.js  1.94 KiB       3  [emitted]  \n    +     48fb83c35905ecb5f2f6.js    11 KiB       1  [emitted]  \n          d4b551c6319035df2898.js  1.05 KiB       0  [emitted]  \n    -     ed31350d9c86da6a8353.js    11 KiB       1  [emitted]  \n    -     Entrypoint main = 33966214360bbbb31383.js 445d4c6a1d7381d6cb2c.js ed31350d9c86da6a8353.js\n    +     Entrypoint main = 33966214360bbbb31383.js 445d4c6a1d7381d6cb2c.js 48fb83c35905ecb5f2f6.js\n          chunk    {0} d4b551c6319035df2898.js 916 bytes <{1}> <{2}> <{3}>\n              > .\/g [4] .\/index.js 7:0-13\n           [7] .\/g.js 916 bytes {0} [built]\n    -     chunk    {1} ed31350d9c86da6a8353.js 1.87 KiB ={2}= ={3}= >{0}< [entry] [rendered]\n    +     chunk    {1} 48fb83c35905ecb5f2f6.js 1.87 KiB ={2}= ={3}= >{0}< [entry] [rendered]\n              > .\/index main\n           [3] .\/e.js 899 bytes {1} [built]\n           [4] .\/index.js 111 bytes {1} [built]\n           [6] .\/f.js 900 bytes {1} [built]\n          chunk    {2} 33966214360bbbb31383.js 1.76 KiB ={1}= ={3}= >{0}< [initial] [rendered] [recorded] aggressive splitted\n    @@ -24,23 +24,23 @@\n          chunk    {3} 445d4c6a1d7381d6cb2c.js 1.76 KiB ={1}= ={2}= >{0}< [initial] [rendered] [recorded] aggressive splitted\n              > .\/index main\n           [1] .\/c.js 899 bytes {3} [built]\n           [2] .\/d.js 899 bytes {3} [built]\n      Child content-change:\n    -     Hash: 6b5ddd5d48acc0426e7a\n    +     Hash: 78ff2fcea505b5cc6de9\n          Time: Xms\n          Built at: Thu Jan 01 1970 00:00:00 GMT\n                            Asset      Size  Chunks             Chunk Names\n          33966214360bbbb31383.js  1.94 KiB       2  [emitted]  \n          445d4c6a1d7381d6cb2c.js  1.94 KiB       3  [emitted]  \n    +     48fb83c35905ecb5f2f6.js    11 KiB       1  [emitted]  \n          d4b551c6319035df2898.js  1.05 KiB       0  [emitted]  \n    -     ed31350d9c86da6a8353.js    11 KiB       1  [emitted]  \n    -     Entrypoint main = 33966214360bbbb31383.js 445d4c6a1d7381d6cb2c.js ed31350d9c86da6a8353.js\n    +     Entrypoint main = 33966214360bbbb31383.js 445d4c6a1d7381d6cb2c.js 48fb83c35905ecb5f2f6.js\n          chunk    {0} d4b551c6319035df2898.js 916 bytes <{1}> <{2}> <{3}>\n              > .\/g [4] .\/index.js 7:0-13\n           [7] .\/g.js 916 bytes {0} [built]\n    -     chunk    {1} ed31350d9c86da6a8353.js 1.87 KiB ={2}= ={3}= >{0}< [entry] [rendered]\n    +     chunk    {1} 48fb83c35905ecb5f2f6.js 1.87 KiB ={2}= ={3}= >{0}< [entry] [rendered]\n              > .\/index main\n           [3] .\/e.js 899 bytes {1} [built]\n           [4] .\/index.js 111 bytes {1} [built]\n           [6] .\/f.js 900 bytes {1} [built]\n          chunk    {2} 33966214360bbbb31383.js 1.76 KiB ={1}= ={3}= >{0}< [initial] [rendered] [recorded] aggressive splitted\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/MultiCompiler.js:247:12)\n      at runWithDependencies.err (lib\/MultiCompiler.js:270:6)\n      at done (node_modules\/neo-async\/async.js:2928:13)\n      at runCompilers (lib\/MultiCompiler.js:174:48)\n      at err (lib\/MultiCompiler.js:181:7)\n      at compiler.run (lib\/MultiCompiler.js:263:7)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n\n  \u25cf StatsTestCases \u203a should print correct stats for aggressive-splitting-on-demand\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for aggressive-splitting-on-demand 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,22 +1,22 @@\n    - \"Hash: f682b6dfa3cec23b4fff\n    + \"Hash: d5266d98bdfbb87a8241\n      Time: Xms\n      Built at: Thu Jan 01 1970 00:00:00 GMT\n                        Asset      Size  Chunks             Chunk Names\n      01a8254701931adbf278.js  1.01 KiB       9  [emitted]  \n      07830cd8072d83cdc6ad.js  1.01 KiB      10  [emitted]  \n    - 1cd3a64e15add49c06d8.js  9.64 KiB       4  [emitted]  main\n      2736cf9d79233cd0a9b6.js  1.93 KiB       0  [emitted]  \n      29de52df747b400f6177.js     1 KiB       1  [emitted]  \n      41be79832883258c21e6.js  1.94 KiB       6  [emitted]  \n      43c1ac24102c075ecb2d.js  1.94 KiB    3, 1  [emitted]  \n      5bc7f208cd99a83b4e33.js  1.94 KiB       8  [emitted]  \n    + 603501de6109d2920afc.js  9.63 KiB       4  [emitted]  main\n      7f83e5c2f4e52435dd2c.js  1.96 KiB       2  [emitted]  \n      ba9fedb7aa0c69201639.js  1.94 KiB      11  [emitted]  \n      d40ae25f5e7ef09d2e24.js  1.94 KiB   7, 10  [emitted]  \n      e5fb899955fa03a8053b.js  1.94 KiB       5  [emitted]  \n    - Entrypoint main = 1cd3a64e15add49c06d8.js\n    + Entrypoint main = 603501de6109d2920afc.js\n      chunk    {0} 2736cf9d79233cd0a9b6.js 1.76 KiB <{4}> ={1}= ={2}= ={3}= ={6}= ={10}= [recorded] aggressive splitted\n          > .\/b .\/d .\/e .\/f .\/g [11] .\/index.js 5:0-44\n          > .\/b .\/d .\/e .\/f .\/g .\/h .\/i .\/j .\/k [11] .\/index.js 6:0-72\n       [0] .\/b.js 899 bytes {0} {5} [built]\n       [1] .\/d.js 899 bytes {0} {8} [built]\n    @@ -32,11 +32,11 @@\n       [4] .\/g.js 901 bytes {2} [built]\n      chunk    {3} 43c1ac24102c075ecb2d.js 1.76 KiB <{4}> ={0}= ={2}= ={6}= ={10}= [rendered] [recorded] aggressive splitted\n          > .\/b .\/d .\/e .\/f .\/g .\/h .\/i .\/j .\/k [11] .\/index.js 6:0-72\n       [2] .\/e.js 899 bytes {1} {3} [built]\n       [6] .\/h.js 899 bytes {3} {11} [built]\n    - chunk    {4} 1cd3a64e15add49c06d8.js (main) 248 bytes >{0}< >{1}< >{2}< >{3}< >{5}< >{6}< >{7}< >{8}< >{9}< >{10}< >{11}< [entry] [rendered]\n    + chunk    {4} 603501de6109d2920afc.js (main) 248 bytes >{0}< >{1}< >{2}< >{3}< >{5}< >{6}< >{7}< >{8}< >{9}< >{10}< >{11}< [entry] [rendered]\n          > .\/index main\n       [11] .\/index.js 248 bytes {4} [built]\n      chunk    {5} e5fb899955fa03a8053b.js 1.76 KiB <{4}>\n          > .\/b .\/c [11] .\/index.js 2:0-23\n       [0] .\/b.js 899 bytes {0} {5} [built]\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n\n  \u25cf StatsTestCases \u203a should print correct stats for chunks\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for chunks 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,13 +1,13 @@\n    - \"Hash: 34cad0d1897c8ba31143\n    + \"Hash: ce7b087522b4ca92a76b\n      Time: Xms\n      Built at: Thu Jan 01 1970 00:00:00 GMT\n            Asset       Size  Chunks             Chunk Names\n      1.bundle.js  232 bytes       1  [emitted]  \n      2.bundle.js  152 bytes       2  [emitted]  \n      3.bundle.js  289 bytes       3  [emitted]  \n    -   bundle.js   8.23 KiB       0  [emitted]  main\n    +   bundle.js   8.21 KiB       0  [emitted]  main\n      Entrypoint main = bundle.js\n      chunk    {0} bundle.js (main) 73 bytes >{2}< >{3}< [entry] [rendered]\n          > .\/index main\n       [0] .\/index.js 51 bytes {0} [built]\n           single entry .\/index  main\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n\n  \u25cf StatsTestCases \u203a should print correct stats for chunks-development\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for chunks-development 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,13 +1,13 @@\n    - \"Hash: 7192da34b98e59fe39b2\n    + \"Hash: e3fad5f77eea2d6cc464\n      Time: Xms\n      Built at: Thu Jan 01 1970 00:00:00 GMT\n            Asset       Size  Chunks             Chunk Names\n      0.bundle.js  588 bytes       0  [emitted]  \n      1.bundle.js  297 bytes       1  [emitted]  \n      2.bundle.js  433 bytes       2  [emitted]  \n    -   bundle.js   8.61 KiB    main  [emitted]  main\n    +   bundle.js   8.59 KiB    main  [emitted]  main\n      Entrypoint main = bundle.js\n      chunk    {0} 0.bundle.js 60 bytes <{2}> [rendered]\n          > [.\/c.js] .\/c.js 1:0-52\n       [.\/d.js] 22 bytes {0} [built]\n           require.ensure item .\/d [.\/c.js] 1:0-52\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n\n  \u25cf StatsTestCases \u203a should print correct stats for import-context-filter\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for import-context-filter 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,13 +1,13 @@\n    - \"Hash: cbf8fc5e9562c9249823\n    + \"Hash: 5f6f3b0f8689e4269095\n      Time: Xms\n      Built at: Thu Jan 01 1970 00:00:00 GMT\n         Asset       Size  Chunks             Chunk Names\n          0.js  305 bytes       0  [emitted]  \n          1.js  314 bytes       1  [emitted]  \n          2.js  308 bytes       2  [emitted]  \n    - entry.js   9.05 KiB       3  [emitted]  entry\n    + entry.js   9.03 KiB       3  [emitted]  entry\n      Entrypoint entry = entry.js\n      [0] .\/templates\/bar.js 38 bytes {0} [optional] [built]\n      [1] .\/templates\/baz.js 38 bytes {1} [optional] [built]\n      [2] .\/templates\/foo.js 38 bytes {2} [optional] [built]\n      [3] .\/entry.js 450 bytes {3} [built]\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at node_modules\/neo-async\/async.js:2813:7\n      at done (node_modules\/neo-async\/async.js:3521:9)\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n\n  \u25cf StatsTestCases \u203a should print correct stats for import-weak\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for import-weak 1\".\n\n    - Snapshot\n    + Received\n\n    - \"Hash: 818b39ea7c5c1ff94df3\n    + \"Hash: 07399b0cb9a171848b71\n      Time: Xms\n      Built at: Thu Jan 01 1970 00:00:00 GMT\n         Asset       Size  Chunks             Chunk Names\n          1.js  149 bytes       1  [emitted]  \n    - entry.js   8.47 KiB       0  [emitted]  entry\n    + entry.js   8.46 KiB       0  [emitted]  entry\n      Entrypoint entry = entry.js\n      [0] .\/modules\/b.js 22 bytes {1} [built]\n      [1] .\/entry.js 120 bytes {0} [built]\n      [2] .\/modules\/a.js 37 bytes [built]\"\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at node_modules\/neo-async\/async.js:2813:7\n      at done (node_modules\/neo-async\/async.js:3521:9)\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n\n  \u25cf StatsTestCases \u203a should print correct stats for issue-7577\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for issue-7577 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,6 +1,6 @@\n    - \"Hash: 3a382f7c6759b0401b6ff9bcd7c310309db5b68ce2bf53b0bf1432b722d8\n    + \"Hash: 3a382f7c6759b0401b6ff9bcd7c310309db5b68cc9dc228ff7f3028b66d5\n      Child\n          Hash: 3a382f7c6759b0401b6f\n          Time: Xms\n          Built at: Thu Jan 01 1970 00:00:00 GMT\n                                           Asset       Size        Chunks             Chunk Names\n    @@ -20,18 +20,18 @@\n          b-vendors~main-f7664221ad5d986cf06a.js  163 bytes  vendors~main  [emitted]  vendors~main\n          Entrypoint main = b-runtime~main-7b4918090cfe19b7778a.js b-vendors~main-f7664221ad5d986cf06a.js b-all~main-3f0b62a9e243706ccaf8.js b-main-09f4ddfc4098d7f3f188.js\n          [0] .\/node_modules\/vendor.js 23 bytes {vendors~main} [built]\n          [1] .\/b.js 17 bytes {all~main} [built]\n      Child\n    -     Hash: e2bf53b0bf1432b722d8\n    +     Hash: c9dc228ff7f3028b66d5\n          Time: Xms\n          Built at: Thu Jan 01 1970 00:00:00 GMT\n                                           Asset       Size        Chunks             Chunk Names\n                     c-0-5b8bdddff2dcbbac44bf.js  450 bytes             0  [emitted]  \n                     c-1-5eacbd7fee2224716029.js  153 bytes             1  [emitted]  \n              c-all~main-3de9f206741c28715d19.js  305 bytes      all~main  [emitted]  all~main\n                  c-main-75156155081cda3092db.js  114 bytes          main  [emitted]  main\n    -     c-runtime~main-a95c7b9d72f76dc9feef.js   8.78 KiB  runtime~main  [emitted]  runtime~main\n    -     Entrypoint main = c-runtime~main-a95c7b9d72f76dc9feef.js c-all~main-3de9f206741c28715d19.js c-main-75156155081cda3092db.js (prefetch: c-1-5eacbd7fee2224716029.js c-0-5b8bdddff2dcbbac44bf.js)\n    +     c-runtime~main-b23ab0c4f5e1c429ba64.js   8.77 KiB  runtime~main  [emitted]  runtime~main\n    +     Entrypoint main = c-runtime~main-b23ab0c4f5e1c429ba64.js c-all~main-3de9f206741c28715d19.js c-main-75156155081cda3092db.js (prefetch: c-1-5eacbd7fee2224716029.js c-0-5b8bdddff2dcbbac44bf.js)\n          [0] .\/b.js 17 bytes {0} [built]\n          [1] .\/c.js 61 bytes {all~main} [built]\n          [2] .\/node_modules\/vendor.js 23 bytes {1} [built]\"\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/MultiCompiler.js:247:12)\n      at runWithDependencies.err (lib\/MultiCompiler.js:270:6)\n      at done (node_modules\/neo-async\/async.js:2928:13)\n      at runCompilers (lib\/MultiCompiler.js:174:48)\n      at err (lib\/MultiCompiler.js:181:7)\n      at compiler.run (lib\/MultiCompiler.js:263:7)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n\n  \u25cf StatsTestCases \u203a should print correct stats for limit-chunk-count-plugin\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for limit-chunk-count-plugin 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,6 +1,6 @@\n    - \"Hash: 4c228d725cbf3eab49b0c4c4e0337021c38dadbfe19eb8024444df3ec45e8ce9ff5edae99037259a\n    + \"Hash: 4c228d725cbf3eab49b0697e3da34702e6283083cafc05c7e4657f0c8cd2b1d9585ea44692b97de7\n      Child 1 chunks:\n          Hash: 4c228d725cbf3eab49b0\n          Time: Xms\n          Built at: Thu Jan 01 1970 00:00:00 GMT\n              Asset      Size  Chunks             Chunk Names\n    @@ -12,33 +12,33 @@\n           [2] .\/b.js 22 bytes {0} [built]\n           [3] .\/c.js 30 bytes {0} [built]\n           [4] .\/d.js 22 bytes {0} [built]\n           [5] .\/e.js 22 bytes {0} [built]\n      Child 2 chunks:\n    -     Hash: c4c4e0337021c38dadbf\n    +     Hash: 697e3da34702e6283083\n          Time: Xms\n          Built at: Thu Jan 01 1970 00:00:00 GMT\n                Asset       Size  Chunks             Chunk Names\n          0.bundle.js  401 bytes       0  [emitted]  \n    -       bundle.js   8.46 KiB       1  [emitted]  main\n    +       bundle.js   8.45 KiB       1  [emitted]  main\n          Entrypoint main = bundle.js\n          chunk    {0} 0.bundle.js 88 bytes <{1}> [rendered]\n           [2] .\/a.js 22 bytes {0} [built]\n           [3] .\/b.js 22 bytes {0} [built]\n           [4] .\/d.js 22 bytes {0} [built]\n           [5] .\/e.js 22 bytes {0} [built]\n          chunk    {1} bundle.js (main) 131 bytes <{1}> >{0}< >{1}< [entry] [rendered]\n           [0] .\/index.js 101 bytes {1} [built]\n           [1] .\/c.js 30 bytes {1} [built]\n      Child 3 chunks:\n    -     Hash: e19eb8024444df3ec45e\n    +     Hash: cafc05c7e4657f0c8cd2\n          Time: Xms\n          Built at: Thu Jan 01 1970 00:00:00 GMT\n                Asset       Size  Chunks             Chunk Names\n          1.bundle.js  245 bytes       1  [emitted]  \n          2.bundle.js  232 bytes       2  [emitted]  \n    -       bundle.js   8.46 KiB       0  [emitted]  main\n    +       bundle.js   8.45 KiB       0  [emitted]  main\n          Entrypoint main = bundle.js\n          chunk    {0} bundle.js (main) 131 bytes <{0}> >{0}< >{1}< >{2}< [entry] [rendered]\n           [0] .\/index.js 101 bytes {0} [built]\n           [1] .\/c.js 30 bytes {0} [built]\n          chunk    {1} 1.bundle.js 44 bytes <{0}> [rendered]\n    @@ -46,18 +46,18 @@\n           [3] .\/b.js 22 bytes {1} [built]\n          chunk    {2} 2.bundle.js 44 bytes <{0}> [rendered]\n           [4] .\/d.js 22 bytes {2} [built]\n           [5] .\/e.js 22 bytes {2} [built]\n      Child 4 chunks:\n    -     Hash: 8ce9ff5edae99037259a\n    +     Hash: b1d9585ea44692b97de7\n          Time: Xms\n          Built at: Thu Jan 01 1970 00:00:00 GMT\n                Asset       Size  Chunks             Chunk Names\n          1.bundle.js  245 bytes       1  [emitted]  \n          2.bundle.js  152 bytes       2  [emitted]  \n          3.bundle.js  152 bytes       3  [emitted]  \n    -       bundle.js   8.46 KiB       0  [emitted]  main\n    +       bundle.js   8.45 KiB       0  [emitted]  main\n          Entrypoint main = bundle.js\n          chunk    {0} bundle.js (main) 131 bytes <{0}> >{0}< >{1}< >{2}< >{3}< [entry] [rendered]\n           [0] .\/index.js 101 bytes {0} [built]\n           [1] .\/c.js 30 bytes {0} [built]\n          chunk    {1} 1.bundle.js 44 bytes <{0}> [rendered]\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/MultiCompiler.js:247:12)\n      at runWithDependencies.err (lib\/MultiCompiler.js:270:6)\n      at done (node_modules\/neo-async\/async.js:2928:13)\n      at runCompilers (lib\/MultiCompiler.js:174:48)\n      at err (lib\/MultiCompiler.js:181:7)\n      at compiler.run (lib\/MultiCompiler.js:263:7)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n\n  \u25cf StatsTestCases \u203a should print correct stats for module-assets\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for module-assets 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,6 +1,6 @@\n    - \"Hash: 3800082315c6d35bb423\n    + \"Hash: 39ade11f7dfa647a1990\n      Time: Xms\n      Built at: Thu Jan 01 1970 00:00:00 GMT\n      Entrypoint main = main.js\n      chunk    {0} main.js (main) 12 bytes >{1}< [entry] [rendered]\n       [0] .\/index.js 12 bytes {0} [built]\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at node_modules\/neo-async\/async.js:2813:7\n      at done (node_modules\/neo-async\/async.js:3521:9)\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n\n  \u25cf StatsTestCases \u203a should print correct stats for module-deduplication\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for module-deduplication 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -3,13 +3,13 @@\n       1.js  730 bytes    1, 7  [emitted]  \n       2.js  730 bytes    2, 8  [emitted]  \n       6.js  661 bytes       6  [emitted]  \n       7.js  661 bytes       7  [emitted]  \n       8.js  661 bytes       8  [emitted]  \n    - e1.js   9.37 KiB       3  [emitted]  e1\n    - e2.js   9.39 KiB       4  [emitted]  e2\n    - e3.js   9.41 KiB       5  [emitted]  e3\n    + e1.js   9.35 KiB       3  [emitted]  e1\n    + e2.js   9.37 KiB       4  [emitted]  e2\n    + e3.js   9.39 KiB       5  [emitted]  e3\n      Entrypoint e1 = e1.js\n      Entrypoint e2 = e2.js\n      Entrypoint e3 = e3.js\n      chunk    {0} 0.js 37 bytes <{4}> <{5}> [rendered]\n       [2] .\/async1.js 28 bytes {0} {6} [built]\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at node_modules\/neo-async\/async.js:2813:7\n      at done (node_modules\/neo-async\/async.js:3521:9)\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n\n  \u25cf StatsTestCases \u203a should print correct stats for module-deduplication-named\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for module-deduplication-named 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,12 +1,12 @@\n      \"    Asset       Size  Chunks             Chunk Names\n      async1.js  820 bytes       0  [emitted]  async1\n      async2.js  820 bytes       1  [emitted]  async2\n      async3.js  820 bytes       2  [emitted]  async3\n    -     e1.js   9.23 KiB       3  [emitted]  e1\n    -     e2.js   9.25 KiB       4  [emitted]  e2\n    -     e3.js   9.27 KiB       5  [emitted]  e3\n    +     e1.js   9.21 KiB       3  [emitted]  e1\n    +     e2.js   9.23 KiB       4  [emitted]  e2\n    +     e3.js   9.25 KiB       5  [emitted]  e3\n      Entrypoint e1 = e1.js\n      Entrypoint e2 = e2.js\n      Entrypoint e3 = e3.js\n      chunk    {0} async1.js (async1) 89 bytes <{2}> <{3}> >{1}< [rendered]\n        [2] .\/d.js 9 bytes {0} {3} [built]\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at node_modules\/neo-async\/async.js:2813:7\n      at done (node_modules\/neo-async\/async.js:3521:9)\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n\n  \u25cf StatsTestCases \u203a should print correct stats for named-chunks-plugin-async\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for named-chunks-plugin-async 1\".\n\n    - Snapshot\n    + Received\n\n    - \"Hash: c90d9bc140f3e8bbd29c\n    + \"Hash: 57aacd185c9c3c321b44\n      Time: Xms\n      Built at: Thu Jan 01 1970 00:00:00 GMT\n                           Asset       Size                   Chunks             Chunk Names\n      chunk-containing-__a_js.js  307 bytes  chunk-containing-__a_js  [emitted]  \n      chunk-containing-__b_js.js  182 bytes  chunk-containing-__b_js  [emitted]  \n    -                   entry.js   8.13 KiB                    entry  [emitted]  entry\n    +                   entry.js   8.11 KiB                    entry  [emitted]  entry\n      Entrypoint entry = entry.js\n      [0] .\/entry.js 47 bytes {entry} [built]\n      [1] .\/modules\/b.js 22 bytes {chunk-containing-__b_js} [built]\n      [2] .\/modules\/a.js 37 bytes {chunk-containing-__a_js} [built]\"\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at node_modules\/neo-async\/async.js:2813:7\n      at done (node_modules\/neo-async\/async.js:3521:9)\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n\n  \u25cf StatsTestCases \u203a should print correct stats for optimize-chunks\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for optimize-chunks 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,17 +1,17 @@\n    - \"Hash: aa85d85eda19bac37a2e\n    + \"Hash: 1adb3d3c0e22d24cff34\n      Time: Xms\n      Built at: Thu Jan 01 1970 00:00:00 GMT\n                  Asset       Size  Chunks             Chunk Names\n                  ab.js  183 bytes       1  [emitted]  ab\n                 abd.js  250 bytes    2, 1  [emitted]  abd\n            ac in ab.js  130 bytes       3  [emitted]  ac in ab\n               chunk.js  212 bytes    4, 3  [emitted]  chunk\n                cir1.js  299 bytes       0  [emitted]  cir1\n      cir2 from cir1.js  359 bytes    6, 5  [emitted]  cir2 from cir1\n                cir2.js  299 bytes       5  [emitted]  cir2\n    -           main.js   9.03 KiB       7  [emitted]  main\n    +           main.js   9.02 KiB       7  [emitted]  main\n      Entrypoint main = main.js\n      chunk    {0} cir1.js (cir1) 81 bytes <{5}> <{7}> >{6}< [rendered]\n          > [5] .\/index.js 13:0-54\n          > [7] .\/circular2.js 1:0-79\n          > [7] .\/circular2.js 1:0-79\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at node_modules\/neo-async\/async.js:2813:7\n      at done (node_modules\/neo-async\/async.js:3521:9)\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n\n  \u25cf StatsTestCases \u203a should print correct stats for prefetch\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for prefetch 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,9 +1,9 @@\n      \"         Asset       Size  Chunks             Chunk Names\n            inner.js  130 bytes       0  [emitted]  inner\n           inner2.js  188 bytes       1  [emitted]  inner2\n    -        main.js   9.55 KiB       2  [emitted]  main\n    +        main.js   9.54 KiB       2  [emitted]  main\n           normal.js  130 bytes       3  [emitted]  normal\n       prefetched.js  475 bytes       4  [emitted]  prefetched\n      prefetched2.js  127 bytes       5  [emitted]  prefetched2\n      prefetched3.js  130 bytes       6  [emitted]  prefetched3\n      Entrypoint main = main.js (prefetch: prefetched2.js prefetched.js prefetched3.js)\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at node_modules\/neo-async\/async.js:2813:7\n      at done (node_modules\/neo-async\/async.js:3521:9)\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n\n  \u25cf StatsTestCases \u203a should print correct stats for preload\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for preload 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,9 +1,9 @@\n      \"        Asset       Size  Chunks             Chunk Names\n           inner.js  130 bytes       0  [emitted]  inner\n          inner2.js  188 bytes       1  [emitted]  inner2\n    -       main.js   9.75 KiB       2  [emitted]  main\n    +       main.js   9.74 KiB       2  [emitted]  main\n          normal.js  130 bytes       3  [emitted]  normal\n       preloaded.js  467 bytes       4  [emitted]  preloaded\n      preloaded2.js  127 bytes       5  [emitted]  preloaded2\n      preloaded3.js  130 bytes       6  [emitted]  preloaded3\n      Entrypoint main = main.js (preload: preloaded2.js preloaded.js preloaded3.js)\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at node_modules\/neo-async\/async.js:2813:7\n      at done (node_modules\/neo-async\/async.js:3521:9)\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n\n  \u25cf StatsTestCases \u203a should print correct stats for preset-detailed\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for preset-detailed 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,13 +1,13 @@\n    - \"Hash: 934b93428d78d30a6bf2\n    + \"Hash: 4a43a6675de2bbac0616\n      Time: Xms\n      Built at: Thu Jan 01 1970 00:00:00 GMT\n        Asset       Size  Chunks             Chunk Names\n         1.js  232 bytes       1  [emitted]  \n         2.js  152 bytes       2  [emitted]  \n         3.js  289 bytes       3  [emitted]  \n    - main.js   8.23 KiB       0  [emitted]  main\n    + main.js   8.22 KiB       0  [emitted]  main\n      Entrypoint main = main.js\n      chunk    {0} main.js (main) 73 bytes >{2}< >{3}< [entry] [rendered]\n          > .\/index main\n      chunk    {1} 1.js 44 bytes <{3}> [rendered]\n          > [3] .\/c.js 1:0-52\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at node_modules\/neo-async\/async.js:2813:7\n      at done (node_modules\/neo-async\/async.js:3521:9)\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n\n  \u25cf StatsTestCases \u203a should print correct stats for preset-normal\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for preset-normal 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,13 +1,13 @@\n    - \"Hash: 934b93428d78d30a6bf2\n    + \"Hash: 4a43a6675de2bbac0616\n      Time: Xms\n      Built at: Thu Jan 01 1970 00:00:00 GMT\n        Asset       Size  Chunks             Chunk Names\n         1.js  232 bytes       1  [emitted]  \n         2.js  152 bytes       2  [emitted]  \n         3.js  289 bytes       3  [emitted]  \n    - main.js   8.23 KiB       0  [emitted]  main\n    + main.js   8.22 KiB       0  [emitted]  main\n      Entrypoint main = main.js\n      [0] .\/index.js 51 bytes {0} [built]\n      [1] .\/a.js 22 bytes {0} [built]\n      [2] .\/b.js 22 bytes {2} [built]\n      [3] .\/c.js 54 bytes {3} [built]\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at node_modules\/neo-async\/async.js:2813:7\n      at done (node_modules\/neo-async\/async.js:3521:9)\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n\n  \u25cf StatsTestCases \u203a should print correct stats for preset-verbose\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for preset-verbose 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,13 +1,13 @@\n    - \"Hash: 934b93428d78d30a6bf2\n    + \"Hash: 4a43a6675de2bbac0616\n      Time: Xms\n      Built at: Thu Jan 01 1970 00:00:00 GMT\n        Asset       Size  Chunks             Chunk Names\n         1.js  232 bytes       1  [emitted]  \n         2.js  152 bytes       2  [emitted]  \n         3.js  289 bytes       3  [emitted]  \n    - main.js   8.23 KiB       0  [emitted]  main\n    + main.js   8.22 KiB       0  [emitted]  main\n      Entrypoint main = main.js\n      chunk    {0} main.js (main) 73 bytes >{2}< >{3}< [entry] [rendered]\n          > .\/index main\n       [0] .\/index.js 51 bytes {0} [depth 0] [built]\n           ModuleConcatenation bailout: Module is not an ECMAScript module\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at node_modules\/neo-async\/async.js:2813:7\n      at done (node_modules\/neo-async\/async.js:3521:9)\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n\n  \u25cf StatsTestCases \u203a should print correct stats for runtime-chunk-integration\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for runtime-chunk-integration 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,20 +1,20 @@\n      \"Child base:\n               Asset       Size  Chunks             Chunk Names\n                0.js  728 bytes       0  [emitted]  \n            main1.js  539 bytes       1  [emitted]  main1\n    -     runtime.js    8.7 KiB       2  [emitted]  runtime\n    +     runtime.js   8.68 KiB       2  [emitted]  runtime\n          Entrypoint main1 = runtime.js main1.js\n          [0] .\/main1.js 66 bytes {1} [built]\n          [1] .\/b.js 20 bytes {0} [built]\n          [2] .\/c.js 20 bytes {0} [built]\n          [3] .\/d.js 20 bytes {0} [built]\n      Child manifest is named entry:\n                Asset       Size  Chunks             Chunk Names\n                 0.js  737 bytes       0  [emitted]  \n             main1.js  539 bytes       2  [emitted]  main1\n    -     manifest.js   9.01 KiB       1  [emitted]  manifest\n    +     manifest.js   8.99 KiB       1  [emitted]  manifest\n          Entrypoint main1 = manifest.js main1.js\n          Entrypoint manifest = manifest.js\n          [0] .\/main1.js 66 bytes {2} [built]\n          [1] .\/f.js 20 bytes {1} [built]\n          [2] .\/b.js 20 bytes {0} [built]\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/MultiCompiler.js:247:12)\n      at runWithDependencies.err (lib\/MultiCompiler.js:270:6)\n      at done (node_modules\/neo-async\/async.js:2928:13)\n      at runCompilers (lib\/MultiCompiler.js:174:48)\n      at err (lib\/MultiCompiler.js:181:7)\n      at compiler.run (lib\/MultiCompiler.js:263:7)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n\n  \u25cf StatsTestCases \u203a should print correct stats for scope-hoisting-bailouts\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for scope-hoisting-bailouts 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,6 +1,6 @@\n    - \"Hash: 21b74df86e904b9e34c1\n    + \"Hash: 8dc588d97c2c4c8def96\n      Time: Xms\n      Built at: Thu Jan 01 1970 00:00:00 GMT\n      Entrypoint index = index.js\n      Entrypoint entry = entry.js\n      [0] .\/entry.js 32 bytes {0} {1} [built]\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at node_modules\/neo-async\/async.js:2813:7\n      at done (node_modules\/neo-async\/async.js:3521:9)\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n\n  \u25cf StatsTestCases \u203a should print correct stats for scope-hoisting-multi\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for scope-hoisting-multi 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,8 +1,8 @@\n    - \"Hash: e9ee59c952da1a23368e3ae60c31c1c21dd62d86\n    + \"Hash: bfa4e14ad1bb889c12cf3895fe6de6272c187c7e\n      Child\n    -     Hash: e9ee59c952da1a23368e\n    +     Hash: bfa4e14ad1bb889c12cf\n          Time: Xms\n          Built at: Thu Jan 01 1970 00:00:00 GMT\n          Entrypoint first = vendor.js first.js\n          Entrypoint second = vendor.js second.js\n           [0] .\/common2.js 25 bytes {1} {5} [built]\n    @@ -15,11 +15,11 @@\n           [7] .\/lazy_first.js 55 bytes {2} [built]\n           [8] .\/lazy_second.js 55 bytes {3} [built]\n           [9] .\/common_lazy_shared.js 25 bytes {2} {3} {4} [built]\n          [10] .\/common_lazy.js 25 bytes {2} {3} [built]\n      Child\n    -     Hash: 3ae60c31c1c21dd62d86\n    +     Hash: 3895fe6de6272c187c7e\n          Time: Xms\n          Built at: Thu Jan 01 1970 00:00:00 GMT\n          Entrypoint first = vendor.js first.js\n          Entrypoint second = vendor.js second.js\n          [0] .\/common.js + 1 modules 62 bytes {1} {5} [built]\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/MultiCompiler.js:247:12)\n      at runWithDependencies.err (lib\/MultiCompiler.js:270:6)\n      at done (node_modules\/neo-async\/async.js:2928:13)\n      at runCompilers (lib\/MultiCompiler.js:174:48)\n      at err (lib\/MultiCompiler.js:181:7)\n      at compiler.run (lib\/MultiCompiler.js:263:7)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n\n  \u25cf StatsTestCases \u203a should print correct stats for side-effects-issue-7428\n\n    expect(value).toMatchSnapshot()\n\n    Received value does not match stored snapshot \"StatsTestCases should print correct stats for side-effects-issue-7428 1\".\n\n    - Snapshot\n    + Received\n\n    @@ -1,11 +1,11 @@\n    - \"Hash: 1db323720a3bbea98b3b\n    + \"Hash: 14110d353cb3fc863b79\n      Time: Xms\n      Built at: Thu Jan 01 1970 00:00:00 GMT\n        Asset       Size  Chunks             Chunk Names\n         1.js  481 bytes       1  [emitted]  \n    - main.js   9.29 KiB       0  [emitted]  main\n    + main.js   9.28 KiB       0  [emitted]  main\n      Entrypoint main = main.js\n      [0] .\/components\/src\/CompAB\/index.js 87 bytes [built]\n          [no exports used]\n          harmony side effect evaluation .\/CompAB [3] .\/components\/src\/index.js 1:0-40\n          harmony export imported specifier .\/CompAB [3] .\/components\/src\/index.js 1:0-40\n\n      127 | \t\t\t\t\t.replace(path.join(base, testName), \"Xdir\/\" + testName)\n      128 | \t\t\t\t\t.replace(\/ dependencies:Xms\/g, \"\");\n    > 129 | \t\t\t\texpect(actual).toMatchSnapshot();\n          | \t\t\t\t               ^\n      130 | \t\t\t\tdone();\n      131 | \t\t\t});\n      132 | \t\t});\n\n      at c.run (test\/StatsTestCases.test.js:129:20)\n      at finalCallback (lib\/Compiler.js:220:39)\n      at hooks.done.callAsync.err (lib\/Compiler.js:269:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:267:22)\n      at Compiler.emitRecords (lib\/Compiler.js:449:39)\n      at emitAssets.err (lib\/Compiler.js:261:10)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:435:14)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:432:27)\n      at node_modules\/neo-async\/async.js:2813:7\n      at done (node_modules\/neo-async\/async.js:3521:9)\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n      at node_modules\/graceful-fs\/graceful-fs.js:43:10\n\n \u203a 22 snapshots failed.\nSnapshot Summary\n \u203a 22 snapshots failed from 1 test suite. Inspect your code changes or run `\n```\n<\/details>\n\n```text\nTest Suites: 3 failed, 3 total\nTests:       26 failed, 8 skipped, 1803 passed, 1837 total\nSnapshots:   22 failed, 65 passed, 87 total\nTime:        26.232s\n```\n\nSee [complete report here](https:\/\/travis-ci.org\/webpack\/webpack\/builds\/499009221?utm_source&#x3D;github_status&amp;utm_medium&#x3D;notification).","@TheLarkInn I realize that this PR is not in shape to move forward, however I was hoping you could give me some feedback on the premise of this PR, and some guidance on the best way to move forward."],"labels":["PR: unreviewed","PR: conflict"]},{"title":"feat(chunk): Introduce asyncChunkMode and default to 'eager'","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nFixes #8644 \r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nFeature\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nNot yet, but we'll get there. \r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nYes.\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\nTechnically this is a breaking change. By default webpack generates in `mode: development` a individual bundle for each use of `import()`. This PR would modify this behavior for the users dev environment to **not** create additional async bundles. \r\n\r\nHowever functionally this may only cause break's on extreme edge cases (strange SSR\/mode usages?).\r\n\r\n**What needs to be documented once your changes are merged?**\r\nAddition of a new configuration property\r\n\r\n```\r\nmodule: {\r\n  asnycChunkMode: \"eager\" \/\/ (or \"lazy\")\r\n}\r\n```\r\n\r\n\"eager\" is the default for development environment, and \"lazy\" is the default for any other mode.\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [x] <!-- document --> This need to be documented (issue in webpack\/webpack.js.org will be filed when merged)","Note: fix this test\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/3408176\/51359836-40fc7880-1a7e-11e9-8f09-30dbaa5604cc.png)\r\n\r\nAlso investigate source-map tests section based on errors. ","My only obvious concern is that this will make it harder to catch CORS misconfigurations; but fixing CORS is a one-time thing, this build loop happens several times per hour...","@TheLarkInn Could you update the test configurations to keep the old behavior?","For some real-world data from Outlook Web's codebase, I ran both v5-alpha.6 and this branch in dev watch mode 5 times each, and triggered 5 incremental builds for each run.\r\n\r\n| | initial build(avg) | first incremental build (avg) | subsequent incremental build (avg)|\r\n|--|--|--|--|\r\n| v5-alpha.6 | 237.8s | 53.1s | 13.4s |\r\n| this PR | 179.5s | 5.21s | 4.12s |","@ooflorent what do you think is the best approach here. Should I set mode `false` and update the values of the strings produced for that test? ","@TheLarkInn I think the existing tests should use `false`. This way you don't have to update them.","<!-- identifier: ci-result -->\n\nThe basic integration tests succeeded, but the full suite failed.\n\n@TheLarkInn Please review the following output log for errors:\n\n```text\nwarning You are using Node \"12.0.0-nightly20181024bb79e768e5\" which is not supported and may encounter bugs or unexpected behavior. Yarn supports the following semver range: \"^4.8.0 || ^5.7.0 || ^6.2.2 || >=8.0.0\"\nwarning You are using Node \"12.0.0-nightly20181024bb79e768e5\" which is not supported and may encounter bugs or unexpected behavior. Yarn supports the following semver range: \"^4.8.0 || ^5.7.0 || ^6.2.2 || >=8.0.0\"\n\nwarning You are using Node \"12.0.0-nightly20181024bb79e768e5\" which is not supported and may encounter bugs or unexpected behavior. Yarn supports the following semver range: \"^4.8.0 || ^5.7.0 || ^6.2.2 || >=8.0.0\"\nFAIL test\/TestCasesDevelopment.test.js (32.815s)\n  \u25cf Console\n\n    console.error node_modules\/jest-jasmine2\/build\/jasmine\/Env.js:157\n      Unhandled error\n    console.error node_modules\/jest-jasmine2\/build\/jasmine\/Env.js:158\n      TypeError: Cannot read property '.\/wasm\/finalize-exports-issue-8261\/node_modules\/side-effect-free\/module.wat' of undefined\n          at Object..\/wasm\/finalize-exports-issue-8261\/node_modules\/side-effect-free\/module.wat (\/home\/travis\/build\/webpack\/webpack\/test\/js\/development\/wasm\/finalize-exports-issue-8261\/bundle.js:88:40)\n          at __webpack_require__ (\/home\/travis\/build\/webpack\/webpack\/test\/js\/development\/wasm\/finalize-exports-issue-8261\/bundle.js:21:30)\n          at Module..\/wasm\/finalize-exports-issue-8261\/node_modules\/side-effect-free\/index.js (\/home\/travis\/build\/webpack\/webpack\/test\/js\/development\/wasm\/finalize-exports-issue-8261\/bundle.js:72:69)\n          at __webpack_require__ (\/home\/travis\/build\/webpack\/webpack\/test\/js\/development\/wasm\/finalize-exports-issue-8261\/bundle.js:21:30)\n```\n<details>\n  <summary>Show remaining errors<\/summary>\n\n```text\n  \u25cf TestCases \u203a development \u203a chunks \u203a inline-options \u203a exported tests \u203a should be able to combine chunks by name\n\n    expect(received).toBe(expected) \/\/ Object.is equality\n\n    Expected: false\n    Received: true\n\n      791 | \tvar syncInitial = true;\n      792 | \tvar p = Promise.all([load(\"a\"), load(\"b\")]).then(function() {\n    > 793 | \t\texpect(syncInitial).toBe(expectedSyncInitial);\n          | \t\t                    ^\n      794 | \t\tsync = true;\n      795 | \t\tvar p = Promise.all([\n      796 | \t\t\tload(\"a\").then(function(a) {\n\n      at test\/js\/development\/chunks\/inline-options\/bundle.js:793:23\n\n  \u25cf TestCases \u203a development \u203a chunks \u203a named-chunks \u203a exported tests \u203a should be able to use named chunks in import()\n\n    expect(received).toBeFalsy()\n\n    Received: true\n\n      329 | \t\t});\n      330 | \t\tPromise.resolve(\/*! import() eager *\/).then(__webpack_require__.t.bind(__webpack_require__, \/*! .\/empty?import3-in-chunk2 *\/ \".\/chunks\/named-chunks\/empty.js?import3-in-chunk2\", 7)).then(function(result){\n    > 331 | \t\t\texpect(sync).toBeFalsy();\n          | \t\t\t             ^\n      332 | \t\t\tif(i++ > 0) done();\n      333 | \t\t}).catch(function(err){\n      334 | \t\t\tdone(err);\n\n      at test\/js\/development\/chunks\/named-chunks\/bundle.js:331:17\n\n  \u25cf TestCases \u203a development \u203a chunks \u203a named-chunks \u203a exported tests \u203a should be able to use named chunk in context import()\n\n    expect(received).toBeFalsy()\n\n    Received: true\n\n      353 | \t\t});\n      354 | \t\t__webpack_require__(\".\/chunks\/named-chunks eager recursive ^\\\\.\\\\\/e.*4$\")(\".\/e\" + mpty + \"4\").then(function(result){\n    > 355 | \t\t\texpect(sync).toBeFalsy();\n          | \t\t\t             ^\n      356 | \t\t\tif(i++ > 0) done();\n      357 | \t\t}).catch(function(err){\n      358 | \t\t\tdone(err);\n\n      at test\/js\/development\/chunks\/named-chunks\/bundle.js:355:17\n\n  \u25cf TestCases \u203a development \u203a chunks \u203a weird-reference-to-entry \u203a weird-reference-to-entry should compile\n\n    Less errors while compiling than expected:\n\n    . Check expected errors: \/home\/travis\/build\/webpack\/webpack\/test\/cases\/chunks\/weird-reference-to-entry\/errors.js\n\n      67 | \t\t\treturn (\n      68 | \t\t\t\tdone(\n    > 69 | \t\t\t\t\tnew Error(\n         | \t\t\t\t\t^\n      70 | \t\t\t\t\t\t`Less ${kind}s while compiling than expected:\\n\\n${array.map(explain).join(\n      71 | \t\t\t\t\t\t\t\"\\n\\n\"\n      72 | \t\t\t\t\t\t)}. Check expected ${kind}s: ${expectedFilename}`\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:69:6)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a decoding \u203a decoding should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/decoding\/memory2.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/decoding\/memory2.wasm; moduleName = .\/wasm\/decoding\/memory2.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/decoding\/index.js\",\"originIdentifier\":\"\/home\/travis\/build\/webp...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/decoding\/memory3.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/decoding\/memory3.wasm; moduleName = .\/wasm\/decoding\/memory3.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/decoding\/index.js\",\"originIdentifier\":\"\/home\/travis\/build\/webp...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a decoding \u203a exported tests \u203a should support wasm compiled from c++\n\n    TypeError: Cannot read property '.\/wasm\/decoding\/memory3.wasm' of undefined\n\n      101 | \"use strict\";\n      102 | \/\/ Instantiate WebAssembly module\n    > 103 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      104 | \n      105 | \/\/ export exports from WebAssembly module\n      106 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/decoding\/memory3.wasm (test\/js\/development\/wasm\/decoding\/bundle.js:103:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/decoding\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a decoding \u203a exported tests \u203a should raw memory export without data\n\n    TypeError: Cannot read property '.\/wasm\/decoding\/memory2.wasm' of undefined\n\n      79 | \"use strict\";\n      80 | \/\/ Instantiate WebAssembly module\n    > 81 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      82 | \n      83 | \/\/ export exports from WebAssembly module\n      84 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/decoding\/memory2.wasm (test\/js\/development\/wasm\/decoding\/bundle.js:81:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/decoding\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a export-imported-global \u203a export-imported-global should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/export-imported-global\/module.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/export-imported-global\/module.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/export-imported-global\/module.js\",\"originIdentifier\":\"\/home\/tr...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a export-imported-global \u203a exported tests \u203a should export imported global\n\n    TypeError: Cannot read property '.\/wasm\/export-imported-global\/module.wat' of undefined\n\n      122 | \"use strict\";\n      123 | \/\/ Instantiate WebAssembly module\n    > 124 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      125 | \n      126 | \/\/ export exports from WebAssembly module\n      127 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/export-imported-global\/module.wat (test\/js\/development\/wasm\/export-imported-global\/bundle.js:124:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/export-imported-global\/bundle.js:21:30)\n      at Module..\/wasm\/export-imported-global\/module.js (test\/js\/development\/wasm\/export-imported-global\/bundle.js:108:69)\n      at __webpack_require__ (test\/js\/development\/wasm\/export-imported-global\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a finalize-exports-issue-8261 \u203a finalize-exports-issue-8261 should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/finalize-exports-issue-8261\/node_modules\/side-effect-free\/module.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/finalize-exports-issue-8261\/node_modules\/side-effect-free\/module.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/finalize-exports-issue-8261\/node_modules\/side-effect-free\/inde...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a global-refs-imported-global \u203a global-refs-imported-global should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/global-refs-imported-global\/module.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/global-refs-imported-global\/module.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/global-refs-imported-global\/index.js\",\"originIdentifier\":\"\/hom...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a global-refs-imported-global \u203a exported tests \u203a should allow global with imported global as initilizer\n\n    TypeError: Cannot read property '.\/wasm\/global-refs-imported-global\/module.wat' of undefined\n\n      87 | \"use strict\";\n      88 | \/\/ Instantiate WebAssembly module\n    > 89 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      90 | \n      91 | \/\/ export exports from WebAssembly module\n      92 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/global-refs-imported-global\/module.wat (test\/js\/development\/wasm\/global-refs-imported-global\/bundle.js:89:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/global-refs-imported-global\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a import-wasm-wasm \u203a import-wasm-wasm should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/import-wasm-wasm\/wasm.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/import-wasm-wasm\/wasm.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/import-wasm-wasm\/index.js\",\"originIdentifier\":\"\/home\/travis\/bu...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/import-wasm-wasm\/wasm2.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/import-wasm-wasm\/wasm2.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/import-wasm-wasm\/wasm.wat\",\"originIdentifier\":\"\/home\/travis\/bu...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a import-wasm-wasm \u203a exported tests \u203a should allow to run a WebAssembly module with imports\n\n    TypeError: Cannot read property '.\/wasm\/import-wasm-wasm\/wasm.wat' of undefined\n\n      70 | \"use strict\";\n      71 | \/\/ Instantiate WebAssembly module\n    > 72 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      73 | \n      74 | \/\/ export exports from WebAssembly module\n      75 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/import-wasm-wasm\/wasm.wat (test\/js\/development\/wasm\/import-wasm-wasm\/bundle.js:72:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/import-wasm-wasm\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imported-global-preserve-ordering \u203a imported-global-preserve-ordering should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/imported-global-preserve-ordering\/module.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/imported-global-preserve-ordering\/module.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imported-global-preserve-ordering\/index.js\",\"originIdentifier\"...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imported-global-preserve-ordering \u203a exported tests \u203a should preserve the ordering of globals\n\n    TypeError: Cannot read property '.\/wasm\/imported-global-preserve-ordering\/module.wat' of undefined\n\n       98 | \"use strict\";\n       99 | \/\/ Instantiate WebAssembly module\n    > 100 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      101 | \n      102 | \/\/ export exports from WebAssembly module\n      103 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/imported-global-preserve-ordering\/module.wat (test\/js\/development\/wasm\/imported-global-preserve-ordering\/bundle.js:100:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/imported-global-preserve-ordering\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imported-global-preserve-type \u203a imported-global-preserve-type should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/imported-global-preserve-type\/module.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/imported-global-preserve-type\/module.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imported-global-preserve-type\/index.js\",\"originIdentifier\":\"\/h...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imported-global-preserve-type \u203a exported tests \u203a should preserve the valtype of the imported global\n\n    TypeError: Cannot read property '.\/wasm\/imported-global-preserve-type\/module.wat' of undefined\n\n      87 | \"use strict\";\n      88 | \/\/ Instantiate WebAssembly module\n    > 89 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      90 | \n      91 | \/\/ export exports from WebAssembly module\n      92 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/imported-global-preserve-type\/module.wat (test\/js\/development\/wasm\/imported-global-preserve-type\/bundle.js:89:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/imported-global-preserve-type\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports \u203a imports should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/imports\/wasm.wat?1; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/imports\/wasm.wat?1; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports\/index.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpa...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports \u203a exported tests \u203a should allow to run a WebAssembly module with imports\n\n    TypeError: Cannot read property '.\/wasm\/imports\/wasm.wat?1' of undefined\n\n      90 | \"use strict\";\n      91 | \/\/ Instantiate WebAssembly module\n    > 92 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      93 | \n      94 | \/\/ export exports from WebAssembly module\n      95 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/imports\/wasm.wat?1 (test\/js\/development\/wasm\/imports\/bundle.js:92:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/imports\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-circular \u203a imports-circular should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/imports-circular\/wasm.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/imports-circular\/wasm.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports-circular\/module.js\",\"originIdentifier\":\"\/home\/travis\/b...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-circular \u203a exported tests \u203a should allow to run a WebAssembly module importing JS circular\n\n    TypeError: Cannot read property '.\/wasm\/imports-circular\/wasm.wat' of undefined\n\n       95 | \"use strict\";\n       96 | \/\/ Instantiate WebAssembly module\n    >  97 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n       98 | \n       99 | \/\/ export exports from WebAssembly module\n      100 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/imports-circular\/wasm.wat (test\/js\/development\/wasm\/imports-circular\/bundle.js:97:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/imports-circular\/bundle.js:21:30)\n      at Module..\/wasm\/imports-circular\/module.js (test\/js\/development\/wasm\/imports-circular\/bundle.js:75:67)\n      at __webpack_require__ (test\/js\/development\/wasm\/imports-circular\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-complex-types \u203a imports-complex-types should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/imports-complex-types\/other.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/imports-complex-types\/other...; moduleName = .\/wasm\/imports-complex-types\/other.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports-complex-types\/wasm.wasm\",\"originIdentifier\":\"\/home\/tra...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/imports-complex-types\/wasm.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/imports-complex-types\/wasm....; moduleName = .\/wasm\/imports-complex-types\/wasm.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports-complex-types\/index.js\",\"originIdentifier\":\"\/home\/trav...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-complex-types \u203a exported tests \u203a should allow to run a WebAssembly module with non-js-compatible imports\n\n    TypeError: Cannot read property '.\/wasm\/imports-complex-types\/wasm.wasm' of undefined\n\n      92 | \"use strict\";\n      93 | \/\/ Instantiate WebAssembly module\n    > 94 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      95 | \n      96 | \/\/ export exports from WebAssembly module\n      97 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/imports-complex-types\/wasm.wasm (test\/js\/development\/wasm\/imports-complex-types\/bundle.js:94:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/imports-complex-types\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-many-direct \u203a imports-many-direct should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/imports-many-direct\/other1.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/imports-many-direct\/other1.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports-many-direct\/wasm.wat\",\"originIdentifier\":\"\/home\/travis...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/imports-many-direct\/other2.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/imports-many-direct\/other2.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports-many-direct\/wasm.wat\",\"originIdentifier\":\"\/home\/travis...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/imports-many-direct\/wasm.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/imports-many-direct\/wasm.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports-many-direct\/index.js\",\"originIdentifier\":\"\/home\/travis...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-many-direct \u203a exported tests \u203a should allow to run a WebAssembly module with many direct wasm dependencies\n\n    TypeError: Cannot read property '.\/wasm\/imports-many-direct\/wasm.wat' of undefined\n\n      114 | \"use strict\";\n      115 | \/\/ Instantiate WebAssembly module\n    > 116 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      117 | \n      118 | \/\/ export exports from WebAssembly module\n      119 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/imports-many-direct\/wasm.wat (test\/js\/development\/wasm\/imports-many-direct\/bundle.js:116:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/imports-many-direct\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-multiple \u203a imports-multiple should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/imports-multiple\/wasm.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/imports-multiple\/wasm.wasm; moduleName = .\/wasm\/imports-multiple\/wasm.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports-multiple\/module.js\",\"originIdentifier\":\"\/home\/travis\/b...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-multiple \u203a exported tests \u203a should allow to run a WebAssembly module importing from multiple modules\n\n    TypeError: Cannot read property '.\/wasm\/imports-multiple\/wasm.wasm' of undefined\n\n      116 | \"use strict\";\n      117 | \/\/ Instantiate WebAssembly module\n    > 118 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      119 | \n      120 | \/\/ export exports from WebAssembly module\n      121 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/imports-multiple\/wasm.wasm (test\/js\/development\/wasm\/imports-multiple\/bundle.js:118:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/imports-multiple\/bundle.js:21:30)\n      at Module..\/wasm\/imports-multiple\/module.js (test\/js\/development\/wasm\/imports-multiple\/bundle.js:75:68)\n      at __webpack_require__ (test\/js\/development\/wasm\/imports-multiple\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a memory \u203a memory should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/memory\/mem-access.wat?1; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/memory\/mem-access.wat?1; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/memory\/run.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpack\/...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/memory\/mem-access.wat?2; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/memory\/mem-access.wat?2; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/memory\/run.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpack\/...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/memory\/memory.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/memory\/memory.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/memory\/mem-access.wat?2\",\"originIdentifier\":\"\/home\/travis\/buil...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a memory \u203a exported tests \u203a should allow direct memory connection between wasm modules\n\n    TypeError: Cannot read property '.\/wasm\/memory\/mem-access.wat?1' of undefined\n\n      74 | \"use strict\";\n      75 | \/\/ Instantiate WebAssembly module\n    > 76 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      77 | \n      78 | \/\/ export exports from WebAssembly module\n      79 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/memory\/mem-access.wat?1 (test\/js\/development\/wasm\/memory\/bundle.js:76:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/memory\/bundle.js:21:30)\n      at Module..\/wasm\/memory\/run.js (test\/js\/development\/wasm\/memory\/bundle.js:148:75)\n      at __webpack_require__ (test\/js\/development\/wasm\/memory\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a order \u203a order should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/order\/wasm.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/order\/wasm.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/order\/a.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpack\/web...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a order \u203a exported tests \u203a should be evaluated in the correct order\n\n    TypeError: Cannot read property '.\/wasm\/order\/wasm.wat' of undefined\n\n      163 | \"use strict\";\n      164 | \/\/ Instantiate WebAssembly module\n    > 165 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      166 | \n      167 | \/\/ export exports from WebAssembly module\n      168 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/order\/wasm.wat (test\/js\/development\/wasm\/order\/bundle.js:165:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/order\/bundle.js:21:30)\n      at Module..\/wasm\/order\/a.js (test\/js\/development\/wasm\/order\/bundle.js:58:67)\n      at __webpack_require__ (test\/js\/development\/wasm\/order\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a simple \u203a simple should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/simple\/wasm.wat?1; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/simple\/wasm.wat?1; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/simple\/module.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpa...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/simple\/wasm.wat?2; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/simple\/wasm.wat?2; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/simple\/index.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpac...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a simple \u203a exported tests \u203a should allow to run a WebAssembly module (indirect)\n\n    TypeError: Cannot read property '.\/wasm\/simple\/wasm.wat?1' of undefined\n\n      100 | \"use strict\";\n      101 | \/\/ Instantiate WebAssembly module\n    > 102 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      103 | \n      104 | \/\/ export exports from WebAssembly module\n      105 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/simple\/wasm.wat?1 (test\/js\/development\/wasm\/simple\/bundle.js:102:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/simple\/bundle.js:21:30)\n      at Module..\/wasm\/simple\/module.js (test\/js\/development\/wasm\/simple\/bundle.js:82:69)\n      at __webpack_require__ (test\/js\/development\/wasm\/simple\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a simple \u203a exported tests \u203a should allow to run a WebAssembly module (direct)\n\n    TypeError: Cannot read property '.\/wasm\/simple\/wasm.wat?2' of undefined\n\n      122 | \"use strict\";\n      123 | \/\/ Instantiate WebAssembly module\n    > 124 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      125 | \n      126 | \/\/ export exports from WebAssembly module\n      127 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/simple\/wasm.wat?2 (test\/js\/development\/wasm\/simple\/bundle.js:124:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/simple\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a table \u203a table should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/table\/wasm-table-export.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/table\/wasm-table-export.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/table\/index.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpack...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/table\/wasm-table-imported.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/table\/wasm-table-imported.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/table\/index.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpack...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/table\/wasm-table.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/table\/wasm-table.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/table\/index.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpack...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a table \u203a exported tests \u203a should support tables\n\n    TypeError: Cannot read property '.\/wasm\/table\/wasm-table.wat' of undefined\n\n      140 | \"use strict\";\n      141 | \/\/ Instantiate WebAssembly module\n    > 142 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      143 | \n      144 | \/\/ export exports from WebAssembly module\n      145 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/table\/wasm-table.wat (test\/js\/development\/wasm\/table\/bundle.js:142:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/table\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a table \u203a exported tests \u203a should support exported tables\n\n    TypeError: Cannot read property '.\/wasm\/table\/wasm-table-export.wat' of undefined\n\n       95 | \"use strict\";\n       96 | \/\/ Instantiate WebAssembly module\n    >  97 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n       98 | \n       99 | \/\/ export exports from WebAssembly module\n      100 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/table\/wasm-table-export.wat (test\/js\/development\/wasm\/table\/bundle.js:97:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/table\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a table \u203a exported tests \u203a should support imported tables\n\n    TypeError: Cannot read property '.\/wasm\/table\/wasm-table-imported.wat' of undefined\n\n      117 | \"use strict\";\n      118 | \/\/ Instantiate WebAssembly module\n    > 119 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      120 | \n      121 | \/\/ export exports from WebAssembly module\n      122 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/table\/wasm-table-imported.wat (test\/js\/development\/wasm\/table\/bundle.js:119:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/table\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a two-files-loader \u203a two-files-loader should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/two-files-loader\/src\/wasm.dat.wasm!=!..\/..\/node_modules\/wast-loader\/lib\/index.j...; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/two-files-loader\/src\/wasm.dat.wasm = (webpack)\/node_modules\/wast-loader\/lib!....; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/two-files-loader\/wrapper-loader2.js!.\/wasm\/two-files-loader\/sr...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/two-files-loader\/src\/wasm.dat.wat!=!.\/wasm\/two-files-loader\/src\/wasm.dat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/two-files-loader\/src\/wasm.dat.wat = .\/wasm\/two-files-loader\/src\/wasm.dat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/two-files-loader\/wrapper-loader.js!.\/wasm\/two-files-loader\/src...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a two-files-loader \u203a exported tests \u203a should be able to create two modules from loader\n\n    TypeError: Cannot read property '.\/wasm\/two-files-loader\/src\/wasm.dat.wat!=!.\/wasm\/two-files-loader\/src\/wasm.dat' of undefined\n\n       99 | \"use strict\";\n      100 | \/\/ Instantiate WebAssembly module\n    > 101 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      102 | \n      103 | \/\/ export exports from WebAssembly module\n      104 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/two-files-loader\/src\/wasm.dat.wat!=!.\/wasm\/two-files-loader\/src\/wasm.dat (test\/js\/development\/wasm\/two-files-loader\/bundle.js:101:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/two-files-loader\/bundle.js:21:30)\n      at Module..\/wasm\/two-files-loader\/wrapper-loader.js!.\/wasm\/two-files-loader\/src\/wasm.dat (test\/js\/development\/wasm\/two-files-loader\/bundle.js:124:80)\n      at __webpack_require__ (test\/js\/development\/wasm\/two-files-loader\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a two-files-loader \u203a exported tests \u203a should be able to create two modules from loader with remaining request\n\n    TypeError: Cannot read property '.\/wasm\/two-files-loader\/src\/wasm.dat.wasm!=!..\/..\/node_modules\/wast-loader\/lib\/index.js!.\/wasm\/two-files-loader\/src\/wasm.dat?2' of undefined\n\n      19 | \/******\/\n      20 | \/******\/ \t\t\/\/ Execute the module function\n    > 21 | \/******\/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n         |          \t\t                  ^\n      22 | \/******\/\n      23 | \/******\/ \t\t\/\/ Flag the module as loaded\n      24 | \/******\/ \t\tmodule.l = true;\n\n      at Object..\/wasm\/two-files-loader\/src\/wasm.dat.wasm!=!..\/..\/node_modules\/wast-loader\/lib\/index.js!.\/wasm\/two-files-loader\/src\/wasm.dat?2 (test\/js\/development\/wasm\/two-files-loader\/bundle.js:79:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/two-files-loader\/bundle.js:21:30)\n      at Module..\/wasm\/two-files-loader\/wrapper-loader2.js!.\/wasm\/two-files-loader\/src\/wasm.dat?2 (test\/js\/development\/wasm\/two-files-loader\/bundle.js:150:95)\n      at __webpack_require__ (test\/js\/development\/wasm\/two-files-loader\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a unused-export \u203a unused-export should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/unused-export\/wasm.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/unused-export\/wasm.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/unused-export\/module.js\",\"originIdentifier\":\"\/home\/travis\/buil...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a unused-export \u203a exported tests \u203a should allow wasm with unused exports\n\n    TypeError: Cannot read property '.\/wasm\/unused-export\/wasm.wat' of undefined\n\n      93 | \"use strict\";\n      94 | \/\/ Instantiate WebAssembly module\n    > 95 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      96 | \n      97 | \/\/ export exports from WebAssembly module\n      98 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/unused-export\/wasm.wat (test\/js\/development\/wasm\/unused-export\/bundle.js:95:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/unused-export\/bundle.js:21:30)\n      at Module..\/wasm\/unused-export\/module.js (test\/js\/development\/wasm\/unused-export\/bundle.js:75:67)\n      at __webpack_require__ (test\/js\/development\/wasm\/unused-export\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-async \u203a wasm-explorer-examples-async should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/wasm-explorer-examples-async\/Q_rsqrt.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-asyn...; moduleName = .\/wasm\/wasm-explorer-examples-async\/Q_rsqrt.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-async\/index.js\",\"originIdentifier\":\"\/ho...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-async\/duff.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-asyn...; moduleName = .\/wasm\/wasm-explorer-examples-async\/duff.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-async\/index.js\",\"originIdentifier\":\"\/ho...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-async\/fact.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-asyn...; moduleName = .\/wasm\/wasm-explorer-examples-async\/fact.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-async\/index.js\",\"originIdentifier\":\"\/ho...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-async\/fast-math.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-asyn...; moduleName = .\/wasm\/wasm-explorer-examples-async\/fast-math.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-async\/index.js\",\"originIdentifier\":\"\/ho...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-async\/popcnt.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-asyn...; moduleName = .\/wasm\/wasm-explorer-examples-async\/popcnt.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-async\/index.js\",\"originIdentifier\":\"\/ho...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-async\/testFunction.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-asyn...; moduleName = .\/wasm\/wasm-explorer-examples-async\/testFunction.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-async\/index.js\",\"originIdentifier\":\"\/ho...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-async \u203a exported tests \u203a Q_rsqrt should work\n\n    TypeError: Cannot read property '.\/wasm\/wasm-explorer-examples-async\/Q_rsqrt.wasm' of undefined\n\n      54 | \"use strict\";\n      55 | \/\/ Instantiate WebAssembly module\n    > 56 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      57 | \n      58 | \/\/ export exports from WebAssembly module\n      59 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/wasm-explorer-examples-async\/Q_rsqrt.wasm (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:56:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-async \u203a exported tests \u203a testFunction should work\n\n    TypeError: Cannot read property '.\/wasm\/wasm-explorer-examples-async\/testFunction.wasm' of undefined\n\n      248 | \"use strict\";\n      249 | \/\/ Instantiate WebAssembly module\n    > 250 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      251 | \n      252 | \/\/ export exports from WebAssembly module\n      253 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/wasm-explorer-examples-async\/testFunction.wasm (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:250:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-async \u203a exported tests \u203a fact should work\n\n    TypeError: Cannot read property '.\/wasm\/wasm-explorer-examples-async\/fact.wasm' of undefined\n\n       98 | \"use strict\";\n       99 | \/\/ Instantiate WebAssembly module\n    > 100 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      101 | \n      102 | \/\/ export exports from WebAssembly module\n      103 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/wasm-explorer-examples-async\/fact.wasm (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:100:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-async \u203a exported tests \u203a popcnt should work\n\n    TypeError: Cannot read property '.\/wasm\/wasm-explorer-examples-async\/popcnt.wasm' of undefined\n\n      226 | \"use strict\";\n      227 | \/\/ Instantiate WebAssembly module\n    > 228 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      229 | \n      230 | \/\/ export exports from WebAssembly module\n      231 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/wasm-explorer-examples-async\/popcnt.wasm (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:228:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-async \u203a exported tests \u203a fast-math should work\n\n    TypeError: Cannot read property '.\/wasm\/wasm-explorer-examples-async\/fast-math.wasm' of undefined\n\n      120 | \"use strict\";\n      121 | \/\/ Instantiate WebAssembly module\n    > 122 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      123 | \n      124 | \/\/ export exports from WebAssembly module\n      125 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/wasm-explorer-examples-async\/fast-math.wasm (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:122:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-async \u203a exported tests \u203a duff should work\n\n    TypeError: Cannot read property '.\/wasm\/wasm-explorer-examples-async\/duff.wasm' of undefined\n\n      76 | \"use strict\";\n      77 | \/\/ Instantiate WebAssembly module\n    > 78 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      79 | \n      80 | \/\/ export exports from WebAssembly module\n      81 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/wasm-explorer-examples-async\/duff.wasm (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:78:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-sync \u203a wasm-explorer-examples-sync should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/wasm-explorer-examples-sync\/Q_rsqrt.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-sync...; moduleName = .\/wasm\/wasm-explorer-examples-sync\/Q_rsqrt.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-sync\/tests.js\",\"originIdentifier\":\"\/hom...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-sync\/duff.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-sync...; moduleName = .\/wasm\/wasm-explorer-examples-sync\/duff.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-sync\/tests.js\",\"originIdentifier\":\"\/hom...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-sync\/fact.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-sync...; moduleName = .\/wasm\/wasm-explorer-examples-sync\/fact.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-sync\/tests.js\",\"originIdentifier\":\"\/hom...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-sync\/fast-math.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-sync...; moduleName = .\/wasm\/wasm-explorer-examples-sync\/fast-math.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-sync\/tests.js\",\"originIdentifier\":\"\/hom...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-sync\/popcnt.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-sync...; moduleName = .\/wasm\/wasm-explorer-examples-sync\/popcnt.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-sync\/tests.js\",\"originIdentifier\":\"\/hom...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-sync\/testFunction.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-sync...; moduleName = .\/wasm\/wasm-explorer-examples-sync\/testFunction.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-sync\/tests.js\",\"originIdentifier\":\"\/hom...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-sync \u203a exported tests \u203a Q_rsqrt should work\n\n    TypeError: Cannot read property '.\/wasm\/wasm-explorer-examples-sync\/Q_rsqrt.wasm' of undefined\n\n      54 | \"use strict\";\n      55 | \/\/ Instantiate WebAssembly module\n    > 56 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      57 | \n      58 | \/\/ export exports from WebAssembly module\n      59 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/wasm-explorer-examples-sync\/Q_rsqrt.wasm (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:56:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:21:30)\n      at Module..\/wasm\/wasm-explorer-examples-sync\/tests.js (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:246:71)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-sync \u203a exported tests \u203a testFunction should work\n\n    TypeError: Cannot read property 'memory' of undefined\n\n      264 | \n      265 | function run_testFunction() {\n    > 266 | \tconst view = new Int32Array(_testFunction_wasm__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer);\n          | \t                                                                           ^\n      267 | \tview[0] = 123;\n      268 | \tview[1] = 1;\n      269 | \tview[2] = 2;\n\n      at Module.run_testFunction (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:266:77)\n      at Promise.resolve.then.then.t (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:148:159)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-sync \u203a exported tests \u203a fact should work\n\n    TypeError: Cannot read property '_Z4facti' of undefined\n\n      274 | \n      275 | function run_fact() {\n    > 276 | \tconst result = _fact_wasm__WEBPACK_IMPORTED_MODULE_2__[\"_Z4facti\"](11);\n          | \t                                                      ^\n      277 | \texpect(result).toEqual(39916800);\n      278 | }\n      279 | \n\n      at Module.run_fact (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:276:56)\n      at Promise.resolve.then.then.t (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:152:159)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-sync \u203a exported tests \u203a popcnt should work\n\n    TypeError: Cannot read property 'main' of undefined\n\n      279 | \n      280 | function run_popcnt() {\n    > 281 | \texpect(_popcnt_wasm__WEBPACK_IMPORTED_MODULE_3__[\"main\"](0xF0F)).toEqual(16);\n          | \t                                                ^\n      282 | \texpect(_popcnt_wasm__WEBPACK_IMPORTED_MODULE_3__[\"_Z5countj\"](0xF0F)).toEqual(8);\n      283 | }\n      284 | \n\n      at Module.run_popcnt (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:281:50)\n      at Promise.resolve.then.then.t (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:156:159)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-sync \u203a exported tests \u203a fast-math should work\n\n    TypeError: Cannot read property '_Z3food' of undefined\n\n      284 | \n      285 | function run_fastMath() {\n    > 286 | \texpect(_fast_math_wasm__WEBPACK_IMPORTED_MODULE_4__[\"_Z3food\"](42)).toEqual(14);\n          | \t                                                   ^\n      287 | \texpect(_fast_math_wasm__WEBPACK_IMPORTED_MODULE_4__[\"_Z9maybe_mindd\"](42, 24)).toEqual(24);\n      288 | \texpect(_fast_math_wasm__WEBPACK_IMPORTED_MODULE_4__[\"_Z8call_powd\"](42)).toEqual(9682651996416);\n      289 | \texpect(_fast_math_wasm__WEBPACK_IMPORTED_MODULE_4__[\"_Z6do_powd\"](42)).toEqual(9682651996416);\n\n      at Module.run_fastMath (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:286:53)\n      at Promise.resolve.then.then.t (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:160:159)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-sync \u203a exported tests \u203a duff should work\n\n    TypeError: Cannot read property 'memory' of undefined\n\n      292 | \n      293 | function run_duff() {\n    > 294 | \tconst view = new Uint8Array(_duff_wasm__WEBPACK_IMPORTED_MODULE_5__[\"memory\"].buffer);\n          | \t                                                                   ^\n      295 | \tview[0] = 123;\n      296 | \tfor(let i = 1; i < 100; i++)\n      297 | \t\tview[i] = i;\n\n      at Module.run_duff (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:294:69)\n      at Promise.resolve.then.then.t (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:164:159)\n\n\nSummary of all failing tests\nFAIL test\/TestCasesDevelopment.test.js (32.815s)\n  \u25cf TestCases \u203a development \u203a chunks \u203a inline-options \u203a exported tests \u203a should be able to combine chunks by name\n\n    expect(received).toBe(expected) \/\/ Object.is equality\n\n    Expected: false\n    Received: true\n\n      791 | \tvar syncInitial = true;\n      792 | \tvar p = Promise.all([load(\"a\"), load(\"b\")]).then(function() {\n    > 793 | \t\texpect(syncInitial).toBe(expectedSyncInitial);\n          | \t\t                    ^\n      794 | \t\tsync = true;\n      795 | \t\tvar p = Promise.all([\n      796 | \t\t\tload(\"a\").then(function(a) {\n\n      at test\/js\/development\/chunks\/inline-options\/bundle.js:793:23\n\n  \u25cf TestCases \u203a development \u203a chunks \u203a named-chunks \u203a exported tests \u203a should be able to use named chunks in import()\n\n    expect(received).toBeFalsy()\n\n    Received: true\n\n      329 | \t\t});\n      330 | \t\tPromise.resolve(\/*! import() eager *\/).then(__webpack_require__.t.bind(__webpack_require__, \/*! .\/empty?import3-in-chunk2 *\/ \".\/chunks\/named-chunks\/empty.js?import3-in-chunk2\", 7)).then(function(result){\n    > 331 | \t\t\texpect(sync).toBeFalsy();\n          | \t\t\t             ^\n      332 | \t\t\tif(i++ > 0) done();\n      333 | \t\t}).catch(function(err){\n      334 | \t\t\tdone(err);\n\n      at test\/js\/development\/chunks\/named-chunks\/bundle.js:331:17\n\n  \u25cf TestCases \u203a development \u203a chunks \u203a named-chunks \u203a exported tests \u203a should be able to use named chunk in context import()\n\n    expect(received).toBeFalsy()\n\n    Received: true\n\n      353 | \t\t});\n      354 | \t\t__webpack_require__(\".\/chunks\/named-chunks eager recursive ^\\\\.\\\\\/e.*4$\")(\".\/e\" + mpty + \"4\").then(function(result){\n    > 355 | \t\t\texpect(sync).toBeFalsy();\n          | \t\t\t             ^\n      356 | \t\t\tif(i++ > 0) done();\n      357 | \t\t}).catch(function(err){\n      358 | \t\t\tdone(err);\n\n      at test\/js\/development\/chunks\/named-chunks\/bundle.js:355:17\n\n  \u25cf TestCases \u203a development \u203a chunks \u203a weird-reference-to-entry \u203a weird-reference-to-entry should compile\n\n    Less errors while compiling than expected:\n\n    . Check expected errors: \/home\/travis\/build\/webpack\/webpack\/test\/cases\/chunks\/weird-reference-to-entry\/errors.js\n\n      67 | \t\t\treturn (\n      68 | \t\t\t\tdone(\n    > 69 | \t\t\t\t\tnew Error(\n         | \t\t\t\t\t^\n      70 | \t\t\t\t\t\t`Less ${kind}s while compiling than expected:\\n\\n${array.map(explain).join(\n      71 | \t\t\t\t\t\t\t\"\\n\\n\"\n      72 | \t\t\t\t\t\t)}. Check expected ${kind}s: ${expectedFilename}`\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:69:6)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (eval at create (node_modules\/tapable\/lib\/HookCodeFactory.js:32:10), <anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a decoding \u203a decoding should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/decoding\/memory2.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/decoding\/memory2.wasm; moduleName = .\/wasm\/decoding\/memory2.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/decoding\/index.js\",\"originIdentifier\":\"\/home\/travis\/build\/webp...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/decoding\/memory3.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/decoding\/memory3.wasm; moduleName = .\/wasm\/decoding\/memory3.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/decoding\/index.js\",\"originIdentifier\":\"\/home\/travis\/build\/webp...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a decoding \u203a exported tests \u203a should support wasm compiled from c++\n\n    TypeError: Cannot read property '.\/wasm\/decoding\/memory3.wasm' of undefined\n\n      101 | \"use strict\";\n      102 | \/\/ Instantiate WebAssembly module\n    > 103 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      104 | \n      105 | \/\/ export exports from WebAssembly module\n      106 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/decoding\/memory3.wasm (test\/js\/development\/wasm\/decoding\/bundle.js:103:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/decoding\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a decoding \u203a exported tests \u203a should raw memory export without data\n\n    TypeError: Cannot read property '.\/wasm\/decoding\/memory2.wasm' of undefined\n\n      79 | \"use strict\";\n      80 | \/\/ Instantiate WebAssembly module\n    > 81 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      82 | \n      83 | \/\/ export exports from WebAssembly module\n      84 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/decoding\/memory2.wasm (test\/js\/development\/wasm\/decoding\/bundle.js:81:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/decoding\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a export-imported-global \u203a export-imported-global should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/export-imported-global\/module.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/export-imported-global\/module.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/export-imported-global\/module.js\",\"originIdentifier\":\"\/home\/tr...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a export-imported-global \u203a exported tests \u203a should export imported global\n\n    TypeError: Cannot read property '.\/wasm\/export-imported-global\/module.wat' of undefined\n\n      122 | \"use strict\";\n      123 | \/\/ Instantiate WebAssembly module\n    > 124 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      125 | \n      126 | \/\/ export exports from WebAssembly module\n      127 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/export-imported-global\/module.wat (test\/js\/development\/wasm\/export-imported-global\/bundle.js:124:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/export-imported-global\/bundle.js:21:30)\n      at Module..\/wasm\/export-imported-global\/module.js (test\/js\/development\/wasm\/export-imported-global\/bundle.js:108:69)\n      at __webpack_require__ (test\/js\/development\/wasm\/export-imported-global\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a finalize-exports-issue-8261 \u203a finalize-exports-issue-8261 should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/finalize-exports-issue-8261\/node_modules\/side-effect-free\/module.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/finalize-exports-issue-8261\/node_modules\/side-effect-free\/module.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/finalize-exports-issue-8261\/node_modules\/side-effect-free\/inde...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a global-refs-imported-global \u203a global-refs-imported-global should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/global-refs-imported-global\/module.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/global-refs-imported-global\/module.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/global-refs-imported-global\/index.js\",\"originIdentifier\":\"\/hom...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a global-refs-imported-global \u203a exported tests \u203a should allow global with imported global as initilizer\n\n    TypeError: Cannot read property '.\/wasm\/global-refs-imported-global\/module.wat' of undefined\n\n      87 | \"use strict\";\n      88 | \/\/ Instantiate WebAssembly module\n    > 89 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      90 | \n      91 | \/\/ export exports from WebAssembly module\n      92 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/global-refs-imported-global\/module.wat (test\/js\/development\/wasm\/global-refs-imported-global\/bundle.js:89:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/global-refs-imported-global\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a import-wasm-wasm \u203a import-wasm-wasm should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/import-wasm-wasm\/wasm.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/import-wasm-wasm\/wasm.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/import-wasm-wasm\/index.js\",\"originIdentifier\":\"\/home\/travis\/bu...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/import-wasm-wasm\/wasm2.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/import-wasm-wasm\/wasm2.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/import-wasm-wasm\/wasm.wat\",\"originIdentifier\":\"\/home\/travis\/bu...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a import-wasm-wasm \u203a exported tests \u203a should allow to run a WebAssembly module with imports\n\n    TypeError: Cannot read property '.\/wasm\/import-wasm-wasm\/wasm.wat' of undefined\n\n      70 | \"use strict\";\n      71 | \/\/ Instantiate WebAssembly module\n    > 72 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      73 | \n      74 | \/\/ export exports from WebAssembly module\n      75 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/import-wasm-wasm\/wasm.wat (test\/js\/development\/wasm\/import-wasm-wasm\/bundle.js:72:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/import-wasm-wasm\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imported-global-preserve-ordering \u203a imported-global-preserve-ordering should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/imported-global-preserve-ordering\/module.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/imported-global-preserve-ordering\/module.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imported-global-preserve-ordering\/index.js\",\"originIdentifier\"...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imported-global-preserve-ordering \u203a exported tests \u203a should preserve the ordering of globals\n\n    TypeError: Cannot read property '.\/wasm\/imported-global-preserve-ordering\/module.wat' of undefined\n\n       98 | \"use strict\";\n       99 | \/\/ Instantiate WebAssembly module\n    > 100 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      101 | \n      102 | \/\/ export exports from WebAssembly module\n      103 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/imported-global-preserve-ordering\/module.wat (test\/js\/development\/wasm\/imported-global-preserve-ordering\/bundle.js:100:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/imported-global-preserve-ordering\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imported-global-preserve-type \u203a imported-global-preserve-type should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/imported-global-preserve-type\/module.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/imported-global-preserve-type\/module.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imported-global-preserve-type\/index.js\",\"originIdentifier\":\"\/h...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imported-global-preserve-type \u203a exported tests \u203a should preserve the valtype of the imported global\n\n    TypeError: Cannot read property '.\/wasm\/imported-global-preserve-type\/module.wat' of undefined\n\n      87 | \"use strict\";\n      88 | \/\/ Instantiate WebAssembly module\n    > 89 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      90 | \n      91 | \/\/ export exports from WebAssembly module\n      92 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/imported-global-preserve-type\/module.wat (test\/js\/development\/wasm\/imported-global-preserve-type\/bundle.js:89:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/imported-global-preserve-type\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports \u203a imports should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/imports\/wasm.wat?1; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/imports\/wasm.wat?1; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports\/index.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpa...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports \u203a exported tests \u203a should allow to run a WebAssembly module with imports\n\n    TypeError: Cannot read property '.\/wasm\/imports\/wasm.wat?1' of undefined\n\n      90 | \"use strict\";\n      91 | \/\/ Instantiate WebAssembly module\n    > 92 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      93 | \n      94 | \/\/ export exports from WebAssembly module\n      95 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/imports\/wasm.wat?1 (test\/js\/development\/wasm\/imports\/bundle.js:92:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/imports\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-circular \u203a imports-circular should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/imports-circular\/wasm.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/imports-circular\/wasm.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports-circular\/module.js\",\"originIdentifier\":\"\/home\/travis\/b...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-circular \u203a exported tests \u203a should allow to run a WebAssembly module importing JS circular\n\n    TypeError: Cannot read property '.\/wasm\/imports-circular\/wasm.wat' of undefined\n\n       95 | \"use strict\";\n       96 | \/\/ Instantiate WebAssembly module\n    >  97 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n       98 | \n       99 | \/\/ export exports from WebAssembly module\n      100 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/imports-circular\/wasm.wat (test\/js\/development\/wasm\/imports-circular\/bundle.js:97:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/imports-circular\/bundle.js:21:30)\n      at Module..\/wasm\/imports-circular\/module.js (test\/js\/development\/wasm\/imports-circular\/bundle.js:75:67)\n      at __webpack_require__ (test\/js\/development\/wasm\/imports-circular\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-complex-types \u203a imports-complex-types should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/imports-complex-types\/other.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/imports-complex-types\/other...; moduleName = .\/wasm\/imports-complex-types\/other.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports-complex-types\/wasm.wasm\",\"originIdentifier\":\"\/home\/tra...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/imports-complex-types\/wasm.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/imports-complex-types\/wasm....; moduleName = .\/wasm\/imports-complex-types\/wasm.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports-complex-types\/index.js\",\"originIdentifier\":\"\/home\/trav...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-complex-types \u203a exported tests \u203a should allow to run a WebAssembly module with non-js-compatible imports\n\n    TypeError: Cannot read property '.\/wasm\/imports-complex-types\/wasm.wasm' of undefined\n\n      92 | \"use strict\";\n      93 | \/\/ Instantiate WebAssembly module\n    > 94 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      95 | \n      96 | \/\/ export exports from WebAssembly module\n      97 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/imports-complex-types\/wasm.wasm (test\/js\/development\/wasm\/imports-complex-types\/bundle.js:94:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/imports-complex-types\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-many-direct \u203a imports-many-direct should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/imports-many-direct\/other1.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/imports-many-direct\/other1.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports-many-direct\/wasm.wat\",\"originIdentifier\":\"\/home\/travis...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/imports-many-direct\/other2.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/imports-many-direct\/other2.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports-many-direct\/wasm.wat\",\"originIdentifier\":\"\/home\/travis...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/imports-many-direct\/wasm.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/imports-many-direct\/wasm.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports-many-direct\/index.js\",\"originIdentifier\":\"\/home\/travis...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-many-direct \u203a exported tests \u203a should allow to run a WebAssembly module with many direct wasm dependencies\n\n    TypeError: Cannot read property '.\/wasm\/imports-many-direct\/wasm.wat' of undefined\n\n      114 | \"use strict\";\n      115 | \/\/ Instantiate WebAssembly module\n    > 116 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      117 | \n      118 | \/\/ export exports from WebAssembly module\n      119 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/imports-many-direct\/wasm.wat (test\/js\/development\/wasm\/imports-many-direct\/bundle.js:116:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/imports-many-direct\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-multiple \u203a imports-multiple should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/imports-multiple\/wasm.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/imports-multiple\/wasm.wasm; moduleName = .\/wasm\/imports-multiple\/wasm.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/imports-multiple\/module.js\",\"originIdentifier\":\"\/home\/travis\/b...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a imports-multiple \u203a exported tests \u203a should allow to run a WebAssembly module importing from multiple modules\n\n    TypeError: Cannot read property '.\/wasm\/imports-multiple\/wasm.wasm' of undefined\n\n      116 | \"use strict\";\n      117 | \/\/ Instantiate WebAssembly module\n    > 118 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      119 | \n      120 | \/\/ export exports from WebAssembly module\n      121 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/imports-multiple\/wasm.wasm (test\/js\/development\/wasm\/imports-multiple\/bundle.js:118:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/imports-multiple\/bundle.js:21:30)\n      at Module..\/wasm\/imports-multiple\/module.js (test\/js\/development\/wasm\/imports-multiple\/bundle.js:75:68)\n      at __webpack_require__ (test\/js\/development\/wasm\/imports-multiple\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a memory \u203a memory should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/memory\/mem-access.wat?1; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/memory\/mem-access.wat?1; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/memory\/run.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpack\/...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/memory\/mem-access.wat?2; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/memory\/mem-access.wat?2; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/memory\/run.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpack\/...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/memory\/memory.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/memory\/memory.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/memory\/mem-access.wat?2\",\"originIdentifier\":\"\/home\/travis\/buil...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a memory \u203a exported tests \u203a should allow direct memory connection between wasm modules\n\n    TypeError: Cannot read property '.\/wasm\/memory\/mem-access.wat?1' of undefined\n\n      74 | \"use strict\";\n      75 | \/\/ Instantiate WebAssembly module\n    > 76 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      77 | \n      78 | \/\/ export exports from WebAssembly module\n      79 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/memory\/mem-access.wat?1 (test\/js\/development\/wasm\/memory\/bundle.js:76:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/memory\/bundle.js:21:30)\n      at Module..\/wasm\/memory\/run.js (test\/js\/development\/wasm\/memory\/bundle.js:148:75)\n      at __webpack_require__ (test\/js\/development\/wasm\/memory\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a order \u203a order should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/order\/wasm.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/order\/wasm.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/order\/a.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpack\/web...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a order \u203a exported tests \u203a should be evaluated in the correct order\n\n    TypeError: Cannot read property '.\/wasm\/order\/wasm.wat' of undefined\n\n      163 | \"use strict\";\n      164 | \/\/ Instantiate WebAssembly module\n    > 165 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      166 | \n      167 | \/\/ export exports from WebAssembly module\n      168 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/order\/wasm.wat (test\/js\/development\/wasm\/order\/bundle.js:165:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/order\/bundle.js:21:30)\n      at Module..\/wasm\/order\/a.js (test\/js\/development\/wasm\/order\/bundle.js:58:67)\n      at __webpack_require__ (test\/js\/development\/wasm\/order\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a simple \u203a simple should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/simple\/wasm.wat?1; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/simple\/wasm.wat?1; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/simple\/module.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpa...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/simple\/wasm.wat?2; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/simple\/wasm.wat?2; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/simple\/index.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpac...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a simple \u203a exported tests \u203a should allow to run a WebAssembly module (indirect)\n\n    TypeError: Cannot read property '.\/wasm\/simple\/wasm.wat?1' of undefined\n\n      100 | \"use strict\";\n      101 | \/\/ Instantiate WebAssembly module\n    > 102 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      103 | \n      104 | \/\/ export exports from WebAssembly module\n      105 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/simple\/wasm.wat?1 (test\/js\/development\/wasm\/simple\/bundle.js:102:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/simple\/bundle.js:21:30)\n      at Module..\/wasm\/simple\/module.js (test\/js\/development\/wasm\/simple\/bundle.js:82:69)\n      at __webpack_require__ (test\/js\/development\/wasm\/simple\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a simple \u203a exported tests \u203a should allow to run a WebAssembly module (direct)\n\n    TypeError: Cannot read property '.\/wasm\/simple\/wasm.wat?2' of undefined\n\n      122 | \"use strict\";\n      123 | \/\/ Instantiate WebAssembly module\n    > 124 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      125 | \n      126 | \/\/ export exports from WebAssembly module\n      127 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/simple\/wasm.wat?2 (test\/js\/development\/wasm\/simple\/bundle.js:124:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/simple\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a table \u203a table should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/table\/wasm-table-export.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/table\/wasm-table-export.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/table\/index.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpack...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/table\/wasm-table-imported.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/table\/wasm-table-imported.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/table\/index.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpack...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/table\/wasm-table.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/table\/wasm-table.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/table\/index.js\",\"originIdentifier\":\"\/home\/travis\/build\/webpack...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a table \u203a exported tests \u203a should support tables\n\n    TypeError: Cannot read property '.\/wasm\/table\/wasm-table.wat' of undefined\n\n      140 | \"use strict\";\n      141 | \/\/ Instantiate WebAssembly module\n    > 142 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      143 | \n      144 | \/\/ export exports from WebAssembly module\n      145 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/table\/wasm-table.wat (test\/js\/development\/wasm\/table\/bundle.js:142:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/table\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a table \u203a exported tests \u203a should support exported tables\n\n    TypeError: Cannot read property '.\/wasm\/table\/wasm-table-export.wat' of undefined\n\n       95 | \"use strict\";\n       96 | \/\/ Instantiate WebAssembly module\n    >  97 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n       98 | \n       99 | \/\/ export exports from WebAssembly module\n      100 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/table\/wasm-table-export.wat (test\/js\/development\/wasm\/table\/bundle.js:97:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/table\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a table \u203a exported tests \u203a should support imported tables\n\n    TypeError: Cannot read property '.\/wasm\/table\/wasm-table-imported.wat' of undefined\n\n      117 | \"use strict\";\n      118 | \/\/ Instantiate WebAssembly module\n    > 119 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      120 | \n      121 | \/\/ export exports from WebAssembly module\n      122 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/table\/wasm-table-imported.wat (test\/js\/development\/wasm\/table\/bundle.js:119:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/table\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a two-files-loader \u203a two-files-loader should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/two-files-loader\/src\/wasm.dat.wasm!=!..\/..\/node_modules\/wast-loader\/lib\/index.j...; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/two-files-loader\/src\/wasm.dat.wasm = (webpack)\/node_modules\/wast-loader\/lib!....; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/two-files-loader\/wrapper-loader2.js!.\/wasm\/two-files-loader\/sr...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/two-files-loader\/src\/wasm.dat.wat!=!.\/wasm\/two-files-loader\/src\/wasm.dat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/two-files-loader\/src\/wasm.dat.wat = .\/wasm\/two-files-loader\/src\/wasm.dat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/two-files-loader\/wrapper-loader.js!.\/wasm\/two-files-loader\/src...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a two-files-loader \u203a exported tests \u203a should be able to create two modules from loader\n\n    TypeError: Cannot read property '.\/wasm\/two-files-loader\/src\/wasm.dat.wat!=!.\/wasm\/two-files-loader\/src\/wasm.dat' of undefined\n\n       99 | \"use strict\";\n      100 | \/\/ Instantiate WebAssembly module\n    > 101 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      102 | \n      103 | \/\/ export exports from WebAssembly module\n      104 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/two-files-loader\/src\/wasm.dat.wat!=!.\/wasm\/two-files-loader\/src\/wasm.dat (test\/js\/development\/wasm\/two-files-loader\/bundle.js:101:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/two-files-loader\/bundle.js:21:30)\n      at Module..\/wasm\/two-files-loader\/wrapper-loader.js!.\/wasm\/two-files-loader\/src\/wasm.dat (test\/js\/development\/wasm\/two-files-loader\/bundle.js:124:80)\n      at __webpack_require__ (test\/js\/development\/wasm\/two-files-loader\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a two-files-loader \u203a exported tests \u203a should be able to create two modules from loader with remaining request\n\n    TypeError: Cannot read property '.\/wasm\/two-files-loader\/src\/wasm.dat.wasm!=!..\/..\/node_modules\/wast-loader\/lib\/index.js!.\/wasm\/two-files-loader\/src\/wasm.dat?2' of undefined\n\n      19 | \/******\/\n      20 | \/******\/ \t\t\/\/ Execute the module function\n    > 21 | \/******\/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n         |          \t\t                  ^\n      22 | \/******\/\n      23 | \/******\/ \t\t\/\/ Flag the module as loaded\n      24 | \/******\/ \t\tmodule.l = true;\n\n      at Object..\/wasm\/two-files-loader\/src\/wasm.dat.wasm!=!..\/..\/node_modules\/wast-loader\/lib\/index.js!.\/wasm\/two-files-loader\/src\/wasm.dat?2 (test\/js\/development\/wasm\/two-files-loader\/bundle.js:79:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/two-files-loader\/bundle.js:21:30)\n      at Module..\/wasm\/two-files-loader\/wrapper-loader2.js!.\/wasm\/two-files-loader\/src\/wasm.dat?2 (test\/js\/development\/wasm\/two-files-loader\/bundle.js:150:95)\n      at __webpack_require__ (test\/js\/development\/wasm\/two-files-loader\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a unused-export \u203a unused-export should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/unused-export\/wasm.wat; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/node_modules\/wast-loader\/lib\/index.js!\/home...; moduleName = .\/wasm\/unused-export\/wasm.wat; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/unused-export\/module.js\",\"originIdentifier\":\"\/home\/travis\/buil...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a unused-export \u203a exported tests \u203a should allow wasm with unused exports\n\n    TypeError: Cannot read property '.\/wasm\/unused-export\/wasm.wat' of undefined\n\n      93 | \"use strict\";\n      94 | \/\/ Instantiate WebAssembly module\n    > 95 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      96 | \n      97 | \/\/ export exports from WebAssembly module\n      98 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/unused-export\/wasm.wat (test\/js\/development\/wasm\/unused-export\/bundle.js:95:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/unused-export\/bundle.js:21:30)\n      at Module..\/wasm\/unused-export\/module.js (test\/js\/development\/wasm\/unused-export\/bundle.js:75:67)\n      at __webpack_require__ (test\/js\/development\/wasm\/unused-export\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-async \u203a wasm-explorer-examples-async should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/wasm-explorer-examples-async\/Q_rsqrt.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-asyn...; moduleName = .\/wasm\/wasm-explorer-examples-async\/Q_rsqrt.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-async\/index.js\",\"originIdentifier\":\"\/ho...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-async\/duff.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-asyn...; moduleName = .\/wasm\/wasm-explorer-examples-async\/duff.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-async\/index.js\",\"originIdentifier\":\"\/ho...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-async\/fact.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-asyn...; moduleName = .\/wasm\/wasm-explorer-examples-async\/fact.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-async\/index.js\",\"originIdentifier\":\"\/ho...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-async\/fast-math.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-asyn...; moduleName = .\/wasm\/wasm-explorer-examples-async\/fast-math.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-async\/index.js\",\"originIdentifier\":\"\/ho...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-async\/popcnt.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-asyn...; moduleName = .\/wasm\/wasm-explorer-examples-async\/popcnt.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-async\/index.js\",\"originIdentifier\":\"\/ho...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-async\/testFunction.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-asyn...; moduleName = .\/wasm\/wasm-explorer-examples-async\/testFunction.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-async\/index.js\",\"originIdentifier\":\"\/ho...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-async \u203a exported tests \u203a Q_rsqrt should work\n\n    TypeError: Cannot read property '.\/wasm\/wasm-explorer-examples-async\/Q_rsqrt.wasm' of undefined\n\n      54 | \"use strict\";\n      55 | \/\/ Instantiate WebAssembly module\n    > 56 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      57 | \n      58 | \/\/ export exports from WebAssembly module\n      59 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/wasm-explorer-examples-async\/Q_rsqrt.wasm (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:56:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-async \u203a exported tests \u203a testFunction should work\n\n    TypeError: Cannot read property '.\/wasm\/wasm-explorer-examples-async\/testFunction.wasm' of undefined\n\n      248 | \"use strict\";\n      249 | \/\/ Instantiate WebAssembly module\n    > 250 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      251 | \n      252 | \/\/ export exports from WebAssembly module\n      253 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/wasm-explorer-examples-async\/testFunction.wasm (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:250:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-async \u203a exported tests \u203a fact should work\n\n    TypeError: Cannot read property '.\/wasm\/wasm-explorer-examples-async\/fact.wasm' of undefined\n\n       98 | \"use strict\";\n       99 | \/\/ Instantiate WebAssembly module\n    > 100 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      101 | \n      102 | \/\/ export exports from WebAssembly module\n      103 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/wasm-explorer-examples-async\/fact.wasm (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:100:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-async \u203a exported tests \u203a popcnt should work\n\n    TypeError: Cannot read property '.\/wasm\/wasm-explorer-examples-async\/popcnt.wasm' of undefined\n\n      226 | \"use strict\";\n      227 | \/\/ Instantiate WebAssembly module\n    > 228 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      229 | \n      230 | \/\/ export exports from WebAssembly module\n      231 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/wasm-explorer-examples-async\/popcnt.wasm (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:228:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-async \u203a exported tests \u203a fast-math should work\n\n    TypeError: Cannot read property '.\/wasm\/wasm-explorer-examples-async\/fast-math.wasm' of undefined\n\n      120 | \"use strict\";\n      121 | \/\/ Instantiate WebAssembly module\n    > 122 | var wasmExports = __webpack_require__.w[module.i];\n          |                                        ^\n      123 | \n      124 | \/\/ export exports from WebAssembly module\n      125 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/wasm-explorer-examples-async\/fast-math.wasm (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:122:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-async \u203a exported tests \u203a duff should work\n\n    TypeError: Cannot read property '.\/wasm\/wasm-explorer-examples-async\/duff.wasm' of undefined\n\n      76 | \"use strict\";\n      77 | \/\/ Instantiate WebAssembly module\n    > 78 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      79 | \n      80 | \/\/ export exports from WebAssembly module\n      81 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/wasm-explorer-examples-async\/duff.wasm (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:78:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-async\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-sync \u203a wasm-explorer-examples-sync should compile\n\n    Errors while compiling:\n\n    moduleId = .\/wasm\/wasm-explorer-examples-sync\/Q_rsqrt.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-sync...; moduleName = .\/wasm\/wasm-explorer-examples-sync\/Q_rsqrt.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-sync\/tests.js\",\"originIdentifier\":\"\/hom...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-sync\/duff.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-sync...; moduleName = .\/wasm\/wasm-explorer-examples-sync\/duff.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-sync\/tests.js\",\"originIdentifier\":\"\/hom...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-sync\/fact.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-sync...; moduleName = .\/wasm\/wasm-explorer-examples-sync\/fact.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-sync\/tests.js\",\"originIdentifier\":\"\/hom...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-sync\/fast-math.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-sync...; moduleName = .\/wasm\/wasm-explorer-examples-sync\/fast-math.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-sync\/tests.js\",\"originIdentifier\":\"\/hom...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-sync\/popcnt.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-sync...; moduleName = .\/wasm\/wasm-explorer-examples-sync\/popcnt.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-sync\/tests.js\",\"originIdentifier\":\"\/hom...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n    moduleId = .\/wasm\/wasm-explorer-examples-sync\/testFunction.wasm; moduleIdentifier = \/home\/travis\/build\/webpack\/webpack\/test\/cases\/wasm\/wasm-explorer-examples-sync...; moduleName = .\/wasm\/wasm-explorer-examples-sync\/testFunction.wasm; message = WebAssembly module is included in initial chunk.\n    This is not allowed, because WebAssemb...; moduleTrace = [{\"originId\":\".\/wasm\/wasm-explorer-examples-sync\/tests.js\",\"originIdentifier\":\"\/hom...; details = undefined; stack = WebAssemblyInInitialChunkError: WebAssembly module is included in initial chunk.\n    This is ...; missing = undefined\n\n      107 | \t\treturn (\n      108 | \t\t\tdone(\n    > 109 | \t\t\t\tnew Error(`${upperCaseKind}s while compiling:\\n\\n${array.map(explain).join(\"\\n\\n\")}`)\n          | \t\t\t\t^\n      110 | \t\t\t),\n      111 | \t\t\ttrue\n      112 | \t\t);\n\n      at checkArrayExpectation (test\/checkArrayExpectation.js:109:5)\n      at compiler.close.err (test\/TestCases.template.js:220:14)\n      at AsyncParallelHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncParallelHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at Cache.shutdown (lib\/Cache.js:962:23)\n      at Compiler.close (lib\/Compiler.js:7187:14)\n      at compiler.run (test\/TestCases.template.js:204:21)\n      at finalCallback (lib\/Compiler.js:6330:13)\n      at hooks.done.callAsync.err (lib\/Compiler.js:6468:15)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:6:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at emitRecords.err (lib\/Compiler.js:6457:23)\n      at Compiler.emitRecords (lib\/Compiler.js:6808:12)\n      at emitAssets.err (lib\/Compiler.js:6441:11)\n      at hooks.afterEmit.callAsync.err (lib\/Compiler.js:6774:13)\n      at AsyncSeriesHook.eval [as callAsync] (<anonymous>:15:1)\n      at AsyncSeriesHook.lazyCompileHook (node_modules\/tapable\/lib\/Hook.js:154:20)\n      at asyncLib.forEachLimit.err (lib\/Compiler.js:6763:26)\n      at node_modules\/neo-async\/async.js:2805:7\n      at done (node_modules\/neo-async\/async.js:3495:9)\n      at outputFileSystem.writeFile.err (lib\/Compiler.js:6735:7)\n      at node_modules\/graceful-fs\/graceful-fs.js:45:10\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-sync \u203a exported tests \u203a Q_rsqrt should work\n\n    TypeError: Cannot read property '.\/wasm\/wasm-explorer-examples-sync\/Q_rsqrt.wasm' of undefined\n\n      54 | \"use strict\";\n      55 | \/\/ Instantiate WebAssembly module\n    > 56 | var wasmExports = __webpack_require__.w[module.i];\n         |                                        ^\n      57 | \n      58 | \/\/ export exports from WebAssembly module\n      59 | for(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n\n      at Object..\/wasm\/wasm-explorer-examples-sync\/Q_rsqrt.wasm (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:56:40)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:21:30)\n      at Module..\/wasm\/wasm-explorer-examples-sync\/tests.js (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:246:71)\n      at __webpack_require__ (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:21:30)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-sync \u203a exported tests \u203a testFunction should work\n\n    TypeError: Cannot read property 'memory' of undefined\n\n      264 | \n      265 | function run_testFunction() {\n    > 266 | \tconst view = new Int32Array(_testFunction_wasm__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer);\n          | \t                                                                           ^\n      267 | \tview[0] = 123;\n      268 | \tview[1] = 1;\n      269 | \tview[2] = 2;\n\n      at Module.run_testFunction (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:266:77)\n      at Promise.resolve.then.then.t (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:148:159)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-sync \u203a exported tests \u203a fact should work\n\n    TypeError: Cannot read property '_Z4facti' of undefined\n\n      274 | \n      275 | function run_fact() {\n    > 276 | \tconst result = _fact_wasm__WEBPACK_IMPORTED_MODULE_2__[\"_Z4facti\"](11);\n          | \t                                                      ^\n      277 | \texpect(result).toEqual(39916800);\n      278 | }\n      279 | \n\n      at Module.run_fact (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:276:56)\n      at Promise.resolve.then.then.t (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:152:159)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-sync \u203a exported tests \u203a popcnt should work\n\n    TypeError: Cannot read property 'main' of undefined\n\n      279 | \n      280 | function run_popcnt() {\n    > 281 | \texpect(_popcnt_wasm__WEBPACK_IMPORTED_MODULE_3__[\"main\"](0xF0F)).toEqual(16);\n          | \t                                                ^\n      282 | \texpect(_popcnt_wasm__WEBPACK_IMPORTED_MODULE_3__[\"_Z5countj\"](0xF0F)).toEqual(8);\n      283 | }\n      284 | \n\n      at Module.run_popcnt (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:281:50)\n      at Promise.resolve.then.then.t (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:156:159)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-sync \u203a exported tests \u203a fast-math should work\n\n    TypeError: Cannot read property '_Z3food' of undefined\n\n      284 | \n      285 | function run_fastMath() {\n    > 286 | \texpect(_fast_math_wasm__WEBPACK_IMPORTED_MODULE_4__[\"_Z3food\"](42)).toEqual(14);\n          | \t                                                   ^\n      287 | \texpect(_fast_math_wasm__WEBPACK_IMPORTED_MODULE_4__[\"_Z9maybe_mindd\"](42, 24)).toEqual(24);\n      288 | \texpect(_fast_math_wasm__WEBPACK_IMPORTED_MODULE_4__[\"_Z8call_powd\"](42)).toEqual(9682651996416);\n      289 | \texpect(_fast_math_wasm__WEBPACK_IMPORTED_MODULE_4__[\"_Z6do_powd\"](42)).toEqual(9682651996416);\n\n      at Module.run_fastMath (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:286:53)\n      at Promise.resolve.then.then.t (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:160:159)\n\n  \u25cf TestCases \u203a development \u203a wasm \u203a wasm-explorer-examples-sync \u203a exported tests \u203a duff should work\n\n    TypeError: Cannot read property 'memory' of undefined\n\n      292 | \n      293 | function run_duff() {\n    > 294 | \tconst view = new Uint8Array(_duff_wasm__WEBPACK_IMPORTED_MODULE_5__[\"memory\"].buffer);\n          | \t                                                                   ^\n      295 | \tview[0] = 123;\n      296 | \tfor(let i = 1; i < 100; i++)\n      297 | \t\tview[i] = i;\n\n      at Module.run_duff (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:294:69)\n      at Promise.resolve.then.then.t (test\/js\/development\/wasm\/wasm-explorer-examples-sync\/bundle.js:164:159)\n```\n<\/details>\n\n```text\nTest Suites: 1 failed, 4 skipped, 37 passed, 38 of 42 total\nTests:       58 failed, 185 skipped, 24164 passed, 24407 total\nSnapshots:   118 passed, 118 total\nTime:        597.113s\n```\n\nSee [complete report here](https:\/\/travis-ci.org\/webpack\/webpack\/builds\/483002502?utm_source&#x3D;github_status&amp;utm_medium&#x3D;notification).","@ooflorent did fixing initial errors find more errors? lol","So I will have to approach this PR different.\r\n\r\nReaons: \r\n1. WebAssembly requires async chunks based on our archetecture for generating chunks \/ assets via manifest. \r\n2. We can't break WASM in Dev Mode (which this PR does) \r\n\r\nAlternative: \r\n1. Have this be an opt in feature for those who would want to turn it on via config for their dev mode. This way, the capability is still possible however users will know that it breaks WASM in Development mode. \r\n\r\n@sokra \r\n@ooflorent \r\n\r\nthoughts? ","This change is an incredible win for build performance on our project. Even if it's purely opt-in, I'm really looking forward to it.","@TheLarkInn can't we have for now it opt-in only? Or \"if is wasm go lazy\", being realistic we don't use wasm but the performance boost that we get in that is huge","If you want to solve this on development right now on webpack 4\r\n\r\ntry this patch-package https:\/\/gist.github.com\/sibelius\/baf12454c371e9d6c728376c39d9f1e0\r\n\r\nI do recommend to only apply the patch on development, not sure about production builds effects\r\n\r\nthis will break hot reload, but it will rebuild faster"],"labels":["PR: reviewed-approved","PR: conflict"]},{"title":"[webpack-5] Default webpackMode to \"eager\" in `mode: \"development\"`","body":"# Feature Request\r\nPropose altering the default `webpackMode` for async chunks from \"lazy\" to \"eager\" in `mode: development`. \r\n\r\n## Background\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\nIn my work with @MLoughry from the Outlook Web App team (arguably the largest web application deployed at Microsoft), we discovered during the update process from webpack 4 to webpack 5@alpha.6 (or whatever is the current latest build), that their \"inner development loop\" (AKA: Their local dev env using webpack-dev-server and incrementally rebuilding a single entrypoint on each change), that there was a *5-20% build time regression*\r\n\r\nSome of this was alleviated by turning back on `unsafeCache: true` for relevant config properties, but it still wasn't the win's that we were expecting. (Turns out caching really isn't relevant here in watch mode because WDS is using memory-fs anyways). \r\n\r\nSo we decided to do some watch mode profiles to try and identify area's of opportunity or concern for their builds. Below is a screen shot of a CPU Profile Segment starting from a file change, to webpack finishing the incremental compilation: \r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/3408176\/51354873-f113b680-1a69-11e9-8d72-a43b44f980c3.png)\r\n\r\nThis segment shows the incremental rebuild taking 62.779 seconds for a single entrypoint (roughly 16-18k modules). \r\n\r\nUpon further inspection we noticed that ~60% (43.499 seconds) of this time spent was performing \"file creation\". See the sceenshot below which has highlighted `emitFiles` function being called continuously. \r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/3408176\/51354963-4fd93000-1a6a-11e9-8ab6-d0b94d4db3c7.png)\r\n\r\nFor this function to be executing so many times, there would in theory have to be significant amount of chunk generation happening (this is usually caused by a team that is effectively using code-splitting throughout their application). After having @MLoughry scan their usage for that entry he comfirmed that indeed they are using `import()` **over 200-300 times throughout that single entry point**\r\n\r\nThis confirmed my theory that chunk creation via webpack is subjected to _at least_ a O(x) (linear) time complexity. \r\n\r\n**How should this be implemented in your opinion?**\r\nThe development loop time for OWA (consisting of easily 150-300 engineers) incredibly important as reducing time by a factor of 2-3x could mean millions of dollars of wasted engineering cost saved. Therefore, we don't have to focus on performance of the webpage itself when we are in our development evnironment. (Today webpack already makes these awesome tradeoffs via the `mode` feature). \r\n\r\nSince chunk creation is the main cost, we could reduce the number of bundles generated inside the development environment by setting the `webpackMode` for all async bundles to `eager`. This would cause chunks to load still using Promise.resolve (retaining behavior of a `import()`), meanwhile, emitting those modules into the same entry chunk, and not additional lazy bundles. \r\n\r\nTo test this theory, we broke into the `ImportParserPlugin` and modified the default behavior from \"lazy\" to \"eager\". https:\/\/github.com\/webpack\/webpack\/blob\/4be6797700753a54b223600f01e941580b6a6ba3\/lib\/dependencies\/ImportParserPlugin.js#L32-L36\r\n\r\nThen we ran the exact same profiles to calculate the difference in incremental build times. **The results were astonishing.** Below, is a segmented profile from (once again) file change, to recompilation completion. \r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/3408176\/51355670-b3fcf380-1a6c-11e9-8173-0d6a82bae555.png)\r\n\r\nAs you can see in the highlighted segment, the new incremental build time, from the exact same set of modules was **5.036 seconds**. \r\n\r\nWe then wanted to dig deeper to identify what the cost of the `emitFile` functions were now. See this subsection below: \r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/3408176\/51355736-e4449200-1a6c-11e9-820f-8c6d5675ed1c.png)\r\n\r\nAs seen in the screenshot the cost of file creation has now been reduced to  (.651 seconds) reducing the time complexity to near O(1). \r\n\r\n## Proposal\r\nWith the huge performance gains realized in this research we would like to propose altering the default `webpackMode` to \"eager\" for `mode: development`. The tradeoff's here are a potentially slower *booting* page, however this kind of trade-off is precidented via decisions like `eval` source-maps, not minifying, etc.\r\n\r\nI don't believe that this has the potential to cause a \"functional break\" in development experience for users, because imports will still use `Promise.resolve()` to load modules therefore retaining its async behavior. \r\n\r\n## Implementation Details\r\nIt appears that the \"infrastructure\" is already in place to pass options from the ImportParserPlugin: \r\n\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/4be6797700753a54b223600f01e941580b6a6ba3\/lib\/dependencies\/ImportParserPlugin.js#L18-L37\r\n\r\nIn addition options passed from the ImportPlugin also recieve options from WebpackOptionsApply:  \r\n\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/4be6797700753a54b223600f01e941580b6a6ba3\/lib\/dependencies\/ImportPlugin.js#L63-L65\r\n\r\nOptions are obtained from the configuration's `options.module` property:\r\n\r\nhttps:\/\/github.com\/webpack\/webpack\/blob\/4be6797700753a54b223600f01e941580b6a6ba3\/lib\/WebpackOptionsApply.js#L338-L341\r\n\r\nTherefore, we would update the ImportParserPlugin to set `webpackMode` based on a newly created property in `options.module` called  `defaultAsyncChunkMode;'eager'`. (Similarly we could make this a boolean property as well).\r\n\r\n## Rationale\r\nBy making this a default we hold true to our fundemantals of #0CJS and have sane defaults for development envrionments. If users want to opt out of this behavior, they then have the ability to do so via `options.module.defaultAsyncChunkMode`. **This also reduces builds for scaled builds like OWA by a factor of 7!**\r\n\r\n## Breaking Change Implications\r\nThis would _technically_ be considered a breaking change _behaviorally_ however, we are in webpack@5 alpha and this would be the place to make it. \r\n\r\nFor the ~250 lazy chunks on Outlook Web App, we expect there to be no functional regressions from this change (and intend to test the submitted PR during its review process). \r\n\r\n**Are you willing to work on this yourself?**\r\nBring it on. :smirk:\r\n","comments":["Hmm... It's nice to have that option, but...\r\n\r\nI remember doing the opposite in the past, i.e. arbitrarily forcing large number of chunks for better performance in dev-mode. I would [split chunks](https:\/\/github.com\/niieani\/chunk-splitting-plugin) on purpose, due to the high cost of writing huge files in dev mode, esp. when generating sourcemaps.\r\n\r\nMy reason was that when you have chunking-by-default enabled, a change of a single source file causes a single, small chunk+sourcemap to be re-rendered, emitting e.g. ~100KB of code.\r\n\r\nOn the other hand, when you have a single chunk which is e.g. 50MB and you always have to emit it (and its sourcemap, which is especially expensive). This also was problematic for browsers, as they would choke while loading huge sourcemaps like that.","It would be also good to backport to v4, since it is not a a substantial change and hard to implement.","@niieani I think specifically this presents itself at scale. But ideally will have wins for large and small apps based on the percentages. ","@TheLarkInn, would it make sense to instead increase [`optimization.splitChunks.minSize`](https:\/\/webpack.js.org\/plugins\/split-chunks-plugin\/#splitchunks-minsize) in development mode so that a chunk is not emitted if it's too small? That should solve the issue when a lot of chunks are being generated.","This would help with the performance issues reported in #8557 (cc @chenyiqiao) and #4636.\r\n\r\nThat said, has anyone looked into improving chunk build performance in general, so this workaround isn't needed?","One have to note that the config contains this:\r\n\r\n``` js\r\n                  optimization: {\r\n                      removeAvailableModules: false,\r\n                      removeEmptyChunks: false,\r\n                      splitChunks: false,\r\n                  }\r\n```\r\n\r\nWhich results in chunks are no longer optimized and probably contain a lot of duplicate modules. Using eager by default will result in all modules are put into one chunk, which removes all this duplication.\r\n\r\nModule duplication will cause chunk files to grow, which increases the total cost of `emitFiles`.\r\n\r\nThe default settings for splitChunks would group module duplication into new chunks, which would decrease total chunk size.\r\n\r\nEnabling `removeAvailableModules` would remove all modules which are included in the entry chunk from child chunks. This would also decrease total chunk size.\r\n\r\nMy guess is that not disabling `splitChunks` would be enough. I'm unsure if there was a reason why `splitChunks` was disabled. Maybe there is a performance issue there. This is something that need to be tested... (Gimme a profile with splitChunks enabled)","@edmorley  Yeah,this is great. What shocks me the most is that, literally nobody reacted to https:\/\/github.com\/webpack\/webpack\/issues\/8557. it's definitely unacceptable if incremental build time >30s. Maybe everybody give up code splitting in dev mode as I do...","@chenyiqiao The slowness of the chunk graph algorithm had already been brought up previously (#8126), and @sokra had already done work as a result to try and optimize it. However, at the very least, *I* don\u2019t understand it well enough to know how to reimplement it with the same behavior but orders of magnitude faster.","Sorry that the other issues got lost. I like to fix that, but I need to play with the build, so I need a repo of something. Fixing is blindly is very difficult. Profiles also help a bit, but a lot of information get lost during function inlining.","Is there any workaround for the moment? Is it possible to globally set `webpackMode` to \"eager\" either in configuration or using command line?","@shytikov I just published a plugin to perform the same behavior: https:\/\/www.npmjs.com\/package\/eager-imports-webpack-plugin","@MLoughry thank you! Nice one!\r\n\r\nI have also found another workaround. Maybe it's less optimal, but we can limit number of chunks adding [LimitChunkCountPlugin](https:\/\/webpack.js.org\/plugins\/limit-chunk-count-plugin\/).\r\n\r\nI believe it adds post-processing step, it's a con, but you don't need to install anything \u2014 it's a pro.","does https:\/\/www.npmjs.com\/package\/eager-imports-webpack-plugin or LimitChunkCountPlugin\r\n\r\nbreaks HMR? or HMR just works well?","@sibelius I've not tested it with HMR, as my team doesn't use HMR.","There is also the MinChunkSizePlugin which might be useful in these cases.\r\n\r\nDifferent chunking should not affect HMR."],"labels":["enhancement","webpack-5"]},{"title":"[WIP] Feature: support universal target","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nThis PR try to resolve #6525.\r\nAlso resolve #6522.\r\n\r\nWIP: Because of my knowledge of the whole internal code is inadequate, currently is working in progress, and some detail needs more advice and discussion.\r\n\r\n## the things should be done (AFAIK):\r\nAfter digging into the code, I think these two big things should be done to achieve this feature:\r\n- MainTemplate: Add all runtime codes that may be used, but enable them conditionally at runtime.\r\n- ChunkTemplate: Also like the main, first should pack all runtime loaders (JsonpArray, Jsonp, exports) wrapped with conditions into chunks, and hoist the chunk modules alone, then choose correct way to export them at runtime.\r\n\r\n## Current implementation:\r\nthe steps of my implementation now:\r\n- Add a new \"universal\" target.\r\n- Apply all `web\/webworker\/node` templates, and a new `universal` template additionally at the new target:\r\n  - UniversalTemplatePlugin (new)\r\n  - JsonpTemplatePlugin\r\n  - WebWorkerTemplatePlugin\r\n  - NodeTemplatePlugin\r\n  - TODO: any others ?\r\n- Add a new runtime variable `__webpack_require__.env`(`RuntimeGlobals.environment`) to figure out the environment type of runtime.\r\n- Add `RuntimeGlobals.environment` to `runtimeRequirements` while `UniversalTemplatePlugin` applied.\r\n- Change `**RuntimeModule` that used for each kind of template, wrap a checker by `__webpack_require__.env` for their runtime code:\r\n```javascript\r\nreturn shouldCheckEnvironment\r\n  ? Template.asString([\r\n    `if(${RuntimeGlobals.environment} === \"web\") {`,\r\n    Template.indent(runtimeCodeLines),\r\n    \"}\"\r\n  ])\r\n  : Template.asString(runtimeCodeLines);\r\n```\r\n- Add `UniversalChunkTemplatePlugin`, make chunk modules render hoisted first and before other chunkTemplates render.\r\n- Change other `**ChunkTemplatePlugin`, wrap a condition to original chunk source  when`options.target === \"universal\"`.\r\n```javascript\r\nif (target === \"universal\") {\r\n  return new ConcatSource(\r\n    previousSource,\/\/ chunk modules has been hoisted in here\r\n    `if(__universal_env__ === \"web\") {`,\r\n    new PrefixSource(\"\\t\", source),\r\n    \"}\"\r\n  );\r\n}\r\nreturn source;\r\n```\r\n- Finally, different runtime type runs different runtime code, both of `main` an `chunk`.\r\n\r\n## Current problems (need help):\r\n\r\n### Should `NodeSourcePlugin` be added? \r\n\"universal\" includes node support.\r\n\r\n### How to put or reference `__webpack_require__.xxx` runtime globals to each chunk? Or any other ideas?\r\nBecause now both `main` and `chunk` need to check environment type at runtime. I have to re-create a useless `RuntimeModule` instance in `ChunkTemplatePlugin` to reuse the runtime check code, and also created some global variables like `__universal_env__`:\r\n```javascript\r\nconst runtimeEnvironment = new EnvironmentRuntimeModule(\r\n  this.compilation,\r\n  \"__universal_env__\"\r\n  ).generate();\r\n\/\/...\r\nsource.add(\"var __universal_env__;\\n\");\r\nsource.add(runtimeEnvironment);\r\n```\r\n\r\n### Avoid `output.globalObject` repetition:\r\nCurrently the `output.globalObject` only support a static value or inline statement, it should be dynamic at \"universal\" occassion, otherwise it will be excute repeatedly, and duplicated with runtime global:\r\n```javascript\r\nvar __universal_env__;\r\nif ((typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this).document !== undefined) {\r\n\t__universal_env__ = \"web\";\r\n} else if (typeof (typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this).importScripts === \"function\") {\r\n\t__universal_env__ = \"webworker\";\r\n} else if ((typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this).process !== undefined) {\r\n\t__universal_env__ = \"node\";\r\n} else {\r\n\t__universal_env__ = \"web\";\r\n}\r\n```\r\n\r\n### Redundant chunkTemplate conditions:\r\nEach chunkTemplate's apply\/render logic is separate. For support multiple types of runtime code exist together, I have to add at least two invasive conditions to each render . Any better idea?\r\n```javascript\r\nchunkTemplate.hooks.render.tap(\r\n\"JsonpChunkTemplatePlugin\",\r\n(modules, moduleTemplate, renderContext) => {\r\n  const previousSource = modules;\r\n  if (target === \"universal\") { \/\/ conditions 1\r\n    modules = new RawSource(\"__universal_modules__\");\r\n  }\r\n\r\n  \/\/ origin source generate...\r\n\r\n  if (target === \"universal\") { \/\/ more conditions\r\n    return new ConcatSource(\r\n\tpreviousSource,\r\n\t`if(__universal_env__ === \"web\") {`,\r\n\tnew PrefixSource(\"\\t\", source),\r\n\t\"}\"\r\n    );\r\n  }\r\n  return source;\r\n});\r\n```\r\n\r\n### More: Any other problems?...\r\n\r\ncc @sokra @ooflorent . Looking forward to some advice.\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nFeature\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nTODO\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nNo.\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nNew target option needs to be addressed.\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This need to be documented (issue in webpack\/webpack.js.org will be filed when merged)","Hi, @sokra @ooflorent any advice for this? ","Looking forward to hearing your advice :) @sokra @ooflorent ","~~Please accept CLA, also we need fix CI problem~~","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","@mc-zone looks we need more tests (based on coverage)","<!-- identifier: tests-result -->\n\nIt looks like this Pull Request doesn't include [enough test cases](https:\/\/codecov.io\/gh\/webpack\/webpack\/compare\/695a7e5ca2218ce97483396367e6344f386e17a3...c059a0f5d4c3c61a035c2c9fd46724fb6b0c497f) (based on Code Coverage analysis of the PR diff).\n\nA PR need to be covered by tests if you add a new feature (we want to make sure that your feature is working) or if you fix a bug (we want to make sure that we don't run into a regression in future).\n\n@mc-zone Please check if this is appliable to your PR and if you can add more test cases.\n\nRead the [test readme](https:\/\/github.com\/webpack\/webpack\/blob\/master\/test\/README.md) for details how to write test cases.","> @mc-zone looks we need more tests (based on coverage)\r\n\r\n@evilebottnawi Could you give some suggestion about the questions that I listed? I'm appreciated if anyone could look at the **Current problems (need help)**  parts. It's a work in progress PR and not enough to write tests yet."],"labels":["PR: CI-ok","PR: unreviewed","PR: tests-needed"]},{"title":"[wasm] emit producer section","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nSince https:\/\/github.com\/WebAssembly\/tool-conventions\/pull\/65, tooling is expected to emit the custom producer section.\r\n\r\nNote that we should only add the Webpack entry and preserve the original producer.\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\nFor future pipeline\/tooling analysis.\r\n\r\n\r\n**How should this be implemented in your opinion?**\r\nwebassemblyjs\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n","comments":["**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","that might be useful, could you please re-open it?","@xtuc Done :+1: "],"labels":["inactive","Send a PR","wasm"]},{"title":"Throw error when using AMD dependencies with a non-AMD target","body":"Together with #8093 this fixes #8079.\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nThis adds a compile-time error when an AMD-only external dependency is used with a non-AMD target. This usage is not currently supported by Webpack, but the errors that it results in are hard-to-debug runtime errors, as the dependencies are left as unresolved variables or with the value `undefined` (depending on the build target).\r\n\r\n**Did you add tests for your changes?**\r\n\r\nNot yet enough. There's a new happy-path test `configCases\/externals\/amd-externals`, but it wasn't clear to me where the compile-time error test should go, or that it really is appropriate in this case to throw during the build, rather than at runtime. Some instruction would be appreciated here.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo.\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nNothing _needs_ to be documented, but it would be nice to have a brief mention of the problem in the documentation. I'll add another PR for that.","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This need to be documented (issue in webpack\/webpack.js.org will be filed when merged)","Having thought on this some more, there are in fact two subtly different error cases that need to be handled here:\r\n1. The external dependency is defined using the object form, but without all cases defined. Simultaneously, the library target is set to one that requires one of these missing cases. UmdMainTemplatePlugin already throws an error for this, but it's the only one. Checking for `!request` in ExternalModule should allow for generalising this.\r\n2. The external dependency is defined as `\"type name\"` or as a function that uses a non-empty value for the callback's third `type` argument. Simultaneously, the library target is set to a value that requires a different external dependency type. This error can't currently be caught in ExternalModule due to the masking of `globalType` by `type` in the value of `externalType`.\r\n\r\nI'll update and rebase the PR to deal with the above issues.","<!-- identifier: review-outdated -->\n\n@eemeli Thanks for your update.\n\nI labeled the Pull Request so reviewers will review it again.\n\n@sokra Please review the new changes.","The MultiCompiler test suite seems to pass on Travis, but fail on AppVeyor. Is there something I could do to help fix it, or is this a timeout issue as the error message seems to imply?","@sokra Could you have a look at this again? I made the changes you requested, but the AppVeyor build failed mysteriously. Any chance of getting a pointer for how to fix it, or to somehow re-run its build?","Your PR has merge conflict and the CI can't build it. Merge master into your branch and fix the conflicts.","Could someone with the authority to do so restart the [failing Travis CI job](https:\/\/travis-ci.org\/webpack\/webpack\/jobs\/445497481)? It's passing for me locally, and the reported error does not seem to indicate an error with the actual PR:\r\n\r\n`OCI runtime exec failed: exec failed: container_linux.go:348: starting container process caused \"process_linux.go:86: executing setns process caused \\\"exit status 21\\\"\": unknown`","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon."],"labels":["PR: CI-ok","PR: review-outdated","PR: conflict"]},{"title":"AMD externals fail silently if libraryTarget is not 'amd'","body":"# Bug report\r\n\r\n**What is the current behavior?**\r\n\r\nExternal dependencies that are only available via AMD are only supported if the output libraryTarget is also 'amd'. This is rather surprising, and not at all documented.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nUsing this Webpack config:\r\n```js\r\nmodule.exports = {\r\n  mode: 'none',\r\n  externals: {\r\n    'amd-module': { amd: 'amd-module' }\r\n  }\r\n}\r\n```\r\n\r\nTranspiling the code `require('amd-module')` results in a dependency like this being included in the output:\r\n\r\n```js\r\n\/* 1 *\/\r\n\/***\/ (function(module, exports) {\r\n\r\nmodule.exports = undefined;\r\n\r\n\/***\/ })\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nGiven any AMD dependency and no libraryTarget, I would expect one of the following outcomes:\r\n1. The output is surrounded by a `require(...)` or `requirejs(...)` wrapper, much as is done already with `define(...)` when `libraryTarget: 'amd'` is set.\r\n2. A build-time error is shown about the unresolved dependency, as is already done if `libraryTarget: 'umd'` is set. Adding that to the above config results in a build error \"Missing external configuration for type:commonjs2\". In this case I would also expect a mention in the docs about this incompatibility.\r\n\r\nThe current behaviour of leaving the dependency as `undefined` is surprising and hard to debug.\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.19.1\r\n\r\nPreviously reported bugs #4609 and #6302 have touched on some aspects of this issue, but have not provided a workable solution for the case when the external dependency is only available via AMD and the target is not a library.","comments":["Send a PR","I would prefer the 2. behavior","@sokra Do you have a specific reason for the preference? It would be really useful to have some way of using AMD dependencies without requiring an additional manual `require()` call. As is, e.g. HtmlWebpackPlugin is rather difficult to use with code that has AMD dependencies. The required compilation would effectively be the same as that used by AmdMainTemplatePlugin, just replacing  `define` with `require`.","As a thought, how would you feel about solving this by a combination of two changes:\r\n- Add the errors for non-AMD targets as per my earlier 2nd proposal\r\n- Add a new libraryTarget \"amd-require\" that would configure the AmdMainTemplatePlugin to use a `require()` rather than `define()` wrapper.\r\n\r\nI'm relatively confident that I could send in PRs for both of those.","That's sound good \ud83d\udc4d ","**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Bump"],"labels":["Send a PR"]},{"title":"Feature: compressed performance budgets \ud83c\udf89","body":"Hello!\r\n\r\nWebpack has a great performance budgeting feature that tracks whether chunks or entry modules exceed a size limit. The one missing piece for folks like me is that bundle size is generally measured in terms of bytes-over-the-wire, and generally that means compressed size.  I took the opportunity to build on @TheLarkInn's awesome work, adding gzipped size calculations to the `performance` feature.  The result is that performance budgetings are measured against compressed size, which matches up nicely with [Alex's original blog post on the subject](https:\/\/infrequently.org\/2017\/10\/can-you-afford-it-real-world-web-performance-budgets\/).\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nA new feature.\r\n\r\n**Did you add tests for your changes?**\r\n\r\nI updated the tests to reflect the changes.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo.\r\n\r\n**What needs to be documented once your changes are merged?**\r\n\r\nJust the new configuration property and default values.","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This need to be documented (issue in webpack\/webpack.js.org will be filed when merged)","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","This could interest @addyosmani","@developit This looks really good. I think it'd work really well with my PR as well (after solving conflicts that is)! https:\/\/github.com\/webpack\/webpack\/pull\/7769","I'm 100% supportive of this change.","Really keen about this change getting merged. Thanks for the hard work.","@developit could we address the conflicts in this PR?\r\n@TheLarkInn would be great to get your gut-check on the feasibility of this change landing once Jason tackles the above.. :)","@sokra Is there interest in landing this change?"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"Implemented Multi Performance Budget possibility","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nImplementation of the feature requested on the following issue: https:\/\/github.com\/webpack\/webpack\/issues\/7753\r\n\r\n<!-- In addition to that please answer these questions: -->\r\n\r\n**What kind of change does this PR introduce?**\r\nAllows the performance object to instead be an array of performance objects if needed.\r\nEverything else is configured identically.\r\n\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nYes, tests were added to make sure that the previous behavior still worked as well as to make sure the new one worked as intended.\r\n\r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**Does this PR introduce a breaking change?**\r\nThere is no breaking change, the old behavior should still exist.\r\n\r\n<!-- If this PR introduces a breaking change, please describe the impact and a migration path for existing applications. -->\r\n\r\n**What needs to be documented once your changes are merged?**\r\nThe ability to add several performance budgets with different assetFilters.\r\n\r\n<!-- List all the information that needs to be added to the documentation after merge -->\r\n<!-- When your changes are merged you will be asked to contribute this to the documentation -->\r\n**Usage Examples**\r\nPerformance as an Object:\r\n```\r\nperformance: {\r\n  \thints: \"warning\",\r\n        maxAssetSize: 100000,\r\n        maxEntrypointSize: 100000\r\n}\r\n```\r\nPerformance as an Array of Performance Objects:\r\n(configuring a different max Asset and Entrypoint size for svg files)\r\n```\r\nperformance: [\r\n    {\r\n        hints: \"warning\",\r\n        maxAssetSize: 100000,\r\n        maxEntrypointSize: 100000,\r\n        assetFilter: function(asset) {\r\n        \t   return !asset.endsWith(\"svg\");\r\n        }\r\n    },\r\n    {\r\n        hints: \"warning\",\r\n        maxAssetSize: 500000,\r\n        maxEntrypointSize: 500000,\r\n        assetFilter: function(asset) {\r\n        \t   return asset.endsWith(\"svg\");\r\n        }\r\n    }\r\n]\r\n```","comments":["<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This need to be documented (issue in webpack\/webpack.js.org will be filed when merged)","Hi! We would find this feature really useful.\r\n\r\nIt's currently targetting `master`, would it be accepted for webpack 4, or should it be targetting webpack 5 (`next` branch)?\r\n\r\nThere is also a conflict and 1 failing test at the moment.","Would love to see this implemented in the current version","Great thanks, keep up the good work! :tada:","@edmorley @Primajin All is updated and ready, just need the CR and PR to be approved. :)\r\n@sokra any chance you can review this?","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","@Zeracy One check seems to be still pending:\r\n```\r\nlicence\/cla Pending \u2014 Contributor License Agreement is not signed yet.\r\n```\r\ncan you check? Hopefully then finally this will be reviewed and solved \ud83e\udd1e \r\nAlso there seems to be conflicting files.","*poke* @Zeracy \ud83d\ude09","@Primajin I've updated it. I had to go through hell to figure out the cla issue.","<!-- identifier: review-outdated -->\n\n@Zeracy Thanks for your update.\n\nI labeled the Pull Request so reviewers will review it again.\n\n@sokra Please review the new changes."],"labels":["PR: CI-ok","PR: review-outdated"]},{"title":"Allow for multiple Performance Budgets","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n\r\n## Feature request\r\n\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Check if this feature need to be implemented in a plugin or loader instead -->\r\n<!-- If yes: file the issue on the plugin\/loader repo -->\r\n<!-- Features related to the development server should be filed on this repo instead -->\r\n\r\n**What is the expected behavior?**\r\nCurrently the performance budget plugin only accepts one configuration for assets in general.\r\nIt should be possible to assign a performance budget for each different type of assets.\r\n\r\n**What is motivation or use case for adding\/changing the behavior?**\r\nIf you want to have two different budgets for distinct types of files, it is currently not possible.\r\n\r\n**How should this be implemented in your opinion?**\r\nThe old implementation should still work, but it should be possible to instead add an array of of budget objects if you wish to set several budgets.\r\n\r\n**Are you willing to work on this yourself?**\r\nyes\r\n","comments":["sounds good, send a PR","@sokra there was an issue with the account I used to commit my previous PR (https:\/\/github.com\/webpack\/webpack\/pull\/7752). This one should work: https:\/\/github.com\/webpack\/webpack\/pull\/7769","**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["Send a PR"]},{"title":"Webpack doesn\u2019t work well with wasm modules created with Emscripten","body":"# Feature request\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter. -->\r\n<!-- https:\/\/stackoverflow.com\/questions\/ask?tags=webpack -->\r\n<!-- https:\/\/gitter.im\/webpack\/webpack -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nThe modularized JS emitted by [Emscripten](http:\/\/emscripten.org\/) registers a global with a given name that loads the wasm file on invocation, initializes the wasm runtime and returns a [`Module`](https:\/\/kripken.github.io\/emscripten-site\/docs\/api_reference\/module.html).\r\n\r\nMaking it work with Webpack is quite hard as there seems to be interference with Webpack 4 defaults.\r\nThis is the `webpack.config.js` that I came up with:\r\n\r\n```js\r\nconst webpack = require(\"webpack\");\r\nconst path = require(\"path\");\r\n\r\nmodule.exports = {\r\n  mode: \"development\",\r\n  entry: \".\/index.js\",\r\n  output: {\r\n    path: path.resolve(__dirname, \"dist\"),\r\n    filename: \"bundle.js\"\r\n  },\r\n  module: {\r\n    defaultRules: [\r\n      {\r\n        type: \"javascript\/auto\",\r\n        resolve: {}\r\n      }\r\n    ],\r\n    rules: [\r\n      {\r\n        test: \/fibonacci\\.js$\/,\r\n        loader: \"exports-loader\"\r\n      },\r\n      {\r\n        test: \/fibonacci\\.wasm$\/,\r\n        loader: \"file-loader\",\r\n        options: {\r\n          publicPath: \"dist\/\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n  \/\/ This is necessary due to the fact that emscripten puts both Node and\r\n  \/\/ web code into one file. The node part uses Node\u2019s `fs` module to load\r\n  \/\/ the wasm file.\r\n  \/\/ Issue: https:\/\/github.com\/kripken\/emscripten\/issues\/6542.\r\n  plugins: [new webpack.IgnorePlugin(\/(fs)\/)]\r\n};\r\n```\r\n\r\n(Here is a [minimal test project in a gist][gist] that you can clone and build with `npm start`. Docker required!)\r\n\r\n**edit:**\r\nIn the meantime, @sokra informed that that I can simplify the configuration a bit (and make it less like a sledgehammer):\r\n\r\n```js\r\nmodule.exports = {\r\n  \/* ... *\/\r\n  browser: { \r\n    \"fs\": false \/\/ \u2190 !!\r\n  },\r\n  module: {\r\n    rules: [\r\n      \/* ... *\/\r\n      {\r\n        test: \/fibonacci\\.wasm$\/,\r\n        type: \"javascript\/auto\", \/\/ \u2190 !!\r\n        loader: \"file-loader\",\r\n        options: {\r\n          publicPath: \"dist\/\"\r\n        }\r\n      }\r\n    ]\r\n  },\r\n};\r\n```\r\n\r\n**Unexpected things I had to do**\r\n\r\n- I needed to overwrite `defaultRules` as otherwise some sort of default rule will run _in addition_ to the ones I specified and making webpack error \u201cModule parse failed: magic header not detected\u201d (try it!)\r\n- I needed to specify `file-loader` for the wasm file as otherwise webpack tries to resolve the names of the wasm module\u2019s import object like `env`, which are provided by the JS file.\r\n- I needed to set a `locateFile()` function as webpack changes the file (and potentially path) of the wasm file and Emscripten hardcodes that name (not visible here but in the [gist])\r\n\r\nI am not sure what the right course of action here is, but considering that most wasm projects are going to be built with Emscripten, I feel like it\u2019s worth making it easier. \r\n\r\nHappy to answer Qs to give y\u2019all a clearer picture.\r\n\r\n**What is the expected behavior?**\r\n\r\nIdeally, Webpack would recognize the typical Emscripten JS files and automatically bundle the accomodating wasm module and make paths work.\r\n\r\n\r\n<!-- \"It should work\" is not a good explaination -->\r\n<!-- Explain how exactly you expecting it to behave -->\r\n\r\n**Other relevant information:**\r\nwebpack version:  4.8.3\r\nNode.js version:  10\r\nOperating System: Mac OS 10.13.4\r\nAdditional tools:\r\n\r\n[gist]: https:\/\/gist.github.com\/surma\/b2705b6cca29357ebea1c9e6e15684cc","comments":["Here's my suggestion: https:\/\/github.com\/webpack\/webpack\/issues\/7264#issuecomment-388112273\r\n\r\nWe don't need to explicitly support emscripten, that would be generic enough. \r\n\r\nNote that wasn-bindgen already does that. ","It would be great to see a `ESM` target for Emscripten. This is how webpack's wasm support works. It expects WASM to be imported via `import { ... } from \".\/something.wasm\"`. WASM can get access to JS functions via `(import \".\/something.js\" \"exportName\")` (import section).\r\n\r\nwasm-bindgen creates two files `abc.wasm` and `abc.js`. The `abc.js` exports all exposed functions (public api) and all internal functions. It also imports the `abc.wasm` file. The `abc.wasm` imports all internal functions from `abc.js`.\r\n\r\nThat works great but exposes all internal functions too. I think a 3 file output would be better:\r\n\r\n* `abc.js` exports all public functions, imports `abc_internal.js` and `abc_internal.js`\r\n* `abc_internal.js` exports all internal functions\r\n* `abc_internal.wasm` imports `abc_internal.js`\r\n\r\nEven better if repeated runtime code could be moved into a npm package: This way the wasm could import it directly from this package. This could get handy if you got many wasm modules in an application.","For ref https:\/\/github.com\/kripken\/emscripten\/pull\/6483\r\n\r\nAlso note that the same works for a module on npm. I think it would be more practical.","I also came across this problem when using a [JS library I made](https:\/\/github.com\/mikeheddes\/dcgp.js), that uses WebAssembly, in a [React web project](https:\/\/github.com\/mikeheddes\/dcgp-web).\r\n\r\nI solved it by adding some hacky [`pre.js`](https:\/\/github.com\/mikeheddes\/dcgp.js\/blob\/master\/src\/js\/pre.js) code to basically hijack the wasm module instantiation from the Emscripten created glue code. This way I have all the control over initialising the WASM module. The pre.js file overrides the `createWasm` function and adds a custom module initialisation function which it exports using ES6. Note that I compile with the default JS glue code settings (see [`cpp build script`](https:\/\/github.com\/mikeheddes\/dcgp.js\/blob\/master\/cpp.build.js)) so the `EXPORT_ES6` and `modularize` options are not set but because the pre.js code  has an ES6 export statement the generated glue code is an ES6 module.\r\n\r\nAfter that I combine the generated JS glue code with the JS API interface code bundled with Rollup. The entry of this can be found in [`index.js`](https:\/\/github.com\/mikeheddes\/dcgp.js\/blob\/master\/src\/js\/index.js).\r\n\r\nThen finally when using the library I need to provide it an `arrayBuffer` (node.js) or a `fetch` instance (browsers) of the generated dcgp.wasm file. With webpack that means I needed the following rule:\r\n```js\r\n{\r\n  test: \/\\.wasm$\/,\r\n  type: 'javascript\/auto',\r\n  loader: 'file-loader',\r\n}\r\n```\r\nSome implementation references:\r\n- [Simple Library API example](https:\/\/github.com\/mikeheddes\/dcgp.js\/releases\/tag\/v0.4.0)\r\n- [Implementation in a React app](https:\/\/github.com\/mikeheddes\/dcgp-web\/blob\/master\/src\/dcgp\/middleware.js#L18-L24)\r\n\r\nSo my conclusion being...\r\nI agree with @surma that Webpack and Emscripten don't work well together but I think the main solution should be found in the way Emscripten generates the JS glue code and not how Webpack should handle them. I'm also not sure if @surma's suggestion in [#6542](https:\/\/github.com\/emscripten-core\/emscripten\/issues\/6542) to make separate platform outputs will fix the root cause of this problem. For me the following implementation would make more sense in the JS ecosystem: \r\n```js\r\n\/\/ node.js\r\nimport { initializer } from '.\/wasm-glue-code'\r\nimport { fileToArrayBuffer } from 'emscripten-helpers'\r\n\r\nconst myLibrary = initializer(fileToArrayBuffer('.\/wasm-file.wasm'))\r\n\r\n\/\/ web\r\nimport { initializer } from '.\/wasm-glue-code'\r\n\r\nconst myLibrary = initializer(fetch('.\/wasm-file.wasm'))\r\n```\r\n\r\nHope this was helpful in some way.","Hi @surma,  @sokra,\r\nI know this is fairly old, but it seems like:\r\n```\r\nbrowser: { \r\n  \"fs\": false \/\/ \u2190 !!\r\n},\r\n```\r\nno longer works, and I can't see any reference to `browser` in the webpack documentation.\r\nAny ideas what we should be using instead?\r\n\r\nEdit: figured it out. Use this instead:\r\n```\r\nnode: { \r\n  fs: \"empty\"\r\n},\r\n```","You can specify `-sENVIRONMENT=web` to stop Emscripten from including node-targeted JavaScript.","For Webpack 5, disabling the node-specific stuff is relatively easy:\r\n\r\n```js\r\nresolve: {\r\n    fallback: {\r\n        crypto: false,\r\n        fs: false,\r\n        path: false\r\n    },\r\n},\r\n```\r\n\r\nTo include the wasm files, one solution is just to use copy-webpack-plugin, which is annoying since it makes it non-transparent for people to use your module, but then again, they're already adding the magic `resolve` incantation...\r\n\r\n```js\r\nconst CopyPlugin = require(\"copy-webpack-plugin\");\r\nmodule.exports = {\r\n    plugins: [\r\n        new CopyPlugin({\r\n          patterns: [\r\n              { from: \"node_modules\/MYPACKAGE\/MYPACKAGE.wasm*\",\r\n                to: \"[name][ext]\" },\r\n          ],\r\n      }),\r\n    ],\r\n};\r\n```\r\nIt would sure be swell if someone could write a webpack plugin or loader that would automate this so people could, like, just use Emscripten-compiled modules transparently.  It seems like it should be relatively easy to recognize an Emscripten .js\/.wasm file pair?","@dhdaines \r\nI once managed to get a working solution with setting the Emscripten build to `EXPORT_ES6`, and then simply importing the .js file in my Webpack based (actually Angular) project. Webpack intelligently detected that the .js module further depends on the .wasm file (and maybe even the .data file for preloaded files?)\r\n\r\nThough this seemed to work, it printed some - to me - unintelligible, and unsilenceable warning on every build, so ultimately I used Angular's configuration options to bring in the JS file as a regular script and the WASM as a resource\/asset.","Hi guys, I felt extremely lost while I was digging into this issue, so after I got everything working, I made a example repo containing detailed walkthroughs:\r\n\r\n- Repo: https:\/\/github.com\/9oelM\/emscripten-cplusplus-webpack-example\r\n- Demo: https:\/\/9oelm.github.io\/emscripten-cplusplus-webpack-example\/\r\n\r\nHope it helps someone.","Note also that you still need to disable Webpack's \"mocking\" of __filename, at the very least, or you will not be able to load your WASM unless it is in the root directory (Webpack sets __filename = \"\/index.js\" and then Emscripten' s preamble takes this as the path of the current script in order to find the WASM, which is, obviously, wrong):\r\n\r\n```js\r\n    node: {\r\n        global: false,\r\n        __filename: false,             \r\n        __dirname: false,\r\n    },\r\n```","> @dhdaines I once managed to get a working solution with setting the Emscripten build to `EXPORT_ES6`, and then simply importing the .js file in my Webpack based (actually Angular) project. Webpack intelligently detected that the .js module further depends on the .wasm file (and maybe even the .data file for preloaded files?)\r\n\r\nCan confirm that this works now, and it produces something like this: https:\/\/github.com\/dhdaines\/soundswallower-demo\/tree\/main\/docs\r\n\r\n...as long as you don't use Angular, because Angular doesn't include whatever magical Webpack configuration makes Webpack use the appropriate loader for the WASM file.\r\n\r\nIf you try to fix this by treating the WASM as a normal asset, Angular will use Webpack's default broken behaviour of munging the `import.meta.url` used in the JavaScript code to refer to the WASM to a `file:\/\/` URL on your local file system. (see https:\/\/github.com\/angular\/angular-cli\/issues\/22388)\r\n\r\nSo, you can use a custom Webpack config to disable this behaviour, but this breaks testing among other things, and probably means you can't target non-ES6 browsers. (see https:\/\/stackoverflow.com\/questions\/74038161\/angular-cli-and-loading-assets-with-import-meta-url-causing-not-allowed-to-load)\r\n\r\nUse ES6 modules, they said.  It'll be great, they said.","Just to follow up on this.  The problem is actually *Angular* and its mysterious built-in webpack configuration, which **disables** `module.parser.javascript.url` for some unknown reason!  If you re-enable it in a custom webpack configuration, then `EXPORT_ES6=1` creates modules that work just fine, as noted above - the call to `new URL(\"foo.wasm\", import.meta.url).href` in the JavaScript code is parsed by webpack, which duly adds your WASM as an asset and rewrites the URL properly.\r\n\r\nThe correct (as far as I can tell) workaround is to enable `module.parser.javascript.url` in a custom webpack config: https:\/\/github.com\/angular\/angular-cli\/issues\/24617","@dhdaines Thank you for the deep dive! I recently tried to reproduce my own previously reported success and failed. Now I can try again..."],"labels":["wasm"]},{"title":"libraryTarget UMD and code splitting","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https:\/\/gitter.im\/webpack\/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nWhen splitting code in webpack, the chunks are loaded with temporary script tags:\r\n\r\n```js\r\n\/******\/    var head = document.getElementsByTagName('head')[0];\r\n\/******\/    var script = document.createElement('script');\r\n\/******\/    script.type = 'text\/javascript';\r\n\/******\/    script.charset = 'utf-8';\r\n\/******\/    script.async = true;\r\n\/******\/    script.timeout = 120000;\r\n\r\n\/******\/    script.src = __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \".\" + \"<some_key>\" + \".js\";\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nAll chunks are wrapped within UMD blocks.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nWhen creating an umd library, the library might be loaded by another bundler again (webpack, jspm, etc.). In that case, the script tag loading isn't nice. It would be better to keep the AMD (or System.import for webpack 2) in the chunks which will be interpreted by the other bundler. I didn't find an option to enable this. Is it a missing feature? Or am I missing something and code splitting in umd libraries not possible?\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n\r\nReopens #2471 \r\n","comments":["@sokra \r\nDid you have any chance to look into this?\r\nYour feedback would be very much appreciated, especially since the last issue just got lost and automatically closed...","This is not supported yet.","@sokra \r\nThanks for your reply.\r\nYes I know that, hence the issue.","+1","Any updates on this?","I would really like it too, any updates on it?","Was investigating this right now. And can't see this happening any time soon.\r\n\r\nYou library may be imported in to different projects with different asset delivery pipelines, and to deliver an async chunk your library needs to know where to look for it, a generic `publicPath: '\/assets\/` won't simply work here. And for you library to know where to look for a chunk \u2014 there needs to be a generic way to pass this information to it. And there is no such generic mechanism.\r\n","Yes, this would be awesome to fix. For now I'll continue to use rollup as this blocks me from using webpack for my bundle-split library.","I've built a Vendor injection plugin that solves this issue. I am actually not very familiar with webpack and I've improvised a lot to get it working. It works with **CRA** (create React application) application webpack config, but I guess it shouldn't be too hard to adapt it to non-CRA projects.\r\n\r\nThe current implementation is used solely for development. Useful in a monorepo structure, should speed up build time and help reduce the source map size of internal packages (libraries). Build time should improve in a case when working on multiple packages at the same time. \r\n\r\nThe idea is to split a library bundle into 2, vendors (modules) and the source. Making changes in a package source should build only the source bundle (as long as dependencies aren't changed).\r\n\r\nFor bundle caching add `HardSourceWebpackPlugin`. Both plugins work with CSS as well. \r\n\r\n[VendorsInjectionPlugin gist](https:\/\/gist.github.com\/MrBr\/e641eb3cf882a150ce10eb69aef83f0d)\r\n\r\nAnyhow, I would really appreciate feedback and improvements suggestion as I believe it's not written in best webpack fashion.","Would love to see something like this. I have a library that would greatly benefit from code-splitting. ","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","still an issue @webpack-bot ","Does anyone have any good workarounds for this issue? Had a library that was umd. Library became too large, so split it into chunks but would still like to load it in similar fashion as before.","@bdsanfelippo in the end I just wrote and transpiled directly with babel...","Is there any update for this?","@AndyOGo @sokra is this really specific to `type: 'umd'`? will this be any different with other types?\r\n\r\nAs the library author, is there any property I can specify in my `package.json` that will tell the consuming bundlers to copy the chunks and put them beside the compiled output?","Any updates on this issue? Does anyone have a workaround ?\r\n"],"labels":["enhancement"]},{"title":"Create multiple sourcemaps from a single build","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*feature*\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https:\/\/gitter.im\/webpack\/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\nSet devtool;. `NODE_ENV === PRODUCTION ? 'nosources-source-map' : 'eval-source-map';`\r\n\r\nSourcemap type is built.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin\/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nWhat we'd like is to be able to create multiple sourcemaps for production as a single run.\r\n\r\nSet devtool: `NODE_ENV === PRODUCTION ? ['nosources-source-map', 'source-map'] : 'eval-source-map';`\r\n\r\nThe first sourcemap will be used client side and included in the the `js` e.g. `\/\/# sourceMappingURL=index.js.map`\r\n\r\nThe second sourcemap would be used for our monitoring system, and would have a filename for example `index.js.map2` or anything sensible.\r\n\r\nAll this would be performed in a single build run.\r\n\r\nPerhaps this is already possible and we just haven't discovered how.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version, and Operating System.**\r\n","comments":["You could use a multi-config build to achieve this:\r\n\r\n```js\r\nif (process.env.NODE_ENV === \"production\") {\r\n  module.exports = [\r\n    createConfig({name: \"prod1\", devtool: \"nosources-source-map\"}),\r\n    createConfig({name: \"prod2\", devtool: \"source-map\"}),\r\n  ]\r\n} else {\r\n  module.exports = createConfig({name: \"dev\", devtool: \"eval-source-map\"})\r\n}\r\n```","Thanks, we have tried a multi-config. There have been concerns as to whether each config definitely creates the same final bundle (all my tests indicate that they are, but that is a limited set). Though each build does produce a different hash which is included in the sourcemap), hence a preference to have the sourcemaps created in a single run. There is also the consideration of the time that it takes to bundle our application, twice if we are using multi-config to generate the 2 types of sourcemap that we require. \r\n\r\nJust to add that this is for medical solutions, so there is a great deal of red-tape around what is and what isn't allowed, and the high level of concern.\r\n\r\nThanks for any time and consideration.","That's possible. Just use this configuration, or similar:\r\n\r\n``` js\r\ndevtool: \"hidden-source-map\",\r\nplugins: [\r\n  new SourceMapDevtoolPlugin({\r\n    filename: \"[file].secondary.map\",\r\n    noSources: true\r\n  })\r\n]\r\n```","That's great, thanks! I will be sure to try that first thing in the morning.","It looked very promising, I set \r\n\r\n```js\r\ndevTool: NODE_ENV === PRODUCTION ? 'hidden-source-map' : 'eval-source-map';\r\nplugins: [\r\n    new webpack.SourceMapDevToolPlugin({\r\n      filename: '[file].map',\r\n      noSources: true,\r\n    }),\r\n],\r\noutput: {\r\n    filename: FILENAME,\r\n    path: BUILD_DIR,\r\n    sourceMapFilename: '[file].monitor.map',\r\n},\r\n```\r\n\r\n2 files were created, the `index.js.map` was spot on with no source in the map file and only this link was appended to the bundle. The other file `index.js.monitor.map` was created but the content was:\r\n\r\n```json\r\n{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"file\":\"index.js\",\"sourceRoot\":\"\"}\r\n```\r\n\r\nWe are using Webpack 3.11.0, the production is being uglified `\"uglifyjs-webpack-plugin\": \"^1.2.4\"` and transpiled `\"babel-core\": \"^6.26.0\"` among other things.\r\n\r\nIs this a bug or did I configure it incorrectly?\r\n\r\nI see a similar report https:\/\/github.com\/webpack\/webpack\/issues\/6133\r\n\r\nI created a minimum reproduction of the problem https:\/\/github.com\/Xotic750\/webpack-multi-sourcemap\r\n\r\nI also tried with Webpack 4.2.0 (though I am unable to use this in the products at present) with the same result https:\/\/github.com\/Xotic750\/webpack-multi-sourcemap\/tree\/webpack-4","Is there any more information that I can provide to confirm whether this is our configuration problem or a bug? I'd like to get this working, and would even be willing to try and identify the problem in the source if needed. Thanks.","@Xotic750 problem still exists?","@evilebottnawi Updated both branches linked above.\r\nv3.12.0 same result.\r\nv4.8.3 same result","**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","The problem still exists to the best of my knowledge. The test project is still available at https:\/\/github.com\/Xotic750\/webpack-multi-sourcemap but I have not updated it recently. If it is configuration problem on my part then I would love some guidance to show me where I've gone wrong, equally if this is a problem with webpack then I would love to see it fixed.","**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","https:\/\/github.com\/Xotic750\/webpack-multi-sourcemap\r\nUpdated to all the latest dependencies:\r\n```\r\n  \"devDependencies\": {\r\n    \"@babel\/cli\": \"^7.4.4\",\r\n    \"@babel\/core\": \"^7.4.4\",\r\n    \"@babel\/plugin-transform-runtime\": \"^7.4.4\",\r\n    \"@babel\/preset-env\": \"^7.4.4\",\r\n    \"@babel\/runtime\": \"^7.4.4\",\r\n    \"babel-loader\": \"^8.0.6\",\r\n    \"terser-webpack-plugin\": \"^1.2.3\",\r\n    \"webpack\": \"^4.31.0\",\r\n    \"webpack-cli\": \"^3.3.2\"\r\n  },\r\n```\r\nAnd the problem still exists (is it my configuration or is this truly a webpack bug?). See the 2 map files produced.\r\nhttps:\/\/github.com\/Xotic750\/webpack-multi-sourcemap\/tree\/master\/dist\r\n\r\n\r\n","Interested in this as well for the exact same use case described in the original post. A `nosources-source-map` version very public consumption for resolving stacktraces and a `source-map` version for private internal-only consumption for debugging on the live site.","@joshenders We were never able to get this to work out of the box and so I ended up writing a little plugin to do the job.\r\n```js\r\n\/**\r\n * @file Webpack plugin to build the production sourcemap and add the URL.\r\n * @copyright Copyright (c) 2018, ProReNata AB\r\n * @author Graham Fairweather <graham.fairweather@prorenata.se>\r\n * @version 2.0.0\r\n * @see {@link https:\/\/github.com\/webpack\/docs\/wiki\/how-to-write-a-plugin} for further information.\r\n *\/\r\n\r\nconst {ConcatSource, RawSource} = require('webpack-sources');\r\n\r\nconst PLUGIN_NAME = 'CreateProductionSourcemap';\r\n\r\nclass CreateProductionSourcemap {\r\n  constructor(options = {}) {\r\n    this.sourceMapFilename = options.sourceMapFilename;\r\n    this.sourceMappingURLComment = options.append;\r\n  }\r\n\r\n  apply(compiler) {\r\n    const {filename, sourceMapFilename} = compiler.options.output;\r\n\r\n    const onEmit = (compilation, callback) => {\r\n      const {assets} = compilation;\r\n\r\n      const outputFileName = this.sourceMapFilename.replace('[file]', filename);\r\n      const sourceMapComment = this.sourceMappingURLComment.replace('[url]', outputFileName);\r\n\r\n      utils.stdout.write(`Preparing production sourcemap: \"${outputFileName}\" `);\r\n      const assetName = sourceMapFilename.replace('[file]', filename);\r\n      const withoutSource = JSON.parse(assets[assetName]._value);\r\n\r\n      delete withoutSource.sourcesContent;\r\n      assets[outputFileName] = new RawSource(JSON.stringify(withoutSource));\r\n      assets[filename] = new ConcatSource(new RawSource(assets[filename].source()), sourceMapComment);\r\n      utils.stdout.write('Done.');\r\n      callback();\r\n    };\r\n\r\n    if (compiler.hooks) {\r\n      compiler.hooks.emit.tapAsync(PLUGIN_NAME, onEmit);\r\n    } else {\r\n      compiler.plugin('emit', onEmit);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = CreateProductionSourcemap;\r\n```\r\n\r\nand in your webpack config\r\n\r\n```\r\nconst CreateProductionSourcemap = require('.\/DevTools\/Build\/CreateProductionSourcemap');\r\n\r\n{\r\n    devtool:  'source-map',\r\n    output: {\r\n      filename: OUTPUT_FILENAME,\r\n      path: OUTPUT_PATH,\r\n      sourceMapFilename:  '[file].sentry.map' ,\r\n    },\r\n   plugins: [new CreateProductionSourcemap()],\r\n}\r\n```\r\nThat should be it, I don't think I've missed anything.\r\n\r\nI would still like to know if we configured webpack incorrectly, or if the fact that we couldn't get it to work is a bug.","Thanks for that! Very helpful. In case anyone wants to do this with `jq` outside of webpack, here's how:\r\n\r\nRemoving the `sourcesContent` key using `jq` in a build script:\r\n```\r\njq  'del(.sourcesContent)' example-source-map.js.map\r\n```\r\n\r\nThe `nosources-source-map` is just a `source-map` without the `sourcesContent` key. There are no differences.\r\n```\r\ndiff -u <(jq 'del(.sourcesContent)' example-source-map.js.map) example-nosources-source-map.js.map\r\n```\r\n\r\nYou could then gate public\/private access to this file using logic in your application load balancer or CDN. e.g\r\n\r\n```\r\nif the source.map request originates from a private network\r\n  serve source-map version\r\nelse\r\n  serve nosources-source-map version\r\n```\r\n\r\nThis way the `sourceMappingURL` comment need not change and you have resolved client stack traces for error reporting\/RUM as well as debuggability in production without exposing your unminified\/obfuscated client source code.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Is it worth me updating this example project again?","@Xotic750 no, all fine, not high priority","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Sill actual for some developers","JFYI this issue is currently surfacing on social media as people are seeing sourcemap links to non-routable domains (because the most common way of configuring webpack is still to produce a single build) on Twitter's production site and confusing this with leaking private information from a dev build.\n\n![image](https:\/\/user-images.githubusercontent.com\/109408\/201758077-63aaab02-0898-4de5-875c-8618b6073506.png)"],"labels":["X2: answer required","inactive"]},{"title":"Add `target: \"universal\"`","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https:\/\/gitter.im\/webpack\/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\ntargets are pretty restrictive and a web bundle can't be used in node or webworker.\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin\/loader repo -->\r\n\r\n**What is the expected behavior?**\r\nThe universal target includes runtime code that runs in web, webworker and node.js. The code can be a bit bigger to support all of them.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n* Create UMD bundles that work in all enviroments\r\n* Create bundles with chunks shared between web and webworker.\r\n","comments":["@sokra Can I give it a try to implement this?","Sure","@montogeek any luck on this?","I did an exploration about how to add it, you can see it here https:\/\/github.com\/montogeek\/webpack\/tree\/feat\/universal-target\r\nBut couldn't go further, need to know more about webpack internals","@montogeek have you made any progress on this? The branch that you mentioned doesn't seem to be available anymore.","@emilio-martinez I restored the branch, didn't make more progress than the initial commit","@sokra would you mind advising @montogeek to move forward?","Would the universal target solve my problem? https:\/\/stackoverflow.com\/questions\/49354186\/webpack-common-chunks-for-code-shared-between-webworker-and-web-code\r\n\r\nI think that web+webworker code is **so** common that this target is a **must have**. Else you **cannot create common chunks** between the two.\r\n","Would it be a worthwile idea to discuss if the current `target` solution could be superseded by a more general approach which maybe can be shared across multiple tools? For example I currently partially configure my target environment in multiple tools at the same time like Webpack, Babel and TypeScript. I created a comment explaining this in the `browserslist` repo, which is AFAIK the only format\/config which currently tries do something like that (besides not \"yet\" fully supporting non-browser environments) which is also used by many popular tools in the community (like Babel or Autoprefixer). I just would like to see, if there is some interest in this from the Webpack community as well. This is the comment: https:\/\/github.com\/ai\/browserslist\/issues\/75#issuecomment-374872296\r\n\r\nThank you \ud83d\udc4b","@sokra - could we just change the default `output.globalObject` to `\"self\"`?  It should be consistent across all of the necessary contexts for the `web` output target.","If I remember correctly, just changing the `output.globalObject` isn't sufficient because of the environment specific runtimes that exist. We'd need both an adjustment of the global object as well as an environment agnostic chunk loader.\r\n\r\nThe runtimes I mentioned:\r\n\r\n- Web https:\/\/github.com\/webpack\/webpack\/blob\/fde018300aa52262c384e937c408d5dd97d62951\/lib\/web\/JsonpMainTemplatePlugin.js#L96-L139\r\n- Web Worker https:\/\/github.com\/webpack\/webpack\/blob\/fde018300aa52262c384e937c408d5dd97d62951\/lib\/webworker\/WebWorkerMainTemplatePlugin.js#L44-L56\r\n\r\nThat said, I'd love to have this \ud83d\udc4d ","Not only that but also approaches to handle the JsonpTemplates which handle lazy loading and splitChunks (aka initial chunk groups)  in their respective envs","Why it can't remain as it was implemented in Webpack 3? \r\n```\r\n(function webpackUniversalModuleDefinition(root, factory) {\r\n\tif(typeof exports === 'object' && typeof module === 'object')\r\n\t\tmodule.exports = factory();\r\n\telse if(typeof define === 'function' && define.amd)\r\n\t\tdefine(\"libName\", [], factory);\r\n\telse if(typeof exports === 'object')\r\n\t\texports[\"libName\"] = factory();\r\n\telse\r\n\t\troot[\"libName\"] = factory();\r\n})(typeof self !== 'undefined' ? self : this, function() {\r\n...\r\n```","@felixmosh Top-level `this` doesn't work in Modules:\r\n\r\nhttps:\/\/jsfiddle.net\/4ogrk3b0\/3\/show\/","Ha, thank you for the explanation.","This looks like a bug. Webpack 3.x built HMR with hot reload. as other issues point to, so whatever is the choice, it should be noted that this appears to be a feature request to fix a bug introduced in 4.x","@sokra , @montogeek , is there a roadmap for this being resolved? Or documentation somewhere for working around it?\r\n\r\nCould use some direction. Was just trying to follow the instructions from https:\/\/webpack.js.org\/guides\/author-libraries\/ when I ran into this problem. ","> Would it be a worthwile idea to discuss if the current target solution could be superseded by a more general approach which maybe can be shared across multiple tools?\r\n\r\nJust as a small ping, browserslist would now technically support setting Node as well. I still would love to see one way across multiple tools to specify my target environments.","I just want to mention that this would be useful for me. Having trouble getting web workers to work with webpack....:\/","Any updates on this issue?","```javascript\r\noutput: {\r\n       \/\/ ...\r\n       globalObject: `typeof self !== 'undefined' ? self : this`,\r\n},\r\n```","@zhihuilai thanks, that works!","To add to @zhihuilai's solution, it's safer to put the whole thing in parentheses i.e. `(typeof self != 'undefined' ? self : this)`. Without the parentheses, this code in the bootstrap:\r\n\r\n```js\r\nvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\r\nvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\r\n``` \r\nbecomes:\r\n```js\r\nvar jsonpArray = typeof self != 'undefined' ? self : this[\"webpackJsonp\"] = typeof self != 'undefined' ? self : this[\"webpackJsonp\"] || [];\r\nvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\r\n```\r\nwhich causes this error:\r\n```\r\n(intermediate value)(intermediate value)(intermediate value).push is not a function\r\n```\r\nbecause the `jsonpArray` variable was not set correctly.","Hi all, is there any equivalent to the following, in webpack 3.12.0 (I'm constrained to this from a third-party library):\r\n\r\n`       globalObject: `typeof self !== 'undefined' ? self : this`,\r\n`\r\n\r\nCausing no end of pain with worker-loader and HMR.","This option seems to work\r\n`globalObject: '(self || this)'`","The option suggested by @igodorogea doesn't seem to work with node. Or at least through vs code node debugger. \r\n\r\nThe error is \r\n```\r\n((self || this), function() {\r\n    ^\r\nReferenceError: self is not defined\r\n```\r\n\r\n`globalObject: (typeof self !== 'undefined' ? self : this)` seems to be working for every case thus far.","Any luck 14 months on?","It is open source, PR welcome, there a lot of other problems\/features with more priority, thanks","I was submitting a WIP PR(#8579) for this in Jan and ask for some discussion to moving on but actually got less response. I'd like to continue if it could get more feedback.","@mc-zone :+1: Will reviewed in near future","Created a small plugin which works in the meantime:\r\n\r\n```\r\nclass FixWebWorkerHMRPlugin {\r\n\tapply(compiler) {\r\n\t\tcompiler.options.output.globalObject = '(typeof self !== \"undefined\" ? self : this)';\r\n\t}\r\n}\r\n```","Any chance `target: \"universal\"` would fix the existing de-optimization when targeting `amd` output such as https:\/\/github.com\/webpack\/webpack\/issues\/5489? In that issue all of the chunks external dependencies are hoisted to the main bundle AMD dependencies, which means the main bundle will load in dependencies via the AMD loader that aren't yet needed.","The work-around that I'm now using: https:\/\/www.npmjs.com\/package\/webpack-global-object-x\r\n\r\nBased on work by Mathias Bynens: https:\/\/mathiasbynens.be\/notes\/globalthis","Another solution would be using the direct source of the globalthis [implementation](https:\/\/github.com\/es-shims\/globalThis\/blob\/master\/implementation.js):\r\n```js\r\nmodule.exports = {\r\n    ...\r\n\r\n    output: {\r\n        ...\r\n        globalObject: `(() => {\r\n            if (typeof self !== 'undefined') {\r\n                return self;\r\n            } else if (typeof window !== 'undefined') {\r\n                return window;\r\n            } else if (typeof global !== 'undefined') {\r\n                return global;\r\n            } else {\r\n                return Function('return this')();\r\n            }\r\n        })()`\r\n    },\r\n\r\n    ...\r\n};\r\n```\r\n\r\nAny update if this will be fixed (or `target: 'universal'` available as option) in v5.x.x?","Hi dude, i tried these last solution  of @Simonwep\r\nand other solutions editing globalObject. I don't receive window is not defined anymore but my web worker does not work :( My application goes straight without throwing errors and get the workers :(","Hello @sokra , I want to contribute in this,how should i start it.\r\nI was going through setup the project. I am here to contribute as gsoc contributer"],"labels":["gsoc-2024"]},{"title":"Add Experimental Preset Support","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n\r\n**What kind of change does this PR introduce?**\r\nFeature (WIP)\r\n<!-- E.g. a bugfix, feature, refactoring, build related change, etc\u2026 -->\r\n\r\n**Did you add tests for your changes?**\r\nNo this is experimental right now. Kind of WIP to also discuss implementation details. \r\n<!-- Note that we won't merge your changes if you don't add tests -->\r\n\r\n**If relevant, link to documentation update:**\r\n\r\n<!-- Link PR from webpack\/webpack.js.org here, or N\/A -->\r\n\r\n**Summary**\r\nThe following PR adds a Work in Progress, Proof of Concepts of a highly primitive preset system. \r\n\r\nA webpack preset is detected by searching a users \"package.json\" devDependencies for all package names starting with `webpack-preset-`. From there we will require those dependencies and they will yield their configuration objects which are `webpack-merge`'d together. \r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n<!-- Try to link to an open issue for more information. -->\r\nWhether or not we think #0CJS is a big deal, extending it is what it really means to empathize with a large subset of our users we have yet to tap into. Also, I would like this PR to be a place to help start the design discussion that is testable. \r\n\r\nA preset is just a module that exports a configuration. <==== **likely where we want to design more**\r\n\r\n**Does this PR introduce a breaking change?**\r\nNope.\r\n\r\n**Other information**\r\n\r\n","comments":["Code reviewed on twitch. Good to go \ud83d\udc4d  \ud83d\ude1c","<!-- identifier: ci-result -->\n\n@TheLarkInn Please review the following output log for errors:\n\n``` text\n  1 failing\n\n  1) TestCases development chunks runtime should not load a chunk which is included in a already loaded one:\n\n      AssertionError: expected false to equal true\n      + expected - actual\n\n      -false\n      +true\n      \n      at Assertion.value (\/home\/travis\/build\/webpack\/webpack\/test\/js\/development\/chunks\/parsing\/bundle.js:1981:19)\n      at \/home\/travis\/build\/webpack\/webpack\/test\/js\/development\/chunks\/runtime\/bundle.js:177:20\n  \n```\n\nSee [complete report here](https:\/\/travis-ci.org\/webpack\/webpack\/builds\/334047497?utm_source&#x3D;github_status&amp;utm_medium&#x3D;notification).","**tl;dr:** Some features I would expect to be supported by webpack presets:\r\n\r\n- Scoped packages\r\n- Resolution order of presets\r\n- Environment specific presets\r\n\r\n---\r\n\r\nPresets are good for 0CJS but there are a few things that won't work with your proposal.\r\n\r\n> A webpack preset is detected by searching a users \"package.json\" devDependencies\r\n\r\nPresets shouldn't be restricted to `devDependencies`. A newcomer may unintentionally install a preset without `--dev` and may have a hard time finding why it is not working as expected.\r\n\r\nIf the presets are discovered by reading the dependencies, then presets included by another packages won't be found.\r\n\r\n>  package names starting with `webpack-preset-`.\r\n\r\nWe should limit to this because of scoped packages.\r\n\r\nDependencies are usually alphabetically sorted. Which means that _preset A_ will be applied before _preset B_. Maintaining the desired order would be a pretty bad experience for the user since package managers could override\/re-sort the dependencies.\r\n\r\nApplying all presets found in `package.json` means that it is not possible to skip some depending on your config (`target`, `mode`, \u2026). Babel solved this by having `env` and reading `.babelrc.js` (so you could programmatically define what's exported\/used). Webpack already has config files. Using them would solve the issue but it's not longer 0CJS.\r\n\r\n---\r\n\r\nRegarding the implementation, webpack shouldn't use `webpack-merge` but it's own module\/package. Depending on a 3rd party dependency would complicate how developers evolve webpack.\r\n\r\n`cwd` is not reliable for discovery. For example, in a mono-repository, a developer could invoke the build using: `packages\/some\/build.sh`. `cwd` would be the root but the read `package.json` should be `packages\/some\/package.json`.\r\n\r\n---\r\n\r\n**UPDATE:** Another pain point could be incompatibilities between presets. Since plugins are not deduped, presets could apply the same plugin more than once or introduce clashes between rules\/resolvers. Debugging this could be hard.","Thanks for the comments @ooflorent\r\n\r\nSo each of these things you've mentioned we're explicitly not included so it could spur this discussion. I will take some time this evening and comment on possible design choices. \r\n\r\nI do however, think that leveraging webpack-merge is a good idea.","While I like every way to make and share configuration easier I'd like to see a more general approach to composing, updating and simplifying the webpack config. Loading presets on a namespace-based pattern seems to b a little bit limited. Can I for example use different webpack builds\/configs in one project with presets (because I only have one package.json and I don't want to merge _every_ preset)? E.g. I use webpack to build my application, my unit tests, my E2E tests and maybe more depending in the project.\r\n\r\nSo maybe my setup looks kinda like this:\r\n\r\n```\r\nsrc\/   # application code\r\ntests\/ # unit tests\r\ne2e\/   # e2e tests\r\nwebpack.src.config.js\r\nwebpack.tests.config.js\r\nwebpack.e2e.config.js\r\n```\r\nor \r\n```\r\nsrc\/webpack.config.js\r\ntests\/webpack.config.js\r\ne2e\/webpack.config.js\r\n```\r\n\r\nWebpack everything \ud83d\udc95","> Presets are good for 0CJS\r\n\r\nI agree, and I also think using presets are more important than trying to say the whole thing is zero-config. In Neutrino, we give users two options:\r\n\r\n1. True zero-config via CLI\r\n\r\n```sh\r\nneutrino start --use @neutrinojs\/airbnb @neutrinojs\/react\r\n```\r\n\r\n2. No-config but \"setup\", kinda like declaring your dependencies. You don't need to configure them, you just have to tell Neutrino which ones you want to use:\r\n\r\n```sh\r\nneutrino start\r\n```\r\n\r\n```js\r\n\/\/ .neutrinorc.js\r\nmodule.exports = {\r\n  use: [\r\n    '@neutrinojs\/airbnb',\r\n    '@neutrinojs\/react'\r\n  ]\r\n};\r\n```\r\n\r\n> A newcomer may unintentionally install a preset \r\n\r\nThis is also true of transitive dependencies that may affect how the project is built and silently modify configuration. Declaring dependencies explicitly avoids this.\r\n\r\n---\r\n\r\n> webpack shouldn't use `webpack-merge` but it's own module\/package\r\n\r\nThis is something I've harped on before, but this is the bigger issue of composability of presets.\r\n\r\n1. If `preset-b` is loaded after `preset-a` and wants to modify the Babel configuration, how can it deterministically know the correct location of the Babel configuration? This not only includes ordering, but also has to deal with the multiple ways that webpack can define these structures.\r\n\r\n2. How can I modify the arguments to a plugin without redeclaring the whole plugin and all its options already set?\r\n\r\nThese are problems that are mostly solved with a different configuration API. For Neutrino we built an alternative API called [webpack-chain](https:\/\/github.com\/mozilla-neutrino\/webpack-chain). I'd be happy to discuss the ergonomics of the API, and I'd even consider donating it to webpack if it has value.\r\n\r\n---\r\n\r\n> `cwd` is not reliable for discovery.\r\n\r\nAgreed. This need to be an option for the tool. In Neutrino, we allow this with the `root` option in `.neutrinorc.js`, and when using the low-level API:\r\n\r\n```js\r\n\/\/ .neutrinorc.js\r\nmodule.exports = {\r\n  options: {\r\n    root: __dirname\r\n  }\r\n};\r\n```\r\n\r\n```js\r\n\/\/ API usage in .eslintrc.js\r\nmodule.exports = Neutrino({ root: __dirname })\r\n  .use('.neutrinorc')\r\n  .call('eslintrc');\r\n```\r\n\r\n---\r\n\r\n> Another pain point could be incompatibilities between presets. Since plugins are not deduped, presets could apply the same plugin more than once or introduce clashes between rules\/resolvers. Debugging this could be hard.\r\n\r\nThis could be solved by an alternative config API. Using named locations would either cause options to merge or overwrite at that location, depending on what action the preset is taking.\r\n\r\n---\r\n\r\nI know a refer to a lot of prior art by Neutrino and webpack-chain in this space, but it's mostly because we have spent 8 major versions working on solving these exact problems and want to contribute our lessons learned. If that means deprecating Neutrino and incorporating these directly into webpack, I'd be happy to see this accessible to everyone.","webpack-merge has historically done a really great job at composition, I'll likely spec this out again in a github issue based off of feedback and this prototype, etc. ","Preset Composition is likely to be very complicated and always will be imho. This would require an intermediate step like `neutrino`\/`webpack-blocks` and friends are doing atm by defining composable blocks with an 'extra' API. A preset could  also be 'just' a shareable set of  `webpack.config.js`('s), which provides 'sane' defaults for a certain framework\/flavor etc (e.g `webpack-preset-react`) and additional optional configs (provided by the preset itself) which add support for e.g `HMR\/SSR` via config flags (webpack CLI)\r\n\r\n### `Usage`\r\n\r\n```bash\r\nnpm i -D webpack-cli webpack webpack-preset-react\r\n```\r\n\r\n```bash\r\n# 1. Loads webpack-preset-react, \r\n# 2. Installs dependencies, \r\n# 3. Stores the React webpack Config in the 'webpack CLI Config Cache' (see below 'why')\r\n# 4. Generates webpack.config.js in '.\/'\r\nwebpack init --preset react\r\n```\r\n\r\n```bash\r\n# 1. Loads the React Config from the CLI Cache and applies SSR support\r\n# 2. Generates (updated) webpack.config.js in '.\/'\r\nwebpack preset react --ssr\r\n```\r\n```\r\n# Always uses the latest generated config by default\r\n# Here react-ssr\r\nwebpack\r\n```\r\n\r\n```bash\r\n# Choose an available config and set it to 'latest\/current'\r\nwebpack config react\r\n\r\nwebpack config --list\r\n\r\n# Available Configurations:\r\n# react (latest)\r\n# react-ssr\r\n```\r\n\r\n```\r\n# Every preset supports certain handy CLI commands for project specifics\r\n# The CLI could do that from an e.g 'internal' Config format (re)generating the config on changes\r\n\r\nwebpack entry add '.\/Foo.js'\r\nwebpack entry set app --files 'a.js' 'b.js' 'c.js'\r\nwebpack entry rm '.\/App.js'\r\n\r\nwebpack output --path  '...'\r\nwebpack output --filename '[name].js'\r\n\r\n# and so on...\r\n```\r\n\r\nI would personally avoid merging presets at all. Their could be a an additional type for `loaders\/plugins` config\/blocks etc, but imho a preset is \r\n\r\n- 1. Install \r\n- 2. Init \r\n- 3. Run\r\n\r\nwith a few commands from the CLI for setting `entries`, `output`, `context`.\r\n\r\nAlternatively a handwritten `webpack.config.js` or 'blocks' like `.webpack\/plugins.js`, `.webpack\/modules.js` could be  'merged\/applied' with a preset when the config is generated\r\n\r\n```\r\n(CLI Commands || .\/webpack.config.js [Subset]) > Preset > webpack Defaults\r\n```","### `Preset (naive)`\r\n\r\n```\r\n|\u2013 webpack.config.js\r\n|\u2013 package.json\r\n```\r\n\r\n**webpack.config.js**\r\n```js\r\nconst { entries } = require('webpack-preset')\r\n\r\nconst entry = (cli) => {\r\n  if (cli) {\r\n    \/\/ merge, assign, remove...\r\n    return entries(cli.entries, defaults)\r\n  }\r\n\r\n  return defaults\r\n}\r\n\r\nexport default const config = (cli) => ({\r\n   entry: cli.entry ? entry(cli) : entry()\r\n   ...\r\n})\r\n```\r\n\r\n**package.json**\r\n```js\r\n{\r\n   \"name\": \"webpack-preset-*\"\r\n   \"version\": \"1.0.0\",\r\n   \"main\": \"webpack.config.js\",\r\n   \"dependencies\": { \/\/ installed on webpack init --preset\r\n       \"css-loader\": \"1.0.0\",\r\n       \"file-loader\": \"1.0.0\"\r\n   },\r\n   \"devDependencies\": {\r\n     \"webpack-preset\": \"1.0.0\" \/\/ eventual Preset API\r\n   }\r\n}\r\n```","I've spent some time dealing with managing a set of \"shared\" webpack configurations used on several big-ish projects. The approach I finally settled on is documented here: https:\/\/medium.com\/making-internets\/86c325a6927f. While I like `webpack-merge` I've found it to be too imprecise for a lot of transformations I wanted to do (like inject a file _right_ before the entrypoint). Function composition has always seemed like a simple mechanism for this, and requires no extra API like `webpack-chain` or `webpack-blocks`. Helper functions are always possible, and my small collection of them exists here: https:\/\/www.npmjs.com\/package\/webpack-partial (and it has `entry.replace` for solving the problem I encountered above). Anyway, just thought I'd throw my 2\u00a2 in. Carry on the good fight and thanks for all the work on this \ud83d\ude04 \r\n\r\nIf I were to use my pattern as presets I think it would be straightforward enough to have something like a `.webpackrc` and in it:\r\n\r\n```js\r\nimport preset1 from 'webpack-preset-1';\r\nimport preset2 from 'webpack-preset-2';\r\n\/\/ ...\r\n\r\nexport default [\r\n  preset1, \/\/ this is a function of the form (webpackConfig) => newWebpackConfig\r\n  preset2, \/\/ same as above\r\n  ...\r\n];\r\n```\r\n\r\nAnd then somewhere later to build the final configuration:\r\n\r\n```js\r\nimport {pipe} from 'ramda'; \/\/ or flow from lodash or whatever floats your boat.\r\nconst items = require(pathToRcFile).default;\r\n\r\n\/\/ Generated webpack config\r\nexport default pipe(...items)(baseWebpackConfigHere);\r\n```\r\n\r\nI'm not sure what your vision is, but this pattern has served me well. I don't think reading from `package.json` would be suitable here because maps\/objects are unordered, and for function composition order definitely matters. (And in general I feel combining webpack configurations is not commutative anyway).","> Function composition has always seemed like a simple mechanism for this, and requires no extra API like `webpack-chain` or `webpack-blocks`.\r\n\r\n\ud83d\udc4d \r\n\r\nA preset should help building the initial boilerplate and provide good defaults ('best practices') etc, while a few (likely project specific) settings (e.g `entry`, `output`, `context`) can be set via the CLI. If additional more 'complex' settings (loaders\/plugins with options) are needed write them into a separate file e.g `.\/.webpack\/plugins.js` and let the CLI replace\/add this 'block'. It's also the question where\/when to 'stop' and one should just use it's own config at this point of the journey then imho :). ","> Function composition has always seemed like a simple mechanism for this\r\n\r\nCompletely agree, and this is mostly the approach that Neutrino takes on top of webpack-chain. Unfortunately the problems we are trying to solve with the webpack config object API are not solved via composition, this mostly just aids in breaking up that config into discreet chunks. There is still non-determinism in dealing with loader order and structure. The reason the solution works well for you is you are still in control of the entire configuration and have knowledge about the structure, so you can modify it easily.\r\n\r\nNow imagine that the internals of these presets are managed externally, and you want to add a Babel plugin to babel-loader. You know you can add your own function to the pipeline and modify the configuration, but in this object, how do you know where to inject your plugin at? What if you are using a preset that comes with babel-minify-webpack-plugin, and you want to shut off mangling, but want all the other options to stay the same? Should you be required to re-configure that plugin yourself? You can't do that right now with webpack's object config syntax.\r\n\r\n> while a few (likely project specific) settings (e.g `entry`, `output`, `context`)\r\n\r\nIn practice I have found that some of these options can be quite intertwined. Multi-page apps, hot module replacement, dev server; some of these values rely on each other. If you decide that you want to change these values, then precedence has to be taken into account, as these kinds of options need to be set first in the pipeline, while just adding them to the end of the pipeline would not have the desired effect.\r\n\r\n> It's also the question where\/when to 'stop' and one should just use it's own config at this point of the journey then imho\r\n\r\nI'd want to say that even with significant overrides or additions to a *fully-featured* preset, it's still preferable to having to start over. Maybe your preset handles a lot, and you want to change the Babel config, add postcss, change up some linting rules, but don't want to lose the style and extraction bits.","> Unfortunately the problems we are trying to solve with the webpack config object API are not solved via composition, this mostly just aids in breaking up that config into discreet chunks.\r\n\r\nTrue, the 'how' for the discrete chunks is the difficult part. I consciously left that out for initial discussion in my comments\r\n\r\n> Now imagine that the internals of these presets are managed externally, and you want to add a Babel plugin to babel-loader.\r\n\r\n`.babelrc`, `postcssrc.js`, `posthtmlrc.js` etc. ? And this also tackles the difficult parts already (Rules, Loaders with Options, Plugins with Options etc) and if one wants to customize all that why a preset in the first place and not just a base config (`webpack init`) (maybe include links to the some initial docs there) and presets are not for you ?\r\n\r\n```\r\n|\u2013 .webpack \/\/ webpack CLI (don't touch this folder, .webpack for e.g :))\r\n|   |\u2013 webpack.config.js \/\/ this will run\r\n|\u2013 src\r\n|\r\n|\u2013 webpack.config.js* \/\/ my custom stuff (optional)\r\n|\u2013 package.json\r\n```\r\n\r\n**\\*webpack.config.js** (Custom Config)\r\n```js\r\nexport const extend = {\r\n   rules: [\r\n     \/\/ my custom rules...\r\n   ],\r\n   plugins: [\r\n     \/\/ my custom plugins...\r\n   ]\r\n}\r\n```\r\n\r\nYes the strategy (API) how to apply\/merge\/override custom rules, plugins etc. still needs to be found here and the `custom.config.js` should not be named `webpack.config.js` nor be a plain webpack config at best :). Here something like `webpack-chain` etc might be come in handy, something the CLI can 'understand' on how to proceed :) `rules.prepend(...rule).override(...rule).append(..rule)`\r\n\r\n> In practice I have found that some of these options can be quite intertwined. Multi-page apps, hot module replacement, dev server; some of these values rely on each other. \r\n\r\nA Preset API or the CLI would need to apply\/update e.g `context` to all properties where it is relevant for and which are present in the current config. e.g `const CONTEXT = cli.context || default`\r\n\r\n> I'd want to say that even with significant overrides or additions to a fully-featured preset, it's still preferable to having to start over.\r\n\r\nI'm not saying one needs to start completely over, but if your config has diverged from a preset to a certain degree over time, when is it better to eventually 'just' remove the preset dependency and don't expect webpack (CLI) to update\/manage your current config within the 'preset boundary' like an eventual update to the preset anymore. (You graduated from that preset and handle stuff on your own at this point) ","> Now imagine that the internals of these presets are managed externally, and you want to add a Babel plugin to babel-loader. You know you can add your own function to the pipeline and modify the configuration, but in this object, how do you know where to inject your plugin at? What if you are using a preset that comes with babel-minify-webpack-plugin, and you want to shut off mangling, but want all the other options to stay the same? Should you be required to re-configure that plugin yourself? You can't do that right now with webpack's object config syntax.\r\n\r\nI've done something kind of similar before. I've needed to swap the `target` field of `@babel\/preset-env` depending on if it's a `node` or `web` build. But you're right in the sense there's some degree of opaqueness to all this, since modifying the babel pipeline is mostly handled by `babel`. But if you use functions, this means you have access to babel's underlying machinery for loading presets and you can walk the plugin tree just as you please.\r\n\r\n```js\r\nimport {loader} from 'webpack-partial';\r\nimport {OptionManager} from '@babe\/core';\r\n\r\nconst manager = new OptionManager();\r\nconst babel = manager.init({\r\n  babelrc: true,\r\n  filename: 'somefile.js',\r\n});\r\n\r\nconst existing = JSON.parse(fs.readFileSync('.babelrc'));\r\n\r\nconst tweakBabelLoader = loader.update(\r\n  ({loader}) => \/babel-loader\/.test(loader),\r\n  (loader) => {\r\n    return {\r\n      ..loader,\r\n      options: {\r\n        \/\/ The plugin list here includes _all_ plugins from babel, even nested presets\r\n        plugins: babel.plugins.map((plugin) => {\r\n          \/* mangle plugin here as desired *\/ \r\n        }),\r\n       }\r\n    }\r\n);\r\n\r\nexport default tweakBabelLoader;\r\n```\r\n\r\nRemoving `webpack` plugins is easier I think.\r\n\r\n```js\r\nimport MinifyPlugin from 'babel-minify-webpack-plugin';\r\n\r\nconst stripMinify = (config) => {\r\n  return {\r\n    ...config,\r\n   plugins: (config.plugins || []).filter((plugin) => {\r\n    return !(plugin instanceof MinifyPlugin);\r\n  }),\r\n};\r\n\r\nexport default stripMinify;\r\n```\r\n\r\nI have yet to find a compelling case for not using functions. The only ones I've come across so far is that a) you lose a description of what's going to happen (functions are necessarily opaque) and b) that you need to be careful about ordering since calling `stripMinify` before actually adding the minify plugin won't do what you want. Arguably there's some criticality to getting b) right and I have no good answer to that other than attentive consumers. You could add \"phases\" or \"priorities\" to the functions as metadata and then sort them, though I like to avoid as much magic as possible generally. I've disliked working with https:\/\/github.com\/electrode-io\/electrode-server for the same reason \u2013 trying to provide a description of composition has almost always caused me more trouble than doing the actual composition myself. I now pretty much ubiquitously prefer to delegate ultimate responsibility to the consumer instead of the provider.\r\n\r\n```js\r\nconst fns = [ preset1, preset2, ... ];\r\nfns.sort(...); \/\/ Can use some metadata here\r\npipe(...fns)(baseConfiguration);\r\n```\r\n\r\nI think there's a very valid case of criticism here to say that `preset1` may involve transformations that need to happen at different points and so `fns.sort` can't possibly split those transformations into the places they need to go. This could be solved one way if presets were an array of functions instead of a single function.\r\n\r\n```js\r\nconst fns = [...preset1, ...preset2, ... ]);\r\nfns.sort(...); \/\/ Can use some metadata here\r\npipe(...fns)(baseConfiguration);\r\n```\r\n\r\nAnyway, just a few more thoughts. Does this address your problem @eliperelman or did I misunderstand?","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [x] <!-- document --> This need to be documented (issue in webpack\/webpack.js.org will be filed when merged)"],"labels":["PR: unreviewed","PR: conflict"]},{"title":"Add a plugin to warn if the source type is ambiguous","body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\r\n\r\n**What kind of change does this PR introduce?**\r\n\r\nfeature\r\n\r\n**Did you add tests for your changes?**\r\n\r\nyes\r\n\r\n**If relevant, link to documentation update:**\r\n\r\nn\/a\r\n\r\n**Summary**\r\n\r\nIn order to stay future-proof, webpack must migrate away of `javascript\/auto` type. This PR adds a new plugin that emit a warning if the source type is ambiguous: it uses Harmony modules and CommonJS or AMD global bindings.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nno","comments":["<a href=\"https:\/\/easycla.lfx.linuxfoundation.org\/#\/?version=2\"><img src=\"https:\/\/s3.amazonaws.com\/cla-project-logo-prod\/cla-signed.svg\" alt=\"CLA Signed\" align=\"left\" height=\"28\" width=\"328\" ><\/a><br\/><br \/>The committers are authorized under a signed CLA.<ul><li>:white_check_mark:  Florent Cailhol (b1467761c4c78a27fcc5a436d8efa00d7113cbb4)<\/li><li>:white_check_mark:  Ivan Kopeykin (34389a932a3777d94268358117fc94ad0ba2172c, d0ee75b255fc814ee16ec8a26b93e9003768d4d2, d6af29698e6b7a2e113fe73b743dfbdc501bc4d6, df80f5ae95ba03d896526566ab1feb1855f50585, 2f4914c86b6e9049b1b23b570b416c3bd5e5cc1a)<\/li><\/ul>","<!-- identifier: review-outdated -->\n\n@vankop Thanks for your update.\n\nI labeled the Pull Request so reviewers will review it again.\n\n@sokra Please review the new changes.","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [ ] <!-- document --> This needs to be documented (issue in webpack\/webpack.js.org will be filed when merged)\n* [ ] <!-- webpack-4-backport --> This needs to be backported to webpack 4 (issue will be created when merged)","@ooflorent thanks for starting PR. I have updated it a little bit, could you sign CLA pls?","<!-- identifier: ci-result -->\n\n@vankop The most important CI builds failed. This way your PR can't be merged.\n\nPlease take a look at the CI results from azure ([7 errors \/ 0 warnings](https:\/\/dev.azure.com\/webpack\/60b36df0-23d2-44f7-82d7-6d18e498d900\/_build\/results?buildId=14666)) and [appveyor](https:\/\/ci.appveyor.com\/project\/sokra\/webpack\/builds\/40780538) (failure) and fix these issues.","> <!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. -->\n> \n> \n> \n> **What kind of change does this PR introduce?**\n> \n> \n> \n> feature\n> \n> \n> \n> **Did you add tests for your changes?**\n> \n> \n> \n> yes\n> \n> \n> \n> **If relevant, link to documentation update:**\n> \n> \n> \n> n\/a\n> \n> \n> \n> **Summary**\n> \n> \n> \n> In order to stay future-proof, webpack must migrate away of `javascript\/auto` type. This PR adds a new plugin that emit a warning if the source type is ambiguous: it uses Harmony modules and CommonJS or AMD global bindings.\n> \n> \n> \n> **Does this PR introduce a breaking change?**\n> \n> \n> \n> no\n\n","I have signed the CLA. Feel free to take over this PR (or any of my past contributions)!"],"labels":["PR: CI-not-ok","PR: review-outdated","webpack-6"]},{"title":"Symbolic link junction on different drive","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https:\/\/gitter.im\/webpack\/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\nwebpack build stuck at 95% emitting\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n1) Make a symlink junction from D drive to C drive, e.g. mklink \/J \"C:\\Test\" \"D:\\Test\"\r\n2) Build webpack in C drive\r\n3) Will stuck at 95% emitting (tested with webpack 3.8.1, same result)\r\n4) If build in the exact D drive itself, everything is working fine\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin\/loader repo -->\r\n\r\n[webpack.prod.config.txt](https:\/\/github.com\/webpack\/webpack\/files\/1439932\/webpack.prod.config.txt)\r\n[webpack.dev.config.txt](https:\/\/github.com\/webpack\/webpack\/files\/1439933\/webpack.dev.config.txt)\r\n\r\n**What is the expected behavior?**\r\nShould be able to build successfully\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\nNode.js - 6.11.0\r\nwebpack - 2.2.1\r\nOS - Windows 7\r\n","comments":["Closing because of inactivity. Feel free to report new issue using `webpack@5` with reproducible repo.","Still valid for webpack v5","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information."],"labels":["bug","P4: Nice To Have"]},{"title":"Case insensitivity causes builds to fail when run on another platform","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature, though if you squint at it, it looks like a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nIf a user is building their application on a Windows machine and requiring a file with a case mismatch, the build will succeed. Ex: \r\n\r\n```\r\nimport foo from 'longCamelCasedFilename.js'\r\n```\r\n\r\nwhen the file on disk is actually `longCamelCasedFileName.js`. Now when they try to deploy to a service which builds the project for them on a case-sensitive file system the build will complain about the module being missing.\r\n\r\n**What is the expected behavior?**\r\n\r\nForcing case-sensitive matches would probably break too many people, but it would be better if webpack warned the user when the case of the imported file doesn't actually match the case of the import statement.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nThis is a fairly frequent source of support tickets at Heroku, because it leads customers to believe that the service is buggy. \"Works on my machine\"\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\n\r\ncc @hone ","comments":["I can recommend using https:\/\/github.com\/Urthen\/case-sensitive-paths-webpack-plugin\r\n\r\nThis plugin displays an error in these cases. It's no included by default because there are additional fs operations needed to check filenames, which affects build performance (not everyone deploys to an fs with other case semantics)","Thanks for the pointer!\r\n\r\nThe issue is that this is not my project, rather this is a problem that users of Heroku (or any service that does builds on a case sensitive FS) hit with relative frequency.\r\n\r\nI'm sensitive to the performance argument. What about adding a check when a module is not found and a descriptive warning? That would help people understand the issue if they hit it, but not affect runtime performance.\r\n\r\n> `longCamelCasedFilename.js not found. Did you mean longCamelCasedFileName.js?` + note about file system case-sensitivity","`Did you mean ...` would be a great feature. This wouldn't affect performance in the good cases. It only costs a little bit for the error cases.","Let me clarify that statement: Would you be open to a PR implementing that feature?","-> webpack\/enhanced-resolve","https:\/\/github.com\/webpack\/enhanced-resolve\/blob\/91752e92f0bb4c4384d2127a6d57d0dacb435bb3\/lib\/Resolver.js#L61\r\n\r\nThe resolver already constructs an array of files that would match the request. You can take this array, read all directories and find best file by edit distance. And an additional note if they only differ by casing.","Hi so as a someone who recently rediscovered this git's feature I'd welcome this with open arms. It's terrible waste of time when you encounter this issue and your only clue is currently very unhelpful \"Module not found\" -message.","@sokra I would like to work on this.\r\nI couldn't find the array of files which matches the request in the source(as you mentioned in the comments), I suppose we can do a `fs.readdir` and get all the files in the requested directory?\r\n  ","**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Issue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","the problem is still here at the moment.\r\n\r\n```\r\n\u276f node -v\r\nv12.15.0\r\n\r\n    \"webpack\": \"~4.17.1\",\r\n```\r\n\r\nIs there any news or workarounds?\r\nWhen a problem appears it's a real black hole for time","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","A really simple scenario where this issue bit me was when I tried to package my application using docker. It compiles correctly on Windows, but it consistently failed when trying to build the docker image. Took me a while to figure out this was the issue. ","Still happens (aka @webpack-bot don't close it)","bump","> I can recommend using https:\/\/github.com\/Urthen\/case-sensitive-paths-webpack-plugin\r\n> \r\n> This plugin displays an error in these cases. It's no included by default because there are additional fs operations needed to check filenames, which affects build performance (not everyone deploys to an fs with other case semantics)\r\n\r\nWe used this plugin, after a while our project grown and this plugin takes a lot of build time. I don't advice it.\r\n\r\nThe better solution could be when Webpack is resolving the path check them to make sure it is correct in terms of case-sensitivity.","Bot can't kill this. This is still happening and a serious issue in deployments for all our products. Please update this in future version. \r\n\r\nIn docker and kubernetes instances we use base images, where this is failing. ","Having the same problem in nextjs because of webpack. Compiles fine locally, but fails on server. Please fix this. \ud83d\ude4f"],"labels":["enhancement","webpack-5"]},{"title":"When using AMD output, use AMD for code-split chunks as well","body":"<!-- Please don't delete this template or we'll close your issue -->\r\n<!-- Before creating an issue please make sure you are using the latest version of webpack. -->\r\n<!-- Also consider trying the webpack@beta version, maybe it's already fixed. -->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA new feature that would improve code-splitting with externals.\r\n\r\n<!-- Please ask questions on StackOverflow or the webpack Gitter (https:\/\/gitter.im\/webpack\/webpack). -->\r\n<!-- Issues which contain questions or support requests will be closed. -->\r\n\r\n**What is the current behavior?**\r\n\r\n_Context :_\r\nAn application which is build with multiple sub-applications which are each built with Webpack, and the \"orchestration\" of loading all this is done through requirejs.\r\nOne of the things with this platform, is that react is provided through requirejs so that each plugin can reuse a single global library instead of re-loading it for each app. (Any other library could be provided globally, I use react as the example here)\r\n_\/context_\r\n\r\nWhen we generate a library in amd with some externals and code-splitting. \r\nThe thing is that externals are defined only at the main level even though it's the code-split part that need those externals.\r\n\r\nExample : \r\n\r\n```js\r\n\/\/ main.min.js\r\ndefine(['react'], function(a) { \/* Doesn't actually need react yet *\/ });\r\n\r\n\/\/ 1.main.min.js\r\nwebpackJsonp([0],{3: function() { \/* actually needs react *\/});\r\n```\r\n\r\nWouldn't it be better if it was able to generate it this way ?\r\n\r\n```js\r\n\/\/ main.min.js\r\ndefine(function() { \/* Doesn't actually need react yet *\/ });\r\n\r\n\/\/ 1.main.min.js\r\ndefine([\"react\"], function(a) {\r\n  return {\r\n    chunkIds: [0],\r\n    moreModules: {3: function() { \/* actually needs react *\/}}\r\n  }\r\n});\r\n```\r\n\r\nAdvantages are : \r\n- no custom logic to load modules, requirejs knows how to do it.\r\n- external dependencies are loaded when they're actually needed\r\n- no need to specify a name for the jsonp function as it's done through requirejs\r\n\r\nProblem with the current implementation: \r\n- externals might be loaded too early, which defeats the purpose of code splitting and lazy loading of those parts.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce.**\r\n\r\nIt isn't a bug, just the normal behaviour that could be more optimal\r\n\r\n<!-- A great way to do this is to provide your configuration via a GitHub gist. -->\r\n<!-- Best provide a minimal reproduceable repo -->\r\n<!-- If your issue is caused by a plugin or loader file the issue on the plugin\/loader repo -->\r\n\r\n**What is the expected behavior?**\r\n\r\nTo load externals once they are needed\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nMy motivation is that I have an application that supports plugins, each of those can be implemented with any techology, React, jquery, vanilla js ... while they mostly use React today, we don't know what the future holds for us. Which is why we want to be able to lazily load libraries once they are actually used.\r\n\r\n**Please mention other relevant information such as the browser version, Node.js version, webpack version and Operating System.**\r\n\r\nWe use webpack 3.5.2\r\n","comments":["+1","This feature request would be useful, for example, to develop [Grafana plugins](http:\/\/docs.grafana.org\/plugins\/developing\/development\/).\r\nGrafana uses SystemJS (which is compatible with AMD) to load plugins.\r\nSo, if I want to use Webpack to package a set of Grafana plugins (such as a [Grafana App plugin](http:\/\/docs.grafana.org\/plugins\/developing\/apps\/)), I need to have multiple entry points (one for each plugin), all of them in the AMD format (so that SystemJS can load them).\r\nBut if they have common dependencies, I don't want them to be duplicated in each entry point bundle... but if I use a common chunk, SystemJS currently does not know about it and will not wait for this chunk to be loaded before executing the loaded plugin. But if Webpack created this chunk in the AMD format and used AMD to load it, SystemJS would correctly wait for it to be loaded before executing the plugin that depends on it.\r\n","We are in the middle of migrating a requirejs-based application with custom bundling to a React SPA with webpack4. With AMD output we could load the split chunks through our old loader, too. That would make it incredibly more convenient to create a commons package holding our third party dependencies, while keeping our old module system in place until we are finished. So this would make webpack much more appealing to people coming from another loader.\r\n\r\nRight now the only solution for us is to use one fat bundle for React\/3rdParty and lose all advantages of dedicated bundling, unless we switch to webpack as loader (which is no option atm). \r\n","@onigoetz have you managed to get far with this issue: maybe find another approach\/plugin\/workaround\/tool? :)","Hello @DeTeam No I didn't get far on this issue yet, currently I still have this sub-optimal situation, I definitely want to look for a better approach but don't have any scheduled time to do so. I'll have some time off around Christmas, I'll try to have a look at that moment.","I have a workaround. I am using StatsWriterPlugin to get dependencies and then I convert generated files using string manipulation. It is ugly but it is working for a Liferay use case where Liferay is doing dependency injection based on its config.\r\n\r\n```\r\n  setOutput({\r\n      library: \"[name]\",\r\n      libraryTarget: \"amd\",\r\n      umdNamedDefine: true,\r\n    }),\r\n\r\n\/\/ ...\r\n\r\nnew StatsWriterPlugin({\r\n        filename: \"config.json\",\r\n        fields: [\"assetsByChunkName\", \"entrypoints\"],\r\n        transform({assetsByChunkName, entrypoints}, opts) {\r\n          const getName = path => path.replace(\/\\.js$\/, \"\");\r\n\r\n          const meta = Object.entries(assetsByChunkName).reduce(\r\n            (acc, [name, path]) => {\r\n              if (name.startsWith(\"commons~\")) {\r\n                return {\r\n                  ...acc,\r\n                  [getName(path)]: {\r\n                    name: getName(path),\r\n                    path,\r\n                    dependencies: [],\r\n                  },\r\n                };\r\n              }\r\n\r\n              const dependencies = entrypoints[name].assets\r\n                .filter(dependency => dependency !== path)\r\n                .map(getName);\r\n\r\n              return {\r\n                ...acc,\r\n                [name]: {name, path, dependencies},\r\n              };\r\n            },\r\n            {},\r\n          );\r\n\r\n          return JSON.stringify(meta, null, 2);\r\n        },\r\n      }),\r\n```\r\n\r\n```\r\nfunction convertToFakeAMD() {\r\n  console.log(`\ud83d\udc23=>\ufe0f\ud83d\udc25 converting modules to fake AMD modules`);\r\n\r\n  Object.entries(configJson)\r\n    .filter(([_, {dependencies}]) => dependencies.length === 0)\r\n    .forEach(([_, entry]) => {\r\n      const filePath = path.join(workPath, entry.path);\r\n      const fileContent = fs.readFileSync(filePath, \"utf8\");\r\n\r\n      const fileContentAMD = `define(\"${\r\n        entry.name\r\n      }\",[],function(){${fileContent}\r\n});`;\r\n\r\n      fs.writeFileSync(filePath, fileContentAMD);\r\n\r\n      console.log(\r\n        `\ud83d\udc25 [${filePath.replace(workPath, \"buildPath\")}] updated to AMD module`,\r\n      );\r\n    });\r\n}\r\n```","@TheLarkInn I know this is a \"nice to have\" feature as tagged, but if it is something I (or others) can help contribute, it would be a huge help for the scale we are working at. I'm looking through the code, and I believe the main area where issue occurs is https:\/\/github.com\/webpack\/webpack\/blob\/bf0d0d8f9196cbae65a80b8ddafcd1136b762c4f\/lib\/AmdMainTemplatePlugin.js#L41-L51\r\n\r\nSince the code does lack a bit of documentation, I am doing my best to infer. Based on what I see, it seems that whatever is listed as `externals` in the bundle is just automatically put in the main file template header, regardless of if it is needed or not for that chunk. Is that correct? If so, then my follow up question is are there any mechanisms in place that would allow Webpack to infer what externals apply to each code split chunk? I'm happy to try and help contribute back this fix, but I also am trying to understand the inner workings before hand so I'm not just shooting in the dark.","@Aghassi I spent a bit of time on reading webpack internals and feel like there're few things to check out:\r\n\r\n- AMD template plugin (the one you mentioned)\r\n- `lib\/web\/JsonpChunkTemplatePlugin.js` \u2014 this one's gonna be used for separate chunks, as I understand\r\n\r\nOne way to tackle this would be to:\r\n\r\n1. Create custom plugins for chunk and and output templates\r\n1. Experiment with how the templates work until you get the desired output (AMD with splitchunks)\r\n1. Change existing internal templates to what's implemented\r\n\r\n^^^ I wanted to take this route, but still learning some of the internals of webpack for a better background knowledge","@marcelmokos do you have a full working example of the webpack config that you used to build the config.js file you describe above? if so could you share as we have a common interest in solving this problem as well","First I generate App entry points.\r\n`generateAppEntryPoints.js`\r\n```js\r\n\/\/ @flow\r\n\/* eslint-disable no-console *\/\r\n\r\nconst fs = require(\"fs\");\r\nconst glob = require(\"glob\");\r\nconst pify = require(\"pify\");\r\nconst path = require(\"path\");\r\n\r\nconst getFilePathsForPattern = async pattern => pify(glob)(pattern);\r\nconst getAppName = path =>\r\n  path\r\n    .replace(\"\\\\\", \"\/\")\r\n    .replace(\"\/\/\", \"\/\")\r\n    .split(\"\/\")[1];\r\n\r\nconst getEntry = async (pattern = \"applications\/**\/src\/index.js\") => {\r\n  const filePaths = await getFilePathsForPattern(pattern);\r\n\r\n  return filePaths.reduce(\r\n    (acc, filePath) => ({\r\n      ...acc,\r\n      [getAppName(filePath)]: [path.resolve(process.cwd(), filePath)],\r\n    }),\r\n    {},\r\n  );\r\n};\r\n\r\nasync function generateAppEntryPoints(\r\n  filePath = path.join(\r\n    process.cwd(),\r\n    \"applications\",\r\n    \"webpack-entry-points.json\",\r\n  ),\r\n) {\r\n  const entry = await getEntry();\r\n  console.log(`\ud83e\udd5a creating app entry points json [${filePath}]`);\r\n\r\n  fs.writeFileSync(filePath, JSON.stringify(entry, null, 2));\r\n}\r\n\r\nmodule.exports = generateAppEntryPoints;\r\n```\r\nThen I run webpack that will run StatsWriterPlugin. \r\n`webpack.config.js`\r\n```js\r\n\/* eslint-disable global-require *\/\r\nrequire(\"..\/..\/..\/..\/..\/ableneo\/tools\/scripts\/envSetup\");\r\nrequire(\"dotenv\").config();\r\n\r\nconst {resolve} = require(\"path\");\r\nconst webpack = require(\"webpack\");\r\nconst {StatsWriterPlugin} = require(\"webpack-stats-plugin\");\r\n\r\nconst postcssPresetEnv = require(\"postcss-preset-env\");\r\n\r\nconst {\r\n  createConfig,\r\n  match,\r\n\r\n  \/\/ Feature blocks\r\n  babel,\r\n  css,\r\n  sass,\r\n  devServer,\r\n  url,\r\n  postcss,\r\n  uglify,\r\n\r\n  \/\/ Shorthand setters\r\n  addPlugins,\r\n  setEnv,\r\n  entryPoint,\r\n  env,\r\n  setOutput,\r\n  sourceMaps,\r\n  customConfig,\r\n  performance,\r\n} = require(\"webpack-blocks\");\r\n\r\nconst preset = {\r\n  cssModules: {\r\n    localIdentName: \"[name]__[local]___[hash:base64:5]\",\r\n  },\r\n  postcss: {\r\n    ident: \"postcss\",\r\n    plugins: () => [\r\n      require(\"postcss-flexbugs-fixes\"),\r\n      require(\"postcss-import\")(),\r\n      postcssPresetEnv({\r\n        browsers: [\r\n          \">1%\",\r\n          \"last 4 versions\",\r\n          \"Firefox ESR\",\r\n          \"not ie < 9\", \/\/ React doesn't support IE8 anyway\r\n        ],\r\n      }),\r\n    ],\r\n  },\r\n};\r\n\r\nconst getEntry = () => {\r\n  try {\r\n    \/\/ eslint-disable-next-line import\/no-unresolved\r\n    return require(\"..\/..\/applications\/webpack-entry-points.json\") || {};\r\n  } catch (error) {\r\n    return {};\r\n  }\r\n};\r\n\r\nconst config = createConfig([\r\n  entryPoint(getEntry()),\r\n  setOutput({\r\n    filename: \"[name].[chunkhash].js\",\r\n    chunkFilename: \"[id].[chunkhash].js\",\r\n    path: resolve(__dirname, \"dist\"),\r\n  }),\r\n  babel(),\r\n  match(\r\n    [\"*.css\", \"!*node_modules*\"],\r\n    [css.modules(preset.cssModules), postcss(preset.postcss)],\r\n  ),\r\n  match(\r\n    [\"*.scss\", \"!*node_modules*\"],\r\n    [css.modules(preset.cssModules), postcss(preset.postcss), sass()],\r\n  ),\r\n  \/\/ will load images up to 10KB as data URL\r\n  match(\r\n    [\"*.gif\", \"*.jpg\", \"*.jpeg\", \"*.png\", \"*.svg\", \"*.webp\"],\r\n    [url({limit: 30000})],\r\n  ),\r\n  setEnv({\r\n    NODE_ENV: process.env.NODE_ENV,\r\n  }),\r\n  addPlugins([\r\n    new webpack.DefinePlugin({\r\n      __DEV__: JSON.stringify(process.env.NODE_ENV !== \"production\"),\r\n      STYLEGUIDIST_LIFERAY_THEME_SERVER_PORT: JSON.stringify(\r\n        process.env.STYLEGUIDIST_LIFERAY_THEME_SERVER_PORT,\r\n      ),\r\n    }),\r\n  ]),\r\n\r\n  performance({\r\n    hints: false,\r\n  }),\r\n\r\n  env(\"development\", [\r\n    devServer({\r\n      \/\/ Show full-screen overlay in the browser on compiler errors or warnings\r\n      overlay: true,\r\n    }),\r\n\r\n    sourceMaps(\"cheap-module-eval-source-map\"),\r\n  ]),\r\n  env(\"production\", [\r\n    uglify({\r\n      parallel: true,\r\n      cache: true,\r\n      uglifyOptions: {\r\n        compress: {\r\n          warnings: false,\r\n        },\r\n        output: {\r\n          comments: false,\r\n        },\r\n      },\r\n    }),\r\n\r\n    setOutput({\r\n      library: \"[name]\",\r\n      libraryTarget: \"amd\",\r\n      umdNamedDefine: true,\r\n    }),\r\n\r\n    addPlugins([\r\n      new webpack.LoaderOptionsPlugin({minimize: true}),\r\n\r\n      new StatsWriterPlugin({\r\n        filename: \"config.json\",\r\n        fields: [\"assetsByChunkName\", \"entrypoints\"],\r\n        transform({assetsByChunkName, entrypoints}, opts) {\r\n          const getName = path => path.replace(\/\\.js$\/, \"\");\r\n\r\n          const meta = Object.entries(assetsByChunkName).reduce(\r\n            (acc, [name, path]) => {\r\n              if (name.startsWith(\"commons~\")) {\r\n                return {\r\n                  ...acc,\r\n                  [getName(path)]: {\r\n                    name: getName(path),\r\n                    path,\r\n                    dependencies: [],\r\n                  },\r\n                };\r\n              }\r\n\r\n              const dependencies = entrypoints[name].assets\r\n                .filter(dependency => dependency !== path)\r\n                .map(getName);\r\n\r\n              return {\r\n                ...acc,\r\n                [name]: {name, path, dependencies},\r\n              };\r\n            },\r\n            {},\r\n          );\r\n\r\n          return JSON.stringify(meta, null, 2);\r\n        },\r\n      }),\r\n    ]),\r\n\r\n    customConfig({\r\n      stats: {\r\n        assetsSort: \"!size\",\r\n\r\n        \/\/ `webpack --colors` equivalent\r\n        colors: true,\r\n\r\n        \/\/ Sort the chunks by a field\r\n        \/\/ You can reverse the sort with `!field`. Default is `id`.\r\n        chunksSort: \"!size\",\r\n\r\n        \/\/ Add chunk information (setting this to `false` allows for a less verbose output)\r\n        chunks: true,\r\n\r\n        \/\/ Add the origins of chunks and chunk merging info\r\n        chunkOrigins: false,\r\n\r\n        \/\/ Add built modules information\r\n        modules: true,\r\n\r\n        \/\/ Sort the modules by a field\r\n        \/\/ You can reverse the sort with `!field`. Default is `id`.\r\n        modulesSort: \"!size\",\r\n\r\n        \/\/ Set the maximum number of modules to be shown\r\n        maxModules: 10,\r\n      },\r\n    }),\r\n\r\n    customConfig({\r\n      optimization: {\r\n        splitChunks: {\r\n          cacheGroups: {\r\n            commons: {\r\n              chunks: \"initial\",\r\n              minChunks: 2,\r\n\r\n              minSize: 10000,\r\n              maxInitialRequests: 64, \/\/ number of chunks per request (more lead to overall smaller sizes)\r\n            },\r\n          },\r\n        },\r\n      },\r\n    }),\r\n  ]),\r\n]);\r\n\r\nmodule.exports = config;\r\n```\r\nThen I create liferay config. \r\n`createLiferayConfig.js`\r\n```js\r\n\/* eslint-disable no-console,no-undef,import\/no-dynamic-require *\/\r\n\r\nconst fs = require(\"fs\");\r\nconst glob = require(\"glob\");\r\nconst pify = require(\"pify\");\r\nconst path = require(\"path\");\r\n\r\nconst generateLiferayConfig = require(\".\/generateLiferayConfig\");\r\n\r\nconst args = require(\"..\/utils\/args\");\r\n\r\nconst workPath = args[0];\r\nconst configJson = require(path.join(workPath, \"config.json\"));\r\n\r\nfunction generateAppEntryPoints(filePath = path.join(workPath, \"config.js\")) {\r\n  const config = generateLiferayConfig(configJson);\r\n\r\n  console.log(\r\n    `\ud83d\udc23 creating liferay config [${filePath.replace(workPath, \"buildPath\")}]`,\r\n  );\r\n\r\n  fs.writeFileSync(filePath, config);\r\n}\r\n\r\ngenerateAppEntryPoints();\r\n\r\nfunction convertToFakeAMD() {\r\n  console.log(`\ud83d\udc23=>\ufe0f\ud83d\udc25 converting modules to fake AMD modules`);\r\n\r\n  Object.entries(configJson)\r\n    .filter(([_, {dependencies}]) => dependencies.length === 0)\r\n    .forEach(([_, entry]) => {\r\n      const filePath = path.join(workPath, entry.path);\r\n      const fileContent = fs.readFileSync(filePath, \"utf8\");\r\n\r\n      const fileContentAMD = `define(\"${\r\n        entry.name\r\n      }\",[],function(){${fileContent}\r\n});`;\r\n\r\n      fs.writeFileSync(filePath, fileContentAMD);\r\n\r\n      console.log(\r\n        `\ud83d\udc25 [${filePath.replace(workPath, \"buildPath\")}] updated to AMD module`,\r\n      );\r\n    });\r\n}\r\n\r\nconvertToFakeAMD();\r\n```\r\nThat is calling following function to `generateLiferayConfig.js`\r\n```js\r\n\/*\r\nexport type Module = {\r\n  name: string,\r\n  dependencies: Array<string>,\r\n  path: string,\r\n};\r\n\r\nexport type Modules = {[string]: Module};\r\n*\/\r\n\r\nconst getModule = ({name, dependencies, path}) =>\r\n  `{\r\n  name: ${JSON.stringify(name)},\r\n  dependencies: ${JSON.stringify(dependencies)},\r\n  path: MODULE_PATH + \"\/${path}\"\r\n}`;\r\n\r\nconst generateLiferayConfig = json =>\r\n  Object.entries(json).reduce(\r\n    (acc, [key, module]) =>\r\n      `${acc}Liferay.Loader.addModule(${getModule(module)});\r\n`,\r\n    \"\",\r\n  );\r\n\r\nmodule.exports = generateLiferayConfig;\r\n```\r\nI am not im now on different project. Here is the part of the `package.json` I do not have a public running example I can share for now.\r\n```json\r\n\"entry-points:generate\": \"cross-env NODE_ENV=production node .\/common\/applicationsBuild\/createAppEntryPoints.js\",\r\n\"prebuild\": \"yarn run entry-points:generate\",\r\n\"build\": \"cross-env NODE_ENV=production webpack --mode=production --config .\/common\/webpack\/webpack.config.js\",\r\n\"build:liferay-js-config\": \"cross-env NODE_ENV=production node .\/common\/applicationsBuild\/createLiferayConfig.js\"\r\n```","@DeTeam So... I've been digging into this given the current structure of Webpack for v5 beta. I have created a plugin that can at least know which chunk an external should be loaded in (thanks to a lot of pointers and help from @sokra). However, the `JSONP` callback to invoke chunks is not helpful in the current state. I'm guessing, given the current structure of Webpack's bootstrapping mechanism, that the existing way of bootstrapping loads externals up front so that the webpack module bootstrapping code can avoid callback hell of any sort. Where I'm currently stuck is when webpack tries to load an external module, it calls the following:\r\n\r\n\r\n```javascript\r\n\/******\/ \t\r\n\/******\/ \t\/\/ The require function\r\n\/******\/ \tfunction __webpack_require__(moduleId) {\r\n\/******\/ \t\t\/\/ Check if module is in cache\r\n\/******\/ \t\tif(__webpack_module_cache__[moduleId]) {\r\n\/******\/ \t\t\treturn __webpack_module_cache__[moduleId].exports;\r\n\/******\/ \t\t}\r\n\/******\/ \t\t\/\/ Create a new module (and put it into the cache)\r\n\/******\/ \t\tvar module = __webpack_module_cache__[moduleId] = {\r\n\/******\/ \t\t\ti: moduleId,\r\n\/******\/ \t\t\tl: false,\r\n\/******\/ \t\t\texports: {}\r\n\/******\/ \t\t};\r\n\/******\/ \t\r\n\/******\/ \t\t\/\/ Execute the module function\r\n\/******\/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\r\n\/******\/ \t\r\n\/******\/ \t\t\/\/ Flag the module as loaded\r\n\/******\/ \t\tmodule.l = true;\r\n\/******\/ \t\r\n\/******\/ \t\t\/\/ Return the exports of the module\r\n\/******\/ \t\treturn module.exports;\r\n\/******\/ \t}\r\n```\r\n\r\nSpecifically, the following is what is problematic\r\n\r\n```\r\n\/******\/ \t\t\/\/ Execute the module function\r\n\/******\/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\r\n```\r\n\r\nThis call normally expects the chunk to have your external mapped to an eval with the `module.exports` ready. In the main chunk this looks like \r\n\r\n```javascript\r\n\/***\/ \"react\":\r\n\/***\/ ((module) => {\r\n\r\neval(\"module.exports = __WEBPACK_EXTERNAL_MODULE_react__;\\n\\n\/\/# sourceURL=webpack:\/\/\/external_%22react%22?\");\r\n\r\n\/***\/ })\r\n```\r\n\r\nHowever, ` __WEBPACK_EXTERNAL_MODULE_react__` is hydrated from the `IIFE` at the top of the main chunk. Without that in lazy loaded chunks, we can't fetch the module and assign it properly. \r\n\r\nMost lazy loaded chunks are structured as \r\n\r\n```javascript\r\n(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"a\"], {\r\n \/** Object mapping **\/\r\n}]);\r\n```\r\n\r\nIn this scenario, `a` maps to an object map where each key in the map has an object. So, to the above with `react`, when `react` is asked to load, it runs the `IIFE` that does the eval that assumes the module is already loaded.\r\n\r\nSo to sum it up, it's more than just a plugin and this is where I'm stuck. Unless I'm missing something, the plugin would also need to modify the webpack boot loader code to handle callback loading of deferred modules somehow. I haven't yet been able to piece together how I could sequence something like this. For example, we use `requirejs`, which doesn't offer any `Promise` API unfortunately, so waiting on the module to be returned is a little more annoying.\r\n","An update to the above, I think I have a working solution for a plugin that works with webpack 5. Shoutout to @krohrsb for helping me get over the `jsonp` issue. I essentially had to add a timeout that checks if a chunk has loaded. I need to cleanup the code some more and do some actual testing with production code, but I'll be sure to post here once I am sure I have something. ","@Aghassi you may want to collab on #8837 perhaps?","@ianschmitz is that PR still active? It looked stale. I was hoping to finish putting together this plugin and then using it as a reference to start a PR. Either way, I\u2019d like webpack core to have this logic eventually.","@sokra @TheLarkInn I've made my work public here https:\/\/github.com\/Aghassi\/umd-treeshake-externals-webpack-plugin. This works to solve this issue, and it is compatible with Webpack 5 only at the moment. The code is very messy, and I haven't had time to clean it up. However, I believe it can be used by the core team to solve this issue if you would like to work together on bringing this change into Webpack. Shoutout to @krohrsb for helping me with the payload waiting logic.","@Aghassi This code works as expected with the beta version 9, but not longer anymore on 21. @sokra is it possible to revive this issue and may be find a solution looking forward (or even v4) ?","@artola I don't work on that project anymore as it was for my last job. That being said, I can see if I have time to update it for the current RC. I don't see why it wouldn't be possible. Probably just some internal methods need changing. Happened a few times during the beta period","For clarity to the maintainers, this affects more than just `libraryTarget: 'amd'`. From my tests all the following experience the same issue of hoisting split chunk external dependencies to the main chunk:\r\n\r\n- `amd`\r\n- `amd-require`\r\n- `umd`\r\n- `system`","This is somewhat attainable now by creating your own custom chunk entry-point and creating a dependency to it via [`dependOn`](https:\/\/webpack.js.org\/configuration\/entry-context\/#dependencies).","@privatenumber Do you mean manually creating the chunks?  (not doable in a big app with a bunch of dependencies)","Thats why I said _somewhat_ \ud83d\ude05\r\n\r\nIf your chunk is a vendors chunk, it's very doable.\r\nI think it's still doable to manually chunk split-points as entry-points but more complex.","Is there any progress \uff1f","I no longer work on this problem  given my current role. The only way forward is to update the plugin one beta at a time to webpack 5, then look to upstream the changes. I currently don't have the mental energy or the cycles to take this on in addition to my main work and life. I'd love to see it get over the line, and ideally have the PoC that my repo represents make it's way into Webpack officially. That being said, it's gonna take some time from invested parties to get the example over the line and upstream.","> This is somewhat attainable now by creating your own custom chunk entry-point and creating a dependency to it via [`dependOn`](https:\/\/webpack.js.org\/configuration\/entry-context\/#dependencies).\r\n\r\n@privatenumber I tried doing this using `dependOn` but it doesn't seem to work due to issue #10537 "],"labels":["enhancement","P4: Nice To Have"]},{"title":"Conditionally enable\/disable ProvidePlugin on a per-resource basis","body":"**What kind of change does this PR introduce?**\r\n\r\nNew feature\r\n\r\n**Did you add tests for your changes?**\r\n\r\nYes (cf. `test\/configCases\/plugins\/provide-plugin`).\r\n\r\n**If relevant, link to documentation update:**\r\n\r\nDocumentation update is being prepared [here](\/ngrewe\/webpack.js.org\/tree\/provide-excludes). \r\n\r\n**Summary**\r\n\r\nThis PR introduces more fine-grained control over which resources the ProvidePlugin operates on. This is very useful if you are bundling polyfills: The polyfill implementation very often needs to check whether the injected variables are already present as global on the underlying platform. A good example is [es6-map](\/medikoo\/es6-map). I imagine this feature will also be useful for projects which gradually migrate to a proper module structure and want to ensure that certain parts of the codebase no longer access any globals.\r\n\r\nImplementation-wise, this works by providing a second argument to the constructor, containing a [condition](https:\/\/webpack.js.org\/configuration\/module\/#condition) like the one being used for module rules. Depending on whether the condition matches the resource being processed, different parser configurations are provided at the *after-resolve* stage, which then control the parser plugin behaviour.\r\n\r\n**Does this PR introduce a breaking change?**\r\n\r\nNo. The new parameter is optional. There are no behavioural changes if it is omitted.\r\n\r\n**Other information**\r\n\r\nI hope this feature makes a bit of sense. Please let me know whether there are any problems with it that I've failed to notice\u2026\r\n\r\nThanks!\r\n\r\nNiels\r\n\r\n","comments":["[![CLA assistant check](https:\/\/cla.js.foundation\/pull\/badge\/not_signed)](https:\/\/cla.js.foundation\/webpack\/webpack?pullRequest=4446) <br\/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https:\/\/cla.js.foundation\/webpack\/webpack?pullRequest=4446) before we can accept your contribution.<br\/>","<!-- identifier: ci-result -->\n\nThank you for your pull request! The most important CI builds succeeded, we\u2019ll review the pull request soon.","Hi guys,\r\n\r\nThis already starting to fall behind a bit behind master. Any interest in getting it merged? \r\n\r\nThanks!\r\n\r\nNiels","<!-- identifier: admin-actions -->\n\n*For maintainers only:*\n\n* [x] <!-- document --> This need to be documented (issue in webpack\/webpack.js.org will be filed when merged)","I've updated the PR to work with current master. Any chance somebody might take a look at it?\r\n\r\nThanks,\r\n\r\nNiels"],"labels":["PR: CI-ok","PR: unreviewed"]},{"title":"Document `webpack:\/\/` & make sourcemaps have relative paths to original files and improve default source map behaviour for Node users","body":"**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nSourcemaps are generated with differing file paths [depending on which devtool you use](https:\/\/webpack.github.io\/docs\/configuration.html#output-devtoolmodulefilenametemplate):\r\n\r\n\r\n```\r\nDefault (devtool=[inline-]source-map): \"webpack:\/\/\/[resource-path]\"\r\nDefault (devtool=eval): \"webpack:\/\/\/[resource-path]?[loaders]\"\r\nDefault (devtool=eval-source-map): \"webpack:\/\/\/[resource-path]?[hash]\"\r\n```\r\n\r\nThis uses a custom protocol; but it does not have a well defined format for that protocol, nor does it have lossless data.\r\n\r\nYou can generate absolute paths for sourcemaps using `[absolute-resource-path]` but cannot refer to the destination sourcemap file path to allow developers to find the file that generated the output in the sourcemap. The use of absolute paths has a security concern and exposes build machine paths to the WWW.\r\n\r\nThe alternative is to use variants of `[resource-path]`; however, this information is lossy. Right now `context` is the root, however you can still refer to things outside of this \"root\". Module resolution using `resolve` ala `node_modules` is completely flattened and replaced with a `~` character, this occurs even if the path is explicit ala `require(\".\/node_modules\/foo.js\")` becoming `\".\/~\/foo.js\"`.\r\n\r\nOf note as well, the characters in the source map path do not appear to be url encoded, which is a gotcha.\r\n\r\n**If this is a feature request, what is motivation or use case for changing the behavior?**\r\n\r\nTo allow a better debugging experience.\r\n\r\nSome context: https:\/\/twitter.com\/bradleymeck\/status\/813764365749026816\r\n\r\nBy having relative paths:\r\n\r\n* there is less of a security concern as you won't expose directories outside the context by name unless they are part of the resolution process.\r\n* there is more unity between various bundling tools such as `rollup` or `browserify`\r\n* you won't have the lossy `~` flattening\r\n\r\nSpecific behaviors:\r\n\r\n* Document and enforce a standard for the `webpack:\/\/` protocol using relative pathing from the context.\r\n   * Change all the various devtools to all have the same default template\r\n* Allow the ability to generate your own urls just as exists today using a function.\r\n* The ability to jump outside of the \"root\" is still possible with this and encounter paths like `\"\/..\/..\/dependency\/index.js\"` which currently gets converted to `\/dependency\/index.js`. These should instead persist their `..` parts just like the [WHATWG URL spec](https:\/\/url.spec.whatwg.org\/) regarding files.\r\n* Collisions would maintain the exact same path since they refer to the location of a file on disk.\r\n* Non-valid url characters should be url encoded\r\n* Metadata can optionally (by configuration) be included via query parameters but should be well defined\r\n   * `?loaders=$string` - repeatable\r\n   * `?query=$string` - unique\r\n   * `?moduleId=$number` - unique\r\n   * `?hash=$string` - unique\r\n* improve source map generation for `target: 'node'` (also maybe you relative paths with `file:\/\/\/` protocol)\r\n* Node.js doesn't have `webpack:\/\/` protocol in right way and think it is the part i.e.\r\n```\r\nError: test\r\n at \/home\/evilebottnawi\/IdeaProjects\/webpack-cli\/dist\/foo.js:12:11\r\n        -> \/home\/evilebottnawi\/IdeaProjects\/webpack-cli\/dist\/webpack:\/webpack-cli-monorepo\/entry.js:2:1\r\n```","comments":["Of note: we may want to consider well defined extensions `x_webpack_*` for other various metadata related to the sourcemap.","I actually wrote this fun hack many months ago to help Chrome DevTools be able to map source map paths to disk...\r\n\r\n```js\r\n\/\/ Patch webpack's RequestShortener to not shorten node_modules to \/~\/\r\nconst RequestShortener = require('webpack\/lib\/RequestShortener')\r\nconst originalShorten = RequestShortener.prototype.shorten\r\nconst nullRegexp = \/^\\0\/ \/\/ invalid in paths in any OS\r\nRequestShortener.prototype.shorten = function shorten (path) {\r\n  this.nodeModulesRegExp = nullRegexp\r\n  return originalShorten.call(this, path)\r\n}\r\n```","@Kovensky this kind of thing is exactly why I brought up this issue, do you have any comments on my idea?","Hi,\r\n\r\nJust encountered this issue having \"out-of-context\" `node_modules` folder (using a monorepo with workspaces).\r\nI used this workaround in my configuration to avoid absolute path in source maps :\r\n\r\n```\r\nconst path = require('path')\r\nconst context = \/\/ my absolute context path path\r\nmodule.exports = {\r\n  context,\r\n  \/\/ ...\r\n  output: {\r\n    devtoolModuleFilenameTemplate (info) {\r\n      const rel = path.relative(context, info.absoluteResourcePath)\r\n      return `webpack:\/\/\/${rel}`\r\n    },\r\n    \/\/ ...\r\n  }\r\n}\r\n```","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Not stale","I noticed this line in the [release blog post for webpack 5](https:\/\/webpack.js.org\/blog\/2020-10-10-webpack-5-release\/): \r\n\r\n> allow webpack:\/\/ urls in SourceMaps to provided paths relative to webpack root context\r\n\r\nDoes anyone know more about this change in WP5, and does it have anything to do with what's being suggested here in this issue?\r\n","No, it not solve the problem","not stale","Hey guys - So I've been facing this issue as well, trying to use `webpack` for buillding Visual Studio Code extensions and thus being in need of source maps which point to my local files rather than a `webpack:\/\/` link.\r\n\r\nThus, I set my `devtoolModuleFilenameTemplate` to `..\/[resource-path]` only to notice that this won't work with entrypoints with different directory levels (I have an entrypoint `main: \".\/src\/main.ts\"` and `\"tests\/main.test\": \".\/src\/tests\/main.test.ts\"`).\r\n\r\nHowever, I think I found a temporary solution for this:\r\n\r\n## Workaround\r\nFirst, change the `devtoolModuleFilenameTemplate` to make it output absolute file paths for files. For webpack internals, the default value should be returned:\r\n\r\n```ts\r\nconst { isAbsolute } = require(\"path\");\r\nconst { SourceMapDevToolPlugin } = require(\"webpack\");\r\n\r\nmodule.exports = {\r\n    output: {\r\n        devtoolModuleFilenameTemplate: (context: any) =>\r\n        {\r\n            let path = context.absoluteResourcePath;\r\n\r\n            \/\/ For regular files, this statement is true.\r\n            if (isAbsolute(path))\r\n            {\r\n                return path;\r\n            }\r\n            else\r\n            {\r\n                \/\/ Mimic Webpack's default behavior:\r\n                return `webpack:\/\/${context.namespace}\/${context.resourcePath}`;\r\n            }\r\n        }\r\n    },\r\n    devtool: \"source-map\"\r\n}\r\n```\r\n\r\nThen, add a hand-made plugin which replaces the absolute paths with relative ones:\r\n```ts\r\nconst { dirname, isAbsolute, relative } = require(\"path\");\r\nconst { writeFile } = require(\"fs-extra\");\r\n\r\nmodule.exports = {\r\n    plugins: [\r\n        {\r\n            apply(compiler)\r\n            {\r\n                compiler.hooks.assetEmitted.tap(\r\n                    {\r\n                        name: \"AdjustSourceMap\"\r\n                    },\r\n                    async (file, { content, source, outputPath, compilation, targetPath }) =>\r\n                    {\r\n                        if (file.endsWith(\".map\"))\r\n                        {\r\n                            try\r\n                            {\r\n                                let sourceMap = JSON.parse(content.toString());\r\n\r\n                                if (Array.isArray(sourceMap.sources))\r\n                                {\r\n                                    sourceMap.sources = sourceMap.sources.map(\r\n                                        (source: string) =>\r\n                                        {\r\n                                            \/\/ Prevent `webpack:\/\/` sources from being changed\r\n                                            if (isAbsolute(source))\r\n                                            {\r\n                                                \/\/ Change regular file paths to relative ones\r\n                                                return relative(dirname(targetPath), source);\r\n                                            }\r\n                                            else\r\n                                            {\r\n                                                return source;\r\n                                            }\r\n                                        });\r\n\r\n                                    \/\/ Overwrite old source map\r\n                                    await writeFile(targetPath, JSON.stringify(sourceMap));\r\n                                }\r\n                            }\r\n                            catch {}\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n    ]\r\n};\r\n```\r\n\r\nTake note that the `assetEmitted` hook is only called when the asset is recreated (due to changes, for example).\r\nSo you might want to wipe your webpack output directory (for example by running `git clean -fdx`) in order to make sure that your new `assetEmitted` hook is being executed.\r\n\r\nAfter running `webpack`, your source maps will contain relative file paths just like you'd expect.\r\n\r\nHope this helps!","Yeah, the good workaround, plugins can fix such cases","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","Building on @manuth suggestion above, I don't think a custom plugin is needed - at least this seems to work for me:\r\n\r\n```js\r\noutput: {\r\n  devtoolModuleFilenameTemplate(info) {\r\n    const {absoluteResourcePath, namespace, resourcePath} = info;\r\n\r\n    if (path.isAbsolute(absoluteResourcePath)) {\r\n      return path.relative(buildDirectory, absoluteResourcePath);\r\n    }\r\n\r\n    \/\/ Mimic Webpack's default behavior:\r\n    return `webpack:\/\/${namespace}\/${resourcePath}`;\r\n  },\r\n  filename: '[name].js',\r\n  path: buildDirectory,\r\n},\r\n```\r\n\r\nI.e. make any absolute paths relative to the directory passed in `output.path`","I still think will be great to change behaviour by default for node users, as minimum will be great to implement `[relative-resource-path]`, so developer will not need to write such stuff","> Building on @manuth suggestion above, I don't think a custom plugin is needed - at least this seems to work for me:\r\n> \r\n> ```js\r\n> output: {\r\n>   devtoolModuleFilenameTemplate(info) {\r\n>     const {absoluteResourcePath, namespace, resourcePath} = info;\r\n> \r\n>     if (path.isAbsolute(absoluteResourcePath)) {\r\n>       return path.relative(buildDirectory, absoluteResourcePath);\r\n>     }\r\n> \r\n>     \/\/ Mimic Webpack's default behavior:\r\n>     return `webpack:\/\/${namespace}\/${resourcePath}`;\r\n>   },\r\n>   filename: '[name].js',\r\n>   path: buildDirectory,\r\n> },\r\n> ```\r\n> \r\n> I.e. make any absolute paths relative to the directory passed in `output.path`\r\n\r\nFor anyone else looking, this is what I needed to get debugging to work in VS Code in my nodejs app in an nx workspace. It could not connect the source maps to the actual code files until I added this in the `output` section of my webpack config, as well as added the `sourceMap: true` option."],"labels":["enhancement","RFC\/Proposal","X3: discussion required"]},{"title":"support output.libraryTarget: 'module'","body":"**I'm submitting a feature request**\n\nIt would be nice, if [`output.libraryTarget`](https:\/\/github.com\/webpack\/docs\/wiki\/Configuration#outputlibrarytarget) could support the ES2015 module format.\n\n**What is the motivation \/ use case for changing the behavior?**\n\nSay I develop a fancy component called `fancy-component` with webpack. I use a very custom config with specific loader settings e.g. for inlining images and stuff like that. My module exports `FancyComponent` and `BigFancyComponent`.\n\nA friend develops a single page application and uses rollup to do that. He knows nothing about webpack, but wants to use my `FancyComponent`, but not `BigFancyComponent`. He installs `fancy-component` and imports `FancyComponent`. `BigFancyComponent` should not be included in the build (because of tree shaking).\n\n_As far as I know_ this is currently not possible. My friend would need `fancy-component` in a format using ES2015 modules. But currently these include webpack specific loader logic. I really need to publish `fancy-component` _without_ webpack specific logic, but with ES2015 modules.\n","comments":["I definitely see the merit in this. @sokra I don't think we have a way already to export vanilla es2015 \/ es modules. I think that maybe this can be part of the rollup story (module combining\/(and this splitting exporting)).\n","Is there anything I can do to help with that? Can I tackle this problem myself as someone who is unfamiliar with webpacks code base? Or is this a rabbit hole into the guts of webpack? :)\n","For a feature like this we should write up the design for the feature. Questions I think should be answerered first:\n- if someone uses CJS\/AMD\/non-esm dependencies in their library, how does webpack convert this into esm modules? \n- Should externals be leveraged for lib dependencies?\n","Once we have the behavior designed then you can go straight into adding the test cases.\n","Seems to be like big step. Could we introduce some workaround in the meantime? Like emitting plain non-bundled commonjs modules without `__webpack_require__`, `webpackBootstrap`, etc.?\n\nUse case is similar. I want to build a project with webpacks powerful loaders and I want to output some sort of modules _without_ webpack specific logic, so that they can be consumed more easily by third party build tools. (Or webpack itself, too! E.g. I can't consume CommonJS modules outputted from webpack right now _and_ use `process.env`. A good example: https:\/\/github.com\/facebook\/react is created as CommonJS and they use ``process.env.NODE_ENV`. Their `\"main\"` file points to the CommonJS entry. They can only do that, because they don't use webpack in the first place. If they would want to include a loader somewhere, they currently couldn't emit a _target_ like they have right now which doesn't force others to use webpack, too.)\n","Turns out... it looks like I already _can_ output CommonJS modules _and_ keep `process.env`. (From my knowledge using CommonJS - or ES2015 modules in the future - and allowing environment variables is the lowest common denominator between current popular bundlers. Other features like loaders are webpack-specific.)\n\nYou need to set `output.libraryTarget: 'commonjs2'` (I guess most webpack users know this) and you need to set something like `new DefinePlugin({ 'process.env.FOO': 'process.env.FOO' })` (that was new to me). So it _should_ be possible to create a lib with webpack which can still be consumed by other bundlers without loosing the feature of setting environment variables.\n\nThe only feature which isn't supported in that way is tree shaking, which brings me back to the original feature request.\n","@donaldpipowitch thanks for bringing this up, very useful indeed, I would love to contribute too, I am going to try to learn the current code base first... ","Would love to this implemented!","Have there been any updates to this issue in the past year? Is it being tracked elsewhere?","Having to learn both webpack and rollup is no fun! Would love to have this implemented in webpack.","@sokra @TheLarkInn hey guys. if one (me) wanted to start looking at how to resolve this issue would you have any suggestions? any ideas of how much would need to change to support this?\r\n\r\ni'd be keen to lend some time if you could put me on the right path :-)","It seems to me like Webpack is going to need functionality for compiling CommonJS and other formats to ES Modules, am I correct? I've been diving deep into this for the past few days. It seems like the whole world has traditionally been compiling from other formats to CommonJS. There is a popular babel plugin that does this. That problem seems to have been solved quite well by the community. But we need to go the other way, from CommonJS (or other formats) to ES Modules.\r\n\r\nI'm not sure how much compilation\/transpilation Webpack does itself, but that might be outside of its scope. Perhaps a Babel plugin would be the best choice here. Then the functionality could be leveraged by all libraries that need to go from CommonJS -> ES Modules. There is some prior art:\r\n\r\nBasic Babel plugin for going from CommonJS -> ES Modules (basic, I've already run into a few blocking bugs, no community): https:\/\/www.npmjs.com\/package\/babel-plugin-transform-commonjs-es2015-modules\r\n\r\nAdvanced Rollup plugin for going from CommonJS -> ES Modules (seems very popular, most likely works very well, not very portable outside of Rollup. Might be easy to integrate within Webpack if Webpack has Rollup integration): https:\/\/github.com\/rollup\/rollup-plugin-commonjs\r\n\r\nAs I see it, this functionality should be created independent of Webpack and then incorporated as a dependency, through either a Bable plugin (most ideal), or perhaps a Rollup plugin (already implemented, might need to finagle).\r\n\r\nDisclaimer, I'm not a heavy Webpack user nor in the Webpack community, these are just my thoughts as I've been trying to tackle the issue of CommonJS -> ES Modules","I think webpack must wait until CJS \/ ESM interop has been standarized into node. There are plenty projects that made opinionated choices about it and it could break the existing codebases if things got spec-ed differently.","Hello,\n\nI have a library fully written in Es6, and due to webpack limitations I'm not able to propose my library in es6 module that would enable treeshaking feature on for clients ","@moroine For library, I would recommend using `rollup`. And `webpack` for applications.\r\nRich Harris (rollup's creator) wrote about it: [Webpack and Rollup: the same but different](https:\/\/medium.com\/webpack\/webpack-and-rollup-the-same-but-different-a41ad427058c).","> It seems to me like Webpack is going to need functionality for compiling CommonJS and other formats to ES Modules\r\n\r\nI would restrict exporting to ES module (output.libraryTarget: 'module') to libraries written with  ES modules only","Important use case for this: ES6 modules are now supported natively, but many packages in NPM still use CommonJS export syntax, which means they can't be imported by the browser directly. A strategy I was going to use was to bundle all my node modules up with webpack - eliminating all the disparate export syntaxes - and then just follow the ES6 syntax in my own code. This is apparently impossible, and I don't understand why.\r\n\r\nSomeone above mentioned something called rollup. Sounds like I may be dropping webpack altogether.","@bsmith-cycorp For libraries, Rollup does seem like our only option right now. That's what I did. Wasn't eager to learn new bundler, but it wasn't too hard.","Here's a workaround I managed to config:\r\n```\r\nconst Path = require('path');\r\nconst path = Path.resolve(__dirname, 'dist');\r\nconst EditableSourcesWebpackPlugin = require('editable-sources-webpack-plugin');\r\n\r\n{\r\n\tentry: \".\/src\/index.js\",\r\n\toutput: {\r\n\t\tfilename: \"module.js\",\r\n\t\tpath,\r\n\t\tlibrary: 'x',\r\n\t\tlibraryTarget : \"window\",\r\n\t},\r\n\r\n\tplugins : [\r\n\t\t\/\/ export default the compiled module\r\n\t\tnew EditableSourcesWebpackPlugin(\r\n\t\t\t\/^module\\.js$\/,\r\n\t\t\tsourceCode => (\"export default \" + sourceCode.slice('window[\"x\"] ='.length)),\r\n\t\t)\r\n\t],\r\n\r\n\t\/\/ disable uglify\r\n\toptimization: {\r\n\t\tminimizer: []\r\n\t},\r\n}\r\n```\r\n\r\nIt first export as a global variable `window.x`, and then change start of the output  source code `window[\"x\"] = ` into `export default`.\r\n\r\nI use this in my package [require.web](https:\/\/www.npmjs.com\/package\/require.web).","Is there any news about this?","Is there any news about this??","Feel free to send a PR","Need this feature to publish component with blob url replace web worker require, when using [worker-loader](https:\/\/github.com\/webpack-contrib\/worker-loader)","i also see this as a must-have feature when building a futureproof library, in particular if the library get's bigger.\r\n\r\nI have a fundamental question.\r\nThis is what a simple tree-shakeable es6 lib could look like:\r\n![image](https:\/\/user-images.githubusercontent.com\/16835620\/50986347-e5bf0900-1506-11e9-9522-550ece61de4c.png)\r\nSo `import A from 'lib.js'` will prune `B` and `C`.\r\n\r\nThe reality however is (when, for instance starting a new lib from scratch today) something like this:\r\n![image](https:\/\/user-images.githubusercontent.com\/16835620\/50986360-f0799e00-1506-11e9-94ce-97bbd2d26003.png)\r\nWhen I read the comments in this issue i get the feeling that the thinking is that, for treeshaking to work, EVERYTHING needs to be written in or converted to ES6. \r\n\r\n> * if someone uses CJS\/AMD\/non-esm dependencies in their library, how does webpack convert this into esm modules?\r\n\r\nAnd i am not sure why this is the case. Obviously non ES6 (like CommonJS=CJS) modules can be consumed in ES6. so I don't understand why tree-shaking cannot prune in at least in the top-level ES6 library code.\r\nLooking at the example above and doing `import A from 'lib.js'` again - should it not be possible to automatically prune all code except for `A` and `D`?\r\n\r\ncan someone clarify? i think this ties into the topic of this thread pretty directly..\r\n\r\nseems like rollup does convert (or at least wrap) cjs modules: https:\/\/github.com\/rollup\/rollup-plugin-commonjs","The problem with tree-shaking CJS modules is that `require()` is a runtime function, not a special declarative statement. You could do, for example,\r\n```javascript\r\nfor(let i = 0; i < 10; i++) {\r\n  require('my-module-' + i)\r\n}\r\n```\r\nor\r\n```javascript\r\nfetch('\/get-module-name')\r\n  .then(res => res.text())\r\n  .then(res => require(res))\r\n```\r\n\r\nThis aspect of CJS is powerful, but it makes it totally impossible to statically figure out a complete list of a module's imports and exports, which pretty much makes tree-shaking impossible.\r\n\r\nStill, I don't see why that precludes allowing output to a single ES6 bundle, even if it means giving up tree-shaking.","@bsmith-cycorp I don't think that's it. Crazy dynamic require-calls like that are already disallowed because webpack needs to be able to statically resolve the path for it to do its job.\r\n\r\n@sijakret \r\n> When I read the comments in this issue i get the feeling that the thinking is that, for treeshaking to work, EVERYTHING needs to be written in or converted to ES6.\r\n\r\nI'm pretty sure that's not the case. I don't have the time to test this right now, but I think in your example files B, C, E, F and G would *not* be included to the bundle.  \r\nHowever, if file D is a library and you only use one function from it, it would be nice if Webpack could prune rest of D and its dependencies. But it can't because the library author wasn't able to bundle their library as ES-modules. Hence this issue.","@noppa i have been looking into this for days now. \r\n\r\nIf i use toy examples with, say two classes exported from an es6 file, and only import one. webpack removes the unused one in production mode.\r\n\r\nHowever, as soon as i have a larger (i.e. realistic) es6 bundle (generated by rollup, since webpack can't do that) that includes commonjs modules (imported using https:\/\/github.com\/rollup\/rollup-plugin-commonjs) webpack seems to completely opt out of any treeshaking.\r\n\r\nIn fact, also other things like including a bundled web assembly module, for example prevents tree shaking. I tried all sorts of annotations (```\/*#__PURE__*\/```) but had no luck so far.\r\n\r\nIf i understand thinks correctly webpack offloads treeshaking to uglify\/tersers dead code elimination so i looked into the options there as well.\r\n\r\ni will try to find the time to create a small repro..","I created a repro here: https:\/\/github.com\/sijakret\/webpack-treeshaking-repro ","@sijakret A external module is always considered side-effectful unless it has a correct [sideEffect field in it\u2019s package.json](\r\nhttps:\/\/webpack.js.org\/guides\/tree-shaking\/#mark-the-file-as-side-effect-free) or is [specified as side effect free in module.rules config](\r\nhttps:\/\/webpack.js.org\/configuration\/module\/#rule-sideeffects)","I tried to set sideEffects: false for all .js files (see\nwebpage.config.2.js). Did I do something wrong there? At some point i tried\nadding  a package.json with sideEffects: false setting in the library\nfolder to no effect as well.\n\nAm Fr., 18. Jan. 2019, 16:23 hat Gray Zhang <notifications@github.com>\ngeschrieben:\n\n> @sijakret <https:\/\/github.com\/sijakret> A external module is always\n> considered side-effectful unless it has a correct sideEffect field in\n> it\u2019s package.json\n> <https:\/\/webpack.js.org\/guides\/tree-shaking\/#mark-the-file-as-side-effect-free>\n> or is specified as side effect free in module.rules config\n> <https:\/\/webpack.js.org\/configuration\/module\/#rule-sideeffects>\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/webpack\/webpack\/issues\/2933#issuecomment-455582609>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AQDkJBrv0DyvhGzpmrm72zkzPmtgD2tVks5vEeb7gaJpZM4Jwb6U>\n> .\n>\n","It looks like v5 can potentially solve this \u2665\ufe0f \r\n\r\n> In the future, an alternative code runtime can be used to avoid wrapping the bundle in a IIFE and allow ESM style exports. This will allow ESM as target.\r\n\r\nhttps:\/\/github.com\/webpack\/changelog-v5\/blob\/master\/README.md#runtime-modules","I've spent two days honing our Webpack configuration to build super-optimized UMD-modules, but when I needed to also build it for ESM, well, looks like I'm out of luck and need to start everything from the beginning...\r\n\r\nIn TypeScript compiler you need to change only a single option to switch from one module format to another. It was some kind of a shock for me to find out that Webpack can't emit modules in ESM format at all.","Just wanted to point out that the new `rxjs@6` has switched from deep imports of the required operators to importing all operator names from a single module.\r\n\r\n```typescript\r\nimport \"rxjs\/add\/operator\/map\"; \/\/ old way: this added 'map' to the environment\r\nimport { map } from \"rxjs\/operators\"; \/\/ new way, imports 'map' as a function\r\n```\r\n\r\nFailing to correctly tree-shake rxjs will now lead to huge bundle sizes, and the developers are aware of that. In [their documentation](https:\/\/github.com\/ReactiveX\/rxjs\/blob\/d231053616ab4e5d2541818314110df626e6bf5a\/doc\/pipeable-operators.md#build-and-treeshaking), they are now warning that\r\n\r\n> Using `rxjs\/operators` without making changes to your build process can result in larger bundles.\r\n\r\nAnd they even provide [guidance](https:\/\/github.com\/ReactiveX\/rxjs\/blob\/d231053616ab4e5d2541818314110df626e6bf5a\/doc\/pipeable-operators.md#build-and-treeshaking) for configuring webpack and a helper.\r\n\r\nUnfortunately, all of that is useless if you bundle a library that uses rxjs and is itself built with webpack: the entire rxjs package will be bundled because of non-analyzable CJS `require`.","> Unfortunately, all of that is useless if you bundle a library that uses rxjs and is itself built with webpack: the entire rxjs package will be bundled because of non-analyzable CJS require.\r\n\r\nI believe this is a main reason why Rollup is still an only solution for such case. In our organization, we have to maintain two build systems just to be able to publish our code in multiple formats.","Anyway, PR welcome","Am I correct to assume that, for achieving this feature, we need scope hoisting? Looking at the [documentation](https:\/\/webpack.js.org\/plugins\/module-concatenation-plugin\/) it looks like it is only enabled in production and, most importantly, it has a lot of edge cases.","> I've spent two days honing our Webpack configuration to build super-optimized UMD-modules, but when I needed to also build it for ESM, well, looks like I'm out of luck and need to start everything from the beginning...\r\n> \r\n> In TypeScript compiler you need to change only a single option to switch from one module format to another. It was some kind of a shock for me to find out that Webpack can't emit modules in ESM format at all.\r\n\r\nIt was nearly shocking to me, either. I couldn't create an ES2015 module by Webpack build. It would be great if there is a good solution to Webpack like rollup. ","I think it will be possible with webpack@5","Hi @evilebottnawi, \ud83d\udc4b \r\n\r\nWebpack@5 is still under development? I would like to know when I can use Webpack@5 in my projects. Actually I'm excited to hear about it from you.","@proIT324 in development, and doesn't support `output.libraryTarget: 'module'`, but we refactor code so it will be possible","Hey, @evilebottnawi! is there a roadmap for version 5? It would be very interesting to see what future holds for us.","@evilebottnawi  \ud83d\udc4d \r\nSounds great!","Is there any news about when this is going to be ready for use in production?\r\n\r\nI've been spending the past three days setting up my Webpack configuration to make my React UI kit consumable as a NPM package. I finally get it working, I include one component in my test project to test if everything works and run a build.\r\n\r\nWhen I inspected the bundle I noticed that all of my components where in there while never being included and\/or used in my test project. I was **shocked** to put in lightly.\r\n\r\nI think it's really strange that Webpack even has entire parts of their documentation that revolve around [authoring libaries](https:\/\/webpack.js.org\/guides\/author-libraries\/) while without the support of making your library tree-shakeable using Webpack for this is basically useless.","It is in our roadmap for webpack@5 (not initial), sorry for delay, a lot of work and issues should be fixed and very few developers who want to help","Hello guys, is there any way to help with this feature? I believe it's an essential feature for all the library makers that invested a lot of time in learning Webpack internals and do not want to change the building tool to Rollup.\r\n","@knrdhz : Without intending any least disrespect to the maintainers of webpack, nor to deny the special optimizations it may offer, as a regular Rollup user, I find that to be precisely a justification for using Rollup (along with a few crucial plugins) in the first place; it doesn't take a lot of time for others to learn or modify it.\r\n\r\nOn the other hand, if Webpack came to support this feature, perhaps I as a Rollup user could be persuaded that the time investment to learn Webpack would be worth it as it could meet my ESM needs as well as offer optimizations.","@brettz9: Indeed, although I find the proliferation of tools needed to run my project unproductive.\r\n\r\nFor all the lost souls who ended up here with us waiting  for the progress, I have found a solution proposed by @purtuga: a Webpack plugin allowing you to author ES module. I tested it briefly and it seems to be providing the very feature we are all looking for: https:\/\/github.com\/purtuga\/esm-webpack-plugin","> For all the lost souls who ended up here with us waiting for the progress, I have found a solution proposed by @purtuga: a Webpack plugin allowing you to author ES module. I tested it briefly and it seems to be providing the very feature we are all looking for: https:\/\/github.com\/purtuga\/esm-webpack-plugin\r\n\r\nThe plugin only adds export statements to the end of files in order to allow using ES6 imports.\r\nIt doesn't make the library tree-shakable, which is what everybody is looking for.\r\nIt's explained here: https:\/\/github.com\/purtuga\/esm-webpack-plugin#when-using-the-generated-esm-library-un-used-exports-are-not-removed-from-final-output-not-three-shaken","@knrdhz Thank you for wanting to help. Unfortunately, it is not easy to say exactly what and where to do it. The code base is very large and have to many changes. A better way is to send a PR with basic implementation and get feedback through it. If you have questions about the basic implementation, you can ask them here.","There is no doubt that once webpack supports output `esm`, I will NEVER use rollup again \u2014\u2014 I guess lots of people have the same idea as me.","Will webpack **5** be able to output ES modules? The updated webpack documentation contains two options that indicate optimizations for the `export` keyword. Those two options are new to the docs and do not work with webpack **4**:\r\n\r\n[**optimization.providedExports**](https:\/\/webpack.js.org\/configuration\/optimization\/#optimizationprovidedexports)\r\nTells webpack to figure out which exports are provided by modules to generate more efficient code for export * from .... By default optimization.providedExports is enabled.\r\n\r\n[**optimization.usedExports**](https:\/\/webpack.js.org\/configuration\/optimization\/#optimizationusedexports)\r\nTells webpack to determine used exports for each module. This depends on optimization.providedExports. Information collected by optimization.usedExports is used by other optimizations or code generation i.e. exports are not generated for unused exports, export names are mangled to single char identifiers when all usages are compatible. Dead code elimination in minimizers will benefit from this and can remove unused exports.\r\n","@Baedda I think webpack 5 will support module output according to https:\/\/webpack.js.org\/configuration\/experiments\/#root","@chenxsan I have tried to make an ES module work with webpack `5.0.0-beta.13` and the following webpack config, but right now it doesn't seem to work yet.\r\n\r\n```\r\noutput: {\r\n    module: true\r\n},\r\nexperiments: {\r\n    mjs: true,\r\n    outputModule: true\r\n},\r\n```\r\n\r\nBut it is really nice to hear that esm support is planned for the future. Can't wait for webpack 5 to be released :)\r\n","Just a +1 for this feature, IMHO it is very important for library authors... While other bundlers (perhaps too many) exist, and some can do the trick (i.e. rollup), I find webpack the most complete and production-ready solution out there. But the fact that this feature is missing unfortunately creates room for its competitors to emerge, and the ecosystem to get even more fragmented...","just linking another related feature request: outputting non-bundled files https:\/\/github.com\/webpack\/webpack\/issues\/2561","I appreciate all the work the Webpack team and contributors are putting in. But that this feature receives so little attention is a bummer. With all major browsers supporting ES modules, Webpack currently stands in the way of leveraging the possibilities modules give us. \r\nA lot of work is being put into a proprietary \"Module Federation\" #10352 solution which could also be implemented to a large degree using standard ES modules and import maps. I wish half the effort that flows into #10352 would go into implementing ESM support.\r\nWebpack is still the best and most widely used bundler. But with such a huge feature gap it's also slowly becoming a burden for people who have a large codebase depending on it and at the same time wanting to use ESM.","After light reading without diving into the details beyond the \"Learn more\" article on the module federations page, module federation sounds like... ES Modules, or at least something that could be built on top of ES Modules. I didn't dive deep into it though.\r\n\r\nWith native ES Modules, whatever module we import after a route change will be re-used if a previous route has already used that code. So... module federation seems to be a feature that is already built into ES Modules natively in modern browsers?\r\n\r\nWhat am I missing?\r\n\r\nI left a comment, https:\/\/github.com\/webpack\/webpack\/issues\/10352#issuecomment-652116686: it sounds as if we're inventing an alternative to ES Modules now. Hopefully someone can give us more light.","For any TypeScript authors that just want modules now, try this:\r\n\r\n```\r\nnpm i -D rollup-plugin-terser rollup-plugin-typescript2 rollup\r\n```\r\nThen add a **rollup.config.js** in your project root:\r\n\r\n```\r\nimport path from \"path\";\r\nimport { terser } from \"rollup-plugin-terser\";\r\nimport typescript from \"rollup-plugin-typescript2\";\r\n\r\nexport default [\r\n  {\r\n    input: path.resolve(__dirname, \"src\/Index.ts\"),\r\n    output: [\r\n      {\r\n        file: path.resolve(__dirname, \"dist\/index.js\"),\r\n        format: \"cjs\"\r\n      },\r\n      {\r\n        file: path.resolve(__dirname, \"dist\/index.es.js\"),\r\n        format: \"es\"\r\n      }\r\n    ],\r\n    plugins: [\r\n      typescript(),\r\n      terser({\r\n        toplevel: true,\r\n        compress: {\r\n          passes: 3,\r\n          pure_getters: true,\r\n          unsafe: true\r\n        },\r\n        output: {\r\n          comments: false\r\n        }\r\n      })\r\n    ]\r\n  }\r\n];\r\n\r\n```\r\nThen just run \r\n\r\n```\r\nrm -rf dist && rollup --config .\/rollup.config.js\r\n```\r\n\r\nNote: you might need to change the `module` property in your `tsconfig`. I used  \"ESNext\". ","Be patient output.libraryTarget: 'module' is on our roadmap and will be implemented for webpack@5 release","I made a [demo](https:\/\/github.com\/webpack\/webpack\/files\/5001895\/demo.zip) with version 5.0.0-beta.22 but it doesn't seem to work. @evilebottnawi am I doing something wrong or isn't it operational yet in the latest beta?\r\n\r\n```\r\n$ npm install\r\n$ npm run build\r\n```\r\n\r\n```\r\nERROR in test.js from Terser\r\n'return' outside of function [test.js:60,9]\r\n    at ee (\/test\/node_modules\/terser\/dist\/bundle.min.js:1:19541)\r\n    at c (\/test\/node_modules\/terser\/dist\/bundle.min.js:1:28244)\r\n    at \/test\/node_modules\/terser\/dist\/bundle.min.js:1:32480\r\n    at \/test\/node_modules\/terser\/dist\/bundle.min.js:1:28976\r\n    at \/test\/node_modules\/terser\/dist\/bundle.min.js:1:50966\r\n    at ce (\/test\/node_modules\/terser\/dist\/bundle.min.js:1:51103)\r\n    at gr (\/test\/node_modules\/terser\/dist\/bundle.min.js:1:339538)\r\n    at minify (\/test\/node_modules\/terser-webpack-plugin\/dist\/minify.js:166:7)\r\n    at Object.transform (\/test\/node_modules\/terser-webpack-plugin\/dist\/minify.js:183:18)\r\n    at execFunction (\/test\/node_modules\/jest-worker\/build\/workers\/processChild.js:140:17)\r\n```","@coemans It is still under development, bug error is very strange, I want too look at this, can you open a new issue in `terser-webpack-plugin`?","@sokra I think we should merge `output.module` and `output.libraryTarget` in one option `output.format: 'umd' | 'commonjs' | 'module' | 'other-values'` to avoid misleading. `experiments.outputModule: true` allow to use `output.format: 'module'`, otherwise it was an error. \r\n\r\nAlso using `output.format: 'module'` automatically enable `output.iife: false`, `output.scriptType: 'module'` and `terserOptions.module: true` (I will do it on terser side)\r\n\r\nIt looks confusing now, also it is hard to detect on a plugin side, because `library` can be `object` too and have `type: 'module'` (very hacky to detect it on `terser-webpack-plugin` side)","Just for info, if somebody stumbles upon this:\r\n\r\n**es module output didn\u2019t made it into webpack 5 yet**.\r\n\r\nAlt least not up until now (webpack 5.2.0).\r\n\r\nYou can set the config and it will compile, but output will have no import or export statement.","This will be one of the next features we will work on.","So, `webpack@5.9.0` support ESModule now? This issue can be close safely?","For libraries - no","Hello,\r\n\r\nWhat tasks are still pending to resolve this ? I would love to help on this, but I don't know what's left to do.\r\n","`experiments.outputModule` not work\uff0chere is a codesandbox demo: \r\n\r\nhttps:\/\/codesandbox.io\/s\/outputmodule-test-uog4c?file=\/src\/main.js\r\n\r\noutput nothing~\r\n\r\nanybody give me an example, txs!!!","So, webpack@5.9.0 support ESModule now? This issue can be close safely?","No, sorry @linxiaowu66 - see this issue:\r\nhttps:\/\/github.com\/webpack\/webpack\/issues\/8895#issuecomment-713852053","In progress...\r\n\r\nWe will start with very basic support, which has a few limitation:\r\n\r\n* No circular dependencies with externals\r\n* A little bit of not really needed runtime\r\n* No live-bindings of exports\r\n* Not statically analyse-able bundles (no nested bundling)\r\n* When top-level-await is used, it must also be supported by the target environment\r\n* No runtime chunk\r\n* All modules are converted into strict mode (maybe there will be a warning which lists non-strict modules)\r\n\r\nBut it would allow:\r\n\r\n* ESM exports from entrypoint\r\n* `externals` that are ESM too\r\n* chunk loading via native `import()`\r\n* Initial splitChunks loading via ESM `import`\r\n* Module WebWorkers\r\n* Module Federation remote loading via ESM\r\n\r\nSo this should cover basic needs for applications or some libraries that are consumed at runtime.\r\n\r\nThe next step would be to get rid of the first 3 limitations when the following conditions are met:\r\n\r\n* entrypoint is an ESM\r\n* exports are not reexported from modules that can't be concatenated with the entrypoint (like CJS, splitChunks)\r\n\r\n---\r\n\r\nFor other use cases (like bundling a library for consumption via bundler), there is another option we are considering:\r\n\r\nNo chunking and emitting processed modules as ESM instead.\r\n\r\nInstead of joining the modules together into chunks webpack would emit the modules directly (converting them to esm, sometimes wrapping them in functions, module ID => path).\r\n\r\n---\r\n\r\n`target: \"node\"` should generate `import` for built-in Node.js modules (like `process`\/`fs`\/etc)","@sokra  Any updates on this? Last I've seen comment wise is from February and I haven't seen much else after sifting through PRs.\r\n\r\nI hesitate to overstate the case, however this is one of the most requested features for webpack I can think of. if it had a special library mode like you mentioned, for building shared libraries efficiently, and a separate ESM export mode for production, it would solve so many problems for alot of folks.","I'm working on that, but was distracted by some other stuff. Expect something in the next few days...","@sokra any updates?","Ready for testing https:\/\/github.com\/webpack\/webpack\/releases\/tag\/v5.41.0, with small limitation, but we will fix it in near future","I tried the 5.41.0 release, unfortunately I'm still getting this error:\r\n\r\n```\r\nERROR in external \"lit-element\"\r\nThe target environment doesn't support EcmaScriptModule syntax so it's not possible to use external type 'module'\r\nError: The target environment doesn't support EcmaScriptModule syntax so it's not possible to use external type 'module'\r\n```\r\n\r\nThis is with the following config:\r\n\r\n```\r\n        output: {\r\n            path: path.resolve(__dirname, \".\/dist\/js\"),\r\n            filename: \"[name].js\",\r\n            chunkFilename: \"[name].js\",\r\n            library: {\r\n                type: \"module\"\r\n            },\r\n            chunkLoading: \"import\",\r\n            chunkFormat: \"module\"\r\n        },\r\n        externalsType: \"module\",\r\n        experiments: {\r\n            outputModule: true\r\n        },\r\n ```","You still on old vesion or lit is not ECMA modules format","I'm on 5.41.0, and lit is definitely ES Module format as I am using it elsewhere directly.","Are you sure? Please provide example, I'm pretty sure that webpack prefer to use non es format due invalid `main`\/`exports` or other fields in `package.json`, also please provide browserslist, maybe you doesn't allow to use ecma modules in your env","Yes very sure that lit-element is an es module format, here's a snippet from its package.json:\r\n\r\n```\r\n{\r\n  \"name\": \"lit-element\",\r\n  \"version\": \"2.4.0\",\r\n  \"description\": \"A simple base class for creating fast, lightweight web components\",\r\n  \"license\": \"BSD-3-Clause\",\r\n  \"homepage\": \"https:\/\/lit-element.polymer-project.org\/\",\r\n  \"repository\": \"Polymer\/lit-element\",\r\n  \"type\": \"module\",\r\n  \"main\": \"lit-element.js\",\r\n  \"module\": \"lit-element.js\",\r\n  \"directories\": {\r\n    \"test\": \"test\"\r\n  },\r\n  \"files\": [\r\n    \"\/lib\/\",\r\n    \"\/src\/\",\r\n    \"!\/src\/demo\/\",\r\n    \"!\/src\/test\/\",\r\n    \"\/lit-element.d.ts\",\r\n    \"\/lit-element.d.ts.map\",\r\n    \"\/lit-element.js\",\r\n    \"\/lit-element.js.map\",\r\n    \"\/ts3.4\/\"\r\n  ],\r\n ```\r\n \r\n Its a web component base class library, and its used extensively in ES module only environments.","Can you provide small repo I want to look at this","Sure thing, here you go:\r\n\r\nhttps:\/\/github.com\/benjamind\/webpack-modules","Further investigation seems to indicate the module output works if I force the internal environment in the options to module:\r\n\r\n```jsonc\r\n        output: {\r\n            path: path.resolve(__dirname, \".\/dist\/js\"),\r\n            filename: \"[name].js\",\r\n            chunkFilename: \"[name].js\",\r\n            library: {\r\n                type: \"module\"\r\n            },\r\n            chunkLoading: \"import\",\r\n            chunkFormat: \"module\",\r\n            environment: {\r\n                module: true \/\/ force module environment\r\n            }\r\n        },\r\n```\r\n\r\nThis stops the error, but doesn't result in a valid module output. It appears that for the ES Module externals we're not getting an appropriate `id` set in the `ChunkGraph`. This then results in entries like this in the output bundle:\r\n\r\n```js\r\n;\/\/ CONCATENATED MODULE: external \"lit-element\"\r\nvar x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\r\nvar y = x => () => x\r\nconst external_lit_element_namespaceObject = x({ [\"LitElement\"]: () => __WEBPACK_EXTERNAL_MODULE_null__.LitElement, [\"customElement\"]: () => __WEBPACK_EXTERNAL_MODULE_null__.customElement, [\"html\"]: () => __WEBPACK_EXTERNAL_MODULE_null__.html });\r\n;\/\/ CONCATENATED MODULE: .\/src\/index.ts\r\n```\r\n\r\nWith the `__WEBPACK_EXTERNAL_MODULE_null__` being undefined at runtime.","Thanks for feedback, we will fix it","The generated ES6 output contains the lines:\r\n```\r\n\/******\/ \"use strict\"\r\n\/******\/                Object.defineProperty(exports, '__esModule', { value: true });\r\n```\r\nI think both lines are not necessary.","> ```js\r\n>             chunkLoading: \"import\",\r\n>             chunkFormat: \"module\",\r\n>             environment: {\r\n>                 module: true \/\/ force module environment\r\n>             }\r\n> ```\r\n\r\n`output.module: true` is the option you want to set, instead of these internal options. You also need to set `experiments.outputModule: true` to enable the experiment. Actually these internal options should also require enabling the experiment.\r\n\r\nNote: `output.module: true` is automatically set when `experiments.outputModule: true` is enabled.","If you see an error like that:\r\n\r\n```\r\nThe target environment doesn't support EcmaScriptModule syntax so it's not possible to use external type 'module'\r\n```\r\n\r\nyou want to put only browsers that support ESM into your browserslist, or add an browserslist, or add `target: [\"web\", \"es2015\"]`.","There also seem to be a bug that `module` externals doesn't work correctly when concatenated.","Note that it's still very experimental and work in progress. Still these feedback is very value-able.","> The generated ES6 output contains the lines:\r\n> \r\n> ```\r\n> \/******\/ \"use strict\"\r\n> \/******\/                Object.defineProperty(exports, '__esModule', { value: true });\r\n> ```\r\n> \r\n> I think both lines are not necessary.\r\n\r\nI don't see `Object.defineProperty(exports, '__esModule', { value: true })` anymore in the output.\r\n\r\nyes `\"use strict\"` is unnecessary and could be removed. Note that minimizing will also remove it.","For now set `optimization.concatenateModules: false`...","I call `webpack --mode development` using 5.42.0 with webpack.config.js:\r\n```javascript\r\n...\r\nexport default {\r\n    optimization: {\r\n        concatenateModules: true\r\n    },\r\n    experiments: {\r\n        outputModule: true\r\n    },\r\n    output: {\r\n        library: {\r\n            type: 'module'\r\n        },\r\n        filename: 'abc.js',\r\n        publicPath: '\/dist'\r\n    },\r\n    node: { global: false },\r\n    module: {\r\n        rules: [{\r\n            test: \/\\.styl$\/,\r\n            use: [\r\n                MiniCssExtractPlugin.loader,\r\n                preprocessLoader,\r\n                {\r\n                    loader: 'css-loader'\r\n                },\r\n                {\r\n                    loader: 'stylus-loader'\r\n                }\r\n            ]\r\n        }, {\r\n            test: \/\\.js$\/,\r\n            use: [\r\n                preprocessLoader\r\n            ],\r\n            exclude: \/node_modules|bower_components\/\r\n        }, {\r\n            test: \/\\.png$\/,\r\n            use: 'url-loader'\r\n        }]\r\n    },\r\n    devtool: false,\r\n    plugins: [\r\n        new ESLintPlugin({}),\r\n        new MiniCssExtractPlugin({\r\n            filename: 'abc.css'\r\n        }),\r\n        new webpack.BannerPlugin({\r\n            banner: BANNER,\r\n            entryOnly: true\r\n        })\r\n    ]\r\n};\r\n```\r\nthe resulting file contains:\r\n```javascript\r\n\/******\/ \/* webpack\/runtime\/hasOwnProperty shorthand *\/\r\n\/******\/ (() => {\r\n\/******\/        __webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\r\n\/******\/ })();\r\n\/******\/ \r\n\/******\/ \/* webpack\/runtime\/make namespace object *\/\r\n\/******\/ (() => {\r\n\/******\/        \/\/ define __esModule on exports\r\n\/******\/        __webpack_require__.r = (exports) => {\r\n\/******\/                if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n\/******\/                        Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n\/******\/                }\r\n\/******\/                Object.defineProperty(exports, '__esModule', { value: true });\r\n\/******\/        };\r\n\/******\/ })();\r\n\/******\/ \r\n```\r\nso the line `Object.defineProperty(exports, '__esModule', { value: true });` is there.\r\n\r\nSince the purpose of IIFE is to protect from namespace pollution and since ES6 modules serve the same purpose, the IIFE-construct above is not necessary.\r\n\r\n`optimization.concatenateModules: false` produces at the end bigger files, when inserted in an external project, using ES6\/rollup, terser and then brotli, In my scenario `optimization.concatenateModules: false` produces bigger files than `optimization.concatenateModules: true`.  But before switching to ES6 in webpack, my files were even bigger without `optimization.concatenateModules: true`","@dilyanpalauzov yep, it is bug, we will fix it, so we have it in `experiments` :+1: ","Thanks for the hard work: this generated module code has improved a lot.\r\n\r\nI have a question though: what's the story about tree shaking?\r\nAfter a test, I obtained the following bundle (excerpt).\r\n\r\n```javascript\r\nvar __webpack_exports__ = {};\r\n\r\n\/\/ EXPORTS\r\n__webpack_require__.d(__webpack_exports__, {\r\n  \"K\": () => (\/* binding *\/ bar),\r\n  \"R\": () => (\/* reexport *\/ foo)\r\n});\r\n\r\n;\/\/ CONCATENATED MODULE: .\/src\/funcs.js\r\n\r\nfunction foo(a, b) {\r\n    return a + b;\r\n}\r\n\r\n;\/\/ CONCATENATED MODULE: .\/src\/index.js\r\n\r\n\r\nfunction bar() {\r\n    return \"Hello world\";\r\n}\r\n\r\n\r\nvar __webpack_exports__bar = __webpack_exports__.K;\r\nvar __webpack_exports__foo = __webpack_exports__.R;\r\nexport { __webpack_exports__bar as bar, __webpack_exports__foo as foo };\r\n```\r\n\r\nThe code populating the `__webpack_exports__ ` makes it impossible to statically analyze the connection between exports and function declarations. An external process attempting to tree-shake this file would not be able to remove the unused functions.","> The code populating the `__webpack_exports__ ` makes it impossible to statically analyze the connection between exports and function declarations. An external process attempting to tree-shake this file would not be able to remove the unused functions.\r\n\r\nCurrently the focus is on creating applications or runtime-consumed libraries and not build-time-consumed libraries (tbh, they should be published unbundled anyway).\r\n\r\nNonetheless this need to be fixed not for tree-shaking support, but for live-binding support.","> Currently the focus is on creating applications or runtime-consumed libraries and not build-time-consumed libraries (tbh, they should be published unbundled anyway).\r\n\r\nWait a second, but this is precisely (or a main driver) of why this feature is needed if, I'm not mistaken. This builds and outputs ESM modules to be published which allows downstream build tooling to tree-shake out unused code.\r\n\r\n> Nonetheless this need to be fixed not for tree-shaking support, but for live-binding support.\r\n\r\nI think this needs to be fixed **specifically for** tree-shaking support as this is going to be the expected behavior from this feature (as we're already seeing).","> > Currently the focus is on creating applications or runtime-consumed libraries and not build-time-consumed libraries (tbh, they should be published unbundled anyway).\r\n> \r\n> Wait a second, but this is precisely (or a main driver) of why this feature is needed if, I'm not mistaken. This builds and outputs ESM modules to be published which allows downstream build tooling to tree-shake out unused code.\r\n> \r\n> > Nonetheless this need to be fixed not for tree-shaking support, but for live-binding support.\r\n> \r\n> I think this needs to be fixed **specifically for** tree-shaking support as this is going to be the expected behavior from this feature (as we're already seeing).\r\n\r\nLet's make it step by step. The first step is application support.\r\n\r\nFor real library support there will be a new mode that disables chunking and emit the modules directly (optionally concatenated).","Please update https:\/\/github.com\/webpack\/webpack\/projects\/8 with what is done and what needs to be done.\r\n\r\nShall new tickets be opened, like for the emitted `\u201cuse strict\u201d;`?","@dilyanpalauzov here fix https:\/\/github.com\/webpack\/webpack\/pull\/13842","UPD: \r\nentries, which dependOn on another entries - has error \"unexpected 'export' keyword\" in resulting js.\r\n\r\nconfig:\r\n```\r\nentry: {\r\n  react: {\r\n\t  import: path.join(__dirname, 'js\/libs\/src\/react.js')\r\n  },\r\n  \"react-datetime\": {\r\n\t  import: path.join(__dirname, 'js\/libs\/src\/react-datetime.js'),\r\n\t  dependOn: 'react'\r\n  }\r\n}\r\n```\r\n\r\nresulting code:\r\n```\r\n\/******\/ var __webpack_exports__ReactCropper = __webpack_exports__.ReactCropper;\r\n\/******\/ export { __webpack_exports__ReactCropper as ReactCropper };\r\n\/******\/ }\r\n])\r\n```\r\n\r\nbut should be:\r\n```\r\n\r\n\/******\/ __webpack_exports__ReactCropper = __webpack_exports__.ReactCropper;\r\n  \/******\/\r\n  \/******\/\r\n}\r\n])\r\nvar __webpack_exports__ReactCropper;\r\nexport {__webpack_exports__ReactCropper as ReactCropper};\r\n\r\n```\r\nIt is necessary to move 'export' to root level.","@Megabyteceer Can you create reproducible test repo?","@alexander-akait  https:\/\/github.com\/Megabyteceer\/webpack_es6export_bug","@Megabyteceer bug, thanks for the report, just interesting why do you use `libraryTarget: 'module'` and `dependOn` together, what is use case?","In development time i use pure js with es6 modules without any bundlers. Problem is many external libraries has no es6 distributibes. I use webpack to convert such a libs in to es6 compatible modules.\r\n\r\nAnd why them separated in few bundles - some big modules i load in lazy mode, on demand. So such a lazy loaded module should see another module loaded before and not bundle ewerything again.","@Megabyteceer thanks for information, make sense, I think we will fix it in near future","Should work with `webpack@5`. Feel free to report new issue with reproducible repo.","@vankop, @donaldpipowitch, @alexander-akait   \r\n\r\ncan anyone please help me with the solution. this issue is closed now but I can't find a way to solve this problem \r\nI am creating a my-common-ui library which will be consumed by applications. But when I import some components still everything from that my-common-ui library is included in the webpack file. (**tree shaking is not working)**\r\n\r\nI am using webpack with typescript in react project. \r\n\r\n**Things I am using**\r\n- react ui library with typescript\r\n- ts-loader in webpack\r\n- using barrel export in every folder's index.ts file\r\n\r\n**Things I have tried**\r\n- \"sideEffects\": false, in package.json\r\n- library.type = \"module\" with experiments.outputModule = true\r\n\r\n**but still tree shaking is not working**","CMIIW, tree shaking doesn't remove the code, but acts on the export statements instead, making the code unreachable (unless it's referenced within the module). Actual removal of the code is left to the minification phase of the build. Can you confirm that you're seeing the unshaken code post minification @jayeshchoudhary? Also, reproducible repo would be nice","> CMIIW, tree shaking doesn't remove the code, but acts on the export statements instead, making the code unreachable (unless it's referenced within the module). Actual removal of the code is left to the minification phase of the build. Can you confirm that you're seeing the unshaken code post minification @jayeshchoudhary? Also, reproducible repo would be nice\r\n\r\nI can still see the unused functions used in the production mode also ","@jayeshchoudhary pls reduce your example to a small reproducible repo, I'll take a look","sure @vankop will do in sometime ","Still valid, not finished","tried this repo with webpack.5.52.1 and export still not at the root level: https:\/\/github.com\/Megabyteceer\/webpack_es6export_bug","@Megabyteceer yes, but still exist ","I am also facing the same situation as @jayeshchoudhary. \r\n\r\nI've put together a repro here:\r\nhttps:\/\/github.com\/IsaacWalker\/WebpackLibModuleTreeshakeRepro\r\n\r\n","@vankop \r\n@IsaacWalker I also have same setup with couple of components in it. and I only want those components which are imported and tree shake rest of it\r\n\r\nHave you used this in another application and imported just hello-world component.\r\n\r\nWhat did you saw in the final bundle ?\r\n\r\nDid only hello-world component comes in final bundle or both hello-world and my-button gets included","So there's two components exported from the library and both are included in the application regardless of whether or not only one is imported.\r\n\r\nThe output of the library is this:\r\n``` js\r\nimport * as __WEBPACK_EXTERNAL_MODULE_react__ from \"react\";\r\n\/******\/ var __webpack_modules__ = ([\r\n\/* 0 *\/,\r\n\/* 1 *\/\r\n\/***\/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\r\n\r\n__webpack_require__.r(__webpack_exports__);\r\n\/* harmony export *\/ __webpack_require__.d(__webpack_exports__, {\r\n\/* harmony export *\/   \"HelloWorld\": () => (\/* reexport safe *\/ _hello_world__WEBPACK_IMPORTED_MODULE_0__.HelloWorld),\r\n\/* harmony export *\/   \"MyButton\": () => (\/* reexport safe *\/ _my_button__WEBPACK_IMPORTED_MODULE_1__.MyButton)\r\n\/* harmony export *\/ });\r\n\/* harmony import *\/ var _hello_world__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\r\n\/* harmony import *\/ var _my_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);\r\n\r\n\r\n\r\n\r\n\/***\/ }),\r\n\/* 2 *\/\r\n\/***\/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\r\n\r\n__webpack_require__.r(__webpack_exports__);\r\n\/* harmony export *\/ __webpack_require__.d(__webpack_exports__, {\r\n\/* harmony export *\/   \"HelloWorld\": () => (\/* reexport safe *\/ _HelloWorld__WEBPACK_IMPORTED_MODULE_0__.HelloWorld)\r\n\/* harmony export *\/ });\r\n\/* harmony import *\/ var _HelloWorld__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\r\n\r\n\r\n\r\n\/***\/ }),\r\n\/* 3 *\/\r\n\/***\/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\r\n\r\n__webpack_require__.r(__webpack_exports__);\r\n\/* harmony export *\/ __webpack_require__.d(__webpack_exports__, {\r\n\/* harmony export *\/   \"HelloWorld\": () => (\/* binding *\/ HelloWorld)\r\n\/* harmony export *\/ });\r\n\/* harmony import *\/ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);\r\n\r\n\/**\r\n * Hello World\r\n *\/\r\nconst HelloWorld = props => {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"div\", null,\r\n        react__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"a\", null,\r\n            \"Hello \",\r\n            props.name,\r\n            \"!\")));\r\n};\r\n\r\n\r\n\/***\/ }),\r\n\/* 4 *\/\r\n\/***\/ ((module) => {\r\n\r\nvar x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\r\nvar y = x => () => x\r\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\r\n\r\n\/***\/ }),\r\n\/* 5 *\/\r\n\/***\/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\r\n\r\n__webpack_require__.r(__webpack_exports__);\r\n\/* harmony export *\/ __webpack_require__.d(__webpack_exports__, {\r\n\/* harmony export *\/   \"MyButton\": () => (\/* reexport safe *\/ _MyButton__WEBPACK_IMPORTED_MODULE_0__.MyButton)\r\n\/* harmony export *\/ });\r\n\/* harmony import *\/ var _MyButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);\r\n\r\n\r\n\r\n\/***\/ }),\r\n\/* 6 *\/\r\n\/***\/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\r\n\r\n__webpack_require__.r(__webpack_exports__);\r\n\/* harmony export *\/ __webpack_require__.d(__webpack_exports__, {\r\n\/* harmony export *\/   \"MyButton\": () => (\/* binding *\/ MyButton)\r\n\/* harmony export *\/ });\r\n\/* harmony import *\/ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);\r\n\r\n\/**\r\n * My Button\r\n *\/\r\nconst MyButton = props => {\r\n    return (react__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement(\"button\", { type: \"button\" },\r\n        \"Click Me! \",\r\n        props.text));\r\n};\r\n\r\n\r\n\/***\/ })\r\n\/******\/ ]);\r\n\/************************************************************************\/\r\n\/******\/ \/\/ The module cache\r\n\/******\/ var __webpack_module_cache__ = {};\r\n\/******\/ \r\n\/******\/ \/\/ The require function\r\n\/******\/ function __webpack_require__(moduleId) {\r\n\/******\/ \t\/\/ Check if module is in cache\r\n\/******\/ \tvar cachedModule = __webpack_module_cache__[moduleId];\r\n\/******\/ \tif (cachedModule !== undefined) {\r\n\/******\/ \t\treturn cachedModule.exports;\r\n\/******\/ \t}\r\n\/******\/ \t\/\/ Create a new module (and put it into the cache)\r\n\/******\/ \tvar module = __webpack_module_cache__[moduleId] = {\r\n\/******\/ \t\t\/\/ no module.id needed\r\n\/******\/ \t\t\/\/ no module.loaded needed\r\n\/******\/ \t\texports: {}\r\n\/******\/ \t};\r\n\/******\/ \r\n\/******\/ \t\/\/ Execute the module function\r\n\/******\/ \t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\r\n\/******\/ \r\n\/******\/ \t\/\/ Return the exports of the module\r\n\/******\/ \treturn module.exports;\r\n\/******\/ }\r\n\/******\/ \r\n\/************************************************************************\/\r\n\/******\/ \/* webpack\/runtime\/define property getters *\/\r\n\/******\/ (() => {\r\n\/******\/ \t\/\/ define getter functions for harmony exports\r\n\/******\/ \t__webpack_require__.d = (exports, definition) => {\r\n\/******\/ \t\tfor(var key in definition) {\r\n\/******\/ \t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\r\n\/******\/ \t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\r\n\/******\/ \t\t\t}\r\n\/******\/ \t\t}\r\n\/******\/ \t};\r\n\/******\/ })();\r\n\/******\/ \r\n\/******\/ \/* webpack\/runtime\/hasOwnProperty shorthand *\/\r\n\/******\/ (() => {\r\n\/******\/ \t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\r\n\/******\/ })();\r\n\/******\/ \r\n\/******\/ \/* webpack\/runtime\/make namespace object *\/\r\n\/******\/ (() => {\r\n\/******\/ \t\/\/ define __esModule on exports\r\n\/******\/ \t__webpack_require__.r = (exports) => {\r\n\/******\/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\r\n\/******\/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\r\n\/******\/ \t\t}\r\n\/******\/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\r\n\/******\/ \t};\r\n\/******\/ })();\r\n\/******\/ \r\n\/************************************************************************\/\r\nvar __webpack_exports__ = {};\r\n\/\/ This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\r\n(() => {\r\n__webpack_require__.r(__webpack_exports__);\r\n\/* harmony export *\/ __webpack_require__.d(__webpack_exports__, {\r\n\/* harmony export *\/   \"HelloWorld\": () => (\/* reexport safe *\/ _components__WEBPACK_IMPORTED_MODULE_0__.HelloWorld),\r\n\/* harmony export *\/   \"MyButton\": () => (\/* reexport safe *\/ _components__WEBPACK_IMPORTED_MODULE_0__.MyButton)\r\n\/* harmony export *\/ });\r\n\/* harmony import *\/ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\r\n\r\n\r\n})();\r\n\r\nvar __webpack_exports__HelloWorld = __webpack_exports__.HelloWorld;\r\nvar __webpack_exports__MyButton = __webpack_exports__.MyButton;\r\nexport { __webpack_exports__HelloWorld as HelloWorld, __webpack_exports__MyButton as MyButton };\r\n```\r\n\r\nbut looking back through the thread, what @sokra said leads me to believe this is not possible yet.\r\n\r\nWhat we're looking for is a configuration that will output a result that is consumable by a bundler at build time (where treeshaking occurs), rather than one consumed dynamically in an environment where modules are supported like an application in a modern browser. The former is one of the primary scenarios supported by Rollup, so I think it will have to be done with that for now. \r\n\r\nAnother feature which is also called out and run into by Typescript is the fact that there is always a single entry chunk output, which conflicts with how Typescript produces d.ts files (to match src in ES module format). I don't believe this would be an issue with the mode mentioned: 'new mode that disables chunking and emit the modules directly'. I believe this is the [preserve modules](https:\/\/rollupjs.org\/guide\/en\/#outputpreservemodules) feature supported by Rollup.","@IsaacWalker this issue for ecma modules output, `preserveModules` is different and have another issue, firstly we need finish edge cases for ecma modules and then we will implement `preserveModules` option","@IsaacWalker completely got your point and I agree with it. Infact I have tried to bundle my library using **rollup** and it works perfectly.\r\n\r\nI think rollup's `output.format = \"es\" `, `preserveModules: true` and `multi entry points` does the trick\r\n\r\n@alexander-akait @vankop is there currently a way to solve this issue in webpack ? ","@jayeshchoudhary impossible right now, to be honest, this is not an easy task, but it is in our roadmap","@alexander-akait thanks for quick response and your help.\r\nWill love to use this feature when it comes out.","I feel like this is closely related to my issue... That node allows you to `import { something } from 'a_commonjs_module'`, but only if `exports` had been assigned to directly, with constant names. Webpack assigns to exports more cryptically, and overrides `exports`... Even `exports = exports` breaks this feature... \r\n\r\nSo I made this: https:\/\/github.com\/alancnet\/exports-library-plugin\r\n\r\nIt's hacky, and maybe only works for me... Offering it up here as a potential solution to people in this thread, and hopefully to catch the attention of someone who would be compelled to implement this properly in Webpack..\r\n\r\nA better way to do this would be to have `{ library: { type: module } }` and have it simply assign exports to `exports` directly. But the code surrounding `library` is very restrictive, so I consider my approach very sloppy... but it didn't exist before, and now it does. \r\n\r\nCheers!","From what I gathered from this thread, to fully take advantage of ESM through webpack, you need the following settings.\r\n\r\n```js\r\nmodule.exports = {\r\n  experiments: {\r\n    outputModule: true,\r\n  },\r\n  output: {\r\n    library: {\r\n      \/\/ do not specify a `name` here\r\n      type: 'module',\r\n    },\r\n    libraryTarget: 'module',\r\n    module: true,\r\n  },\r\n};\r\n```\r\n\r\nDo we need both `output.libraryTarget` and `output.library.type`?\r\n\r\nReading https:\/\/webpack.js.org\/configuration\/output\/#librarytarget-module it doesn't appear to be that way? Although having one or the other or both yields a different output.\r\n\r\nSame with `output.module`.","You don't need `libraryTarget: 'module'`, `libraryTarget` is deprecated and maybe we will remove it in the next major release, also you don't need `library` if you bundle application, you need only `experiments.outputModule` and `output.module`","@vankop, @alexander-akait  I tested the new behaviour, and it seems to work. Thanks a lot for implementing it! However, I stumbled upon some minor problems when working with the new implementation. \r\n\r\nFirst, when I try to specify `lodash` as a [external](https:\/\/webpack.js.org\/configuration\/externals\/) dependency:\r\n\r\n```diff\r\nconst path = require('path');\r\n\r\nmodule.exports = {\r\n  entry: '.\/src\/index.js',\r\n  output: {\r\n    module: true,\r\n    path: path.resolve(__dirname, 'dist'),\r\n    filename: 'webpack-js-library.bundle.js',\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: \/\\.js$\/,\r\n        exclude: \/node_modules\/,\r\n        use: {\r\n          loader: 'babel-loader',\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  resolve: {\r\n    extensions: ['.js'],\r\n  },\r\n+  \/\/ NOTE: The code below does cause a error when uncommented.\r\n+ externalsType: 'module',\r\n+ externals: {\r\n+   lodash: 'lodash',\r\n+ },\r\n  experiments: {\r\n    outputModule: true,\r\n  },\r\n};\r\n```\r\n\r\nI get the following error:\r\n\r\n```bash\r\nERROR in .\/src\/index.js + 2 modules\r\nThe target environment doesn't support EcmaScriptModule syntax so it's not possible to use external type 'module'\r\nwhile analysing module external module \"lodash\" for concatenation\r\nError: The target environment doesn't support EcmaScriptModule syntax so it's not possible to use external type 'module'\r\nwhile analysing module external module \"lodash\" for concatenation\r\n    at ExternalModule._getSourceData (\/home\/ricks\/Development\/personal\/webpack-js-library\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/ExternalModule.js:580:12)\r\n    at ExternalModule.codeGeneration (\/home\/ricks\/Development\/personal\/webpack-js-library\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/ExternalModule.js:616:27)\r\n    at ConcatenatedModule._analyseModule (\/home\/ricks\/Development\/personal\/webpack-js-library\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/optimize\/ConcatenatedModule.js:1654:29)\r\n    at ConcatenatedModule.codeGeneration (\/home\/ricks\/Development\/personal\/webpack-js-library\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/optimize\/ConcatenatedModule.js:1100:9)\r\n    at \/home\/ricks\/Development\/personal\/webpack-js-library\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/Compilation.js:3281:22\r\n    at \/home\/ricks\/Development\/personal\/webpack-js-library\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/Cache.js:93:5\r\n    at Hook.eval [as callAsync] (eval at create (\/home\/ricks\/Development\/personal\/webpack-js-library\/node_modules\/.pnpm\/tapable@2.2.1\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:6:1)\r\n    at Cache.get (\/home\/ricks\/Development\/personal\/webpack-js-library\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/Cache.js:75:18)\r\n    at ItemCacheFacade.get (\/home\/ricks\/Development\/personal\/webpack-js-library\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/CacheFacade.js:118:15)\r\n    at Compilation._codeGenerationModule (\/home\/ricks\/Development\/personal\/webpack-js-library\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/Compilation.js:3274:9)\r\n```\r\n\r\nIs specifying external dependencies already supported when using the `outputModule` feature?\r\n\r\nSecond,  with the new behaviour, Webpack sees the `helloWorld.js` file as an orphan and does not include it in the bundle. This is related to how I import or export my functions and not the new implementation. However, I was wondering if somebody had a solution to this since I could not find a solution for this yet.\r\n \r\n### How to reproduce\r\n\r\n1. Clone [the example repository](https:\/\/github.com\/rickstaa\/webpack-js-library\/tree\/webpack-es6-externals-problem).\r\n2. Install [pnpm](https:\/\/pnpm.io\/).\r\n3. Install the [pnpm](https:\/\/pnpm.io) dependencies.\r\n4. Try to build the library using the `pnpm build` command.\r\n\r\n### What I already tried\r\n\r\nI tried adding the `\"type\": \"module\"` flag to the `package.json` file like is done in [this blog post](https:\/\/blog.logrocket.com\/transpile-es-modules-with-webpack-node-js\/). However, this does not solve this issue and requires me to specify file extensions for all the `.js` and `.jsx` files.","Sounds like your browsers target doesn't support ESM","@alexander-akait Thanks for your fast response. I was under the assumption that the [babel-parser](https:\/\/babeljs.io\/docs\/en\/babel-parser) also handled the import conversion for packages defined as externals. After some trial and error, I, however, found the right syntax to specify the [lodash](https:\/\/lodash.com\/) package as an external dependency:\r\n\r\n```json\r\nexternalsType: 'module',\r\nexternals: {\r\n    lodash: 'umd lodash',\r\n  },\r\n```\r\n\r\nI think the error is caused by the fact that [lodash](https:\/\/www.npmjs.com\/package\/lodash) does not use ES6 imports (see [this blog](https:\/\/til.hashrocket.com\/posts\/dnzttruljf-prefer-lodash-es-when-using-webpack#:~:text=The%20lodash%20package%20needs%20to,by%20default%20in%20webpack%20v4.&text=brings%20in%20the%20entire%20lodash%20file%2C%20all%2070K.&text=brings%20in%20just%20the%20join%20module%2C%20which%20is%20less%20than%201K). As a result I, should use the ES6 version of lodash (i.e. [lodash-es](https:\/\/www.npmjs.com\/package\/lodash-es)) if I want to omit the `umd` prefix. I, therefore, tried the following syntax:\r\n\r\n```json\r\nexternals: {\r\n    'lodash-es': 'lodash-es',\r\n}\r\n```\r\n\r\nHowever, I also get the error as mentioned earlier when doing this. This might be caused by the fact that `lodash-es` uses named imports. Using the `'lodash-es': 'umd lodash-es` syntax again seems to work (see [this example repo](https:\/\/github.com\/rickstaa\/webpack-js-library\/tree\/webpack-es6-externals-problem2)). I'm, however, not sure why I need to specify `lodash-es` as a `umd` module since it exports ES6 modules. \r\n\r\nI checked the [webpack documentation](https:\/\/webpack.js.org) (i.e. [guides#ecma-script-modules](https:\/\/webpack.js.org\/guides\/ecma-script-modules\/), [guides#experimentsoutputmodule](https:\/\/webpack.js.org\/configuration\/experiments\/#experimentsoutputmodule), [guides#author-libraries](https:\/\/webpack.js.org\/guides\/author-libraries\/) and [configuration#output](https:\/\/webpack.js.org\/configuration\/output\/)) but I can not find a good guide on how to create an ESM library with Webpack. I'm looking for something like the [https:\/\/webpack.js.org\/guides\/author-libraries\/](https:\/\/webpack.js.org\/guides\/author-libraries\/) guide but then translated to the new ES6 syntax. As I think my problems are not related to a bug in the new implementation, I will create a [discussion question](https:\/\/github.com\/webpack\/webpack\/discussions) instead.","Can you create simple reproducible example and I will show you how to fix it or we open an issue if it will be not broken, unfortunately I receive a lot of questions every day and it is much easier for me to help if I see an example of what they want to get and what they actually get, thanks ","@alexander-akait Thanks a lot for trying to help me. I cleaned up my reproducible example so that it only contains the required code (see [webpack5-esm-library-example](https:\/\/github.com\/rickstaa\/webpack5-esm-library-example)).\r\n\r\nWhat I'm trying to achieve is quite basic. Since I am a big fan of Webpack and Webpack now (experimentally) supports ESM modules, I want to convert an ESM library that uses rollup to Webpack. While doing so, I, however, run into some problems. The first problem I'm facing is that I can not find a way to make the library available to others. The second problem is that I can not find the right syntax to exclude external (i.e. optional) packages from the bundle. I checked the documentation about [externals](https:\/\/webpack.js.org\/configuration\/externals\/), but I have a hard time understanding how to apply it to an ESM library.\r\n\r\n## Make the library available to be consumed by others\r\n\r\nIn accordance with [the documentation](https:\/\/webpack.js.org\/configuration\/output\/#outputmodule) I set the [output.library.type](https:\/\/webpack.js.org\/configuration\/output\/#outputmodule) to \"module\". When I try to use the bundle inside my package, it seems to work fine (i.e. `node local_importer.js`); however, when I try to use it in the CRA `demo` project, I receive the following error in the chrome console:\r\n\r\n<details>\r\n<summary>Show error<\/summary>\r\n\r\n```console\r\nUncaught TypeError: Cannot set properties of undefined (setting 'runtime')\r\n    at Module...\/dist\/main.mjs (bundle.js:43152)\r\n    at Module.options.factory (bundle.js:44035)\r\n    at __webpack_require__ (bundle.js:43443)\r\n    at fn (bundle.js:43706)\r\n    at Module..\/src\/App.js (bundle.js:68)\r\n    at Module.options.factory (bundle.js:44035)\r\n    at __webpack_require__ (bundle.js:43443)\r\n    at fn (bundle.js:43706)\r\n    at Module..\/src\/index.js (bundle.js:179)\r\n    at Module.options.factory (bundle.js:44035)\r\n```\r\n\r\n<\/details>\r\n\r\nI import the `HelloWorld` function from the `webpack5-esm-library-example` module inside the `App.js` component.\r\n\r\n## Exclude lodash from the bundle\r\n\r\nLet's use [lodash](https:\/\/lodash.com\/) library as an example library we want to specify as a Webpack external.  The example can be found on the [webpack5-esm-library-example\/tree\/externals](https:\/\/github.com\/rickstaa\/webpack5-esm-library-example\/tree\/externals) branch. I tried to do this for both [lodash](https:\/\/lodash.com\/) and [lodash-es](https:\/\/www.npmjs.com\/package\/lodash-es), but I got two types of errors. The first error is thrown when I use the following syntax in my `webpack.config.js` file:\r\n\r\n```json\r\nexternalsType: \"module\",\r\n  externals: {\r\n    lodash: \"lodash\", \/\/ NOTE: Throws `The target environment doesn't support EcmaScriptModule syntax` during build.\r\n    \/\/ lodash: {\r\n    \/\/   commonjs: \"lodash\",\r\n    \/\/   amd: \"lodash\",\r\n    \/\/   root: \"_\", \/\/ indicates global variable\r\n    \/\/ }, \/\/ NOTE: Throws `The target environment doesn't support EcmaScriptModule syntax` during build.\r\n}\r\n```\r\n\r\nIn this case I get the following build error:\r\n\r\n<details>\r\n<summary>Show error<\/summary>\r\n\r\n```bash\r\nERROR in external \"lodash\"\r\nThe target environment doesn't support EcmaScriptModule syntax so it's not possible to use external type 'module'\r\nError: The target environment doesn't support EcmaScriptModule syntax so it's not possible to use external type 'module'\r\n    at ExternalModule._getSourceData (\/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/ExternalModule.js:580:12)\r\n    at ExternalModule.codeGeneration (\/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/ExternalModule.js:616:27)\r\n    at \/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/Compilation.js:3281:22\r\n    at \/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/Cache.js:91:34\r\n    at Array.<anonymous> (\/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/cache\/MemoryCachePlugin.js:45:13)\r\n    at \/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/Cache.js:91:19\r\n    at Hook.eval [as callAsync] (eval at create (\/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/node_modules\/.pnpm\/tapable@2.2.1\/node_modules\/tapable\/lib\/HookCodeFactory.js:33:10), <anonymous>:19:1)\r\n    at Cache.get (\/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/Cache.js:75:18)\r\n    at ItemCacheFacade.get (\/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/CacheFacade.js:118:15)\r\n    at Compilation._codeGenerationModule (\/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/node_modules\/.pnpm\/webpack@5.65.0_webpack-cli@4.9.1\/node_modules\/webpack\/lib\/Compilation.js:3274:9)\r\n @ .\/src\/ldCapitalize.js 1:0-23 3:9-21\r\n @ .\/src\/index.js 3:0-49 3:0-49\r\n```\r\n\r\n<\/details>\r\n\r\nThis error goes away if I use the following syntax in my `webpack.config.js` file:\r\n\r\n```json\r\n  externalsType: \"module\",\r\n  externals: {\r\n    lodash: \"umd lodash\", \/\/ NOTE: Builds but throws `ReferenceError: __WEBPACK_EXTERNAL_MODULE_lodash__ is not defined` during run.\r\n  }\r\n```\r\n\r\nIn this case, the bundle builds, but I now get an error when I try to consume the library in my package (i.e. `node local_importer.js`):\r\n\r\n\r\n<details>\r\n<summary>Show error<\/summary>\r\n\r\n```bash\r\nfile:\/\/\/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/dist\/main.mjs:17\r\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_lodash__;\r\n                 ^\r\n\r\nReferenceError: __WEBPACK_EXTERNAL_MODULE_lodash__ is not defined\r\n    at Object.lodash (file:\/\/\/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/dist\/main.mjs:17:18)\r\n    at __webpack_require__ (file:\/\/\/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/dist\/main.mjs:81:40)\r\n    at eval (webpack:\/\/webpack5-library-example\/.\/src\/ldCapitalize.js?:6:64)\r\n    at Object..\/src\/ldCapitalize.js (file:\/\/\/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/dist\/main.mjs:47:1)\r\n    at __webpack_require__ (file:\/\/\/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/dist\/main.mjs:81:40)\r\n    at eval (webpack:\/\/webpack5-library-example\/.\/src\/index.js?:9:74)\r\n    at Object..\/src\/index.js (file:\/\/\/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/dist\/main.mjs:37:1)\r\n    at __webpack_require__ (file:\/\/\/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/dist\/main.mjs:81:40)\r\n    at file:\/\/\/home\/ricks\/Development\/personal\/webpack5-esm-library-example\/dist\/main.mjs:121:36\r\n    at ModuleJob.run (node:internal\/modules\/esm\/module_job:185:25)\r\n```\r\n\r\n<\/details>","> The first problem I'm facing is that I can not find a way to make the library available to others.\r\n\r\nAs I understand you want to rewrite module system and output ESM and keep file structure of a library, it is still on our roadmap and unsupported yet, but anyway you can generate ESM code for library and you have valid code.\r\n\r\n> The second problem is that I can not find the right syntax to exclude external (i.e. optional) packages from the bundle.\r\n\r\nIn this case we should use `import ... from ...` to load externals, but your target is not supporting it (no browserslist file found and no target was specified, so we use `target: 'web'`, no information about ESM), it can be misleading, but you need specify `es*` because we don't know which syntax allowed for generated code\r\n\r\nYou can fix it using:\r\n```\r\n\/\/ Dynamic import is a part of ES 2020\r\ntarget: ['web', 'es2020']\r\n```\r\n\r\nEven more, you don't need `externalsType`, it will be `module` by default, if you set `library.type: \"module\"`\r\n\r\n> however, when I try to use it in the CRA demo project, I receive the following error in the chrome console:\r\n\r\nWhat is CRA version? They released webpack v5 support recently, just want to check it out. Also I strongly recommend do not bundle libraries itself, It just doesn't make sense, Node.js supports ESM, most of applications (for browsers) use bundler, therefore, they will decide for themselves whether they need to convert to ESM or not. Bundling libraries is not good idea at the current time (Yes it may still be needed if you want to continue supporting commonjs\/umd if you have ESM code or versa vice). Also bundling libraries reduces their potential optimizations. Just write ESM. \r\n\r\n`externalsType: \"module\"` and `umd lodash` is bad idea, you say - load it as umd using ESM, yes, it will not work, maybe we should handle this case and output an error\r\n\r\nAnyway bundled library still should to work in CRA, do you have something special in CRA and how you load you library. And why you need bundle library?","@alexander-akait, thanks again for the fast response. I just noticed that the demo submodule was not included in example I now (force) updated [the example repo](https:\/\/github.com\/rickstaa\/webpack5-esm-library-example). \r\n\r\n> As I understand, you want to rewrite the module system and output ESM and keep the file structure of a library, ...\r\n\r\nMy main goal is to use the [react-piano](https:\/\/github.com\/kevinsqi\/react-piano) library, which is built with [Rollupjs](https:\/\/rollupjs.org\/guide\/en\/) react library, in a CRA v5 app. This library is not defined as an ESM module (i.e. no `\"type\": \"module\"` in the `package.json`) but does use the ESM import syntax. It uses [babel](https:\/\/babeljs.io\/docs\/en\/babel-parser) to convert this syntax to `\"targets\": { \"node\": \"6\", \"browsers\": [\">0.25%\"] }`. It uses [Rollupjs](https:\/\/rollupjs.org\/guide\/en\/) to make this library available both in `umd` and `es` format. \r\n\r\nI forked this library since I want to replace the class-based components with functional components and convert them to typescript. I choose first to replace rollup with Webpack since I am more familiar with Webpack. I, however, have no preference for how to export this library. I want to be able to use `jsx` and `sass` syntax in the library while using it in a CRA v5 app. Ideally, like the original library, it should also be available for node and  `>0.25%`.\r\n\r\n> Also I strongly recommend do not bundle libraries itself, It just doesn't make sense, Node.js supports ESM, most of applications (for browsers) use bundler, therefore, they will decide for themselves whether they need to convert to ESM or not.\r\n\r\nWhat setup and output format would you advise for my library? Should I remove Webpack and write a pure ESM library. In that case, I think I have to use [babel](https:\/\/babeljs.io\/docs\/en\/babel-parser) to do the `jsx` conversion and [sass](https:\/\/sass-lang.com\/documentation\/js-api) for the `scss` to `css` conversion?\r\n\r\n> Anyway bundled library still should to work in CRA, do you have something special in CRA and how you load you library. And why you need bundle library?\r\n\r\nI'm using [CRA v5](https:\/\/github.com\/facebook\/create-react-app\/releases\/tag\/v5.0.0) released seven days ago. Adding the `'es2020'` target fixed my errors when trying to est the `lodash-es` ESM module as an external. Thanks a lot! The only problem I'm still experiencing is that I get a runtime error into the chrome console when I try to use it in the CRA v5 `demo` project.","@alexander-akait I did some more research and found [this GIST](https:\/\/gist.github.com\/sindresorhus\/a39789f98801d908bbc7ff3ecc99d99c) about pure ESM modules that cleared up a lot of the misunderstandings I have. I think I now understand what you meant with your previous comment. \r\n\r\n> Also, I strongly recommend do not bundle libraries itself, It just doesn't make sense, Node.js supports ESM, most applications (for browsers) use bundler; therefore, they will decide for themselves whether they need to convert to ESM or not.\r\n\r\nWith ESM modules, a bundler is not trivial anymore. We can easily create an ESM library without a bundler (see [webpack5-esm-library-example\/tree\/no-webpack](https:\/\/github.com\/rickstaa\/webpack5-esm-library-example\/tree\/no-webpack). This module will work with most browsers and all non-deprecated Node versions. \r\n\r\nWe, therefore, do not need Webpack to create ESM libraries. We, however, can use Webpack for creating an ESM library if we want to use features that are not natively supported in ES2015 (e.g. style sheet injection and `JSX`). If we want to do this, we have to:\r\n\r\n-   Convert your `webpack.config.js` to an ESM module.\r\n-   Enable the [experiments.outputModule](https:\/\/webpack.js.org\/configuration\/experiments\/#experimentsoutputmodule) option to ensure Webpack outputs ECMASCript module syntax when possible.\r\n-   Enable [output.module](https:\/\/webpack.js.org\/configuration\/output\/#outputmodule) to ensure that javascript files are outputted as ESM modules.\r\n-   If you want your library to be consumed by others, make sure to set the [output.library.type](https:\/\/webpack.js.org\/configuration\/output\/#outputlibrarytype) flag to `module`.\r\n-   Point the `package.json` `exports` property to your outputted bundle.\r\nIf you want your ESM library to work with a CRA app, you must also specify the `\"browser\": \".\/build\/index.js\",` entry in your `package.json`. One known issue is [#10933](https:\/\/github.com\/facebook\/create-react-app\/issues\/10933).\r\n\r\nAn example can be found in [rickstaa\/webpack5-esm-library-example\/tree\/webpack-react-css](https:\/\/github.com\/rickstaa\/webpack5-esm-library-example\/tree\/webpack-react-css). When we choose this method, we have to make sure that we add external third-party libraries to the `externals` field of the Webpack config.\r\n\r\n> Anyway bundled library still should to work in CRA, do you have something special in CRA and how you load you library. And why you need bundle library?\r\n\r\nI found the cause of my bundle not working with the CRA. It was because I used Webpack in development mode. The ESM library works fine in production mode (i.e. `npm run build`) but in development mode (i.e. `npm run build:dev`), I get the following error:\r\n\r\n<details>\r\n<summary>Show error<\/summary>\r\n\r\n```console\r\nReactRefreshEntry.js:23 Uncaught TypeError: Cannot set properties of undefined (setting 'runtime')\r\n    at Module...\/dist\/webpack5-esm-library-example.bundle.mjs (ReactRefreshEntry.js:23)\r\n    at Module.options.factory (react refresh:6)\r\n    at __webpack_require__ (bootstrap:24)\r\n    at fn (hot module replacement:61)\r\n    at Module..\/src\/App.js (logo.svg:34)\r\n    at Module.options.factory (react refresh:6)\r\n    at __webpack_require__ (bootstrap:24)\r\n    at fn (hot module replacement:61)\r\n    at Module..\/src\/index.js (App.js:30)\r\n    at Module.options.factory (react refresh:6)\r\n..\/dist\/webpack5-esm-library-example.bundle.mjs @ ReactRefreshEntry.js:23\r\noptions.factory @ react refresh:6\r\n__webpack_require__ @ bootstrap:24\r\nfn @ hot module replacement:61\r\n.\/src\/App.js @ logo.svg:34\r\noptions.factory @ react refresh:6\r\n__webpack_require__ @ bootstrap:24\r\nfn @ hot module replacement:61\r\n.\/src\/index.js @ App.js:30\r\noptions.factory @ react refresh:6\r\n__webpack_require__ @ bootstrap:24\r\n(anonymous) @ startup:7\r\n(anonymous) @ startup:7\r\n```\r\n\r\n<\/details>\r\n\r\nThis error can be reproduced using [rickstaa\/webpack5-esm-library-example\/tree\/webpack-react](https:\/\/github.com\/rickstaa\/webpack5-esm-library-example\/tree\/webpack-react). I'm not sure if this is a bug in Webpack or a problem with my setup. I will try to investigate why this happens.\r\n","Thanks, I will look at this in near future","Amazing. No hurries, thanks again for looking at my problem! Can I ask you one last quick question:\r\n\r\n> You can fix it using:\r\n> \r\n>     \/\/ Dynamic import is a part of ES 2020\r\n>     target: ['web', 'es2020']\r\n\r\nWhy did you specify both `web` and `es2020`? Shouldn't specifying `es2015` be enough since most modern browsers support this version? Which target would you recommend bundling an ESM library with Webpack for use in CRA v5 apps?","`ES2020` is version of ECMA (i.e. JavaScript) language, `web` is browser and it is a platform, for example you use `node`\/`electron`\/'webworker'\/etc, you even mix them, but note - not all combinations supported. What is better? Depends on which browsers you want to support. You can use browserslist config file for this, it will be more predictable.","Ah, thanks a lot! I understand it now. I was under the impression that when you specified `es2015`, it would apply to all platforms, but this makes more sense since some combinations might not yet be supported.","@alexander-akait Here is some extra information I found today while debugging the above problem. \r\n\r\n- The issue looks related to #11277, but should have been fixed when [create-react-app@5.0.0](https:\/\/github.com\/facebook\/create-react-app\/releases\/tag\/v5.0.0) was released. In my setup contrary to your comment in https:\/\/github.com\/webpack\/webpack\/issues\/11277#issuecomment-991714971, Webpack version used is [v5.65.0](https:\/\/github.com\/webpack\/webpack\/releases\/tag\/v5.65.0) both in the library and the app (see https:\/\/github.com\/rickstaa\/webpack5-esm-library-example\/tree\/webpack-react-jsx-transform-ejected).\r\n- The issue seems to be thrown while executing the `ReactRefreshEntry.js` script of the `react-refresh-webpack-plugin` and might be related to https:\/\/github.com\/pmmmwh\/react-refresh-webpack-plugin\/issues\/328. \r\n- I also noticed that the problem only exists when I compile the library in `development` mode while using the `npm start` command for the CRA app that consumes the library. The issue disappears when I use `npm build` command for the CRA app.\r\n- **EDIT:** The issue also appears when using typescript (see https:\/\/github.com\/rickstaa\/webpack5-esm-library-example\/tree\/webpack-react-ts).\r\n- **EDIT:** The issue also appears when using the webpack dev server (see https:\/\/github.com\/rickstaa\/webpack5-esm-library-example\/tree\/webpack-react-dev-server)\r\n\r\nIt, therefore, looks like the issue is because two runtimes are present in my setup, one from the library and one from the CRA that consumes the library.  I am not sure if this problem is caused by my setup, Webpack, CRA or Babel.\r\n\r\nI use this setup (i.e. Babel -> Webpack -> CRA app) since I want to create an ESM React Component library. I need Babel for the JSX transpilation, and Babel is very easy to set up when using Webpack. I will replace Babel with [ts-loader](https:\/\/webpack.js.org\/guides\/typescript\/) in the future. I use the development mode to debug my library while using hot module replacement.\r\n\r\nI just wanted to put this here might you have time to look at this problem in the future. For now, happy holidays! \ud83c\udf84 \r\n","```jsx\r\nmodule.exports = {\r\n  experiments: {\r\n    outputModule: true,\r\n  },\r\n  output: {\r\n    module: true,\r\n  },\r\n};\r\n```\r\n\r\nSo this is what I've been using now, however it only works with...\r\n\r\n```\r\n{\r\n  output: {\r\n    chunkLoading: false\r\n  }\r\n}\r\n```\r\n\r\nor else you'll get...\r\n\r\n```\r\nERROR in webpack\/runtime\/import chunk loading\r\nCannot read properties of undefined (reading 'getChunkConditionMap')\r\n\r\nERROR in webpack\/runtime\/import chunk loading\r\nCannot read properties of undefined (reading 'getChunkConditionMap')\r\n\r\nERROR in webpack\/runtime\/import chunk loading\r\nCannot read properties of undefined (reading 'getChunkConditionMap')\r\n```\r\n\r\nSo for ESM to work for me this is my config.\r\n\r\n\r\n```\r\nmodule.exports = {\r\n  experiments: {\r\n    outputModule: true,\r\n  },\r\n  output: {\r\n    chunkLoading: false,\r\n    module: true,\r\n  },\r\n  plugin: [\r\n    new HtmlWebpackPlugin({\r\n      scriptLoading: 'module',\r\n    })\r\n  ]\r\n};\r\n```\r\n\r\nI am having a hard time enabling chunks or getting chunks to work.\r\n\r\nFound a similar issue.\r\n\r\nhttps:\/\/github.com\/webpack\/webpack\/issues\/15172","@rodoabad Yep, bug, we need to fix it","Thanks, @alexander-akait!","@rodoabad Can you show `browserslist` content, I think there is problem - environment is not supported ESM, we just need to improve error message here, just want to check","@alexander-akait our browserslist is very aggressive.\r\n\r\n```js\r\nmodule.exports = [\r\n    'last 2 Chrome versions',\r\n    'last 2 Edge versions',\r\n    'last 2 Firefox versions'\r\n];\r\n```","Give me time I will check it :+1: ","@alexander-akait no worries man! You do this on your free time. By all means take your time.","@rodoabad strange, I can't reproduce it using fresh setup, do you have more configuration, also can you run `npm ls webpack`?","I was also unable to reproduce it...\r\n\r\nsince it say `import chunk loading` it uses `import()` for chunk loading, so browser support for that is detected.\r\n`getChunkConditionMap` is a method on the ChunkGraph, so that should definitely exist...","Yep, me too, maybe non official plugin","After going through all aspects, here is my configuration\uff0c\r\n```\r\nmodule.exports = {\r\n  target: [\r\n    'web',\r\n    'es2020'\r\n  ],\r\n  output: {\r\n    path: '.\/dist',\r\n    filename: 'index.esm.js',\r\n    library: {\r\n      type: 'module'\r\n    }\r\n  },\r\n  experiments: {\r\n    outputModule: true\r\n  },\r\n  externalsType: 'module',\r\n  externals: {\r\n    vue: {\r\n      commonjs: 'vue',\r\n      commonjs2: 'vue',\r\n      amd: 'vue',\r\n      root: 'Vue',\r\n      module: 'vue'\r\n    },\r\n    react: {\r\n      commonjs: 'react',\r\n      commonjs2: 'react',\r\n      amd: 'react',\r\n      root: 'React',\r\n      module: 'react'\r\n    },\r\n    'react-dom': {\r\n      commonjs: 'react-dom',\r\n      commonjs2: 'react-dom',\r\n      amd: 'react-dom',\r\n      root: 'ReactDOM',\r\n      module: 'react-dom'\r\n    }\r\n  },\r\n}\r\n```\r\n","@maskletter Do you have the same problem?","> @maskletter Do you have the same problem?\r\n\r\nI haven't done a lot of tests yet. I'm just trying. I haven't reported any errors at present","I've reproduce this issue\r\nMinimal reproductible repo is available here [https:\/\/github.com\/daividh\/webpack-issue](https:\/\/github.com\/daividh\/webpack-issue)","Just made a test with module libraryTarget.\r\n\r\nIt don't seems to work in combination with `dependOn`.\r\n\r\nThis leads to such an error:\r\n\r\n```\r\nERROR in main.js\r\nmain.js from Terser plugin\r\n\"Export\" statement may only appear at the top level [main.js:57,9]\r\n```\r\n\r\nConfig\r\n\r\n```\r\n    entry: {\r\n      'lib\/shared\/shared': {\r\n        import: 'lit'\r\n      },\r\n      main: {\r\n        import: '.\/src\/main.js',\r\n        dependOn: 'lib\/shared\/shared'\r\n      }\r\n    },\r\n\r\n    output: {\r\n      path: path.resolve(__dirname, \"dist\"),\r\n      filename: '[name].js',\r\n      library: {\r\n        type: \"module\",\r\n      },\r\n    },\r\n    experiments: {\r\n      outputModule: true,\r\n    },\r\n```","@msteller-connyun can you provide reproducible repo?","> @msteller-connyun can you provide reproducible repo?\r\n\r\nnot yet, I try do it tomorrow. I'm now off work :)","> \r\n\r\nhere's the link to a demo repo of the issue:\r\n\r\nhttps:\/\/github.com\/msteller-connyun\/issue-webpack5-module-dependOn\r\n\r\nIf you remove `dependOn: 'lib\/shared\/shared'`, it will work.","@alexander-akait You asked me if I could reproduce the error. I finally figured out why I keep having the `meta` error.\r\n\r\nIt was because in my HTML Webpack Plugin, it was defaulting to `defer` instead of `module`.\r\n\r\nFor anyone reading this that's using the HTML Webpack Plugin, make sure to update that as well.\r\n\r\nIt was a pretty big oversight for that, I thought it would automatically switch if `module: true` was set.\r\n\r\nI believe everything is working now and we'll try and publish one of our internal apps for this to see how things fare.\r\n\r\nHere is my super plain setup now.\r\n\r\n```js\r\n    output: {\r\n      module: true,\r\n    },\r\n    experiments: {\r\n      outputModule: true,\r\n    },\r\n```","Update, when I do have this setup. I get this error.\r\n\r\n```\r\nPath variable [chunkhash] not implemented in this context: [name].[chunkhash].js\r\n```\r\nI had to use `fullhash` instead.\r\n\r\n```js\r\n\/\/ base.config.js\r\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\r\nconst ReactRefreshWebpackPlugin = require('@pmmmwh\/react-refresh-webpack-plugin');\r\nconst rules = require('.\/rules');\r\n\r\nconst isDevelopment = process.env.NODE_ENV !== 'production';\r\n\r\nmodule.exports = {\r\n    \/\/ cache: {\r\n    \/\/     type: 'filesystem'\r\n    \/\/ },\r\n    experiments: {\r\n        outputModule: true\r\n    },\r\n    module: {\r\n        rules\r\n    },\r\n    output: {\r\n        clean: true,\r\n        filename: isDevelopment ? '[name].js' : '[name].[chunkhash].js',\r\n        module: true\r\n    },\r\n    plugins: [\r\n        new MiniCssExtractPlugin({\r\n            filename: isDevelopment ? '[name].css' : '[name].[chunkhash].css'\r\n        }),\r\n        ...[isDevelopment && new ReactRefreshWebpackPlugin()].filter(Boolean)\r\n    ],\r\n    resolve: {\r\n        extensions: ['.js', '.ts', '.tsx', '.json']\r\n    },\r\n    stats: {\r\n        colors: true\r\n    }\r\n};\r\n```\r\n\r\n```js\r\n\/\/ rules.js\r\nconst {loader: miniCssExtractLoader} = require('mini-css-extract-plugin');\r\nconst autoprefixer = require('autoprefixer');\r\n\r\nconst isDevelopment = process.env.NODE_ENV !== 'production';\r\n\r\nmodule.exports = [\r\n    {\r\n        test: \/\\.(png|svg|jpg|jpeg|gif|woff|woff2|eot|ttf|otf)$\/i,\r\n        type: 'asset'\r\n    },\r\n    {\r\n        exclude: \/node_modules\/,\r\n        test: \/\\.(js|jsx|ts|tsx)$\/i,\r\n        use: [\r\n            {\r\n                loader: require.resolve('babel-loader'),\r\n                options: {\r\n                    plugins: [isDevelopment && require.resolve('react-refresh\/babel')].filter(Boolean)\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        test: \/\\.(sa|sc|c)ss$\/i,\r\n        use: [\r\n            miniCssExtractLoader,\r\n            {\r\n                loader: require.resolve('css-loader'),\r\n                options: {\r\n                    importLoaders: 2,\r\n                    modules: {\r\n                        auto: true,\r\n                        localIdentName: isDevelopment ? '[path][name]__[local]' : '[hash:base64]'\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                loader: require.resolve('postcss-loader'),\r\n                options: {\r\n                    postcssOptions: {\r\n                        plugins: [\r\n                            autoprefixer()\r\n                        ]\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                loader: require.resolve('sass-loader'),\r\n                options: {\r\n                    sassOptions: {\r\n                        quietDeps: true\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n];\r\n```\r\n\r\n```js\r\n\/\/ build.config.js\r\n\r\nconst baseConfig = require('.\/base');\r\nconst {merge} = require('webpack-merge');\r\nconst path = require('path');\r\nconst TerserWebpackPlugin = require('terser-webpack-plugin');\r\nconst CssMinimizerWebpackPlugin = require('css-minimizer-webpack-plugin');\r\n\r\nconst buildConfig = {\r\n    mode: 'production',\r\n    devtool: 'source-map',\r\n    entry: '.\/src\/index.js',\r\n    output: {\r\n        path: path.join(process.cwd(), 'dist')\r\n    },\r\n    optimization: {\r\n        minimize: true,\r\n        minimizer: [\r\n            new CssMinimizerWebpackPlugin(),\r\n            new TerserWebpackPlugin({\r\n                minify: TerserWebpackPlugin.esbuildMinify\r\n            })\r\n        ],\r\n        runtimeChunk: true,\r\n        splitChunks: {\r\n            chunks: 'all',\r\n            minSize: 10000,\r\n            maxSize: 250000\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = merge(baseConfig, buildConfig);\r\n```","@rodoabad \r\n\r\n> It was a pretty big oversight for that, I thought it would automatically switch if module: true was set.\r\n\r\nHm, I think it should work as you written, feel free to open an issue\r\n\r\n> v\r\n\r\nJust interesting why not `contenthash`?","I ran into an issue today where `runtimeChunk: single` led to the following code being generated:\r\n\r\n```js\r\n(__webpack_require__) => {\r\n  var __webpack_exec__ = (moduleId) =>\r\n    __webpack_require__((__webpack_require__.s = moduleId));\r\n  var __webpack_exports__ = __webpack_exec__(5930);\r\n  var __webpack_exports__Color = __webpack_exports__.Il;\r\n  var __webpack_exports__ConfigTypes = __webpack_exports__.yQ;\r\n  var __webpack_exports__DesignBlockType = __webpack_exports__.Ju;\r\n  var __webpack_exports__MimeType = __webpack_exports__.HY;\r\n  var __webpack_exports__Role = __webpack_exports__.uU;\r\n  var __webpack_exports__default = __webpack_exports__.ZP;\r\n  export {\r\n    __webpack_exports__Color as Color,\r\n    __webpack_exports__ConfigTypes as ConfigTypes,\r\n    __webpack_exports__DesignBlockType as DesignBlockType,\r\n    __webpack_exports__MimeType as MimeType,\r\n    __webpack_exports__Role as Role,\r\n    __webpack_exports__default as default,\r\n  };\r\n};\r\n```\r\nwith Terser rightfully complaining that the `export` statement can only appear at the toplevel.\r\nThis error was not occurring with `devTool: 'eval'`, and manifested only in the production build.\r\nI can provide further details if that helps.","@janv Looks like bug, can you provide example? Thanks","@alexander-akait I managed to create a minimal example: https:\/\/github.com\/janv\/webpack-esm-runtimechunk-error","@janv adding these configuration should help:\r\n\r\n``` js\r\n  output: {\r\n    chunkLoading: 'import',\r\n    chunkFormat: 'module',\r\n  },\r\n```\r\n\r\nAlternatively that would help `target: 'node12.17'`\r\n\r\nSeems like we are detecting an environment that doesn't support `import()`, so we are not choosing ESM as chunk loading\/chunk format, but only ESM chunk format correctly supports `library: { type: \"module\" }` with runtime chunk.\r\n\r\nI guess we probably should automatically choose `chunkFormat: 'module'` when using `library: { type: \"module\" }`.","Thank you very much! This helped indeed to solve that particular problem.\r\n\r\nHowever, it uncovered another issue: In our particular project, we have entry chunks that depend on each other.\r\nThis leads to a situation, where webpack generates code that contains two `export default`s!\r\n\r\nIt seems that being depended on causes a chunk to export its runtime, but the runtime is exported as the default export.\r\n\r\nThis also strikes me as something that should not be happening. A possible solution might be to always export `__webpack_require__` as a named export, not as a default export.\r\n\r\nI have again recreated a minimal example here (same repo, different branch): https:\/\/github.com\/janv\/webpack-esm-runtimechunk-error\/tree\/duplicate-export-default","> janv\r\nI would like to ask how to use the generated chunk file\uff0cwhen i import the chunk in another project, an error occurred\r\n","Looks like import assertions are being stripped out from external modules. These are needed to import JSON files under nodejs v18.x.\r\n\r\n```js\r\nimport tlds from \"tlds\" assert { type: \"json\" };\r\n```\r\n\r\nBecomes:\r\n```js\r\nimport * as __WEBPACK_EXTERNAL_MODULE_tlds__ from \"tlds\";\r\n```\r\n\r\nTo be honest I didn't troubleshoot this too much. I'm running Webpack v5.73.0 with a pretty in depth configuration that I'm migrating to module output. It's possible babel or someone else is stripping them before it gets to Webpack but I thought I would raise it here. I can work around it by bundling the small handful of JSON files.","@laverdet sounds like a critical bug, can you open an issue?","I have followed the documentation, read through much of this issue, tried several of the solutions others have seen work but I still cannot get a library built with Webpack to be tree-shakable.\r\n\r\nCurrently this is all there is to that library configuration (also has `sideEffects: false` in the package.json):\r\n\r\n```\r\nimport path from 'path';\r\nimport { fileURLToPath } from 'url';\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\nexport default {\r\n\tentry: path.resolve(__dirname, '.\/src\/index.js'),\r\n\tmode: 'production',\r\n\tmodule: {\r\n\t\trules: [\r\n\t\t\t{\r\n\t\t\t\tinclude: path.resolve(__dirname, '.\/src'),\r\n\t\t\t\ttest: \/\\.(js|ts|tsx)$\/,\r\n\t\t\t\tuse: ['babel-loader'],\r\n\t\t\t},\r\n\t\t],\r\n\t},\r\n\toptimization: {\r\n\t\tminimize: false,\r\n\t\tmangleExports: false,\r\n\t},\r\n\toutput: {\r\n\t\tfilename: 'index.js',\r\n\t\tpath: path.resolve(__dirname, '.\/dist'),\r\n\t\tlibrary: {\r\n\t\t\ttype: 'module',\r\n\t\t},\r\n\t\tchunkFormat: 'module',\r\n\t\tmodule: true,\r\n\t},\r\n\tresolve: {\r\n\t\textensions: ['.tsx', '.ts', '.js', '.jsx'],\r\n\t},\r\n\texperiments: {\r\n\t\toutputModule: true,\r\n\t},\r\n\tdevtool: false,\r\n\ttarget: ['web', 'es2020'],\r\n};\r\n```\r\n\r\nI've set up [a repository](https:\/\/github.com\/WalterWeidner\/tree-shake) with a both a Webpack app and a Vite app that consume test libraries built by most of the modern JS build tools (Babel, ESBuild, Vite, Webpack) and the Webpack app correctly treeshakes the exports from all of the libraries except for the one also built with Webpack. We see the same when importing the library built with Webpack into a Vite app.\r\n\r\nI feel like I may be missing something obvious here but can't seem to get it to work with Webpack.\r\n\r\nNote: Babel is configured to output ESM.\r\n```\r\nexport default {\r\n\tpresets: [['@babel\/preset-env', { modules: false }]],\r\n};\r\n```","@WalterWeidner Why you need webpack to build ESM library? I think better to keep source code in ESM in nowdays","> @WalterWeidner Why you need webpack to build ESM library? I think better to keep source code in ESM in nowdays\r\n\r\nIn this case the main reason is to limit the API surface area. This way we don't have to worry as much about breaking applications because we simply re-arranged code or because someone was using an implementation detail when they shouldn't be (this library is only used internally).","> @WalterWeidner Why you need webpack to build ESM library? I think better to keep source code in ESM in nowdays\r\n\r\nThere may be many reasons someone needs to build their source code to deliver their ESM library. Off the top of my head could be to deliver to JS code for Vue\/React\/Angular\/etc components, compiled typescript, bundling\/externalizing particular dependencies, and reducing potential conflicts with various configs. Compiling typescript with `tsc` might suffice for simple TS modules, but it gets more complicated with delivering a framework specific component library from Vue SFCs, React JSX, or Angular component files.","> @WalterWeidner Why you need webpack to build ESM library? I think better to keep source code in ESM in nowdays\r\n\r\nLibraries with source code in TypeScript need a build pipeline and simple `tsc` doesn't work for [many use cases listed here][1]. Besides, it'd be nice to be able to leverage the webpack ecosystem for plugins like ImageMinimizer while still delivering an ESM library the users can tree-shake.\r\n\r\nAchieving any of these use-cases isn't impossible today but would get a lot easier with webpack.\r\n\r\n[1]: https:\/\/github.com\/microsoft\/TypeScript\/issues\/30835","> @WalterWeidner Why you need webpack to build ESM library? I think better to keep source code in ESM in nowadays\r\n\r\nThere is some consensus that consuming a library made of a single \"Flat ESM\" module (FESM) is more performant for downstream tools than consuming a library made up of tons of small ESM modules.\r\n\r\nAngular strongly advocates using FESM, shipping all their packages with ESM bundles as a primary format and also [advising developers to do the same for their libraries](https:\/\/angular.io\/guide\/angular-package-format#flattening-of-es-modules). Of course, the tooling used today requires additional post-processing via Rollup.","> @WalterWeidner Why you need webpack to build ESM library? I think better to keep source code in ESM in nowdays\r\n\r\nI am curious about why the `library` output configuration options exist in Webpack if you feel this way. Is it meant to accomplish something different? It was always my assumption that its purpose was for something like what I am trying to do.","@WalterWeidner Yeah, I see your problem, `library` original was design for `commonjs`\/`umd`\/etc, when we don't have ESM, when we implement ESM library (with keep original tree and we have paln to do it), anyway can you create reproducible example and desribe the problem, I will look, thank you","> @WalterWeidner Yeah, I see your problem, `library` original was design for `commonjs`\/`umd`\/etc, when we don't have ESM, when we implement ESM library (with keep original tree and we have paln to do it), anyway can you create reproducible example and desribe the problem, I will look, thank you\r\n\r\n@alexander-akait pulling [this repository](https:\/\/github.com\/WalterWeidner\/tree-shake) and then running `yarn && yarn build` should output what I am seeing (the function `shouldNotExist()` and its `console.log()` should not be in the webpack app's bundle). The whole purpose of that repository is to help pinpoint the tree-shaking issues we were seeing in a very basic environment. \r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/3867422\/201179894-0a5e199d-0da4-48a2-96a4-446811a17005.png)\r\n\r\nIf that's not what you need I am happy to spin up something else to help get to root of the problem more efficiently. ","@WalterWeidner Yeah, I see your problem, we generate `__webpack_require__.d`, and that is prevent us for tree shaking, we should improve it for libraries","> @WalterWeidner Yeah, I see your problem, we generate `__webpack_require__.d`, and that is prevent us for tree shaking, we should improve it for libraries\r\n\r\nHow likely is this to be implemented? We might need to adjust our build to use something else if this is unlikely to happen.","Any updates? I want to use it for libraries, too "],"labels":["enhancement","X4: work required","P4: Nice To Have","Send a PR"]},{"title":"Usability Discussion","body":"In light of much conversation on twitter, etc. and seeing the many \"flavors\" of abstraction layers or utilities on top of webpack, I believe that it is probably in our best interest to bring these authors together so that we can come up with some incredible ideas and potentially draft a proposal that will allow webpack to be easier to use out of the box for any web developer. \n\n**Problems to solve:** \n\"Webpack is too low level\"\n\"There are no reasonable set of defaults\"\n\"Terminology doesn't make sense\"\n\"Too much boilerplate in handling environment logic\"\n\"The CLI lacks scaffolding and initialization\"\n\"Configuration is 'convoluted'\"\n\n**Things to keep into consideration:** \n- Webpack is unopinionated and makes no assumptions about a development workflow\n- Webpack is framework\/library agnostic and so any defaults must be able to be pragmatic enough to cater to any library. \n- I personally unless the @webpack\/collab-team feels otherwise, is unwilling to restrict features from this user-layer or whatever proposal is decided. \n\nSo this is a discussion group open to anyone but tagged with some people in mind whom I feel have already great tools created, or great ideas. However, is open for discussion by anyone.\n","comments":["CC: \n@kentcdodds @ericclemmons @joshhunt @gaearon @mxstbr @bebraw @jhnns @gdi2290 \n","CC \n@niieani @jonathanewerner\n","I suppose I'll be the first to start-off why not. \ud83d\ude0f \n\nI think overall IDE support would be awesome for validation. \n\nI'm not for forcing people to use Typescript, however there are some wonderful automatic validations come when you write Webpack Configs with Webpack Typings and Typescript. It reminds me of `webpack-validator` but automagical in your IDE. Typings are already being tackled as we speak for webpack 2.x. Also a pragmatic set of defaults and a `config` generator are all good places to start at. \n","@TheLarkInn - Could we not easily leverage `webpack-validator` in the same manner that Angular2 projects are  leveraging `codelyzer` and let an existing and mature linting framework ( eslint \/ tslint out of the gate) do the heavy lifting? \n\nThat would handle ES6 & TypeScript in all the major IDEs out of the gate and given people that \"automagical\" feedback as well as explicit execution for things like CI validation.\n","For me, 'linting\/validation' and 'usability concerns' are two seperate, but related, things. I don't think flagging errors in a Webpack config does quite enough to make it easier to use out of the box.\n\nI think there are a bunch of low hanging fruit in the config format itself that could be address to make the most common use-cases easier a bit simpler. I'm not sure what the best approach is, but I guess it'll depend on the tradeoff with compatibility.\n\nFrom the [getting started](https:\/\/webpack.github.io\/docs\/tutorials\/getting-started\/#config-file) guide and [CSS Loader readme](https:\/\/github.com\/webpack\/css-loader#example-config), a relatively simple Webpack config would look like:\n\n```\nmodule.exports = {\n    entry: \".\/entry.js\",\n    output: {\n        path: __dirname,\n        filename: \"bundle.js\"\n    },\n    module: {\n        loaders: [\n            { test: \/\\.css$\/, loader: \"style-loader!css-loader\" },\n            { test: \/\\.png$\/, loader: \"url-loader?limit=100000\" },\n        ]\n    }\n};\n```\n\nTo me, most of the confusing parts of Webpack are in the loader configuration, with both the regex `test` and the weird 'query string' format for passing in loaders and their configuration. Considering the most common use case would be adding a loader for a certain file type, I think it can be optimised for this:\n\n```\nmodule.exports = {\n    entry: '.\/entry.js',\n    output: '.\/bundle.js',\n    loaders: {\n        'css': ['style', 'css'],\n        'png': [{ loader: 'url', limit: 100 }]\n    }\n};\n```\n\nThis is more or less compatible with configs and loaders that are out there at the moment. What I don't like about this is although it simplifies this config, supporting both formats would make everything more confusing overall.\n\nAnother approach would be to start from a complete blank slate, as explored in @ericclemmons's [terse-webpack](https:\/\/github.com\/ericclemmons\/terse-webpack) and my [nicepack](https:\/\/github.com\/joshhunt\/nicepack). This is obviously the 'hardest' of all approaches, and might require working with loader and plugin authors on making changes for this, but I think this has the highest chance of improving Webpack's ease-of-use. Is this on the cards?\n","For what it's worth, I think Webpack should stay agnostic to any underlying technology (no babel presets), but understand what the common use cases are, like adding something to transform all scripts from CoffeeScript\/Babel\/TypeScript, and make it exceptionally simple to do them.\n","Based on my experience with the tool, the fact that you have multiple ways to configure something like loaders can lead to confusion. You need to understand `loader` vs. `loaders` and all those query formats. Even if you stick with `loaders`, you still have to use `loader` with `ExtractTextPlugin.extract` due to the way it works.\n\nIf we can provide a single, clear way to achieve things like loader configuration on core level, that would go a long way. You can build tools like `terse-webpack` on top of it. From my perspective it would be ideal to have something that's clear to explain.\n\n## On Schema\n\n`webpack-validator` is actually quite nice and helps quite a bit. I do feel though that configuration schema is a core concern as that enables tool authors to do all sort of things. And if schema was maintained at core level, then `webpack-validator` wouldn't have to maintain it. And I expect you could build better IDE integration, and even web services and better documentation, on top of it.\n\nA schema would help with one of my favorite pet peeves of webpack, the CLI. A lot of support requests gravitate around poor understanding of the CLI and what it does. Often you see people enabling HMR twice accidentally. There are some inconsistencies around that don't particularly help.\n\nI feel there could be room for simplification and I might go personally as far as strip the CLI from webpack core and let community maintain it at least for a while. Maybe a good version could be blessed and moved to be maintained within the official organization.\n\nThe core should make it easy to write a CLI (schema!) and provide a solid Node API. If it can achieve those at a high level, it would improve the situation substantially.\n","Author of [Easy Webpack](https:\/\/github.com\/easy-webpack\/core) here.\n\nFor me, the biggest problem with maintaining raw Webpack configuration files was the separation of concerns.\nYou couldn't easily split your config file into sections like \"TypeScript\", \"production-specific\", \"development-specific\", \"Electron-specific\", etc., because there is no built-in, pain-free way to merge them afterwards. The reason is that some configuration elements are nested Objects and some nested Arrays. In 99% of cases the solution is to: \"deep-merge\" the Objects and \"shallow-append\" Arrays, but sometimes you'd like to ensure a certain plugin is at the end (e.g. the `offline-plugin` recommends it) and sometimes you'd like to base your config values on the previous one.\n\nThe main goal of Easy Webpack was to make process this pain-free. (note: there's also @bebraw's [webpack-merge](https:\/\/www.npmjs.com\/package\/webpack-merge) that has a similar aim). \n\nAfter separation of concerns is addressed, it becomes much easier for users to reason about their configs. They know \"what part does what and belongs to what\" and they can keep their configs DRY when they need alternative ones for all the different environments: production, development, electron backend, electron frontend, testing, ...\n\nSuddenly, config files become about \"composition of features\" rather than a mess of low-level concepts (loaders, regexes, plugins, devtools, targets, ...)  that the users otherwise needed to know about.\n\nThis has lead me to the second idea - that these \"opinionated features\" could then be made into NPM-presets that users can just `npm install`, and stack into their configs.\nThe reasoning is simple: We all know **best-practices change all the time**. Loaders and Plugins evolve, get abandoned, get forked, get breaking changes in the way they're configured. It's almost a full time job getting up to speed with all of this, even if in 90% of the cases you just want the basic functionality. Ultimately, nobody wants to spend time in their configuration files - it's \"work-about-work\", not actual, productive **work**.\n\nI thought that it would be great to be able to \"offload\" the responsibility of knowing \"the how\" of implementation of a certain feature (like TypeScript loading and checking) to the developers that really know what they're doing, and thus created [a number of NPM packages](https:\/\/www.npmjs.com\/~easy-webpack) that contain both the dependencies and sane defaults for configs, which are additionally configurable for the most common use-cases. The config templates can be manually overwritten, so the user still has full control. \n\nThe result? I'm the Core Team Member of [Aurelia](http:\/\/aurelia.io), one of my responsibilities is Webpack. The users who never tried Webpack were all dazed and confused by the sheer length, complexity and number of Webpack config files present in our previous Starter Kit - and Easy Webpack has worked wonderfully to address this. I was even able to push fixes to the configuration files that didn't require us to write long blog posts explaining \"you need to change this part here, and here, and replace this\". All they had to do was `npm update`.\n\nYesterday, I became aware of @ericclemmons' [terse-webpack](https:\/\/github.com\/ericclemmons\/terse-webpack). \nI really like the fluent API - if it were written in TypeScript or had typings I'd consider it a much better API than Easy Webpack's for the end-user, since you wouldn't even need to know what presets are available - you'd see it as you're typing :). Ultimately, it could be yet another abstraction layer though, but I believe it should be possible to combine it with configuration stacking, so that we're not leaving out those who really need custom solutions.\n\nTo summarize, I think it would be wonderful to cover these layers of the onion:\n1. better IDE support for configuration (docs-as-I'm-writing, autocompletion, validation, perhaps native support for loading config files written with Babel \/ TypeScript)\n2. separation of concerns - config-merging\n3. NPM preset's -- \"features, not configs\" - abstracted, opinionated, higher level config packages with required dependencies for the most common use-cases -- for the 90% of users who simply want to \"add that feature and be done with it\". The additional benefit is that the answer to the question: \"what did I need that package for in `package.json`?\" [becomes clearer](https:\/\/github.com\/aurelia\/skeleton-navigation\/blob\/master\/skeleton-typescript-webpack\/package.json#L91-L108).\n4. fluent APIs for the presets -- auto-installation and auto-configuration of the above presets in a fluent manner like terse-webpack.\n\n---\n\nSince @TheLarkInn mentioned it, I'll address TypeScript. The beauty of using it for config files is not only built-in validation, but even more importantly, **auto-completion \/ auto-suggestions** and documentation -- right there where you need them the most. No need to jump to README's and websites to find out \"what's the name of that property\", or \"what can I pass here\", \"can this also be a function? - wow!\". Since typings are being handled, this will solve a part of the issue. \n\nAnother win of having typings is that some IDEs are able to **enhance pure JS scenarios** and offer partial auto-suggestions anyway if they are present. These include VSCode, VS, WebStorm and I believe Atom has a plugin. To start using config typings for Webpack configs, I've [prepared these](https:\/\/github.com\/easy-webpack\/core\/blob\/master\/src\/webpack.ts) as a part of my project.\n\n\ud83d\udd25 \n","I agree with all the things @bebraw said, especially\n\n> If we can provide a single, clear way to achieve things like loader configuration on core level, that would go a long way.\n\nThis is really important!\n","_(Bolded for easier skimming)_\n\n### tldr;\n- My peers greatly **prefer \"Gulp vs. Grunt\" configuration**\n  due to IDE-support, helpful runtime errors, and composition.\n- Webpack needs to support a **single, serializable object** somehow.\n- Wrappers can still exist in user-land, but ideally those would\n  be like [Bourbon](http:\/\/bourbon.io\/), **simplifying complex, composed features**.\n- Like when Babel 6 was released, things were harder for new users\n  because of \"Dependency Fatigue\" ;) Auto-installing greatly reduces this.\n- I'd much rather solve this for _all_ Webpack users than maintain\n  another lib. Until then, I have a team of Gulp **users that could\n  really use an easier Webpack, including myself.** ;)\n\n<details>\n<summary>\n\n**Read more about the architectural reasoning behind [@terse\/webpack](https:\/\/github.com\/ericclemmons\/terse-webpack)**...<\/summary>\n\n\n- Webpack **Object configs are architecturally flawed for composition**.\n  - We've **made the same mistake as Grunt**, supporting multiple variations of the same thing (e.g. `entry`, `loaders`.\n  - **Merging objects is hard**.\n  - **Validating these variations is hard**.\n  - **Inspecting plugin instances is hard**.\n  - Especially for `.css`,**loader order matters**. \n    _I still haven't internalized what's the right order._\n  - Features like HMR means changing both `entry` & `plugins`,\n    which differ depending on `target`.\n- **[terse](https:\/\/github.com\/ericclemmons\/terse-webpack)** attempts to solve this via:\n  1. Functions instead of Objects.\n     - **Throw run-time errors** with invalid arguments.\n     - **Typed** with Flow or TypeScript for IDEs.\n     - Support user-land functions to **compose more complex configs**\n       (e.g. offline, HMR, long-term caching).\n     - `.when(predicate, callback)` for **env-specific configuration**.\n       (If you're going to go fluent, `if` statements break the flow!)\n  2. Fluent API is just a wrapper:\n     - **Builds an internal, immutable history**, much like Redux actions.\n       _(I originally used Redux because people understand it now,\n       but found it's kinda overkill.)_\n       This is so that **merging configs is as simple as splicing arrays.**\n     - Calling `getState()` will replay this history through [\"feature reducers\"](https:\/\/github.com\/ericclemmons\/terse-webpack\/tree\/master\/src\/features) that will generate a `state` object. Doing this means there's **a single, normalized, serializable object to describe the config, which Webpack doesn't have right now.**  \n     - Finally, `getConfig()` converts `state` into a Webpack config via [\"webpack reducers\"](https:\/\/github.com\/ericclemmons\/terse-webpack\/tree\/master\/src\/reducers).\n  3. **Installing missing deps has had the single biggest impact on my DX.**\n     - Powered by [npm-install-webpack-plugin](https:\/\/github.com\/ericclemmons\/npm-install-webpack-plugin).\n     - Even plugins are described with the intent to [auto-install](https:\/\/github.com\/ericclemmons\/terse-webpack\/issues\/15).\n       <\/details>\n","This is a great discussion so far. Configuration is imho one of the biggest pain points when starting with webpack. The config style almost encourages misconfiguration and people copy wrong configuration from snippets all over stack overflow.\n\nThese are the biggest pain points I've collected so far on stack overflow:\n- **Key ambiguity**: There are multiple ways to name a key (`loader` vs `loaders`)\n- **Value ambiguity**: Often you can specify multiple types (strings, arrays, regex, etc.)\n- **Too much possibilities to config similar things**: `modulesDirectories` vs. `root`\n- **Complex string formats**: E.g. `devtool` or loader queries\n- **Autoresolution**: E.g. the possibility to omit the `-loader` postfix. For instance, people get weird errors when they happen to have a [`css` folder in their `node_modules`](https:\/\/www.npmjs.com\/package\/css).\n- **Nested objects\/arrays**: The loader part is unnecessarily nested and makes merging hard\n- **Suprising behavior**: E.g.: Many people don't know that every loader which `test` succeeds will be applied.\n\nBasically we have these three options:\n1. Introduce breaking changes and simpilfy config format\n2. Introduce typings and linting to hint errors\n3. Provide intelligent presets\n\nI think, we should do all of them in this order. First simplify the config format, then work on tools, then provide intelligent presets. By simplifying the config format first, we remove many possible errors in the first replace, thus making our linting tools and presets a lot of easier.\n\nIn order to simplify our config format, I'd take these steps:\n- **Key ambiguity**: Remove redundant config keys.\n- **Value ambiguity**: We should choose the most appropiate config value and only allow this one. Primitives are good for simple configs, arrays are good when the order is important and multiple instances are allowed, objects are good when the order is not important and there should be only one option per key, functions are ultra-flexible and can be runtime dependent.\n- **Too much possibilities to config similar things**: It's good that webpack is so flexible, but there are some built-in configs that many people don't need (I'd bet most people don't want the actual behavior of `modulesDirectories`). We should spot the most popular configs and make these built-in. All other use-cases should be configurable via plugins.\n- **Complex string formats**: Should be simplified if possible (do people really want to configure the pragma style of the `devtool`?). We should check if they can be replaced with objects which are often easier to handle.\n- **Autoresolution**: Should imho be removed. Explicit configuration is almost always better.\n- **Nested objects\/arrays**: Nesting should be avoided if possible.\n- **Suprising behavior**: Should be removed as far as possible. In this particular case, I think the loader resolution should stop after the first `test` succeeds.\n\n@ericclemmons I really like the idea of config reducers that translate the fluent API into a single config state object. This way we can easily catch wrong configuration on runtime.\n\nCould you explain why the object should be serializable?\n","At least some of those points are solved by `webpack@2`, such as `modulesDirectories` vs `root`.\n","I think @jhnns summarized everything _perfectly_.\n\nRegarding the \"serializable\" part, it was to...\n\na. Make it easier to tell how plugins should be instantiated.\nb. Provide an escape-hatch back to the raw, webpack config:\n\n> https:\/\/github.com\/ericclemmons\/terse-webpack\/blob\/master\/src\/stringify.js\n\nIf your suggestions were largely implemented, I think all of our wrappers would be largely unnecessary.\n\nThe last remaining items are around how we'd want to support\/handle IDE support & types...\n","Ok, so with serializable you don't mean it should be transformable into a string which can be written to disk? If this was the case, we could not use functions which are very handy in some cases.\n\nI'd really love to see the terse-webpack API in webpack itself, but this is my personal opinion. I'll discuss this at our next webpack meeting. If this was ok for everyone, @ericclemmons would you be open to take the lead with our support?\n\nSince this would be a breaking change, we really need to be careful about the changes. IMHO we may discuss about removing odd features, but if there is a valid use-case for it, it should be configurable. I think we also need to support the old format for quite a while for backwards compatibility.\n","@jhnns https:\/\/github.com\/yahoo\/serialize-javascript does a good job of handling functions.  IME, `func.toString()` and `regex.toString()` do a great job of serializing.  I didn't consider serialization for caching to disk, but as the simplest way to make a JSON string from an object :)\n\nBackwards compatibility is quite possible by reducing the new format to the old.  Heck, we could even do this:\n\n``` js\n\/\/ Old webpack.config.js\nmodule.exports = {\n  \/\/ You know what this looks like already, otherwise we wouldn't have this open issue :D\n};\n```\n\n``` js\n\/\/ New webpack.config.js\nmodule.exports = require(\"webpack\").configure({\n  \/\/ strict format goes here, and is reduced internally to the current format\n};\n```\n\nThe fluent API _is hard to solve_ in a way that supports composition of user-land features.   I think that should exist in the future, though, as the IDE\/type support would be incredibly useful IMO.\n\n(I'm up for a Skype\/Hangout, if desired.)\n","> Since this would be a breaking change, we really need to be careful about the changes. IMHO we may discuss about removing odd features, but if there is a valid use-case for it, it should be configurable. I think we also need to support the old format for quite a while for backwards compatibility.\n\nVery true. I see this as a Webpack 3.x level breaking change. \n\n> The fluent API is hard to solve in a way that supports composition of user-land features. I think that should exist in the future, though, as the IDE\/type support would be incredibly useful IMO.\n\nIDE Support we could maybe start the ball rolling on this ASAP. And as we draft a new spec for this configuration. @DanielRosenwasser, @d3viant0ne, I think typings can really help this also.\n","Generally, I agree with pretty much everything that's been said here. The real issue is how to proceed with this knowledge. I'd also be up for the Skype\/Hangout if that's gonna happen. \n","@niieani @ericclemmons just an update on this:\n\nWe talked about this [at our last webpack meeting](https:\/\/github.com\/webpack\/meeting-notes\/pull\/7\/files). We could not convince everyone to use a fluent API because benefits were not clear enough. Could you summarize what the actual benefits of a fluent API are in terms of usability?\n\nHowever, we all agreed that there is room to remove complexity. I'll come up with a list of unnecessary complex features\/concepts which could be improved (e.g. preLoaders vs loaders vs postLoaders). Do you have any suggestions? What exactly could be removed\/replaced\/simplified? I'm not just talking about the actual configuration but also about concepts.\n\nWhen we have a longer meeting about this topic again, we will certainly invite you.\n","@jhnns I think I'm okay with Webpack core not having a fluent API, as this could be delegated to external projects like Terse. \n\nWhat I would suggest though is Webpack at least handle config merging\/composition. That shouldn't be too hard, and If that's solved without external tools, then I think it'll lead way to very nice little feature-snippets that people can than re-use across many projects, without the need to dig too deep into the docs. A fluent API can be built on top of config merging\/composition from the bits. \n\nThis is how I solve [composition](https:\/\/github.com\/easy-webpack\/assign\/blob\/master\/src\/index.ts) in Easy Webpack. Then there's also [webpack-merge](https:\/\/www.npmjs.com\/package\/webpack-merge).\n\nPerhaps it could be as simple as accepting an array of configs to be merged? It would be nice to also be able to access the merging method programmatically though.\n","I posted some thoughts here: https:\/\/github.com\/webpack\/meeting-notes\/pull\/7\/files#r72888163. Nothing new that wasn't mentioned here before. I just think that both tooling and fluent APIs are red herrings. In my opinion the configuration should stay an object, but the _shape_ of the config needs to be organized around use cases instead of \"what low level options does Webpack need to know\". So far Webpack configuration has been tool centric rather than user centric and this is what I think needs to be fixed. \n","I'm in total agreement with @gaearon's notes here.\nPerhaps what needs to be done is finding an answer to the question: \n\n\"How would you do configuration if you were designing a tool like Webpack in 2016?\"\n\nAnd then once we have a great answer, think about best ways to backport those ideas to fit what we have now without breaking too much, and eventually migrate to the design in Webpack 3.\n\nI feel we are too tied to the past right now and need a fresh start as a basis for the new config standard, without the weight of the old format on our shoulders...\n","@gaearon by the way you describe the use-case centric setup screams babel-like presets to me. \n\nNo?\n","What's the issue with that? \n\n``` JS\npresets: ['react', 'hot', 'dev-server'] \n```\n","@mxstbr this is kind of what I've done with Easy Webpack, except that you actually have to \"require\" those presets in as parameters instead of typing in strings, plus those presets can have options passed into them (although babel ones can do too). It would be pretty easy to remove the `require`s and move to a string-based approach, though.\n","Where you never had to write a config, but instead in 'userland' you had a `.webpackrc` that just contained things like: \n\n```\n{\n  base: [react, es6, sourcemaps],\n\n  prod: [minify, long-term-cache]\n}\n```\n","The reason I went with `require`s instead of a JSON file like `.webpackrc` is that you get suggestions\/autocompletion and syntax validation out of the box thanks to TypeScript's typings (which also work in JavaScript in many major IDEs). \nJSON could have a schema, but that requires maintaining extra plugins to validate, they need manual management, and so on.\n","I don't think presets would solve this. Loaders are the least confusing part of Webpack IMO even despite many ways to do the same thing.\n\nI think file and remote path configuration (publicPath, contentBase, output.path, \"name\" in loaders, ?path in WDS client entry point) is the most confusing part. It is spread so thin in the configuration that it causes rippling changes all the time. It is not clear what either of these options do, and how you need to configure them to achieve common setups. And the lack of sane defaults (like filenames hashing in production, or even default `output` config that just works) forces people to learn about all those options. \n","Regarding loaders, I personally don't like that they're passed in as strings instead of constructors\/instances, like plugins. It's not consistent, and it just makes it harder for novice users to grasp how things work. On top of that there's the whole \"loader-resolvers\" and the magical appending of \"-loader\" which is optional. Why all the added complexity? \nI think these sort of things should be re-thought, consolidated and simplified. \nFinally IMO there should be just one way of doing something in the config. Having more just adds to the confusion.\n","I think the most attainable goal is to solve the \"Object shape\") problem as @jhnns listed them out earlier:\n\n> https:\/\/github.com\/webpack\/webpack\/issues\/2797#issuecomment-235093740\n\nAnything on top is just sugar, but right now **webpack configs need to be a singular, predictable format.**\n","> Regarding loaders, I personally don't like that they're passed in as strings instead of constructors\/instances, like plugins.\n\nI haven't seen which plugins internally apply loaders, but this almost _feels_ like a viable option. So do you think webpack would be easier to use if people only needed to know how to apply and use plugins? I think the abstraction is written to help prevent boilerplate the async waterfall handling of loaders. Etc. Just a thought. \n","> I just think that both tooling and fluent APIs are red herrings. In my opinion the configuration should stay an object, but the shape of the config needs to be organized around use cases instead of \"what low level options does Webpack need to know\". So far Webpack configuration has been tool centric rather than user centric and this is what I think needs to be fixed. \n\nI agree with this, but I don't believe it can be appropriately tackled until we clean up some of the issues regarding what @jhnns touched on. I.E. removing duplicate ways to do multiple things, etc.\n","@TheLarkInn What I meant with my comment was not to challenge the notion of loaders itself, just the fact that they need to be configured with require-like strings that are then resolved to the actual packages. On the other hand, plugins are added as actual instances. That's the inconsistency.\n","This might be way out of scope of this discussion but to me, any build tool that I can't simply put a breakpoint and see what's going on is flawed. Grunt, Gulp and Webpack so far been the same. Although old tools I used to use been the same (Ant \ud83d\ude02) I love to see a build tool that have a low level API and lets me \"program\" my build process instead of giving it a vague config file and hope it works fine. \n","@mohsen1 you can do that with Webpack, but it's not well documented right now; you can also use it programmatically rather than via the CLI. But it's a good point that making this debugging process easier might also be step in the right direction.\n","@gaearon I agree. Could you post an example how a use-case centered config would look like?\n\n> I think file and remote path configuration (publicPath, contentBase, output.path, \"name\" in loaders, ?path in WDS client entry point) is the most confusing part\n\nThat's interesting. I had no bigger issues with paths \u2013 but I totally agree that setting up HMR can be really frustrating.\n\n> \"How would you do configuration if you were designing a tool like Webpack in 2016?\"\n\nThat sounds great. I'd really love to see code examples by all of you guys how you would like to use webpack.\n\n---\n\nAlthough I really want to simplify things, I still think that it should be possible to do that \"fine-tuning\" like you can do it today with webpack. Since webpack is a tool where all the different parts of the application are assembled, it's often necessary to do weird stuff just to make things work. I'm especially thinking of all the things you have to do to import modules without a common module format (which might be abstracted into a community-driven module but that's another story).\n\n---\n\n> Regarding loaders, I personally don't like that they're passed in as strings instead of constructors\/instances, like plugins\n\nThat's true. I think it originates of CommonJS' idea of loaders (which were never implemented in node.js) where you'd configure your import by modifying the string passed to `require()`. Obviously, this is very cumbersome for stuff you import very often (like React components, CSS, HTML or images). But sometimes it is necessary to override the common behavior in this particular case (because you want to inline it with the url-loader for instance).\n\nWe had a pretty long discussion about the pros and cons of different ways to configure loaders at #378. After some years experience we know that using strings for configuration can be impossible as some tools require functions for configuration which are not serializable safely. So, personally I would be open to completely ditch the string configuration part (including all the stuff with prepending it with `!` and `-`) in favor of an external configuration via a `webpack.config.js`.\n\nWhat we previously had completely uncovered is that it can be important to configure what loaders are applied on imports depending on the **importing** module. For instance, in JS you could expect to get an image just as url string, but within HTML maybe it would be better to receive a string like `src=\"path\/to\/img.jpg\" width=\"200\" height=\"100\"` or a string referencing different versions of the same image via `srcset`. I don't know if loaders are the right tool to achieve this kind of things (essentially imports + metadata), but there's still room for improvement.\n","Hi folks, one thing that I haven't seen come up in this thread is the difficulty of migrating from CLI usage to `webpack.config.js` usage. The CLI has wonderful \"presets\" like `-d` and `-p`,  and https:\/\/github.com\/webpack\/docs\/wiki\/cli describes what combinations of long flags those presets imply, but not which `webpack.config.js` options\/plugins correspond to the long flags.\r\n\r\nSo what I am advocating is:\r\n- add \"development\" and \"production\" \"presets\" to `webpack.config.js` too\r\n- document how you'd reproduce each CLI flag in `webpack.config.js`\r\n\r\nI actually found Webpack very simple and powerful to use just from the CLI. My initial requirements were just bundling a few JS files that `require`d each other to produce:\r\n\r\n``` sh\r\nbundle.js\r\nbundle.min.js\r\nbundle.min.js.map\r\n```\r\n\r\nwhich was possible via `webpack entry.js bundle.js && webpack -p --devtool source-map entry.js bundle.min.js`. (Fairly typical use case? Wasn't using Babel, didn't need loaders for non-JS, etc.)\r\n\r\nMy pain came when I had to add the one option (an external, fwiw) that the CLI didn't support. In retrospect I suppose I could have supplemented the CLI with `webpack.config.js` but thought it would be best to keep all config together.\r\n","Hi all! I'd just like to throw my two cents in regarding the config file.\n\nThe list of available config options is already quite long, and I'd imagine that it's only going to get longer. In itself this is great; more config = more flexibility = happier developers. The more options we have, however, the easier it will be to make mistakes when adding new properties.\n\nMy suggestion is that Webpack should aim to notify the user of any unrecognised properties on the config object, in the hopes of reducing time spent chasing down errors\/bugs caused by incorrect property placement.\n\nAs an example; today I spent ~40 mins trying to find and fix a bug that ended up being caused by me having misplaced the `externals` object within the `output` object, rather than as a top-level config property. In hindsight this is _fairly_ clear in the docs, but at the time I was left scratching my head wondering why this solution worked for a dozen people in various examples, but wasn't working for me.\n\nIf something like this is straightforward enough to catch at run time, I think it would be useful to warn the user about it and hopefully save them a bit of time. Something along the lines of the following could work.\n\n```\nWarning: Unrecognised 'config.output.externals' property specified. Did you mean 'config.externals' ?\n```\n\nWould love to hear others' thoughts!\n","Hey there. A short, opinionated view on web config from me, too.\n\nAs a webpack user I think in dev features like _HMR_, _Babel_, _CSS Modules_, _Postcss plugins_. The webpack config instead is sliced diametrically to this: Loaders, plugins, entry points and many more. So in order to get HMR, for instance, which only affects one type of my assets (JS code), I need to edit multiple places: _dev server_, _entry points_, _js loader_.\n\nThis is not only uncomfortable for me as a user, it also makes composing a webpack config of multiple smaller configs unnecessary hard. This is why packages like `webpack-merge` exist, but trying to merge multiple loader configs identified by regexs (imagine `\/jsx?\/` vs. `\/js|jsx\/`) is pretty much doomed to fail.\n\nAnd that's basically the same underlying issue @gaearon pointed out: Tool-centric vs. user-centric config. I would really love to see a feature-centric webpack config which can be safely divided into _babel config_, _hmr config_, _css modules config_, ... \ud83d\ude09\n","PS: After having a night's sleep...\n\nI like @joshfarrant's proposed warning on unrecognized options. Would be a helpful feature, but suggesting the right property name might be very complex due to the deeply nested objects.\n\nIt's probably **the major problem** of today's webpack config that it looks like the under-the-hood-workings of webpack itself. This is the reason why it feels so unintuitive to most users and why you have to edit three different objects to add HMR, for instance (see my prev comment).\n","@andywer That was my take as well and what my experiment was aiming to address: _what_ you wanted without worrying about _how_.\n\nThe makes Webpack incredibly powerful (and what I think will provide longevity to the project) is that it's very much about the _how_ to accomplish features, which invariably require tweaks depending on how your specific project needs it.\n\nIf it were feature based, Webpack would constantly be moving to accommodate each scenario based on how the ecosystem solved it this week, and would probably be large source of frustration for those needing to customize the config because they didn't build their app 100% the way CRA does (for example).\n\nI really think the schema validation was a good move.\n\nHaving webpack work well with _features_, IMO, would require a herculean effort by the community to flush out all of these edge-cases in a way that worked harmoniously with every permutation of them.\n\nI'm all for it, but don't know how to solve it _at scale_ today.  I just know what I'd like to see solved & how. And even that has been tricky :)\n","I think in terms of features: more mature plugins (yes write plugins that set config values and call other plugins) could potentially fix this. However as @ericclemmons stated the edge cases && interoperability with other plugins poses a large challenge.\n","@ericclemmons You mentioned a lot of good points, but I think the webpack config could still be straightened up to some degree without loss of configuration capabilities, just by sticking to a small set of concepts consistently.\n\nTo give you an example: Let's say every functionality of webpack is provided by a _plugin_, even the core functionalities. So you configure a set of plugin, plus your loaders, only. No more `{ devTool: 'source-map' }`, but rather `{ plugins: [ ..., webpack.devTool('source-map') ] }`\n\nUniformity can already decrease complexity a lot.\n","@andywer I agree that decreasing the amount of concepts to learn could be a worthwhile effort. Incidentally there's `webpack.SourceMapDevToolPlugin` already but not a lot of people know it exists. \ud83d\ude04 \n","PS: Independent from that, the loader `test` regex really bugs me sometimes. It makes composing the webpack config from smaller config snippets nearly impossible.\n\nJust an idea: Having a separate `file type regex => mime-type` mapping (given a set of sane default values most people will probably never have to touch it) and using the MIME type in the loader config might work well:\n\n`loaders: [ { type: 'application\/javascript', loaders: [ 'babel' ] } ]`\n","@andywer Have you seen [concord](https:\/\/github.com\/webpack\/concord#package-configuration)? Mime based mapping might be in the cards. Not for webpack 2, though, but we'll see after that.\n","@bebraw No, but I'll check it out :)\n","@bebraw Yeah, [concord](https:\/\/github.com\/webpack\/concord#package-configuration) seems like a good concept to specify the MIME types. One could use this concord config if present or fall back to default types otherwise. Then use the MIME types in the module loader config to apply loaders based on file type, not regexs :)\n","It's awesome to see many people agree that strings as configs is a bad idea. However, it's not enough to just agree on the principle. Here's a piece of config extracted from `react-create-app`:\n\n```\nloaders:[{\n   test: \/(\\.css)\/,\n   loader: ExtractTextPlugin.extract('style', 'css?-autoprefixer!postcss')\n}]\n```\n\nThis basically shows that every single other idea discussed in this topic is moot until the above goes away:\n- you cannot split and merge configs\n- you cannot validate configs\n- you cannot get IDE autocompletion for such a config\n- you cannot effectively build any tools on top of such a config\n\nBasically this boils down to: unless these configs are simplified (apparently not before Webpack 3 at the earliest) no other proposal discussed here can be implemented.\n\nToo bad it's probably too late to push for this for webpack 2.\n","@dmitriid What's personally annoying about that example is that _the loader usage doesn't follow the other loader conventions_ (e.g. providing a `string` and a `query` object).\n\nI don't know of a way to support it either:\n\n> https:\/\/github.com\/ericclemmons\/terse-webpack\/issues\/27\n> (But I'm using `styled-componets` nowadays so :shrug: ?)\n\nThat's why my take is more along the lines of combing _what are you building_ with _here's the best way to build it_. (The user should only care about the former)\n\nThis is such a hard thing to do, do well, and it's a moonshot (IMO) to accomplish it, since removing complexity nearly always means removing functionality.\n\nStill on the radar, but there's simply not a clear path\/solution AFAIK... :(\n","> Still on the radar, but there's simply not a clear path\/solution AFAIK... :(\n\nSure. But I think one can at least boil the previous comments down to two future improvements:\n- Having fewer (and clear) concepts\n- Do stuff consistently (I don't need a `loader` prop if there's a `loaders` prop which is a superset of the former, for instance)\n\nI would hope that all the other issues will be easier to solve after improving these two basics.\n","Going to add some discussion I think is relevant to this discussion I came across on Twitter.\r\n![image](https:\/\/cloud.githubusercontent.com\/assets\/3408176\/20644039\/a17da3c2-b3ed-11e6-97da-c32f535e7364.png)\r\n\r\nMaybe these are some topics to challenge ourselves for designing this new interface for configuration\r\n\r\n","How do we feel about @andywer's webpack-blocks? This has gotten a lot of praise we should weigh up and downsides ","Warning: 2 cents incoming :)\r\n\r\nLooking at webpack-blocks, I can't really say it's a better solution:\r\n\r\n- doesnt-do-anything-out-of-the-box-itis. Multiple configuration options spread over 10 different packages\r\n- pulls everything into the upper level of configs: PostCSS configuration (which is a plugin config, unless I'm mistaken) is passed to the `createConfig` as a top-level configuration option on par with `entryPoint`\r\n- easily leads to consistency abuse:\r\n  - [extract-text](https:\/\/github.com\/andywer\/webpack-blocks\/blob\/master\/packages\/extract-text) is a function call with 0 or 2 arguments\r\n  - [post-css](https:\/\/github.com\/andywer\/webpack-blocks\/blob\/master\/packages\/postcss) is a function that accepts an array of function calls (?)\r\n  - [babel](https:\/\/github.com\/andywer\/webpack-blocks\/blob\/master\/packages\/babel6) is a function that accepts a single JavaScript object as options\r\n\r\nI would opt for a config that in its base form is nothing but a declarative JavaScript object with consistent options everywhere:\r\n\r\nSo, for the above it should be something like:\r\n\r\n```\r\n{\r\n  plugins: {   \r\n    babel: {\r\n        exclude : \/node_modules\/\r\n    },\r\n   postcss: {\r\n     autoprefixer: {\r\n       browsers: ['last 2 versions'] \r\n     }\r\n   },\r\n  extractText: {\r\n    out: 'css\/[name].css',\r\n    mime: 'text\/css'\r\n  }\r\n}\r\n```\r\n\r\nThis way when a poorly written documentation for a plugin says \"Pass the following options to plugin\", the user will not have to try and guess how, where or when to pass the config options.\r\n\r\nAnd yes, this will break a lot of plugins...","Also, unless I'm mistaken, gulp requires its plugins to be written in exactly one manner: that is \r\n\r\n```\r\nimport goodPlugin from 'goodPlugin'\r\nimport badPluginFactory from 'badPlugin'\r\nconst badPlugin = badPluginFactory(additional_config)\r\n\r\n...\r\n```\r\n\r\nSee https:\/\/github.com\/gulpjs\/gulp\/blob\/master\/docs\/writing-a-plugin\/guidelines.md This is something webpack should strive for as well. At the very least it will make the plugin-related part of configuration simpler  and handling easier.","@dmitriid The arguments to the blocks are quite consistent, though, I think, *but* they might be more consistent nevertheless. But they got to reflect the different ways in which the loaders\/plugins are configured.\r\n\r\nBut I don't even want to focus on webpack-blocks here. There is just one design decision that consistently gets me puzzled:\r\n\r\nWhy do I have to configure the Babel loader, for instance, as a string: `loader: \"babel-loader?presets[]=es2015\"`\r\n\r\nAs a webpack user I have got to serialize my parameters (could use the query object, but only if I use `loader`, not `loaders`), just so that in the end webpack got to require the `babel-loader` and deserialize the parameters again.\r\n\r\nWhy not do `loader: new BabelLoader({ presets: [ \"es2015\" ] })`? Otherwise it just feels like a detour through JSON land \ud83d\ude09","> Why do I have to configure the Babel loader, for instance, as a string: loader: \"babel-loader?presets[]=es2015\"\r\n\r\nFor what it's worth, this has been address in Webpack 2.x\r\n\r\n```\r\n{\r\n  test: \/\\.(png|eot|svg|ttf|woff(2)?)\/,\r\n  loader: 'url-loader',\r\n  query: {\r\n    limit: 5 * 1024, \/\/ only inline if less than 5kb\r\n    name: '[name]-[hash:6].[ext]'\r\n  },\r\n}\r\n```\r\n\r\nThe changes to clean this up in Webpack 2 I think are much appreciated - the insane way of configuring loaders with config strings was the worst part of the config, and I'm glad to see that fixed.\r\n\r\nPersonally, I prefer declaring loaders and plugins as functions (like your example) rather than strings, but tbh I think that's more superficial and would have larger ecosystem impacts.","@joshhunt The `query` parameter was there in 1.x, too: http:\/\/webpack.github.io\/docs\/using-loaders.html#query-parameters\r\n\r\nIn webpack 2 it's renamed to [options](https:\/\/webpack.js.org\/configuration\/module\/#useentry). Which is a good thing :)","@andywer My reasoning for having everything in \"JSON land\" is this:\r\n\r\n- all configuration is declarative\r\n- all configuration is consistent: it's just the name of the thing we want to use followed by a key-value configuration\r\n\r\n> loader: new BabelLoader({ presets: [ \"es2015\" ] })\r\n\r\nBabelLoader might be a function that expects an obect. SomethingLoader might be a function that expects multiple arguments. SomethingElseLoader might be a function that expects an array of things. \r\n\r\nThis results in an inconsistent mess (every loader's configuration looks and behaves differently) _and_ in an unmanageable config file (we can no longer merge, analyze, expand, serialize configs, see discussion above), as this basically comes back to\r\n\r\n```\r\nloader: ExtractTextPlugin.extract('style', 'css?-autoprefixer!postcss')\r\n```","What I would personally love to see is defaults in the loader's code. Instead of something like this.\r\n\r\n`loaders: [\r\n            { test: \/\\.css$\/, loader: \"style-loader!css-loader\" }\r\n        ]`\r\n\r\nI could have something much more simple\r\n\r\n`loaders: ['css']`\r\n\r\nThe css loader should be able to specify that the default test is `\/\\.css$\/`, because 90% of the time that's what people are going to use it with, also it should be able to specify that the results of this loader by itself aren't generally useful, so a default prefix loader of style-loader is set.\r\n\r\nGiving the loader creators that power to set these defaults could go a long way towards simplifying webpack configs. ","@baderbuddy I think it would be better to create a wrapper for more general usage or create something like preset. Coz webpack is super feature-rich. It's hard to simplify the usage at the core level. Just like most linux command line tools.","@e-cloud based on my usage I think if the loaders' maintainers set some default values and then webpack allowed the ability to overwrite them then that would probably make most people's usage easier. \r\n\r\nIn my example the maintainer of the CSS loader can say that the default test is for the CSS extension and by default the values get fed into the style loader but someone using the loader could still specify all of those parameters to change the defaults to fit their needs.\r\n\r\nI think webpack needs to be more opinionated in order to make it easier to jump from one webpack project to another. In my mind the best way to accomplish that is to let the loaders bring their own defaults for how to use them.","I know this is already a long standing thread but I think we should address discussions had here as part of our Usability overhaul. \r\n\r\n### require env as a parameter\r\nhttps:\/\/twitter.com\/dan_abramov\/status\/820045292032688133\r\n\r\nI think there are pros and cons to this but it's valid to an extent. ","Instead of opening an issue\/feature request, I'll add to more things:\r\n\r\n## 1. Loaders evaluation order \r\n\r\nLoaders should be evaluated left to right, top to bottom. The reason is simple: everything else in the config is evaluated this way.\r\n\r\nAnywhere there's a list of things, they are evaluated FIFO-style. Only loaders are evaluated LIFO-style. This breaks principle of least surprise, requires context switching when reasoning about configuration etc. This is especially true now, when loaders are used within rules. The rules are evaluated left to right, top to bottom (FIFO). Once you arrive at a `Rule.loaders`, it's suddenly right to left, bottom to top (LIFO).\r\n\r\n## 2. Plugins and loaders should have the same configuration style\r\n\r\nBoth plugins and loaders are some functions that are called with some options. However:\r\n\r\n- loaders can be configured only declaratively by specifying the name of the loader and its options\r\n- plugins can be configured only imperatively by importing\/requiring a module, and building an object with required options\r\n\r\nThere's really no reason for plugins to be configured imperatively:\r\n\r\n```\r\n{\r\n  plugins: [\r\n    {\r\n      plugin: 'uglifyjs-plugin',\r\n      options: {\r\n        mangle: true,\r\n        sourceMap: false\r\n      }\r\n     },\r\n     ...\r\n  ]\r\n}\r\n```\r\n\r\nThis can be split\/parsed\/maintained\/merged\/analysed etc.","It's officially time that we start tackling this. With webpack 4 far undergoing its processes in webpack\/webpack#next branch, its time that we at least have the planning and design specifications done for this milestone. \r\n\r\nI'm going to take this on as lead. I would also like 4-10 individuals who would love to be involved with the testing, feedback. @niieani @e-cloud @dmitriid you are all first ones that come to mind in terms of being extremely candid and pragmatic. ","@TheLarkInn  I will say a preliminary yes. As always, life may intervene :(","No worries at all. After I discussed this a bit with @d3viant0ne, I realized there is one thing that blocks us for this:\r\n\r\n1. Need to land our analytics (which will go live in webpack 4). \r\n\r\nHowever this shouldn't stop us from brainstorming ideas. \r\n\r\nOn a shortlist: \r\n\r\nProgressive layering, zero config usability for multiple different assets, etc. but we prescribe the best practices. Then layering becomes, what kind of additions (maybe this is too much like babel presets?)\r\n","`Then layering becomes, what kind of additions (maybe this is too much like babel presets?)`\r\n\r\nThe babel presets were deprecated in favor of `babel-preset-env` where you set a target & it handles the rest.\r\n\r\nIn our case `webpack-preset-env` would be quite a bit more complex but the same approach would in theory be possible.\r\n\r\nAs far as entry level Webpack configs go, that could certain solve a lot of the usability gripes ( less specific config inconsistencies mentioned by @dmitriid ).\r\n\r\nYou could then use a very familiar pattern to build on the default. i.e. \r\n\r\n```\r\nconst Configuration = {\r\n  extends: ['@webpack\/some-preset', 'myPrivatePreset'], \/\/ the base webpack preset has all the defaults\r\n\r\n  rules: {\r\n     ...Extend or override what you want here incrementally\r\n  },\r\n};\r\n\r\nmodule.exports = Configuration;\r\n```\r\n\r\nAlso allows people to build their own base configuration for those of us that want granular control of our entire configuration as well as the ability to publish a base preset.\r\nThis also makes the configuration pattern vary similar & thus familiar to other popular tools in the ecosystem.\r\n\r\nAlso worth noting that outside of solving the layering problem, this could be done in a way where you don't completely shaft lib maintainers for things like `webpack-blocks`\\\r\n\r\nThe problem with trying to go the one ring to rule them all approach is there are a million different valid ways to build a JS app these days. You can't really define a hard set of defaults as once you cover all the use cases, your defaults are gigantic & difficult to maintain.\r\n\r\nSo for this particular portion of the problem, why not try and simplify the composition & maintenance of defaults based on a particular set of use cases that could be published, forked, fine tuned & overriden in the same manner we do with Eslint configurations.\r\n\r\nThis of course has to potential of getting messy with a billion different published configs but much like the eslint world, there is a very clear set of front runners that normally form the basis of users custom configurations, AirBnB's Eslint configuration for example.\r\n\r\nWebpack could maintain a base preset covering the most common default configuration & possibly a few others covering less generic configurations for things like the major frameworks. \r\n\r\nFrom there the community should have an easy enough time layering on complexity as they need it without the burden of starting from an empty configuration as well as making it easy for framework ecosystems to publish presets specific to their best practices.","Providing Neutrino as proof-of-concept of something that already has shown success: https:\/\/neutrino.js.org https:\/\/github.com\/mozilla-neutrino\/neutrino-dev\r\n\r\nNeutrino provides a high-level API on top of webpack, in terms of making configuration extensible, predictable\/deterministic, and easy to use through the use of presets and middleware.\r\n\r\nA user can either use the CLI to use presets (e.g., `neutrino build --use @neutrinojs\/react`), or drop a `.neutrinorc.js` file in their project (using the upcoming Neutrino v8 spec for reference):\r\n\r\n```js\r\nmodule.exports = {\r\n  \/\/ Use a single piece of middleware\r\n  use: [\r\n    '@neutrinojs\/react'\r\n  ]\r\n};\r\n```\r\n\r\n```js\r\nmodule.exports = {\r\n  \/\/ Use multiple pieces of middleware\r\n  use: [\r\n    '@neutrinojs\/airbnb',\r\n    '@neutrinojs\/react',\r\n    '@neutrinojs\/jest'\r\n  ]\r\n};\r\n```\r\n\r\nIt's all very Babel-like, so you can also set options for Neutrino in general, or specific options for presets\/middleware:\r\n\r\n```js\r\nmodule.exports = {\r\n  options: {\r\n    output: 'dist' \/\/ instead of build\/\r\n  },\r\n  use: [\r\n    \/\/ override page title, which internally uses HtmlWebpack{Template\/Plugin}\r\n    ['@neutrinojs\/react', { html: { title: 'My React App' } }]\r\n  ]\r\n};\r\n```\r\n\r\nExtensibility is exposed via the Neutrino configuration API, which uses [webpack-chain](https:\/\/github.com\/mozilla-neutrino\/webpack-chain), an alternate webpack configuration API we created so discreet configurations could still be modified in a predictable way, and completely informed by webpack's own configuration properties:\r\n\r\n```js\r\nmodule.exports = {\r\n  use: [\r\n    '@neutrinojs\/react',\r\n    \/\/ pass a function as middleware to use the Neutrino API\r\n    (neutrino) => {\r\n      \/\/ Change the babel configuration\r\n      neutrino.config\r\n        .rule('compile')\r\n          .use('babel')\r\n            .tap(options => { ...options, plugins: [...options.plugins, 'babel-plugin-whatever'] });\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\nThis is something that is lacking with webpack configuration, because you cannot predict the nature of configuration when it is distributed across presets on npm. If you want to modify a Babel configuration, you must know the index of the rule within the config, you must know what format was used like rules or uses, and that this format isn't the same from one config to the next.","Wow, that neutrino looks appealing & familiar (babel-esque).\r\n\r\nI've done enough projects, though, that I'm ready to have my intuition proven wrong by the analytics coming in Webpack 4, and scoping from there.","@ericclemmons some of it should be *really* familiar :wink: https:\/\/github.com\/mozilla-neutrino\/neutrino-dev\/tree\/master\/packages\/start-server","Exactly. Once we land analytics, we can really carve out some hot paths and\nmake them relevant to our users. Nutrino is a great Nova Ars to look to.\n\nOn Tue, Nov 21, 2017, 5:10 PM Eli Perelman <notifications@github.com> wrote:\n\n> @ericclemmons <https:\/\/github.com\/ericclemmons> some of it should be\n> *really* familiar\n> https:\/\/github.com\/mozilla-neutrino\/neutrino-dev\/tree\/master\/packages\/start-server\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/webpack\/webpack\/issues\/2797#issuecomment-346211895>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/ADQBMKE4JumajFg8McING9-_zNo8Y5H_ks5s43RogaJpZM4JTRm2>\n> .\n>\n","Hey all, we've landed some changes into webpack 4  (IRT zero config, easier commons chunk defaults). I think these things are a great start but doesn't solve the whole story. I think presets could be the next best thing, but we'd like to land presets in either 4.x or 5. So I'm going to change the milestone and keep tracking as we are slowly trying to whiddle down requirements for 4.0 release! Thanks for keeping track of it also. And as always good discussion<3 \r\n","Has anyone considered writing an IDE extension based on [.\/schemas\/WebpackOptions.json](https:\/\/github.com\/webpack\/webpack\/blob\/71a12c8bc1fc06968c5028d03da261bf802f0c51\/schemas\/WebpackOptions.json)?\r\n\r\nI really like the way VSCode handle its `setting.json`, as shown in screenshot:\r\n![image](https:\/\/user-images.githubusercontent.com\/8945315\/39395112-38a8b036-4b0d-11e8-8d75-9d901d71a96b.png)\r\n\r\nBasically it bakes the documentation into autocompletion and code hint, down to available values as enum and description for what each value does. As of IDE support, I think webpack should provide that too.  \r\n\r\nHere's a [example](https:\/\/github.com\/Microsoft\/vscode\/blob\/29bead35f2a5339482158a7d48f7f0f3955629e2\/src\/vs\/editor\/common\/config\/commonEditorConfig.ts#L170) of how VSCode describe it's editor settings. As you can see, it's just JSON Schema, so this is viable.","@niieani mentioned utilizing typescript typings to help. I've tried the `@types\/webpack`. I think it's nice to have TS linting and hinting on my webpack config, but it's not quite there. \r\n\r\nThe missing block is, no description on value.\r\n![image](https:\/\/user-images.githubusercontent.com\/8945315\/39395629-2117823e-4b13-11e8-9a80-723638940582.png)\r\n\r\nTS type system cannot handle describing value, JSDoc style comment can only touch down to property level. Yet I think being able to provide hint a description on what each of the value does really makes the difference in webpack's case. JSON Schema can provide that level of granularity, and in fact we can generate TS typings basing on the JSON Schema. \r\n\r\nSo as of IDE support, my thought is we should definitely write that IDE extension, and put some serious effort to maintain the JSON schema, make it a useful doc, maybe add link to descriptions, help people jump to the right place of the website.","IMO the rollup configuration file is a pretty great inspiration. It's so easy to add additional functionality with the plugins. The plugins can ship their own TypeScript types so their configuration is documented inside the editor, which is not possible with the current way of using strings for the webpack configuration like so:\r\n\r\n```\r\n{\r\n    loader: 'postcss-loader',\r\n    options: {\r\n        plugins: () => [autoprefixer({ flexbox: 'no-2009' })]\r\n    }\r\n},\r\n```"],"labels":["RFC\/Proposal","X3: discussion required"]},{"title":"test\/include\/exclude regular expression path should be OS neutral","body":"The regular expression in the `exclude` property of a loader configuration can be used to exclude file paths, but the paths provided to the regular expressions are operating system dependent, e.g. on Windows the paths are in the form of \"a\\b\\c\" and on Unix-based operating systems \"a\/b\/c\". This makes writing correct regular expressions more difficult (and especially to test them).\n\nMy proposal is to always supply paths in the Unix style to the regular expression (e.g. \"a\/b\/c\"), and to document this clearly.\n","comments":["Note that it supports functions now. I think that gets closer to what you want. There are also a few new fields that might come in handy.","@bebraw \r\nAny specific reason for closing this with a blunt 'fix it yourself'?\r\n\r\nTo have projects handled correctly cross-platform, one needs to take care to write excludes either with obnoxiously bloated regexes like\r\n\r\n```js\r\nexclude : \/(?:\\\/|\\\\)excluded(?:\\\/|\\\\)path-segment(?:\\\/|\\\\)\/\r\n```\r\n\r\nor use the function syntax everywhere with custom path normalization strewn in, e.g.\r\n\r\n```js\r\nexclude : (path) => \/\\\/excluded\\\/path-segment\\\/\/i.test(makeOSNeutral(path))\r\n```\r\n\r\nIs that the kind of burden you should be placing on authors?\r\n\r\n Webpack itself is in a position to offer a 'OS-neutral' POSIX path here &mdash; What users expect is being offered here in 99.999...% percent of all cases to begin with... &mdash; which will still be *nix-compatible and shouldn't break the status quo.\r\n\r\nImho it's downright negligent to do nothing and tell users to fix it themselves. Webpack is complicated enough without latent bugs being introduced into build configurations by implicit OS dependencies...\r\n\r\n\r\n","@rjgotten Sorry about that. Re-opened. PR welcome. \ud83d\udc4d ","**This issue had no activity for at least half a year.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","Hi, any update on this issue?"],"labels":["enhancement"]},{"title":"Unexpected behavior with linked NPM modules","body":"## tl;dr\n\nWebpack should produce the same build whether a module is linked or not.\n## In depth\n\nConsidering the following dependency trees:\n\n``` js\nproject@1.0.0\n\u251c\u2500\u2500 babel-runtime@5.1.9\n\u2514\u2500\u2500 sub-project@1.0.0\n```\n\n``` js\nsub-project@1.0.0\n\u2514\u2500\u2500 babel-runtime@5.1.9\n```\n\n**Notice:** NPM does not include `babel-runtime` under `sub-project` when `npm list` is called from `project`.\n\nWebpack builds something link:\n\n``` js\n[0] multi main 52 bytes {0} [built]\n[1] .\/index.js 2.08 kB {0} [built]\n[2] .\/~\/babel-runtime\/helpers\/interop-require-wildcard.js 148 bytes {0} [built]\n[3] .\/~\/sub-project\/index.js 2.46 kB {0} [built]\n```\n\nIf we run `npm link sub-project` we obtain the following tree:\n\n``` js\nproject@1.0.0\n\u251c\u2500\u2500 babel-runtime@5.1.9\n\u2514\u2500\u2500 sub-project@1.0.0 -> \/Users\/fc\/Development\/sub-project\n```\n\n**Notice:** `babel-runtime` still doesn't appear under `sub-project`.\n\nBut building the project again will duplicate its dependencies:\n\n``` js\n[0] multi main 52 bytes {0} [built]\n[1] .\/index.js 2.08 kB {0} [built]\n[2] .\/~\/babel-runtime\/helpers\/interop-require-wildcard.js 148 bytes {0} [built]\n[3] \/Users\/fc\/Development\/sub-project\/index.js 2.46 kB {0} [built]\n[4] \/Users\/fc\/Development\/sub-project\/~\/babel-runtime\/helpers\/interop-require-wildcard.js 148 bytes {0} [built]\n```\n\nUsing `resolve.root` or changing the resolve scope of loaders do not change anything.\n## Expectations\n\nIt would link to be able the link my in-development modules into my project using `npm link` without having to tweak the webpack config.\n\n**The real problem isn't the build size but the unexpected behaviors raised but duplicated dependencies.**\n","comments":["See #943 for related discussions. cc @sokra @magsout @nyalab\n","Mhmmm ... we've discussed about that already but I can't find the issue anymore. The problem is that linked modules have another resolved filename and I'm not sure if we can just change that. For instance, node's `__filename` also resolves to the real path...\n","Problem is React uses some global definitions and static objects (such as `ReactInstanceMap`). When included twice, React is unable to figure out if the component exists. In some complex cases using `context`, it totally fails.\n","I see the problem, but I don't know how to solve it. webpack implements the node.js resolving algorithm: https:\/\/nodejs.org\/api\/modules.html#modules_all_together\nThis describes how modules are handled and which places should be looked up for dependencies (that's not the application node_modules folder).\n\nSo the problem is by design and should occur in node.js too.\n\nA workaround is to let webpack prefer the application node_modules with: `resolve.root` and `resolveLoader.root` = `path.join(__dirname, \"node_modules\")`\n","Unfortunately settings `resolve.root` and `resolveLoader.root` does not solve the issue.\n\n```\nHash: 6d255d7e6eb942c864e9\nVersion: webpack 1.8.4\nTime: 3896ms\n                    Asset       Size  Chunks             Chunk Names\n               index.html  345 bytes          [emitted]\n                  main.js    4.71 MB       0  [emitted]  main\nchunk    {0} main.js (main) 1.67 MB [rendered]\n    [0] multi main 52 bytes {0} [built]\n...\n[478] .\/~\/react\/lib\/toArray.js 2.08 kB {0} [built]\n...\n[522] \/Users\/fc\/Development\/xxxxxx\/~\/react\/lib\/toArray.js 2.08 kB {0} [built]\nwebpack: bundle is now VALID.\n```\n","I am having this issue too. At some point my changes to my module stopped rebuilding the webpack bit of a project I was integrating it with.\n","Hate to bother but is there any update about this issue?\n","the workaround explained using `npm link` to get one version of react only (on both webpack and node) helped me https:\/\/github.com\/webpack\/webpack\/issues\/966#issuecomment-95491120\n","@jasonslyvia I got around this too that same day. I had to gut the linking and dump every cache and node module I could find. I still don't know if the root of the issue was this code or my fault.\n","I have this same issue \u2014 the fix that @MoOx specifies works, but I have packages with a bunch of shared dependencies, so it's not a viable long term solution.\n","Preferring the application node_modules with `resolveLoader.root` worked well enough with npm 2 - but with npm 3 it means that you will randomly pull in the wrong version of a package when there are duplicate versions within the app.\n\nFor instance - say my app uses moduleA which depends on lodash@3 and moduleB which depends on lodash@4. The npm3 install ends up looking like this:\n- lodash@3\n- moduleA\n- moduleB\n  - lodash@4\n\nIf I set `resolveLoader.root` - moduleB ends up pulling in lodash 3 rather than 4 (since lodash@3 just happened to get installed at root).\n","So for this particular problem, there are now two useful solutions (but quite tricky ones): \n\n**1.)** npm linking the linked module's dependencies to the `project`'s dependency, i.e. https:\/\/github.com\/webpack\/webpack\/issues\/966#issuecomment-95491120\n\n**2.)** sharing a `node_modules` folder between linked module and `project`, i.e.\nhttps:\/\/github.com\/webpack\/webpack\/issues\/554#issuecomment-203128656\n\nI don't like either of those due to their manual\/repetitive\/unstable nature. I'd prefer this solution: https:\/\/github.com\/aurelia\/webpack-plugin\/issues\/44#issuecomment-238028171, a webpack ResolverPlugin that replaces the linked modules node_modules requires with the `project`'s. That's what we're attempting. Any other solutions out there? \n\n**Update:** (thanks @ganmor https:\/\/github.com\/webpack\/webpack\/issues\/985#issuecomment-256300077)\n\n**3.)** not using npm link at all for development, but instead using some kind of file syncing tool, i.e. https:\/\/github.com\/wix\/wml or http:\/\/www.freefilesync.org\/\n","One possible solution is not using npm link at all.\nIf you are not using windows, here is a nice alternative https:\/\/github.com\/wix\/wml\n","Uhg this issue is plaguing me right now. The second I link a package in that has a dependency in common with the parent project, my build contains duplicates.\n","I've written a resolve plugin which takes care of this issue.\n\nWhat is does is tries to resolve any module calls to the closest one to the provided `rootDir`, always preferring local ones, as long as the version of the closer dependency is within the requested package's SemVer range. Useful especially when using linked modules, but even when not using linked modules it it's pretty useful, as you don't end up with duplicate copies of the same package if another copy is within a nested `node_modules`.\n\nIt's called [RootMostResolvePlugin](https:\/\/github.com\/niieani\/webpack-dependency-suite\/blob\/master\/plugins\/root-most-resolve-plugin.ts) and it's a part of the [webpack-dependency-suite](https:\/\/github.com\/niieani\/webpack-dependency-suite) (sorry, no docs yet).\n\nConfiguration is pretty simple ([example](https:\/\/github.com\/aurelia\/skeleton-navigation\/blob\/3eb4d3fa65b60731493c79235e547792324cc3e7\/skeleton-typescript-webpack-experimental\/webpack.config.ts#L367-L370)).\n\nMake sure to put the plugin in the `resolve.plugins` array of your configuration (not `plugins`).\n\nWhen instantiating, the first parameter should be the root directory of your project (or the one in which context you want to resolve) and the second, optional parameter is whether you want to enforce it for all paths (e.g. including linked modules, use `true`), or only for nested `node_modules` (`false`).\n","Hey, just a quick update on our side. We've managed to solve our problems using `npm link`ed dependencies by:\n\nUsing Webpack 2 and setting \n\n```\n  resolve: { \n      symlinks: false,\n      modules: [\n        path.resolve(__dirname, '..', 'node_modules'),\n        'node_modules'\n      ],\n  }\n```\n\nSo the local\/root node_modules is always preferred, and symlinks are not resolved, i.e. same as the node `--preserve-symlinks` options, this was implemented in: https:\/\/github.com\/webpack\/webpack\/issues\/2937\n\nThis is working as expected for us, if that helps anyone stumbling upon this issue.\n","@jure, you're opening your project up to potential problems if you get many major\/minor versions of the same package dependent on a different one, because `resolve.modules` does not verify the version of the package. If you want to mitigate that and ensure you are only including modules that match the requesting module's SemVer constraint, you can use the resolve plugin I mentioned before.\n","Can someone check this against webpack 2? Thanks.","@bebraw The problem described in the issue is still present in Webpack 2, and as far as I understand will not be fixed, because the dependency resolution algorithm is based on the one provided by Node. Webpack works properly, but it's an arguably bad design decision on Node's part that Webpack follows. A webpack resolve plugin can be used to mitigate the problem successfully.","just to provide a bit more insight of what is working, i was able to get this working in webpack 2 with a similar `resolve` config as above. thanks @jure!\r\n\r\n```js\r\nresolve: { \r\n  symlinks: false,\r\n  modules: [path.resolve('node_modules')],\r\n}\r\n```\r\n\r\nit seems like it would pretty safe to default to the local `node_modules\/` without needing to configure `resolve.modules`, maybe based on `context`?","@travi not at all safe. If you have `lodash` version 4 in `node_modules` and a package you're using requires, say, `lodash` version 2, it will fail with `modules: [path.resolve('node_modules')]`, as the package would actually try to require `lodash` v4 in place of v2. \r\n\r\nYou should use `RootMostResolvePlugin` as it does essentially what `modules: [path.resolve('node_modules')]` does but also does a `semver` check on top, to see if the packages are compatible.","@niieani i understand your point, but if i had a situation like that, i would be wanting to track it down and eliminate it anyway. having multiple versions like that would result in multiple version included and inflating the bundle, so even when not linking, i would want to enable deduping those situations.","@niieani Thanks. Your plugin fixes this nicely npm@4.3.0, webpack@2.2.1","@niieani I tried to use your plugin with a lerna based repo but unfortunately it does not work for me (webpack@2.2.1).\r\n\r\nI added several logs into your plugin and in my case it will never reach the following line https:\/\/github.com\/niieani\/webpack-dependency-suite\/blob\/f36e40edd64ebc3a045b76fe2735f868bd005b3e\/plugins\/root-most-resolve-plugin.ts#L40.\r\n\r\nThe reason for this is that the _issuer_ information was removed in https:\/\/github.com\/webpack\/webpack\/commit\/da29d21ae44056ccbd525282300df7184e922d97#diff-1fd8fe07e83988b2301f9bad408cf5c2 and therefore it will never reach the code where the magic happens (contextInfo was replaced with an empty object).\r\n\r\nTo get this working again I had to modify the `NormalModuleFactory.js` inside the `node_modules\/webpack\/lib` folder and replaced `var resolveContextInfo = {};` with `var resolveContextInfo = contextInfo;`.\r\n\r\nThis brings me to the question if this needs to be fixed by webpack or can we fix the plugin and access the necessary _issuer_ information in another way?\r\n\r\nMaybe @sokra can help us to understand why `resolveContextInfo` was changed to an empty object. I guess that this changed cause issuer in context was never used before in the whole codebase. At least I wasn't able to find any usages of the issuer in the resolving process.\r\n\r\nBtw this plugin is pretty cool, especially in combination with [duplicate-package-checker-webpack-plugin](https:\/\/github.com\/darrenscerri\/duplicate-package-checker-webpack-plugin).\r\n\r\nEdit: Created a PR to get this working again #4622","Won\u2018t `symlinks: false` break HMR, so when I change something in the linked module, the client project does no longer update via HMR automatically?","#811 looks related as well.","I stumbled upon this issue in a monorepo where one package is a dependency of another via `\"other-package\": \"file:..\/other-package\"`.\r\n\r\nBut this is no webpack issue, the root cause seems to be that npm installs the deps of the sub project in the sub projects _node_modules_ folder instead of the parent projects one (as it is normally the case).\r\n\r\nThere seems to be a few issues open in npm regrading this [1], [2], [3]. The last one points out, that this behavior is per spec (see: [4]).\r\n\r\nBut I found another solution for this: using yarn instead of npm will not create the unnecessary _node_modules_ folder in the sub project and install all deps in the parent project.\r\n\r\n1: https:\/\/npm.community\/t\/npm-does-not-flatten-packages-during-install\/3989\/3\r\n2: https:\/\/npm.community\/t\/npm-doesnt-hoist-linked-module-dependencies-to-project-level-when-new-dependencies-are-added-to-linked-module\/5717\/3\r\n3: https:\/\/npm.community\/t\/npm-doesnt-install-local-package-dependencies\/805\r\n4: https:\/\/github.com\/npm\/cli\/blob\/latest\/doc\/spec\/file-specifiers.md#installation","I encountered this issue and I was able to fix it with the `RootMostResolvePlugin` referenced above.\r\n\r\nMy project was on webpack 1, so I just updated to webpack 2.x and was able to use the plugin. But I'm noticing on the repository that it seems like the plugin isn't available for webpack 4.x and isn't actively developed anymore, is anyone aware of another alternative that's compatible with the newest webpack? https:\/\/github.com\/niieani\/webpack-dependency-suite\/issues\/31","Although it would stray from the standard Node.js resolution algorithm, I strongly believe Webpack should be smarter here (at least behind an option) and prefer packages found in the app's `node_modules` (the root-most `node_modules`) if those packages meet the semver requirements of the other packages depending on them.\r\n\r\n@niieani's RootMostResolvePlugin (above) does exactly this.\r\n\r\n@sokra Do you think it would be worth making this behavior the default in Webpack?","@niieani I tried `RootMostResolvePlugin` with Webpack 4.16.4, and I get\r\n\r\n```\r\nError: Plugin could not be registered at 'resolved'. Hook was not found.\r\n```\r\n\r\nDoes it need an update? Does it need to use the `afterResolvers` hook?\r\n\r\nEDIT: Oh! It needs to be placed in `webpackConfig.resolve.plugins`, not `webpackConfig.plugins`.","Hey guys,\r\nI ran into this issue while trying to develop a library feature with an optional dependency. I noticed that my demo project - although not requiring the dependecy - still got it bundled. So i removed the optional dependency from my libs module folder, which broke the second demo project that should have had this dependency.\r\nIt took my quite sometime and testing until i finally found this issue and #811.\r\n\r\nCurrently, this is mentioned in https:\/\/webpack.js.org\/configuration\/resolve\/#resolve\r\nWhat do you guys think about adding a passage in https:\/\/webpack.js.org\/guides\/author-libraries\/ as well?","Should work with `webpack@5`. Feel free to report new issue with reproducible repo.","@vankop is there a way to get this functionality in webpack@4 as well?","no, only critical fixes for webpack@4 is possible..","@vankop are there any docs about how this is supposed to work in webpack@5 or what are the limitations? cause I'm still running into the same issue - three.js is loaded both from the package's own `node_modules` dir and also from a symlinked local packages `viewer` `node_modules` dir (so `.\/node_modules\/three` and `..\/viewer\/node_modules\/three`)","@fabis94 from your description is unclear what is wrong.. \r\n> three.js is loaded both from the package's own node_modules dir and also from a symlinked local packages\r\n\r\nmaybe some dependency ( or different app modules ) is trying to resolve `three.js` and resolve wrong one..\r\n\r\nProbably in your case problem is not related to symlinks.. ( it will work same way with non-symlink version ) you can reduce this to reproducible repo I will take a look.","I read the description once more.. I thought this related to symlinks..\r\n\r\nIssue still exists\r\n\r\n_____\r\n\r\nBasically https:\/\/github.com\/webpack\/webpack\/issues\/985#issuecomment-93765557 is an answer. Since webpack implements Node.js resolve algorithm there is no way to solve this..","Just an idea, but why not just compare if the same version of the same package is already bundled in? Or make that an opt-in feature? Like for example, check first `three.js` package.json to resolve version, and then when `three.js` is about to be bundled in from another location, check the `package.json` again and stop doing so if it's the same.\r\n\r\nThe underlying issue is that after linking in modules, npm doesn't deduplicate the node_modules tree so you can end up having `\/node_modules\/three` and `..\/symlinked-package\/node_modules\/three` both available. And then when `three` is imported from `symlinked-package` it will use its own local `three` version, but when `three` is imported by the host application built by webpack it'll use `\/node_modules\/three`, resulting in 2 three.js versions bundled in at the same time.\r\n\r\nBut this seemingly npm-specific issue is definitely not going away, considering that symlinking packages into node_modules is a very common workflow. So I think it makes sense for the improvement to be introduced on the webpack side, instead.","\"fix\" is possible, but this breaks Node.js resolution algorithm.","I don't really see why people would want the current behaviour (same package with same version being bundled twice), but it could be an opt-in feature, if you think it's gonna cause issues for some.\r\n\r\nAnyone trying to deal with these issues and spending hours on it not getting anywhere isn't going to care that the Node.js resolution algorithm is broken, getting dependencies to be properly bundled without duplicates is more important. And of course - by opting in you'd understand what you're doing and the consequences."],"labels":["question","webpack-4","webpack-5"]},{"title":"A way to analyze why modules were flagged as \"not cacheable\".","body":"Currently I'm trying to reduce our massive build times in the watch loop, but I can't figure out why none of the modules are marked as cacheable. I've been trying to drop loaders and so on to see where the problem is coming from, but obviously if you omit a necessary step the build starts breaking so this hasn't gotten me too far.\n\nIt would be extremely useful if there was an easy way to see where the module(s) was\/were flagged \"not \"cacheable\", so one could potentially fix the misbehaving plugin.\n","comments":[":+1: to this. \n","+1\n",":+1:  \n",":+1: \n","\ud83d\udc4d","\ud83d\udc4d","Why do people have to spam thumbs up? What on earth do you think the emoji is their for on the OP?","+1 = : +1 : (without the spaces) = :+1:\r\n\r\nIt express the fact that people would love to see this feature, also it may act as a \"bump\".\r\n\r\nI hope this explanation helped you.\r\n\r\nRegards,","2 years later, I'm still wondering :)","What are the most common reasons a module is marked in such a way?\r\nCan anyone tell? (before it's implicit in possibly future versions of webpack)","Same issue. When I run the dev-server in watch mode, by simply adding a space to a file and saving, the webpack recompile takes quite a while. I am used to this being very quick in the past, at other jobs I've had. But here, when I simply change a space, it recompiles a tons of things, and outputs them all as `[not cacheable]`. Does anyone know how to find out why? @TheLarkInn do you have any tips to help us troubleshoot?","OK. So, I found that one of my loaders was causing my JS files to be not-cacheable. Once I removed it, it worked. So... you can try to remove your loaders and see if that fixes it. Even if your app doesn't run, you should notice that things at least build and are cacheable. Once you find the bad-acting loader, you can then try to configure it to allow things to be cacheable. ","some issue, any idea pls","Still no solution?\r\n\r\nCome on guys, its 2017","> Come on guys, its 2017\r\n\r\nIt's 2019 \ud83e\udd10","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","bump","Come on guys, its ~~2017~~ 2022","Still no answer its 2023 guys :\/"],"labels":["enhancement","P4: Nice To Have"]},{"title":"Use a HTML file as an entry point?","body":"I'm trying to figure out what's the best way to make webpack aware of the main HTML file (for a single page app).\n\nAFAIK i have these options:\n# specify an .js file as entry point\n\nThat JS file needs to have `require(\".\/index.html\");` so that the HTML file is identified as an dependency and included in the build.\n\nTo support that I have the following Webpack configuration:\n\n``` javascript\nloaders : {\n  { test: \/\\.html\/, loader: 'file?name=[name].[ext]' }\n}\n```\n\nProblems:\n- Seems awkward to me to define the HTML file as a dependency for a JS file (instead of the other way round)\n- Additional dependencies in the HTML code (like images) are not being identified.\n# specify the .html file as entry point and using `file-loader` for HTML files\n\nProblems:\n- Dependencies aren't being detected and thus no JavaScript code is bundled.\n# specify the .html file as entry point and using `html-loader` for HTML files\n\nSee sample config here: https:\/\/gist.github.com\/jampy\/44faf0c18fd64b6dd1fd\n..and the HTML file: https:\/\/gist.github.com\/jampy\/a2dd493901cd6dc5ae8b\n\nProblems:\n- The `html-loader` apparently detects dependencies like images, but seems to ignore the `.js` files referenced via `<script>` tags.\n- The `.html` file itself is converted to JavaScript and included in the .js file, which is useless.\n# What's correct?\n\nWhat am I supposed to do to let webpack handle the HTML file and it's dependencies (including JavaScript).\n","comments":["Correct is to split your application into two parts:\n- client-side javascript (`target: \"web\"`) \n- (pre)rending on server-side (`target: \"node\"`) (this generates the HTML) \n\nYou can do this by exporting an array of configurations from the webpack.config.js.\n\nFor a simple static website you can do this:\n\n``` javascript\nmodule.exports = [\n  {\n    name: \"client\",\n    target: \"web\",\n    \/* your client side configuration *\/\n  },\n  {\n    name: \"rendering\",\n    target: \"node\",\n    entry: {\n      \"index.html\": \".\/app\/index.html\",\n    },\n    output: {\n      path: path.resolve(\"build\")\n      filename: \"rendering\/[name].js\"\n    }\n  }\n]\n```\n\n``` sh\nwebpack && node -e \"console.log(require('.\/build\/render\/index.html.js'))\" > build\/public\/index.html\n```\n\nMaybe the script part can be moved into a webpack plugin. This would be more usable and dev-server combatible...\n","You could try this plugin https:\/\/www.npmjs.org\/package\/html-webpack-plugin\n","Thanks. I forgot to mention that in the first post.\n\nStill, that's similar to `file-loader`, meaning that additional dependencies in the HTML file (like images) aren't bundled (when using a custom template). \n","@jampy did you ever come up with an acceptable solution?  I'm trying to wrap my head around this as well.\n","I think this would require a change in the [html-loader](https:\/\/github.com\/webpack\/html-loader). It needed to turn this html:\n\n``` html\n<script src=\".\/some\/module.js\"><\/script>\n```\n\ninto\n\n``` javascript\nmodule.exports = \"<script src=\\\"\" + __webpack_public_path__ +\n    JSON.stringify(urlToNewChunk) + \"\\\"><\/script>\";\n```\n\nwhile emitting a new chunk to the output folder with `.\/some\/module.js` as entry point.\n\n@sokra Is that possible?\n","While webpack is great at generating javascript if you want to use hashes for caching you need to do post build processing to update the html.  It seems like this should be easier.  \nHaving the html-loader be the entry point rather than the javascript makes a lot more sense to me for brower targets, since ultimately the entry point from a browser is as an html page.  \nIt seems like generating processed html would make it easy to link to cachable resources and maybe even automatically apply extract text plugin for referanced css and such.\nI tried using the html-webpack-plugin with some success. It doesnt seem to hot reload in the dev server, but I really like the idea of including l javascript source files straight from html and have webpack update the links automatically!\n","Related discussion #220 \n","I am running in to the same issue, where I'd like to inline scripts into an HTML entry point. As @jhnns brought up, `html-loader` could be modified to produce output that looks like \n\n``` js\nmodule.exports = \"<script src=\\\"\" + __webpack_public_path__ +\n    JSON.stringify(urlToNewChunk) + \"\\\"><\/script>\";\n```\n\nIt is, however, wrapped in a `webpackJsonp` function. For my purposes, i'd like to get the output of this as plain HTML (This is for an iframe which gets requested 80,000 times a second, so it's important to not have the iframe link to external resources). Changing around the html loader's output is easy enough, but then I am still left with the resulting `webpackJsonP` function wrapping my output...\n\nDoes anyone know how to prevent that so I can output plain HTML?\n","Might be able to use and\/or copy bits from extract-text-webpack-plugin\n","Since HTML files are the entry points for browsers being able to do this just seems logical.\nI'm experimenting with different ways of doing this, and have so far been able to compile a jade file (html like) entry point, with some issues.\n\n**webpack.config.ls**\n\n``` livescript\nrequire! <[ webpack path ]>\nExtractTextPlugin = require \"extract-text-webpack-plugin\"\n\n# Webpack plugins\ncss-extractor  = new ExtractTextPlugin \"css\", \"[name].[id].css\"\nhtml-extractor = new ExtractTextPlugin \"html\", \"[name].html\"\n\nmodule.exports = do\n  output:\n    path: path.join __dirname, \"build\"\n    public-path: \"\/assets\"\n    filename: \"[name].js\"\n    chunk-filename: \"[name].id.js\"\n\n  entry:\n    index: \".\/client\/index.jade\"\n\n  devtool: \"source-map\"\n\n  plugins: [css-extractor, html-extractor]\n\n  resolve:\n    extensions: ['', \".js\", \".ls\", \".css\", \".styl\", \".html\", \".jade\"]\n\n  module:\n    loaders:\n      * test: \/\\.ls$\/\n        loader: 'livescript'\n      * test: \/\\.styl$\/\n        loader: css-extractor.extract \"style\", \"css!stylus\"\n      * test: \/\\.jade$\/\n        loader: html-extractor.extract \"html\", \"apply!jade\"\n```\n\n[Gist for apply loader](https:\/\/gist.github.com\/mogelbrod\/20e65bf18c710e6b808a)\n\n**Current problems:**\n- Compiled html includes `\/\/# sourceMappingURL=index.html.map` due to devtool option. Haven't found a way to disable this without modifying the ExtractTextPlugin. It's inserted by the Webpack EvalDevToolModulePlugin, which is injected before any loader code is executed.\n- Can't figure out how to `require()` scripts in `index.jade`:\n  - `script(src=require('.\/common.ls'))` inserts `src=\"[Object object]\"`\n  - `script(src=require('file?name=[name]-[hash].js!.\/common.ls'))` correctly inserts `src=\"\/assets\/common-938e5a0f3a70d579b6d485dbb56f5fa9.js\"`, but `require()`s inside it doesn't seem to be resolved.\n","Since HTML files require scripts, css files, etc that are built by webpack, there needs to be a way to manage HTML files this way with webpack. There should be a way to treat `<script src=\"..\/local\/script.js\"><\/script>` as any other webpack require where it inlines the hashed name of that file and builds it to an html file.\n\nThis plugin: https:\/\/github.com\/skozin\/webpack-path-rewriter comes close, except it doesn't reload when you change files and webpack is watching (so your html doesn't update until you entirely re-run webpack), and the way you require entry point files is by having to prefix them with `something-[hash]` and then in the html file doing `<script src=\"[[something-*]]\"><\/script>` which is less than ideal.\n\nThe HTML file a likely candidate for a true entry point to an application, so it should be easy for it to access the dependency graph.\n","I've spent a whole afternoon on this until I realized this all breaks down with the current webpack-dever-server implementation generating the html.\n\n@sokra I am willing to work on this if you could provide some guidance. This should really be easier.\n","Same here. At the moment my `build\/` directory contains only a `bundle.js` file but not my `index.html`.\nFortunately there is a plugin for this: [html-webpack-plugin](https:\/\/github.com\/ampedandwired\/html-webpack-plugin). But why we have to use a plugin? Is there a different approach in webpack I am missing?\n","This is not as trivial as you think, because it breaks one major assumption in webpack: Every \"webmodule\" can be represented as JavaScript.\n\nSure, it is possible, to represent HTML as JavaScript. The html-loader does that, it turns something like\n\n``` html\n<img src=\".\/some-image.jpg\">\n```\n\ninto \n\n``` javascript\nmodule.exports = \"<img src=\\\"\" + require(\".\/some-image.jpg\") + \"\\\">\";\n```\n\nwhich can be interpreted by webpack easily. It's another case with `index.html`. It must stay HTML.\n\nThat's why the extract-text-webpack-plugin or the html-webpack-plugin is probably the right approach.\n","Thank you for clarifying :+1: \nCould you add a description or a example or something to the webpack [website](http:\/\/webpack.github.io) that explains the wohle thing? For beginners it's a little bit confusing.\n","+1 on a little info around this in the documentation, i just burned an hour or two trying to grok this before stumbling across this thread...\n","I had the same idea, using index.html as the entry point for the app is the most logical. It would also allow changing some URLs to CDN URLs and basically do everything that grunt\/gulp does, but dependency-driven.\n\n@mogelbrod I think you need to do `\"file!js?path\/to\/app.js\"` inside the html so that it parses the js as js first, resolving all require calls. It would be cool if you could specify sub-loaders, meaning a loader configuration that only applies for files that are matched in the regular loader configuration.\n\nThen the only problem is getting an actual `index.html` file out of it, I'm looking at extract-text-webpack-plugin now. Alternatively I could make an entry.js file that simply requires the index.html file.\n","@mogelbrod what is that apply loader you use in the html loader configuration?\n","@wmertens [Gist for a simple apply loader](https:\/\/gist.github.com\/mogelbrod\/20e65bf18c710e6b808a)\nLooking forward to reading about any findings you do! =)\n","@mogelbrod I ended up not needing it, I used your text extractor configuration and configured my main script to be written to file after converting. Note that the html loader doesn't support a loader configuration in the source attributes so I had to do it in the webpack configuration.\n\nThis setup almost works, but the included script doesn't have the webpack bootstrap code :cry:. So the html text extractor should in fact replace all to-be-bundled script tags with a single script tag that loads the bundle js and then requires all the removed scripts in the same order.\n\nRight now, my resulting index.html has `<script src=\"a66188bc09c9607710dbfa1c54f85a98.coffee\">` and the bundled \"index.html\" entry point is `eval(\"\/\/ removed by extract-text-webpack-plugin\\n\\n\/*****************\\n ** WEBPACK FOOTER\\n ** .\/client\/index.html\\n ** module id = 3\\n ** module chunks = 0\\n **\/\\n\/\/# sourceURL=webpack:\/\/\/.\/client\/index.html?\");`. The script is simply the webpackified script.\n\nSo it's feasible by combining the html loader and text extractor plugin, provided the loader knows what the js bundle path will be and the text extractor can leave some require statements in place. Then when visiting index.html the resulting bundle js will be loaded, executed, require the index.html entry point which loads the desired scripts.\n\nIt would be really cool if this worked, because it opens the door for lots of html, script and image processing using minimal configuration.\n\nMy setup:\n\nindex.html:\n\n``` html\n<!DOCTYPE html>\n<html lang=en>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <link href='\/\/fonts.googleapis.com\/css?family=Roboto:500,300,400' rel='stylesheet' type='text\/css'>\n  <body>\n    <div id=\"app\">\n        <p>LOADING&hellip;<\/p>\n    <\/div>\n    <script type=\"text\/javascript\" src=\".\/main.coffee\" charset=\"utf-8\"><\/script>\n  <\/body>\n<\/html>\n```\n\nwebpack.config.coffee:\n\n``` coffeescript\nwebpack = require('webpack')\nExtractTextPlugin = require \"extract-text-webpack-plugin\"\n\n# Webpack plugins\ncssExtractor  = new ExtractTextPlugin \"css\", \"[name].[id].css\"\nhtmlExtractor = new ExtractTextPlugin \"html\", \"[name].html\"\n\nisProd = (process.env.NODE_ENV is \"production\")\nconsole.log \"Configuring webpack for #{if isProd then \"production\" else \"dev\"}\"\n\nentries = if isProd then [] else [\n    'webpack-dev-server\/client?http:\/\/0.0.0.0:8080'\n    'webpack\/hot\/only-dev-server'\n]\n\nmodule.exports =\n  # use eval-source-map if you want coffeescript in the browser dev tools\n  devtool: if not isProd then 'eval' # 'eval-source-map'\n  devServer:\n    # allow everyone in\n    host: '0.0.0.0'\n  entry: app: entries.concat [\n    # '.\/client\/main.coffee'\n    '.\/client\/index.html'\n  ]\n  output:\n    pathinfo: true\n    path: '.\/build'\n    filename: 'bundle-[name].js'\n    \"chunk-filename\": \"[name].id.js\"\n  plugins: [cssExtractor, htmlExtractor]\n  resolve:\n    modulesDirectories: [ 'node_modules', 'client']\n    # List of automatically tested extensions\n    extensions: [\n      ''\n      '.js'\n      '.json'\n      '.cson'\n      '.coffee'\n    ]\n  module: loaders: [\n    {\n      test: \/\\.jsx$\/\n      loader: 'react-hot!jsx?harmony'\n      # exclude: \/node_modules\/\n    }\n    {\n      test: \/\\.coffee$\/\n      loader: 'react-hot!coffee!cjsx'\n      exclude: \/node_modules\/\n    }\n    {\n      test: \/main\\.coffee$\/\n      loader: 'file!react-hot!coffee!cjsx'\n      exclude: \/node_modules\/\n    }\n    {\n      test: \/\\.json$\/\n      loader: 'json'\n    }\n    {\n      test: \/\\.cson$\/\n      loader: 'cson'\n    }\n    {\n      test: \/\\.css$\/\n      loader: 'style!css'\n    }\n    {\n      test: \/\\.less$\/\n      loader: 'style!css!less'\n    }\n    {\n      test: \/\\.html$\/\n      loader: htmlExtractor.extract 'html?attrs=script:src'\n      #  'file?name=[path][name].[ext]&context=.\/client!html?attrs=script:src'\n    }\n    {\n      # Just reference all the rest\n      test: \/\\.(png|otf|eot|svg|ttf|woff2?)(\\?.*)?$\/\n      loader: 'url?limit=8192&name=[path][name].[ext]&context=.\/client'\n    }\n  ]\n```\n","So as a TL;DR: You cannot use the HTML as an entry point right now.\n\nTo do it, there needs to be a loader+plugin, performing these steps:\n- loader: like [html](https:\/\/github.com\/webpack\/html-loader\/blob\/master\/index.js) loader\n  - create javascript code that emits the html as a string\n  - convert resource tags into require calls\n    - script tags should be stripped and replaced with a single placeholder script tag loading the bundle\n      - **the html loader does not do this**\n    - other resources should be forced to pass through the file loader, or optionally converted to inline (e.g. font css)\n      - **the html loader does not do this**\n    - optionally: leave third-party scripts alone or change their URL (e.g. libraries on CDN) or inline them (e.g. google font loader), as long as they don't use require.\n    - obviously this allows transforming less, sass, coffeescript, images, ...\n- plugin: like [extract-text](https:\/\/github.com\/webpack\/extract-text-webpack-plugin\/blob\/master\/index.js) plugin\n  - Replace the placeholder script tag src with the path to the relevant bundle file (possibly chunked)\n    - **the extract-text plugin does not do this**\n  - Emit the HTML as a file and in the module source require() all the script resources\n    - **the extract-text plugin removes everything from the module source**\n\nThe webpack configuration would only require setting up the plugin since that can set up the loader.\n\nI don't feel up to making this but I would be super grateful if someone would. This is IMHO the missing functionality to completely replace gulp\/grunt (npm run allows running scripts).\n","Nice findings @wmertens! I'm not yet familiar enough with Webpack to implement what you're suggesting, but totally agree on your last point and am very interested in any further progress on this issue.\n","Extra puzzle piece: In a plugin you can access the filenames of chunks, see https:\/\/github.com\/sporto\/assets-webpack-plugin\/blob\/master\/index.js#L62\n","Ideally you'd be able to do something like:\n- assets\/index.html:\n  \n  ``` html\n  <!DOCTYPE html>\n  <html>\n  <!-- browser assets -->\n  <link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"apple-touch-icon-114.png\">\n  <meta name=\"msapplication-TileImage\" content=\"windows-tile.png\">\n  <link rel=\"icon\" sizes=\"any\" mask href=\"favicon.svg\">\n  <link rel=\"icon\" type=\"image\/x-icon\" href=\"favicon.ico\">\n  <link href=\"..\/src\/style.css\" media=\"all\" rel=\"stylesheet\" \/>\n  \n  The content\n  \n  <script src=\"..\/src\/app.js\"><\/script>\n  <\/html>\n  ```\n- src\/style.css:\n  \n  ``` css\n  \/* special entry that text-extract-plugin should place extracted CSS in *\/\n  \/* text-extract-plugin \"style.css\" begin *\/\n  \/* text-extract-plugin \"style.css\" end *\/\n  ```\n- src\/app.js:\n  \n  ``` js\n  \/\/ Your app\n  ```\n\nand then in webpack you make the entry be \"file?name=index.html!val!html!assets\/index.html\", which would result in a html like:\n\n``` html\n<!DOCTYPE html>\n<html>\n    <!-- browser assets -->\n    <link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"hash1.png\">\n    <meta name=\"msapplication-TileImage\" content=\"hash2.png\">\n    <link rel=\"icon\" sizes=\"any\" mask href=\"hash3.svg\">\n    <link rel=\"icon\" type=\"image\/x-icon\" href=\"hash4.ico\">\n    <link href=\"hash5.css\" media=\"all\" rel=\"stylesheet\" \/>\n\n    The content\n\n    <script src=\"hash6.js\"><\/script>\n<\/html>\n```\n\nand the hash6.js should be a bundle with the webpack preamble. Then you can copy the entire build folder onto your web server (index.html last) and the hashes will make sure browsers get the correct version of everything, no caching issues.\n\nThe `html` loader should allow processing urls so you can CDNify them, inline them, ...\n\n@sokra is this feasible? Any pointers on how to implement?\n","<del>Though not very convenient, you can do it without a plugin. <\/del>\n\nIt doesn't work with UglifyJsPlugin. I had to add extract-text plugin back..\n\nHere is my build script:\n\n``` js\nprocess.chdir(__dirname);\nvar fs = require('fs');\nvar util = require('util');\nvar path = require('path');\nvar Getopt = require('node-getopt');\nvar webpack = require('webpack');\nvar crypto = require('crypto');\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nvar child_process = require('child_process');\n\nvar opt = new Getopt([\n  ['c', 'config=CONFIG', 'Specify the config file name in the conf folder. Default: default'],\n  ['r', 'run=COMMAND', 'The command to run after the compilation is complete.'],\n  ['h', 'help', 'Display this help.']\n]).bindHelp().parseSystem();\n\nvar conf = require('.\/conf\/' + (opt.options.config || 'default'));\n\nvar webpackOpts = {\n  resolve: {\n    root: [path.join(__dirname, 'bower_components')],\n  },\n\n  entry: {\n    'app.html': '.\/app.html',\n    app: '.\/app.js',\n    vendor: '.\/vendor.js'\n  },\n\n  output: {\n    path: '.\/dist',\n    publicPath: conf.resource + 'dist\/',\n    filename: '[name].js?[chunkhash]',\n    chunkFilename: '[name].js?[chunkhash]',\n    sourceMapFilename: '[file].map'\n  },\n\n  module: {\n    loaders: [\n      { test: \/app\\.html$\/, loader: ExtractTextPlugin.extract('html?attrs=link:href') },\n      { test: \/favicon\\.png$\/, loader: 'file' },\n      { test: \/\\.css$\/, loader: 'style!css' },\n      { test: \/\\.styl$\/, loader: 'style!css!stylus' },\n      { test: \/\\.html$\/, exclude: \/app\\.html$\/, loader: 'html' },\n      { test: \/\\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\\?.+)?$\/, exclude: \/favicon\\.png$\/, loader: 'url?limit=10000' }\n    ]\n  },\n\n  stylus: {\n    use: [require('nib')()],\n    import: ['nib']\n  },\n\n  devtool: 'source-map',\n  debug: conf.debug,\n\n  plugins: [\n    new ExtractTextPlugin('app.html'),\n\n    new webpack.DefinePlugin({\n      __CONF__: JSON.stringify(conf)\n    }),\n\n    new webpack.ResolverPlugin(\n        new webpack.ResolverPlugin.DirectoryDescriptionFilePlugin('bower.json', ['main'])\n    ),\n\n    new webpack.optimize.OccurenceOrderPlugin(),\n\n    \/\/ long-term caching\n    \/\/ http:\/\/webpack.github.io\/docs\/long-term-caching.html\n    function() {\n      this.plugin('done', function(stats) {\n        var chunks = stats.toJson().assetsByChunkName;\n\n        \/\/ replace the js file path of app.html\n        appHtml = fs.readFileSync('.\/dist\/app.html', { encoding: 'utf8' });\n        for (var entry in chunks) {\n          var src = entry + '.js';\n\n          \/\/ Code splitting and chunkhash problem\n          \/\/ https:\/\/github.com\/webpack\/webpack\/issues\/1209\n          chunkhash = crypto.createHash('md5').update(fs.readFileSync('.\/dist\/' + src)).digest('hex');\n          var dest = conf.resource + 'dist\/' + src + '?' + chunkhash;\n          appHtml = appHtml.replace(src, dest);\n        }\n        fs.writeFileSync('.\/dist\/app.html', appHtml);\n      });\n    }\n  ]\n};\n\nif (!conf.debug)\n  webpackOpts.plugins.push(new webpack.optimize.UglifyJsPlugin());\n\nvar compiler = webpack(webpackOpts);\n\nif (conf.debug) {\n  compiler.watch(null, compilerCb);\n} else {\n  \/\/ Bug: UglifyJsPlugin will compile <input type=\"text\" requred=\"{{foo}}\"> to <input type=\"text\" required>\n  \/\/ https:\/\/github.com\/webpack\/webpack\/issues\/752\n  \/\/ Webpack 2.0 will fix this issue\n  compiler.plugin(\"compilation\", function(compilation) {\n    compilation.plugin(\"normal-module-loader\", function(context) {\n      context.minimize = false;\n    });\n  });\n\n  compiler.run(compilerCb);\n}\n\nfunction compilerCb(err, stats) {\n  if (err)\n    return console.error(err);\n\n  var jsonStats = stats.toJson();\n\n  if (jsonStats.errors.length > 0) {\n    jsonStats.errors.forEach(function(err) {\n      console.error(err);\n    });\n    return;\n  }\n\n  if (jsonStats.warnings.length > 0) {\n    jsonStats.warnings.forEach(function(err) {\n      console.error(err);\n    });\n  }\n\n  jsonStats.modules.forEach(function(module) {\n    console.log(module.name);\n  });\n\n  if (opt.options.run) {\n    child_process.execSync(opt.options.run, {\n      stdio: 'inherit'\n    });\n  }\n\n  console.log(new Date().toLocaleString());\n}\n\n```\n\nconf\/default.js:\n\n``` js\nmodule.exports = {\n  base: '\/',\n  resource: '\/\/app-dev-res.example.com\/',\n  api: 'https:\/\/app-dev-api.example.com\/',\n  debug: true\n};\n```\n\napp.html:\n\n``` html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title v-text=\"title\"><\/title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\">\n    <link rel=\"icon\" type=\"image\/png\" href=\"favicon.png\">\n  <\/head>\n\n  <body>\n    <script src=\"vendor.js\"><\/script>\n    <script src=\"app.js\"><\/script>\n  <\/body>\n<\/html>\n\n```\n\nrun:\n\n``` bash\nnode build -r \"rsync -rptz --exclude .git* --exclude .DS_Store .\/ USER@app-dev.example.com:\/home\/USER\/app-frontend\"\n```\n","looks to me like you wrote a plugin :)\n\nIt doesn't handle my entire wishlist (coalesce script tags etc) but it does\nmake the js point to hashed files, which is great.\n\nI just don't understand how come the resulting chunks can load, do all\nchunks include the webpack loader stub? Is it because they are entries?\n\nDid you try adding the script:src tags to the things html should parse? Do\nthose then not include the stub?\n\nWhy do you name the files with the URL query syntax and not simply\nfile-hash.js?\n\nGood stuff, thanks!\n\nOn Thu, Jun 25, 2015 at 8:41 AM Fenix notifications@github.com wrote:\n\n> Though not very convenient, you can do it without a plugin. Here is my\n> build script:\n> \n> process.chdir(__dirname);\n> var fs = require('fs');\n> var util = require('util');\n> var path = require('path');\n> var Getopt = require('node-getopt');\n> var webpack = require('webpack');\n> var crypto = require('crypto');\n> var child_process = require('child_process');\n> \n> var opt = new Getopt([\n>   ['c', 'config=CONFIG', 'Specify the config file name in the conf folder. Default: default'],\n>   ['r', 'run=COMMAND', 'The command to run after the compilation is complete.'],\n>   ['h', 'help', 'Display this help.']\n> ]).bindHelp().parseSystem();\n> \n> var conf = require('.\/conf\/' + (opt.options.config || 'default'));\n> \n> var webpackOpts = {\n>   resolve: {\n>     root: [path.join(__dirname, 'bower_components')],\n>   },\n> \n>   entry: {\n>     'app.html': '.\/app.html',\n>     app: '.\/app.js',\n>     vendor: '.\/vendor.js'\n>   },\n> \n>   output: {\n>     path: '.\/dist',\n>     publicPath: conf.resource + 'dist\/',\n>     filename: '[name].js?[chunkhash]',\n>     chunkFilename: '[name].js?[chunkhash]',\n>     sourceMapFilename: '[file].map'\n>   },\n> \n>   module: {\n>     loaders: [\n>       { test: \/app.html$\/, loader: 'html?attrs=link:href' },\n>       { test: \/.css$\/, loader: 'style!css' },\n>       { test: \/.styl$\/, loader: 'style!css!stylus' },\n>       { test: \/.html$\/, exclude: \/app.html$\/, loader: 'html' },\n>       { test: \/.(png|jpg|jpeg|gif|ico|eot|ttf|woff|woff2|svg|svgz)(\\?.+)?$\/, loader: 'url?limit=10000' }\n>     ]\n>   },\n> \n>   stylus: {\n>     use: [require('nib')()],\n>     import: ['nib']\n>   },\n> \n>   devtool: 'source-map',\n>   debug: conf.debug,\n> \n>   plugins: [\n>     new webpack.DefinePlugin({\n>       **CONF**: JSON.stringify(conf)\n>     }),\n> \n> ```\n> new webpack.ResolverPlugin(\n>     new webpack.ResolverPlugin.DirectoryDescriptionFilePlugin('bower.json', ['main'])\n> ),\n> \n> new webpack.optimize.OccurenceOrderPlugin(),\n> \n> \/\/ long-term caching\n> \/\/ http:\/\/webpack.github.io\/docs\/long-term-caching.html\n> function() {\n>   this.plugin('done', function(stats) {\n>     var chunks = stats.toJson().assetsByChunkName;\n> \n>     \/\/ replace the js file path of app.html\n>     appHtml = eval(fs.readFileSync('.\/dist\/app.html.js', { encoding: 'utf8' }));\n>     for (var entry in chunks) {\n>       var src = entry + '.js';\n>       var dest = conf.resource + 'dist\/' + chunks[entry][0];\n>       appHtml = appHtml.replace(src, dest);\n>     }\n>     fs.writeFileSync('.\/dist\/app.html', appHtml);\n>   });\n> }\n> ```\n> \n>   ]\n> };\n> \n> if (!conf.debug)\n>   webpackOpts.plugins.push(new webpack.optimize.UglifyJsPlugin());\n> \n> var compiler = webpack(webpackOpts);\n> \n> if (conf.debug) {\n>   compiler.watch(null, compilerCb);\n> } else {\n>   \/\/ Bug: UglifyJsPlugin will compile <input type=\"text\" requred=\"{{foo}}\"> to <input type=\"text\" required>\n>   \/\/ https:\/\/github.com\/webpack\/webpack\/issues\/752\n>   \/\/ Webpack 2.0 will fix this issue\n>   compiler.plugin(\"compilation\", function(compilation) {\n>     compilation.plugin(\"normal-module-loader\", function(context) {\n>       context.minimize = false;\n>     });\n>   });\n> \n>   compiler.run(compilerCb);\n> }\n> \n> function compilerCb(err, stats) {\n>   if (err)\n>     return console.error(err);\n> \n>   var jsonStats = stats.toJson();\n> \n>   if (jsonStats.errors.length > 0) {\n>     jsonStats.errors.forEach(function(err) {\n>       console.error(err);\n>     });\n>     return;\n>   }\n> \n>   if (jsonStats.warnings.length > 0) {\n>     jsonStats.warnings.forEach(function(err) {\n>       console.error(err);\n>     });\n>   }\n> \n>   jsonStats.modules.forEach(function(module) {\n>     console.log(module.name);\n>   });\n> \n>   if (opt.options.run) {\n>     child_process.execSync(opt.options.run, {\n>       stdio: 'inherit'\n>     });\n>   }\n> \n>   console.log(new Date().toLocaleString());\n> }\n> \n> app.html:\n> \n> <!DOCTYPE html>\n> <html>\n>   <head>\n>     <meta charset=\"utf-8\">\n>     <title v-text=\"title\"><\/title>\n>     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\">\n>     <link rel=\"shortcut icon\" href=\"favicon.ico\">\n>   <\/head>\n> \n>   <body>    <script src=\"vendor.js\"><\/script>    <script src=\"app.js\"><\/script>\n>   <\/body>\n> <\/html>\n> \n> run:\n> \n> node build -r \"rsync -rptz --exclude .git\\* --exclude .DS_Store .\/ USER@app-dev.example.com:\/home\/USER\/app-frontend\"\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/webpack\/webpack\/issues\/536#issuecomment-115124933.\n> \n> ## \n\nWout.\n(typed on mobile, excuse terseness)\n","Answering my own question: http:\/\/webpack.github.io\/docs\/multiple-entry-points.html states that entry point chunks include the webpack loader.\n","@fenivana's code looks like a step in the right direction. I would like to have multiple html entry points though.\n","@wmertens It seems doesn't work with UglifyJsPlugin. Evaluating the uglified entry chunk results FALSE.\n\nI tried  `{ test: \/app\\.html$\/, loader: 'html?attrs=link:href script:src' }`, it would throw errors like \"window is undefined\". But I think css would work.\n\nNaming the file with chunkhash as query string makes dist directory cleaner. It will overwrite outdated files, and the filename is more readable. Occasionally I have to look into the dist files to debug, the clean dist folder would help a lot.\n","Recently I came across this very problem, my current solution was to write a plugin that did the job for me:\n- Plugin: https:\/\/github.com\/nihey\/webpack-single-page-boilerplate\/blob\/master\/plugins\/html-plugin.js\n- Usage: https:\/\/github.com\/nihey\/webpack-single-page-boilerplate\/blob\/master\/webpack.config.js#L33 (multiple HTML files are accepted)\n- How it looks like: https:\/\/github.com\/nihey\/webpack-single-page-boilerplate#usage\n\nI don't know how bad would it be to force a user to put a '!' as a prefix to every resource that you want to load. What do you people think?\n","It doesn't seem very different from the current html plugin?\n\nBasically, an html entry plugin should convert all script requirements into\na single combined entry point. I don't know if you can add entry points\nduring compilation\u2026\n\nOn Thu, Jul 9, 2015, 04:38 Nihey Luz Takizawa notifications@github.com\nwrote:\n\n> Recently I came across this very problem, my current solution was to write\n> a plugin that did the job for me:\n> - Plugin:\n>   https:\/\/github.com\/nihey\/webpack-single-page-boilerplate\/blob\/master\/plugins\/html-plugin.js\n> - Usage:\n>   https:\/\/github.com\/nihey\/webpack-single-page-boilerplate\/blob\/master\/webpack.config.js#L33\n>   (multiple HTML files are accepted)\n> - How it looks like:\n>   https:\/\/github.com\/nihey\/webpack-single-page-boilerplate#usage\n> \n> I don't know how bad would it be to force a user to put a '!' as a prefix\n> to every resource that you want to load. What do you people think?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/webpack\/webpack\/issues\/536#issuecomment-119792639.\n> \n> ## \n\nWout.\n(typed on mobile, excuse terseness)\n","> It doesn't seem very different from the current html plugin?\n\nYou mean [`html-webpack-plugin`](https:\/\/www.npmjs.com\/package\/html-webpack-plugin)? They might appear to be similar, but their goals are different. The current plugin takes a template and compiles it (or create a simple html boilerplate for you).\n\nMy goal was to bundle files linked in `<img>` and `<link>` tags. This way no references are broken when building the html file.\n\n> Basically, an html entry plugin should convert all script requirements into a single combined entry point. (...)\n\nYes, my code does not handle any script requirements (I'm still leaving it to webpack) - its not the optimal solution. But it does handle `<img>`, which would also be required on a html entry plugin.\n","It will be great, if it can working something similar to:\n\nwebpack.config.js\n\n``` javascript\nplugins: [\n    new HtmlPlugin([\n        {\n            entry: '.\/src\/entry1.html',\n            output: '.\/public\/output1.html'\n        },\n        {\n            entry: '.\/src\/entry2.hbs',\n            output: '.\/public\/output2.html',\n            loader: 'handlebars'\n        },\n        {\n            entry: '.\/src\/entry3.jade',\n            output: '.\/public\/output3.html',\n            loader: 'jade'\n        }])\n    ]\n```\n","@Friend-LGA Is this related to this issue? I was under the impression we were talking about taking in HTML files as entry points, not .hbs or .jade files.\n","@cowwoc Why don't use some template framework to generate entry HTML ?\n","@Friend-LGA I like my HTML files pure for readability and maintenance reasons. In any case, you need to get plain HTML files working before you can add template support.\n\nLet's please focus on the original request here, and you can file a separate request to add templating support once that's done.\n","@sokra how can a plugin add an entry point during compilations? That is the missing puzzle piece.\n","> @sokra how can a plugin add an entry point during compilations? That is the missing puzzle piece.\n\nThere is a `make` plugin hook on the compilation in which entry points should be added. The `entry` option is converted to `this.addEntry` calls in this hook. See https:\/\/github.com\/webpack\/webpack\/blob\/76230e4a4e4389e622c04ead1d79a7a7e122bd21\/lib\/SingleEntryPlugin.js#L19-L23\n","Is this the defacto solution for this? https:\/\/github.com\/ampedandwired\/html-webpack-plugin\n","@QuantumInformation maybe - but not what this issue is really about though.\nThe idea is to start from the HTML files as entry - not generating them.\n","@QuantumInformation I think so. And in an ideal world your html shouldn't have entry point specific stuff in them, except the script tags which can be achieved through the plugin you mentioned. \n","Found fresh plugin - https:\/\/github.com\/unbroken-dome\/indexhtml-webpack-plugin\n","@nodkz that plugin _produces_ html files - at least not quite what I am after.\n","Judging by the readme it does exactly what I was looking for, nice find @nodkz!\n@tcurdt: According to the readme it does indeed allow you to use HTML entry points and will produce another HTML file with the correct script\/stylesheet references, or am I missing something?\n","@tcurdt I agree with @mogelbrod. I think it depends on what the produced HTML file looks like. If the plugin lets you use HTML files as entry points, and the only thing it rewrites are the script filenames then it sounds reasonable to me.\n","At least I am looking for something that uses an existing html file (not produces one) and gathers further dependencies from the html.\n","Why don't you want a new file to be produced? You won't be able to use the filename rewriting feature in webpack without modifying the referenced file names.\n","@mongelbrod I want full control of the HTML.\n\nHTML files are the entry points for the browser - so should they be for webpack. I would love to use webpack not just for SPA but also for other setups.\n\nAssetgraph gets this right https:\/\/github.com\/assetgraph\/assetgraph ...but it does not have all the nice features webpack has.\n","But isn't full control what you get with the indexhtml-webpack-plugin? The html-webpack-plugin wasn't enough is this regard but the plugin which @nodkz linked seems like a perfect fit. I can't test it myself right now, but from what I can see you should just be able to specify HTML entry points, which the plugin will parse and produce new HTML files for in your webpack destination folder with everything but the script[src] and link[href] attributes kept intact.\n","@mogelbrod I haven't had the chance to try it yet -  but if that's the case I misread the README and should maybe submit a PR for it :)\n","indexhtml currently has one big issue that I can't figure out how to work around that completely prevents its use: https:\/\/github.com\/unbroken-dome\/indexhtml-webpack-plugin\/issues\/4\n\nIf anyone wants to help fix it, I'd be grateful :) I've provided an easy to run test case and I've narrowed down the source of the problem (`options.publicPath` isn't being set when evaluating the HTML).\n\nI think if indexhtml could be fixed (and perhaps https:\/\/github.com\/unbroken-dome\/indexhtml-webpack-plugin\/issues\/2 could be fixed too, although at least there's a workaround for that), we could have a very nice setup.\n","Hi, thanks for noting the plugin, I created it out of pretty much the same need that this issue describes. Forgot to mention it here myself, thanks for the link @nodkz :-)\n\nI'm quite a newbie at both webpack and node, so any help is welcome. I just got it to work for my own project and thought I'd share, but I'll look into the issue @candrews \n","I found solution how to make HMR work with a html entry point with `indexhtml-webpack-plugin`. Not so good as I want, but may be somebody suggest better solution. \nhttps:\/\/github.com\/unbroken-dome\/indexhtml-webpack-plugin\/issues\/1\n","@tkrullmann I try found any solution with html file with entry point about 6 or 7 days. So at end I use google enhanced search with new pages for past week. And found your repo, which was created 1 days ago. Google rocks!\n\nSo where I found something about html entry point I post message about your repo (in this issue and webpack channel in slack with 700 peoples, you can join in http:\/\/www.reactiflux.com\/). So let do this plugin by crowd. @tkrullmann please dont't disappear and accept PR ;) . \n","Any plans on fixing this or is this \"out of scope\"? I'd really prefer having an `index.html` as my app entry point. For now I'll fallback to generating the HTML.\n","+1\n\nAn html file is the entry point into the application for the user agent, it should be the entry point for webpack.\n","> There is a make plugin hook on the compilation in which entry points should be added. The entry option is converted to this.addEntry calls in this hook. See https:\/\/github.com\/webpack\/webpack\/blob\/76230e4a4e4389e622c04ead1d79a7a7e122bd21\/lib\/SingleEntryPlugin.js#L19-L23\n\n@sokra is it possible to access loader loaded source at the point of \"make\" plugin? Otherwise I won't be able to extract script src from html entry.\n","I know this is not exactly what people are looking for in this issue but in case somebody is interested, I started building my own plugin for using React JSX files as entrypoints: https:\/\/github.com\/mfellner\/static-jsx-webpack-plugin. Any feedback is more than welcome!\n","@mfellner nice! How do you get the main script url into the html, do you run webpack in two stages?\n","@wmertens The plugin attaches to the 'additional-chunk-assets' phase. There I get the relevant 'source chunks' for each entrypoint from `compilation.namedChunks`. Then I add a new custom Source for each chunk to `compilation.assets`.\n\nThe chunk's `files` property holds the name of the output files. Adding them to the HTML is easy with React, since it's just a component that I can pass props into and then render the whole thing.\n\nTo get the React component I need to actually evaluate the complete webpack bundled code (compilation.mainTemplate.render on the source chunk) as a `vm.Script`.\n\nThe advantage of using JSX instead of HTML is that JSX can be just loaded as regular Javascript using an appropriate loader. So from webpack's perspective there's no difference. It just builds your output (bundle.js) as it normally would. The trick is then to add additional output assets for the static HTML.\n\nThe only downside of this approach that I can see is that you end up with React components inside your output JS. Which is fine, I think, if you want to use React anyway.\n","@mfelltner it sounds like exactly what I want, but I'm still confused on\nhow to use it.\n\nHow do you know which scripts to load in the html?\n\nI'm also confused about your comment about react being in output JS, isn't\nthat only used for building the html?\n\nIt would be great if you had an example, the test fixture confuses me.\n\nOn Sun, Oct 18, 2015 at 10:41 PM Maximilian Fellner <\nnotifications@github.com> wrote:\n\n> @wmertens https:\/\/github.com\/wmertens The plugin attaches to the\n> 'additional-chunk-assets' phase. There I get the relevant 'source chunks'\n> for each entrypoint from compilation.namedChunks. Then I add a new custom\n> Source for each chunk to compilation.assets.\n> \n> The chunk's files property holds the name of the output files. Adding\n> them to the HTML is easy with React, since it's just a component that I can\n> pass props into and then render the whole thing.\n> \n> To get the React component I need to actually evaluate the complete\n> webpack bundled code (compilation.mainTemplate.render on the source chunk)\n> as a vm.Script.\n> \n> The advantage of using JSX instead of HTML is that JSX can be just loaded\n> as regular Javascript using an appropriate loader. So from webpack's\n> perspective there's no difference. It just builds your output (bundle.js)\n> as it normally would. The trick is then to add additional output assets for\n> the static HTML.\n> \n> The only downside of this approach that I can see is that you end up with\n> React components inside your output JS. Which is fine, I think, if you want\n> to use React anyway.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/webpack\/webpack\/issues\/536#issuecomment-149045306.\n> \n> ## \n\nWout.\n(typed on mobile, excuse terseness)\n","@sokra would it be easy to add a way to refer to something as an entrypoint, maybe with a loader? Then the entry html could refer to the main script with `\"!!file!entry!src\/main.js\"` for example.\n\nThen using `\"!!file!html!index.html\"` would work\u2026\n","It seems that hasn't a perfect solution..\n","I'm found a plugin that may fit the requirement: https:\/\/github.com\/skozin\/webpack-path-rewriter\n\nAlthough it doesn't allow HTML files as entries, you can create an `entry.js` as easy as:\n\n```\nrequire('js\/index.js')  \/\/ Needed for \"generated assets\", see the README for details\nrequire('templates\/index.jade')\n```\n\nand use it as entry. It'll automatically place the output HTML files, handle the asserts dependencies, and rewrite the assert paths. I also find it easier to handle multiple-HTML-entries cases than the `indexhtml-webpack-plugin`.\n","I made a proof of concept [webpack-loader](https:\/\/github.com\/d6u\/webpack-loader) to dynamically add script:src as entry point. I think this approach can maximize the flexibility. Really love to hear some feedback.\n","@d6u nice! (although the name would be better as html-entry-loader or so)\n\nYou can get the html file from the js file with val-loader, I think.\n\nWhat happens with recursive dependencies though, doesn't the webpack loader configuration turn every js file into an entry point?\n\nOne small thing: Can't you use `{...webpackLoader, {entry}}` instead of lodash's assign?\n","@wmertens It will handle recursive dependencies well. Because webpack-loader won't use the same loader config. You will specify new loader configs in `webpackLoader` property. There you can handle js with babel-loader or other loaders.\n\nI guess my main question is what exactly we want to achieve here? Using HTML as an entry point so all the assets presented on the HTML, e.g. images, can be handled by the loader we desire, e.g. file-loader, url-loader? So the goal for webpack-loader would be ensure `script:src` can be bundled first before handed to file-loader or url-loader. What about CSS then? For people who using extract text plugin, CSS will become a separate file while webpack-loader bundling JS files. But when html-loader looking for `link:href`, the CSS file might not be available. Is it possible for html-loader to defer handling of `link:href` and wait for webpack-loader to finish it's job?\n","@d6u looks good :+1:. I'm impressed that it's not much code at all.\n\nHowever, this approach is imho exactly the same as the [ExtractTextPlugin](https:\/\/github.com\/webpack\/extract-text-webpack-plugin), so I don't really see the benefit here.\n\nI think, the main problem here is that webpack requires the final module to be JS to build the dependency graph. That's why every file must be valid JS at the end of the loader chain.\n\nMaybe the whole process would be more flexible if we'd introduce an intermediate JSON-like format which could look like:\n\n`helloWorld.js`\n\n``` json\n{\n    \"type\": \"js\",\n    \"dependencies\": [\n        \"events\",\n        \"..\/otherModule.js\"\n    ],\n    \"source\": [\n        \"'use strict';\\nconst EventEmitter = require('\",\n        0,\n        \"');\\nconst otherModule = require('\"\n        1,\n        \"');\\nfunction hi() { console.log('hello world') }\"\n    ]\n}\n```\n\n`index.html`\n\n``` json\n{\n    \"type\": \"html\",\n    \"dependencies\": [\n        \"css\/styles.css\"\n    ],\n    \"source\": [\n        \"<!doctype html>\\n<html>\\n<head>\\n<link rel=\\\"stylesheet\\\" href=\\\"\",\n        0,\n        \"\\\">\\n<\/head>\\n<body>Hello World<\/body>\\n<\/html>\"\n    ]\n}\n```\n\nThan webpack could easily decide, how to format the resulting output file. Imho, there are two main benefits here:\n- The AST parsing via esprima\/acorn could be extracted into an own js-loader which would improve modularity\n- These generated files could (probably) be cached, so that future compilations would not need to parse and compile everything again #250\n\nOne challenge here is that we need to put webpack's infrastructure code somewhere which is reponsible to set up the CommonJS environment. But I think, this would be managable somehow.\n\nThis change would probably have a big impact on internal webpack stuff, but I think it would be possible without disrupting the community written loaders, since we only would need to introduce a JS-loader and change the html- and css-loader to not output JS.\n\nWhat do you think? @sokra\n","Maybe that's also an elegant solution for #378 \n\nInstead of providing complicated meta information, they would just provide this intermediate format which can easily be understood by any build tool\/bundler.\n","@jhnns \n- No, ExtractTextPlugin won't add new entry point for dependencies\n- Yes, the file saving part can be treated exactly like ExtractTextPlugin. Maybe [webpack-loader](https:\/\/github.com\/d6u\/webpack-loader) should just return a string of bundled content and let ExtractTextPlugin create the file.\n- Still don't know how to handle ExtractTextPlugin extract CSS files within [webpack-loader](https:\/\/github.com\/d6u\/webpack-loader).\n- Love the proposal you made about flexible format.\n","> ExtractTextPlugin won't add new entry point for dependencies\n\nI don't know, if we're talking about the same thing, but you _can_ use the ExtractTextPlugin to extract HTML + dependencies. You just need to apply the html-loader to parse the HTML.\n","@jhnns Maybe we are talking about different things. Do you mean using ExtractTextPlugin can achieve the goal of using HTML as entry point here? If so can you give me an example config?\n","I've created [an example](https:\/\/github.com\/jhnns\/webpack-extract-index-html) how the webpack-extract-text-plugin can be used to extract the `index.html`.\n\nThe current implementation allows to:\n- Add the `index.html` as `entry` to the `webpack.config.js`\n- Reference assets like images or stylesheets that are loaded via the file-loader\n- Reference the resulting `bundle.js`. This can only be done by replacing `% BUNDLE %` with the final filename after the compilation has been finished because the hash is unknown before that. You can remove that replacing stuff if you're not hashing the output filename.\n\nI've also tried to reference a stylesheet which is transformed via the css-loader and then extracted. This, however, is currently not working. The resulting URL of the stylesheet is `[object Object]`, maybe @sokra can give us some insight here.\n","@jhnns Thanks for sharing. I think your ExtractTextPlugin (ETP) example works, but the main differences are:\n1. using ETP, you need to [specify a JS entry](https:\/\/github.com\/jhnns\/webpack-extract-index-html\/blob\/master\/webpack.config.js#L10) for any JS file your want to bundle. Normally this is not a problem since most of us only have one JS file on a website. But this is not dependency driven bundling.\n2. You have to use some template syntax to be able to put the final url `% BUNDLE %`. What if the HTML is already using some template language, we mixing two template syntax a problem?\n","I for one want to avoid any magic (templates) in the html file if possible.\n",">  you need to specify a JS entry for any JS file your want to bundle. Normally this is not a problem since most of us only have one JS file on a website. But this is not dependency driven bundling.\n\nThat's correct. But that's the way how webpack works today for most users. And usually you don't have too many entries. Personally I only add `init.js` and use `require.ensure()` or the `promise-loader` to require other stuff asynchronously.\n\n> You have to use some template syntax to be able to put the final url `% BUNDLE %`. What if the HTML is already using some template language, we mixing two template syntax a problem?\n\nThat's also correct. But you only need `% BUNDLE %` if you're going to hash your final bundle (which most people do, I assume). There is no other way to solve this, because you only know the final hash when the build has finished \u2013\u00a0and then you can't change the `index.html` anymore. You need to str.replace() that manually after the build process has been finished. So this is a chicken egg problem. I think, the webpack-loader does not address the `% BUNDLE %` problem either.\n","> There is no other way to solve this, because you only know the final hash when the build has finished \u2013 and then you can't change the index.html anymore\n\nSounds like something that is best corrected in Webpack core. Shouldn't the hash be calculated over the input files, as opposed to the output files? If it was, Webpack core could provide this hash earlier on in the build process.\n","> Shouldn't the hash be calculated over the input files, as opposed to the output files\n\nMhmm ... no I don't think so, because that would produce to much \"false positives\". Think about whitespace changes which change the hash but would not have an impact on the output files (assumed they are minified).\n","Instead of using templates, how about having the user specify an HTML `id` in the Webpack configuration and the latter could inject the bundle path into the DOM object with that `id`? Same end-result without the use of templates.\n","The hash should be calculated over the output files. Let's say you haven't changed the source files, but updated your minifier which now works better. You want to serve the newer minified file to the user.\n","@jhnns \n\n> > you need to specify a JS entry for any JS file your want to bundle. Normally this is not a problem since most of us only have one JS file on a website. But this is not dependency driven bundling.\n> \n> That's correct. But that's the way how webpack works today for most users. And usually you don't have too many entries. Personally I only add init.js and use require.ensure() or the promise-loader to require other stuff asynchronously.\n\nA single entry works for me. But this is a limitation without a good justification. People all have different usage cases and limited to a single number doesn't sound like a good approach.\n\n> > You have to use some template syntax to be able to put the final url % BUNDLE %. What if the HTML is already using some template language, we mixing two template syntax a problem?\n> \n> That's also correct. But you only need % BUNDLE % if you're going to hash your final bundle (which most people do, I assume). There is no other way to solve this, because you only know the final hash when the build has finished \u2013 and then you can't change the index.html anymore. You need to str.replace() that manually after the build process has been finished. So this is a chicken egg problem. I think, the webpack-loader does not address the % BUNDLE % problem either.\n\nI think this is related with the first comment. Because the ExtractTextPlugin example is not dependency driven. The connection between index.html and init.js is not clear. They are only tied together by the `% BUNDLE %`. This breaks the pipeline of loaders. Normally one loader should do one thing, hashing file is the job of file-loader (or similar one).\n\nwebpack-loader indeed will not solve the hashing issue. Because this is not a issue webpack-loader want to solve. The url hashing should be handled by file-loader. webpack-loader merely just treat script src as new entry point and return a JavaScript file, so the other loader can pick the stuff webpack-loader returned and do whatever they want, e.g. inline JavaScript or just replace an hashing url.\n\n---\n\nI agree both solution works now, but ultimately, I'd like a solution that's more generic, dependency driven and can integrate with any other loaders.\n","As an aside, the hash should be calculated over _ALL_ the inputs, so the source files and the modules, _as well as the transpilers and any scripts and programs used to generate the output_.\n\nThat way, if any dependency changes, the output can be rebuilt, and if nothing changes, you don't have to rebuild.\n\nIf you doubt this, know that http:\/\/nixos.org uses this method to completely define all the files and packages for a linux distribution according to the desired configuration, and applying a change and building the changed files and creating the new system version typically takes only a few seconds.\n","> I agree both solution works now, but ultimately, I'd like a solution that's more generic, dependency driven and can integrate with any other loaders.\n\nYes, I agree. That would be good.\n\n> As an aside, the hash should be calculated over ALL the inputs, so the source files and the modules, as well as the transpilers and any scripts and programs used to generate the output.\n\nThat's an interesting suggestion. Then we would be able to calculate the hash before the final file would have been rendered. However, I don't think that this is do-able ... what if a loader requires another file, how would we track that?\n","> That's an interesting suggestion. Then we would be able to calculate the hash before the final file would have been rendered. However, I don't think that this is do-able ... what if a loader requires another file, how would we track that?\n\nPerhaps loaders could encapsulate this logic? Meaning, loaders could provide an API that returns a hash of their inputs, or a list of their inputs so others could include it in their hash.\n","In NixOS the build scripts have to declare their inputs and they run in a sandbox.\n\nLoaders could pinkie-promise adhere to the same semantics, or the node file methods could get monkeypatched to be a sandbox\u2026\n","That sounds very fragile to me with a bunch of loaders from the community that don't care about hashes :grinning:...\n","Well, that's what issues and PRs are for :-) if they don't properly declare their inputs, they won't properly update when those inputs change\u2026\n\nAnother thing that NixOS has going for it is that every package (the whole OS up to and including individual configuration files) is store read-only in a directory named by its hash, so it can trust that inputs didn't change.\n\nThe node_modules dir doesn't do that so webpack would have to read each file, or make a copy at build time. (with hardlinks that takes no space)\n","@sokra Is it possible to access `compilation.addEntry` in a loader?\n","For anyone tracking this issue still, here is something interesting, look at the part about `childCompiler`: https:\/\/github.com\/ampedandwired\/html-webpack-plugin\/issues\/171\n\nThis may help make @d6u's `webpack-loader` approach work with WDS.\n","@all Here is a standalone HTML app compiler using webpack https:\/\/github.com\/resistdesign\/rdx\n","@resistdesign wow, nice! Am I correct in finding https:\/\/github.com\/resistdesign\/rdx\/blob\/master\/src\/Config\/WebPack\/Utils\/HTMLConfig.js as where the magic of parsing a html file and bundling its dependencies happens?\n","@wmertens Yes, that's the \"Secret Weapon\"! :)\n","I didn't realize this, but the problem has been solved in a different way by https:\/\/www.npmjs.com\/package\/html-webpack-plugin (in v2). Basically, you configure what your index.html should look like, and then it creates one based on your entry points.\n\nFor me that is a fine solution, so IMHO this issue can be closed.\n","@wmertens having the index file being created was always available as option IIRC.\n\nI personally want NOT to have the index file created for me. I guess one could just put everything into the html-webpack-plugin template - but that's a hack.\n\nIMO this issue should not be closed.\n","@tcurdt the problem was not knowing the names of the assets that should go in the html until everything is created.\n\nBy declaring your intention (what you want in the index.html), you get automatic bugfixes and performance improvements to the generated html. If you write the html manually, not so much.\n","@wmertens Actually, what we want is to make index.html as an entry point (one entry point and it is html file); so the css, javascript and images inside the html file will go thought loaders. This way, the small images can be inlined, assets from index.html will be copied (and hashed etc.) to the right directory with right name.\n\nAnything else is an hack. Seriously.\n","@buraktamturk I believe all these are possible with the html plugin and maybe with some extra plugins. \n\nTherefore it must be possible to write a tool that maps from an index.html file to a webpack config.\n","@wmertens then by all means, present that solution here and everybody can be happy.\n","@Tragetaschen open source does not mean I work for you :) Like I said, I'm happy with the plugin as-is, I'm just pointing out a likely approach to implement index as an entry point. I won't be pursuing it.\n","It's not easy, webpack fights you on it, here is the best solution I could muster, with all sorts of supporting code to deal with all kinds of caveates: https:\/\/github.com\/resistdesign\/rdx\/blob\/master\/src\/Config\/WebPack\/Utils\/HTMLConfig.js#L62\n\nAnd that's just the heart of the matter.  You have to look at the whole solution to see what HTML as an entrypoint really entails. Though I still beleive that HTML is the most natural **manifest** for a web app.\n","I agree, we used our index.html as pretty much the manifest to lead to our entire app.\n","I don't really see something difficult here. I love the way how webpack loaders work.\n\nhtml-loader already checks src attribute in img tags to check whatever the file exists (by simply passing them thought loaders). The loader can inline the content (if it's small enough to inline, it inlines) so on. \n\nThe same thing happens on CSS also, I do\n\n``` css\n@font-face {\n    font-family:'hinbold';\n    src: url('.\/Hind-Bold_gdi.eot');\n    src: url('.\/Hind-Bold_gdi.ttf') format('truetype'),\n    url('.\/Hind-Bold_gdi.svg#hinbold') format('svg');\n    font-weight: 700;\n    font-style: normal;\n    font-stretch: normal;\n    unicode-range: U+0020-20AC;\n}\n```\n\ncss-loader pass them down to file-loader configured bellow\n\n``` javascript\n\/\/ ...\n{\n    test: \/\\.(ttf|eot|svg|woff(2)?)(.*)?$\/,\n    loader: 'file-loader'\n},\n\/\/ ...\n```\n\nand webpack generates [hash].eot to dist folder. And the css refers to the [hash].eot. This thing happens also with css include syntax.\n\n``` css\n@import url(\"font\/font.css\"); \/* passes to style-loader, the fonts in the included css is passed to file-loader. *\/\n```\n\nAnd if I give a small resolution background.png as `background: url(path\/to\/bg.png)` it is inlined as base64 link (through file-loader I suppose). \n\nhtml-loader exactly does something like this on img tags. \n\nSo, the thing is, **in a perfect world**, **html-loader** should be _(i know it's not possible with current webpack)_ configured to pass the script src to webpack, so webpack can pass it to **babel-loader** (or **file-loader**) and does it's packing stuff _(bundling stuff, imports, requires etc.)_, or maybe another **webpack-loader** module which does the stuff _(bundling stuff)_, and gives the results _(either inlined version or hashed url depending on output size)_ to **html-loader**. And **html-loader** could do what **css-loader** does to the fonts and backgrounds.\n\nBy this way, let's assume we have 1 html entry which depends 2 css, 2 image and 1 javascript files.\n- css are compiled (inlined or hashed depending on file size), the files inside the css also compiled, inlined or hashed etc.\n- small images are inlined, the others are hashed and copied to output folder (which is powerful thing for caching & cdn stuff)\n- javascript files are compiled (babel-loader), bundled (webpack-loader), hashed & copied to output folder\n- html file copied to output folder, includes small inlined content and refers hashed files from output folder.\n","webpack is able to process HTML and CSS because their respective loaders translate HTML\/CSS to JavaScript. Every file\/module is represented as a CommonJS module. This idea works pretty well \u2013\u00a0except for the very first file: the `index.html`.\n\nFurthermore, webpack requires some setup code to load modules. If we start with an `index.html` file, webpack has no place to put this setup code.\n\nOf course, these problems are all solvable, but they require extra code and a different workflow than all the other modules, that's why it's not an easy thing to do (and probably not worth the effort since the HtmlWebpackPlugin works pretty well).\n","Guys, sorry if i interrupt with smth stupid, but discussion is very long and for me there is too much code for that simple issue.\n\nMy purpose was that i would love keep my index.html. And why not just call out `bundle.js` from root directory, i know that is little bit crumbling context, but it is simplest solution.\n\nFor dev env just compile and watch file bundle.js with path set to '\/' :\n`output: {\n  path: '\/',\n  filename: 'bundle.js',\n  publicPath: '\/'\n}`\n\nAnd for prod env build it to '\/dist':\n`output: {\n  path: path.join(__dirname, 'dist'),\n  filename: 'bundle.js',\n  publicPath: '\/'\n}`\n\nwith `index.html` attached to entry property:\n`entry: [\n  '.\/src\/index.jsx',\n  '.\/index.html'\n]`\n","Guys, can you please evaluate whether https:\/\/github.com\/ampedandwired\/html-webpack-plugin\/issues\/12 resolves this issue to your satisfaction? Thank you.\n","That would be extremely powerful if one day you will be able to give webpack index.html as entry, or even app manifest.json, declare the target platform(s), output directory, and he will do all the rest with sane defaults.\r\nMy feelings are that the day is getting closer :)","@bnaya That is the goal of this CLI http:\/\/rdx.resist.design","@resistdesign why it's called `rdx`? It's even hard to spell )\r\n\r\nWould be nice to see some alternatives in this direction.","I dont see how `rdx` is hard to spell... i also dont have any other opinions of the tool itself.","it's are-dee-ex?","@pribilinskiy It's R.D.X. as in Resist Design X. X as in cross\/trans-piler. As far as alternatives, what kinds of features do you need?","Well, it's not about features, it's about documentation. There's a [repo with example](https:\/\/github.com\/resistdesign\/rdx-example), but no explanation on API, how it should work, possibilities **with examples**, limitations, plans, changelog, etc. Currently it looks like an alpha-version, an experiment.","@pribilinskiy Well, it's a CLI so it doesn't have an API per se. So the Usage, Commands, Configuration, Supported Features and Technologies are documented instead. And how it works is simple: Make an HTML page with scripts and it either serves or outputs an app for you. Here is the change log: https:\/\/github.com\/resistdesign\/rdx\/commits\/master . And as far as plans, it's being maintained and issues are addressed as best as possible. :)","@resistdesign While **rdx** may be cool, it's definitely not the same as having this working in the webpack ecosystem.","@monokrome I totally agree.","see this:\r\n# [web-webpack-plugin](https:\/\/github.com\/gwuhaolin\/web-webpack-plugin)\r\nA good alternatives for [html-webpack-plugin](https:\/\/github.com\/jantimon\/html-webpack-plugin), can make webpack use HTML as entry.\r\n\r\n## use html template [demo](https:\/\/github.com\/gwuhaolin\/web-webpack-plugin\/tree\/master\/demo\/use-template)\r\n**webpack config**\r\n```js\r\nmodule.exports = {\r\n    entry: {\r\n        A: '.\/a',\r\n        B: '.\/b',\r\n    },\r\n    plugins: [\r\n        new WebPlugin({\r\n            filename: 'index.html',\r\n            \/\/ html template file path\uff08full path relative to webpack.config.js\uff09\r\n            template: '.\/template.html',\r\n            requires: ['A', 'B'],\r\n        }),\r\n    ]\r\n};\r\n```\r\n\r\n**html template**\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"zh-cn\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <!--load a chunk file config and output in webpack-->\r\n    <script src=\"B\"><\/script>\r\n    <!--load a local reset style file direct without local var webpack-->\r\n    <link rel=\"stylesheet\" href=\".\/reset.min.css?_inline\">\r\n    <!--load a local google analyze file direct without local var webpack-->\r\n    <script src=\".\/google-analyze.js\"><\/script>\r\n<\/head>\r\n<body>\r\n<!--SCRIPT-->\r\n<footer>web-webpack-plugin<\/footer>\r\n<\/body>\r\n<\/html>\r\n```\r\n- use `<script src=\"B\"><\/script>` in html template to load required entry, the `B` in `src=\"B\"` means entry name config in `webpack.config.js`\r\n- comment `<!--SCRIPT-->` means a inject position ,except for resource load by `<script src><\/script>` left required resource config in `WebPlugin's requires option`. if there has no `<!--SCRIPT-->` in html template left required script will be inject ad end of `body` tag.\r\n    \r\n**output html**\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"zh-cn\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <!--load a chunk file config and output in webpack-->\r\n    <script src=\"B.js\"><\/script>\r\n    <!--load a local reset style file direct without local var webpack-->\r\n    <style>body {\r\n        background-color: rebeccapurple;\r\n    }<\/style>\r\n    <!--load a local google analyze file direct without local var webpack-->\r\n    <script src=\"google-analyze.js\"><\/script>\r\n<\/head>\r\n<body>\r\n<script src=\"A.js\"><\/script>\r\n<footer>web-webpack-plugin<\/footer>\r\n\r\n<\/body>\r\n<\/html>\r\n```    \r\n\r\n## config resource attribute [demo](https:\/\/github.com\/gwuhaolin\/web-webpack-plugin\/tree\/master\/demo\/config-resource)\r\nevery resource required by html,it can config some attribute as below:\r\n- `_dist` only load in production environment\r\n- `_dev` only load in dev environment\r\n- `_inline` inline resource content info html,inline script and css\r\n- `_ie` resource only required IE browser,to achieve by `[if IE]>resource<![endif]` comment\r\n\r\n**html template**\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"zh-cn\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <script src=\"inline?_inline\"><\/script>\r\n    <script src=\"ie-polyfill?_ie\"><\/script>\r\n<\/head>\r\n<body>\r\n<script src=\"dev?_dev\"><\/script>\r\n<!--load a local google analyze file direct without local var webpack-->\r\n<script async src=\".\/google-analytics.js?_dist\"><\/script>\r\n<\/body>\r\n<\/html>\r\n```\r\n[output html file](https:\/\/github.com\/gwuhaolin\/web-webpack-plugin\/blob\/master\/demo\/config-resource\/dist-template\/index.html)\r\n","You might want to check out [webtamp](https:\/\/github.com\/japgolly\/webtamp).\r\nI'm the author (hi!) and I created it to do exactly this kind of thing.","I know there wasn't any activity here in a while, but since this issue ranks highly on Google, I wanted to share my solution for an HTML entry:\r\n\r\nhttps:\/\/gist.github.com\/fstanis\/773110b12d91f42d3c3a22b71cbf6c42\r\n\r\nIt relies on [spawn-loader](https:\/\/github.com\/erikdesjardins\/spawn-loader) to load the JS files and ExtractTextPlugin to allow an HTML output.","also have a look at https:\/\/parceljs.org\/ to use html file as entry point , as of now it is not mature enough: that is the only problem","I suggest to look at [POI](https:\/\/poi.js.org) and there's even a [small course at egghead.io](https:\/\/egghead.io\/courses\/make-webpack-easy-with-poi)","[Related issue](https:\/\/github.com\/webpack\/webpack\/issues\/7589) by me, opened without knowing this issue existed!","For each module, the required path should be specified means like,\r\n![capture](https:\/\/user-images.githubusercontent.com\/31758787\/49789695-a019ef80-fd52-11e8-8488-8e3d9ddcc0f3.PNG)\r\n\r\nAccount-->Type of Account-->Creaeate accounts\r\n","Totally agree with @notlmn on #7589. Is this under consideration of webpack team?","Yo! Any progress here? Any documentation on how this may look? Does it already work? Sup \u2764\ufe0f ","Yes, it is will be implement in future, a lot of work right now (full pipeline fro `html`, same for `css`)","It's now possible to vote for this feature @ https:\/\/webpack.js.org\/vote (`HTML as entrypoint`).","Just dumped a few points on this in the vote.\r\n\r\n**If you're here and you see this, go vote!**\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/356375\/83339543-03784400-a29d-11ea-989f-222873724652.png)\r\n\r\n\r\nSee the link from @glen-84 ...\r\n\r\n> It's now possible to vote for this feature @ https:\/\/webpack.js.org\/vote (`HTML as entrypoint`).\r\n\r\n","Love the developer experience for this very problem in Vite. Here's what that looks like, adapted to `.js` files instead of `.vue` files:\r\n\r\n`index.html`:\r\n``` html\r\n<!doctype html>\r\n<html>\r\n  <head>\r\n    <title>html entry point FTW!<\/title>\r\n  <\/head>\r\n  <body>\r\n    <div id=\"app\"><\/div>\r\n    <script type=\"module\">\r\n      import { init } from \".\/index.js\";\r\n      init(document.querySelector(\"#app\"));\r\n    <\/script>\r\n  <\/body>\r\n<\/html>\r\n```\r\n\r\nSimilarly, Parcel has supported HTML entry points for a while. From their docs:\r\n\r\n`index.html`:\r\n``` html\r\n<html>\r\n<body>\r\n  <script src=\".\/index.js\"><\/script>\r\n<\/body>\r\n<\/html>\r\n```\r\n\r\nFrom the Parcel CLI:\r\n``` sh\r\nparcel index.html\r\n```\r\n\r\nIt would be lovely if you could write `.html` files that use  `<script type=\"module\">` or `<script src=\"foo.js\">` tags, point webpack at all HTML files (`*.html`), and everything just worked in the output.","Yes as @evilebottnawi said this is planned similar to parcel. If you think this should get higher priority, cast your vote on the voting page...","Where's this voting page at?","https:\/\/webpack.js.org\/vote\/","Is this voting page documented anywhere? Any time I've tried to click the up arrows, nothing happens.","@chriscalo you have to sign in with GitHub to vote. You vote with your influence points.","I am signed in because I see the up and down arrows. But when I click them nothing happens.","Can we please take this discussion elsewhere? It would good to keep this bug focused, it isn't the best place to discuss the voting system. ","@pribilinskiy mentioned [Poi (a \"zero-config\" wrapper on top of Webpack)](https:\/\/github.com\/egoist\/poi) in the [above comment](https:\/\/github.com\/webpack\/webpack\/issues\/536#issuecomment-352168515) which apparently everyone skipped because it has zero thumbs-up.\r\n\r\nPoi has a built-in [`html-entry-loader`](https:\/\/github.com\/egoist\/poi\/blob\/master\/plugins\/html-entry\/lib\/html-entry-loader.js). Looks really easy to use or adapt. Maybe someone can publish it to NPM separately from Poi...","Using `html-webpack-plugin` needs too many [plugins](https:\/\/github.com\/jantimon\/html-webpack-plugin#plugins) to handle custom tags inject, they have many mutex logic. and that list keep became longer.\r\n\r\nI think `vite` is doing good about HTML handing. It proves HTML entry could really save the day.","@Mitscherlich published a new [`html-entry-loader`](https:\/\/www.npmjs.com\/package\/html-entry-loader) on npm.","> @Mitscherlich published a new [`html-entry-loader`](https:\/\/www.npmjs.com\/package\/html-entry-loader) on npm.\r\n\r\nYeap it's okay to consider [`html-entry-loader`](https:\/\/www.npmjs.com\/package\/html-entry-loader) as a possible solution but not hurry to use it in production since it will only process `<script>` and `<link>` and may generate wrong html fragment while transforming.\r\n\r\n[`html-entry-loader`](https:\/\/www.npmjs.com\/package\/html-entry-loader) is a personal try-out and simply combined [`html-loader`](https:\/\/github.com\/webpack-contrib\/html-loader) and [`html-webpack-plugin`](https:\/\/github.com\/jantimon\/html-webpack-plugin) but add a little bit presume, which may not meet general propose. Any PR is welcome. \ud83d\ude04","Darn I really need this to work :(","(If it's an option for you, HTML entry points work in both Vite and Parcel)","@cmonti-bc actually, having a server endpoint that outputs the HTML entry dynamically is very nice, it plays well with SSR and allows you to fine-tune every detail. It's also straightforward to cache so performance can be similar to static files.","> @cmonti-bc actually, having a server endpoint that outputs the HTML entry dynamically is very nice, it plays well with SSR and allows you to fine-tune every detail. It's also straightforward to cache so performance can be similar to static files.\r\n\r\nSorry but the project I'm working on cannot afford to have an endpoint to serve the html. Thanks anyway.","Hello @sokra, @alexander-akait, @TheLarkInn, @wmertens\r\n\r\nthe [html-bundler-webpack-plugin](https:\/\/github.com\/webdiscus\/html-bundler-webpack-plugin)  allows to use a HTML template as an entry point.\r\nIn a HTML template can be referenced any source files of styles, scripts, images, fonts, etc.\r\nThe bundler plugin detects all source files referenced in a HTML template and extracts processed assets to the output directory.\r\n\r\nFor example, there is the source of `index.html`:\r\n```js\r\n<html>\r\n<head>\r\n  <!-- specify source style files -->\r\n  <link href=\".\/styles.scss\" rel=\"stylesheet\">\r\n  <!-- specify source script files here and\/or in body -->\r\n  <script src=\".\/main.ts\" defer=\"defer\"><\/script>\r\n<\/head>\r\n<body>\r\n  <h1>Hello World!<\/h1>\r\n  <!-- specify source image files -->\r\n  <img src=\".\/picture.png\">\r\n<\/body>\r\n<\/html>\r\n```\r\nYou can specify script, style and image source files in HTML using a relative path or Webpack aliases. Of cause, you can import styles in JavaScript. Imported styles will be extracted and the `<link href=\"...\">` tag will be injected in a HTML automatically.\r\n\r\nThe Webpack config is very simple:\r\n\r\n```js\r\nconst HtmlBundlerPlugin = require('html-bundler-webpack-plugin');\r\nmodule.exports = {\r\n  entry: {\r\n     index: 'src\/views\/home.html', \/\/ => dist\/index.html\r\n     'news\/sport': 'src\/views\/news\/sport\/index.html', \/\/ => dist\/news\/sport.html\r\n  },\r\n  plugins: [\r\n    new HtmlBundlerPlugin(),\r\n  ],\r\n  \/\/ ... loaders for ts, sass, images, etc.\r\n};\r\n```\r\n\r\nOr you can use the `entry` plugin option to locate all relevant options at the same place:\r\n\r\n```js\r\nconst HtmlBundlerPlugin = require('html-bundler-webpack-plugin');\r\nmodule.exports = {\r\n  plugins: [\r\n    new HtmlBundlerPlugin({\r\n      \/\/ automatically processing HTML templates in the path\r\n      entry: 'src\/views\/',\r\n      \/\/ -OR- define templates manually\r\n      entry: {\r\n        index: { \/\/ => dist\/index.html\r\n          import: 'src\/views\/home.html', \/\/ template file\r\n          data: { title: 'Homepage', name: 'Heisenberg' } \/\/ pass variables into template\r\n        },\r\n        'news\/sport': 'src\/views\/news\/sport\/index.html', \/\/ => dist\/news\/sport.html\r\n      },\r\n      js: {\r\n        \/\/ output filename of compiled JavaScript\r\n        filename: 'js\/[name].[contenthash:8].js',\r\n        inline: 'auto', \/\/ `auto`, true, false\r\n      },\r\n      css: {\r\n        \/\/ output filename of extracted CSS\r\n        filename: 'css\/[name].[contenthash:8].css',\r\n        inline: 'auto', \/\/ inlines CSS into HTML in development mode or save to file in production mode\r\n      },\r\n    }),\r\n  ],\r\n  \/\/ ... loaders for ts, sass, images, etc.\r\n};\r\n```\r\n\r\nThe generated `dist\/index.html` contains the output filenames of the processed files:\r\n\r\n```html\r\n<html>\r\n<head>\r\n  <link href=\"css\/styles.05e4dd86.css\" rel=\"stylesheet\">\r\n  <script src=\"js\/main.f4b855d8.js\" defer=\"defer\"><\/script>\r\n<\/head>\r\n<body>\r\n  <h1>Hello World!<\/h1>\r\n  <img src=\"img\/picture.58b43bd8.png\">\r\n<\/body>\r\n<\/html>\r\n```\r\n\r\nTry in a browser how it works:\r\n[![Open in StackBlitz](https:\/\/developer.stackblitz.com\/img\/open_in_stackblitz.svg)](https:\/\/stackblitz.com\/edit\/stackblitz-starters-78r926?file=webpack.config.js)\r\n\r\n","@webdiscus I have a case where I am trying to omit loading any JavaScript as an entry point. \r\n\r\nThis https:\/\/github.com\/GoogleChromeLabs\/telnet-client winds up creating an HTML file that also includes two `<script defer=\"defer\">` elements with `src` set to `main.js` and `runtime.js` that I am not using. I am writing `<script>` elements in the HTML directly before runnin `npm build run`. How do I instruct Webpack to not build those scripts or emit those `<script>` elements at all in the HTML?","@webdiscus Substituting `HtmlBundlerPlugin` for `HtmlWebpackPlugin` does remove the `<script>` tags, though the HTML is basically a script now\r\n\r\n```\r\n\/\/ Module\r\nvar code = \" <html> <head> ...\";\r\n\/\/ Exports\r\nexport default code;\r\n```\r\n\r\nand the file `runtime.js` is written to `src` as well as `main.html` where the idea was to just emit a single HTML file without writing `runtime.js` or `main`(.js\/html) at all.","@guest271314 \r\n\r\ntry my optimised [fork of telnet-client](https:\/\/github.com\/webdiscus\/telnet-client.git). It works fine.\r\nThis version generate html file with inlined JS and CSS. JS or CSS files are not generated in `dist\/`.\r\n\r\nUsing the `HtmlBundlerPlugin`:\r\n- you not need define JS files in the Webpack entry option, you can specify source files directly in HTML or write self JS code in `<script>` tag\r\n- you can write your JS code to a file and inline it in the generated HTML using the [`js.inline`](https:\/\/github.com\/webdiscus\/html-bundler-webpack-plugin#js) plugin option\r\n- you can inline CSS into HTML using the [`css.inline`](https:\/\/github.com\/webdiscus\/html-bundler-webpack-plugin#css) plugin option\r\n- don't use: html-loader, style-loader, html-webpack-plugin, mini-css-extract-plugin, because the  `HtmlBundlerPlugin` covers their functionality\r\n\r\n---\r\n> @webdiscus Substituting `HtmlBundlerPlugin` for `HtmlWebpackPlugin` does remove the `<script>` tags, though the HTML is basically a script now\r\n\r\n> ```\r\n> var code = \" <html> <head> ...\";\r\n> export default code;\r\n> ```\r\n\r\nThe HTML contains JS code because you are using the `html-loader`. Just remove it, it gets in the way.","Using the [html-bundler-webpack-plugin](https:\/\/github.com\/webdiscus\/html-bundler-webpack-plugin) you can use the source file paths in all dependencies, similar to how it works in [Vite](https:\/\/vitejs.dev\/guide\/#index-html-and-project-root) or [Parcel](https:\/\/parceljs.org\/).\r\n\r\n<img width=\"830\" style=\"max-width: 100%;\" src=\"https:\/\/raw.githubusercontent.com\/webdiscus\/html-bundler-webpack-plugin\/master\/images\/assets-graph.png\" alt=\"assets graph\">"],"labels":["enhancement"]},{"title":"Start warning when multiple versions of a library appear in one build","body":"usepropeller\/react.backbone#26 and similar issues would be more readily identified and prevented if Webpack could say things like \u201chey, just FYI, you have <React\/Underscore\/jQuery> being included twice in this build.\u201d\u00a0Will be a common problem as the industry moves away from a manual folder of `lib\/some-library.min.js` towards `package.json` and various dependency management tools.\n","comments":["I think it's a common problem for NPM on client-side and, while Webpack plugin could do this, I think it would benefit a wider community if we could mark packages we want to never be duped, in some way in `package.json`.\n\n@domenic what do you think? You advocated NPM on client-side, this is a very typical issue.\n","I think it should warn if there are two copies that are the same major version. E.g. if you have 1.5.2 and 2.1.0 it should not warn, but if you have 2.0.1 and 2.1.0 it should warn. Also it should never warn on multiple 0.x.y versions. (So basically it should warn if you have two copies that are semver-compatible.)\n\nThe warning would then happen in only a few cases:\n- Cases like `\"^2.0.1\"` plus `\"^2.1.0\"`, where you forgot to run `npm dedupe`, and running npm dedupe will fix it.\n- Cases like `\"2.0.x\"` plus `\"2.1.0\"`, where the authors of those packages are being too strict; they should be using `^`. In this case the warning tells you to go bug them.\n- Cases like Backbone 1.2 plus Backbone 1.6, where you need both because Backbone does not follow semver. In this case the warning is spurious.\n","That's a tricky issue, we discussed it a lot (#105 #47 #340). Imho `npm dedupe` is not usable as it changes the runtime behavior. Two modules, which had a separate instance of a module, will share a single instance after `npm dedupe`. This is a **serious** problem when modules provide a global config like `myModule.someConfig = true`. It's better to use webpack's [DedupePlugin](http:\/\/webpack.github.io\/docs\/list-of-plugins.html#dedupeplugin) because [it preserves runtime behavior](https:\/\/github.com\/webpack\/webpack\/issues\/47#issuecomment-16039529).\n\n@domenic has this issue been discussed at npm?\n\n@alanhogan maybe warnings are a bit too strong. It would be nice if webpack provided optimizations hints on demand.\n","Thanks for your response. I\u2019m glad to see this is under a lot of debate.\n\nI don\u2019t much care whether they are packaged as hints or warnings. But I will say that more than just an optimization, this can cause serious (and subtle) bugs; a warning may yet be appropriate.\n","This would be nice - I've spent days debugging why my router plugins were not working, and after I noticed that the backbone.js I was debugging was not the same file as the one I had installed I realized what was wrong.\n","I think this is a very important feature when using NPM and webpack, not only because of possible bugs but also to avoid bloating the build with different versions of the same package.\r\n\r\n**Update:**\r\nWritten a small Webpack plugin to warn in such cases: https:\/\/github.com\/darrenscerri\/duplicate-package-checker-webpack-plugin","Webpack 2 dropped the DedepePlugin: https:\/\/webpack.js.org\/guides\/migrating\/#dedupeplugin-has-been-removed.\r\n\r\nUsing the plugin provided by @darrenscerri, I can see that my build does have duplicates.\r\n\r\nIn development:\r\n```\r\nWARNING! Duplicate packages found.\r\n<regenerator-runtime> - 0.10.1, 0.9.6\r\n```\r\n\r\nIn production:\r\n```\r\nWARNING! Duplicate packages found.\r\n<babel-runtime> - 6.22.0, 6.18.0\r\n<fbjs> - 0.8.6, 0.1.0-alpha.7\r\n<regenerator-runtime> - 0.10.1, 0.9.6\r\n<component-emitter> - 1.2.1, 1.2.0\r\n```\r\n\r\nWhat is the recommended approach to handling duplicates without DedupePlugin?\r\nI guess in my case I should just make sure I update some of my packages (switching to webpack 2 and haven't upgraded all dependencies yet). But is there a general guideline or recommendation?","@loopmode. You would need to start by checking which modules are requiring those duplicates. Usually the solution is to update your dependencies.","What do you do if they include third party dependencies from dependencies which were already updated to the latest version?\r\nThis is the output that I get in my case:\r\n`<warning>\r\n    3.0.0 .\/~\/warning from .\/~\/react-router\/es\/routerWarning.js\r\n    2.1.0 .\/~\/react-widgets\/~\/warning from .\/~\/react-widgets\/lib\/ListGroupable.js\r\n\r\n  <dom-helpers>\r\n    3.2.1 .\/~\/dom-helpers from .\/~\/react-bootstrap\/lib\/Modal.js\r\n    2.4.0 .\/~\/react-widgets\/~\/dom-helpers from .\/~\/react-widgets\/~\/dom-helpers\/query\/height.js\r\n\r\n  <lodash.debounce>\r\n    4.0.8 .\/~\/lodash.debounce from .\/~\/redux-devtools-log-monitor\/lib\/LogMonitor.js\r\n    3.1.1 .\/~\/react-dock\/~\/lodash.debounce from .\/~\/react-dock\/lib\/Dock.js\r\n`\r\n","I'm wondering the same thing. After updating React (using yarn):\r\n```\r\nduplicate-package-checker:\r\n  <fbjs>\r\n    0.8.12 .\/~\/fbjs\r\n    0.8.16 .\/~\/react-dom\/~\/fbjs\r\n```\r\n\r\n`fbjs` is not a dependency in my package.json, so I'm not sure how it ended up at `~\/fbjs`. What is the solution to resolving a duplication like this?","I think yarn now has an option that allows you to override package versions of your depencencies\u2019 depencencies via a new option in package.json.  They call this \u201cselective version resolution.\u201d I haven\u2019t tried it yet. \r\nhttps:\/\/github.com\/yarnpkg\/yarn\/pull\/4105\r\n\r\n","Does exist some kind of approach to solve the problem that dg-grow-virgiliu-ratoi exposed?","how about the documentation section on their website, is that good? \r\n\r\nhttps:\/\/github.com\/darrenscerri\/duplicate-package-checker-webpack-plugin#resolving-duplicate-packages-in-your-bundle","I'll try it, thanks. :)\r\n\r\nAnyway, is in the roadmap some kind of stable solution for this problem? npm allows multiple versions for any dependency, It's not difficult to reproduce this problem.","<!-- identifier: inactive-warning -->\n\n**This issue had no activity for at least three months.**\n\nIt's subject to automatic issue closing if there is no activity in the next 15 days.","<!-- identifier: inactive-close -->\n\nIssue was closed because of inactivity.\n\nIf you think this is still a valid issue, please file a new issue with additional information.","9 years later let's work on this \ud83e\udd23\ud83d\ude2d\ud83d\ude05\ud83d\ude43"],"labels":["enhancement","S1: Confusing","P4: Nice To Have"]}]