[{"title":"Fixed #35319 -- Move the link to add a related object inside the .selector-available column for FilteredSelectMultiple","body":"# Trac ticket number\r\nticket-35319\r\n\r\n# Branch description\r\nMoves the link to add a related object inside the `.selector-available` column for FilteredSelectMultiple.\r\n\r\n# Checklist\r\n- [x] This PR targets the `main` branch. <!-- Backports will be evaluated and done by mergers, when necessary. -->\r\n- [ ] The commit message is written in past tense, mentions the ticket number, and ends with a period.\r\n- [x] I have checked the \"Has patch\" **ticket flag** in the Trac system.\r\n- [ ] I have added or updated relevant **tests**.\r\n- [ ] I have added or updated relevant **docs**, including release notes if applicable.\r\n- [ ] For UI changes, I have attached **screenshots** in both light and dark modes.\r\n","comments":["@knyghty I've created this draft PR to test my current approach. \r\n\r\nIn `admin\/js\/SelectFilter2.js`, we check if the original related field widget has an add link. If it does, we move it to the header and hide the original link.\r\n\r\nOne problem with this current patch is that the add link opens in the current tab and not as a popup, which I will look into and fix.","> @knyghty I've created this draft PR to test my current approach.\r\n> \r\n> In `admin\/js\/SelectFilter2.js`, we check if the original related field widget has an add link. If it does, we move it to the header and hide the original link.\r\n> \r\n> One problem with this current patch is that the add link opens in the current tab and not as a popup, which I will look into and fix.\r\n\r\nThank you @hrushikeshrv for working on this. Please note that we should ensure that the link is present providing a few selenium tests (or at least ensure that if the link is not shown, for whatever reason, there are existing tests that fail)."],"labels":["selenium"]},{"title":"Fixed #35189 -- Render admin collapsible fieldsets with <details>.","body":"TL;DR: Improve the accessibility of admin fieldsets and collapse them with a native HTML implementation.\r\n\r\n- Ticket: [#35189](https:\/\/code.djangoproject.com\/ticket\/35189)\r\n- Proof of concept: [Example 2: Details inside (no JS)](https:\/\/codepen.io\/MHLut\/pen\/LYaqYrz)\r\n- [Initial discussion on Discord, accessibility channel ](https:\/\/discord.com\/channels\/856567261900832808\/1207376857800900618)\r\n\r\n## Important facts\r\n\r\n- Works with the main model fieldset and stacked inline fieldsets.\r\n- This change removes all JavaScript for collapsible fieldsets.\r\n- I have recycled as much CSS as possible.\r\n- JavaScript used to check if a fieldset could be collapsible. With JS gone, I moved that check to the Fieldset helper class in Python.\r\n- The translations for \"Show\" and \"Hide\" are now redundant.\r\n- A new translation \"Fields\" (context \"form fields\") was introduced.\r\n\r\n## Known issues\r\n\r\n- No existing CSS bugs were fixed. \r\n  - Example: The font size of the fieldset is below 16px\/1rem.\r\n  - Example: The fieldset heading is hard to distinguish in `forced-colors` mode.\r\n  - Context: Style for `.collapse. h3` in `forms.css` was copied from `.module h2, .module caption, .inline-group h2` in `base.css`.\r\n- The `<h3>` heading in stacked inlines should be a `<h4>`; however, it was originally a `<h2>`, so it's still better than before.\r\n\r\nA potential UX issue could be that the clickable area of the fieldset has moved: You click on the details toggle (\"fields\") instead of the blue fieldset header.\r\n\r\n## Screenshots\r\n\r\nA collapsible fieldset; collapsed:\r\n![ticket-35189_001_collapsed](https:\/\/github.com\/django\/django\/assets\/2210890\/ba3da5d7-a02c-436e-baac-d0b4889cf64e)\r\n\r\nA collapsible fieldset; expanded:\r\n![ticket-35189_002_expanded](https:\/\/github.com\/django\/django\/assets\/2210890\/d971e320-d448-48fd-855a-25d07018a190)\r\n\r\nA fieldset that cannot be collapsed due to a validation error:\r\n![ticket-35189_003_incollapsible-error](https:\/\/github.com\/django\/django\/assets\/2210890\/762fb882-1406-49ed-9bb0-db2270cf1526)\r\n\r\nA collapsible fieldset inside a stacked inline; collapsed:\r\n![ticket-35189_004_collapsed-on-stacked-inline](https:\/\/github.com\/django\/django\/assets\/2210890\/69601af6-dc5a-4c4d-aa1f-983b77962c62)\r\n\r\nA collapsible fieldset inside a stacked inline; cannot be collapsed due to a validation error:\r\n![ticket-35189_005_incollapsible-error-on-stacked-inline](https:\/\/github.com\/django\/django\/assets\/2210890\/637ab781-4792-470d-ab22-a87b5f83ed16)","comments":["~~buildbot, test on selenium.~~ I don\u2019t think that works anymore \ud83d\ude05","For those interested in the heading layout (hello accessibility team), here is an example from my local test project.\r\n\r\nLayout:\r\n\r\n- Main fieldset\r\n- Collapsible fieldset: Address\r\n- Collapsible fieldset: Contact details\r\n- Collapsible fieldset: Notes\r\n- Stacked inline: Social links\r\n  - Main fieldset\r\n  - Fieldset: Username\r\n  - Collapsible fieldset: Profile URL\r\n- Tabular inline: Extra data\r\n  - Main fieldset\r\n\r\nBefore:\r\n\r\n```\r\n\u2013 H1: Change person\r\n\u2013\u2013 H2: Django Test Person (Django, they\/them\/theirs)\r\n\u2013\u2013 H2: Address (Show)\r\n\u2013\u2013 H2: Contact details (Show)\r\n\u2013\u2013 H2: Notes (Show)\r\n\u2013\u2013 H2: Social links\r\n\u2013\u2013\u2013 H3: Social link: django-software-foundation @ LinkedIn Delete\r\n\u2013\u2013 H2: Username\r\n\u2013\u2013 H2: Profile URL (Show)\r\n\u2013\u2013\u2013 H3: Social link: #2 Remove\r\n\u2013\u2013 H2: Username\r\n\u2013\u2013 H2: Profile URL (Show)\r\n\u2013\u2013 H2: Extra data\r\n```\r\n\r\nAfter:\r\n\r\n```\r\n\u2013 H1: Change person\r\n\u2013\u2013 H2: Django Test Person (Django, they\/them\/theirs)\r\n\u2013\u2013\u2013 H3: Address\r\n\u2013\u2013\u2013 H3: Contact details\r\n\u2013\u2013\u2013 H3: Notes\r\n\u2013\u2013 H2: Social links\r\n\u2013\u2013\u2013 H3: Social link: django-software-foundation @ LinkedIn Delete\r\n\u2013\u2013\u2013 H3: Username\r\n\u2013\u2013\u2013 H3: Profile URL\r\n\u2013\u2013\u2013 H3: Social link: #2 Remove\r\n\u2013\u2013\u2013 H3: Username\r\n\u2013\u2013\u2013 H3: Profile URL\r\n\u2013\u2013 H2: Extra data\r\n```\r\n\r\n_Generated using https:\/\/zoebijl.github.io\/table-of-contents\/_","I have removed the draft status of the PR. I expect that people will have feedback on the look and feel of the feature and that the code will require some changes. ~~As such, I have not fixed every Selenium test yet.~~","I didn't realize you can make inline admins collapsible as well. I will work on adding that feature.\r\n\r\nEdit: Fixed!"],"labels":["selenium","Djangonauts :rocket:"]},{"title":"Fixed #10403 -- Added a declarative syntax for FormSet, ModelFormSet & InlineFormSet.","body":"This patch is an update of @Parth1811 's [closed PR](https:\/\/github.com\/django\/django\/pull\/11481). \r\nIt includes classes for FormSet, ModelFormSet, and InlineFormSet, allowing for the creation of formsets using a declarative syntax instead of a factory.","comments":["Thanks @Mitchina, for taking the time to work on this ancient PR.\r\nI have lost the context for this, but the overall changes look promising to me.","> Thanks @Mitchina, for taking the time to work on this ancient PR. I have lost the context for this, but the overall changes look promising to me.\r\n\r\nHi @Parth1811, thank you for the encouragement! I'm glad to hear that you find the changes promising. Your changes and @carltongibson directions have been fundamental to me and I truly appreciate the opportunity to build upon them. I hope we can get it in!"],"labels":["Djangonauts :rocket:"]},{"title":"Fixed #34789: `filter_horizontal` duplicates entries in \"Chosen\" column after instance is added via in another field using the \"plus\" JS action","body":"This is largely based off the work of @yokeshwaran1 and the closed PR https:\/\/github.com\/django\/django\/pull\/17219.\r\n\r\nThis PR replaces the Selenium Test with a more active walkthrough to recreate the bug.\r\n\r\nTicket Link: https:\/\/code.djangoproject.com\/ticket\/34789#no1\n\n<!-- bot: {\"reminders\":[{\"id\":1,\"who\":\"nessita\",\"what\":\"check on progress\",\"when\":\"2024-04-01T09:00:00.000Z\"}]} -->","comments":["Resolved the issue commented on above. Interestingly, the failure was actually caused when using a model with casing like this:\r\n\r\n`FooBar`\r\n\r\nThe uppercase results in `data-model-ref checking` `foobar` against `foo bar`, and therefore `data-model-ref` does not pick up the match. \r\n\r\nBy changing the model name to this: `Foobar`, it prevents the added space and therefore `data-model-ref` is able to make the correct match.\r\n\r\nThis issue already exists in main so not relevant to this specific fix. I think @yokeshwaran1 already posted a ticket for the adjacent bug, but if not we can create a new one.\r\n\r\nNote if trying to reproduce: The model with the casing issue was resolved by turning `TransitionState` into `Transitionstate`","Hey @devin13cox, thank you for your work so far!\r\n\r\nI have restarted my review in this branch\/ticket but I have an issue, I'm not being able to reproduce the original report using latest `main` (nor Django 5.0.3 nor Django 4.2). Can you confirm if you are still able to reproduce?\r\n\r\nI'm using the same models as before:\r\n```python\r\nfrom django.db import models\r\n\r\n\r\nclass State(models.Model):\r\n    label = models.CharField(max_length=255)\r\n\r\n    def __str__(self):\r\n        return self.label\r\n\r\n\r\nclass Transition(models.Model):\r\n    source = models.ManyToManyField(State, related_name=\"transition_source\")\r\n    target = models.ForeignKey(State, related_name=\"transition_target\", on_delete=models.CASCADE)\r\n\r\n    def __str__(self):\r\n        return f\"Sources: {', '.join(s.label for s in self.source.all())} -- Target: {self.target.label}\"\r\n```\r\n\r\nAnd the same admin:\r\n```python\r\nfrom django.contrib import admin\r\n\r\nfrom .models import State, Transition, TransitionTriple\r\n\r\n\r\nclass TransitionAdmin(admin.ModelAdmin):\r\n    filter_horizontal = [\"source\"]\r\n\r\n\r\nadmin.site.register(State)\r\nadmin.site.register(Transition, TransitionAdmin)\r\n```\r\nLet me know! Thank you. ","@devin13cox  I spent quite some time debugging why I wasn't able to reproduce. Finally I realized I was trying to reproduce a slightly different issue :facepalm:. We have two bugs to solve (as we have said in the past), unclear whether we want to solve them in the same PR or not:\r\n\r\n1. One issue is the reported one, when adding a new related entry using the \"+\" sign from the FK field, the M2M with the `filter_horizontal` gets incorrectly updated. For this, I think your proposed solution could work, I will go back to review this diff with that in mind, will submit updates on this soon.\r\n2. The other issue is when adding a new related entry using the \"+\" sign from from the M2M field. In this case, no other widget gets updated, but really it should update all other fields listing instances of the related model just added. For this, I tracked down the issue to the selector used in `dismissAddRelatedObjectPopup` to decide whether to call `updateRelatedSelectsOptions` or not. Basically the `id` used in the `document.getElementById` is wrong for the M2M widget (but correct for the single FK field, so we may need to fix the call site to pass the proper `name`):\r\n```diff\r\n--- a\/django\/contrib\/admin\/static\/admin\/js\/admin\/RelatedObjectLookups.js\r\n+++ b\/django\/contrib\/admin\/static\/admin\/js\/admin\/RelatedObjectLookups.js\r\n@@ -119,7 +119,7 @@\r\n \r\n     function dismissAddRelatedObjectPopup(win, newId, newRepr) {\r\n         const name = removePopupIndex(win.name);\r\n-        const elem = document.getElementById(name);\r\n+        const elem = document.getElementById(name + '_from');\r\n         if (elem) {\r\n             const elemName = elem.nodeName.toUpperCase();\r\n             if (elemName === 'SELECT') {\r\n```","> Resolved the issue commented on above.\r\n\r\n:trophy: \r\n\r\n> Interestingly, the failure was actually caused when using a model with casing like this: `FooBar`\r\n\r\nI think this is in fact another issue, not the one reported in ticket-34789.\r\n\r\n> The uppercase results in `data-model-ref checking` `foobar` against `foo bar`, and therefore `data-model-ref` does not pick up the match.\r\n> \r\n> By changing the model name to this: `Foobar`, it prevents the added space and therefore `data-model-ref` is able to make the correct match.\r\n> \r\n> This issue already exists in main so not relevant to this specific fix. I think @yokeshwaran1 already posted a ticket for the adjacent bug, but if not we can create a new one.\r\n> \r\n> Note if trying to reproduce: The model with the casing issue was resolved by turning `TransitionState` into `Transitionstate`\r\n\r\nWhen I first read this comment, I wasn't sure what you mean. Now, after having been debugging things in this code for a few hours, I understand that we have 3 issues: the two I detailed in my previous comment, and a third one which can be described as:\r\n\r\n_The update of related objects fails in the admin when the related model has a name in camel case._\r\n\r\nDo you agree? I don't think we have tickets for each of the three issues, would you fancy filing ticket for 2 and 3?","> _The update of related objects fails in the admin when the related model has a name in camel case._\r\n> \r\n> Do you agree? I don't think we have tickets for each of the three issues, would you fancy filing ticket for 2 and 3?\r\n\r\nAfter some more debugging, I believe the fix for the third issue should something along these lines:\r\n```diff\r\n\r\ndiff --git a\/django\/contrib\/admin\/templates\/admin\/widgets\/related_widget_wrapper.html b\/django\/contrib\/admin\/templates\/admin\/widgets\/related_widget_wrapper.html\r\nindex 8e4356a95c..99b20545af 100644\r\n--- a\/django\/contrib\/admin\/templates\/admin\/widgets\/related_widget_wrapper.html\r\n+++ b\/django\/contrib\/admin\/templates\/admin\/widgets\/related_widget_wrapper.html\r\n@@ -1,5 +1,5 @@\r\n {% load i18n static %}\r\n-<div class=\"related-widget-wrapper\" {% if not model_has_limit_choices_to %}data-model-ref=\"{{ model }}\"{% endif %}>\r\n+<div class=\"related-widget-wrapper\" {% if not model_has_limit_choices_to %}data-model-ref=\"{{ model_name }}\"{% endif %}>\r\n     {{ rendered_widget }}\r\n     {% block links %}\r\n         {% spaceless %}\r\ndiff --git a\/django\/contrib\/admin\/widgets.py b\/django\/contrib\/admin\/widgets.py\r\nindex fc0cd941d1..9633ebb1a1 100644\r\n--- a\/django\/contrib\/admin\/widgets.py\r\n+++ b\/django\/contrib\/admin\/widgets.py\r\n@@ -328,6 +328,7 @@ class RelatedFieldWidgetWrapper(forms.Widget):\r\n             \"name\": name,\r\n             \"url_params\": url_params,\r\n             \"model\": rel_opts.verbose_name,\r\n+            \"model_name\": rel_opts.model_name,\r\n             \"can_add_related\": self.can_add_related,\r\n             \"can_change_related\": self.can_change_related,\r\n             \"can_delete_related\": self.can_delete_related,\r\n```\r\n\r\nWould you have some time to create the ticket and propose a patch? :medal_sports: ","Hey @nessita, thank you for taking a deep dive into this! I was not aware of the m2m issue, but that makes sense. I can set aside some time next week to introduce the patch and some tests.\r\n\r\nAs for the third issue, that's exactly what I was describing. Simply a naming issue.\r\n\r\nWould it make sense to make alterations to the scope of this ticket due to the related nature and push it all together? Or would you prefer separate patches for these items?\r\n\r\nAdding to this ticket would likely simplify it, especially for the third issue (could simply alter the existing test to utilize camel casing). The M2M would need a slightly different setup.","> Hey @nessita, thank you for taking a deep dive into this! I was not aware of the m2m issue, but that makes sense. I can set aside some time next week to introduce the patch and some tests.\r\n\r\nAmazing, thank you!\r\n\r\nI had the Selenium tests running for this PR (see actions outcome) and there was a failure, would you also have time to see if that's related to your work?\r\n\r\n> As for the third issue, that's exactly what I was describing. Simply a naming issue.\r\n> \r\n> Would it make sense to make alterations to the scope of this ticket due to the related nature and push it all together? Or would you prefer separate patches for these items?\r\n\r\nI think we should have separated patches, that allows to have a tidier git history and it also helps in the unlikely case that we need to revert a given change due to a regression.\r\n\r\n> Adding to this ticket would likely simplify it, especially for the third issue (could simply alter the existing test to utilize camel casing). The M2M would need a slightly different setup.\r\n\r\nYeah, I know that merging fixes is simpler in the short term, but in the medium to long term, it really pays off to have a clean git history.\r\n\r\nThank you!!!\r\n\r\n\/remind me to check on progress in 2 weeks\r\n\r\n","@nessita set a reminder for **4\/1\/2024**"],"labels":["selenium","reminder"]},{"title":"Fixed #35235 -- ArrayAgg() doesn't return default when filter contains __in=[].","body":"https:\/\/code.djangoproject.com\/ticket\/35235\r\n\r\nNew to Django core here and wanting to try for next djangonaut run, thought I could try to triage by writing some quickie tests to see if I could replicate the issue... and I can't. My 2 additional tests (and all of them, actually) pass locally. \r\n\r\nLet me know if this is not a good approach.","comments":["I wonder if we should also add a test around `_output_field_or_none` though it could be a bit too trivial \ud83e\udd14\r\n\r\neg\r\n\r\n```\r\ndef test_output_field_or_none(self):\r\n    expression = FooExpression()\r\n    self.assertIsNone(assert expression._output_field_or_none)\r\n    new_output_field = BooleanField()\r\n    expression.output_field = new_output_field\r\n    self.assertIs(expression._output_field_or_none, new_output_field)\r\n```","@shangxiao\r\n\r\n> I wonder if we should also add a test around _output_field_or_none though it could be a bit too trivial \ud83e\udd14\r\n\r\nI think it might be worth it yes just to capture that is it an unexpected behaviour of `BaseExpression`\r\n\r\nAlso do you know how to trigger a benchmark run on a PR? I figured it might be worth a run to assert our expectations wrt\/to `_output_field_or_none` _uncaching_ hold.\r\n\r\nMy expectations are that since every expression is composed of other expressions that they resolve their output field from and eventually cache them it should have no impact but it might be valuable to confirm prior to merging if it's just a few more CPU cycle away.","BTW I also just noticed `_output_field_resolved_to_none` which gets assigned in `output_field` and it seems that flag might also warrant clearing? I wonder if its existence warrants the usage of a slightly more involved solution that has `output_field` assignment clear both `_output_field_or_none` and `_output_field_resolved_to_none` instead.","> BTW I also just noticed `_output_field_resolved_to_none` which gets assigned in `output_field` and it seems that flag might also warrant clearing? I wonder if its existence warrants the usage of a slightly more involved solution that has `output_field` assignment clear both `_output_field_or_none` and `_output_field_resolved_to_none` instead.\r\n\r\nI saw that. Initially I figured we could ignore it as it's only used in that module, but as folks always say we don't know how this module gets used out in the wild \ud83d\ude1d\r\n\r\nA simpler (and possibly more Pythonic?) approach could just be to remove flags altogether and raise a different exception type, and use that as the distinguishing factor as to whether `_output_field_or_none()` reraises.\r\n\r\neg\r\n\r\n```\r\n--- a\/django\/db\/models\/expressions.py\r\n+++ b\/django\/db\/models\/expressions.py\r\n@@ -172,7 +172,6 @@ class BaseExpression:\r\n     empty_result_set_value = NotImplemented\r\n     # aggregate specific fields\r\n     is_summary = False\r\n-    _output_field_resolved_to_none = False\r\n     # Can the expression be used in a WHERE clause?\r\n     filterable = True\r\n     # Can the expression can be used as a source expression in Window?\r\n@@ -310,8 +309,7 @@ class BaseExpression:\r\n         \"\"\"Return the output type of this expressions.\"\"\"\r\n         output_field = self._resolve_output_field()\r\n         if output_field is None:\r\n-            self._output_field_resolved_to_none = True\r\n-            raise FieldError(\"Cannot resolve expression type, unknown output_field\")\r\n+            raise ValueError(\"Cannot resolve expression type, unknown output_field\")\r\n         return output_field\r\n\r\n     @property\r\n@@ -323,8 +321,7 @@ class BaseExpression:\r\n         try:\r\n             return self.output_field\r\n         except FieldError:\r\n-            if not self._output_field_resolved_to_none:\r\n-                raise\r\n+            raise\r\n\r\n     def _resolve_output_field(self):\r\n         \"\"\"\r\n```\r\n\r\n","Or maybe this is better as it keeps the API consistent - this way it doesn't disrupt folks expecting `FieldError` from `.output_field`.\r\n\r\nI know Mariusz doesn't like specific exceptions but this is a practice I find valuable - a practice which I got from old mate Raymond Hettinger in one of his presentations.\r\n\r\nAnyway though the point I'm making is that \"state is the root of all evil\" (aside from premature optimisation that is \ud83d\ude01)\r\n\r\n```\r\n--- a\/django\/db\/models\/expressions.py\r\n+++ b\/django\/db\/models\/expressions.py\r\n@@ -166,13 +166,16 @@ class Combinable:\r\n         return NegatedExpression(self)\r\n\r\n\r\n+class OutputFieldIsNoneError(FieldError):\r\n+    pass\r\n+\r\n+\r\n class BaseExpression:\r\n     \"\"\"Base class for all query expressions.\"\"\"\r\n\r\n     empty_result_set_value = NotImplemented\r\n     # aggregate specific fields\r\n     is_summary = False\r\n-    _output_field_resolved_to_none = False\r\n     # Can the expression be used in a WHERE clause?\r\n     filterable = True\r\n     # Can the expression can be used as a source expression in Window?\r\n@@ -310,8 +313,9 @@ class BaseExpression:\r\n         \"\"\"Return the output type of this expressions.\"\"\"\r\n         output_field = self._resolve_output_field()\r\n         if output_field is None:\r\n-            self._output_field_resolved_to_none = True\r\n-            raise FieldError(\"Cannot resolve expression type, unknown output_field\")\r\n+            raise OutputFieldIsNoneError(\r\n+                \"Cannot resolve expression type, unknown output_field\"\r\n+            )\r\n         return output_field\r\n\r\n     @property\r\n@@ -322,9 +326,10 @@ class BaseExpression:\r\n         \"\"\"\r\n         try:\r\n             return self.output_field\r\n+        except OutputFieldIsNoneError:\r\n+            return\r\n         except FieldError:\r\n-            if not self._output_field_resolved_to_none:\r\n-                raise\r\n+            raise\r\n\r\n     def _resolve_output_field(self):\r\n         \"\"\"\r\n```","I like the `OutputFieldIsNoneError` approach a lot, it seems like it should have been this way in the first place.\r\n\r\nOne small tweak I would make; the whole `except FieldError: raise` branch is now unnecessary\r\n\r\n```diff\r\n--- a\/django\/db\/models\/expressions.py\r\n+++ b\/django\/db\/models\/expressions.py\r\n@@ -166,13 +166,16 @@ class Combinable:\r\n         return NegatedExpression(self)\r\n\r\n\r\n+class OutputFieldIsNoneError(FieldError):\r\n+    pass\r\n+\r\n+\r\n class BaseExpression:\r\n     \"\"\"Base class for all query expressions.\"\"\"\r\n\r\n     empty_result_set_value = NotImplemented\r\n     # aggregate specific fields\r\n     is_summary = False\r\n-    _output_field_resolved_to_none = False\r\n     # Can the expression be used in a WHERE clause?\r\n     filterable = True\r\n     # Can the expression can be used as a source expression in Window?\r\n@@ -310,8 +313,9 @@ class BaseExpression:\r\n         \"\"\"Return the output type of this expressions.\"\"\"\r\n         output_field = self._resolve_output_field()\r\n         if output_field is None:\r\n-            self._output_field_resolved_to_none = True\r\n-            raise FieldError(\"Cannot resolve expression type, unknown output_field\")\r\n+            raise OutputFieldIsNoneError(\r\n+                \"Cannot resolve expression type, unknown output_field\"\r\n+            )\r\n         return output_field\r\n\r\n     @property\r\n@@ -322,9 +326,10 @@ class BaseExpression:\r\n         \"\"\"\r\n         try:\r\n             return self.output_field\r\n+        except OutputFieldIsNoneError:\r\n+            return\r\n-         except FieldError:\r\n-            if not self._output_field_resolved_to_none:\r\n-                raise\r\n\r\n     def _resolve_output_field(self):\r\n         \"\"\"","Ah yes of course you're right, one of those forest-trees moments \ud83d\ude02","@sharonwoo Just need some tests around `_output_field_or_none` \ud83d\udc4d "],"labels":["benchmark"]},{"title":"Refs #34976 -- Print directory structure after startapp and startproject","body":"Print the newly created directory structure after running the startapp and startproject commands.\r\nThis provides feedback that a command has successfully run.\r\n\r\nRefs #34976\r\n\r\n*Sample output*:\r\n![Screenshot from 2024-02-15 12-51-01](https:\/\/github.com\/django\/django\/assets\/82294671\/2455dffc-e2df-4f63-8136-80888e2546af)\r\n![Screenshot from 2024-02-15 12-51-44](https:\/\/github.com\/django\/django\/assets\/82294671\/fbb48964-906d-4656-b9dc-808496aa5829)\r\n\r\n","comments":["Thanks for this patch, however, personally, I don't think it's worth adding. I accepted ticket-34976 for the simplest congrats message (#17722).","Hi @felixxm, there\u2019s rough agreement on the value of the directory structure in the [forum thread](https:\/\/forum.djangoproject.com\/t\/feature-request-startproject-and-startapp-should-provide-feedback\/24073), and I added it to [ticket #34976](https:\/\/code.djangoproject.com\/ticket\/34976) as well. If you don\u2019t think it\u2019s worth adding I\u2019d suggest making the case for that on the forum thread, as that\u2019s where the output was discussed most, and the basis for me suggesting both the success message and the file structure output on the ticket.\r\n\r\n@TobeTek thank you for giving this a go! Please make sure to update your pull request description to explain how you arrived at the solution you\u2019re proposing. I think it\u2019d also be nice to know how you\u2019ve tested this (for example which operating systems, which command options), and perhaps share a text example of what the output looks like.","> Hi @felixxm, there\u2019s rough agreement on the value of the directory structure in the [forum thread](https:\/\/forum.djangoproject.com\/t\/feature-request-startproject-and-startapp-should-provide-feedback\/24073), and I added it to [ticket #34976](https:\/\/code.djangoproject.com\/ticket\/34976) as well. If you don\u2019t think it\u2019s worth adding I\u2019d suggest making the case for that on the forum thread, as that\u2019s where the output was discussed most, and the basis for me suggesting both the success message and the file structure output on the ticket.\r\n\r\nWhatever you prefer. This is just my opinion and is not more important than anyone else's."],"labels":["Djangonauts :rocket:"]},{"title":"Fixed primary key quoting in admin related object links","body":"[Ticket-30386](https:\/\/code.djangoproject.com\/ticket\/30386)\r\n\r\nOriginal PR: #16592 ","comments":[],"labels":["Djangonauts :rocket:"]},{"title":"Updated docs examples to use relative imports.","body":"Like said here https:\/\/github.com\/django\/django\/pull\/16044 :\r\n- fixed typo from article to aricles\r\n- removed myapp\/ from example\r\n- switch from absolute to relative path in import `from myapp.models import Article` -> `from .models import Article` ","comments":[],"labels":["Djangonauts :rocket:"]},{"title":"Preferred use of SimpleTestCase.settings() and SimpleTestCase.modify_settings().","body":"Following on from #17673, I noticed that we could make more use of `SimpleTestCase.settings()` and `SimpleTestCase.modify_settings()`. By making them static methods, we can also use them in `.setUpClass()`, etc. where appropriate.\n\n<!-- bot: {\"reminders\":[{\"id\":1,\"who\":\"nessita\",\"what\":\"check on this\",\"when\":\"2024-04-19T09:00:00.000Z\"}]} -->","comments":["_(I was torn by the first commit. It's very straightforward, but is documented, so I guess we should do a ticket?)_","@ngnpope Thanks :+1: It's hard for me to understand why it's worth changing. `SimpleTestCase.settings` is only a shortcut for `override_settings`, and `override_settings`\/`modify_settings` can already be used in `setUpClass()` and `enterClassContext()`.","> `SimpleTestCase.settings` is only a shortcut for `override_settings`...\r\n\r\nIndeed, but it is also presented [earlier in the documentation](https:\/\/docs.djangoproject.com\/en\/5.0\/topics\/testing\/tools\/#overriding-settings) than the global decorator function and caught me out because it didn't work in a class-level scope as I naively assumed it might.\r\n\r\n> ...and `override_settings`\/`modify_settings` can already be used in `setUpClass()` and `enterClassContext()`.\r\n\r\nAlso true. The advantage of the shortcut is that it avoids the need to import the decorator function in some cases.","I've reviewed this work and I agree that having `settings` and `modify_settings` being static methods is both more correct and more handy. So from that POV I would certainly merge the first commit. I'm a bit reluctant about commits 2 and 3, considering our rule of \"we usually don't merge style-ish refactors\".\r\n\r\nHaving said that, I did wonder while reading the diff what's the point of providing `settings` and `modify_settings` from the `SimpleTestCase` class, given that these are just wrapped calls to the helper functions `override_settings` and `modify_settings`. Was there ever a conversation about removing\/deprecating these?","> I've reviewed this work and I agree that having `settings` and `modify_settings` being static methods is both more correct and more handy. So from that POV I would certainly merge the first commit.\r\n\r\nIf we're keeping these shortcuts then, yes, this makes sense.\r\n\r\n> I'm a bit reluctant about commits 2 and 3, considering our rule of \"we usually don't merge style-ish refactors\".\r\n\r\nIt's not really style-ish refactoring. It's arguably using the preferred approach, given the methods on the test case class are documented ahead of the general functions...\r\n\r\n> Having said that, I did wonder while reading the diff what's the point of providing `settings` and `modify_settings` from the `SimpleTestCase` class, given that these are just wrapped calls to the helper functions `override_settings` and `modify_settings`. Was there ever a conversation about removing\/deprecating these?\r\n\r\nNo, there wasn't, but I see the appeal in getting rid of them - they're partially flawed without the first commit above, and the most common use is as a decorator on the test method or test case class in cases where the override isn't dynamic. Really they only benefit they provide is not needing the import, but that is rare because the more useful, more common decorator usage requires the import.\r\n\r\n`SimpleTestCase.modify_settings()` was added in 5241763c81b6afe1c0327ff7eb0d75c643f24ce0 back in 2013 when `@modify_settings(...)` was added for consistency with `SimpleTestCase.settings()`.\r\n\r\nIt seems that `SimpleTestCase.settings()` was actually the original and was kept for backward compatibility when the decorator form of `@override_settings(...)` (and the `setting_changed` signal) was added in a3a53e0b7364c7f9bf3a2f1551dc527505051974 back in 2011.\r\n\r\nHere are some naive counts of usage in Django itself:\r\n\r\n```console\r\n$ git grep -hc @override_settings | paste -s -d+ - | bc\r\n1224\r\n$ git grep -hc @modify_settings | paste -s -d+ - | bc\r\n83\r\n$ git grep -hc 'self.settings(' | paste -s -d+ - | bc\r\n274\r\n$ git grep -hc 'self.modify_settings(' | paste -s -d+ - | bc\r\n13\r\n```\r\n\r\nSo, do we want to make this less TIMTOWTDI and deprecate?","@ngnpope Hi and thank you for your patience.\r\n\r\nI've been thinking about this, and while I like the idea of the cleanup, I wonder how invasive it could be for many code bases out there.\r\n\r\nWould you be willing to propose this in the forum to get a sense of the overall acceptance\/rejection of the cleanup idea?\r\n\r\n\/remind me to check on this in one month","@nessita set a reminder for **4\/19\/2024**"],"labels":["reminder"]},{"title":"Fix items not aligned properly when using a flex-container in the admin using raw_id_fields","body":"In the modeladmin, when using raw_id_fields = (\"parent\",) in the ModelAdmin, the search button and name are aligned at the top.\r\n\r\nThis PR fixes that allign.\r\n\r\n**Before**\r\n![image](https:\/\/github.com\/django\/django\/assets\/2875254\/f1cb25fe-e634-43a9-8460-24d5ab4d24a0)\r\n\r\n**After**\r\n![image](https:\/\/github.com\/django\/django\/assets\/2875254\/21af882b-a6f7-44da-8e2c-f44021591f58)\r\n","comments":["Hello @Atem18, thank you for your interest in making Django better.\r\n\r\nWhile I agree that the search button and corresponding text look better when they are center-aligned, the change you are proposing is affecting many other admin pages and pieces. For example, see the User detail page (see how the field labels change from top aligned to centered):\r\n\r\n* In `main`:\r\n![image](https:\/\/github.com\/django\/django\/assets\/124304\/c2fd4742-8569-4827-8536-f98a9f01a0a8)\r\n\r\n* In this branch:\r\n![image](https:\/\/github.com\/django\/django\/assets\/124304\/0a8ab0fa-d5af-4e9d-80e0-3d50ecbd4286)\r\n","@nessita Hi, thanks for reviewing my PR. For me it looks great to have them centered instead of top-aligned because when you look at other smaller fields, they looks like aligned in the center and not the top:\r\n<img width=\"486\" alt=\"image\" src=\"https:\/\/github.com\/django\/django\/assets\/2875254\/65fc0d8d-64c7-4fd2-a679-e96f1340c48c\">\r\n\r\nI guess this should be fixed anyway because in forms.css, the .related-lookup class has the property vertical-align: middle; but it does not work and Firefox recommends to fix it:\r\n<img width=\"242\" alt=\"image\" src=\"https:\/\/github.com\/django\/django\/assets\/2875254\/08eda3ce-40aa-4f34-be1d-9095d884f1ca\">\r\n<img width=\"336\" alt=\"image\" src=\"https:\/\/github.com\/django\/django\/assets\/2875254\/1a51a5cb-ee26-4fec-b786-817d5680c87a\">\r\n","Hello @Atem18!\r\n\r\nI consulted with a Django contributor who has worked recently on the admin CSS and that is also part of the accessibility team, and they laid our a few points I agree with:\r\n* Labels aligned at the top are better for scanning a page top-bottom. If there is a big fieldset like the one for permissions, on smaller screens a user may see the field but not the label and that could be confusing.\r\n* The alignment of text\/search icon with the label is nice but we don't think it's worth it for the regression on larger fields.\r\n\r\nPerhaps it would be better to align the input text better in a top aligned mode though it may not be worth the effort. Could you think of another way of aligning that icon?","Hi @nessita, thanks a lot for the comments, I agree with it indeed.\r\nAs for the lookup, they were properly aligned in at least the version 4.1.7 of Django. Before, they were not wrapped in the flex-container and it looked just nearly like my \"after\" screenshot:\r\n<img width=\"354\" alt=\"image\" src=\"https:\/\/github.com\/django\/django\/assets\/2875254\/9c26cb37-a7c5-481e-979f-0a0077c4b6f3\">\r\nI can do some tests to see in which version this changed but maybe the person who worked on it will know quicker than I do.\r\n","(this isn\u2019t an accessibility issue so I\u2019ve untagged the team as reviewers. Tom has volunteered himself instead)","Same thing for the ForeignKey.\r\n\r\nIn 4.1.7:\r\n<img width=\"331\" alt=\"image\" src=\"https:\/\/github.com\/django\/django\/assets\/2875254\/6ff1bdaa-d5e4-4200-928f-5fe697e89ec2\">\r\n\r\nIn 5.0.1:\r\n<img width=\"375\" alt=\"image\" src=\"https:\/\/github.com\/django\/django\/assets\/2875254\/7b20cf37-3d34-44c0-8d77-3a378b855954\">\r\n","I can confirm that it changed in the version 5.0, it was fine in the 4.2.9"],"labels":["selenium"]},{"title":"Fixed selenium tests in Firefox.","body":"Unlike Chromium-based browsers, Firefox does not automatically scroll elements into view when using the Actions API with `move_to_element`. This calls the `scrollIntoView` function explicitly, which fixes some selenium tests when not running in headless mode.\r\n\r\nNamely, the `admin_views.tests.SeleniumTests.test_prepopulated_fields` test has a page larger than the viewport, and some elements are hidden, leading the test failing with an Exception like:\r\n```\r\nselenium.common.exceptions.MoveTargetOutOfBoundsException: Message: Move target (570, 968) is out of bounds of viewport dimensions (1280, 955)\r\n```","comments":[],"labels":["selenium"]},{"title":"Fixed #34977: Make change password form reachable through button","body":"https:\/\/code.djangoproject.com\/ticket\/34977\r\n\r\nTo improve usability and accessibility, this PR replaces the link to change a user's password within the help text of the password field of the change user form by a button.\r\n\r\n<img width=\"1015\" alt=\"image\" src=\"https:\/\/github.com\/django\/django\/assets\/16904477\/06956475-5563-4f04-9692-e14c518bba4b\">\r\n\r\nBesides an improved user experience, I would expect this PR to also improve accessibility. But since I am anything but an expert on accessibility, I would like to ask the accessibility team to review and give hints on hot to improve accessibility.\n\n<!-- bot: {\"reminders\":[{\"id\":1,\"who\":\"nessita\",\"what\":\"re-check the status of this PR\",\"when\":\"2024-03-28T09:00:00.000Z\"}]} -->","comments":["I would go a different route to solve this issue, specially because I believe that the best practice for help texts is not to use markup at all (more so for easing translations).\r\n\r\nSo my proposal is to:\r\n\r\n* Re-phrase the help texts so they are complete sentences that make sense but without any actionable links nor buttons.\r\n* Add the action button next to the help text.\r\n\r\nThis would also have the (nice) side effect to separate \"form concerns\" (ie help texts) from UI elements that want to be displayed together in a template.\r\n\r\nInitial proposal (to be discussed with the accessibility team):\r\n```diff\r\ndiff --git a\/django\/contrib\/auth\/forms.py b\/django\/contrib\/auth\/forms.py\r\nindex 5398af4dad..30d28cbe00 100644\r\n--- a\/django\/contrib\/auth\/forms.py\r\n+++ b\/django\/contrib\/auth\/forms.py\r\n@@ -179,9 +179,8 @@ class UserChangeForm(forms.ModelForm):\r\n     password = ReadOnlyPasswordHashField(\r\n         label=_(\"Password\"),\r\n         help_text=_(\r\n-            \"<p>Raw passwords are not stored, so there is no way to see this \"\r\n-            \"user\u2019s password, but you can change the password here:<\/p>\"\r\n-            '<p><a class=\"button\" role=\"button\" href=\"{}\">Change password<\/a><\/p>'\r\n+            \"Raw passwords are not stored, so there is no way to see this \"\r\n+            \"user\u2019s password.\"\r\n         ),\r\n     )\r\n \r\ndiff --git a\/django\/contrib\/auth\/templates\/auth\/widgets\/read_only_password_hash.html b\/django\/contrib\/auth\/templates\/auth\/widgets\/read_only_password_hash.html\r\nindex c73042b18f..f88d2e1ba4 100644\r\n--- a\/django\/contrib\/auth\/templates\/auth\/widgets\/read_only_password_hash.html\r\n+++ b\/django\/contrib\/auth\/templates\/auth\/widgets\/read_only_password_hash.html\r\n@@ -1,5 +1,8 @@\r\n+{% load i18n %}\r\n+\r\n <div{% include 'django\/forms\/widgets\/attrs.html' %}>\r\n {% for entry in summary %}\r\n <strong>{{ entry.label }}<\/strong>{% if entry.value %}: <bdi>{{ entry.value }}<\/bdi>{% endif %}\r\n {% endfor %}\r\n+<a class=\"button\" role=\"button\" href=\"..\/password\/\">{% trans \"Change password\" %}<\/a>\r\n <\/div>\r\n```\r\n\r\nDraft UI:\r\n![image](https:\/\/github.com\/django\/django\/assets\/124304\/f0f2b093-6dc3-4509-ace3-19862a17da7c)\r\n","Good idea! Once we're touching `ReadOnlyPasswordHashField` I'd also like to change the formatting that the button always will be on the right. Depending on viewport width, the button will otherwise break into the next line.","@fsbraun Would you have time to update this PR by rebasing onto main and ensuring is ready for re-review? Thanks!\r\n\r\n@django\/accessibility Would you have any opinion on my proposal above?\r\n\r\n\/remind me to re-check the status of this PR in 3 weeks","@nessita set a reminder for **3\/28\/2024**","@nessita I've rebased and rewritten to reflect your first comment:\r\n* Help texts do not contain markup or buttons\r\n* Widget now contains the button for the link\r\n* In private exchange with @sabderemane we concluded that a `role` attribute for the button is not advisable from a accessibility viewpoint","> @nessita I've rebased and rewritten to reflect your first comment:\r\n> \r\n>     * Help texts do not contain markup or buttons\r\n> \r\n>     * Widget now contains the button for the link\r\n> \r\n>     * In private exchange with @sabderemane we concluded that a `role` attribute for the button is not advisable from a accessibility viewpoint\r\n\r\nThank you @fsbraun ! Please remember to update the ticket flags accordingly."],"labels":["reminder"]},{"title":"Fixed #25704 -- Added response time in runserver logs.","body":"Override `log_request` as `log_request` is called by `log_response` and format the message to include time for request completion plus some WSGI server overhead. ","comments":["@tushar5526 Nice work! I think this will need a test before it can be merged though.\r\n\r\nFor other readers, here's a link to the ticket: https:\/\/code.djangoproject.com\/ticket\/25704","@LilyFoote I have updated the tests. Will it be a good idea to convert the response time from `ms` to `seconds (s)` if the `response time >= 1 second`? ","If it doesn't complicate the code too much, that sounds like a nice quality of life improvement.","Hi @tushar5526 \ud83d\udc4b great to see you!\r\nCan you add to the `django.server` logging docs that response time is also included (https:\/\/docs.djangoproject.com\/en\/dev\/ref\/logging\/#django-server). It will also need a `.. versionchanged:: 5.1` note and a mention in the 5.1 release notes \ud83d\udc4d ","Hey @sarahboyce :) I have added the required doc changes. Thanks for reviewing!"],"labels":["Djangonauts :rocket:"]},{"title":"Refs #33620 - Approach on how to structure accessibility tests","body":"Refs [ticket-33620](https:\/\/code.djangoproject.com\/ticket\/33620)\r\nThis is a draft PR to get some feedback on my approach for accessibility tests and is not meant to be merged. \r\n\r\nThis approach focuses on using the existing suite of selenium tests to be used for accessibility tests. Based on @carltongibson's comment https:\/\/github.com\/django\/django\/pull\/16372#issuecomment-1342772021 I have added a function that takes the current webpage in the selenium instance, writes it to a `html` file named `ClassName.TestName.Count` and stores it in a folder named `snapshot`. \r\n\r\nThese snapshots can then be used by `pa11y-ci` tool using the `pa11y-ci-reporter-html` reporter to generate an HTML report for the accessibility tests as follows. \r\n\r\nI have written a small helper script to generate the `pa11y` report. Also, we can use a flag to tell CI when to generate snapshots. These snapshots can then be downloaded as `artificats` in GitHub Actions.\r\n\r\nIntegration with selenium is quite straight forward - we will have to just call `take_snapshot` function in our test cases whenever we want that a UI change should be tested. For example, calling `take_snapshot` after we add 4 rows in django admin. \r\n\r\n\r\n------------------------\r\nFollowing image is the generated report for each `snapshot`\r\n<img width=\"1361\" alt=\"Screenshot 2023-07-15 at 6 49 23 PM\" src=\"https:\/\/github.com\/django\/django\/assets\/30565750\/0f744f5f-2f97-4e4d-a114-fe6b931cb784\">\r\n\r\nDetailed reports look like this for each of the above rows. \r\n<img width=\"1154\" alt=\"Screenshot 2023-07-15 at 10 03 05 PM\" src=\"https:\/\/github.com\/django\/django\/assets\/30565750\/a0958d39-88ee-497e-9b77-51c34a044c6f\">\r\n\r\n`pa11y` also provides options to configure the level of accessibility testing. We can start with a lower compliance and keep increasing the levels, as we keep solving accessibility issues. ","comments":["Hi Tushar :wave: this looks really cool! \r\n\r\nWhat we want to achieve:\r\n1. be able to tell if a patch\/PR has a negative effect on accessibility\r\n2. be able to tell if a patch\/PR has solved an accessibility issue\r\n3. be able to identify existing issues to create tickets from\r\n\r\nI think this has potential, I'm going to give some thoughts and hope they're useful.\r\n\r\n<details>\r\n\r\n<summary>Thoughts on a migration process<\/summary>\r\n\r\n\r\nIn order to achieve the goal \"be able to tell if a patch\/PR has a negative effect on accessibility\" we need to establish a baseline.\r\n\r\n> pa11y also provides options to configure the level of accessibility testing. We can start with a lower compliance and keep increasing the levels, as we keep solving accessibility issues.\r\n\r\nThis is interesting :point_up: \r\nI can see from your screenshots that we are failing on some accessibility criteria. Hopefully there are some accessibility criteria we are passing on. If we can configure to only test against the criteria we are passing on, and raise tickets to resolve the criteria we fail against, then that should achieve a baseline. This can then act as a road map for fixing the issues and make it easy for people to tell if they have in fact \"fixed\" a particular issue (as they can then add the new criteria to our config and show the ci doesn't fail).\r\nThe advantage of this approach is you could add in some snapshot tests to gain some coverage without having to worry about solving the accessibility issues in the same patch\/PR.\r\nAnother approach is we solve an area at a time, then add the snapshot test in :thinking: but that would take quite a bit of time.\r\n\r\nBut I'm not sure what you had in mind?\r\n\r\n<\/details>\r\n\r\n<details>\r\n\r\n<summary>Side note: this has lots of similarities to #16963 trying to improve UI testing  :tada:<\/summary>\r\n\r\n\r\nI would take a look there and see if any of the discussions can help guide\/inspire this.\r\nWould also be interesting if we can combine the work somehow :thinking: as if we change the admin UI I imagine we would also want to check both the accessibility and that there is no visual regression.\r\n\r\nAnyway I have fiddled around with the selenium test suite and the GitHub actions here quite a bit so shout if you need any support with it.\r\n\r\n<\/details>\r\n\r\nIf you're struggling for input, you might want to advertise this PR in [#contributor-discussions](https:\/\/discord.com\/channels\/856567261900832808\/859997770274045954) in the Django Discord or on the [Django Internals](https:\/\/forum.djangoproject.com\/c\/internals\/5) topic of the forum. Just be aware that this might be a slow burn ticket as it needs a bit of thought :+1: ","Hi @sarahboyce thanks for the feedback and for defining the expectations. \r\n\r\n> But I'm not sure what you had in mind?\r\n\r\nInitially, I thought of this CI to be something that generates a report on the current status of accessibility, and something that is run only at specific points. End result of it being a `report` on accessibility.   \r\n\r\nBut based on your comment.\r\n\r\n> What we want to achieve:\r\n\r\nI went on to look for more alternatives for accessibility testing and found IBM's [Equal Access](https:\/\/github.com\/IBMa\/equal-access.git) which seems more apt for our use case. I have not deep-dived into it, but it seems to me we can use [Baseline](https:\/\/github.com\/IBMa\/equal-access\/blob\/master\/accessibility-checker\/README.md#baselines) to set the \"baseline\" to the current failing accessibility issues and then new PRs can be tested for point 1.\r\n\r\npoint 2 and point 3 also seem possible using this. ","Just to throw more ideas out there :sweat_smile: \r\nIn my head, we would have a method on `SeleniumTestCase` like `def assertPageIsAccessible(self, ignore=None)` where ignore is an optional list of error codes to \"ignore\". We achieve this with a tool like [Axe](https:\/\/www.deque.com\/axe\/) (maybe download the min script from [here](https:\/\/www.cdnpkg.com\/axe-core\/file\/axe.min.js\/)) and use selenium's [`execute_script`](https:\/\/selenium-python.readthedocs.io\/api.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script) method  to run the test. There is an example of what I have in mind [here](https:\/\/www.browserstack.com\/docs\/automate\/selenium\/accessibility-testing#python).\r\n\r\nIf we have something that asserts during the test we won't need to write the html anywhere and run a separate npm script against the generated files.\r\n\r\nI think when playing around with the different tools suggested and it will become clear what the limitations are. So I would just pick your favourite and then see if it hits a blocker. :shrug: ","As I started [something](https:\/\/github.com\/django\/django\/pull\/16115) which is related to this, I will handle the Github Actions part and introduce the report in it","I evaluated these tools and found https:\/\/github.com\/IBMa\/equal-access it to be actively maintained and have features (like baseline) to support our testing needs and is most configurable. I will try putting something together soon. ","## PoC using IBM's Equal Access\r\n\r\nIBM's equal access provides a `achecker` CLI that runs accessibility tests on either `html` files or `URLs`. It can also compare the test results\/violations against a pre-defined `baseline` which we can specify in a folder. \r\n\r\nThe `baselines` folder in this demo is the `results` folder generated on the first run (which I renamed to `baselines`) so that it can serve as a \"baseline\" in subsequent runs for the tests. \r\n\r\nWe can run a simple `python -m http.server` or any other webserver on the `baselines` folder to see the current violations as shown in the video. \r\n\r\nI had to hardcode the `PORT` number on which the selenium tests run so that the folder structure remains same for multiple runs. \r\n\r\nAlso, we have a choice to either run `is_page_accessible` once on every unique page (basically every unique URL) or append page URLs with `#(id)` to allow running `is_page_accessible` on multiple runs. (This might cause a problem later as the order of calling `is_page_accessible` has to be same or we update the `baselines` folder accordingly)\r\n\r\nAny contributor can solve an accessibility issue and remove it from the `baselines` and this approach also tests that no new accessibility issues get added in a new PR. \r\n\r\nThe example in this demo was generated for this test - `.\/runtests.py --selenium=chrome --parallel=1 admin_changelist.tests.SeleniumTests.test_add_row_selection` - as you can see the folder hierarchy in `baselines` folder. \r\n\r\nhttps:\/\/github.com\/django\/django\/assets\/30565750\/e5a83930-26b3-43c9-983c-a6662390af90\r\n\r\n\r\n\r\n","Just noting this is still in progress behind the scenes \u2013\u00a0we\u2019re currently discussing bringing https:\/\/github.com\/mozilla-services\/axe-selenium-python into the Django org to use a different approach.\r\n\r\nI don\u2019t think we\u2019ll go ahead with this PR if this all works out, but let\u2019s see what happens.","The DSF board has recommended against transfer of the package to the Django org, so we\u2019re now looking at alternative options. The discussion is in [Package maintainers? axe-selenium-python#192](https:\/\/github.com\/mozilla-services\/axe-selenium-python\/issues\/192) if anyone wants to follow along."],"labels":["selenium","Djangonauts :rocket:"]},{"title":"Fixed #34643 -- Move admin form labels to a more accessible place","body":"Fixes #34643 by moving admin form labels above the inputs instead of left aligned.\r\n\r\nBefore - \r\n<img width=\"640\" alt=\"image\" src=\"https:\/\/github.com\/django\/django\/assets\/64729027\/15ac0930-f713-42e1-955c-d678e1f11841\">\r\n\r\n\r\nAfter -\r\n<img width=\"593\" alt=\"image\" src=\"https:\/\/github.com\/django\/django\/assets\/64729027\/b7aa0b70-72e2-4635-96e3-5f5e0cd46fb7\">\r\n","comments":["I've updated the failing tests. @felixxm is the approach of the fix okay?","I could be wrong but I thought @thibaudcolas' recommendation was to look at just making the small-width responsive CSS be used for all widths. I didn't think any HTML changes were required with this? \ud83e\udd14","You're right, my apologies! I read that comment, but it slipped out of my mind when I was working on the patch \ud83d\ude05","Thanks for the review, @knyghty \ud83d\udc4d\ud83c\udffb \r\nI've removed the extra padding given by the `.wide` class and the extra margin for the `.wide` class in RTL.\r\n\r\nI also found [these lines in `forms.css`](https:\/\/github.com\/django\/django\/blob\/101a85a5a06585ba16ecb25860146d034a8a55ec\/django\/contrib\/admin\/static\/admin\/css\/forms.css#L147) that add the same margin to paragraphs and divs with the `.help` class, but I couldn't find a page or form state on the admin site where these styles were applied. I've preemptively removed those lines as well.\r\n\r\nHowever, now that form labels are placed above their respective inputs, validation errors on fields are displayed above the labels, like this -\r\n\r\n<img width=\"317\" alt=\"image\" src=\"https:\/\/github.com\/django\/django\/assets\/64729027\/9c0e0926-dd4c-499d-8b3a-0efafb722c37\">\r\n\r\nIMO, we should move these errors to be below the inputs and above the help text (if any).","@hrushikeshrv thanks for bringing this up, it's indeed in a bad place. I talked with @thibaudcolas a bit and we suggest following gov.uk and putting it between the help text and the input: https:\/\/design-system.service.gov.uk\/components\/error-message\/\r\n\r\nIt might also be a good time to move the help text to the same place (above the input, rather than below).\r\n\r\nI also wonder if the `aligned` and `wide` classes are meaningless now. `wide` in particular is an issue because it's documented: https:\/\/docs.djangoproject.com\/en\/4.2\/ref\/contrib\/admin\/#django.contrib.admin.ModelAdmin.fieldsets","> I also wonder if the aligned and wide classes are meaningless now.\r\n\r\nI agree. `.wide` mainly just increases the with of `label`s from `160px` to `200px` and decreases the width of `.vLargeTextField` and `.vXMLLargeTextField` - this generally won't make a visual difference unless the label is very long. \r\n\r\nWithout the `wide` class - \r\n\r\n<img width=\"499\" alt=\"image\" src=\"https:\/\/github.com\/django\/django\/assets\/64729027\/cedc774b-2958-432d-9db6-8b25f69210ee\">\r\n\r\nWith the `wide` class -\r\n\r\n<img width=\"493\" alt=\"image\" src=\"https:\/\/github.com\/django\/django\/assets\/64729027\/4bf82db3-26c7-4178-afab-2e05224ca865\">\r\n\r\nIMO we should increase the width of the `label`s to `200px` anyway, now that they are placed above the fields instead of beside them.\r\n  \r\nThere are only 3 selectors for `.wide` in `forms.css` which largely have no noticeable effect now (from the cases I have seen).\r\n\r\nI'm not so sure about `.aligned` being meaningless now, since it defines very specific margin and padding numbers for most form elements.","@hrushikeshrv my feeling is we should just remove the label widths. They might be excessively long in some cases I suppose, but I feel like intuitively they should take up the full width of the content. If it feels too long for very verbose labels, maybe that's a great impetus to increase the font size (in another PR).\r\n\r\nFor .aligned, maybe, I didn't look into it too much. Removing widths is probably enough for here and we can do any clean up, again, in another PR.","@knyghty I tested defining multiple fields on the same line, and it was indeed not working. I've handled that case so it now works as expected.\r\n\r\n<img width=\"546\" alt=\"image\" src=\"https:\/\/github.com\/django\/django\/assets\/64729027\/615dd8f3-d8f6-47bb-9990-1c83049f11d7\">\r\n\r\nRegarding the `wide` class, it used to work by setting a width of 200px for field labels, which pushed the field inputs to the right (or left in case of rtl), leading to more horizontal space. Now that the labels are on top of the inputs, just setting the label widths won't lead to more horizontal space, so I've modified the effect of the `wide` class to instead set an increased margin on the `fieldBox` class, which leads to more horizontal space. I think this is the right approach, and I've checked to make sure that there aren't any overflow issues on different screen sizes, but please do confirm.","I will do some testing myself but I think otherwise this is ready for a review from someone other than me. I've updated the flags on the ticket. Release notes are probably also required.","Thanks @knyghty. I've fixed the merge conflicts as well.\r\n\r\nThis is my first time writing release notes so I had a few questions. Should I write the release notes in `docs\/releases\/5.1.txt`? If so, would writing them under the [django.contrib.admin heading](https:\/\/github.com\/django\/django\/blob\/7a05b8a2fac57e32a61726893d4601352c1d1c8d\/docs\/releases\/5.1.txt#L32) be okay? \ud83d\ude05 ","> Thanks @knyghty. I've fixed the merge conflicts as well.\r\n> \r\n> This is my first time writing release notes so I had a few questions. Should I write the release notes in `docs\/releases\/5.1.txt`? If so, would writing them under the [django.contrib.admin heading](https:\/\/github.com\/django\/django\/blob\/7a05b8a2fac57e32a61726893d4601352c1d1c8d\/docs\/releases\/5.1.txt#L32) be okay? \ud83d\ude05\r\n\r\nYes, release notes should be in the `5.1.txt` file following the existing style (verb tense, etc). The `django.contrib.admin` is correct as well.\r\n\r\nAlso, could you please rebase your PR onto main? This mean first of all, updating your `main` branch with the latest revisions and then running a command like this: `git rebase main` in your branch. More details [in this blogpost](https:\/\/adamj.eu\/tech\/2022\/03\/25\/how-to-squash-and-rebase-a-git-branch\/).\r\n\r\nWhen all of the above is complete, please make sure that the title references the corresponding ticket and to adjust the ticket flags in the Trac system so this PR gets added to the \"branches needing review\" section of the [Django Developer Dahsboard](https:\/\/dashboard.djangoproject.com\/). More information in [these docs](https:\/\/docs.djangoproject.com\/en\/dev\/internals\/contributing\/writing-code\/submitting-patches\/#patch-style).\r\n\r\nIf you need any help, please ask! Thank you, Natalia.","After an initial review, I see these issues in the admin UI. Let me know your thoughts!\r\n\r\n* Different widths for groups and permissions for User:\r\n![image](https:\/\/github.com\/django\/django\/assets\/124304\/0d17a664-93ac-4fea-99d8-c373241dd88c)\r\n\r\n* Help text on top of (read only) field is very confusing about which phrase is help and which phrase is the field value:\r\n![image](https:\/\/github.com\/django\/django\/assets\/124304\/c9f47d1d-651b-4739-b275-cfd0b98da90e)\r\n\r\n* Since we are gaining horizontal space for the fields, it seems like it would be a good idea to let them grow horizontally as wide as they can, so we avoid long texts to the chopped off like this:\r\n![image](https:\/\/github.com\/django\/django\/assets\/124304\/b4cbdd56-f2c5-4e21-95e7-61cb8690c76e)\r\n","Hello @hrushikeshrv, would you have time to keep working on this? Thank you for your efforts so far!","Hi @nessita, sorry for the late response! I was a little swamped for the last few weeks, but I will be able to work on this patch now. I'll rebase this PR and address the width and horizontal space concerns asap!","> Hi @nessita, sorry for the late response! I was a little swamped for the last few weeks, but I will be able to work on this patch now. I'll rebase this PR and address the width and horizontal space concerns asap!\r\n\r\nThank you! I did not mean to rush you, just knowing that you'll work on this when you can is enough. Good luck!","> Since we are gaining horizontal space for the fields, it seems like it would be a good idea to let them grow horizontally as wide as they can, so we avoid long texts to the chopped off \r\n\r\nI agree, I've implemented this and it fixes the issue of different widths for groups and permissions as well. The permissions widget was appearing wider because it was growing to try to fit its content. \r\n\r\nHowever, now that both the widgets grow to fill the entire width, the link to add a related object (the \u2795 button) seems a little out of place IMO -\r\n\r\n<img width=\"1034\" alt=\"image\" src=\"https:\/\/github.com\/django\/django\/assets\/64729027\/9437de13-786c-405a-b723-df928ead2e89\">\r\n\r\n\r\nMoreover, on mobile layouts, it appears even more disconnected after this patch -\r\n\r\n![image](https:\/\/github.com\/django\/django\/assets\/64729027\/f222276c-48eb-47f0-83c0-8c62de6a218c)\r\n\r\n\r\nThis may be out of scope for this ticket, but what if we changed that link to appear alongside the `Available groups` heading, like so -\r\n\r\n![image](https:\/\/github.com\/django\/django\/assets\/64729027\/9b1ff3ab-a9ab-4f41-98bf-6d658d73c47c)\r\n\r\nPlease let me know if that seems reasonable or if I should try another approach.","Hey @hrushikeshrv, thank you for restarting work on this.\r\n\r\nSpecifically about the \"Add\" (plus sign) button: I love the new proposed location. Do you think that moving it to that place could be done in isolation\/independently of this branch? I'm wondering we could do a separated commit\/PRs with that.\r\n\r\nOf course we should also confirm with the accessibility team (cc @django\/accessibility @knyghty) that this \"Add\" button change is acceptable. Did you happen to check screen readers and tab keyboard navigation?","@nessita Yes, I think we could do this independently in a separate PR. I haven't checked with screen readers or tab keyboard navigation yet. I can do that and create a ticket if the accessibility team agrees.","@hrushikeshrv @nessita, I don't see an immediate problem with the new position - I do think it is actually easier to see from a UX perspective and good to have a clear text label as well. However, it's easier to review the accessibility in PR form, so I'd certainly encourage creating one (with a ticket).","Hi @nessita, I tried to rebase this branch onto main, but it looks like I messed up somehow. I followed the steps you mentioned and the steps in Adam's article, but it looks like I committed every change that has been made since I created my branch.\r\nSorry for my mixup, I'm not sure how to fix this \ud83d\ude05","> Hi @nessita, I tried to rebase this branch onto main, but it looks like I messed up somehow. I followed the steps you mentioned and the steps in Adam's article, but it looks like I committed every change that has been made since I created my branch. Sorry for my mixup, I'm not sure how to fix this \ud83d\ude05\r\n\r\nNo worries, let's see: what command did you run, and how did you resolve conflicts, if there were any?\r\n\r\nIn general, you can undo changes to your git repo by (make a copy of your work before proceeding, just in case). See more, for example, in [this stackoverflow link](https:\/\/stackoverflow.com\/questions\/134882\/undoing-a-git-rebase):\r\n\r\n* Run `git reflog` and **read carefully** the list of changes shown there. There will be a line for the latest known \"good state\" of your branch, something like:\r\n```\r\n<a hash> (origin\/ticket_34643) HEAD{@<number>}: <action description>\r\n```\r\n* Write down that hash (for example `a123b456c7`, likely belonging to the last good commit you made.\r\n* Reset your git tree to that revno. **Careful** that this reset is a \"hard\" reset, changes newer than `a123b456c7` will be lost:\r\n```\r\ngit reset --hard a123b456c7\r\n```\r\nWith that, your git tree will look like it was at `a123b456c7`. Then, you can try the rebase again (`git rebase main`)."],"labels":["selenium"]},{"title":"Fixed #30386 -- Fixed primary key quoting in admin related object links.","body":"This is the branch I created to fix the issue of admin widgets not quoting primary keys. I fixed it from the server side and client side(creating a function in the Javascript file and implementing a quote function to quote the keys)  and i added test cases to check that the function i used to quote the primary keys for ticket-30386 works. I also used Javascript test and selenium to automate testing","comments":["@carltongibson Please can you check the implementation in the new commit I made? Java script encodeURIComponent() and encodeURI() didn't fix it. So I had to write a function, using the idea of encodeURIComponent() implementation to quote the primary key. I wrote a test for it. I also tested to update related object links when a value is passed, it quotes it and update the link.","> It's getting there. You've got the testing harnessing in the right place, but the escaping isn't right.\r\n> \r\n> For Topping pk=\"_40\": Change Form page URL: http:\/\/127.0.0.1:8000\/admin\/test_one\/topping\/_5F40\/change\/ Generated Pop-up URL: http:\/\/127.0.0.1:8000\/admin\/test_one\/topping\/%5F40\/change\/?_to_field=key&_popup=1 (without patch has just `_40`)\r\n> \r\n> So essentially the escaping is not the same. Look at the `quote` implementation in `admin.utils`. Match that and it would work:\r\n> \r\n> ```\r\n> >>> from django.contrib.admin.utils import unquote\r\n> >>> unquote(\"%5F40\")  # what you're sending now. \r\n> '%5F40'\r\n> >>> unquote(\"_5F40\")  # what's needed. \r\n> '_40'. \r\n> ```\r\n\r\n\r\n\r\n> It's getting there. You've got the testing harnessing in the right place, but the escaping isn't right.\r\n> \r\n> For Topping pk=\"_40\": Change Form page URL: http:\/\/127.0.0.1:8000\/admin\/test_one\/topping\/_5F40\/change\/ Generated Pop-up URL: http:\/\/127.0.0.1:8000\/admin\/test_one\/topping\/%5F40\/change\/?_to_field=key&_popup=1 (without patch has just `_40`)\r\n> \r\n> So essentially the escaping is not the same. Look at the `quote` implementation in `admin.utils`. Match that and it would work:\r\n> \r\n> ```\r\n> >>> from django.contrib.admin.utils import unquote\r\n> >>> unquote(\"%5F40\")  # what you're sending now. \r\n> '%5F40'\r\n> >>> unquote(\"_5F40\")  # what's needed. \r\n> '_40'. \r\n> ```\r\n\r\n@carltongibson do you mean I should use the quote implementation in admin.utils for the implementation of the customEncodeURIComponent?  since the fix is now from RelatedObjectLookups.js?","The quoting in the JavaScript needs to match that done by the quote until, and expected by unquote, yes. ","@carltongibson please can you review the recent PR?","Yes it makes sense. My question is, does it mean i'm not suppose to click here                                                            \r\n self.selenium.find_element(By.ID, \"id_house\").click()\r\nSince i already saved it here\r\n self.selenium.find_element(By.NAME, \"_save\").click()","@Oluwayhemisi You need to step through what's happening in the browser. Once you've created the Room you need to be on the change form page in order to check that the \"Edit\" pencil-icon popup has the correctly escaped URL. \r\n\r\n(So you either need to use the save-and-keep-editing button, or return to the change form from the change list\u2026\u00a0\u2014 or you could create the Room in code and then just load the change form once... \u2014 either way, what you're testing is that the PK value is correctly quoted and unquoted in the UI.) ","> Yes it makes sense. My question is, does it mean i'm not suppose to click here self.selenium.find_element(By.ID, \"id_house\").click() Since i already saved it here self.selenium.find_element(By.NAME, \"_save\").click()\r\n\r\n@Carlton, I have been able to fix it. But i ran into another error\r\nWhen i create the Room it takes me to the change form page and I check that the \"Edit\" pencil-icon popup has the correct escaped URL.\r\n\r\nBut the issue is that I'm getting Timeout exception due to this line below \r\n\r\n`        self.wait_for_value(\"#id_name\", house_name)\r\n\r\n `\r\n\r\nIf i remove the line of code above, on the browser, it takes me to the change form and when i try to check that the \"Edit\" pencil-icon popup has the correct escaped URL, the browser stops, though the URL shows it has been escaped but it doesn't display anything on the page","\r\n\r\n\r\n> > Yes it makes sense. My question is, does it mean i'm not suppose to click here self.selenium.find_element(By.ID, \"id_house\").click() Since i already saved it here self.selenium.find_element(By.NAME, \"_save\").click()\r\n> \r\n> @carlton, I have been able to fix it. But i ran into another error When i create the Room it takes me to the change form page and I check that the \"Edit\" pencil-icon popup has the correct escaped URL.\r\n> \r\n> But the issue is that I'm getting Timeout exception due to this line below\r\n> \r\n> ` self.wait_for_value(\"#id_name\", house_name)\r\n> \r\n> `\r\n> \r\n> If i remove the line of code above, on the browser, it takes me to the change form and when i try to check that the \"Edit\" pencil-icon popup has the correct escaped URL, the browser stops, though the URL shows it has been escaped but it doesn't display anything on the page\r\n\r\n@carltongibson as regards to the issue of timeout exception, what i did is that i added time.sleep(5) to wait for the element to have the expected value. So it takes me to the page where the \"Edit\" pencil-icon popup would direct me when I click on it.  please what's do you think about it? am I on the right path?","@carltongibson please can you check the last PR i made?","Hey @Oluwayhemisi \ud83d\udc4b\n\nCarlton has moved on from his fellow role. \n\nIf you're happy the review comments are addressed I suggest unticking the 'needs improvement' box on trac and I'm sure someone else will be along in due course to help review. \n\nhttps:\/\/www.djangoproject.com\/weblog\/2023\/mar\/31\/welcome-our-new-fellow-natalia-bidart\/","> Hey @Oluwayhemisi wave\r\n> \r\n> Carlton has moved on from his fellow role.\r\n> \r\n> If you're happy the review comments are addressed I suggest unticking the 'needs improvement' box on trac and I'm sure someone else will be along in due course to help review.\r\n> \r\n> https:\/\/www.djangoproject.com\/weblog\/2023\/mar\/31\/welcome-our-new-fellow-natalia-bidart\/\r\n\r\nAlright, thank you.\r\n","buildbot, test on selenium.","Hello @Oluwayhemisi! I will be trying to help you move this forward. With that in mind, I may push a few commits to this PR so we can continue iterating over it. Let me if you have any concerns!","@Oluwayhemisi I have made a few extra pushes to help resolving most comments in this PR. But there is still the issue reported by Mariusz, in that when a Topping is modified from the Pizzas change form (using the pencil action), when returning to the Pizza form the topping has not changed.\r\n\r\nDo you think you could try to diagnose and fix that? Thank you!","@felixxm I will look into it. So sorry for the late response.","@nessita Thank you for the commits, I will go through it and give you a feedback. As regards to the issue reported by Mariusz, I will look into it and try and fix it.","Hey, @Oluwayhemisi \r\nare you still working on this issue?"],"labels":["selenium"]},{"title":"Fixed #27587 -- Adding examples of QuerySet.query.__str__() to docs.","body":"ticket-27587","comments":["> I can't quite recall how far that got ... \u2014  did we ever manage to improve the output of str(qs.query) so that it was correctly escaped and you could paste it into the shell? (I'll try to dig that work out.)\r\n\r\nNo, see ticket-25705. As far as I'm aware, we cannot do this without using `mogrify()`-ish methods. Unfortunately they are not available for all drivers.","Thanks @felixxm \ud83d\ude4f","Thanks for the ping, @carltongibson. Just to add some color, I had been working on using tools like `mogrify` when they were available to produce reliable output that could actually be run. In cases where a `mogrify-ish` function wasn't available, Tim Graham and I had discussed making the SQL string obviously not runnable in the form of something like this: `SQL: SELECT * FROM table WHERE x = %s PARAMS: ('test')`\r\n\r\nThere was a fair amount of work and discussion here: https:\/\/github.com\/django\/django\/pull\/10568\r\n\r\nWe ended up losing momentum in favor of @claudep's approach in https:\/\/github.com\/django\/django\/pull\/12156 - which is also still not merged.\r\n\r\nIt'd be great if we can get this feature across the finish line in one form or another. Let me know if I can help! Thanks y'all.\r\n","Hey @FlipperPA \u2014 Thanks for the follow-up. \r\n\r\n> Let me know if I can help!\r\n\r\nMore or less, lack of progress here will just be due to the pressure of the firehose \ud83d\udc69\u200d\ud83d\ude92 \u2014\u00a0If you can pick-up what you think should be merged (Claude's approach you said) rebase it, make sure any comments are addressed (there's a _it's a bit hacky_ comment on the tests to look at it seems\u2026)\r\n\r\nThen uncheck (e.g.) [_Patch needs improvement_ &co on the ticket](https:\/\/code.djangoproject.com\/ticket\/25705) it will appear again on @felixxm's and my [patches needing review checklist](https:\/\/code.djangoproject.com\/query?status=!closed&needs_better_patch=0&needs_tests=0&needs_docs=0&has_patch=1&stage=Accepted&desc=1&order=changetime) and we'll get to it. \ud83d\udc9d"],"labels":["DjangoCon \ud83e\udd84"]}]