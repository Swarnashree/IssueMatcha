[{"title":"docs: adds Chris Perko to the GDE resources","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [x] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\n\r\nIssue Number: N\/A\r\n\r\n\r\n## What is the new behavior?\r\nAdds Chris Perko to the GDE resources\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":[],"labels":["area: docs"]},{"title":"feat(common): skip transfer cache on client #54444","body":"transfer cache interceptor should not run again on the client as it is intended for server to client handoff\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [ x] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nIn rare instances, the transfer cache interceptor may execute on the client. While this does not appear to introduce problems, it is an unnecessary step. \r\n\r\nIssue Number: #54444\r\n\r\n## What is the new behavior?\r\nThe transfer cache interceptor no longer performs caching behavior in the 'broswer' platform.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ x] No\r\n","comments":["@Jefftopia one additional comment: I'd propose to change the commit message (via `git commit --amend`) from `feat(common)` -> `fix(common)` (or `perf(common)`), this change looks more like a fix or a perf improvement vs a new feature.","Hey @Jefftopia - Welcome :)"],"labels":["action: review","area: common\/http","target: patch","detected: feature","server: http cache"]},{"title":"refactor(language-service): use native Array flatMap","body":"The custom flatMap implementation can now be removed as Array contains a native implementation that is available for all supported Node.js versions.\r\n","comments":[],"labels":["action: review","area: language-service","target: minor"]},{"title":"Docs: add a note about adding other provider configurations as options to @Injectable","body":"Adding this note to expose that user can explicitly define how the service can be called using hooks = or provider configurations that are defined by InjectableProvider type","comments":[],"labels":["area: docs"]},{"title":"fix(@angular\/language-service): prevent underlying TS Service from handling template files","body":"When the `angularOnly` option is disabled, the underlying TypeScript language service was previously used for all files including `.html` template files. This can result in incorrect responses including a large amount of invalid diagnostics for a template file. Checks have now been added to only use the Angular Language service for template files which can properly handle template files. Additionally, the check for a TypeScript file name has now been expanded to encompass all current file extension forms.","comments":[],"labels":["action: review","area: language-service","target: minor"]},{"title":"After upgrading to v17 unable to see imported components","body":"### Which @angular\/* package(s) are the source of the bug?\n\nupgrade\n\n### Is this a regression?\n\nYes\n\n### Description\n\nI upgraded my project to v17 but now all the imported components are not loading. I even did standalone false to all components, and also tried doing standalone true and imported all necessary components but to no avail. This was working in v16.\n\n### Please provide a link to a minimal reproduction of the bug\n\n_No response_\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.3.0\r\nNode: 18.15.0\r\nPackage Manager: npm 9.6.7\r\nOS: win32 x64\r\n\r\nAngular:17.3.0\r\n... animations, cli, common, compiler, compiler-cli, core, form\r\n... language-service, localize, platform-browser\r\n... platform-browser-dynamic, router, service-worker\r\n\r\nPackage                     Version\r\n------------------------------------------------------\r\n@angular-devkit\/architect    0.1703.0 \r\n@angular-devkit\/core         17.3.0 \r\n@angular-devkit\/schematics   17.3.0  \r\n@schematics\/angular          17.3.0 \r\n@angular-devkit\/build-angular17.3.0\r\nng-packagr                   17.3.0\r\nrxjs                         7.8.1\r\ntypescript                   5.4.2\r\nzone.js                      0.14.4\n```\n\n\n### Anything else?\n\n_No response_","comments":["Without a runnable reproduction this won't be actionable, unfortunately."],"labels":["needs reproduction"]},{"title":"fix: change adev inject-based-di link in roadmap.md","body":"Fix angular.dev roadmap page not found for inject based dependency injection.\r\nPage not found --> [https:\/\/angular.dev\/tutorials\/learn-angular\/inject-based-di](https:\/\/angular.dev\/tutorials\/learn-angular\/inject-based-di)\r\n\r\n\r\nFixes [54994.](https:\/\/github.com\/angular\/angular\/issues\/54994)","comments":[],"labels":["action: merge","target: major","area: adev","adev: preview"]},{"title":"docs: added note about toSignal","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: https:\/\/github.com\/angular\/angular\/issues\/54995\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":[],"labels":["aio: preview","area: docs"]},{"title":"docs(rxjs-interop): toSignal injection context","body":"### Describe the problem that you experienced\n\nThe rxjs-interop documentation does not specify whether toSignal should be called within an injection context.\r\n\r\nhttps:\/\/github.com\/angular\/angular\/issues\/50947#issuecomment-1621756214\n\n### Enter the URL of the topic with the problem\n\n_No response_\n\n### Describe what you were looking for in the documentation\n\n_No response_\n\n### Describe the actions that led you to experience the problem\n\n_No response_\n\n### Describe what you want to experience that would fix the problem\n\n_No response_\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":[],"labels":["state: has PR","cross-cutting: signals","area: docs"]},{"title":"Try out Inject page not found","body":"### Describe the problem that you experienced\n\nFrom the page [Angular Roadmap](https:\/\/angular.dev\/roadmap) in the section [[Explore modern Angular](https:\/\/angular.dev\/roadmap#explore-modern-angular)], if you click \"Try out inject\" the link https:\/\/angular.dev\/tutorials\/learn-angular\/inject-based-di has a Page not found message\r\n\r\n\r\n\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.dev\/tutorials\/learn-angular\/inject-based-di\n\n### Describe what you were looking for in the documentation\n\nUpdate the knowledge from Angular 15 to Angular 17\n\n### Describe the actions that led you to experience the problem\n\nClick the link \"Try out inject\"\n\n### Describe what you want to experience that would fix the problem\n\nFound the info about inject\n\n### Add a screenshot if that helps illustrate the problem\n\n![image](https:\/\/github.com\/angular\/angular\/assets\/9003985\/03ba9b0b-e1db-4fa7-b90b-8787c74b3e26)\r\n\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":[],"labels":["state: has PR","P3","area: adev","area: docs"]},{"title":"Add diagnostic to flag unsupported usages of initializer APIs","body":"Adds a diagnostic that will flag any usages of initializer APIs outside of initializers. Includes the following changes:\r\n\r\n### refactor(compiler-cli): expand type of initializer parsing function\r\nUpdates the function that parses initializer APIs to check any `Expression`, instead of expecting a class member. This will be useful for the upcoming changes.\r\n\r\n### refactor(compiler-cli): add API to check if imports exist\r\nAdds a couple of APIs to the `ImportedSymbolsTracker` that allow us to quickly check if a specific symbol is imported in a file.\r\n\r\n### refactor(compiler-cli): introduce infrastructure for running additional checks against TypeScript files\r\nAdds the new `SourceFileValidator` that will be used to check for file-level issues that may prevent Angular from working, like invoking the `input()` function outside of an initializer. Currently only one check is planned, but this setup will allow us to easily add more in the future.\r\n\r\n### fix(compiler-cli): add diagnostic if initializer API is used outside of an initializer\r\nAdds a rule that will produce a diagnostic when an initializer-based API is used outside of an initializer.\r\n\r\nFixes #54381.","comments":[],"labels":["action: review","target: major","area: compiler"]},{"title":"routerLinkActiveOptions fragment add option to not match when no fragment is used","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\nrouter\n\n### Description\n\nConsider the following example:\r\n\r\n```typescript\r\nimport { IsActiveMatchOptions } from '@angular\/router';\r\n\r\nclass MyComponent {\r\n  protected routerLinkMatchOptions: IsActiveMatchOptions = {\r\n    queryParams: 'subset',\r\n    fragment: 'exact',\r\n    paths: 'exact',\r\n    matrixParams: 'ignored'\r\n  }\r\n}\r\n```\r\n\r\n```html\r\n<a routerLink=\".\/\" [routerLinkActiveOptions]=\"routerLinkMatchOptions\" routerLinkActive=\"link-active\"><\/a>\r\n<a routerLink=\".\/\" fragment=\"fragment1\" [routerLinkActiveOptions]=\"routerLinkMatchOptions\" routerLinkActive=\"link-active\"><\/a>\r\n```\r\n\r\nIf you go on the page `.\/`, only the first link will get the `link-active` class. If you go on `.\/#fragment1`, both links will get the `link-active` class.\r\n\r\nWhile that might be the desired effect for some, it is not necessarily always desired.\n\n### Proposed solution\n\nAdd another option to `IsActiveMatchOptions.fragment`, like `exact-required`, that would say:\r\n- if the link has the same `fragment`, it is a match\r\n- if the link has a different `fragment` or **does not have** a `fragment`, it is not a match\r\n\r\nWhich would differ from the current `exact` that behaves like:\r\n- if the link has the same `fragment` or **does not have** a `fragment`, it is a match\r\n- if the link has a different `fragment` it is not a match\r\n\n\n### Alternatives considered\n\nMaybe this is a bug and the `exact` option should say \"if there is no fragment, it is not exact, and therefore should not be a match\"","comments":[],"labels":["area: router","router: directives"]},{"title":"feat(adev): rename file in code editor","body":"feat(adev): rename file in code editor\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [x] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nAddress [52652](https:\/\/github.com\/angular\/angular\/issues\/52652)\r\n\r\n## What is the new behavior?\r\nThe ability to rename files in the docs code editor\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\nDemo\r\n\r\nhttps:\/\/github.com\/angular\/angular\/assets\/14881167\/cac89984-e76e-4171-bcc4-a182fbeabe8e\r\n\r\n\r\n","comments":["Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https:\/\/github.com\/angular\/angular\/pull\/54989\/checks?check_run_id=22960916059) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request."],"labels":["detected: feature"]},{"title":"Add global configuration for the default change detection and styles encapsulation settings","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncompiler-cli\n\n### Description\n\nAt the moment as a developer when I want to use `ChangeDetectionStrategy.OnPush` in the whole project, I need to add it to every component. It generates one more line and additional import and it's not intuitive. \r\n\r\nWould be great to have an option to set it globally and reduce number of lines in `@Component` decorator.\n\n### Proposed solution\n\nAs far as I understand, it needs to set during compilation process, so probably the most obvious place to put configuration is `angular.json`\r\n\r\n```\r\n{\r\n  \"$schema\": \".\/node_modules\/@angular\/cli\/lib\/config\/schema.json\",\r\n  \"version\": 1,\r\n  \"newProjectRoot\": \"projects\",\r\n  \"projects\": {\r\n    \"experiment-signal-input\": {\r\n      \/\/ ...\r\n      \"architect\": {\r\n        \"build\": {\r\n          \"builder\": \"@angular-devkit\/build-angular:application\",\r\n          \"options\": {\r\n            \"changeDetection\": \"OnPush\", \/\/ <---\r\n            \"encapsulation\": \"None\", \/\/ <---\r\n            \"outputPath\": \"dist\/experiment-signal-input\",\r\n            \/\/ ...\r\n          },\r\n          \"defaultConfiguration\": \"production\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe main problem that I see at the moment is that it shouldn't affect third party libraries from node_modules.\n\n### Alternatives considered\n\nMake the `ChangeDetectionStrategy.OnPush` as default, but it will harm onboarding and it sounds bad that `ChangeDetectionStrategy.Default` is not the default option. So I wouldn't consider it :D ","comments":[],"labels":["area: compiler"]},{"title":"feat(router): add \"enableTransientRouteProviders\" router configuration option","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [x] Tests for the changes have been added (for bug fixes \/ features)\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Feature\r\n\r\n## What is the current behavior?\r\n\r\nPreviously, the router would keep the route injector and injected services in memory indefinitely.\r\n\r\n## What is the new behavior?\r\n\r\nThis change adds an extra option \"enableTransientRouteProviders\" which, when set to 'true', destroys the route injector as soon as the declaring route is deactivated.\r\n\r\nAddresses #49062, #54644 which have been closed as duplicates of #37095 which this PR kind of partially addresses.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] No","comments":[],"labels":["detected: feature"]},{"title":"[17.3.x]: Patch port of incremental type-check w\/ import manager fix","body":"Patch port of https:\/\/github.com\/angular\/angular\/pull\/54819","comments":["The failures seem unrelated as `17.3.x` is super red apparently.  "],"labels":["action: merge","target: patch","merge: caretaker note","PullApprove: disable"]},{"title":"fix(router): RouterLinkActive will always remove active classes when \u2026","body":"\u2026links are not active\r\n\r\nPreviously, `RouterLinkActive` would only add or remove the active classes when its active state changed. This means that if you accidentally add one of the active classes to the static class attribute, it won't get removed until the link becomes active and then deactives (because the class is added at creation time and never removed until the `RouterLinkActive` state changes from active to inactive).\r\n\r\nfixes #54978\r\n","comments":[],"labels":["area: router","target: patch"]},{"title":"fix(compiler-cli): report errors when initializer APIs (`input` etc.) are used on private fields","body":"See individual commits","comments":["Note: This is a new error code for the compiler which shouldn't need public API approval"],"labels":["action: merge","target: patch","area: compiler","PullApprove: disable"]},{"title":"fix(http): manage different body types for caching POST requests","body":"This update enhances the encoding handling of request bodies to generate the necessary cache key for transfer cache functionality.\r\n\r\nCloses #54956\r\n","comments":[],"labels":["area: common\/http","target: patch","server: http cache"]},{"title":"Update control-flow.md","body":"Fix typo\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ X] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [X] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nTypo in sentence\r\n\r\nIssue Number: N\/A\r\n\r\n\r\n## What is the new behavior?\r\nFix typo\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X ] No\r\n\r\n\r\n\r\n","comments":["Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https:\/\/github.com\/angular\/angular\/pull\/54976\/checks?check_run_id=22916819249) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.","> Thank you for fixing that type !\r\n\r\nYou mean typo @JeanMeche \ud83e\udd23 "],"labels":["action: merge","target: major","area: docs"]},{"title":"refactor(http): Do not contribute to stability when using `provideHtt\u2026","body":"\u2026pClientTesting`\r\n\r\n`HttpClient` uses the `PendingTasks` service to contribute to application stability. This was added in v17 to support SSR without relying on an infinite `setTimeout` with ZoneJS like it did pre-v17. Prior to version 17, this was also only done on the server and did not affect clients or unit tests.\r\n\r\nToday, `PendingTasks` contribute to `ApplicationRef.isStable` but do not contribute to the stability of `ComponentFixture`. This divergence in stability behavior was not intended and we plan to make these two stability indicators the same again, like they were when it was solely based on the state of the Zone.\r\n\r\nBy aligning the two behaviors again, this would include all pending tasks in the stability of fixtures. After investigation, this seems likely to be a pretty large breaking change. Tests appear to quite often use `await fixture.whenStable` when there are unfinished requests that have not been mocked or flushed.\r\n\r\nThis change prevents request in `HttpClient` from contributing to stability through the `PendingTasks` automatically but only when using `HttpClientTesting`. In this scenario, requests need to be expected and flushed manually for them to resolve. When the test backend and controllers aren't used, requests should resolve on their own so `await fixture.whenStable` shouldn't be particularly affected or problematic.\r\n","comments":[],"labels":["target: major"]},{"title":"docs(core): fix toSignal docs","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Documentation content changes\r\n\r\n## What is the current behavior?\r\n`toSignal` and `ToSignalOptions` API docs mistakenly say \"toObservable\" instead of \"toSignal\"\r\n\r\n\r\n## What is the new behavior?\r\n`toSignal` and `ToSignalOptions` API docs say \"toSignal\"\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] No\r\n\r\n","comments":[],"labels":["area: docs"]},{"title":"In SSR mode the HTTP POST cache should consider cases when the body is an object","body":"### Which @angular\/* package(s) are the source of the bug?\n\ncore\n\n### Is this a regression?\n\nNo\n\n### Description\n\nThis is a similar issue as the described and solved in https:\/\/github.com\/angular\/angular\/issues\/54377 . The problem is that usually, we can provide an object as the `body` and this should be normal as the body will still be serialized later in the http POST method.\r\n\r\n<img width=\"1119\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/1245659\/5076427f-f619-4e3f-90a5-bae3e9d545a4\">\r\n\r\nI understand that this could have performance implications while serializing the body each time we want to obtain the cache key so not sure if this would be accepted to add although it should be desired.\r\n\r\nNot sure if it would be a good solution, but could we maybe add another option to the POST requests to provide a cache key function or extra string?\n\n### Please provide a link to a minimal reproduction of the bug\n\n_No response_\n\n### Please provide the exception or error you saw\n\n```true\nNo exception, just that two different POST requests with different body params get the same cache key.\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.2.3\r\nNode: 20.11.0\n```\n\n\n### Anything else?\n\n_No response_","comments":["Can we have `const strBody = typeof body === 'string' ? body : body && __boolean__ ? request.serializeBody() : '';`? So we can take advantage of the object type body without affecting the current performance? ","Thanks @alan-agius4  for submitting a very quick fix!"],"labels":["area: common\/http","state: has PR","server: http cache"]},{"title":"docs: add closing tag in hierarchical injectors documentation","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [x] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nFixes #54938.\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["> Hi, can you revert the formating changes you introduced when saving the file ? We'd like the change to only be the doc fix.\r\n\r\nYes @JeanMeche, done \u2705 \r\nSorry about that \ud83d\ude05 I thought it would be ok since `yarn ng-dev format changed` and `yarn lint` were not catching anything. I guess they don't scan `.md` files ?"],"labels":["area: docs"]},{"title":"docs: remove broken link from CONTRIBUTING.md","body":"Removes the broken link [https:\/\/runnable.com\/](https:\/\/runnable.com\/) from CONTRIBUTING.md and all the other links that aren't referenced.\r\n\r\nFixes [54948.](https:\/\/github.com\/angular\/angular\/issues\/54948)","comments":["Can you also remove the other links that aren't referenced ? ","Perfect! Can you squash both commits into one, so this change is a single commit. Thank you. ","> Perfect! Can you squash both commits into one, so this change is a single commit. Thank you.\r\n\r\nI've squashed the commits. Thanks!","Currrently the PR is made of 5 commit. With the `git rebase -i HEAD~5` you should be able to drop the merge commit an squash the others. ","> Currrently the PR is made of 5 commit. With the `git rebase -i HEAD~5` you should be able to drop the merge commit an squash the others.\r\n\r\nDone.\r\n"],"labels":["action: merge","target: patch","area: docs"]},{"title":"refactor(core): Provide scheduler for use and coordination with zone change detection","body":"\r\nThis commit makes the zoneless scheduler (privately) available to applications that have ZoneJS-based change detection. This would catch any changes of interest (signal updates, `markForCheck` calls, attaching `Dirty` views) that happen outside the Angular Zone.\r\n\r\nSee #53844 for additional information about why this is important. More details to come in the a future commit that makes this a public option.\r\n","comments":["This is \ud83d\ude80\r\n\r\nBecause this opens up the possibility to have zoneless and not zoneless parts of an application. \r\n\r\nWill this work ? \r\n\r\n```ts\r\n@Directive({\r\n  selector: 'zoneless',\r\n  standalone: true\r\n})\r\nexport class Zoneless {\r\n  vcRef = inject(ViewContainerRef);\r\n  tplRef = inject(TemplateRef);\r\n  ngZone = inject(NgZone);\r\n\r\n  ngOnInit() {\r\n    this.ngZone.runOutsideAngular(() => {\r\n       this.vcRef.createEmbeddedView(this.tplRef);\r\n    });\r\n  }\r\n}\r\n```\r\n\r\nand apply it on some router-outlet\r\n\r\n```html\r\n\/\/ main-layout.component.html\r\n\r\n<header \/>\r\n<router-outlet  *zoneless \/>\r\n<footer \/>\r\n```","> Because this opens up the possibility to have zoneless and not zoneless parts of an application.\r\n\r\n> Will this work ?\r\n\r\nYes and no. ZoneJS still patches `Promise` (and many other APIs) globally so you'd really need to have a particular portion of the application operate in an isolated zone so it truly doesn't contribute to the main app's zone.\r\n\r\nedit: You'd probably see things working somewhat as expected for a bit because create mode would create all the handlers outside the zone so all their callbacks would execute outside the zone. But change detection still runs inside `NgZone.run` so as soon as something in that view is created as part of change detection (i.e. and `@if` block with another listener), that would get created inside the Angular zone.\r\n\r\nedit 2: [example](https:\/\/stackblitz.com\/edit\/stackblitz-starters-4vxw32?file=src%2Fmain.ts)\r\n","> But change detection still runs inside `NgZone.run` so as soon as something in that view is created as part of change detection (i.e. and `@if` block with another listener), that would get created inside the Angular zone.\r\n\r\nAnd that is supposed to change if Angular goes zoneless by default, right? ","> But change detection still runs inside NgZone.run so as soon as something in that view is created as part of change detection (i.e. and @if block with another listener), that would get created inside the Angular zone.\r\n\r\n> And that is supposed to change if Angular goes zoneless by default, right?\r\n\r\nChange detection will always run inside `ngZone.run` but this doesn't change the execution zone in \"zoneless\" which uses `NoopNgZone`"],"labels":["area: core","target: minor"]},{"title":"build: update actions\/cache digest to 0c45773","body":"This PR contains the following updates:\n\n| Package | Type | Update | Change |\n|---|---|---|---|\n| [actions\/cache](https:\/\/togithub.com\/actions\/cache) | action | digest | `ab5e6d0` -> `0c45773` |\n\n---\n\n### Configuration\n\n\ud83d\udcc5 **Schedule**: Branch creation - At any time (no schedule defined), Automerge - At any time (no schedule defined).\n\n\ud83d\udea6 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.\n\n\u267b **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase\/retry checkbox.\n\n\ud83d\udd15 **Ignore**: Close this PR and you won't be reminded about this update again.\n\n---\n\n - [ ] <!-- rebase-check -->If you want to rebase\/retry this PR, check this box\n\n---\n\nThis PR has been generated by [Renovate Bot](https:\/\/togithub.com\/renovatebot\/renovate).\n<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzNy4yNTYuMiIsInVwZGF0ZWRJblZlciI6IjM3LjI1Ni4yIiwidGFyZ2V0QnJhbmNoIjoibWFpbiJ9-->\n","comments":[],"labels":["area: build & ci","action: review","target: patch"]},{"title":"fix(core): `ComponentFixture` stability should match `ApplicationRef`","body":"This change aligns the stability of `ComponentFixture` with that of `ApplicationRef`, preventing confusing differences between the two as more APIs start using the `PendingTasks` that may not be tracked by `NgZone`.\r\n\r\nBREAKING CHANGE: `ComponentFixture.whenStable` now matches the `ApplicationRef.isStable` observable. Prior to this change, stability of the fixture did not include everything that was considered in `ApplicationRef`. `whenStable` of the fixture will now include unfinished router navigations and unfinished `HttpClient` requests. In addition, `ComponentFixture.isStable` would synchronously switch to true in some scenarios but will now always be asynchronous.\r\n","comments":[],"labels":["area: testing","breaking changes","area: core","target: major","detected: breaking change","requires: TGP"]},{"title":"runnable.com can be removed from CONTRIBUTING.md","body":"### Which @angular\/* package(s) are the source of the bug?\n\nDon't known \/ other\n\n### Is this a regression?\n\nYes\n\n### Description\n\n https:\/\/runnable.com\/ is unreachable\n\n### Please provide a link to a minimal reproduction of the bug\n\n https:\/\/runnable.com\/ \n\n### Please provide the exception or error you saw\n\n```true\nThe URL is no longer reachable ...\r\nhttps:\/\/runnable.com\/\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\n|___\/\r\n    \r\n\r\nAngular CLI: 17.0.6\r\nNode: 20.8.0\r\nPackage Manager: npm 10.2.4\r\nOS: darwin arm64\r\n\r\nAngular: 17.0.6\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1700.6\r\n@angular-devkit\/build-angular   17.0.6\r\n@angular-devkit\/core            17.0.6\r\n@angular-devkit\/schematics      17.0.6\r\n@schematics\/angular             17.0.6\r\nng-packagr                      17.0.2\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.2\n```\n\n\n### Anything else?\n\n_No response_","comments":[],"labels":["help wanted","good first issue","area: docs"]},{"title":"docs: add guide for the `output()` function","body":"Adds a guide for angular.io that introduces the new `output()` function\r\n(and `outputFromObservable`).\r\n\r\nIn a follow-up, once this lands, the guide will be ported to angular.dev as well.\r\n","comments":[],"labels":["action: review","aio: preview","area: docs"]},{"title":"Add <search> HTML native tag support","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncompiler\n\n### Description\n\nThe new  `<search>` HTML tag is supported by multiple browsers but leads to an NG8001 error with Angular as not part of the [supported HTML tags](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/compiler\/src\/schema\/dom_element_schema_registry.ts#L80).\r\n\r\nThanks @JeanMeche for providing me with the proper HTML listing!\n\n### Proposed solution\n\nAdd the HMTL tag to the existing Angular listing\n\n### Alternatives considered\n\nNo one considered","comments":[],"labels":["state: has PR"]},{"title":"Missing `tbody` in HTML thows a hydration missmatch error. ","body":"### Which @angular\/* package(s) are the source of the bug?\n\ncore\n\n### Is this a regression?\n\nNo\n\n### Description\n\nWhen a template has a table without a `tbody` node, browsers adds them dynamincally. \r\n\r\nThis throws a hydration missmatch error. \r\n\r\nThe workaround is obvious : adding the `tbody` after the `table` node. \r\n\r\n* Should we produce a template warning here ? \r\n* There are probably other cases where browsers dynamically change the dom when loading the HTML. Should have a more global approach on this. \n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/stackblitz.com\/fork\/github\/JeanMeche\/ssr-hydration-demo\/tree\/tbody?template=node\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nv17.\n```\n\n\n### Anything else?\n\n_No response_","comments":["We should likely special-case these things in the hydration code path."],"labels":["workaround1: obvious","area: core","core: hydration"]},{"title":"Docs: missing closing tag in logical structure of the template","body":"### Describe the problem that you experienced\n\nThere are missing closing tags on the last code example. \r\nhttps:\/\/angular.dev\/guide\/di\/hierarchical-dependency-injection#logical-structure-of-the-template\r\n\r\nit should be:\r\n<code-example format=\"html\" language=\"html\">\r\n&lt;app-root&gt;\r\n  &lt;#VIEW&gt;\r\n    &lt;app-child&gt;\r\n    &lt;#VIEW&gt;\r\n      &hellip;content goes here&hellip;\r\n    &lt;\/#VIEW&gt;\r\n    &lt;\/app-child&gt;\r\n  &lt;\/#VIEW&gt;\r\n&lt;\/app-root&gt;\r\n<\/code-example>\r\n\r\nAnd I wanted to push my PR but it seems that I don't have permission to the project. Could you help me to how to contribute as well? \r\n\n\n### Enter the URL of the topic with the problem\n\n_No response_\n\n### Describe what you were looking for in the documentation\n\n_No response_\n\n### Describe the actions that led you to experience the problem\n\n_No response_\n\n### Describe what you want to experience that would fix the problem\n\n_No response_\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["@smoothjjuu are you forking the project then creating a PR that way?","@smoothjjuu have you checked the [contributing guidelines](https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md)?","Thank you all :) I missed signing [Contributor License Agreement (CLA)](https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#cla) before sending PRs"],"labels":["help wanted","state: has PR","good first issue","P3","area: adev"]},{"title":"Router.navigateByUrl navigate to base URL i.e. \/ when % used as prefix\/suffix\/in-middle in query param","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\nrouter\r\n\r\n### Is this a regression?\r\n\r\nYes\r\n\r\n### Description\r\n\r\nRouter.navigateByUrl navigate to base URL i.e. \/ when % used as prefix\/suffix\/in-middle in query param even if encode them explicitly \r\n\r\nFor example below URL(s) when used to navigate, it will jump to base URL without any error\r\n\r\n`http:\/\/localhost:4200\/#\/main\/search\/144\/results?Name=test%`\r\n`http:\/\/localhost:4200\/#\/main\/search\/144\/results?Name=test%test`\r\n`http:\/\/localhost:4200\/#\/main\/search\/144\/results?Name=%test`\r\n`http:\/\/localhost:4200\/#\/main\/search\/144\/results?Name=test%25`\r\n`http:\/\/localhost:4200\/#\/main\/search\/144\/results?Name=%25test`\r\n`http:\/\/localhost:4200\/#\/main\/search\/144\/results?Name=test%25test`\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/4208015\/11a5dbf5-1982-419c-82b0-ab84032100eb)\r\n\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\n_No response_\r\n\r\n### Please provide the exception or error you saw\r\n\r\n```true\r\nNA\r\n```\r\n\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\n\/ \\   _ __   __ _ _   _| | __ _ _ __     \/ ___| |   |_ _|   \/ \u25b3 \\ | '_ \\ \/ _` | | | | |\/ _` | '__|   | |   | |    | | \r\n  \/ ___ \\| | | | (_| | |_| | | (_| | |      | |___| |___ | | \r\n \/_\/   \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_|       \\____|_____|___|                |___\/\r\n    \r\n\r\nAngular CLI: 17.1.2\r\nNode: 18.13.0\r\nPackage Manager: npm 10.2.5\r\nOS: win32 x64\r\n\r\nAngular: 17.1.2\r\n... animations, cdk, cli, common, compiler, compiler-cli, core\r\n... forms, language-service, platform-browser\r\n... platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------    \r\n@angular-devkit\/architect       0.1701.2\r\n@angular-devkit\/build-angular   17.1.2\r\n@angular-devkit\/core            17.1.2\r\n@angular-devkit\/schematics      17.1.2\r\n@schematics\/angular             17.1.2\r\nrxjs                            7.8.1\r\ntypescript                      5.3.3\r\nzone.js                         0.14.3\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\n_No response_","comments":[],"labels":["area: router","router: URL parsing\/generation","P3"]},{"title":"No clarification about definition of content initialization","body":"### Describe the problem that you experienced\r\n\r\nDocs should define the term \"content fully initialized\".\r\nto understand what \"content fully initialized\" term mean, I did some observation in my personal projects.\r\n\r\nMy understanding is, When we say component is initialized (not view initialized) , it means, for all content children\r\n\r\n- constructor is invoked. if coded\r\n- ngOnChanges is invoked. if coded\r\n- ngOnInit is invoked. if coded\r\n- ngDoCheck is invoked. if coded.\r\n\r\nThat all reduces to : Component is initialized mean angular has called all the hooks required before first change detection cycle and change detection is not yet triggered. \r\n\r\nIs my understanding correct?\r\n\r\nI am finding for what is the exact contract of ngAfterContentInit life cycle hook? \r\n\r\n### Enter the URL of the topic with the problem\r\n\r\nhttps:\/\/angular.io\/api\/core\/AfterContentInit\r\n\r\n### Describe what you were looking for in the documentation\r\n\r\nconcise crisp definition of what a component and content initialization means. so, that developer has concise crisp expectation from the ngAfterContentInit hook.\r\n\r\n### Describe the actions that led you to experience the problem\r\n\r\nI was reading a doc of lifecycle hook.  and I found out that initialization term can be defined well.\r\n\r\n### Describe what you want to experience that would fix the problem\r\n\r\nconcise crisp definition of what a component and content initialization means. so, that developer has concise crisp expectation from the ngAfterContentInit hook.\r\n\r\n### Add a screenshot if that helps illustrate the problem\r\n\r\nNA\r\n\r\n### If this problem caused an exception or error, please paste it here\r\n\r\n```true\r\nNA\r\n```\r\n\r\n\r\n### If the problem is browser-specific, please specify the device, OS, browser, and version\r\n\r\n```true\r\nNA\r\n```\r\n\r\n\r\n### Provide any additional information here in as much as detail as you can\r\n\r\n```true\r\nNA\r\n```\r\n","comments":[],"labels":["area: docs"]},{"title":"fix(docs-infra): remove part aio infra","body":"Remove parts of the aio infra","comments":[],"labels":["action: merge","target: major","PullApprove: disable"]},{"title":"Improve API documentation in angular.dev for new signal APIs","body":"See individual commits. This is a start to help represent these APIs better in the angular.dev site without fundamentally changing how APIs are displayed in angular.dev (this would be a larger change)\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/4987015\/9c0a6522-18be-468d-99c1-4c13668563eb)\r\n\r\nRelated prerequisite PR that is already merged: https:\/\/github.com\/angular\/dev-infra\/pull\/1854","comments":["Deployed adev-preview for 175b9af370bda30507a7edde4b8285e1c67b7c3f to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54925-adev-prev-5thmchgi.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->","<img width=\"825\" alt=\"Screenshot 2024-03-19 at 01 50 39\" src=\"https:\/\/github.com\/angular\/angular\/assets\/1300985\/6005b75a-9996-4e57-8e1c-1b3f116b23d2\">\r\nShould we maybe make the items `white-space: nowrap;` ? ","Note: The changes to the generics of `input` are just naming. We can iterate more on these in the future. I've been discussing a couple of alternatives with Alex, but those are breaking."],"labels":["action: review","area: compiler","adev: preview"]},{"title":"HTTP Guide don't have a security page","body":"### Describe the problem that you experienced\n\nWhen switching to the [HTTP CLient's guides](https:\/\/angular.dev\/guide\/http), there is no page to switch for the Security tab, but in the existing code base [structure](https:\/\/github.com\/angular\/angular\/blob\/f50afb10c37f19133053e2ea56c9b404e15916be\/adev\/src\/content\/guide\/http\/security.md)  Markdown for the tab is presence, which results in an Issue #54918 \n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.dev\/guide\/http\n\n### Describe what you were looking for in the documentation\n\n_No response_\n\n### Describe the actions that led you to experience the problem\n\n_No response_\n\n### Describe what you want to experience that would fix the problem\n\n_No response_\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":[],"labels":["P3","area: adev"]},{"title":"Animation not initialized when using ZonelessChangeDetection","body":"### Which @angular\/* package(s) are the source of the bug?\n\nanimations\n\n### Is this a regression?\n\nNo\n\n### Description\n\na simple reproduction \r\n\r\napp.config.ts\r\n```\r\nexport const appConfig: ApplicationConfig = {\r\n  providers: [provideAnimationsAsync(), \u0275provideZonelessChangeDetection()]\r\n};\r\n```\r\n\r\n\r\napp.component.ts\r\n```\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: '.\/app.component.html',\r\n  styleUrl: '.\/app.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('highlight', [\r\n      state('false', style({ 'background-color': 'red', color: 'white' })),\r\n    ])\r\n  ]\r\n})\r\nexport class AppComponent {\r\n  highlight = signal(false);\r\n}\r\n```\r\n\r\napp.component.html\r\n`<h1 [@highlight]=\"highlight()\">Hello World<\/h1>`\r\n\r\nresults:\r\nif no apply \u0275provideZonelessChangeDetection()\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/8691013\/66059f3d-e8ec-4bcb-a520-b06cab8ad80d)\r\nif apply \u0275provideZonelessChangeDetection()\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/8691013\/21962849-c69a-4e43-a3a0-af5e745156e8)\r\n\r\n\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/github.com\/keatkeat87\/zoneless-animation-issue\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.3.0\r\nNode: 20.11.1\r\nPackage Manager: yarn 1.22.19\r\nOS: win32 x64\r\n\r\nAngular: 17.3.0\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1703.0\r\n@angular-devkit\/build-angular   17.3.0\r\n@angular-devkit\/core            17.3.0\r\n@angular-devkit\/schematics      17.3.0\r\n@schematics\/angular             17.3.0\r\nrxjs                            7.8.1\r\ntypescript                      5.4.2\r\nzone.js                         0.14.4\n```\n\n\n### Anything else?\n\n_No response_","comments":["Async animations currently relies on the import promise being detected by ZoneJS and triggering another round of change detection."],"labels":["area: core","area: zones","P4"]},{"title":"There is no HttpClient page!","body":"### Describe the problem that you experienced\n\nIn this section there is no link to HttpClient page: [Cross-site request forgery](https:\/\/angular.dev\/best-practices\/security#cross-site-request-forgery)\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.dev\/best-practices\/security#cross-site-request-forgery\n\n### Describe what you were looking for in the documentation\n\n_No response_\n\n### Describe the actions that led you to experience the problem\n\n_No response_\n\n### Describe what you want to experience that would fix the problem\n\n_No response_\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":[],"labels":["P3","area: adev"]},{"title":"refactor(router): use real `EnvironmentInjector` in the `RouterOutlet` class","body":"**Note: this PR is based on https:\/\/github.com\/angular\/angular\/pull\/54907, only the second commit is relevant in a context of this PR. This PR is in the \"work in progress\" state, more tests are required to verify the change.**\r\n\r\nCurrently, the `RouterOutlet` class uses a custom injector implementation to provide route-specific tokens (such as `ActivatedRoute`). This commit switches Router logic to use real `EnvironmentInjector` instead.\r\n\r\nThis commit partially addresses issue https:\/\/github.com\/angular\/angular\/issues\/54864 and there will be one more PR with extra changes to defer logic.\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Refactoring (no functional changes, no api changes)\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No","comments":["[Exploratory presubmit](http:\/\/test\/OCL:616685546:BASE:616685807:1710728597224:8c2cfc0f)."],"labels":["state: WIP","area: router","target: patch"]},{"title":"docs(docs-infra): rephrase sentence to make sense","body":"Remove the confuse sentences with 2 categories, and rephrase\r\nFixes #54792\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #54792\r\n\r\n\r\n## What is the new behavior?\r\nRemove the confuse sentences with 2 categories, and rephrase\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":[],"labels":["action: merge","target: patch","area: docs"]},{"title":"docs: fix typo in editor","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nThere is a typo: enviroment should be environment.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n","comments":[],"labels":["area: docs"]},{"title":"refactor(core): make `any` injector scope configurable","body":"This commit updates an internal logic to treat `any` as any other scope. Previously, there was a hardcoded exception for `any` scope specifically.\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Refactoring (no functional changes, no api changes)\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No","comments":["[Exploratory presubmit](https:\/\/fusion2.corp.google.com\/presubmit\/616329431\/OCL:616329431:BASE:616329710:1710563554603:70ca2182)."],"labels":["action: review","area: core","target: patch"]},{"title":"refactor(common): request low quality placeholder images","body":"For every built-in loader, this commit adds a parameter to load low quality placeholder images. Using 20\/100 as base value.\r\n","comments":["[Presubmit](http:\/\/test\/OCL:618490470:BASE:618490486:1711226291684:c82d2c04)."],"labels":["area: common","target: patch","action: presubmit","common: image directive"]},{"title":"build: update cross-repo angular dependencies","body":"This PR contains the following updates:\n\n| Package | Type | Update | Change |\n|---|---|---|---|\n| [@angular-devkit\/architect-cli](https:\/\/togithub.com\/angular\/angular-cli) | devDependencies | minor | [`0.1702.0-rc.0` -> `0.1703.0-rc.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular-devkit%2farchitect-cli\/0.1702.0-rc.0\/0.1703.0-rc.0) |\n| [@angular-devkit\/build-angular](https:\/\/togithub.com\/angular\/angular-cli) | devDependencies | minor | [`17.2.3` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular-devkit%2fbuild-angular\/17.2.3\/17.3.0) |\n| [@angular-devkit\/build-angular](https:\/\/togithub.com\/angular\/angular-cli) | devDependencies | minor | [`17.2.0-rc.0` -> `17.3.0-rc.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular-devkit%2fbuild-angular\/17.2.0-rc.0\/17.3.0-rc.0) |\n| [@angular\/animations](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/animations)) | devDependencies | major | [`^17.3.0-rc` -> `^18.0.0-next`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fanimations\/17.3.0\/18.0.0-next.0) |\n| [@angular\/animations](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/animations)) | dependencies | minor | [`17.2.4` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fanimations\/17.2.4\/17.3.0) |\n| [@angular\/animations](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/animations)) | dependencies | major | [`17.3.0-rc.0` -> `18.0.0-next.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fanimations\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/animations](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/animations)) | dependencies | major | [`^17.3.0-rc` -> `^18.0.0-next`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fanimations\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/build-tooling](https:\/\/togithub.com\/angular\/dev-infra-private-build-tooling-builds) | devDependencies | digest | `65d002a` -> `7e0f636` |\n| [@angular\/cdk](https:\/\/togithub.com\/angular\/components) | dependencies | major | [`17.3.0-rc.0` -> `18.0.0-next.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcdk\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/cdk](https:\/\/togithub.com\/angular\/components) | dependencies | major | [`^17.3.0-rc` -> `^18.0.0-next`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcdk\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/cli](https:\/\/togithub.com\/angular\/angular-cli) | devDependencies | minor | [`17.2.3` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcli\/17.2.3\/17.3.0) |\n| [@angular\/cli](https:\/\/togithub.com\/angular\/angular-cli) | devDependencies | minor | [`17.2.0-rc.0` -> `17.3.0-rc.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcli\/17.2.0-rc.0\/17.3.0-rc.0) |\n| [@angular\/common](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/common)) | dependencies | minor | [`17.2.4` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcommon\/17.2.4\/17.3.0) |\n| [@angular\/common](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/common)) | dependencies | major | [`17.3.0-rc.0` -> `18.0.0-next.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcommon\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/common](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/common)) | dependencies | major | [`^17.3.0-rc` -> `^18.0.0-next`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcommon\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/compiler](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/compiler)) | dependencies | minor | [`17.2.4` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcompiler\/17.2.4\/17.3.0) |\n| [@angular\/compiler](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/compiler)) | dependencies | major | [`17.3.0-rc.0` -> `18.0.0-next.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcompiler\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/compiler](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/compiler)) | dependencies | major | [`^17.3.0-rc` -> `^18.0.0-next`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcompiler\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/compiler-cli](https:\/\/togithub.com\/angular\/angular\/tree\/main\/packages\/compiler-cli) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/compiler-cli)) | devDependencies | minor | [`17.2.4` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcompiler-cli\/17.2.4\/17.3.0) |\n| [@angular\/compiler-cli](https:\/\/togithub.com\/angular\/angular\/tree\/main\/packages\/compiler-cli) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/compiler-cli)) | devDependencies | major | [`17.2.0-rc.1` -> `18.0.0-next.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcompiler-cli\/17.2.0-rc.1\/18.0.0-next.0) |\n| [@angular\/compiler-cli](https:\/\/togithub.com\/angular\/angular\/tree\/main\/packages\/compiler-cli) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/compiler-cli)) | devDependencies | major | [`^17.3.0-rc` -> `^18.0.0-next`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcompiler-cli\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/core](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/core)) | dependencies | minor | [`17.2.4` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcore\/17.2.4\/17.3.0) |\n| [@angular\/core](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/core)) | dependencies | major | [`17.3.0-rc.0` -> `18.0.0-next.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcore\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/core](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/core)) | dependencies | major | [`^17.3.0-rc` -> `^18.0.0-next`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fcore\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/docs](https:\/\/togithub.com\/angular\/dev-infra-private-docs-builds) | devDependencies | digest | `82c4573` -> `3bddbb5` |\n| [@angular\/elements](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/elements)) | dependencies | minor | [`17.2.4` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2felements\/17.2.4\/17.3.0) |\n| [@angular\/elements](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/elements)) | dependencies | major | [`17.3.0-rc.0` -> `18.0.0-next.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2felements\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/forms](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/forms)) | dependencies | minor | [`17.2.4` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fforms\/17.2.4\/17.3.0) |\n| [@angular\/forms](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/forms)) | dependencies | major | [`17.3.0-rc.0` -> `18.0.0-next.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fforms\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/forms](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/forms)) | dependencies | major | [`^17.3.0-rc` -> `^18.0.0-next`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fforms\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/localize](https:\/\/togithub.com\/angular\/angular) | dependencies | minor | [`17.2.4` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2flocalize\/17.2.4\/17.3.0) |\n| [@angular\/material](https:\/\/togithub.com\/angular\/components) | dependencies | major | [`17.3.0-rc.0` -> `18.0.0-next.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fmaterial\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/material](https:\/\/togithub.com\/angular\/components) | dependencies | major | [`^17.3.0-rc` -> `^18.0.0-next`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fmaterial\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/ng-dev](https:\/\/togithub.com\/angular\/dev-infra-private-ng-dev-builds) | devDependencies | digest | `7dea535` -> `881b4c8` |\n| [@angular\/platform-browser](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/platform-browser)) | dependencies | minor | [`17.2.4` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fplatform-browser\/17.2.4\/17.3.0) |\n| [@angular\/platform-browser](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/platform-browser)) | dependencies | major | [`17.3.0-rc.0` -> `18.0.0-next.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fplatform-browser\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/platform-browser](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/platform-browser)) | dependencies | major | [`^17.3.0-rc` -> `^18.0.0-next`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fplatform-browser\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/platform-browser-dynamic](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/platform-browser-dynamic)) | dependencies | minor | [`17.2.4` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fplatform-browser-dynamic\/17.2.4\/17.3.0) |\n| [@angular\/platform-browser-dynamic](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/platform-browser-dynamic)) | dependencies | major | [`17.3.0-rc.0` -> `18.0.0-next.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fplatform-browser-dynamic\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/platform-server](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/platform-server)) | dependencies | minor | [`17.2.4` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fplatform-server\/17.2.4\/17.3.0) |\n| [@angular\/router](https:\/\/togithub.com\/angular\/angular\/tree\/main\/packages\/router) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/router)) | dependencies | minor | [`17.2.4` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2frouter\/17.2.4\/17.3.0) |\n| [@angular\/router](https:\/\/togithub.com\/angular\/angular\/tree\/main\/packages\/router) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/router)) | dependencies | major | [`17.3.0-rc.0` -> `18.0.0-next.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2frouter\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/router](https:\/\/togithub.com\/angular\/angular\/tree\/main\/packages\/router) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/router)) | dependencies | major | [`^17.3.0-rc` -> `^18.0.0-next`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2frouter\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/service-worker](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/service-worker)) | dependencies | minor | [`17.2.4` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fservice-worker\/17.2.4\/17.3.0) |\n| [@angular\/service-worker](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/service-worker)) | dependencies | major | [`17.3.0-rc.0` -> `18.0.0-next.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fservice-worker\/17.3.0-rc.0\/18.0.0-next.0) |\n| [@angular\/ssr](https:\/\/togithub.com\/angular\/angular-cli) | dependencies | minor | [`17.2.3` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fssr\/17.2.3\/17.3.0) |\n| [@angular\/upgrade](https:\/\/togithub.com\/angular\/angular) ([source](https:\/\/togithub.com\/angular\/angular\/tree\/HEAD\/packages\/upgrade)) | dependencies | minor | [`17.2.4` -> `17.3.0`](https:\/\/renovatebot.com\/diffs\/npm\/@angular%2fupgrade\/17.2.4\/17.3.0) |\n| angular\/dev-infra | action | digest | `1421ff0` -> `7c1dd2d` |\n\n\ud83d\udd21 If you wish to disable git hash updates, add `\":disableDigestUpdates\"` to the extends array in your config.\n\n---\n\n### Release Notes\n\n<details>\n<summary>angular\/angular-cli (@&#8203;angular-devkit\/architect-cli)<\/summary>\n\n### [`v0.1703.0-rc.0`](https:\/\/togithub.com\/angular\/angular-cli\/compare\/c30a3c96e4aca3eb86541739b5de397844e8b7e9...988ee7b84bf2b191790ff9410967f5e21d557ea7)\n\n[Compare Source](https:\/\/togithub.com\/angular\/angular-cli\/compare\/c30a3c96e4aca3eb86541739b5de397844e8b7e9...988ee7b84bf2b191790ff9410967f5e21d557ea7)\n\n### [`v0.1702.3`](https:\/\/togithub.com\/angular\/angular-cli\/compare\/12d95a819bfe0e77697465829d4b74e1700ae1a2...c30a3c96e4aca3eb86541739b5de397844e8b7e9)\n\n[Compare Source](https:\/\/togithub.com\/angular\/angular-cli\/compare\/12d95a819bfe0e77697465829d4b74e1700ae1a2...c30a3c96e4aca3eb86541739b5de397844e8b7e9)\n\n### [`v0.1702.2`](https:\/\/togithub.com\/angular\/angular-cli\/compare\/0d8fedde5e907694f634976145cd792b1c04dfb8...12d95a819bfe0e77697465829d4b74e1700ae1a2)\n\n[Compare Source](https:\/\/togithub.com\/angular\/angular-cli\/compare\/0d8fedde5e907694f634976145cd792b1c04dfb8...12d95a819bfe0e77697465829d4b74e1700ae1a2)\n\n### [`v0.1702.1`](https:\/\/togithub.com\/angular\/angular-cli\/compare\/65888424f74e1c835c3409cafb1f270c27e723bb...0d8fedde5e907694f634976145cd792b1c04dfb8)\n\n[Compare Source](https:\/\/togithub.com\/angular\/angular-cli\/compare\/65888424f74e1c835c3409cafb1f270c27e723bb...0d8fedde5e907694f634976145cd792b1c04dfb8)\n\n### [`v0.1702.0`](https:\/\/togithub.com\/angular\/angular-cli\/compare\/02066604853c3ea5cedee1401cd08fd4e01f1746...65888424f74e1c835c3409cafb1f270c27e723bb)\n\n[Compare Source](https:\/\/togithub.com\/angular\/angular-cli\/compare\/02066604853c3ea5cedee1401cd08fd4e01f1746...65888424f74e1c835c3409cafb1f270c27e723bb)\n\n<\/details>\n\n<details>\n<summary>angular\/angular (@&#8203;angular\/animations)<\/summary>\n\n### [`v18.0.0-next.0`](https:\/\/togithub.com\/angular\/angular\/blob\/HEAD\/CHANGELOG.md#1800-next0-2024-03-14)\n\n[Compare Source](https:\/\/togithub.com\/angular\/angular\/compare\/17.3.0...18.0.0-next.0)\n\n#### Breaking Changes\n\n##### core\n\n-   `OnPush` views at the root of the application need to\n    be marked dirty for their host bindings to refresh. Previously, the host\n    bindings were refreshed for all root views without respecting the\n    `OnPush` change detection strategy.\n-   The `ComponentFixture` `autoDetect` feature will no\n    longer refresh the component's host view when the component is `OnPush`\n    and not marked dirty. This exposes existing issues in components which\n    claim to be `OnPush` but do not correctly call `markForCheck` when they\n    need to be refreshed. If this change causes test failures, the easiest\n    fix is to change the component to `ChangeDetectionStrategy.Default`.\n-   When Angular runs change detection, it will continue to\n    refresh any views attached to `ApplicationRef` that are still marked for\n    check after one round completes. In rare cases, this can result in infinite\n    loops when certain patterns continue to mark views for check using\n    `ChangeDetectorRef.detectChanges`. This will be surfaced as a runtime\n    error with the `NG0103` code.\n-   The `ComponentFixture.autoDetect` feature now executes\n    change detection for the fixture within `ApplicationRef.tick`. This more\n    closely matches the behavior of how a component would refresh in\n    production. The order of component refresh in tests may be slightly\n    affected as a result, especially when dealing with additional components\n    attached to the application, such as dialogs. Tests sensitive to this\n    type of change (such as screenshot tests) may need to be updated.\n    Concretely, this change means that the component will refresh *before*\n    additional views attached to `ApplicationRef` (i.e. dialog components).\n    Prior to this change, the fixture component would refresh *after* other\n    views attached to the application.\n-   The exact timing of change detection execution when\n    using event or run coalescing with `NgZone` is now the first of either\n    `setTimeout` or `requestAnimationFrame`. Code which relies on this\n    timing (usually by accident) will need to be adjusted. If a callback\n    needs to execute after change detection, we recommend `afterNextRender`\n    instead of something like `setTimeout`.\n-   Newly created and views marked for check and reattached\n    during change detection are now guaranteed to be refreshed in that same\n    change detection cycle. Previously, if they were attached at a location\n    in the view tree that was already checked, they would either throw\n    `ExpressionChangedAfterItHasBeenCheckedError` or not be refreshed until\n    some future round of change detection. In rare circumstances, this\n    correction can cause issues. We identified one instance that relied on\n    the previous behavior by reading a value on initialization which was\n    queued to be updated in a microtask instead of being available in the\n    current change detection round. The component only read this value during\n    initialization and did not read it again after the microtask updated it.\n\n##### router\n\n-   Guards can now return `RedirectCommand` for redirects\n    in addition to `UrlTree`. Code which expects only `boolean` or `UrlTree`\n    values in `Route` types will need to be adjusted.\n\n##### compiler-cli\n\n| Commit | Type | Description |\n| -- | -- | -- |\n| [9b424d7224](https:\/\/togithub.com\/angular\/angular\/commit\/9b424d7224db46edb16c81979c7e231d5e3db5e9) | fix | preserve original reference to non-deferrable dependency ([#&#8203;54759](https:\/\/togithub.com\/angular\/angular\/pull\/54759)) |\n\n##### core\n\n| Commit | Type | Description |\n| -- | -- | -- |\n| [64f870c12b](https:\/\/togithub.com\/angular\/angular\/commit\/64f870c12bae1ad66509f0d65f8d3e051aae6eaa) | fix | `ApplicationRef.tick` should respect OnPush for host bindings ([#&#8203;53718](https:\/\/togithub.com\/angular\/angular\/pull\/53718)) ([#&#8203;53718](https:\/\/togithub.com\/angular\/angular\/pull\/53718)) |\n| [8cad4e8cbe](https:\/\/togithub.com\/angular\/angular\/commit\/8cad4e8cbe2baf20dae7b7ef1f4253a4940cbba0) | fix | `ComponentFixture` `autoDetect` respects `OnPush` flag of host view ([#&#8203;54824](https:\/\/togithub.com\/angular\/angular\/pull\/54824)) |\n| [ba8e465974](https:\/\/togithub.com\/angular\/angular\/commit\/ba8e46597435a827670f10b971b2c58f7033b180) | fix | Change Detection will continue to refresh views while marked for check ([#&#8203;54734](https:\/\/togithub.com\/angular\/angular\/pull\/54734)) |\n| [24bc0ed4f2](https:\/\/togithub.com\/angular\/angular\/commit\/24bc0ed4f2de47bd998338d73cba394fb45dd497) | fix | ComponentFixture autodetect should detect changes within ApplicationRef.tick ([#&#8203;54733](https:\/\/togithub.com\/angular\/angular\/pull\/54733)) |\n| [10c5cdb49c](https:\/\/togithub.com\/angular\/angular\/commit\/10c5cdb49c51c95086febd37f4d88a9b944d7e1c) | fix | ensure change detection runs in a reasonable timeframe with zone coalescing ([#&#8203;54578](https:\/\/togithub.com\/angular\/angular\/pull\/54578)) |\n| [ad045efd4b](https:\/\/togithub.com\/angular\/angular\/commit\/ad045efd4b1565e01c14399998143538ebfbfd99) | fix | Ensure views marked for check are refreshed during change detection ([#&#8203;54735](https:\/\/togithub.com\/angular\/angular\/pull\/54735)) |\n| [700c0520bb](https:\/\/togithub.com\/angular\/angular\/commit\/700c0520bb638952ba41a8d8260cf12afb078c0e) | fix | Update ApplicationRef.tick loop to only throw in dev mode ([#&#8203;54848](https:\/\/togithub.com\/angular\/angular\/pull\/54848)) |\n\n##### router\n\n| Commit | Type | Description |\n| -- | -- | -- |\n| [8735af08b9](https:\/\/togithub.com\/angular\/angular\/commit\/8735af08b976b30cf236a83f9e8b64b5ff62e9f3) | feat | Add ability to return `UrlTree` with `NavigationBehaviorOptions` from guards ([#&#8203;45023](https:\/\/togithub.com\/angular\/angular\/pull\/45023)) |\n\n<!-- CHANGELOG SPLIT MARKER -->\n\n<\/details>\n\n<details>\n<summary>angular\/components (@&#8203;angular\/cdk)<\/summary>\n\n### [`v18.0.0-next.0`](https:\/\/togithub.com\/angular\/components\/blob\/HEAD\/CHANGELOG.md#1800-next0-diamond-dachshund-2024-03-14)\n\n[Compare Source](https:\/\/togithub.com\/angular\/components\/compare\/17.3.0...18.0.0-next.0)\n\n##### material\n\n| Commit | Type | Description |\n| -- | -- | -- |\n| [e2a45bf1e](https:\/\/togithub.com\/angular\/components\/commit\/e2a45bf1e5e49daf2c23c6f737ee959f57b41cf9) | feat | **core:** Allow namespacing ripple-loader event handler ([#&#8203;28699](https:\/\/togithub.com\/angular\/components\/pull\/28699)) |\n\n<!-- CHANGELOG SPLIT MARKER -->\n\n### [`v17.3.0`](https:\/\/togithub.com\/angular\/components\/blob\/HEAD\/CHANGELOG.md#1730-cobalt-catfish-2024-03-14)\n\n[Compare Source](https:\/\/togithub.com\/angular\/components\/compare\/17.3.0-rc.0...17.3.0)\n\n##### material\n\n| Commit | Type | Description |\n| -- | -- | -- |\n| [26b376e43](https:\/\/togithub.com\/angular\/components\/commit\/26b376e43e18e9941f44d4d0714696b863250507) | feat | **tooltip:** be able to customize the longpress delay ([#&#8203;27512](https:\/\/togithub.com\/angular\/components\/pull\/27512)) |\n| [09111d002](https:\/\/togithub.com\/angular\/components\/commit\/09111d00299c7747ed6543d91e257f7224e1119e) | fix | **button-toggle:** Add checkmark indicators with hideSingleSelectionIndicator and hideMultipleSelectionIndicator input and config options ([#&#8203;28553](https:\/\/togithub.com\/angular\/components\/pull\/28553)) |\n| [52da8b33f](https:\/\/togithub.com\/angular\/components\/commit\/52da8b33fe62da969e119a6456b076c7445d8f3e) | fix | **core:** avoid solid ripples in buttons ([#&#8203;28717](https:\/\/togithub.com\/angular\/components\/pull\/28717)) |\n| [36d82d89c](https:\/\/togithub.com\/angular\/components\/commit\/36d82d89c0de445edc7fb19b704bb346b9a859de) | fix | **core:** theming validation for m2 themes firing incorrectly ([#&#8203;28707](https:\/\/togithub.com\/angular\/components\/pull\/28707)) |\n| [79b447e2e](https:\/\/togithub.com\/angular\/components\/commit\/79b447e2e7b0523326520ba09d163169c13cdfda) | fix | **form-field:** ensure same stacking context as container ([#&#8203;28713](https:\/\/togithub.com\/angular\/components\/pull\/28713)) |\n| [63a764de6](https:\/\/togithub.com\/angular\/components\/commit\/63a764de6147a5c1cb09f388de454eda9ee3414a) | fix | **slide-toggle:** m3 selected track outline ([#&#8203;28625](https:\/\/togithub.com\/angular\/components\/pull\/28625)) |\n| [386f768b6](https:\/\/togithub.com\/angular\/components\/commit\/386f768b6c080077a7570ea4f759930641131f6e) | fix | **slider:** fix animation issue ([#&#8203;28704](https:\/\/togithub.com\/angular\/components\/pull\/28704)) |\n\n##### google-maps\n\n| Commit | Type | Description |\n| -- | -- | -- |\n| [b4b91be04](https:\/\/togithub.com\/angular\/components\/commit\/b4b91be04e23296060b5e7a041bbf8eeae325ee9) | feat | add advanced marker ([#&#8203;28525](https:\/\/togithub.com\/angular\/components\/pull\/28525)) |\n| [cc618b450](https:\/\/togithub.com\/angular\/components\/commit\/cc618b4501284e10ad5bb93f358f3d8de2c8e7b7) | fix | advanced marker not destroyed |\n| [5269e0f9d](https:\/\/togithub.com\/angular\/components\/commit\/5269e0f9d42bd045bc28be144cc7bdd457bacd1e) | fix | mapId not being set |\n\n<!-- CHANGELOG SPLIT MARKER -->\n\n<\/details>\n\n---\n\n### Configuration\n\n\ud83d\udcc5 **Schedule**: Branch creation - At any time (no schedule defined), Automerge - At any time (no schedule defined).\n\n\ud83d\udea6 **Automerge**: Disabled by config. Please merge this manually once you are satisfied.\n\n\u267b **Rebasing**: Whenever PR becomes conflicted, or you tick the rebase\/retry checkbox.\n\n\ud83d\udc7b **Immortal**: This PR will be recreated if closed unmerged. Get [config help](https:\/\/togithub.com\/angular\/dev-infra) if that's undesired.\n\n---\n\n - [ ] <!-- rebase-check -->If you want to rebase\/retry this PR, check this box\n\n---\n\nThis PR has been generated by [Renovate Bot](https:\/\/togithub.com\/renovatebot\/renovate).\n<!--renovate-debug:eyJjcmVhdGVkSW5WZXIiOiIzNy4yNDkuMCIsInVwZGF0ZWRJblZlciI6IjM3LjI0OS4wIiwidGFyZ2V0QnJhbmNoIjoibWFpbiJ9-->\n","comments":["### \u26a0 Artifact update problem\n\nRenovate failed to update artifacts related to this branch. You probably do not want to merge this PR as-is.\n\n\u267b Renovate will retry this branch, including artifacts, only when one of the following happens:\n\n - any of the package files in this branch needs updating, or \n - the branch becomes conflicted, or\n - you click the rebase\/retry checkbox if found above, or\n - you rename this PR's title to start with \"rebase!\" to trigger it manually\n\nThe artifact failure details are included below:\n\n##### File name: adev\/src\/content\/tutorials\/playground\/common\/package-lock.json\n\n```\nnpm notice \nnpm notice New minor version of npm available! 10.2.4 -> 10.5.0\nnpm notice Changelog: <https:\/\/github.com\/npm\/cli\/releases\/tag\/v10.5.0>\nnpm notice Run `npm install -g npm@10.5.0` to update!\nnpm notice \nnpm ERR! code ERESOLVE\nnpm ERR! ERESOLVE unable to resolve dependency tree\nnpm ERR! \nnpm ERR! While resolving: angular.dev@0.0.0\nnpm ERR! Found: @angular\/compiler-cli@18.0.0-next.0\nnpm ERR! node_modules\/@angular\/compiler-cli\nnpm ERR!   dev @angular\/compiler-cli@\"^18.0.0-next\" from the root project\nnpm ERR! \nnpm ERR! Could not resolve dependency:\nnpm ERR! peer @angular\/compiler-cli@\"^17.0.0\" from @angular-devkit\/build-angular@17.3.0\nnpm ERR! node_modules\/@angular-devkit\/build-angular\nnpm ERR!   dev @angular-devkit\/build-angular@\"^17.3.0-rc\" from the root project\nnpm ERR! \nnpm ERR! Fix the upstream dependency conflict, or retry\nnpm ERR! this command with --force or --legacy-peer-deps\nnpm ERR! to accept an incorrect (and potentially broken) dependency resolution.\nnpm ERR! \nnpm ERR! \nnpm ERR! For a full report see:\nnpm ERR! \/tmp\/renovate\/cache\/others\/npm\/_logs\/2024-03-19T15_05_01_906Z-eresolve-report.txt\n\nnpm ERR! A complete log of this run can be found in: \/tmp\/renovate\/cache\/others\/npm\/_logs\/2024-03-19T15_05_01_906Z-debug-0.log\n\n```\n\n##### File name: adev\/src\/content\/tutorials\/first-app\/common\/package-lock.json\n\n```\nnpm ERR! code ERESOLVE\nnpm ERR! ERESOLVE unable to resolve dependency tree\nnpm ERR! \nnpm ERR! While resolving: angular.dev@0.0.0\nnpm ERR! Found: @angular\/compiler-cli@18.0.0-next.0\nnpm ERR! node_modules\/@angular\/compiler-cli\nnpm ERR!   dev @angular\/compiler-cli@\"^18.0.0-next\" from the root project\nnpm ERR! \nnpm ERR! Could not resolve dependency:\nnpm ERR! peer @angular\/compiler-cli@\"^17.0.0\" from @angular-devkit\/build-angular@17.3.0\nnpm ERR! node_modules\/@angular-devkit\/build-angular\nnpm ERR!   dev @angular-devkit\/build-angular@\"^17.3.0-rc\" from the root project\nnpm ERR! \nnpm ERR! Fix the upstream dependency conflict, or retry\nnpm ERR! this command with --force or --legacy-peer-deps\nnpm ERR! to accept an incorrect (and potentially broken) dependency resolution.\nnpm ERR! \nnpm ERR! \nnpm ERR! For a full report see:\nnpm ERR! \/tmp\/renovate\/cache\/others\/npm\/_logs\/2024-03-19T15_05_04_423Z-eresolve-report.txt\n\nnpm ERR! A complete log of this run can be found in: \/tmp\/renovate\/cache\/others\/npm\/_logs\/2024-03-19T15_05_04_423Z-debug-0.log\n\n```\n\n##### File name: adev\/src\/content\/tutorials\/learn-angular\/common\/package-lock.json\n\n```\nnpm ERR! code ERESOLVE\nnpm ERR! ERESOLVE unable to resolve dependency tree\nnpm ERR! \nnpm ERR! While resolving: angular.dev@0.0.0\nnpm ERR! Found: @angular\/compiler-cli@18.0.0-next.0\nnpm ERR! node_modules\/@angular\/compiler-cli\nnpm ERR!   dev @angular\/compiler-cli@\"^18.0.0-next\" from the root project\nnpm ERR! \nnpm ERR! Could not resolve dependency:\nnpm ERR! peer @angular\/compiler-cli@\"^17.0.0\" from @angular-devkit\/build-angular@17.3.0\nnpm ERR! node_modules\/@angular-devkit\/build-angular\nnpm ERR!   dev @angular-devkit\/build-angular@\"^17.3.0-rc\" from the root project\nnpm ERR! \nnpm ERR! Fix the upstream dependency conflict, or retry\nnpm ERR! this command with --force or --legacy-peer-deps\nnpm ERR! to accept an incorrect (and potentially broken) dependency resolution.\nnpm ERR! \nnpm ERR! \nnpm ERR! For a full report see:\nnpm ERR! \/tmp\/renovate\/cache\/others\/npm\/_logs\/2024-03-19T15_05_05_548Z-eresolve-report.txt\n\nnpm ERR! A complete log of this run can be found in: \/tmp\/renovate\/cache\/others\/npm\/_logs\/2024-03-19T15_05_05_548Z-debug-0.log\n\n```\n\n##### File name: adev\/src\/content\/tutorials\/homepage\/package-lock.json\n\n```\nnpm ERR! code ERESOLVE\nnpm ERR! ERESOLVE unable to resolve dependency tree\nnpm ERR! \nnpm ERR! While resolving: angular.dev@0.0.0\nnpm ERR! Found: @angular\/compiler-cli@18.0.0-next.0\nnpm ERR! node_modules\/@angular\/compiler-cli\nnpm ERR!   dev @angular\/compiler-cli@\"^18.0.0-next\" from the root project\nnpm ERR! \nnpm ERR! Could not resolve dependency:\nnpm ERR! peer @angular\/compiler-cli@\"^17.0.0\" from @angular-devkit\/build-angular@17.3.0\nnpm ERR! node_modules\/@angular-devkit\/build-angular\nnpm ERR!   dev @angular-devkit\/build-angular@\"^17.3.0-rc\" from the root project\nnpm ERR! \nnpm ERR! Fix the upstream dependency conflict, or retry\nnpm ERR! this command with --force or --legacy-peer-deps\nnpm ERR! to accept an incorrect (and potentially broken) dependency resolution.\nnpm ERR! \nnpm ERR! \nnpm ERR! For a full report see:\nnpm ERR! \/tmp\/renovate\/cache\/others\/npm\/_logs\/2024-03-19T15_05_06_432Z-eresolve-report.txt\n\nnpm ERR! A complete log of this run can be found in: \/tmp\/renovate\/cache\/others\/npm\/_logs\/2024-03-19T15_05_06_432Z-debug-0.log\n\n```\n\n"],"labels":["action: merge","area: build & ci","target: major"]},{"title":"Docs updates ","body":null,"comments":["Deployed adev-preview for 3202ea3c23fc0627a0238bac93746a886a7a17ed to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54885-adev-prev-lyoumvon.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->"],"labels":["action: merge","target: major","area: docs","adev: preview"]},{"title":"docs: update compat table with 17.3","body":null,"comments":[],"labels":["area: docs"]},{"title":"Projected content is not hidden when dynamically creating a component if there is nowhere to project the content yet","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\ncore\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nWhen creating a component dynamically via `ViewContainerRef.createComponent()`, any content children created via `ViewContainerRef.createEmbeddedView()` and provided through `options.projectableContent` are not detached from the document if the dynamically created component does not have a location to project content to yet. Instead, they remain attached to the document outside of the component they were supposed to be projected into. If this is not the intended way to do this, please correct me, but this was the only way I found to data bind the embedded view to the component its template was declared in.\r\n\r\n\r\n```ts\r\nfunction render<C>(\r\n  componentType: Type<C>,\r\n  viewContainerRef: ViewContainerRef,\r\n  templateRef: TemplateRef<any>\r\n): void {\r\n  const embeddedViewRef = viewContainerRef.createEmbeddedView(templateRef);\r\n  viewContainerRef.createComponent(componentType, {\r\n    projectableNodes: [embeddedViewRef.rootNodes],\r\n  });\r\n}\r\n```\r\n\r\nThis situation arises with components that don't project content, or conditionally project content. For components with conditionally projected content specifically, once there is a location to project the content, the content will be moved there. If that location becomes unavailable again later, the projected content is properly detached from the document.\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/111467777\/4d3812df-4a93-4fd8-8f9c-8c3a938157ac)\r\n\r\nI expect projecting content in dynamically created components to be consistent with projecting content declaratively, which will always detach the content to project from the document if there is nowhere to project it. If this inconsistency is intentional, then I expect there to be a documented solution for replicating the behavior of projecting content declaratively when dynamically creating a component.\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\nhttps:\/\/stackblitz.com\/edit\/projected-content-not-hidden-dynamic-components?file=src%2Fapp%2Fapp.component.html\r\n\r\n### Please provide the exception or error you saw\r\n\r\nN\/A. No errors in console.\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 16.2.12\r\nNode: 16.20.2\r\nPackage Manager: npm 9.8.1\r\nOS: win32 x64\r\n\r\nAngular: 16.2.12\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1602.12\r\n@angular-devkit\/build-angular   16.2.0\r\n@angular-devkit\/core            16.2.12\r\n@angular-devkit\/schematics      16.2.12\r\n@angular\/cdk                    16.2.14\r\n@angular\/material               16.2.14\r\n@schematics\/angular             16.2.12\r\nrxjs                            7.8.1\r\ntypescript                      5.1.6\r\nzone.js                         0.13.3\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\nThere is a single workaround for both the no projectable content and conditionally projectable content cases, which is to use `Renderer2` to manually detach the elements created in the embedded view from the document before providing them to the component. I have provided examples of this workaround in the linked StackBlitz.\r\n\r\n```ts\r\nfunction renderWorkaround<C>(\r\n  componentType: Type<C>,\r\n  viewContainerRef: ViewContainerRef,\r\n  templateRef: TemplateRef<any>,\r\n  renderer: Renderer2\r\n): void {\r\n  const embeddedViewRef = viewContainerRef.createEmbeddedView(templateRef);\r\n  for (const node of embeddedViewRef.rootNodes) {\r\n    renderer.removeChild(node.parentNode, node);\r\n  }\r\n  viewContainerRef.createComponent(componentType, {\r\n    projectableNodes: [embeddedViewRef.rootNodes],\r\n  });\r\n}\r\n```\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/111467777\/323b9a4c-8225-4285-9a28-6d46052b44b9)\r\n\r\nI am aware that this issue could theoretically be solved by [using the suggested alternative to `<ng-content>` for conditional content projection](https:\/\/angular.io\/guide\/content-projection#conditional-content-projection), but my attempted solution of passing `TemplateRef.element.nativeElement` (which is just a comment) in `options.projectableNodes` when creating the component that projects content would not let me retrieve the `TemplateRef` via `@ContentChild` later.\r\n\r\nI discovered this issue while implementing the [longstanding workaround](https:\/\/github.com\/angular\/components\/issues\/13784#issuecomment-440137435) for [cdkDragHandle being ignored when it is placed inside a child component](https:\/\/github.com\/angular\/components\/issues\/13784) for my dynamically created components. I figure it is worth mentioning as that issue was closed without an official solution over 5 years ago on the basis that it was not possible at the time. It might be worth revisiting if it is possible now.","comments":["The contract for `createComponent` and content projection is not well documented, but I believe that we expect\/assume that any projected DOM nodes provided are not attached.\r\n\r\nA good reason for this is performance. Often manually created DOM is never attached to begin with, so having the responsibility lie with the consumer avoids Angular needing to check if each node is attached, just in case.","> The contract for `createComponent` and content projection is not well documented, but I believe that we expect\/assume that any projected DOM nodes provided are not attached.\r\n> \r\n> A good reason for this is performance. Often manually created DOM is never attached to begin with, so having the responsibility lie with the consumer avoids Angular needing to check if each node is attached, just in case.\r\n\r\nIn that case, is there a way to dynamically create components or embedded views with data binding without automatically attaching them to the DOM? As I mentioned, it seemed like the only way to get data binding to work with an embedded view was to create it via `ViewContainerRef.createEmbeddedView()`, which also automatically attaches the embedded view to the document. I tried creating it via `TemplateRef.createEmbeddedView()` which doesn't automatically attach it, but data binding to the outer component didn't happen. I thought the `context` argument of that function might help but [it seems like that is a separate thing](https:\/\/angular.io\/api\/core\/ng-template#context)."],"labels":["area: core","core: content projection","core: dynamic view creation"]},{"title":"fix(core): correctly project single-root content inside control flow","body":"This commit changes the way we use containers to insert conditional content. Previously if and switch conditional would always use the first content as the insertion container. This strategy interfered with content projection that projects entire containers - as the consequence content for _all_ cases would end up in slot matched by the first container. This could be very surprising as described in https:\/\/github.com\/angular\/angular\/issues\/54840\r\n\r\nAfter the change each conditional content is projected into its own container. This means that content projection can match more than one container and result in correct display.\r\n\r\nFixes #54840\r\n","comments":["@crisbeto this PR has runtime bits + tests of the changed strategy of inserting conditional content into containers. I've added tests for `@if` and `@switch` - `@for` should be fine as far as I can tell.\r\n\r\nImportant notes:\r\n* DO NOT MERGE this PR on its own - it requires compiler changes as well;\r\n* with those changes we could simplify the `\u0275\u0275conditional` instruction by dropping its first `containerIndex` argument","Compiler changes plus the changes from this PR are in https:\/\/github.com\/angular\/angular\/pull\/54921."],"labels":["area: core","core: control flow"]},{"title":"FormControl.markAsTouched does not work with OnPush Change Detection","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\nforms\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nCalling `markAsTouched()` will not trigger change detection in implementations of `ControlValueAccessor` that have change detection set to `OnPush`.\r\n\r\nFor example when wanting to display an error tooltip:\r\n\r\n```html\r\n<mat-form-field\r\n  [matTooltip]=\"errorMessage\"\r\n  [matTooltipDisabled]=\"ngControl.untouched\"   <-- will not update\r\n...\r\n```\r\n\r\nWhere ngControl is injected via OnInit:\r\n\r\n```ts\r\npublic ngOnInit(): void {\r\n  this.ngControl = this.injector.get(NgControl, null);\r\n}\r\n```\r\n\r\nThis is because currently [markAsTouched is just setting a variable](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/forms\/src\/model\/abstract_model.ts#L799), so the component is not marked for check.\r\n\r\nMy proposed solution would be for the current form state api (touched, untouched, pristine, ...) to use Signals internally.","comments":[],"labels":["area: forms","forms: Controls API"]},{"title":"refactor(compiler): add `handler` attribute to XMB output","body":"This allows tracking of which tools generated which XMB files and helps attribute Angular usage.\r\n\r\nThis is intended for usage inside Google, but I guess you could use it for similar analytics outside Google.","comments":["CARETAKER NOTE:\r\n\r\nNot sure why the presubmit status isn't propagating, I ran tests here:\r\nhttp:\/\/test\/OCL:615880119:BASE:615880150:1710447135252:a8cccfc9\r\n\r\nPre-existing failures \/ flakes can be ignored. There are a handful of goldens to update, which I have in http:\/\/cl\/615876583 and needs to be patched into the sync."],"labels":["action: review","area: i18n","target: patch"]},{"title":"Router links in `@defer` blocks not having correct relative route","body":"### Is this a regression?\n\n- [X] Yes, this behavior used to work in the previous version\n\n### The previous version in which this bug was not present was\n\n17.2.1\n\n### Description\n\nA RouterLink with a route of `.\/` should route to the activated route. (eg. `<a [routerLink]=\"'.\/'\" >Link One<\/a>`). But when it is in a defer block, and it is a sibling of a component that imports from material it routes to the app root.\r\nSo\r\n`    @defer(on timer(1000))\r\n    {\r\n      <has-material\/>\r\n      <a [routerLink]=\"'.\/'\" >Link One<\/a>\r\n    }` routes to the root.\r\n    \r\n![image](https:\/\/github.com\/angular\/components\/assets\/38742354\/6c4a3721-471e-4a6d-9615-ed12408e5955)\r\n\n\n### Reproduction\n\nStackBlitz link: https:\/\/stackblitz.com\/edit\/stackblitz-starters-prh2zk\r\nSteps to reproduce:\r\n1. Have a RouterLink in a defer block that has a relative route\r\n2. Give it a sibling that imports from Material\r\n\n\n### Expected Behavior\n\nThe router link route should be relative to the current route.\n\n### Actual Behavior\n\nThe router link route is from the root. The 'ActiveRoute' seems to be incorrect.\n\n### Environment\n\n- Angular: >= 17.2.4\r\n- CDK\/Material: 17.2.2\r\n- Browser(s): edge, chrome\r\n- Operating System (e.g. Windows, macOS, Ubuntu): Windows\r\n","comments":["This seems like either a framework or router issue. Material doesn't use the router at all. Transferring to the framework repo.","Likely related to the injector construction of `@defer`.","I could narrow it down a bit: \r\n\r\nThe `ActivatedRoute` has an undefined route when in a defer block and having a import (whatever import). \r\n\r\nrepro: https:\/\/stackblitz.com\/edit\/angular-repro-54864 ","From what I tested in above stackblitz, the issue was introduced in v17.2.3 in this PR https:\/\/github.com\/angular\/angular\/pull\/52881\r\nFor us this issue blocks updating angular.\r\n\r\nLater edit:\r\nFrom my tests changing in `package\/core\/src\/defer\/instructions.ts:541` at this line https:\/\/github.com\/angular\/angular\/pull\/52881\/files#diff-482e2c11ba4f4436bf8138f50b7ae5927cee883230d874f0b94e475270287abcR541 from `parentEnvInjector` to `parentInjector` fixes the issue.","@NachmanBerkowitz thanks for reporting the issue.\r\n\r\nWe found the origin of the problem and we are working on a fix. There are a couple first PRs created with the necessary refactoring (#54903 and #54907) and we'll need create a couple more PRs that would fix the issue. There is no exact ETA at this moment, but the final fix would likely be available in one of the 17.3.x releases."],"labels":["area: router","area: core","core: di","P2","bug","core: defer"]},{"title":"Using viewChild\/viewChildren with private property should be an error","body":"### Which @angular\/* package(s) are the source of the bug?\n\ncore\n\n### Is this a regression?\n\nNo\n\n### Description\n\nUsing a private property (e.g. `#children`) with `viewChildren()` or `viewChild()` will silently fail, and never update the counts. This is likely also the same for `contentChild()` and `contentChildren()`. This also means that retrieving the signal in an `effect()` will also never trigger outside of the initial run.\r\n\r\nCurrent workaround is to use `private myProp = viewChildren('selector');`, which will work as intended while still hiding the property from being public.\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/stackblitz.com\/edit\/stackblitz-starters-lsgmpz?file=src%2Fmain.ts\n\n### Please provide the exception or error you saw\n\n```true\nA `viewChildren()` on a public property (`elements`) will log 1, while a `viewChildren()` on private property (`#elements`) will log 0.\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular: 17.3.0\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1703.0\r\n@angular-devkit\/build-angular   17.3.0\r\n@angular-devkit\/core            17.3.0\r\n@angular-devkit\/schematics      17.3.0\r\n@schematics\/angular             17.3.0\r\nrxjs                            7.8.1\r\ntypescript                      5.3.3\r\nzone.js                         0.14.4\n```\n\n\n### Anything else?\n\n_No response_","comments":["This shouldn't be allowed by the compiler in the first place. I believe we want to enforce that such properties are at least `protected`.","That's perfectly fine to produce an error, if unsupported. It was just a headache to find out the reason why the code was not working \ud83d\ude05"],"labels":["bug","core: reactivity","cross-cutting: signals"]},{"title":"adev: Local packages not linked properly for development","body":"Unlike with `aio`, `adev` only links top-level `@angular\/` packages to their npm archives from `HEAD`. Transitive dependencies are not properly updated, like we do for AIO\u2014 this means that `adev` may run with older versions of the Angular compiler because e.g. the CLI devkit would have their own transitive dependency. \r\n\r\nThis can cause subtle build issues when making changes in the compiler. We should investigate if this is still needed, but not throw away the effort put into AIO:\r\n\r\nhttps:\/\/github.com\/angular\/angular\/blob\/700c0520bb638952ba41a8d8260cf12afb078c0e\/aio\/local_packages_util.bzl#L15-L25\r\n\r\nAdditional context: https:\/\/github.com\/angular\/angular\/commit\/6cc325601852cb822708c35c8bb2f3b9ef139c79\r\n","comments":[],"labels":["P3","area: adev"]},{"title":"feat(core): add support for fallback content in ng-content","body":"Adds the ability to specify content that Angular should fall back to if nothing is projected into an `ng-content` slot. For example, if we have the following setup\r\n\r\n```\r\n@Component({\r\n  selector: 'my-comp',\r\n  template: `\r\n    <ng-content select=\"header\">Default header<\/ng-content>\r\n    <ng-content select=\"footer\">Default footer<\/ng-content>\r\n  `\r\n})\r\nclass MyComp {}\r\n\r\n@Component({\r\n  template: `\r\n    <my-comp>\r\n      <footer>New footer<\/footer>\r\n    <\/my-comp>\r\n  `\r\n})\r\nclass MyApp {}\r\n```\r\n\r\nThe instance of `my-comp` in the app will have the default header and the new footer.\r\n\r\n**Note:** Angular's content projection happens during creation time. This means that dynamically changing the contents of the slot will not cause the default content to show up, e.g. if a `if` block goes from `true` to `false`.\r\n\r\nFixes #12530.","comments":[],"labels":["action: review","area: core","target: major","detected: feature"]},{"title":"Automatic migration for RouterTestingModule to provideRouter([]) or RouterModule","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\nrouter\r\n\r\n### Description\r\n\r\nIf a project upgrades to Angular 17.3.0, RouterTestingModule's deprecation (#54466) will cause a ton of warnings\/errors if that project has linter rules against deprecated APIs.  Can Angular provide an official migration for this?\r\n\r\n### Proposed solution\r\n\r\nAutomatically migrate from this:\r\n\r\n```ts\r\nimports: [\r\n  ...\r\n  RouterTestingModule.withRoutes([]),\r\n  ...\r\n],\r\n```\r\n\r\nto this if the component is not standalone:\r\n\r\n```ts\r\nimports: [\r\n  ...\r\n  RouterModule.forRoot([]),\r\n  ...\r\n],\r\n```\r\n\r\nor to this if the component is standalone:\r\n\r\n```ts\r\nproviders: [\r\n  ...\r\n  provideRouter([]),\r\n  ...\r\n],\r\n```\r\n\r\nand fix the relevant import statements.\r\n\r\n### Alternatives considered\r\n\r\nManually migrate everything.","comments":["There will be a migration before the api is removed, which could be v19 or later. It\u2019s not a high priority item for the team so a community contribution would speed things up here.\r\n\r\nThe most straightforward thing to do would be to directly replace with RouterModule.forRoot in all cases. To keep more tests passing, provideLocationMocks could be added to providers but it\u2019s really be better to update test where possible instead. Some tests may fail for a couple reasons:\r\n\r\n- expected location path to be \u2018\u2019 but was \u2018\/\u2018 (or the other way around, I don\u2019t recall offhand). I would recommend just updating those assertions. \r\n- your test depends on SpyLocation. You would need to add provideLocationMocks to the TestBed providers for this or decide how to remove the dependency. \r\n\r\nCan you do a find\/replace in your project and report back with the results?","I did a find\/replace in one of my public projects: https:\/\/github.com\/JasonWeinzierl\/BHS.NET\/commit\/31f812c181e4408d76195ef51f969db26cec7675\r\n\r\nI'm not generally doing a lot of unit testing around specific routing features, mostly just needing the import to ensure `[routerLink]` is a known directive.  So nearly everything in my particular use case got replaced with just `RouterModule`, and areas that complained about missing `ActivatedRoute` I used `RouterModule.forRoot([])` instead."],"labels":["area: router"]},{"title":"refactor(compiler): Do not extract internal methods.","body":"internal methods are not exposed to end users and should not be extracted.\r\n\r\nRelated issue: #52663 ","comments":["Deployed adev-preview for d61d03ab94774358b12a249c01c7c8dbf1b15a4d to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54850-adev-prev-e2kbg62h.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->"],"labels":["adev: preview"]},{"title":"docs: fix injector type typo","body":null,"comments":[],"labels":["area: docs"]},{"title":"fix(compiler): improve error message for control flow and content pro\u2026","body":null,"comments":[],"labels":["area: compiler"]},{"title":"Button doesn't display in component","body":"### Which @angular\/* package(s) are the source of the bug?\n\ncommon, Don't known \/ other\n\n### Is this a regression?\n\nYes\n\n### Description\n\nI am following the instructions for the housing tutorial.\r\nI got to the end of lesson 3 but there are important differences between what I see in the browser and what I should be seeing. \r\n\r\n1. The button that is supposed to be in the home component doesn't show at all\r\n2. There is supposed to be a border around the input box but that also doesn't show.\r\n\r\nThe same result in edge, firefox and chrome\r\n![angular_screen](https:\/\/github.com\/angular\/angular\/assets\/10349413\/266ca9cb-195c-43f4-ab17-3d05e81e9c46)\r\n\n\n### Please provide a link to a minimal reproduction of the bug\n\nInstall versions as below. Follow instructions to the end of part 3.\n\n### Please provide the exception or error you saw\n\n```true\n1. The button that is supposed to be in the home component doesn't show at all\r\n2. There is supposed to be a border around the input box but that also doesn't show.\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nNode v20.11.0\r\nAngular cli 17.2.3\r\nSchematics\/Angular 17.2.3\r\nTypescript 5.3.3\n```\n\n\n### Anything else?\n\n_No response_","comments":["It turns out this is to do with the styles.css file. In the examples they start with a styles.css which has values. Part of this file sets a PrimaryColor value. If there isn't a value for PrimaryColor the button is white on a white background ie invisible. \r\n\r\nHowever, I can't find anything in the instructions to populate this file. If you are creating a new project the file is empty and so the button is invisible. \r\n\r\nTherefore you might want to add something to populate this file. Otherwise there will be many like me (for a bit), who think Angular is broken.","It sounds like you started a brand new project instead of starting by downloading the \"default\" app like the tutorial suggests. The default app includes the `styles.css` file with the `--primary-color` value already defined for you (and more).\r\n\r\nHowever, the download functionality appears to be incomplete ever since commit https:\/\/github.com\/angular\/angular\/commit\/c4de4e1f894001d8f80b70297c5e576f2d11ec6f because the download no longer includes the necessary config files (tsconfig.ts, package.json, angular.json, etc.). If these _were_ included, the `styles.css` file would already be configured as the global stylesheet for you, as shown here in the now-deleted file: https:\/\/github.com\/angular\/angular\/blob\/8d58595478f0e9fcadbbd9ff21375e6875a9ef37\/adev\/src\/content\/tutorials\/common\/angular.json#L51\r\n\r\nKinda related: #53283, which started as a separate issue but the recent comments are talking about the missing config files.\r\n\r\nI'm not sure if the solution is to partially undo https:\/\/github.com\/angular\/angular\/commit\/c4de4e1f894001d8f80b70297c5e576f2d11ec6f by restoring the `common` folder or if there's some other way to get these files now.\r\n\r\nIf the `common` folder that contains all the common config files is not restored, then we should at least update the README that still references it: https:\/\/github.com\/angular\/angular\/tree\/main\/adev\/src\/content\/tutorials#common","Yes that's what happened. Maybe its just me that went wrong but I doubt it. Since the styles file is the only difference between starting a new project and downloading the other project, you could possibly add a note for those, like I did who are starting from their own project."],"labels":["help wanted","good first issue","P3","area: adev"]},{"title":"Add observed property to OutputEmitterRef","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nWith the `@Output` decorator, I used to check the `observed` of the `EventEmitter` (because it inherits `Subject`) to enable\/disable some features.\r\n\r\nFor example, `<lu-select (clueChange)=\"...\" \/>` would display a search bar in `LuSelect` component but `<lu-select \/>` would not.\r\n\r\nThis solution seems elegant as it avoid an additional input that would lead to unwanted cases:\r\n\r\n- Both `<lu-select enableClue (clueChange)=\"...\" \/>` and `<lu-select \/>` would work\r\n- `<lu-select (clueChange)=\"...\" \/>` would be useless because the search bar is not disabled because `enableClue = false`\r\n- `<lu-select enableClue \/>` would be useless because the search bar is displayed, but nobody listen to its value\n\n### Proposed solution\n\nAdd a `getter`property `observed` in [OutputEmitterRef](https:\/\/angular.dev\/api\/core\/OutputEmitterRef)\r\n\r\n([in this file](https:\/\/github.com\/angular\/angular\/blob\/edc1740d7e7f0296c719c7176c24031f55ae1487\/packages\/core\/src\/authoring\/output\/output_emitter_ref.ts#L33))\r\n\r\n```ts\r\nexport class OutputEmitterRef<T> implements OutputRef<T> {\r\n  private listeners: Array<(value: T) => void>|null = null;\r\n\r\n  get observed(): boolean {\r\n    return !!this.listeners?.length;\r\n  }\r\n\r\n  \/\/...\r\n}\r\n```\n\n### Alternatives considered\n\nReplace existing usages of `emitter.observed` by inputs.","comments":["If we did expose such a property, it would probably be a `Signal<boolean>`.","It would be even better!","What about `output.required`? which would error if no listeners would be registred?  - of course I can create separate issue if needed, but it seems like aother solution to the same problem. ","The output would need to be required only when an input has a specific value (if I understand what is on your mind)","Yeah, Now I see difrence, in your proposition it\u2019s more about conditional required based on value of  some input \/ directive. So yeah I will open new issue as both solutions solve difrent issues. Sory for clogging this issue ","Yeah, this is one of the follow-up's we did consider and would implement using a `Signal<boolean>` as Alex pointed out.\r\n\r\nFor the use-cases, we did see a similar pattern, especially with expensive subscriptions only being triggered upon \"interest from the parent\".\r\n\r\nThe initial thinking still was that an input likely makes more sense here. Subjectively, it would seem confusing to me if the behavior of a component changes based on an output that I subscribe to. That is because \"inputs\" can \"configure\" the directive, but outputs simply emit values to the parent conceptually. It's more explicit and keeps the mental model simpler IMO.\r\n\r\nIn either case, adding such a signal to OutputRef is trivial.","One use case for this is wrapping third party (non angular) libraries. For example if such library allow binding to mouse move event and I want to allow my component user to add a (for example) chart mouse move output I will need to always listen to the third party event. If I could know if output was declared I could optimize and won't listen to that event unnecessarily.\r\nAn input here doesn't make sense as the one using my component shouldn't configure internal optimization based on how the wrapped third party works."],"labels":["feature","area: core","core: inputs \/ outputs"]},{"title":"Build visualize  not working as mentioned in Doc","body":"### Describe the problem that you experienced\n\nAngular Build Stats Json \n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.io\/cli\/build\n\n### Describe what you were looking for in the documentation\n\n![image](https:\/\/github.com\/angular\/angular\/assets\/29145245\/74662cbd-80c1-4251-aead-ba56f1c406d0)\r\n\r\n\r\n\r\n\n\n### Describe the actions that led you to experience the problem\n\nStats genentration had a issue since build analyzer consider as invalid format\n\n### Describe what you want to experience that would fix the problem\n\n_No response_\n\n### Add a screenshot if that helps illustrate the problem\n\nAfter uploading stats.json file\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/29145245\/4efc4270-4802-4fb8-b4c7-be5640659d09)\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["The documentation is geared towards the `application` builder, whereas it appears you're using the Webpack-based `browser` builder. This should probably be clarified in the docs."],"labels":["P4","area: adev","area: docs"]},{"title":"Router deactivate failure results in page reload in computed mode","body":"### Which @angular\/* package(s) are the source of the bug?\n\nrouter\n\n### Is this a regression?\n\nNo\n\n### Description\n\nwith routerModule as default, a deactivate failure, would still remove the history state causing issues with back button and swipe back on mobile. \r\n\r\nas per instructions, i changed to `RouterModule.forRoot(AppRoutes, { canceledNavigationResolution: 'computed' })`\r\nwhich results in history being reset on deactivate failure, however the page also refreshes causing form data and state to be reset. my understanding is that default deferred update strategy and sameURLNavigation 'ignore' should have caused the route to not be reloaded, however this is not the case.\n\n### Please provide a link to a minimal reproduction of the bug\n\n_No response_\n\n### Please provide the exception or error you saw\n\n```true\nrouterModule as default:\r\n\r\nRoute Page 1 -> Page 2\r\nRoute Page 2 -> Page 3\r\nBack & deactivate Failure = history state Page 2\r\n\r\ncanceledNavigationResolution 'computed':\r\n\r\nRoute Page 1 -> Page 2\r\nRoute Page 2 -> Page 3\r\nBack & deactivate Failure = history state Page 3, but refresh page 3\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 16.1.6\r\nNode: 18.18.0\r\nPackage Manager: npm 9.8.1\r\nOS: darwin arm64\r\n\r\nAngular: 16.1.7\r\n... animations, common, compiler-cli, core, language-service\r\n... platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1601.6\r\n@angular-devkit\/build-angular   16.1.6\r\n@angular-devkit\/core            16.1.6\r\n@angular-devkit\/schematics      16.1.6\r\n@angular\/cli                    16.1.6\r\n@schematics\/angular             16.1.6\r\nrxjs                            7.8.1\r\ntypescript                      5.1.6\r\nzone.js                         0.13.1\n```\n\n\n### Anything else?\n\n_No response_","comments":["> my understanding is that default deferred update strategy and sameURLNavigation 'ignore' should have caused the route to not be reloaded, however this is not the case.\r\n\r\nnot quite in this case because the URL _is_ changing so the route is processed. This now depends on what you\u2019re doing with the `RouteReuseStrategy`. Can you provide a reproduction?"],"labels":["area: router"]},{"title":"refactor(core): clear Dirty flag even in checkNoChanges pass","body":"There are two incorrect statements\/assumptions with the existing code:\r\n\r\n1. We don't want components to behave differently depending on whether check no changes is enabled or not.\r\n\r\nThis is not something that can be prevented unless the flag states are saved before running `checkNoChanges` and restored when finished. It is entirely possible that a `checkNoChanges` pass marks views for check. This would result in `checkNoChanges` _hiding_ issues because components that were not marked for check before the pass now are and will be refreshed in the next change detection round.\r\n\r\n2. Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to refresh a `NgClass` binding should work\r\n\r\nThis _does not_ work even today. First, this results in `ExpressionChanged...` errors when the host view is reachable during the `checkNoChanges` pass. Second, even in production, this would require that the host view only has ancestors with `Default` change detection. If any ancestor is `OnPush`, then its `Dirty` flag would have been cleared at the end of change detection, preventing the host view (and class binding) from being reachable in the next round of change detection.\r\n","comments":[],"labels":["action: review","area: core","target: major","action: global presubmit"]},{"title":"docs: remove AIO guides","body":null,"comments":["Deployed adev-preview for 6d1328b2bec964c13f4ae6f657ca87d7b5ffdddd to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54829-adev-prev-q0wbht03.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->","@JeanMeche Anything linking to these docs will be broken right? Is there any plan to link to the new content instead?","AIO will not be updated anymore from the main branch. If changes should happen they will land in the `17.3.x` branch. \r\nRemoving those files will have no effects. ","That makes sense. I am just worried about all of the links in the world pointing to aio. "],"labels":["action: merge","target: major","PullApprove: disable","area: docs","adev: preview"]},{"title":"docs: resolve extra padding on tutorial editor","body":"As of this commit, there is a visual discrepancy between the height of the content on the left compared to the separator and editors on the right. It appears that the cause of this is an additional computation of layout padding which is unnecessary for these particular elements.\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix: CSS styles on docs\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nThere is a spacing discrepancy which you can see in the bottom right.\r\n\r\n<img width=\"1920\" alt=\"Screenshot 2024-03-12 at 10 12 06\u202fAM (2)\" src=\"https:\/\/github.com\/angular\/angular\/assets\/4836334\/88a84c89-86b0-410a-a7d7-a10d95039421\">\r\n\r\n\r\nIssue Number: N\/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nIt will remove the extra padding causing the gap.\r\n\r\n<img width=\"1920\" alt=\"Screenshot 2024-03-12 at 10 37 46\u202fAM (2)\" src=\"https:\/\/github.com\/angular\/angular\/assets\/4836334\/7310aaa5-bac6-4218-b516-a8864abb061b\">\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["Deployed adev-preview for 4bcc7ec3adf06a3ca8fd2632897527a84bbdd603 to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54828-adev-prev-3sfw69y7.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->"],"labels":["action: review","area: docs","adev: preview"]},{"title":"Form control values do not get set with trailing space, making email validator difficult to diagnose","body":"### Which @angular\/* package(s) are the source of the bug?\n\nforms\n\n### Is this a regression?\n\nNo\n\n### Description\n\nWhen calling setValue() on a FormControl with a value that contains a trailing space, the input element value does not receive that trailing space (however the FormControl value will have the trailing space). This can make it difficult on email form controls with the email validator, as a trailing space will fail the email validator, but the input value does not have the trailing space. To \"fix\" the issue, the user needs to modify the email in the input in anyway (add a space, oddly enough, work) to reset the FormControl value to something that matches the input value.\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/stackblitz.com\/edit\/stackblitz-starters-bhq16g?file=src%2Fmain.ts\n\n### Please provide the exception or error you saw\n\n```true\nThe input value does not match the FormControl value.\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.2.3\r\nNode: 18.18.0\r\nPackage Manager: npm 10.2.3\r\nOS: linux x64\r\n\r\nAngular: 17.2.4\r\n... animations, common, compiler, compiler-cli, core, forms\r\n... platform-browser, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1702.3\r\n@angular-devkit\/build-angular   17.2.3\r\n@angular-devkit\/core            17.2.3\r\n@angular-devkit\/schematics      17.2.3\r\n@angular\/cli                    17.2.3\r\n@schematics\/angular             17.2.3\r\nrxjs                            7.8.1\r\ntypescript                      5.3.3\r\nzone.js                         0.14.4\n```\n\n\n### Anything else?\n\nI don't know if it is the browser not setting the trailing space, or something internal to the FormControl setValue() call that does not set the trailing space, but this is certainly creating an odd situation, as shown in the StackBlitz reproduction.","comments":["Just a note: this seems to be specific to inputs of type \"email\". If the type of the input is \"text\", the space is present in the input value.\r\nAnd this happens in both Chrome and Fireforx","This is a super weird case, for sure. ","Let me add some context to this, guys.\r\n\r\nAccording to [HTML specs](https:\/\/html.spec.whatwg.org\/multipage\/input.html#email-state-(type=email)) of `type=email` (this is for non-`multiple` mode; `multiple` also has similar behavior, a bit different tho):\r\n\r\n> The value sanitization algorithm is as follows: Strip newlines from the value, then strip leading and trailing ASCII whitespace from the value.\r\n\r\nWhen [value sanitization algorithm](https:\/\/html.spec.whatwg.org\/multipage\/input.html#value-sanitization-algorithm) is applied (there are some other cases on that page too, but this one is most relevant):\r\n\r\n> When the *value content attribute is added, set, or removed*, if the control's dirty value flag is false, the user agent must set the value of the element to the value of the value content attribute, if there is one, or the empty string otherwise, and *then run the current value sanitization algorithm*, if one is defined.\r\n\r\nSo, basically, as with `type=number` etc., best way to handle this is to avoid using anything other than `type=text` (with notable `password`, `radio`, `file` etc. exceptions).\r\n\r\nNot 100% sure, but maybe specialized `ControlValueAccessor` for `input[type=email][formControlName]` etc. is the correct way to resolve this?"],"labels":["area: forms","forms: Controls API"]},{"title":"Alias `afterRender` to `afterEachRender`","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\n@angular\/core\r\n\r\n### Description\r\n\r\n@angular\/core `afterRender` and `afterNextRender` are great however it is too easy to miss the distinction during a peer review and this can have a big effect on performance.\r\n\r\nIs it possible to alias `afterRender` to `afterEachRender` or similar (I understand that it is too late to change names now). \r\nThe new name would be clear that the code attached will run multiple times (as opposed to once only if using afterNextRender).\r\n\r\n### Proposed solution\r\n\r\nRename `afterRender` to `afterEachRender`\r\n\r\n### Alternatives considered\r\n\r\nCurrently if used I asked the devs to `import { afterRender as afterEachRender }`. We could add a lint task to ensure this is done.\r\n\r\nBTW I don't get a chance to say this elsewhere - so will say it here - thank you for all your work. Every change your team makes is so positive.","comments":["I'd go with afterEachRefresh -> as Angular refreshes bindings and doesn't re-render. ","I always wondered why `AfterNextRender` is not named something like `AfterFirstRender` or something. \r\n\r\nIt's very confusing to distinguish between the AfterNextRender and AfterRender, my colleague keeps forgetting what is what - with quite big impact. "],"labels":["area: core"]},{"title":"feat(core): add support for i18n hydration ","body":"Add support for hydrating i18n blocks. This is accomplished by serializing information about selected ICU cases for a block during server-side rendering.\r\n\r\nDuring hydration, this data is read and is used to traverse both an AST of the translated message and the DOM, in parallel, to map each LView with an RNode.\r\n\r\nFinally, this mapping is used while nodes are being created (either via i18n or their respective instructions) to locate existing nodes.\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [x] Tests for the changes have been added (for bug fixes \/ features)\r\n- [x] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N\/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["Very much looking forward to this being merged\r\n\r\n![OPcxBQchmR2EYK7abQ-ezgif com-optimize](https:\/\/github.com\/angular\/angular\/assets\/94828331\/c6a66b51-17d6-4d7d-b4dc-4f0bde869285)\r\n","@AndrewKushnir Thanks for your detailed feedback. All of the feedback should be addressed (save for the nit that I left a comment on), so this should be ready for another review when you get a chance.","@AndrewKushnir RE: the main algorithm, I made a slight change to it after your initial review. Previously, we would only store elements in `i18nMap` if they were successfully found during our \"pre-hydration\" pass, otherwise we would consider them disconnected.\r\n\r\nThat behavior was incorrect: these missing nodes would be recreated during hydration on account of incorrectly being considered disconnected, silently hiding the fact that they were missing from the DOM.\r\n\r\nNow, `i18nMap` will store `null` values if an expected node isn't present, and we only consider nodes to be disconnected when they should be (i.e. because they are in an inactive ICU branch). This way, the downstream error handling when nodes are being hydrated will correctly encounter the missing node and provide the right feedback in development mode."],"labels":["action: review","area: i18n","target: minor","detected: feature","core: hydration"]},{"title":"Automatic migrations for signal inputs, outputs and view queries","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nAngular is moving towards signal inputs and function-based outputs. Should Angular provide official migrations for these types of migrations? \r\n\r\nIn ngxtension library we already have added support for migrating signal inputs and there's a [PR](https:\/\/github.com\/nartc\/ngxtension-platform\/pull\/301) in the works for the outputs (https:\/\/github.com\/nartc\/ngxtension-platform\/pull\/301) \r\n\r\nhttps:\/\/ngxtension.netlify.app\/utilities\/migrations\/signal-inputs-migration\/\r\n\r\nShould we add those migrations to Angular itself, or it's okay if we keep them in a community library. \n\n### Proposed solution\n\nMigrate the migrations from the community library to Angular itself \n\n### Alternatives considered\n\nKeep them in community library only.","comments":["tl;dr; is that we would _love_ to provide an automatic migration but still debating scope \/ what can be automatically covered. \r\n\r\nWe are actively discussing the topic of migrations for singal-based inputs, outputs and queries. Outputs are fairly straightforward but inputs and queries might be more involved depending on the usage patterns. Some examples:\r\n* with inputs we don't need `ngOnChanges` as a `computed` is a better replacement - should it be migrated automatically?\r\n* queries no longer expose `QueryList` so the usage patterns are potentially different if people subscribe to `changes`\r\n\r\nAlso, we would love to collaborate with the community on the migration so if anyone is interested in helping out - please let us know! "],"labels":["area: migrations","core: reactivity","cross-cutting: signals"]},{"title":"Issue FIx: confusing sentence #54792","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N\/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https:\/\/github.com\/angular\/angular\/pull\/54799\/checks?check_run_id=22481583438) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.","Hi, thank you for helping us improve the doc. \r\n\r\nCould you sign [the CLA](https:\/\/github.com\/angular\/angular\/pull\/54799\/checks?check_run_id=22481583438) and have a look at our [commit message guidelines](https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit) and reword your commit message. Thank you. "],"labels":["area: adev"]},{"title":"refactor(docs-infra):  move gif to display","body":"To display the image correctly, swap the image from the folders\r\n\r\nFixes  #54778\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number:  #54778\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["Deployed adev-preview for 3ed0fb34232dcd9db3b7cb9736441c8e4ae4ed50 to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54795-adev-prev-91dyz5k0.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->","@JeanMeche \r\nI have made a test solution to this problem, but this solution will break the image path for aio.\r\nI can see potentially 2 weak in my opinion solutions:\r\nAdd a new version of the` completion.json `file with the correct path `(for adev)`, from which the adev version will be built.\r\nAdd a second image, the final version of the file will have one image that won't load for adev and a second image that will load for aio and vice-versa.\r\nThanks for your time and the opportunity to contribute in Angular community.","It's an acceptable alternative I believe since we're planning to deprecate\/remove the angular.io code base now that we have branched for v18. ","> It's an acceptable alternative I believe since we're planning to deprecate\/remove the angular.io code base now that we have branched for v18.\r\n\r\nSo, i can commit second solution?","fwiw I'd keep the change you already maid but we'd would still need to disable tha AIO jobs first. It's a pending change at #54765","We've unplugged the CI tests related to AIO and fixed the failing CI test. It should solve the CI failing on the next push. \r\n\r\nCould you squash your commits into a single one ? ","> We've unplugged the CI tests related to AIO and fixed the failing CI test. It should solve the CI failing on the next push.\r\n> \r\n> Could you squash your commits into a single one ?\r\n\r\nDone, thank you in advance"],"labels":["adev: preview"]},{"title":"docs(docs-infra): improve CLI docs ","body":"Pending angular\/dev-infra#1831\r\n\r\nfixes #54767\r\n","comments":["Deployed adev-preview for e8f2a0878e41bc2a95ad587ba23b1accfad0d755 to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54794-adev-prev-lnuocgx4.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->"],"labels":["action: merge","target: patch","area: docs","adev: preview"]},{"title":"docs: fix link to NPM release cycle page","body":"Fixes #54787","comments":["@JeanMeche I believe this does not fix issue #54792. #54787 is the issue you are targeting. "],"labels":["action: merge","target: major","area: docs"]},{"title":"Angular 17 Tutorial : confusing sentence","body":"### Describe the problem that you experienced\n\nIn the \"essentials\" section, there is a confusing sentence which affirms : \" _In this guide, we'll take a look at two primary categories of user interaction: event handling **and forms**._\"\r\n\r\nNevertheless, in this section the tutorial only discusses about event handling not forms.\r\n\r\nAfter some research, I have found this tutorial about forms : \"https:\/\/angular.dev\/guide\/forms\" but when we arrive in the \"Essentials\" section, this form tutorial is not tackled.\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.dev\/essentials\/handling-user-interaction\n\n### Describe what you were looking for in the documentation\n\nI was looking for a sub-section about forms or a link which redirects to the specific form tutorial.\n\n### Describe the actions that led you to experience the problem\n\nFollow the \"essentials\" path to learn Angular.\n\n### Describe what you want to experience that would fix the problem\n\n_No response_\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":[],"labels":["help wanted","good first issue","P3","area: adev"]},{"title":"allow disabled formgroup at initialization","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\n_No response_\n\n### Description\n\nCurrently to disable a formgroup. You first initialize it and then call form.disable().\n\n### Proposed solution\n\nIt would be interesting to move the disabled property to the AbstractControlOptions interface to allow for example to disable a formgroup at initialization.\n\n### Alternatives considered\n\nNo alternatives","comments":[],"labels":["feature","area: forms"]},{"title":"Change interpolation characters in the @component decorator","body":"### Which @angular\/* package(s) are the source of the bug?\n\ncompiler\n\n### Is this a regression?\n\nYes\n\n### Description\n\nWhen I changed interpolation characters in the @component decorator, it works fine.\r\n\r\n<img width=\"417\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/37916625\/b0459e50-5295-42e9-abac-466466e214c9\">![image](https:\/\/github.com\/angular\/angular\/assets\/37916625\/87c6b0ab-ad38-4b90-9211-8c3a81ed21d8)\r\n\r\nThis means that I can use {{}} freely without any errors, however, it show the following error\r\n<img width=\"383\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/37916625\/81a79668-66ae-4996-a9d5-7375a389904b\">\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/37916625\/8a5d10f9-d826-4d75-beb1-60a67ecff40f)\r\n\r\neven if I tried to use one { only,\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/37916625\/040cd8dc-323c-4047-b659-42ff7e70e771)\r\n<img width=\"394\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/37916625\/43f5bbd4-478d-4982-9f9b-18c1379f1aa0\">\r\n\r\n\n\n### Please provide a link to a minimal reproduction of the bug\n\n_No response_\n\n### Please provide the exception or error you saw\n\n```true\nApplication bundle generation failed. [0.054 seconds]\r\nX [ERROR] NG5002: Invalid ICU message. Missing '}'. [plugin angular-compiler]\r\n\r\n    src\/app\/app.component.ts:10:24:\r\n      10 \u2502               <h1>{<\/h1>`,\r\n         \u2575                         ^\r\n\r\n\r\nX [ERROR] NG5002: Unexpected character \"EOF\" (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.) [plugin angular-compiler]\r\n\r\n    src\/app\/app.component.ts:10:24:\r\n      10 \u2502               <h1>{<\/h1>`,\r\n         \u2575                         ^\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.1.3\r\nNode: 20.10.0\r\nPackage Manager: npm 10.2.5\r\nOS: win32 x64\r\n\r\nAngular: 17.1.3\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1701.3\r\n@angular-devkit\/build-angular   17.1.3\r\n@angular-devkit\/core            17.1.3\r\n@angular-devkit\/schematics      17.1.3\r\n@schematics\/angular             17.1.3\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.2\n```\n\n\n### Anything else?\n\n_No response_","comments":["ICUs are not interpolations, so their syntax remains unchanged when setting the interpolation pattern. AFAICS it's not currently possible to disable ICU parsing.","OK. But changing interporlation characters, with avoiding to use curly braces is useless."],"labels":["area: core","area: compiler","core: basic template syntax"]},{"title":"Broken Link on Angular.IO","body":"### Describe the problem that you experienced\n\nClicking the link to Node.js is showing 404\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/16070192\/66d1f799-5cc1-4476-ae79-7fb4995dd8d1)\r\n\r\nNavigates to: \r\n![image](https:\/\/github.com\/angular\/angular\/assets\/16070192\/3d253fe2-4298-41b6-bfea-a998a48ef87d)\r\n\r\n\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.io\/guide\/setup-local#install-the-angular-cli\n\n### Describe what you were looking for in the documentation\n\n_No response_\n\n### Describe the actions that led you to experience the problem\n\n1. Navigate to https:\/\/angular.io\/guide\/setup-local#install-the-angular-cli\r\n2. Click on \"active LTS or maintenance LTS\" node link\r\n3. 404 not found\n\n### Describe what you want to experience that would fix the problem\n\nCould be an issue with Nodes site\/servers being down but clicking the link should present me with node.js install options. \n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n```true\nMicrosoft Edge Version 122.0.2365.66 (Official build) (64-bit)\n```\n\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["This should arguably be reported with the Node site maintainers, as the URL was changed to be locale-aware (it's now https:\/\/nodejs.org\/en\/about\/previous-releases) and this change has caused all incoming links to the old URLs to break."],"labels":["area: aio","state: has PR","P4","area: docs"]},{"title":"Support for setting Input Signals programmatically for projected content children","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nWith Input signals they are read-only which forces any consumer of the component to have to set the Inputs through the template.   For some situations with a parent\/child relationship (such as projected content) the parent needs to be able to programmatically set values of the Inputs as they don't have access to set the template bindings.\r\n\r\nAs a component library author there are often cases where we allow something like an `icon` component to be projected.  The `icon` component has an input that allows several sizes.  When the `icon` is used in a specific component in a projection slot that component can query through a `ContentChildren` query.  That component can further set the value of the `@Input` to \"enforce\" a given size.  This \"parent\" component can't set the value through the template bindings as it doesn't have template access to projected content, just component class instances.\r\n\r\nHere's a non-working example of where a `parent` component allows projected `icon` components.  It is trying to query for `icon` content and then set the `size` input.  We've been able to accomplish in the past with `@Inputs` and the getter\/setter pattern.  We'd love to be able to move to Input signals but this blocks us.\r\n\r\nhttps:\/\/stackblitz.com\/edit\/stackblitz-starters-g5jzxx?file=src%2Fcomponents%2Fparent%2Fparent.component.ts\r\n\r\n\n\n### Proposed solution\n\nSome way for consumers to set the value of an Input programmatically.  I realize they are read-only but this breaks the notion of a component not knowing how it is consumed and used.  Consumers are allowed to set Inputs through the template OR through the component class instance with a reference.  \n\n### Alternatives considered\n\nWe can continue to use a getter\/setter syntax to fake Input signals.  Something like this:\r\n\r\n```\r\n@Input() get size(): number {\r\n  return this._size;\r\n}\r\n\r\nset size(value: number) {\r\n   this._size.set(value);\r\n}\r\nprivate _size = signal();\r\n\r\n```\r\n\r\nIt would be nicer and easier to maintain if we can utilize Input signals programmatically. \r\n\r\n\r\nModel Inputs are also a potential option\r\n\r\nI don't feel that the `Model` inputs are the solution here as that would mean all of our Inputs would have to be Model inputs because as component library authors we don't know how a consumer will access our Inputs (via template or programmatically).  Whereas Model inputs more feels like it's trying to solve ControlValueAccessor stuff and not necessarily meant for this. ","comments":["One can say it is half way related to #47398\r\nAs injecting the component ref of the projected component (in this case with content child) would allow setInput usage","@Harpush is the `setInput` available automatically when using `@ContentChildren`?  I've only used it with dynamic components and still am not clear if it's currently available?","> @Harpush is the `setInput` available automatically when using `@ContentChildren`? I've only used it with dynamic components and still am not clear if it's currently available?\r\n\r\nNo it isn't. The issue I linked suggest adding it to injection of host component from directive. This issue seems half way similar as it can be solved if content child could get not the component instance but the component ref instead.","Although `setInput` seems pretty broadly typed, which might make sense with a ComponentRef but it would need to be narrower to be most useful. ","> Although `setInput` seems pretty broadly typed, which might make sense with a ComponentRef but it would need to be narrower to be most useful.\r\n\r\nThere is an open issue for better setInput types too","Would the `componentRef` still include a reference to the component class to be able to access other methods on the class that aren't inputs?\r\n","I had a similar situation, which was solved by unwrapping the Signal Input with the SIGNAL symbol and use setSignalValueFn (or something like that... typing this comment from mobile). I don't know if that's intended, but it worked :D"],"labels":["cross-cutting: signals"]},{"title":"docs: explain difference between @placeholder and @loading","body":"Add a sentence to the `@loading` block documentation that emphasizes more that the `@loading` block will replace the `@placeholder` block once the deferred view starts loading.\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #54685\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https:\/\/github.com\/angular\/angular\/pull\/54779\/checks?check_run_id=22442924375) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.","Hi, thank you for your contribution, can you have a look at the CLA and sign it ? Thank you. ","@JeanMeche I have amended the commit with my Email that has the CLA signed.","Thanks for the PR @eluchsinger! I submitted a commit to improve the phrasing on the paragraph. Let me know what you think!","@eluchsinger or @bencodezen can one of you squash the 2 commits ? And we're good to go ! "],"labels":["action: cleanup","area: docs"]},{"title":"ADEV is missing illustration on `ng completion`","body":"### Describe the problem that you experienced\r\n\r\nADEV: https:\/\/angular.dev\/cli\/completion\r\nAIO https:\/\/angular.io\/cli\/completion\r\n","comments":[],"labels":["P3","area: adev","area: docs"]},{"title":"Docs\/remove aio content2","body":"WIP Some of ADEV still relies on AIO (examples, CLI)","comments":["Deployed adev-preview for 5e9008524f4683e9f46c9e772590f8cc51ec803d to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54777-adev-prev-x22a3tie.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->"],"labels":["PullApprove: disable","area: docs","adev: preview"]},{"title":"CLI sub commands are not listed correctly in adev","body":"### Describe the problem that you experienced\r\n\r\nSub commands of the Angular CLI are not listed in adev\r\n\r\nExample\r\n\r\n|ADEV|AIO|\r\n|------------------------------\t|-------------\t|\r\n| https:\/\/angular.dev\/cli\/generate | https:\/\/angular.io\/cli\/generate|\r\n|https:\/\/angular.dev\/cli\/cache | https:\/\/angular.io\/cli\/cache|\r\n|https:\/\/angular.dev\/cli\/analytics |  https:\/\/angular.io\/cli\/cache|","comments":["Note: whilst https:\/\/github.com\/angular\/dev-infra\/pull\/1831 did try to fix listing the sub-commands, as the sub-commands options are not displayed (On the left hand side). \r\n\r\nIn addition the anchor tags example https:\/\/ng-dev-previews-fw--pr-angular-angular-54794-adev-prev-lnuocgx4.web.app\/cli\/generate#module are not working correctly.\r\n\r\n\/\/cc @JeanMeche ","Couple of other things related to sub-commands:\r\n\r\n- the sub-command aliases are not being displayed\r\n- Sub-commands snippet is not correct. Example:\r\n \r\nhttps:\/\/angular.io\/cli\/generate#component \r\n<img width=\"762\" alt=\"Screenshot 2024-03-12 at 17 27 40\" src=\"https:\/\/github.com\/angular\/angular\/assets\/17563226\/c06590e9-0da8-4ca9-bb83-0406768f49a3\">\r\n\r\nhttps:\/\/ng-dev-previews-fw--pr-angular-angular-54794-adev-prev-lnuocgx4.web.app\/cli\/generate#module\r\n\r\n<img width=\"865\" alt=\"Screenshot 2024-03-12 at 17 27 47\" src=\"https:\/\/github.com\/angular\/angular\/assets\/17563226\/72ebdb30-3c45-46c9-a9b8-631de4897590\">\r\n\r\n--- \r\n\r\n- `[options]` is being added to command that do not have options.\r\nhttps:\/\/angular.io\/cli\/cache#clean\r\n<img width=\"838\" alt=\"Screenshot 2024-03-12 at 18 36 31\" src=\"https:\/\/github.com\/angular\/angular\/assets\/17563226\/777cbdc7-5834-47f2-8edd-e1c72b43dd16\">\r\ndb30-3c45-46c9-a9b8-631de4897590\">\r\n\r\nhttps:\/\/ng-dev-previews-fw--pr-angular-angular-54794-adev-prev-lnuocgx4.web.app\/cli\/cache\r\n<img width=\"744\" alt=\"Screenshot 2024-03-12 at 18 37 31\" src=\"https:\/\/github.com\/angular\/angular\/assets\/17563226\/9a1ddf25-ad53-49a2-aec4-fdb61b24b219\">\r\n\r\n"],"labels":["P2","area: adev"]},{"title":"[adev] CLI command pages options are cluttered","body":"### Describe the problem that you experienced\r\n\r\nCurrently, the CLI options in adev appear to be cluttered compared to AIO and it's hard to identify between the different options and their value. \r\n\r\nExample\r\n\r\nhttps:\/\/angular.dev\/cli\/add\r\n<img width=\"553\" alt=\"Screenshot 2024-03-08 at 13 27 35\" src=\"https:\/\/github.com\/angular\/angular\/assets\/17563226\/c8e1545e-50a7-43c8-a0e9-b0514e82f7d7\">\r\n\r\nhttps:\/\/angular.io\/cli\/add\r\n<img width=\"815\" alt=\"Screenshot 2024-03-08 at 13 28 21\" src=\"https:\/\/github.com\/angular\/angular\/assets\/17563226\/77ec8aea-bf66-4aa7-b801-7be93f658f9e\">\r\n","comments":[],"labels":["P3","area: adev"]},{"title":"feat(common): add support for a custom EnvironmentInjector to NgComponentOutlet directive","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [x] Tests for the changes have been added (for bug fixes \/ features)\r\n- [x] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nCurrently the `NgComponentOutlet` directive does not provide a way to specify a custom `EnvironmentInjector`.\r\nFor our usecase we are using [webpack Module Federation](https:\/\/webpack.js.org\/concepts\/module-federation\/) to load a remote module into our shell application. This remote module uses a different `EnvironmentInjector`, which is a child of the shells `EnvironmentInjector`. Without being able to specify the `EnvironmentInjector` of the remote module when creating the component, the component is unable to use dependency injection for e.g. services provided as part of the remote module.\r\nIssue Number: N\/A\r\n\r\n\r\n## What is the new behavior?\r\nThis PR adds an additional `Input` to the `NgComponentOutlet` directive to provide a custom `EnvironmentInjector`.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["Hi, I'm curious what happens when you pass the environment injector as the injector input ? Could it replace the environment if it's an environment Injector ? ","> Hi, I'm curious what happens when you pass the environment injector as the injector input ? Could it replace the environment if it's an environment Injector ?\r\n\r\nWhen passing the environment injector as the injector input we are able to inject the services provided in the remote module, but we are then unable to access the component tree via DI, so e.g. we can't inject a parent component.","@JeanMeche sorry if I might be a bit impatient, but is there anything I've missed to get this PR reviewed? :sweat_smile: "],"labels":["detected: feature"]},{"title":"feat(core): add API to inject tag name of host node","body":"For ideal DOM usage, you would not unwrap an ElementRef outside of the browser. However, it's reasonable to want to find the tag name of the host node on the server, and so this introduces a `HostTagNameToken` that can be injected to read this value.\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [x] Tests for the changes have been added (for bug fixes \/ features)\r\n- [x] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N\/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nSee #50621 for additional information.\r\n","comments":["@AndrewKushnir "],"labels":["detected: feature"]},{"title":"addEventListener with AbortSignal option can cause memory leaks","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\nzone.js\r\n\r\n### Is this a regression?\r\n\r\nYes\r\n\r\n### Description\r\n\r\nOur application is using zone.js@0.14.3 outside of Angular, as a dependency of OpenTelemetry.\r\n\r\nIn our application we noticed memory leaks involving large subtrees of detached HTMLElements after updating to zone.js@0.14.3. Version 0.14.2 does not have an issue.\r\n\r\nThe issue seems to be related to the fact that zone.js registers an \"abort\" handler on the AbortSignal object passed in to the addEventListener() call and the callback it is registering captures the task in its scope. This handler is as far as I can tell never removed off the AbortSignal object.\r\n\r\nhttps:\/\/github.com\/angular\/angular\/blob\/zone.js-0.14.3\/packages\/zone.js\/lib\/common\/events.ts#L488\r\n\r\nThe big issue I see with the current implementation is that zone.js has no clue what the lifetime and ownership model is for the AbortSignal object in question or the element that is captured in the task within the callback that is never removed.\r\n\r\nIn our particular case the detached HTMLElement captured within the task is part of a larger subtree that gets removed\/detached. The signal itself is owned by some code associated with an ancestor element that out-lives the subtree that is removed, so as long as that listener callback is alive, so is the task, the element it captures, and any other elements in the detached subtree the element is still referencing via parentNode, next\/prevSibling, etc.\r\n\r\nAlso, we can't assume that this \"abort\" listener will be removed via a corresponding element's removeEventListener() call because there may never be a removeEventListener() call made ... and in most circumstances when a subtree of elements is detached, this would be ok and things would garbage collect just fine.\r\n\r\nThe issue can be observed with this simple test case:\r\n\r\n[addeventlistener-signal-bug.txt](https:\/\/github.com\/angular\/angular\/files\/14516929\/addeventlistener-signal-bug.txt)\r\n\r\nIf you load the test case into Chrome:\r\n\r\n- Press the remove button in the test case\r\n- Open the Web Inspector Memory Panel\r\n- Hit the Garbage Collect button\r\n- Trigger a Heap Snapshot\r\n\r\nIn the resulting Heap Snapshot you will notice that there are detached HTMLDiv, HTMLButton, HTMLUL, and HTMLLI elements listed.\r\n\r\nIf you remove the include of zone.js from the test case, and then repeat the steps above, you will see that the elements mentioned above are no longer listed in the Heap Snapshot, meaning they were garbage collected properly.\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\n_No response_\r\n\r\n### Please provide the exception or error you saw\r\n\r\n_No response_\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\n_No response_","comments":["Until a better solution is found,\none possible \"workaround\" to break the retainer cycle would be to use a callback that captures a WeakRef to the task instead of the task itself and then when it's triggered, call cancel() only if the task hasn't already been GC'd.\n\nUnfortunately, that workaround could still leave \"dead\" listeners on the signal object."],"labels":["regression","area: zones"]},{"title":"feat(common): add height support for custom image loaders","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [x] Tests for the changes have been added (for bug fixes \/ features)\r\n- [x] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #51723\r\n\r\n\r\n## What is the new behavior?\r\nAdd support to pass through the height to the custom image loader if the height is available. This allows custom image loaders to know the height at different breakpoints instead of using a fixed value using loaderParams.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["Hi, this PR seems to be a duplictate of #51951 were this change has been discussed. ","> Hi, this PR seems to be a duplictate of #51951 were this change has been discussed.\r\n\r\nFrom what I can tell, that PR is unfinished and modifies the default image loaders, and hasn't had any activity since November 2023.\r\n\r\nThis PR aims to only provide the height to custom loaders and does not change how the default loaders function."],"labels":["area: common","detected: feature"]},{"title":"Copy button of code example on angular.dev blocks the code","body":"### Describe the problem that you experienced\n\nWhile browsing [the signals guide on angular.dev](https:\/\/angular.dev\/guide\/signals) I cannot read the full code example(s), because the copy button is blocking it.\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.dev\/guide\/signals\n\n### Describe what you were looking for in the documentation\n\nA clear, readable code example.\n\n### Describe the actions that led you to experience the problem\n\nReading the page, trying to understand the code (regarding signals in this case).\n\n### Describe what you want to experience that would fix the problem\n\nThe copy button should either not have a grey background but a transparent one, or the code example should have more vertical padding so the code is not behind the copy button. Decreasing the copy button size is not really an option, because the touch target becomes too small.\n\n### Add a screenshot if that helps illustrate the problem\n\n<img width=\"2292\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/12891645\/5029c529-b347-42f7-97b9-cbd5e86782e1\">\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n```true\nDevice: Macbook Pro 2019 (Intel)\r\nOS: MacOS Sonoma 14.3.1\r\nBrowser: Google Chrome 122.0.6261.94\n```\n\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["Maybe we should only display the copy button in the code boxes when hovering inside of them?","Hmm, then the user doesn't know when he does not hover.","You're right, for mobile devices this might be useless and would need to be solved otherwise to also fix this issue. But personally I'd prefer the hiding of the copy button on computer and desktop screens to clean up the documentation contents a bit. \ud83d\ude48 "],"labels":["P3","area: adev"]},{"title":"Animation in not active material mat-tab makes animated element get stuck in the DOM","body":"### Which @angular\/* package(s) are the source of the bug?\n\nanimations\n\n### Is this a regression?\n\nNo\n\n### Description\n\nIf triggering an animation for a component that is currently in an inactive `mat-tab`, that animation sticks to the DOM and is not removed as it should.\r\n\r\nSee the attached stackblitz.\r\n\r\n1. Click on the tab \"Second\" and wait 2 seconds.\r\n2. Click on the tab \"First\".\r\n\r\nThe result is that the div with `item0` that was animated got stuck for the `TestComponent` that was inside of the first `mat-tab`.\r\n\r\nTest example start\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/7062803\/f15e5c11-db2f-4d92-a711-ae33020e3010)\r\n\r\nand end, where the animated div gets stuck in one of the `TestComponent`\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/7062803\/a0e20f88-babf-4d85-a127-623f95f7d1f0)\r\n\r\n\r\nMight be related to:\r\n#53492\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/stackblitz.com\/edit\/23y3d9\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n_No response_\n\n### Anything else?\n\n_No response_","comments":[],"labels":["area: animations"]},{"title":"Failed to implement CSP Policy's for styles with CSP_NONCE token ","body":"### Which @angular\/* package(s) are the source of the bug?\n\ncore\n\n### Is this a regression?\n\nNo\n\n### Description\n\nWhen implementing the CSP policy for styles, we decided to go with the CSP_NONCE token because we are caching index.html.\r\nIn order to implement this token we decided to use APP_INITIALIZER to receive a nonce token from the server before the application is loaded and use it afterwards.\r\nFor this, we wrote a simple nonce service that is responsible for getting and saving the token\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/156127155\/fc463e8f-0bf0-493d-bea0-ac01a1157920)\r\nAfter that we added this configuration to app.module.ts :\r\n``` \r\nexport function receiveNonce(nonceService: NonceService) {\r\n  return () => {\r\n    console.log('APP_INITIALIZER useFactory function start working');\r\n    return nonceService.receiveNonce();\r\n  }\r\n}\r\n\r\n\r\nProviders: [\r\nNonceService,\r\n      {\r\n        provide: APP_INITIALIZER,\r\n        useFactory: receiveNonce,\r\n        deps: [NonceService, HttpClient],\r\n        multi: true\r\n      },\r\n      {\r\n        provide: CSP_NONCE,\r\n        useFactory: (nonceService: NonceService) => {\r\n          console.log('CSP_NONCE useFactory function start working');\r\n          return nonceService.getNonce();\r\n        },\r\n        deps: [NonceService, HttpClient],\r\n        multi: true\r\n      }\r\n]\r\n```\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/156127155\/5034fab0-b735-4294-920e-c17d25fe7ff1)\r\nExample of execution order.\r\n\r\nAnd as a result we get incorrect behavior our \u0421SP_NONCE is executed before APP_INITIALIZER for some reason. Because of this we can not get nonce token from the server, also useFactory does not work with asynchronous operations not anywhere except APP_INITIALIZER that's why we decided to use it.\r\nExpected Behavior:  CSP_NONCE token should work fine with factory approach \r\n\n\n### Please provide a link to a minimal reproduction of the bug\n\n_No response_\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nNode version - 18.16.0\r\nAngular version - 16.2.12\n```\n\n\n### Anything else?\n\n_No response_","comments":["This is working as expected; a nonce must be available synchronously during startup.\r\n\r\nWhat's the reasoning for fetching a nonce via the server anyway? Why not generate it locally in the client? That can't normally be done for scripts (as it's a catch 22) but if you have the ability to execute code anyway, then I don't see why you'd need a server to generate a nonce...","> This is working as expected; a nonce must be available synchronously during startup.\r\n> \r\n> What's the reasoning for fetching a nonce via the server anyway? Why not generate it locally in the client? That can't normally be done for scripts (as it's a catch 22) but if you have the ability to execute code anyway, then I don't see why you'd need a server to generate a nonce...\r\n\r\nThe reason why we're fetching a nonce it's because API side have a control over CSP policies (e.g. alowed chases, nonces e.t.c), Client side receive CSP policies via HTTP headers. \r\nAre you suggesting to implement CSP policies for the styles on the Client side via meta tag ?\r\nIn that case, can we use injection of csp_nonce token for meta tag or we have to write some custom logic to populate csp policies there?"],"labels":["area: core","area: security","core: stylesheets","cross-cutting: CSP"]},{"title":"Ability to disable \"NG3: The containing function or module body is too large for control flow analysis. [plugin angular-compiler]\" rule","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncommon, compiler-cli, compiler\n\n### Description\n\nRecently our team upgraded Angular version from 16 to 17. But we couldn't start the project because of \"NG3: The containing function or module body is too large for control flow analysis. [plugin angular-compiler]\" error. Not all components have this problem.\n\n### Proposed solution\n\nAbility to disable the \"NG3: The containing function or module body is too large for control flow analysis. [plugin angular-compiler]\"\n\n### Alternatives considered\n\nWe considered refactoring our code but it is simply too time consuming. ","comments":["That error is a TypeScript compiler error, not an Angular error specifically (the fact that it shows up as `NG3` is a little surprising...). It's TypeScript complaining that one of the functions in the code is too big\/branchy to be analyzed for type narrowing.\r\n\r\n*Probably* the code in question is not one of your own functions, but a component template (which gets translated to a function for type-checking). If a template has too many branches, it can trigger this error.\r\n\r\nWe'll need a working reproduction to further diagnose the problem and determine if it's due to an excessively large template or perhaps a bug that's causing excessive branching in the type-check block.","The component that throws error is around 5000 lines and html template file is over 3000 lines . I don't think i can just copy the file because of dependencies it would fail but i will try to create a component without that dependencies with same error. \r\n\r\nWhen updating to Angular 17 we migrated to new build system via \"ng update @angular\/cli --name use-application-builder\" command. I don't know if error has any connection with this change.\r\n\r\nI did a research about error message and found it related to TS2563 typescript error. But i didn't find a way to disable it through tsconfig.json file.\r\n\r\nThanks","I created a stackblitz about this error here: [link](https:\/\/stackblitz.com\/edit\/stackblitz-starters-sl7l8v?file=src%2Fapp%2Ftest%2Ftest.component.ts)\r\n\r\nI noticed in stackblitz i am getting a different error but i think it is related with NG3 error: \r\n```\r\n\u2718 [ERROR] Maximum call stack size exceeded [plugin angular-compiler]\r\n\r\n  This error came from the \"onStart\" callback registered here:\r\n\r\n    node_modules\/@angular-devkit\/build-angular\/src\/tools\/esbuild\/angular\/compiler-plugin.js:81:18:\r\n      81 \u2502             build.onStart(async () => {\r\n         \u2575                   ~~~~~~~\r\n\r\n    at setup (\/home\/projects\/stackblitz-starters-sl7l8v\/node_modules\/@angular-devkit\/build-angular\/src\/tools\/esbuild\/angular\/compiler-plugin.js:81:19)\r\n    at async handlePlugins (\/home\/projects\/stackblitz-starters-sl7l8v\/node_modules\/esbuild\/lib\/main.js:1330:9)\r\n```\r\nI hope this helps.","I have the same problem and don't know why either.. Do you solve it?","We would still need a working reproduction of this issue in order to investigate.","@alxhub I created a stackblitz here: [link](https:\/\/stackblitz.com\/edit\/stackblitz-starters-sl7l8v?file=src%2Fapp%2Ftest%2Ftest.component.ts)\r\n\r\nI know stackblitz doesn't have same error but in vscode same code gives ng3 error. If this is not enough let me know what i can provide to you.\r\n\r\nThanks"],"labels":["needs reproduction","area: compiler"]},{"title":"@placeholder vs @loading","body":"### Describe the problem that you experienced\n\nReading the [@defer](https:\/\/angular.io\/guide\/defer#blocks) documentation, the two sub blocks `@placeholder` and `@loading` are mentioned.\r\n\r\nBut there is no guidance on when to use which one and what the differences are. Both blocks seem to do the same thing and accept the same parameters. A loading spinner can also be a placeholder.\r\n\r\nHow should each one of these sub blocks be used? Is this just a semantic difference?\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.io\/guide\/defer#blocks\n\n### Describe what you were looking for in the documentation\n\n_No response_\n\n### Describe the actions that led you to experience the problem\n\n_No response_\n\n### Describe what you want to experience that would fix the problem\n\nExpand on when to use `@loading` vs `@placeholder`. There seems to be no difference in functionality.\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["Hi, \r\n\r\nPlaceholder: \r\n> The @placeholder is an optional block that declares content to show before the defer block is triggered.\r\n\r\nLoading:\r\n> The @loading block is an optional block that allows you to declare content that will be shown during the loading of any deferred dependencies.\r\n\r\nThe difference seams quite clear here. The loading block replaces the placeholder onces trigger has fired\/loading has started. ","Sorry - I must have missed that first paragraph. I agree that the sentence in the `@placeholder` sub block makes it quite clear. But the second sentence only makes sense after realizing that there are three states in a `@defer` block:\r\n\r\n1. Waiting: The `@defer` block has not been triggered; conditions not met. The content is **not** loading.\r\n2. Loading: The `@defer` is triggered (conditions are met). The deferred content is loading. The `@placeholder` block is now hidden and the `@loading` block is showing).\r\n3. Loaded\/Ready: The deferred content is loaded and shown. Other sub blocks disappear.","IMO adding a simple sentence would help a lot:\r\n\r\n> The `@loading` block is an optional block that allows you to declare content that will be shown during the loading of any deferred dependencies. **_The `@loading` block replaces the @placeholder block once loading has been triggered._** For example, you could show a loading spinner. Similar to `@placeholder`, the dependencies of the `@loading` block are eagerly loaded.","I have created a PR for your change @ducin. I think it's a small enough change so that it's hopefully not complicated to merge it \ud83d\udc4d . Let's see what happens!"],"labels":["area: core","state: has PR","P3","core: defer","area: docs"]},{"title":"Support `protected` for input(), output(), and model().","body":"### Description\r\n\r\nHello;\r\nIn Angular 17, `signals `are awesome. Now , I use `signal`, `input `and `model `in everywhere. \r\n`model` signal has both of variable and `input` properties. If we use with `public ` then it would be a component parameter. If we use with `protected ` then it wouldn't as an input. Can we add a option (like as `public model = model<string>.protected()`) for no `\u00ecnput` or `output` parameter. Sometimes we needs access from other class (with directive, or dynamic component `createComponent`) but we wants not `input `or `output`\r\n\r\n### Proposed solution\r\n\r\n`public model = model.protected<string>()` -> Only two-way binding\r\n`public model = model.protectedInput<string>()` -> two-way binding + @Input()\r\n`public model = model.protectedOutput<string>()` -> two-way binding + @Output()","comments":["Writable signals are model without inputs (and outputs). \r\n\r\nAre you looks for a model that does only outputs ? ","I just want use `model` for two-way binding without both of `input `or `output` like as `public varilable`"],"labels":["area: core","cross-cutting: signals"]},{"title":"docs: remove @empty <li> from the a11y tree","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [x] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nThe existing examples of the @empty block renders an empty unordered list with a list item containing the text \u201cThe list is empty\u201d. This is not a good experience for users with accessibility needs, as pointed out by @ahasall.\r\n\r\nIssue Number: N\/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nA <li [attr.aria-hidden]=\"true\"> element is now rendered within the @empty block, as the resulting node will be removed from the accessibility tree in the browser.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":[],"labels":["area: docs"]},{"title":"docs: add damian sire to GDE resources","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No","comments":["Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https:\/\/github.com\/angular\/angular\/pull\/54674\/checks?check_run_id=22198803207) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.","I have just signed the CLA","You probably didn't it with the right email. The commit was authored with `dam*****re\u200b@hotmail.com`. ","Thanks @JeanMeche! I've updated the email address to match the one on the signed CLA"],"labels":["area: docs"]},{"title":"Runtime translations ignore i18nMissingTranslation settings","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\nlocalize\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nWhen translations are loaded using `loadTranslations` from `@angular\/localize` the `i18nMissingTranslation` setting in the build options is ignored and a warning is logged for any missing translation or any error that occurs from calling `$localize`:\r\n\r\n`No translation found for \"<MessageId>\" (\"<Message>\").\r\n`\r\n\r\nSince the `i18nMissingTranslation` was created for build time compilation there should be a way to set this value for runtime translations as currently there's no way to ignore errors that happen in `$localize` .\r\n\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```\r\nAngular CLI: 17.2.1\r\nNode: 18.18.2\r\nPackage Manager: npm 9.8.1\r\nOS: win32 x64\r\n\r\nAngular: 17.2.2\r\n... animations, common, compiler, compiler-cli, core, forms\r\n... localize, platform-browser, platform-browser-dynamic\r\n... platform-server, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1702.1\r\n@angular-devkit\/build-angular   17.2.1\r\n@angular-devkit\/core            17.2.1\r\n@angular-devkit\/schematics      17.2.1\r\n@angular\/cli                    17.2.1\r\n@angular\/ssr                    17.2.1\r\n@schematics\/angular             17.2.1\r\nrxjs                            7.8.1\r\ntypescript                      5.3.3\r\nzone.js                         0.14.4\r\n```","comments":[],"labels":["feature","area: i18n"]},{"title":"refactor: replace non output EventEmitter with Subject. ","body":"2 commits, 1 form the common package, 1 for the core package. \r\n\r\nSame as #54665 ","comments":[],"labels":["action: review","area: core","target: minor"]},{"title":"refactor(forms): replace non output `EventEmitter` with `Subject`.","body":"Semantcly we're shifting away from using `EventEmitter` on non-outputs.\r\n","comments":["Great cleanup. Thanks @JeanMeche!","Since I changed the implementation a bit by removing `_initObservables`, it's maybe a good idea to run a presubmit. "],"labels":["action: review","area: forms","target: minor"]},{"title":"RouterTestingHarness: Provide an option to configure  the root component","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\nrouter\n\n### Description\n\nIn some integration tests you'd like more control over the boostrapped root component.\r\n\r\nGuards on lazy routes, for instance, are initialized before any of the parent components are instantiated. This causes issues when trying to (integration) test (automatic) login scenarios.\n\n### Proposed solution\n\nIdeally you'd pass in a higher order component which is composed with the original root component; but since functional components are not a thing that seems like a long shot at best. So you'd probably have to implement your own `RouterTestingHarnessRootComponent`:\r\n```\r\nconst routerHarness = await RouterTestingHarness.create({\r\n  initialUrl?: string;\r\n  root?: RouterTestingHarnessRootComponent;\r\n);\r\n```\n\n### Alternatives considered\n\nYou can manually create a test root component first:\r\n```\r\nTestBed.createComponent(RootComponent);\r\nrouterHarness = await RouterTestingHarness.create();\r\n```\r\nThis works if you re-use this component in your provided routes but it's only a workaround since the component is created twice.","comments":["It's a bit more complicated than just allowing a custom fixture. At the very least, that custom fixture would need to have the same `@ViewChild(RouterOutlet) outlet`. This also wouldn't be capable of covering other scenarios like multiple named outlets at the root.\r\n\r\nThe `RouterTestingHarness` won't be able to solve all test scenarios but should be capable of covering the most common use cases. It's really not a large implementation - the file is less than 200 lines, including a whole lot of documentation. I think you might be better off just creating your own harness or sticking with the current method of testing rather than attempting to update the harness to be more flexible in this way."],"labels":["feature","action: discuss","area: router"]},{"title":"refactor: apply prettier formatting to integration","body":"Apply prettier formatting to integration directories","comments":[],"labels":["action: merge","target: minor"]},{"title":"fix(devtools): fix padding in property tree view","body":"This import was missed when switching devtools to standalone.\r\n\r\nfixes #54622\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n- [x] Bugfix\r\n\r\n## What is the current behavior?\r\n\r\nIssue Number: #54622\r\n\r\nThe padding on property tree view nodes was missing.\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/12160067\/b7ecd567-d813-4734-9c2e-12468f4512ad)\r\n\r\n## What is the new behavior?\r\n\r\nThe padding is restored.\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/12160067\/ee71b10d-b4ab-420b-aa0a-47a485eabf8c)\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n## Other information\r\n\r\nI didn't add a test for this. The reason this compiled before is because we're only using static string bindings on the MatTreeNodePadding directive, which are  treated as DOM properties without the MatTreeNodePadding import.\r\n\r\nhttps:\/\/github.com\/angular\/angular\/blob\/1519b5bd2fd45ac68b14dd548dc8b2b2dce30cbc\/devtools\/projects\/ng-devtools\/src\/lib\/devtools-tabs\/directive-explorer\/property-tab\/property-view\/property-view-tree.component.html#L3\r\n\r\nI thought about changing the bindings to `[matTreeNodePaddingIndent]=\"14\"` just to prevent regression, but I'm not sure if that's necessary.","comments":[],"labels":["action: merge","target: patch","area: devtools"]},{"title":"Add the ability to get reference to component and props","body":"### Is this a bug report or a feature request?\n\n- [ ] Bug Report\n- [X] Feature Request\n\n### Please provide the steps to reproduce the issue [Bug Report only]\n\n_No response_\n\n### Please provide the expected behavior vs the actual behavior you encountered [Bug Report only]\n\n_No response_\n\n### Please provide a screenshot if possible [Bug Report only]\n\n_No response_\n\n### Please provide the exception or error you saw [Bug Report only]\n\n_No response_\n\n### Is this a browser-specific issue? If so, please specify the device, browser, and version. [Bug Report only]\n\n_No response_\n\n### Description [Feature Request only]\n\n![image](https:\/\/github.com\/angular\/angular\/assets\/40625750\/4dad3537-dce7-4051-a23e-92888bcadbae)\r\nIt would be very helpful to have the ability to get a reference to the currently clicked component (1) in the tree using a button or icon. Similarly, for component reference properties (2). I know that it is currently possible to get a reference to a component by clicking on it and typing $ng0 in the console, but this is not intuitive and I have the impression that few people remember this option.\r\n\r\n\r\n\r\n\n\n### Proposed solution [Feature Request only]\n\nI think it works very well and intuitively in the case of the Injector Tree, where there is an arrow icon that logs the service directly to the console. The same mechanism could work for the Components tab. Just add that icon next to element or prop. :)\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/40625750\/e4663f32-9034-4a92-81a6-1b0e299b1393)\n\n### Alternatives considered [Feature Request only]\n\n_No response_","comments":[],"labels":["area: devtools"]},{"title":"Add tooltip to download button in Angular playground","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #54619\r\n\r\n\r\n## What is the new behavior?\r\n\r\nOption 1 (currently committed): Displays a material tooltip above the download button within the Angular playground, further clarifying what actually gets downloaded when clicking it.\r\n\r\nOption 2: The easier (but more anti accessibility requirements) solution would be to just add the `title` tag on the button component, used on refresh button in same component. \r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nClose: #54619\r\n\r\nHere's my first draft idea on the tooltip: \r\n\r\nhttps:\/\/github.com\/angular\/angular\/assets\/112062588\/39255799-a9d9-4a91-a788-8628d7409da9\r\n\r\nAs we see, it's pretty basic and has no real styling since I didn't find any other usage examples in `adev`. \r\n\r\nClarification points:\r\n- Create a test for the improvement?\r\n- Should we consider using option 2 instead (described above)?\r\n- How should the tooltip styling be done and should the basic styles be global for it?\r\n\r\n\u23f0 I noticed that the tooltip has issues displaying after the playgrounds preview is loaded, sometimes even not displaying at all anymore. Any ideas?\r\n\r\n> Note: I'm aware of the formatting mistakes -> currently having issues with `ng-dev`, `clang` and handling `.mts` file extensions on my machine.\r\n\r\n**Todo's Material Tooltip (option 1):**\r\n- [ ] Make responsive\r\n- [ ] Add Angular Theme styling\r\n\r\nThanks for your feedback. \ud83d\ude04 ","comments":["Deployed adev-preview for 195cee4ac5f92e8bc4c08345a9b73c3bf0fbbe19 to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54634-adev-prev-nl18u56y.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->","Here's some of my styling ideas for the tooltip:\n- Obviously shrink text size (desktop = singe line)\n- Add a lighter background with shadow\n","@JeanMeche can you please add `needs: discussion` label or similar to get some feedback? Thanks \ud83d\ude04 ","I think the text is too much for a tooltip, maybe something like 'Download code', 'Download current project', 'Download your code' will be better?"],"labels":["adev: preview"]},{"title":"Router.createUrlTree(...) creates new UrlTree which reuses UrlSegmentGroups from the Router.currentUrlTree","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\nrouter\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nModfying UrlTree created by Router.createUrlTree(...) can modify (because of shared\/reused UrlSegmentGroups) the Router.currentUrlTree which can lead to really hard to debug bugs...\r\n\r\nRouter.createUrlTree(...) should return a completetely new and indepentent UrlTree or the behaviour with warning should be documented.\r\n\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\n_No response_\r\n\r\n### Please provide the exception or error you saw\r\n\r\n_No response_\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 15.2.10\r\nNode: 20.11.1 (Unsupported)\r\nPackage Manager: npm 10.4.0\r\nOS: win32 x64\r\n\r\nAngular: 15.2.10\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... language-service, localize, platform-browser\r\n... platform-browser-dynamic, router\r\n\r\nPackage                          Version\r\n----------------------------------------------------------\r\n@angular-devkit\/architect        0.1502.10\r\n@angular-devkit\/build-angular    15.2.10\r\n@angular-devkit\/core             15.2.10\r\n@angular-devkit\/schematics       15.2.10\r\n@angular-devkit\/schematics-cli   15.2.10\r\n@angular\/cdk                     15.2.9\r\n@angular\/google-maps             15.2.9\r\n@schematics\/angular              15.2.10\r\nng-packagr                       15.2.2\r\nrxjs                             7.8.1\r\ntypescript                       4.9.5\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\n_No response_","comments":[],"labels":["area: router","P3"]},{"title":"docs: using @if insted ngIf","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [x] Tests for the changes have been added (for bug fixes \/ features)\r\n- [x] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N\/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["> @danielschmitz can you please squash your 3 commits to reduce commit history and keep the message consistent to the commit guidelines?\r\n\r\nThe squash would be done in the merge. Is there another way to do this?","You can squash with an interactive rebase. ","I tried, but I don't think it worked. :-(","Indeed you produced a merge commit. An interactive rebase (`rebase -i HEAD~5` in your case), will allow you to squash the 4 extra commits into the first. ","Thanks @JeanMeche \r\ndone! ","Hey, nearly there. I noticed a typo in your commit message at 'insted' instead of 'instead'.","> Hey, nearly there. I noticed a typo in your commit message at 'insted' instead of 'instead'.\r\n\r\nfixed \ud83d\udc4d"],"labels":["area: docs"]},{"title":"[Devtools] Scope object tree indentation is the wrong way around","body":"### Is this a bug report or a feature request?\r\n\r\n- [X] Bug Report\r\n- [ ] Feature Request\r\n\r\n### Please provide the steps to reproduce the issue [Bug Report only]\r\n\r\n* Have a component that has an object as a field\r\n* Inspect it\r\n* Unfold the object field\r\n\r\nThis makes it impossible to see where the nested object's fields end and the parent's fields continue\r\n\r\n### Please provide the expected behavior vs the actual behavior you encountered [Bug Report only]\r\n\r\nExpected: The nested object contents are indented to the right\r\nActual: Contents are indented to the left\r\n\r\n### Please provide a screenshot if possible [Bug Report only]\r\n\r\nHere, the `defaultProxy` is a field in the component containing an object\r\n\r\n<img width=\"475\" alt=\"Screenshot 2024-02-27 at 12 44 13\" src=\"https:\/\/github.com\/angular\/angular\/assets\/161476\/fc02fcef-108a-4ab0-a273-2e69283824b5\">\r\n\r\n\r\n### Please provide the exception or error you saw [Bug Report only]\r\n\r\n_No response_\r\n\r\n### Is this a browser-specific issue? If so, please specify the device, browser, and version. [Bug Report only]\r\n\r\n_No response_\r\n\r\n### Description [Feature Request only]\r\n\r\n_No response_\r\n\r\n### Proposed solution [Feature Request only]\r\n\r\n_No response_\r\n\r\n### Alternatives considered [Feature Request only]\r\n\r\n_No response_","comments":[],"labels":["state: has PR","area: devtools"]},{"title":"Add hover tooltip on download button in Playground","body":"### Describe the problem that you experienced\r\n\r\nAs we know the cool angular.dev playground has a feature to download the provided\/written source code. \r\nI find that at the first time of seeing\/using this button it was pretty unclear to me what it does. First I thought it will just download the playground file I have currently open.\r\n\r\n### Enter the URL of the topic with the problem\r\n\r\nhttps:\/\/angular.dev\/playground\r\n\r\n### Describe what you were looking for in the documentation\r\n\r\n_No response_\r\n\r\n### Describe the actions that led you to experience the problem\r\n\r\n_No response_\r\n\r\n### Describe what you want to experience that would fix the problem\r\n\r\nI suggest a tooltip below the button, that displays when hovering over the button, which says `Download the current application source code` or similar.\r\n\r\nhttps:\/\/material.angular.io\/components\/tooltip\/overview\r\n\r\n### Add a screenshot if that helps illustrate the problem\r\n\r\n<img width=\"919\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/112062588\/8c39ee4b-59bf-41a9-92bb-9bfbb50b745b\">\r\n\r\n### If this problem caused an exception or error, please paste it here\r\n\r\n_No response_\r\n\r\n### If the problem is browser-specific, please specify the device, OS, browser, and version\r\n\r\n_No response_\r\n\r\n### Provide any additional information here in as much as detail as you can\r\n\r\nI'd be happy to implement this UX\/Accessibility improvement. \ud83d\ude04 ","comments":["Hey.. I would like to work on it.","Hey @nileshkr9919,\r\nAlready working on a branch, feel free to create your own implementation. Interested on your solution. \ud83d\ude48 ","I want to try solve the issue\r\n"],"labels":["help wanted","good first issue","P3","Accessibility","area: adev"]},{"title":"fix(zone.js): should not clear onhandler when remove capture listener","body":"Close #54581\r\n\r\nShould not clear `onHandler` when remove capture event listeners.\r\n\r\n","comments":["Is there an ETA for this? Thanks","[Presubmit (TGP)](https:\/\/test.corp.google.com\/OCL:614900294:BASE:614900185:1710217713695:bd6cf247).","**Caretaker note**: [TGP is \"green\"](https:\/\/fusion2.corp.google.com\/presubmit\/614900294\/OCL:614900294:BASE:615063293:1710259986918:fcb2129e\/targets), but it'd still be great to merge and sync this change separately. ","I'm going to hold this one until Monday, and sync it at the beginning of the week on its own."],"labels":["action: merge","area: zones","target: patch","merge: caretaker note","risky"]},{"title":"undefined also removes the class binding","body":"### Describe the problem that you experienced\n\nIn the angular.dev\/angular.io documentation, its mentioned that \"Angular adds the class when the bound expression, onSale is truthy, and it removes the class when the expression is falsy\u2014with the exception of undefined.\" under the section **Binding to a single CSS**\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.dev\/guide\/templates\/class-binding\n\n### Describe what you were looking for in the documentation\n\nIt basically removes the class binding, even when the expression evaluates to __undefined__.\n\n### Describe the actions that led you to experience the problem\n\n_No response_\n\n### Describe what you want to experience that would fix the problem\n\n_No response_\n\n### Add a screenshot if that helps illustrate the problem\n\n![image](https:\/\/github.com\/angular\/angular\/assets\/5306277\/a6cf3949-cbee-470b-a3fc-9bc02e625565)\r\n\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["The phrasing probably isn't great but `undefined` has a specific behavior. \r\n\r\n`<div [class.foo]=\"true\" [class.foo]=\"false\"><\/div>` will result in an empty `class` attribute on the `div`\r\n\r\nwhere `[class.foo]=\"true\" [class.foo]=\"undefined\"` will result in `class=\"foo\"`. ","Note also that this seems silly when all of the bindings are in one place, but this also affects the behavior when multiple bindings to the same class exist across different directives on an element."],"labels":["area: core","core: styling bindings","P4","area: docs"]},{"title":"fix(zone.js): make sure fakeasync use the same id pool with native","body":"Close #54323\r\n\r\nfakeAsync should use the same timerId pool with native, so they will not conflict.\r\n\r\n\r\n","comments":[],"labels":["action: review","area: zones","target: minor"]},{"title":"Add a `ngReset` event to `FormGroupDirective`","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\nforms\r\n\r\n### Description\r\n\r\nReusable form error components often use `FormGroup.submitted` to determine whether errors should be displayed. `FormGroup.ngSubmit` is used to detect when the submitted state has been updated.  Unfortunately there's no way to detect reset changes.\r\n\r\nSee Also:\r\n\r\nhttps:\/\/github.com\/angular\/angular\/issues\/10999\r\nhttps:\/\/github.com\/angular\/angular\/issues\/30987\r\nEspecially: https:\/\/github.com\/angular\/angular\/issues\/30987#issuecomment-732014630\r\n\r\n### Proposed solution\r\n\r\nAdd a `ngReset` event to `FormGroup`.\r\n\r\n### Alternatives considered\r\n\r\nN\/A","comments":["I think I picked the right time to revisit my input wrapper. I'm glad you're on the job @JeanMeche.","@JeanMeche Do you think this is something that will be addressed soon or should I assume that the status quo will remain for the foreseeable future?"],"labels":["area: forms"]},{"title":"docs: add mention of the effect timing in components","body":"fixes #54545\r\n","comments":["Deployed aio for e2ab0e22c9b9613aa8cd42d77ce1b2db1cc2130f to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54598-aio-z1q77u8f.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentaio -->","Deployed adev-preview for e2ab0e22c9b9613aa8cd42d77ce1b2db1cc2130f to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54598-adev-prev-xsmodjvd.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->"],"labels":["aio: preview","area: docs","adev: preview"]},{"title":"bug(Zone.js): removing capture:true event listener breaks .on* event listeners","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\nzone.js\r\n\r\n### Is this a regression?\r\n\r\nYes\r\n\r\n### Description\r\n\r\nThe fix for https:\/\/github.com\/angular\/angular\/issues\/31643 introduced a bug\r\n\r\nThe following code \r\nhttps:\/\/github.com\/angular\/angular\/blob\/8e65bdc84821b23ba5e15f056321f840d38ce789\/packages\/zone.js\/lib\/common\/events.ts#L580-L583 removes on* property listener when it's not supposed to.\r\nThis happens because the code, when checking whether there are no more \"capture click\" tasks remaining (`existingTasks.length === 0`), forgets to check whether there are any \"non-capture click\" tasks present\r\nThough, since on* listeners are non-capturing, maybe this code shouldn't run at all when capture:true events are removed?\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\nhttps:\/\/stackblitz.com\/edit\/github-6rdbwr?file=src%2Fmain.ts\r\n\r\n### Please provide the exception or error you saw\r\n\r\n```ts\r\n\/\/ Make a button\r\nconst button = document.createElement('button');\r\ndocument.body.append(button);\r\n\r\n\/\/ Set onclick property\r\nbutton.onclick = () => console.log('onclick!');\r\nconsole.log(\r\n  'See that onclick prop is set correctly: ',\r\n  (button as any).__zone_symbol__ON_PROPERTYclick\r\n);\r\n\r\n\/\/ Some unrelated code sets and removes the event listener, WITH CAPTURE:TRUE\r\nbutton.addEventListener('click', console.log, { capture: true });\r\nbutton.removeEventListener('click', console.log, { capture: true });\r\n\r\nconsole.log(\r\n  'See that onclick handler was removed (BUG!): ',\r\n  (button as any).__zone_symbol__ON_PROPERTYclick\r\n);\r\nconsole.log(\r\n  'See that the task still exists:',\r\n  (button as any).__zone_symbol__clickfalse\r\n);\r\n```\r\n\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\nedit: affects Angular 17 too\r\n\r\n```yaml\r\n(running on Stackblitz, reproducible locally too, even without hot reloading)\r\n\r\n@angular\/common\r\n16.2.12\r\n\r\n@angular\/compiler\r\n16.2.12\r\n\r\n@angular\/core\r\n16.2.12\r\n\r\n@angular\/platform-browser\r\n16.2.12\r\n\r\n@types\/jasmine\r\n4.3.6\r\n\r\nrxjs\r\n7.8.1\r\n\r\ntslib\r\n2.6.2\r\n\r\nzone.js\r\n0.13.3\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\nI know that using on* is bad-practice, but it's coming from a library I rely on (for now). The capture:true events being set and removed is also from a library I rely on, so I can't easily remove these preconditions for the bug. As a workaround, I will use element ref to manually add\/removeEventListener, but I am sure that there would be other places in my application affected by this bug\r\n\r\ncc @JiaLiPassion","comments":["We've also verified this issue exists on version `17.2.2`.","@maxpatiiuk \r\nthank you for reporting the issue and the detail reproduce details, I created a PR to fix this one."],"labels":["area: zones"]},{"title":"feat(forms): Unified Control State Change Events","body":"This commit adds a global observable to subscribe to track changes around any `AbstractControl` (and its children).\r\n\r\nFixes #10887 ","comments":["Deployed adev-preview for e853df8094688c6798f41d85819a25cbba53f7a9 to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54579-adev-prev-kz3hd4fk.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->","@dylhunn FYI, there were some changes in the PR (see https:\/\/github.com\/angular\/angular\/pull\/54579#discussion_r1536423546) and I've re-requested your review."],"labels":["area: forms","target: major","detected: feature","adev: preview"]},{"title":"docs: add missing usage-notes","body":"Fixes #54228\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [X] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\n\r\nFixes the missing \"Usage Notes\" tab for the host-listener.\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [X] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nIssue Number: #54228\r\n\r\n\r\n## What is the new behavior?\r\n\r\nUsage notes tab is now present.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No","comments":["Deployed aio for 1b7b2530727eb048cd95608876803c4911a87535 to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54577-aio-nx227zjb.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentaio -->","Make sure to squash the commits, as soon as the pr is qualified for merge, especially merge commits into a single descriptive commit to reduce commit history. \ud83d\ude09 ","> Make sure to squash the commits, as soon as the pr is qualified for merge, especially merge commits into a single descriptive commit to reduce commit history. \ud83d\ude09\r\n\r\nIs there a way around fore-pushing to the branch to squash the commits? Or what is the best way to squash commits in a branch where I already synced the fork?","Deployed adev-preview for 1b7b2530727eb048cd95608876803c4911a87535 to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54577-adev-prev-y4akg2en.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->"],"labels":["aio: preview","area: docs","adev: preview"]},{"title":"Service Worker has a memory leak and crashes the tab","body":"### Command\r\n\r\npwa\r\n\r\n### Is this a regression?\r\n\r\n- [x] Yes, this behavior used to work in the previous version\r\n\r\n### The previous version in which this bug was not present was\r\n\r\nIt used to work but I couldn't pin point any specific changes related to the Service Worker\r\n\r\n### Description\r\n\r\nHi,\r\n\r\nFor a while now I have been having a pretty random and weird issue with my service worker \/ angular app.\r\nSometimes, users will be stuck on a blank page while their RAM is getting eaten until crash from the Angular tab.\r\nFrom what I can see it is related to the service worker, which I only uses for the SwUpdate feature.\r\n\r\nI've been trying multiple version, configurations and I can't really seem to find a permanent solution given there is no log, no memory dump, nothing and it is randomly appearing on clients.\r\n\r\nThe only info I have is that it clears itself if you empty the storage of the app which uninstalls the service worker + removes its cache. Also if you manage to open the task manager, you can see the tab with Service Worker under it, not the regular thread.\r\nAlso I can not access the ngsw\/state when this occurs.\r\n\r\nAny idea to solve this nightmare which has been haunting me for months at this point... I'm open to any suggestion at this point.\r\n\r\n### Minimal Reproduction\r\n\r\n- Setup an Angular Repository\r\n- Setup the Service Worker\r\n- Wait for the bug to randomly happens\r\n- Watch your CPU and RAM burn\r\n\r\nPackage.json\r\n```\r\n{\r\n        \"@angular\/animations\": \"^15.2.10\",\r\n        \"@angular\/cdk\": \"^15.2.9\",\r\n        \"@angular\/common\": \"^15.2.10\",\r\n        \"@angular\/compiler\": \"^15.2.10\",\r\n        \"@angular\/core\": \"^15.2.10\",\r\n        \"@angular\/forms\": \"^15.2.10\",\r\n        \"@angular\/platform-browser\": \"^15.2.10\",\r\n        \"@angular\/platform-browser-dynamic\": \"^15.2.10\",\r\n        \"@angular\/router\": \"^15.2.10\",\r\n        \"@angular\/service-worker\": \"^15.2.10\",\r\n        \"@fortawesome\/angular-fontawesome\": \"0.12.1\",\r\n        \"@fortawesome\/fontawesome-svg-core\": \"^1.2.28\",\r\n        \"@fortawesome\/free-regular-svg-icons\": \"^5.13.0\",\r\n        \"@fortawesome\/free-solid-svg-icons\": \"^5.13.0\",\r\n        \"@ngneat\/effects\": \"^1.1.1\",\r\n        \"@ngneat\/effects-ng\": \"^2.0.0\",\r\n        \"@ngneat\/elf\": \"^2.3.1\",\r\n        \"@ngneat\/elf-cli-ng\": \"^1.0.0\",\r\n        \"@ngneat\/elf-devtools\": \"^1.2.1\",\r\n        \"@ngneat\/elf-entities\": \"^4.4.3\",\r\n        \"@ngneat\/elf-pagination\": \"^1.1.0\",\r\n        \"@ngneat\/elf-persist-state\": \"^1.1.6\",\r\n        \"@ngneat\/elf-requests\": \"^1.6.0\",\r\n        \"@ngneat\/elf-state-history\": \"^1.3.0\",\r\n        \"@ngneat\/until-destroy\": \"^9.2.3\",\r\n        \"@sweetalert2\/ngx-sweetalert2\": \"^12.1.0\",\r\n        \"angular-calendar\": \"^0.31.0\",\r\n        \"angular-svg-round-progressbar\": \"^10.0.0\",\r\n        \"angularx-qrcode\": \"^15.0.0\",\r\n        \"date-fns\": \"^2.15.0\",\r\n        \"exceljs\": \"^4.1.1\",\r\n        \"jwt-decode\": \"^3.1.2\",\r\n        \"lodash.orderby\": \"^4.6.0\",\r\n        \"ngx-infinite-scroll\": \"^15.0.0\",\r\n        \"ngx-logger\": \"^5.0.11\",\r\n        \"ngx-toastr\": \"~16.0.2\",\r\n        \"rxjs\": \"~7.8.0\",\r\n        \"spinkit\": \"^2.0.1\",\r\n        \"sweetalert2\": \"^11.3.0\",\r\n        \"tslib\": \"^2.0.0\",\r\n        \"validator\": \"^13.9.0\",\r\n        \"zone.js\": \"~0.11.4\"\r\n    },\r\n    \"devDependencies\": {\r\n        \"@angular-devkit\/build-angular\": \"^15.2.10\",\r\n        \"@angular-eslint\/builder\": \"^15.2.1\",\r\n        \"@angular-eslint\/eslint-plugin\": \"^15.2.1\",\r\n        \"@angular-eslint\/eslint-plugin-template\": \"^15.2.1\",\r\n        \"@angular-eslint\/schematics\": \"^15.2.1\",\r\n        \"@angular-eslint\/template-parser\": \"^15.2.1\",\r\n        \"@angular\/cli\": \"^15.2.10\",\r\n        \"@angular\/compiler-cli\": \"^15.2.10\",\r\n        \"@openapitools\/openapi-generator-cli\": \"^2.5.2\",\r\n        \"@types\/jasmine\": \"~4.3.1\",\r\n        \"@types\/lodash.orderby\": \"^4.6.7\",\r\n        \"@types\/node\": \"^18.13.0\",\r\n        \"@types\/validator\": \"^13.7.17\",\r\n        \"@typescript-eslint\/eslint-plugin\": \"^5.43.0\",\r\n        \"@typescript-eslint\/parser\": \"^5.43.0\",\r\n        \"autoprefixer\": \"^10.4.13\",\r\n        \"eslint\": \"^8.28.0\",\r\n        \"eslint-config-prettier\": \"^8.6.0\",\r\n        \"eslint-formatter-gitlab\": \"^4.0.0\",\r\n        \"eslint-plugin-prettier\": \"^4.2.1\",\r\n        \"eslint-plugin-rxjs\": \"^5.0.2\",\r\n        \"eslint-plugin-rxjs-angular\": \"^2.0.0\",\r\n        \"husky\": \"^8.0.0\",\r\n        \"jasmine-core\": \"~4.5.0\",\r\n        \"karma\": \"~6.4.1\",\r\n        \"karma-chrome-launcher\": \"~3.1.1\",\r\n        \"karma-coverage\": \"^2.2.0\",\r\n        \"karma-jasmine\": \"~5.1.0\",\r\n        \"karma-jasmine-html-reporter\": \"^2.0.0\",\r\n        \"postcss\": \"^8.4.21\",\r\n        \"prettier\": \"^2.8.4\",\r\n        \"prettier-plugin-tailwindcss\": \"^0.2.2\",\r\n        \"pretty-quick\": \"^3.1.3\",\r\n        \"tailwindcss\": \"^3.2.4\",\r\n        \"typescript\": \"~4.9.5\"\r\n    }\r\n\r\n```\r\n\r\n### Exception or Error\r\n\r\n_No response_\r\n\r\n### Your Environment\r\n\r\n```text\r\nAngular CLI: 15.2.10\r\nNode: 18.17.1\r\nPackage Manager: yarn 1.22.19\r\nOS: linux x64\r\n\r\nAngular: 15.2.10\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n... service-worker\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1502.10\r\n@angular-devkit\/build-angular   15.2.10\r\n@angular-devkit\/core            15.2.10\r\n@angular-devkit\/schematics      15.2.10\r\n@angular\/cdk                    15.2.9\r\n@schematics\/angular             15.2.10\r\nrxjs                            7.8.0\r\ntypescript                      4.9.5\r\n```\r\n\r\n\r\n### Anything else relevant?\r\n\r\n_No response_","comments":[],"labels":["area: service-worker"]},{"title":"fix(docs-infra): add cookie consent gtag event default state","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [x] angular.dev application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nNo Google Analytics consent code existed.\r\n\r\nIssue Number: N\/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\nGoogle Analytics code for cookie consent is now added per the [docs](https:\/\/developers.google.com\/tag-platform\/security\/guides\/consent?consentmode=basic#gtag.js_4).\r\n\r\nThe other half of this PR that grants cookie consent can be found at https:\/\/github.com\/angular\/dev-infra\/pull\/1805\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["@bencodezen could you please also change the commit message to start with `fix(docs-infra): ...`, so that we can merge the change into the patch branch (feature commits can only go to the minor\/major branches)?","> @bencodezen could you please also change the commit message to start with `fix(docs-infra): ...`, so that we can merge the change into the patch branch (feature commits can only go to the minor\/major branches)?\r\n\r\n@AndrewKushnir Absolutely! Thanks for calling that out. I've updated the PR with the correct doc comment and message!","@bencodezen LGTM, thanks for the updates. I've removed the \"review\" label, please add the \"merge\" label when the PR is ready for merge. Thank you.","@bencodezen It looks like the CI failure is legitimate. Could you take a look?","Thanks for the ping @atscott! I'm in the midst of trying to figure out why the export isn't found by the CI tool. Will let you know when all the tests are passing as expected."],"labels":["state: blocked","target: patch","area: adev-infra"]},{"title":"refactor(core): transform Predicate from interface to type","body":"This interface should have been a type as there are no other properties\r\n\r\nAlso ADEV doesn't show the call signature on an interface : https:\/\/angular.dev\/api\/core\/Predicate ","comments":[],"labels":["area: core"]},{"title":"Add an option to keep double-quotes as \" instead escaping them as &quot; ","body":"### Command\r\n\r\nextract-i18n\r\n\r\n### Description\r\n\r\nAccording to the xml standard the escaping for double-quotes is only intended for attributes. See [https:\/\/www.w3.org\/TR\/xml ](https:\/\/www.w3.org\/TR\/xml) section 2.4. Therefore the value of the source and target tags need no escaping. The unnecessary escaping causes problem with translation tools. \r\n\r\nExample:\r\n```\r\n<source>The file path must end with &quot;.p12&quot; or &quot;.pfx&quot;<\/source>  \r\n```\r\nshould be\r\n```\r\n<source>The file path must end with \".p12\" or \".pfx\"<\/source>  \r\n```\r\n\r\n\r\n### Describe the solution you'd like\r\n\r\n_No response_\r\n\r\n### Describe alternatives you've considered\r\n\r\n_No response_","comments":[],"labels":["area: i18n"]},{"title":"fix(forms): correct return type of AbstractControl.getRawValue","body":"The return type of AbstractControl.getRawValue previously was `any`, contrary to the JsDoc comment of the class, which resulted in a lack of type safety for example:\r\n\r\n    let ac: AbstractControl<{x?: boolean}, {x: boolean}>;\r\n    ac = new FormGroup({});\r\n\r\nThe above assignment previously didn't result in a type error despite the form group lacking a control for the x property.\r\n\r\nBREAKING CHANGE: AbstractControl.getRawValue has been made abstract and its return type has been changed to the TRawValue type parameter. The provided method implementation previously only returned `this.value`, this default implementation has been removed in order to fix the return type.\r\n\r\nCloses #49387.\r\n\r\n## Impact of breaking change\r\n\r\nShould be minimal since I expect that most applications don't directly extend `AbstractControl`.","comments":["Hi, this change looks good but since this is a breaking change, we will require a migration schematics to land it. \r\n\r\nPlease have a look at the existing ones we have in `packages\/core\/schematics\/migrations.json`. \r\n","This PR introduces two separate breaking changes: 1) narrowing down the return type and 2) making the method abstract. I don't think a migration could do anything about 1). To address 2) we could have a migration that automatically adds a `getRawValue` implementation to classes extending `AbstractControl`, however we could only do that in cases where the `TRawValue` type parameter isn't specified (and defaults to `TValue`) because otherwise we don't know how to map these types. So the utility of such a migration seems questionable and there's also more cases where it's not easy to decide automatically (e.g. what to do if there's an app-defined abstract class that extends `AbstractControl`?). I guess the migration could insert TODO comments for cases that cannot be migrated automatically but I don't really see the point since they'll show up as type errors anyway."],"labels":["breaking changes","area: forms","forms: Controls API","forms: strictly typed"]},{"title":"Resolvers can return redirect command","body":"Returning a `RedirectCommand` from a resolver can be interpreted as\r\ndistinctly different from regular resolved data. When a resolver returns\r\n`RedirectCommand` we can interperet this as an intention to redirect in\r\nthe same way as other guards.\r\n\r\nresolves https:\/\/github.com\/angular\/angular\/issues\/29089","comments":[],"labels":["area: core","target: major","detected: feature"]},{"title":"docs(service workers): update service workers doc to no longer use --\u2026","body":"\u2026prod\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nThe service worker documentation uses `ng serve --prod`, but this way of deploying to production has been removed since 14 and deprecated since 12.\r\n\r\n## What is the new behavior?\r\n\r\nIt now says `ng serve --configuration production` instead.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https:\/\/github.com\/angular\/angular\/pull\/54552\/checks?check_run_id=21839641929) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request."],"labels":["area: docs"]},{"title":"Pending APP_INITIALIZER doesn't trigger Hydration warning after APPLICATION_IS_STABLE_TIMEOUT","body":"### Which @angular\/* package(s) are the source of the bug?\n\ncore, platform-server\n\n### Is this a regression?\n\nYes\n\n### Description\n\nWhen using an `APP_INITIALIZER`  that returns a promise pages refreshes always end up being requested from the server. I also noticed that it breaks dev tools.\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/github.com\/tsteuwer-accesso\/angular-ssr-issue\/\n\n### Please provide the exception or error you saw\n\n```true\nClone the repository, `npm ci` then run the app with `npx ng s`.\r\n\r\nOpen the browser to http:\/\/localhost:4200\r\n\r\nOpen the network tab, click Route 1. Notice it does a full page refresh.\r\nClick Route 2. Notice it does a full page refresh.\r\n\r\nNow, open up `app.config.ts` and comment-out `provideAppEnvironment()` from the providers. Refresh the page and everything starts working. It no longer does full page refreshes from the server and dev tools works.\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.2.0\r\nNode: 20.10.0\r\nPackage Manager: npm 10.2.3\r\nOS: linux x64\r\n\r\nAngular: 17.2.1\r\n... animations, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, platform-server\r\n... router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1702.0\r\n@angular-devkit\/build-angular   17.2.0\r\n@angular-devkit\/core            17.2.0\r\n@angular-devkit\/schematics      17.2.0\r\n@angular\/cli                    17.2.0\r\n@angular\/ssr                    17.2.0\r\n@schematics\/angular             17.2.0\r\nrxjs                            7.8.1\r\ntypescript                      5.3.3\r\nzone.js                         0.14.4\n```\n\n\n### Anything else?\n\nThis also break dev tools somehow.","comments":["This is a hydration issue due to your `EnvironmentService`. \r\n\r\nOn the client your `loaded$` observable emit synchronously on the client. Since it doesn't replay on subscribe your  `appEnvironmentFactory` never resolves the promise. \r\n\r\nReplace your `Subject` with a `ReplaySubject(1)` and your apps works fine. ","Actually I might keep it open because the stable timeout doesn't seems to fire ([NG0506](https:\/\/angular.dev\/errors\/NG0506)) which is an issue in itself.  cc @AndrewKushnir ","@JeanMeche we use the `APP_BOOTSTRAP_LISTENER` [here](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/core\/src\/hydration\/api.ts#L171) to init the check, which throws [NG0506](https:\/\/angular.dev\/errors\/NG0506) after a timeout. The `APP_INITIALIZER` handling happens earlier, so if one of the Promises never resolves, the whole application would be in a \"broken\" state and we never make it into hydration code. I'm wondering if we should have a similar check (console.warn after a timeout), but for `APP_INITIALIZER`s. What do you think?"],"labels":["area: core","core: hydration"]},{"title":"No docs about how to test effects in component constructor","body":"### Which @angular\/* package(s) are the source of the bug?\n\ncompiler, core\n\n### Is this a regression?\n\nYes\n\n### Description\n\nI'm trying to assert a method of the component is called when a signal emits `true` inside `effect`. \r\n\r\nSince no one else reported such an issue yet I assume I might be doing something wrong, but then again there are no docs explaining how to do these things right. So there.\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/stackblitz.com\/edit\/stackblitz-starters-p37z7j?description=An%20angular-cli%20project%20based%20on%20@angular\/animations,%20@angular\/common,%20@angular\/compiler,%20@angular\/core,%20@angular\/forms,%20@angular\/platform-browser,%20@angular\/platform-browser-dynamic,%20@angular\/router,%20core-js,%20rxjs,%20tslib%20and%20zone.js&file=package.json,setup-jest.ts,jest.config.js,tsconfig.spec.json,src%2Fmain.ts,src%2Fapp.component.spec.ts&template=node&title=Angular%20Starter\n\n### Please provide the exception or error you saw\n\n```true\nMessage:\r\n      expect(jest.fn()).toHaveBeenCalled()\r\n    \r\n    Expected number of calls: >= 1\r\n    Received number of calls:    0\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular 17.2\r\nNode 18\r\nPackage Manager: npm \/ pnpm\r\nOS: Linux, Mac, Windows\n```\n\n\n### Anything else?\n\nI tried:\r\n\r\n- wrapping the test with `fakeAsync`\r\n- Moving `TestBed.flushEffects()` around","comments":["Just as a note, the reproduction doesn't work for me. I get some internal stackblitz\/Jest error:\r\n\r\n```\r\n\u2718 [ERROR] Angular compilation initialization failed. [plugin angular-compiler]\r\n\r\n  TypeError: t.record is not a function\r\n      at RecordableHistogram.record (https:\/\/stackblitzstartersbtwp9l-4g0d.w-credentialless.staticblitz.com\/blitz.a9c8a5a3.js:160:3579)\r\n      at ThreadPool.runTask (file:\/\/\/home\/projects\/stackblitz-starters-btwp9l\/node_modules\/piscina\/dist\/src\/index.js:699:23)\r\n      at Piscina.run (file:\/\/\/home\/projects\/stackblitz-starters-btwp9l\/node_modules\/piscina\/dist\/src\/index.js:912:65)\r\n```","@alxhub this is a stackblitz issue due to an incompatibility with a CLI deps. You can fix this by overriding the `piscina` version.\r\n\r\n```\r\n  \"overrides\": {\r\n    \"piscina\": \"4.2.1\"\r\n  }\r\n```","@alxhub fixed the build issue","https:\/\/github.com\/angular\/angular\/blob\/55fd7b3c85253554d579a3fc807349f32e60a89a\/packages\/core\/src\/render3\/reactivity\/effect.ts#L258\r\n\r\nEffects do not execute until components have been change detected. If you add fixture.detectChanges() after createComponent, does that resolve your issue?","> https:\/\/github.com\/angular\/angular\/blob\/55fd7b3c85253554d579a3fc807349f32e60a89a\/packages\/core\/src\/render3\/reactivity\/effect.ts#L258\r\n> \r\n> Effects do not execute until components have been change detected. If you add fixture.detectChanges() after createComponent, does that resolve your issue?\r\n\r\nAs far as I know effects do not rely on change detection. They have their own scheduler.\r\n\r\nAnd no, it does not resolve the issue :(","> As far as I know effects do not rely on change detection\r\n\r\nYes, they do. I've linked to the bit of code that explains why.\r\n\r\n> And no, it does not resolve the issue :(\r\n\r\nI do believe that it does: https:\/\/stackblitz.com\/edit\/stackblitz-starters-sdhdqy?description=An%20angular-cli%20project%20based%20on%20@angular\/animations,%20@angular\/common,%20@angular\/compiler,%20@angular\/core,%20@angular\/forms,%20@angular\/platform-browser,%20@angular\/platform-browser-dynamic,%20@angular\/router,%20core-js,%20rxjs,%20tslib%20and%20zone.js&file=package.json,setup-jest.ts,jest.config.js,tsconfig.spec.json,src%2Fmain.ts,src%2Fapp.component.spec.ts&template=node&title=Angular%20Starter\r\n\r\n","> > As far as I know effects do not rely on change detection\r\n> \r\n> Yes, they do. I've linked to the bit of code that explains why.\r\n> \r\n> > And no, it does not resolve the issue :(\r\n> \r\n> I do believe that it does: https:\/\/stackblitz.com\/edit\/stackblitz-starters-sdhdqy?description=An%20angular-cli%20project%20based%20on%20@angular\/animations,%20@angular\/common,%20@angular\/compiler,%20@angular\/core,%20@angular\/forms,%20@angular\/platform-browser,%20@angular\/platform-browser-dynamic,%20@angular\/router,%20core-js,%20rxjs,%20tslib%20and%20zone.js&file=package.json,setup-jest.ts,jest.config.js,tsconfig.spec.json,src%2Fmain.ts,src%2Fapp.component.spec.ts&template=node&title=Angular%20Starter\r\n\r\nAmazing! Strangely enough though in my production code it still does not work, but stackblitz example does :)"],"labels":["P3","area: adev","area: docs"]},{"title":"Docs: Improve Syntax Highlighting","body":"### Describe the problem that you experienced\n\nAngular leverages embedded languages (have a combination of HTML, Typescript and CSS) in one file. A lot of syntax highlighter are not necessarily good with embedded language, this includes also highlighter js which is used in the new documentation.\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.dev\/guide\/components\n\n### Describe what you were looking for in the documentation\n\nI'd expect HTML code to have HTML highlighting (+angular syntax for control flow syntax), the examples shown on that very page have Typescript syntax highlighting but not HTML for the template part.\n\n### Describe the actions that led you to experience the problem\n\nLook at code examples in the new docs\n\n### Describe what you want to experience that would fix the problem\n\n<img width=\"723\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/6104311\/80ad9209-5e35-4952-afde-675539a262c8\">\r\n\r\nvs proper highlighting of the same code\r\n\r\n<img width=\"694\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/6104311\/412e1b83-d419-4239-a9e2-673d5565bd68\">\r\n\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n```true\nI think this problem could be nicely solved by using [shiki](https:\/\/github.com\/shikijs\/shiki) which uses the textmate grammar files of the angular language server. It actually fetches the grammar files regular to be always up to date, in case there are additions (e.g. control flow)\/fixes.\r\nShiki also comes with commonly used themes and has easy mechanisms to provide a custom theme.\n```\n","comments":["I integrated Shiki now in various projects, so I'd be more than happy to take care of that, if interested","Thanks for filing the issue @niklas-wortmann! I'll chat with the team to see what the plan is for this. Happy to loop you in if the plan is to use shiki or something."],"labels":["area: dev-infra","P3","area: adev"]},{"title":"NG0911: View has already been destroyed.","body":"### Which @angular\/* package(s) are the source of the bug?\n\ncore\n\n### Is this a regression?\n\nYes\n\n### Description\n\nI recently introduced to my app `DestroyRef` to replace `@ngneat\/until-destroy` and I started getting an error in automated tests: `NG0911: View has already been destroyed.`\r\n\r\nThis issue doesn't manifest while users are interacting with the app, but when I'm testing the app via automated means (where I click very fast in buttons and components are created and destroyed too quickly).\r\n\r\nThe code where the exception happened is the following (I marked which one is line 76, the one mentioned in the stack trace):\r\n\r\n```\r\n    ngOnInit() {\r\n        this.myHttpClient.getCharts()\r\n            .then(allCharts => {\r\n                this.allCharts = allCharts;\r\n\r\n                this.myService.getPerms$(\"SOME_PERM\")\r\n                    .pipe(takeUntilDestroyed(this.destroyRef))\r\n                    .subscribe(hasPerms => this.refreshChartDetails(hasPerms)); # line 76\r\n            })\r\n            .catch(error => this.myErrorService.showError(error));\r\n    }\r\n```\n\n### Please provide a link to a minimal reproduction of the bug\n\n_No response_\n\n### Please provide the exception or error you saw\n\n```true\nNG0911: View has already been destroyed.\r\n    at storeLViewOnDestroy (core.mjs:2846:15)\r\n    at NodeInjectorDestroyRef.onDestroy (core.mjs:14215:9)\r\n    at Observable._subscribe (rxjs-interop.mjs:27:41)\r\n    at Observable._trySubscribe (Observable.js:37:25)\r\n    at Observable.js:31:30\r\n    at errorContext (errorContext.js:19:9)\r\n    at Observable.subscribe (Observable.js:22:21)\r\n    at takeUntil.js:7:29\r\n    at SafeSubscriber.<anonymous> (lift.js:10:28)\r\n    at Observable.js:26:30\r\n    at errorContext (errorContext.js:19:9)\r\n    at AnonymousSubject.subscribe (Observable.js:22:21)\r\n    at my-chart-component.component.ts:76:22\r\n    at _ZoneDelegate.invoke (zone.js:368:26)\r\n    at Object.onInvoke (core.mjs:14832:33)\r\n```\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.1.2\r\nNode: 18.13.0\r\nPackage Manager: npm 8.19.3\r\nOS: linux x64\r\n\r\nAngular: 17.1.2\r\n... animations, cdk, cli, common, compiler, compiler-cli, core\r\n... forms, material, material-moment-adapter, platform-browser\r\n... platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1701.2\r\n@angular-devkit\/build-angular   17.1.2\r\n@angular-devkit\/core            17.1.2\r\n@angular-devkit\/schematics      17.1.2\r\n@schematics\/angular             17.1.2\r\nrxjs                            7.8.1\r\ntypescript                      5.3.3\r\nzone.js                         0.14.3\n```\n\n\n### Anything else?\n\n_No response_","comments":["Without a running reproduction it's difficult to be certain, but this seems like it's working as intended. By the time the `Promise` resolves, the containing component is already destroyed. The `.then` callback does `.subscribe()`, which subscribes through the `takeUntilDestroyed` operator, which tries to use the `DestroyRef` but it's too late - the component is already dead.\r\n\r\nThe root cause here is the promise callback which executes the `.subscribe` unconditionally, even if the component is already destroyed.","@alxhub Thanks, that explanation makes sense.\r\n\r\nI feel that Angular shouldn't be logging an error in that case though, as it's a normal use case, otherwise users will need to add a second validation before each \"subscribe\" that involves \"takeUntilDestroyed\" to make sure the component has not been destroyed already.\r\n\r\nEven if this is just a log, and not a real error, this causes trouble for tools that monitor the health of the application, for example we have `failOnConsoleError` in Cypress, so this makes the tests fail from time to time (as it acts as a race-condition). Similarly, error reporting tools like Rollbar would need adjustment to learn to ignore errors if this happens in production.","yes, have the same problem, but in runtime","I moved to old way `OnDestroy` hook and `takeUntil` and error is gone","- je for monitoring I use sentry and if not sentry error report I would probably not now for error\r\n- NG0911 no documentation","It would be convenient if [DestroyRef](https:\/\/angular.io\/api\/core\/DestroyRef) had a destroyed flag.\r\nIt would be possible to check before creating a subscription.\r\n```typescript\r\nabstract class DestroyRef {\r\n  abstract onDestroy(callback: () => void): () => void;\r\n  abstract readonly destroyed: boolean;\r\n}\r\n```","> [...] this seems like it's working as intended. By the time the `Promise` resolves, the containing component is already destroyed. The `.then` callback does `.subscribe()`, which subscribes through the `takeUntilDestroyed` operator, which tries to use the `DestroyRef` but it's too late - the component is already dead.\r\n\r\nI tend to agree with @alxhub, things work as intended. It's not totally unreasonable to not log the error in this particular case, but generally I'd rather know if my code accesses resources that have been already freed.\r\n\r\nMaybe it would be better to fix the code snippet listed above, instead of extending Angular responsibility with detecting right or wrong cases of \"View has already been destroyed\" error.\r\n\r\nFor example, that code snippet uses three somewhat orthogonal concepts:\r\n* a class field that holds value -- just a plain value, nothing reactive here\r\n* a promise -- which loads data for that value\r\n* an observable -- that does some additional processing after promise is complete\r\n\r\nWhat if we rewrite code like this:\r\n```ts\r\nngOnInit() {\r\n    from(this.myHttpClient.getCharts()).pipe(\r\n        catchError(error => this.myErrorService.showError(error)),\r\n        tap(allCharts => this.allCharts = allCharts),\r\n        switchMap(() => this.myService.getPerms$(\"SOME_PERM\")),\r\n        tap(() => hasPerms => this.refreshChartDetails(hasPerms)),\r\n        takeUntilDestroyed(this.destroyRef),\r\n    ).subscribe();\r\n}\r\n```\r\nSo, now:\r\n* we have single flow of events\/data\r\n* everything is bound during component initialization\r\n* destroying component early will also cancel promise in progress\r\n\r\nAlso, I'd suggest to rewrite code to be more reactive, e.g.:\r\n```ts\r\nclass Component {\r\n  readonly allCharts$ = defer(() => this.myHttpClient.getCharts());\r\n}\r\n```\r\nBut I see too little context to be sure that's viable in your case."],"labels":["needs reproduction","area: core","core: rxjs interop"]},{"title":"FormTruple - variant o FormArray that can create controls on elements based on data","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\nforms\n\n### Description\n\nOriginal proposition was posted as https:\/\/github.com\/angular\/angular\/issues\/44603 and is well described there.\n\n### Proposed solution\n\nNew class in the manner of\r\n\r\n```\r\nimport {\r\n  AbstractControl,\r\n  AbstractControlOptions,\r\n  AsyncValidatorFn,\r\n  FormArray,\r\n  ValidatorFn, \u0275FormArrayRawValue\r\n} from '@angular\/forms';\r\n\r\nexport class FormTuple<TValue, TControl extends AbstractControl = any> extends FormArray<TControl> {\r\n  constructor(\r\n    private readonly controlFactory: (value: TValue) => TControl,\r\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\r\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\r\n  ) {\r\n    super([], validatorOrOpts, asyncValidator);\r\n  }\r\n\r\n  override setValue(value: \u0275FormArrayRawValue<TControl>, options?: { onlySelf?: boolean; emitEvent?: boolean }) {\r\n    this.syncControls(value, options);\r\n    super.setValue(value, options);\r\n  }\r\n\r\n  private syncControls(value: \u0275FormArrayRawValue<TControl>, options?: { onlySelf?: boolean; emitEvent?: boolean }) {\r\n    while (this.controls.length > 0) {\r\n      this.removeAt(0, options);\r\n    }\r\n    for (const elementValue of value) {\r\n      this.push(this.controlFactory(elementValue));\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nusage:\r\n\r\n```\r\nnew FormGroup({\r\n  name: new FormControl(),\r\n  children: new FormTuple(\r\n    (value) => new FormGroup({\r\n      name: new FormControl(),\r\n    })\r\n  )\r\n});\r\n```\n\n### Alternatives considered\n\nManually rebuilding the formGroup with and formArray before doing \r\n\r\n```\r\nconst receivedValue = {\r\n  name: \"Adam\",\r\n  children: [{name: \"John\"},{name: \"Marry\"}]\r\n};\r\nthis.formGroup = \/\/ ... some big manual method to rebuild the form group based on the receivedValue \r\nthis.formGroup.setValue(receivedValue);\r\n```\r\n\r\nwhich may be impossible if an framework to manage forms is used and somewhat defeats the point of reactive forms in my opinion","comments":["I had exactly the same problem and had to create a custom form array."],"labels":["area: forms"]},{"title":"perf(core): short-circuit child queries","body":"We can stop processing the single-match, child queries as soon as we get the first tNode match.\r\n","comments":[],"labels":["state: blocked","area: core","target: patch"]},{"title":"The new Angular.dev docs don't cover conditional content projection.","body":"### Describe the problem that you experienced\n\nThe new Angular.dev docs **don't cover conditional content projection** and how we can **project dynamic content**(means content changes which is projected into the component) in the component.\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.dev\/guide\/components\/content-projection\n\n### Describe what you were looking for in the documentation\n\n_No response_\n\n### Describe the actions that led you to experience the problem\n\n_No response_\n\n### Describe what you want to experience that would fix the problem\n\n_No response_\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":[],"labels":["P3","area: adev","area: docs"]},{"title":"Make ngNonBindable totally non-bindable","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\ncompiler, core\r\n\r\n### Description\r\n\r\nI need to be able to provide an example of Angular component usage as a snippet of code. The `ngNonBindable` directive seems to work fine on the mustache\/interpolation strings, such as `{{ test }}`, but it still tries to bind `[inputs]` and `(outputs)` within the snippet. \r\n\r\n```html\r\n<code ngNonBindable> <!-- the placement of the directive doesn't seem to matter -->\r\n<pre><my-comp\r\n    (test)=\"test = test.toUpperCase()\"\r\n  ><\/my-comp><\/pre>\r\n<\/code>\r\n```\r\n\r\nFailing with:\r\n\r\n```\r\nERROR DOMException: Failed to execute 'setAttribute' on 'Element': '(test)' is not a valid attribute name\r\n```\r\n\r\nThus, it's only half-useful and a bit contradictory to its name.\r\n\r\n### Proposed solution\r\n\r\nFirst off, I don't know Angular internals around this subject well enough, so it is difficult for me to propose a solution. \r\n\r\nFrom DX PoV, I would like to be able to grab any piece of Angular template code, enclose it in a `<code><pre>` markup, drop the `ngNonBindable` and be done. Later, should I need to update the code part, I'd just paste new code. All without HTML escaping hassle.\r\n\r\nFor this flow to be possible I'd expect the `ngNonBindable` directive to do what it says, and literally stop binding anything that lies within its scope. `Anything` includes: inputs, outputs, attribute directives, structural directives, new control flow blocks, `<ng-template>`s, `<ng-container>`s, `<ng-content>`, etc. \r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/681956\/d8237d90-15f1-4a5a-9439-5f0c4000b6f7)\r\n\r\nI imagine that with this in place, IDEs' syntax highlighting could render the code within `ngNonBindable` with dimmed colors or as regular HTML - which at that time would be aligned with the actual directive behavior.\r\n\r\nOr maybe this directive could become a new code flow syntax element?\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/681956\/d938400b-60b3-4915-96a7-21edd8c95642)\r\n\r\n\r\n### Alternatives considered\r\n\r\nThe alternative is to just escape html, but one would expect the `ngNonBindable` directive to work exactly as its name implies. You just drop-in your real working code, add `ngNonBindable` and you're done.\r\nAlso, having to escape the html makes the code hardly maintainable. Overall, poor DX.","comments":["I think we could consider it a duplicate of #11859. What do you think ? ","@JeanMeche Not sure about that. From what I can gather the other ticket is mostly about the brace characters. Seems like even if solved it would not solve my problem, ie. Angular would still try to bind inputs, outputs, directives, etc.","I was thinkin of the comment by Pawel: \r\n> I can totally see hoe this one is confusing as it is not clear what is the intent of ngNonBindable - should it just \"switch off\" bindings or ignore all Angular constructs (special chars in template, i18n etc.).","> The ngNonBindable directive seems to work fine on the mustache\/interpolation strings, such as {{ test }}, but it still tries to bind [inputs] and (outputs) within the snippet.\r\n\r\nTo be precise - Angular is _not_ trying to match directives, set inputs or listen to events when `ngNonBindable` is used (!). Looking at the minimal reproduction scenario:\r\n\r\n```html\r\n<div ngNonBindable>\r\n   <button (click)=\"onClick()\">Click me<\/button>\r\n<\/div>  \r\n```\r\n\r\nAngular will interpret `(click)=\"onClick()\"` as an attribute with the name `(click)` and value `\"onClick()\"` resulting in \r\n\r\n> VM526:1 Uncaught DOMException: Failed to execute 'setAttribute' on 'Element': '(click)' is not a valid attribute name.\r\n\r\nLive reproduction scenario: https:\/\/stackblitz.com\/edit\/stackblitz-starters-eslmcq\r\n\r\nThe error happens precisely because  `ngNonBindable` was used (!) and it happens because Angular tries to build the DOM using sth equivalent to: \r\n\r\n```javascript\r\nconst button = document.createElement('button');\r\nbutton.setAttribute('(click)', 'onClick()');\r\n```\r\n\r\nAs a side note, browsers specs are _wonderfully_ inconsistent as the following works _just fine_:\r\n\r\n```html\r\ndiv.innerHTML = '<button (click)=\"onClick()\">Click me<\/button>'\r\n```","> The alternative is to just escape html,\r\n\r\nThis is the only viable alternative for now."],"labels":["area: core","area: compiler","core: basic template syntax"]},{"title":"refactor(common): Deprecate Local Data API functions","body":"Ahead of delegating the i18n subsystem to the `Intl` API, this commit introduces the intention to remove those functions from the public API.\r\n\r\nDEPRECATION: `getCurrencySymbol`, `getLocaleCurrencyCode`, `getLocaleCurrencyName`, `getLocaleCurrencySymbol`, `getLocaleDateFormat`, `getLocaleDateTimeFormat`, `getLocaleDayNames`, `getLocaleDayPeriods`, `getLocaleDirection`, `getLocaleEraNames`, `getLocaleExtraDayPeriodRules`, `getLocaleExtraDayPeriods`, `getLocaleFirstDayOfWeek`, `getLocaleId`, `getLocaleMonthNames`, `getLocaleNumberFormat`, `getLocaleNumberSymbol`, `getLocalePluralCase`, `getLocaleTimeFormat`, `getLocaleWeekEndRange`, `getNumberOfCurrencyDigits`","comments":["Deployed aio for ce9f5e9e2fb3b3b671b178ad8bb097f155d270a0 to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54483-aio-fk6r5hfh.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentaio -->","Deployed adev-preview for e7bfe32f1fb61afbcf8be420ed44b56a4951fa53 to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54483-adev-prev-ogg5o6wv.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->"],"labels":["action: review","area: common","aio: preview","target: minor","detected: deprecation","adev: preview"]},{"title":"Use platform `Intl` APIs in Angular's i18n subsystem","body":"In 2017 (#18284), it was chosen to drop the `Intl` API in favor of custom i18N data extracted from the CLDR (`@angular\/common\/locales\/...`. \r\n\r\nSince then the `Intl` API has matured a lot and is now able to cover the feature provided by the framework. \r\n\r\nReplacing the legacy i18n implementation with the `Intl` API is move to shift the localisation responsability from the framework to the platform (browsers, Node or Cloud workers). \r\n\r\n### Benefits of switching to an `Intl` implementation\r\nReplacing the legacy implementation with data from locale files with the an `Intl` based implementation has several benefits. \r\n* No need to import locale files to add support for additional languages (default was only english) \r\n* Bundle size improvements\r\n* Support for extended locales which allow specifying numbering system, calendar extension etc (ie `fa-AF-u-nu-latn` specifies  Persian, Afghanistan,Western Digits).\r\n* Support for IANA timezones when formating dates\r\n\r\n### Deprecations \r\nThis will lead to the deprecation of the following locale getters : \r\n\r\n* `getCurrencySymbol(code: string, format: 'wide' | 'narrow', locale?: string)`\r\n* `getLocaleCurrencyCode(locale: string)`\r\n* `getLocaleCurrencyName(locale: string)`\r\n* `getLocaleCurrencySymbol(locale: string)`\r\n* `getLocaleDateFormat(locale: string, width: FormatWidth)`\r\n* `getLocaleDateTimeFormat(locale: string, width: FormatWidth)`\r\n* `getLocaleDayNames(locale: string, formStyle: FormStyle, width: TranslationWidth)`\r\n* `getLocaleDayPeriods(locale: string, formStyle: FormStyle, width: TranslationWidth)`\r\n* `getLocaleDirection(locale: string)`\r\n* `getLocaleEraNames(locale: string, width: TranslationWidth)`\r\n* `getLocaleExtraDayPeriodRules(locale: string): (Time | [Time, Time])`\r\n* `getLocaleExtraDayPeriods(locale: string, formStyle: FormStyle, width: TranslationWidth)`\r\n* `getLocaleFirstDayOfWeek(locale: string)`\r\n* `getLocaleId(locale: string)`\r\n* `getLocaleMonthNames(locale: string, formStyle: FormStyle, width: TranslationWidth)`\r\n* `getLocaleNumberFormat(locale: string, type: NumberFormatStyle)`\r\n* `getLocaleNumberSymbol(locale: string, symbol: NumberSymbol)`\r\n* `getLocalePluralCase: (locale: string) => (value: number)`\r\n* `getLocaleTimeFormat(locale: string, width: FormatWidth)`\r\n* `getLocaleWeekEndRange(locale: string)`\r\n* `getNumberOfCurrencyDigits(code: string)`\r\n\r\nThose functions, barring exceptions mentioned below, should be replacing by using the `Intl` API with `Intl.formatNumber`, `Intl.formatDate`, `Intl.Plural`. \r\n\r\n#### Getters with none\/partial replacements : \r\n\r\n* `getLocaleWeekEndRange` & `getLocaleFirstDayOfWeek` : [`Intl.getWeekInfo()`](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Intl\/Locale\/getWeekInfo) not supported by Firefox (122 ATM) \r\n* * Alternatives\r\n* * * [`luxon`](https:\/\/moment.github.io\/luxon\/api-docs) falls back to the ISO week definition (starts on monday, 4 days in week for the week year). \r\n* * * [`day.js`](https:\/\/day.js.org\/docs\/en\/i18n\/i18n) Provides locale data for `yearStart` and `weekStart` but not the weekend range\r\n* * * [`date-fns`](https:\/\/date-fns.org\/v3.3.1\/docs) Provides locale data `weekStartsOn` & `firstWeekContainsDate` but not the weekend range.\r\n*  `getLocaleDirection` : [`Intl.getTextInfo()`](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Intl\/Locale\/getTextInfo) not supported by Firefox (122 ATM)\r\n* * Alternative : [`rtl-detect`](https:\/\/www.npmjs.com\/package\/rtl-detect) \r\n* `getLocaleCurrencySymbol`\/`getLocaleCurrencyCode`: We recommend developers fully drop this function as currencies shouldn\u2019t be determined from a locale. \r\n\r\n\r\n### Rolout plan\r\nThe feature will be enabled by default for new projects and opt-out on existing project when migrated with `ng update`. \r\n\r\nSchedule TBD. \r\n\r\n### Related PRs\r\n* #54483\r\n\r\n### Related issues \r\n\r\n* angular\/angular#20487\r\n* angular\/angular#33803 \r\n* angular\/angular#39606\r\n* angular\/angular#42315\r\n* angular\/angular#48279\r\n* angular\/angular#48697\r\n* angular\/angular#49143\r\n* angular\/angular#49540\r\n* angular\/angular#52177\r\n* angular\/angular#54114\r\n* angular\/angular#54320\r\n\r\n#### Components \r\n* angular\/components#23073 \r\n","comments":[],"labels":["area: i18n"]},{"title":"Shouldn't TransferState.set be called only on server side?","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\ncore\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nHi.\r\n\r\nI noticed that this piece of code in [packages\/common\/http\/src\/transfer_cache.ts](https:\/\/github.com\/angular\/angular\/blob\/9ca8c6852896a21d8edfeb78dfb99a500e2dd281\/packages\/common\/http\/src\/transfer_cache.ts#L198) gets called on client side:\r\n\r\n```ts\r\nreturn next(req).pipe(\r\n    tap((event: HttpEvent<unknown>) => {\r\n      if (event instanceof HttpResponse) {\r\n        transferState.set<TransferHttpResponse>(storeKey, {\r\n          [BODY]: event.body,\r\n          [HEADERS]: getFilteredHeaders(event.headers, headersToInclude),\r\n          [STATUS]: event.status,\r\n          [STATUS_TEXT]: event.statusText,\r\n          [URL]: event.url || '',\r\n          [RESPONSE_TYPE]: req.responseType,\r\n        });\r\n      }\r\n    }),\r\n  );\r\n```\r\n\r\nShouldn't this only be called only on server side? It wastes some memory on client's device\r\n","comments":["Technically this could only be called on the client side when;\r\n - The cache is in active, meaning that application has not been stabilised yet.\r\n - The request was not already performed on the server. \r\n \r\n In general, I'd say that this is rather quite uncommon, although I don't have anything against adding the additional check. ","Adding +1 as we just found this issue. For some reasons, we needed to have the app deployed either as CSR as SSR and found this issue. Transfer state seems to be working just as a store in client mode, so it's caching the current actual client requests.\r\n\r\nEditing to add a bit more detail, as the issue I was mentioned is very similar but not exactly the same as the original. Basically, I think http cache (with transferState) shouldn't be enabled at all when the app is deployed only in CSR ? (if there's not transferState)\r\n","We just found that transfer cache should only work during App bootstrapping and it's being disabled after the app is stable. That was well thought. I didn't noticed in your comment @alan-agius4 when you mentioned about the app not \"stabilised\" \ud83d\ude0a \r\n\r\nhttps:\/\/github.com\/angular\/angular\/blob\/5bd188a394d30053099e2c83fe79136d590e5399\/packages\/common\/http\/src\/transfer_cache.ts#L264-L274\r\n\r\nOur problem was that, actually, the App was not being Stable! We fixed that and confirmed that cache is disabled after the app becomes stable (first time).\r\nNow it makes sense your comment also that this (original) issue would be an uncommon case.\r\n"],"labels":["help wanted","area: server","good first issue","P4","server: http cache"]},{"title":"Provide a way of registering to `ModelSignal` changes programmatically","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nThere is no explicit programmatic\/imperative way of registering to `ModelSignal` changes from the parent except using an `effect`. Use case examples: dynamically created components and testing.\r\n\r\nThis also means that replacing two-way binding (an input + output with `Change` suffix) with `ModelSignal` will cause a breaking change to anything that programmaticaly\/imperatively subscribes to the old output. \r\n\n\n### Proposed solution\n\n- warn users in documentation that replacing input + output combination with `ModelSignal` should be considered a breaking change\r\n- add a method to `ComponentRef` (e.g. `registerListener`)\n\n### Alternatives considered\n\nUsing an `effect` or an util like `toObservable`:\r\n\r\n```ts\r\nclass ChildCmp {\r\n  name = model('');\r\n}\r\n\r\n\/\/ parent\r\n\r\nconst child = viewChild(ChildCmp)\r\n\r\neffect(() => {\r\n  console.log(child().name())\r\n});\r\n\r\n\/\/ or\r\ntoObservable(child().name).subscribe(...);\r\n```\r\n\r\nThe other way would be using `.subscribe()` method but it is deprecated.","comments":["FYI that we are considering similar things for output() and adding a `subscribeToOutput` method is also considered. \r\n\r\nFor model signals, using an effect seems quite reasonable to me, but it's definitely a change yeah.","Cool! Thanks Paul!\r\nBy the way, shouldn't we avoid `subscribe` as a keyword to avoid the wrong assumption that it only works with observables?","Since `model()` is conceptually declaring an `output()` it should provide the same API as `output()` for manual \"subscription\". That's currently in design :)","Perfect!\nWe'll have to highlight the \"Change\" suffix in the docs or ideally make the output name type safe everywhere. \nI'm pretty sure you have this planned but just in case it wasn't written anywhere, here it is \ud83d\ude0a\n\nIt's also a hint for 3rd party testing tools."],"labels":["area: core","core: inputs \/ outputs","core: reactivity"]},{"title":"`valueChanges` is slow to initiate","body":"### Which @angular\/* package(s) are the source of the bug?\n\nforms\n\n### Is this a regression?\n\nNo\n\n### Description\n\nWhen working with controls, `valueChanges` stream is initially `null`. That goes kind of against the RxJS paradigm. When working with streams you expect to code regardless of time of execution and streams are specifically there to fix situation where you are dependent on value that is not there for the time being. \r\n\r\nWhat makes it worse is it works differently for `ngModel` and `formControl`. Consider this directive:\r\n```ts\r\n@Directive({\r\n  standalone: true,\r\n  selector: '[valueChanges]',\r\n})\r\nexport class ValueChangesDirective {\r\n  private readonly control = inject(NgControl);\r\n\r\n  @Output()\r\n  readonly valueChanges = defer(() => this.control.valueChanges!);\r\n}\r\n```\r\nBy the time somebody subscribes to `(valueChanges)` output in the template, `ngModel` versions is ready, while `FormControl` version is not. This makes it impossible to reliably chain control value changes to directive outputs.\r\n\r\nI realize these streams are recreated in `ngOnChanges` because `FormControl` is passed as input, rather than created internally as in `ngModel`, but it would be nice if those streams would exist since the beginning as subjects and controls would feed values to them, instead of recreating them.\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/stackblitz.com\/edit\/value-changes-issue\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular 17\n```\n\n\n### Anything else?\n\n_No response_","comments":["this will probably being adressed as a side effect of the implementation of #54579. "],"labels":["area: forms"]},{"title":"build: update to node 20","body":"Updates the repo to Node 20 and resolves some build issues.\r\n","comments":["Parking this PR until v18 as discussed."],"labels":["area: build & ci","state: blocked","action: review","target: patch"]},{"title":"refactor(elements): use `reflectComponentType` for inputs","body":"use `reflectComponentType` to get the component inputs.\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nAngular elements uses has a util to extract component's inputs using ComponentFactoryResolver.\r\n\r\nIssue Number: N\/A\r\n\r\n\r\n## What is the new behavior?\r\nUse existing `reflectComponentType` to get the component inputs.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":[],"labels":["area: elements","core: inputs \/ outputs"]},{"title":"Suggested change for \"to_observable\"","body":"`ReplaySubject` is a heavy abstraction here. While this does add code, it will overall make using this utility lighter and faster.\r\n\r\nThis also ensures that the watcher is destroy if the source observable errors or completes... because at that point it can no longer produce more values.\r\n\r\nTODO: You might consider checking `subscribers.size === 0` in the returned observable and have that create or destroy the watchers as needed. I didn't add that because I suspect that your `watcher` utility needs to be called synchronously here, and delaying it until subscription time means it could be asynchronous.\r\n\r\n### FYI\r\n\r\nI didn't test this, I just hacked it together for you in the Web UI. If you'd like it to be something more serious, I can do that.\r\n\r\nattn @mgechev @alxhub \r\n","comments":[],"labels":["action: review","area: core","core: rxjs interop"]},{"title":"refactor(core): Make `ngDevMode` guard consistant.","body":"The commit make the usage of `ngDevMode` consistant accross the framework. Dev mode is the default when the `ngDevMode` global is not defined.","comments":["@JeanMeche did something happen? ):","I went a bit too fast when deleting my branches ;) "],"labels":["area: core"]},{"title":"fix(zone.js): add missing APIs to Node.js `fs` patch","body":"This commit updates the list of Node.js `fs` APIs to be patched because\r\nthey haven't been updated for a long time. It adds `opendir,lutimes,writev`.\r\nFor example, the `opendir` method was added to Node.js in version 12.12.0 in\r\n2019, causing some of the APIs to potentially be always called within the\r\n`<root>` context.\r\n\r\n**Note:** There are missing unit tests for these changes because in unit tests,\r\n`fs` is patched by Bazel's Node.js rules and its `node_patches.cjs`. However,\r\nthe APIs are successfully patched in the real production code and are called\r\nwith the correct context.","comments":[],"labels":["area: zones","area: docs"]},{"title":"angular.dev: no documentation on how to test interceptors","body":"### Describe the problem that you experienced\r\n\r\nI wrote a functional interceptor which also uses inject and couldn't find help on how to write a test for this on angular.dev.\r\nI would have expected it on either of these pages:\r\nhttps:\/\/angular.dev\/guide\/http\/testing\r\nhttps:\/\/angular.dev\/guide\/http\/interceptors\r\n\r\n### Enter the URL of the topic with the problem\r\n\r\nhttps:\/\/angular.dev\/guide\/http\/testing\r\n\r\n### Describe what you were looking for in the documentation\r\n\r\nAn example on how to write tests for interceptors\r\n\r\n### Describe the actions that led you to experience the problem\r\n\r\nI wrote a functional interceptor which also uses inject.\r\nThen I wanted to write a test for it and didn't know how to do it. Mainly because of the use of inject.\r\nangular.dev didn't provide any help.\r\n\r\n### Describe what you want to experience that would fix the problem\r\n\r\nDocumentation about it\r\n\r\n### Add a screenshot if that helps illustrate the problem\r\n\r\n_No response_\r\n\r\n### If this problem caused an exception or error, please paste it here\r\n\r\n_No response_\r\n\r\n### If the problem is browser-specific, please specify the device, OS, browser, and version\r\n\r\n_No response_\r\n\r\n### Provide any additional information here in as much as detail as you can\r\n\r\nFound this post then, which helped me: https:\/\/blog.stackademic.com\/how-to-test-a-functional-interceptor-in-angular-6c8095c1fb7d#ed8b\r\n\r\nBut official documentation would be nice.\r\n\r\n","comments":["Greetings I am going to put a different issue about angular but if you need interceptor code testing here you go\r\n```ts\r\n\r\nimport { Injectable, Injector } from '@angular\/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpErrorResponse,\r\n} from '@angular\/common\/http';\r\nimport { catchError, concatMap, Observable, of, tap, throwError } from 'rxjs';\r\n\r\n\/\/ services\r\nimport { WmlNotifyService } from '@windmillcode\/angular-wml-notify';\r\nimport { BaseService } from '@core\/base\/base.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class NewAzureAccessTokenInterceptor implements HttpInterceptor {\r\n\r\n  baseService:BaseService\r\n  constructor(\r\n    public injector:Injector,\r\n    public wmlNotifyService:WmlNotifyService,\r\n  ) {\r\n    setTimeout(()=>{\r\n      this.baseService = this.injector.get(BaseService)\r\n    })\r\n  }\r\n\r\n  addAccessTokenToRequest = (request: HttpRequest<unknown>,next:HttpHandler)=>{\r\n    request = request.clone({body:{\r\n      \/\/ @ts-ignore\r\n      data:request.body.data,\r\n      access_token:this.getAzureAccessToken(),\r\n    }})\r\n    return next.handle(request)\r\n  }\r\n\r\n  getAzureAccessToken =()=>{\r\n    return\"access_token\"\r\n  }\r\n  getNewAzureAccessToken = ()=>{\r\n    return of({})\r\n  }\r\n\r\n  intercept(\r\n    request: HttpRequest<unknown>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<unknown>> {\r\n\r\n    return next.handle(request).pipe(\r\n\r\n      catchError((err:HttpErrorResponse) => {\r\n        if(err.status === 403){\r\n\r\n          return this.getNewAzureAccessToken()\r\n          .pipe(\r\n            concatMap(()=>{\r\n              return this.addAccessTokenToRequest(request,next)\r\n            }),\r\n            tap({\r\n              error:()=>{\r\n                this.baseService.createWMLNote(\"global.loginAgain\")\r\n\r\n              }\r\n            })\r\n          )\r\n        }\r\n        else{\r\n          return throwError(()=>err)\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n```ts\r\nimport { TestBed, discardPeriodicTasks, fakeAsync, flush, tick } from '@angular\/core\/testing';\r\n\r\nimport { NewAzureAccessTokenInterceptor } from '.\/new-azure-access-token.interceptor';\r\nimport { resetDeclarations } from '@core\/utility\/test-utils\/mock-declarations';\r\nimport { resetImports } from '@core\/utility\/test-utils\/mock-imports';\r\nimport { resetProviders } from '@core\/utility\/test-utils\/mock-providers';\r\nimport { wmlTestUtils } from '@core\/utility\/test-utils\/test-utils';\r\nimport { UtilityService } from '@core\/utility\/utility.service';\r\nimport { HttpHandler, HttpRequest, HttpResponse } from '@angular\/common\/http';\r\nimport {WMLTestHttpHandler, createBasicObservableError} from \"@windmillcode\/angular-wml-components-base\"\r\nimport { throwError } from 'rxjs';\r\n\r\ndescribe('NewAzureAccessTokenInterceptor', () => {\r\n\r\n  let cpnt:NewAzureAccessTokenInterceptor\r\n  beforeEach(fakeAsync(() => {\r\n    resetImports()\r\n    resetProviders(NewAzureAccessTokenInterceptor);\r\n    resetDeclarations()\r\n    cpnt = wmlTestUtils.configureTestingModuleForServices(NewAzureAccessTokenInterceptor)\r\n    tick()\r\n    spyOn(cpnt,\"addAccessTokenToRequest\").and.callThrough()\r\n    spyOn(cpnt,\"getAzureAccessToken\").and.callThrough()\r\n    spyOn(cpnt,\"getNewAzureAccessToken\").and.callThrough()\r\n\r\n\r\n    \/\/ @ts-ignore\r\n    spyOn(cpnt.baseService,\"createWMLNote\")\r\n\r\n  }));\r\n\r\n\r\n  describe(\"init\", () => {\r\n\r\n    it(\"should create\", () => {\r\n      expect(cpnt).toBeTruthy()\r\n    })\r\n\r\n    it(\"should have all values initalize properly\", () => {\r\n\r\n    })\r\n\r\n    it(\"should have all properties be the correct class instance\", () => {\r\n\r\n    })\r\n  })\r\n\r\n  describe(\"intercept\",()=>{\r\n    describe(\"and there is an error\",()=>{\r\n\r\n      let request\r\n      let next\r\n      beforeEach(()=>{\r\n        request = new HttpRequest(\"GET\",\"a\")\r\n        next  = new WMLTestHttpHandler()\r\n      })\r\n\r\n      it(` when called |\r\n      under normal conditions |\r\n      does the required action `,fakeAsync(()=>{\r\n        \/\/ arrange\r\n\r\n        next.updateHandle(next.errorHandle$())\r\n        let fn = (val?)=>{\r\n          \/\/ assert\r\n          expect(val).toBeInstanceOf(HttpResponse)\r\n          discardPeriodicTasks()\r\n        }\r\n        \/\/ act\r\n        cpnt.intercept(request,next)\r\n        .subscribe({error:fn})\r\n        flush()\r\n\r\n      }))\r\n\r\n      describe(\"and (err.status === 403) === true\",()=>{\r\n\r\n\r\n        beforeEach(()=>{\r\n          spyOn(next,\"handle\").and.callThrough()\r\n        })\r\n\r\n        it(` when called |\r\n          under normal conditions|\r\n          does the required action `,fakeAsync(()=>{\r\n          \/\/ arrange\r\n\r\n\r\n          next.updateHandle(next.errorHandle$(new HttpResponse({status:403})))\r\n          let fn = (val?)=>{\r\n            \/\/ assert\r\n            expect(cpnt.getNewAzureAccessToken).toHaveBeenCalledWith()\r\n            expect(cpnt.addAccessTokenToRequest).toHaveBeenCalledWith(request,next)\r\n            discardPeriodicTasks()\r\n          }\r\n          \/\/ act\r\n          cpnt.intercept(request,next)\r\n          .subscribe({error:fn})\r\n          flush()\r\n\r\n        }))\r\n\r\n        it(` when called |\r\n          and this.addAccessTokenToRequest throws an error|\r\n          does the required action `,fakeAsync(()=>{\r\n          \/\/ arrange\r\n\r\n          cpnt.addAccessTokenToRequest =()=> createBasicObservableError()\r\n          spyOn(cpnt,\"addAccessTokenToRequest\").and.callThrough()\r\n          next.updateHandle(next.errorHandle$(new HttpResponse({status:403})))\r\n          let fn = (val?)=>{\r\n            \/\/ assert\r\n            \/\/ @ts-ignore\r\n            expect(cpnt.getNewAzureAccessToken).toHaveBeenCalledWith()\r\n            expect(cpnt.addAccessTokenToRequest).toHaveBeenCalledWith(request,next)\r\n            expect(cpnt.baseService.createWMLNote).toHaveBeenCalledWith(\"global.loginAgain\")\r\n            discardPeriodicTasks()\r\n          }\r\n          \/\/ act\r\n          cpnt.intercept(request,next)\r\n          .subscribe({error:fn})\r\n          flush()\r\n\r\n        }))\r\n      })\r\n\r\n    })\r\n\r\n  })\r\n\r\n  describe(\"addAccessTokenToRequest\",()=>{\r\n    let request\r\n    let next\r\n    beforeEach(()=>{\r\n      request = new HttpRequest(\"POST\",\"a\",{})\r\n      next  = new WMLTestHttpHandler()\r\n      spyOn(request,\"clone\").and.callFake(()=>request)\r\n      spyOn(next,\"handle\")\r\n    })\r\n    it(` when called |\r\n    under normal conditions |\r\n    does the required action `,()=>{\r\n      \/\/ arrange\r\n\r\n      \/\/ act\r\n      cpnt.addAccessTokenToRequest(request,next)\r\n      \/\/ assert\r\n      expect(request.clone).toHaveBeenCalledWith({body:{\r\n        data:request.body.data,\r\n        \/\/ @ts-ignore\r\n        access_token:cpnt.getAzureAccessToken(),\r\n      }})\r\n\r\n      expect(next.handle).toHaveBeenCalledWith(request)\r\n\r\n    })\r\n  })\r\n});\r\n```\r\n\r\nreach out if you have issue installing our libaries and setting up\r\nRemeber always use rxjs defer and from to convert promises to obserables and always deal with observables in angular. It makes coding a breeze"],"labels":["P3","area: adev","area: docs"]},{"title":"Produce an error or warning if not deferrable dependency is used within @defer block","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\ncompiler\r\n\r\n### Description\r\n\r\nRight now if not deferrable dependency is provided, angular will load it eagerly without any information which is not obvious.\r\n\r\nIt would also be nice to at least produce an error or warning so that developers know they've done something wrong\r\n\r\n### Proposed solution\r\n\r\nNo response\r\n\r\n### Alternatives considered\r\n\r\nNo response","comments":["related https:\/\/github.com\/angular\/angular\/issues\/52710","<!-- 6374bc4f-3ca6-4ebb-b416-250033c91ab5 -->\nThis feature request is now candidate for our backlog! In the next phase, the community has 60 days to upvote. If the request receives more than 20 upvotes, we'll move it to our consideration list.\n\nYou can find more details about the feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process).","Using the same component twice, once inside defer and once outside breaks defer, having an extended diagnostic for this, would be really helpful."],"labels":["feature","area: core","feature: votes required","core: defer"]},{"title":"[adev] Missing angular.dev docs page for $localize","body":"### Describe the problem that you experienced\r\n\r\n$localize links to two different locations\/routes in the angular.dev docs, and both lead to 404:\r\n\r\n1. Go to https:\/\/angular.dev\/guide\/i18n\/prepare#mark-text-in-component-code\r\n   Click on **$localize** -> https:\/\/angular.dev\/api\/localize\/init\/$localize 404\r\n\r\n2. Go to https:\/\/angular.dev\/api\/localize\/loadTranslations\r\n    Click on **$localize** chip\/tag -> https:\/\/angular.dev\/api\/localize\/$localize also 404\r\n\r\nMatching page on Angular.io: https:\/\/angular.io\/api\/localize\/init\/$localize\r\n","comments":["I managed to add the entry to the list, but the page of the exported members is still not found. The members are even missing in the API manifest:\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/19170734\/cb356970-d0aa-48d3-b6e0-540580a32c89)\r\n\r\nProbably because the members are exported by the barrel file from the angular-package and not from folder.\r\n\r\n```ts\r\nimport {\u0275$localize as $localize, ....} from '@angular\/localize'; \/\/ <-- Here\r\n\r\nexport {$localize, LocalizeFn, TranslateFn};\r\n```\r\n\r\nIf the members are exported from the parent folder the docs are working:\r\n```ts\r\nimport {$localize, LocalizeFn,TranslateFn} from '..\/src\/localize';\r\n\r\nexport {$localize, LocalizeFn, TranslateFn};\r\n```\r\n\r\nIs anyone familiar with this and knows if this will break something?"],"labels":["P3","area: adev","area: docs"]},{"title":"Docs: Improve Core Web Vitals on angular.dev","body":"### Describe the problem that you experienced\n\nThe newest assessments of Core Web Vitals can be measured through page-speed.dev.\r\n\r\nLooking at the angular.dev site does not yield positive results.\r\n\r\nAs the new Angular docs site should be a real world example of best practices in Angular, it should be optimized against the latest standards.\r\n\r\n![Screenshot_20240211-131555](https:\/\/github.com\/angular\/angular\/assets\/42211\/a3ac6b7a-5de0-488b-813a-59997868b837)\r\n\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/page-speed.dev\/angular.dev\n\n### Describe what you were looking for in the documentation\n\n_No response_\n\n### Describe the actions that led you to experience the problem\n\n_No response_\n\n### Describe what you want to experience that would fix the problem\n\n_No response_\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["Note: On the SEO score, this is related to the disabled indexing by https:\/\/angular.dev\/robots.txt","I have found optimising for INP is a challenge, as routing can be a fairly slow interaction, especially on mobile devices. \r\n\r\nI did raise a request to see if routing between pages could be broken up to allow for a loading bar\/spinner to be displayed to give some immediate user feedback at the start of each navigation (#51131). \r\n\r\nI also tried creating a copy of the routerLink directive that wrapped each navigation in a setTimeout so that the UI could update with a loading bar at the start of each navigation, but in the end, decided to shelve it - when INP becomes an active Core Web Vital metric in March if there is a drop in traffic due changes in search ranking I might stick it back on.\r\n\r\n\r\n"],"labels":["P3","area: adev-infra"]},{"title":"Calling field initializers (input, output, queries, etc) should be errors when not used to declare a field in a directive","body":"### Which @angular\/* package(s) are the source of the bug?\n\ncompiler\n\n### Is this a regression?\n\nYes\n\n### Description\n\nAssign viewChildren() to a variable instead of a property.\r\n```\r\nexport class AppComponent {\r\n  constructor() {\r\n    \/\/ assign viewChildren() to a variable instead of a property\r\n    const titles = viewChildren<string, ElementRef<HTMLHeadingElement>>(\r\n      'title',\r\n      {\r\n        read: ElementRef,\r\n      }\r\n    );\r\n\r\n    effect(() => {\r\n      console.log(titles());\r\n    });\r\n  }\r\n}\r\n```\r\n\r\nrun ngc\r\n`yarn run ngc -p tsconfig.json`\r\n\r\noutput\r\n```\r\nexport class AppComponent {\r\n  constructor() {\r\n    \/\/ assign viewChildren() to a variable not a property\r\n    const titles = viewChildren(\"title\", {\r\n      read: ElementRef,\r\n    });\r\n    effect(() => {\r\n      console.log(titles());\r\n    });\r\n  }\r\n  static {\r\n    this.\u0275fac = function AppComponent_Factory(t) {\r\n      return new (t || AppComponent)();\r\n    };\r\n  }\r\n  static {\r\n    this.\u0275cmp = \/*@__PURE__*\/ i0.\u0275\u0275defineComponent({\r\n      type: AppComponent,\r\n      selectors: [[\"app-root\"]],\r\n      standalone: true,\r\n      features: [i0.\u0275\u0275StandaloneFeature],\r\n      decls: 2,\r\n      vars: 0,\r\n      consts: [[\"title\", \"\"]],\r\n      template: function AppComponent_Template(rf, ctx) {\r\n        if (rf & 1) {\r\n          i0.\u0275\u0275element(0, \"h1\", null, 0);\r\n        }\r\n      },\r\n    });\r\n  }\r\n}\r\n```\r\nthe compile no generate viewQuery: function AppComponent_Query(rf, ctx) code.\r\nI try another way also same\r\n```\r\nexport class AppComponent {\r\n  titles: Signal<readonly ElementRef<HTMLHeadingElement>[]>;\r\n\r\n  constructor() {\r\n    this.titles = viewChildren<string, ElementRef<HTMLHeadingElement>>(\r\n      'title', { read: ElementRef, }\r\n    );\r\n\r\n    effect(() => {\r\n      console.log(this.titles());\r\n    });\r\n  }\r\n}\r\n```\r\nNot really sure if it's a bug or by design. Does the code style have to follow the required format for compilation?\r\n\r\n\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/github.com\/keatkeat87\/Angular-viewChildren-not-be-compile-when-assign-to-variable\n\n### Please provide the exception or error you saw\n\n```true\nno exception\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.2.0-rc.0\r\nNode: 18.17.0\r\nPackage Manager: yarn 1.22.19\r\nOS: win32 x64\r\n\r\nAngular: 17.2.0-rc.1\r\n... animations, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1702.0-rc.0\r\n@angular-devkit\/build-angular   17.2.0-rc.0\r\n@angular-devkit\/core            17.2.0-rc.0\r\n@angular-devkit\/schematics      17.2.0-rc.0\r\n@angular\/cli                    17.2.0-rc.0\r\n@schematics\/angular             17.2.0-rc.0\r\nrxjs                            7.8.1\r\ntypescript                      5.3.3\r\nzone.js                         0.14.3\n```\n\n\n### Anything else?\n\n_No response_","comments":["This is not supported. Angular requires that inputs\/outputs\/queries\/etc are declared and initialized as class members.","As @JoostK pointed out, only field initializers are supported. Having said this, we should inform users of this misuse (a lint check, compiler error or some other mechanism).  "],"labels":["hotlist: error messages","area: core","state: has PR","core: queries","core: reactivity"]},{"title":"SSR server crashes when HttpClient receives 5xx ","body":"### Command\n\nserve\n\n### Is this a regression?\n\n- [ ] Yes, this behavior used to work in the previous version\n\n### The previous version in which this bug was not present was\n\n_No response_\n\n### Description\n\nHi. Currently, both dev and built SSR servers are crashing when HttpClient receive 5xx response. This is annoying, because i always have to restart dev server (or deployed instance restarts itself on each error) and scroll giant log to see what happened (it prints full HttpErrorResponse class).\n\n### Minimal Reproduction\n\nng serve\/node server.mjs\n\n### Exception or Error\n\n_No response_\n\n### Your Environment\n\n```text\nlatest 17.1\n```\n\n\n### Anything else relevant?\n\n_No response_","comments":["Do you have zone.js added in the polyfills sections of your `angular.json?","Yes. Do you need reproduction repo?","@zip-fa, providing a minimal reproduction is recommended to be provided when opening a bug report.","Sorry for not providing repro with initial message.\r\nHere it goes: https:\/\/github.com\/zip-fa\/angular-ssr-500-bug\r\n\r\nAs you hinted, this is because of NgZone.runOutsideAngular. Also i found cyclic error, not sure if it's a bug, but:\r\n\r\n1) call `this.httpClient.get('\/test123').subscribe();`\r\n2) console in your IDE will be spammed with never ending `ERROR RuntimeError: NG04002: Cannot match any routes. URL Segment: 'test123'`","There are 2 main problems here. \r\n\r\n**1. Server crash** \r\nThe server crash is caused because since the http call is being doing outside of Zone.js uncaught errors become unhandled. There are a couple of things your could do to solve the issue. Either, handle potential errors or listen to `uncaughtException`, by adding the below to your `main.server.ts`\r\n\r\n```\r\nprocess.on('uncaughtException', (err, origin) => {\r\n  console.error(err)\r\n});\r\n```\r\n\r\n**2. Cyclic error when changing** \r\nThis looks like it is caused by the `@angular\/router` which on error will try to re-render the root component, but since the error is in the root component it will cause a cyclic error.\r\n\r\n","Thanks for the feedback!\r\nWhat do you think about adding process.on('uncaughtException\u2019) listener in server.ts by default for new apps?","We are exploring adding a non Node.js specific solution in the framework to handle this case for zoneless portions of the application.\r\n\r\n"],"labels":["area: router","area: server"]},{"title":"feat(core): add optional typing to `SimpleChange` and `SimpleChanges`","body":"it will fall back to any type if none is provided\r\nusage of it will be like\r\n```ts\r\nngOnChanges(changes: SimpleChanges<{foo: string, bar: number}>)\r\n```\r\n\r\nthis has some important benefits\r\n1. it marks all the keys as optional\r\n2. if an object is provided, it won't allow any arbitrary property to be used\r\n3. all properties will inherit their correct type\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N\/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\nif someone is using strict typescript and doesn't handle `SimpleChanges` to miss a property then it will throw error, in most cases this is a real unhandled error\r\n\r\n## Other information\r\n","comments":["Note: Previous discussions on that topic are visible here #18444\/#22103","@jessicajaniuk, this is more of a FW core sub-team decision. So I'll defer to you :), Although seeing the presubmit this breaks a large set of test targets in G3.","@alan-agius4 Of course. I had added you since your 2 PRs were referenced here. I thought you might have some good suggestions \/ thoughts."],"labels":["breaking changes","area: core","detected: feature"]},{"title":"Add banner linking to new docs on old documentation site","body":"### Describe the problem that you experienced\n\nNowhere in the old documentation is cited the new docs site\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.io\/\n\n### Describe what you were looking for in the documentation\n\n_No response_\n\n### Describe the actions that led you to experience the problem\n\nWhen searching for \"Angular docs\" on a search engine (I tried with Google, Firefox and Edge), the first result is very likely to be angular.io instead of the newer angular.dev\n\n### Describe what you want to experience that would fix the problem\n\n Since there is the new angular.dev documentation and the old one is going to be deprecated in the near future, I suggest implementing at the top of the old doc site a banner saying that there is a newer site to reference, with a link to it\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["Currently Angular.dev isn't indexed as it's still in a beta status (cf https:\/\/angular.dev\/robots.txt) "],"labels":["area: adev-infra"]},{"title":"Allow `computed` computation function to access previous value","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nA long, interesting, and possibly unfinished [discussion](https:\/\/github.com\/angular\/angular\/discussions\/49683#discussioncomment-5598532) developed in sub-RFC 2 about signal APIs, pure functions, and [hysteresis](https:\/\/github.com\/angular\/angular\/discussions\/49683#discussioncomment-5612162).\r\n\r\nCan, and should, `computed` computation functions have access to their previous computation's result?\r\n\r\nI haven't personally run into an use-case for this, and I don't have enough knowledge to post an opinion, but figured we could resurface this, whether it's to continue the discourse or for visibility into why it can't (or won't) be done.\r\n\r\nResources:\r\n- Sub-RFC 2: https:\/\/github.com\/angular\/angular\/discussions\/49683\r\n- Thread in RFC (again): https:\/\/github.com\/angular\/angular\/discussions\/49683#discussioncomment-5598532\r\n- Comment where @alxhub says this is \"worth considering\" \ud83d\ude2c: https:\/\/github.com\/angular\/angular\/discussions\/49683#discussioncomment-5612162\r\n- SO question: https:\/\/stackoverflow.com\/questions\/77689615\/is-there-a-way-to-use-the-previous-value-of-a-computed-angular-signal\r\n- `ngxtension-platform`'s since-deprecated `computedExtended`: https:\/\/github.com\/nartc\/ngxtension-platform\/blob\/main\/libs\/ngxtension\/computed\/src\/computed.ts\n\n### Proposed solution\n\nPass the value to the computation function. I realize it's not as straightforward as this; I'm just trying to bring forth all the information I've gathered.\r\n\r\nhttps:\/\/github.com\/angular\/angular\/blob\/ca239e8b62017b8460d73e58085d0f1c53a642ff\/packages\/core\/primitives\/signals\/src\/computed.ts#L110-L117\r\n\r\n```ts\r\ntype SomeUnsetRepresentation = undefined; \/\/ or UNSET which is currently not exported?\r\nexport declare function computed<T>(\r\n  computation: (previousValue: T | SomeUnsetRepresentation) => T, \r\n  options?: CreateComputedOptions<T>\r\n): Signal<T>;\r\n```\n\n### Alternatives considered\n\nLots of potential solutions were proposed in [that thread](https:\/\/github.com\/angular\/angular\/discussions\/49683#discussioncomment-5598532) of the sub-RFC but none are ideal. (using RxJS; delaying computed; tracking the values independently; etc.)","comments":["This sounds a bit scary to me; it would mean that computeds are no longer a derivation of the state, but potentially about how the state was _changed_. To me, the beauty of signals is how all state \"falls out\" the recorded facts (`WritableSignal`)","Yep - this adds \"hysteresis\" to computeds, which drastically changes the mental model of state derivation. It could also be _very_ confusing since computeds are not guaranteed to be re-evaluated for every state change, so code like this _looks_ reasonable but doesn't work at all:\r\n\r\n```typescript\r\nconst sum = computed((prev) => prev + value());\r\n```\r\n\r\nI think we would like to understand what the use cases are where having access to the previous value makes something possible that was hard to do without it.","I'd argue that this is one of the situations where you want to use a stream and not a signal. Imho this is exactly why signals don't replace rxjs and that's not a bad thing."],"labels":["area: core","core: reactivity","cross-cutting: signals"]},{"title":"fix(compiler-cli): dom property binding check in signal extended diagnostic","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [x] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nCurrently, we have no warning when forgetting to call a signal in dom property binding\r\n\r\n```\r\n<div [id]=\"mySignal\"><\/div>\r\n```\r\n\r\n## What is the new behavior?\r\n\r\nThe compiler now checks if a signal is properly called on dom property bindings. The ideal solution would be for the compiler to check if dom property bindings in general are properly typed, but this is currently not the case, and it is a bigger task to land this change (see https:\/\/github.com\/angular\/angular\/pull\/54098).\r\n\r\nIn the meantime, we can maybe use the extended diagnostic for interpolated signals to catch these issues.\r\nObviously the name of the diagnostic is no longer accurate, but this PR is to start a discussion.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":[],"labels":["area: compiler","core: inputs \/ outputs"]},{"title":"FakeAsyncZone and RootZone used in conjunction can clobber interleaved timers of each other","body":"### Which @angular\/* package(s) are the source of the bug?\n\nzone.js\n\n### Is this a regression?\n\nYes\n\n### Description\n\nCurrently, Zone.js patches `setTimeout` and keeps a `tasksByHandleId` map to keep a `timerId` <-> `ZoneTask`\r\nrelationship. This map appears to be _global_ to each method per `window` (browser use case) \/ `global` instance and not per `Zone` as it's defined on `patchTimer`.\r\n\r\nTasks then use the return value from their schedule methods (such as `setTimeout`) to store this ID in `tasksByHandleId`. For example, in the case of a root zone with no wrapping it normally just calls\r\n`setNative` which may invoke `setTimeout` and we store the timer ID in the map. These IDs are monotonically increasing and therefore are never reused. However, in the case of [`fake-async-test`](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/zone.js\/lib\/zone-spec\/fake-async-test.ts#L69) it starts from `1` and increments it's own counters per task. \r\n\r\nIf you have a `Zone` that is using `setNative` and scheduling using the real browser scheduler and using `fake-async-zone` it is possible to generate two tasks that are both pending with the same ID because they don't know of each other. For example:\r\n\r\n```\r\nlet oldTimerId = \r\nrunInFakeAsyncZone(() => {\r\n  \/\/ Run a timer in such a way that it also returns the same timer ID\r\n  \/\/ but does not resolve, thus overwriting the taskMap\r\n  \/\/ Maybe it wasn't fired from an even and has to be flushed or something\r\n  oldTimerId = ...\r\n});\r\n\r\n\/\/ Run in <root>, running later\r\n\/\/ timerId == oldTimerId now\r\n\/\/ Therefore, `tasksByHandleId` is overwritten to use this ID\r\nlet timerId = setTimeout(() => console.log('I should run but never do'), 30000);\r\n\r\n\r\nrunInFakeAsyncZone(() => {\r\n  \/\/ We changed our mind, cancel the timer \r\n  clearInterval(oldTimerId)\r\n\r\n  \/\/ Actually, they shared an ID and `tasksByHandleId` was updated\r\n  \/\/ to point to the <root> task so `task.zone.cancelTask(task)` is invoked\r\n  \/\/ but the implementation uses `clearNative` and clears the <root> task\r\n  \/\/ meaning that the setTimeout never runs\r\n});\r\n```\r\n\r\nIn the above psuedo-code, the task that runs in some other zone is overwritten with one that runs the `root` later because of the shared map. In contexts outside of `fake-async-test`, it's likely never going to happen\r\nbecause the IDs are strictly monotonically increasing. But in `fake-async-test`, this is troublesome because they can overlap which is bad news when using a single global `tasksByHandleId`\r\n\r\nSome thoughts:\r\n\r\n1. I don't know if this use case is that common but it's at least common in a couple of Google tests that trigger this behaviour\r\n2. If overlap is not expected, the task map should probably assert and break early because this was a _huge pain_ to track down as not only is timing sensitive but it's also a read \/ write race\r\n3. If overlap is expected in some cases, we need to somehow handle this\r\n\r\nI've not included a full reproduction yet because the exact specifics are kind of hard to encode but I will try and get something up.\n\n### Please provide a link to a minimal reproduction of the bug\n\nN\/A; coming soon maybe\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular: HEAD\n```\n\n\n### Anything else?\n\n_No response_","comments":[],"labels":["area: zones"]},{"title":"docs(core): add signals charts explainers","body":"Preview the docs change: https:\/\/github.com\/angular\/angular\/blob\/b14fa29376936398e71ccc486416aba630f4f9da\/packages\/core\/primitives\/signals\/README.md\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [x] Tests for the changes have been added (for bug fixes \/ features)\r\n- [x] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nWhile reading through the signals implementation I noticed that there were no visual aids to explain how things worked.\r\n\r\nIssue Number: N\/A\r\n\r\n## What is the new behavior?\r\n\r\nThe signals implementation is not described visually for external readers.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nI'm happy to make as many revisions to these visuals as possible","comments":["Spoke with @alxhub at ngConf - problem here is that cost of updating an SVG isn't worth the tradeoff. Instead, suggested to migrate to Mermaid\r\n\r\nInformated @alxhub that Mermaid is supported in GitHub markdown preview:\r\n\r\nhttps:\/\/github.blog\/2022-02-14-include-diagrams-markdown-files-mermaid\/"],"labels":["area: docs"]},{"title":"Better `hasValidator` or `getValidators` support","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\nforms\n\n### Description\n\nCurrently, the `AbstractControl` has a method (`hasValidator`) to check if a validator is present on a control. However, the docs warns us that this only works if the same reference is used. This is kind of useless when we are building components that relies on the existence of a specific validator *type* (e.g. `maxLength`).\r\n\r\nAlso, I would definitely move the `hasValidator` and\/or `getValidators` (which currently does not exist) to one level above, to the `NgControl`, since the `NgModel` collects its validators directly.\n\n### Proposed solution\n\nIn JS, a function can have extra properties, so the built-in `ValidatorFn` could be extended with a `type` and a `metadata` fields. This way, we could query if a validator type is present on the control or not. See alternative below.\r\n\r\nPossible API:\r\n```\r\nhasValidator(predicate: (validator: MarkedValidatorFn) => boolean): boolean;\r\nhasValidator(type: string): boolean;\r\nfindValidator(predicate: (validator: MarkedValidatorFn) => boolean): MarkedValidatorFn | null;\r\nfindValidator(type: string): MarkedValidatorFn | null;\r\n```\r\n\r\nThese functions would be useful to implement common form logic (e.g. x\/y characters used, etc.).\n\n### Alternatives considered\n\nWe can work around this by implementing it in our own, however it uses private API.\r\n\r\n```\r\nimport { type ValidatorFn, Validators as AngularValidators } from '@angular\/forms';\r\n\r\nexport type MarkedValidatorFn = ValidatorFn & { type: string, metadata: unknown };\r\n\r\nexport class Validators {\r\n\r\n  static extendValidatorWithMetadata(validatorFn: ValidatorFn, type: string, metadata?: unknown): MarkedValidatorFn {\r\n    const fn = validatorFn as MarkedValidatorFn;\r\n    fn.type = type;\r\n    fn.metadata = metadata;\r\n    return fn;\r\n  }\r\n\r\n  static required = (): MarkedValidatorFn => this.extendValidatorWithMetadata(AngularValidators.required, 'required');\r\n\r\n  static maxLength = (max: number): MarkedValidatorFn => this.extendValidatorWithMetadata(AngularValidators.maxLength(max), 'maxLength', { max });\r\n}\r\n```\r\n\r\nThen, adding it to a control like this:\r\n`textControl = new FormControl<string>('', [Validators.required(), Validators.maxLength(4)]);`\r\n\r\nFinally, we can query it:\r\n```\r\n@ContentChild(NgControl) private readonly control: NgControl | undefined;\r\n\r\nngAfterContentInit(): void {\r\n  if (this.control?.control) {\r\n    const control = this.control.control;\r\n\r\n    if (this.control instanceof NgModel) {\r\n      \/\/ we must use NG_VALIDATORS injectable, a common API would be nice\r\n    } else {\r\n      const validators = (control as AbstractControl & { _rawValidators: MarkedValidatorFn[] })._rawValidators;\r\n      const isRequired = validators.some(validator => validator.type === 'required');\r\n      const maxLengthValidator = validators.find(validator => validator.type === 'maxLength');\r\n    }\r\n  }\r\n}\r\n```","comments":[],"labels":["area: forms"]},{"title":"Style guide updates","body":"### Describe the problem that you experienced\r\n\r\nThis is an umbrella issue to report improvements that have been suggested for the style guide. \r\n\r\n* #54341\r\n* #54277 \r\n* #54220\r\n* #52561\r\n* #49261\r\n* #46420\r\n\r\nPRs \r\n\r\n* #54084 ","comments":["IMO, the style guide should be consistent with Angular Components coding standards (and vice-versa).","Hi @JeanMeche! Thank you for this, if I might add on top off the missing member sequence reported in #54341, it could be interesting to also add the sorting of lifecycle methods as currently implemented by [sort-lifecycle-methods](https:\/\/github.com\/angular-eslint\/angular-eslint\/blob\/main\/packages\/eslint-plugin\/docs\/rules\/sort-lifecycle-methods.md) in @angular-eslint: after the constructor but before any other public method, and sorted in the same order they are called."],"labels":["P2","area: adev","area: docs"]},{"title":"Associate an attribute input to a specific directive","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\ncore\r\n\r\n### Description\r\n\r\nCurrently when 2 directives are applied to the same component with the same input name, when binding to this input all the relevant directives are binded, for example :\r\n```\r\n@Directive({\r\n  selector: '[appHighlight]'\r\n})\r\nexport class HighlightDirective {\r\n  @Input('color') backgroundColor: string;\r\n}\r\n\/\/ ----\r\n@Directive({\r\n  selector: '[appBorder]'\r\n})\r\nexport class BorderDirective {\r\n  @Input('color') borderColor: string;\r\n}\r\n\r\n```\r\n\r\n```\r\n<div appHighlight appBorder [color]=\"'red'\">Text highlight and border<\/div>\r\n```\r\nIn this example both directives are binded to the color red.\r\n\r\n### Proposed solution\r\n\r\n\r\nCan we have specific bind of input to a specific direcitve as so :\r\n\r\n```<div appHighlight appBorder [appHighlight.color]=\"'red'\" [appBorder.color]=\"blue\">Text highlight and border<\/div>```\r\n\r\n### Alternatives considered\r\n\r\nThere is currently a solution for this situation by doing a WrapperDirective and overriding this property, But this is redundant, since this requires maintaining an additional directive and this is obviously slower to write, also this solution is not obvious to newcomers and the proposed solution reminds the [class.some-class] class binding that angular already has.\r\n\r\n```\r\n@Directive({\r\n  selector: '[appBorderWrapper]'\r\n})\r\nexport class WrapperBorderDirective extends BorderDirective {\r\n  @Input('wrapper-color') borderColor: string;\r\n}\r\n```","comments":["You already can do it like this (and [playground](https:\/\/stackblitz.com\/edit\/angular-abewnf?file=src%2Fmain.ts)):\r\n```ts\r\n@Directive({\r\n  selector: '[appHighlight]'\r\n})\r\nexport class HighlightDirective {\r\n  @Input('appHighlight.color') backgroundColor: string;\r\n}\r\n```\r\nIf you want to be able to specify both `color` and `appHighlight.color`, you can do it like this (another [playground](https:\/\/stackblitz.com\/edit\/angular-downbg?file=src%2Fmain.ts)):\r\n```ts\r\n@Directive({\r\n  selector: '[appHighlight]'\r\n})\r\nexport class HighlightDirective {\r\n  @Input('color') nonspecificColor: string;\r\n  @Input('appHighlight.color') specificColor: string;\r\n  get color() { return this.specificColor ?? this.nonspecificColor }\r\n}\r\n```\r\nBut I'd recommend using this syntax:\r\n```html\r\n<div appHighlight=\"red\" appBorder=\"blue\">Text highlight and border<\/div>\r\n```\r\nIf each of these directives needs to take several arguments, you can use object literals, or maybe implement a directive for each argument, with some common data service behind all of them."],"labels":["area: core","core: inputs \/ outputs"]},{"title":"Angular 17 Prerendering (Static Site Generation (SSG)) does not wait until the request is done when using with Firebase","body":"### Which @angular\/* package(s) are the source of the bug?\n\nplatform-server\n\n### Is this a regression?\n\nYes\n\n### Description\n\nHi\r\n\r\nI'm pre-rendering an angular site with 100+ pages and each page has a simple call to Firebase to get data and then display them on the page. I put all routes in routes.txt\r\n\r\n \"prerender\": {\r\n   \"routesFile\": \"routes.txt\"\r\n },\r\n\r\nIt worked well until I realized that some of pre-render pages had empty content. Every time I run the prerender, it has random results, some pages works some pages don't. if I only have 2-5 routes, the pre-render works fine and consistent. My suspicious is that when pre-render, angular just blasts calls to Firebase and doesn't wait until Firebase returns the data, hence the empty pre-render page.\r\n\r\nIs there a way to set pre-render to do it synchronously or a way for prerender to wait until each page is finished?\r\n\r\nThank you so much in advance\r\n\n\n### Please provide a link to a minimal reproduction of the bug\n\n_No response_\n\n### Please provide the exception or error you saw\n\n```true\nno error\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.1.2\r\nNode: 20.11.0\r\nPackage Manager: npm 10.2.4\r\nOS: darwin arm64\r\n\r\nAngular: 17.1.2\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, platform-server\r\n... router, ssr\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1701.2\r\n@angular-devkit\/build-angular   17.1.2\r\n@angular-devkit\/core            17.1.2\r\n@angular-devkit\/schematics      17.1.2\r\n@angular\/fire                   17.0.1\r\n@schematics\/angular             17.1.2\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.2\n```\n\n\n### Anything else?\n\n_No response_","comments":["Can you please provide the code that you are using the make the request?","Hi Alan, \r\n\r\nThank you so much for a prompt reply. Attached you will find the minimal reproducible code. just run ng build and the problem should occur. \r\n\r\n[allchords.zip](https:\/\/github.com\/angular\/angular\/files\/14178410\/allchords.zip)\r\n\r\nIn routes.txt, there are 11 routes there. When I run \u00b4ng build\u00b4 it creates prerender in dist\/allchords\/browser of all 11 but not all of them have content inside. \r\n\r\n<img width=\"1288\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/1815907\/74945b57-6f7b-4217-ad17-822cbc975311\">\r\n\r\nBut if I run it again and again, sometimes it works with the same route. Or to prove it, just remove all other routes and only have one, then the prerender created correctly with content \r\n\r\n<img width=\"1462\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/1815907\/bcfe12e4-b4a9-424a-9516-7128ab16fc05\">\r\n\r\nI also noticed that shuffling around the order of route makes a difference in what gets to render successfully but I could not pin down what is the pattern here. Hence I suspect that this is either a race condition or pre-render don't wait for the call to finish.\r\n\r\n<img width=\"405\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/1815907\/91efa7e6-34cb-4a6c-9ca1-ae9f8b17267b\">\r\n\r\n\r\nThanks again and let me know if you need anything else from my side\r\n\r\nPung","Hi @pungme , don't know for how much time angular pre render process waits for the data from firebase , but to solve this you can use ResolveFn in routes file, with it you can directly get data in component using this.activatedRoute.data.subscribe fn.","Hi @imaksp, thank you for your help. Unfortunately I am not sure what you meant by that. Do you have any example that I can follow? Thanks! ","Hi, you can consider using this function for fetching data, instead of fetching it in _route.params.subscribe_\r\nhttps:\/\/angular.io\/api\/router\/ResolveFn#description\r\n\r\nIf you fetch data in resolve fn using firebase lib, data will be readily available to the component. ","Hi, adding one more thing, you are using following code in ngOnInit & using ngIf in template, in this angular has no proper way to find (during prerender) whether data loading is completed or not:\r\n```ts\r\n this.route.params.subscribe(params => {\r\n      this.firestore\r\n      .collection('songs', ref => \r\n        ref.where('url_id', '==', params[\"chordid\"])\r\n           .where('isPublished', '==', true)\r\n           .limit(1)\r\n      )\r\n      .valueChanges()\r\n      .subscribe((data: any[]) => {\r\n        \/\/ console.log(data[0].chords)\r\n        if (data.length > 0) {\r\n          this.songObject = data[0];\r\n      }\r\n}\r\n```\r\n\r\nSo I think Angular should add support for new function like [getStaticProps](https:\/\/nextjs.org\/docs\/pages\/building-your-application\/data-fetching\/get-static-props) from Next.js or ask user to use promise based resolveFn in route definition. \r\n\r\nthis way angular can make sure that data is loaded before prerender process for page starts.","I ran into this problem.  I didn't like the resolver function because it stops navigation during normal routing.  What I did instead was write a callable function that gives me the results.  Angular waits for these during prerendering or ssr.\r\n\r\n```\r\n\/\/ firebase function\r\nexport const getSongsForChordId = functions.https.onCall((data, context) => {\r\n  const {chordid} = data;\r\n  return db.collection(\"songs\").where(\"url_id\", \"==\" chordid)\r\n    .limit(20)\r\n    .get();\r\n});\r\n```\r\n\r\n```\r\n\/\/ service\r\nsongsForChordId$(chordid: string): Observable<Song[]> {\r\n    const SONG_KEY = makeStateKey<any>(`${chordid}-songs`);\r\n\r\n    if (this.transferState.hasKey(STATE_KEY)) {\r\n      const data = this.transferState.get<any>(SONG_KEY, null);\r\n      return of(data);\r\n    }\r\n    return httpsCallableData<GetSongsParams, Song[]>(\r\n      this.fn,\r\n      'getSongsForChordId'\r\n    )({ chordid }).pipe(\r\n      tap((songs) => {\r\n        this.transferState.set(SONG_KEY, songs);\r\n      })\r\n    );\r\n  }\r\n``","Hi,\r\n\r\nThank you so much for the suggestion! \r\n\r\nAnother observation I found that the first 4 routes always pre-rendered successfully. Is this an expected behaviour? \r\n\r\n@msacket @imaksp Thank you so much for your help! \ud83d\ude47\ud83c\udffb\u200d\u2642\ufe0f I tried the suggested solutions, but I'm having a bit of trouble wrapping my head around the current code and the new approach you suggested. Would you please be so kind as to provide a more descriptive explanation of which code I would need to change and so on?\r\n\r\nThank you very much,\r\nPung","We are also facing similar issues after upgrading to Angular 17 (17.0.4). We are using GraphQL (apollo-angular client) to fetch content from Contentful CMS and rendering around 800+ routes. The pre-rendering process doesn't seem to wait for  the content to be fetched for some pages (random). It used to work for Angular 16 `@nguniversal\/builders`","@subhamoy-ghosh  Great to hear that I'm not alone. I will try to downgrade to Angular 16 and see if the problem is fixed ","@pungme I don't believe a downgrade will fix your problem.  I believe Angular is or was intercepting http requests in `zone.js` to wait for them to complete.   It appears there is a different method now see (https:\/\/dev.to\/krisplatis\/angular-ssr-v16-saying-goodbye-to-a-sneaky-trick-macrotask-wrapping-for-http-calls-487b). \r\n\r\nFirestore is using websockets to push real-time updates.  That's why you'd need to use a callable function (http request) to fetch the data instead.  Angular SSR handles those just fine.","Hello all, just checked the above article it seems Angular is tracking all http requests using interceptor, but I believe this solution should only be used for SSR. & its overkill for simple SSG like use case.\r\n\r\nfor SSG (& SSG with ISR) simple solution like Next.js's   [getStaticProps](https:\/\/nextjs.org\/docs\/pages\/building-your-application\/data-fetching\/get-static-props) should be supported, with this approach it will be easier to debug. \r\nAlso this function will [only run on server](https:\/\/nextjs.org\/docs\/pages\/building-your-application\/data-fetching\/get-static-props#when-does-getstaticprops-run) (so more clear separation) & we can safely use secret keys to fetch static data from CMS.\r\n\r\n@eneajaho what's your though on this ?"],"labels":["area: server","state: needs more investigation"]},{"title":"fix(router): Routed components never inherit `RouterOutlet` `Environm\u2026","body":"\u2026entInjector`\r\n\r\nThis commit ensures components in the route config predictably always get their providers from the hierarchy available to routes rather than sometimes being dependent on where they are inserted.\r\n\r\nfixes #53369\r\n\r\nBREAKING CHANGE: Providers available to the routed components always come from the injector heirarchy of the routes and never inherit from the `RouterOutlet`. This means that providers available only to the component that defines the `RouterOutlet` will no longer be available to route components in any circumstances. This was already the case whenever routes defined providers, either through lazy loading an `NgModule` or through explicit `providers` on the route config.\r\n","comments":["TGP=https:\/\/fusion2.corp.google.com\/presubmit\/608676576\/OCL:608676576:BASE:611170876:1709182987304:d164f545\/targets","caretaker note: Will need to patch this change to tracking_router_outlet when sycning cl\/608676576","This PR was merged into the repository by commit da906fdafcbb302fa280a162d1c1f04369be2efa."],"labels":["area: router","target: major","detected: breaking change","requires: TGP"]},{"title":"Improve form initialization performance by removing template-driven code from reactive form directives","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\n_No response_\n\n### Description\n\nAs of today, every instantiation of a reactive form directive triggers a call to the corresponding `AbstractControl.updateValueAndValidity()`. A few stacktraces to show where this happens:\r\n1. `[formControl]`:\r\n    * [form_control_directive.ts:128](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/forms\/src\/directives\/reactive_directives\/form_control_directive.ts#L128)\r\n2. `[formControlName]`:\r\n    * [form_control_name.ts:145](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/forms\/src\/directives\/reactive_directives\/form_control_name.ts#L145)\r\n    * [form_control_name.ts:206](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/forms\/src\/directives\/reactive_directives\/form_control_name.ts#L206)\r\n    * [form_group_directive.ts:170](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/forms\/src\/directives\/reactive_directives\/form_group_directive.ts#L170)\r\n3. `[formGroupName]`:\r\n    * [form_group_name.ts:74](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/forms\/src\/directives\/reactive_directives\/form_group_name.ts#L74)\r\n    * [abstract_form_group_directive.ts:40](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/forms\/src\/directives\/abstract_form_group_directive.ts#L40)\r\n    * [form_group_directive.ts:202](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/forms\/src\/directives\/reactive_directives\/form_group_directive.ts#L202)\r\n    * [form_group_directive.ts:332](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/forms\/src\/directives\/reactive_directives\/form_group_directive.ts#L332)\r\n\r\nThese `AbstractControl.updateValueAndValidity()` calls mean that every time a new `[formControl]`\/`[formControlName]`\/`[formGroupName]`\/`[formArrayName]` directive is instantiated in the template, a significant part of the form tree has to reduce value again, and rerun validation checks.\r\n\r\n## Performance implications\r\n\r\nIf we consider an example of a `FormArray` with `N` `FormControl`s inside, and some non-trivial validation at the `FormArray` level ([demo](https:\/\/stackblitz.com\/edit\/angular-cz2rek?file=src%2Fapp%2Fapp.component.html)), then we'll quickly see that this is a significant amount of work. More specifically, just displaying this form causes:\r\n* the `FormArray` to allocate an array of size `N` (for storing value), `N` times.\r\n* the `FormArray`-level validator to be rerun `N` times\r\n\r\nMoreover, all of this work appears unnecessary, because:\r\n* the form being rendered (or not) should have no impact on the form state (stored in the tree of `AbstractControl`s),\r\n* we are rerunning all of these validation checks with the exact same form value, getting the same results, every time.\r\n\r\n## So why do we have it?\r\n\r\nIt seems that these calls are remnants of the days when the template-driven and reactive forms frameworks were a single thing. I can imagine that these may be needed to:\r\n* support the [`ngModel` on reactive form directives](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/forms\/src\/directives\/reactive_directives\/form_control_directive.ts#L79-L103)\r\n* [support the setting of template-driven validators through reactive form directives](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/forms\/src\/directives\/reactive_directives\/form_control_directive.ts#L115-L116)\r\n\r\nUsing these features is a terrible idea, and they have been deprecated for at least 5 years now (https:\/\/github.com\/angular\/angular\/issues\/12708, https:\/\/github.com\/angular\/angular\/pull\/22633, https:\/\/github.com\/angular\/angular\/pull\/28996).\r\n\r\n\n\n### Proposed solution\n\nCan we please remove the leftovers of these legacy features, and get the performance benefits?\n\n### Alternatives considered\n\nN\/A","comments":[],"labels":["area: forms"]},{"title":"CSS scoping seems to convert properties","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\ncompiler\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nIn my monorepo I implemented a component defining a `container` css property:\r\n\r\n```css\r\n:host {\r\n    container: host \/ inline-size;\r\n}\r\n```\r\n\r\nThis component is part of @company\/components.\r\nWhen using the component locally it works fine, but when implementing the published rc version in another repository the component css is scoped and results in:\r\n\r\n```css\r\n:host {\r\n    container-shadowcsshost-no-combinator\/inline-size\r\n}\r\n```\r\n\r\nAfter looking in the angular source code I see the only file containing `-shadowcsshost` is [shadow_css.ts](https:\/\/github.com\/angular\/angular\/blob\/2ab536ee3ed43cf1d20d0d073f133eb9225d6921\/packages\/compiler\/src\/shadow_css.ts).\r\n\r\nMy assumption is that it is too eagerly replacing `:host` in this case.\r\n\r\n> The same happens to any css property that allows the word `host` to be the first part of the property value:\r\n> 1. `grid-area: host` > `grid-area-shadowcsshost-no-combinator`\r\n> 2. `container-name: host-element` > `container-name-shadowcsshost-no-combinator-element`\r\n\r\n### Workaround\r\n\r\nNever use `host` as the first part of the property value inside the `:host` selector.\r\nWe decided on using `component` instead when naming container queries.\r\n\r\n```css\r\n:host {\r\n    container: component \/ inline-size;\r\n}\r\n```\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\n_No response_\r\n\r\n### Please provide the exception or error you saw\r\n\r\nThe `<script>` tag with the scoped css in the implementing application shows:\r\n\r\n```css\r\n:host {\r\n    container-shadowcsshost-no-combinator\/inline-size\r\n}\r\n```\r\n\r\ninstead of:\r\n\r\n```css\r\n:host {\r\n    container: host \/ inline-size;\r\n}\r\n```\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 17.0.3\r\nNode: 20.9.0\r\nPackage Manager: pnpm 8.10.5\r\nOS: darwin arm64\r\n\r\nAngular: 17.0.4\r\n... animations, common, compiler, compiler-cli, core, forms\r\n... language-service, platform-browser, platform-browser-dynamic\r\n... router, service-worker\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1700.3\r\n@angular-devkit\/build-angular   17.0.3\r\n@angular-devkit\/core            17.0.3\r\n@angular-devkit\/schematics      17.0.3\r\n@angular\/cdk                    17.0.1\r\n@angular\/cli                    17.0.3\r\n@schematics\/angular             17.0.3\r\nng-packagr                      17.0.2\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nwebpack                         5.89.0\r\nzone.js                         0.14.2\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\nI'm using default `ViewEncapsulation.Emulated`","comments":["Quick investigation on my part, this happens only on prod builds when spaces are striped. `container: host` becomes `container:host` and `:host` is mistaked as selector.   I'm investigating a fix for this, but I'm not sure this is going to be easy. \r\n\r\nThe obvious workaround is to rename your container name to something else than `host`. ","> Quick investigation on my part, this happens only on prod builds when spaces are striped. `container: host` becomes `container:host` and `:host` is mistaked as selector. I'm investigating a fix for this, but I'm not sure this is going to be easy.\r\n> \r\n> The obvious workaround is to rename your container name to something else than `host`.\r\n\r\nHi @JeanMeche, thanks for the quick investigation, I completely agree that a simple rename is an obvious workaround.\r\n\r\nIn our design system we decided on the convention of using `component` as the container name.\r\nI've added a workaround section to the issue description.\r\n\r\nI do think that as adoption of container queries will grow, using a named container query on the `:host` element is a very common use case and naming the container `host` is obvious.\r\n\r\nPairing this with the fact that this **only happens on production builds** and **understanding why this bug occurs is not obvious** it can lead to quite some frustrations.\r\n\r\nConsidering the cause of the issue my understanding is that there is no clear distinction made between selectors and properties used within the `:host` selector.","Considering the solution I can understand it's tricky considering regex limitations and performance.\r\n\r\nA working draft solution which: \r\n- doesn't change the `_colonHostRe` regex\r\n- requires an array of properties where `:host` should be kept\r\n- succeeds all tests in `host_and_host_context_spec.ts`\r\n- might need performance improvements\r\n\r\n### Before\r\n```ts\r\n\/\/ packages\/compiler\/src\/shadow_css.ts\r\nprivate _insertPolyfillHostInCssText(selector: string): string {\r\n  return selector.replace(_colonHostContextRe, _polyfillHostContext)\r\n      .replace(_colonHostRe, _polyfillHost);\r\n}\r\n```\r\n### After\r\n\r\n```ts\r\n\/\/ packages\/compiler\/src\/shadow_css.ts\r\n\r\n\/\/ Some CSS properties allow the keyword `host` to be used as a value.\r\n\/\/ When for example `container:host\/inline-size` is used, the `:host` part should not be replaced.\r\nconst _colonHostKeepInProperties = ['container', 'container-name'];\r\n\r\nprivate _insertPolyfillHostInCssText(selector: string): string {\r\n    return selector\r\n        .replace(_colonHostContextRe, _polyfillHostContext)\r\n        .replace(_colonHostRe, this._determinePolyfillHostReplacement.bind(this));\r\n}\r\n\r\nprivate _determinePolyfillHostReplacement(match: string, offset: number, fullSelector: string): string {\r\n    let shouldKeepMatch = false;\r\n    for (let i = 0; i < _colonHostKeepInProperties.length; i++){\r\n        let property = _colonHostKeepInProperties[i];\r\n        \/\/ Verifies if 'property' precedes 'match' exactly, indicating ':host' should be kept.\r\n        if (offset >= property.length && fullSelector.lastIndexOf(property, offset - 1) === offset - property.length) {\r\n            shouldKeepMatch = true;\r\n            break;\r\n        }\r\n    }\r\n    return shouldKeepMatch ? match : _polyfillHost;\r\n}\r\n```\r\n\r\n### Added test\r\n\r\n```ts\r\nit('should handle property values starting with host', () => {\r\n  expect(shim(':host {container-name:host}', 'contenta', 'a-host')).toEqualCss('[a-host] {container-name:host}');\r\n});\r\n```","Note that, performance could be considered secondary as this is run at compiler time when using the recommanded AOT. As opposed to the already less performant JIT. ","@JeanMeche I've updated the draft solution to be more clear (and performant)\r\n\r\nDo you think this is a feasible approach or do you have any thoughts on other approaches?\r\n\r\nI've never contributed to the Angular repo but I'm willing to give it a go and create a PR with these changes (seems a bit daunting though \ud83d\ude07 )\r\n\r\nI just don't want to put in this effort if you deem my working draft to be the wrong way to approach resolving the issue.","I have a sneaky feeling that the list of properties will be hard to maintain. On the top of my mind, I know at least `grid-area` will have the same issue. \r\n\r\nI we land an improvement it should me more generic. I we can come up we a better solution, I can guide through the process of landing a PR. ","I agree that it might be hard to maintain using a property list.\r\n\r\nI haven't found a way to get rid of the property list without introducing side effects (and breaking other cases).\r\n\r\nMy other thought was to actually parse the CSS to construct a syntax tree in order to analyse the context in a more robust manner and identify when `:host` is part of a selector.\r\n\r\n---\r\n\r\n@JeanMeche if using an npm package like `postcss` is an option the solution would retain the current simplicity while allowing for much more robust replacements:\r\n\r\n```ts\r\nprivate _insertPolyfillHostInCssText(selector: string): string {\r\n    const selectorAst = postcss.parse(selector);\r\n\r\n    \/\/ Walking through the CSS nodes to find and replace :host in selectors only\r\n    selectorAst.walkRules((rule) => {\r\n        rule.selector = rule.selector\r\n            .replace(_colonHostContextRe, _polyfillHostContext)\r\n            .replace(_colonHostRe, _polyfillHost);\r\n    });\r\n\r\n    return selectorAst.toString();\r\n}\r\n```\r\n\r\n> NB. I have done an isolated test which works, but implementing it in the `shadow_css.ts` and running the tests gives me a `postcss` not found error (might be my lack of familiarity with the Angular repo \/ Bazel).\r\n\r\nMy only concern is introducing `postcss` (or a more lightweight solution like `css-tree`) as a `devDependency` in the compiler project since I currently don't see any external dependencies being used.\r\n"],"labels":["workaround1: obvious","area: core","core: CSS encapsulation","bug"]},{"title":"feat: sec for security type","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nWhen contributors are making changes, I want them to easily prefix their commits using Conventional Commits, so they distinguish the type of the commit, including security type changes.\r\n\r\nWhen I'm reading through commits, I want an easy way to quickly distinguish them, so their purpose is clear including security updates.\r\n\r\nContributors can select types:\r\n```\r\nfeat:\r\nfix:\r\nbuild:\r\nchore:\r\nci:\r\ndocs:\r\nperf:\r\nrefactor:\r\nrevert:\r\nstyle:\r\ntest:\r\n```\n\n### Proposed solution\n\nContributors would be able to select `sec:` for a security type changes.\n\n### Alternatives considered\n\nn\/a","comments":[],"labels":["area: dev-infra"]},{"title":"ADEV: do not show \"On this page\" section if there is only 1 item available","body":"For example, see https:\/\/angular.dev\/errors\/NG0507 - it contains only 1 section and the \"On this page\" block looks redundant. The proposal is to update the code to show \"On this page\" if there is more than one item in that list.","comments":["PR is open on the `dev-infra` repo. ","Thanks @JeanMeche!"],"labels":["state: has PR","area: adev-infra"]},{"title":"Css properties order matters","body":"### Which @angular\/* package(s) are the source of the bug?\n\nDon't known \/ other\n\n### Is this a regression?\n\nNo\n\n### Description\n\nI couldn't build my library after adding a font to it.\r\nI build with ```ng build look-n-play```.\r\nIt just leads to an infinite halt, where all I see is ```\u2834 Compiling with Angular sources in Ivy full compilation mode.```, even the ascii animation stops.\r\nI managed to trace the bug to @font-face css-rule. If I comment it out, the build proceeds.\r\nSo play-around led to discovery, that order-swap from font-family->src to src->font-family makes build proceed just fine. And more importantly it just works.\r\n\r\nThe file\r\nprojects\/look-n-play\/src\/typography.scss\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/github.com\/EKashpersky\/look-n-play\n\n### Please provide the exception or error you saw\n\n```true\nNo exceptions, blank halt\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.1.1\r\nNode: 20.3.0\r\nPackage Manager: npm 9.6.7\r\nOS: darwin arm64\r\n\r\nAngular: 17.1.1\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1701.1\r\n@angular-devkit\/build-angular   17.1.1\r\n@angular-devkit\/core            17.1.1\r\n@angular-devkit\/schematics      17.1.1\r\n@schematics\/angular             17.1.1\r\nng-packagr                      17.1.2\r\nrxjs                            7.8.1\r\ntypescript                      5.3.3\r\nzone.js                         0.14.3\n```\n\n\n### Anything else?\n\n_No response_","comments":["It's a strange issue, from my investigations the library build fails when `src` is the last rule of the `@font-face` (and only with full compilation, not the partially compiled library)  \r\nAlso this does not reproduce when the src path is absolute. \r\n\r\n"],"labels":["area: compiler","P3","bug"]},{"title":"cant seem to run the angular.dev example https:\/\/angular.dev\/api\/core\/ContentChild?tab=usage-notes","body":"### Describe the problem that you experienced\r\n\r\nHow to run this example that is part of the angular.dev documentation https:\/\/angular.dev\/api\/core\/ContentChild?tab=usage-notes\r\n```\r\n\/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https:\/\/angular.io\/license\r\n *\/\r\nimport {Component, ContentChild, Directive, Input} from '@angular\/core';\r\n@Directive({selector: 'pane'})\r\nexport class Pane {\r\n  @Input() id!: string;\r\n}\r\n@Component({\r\n  selector: 'tab',\r\n  template: `\r\n    <div>pane: {{ pane?.id }}<\/div>\r\n  `,\r\n})\r\nexport class Tab {\r\n  @ContentChild(Pane) pane!: Pane;\r\n}\r\n@Component({\r\n  selector: 'example-app',\r\n  template: `\r\n    <tab>\r\n      <pane id=\"1\" *ngIf=\"shouldShow\"><\/pane>\r\n      <pane id=\"2\" *ngIf=\"!shouldShow\"><\/pane>\r\n    <\/tab>\r\n    <button (click)=\"toggle()\">Toggle<\/button>\r\n  `,\r\n})\r\nexport class ContentChildComp {\r\n  shouldShow = true;\r\n  toggle() {\r\n    this.shouldShow = !this.shouldShow;\r\n  }\r\n}\r\n```\r\n\r\n### Enter the URL of the topic with the problem\r\n\r\nhttps:\/\/angular.dev\/api\/core\/ContentChild?tab=usage-notes\r\n\r\n### Describe what you were looking for in the documentation\r\n\r\ni am under the impression that the example given here needs to be runnable as developers who are new to the angular framework could also be visiting these pages and try to run the code.\r\ni am able to run the code as \r\n```\r\nimport { CommonModule } from '@angular\/common';\r\nimport { Component, ContentChild, Directive, Input } from '@angular\/core';\r\n\r\n@Directive({ selector: '[billiPane]', standalone: true })\r\nexport class PaneDirective {\r\n  @Input() id!: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'billi-tab',\r\n  template: `\r\n    <div>\r\n      pane: {{ pane.id }}\r\n      <ng-content \/>\r\n    <\/div>\r\n  `,\r\n  standalone: true,\r\n})\r\nexport class TabComponent {\r\n  @ContentChild(PaneDirective) pane!: PaneDirective;\r\n}\r\n\r\n@Component({\r\n  selector: 'billi-example-app',\r\n  standalone: true,\r\n  template: `\r\n    <billi-tab>\r\n      <div\r\n        billiPane\r\n        id=\"1\"\r\n        *ngIf=\"shouldShow\"\r\n        height=\"500\"\r\n        style=\"background: red;\">\r\n        some content\r\n      <\/div>\r\n\r\n      <div billiPane id=\"2\" *ngIf=\"!shouldShow\"><\/div>\r\n    <\/billi-tab>\r\n    <button (click)=\"toggle()\">Toggle<\/button>\r\n  `,\r\n  imports: [PaneDirective, TabComponent, CommonModule],\r\n})\r\nexport class ContentChildComponent {\r\n  shouldShow = true;\r\n  toggle() {\r\n    this.shouldShow = !this.shouldShow;\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'billi-for-demo',\r\n  standalone: true,\r\n  imports: [CommonModule, ContentChildComponent],\r\n  template: `<billi-example-app><\/billi-example-app>`,\r\n  styleUrl: '.\/ForDemo.component.scss',\r\n})\r\nexport class ForDemoComponent {}\r\n```\r\n\r\n### Describe the actions that led you to experience the problem\r\n\r\n_No response_\r\n\r\n### Describe what you want to experience that would fix the problem\r\n\r\n_No response_\r\n\r\n### Add a screenshot if that helps illustrate the problem\r\n\r\n_No response_\r\n\r\n### If this problem caused an exception or error, please paste it here\r\n\r\n_No response_\r\n\r\n### If the problem is browser-specific, please specify the device, OS, browser, and version\r\n\r\n_No response_\r\n\r\n### Provide any additional information here in as much as detail as you can\r\n\r\n_No response_","comments":[],"labels":["P3","area: adev"]},{"title":"test(core): onStable subscriptions that re-enter zone are valid","body":"This removes a comment in the `NgZone` code about preventing re-entry when an `onStable` subscriber executes something inside the zone. This _should_ cause the zone to become unstable again and emit both `microtaskEmpty` and `onStable` when finished. Preventing bad code from hitting an infinite loop by disallowing this would break completely valid use-cases.\r\n","comments":[],"labels":["target: patch"]},{"title":"Documentation missing \"Usage Notes\" tab","body":"### Describe the problem that you experienced\n\nThe \"Usage Notes\" tab of the HostListener page is missing.\r\n\r\nLinks:\r\n- [angular.io page](https:\/\/angular.io\/api\/core\/HostListener#usage-notes)\r\n- [angular.dev page](https:\/\/angular.dev\/api\/core\/HostListener?tab=usage-notes)\n\n### Enter the URL of the topic with the problem\n\n_No response_\n\n### Describe what you were looking for in the documentation\n\n_No response_\n\n### Describe the actions that led you to experience the problem\n\n_No response_\n\n### Describe what you want to experience that would fix the problem\n\n_No response_\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["I can take a look at this"],"labels":["state: has PR","P3","area: adev"]},{"title":"Documentation broken link","body":"### Describe the problem that you experienced\n\nThe [ChangeDetectionStrategy](https:\/\/angular.dev\/api\/core\/ChangeDetectionStrategy) has a broken link.\r\n\r\nHere is the correct link: [ChangeDetectorRef Usage Notes](https:\/\/angular.dev\/api\/core\/ChangeDetectorRef?tab=usage-notes)\n\n### Enter the URL of the topic with the problem\n\n_No response_\n\n### Describe what you were looking for in the documentation\n\n_No response_\n\n### Describe the actions that led you to experience the problem\n\n_No response_\n\n### Describe what you want to experience that would fix the problem\n\n_No response_\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["Hi, thanks for reporting this. \r\nBtw, we have the same issue on https:\/\/angular.dev\/api\/core\/ViewRef","@JeanMeche Hey Jean, I'm trying to find it in the adev repository to tweak it, but I can't find it. Do you have any idea where this is?!\r\n","This part is handled in the `dev-infra` repo, which makes the change a bit more compilated. \r\n\r\nhttps:\/\/github.com\/angular\/dev-infra "],"labels":["P3","area: adev"]},{"title":"feat(core): allow optional type parameter in DebugElement to specify NativeElement's type","body":"\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N\/A\r\n\r\nCurrently the `.nativeElement` property of [DebugElement](https:\/\/angular.dev\/api\/core\/DebugElement) has `any` as return type. This is not ideal.\r\n\r\n\r\n## What is the new behavior?\r\n\r\nIt  can be improved by allowing an optional parameter to be passed, for example:\r\n\r\n```\r\ndebugElement.query<HTMLDivElement>('#this-id-belongs-certainly-to-a-div');\r\n```\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["@pkozlowski-opensource @jessicajaniuk  any chance this can get reviewed?","Please have a look at the different CI checks. \r\n\r\nChanging `get nativeElement(): any` to `get nativeElement(): NativeElementType | null` is a breaking change that should be addressed by a migration schematics at least. ","> Please have a look at the different CI checks.\r\n> \r\n> Changing `get nativeElement(): any` to `get nativeElement(): NativeElementType | null` is a breaking change that should be addressed by a migration schematics at least.\r\n\r\nthanks @JeanMeche , now I can see more checks running and indeed some of them fail. Can you please point to an example of how to address this with a migration schematic?","You'll find our existing migrations for v17 here: https:\/\/github.com\/angular\/angular\/tree\/main\/packages\/core\/schematics\/migrations ","@JeanMeche I'm a bit lost... From the additional test runs shown after you approved the workflow run I saw 2 failures and I force-pushed in order to fix one of them, but now they are not running again and I don't know how to spot the remaining failures again. Is there a way to reproduce them locally? Any hints?"],"labels":["action: review","breaking changes","area: core","detected: feature"]},{"title":"fix(service-worker): avoid running CDs on `controllerchange`","body":"This commit updates the implementation of `ngswAppInitializer` to configure the `controllerchange` event listener outside of the Angular zone. This adjustment is made to prevent unnecessary change detections, as the `controllerchange` event is unrelated to view updates.\r\n\r\n**NOTE**: This change may result in breaking unit tests that implicitly rely on a specific number and sequence of change detections for their assertions to pass.","comments":["@arturovt thanks for creating this PR. As you've mentioned, there might be breakages for tests, so I've added this PR to the v18 milestone. We'll review it once the main branch is open for v18 changes."],"labels":["action: review","target: major","area: service-worker"]},{"title":"fix(core): Ensure query results are correct at the end of change dete\u2026","body":"\u2026ction\r\n\r\nThis commit updates the query logic to ensure that queries that become dirty after they have been checked are refreshed again in the same change detection loop. This eliminates `ExpressionChanged`... errors for _content_ queries because those are updated in the host, before they are read in the child. That said, if the component with `ContentQuery` is `OnPush` and does not mark itself dirty, it will still not be refreshed.\r\n\r\nReading view queries directly in the owner template will still result in `ExpressionChanged...` errors because view queries are not updated until after the view executes.\r\n\r\nThis change cannot directly address all unidirectional data flow issues with classic `ViewQuery` and `ContentQuery`. However, it does serve to ensure the query results at least are correct and complete after change detection runs. Developers _can_ use the `.changes` observable to receive these changes and subsequently make updates to signals that are used in templates. In addition, this means that we do not need to refresh queries during the `checkNoChanges` pass in order to surface `ExpressionChanged...` errors because we already have the latest query values by this time.\r\n","comments":[],"labels":["area: core","target: patch"]},{"title":"Validators do not always work the expected way","body":"### Which @angular\/* package(s) are the source of the bug?\n\nforms\n\n### Is this a regression?\n\nNo\n\n### Description\n\nWe've come across to what I think is a bug in form validation in reactive forms. Stackblitz is kind of self-explanatory, but to sum it up, when creating FormControl (that is not visible right away on the view), validation works differently depending on how validators are passed onto the control (simple validator vs array of validators).\r\n\r\nIf you open the stackblitz, and right away click on the buttons you'll see that one of the forms shows an alert and the other doesn't. The only difference between these two is the validatorOrOpts param used to create the controls.\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/stackblitz.com\/edit\/stackblitz-starters-378jka?file=src%2Fmain.ts\n\n### Please provide the exception or error you saw\n\n```true\nBoth forms should either be valid or invalid (based on the expected behaviour from the Angular team) instead of varying based on how the ValidatorFn are passed.\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.1.2\r\nNode: 18.18.0\r\nPackage Manager: npm 10.2.3\r\nOS: linux x64\r\n\r\nAngular: 17.1.2\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1701.2\r\n@angular-devkit\/build-angular   17.1.2\r\n@angular-devkit\/core            17.1.2\r\n@angular-devkit\/schematics      17.1.2\r\n@schematics\/angular             17.1.2\r\nrxjs                            7.8.1\r\ntypescript                      5.3.3\r\nzone.js                         0.14.3\n```\n\n\n### Anything else?\n\nAfter further testing looks like changing the validator's return from\r\n```\r\n  static test(control: AbstractControl): ValidationErrors | null {\r\n    return {\r\n      ...Validators.maxLength(10)(control),\r\n    };\r\n  }\r\n```\r\nto\r\n```\r\n  static test(control: AbstractControl): ValidationErrors | null {\r\n    return Validators.maxLength(10)(control);\r\n  }\r\n```\r\n\r\nsolves the issue, but looks like a random difference in validation :\/\r\n\r\nIn our case we're using the first to return all the errors in one (as we have some complex validators that might need of all the errors to properly build feedback for the user).","comments":["The root cause here is that when a control has an array of validators, they go through the `compose` function, and when there's only a single validator (not wrapped in an array) the compose code path is skipped:\r\n\r\nhttps:\/\/github.com\/angular\/angular\/blob\/74aa8a3888dcc95817138ef2b1906216605f48fd\/packages\/forms\/src\/model\/abstract_model.ts#L1392\r\nhttps:\/\/github.com\/angular\/angular\/blob\/74aa8a3888dcc95817138ef2b1906216605f48fd\/packages\/forms\/src\/model\/abstract_model.ts#L79-L81\r\n\r\nAs you found out, the `compose` path uses `Object.keys().length` to convert an empty object to null, which causes the array version to be treated as valid, and the non-array version is treated as invalid because it lacks that conversion.\r\n\r\nI think the question here is whether an empty object should be:\r\n\r\n1. invalid\r\n2. valid\r\n3. avoided\r\n\r\nCurrently it's both (1) and (2)"],"labels":["area: forms"]},{"title":"Exact supported Browserversions","body":"### Describe the problem that you experienced\n\nThe docs state, that the 2 most recent chrome versions are supported. As chrome releases in a 4 week releasecycle it is pretty hard to determine which exactly are meant. \n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.io\/guide\/browser-support\n\n### Describe what you were looking for in the documentation\n\n_No response_\n\n### Describe the actions that led you to experience the problem\n\nCustomers ask us which browsers they need to use. As we are in an industrial environment, it's not given, they are always on the latest browsers\n\n### Describe what you want to experience that would fix the problem\n\nIt would make sense to state the exact minimum browser version alongside the releases angular version.\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["It would be an immense effort to determine the \"minimum required version\". Basically Angular would need to start with the current browser version and repeatedly downgrade Chrome and for each version run their tests to see if there are any errors. But even if there are no errors in the test scenarios, this doesn't say much because the application's code or third party dependencies could cause issues with older browser versions. IMHO it doesn't make any sense to mention some kind of \"minmum required version\".\r\n\r\nIf you need to ensure compatibility with older Chrome versions, you should add custom tests to your application which are to be executed on older Chrome versions.","yes right, for me it would be sufficient to just explicitly note the last two chrome versions when releasing\r\n\r\njust for understanding. Does this mean, Angular 17.0.0 was announced 2023-11-08 at that time Chrome 119 was the freshest one. \r\n\r\nDoes this mean all Angular 17.x.x will at least support Chrome 118?"],"labels":["P3","area: docs"]},{"title":"Devtools tab not showing","body":"### Is this a bug report or a feature request?\r\n\r\n- [X] Bug Report\r\n- [ ] Feature Request\r\n\r\n### Please provide the steps to reproduce the issue [Bug Report only]\r\n\r\nI can't see the tab in chrome devtools..\r\nI even assigned a shortcut for it and when I use it I get a dialog that says\r\n```\r\nAngular application running development mode.\r\nOpen developer tools, and select the Angular tab.\r\n```\r\n\r\nBut it's still not there\r\n\r\n### Please provide the expected behavior vs the actual behavior you encountered [Bug Report only]\r\n\r\nthe tab should show :P","comments":["![Screenshot 2024-02-01 at 01 35 02](https:\/\/github.com\/angular\/angular\/assets\/1300985\/14924ca4-0142-4391-bf52-4bff370b6bef)\r\n\r\nDo you have it maybe in the expanded menu ? ","Nope...\r\n![Screenshot 2024-02-01 at 10 04 39](https:\/\/github.com\/angular\/angular\/assets\/598463\/e1d582e3-7638-439a-af72-b8a568b792f5)\r\n","Is it an Incognito tab?","Yeah, I had the same issue on Linux _Google Chrome Version 121.0.6167.139 (Official Build) (64-bit)_.\r\n\r\nI got the tab back, after removing\/reinstalling Angular DevTools + Browser restart.","> Yeah, I had the same issue on Linux _Google Chrome Version 121.0.6167.139 (Official Build) (64-bit)_.\r\n> \r\n> I got the tab back, after removing\/reinstalling Angular DevTools + Browser restart.\r\n\r\nI have tried to reinstall and restart so many times now :D","> Is it an Incognito tab?\r\n\r\nNo.. not incognito.. but I did try there as well (after enabled in incognito)","Same issue","Could you check if of the extension page you have an error button for the Angular devtools ? \r\n\r\n![Screenshot 2024-02-02 at 19 02 12](https:\/\/github.com\/angular\/angular\/assets\/1300985\/12fecc19-f08f-47ee-b01f-4f8406c4d996)\r\n","Sorry for the late reply.. no errors at all\r\n![Screenshot 2024-02-05 at 13 36 07](https:\/\/github.com\/angular\/angular\/assets\/598463\/e7d34a45-0121-4f6b-a157-3e6ecece2539)\r\n","I also don't see the Angular tab in the chrome devtools. \r\n![image](https:\/\/github.com\/angular\/angular\/assets\/9844254\/0ee3adac-02da-4627-b18e-64f8cd7b51f5)\r\n","same here","same issue","same issue here, reinstalled DevTools plugin, no errors being reported, tab will not appear.","same issue, no error, just doesn't show up","Same issue. I uninstalled and reinstalled dev tools. All I had to do was close and re-open the tab. I didn't need to close Chrome or restart my machine. I'm not even sure I needed to uninstall DevTools","Same issue here; Chrome Version 123.0.6312.58.\r\n\r\nRe-installed, restarted, etc.. many times. Tab doesn't show up, entry menu doesn't show up under more tools either."],"labels":["area: devtools"]},{"title":"Create or define type for animation transition input","body":"### Describe the problem that you experienced\n\nWhen you create a new animation that needs dynamic or calculated inputs, you'd do so using the syntax like so: \r\n\r\n```html\r\n<div [@animationName]=\"{ value: 'stateName', params: buildAnimationParams() }\"><\/div>\r\n```\r\n\r\nI can only find this syntax defined in once place which is on the API docs page for the [transition](https:\/\/angular.io\/api\/animations\/transition) function.\r\n\r\nPoking through the source code, I found where I believe this input is used in `transition_animation_engine.ts` with the class `StateValue` ([link](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/animations\/browser\/src\/render\/transition_animation_engine.ts#L106)). In that source file, `value` is typed in the constructor code as `any` (as seen with the input and return types of the `normalizeTriggerValue` function). In the field declarations of the class however, it is typed as a `string`. Likewise the `input` property for the constructor is typed as `any`.\n\n### Enter the URL of the topic with the problem\n\n_No response_\n\n### Describe what you were looking for in the documentation\n\nWhen looking through the documentation, I was looking for what inputs are accepted for the animation trigger binding. All I could find was this excerpt from the Introduction page:\r\n\r\n> Then, you can bind the trigger to a template expression using standard Angular property binding syntax as shown below, where triggerName is the name of the trigger, and expression evaluates to a defined animation state.\n\n### Describe the actions that led you to experience the problem\n\nIn my project, I have on the lint rule that requires all functions to have a defined return type. That proved difficult when I was trying to define functions that return the state name and animation params like so:\r\n\r\n```typescript\r\n@HostBinding('@rotateIcon')\r\nget rotateIconBinding() {\r\n  return this.rotateDegrees === 0 ? this.getDefaultAnimationState : this.getRotatedAnimationState;\r\n}\r\n\r\nprotected get getDefaultAnimationState() {\r\n  return { value: 'default', params: { rotateDegrees: this.rotateDegrees } };\r\n}\r\n\r\nprotected get getRotatedAnimationState() {\r\n  return { value: 'rotated', params: { rotateDegrees: this.rotateDegrees } };\r\n}\r\n```\n\n### Describe what you want to experience that would fix the problem\n\nAny (preferably all) of the following would help alleviate the issue for me or others that are struggling with the state of the current animation docs:\r\n\r\n1. Create a type definition for the `input` property of `StateValue` like so:\r\n  ```typescript\r\n  import { AnimationOptions } from '@angular\/animations';\r\n\r\n  export type AnimationStateInput = string | ({ value: string } & AnimationOptions);\r\n  ```\r\n2. Add a section in the Introduction docs explaining what inputs can be provided (aka the name or an object defined like step 1)\r\n\r\nThe above solutions would fix the documentation problem, but it would also be fantastic if there was some sort of IDE support that could detect available animation states so that when you work with animations, it detects issues at compile time.\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":[],"labels":["area: animations"]},{"title":"Parent :leave animation breaks the state of child animation","body":"### Which @angular\/* package(s) are the source of the bug?\n\nanimations\n\n### Is this a regression?\n\nNo\n\n### Description\n\nI have a popup-like component, which has `:enter` and `:leave` animations.\r\nInside of it there's a sidebar which has its own animations based on a state. I animate `width` from `0` to `*` once the loading is done.\r\n```\r\ntrigger('sidebarAnimation', [\r\n  state('true', style({ width: 0, transform: 'rotateY(45deg)' })),\r\n  state('false', style({ width: '*', transform: 'rotate(0)' })),\r\n  transition(\r\n    'true => false',\r\n    group([animate('0.4s cubic-bezier(0.61, 0, 0.42, 1)'), query('@*', [animateChild()], { optional: true })])\r\n  )\r\n]),\r\n```\r\nMy issue is that if I close the popup before the loading is done, the sidebar will snap into place as soon as parent's `:leave` animation kicks in. What I want to achieve is obviously for the sidebar to not change it's appearance during `:leave` animation on the parent.\r\n\r\nFirst I though it was because I don't set the \"void\" state for the sidebar animation.\r\nI tried `state('void', style({ width: '*', transform: '*' }))`, but that didn't change anything.\r\nI also tried adding `transition('true => void', ...)` with no luck.\r\nI've also played around with different combinations of the above but couldn't make it work.\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/stackblitz.com\/edit\/stackblitz-starters-bofcsu\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.1.1\r\nNode: 20.10.0\r\nPackage Manager: yarn 1.22.19\r\nOS: win32 x64\r\n\r\nAngular: 17.1.1\r\n... animations, cdk, cli, common, compiler, compiler-cli, core\r\n... forms, language-service, material, material-moment-adapter\r\n... platform-browser, platform-browser-dynamic, platform-server\r\n... router, service-worker\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1701.1\r\n@angular-devkit\/build-angular   17.1.1\r\n@angular-devkit\/core            17.1.1\r\n@angular-devkit\/schematics      17.1.1\r\n@angular\/fire                   17.0.1\r\n@schematics\/angular             17.1.1\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nwebpack                         5.89.0\r\nzone.js                         0.14.3\n```\n\n\n### Anything else?\n\nNot sure if this is a regression.","comments":[],"labels":["area: animations"]},{"title":"fix(core): remove unused @Component#moduleId","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [x] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\n`moduleId` is a noop and deprecated since v16, but still shows up in autocomplete.\r\nA schematic already took care of removing it from existing applications in v16.\r\n\r\nIssue Number: #48490\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThis commit removes the field.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No (as a schematic already migrated the existing application, but maybe it should be marked as a breaking change anyway?)\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["FYI: IIRC we didn't get to it due to other priorities, and there being a couple of usages in g3 where we also need to run the migration.","[TGP](https:\/\/fusion2.corp.google.com\/presubmit\/603220016\/OCL:603220016:BASE:603322864:1706788188058:84e06d69\/targets). We have around 16k broken targets, but might be significantly less root causes. Many targets depend on targets that are using `modukeId`. In either case, the migration in g3 still needs to run."],"labels":["breaking changes","area: core","action: global presubmit","detected: breaking change"]},{"title":"Client hydration breaks in module bootstrap with AOT disabled","body":"### Which @angular\/* package(s) are the source of the bug?\n\nplatform-browser\n\n### Is this a regression?\n\nYes\n\n### Description\n\nWhen trying to use client hydration with AOT disabled, the app fails to run from the dev server. Building and running SSR appears to work, though there is no message about hydration succeeding.\r\n\r\nThe following things cause the app to work as expected:\r\n- Enabling AOT or prerendering\r\n- [Rendering the child component directly](https:\/\/github.com\/griest024\/ng17-repro\/tree\/direct-render)\r\n- Using standalone\/function bootstrap method\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/github.com\/griest024\/ng17-repro\/tree\/hydration\n\n### Please provide the exception or error you saw\n\n```true\nERROR Error: ASSERTION ERROR: Unexpected state: no hydration info available for a given TNode, which represents a view container. [Expected=> null != undefined <=Actual]\r\n    at throwError2 (core.mjs:473:11)\r\n    at assertDefined (core.mjs:469:9)\r\n    at populateDehydratedViewsInLContainerImpl (core.mjs:17518:9)\r\n    at locateOrCreateAnchorNode (core.mjs:17535:10)\r\n    at createContainerRef (core.mjs:17432:5)\r\n    at injectViewContainerRef (core.mjs:17192:12)\r\n    at core.mjs:4269:29\r\n    at runInInjectorProfilerContext (core.mjs:948:9)\r\n    at lookupTokenUsingNodeInjector (core.mjs:4268:17)\r\n    at getOrCreateInjectable (core.mjs:4235:23)\r\nhandleError @ core.mjs:11809\r\n(anonymous) @ core.mjs:31652\r\ninvoke @ zone.js:368\r\nrun @ zone.js:129\r\nrunOutsideAngular @ core.mjs:14677\r\n(anonymous) @ core.mjs:31652\r\ninvoke @ zone.js:368\r\nonInvoke @ core.mjs:14781\r\ninvoke @ zone.js:367\r\nrun @ zone.js:129\r\n(anonymous) @ zone.js:1257\r\ninvokeTask @ zone.js:402\r\n(anonymous) @ core.mjs:14455\r\nonInvokeTask @ core.mjs:14455\r\ninvokeTask @ zone.js:401\r\nonInvokeTask @ core.mjs:14768\r\ninvokeTask @ zone.js:401\r\nrunTask @ zone.js:173\r\ndrainMicroTaskQueue @ zone.js:581\r\nZone - Promise.then (async)\r\nonScheduleTask @ core.mjs:14449\r\nscheduleTask @ zone.js:382\r\nonScheduleTask @ zone.js:279\r\nscheduleTask @ zone.js:382\r\nscheduleTask @ zone.js:216\r\nscheduleMicroTask @ zone.js:236\r\nscheduleResolveOrReject @ zone.js:1247\r\nresolvePromise @ zone.js:1184\r\n(anonymous) @ zone.js:1264\r\ninvokeTask @ zone.js:402\r\n(anonymous) @ core.mjs:14455\r\nonInvokeTask @ core.mjs:14455\r\ninvokeTask @ zone.js:401\r\nonInvokeTask @ core.mjs:14768\r\ninvokeTask @ zone.js:401\r\nrunTask @ zone.js:173\r\ndrainMicroTaskQueue @ zone.js:581\r\nZone - Promise.then (async)\r\nonScheduleTask @ core.mjs:14449\r\nscheduleTask @ zone.js:382\r\nonScheduleTask @ zone.js:279\r\nscheduleTask @ zone.js:382\r\nscheduleTask @ zone.js:216\r\nscheduleMicroTask @ zone.js:236\r\nscheduleResolveOrReject @ zone.js:1247\r\nthen @ zone.js:1453\r\n(anonymous) @ core.mjs:32444\r\n_callAndReportToErrorHandler @ core.mjs:31649\r\n(anonymous) @ core.mjs:32441\r\ninvoke @ zone.js:368\r\nonInvoke @ core.mjs:14781\r\ninvoke @ zone.js:367\r\nrun @ zone.js:129\r\nrun @ core.mjs:14632\r\nbootstrapModuleFactory @ core.mjs:32420\r\n(anonymous) @ core.mjs:32473\r\ninvoke @ zone.js:368\r\nrun @ zone.js:129\r\n(anonymous) @ zone.js:1257\r\ninvokeTask @ zone.js:402\r\nrunTask @ zone.js:173\r\ndrainMicroTaskQueue @ zone.js:581\r\nPromise.then (async)\r\nnativeScheduleMicroTask @ zone.js:557\r\nscheduleMicroTask @ zone.js:568\r\nscheduleTask @ zone.js:392\r\nscheduleTask @ zone.js:216\r\nscheduleMicroTask @ zone.js:236\r\nscheduleResolveOrReject @ zone.js:1247\r\nthen @ zone.js:1453\r\nbootstrapModule @ core.mjs:32473\r\n(anonymous) @ main.ts:5\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.1.0\r\nNode: 18.19.0\r\nPackage Manager: npm 10.2.3\r\nOS: linux x64\r\n\r\nAngular: 17.1.0\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, platform-server\r\n... router, ssr\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1701.0\r\n@angular-devkit\/build-angular   17.1.0\r\n@angular-devkit\/core            17.1.0\r\n@angular-devkit\/schematics      17.1.0\r\n@schematics\/angular             17.1.0\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.3\n```\n\n\n### Anything else?\n\npossibly related to #50175","comments":[],"labels":["area: core","core: hydration"]},{"title":"Provide the ability to test directives that contain input signals without wrapper components","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nGiven the following simple directive with a signal input:\r\n\r\n```typescript\r\n@Directive({\r\n  selector: '[appSimple]',\r\n  standalone: true,\r\n  host: {\r\n    '(click)': 'doSomething()',\r\n  }\r\n})\r\nexport class SimpleDirective {\r\n  data = input.required<string>();\r\n\r\n  doSomething() {\r\n    console.log(this.data());\r\n  }\r\n}\r\n```\r\n\r\nThere is no way for me to write a test because I can not use create a \"DirectiveFixture\"\n\n### Proposed solution\n\nProvide a similar approach as `TestBed.compileComponents` but for directives.\n\n### Alternatives considered\n\nStick with requiring wrapper components to test, but add documentation when input signals become available as part of the public API. ","comments":["@topdev658 Your example is how I am currently testing signal directives. \r\n\r\nThis feature request was to not require wrapper component to test signal directives which is what your example does."],"labels":["area: testing"]},{"title":"bug(matSort): matSort used with Angular animations is leaking memory","body":"### Is this a regression?\n\n- [ ] Yes, this behavior used to work in the previous version\n\n### The previous version in which this bug was not present was\n\n_No response_\n\n### Description\n\nWhen destroying a matTable that uses matSort with ngIf \/ @if in a component that has Angular animations, detached elements and JS event listeners are left behind.\r\n\r\nThis behaviour can be reproduced with Angular version 16.2.12 and 17.1.1\r\n\r\nI tried the following scenarios: App \/ Test component with Animation, without animation and only with an empty array inside test-component and app-component. Results are the following: \r\n![results](https:\/\/github.com\/angular\/components\/assets\/153174614\/013a9054-f66e-48b7-9dff-53f169447a02)\r\n\r\nWhen using an empty array in the app-component, the memory leak can't be reproduced:\r\n![emptyArray](https:\/\/github.com\/angular\/components\/assets\/153174614\/23cf617e-5727-4b91-814c-de7b861679eb)\r\n\n\n### Reproduction\n\nStackBlitz link: https:\/\/stackblitz.com\/edit\/angular-w6z5xl?file=src%2Findex.html\r\nPlease download the code from stackblitz and run it locally.\r\nSteps to reproduce:\r\n1. Click toggle test button and observe DOM node count and JS event listener count in Chrome performance monitor\r\n\n\n### Expected Behavior\n\nGarbage collector cleans up removed DOM nodes, event listener count not increasing\n\n### Actual Behavior\n\nDOM Node count and JS event listener count increasing steadily\n\n### Environment\n\n- Angular: 17.1.1\r\n- CDK\/Material: 17.1.1\r\n- Browser(s): Google Chrome 120.0.6099.225 (Official Build) (64-bit)\r\n- Operating System (e.g. Windows, macOS, Ubuntu): Microsoft Windows Version 22H2 (OS Build 19045.3803)\r\n","comments":["The sort header doesn't do anything abnormal with animations so this is likely an issue with the animations package.","From what I can get in memory dumps, some `TransitionAnimationPlayer` are kept indefinitely by the `TransitionAnimationEngine`\r\n\r\nFor a reason unknown to my yet, the cleanup doesn't do its job here \r\n\r\nhttps:\/\/github.com\/angular\/angular\/blob\/7b4d275f494a64c38b61cea7045ba8b6e8447b78\/packages\/animations\/browser\/src\/render\/transition_animation_engine.ts#L1432-L1441\r\n\r\nEdit: The remaining players are always the ones with the trigger name `arrowOpacity`"],"labels":["area: animations","memory leak","area: forms","needs triage"]},{"title":"AbortController error with walletconnect lib after zone.js 0.14.3 update","body":"### Which @angular\/* package(s) are the source of the bug?\n\nzone.js\n\n### Is this a regression?\n\nYes\n\n### Description\n\nAfter zone.js update to 0.14.3, [walletconnect integration](https:\/\/docs.walletconnect.com\/advanced\/providers\/ethereum#use-with-walletconnectmodal) is breaking in our app. earlier it was opening QR code modal without any error.\n\n### Please provide a link to a minimal reproduction of the bug\n\n_No response_\n\n### Please provide the exception or error you saw\n\n```true\ncore.mjs:11806 ERROR TypeError: Cannot set property signal of [object AbortController] which has only a getter\r\n    at zone.js:1957:38\r\n    at ae.addKeyboardEvents (index.js:1:67056)\r\n    at ae.onOpenModalEvent (index.js:1:66362)\r\n    at index.js:1:65722\r\n    at index.js:1:7509\r\n    at vanilla.mjs:242:11\r\n    at _ZoneDelegate.invoke (zone.js:368:26)\r\n    at Object.onInvoke (core.mjs:14778:33)\r\n    at _ZoneDelegate.invoke (zone.js:367:52)\r\n    at _Zone.run (zone.js:129:43)\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.1.1\r\nNode: 18.18.2\r\nPackage Manager: yarn 1.22.19\r\nOS: darwin arm64\r\n\r\nAngular: 17.1.1\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... language-service, platform-browser, platform-browser-dynamic\r\n... router, service-worker\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1701.1\r\n@angular-devkit\/build-angular   17.1.1\r\n@angular-devkit\/core            17.1.1\r\n@angular-devkit\/schematics      17.1.1\r\n@schematics\/angular             17.1.1\r\nrxjs                            7.8.1\r\ntypescript                      5.3.3\r\nzone.js                         0.14.3\n```\n\n\n### Anything else?\n\nFor now solved by downgrading zone.js to 0.14.2.\r\nThis line from latest zone.js is throwing error:\r\nhttps:\/\/github.com\/angular\/angular\/blob\/c213a4e15a594ff141cf312ad301128e7ed4127c\/packages\/zone.js\/lib\/common\/events.ts#L480","comments":["@imaksp , could you provide a reproduce repo? thanks.","This will happen when passing an `AbortController` as options for `addEventListener`. That's a bit odd but should work, considering that it does have the `signal` field (but it's readonly)\n\nI think zone.js can prepare a separate options object instead of mutating the original object, or a wrapper using `Object.create(options)` or similar.","Hi @JiaLiPassion here is the minimum reproduction repo:\r\nhttps:\/\/github.com\/imaksp\/wc-zone-js-issue\r\n\r\nSteps:\r\n- clone, and run _yarn && yarn dev_\r\n- Click on Connect Wallet button\r\n- See the error in console\r\n\r\nIf you change zone.js version to **0.14.2** it will open QR modal like this without any errors.\r\n\r\n<img width=\"972\" alt=\"connect-qr\" src=\"https:\/\/github.com\/angular\/angular\/assets\/2557058\/d04f70b8-4c8b-468a-95e9-847f1392ba8f\">\r\n","@imaksp \r\nThe reason is the walletconnect lib pass the `AbortController` directly to the `addEventListener` function, and the `AbortController.signal` is readonly, just like @JoostK  said, I will create a new Options to fix this issue."],"labels":["area: zones"]},{"title":"Improve error handling for custom\/duplicate decorators","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [x] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N\/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["[TGP link](https:\/\/test.corp.google.com\/OCL:602241700:BASE:602268756:1706506240324:81d5af64)","This PR was merged into the repository by commit 96bcf4fb1208d1f073784a2cde4a03553e905807.","@pmvald This caused a breakage in G3 and has been reverted."],"labels":["state: blocked","area: compiler","target: minor","action: global presubmit"]},{"title":"docs: add sample usage of the FormArray API for reactive forms","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nMissing a more concrete sample on how to use the FormArray API\r\n\r\nIssue Number: #53705\r\n\r\n\r\n## What is the new behavior?\r\nInclude a more concrete sample of how to use the FormArray API on the site into the guide of reactive forms\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n## Other information\r\n","comments":["@maequise Looks like your commit message is causing the lint to fail. It's very close though. Run `git commit --amend` and change your commit message to `docs: add sample usage of the FormArray API for reactive forms`, and then force push. That'll fix it.","@dylhunn Can you review the content here?","Deployed adev-preview for 9a09d025032f66d1ddd34d10aee6a9b7915f4099 to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54138-adev-prev-6sk3qzg2.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->","@sonukapoor  thank you for the review, I made the corrections (the last forced \"push\"  was because I missed one edit) ","I really appreciate this work but this should really be a tutorial or code example, not necessarily an additional guide. I would also add here that we should consider revamping this guide and converting it to an issue that we should track and keep track of this work.\r\n\r\n@twerske can you chime in on this?","> I really appreciate this work but this should really be a tutorial or code example, not necessarily an additional guide. I would also add here that we should consider revamping this guide and converting it to an issue that we should track and keep track of this work.\r\n> \r\n> @twerske can you chime in on this?\r\n\r\nI was thinking earlier in the afternoon adding a tutorial on the suject.","> I really appreciate this work but this should really be a tutorial or code example, not necessarily an additional guide. I would also add here that we should consider revamping this guide and converting it to an issue that we should track and keep track of this work.\r\n> \r\n> @twerske can you chime in on this?\r\n\r\nI agree. This should be a tutorial not a guide since it's a walk through of a code example.","As suggested, I made a tutorial for this part and removed the guide part."],"labels":["action: review","target: patch","area: adev","area: docs","adev: preview"]},{"title":"fix(docs-infra): parent max-height IDE error panel visibility","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nWas: \r\n![image](https:\/\/github.com\/angular\/angular\/assets\/60569670\/2fd38fa1-8437-4ab9-b456-d9ae5db296e6)\r\n\r\n\r\nIssue Number: #52760\r\n\r\n\r\n## What is the new behavior?\r\nAfter adding overflow and max-height in percentage to parent container and, move to the bottom error box,\r\nissue behavior was fixed\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/60569670\/a16a9b43-6872-4983-88cf-6b102c482948)\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["Deployed adev-preview for f2d9f4ab7a2801bc43fe4870a2f57645d3f7a091 to: https:\/\/ng-dev-previews-fw--pr-angular-angular-54128-adev-prev-3qyzx03h.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->","Hi, thanks for proposing a fix. \r\n\r\nWith your fix, the origin issue still stands, the error message hides the issues (line 17 and 19 aren't visible). \r\n \r\n![Screenshot 2024-01-28 at 18 47 16](https:\/\/github.com\/angular\/angular\/assets\/1300985\/80fc7948-7e4b-4c38-8d57-1230ed5e4ec8)\r\n","> Hi, thanks for proposing a fix.\r\n> \r\n> With your fix, the origin issue still stands, the error message hides the issues (line 17 and 19 aren't visible).\r\n> \r\n\r\nMaybe the best way to fix, is to move this error box to the right-side, by removing left: 0.5 rem and setting to max-width:50% ?\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/60569670\/0972ba76-02b1-461b-88ad-04e7fbc4d9ca)\r\n\r\n\r\n","We wouldn't want to shift the width, the height should be probably a percent of the box - cc @bencodezen ","> We wouldn't want to shift the width, the height should be probably a percent of the box - cc @bencodezen\r\n\r\nSo, my solution is fine? Or need to calc the percentage","@vladboisa Your solution is a good start in terms of not letting the error messages take over too much of the editor.\r\n\r\nThat said, if the goal is to allow users to fix the errors while the popup is visible, this doesn't fix the issue. \r\n\r\nThe additional piece we need on this is to modify the height of the editor so that users can see the errors in question while also seeing the error box.\r\n\r\n<img width=\"774\" alt=\"Screenshot 2024-01-29 at 9 39 04\u202fAM\" src=\"https:\/\/github.com\/angular\/angular\/assets\/4836334\/0c929f07-4eb6-4f8d-82fe-019005e626fb\">\r\n\r\nThis is a quick prototype I did by modifying the height of the editor, but I know it'll need more dynamic calculations based on whether the error popup has appeared or not. \r\n\r\nLet me know if you have any additional questions!","> @vladboisa Your solution is a good start in terms of not letting the error messages take over too much of the editor.\r\n> \r\n> That said, if the goal is to allow users to fix the errors while the popup is visible, this doesn't fix the issue.\r\n> \r\n> The additional piece we need on this is to modify the height of the editor so that users can see the errors in question while also seeing the error box.\r\n> \r\n> This is a quick prototype I did by modifying the height of the editor, but I know it'll need more dynamic calculations based on whether the error popup has appeared or not.\r\n> \r\n> Let me know if you have any additional questions!\r\n\r\n@bencodezen I've added the animation, and make a modification to the height of the editor, when the error box is appears\r\n","> @vladboisa Your solution is a good start in terms of not letting the error messages take over too much of the editor.\r\n> \r\n> That said, if the goal is to allow users to fix the errors while the popup is visible, this doesn't fix the issue.\r\n> \r\n> The additional piece we need on this is to modify the height of the editor so that users can see the errors in question while also seeing the error box.\r\n> Let me know if you have any additional questions!\r\n\r\n@bencodezen @twerske \r\nI think now my solution is work's fine.\r\nThanks for your time and the opportunity to contribute in Angular community.\r\n"],"labels":["action: review","target: patch","detected: feature","area: adev-infra","adev: preview"]},{"title":"Unable to find `zh-Hant-TW` or `zh-TW` locale in `@angular\/common`","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\ncommon\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nWhen I using i18n support in Angular, I can't use `zh-TW` for my locale. When building, there is always produce a warning for me.\r\n\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\nhttps:\/\/github.com\/doggy8088\/ng-i18n-demo\/commit\/1acddbdf8b96ff1bba4568ad4e5d5b58e9ced52f\r\n\r\n### Please provide the exception or error you saw\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/88981\/2f0db564-3305-432e-a2b3-2045020430d3)\r\n\r\n```true\r\n\u25b2 [WARNING] Locale data for 'zh-TW' cannot be found. Using locale data for 'zh'. [plugin angular-locale-data]     \r\n\r\n    angular:polyfills:angular:polyfills:2:7:\r\n      2 \u2502 import 'angular:locale\/data:zh-TW';\r\n        \u2575        ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n```\r\n\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 17.1.1\r\nNode: 20.10.0\r\nPackage Manager: npm 10.2.3\r\nOS: win32 x64\r\n\r\nAngular: 17.1.1\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... localize, platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------       \r\n@angular-devkit\/architect       0.1701.1\r\n@angular-devkit\/build-angular   17.1.1\r\n@angular-devkit\/core            17.1.1\r\n@angular-devkit\/schematics      17.1.1\r\n@schematics\/angular             17.1.1\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.3\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\n_No response_","comments":["Angular relies on [CLDR](https:\/\/cldr.unicode.org) for internationalization. Currently, [CLDR doesn't include taiwanese variants of Chinese](https:\/\/github.com\/unicode-org\/cldr-json\/blob\/main\/cldr-json\/cldr-core\/availableLocales.json), that's the reason why you are seeing this warning and Angular falls back to Chinese.","Also worth to mention, the browser's `Intl` APIs support both `zh-Hant-TW` and `zh-TW`, so #49143 would fix the issue.","@json-derulo That sounds promising. Thanks!","In CLDR, [default content locales](https:\/\/cldr.unicode.org\/translation\/translation-guide-general\/default-content) is recorded in `defaultContent.json`:\r\n\r\n> A default content locale has no data other than identity information, it inherits all data from its parent.\r\n\r\nThe presence of `zh-Hant-TW` there does [specify TW](https:\/\/github.com\/unicode-org\/cldr-json\/blob\/858baad63c1d51e1d576ef99dccc229d92cedda4\/cldr-json\/cldr-core\/defaultContent.json#L334) as the default locale for `zh-Hant`, i.e. they are to be treated effectively the same as far as CLDR is concerned."],"labels":["area: i18n"]},{"title":"Add a typed version of the ControlValueAccessor interface","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\nforms\n\n### Description\n\nThe `ControlValueAccessor` interfaces relies on `any` for the typing of its definitions, I would like to be able to strongly type a `ControlValueAccessor`\n\n### Proposed solution\n\nInstead of:\r\n```ts\r\n@Component({ \/*...*\/ })\r\nclass MyComponent implements ControlValueAccessor {\r\n  writeValue(obj: any): void {}\r\n  registerOnChange(fn: any): void {}\r\n  registerOnTouched(fn: any): void {}\r\n  setDisabledState?(isDisabled: boolean): void {}\r\n}\r\n```\r\n\r\nI would have liked to be able to write:\r\n```ts\r\n@Component({ \/*...*\/ })\r\nclass MyComponent implements TypedControlValueAccessor<TValue> {\r\n  writeValue(obj: TValue): void {}\r\n  registerOnChange(fn: (value: TValue) => void): void {}\r\n  registerOnTouched(fn: () => void): void {}\r\n  setDisabledState?(isDisabled: boolean): void {}\r\n}\r\n```\n\n### Alternatives considered\n\nThis is non blocking and just some qualify of life\r\nIf absolutely necessary, I can create another interface acting as an adapter for the non-typed version","comments":["There is no type enforcement tied to CVAs, typing the generic would give the false impression that there is. \r\n\r\n`writeValue(obj: TValue): void {}` should probably be `writeValue(obj: unknown): void {}`.","While this is not enforced, it could help spotting errors when writting a CVA, could this be an option in some ways?\r\n\r\nFor instance, it could prevent this type of small mistake:\r\n\r\n```ts\r\n@Component({ \/*...*\/ })\r\nclass MyComponent implements ControlValueAccessor {\r\n  #onChange: (value: User) => void;\r\n  readonly #user = signal<User>(...);\r\n\r\n  writeValue(obj: any): void {\r\n    \/\/ Writing the whole `user`\r\n    this.#user.set(obj);\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void)): void {\r\n    \/\/ Valid but might not be intentional given `writeValue`\r\n    this.#onChange(this.user().name);\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void { \/*...*\/ }\r\n  setDisabledState?(isDisabled: boolean): void { \/*...*\/ }\r\n}\r\n```"],"labels":["area: forms"]},{"title":"Allow specifying \"equal\" function for signal based inputs.","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nCurrently we have a lodash deep equals on our signals that are bound to an input setter like\r\n\r\n```typescript\r\n _message = signal({} as Message, { equal: isEqual });\r\n@Input({ required: true }) set message(value: Message) {\r\n  this._message.set(value);\r\n}\r\n```\r\nWe could not find a way to do the same with a signal based input.\n\n### Proposed solution\n\nAllow setting an equal function on signal based inputs.\n\n### Alternatives considered\n\nMaybe we are getting this whole thing wrong?","comments":["@JoostK sorry for opening this twice, I could not find it with the search function, so I thought I didn't hit submit last week. Is there anything I can do to clear this up \/ help with clarifocation?","I have the same request for `model()`. It is needed for implementing custom form control for non-primitive value with `model()`. Below is an example; \r\n\r\n```ts\r\nexport type Time = {\r\n  hour: number;\r\n  minute: number;\r\n};\r\n\r\nexport class TimeInputComponent implements ControlValueAccessor {\r\n  value = model<Time>({ hour: 0, minute: 0 });\r\n\r\n  #onChangeListener = (_: Time) => {};\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      this.#onChangeListener(this.value());\r\n    });\r\n  }\r\n\r\n  \/\/ ControlValueAccessor implementation\r\n  writeValue(value: Time): void {\r\n    this.value.set(value);\r\n  }\r\n\r\n  registerOnChange(fn: (v: Time) => void): void {\r\n    this.#onChangeListener = fn;\r\n  }\r\n}\r\n```\r\n\r\nThe `value` model input doesn't have a custom `equal` function for `Time` type. So every `set()` occurs the effect which emits change to the bound form control. And the current workaround is this:\r\n\r\n```ts\r\nexport function isEqualTime(a: Time, b: Time) {\r\n  return a.hour === b.hour && a.minute === b.minute;\r\n}\r\n\r\nexport class TimeInputComponent implements ControlValueAccessor {\r\n  value = model<Time>({ hour: 0, minute: 0 });\r\n  #valueChange = computed(() => this.value(), { equal: isEqualTime }); \/\/ <-- distinct changed value\r\n\r\n  #onChangeListener = (_: Time) => {};\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      this.#onChangeListener(this.#valueChange());\r\n    });\r\n  }\r\n\r\n  \/\/ ControlValueAccessor implementation\r\n  writeValue(value: Time): void {\r\n    this.value.set(value);\r\n  }\r\n\r\n  registerOnChange(fn: (v: Time) => void): void {\r\n    this.#onChangeListener = fn;\r\n  }\r\n}\r\n```\r\n\r\n","I agree, that `equal` should be added to input signal options, we also use it a lot (via setter currently)"],"labels":["area: core","core: inputs \/ outputs","cross-cutting: signals"]},{"title":"Enhance @defer views for responsive design","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\ncore\r\n\r\n### Description\r\n\r\n**Problem :**\r\n1. Current @defer views load or defer code uniformly across all device sizes.\r\n2. This can lead to unnecessary code loading, potentially impacting performance and user experience, specifically for devices with limited resources and bandwidth.\r\n\r\n### Proposed solution\r\n\r\n**Proposal :**\r\n\r\nIntroduce device-specific conditions within @defer blocks to selectively load code based on screen size.\r\n\r\n**Syntax examples :**\r\n\r\nHTML\r\n```\r\n@defer(on mobile) {\r\n   }\r\n\r\n@defer(on tablet) {\r\n   }\r\n\r\n@defer(on desktop) {\r\n   }\r\n\r\n```\r\n**Benefits :**\r\n\r\n1. Optimized initial load: Load only the essential code for the user's device, reducing initial bundle size and improving load time.\r\n2. Enhanced user experience: Tailored content and functionality for different screen sizes, delivering a more seamless experience across devices.\r\n3. Improved performance: Reduced memory usage and potential network overhead, contributing to smoother interactions.\r\n4. Code organization: Separation of concerns for different screen sizes, leading to cleaner and more maintainable code.\r\n\r\n**Implementation :**\r\n\r\n1. Extend the @defer directive to accept a device type as a parameter.\r\n2. Integrate with Angular's existing responsive design mechanisms (e.g., MediaMatcher) to determine device size.\r\n3. Lazily load deferred code only when the corresponding condition is met.\r\n\r\n\r\n**It should be designed in a way that initial page load and content display are not affected by screen size checks, and it should work seamlessly with server-side rendering.**\r\n\r\n### Alternatives considered\r\n\r\nIf anyone has an alternative approach, please mention it.","comments":["While there is no exact definition of mobile\/tablet\/desktop, there could be a case for media query based triggers. ","I actually have a similar use case. I was maybe thinking a bit furthermore where `defer` could take an extra trigger or param to act as a \"take back\" when condition may be withdrawn. \r\n\r\nIn terms of defining what are mobile, tablet, desktop, we can rely on breakpoints given by the material package ?\r\n\r\nHere's a little code snippet I have now:\r\n\r\n```typescript\r\n\/\/ lambda.component.ts\r\n  [...]\r\n  isMobile$ = breakpoint$.observe(Breakpoints.Handset).pipe(\r\n    distinctUntilChanged(),\r\n    map({ matches }) => matches),\r\n    shareReplay()\r\n  );\r\n```\r\n\r\n```html\r\n<!--lambda.component.html-->\r\n<ng-container *ngrxLet=\"isMobile$; let isMobile\">\r\n@defer(when !isMobile) {\r\n  @if (!isMobile) {\r\n    ...\r\n  }\r\n}\r\n<\/ng-container>\r\n```\r\n\r\nIt's not so bad but I'm pretty sure we could do better \ud83d\udd25  ","With this feature integrated into the defer views, eliminating the need for repetitive @if directives, the API would become significantly clearer and more user-friendly.","The main issue with such a trigger is that is not compatible with server-side rendering. "],"labels":["area: core","core: defer"]},{"title":"How to load lazy load router children in standalone workspaces","body":"### Describe the problem that you experienced\r\n\r\nCurrently the docs don't provide information how to provide lazy loaded route children in standalone workspaces. There is detailed information how to do it with NgModules using `RouterModule.forChild()`, however this approach doesn't work in standalone workspaces.\r\n\r\n### Enter the URL of the topic with the problem\r\n\r\nhttps:\/\/angular.io\/guide\/lazy-loading-ngmodules\r\n\r\n### Describe what you were looking for in the documentation\r\n\r\nI want to lazy load a standalone component including all of its route children.\r\n\r\n### Describe the actions that led you to experience the problem\r\n\r\n_No response_\r\n\r\n### Describe what you want to experience that would fix the problem\r\n\r\nI found the solution in the standalone APIs RFC #45554. The child routes should be loaded separately via `loadChildren`:\r\n\r\n```typescript\r\nexport const routes: Routes = [\r\n  {\r\n    path: 'my-component',\r\n    loadChildren: () => import('.\/path\/my.routes').then(mod => mod.ROUTES),\r\n  },\r\n]\r\n```\r\n\r\nIn `my.routes.ts`, export a `ROUTES` constant with the child routing definitions.\r\n\r\nThis information should be on angular.dev and angular.io.\r\n\r\n### Add a screenshot if that helps illustrate the problem\r\n\r\n_No response_\r\n\r\n### If this problem caused an exception or error, please paste it here\r\n\r\n_No response_\r\n\r\n### If the problem is browser-specific, please specify the device, OS, browser, and version\r\n\r\n_No response_\r\n\r\n### Provide any additional information here in as much as detail as you can\r\n\r\n_No response_","comments":["This is covered in the [standalone components](https:\/\/angular.io\/guide\/standalone-components#routing-and-lazy-loading) documentation.","@alxhub Thanks this is exactly what I was looking for, I just couldn't find this part in the docs. Maybe it makes sense to add a new section in https:\/\/angular.io\/guide\/lazy-loading-ngmodules which links to the https:\/\/angular.io\/guide\/standalone-components#routing-and-lazy-loading guide?"],"labels":["P3","area: adev","area: docs"]},{"title":"Provide flexible way to generate `srcset` based on `ngSrcset` density multipliers when image size is unknown","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\ncommon\r\n\r\n### Description\r\n\r\nAs far as I can see, `ImageLoaderConfig` currently does not support a flexible way of transforming `ngSrcset=\"1x, 2x\"` to `srcset=\"https:\/\/foo.bar\/image.jpg?density=1x 1x, https:\/\/foo.bar\/image.jpg?density=2x 2x\"` for images of varying sizes.\r\n\r\nExample: Let's say I want to support three different screen densities, 1x, 2x and 3x. The images provided to support this are named `image.1x.jpg`, `image.2x.jpg` and `image.3x.jpg`. Also there are multiple ways of building the application, causing the actual image to change based on the build variant, meaning the size of the image is not known.\r\n\r\nInstead of having to type:\r\n```html\r\n<img src=\"assets\/image.jpg\" srcset=\"assets\/image.1x.jpg 1x, assets\/image.2x.jpg 2x, assets\/image.3x.jpg 3x\" \/>\r\n```\r\n\r\nWhat I want is to utilise the possibility of writing a custom `ImageLoader`:\r\n```typescript\r\n{\r\n  provide: IMAGE_LOADER,\r\n  useValue: (config: ImageLoaderConfig) => {\r\n    const srcComponents = config.src.split(\".\");\r\n\r\n    const density = config.density !== undefined ? config.density : \"1x\";\r\n    srcComponents.splice(-1, 0, density);\r\n\r\n    return srcComponents.join(\".\");\r\n  }\r\n}\r\n```\r\n\r\nThen type the `img`-tag in the following way:\r\n```html\r\n<img fill ngSrc=\"assets\/image.jpg\" ngSrcset=\"1x, 2x, 3x\" \/>\r\n```\r\n\r\nThough, there is no property `density` on `ImageLoaderConfig` of course - the only size-related property available is `width`. `width` is however `NaN` when the image size is unknown, so it is not helpful here. Would it be possible to provide each of the density multipliers in a property `density` or in some other way to enable this?\r\n\r\n### Proposed solution\r\n\r\nA new property `density` on `ImageLoaderConfig` that contains the density multiplier for each call to the `ImageLoader`. At least I guess that it is more preferable than e.g. changing the type of `width` to `number | string | undefined`, then passing the density multiplier value there(?).\r\n\r\n### Alternatives considered\r\n\r\nIt would be preferable if the density multipliers could be defined in `ngSrcset` instead of in the `ImageLoader` implementation itself, as this would avoid e.g. having to define some arbitrary variable to keep track of each iteration:\r\n\r\n```typescript\r\n{\r\n  provide: IMAGE_LOADER,\r\n  useFactory: (): ImageLoader => {\r\n    let densityMultiplier = 1;\r\n\r\n    return (config: ImageLoaderConfig): string => {\r\n      const srcComponents = config.src.split(\".\");\r\n      srcComponents.splice(-1, 0, `${pixelDensity}x`);\r\n\r\n      if (config.width === undefined) {\r\n        densityMultiplier = 1;\r\n      } else {\r\n        densityMultiplier++;\r\n      }\r\n\r\n      return srcComponents.join(\".\");\r\n    };\r\n  }\r\n}\r\n```","comments":[],"labels":["area: common","common: image directive"]},{"title":"feat(compiler-cli): enable dom binding type checking by default","body":"Currently Angular only validates that elements are existing as per our runtime DOM schema.\r\nAdditionally, we validate that non-directive input bindings are valid according to the schema.\r\n\r\nWe **never** validate whether the value of the expression is compatible with the targeted\r\nDOM property. This commit ensures this is happening by default with `strictTemplates` enabled.\r\n\r\nThe reason why this came up more prominently at this point:\r\n\r\n- Users will adopt signal inputs and might forget invoking the signal, while Angular will never complain that e.g. `[id]=\"bla\"` should actually be `[id]=\"bla()\"` due to unsatisfied type assignability.\r\n\r\nThere is old context on why we did not enable this by default in the past: https:\/\/github.com\/angular\/angular\/pull\/32171.\r\nIt's worth seeing if that is still the case, or at least working towards flipping this default.","comments":[],"labels":["detected: feature"]},{"title":"injector yields wrong result inside embedded view","body":"### Which @angular\/* package(s) are the source of the bug?\n\ncore, forms\n\n### Is this a regression?\n\nNo\n\n### Description\n\nInside an embedded view with an associated injector the injector seems to return an unexpected result, even if the host flag is used.\r\n\r\nWe've got a nested form, and `formControlName` uses `@Host()` when injecting its container\r\n\r\nhttps:\/\/github.com\/angular\/angular\/blob\/c3b00959659ca20d3f798820dfcb4dee250a32ac\/packages\/forms\/src\/directives\/reactive_directives\/form_control_name.ts#L129\r\n\r\nOur inner form is contained in an ng-template. In the repro below we just instantiate it next to the ng-template itself, in our real code the template outlet would be somewhere else entirely in the application (and DOM).\r\n\r\n```html\r\n<!-- outer component -->\r\n<form [formGroup]=\"outerForm\">\r\n  <wrapper-component \/>\r\n<\/form>\r\n\r\n<!-- wrapper component -->\r\n<ng-container [ngTemplateOutlet]=\"tpl\" [ngTemplateOutletInjector]=\"injector\" \/>\r\n\r\n<ng-template #tpl>\r\n  <inner-component \/>\r\n<\/ng-template>\r\n\r\n<!-- inner component -->\r\n<form [formGroup]=\"innerForm\">\r\n  <input formControlName=\"innerInput\">\r\n<\/form>\r\n```\r\n\r\nWhile registering the `formControlName=\"innerInput\"` an error is thrown. Debugging the issue shows that the `formControlName` actually gets the outer form as its form.\r\n\r\n<img width=\"559\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/821510\/2dd63fd3-5e91-426a-9ff7-7d7f5b1e68af\">\r\n\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/stackblitz.com\/edit\/stackblitz-starters-vvqjnr?file=src%2Fmain.ts\n\n### Please provide the exception or error you saw\n\n```true\nError: Cannot find control with name: 'innerInput'\r\n    at _throwError (forms.mjs:3208:11)\r\n    at setUpControl (forms.mjs:2991:13)\r\n    at FormGroupDirective.addControl (forms.mjs:4902:9)\r\n    at FormControlName._setUpControl (forms.mjs:5499:43)\r\n    at FormControlName.ngOnChanges (forms.mjs:5444:18)\r\n    at FormControlName.rememberChangeHistoryAndInvokeOnChangesHook (core.mjs:2561:14)\r\n    at callHookInternal (core.mjs:3603:14)\r\n    at callHook (core.mjs:3634:9)\r\n    at callHooks (core.mjs:3585:17)\r\n    at executeInitAndCheckHooks (core.mjs:3535:9)\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nI've verified the described behaviour is present in Angular 16.1.9, 16.2.12, and 17.1.1.\n```\n\n\n### Anything else?\n\nRemoving the `ngTemplateOutletInjector` solves the issue, which makes me question whether it's necessary to pass along an injector. The documentation on the injector input\/parameter (both for the `ngTemplateOutlet` directive and for `createEmbeddedView` on `ViewContainerRef` or `TemplateRef`) doesn't really yield any useful information.","comments":[],"labels":["area: core","core: di"]},{"title":"NG0311: Input\/output object literal mapping to array breaks host directive validation","body":"### Which @angular\/* package(s) are the source of the bug?\n\ncompiler\n\n### Is this a regression?\n\nNo\n\n### Description\n\nWhen creating a host directive which uses the input\/output mapping feature the compiler transforms those mapping into an array which breaks the host directive validation in `@angular\/core`.\r\n\r\nSteps to reproduce:\r\n\r\n1. Create a library which contains a directive which defines a host directive and maps it's inputs:\r\n```ts\r\n@Directive({\r\n  standalone: true,\r\n  selector: '[appTest]',\r\n  hostDirectives: [\r\n    {\r\n      directive: HostDirective,\r\n      inputs: ['hostInput:testInput'],\r\n    },\r\n  ],\r\n})\r\nexport class TestDirective {}\r\n```\r\n2. Build the library with partial compilation mode\r\nThe compiler will transform the host directive metadata to:\r\n```ts\r\nhostDirectives: [{ directive: i1$1.HostDirective, inputs: [\"hostInput\", \"odxMenu\"] }]\r\n```\r\nhttps:\/\/github.com\/angular\/angular\/blob\/c3b00959659ca20d3f798820dfcb4dee250a32ac\/packages\/compiler\/src\/render3\/view\/compiler.ts#L981\r\n3. Use the library in another project, the core package will report the `NG0311` error.\r\n\r\nThis is because in `@angular\/core` a validation check fails in when the dev mode is active: https:\/\/github.com\/angular\/angular\/blob\/c3b00959659ca20d3f798820dfcb4dee250a32ac\/packages\/core\/src\/render3\/features\/host_directives_feature.ts#L197\n\n### Please provide a link to a minimal reproduction of the bug\n\n_No response_\n\n### Please provide the exception or error you saw\n\n```true\nNG0311: Directive _a does not have an input with a public name of menu.\r\n\r\nat validateMappings (..\/..\/..\/node_modules\/@angular\/core\/fesm2022\/core.mjs:14715:23)\r\nat validateHostDirective (..\/..\/..\/node_modules\/@angular\/core\/fesm2022\/core.mjs:14700:5)\r\nat Object.findHostDirectiveDefs (..\/..\/..\/node_modules\/@angular\/core\/fesm2022\/core.mjs:14616:17)\r\nat findDirectiveDefMatches (..\/..\/..\/node_modules\/@angular\/core\/fesm2022\/core.mjs:12727:21)\r\nat resolveDirectives (..\/..\/..\/node_modules\/@angular\/core\/fesm2022\/core.mjs:12492:29)\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 16.2.12\r\nNode: 18.18.0\r\nPackage Manager: npm 10.3.0\r\nOS: linux x64\r\n\r\nAngular: 16.2.12\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... language-service, platform-browser, platform-browser-dynamic\r\n... router, service-worker\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1602.12\r\n@angular-devkit\/build-angular   16.2.12\r\n@angular-devkit\/core            16.2.12\r\n@angular-devkit\/schematics      16.2.12\r\n@angular\/cdk                    16.2.13\r\n@schematics\/angular             16.2.11\r\nng-packagr                      16.2.3\r\nrxjs                            7.8.1\r\ntypescript                      5.1.6\r\nwebpack                         5.89.0\r\nzone.js                         0.13.3\n```\n\n\n### Anything else?\n\nA possible solution might be to merge the input alias again:\r\n```ts\r\nfunction createHostDirectivesMappingArray(mapping) {\r\n    const elements = [];\r\n    for (const publicName in mapping) {\r\n        if (mapping.hasOwnProperty(publicName)) {\r\n          const mappedPublicName = mapping[publicName];\r\n          const literalName = mappedPublicName === publicName ? publicName : `${publicName}:${mappedPublicName}`;\r\n          elements.push(literal(literalName));\r\n        }\r\n    }\r\n    return elements.length > 0 ? literalArr(elements) : null;\r\n}\r\n```","comments":["We are also facing this issue. Any progress on this?"],"labels":["area: compiler"]},{"title":"NG8011: Node matches the X slot of the Y component, but will not be projected into the specific slot because the surrounding @if has more than one node at its root.","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\ncompiler\r\n\r\n### Is this a regression?\r\n\r\nYes\r\n\r\n### Description\r\n\r\nI have the following code which causes a warning during compilation, but the warning suggests fixes that don't apply to the code in question.\r\n\r\n```html\r\n  <mat-form-field subscriptSizing=\"dynamic\">\r\n    <mat-label>Phone Number<\/mat-label>\r\n    <input\r\n      matInput\r\n      [formControl]=\"form.controls.phoneNumber\"\r\n      required\r\n      type=\"tel\"\r\n    \/>\r\n    @if (form.controls.phoneNumber.hasError('isPhoneNumber')) {\r\n      <mat-error>Must be a valid U.S. phone number<\/mat-error>\r\n    }\r\n  <\/mat-form-field>\r\n```\r\n\r\nThis caused the following compiler warning, followed by some suggestions to fix it.\r\n\r\n> NG8011: Node matches the \"mat-error, [matError]\" slot of the \"MatFormField\" component, but will not be projected into the specific slot because the surrounding @if has more than one node at its root.\r\n\r\nThe bug here is that **there is not more than one node at the root of the @if**. Suggestion 1 is basically already in-place, suggestion 2 is impossible, and section 3 is already in-place.\r\n\r\nNote that this is not a duplicate of #53477, because #53477 is a case where the content does need to be split\/wrapped.\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\n_No response_\r\n\r\n### Please provide the exception or error you saw\r\n\r\n```true\r\nThe compiler error is as follows:\r\n\r\n\r\nWarning: src\/app\/@shared\/send-it\/send-it.component.html:14:7 - warning NG8011: Node matches the \"mat-error, [matError]\" slot of the \"MatFormField\" component, but will not be projected into the specific slot because the surrounding @if has more than one node at its root. To project the node in the right slot, you can:\r\n\r\n1. Wrap the content of the @if block in an <ng-container\/> that matches the \"mat-error, [matError]\" selector.\r\n2. Split the content of the @if block across multiple @if blocks such that each one only has a single projectable node at its root.\r\n3. Remove all content from the @if block, except for the node being projected.\r\nNote: the host component has `preserveWhitespaces: true` which may cause whitespace to affect content projection.\r\n\r\nThis check can be disabled using the `extendedDiagnostics.checks.controlFlowPreventingContentProjection = \"suppress\" compiler option.`\r\n\r\n14       <mat-error>Must be a valid U.S. phone number<\/mat-error>\r\n         ~~~~~~~~~~~\r\n\r\n  src\/app\/@shared\/send-it\/send-it.component.ts:15:16\r\n    15   templateUrl: '.\/send-it.component.html',\r\n                      ~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    Error occurs in the template of component SendItComponent.\r\n```\r\n\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 17.1.1\r\nNode: 18.18.0\r\nPackage Manager: yarn 1.22.19\r\nOS: darwin arm64\r\n\r\nAngular: 17.1.0\r\n... animations, cdk, common, compiler, compiler-cli, core, forms\r\n... language-service, localize, material, platform-browser\r\n... platform-browser-dynamic, router, service-worker\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1701.1\r\n@angular-devkit\/build-angular   17.1.1\r\n@angular-devkit\/core            17.1.1\r\n@angular-devkit\/schematics      17.1.1\r\n@angular\/cli                    17.1.1\r\n@angular\/pwa                    17.1.1\r\n@schematics\/angular             17.1.1\r\nrxjs                            7.8.1\r\ntypescript                      5.3.3\r\nzone.js                         0.14.3\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\nThis happens in many other similar (one root node inside the `@if`) instances--not always MatFormField, even--across my application.","comments":["Whitespaces count as text nodes if your application is no configured with `preserveWhitespaces` set to `true`","I have a particular need for `preserveWhitespaces` to be set to `true` in my case. The compiler warning doesn't instruct me how I should or should not format the whitespace in\/around the `@if` block if I want to prevent the content projection problem while keeping `\"preserveWhitespaces\": true` in my config.","You can remove the whitespace inside the `@if` block to solve this problem.","The warning mentions that the component has `preserveWhitespaces: true`. See this line:\r\n\r\n> Note: the host component has `preserveWhitespaces: true` which may cause whitespace to affect content projection.","> The warning mentions that the component has `preserveWhitespaces: true`. See this line:\r\n> \r\n> > Note: the host component has `preserveWhitespaces: true` which may cause whitespace to affect content projection.\r\n\r\nIt does not, however, suggest a way to fix the problem while maintaining `preserveWhitespace: true`.  Nor does it explain why or how white space affects content projection. Nor does it explain that text nodes are relevant at all. Perhaps this is less a compiler _bug_, and more of a compiler _developer experience problem_.","@Kerrick can you issue be resolved by using `ngPreserveWhitespaces` where you specifically need to preserve whitespaces? Or is your usecase application wide?","I have, same problem, it was working fine with old *ngFor in my scenario."],"labels":["area: core","area: compiler","core: control flow"]},{"title":"refactor(core): Remove unused imports and module object names","body":"Cleaned up the core package folder by removing all unused imports\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [ ] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: N\/A\r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":[],"labels":["action: review","area: core"]},{"title":"Consider setting up  \"Custom Properties\" feature in Angular repositories","body":"### Describe the problem that you experienced\r\n\r\nI noticed a **new** label in the Angular repositories, in the metadata section, named `Custom Properties`. When clicking it, you are redirected to the new \"Custom properties\" page at https:\/\/github.com\/angular\/angular\/custom-properties.\r\n\r\n---\r\n\r\nGithub has a new beta feature for setting `Custom Properties` at Organization level to your repositories and decorate them with custom metadata or similar, as described at [Github docs](https:\/\/docs.github.com\/en\/enterprise-cloud@latest\/organizations\/managing-organization-settings\/managing-custom-properties-for-repositories-in-your-organization). \r\n\r\n> Custom properties allow you to decorate your repository with information such as compliance frameworks, data sensitivity, or project details.\r\n\r\n### Add a screenshot if that helps illustrate the problem\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/112062588\/424cf6d3-2df7-4eb6-82da-22a9cd03ecd6)\r\n\r\n### Enter the URL of the topic with the problem\r\n\r\nhttps:\/\/github.com\/angular\/angular\r\n\r\n### Suggestion\r\n\r\nI suggest to consider digging in on the new feature and setting it up or disabling it, if possible, to clear up boilerplate labels in the repositories metadata section.\r\n\r\n### References\r\n\r\n - https:\/\/github.blog\/changelog\/2023-10-12-github-repository-custom-properties-beta\/\r\n - https:\/\/github.com\/orgs\/community\/discussions\/69914\r\n - https:\/\/docs.github.com\/en\/enterprise-cloud@latest\/organizations\/managing-organization-settings\/managing-custom-properties-for-repositories-in-your-organization","comments":[],"labels":["area: dev-infra","P4","area: adev","area: docs"]},{"title":"NG0100 thrown when iterating through map.keys()","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\ncore\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nThis issue relates to NG0100 being raised when using *ngFor to iterate over map.keys(). My understanding based on [this issue](https:\/\/github.com\/angular\/angular\/issues\/51938) is that this is expected behaviour, as a different iterator is returned from the map.keys() function on each call, however this suggests to me that the *ngFor directive is incompatible with iterators, which aside from being surprising to me, doesn't seem to be documented in either the [*ngFor documentation](https:\/\/angular.io\/api\/common\/NgFor), or the troubleshooting documentation for [NG0100](https:\/\/angular.io\/errors\/NG0100).\r\n\r\nIf I've misunderstood the conversation from the previous issue, I'd appreciate if someone could provide an example of how to use *ngFor with an iterator such as the one returned by map.keys(). Obviously there is a trivial workaround to convert map.keys() into a list, but this doesn't resolve the core issue of *ngFor being unintuitively incompatible with iterators.\r\n\r\nIf I've correctly understood the information from the previous issue that *ngFor is incompatible with iterators, my request for a resolution to this issue would be to either:\r\n1. Update the *ngFor directive to be compatible with iterators such as the one returned from map.keys() without raising NG0100 \r\n2. Update the documentation for *ngFor and NG0100 to make it clear that the *ngFor directive is not compatible with iterators (it would also be nice to potentially raise a seperate error in this kind of situation, as it seems to be distinct from the typical error that NG0100 represents).\r\n\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\nhttps:\/\/stackblitz.com\/edit\/stackblitz-starters-kjsh2w?file=src%2Fapp%2Fapp.component.ts\r\n\r\n### Please provide the exception or error you saw\r\n\r\n```true\r\nError: NG0100: ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '[object Map Iterator]'. Current value: '[object Map Iterator]'. Expression location: AppComponent component. Find more at https:\/\/angular.io\/errors\/NG0100\r\n```\r\n\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 13.3.3\r\nNode: 20.10.0 (Unsupported)\r\nPackage Manager: npm 10.2.3\r\nOS: win32 x64\r\n\r\nAngular:\r\n...\r\n\r\nPackage                      Version\r\n------------------------------------------------------\r\n@angular-devkit\/architect    0.1303.3 (cli-only)\r\n@angular-devkit\/core         13.3.3 (cli-only)\r\n@angular-devkit\/schematics   13.3.3 (cli-only)\r\n@schematics\/angular          13.3.3 (cli-only)\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\n_No response_","comments":["This boils down to the difference between iterators vs iterables. It is correct that `NgFor`\/`@for` only supports the latter, not the former. This can be included in the documentation, indeed, but I'm not sure it can be detected and reported at runtime.","It seems there are more problems than that.\r\n\r\nFirst, immediate issue: `map.keys()` is not a 'stable' expression, it returns new value every time it is called (and template might call it many times). I'd say this is client code issue -- change detection requires stable values. Error message could be clearer, though, e.g. compiler could detect certain common cases.\r\n\r\nSecond, mentioned issue of iterable\/iterator difference. `NgFor` supports `NgIterable<T>` which is `Array<T> | Iterable<T>`. So, yes, iterators are not supported, I think mostly because there is no clear and safe way to rewind an iterator. Yet again, compiler could help with good error message: current behavior can be described as 'nothing there, the list is empty'. There is an easy way to observe this:\r\n\r\n```ts\r\nkeys = this.map.keys()\r\nlog = <T>(value: T): T => { console.log(value); return value }\r\n```\r\n```html\r\n<li *ngFor=\"let entry of log(keys0)\">\r\n  {{ log(entry) }}\r\n<\/li>\r\n```\r\nAnd here is what you'll see in console (note: I'd suggest using 'Open Preview in new tab' button in the top right corner and open actual browser console to avoid little glitches coming from StackBlitz console):\r\n```\r\napp.component.ts:23 MapIterator\u00a0{'0', '1', '2'}\r\napp.component.ts:23 0\r\napp.component.ts:23 1\r\napp.component.ts:23 2\r\napp.component.ts:23 MapIterator\u00a0{}\r\napp.component.ts:23 0\r\napp.component.ts:23 1\r\napp.component.ts:23 2\r\ntokens.ts:141 Angular is running in development mode.\r\napp.component.ts:23 MapIterator\u00a0{}\r\napp.component.ts:23 MapIterator\u00a0{}\r\n```\r\nAs you can see, first time `log()` is called, iterator is not yet traversed, but on every next call it is already 'depleted' (not sure why keys are iterated twice, tho, probably some caching on Angular side?).\r\n\r\nThird problem is, `Map` is actually an `Iterable`, but it does not work. The following snippet:\r\n```html\r\n<li *ngFor=\"let entry of log(map)\">\r\n  {{ log(entry) }}\r\n<\/li>\r\n```\r\nthrows this error:\r\n```\r\nNG02200: Cannot find a differ supporting object '[object Map]' of type 'object'. NgFor only supports binding to Iterables, such as Arrays. Did you mean to use the keyvalue pipe? Find more at https:\/\/angular.io\/errors\/NG02200\r\n```\r\n`keyvalue` pipe is a sound adivce, but it is not clear why it should be used, since other `Iterable` instances work just fine, e.g.:\r\n```ts\r\npairs = {\r\n  [Symbol.iterator]: () => this.map[Symbol.iterator]()\r\n}\r\nkeys1 = {\r\n  [Symbol.iterator]: () => this.map.keys()\r\n}\r\n```\r\nHere is [playground](https:\/\/stackblitz.com\/edit\/stackblitz-starters-luezsw?file=src%2Fapp%2Fapp.component.ts,src%2Fapp%2Fapp.component.html) with all these cases combined.\r\n\r\nSo, to summarize:\r\n1. 'Unstable' functions\/getters\/etc. are not compatible with Angluar's change detection, as expected. Error message could be clearer (on the other hand, infamous `ExpressionChangedAfterItHasBeenCheckedError` is known for almost a decade, and too many things can lead to it -- making compiler distinguish this particular case would be really hard).\r\n2. `Iterator` is not a valid input for `*ngFor` due to its 'runs only once' nature. Another possible error message improvement.\r\n3. `Iterable` is generally a valid input, according to typing in Angular source code, and it generally works as expected.\r\n4. Specific `Iterable` objects like `Map` do not work and have very specific error message. I think (it's just a guess) that Angular team wants to protect people from mistake of using mutable data structure like `Map` in places where change detection checks only references, not the content."],"labels":["area: common","area: core","core: change detection"]},{"title":"fix(router): revert commit that replaced `last` helper with native `Array.at(-1)`","body":"This is backport of #54021 to the LTS branch\r\n","comments":[],"labels":["area: build & ci","area: router","target: lts"]},{"title":"Unclear usage of effect to retrieve data in async way","body":"### Describe the problem that you experienced\r\n\r\nI'm really enthusiastic about the new features in angular 17, but I'm unsure on how to use the new effects. It seems the new way to make an application reactive (without the need for rxjs mostly), but if I look at the official [angular.dev](https:\/\/angular.dev) explanation on effect it states \"Effects are rarely needed in most application code\" which feels a bit strange. Does this mean angular prefers us to stick with rxjs streams for reactivity and fetching data?\r\nOn the other hand I find plenty of other examples on blogs\/X\/... where effect are used to initiate retrieving data and setting other signals their value (since it's an async process writing to signal just works without errors there). Even initiatives like [computedAsync](https:\/\/ngxtension.netlify.app\/utilities\/signals\/computed-async\/) are based on that pattern. If we work like that, are we ignoring angular best practices? Or is this allowed\/the future of reactivity in angular?\r\n\r\n### Enter the URL of the topic with the problem\r\n\r\nhttps:\/\/angular.dev\/guide\/signals\r\n\r\n### Describe what you were looking for in the documentation\r\n\r\nProbably I overlooked, but on angular.dev I find no example at all on how to trigger an http get call to retrieve data and how to store that data (in signals).\r\n\r\n### Describe the actions that led you to experience the problem\r\n\r\nUpgrading and adapting to angular 17, but became confused by official statements on angular.dev and examples elsewhere (because of the lack of examples on angular.dev itself).\r\n\r\n### Describe what you want to experience that would fix the problem\r\n\r\nA clear statement from the angular team on this topic :)\r\n\r\n### Provide any additional information here in as much as detail as you can\r\n\r\nI've setup a stackblitz to show 3 different approaches I see now, probably we can find even more variations, but really wondering what to choose\/which is the 'default angular way'...\r\nhttps:\/\/stackblitz.com\/edit\/stackblitz-starters-bg7wyc?file=src%2Fmain.ts\r\n\r\n","comments":["@pkozlowski-opensource would really appreciate your thoughts on the above :-)\r\n@eneajaho as creator of computedAsync you'll have a say in this too I guess ;-)","From my experience using effects, their usage can be reduced by atomizing components and changing the effect to a @Input set or something similar.","@HammamBM thx for quick reply, but I'm afraid my question is not clear enough when I read your answer, I tried to change the title and hope it becomes more clear. \r\nI want to know if it's OK to use an effect for retrieving data asynchronously (and setting other signals). A pattern that almost every application needs, but according to the angular.dev documentation, it doesn't appear to be intended for such purposes. On the other hand I've noticed people utilizing it for exactly that. That way they can avoid extensive use of rxjs.","@TarsisDragomir I think the same still applies. At least, that's what I try to do. Use the observable with ASYNX pipe on my @Input. The issue with effect for that is that you have to \"cheat\" setting allowSignalWrites to true.","Yes, sticking with streams and subscribe via | async can still be done (it's the first approach in the above stackblitz). Is that how we should keep on doing it? Can you point me to an official angular documentation page that states that? How to look then at initiatives like computedAsync from a GDE?\r\nI have plenty of applications to upgrade to angular 17 and I want to stay close to the 'angular vision' of doing things, but on this topic I don't find any clear examples\/statement which leaves me confused.","I don't think that effects, used with `allowSignalWrites` are a valid\/good usecase for retrieving data from an API. \r\nSignals are a good paradigm to react on ui clicks, input changes etc. but not for managing\/reloading data imho. I'd stick to observables for this.\r\n\r\n~I've glanced over the docs, but could not find a clear statement about this either.~\r\n\r\n[Rxjs Interop](https:\/\/angular.dev\/guide\/signals\/rxjs-interop) has an example that contains http calls, maybe this is what you are looking for?","I'm nowhere using `allowSignalWrites` in the effect approach, that would indeed feel wrong. Did you check the [stackblitz](https:\/\/stackblitz.com\/edit\/stackblitz-starters-bg7wyc?file=src%2Fmain.ts)? I'm using explicitly `untracked` around the async part, which is even not really necessary as long as you are sure it is async. But in a normal application the http.get would be hidden in a service and if that service builds in caching or something the subscribe can be executed in a synchronous way, that's why I would still put `untracked` around it to make it clear that effect dependency tracking has to stop there.\r\n\r\nIn fact; if you look at the toObservable implementation, the exact same flow is used (effect + declare dependencies + untracked). To continue on that; the first 2 approaches in my stackblitz have 3 effects running hidden in the background, whereas the 3rd approach by writing the effect ourself, there is only 1. No longer a stream of data, but just a writable signal that gets (re)filled whenever needed. I feel that will be understood more easily by newer (angular) developers. \r\n\r\nI work for an organization with many developers that - how to say it politely - have very different experience levels and we are trying to\r\n1.  stick as close as possible to angular rules\/best practices \r\n2. keep it as simple\/maintainable\/readable as possible. \r\n\r\nSo I'm trying to figure out the options we have before we go for a massive angular 17 rollout.\r\n\r\nI would really appreciate feedback from core team members on the vision\/future of reactivity in angular to be unblocked in our rollout process."],"labels":["area: core","core: reactivity"]},{"title":"fix(router): preserve replaceUrl when returning a urlTree from CanAct\u2026","body":"\u2026ivate\r\n\r\nThis commit will fix the issue of the setting of NavigationExtras.replaceUrl being lost when returning a urlTree from a CanActivateFn.\r\n\r\nFixes #53503\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [X] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n     I didn't see anything in the docs that mentions the bug.\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ X] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nhttps:\/\/github.com\/angular\/angular\/issues\/53503\r\nIssue Number: 53503\r\n\r\n\r\n## What is the new behavior?\r\nNavigationExtras.replaceUrl is preserved.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["Hi @atscott I have updated the pull request as well as added extra tests to confirm that your above suggestion is working.","@blathers16 It looks like something went wrong during rebase. Your PR includes 167 commits, can you have a look ? thank you. ","hi @JeanMeche that is probably because I didn't try to rebase.  What is the goal here? To end up with a single commit for the entire PR?","Yes, the PR should include only the changes intended for the fix. Currently having 1,017 file changes makes it hard to review. \r\nAlso having a single commit allows easy reverts if the change introduces an unwanted breaking change. ","Hi, @JeanMeche, I think I fixed it.  I have no idea where the 1,017 files came from, all I did was merge in upstream\/main.  Anyways, it should be all in one commit with no unrelated changes now.","Hi, @atscott, I made most of the requested changes except using RouterTestingHarness.  It doesn't seem to have a way to pass NavigationExtras, so I don't think it can be used in this case.  Feel free to correct me if I am wrong."],"labels":["breaking changes","area: router","target: major"]},{"title":"Formcontrol essential features","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\n@angular\/forms\r\n\r\n### Description\r\n\r\n1. Formcontrol should know whether it is focused, submitted.\r\n2. We should be able to add multiple updateOn values not just one.\r\n3. We should be able to set if we want to propagate valueChanges and\/or statusChanges\r\n\r\n\r\n### Proposed solution\r\n\r\n1. add focused:boolean property to Formcontrol class, and focus$ submit$ streams we can subscribe to\r\n2. rewrite updateOn so it accepts arrays like: ['blur','submit'], and also extend it with 'focus', 'click', 'dblclick' etc.\r\n3. extend Formcontrol so we can add { propagateValueChanges : false , propagateStatusChanges: true } at declaration\r\n\r\n\r\n### Alternatives considered\r\n\r\nwouldn't have written the issue if had found any","comments":["Hi @Dejavu333 , \r\n\r\nI don't understand the motivations of the following points, maybe could explain it a little more : \r\n\r\n> 1.Formcontrol should know whether it is focused, **submitted**.\r\n\r\nThe focused property can easily find a utility, but for the submit, what  use cases have you in mind (for the `FormControl` particulary, as for the `FormGroup` it can find a useful usage) ? \r\nAnyway the `[formGroup]` directive has an property that track the submit status :\r\n\r\n```\r\n<form [formGroup]=\"form\" (ngSubmit)=\"submit()\" #formDir=ngForm>\r\n    <input type=\"text\" formControlName=\"test\" \/>\r\n    <button type=\"submit\">submit<\/button>\r\n  <\/form>\r\n  <span>{{formDir.submitted}}<\/span>\r\n```\r\n\r\nWhat have you in mind for the `focus` event ? \r\n\r\n> 2.We should be able to add multiple updateOn values not just one. \r\n\r\nDoes it make any sense to have a stream for the focus event anymore ? What are you planning to listen for the focus event ? I think that the events streamed for the update should be bounded to avoid any overload during the listening of events.\r\n\r\nThe third point makes sense. ","1 and 2 kinda goes hand in hand. \r\nCurrently, FormControl validations are tightly coupled and can only be triggered by a single event, which limits flexibility. For instance, you might want to trigger different validators for FormGroup and FormControl, but the current setup doesn\u2019t allow for this differentiation, since the updateValueAndValidity function triggers valueChanges in the parent FormGroup, which in turn activates its validators. This becomes an issue when you want your controls' validators to be triggered by different events - for example, one on \u2018blur\u2019 and \u2018hover\u2019 (_this is where multiple values would come into play_), another on \u2018change\u2019, and the FormGroup validators on \u2018submit\u2019 and \u2018submit\u2019 only.\r\n\r\nIt would be beneficial to decouple these elements to allow for more granular control over when and how validations are triggered.","I've started to implement a new approach, where you can instantiate a formControl like this:\r\n<img width=\"458\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/89163562\/51b50f57-91e4-4c38-a5ca-81d816b61ac2\">\r\n\r\n Cleaner and can achieve the desired behaviour I stated above."],"labels":["area: forms","forms: Controls API"]},{"title":"SwUpdate emits superfluous `VERSION_READY` event with `navigationRequestStrategy` set to `\"freshness\"`","body":"### Which @angular\/* package(s) are the source of the bug?\n\nservice-worker\n\n### Is this a regression?\n\nNo\n\n### Description\n\nWhen settings `navigationRequestStrategy` to `\"freshness\"` in `ngsw-config.json`, a user opening the browser will always get the newest version, which is great.\r\n\r\nHowever, when closing and reopening the tab `SwUpdate.versionUpdates` will emit a `VERSION_DETECTED` event alongside a `VERSION_READY` event, despite the user being on the latest version.\r\n\r\nThis behavior leads to showing unwanted update alerts to our users and as far as I know we don't have any way to differentiate these unwanted `VERSION_READY` events from other warranted ones.\r\n\r\n\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/github.com\/Babeetlebum\/angular-sw-bug\n\n### Please provide the exception or error you saw\n\n```true\nHow to reproduce:\r\n\r\n1. pull the repo\r\n2. `yarn build --watch`\r\n3. run a nginx webserver with `docker-compose up --build`\r\n4. open the app at http:\/\/localhost:4201\r\n5. it shows version `v1.0.0`\r\n6. close the tab (important step)\r\n7. increment the version in `app.component.ts` to `v1.0.1`\r\n8. open the app at http:\/\/localhost:4201 again\r\n9. the new version is pulled (`v1.0.1`) thanks to `navigationRequestStrategy: \"freshness\"` but `SwUpdate` still emits a `VERSION_READY` event, thus prompting users to update to the new version\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.1.0\r\nNode: 20.11.0\r\nPackage Manager: yarn 1.22.19\r\nOS: linux x64\r\n\r\nAngular: 17.1.0\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n... service-worker\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1701.0\r\n@angular-devkit\/build-angular   17.1.0\r\n@angular-devkit\/core            17.1.0\r\n@angular-devkit\/schematics      17.1.0\r\n@schematics\/angular             17.1.0\r\nrxjs                            7.8.1\r\ntypescript                      5.3.3\r\nzone.js                         0.14.3\n```\n\n\n### Anything else?\n\n_No response_","comments":["> You can check latest version before log.\r\n\r\nThanks for your answer, unfortunately that's exactly what I'm doing and where the bug resides, the `VERSION_READY` event I'm receiving from `SwUpdate` indicates that hash of `currentVersion` is `'abc'` and hash of `latestVersion` is `'def'` but actually the loaded app is already `'def'`. The `currentVersion` I receive from `SwUpdate` is wrong.\r\nThis doesn't happen when using the default value `performance` for `navigationRequestStrategy` though, only on `freshness`\r\n\r\n","I looked into the code but couldn't find an easy fix. In the meantime I see two solutions:\r\n\r\n1. going back to `performance` mode\r\n2. providing the version number in `ngsw-config.json` `appData` then check the `latestVersion` before prompting the user to update the app (in other words: ignore the superfluous `VERSION_READY` event when user is already on the latest version)\r\n\r\nI see that the [angular documentation](https:\/\/angular.io\/guide\/service-worker-config#navigationrequeststrategy) advises against using `freshness` but in our usecase `freshness` kind of makes sense:\r\n\r\n1. limited amount of users, so our servers won't be under heavy load\r\n2. most of our users are in an office with fast internet so they won't have to wait for the new version for too long\r\n3. in `performance` mode the update prompt comes after 5-10s of users loading the app from SW, so they get interrupted in their flow \r\n\r\nWe might work on improving 3. in the future and make the update process more seemless and go back to `performance`.\r\n\r\nI still think it would be nice if SW would update its `currentVersion` when loading the app with `freshness` mode","I have the same issue today, very confuse"],"labels":["area: service-worker"]},{"title":"@if(A && B) {} should be the same as @if (A) { @if(B) {}} but is not","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\ncore\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\n\n@if(A && B) {} should be the same as @if (A) { @if(B) {}} but is not\r\n\r\nI wanted to work with angular material form-field. I tried to condition mat-errors.\r\n\r\nI wrote a first @if to test if the field is touched or not and inside several @if to test the different error cases.\r\n\r\nexpected : as usual a beautiful mat-error design\r\n\r\nResult : the mat-error is not displayed as expected. No design for him.\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\nhttps:\/\/stackblitz.com\/edit\/73hcig-celf3j?file=src%2Fexample%2Fform-field-error-example.html\r\n\r\n### Please provide the exception or error you saw\r\n\r\n_No response_\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 17.0.0\r\nNode: 18.18.0\r\nPackage Manager: yarn 1.22.19\r\nOS: linux x64\r\n\r\nAngular: 17.0.0\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                            Version\r\n------------------------------------------------------------\r\n@angular-devkit\/architect          0.1700.0\r\n@angular-devkit\/build-angular      17.0.0\r\n@angular-devkit\/core               17.0.0\r\n@angular-devkit\/schematics         17.0.0\r\n@angular\/cdk                       17.1.0\r\n@angular\/localize                  17.0.8\r\n@angular\/material                  17.1.0\r\n@angular\/material-moment-adapter   17.1.0\r\n@schematics\/angular                17.0.0\r\nrxjs                               7.4.0\r\ntypescript                         5.2.2\r\nzone.js                            0.14.0\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\nIn the stackblitz repo you just have to click inside both input and you will see the difference","comments":["Hi, this is likely related to #50957 &  #51239 :  Angular doesnt support sharing form controls.  ","I don't think this is related to sharing form controls, the behavior is present if you use separate controls as well.\r\n\r\nI think this is related to #52277 and it's fix #52414. Nested NgIf directives exhibit this behavior as well (see https:\/\/stackblitz.com\/edit\/73hcig-gwuegl?file=src%2Fexample%2Fform-field-error-example.html,src%2Fexample%2Fform-field-error-example.ts).\r\n\r\nSide note, you shouldn't need the condition on the `touched` property since the default [ErrorStateMatcher](https:\/\/material.angular.io\/components\/core\/api#ErrorStateMatcher) does this for you, or you could write your own.","It's not related to form control, this is an example which show the problem \ud83d\ude42\n\nSo it's fixed but not released yet?\n\nSidenote => thanks \ud83d\udc4c\ud83c\udffc","Minimal reproduction scenario, without using material components: https:\/\/stackblitz.com\/edit\/stackblitz-starters-d4hwfv?file=src%2Fmain.ts","This is a fundamental limitation of our content projection system and as @garrettld [pointed out](https:\/\/github.com\/angular\/angular\/issues\/54035#issuecomment-1906512645) also not something specific to the new control flow, as NgIf was suffering from the same problem.\r\n\r\nI'm afraid this is not something we can fix  with the new control flow - we do plan to have a deeper look into the  content projection system - until them using the `@if(A && B) {}` form is the way to go. Also note that `<ng-container ngProjectAs=\"...\">` is a viable workaround, ex.:\r\n\r\n```html\r\n<with-content>\r\n      <ng-container ngProjectAs=\"some-content\">\r\n        @if(a) {\r\n            @if(b) { \r\n              <some-content \/>\r\n            }\r\n        }\r\n      <\/ng-container>\r\n<\/with-content>\r\n```"],"labels":["area: core","core: content projection","core: control flow"]},{"title":"Async computed signal - Add the ability to easily create async signals with dependencies","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nCurrently, the computed operator for signal provides the ability to create a new signal value, which is dependent on other signals.\r\n\r\nThe limitation I want to solve is that currently, the computed operator only allows for synchronous computations with immediate resolution of the newly computed value.\r\n\r\nMy suggestion is to allow computed signals to accept an async value (promise or observable), which when combined with a flag would wait until an actual value returns from the async value before updating the signal.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n### Proposed solution\n\nUse case - \r\n```\r\n@Component({\r\n\ttemplate: `\r\n\t<input (change)=\"query.set($event.value)\">\r\n\t`,\r\n})\r\nclass TestComponent {\r\n\tquery = signal('');\r\n}\r\n```\r\nConsider the use case in the component above, where on every keystroke I want to fetch some data from a backend service.\r\n\r\nExample - Promise:\r\n```\r\n@Component({\r\n\ttemplate: `\r\n\t<input (change)=\"query.set($event.value)\">\r\n\t`,\r\n})\r\nclass TestComponent {\r\n\tquery = signal('');\r\n\t\r\n\tservice = inject(DataService);\r\n\t\r\n\tdata:Signal<Data | undefined> = computed(\r\n\t       () => this.service.queryAsPromise({query: this.query()}), \/\/ returns a promise \r\n\t\t{ async: true }\r\n\t)\r\n}\r\n```\r\n\r\nExample - Observable:\r\n```\r\n@Component({\r\n\ttemplate: `\r\n\t<input (change)=\"query.set($event.value)\">\r\n\t`,\r\n})\r\nclass TestComponent {\r\n\tquery = signal('');\r\n\t\r\n\tservice = inject(DataService);\r\n\t\r\n\tdata:Signal<Data | undefined> = computed(\r\n\t\t() => this.service.queryAsObservable({query: this.query()}), \/\/ returns an observable\r\n\t\t{ async: true }\r\n\t)\r\n}\r\n```\r\n\r\nUsing the computed operator with an async callback, but without specifying the async flag would result in a signal that holds an async value (same behavior today so not a breaking change):\r\n```\r\n@Component({\r\n\ttemplate: `\r\n\t<input (change)=\"query.set($event.value)\">\r\n\t`,\r\n})\r\nclass TestComponent {\r\n\tquery = signal('');\r\n\t\r\n\tservice = inject(DataService);\r\n\t\r\n\tdata:Signal<Promise<Data>> = computed(\r\n\t\t() => this.service.queryAsPromise({query: this.query()}), \r\n\t)\r\n}\r\n```\n\n### Alternatives considered\n\nCurrently this is possible only with these 2 options:\r\n1 - Using promise and effect which writes to a new signal:\r\n```\r\n@Component({\r\n\ttemplate: `\r\n\t<input (change)=\"query.set($event.value)\">\r\n\t`,\r\n})\r\nclass TestComponent {\r\n\tquery = signal('');\r\n\t\r\n\tdata = signal([]);\r\n\r\n\tconstructor(service:DataService) {\r\n\t\teffect(async () => {\r\n\t\t\tconst query = this.query()\r\n\t\t\tconst result = await service.queryAsPromise({query});\r\n\t\t\tthis.data.set(result);\r\n\t\t}, { allowSignalWrites: true })\r\n\t}\r\n}\r\n```\r\n\r\n2 - Using observable and jumping back and forwards from signal and observables to merge all required data (not to mention the added complexity if you have several dependencies for your async request):\r\n```\r\n@Component({\r\n\ttemplate: `\r\n\t<input (change)=\"query.set($event.value)\">\r\n\t`,\r\n})\r\nclass TestComponent {\r\n\tquery = signal('');\r\n\t\r\n\tservice = inject(DataService);\r\n\t\r\n\tdata = toSignal(\r\n\t\ttoObservable(this.query)\r\n\t\t\t.pipe(mergeMap(query => this.service.queryAsObservable({query})))\r\n\t);\r\n}\r\n```\r\n\r\nBoth solutions are very verbose, convoluted, and seems like bending the framework to do something it wasn't supposed to in terms of ergonomics (my opinion).\r\nThe usecase seems pretty trivial, and I come across it constantly in our projects, so much so that I created a new function just to wrap this logic (toSignalWithDeps).","comments":["Hi @rezoled \r\nUntil Angular releases something like that (I don't know if it will release sth like it or not), you can use community solutions like `computedAsync`. \r\nIf you don't like adding another dependency to your project, you can just copy the source code of the utility to your project.\r\nI explained creating it here https:\/\/justangular.com\/blog\/building-computed-async-for-signals-in-angular\r\nYou can read docs here: https:\/\/ngxtension.netlify.app\/utilities\/signals\/computed-async\/\r\n\r\nYou can use it as :\r\n```ts\r\n@Component({\r\n  template: `<input (change)=\"query.set($event.value)\">`,\r\n})\r\nclass TestComponent {\r\n  query = signal('');\r\n  \r\n  service = inject(DataService);\r\n  \r\n  data = computedAsync(\r\n    () => this.service.queryAsPromise({ query: this.query() }), \/\/ accepts promises and observable or raw values\r\n    { initialValue: [] } \/\/ supports optional initial value too\r\n  )\r\n}\r\n```","@eneajaho very nice","> Hi @rezoled Until Angular releases something like that (I don't know if it will release sth like it or not), you can use community solutions like `computedAsync`. If you don't like adding another dependency to your project, you can just copy the source code of the utility to your project. I explained creating it here https:\/\/justangular.com\/blog\/building-computed-async-for-signals-in-angular You can read docs here: https:\/\/ngxtension.netlify.app\/utilities\/signals\/computed-async\/\r\n> \r\n> You can use it as :\r\n> \r\n> ```ts\r\n> @Component({\r\n>   template: `<input (change)=\"query.set($event.value)\">`,\r\n> })\r\n> class TestComponent {\r\n>   query = signal('');\r\n>   \r\n>   service = inject(DataService);\r\n>   \r\n>   data = computedAsync(\r\n>     () => this.service.queryAsPromise({ query: this.query() }), \/\/ accepts promises and observable or raw values\r\n>     { initialValue: [] } \/\/ supports optional initial value too\r\n>   )\r\n> }\r\n> ```\r\n\r\nHey @eneajaho \r\nYour solution is much better than the one I did, thanks for that.\r\nI do think however since this is a pretty trivial and common usecase that it should be supported by the framework. ","I hope @eneajaho's solution becomes a part of the framework"],"labels":["area: core","core: reactivity"]},{"title":"Refused to apply inline style because it violates the following Content Security Policy","body":"### Which @angular\/* package(s) are the source of the feature request?\r\n\r\ncore\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\n(changed this to a feature request... see comments)\r\n\r\nTrying to use strict CSP script-src and style-src policies and I have added ngCspNonce to my application root element, but inline styles are not loading. The nonce shows up in index.html script and style elements, but when the page loads there are many errors emitted from JS code in mainXXX.js. Feel like I must be missing something obvious, but I've double checked everything (including that the nonce value in the CSP header matches).\r\n\r\nLooking at the call stack, the source of the errors seems to be template html files that are being created at runtime. Note that I have prerender and ssr disabled and am just deploying the packed \"browser\" files to AWS S3 and Cloudfront and manually setting the CSP nonce for now. I do have an external UI library that I was expecting to have some difficulty with, but removing that made no difference and the current errors seem to be generated when adding inlined styled Angular Material elements\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\nCheck error in the JS console for:\r\nhttps:\/\/testcsp.schicks.net\/\r\n\r\n### Please provide the exception or error you saw\r\n\r\n```t[rue\r\nmain-5TORSPFS.js:8 Refused to apply inline style because it violates the following Content Security Policy directive: \"style-src 'self' 'nonce-ew26COJKMG8qrA\/bjTcl0w=='\". Either the 'unsafe-inline' keyword, a hash ('sha256-rMuFfE8Uore3ZjKvUao\/SW5yWTAZjyzCj88QtGdRqjk='), or a nonce ('nonce-...') is required to enable inline execution...]\r\n```\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 17.1.0\r\nNode: 21.6.0 (Unsupported)\r\nPackage Manager: npm 10.3.0\r\nOS: linux arm64\r\n\r\nAngular: 17.1.0\r\n... animations, cdk, cli, common, compiler, compiler-cli, core\r\n... forms, material, platform-browser, platform-browser-dynamic\r\n... platform-server, router, ssr\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1701.0\r\n@angular-devkit\/build-angular   17.1.0\r\n@angular-devkit\/core            17.1.0\r\n@angular-devkit\/schematics      17.1.0\r\n@schematics\/angular             17.1.0\r\nrxjs                            7.8.1\r\ntypescript                      5.3.3\r\nzone.js                         0.14.3\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\nSource code is here: https:\/\/github.com\/bschick\/test-csp\r\nCan be opened in stackblitz: \r\nhttps:\/\/stackblitz.com\/github\/bschick\/test-csp\r\n","comments":["This is expected when using inline styles (e.g. `style=\"display: block;\"` in a template), as you can't specify a nonce for them.","Ah, that make sense.  Let's turn this into a feature request. The html files in Angular are templates, so to better support CSP without unsafe-inline it  would be helpful to have a template complier feature that optionally did not create inline styles in the output html. For small projects or small local changes in big projects, inline styles are very handy (not interested in tailwind). \r\n\r\nSomething like this:\r\n`<button [style]=\"'height:63px'\" mat-raised-button color=\"primary\">A Button<\/button>`\r\n\r\nWould optionally compile to: \r\n`<style type=\"text\/css\" nonce=\"ngCspNonce\">\r\n.sequence_number  {\r\nheight:63px;\r\n}\r\n<\/style>\r\n<scrip nonce=\"ngCspNonce\">\r\n\/\/ code from [style] element\r\n<\/script>\r\n<button mat-raised-button class=\"sequence_number mat-mdc-raised-button\" color=\"primary\">A Button<\/button>`\r\n\r\nThis is basically what happens with script code on attributes like \"(click)\"... the (click) code is extracted to a <script> element or file. I noticed that style properties like [style.color] don't seem to generate inline styles but just [style] does. Rather than an optional behavior for [style] and friends,  you could come up with a new template attribute for this behavior like *ngStyle, but the optional processing of [styles] seems cleaner to me. If someone wanted to keep inline styles, they'd use actual style= attributes. Although computed inline styles would be gone with the option enabled, which is is an advantage of a new attribute. \r\n\r\nAlso, being new to Angular, CSP, etc. it would be helpful if this page: https:\/\/angular.io\/guide\/security was more explicit about inline styles remaining inlined. My confusion was due to the fact that (action)=, which in templates are syntactically inline, are extracted and I was thinking the same would happen for [style]= when ngCspNonce was set.","+1 on this feature request. The nonce feature Angular added is a great addition, but incomplete. When using style attributes (not elements) angular seemingly uses the following form to construct the final HTML:\r\n```javascript\r\ndocument.querySelector(\"div\").setAttribute(\"style\", \"display:none;\");\r\n``` \r\nThis is not allowed by the content security policy: \r\nhttps:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/Headers\/Content-Security-Policy\/style-src\r\n\r\nIt would be nice if Angular could use the following form instead, as this is allowed according to the spec:\r\n```javascript\r\ndocument.querySelector(\"div\").style.display = \"none\";\r\n``` \r\nFor our own libraries we can convert inline added style attributes to style elements or use a stylesheet. For 3rd party libraries this is not an option.\r\nA somewhat hacky solution is demonstrated here using a polyfill to replace the setAttribute method with a custom implementation: https:\/\/csplite.com\/csp\/test343\/\r\n\r\n"],"labels":["security","area: core","core: stylesheets","cross-cutting: CSP"]},{"title":"When using NgOptimizedImage directive, onerror=\"this.src=\/fallback\/img.jpg\" causes recursive load","body":"### Which @angular\/* package(s) are the source of the bug?\n\ncommon\n\n### Is this a regression?\n\nNo\n\n### Description\n\nI have an image defined using the optimise directive combined with an `onerror` trigger, like so:\r\n```html\r\n<img\r\n    [ngSrc]=\"coverImage\"\r\n    onerror=\"this.src='assets\/placeholders\/project.jpg'\"\r\n    fill\r\n\/>\r\n```\r\n\r\nWhen the `coverImage` doesn't exist and a 404 occurs, it causes a recursive loop (as I understand because the src is updated after a 404 error occurs and triggers the directive to re-render).\r\n\r\nI've attempted to rectify by instead updating the ngSrc attribute\r\n```html\r\n<img\r\n    [ngSrc]=\"coverImage\"\r\n    onerror=\"this.ngSrc='assets\/placeholders\/project.jpg'\"\r\n    fill\r\n\/>\r\n```\r\nThis avoids the recursive re-rendering however doesn't change the image to the fallback. I can't see a way to implement a fallback image in combination with the `NgOptimizeImage` directive unless I'm missing something here?\n\n### Please provide a link to a minimal reproduction of the bug\n\n_No response_\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.0.9\r\nNode: 18.19.0\r\nPackage Manager: npm 9.8.1\r\nOS: darwin arm64\r\n\r\nAngular: \r\n... \r\n\r\nPackage                      Version\r\n------------------------------------------------------\r\n@angular-devkit\/architect    0.1700.9\r\n@angular-devkit\/core         17.0.9\r\n@angular-devkit\/schematics   17.0.9\r\n@schematics\/angular          17.0.9\n```\n\n\n### Anything else?\n\n_No response_","comments":["Thank you @topdev658, works like a charm!"],"labels":["area: common","common: image directive"]},{"title":"Add a way to set new default values to reactive form controls","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\nforms\r\n\r\n### Description\r\n\r\nFor typical CRUD operations, it's often required to\r\n- reset the dialog to its initial state\r\n- query if a particular FormControl has a value that's different than the original one.\r\n\r\nThe defaultValue\/reset() Feature is quite suitable for this. Unfortunately, there's no way to change the defaultValue, e.g. once the user performs a \"Save action\".\r\n\r\n### Proposed solution\r\n\r\nI propose to enhance the Reactive FormControl API with the following methods:\r\n\r\n- `setDefaultValue(newDefaultValue: TValue)`: Updates the defaultValue of the FormControl to `newDefaultValue`. Calls to the reset() operation in particular will use this new defaultValue.\r\n- `setCurrentValuesAsDefault()`: Convenience method for `formControl.setDefaultValue(formControl.getRawValue())`.\r\n\r\n\r\nI'd be happy to develop and raise a PR for this feature.\r\n\r\n### Alternatives considered\r\n\r\nAnother alternative would be to build entirely new FormControls if new default values are required. However, this might be less convenient and has issues currently with 2-way-data-binding, I believe.\r\n","comments":["Thank you for looking into this issue!\r\nI wasn't very clear when I wrote the this issue, but I'm talking about reactive forms, where `ngModel` is not used.","Hey @DerChris173,\r\nI agree this feature would be quite beneficial. Below is a simplified use case I came across:\r\n\r\n```ts\r\nimport { FormControl } from '@angular\/forms';\r\n\r\nclass ExampleComponent {\r\n  myFormControl: FormControl;\r\n\r\n  constructor() {\r\n    this.myFormControl = new FormControl('initialValue'); \/\/ Initial default value\r\n  }\r\n\r\n  updateDefaultValue() {\r\n    const newDefaultValue = 'updatedValue';\r\n    this.myFormControl.setDefaultValue(newDefaultValue); \/\/ Proposed method to update default value\r\n  }\r\n\r\n  resetToDefaultValue() {\r\n    this.myFormControl.reset(); \/\/ Resets to 'updatedValue', if updateDefaultValue() was called\r\n  }\r\n}\r\n```\r\n\r\nLet's say a user updates their profile name from 'John Doe' (default) to 'Jane Smith'. Currently, reopening the form for more edits would show 'John Doe' again. The suggested setDefaultValue method would allow the form to show 'Jane Smith' as the default, aligning with the latest data and improving UX.","Hi @alxhub! Thank you for looking at this ticket! I saw that you adjusted the milestone. Does it mean that such a feature would be accepted? I could work on a PR. I already signed the CLA.","@DerChris173, this feature request would either require a community vote or the Angular teams internal agreement on this. \ud83d\ude09 I could assist you with developing this feature, if continued.","<!-- 6374bc4f-3ca6-4ebb-b416-250033c91ab5 -->\nThis feature request is now candidate for our backlog! In the next phase, the community has 60 days to upvote. If the request receives more than 20 upvotes, we'll move it to our consideration list.\n\nYou can find more details about the feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process).","I would prefer an additional option on `form.setValue(newValue, true)` in case of the form update is used as new default."],"labels":["feature","area: forms","feature: under consideration"]},{"title":"refactor(http): Deprecate HttpClientModule & related modules","body":"This commit deprecates the `HttpClientModule` and other related http modules. Those can be replaced by provider function only.\r\n\r\nAngular is an opinionated framework, feature guidance will help developer choose the recommended way to enable features (like Http requests here).\r\n\r\nThis PR provides a migration schematics to smooth out the transition. \r\n\r\nNote: This is NOT an indication of deprecation for NgModules. The deprecated modules only purpose was to define providers. This can be done directly by the provide function pattern.\r\n\r\nDEPRECATION: `HttpClientModule`, `HttpClientXsrfModule` and `HttpClientJsonpModule`\r\n\r\nPreviously at #53861 ","comments":["Why not reopen the other PR? (Why was it even closed without feedback? o.o)","@alfaproject I pushed the branch on the repo itself, not my own fork !","We need to deprecate https:\/\/angular.io\/api\/common\/http\/testing\/HttpClientTestingModule too \ud83d\ude04","@eneajaho Let's do that too ! ","@JeanMeche is this change being discussed? I see Dylan wanted to talk to the team about this change.\r\n\r\n(Just wondering if\/when we should review)"],"labels":["area: common\/http","target: major","detected: feature","detected: deprecation"]},{"title":"SwPush.messages and SwPush.notificationClicks don't work properly on iOS","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\nservice-worker\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nThe `messages` Observable from `SwPush` doesn't seem to emit anything when using Push API on iOS. The notifications are correctly set up (and they work) but comparing Windows, Android and iOS side by side shows that only iOS doesn't receive updates on `SwPush.messages`.\r\n`SwPush.notificationClicks` does work but only when the app is closed and you swipe right on the notification to activate the \"open\" option. Tapping on the notification (or swiping right) while the client app is actively running doesn't make `notificationClicks` to emit.\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\nhttps:\/\/github.com\/StefanNedelchev\/ng-web-push\r\n\r\n### Please provide the exception or error you saw\r\n\r\n```true\r\nNo errors are being thrown in the process.\r\n```\r\n\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 17.2.0\r\nNode: 20.11.1\r\nPackage Manager: npm 10.4.0\r\nOS: linux x64\r\n\r\nAngular: 17.2.1\r\n... animations, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n... service-worker\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1702.0\r\n@angular-devkit\/build-angular   17.2.0\r\n@angular-devkit\/core            17.2.0\r\n@angular-devkit\/schematics      17.2.0\r\n@angular\/cli                    17.2.0\r\n@schematics\/angular             17.2.0\r\nrxjs                            7.8.1\r\ntypescript                      5.3.3\r\nzone.js                         0.14.4\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\nThe repo for reproduction is also deployed here https:\/\/ng-web-push-example.netlify.app for testing (check the readme for explanation). I'm testing this on a real iPhone with iOS v17.2.1 (latest at the moment)","comments":["I see (probably) the same issue reported here https:\/\/github.com\/firebase\/firebase-js-sdk\/issues\/7309 . I don't use Firebase so it could be an issue with WebKit then?","I have similar problem and i am not using firebase or angular, btw\r\nthe problem is that when ios pwa is open nothing happens after clicking on the notification that appears. But if the pwa app is closed, then clicking on the link in the notification happens correctly.\r\n\r\nAlso it works ok on my desktop web app (using Safari with macOS Sonoma)\r\n\r\nHere is my code\r\n\r\n```ts\r\nself.addEventListener('notificationclick', (event: NotificationEvent) => {\r\n  try {\r\n    event.notification.close();\r\n  } catch (e) {\r\n    \/\/ do nothing\r\n  }\r\n\r\n  let redirectURL: string | null = null;\r\n\r\n  try {\r\n    redirectURL = event.notification.data.RedirectURL;\r\n  } catch (e) {\r\n    redirectURL = self.location.origin;\r\n  }\r\n\r\n  if (!redirectURL) return event.waitUntil(Promise.resolve());\r\n\r\n  event.waitUntil(\r\n    self.clients\r\n      .openWindow(redirectURL)\r\n      .then((client) => (client ? client.focus() : null))\r\n      .catch((e) => {\r\n        \/\/ do nothing\r\n      })\r\n  );\r\n});\r\n```\r\n\r\nIt seems like a bug or undocumented behaviour in WebKit. \r\n\r\nBut also what i noticed while debugging this is that when you recieve a notification while your ios pwa opened and focused new service worker instance is created. That is why your `notificationclick` event most probably triggered correctly but in another service worker context. You can double check it by connecting your phone to your macbook and go to Safari -> Develop -> <Your_iPhone_Name> and open it and wait for some time after you recieve a notification, you will see the new service worker instance is created","@ereshidov  I have an iPhone but unfortunately not a MAC machine to debug with. I don't get the part \"new service worker instance is created\". The service worker instance is always one, but the instances of the client (app) can be many. Maybe you meant that a new client instance is created.\r\nHowever, by looking at your example, it will always open new client window because you always call openWindow(). You need to find existing clients first, focus one if found or open a new window as a fallback. Besides that, by default nothing will happen if you click notification because it doesn't have any default behavior.","> @ereshidov I have an iPhone but unfortunately not a MAC machine to debug with. I don't get the part \"new service worker instance is created\". The service worker instance is always one, but the instances of the client (app) can be many. Maybe you meant that a new client instance is created. However, by looking at your example, it will always open new client window because you always call openWindow(). You need to find existing clients first, focus one if found or open a new window as a fallback. Besides that, by default nothing will happen if you click notification because it doesn't have any default behavior.\r\n\r\nThanks for your response, based on your response i changed my code to this\r\n```ts\r\n\/\/ service-worker.ts\r\nself.addEventListener('notificationclick', (event: NotificationEvent) => {\r\n  try {\r\n    event.notification.close();\r\n  } catch (e) {\r\n    \/\/ do nothing\r\n  }\r\n\r\n  let redirectURL: string | null = null;\r\n\r\n  try {\r\n    redirectURL = event.notification.data.RedirectURL;\r\n  } catch (e) {\r\n    redirectURL = self?.location?.origin;\r\n  }\r\n\r\n  if (!redirectURL) return;\r\n\r\n  const matchAllPromise = clients\r\n    .matchAll()\r\n    .then((matchedClients) => {\r\n      \/\/ @ts-expect-error\r\n      const focusedClient = matchedClients.find((client) => client?.focused);\r\n      if (focusedClient) {\r\n        focusedClient?.postMessage({\r\n          redirectURL,\r\n        });\r\n      } else if (redirectURL) {\r\n        return clients.openWindow(redirectURL);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      \/\/ do nothing\r\n    });\r\n\r\n  event.waitUntil(matchAllPromise);\r\n});\r\n```\r\n\r\nalso i am listening to this`focusedClient.postMessage` inside my javascript code \r\n```js\r\nwindow.navigator.serviceWorker.addEventListener('message', (event) =>  {\r\n   const { data } = event;\r\n    if (data?.redirectURL) {\r\n      window.location.href = data.redirectURL;\r\n      return;\r\n    }\r\n})\r\n```\r\n\r\nIt works ok both on desktop safari and desktop chrome, but again when i am using this on my iOS PWA (i am running this code in secure https context, btw) this does not work at all. When i was trying to debug this i saw 'message' event is never triggered inside my javascript code. \r\n\r\nEverything is fine with `RedirectURL` when i clicking to my notification from iOS iPhone `Notification Center` \r\n\r\np.s. i found working solution from web version of telegram https:\/\/github.com\/Ajaxy\/telegram-tt https:\/\/github.com\/Ajaxy\/telegram-tt\/blob\/master\/src\/serviceWorker\/pushNotification.ts i will check how they do this properly","@ereshidov  There are some flaws in the way you have updated the code and I assume they are the reason for the message not being posted.\r\nFirst, you call `find()` on the clients array with `client.focused` as a condition. This will return only the focused windows\/tabs. If you receive a notification and pull it, there is a possibility that the window loses focus (although you visually see it). Then you lose the window client object right there, so there's nobody to post message to. I would rewrite the code as follows:\r\n```ts\r\nconst matchAllPromise = clients\r\n  .matchAll({ includeUncontrolled: true })\r\n  .then((matchedClients) => {\r\n    if (matchedClients.length > 0) {\r\n      matchedClients[0].focus(); \/\/ key change\r\n      matchedClients[0].postMessage({\r\n        message: 'some message', \/\/key change\r\n      });\r\n    } else {\r\n      return clients.openWindow(redirectURL);\r\n    }\r\n  })\r\n  .catch(() => {\r\n    \/\/ do nothing\r\n  });\r\n```\r\n\r\nSee how I added this option `includeUncontrolled: true` to `matchAll()`. I'm not 100% sure if it will make difference for you but I had situations where without it, I couldn't match my opened window. First key change is to add a `message` property to the options argument of `postMessage()` method because it's required and that's what gets transferred to the client. And the other key change is calling the `.focus()` method of the client which is what actually does the focusing (you don't need to do this hack on the client side to do the refreshing). Also I removed the `if (redirectURL)` part from the `else` statement because you already check for it before this section of code.\r\n\r\nI hope it helps but let's cut this discussion because we are kind of drifting away of the main point of the issue which is related to the Angular service worker \ud83d\ude06 If you want to continue the discussion please hit me up on LinkedIn or Twitter","I updated the angular version info in the OP - updated to the latest 17.2.1 and the issue still persists.\r\nThe linked repo is also updated","Hello guys, I am facing the same issue described, my pwa is working properly sending push notifications over Edge, Chrome but no working on IOS 17.2.1, I am testing with an Iphone 11, the app is added to the browser, I am getting the error:\r\n\r\n**WebPushError: Received unexpected response code**\r\n\r\nI am not getting any response code even. just that string.\r\n\r\nI am implementing this function from the onInit appComponent() for handling the incoming push notifications on mobile:\r\n\r\n    async listenToPushNotifications(){\r\n        if (!this.swPush.isEnabled) {\r\n            alert('We are sorry but \"Push Notifications\" are not supported by this browser');\r\n            return;\r\n        }\r\n        \r\n        this.swPush.messages.subscribe({\r\n            next: (message: any) => {\r\n                const title = message.notification.title;\r\n                const options = {\r\n                    body: message.notification.body,\r\n                    icon: message.notification.icon,\r\n                    actions: message.notification.actions,\r\n                    data: message.notification.data,\r\n                    vibrate: message.notification.vibrate\r\n                };\r\n                \r\n                window?.navigator?.serviceWorker.getRegistration().then(async (reg) => {\r\n                    if (reg != null) {\r\n                        await reg.showNotification(title, options);\r\n                    }\r\n                });\r\n\r\n                return 'ok';\r\n            },\r\n            error: (err) => {\r\n                console.log(err)\r\n            }\r\n        });\r\n    }\r\n\r\nWhen I use that function I am getting the same push notification multiple times on the laptop browser. Should I create a validation to check and let in run just if it is mobile device, maybe?\r\n\r\nOn the server side I have this endpoint method to push the message:\r\n\r\nasync function pushNotification(subscription)\r\n{\r\n    const options = {\r\n        vapidDetails: {\r\n            subject: VAPID.MAILTO,\r\n            publicKey: VAPID.PUBLICKEY,\r\n            privateKey: VAPID.PRIVATEKEY\r\n        },\r\n        TTL: 60\r\n    }\r\n    \r\n    const payload = {\r\n        notification: {\r\n            title: 'title',\r\n            body: 'message',\r\n            icon: 'assets\/icons\/icon-180x180.png'\r\n        }\r\n    }\r\n              \r\n    for(let device of subscription.devices){\r\n        const sub = {\r\n            endpoint: device.endpoint,\r\n            expirationTime: null,\r\n            keys: {\r\n                auth: device.auth,\r\n                p256dh: device.p256dh\r\n            }\r\n        }\r\n\r\n        await webPush.sendNotification(sub, JSON.stringify(payload), options);\r\n    }\r\n}\r\n\r\n\r\nMy ngsw-worker.js file after building has the listener:\r\n\r\nthis.scope.addEventListener(\"push\", (event) => this.onPush(event));\r\n\r\n    onPush(msg) {\r\n      if (!msg.data) {\r\n        return;\r\n      }\r\n      msg.waitUntil(this.handlePush(msg.data.json()));\r\n    }\r\n\r\nHope you can help me. Cheers!","@destinotierra it's normal that your notification shows twice with that code. \r\n`this.swPush.messages` - that observable emits when a notification is received (you already see it). Inside the subscription of that observable you create a brand new observable, access the service worker and then you trigger another notification. This is not unexpected behavior, I would rather be surprised if you only see one notification in that case. In general the entire subscription on the client side is unnecessary.\r\n\r\nAlso a comment that's note entirely related to the bug but it's something we all need to know. As of iOS 17.4, PWA (add to home screen) support will be dropped for devices of the EU region: https:\/\/www.macrumors.com\/2024\/02\/15\/ios-17-4-web-apps-removed-apple\/","@StefanNedelchev Thank you very much for the answer, I imagined that I did not need that function on the front-end because it is working properly without that, I just got confused after consulting different implementations and some of then talking about a different way of handling push for browser on mobile or something like that. I really appreciate your help!\r\n\r\nPD. About the article in the UE... Just in shock right now, politics, no words, just continue coding... xD"],"labels":["area: service-worker","iOS"]},{"title":"Unable to hydrate App - Angular 17, Standalone using Ionic","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\nDon't known \/ other\r\n\r\n### Is this a regression?\r\n\r\nYes\r\n\r\n### Description\r\n\r\nI create an app with \"ng new --ssr\", I added some libraries as \"ionic\" and was trying to set it up with ssr.\r\n\r\nSo If I test aplicacion on local with \"ionic serve\", it uses architect \"app:serve\".\r\n\r\nWhen I go to see the App localy I ended up with this warning:\r\n\r\n> NG0505: Angular hydration was requested on the client, but there was no serialized information present in the server response, thus hydration was not enabled. Make sure the `provideClientHydration()` \r\n![Captura de pantalla 2024-01-21 a la(s) 14 45 49](https:\/\/github.com\/angular\/angular\/assets\/36543775\/cb9c6886-5975-43e3-9694-f8590d682318)\r\n\r\n\r\nSo i deactivate using \"provideClientHydration\", so it looks fine on local\r\n<img width=\"1634\" alt=\"Captura de pantalla 2024-01-21 a la(s) 15 24 50\" src=\"https:\/\/github.com\/angular\/angular\/assets\/36543775\/6c9f0182-52e5-462a-98f4-e0e5a3b02bbc\">\r\n\r\nBut, when I try to do \"ionic build\", which uses \"app:build\", I got the static version which looks clearly different, that\u00b4s because shado dom is not added. I\u00b4ve also tried activating or deactivating but got any difference.  (https:\/\/foodjourney.app\/welcome)\r\n\r\nMy actual package looks like this:\r\n`{\r\n  \"name\": \"food-journey\",\r\n  \"version\": \"0.0.1\",\r\n  \"author\": \"Ionic Framework\",\r\n  \"homepage\": \"https:\/\/ionicframework.com\/\",\r\n  \"scripts\": {\r\n    \"ng\": \"ng\",\r\n    \"start\": \"ng serve\",\r\n    \"build\": \"ng build\",\r\n    \"watch\": \"ng build --watch --configuration development\",\r\n    \"test\": \"ng test\",\r\n    \"lint\": \"ng lint\",\r\n    \"dev:ssr\": \"ng run app:serve-ssr\",\r\n    \"serve:ssr\": \"node dist\/app\/server\/main.js\",\r\n    \"build:ssr\": \"ng build && ng run app:server\",\r\n    \"prerender\": \"ng run app:prerender\"\r\n  },\r\n  \"private\": true,\r\n  \"dependencies\": {\r\n    \"@angular\/animations\": \"^17.1.0\",\r\n    \"@angular\/common\": \"^17.1.0\",\r\n    \"@angular\/compiler\": \"^17.1.0\",\r\n    \"@angular\/core\": \"^17.1.0\",\r\n    \"@angular\/fire\": \"^17.0.1\",\r\n    \"@angular\/forms\": \"^17.1.0\",\r\n    \"@angular\/google-maps\": \"^17.1.0\",\r\n    \"@angular\/platform-browser\": \"^17.1.0\",\r\n    \"@angular\/platform-browser-dynamic\": \"^17.1.0\",\r\n    \"@angular\/platform-server\": \"^17.1.0\",\r\n    \"@angular\/router\": \"^17.1.0\",\r\n    \"@angular\/ssr\": \"^17.1.0\",\r\n    \"@capacitor-community\/apple-sign-in\": \"^5.0.0\",\r\n    \"@capacitor\/android\": \"5.6.0\",\r\n    \"@capacitor\/app\": \"5.0.6\",\r\n    \"@capacitor\/core\": \"5.6.0\",\r\n    \"@capacitor\/geolocation\": \"^5.0.6\",\r\n    \"@capacitor\/haptics\": \"5.0.6\",\r\n    \"@capacitor\/ios\": \"5.6.0\",\r\n    \"@capacitor\/keyboard\": \"5.0.7\",\r\n    \"@capacitor\/network\": \"^5.0.6\",\r\n    \"@capacitor\/preferences\": \"^5.0.6\",\r\n    \"@capacitor\/splash-screen\": \"^5.0.6\",\r\n    \"@capacitor\/status-bar\": \"^5.0.6\",\r\n    \"@codetrix-studio\/capacitor-google-auth\": \"^3.3.6\",\r\n    \"@ionic\/angular\": \"^7.5.0\",\r\n    \"@ionic\/angular-server\": \"^7.6.3\",\r\n    \"express\": \"^4.18.2\",\r\n    \"ionicons\": \"^7.2.1\",\r\n    \"moment-timezone\": \"^0.5.44\",\r\n    \"ng2-pdf-viewer\": \"^10.0.0\",\r\n    \"onesignal-cordova-plugin\": \"^5.0.4\",\r\n    \"onesignal-ngx\": \"^2.0.1\",\r\n    \"rxjs\": \"~7.8.0\",\r\n    \"swiper\": \"^11.0.5\",\r\n    \"tslib\": \"^2.3.0\",\r\n    \"zone.js\": \"~0.14.2\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@angular-devkit\/build-angular\": \"^17.1.0\",\r\n    \"@angular-eslint\/builder\": \"^17.2.0\",\r\n    \"@angular-eslint\/eslint-plugin\": \"^17.2.0\",\r\n    \"@angular-eslint\/eslint-plugin-template\": \"^17.2.0\",\r\n    \"@angular-eslint\/schematics\": \"^17.2.0\",\r\n    \"@angular-eslint\/template-parser\": \"^17.2.0\",\r\n    \"@angular\/cli\": \"^17.1.0\",\r\n    \"@angular\/compiler-cli\": \"^17.1.0\",\r\n    \"@angular\/language-service\": \"^17.1.0\",\r\n    \"@capacitor\/cli\": \"5.6.0\",\r\n    \"@ionic\/angular-toolkit\": \"^9.0.0\",\r\n    \"@types\/express\": \"^4.17.17\",\r\n    \"@types\/jasmine\": \"~5.1.0\",\r\n    \"@types\/node\": \"^18.18.0\",\r\n    \"@typescript-eslint\/eslint-plugin\": \"^6.0.0\",\r\n    \"@typescript-eslint\/parser\": \"^6.0.0\",\r\n    \"browser-sync\": \"^3.0.0\",\r\n    \"eslint\": \"^7.26.0\",\r\n    \"eslint-plugin-import\": \"2.22.1\",\r\n    \"eslint-plugin-jsdoc\": \"30.7.6\",\r\n    \"eslint-plugin-prefer-arrow\": \"1.2.2\",\r\n    \"jasmine-core\": \"~5.1.0\",\r\n    \"jasmine-spec-reporter\": \"~5.0.0\",\r\n    \"karma\": \"~6.4.0\",\r\n    \"karma-chrome-launcher\": \"~3.2.0\",\r\n    \"karma-coverage\": \"~2.2.0\",\r\n    \"karma-jasmine\": \"~5.1.0\",\r\n    \"karma-jasmine-html-reporter\": \"~2.1.0\",\r\n    \"ts-node\": \"^8.3.0\",\r\n    \"typescript\": \"~5.2.2\"\r\n  },\r\n  \"description\": \"An Ionic project\"\r\n}\r\n`\r\n\r\nMy angular.json like this:\r\n```\r\n{\r\n  \"$schema\": \".\/node_modules\/@angular\/cli\/lib\/config\/schema.json\",\r\n  \"version\": 1,\r\n  \"newProjectRoot\": \"projects\",\r\n  \"projects\": {\r\n    \"app\": {\r\n      \"projectType\": \"application\",\r\n      \"schematics\": {\r\n        \"@ionic\/angular-toolkit:page\": {\r\n          \"styleext\": \"scss\",\r\n          \"standalone\": true\r\n        }\r\n      },\r\n      \"root\": \"\",\r\n      \"sourceRoot\": \"src\",\r\n      \"prefix\": \"app\",\r\n      \"architect\": {\r\n        \"build\": {\r\n          \"builder\": \"@angular-devkit\/build-angular:browser\",\r\n          \"options\": {\r\n            \"outputPath\": \"dist\/app\/browser\",\r\n            \"index\": \"src\/index.html\",\r\n            \"main\": \"src\/main.ts\",\r\n            \"polyfills\": \"src\/polyfills.ts\",\r\n            \"tsConfig\": \"tsconfig.app.json\",\r\n            \"inlineStyleLanguage\": \"scss\",\r\n            \"assets\": [\r\n              {\r\n                \"glob\": \"**\/*\",\r\n                \"input\": \"src\/.well-known\",\r\n                \"output\": \".well-known\/\"\r\n              },\r\n              {\r\n              \"glob\": \"**\/*\",\r\n              \"input\": \"src\/assets\",\r\n              \"output\": \"assets\"\r\n            }, {\r\n              \"glob\": \"**\/*.svg\",\r\n              \"input\": \"node_modules\/ionicons\/dist\/ionicons\/svg\",\r\n              \"output\": \".\/svg\"\r\n            },\r\n            \"src\/OneSignalSDKWorker.js\"],\r\n            \"styles\": [\r\n              \"src\/theme\/variables.scss\",\r\n              \"src\/global.scss\"\r\n            ],\r\n            \"scripts\": []\r\n          },\r\n          \"configurations\": {\r\n            \"production\": {\r\n              \"budgets\": [{\r\n                  \"type\": \"initial\",\r\n                  \"maximumWarning\": \"2mb\",\r\n                  \"maximumError\": \"5mb\"\r\n                },\r\n                {\r\n                  \"type\": \"anyComponentStyle\",\r\n                  \"maximumWarning\": \"2kb\",\r\n                  \"maximumError\": \"12kb\"\r\n                }\r\n              ],\r\n              \"fileReplacements\": [{\r\n                \"replace\": \"src\/environments\/environment.ts\",\r\n                \"with\": \"src\/environments\/environment.prod.ts\"\r\n              }],\r\n              \"outputHashing\": \"all\"\r\n            },\r\n            \"development\": {\r\n              \"buildOptimizer\": false,\r\n              \"optimization\": false,\r\n              \"vendorChunk\": true,\r\n              \"extractLicenses\": false,\r\n              \"sourceMap\": true,\r\n              \"namedChunks\": true\r\n            },\r\n            \"ci\": {\r\n              \"progress\": false\r\n            }\r\n          },\r\n          \"defaultConfiguration\": \"production\"\r\n        },\r\n        \"serve\": {\r\n          \"builder\": \"@angular-devkit\/build-angular:dev-server\",\r\n          \"configurations\": {\r\n            \"production\": {\r\n              \"buildTarget\": \"app:build:production\"\r\n            },\r\n            \"development\": {\r\n              \"buildTarget\": \"app:build:development\"\r\n            },\r\n            \"ci\": {\r\n              \"progress\": false\r\n            }\r\n          },\r\n          \"defaultConfiguration\": \"development\"\r\n        },\r\n        \"extract-i18n\": {\r\n          \"builder\": \"@angular-devkit\/build-angular:extract-i18n\",\r\n          \"options\": {\r\n            \"buildTarget\": \"app:build\"\r\n          }\r\n        },\r\n        \"test\": {\r\n          \"builder\": \"@angular-devkit\/build-angular:karma\",\r\n          \"options\": {\r\n            \"main\": \"src\/test.ts\",\r\n            \"polyfills\": \"src\/polyfills.ts\",\r\n            \"tsConfig\": \"tsconfig.spec.json\",\r\n            \"karmaConfig\": \"karma.conf.js\",\r\n            \"inlineStyleLanguage\": \"scss\",\r\n            \"assets\": [{\r\n              \"glob\": \"**\/*\",\r\n              \"input\": \"src\/assets\",\r\n              \"output\": \"assets\"\r\n            }],\r\n            \"styles\": [\r\n              \"src\/theme\/variables.scss\",\r\n              \"src\/global.scss\"\r\n            ],\r\n            \"scripts\": []\r\n          },\r\n          \"configurations\": {\r\n            \"ci\": {\r\n              \"progress\": false,\r\n              \"watch\": false\r\n            }\r\n          }\r\n        },\r\n        \"lint\": {\r\n          \"builder\": \"@angular-eslint\/builder:lint\",\r\n          \"options\": {\r\n            \"lintFilePatterns\": [\r\n              \"src\/**\/*.ts\",\r\n              \"src\/**\/*.html\"\r\n            ]\r\n          }\r\n        },\r\n        \"server\": {\r\n          \"builder\": \"@angular-devkit\/build-angular:server\",\r\n          \"options\": {\r\n            \"outputPath\": \"dist\/app\/server\",\r\n            \"main\": \"server.ts\",\r\n            \"tsConfig\": \"tsconfig.server.json\",\r\n            \"inlineStyleLanguage\": \"scss\",\r\n            \"externalDependencies\": [\"canvas\"]\r\n          },\r\n          \"configurations\": {\r\n            \"production\": {\r\n              \"outputHashing\": \"media\",\r\n              \"fileReplacements\": [{\r\n                \"replace\": \"src\/environments\/environment.ts\",\r\n                \"with\": \"src\/environments\/environment.prod.ts\"\r\n              }]\r\n            },\r\n            \"development\": {\r\n              \"buildOptimizer\": false,\r\n              \"optimization\": false,\r\n              \"sourceMap\": true,\r\n              \"extractLicenses\": false,\r\n              \"vendorChunk\": true\r\n            },\r\n            \"ci\": {}\r\n          },\r\n          \"defaultConfiguration\": \"production\"\r\n        },\r\n        \"serve-ssr\": {\r\n          \"builder\": \"@angular-devkit\/build-angular:ssr-dev-server\",\r\n          \"configurations\": {\r\n            \"development\": {\r\n              \"browserTarget\": \"app:build:development\",\r\n              \"serverTarget\": \"app:server:development\"\r\n            },\r\n            \"production\": {\r\n              \"browserTarget\": \"app:build:production\",\r\n              \"serverTarget\": \"app:server:production\"\r\n            }\r\n          },\r\n          \"defaultConfiguration\": \"development\"\r\n        },\r\n        \"prerender\": {\r\n          \"builder\": \"@angular-devkit\/build-angular:prerender\",\r\n          \"options\": {\r\n            \"routes\": [\r\n              \"\/\"\r\n            ]\r\n          },\r\n          \"configurations\": {\r\n            \"production\": {\r\n              \"browserTarget\": \"app:build:production\",\r\n              \"serverTarget\": \"app:server:production\"\r\n            },\r\n            \"development\": {\r\n              \"browserTarget\": \"app:build:development\",\r\n              \"serverTarget\": \"app:server:development\"\r\n            }\r\n          },\r\n          \"defaultConfiguration\": \"production\"\r\n        },\r\n        \"deploy\": {\r\n          \"builder\": \"@angular\/fire:deploy\",\r\n          \"options\": {\r\n            \"version\": 2\r\n          },\r\n          \"configurations\": {\r\n            \"production\": {\r\n              \"buildTarget\": \"app:build:production\",\r\n              \"serveTarget\": \"app:serve-ssr:production\"\r\n            },\r\n            \"development\": {\r\n              \"buildTarget\": \"app:build:development\",\r\n              \"serveTarget\": \"app:serve-ssr:development\"\r\n            }\r\n          },\r\n          \"defaultConfiguration\": \"production\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"cli\": {\r\n    \"schematicCollections\": [\r\n      \"@ionic\/angular-toolkit\"\r\n    ],\r\n    \"analytics\": \"6f4fd7d6-33a5-491c-8a1b-1ea861963393\"\r\n  },\r\n  \"schematics\": {\r\n    \"@ionic\/angular-toolkit:component\": {\r\n      \"styleext\": \"scss\"\r\n    },\r\n    \"@ionic\/angular-toolkit:page\": {\r\n      \"styleext\": \"scss\"\r\n    },\r\n    \"@angular-eslint\/schematics:application\": {\r\n      \"setParserOptionsProject\": true\r\n    },\r\n    \"@angular-eslint\/schematics:library\": {\r\n      \"setParserOptionsProject\": true\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nMy app.config.ts:\r\n``` \r\nimport { RouteReuseStrategy, TitleStrategy, provideRouter, withComponentInputBinding, withRouterConfig } from '@angular\/router';\r\nimport { ApplicationConfig, importProvidersFrom } from '@angular\/core';\r\n\r\nimport { IonicRouteStrategy } from '@ionic\/angular\/common';\r\nimport { provideIonicAngular } from '@ionic\/angular\/standalone';\r\nimport { routes } from '.\/app.routes';\r\n\r\nimport {\r\n    ScreenTrackingService,\r\n    UserTrackingService,\r\n    getAnalytics,\r\n    provideAnalytics,\r\n} from '@angular\/fire\/analytics';\r\nimport { initializeApp, provideFirebaseApp } from '@angular\/fire\/app';\r\nimport { getAuth, provideAuth } from '@angular\/fire\/auth';\r\nimport { getFirestore, provideFirestore } from '@angular\/fire\/firestore';\r\nimport { getPerformance, providePerformance } from '@angular\/fire\/performance';\r\nimport { getStorage, provideStorage } from '@angular\/fire\/storage';\r\nimport { environment } from '..\/environments\/environment';\r\nimport { FIREBASE_OPTIONS } from '@angular\/fire\/compat';\r\nimport { provideHttpClient } from '@angular\/common\/http';\r\nimport { provideAnimations } from '@angular\/platform-browser\/animations';\r\nimport { provideClientHydration } from '@angular\/platform-browser';\r\n\r\nexport const appConfig: ApplicationConfig = {\r\n    providers: [\r\n        { provide: RouteReuseStrategy, useClass: IonicRouteStrategy },\r\n        provideIonicAngular({\r\n            mode: \"ios\",\r\n            backButtonText: \"\",\r\n            backButtonIcon: \"chevron-back\",\r\n        }),\r\n        \r\n        provideRouter(routes, withComponentInputBinding()),\r\n        provideClientHydration(),\r\n        provideAnimations(),\r\n        importProvidersFrom([\r\n            provideFirebaseApp(() => initializeApp(environment.firebase)),\r\n            provideAnalytics(() => getAnalytics()),\r\n            provideAuth(() => getAuth()),\r\n            provideFirestore(() => getFirestore()),\r\n            providePerformance(() => getPerformance()),\r\n            provideStorage(() => getStorage()),\r\n        ]),\r\n        provideHttpClient(),\r\n        { provide: FIREBASE_OPTIONS, useValue: environment.firebase },\r\n        ScreenTrackingService,\r\n        UserTrackingService,\r\n\r\n    ],\r\n};``` \r\n\r\n\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\nhttps:\/\/foodjourney.app\/welcome\r\n\r\n### Please provide the exception or error you saw\r\n\r\n```true\r\nNo \"hydrated\" is added. If I use provideClientHydration I got warnings but there is no difference with the final build.\r\n```\r\n\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI 17.1.0\r\nmacOS X \r\nNodeJS 18.18\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\n_No response_","comments":["Can confirm this happen with Firestore. We still need TransferState if we use Firestore."],"labels":["area: core","core: hydration"]},{"title":"Flickering during scroll restoration with scrollPositionRestoration: 'enabled' in Angular","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\ncommon & router\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nFlickering occurs on every scroll interaction done automatic on the load of the page, when **scrollPositionRestoration: 'enabled'** is used in Angular.\r\nThis error is happen in a complex and large app with lot of routes.\r\n\r\nThis work fine in small app and in new project and can there are any factor which are affecting this scrolling Behavior\r\n\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\n_No response_\r\n\r\n### Please provide the exception or error you saw\r\n\r\n_No response_\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 17.0.0\r\nNode: 20.9.0\r\nPackage Manager: npm 10.2.3\r\nOS: win32 x64\r\n\r\nAngular: 17.0.2\r\n... animations, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, platform-server\r\n... router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1700.0\r\n@angular-devkit\/build-angular   17.0.0\r\n@angular-devkit\/core            17.0.0\r\n@angular-devkit\/schematics      17.0.0\r\n@angular\/cdk                    17.0.0\r\n@angular\/cli                    17.0.0\r\n@angular\/material               17.0.0\r\n@angular\/ssr                    17.0.0\r\n@schematics\/angular             17.0.0\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.2\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\n_No response_","comments":["I also experience the flickering issue with scroll position restoration - I think it is due to the restoration logic being wrapped in a settimeout ([this commit](https:\/\/github.com\/angular\/angular\/commit\/af8afee5bde7a3078c35202db75d1b2b6a8e7bee)).\r\n\r\nWhen starting from a non-zero vertical scroll position and navigating forward I often see one frame of the new page at the current scroll position before it sets the scroll position to 0.\r\n\r\nOn backwards navigation, I often see one frame at the current scroll position before the restoration logic kicks in and restores the previous scroll position.\r\n\r\nI think the settimeout was added to allow Angular to figure out the size of page before starting the scroll position logic. I understand why this is necessary when going backwards to a non-zero scroll position (full DOM height needs to be set before scrolling) but on a forward navigation going to a 0 scroll position I would have thought the setttimeout was unnecessary.\r\n\r\nAlso it seems other SPAs such as Github and Youtube are able to do the scroll position restoration synchronously and have no flickering issues even on backwards navigation.","```\r\nimport { ViewportScroller, Location } from '@angular\/common';\r\nimport { Injectable } from '@angular\/core';\r\nimport { NavigationStart, Router } from '@angular\/router';\r\nimport { filter } from 'rxjs\/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class RouterScrollService {\r\n    \/\/ Scroll positions\r\n    private scrollPositions = new Map();\r\n\r\n    \/\/\r\n    \/\/ Constructor\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private viewportScroller: ViewportScroller,\r\n        private location: Location\r\n    ) {\r\n        \/\/ Subscribe to router events\r\n\r\n        this.router.events\r\n            .pipe(filter((event) => event instanceof NavigationStart))\r\n            .subscribe((event: any) => {\r\n                if (event.navigationTrigger === 'imperative') {\r\n                    \/\/ Get current scroll position\r\n                    const currentScrollPosition = this.viewportScroller.getScrollPosition();\r\n\r\n                    \/\/ Get current url\r\n                    const currentUrl = this.location.path();\r\n\r\n                    \/\/ Scroll to the top\r\n                    this.viewportScroller.scrollToPosition([0, 0]);\r\n\r\n                    \/\/ Get current navigation object\r\n                    const navObject = this.router.getCurrentNavigation();\r\n\r\n                    \/\/ If the navigation is done with (NavigationExtras) replaceUrl: true\r\n                    if (navObject?.extras.replaceUrl) {\r\n                        this.scrollPositions.set(event.url, currentScrollPosition);\r\n\r\n                        this.scrollPositions.delete(currentUrl);\r\n                    }\r\n\r\n                    \/\/ If the navigation is normal\r\n                    else {\r\n                        \/\/ Save the url and scroll position\r\n                        this.scrollPositions.set(currentUrl, currentScrollPosition);\r\n                    }\r\n                } else if (event.navigationTrigger === 'popstate') {\r\n                    \/\/ If scroll position is saved\r\n\r\n                    if (this.scrollPositions.has(event.url)) {\r\n                        \/\/ Scroll to the saved scroll position\r\n                        this.viewportScroller.scrollToPosition(this.scrollPositions.get(event.url));\r\n                    } else {\r\n                        \/\/ Scroll to the top\r\n                        this.viewportScroller.scrollToPosition([0, 0]);\r\n                    }\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n```\r\nI've implemented a temporary solution that involves scrolling to the top during **imperative** route transitions and restoring the saved scroll position during **popstate** back transitions.\r\n\r\nThis is very temporary solution.\r\n\r\nFlickering introduces by **scrollPositionRestoration: 'enabled'** is significantly impacting user experience. It's imperative that we address this issue as soon as possible to ensure optimal user satisfaction","@atscott \r\n\r\nIs there any progress about this issue? I appreciate you working on it."],"labels":["area: router"]},{"title":"signal inputs wierd behavior when used with @angular\/elements.","body":"### Which @angular\/* package(s) are the source of the bug?\n\ncore\n\n### Is this a regression?\n\nYes\n\n### Description\n\nlets suppose we have this component :\r\n\r\n```typescript\r\n@Component({standalone: true, ...])\r\nexport class ToBeAWebComponent {\r\n   anInput = input<string>();\r\n}\r\n```\r\n\r\nby using the @angular\/elements package I can export that component as a web-component named : to-be-a-web-component.\r\n\r\n```javascript\r\nconst wc = document.querySelector(\"to-be-a-web-component\");\r\nwc.anInput = \"aValue\"; \/\/ this will create a bug and change the type of anInput from InputSignal to string.\r\n\/\/ and if the input value is referenced in the template, or any other place, an error will be raised telling that anInput is not a function \r\n```\n\n### Please provide a link to a minimal reproduction of the bug\n\n_No response_\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI 17.1.0\r\n@angular\/core 17.1.0\n```\n\n\n### Anything else?\n\n_No response_","comments":["It could be better if we have set\/update methodes exported for input signals; so we can update them programatically.","@aihilali Small update on this. I did look into this. Angular Elements require more design and consideration to work well with the signals integration of the framework.\r\n\r\nRight now it's _not working_ and we aware of the issue. Thanks for reporting this. There seem to be fundamental design questions with regards to how signal inpus are exposed on the native element instance, how they can be updated etc. \r\n\r\nExposing a `set` method on the `input()` directly is likely no the answer here. There are other ways, like exposing `setInput` from the `ComponentRef`, or handling this via accessors (like it's done right now when you do `wc.anInput = bla`)","@devversion Any specific timeline when we get this fixed?","Hi,\r\n\r\nI've noticed this behavior as well. Not only when setting it via JavaScript, but also in HTML, like:\r\n\r\n```html\r\n<to-be-a-web-component anInput=\"hello world\"><\/to-be-a-web-component>\r\n```\r\n\r\nThis will also change the `anInput` field to be a string instead of a signal.\r\n\r\nAccessing the signal in the component templates then will lead to an error, because it cannot execute a function on a string.\r\n\r\nedit: this also happens in Angular 17.2.","I tried playing with [Input Transformers](https:\/\/angular.io\/guide\/signal-inputs#value-transforms), but no luck :(","I created a simple minimal example of this bug, @aihilali could you add this to your main  comment?\r\n\r\nhttps:\/\/stackblitz.com\/edit\/aeh4ae?file=src%2Fapp%2Fangular-view-child.ts"],"labels":["area: core","area: elements","core: inputs \/ outputs","cross-cutting: signals"]},{"title":"signal inputs seem to not work with `numberAttribute` (generic is needed, or needs inference)","body":"### Which @angular\/* package(s) are the source of the bug?\n\ncore\n\n### Is this a regression?\n\nYes\n\n### Description\n\n```ts\r\n@Directive({\r\n  selector: 'auto-focus',\r\n  standalone: true,\r\n})\r\nexport class AutoFocus {\r\n  delay = input<number>(300, { transform: numberAttribute });\r\n}\r\n```\r\n\r\nThrow error:\r\n\r\n```\r\nError in src\/main.ts (10:32)\r\nType '(value: unknown, fallbackValue?: number | undefined) => number' is not assignable to type 'undefined'.\r\n```\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/stackblitz.com\/edit\/stackblitz-starters-fv1yrc?file=src%2Fmain.ts\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.1.0\r\nNode: 18.16.0\r\nPackage Manager: yarn 4.0.2\r\nOS: darwin x64\r\n\r\nAngular: 17.1.0\r\n... animations, cdk, cli, common, compiler, compiler-cli, core\r\n... elements, forms, language-service, platform-browser\r\n... platform-browser-dynamic, platform-server, router\r\n... service-worker, ssr\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1701.0\r\n@angular-devkit\/build-angular   17.1.0\r\n@angular-devkit\/core            17.1.0\r\n@angular-devkit\/schematics      17.1.0\r\n@schematics\/angular             17.1.0\r\nng-packagr                      17.1.0\r\nrxjs                            7.8.1\r\ntypescript                      5.3.3\r\nzone.js                         0.14.3\n```\n\n\n### Anything else?\n\n_No response_","comments":["This is a bit of a gotcha, it currently needs to be\r\n\r\n```ts\r\ninput<number, unknown>(300, { transform: numberAttribute });\r\n```\r\n\r\nThe reason is that a transform introduces a divergence in the signal's type: it accepts `unknown` value whereas it contains `number` value.\r\n\r\nI am not sure if this can be improved upon, as TypeScript currently requires all generic types to be set instead of inferring some of them (microsoft\/TypeScript#54047)","Also, in this particular case, you can opt not to specify any type arguments at all. In that case everything is fully inferred. It's only the partial inference that doesn't work.\r\n\r\n~Still, the `WriteT` being the first type parameter may be undesirable if partial type inference ever becomes a thing.~ <- This was inaccurate, thanks Paul!","Thanks Joost for capturing all of this. We did consider this aspect and talked about it a couple of times. We don't see a good way around this, without other more impactful trade-offs. One correction, the type needs to be:\r\n\r\n```ts\r\ndelay = input<number, unknown>(300, { transform: numberAttribute });\r\n```\r\n\r\nThe first type parameter is actually the `ReadT` (what you as the author of the directive are dealing with), while the second parameter is the `WriteT` (i.e. what values can be bound to the input, and the transform converts to `ReadT`).\r\n\r\nWe are good, if TS supports partial type inference, the following will work as well. Right now, either need to be explicit, or fully rely on inference (which is safe here):\r\n\r\n```ts\r\n  \/\/ will works when TS supports partial type inference\r\n  delay = input<number>(300, { transform: numberAttribute }); \r\n\r\n  \/\/ works right now\r\n  delay = input<number, unknown>(300, { transform: numberAttribute });\r\n  delay = input(300, { transform: numberAttribute });\r\n\r\n```"],"labels":["area: core","core: inputs \/ outputs","cross-cutting: signals"]},{"title":"Title is changing when skiploacationChange is set to true.","body":"### Which @angular\/* package(s) are the source of the bug?\n\nrouter\n\n### Is this a regression?\n\nYes\n\n### Description\n\nWhen the skiploactionchange is added  , page title is changing for the new route.\r\n\r\nConsider below my route config\r\n\r\n[{path : 'first', component: FirstComponent, title : 'first'},\r\n{path : 'second', component: SecondComponent, title: 'second'}]\r\nIf I place the code inside first component\r\nthis.router.navigateByUrl('second', {skipLocationChange: trur})\r\n\r\nThe title of the page is changed to 'second' where the url is pointing to first\r\n\r\n\r\n\n\n### Please provide a link to a minimal reproduction of the bug\n\n_No response_\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular Router 17.0.6\n```\n\n\n### Anything else?\n\n_No response_","comments":["This is working as designed - the title updates based on the activated route, not the URL. But I can see why you might want it to not update when skipLocationChange is specified. You can implement this yourself with a custom title strategy. ","I thought like, when skip location change is added, \r\nthe browser history is not updated, so having the title changed is not meaningful to me.i thought one of the main advantages of adding tittle is to locate it in browser history.\r\n\r\n","You can close the ticket , if doesn't add a value."],"labels":["area: router"]},{"title":"Signal inputs not getting highlighted on mouse over in element","body":"### Which @angular\/* package(s) are the source of the bug?\n\nlanguage-service\n\n### Is this a regression?\n\nNo\n\n### Description\n\nSignal inputs are not getting highlighted on mouseover and also it is not navigating to the source on ctrl click on it\n\n### Please provide a link to a minimal reproduction of the bug\n\n_No response_\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\n_                      _                 ____ _     ___\r\n    \/ \\   _ __   __ _ _   _| | __ _ _ __     \/ ___| |   |_ _|\r\n   \/ \u25b3 \\ | '_ \\ \/ _` | | | | |\/ _` | '__|   | |   | |    | |\r\n  \/ ___ \\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\r\n \/_\/   \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_|       \\____|_____|___|\r\n                |___\/\r\n    \r\n\r\nAngular CLI: 17.1.0\r\nNode: 18.16.0\r\nPackage Manager: pnpm 8.7.0\r\nOS: darwin arm64\r\n\r\nAngular: 17.1.0\r\n... animations, cdk, cli, common, compiler, compiler-cli, core\r\n... forms, language-service, localize, material\r\n... material-moment-adapter, platform-browser\r\n... platform-browser-dynamic, router, service-worker\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1701.0\r\n@angular-devkit\/build-angular   17.1.0\r\n@angular-devkit\/core            17.1.0\r\n@angular-devkit\/schematics      17.1.0\r\n@angular\/fire                   16.0.0\r\n@angular\/pwa                    17.0.1\r\n@schematics\/angular             17.1.0\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.2\n```\n\n\n### Anything else?\n\n_No response_","comments":["What version of the Angular extension are you using?","Also ran into this on ALS Version `17.1.0`\r\nAttempting to go to definition via F12 results in `No definition found for 'name'`, and no tooltip on hover.\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/1585989\/8121ce84-6b47-4ec4-84fe-34af0d438623)\r\n\r\nHowever, attempting to assign an incorrect type does yield the expected error.\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/1585989\/8d0bad92-3800-424e-8c20-1bdb48e03f1d)\r\n","We see the same behavior after upgrading to `17.1.0` as well. "],"labels":["area: language-service","core: inputs \/ outputs","cross-cutting: signals"]},{"title":"docs: fix invalid db.json data","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [x] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: https:\/\/github.com\/angular\/angular\/issues\/53856\r\n\r\n\r\n## What is the new behavior?\r\nFixing the photos display issue and the redirection to details\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["Deployed adev-preview for 0c57af1fd1c55b7e70cc3a8faeec262965435bc0 to: https:\/\/ng-dev-previews-fw--pr-angular-angular-53964-adev-prev-fpx15tlk.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentadev-preview -->","@MarkTechson I think we want `id` to be a number not a string so we'd want to figure out what this is breaking. Where is this causing an error @louaymeskini ?","> @MarkTechson I think we want `id` to be a number not a string so we'd want to figure out what this is breaking. Where is this causing an error @louaymeskini ?\r\n\r\nI saw that they use id as string in json-server documentation, but if you want I'll revert them back to numbers."],"labels":["area: docs","adev: preview"]},{"title":"Expand Control Flow to component dom elements","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nThere are multiple CSS frameworks which depend upon specific DOM structures to be correctly applied. e.g. table -> th -> td\r\nIntroduction of any element in the model, breaks the CSS selector.\r\nThe new control flow syntax greatly reduces the amount of breakages I see. It would be nice to extend this further to eliminate the component in the DOM.\n\n### Proposed solution\n\nCreate a new control flow, such as \r\n@component name (param1:value, param2:value)\r\nThis in theory would not include the component structure in the DOM.\n\n### Alternatives considered\n\nI hack the CSS frameworks.","comments":["I don't quite understand what this is requesting, it seems like rendering components without host element?","@JoostK \r\n\r\nConsider the following partial dom capture from Edge.\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/5581128\/68542838-b9f6-4930-b43b-4aeea04adb5c)\r\n\r\nThere is an element in between form and the div. In this case, the element is a component I created called tms-form-field.\r\nInserting these additional elements breaks a css selector such as this one:\r\nform div {\r\n   background-color: grey;\r\n}\r\n\r\nControl flow, has eliminated the need for many intermediate dom nodes, such as ng-container used with an ngIf, ngFor... \r\n\r\nIf possible, eliminating the component node in the dom tree along with the existing control flow I believe would eliminate the super majority of cases where a CSS framework, especially one designed by a UI\/UX specialist is broken due to the selectors failing.\r\n\r\nTim","Okay, that would be removing the host element in that case (#18877). Angular today is highly dependant on that element for features like host directives and host bindings\/listeners, it's not just about component matching.\r\n\r\nThe new control flow syntax hasn't made a difference here; although `ng-container` is no longer present in the template, control flow still results in a view container for its insertion point (identical to what `ng-container` achieved).","@JoostK \r\n\r\nYes. When I searched before I did not find that issue. That thread had more use cases, but the same fundamental issue. The component element pollutes the HTML5 model, and causes problems with CSS, accessibility and other factors.\r\nFor me, accepting the fact you cannot have a host binding when the component element is not in the dom tree is a perfectly fine tradeoff.\r\n\r\nTim"],"labels":["area: core","core: host and host bindings"]},{"title":"Expose strategies that correspond to string values of runGuardsAndResolvers","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\nrouter\r\n\r\n### Description\r\n\r\nGiven that runGuardsAndResolvers may take a custom strategy in form of a function, it makes sense to expose the set of predefined strategies `'pathParamsChange' | 'pathParamsOrQueryParamsChange' | 'paramsChange' | 'paramsOrQueryParamsChange' | 'always'` so that consumers can compose with them, as was done in case of defaultUrlMatcher, see https:\/\/github.com\/angular\/angular\/issues\/35928. Also related https:\/\/github.com\/angular\/angular\/issues\/31843#issuecomment-1890955590\r\n\r\n### Proposed solution\r\n\r\nMake the strategies part of public api:\r\n\r\n```\r\nimport { RunGuardsAndResolversStrategies } from '@angular\/router';\r\n```\r\n\r\nBeing:\r\n\r\n```\r\nclass RunGuardsAndResolversStrategies {\r\n   static pathParamsChange() { ... }\r\n   static pathParamsOrQueryParamsChange() { ... }\r\n   static paramsChange() { ... }\r\n   static paramsOrQueryParamsChange() { ... }\r\n   static always() { ... }\r\n}\r\n```\r\n\r\n### Alternatives considered\r\n\r\nCopy paste the code from Angular source code or reimplement said strategies.","comments":["<!-- 6374bc4f-3ca6-4ebb-b416-250033c91ab5 -->\nThis feature request is now candidate for our backlog! In the next phase, the community has 60 days to upvote. If the request receives more than 20 upvotes, we'll move it to our consideration list.\n\nYou can find more details about the feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process)."],"labels":["feature","area: router","feature: votes required"]},{"title":"Run runGuardsAndResolvers within injection context of the Route its part of","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\nrouter\r\n\r\n### Description\r\n\r\nWould make implementation of non-trivial strategies simpler. Example of non-trivial strategy is one that would return true when current navigation contains specific \"state\" state, see https:\/\/github.com\/angular\/angular\/issues\/31843#issuecomment-1890955590, this would be step forward to making on-demand resolver resolution less hackish. Right now it only receives from\/to route snapshots as args which may not be sufficient for some use cases. Especially considering that routeConfig already contains many properties which accept functions such as guards or resolvers that do run within injection context which lets one use `inject` to access the DI, it seems sensible to me to expand the list to include the `runGuardsAndResolvers`.\r\n\r\nWould be willing to give my shot at the implementation.\r\n\r\n### Proposed solution\r\n\r\nRun runGuardsAndResolvers within injection context of the routeConfig its part of.\r\n\r\n### Alternatives considered\r\n\r\nManage route specific references to injectors manually via APP_INITIALIZER or ENVIRONMENT_INITIALIZER.","comments":["<!-- 6374bc4f-3ca6-4ebb-b416-250033c91ab5 -->\nThis feature request is now candidate for our backlog! In the next phase, the community has 60 days to upvote. If the request receives more than 20 upvotes, we'll move it to our consideration list.\n\nYou can find more details about the feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process)."],"labels":["feature","area: router","feature: votes required"]},{"title":"Angular Deferrable Views not working when used in custom library component","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\ncore\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nI'm trying to implement deferrable views in a custom library component and use it in my main project, but what I'm seeing is:\r\n\r\n1. The deferred component is being fetched in the main library bundle itself and is not being split into another bundle\r\n2. The placeholder element appears for a split second and then the view disappears. On checking the HTML, it seems like the deferred component is not rendered correctly. I cannot see the child elements of the deferred component it dev tools. I have attached a reference image. The components hd-base-article-email, hd-base-top-categories, hd-base-related-articles are all deferred components.\r\n\r\n<img width=\"487\" alt=\"Screenshot 2024-01-10 at 6 55 46\u202fPM\" src=\"https:\/\/github.com\/angular\/angular\/assets\/128784467\/f8bf643f-2da5-46db-b302-ee668e4b4df5\"> \r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\n_No response_\r\n\r\n### Please provide the exception or error you saw\r\n\r\n```true\r\nno visible errors in the console\r\n```\r\n\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nLibrary Repo:\r\n\r\nAngular CLI: 17.0.9\r\nNode: 18.18.0\r\nPackage Manager: pnpm 8.10.3\r\nOS: darwin arm64\r\n\r\nAngular: 17.0.8\r\n... animations, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1700.7\r\n@angular-devkit\/build-angular   17.0.9\r\n@angular-devkit\/core            17.0.9\r\n@angular-devkit\/schematics      17.0.9 (cli-only)\r\n@angular\/cdk                    17.0.4\r\n@angular\/cli                    17.0.9\r\n@angular\/material               17.0.4\r\n@schematics\/angular             17.0.9 (cli-only)\r\nng-packagr                      17.0.3\r\nrxjs                            6.6.0\r\ntypescript                      5.2.2\r\nzone.js                         0.14.2\r\n\r\nMain Project Repo:\r\n\r\nAngular CLI: 17.0.2\r\nNode: 18.18.0\r\nPackage Manager: pnpm 8.10.3\r\nOS: darwin arm64\r\n\r\nAngular: 17.0.2\r\n... animations, cdk, cli, common, compiler, compiler-cli, core\r\n... forms, language-service, material, platform-browser\r\n... platform-browser-dynamic, platform-server, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1700.2 (cli-only)\r\n@angular-devkit\/build-angular   17.0.2\r\n@angular-devkit\/core            17.0.2 (cli-only)\r\n@angular-devkit\/schematics      17.0.2 (cli-only)\r\n@angular\/google-maps            17.0.4\r\n@angular\/localize               17.0.8\r\n@angular\/pwa                    0.1102.8\r\n@angular\/service-worker         16.2.8\r\n@nguniversal\/builders           16.2.0\r\n@nguniversal\/express-engine     16.2.0\r\n@schematics\/angular             17.0.2 (cli-only)\r\nrxjs                            6.6.7\r\ntypescript                      5.2.2\r\nzone.js                         0.13.3\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\nI have already tried to implement deferrable views in components inside the main repo itself and it seems to be working fine. Issue is only when used in library repo.\r\n\r\nHere are the things which I have followed as a requirement:\r\n\r\n1. Using angular 17 in both the main project and library project\r\n2. Using on viewport condition to defer the block\r\n3. The component inside the defer block is a standalone component is not used anywhere outside the defer block and also not referenced using viewchild","comments":["This is currently expected; libraries are compiled differently to applications and do not currently account for defer loading of views.\r\n\r\nThis should be included in the docs.\r\n\r\n> The placeholder element appears for a split second and then the view disappears. On checking the HTML, it seems like the deferred component is not rendered correctly. I cannot see the child elements of the deferred component it dev tools. I have attached a reference image. The components hd-base-article-email, hd-base-top-categories, hd-base-related-articles are all deferred components.\r\n\r\nCould you please share a runnable reproduction that showcases this issue.","Sure. I have created a minimum reproduction of the issue in this project [https:\/\/github.com\/praveshShetty\/deferrable-views-reproduction\/tree\/main](https:\/\/github.com\/praveshShetty\/deferrable-views-reproduction\/tree\/main) along with the steps to reproduce. Wasn't completely sure on how to reproduce this on stackblitz as it requires building of a library and using it , so have created it on github itself.  Hope this helps !!","I am using NX workspace and the defer in NX lib, then used it in the demo app, and it works fine.","> I am using NX workspace and the defer in NX lib, then used it in the demo app, and it works fine.\r\n\r\nThis is expected for Nx's non-buildable libraries, as those are compiled as part of the application build and not independently as library.","Ok, good to know! Got the same issue on a big enterprise app where everything is coming from already built ng-libs. \r\n\r\nI wonder: any technical issue to have the case covered in the near future? Or unlikely to happen? ","I have the same issue when trying to defer a component from one lib in a component from another lib. Already tried to reproduce it on a smaller scale but there it seems to work. The only difference is the use of Nx in my project so that must not be supported yet. Does anyone know if angular plans to tackle this issue in the near future? "],"labels":["feature","P3","core: defer","area: adev","area: docs"]},{"title":"Clean \/ reliably possibility to detect template issues","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\n_No response_\n\n### Description\n\nIf I'm not mistaken, there is no clean solution to determine runtime template errors (I tried to find a solution via [Stackoverflow](https:\/\/stackoverflow.com\/questions\/77821169\/angular-how-to-detect-equal-template-errors\/77821381)). I can only check the stack for keywords and compare two errors' stacks to tell they are equal.\r\n\r\nI'm using a custom error handler to show runtime errors in the client. If the error is caused by the template (e.g. null pointer reference), I end up in an endless loop because the dialog (mat snack) triggers the templating engine again.\n\n### Proposed solution\n\nMark the thrown error as a template error (or create a custom error class to tell it apart by its type) and pass it some kind of Id that identifies the error.\n\n### Alternatives considered\n\nMaybe there already is a solution for this? A link to the code handling template errors would be great.","comments":["<!-- 6374bc4f-3ca6-4ebb-b416-250033c91ab5 -->\nThis feature request is now candidate for our backlog! In the next phase, the community has 60 days to upvote. If the request receives more than 20 upvotes, we'll move it to our consideration list.\n\nYou can find more details about the feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process).","Imho I could actually just throw a new error class \/ set some property at this point here:\r\n\r\nhttps:\/\/github.com\/angular\/angular\/blob\/79001a7e30dcb6b86eac96eecedd589d6515ec37\/packages\/core\/src\/render3\/instructions\/change_detection.ts#L273\r\n\r\nSure I could do an easy PR, but before doing this: will it (most probably) get merged? Are there similar cases so I could just modify \/ warp the error the same way Angular does in different scenarios?\r\n\r\nI really need to detect template-errors so I don't handle them over and over again (right now this forces an endless loop). I was trying this helper method `private isTemplateError(error: any): boolean { return !!error?.stack?.includes('at executeTemplate'); }` but this sure doesn't work compiled \/ minified.","Just found the `RuntimeError` class with it's enum types. So way to go would be: wrap the error in a runtime error. Easy as that, isn't it?\r\n\r\nCould be as easy as this: `private isTemplateError(error: any): boolean { return error instanceof \u0275RuntimeError && error.code === \u0275RuntimeErrorCode.EXECUTE_TEMPLATE; }`.\r\n\r\nJust tell me where you want this PR, doesn't take much time :)","Hey @dylhunn, could you please let me know if a PR for this would be welcome \/ has serious chance for a fast merging? Imho this is a pretty interesting one! And almost costs no effort! But touches some core enums - so I'm not quite sure if a PR would be considered?"],"labels":["feature","area: core","feature: votes required"]},{"title":"migration from 16 to 17 ignores SSR change from ngExpressEngine to commonEngine","body":"### Describe the problem that you experienced\n\nIn Angular 17, ngExpresssEngine has been replaced by commonEngine, and server.ts needs to be changed to use the latter\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/update.angular.io\/?l=3&v=16.0-17.0\n\n### Describe what you were looking for in the documentation\n\nA checkbox stating taht I have to check that server.ts uses commonEngine in place of ngExpressEngine\n\n### Describe the actions that led you to experience the problem\n\n_No response_\n\n### Describe what you want to experience that would fix the problem\n\n_No response_\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["The CLI comes with [an automated migration](https:\/\/github.com\/angular\/angular-cli\/blob\/75266598ac590d205f95cf107105fcf1f28eb714\/packages\/schematics\/angular\/migrations\/update-17\/replace-nguniversal-engines.ts) that replaces the `server.ts` file, so something is off here.","If I see correctly, the migration script renames the old server.ts file and replaces it with a standard one. \nIn our application, in server.ts we filter which files prerender, filter requests to discard wrong or malicious ones, cache files, and more. So, we'll need to port it manually. \nI think a warning that there is work to do to migrate SSR would be useful. \nAnyway, if it's by design, it's fine for me. "],"labels":["P3","area: adev","area: docs"]},{"title":"Support setting Application Badge from Service workers","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\nservice-worker\n\n### Description\n\nCurrently you can use Push notification for displaying notification messages. But it is not possible to change application badge from push notification when application is not started. \r\nYou can use setAppBadge from SwPush.messages, but this only works when application is already running. \r\n\n\n### Proposed solution\n\nSupport setting application badge natively in ngsw-worker.js. New push payload would look something like this:\r\n```typescript\r\n{\r\n  \"notification\": {\r\n    \"actions\": NotificationAction[],\r\n    ....\r\n  },\r\n  \"appBadge\": number | undefined\r\n}\r\n```\r\nIf appBadge property is not set nothing will happened, but if it is set, then inside \"push\" event, self.navigator.setAppBadge should be called with value of \"appBadge\". Setting \"appBadge\" to 0, will clear badge.\r\n\n\n### Alternatives considered\n\nNow the only way to change application badge when application is offline is to use custom service worker to handle \"push\" event and then import ngsw-worker.js. But I'm not sure that even this will work on WebKit, because as stated in https:\/\/webkit.org\/blog\/14112\/badging-for-home-screen-web-apps\/ and if I understand correctly, both showNotification and setAppBadge must be 'promise' from same \"push\" event.","comments":["what the fuck is that","On that topic, the `setBadge` function has [only partial support ATM](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Navigator\/setAppBadge) ","<!-- 6374bc4f-3ca6-4ebb-b416-250033c91ab5 -->\nThis feature request is now candidate for our backlog! In the next phase, the community has 60 days to upvote. If the request receives more than 20 upvotes, we'll move it to our consideration list.\n\nYou can find more details about the feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process)."],"labels":["feature","area: service-worker","feature: votes required"]},{"title":"Hydration resets state of reactive forms","body":"### Which @angular\/* package(s) are the source of the bug?\n\nforms, platform-server\n\n### Is this a regression?\n\nYes\n\n### Description\n\nRan into this when upgrading my Angular app to 16 and replacing [Angular Preboot](https:\/\/github.com\/angular\/preboot) with hydration.\r\n\r\nWhen an SSR'd application renders and the user interacts with some reactive form elements, these form elements are reset to their initial state when the app fully bootstraps. This makes sense since the Angular reactive forms aren't active while the app is bootstrapping.\r\n\r\nAngular Preboot used to fix this by replaying (? - not sure exactly how it worked) the DOM events, so the form state would be re-entered when the page was transitioned from the SSR view to the client-rendered view.\r\n\r\nThis functionality doesn't seem to be available in Angular 16 or 17 with client hydration. This makes the UX for SSRed pages with forms (eg. a login page) pretty bad, as the form can empty itself in the middle of a user typing.\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/github.com\/henry-alakazhang\/hydration-form-repro\n\n### Please provide the exception or error you saw\n\n```true\n- Run `yarn start` to serve the application with SSR and hydration\r\n- Throttle network in browser to make sure there's a delay between initial load and client hydration\r\n- Modify the form controls while the app is bootstrapping\r\n\r\nExpected:\r\n- Both inputs retain their values after hydration\r\n\r\nActual:\r\n- The input with a `FormControl` is reset to the default `FormControl` value.\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.0.10\r\nNode: 18.19.0\r\nPackage Manager: yarn 1.22.19\r\nOS: darwin arm64\r\n\r\nAngular: 17.0.9\r\n... animations, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, platform-server\r\n... router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1700.10\r\n@angular-devkit\/build-angular   17.0.10\r\n@angular-devkit\/core            17.0.10\r\n@angular-devkit\/schematics      17.0.10\r\n@angular\/cli                    17.0.10\r\n@angular\/ssr                    17.0.10\r\n@schematics\/angular             17.0.10\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.3\n```\n\n\n### Anything else?\n\n_No response_","comments":[],"labels":["area: core","area: forms","feature: under consideration","core: hydration"]},{"title":"Angular.dev tutorial uses `fetch` for HTTP requests, but this doesn't seem to work well with Interceptors","body":"### Describe the problem that you experienced\n\nIn the new tutorial for Angular 17 on https:\/\/angular.dev\/, the _Build your first Angular app_ tutorial uses the `fetch` api in the _Add HTTP Communication_ section. However, as I am looking into building things like interceptors into my app, they don't seem to play well with the fetch API.\r\n\r\nCould a note be added about the downsides of using the fetch API? Or, if I am missing something about interceptors (and other features that are included with the HttpClient) can notes be added to the tutorial about how to use these features?\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.dev\/tutorials\/first-app\/http\n\n### Describe what you were looking for in the documentation\n\nMore insight on the pros\/cons of the `fetch` api vs `HttpClient`\n\n### Describe the actions that led you to experience the problem\n\nFollowing the tutorial\n\n### Describe what you want to experience that would fix the problem\n\nBetter documentation\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["The docs suggest using native `fetch`, not the `fetch` backend for `HttpClient`. I think it's a fair point to have more info on the distinction.\r\n\r\nAnd indeed, interceptors are specific to using `HttpClient`. "],"labels":["area: common\/http","P3","area: adev","area: docs"]},{"title":"Condider making first argument of input() mandatory","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nThere is a difference in the design of the `input()` and of the `signal()` functions.\r\n\r\n`signal<T>()` expects an argument and returns a `Signal<T>`, whereas `input<T>()` can be called with or without argument and returns a `Signal<T | undefined>` if no argument is passed.\r\n\r\nMoreover, if we have code that uses `input()` without argument:\r\n\r\n```ts\r\ncollapsed = input<boolean>();\r\n```\r\n\r\nand want to pass it options, then suddenly we're forced to \r\n- pass an initial value, although the initial value is the same as before;\r\n- change the generic type passed to the function, even though the type of the signal to create is the same as before:\r\n\r\n```ts\r\ncollapsed = input<boolean | undefined>(undefined, { alias: 'appCollapsed'\u00a0});\r\n```\r\n\n\n### Proposed solution\n\nEven though it requires a bit more code, I find the the result would be more consistent, more explicit, and less surprising if `input()` always required an initial value:\r\n\r\n```ts\r\ncollapsed = input<boolean | undefined>(undefined);\r\n```\r\n\r\n- adding options requires just that: adding options\r\n- the generic type is the same as the generic type of the created Signal\r\n- it works the same way as signal()\r\n\n\n### Alternatives considered\n\nNA","comments":["My proposal is to make input() required by default, remove .required() fn and add .optional(). I know that input() was designed to be optional by default because of large google\u2019s codebase, where little percentage of apps use { required: true }, but since input() is a new function, can\u2019t we do whatever we want? ","@zip-fa About that topic, @jelbourn  explains in friday's stream why the team went with optional by default : https:\/\/twitter.com\/Jean__Meche\/status\/1746340393048826088 ","> adding options requires just that: adding options\r\n\r\nThe best argument in my opinion ","It's just too ugly. Then imagine ten in a row :-(\r\n\r\nI expect to rarely be using options myself and in most cases primitive type inputs probably don't need to be tri-state and can just have a default of false or 0.\r\n","I don't think that an initial value should be made mandatory, but I can see how an overload like\r\n\r\n```ts\r\nfunction input<ReadT>(initialValue: undefined, options: InputOptionsWithoutTransform<ReadT>): InputSignal<ReadT|undefined>;\r\n```\r\n\r\ncould potentially help avoid that awkward generic type.\r\n\r\n**Edit**: if it were to be mandatory, I'd expect you to be able to do\r\n\r\n```ts\r\nperson = input<Person>(undefined);\r\n```\r\n\r\nand get `InputSignal<Person|undefined>`, i.e. the initial value of `undefined` should not have to percolate into the generic type argument.","We did collect some data internally when considering various APIs. Around 42% of inputs in some larger Google apps were not providing an explicit value and it showed a convenience shorthand might be desirable to have. Repeating `undefined` all the time would be quite cumbersome.\r\n\r\nThe fact that the generic does not match with the return type of the `InputSignal` is a bigger concern for me than having to specify an explicit `undefined` when adding options. Most of the time, we don't assume options to be used. \r\n\r\nI like the overload suggested by @JoostK, but in either case (with current assumptions) will be a special rule- and it feels less invasive if that rule only applies to `input()` without any arguments, compared to also expanding the rule to `input(undefined)`.\r\n\r\n\r\n "],"labels":["area: core","core: inputs \/ outputs","cross-cutting: signals"]},{"title":"inject of ElementRef does not use generic type for the returned type inference","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\ncore\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nConsider the example injection of the `ElementRef` with a specified generic type:\r\n\r\n```typescript\r\n  \/\/ OK: hostEl is of type ElementRef<HTMLElement>, as expected\r\n  hostElExplicit = inject<ElementRef<HTMLElement>>(ElementRef);\r\n\r\n  \/\/ KO: hostEl is of type ElementRef<any>, expecting ElementRef<HTMLElement>\r\n  hostElInfered = inject(ElementRef<HTMLElement>);\r\n```\r\n\r\nIdeally ` inject(ElementRef<HTMLElement>)` would have the return type of `ElementRef<HTMLElement>`.\r\n\r\nThe fix is likely around the type definition for the `ProviderToken`.\r\n\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\nhttps:\/\/stackblitz.com\/edit\/stackblitz-starters-p38xn9\r\n\r\n","comments":["Additional info: this issue was discovered while working on the new queries authoring format and boils down to the coding pattern that `inject` is using as well but it is not specific to `inject`: https:\/\/stackblitz.com\/edit\/stackblitz-starters-ss5dms \r\n\r\nThe typing issue seems to be linked to both the `ProviderToken` as well as types that are used to compose it:\r\n\r\n```typescript\r\nexport class App {\r\n  \/\/ KO: ProviderToken\r\n  viewChildEl = viewChild(ElementRef<HTMLElement>);\r\n  \/\/ OK: Type\r\n  viewChildType = viewChildType(ElementRef<HTMLElement>);\r\n  \/\/ KO: AbstractType\r\n  viewChildAbstractType = viewChildAbstractType(ElementRef<HTMLElement>);\r\n  \/\/ \/\/ OK: InjectionToken\r\n  viewChildInjToken = viewChildInjectionToken(HTML_ELEMENT_REF);\r\n}\r\n```\r\n\r\nwhich means that we need to:\r\n* fix the definition of the `AbstractType`\r\n* look into `ProviderToken`","Related https:\/\/github.com\/angular\/angular\/issues\/48126  https:\/\/github.com\/angular\/angular\/pull\/48408","this is a blocker for migrating to `viewChild` signals when combined with `{ read: ElementRef }` since you can not specify the type (and I'm not sure actually why)\r\n\r\nnow doing\r\n`matCardEl = viewChild.required(MatCard, { read: ElementRef });`\r\nhave error ``ESLint: Unsafe call of an `any` typed value.(@typescript-eslint\/no-unsafe-call)``\r\n\r\nand doing\r\n`matCardEl = viewChild.required<ElementRef<HTMLElement>>(MatCard, { read: ElementRef });`\r\nhave error\r\n`X [ERROR] TS2554: Expected 1 arguments, but got 2. [plugin angular-compiler]`","@robertIsaac In your case you can fix it by specifying both generics defined by `viewChild.required<LocatorT, ReadT>(locator: ProviderToken<LocatorT>|string, opts: {read: ProviderToken<ReadT>}):\r\n        Signal<ReadT>;` : \r\n\r\n```ts\r\nviewChild.required<MatCard, ElementRef<MatCard>>(MatCard, { read: ElementRef });\r\n```","> @robertIsaac In your case you can fix it by specifying both generics defined by `viewChild.required<LocatorT, ReadT>(locator: ProviderToken<LocatorT>|string, opts: {read: ProviderToken<ReadT>}): Signal<ReadT>;` :\r\n> \r\n> ```ts\r\n> viewChild.required<MatCard, ElementRef<MatCard>>(MatCard, { read: ElementRef });\r\n> ```\r\n\r\nactually I was navigating through the Angular code trying to understand why and then I found it, was here to write that down but found you quickly answering"],"labels":["area: core","core: di","cross-cutting: types","P3","bug"]},{"title":"Combination of `HostBinding` and signals is not supported (input signals too)","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\ncore\r\n\r\n### Description\r\n\r\nI am currentely trying to use new `input signal api` but I am unable to replace this code with DRY.\r\n\r\n```typescript\r\n  @HostBinding('attr.title')\r\n  @Input({ required: true, alias: 'appModalClose' })\r\n  public closeBtnText!: string;\r\n```\r\n\r\n\r\n### Proposed solution\r\n\r\nMaybe it should be replaced by something like\r\n\r\n```typescript\r\npublic closeBtnText = input.required<string>({ alias: 'appModalClose', hostBinding: ['attr.title'] });\r\n```\r\n\r\n### Alternatives considered\r\n\r\nI was trying to find some solutions, but this is not working\r\n\r\n1. \r\n\r\n```typescript\r\n@HostBinding('attr.title')\r\npublic closeBtnText = input.required<string>({ alias: 'appModalClose' });\r\n```\r\n\r\n2. Host is stacked in memory leak\r\n\r\n```typescript\r\n@Component({\r\n  \/\/ eslint-disable-next-line @angular-eslint\/no-host-metadata-property\r\n  host: {\r\n    '[title]': 'closeBtnText()',\r\n  },\r\n})\r\nexport class ModalCloseComponent {\r\n  public closeBtnText = input.required<string>({ alias: 'appModalClose' });\r\n}\r\n```","comments":["My initial thought is that `@HostBinding` is expecting raw values. A `Signal` is not supported, even without signal inputs. In the `host` field of the component the signal can be read and used to e.g. bind `attr.title`. I will look more into this","It's also possible to split the two, and write:\r\n\r\n```typescript\r\nappModalClose = input.required<string>();\r\n\r\n@HostBinding('attr.title')\r\nget title() { return this.appModalClose(); }\r\n```","Thanks again for this issue. I've chatted a little with @pkozlowski-opensource and we both felt like supporting `@HostBinding` with signals is not necessarily something we would want to support now (without more evidence that there are requiring use-cases). Mostly because:\r\n\r\n- We likely want to avoid encouraging two patterns. `hosts` and `@HostBinding` achieve the same thing.\r\n- There are still ways to use `@HostBinding`, as Alex pointed out.\r\n- Combining a decorator (`@HostBinding`) with signal inputs (that are no longer decorator-based) feels confusing. \r\n- Calling signals directly in the `host` field of e.g. `@Directive` is a more natural\/obvious consumption in the reactive context. I.e. it matches with the mental model that \"reading signals\" is necessary so that the directive\/component will update whenever those change.\r\n\r\nYou mentioned something with memory leak when using `host`. Can you share more details please? Below seems to work as expected:\r\n\r\n```ts\r\n@Directive({\r\n  standalone: true,\r\n  selector: 'my-dirx',\r\n  host: { '[attr.title]': 'bla()' },\r\n})\r\nexport class MyDir {\r\n  bla = input.required<string>();\r\n}\r\n```","@devversion I have doubble checked\r\n\r\n```typescript\r\n@Directive({\r\n  standalone: true,\r\n  selector: 'my-dirx',\r\n  host: { '[attr.title]': 'bla()' },\r\n})\r\nexport class MyDir {\r\n  bla = input.required<string>();\r\n}\r\n```\r\n\r\nand it is working right now","Oh, so we're stuck with using a string expression with no IDE support? That's unfortunate.\r\nAny plans to support Signal in a HostBinding?","@cyraid Which IDE do you use? I am using WebStorm, and it works like a charm, with code highlighting, suggestions and everything.\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/68286501\/188d0f29-8aba-47f3-ae16-b2311ba4bbb0)","@dkimmich-onventis I use vscode. It would be nice if angular highlighted and syntax\/error checked the host field in vscode. :)","Why is the syntax \r\n```\r\nhost: {\r\n  '[class.foo]': 'bar()', \r\n},\r\n```\r\ninstead of\r\n```\r\nhost: {\r\n  '[class.foo]': bar(), \r\n},\r\n```\r\nwhich would make more sense to me. In other words: why is the value a string? Just wondering.\r\n","Because `bar` in this context is not defined. `this.bar` is also not defined, as we are inside the decorator and not inside the class. It needs to be a string so TypeScript doesn't throw errors.","There is no reference named `bar` in the scope the decorator.  ","If this is going to be the recommended approach going forward, should this style guide rule be updated?\r\n\r\nhttps:\/\/angular.io\/guide\/styleguide#style-06-03","@nickdobson Yeah, we likely need to discuss this more with the team. Good point."],"labels":["area: core","core: host and host bindings","needs: discussion","cross-cutting: signals"]},{"title":"Make `Router.currentUrlTree` public.","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\nrouter\r\n\r\n### Description\r\n\r\nI am used to using url trees in my route guards and also when navigating inside my Angular application in general.\r\nFrequently I need the current router state as a `UrlTree`. Current solution is to parse the current url string from state to a url tree as follows: `this.router.parseUrl(state.url)`.\r\n\r\nI recently noticed that the Router class actually [has a private `currentUrlTree` getter method](https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/router\/src\/router.ts#L71C3-L73C4):\r\n\r\n```\r\n  private get currentUrlTree() {\r\n    return this.stateManager.getCurrentUrlTree();\r\n  }\r\n```\r\n\r\nWould it be possible to change this getter to public? Since the method is already there it should not really be a problem to make it publicly available right? Or would there be something against exposing the current url tree to the end users!?\r\n\r\nIf this feature request is eligible for merging I can make a pull-request.\r\n\r\n### Proposed solution\r\n\r\nMake the getter `Router.currentUrlTree` public.\r\n\r\n### Alternatives considered\r\n\r\nContinue using other cumbersome solutions to get the current router state as a `UrlTree`.","comments":["<!-- 6374bc4f-3ca6-4ebb-b416-250033c91ab5 -->\nThis feature request is now candidate for our backlog! In the next phase, the community has 60 days to upvote. If the request receives more than 20 upvotes, we'll move it to our consideration list.\n\nYou can find more details about the feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process).","Was curious so I did a bit of inspection of the public api. Interestingly what you seek seems to also be available via \r\n\r\n```ts\r\nconst router = inject(Router);\r\nconst finalUrl = router.getCurrentNavigation()?.previousNavigation?.finalUrl; \/\/ finalUrl is UrlTree | undefined\r\n```\r\n\r\nOf course this is only sensible if there is a navigation happening, but thats exactly the case for guards. May be useful to know.","> Of course this is only sensible if there is a navigation happening\r\n\r\n`Router.lastSuccessfulNavigation` was recently added for this reason. ","@Erbenos That is a nice suggestion, but indeed like @atscott mentions this only works during navigation. But for example inside the route guards it is actually a good solution.\r\nThe `lastSuccessfulNavigation` could principally resolve my issue anywhere. I will check it out."],"labels":["feature","area: router","feature: votes required"]},{"title":"refactor(core): improve forwardRef typings","body":"This commit improves the forwardRef typings for better type safety and inference.\r\n","comments":["This PR was merged into the repository by commit af6f6e6448edffcd644b0bb6ce155c3ca4270971.","Reopening this PR, since there was a breakage in g3 and this change was reverted."],"labels":["area: core","target: patch","action: global presubmit"]},{"title":"SwUpdate checkForUpdate finishes too early on mobile devices","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\nservice-worker\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nHi community.\r\n\r\nI want to be informed after all asset prefetching is complete by the service-worker. I'm using this to show a preloader as long as the application is still downloading assets.\r\n\r\nIn the **ngsw-config.json** I set \r\n```\r\n \"installMode\": \"prefetch\",\r\n \"updateMode\": \"prefetch\",\r\n```\r\nfor all the asset files I need (round about 50 MB).\r\n\r\nIn a service (started at application startup) I'm doing something like this:\r\n```\r\nif (this.swUpdate.isEnabled) {\r\n  this.swUpdate.checkForUpdate().then(() => {\r\n    \/\/ Here I will hide the preloader\r\n\r\n    \/\/ This will be called AFTER all asset fetching is complete on nearly every desktop browser (Chrome, Edge, Firefox).\r\n    \/\/ But this will be called BEFORE asset fetching is complete (assets still loading) on Android (Chrome, Edge)\r\n  });\r\n}\r\n```\r\n\r\nAccording to the documentation of **checkForUpdate** it should wait until fetching is complete:\r\n_Checks for an update and waits until the new version is downloaded from the server and ready for activation._\r\n\r\nSo my question: Is this a bug or do I have a wrong understanding of how that works?\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\n_No response_\r\n\r\n### Please provide the exception or error you saw\r\n\r\n_No response_\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 16.2.10\r\nNode: 18.16.1\r\nPackage Manager: npm 9.7.2\r\nOS: win32 x64\r\n\r\nAngular: 16.2.12\r\n... animations, cdk, common, compiler, compiler-cli, core, forms\r\n... material, material-date-fns-adapter, platform-browser\r\n... platform-browser-dynamic, router, service-worker\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1602.10\r\n@angular-devkit\/build-angular   16.2.10\r\n@angular-devkit\/core            16.2.10\r\n@angular-devkit\/schematics      16.2.10\r\n@angular\/cli                    16.2.10\r\n@angular\/fire                   7.6.1\r\n@angular\/pwa                    16.2.10\r\n@schematics\/angular             16.2.10\r\nrxjs                            7.8.1\r\ntypescript                      4.9.5\r\nzone.js                         0.13.3\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\n_No response_","comments":[],"labels":["area: service-worker"]},{"title":"docs: \"Add HTTP communication to your app\" - db.json file issues: broken \"photo\" and \"id\" fields","body":"### Describe the problem that you experienced\n\nThe _db.json_ file shown on the page has two issues.\r\n\r\nFirst one: the \"photo\" field contains the _baseUrl_ variable reference. The variable is never expanded. As a result, the \"photo\" link is broken and the photos are no longer displayed by app.\r\n\r\nSecond issue is associated with the \"id\" format expected by _json-server_ . Namely, the id value should be in quotes, e.g. _\"id\": \"0\"_; otherwise the locations link with id does not work.\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.dev\/tutorials\/first-app\/http\n\n### Describe what you were looking for in the documentation\n\n_No response_\n\n### Describe the actions that led you to experience the problem\n\n1. complete the app changes described in this lesson\r\n2. while the _ng serve_ and _json-server_ is running, open _http:\/\/localhost:4200\/_\r\n3. the photos are not displayed; also, after clicking on any _Learn More_ link the details aren't displayed correctly.\n\n### Describe what you want to experience that would fix the problem\n\n_No response_\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n```true\nSample exception in the browser's console:\r\n...\r\nGET http:\/\/localhost:4200\/$%7Bthis.baseUrl%7D\/i-do-nothing-but-love-lAyXdl1-Wmc-unsplash.jpg 404 (Not Found)\r\n...\r\nAfter clicking on a _Learn More_ link:\r\n...\r\nGET http:\/\/localhost:3000\/locations\/4 404 (Not Found)\r\n...\n```\n\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":[],"labels":["state: has PR","P3","area: adev","area: docs"]},{"title":"signal updates and `markForCheck` should always schedule change detection","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\ncore\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nUpdating a signal or calling `markForCheck` should schedule change detection. Bound listener callbacks as well as creating, inserting, or attaching a view should also schedule change detection. This will be the case for zoneless applications but should also apply to zone-based applications when these actions happen outside the Angular zone. It is a confusing implementation detail that these APIs do not schedule change detection even though they specifically indicate that change detection should run.\r\n\r\nThis would address a lot of confusion including, but almost certainly not limited to, my quick search finding the following issues:\r\n\r\n* #53841\r\n* #52610\r\n* #53566\r\n* #52940\r\n* #51970\r\n* #50702\r\n* #50259\r\n* #50266\r\n* #50160\r\n* #49940\r\n* #48890\r\n* #45105\r\n* #42241\r\n* #41553\r\n* #37223\r\n* #37062\r\n* #31695\r\n* #24728 \r\n* #23697\r\n* #11565\r\n\r\nalong with the ones linked from there: https:\/\/github.com\/angular\/angular\/issues\/15770, https:\/\/github.com\/angular\/angular\/issues\/15946, #18254, https:\/\/github.com\/angular\/angular\/issues\/19731, https:\/\/github.com\/angular\/angular\/issues\/20112, https:\/\/github.com\/angular\/angular\/issues\/22472, https:\/\/github.com\/angular\/angular\/issues\/23697, https:\/\/github.com\/angular\/angular\/issues\/24727, #47236 (navigations create views so it should always schedule change detection, even if triggered outside the zone)\r\n\r\nIn addition to the above, there's plenty of code around that is forced to try dealing with zones when it really shouldn't be necessary because one of the above APIs are used.\r\n\r\n* https:\/\/github.com\/angular\/angular\/pull\/51971 (defer blocks attach views so they should schedule change detection without the listeners needing to run inside the zone)\r\n* https:\/\/github.com\/angular\/components\/blob\/1fe1f69303780c11c07ff84313f5fdc10440d55b\/src\/material\/snack-bar\/snack-bar-container.ts#L203-L210 (`markForCheck` is called so you should not also have to use `ngZone.run` to ensure change detection is scheduled)\r\n\r\nThere is certainly a question of whether this would make things more unpredictable. For example, would this cause components created outside the zone to act even more unpredictably where some things cause change detection and others don't (because they were created outside the zone).","comments":[],"labels":["area: core","area: zones","core: change detection","canonical"]},{"title":"docs(docs-infra): amend instructions for deploying to github pages wi\u2026","body":"\u2026th v17\r\n\r\nThe V17 CLI outputs built files under a `browser` subdirectory. The content deployment guide advises to point the GitHub pages source to `docs` however the content is now nested under `docs\/browser`. This commit adjusts the relevant references of `docs\/*` to `docs\/browser\/*`\r\n\r\nFixes #53664\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [X] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nIssue Number: #53664 \r\n\r\n\r\n## What is the new behavior?\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https:\/\/github.com\/angular\/angular\/pull\/53820\/checks?check_run_id=20231371549) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.","In GitHub:Settings:Pages under build & deploy, there's only a choice for\/root or \/docs.  There's no choice for \/docs\/browser.","Deployed aio for cbe87f963590addec07e6d079b92bd70432c0088 to: https:\/\/ng-dev-previews-fw--pr-angular-angular-53820-aio-ja7cnzgs.web.app\n\n_**Note**: As new commits are pushed to this pull request, this link is updated after the preview is rebuilt._\n<!-- Sticky Pull Request Commentaio -->"],"labels":["action: review","aio: preview","target: patch","area: docs"]},{"title":"docs: show the difference between pseudo classes angular uses and nat\u2026","body":null,"comments":[],"labels":["area: adev","area: docs"]},{"title":"feat(http): expose transferStateInterceptorFn in public api","body":"Expose `transferStateInterceptorFn` in public api so that developers can use it where best suited in the interceptor chain. This is useful when different urls are used to access the same APIs between server and browser. By placing the interceptor before requests urls become different, the cached request can be reused on the client.\r\n\r\nNote on usage: `provideClientHydration` should be called with `withNoTransferCache` to disable the default cache interceptor which is the last one executed.\r\n\r\nFixes #53702\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nCurrently, it is not possible to use http transfer cache when urls used to access the different APIs differ between calls made from the server and the browser.\r\n\r\nThis is a common use case when server side rendering happens in a private network in large companies.\r\nIt is mainly done to reduce latency, avoiding network proxies and even SSL handshakes when using HTTP in the private network.\r\n\r\nSince the `transferCacheInterceptorFn` is always the last executed interceptor, urls will be different and therefore not reused on the client.\r\n\r\nIssue Number: #53702\r\n\r\n\r\n## What is the new behavior?\r\n\r\nThis PR exposes the `transferCacheInterceptorFn` in the public API so that developers can provide it manually in `provideHttpClient()` to be able to solve their specific use cases.\r\n\r\nBy placing `transferCacheInterceptorFn`at the right place in the interceptor chain (e.g. before server & browser urls differ), developers can make sure that the requests will be reused on the client during hydration.\r\n\r\nThe behavior of `provideClientHydration()` is kept exactly the same (disabling http transfer cache with `withNoHttpTransferCache()` and using global options with `withHttpTransferCacheOptions()`.\r\n\r\nThe idea is that good defaults are applied for classic use cases while providing some flexibility for more complex cases.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n\r\n## Other information\r\n\r\nI would like for this PR to serve as discussion regarding the best option to solve use cases mentionned in #53702 \r\n","comments":[],"labels":["area: common","detected: feature"]},{"title":"Add typing for NgElement Outputs","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\nelements\r\n\r\n### Description\r\n\r\nI was experimenting with Angular's custom elements. The [documentation](https:\/\/angular.io\/guide\/elements) mentions how attributes\/inputs of such elements could be typed,\r\n```typescript\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'my-dialog': NgElement & WithProperties<{content: string}>;\r\n    'my-other-element': NgElement & WithProperties<{foo: 'bar'}>;\r\n    \u2026\r\n  }\r\n}\r\n```\r\nbut it does not mention how the events\/outputs could be typed.\r\n\r\n### Proposed solution\r\n\r\nI would propose to either add (similar to the WithProperties) a WithEvents\/WithOutputs type or even better to add a wrapper type that does the merging of addEventListener signatures better:\r\n\r\nUsing the `type-fest` library my solution is \r\n```typescript\r\nimport { Merge, UnionToIntersection } from \"type-fest\";\r\nimport { NgElement, WithProperties } from \"@angular\/elements\";\r\n\r\nexport type TypedNgElement<Inputs extends Record<string, any>, Outputs extends Record<string, any> = {}> = Merge<\r\n  NgElement,\r\n  WithProperties<Inputs> &\r\n    UnionToIntersection<\r\n      {\r\n        [K in keyof Outputs]: {\r\n          addEventListener(type: K, listener: (event: CustomEvent<Outputs[K]>) => void, options?: boolean | AddEventListenerOptions): void;\r\n        };\r\n      }[keyof Outputs]\r\n    >\r\n>;\r\n```\r\n\r\nThat can later be used as follows:\r\n```typescript\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    \"my-custom-element-selector\": TypedNgElement<\r\n      {\r\n        inputOne: SomeType;\r\n        inputTwo?: boolean;\r\n      },\r\n      {\r\n        outputOne: SomeType;\r\n        outputTwo: void;\r\n      }\r\n    >;\r\n  }\r\n}\r\n```\r\n\r\n### Alternatives considered\r\n\r\nI see alternatives (as I mentioned in the solution) in the way the type is introduced.","comments":[],"labels":["area: elements"]},{"title":"broken link to lifecycle hooks","body":"### Describe the problem that you experienced\n\nIt shows \"page not found\" on the lifecycle hooks link. Instead of using the link https:\/\/angular.dev\/guide\/components\/lifecycle it is using the link https:\/\/angular.dev\/guide\/lifecycle-hooks\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.dev\/tutorials\/learn-angular\n\n### Describe what you were looking for in the documentation\n\n_No response_\n\n### Describe the actions that led you to experience the problem\n\n_No response_\n\n### Describe what you want to experience that would fix the problem\n\n_No response_\n\n### Add a screenshot if that helps illustrate the problem\n\n![image](https:\/\/github.com\/angular\/angular\/assets\/570393\/c42b1d08-835e-4212-a393-d001968b330b)\r\nThe link to the `Lifecycle Hooks` in the popup above `@Component` decorator is pointing to https:\/\/angular.dev\/guide\/lifecycle-hooks which shows as below\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/570393\/686431bd-17d4-401a-8956-0efeeff6214b)\r\n\r\n\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n```true\nThe link should be https:\/\/angular.dev\/guide\/components\/lifecycle\n```\n","comments":["Hi, this link is currently relative in the docs and matches the page for angular.io. \r\n\r\nhttps:\/\/github.com\/angular\/angular\/blob\/1c63eddb7cc22df772e47776afb491abe963aeba\/packages\/core\/src\/metadata\/directives.ts#L403\r\n\r\nhttps:\/\/github.com\/angular\/angular\/blob\/main\/packages\/core\/src\/metadata\/directives.ts#L403\r\n\r\nWe'll fix it once we deprecate anguiar.io and make angular.dev stable. "],"labels":["P3","area: adev"]},{"title":"Navigation scrollbar issue on IOS 17.1.2","body":"### Describe the problem that you experienced\n\nThere is a scroll issue on the [Angular dev website](https:\/\/angular.dev). Mostly, similar visual bugs appear on iOS mobile. To fully understand what the issue is, please check the video.\r\n\r\nhttps:\/\/github.com\/angular\/angular\/assets\/68782786\/1db82eae-00f9-47e1-9a3e-81c4b2391aed\r\n\r\nThere is 2 UI bug:\r\n\r\n1. couldn't see all links as shown in video\r\n2. there is small gap in navigations (check the image)\r\n\r\n![Capture](https:\/\/github.com\/angular\/angular\/assets\/68782786\/9848f648-87cf-49af-82e8-9cb4cc23f039)\r\n\r\n\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.dev\/overview\n\n### Describe what you were looking for in the documentation\n\nNothing just were browsing\n\n### Describe the actions that led you to experience the problem\n\nAlready demonstrated in the video\n\n### Describe what you want to experience that would fix the problem\n\n_No response_\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n```true\nIphone 13 | IOS 17.1.2\n```\n\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":[],"labels":["area: dev-infra","iOS"]},{"title":"require explicit toSignal new param in order to reduce risk of env injectors' destroyref resulting in no cleanup (more strict toSignal API)","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nIt's more of a **CHANGE request**.\r\n\r\nCurrently when using `toSignal` passing the `injector` via options it **OPTIONAL**. On one hand it makes sense, though in practice I see a huge risk of developers accidentally introducing too many immediate subscriptions bound to Env Injectors which will never get cleaned up:\r\n\r\n```ts\r\ntoSignal(myObservable$)\r\n```\r\nNow if the dev doesn't know all the quirks around injector hierarchy, they might not know that e.g. a service provided-in-root might get env injector which doesn't trigger `DestroyRef`. In fact, moving that code (since it depends on `inject`\/`DestroyRef`) changes the semantics significantly!\r\n\r\nRelates to #51290.\r\n\r\n\n\n### Proposed solution\n\n## Usage\r\n\r\n```ts\r\n\/\/ within a component\/directive OR service provided in component\/directive\r\nconst signal = toSignal(observable$) \/\/ \u2705 no runtime error\r\n\/\/ no additional params needed\r\n\/\/ runtime check makes sure that a NodeInjector spits out a NodeInjectorDestroyRef\r\n\r\n\/\/ within a global service\r\nconst signal = toSignal(observable$) \/\/ \u274c safety error: Env Injector was used when only node injectors are allowed (whatever message...)\r\n\/\/ expected: toSignal(observable$, { onlyInNodeInjectors: false })\r\n\r\n\/\/ within a global service\r\nconst signal = toSignal(observable$, { onlyInNodeInjectors: false }) \/\/ \u2705 no runtime error\r\n\/\/ the developer is doing it ON THEIR OWN RISK\r\n```\r\n\r\n## How\r\n\r\nThis _proposal_ aims to make potentially unsafe usage explicit (like with requireSync default is `false`). I.e. revert the current API (thankfully, toSignal is still within `developerPreview`) whenever **ENV injector** would get passed: from \"_implicit env injector_\" into \"_explicit env injector_\" (doesn't matter if node injector gets used).\r\n\r\nSlightly change the toSignal function signature and\/or overloads.\r\n\r\nCurrent options:\r\n```ts\r\nexport interface ToSignalOptions {\r\n  initialValue?: unknown;\r\n  requireSync?: boolean;\r\n  injector?: Injector;\r\n  manualCleanup?: boolean;\r\n  rejectErrors?: boolean;\r\n}\r\n```\r\n\r\nNote that specific `onlyInNodeInjectors` name of the option is less relevant at the moment... \ud83d\ude09\r\n\r\nProposed:\r\n```ts\r\nexport interface ToSignalOptions {\r\n  ...\r\n  onlyInNodeInjectors?: boolean \/\/ default true\r\n}\r\n```\r\n\r\nRuntime check:\r\n- angular has internal access to all classes that represent injectors (env, node) or destroy refs (node)\r\n- depending on what is simpler (checking the injectors OR destroyRefs - ultimately it's all about destroyRefs anyway), use the `instanceOf` operator to find out whether the allowed\r\n\r\n```ts\r\n\/\/ either injectors:\r\n- class NodeInjector\r\n- abstract class EnvironmentInjector \/ class R3Injector extends EnvironmentInjector\r\n\r\n\/\/ or:\r\n- class NodeInjectorDestroyRef\r\n```\r\n\r\nMechanics:\r\n- in compile-time we don't know whether the injector is going to be **node** or **env** one\r\n- the default (true) allows to only use node injectors, and since node injectors get removed along with components, the risk of memory leaks drops significantly\r\n- if devs want to go with env injectors, they shall do that explicitly.\r\n\r\n\n\n### Alternatives considered\n\n# 1. enum\r\n\r\nchange `manualCleanup`'s boolean with an `cleanup` **enum** with:\r\n- `NODE_ONLY` (default) -> destroyRef can be taken ONLY from node injectors\r\n- `MANUAL_CLEANUP` -> no destroyRef\r\n- `ALL_INJECTORS` -> (unrecommended) although both node and env injectors might be used to fetch destroyRef\r\n\r\nagain, better names could be provided.\r\n\r\n# 2. toSignal overloads\r\n\r\nupdate the overloads:\r\n\r\n```ts\r\n\/\/ Base case: no options -> `undefined` in the result type.\r\nexport function toSignal<T>(source: Observable<T>|Subscribable<T>): Signal<T|undefined>;\r\n\/\/ Options with `undefined` initial value and no `requiredSync` -> `undefined`.\r\nexport function toSignal<T>(\r\n    source: Observable<T>|Subscribable<T>,\r\n    options: ToSignalOptions&{initialValue?: undefined, requireSync?: false}): Signal<T|undefined>;\r\n\/\/ Options with `null` initial value -> `null`.\r\nexport function toSignal<T>(\r\n    source: Observable<T>|Subscribable<T>,\r\n    options: ToSignalOptions&{initialValue?: null, requireSync?: false}): Signal<T|null>;\r\n\/\/ Options with `undefined` initial value and `requiredSync` -> strict result type.\r\nexport function toSignal<T>(\r\n    source: Observable<T>|Subscribable<T>,\r\n    options: ToSignalOptions&{initialValue?: undefined, requireSync: true}): Signal<T>;\r\n\/\/ Options with a more specific initial value type.\r\nexport function toSignal<T, const U extends T>(\r\n    source: Observable<T>|Subscribable<T>,\r\n    options: ToSignalOptions&{initialValue: U, requireSync?: false}): Signal<T|U>;\r\n```\r\n\r\nto enforce passing the injector explicitly. But **I don't like this idea** since it 1. worsens the DX and 2. doesn't guarantee that people would not just simply `injector = inject(Injector)` and YOLO, which would NOT remove the issue in the first place.","comments":[],"labels":["area: core","core: reactivity","cross-cutting: signals"]},{"title":"Describe how to fully translate route paths, handle prerendering for them and set lang attribute on html","body":"### Describe the problem that you experienced\n\nCan't find any official documentation for how to do route paths translations (`path` property in each configurated route).\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.dev\/guide\/i18n\n\n### Describe what you were looking for in the documentation\n\nThe i18n documentation only describes how to handle language code segment in the url, not each configurated route path. It also:\r\n\r\n1. Lacks documentation (or support) for how to handle prerendering with different languages when using the `routesFile` to point to a text file with the routes that should be prerendered.\r\n2. Lacks clarity how to handle all of the above while also updating the `lang` attribute on the `html` element. I saw you can do this by specifying locales in `angular.json` but when trying to put it all together it just becomes a nightmare to try and figure it out.\n\n### Describe the actions that led you to experience the problem\n\n_No response_\n\n### Describe what you want to experience that would fix the problem\n\nAn official way of translating route paths based on a subdomain like `en.foo.com\/home` or path segment like `foo.com\/en\/home`, without having to resort to poorly maintained or flat out abandoned third party packages.\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["If I understood this correctly, we have the same issue.\r\n\r\nWe'd like to specify one `routesFile` per locale, but that's seems not possible right now, leading to a very bloated prerendering pipeline.","Any progress on that point?"],"labels":["area: i18n","area: router","P3","area: adev","area: docs"]},{"title":"refactor(core): Update Testability to use PendingTasks for stability indicator","body":"Since https:\/\/github.com\/angular\/angular\/commit\/12181b99148e9c4034b16b8ae1253c4826428cd6, zone stability\r\ncontributes to the PendingTasks. There is now a single source of truth for application stability\r\ntracked in PendingTasks. This change makes protractor's whenStable compatible with zoneless.\r\nThe `Router` and `HttpClient` also contribute to stability using the\r\n`PendingTasks` injectable. There will likely be more updates in the\r\nfuture to have more features contribute to stableness in a zoneless\r\ncompatible way.\r\n\r\nNote: First commit is in a separate PR and is technically breaking. This change is a follow up that wouldn't be breaking the state after that one is merged.","comments":[],"labels":["breaking changes","area: core","target: major","detected: breaking change"]},{"title":"fix(core): Remove deprecated Testability methods","body":"This commit removes the long-deprecated Testability methods that track pending tasks. This is done by NgZone today and will be done by other APIs in zoneless.\r\n\r\nBREAKING CHANGE: Testability methods `increasePendingRequestCount`, `decreasePendingRequestCount` and `getPendingRequestCount` have been removed. This information is tracked with zones.\r\n","comments":[],"labels":["breaking changes","area: core","target: major","detected: breaking change"]},{"title":"DefaultDomRenderer2 causing setAttribute not a function error on comment elements","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\nplatform-browser\r\n\r\n### Is this a regression?\r\n\r\nYes\r\n\r\n### Description\r\n\r\nRecently updated an angular project from version 6 to 16. All is working fine after upgrading but I do get an Error log in console with message \r\n```\r\nERROR TypeError: n.setAttribute is not a function\r\n``` \r\nI've managed to debug the issue and I can see that it's coming from the DefaultDomRenderer2 setAttribute function when the element is of type `#comment` \r\n\r\n![angular bug2](https:\/\/github.com\/angular\/angular\/assets\/38229085\/a7ba4833-9548-40dc-b318-5ddc8fe6e6e5)\r\n\r\n![angular bug](https:\/\/github.com\/angular\/angular\/assets\/38229085\/3637dcb4-1754-4cc3-90c4-37dcb83c7c1b)\r\n\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\nhttps:\/\/github.com\/magixian\/applyzer\r\n\r\n### Please provide the exception or error you saw\r\n\r\n```true\r\nERROR TypeError: n.setAttribute is not a function\r\n```\r\n\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 16.2.11\r\nNode: 20.9.0\r\nPackage Manager: npm 10.1.0\r\nOS Win x64\r\nAngular: 16.2.11\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\n_No response_","comments":["Please provide a runnable reproduction, or at least the stack trace in a non-optimized build. Without reproduction we are unable to provide any help.","> Please provide a runnable reproduction, or at least the stack trace in a non-optimized build. Without reproduction we are unable to provide any help.\r\n\r\nI've managed to reproduce the bug on this small application https:\/\/github.com\/magixian\/applyzer (also added on main issue message).\r\n\r\nIn this process of reproducing the bug I seem to have figured out where the bug is coming from https:\/\/github.com\/magixian\/applyzer\/blob\/main\/src\/app\/block-builder\/block-builder.component.html#L2. This is an attribute which seem to not be required on our application so it can be removed without any issues. However, just to note that this was working all fine with the previous versions. \r\n\r\nI will keep the issue open in the mean time just incase this case needs to be looked at.\r\n\r\n","A `ng-container` will be rendered as a [Comment Node](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Comment) in DOM and does not provide a setAttribute function. \r\n\r\nYou should use a div instead of ng-container or move the [attr.data-index] to a HTML Element.","Marking it as a bug since this situation should be detected by a compiler and reported during the compilation time, without any runtime involvement. The `attr.` binding syntax clearly indicates that it is about binding to an attribute and we know that there are no attributes on the `<ng-container>` hence we can detect this situation statically. "],"labels":["area: compiler","P4","compiler: template type-checking","bug"]},{"title":"Animation has a bug when value update occurs within 2020ms","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\nanimations\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nI am trying to make the animation work to flash a set N of values each time they change: they can change over time. However, the behavior is not consistent, some flash correctly when they change, others do not. This seems to happen only if the time interval between changes is less than 2020ms for me.\r\nI would expect that when all numerical values change then all numbers would also have animation, unfortunately this does not seem to be the case.\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\nhttps:\/\/stackblitz.com\/edit\/angular-tailwind-uty7nm?file=src%2Fapp%2Fapp.component.html,src%2Fapp%2Fapp.component.ts\r\n\r\n### Please provide the exception or error you saw\r\n\r\nNo errors.\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 15.2.9\r\nNode: 18.10.0\r\nPackage Manager: npm 8.19.2\r\nOS: darwin x64\r\n\r\nAngular: 15.2.9\r\n... animations, cli, common, compiler, compiler-cli, core\r\n... elements, forms, platform-browser, platform-browser-dynamic\r\n... router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1502.9\r\n@angular-devkit\/build-angular   15.2.9\r\n@angular-devkit\/core            15.2.9\r\n@angular-devkit\/schematics      15.2.9\r\n@schematics\/angular             15.2.9\r\nng-packagr                      15.2.2\r\nrxjs                            7.4.0\r\ntypescript                      4.8.4\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\nThe documentation on the site does not help at all.","comments":[],"labels":["area: animations"]},{"title":"refactor(common): Convert `HttpStatusCode` enum to const object","body":"Enums are not inlined, this results in the 3Kb minified output for this single enum. This commit tends to optimise that.\r\n\r\nA presubmit will tell us how breaking this change is. ","comments":["in this PR https:\/\/github.com\/angular\/angular\/pull\/51670#discussion_r1317566943 it is said that esbuild does inline enums?\r\n\r\nI did find Your [Twitt](https:\/\/twitter.com\/Jean__Meche\/status\/1742124716314275906)  on this PR , and I understand that it is caused by Angualr CLI, but if thats the case probably rest of enums from #51670 could use the same treatment    ","@kbrilla It does only when directly fed TS code : [esbuild](https:\/\/esbuild.github.io\/try\/#YgAwLjE5LjIALS1idW5kbGUgLS1zcGxpdHRpbmcgLS1vdXRkaXI9b3V0IC0tZm9ybWF0PWVzbQBlAGVudHJ5LnRzAGltcG9ydCB7SHR0cFN0YXR1c0NvZGV9IGZyb20gJy4vaHR0cC5qcyc7Cgpjb25zb2xlLmxvZyhIdHRwU3RhdHVzQ29kZS5JQW1BVGVhcG90KTsKCihhc3luYyAoKSA9PiB7CiAgaW1wb3J0KCcuL2ZpbGUuanMnKTsKfSkoKTsAAGh0dHAudHMAZXhwb3J0IGVudW0gSHR0cFN0YXR1c0NvZGUgewogIElBbUFUZWFwb3QgPSA0MTgsCn0KCmNvbnNvbGUubG9nKEh0dHBTdGF0dXNDb2RlLklBbUFUZWFwb3QpOwAAZmlsZS5qcwBpbXBvcnQge0h0dHBTdGF0dXNDb2RlfSBmcm9tICcuL2h0dHAuanMnOwoKY29uc29sZS5sb2coSHR0cFN0YXR1c0NvZGUuSUFtQVRlYXBvdCk7)\r\n\r\nBut if you pass it the TSC output like the CLI does its doesn't : [esbuild](https:\/\/esbuild.github.io\/try\/#YgAwLjE5LjIALS1idW5kbGUgLS1zcGxpdHRpbmcgLS1vdXRkaXI9b3V0IC0tZm9ybWF0PWVzbQBlAGVudHJ5LnRzAGltcG9ydCB7SHR0cFN0YXR1c0NvZGV9IGZyb20gJy4vaHR0cC5qcyc7Cgpjb25zb2xlLmxvZyhIdHRwU3RhdHVzQ29kZS5JQW1BVGVhcG90KTsKCihhc3luYyAoKSA9PiB7CiAgaW1wb3J0KCcuL2ZpbGUuanMnKTsKfSkoKTsAAGh0dHAudHMAZXhwb3J0IHZhciBIdHRwU3RhdHVzQ29kZTsKKGZ1bmN0aW9uIChIdHRwU3RhdHVzQ29kZSkgewogICAgSHR0cFN0YXR1c0NvZGVbSHR0cFN0YXR1c0NvZGVbIk9rIl0gPSAyMDBdID0gIk9rIjsKICAgIEh0dHBTdGF0dXNDb2RlW0h0dHBTdGF0dXNDb2RlWyJJbUFUZWFwb3QiXSA9IDQxOF0gPSAiSW1BVGVhcG90IjsKfSkoSHR0cFN0YXR1c0NvZGUgfHwgKEh0dHBTdGF0dXNDb2RlID0ge30pKTsKCgpjb25zb2xlLmxvZyhIdHRwU3RhdHVzQ29kZS5JQW1BVGVhcG90KTsAAGZpbGUuanMAaW1wb3J0IHtIdHRwU3RhdHVzQ29kZX0gZnJvbSAnLi9odHRwLmpzJzsKCmNvbnNvbGUubG9nKEh0dHBTdGF0dXNDb2RlLklBbUFUZWFwb3QpOw)\r\n\r\nWe just discovered that. \r\n\r\n","One more question, You can use `enum` as type but it cannot be done with object, also mayby not a big change but if You hover over object You loose info about value \r\n<img width=\"666\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/22288449\/690b465d-7d78-4b71-946c-decc2a768138\">\r\n<img width=\"861\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/22288449\/fa8254e8-8923-419d-b94e-60f2d1193d83\">\r\nalso well small TS goodies are lost\r\n<img width=\"560\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/22288449\/ed5db8f3-8fa5-4bb2-8987-6ec1fde082f4\">\r\n<img width=\"1098\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/22288449\/8e0497ec-b2c8-4e10-ab64-da946731b43c\">\r\nthis cannot be done\r\n<img width=\"1176\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/22288449\/d32f6aad-95be-47d8-bc63-a05de61c07e2\">\r\n\r\nAlso adding `as const` does solve some issues and improves on type \r\n<img width=\"565\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/22288449\/47d32349-bbe7-44f7-8a28-ee597b9b9fec\">\r\n<img width=\"470\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/22288449\/2b5a6410-f62b-4c4d-8544-b18b1887a268\">\r\n\r\nbut still need to joggle with types to get same functionality\r\n<img width=\"826\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/22288449\/7af4f27d-47e7-47b0-b8da-e2961baca07c\">\r\n\r\n\r\n\r\nSo is it some internal change only and to 'public' this will be unchanged or is it breaking change?\r\n\r\n\r\n\r\n\r\n\r\n","Yes, this is likely a breaking change for the reason you're mentionning : we can't use it as a type anymore.\r\nWith the PR I wanted to see how breaking it was in Google's codebase ! ","cc @frigus02 since you worked on the removal of the `const enum`. ","Hm, I wasn't aware that you typically feed Angular CLI output to esbuild instead of the TS code directly. It makes sense, though. I see that esbuild explicitly calls out that optimizing the enum emit in JS files is not supported (https:\/\/esbuild.github.io\/api\/#minify-considerations), which is unfortunate but also understandable from their side.\r\n\r\nThis PR seems like a reasonable solution to me. I'm not on the Angular team, though. My opinion doesn't really count \ud83d\ude42."],"labels":["action: review","area: common\/http"]},{"title":"fix(core): Fix decimal pipe floating point formatting bug","body":"## PR Type\r\n- [x] Bugfix\r\n\r\n\r\n## What is the current behavior?\r\n```\r\nInput (string) : \"123456789.123456789\"\r\nFormat : 0.0-9\r\nOutput :   123,456,789.12345679 \/\/ 7(8)9 -> 8 is lost..\r\nExpected : 123,456,789.123456789\r\n```\r\nhttps:\/\/github.com\/angular\/angular\/blob\/d315e2c4fa178dfbd41bc25259605bb999fa302e\/packages\/common\/src\/pipes\/number_pipe.ts#L104-L105\r\n\r\n- Currently, `decimal_pipe` parse string to number first and then apply formating\r\n  - \u26a0\ufe0f When parse `'123456789.123456789'` string to number, some digit on fraction part is lost due to javascript floating point limitation\r\n- Issue Number: https:\/\/github.com\/angular\/angular\/issues\/47809\r\n  - Reproduce: https:\/\/stackblitz.com\/edit\/angular-ivy-ycarro?file=src\/app\/app.component.html\r\n\r\n\r\n## What is the new behavior?\r\n```js\r\n        const formatStrs = [integerPart, fractionPart]\r\n            .map(part => strToNumber(part))\r\n            .map(num => formatNumber(num, locale, digitsInfo));\r\n```\r\n- To format string to number on javascript well, apply formatting on integer\/fraction part separately and then concat, return it.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [x] No","comments":["Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https:\/\/github.com\/angular\/angular\/pull\/53730\/checks?check_run_id=20045186996) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.","I need this feature and ready to update PR, so waiting your awesome reviews~ thanks! \ud83d\ude03"],"labels":["action: review","area: core","target: patch"]},{"title":"Template & Template Outlet using new Control Flows","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\ncore\r\n\r\n### Description\r\n\r\nI love the new Control Flows \u2764\ufe0f and after seeing how the new svelte 5 snippets work (for reference https:\/\/svelte-5-preview.vercel.app\/docs\/snippets) I thought it would be cool to have something similar for angular template and template outlets.\r\n\r\n I think this would be easier to read and to understand, especially for beginners.\r\n\r\n### Proposed solution\r\n\r\n```html\r\n<!-- Template Defenition -->\r\n@template(summary) {\r\n    <h1>Summary Headline<\/h1>\r\n}\r\n\r\n<!-- \r\n    Rendering the template\r\n    Alternatives @render \/ @templateOutlet\r\n-->\r\n@outlet(summary)\r\n```\r\n\r\n\r\nWith Parameters, maybe like this: \r\n```html\r\n@template(summary(description)) {\r\n    <h1>Summary Headline<\/h1>\r\n    <p>{{context}}<\/p>\r\n}\r\n\r\n@outlet(summary('Test Description'))\r\n```\r\n\r\n\r\n\r\n### Alternatives considered\r\n\r\nProbably you can think of a better way to do this \ud83d\ude35\u200d\ud83d\udcab","comments":["Maybe `ng-content` can also follow new syntax:\r\n```\r\n@content {\r\n  <div>Default Content<\/div>\r\n}\r\n```\r\n\r\n```\r\n@content(selector){\r\n  <div>Default Content<\/div>\r\n}\r\n```\r\n\r\nCurrently, providing default template to ng-content is quite tedious #12530 "],"labels":["area: core","core: dynamic view creation"]},{"title":"docs(http): Update the Setup for testing in Http Client","body":"docs(http): Update the Setup for testing in Http Client to include provideHttpClient()\r\n\r\nIt is not enough to use provideHttpClientTesting() for HTTP Client Testing, it will throw a dependency injection error. Update the docs to include both provideHttpClient() and provideHttpClientTesting()\r\n\r\nFixes #53390\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [x] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nDocs says use provideHttpClientTesting() for HTTP Client Testing, but it will throw a dependency injection error.\r\n\r\nIssue Number: #53390\r\n\r\n\r\n## What is the new behavior?\r\nDocs says include both provideHttpClient() and provideHttpClientTesting() for HTTP Client Testing.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information","comments":["@josephperrott  I would like to kindly request your review on this PR. Looking forward to your comments. Thanks!"],"labels":["area: docs"]},{"title":"Angular SSR not updating dynamic meta tags and content received from API","body":"### Which @angular\/* package(s) are the source of the bug?\n\nplatform-server\n\n### Is this a regression?\n\nYes\n\n### Description\n\nI'm working on an Angular SSR application and I'm facing a problem when updating Open Graph meta tags after receiving content from the API, as in another component that updates directly (without consuming the API) there is no problem.\r\nAlthough when viewing elements in the page source code, all meta tags are updated. The problem is that when sharing, they don't show the updated meta tags.\r\n\r\nAfter I updated to Angular 17 it stopped working, but I'm not sure, because it was in some version that it stopped working and I had made several Angular updates.\n\n### Please provide a link to a minimal reproduction of the bug\n\nUnfortunately, I have no way of reproducing the error for you to analyze, as the error only occurs in production and cannot be reproduced in stackblitz.\n\n### Please provide the exception or error you saw\n\n```true\nngOnInit(): void {\r\n  this.metadataService.removeTags(); \/\/ Removing existing tags\r\n\r\n  \/\/ ... (other initialization code)\r\n\r\n  if (this.reNumber.test(sumarioId) && Number(sumarioId) > 0) {\r\n    this.artigoService.GeArticle(sumarioId).subscribe({\r\n      next: (res: Artigo) => {\r\n        if (res != null) {\r\n          this.artigo = res;\r\n          \/\/ ... (other processing)\r\n          this.updateMetaDataArticle();\r\n        }\r\n      },\r\n      \/\/ ... (error and complete handlers)\r\n    });\r\n  }\r\n}\r\n\r\n\r\nprivate updateMetaDataArticle(): void {\r\n  let meta: PageMetaData = new PageMetaData();\r\n  \/\/ ... (other meta data setup)\r\n\r\n  meta.title = this.artigo?.manuscriptTitle as string;\r\n  meta.description = this.artigo?.abstract as string;\r\n\r\n  if (this.metadataService) {\r\n    this.metadataService.updateMetadata(meta);\r\n    \/\/ ... (other actions)\r\n  }\r\n}\r\n\r\npublic updateMetadata(metadata: Partial<PageMetaData>): void {\r\n  \/\/ ... (other metadata updates)\r\n  this.metaTagService.addTags([\r\n    { property: 'og:title', content: metadata.title },\r\n    { property: 'og:description', content: metadata.description }\r\n    \/\/ ... (other meta tags)\r\n  ], false);\r\n}\r\n\r\npublic removeTags(): void {\r\n  if (!this._platform.isBrowser) return; \/\/ Avoid processing during server-side rendering\r\n\r\n  this.metaTagService.removeTag('property=\"og:title\"');\r\n  this.metaTagService.removeTag('property=\"og:description\"');\r\n  \/\/ ... (other tag removals if relevant)\r\n}\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 17.0.8\r\nNode: 20.10.0\r\nPackage Manager: npm 10.2.5\r\nOS: win32 x64\r\n\r\nAngular: 17.0.8\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, platform-server\r\n... router, ssr\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1700.8\r\n@angular-devkit\/build-angular   17.0.8\r\n@angular-devkit\/core            17.0.8\r\n@angular-devkit\/schematics      17.0.8\r\n@angular\/cdk                    17.0.4\r\n@angular\/material               17.0.4\r\n@schematics\/angular             17.0.8\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.2\n```\n\n\n### Anything else?\n\n_No response_","comments":["@leandrotassi unfortunately we can't perform any investigation with the information that you've provided and we'd need a repro to see what's happening and whether there is anything on the framework side that should be fixed. You may not be able to reproduce the problem via Stackblitz (as you've mentioned), but you may try creating a new Angular app (via `ng new`) and try to reproduce a problem there. Note: please do **not** share the code of your app, create a minimal possible example code to illustrate a pattern that causes the problem.","@AndrewKushnir:\r\nThis is a link you can test: https:\/\/ssr-api-ivory.vercel.app\/post\/3\r\nAnd this is the repo that I used to deploy into the above host: https:\/\/bitbucket.org\/My_Profiles\/ssr-api\/src\/main\/\r\nI think that we will have a solution to apply SSR in this use-case.","@hieutranagi47: did you find any solution for this?\r\nIs there any update on this? After upgrading to latest angular 17 version, it stopped working","@kodetratech I don't know the root cause of the issue in this case, Angular renders the home page first, then switch to the post detail page although I access the post detail page. I guess that it's Angular issue, so I don't know what the best solution for this should be.\r\nIf your page calls only one API => There is no problem.","@hieutranagi47 thanks for creating a test application! I've tried running it locally and I can see updated meta tags in the page source once the page is SSR'ed and HTML is delivered to a browser. Could you please provide a bit more info on how to reproduce the problem locally?","@kodetratech Thank you so much for your time.\r\nWe don't face the issue when we serve the project locally. The problem occurs when we build it as production and deploy it into a server. You can check it here: https:\/\/ssr-api-ivory.vercel.app\/post\/3","@hieutranagi47 I am also facing the same problem. one thing I can tell something has happened after Angular version **17.0.3**. I have an application that uses **Angular 17.0.3**, when I share the URL of my application to social media like Twitter or Facebook, it renders the dynamic meta tags correctly. But my other application which is running on angular **17.2.1**, URLs are not working on social media sites. it renders the default value of the meta tags. \r\nExample of app running on 17.03 **( dynamic meta tags working)** : https:\/\/contentbuffer.com\/issues\/news\/technical\/telegram-now-lets-users-convert-personal-accounts-business-accounts \r\nExample of app running on 17.2.1 **( dynamic meta tags not working)**: https:\/\/codebrainery.com\/article\/navigating-ai-revolution-software-development-chatgpt ","@hieutranagi47 I am also facing the same problem. project is working locally but in production it is not working. meta tags are not updating and not able to working in social media (not displaying correct meta tags and images, showing only default tags)","If you notice, you will see that Angular renders the root route (\"\/\"), before render the actual route.","I have notice that when updating the meta tags after receiving response from the api call it is not updating but without API call it is working.\r\n\r\nAny solution for this ","I am also looking for a solution, please share updates whenever possible ","@roosikem @monacodelisa @yogeshbansal : While we are waiting for the fix from the Angular core team, we could try the pre-render feature of Angular CLI. I tested it and it works.\r\nhttps:\/\/angular.io\/guide\/prerendering#prerendering-parameterized-routes","@roosikem cool thank you, I am actively trying different options, I will give it a try ","@hieutranagi47 @roosikem @AndrewKushnir Just wondering...Does anyone know the cause of this issue?"],"labels":["needs reproduction","area: server"]},{"title":"compiler: implement telemetry infrastructure","body":"See individual commits","comments":[],"labels":["action: review","area: compiler","target: minor"]},{"title":"Make FormArray and other examples useful","body":"### Describe the problem that you experienced\n\nThere's no example of how to use FormArray in the template.\r\nWhat you can see on the screenshot or by opening the link is simply not enough to get an immediate grasp of how to set up the form.\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.dev\/api\/forms\/FormArray?tab=usage-notes\n\n### Describe what you were looking for in the documentation\n\nI was looking for a template syntax.\n\n### Describe the actions that led you to experience the problem\n\n_No response_\n\n### Describe what you want to experience that would fix the problem\n\nI want a lot of different examples, like on Angular Material site, where you have more than one example for every component and all of the code is shown.\r\nIf not a lot, I want at least one but super-descriptive example.\r\nIn the end of the day, the form is not only about the typescript, half of it is about the template.\n\n### Add a screenshot if that helps illustrate the problem\n\n<img width=\"600\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/25200186\/ea1cd0b3-31cf-4a2d-960b-55539a5dd2b6\">\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["Hi, did you take a look at the [Reactive forms guide](https:\/\/angular.dev\/guide\/forms\/reactive-forms#acesss-the-formarray-control) ? ","Hmm, apparently no. Thanks!\r\nStill finding my ways around the new docs. Though I see that the old docs are structured the same way.\r\nAlways felt it can be improved and wonder if I'm the only one confused where to look for stuff in the docs \ud83e\udd14 ","Assign to me I will provide good example \ud83d\udd7a"],"labels":["help wanted","good first issue","P3","area: adev","area: docs"]},{"title":"Virtual scroll positioning","body":"### Is this a bug report or a feature request?\n\n- [X] Bug Report\n- [ ] Feature Request\n\n### Please provide the steps to reproduce the issue [Bug Report only]\n\nI wish I knew the steps. I just use the devtools, click around, use \"inspect element\" etc.\r\nI also use Redux Devtools. Not frequently, but it's installed.\n\n### Please provide the expected behavior vs the actual behavior you encountered [Bug Report only]\n\nI expect to not have layout issues with the devtools. However often times it ends up looking like this.\r\nWhen I scroll, the tree is scrolled but the visible area stays the same. I suppose you have issues with virtual scroller.\r\nWorks fine after reload.\n\n### Please provide a screenshot if possible [Bug Report only]\n\n<img width=\"704\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/25200186\/2e859c86-b4d7-40e8-90e2-b812209bac07\">\n\n### Please provide the exception or error you saw [Bug Report only]\n\n_No response_\n\n### Is this a browser-specific issue? If so, please specify the device, browser, and version. [Bug Report only]\n\n```true\nI did not test in other browsers. This issue has been observed for a while now in Chrome.\r\nSo Windows 10\/11, Chrome any recent version.\n```\n\n\n### Description [Feature Request only]\n\n_No response_\n\n### Proposed solution [Feature Request only]\n\n_No response_\n\n### Alternatives considered [Feature Request only]\n\n_No response_","comments":[],"labels":["state: has PR","area: devtools"]},{"title":"Provide the ability to synchronously track signal changes","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nThere are cases when we want to (synchronously) track all value changes of a signal. For instance, there is a community plugin for SignalStore that allows the connection with the Redux Devtools extension: https:\/\/github.com\/angular-architects\/ngrx-toolkit?tab=readme-ov-file#devtools-withdevtools\r\n\r\nThis plugin provides the ability to set the label that will be displayed in the devtools when patching the SignalStore state:\r\n\r\n```ts\r\npatchState('set user', store, { user: 'Marko' });\r\n```\r\n\r\nHowever, if we call `patchState` multiple times in the same tick:\r\n\r\n```ts\r\npatchState('set user', store, { user: 'Marko' });\r\npatchState('reset query', store, { query: '' });\r\n```\r\n\r\nOnly the last action will be logged in the devtools because Angular's effect will 'emit' only once.\r\n\r\nCurrently, there is no way to solve this limitation \/ display multiple state changes that happen in the same tick.\r\n\n\n### Proposed solution\n\nCore APIs should be flexible enough to cover this scenario. For example in Vue, they provide three different types of the `watchEffect` function that is equivalent to `effect` in Angular:\r\n\r\n- `watchEffect`\r\n- `watchPostEffect`\r\n- `watchSyncEffect` <= Redux Devtools plugin needs this one\r\n\r\nIt's also possible to provide different flush timing to `watchEffect` function:\r\n\r\n```ts\r\nconst count = ref(0)\r\n\r\nwatchEffect(() => console.log(count.value), { flush: 'sync' });\r\n\/\/ equivalent to:\r\nwatchSyncEffect(() => console.log(count.value));\r\n```\r\n\r\nMore info about Vue effects is available at the following link: https:\/\/vuejs.org\/api\/reactivity-core.html#watcheffect\r\n\r\nThere are several ways to provide this functionality:\r\n\r\n1. Expose (internal) APIs that can be used by framework consumers to create watchers\/custom effects that suit their needs.\r\n2. Provide the `syncEffect` function similar to `watchSyncEffect` from Vue.\r\n3. Provide the ability to pass the custom 'scheduler'\/flush timing to the `effect` function:\r\n\r\n```ts\r\nconst count = signal(0);\r\n\r\n\/\/ similar to Vue:\r\neffect(() => console.log(count()), { flush: 'sync' });\r\n\/\/ or more extensible solution:\r\neffect(() => console.log(count()), { scheduler: syncScheduler });\r\n```\r\n\n\n### Alternatives considered\n\nCurrently, there is no way to achieve this behavior with existing public APIs.","comments":["Just an idea.\r\n\r\nA `subscribe` function on the signal itself which gets triggered on a value change immediately. Does not get triggered on the current value.\r\n\r\n```ts\r\nconst count = signal(0);\r\ncount.subscribe((value) => console.log(value));\r\n```"],"labels":["area: core","core: reactivity","cross-cutting: signals"]},{"title":"Allow caching HTTP requests when urls differ between server and client","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\ncommon, platform-browser\r\n\r\n### Description\r\n\r\nFollowing #50117, additional configuration was added to the HTTP transfer cache.\r\nOne use-case was mentioned in several replies and other issues about the lack of customization of the cache key but it was not handled in the associated PR so I'm opening a new issue, dedicated to this use case.\r\n\r\nWhen using SSR, it is common to use different urls on the server and the browser to access the same APIs.\r\nIt could be only the domain, the path or even the http scheme.\r\nThe main reason is to reduce network latency by accessing resources directly from a private network.\r\n\r\nWith the current HTTP transfer cache implementation, the cache key is computed from the `HttpRequest` with the [`makeCacheKey`](https:\/\/github.com\/angular\/angular\/blob\/d315e2c4fa178dfbd41bc25259605bb999fa302e\/packages\/common\/http\/src\/transfer_cache.ts#L183) function.\r\n\r\nThis function uses the request url among other things so when the url is different on the server and on the browser, the cached response will never be reused from the transfer cache during hydration.\r\n\r\nRelated comments \/ issues:\r\nhttps:\/\/github.com\/angular\/angular\/issues\/50117#issuecomment-1602675046\r\nhttps:\/\/github.com\/angular\/angular\/issues\/50117#issuecomment-1648612777\r\nhttps:\/\/github.com\/angular\/angular\/issues\/50117#issuecomment-1732133906\r\nhttps:\/\/github.com\/angular\/angular\/issues\/50117#issuecomment-1792077410\r\nhttps:\/\/github.com\/angular\/universal\/issues\/1934\r\n\r\n### First proposed solution: adding more options to HttpRequest and provideClientHydration()\r\nTo override the cache key at the request level, we could provide a custom cache key as a request option.\r\n```typescript\r\nconst customCacheKey = makeCustomCacheKey(url, params);\r\nthis.http.get(url, { transferCache: { cacheKey: customCacheKey } });\r\n```\r\n\r\nTo globally customize the cache key, we could either use an interceptor (Ability to override transferCache property when cloning the request is needed too)\r\n```typescript\r\nfunction customCacheKeyInterceptor = (req, next) => {\r\n    const newRequest = req.clone({ \r\n        transferCache: { \r\n            cacheKey: customCacheKey(req) \/\/ Custom logic possibly using DI to compute the cache key\r\n            ...req.transferCache,\r\n        }\r\n    });\r\n    return next(newRequest);\r\n}\r\n```\r\n\r\nOr we could add a \"custom cache key function\" option to `provideClientHydration()`:\r\n```typescript\r\nprovideClientHydration({\r\n    customCacheKeyFn: myCustomCacheKeyFn\r\n});\r\n```\r\n\r\nI think that providing a custom cache key function could simplify the usage of and totally replace the existing options `includeHeaders`, `filter` and `includePostRequests`. (but that would be breaking)\r\nThese options would probably need to be mutually exclusive because they could overlap.\r\n\r\nAnother useful thing would be to have access to the current `makeCacheKey` function so we could simply override some parts of the http request to customize the cache key:\r\n```typescript\r\nimport { makeCacheKey } from '@angular\/common\/http';\r\n\r\nfunction customCacheKey(request: HttpRequest) {\r\n    \/\/ If only the url is different between server and browser, we can only override this part\r\n    const overridenRequest = request.clone({ url: 'urlToUseInCacheKey' });\r\n    return makeCacheKey(overridenRequest);\r\n}\r\n\r\nfunction customCacheKeyInterceptor = (req, next) => {\r\n    const newRequest = req.clone({ \r\n        transferCache: { \r\n            cacheKey: customCacheKey(request)\r\n            ...req.transferCache,\r\n        }\r\n    });\r\n    return next(newRequest);\r\n}\r\n```\r\n\r\n### Second proposed solution: expose `transferCacheInterceptorFn` and let developers use it where needed\r\nAnother way to solve this (closest to the original behavior with `TransferHttpCacheModule`) would be to expose the `transferCacheInterceptorFn` in the public API.\r\n\r\nWe could place this interceptor exactly where we need it in the interceptors chain to control what the request url looks like when cached.\r\n\r\nCaching would be enabled by using the interceptor function in `provideHttpClient()` and calling `provideClientHydration()`.\r\n\r\n```typescript\r\nprovideHttpClient(\r\n    withInterceptors([\r\n        authInterceptorFn, \/\/ Add Auth header\r\n        transferCacheInterceptorFn, \/\/ Cache requests when they are still undifferentiated between browser & server\r\n        overrideUrlInterceptorFn, \/\/ Custom logic to override the url on server, specific to the user's use case\r\n])),\r\nprovideClientHydration(\r\n    withNoHttpTransferCache(), \/\/ disable injecting transferCacheInterceptorFn as the last interceptor\r\n    withHttpTransferCacheOptions({ includePostRequests: true }) \/\/ optionally provide global options for transferCacheInterceptorFn \r\n),\r\n```\r\nBecause the interceptor would still rely on `CACHE_OPTIONS` which is only provided by `provideClientHydration()`, we could make sure that the interceptor is used with `provideClientHydration()` and print a warning\/error otherwise.\r\n\r\nThis approach would require minimal changes to the current implementation without adding any breaking change:\r\n- Always provide `CACHE_OPTIONS` even when using `withNoHttpTransferCache()`,\r\n- Provide `transferCacheInterceptorFn` as `HTTP_ROOT_INTERCEPTOR_FNS` only when `withNoHttpTransferCache()` is not used,\r\n- Remove the current error thrown when both `withNoHttpTransferCache()` and `withHttpTransferCacheOptions()` are used together.\r\n\r\n-------\r\nI believe that this second approach is the best one because it keeps a simple API for simple cases while giving the most flexibility for more advanced use cases. And all of that without any breaking change.\r\n\r\nI opened [a PR](https:\/\/github.com\/angular\/angular\/pull\/53815) to show how little changes would be needed to implement it.\r\n\r\n### Alternatives considered\r\n\r\nThe only alternative is to disable transfer cache from provideClientHydration and rely on a custom caching logic based on an interceptor (like the old `TransferHttpCacheModule` from @angular\/universal.","comments":["While it is a very reasonable desire to use local network when doing SSR vs public API endpoints, there are probably existing alternatives. \r\n\r\nCouldn't this be solved by a reverse proxy within the same \u201cnetwork\u201d ? (Like if you're using docker).","I'm not a network expert so I don't know if it would be feasible or if it would cover every use case.\r\n\r\nBut anyway, I don't think that the frontend framework should put that much constraint on how a private network that is managed by dedicated teams in big companies should be set up.","I edited the first message to suggest a second approach that would allow more customization for the end user without adding more options to the existing API by exposing the `transferCacheInterceptorFn` in the public API","I too have a very similar use case where our API domain differs server side and client side.\r\nOur Angular application, along with the other applications, are build within Docker containers - most of which are in the same network.\r\n\r\nWhen a server side request is made, we reference use a HTTP interceptor to replace the API domain with the container name so that we directly communicate with the API container. Client side uses the public facing domain.\r\n\r\nThe main challenges come when we're developing locally and I may have my main webserver running on `localhost:8010` for example which does not resolve within the Docker network (only resolves on my host machine). Similarly, the client side would need to use `web-api:4040` for example which does not resolve client side (on my host machine).\r\n\r\nThe requests are going to the same API with the same response, the URLs are the same (expect domain), however, client side rehydration always occurs due to the domain change.\r\n\r\nIt would be brilliant if we were able to configure `provideClientHydration` in such a way so that the caching would understand that the 2 domains are \"the same\".","@BenStudee, the cache only prevents the request from being sent to the backend. Hydration happens either way. \r\n\r\nAlso, couldn't your dev issues be solved by the CLI proxy ? ","> @BenStudee, the cache only prevents the request from being sent to the backend. Hydration happens either way.\r\n> \r\n> Also, couldn't your dev issues be solved by the CLI proxy ?\r\n\r\nThanks for your response @JeanMeche.\r\nPerhaps I'm using the wrong terminology - I am referring to the client executing the HTTP requests when the server has already hydrated the components.\r\n\r\nAs for CLI proxy - I don't believe so, but if you have an idea in mind and care to share then I am more than happy to listen.\r\n\r\nHaving the ability to customise how the \"cache key\" is generated would be enough to overcome the challenge I am facing - at least I believe so.","> While it is a very reasonable desire to use local network when doing SSR vs public API endpoints, there are probably existing alternatives.\r\n> \r\n> Couldn't this be solved by a reverse proxy within the same \u201cnetwork\u201d ? (Like if you're using docker).\r\n\r\nIn some conditions this couldn\u2019t be done (eg your DevOps team can\u2019t do this, or uses k8s with containerd etc, where configs looks different). So giving option to customize cacheKey is the best solution here."],"labels":["area: common"]},{"title":"feat: \u2728 Injecting EnvironmentProvider into component wrapped with @defer","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nGreetings Team Angular \ud83e\uddb8\u200d\u2642\ufe0f\r\n\r\nThere is sooo much goodness in Angular 17; including the migration schematics which makes upgrading as easy as upgrading your iPhone. Our entire codebase just got cleaner and better with this upgrade... and introduced a question.\r\n\r\nWe have a [router-less] Web Component story that, we think, can be improved upon.\r\n\r\nWe have a dozen components that get dynamically loaded when needed. Each component comes with its own Ngrx store. When the component gets initialized, the component talks to the store to ask for data. There is no need to load this store (EnvironmentProvider) before the component is loaded. It would just increase the main bundle size and it could end up not being used at all.\r\n\r\nThis already works in our NgModule story using a homegrown dynamic module loader. FYI It's the most advanced story we have in our Angular codebase.\r\n\r\nWith the clean way of coding when doing defer, we want to ask if there have been thoughts within the Angular team on injecting environment providers into components wrapped with defer? I know EnvironmentProviders was specifically created to avoid injecting them into components by accident. But, if Ngrx is limited to exposing their stores and effects using EnvironmentProviders, there's currently no way of lazy loading them without a route present. There's also no way to inject an Ngrx StoreModule.forFeature(): ModuleWithProviders into a component's import statement.\r\n\r\nI have asked for a solution from @brandonroberts over at Ngrx but, for this particular issue, we are both \ud83e\udd37\ud83c\udffe\u200d\u2642\ufe0f\ud83e\udd37\ud83c\udffc.\n\n### Proposed solution\n\nIntroduce a LazyEnvironmentProviders type that points to an array of libraries (could also support module federation) that can be lazily loaded inside defer. All the contents of @lazyProviders would get loaded before the component.\r\n\r\nExample of defer:\r\n\r\n```\r\n@defer (on idle) {\r\n   @lazyProviders {[\r\n      '@my-org\/store\/lazy-provider-1',\r\n      '@my-org\/store\/lazy-provider-2',\r\n   ]}\r\n    <inventory-map [config]=\"config\"><\/inventory-map>\r\n  } @placeholder {\r\n    Loading...\r\n  } @lazyProviderError {\r\n    Dev: Cannot lazy load providers\r\n  } @error {\r\n    Dev: Cannot lazy load component\r\n  }\r\n```\r\n\r\nThe lazy module would contain an array of LazyEnvironmentProviders. This would have to be introspected, post-load, by the mechanism in charge of loading up these lazy providers.\r\n\r\nExample of lazy provider (identical to EnvironmentProviders but represent a type that can be introspected and differentiated from the other types of providers):\r\n\r\n```\r\nimport { OrchestratorEffects } from '.\/+state\/orchestrator\/orchestrator.effects';\r\nimport * as fromOrchestrator from '.\/+state\/orchestrator\/orchestrator.reducer';\r\nimport { LazyEnvironmentProviders, makeLazyEnvironmentProviders } from '@angular\/core';\r\nimport { provideLazyEffects } from '@ngrx\/effects';\r\nimport { provideLazyState } from '@ngrx\/store';\r\n\r\nexport function provideWebComponents(): LazyEnvironmentProviders {\r\n  return makeLazyEnvironmentProviders([\r\n    provideLazyState(fromOrchestrator.FEATURE_KEY, fromOrchestrator.reducer),\r\n    provideLazyEffects(OrchestratorEffects),\r\n  ]);\r\n}\r\n```\n\n### Alternatives considered\n\nA less decoupled solution would be to allow the import of providers within the component itself. The pros of that solution is that we wouldn't have to touch how defer works at the moment. \r\n\r\nInstead, we would introduce a new concept into the component like lazyProviders. \r\n\r\nInstantiating lazyProviders before the actual component would enable us to not break state.\r\n\r\nExample:\r\n\r\n```\r\nimport { AsyncPipe } from '@angular\/common';\r\nimport { provider1, OrchestratorFacade } from '@my-org\/store\/lazy-provider-1';\r\nimport { provider2 } from '@my-org\/store\/lazy-provider-2';\r\n\r\n@Component({\r\n  selector: 'inventory-map',\r\n  templateUrl: '.\/inventory-map.html',\r\n  styleUrls: ['.\/inventory-map.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  standalone: true,\r\n  imports: [\r\n    AsyncPipe,\r\n  ],\r\n  lazyProviders: [\r\n    provider1,\r\n    provider2\r\n  ]\r\n})\r\nexport class InventoryMapComponent implements AfterLazyProviderInit {\r\n facade: inject(OrchestratorFacade);\r\n loaded$: this.facade.loaded$;\r\n\r\n  ngAfterLazyProviderInit(providers: LazyEnvironmentProvider[]) {\r\n    console.log('Should not be necessary if lazyProviders are instantiated before the component is.');\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n```","comments":["Hi ! \r\nI think this can be linked to #23279 : Async providers. ","Hi @JeanMeche \r\n\r\nI believe it can yes \ud83d\udc4d\ud83c\udffb. Close issue as you see fit please. ","I don't think it is linked to https:\/\/github.com\/angular\/angular\/issues\/23279 \/ async providers. It is more about creating a dedicated EnvironementInjector for the defer block. Currently there is no such capability but in most cases providing a service in root and injecting it into a component would do the trick.\r\n\r\nThere are some NgRx specific that I don't have enough understanding of. @brandonroberts is there a way of exposing NgRx stores in root? ","Yea, I don't think this is tied to async providers also. The NgRx Store is already provided at the root. \r\n\r\nThe ask was to be able to register NgRx providers at the component level, which is not possible currently because there is no equivalent ENVIRONMENT_INITIALIZER at the node injector level, and environment providers are incompatible at the component level by design. The either are registered within the `bootstrapApplication` providers or route-level providers.\r\n\r\nI've seen workarounds of people wrapping the store feature state providers in an NgModule\/standalone injector and dynamically registering it using the component's injector as its parent, but its not ideal.\r\n"],"labels":["area: core","core: di","needs: discussion","core: defer"]},{"title":"angular.dev URL fragment links broken on api pages.","body":"### Describe the problem that you experienced\r\n\r\nI was looking at the [Angular animations documentation for transitions](https:\/\/angular.dev\/api\/animations\/transition?tab=api) on angular.dev and I noticed a link about State Change Expressions. Clicking the link redirected me to the root of the site instead of to a section of Usage Notes.\r\n\r\nIt appears this link works correctly on the [old site](https:\/\/angular.io\/api\/animations\/transition).\r\n\r\nAfter some research I have determined that the old site had all information about the function in a flat structure on the page where as \"angular.dev\" has a tabular view separating the API from the Usage Notes which causes the URL fragment links to break.\r\n\r\n### Enter the URL of the topic with the problem\r\n\r\nhttps:\/\/angular.dev\/api\/animations\/transition?tab=api\r\n\r\n### Describe what you were looking for in the documentation\r\n\r\nI was specifically looking for for documentation on Angular animations State Change expressions.\r\n\r\n### Describe the actions that led you to experience the problem\r\n\r\n_No response_\r\n\r\n### Describe what you want to experience that would fix the problem\r\n\r\nI believe this link should have directed me from:\r\n   https:\/\/angular.dev\/api\/animations\/transition?tab=api\r\n to: \r\n   https:\/\/angular.dev\/api\/animations\/transition?tab=usage-notes#state-change-expression\r\n\r\n### Add a screenshot if that helps illustrate the problem\r\n\r\n_No response_\r\n\r\n### If this problem caused an exception or error, please paste it here\r\n\r\n_No response_\r\n\r\n### If the problem is browser-specific, please specify the device, OS, browser, and version\r\n\r\n```true\r\n(likely doesn't matter but it occurs on Chrome 120.0.6099)\r\n```\r\n\r\n\r\n### Provide any additional information here in as much as detail as you can\r\n\r\n_No response_","comments":["I am familiar with the problem you are facing but after finding the \"State Change Expression\" in source code , I founded the line of code which is :\r\n=>  @param stateChangeExpr A string with a specific format or a function that specifies when the\r\n * animation transition should occur (see [State Change Expression](#state-change-expression)).\r\n \r\nafter this I am not getting a way for solution, I can't get the link \"https:\/\/angular.dev\/api\/animations\/transition?tab=api\" ? \r\nAny assistance provided would be highly appreciated!"],"labels":["area: dev-infra","P3","area: adev"]},{"title":"Angular 17 New Control Flow | Allow more than one node at root @if, @else, @for, etc","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nAllow multiple child nodes inside new control flow like bellow\r\n\r\n```html\r\n<app-box>\r\n  @if (selected === 'fish'){\r\n    <span header> Fish <\/span>\r\n    <span main> \ud83d\udc1f \ud83d\udc21 \ud83d\udc19 \ud83d\udc20  <\/span>\r\n  } @else {\r\n    <span header> Mammals <\/span>\r\n    <span main> \ud83e\udd8d \ud83d\udc05 \ud83e\uddac \ud83d\udc2b  <\/span>\r\n  }\r\n<\/app-box>\r\n```\r\n\r\nwithout throwing bellow error\r\n\r\nNode matches the \"[header]\" slot of the \"BoxComponent\" component, but will not be projected into the specific slot because the surrounding @if has more than one node at its root. To project the node in the right slot, you can:\r\n\r\n1. Wrap the content of the @if block in an <ng-container\/> that matches the \"[header]\" selector.\r\n2. Split the content of the @if block across multiple @if blocks such that each one only has a single projectable node at its root.\r\n3. Remove all content from the @if block, except for the node being projected.\r\n\r\nThis check can be disabled using the `extendedDiagnostics.checks.controlFlowPreventingContentProjection = \"suppress\" compiler option.`\n\n### Proposed solution\n\nMake bellow snippet work\r\n\r\n```html\r\n<app-box>\r\n  @if (selected === 'fish'){\r\n    <span header> Fish <\/span>\r\n    <span main> \ud83d\udc1f \ud83d\udc21 \ud83d\udc19 \ud83d\udc20  <\/span>\r\n  } @else {\r\n    <span header> Mammals <\/span>\r\n    <span main> \ud83e\udd8d \ud83d\udc05 \ud83e\uddac \ud83d\udc2b  <\/span>\r\n  }\r\n<\/app-box>\r\n```\n\n### Alternatives considered\n\nSince I am using projections I have to use multiple @if \r\n\r\n```html\r\n<app-box>\r\n@if (selected === 'fish'){\r\n  <span header> Fish <\/span>\r\n}    \r\n@if (selected === 'mammals'){\r\n  <span header> Mammals <\/span>\r\n}\r\n@if (selected === 'fish'){\r\n  <span main> \ud83d\udc1f \ud83d\udc21 \ud83d\udc19 \ud83d\udc20  <\/span>\r\n}\r\n@if (selected === 'mammals'){\r\n  <span main> \ud83e\udd8d \ud83d\udc05 \ud83e\uddac \ud83d\udc2b  <\/span>\r\n}\r\n<\/app-box>\r\n```\r\n\r\nbut this approach is a pain in the *ss, more verbose and less readable","comments":["Hi, this has been discussed in #53477. This is known limitation of content projection. ","This has been discussed when designing the content projection behavior with the new control flow, and there isn't a feasible way to support these cases. It would require splitting the template into multiple embedded views, but this introduces problems where template references cannot be accessed across those distinct embedded views.\r\n\r\nIt becomes more problematic with `@for`, where insertions and deletions of rows would have to be performed to multiple DOM parent nodes.","<!-- 6374bc4f-3ca6-4ebb-b416-250033c91ab5 -->\nThis feature request is now candidate for our backlog! In the next phase, the community has 60 days to upvote. If the request receives more than 20 upvotes, we'll move it to our consideration list.\n\nYou can find more details about the feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process).","<!-- 727acbae-59f4-4cde-b59e-4c9847cabcca -->\nJust a heads up that we kicked off a community voting process for your feature request. There are 20 days until the voting process ends.\n\nFind more details about Angular's feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process)."],"labels":["feature","area: core","core: content projection","feature: votes required"]},{"title":"fix(forms): Multiple formControlName directives using the same FormControl do not stay in sync","body":"When other controls share the same form control reference\r\n\r\nFixes #50957","comments":["I agree in principle that this would be a nice fix, but it's certain to be a significant breaking change (as is frequently the case with Forms changes). I could run a Google global presubmit to find out how bad the breakage is though.","> I agree in principle that this would be a nice fix, but it's certain to be a significant breaking change (as is frequently the case with Forms changes). I could run a Google global presubmit to find out how bad the breakage is though.\r\n\r\nIs there any news on this? \r\n\r\nWe're currently trying to refactor a part of our application that would require this fix. Nothing really pressing, so no need to hurry here, but it would help us out tremendously!"],"labels":["area: forms","forms: directives"]},{"title":"Instructions to deploy on github pages are obsolete","body":"### Describe the problem that you experienced\n\nFollowing the steps at https:\/\/angular.io\/guide\/deployment#deploy-to-github-pages to deploy to github pages leads to a 404 error when trying to access the deployed application.\n\n### Enter the URL of the topic with the problem\n\nhttps:\/\/angular.io\/guide\/deployment#deploy-to-github-pages\n\n### Describe what you were looking for in the documentation\n\nA correct list of instructions to deploy to github pages\n\n### Describe the actions that led you to experience the problem\n\nStep 4 is incorrect since v17, because the CLI now generates the browser files to deploy under a subdirectory `browser`. So instead of having the files directly under the `docs` folder as before, the files are now located under `docs\/browser`.\n\n### Describe what you want to experience that would fix the problem\n\nThe instructions could advise to use the command\r\n\r\n```\r\nng build --base-href \/your_project_name\/\r\n``` \r\n\r\nand then to copy all the content of `dist\/your_project_name\/browser` into the `docs` directory.\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":["@JeanMeche I would like to work on that issue for my first Angular contribution. Could you assign me? Thanks.","@michalgrzegorczyk-dev Feel free to directly drop a PR, thx ! ","I've added a pull request for this \u261d\ufe0f \r\n\r\nI took a slightly different approach than @jnizet suggested and I adjusted the the folder suggested to use as the source directory for GitHub pages.\r\n\r\nIf the other solution is preferred let me know and I can close\/adjust the PR!","Hey everyone,\r\nMaybe we can also create a simple instruction on how to automate such a deploy flow with Github Actions?\r\nWhat do you think @jnizet @NathanLaing?","I am also experiencing this issue.  I can deploy my angular app to Github (several different ways) and Github deploy action passes, but in all cases, the page gets 1 or 2 errors.\r\n$ node -v\r\nv21.6.0\r\n$ npm -v\r\n10.2.4\r\n\r\nI believe the issue has something to do with the new versions of node\/npm putting in the \/browser folder (into dist\/$projectName or into doc folder, when specified).  Then in Github:Pages, after deploying, when you click on the URL, it cannot find index.html because it's not at the root level, it's buried under \/browser.\r\n\r\nIf I move all the files\/folders out of \/browser and up to the parent directory, then I get ERR_NAME_NOT_RESOLVED errors when going to the Github:Pages url.  So, this does not appear to be a good workaround.\r\n\r\nI was able to do this about 3 months ago, on my old computer with older version of node & npm and when there was no \/browser folder and had no issues."],"labels":["help wanted","good first issue","P3","area: docs"]},{"title":"refactor(common): Update event emit in mock to reflect type","body":"The `MockPlatformLocation` includes properties that do not exist on the public type of `LocationChangeEvent`. This commit removes these extra properties.\r\n","comments":[],"labels":["area: common","target: major"]},{"title":"reportProgress not working","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\ncommon\r\n\r\n### Is this a regression?\r\n\r\nYes\r\n\r\n### Description\r\n\r\nAfter upgrading my project to Angular 17, I started not being able to listen to reportProgress. I thought it was related to the backend configuration. When I tried jquery ajax at my local, I was able to listen to the events with xhr.upload. The code is below;\r\n\r\n\r\n\r\n\tconst headers = new HttpHeaders({ 'ngsw-bypass': '' });\r\n\r\n\treturn this.apiService\r\n\t\t.put(\r\n\t\t\tnew ApiCall({\r\n\t\t\t\tapiUrl: payload.files.data.upload_to,\r\n\t\t\t\tpath: '',\r\n\t\t\t\tbody: payload.files.data.file,\r\n\t\t\t\toptions: {\r\n\t\t\t\t\treportProgress: true,\r\n\t\t\t\t\tobserve: 'events',\r\n\t\t\t\t\theaders: headers,\r\n\t\t\t\t},\r\n\t\t\t})\r\n\t\t)\r\n\t\t.pipe(\r\n\t\t\ttakeUntil(this.fileFacade.destroy$),\r\n\t\t\t\/\/ map(() => fileAction.uploadFilesSuccess()),\r\n\t\t\tmap((event: HttpEvent<any>) => {\r\n\t\t\t\tconsole.log(event);\r\n\r\n\t\t\t\tswitch (event.type) {\r\n\t\t\t\t\tcase HttpEventType.UploadProgress:\r\n\t\t\t\t\t\tlet progress = Math.round((event.loaded \/ event.total) * 100);\r\n\t\t\t\t\t\treturn fileAction.setUploadProgress({ percent: progress });\r\n\t\t\t\t\tcase HttpEventType.Response:\r\n\t\t\t\t\t\treturn fileAction.uploadFilesSuccess();\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn fileAction.uploadFilesFail(null);\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tcatchError((err) => of(fileAction.uploadFilesFail(err)))\r\n\t\t);\r\n\r\nThats my api service function;\r\n\r\n\tput(apiCall: IApiCall) {\r\n\t\tapiCall = this.setApiCall(apiCall);\r\n\r\n\t\tconst url = apiCall.getFullPath();\r\n\r\n\t\treturn this.http.put(url, apiCall.body, apiCall.options).pipe(\r\n\t\t\ttap((res: any) => res),\r\n\t\t\tcatchError(this.handleError)\r\n\t\t);\r\n\t}\r\n\r\nWhen it works this way, only event type 0 is returned, regardless of whether the file is large or small. (HttpEventType.Sent)\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\n_No response_\r\n\r\n### Please provide the exception or error you saw\r\n\r\n_No response_\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 17.0.7\r\nNode: 20.9.0\r\nPackage Manager: npm 10.1.0\r\nOS: darwin arm64\r\n\r\nAngular: 17.0.7\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, platform-server\r\n... router, service-worker, ssr\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1700.7\r\n@angular-devkit\/build-angular   17.0.7\r\n@angular-devkit\/core            17.0.0\r\n@angular-devkit\/schematics      17.0.0\r\n@angular\/cdk                    17.0.1\r\n@schematics\/angular             17.0.7\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.2\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\n_No response_","comments":["Are you using the new `withFetch()`  provider ? \r\nFetch doesn't support report progress on uploads. ","Yes, i using `withFetch()` provider. When i removed `provideHttpClient(withFetch())` it's working thank you very much @JeanMeche . Can I make it use `XMLHttpRequest` for only a single request?","How we can use both HttpClient with Xhr and fetchApi as different injection?","You _could_ `provideHttpClient()` without `withFetch()` in a module or a specific component but it is definitly not recommanded. ","I want to use them in a service (when I need file upload with progress report will use without fetch otherwise use withFetch)"],"labels":["area: common\/http"]},{"title":"Proxy config works differently when switching from Webpack to Vite devserver","body":"### Command\n\nserve\n\n### Is this a regression?\n\n- [X] Yes, this behavior used to work in the previous version\n\n### The previous version in which this bug was not present was\n\nAll versions using Webpack as devserver\n\n### Description\n\nWhen using the proxy, and you have a config like this:\r\n\r\n```js\r\n module.exports = {\r\n    '\/api\/*': {\r\n      target: 'localhost:4321',\r\n    }\r\n```\r\n\r\nWith webpack, this will work for _all_ requests starting with `\/api`.\r\nAll of those work:\r\n`\/api\/user`\r\n`\/api\/user\/settings\/personal`\r\n`\/api\/user\/settings\/admin`\r\n\r\nWith the Vite version, only the first level works.\r\nONLY `\/api\/users` will work. The other will fail silently. \r\nThis is because Vite uses a different glob library as WebPack.\r\nFor Vite to work I have to update to:\r\n\r\n```js\r\n module.exports = {\r\n    '\/api\/**': {\r\n      target: 'localhost:4321',\r\n    }\r\n```\r\n> Notice the change from `*` to `**` \r\n\r\nThis behavior change is not documented anywhere.\r\n\r\nThe CLI should have at least some documentation around this. \r\nAlso, would it be constructive to have a way so the Vite proxy will log proxy-misses, as those are now silently ignored? \n\n### Minimal Reproduction\n\n1. Set up a project\r\n2. Add an API-server\r\n3. add a proxy.\r\n\r\nThen run: `ng serve` and notice the above.\n\n### Exception or Error\n\n```text\nnone\n```\n\n\n### Your Environment\n\n```text\nNot relevant to the issue, but here you go:\r\n\r\nAngular CLI: 16.2.6\r\nNode: 20.10.0 (Unsupported)\r\nPackage Manager: npm 10.2.4\r\nOS: linux x64\r\n\r\nAngular: 16.2.10\r\n... animations, common, compiler, compiler-cli, core, forms\r\n... language-service, material, platform-browser\r\n... platform-browser-dynamic, router, service-worker\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1602.6\r\n@angular-devkit\/build-angular   16.2.6\r\n@angular-devkit\/core            16.2.6\r\n@angular-devkit\/schematics      16.2.6\r\n@angular\/cdk                    16.2.8\r\n@angular\/cli                    16.2.6\r\n@angular\/pwa                    16.2.6\r\n@schematics\/angular             16.2.6\r\nrxjs                            7.8.0\r\ntypescript                      5.2.2\r\nzone.js                         0.13.3\n```\n\n\n### Anything else relevant?\n\n_No response_","comments":["The issue lies within webpack-dev-server, which internally alters globs from `\/api\/*` to `\/api\/**`. You can find more context about this in https:\/\/github.com\/webpack\/webpack-dev-server\/issues\/562.\r\n\r\nThe request not being proxied aligns with the expected behavior, as it doesn't match the provided glob. Vite's does not provide a way to log proxy misses as it can be seen here: https:\/\/github.com\/vitejs\/vite\/blob\/5684fcd8d27110d098b3e1c19d851f44251588f1\/packages\/vite\/src\/node\/server\/middlewares\/proxy.ts#L123C9-L137C10\r\n\r\nOverall, I am okay with adding a one liner in the esbuild guide explaining this behaviour."],"labels":["help wanted","P3","area: adev","area: docs"]},{"title":"Cannot use $localize or i18n-attribute for [input] attributes","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\nlocalize\n\n### Description\n\nWhen we have attributes to localize like `<input placeholder=\"Name\">` we can do it with `<input i18n-placeholder placeholder=\"Name\">`.\r\nWhen we have strings in component code, we can do \r\n```\r\nvar Name = $localize `James Bond`;`\r\n```\r\n\r\nBut, there is no solution to when we have `<input [placeholder]=\"'Meeting with '+ {{Name}}\">`\n\n### Proposed solution\n\nEither allow `i18n-placeholder`, or `i18n-[placeholder]` or\r\n```\r\n<input [placeholder]=\"$localize `Meeting with ` + {{Name}}\">\r\n```\n\n### Alternatives considered\n\nI tried  `i18n-placeholder` but it doesn't extract anything.\r\nI tried `i18n-[placeholder]` but it doesn't extract anything.\r\nI tried \r\n```\r\n<input [placeholder]=\"$localize `Meeting with ` + {{Name}}\">\r\n```\r\nbut it throws an error \r\n```\r\nParser Error: Unexpected token 'Lexer Error: Unexpected character [`]\r\n```","comments":[],"labels":["area: i18n"]},{"title":"fix(devtools): small design fixes","body":null,"comments":["I couldn't find where to change the size of the arrows (they are big and take a lot of screen size, by making them shorter, we can show more nodes on the screen)\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/25394362\/de79018f-7fbd-4830-a904-1e1b5a4c3138)\r\n\r\nOne other thing I wanted to add is the option to switch from horizontal to vertical. I saw the component already has an input for it, so I think adding the option should be straightforward. Should I add it?","I agree, the Angular DevTools seem a bit cluttered sometimes, especially when having lots of nodes f.x. < 20. Your improvement looks good, maybe you can also add the horizontal\/vertical switcher option and upload a screenshot of the improvement? \ud83e\udd1f\ud83c\udffb "],"labels":["action: review","target: patch","area: devtools"]},{"title":"New `@async` block","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncore\n\n### Description\n\nBecause nobody responded to the second comment on my last feature request Im opening a new one to get an opinion about it.\r\n\r\nI also read the [blog post](https:\/\/blog.angular.io\/use-angulars-new-deferrable-views-now-20ca9f64f1e5) about deferrable views, especially the last part \"[Looking to the future](https:\/\/blog.angular.io\/use-angulars-new-deferrable-views-now-20ca9f64f1e5#9bef)\", which mentions that the community is interested in combining defer with data fetching.\r\nIm definitely interested in this, so heres my idea:\r\n\r\nA new `@async` block that essentially works like the async pipe, but with additional support for the `@loading` and `@error` blocks.\r\n\r\nAnd to be clear, this wouldnt lazy load used components, but would simply load them normally. For that purpose Ive been thinking about a new trigger for the `@defer` block: `on fetch`, but thats probably a topic for another feature request.\n\n### Proposed solution\n\n```js\r\n@async (entries; as results) {\r\n  @for (entry of results; track entry.id) {\r\n    <p>{{ entry.title }}<\/p>\r\n  } @empty {\r\n    <p>No entries<\/p>\r\n  }\r\n} @loading (minimum 200ms) {\r\n  <p>Loading<\/p>\r\n} @error {\r\n  <p>Something went wrong<\/p>\r\n}\r\n```\n\n### Alternatives considered\n\nhttps:\/\/github.com\/angular\/angular\/issues\/53185","comments":["Are you thinking of it as an alternative to the async pipe, in the sense that it takes observables as input? In that case, what would @loading do? It seems to only make sense for resolving promises, and not observables.","> Are you thinking of it as an alternative to the async pipe, in the sense that it takes observables as input? In that case, what would @Loading do? It seems to only make sense for resolving promises, and not observables.\r\n\r\nWhy? Right now async pipe always add `| null` to type as `async` pipe can wait for observable to emit. But I would actually extend this syntax with` $completed` \r\n```html\r\n@async (entries; as results; let completed = $completed; ) {\r\n  @for (entry of results; track entry.id) {\r\n    <p>{{ entry.title }}<\/p>\r\n  } @empty {\r\n    <p>No entries<\/p>\r\n  }\r\n  @if(completed) {\r\n     <p> There will be no more updates!<\/p>\r\n  } @else {\r\n     <p> There can be new update coming in! Buckle up! <\/p>\r\n  }\r\n} @loading (minimum 200ms) {\r\n  <p>Loading<\/p>\r\n} @error {\r\n  <p>Something went wrong<\/p>\r\n}\r\n```\r\n\r\nThis is coming from [NgRx Let pipe](https:\/\/ngrx.io\/guide\/component\/let). One diffrence is that they use `suspense` terminology instead of `loading`.\r\n\r\nOf course `@async` could work 1:1 for `Promise` as well!\r\n\r\nOne question is if Angular Devs don't want to cut off templating from RxJs and stear people more into using `toSignal()`  and of course if signal is used then we get benefits of more granural change detection! \r\nSo in the end I think `@async` seams great but only for people sticking in with RxJs or wanting cleaner syntax in large, hard to port RxJs based repo.   ","<!-- 6374bc4f-3ca6-4ebb-b416-250033c91ab5 -->\nThis feature request is now candidate for our backlog! In the next phase, the community has 60 days to upvote. If the request receives more than 20 upvotes, we'll move it to our consideration list.\n\nYou can find more details about the feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process).","This is exactly what I am looking forwards to as well, something similar to the Suspense block in SolidJS and exposes other blocks such as @loading, @error, @placeholder (similar to @defer, but purely for data-fetching).\r\n\r\nThe signal\/promise\/observable (most likely signal) bound to this @async\/@suspense block should expose the error object thrown by the data fetch for displaying relevant error messages in error block too","You also need to think about data that is requested multiple times. For example, if the user changes some form value, the download must be restarted. This can be implemented by having @async accept a signal or thread with requests:\r\n\r\n```js\r\n@async (entries(); let result = $result) {\r\n  ...\r\n}\r\n``` \r\n\r\n```js\r\n@async ((entries$ | async); let result = $result) {\r\n  ...\r\n}\r\n``` "],"labels":["feature","area: core","feature: under consideration"]},{"title":"fix(compiler): adjust the process of finding named entities","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [x] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #51323 \r\n\r\nAs described in the issue, the compiler can't find named entities that do not end with `;` and contain digits, you can see some examples of this type of named entities in the print presented at the issue or at the [HTML spec for named entities](https:\/\/html.spec.whatwg.org\/multipage\/named-characters.html).\r\nRight now the process to find a named entity states that it will always start with the character `&` and end with the character `;`, so it will get all the text between those two characters and check if it exists in the entities hash map, if so, it will consider it as an entity and add the associate character, otherwise it will consider the character `&` as a normal text and continues with the flow.\r\n\r\n## What is the new behavior?\r\n\r\nWith my proposal, we have these criterias for named entities:\r\n1. An entity will always start with the character `&`\r\n2. They have a maximum length (this will be calculated dynamically, it isn't hard-coded, it iterates over the entities hash map and finds the largest named entity and returns its length)\r\n3. The only valid characters are: `&`, `;`, `a-b`, `A-B` or `0-9`\r\n4. When finds a character `;` will not consider any further characters as part of the named entity, it will end the search\r\n\r\nSo when we find an `&` character, we iterate over each character until it doesn't meet the criterias above, and compare the string to the entities hash map to see if we have a match\r\n\r\n**Ex 1:**\r\n**Input:** `&amp`\r\n`&`      **->** We found the start of a possible entity, let's iterate over the next characters to see if it's a named entity.\r\n`&a`     **->** Doesn't match with any named entity but still pass the criterias, so let's move to next character.\r\n`&am`    **->** Doesn't match with any named entity but still pass the criterias, so let's move to next character.\r\n`&amp`   **->** Matches with the named entity `&amp`, it has no more characters left so we consider this match as the named entity and associate the mapped character to it.\r\n\r\nHowever, we need to consider that we can have more than one match within the process, in this case we need to consider the longest match as the final named entity.\r\n\r\n**Ex 2:**\r\n**Input:** `&amp;`\r\n`&`      **->** We found the start of a possible entity, let's iterate over the next characters to see if it's a named entity.\r\n`&a`     **->** Doesn't match with any named entity but still pass the criterias, so let's move to next character.\r\n`&am`    **->** Doesn't match with any named entity but still pass the criterias, so let's move to next character.\r\n`&amp`   **->** Matches with the named entity &amp, there are still characters left so we consider this as the possible match for the named entity and move to the next character.\r\n`&amp;` **->** Match with the named entity `&amp;`, it has no more characters left, but we have found two named entities: `&amp;` and `&amp`, we will consider the largest match as the final one and associate the mapped character to it(`&amp;`).\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":[],"labels":["area: compiler"]},{"title":"Angular.dev: Describe when you need to use `overrideComponent` vis a vis nested component tests","body":"### Describe the problem that you experienced\r\n\r\nIn the beta docs, there is a lovely section on shallow testing of components containing other components [here](https:\/\/angular.dev\/guide\/testing\/components-scenarios#nested-component-tests)\r\n\r\nI was trying to accomplish this very task and followed the docs, but I couldn't understand why my Stub component imports weren't working. I determined that it was because by parent component was standalone and importing the child components directly. I did eventually get this working by using the `overrideComponent` method, however the docs made it seem like that wasn't needed in this case.\r\n\r\nThere is [a later section](https:\/\/angular.dev\/guide\/testing\/components-scenarios#override-component-providers) all about the needed method, so I think that the nested component tests section should mention that this might be necessary and link to the later section for the full details. \r\n\r\n### Enter the URL of the topic with the problem\r\n\r\nhttps:\/\/angular.dev\/guide\/testing\/components-scenarios#nested-component-tests\r\n\r\n### Describe what you were looking for in the documentation\r\n\r\nI was looking for the preferred way to do shallowing testing of standalone components.\r\n\r\n### Describe the actions that led you to experience the problem\r\n\r\nI implemented stub components like the angular.dev page example and used them in `configureTestingModule` rather than `overrideComponent`. This led to the tests breaking due to missing providers needed in the child components. The error message itself wasn't helpful as I thought that following the example this way would replace the real component with the stub versions and I was at a loss as to why that wasn't working.\r\n\r\n### Describe what you want to experience that would fix the problem\r\n\r\nI want the page to be updated to describe when and why it is necessary to use stubs in `configureTestingModule` vs `overrideComponent`\r\n\r\n### Add a screenshot if that helps illustrate the problem\r\n\r\n_No response_\r\n\r\n### If this problem caused an exception or error, please paste it here\r\n\r\n_No response_\r\n\r\n### If the problem is browser-specific, please specify the device, OS, browser, and version\r\n\r\n_No response_\r\n\r\n### Provide any additional information here in as much as detail as you can\r\n\r\n```true\r\nThanks for the awesome new site! :)\r\n```\r\n","comments":["Generally superseded by https:\/\/github.com\/angular\/angular\/issues\/48510. This guide hasn\u2019t been updated in quite some time and could use a complete rewrite. This includes guidance around stubbing components, which should be more of a footnote than an encouraged practice. "],"labels":["P4","area: adev","area: docs"]},{"title":"replaceUrl not preserved in redirect","body":"### Which @angular\/* package(s) are the source of the bug?\n\nrouter\n\n### Is this a regression?\n\nYes\n\n### Description\n\nIf I call `router.navigate` with `replaceUrl: true`, and if I have a `CanActivateFn` that returns a `UrlTree`, the resulting redirect loses the `replaceUrl` setting.\r\n\r\nThe relevant code is here:\r\n\r\nhttps:\/\/github.com\/angular\/angular\/blob\/e3a6bf9b6c3bef03df9bfc8f05b817bc875cbad6\/packages\/router\/src\/router.ts#L196-L201\r\n\r\nI can fix the issue by using `replaceUrl` setting if it's defined:\r\n\r\n```ts\r\nconst extras = {\r\n  \/\/ ...\r\n  replaceUrl: currentTransition.extras.replaceUrl ?? (this.urlUpdateStrategy === 'eager' ||\r\n  isBrowserTriggeredNavigation(currentTransition.source))\r\n};\r\n```\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/stackblitz.com\/edit\/stackblitz-starters-ih775l?file=src%2Fmain.ts\n\n### Please provide the exception or error you saw\n\n```true\nIn the demo app I provided, when you click \"Replace: Baz -> Bar\", you should see \"replace: \/bar\" in the history, but instead you just see \"\/bar\".\n```\n\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\n\"dependencies\": {\r\n  \"rxjs\": \"7.8.1\",\r\n  \"tslib\": \"2.6.2\",\r\n  \"zone.js\": \"0.14.2\",\r\n  \"@angular\/core\": \"17.0.6\",\r\n  \"@angular\/forms\": \"17.0.6\",\r\n  \"@angular\/common\": \"17.0.6\",\r\n  \"@angular\/router\": \"17.0.6\",\r\n  \"@angular\/compiler\": \"17.0.6\",\r\n  \"@angular\/animations\": \"17.0.6\",\r\n  \"@angular\/platform-browser\": \"17.0.6\"\r\n},\n```\n\n\n### Anything else?\n\n_No response_","comments":["Indeed, this is also true of all the other properties in `NavigationBehaviorOptions`. Based on the comment here https:\/\/github.com\/angular\/angular\/issues\/27148#issuecomment-442265173, it seems like this was considered but not done. This was before my time as the router caretaker. I noticed this when adding the `info` and `browserUrl` properties and decided the properties _should_ be carried over by default.\r\n\r\nChanging this behavior would need to land in a major version. We would also need to do some preliminary tests to determine how breaking it is and decide if the change is worth making based on the results.","I ran tests inside google and found that updating `replaceUrl` value to be carried over for the redirect [passed all tests](https:\/\/fusion2.corp.google.com\/presubmit\/587142060\/OCL:587142060:BASE:587110432:1701498674956:caf6af67\/targets). This change should be easy to land for v18.","Hi, @atscott I have pushed a pull request for this, please let me know if it needs any changes."],"labels":["breaking changes","area: router","P3"]},{"title":"ngIf with animation, nested in ngFor, create clones of itself, when item is reordered \"upwards\"","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\nanimations\r\n\r\n### Is this a regression?\r\n\r\n?\r\n\r\n### Description\r\n\r\nThe following code template malfunction when the `ngIf` item is \"moved\" \"upwards\" in the `ngFor` list (but not downwards).\r\n\r\n``` html\r\n<div *ngFor=\"let item of list$ | async; trackBy: trackFn\">\r\n  <div class=\"item\">\r\n    {{ item.text }}\r\n    <div *ngIf=\"item.id === openItem()\" [@State] class=\"sub-content\">\r\n      {{ item.text }} content\r\n    <\/div>\r\n  <\/div>\r\n<\/div>\r\n```\r\n\r\nThis error happens when the `trackBy` function return the `ngFor` item id. And the nested `ngIf` element has an animation.\r\n\r\nPlease see below in the video:\r\n[2023-12-11 14-19-04.webm](https:\/\/github.com\/angular\/angular\/assets\/7062803\/43b9150b-5f2d-4214-bb4e-db55131cf76c)\r\n\r\nThe end state in the video is shown in the image below, the template code pasted above generates two extra divs, one for each move \"upwards\".\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/7062803\/6e392ce6-52ea-4680-8508-24502d2f9211)\r\n\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\nhttps:\/\/stackblitz.com\/edit\/hswtny?file=src%2Fexample%2Flist-overview-example.html\r\n\r\n### Please provide the exception or error you saw\r\n\r\n_No response_\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular 17.0.6, in stackblitz\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\nThe video wrongly shows \"Current build: 17.0.3\", it is 17.0.6.","comments":["I am currently looking at this issue and so far I have noticed the following: If you look at the function \"_signalRemovalForInnerTriggers\" of \"AnimationTransitionNamespace\", you will notice that during \"move down\" the function is not executed. However, the function is called during \"move up\". The function then calls \"clearElementCache\" for all the children, which deletes the state of the child element. Is there something we can check to make sure if we actually want to clear the child elements cache? Not sure if I'm on the right path here.\r\n\r\nCould this be a fix?:\r\n```typescript\r\n\/\/ If the child elements were removed along with the parent, their animations might not\r\n\/\/ have completed. Clear all the elements from the cache so we don't end up with a memory leak.\r\nthis._engine.afterFlushAnimationsDone(() => elements.forEach(elm => {\r\n  if (elm[REMOVAL_FLAG]) return;\r\n  this.clearElementCache(elm);\r\n}));\r\n```","I have updated Angular to 17.2.1 in the example and the issue still exists.\r\n@dominicbachmann thanks for checking this.","@anthonn I think someone of the Angular Team should have a look at this. I don't have enough knowledge of the codebase to make a proper assessment of this issue."],"labels":["area: animations","P3","bug"]},{"title":"Signals for Reactive and Template-based Forms","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\nforms\r\n\r\n### Description\r\n\r\nWhile the current forms module already supports reactivity using `valueChanges` and `statusChanges` and we can use RxJS \/ Signal interoperability helpers to work with signals in our reactive forms, there's still quite a gap when it comes to form handling with the new signal API.\r\n\r\nWhile I believe that a complete rewrite of the Forms Module that is more aligned to the simplistic API design of signals, inject helper and signal-based component helper and is also purely based on signals for any form state, I also think that this requires a lot of time to rethink and build. I like the proposal of @ShacharHarshuv https:\/\/github.com\/angular\/angular\/issues\/51786, and it provides some good ideas about a simplistic API aligned to signals. However, there are still many things to consider (custom control values that are non-primitives and can cause confusion with groups (TValue first vs TControl first discussion in Typed forms discussion).\r\n\r\nIn the meantime, it would be great to have some updates to the existing form modules that would allow us to work with signal-based state when handling forms. Also, it would be great to expose any form-based state as reactive values contrary to the sometimes limited `valueChanges` and `statusChanges`. This would allow the combination of form state using `computed` and the execution of side-effects using `effect` to fulfil many form handling use cases.\r\n\r\n### Proposed solution\r\n\r\nThe proposed solution is to include signals for all relevant form states within `AbstractControl` and update them whenever the local state of the form controls gets updated. This way, developers can benefit from the new reactive form state in both reactive and template-driven forms since NgForm \/ NgModel uses `AbstractControl` under the hood. This is a feasible and non-intrusive alternative before a possible rewrite of the Form Module.\r\n\r\nWithin this proposal, the signals of `AbstractControl` that represent the form controls state are grouped within a new `signals` object inside `AbstractControl`. This allows the regular form state and signals to coexist without causing name clashes or overcomplicated lengthy prefixes. This also encourages the extraction of specific signals using destructuring `const {value, valid} = myControl.signals;`.\r\n\r\nFor template-driven forms using `NgForm` and `NgModel`, the current idea is to provide a way to inject your signals from your component into the controls using `ngFormOptions` and `ngModelOptions`. Since the developer does not have control over the form control creation in template-driven forms, that's the simplest way to connect forms created within the template to some signals within your component. An alternative idea would be to obtain the `NgModel` directive within the component using `ViewChild` and then receive the signals from the exposed control. However, that would require you to wait for `AfterViewInit` or even `AfterViewChecked`, and this would compromise the declarative approach, which is possible by passing manually created signals into the controls.\r\n\r\nTo provide the necessary convenience to use external form control signals, I've added a helper function, `createFormSignals`. In the current version of the PR, I'm also experimenting with making the `value` signal a WritableSignal. This way, in the most simple way to use this proposal in conjunction with NgModel \/ NgForm, the value signal can be used to update the form value programmatically from within the component. Currently, this is done via an effect inside abstract control, and a lot of testing needs to be done to make this robust enough and ensure a consistent state while not causing any loops.\r\n\r\n```typescript\r\n@Component({\r\n  selector: 'app-capacity',\r\n  standalone: true,\r\n  imports: [ReactiveFormsModule],\r\n  template: `\r\n    <p>Reservations: {{reservations()}}<\/p>\r\n    <p>Capacity: <input type=\"number\" [formControl]=\"capacity\" \/><\/p>\r\n  `\r\n})\r\nexport class CapacityComponent {\r\n  capacity = new FormControl(5, {nonNullable: true});\r\n  reservations = signal(0);\r\n  interval = setInterval(() => this.reservations.update(count => count + 1), 1000);\r\n  hasCapacity = computed(() => this.capacity.signals.value() > this.reservations());\r\n  capacityEffect = effect(() => console.log(this.hasCapacity() ? 'We have some capacity!' : 'No capacity!'));\r\n}\r\n```\r\n\r\nThis simple example with reactive forms shows that even when `FormControl` does not natively use signals, we still benefit from the newly exposed signals object and can create larger reactive constructs quite declaratively.\r\n\r\nWith template-driven forms, we can achieve similar reactive handling by using the `ngFormOptions` and `ngModelOptions` directive inputs. Since NgModel or NgForm model binding is optional, the existing template-driven forms can become the default tool when creating signal-based forms with this proposal.\r\n\r\n```typescript\r\n@Component({\r\n  selector: 'app-simple-template',\r\n  standalone: true,\r\n  imports: [FormsModule],\r\n  template: `\r\n    <input type=\"text\" reqired ngModel [ngModelOptions]=\"{signals: searchQuery}\" \/>\r\n    <div>Results: {{results()}}<\/div>\r\n  `\r\n})\r\nexport class SimpleTemplateComponent {\r\n  searchService = inject(SearchService);\r\n  searchQuery = createFormSignals('');\r\n  results = signal([] as string[]);\r\n  searchEffect = effect(async () => {\r\n    if (this.searchQuery.value().length > 3) {\r\n      this.results.set(await lastValueFrom(this.searchService.search(this.searchQuery.value())));\r\n      \/\/ Use the writable value signal to update the form programmatically (currently experimenting with this)\r\n      this.searchQuery.value.set('');\r\n    }\r\n  }, {allowSignalWrites: true});\r\n}\r\n```\r\n\r\nOr a little more complex template-driven form:\r\n\r\n```typescript\r\n@Component({\r\n  selector: 'app-signal-based-form',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  template: `\r\n    <form #form=\"ngForm\" [ngFormOptions]=\"{signals}\">\r\n      <label>\r\n        First Name:\r\n        <input type=\"text\" required name=\"firstName\" ngModel\/>\r\n      <\/label>\r\n      <label>\r\n        Last Name:\r\n        <input type=\"text\" name=\"lastName\" ngModel\/>\r\n      <\/label>\r\n\r\n      <p>Full name: {{ fullName() }}<\/p>\r\n      @if (showErrors()) {\r\n        <p>Form contains errors<\/p>\r\n      }\r\n      <button (click)=\"updateFormValue()\">Update form<\/button>\r\n    <\/form>\r\n  `,\r\n})\r\nexport class SignalBasedFormComponent {\r\n  signals = createFormSignals({ firstName: '', lastName: '' });\r\n  fullName = computed(\r\n    () => `${this.signals.value().firstName} ${this.signals.value().lastName}`\r\n  );\r\n  showErrors = computed(\r\n    () => this.signals.invalid() && this.signals.dirty()\r\n  );\r\n  logFullname = effect(() => {\r\n    console.log(`Full name: ${this.fullName()}`);\r\n  });\r\n  updateFormValue() {\r\n    this.signals.value.set({\r\n      firstName: 'Bob',\r\n      lastName: 'Smith'\r\n    });\r\n  }\r\n}\r\n```\r\n\r\nI've created a draft PR with the changes required for this new feature. The draft PR does not contain any tests, no documentation and probably has a few bugs. https:\/\/github.com\/angular\/angular\/pull\/53481\r\n\r\nI've also published the forms module containing those changes to a temporary NPM package and included it in a stackblitz for you to play around: https:\/\/stackblitz.com\/edit\/stackblitz-starters-uyjg2x?file=src%2Freactive-form.component.ts,src%2Ftemplate-driven-form-signals-option.component.ts,src%2Ftemplate-driven-form.component.ts,src%2Fsignal-based-forms.component.ts\r\n\r\nI would love to hear your feedback, thoughts and ideas!\r\n\r\nCheers\r\nGion\r\n\r\n### Alternatives considered\r\n\r\nn\/a","comments":["I think it's a great way to ship the benefits of signals to Angular forms quickly. I also agree that there might be a place to completely rethink forms in Angular, and simplify the DX around them. (Like in [my proposition](https:\/\/github.com\/angular\/angular\/issues\/51786))","I have just updated the proposal to include a more streamlined way to create form signals for use in NgForm and NgModel. I've also experimentally included that `value` is now a `WritableSignal` on `AbstractControlSignals`. The examples are updated, and so are the NPM library and Stackblitz."],"labels":["area: forms","cross-cutting: signals"]},{"title":"BUG: syntax coloring for new block syntax, not working with Allman formatting","body":"### Which @angular\/* package(s) are the source of the bug?\n\nlanguage-service\n\n### Is this a regression?\n\nYes\n\n### Description\n\nFollowing syntax is not colored correctly\r\n\r\n```\r\n@if(cond)\r\n{\r\n}\r\n@else\r\n{\r\n}\r\n```\r\n\r\nalso for \r\n```\r\n@for(x of xxx; track x)\r\n{\r\n}\r\n@empty\r\n{\r\n}\r\n```\r\n\r\nFirst block is colored that is ok, but second block is always as plain white text.\r\n\r\nThis is regression, because first version of new block syntax coloring (last beta or first rc, dont remember exactly) was working correctly. This is valid syntax that works, just is not colored correctly. \r\n\r\nSince it was working i dont think that there is any reason why it should not work anymore.\r\n\r\nThank you.\n\n### Please provide a link to a minimal reproduction of the bug\n\n_No response_\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular: 17.0.6\r\nNode: 18.17.1\r\nNPM: 9.6.7\r\nAngular Language Service VSCode Extension: 17.0.3\n```\n\n\n### Anything else?\n\n_No response_","comments":["Unfortunately this is a trade off we had to make. See the context here: https:\/\/github.com\/angular\/vscode-ng-language-service\/commit\/075047ae31fefddc77364b466484dc825f192cec\r\n\r\nClosing as working as expected. ","Actually I\u2019m going to reopen until we\u2019re sure this is the trade off we want.\r\n\r\n Another option here would be to make the syntax highlighting work on the specific block names we support today. This would mean a small bit of extra maintenance burden with needing to keep the syntax highlighting up to date with the block names but it\u2019s quite trivial. It could be a better option, at least for the moment while there\u2019s a limited set of block types with no new ones on the roadmap. "],"labels":["area: language-service","bug"]},{"title":"feat(forms): WIP \/ Proposal, signals in reactive and template driven forms","body":"# This Draft PR proposes adding signals to reactive and template-driven forms. The goal is to collect feedback from the community and the core team.\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\nCurrently, Angular forms don't support signals natively. Although through AbstractFormControl, valueChanges and statusChanges can be used together with reactive helpers to extract signals, there are certain drawbacks with this approach:\r\n- No native feel\r\n- Boilerplate to convert observables to signals\r\n- Reactivity was always only partially provided with reactive forms (only values and status changes, not raw values and control state changes like pristine, touched, etc.)\r\n- Provided the simplicity of the new reactive primitives, it's highly desirable to add a template-driven simple form approach that is backed up with a powerful but straightforward reactive concept.\r\n\r\n\r\n## What is the new behavior?\r\n- Form controls expose additional signals for each relevant control state, grouped by a new `signals` property on the control objects.\r\n- By default, signals are created internally and can be accessed through the control object `control.signals.value()`. This allows a side-by-side existence with the previous regular form state handling.\r\n- In ngForm \/ ngModel based forms, we can't govern the form control creation. Therefore, a different approach was used to pass a new optional signals option to ngFormOptions and ngModelOptions. Using that approach, developers can create their signals in the component and pass them to the template-driven form directives, where they will be added to the respective controls.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n# Examples\r\n## Signal-based forms (template-driven forms with signals for reactivity)\r\n```typescript\r\nimport { CommonModule } from '@angular\/common';\r\nimport { Component, computed, effect, signal } from '@angular\/core';\r\nimport { AbstractControlSignals, FormsModule } from 'angular-signal-forms';\r\n\r\n@Component({\r\n  selector: 'app-signal-based-form',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  template: `\r\n    <h1>Simple template driven signal-based form<\/h1>\r\n    <form #form=\"ngForm\" [ngFormOptions]=\"{signals}\">\r\n      <label>\r\n        First Name:\r\n        <input type=\"text\" required name=\"firstName\" ngModel\/>\r\n      <\/label>\r\n      <label>\r\n        Last Name:\r\n        <input type=\"text\" name=\"lastName\" ngModel\/>\r\n      <\/label>\r\n\r\n      <p>Full name: {{ fullName() }}<\/p>\r\n      @if (showErrors()) {\r\n        <p>Form contains errors<\/p>\r\n      }\r\n    <\/form>\r\n  `,\r\n})\r\nexport class SignalBasedFormComponent {\r\n  signals = {\r\n    invalid: signal(false),\r\n    dirty: signal(false),\r\n    value: signal({ firstName: '', lastName: '' })\r\n  } satisfies Partial<AbstractControlSignals<{firstName: string; lastName: string}>>;\r\n  fullName = computed(\r\n    () => `${this.signals.value().firstName} ${this.signals.value().lastName}`\r\n  );\r\n  showErrors = computed(\r\n    () => this.signals.invalid() && this.signals.dirty()\r\n  );\r\n  logFullname = effect(() => {\r\n    console.log(`Full name: ${this.fullName()}`);\r\n  });\r\n}\r\n```\r\n\r\nYou can check out this Stackblitz with the updated Angular Forms package:\r\nhttps:\/\/stackblitz.com\/edit\/stackblitz-starters-uyjg2x?file=src%2Freactive-form.component.ts,src%2Ftemplate-driven-form-signals-option.component.ts,src%2Ftemplate-driven-form.component.ts,src%2Fsignal-based-forms.component.ts\r\n\r\nPlease let me know your feedback on this idea \/ proposal.\r\n\r\nCheers\r\nGion\r\n","comments":[],"labels":["detected: feature"]},{"title":"docs(changelog): remove duplicate mutate removal entry in 17.0.0","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [x] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\nCurrently an entry about `mutate` removal in `17.0.0` changelog is duplicated.\r\n\r\nIssue Number: N\/A\r\n\r\n\r\n## What is the new behavior?\r\nDuplication is no more.\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n","comments":["Thanks for your pull request! It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n\nView this [failed invocation](https:\/\/github.com\/angular\/angular\/pull\/53471\/checks?check_run_id=19477288226) of the CLA check for more information.\n\nFor the most up to date status, view the checks section at the bottom of the pull request.","This is the changelog not a documentation page. It's not ment to be amended. ","@JeanMeche do you mind me asking if this duplication is to stay in changelog forever then?\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/5000549\/03ff2447-3fae-4348-8da9-2083f7effcb5)\r\n"],"labels":["area: docs"]},{"title":"Update README.md with improved formatting and grammar and instructions","body":"## PR Checklist\r\nPlease ensure that your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines, as detailed in [CONTRIBUTING.md](https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit).\r\n- [ ] Tests have been added for the changes (for bug fixes\/features).\r\n- [] Docs have been added\/updated (for bug fixes\/features).\r\n\r\n## PR Type\r\nPlease specify the type of change this PR introduces:\r\n\r\n<!-- Check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [x] Refactoring (no functional changes, no API changes)\r\n- [ ] Build-related changes\r\n- [ ] CI-related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application\/infrastructure changes\r\n- [ ] Other... (Please describe)\r\n\r\n## Current Behavior\r\nPlease describe the current behavior that you are modifying or link to a relevant issue.\r\n\r\nIssue Number: N\/A\r\n\r\n## New Behavior\r\nPlease describe the new behavior introduced by this PR.\r\n\r\n## Breaking Change\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf this PR contains a breaking change, please describe the impact and provide a migration path for existing applications below.\r\n\r\n## Other Information","comments":[],"labels":["action: review","target: patch","area: docs"]},{"title":"Defer: add UX and accessibility considerations","body":"### Describe the problem that you experienced\r\n\r\nThe new `defer` block is a great feature which can help to create a better user experience.\r\nHowever, using defer, can have a negative impact in terms of accessibility since screenreaders focusing on a deferred part of the UI will read out the placeholder or loading block first and won\u2019t probably notice the changes once the deferred component ist loaded and rendered.\r\nThis isn\u2019t a problem angular has solve but it should kept in mind when using it.\r\n\r\n### Enter the URL of the topic with the problem\r\n\r\nhttps:\/\/angular.dev\/guide\/defer\/  AND https:\/\/angular.dev\/best-practices\/a11y\r\n\r\n### Describe what you were looking for in the documentation\r\n\r\nI was looking for a hint of how defer influences the accessibility.\r\n\r\n### Describe the actions that led you to experience the problem\r\n\r\nUsing a screenreader and let it read out the focused deferred part. It won\u2019t notice any changes if not wrapped in an `aria-live` region.\r\n\r\n### Describe what you want to experience that would fix the problem\r\n\r\nI suggest to add a hint or best practice section to the docs which faces this problem (use `aria-live=\"polite\"`)\r\n\r\n### Add a screenshot if that helps illustrate the problem\r\n\r\n_No response_\r\n\r\n### If this problem caused an exception or error, please paste it here\r\n\r\n_No response_\r\n\r\n### If the problem is browser-specific, please specify the device, OS, browser, and version\r\n\r\n_No response_\r\n\r\n### Provide any additional information here in as much as detail as you can\r\n\r\n**Example without `aria-live`:**\r\n\r\n```html\r\n<p>\r\n@defer (on timer(10000)) {\r\n  <ngx-lipsum [config]=\"config\"><\/ngx-lipsum>\r\n} @placeholder() {\r\n  <!\u2014- only this part is announced to the screenreader as shown first -\u2014>\r\n  Placeholder...\r\n} @loading(minimum 1000) {\r\n  Loading...\r\n} @error {\r\n  Error...\r\n}\r\n<\/p>\r\n```\r\n\r\n**Example with `aria-live`:**\r\n\r\n```html\r\n<p aria-atomic=\"true\" aria-live=\"polite\">\r\n@defer (on timer(10000)) {\r\n  <!\u2014- announced third -\u2014>\r\n  <ngx-lipsum [config]=\"config\"><\/ngx-lipsum>\r\n} @placeholder() {\r\n  <!\u2014- announced first -\u2014>\r\n  Placeholder...\r\n} @loading(minimum 1000) {\r\n  <!\u2014- announced second -\u2014>\r\n  Loading...\r\n} @error {\r\n  <!\u2014- announced on error -\u2014>\r\n  Error...\r\n}\r\n<\/p>\r\n```\r\n\r\n","comments":["Note: I tested it using Voice Over on macOS."],"labels":["P2","Accessibility","area: docs"]},{"title":"Reassign error codes for runtime dependencies","body":"## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nTwo error codes in the angular\/core package incorrectly use error codes 1000 and 1001, which should be used for the reserved range in the angular\/forms package.\r\n\r\n```txt\r\nError code ranges per package:\r\n - core (this package): 100-999\r\n - forms: 1000-1999\r\n - common: 2000-2999\r\n - animations: 3000-3999\r\n - router: 4000-4999\r\n - platform-browser: 5000-5500\r\n ```\r\n\r\n\r\nIssue Number: #53433 \r\n\r\n\r\n## What is the new behavior?\r\n\r\nThis PR reassigns the error codes for RUNTIME_DEPS_INVALID_IMPORTED_TYPE and RUNTIME_DEPS_ORPHAN_COMPONENT from 1000 and 1001 to 950 and 951, to align with the reserved range for the core package.\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n\r\nClose #53433 ","comments":["Hi, thanks for helping us with that change ! \r\n\r\nWe also need to update our api golden files. Can you run `yarn bazel run \/\/packages\/core:core_errors.accept` and amend your commit ? ","Could you please squash your commits into one and make sure the remaining one has a `refactor(core): ....` commit message. \r\n\r\nThx for the help ! ","Hey @JeanMeche,\r\nI squashed the commits, should be ready now. \ud83d\ude80 ","Hey, can you drop that merge commit ? We'd like the change to be a single commit ! ","Hey, yeah is squashed. \ud83d\ude09 ","It looks like there is a conflict now, care to have a look at it ? ","@JeanMeche somehow me idiot closed the PR when squashing, now had to reopen to fix the merge conflicts. \ud83e\udd96 ","We're almost there ! \r\n\r\nOur commit [message guidelines](https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit) require a body of at least 20chars. Could you amend your commit message to comply to the guidelines ? Thx  !  ","Thanks for reminding me. \u2764\ufe0f ","I noticed a merge conflict from main branch where new error codes in the close range, but with `-` operators, have been added. I fixed merge conflict and just kept it that way:\r\n\r\n```ts\r\n<<<<<<< 53433-fix-error-code-beyond-expected-range\r\n    RUNTIME_DEPS_INVALID_IMPORTED_TYPE = 950,\r\n=======\r\n    REQUIRED_MODEL_NO_VALUE = -952,\r\n    \/\/ (undocumented)\r\n    REQUIRED_QUERY_NO_VALUE = -951,\r\n    \/\/ (undocumented)\r\n    RUNTIME_DEPS_INVALID_IMPORTED_TYPE = 1000,\r\n>>>>>>> main\r\n``` ","Error codes with a minus denote an error that has an error page. For example : https:\/\/angular.io\/errors\/NG0950\r\nSo you're  going to need to increment the error code. \r\n\r\nOnce this is done, you will need to update the error goldens with `yarn bazel run \/\/packages\/core:core_errors.accept`. \r\nAlso keep in mind that this change should be a single commit and we will need to drop that merge commit. ","Hey Jean, thanks for your fast response. I increased the `RUNTIME_DEPS_...` to start at `960` and will update\/ready my PR as soon as I'm on a better network since Bazel throws `timed-out` errors because my school network is so restrictive. \ud83e\udd72 ","@JeanMeche ran the goldens, should finally be ready. \ud83d\ude80 ","No idea whats going on with the local formatting recently, either the previous configs from other contributors didn't go through correctly and now I'm formatting with the real configs, since I set manual configuration on the `node-modules` prettier package in my IDE. \ud83e\udd72 ","The angular code base hasn't fully migrated to prettier. The core package still uses clang to format. \r\n\r\n`yarn lint` or more specifically `yarn ng-dev format files packages\/core\/src\/errors.ts` here will do the formatting for you. ","Yeah, my IDE formatting settings, ng-dev and the other config files don't go well together. Fixed the problem for now.","That last failing test is a flake. Change looks good now !","@danieljancar thanks for creating this PR! It looks like one of the error codes was used inside of some tests, so they are failing on CI, [see here](https:\/\/github.com\/angular\/angular\/actions\/runs\/8066490051\/job\/22035217456?pr=53455). Could you please take a look and make the necessary updates when you get a chance? Thank you."],"labels":["action: cleanup","action: review","area: core","target: patch"]},{"title":"Ability to disable defer blocks globally","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\ncompiler\n\n### Description\n\nIt would be interesting to be able to disable the \"Defer blocks\" globally without providing a variable on every single defer blocks.\r\n\r\nFor example, when I do a Lighthouse, I'd like it to scan the whole page, but because of the defer blocks this isn't possible, which makes the report a little less relevant, in terms of SEO or accessibility for example.\r\n\r\nSome tools also analyse the whole structure of the page, for example to check accessibility best practices. To get a real report you need to scroll to load the defer blocks.\r\n\r\nAnother example with the SSR, we have a job that runs every 7 hours to cache all our CMS pages. These pages are then served to search engine robots. For this type of page, being able to disable the defer blocks (when rendering them) and therefore have all the content would be very useful from an SEO point of view; being able to keep them in CSR would be great.\r\n\r\nI think we can already achieve that, but this would require to inject a configuration Token on every single component where we use defer blocks, that's a lot of boilerplate.\n\n### Proposed solution\n\nA configuration Token to globally disable defer blocks that could then be configured thought providers.\r\n\r\nThis Token could also be provided (configured) on certain component where we want to ensure that the defer blocks are not disabled, meaning it would override the global configuration.\n\n### Alternatives considered\n\nNot that I can think of.","comments":["This is a real showstopper for using SSR with defer at the moment. Using it to speed up client side render performance is a huge benefit however it is a nightmare for SEO as long as the fallback in SSR is the placeholder only. For us it means we still have to use another service for prerendering in front of the application."],"labels":["area: core","core: defer"]},{"title":"Document how to properly set status codes when using SSR","body":"### Describe the problem that you experienced\r\n\r\nFor pages such as 404, 403, 500 etc. you need to set their respective status codes or they're treated as 200. However, the documentation doesn't mention this anywhere.\r\n\r\n### Enter the URL of the topic with the problem\r\n\r\nhttps:\/\/angular.dev\/guide\/ssr\r\n\r\n### Describe what you were looking for in the documentation\r\n\r\nCode examples and descriptions of how to set status codes on the response from the server when using SSR.\r\n\r\n### Describe the actions that led you to experience the problem\r\n\r\nI was upgrading from v16 to v17, and with that came a new way of handling this. However, you're forced to dig through issues, or in my case, a commit for a new migration that shows what the code should look like after the migration runs (in my case it didn't even run, so had to do it manually). \r\n\r\nAnd even after all that, the code is still not working in production. I've provided the REQUEST and RESPONSE injection tokens in `server.ts` and then injected this into my 404 page component where I set the status, but the status is always 200 after navigating to the 404 route.\r\n\r\nYou can see the code for this here:\r\n\r\nhttps:\/\/stackoverflow.com\/questions\/77619409\/angular-17-ssr-setting-status-on-response-doesnt-work-despite-using-injectionto\r\n\r\n### Describe what you want to experience that would fix the problem\r\n\r\nI want the documentation page for SSR to properly and thoroughly describe how to add this (including code examples), and also how it works. Because right now it's very difficult to understand what to do, and I've seen multiple questions and issues on this. If the documentation would just state how to do this it will save a lot of people time and frustration.\r\n","comments":["Hi @chriswoodie, the provided code in the stackoverflow issue does work in an ng new application. Thus, the issue might be something else. \r\n\r\nKindly provide a minimal reproduction. Can you setup a minimal repro please?\r\n\r\nYou can read [here](https:\/\/github.com\/angular\/angular-cli\/blob\/master\/CONTRIBUTING.md#-submitting-an-issue) why this is needed. A good way to make a minimal repro is to create a new app via `ng new repro-app` and adding the minimum possible code to show the problem. Then you can push this repository to github and link it here.\r\n\r\nThis might be related to your directory structure so its really important to get an accurate repro to diagnose this.","@alan-agius4 Here you go: https:\/\/github.com\/chriswoodie\/status-repro\r\n\r\nSteps to reproduce:\r\n1. Clone repo\r\n2. npm install\r\n3. ng build sdk\r\n4. ng build\r\n5. npm run serve:ssr:repro-app\r\n\r\nGo to `http:\/\/localhost:4000\/404` and check network status for the 404 page, you will see a `200` status instead of 404.\r\n\r\nTurns out it's because of prerendering. If you set this to `false` for the project in `angular.json` the status code will be `404`, which is correct.\r\n\r\nNot sure if this is a bug or intended behaviour?","This is the indented behaviour when using prerendering, since there is no request\/response information. If a page depends on such information prerendering needs to be opted out for that page.\r\n","@alan-agius4 Got it, I think this should be mentioned in the documentation because I had no idea about this. Would've saved me days of debugging and others will probably benefit from this too.","@alan-agius4 Also, how do you opt out a page from prerendering? Can't find this in the docs either. I can only find the option to manually specify which routes to include, not exclude.","At the moment the only way to do it is to disable auto route discovery. https:\/\/angular.io\/guide\/prerendering#build-options-for-prerender","Indeed, several things about SSR need to be documented, for example since the move from @nguniversal\/express-engine to @angular\/ssr the express tokens were lost:\r\n\r\nhttps:\/\/github.com\/angular\/universal\/blob\/e798d256de5e4377b704e63d993dc56ea35df97d\/modules\/express-engine\/tokens\/injection-tokens.ts\r\n\r\n\r\nI have published a repo with the minimum to recreate the SSR problem with angular 17: https:\/\/github.com\/hittten\/angularSSR17\r\n\r\n## Clone & Setup:\r\n```bash \r\ngit clone https:\/\/github.com\/hittten\/angularSSR17\r\nnpm install\r\nnpm start\r\n```\r\n\r\n## logs\r\nif you navigate to http:\/\/localhost:4200\/404 you will see\r\n\r\n```\r\nERROR TypeError: Cannot read properties of null (reading 'status')\r\n    at _NotFoundPageComponent (\/Workspace\/hittten\/angularSSR17\/src\/app\/pages\/not-found-page\/not-found-page.component.ts:17:21)\r\n```\r\n\r\n## Info\r\nbasically, I have created a project like this:\r\n\r\n```bash\r\nnpx @angular\/cli@17.0.8 new angularSSR17 --ssr --routing --scss --skip-tests\r\ncd angularSSR17\r\nnpm i -D firebase-tools@13.0.2\r\nng g c pages\/homePage\r\nng g c pages\/aboutPage\r\nng g c pages\/notFoundPage\r\n```\r\nI also disable pre-render in angular.json:\r\n\r\n```json\r\n{\r\n    \"scripts\": [],\r\n    \"server\": \"src\/main.server.ts\",\r\n    \"prerender\": false,\r\n    \"ssr\": {\r\n      \"entry\": \"server.ts\"\r\n    }\r\n}\r\n```\r\n\r\nand I have done the settings of the routes for lazy load. I have not installed @angular\/fire because it is not necessary to recreate the SSR error.\r\n\r\n### ng version\r\n```\r\n     _                      _                 ____ _     ___\r\n    \/ \\   _ __   __ _ _   _| | __ _ _ __     \/ ___| |   |_ _|\r\n   \/ \u25b3 \\ | '_ \\ \/ _` | | | | |\/ _` | '__|   | |   | |    | |\r\n  \/ ___ \\| | | | (_| | |_| | | (_| | |      | |___| |___ | |\r\n \/_\/   \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_|       \\____|_____|___|\r\n                |___\/\r\n    \r\n\r\nAngular CLI: 17.0.8\r\nNode: 20.10.0\r\nPackage Manager: npm 10.2.5\r\nOS: darwin arm64\r\n\r\nAngular: 17.0.8\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, platform-server\r\n... router, ssr\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1700.8\r\n@angular-devkit\/build-angular   17.0.8\r\n@angular-devkit\/core            17.0.8\r\n@angular-devkit\/schematics      17.0.8\r\n@schematics\/angular             17.0.8\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.2\r\n```","Indeed, several things about SSR need to be documented, for example since the move from @nguniversal\/express-engine to @angular\/ssr the express tokens were lost:\r\n\r\nhttps:\/\/github.com\/angular\/universal\/blob\/e798d256de5e4377b704e63d993dc56ea35df97d\/modules\/express-engine\/tokens\/injection-tokens.ts\r\n\r\nI had to search the internet for a while to understand that I had to add the \"src\/express.tokens.ts\" file now because it no longer comes in the @angular\/ssr package and that's what I did\r\n\r\nI have reported an issue with the specific error of injecting the response token: \r\n`RESPONSE = new InjectionToken<Response>('RESPONSE');` which also fails\r\n\r\nSee this: https:\/\/github.com\/angular\/angular\/issues\/53810"],"labels":["P3","area: adev","area: docs"]},{"title":"formGroup.get('name').disable() strange phenomenon","body":"### Which @angular\/* package(s) are the source of the bug?\n\nforms, zone.js\n\n### Is this a regression?\n\nYes\n\n### Description\n\nPartial code\uff1a\r\n```ts\r\n@Component({\r\n  selector: \"form-test\",\r\n  template: `\r\n    <form [formGroup]=\"form\">\r\n      <input type=\"checkbox\" formControlName=\"checkbox\" \/>{{ item.name }}\r\n      <p>form checkbox disabled: {{ form.get(\"checkbox\").disabled }}<\/p>\r\n    <\/form>\r\n  `,\r\n})\r\nexport class FormTestComponent implements OnChanges {\r\n  @Input() item: any;\r\n\r\n  form: FormGroup;\r\n\r\n  constructor(private fb: FormBuilder) {\r\n    this.form = this.fb.group({});\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.form = this.fb.group({\r\n      name: [\"\"],\r\n      checkbox: [false],\r\n    });\r\n\r\n    if (this.item.name === 111) {\r\n      this.form.get(\"checkbox\")?.disable();\r\n    }\r\n  }\r\n}\r\n```\r\nI'll assign a new `group` to this.form each time `ngOnChanges` is triggered, and I'll make the disabled property of the checkbox true when `this.item.name === 111`, but when I click on the other list items, the disabled property of the checkbox will still look like it is true, it's actually false, but the checkbox in the template renders out with disabled=true\n\n### Please provide a link to a minimal reproduction of the bug\n\nhttps:\/\/codesandbox.io\/p\/sandbox\/angular-form-demo-skg9tp?file=%2Fsrc%2Fapp%2Fform.component.ts%3A19%2C35&layout=%257B%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522rootPanelGroup%2522%253A%257B%2522direction%2522%253A%2522horizontal%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522id%2522%253A%2522ROOT_LAYOUT%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522clpuz2b2y00073b6gj1fsj9nw%2522%252C%2522sizes%2522%253A%255B70%252C30%255D%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522EDITOR%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522id%2522%253A%2522clpuz2b2x00033b6gxglstab5%2522%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522SHELLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522id%2522%253A%2522clpuz2b2x00043b6gzmvymj2e%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522DEVTOOLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522id%2522%253A%2522clpuz2b2y00063b6g6zp3b7op%2522%257D%255D%252C%2522sizes%2522%253A%255B100%255D%257D%255D%252C%2522sizes%2522%253A%255B50%252C50%255D%257D%252C%2522tabbedPanels%2522%253A%257B%2522clpuz2b2x00033b6gxglstab5%2522%253A%257B%2522id%2522%253A%2522clpuz2b2x00033b6gxglstab5%2522%252C%2522tabs%2522%253A%255B%257B%2522id%2522%253A%2522clpvzkjyv00023b6gyqz3fk9b%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522FILE%2522%252C%2522initialSelections%2522%253A%255B%257B%2522startLineNumber%2522%253A19%252C%2522startColumn%2522%253A35%252C%2522endLineNumber%2522%253A19%252C%2522endColumn%2522%253A35%257D%255D%252C%2522filepath%2522%253A%2522%252Fsrc%252Fapp%252Fform.component.ts%2522%252C%2522state%2522%253A%2522IDLE%2522%257D%255D%252C%2522activeTabId%2522%253A%2522clpvzkjyv00023b6gyqz3fk9b%2522%257D%252C%2522clpuz2b2y00063b6g6zp3b7op%2522%253A%257B%2522tabs%2522%253A%255B%257B%2522id%2522%253A%2522clpuz2b2x00053b6g1v5mvtkn%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522UNASSIGNED_PORT%2522%252C%2522port%2522%253A0%252C%2522path%2522%253A%2522%2522%257D%255D%252C%2522id%2522%253A%2522clpuz2b2y00063b6g6zp3b7op%2522%252C%2522activeTabId%2522%253A%2522clpuz2b2x00053b6g1v5mvtkn%2522%257D%252C%2522clpuz2b2x00043b6gzmvymj2e%2522%253A%257B%2522tabs%2522%253A%255B%255D%252C%2522id%2522%253A%2522clpuz2b2x00043b6gzmvymj2e%2522%257D%257D%252C%2522showDevtools%2522%253Atrue%252C%2522showShells%2522%253Atrue%252C%2522showSidebar%2522%253Atrue%252C%2522sidebarPanelSize%2522%253A15%257D\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n```true\nAngular CLI: 12.2.18\r\nNode: 16.14.2 (Unsupported)\r\nPackage Manager: npm 8.5.0\r\nOS: darwin arm64\r\n\r\nAngular: 12.2.17\r\n... animations, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1202.18\r\n@angular-devkit\/build-angular   12.2.18\r\n@angular-devkit\/core            12.2.18\r\n@angular-devkit\/schematics      12.2.18\r\n@angular\/cli                    12.2.18\r\n@schematics\/angular             12.2.18\r\nrxjs                            6.6.7\r\ntypescript                      4.3.5\n```\n\n\n### Anything else?\n\n_No response_","comments":["The issue you're facing is due to the fact that you're reassigning a new form group to this.form every time ngOnChanges is triggered, which causes the checkbox to be disabled even when this.item.name is not equal to 111.\r\n\r\nTo fix this, you should only create the form group if it hasn't been created yet. Additionally, you should update the form controls based on the changes in the input data. Here's an updated version of your code:\r\n\r\n@Component({\r\n  selector: \"form-test\",\r\n  template: `\r\n    <form [formGroup]=\"form\">\r\n      <input type=\"checkbox\" formControlName=\"checkbox\" \/>{{ item.name }}\r\n      <p>form checkbox disabled: {{ form.get(\"checkbox\").disabled }}<\/p>\r\n    <\/form>\r\n  `,\r\n})\r\nexport class FormTestComponent implements OnChanges {\r\n  @Input() item: any;\r\n\r\n  form: FormGroup;\r\n\r\n  constructor(private fb: FormBuilder) {\r\n    \/\/ Initialize the form once in the constructor\r\n    this.form = this.fb.group({\r\n      name: [\"\"],\r\n      checkbox: [false],\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    \/\/ Check if the form has been initialized\r\n    if (this.form) {\r\n      \/\/ Update the form controls based on the input changes\r\n      this.form.patchValue({\r\n        name: this.item.name,\r\n        checkbox: this.item.name === 111 ? true : false,\r\n      });\r\n\r\n      \/\/ Disable the checkbox if this.item.name is 111\r\n      if (this.item.name === 111) {\r\n        this.form.get(\"checkbox\")?.disable();\r\n      } else {\r\n        this.form.get(\"checkbox\")?.enable();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n<img width=\"958\" alt=\"Preview\" src=\"https:\/\/github.com\/angular\/angular\/assets\/52648989\/b5dfcbf0-c708-4e83-b3d8-abbea90dc3f8\">\r\n\r\n","> The issue you're facing is due to the fact that you're reassigning a new form group to this.form every time ngOnChanges is triggered, which causes the checkbox to be disabled even when this.item.name is not equal to 111.\r\n> \r\n> To fix this, you should only create the form group if it hasn't been created yet. Additionally, you should update the form controls based on the changes in the input data. Here's an updated version of your code:\r\n> \r\n> @component({ selector: \"form-test\", template: `<form [formGroup]=\"form\"> <input type=\"checkbox\" formControlName=\"checkbox\" \/>{{ item.name }} <p>form checkbox disabled: {{ form.get(\"checkbox\").disabled }}<\/p> <\/form>`, }) export class FormTestComponent implements OnChanges { @input() item: any;\r\n> \r\n> form: FormGroup;\r\n> \r\n> constructor(private fb: FormBuilder) { \/\/ Initialize the form once in the constructor this.form = this.fb.group({ name: [\"\"], checkbox: [false], }); }\r\n> \r\n> ngOnChanges(changes: SimpleChanges): void { \/\/ Check if the form has been initialized if (this.form) { \/\/ Update the form controls based on the input changes this.form.patchValue({ name: this.item.name, checkbox: this.item.name === 111 ? true : false, });\r\n> \r\n> ```\r\n>   \/\/ Disable the checkbox if this.item.name is 111\r\n>   if (this.item.name === 111) {\r\n>     this.form.get(\"checkbox\")?.disable();\r\n>   } else {\r\n>     this.form.get(\"checkbox\")?.enable();\r\n>   }\r\n> }\r\n> ```\r\n> \r\n> } }\r\n> \r\n> <img alt=\"Preview\" width=\"958\" src=\"https:\/\/private-user-images.githubusercontent.com\/52648989\/289290209-b5dfcbf0-c708-4e83-b3d8-abbea90dc3f8.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTEiLCJleHAiOjE3MDIyNTgwNTksIm5iZiI6MTcwMjI1Nzc1OSwicGF0aCI6Ii81MjY0ODk4OS8yODkyOTAyMDktYjVkZmNiZjAtYzcwOC00ZTgzLWIzZDgtYWJiZWE5MGRjM2Y4LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFJV05KWUFYNENTVkVINTNBJTJGMjAyMzEyMTElMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjMxMjExVDAxMjIzOVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTMwM2U1MDFjMjMzYzNmZDk1MzEzYzZkNTc2Mzk5N2Y4NjY3YjJmOWFlMDIwMzcxNTQ1NThmNmUyMzhjMDc2ZWImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.faV9REg6VReop6JqKui1kWGjETUZzbPds8aPOjJuFgQ\">\r\n\r\nThank you for your answer. But I don't think it's a good solution, it's more like avoidance. I'm using the exact same code in Angular 15 and Angular 17 is just right, it's more in line with the developer's thinking.\r\n\r\n[Here's the demo using v17](https:\/\/stackblitz.com\/edit\/stackblitz-starters-jynkxp?file=src%2Fform-test%2Fform-test.component.ts)"],"labels":["area: forms"]},{"title":"Service Worker 504 Gateway Timeout for external resources","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\nservice-worker\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nThe fetch call for external resources, such as analytics scripts, ad manager scripts or styles will always fail when invoked after the service worker has been initialized. It appears that this is true for all opaque responses, where one can't control the CORS configuration.\r\n\r\nI've deployed a fresh Angular 17 app generated with the CLI on Cloud Run. The only modification I've done is add the Google Analytics script to **index.html**. Note that there is nothing special about this script, it will fail the same way for any other external resource.\r\nRepo that's in-sync with the deployed app: https:\/\/github.com\/zerefel\/angular-sw-fetch\r\n\r\n## Reproduction steps\r\n- Load the app for the first time or hit **Ctrl + Shift + R** -> The analytics script will be loaded successfully.\r\n- Refresh the page (**Ctrl + R**) -> The analytics script can't be loaded.\r\n\r\nI've been testing with various ngsw-config.json setups, tried to configure it with dataGroups, I also went through pretty much every single related issue, read the service worker documentation multiple times, nothing seems to help, so I can only assume this is a bug.\r\n\r\n## Expected behavior\r\nThe service worker manages to load the resources, or at least give a meaningful error message.\r\n\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\nhttps:\/\/angular-sw-test-ccqkuvfrra-nw.a.run.app\r\n\r\n### Please provide the exception or error you saw\r\n\r\n```true\r\nTypeError: Failed to fetch\r\n    at Driver.safeFetch (ngsw-worker.js:1832:33)\r\n```\r\n\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 17.0.6\r\nNode: 20.9.0\r\nPackage Manager: npm 10.1.0\r\nOS: linux x64\r\n\r\nAngular: 17.0.6\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, platform-browser-dynamic, platform-server\r\n... router, service-worker, ssr\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1700.6\r\n@angular-devkit\/build-angular   17.0.6\r\n@angular-devkit\/core            17.0.6\r\n@angular-devkit\/schematics      17.0.6\r\n@schematics\/angular             17.0.6\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.2\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\nDue to the nature of some dependencies, which request an arbitrary number of scripts of their own, (e.g. ad manager scripts), it is not viable to list every single URL in the dataGroups config, as they may not be known or could dynamically change.","comments":["Experiencing the same issue on v17 (in our case it is failing to fetch from the google recaptcha api). Has anyone found a workaround?","@zerefel Are you running an ad blocker extension by chance?\r\n\r\nThe request in your example app was showing up as a 301 script\/redirect via my ad blocker on first load. The next load it was a 504 (I'm assuming due to the service worker caching the extension redirect response). I disabled my ad blocker and then it seemed to work even after multiple reloads.\r\n\r\n### first load with ad blocker\r\n<img width=\"1744\" alt=\"Screenshot 2024-01-18 at 4 34 28\u202fPM\" src=\"https:\/\/github.com\/angular\/angular\/assets\/32114192\/fd1d92c7-69e1-490d-8d94-311010057cc1\">\r\n\r\n### subsequent loads with ad blocker\r\n<img width=\"1744\" alt=\"Screenshot 2024-01-18 at 4 34 55\u202fPM\" src=\"https:\/\/github.com\/angular\/angular\/assets\/32114192\/257d54fa-b2c6-4f09-a76d-6362441ef6f0\">\r\n\r\n### loads without ad blocker\r\n<img width=\"875\" alt=\"Screenshot 2024-01-18 at 4 35 37\u202fPM\" src=\"https:\/\/github.com\/angular\/angular\/assets\/32114192\/ce58f6f8-efe3-4593-8b13-a0c7f775df10\">\r\n","@huwyca I was using Brave browser to test, which has a ton of built-in privacy\/blocking features. Even with all extensions disabled it would still return a 504. However, I can confirm that it works as expected in Chrome with AdBlock extensions disabled. I think it's a browser issue after all. \r\n\r\n@joewIST can you provide any additional information, if not I'll go ahead and close this issue.\r\n","We are using a library for adding recaptcha to certain API calls, and this is frequently getting blocked with 504 errors. The issue seems to be that something is preventing the browser from downloading the package files, which is causing issues with logging in. ","The same here, someone was able to get a workaround for this problem?","This drag so much my SEO point and customer complain about it, I dont notice this issue since safari seem not cache, only chromium using some kind of cache and this issue happen","I'm experiencing this bug in macOS Safari 17.3.1 but also it occurs on iOS Safari 17.4.\r\n\r\niOS 17.4 \ud83d\udc47\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/27080469\/6ee19377-f560-4039-a0af-72778ae3b4db)\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/27080469\/75784aea-99fd-430c-9f5c-add3eb8b7a48)\r\n\r\nI'm trying to avoid service worker fetch intercept for some specific resource path, in this way the problem seems to be temporary solved. This is not an ideal solution and I would like to understand what's the cause.\r\nthis is an example for makes _gtm.js_ bypass sw:\r\n```\r\nself.addEventListener('fetch', event => {\r\n    if (event?.request?.url.includes('\/gtm.js')) {\r\n        event.stopImmediatePropagation();\r\n    }\r\n});\r\n\r\nimportScripts('.\/ngsw-worker.js');\r\n```\r\nUsing this workaround I was able to get gtm.js loaded as expected:\r\niOS 17.4 \ud83d\udc47\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/27080469\/d7928d00-21e0-4fdb-b3cd-877d3d625ce8)\r\n\r\nI was inspired by this dev.to [post](https:\/\/dev.to\/oz\/how-to-exclude-a-path-in-angular-service-worker-2gic)\r\n\r\nThis is a serious trouble, is anyone from Angular team aware of this?","I think there is some issue with new build system esbuild or angular 17, I'm not having this issue with angular 16"],"labels":["area: service-worker"]},{"title":"error code beyond expected range","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\ncore\r\n\r\n### Is this a regression?\r\n\r\nYes\r\n\r\n### Description\r\n\r\nAs stated in `errors.ts`:\r\n```ts\r\n * Error code ranges per package:\r\n *  - core (this package): 100-999\r\n *  - forms: 1000-1999\r\n *  - common: 2000-2999\r\n *  - animations: 3000-3999\r\n *  - router: 4000-4999\r\n *  - platform-browser: 5000-5500\r\n```\r\n\r\nThe issue is that two errors  (introduced in #50980) are breaking above ranges:\r\n\r\n```ts\r\n  RUNTIME_DEPS_INVALID_IMPORTED_TYPE = 1000,\r\n  RUNTIME_DEPS_ORPHAN_COMPONENT = 1001,\r\n```\r\n(https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/core\/src\/errors.ts#L120-L122)\r\nas they relate to `core` package, whereas `1000-1999` are restricted to `forms`.\r\n\r\nMoreover, error codes 1000 and 1001 already exist:\r\n```ts\r\n  \/\/ Structure validation errors (10xx)\r\n  NO_CONTROLS = 1000,\r\n  MISSING_CONTROL = 1001,\r\n  MISSING_CONTROL_VALUE = 1002,\r\n```\r\n(https:\/\/github.com\/angular\/angular\/blob\/main\/packages\/forms\/src\/errors.ts#L16-L18)\r\n\r\n\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\n_No response_\r\n\r\n### Please provide the exception or error you saw\r\n\r\n_No response_\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\nPossible solution: restrict codes `950-999` to relate to:\r\n```ts\r\n  \/\/ Runtime dependency tracker errors (950-999 range)\r\n  RUNTIME_DEPS_INVALID_IMPORTED_TYPE = 950,\r\n  RUNTIME_DEPS_ORPHAN_COMPONENT = 951,\r\n```","comments":[],"labels":["hotlist: error messages","area: core","state: has PR","P3","bug"]},{"title":"ci: Add primitives group to pullapprove","body":"This adds the shared primitives reviewers groups and list of reviewers to the pullapprove rules.\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [ ] Tests for the changes have been added (for bug fixes \/ features)\r\n- [ ] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n\r\n- [x] CI related changes\r\n\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n","comments":[],"labels":["area: build & ci","action: review","target: patch"]},{"title":"Http Client Testing: include provideHttpClient()","body":"### Describe the problem that you experienced\r\n\r\nIs not enough to use `provideHttpClientTesting()` for HTTP Client Testing, it will throw a dependency injection error. Instead, both `provideHttpClient()` and `provideHttpClientTesting()`. Seems like the docs don't say anything about this, not even in examples...","comments":["@GeorgeHulpoi Can I take this issue as my \"#goodfirstissue\"? I will try to reproduce the dependency error and use provideHttpClient() to fix it and update the docs with the information.\r\n","Yes it's up for grab until someone lands a PR ! ","@JeanMeche This PR https:\/\/github.com\/angular\/angular\/pull\/53716 seems okay. Can you review and approve?\r\n"],"labels":["area: common\/http","P3","area: adev","area: docs"]},{"title":"Console Warnings when unit testing Components using NgOptimizedImage","body":"### Is this a bug report or a feature request?\n\n- [X] Bug Report\n- [ ] Feature Request\n\n### Please provide the steps to reproduce the issue [Bug Report only]\n\nConsole log message while running `ng test` on a Component using `NgOptimizedImage`:\r\n\r\n```\r\nWARN: 'NG02956: The NgOptimizedImage directive (activated on an <img> \r\nelement with the `ngSrc=\"https:\/\/static.learnlux.com\/images\/icons\/star-circle-v1.0.png\"`) \r\nhas detected that there is no preconnect tag present for this image. \r\nPreconnecting to the origin(s) that serve priority images ensures that these \r\nimages are delivered as soon as possible. To fix this, please add the \r\nfollowing element into the <head> of the document: <link rel=\"preconnect\" href=\"https:\/\/static.learnlux.com\">\r\n```\r\n\r\nThis message occurs for each unit test involving a template containing an `ngSrc` Directive.\n\n### Please provide the expected behavior vs the actual behavior you encountered [Bug Report only]\n\nI would like a way to disable these messages while running unit test.\n\n### Please provide a screenshot if possible [Bug Report only]\n\n_No response_\n\n### Please provide the exception or error you saw [Bug Report only]\n\n_No response_\n\n### Is this a browser-specific issue? If so, please specify the device, browser, and version. [Bug Report only]\n\n_No response_\n\n### Description [Feature Request only]\n\n_No response_\n\n### Proposed solution [Feature Request only]\n\nI found a way to silence this error by hacking `karma.conf.js` as shown below. Is there a better way to handle this warning that I haven't seen? Should the way I have fixed it be documented? Or should there be a `NgOptimizedImageTesting` Module that makes this easier to setup?\n\n### Alternatives considered [Feature Request only]\n\nI modified the `karma.conf.js` to load a DOM file containing the preconnect link to silence the warnings during unit testing:\r\n\r\n*tests.html*\r\n```html\r\n<link rel=\"preconnect\" href=\"https:\/\/static.learnlux.com\">\r\n```\r\n\r\n*karma.conf.js*\r\n```js\r\nmodule.exports = (config) => {\r\n  config.set({\r\n    files: [\r\n      {\r\n        pattern: '.\/src\/testing\/tests.html',\r\n        served: false,\r\n        type: 'dom',\r\n        watched: false,\r\n      }\r\n    ],\r\n```\r\n\r\nHowever, since `karma.conf.js` is no longer exposed by default to new Angular apps I think this method would be complicated for everyone to setup. Also this doesn't load the link into the `<head>` as specified in the warning. I worry that future improvements to this feature might also complain about that.","comments":["Also get this error for `fill` images when `teardown: { destroyAfterEach: true }`. (The default TestBed config.)\r\n\r\n```\r\nWARN: 'NG02952: The NgOptimizedImage directive (activated on an <img> element with the `ngSrc=\"https:\/\/static.learnlux.com\/logos\/learnlux-staging-v2.0.png\"`) has detected that the height of the fill-mode image is zero. This is likely because the containing element does not have the CSS 'position' property set to one of the following: \"relative\", \"fixed\", or \"absolute\". To fix this problem, make sure the container element has the CSS 'position' property defined and the height of the element is not zero.'\r\n```\r\n\r\nIf I set `teardown: { destroyAfterEach: false }` then the warning message goes away.","I not only want to disable this in unit tests, but generally, since I want to use the directive with my own origin. "],"labels":["area: common","help wanted","P3","bug","common: image directive"]},{"title":"Publicly export PendingTasks to enable delaying SSR for WebSockets, etc","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\n\n_No response_\n\n### Description\n\nCan `InitialRenderPendingTasks` be exported so that we can easily add tasks when processing websocket data similar to how http client works to delay rendering SSR responses until all requests have settled?\r\n\r\nThere appears to be no api to do this at the moment despite the large recent push for SSR upgrades in v17.\n\n### Proposed solution\n\nPublicly export `InitialRenderPendingTasks`\n\n### Alternatives considered\n\nDocument an alternative to delaying SSR responses until asynchronous tasks are complete.","comments":["<!-- 6374bc4f-3ca6-4ebb-b416-250033c91ab5 -->\nThis feature request is now candidate for our backlog! In the next phase, the community has 60 days to upvote. If the request receives more than 20 upvotes, we'll move it to our consideration list.\n\nYou can find more details about the feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process).","Looks like this was renamed to `PendingTasks` in https:\/\/github.com\/angular\/angular\/commit\/7780712553a2bec2dc446b6c05fe7faa51159927\r\n\r\nCan this please be considered? There is currently no good way to delay SSR besides this. It seems like a pretty basic api to support in a SSR scenario. Anything async that isn't using prebuilt angular apis requires this.","@epelc there will absolutely be something provided that allows you to control the application stability for SSR. This is required for Zoneless. The exact shape of that API is yet to be determined. ","@atscott Thanks! Happy to hear something is coming. I was reading some of your other comments about Zoneless.\r\n\r\nI wonder what the thoughts are on \"application is stable\" vs \"application is ready to send SSR data\" apis and if it makes sense to have a difference. ie is it faster to load more data on server side or just load initial data to get something rendered out to client quickly. There are some interesting use cases for us where we have to delay SSR output until most of the page data is available in our ecommerce seo setting(ie you want full product data loaded for google)."],"labels":["feature","area: server","feature: under consideration"]},{"title":"refactor(devtools): filtering injector tree by token names","body":"Added 3 pieces of \"Injector Tree\" devtools tab:\r\n- \"clear selection\" button which draws initial graphs without highlighted edges and nodes, also closes the list of providers for a given injector\r\n- input \"filter injectors\" which will filter the injector tree showing only those injectors which include a certain name matching token\r\n- number of visible providers within an injector in parenthesis\r\n\r\nElement providers have been added for the sake of testing\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [X] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n\r\n1. once an injector gets selected, it highlights the edges and nodes, but there's no way to clear the selection\r\n2. there's no way to see in which injectors a certain provider is\r\n\r\n## What is the new behavior?\r\n\r\n1. the selection clear has been added\r\n2. by typing the name of the provider, the displayed injector hierarchy trees get filtered - showing only the injectors which actually include them. **This way, if someone provides e.g. multiple providers of a certain type on element injectors - and loses track of them - they can easily find it where exactly they are now.**\r\n\r\n[DEMO available here](https:\/\/twitter.com\/tomasz_ducin\/status\/1732155754751143982).\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n","comments":["merging conflict resolved at `devtools\/projects\/ng-devtools\/src\/lib\/devtools-tabs\/injector-tree\/injector-tree.component.ts` **via rebase on `main`**","@AleksanderBodurri would you mind taking a look?","@ducin, could you rebase and fix the conflicts ? \ud83d\udc4d\ud83c\udffb  ","@JeanMeche done \ud83d\udd28\r\n@AleksanderBodurri `providers(count)` and `providersNames` merged, let me know if I can squash."],"labels":["area: devtools"]},{"title":"fix(common): don't error on duplicate LCP image urls","body":"This PR fixes an error in how NgOptimizedImage's LCP image checker handles images with duplicate URLs. Previously, because the registered images are tracked by URL, a new image with the same URL would simply overwrite the entry for the previous one. This could cause false-positive error messages when the overwritten image had `priority` and the new one does not. \r\n\r\nThe fix simply disables the priority error when a duplicate image is encountered, and either one has priority. It also always disables the modified warning if a duplicate URL is encountered. This introduces a risk of false negatives, but only in very narrow edge cases. Particularly for the priority warning,  you would have to include duplicate copies of your LCP image, and put `priority` on only the wrong one of them in order to encounter a false negative. \r\n\r\nCC: @AndrewKushnir @kara \r\n\r\nCloses #53278 \r\n\r\n","comments":[],"labels":["area: common"]},{"title":"Standalone injectors do not seem to be completely isolated","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\ncore\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nActually, this is more like a Stackoverflow question. But I'd appreciate if someone could help me and shed some light on this topic \ud83d\ude05\r\n\r\nJust getting familiar with the concept of standalone components and now I'm a little curious about standalone injectors.\r\n\r\n[The official documentation](https:\/\/angular.io\/guide\/standalone-components#standalone-injectors) says that such injectors are created in order to isolate the providers imported by a standalone component from the rest of an application. Indeed, that sounds right to me - especially in terms of \"self-contained components\". \r\n\r\nHowever, It seems that different standalone injectors are not fully isolated from each other in some cases ([stackblitz](https:\/\/stackblitz.com\/edit\/stackblitz-starters-zgv74k)). \r\n\r\nIn the provided example the optional presense of providers at the routing configuration level deeply affects the entire tree of environment injectors.\r\n\r\n1. When you define the \"`providers`\" property in the routing config (even if you leave it empty), Angular creates the corresponding `EnvironmentInjector` for a router scope and the outcome hierarchy has the following shape. As we can see, `Standalone[_AppComponent]` and `Standalone[_ChildComponent]` injectors are completely isolated and cannot affect each other.\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/17178718\/a0c8c41e-78fd-420a-91fd-123ca6c3c0f2)\r\n(isolated injectors)\r\n\r\n2. However, if you don't define providers in the routing configuration, the hierarchy looks completely different. Now `Standalone[_AppComponent]` and `Standalone[_ChildComponent]` injectors are chained one by one and dependencies from `Standalone[_AppComponent]` are suddenly available inside the scope of `ChildComponent`. This looks like quite the opposite thing to what the official documentation initially states.\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/17178718\/93622ce5-aad9-4730-b6e5-34603a1b3e5c)\r\n(not isolated injectors)\r\n\r\n\r\nIs this correct behaviour? And if it was added intentionally - what was supposed to be achieved? \r\n\r\nI admit that I may be misunderstanding the concept of standalone injectors. But for me it looks like that some dependencies provided in parent standalone components might unexpectedly leak to its child component injector's scope. Please explain me if I'm wrong \ud83d\ude05 \r\n\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\nhttps:\/\/stackblitz.com\/edit\/stackblitz-starters-zgv74k\r\n\r\n### Please provide the exception or error you saw\r\n\r\n_No response_\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n```true\r\nAngular CLI: 17.0.5\r\nNode: 20.10.0\r\nPackage Manager: yarn 1.22.21\r\nOS: darwin arm64\r\n\r\nAngular: 17.0.5\r\n... animations, cli, common, compiler, compiler-cli, core, forms\r\n... platform-browser, router\r\n\r\nPackage                         Version\r\n---------------------------------------------------------\r\n@angular-devkit\/architect       0.1700.5\r\n@angular-devkit\/build-angular   17.0.5\r\n@angular-devkit\/core            17.0.5\r\n@angular-devkit\/schematics      17.0.5\r\n@schematics\/angular             17.0.5\r\nrxjs                            7.8.1\r\ntypescript                      5.2.2\r\nzone.js                         0.14.2\r\n```\r\n\r\n\r\n### Anything else?\r\n\r\n_No response_","comments":["This structure _is_ a little bit surprising to me - I would've expected that in the absence of `providers` in the child route, that the routed component is created with the root injector as its environment parent, not the `AppComponent` standalone injector (which must've come from the `RouterOutlet`). This could be interpreted as a bug in the router.\r\n\r\nIn general though, it's normal for standalone injectors to stack like this, or even for multiple standalone components to coalesce providers in one injector. The \"isolation\" mentioned in the docs is talking about the separation between `bootstrapApplication` providers and providers in the standalone `AppComponent`, not about the isolation between different standalone components in the injector tree."],"labels":["area: router","P3","bug","cross-cutting: standalone"]},{"title":"Add failing CI safety checks to the release tooling","body":"### Which @angular\/* package(s) are the source of the bug?\n\nDon't known \/ other\n\n### Is this a regression?\n\nNo\n\n### Description\n\nCurrently the dev-infra releasing tooling allows us to release framework even if the CI build is red. This was noticed during the v17 major release that was published despite the legitimate failing build (see https:\/\/github.com\/angular\/angular\/commit\/fecd141dfa541eb3e1c62767820474265e9a2443 and the failing commit prior to the release: https:\/\/github.com\/angular\/angular\/commit\/6b83328577867783b242abf07b4edd5eb57ea58f).\r\n\r\n\n\n### Please provide a link to a minimal reproduction of the bug\n\nLink to the failing job: https:\/\/github.com\/angular\/angular\/actions\/runs\/6778078484\/job\/18481969411\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n_No response_\n\n### Anything else?\n\nSuggest that the tooling should prevent and \/ or clearly warn about the failing build prior to releasing.","comments":["The release tool actually checks for passing statuses, but I do have a theory that it _might_ not be working with the migration to GitHub actions (which uses GitHub checks and not _statuses_) \/ or a warning\/prompt was potentially skipped accidentally?",">  or a warning\/prompt was potentially skipped accidentally?\r\n\r\nI don't think so, but should be easy to reproduce.\r\n\r\n> The release tool actually checks for passing statuses\r\n\r\nMaybe this is related to the checks that are done in the caretaking `check` action? I've noticed that it always reports back CI status as green even if GitHub reports (legit) build failures. ","I can second @pkozlowski-opensource's experience. I used to see warnings that CI hasn't finished, etc. That is no longer present when releasing.","Thanks. Sounds like the GitHub actions migration is the culprit here. "],"labels":["area: dev-infra","area: adev"]},{"title":"feat(core): add reflectDirectiveType method","body":"provide `reflectDirectiveType` similar to `reflectComponentType` to give subset of directive metadata.\r\n\r\ncloses #53112 \r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [x] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [x] Tests for the changes have been added (for bug fixes \/ features)\r\n- [x] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [x] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\nPlease see https:\/\/github.com\/angular\/angular\/issues\/53112 for the details\r\n\r\nIssue Number: 53112\r\n\r\n\r\n## What is the new behavior?\r\nprovides `reflectDirectiveType` to give subset of directive metadata\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["I would expect this PR to also amend `component.ts` to remove the duplicate code and `reflectComponentType` should probably call `reflectDirectiveType`. ","@JeanMeche May be a dumb question but how do I find failure reason for google-internal-tests. It is failing here in the pipeline.","This is only visible to Googlers. We will need to insights on this to know what is exactly breaking here. ","@JeanMeche Is this good to go or you have some more feedback?"],"labels":["area: core","detected: feature"]},{"title":"Consider sharing partial output interfaces between linker and JIT","body":"### Which @angular\/* package(s) are the source of the bug?\r\n\r\ncompiler-cli\r\n\r\n### Is this a regression?\r\n\r\nNo\r\n\r\n### Description\r\n\r\nCurrently, there are three places where the structure of e.g. `declareDirective` is maintained:\r\n\r\n1. JIT compiler facade in core\r\n2. JIT compiler facade in compiler\r\n3. Semi-output AST interface in the `linker`.\r\n\r\nThe confusing part is that the interface in the linker only partially deals with the output AST, and uses literal types in some places. Overall, the interface seems pretty mixed and inconsistent and **also** there is **no type-safety** where the definitions map values are checked for type assignability. In practice the interface is only used for validating that certain keys are set in the definition map. For this, the JIT facade interfaces could also be used more effectively and safe.\r\n\r\nIt's unclear if we can do better, but right now- it seems like a lot of duplication for no benefit? (except for potentially documenting the emitted structure better)\r\n\r\n### Please provide a link to a minimal reproduction of the bug\r\n\r\n_No response_\r\n\r\n### Please provide the exception or error you saw\r\n\r\n_No response_\r\n\r\n### Please provide the environment you discovered this bug in (run `ng version`)\r\n\r\n_No response_\r\n\r\n### Anything else?\r\n\r\nRelated internal discussion:\r\nhttps:\/\/angular-team.slack.com\/archives\/C4WHZQMRA\/p1701774881545059","comments":[],"labels":["area: compiler"]},{"title":"Possibility to configure `Validators.required` behavior or new `Validators.strictlyRequired` validator","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\nforms\r\n\r\n### Description\r\n\r\nCurrently `Validators.required` allows the entry of a `space` character, making the form valid. Therefore, we need to use a custom `required` validator.\r\n```ts\r\npublic static required({ value }: AbstractControl): ValidationErrors | null {\r\n    return String(value ?? '').trim() ? null : { required: true };\r\n}\r\n```\r\n\r\nHowever, this is causing problems with material form fields as the required asterisks are not displayed next to the label due to the failure of this check.\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/32300784\/fe9aac08-ef3a-43c2-affb-cb28061125df)\r\n\r\n### Proposed solution\r\n\r\nCould you consider adding an option to pass a boolean flag (e.g., `ignoreSpaces`) during the initialization of this validator? Alternatively, you could introduce a new `strictlyRequired` validator to address this concern, allowing users to choose without modifying the existing one.\r\n\r\n### Alternatives considered\r\n\r\nCurrently we have to use this work-around simply to override `required` attribute value to display asterisks.\r\n```ts\r\npublic get hasRequiredValidator(): boolean {\r\n    return this.control.hasValidator(CmValidators.required) || this.control.hasValidator(Validators.required);\r\n}\r\n```","comments":[],"labels":["area: forms"]},{"title":"feat(service-worker): finish implementation of refreshAhead feature","body":"Copy and document the refreshAhead option that allows to refresh cache entries before they expire. This allows to mark cached entries as stale while still retruning them until maxAge in case of service outage.\r\n\r\nCloses #46729\r\n\r\n## PR Checklist\r\nPlease check if your PR fulfills the following requirements:\r\n\r\n- [X] The commit message follows our guidelines: https:\/\/github.com\/angular\/angular\/blob\/main\/CONTRIBUTING.md#commit\r\n- [X] Tests for the changes have been added (for bug fixes \/ features)\r\n- [X] Docs have been added \/ updated (for bug fixes \/ features)\r\n\r\n\r\n## PR Type\r\nWhat kind of change does this PR introduce?\r\n\r\n<!-- Please check the one that applies to this PR using \"x\". -->\r\n\r\n- [ ] Bugfix\r\n- [X] Feature\r\n- [ ] Code style update (formatting, local variables)\r\n- [ ] Refactoring (no functional changes, no api changes)\r\n- [ ] Build related changes\r\n- [ ] CI related changes\r\n- [ ] Documentation content changes\r\n- [ ] angular.io application \/ infrastructure changes\r\n- [ ] Other... Please describe:\r\n\r\n\r\n## What is the current behavior?\r\n<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->\r\n\r\nIssue Number: #46729 \r\n\r\n\r\n## What is the new behavior?\r\nrefreshAhead config is honored\r\n\r\n## Does this PR introduce a breaking change?\r\n\r\n- [ ] Yes\r\n- [X] No\r\n\r\n\r\n<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->\r\n\r\n\r\n## Other information\r\n","comments":["@gkalpak since you commented on the issue, would you be interested in checking this ?"],"labels":["area: service-worker","detected: feature"]},{"title":"fix(core): reset DI debug data once root view is removed","body":"This commit resets the DI debug data when the root view is removed because its weak maps capture service instances that need to be garbage collected when the root view is removed. The debug data may be necessary only during app development but is not required when the app is destroyed.\r\n\r\n---\r\n\r\nCurrent behavior:\r\n\r\n[Screencast from 01.02.24 22:30:04.webm](https:\/\/github.com\/angular\/angular\/assets\/7337691\/6d4e9067-8556-4f53-a59e-669ad7532e24)\r\n","comments":["How would this work with multiple apps on the page, where only a subset is destroyed?","This would never work with multiple apps since, as far as I see, it's designed to be tied to a single app that currently exists. There's only one instance of the DIDebugData that always exists and is never re-assigned.\r\n\r\nIf it has to consider the case of multiple simultaneous apps on the page, it should then be a map of ApplicationRef -> DIDebugData. However, this would essentially require refactoring everything that already relies on the DIDebugData.\r\n\r\nBut now it's just a blocker to monitor memory changes per single app which is being created and destroyed.","There may only be a single `DIDebugData`, but that is sufficient to support multiple apps. This change is the first to require registrations per app, so this would be the moment to change the data structure accordingly.\r\n\r\nSince these are `WeakMap`s, I think the expectation would have been that none of this data can be a retainer, thus not contributing to memory leaks. Can you share more information on the memory leak you're observing and how this change avoids that problem?","Yeah, I literally meant that it has never supported the 'reset' functionality because its 'reset' implementation is tied to a single app. This would clean up everything once you have another app still alive, and the first one is being destroyed.\r\n\r\nInitially, my understanding was that there should be no leak coming from the weak map side, as keys are instances of components and R3Injector classes. Let's take a closer look here:\r\n\r\n![Screenshot from 2023-12-03 23-01-29](https:\/\/github.com\/angular\/angular\/assets\/7337691\/940466f6-9489-4333-a151-566e81adeae9)\r\n\r\n---\r\n\r\n### And\r\n\r\nAnd then when I reveal the summary view and find the final retainer:\r\n\r\n![image](https:\/\/github.com\/angular\/angular\/assets\/7337691\/daf2612a-9f29-4205-b7eb-20093f33ca4a)\r\n\r\nI do understand what you mean and the expectation is obvious considering the weak map being used.\r\n\r\nSo, my question is, should we proceed with changing the implementation to a map of `new Map<ApplicationRef, DIDebugData>` that would create the debug data once the application ref is created and clean it up accordingly once it's destroyed?","I think `DIDebugData.reset` is mostly for testing purposes. Its only production usage is during initial setup.\r\n\r\nThat retainer is, ehm, interesting?! Does a forced garbage collect cycle make any difference?\r\n\r\nAnyway, I suppose that keying this to an `ApplicationRef` would indeed be quite the undertaking, I don't know how feasible it even is. And in theory it shouldn't be necessary, I would like to understand why those `WeakMap`s would not avoid this problem.\r\n\r\n\/cc @AleksanderBodurri who has better understanding of the debugging infrastructure.","@JoostK is correct about this function being used primarily in tests to reset state. `DIDebugData` is supported under the hood entirely by WeakMaps, and It seems unlikely to me that it would retain any memory there that would otherwise be garbage collected.\r\n\r\nLooking at your images I notice the GENERATED_COMP_IDS constant, which seems to be a devmode only Map used to determine if component ids are colliding at runtime. If a component class declaration is retained in this map, it would not garbage collect, and thus not leave the DevTools WeakMap. I wonder if this could be causing the behaviour you're noticing.\r\n\r\nIf you're experiencing this issue only in a particular case, I'd be happy to help profile a reproduction application to verify the cause.","I'm testing applications separately to determine whether they're garbage-collectable in microfrontend mode. In this mode, applications are created and destroyed multiple times, and, in that particular case, they seem to resist garbage collection. Even though it's the development mode, I expect it to enhance development with additional assertions and helpful information. However, being in development mode shouldn't prevent items from being garbage-collected since these are unrelated matters.\r\n\r\nThe `GENERATED_COMP_IDS` retains the component constructor, which is always at the root context, but not the instance. The distance will always end up at the `GENERATED_COMP_IDS` root in snapshots because `lView` references constructor which is always retained in component IDs map. Using a weak map or a single map wouldn't matter in this case."],"labels":["action: review","area: core","target: patch","area: devtools"]},{"title":"routerLinkActiveOptions should accept partial object","body":"### Which @angular\/* package(s) are the source of the bug?\n\nrouter\n\n### Is this a regression?\n\nNo\n\n### Description\n\nWhen using routerLinkActiveOptions we are forced to pass all options:\r\n\r\n```html\r\n              [routerLinkActiveOptions]=\"{\r\n                queryParams: 'ignored',\r\n                matrixParams: 'exact',\r\n                paths: 'exact',\r\n                fragment: 'ignored'\r\n              }\"\r\n```\r\n\r\nIn most cases we want to set one of them, for example queryParams ignored. It should accept partial object.\n\n### Please provide a link to a minimal reproduction of the bug\n\n_No response_\n\n### Please provide the exception or error you saw\n\n_No response_\n\n### Please provide the environment you discovered this bug in (run `ng version`)\n\n_No response_\n\n### Anything else?\n\n_No response_","comments":["I wouldn't consider this a bug; looking at #40303 that introduced the ability to configure options it does not appear that any of the options actually have defaults."],"labels":["area: router"]},{"title":"Search ordering on Angular.dev is not correct","body":"### Describe the problem that you experienced\n\nOn angular.dev, the search shows irrelevant results at the top for some queries.\n\n### Enter the URL of the topic with the problem\n\n_No response_\n\n### Describe what you were looking for in the documentation\n\n_No response_\n\n### Describe the actions that led you to experience the problem\n\n1. Go to [https:\/\/angular.dev\/](https:\/\/angular.dev\/)\r\n2. Press search icon on the left\r\n3. In the search popup, type \"Content Projection\"\r\n4. First two suggestions are not the best results\r\n<img width=\"526\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/20491952\/6b159f00-e1d7-49dd-9d92-6a2fc701b492\">\r\n\r\nSimilar results with search query \"pipe\":\r\n<img width=\"568\" alt=\"image\" src=\"https:\/\/github.com\/angular\/angular\/assets\/20491952\/48afae8e-2f78-4e48-bc09-841db77dce7d\">\r\n\n\n### Describe what you want to experience that would fix the problem\n\nCheck if search query is in the title of the result, if so the result should have higher ranking\n\n### Add a screenshot if that helps illustrate the problem\n\n_No response_\n\n### If this problem caused an exception or error, please paste it here\n\n_No response_\n\n### If the problem is browser-specific, please specify the device, OS, browser, and version\n\n_No response_\n\n### Provide any additional information here in as much as detail as you can\n\n_No response_","comments":[],"labels":["P4","area: adev","area: adev-infra"]},{"title":"feat(router): Support the new Navigation API","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\nrouter\r\n\r\n### Description\r\n\r\nCurrently, most SPA apps on the web implement a fake \"loading\" bar like you can see on GitHub when navigating between pages. In a real MPA app where it performs a full page reload browsers show a native loading indicator. This has been impossible to implement until now with SPA because there was no way to show browser's native loading indicator. But now there is a new browser api called the Navigation API, specifically designed for SPA apps that finally shows a native browser loader when navigating in SPA app. \ud83c\udf89\r\n\r\n### Proposed solution\r\n\r\nImplement the new Navigation API. Yes, it is a new and bleeding edge feature but for those users with browsers that already support it (like Chrome) I think it adds a really nice UX touch.\r\n\r\n[developer.chrome.com\/docs\/web-platform\/navigation-api](https:\/\/developer.chrome.com\/docs\/web-platform\/navigation-api\/)\r\n[developer.mozilla.org\/en-US\/docs\/Web\/API\/Navigation_API](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Navigation_API)\r\n\r\nDemo:\r\nhttps:\/\/gigantic-honored-octagon.glitch.me\/\r\n\r\n_(In the demo, you can activate the `Add an artificial two-second delay to all navigations (should impact the loading spinner\/scroll restoration\/focus reset\/accessibility announcements).` checkbox to see the native loader appearing on the tab when navigating)_\r\n\r\n![image](https:\/\/github.com\/nuxt\/nuxt\/assets\/34019878\/e184690f-e448-4393-9695-3a73692ff12f)\r\n\r\n### Alternatives considered\r\n\r\nNone because this is a new API.","comments":["Duplicate of #46136 but I'll keep this one open so we don't have continued requests that keep getting closed.\r\n\r\nMy [response](https:\/\/github.com\/angular\/angular\/issues\/46136#issuecomment-1137521618) on that issue still holds true today. The navigation API is something we're aware of and want to use, but a lot of work goes into making that happen. Many of the refactors in the router over the past couple _years_ have been focused on making integration with the API possible. \r\n\r\nWe're closer today than we were in 2022, but \"support the Navigation API\" is a big, nebulous feature that isn't super actionable as a single tracking issue but is really a much larger undertaking that would be tracked as a project instead.","<!-- 6374bc4f-3ca6-4ebb-b416-250033c91ab5 -->\nThis feature request is now candidate for our backlog! In the next phase, the community has 60 days to upvote. If the request receives more than 20 upvotes, we'll move it to our consideration list.\n\nYou can find more details about the feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process).","<!-- 727acbae-59f4-4cde-b59e-4c9847cabcca -->\nJust a heads up that we kicked off a community voting process for your feature request. There are 20 days until the voting process ends.\n\nFind more details about Angular's feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process).","<!-- 5bb7b168-3bff-4685-ac2a-be3174a97af4 -->\nThank you for submitting your feature request! Looks like during the polling process it didn't collect a sufficient number of votes to move to the next stage.\n\nWe want to keep Angular rich and ergonomic and at the same time be mindful about its scope and learning journey. If you think your request could live outside Angular's scope, we'd encourage you to collaborate with the [community](https:\/\/angular.io\/resources?category=community) on publishing it as an open source [package](https:\/\/angular.io\/guide\/creating-libraries).\n\nYou can find more details about the feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process)."],"labels":["feature","area: router","feature: under consideration"]},{"title":"feat(router): Set a different browser URL from the one for route matching","body":"This feature adds a property to the `NavigationBehaviorOptions` that allows developers to define a different path for the browser's address bar than the one used to match routes. This is useful for redirects where you want to keep the browser bar the same as the original attempted navigation but redirect to a different page, such as a 404 or error page.\r\n\r\nfixes #17004\r\n","comments":["I had the feeling that the preferred way of redirecting was to return a UrlTree from the guard rather than imperatively navigating from the guard. \r\nHow would we get this behavior when returning a UrlTree?\r\n\r\nAlso, I must say that using UrlTrees is quite confusing, especially for beginners. Common navigations (using routerLink or router.navigate) use strings or arrays of segments to navigate, but in order to redirect, we have to transform the string\/array into a UrlTree, which is not intuitive.\r\nEven with the current state of this PR, if the goal is to keep the currently requested URL, couldn't we simply pass a boolean option rather than an UrlTree option?","> I had the feeling that the preferred way of redirecting was to return a UrlTree from the guard rather than imperatively navigating from the guard.\r\n\r\nYes, redirects should generally go through that mechanism. `router.navigate...; return false` isn't a true redirect as far as the Router's concerned. It's a new navigation that cancels and supersedes the current one. Redirects with the `UrlTree` return allow you to keep the original `Promise` from `navigate` and not resolving it until the redirect navigation completes. We can track it more directly as an actual redirect and treat it as a direct continuation of the initial navigation.\r\n\r\n> How would we get this behavior when returning a UrlTree?\r\n\r\nIt should and will be available, but I didn't feel that this feature needed to be blocked on having that available.\r\n\r\nUnfortunately the `UrlTree` redirects don't provide a way to defined `extras` and was a design decision at the time (https:\/\/github.com\/angular\/angular\/issues\/27148#issuecomment-442265173). I think it's clear now that this wasn't right and it'll be available in v18 with https:\/\/github.com\/angular\/angular\/pull\/45023 (expanding the type is a breaking change).\r\n\r\n\r\n> Also, I must say that using UrlTrees is quite confusing, especially for beginners. Common navigations (using routerLink or router.navigate) use strings or arrays of segments to navigate, but in order to redirect, we have to transform the string\/array into a UrlTree, which is not intuitive.\r\n\r\nAgreed. There are at least two reasons this PR is still in draft mode and one of them is that I'm not yet decided on the behavior here with `urlHandlingStrategy` and `urlSerializer` (that includes `string` as an option). At the moment, I'm leaning towards not serializing a string and not using `UrlHandlingStrategy.merge` with the property value. In this way, the `browserUrl` property can also be used as a way to manually avoid `UrlHandlingStrategy` behavior.\r\n\r\n> Even with the current state of this PR, if the goal is to keep the currently requested URL, couldn't we simply pass a boolean option rather than an UrlTree option?\r\n\r\nTwo things here: It is _a_ goal but I wouldn't say it's necessarily the _only_ goal. The feature as proposed here is a lot more flexible than a `boolean` and could be used for other use-cases. Additionally, as described above, the `router.navigate...; return false;` pattern isn't really a redirect. I don't think a `boolean` directly in the navigation extras that depends on the current router\/navigation state (if there is one) is a great API. That said, I do think we could consider a shortcut to getting this behavior with a `boolean` when `RedirectCommand` is available since that, by definition, is only working in the context of an actual redirect.","Thanks for the detailed explanations @atscott ","Thank you so much for building this @atscott ! We'll be using this the second it get's released."],"labels":["feature","area: router","target: minor","detected: feature"]},{"title":"Add support to return different Http Status Code e.g. 404, 301 Redirect and Custom Headers e.g. NoIndex header in renderApplication","body":"### Which @angular\/* package(s) are relevant\/related to the feature request?\r\n\r\nplatform-server\r\n\r\n### Description\r\n\r\nReturning different HTTP status codes from the `renderApplication` call is not supported at this moment, it would be really useful to add support for:\r\n\r\n1. Returning custom status codes e.g. 404 status code for not found, 503 e.g. in case an API call returns 503 status code.\r\n2. Returning 301\/302 redirect status code, with option to set redirect url as well. \r\n3. Return custom headers e.g. NoIndex headers to let search engines know that this page should not be indexed.\r\n\r\n### Proposed solution\r\n\r\nWhat if the `renderApplication` could return a response object with properties:\r\n\r\n1. Body\r\n2. Status Code\r\n3. Redirect URL (Optional)\r\n4. Headers\r\n\r\n### Use case:\r\n\r\nI tried using Angular App on Cloudflare Pages\/Worker. It works for most of the parts, but when it comes to setting the http status code or custom headers it doesnt seem to work.\r\n\r\nI generated a test app using the Cloudflare CLI. The CLI generates an Angular 17 app with below server.ts file:\r\n\r\n```\r\nimport { renderApplication } from \"@angular\/platform-server\";\r\nimport bootstrap from \".\/src\/main.server\";\r\n\r\ninterface Env {\r\n    ASSETS: { fetch: typeof fetch };\r\n}\r\n\r\n\/\/ We attach the Cloudflare `fetch()` handler to the global scope\r\n\/\/ so that we can export it when we process the Angular output.\r\n\/\/ See tools\/bundle.mjs\r\nasync function workerFetchHandler(request: Request, env: Env) {\r\n    const url = new URL(request.url);\r\n    console.log(\"render SSR\", url.href);\r\n\r\n    \/\/ Get the root `index.html` content.\r\n    const indexUrl = new URL(\"\/\", url);\r\n    const indexResponse = await env.ASSETS.fetch(new Request(indexUrl));\r\n    const document = await indexResponse.text();\r\n\r\n    const content = await renderApplication(bootstrap, {\r\n        document,\r\n        url: url.pathname,\r\n    });\r\n\r\n    \/\/ console.log(\"rendered SSR\", content);\r\n    return new Response(content, indexResponse);\r\n}\r\n\r\nexport default {\r\n    fetch: (request: Request, env: Env) =>\r\n        (globalThis as any)[\"__zone_symbol__Promise\"].resolve(\r\n            workerFetchHandler(request, env)\r\n        ),\r\n};\r\n```\r\n\r\nSo apparently there's no way to pass the status code or custom headers to the worker `workerFetchHandler` since `renderApplication` just retuns a string.","comments":["<!-- 6374bc4f-3ca6-4ebb-b416-250033c91ab5 -->\nThis feature request is now candidate for our backlog! In the next phase, the community has 60 days to upvote. If the request receives more than 20 upvotes, we'll move it to our consideration list.\n\nYou can find more details about the feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process).","Although there's room for enhancing the process of defining status codes, such as for error pages and redirects, currently setting of status codes and headers is possible through Dependency Injection (DI).\r\n\r\ntokens.ts\r\n```ts\r\nconst RESPONSE_INIT_OPTIONS = new InjectionToken<ResponseInit>('RESPONSE_INIT_OPTIONS');\r\n```\r\n\r\nserver.ts\r\n```ts\r\nconst responseInitOptions: ResponseInit = {};\r\nconst content = await renderApplication(bootstrap, {\r\n  document,\r\n  url: url.pathname,\r\n  platformProviders: [\r\n    { provide: RESPONSE_INIT_OPTIONS, useValue: responseInitOptions },\r\n  ],\r\n});\r\n\r\nreturn new Response(content, responseInitOptions);\r\n```\r\n\r\napp.component.ts\r\n```ts\r\n\r\n@Component({\r\n  ...\r\n})\r\nexport class AppComponent {\r\n  private readonly responseInitOptions = inject(RESPONSE_INIT_OPTIONS, {\r\n    optional: true,\r\n  });\r\n\r\n  constructor() {\r\n    if (!this.responseInitOptions) {\r\n      return;\r\n    }\r\n\r\n    this.responseInitOptions.status = 404;\r\n  }\r\n}\r\n\r\n```","Thank you so much @alan-agius4 it works perfectly for 404, can you please confirm its thread safe? I mean is there any possibility that two concurrent requests read the same status code?\r\n\r\nSecondly, can you please add example of 301 redirect and adding custom headers as well?\r\n\r\nI tried setting headers:\r\n\r\n`this.responseInitOptions.headers.append('X-Robots-Tag', 'noindex');`\r\n\r\n> But its throwing error property append doesnt exist on `Headersinit`.\r\n\r\nThank you!","> Thank you so much @alan-agius4 it works perfectly for 404, can you please confirm its thread safe? I mean is there any possibility that two concurrent requests read the same status code?\r\n\r\nNo, since the `responseInitOptions` is created for every request.\r\n\r\n> But its throwing error property append doesnt exist on Headersinit.\r\n\r\nAre you initialising the `responseInitOptions.headers`?\r\n\r\n```ts\r\nconst responseInitOptions: ResponseInit = {\r\n  headers: new Headers()\r\n};\r\n```","Thank you so much!","`ResponseInit` doesnt contain `Location` property. So for 301 redirects I tried setting `statusText` to the redirect url in my component and then in server.ts I tried:\r\n\r\n```\r\nif (responseInitOptions.status == 301) {\r\n  return new Response().redirect(responseInitOptions.statusText, 301);\r\n}\r\n```\r\n\r\nThis didn't work and and was throwing error:\r\n`TS2551: Property 'redirect' does not exist on type 'Response'. Did you mean 'redirected'?`\r\n\r\nEven though both MDN and CloudFlare docs suggest `Response().redirect()`:\r\n\r\nhttps:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Response\/redirect_static\r\nhttps:\/\/developers.cloudflare.com\/workers\/examples\/redirect\/\r\n\r\n\r\nSo as a workaround, I set the `Location` header in my component:\r\n\r\n```\r\n    this.responseInitOptions.status = 301;\r\n    let newHeaders = {\r\n      'Location': redirectURL\r\n    };\r\n\r\n    this.responseInitOptions.headers = newHeaders;\r\n```\r\n\r\nAnd in server.ts:\r\n\r\n`  return new Response(content, responseInitOptions);`\r\n\r\nWhich seems to be working fine.","@naveedahmed1, as the docs mention the `redirect` is a static method on the `Response` interface, thus it should be accessed like:\r\n\r\n```diff\r\n- new Response().redirect(responseInitOptions.statusText, 301);\r\n+ Response.redirect(responseInitOptions.statusText, 301);\r\n```\r\n\r\nIn additional to that, the first parameter of the `redirect` is not statusText, but rather a destination URL.","Thank you so much @alan-agius4 !","<!-- 727acbae-59f4-4cde-b59e-4c9847cabcca -->\nJust a heads up that we kicked off a community voting process for your feature request. There are 20 days until the voting process ends.\n\nFind more details about Angular's feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process).","<!-- 5bb7b168-3bff-4685-ac2a-be3174a97af4 -->\nThank you for submitting your feature request! Looks like during the polling process it didn't collect a sufficient number of votes to move to the next stage.\n\nWe want to keep Angular rich and ergonomic and at the same time be mindful about its scope and learning journey. If you think your request could live outside Angular's scope, we'd encourage you to collaborate with the [community](https:\/\/angular.io\/resources?category=community) on publishing it as an open source [package](https:\/\/angular.io\/guide\/creating-libraries).\n\nYou can find more details about the feature request process in our [documentation](https:\/\/github.com\/angular\/angular\/blob\/e29eb8abfbfdfb793e08ac88e14b7ba6d2ff2136\/docs\/GITHUB_PROCESS.md#feature-request-process).","> ```ts\r\n> const responseInitOptions: ResponseInit = {};\r\n> const content = await renderApplication(bootstrap, {\r\n>   document,\r\n>   url: url.pathname,\r\n>   platformProviders: [\r\n>     { provide: RESPONSE_INIT_OPTIONS, useValue: responseInitOptions },\r\n>   ],\r\n> });\r\n> \r\n> return new Response(content, responseInitOptions);\r\n> ```\r\n\r\n@alan-agius4  Where exactly should we add this part ? I know I need to add it to server.ts but now its something likes this:\r\n\r\n<img width=\"529\" alt=\"Screenshot 2024-02-13 at 2 38 58\u202fPM\" src=\"https:\/\/github.com\/angular\/angular\/assets\/25108979\/7413c35e-0843-412b-9c58-50a6104fa1e8\">\r\n\r\nWhere exactly should I add this part?\r\n\r\n```\r\nconst responseInitOptions: ResponseInit = {};\r\nconst content = await renderApplication(bootstrap, {\r\n  document,\r\n  url: url.pathname,\r\n  platformProviders: [\r\n    { provide: RESPONSE_INIT_OPTIONS, useValue: responseInitOptions },\r\n  ],\r\n});\r\n\r\nreturn new Response(content, responseInitOptions);\r\n```","@Gold3nFox the code sample @alan-agius4 shared in above comment is for Cloudflare Workers. Are you hosting your Angular App on Cloudflare Page\/Workers?","@naveedahmed1 No my app is deployed on physical servers in our data center, I'm trying to set 404 status for dynamic routes (which by default enter server.ts and I understand they are 404 after API response) and there are some redirects that we handle in angular (which again I understand they should be redirected after API response).\r\n\r\nIn older Angular version I used Angular Universal this line existed `res.status(404).render(\"index\", { req });` but it doesn't exist in Angular new SSR.\r\n\r\nThe only solution I found was this and I don't know how to use it on normal Angular app.","I see, sharing below Stackoverflow answer which probably should work:\r\n\r\nhttps:\/\/stackoverflow.com\/questions\/70926063\/angular-9-ssr-404-not-found-page-with-status-code\r\n\r\nAlso take a look at the below Github issues may be your issue is related to thses:\r\n\r\nhttps:\/\/github.com\/angular\/angular\/issues\/53491\r\nhttps:\/\/github.com\/angular\/angular-cli\/issues\/26323","@naveedahmed1 Thanks for your response.\r\n\r\nThe response on Stackoverflow is what works on older version. You can see that they used `import { RESPONSE } from '@nguniversal\/express-engine\/tokens';` which is from angular universal and I used to work with that. now that it is removed and I use built-in SSR and nguniversal has stopped at version 16 I can't do that.\r\n\r\nthose two issues are unsolved and there's no solution for me in them.\r\n\r\n\r\n","@Gold3nFox Yes you are right, I had an idea that's why I mentioned other github issues (which of course are still unresolved).\r\n\r\nBut as per the https:\/\/github.com\/angular\/angular-cli\/issues\/26323 it seems that the issue where injection tokens are null occurs only on development i.e. `ng serve`, in production it should work fine, right?","@naveedahmed1  Thanks, Yeah finally after 4 days I could get it to work on production.\r\nThis answer really helped me [https:\/\/stackoverflow.com\/a\/77459798\/10087419](https:\/\/stackoverflow.com\/a\/77459798\/10087419) and one thing that might help other people that have the same problem is that you cant use the injected response and request normally because of their type but if you use `(this.response as any)` the status and redirect functions will work fine.","I'm glad you are finally able to solve the issue :)"],"labels":["feature","area: server","feature: insufficient votes"]}]