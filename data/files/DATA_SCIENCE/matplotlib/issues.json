[{"title":"[ENH]: Please add `matplotlib.patches.RoundedRectangle`","body":"### Problem\n\n* I'm always frustrated when `matplotlib.patches.Rectangle` does not round the corners of the rectangle because it requires padding and other rectangle-irrelevant values.\r\n* I would like it if there is a clsas or method like `matplotlib.patches.RoundedRectangle(xy, width, height, corner_radius, **kwargs)` that can take any radius <= max(width, height) because `matplotlib.patches.FancyBboxPatch` does **not** round the rectangle as much as possible.\r\n* Here is a sample image of what I am asking for \r\n![rect_showing](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/72375763\/a4193acb-8be0-4294-a585-d5affe135900)\r\n\n\n### Proposed solution\n\nPlease add\/implement `matplotlib.patches.RoundedRectangle(xy, width, height, corner_radius, **kwargs)`","comments":["You can round the edges a fair amount using the [boxstyle](https:\/\/matplotlib.org\/devdocs\/api\/_as_gen\/matplotlib.patches.BoxStyle.html#matplotlib.patches.BoxStyle) parameter\r\ne.g.\r\n\r\n```py\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.patches as patches\r\n\r\nfig, ax = plt.subplots()\r\nrect = patches.FancyBboxPatch((.2, .2),\r\n                              boxstyle=\"round, pad=0.1, rounding_size=0.2\",\r\n                              width=.4,\r\n                              height=.4,\r\n                              fill=True)\r\nax.add_patch(rect)\r\nax.set_aspect('equal')\r\nplt.show()\r\n```\r\n![Screenshot 2024-03-24 011123](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/9763064\/88916080-2ef6-48db-b42f-d29dafac5916)\r\n\r\n","@saranti **Wow nice! Thank you brother**. Could you please tell me what's relation between the two: `pad=0.1` and `rounding_size=0.2`?\n\nI mean, how `rounding_size` requires `pad` value or how `pad` value affects `rounding_size`?\n\nLet, given that `width` and `height` **are equal**. Then, if `rounding_size` = `width\/2`  must produce a *circle* of the same radius as `rounding_size`.\n\nThanks again. "],"labels":["New feature"]},{"title":"MNT: Remove remaining 3.7 deprecations","body":"## PR summary\r\n\r\nNot sure why I missed listing these in #26865.\r\n\r\n## PR checklist\r\n\r\n- [n\/a] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [n\/a] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines","comments":["Looks like Appveyor is running out of time?  I re-started it but same result."],"labels":["topic: mpl_toolkit","topic: legend","Maintenance"]},{"title":"BUG: Fix NonUniformImage if x or y axis are log scale","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\n\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n\r\nThis PR fixes bug with NonUniformImage, where the image distorts when panning\r\nwith logarithmic x or y scale.\r\n\r\nCloses #27820.\r\n\r\n![Figure_1](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/37683428\/86e6233d-2282-448d-8c65-182e982d4716)\r\n\r\n> Original image\r\n\r\n![Figure_2](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/37683428\/aadd7e06-93bd-4005-9a94-45e682798e4e)\r\n\r\n> Image after panning to the left\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["topic: images"]},{"title":"[MNT]: Streamline mpltoolkits.axes_grid.Grid API","body":"### Summary\n\nThe current interface is neither very intuitive nor practical nor in line with the traditional gridspec logic.\n\n### Proposed fix\n\nHalf a note to self, because this is not completely thought through:\r\n\r\n- The parameter `ngrids` seems not to be working (usage raises)\r\n- The attributes `ngrids` is not helpful. It's misnomed (naxes would be better), and it's equivalent to `len(grid)` or `len(grid.axes_all)`.\r\n- Not sure what we need `grid.axes_llc` for. That seems quite specific.\r\n- The 2D grid arrangement `axes_row`, `axes_column` are lists of lists. In contrast `subplots` returns an array. Thus, you need double indexing `grid.axes_row[row][col}` and cannot use the multi-index `axs[row, col]`.\r\n- Having the `direction` parameter and `grid.axes_row`, `grid.axes_column` is basically two redundant approaches towards ordering.\r\n\r\nPossible improvements:\r\n- deprecate `ngrids` attribute\r\n- add an attribute `grid.axes` or maybe even  `grid.axs` (in analogy to `fig, axs = plt.subplots(2, 3)`), which is a ndarray of the Axes. Hence one could do `grid.axs[row, column]`.\r\n- maybe (??) soft-deprecate axes_all, axes_row, axes_col, direction?\r\n-  in `Grid.__init__` make everything after `nrows_ncols` kw-only\r\n- would be nice to have a default `rect`, but that requires reorganizing parameter order because that's before `nrows_ncols`.\r\n  Might be possible migrate\r\n  ```\r\n  def __init__(self, fig, rect, nrows_ncols, *, ...)\r\n  ```\r\n  to \r\n  ```\r\n  def __init__(self, nrows_ncols, *, rect, ...)\r\n  ```\r\n  with reasonable deprecation warnings and catching inappropriate use. - But would have to think this through","comments":["Is there a reason to cultivate this interface at all?  Isn't it superseded by features of modern matplotlib?","Is it? If so, we should at least add a discouraged note with replacement recommendations. But I believe we have no replacement at least for the ImagGrid subclass (which is from where I came here).","It's probably not exactly the same, but `fig, axs = plt.subplots(2, 2, layout='compressed')` will give you something very similar and more idiomatic.  ","Yes, this helps with the layout. But AFAIK, the shared colorbar handling is not reasonably developed.","On a general note, I\u2019d be happy to get rid of axes_grid1, because having two different interfaces is  awful user experience and additional maintenance cost. However, I feel this is a longer way and it may still be worth to improve on the existing structures.","> Yes, this helps with the layout. But AFAIK, the shared colorbar handling is not reasonably developed.\r\n\r\n```\r\nfig, axs = plt.subplots(2, 2, layout='compressed')\r\n\r\nfor i in range(4):\r\n    pc = axs.flat[i].imshow(np.random.randn(30, 30))\r\nfig.colorbar(pc, ax=axs)\r\n\r\nplt.show()\r\n```\r\n![Test](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1562854\/83b36113-3bcf-4f48-a113-38cb5a1826a6)\r\n\r\nEDIT: I think Axes grid does some extra things with different sized images, but that is pretty niche.  I wouldnt' object to moving that functionality into the main branch.  I just haven't done it because I've never had to make such a plot.  ","> I\u2019d be happy to get rid of axes_grid1, because having two different interfaces is awful user experience and additional maintenance cost. However, I feel this is a longer way and it may still be worth to improve on the existing structures.\r\n\r\nI agree with this, but I'm not sure it's worth trying to improve what is there versus improving the main library to do the same things. \r\n","The major issue with the above plots is that the colorbar is only associated with one image. So if you don't set the same explicit limits on each imshow and rely on auto-scaling, the same color may represent different values in different images. \r\n\r\nI thought `ImageGrid` was doing something cleverer here. But it turns out, I've been doing this in my personal wrapper function on `ImageGrid` to make it usable :upside_down_face:. ","Yeah, I'm not aware that `ImageGrid` somehow links the norms.  For sure that would be useful in some contexts, but is probably better handled by the user or a wrapper (I do this all the time as well, though usually for pcolormesh)","> The parameter ngrids seems not to be working (usage raises)\r\n\r\nFrom a quick look I appear to have broken that in #15639; a patch may be\r\n```patch\r\ndiff --git i\/lib\/mpl_toolkits\/axes_grid1\/axes_grid.py w\/lib\/mpl_toolkits\/axes_grid1\/axes_grid.py\r\nindex 720d985414..5ea1714871 100644\r\n--- i\/lib\/mpl_toolkits\/axes_grid1\/axes_grid.py\r\n+++ w\/lib\/mpl_toolkits\/axes_grid1\/axes_grid.py\r\n@@ -144,9 +144,9 @@ class Grid:\r\n             axes_array[row, col] = axes_class(\r\n                 fig, rect, sharex=sharex, sharey=sharey)\r\n         self.axes_all = axes_array.ravel(\r\n-            order=\"C\" if self._direction == \"row\" else \"F\").tolist()\r\n-        self.axes_column = axes_array.T.tolist()\r\n-        self.axes_row = axes_array.tolist()\r\n+            order=\"C\" if self._direction == \"row\" else \"F\").tolist()[:ngrids]\r\n+        self.axes_column = [[ax for ax in col if ax] for col in axes_array.T]\r\n+        self.axes_row = [[ax for ax in row if ax] for row in axes_array]\r\n         self.axes_llc = self.axes_column[0][-1]\r\n \r\n         self._init_locators()\r\n@@ -256,7 +256,10 @@ class Grid:\r\n             return\r\n         for i in range(self._nrows):\r\n             for j in range(self._ncols):\r\n-                ax = self.axes_row[i][j]\r\n+                try:\r\n+                    ax = self.axes_row[i][j]\r\n+                except IndexError:\r\n+                    continue\r\n                 if isinstance(ax.axis, MethodType):\r\n                     bottom_axis = SimpleAxisArtist(ax.xaxis, 1, ax.spines[\"bottom\"])\r\n                     left_axis = SimpleAxisArtist(ax.yaxis, 1, ax.spines[\"left\"])\r\n ```"],"labels":["topic: mpl_toolkit","Maintenance"]},{"title":"DOC: Document axes_grid1.Grid attributes","body":null,"comments":[],"labels":["topic: mpl_toolkit","Documentation: API"]},{"title":"Add explicit float type hint to attribute zoom","body":"Fixing Issue [#27957] by adding a explicit type hint, to prevent assumed int type.\r\n","comments":["I'm quite hesitant to add a lone type hint in an otherwise untyped module. Especially doing so inline when the bulk of the library uses stub files.\r\n\r\nI'm sorry that pylance is inferring the wrong type, but we did not provide any type hints for 3D (or other `mpl_toolkits`), so this one error is likely to be followed up with many many more. As such I'm not inclined to play whack-a-mole on individual errors in untyped modules.\r\n\r\nI'd not be opposed to a bit larger scope of expanding type hints into 3D, and wouldn't even be too offput by doing less than complete hinting, but I think the granularity needs to be likely per file, not down to a single hint. I think my inclination is to do stubs here as well, though willing to be convinced to do inline (currently we only do inline in pyplot (which is partially generated code), tests (which are only minimal hints to appease checkers), and one or two private modules (mostly to lay foundation for perhaps inlining in the future, but probably not for at least one more release cycle, probably longer))","I moved this to draft because I agree we do not want to do one-off inline type hinting.  We should either do a stub for the whole file or change the default to 1.0 to help down stream inferences."],"labels":["topic: mplot3d"]},{"title":"Add a draw during show for macos backend","body":"Without this a stale figure is shown\n\n<!--\nThank you so much for your PR!  To help us review your contribution, please check\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\n-->\n\n## PR summary\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\n(Why is this change required?  What problem does it solve?) and link to relevant\nissues and PRs.\n\nAlso please summarize the changes in the title, for example \"Raise ValueError on\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\nissue #8576\".\n-->\n\nThis is basically the same concept as what happens just before show in [`plt.pause`](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/1174aadafd9ae55818436bd3033b36626dcd3b0d\/lib\/matplotlib\/pyplot.py#L731).\n\nEssentially, there is nothing in the macos backend that actually causes a stale figure to be redrawn on `show`.\nOther backends (qt, tk in particular, but likely others) seem to be saved by the fact that a resize event is triggered upon show, but macos does not do the same.\n\n\nOther ideas considered, would be to do this in `plt.show` (which would perhaps leave out some other mechanisms, such as mpl-gui) or to try and do this in backend_bases (which is hard because most do not call `super`).\nCould also leave out the condition and just always call `draw_idle`.\n\ncloses #27953\n\n## PR checklist\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\n\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\n\n<!--We understand that PRs can sometimes be overwhelming, especially as the\nreviews start coming in.  Please let us know if the reviews are unclear or\nthe recommended next step seems overly demanding, if you would like help in\naddressing a reviewer's comments, or if you have been waiting too long to hear\nback on your PR.-->\n","comments":[],"labels":["GUI: MacOSX"]},{"title":"[ENH]: Iterables in grouped histogram labels","body":"### Problem\n\nSometimes, I keep my data in a dictionary, like so:\r\n```\r\ndata = {\r\n    \"Group A\": [1, 1, 1, 2, 2, 3, 3, 3, 3],\r\n    \"Group B\": [1, 2, 2, 2, 2, 3, 3],\r\n}\r\nplt.hist(data.values(), histtype=\"barstacked\", bins=np.arange(1, 5), label=data.keys())\r\nplt.legend()\r\n```\r\n\r\nThe legend here does not behave as hoped: only one label shows up (dict_keys([\"Group A\", \"Group B\"])). It would be nice if iterators like dict_keys worked in this context, since for instance they work in `plt.pie()`'s `labels=` kwarg, and since the dict's `.values()` works fine as the main argument to `plt.hist()` here. Still, calling `list()` is an easy workaround.\n\n### Proposed solution\n\n_No response_","comments":["I suspect this does not work for iterables. But to be checked:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/df148eea635d3c6855565681f3275db6dd2be436\/lib\/matplotlib\/axes\/_axes.py#L7103","```python\r\n>>> np.asarray(a.keys(), str)\r\narray(\"dict_keys(['a', 'b'])\", dtype='<U21')\r\n```\r\n\r\nIndeed `np.asarray` does not work with `keys`\r\n\r\nWe do have https:\/\/matplotlib.org\/stable\/api\/cbook_api.html#matplotlib.cbook.sanitize_sequence which just wraps view objects with `list`, though","### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the\nMatplotlib internals. To get started, please see our [contributing\nguide](https:\/\/matplotlib.org\/stable\/devel\/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull\nrequests (PRs). If there are none, feel free to start working on it. If there is an open PR, please\ncollaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication\nchannels](https:\/\/matplotlib.org\/stable\/devel\/contributing.html#get-connected).","The fix is to use our helper function (linked in https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27954#issuecomment-2010314749).\r\n\r\nSpecific work:\r\n - use wrapper\r\n - add test","Working on this...","I am frankly confused. So far, I have just [added a test](https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27970\/files) according to this issue that I expected to fail. However, the tests pass. Has this been fixed by someone else in the meantime?"],"labels":["status: confirmed bug","Difficulty: Easy","Good first issue"]},{"title":"ENH: Align titles","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\n\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nAdds a function ```Figure.align_titles```, that aligns titles of axes on the same row.\r\n\r\nCloses #22376. Continuation of PRs #25591, #22793\r\n\r\n![Figure_3](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/37683428\/ccb97cb1-bb69-4a41-a0f6-ec951c71321b)\r\n\r\n> Updated gallery example for align labels\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["topic: axes","topic: figures and subfigures","Documentation: examples","Documentation: API"]},{"title":"[ENH]: Starting point\/offset for (logarithmic and\/or relative) bar plots","body":"### Problem\n\nI would like to create a figure similar to this:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/8114497\/a0f22863-5381-4c3b-9b75-53e3a6cdee73)\r\n\r\nwhere the bars starts with a given offset (in this case 1).\r\n\r\nClearly it can be achieved with a bit of tricks, but I would prefer if one can simply provide an offset argument to bar. For example, I am now not using a logarithmic scale (and therefore there are no logarithmic minor ticks), but rather compute the log and then hard-code the y-labels.\r\n\r\nI imagine a similar situation where one would like the bars to start at a given value and not having a log-scale, like in relative bars.\r\n\r\nMaybe this can be done in a better way?\r\n\r\n(I originally thought the \"bottom\" argument would solve this, but after testing and reading the doc-string properly, it is clear that it solves another problem.)\n\n### Proposed solution\n\nAdd an offset argument that behaves as a reference for the bar plots.\r\n\r\n(Or provide an example where the same effect is obtained.)","comments":["The fundamental problem here is that bar is parameterized by the *height* of the bar, and not the position of the top of the bar... \n\nso I'm not sure an offset really helps here.... \n\nI think on a linear scale bottom is exactly what you want, but you need a negative height to get a bar to go down, and that just doesn't really work with log scale.\n\nThere are certainly a few trick you could play with transforms and such, but yeah, dealing with negative numbers on log scales is tricky, and I don't think it is solved by an offset.","I don't quite understand why `bottom` does not solve this problem (or at least `ax.bar(x, hegiht-b, bottom=b)`?\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nplt.bar(range(6), [-.5, 10, 100, 1000, 1, -.99], bottom=1)\r\nplt.yscale('log')\r\n```\r\n\r\n![so](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/199813\/c93aa0bd-c75a-4ef3-91c0-61cd34519ea4)\r\n","> I don't quite understand why\u00a0bottom\u00a0does not solve this problem (or at least\u00a0ax.bar(x, hegiht-b, bottom=b)?\n\nMe neither. Thanks!\n\nI'll try to see if I can find an example that does something similar or if I should add one. Will close if found.\n\n(Just looking at the thumbnails at the bar page didn't really give any interesting examples, but there may still be one.)"],"labels":["New feature"]},{"title":"Move IPython backend mapping to Matplotlib and support entry points","body":"This is WIP to move IPython's backend mapping into Matplotlib and extends it to allow backends to register themselves via [entry points](https:\/\/setuptools.pypa.io\/en\/latest\/userguide\/entry_point.html#entry-points-for-plugins). It is a coordinated effort across Matplotlib, IPython, matplotlib-inline and ipympl. Closes #27663.\r\n\r\nThe only functional changes to pure (non-IPython) Matplotlib are:\r\n\r\n1. Backend names are now case-insensitive. Up to now IPython has used capitalised names. If you ask for `QtAgg` then `get_backend()` will now return `qtagg`.\r\n2. There is a new `BackendRegistry.list_all()` function to list all known (built-in and dynamically-loaded) backends as this is needed by IPython. This could be made more public by exposing it in `pyplot` or the top-level `matplotlib.__init__.py` if desired.\r\n3. Entry points allow backend modules to register themselves so they do not require explicit code to support them in Matplotlib or IPython. Example of how this is done: https:\/\/github.com\/ipython\/matplotlib-inline\/blob\/c5887eab4bf4b594be8f7cfd738bfff4d6fede88\/pyproject.toml#L42-L43.\r\n\r\nFunctional improvements for IPython:\r\n\r\n1. Supports the full set of Matplotlib built-in backends, including `svg`, `pdf`, `qtcairo`, `tkcairo`, etc.\r\n2. Supports backends of the form `module:\/\/some.backend` such as `module:\/\/mplcairo.qt`.\r\n3. Supports entry-point backends, currently `inline` and `widget`\/`ipympl`.\r\n4. The widget\/jupyter backends behave like other non-interactive backends (e.g. `agg`) in pure IPython in that they can export to PNG, etc, but do not display an interactive window.\r\n\r\nJupyter inherits all these IPython benefits, displaying plots that use GUI frameworks in separate windows and the others within the notebook.\r\n\r\nBecause the four related projects are loosely coupled without direct dependencies on each other (except for `ipython` and `matplotlib-inline`), backward compatibility requires all possible combinations of projects before and after the new functionality (I will call these \"old\" and \"new\" from now on) to continue to work. I have tested these all locally, and the CI of this PR will test new Matplotlib against old IPython for example, but I need to add one or more new temporary CI runs to test new Matplotlib against new IPython etc. The identification of new versus old depends on version checks on the other libraries, so here is a table that I will update showing the current status of progress in the 4 projects:\r\n\r\n| Project | Relevant PRs | Possible release version |\r\n| --- | --- | --- |\r\n| matplotlib-inline | ipython\/matplotlib-inline#34,  ipython\/matplotlib-inline#35 | 0.1.7 |\r\n| ipympl | matplotlib\/ipympl#549 | 0.9.4 |\r\n| Matplotlib | #27948 (this) | 3.9.1 |\r\n| IPython | ipython\/ipython#14371 | 8.23.0 |\r\n\r\nThe two widget projects can be released soon, once we are happy with the entry point approach. The other two projects' PRs will have to be synchronised as each includes version checks on each other.\r\n\r\nImplementation details:\r\n\r\n1. `cbook._backend_module_name` has moved to `BackendRegistry`. It was private, but if there are concerns about downstream use of this function I can put a shim back in.\r\n2. For backward compatibility I have had to add synonyms `notebook` for `nbagg`, `qt6agg` for `qtagg` and `qt6cairo` for `qtcairo`. I am happy with `notebook` (it is a better name than `nbagg` anyway) but the `qt6` ones are unfortunate as we are connecting a version-specific IPython GUI event loop (`qt6`) to a somewhat version-agnostic Matplotlib `qtagg` backend.\r\n3. Entry points are only read if they really need to be. If you ask for a built-in or `module:\/\/` backend then the entry points are not needed. They are if you call `list_all()`.\r\n4. Backend validation no longer has a list of valid string names, it checks if the supplied backend name is valid and only loads the entry points if necessary.\r\n5. You cannot have multiple entry points with the same name, and an entry point cannot use the same name as a built-in backend.\r\n6. There are a number of code blocks that do version checks on IPython, matplotlib-inline or ipympl for backward compatibility. These need to remain in place for 3+ years until the lowest version of Python supported by Matplotlib is higher than the highest versions of those libraries released before these changes. Probably I should add a specific comment to each code block stating the conditions required for it to be removed.\r\n\r\nTo do\r\n- [ ] Add CI runs against the new PR branches of the other projects.\r\n- [ ] Support mac-specific backends (new mac in transit).\r\n- [ ] Add comments for conditions required for backward-compatibility code blocks to be removed.\r\n- [ ] Update documentation on backends, for both users and developers.\r\n- [ ] Update Whats New and API docs.\r\n- [ ] Update version checks before merging.\r\n- [ ] Inform downstream backend libraries (e.g. mplcairo) about entry points and deprecation of IPythons `backend2gui` which is now performed in Matplotlib.","comments":[],"labels":["topic: rcparams","third-party integration","topic: pyplot API","Maintenance","topic: canvas and figure manager","topic: backends"]},{"title":"Add support for horizontal CheckButtons","body":"## PR summary\r\n\r\nThis is a followup to #13374, but for `CheckButtons`. Also updates the test image to check both options.\r\n\r\nFeel free to review after #13374 or as a group. This is built on top of that one, so merging this would merge that as well.\r\n\r\n## PR checklist\r\n\r\n- [n\/a] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [n\/a] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines","comments":[],"labels":["topic: widgets\/UI"]},{"title":"[ENH]: Range Mappings","body":"### Problem\n\nI want to plot mappings between ranges. For instance x is the independent variable and f1, f2 are corresponding ranges:\r\n\r\n```\r\nx = [1, 2, 3, 4, 5]\r\nf1 = [(0, 20), (20, 40), (40, 60), (60, 80), (80, 100)]\r\nf2 = [(0, 80), (80, 95), (95, 98), (98, 99), (99, 100)]\r\n```\n\n### Proposed solution\n\nHere is my raw implementation for 2 cases: Bar-to-bar, Bar-to-semicircle.\r\n\r\n# Bar to Bar\r\n```\r\nimport matplotlib.pyplot as plt\r\n\r\n# Data\r\nx = [1, 2, 3, 4, 5]\r\nf1 = [(0, 20), (20, 40), (40, 60), (60, 80), (80, 100)]\r\nf2 = [(0, 80), (80, 95), (95, 98), (98, 99), (99, 100)]\r\n\r\n# Define colors for each segment\r\ncolors = ['red', 'blue', 'green', 'orange', 'purple']\r\n\r\n# Parameters\r\nW = 0.1  # Width of each bar\r\nD = 1    # Distance between bars\r\n\r\n# Plotting\r\nfig, ax = plt.subplots(figsize=(8, 6))\r\n\r\n# Plotting stacked bars for f1\r\nfor i, segment in enumerate(f1):\r\n    ax.bar(-1 * D, segment[1] - segment[0], bottom=segment[0], width=W, color=colors[i])\r\n\r\n# Plotting stacked bars for f2\r\nfor i, segment in enumerate(f2):\r\n    ax.bar(1 * D, segment[1] - segment[0], bottom=segment[0], width=W, color=colors[i])\r\n\r\n# Adding arrows to show mapping\r\nfor i in range(len(x)):\r\n    ax.annotate('', xy=(-1 * D + W\/2, f1[i][0]), xytext=(1 * D - W\/2, f2[i][0]),\r\n                arrowprops=dict(facecolor='black', arrowstyle='-'))\r\n    ax.annotate('', xy=(-1 * D + W\/2, f1[i][1]), xytext=(1 * D - W\/2, f2[i][1]),\r\n                arrowprops=dict(facecolor='black', arrowstyle='-'))\r\n\r\n\r\n# Removing grid lines, y-axis label, and axis ticks\r\nax.grid(False)\r\nax.set_yticks([])\r\nax.set_ylabel('')\r\nax.set_xticks([])\r\n\r\nax.set_title('Range Mapping: Bar to Bar')\r\n\r\nplt.show()\r\n```\r\n\r\n# Bar to circle\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# Data\r\nx = [1, 2, 3, 4, 5]\r\nf1 = [(0, 20), (20, 40), (40, 60), (60, 80), (80, 100)]\r\nf2 = [(0, 80), (80, 95), (95, 98), (98, 99), (99, 100)]\r\n\r\n# Define colors for each segment\r\ncolors = ['red', 'blue', 'green', 'orange', 'purple']\r\n\r\n# Parameters\r\nW = 5  # Width of each bar\r\nD = 10    # Distance between bars\r\nR = 50   # Radius of arcs for f2\r\narc_width = 5  # Width of the circle arcs\r\n\r\n\r\n# Plotting\r\nfig, ax = plt.subplots(figsize=(8, 6))\r\n\r\n# Plotting stacked bars for f1\r\nfor i, segment in enumerate(f1):\r\n    ax.barh(0, segment[1] - segment[0], left=segment[0], height=W, color=colors[i])\r\n\r\n\r\n# Plotting arcs for f2\r\ntheta = np.linspace(0, np.pi, 100)\r\nfor i, segment in enumerate(f2):\r\n    start_angle = np.degrees(np.arccos( 2 * segment[0] \/ 100 - 1 )) \r\n    end_angle = np.degrees(np.arccos(2 * segment[1] \/ 100 - 1)) \r\n    arc_center = (start_angle + end_angle) \/ 2\r\n    start_x = np.cos(np.radians(start_angle)) * R + R\r\n    start_y = np.sin(np.radians(start_angle)) * R + D\r\n    ax.plot(start_x, start_y, 'o', color='black')\r\n    end_x = np.cos(np.radians(end_angle)) * R + R\r\n    end_y = np.sin(np.radians(end_angle)) * R + D\r\n    ax.plot(end_x, end_y, 'o', color='red')\r\n    ax.plot(np.cos(theta) * R + R, np.sin(theta) * R + D, color='gray')\r\n\r\n    # Arrows\r\n    if i == 0:\r\n      ax.annotate('', xy=(f1[i][0], W\/2), xytext=(start_x, start_y), arrowprops=dict(facecolor=colors[i], arrowstyle='-'))\r\n    elif i == len(f1) - 1:\r\n      ax.annotate('', xy=(f1[i-1][1], W\/2), xytext=(start_x, start_y), arrowprops=dict(facecolor=colors[i], arrowstyle='-'))\r\n      ax.annotate('', xy=(f1[i][1], W\/2), xytext=(end_x, end_y), arrowprops=dict(facecolor=colors[i], arrowstyle='-'))\r\n    elif i > 0:\r\n      ax.annotate('', xy=(f1[i-1][1], W\/2), xytext=(start_x, start_y), arrowprops=dict(facecolor=colors[i], arrowstyle='-'))\r\n    \r\n    \r\n# Removing y-axis\r\nax.set_yticks([])\r\nax.set_ylabel('')\r\n\r\n# Setting aspect ratio\r\nax.set_aspect('equal')\r\n\r\n# Set xlim to enlarge the graph towards -x\r\nax.set_xlim(-1 * arc_width, None)\r\n\r\nplt.title('Range Mapping: Bar to Circle')\r\n\r\nplt.show()\r\n```\r\n\r\n[Colab example](https:\/\/colab.research.google.com\/drive\/1du2jxdO01wNg5Wd5bYUrOvbcgIuvBEjJ?usp=sharing) ","comments":["Hi can you please add a picture, b\/c I'm having trouble visualizing what you're asking for. \n\n\nIf I'm following your feature request correctly, and I'm not sure that I am, I'd be concerned about the ambiguity introduced by supporting pairs. If I am following, please explain how it's an improvement over the ways in which we already support plotting segments: \n\n1. https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.axes.Axes.broken_barh.html#matplotlib.axes.Axes.broken_barh\n2. The `bottom` keyword of bar https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.axes.Axes.bar.html#matplotlib.axes.Axes.bar\n\nAnd we support donut plots via:\n\n1. https:\/\/matplotlib.org\/stable\/gallery\/pie_and_polar_charts\/nested_pie.html#sphx-glr-gallery-pie-and-polar-charts-nested-pie-py\n2. https:\/\/matplotlib.org\/stable\/gallery\/pie_and_polar_charts\/polar_bar.html#sphx-glr-gallery-pie-and-polar-charts-polar-bar-py\n\n","@ersinesen we are pretty conservative about what new methods we will add and support.  In general, you need to argue wide possible use, and\/or that your method requires operating on Matplotlib at a lower level than the already supported API.  \n\nI don't see that the proposal here passes either bar.  It seems like a straightforward use of bars with an idiosyncratic labelling standard.  This would seem to be fine as a standalone package. You may find https:\/\/github.com\/matplotlib\/matplotlib-extension-cookiecutter useful.  ","Thanks for the responses. Two visuals are below. I could not find whether donuts have such a mapping mode in addition to inner partitions. I would like to have fancy mapping types, but as said it may not be a major difference. In that case you can close the issue.\r\n![bar_to_bar](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/5627420\/e5bfe268-f618-4440-842a-5406f353436b)\r\n![bar_to_circle](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/5627420\/9b71046b-f24e-491b-b994-6b157ca56cb5)\r\n\r\n",">  visuals are below. I could not find whether donuts have such a mapping mode in addition to inner partitions. I would like to have fancy mapping types, but as said it may not be a major difference. In that case you can close the issue.\r\n\r\nIf I'm following, this looks like something you want on annotations? possibly as part of the coordinate system? Could it possibly fall under a usecase of #22223 ","I think annotations are the wrong tool here. If you want lines, I'd add a `LineCollection`:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/5ed31113-2ce2-4c7c-a201-76fa2755aedc)\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.collections import LineCollection\r\nimport numpy as np\r\n\r\nbar_width = 0.1\r\npositions = [1, 2]\r\ndata = np.array([\r\n    [0, 20, 40, 60, 80, 100],\r\n    [0, 80, 95, 98, 99, 100],\r\n]).T\r\ncolors = ['red', 'blue', 'green', 'orange', 'purple']\r\n\r\ndeltas = np.diff(data, axis=0)\r\n\r\nfig, ax = plt.subplots()\r\nfor bottom, delta, color in zip(data[:-1], deltas, colors):\r\n    ax.bar(positions, delta, width=bar_width, bottom=bottom, color=color)\r\n\r\nleft = positions[0]+bar_width\/2\r\nright = positions[1]-bar_width\/2\r\nlc = LineCollection(\r\n    [[(left, row[0]), (right, row[1])] for row in data],\r\n    color='lightgrey', lw=1)\r\nax.add_collection(lc)\r\n```\r\n\r\nAlternatively, a `stackplot()` may also be a suitable visualization:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/070ea736-a69c-474f-b3e5-59ba5eca6df4)\r\n\r\n\r\n```\r\nbar_width = 0.1\r\npositions = [1, 2]\r\ndata = np.array([\r\n    [0, 20, 40, 60, 80, 100],\r\n    [0, 80, 95, 98, 99, 100],\r\n]).T\r\ncolors = ['red', 'blue', 'green', 'orange', 'purple']\r\n\r\ndeltas = np.diff(data, axis=0)\r\n\r\nfig, ax = plt.subplots()\r\nfor bottom, delta, color in zip(data[:-1], deltas, colors):\r\n    ax.bar(positions, delta, width=bar_width, bottom=bottom, color=color)\r\n\r\nleft = positions[0]+bar_width\/2\r\nright = positions[1]-bar_width\/2\r\nax.stackplot([left, right], deltas, colors=colors, alpha=0.2)\r\n```\r\n\r\n","Note also, that this is an ideal case to write a custom helper function (see also the section \"Write your own wrapper function\" at https:\/\/github.com\/timhoffm\/using-matplotlib\/blob\/main\/05_Libraries_using_Matplotlib.ipynb).\r\n\r\ne.g. for the above LineCollection example:\r\n\r\n```\r\n\r\ndef connection_plot(ax, data, colors=None, bar_width=0.1):\r\n    if colors is None:\r\n        colors = plt.rcParams['axes.prop_cycle'].by_key()['color'][:len(data)]\r\n\r\n    positions = [1, 2]\r\n    deltas = np.diff(data, axis=0)\r\n\r\n    for bottom, delta, color in zip(data[:-1], deltas, colors):\r\n        ax.bar(positions, delta, width=bar_width, bottom=bottom, color=color)\r\n\r\n    left = positions[0]+bar_width\/2\r\n    right = positions[1]-bar_width\/2\r\n    lc = LineCollection(\r\n        [[(left, row[0]), (right, row[1])] for row in data],\r\n        color='lightgrey', lw=1)\r\n    ax.add_collection(lc)\r\n```\r\n\r\nso that you for doing a concrete plot you only need to:\r\n```\r\ndata = np.array([\r\n    [0, 20, 40, 60, 80, 100],\r\n    [0, 80, 95, 98, 99, 100],\r\n]).T\r\n\r\nfig, ax = plt.subplots()\r\nconnection_plot(ax, data)\r\n```\r\n","@timhoffm I thought we had an example of writing a wrapper in our docs, but I can't find it easily.  Would you consider adding an example like that? ","Sure. I believe it should get a new tile here? https:\/\/matplotlib.org\/devdocs\/users\/index.html#users-guide-index","Probably.  Maybe the scope of \"customizing matplotlib\" could start to be expanded beyond just rcParams","I applied @timhoffm 's LineCollection solution to bar-to-circle mapping.\r\n\r\n![Screen Shot 2024-03-24 at 00 03 11](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/5627420\/8e33cf46-97c5-4602-80bd-0b697f092c49)\r\n\r\n```\r\n# Bar to Circle\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.collections import LineCollection\r\nimport numpy as np\r\n\r\ndef range_mapping(ax, data, colors=None, bar_width=5, D=5\/2):\r\n    if colors is None:\r\n        colors = plt.rcParams['axes.prop_cycle'].by_key()['color'][:len(data)]\r\n\r\n    positions = [1]\r\n    deltas = np.diff(data, axis=0)\r\n    R = data[-1,0] \/ 2\r\n    Theta = data[-1,1]\r\n    theta = np.linspace(0, np.pi, Theta)\r\n    # complete arc\r\n    ax.plot(np.cos(theta) * R + R, np.sin(theta) * R + D, color='gray')\r\n    for pos, delta, color in zip(data[:-1], deltas, colors):\r\n        ax.barh(0, delta[0], left=pos[0], height=bar_width, color=color)\r\n        # Start-end points\r\n        start_angle = pos[1]\/Theta * 180 + 180\r\n        end_angle = (pos[1]+delta[1])\/Theta * 180 + 180\r\n        start_x = np.cos(np.radians(start_angle)) * R + R\r\n        start_y = -np.sin(np.radians(start_angle)) * R + D\r\n        #ax.plot(start_x, start_y, 'o', color='black')\r\n        end_x = np.cos(np.radians(end_angle)) * R + R\r\n        end_y = -np.sin(np.radians(end_angle)) * R + D\r\n        #ax.plot(end_x, end_y, 'o', color='red')\r\n        # Arc segment\r\n        arr = theta[::-1]\r\n        theta2 = arr[pos[1]:(pos[1]+delta[1])]\r\n        ax.plot(np.cos(theta2) * R + R, np.sin(theta2) * R + D, color=color)\r\n        # Links\r\n        lc = LineCollection([ [(pos[0], bar_width\/2), (start_x, start_y)] ], color='lightgrey', lw=1)\r\n        ax.add_collection(lc)\r\n    \r\n    # Set xlim to enlarge the graph towards -x\r\n    ax.set_xlim(-1 * bar_width, None)\r\n\r\n    # Removing y-axis ticks\r\n    ax.set_yticks([])\r\n    ax.set_ylabel('')\r\n\r\n  \r\ndata = np.array([\r\n    [0, 30, 40, 60, 80, 100],\r\n    [0, 60, 80, 90, 96, 100],\r\n]).T\r\n\r\nfig, ax = plt.subplots()\r\nrange_mapping(ax, data)\r\n```\r\n"],"labels":["New feature"]},{"title":"feat: add dunder method for math operations on Axes Size divider","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n\r\nCloses #27930. This adds __dunder__ methods (mul, and divide notably) to make interacting with `axes_grid1.Size` object better. \r\n\r\n\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\n\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n\r\n\r\nThe original code for Size object interaction is not tested, so I don't know how to proceed to add some test for these changes. Overall, the direct usage of `Size` objects is quite niche, so I seek guidance as well for the documentation (maybe a new example ?) \r\n\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [N\/A ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\nThanks in advance!\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Thanks for the early review!\r\n\r\n Following your comments, I added some type checking for scaling operations. \r\nA clear definition (and documentation) of the behavior could be specified. From what I understood from the code, `Size` can be scaled (e.g. multiply by a `Real` number) and added or substracted together (basically all operations defined for a linear vector space).\r\n\r\nI do think that allowing multiplication on the right (or div) is nice to have (especially division): Typically to split an axis equally in n part: \r\n\r\n```python\r\ndivider.set_horizontal([Size.AxesX(ax) \/ n for _ in range(n)]\r\n```\r\n\r\n\r\n","Rather than `TypeError` we should be returning https:\/\/docs.python.org\/3\/library\/constants.html#NotImplemented to play-nice with the  fallback rules and letting the interpreter untimely raise the error."],"labels":["topic: mpl_toolkit"]},{"title":"Fixed hatching in PatchCollection class","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\n\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nCloses #22654\r\nTaking after @hhalwan's PR #22814, with a few of my own proposed changes and questions.\r\nHave removed the determine_facecolor function as this is already checked for, by setting alpha to 0 if get_fill() is set to 0.\r\nHave set edgecolor to black in case of no definition of edge-color in the patches, as it defaults to None, but shouldn't we be setting the edge-color to a color contrasting to the face-color? Is there a function that does this for us?\r\nWe can also re-route this PR by decoupling the hatch-color setting and edge-color setting(like in PR #26993), which might make the module clearer.\r\nAs we are choosing only the first patch's hatch, for all the patches if match_original is True, I don't think we need warnings as long as we update the API documentation. Thoughts?\r\n\r\nGives the needed output for:\r\n#22654 \r\n<img width=\"165\" alt=\"image\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/73378019\/31402a78-ed8e-43ee-9f03-6a45b220a1a9\">\r\n\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["topic: collections and mappables"]},{"title":"[ENH]: Adding jitter mode in `scatter`","body":"### Problem\n\nIs there a plan to add a 'jitter' functionality to `scatter`, so that markers are re-positioned to avoid overlap? An example of this idea is described [here](https:\/\/datavizproject.com\/data-type\/jitter-plot\/).\n\n### Proposed solution\n\nProvided that the number of overlapping markers isn't too large, the re-positioning can be achieved by minimizing a measure of distance over the shape centers (for circles). A basic implementation could be based on [this discussion](https:\/\/stackoverflow.com\/questions\/46131572\/making-a-non-overlapping-bubble-chart).","comments":["This has come up and was rejected at least once before: https:\/\/github.com\/matplotlib\/matplotlib\/issues\/2750\r\n\r\nIf we did take some version of this functionality, it should be its own function\/method rather than being tacked onto scatter.  This really only makes sense in the narrow case of one of x being categorical so we should let it only work for catagorical data (or at least require integers or maybe it takes a scalar x and a list of y or a sequence x and a sequence of sequence of y (e.g. the groupby) or match the API of boxplot and violinplot).  \r\n\r\nI also suspect that there is going to be a large number of knobs people will want to have added to control how the jitter works which should not be shoe-horned into (already too complicated) signature of `scatter`.  \r\n\r\nI suspect that a majority of these cases are with the realm of what seaborn targets and in that case, we should point people at `sns.swarmplot` (https:\/\/seaborn.pydata.org\/generated\/seaborn.swarmplot.html ).\r\n\r\nThis sort of thing could be made easier by the work in https:\/\/github.com\/matplotlib\/data-prototype where this could be implemented as step in the processing pipeline.\r\n\r\nThat said, I wonder if this can be achieved by writing a very custom Transform (https:\/\/matplotlib.org\/stable\/api\/transformations.html#matplotlib.transforms.Transform) that is offered the full set of x, y and returns the \"jittered\" x, y.  If you write that, then I think you can do `ax.scatter(..., offset_transform=JitterTransfrom())` and it will \"just work\".\r\n\r\n------\r\n\r\nIn summary my views on the ways this can be addressed:\r\n\r\n - adding API to `scatter` to jitter: hard no\r\n - adding a new method that pull swarmplot upstream: maybe leaning no\r\n - adding a `Transform` subclass that does the jitter + an example: maybe, leaning yes\r\n - new third-party library that implements hive\/swarm\/jitter plots: you don't need our permission, but why not just use seaborn?","Thanks for the response @tacaswell, that's useful and clearly articulated. I like the `Transform` strategy to implement the jitter. Would you see value in exploring this?","First, hard agree this cannot be tacked onto `scatter`.   It's far more akin to violin or box plots, and the x-value needs to be categorical since you want to use \"jitter\" in x to move the points around. \r\n\r\n>  I like the Transform strategy to implement the jitter. Would you see value in exploring this?\r\n\r\nI think that is going to be _very_ hard as you are going to want the jitter in screen space, information of which we don't naturally pipe down to the the Transform.  Not impossible, but it's not going to be straightforward.  I think you'd be better to write a wrapper and not try and overload `scatter`.","We have transforms in the annotation context that do absolute offsets so it can be done.  I agree not easy, but I think it will be the fun kind of hard."],"labels":["New feature"]},{"title":"[ENH]: Make axes_grid1.Size more math friendly.","body":"### Problem\r\n\r\nThe matplotlib lib axes_grid1 is a great toolbox for building complex plots (especially for panel of images). The size of the grid is defined through axes divider which are typically list of [Sizes](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/48c065ec11ce685f31744546a4c07d653576ca3e\/lib\/mpl_toolkits\/axes_grid1\/axes_size.py) objects.\r\n\r\nThose object support for now only addition and multiplication on the left (e.g `0.5*Size.AxesX(ax)` works, but not `Size.AxesX(ax)*0.5` \r\nCurrently only `__rmul__` and `__add__` are available.\r\n\r\n\r\n### Proposed solution\r\n\r\n\r\nAdding more arithmetic dunder methods (like `__mul__`,`__div__`, `__sub__`[^1]) would bring more flexibility and a better UX in designing axes divider grid. \r\n\r\nA proposal of implementation would be the following: \r\n\r\n```python \r\n# lib\/mpl_toolkits\/axes_grid1\/axes_size.py\r\n\r\nclass _Base:\r\n    def __rmul__(self, other):\r\n        return Fraction(other, self)\r\n\r\n    def __add__(self, other):\r\n        if isinstance(other, _Base):\r\n            return Add(self, other)\r\n        else:\r\n            return Add(self, Fixed(other))\r\n\r\n    # new stuff\r\n\r\n    def __mul__(self, other):\r\n        return Fraction(self, other)\r\n\r\n    def __div__(self, other):\r\n        return Fraction(1\/other, self)\r\n\r\n    def __sub__(self, other):\r\n        # \r\n        return Add(self, Fixed(-other)\r\n```\r\n\r\nI willy happily submit a PR with this change (and more if required). \r\n\r\n\r\n\r\n\r\n\r\n[^1]: Some check may also be enforced (to avoid negative values for instance)\r\n","comments":["This is a reasonable improvement. Do you want to make a pull request?"],"labels":["New feature"]},{"title":"Visually more uniform colortable","body":"High variations in saturation make the colortable somewhat non-uniform. By splitting into low\/high saturation groups, the table IMHO looks better.\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/2864e5bc-3cfa-4ed2-80d4-8b9c5418db3e)\r\n","comments":["I think it's a depends what you're trying to do situation? \n\nLike I really don't like splitting the grays and I'm partial to sorting on hues cause I'm usually looking at that table to find\/build a gradient? ","Agree with @story645 - by-hue makes more sense to me than by-saturation.  Usually you are looking for a shade of green, not any color with a certain saturation.  \r\n\r\nAs an aside, it would nice if this gallery were linked at https:\/\/matplotlib.org\/stable\/users\/explain\/colors\/colors.html, and\/or merged.  I also think it would be nice if we added the full xkcd colortable - sure 954 colors is a lot, but its not that many",".. should add, I don't see why we couldn't include both sortings, if both seem useful. ","If we are doing multiple sortings we should also include the alphabetical one as well.","> If we are doing multiple sortings we should also include the alphabetical one as well.\r\n\r\nWe don't really use sphinx design in the gallery but maybe makes sense to put in a  tab grouping - hue, saturation, alphabetical-which I wonder if it'd be good to move this table into the color reference kinda like @jklymak suggested","**TL;DR: Let's table this for later.**\r\n\r\nStill, I want to comment on your remarks.\r\n\r\n> by-hue makes more sense to me than by-saturation. Usually you are looking for a shade of green, not any color with a certain saturation.\r\n\r\nI believe a fundamental partition by-saturation makes sense. Low saturation is more suited for large areas (facecolor), high saturation is more suited for small objects (text, marker, ...). Note that for example http:\/\/davidbau.com\/archives\/2013\/09\/28\/css_color_names.html also aggregates low-saturation colors together.\r\n\r\n> Like I really don't like splitting the grays\r\n\r\nThat [has always been there](https:\/\/matplotlib.org\/devdocs\/gallery\/color\/named_colors.html), but I agree it should be improved.\r\n\r\n> I'm partial to sorting on hues cause I'm usually looking at that table to find\/build a gradient?\r\n\r\nI would say, that the old one is not at all better for this:\r\n\r\nold: ![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/7f29af6b-124c-4748-a6a5-e2f258db5569) new: ![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/b1afb190-6793-458d-9e56-f64685ad6d81)\r\n\r\nThe strong variation on saturation makes the gradient uneven.\r\n\r\n\r\n\r\n","> The strong variation on saturation makes the gradient uneven\n\nThis is making me think that maybe the sort should be (hue, saturation) table, sorta like Google docs: ![Screenshot_20240316-204629.png](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/b52311d9-a63f-44b6-9a6c-16e8885b3673)\n\n","You could try, but google has the advantage that they can choose the colors, and thus choose a grid in (hue, saturation) space.\r\n\r\nThe CSS4 colors are unevenly spaced, so that it may be quite hard pressing them in a (hue, saturation) grid:\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.colors as mcolors\r\nhsv = np.array([mcolors.rgb_to_hsv(mcolors.to_rgb(c)) for c in mcolors.CSS4_COLORS])\r\nplt.scatter(hsv[:,0], hsv[:,1], c=mcolors.CSS4_COLORS)\r\nplt.xlabel(\"hue\")\r\nplt.ylabel(\"sat\")\r\n```\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/8d079537-1aa4-420a-8e28-4e1dea6a2a61)\r\n"],"labels":["Documentation: examples"]},{"title":"[ENH]: Type annotations do no pass reportUnknownMemberType","body":"### Problem\n\nLots of the functions on Figure and Axes don't pass `Pylance[reportUnknownMemberType]`. This makes it hard to use matplotlib with strict type checking enabled.\n\n### Proposed solution\n\nAdd type annotations to the **kwargs argument for all type declarations in figure.pyi","comments":["Is it possible to configure pylance to ignore this error on Matplotlib objects?","Doesn't look like it https:\/\/github.com\/microsoft\/pyright\/discussions\/6243, and even so I still think Matplotlib should aim to provide complete type annotations."],"labels":["New feature"]},{"title":"Simplify the qt backend by using buffers to construct the image to be restored","body":"## PR summary\r\n\r\nPass a numpy array when constructing a QImage in the qt backend(s), instead of dealing with pointers.\r\n\r\n**Motivation**:\r\nI'm fiddling with a new renderer (more on that at a not-too-distant future date :wink:), and it would be *super* convenient if I was able to implement a ``copy_from_bbox`` and ``restore_region`` in pure Python which is usable by the ``backend_qtagg`` machinery (at least during my prototyping phase). Unfortunately, the way this was done before this change it was impossible to create such a renderer in pure python... but now it is simply using the array interface and one additional method, it is easy for me to do that.  \r\n\r\n\r\nNote that in future, it is plausible that we remove ``PyBufferRegion`` entirely, and simply have a common (non-Agg specific) region representation (containing image & bounding box). Such a standardisation would take us a step closer to backends being separated from renderers (rasterising ones) - this is something that would dramatically simplify the backend machinery, IMO (plus is a motivation for me if I end up producing a new type of rasterising renderer). \r\n\r\n\r\nIn an earlier draft of this MR, I had removed the bounding box from the ``copy_from_bbox`` response (reflecting the fact that the response should be an image for the given bbox), but there are a number of places in which it is convenient to have the opaque response actually represent an image + a bounding box (e.g. in the widgets code). As a result, I pivotted on what we see in this MR - essentially, that means that a renderer is free to return a response from ``copy_from_bbox`` which is not actually representative of the given bbox (bigger, smaller, whatever).\r\n\r\nObvious reviewers of this PR are @QuLogic and @anntzer - of course, happy for others to review too :wink:","comments":["Ideally, I guess the goal of separating the rasterizer and the GUI (which would be great) would be attained once the qtagg backend can simply be `class FigureCanvasQTAgg(FigureCanvasAgg, FigureCanvasQT): pass` (with everything coming through multiple inheritance) and the (builtin) qtcairo backend can likewise be `class FigureCanvasQTCairo(FigureCanvasCairo, FigureCanvasQT): pass`.","> `class FigureCanvasQTAgg(FigureCanvasAgg, FigureCanvasQT): pass` (with everything coming through multiple inheritance)\r\n\r\nMaybe I'm a bit too ambitious, but I see the existence of ``FigureCanvasAgg`` as a failure to define the interface between ``FigureCanvas`` and ``Renderer`` clearly enough (or maybe I haven't fully grasped the reason for ``FigureCanvas`` to be renderer specific - a generic figure canvas can still forward on specific rendering requests, so no API change needed.\r\n\r\nI do think that it probably requires a ``RasterisingRenderer`` base class though, and I'm not clear what we do when a renderer can be both rasterising and a vector renderer (like your cairo renderer).\r\n\r\nUltimately, in that world the abstractions would be clear, and you would construct ``canvas = FigureCanvasQt(renderer_type=RendererAgg)`` (or equivalent at the ``_Backend`` level). I'm not sure if we would actually be able to get that far, so your multiple inheritance proposal may be the necessary approach pragmatically.","You need to have a FigureCanvasAgg because you need to be able to render figures in a headless context.  If anything, if switching to non-multiple-inheritance, FigureCanvasQTAgg() should be replaced by something like FigureCanvasAgg(gui=QtGui) rather than the other way round.  But (even though I agree that MI is messy) I think it would be a quite nasty refactor to get there.\r\n\r\n(I guess alternatively you could only have a RendererAgg and let figures not always have a canvas but sometimes only have a renderer, but that would be a pretty big refactor too.)","> (I guess alternatively you could only have a RendererAgg and let figures not always have a canvas but sometimes only have a renderer, but that would be a pretty big refactor too.)\r\n\r\nAgreed. This isn't desirable (and tells us that the renderer and the figure canvas abstractions are slightly wrong).\r\n\r\n> You need to have a FigureCanvasAgg because you need to be able to render figures in a headless context.\r\n\r\nI've been processing what you said here, and I think I'm not 100% I can understand the reasoning. The canvas is the thing that the renderer draws onto. Rasterising renderers can all draw onto their own internal pixel buffer, and then a standard interface can be used to put such a raster onto the appropriate canvas, right?\r\n\r\nIf I understand the problem is that some renderers can draw to multiple canvas types (not just rasters), and that therefore some will want to implement specific ``print_{fmt}`` methods. As I understand, the ``Antigrain`` library has no such functionality - you just get raw pixel buffers, and therefore technically, I think there should be a generic ``FigureCanvas`` which delegates to the appropriate ``PIL`` calls (as per the ``FigureCanvasAgg`` today). Clearly ``FigureCanvasCairo`` would still need to exist such that it can implement the appropriate ``print_`` methods to be able to leverage the functionality of ``cairo``, but it would *not* be necessary to use the ``FigureCanvasCairo`` for _graphical_ backends using ``cairo`` for rasterisation.\r\n\r\n\r\nIn summary:\r\n\r\n * A ``FigureCanvasForRasterRenderer`` (or some other name) would exist, and it would implement all of the appropriate ``print_{fmt}`` methods, with those simply taking raw pixel values and calling ``PIL`` (or equivalent)\r\n * A ``FigureCanvasQt``, ``FigureCanvasGTK``, ``FigureCanvasTK``, etc. which takes raw pixels from a ``RasterisingRenderer`` (which the canvas builds from the factory given at ``__init__``), and puts it on the appropriate GUI component, as well as handling events \/ coord transforms etc. from the specific windowing manager.\r\n * A ``FigureCanvasCairo`` which implements ``print_svg`` and other such raster and vector formats, by calling draw on the figure with the right renderer type. This figure canvas is tightly bound to the cairo renderer (i.e. it won't work with an Agg renderer).\r\n\r\n\r\nWith an architecture such as this, ``Agg``, ``Cairo`` and other rasterising renderers :wink: can all share the same GUI implementations, from what I can see. Yet it is possible for specific backends to refine the output (headless) formats, if they so exist (e.g. in cairo).","Your design sounds like a good idea, but there are still some issues with print_foo dispatch.  For example, currently if I set the backend to mplcairo.qt (FigureCanvasQt(rasterizer=MplCairoRenderer) in your API?) and call savefig to a svg format, the svg file will be generated with mplcairo.  In your proposed design, FigureCanvasQt probably(?) does not expose a print_svg method (unless you dynamically add those based on whatever the underlying renderer provides?) so matplotlib would just fall back to its default svg-able backend (which is the default svg backend).\r\nClearly such issues are fixable (by dynamically providing print_foo, as noted above, or by re-designing the format-to-backend dispatch algorithm), I'm just mentioning them there because they'll require some thought.","In any case, the patch looks correct to me, but I am not absolutely sure we can drop the various qt backcompat-related codes yet (possibly, I just haven't looked).","FWIW, I checked with pyqt6 locally and it was fine (as too was pyside and pyqt5). "],"labels":["GUI: Qt","backend: agg"]},{"title":"Matplotlib plt.show save image dialog box problem","body":"I am running on a Windows 11 machine with Ubuntu under WSL2, and using python3. I am not using a separate X server.\r\n\r\nWhen I issue a `plt.show()` command the figure gets displayed correctly. But when I click on the floppy disk icon to save the image to a file I get a full screen blank white background instead of a file selector dialog box. Hitting escape closes it.\r\n\r\nIs there something i have missed out when installing or configuring my environment?\r\n\r\nHope this is something obvious and stupid.\r\n\r\nThanks everyone,  Alan\r\n\r\n","comments":["Which backend and Matplotlib version are you using?\r\n\r\nIs the figure otherwise interactive (can you pan\/zoom etc)?","Hello tacaswell, thanks for your quick response.\r\n\r\nThe backend is `GTK3Agg`, and pan\/zoom etc work fine. It's just the save image button that fails.\r\n\r\nRegards,  Alan","Sorry forgot to add. I am running matplotlib v3.8.3\r\n","do you have the same problem with the qtagg backend?","I am a bit of a matplotlib novice tacaswell. I will give it a try but it will take a while. Thanks for your help.  Alan","`matplotlib.use('qtagg')` gives an error:\r\n\r\n`ImportError: Failed to import any of the following Qt binding modules: PyQt6, PySide6, PyQt5, PySide2`\r\n","`matplotlib.use('tkagg')` is more likely to have the needed extensions if you can not (or do not want to) install the qt bindings.\r\n\r\nIf the window is blank like that something somewhere is failing to run the event loop while waiting for user input.  Trying different toolkits can help pin down if this is a toolkit problem or a system problem.","OK I will give it a try later. Have to go now. Thanks again.","Thank you again tacaswell, using tkagg makes the save file dialog work. My only complaint is that the text in it is very small."],"labels":["OS: Microsoft","GUI: gtk","Community support","OS: Microsoft\/WSL"]},{"title":"[Bug]: Exported PDF figures cannot be modified by Adobe Illustrator correctly.","body":"### Bug summary\r\n\r\nUse `imshow` to generate a figure, and then save it as a `pdf` file. If you open the generated pdf figure in Adobe Illustrator, the figure in Adobe Illustrator becomes different. Colors are wrongly assigned.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nimport matplotlib\r\nprint(matplotlib.__version__)\r\n\r\na = np.array([[1, 2, 3], [4, 5, 6]])\r\nplt.matshow(a)\r\nplt.savefig(\u2018test.pdf\u2019)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/44856732\/5d61986b-2c83-4f01-a117-4a13a4b22dda)\r\n\r\n### Expected outcome\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/44856732\/4e15888e-7b49-49d8-b1b3-4eddadc8e666)\r\n\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\n_No response_\r\n\r\n### Matplotlib Version\r\n\r\n3.8.3\r\n\r\n### Matplotlib Backend\r\n\r\nmodule:\/\/matplotlib_inline.backend_inline\r\n\r\n### Python version\r\n\r\n3.10.13\r\n\r\n### Jupyter version\r\n\r\n7.0.8\r\n\r\n### Installation\r\n\r\nconda","comments":["Please show your full code.  Also do other viewers work? ","> Please show your full code. Also do other viewers work?\r\n\r\nThat's all the code I use. Only Adobe Illustrator doesn't work correctly.","> > Please show your full code. Also do other viewers work?\r\n> \r\n> That's all the code I use. Only Adobe Illustrator doesn't work correctly.\r\n\r\nThe shown code is certainly not complete. It only imports matplotlib and creates a numpy array. It does not call any matplotlib functions.","> > > Please show your full code. Also do other viewers work?\r\n> > \r\n> > \r\n> > That's all the code I use. Only Adobe Illustrator doesn't work correctly.\r\n> \r\n> The shown code is certainly not complete. It only imports matplotlib and creates a numpy array. It does not call any matplotlib functions.\r\n\r\nSorry, I\u2019ve updated the code. Thanks for this reminding.","I can reproduce this with Illustrator 2023.  But given that every other viewer handles this properly, including Acrobat and Photoshop, my tendency is to blame Illustrator. \r\n\r\n","Can someone with a valid illustrator license report this as a bug to them?  The pdf spec is complicated enough that it is possible that they have a bug, but it is also possible that we are emitting technically incorrect files and the other viewers are all buggy-in-a-useful-way or there is some undefined behavior gets lucky most of the time.\r\n\r\nMy guess is that something is going wrong with images use color palates which we recently fixed some bug with.  Does this work with older versions of mpl? ","Fair enough - this bisects to PR #25704. Before 8d42212418 the colors look fine in Illustrator\r\n\r\nI'm having a little conceptual trouble understanding why that would have caused the problem though...."],"labels":["backend: pdf"]},{"title":"Refactor some parts of ft2font extension","body":"## PR summary\r\n\r\nMainly, this is moving Python-specific code from `ftfont.{cpp,h}` to `ft2font_wrapper.cpp`; this keeps the Python code encapsulated in the one file. Also fixes the deprecation warnings that were typod in #27702.\r\n\r\nThis is based on #27885, and is a first step in moving to pybind11.\r\n\r\n## PR checklist\r\n\r\n- [n\/a] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [n\/a] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [n\/a] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [n\/a] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines","comments":["My reading of the mypy error is that it simply wants the stub to match the final status of the implementation by adding `@final` to decorate the class in the pyi. That makes sense to me, though didn't actually try it to check","build failures on windows do appear to be related here.","Ah, interesting that designated initializers are so new in C++ vs C."],"labels":["topic: text\/fonts"]},{"title":"[ENH]: AttributeError('... got an unexpected keyword argument ...') should set the .name attribute to the keyword","body":"### Problem\n\nI am in the process to write a library that uses the matplotlib library for its graphics needs. As such, most of \"our\" graphics functions are wrappers around existing matplotlib functions such as tripcolor, tricontour\u2026 A typical function of ours would be:\r\n\r\n```\r\ndef fun_name_altered(lib_objects, **kwargs):\r\n    args = prepare_args(lib_objects, **kwargs)\r\n    plt.fun_name(*args, **kwargs)\r\n```\r\n\r\nIn this case the `kwargs` dictionnary may contain keywords aimed at the `prepare_args` process and keywords aimed at controlling the plotting. At the moment, `prepare_args` removes keywords from the dictionnary when used so that in principle, when `kwargs` arrive at `plt.fun_name`, it should only contain keywords known to `plt.fun_name`\r\n\r\nHowever, if the user makes a mistake while setting the keyword for OUR part, it is not properly handled by `prepare_args` and it does remain inside `kwargs` and then is passed to `plt.fun_name` which then raises an `AttributeError('... got an unexpected keyword argument ...')`.\r\n\r\nI would like to be able to try and recover if that happens.\n\n### Proposed solution\n\nFrom the  [Built-in Exceptions documentation page](https:\/\/docs.python.org\/3\/library\/exceptions.html#bltin-exceptions)\r\n\r\n> The name and obj attributes can be set using keyword-only arguments to the constructor. When set they represent the name of the attribute that was attempted to be accessed and the object that was accessed for said attribute, respectively.\r\nChanged in version 3.10: Added the name and obj attributes\r\n\r\nI looked at the matplotlib codebase but I am not an expert programmer so I may be wrong but I think what I would like was that `Artist._update_props`  set the `name` attribute to `k` when raising the `AttributeError`.\r\n\r\nSince I am using Python 3.11 this would allow me to try and remove spurious keywords.","comments":["This seems reasonable to me.  My understanding is the same and it should just be a case of adding `name=k` here:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/0da2da00d5a884db9c7991c31ee81d1b5dc57b63\/lib\/matplotlib\/artist.py#L1193-L1194\r\n\r\nThis will break for python 3.9 but, according to the [NEP29 schedule](https:\/\/numpy.org\/neps\/nep-0029-deprecation_policy.html#support-table), we should be dropping support for that in April anyway.  So if we target this for Matplotlib 3.10 there will be no problem."],"labels":["New feature","API: argument checking"]},{"title":"[Bug]: constrained layout clips y-label above y-axis","body":"### Bug summary\r\n\r\nWhen placing the y-label above the y-axis\/spine, it gets clipped with constrained layout. It works OK with tight layout and on the left in constrained layout.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport matplotlib.pyplot as plt\r\nx = range(10)\r\nlab = \"foo bar baz\"\r\n\r\n# with extra space it works, but the second plot with two lines gets\r\n# clipped.\r\nfig0, axes0 = plt.subplots(1, 2, constrained_layout=True)\r\n[ax.plot(x, x) for ax in axes0]\r\n[ax.set_ylabel(\"\\n\".join([lab]*(i+1)),\r\n               y=1.0,\r\n               rotation=\"horizontal\",\r\n               horizontalalignment=\"left\",\r\n               multialignment=\"left\",)\r\n for i, ax in enumerate(axes0)]\r\n\r\n# single plot with one line also gets clipped\r\nfig1, ax1 = plt.subplots(constrained_layout=True)\r\nax1.plot(x, x)\r\nax1.set_ylabel(lab,\r\n               y=1.0,\r\n               rotation=\"horizontal\",\r\n               horizontalalignment=\"left\",\r\n               multialignment=\"left\",)\r\n\r\n# For reference it works fine when placing the ylab on the 'side'\r\n# as a conventional matplotlib plot\r\nfig2, ax2 = plt.subplots(constrained_layout=True)\r\nax2.plot(x, x)\r\nax2.set_ylabel(f\"{lab}\\n{lab}\",\r\n               rotation=\"horizontal\",\r\n               horizontalalignment=\"right\",\r\n               multialignment=\"right\",)\r\n\r\nfor i, fig in enumerate((fig0, fig1, fig2)):\r\n    fig.savefig(f\"fig{i}.png\")\r\n```\r\n\r\n### Actual outcome\r\n\r\nThe y-label gets clipped. The second plot should have a two line long y label. \r\n![fig0](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/666845\/d3d58412-9646-40d8-90a7-048bc5903fd9)\r\n\r\nIt also happens with a y-label that is just one line:\r\n![fig1](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/666845\/056c95b3-7159-49c9-bc14-db80cd485e99)\r\n\r\n\r\n### Expected outcome\r\n\r\nI would expect the y label to be included, even when putting it above the axis. Example with tight layout (`fig1.tight_layout()`)\r\n\r\n![fig1_tight](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/666845\/e60bfa47-eb5f-4515-be7c-107769562de2)\r\n\r\n\r\n### Additional information\r\n\r\nI *think* this is a bug(?).  \r\nI have tried various vertical alignments, and it doesn't make much of a difference. I also tried to follow the legend `set_in_layout`-example in the [constrained layout guide](https:\/\/matplotlib.org\/stable\/users\/explain\/axes\/constrainedlayout_guide.html#legends) without much luck.\r\n\r\nA temporary fix is to set the title to `' '` or increasing the constrained layout padding, I guess. \r\n\r\nNote that constrained layout works as expected with long y-labels on the left:\r\n\r\n![fig2](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/666845\/15f435ad-0150-41c3-8a55-6c2ec2346e3d)\r\n\r\n\r\n### Operating system\r\n\r\nWindows\r\n\r\n### Matplotlib Version\r\n\r\n3.8.0\r\n\r\n### Matplotlib Backend\r\n\r\nmodule:\/\/matplotlib_inline.backend_inline, but present in saved figures (`savefig`) \r\n\r\n### Python version\r\n\r\n3.12.1\r\n\r\n### Jupyter version\r\n\r\nJupyter console 6.6.3\r\n\r\n### Installation\r\n\r\nconda","comments":["This was a conscious decision to avoid the case of a really long vertical ylabel driving the layout to make a tiny axes.  For this situation I don't see the reason to use ylabel instead of text since you are doing all the placement manually anyway? ","That makes sense for a usual y-axis label.\r\n\r\nI think the second example (with a single line title) is not out of the ordinary and imho it should work as with tight layout.\r\n\r\nI want to provide a utility to match an existing template made for excel. I want to be as close to plain mpl as possible. So one would do `ax.set_ylabel('foo')` and then call `excelify(ax)` or something similar (`excelify` places the label in a more sophisticated way). [For a one-off drawing I would probably just hijack the axes title tbh].\r\n\r\nI would rather not replace it with a Text or a hijack the title as it would break `ax.yaxis.label`. [And I would have to explain people that they can't use `ax.set_ylabel`, but should use `excelify.set_ylabel(label, ax)` instead, which isn't great]\r\n\r\nAnyway, can I tell `constrained_layout` that I have made a conscious decision re the y-label's placement? And if so could that flagged if the y-label is moved manually? I would be happy to provide a patch.","I'm a little leery of too many toggles, but adding one is not out of the question. \n\nHowever, excelify could just as easily take whatever text is in the ylabel and make a new text object. Or as you suggest, add a dummy text object to force space for your ylabel.  The user need no know this is happening.  ","I mean, if a low-level placement parameter, like y, was used to set the y \r\nlabel placement, then constrained layout should let the user shoot \r\nthemselves in the foot and disable the mechanism you described in your \r\nfirst reply (probably guided by an internal variable). No need for a user \r\nfacing option.\r\n\r\nFor the specific problem I would rather not use a hack. I especially \r\ndon't want to break ax.yaxis.label.\r\n\r\n9 Mar 2024 02.19.41 Jody Klymak ***@***.***>:\r\n\r\n>\r\n> I'm a little leery of too many toggles, but adding one is not out of \r\n> the question.\r\n>\r\n> However, excelify could just as easily take whatever text is in the \r\n> ylabel and make a new text object. Or as you suggest, add a dummy text \r\n> object to force space for your ylabel. The user need no know this is \r\n> happening.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on \r\n> GitHub[https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27877#issuecomment-1986674261], \r\n> or \r\n> unsubscribe[https:\/\/github.com\/notifications\/unsubscribe-auth\/AAFCZXLWM75BEIYUQF7IQ43YXJPSNAVCNFSM6AAAAABELAQJOSVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTSOBWGY3TIMRWGE].\r\n> You are receiving this because you authored the thread.\r\n> [Tracking \r\n> image][https:\/\/github.com\/notifications\/beacon\/AAFCZXLJJDKQDYFJAED72TDYXJPSNA5CNFSM6AAAAABELAQJOSWGG33NNVSW45C7OR4XAZNMJFZXG5LFINXW23LFNZ2KUY3PNVWWK3TUL5UWJTTWNI7FK.gif]\r\n>\r\n","Finally dug into this.  This was a purposeful change that affected both `tight_layout` and `constrained_layout`.  https:\/\/github.com\/matplotlib\/matplotlib\/pull\/17222. The reason it doesn't look like a problem with tight_layout is that it has a (much) larger margins - if you put a three-line ylabel in with tight_layout it is similarly cutoff.\r\n\r\nI'm not sure checking of the user manually specified y is a very good heuristic for toggling off this behaviour. Someone could have a tweaked y to be 0.2 or 0.7 for whatever reason and would want to keep the behaviour as-is\r\n\r\nSo things are working as expected, and this is not a bug per-se.  A toggle could likely be added if someone were motivated and the API could be clean enough.  ","Thanks for the the reference and fair enough. \r\nDo you have any ideas on an acceptable heuristic for detecting when not to cut off long labels?\r\n\r\n~~Last question re my problem at hand, if you will permit. As I read the constrained layout guide, I can only change padding between subplots, not around plots. Is that correct? I am leaning towards \"hijacking\" ax.title now...~~ edit: `fig.get_layout_engine().set(rect=(0,0,1,.97)) # (left, right, width, height)` seems to work for setting the margin in constrained layout. "],"labels":["topic: geometry manager"]},{"title":"[ENH]: out-of-tree Pyodide builds in CI for Matplotlib","body":"### Problem\n\nHi there! I am opening this feature request to gauge ideas and comments about out-of-tree Pyodide builds, i.e., wasm32 wheels via [the Emscripten toolchain](https:\/\/emscripten.org\/) for Matplotlib. In my most recent work assignment, I am working on improving the interoperability for the Scientific Python ecosystem of packages with Pyodide and with each other, which shall culminate with efforts towards bringing interactive documentation for these packages where they can then be run in [JupyterLite notebooks](https:\/\/jupyter.org\/try-jupyter\/lab\/index.html), through nightly builds and wheels for these packages pushed to PyPI-like indices on Anaconda, at and during a later phase during the project.\r\n\r\nThis project is being tracked at https:\/\/github.com\/Quansight-Labs\/czi-scientific-python-mgmt\/issues\/18.\n\n### Proposed solution\n\nThis issue proposes out-of-tree builds for `matplotlib` on its own CI and build infrastructure. I would be glad to work on this. This is how it would proceed, tentatively:\r\n\r\n1. A CI pipeline on GitHub Actions where Emscripten\/Pyodide builds for the development version of `matplotlib` are pursued\r\n2. Testing the built wheels against a Pyodide wasm32 runtime virtual environment within the same workflow\r\n3. Fixing up and skipping failing tests as necessary based on current Pyodide limitations and ensuring that all relevant test cases pass.","comments":["I already have a branch on my fork of Matplotlib where a few workflow runs have succeeded in the compilation and the wheel is being built: https:\/\/github.com\/agriyakhetarpal\/matplotlib\/actions\/runs\/8161780336\/job\/22311265339. \r\n\r\nI am working on running the tests, which are failing because of circular imports. It seems to be picking up the current (root) directory \u2013 I would appreciate any suggestions on how to run the test suite in this case (it works locally, but we are limited by the fact that the `matplotlib.test()` pathway has been deprecated now).","Based on https:\/\/matplotlib.org\/devdocs\/devel\/testing.html#testing-released-versions-of-matplotlib, I am assuming I need to additionally check out the GitHub repository and [copy the baseline images](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html#obtain-the-reference-images) to where I installed the Matplotlib wheel...\r\n\r\nEdit: done in https:\/\/github.com\/agriyakhetarpal\/matplotlib\/actions\/runs\/8173325260\/job\/22345664858 where I am downloading the built wheel artifact in another job (that needs the first one to pass) and doing a sparse checkout of the baseline images to copy to the Matplotlib installation inside the virtual environment. I am facing issues with test collection \u2013 `TypeError: the 'package' argument is required to perform a relative import for '.venv-pyodide.lib.python3.11.site-packages.matplotlib.tests'` and I am unsure how to fix that!\r\n","Another progress update via [this workflow run](https:\/\/github.com\/agriyakhetarpal\/matplotlib\/actions\/runs\/8174953705\/job\/22351061451) \u2013 tests are now being collected, but fail to run because Matplotlib fails to be imported \u2013 this is due to the existence of the `import threading` statement[^1] in `font_manager.py`, `figure.py`, `pyplot.py` and some more files. I am not sure what alternatives https:\/\/github.com\/pyodide\/matplotlib-pyodide\/ is using to get access to the plotting backends?\r\n\r\nIt is to note that the in-tree Pyodide build does contain patches to repeal the use of threads, which I can adopt:\r\n\r\n1. https:\/\/github.com\/pyodide\/pyodide\/blob\/main\/packages\/matplotlib\/patches\/0002-fix-threading.patch\r\n2. https:\/\/github.com\/pyodide\/pyodide\/blob\/main\/packages\/matplotlib\/patches\/fix-threading.patch\r\n\r\n[^1]: https:\/\/github.com\/pyodide\/pyodide\/issues\/237","Some more progress: I added a patch to disable the use of threading and skipped certain tests that were importing the threading standard module (threading is not supported in Pyodide yet). Next, I have split the build and test steps into two separate jobs that share artifacts (the wheel, in this case). The testing job then checks out the baseline images from the Matplotlib repository and copies them into the installed Matplotlib inside the virtual environment set up by Pyodide, and runs the `pytest` invocation from there (this is due to the lack of a `matplotlib.test()` API, which has been deprecated).\r\n\r\nIt seems that my patch is not entirely correct, because the tests seem to proceed to collect, but fail and the interpreter prints out a random seed (supposedly set by NumPy) without any other stack trace. This makes it difficult to debug what is happening.\r\n\r\nHere are the logs: https:\/\/github.com\/agriyakhetarpal\/matplotlib\/actions\/runs\/8187758884\/job\/22390718867#step:11:43\r\n","We used to have the threading imports protected, but removed them in  #23073 because we thought pyodide no loger needed them.\r\n\r\nHappy to take those back in if needed.","Hi @tacaswell, I did have further progress after my last comment and disabled the threading imports where needed \u2013 but it looks like this could be, and remain, stalled for a while due to some unresolved symbols (please see the linked issue above) where my inexperience beats me.\n\nI do have working patches and a reliable CI job in a branch on my fork where the rest of the build procedure seems to be working, though. It isn't ready for a PR yet until I have a fully working test suite that completes itself, but I'm more than happy to open a draft PR if by doing so it can meet more eyes (and possibly drive progress towards resolution).","I'd switch to the [testing method that scikit-learn uses](https:\/\/github.com\/scikit-learn\/scikit-learn\/blob\/main\/build_tools\/azure\/pytest-pyodide.js) to see if that fixes the missing symbol issues. If that doesn't help, let's look at them in more detail."],"labels":["New feature"]},{"title":"[Bug]: Adding suptitle in compressed layout causes weird spacing","body":"### Bug summary\r\n\r\nIf I create a \"compressed\" layout with two rows with both subplots having fixed aspect ratios, adding a suptitle will insert the space between the suptitle and the plots. I would expect the excess space to be put in below the subplots.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nfig, (ax0, ax1) = plt.subplots(\r\n    nrows=2, figsize=(4, 10), layout=\"compressed\",\r\n    gridspec_kw={\"height_ratios\": (1 \/ 4, 3 \/ 4), \"hspace\": 0}\r\n)\r\n\r\nax0.axis(\"equal\")\r\nax0.set_box_aspect(1\/3)\r\n\r\nax1.axis(\"equal\")\r\nax1.set_box_aspect(1)\r\n\r\n# Adding suptitle causes weird spacing\r\nfig.suptitle(\"Title\")\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nWith suptitle:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/5758119\/16ebf4fb-5484-4457-b5d5-6a3d4b530e2f)\r\n\r\nWithout suptitle:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/5758119\/c6ee87e5-9a4e-4db6-ba78-1d1701ae3540)\r\n\r\nNotably, this also happens without defining the gridspec kwargs.\r\n\r\n### Expected outcome\r\n\r\nI would expect the extra spacing to be added at the bottom, not be inserted between the suptitle and the plots.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nOSX\r\n\r\n### Matplotlib Version\r\n\r\n3.8.0\r\n\r\n### Matplotlib Backend\r\n\r\nmodule:\/\/matplotlib_inline.backend_inline\r\n\r\nI am running this inside jupyter lab, but this persists even if I save the figure to a file.\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip","comments":["Hi as I want to working on it, please let me known this is your expected output\r\n<img width=\"548\" alt=\"Screenshot 2024-03-06 at 1 04 10\u202fAM\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/135497031\/2990fdfc-d687-4b4b-9e89-bee2f87d733e\">\r\nplease tell me in which file I need to make pull request for this issue","How can I make pull request for this issue by making new file in this repo or by editing in any other folder????","It seems like your fix involves adding the following code:\r\n\r\n```python\r\nplt.subplots_adjust(top=0.9)\r\n```\r\n\r\nHowever, this seems to produce the following error:\r\n```\r\nUserWarning: This figure was using a layout engine that is incompatible with subplots_adjust and\/or tight_layout; not calling subplots_adjust.\r\n```\r\n\r\nThis seems to indicate that this particular line of code isn't doing anything. And really, I don't see any difference in the figure.","I would not say that this is a bug: `suptitle` is adding the title to the top of the figure, as expected.  Compressed layout removes space from between the subplots by moving them together, as expected.  The inline backend automatically removes excess space from around the figure, but that is not the default in Matplotlib generally.\r\n\r\nIt could be a feature request to have compressed layout move `suptitle`, `supxlabel` and `supylabel` close to the axes.  I have no idea how easy that would be to implement.  I would want such a feature to be optional as I have use-cases where I want the axes central but a main title at the top, and I keep the original figure size.","Ah, I see, so the inline layout is removing the space from the bottom. So, in reality, the two plots are vertically centered, it's just not showing up in jupyter lab. Am I getting this right?\r\n\r\nWhat I really want to achieve is have the plots stack from the top-down. And I know what aspect ratio I want the subplots to have. I don't really care how tall the final plot is, I just want to be able to set its width, and then have the height expand as needed. From my understanding, matplotlib doesn't really support this easily? Do you have any idea how I might go about doing this?","@pavlin-policar you will definitely have to work around this issue. But how depends on why are you choosing to use suptitle in this situation versus a title on the top axes.  ","> So, in reality, the two plots are vertically centered, it's just not showing up in jupyter lab. Am I getting this right?\r\n\r\nYes, that\u2019s right.","Yes, you are right.\r\n\r\n> Do you have any idea how I might go about doing this?\r\n\r\nA cheap workaround would be to use `ax0.set_title()` to set the title above the top axes. This is not really the same as the suptitle is centered over the figure but the Axes title is centered over the Axes box, but might be sufficient.\r\n\r\nIf you really want a suptitle, you'll have to tune the vertical position:\r\n\r\n- either completely manual: `fig.suptitle(\"Title\", y=0.78)`\r\n- or by calculating the position:\r\n  ```\r\n  fig.draw_without_rendering()  # to calculate the Axes positions in the layout\r\n  pad = 0.01  # in fractions of the figure height\r\n  fig.suptitle(\"Title\", y=ax0.get_position().y1 + pad, verticalalignment=\"bottom\")\r\n  ```\r\n","Thank you all for the wonderful suggestions!\r\n\r\nIn my actual use case, I have a 2 by 2 grid of subplots, so setting the axis title for the the top-left axis wouldn't work, since the title wouldn't be centered on the overall plot. I only posted a minimal example to reproduce my problem.\r\n\r\n@timhoffm The second solution worked well for me. When saving to a file, it's important then to add `bbox_inches=\"tight\"`, which clips off the extra whitespace from the top and bottom of the plot. Otherwise, the excess whitespace gets saved as well.\r\n\r\nJudging by all your (very helpful) comments, I suppose this isn't really a bug, but expected behavior, so I'll close the issue. The solution does feel a bit hacky though and I do wish there was like a `layout=\"stack_vertical_and_ignore_height\"` option that would do what I wanted, but I'm sure it's a fairly uncommon use-case.","I think this could stay open if someone wanted to fix it.  I think it would just take a bit of logic in compressed layout to check for suptitle "],"labels":["topic: geometry manager"]},{"title":"[Doc]: Release docs include Next what's new pages","body":"### Documentation Link\n\nhttps:\/\/matplotlib.org\/stable\/users\/next_whats_new.html\n\n### Problem\n\nIdeally this page shouldn't be in the docs for releases.\n\n### Suggested improvement\n\n_No response_","comments":["I don't think it is a real problem, the page is not linked to from https:\/\/matplotlib.org\/stable\/users\/release_notes.html\n\nSo while yes it exists, it only is accessible by actively going to the url. (Or I guess by version switching from devdocs, at which point I don't really see a practical difference between loading an empty page and a 404)\n\nThe exclusion of the link from the parent page is managed automatically by checking for the release mode tag at build time.\n\nI'm of the opinion that adding a manual step back to the release docs generation is clearly the wrong path forward, and that the complexity of an automated solution here is likely worse than the problem.","It's in the sidebar of https:\/\/matplotlib.org\/stable\/users\/release_notes.html.  Is there a way to exclude it from there?  It wasn't there for v3.7.","The sidebar is empty since #27800. So that\u2019s not an issue anymore.","The sidebar on e.g., https:\/\/matplotlib.org\/devdocs\/users\/prev_whats_new\/whats_new_3.8.0.html isn't empty though, and that shows up with \"Next what's new?\" and \"Next API changes\" at the top of the sidebar:\r\n<img width=\"396\" alt=\"Screenshot 2024-03-05 at 19 50 20\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/6197628\/c7d95266-637e-4392-b87b-5b5bcfbbf70f\">\r\n\r\n","Yes, but #27800 deactivates that sidebar and is milestoned for 3.9.","As far as I can tell, it only deactivates it for one page, https:\/\/matplotlib.org\/devdocs\/users\/release_notes.html, and not other pages, e.g., https:\/\/matplotlib.org\/devdocs\/users\/prev_whats_new\/whats_new_3.8.0.html. The sidebar is turning up on the previous link, which is a devdocs link.","Oh, I see. Then, #27800 should be extended to show blank sidebars as well for `api\/prev_api_changes\/*` and `users\/prev_whats_new\/*`, which are logical subpages of the release notes.\r\n\r\nOn a side note, the relation between the logical toc hierarchy and the file structure is not quite trivial \ud83d\ude22. \r\n","I think being on the \"What's new for 3.8\" and being able to see the section navigation is useful though, for example to go to the API changes or GitHub statistics. Surely the right solution to this is find a way to exclude \"Next what's new\" and \"Next API changes\" from release builds?","> I think being on the \"What's new for 3.8\" and being able to see the section navigation is useful though, for example to go to the API changes or GitHub statistics. \r\n\r\nI agree in theory, but due to the somewhat convoluted structure the menu is rather unusable. Note that there is a mix of 3.8.0 and 3.8.1 topics and \"Github statistics for 3.8.1\" even appears twice:\r\n\r\n![grafik](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/9bfb15b4-d02c-4516-9204-a4960b231bbc)\r\n\r\nSo until someone tries to untangle our incongruent use of logical hierarchy (sections) and page hierarchy, this side bar is rubbish."],"labels":["Documentation"]},{"title":"Add ten-color accessible color cycle as style sheet","body":"## PR summary\r\n\r\n(Following up from email.)\r\n\r\nAdds a style sheet with the ten-color color cycle survey palette from Petroff (2021) [which will be published in a journal eventually]:\r\nhttps:\/\/arxiv.org\/abs\/2107.02270\r\nhttps:\/\/github.com\/mpetroff\/accessible-color-cycles\r\n\r\nRelated to (but does not fix) #9460.\r\n\r\nAt the moment, this PR contains only the minimal changes. I've only added the ten-color sequence from the paper and only done so as a style sheet.\r\n\r\nThe paper additionally contains six- and eight-color sequences, which could also be added.\r\n\r\nWould it be better to add to `_BUILTIN_COLOR_SEQUENCES` in `lib\/matplotlib\/colors.py` with data in `lib\/matplotlib\/_cm.py` instead of as a style sheet?\r\n\r\nI'm also open to naming suggestions. The current name is the placeholder I've been using, with `ccs` standing for \"color cycle survey\".\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [N\/A ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines","comments":["I am very much in favor of taking this, but agree the name needs some workshopping.\r\n\r\nWe may also want to add these sequence(s) to https:\/\/github.com\/matplotlib\/matplotlib\/blob\/cb8c484681a19fc39fcb786a521af4f2d52126c6\/lib\/matplotlib\/colors.py#L119-L132","If it is ready in the next week or so, it can go in 3.9, but I think it is important to get the names and such rather rather than rushing it through.","@mpetroff great to see this! As a user, I am in favor of adding the 6- and 8-color cycles."],"labels":["accessibility","topic: styles","topic: color\/cycle"]},{"title":"[TST] Upcoming dependency test failures","body":"The weekly build with nightly wheels from numpy and pandas\nhas failed. Check the logs for any updates that need to be\nmade in matplotlib.\nhttps:\/\/github.com\/matplotlib\/matplotlib\/actions\/runs\/8120774021","comments":["I think this is related to https:\/\/github.com\/numpy\/numpy\/pull\/25168\r\n\r\nI believe the direct problems are now sorted upstream by https:\/\/github.com\/numpy\/numpy\/pull\/25922 (though the likes of pandas and our internal test structures may still need to grow a `copy` arg for future proofing)\r\n\r\nThis may also to be tangentially related to Pandas and their efforts to move to Copy on Write (CoW) semantics, removing the \"copy\" kwarg in some instances (though I think those were largely at least intended to undergo deprecation).\r\n\r\n@ngoldbaum can you confirm?","That\u2019s right, the initial version of those changes were broken (sorry!) and should be fixed now.\r\n\r\nAny array-like in matplotlib and elsewhere implementing the `__array__` protocol needs to grow a `copy` keyword argument. Also any places with `np.array(\u2026, copy=False)` that lead to an error about not being able to do the operation without a copy, you likely want `np.asarray` instead. The old behavior of `copy=False` wasn\u2019t really \u201cnever copy\u201d it was more like \u201conly copy if needed\u201d which is the default semantics for `asarray`."],"labels":["third-party integration: pandas"]},{"title":"[DOC]: clarify that `markevery[float]` considers path length along drawn line","body":"### Bug summary\n\n`markevery[float]` is supposed to result in evenly distributed markers, but when y-data is noisy, its effect seems to \"gradually\" fade away.\n\n### Code for reproduction\n\n```Python\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nx = np.linspace(1e3, 1e7, 1000)\r\n\r\nfig, ax = plt.subplots(nrows=3, ncols=3, figsize=(9, 9), layout=\"constrained\")\r\n\r\nfor i, ax_i in enumerate(ax.flatten()):\r\n    ax_i.set_title(f\"noise level = {i\/5:.1f}\")\r\n    y = np.exp(x**0.1) + np.random.rand(len(x)) * i\/2\r\n    ax_i.plot(x, y, 'b.-', markevery=0.1, ms=10, markerfacecolor=\"r\")\r\n    ax_i.set_xscale(\"log\")\r\n    ax_i.set_yscale(\"log\")\n```\n\n\n### Actual outcome\n\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/14086031\/dd0956c8-49dc-4f3d-a002-6a260bb798d6)\r\n\n\n### Expected outcome\n\nAll subplots be like the one with 0 noise level.\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nUbuntu\n\n### Matplotlib Version\n\n3.8.3\n\n### Matplotlib Backend\n\nmatplotlib_inline.backend_inline\n\n### Python version\n\n3.10.13\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip","comments":["From the docs:\r\n\r\n> e.g., if every=5, every 5-th marker will be plotted.\r\n\r\nSo I think you should be using a value > 1 (instead of 0.1). If you set e.g. `markevery=4` does it behave as expected?\r\n\r\nRegardless it would be nice to either warn or error if a value < 1 is passed here.","@dstansby um, no. Float has separate semantics \r\n\r\n> every=0.1, (i.e. a float): markers will be spaced at approximately equal visual distances along the line; the distance along the line between markers is determined by multiplying the display-coordinate distance of the axes bounding-box diagonal by the value of every.\r\n\r\nBut that said, I still believe the plot is correct. Markevery still always chooses actual data points, and the noise just shows through in them.","Well 0.1 means about 10 data points but as the noise increases there are clearly far more than 10 data points. \n\nThat said, I consider this a pretty bad visualization technique. I'm not shocked it doesn't work well, particularly for logarithmic axes.  So I agree this is a bug, but I'm not sure how fixable it is.  ","There's a real use case: The loss during training an ML model is usually smooth at the beginning and progressively begins to fluctuate, which makes it a bit noisy. Plus, the loss tends to slow down very quickly and so must be plotted on a log scale x-axis. This means that you get exponentially more points towards the end. On top of that, when plotting different training scenarios in a single figure, the jiggles makes reading and interpreting the plots very difficult. It's very useful in such cases to only see finite number of markers for each plot.","I can appreciate signals with different signal to noise ratios, but I don't think counting on Matplotlib's heuristic here is the right approach.  I would plot the raw data, and then decimate manually based on what works properly for the data interpretation.    \r\n\r\n> the jiggles makes reading and interpreting the plots very difficult. It's very useful in such cases to only see finite number of markers for each plot.\r\n\r\nIf I had this problem, I'd smooth out the jiggles rather than subsampling them, as you are just going to alias the jiggles to the subsampled data.  ","Fair enough, but even ignoring the jiggles, for even slightly noisy data that are linearly sampled but plotted on log scale, `markevery` is pretty helpful, but seems to be sensitive to noise, and hence not reliable.","Agreed that it's not reliable!  Someone could try and fix, but....","Without having time to dig into this; I suspect that we are sampling with a fixed distance along the data curve. While a smooth curve has a total length of approximately the width of the Axes, a noisy curve is much longer and thus gets more data points.","That sounds likely. To my point that this should be done manually but he user, that is one heuristic that works for data where spacing along the line is reasonable.  Here the OP wants the spacing in x, which is a different algorithm. ","Above comments are correct - if instead the distance is parallel to the x-axis, instead of along the curve (it's a one line diff, see bottom of this comment) the output is what I think is desired:\r\n\r\n<img width=\"629\" alt=\"Screenshot 2024-03-04 at 20 02 11\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/6197628\/675c6a70-bb83-4e43-8461-7f0bcd070869\">\r\n\r\nI guess we could add *another* input type to `markevery` to do this, perhaps allow `dict[Literal[\"x\", \"y\"], float]` so something like `{\"x\": 0.1}` would do spacing evenly parallel to the x-axis?\r\n\r\n\r\n\r\n```diff\r\ndiff --git a\/lib\/matplotlib\/lines.py b\/lib\/matplotlib\/lines.py\r\nindex 5e5c19c9f6..752b805e4f 100644\r\n--- a\/lib\/matplotlib\/lines.py\r\n+++ b\/lib\/matplotlib\/lines.py\r\n@@ -179,7 +179,8 @@ def _mark_every_path(markevery, tpath, affine, ax):\r\n             delta = np.empty((len(disp_coords), 2))\r\n             delta[0, :] = 0\r\n             delta[1:, :] = disp_coords[1:, :] - disp_coords[:-1, :]\r\n-            delta = np.hypot(*delta.T).cumsum()\r\n+            # Calculate distance parallel to x-axis\r\n+            delta = delta[:, 0].cumsum()\r\n             # calc distance between markers along path based on the Axes\r\n             # bounding box diagonal being a distance of unity:\r\n             (x0, y0), (x1, y1) = ax.transAxes.transform([[0, 0], [1, 1]])\r\n```","I'll label this as feature request, as existing options are working as intended.","Changing to distance along the x-axis will do weird things for spirals and other cases where the y values are not a function (in the math sense) of x.","One action here is to better document that [float]  sub samples along the path.\r\n\r\nI\u2019m -0.5 on adding subsampling along x. First, subsampling is generally a questionable operation and needs to be employed with great care - there are often better aggregation techniques. Second, there\u2019s likely only a very small subset of cases where subsampling is reasonable *and* subsampling along x is better than the existing subsampling along the path. Third, it\u2019s not too hard to create a numpy mask for that yourself. And finally, I don\u2019t see how we can fit this additional semantics in the existing markevery API (and IMHO additional keywords would be overboard here).","I agree - I think expanding this functionality is the wrong direction, and if anything I think we should discourage it, and rather encourage folks to figure out their subsampling on their own.  But I could be convinced if there is prior art that shows this being done in a robust way....","I agree with @timhoffm the right path here is better documentation\r\n\r\n> distances along the line; the distance along the line between markers is determined by multiplying the display-coordinate distance of the axes bounding-box diagonal by the value of every.\r\n\r\nI'm reading this as the markers are spaced by approximately `every*axes_diagonal_in_screen_space` pixels along the path length along the line.  This is not the clearest, but I also would not say it is wrong.\r\n\r\n-----\r\n\r\nI think we do have to have this functionality internally because getting it right (leaving aside that small noise on top of a big value on log scale makes it go funny) requires knowing the details of our transform stack and the current view limits.  With `markevery=0.1` as you pan\/zoom around which points we mark will dynamically update.\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nr = np.linspace(1, 10, 256)\r\ntheta = np.linspace(0, 6*n.pi, 256)\r\ntheta = np.linspace(0, 6*np.pi, 256)\r\nplt.plot(r*np.cos(theta), r*np.sin(theta), markevery=.1, marker='o')\r\nplt.show()\r\n\r\n```\r\n","You all make valid points. As an outsider (user vs. MPL dev) though, I see `markevery` simply as a way to declutter a multi-line figure with many markers. From this perspective, the implementation shouldn't get in the way of the goal."],"labels":["Documentation","Documentation: API"]},{"title":"[Bug]: Font fallback doesn't work on \\mathdefault","body":"### Bug summary\r\n\r\nPer character font fallback (#20740) works great, except in tick labels.\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport matplotlib.pyplot as plt\r\n\r\n# CMU fonts available here : https:\/\/www.1001fonts.com\/download\/cmu.zip\r\nplt.rcParams[\"font.family\"] = [\"CMU Bright\", \"DejaVu Sans\"]\r\n\r\ns = \"There are \\u2212 \\u00D7 in between!\"\r\nplt.figtext(0.18, 0.45, s)\r\nplt.gcf().suptitle(s)\r\nplt.gca().set_title(s)\r\nplt.xscale(\"log\")\r\nplt.xlim(1e-2, 6e-2)\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nIn the tick labels, characters not covered by CMU Bright are rendered with a placeholder instead of falling back to DejaVu\r\n<img width=\"640\" alt=\"image\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/41047847\/f6d4a192-9aad-443f-af96-b53b308f18df\">\r\n\r\n\r\n### Expected outcome\r\n\r\nTick labels should fall back to DejaVu for `\\u2212` (minus sign) and `\\u00D7` (times sign) as in the other text instances.\r\n\r\n### Additional information\r\n\r\nIt seems to happen only with tick labels, other instances of text rendering work as intended in #20740. I get the same outcome with both `macosx` and `TkAgg` backends\r\n\r\nI get the following warnings:\r\n```\r\nFont 'default' does not have a glyph for '\\u2212' [U+2212], substituting with a dummy symbol.\r\nFont 'default' does not have a glyph for '\\\\times' [U+d7], substituting with a dummy symbol.\r\n```\r\n\r\n### Operating system\r\n\r\nmacOS 14.3.1\r\n\r\n### Matplotlib Version\r\n\r\n3.8.3\r\n\r\n### Matplotlib Backend\r\n\r\nMacOSX\r\n\r\n### Python version\r\n\r\n3.11.7\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip","comments":["This is some specific thing to do with mathtext which seems to some special glyph mapping itself, but the odd thing is that if you wrap the other text in `$`, that doesn't repeat the bug.","Ah, the difference is that the ticks wrap their text in `\\mathdefault` which picks up `CMU Bright` that you set, but regular math text would use the fonts from the `mathtext.*` rcParams, so that's why the regular text appears to work even when wrapped in `$`.\r\n\r\nSo the bug is that in mathtext, `\\mathdefault` text only uses the first font specified as the default. A shortened reproducer is:\r\n```\r\nimport matplotlib.pyplot as plt\r\n\r\n# CMU fonts available here : https:\/\/www.1001fonts.com\/download\/cmu.zip\r\nplt.rcParams[\"font.family\"] = [\"CMU Bright\", \"DejaVu Sans\"]\r\n\r\ns = \"$\\\\mathdefault{\\u2212 \\u00D7 \\\\times}$\"\r\nplt.figtext(0.5, 0.5, s, fontsize=30, horizontalalignment='center')\r\nplt.show()\r\n```\r\nwhich \"works\" if you replace `\\mathdefault` with `\\mathrm`."],"labels":["topic: ticks axis labels","topic: text\/fonts","topic: text\/mathtext"]},{"title":"Mouse Move and Click events do not work in Jupyter ","body":"https:\/\/github.com\/matplotlib\/matplotlib\/blob\/bf6cc30c0282917d8da2befa1f9379083291d41a\/galleries\/examples\/event_handling\/coords_demo.py#L3-L7\r\n\r\nAs per https:\/\/stackoverflow.com\/questions\/78044346\/cant-capture-mouse-and-click-events-from-jupyterlab-4-1-2-matplotlib-interactiv Mouse Move and Click events do not appear to work in Jupyter.  \r\n\r\nIf it can't be fixed, at the very least the documentation should list the backends that do support this feature. ","comments":["This would seem to be a report for Jupyter or ipympl.  I dont think our docs can reasonably list every backend that has been developed and state what types of interactivity they support.  \n\nFor you case you can do %matplotlib qt5 and a window will pop up that should work fine on your local machine.  If you are working remotely you may have to get this fixed in ipympl.  "],"labels":["third-party integration: jupyter"]},{"title":"[SVG] Use monotonically-increasing counter for non-rectangular clip-path identifiers","body":"## PR summary\r\nThis pull request is intended to improve the reproducibility of SVG output from `matplotlib`, by removing variability from the ID generation scheme for the identifiers of `<clipPath>` XML elements (and references to them).\r\n\r\nIn particular, use of the Python built-in `id(...)` function, that retrieves an integer identifier for an object in memory at runtime -- not _necessarily_ a memory address, but often so -- is removed and replaced by a monotonically increasing counter value.\r\n\r\nCloses #27831.\r\n\r\n## PR checklist\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n  - [x] Minimal test coverage has been added.\r\n  - [ ] Adding some [previously-recommended test coverage](https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27831#issuecomment-1992449717) would be an improvement.\r\n- [ ] ~~*Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)~~\r\n- [x] *New Features* ~~and *API Changes*~~ are noted with a [~~directive and~~ release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [ ] ~~Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines~~","comments":["Comment-pinging to check for possible review on this PR - thank you!","sorry for the delay. ","No problem, thank you for the comments!"],"labels":["backend: svg"]},{"title":"[Bug]: Nondeterminism in SVG clipPath element id attributes","body":"### Bug summary\r\n\r\nHello - I'm trying to make the [`astroplan`](https:\/\/github.com\/astropy\/astroplan) documentation build [reproducibly](https:\/\/reproducible-builds.org\/) in Debian, and have found a snag: despite configuring the [`svg.hashsalt`](https:\/\/matplotlib.org\/stable\/users\/explain\/customizing.html?highlight=svg.hashsalt#matplotlibrc-sample) to successfully make `path` identifiers in some SVG plots generated by `matplotlib` deterministic, there is a remaining problem that `clipPath` identifiers are nondeterministic.\r\n\r\nThe cause appears to be the use of Python object ID (via [`id(...)` calls here](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/c23ccdde6f0f8c071b09a88770e24452f2859e99\/lib\/matplotlib\/backends\/backend_svg.py#L622)) when [generating `clippath` IDs](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/c23ccdde6f0f8c071b09a88770e24452f2859e99\/lib\/matplotlib\/backends\/backend_svg.py#L631).\r\n\r\n### Code for reproduction\r\n\r\n```Python\r\nimport matplotlib as mpl\r\nimport matplotlib.pyplot as plt\r\nimport sys\r\n\r\nmpl.rcParams[\"svg.hashsalt\"] = \"fixed-salt\"\r\n\r\nfig = plt.gcf()\r\nfig.add_subplot(projection=\"polar\")\r\n\r\nplt.savefig(sys.stdout.buffer, format=\"svg\")\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nDifferences appear in the `clipPath` identifiers and their references from elsewhere in the SVG output.\r\n\r\n### Expected outcome\r\n\r\nWhen an `svg.hashsalt` value is configured, the SVG output should be deterministic.\r\n\r\n### Additional information\r\n\r\nThis could arguably be an enhancement request rather than a bug.\r\n\r\nConfiguring a static `PYTHONHASHSEED` value does not help to produce deterministic results.\r\n\r\n### Operating system\r\n\r\nDebian GNU\/Linux (trixie)\r\n\r\n### Matplotlib Version\r\n\r\n3.6.3\r\n\r\n### Matplotlib Backend\r\n\r\nTkAgg\r\n\r\n### Python version\r\n\r\nPython 3.11.8\r\n\r\n### Jupyter version\r\n\r\nN\/A\r\n\r\n### Installation\r\n\r\nLinux package manager","comments":["### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the\nMatplotlib internals. To get started, please see our [contributing\nguide](https:\/\/matplotlib.org\/stable\/devel\/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull\nrequests (PRs). If there are none, feel free to start working on it. If there is an open PR, please\ncollaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication\nchannels](https:\/\/matplotlib.org\/stable\/devel\/contributing.html#get-connected).","I agree with the analysis.  We need a way to uniquely identify the clip paths within a single rendering (so that we only write the clip path once and can reuse it by reference).\r\n\r\nOptions that won't work:\r\n - use `hash` instead of `id` because we do not define a custom `__eq__` or `__hash__` on `Path` objects (and if we did, we would have to declare `Path` object un-hashable because they can be mutable) so this will still not be deterministic.\r\n - use `str` instead of `id` because that will eventually call `repr` on numpy arrays which can truncate for very long paths which could lead to incorrectly re-using a path.\r\n\r\nI think the right path here is to add an additional bit of state tracking that maps (clip)paths to a monotonically increasing integer.  We would then use that integer in the `dictkey` and eventually the `url(...)` id in the svg.\r\n\r\n\r\n``` python\r\nself._clip_path_count = defaultdict(lambda c=count(): next(c))\r\n....\r\nclip_id = self._clip_path_count[clippath] \r\n```\r\n\r\nmay too cute, but I think would work.  It looks like we set up all of the state in `__init__` and create a new render in the `print_svg` method so we can do the same with this.\r\n\r\n```\r\n\r\nThis needs tests, both of the determinism (see the existing determinism tests for how to get the test suite do to that) and that we continue to correctly re-use paths.  These tests cases should also be extended to the pdf\/ps tests to make sure we do not have the same issue with non-rectangular clipping there.  Finally, in addition to the polar case, the determinism tests should probably include one of the complex clip demo examples and something with multiple clip paths (a 2x2 grid of axes each with fun clipping would work).\r\n\r\n----\r\n\r\nMarking as good first issue as fixing this will only require touching a small section of the code and does not have any API implications, but medium difficulty as it requires a good grasp of OO and understanding a relatively complex implementation.","Hello, I would like to work on this issue if it's not entirely finished! I noticed that it's still open.","> the determinism tests should probably include one of the complex clip demo examples and something with multiple clip paths (a 2x2 grid of axes each with fun clipping would work)\r\n\r\nI missed this quoted part of the task description previously; it seems important, but I'm not familiar enough yet with `matplotlib` to figure out how to add this to the test coverage in #27833."],"labels":["status: confirmed bug","backend: svg","Difficulty: Medium","Good first issue"]},{"title":"[Bug]: color=(\"Cn\", alpha) does not work","body":"### Bug summary\n\nReading https:\/\/matplotlib.org\/stable\/users\/explain\/colors\/colors.html#color-formats it would seem like `color=(\"C0\", .5)` (C0 color with alpha=0.5) should work, but it doesn't.\r\n\r\n(Could also be considered a doc bug or a feature request, strictly speaking.)\n\n### Code for reproduction\n\n```Python\nfrom pylab import *; plot([0, 1], c=(\"C0\", .5))\n```\n\n\n### Actual outcome\n\nValueError: ('C0', 0.5) is not a valid value for color\n\n### Expected outcome\n\nNo error.\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nmacos\n\n### Matplotlib Version\n\n3.9.0.dev1178+g88d64e5f0c\n\n### Matplotlib Backend\n\nany\n\n### Python version\n\n3.12\n\n### Jupyter version\n\nnone\n\n### Installation\n\ngit checkout","comments":["the precise logic that parses 2-element tuples into color\/alpha is:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/5e347777192b37ac77decc4f975e53ed9d87973b\/lib\/matplotlib\/colors.py#L321-L325\r\n\r\nThis appears in the private function `_to_rgba_no_colorcycle`. This function is only ever called from `to_rgba` (after handling the `Cn` case specially). Moving (or adding, I guess) the same lines to the beginning of the public `to_rgba` would allow `(\"C0\", 0.5)` and likely not have too many other repercussions."],"labels":["topic: color\/alpha","topic: color\/cycle"]},{"title":"[Bug]: Axes.cla() with sharex may wrongly reset the axes limit.","body":"### Bug summary\n\nFor example, when  subplot A shares the x-axis with subplot B (A is created with sharex=B), a call to `B.cla()` will set the xlimit to [0, 1], which may not be expected (in contrast, a call to `A.cla()` will not change the xlimit).\r\n\r\nI think the main problem comes from the following function, where it will check whether its `_sharex` attribute is `None`; however, in this case, B is shared to A, but no axis is shared to B, so B's `_sharex` attribute is `None`.\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/9e18a343fb58a2978a8e27df03190ed21c61c343\/lib\/matplotlib\/axes\/_base.py#L1369   \n\n### Code for reproduction\n\n```Python\nax = plt.subplot(211)\r\nax2 = plt.subplot(212, sharex=ax)\r\nax.plot(range(50))\r\nax2.plot(range(50))\r\nax.cla()\r\nplt.show()\n```\n\n\n### Actual outcome\n\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/12435643\/78bf5ac4-c62a-4556-bb9c-51ae7d0cadf0)\r\n\n\n### Expected outcome\n\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/12435643\/5b22ee2f-473a-4077-b40d-9a609c698ac8)\r\n\n\n### Additional information\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.8.3\n\n### Matplotlib Backend\n\n'TkAgg'\n\n### Python version\n\n3.9.13\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip","comments":[],"labels":["topic: axes"]},{"title":"[Bug]: Swallowed error in Jupyter+Matplotlib FuncAnimation.","body":"### Bug summary\r\n\r\nIn some case it seem that FuncAnimation in Jupyter + matplotlib widgets + funcanimation just swallow error, leading to hard to debug error as to why animations don't show.\r\n\r\n### Code for reproduction\r\n\r\n\r\nHere is a dumb animation where the animate part, raise an error (in the original code this was a typo so a NameError, but for readability, here an assert). \r\n\r\n```Python\r\n%matplotlib widget\r\n\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.animation import FuncAnimation \r\n\r\nNx = 101\r\n\r\nx = list(range(10))\r\ndef u_func(t):         \r\n    return [x+t\/\/10 for x in range(10)]\r\n\r\nfig, ax = plt.subplots()\r\ndt_ms =  50\r\n\r\nu0 = u_func(0)\r\nline = ax.plot(x, u0)[0] \r\n\r\n\r\n\r\ndef animate(n):\r\n    \"\"\" Fonction principale qui met \u00e0 jour l'image d'un pas de temps \u00e0 un autre\r\n    Entr\u00e9e : \r\n        n : pas de temps courant\r\n    \"\"\"\r\n    line.set_ydata(u_func(n))\r\n    assert False, \"anything that triggers and error like a typo\"\r\n    return line\r\n \r\nanim = FuncAnimation(fig, animate, interval=dt_ms, frames=50, repeat=True)\r\n\r\n```\r\n\r\n### Actual outcome\r\n\r\nAnimation not happening\r\n\r\n### Expected outcome\r\n\r\nShow at least a warnings that the animate function raised\r\n\r\n### Additional information\r\n\r\nI tried to print a trace as to when the animate function get called see\r\n\r\nhttps:\/\/gist.github.com\/Carreau\/e6510855ecab88630f1ea5985a98358c\r\n\r\nThis is likely multiple problems, matpltolib may want have an explicit warning that animate crash, but ipympl, comm, and ipykernel itself should likely have error messages as well.\r\n\r\n### Operating system\r\n\r\nosx\r\n\r\n### Matplotlib Version\r\n\r\n3.8.3\r\n\r\n### Matplotlib Backend\r\n\r\nmodule:\/\/ipympl.backend_nbagg\r\n\r\n### Python version\r\n\r\n3.11\r\n\r\n### Jupyter version\r\n\r\n4.0.9\r\n\r\n### Installation\r\n\r\npip","comments":["I think you need to trigger the animation to render. You can do this directly with `anim.to_jshtml()` or `anim.to_html5_video()`. Should also work by having `anim` at the end of the cell...BUT:\r\n\r\nOn my system, `mpl.rcParams['animation.html']` is defaulting to `'none'`, which is causing the `_repr_html_()` method to return `None`.","I suspect this is related to the issue with event callbacks where any `print` calls are not forwarded to the browser.","> think you need to trigger the animation to render. You can do this directly with `anim.to_jshtml()` or `anim.to_html5_video()`. Should also work by having `anim` at the end of the cell...BUT:\r\n> \r\n> On my system, `mpl.rcParams['animation.html']` is defaulting to `'none'`, which is causing the `_repr_html_()` method to return `None`.\r\n\r\nYeah, but with the default settings, if you just remove the `assert False`, the IPython display hook is triggered anyway and the animation works, the animation rendering is triggered, and I don't expect end user to understand those subtleties.\r\n\r\nI also confirm that by adding a write to a file and this is triggered.\r\n\r\n> I suspect this is related to the issue with event callbacks where any `print` calls are not forwarded to the browser.\r\n\r\nHum that seem more likely, I didn't tracked if the is an try\/except in this stack and if it would print anything. I'll see if I can track that down. \r\n\r\n\r\n","@Carreau I can reproduce your behavior that it auto-displays properly with the assert removed but we get just a normal repr if the assertion is present. Weird.\r\n\r\nNone of this makes sense, because the auto-display AFAICT is going through `_repr_html_()`, which is in its entirety:\r\n```python\r\n    def _repr_html_(self):\r\n        \"\"\"IPython display hook for rendering.\"\"\"\r\n        fmt = mpl.rcParams['animation.html']\r\n        if fmt == 'html5':\r\n            return self.to_html5_video()\r\n        elif fmt == 'jshtml':\r\n            return self.to_jshtml()\r\n```\r\nand I can get the assertion output from both methods called in there."],"labels":["topic: animation"]},{"title":"[Bug]: Logscale Axis + NonUniformImage + GUI move tool = Distortion","body":"### Bug summary\n\nRun the code below, which uses set.xscale(\"log\") and NonUniformImage. Choose the move tool (Arrows in all 4 directions) and try to pan the image around. Instead of panning, image distorts.\n\n### Code for reproduction\n\n```Python\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.image import NonUniformImage\r\n\r\nchg=np.logspace(0,1,10)\r\nchg1=chg[:,None]\r\nchg2=chg[None,:]\r\ng=chg1+chg2\r\ng+=50*(np.add.outer(np.arange(10),np.arange(10))%2)\r\n#checkerboard, to make effect clearer\r\nfig,ax=plt.subplots()\r\nax.set_xscale(\"log\")\r\nax.set_yscale(\"log\")\r\nim=NonUniformImage(ax,extent=[chg[0],chg[-1],chg[0],chg[-1]],origin=\"lower\")\r\n\r\n\r\nim.set_data(np.linspace(1,10,10),np.linspace(1,10,10),g)\r\nax.add_image(im)\r\n\r\nplt.show()\n```\n\n\n### Actual outcome\n\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/12258311\/a4f872e8-35b5-4ec1-bf03-ec07664611f1)\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/12258311\/9059a6ee-a489-4848-9f37-b178ca2c31e7)\r\n\r\nThese are supposed to be the same image. I just used the pan tool. \r\nBut the aspect ratio has changed. And the boundary of the rightmost colour change has gone from 0.75 to 0.5.\r\n\r\nClicking and dragging produces behaviour that is visually obviously not-right. \r\n\n\n### Expected outcome\n\nThe image should pan around. \n\n### Additional information\n\n No bug appears when I use a plt.imshow on the log scale axis. Or when I use the same NonUniformImage code without the logscale axis. The bug only appears with all 3 conditions are met.\r\n\r\nI was trying to find a sensible way to display an image on log-log axes with constant screen space per pixel, when I discovered this bug. \r\n\n\n### Operating system\n\nUbuntu\n\n### Matplotlib Version\n\n3.8.0\n\n### Matplotlib Backend\n\nQtAgg\n\n### Python version\n\nPython 3.11.5\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nconda","comments":["Suggest using pcolormesh for this.  ","The boundaries not being correct does actually behave the same way on a linear scale - if you scroll past the lower limit (1) in the example above the axes stays blue, instead of scrolling past the image into an empty white area."],"labels":["status: confirmed bug","topic: images"]},{"title":"Set polygon offsets for log scaled hexbin","body":"## PR summary\r\nFixes https:\/\/github.com\/matplotlib\/matplotlib\/issues\/18045 by setting offsets for hexbin when `scale='log'`.\r\n\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [n\/a] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [n\/a] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["status: needs review"]},{"title":"[ENH]: Composing and saving multiple Animations in one figure","body":"I have a few functions that each take an Axes object and produce an Animation.  I can display this figure normally with `plt.show()`, but it doesn't seem there is a way to save what is displayed on the screen as a GIF.\r\n\r\nFor context, I'm writing some classes which each have their own `.plot()` which have optional `fig` and `ax` kwargs.  I want to be able to call plot each object separately or plot to a subplot within a figure.\r\n\r\nFor example, I would like to be able to do something like this:\r\n\r\n``` python\r\n\r\no1 = MyObj()\r\no1 = MyObj()\r\n\r\n# plot standalone\r\no1.plot().save('standalone.gif')\r\n\r\n# plot with existing Axes\r\nfig = plt.figure()\r\nax1 = fig.add_subplot(1, 2, 1)\r\nax2 = fig.add_subplot(1, 2, 2)\r\no1.plot(fig, ax1)\r\no2.plot(fig, ax2)\r\nfig.savefig('subplots.gif')\r\n```","comments":["I do not think this is a tenable API.  The `Figure` object does not know about the `Animation` objects that use it and even if it did, it is not clear we could safely infer from the extension if the user wanted a static or animated gif.  \r\n\r\nIf you are creating two, it is very likely that they are going to step on each other, I'm a bit surprised that this is working at all.  Are you creating two `Animation` objects and letting both timers run or are doing enough book-keeping in the second one to merge it with the first one?  If you are doing two I bet if you pass `blit=True` it goes very wrong....\r\n\r\nIf there is more than one `Animation` involved, I think there are further problems is that nothing says the `interval` on both of them has to be same and there is nothing that has a handle on the generator for both (well in general all of `N`) animations.    Is it even possible to write `save_anims(fname, *anims)` that will save the unified view of all of the animations?\r\n\r\nSorry this is rambling.\r\n\r\n","Do you have any recommendations for how I can achieve my goal with the `MyObj` example above? \r\nHere is my self-contained test.  It does indeed break if `blit=True` on both animations.  Seems to work for GIF output, but not `plt.show()` unfortunately.\r\n\r\n\r\n``` python\r\n#!\/usr\/bin\/env python3\r\n\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.animation as animation\r\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\r\nfrom matplotlib.lines import Line2D\r\n\r\n\r\nclass MyObjA:\r\n\r\n    def __init__(self):\r\n        self.x = np.arange(0, 2*np.pi, 0.01)\r\n        self.line = Line2D(self.x, 0.5*np.sin(2.5*(self.x)))\r\n\r\n    def _update(self, i):\r\n        self.line.set_ydata(0.5*np.sin(2.5*(self.x + i\/5.0)))\r\n        return self.line,\r\n\r\n    def plot(self, fig, ax):\r\n\r\n        ax.add_line(self.line)\r\n        ax.set_title('MyObjA')\r\n\r\n        ani = animation.FuncAnimation(fig, self._update, np.arange(1, 200), interval=75, blit=True)\r\n\r\n        return ani\r\n\r\nclass MyObjB:\r\n\r\n    def __init__(self):\r\n        self.lc = Line3DCollection(np.random.random((5, 2, 3)))\r\n\r\n    def _update(self, i):\r\n        self.lc.set_segments(np.random.random((5, 2, 3)))\r\n        return self.lc,\r\n\r\n    def plot(self, fig, ax):\r\n\r\n        ax.add_collection(self.lc)\r\n        ax.set_title('MyObjB')\r\n\r\n        ani = animation.FuncAnimation(fig, self._update, np.arange(1, 200), interval=150, blit=False)\r\n\r\n        return ani\r\n\r\no1 = MyObjA()\r\no2 = MyObjB()\r\nfig = plt.figure()\r\nax1 = fig.add_subplot(1, 2, 1)\r\nax2 = fig.add_subplot(1, 2, 2, projection='3d')\r\no1.plot(fig, ax1)\r\no2.plot(fig, ax2)\r\ndef update(i):\r\n    return o1._update(i) + o2._update(i)\r\nani = animation.FuncAnimation(fig, update, np.arange(1, 200), interval=150, blit=True)\r\nani.save('subplots.gif')\r\nplt.show()\r\n```\r\n\r\n\r\nIt has a few downsides:\r\n- matplotlib stuff is now spread into `__init__` and not contained within `plot()`\r\n- have to manually create a `FuncAnimation` and `update()` method which calls all the `_update()`.\r\n","Could multiple `FuncAnimation` could be merged if  their `interval` are the same?\r\n\r\n``` python\r\n#!\/usr\/bin\/env python3\r\n\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.animation as animation\r\nfrom itertools import chain\r\n\r\n\r\nclass SummableAnimation(animation.FuncAnimation):\r\n\r\n    def __add__(self, other):\r\n        \"\"\"Merge two Animations by chaining calls to _func and _init_func\"\"\"\r\n\r\n        if self._interval != other._interval:\r\n            # FIXME: possible to check if number of frames equal?\r\n            raise ValueError(\"Animations must have equal interval\")\r\n\r\n        orig_func = self._func\r\n        orig_init = self._init_func\r\n        other_func = other._func\r\n        other_init = other._init_func\r\n        # chain update methods\r\n        self._func = lambda *a, **kw: chain(orig_func(*a, **kw), other_func(*a, **kw))\r\n        # chain init functions.  Need special handling for None\r\n        if orig_init is not None and other_init is not None:\r\n            self._init_func = lambda *a, **kw: chain(orig_init(*a, **kw), other_init(*a, **kw))\r\n        elif other_init is not None:\r\n            self._init_func = other_init\r\n\r\n        other.pause()\r\n        return self\r\n\r\n    def __radd__(self, other):\r\n        return self.__add__(other)\r\n\r\nclass MyObjA:\r\n\r\n    def plot(self, fig, ax):\r\n\r\n        if fig is None and ax is None:\r\n            fig = plt.figure(figsize=(3, 3))\r\n            ax = fig.add_subplot()\r\n\r\n        x = np.arange(0, 2*np.pi, 0.01)\r\n        line, = ax.plot(x, 0.5*np.sin(2.5*(x)))\r\n        ax.set_title('MyObjA')\r\n\r\n        def update(i):\r\n            line.set_ydata(0.5*np.sin(2.5*(x + i\/5.0)))\r\n            return line,\r\n\r\n\r\n        return SummableAnimation(fig, update, np.arange(1, 100), interval=75, blit=True)\r\n\r\nclass MyObjB:\r\n\r\n    def plot(self, fig=None, ax=None):\r\n\r\n        if fig is None and ax is None:\r\n            fig = plt.figure(figsize=(3, 3))\r\n            ax = fig.add_subplot()\r\n\r\n        x = np.arange(0, 2*np.pi, 0.01)\r\n        line, = ax.plot(x, np.random.random(len(x)))\r\n        ax.set_title('MyObjB')\r\n\r\n        def update(i):\r\n            line.set_ydata(np.random.random(len(x)))\r\n            return lc,\r\n\r\n        return SummableAnimation(fig, update, np.arange(1, 100), interval=75, blit=True)\r\n\r\nif __name__ == '__main__':\r\n\r\n    o1 = MyObjA()\r\n    o2 = MyObjB()\r\n    plt.close('all')\r\n    fig = plt.figure()\r\n    ax1 = fig.add_subplot(1, 2, 1)\r\n    ax2 = fig.add_subplot(1, 2, 2)\r\n\r\n    a1 = o1.plot(fig, ax1)\r\n    a2 = o2.plot(fig, ax2)\r\n    a = a1 + a2\r\n    a.save('subplots.gif')\r\n\r\n    # plt.show()\r\n```\r\n\r\n![subplots.gif](http:\/\/tikhonov.csl.illinois.edu\/carr\/subplots.gif)\r\n\r\n\r\nSorry if this is too much noise.  I'm trying to make my classes plottable (possibly static or animated) in a composable OOP way but struggling to understand how to do this idiomatically.\r\n\r\n\r\n<!--\r\n> Is it even possible to write save_anims(fname, *anims) that will save the unified view of all of the animations?\r\n\r\nI don't know how Animations work internally, but isn't something like this theoretically possible (in pseudocode):\r\n\r\n``` python\r\ndef save_anims(figure, *anims):\r\n    frames = []  # final output frames\r\n    delays = []  # delay between GIF frames\r\n    t = 0\r\n    while not all(anims_finished(*anims)):\r\n        # compute next scheduled animation based on current time t\r\n        next_anim = min(anims, key=lambda anim: anim.time_next_frame - t)\r\n        time_to_next = next_anim.time_next_frame - t\r\n        delays.append(time_to_next)\r\n        t += time_to_next\r\n        # update the artists for this animation\r\n        next_anim.update(next_anim.current_frame)\r\n        # draw the unified view\r\n        frames.append(figure.draw())\r\n        # increment the animation frame counter\r\n        next_anim.increment_frame()\r\n\r\n    return frames, delays\r\n```\r\n\r\nProbably would want to call `update()` at the same time for animation frames that are sufficiently close in time.       \r\n\r\n-->\r\n\r\n","`SummableAnimation` is probably headed the right direction (but I would expect `__add__` to make a new object not act like `__iadd__` and update one of them inplace).\r\n\r\nI wonder if it might be better to go after more general (but still private) methods and make a `TimedAnimation` subclass that hold instances of other `TimedAnimation` objects, turns their timers off, and then pushes into them on the same clock?\r\n\r\n\r\n---\r\n\r\nYou can get the `Figure` off of the `Axes` object so you don't really need to pass both.\r\n\r\n\r\n-----\r\n\r\n\r\nattn @dopplershift Was there thought about how to compose Animation objects when they were written?","No, there was no thought of composing them. They essentially manage event dispatch to structure updates to one or more `Axes`.\r\n\r\nOff the top of my head, I'd probably consider `TimedAnimation`\/`FuncAnimation` subclass that can accumulate and manage multiple callbacks (and associated state), and pass those to the objects on either a `set_animation()` method, or even `plot()`.","> Off the top of my head, I'd probably consider TimedAnimation\/FuncAnimation subclass that can accumulate and manage multiple callbacks (and associated state), and pass those to the objects on either a set_animation() method, or even plot().\r\n\r\nIs it possible to still have an abstracted `MyObj.plot()` function with this solution?\r\n\r\nFor example, are you proposing this?\r\n\r\n``` python\r\no1 = MyObjA()\r\no2 = MyObjB()\r\nfig = plt.figure()\r\nax1 = fig.add_subplot(1, 2, 1)\r\nax2 = fig.add_subplot(1, 2, 2, projection='3d')\r\no1.plot(fig, ax1)\r\no2.plot(fig, ax2)\r\nani = animation.FuncAnimation(fig, [o1._update, o2._update], np.arange(1, 200), interval=150, blit=True)\r\nani.save('subplots.gif')\r\n```","I haven't thought through all of this (or tested at all), but in trying to encapsulate things, I'm picturing something like:\r\n```python\r\no1 = MyObjA()\r\no2 = MyObjB()\r\nfig = plt.figure()\r\nax1 = fig.add_subplot(1, 2, 1)\r\nax2 = fig.add_subplot(1, 2, 2, projection='3d')\r\no1.plot(fig, ax1)\r\no2.plot(fig, ax2)\r\nani = MyAnimation(fig, interval=150, blit=True)\r\no1.set_animation(ani)\r\no2.set_animation(ani)\r\nani.save('subplots.gif')\r\n```\r\n\r\nThat structure seems to keep the other objects in control of all plotting\/animation.","@dopplershift If I understand your example correctly, `MyAnimation` has something like `add_callback()` which is called inside `set_animation()`?\r\n\r\nHow do you feel about Animations being mergeable in some way? e.g. \r\n\r\n    a = a1 + a2\r\n\r\nor as suggested by @tacaswell \r\n\r\n    a = CollectedAnimation(fig, animations=[a1, a2])\r\n\r\nThis would allow people to compose animations from existing libraries without `set_animation()`.  \r\n\r\n<details>\r\n<summary>CollectedAnimation<\/summary>\r\n\r\n``` python\r\n# this doesn't work yet\r\nclass CollectedAnimation(animation.TimedAnimation):\r\n    \"\"\"\r\n    `TimedAnimation` subclass for merging animations.\r\n    \"\"\"\r\n    def __init__(self, fig, animations, *args, **kwargs):\r\n        self.animations = animations\r\n\r\n        super().__init__(fig, *args, **kwargs)\r\n\r\n        # pause the animations\r\n        for a in  animations:\r\n            a.pause()\r\n\r\n    def _step(self, *args):\r\n        # stop iterating if any animation hits end\r\n        return all(a._step(*args) for a in animations)\r\n\r\n    def new_frame_seq(self):\r\n        return chain(a.new_frame_seq() for a in self.animations)\r\n\r\n    def new_saved_frame_seq(self):\r\n        return chain(a.new_saved_frame_seq() for a in self.animations)\r\n\r\n    def _draw_next_frame(self, *args, **kwargs):\r\n        for a in self.animations:\r\n            a._draw_next_frame(*args, **kwargs)\r\n```","@Evidlo Personally just lukewarm. It would really depend on how complicated the implementation would be to make all of the composition aspect work. There's a lot of state (e.g. `interval`, `repeat_delay`, `repeat`, etc.) that don't have clear semantics on how to compose when the values differ.\r\n\r\nI also realized I totally forgot about this. You can share timers between animations with:\r\n\r\n```python\r\nani = animation.FuncAnimation(fig, o1._update, np.arange(1, 200), interval=150, blit=True)\r\nani2 = animation.FuncAnimation(fig, o2._update, np.arange(1, 200), interval=150, blit=True, event_source=ani.event_source)\r\n```\r\n\r\nGranted, not sure how well tested that approach is, but it was an intended design feature. Also, you might have the option to sync them up later (e.g. if they came out of `plot()`) with:\r\n```python\r\nani2.event_source = ani.event_source\r\n```\r\nI'm pretty sure that last one won't completely work right now because the timer for `ani` won't be set to also call `_step()` for `ani2`, but I think a minimal setter for `event_source` on `Animation` could make it work.\r\n\r\n~EDIT: Realized this doesn't solve the issue of having them render to a single file, so I guess nevermind.~\r\n\r\nSo you can get the animations in a single file with:\r\n\r\n```python\r\nani.save('subplots.gif', extra_anim=[ani2])\r\n```\r\n\r\nOf course all of this has challenges about ensuring the same interval, repeat, etc. Ideally those probably should all be encapsulated in\/delegated to `event_source`, but that's a bigger issue.","Here's an example of what things look like by sharing `event_source` for interactive use, or using `extra_anim` for saving to a single animation file. I've also refactored so all Matplotlib code is in `plot()`. There's even monkeypatching set up if you'd like to test it out.\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.animation as animation\r\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\r\nfrom matplotlib.lines import Line2D\r\n\r\n\r\n## BEGIN MONKEYPATCHING\r\ndef get_src(self):\r\n    return self._event_source\r\n\r\ndef set_src(self, src):\r\n    self._event_source = src\r\n    if src:\r\n       self._event_source.add_callback(self._step)\r\n\r\ndef _start(self, *args):\r\n    # Do not start the event source if saving() it.\r\n    if self._fig.canvas.is_saving():\r\n        return\r\n    # First disconnect our draw event handler\r\n    self._fig.canvas.mpl_disconnect(self._first_draw_id)\r\n\r\n    # Now do any initial draw\r\n    self._init_draw()\r\n\r\n    # Actually start the event_source.\r\n    self.event_source.start()\r\n\r\nanimation.Animation.event_source = property(get_src, set_src)\r\nanimation.Animation._start = _start\r\n## END MONKEYPATCHING\r\n\r\nclass MyObjA:\r\n    def __init__(self):\r\n        self.x = np.arange(0, 2*np.pi, 0.01)\r\n\r\n    def plot(self, fig, ax):\r\n        line = Line2D(self.x, 0.5*np.sin(2.5*(self.x)))\r\n        ax.add_line(line)\r\n        ax.set_title('MyObjA')\r\n\r\n        def update(i):\r\n            line.set_ydata(0.5*np.sin(2.5*(self.x + i\/5.0)))\r\n            return line,\r\n\r\n        ani = animation.FuncAnimation(fig, update, np.arange(1, 200), interval=75, blit=True)\r\n\r\n        return ani\r\n\r\nclass MyObjB:\r\n    def plot(self, fig, ax):\r\n        lc = Line3DCollection(np.random.random((5, 2, 3)))\r\n        ax.add_collection(lc)\r\n        ax.set_title('MyObjB')\r\n\r\n        def update(i):\r\n            lc.set_segments(np.random.random((5, 2, 3)))\r\n            return lc,\r\n\r\n        ani = animation.FuncAnimation(fig, update, np.arange(1, 200), interval=75, blit=False)\r\n\r\n        return ani\r\n\r\no1 = MyObjA()\r\no2 = MyObjB()\r\nfig = plt.figure()\r\nax1 = fig.add_subplot(1, 2, 1)\r\nax2 = fig.add_subplot(1, 2, 2, projection='3d')\r\nani1 = o1.plot(fig, ax1)\r\nani2 = o2.plot(fig, ax2)\r\n\r\nani2.event_source = ani1.event_source\r\nani1.save('subplots.gif', extra_anim=[ani2])\r\n\r\nplt.show()\r\n```","@dopplershift Thanks for putting that example together.  I saw the `event_source` but was having trouble figuring out how to use it.\r\n\r\nIt seems like there are issues when blit=True on both animations and using plt.show().  The gif looks OK though.","I'm not surprised blitting is a problem. The way blitting works is that a copy of the \"background\" is saved as a bitmap and \"blitted\" to the draw buffer, and then only the plot items that were updated are redrawn. I can see those possibly fighting, though in the end that's only a performance optimization."],"labels":["New feature"]},{"title":"[ENH]: Allow supxlabel\/supylabel to respect labelpad","body":"### Problem\n\nUsing `supxlabel` or `supylabel` in a constrained layout with auto-positioning and `w_pad=0` or `h_pad=0` results in labels that have no spacing with respect to the tick labels. Manually changing the position disables the auto-positioning, which makes everything much more difficult.\r\n\r\nIt would be great if, in that situation, the constrained layout could take `axes.labelpad` into account and apply that as a minimal padding.\r\n\r\nNB: The same might apply to `suptitle` and `titlepad`, but I am not sure.\n\n### Proposed solution\n\nI think this only requires a change to the `make_margin_suptitles()` function, but I am not knowledgeable enough to implement such a change.","comments":[],"labels":["New feature","topic: geometry manager"]},{"title":"DOC: Use video files for saving animations","body":"## PR summary\r\n\r\nBecause the default is Base64-encoded frames of PNGs, this should save a substantial amount of space in the resulting docs. We may want to increase the bitrate slightly, though most of the videos seem clear enough to me.\r\n\r\nThis currently depends on sphinx-gallery\/sphinx-gallery#1243 and sphinx-contrib\/video#36.\r\n\r\nThese results are probably on the upper end, depending on if we change the bitrate, but disk usage is reduced substantially:\r\n```\r\n485M\thtml\/\r\n377M\tdoc\/build\/html\/\r\n```\r\nThat's 108M of savings, or 22% of the original disk usage.\r\n\r\n## PR checklist\r\n- [n\/a] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [n\/a] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [n\/a] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [n\/a] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines","comments":[],"labels":["status: waiting for other PR","Documentation: build"]},{"title":"Use a dataclass instead of a dict as a return type for boxplot()","body":"This is a prove of concept. Backward compatibility is achieved though a collections.abc.Mapping mixin. Note though, that I did not go as far as MutableMapping. If someone has written to the returned dict, they would still be broken.\r\n\r\nopen issues:\r\n- [x] documentation incomplete\r\n- [x] should switch usages in the matplotlib code to attributes\r\n- [ ] Where to put the dataclass? cbook or axes?\r\n- [ ] <s>should we use silent_list to make the repr a bit nicer?<\/s>\r\n       -> not for now. There's value in having a plain `list`. If we want to improve the repr, rather implement a special `repr` for `BoxplotArtists`. But that can be done later.\r\n","comments":["This is an interesting idea!\r\n\r\nThis also seems to be a step in the right direction for maybe having this object be in the draw tree (rather than all of the parts individually).\r\n\r\nWe should also put a `remove` method on it that calls down to all of its children.","Yes, we could extend this to something like an ArtistContainer, which itself can support (parts of) the Artist API. But let's start small.","I just realized that we have `Container`, which could be a complimentary approach. However, I think that a data class is the more simple and understandable approach (-> public concept). Also, I'm not sure we want to buy into the additional functionality of`Container` right now. And finally, the data class and an equivalent Container are API compatible for relevant operations (read-only attribute access). So I don't think adding the dataclass now would render us in an unwanted corner. We could switch to Container later.","Put to draft to rethink this approach vs. Container. Feedback welcome."],"labels":["status: needs rebase","Documentation: examples"]},{"title":"Deprecate positional use of most arguments of plotting functions","body":"This increases maintainability for developers and disallows bad practice of passing lots of positional arguments for users. If in doubt, I've erred on the side of allowing as much positional arguments\r\nas possible as long as the intent of a call is still readable.\r\n\r\nNote: This was originally motivated by bxp() and boxplot() having many overlapping parameters but differently ordered.\r\nWhile at it, I think it's better to rollout the change to all plotting functions and communicate that in one go rather than having lots of individual change notices over time. Also, the freedom to reorder parameters only sets in after the deprecation. So let's start this now.\r\n\r\n","comments":["There seems to be an order dependence in `boilerplate.py` that is expecting deprecators to be the outermost decorator rather than just anywhere:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/1defb5798bcb0ed7c0869e86bd00ea98ae77e700\/tools\/boilerplate.py#L160-L165\r\n\r\nFor instance, `violinplot` in this branch has both the `_preprocess_data` decorator and the `make_keyword_only` decorator, but the `_api.deprecation.DECORATORS.get` returns `None`:\r\n\r\n```python\r\n>>> mpl.__version__\r\n'3.9.0.dev1136+g3edfce3b0e'\r\n>>> mpl._api.deprecation.DECORATORS.get(mpl.axes.Axes.violinplot)\r\n>>> mpl._api.deprecation.DECORATORS.get(mpl.axes.Axes.violinplot.__wrapped__)\r\nfunctools.partial(<function make_keyword_only at 0x7f641386bce0>, '3.9', 'vert')\r\n>>> mpl._api.deprecation.DECORATORS.get(mpl.axes.Axes.violin)\r\nfunctools.partial(<function make_keyword_only at 0x7f641386bce0>, '3.9', 'vert')\r\n```\r\n\r\nIf you reach into `__wrapped__` or if you inspect `violin` (which has only the one decorator) the lookup works.\r\n\r\n`DECORATORS` is just a dictionary that gets added to with the wrapped version of the method as keys and the decorator itself as value. Once it has been wrapped again, the connection is lost.\r\n\r\nThus I think the easiest corrective action to make pyplot not prematurely implement kwonly args (without warning) is to move the deprecations to be the outermost decorators... That or the boilerplate code needs to grow to search the entire `meth.__wrapped__` sequence from outside in rather than only looking at the outermost (which would also make it more robust to multiple deprecatoions on the same method).\r\n\r\nAt first I thought it was some of the code I wrote in boilerplate to add type hints in, but I confirmed that I do not change the param types from the `meth` parameter extracted by these lines (which predate those changes).","In discussion with @tacaswell and @QuLogic we decided to push this to early 3.10 rather than late 3.9."],"labels":["API: changes","status: needs rebase","Documentation: examples"]},{"title":"[Bug]: Polar plot error bars don't rotate with angle for `set_theta_direction` and `set_theta_offset`","body":"### Bug summary\r\n\r\nReopening #441 since the fix seems not to work on two corner cases:\r\n- Clockwise direction with `set_theta_direction(-1)`\r\n- Angle offset set by `set_theta_offset(np.pi\/2)`\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nfrom numpy import *\r\nfrom matplotlib import pyplot as py\r\n\r\nr = zeros([16])\r\nerr = zeros([16])\r\nfor i in range(16):\r\n    r[i] = random.randint(400, 600)\r\n    err[i] = random.randint(20, 50)\r\ntheta = arange(0, 2 * pi, 2 * pi \/ 16)\r\nwidth = pi * 2 \/ 16\r\n\r\nfig = py.figure(figsize=(8, 8))\r\nax = fig.add_axes([0.1, 0.1, 0.75, 0.79], polar=True)\r\n\r\nbars = ax.bar(\r\n    theta + pi \/ 16,\r\n    r,\r\n    width=width,\r\n    bottom=0.0,\r\n    yerr=err,\r\n    capsize=15 # Capsize set to exaggerate issue\r\n    )  \r\nax.set_ylim(0, 700)\r\n\r\nax.set_theta_direction(-1)  # Clockwise direction\r\n\r\npy.show()\r\n```\r\n\r\n```python\r\nfrom numpy import *\r\nfrom matplotlib import pyplot as py\r\n\r\nr = zeros([16])\r\nerr = zeros([16])\r\nfor i in range(16):\r\n    r[i] = random.randint(400, 600)\r\n    err[i] = random.randint(20, 50)\r\ntheta = arange(0, 2 * pi, 2 * pi \/ 16)\r\nwidth = pi * 2 \/ 16\r\n\r\nfig = py.figure(figsize=(8, 8))\r\nax = fig.add_axes([0.1, 0.1, 0.75, 0.79], polar=True)\r\n\r\nbars = ax.bar(\r\n    theta + pi \/ 16,\r\n    r,\r\n    width=width,\r\n    bottom=0.0,\r\n    yerr=err,\r\n    capsize=15 # Capsize set to exaggerate issue\r\n    )  \r\nax.set_ylim(0, 700)\r\n\r\nax.set_theta_offset(np.pi\/2)  # Start from the top\r\n\r\npy.show()\r\n```\r\n\r\n### Actual outcome\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/26322144\/2f470802-4e8d-4a3b-af7a-da3eed58845e)\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/26322144\/a40a555b-17e1-43ae-a080-8396a2186068)\r\n\r\n\r\n### Expected outcome\r\n\r\nErrorbar caps perpendicular to the error bars.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nUbuntu\r\n\r\n### Matplotlib Version\r\n\r\n3.8.1\r\n\r\n### Matplotlib Backend\r\n\r\nagg\r\n\r\n### Python version\r\n\r\n3.11.4\r\n\r\n### Jupyter version\r\n\r\n7.0.6\r\n\r\n### Installation\r\n\r\nNone","comments":["I just had a go at this, and it's not a simple fix because the errorbar rotations are done before drawing, but the Axes offset\/direction are only known\/set at draw time.","Thanks for the clear report though!"],"labels":["status: confirmed bug","topic: polar"]},{"title":"[Bug]: set_size only works for loc='center'","body":"### Bug summary\n\n**ax.title.set_size()** works for **loc='center'** but not for **loc='left'** or **'right'**\n\n### Code for reproduction\n\n```python\nfig, ax = plt.subplots()\r\nax.title(label='abc', loc='left')\r\nax.title.set_size(50)\n```\n\n\n### Actual outcome\n\n![loc_center](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/37451757\/17a63aea-e66a-4d82-9249-026a587e595f)\r\n![loc_left](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/37451757\/05892b13-3c93-4c1f-8656-331cf2efca39)\r\n![loc_right](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/37451757\/9dd51d1a-eb6d-4734-865d-e36a089aff62)\r\n\n\n### Expected outcome\n\n**set_size()** works for all title locations ('left', 'center', 'right')\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nUbuntu\n\n### Matplotlib Version\n\n3.5.2\n\n### Matplotlib Backend\n\nmodule:\/\/matplotlib_inline.backend_inline\n\n### Python version\n\nPython 3.7.12\n\n### Jupyter version\n\njupyter lab 0.35.4\n\n### Installation\n\nconda","comments":["To access other titles use\r\n\r\n```\r\nax.get_title(loc=\"left\").set_size(50)\r\n```","\r\n\r\n\r\n> To access other titles use\r\n> \r\n> ```\r\n> ax.get_title(loc=\"left\").set_size(50)\r\n> ```\r\n\r\n**get_title()** returns a string. How can a string call the **set_size()** function?\r\n\r\nMy question is that when **loc='center'**, the fontsize can be set properly by\r\n```\r\nax.title(label='abc', loc='center')\r\nax.title.set_size(50)\r\n```\r\n\r\nwhen **loc='left'** or **loc='right'**, **set_size(50)** does not work.","There are actually 3 titles on each axes:\r\n\r\n```python\r\nimport matplatlib.pyplot as plt\r\nfig, ax = plt.subplots()\r\nax.set_title('center', loc='center')\r\nax.set_title('left', loc='left')\r\nax.set_title('right', loc='right')\r\n```\r\n\r\nThat is, `loc` controls where which one has the text set not where the text goes.  The attribute `ax.title` is the center one (and predates adding `loc` and the other two).\r\n\r\nWe don't seem to support getting access to the underlying `Text` objects for the left and right titles (I have a vague memory of discussing this when it came in but someone would have to do the archaeology starting from 917f3aeff95ca5edb3121e9826e09306eee4c126 to be sure).\r\n\r\nThe best way to set the size of an existing left or right title is probably\r\n\r\n```python\r\nkwargs = {}\r\nax.set_title(ax.get_title(loc='left'), loc='left', **kwargs)\r\n```\r\n\r\nwhich is indeed a bit verbose.","> That is, `loc`controls where which one has the text set not where the text goes.\r\n\r\nThis sentence acturally solves my puzzle. Thanks :)","I think it would be reasonable to add set\/get_title_left\/right and then alias the loc=\"right\/left\". ","@szwang1990 sorry my bad, I didn't check my recommendation carefully enough. You're right that `get_title()` only returns strings and thus does not help here.\r\n\r\nCan you explain your use case for setting title styling (here: size) without setting the title text?","@jklymak I don't think that set\/get_title_left\/right is really much of a help it would shorten @tacaswell's solution from\r\n\r\n```\r\nax.set_title(ax.get_title(loc='left'), loc='left', **kwargs)\r\n```\r\nto an only marginally better\r\n```\r\nax.set_title_left(ax.get_title_left(), **kwargs)\r\n```\r\nand at the cost of intoducing lots of similar functions.\r\n\r\nDepending on the importance of the topic, I could imagine three ways forward:\r\n\r\n1) The need for this is rare -> @tacaswell's solution is good enough.\r\n2) We expose `Axes.title` but not the left\/right title -> make them public as well (as attributes or properties). - Making them public as well doesn't make the situation much more worse than an already public `Axes.title`.\r\n3) Introduce a separate `Axes.set_title_props()` function.","Yes, I'd misunderstood what `get_title` does.  In my opinion it is a bit silly for it to just return the string in the title.  \r\n\r\nI think 2, publicly exposing `title.title_left\/right`, is probably fine for this use case.  ","> Yes, I'd misunderstood what `get_title` does.\r\n\r\nI did too, see above. :roll_eyes: \r\n\r\n> I think 2, publicly exposing `title.title_left\/right`, is probably fine for this use case.\r\n\r\nThe only thing that's bothering me then is the naming ambiguity\/imprecision `Axes.title` -> `Text` vs. `Axes.get_title()` -> `str`, which we are going in deeper.\r\n","> @szwang1990 sorry my bad, I didn't check my recommendation carefully enough. You're right that `get_title()` only returns strings and thus does not help here.\r\n> \r\n> Can you explain your use case for setting title styling (here: size) without setting the title text?\r\n\r\nMaybe another `loc` parameter in `set_size()`? So that we can use the following command to set the fontsize of left\/center\/right titles.\r\n`ax.title.set_size(50, loc='left')`\r\n\r\nBut this may need lots of work, as @tacaswell said, `ax.title` defaults to the center one.\r\n\r\n>  The attribute ax.title is the center one (and predates adding loc and the other two).\r\n","`ax.title` is a `matplotlib.text.Text` object that is an attribute of the `Axes` object and `ax.title.set_size` is an instance method of that `Text` object.  It does not know about the other `Text` objects (which are `ax._left_title` and `ax._right_title` right now).  We definitely do not want all `Text` objects to know how to maybe walk up and the artist tree and set state on a sibling nor do we want to use a special sub-class of `Text` for the title text.\r\n\r\nPut differently, `ax.title` _is_ the Python side object that represents the center title.","> We expose Axes.title but not the left\/right title -> make them public as well (as attributes or properties).\r\n\r\nMy memory of when we added the left\/right titles was exactly around this API akwardness and opted to make the private until someone asked for it.","I suggest to make `_left_title` public under a property (name t.b.d. e.g. `left_title_text` \/ `left_title_artist` \/ `left_title_obj`) and same for `title`. Then discourage (deprecate `title`) because it's confusing.","`ax.left_title_artist`, `ax.center_title_artist`, and `ax.right_title_artist`? ","Checking for consistency, we have a history of exposing `Text` instances:\r\n\r\n- `Axis.label`\r\n- `Tick.label1`, `Tick.label2`\r\n- `Axes.title`\r\n\r\nSo thinking again, I recommend to go with `left_title` \/ `center_title` \/ `right_title`. The other variables also don't habe a `_artist` or similar suffix. By making them read-only properties, we clearly error out if somebody tries to assign a string (`ax.center_title = \"My title\"`). When reading `ax.center_title`, people will realize soon enough that they get a `Text` and not as `str`. That'd be good enough to limit misuse - after all, I'm not aware that somebody complained about the confusion between `str` and `Text` in the above cases."],"labels":["Community support"]},{"title":"DOC: tutorials follow up to guide","body":"In tandem with #26389, this reworks the tutorials section by:\r\n\r\n* removing the links to the individual user guide documents because cross listing those documents as user guide pages and tutorials makes it very unclear what we consider a user guide versus a tutorial -> this hurts both:\r\n * discoverability -> it's unclear what sorta content is supposed to be on a page so hard to build intuition on what should be there\r\n * contributing -> it's unclear what kinda of contributions would be acceptable because the pages don't have a clear identity\r\n\r\nAlso moves the donut page to tutorials because it's showing a couple of things: how to make a donut chart and also how to annotate it - in an explanatory linear manner, talking the reader through each stage of the process. That's roughly the delineation between tutorial and example\/how-to according to diataxes(https:\/\/diataxis.fr\/tutorials\/)","comments":[],"labels":["Documentation: tutorials"]},{"title":"Return filename from save_figure","body":"Closes #27744\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\n\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nThis PR adresses issue #27744.\r\nsave_figure functions from the NavigationToolbar return the filename of the saved figure. \r\nIf no figure is save then it returns None.\r\nFor GTK4 backend and Web backend I could not get the filename so the function still returns None.\r\n\r\n\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [n\/a] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["We can probably use a closure \/ `nonlocal` with the gtk response callback, but I'm not sure if `dialog.show()` blocks until the window is closed or return immediately.  If it blocks then we can get the the filename out of that one too.\r\n\r\nI agree we the webagg one looks like a big lift because I don't think we currently have a response back over the websocket.  Even if we added that, it is not super clear it would be useful as the filesystems that the client (in a browser possibly on a different machine) is in general not the filesystem that the server sees.  There is also a good case we should _not_ leak anything about the client file system back to the server.","If we want to differentiate between \"I did not save a file\" and \"I can not tell you if a file was saved\" we could return a different sentinel in the \"I did not save a file case\".  The simplest thing (from an implement ion point of view...typing this proposal would be hard) would be to add `NO_FILE_SAVED = object()` as a class attribute on `NavigationToolbar2` and return that if no file is saved.","That is a good idea. I'll do that.","Usually the FileDialogs (from Qt, Gtk etc...) return `None` when no file is selected. To be consistent with this behavior, I propose returning `None` when no file is saved and a class attribute `UNKNOWN_SAVED_STATUS = object()` when the status is unknown. What do you think ?",">  I propose returning None when no file is saved and a class attribute UNKNOWN_SAVED_STATUS = object() when the status is unknown. What do you think ?\r\n\r\nThe problem is that what it currently does in return `None` in all cases which is more-or-less all backends choosing not to return anything (that is, if we are careful about back compatibility the new docstring should be consistent with old Matplotlibs, just that _all_ backends choose not to tell you anythingh). Thus, `None` needs to be the \"I don't know what happened\" return value.  The questions we are left with are if we care that is confused with \"positively telling you nothing was saved\" and if so, how do we flag it.\r\n\r\n> I tried, dialog.show() does not block the function. I think it is because the backend uses a FileChooserNative and not a FileDialog.\r\n\r\nThank you for testing!","Actually I was wrong, `dialog.show()` is not blocking because not blocking is a general GTK4 behavior. The explanation is here : https:\/\/discourse.gnome.org\/t\/how-should-i-replace-a-gtk-dialog-run-in-gtk-4\/3501\/5\r\nThanks for your explanation. I understand what you're saying and I will do as you say. ","From the peanut gallery: one could also consider returning the empty string for the \"no file saved\" case?  I'm not sure it's much better than introducing a new singleton, but I don't think it's much worse either (e.g., for the end user who's aware of that possibility, it's actually easier to check that case (if they're not aware they won't check anyways)).","> From the peanut gallery: one could also consider returning the empty string for the \"no file saved\" case? I'm not sure it's much better than introducing a new singleton, but I don't think it's much worse either (e.g., for the end user who's aware of that possibility, it's actually easier to check that case (if they're not aware they won't check anyways)).\r\n\r\nIn the case the user do not check, the output will be sent to some other functions that will have a different behavior depending on if it is a str or an object.\r\nFor example, suppose the user wants to include the image in a html file. He would write the figure path in a html file. I guess the function that adds the image is more likely to raise a error if the input is not a str.","My vote is for @Zybulon's original proposal:\r\n- `None` == not saved\r\n- UNKNOWN_SAVED_STATUS when the state is unknown\r\n\r\n\r\nI find it a strong argument to follow the pattern that file dialogs use (None = not saved).\r\n\r\n> > I propose returning None when no file is saved and a class attribute UNKNOWN_SAVED_STATUS = object() when the status is unknown. What do you think ?\r\n> \r\n> The problem is that what it currently does in return `None` in all cases which is more-or-less all backends choosing not to return anything (that is, if we are careful about back compatibility the new docstring should be consistent with old Matplotlibs, just that _all_ backends choose not to tell you anythingh). Thus, `None` needs to be the \"I don't know what happened\" return value.\r\n\r\nIMHO we don't have a practical back compatibility issue here. Until now, the formal return value was `None`, but practically it was just a function without a return value. No existing code should rely on the return value being `None`. The only catch is if new code that checks for return values is run with an older Matplotlib version. But that's somewhat academic.\r\n\r\nSince the features is never fully working for older versions (=no filename returned), people must either pin to newer versions or version gate their code anyway. There's only little benefit in forcing compatibility for one partial result (`None` == unknown save state). I value alignment with file dialogs higher than this partial compatibility.\r\n\r\n\r\n","Technically speaking (not arguing whether it's important or not) the backcompat issue pointed out by @tacaswell is with third-party gui backends (which most likely return None here too), as they would now run afoul of the spec (until they get updated) if returning None means \"nothing saved\".","@anntzer Thanks for the clarification. Without really knowing, but I find it rather unlikely, that somebody uses a third party backand *and* wants to know whether the save dialog was succcessful. Therefore, I'd still take the risk, so that we have the more consistent API in the long run.","We talked about this on the call and the consensus was to get with the original proposal (sorry @Zybulon !).\r\n\r\nThe logic is:\r\n - no existing use so we won't break anyone today\r\n - go with nicer API\r\n - use case of future users using older thirdparty that has not updated is a low-impact risk\r\n\r\ntodo:\r\n\r\n - go back to `None`, `CAN_NOT_TELL`, and filepath as possible returns\r\n - add API change note about it noting that third-party libraries must update to match new API\r\n - open an issue with kivy as https:\/\/github.com\/kivy-garden\/garden.matplotlib\/blob\/024d5c47f86577873de0939c169f369dd46ba595\/backend_kivy.py#L939-L940 is the only extant example I know of this."],"labels":["GUI: Qt","GUI: wx","GUI: gtk","GUI: MacOSX","GUI: tk","GUI: webagg","status: needs comment\/discussion","topic: canvas and figure manager"]},{"title":"[ENH]: plt.scatter() parameters are extremely confusing","body":"### Problem\n\nEverytime I have to change the marker, size or color of a scatter plot I have to google the parameters because they are impossible to remember. Why is it that:\r\n\r\n- to change marker color I can use either the `color` or `c` parameter,\r\n- but to change the marker I can only use `marker`, while the shortened version `m` does not work,\r\n- and to change the marker size only the shortened parameter `s` works but not `size` !!?\r\n\r\nSo confusing!\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/33369475\/13873a29-85f0-4455-85d8-b118638aafb7)\r\n\n\n### Proposed solution\n\nDefine parameters to customize the scatter plot more consistently.","comments":["Size `s` and color `c` are the properties you can set per data point `scatter(x, y, s=..., c=...)`. They are used quite often and it's a historic decision that they are single chararcters. Whether we like it or not, that's used too widely to be changed.\r\n\r\n`marker` is a single configuration parameter, and written out consistently throught the library (e.g. `plot(..., marker='x')`). It's not reasonable to add a shortcut `m` because that's redundant and not readable.\r\n\r\n`color` is a bit special. It's a `Collection` property and we allow setting all such properties via keyword arguments (we basically get that automatically because `scatter` creates a `Collection`. Unfortunately, this clashes with the semantics of the explicitly introduced `c`, so we have to remap `color` to `c`.\r\n\r\nThe only thing one could debate here is whether one wants to add an additional alias `size` mapping to `s`. But I claim it's not good to have multiple parameter names for the same thing.\r\n\r\nI see your issue but I don't see a way forward to make the API more clear while maintaining backward compatibility.","I understand the motivations, historical and not, that you have provided me for the current situation. But this does not change the fact that the current situation is confusing. Am I supposed to think \"oh ok, `s` and `c` are there for historic reasons, but wait `c` can also be set with `color` because `scatter` creates a `Collection` object, while for the markers I have to use `marker` because `m` is not there for historic reasons\" every time I need to change properites of a scatter plot? It's impossible to remember!\r\n\r\n\"It's not reasonable to add a shortcut `m` because that's redundant and not readable.\" -> Well... also `c` is redundant, and both `c` and `s` are not readable, so I don't really see your point.\r\n\r\n\"I claim it's not good to have multiple parameter names for the same thing.\" -> But you already have that: `color` is already remapped to `c` so again, I don't really see your point.\r\n\r\nThe ideal solution for this messy situation would be to add `m` for `marker` ans `size` for `s`, so that all the 3 proprietes are consistently set either with their explicit parameter, or their shortened version. If that is not possible, then yes, at least add `size` for `s`, so that people don't have to remember that marker and color are set with `marker` and `color`, but size is special and only works with `s`...\r\n\r\nI am sorry if i sound a little rough, but this problem frustrates me so much, i think i have googled how to set the properties of a scatter plot at least 100 times in my life.\r\n\r\n","See also #1101.","> See also #1101.\r\n\r\nIndeed! The inconsistency of `ms`\/`markersize` and `s` between `plot` and `scatter` also adds confusion to the situation. I didn't want to mention it in the first post because I wanted to focus on the `scatter` function, but that's also a problem that wasted a lot of my time for no reason.","Isn't the real problem `s`? I mean, it should be OK to write it out? (That not all parameters have abbreviations is maybe more expected?)","> > See also #1101.\n> \n> Indeed! The inconsistency of `ms`\/`markersize` and `s` between `plot` and `scatter` also adds confusion to the situation. \n\nHonestly also trips me up all the time that scatter doesn't have marker{size, facecolor, edgecolor} & I agree consistency on marker setting across the methods would be nice.\n","The only reason to use `scatter` over `plot` is to have the marker size and color change on a per-point basis.  If you want all your dots to have the same \"size\" and \"color\", then just use `plot`.  ","> If you want all your dots to have the same \"size\" and \"color\", then just use plot.\r\n\r\nWe mention this as an optimization, but `scatter`-> scatter plots and `plot`-> line plots is a reasonable way to understand\/use the API.  ","> but scatter-> scatter plots and plot-> line plots is a reasonable way to understand\/use the API.\r\n\r\nSure, but it would also be misleading.  \r\n\r\nThe `scatter` API has different names for `s` and `c` because they are meant to be vectors.  If you find yourself saying \"why can't I use `markersize` in `scatter`?\", rather than saying \"Matplotlib should make `scatter` more like `plot`\" you should say \"this is a situation where using `plot` is more appropriate than `scatter`\". \r\n\r\n",">If you find yourself saying \"why can't I use markersize in scatter?\", rather than saying \"Matplotlib should make scatter more like plot\" you should say \"this is a situation where using plot is more appropriate than scatter\".\r\n\r\nA) I have lots of situations where I don't want vector size but want vector color (sometimes also the reverse)\r\nB) plot really being `plot + limited scatter` to me is an argument for pulling the scatter\/marker specific keywords back to scatter","> > If you want all your dots to have the same \"size\" and \"color\", then just use plot.\r\n> \r\n> We mention this as an optimization, but `scatter`-> scatter plots and `plot`-> line plots is a reasonable way to understand\/use the API.\r\n\r\nThis interpretation is also the one that the majority of new users have (me included).","@francescoboc answering to https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27765#issuecomment-1935841574:\r\n\r\nOf couse you're not supposed to think these convoluted thoughts on every plot, my explanation was rather to motivate where the current state comes from.I advocate to think like this:\r\n\r\n- Use `plot()` for any pure *x*\/*y* data (i.e. no additional per-point information).\r\n  Whether to connect the data points with lines or represent them by markers or both is a visualization detail. Note: it's genrically named `plot` and explicitly does not encode the type (e.g. `line` or `scatter`\/`markers`) in the name.\r\n- User `scatter()` If you want to encode more information per data point (and this naturally only works through makers). We only support individual color (`c`) and size (`s`) for scatter markers. \r\n  (Maybe as a mnemonic: Like the single char variables `x` and `y` these encode primary data aspects)\r\n\r\nOn a side note, but not something you have to know\/remember:\r\n- further stylistic configuration applied to all data points is possibly through various keyword arguments, including `marker` in both cases. \r\n- `color` is an alias `c` in scatter for technical reasons, but you don't have to know\/use this.\r\n\r\n>>  `scatter`-> scatter plots and `plot`-> line plots is a reasonable way to understand\/use the API.\r\n>\r\n> This interpretation is also the one that the majority of new users have (me included).\r\n\r\nI'm very cautious with general claims what our users think - we usually don't have reliable data about that.\r\n\r\nI also think this is not a good interpretation and should not be advertised (@story645 I know you differ here). \"`plot` -> line\" is not obvious, it was if the function was called `line()` but it's not, and for a reason: The implementation is for makers and lines. I think the way of understanding should be as above: `plot()` for pure *x*\/*y* data (represented through line and\/or identical markers); `scatter()` if you need to encode more information per marker.\r\n\r\nOne may argue whether the visual-based interpretation (line\/marker) is simpler than the data-based interpretation. But whether we like it or not, the implementation of the functions matches the data-based interpretation, and I think we're not doing the users a service when we try to retrofit the visual-based interpretation.",">>> scatter-> scatter plots and plot-> line plots is a reasonable way to understand\/use the API.\r\n\r\n>> This interpretation is also the one that the majority of new users have (me included).\r\n\r\n> I also think this is not a good interpretation and should not be advertised (@story645 I know you differ here). \r\n\r\nI would go further and say this interpretation is completely wrong (even though it may be common) and we should actively write the docs in a way that goes against this misunderstanding.","@timhoffm \r\nI think it is not only a matter of misinterpretation, but also the fact that writing `plt.scatter(x,y)` is faster and cleaner than `plt.plot(x,y,ls='')` or `plt.plot(x,y,lw=0)`, whenever I want to make a scatter plot without lines connecting data points.\r\n\r\nAs for the \"reliable data on what other users think\", ok I admit that I have not done an official survey, but at least this is my experience from talking to coworkers and colleagues in academia.","@francescoboc there has to be a default, and `plot` happens to default to a line with no marker.  `plt.plot(x, y, 'o')` is the idiomatic way to make just circular markers with no line (in fact `plt.plot(x, y, ls='')` will make an empty plot).  It doesn't mean you _can't_ do `plt.scatter(x, y)`, just that they are two distinct APIs that are provided to do different things, but can be made to overlap.  These idioms are _very_ old (dating to early Matlab, so >40 years), so they are not likely to be changed in any major way.   I also think trying to make the methods overlap more would be an API mistake and lead to even more confusion (for instance `scatter(..., s=10)` and `plot(..., markersize=10)` are _different_ sizes!).  \r\n\r\n> we should actively write the docs in a way that goes against this misunderstanding.\r\n\r\nFor sure, if there are places where we could differentiate better that would be welcome.  \r\n\r\nI'll also point out that it is quite easy to write wrappers around our API for your own API (`my_homogenous_scatter(ax, x, y, ...)`).","> @francescoboc there has to be a default, and `plot` happens to default to a line with no marker. `plt.plot(x, y, 'o')` is the idiomatic way to make just circular markers with no line (in fact `plt.plot(x, y, ls='')` will make an empty plot). It doesn't mean you _can't_ do `plt.scatter(x, y)`, just that they are two distinct APIs that are provided to do different things, but can be made to overlap. These idioms are _very_ old (dating to early Matlab, so >40 years), so they are not likely to be changed in any major way. I also think trying to make the methods overlap more would be an API mistake and lead to even more confusion (for instance `scatter(..., s=10)` and `plot(..., markersize=10)` are _different_ sizes!).\r\n> \r\n> > we should actively write the docs in a way that goes against this misunderstanding.\r\n> \r\n> For sure, if there are places where we could differentiate better that would be welcome.\r\n> \r\n> I'll also point out that it is quite easy to write wrappers around our API for your own API (`my_homogenous_scatter(ax, x, y, ...)`).\r\n\r\nYes, sorry I wrote it quickly and I forgot the marker parameter. What I would normally use is `plt.plot(x, y, ls='', marker='o')`.\r\nI just tried `plt.plot(x, y, 'o')`, and yes it does indeed produce a scatter plot with no lines, thank you for the suggestion! I will use this command from now on instead of `plt.scatter`.\r\n\r\nThe main confusion for me comes from the fact that, intuitively, if I want to make a simple **scatter** plot (with all points having the same properties) I use **`plt.scatter(x,y)`**, but after this exchange I now understand that the correct function is `plt.plot(x,y,'o')`. This in my opinion is misleading and leads many users to misuse the `scatter` function.","(Perhaps I can take advantage of this discussion to try and revive #14174, by the way?)","> I would go further and say this interpretation is completely wrong (even though it may be common) and we should actively write the docs in a way that goes against this misunderstanding\n\nOk fine it's wrong but I don't think this is possible to correct in docs b\/c line and scatter have fundementally different semantics and our defaults highlight those different semantics\n\n* ax.plot(y) -> line plot\n* ax.scatter(x, y) -> scatter plot\n\nSo I don't see how we sell people on \"so yes the default of plot is a line plot but use plot when trying to make a line plot or a very specific type of scatter plot, but use scatter when making every single other type of scatter plot and oh yeah it can make the specific type of scatter you're trying to make too.\" \n\nFor the record, it also frustrates me that stackplot is either an areaplot or a streamgraph, but that at least is b\/c they're originating from the same paper.\n\n>  (for instance scatter(..., s=10) and plot(..., markersize=10) are different sizes!).\n\nYeah, I think that's really terrible for consistency and we have #25259 for that reason","It probably doesn't help that `plot` returns an object called `Line2D`, even if no line is drawn.","Would it be worth adding a second entry for `plot` in [plot types](https:\/\/matplotlib.org\/stable\/plot_types\/index#pairwise-data) showing a scatter plot?  The `scatter` entry already has random colours and sizes, so it could help illustrate the distinction between what to use for a simple scatter vs a more configured one.","Friends, the relation between `plot` and `scatter` *is* messy for historic reasons, partly originating even from MATLAB. Just complaining that it's unintuitive or insisting on one certain ill-fitting point of view (plot = line plot) does not make it better for our user. I'd like to have constructive suggestions how to improve the situation.\r\n\r\nWe only have very limited possibilities to change the API and naming due to backward-compatibility. IMHO we can help the users most by proper description in the documentation. In particular that means *not* primarily associtating `plot` with the visual (line vs. marker) but with the data. The docstring already does this \"Plot y versus x as lines and\/or markers\".\r\n\r\nThe plot types visual could simply be expanded to ![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/6474844e-76ba-4fa9-8896-060794ebd520)\r\n","> Would it be worth adding a second entry for `plot` in [plot types](https:\/\/matplotlib.org\/stable\/plot_types\/index#pairwise-data) showing a scatter plot?\r\n\r\nCross post :smile: . Yes! See my comment above.\r\n","If the thumbnails look like this, it makes it really obvious how much the use-cases can overlap\r\n\r\n![plot](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10599679\/2799c044-053c-4ee6-94ff-5041ce68c085) ![plot_scatter](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10599679\/169f76be-d965-442a-a731-a95ee389753d) ![scatter](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10599679\/8c251d3b-84e6-4e34-9dad-5634897347df)\r\n",">Just complaining that it's unintuitive or insisting on one certain ill-fitting point of view (plot = line plot) does not make it better for our user. I'd like to have constructive suggestions how to improve the situation\r\n\r\nFrankly, I think the API mismatch issue between `plot` and `scatter` is even worse if we insist on recommending `plot` for uniform scatter because a very common exploratory viz workflow is layering in more encodings so we'd end up encouraging users to start with `plot` to make the scatter, then move to `scatter` to encode size and color and so they'd run into more issues w\/ parameters not having the same name.\r\n\r\nI'm not trying to complain, I'm just wondering why we're insisting on what we'd normally consider bad API: \r\n\r\n* plot -> line plot + one very specific type of scatter \r\n\r\n* scatter -> every type of scatter except uniform scatter, which this function can also handle just fine.\r\n\r\nWhen we have the simple usability\/less confusing out of recommending `scatter` for the general case and `plot` for the optimized case. ETA: Concretely and constructively, scatter for 0D discrete data, plot for samples of 1D continuous data b\\c those are the underlying assumptions of each method (plot is drawing invisible lines between the markers). \r\n \r\nLike I think @rcomer 's thumbnail example only highlights this issue of heavy somewhat confusing overlap. I think adding the line example makes more sense b\/c it highlights what I think is the primary purpose of `plot` scatter function, which is annotate the line w\/ markers -which is why there's also a markevery keyword on `Line2D` while scatter doesn't allow for that b\/c every point needs to be shown. Which again boils down to the semantic assumptions baked in on what the data is supposed to be - the reason for markevery is the underlying assumption of continuity.\r\n","> scatter -> every type of scatter except uniform scatter\r\n\r\nJust to confuse things further, I recently changed some code from using `scatter` to using `plot` because I wanted [half-filled markers](https:\/\/matplotlib.org\/stable\/gallery\/lines_bars_and_markers\/marker_reference.html#marker-fill-styles), which I don't think `scatter` can do?",">  [half-filled markers](https:\/\/matplotlib.org\/stable\/gallery\/lines_bars_and_markers\/marker_reference.html#marker-fill-styles), which I don't think `scatter` can do?\r\n\r\nYou're right, and I think scatter should support the half-filled b\/c I don't think we should have inconsistency in the markers we support - we've done the other way and allowed `plot` to take `MarkerStyle` methods.  \r\n\r\nETA: w\/ the caveat that I think the reason we don't support it has to do w\/ the technical implementation of the markers such that I recognize it may be hard\/technically impossible to implement half-filled and respect scatter semantics.\r\n\r\nETA2: Tried to sketch this out:\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/5c02aa9f-92e3-4e2e-895e-84888304e78e)\r\n\r\n","> This in my opinion is misleading and leads many users to misuse the scatter function.\r\n\r\nI don't think it's a misuse of `scatter`, but it just has a different API, so needs to be used differently.  `markersize` and `color` don't work because the `scatter` API allows vectors for `s` and `c`. \r\n\r\n> very common exploratory viz workflow is layering in more encodings so we'd end up encouraging users to start with plot to make the scatter, then move to scatter to encode size and color and so they'd run into more issues w\/ parameters not having the same name.\r\n\r\nI don't think anyone is encouraging that, necessarily.  If they want to move from `scatter(x, y, s=1)` to `scatter(x, y, s=z)`, that is great and perfectly within the API.  But I'd argue `scatter(x, y, markersize=1)` to `scatter(x, y, s=z)` is worse, and more confusing.  Particularly as `s` and `markersize` are different units: `s=2` is the same as `markersize=sqrt(2)`.  Overloading to `scatter(x, y, markersize=1)` to `scatter(x, y, markersize=z)`, would maybe be OK, but I'm still not a fan as it is a different markersize than for `Line2D` markers.  I think it is more clear to keep it a distinct keyword particular to `scatter`.  ","While this is getting quite off-topic, I just want to note that you can have half-filled markers in `scatter`.\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.markers import MarkerStyle\r\nimport numpy as np\r\n\r\nx, y = np.random.random((2, 20))\r\nplt.scatter(x, y, s=500, marker=MarkerStyle('o', fillstyle='right'))\r\nx, y = np.random.random((2, 20))\r\nplt.scatter(x, y, s=500, marker=MarkerStyle('o', fillstyle='top'))\r\n```\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/8a17a510-aadc-47a4-83a3-47af38e2301b)\r\n\r\nSo the fundamental mechanism is in place. I suspect however that styling is limited, because the colors and linewidths are not exposed through kwargs.","> .Overloading to `scatter(x, y, markersize=1)` to `scatter(x, y, markersize=z)`, would maybe be OK, but I'm still not a fan as it is a different markersize than for `Line2D` markers.  I think it is more clear to keep it a distinct keyword particular to `scatter`.  \n\nSo I kinda agree here in that I think if scatter were to get a markersize keyword, it should be in the same units as `Line2D`. Which, my primary reason for wanting the marker{face,alt,edge}color keywords is also b\/c   of wanting a consistent interface for markers. I get the argument that `scatter` doesn't need the marker preface b\/c the only option is markers, but like it may not hurt to document that explicitly as a note or something.\n\n","A fundamental issue with the marker handling in `scatter()` is that the underlying artist is a `PathCollection` and does not know anything about markers. We convert the marker to a Path in `scatter()`. While one could try and just monkey patch marker kwargs onto scatter, you won\u2019t full functionality: e.g. you still would not have `set_markeredgecolor()`, and also not the property aliases, e.g. `mec`.\r\n\r\nI therefore recommend to make a marker-aware subclass `MarkerPathCollection`\/`ScatterCollection` if you want to improve marker handling in `scatter()` and handle all logic therein.\r\n\r\nNote however, that even then there will remain some rough edges. For example, the rcParams for markers are in the \u201clines\u201d subgroup."],"labels":["New feature"]},{"title":"[Bug]: colorbar doesn't register inset_axis as cax ","body":"### Bug summary\n\nWhen constructing inset axes using the tutorial on [this page](https:\/\/matplotlib.org\/stable\/gallery\/axes_grid1\/demo_colorbar_with_inset_locator.html) the gradient of the colorbar does not appear in the constructed inset axis but somewhere else on the figure (location seems to depend on figure size) once saved to a PDF with multiple other figures if bbox_inches='tight'. Similar to #27143 and #25176.\n\n### Code for reproduction\n\n```python\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\r\nimport matplotlib.pylab as plt\r\nfrom matplotlib.backends.backend_pdf import PdfPages\r\n\r\n#make the first figure\r\nfig, axes = plt.subplots(1, 1, facecolor = 'white', figsize = (20, 5), constrained_layout = True)\r\n\r\nx = random.randint(100, size=(100, 2048))\r\nc = axes.imshow(x, origin = 'lower', cmap = 'Reds', vmin = 0, vmax = 100, aspect = \"auto\")\r\naxins1 = inset_axes(axes,\r\n                    width=\"10%\",\r\n                    height=\"30%\",\r\n                    loc=\"upper left\",\r\n                    bbox_to_anchor = (0.045, 0., 1, 1),\r\n                    bbox_transform = axes.transAxes\r\n                    )\r\naxins1.xaxis.set_ticks_position(\"bottom\")\r\nfig.colorbar(c, cax=axins1, orientation=\"horizontal\")\r\naxes.set_yticklabels([])\r\n\r\nfig.suptitle(\"Title\")\r\nplt.figtext(-0.02, 0.5, 'Random', c = 'k', rotation = 90, ma = 'center', fontsize = medium)\r\n\r\n#make figure 2\r\nfig2, axes = plt.subplots(1, 1, facecolor = 'white', figsize = (20, 5), constrained_layout = True)\r\n\r\nx = random.randint(100, size=(100, 2048))\r\nc = axes.imshow(x, origin = 'lower', cmap = 'Reds', vmin = 0, vmax = 100, aspect = \"auto\")\r\naxins1 = inset_axes(axes,\r\n                    width=\"10%\",\r\n                    height=\"30%\",\r\n                    loc=\"upper left\",\r\n                    bbox_to_anchor = (0.045, 0., 1, 1),\r\n                    bbox_transform = axes.transAxes\r\n                    )\r\naxins1.xaxis.set_ticks_position(\"bottom\")\r\nfig2.colorbar(c, cax=axins1, orientation=\"horizontal\")\r\naxes.set_yticklabels([])\r\n\r\nfig2.suptitle(\"Title\")\r\nplt.figtext(-0.02, 0.5, 'Random', c = 'k', rotation = 90, ma = 'center', fontsize = medium)\r\n\r\n#save figs to PDF\r\nfigs = [fig, fig2]\r\nwith PdfPages('test.pdf') as pdf:\r\n    for fig in figs:\r\n        pdf.savefig(fig, bbox_inches='tight')\n```\n\n\n### Actual outcome\n\nThe gradient for the colorbar appears outside of the inset axes on each of the plots\r\n[test_small.pdf](https:\/\/github.com\/matplotlib\/matplotlib\/files\/14215554\/test_small.pdf)\r\n\n\n### Expected outcome\n\nThe result for this particular example when bbox_inches='tight' is not called in savefig(). Note: when running in jupyter lab this is always the outcome--only when saving the figure does the gradient jump out of the inset axis.\r\n[test_loose.pdf](https:\/\/github.com\/matplotlib\/matplotlib\/files\/14215555\/test_loose.pdf)\r\n\n\n### Additional information\n\nI tried the same suggestion as in #27143 and used `axins1 = axes.inset_axes([0.05, 0.7, 0.1, 0.2], transform = axes.transAxes)` in my own code which seemed to fix this. Unsure why the example constructor for inset_axes [here](https:\/\/matplotlib.org\/stable\/gallery\/axes_grid1\/demo_colorbar_with_inset_locator.html) doesn't work in this case.\n\n### Operating system\n\nMac OS 13.6.3 (Ventura) Intel\n\n### Matplotlib Version\n\n3.8.0\n\n### Matplotlib Backend\n\nInstalled osx event loop hook. MacOSX\n\n### Python version\n\nPython 3.9.18\n\n### Jupyter version\n\nJupyter Lab 3.6.3\n\n### Installation\n\nconda","comments":["\"Users should consider using ax.inset_axes instead\".  https:\/\/matplotlib.org\/stable\/users\/explain\/axes\/colorbar_placement.html#colorbar-placement","This can be reproduced more simply with\r\n\r\n```python\r\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nfig, axes = plt.subplots(1, 1)\r\n\r\nx = np.random.randint(100, size=(10, 200))\r\nc = axes.imshow(x, origin='lower', cmap='Reds', aspect='auto')\r\naxins1 = inset_axes(axes,\r\n                    width=\"10%\",\r\n                    height=\"30%\",\r\n                    loc=\"upper left\",\r\n                    bbox_to_anchor = (0.045, 0., 1, 1),\r\n                    bbox_transform = axes.transAxes\r\n                    )\r\n\r\nfig.colorbar(c, cax=axins1, orientation=\"horizontal\")\r\n\r\nfig.savefig('test_single.png', bbox_inches='tight')\r\nfig.savefig('test_single.pdf', bbox_inches='tight')\r\n```\r\nThe png is fine, the pdf shows the problem.  Confirmed broken on `main`.","I can reproduce this in v3.7.3 but not in v3.7.1.  The code won't run at v3.7.2 because of #26287.","If I branch off v3.7.x and drop the commit from #25499 (which caused #26287), I cannot reproduce.","```\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nfig, axes = plt.subplots(1, 1, layout='constrained')\r\n\r\nx = np.random.randint(100, size=(30, 200))\r\nc = axes.imshow(x, origin='lower', cmap='Reds', aspect=1)\r\naxins1 = axes.inset_axes([0.05, 0.8, 0.2, 0.09])\r\n\r\nfig.colorbar(c, cax=axins1, orientation=\"horizontal\")\r\n\r\nfig.savefig('test_single.png', bbox_inches='tight')\r\nfig.savefig('test_single.pdf', bbox_inches='tight')\r\n```\r\n\r\nAlso seems to have a small error in the placement of the colorbar's colors in PDF:\r\n\r\n<img width=\"382\" alt=\"Cbar\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1562854\/d7297b6b-c290-48b0-9fdf-9a433321a495\">\r\n\r\nThis doesn't happen if you dont' use `bbox_inches='tight'`, so maybe the same bug, but much more subtle\r\n","similar problem with cartopy and inset. when saving figure in pdf with bbox_inches='tight' the colorbar's colors is moving with matplotlib 3.8.3. Solved by using matplotlib 3.7.1"],"labels":["status: confirmed bug","topic: mpl_toolkit","backend: pdf"]},{"title":"macOS: Check for display availability when looking for backends","body":"## PR summary\r\n\r\nThis checks `NSScreen::mainScreen` similar to checking `$DISPLAY`\/`$WAYLAND_DISPLAY` on Linux.\r\n\r\nFixes #26292\r\n\r\n## PR checklist\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [n\/a] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [n\/a] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines","comments":["I can confirm that this:\r\n\r\n - logged in (but locked) with screen plugged in -> True\r\n - logged in (but locked) with the hdmi unplugged -> True\r\n - logged out -> False","Running the tests on this branch locally without a user logged in to the desktop (so launched via ssh) I get:\r\n\r\n```\r\nERROR lib\/matplotlib\/tests\/test_backend_macosx.py::test_cached_renderer - ImportError: Cannot load backend 'macosx' which requires the 'macosx' interactive framework, as 'headless' is currently running\r\nERROR lib\/matplotlib\/tests\/test_backend_macosx.py::test_savefig_rcparam - ImportError: Cannot load backend 'macosx' which requires the 'macosx' interactive framework, as 'headless' is currently running\r\n```\r\n\r\nThis suggests that what is going on the CI is slightly different than not having a display?\r\n","On Actions, the display does appear to exist, according to the results from #27723:\r\n```\r\nmainScreen: Built-in Display (1920.000000x1080.000000)+0.000000+0.000000 @8\r\ndeepestScreen: Built-in Display (1920.000000x1080.000000)+0.000000+0.000000 @8\r\nAvailable screens: 1\r\n    0: Built-in Display (1920.000000x1080.000000)+0.000000+0.000000 @8\r\n```\r\n\r\nFor your failures, I think that's because the macOS tests don't have a skip, so I hadn't added one (only modified existing ones.)","I tried re-running the failed mac3.11 jobs.","Looking at https:\/\/stackoverflow.com\/questions\/71954472\/tkinter-crashes-on-ipython-but-not-in-python-on-a-m1-mac I think this might be because `NSApplicationLoad` messes with Tkinter somehow. I thought they were shared instances, but there must be something Tkinter is doing that confuses it if we create one ourselves.","Ah, here's a [full explanation](https:\/\/bugs.python.org\/issue46573#msg412349):\r\n\r\n> * Both pyglet and Tk use AppKit to implement their GUI\r\n> * AppKit uses an NSApplication class, and in particular a singleton instance of that class, to represent the application, which will get instantiated during application startup\r\n> * The Tk library uses a sublclass of NSApplication with additional functionality (TkApplication).\r\n> * When pyglet is started first the NSApplication singleton is an instance of NSApplication and not of TkApplication, but Tk's implementation assumes that the singleton is an instance of TkApplicationo.\r\n\r\nbut substitute the new code written here for `pyglet` above.\r\n\r\nAFAICT from Googling though, we need the `NSApplication` instance to be sure that the `NSScreen` attributes are filled, though I've not tested it out myself.\r\n\r\nCan you check if it works without the `NSApplicationLoad`?"],"labels":["OS: Apple"]},{"title":"Move doc\/users\/installing\/ to doc\/install\/","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\n\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n\r\nThis PR addresses the issue https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27396 on moving non user guide related content out of \/users. This is the second step, moving `\/doc\/users\/installing` -> `\/doc\/install`.\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #27396\"\r\n- [N\/A] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Probably gonna need a git grep here, but the following will likely need to be updated:\r\n* \r\n* https:\/\/github.com\/matplotlib\/matplotlib\/tree\/main\/doc#readme\r\n* https:\/\/github.com\/matplotlib\/matplotlib\/blob\/3323ae853bec0f43f29d44e2d47b7de9c8e97245\/doc\/devel\/contribute.rst?plain=1#L267-L274\r\n* should probably retain link since that's to stable (and redirect will pick it up) but path: \r\n  https:\/\/github.com\/matplotlib\/matplotlib\/blob\/e16967f45f2a68160a740edc873cd01a5907d883\/README.md?plain=1#L31-L35"],"labels":["Documentation: devdocs","Documentation: user guide","Documentation: API"]},{"title":"[ENH]: save_figure returns image fullpath","body":"### Problem\n\nHello, \r\n\r\nI am integrating Matplotlib with the QtBackend inside a tool of data analysis.\r\nI would be interested if the function save_figure from the NavigationToolbar2QT class could return the fullpath of the saved image (the variable fname).\r\nFor now I have overloaded this function by adding the return parameter but it would much neater if it was made directly inside matplotlib. Plus, this could interest other people. \r\n\r\nFor consistency, maybe it would be best to do that for all backends. \r\n\r\nWhat do you think ?\n\n### Proposed solution\n\nThe function would look like this : \r\n\r\n```python\r\n\r\n    def save_figure(self, *args):\r\n        filetypes = self.canvas.get_supported_filetypes_grouped()\r\n        sorted_filetypes = sorted(filetypes.items())\r\n        default_filetype = self.canvas.get_default_filetype()\r\n\r\n        startpath = os.path.expanduser(mpl.rcParams['savefig.directory'])\r\n        start = os.path.join(startpath, self.canvas.get_default_filename())\r\n        filters = []\r\n        selectedFilter = None\r\n        for name, exts in sorted_filetypes:\r\n            exts_list = \" \".join(['*.%s' % ext for ext in exts])\r\n            filter = f'{name} ({exts_list})'\r\n            if default_filetype in exts:\r\n                selectedFilter = filter\r\n            filters.append(filter)\r\n        filters = ';;'.join(filters)\r\n\r\n        fname, filter = QtWidgets.QFileDialog.getSaveFileName(\r\n            self.canvas.parent(), \"Choose a filename to save to\", start,\r\n            filters, selectedFilter)\r\n        if fname:\r\n            # Save dir for next time, unless empty str (i.e., use cwd).\r\n            if startpath != \"\":\r\n                mpl.rcParams['savefig.directory'] = os.path.dirname(fname)\r\n            try:\r\n                self.canvas.figure.savefig(fname)\r\n            except Exception as e:\r\n                QtWidgets.QMessageBox.critical(\r\n                    self, \"Error saving file\", str(e),\r\n                    QtWidgets.QMessageBox.StandardButton.Ok,\r\n                    QtWidgets.QMessageBox.StandardButton.NoButton)\r\n        return fname\r\n```","comments":[],"labels":["New feature"]},{"title":"Issues passing from scatter to tricontourf","body":"Hi everyone,\r\n\r\nI am not that familiar in using the function tricontourf. I would need help understanding what I am doing wrong.\r\nSo basically, from an external FEM software, I am getting datas from a line of nodes: \r\n- x coordinates of these nodes (that I need to plot in the x axis) [X_coord.csv](https:\/\/github.com\/matplotlib\/matplotlib\/files\/14141195\/X_coord.csv)\r\n- time steps of the simulation (that I need to plot in the y axis) [time.csv](https:\/\/github.com\/matplotlib\/matplotlib\/files\/14141197\/time.csv)\r\n- stress (that should give the color of the plot) [stress.csv](https:\/\/github.com\/matplotlib\/matplotlib\/files\/14141199\/stress.csv)\r\n\r\nI managed to get a first glimpse of what I want my final plot to look like using: matplotlib.pyplot.scatter. That gives: \r\n![scatter](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/158583781\/5065ba91-fd27-4f22-b356-0674cea77995)\r\n\r\nHowever, I would the plot to be continuous and for that I tried to use: matplotlib.tri.tricontourf. That gives:\r\n![tricontourf](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/158583781\/bb0e08f3-4781-40a8-bda7-5cc6e49e2697)\r\n\r\nDo you from where are coming this pattern of vertical lines? Do you know how can I improve my basic code to have something that looks better? The big yellow part (that should be white) in the tricontourf around 0.04 is not that problematic since I can plot the two parts (left and rigth parts) separately but if you have any improvement on that side, you are welcome!\r\n\r\n\r\nHere is my code:\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nX=np.loadtxt(r'....\\X_coord.csv')\r\nY=np.loadtxt(r'....\\time.csv')\r\nS33=np.loadtxt(r'....\\stress.csv')\r\n\r\nfig, ax1 = plt.subplots(nrows=1)\r\ntest=ax1.tricontourf( X ,Y ,S33 ,levels=1000, cmap=\"viridis\")\r\nax1.scatter(X,Y,c=S33,cmap='viridis',vmin=-5000, vmax=100,s=5)\r\n\r\nfig.colorbar(test, ax=ax1)\r\nax1.set(xlim=(-0.003, 0.08), ylim=(-4e-10, 1.3e-8))\r\n```\r\n\r\nThanks in advance,\r\nCheers","comments":["The problem here is that the scale of the two axes is vastly different (~1e-8 vs ~1e-2).\r\n\r\nThe triangulation algorithm tries to maximize the minimum angle of the triangles and is performed on the numbers as handed in (i.e. in `data` space, not in `screen` space), but that gets distorted when they are stretched by different factors along each axis.\r\n\r\nYou should be able to triangularize by normalized fields and get a reasonable triangulation. (You can also triangularize based on screen space, but that requires knowing\/setting the axis limits prior to actually plotting your data, so thus either plotting and removing or checking limits (and generally getting roughly the same answer anyway... though if you have axes that are not roughly square, you may want to think through scaling factors on the norms more)\r\n\r\nsomething like:\r\n\r\n```python\r\nx_norm = (X - X.min()) \/ X.ptp()\r\ny_norm = (Y - Y.min()) \/ Y.ptp()\r\ntri = mpl.tri.Triangulation(x_norm, y_norm)\r\n\r\nax1.tricontourf(X, Y, S33, levels=1000, triangles=tri.triangles, cmap=\"viridis\")\r\n```\r\n\r\nIf you _know_ your axis limits, you can also scale by those instead of `min` and `ptp` (the latter being max-min). Or any number of ways to scale them so that they are at least close to the proportions of the final output.\r\n\r\nWith the gap in your particular data, you _may_ wish to set a `mask` and then used `get_masked_triangles` instead of `.triangles`. That could allow you to plot it all at once.","Thank you a lot @ksunden \r\n\r\nI tried to implement the code you sent me. For the vast majority of the graph, it is working fine but in the bottom right corner, there are some strange mesh interaction. Also it seems that the data below 9.5e-10 is missing. Any clue to solve these two problems?\r\n\r\n![tricontourf_improved](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/158583781\/ca6989bf-4b03-4f44-9d7b-df707a113283)\r\n"],"labels":["Community support"]},{"title":"ci: Enable testing on M1 macOS","body":"## PR summary\r\n\r\nJust added in beta today:\r\nhttps:\/\/github.blog\/changelog\/2024-01-30-github-actions-introducing-the-new-m1-macos-runner-available-to-open-source\/\r\n\r\nNeed to see which of the optional dependencies are okay with this.\r\n\r\n## PR checklist\r\n\r\n- [n\/a] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [n\/a] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [n\/a] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [n\/a] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines","comments":["Minimum Python available there is 3.10 now, so bumped that up. It looks like `pycairo` and `PyGObject` don't have wheels. PyQt5 and wxPython4 have wheels, but I haven't tried allowing the others that were blocked on macOS yet.\r\n\r\nWe do seem to be getting a lot more failures here than we did when trying Cirrus in #24597.","I've de-conditionalized all optional GUI dependencies so I can verify whether they should be skipped or not.","The results are the following:\r\n| System                     | PyGObject3         | PyGObject4         | PyQt5              | PySide2            | PyQt6              | PySide6            | wxPython           |\r\n| -------------------------- | ------------------ | ------------------ | ------------------ | ------------------ | ------------------ | ------------------ | ------------------ |\r\n| Py3.9 Ubuntu 20.04 MinVer  | :heavy_check_mark: | :x:                | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\r\n| Py3.9 Ubuntu 20.04 Extras  | :heavy_check_mark: | :x:                | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\r\n| Py3.10 Ubuntu 20.04 Extras | :heavy_check_mark: | :x:                | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\r\n| Py3.11 Ubuntu 22.04 Extras | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\r\n| Py3.12 Ubuntu 22.04        | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :bangbang:         | :heavy_check_mark: | :heavy_check_mark: | :x:                |\r\n| macOS 12 amd64             | :x:                | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\r\n| macOS 14 arm64             | :x:                | :ferris_wheel:     | :heavy_check_mark: | :x:                | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\r\n\r\nMost are available everywhere.\r\n\r\nThe PyGObject 3\/4 split doesn't have any effect, as the dependencies are the same either way (the only difference is the native dependency.) Only PyGObject 4 on macOS 14 arm64 is missing wheels, but appears to be available regardless after building them.\r\n\r\nPySide2 on Python 3.12 installs a wheel, but crashes. I believe PySide2 is no longer supported so they didn't bother fixing it for Python 3.12, and because it's some kind of universal thing, it still installed. On the other hand the M1 was new enough that there were no wheels for it.","I rebased #24597 for comparison, and it doesn't seem to fail nearly as many tests. I can't see any tolerance issues at all. For a reason I don't understand, `xfail` appears to be broken on both.","Ah, looking at the [pytest 8 changelog](https:\/\/docs.pytest.org\/en\/8.0.x\/changelog.html#improvements), xfails are now fully reported with backtraces. This seems far too noisy, and we may have to disable that.","```\r\n(mpl-dev) tcaswell@seven matplotlib %  python -c 'from matplotlib.backends._macosx import print_screen_info; print_screen_info()'                                                                                                                                                                                      macos-m1\r\nmainScreen: Acer B286HK (3840.000000x2160.000000)+0.000000+0.000000 @8\r\ndeepestScreen: Acer B286HK (3840.000000x2160.000000)+0.000000+0.000000 @8\r\nAvailable screens: 1\r\n    0: Acer B286HK (3840.000000x2160.000000)+0.000000+0.000000 @8\r\n(mpl-dev) tcaswell@seven matplotlib %  python -c 'from matplotlib.backends._macosx import print_screen_info; print_screen_info()'                                                                                                                                                                                      macos-m1\r\nmainScreen: (unknown)\r\ndeepestScreen: (unknown)\r\nAvailable screens: 0\r\n(mpl-dev) tcaswell@seven matplotlib %  python -c 'from matplotlib.backends._macosx import print_screen_info; print_screen_info()'                                                                                                                                                                                      macos-m1\r\nmainScreen: (unknown)\r\ndeepestScreen: (unknown)\r\nAvailable screens: 0\r\n```\r\n\r\nThat is the result for me running over ssh with:\r\n\r\n - account logged in and a screen connected (but locked)\r\n - account logged out and a screen connected\r\n - account logged out and no screen connected\r\n\r\nThe account I was logged in via and the account I was ssh'd to were the same.  My guess is that being logged in as a different user on the screen would still result in no screens being reported via ssh (but I have not tested that if we care I can).\r\n\r\nWe should definitely adapt this and use it the same way we use the \"do we have a screen\" check on linux to auto fallback to Agg.","OK, I removed the debugging, and pushed the screen check to #27761.","OK, it's interesting that PyQt5 started failing even though that was always installed and it seems to still be the same version. I enabled PySide2, PyQt6, and PySide6, which could maybe conflict, but they don't seem to have installed any different packages.","I pushed https:\/\/github.com\/matplotlib\/matplotlib\/commit\/17dda1d040a9a5806fecb3dd97f09dbebe586249 to modify the cross Qt import test to be more resilient and actually test what we are interested in. I also pinged the meson-python issue to see if they can make a new release https:\/\/github.com\/mesonbuild\/meson-python\/issues\/524#issuecomment-2005876236","There seems to be a bug with `subprocess` on the M1 with Python 3.10. It is documented as:\r\n\r\n> The timeout argument is passed to [Popen.communicate()](https:\/\/docs.python.org\/3.10\/library\/subprocess.html#subprocess.Popen.communicate). If the timeout expires, the child process will be killed and waited for. The [TimeoutExpired](https:\/\/docs.python.org\/3.10\/library\/subprocess.html#subprocess.TimeoutExpired) exception will be re-raised after the child process has terminated.\r\n\r\nHowever, the child process doesn't seem to have been killed, as the `Popen.__del__` warning leaks into some other test instead.\r\n\r\nBumping M1 to Python 3.12 appears to have fixed it, though some of the Qt 6 tests are failing the sigint tests. Since they weren't tested before, I might have to mark them as xfail for now.","So I added a check for an exception in the signal handler, printed it out, then re-raised it: https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27723\/commits\/c1afbac74d6b64ced2954cb3d68b1ed79c0af6bd\r\n\r\nBut that magically makes the whole thing work, even though no exception is printed or re-raised, and coverage says those lines were not run. And this has worked twice now (with it still broken for a run in between where I removed the last patch.)"],"labels":["topic: mplot3d","OS: Apple","CI: Run cibuildwheel","topic: canvas and figure manager","CI: testing"]},{"title":"[ENH]: `cbook.get_sample_data` from Github","body":"### Problem\r\n\r\n[`matplotlib.cbook.get_sample_data()`](https:\/\/matplotlib.org\/stable\/api\/cbook_api.html#matplotlib.cbook.get_sample_data) gets sample data from mpl-data\/sample_data (536 KB) on the local machine.  But [`seaborn.load_dataset`](http:\/\/seaborn.pydata.org\/generated\/seaborn.load_dataset.html) downloads from its Github repo.\r\n\r\n### Proposed solution\r\n\r\nIt'd be better to download from the Github repo.  Not only would this enhancement reduce the package's installation size, but the repo can also add a readme to describe the sample data files.","comments":["Sample data gets used in documentation and tests. There's value in having this available offline. We don't want to download sample data every time to for tests and documentation builds. So we'd need to build a cache (theoretically even with invalidation if the data changes, but I'd argue that this is rare enough so that we don't need that).\r\n\r\nI'm questioning whether the added complexity is worth the effort. Before going there, I suggest to inspect whether we can reduce the sample data size.\r\n\r\nOn a general note, we should decide and document the purpose of sample data. It may be used\r\n\r\n- internally for documentation and tests. This data should be built in, and I think we don't want to burden us with guarantees on data.\r\n- to simply have something interesting to plot for users, e.g. in tutorials etc. Downloading is fine here.\r\n\r\nIf somebody is interested in untangling these, go for it. But I'd say this is low priority."],"labels":["New feature"]},{"title":"Add support for images with units","body":"## PR summary\r\nThis PR adds machinery for the data array given to a `ScalarMappable` to have units, and for those units to be used with images and associated colorbars.\r\n\r\nFixes https:\/\/github.com\/matplotlib\/matplotlib\/issues\/25062\r\nFixes https:\/\/github.com\/matplotlib\/matplotlib\/issues\/17447\r\nFixes https:\/\/github.com\/matplotlib\/matplotlib\/issues\/19476\r\nFixes https:\/\/github.com\/astropy\/astropy\/issues\/11306\r\n\r\nStill needs a user facing example adding, but opening to get early feedback and full CI runs.\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["One thing that may be nice(?) is if the unit machinery could also ensure that for categorical images, interpolation_stage is *always* set to \"rgba\".  (I guess the extra coupling between may be a bit awkward, though.)  Indeed, for categoricals, interpolation_stage=\"data\" is usually completely wrong (because category 1 isn't the \"mean\" of category 0 and category 2).  A concrete example (but I've seen similar things quite often, typically when doing image segmentation):\r\n```python\r\nimport skimage.data  # for sample data\r\n# a categorical image: which channel (r\/g\/b) of the image is the most intense\r\nim = skimage.data.stereo_motorcycle()[0].argmax(2)\r\nfig, axs = plt.subplots(2)\r\naxs[0].imshow(im); axs[1].imshow(im, interpolation_stage=\"rgba\")\r\n```\r\nThis gives\r\n![out](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1322974\/4896be97-e12e-4574-a402-fed1d79a32a2)\r\nwhere the bottom image clearly shows that the most intense channel is always either \"r\" (0, purple) or \"b\" (2, yellow); interpolation_stage=\"data\" (top) mistakently shows sometimes \"g\" (1) as the most intense channel because it averages 0 and 2.  (Ignore the few pixels at the middle top where green is indeed the most intense channel.)"],"labels":["New feature","topic: units and array ducktypes","topic: categorical","topic: color\/color & colormaps","topic: images","topic: collections and mappables"]},{"title":"[Bug]: Performance Issue: Significant Time Difference when Plotting Time Series Data with and without Timezones","body":"### Bug summary\n\nHello. When plotting time series data using Matplotlib and Pandas, I have observed a significant difference in execution times between plots with and without timezones. \r\n\r\n\r\n**Code and Observation:**\r\n\r\nI have provided a code snippet below for reference:\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\nn = 1000000\r\n\r\nvertical = [i for i in range(n)]\r\n\r\n# Prepare the data\r\ndates_no_tz = pd.date_range('2019-01-01', periods=n, freq='T')\r\ndates_with_tz = pd.date_range('2019-01-01', periods=n, freq='T', tz='UTC')\r\n\r\n# Plot the time series without timezone\r\n%time plt.plot(dates_no_tz, vertical)\r\n\r\n# Plot the time series with timezone\r\n%time plt.plot(dates_with_tz, vertical)\n```\n\n\n### Actual outcome\n\nCPU times: user 50.6 ms, sys: 19.1 ms, total: 69.7 ms\r\nWall time: 71.2 ms\r\nCPU times: user 3.44 s, sys: 192 ms, total: 3.63 s\r\nWall time: 3.69 s\n\n### Expected outcome\n\nExpect a similar execution time\n\n### Additional information\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.8.0\n\n### Matplotlib Backend\n\nmodule:\/\/matplotlib_inline.backend_inline\n\n### Python version\n\nPython 3.9.18\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip","comments":["https:\/\/github.com\/mwaskom\/seaborn\/issues\/3627#issuecomment-1916687929, I want to express my appreciation for [mwaskom](https:\/\/github.com\/mwaskom) for looking into this. It appears that the lag is indeed related to `plt.gca().xaxis.convert_units(df_with_tz[\"Time\"])`","I looked a bit into it and I am afraid there is not much to do. Much of the time is spent in a list comprehension, which is basically calling `datetime.astimezone` on each element from the input ; the remainder is spent converting to the `numpy.datetime64` format. Ideally, you would take care of the timezone stuff before plotting, in which case it skips this part and is much faster. Something like `np.arange(np.datetime64('2019-01-01'), np.datetime64('2019-01-01') + n*np.timedelta64(1,\"m\"), np.timedelta64(1,\"m\"))` would do the trick in the example case I think, although I suppose the actual case is more complex. In any case, this boils down to the time needed to make the timezone conversions so I do not think there is a way around this.\r\nEDIT : actually, using `.tz_convert('UTC').tz_localize(None)` on the DataFrame seems to work. This is purely a pandas solution though ; this does not change what the matplotlib code should do.\r\n![Screenshot from 2024-01-30 14-16-21](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1338337\/ea1c07d5-e12a-4cc4-be82-1ce35e2e9c6e)","> Much of the time is spent in a list comprehension, which is basically calling datetime.astimezone on each element from the input\r\n\r\nIs this happening in pandas or Matplotlib?","> Is this happening in pandas or Matplotlib?\r\n\r\nMatplotlib. More specifically, there : https:\/\/github.com\/matplotlib\/matplotlib\/blob\/41d4149f84b40d3a90a70f81b940985b8485f04a\/lib\/matplotlib\/dates.py#L405-L454 \r\nThe offending part is in the `if` block starting on line 439 (which gets skipped in the example with no timezone, and is executed when there is one). The thing is, this block is supposed to (also) work with regular `datetime` from the standard library ; it conveniently works with pandas as pandas uses the same API. So unless you are willing to add pandas specific code, I do not think there is a faster way to do this.\r\n","Thanks for digging into this @thuiop!  Do you know if Matplotlib's `date2num` gets called at all for the \"no timezone\" case?  Noting that Matplotlib ultimately needs a sequence of floats and Pandas presumably starts out with a sequence of ints\/floats, my suspicion is that in the \"no timezone\" case we get the original numbers directly without ever converting to datetimes.  I have checked that\r\n\r\n* Just plotting `vertical` against itself takes a similar amount of time as the \"no timezone\" case.\r\n* If I generate a sequence of datetimes with\r\n   `dates_no_tz = [datetime.datetime(2019, 1, 1) + datetime.timedelta(minutes=i) for i in range(n)]`\r\n  it takes about 25x longer to plot against that than against `dates_no_tz` created with pandas.","Yes, it is indeed called in the \"no timezone\" case ; however it is very fast in that case, as the underlying numpy array from pandas already has a `np.datetime64`-like dtype, which allows it to skip the (slow) timezone conversion. The thing is, with the current implementation, you first iterate over all the elements to convert the timezone and switch it to a naive datetime, and then recast it as a numpy array (which is also not free). Unless pandas-specific code is introduced, there is not a real way around this, since this needs to work for a list of `datetime` as in your second example ; I am pretty sure there is no fast way to convert from `datetime` to `np.datetime64`.","Thanks @thuiop.  So if I have understood, the problem ultimately boils down to the fact that [numpy datetime64 does not support timezones](https:\/\/numpy.org\/doc\/stable\/reference\/arrays.datetime.html#datetime64-conventions-and-assumptions).  If it did, Pandas would presumably pass us datetime64 in both cases.\r\n\r\nIn which case I agree that there is nothing we can do for this within Matplotlib.","For added evidence, this is also slow with pure `datetime`.  I don't know of any way to convert a list of datetimes faster than the list comprehension.  Could possibly modify in place?  \r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport datetime\r\nimport pytz\r\nimport time\r\n\r\n# Prepare the data\r\nN = 1_000_000\r\nvertical = [i for i in range(N)]\r\ndates_no_tz = [datetime.datetime(2024, 1, 1) + datetime.timedelta(seconds=x) for x in range(N)]\r\n\r\n# Plot the time series without timezone\r\nstart = time.time()\r\nplt.plot(dates_no_tz, vertical)\r\nprint('Time no tz ', time.time()-start)\r\nplt.show()\r\n\r\ndates_w_tz = [pytz.timezone('Europe\/Berlin').localize(datetime.datetime(2024, 1, 1)) + datetime.timedelta(seconds=x) for x in range(N)]\r\n\r\n# Plot the time series with timezone\r\nstart = time.time()\r\nplt.plot(dates_w_tz, vertical)\r\nprint('Time w timezone', time.time()-start)\r\nplt.show()\r\n```\r\n\r\n```\r\nTime no tz  1.9029\r\nTime w timezone 3.3815\r\n```\r\n\r\n\r\n","We can save a little here with `np.vectorize`, though I can't say whether it's really worth it.\r\n\r\n```python\r\nimport datetime\r\nimport timeit\r\nimport pytz\r\n\r\n# Prepare the data\r\nN = 1_000_000\r\nvertical = [i for i in range(N)]\r\ndates_no_tz = [datetime.datetime(2024, 1, 1) + datetime.timedelta(seconds=x) for x in range(N)]\r\n\r\n# Plot the time series without timezone\r\nprint('Time no tz ',\r\n      timeit.timeit('ax.plot(dates_no_tz, vertical)',\r\n                    setup='import matplotlib.pyplot as plt; plt.close(\"all\"); _, ax = plt.subplots()',\r\n                    globals=globals(), number=10) \/ 10)\r\n\r\n\r\ndates_w_tz = [pytz.timezone('Europe\/Berlin').localize(datetime.datetime(2024, 1, 1)) + datetime.timedelta(seconds=x) for x in range(N)]\r\n\r\n# Plot the time series with timezone\r\nprint('Time w timezone',\r\n      timeit.timeit('ax.plot(dates_w_tz, vertical)',\r\n                    setup='import matplotlib.pyplot as plt; plt.close(\"all\"); _, ax = plt.subplots()',\r\n                    globals=globals(), number=10) \/ 10)\r\n```\r\nbefore:\r\n```\r\nTime no tz  2.1389926880015993\r\nTime w timezone 4.112374102405738\r\n```\r\n\r\nand after this patch:\r\n```diff\r\ndiff --git a\/lib\/matplotlib\/dates.py b\/lib\/matplotlib\/dates.py\r\nindex c12d9f31ba..25a7ddc414 100644\r\n--- a\/lib\/matplotlib\/dates.py\r\n+++ b\/lib\/matplotlib\/dates.py\r\n@@ -374,6 +374,9 @@ def _from_ordinalf(x, tz=None):\r\n _from_ordinalf_np_vectorized = np.vectorize(_from_ordinalf, otypes=\"O\")\r\n # a version of dateutil.parser.parse that can operate on numpy arrays\r\n _dateutil_parser_parse_np_vectorized = np.vectorize(dateutil.parser.parse)\r\n+_make_tz_naive_vectorized = np.vectorize(\r\n+    lambda dt: dt.astimezone(UTC).replace(tzinfo=None),\r\n+    otypes=\"O\")\r\n\r\n\r\n def datestr2num(d, default=None):\r\n@@ -444,8 +447,7 @@ def date2num(d):\r\n         tzi = getattr(d[0], 'tzinfo', None)\r\n         if tzi is not None:\r\n             # make datetime naive:\r\n-            d = [dt.astimezone(UTC).replace(tzinfo=None) for dt in d]\r\n-            d = np.asarray(d)\r\n+            d = _make_tz_naive_vectorized(d)\r\n         d = d.astype('datetime64[us]')\r\n\r\n     d = np.ma.masked_array(d, mask=mask) if masked else d\r\n```\r\nis now:\r\n```\r\nTime no tz  2.122314026101958\r\nTime w timezone 3.574551021598745\r\n```\r\n\r\nFor Pandas, it's\r\n```\r\nIn [6]: %time plt.plot(dates_with_tz, vertical)\r\nCPU times: user 8.35 s, sys: 92.6 ms, total: 8.44 s\r\nWall time: 8.46 s\r\n```\r\nvs\r\n```\r\nIn [6]: %time plt.plot(dates_with_tz, vertical)\r\nCPU times: user 7.73 s, sys: 165 ms, total: 7.89 s\r\nWall time: 7.92 s\r\n```","Not sure if related https:\/\/github.com\/pandas-dev\/pandas\/issues\/57035"],"labels":["topic: date handling","Performance","third-party integration: pandas"]},{"title":"Suptitle swapping order of updates between defaults and fontdict","body":"Closes #27630\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\n\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n\r\nIssue #27630 highlighted how passing a `size`  value inside `fontdict` was being ignored within `figure.suptitle`. This was happening because the default kwargs sent to Text were being updated with the defaults last (i.e. highest priority). Switching the order of the dictionary update fixes this, giving highest priority to arguments specified in `fontdict` by the user.\r\n\r\nTest code by @boffi:\r\n```\r\nimport matplotlib.pyplot as plt\r\n\r\nfig = plt.figure(figsize=(8, 3), layout='constrained')\r\nf0, f1 = fig.subfigures(1, 2)\r\nf0.suptitle('xxxXXX', fontdict=dict(family='Candara', size=30))\r\nf0.add_subplot().set_title('xxxXXX', fontdict=dict(family='Candara', size=20))\r\nf1.suptitle('xxxXXX', size=30, fontdict=dict(family='Candara'))\r\nf1.add_subplot().set_title('xxxXXX', size=20, fontdict=dict(family='Candara'))\r\nplt.show()\r\n```\r\n\r\nBroken behavior:\r\n![Figure_0](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/15110959\/92d7b836-0f3f-48a0-a47e-98c27f4b9763)\r\n\r\nFixed behavior:\r\n![Figure_1](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/15110959\/1a42ea80-f735-49b1-b235-8e442b8c5bc1)\r\n\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] N\/A *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] N\/A *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [ ] N\/A Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n\r\nNote: This is my first PR. Please let me know if I messed up anything here.\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["@jklymak, I added a test. Let me know if this needs anything else.","Is it possible to test without an image test by querying the fontsize?  We try to minimize image tests, particularly with text, but sometimes it is unavoidable.  ","> Is it possible to test without an image test by querying the fontsize? We try to minimize image tests, particularly with text, but sometimes it is unavoidable.\r\n\r\n@jklymak, made this change. Thank you for the guidance!","The new test does not appear to be passing."],"labels":["status: needs tests","topic: figures and subfigures"]},{"title":"[ENH]: UnitizedNorm","body":"NOTE: This is very much in the discussion nobody should actually attempt it phase. Especially since #27721 is a probably better solution to the same meta problem. \r\n\r\n### Problem\r\n\r\nLots of requests for colormapping unitized data, such as #7383,  #25062, #23991,  #19476, #17447\r\n\r\n### Proposed solution\r\n\r\nSince the number -> number that can be colormapped conversion is done in the norm, proposing that we make an explicit Norm for handling units:\r\n\r\n### `UnitizedNorm`:\r\n\r\nCreate a new norm object `UnitizedNorm`:\r\n\r\n  * maps data to numbers using `{Convertor}.convert` \r\n  * labels colorbar using the formatters from `{Convertor}.axisinfo`\r\n\r\nThe hard work here is integrating this into the existing color-mapping pipeline, particularly the interpolation pipeline. One approach may be to add a flag indicating whether the unit can participate in existing schemes or whether it provides its own interpolation methods. If this works, then `.UnitizedNorm` can be shimmed in to act as an analogue to `NoNorm`\r\n\r\n### `UnitizedNorm(Normalize)`\r\n\r\nI don't know if this is actually possible, or remotely worth the effort given @ksunden's work, but a follow on proposal is that  `UnitizedNorm` acts as a wrapper around `Normalize` objects so that the norms can take in unitized inputs, where `UnitizedNorm(NoNorm) == UnitizedNorm()` is the default described above. The objective would be to allow support for things like \r\n`UnitizedNorm(BoundaryNorm(['2011-01-01', '2011-02-01', '2011-03-01']))' or \"UnitizedNorm(Normalize(vmin=Pint(10))\" \r\n\r\nPretty sure that if this is possible, it ends up being some sorta dynamic monkeypatching of the existing class. But also if possible then it can be written as a decorator and that would be nice to have for custom Norms. \r\n\r\n\r\n","comments":["I'm not sure I follow the need for a new norm - what does that add above storing units and a converter on `ScalarMappable`, then using the current conversion machinary to convert the data to floating point values before going through existing norms?\r\n\r\nFWIW I tried this in https:\/\/github.com\/matplotlib\/matplotlib\/pull\/20962, didn't have time to finish it off, but in the last week I've been working on resurrecting that work at https:\/\/github.com\/dstansby\/matplotlib\/tree\/image-units. That branch is specifically for images, but the same approach does work for other `ScalarMappable`s like contours and scatter colours. Hopefully I can have a proof-of-concept PR open in the next week or so.","> what does that add above storing units and a converter on ScalarMappable, then using the current conversion machinary to convert the data to floating point values before going through existing norms?\r\n\r\nJust an alternative approach, idea being very explicit opt in & I wrote this up as a potential GSOC project cause it seemed like an easier way to do this. I really like the put units on the ScalarMappable solution - are you threading units through the norms the way they're thread through axes limits so that the norm params can be specified in units? "],"labels":["New feature","topic: units and array ducktypes","topic: color\/color & colormaps","status: needs comment\/discussion"]},{"title":"[Bug]: pcolormesh with gouraud shading not respecting bad color","body":"### Bug summary\r\n\r\nThe Quadmesh Demo shows how to set the \"bad\" color on a colormap to make the masked region yellow.  However, it does not work in the current version.\r\n\r\n### Code for reproduction\r\n\r\nhttps:\/\/matplotlib.org\/3.8.2\/gallery\/images_contours_and_fields\/quadmesh_demo.html\r\n\r\n\r\n### Actual outcome\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10599679\/da728e66-9128-489f-b916-772a6848687c)\r\n\r\n\r\n### Expected outcome\r\n\r\nWith v3.7.3 we had \r\nhttps:\/\/matplotlib.org\/3.7.3\/gallery\/images_contours_and_fields\/quadmesh_demo.html\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10599679\/deea1074-5e94-4396-973b-ba7473082e8f)\r\n\r\n\r\n### Additional information\r\n\r\nIf we remove `shading='gouraud'` from the `pcolormesh` call, the example works as expected.\r\n\r\n### Operating system\r\n\r\n_No response_\r\n\r\n### Matplotlib Version\r\n\r\n3.8.2 and `main`\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nNone","comments":["Likely related to #26072 (which was put in to fix #8802) It _seems_ like the new behavior is the desired behavior for _masked_ points, consistent with how `pcolor` works. \r\n\r\nDoes it produce the `bad` color if you change the _value_ (rather than masking)?","Ah OK.  If the new behaviour is desired we should change the example then.\r\n\r\nSorry I\u2019m not following what you mean by \u201cchange the value\u201c.","I believe `np.nan` could also produce bad values, as opposed to masked arrays.","If I add `Zm = np.ma.filled(Zm, np.nan)` before the plotting, I get the same result as when it was masked."],"labels":["topic: color\/color & colormaps","topic: pcolor\/pcolormesh"]},{"title":"[Doc]: integrate Animation API explanatory material into animation guides","body":"### Documentation Link\r\n\r\nhttps:\/\/matplotlib.org\/devdocs\/api\/animation_api.html\r\n\r\n### Problem\r\n\r\nThe Animation API docs kinda have a mini explanation of how FuncAnimate works and all the different options that would be more appropriate for the [animation guides](https:\/\/matplotlib.org\/devdocs\/users\/explain\/animations\/index.html). This feels especially odd compared to the barely-existent section for ArtistAnimation\r\n\r\n### Suggested improvement\r\n\r\n Now that the [simple animation guide](https:\/\/matplotlib.org\/devdocs\/users\/explain\/animations\/animations.html#sphx-glr-users-explain-animations-animations-py) exists, I think most of the content in the API FuncAnimation section should be moved there. Then the API page should be reworked a little so that it links out to the guide and the subsections for FuncAnimation and ArtistAnimation can be removed. ","comments":["Are these the objectives?\r\n1. **Move FuncAnimation Content:**\r\n   - Move the content currently residing in the API ``FuncAnimation`` section to the existing ``simple animation guide``.\r\n\r\n2. **Restructure API Page:**\r\n   - Restructure the API page to include links pointing to the ``animation guide``.\r\n\r\n3. **Remove Subsections:**\r\n   - Remove the subsections for  ``ArtistAnimation`` from the API page.\r\n","Thanks for checking! I think that this is an intermediate level documentation issue because the hard part is that the objectives aren't that clear cut:\n\n1. The content overlaps, so it's a matter of folding in the material as appropriate and in the appropriate places. Just moving it will create too much duplication and put content in the wrong places.\n\n2. I don't think the page needs restructuring - I used rework just because some sentences may need to be moved around to create a clean flow for emphasizing the link out to the animation guides.\n\n3. Maybe this was implied by 1., but both `FuncAnimation` and `ArtistAnimation` should end up removed ","Did I got it right ?","> Did I got it right ?\n\nSorry, I appreciate you trying to tackle this but going by a skim I don't think so.  \n\nLike I said, the hard part here is that you have to fold in the API content so that it flows with the content in the guide. That means possibly removing some of it altogether or moving it into the blitting guide - depending on what seems to be appropriate scope for each document."],"labels":["topic: animation","Difficulty: Medium","Documentation: user guide","Documentation: API"]},{"title":"BUG: fix normalizing image data contained in np.ndarray subclass","body":"<!--\nThank you so much for your PR!  To help us review your contribution, please check\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\n-->\n\n## PR summary\n\nThis fixes a downstream issue with plotting data from a `astropy.units.Quantity` object (which derives from `np.ndarray`), namely https:\/\/github.com\/astropy\/astropy\/issues\/11306\n\nAlthough the external issue was also linked to https:\/\/github.com\/matplotlib\/matplotlib\/issues\/19476, this patch does *not* fix that problem.\nAs a result, I am unsure how to write a test for the astropy bug here, though I could easily add a test in astropy itself (which is regularily tested against matplotlib dev).\n\n\n## PR checklist\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\n\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\n\n<!--We understand that PRs can sometimes be overwhelming, especially as the\nreviews start coming in.  Please let us know if the reviews are unclear or\nthe recommended next step seems overly demanding, if you would like help in\naddressing a reviewer's comments, or if you have been waiting too long to hear\nback on your PR.-->\n","comments":["> As a result, I am unsure how to write a test for the astropy bug here, though I could easily add a test in astropy itself (which is regularily tested against matplotlib dev).\n\nCan you create a fake unit that mimics the astropy behavior? Something like a very thin wrapper over nd.array that triggers the error but is fixed here? Something like #26953","Thank you for your suggestion ! I wasn't able to construct such a mock with a bottom-up approach (build one from the ground up), supposedly because of the sheer complexity of `astropy.units.Quantity`, so I'm now trying a top-down approach (take astropy and iteratively remove parts that don't play a role in the error). It's taking a while but I'm getting there.","> so I'm now trying a top-down approach (take astropy and iteratively remove parts that don't play a role in the error). It's taking a while but I'm getting there.\n\nIs much appreciated since that helps us better understand what's going wonky here.","Ok I think it's now ready for review.","Thanks!\r\n\r\nRe: mocking astropy.units.Quantity -- @mhvk can double check if needed.","Apologies for asking this several hours late, but are either of these relevant here?\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/59f9b3c707da6888f0053cf66a2e61b25a21bd3b\/lib\/matplotlib\/tests\/test_units.py#L14\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/59f9b3c707da6888f0053cf66a2e61b25a21bd3b\/lib\/matplotlib\/tests\/test_image.py#L1199\r\n","@rcomer , not sure. I tracked that to https:\/\/github.com\/matplotlib\/matplotlib\/pull\/9049 and only `pint` was mentioned, not `astropy.units`.","And the second one to https:\/\/github.com\/matplotlib\/matplotlib\/pull\/18286 that mentioned `unyt` and not `astropy.units`.","@rcomer Indeed these classes will not reproduce the issue we're currently seeing with `astropy.units.Quantity`. I think I may have used too broad a title for this PR, but it's really about some corner case specific to  `astropy.units.Quantity`. For instance, `astropy.units.Quantity` intentionally overrides the `ndarray.item` method so that it doesn't return numerical scalars, but if I remove `def item(...)` from my reduced mock, the test passes without a patch.","> but if I remove def item(...) from my reduced mock, the test passes without a patch.\r\n\r\nCan you add a comment that that's the important bit? ","Actually I think *every* part of the mock class is crucial to reproduce the problem, should I really comment all of them ?\r\nIn the real-life use case (with `astropy.units.Quantity`), the error we see is raised through *three* nested `try\/except` blocks \ud83d\ude43 ","> In the real-life use case (with astropy.units.Quantity), the error we see is raised through three nested try\/except blocks \n\n\ud83d\ude2c No, if it's a combination of the things then yeah it doesn't need a specific comment. ","I've been trying to understand what's going on here. It seems:\r\n- `_make_image(A, ...)` is given `A` as a unitful array\r\n- `a_min = A.min()` \/ `a_max = A.max()` therefore have units\r\n- so the fix in this PR is to just strip the units by calling `np.float64`\r\n\r\nI think the better long term fix here is to add proper support for the image data to have units in the `_ImageBase` class. This would provide a path to solving other bugs and feature requests around images with units, e.g. https:\/\/github.com\/matplotlib\/matplotlib\/issues\/25062, https:\/\/github.com\/matplotlib\/matplotlib\/issues\/19476.\r\n\r\nSo it's unclear to me whether it's worth merging this PR as a bit of a stopgap fix, or whether we should be aiming to add proper support for unitful data in `_ImageBase` instead. It would be good to hear what @ksunden thinks on this front from a Matplotlib\/units point of view?","As a quick proof of concept, the following diff fixes the original issue, also allows mousing over the data to work (that's still broken with this PR), and opens the door to further improvements like labelling the colorbar with the units.\r\n\r\n```diff\r\ndiff --git a\/lib\/matplotlib\/image.py b\/lib\/matplotlib\/image.py\r\nindex e326906269..88325a59ed 100644\r\n--- a\/lib\/matplotlib\/image.py\r\n+++ b\/lib\/matplotlib\/image.py\r\n@@ -26,6 +26,7 @@ import matplotlib.colors as mcolors\r\n from matplotlib.transforms import (\r\n     Affine2D, BboxBase, Bbox, BboxTransform, BboxTransformTo,\r\n     IdentityTransform, TransformedBbox)\r\n+import matplotlib.units as munits\r\n \r\n _log = logging.getLogger(__name__)\r\n \r\n@@ -724,6 +725,13 @@ class _ImageBase(martist.Artist, cm.ScalarMappable):\r\n         ----------\r\n         A : array-like or `PIL.Image.Image`\r\n         \"\"\"\r\n+        converter = munits.registry.get_converter(A)\r\n+        if converter is not None:\r\n+            self._units = converter.default_units(A, self)\r\n+            A = converter.convert(A, self._units, self)\r\n+        else:\r\n+            self._units = None\r\n+\r\n         if isinstance(A, PIL.Image.Image):\r\n             A = pil_to_array(A)  # Needed e.g. to apply png palette.\r\n         self._A = self._normalize_image_array(A)\r\n```\r\nIt does have the issue that the last arguments to the converter methods are meant to be of type `Axis` and not `_ImageBase` though, but in reality I'm not sure that's a huge issue...","Happy to drop this PR in favour of a better fix if needed !","We don't have converter logic for data passed to color mapping.   Folks are asked to pass a numpy array to scalar mappables.  Maybe its OK to normalize those mappable to so something without units earlier, but I don't know that we have enough infrastructure in place to actually use unit converters here.  ",">  but I don't know that we have enough infrastructure in place to actually use unit converters here.\n\nI still think that throwing a convertor on NoNorm (or possibly writing a `UnitNorm()` if we want to avoid any magic) might do the trick? \n\nI think the complicated part has always been propagating the correct labels back to the colorbar."],"labels":["third-party integration","topic: units and array ducktypes","topic: images","topic: transforms and scales"]},{"title":"Example for FuncAnimation, passing args to animation guide","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\nAdded a file to show how args are passed to FuncAnimation to create a graph\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\n\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nFixes #27621\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["> Hi, thanks for this PR! We already have an example of passing arguments https:\/\/matplotlib.org\/devdocs\/gallery\/animation\/animated_histogram.html#sphx-glr-gallery-animation-animated-histogram-py but I think that example may be more of a small tutorial than an example; therefore I'm not opposed to adding this, especially since it's also an example of animating text, once changes are made.\r\n> \r\n> To help you resolve the flake errors, I strongly recommend that you install the precommit hooks: https:\/\/matplotlib.org\/devdocs\/devel\/development_setup.html#install-pre-commit-hooks\r\n> \r\n> That being said, my issue request was for adding a second small example to https:\/\/matplotlib.org\/devdocs\/users\/explain\/animations\/animations.html#funcanimation showing a parameterized update function.\r\n\r\nThank you for feedback, so the issue was to just create an example\/ tutorial for the update function my mistake..\r\n",">so the issue was to just create an example\/ tutorial for the update function my mistake..\r\n\r\nIt was to add a \"passing arguments\" subsection to the FuncAnimate section of the Animation User Guide:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/galleries\/users_explain\/animations\/animations.py#L127\r\n","I'm sorry, but what is the purpose of the example? As far as I understood #27621 was requesting additions to https:\/\/matplotlib.org\/devdocs\/users\/explain\/animations\/animations.html#animations.","> As far as I understood https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27621 was requesting additions to https:\/\/matplotlib.org\/devdocs\/users\/explain\/animations\/animations.html#animations.\r\n\r\nYeah, but honestly that issue is superceded by #27687 anyway\r\n\r\nReason I was letting this PR go through anyway though was b\/c we don't have an explicit \"how to pass arguments to animation function\" example (one's kinda buried in the histogram example that's more a tutorial) and this one felt pretty clean and straightforward. \r\n\r\n","> Tiny formatting convention but otherwise this is looking really good! Thanks \ud83d\ude04\r\n> \r\n> To clean up the PR cleanliness error, I think you'll have to rebase https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html#rewrite-commit-history\r\n> \r\n> Let me know if you need help w\/ that.\r\n\r\nthank you for your help, the workflows seem very intimidating definitely need help with rebasing","@vamshipy just pushed a rebase and also made some edits to make the example more concise. I'm gonna leave this PR for someone else to review b\/c I don't feel comfortable merging on just my approval given the extent of the changes I've made to this PR. ","> @vamshipy just pushed a rebase and also made some edits to make the example more concise. I'm gonna leave this PR for someone else to review b\/c I don't feel comfortable merging on just my approval given the extent of the changes I've made to this PR.\r\n\r\nI understand, is there something I have to do about the labeler error",">I understand, is there something I have to do about the labeler error\n\nNo, that's a bug on our end. \n\nDo you have any comments\/changes you'd like to suggest on top of my changes? ","> Reason I was letting this PR go through anyway though was b\/c we don't have an explicit \"how to pass arguments to animation function\" example.\r\n\r\nI'm unclear when why one should pass arguments to the animation function. Other examples achieve the same as here by reusing variables from the outer scope.\r\n\r\nWhile knowing and relying on the scoping is possibly not trivial, it *just works* for the usual cases. It's not necessarily conceptually simpler\/better to rely on a partial closure. If we want to add this, I'd like to see an explanation why one would want to use partial and how it works.\r\n\r\n> and this one felt pretty clean and straightforward.\r\n\r\nWith four parameters passed to `partial`, this is more complex than need be. One (or two if you want data and an artist) should be enough. Reducing to a minimal example helps in understanding the concept and not get lost in details.\r\n"],"labels":["topic: animation","Documentation: examples"]},{"title":"Corrected the slider handle styling","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\nresolves #27672\r\n\r\nThe slider handle marker style can now be provided in handle_style dict with `\"marker: \"^\"`.  \r\nIt still defaults to `\"o\"`.\r\n\r\n\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#announce-changes-deprecations-and-new-features)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["topic: widgets\/UI"]},{"title":"[Doc]: Confusing page on color changes","body":"### Documentation Link\r\n\r\nhttps:\/\/matplotlib.org\/devdocs\/devel\/color_changes.html\r\n\r\n### Problem\r\n\r\nThis page is a historic memo rather than documentation. But it doesn't say so.\r\n\r\n### Suggested improvement\r\n\r\nIMHO this can be deleted. If somebody thinks, there is still relevant information, that's worth documenting, this needs a rework and an initial admonition for context and scope.","comments":["It reads a bit like a MEP that was never made a formal MEP, so I'd move it there if we want to keep it. ","*If* this should be kept we could also dump it into #14331 or create an issue link that in #14331.\r\n\r\nBut I'm still waiting for somebody to speak up for it.","I'd get rid of it.  Historically it exists in the old version of the docs, and I don't see what use it is. ","Looking through the history, looks like @tacaswell is the primary author so Tom do you have an opinion on what to do w\/ this page? "],"labels":["Documentation","topic: color\/color & colormaps"]},{"title":"[Bug]: Customizing Slider appereance","body":"### Bug summary\n\nHi all,\r\n\r\nI was trying to change the slider handle style....\r\n\r\nFirst, if you try something like suggested in the docs : \r\n```python\r\nmy_slider = Slider(ax, 'frame', 0, 10,\r\n                   handle_style={\"style\": \"^\", \"size\":20, \"facecolor\":\"r\"})\r\n```\r\nYou get:\r\n`AttributeError: Line2D.set() got an unexpected keyword argument 'markerstyle'`\r\n\r\nThen, I switched to:\r\n```python\r\nmy_slider = Slider(ax, 'frame', 0, 10,\r\n                   handle_style={\"\": \"^\", \"size\":20, \"facecolor\":\"r\"})\r\n```\r\n\r\nAnd this worked well, except for the annoying warning:\r\n`UserWarning: marker is redundantly defined by the 'marker' keyword argument and the fmt string \"o\" (-> marker='o'). The keyword argument will take precedence.`\r\n\r\n\r\nI believe there's an easy fix to this issue:  \r\n  1) Include : `'marker': 'o'` in the `defaults`dict. (line 457 in widgets.py) \r\n  2) Remove `\"o\"` when plotting the handle (line 488 in widgets.py)\r\n  3) Update the docs to indicate that an empty string instead of \"style\" is needed to change the marker style.\r\n\r\n\r\nI would be honoured to make the modifications myself, but I believe I would need some guidance on how to contribute.\r\n\r\nCheers!\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.widgets import Slider\r\n\r\n\r\nfig, ax = plt.subplots()\r\n\r\nmy_slider = Slider(ax, 'frame', 0, 10,\r\n                   handle_style={\"style\": \"^\", \"size\":20, \"facecolor\":\"r\"})\r\n\r\nOR\r\n\r\nmy_slider = Slider(ax, 'frame', 0, 10,\r\n                   handle_style={\"\": \"^\", \"size\":20, \"facecolor\":\"r\"})\n```\n\n\n### Actual outcome\n\nFirst output\r\n`AttributeError: Line2D.set() got an unexpected keyword argument 'markerstyle'`\r\n\r\nSecond output:\r\n`UserWarning: marker is redundantly defined by the 'marker' keyword argument and the fmt string \"o\" (-> marker='o'). The keyword argument will take precedence.`\n\n### Expected outcome\n\nTo change the slider handle from circle into a triangle without a warning.\n\n### Additional information\n\nI believe there's an easy fix to this issue:  \r\n  1) Include : `'marker': 'o'` in the `defaults`dict. (line 457 in widgets.py) \r\n  2) Remove `\"o\"` when plotting the handle (line 488 in widgets.py)\r\n  3) Update the docs to indicate that an empty string instead of \"style\" is needed to change the marker style.\n\n### Operating system\n\nMacOS 14.2.1 \n\n### Matplotlib Version\n\n3.7.2\n\n### Matplotlib Backend\n\nqt\n\n### Python version\n\n3.9.18\n\n### Jupyter version\n\n4.0.8\n\n### Installation\n\nconda","comments":["Thanks for the report.\r\n\r\n> I believe there's an easy fix to this issue:\r\n> \r\n>     1. Include : `'marker': 'o'` in the `defaults`dict. (line 457 in widgets.py)\r\n>     2. Remove `\"o\"` when plotting the handle (line 488 in widgets.py)\r\n>     3. Update the docs to indicate that an empty string instead of \"style\" is needed to change the marker style.\r\n\r\n1 and 2 are reasonable. However, an empty string is too hacky. We should special-case marker so that `handle-style={\"marker\": \"^\"}` works. This also includes updating the documentation of the `handle_style` parameter, which claim\r\n\r\n> e.g. ``handle_style = {'style'='x'}`` will  result in ``markerstyle = 'x'``.\r\n\r\nBut that's an invalid parameter.\r\n\r\nIf you want to contribute, please see https:\/\/matplotlib.org\/devdocs\/devel\/contribute.html#how-to-contribute, and don't hesitate to ask questions if you are stuck.","Would \r\n```python\r\nmarker_props = {\r\n    f\"{'marker' * ('marker' not in k) + k}\": v for k, v in {**defaults, **handle_style}.items()\r\n}\r\n```\r\nBe ok ? (line 458 in widgets.py)\r\n\r\nOr better:\r\n```python\r\nmarker_props = {\r\n    f\"{'marker' * (not k.startswith('marker') + k}\": v for k, v in {**defaults, **handle_style}.items()\r\n}"],"labels":["topic: widgets\/UI"]},{"title":"[Doc]: documentation of how to properly rasterize output of contourf","body":"### Documentation Link\n\nhttps:\/\/matplotlib.org\/stable\/gallery\/images_contours_and_fields\/contourf_demo.html\n\n### Problem\n\nThe contourf demo could use a clear example of how to properly rasterize the output.   It may be useful to include this information directly in the contourf documentation.  \r\n\r\nHere's a minimal example that shows what used to work for me (based on the example in the [contourf demo](https:\/\/matplotlib.org\/stable\/gallery\/images_contours_and_fields\/contourf_demo.html) and the top answer from [stackoverflow](https:\/\/stackoverflow.com\/questions\/47698830\/rasterization-of-contours-in-filled-contour-plot)), but is now deprecated as of matplotlib 3.8:\r\n\r\n```\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\ndelta = 0.025\r\n\r\nx = y = np.arange(-3.0, 3.01, delta)\r\nX, Y = np.meshgrid(x, y)\r\nZ1 = np.exp(-X**2 - Y**2)\r\nZ2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\r\nZ = (Z1 - Z2) * 2\r\n\r\nfig, ax = plt.subplots()\r\n\r\ncont = ax.contourf(X,Y,Z, levels = 100)\r\n\r\nfor c in cont.collections:\r\n    c.set_rasterized(True)\r\n```\r\nThis now returns:\r\n```\r\nMatplotlibDeprecationWarning: The collections attribute was deprecated in Matplotlib 3.8 and will be removed two minor releases later.\r\n  for c in cont.collections:\r\n```\r\n\r\nIt's not obvious to me how I should be rasterizing a contourf for matplotlib>=3.8 (regardless of whether the method I used above was sensical or not...at least it worked).\r\n\r\nIf I try to apply something similar to what is in the current [rasterization demo](https:\/\/matplotlib.org\/stable\/gallery\/misc\/rasterization_demo.html),  (which I think resulted from https:\/\/github.com\/matplotlib\/matplotlib\/issues\/17708\/ ),\r\n```\r\nfig2, ax2 = plt.subplots()\r\ncont = ax2.contourf(X,Y,Z, levels = 100, rasterized=True)\r\n```\r\nthen I get the following error:\r\n```\r\nUserWarning: The following kwargs were not used by contour: 'rasterized'\r\n  cont = ax2.contourf(X,Y,Z, levels = 100, rasterized=True)\r\n```\r\n\r\n\n\n### Suggested improvement\n\n1. Include a paragraph and code snippet somewhere in https:\/\/matplotlib.org\/stable\/gallery\/images_contours_and_fields\/contourf_demo.html explaining how to rasterize contourf.  \r\n\r\n2. maybe include a description of how to rasterize directly in the documentation of contourf","comments":["I _think_ that we are missing the decorator on `ContourSet.draw` here:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/879bde7c3c653268884203207207d0b5600aa3d0\/lib\/matplotlib\/contour.py#L1411\r\n\r\n`@artist.allow_rasterization`\r\n\r\nThe super class (which it defers to for all actual drawing) _does_ have the decorator, so I don't think there should be a problem adding it (In fact, it _does_ actually already work, just warns and says it doesn't) to do:\r\n\r\n`cont.set_rasterized(True)`\r\n\r\nI confirmed with the SVG renderer that in fact it _does_ rasterize correctly despite the warning being issued, so pretty confident that we just need to add the decorator so that the check sees it as valid. (I will note that all contours are rasterized into one image in the SVG, not sure if you may have expected them to be rasterized separately before...)\r\n\r\nPart of the point of the transition was to make things like this _easier_ (i.e. you don't have to loop through because the top level is a standard Artist now, which it wasn't before, so you _did_ have to loop through.\r\n","Ah, OK, so this may be an actual bug. \r\n\r\nI just confirmed that you're right, calling `cont.set_rasterized(True)` after already generating the contourf, and then saving, does produce rasterized .pdf and .svg, despite the warning.  So that solves my immediate problem.  \r\n\r\nBut providing the keyword directly and then saving, like so:\r\n```\r\ncont = ax2.contourf(X,Y,Z, levels = 100, rasterized=True)\r\nfig2.savefig('.\/a_contourf.svg')\r\n```\r\ndoes not produce a rasterized file.  From your comment, it sounds like that is supposed to work?  From the documentation, that's what I expected to work.  And I agree, this is much better than the old method that required a loop!","It's more of a feature request, but one that should be straightforward to implement. The kwarg just needs to be threaded through.  "],"labels":["Documentation","topic: contour"]},{"title":"Possible extra copy in image resampling with NumPy 2","body":"Running with 1.24.1 and `NPY_PROMOTION_STATE=weak_and_warn`, I think we may be introducing an unintentional copy here?\r\n```\r\n__________ test_norm_update_figs[png] __________\r\n\r\next = 'png', request = <FixtureRequest for <Function test_norm_update_figs[png]>>, args = (), kwargs = {}, file_name = 'test_norm_update_figs[png]'\r\nfig_test = <Figure size 640x480 with 1 Axes>, fig_ref = <Figure size 640x480 with 1 Axes>, figs = []\r\n\r\nlib\/matplotlib\/testing\/decorators.py:411:\r\nlib\/matplotlib\/tests\/test_colors.py:1661: in test_norm_update_figs\r\nlib\/matplotlib\/backends\/backend_agg.py:387: in draw\r\nlib\/matplotlib\/artist.py:95: in draw_wrapper\r\nlib\/matplotlib\/artist.py:72: in draw_wrapper\r\nlib\/matplotlib\/figure.py:3117: in draw\r\nlib\/matplotlib\/image.py:132: in _draw_list_compositing_images\r\nlib\/matplotlib\/artist.py:72: in draw_wrapper\r\nlib\/matplotlib\/axes\/_base.py:3095: in draw\r\nlib\/matplotlib\/image.py:132: in _draw_list_compositing_images\r\nlib\/matplotlib\/artist.py:72: in draw_wrapper\r\nlib\/matplotlib\/image.py:653: in draw\r\nlib\/matplotlib\/image.py:945: in make_image\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <matplotlib.image.AxesImage object at 0x7f02f6900c40>\r\nA = masked_array(\r\n  data=[[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],\r\n        [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\r\n    ... 82, 83, 84, 85, 86, 87, 88, 89],\r\n        [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]],\r\n  mask=False,\r\n  fill_value=999999)\r\nin_bbox = Bbox([[-0.5, 9.5], [9.5, -0.5]]), out_bbox = <matplotlib.transforms.TransformedBbox object at 0x7f02f68f6370>\r\nclip_bbox = <matplotlib.transforms.TransformedBbox object at 0x7f02f6900e80>, magnification = 1.0, unsampled = False, round_to_pixel_border = True\r\n\r\n    def _make_image(self, A, in_bbox, out_bbox, clip_bbox, magnification=1.0,\r\n                    unsampled=False, round_to_pixel_border=True):\r\n        \"\"\"\r\n        Normalize, rescale, and colormap the image *A* from the given *in_bbox*\r\n        (in data space), to the given *out_bbox* (in pixel space) clipped to\r\n        the given *clip_bbox* (also in pixel space), and magnified by the\r\n        *magnification* factor.\r\n\r\n        *A* may be a greyscale image (M, N) with a dtype of `~numpy.float32`,\r\n        `~numpy.float64`, `~numpy.float128`, `~numpy.uint16` or `~numpy.uint8`,\r\n        or an (M, N, 4) RGBA image with a dtype of `~numpy.float32`,\r\n        `~numpy.float64`, `~numpy.float128`, or `~numpy.uint8`.\r\n\r\n        If *unsampled* is True, the image will not be scaled, but an\r\n        appropriate affine transformation will be returned instead.\r\n\r\n        If *round_to_pixel_border* is True, the output image size will be\r\n        rounded to the nearest pixel boundary.  This makes the images align\r\n        correctly with the Axes.  It should not be used if exact scaling is\r\n        needed, such as for `FigureImage`.\r\n\r\n        Returns\r\n        -------\r\n        image : (M, N, 4) `numpy.uint8` array\r\n            The RGBA image, resampled unless *unsampled* is True.\r\n        x, y : float\r\n            The upper left corner where the image should be drawn, in pixel\r\n            space.\r\n        trans : `~matplotlib.transforms.Affine2D`\r\n            The affine transformation from image to pixel space.\r\n        \"\"\"\r\n        if A is None:\r\n            raise RuntimeError('You must first set the image '\r\n                               'array or the image attribute')\r\n        if A.size == 0:\r\n            raise RuntimeError(\"_make_image must get a non-empty image. \"\r\n                               \"Your Artist's draw method must filter before \"\r\n                               \"this method is called.\")\r\n\r\n        clipped_bbox = Bbox.intersection(out_bbox, clip_bbox)\r\n\r\n        if clipped_bbox is None:\r\n            return None, 0, 0, None\r\n\r\n        out_width_base = clipped_bbox.width * magnification\r\n        out_height_base = clipped_bbox.height * magnification\r\n\r\n        if out_width_base == 0 or out_height_base == 0:\r\n            return None, 0, 0, None\r\n\r\n        if self.origin == 'upper':\r\n            # Flip the input image using a transform.  This avoids the\r\n            # problem with flipping the array, which results in a copy\r\n            # when it is converted to contiguous in the C wrapper\r\n            t0 = Affine2D().translate(0, -A.shape[0]).scale(1, -1)\r\n        else:\r\n            t0 = IdentityTransform()\r\n\r\n        t0 += (\r\n            Affine2D()\r\n            .scale(\r\n                in_bbox.width \/ A.shape[1],\r\n                in_bbox.height \/ A.shape[0])\r\n            .translate(in_bbox.x0, in_bbox.y0)\r\n            + self.get_transform())\r\n\r\n        t = (t0\r\n             + (Affine2D()\r\n                .translate(-clipped_bbox.x0, -clipped_bbox.y0)\r\n                .scale(magnification)))\r\n\r\n        # So that the image is aligned with the edge of the Axes, we want to\r\n        # round up the output width to the next integer.  This also means\r\n        # scaling the transform slightly to account for the extra subpixel.\r\n        if ((not unsampled) and t.is_affine and round_to_pixel_border and\r\n                (out_width_base % 1.0 != 0.0 or out_height_base % 1.0 != 0.0)):\r\n            out_width = math.ceil(out_width_base)\r\n            out_height = math.ceil(out_height_base)\r\n            extra_width = (out_width - out_width_base) \/ out_width_base\r\n            extra_height = (out_height - out_height_base) \/ out_height_base\r\n            t += Affine2D().scale(1.0 + extra_width, 1.0 + extra_height)\r\n        else:\r\n            out_width = int(out_width_base)\r\n            out_height = int(out_height_base)\r\n        out_shape = (out_height, out_width)\r\n\r\n        if not unsampled:\r\n            if not (A.ndim == 2 or A.ndim == 3 and A.shape[-1] in (3, 4)):\r\n                raise ValueError(f\"Invalid shape {A.shape} for image data\")\r\n            if A.ndim == 2 and self._interpolation_stage != 'rgba':\r\n                # if we are a 2D array, then we are running through the\r\n                # norm + colormap transformation.  However, in general the\r\n                # input data is not going to match the size on the screen so we\r\n                # have to resample to the correct number of pixels\r\n\r\n                # TODO slice input array first\r\n                a_min = A.min()\r\n                a_max = A.max()\r\n                if a_min is np.ma.masked:  # All masked; values don't matter.\r\n                    a_min, a_max = np.int32(0), np.int32(1)\r\n                if A.dtype.kind == 'f':  # Float dtype: scale to same dtype.\r\n                    scaled_dtype = np.dtype(\r\n                        np.float64 if A.dtype.itemsize > 4 else np.float32)\r\n                    if scaled_dtype.itemsize < A.dtype.itemsize:\r\n                        _api.warn_external(f\"Casting input data from {A.dtype}\"\r\n                                           f\" to {scaled_dtype} for imshow.\")\r\n                else:  # Int dtype, likely.\r\n                    # Scale to appropriately sized float: use float32 if the\r\n                    # dynamic range is small, to limit the memory footprint.\r\n                    da = a_max.astype(np.float64) - a_min.astype(np.float64)\r\n                    scaled_dtype = np.float64 if da > 1e8 else np.float32\r\n\r\n                # Scale the input data to [.1, .9].  The Agg interpolators clip\r\n                # to [0, 1] internally, and we use a smaller input scale to\r\n                # identify the interpolated points that need to be flagged as\r\n                # over\/under.  This may introduce numeric instabilities in very\r\n                # broadly scaled data.\r\n\r\n                # Always copy, and don't allow array subtypes.\r\n                A_scaled = np.array(A, dtype=scaled_dtype)\r\n                # Clip scaled data around norm if necessary.  This is necessary\r\n                # for big numbers at the edge of float64's ability to represent\r\n                # changes.  Applying a norm first would be good, but ruins the\r\n                # interpolation of over numbers.\r\n                self.norm.autoscale_None(A)\r\n                dv = np.float64(self.norm.vmax) - np.float64(self.norm.vmin)\r\n                vmid = np.float64(self.norm.vmin) + dv \/ 2\r\n                fact = 1e7 if scaled_dtype == np.float64 else 1e4\r\n                newmin = vmid - dv * fact\r\n                if newmin < a_min:\r\n                    newmin = None\r\n                else:\r\n                    a_min = np.float64(newmin)\r\n                newmax = vmid + dv * fact\r\n                if newmax > a_max:\r\n                    newmax = None\r\n                else:\r\n                    a_max = np.float64(newmax)\r\n                if newmax is not None or newmin is not None:\r\n                    np.clip(A_scaled, newmin, newmax, out=A_scaled)\r\n\r\n                # Rescale the raw data to [offset, 1-offset] so that the\r\n                # resampling code will run cleanly.  Using dyadic numbers here\r\n                # could reduce the error, but would not fully eliminate it and\r\n                # breaks a number of tests (due to the slightly different\r\n                # error bouncing some pixels across a boundary in the (very\r\n                # quantized) colormapping step).\r\n                offset = .1\r\n                frac = .8\r\n                # Run vmin\/vmax through the same rescaling as the raw data;\r\n                # otherwise, data values close or equal to the boundaries can\r\n                # end up on the wrong side due to floating point error.\r\n                vmin, vmax = self.norm.vmin, self.norm.vmax\r\n                if vmin is np.ma.masked:\r\n                    vmin, vmax = a_min, a_max\r\n                vrange = np.array([vmin, vmax], dtype=scaled_dtype)\r\n\r\n>               A_scaled -= a_min\r\nE               UserWarning: result dtype changed due to the removal of value-based promotion from NumPy. Changed from float32 to float64.\r\n\r\nlib\/matplotlib\/image.py:492: UserWarning\r\n```\r\n\r\nHowever, I'm not sure what this warning means for in-place modification. It _may_ be alright, but I have not tested the exact behaviour.\r\n\r\n_Originally posted by @QuLogic in https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27657#pullrequestreview-1827127742_\r\n            ","comments":["Hi @QuLogic,\r\n\r\nTo address the dtype warning, you can explicitly cast A_scaled to float32 after clipping. Add the following line after the np.clip operation:\r\n`\r\nA_scaled = A_scaled.astype(np.float32)`\r\n\r\nThis should resolve the dtype change issue. Let me know if this helps!"],"labels":["topic: images"]},{"title":"[MNT]: Move Matplotlib backend mapping from IPython and support backends self-registering","body":"### Summary\n\nI propose to move the Matplotlib backend mapping that is currently in IPython into Matplotlib, and extend it to support backends registering themselves via `entry_points`. This was originally discussed in #19482 and Tom summarised and proposed a solution in https:\/\/github.com\/matplotlib\/matplotlib\/pull\/19482#issuecomment-1042511334.\n\n### Proposed fix\n\n# Background\r\n\r\nIPython supports the use of the `%matplotlib` magic in two ways:\r\n- `%matplotlib <backend_name>` to use the named Matplotlib backend.\r\n- `%matplotlib --list` to list available backends.\r\n\r\nIPython contains hard-coded information about which backends exist, and which GUI interactive framework they support. The current information consists of backends that are built-into mpl itself (e.g. qt, notebook, webagg) and those in external libraries (ipympl and inline) which are Jupyter-based.\r\n\r\n# Problems\r\n\r\n- This is unnecessarily difficult to maintain as new backends require changes in IPython.\r\n- There is no support in IPython for backends specified using `\"module:\/\/whatever.backend.module\"`\r\n\r\n# Proposal\r\n\r\n1. Keep the same `%matplotlib` magic functionality in IPython but defer responsibility for the backend naming and interactive framework identification to Matplotlib, with a version check of Matplotlib to fallback to the existing behaviour if necessary.\r\n2. Add a backend registry to Matplotlib. Whether this is literally a `BackendRegistry` singleton or not is an implementation detail.\r\n3. The registry will allow use of backends for both IPython and `matplotlib.use` in three different categories:\r\n    a. Backends that are built into the Matplotlib code base.\r\n    b. Backends that can be dynamically loaded using `\"module:\/\/backend.name\"` such as MplCairo.\r\n    c. Backends that register themselves using an `entry_point`. Initially this will be `ipympl` and `matplotlib-inline`.\r\n4. Need to handle error situations of multiple backends registering under the same name, or registering with the same name as a built-in backend.\r\n5. Matplotlib needs a new `list_backends` function for IPython\u2019s `%matplotlib --list`. This will include all backends in items 3a and 3c above, as well as any `\u201cmodule:\/\/\u2026\u201d` backends (3b) that have already been loaded. The latter is so that if you use `%matplotlib module:\/\/\u2026` in IPython a subsequent `%matplotlib \u2013list` will include the backend you are using.\r\n6. The `list_backends` function may as well be public within Matplotlib as it is a feature that is requested every so often. It will have to be clearly stated that this contains \u201cbackends that mpl is aware of\u201d rather than an exhaustive list.\r\n\r\nThis isn\u2019t the full set of functionality listed at https:\/\/github.com\/matplotlib\/matplotlib\/pull\/19482#issuecomment-1042511334 as it does not include use of `\"m:\/\/\u2026\"` form for example.\r\n\r\nChanges will be required in the following projects:\r\n1. Matplotlib = new registry, looking up entry points, docs.\r\n2. Matplotlib-inline = add entry point.\r\n3. Ipympl = add entry point.\r\n4. IPython = call Matplotlib backend registry for backend info, docs.\r\n\r\nChanges 1-3 will need to be published in releases before 4 can be merged and released.\r\n","comments":["Can we put this on the agenda for the meeting tomorrow?","Yes, I can attend the meeting.","attn @anntzer ","I'll try to attend tomorrow as well.","Following discussion at the weekly meeting (https:\/\/hackmd.io\/l9vkn_T4RSmk147H_ZPPBA#ipython--Matplotlib-integration) I am going ahead with an implementation of this and we will see what problems come up."],"labels":["third-party integration","Maintenance","topic: backends"]},{"title":"[MNT]: Use fix-cm rather than type1cm for LaTeX","body":"### Summary\r\n\r\nWhen I try use LaTeX with matplotlib (see script below), I get an error containing `! LaTeX Error: File type1cm.sty not found`. On [the site for `type1cm`](https:\/\/ctan.org\/pkg\/type1cm), it says \"Note that the LATEX distribution now contains a package `fix-cm`, which performs the task of `type1cm`, as well as doing the same job for T1- and TS1-encoded ec fonts\". On my system\/LaTeX installation, `fix-cm` is installed by default, whereas `type1cm` is not, so assuming this is generally true for other users, it would make more sense for matplotlib to use `fix-cm` instead of `type1cm`, as this should achieve the same results, and avoid forcing the user to install extra LaTeX packages.\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib\r\n\r\nmatplotlib.rc('font', **{'family': 'serif', 'serif': ['Computer Modern']})\r\nmatplotlib.rc('text', usetex=True)\r\n\r\nplt.plot([1, 2], c=\"b\")\r\nplt.savefig(\"output.png\")\r\n```\r\n\r\nPython 3.10.12\r\nmatplotlib Version: 3.8.2\r\nUbuntu 22.04.1 LTS\r\n\r\n### Proposed fix\r\n\r\nUse fix-cm rather than type1cm for LaTeX","comments":["Note: work around for me was as follows ([source](https:\/\/stackoverflow.com\/a\/37218925\/8477566)):\r\n\r\n```\r\nsudo apt install texlive-latex-extra cm-super dvipng\r\n```","Do the tests pass if you use fix-cm? ","I've not run the matplotlib unit tests, I just wanted to get my script working. I raised this issue just as a suggestion to the matplotlib developers that it might be possible to use a more widely installed\/less obscure package which achieves the same purpose","Now that I've installed the extra packages on my system through `apt`, the tests would probably pass anyway, even if using `fix-cm` wasn't sufficient by itself to solve the problem",">  I raised this issue just as a suggestion to the matplotlib developers that it might be possible to use a more widely installed\/less obscure package which achieves the same purpose\n\nI totally get you - I hate dealing w\/ the latex installs. It's just that a requirement for switching over to fix-cm being the official recommendation is that all the tests would still have to pass ETA: so was curious if you knew if that was the case.","The patch would be something like\r\n```patch\r\ndiff --git i\/galleries\/users_explain\/text\/usetex.py w\/galleries\/users_explain\/text\/usetex.py\r\nindex 0194a0030d..45773856e9 100644\r\n--- i\/galleries\/users_explain\/text\/usetex.py\r\n+++ w\/galleries\/users_explain\/text\/usetex.py\r\n@@ -131,11 +131,6 @@ Possible hangups\r\n * Using MiKTeX with Computer Modern fonts, if you get odd \\*Agg and PNG\r\n   results, go to MiKTeX\/Options and update your format files\r\n \r\n-* On Ubuntu and Gentoo, the base texlive install does not ship with\r\n-  the type1cm package. You may need to install some of the extra\r\n-  packages to get all the goodies that come bundled with other LaTeX\r\n-  distributions.\r\n-\r\n * Some progress has been made so Matplotlib uses the dvi files\r\n   directly for text layout. This allows LaTeX to be used for text\r\n   layout with the pdf and svg backends, as well as the \\*Agg and PS\r\ndiff --git i\/lib\/matplotlib\/mpl-data\/matplotlibrc w\/lib\/matplotlib\/mpl-data\/matplotlibrc\r\nindex 301afc3845..9b786fd201 100644\r\n--- i\/lib\/matplotlib\/mpl-data\/matplotlibrc\r\n+++ w\/lib\/matplotlib\/mpl-data\/matplotlibrc\r\n@@ -327,8 +327,8 @@\r\n                         # Note that it has to be put on a single line, which may\r\n                         # become quite long.\r\n                         # The following packages are always loaded with usetex,\r\n-                        # so beware of package collisions:\r\n-                        #   geometry, inputenc, type1cm.\r\n+                        # beware of package collisions:\r\n+                        #   color, fix-cm, geometry, graphicx, textcomp.\r\n                         # PostScript (PSNFSS) font packages may also be\r\n                         # loaded, depending on your font settings.\r\n \r\ndiff --git i\/lib\/matplotlib\/mpl-data\/stylelib\/classic.mplstyle w\/lib\/matplotlib\/mpl-data\/stylelib\/classic.mplstyle\r\nindex 976ab29190..b0c983e7d8 100644\r\n--- i\/lib\/matplotlib\/mpl-data\/stylelib\/classic.mplstyle\r\n+++ w\/lib\/matplotlib\/mpl-data\/stylelib\/classic.mplstyle\r\n@@ -122,8 +122,8 @@ text.latex.preamble :  # IMPROPER USE OF THIS FEATURE WILL LEAD TO LATEX FAILURE\r\n                        # Note that it has to be put on a single line, which may\r\n                        # become quite long.\r\n                        # The following packages are always loaded with usetex, so\r\n-                       # beware of package collisions: color, geometry, graphicx,\r\n-                       # type1cm, textcomp.\r\n+                       # beware of package collisions:\r\n+                       # color, fix-cm, geometry, graphicx, textcomp.\r\n                        # Adobe Postscript (PSSNFS) font packages may also be\r\n                        # loaded, depending on your font settings.\r\n \r\ndiff --git i\/lib\/matplotlib\/texmanager.py w\/lib\/matplotlib\/texmanager.py\r\nindex 812eab58b8..752a832f6c 100644\r\n--- i\/lib\/matplotlib\/texmanager.py\r\n+++ w\/lib\/matplotlib\/texmanager.py\r\n@@ -158,7 +158,6 @@ class TexManager:\r\n                for family in ['serif', 'sans-serif', 'monospace']}\r\n         if requested_family == 'cursive':\r\n             cmd.add(preambles['cursive'])\r\n-        cmd.add(r'\\usepackage{type1cm}')\r\n         preamble = '\\n'.join(sorted(cmd))\r\n         fontcmd = (r'\\sffamily' if requested_family == 'sans-serif' else\r\n                    r'\\ttfamily' if requested_family == 'monospace' else\r\n@@ -200,6 +199,7 @@ class TexManager:\r\n         font_preamble, fontcmd = cls._get_font_preamble_and_command()\r\n         baselineskip = 1.25 * fontsize\r\n         return \"\\n\".join([\r\n+            r\"\\RequirePackage{fix-cm}\",\r\n             r\"\\documentclass{article}\",\r\n             r\"% Pass-through \\mathdefault, which is used in non-usetex mode\",\r\n             r\"% to use the default text font but was historically suppressed\",\r\n```\r\nbut this breaks (apparently legitimately) test_subplots.py::test_subplots_offsettext and test_usetex.py::test_usetex."],"labels":["topic: text\/usetex","Maintenance","Documentation: build"]},{"title":"[Bug]: Empty bars are styled incorrectly in legend","body":"### Bug summary\n\nWhen plotting multiple plots with specified colors, if plot data is empty, color parameter is ignored.\n\n### Code for reproduction\n\n```python\nplt.figure()\r\nplt.barh([], [], label=\"X\", color=\"C0\")\r\nplt.barh([], [], label=\"Y\", color=\"C1\")\r\nplt.legend()\r\nplt.show()\n```\n\n\n### Actual outcome\n\n![legend](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1312525\/eec42660-630a-4412-b1bb-a0a7c40adeed)\r\n\n\n### Expected outcome\n\n![legend_expected](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1312525\/01dfac55-e183-4388-a006-5cac5ccd7b79)\r\n\n\n### Additional information\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.8.2\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nNone","comments":["In fact, you don't need both `X` and `Y`, any single thing with non-`C0` is not the right colour.","The problem here is that `bar[h]` return a `BarContainer` which doesn't know anything about the inputs. The legend looks at the first patch for styling, and since there are none, it just returns the default style. All the input settings have been thrown away so there's no other way for it to figure it out.\r\n\r\nAs a workaround, it looks like you can pass a `np.nan` so that at least a `Patch` is created, but it won't be drawn:\r\n```\r\nplt.barh([np.nan], [np.nan], label=\"X\", color=\"C1\")\r\n```\r\n![issue27638](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/302469\/1de668e3-082b-493f-8558-45bec894c73a)\r\n","Can bar container record the style then? I suppose it's not hard to add.","> As a workaround, it looks like you can pass a `np.nan` so that at least a `Patch` is created, but it won't be drawn:\r\n\r\nWould it make sense to do something like this (below) to always create a dummy patch if provided with an empty list or array? Or is this too hacky? It seems to solve this bug but I am not sure if it would change expected behavior too much.\r\n\r\n_axes.py\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/15110959\/ff4ae3d4-694d-4c68-826c-3bd4b7a48c19)\r\nWould obviously add an analog to the horizontal case too.\r\n","Adding it to the container seems like a better option.  If the user adds the `np.nan` they know, but if we start adding invisible artists that may break some users who are not expecting it...","Related to https:\/\/github.com\/matplotlib\/matplotlib\/issues\/21506"],"labels":["status: confirmed bug","topic: legend"]},{"title":"[Bug]: Inconsistency in fig.suptitle treatment of size=...","body":"### Bug summary\n\nThe size of the text in `fig.suptitle` is different if I specify the size of the text directly, or inside the `fontdict={...}`\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\nfig = plt.figure(figsize=(8, 3), layout='constrained')\r\nf0, f1 = fig.subfigures(1, 2)\r\nf0.suptitle('xxxXXX', fontdict=dict(family='Candara', size=30))\r\nf1.suptitle('xxxXXX', size=30, fontdict=dict(family='Candara'))\r\nplt.show()\n```\n\n\n### Actual outcome\n\n![Figure_1](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2244221\/3594c42a-0b14-4978-96b8-fffdb469d00e)\r\n\n\n### Expected outcome\n\nI expected text of the same size.\r\nIn the example, I have used subfigures but using a figure (twice) I had the same results.\r\nFurther, using a single figure with 2 subplots, `ax0.set_title(..., size=..., fontdict{...})` and `ax1.set_title(..., fontdict={..., size=...})` gives titles with the same size.\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nSuse Tumbleweed\n\n### Matplotlib Version\n\n3.6.3\n\n### Matplotlib Backend\n\nQtAgg\n\n### Python version\n\n3.11.6\n\n### Jupyter version\n\nIpython 8.18.0\n\n### Installation\n\nLinux package manager","comments":["To clarify my closing remark in \"Expected outcome\" box\r\n\r\n![Figure_1](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2244221\/984c8b55-cf05-445e-aca5-0ba2d0444c5f)\r\n\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\n\r\nfig = plt.figure(figsize=(8, 3), layout='constrained')\r\nf0, f1 = fig.subfigures(1, 2)\r\nf0.suptitle('xxxXXX', fontdict=dict(family='Candara', size=30))\r\nf0.add_subplot().set_title('xxxXXX', fontdict=dict(family='Candara', size=20))\r\nf1.suptitle('xxxXXX', size=30, fontdict=dict(family='Candara'))\r\nf1.add_subplot().set_title('xxxXXX', size=20, fontdict=dict(family='Candara'))\r\nplt.show()\r\n```\r\n","This comes from https:\/\/github.com\/matplotlib\/matplotlib\/blob\/7f8b9b386e93ac4afc1e0be13fad657ff882c630\/lib\/matplotlib\/figure.py#L310-L314, and more or less arises from a similar root issue as https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27608#issuecomment-1880097334.","Issue seems to be in `.text`. Switching this:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/ff0497cc042332313afd3d2e9ba8f949c3857896\/lib\/matplotlib\/figure.py#L1122-L1126\r\n\r\nto this:\r\n\r\n```\r\n        effective_kwargs = {\r\n            'transform': self.transSubfigure,\r\n            **kwargs,\r\n            **(fontdict if fontdict is not None else {}),\r\n        }\r\n```\r\n\r\nseems to fix it. Though I am not sure if that will break other stuff. Will have to do some testing later.\r\n\r\nEdit: Passes all tests except `test_pickle.test_pickle_load_from_subprocess`"],"labels":["status: confirmed bug","topic: text\/fonts"]},{"title":"Add new n_arrows option to streamplot","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\nThis allows more than one arrow to be plotted per streamline. A rebase and tidy up of https:\/\/github.com\/matplotlib\/matplotlib\/pull\/17741.\r\n\r\nTo avoid adding a new test image I modified an existing one - I hope that's okay?\r\n\r\nFixes https:\/\/github.com\/matplotlib\/matplotlib\/issues\/17740\r\n\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Yay, I have written some very hacky code to achieve this! ","I might suggest using `n_arrows` or `num_arrows` or something similar, as what I would read from the signature alone is the English word \"narrows\" and might expect it to do something different (e.g. change linewidths at various points.)","> I might suggest using `n_arrows` or `num_arrows`\r\n\r\nI slightly favor  `num_arrows` because that's more explicit. This is an advanced feature where saving two characters is not significant. Note: I also checked the existing Matplotlib API for similar cases, but we don't have significant comparable reference, so consistency is not an argument for one or the other.\r\n\r\n"],"labels":["New feature","topic: pyplot API","Documentation: examples","Documentation: user guide"]},{"title":"[Doc]: update lifecycle tutorial to use annotate and bar labels","body":"### Documentation Link\r\n\r\nhttps:\/\/matplotlib.org\/devdocs\/tutorials\/lifecycle.html#sphx-glr-tutorials-lifecycle-py\r\n\r\n### Problem\r\n\r\nThis is a nice tutorial on making an infographic that could probably be modernized a bit to show off functionality. \r\n\r\n### Suggested improvement\r\n\r\n* use [annotate](https:\/\/matplotlib.org\/devdocs\/users\/explain\/text\/annotations.html) and [bar_label](https:\/\/matplotlib.org\/devdocs\/api\/_as_gen\/matplotlib.axes.Axes.bar_label.html#matplotlib.axes.Axes.bar_label)\r\n* replace pyplot vs OO section w\/ link to where that's discussed in user guide\r\n* put final image at top to make clear where the tutorial is going\/as selling point","comments":["@story645, Can I work on this?\r\n","Go for it, we don't really assign issues. "],"labels":["Documentation: tutorials"]},{"title":"ticker.py: always use np.round","body":"## PR summary\r\n\r\nI encountered the following error when using a logarithmic `yscale` in a graph:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/backends\/backend_gtk3.py\", line 277, in idle_draw\r\n    self.draw()\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/backends\/backend_agg.py\", line 388, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/artist.py\", line 95, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/figure.py\", line 3154, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/axes\/_base.py\", line 3070, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/axis.py\", line 1387, in draw\r\n    ticks_to_draw = self._update_ticks()\r\n                    ^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/axis.py\", line 1276, in _update_ticks\r\n    major_labels = self.major.formatter.format_ticks(major_locs)\r\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/ticker.py\", line 216, in format_ticks\r\n    return [self(value, i) for i, value in enumerate(values)]\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/ticker.py\", line 216, in <listcomp>\r\n    return [self(value, i) for i, value in enumerate(values)]\r\n            ^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/ticker.py\", line 1066, in __call__\r\n    is_x_decade = _is_close_to_int(fx)\r\n                  ^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/ticker.py\", line 2239, in _is_close_to_int\r\n    return math.isclose(x, round(x))\r\n                           ^^^^^^^^\r\nOverflowError: cannot convert float infinity to integer\r\n```\r\n\r\nWhere the above is printed repeatedly, for ever, and the GUI is stuck. With this patch applied, I get this graph in a logarithmic scale:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10998835\/f0a2e271-c0b7-4bea-85e6-e65af517f7ff)\r\n\r\nThe orange line goes upwards to huge values - which proves that the fit I tried to perform was wrong, but still matplotlib shouldn't almost crash due to such scientific error. Without this patch, I managed to fix one instance of the above error, using the following code:\r\n\r\n```\r\nimport matplotlib.ticker as ticker\r\nimport math\r\ndef my_is_close_to_int(x):\r\n    return math.isclose(x, np.round(x))\r\nticker._is_close_to_int = my_is_close_to_int\r\n```\r\n\r\nBut then I encountered this error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/backends\/backend_gtk3.py\", line 277, in idle_draw\r\n    self.draw()\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/backends\/backend_agg.py\", line 388, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/artist.py\", line 95, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/figure.py\", line 3154, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/axes\/_base.py\", line 3070, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/image.py\", line 132, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/axis.py\", line 1387, in draw\r\n    ticks_to_draw = self._update_ticks()\r\n                    ^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/axis.py\", line 1276, in _update_ticks\r\n    major_labels = self.major.formatter.format_ticks(major_locs)\r\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/ticker.py\", line 216, in format_ticks\r\n    return [self(value, i) for i, value in enumerate(values)]\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/ticker.py\", line 216, in <listcomp>\r\n    return [self(value, i) for i, value in enumerate(values)]\r\n            ^^^^^^^^^^^^^^\r\n  File \"\/nix\/store\/40yp1y2hd4l9pajlclp8nhzxpv5hksgm-python3-3.11.6-env\/lib\/python3.11\/site-packages\/matplotlib\/ticker.py\", line 1067, in __call__\r\n    exponent = round(fx) if is_x_decade else np.floor(fx)\r\n               ^^^^^^^^^\r\nOverflowError: cannot convert float infinity to integer\r\n```\r\n\r\nSo I decided to discuss with you about the simple suggestion of replacing all of Python's builtin usages of `round`, with `numpy`'s implementation, that can handle `NaN` or `Inf` easily.\r\n\r\nIt was very hard to debug it, as I couldn't use even a `try - except` clause to catch the error. I'm sorry, but I also currently haven't yet generated a reproducible example, due to the structure that my data is currently held at. I'd like to hear what you think first before I'll write tests to this PR.\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [N\/A] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html) - **It'd be nice to write a test that will prove the issue and that will be fixed in a commit afterwards**.\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines","comments":["Thanks, I think that this makes sense! As seen, we use `np.floor`, just after `round` in the second failure. Although it may just be a coincidence.\r\n\r\nCan you please add a test for this? I think a smoke test, where you basically plot something (simple) that currently triggers the error should be enough. With a comment that it is a smoke test and point to this PR for motivation. In this way we can make sure that the error doesn't return later if someone thinks \"well, I can replace that np.round with round\"...\r\n\r\nOne can of course discuss if actually all round should be np.round, like now, or if one should read the code a bit more careful and see if any can stay. On the other hand, one can also question if round is actually that much better for any reason? It is not so obvious from the code why sometimes round is chosen and sometimes np.round (except when we know that there is a vector involved)."],"labels":["status: needs revision","topic: ticks axis labels"]},{"title":"[Bug]: Font kwargs for pyplot.title only work in certain order","body":"### Bug summary\n\nIf font and font_size kwargs are passed into pyplot.title, kwargs have to be passed in in a certain order to work\r\n\r\n\n\n### Code for reproduction\n\n```python\npyplot.title(\"foo\", font=\"Times New Roman\", fontsize=20)  # this works - font size is changed to 20\r\npyplot.title(\"foo\", fontsize=20, font=\"Times New Roman\")  # this doesn't work - font size remains at ~8 or 10\n```\n\n\n### Actual outcome\n\nTitle font size remains at ~ 8 or 10\n\n### Expected outcome\n\nTitle font size changed to value passed in with fontsize argument\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.8.2\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n3.12.0\n\n### Jupyter version\n\nJupyter IPython version: 8.19.0\n\n### Installation\n\npip","comments":["I *think* this comes down to the fact that FontProperties should keep track of whether they actually have a user-set fontsize (ditto for other properties) or just get it from the default rcparam.\r\n\r\n(Currently, in `fontsize=20, font=\"Times\"`, the latter creates a FontProperties(\"Times\") object, which implicitly specifies a fontsize of 10 via fallback to rcparam; we should be able to instead have the latter say \"I don't have a fontsize set so respect any previously set fontsize, but if you really need a fallback to default then fallback to rcparam\".)","Could this be \"fixed\" via documentation to encourage using `fontfamily='Times New Roman'`, which gives the desired result, instead of `font='Times New Roman'`?"],"labels":["status: confirmed bug","topic: text\/fonts"]},{"title":"[Bug]: _raw_ticker() istep","body":"### Bug summary\n\nBefore 3.8.0, in matplotlib.ticker.MaxNLocator._raw_ticker(), there was a for-loop going over different possibilities that breaks out of the loop if a suitable condition was found, now it returns an empty list and fails.\n\n### Code for reproduction\n\n```python\n# set up\r\nimport matplotlib as mpl\r\nimport numpy as np\r\nmpl.rcParams['axes.autolimit_mode'] = 'round_numbers'\r\nmnl = mpl.ticker.MaxNLocator()\r\nmnl._nbins = 1\r\nmnl._extended_steps = np.array([0.1,0.2,0.5,1.,2.,5.,10. ,20.])\r\n\r\n# function that causes the bug to appear\r\nmnl._raw_ticks(-9.4, 18.9)\n```\n\n\n### Actual outcome\n\nIndexError: index 0 is out of bounds for axis 0 with size 0\n\n### Expected outcome\n\nnot failing, it should just break at line 2135\n\n### Additional information\n\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/eb02b108ea181930ab37717c75e07ba792e01f1d\/lib\/matplotlib\/ticker.py#L2109C7-L2109C8\r\n\r\nBefore 3.8.0, in matplotlib.ticker.MaxNLocator._raw_ticker(), there was a for-loop going over different possibilities that breaks out of the loop if a suitable condition was found, now it returns an empty list. Then, it searches for values in this list. As this list is empty, it gives an error.\r\n\r\nThis worked before 3.8.0. I'm currently preparing a new release of my own package 'pybinding', and I noticed that this error appeared in the newer versions (available on test.pypi.org).\r\nThe error originates from calling the function ax.autoscale_view() or calling other functions from Matplotlib that in turn call ax.autoscale_view().\r\nI just discovered this, and I can probably work around this issue, but I though to inform you to know if this is wanted behavior.\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.8.0\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nNone","comments":["Since `_raw_ticks()` starts with an underscore we consider it private API that we can change in each release without notifying users, and we don't expect users to use it. Is there an example that uses only public documented code that produces the error you're talking about? otherwise I think we can close this.","Thanks for the fast reply.\r\nUpon further inspection, it appears that there was some usage of other private functions and inheritance from Matplotlib in the background.\r\nHowever, this bug can still be reached with specific combinations of public functions;\r\n``` \r\nimport matplotlib as mpl\r\nmpl.rcParams['axes.autolimit_mode'] = 'round_numbers'\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.collections import CircleCollection\r\n_, ax = plt.subplots()\r\ncol = CircleCollection(sizes=[10, 10], offsets=[[0, 0], [1, 0]], offset_transform=ax.transData)\r\nax.add_collection(col)\r\nax.set_aspect('equal')\r\nax.autoscale_view()\r\n```\r\nI'll probably find a workaround for this function in my program as the error only appears in very specific situations.","With the loop we had an implicit fallback case of none of the steps were \"good\", but with the vectorized approach we can end up with no \"good\" steps.  \r\n\r\nHopefully we only need a `if not `np.any(large_steps): ...` that reproduces what ever the old fallback was, but I could also see there being some funny behavior with the \"round\" steps."],"labels":["status: confirmed bug"]},{"title":"[ENH]: Add dark mode for subplot configuration tool","body":"### Problem\n\nThe subplot configuration tool is currently white background\/black text when macOS is in dark mode. It would be nice to apply a dark style sheet when macOS is in dark mode. This is using the macosx backend, but might be an issue for other backends (but not QT AFAIK).\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nplt.figure()\r\nplt.show()\r\n```\r\n<img width=\"604\" alt=\"Screenshot 2024-01-01 at 19 40 19\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/6197628\/aab3534e-1ce1-4d26-8eb6-94d779921f58\">\r\n\r\n\r\n\n\n### Proposed solution\n\nApply a dark style sheet to the configuration tool when macOS is in dark mode.","comments":["A fundamentally reasonable request. But this applies also to other OS.\r\n\r\nQuestions that come to my mind:\r\n- How do we detect this? platform-specific\/cross-platform?\r\n- Can we inject this into the code path for showing the subplot configuration tool? - It intentionally uses a plot, so that we don't have to implement \/ maintain this across all backends. So the code path may be platform\/backend-agnostic.\r\n- If we start fiddling with these things, wouldn't it be simpler to (optionally) create native GUI-toolkit versions of the dialog. If the GUI toolkit doesn't provide a the dialog, we fall back to the current figure-based dialog. I anticipate that a native version of this would only be a handful of lines of code, and I don't expect the dialog to change a lot, so the maintainance burden is bearable.","The subplot config tool is just a figure isn't it?  I guess injecting the right style sheet is a way forward?  ","Yes. Subject to my questions above.","I would say a native tool (such as the one already present for the qt backend) is much more ergonomic."],"labels":["New feature","GUI: MacOSX"]},{"title":"[Bug]: Qt5 backend icons should be white when macOS in dark mode","body":"### Bug summary\r\n\r\nIn dark mode on macOS, the window background on the Qt5 backend is correctly changed to black, but the icons are still black when they should be white:\r\n<img width=\"647\" alt=\"Screenshot 2024-01-01 at 19 04 53\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/6197628\/377a75f6-8be6-4728-b8a4-ded9345debb0\">\r\n\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib\r\nmatplotlib.use(\"Qt5Agg\")\r\n\r\nimport matplotlib.pyplot as plt\r\nplt.figure()\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nBlack icons\r\n\r\n### Expected outcome\r\n\r\nWhite icons\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\n_No response_\r\n\r\n### Matplotlib Version\r\n\r\n3.9.0.dev905+gb4fc72bb88\r\n\r\n### Matplotlib Backend\r\n\r\nQt5Agg\r\n\r\n### Python version\r\n\r\n3.11.6\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\ngit checkout","comments":["In theory, we should handle this correctly. Please check what is happening at\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/b4fc72bb8858f7a8841bb2378634f4fa1acb4d32\/lib\/matplotlib\/backends\/backend_qt.py#L731-L737","At https:\/\/github.com\/matplotlib\/matplotlib\/blob\/b4fc72bb8858f7a8841bb2378634f4fa1acb4d32\/lib\/matplotlib\/backends\/backend_qt.py#L732\r\nthe icon_color is being returned as RGB = (0, 0, 0), ie black. So it seems that on macOS `foregroundRole()` isn't returning a good colour for the icons? Possibly related to `backgroundRole()` being RGB = (50, 50, 50), ie grey and not completely black?","Here's a slightly hacky fix, in that it hard codes the button colour to white...\r\n\r\n```diff\r\ndiff --git a\/lib\/matplotlib\/backends\/backend_qt.py b\/lib\/matplotlib\/backends\/backend_qt.py\r\nindex c6a6f3ad2e..c1dbf6237e 100644\r\n--- a\/lib\/matplotlib\/backends\/backend_qt.py\r\n+++ b\/lib\/matplotlib\/backends\/backend_qt.py\r\n@@ -1,3 +1,4 @@\r\n+from ast import iter_child_nodes\r\n import functools\r\n import os\r\n import sys\r\n@@ -728,8 +729,11 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):\r\n         pm = QtGui.QPixmap(filename)\r\n         pm.setDevicePixelRatio(\r\n             self.devicePixelRatioF() or 1)  # rarely, devicePixelRatioF=0\r\n-        if self.palette().color(self.backgroundRole()).value() < 128:\r\n-            icon_color = self.palette().color(self.foregroundRole())\r\n+\r\n+        # Check button color to guess if the OS is in dark mode, and if so\r\n+        # make the button icons white\r\n+        if self.palette().button().color().black() > 128:\r\n+            icon_color = QtGui.QColor('white')\r\n             mask = pm.createMaskFromColor(\r\n                 QtGui.QColor('black'),\r\n                 QtCore.Qt.MaskMode.MaskOutColor)\r\n```\r\n","FWIW they're already white for me.  (This is on macOS 14.2.1 & PyQt6.5.3.)","Ah, works for me using Qt6 but not Qt5. Probably just a bug in Qt5 that's causing this then - happy to close as won't fix on our end?","I guess the fix is OK as a stopgap, but it should not be used on Qt6 -- the foreground color on Qt6 is not actually fully white, but slightly gray, which looks better.  (Also, I think the old check on backgroundRole is just fine?)"],"labels":["GUI: Qt"]},{"title":"[ENH]: Add way to automatically fix flake8 errors","body":"### Problem\n\nWhen I'm developing, I'll often get flake8 errors, e.g.:\r\n```\r\nflake8...................................................................Failed\r\n- hook id: flake8\r\n- exit code: 1\r\n\r\nlib\/matplotlib\/tests\/test_colors.py:597:49: E231 missing whitespace after ','\r\nlib\/matplotlib\/tests\/test_colors.py:602:1: E302 expected 2 blank lines, found 1\r\n```\r\n\r\nIt's quite annoying to have to go through and manually fix these, when it looks like they could easily be automatically fixed.\n\n### Proposed solution\n\n_No response_","comments":["You may want to look into ruff, which can auto-fix some errors.","@ksunden added ruff to pyproject.toml a while back (https:\/\/github.com\/matplotlib\/matplotlib\/pull\/25147) not sure if there was a reason for not adding it to the pre-commits\/CI","By yes we have config for ruff and ruff can do auto fixes for many things.\n\nThere are two checks we have enabled on flake8 that are not yet available on released ruff (E122 and E302, the latter in fact being flagged by this example) which is why I haven't swapped over precommit\/ci yet (these are checks that were deprioritized because other autoformatters such as black already take care of them, they are both currently in PRs)\n\nI have voiced support for those two getting in, but hasn't happened yet","I am very against giving pre-commit the ability to push commits back to open PRs.","> I am very against giving pre-commit the ability to push commits back to open PRs.\r\n\r\nAll the autofix stuff we currently use does the autofix locally on commit, kind of assumed that's what would also be implemented here?","It can be configured that it only auto edits locally but ci does not push commits, just fails","Even locally, if I apply\r\n```diff\r\ndiff --git a\/lib\/matplotlib\/cm.py b\/lib\/matplotlib\/cm.py\r\nindex 53c60c8a88..08d70371b7 100644\r\n--- a\/lib\/matplotlib\/cm.py\r\n+++ b\/lib\/matplotlib\/cm.py\r\n@@ -55,7 +55,6 @@ def _gen_cmap_registry():\r\n         cmap_d[rmap.name] = rmap\r\n     return cmap_d\r\n \r\n-\r\n class ColormapRegistry(Mapping):\r\n     r\"\"\"\r\n     Container for colormaps that are known to Matplotlib by name.\r\n```\r\n`flake8` correctly complains with\r\n```\r\nflake8...................................................................Failed\r\n- hook id: flake8\r\n- exit code: 1\r\n\r\nlib\/matplotlib\/cm.py:58:1: E302 expected 2 blank lines, found 1\r\n```\r\n\r\nBut `ruff --fix` doesn't fix that error (but does fix a bunch of unrelated stuff). So maybe in the specific error code of E302 (expected two blank lines) there's an issue with the ruff configuration?","E302 is one of the 2 error codes from our flake8 config that ruff does not yet handle, which is the reason I haven't pushed to replace flake8. It cannot be configured for ruff yet and will not be automatically fixed by ruff yet. There exists a pr to ruff for it, but not yet complete.\n\nI haven't tried running `ruff --fix` in quite a while. I expect that doing so (or making the call _not_ to do so, depending on how extensive the changes are) would be part of switching over ci\/precommit"],"labels":["New feature","Maintenance"]},{"title":"[ENH]: Configureable default padding around figure when using constrained_layout","body":"### Problem\r\n\r\nConstrained layout figures fill out their frames too well, and adding padding during savefig makes the figures no longer adhere to the figsize given in my stylesheet, and isn't a by-default configured amount of padding. When these figures will be used (sometimes two half page-width figures side by side) in my latex document, the contents sit way too close. I don't want to change spacing within the subplot group -- that's all fine, I just want constrained layout to add space around the figure (incl. labels and maybe titles) while respecting the outer figure dimensions.\r\n\r\n### Proposed solution\r\n\r\nAdd padding arguments to rcParams so that they may be configured on a stylesheet. These padding arguments should not influence the spacing of elements within the figure -- only around the figure.","comments":["If I have understood, this is already possible with [rcParams[\"figure.constrained_layout.h_pad\"]](https:\/\/matplotlib.org\/stable\/users\/explain\/customizing.html?highlight=figure.constrained_layout.h_pad#matplotlibrc-sample) and [rcParams[\"figure.constrained_layout.w_pad\"]](https:\/\/matplotlib.org\/stable\/users\/explain\/customizing.html?highlight=figure.constrained_layout.w_pad#matplotlibrc-sample).  \r\n\r\nSee https:\/\/matplotlib.org\/stable\/api\/layout_engine_api.html#matplotlib.layout_engine.ConstrainedLayoutEngine","@rcomer h\/w_space puts space between axes, but not on the outer sides.  h\/w_pad puts a padding around the axes, including the outer sides.  but if you set a large h_pad, it will put a big space between the axes as well as on the outer sides.\r\n\r\n@ecciv, the `rect` parameter gives you want you want with a touch of trivial math:\r\n\r\n```python\r\nw, h = 7, 5\r\nmargin = 1\r\n\r\nfig, axs = plt.subplots(1, 3, layout='constrained', figsize=(w, h))\r\nfig.get_layout_engine().set(rect=[margin \/ w, margin \/ h,\r\n                                  (w-2*margin) \/ w, (h-2*margin) \/ h])\r\nplt.show()\r\n```\r\n\r\n![Boo](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1562854\/2437576a-cef4-4000-a209-ccbef1effa2a)\r\n \r\nIt would be pretty easy to wrap into your own helper, so I don't necessarily think we should add extra API for this, particularly as this is largely to service layout outside of Matplotlib (there are pretty easy ways to horizontally separate figures in LaTeX, for instance).  \r\n\r\n```python\r\ndef my_subplots(nrows, ncols, figsize=None, margin=0.5):\r\n    fig, axs = plt.subplots(nrows, ncols, layout='constrained', figsize=figsize)\r\n    w = fig.get_figwidth()\r\n    h = fig.get_figheight()\r\n    fig.get_layout_engine().set(rect=[margin \/ w, margin \/ h,\r\n                                      (w-2*margin) \/ w, (h-2*margin) \/ h])\r\n    return fig, axs\r\n```\r\n","Thanks @jklymak, that's a great way of doing it and it achieves the result I'm after, so I might use that :)\r\n\r\nI'll try to explain a bit where I'm coming from with this issue, maybe that will change your mind. \r\n\r\nI'm trying to standardize the appearance of plots from different tools in separate repos in our business, and a stylesheet gets us a long way. Our stylesheet is it's own importable module, which makes style compliance and also updating our common business style a breeze. The way I view it is that any added code (past creating the figure and plotting data), like manually touching the grid or what it may be, marks a _deviation_ from our style. A minimal amount of configuration should be as adherent to our style as possible. That's why I don't find a helper function to be the ideal solution, even if in our case we could deploy it quite easily to all our repos via our stylesheet module.\r\n\r\nOur stylesheet uses the constrained layout by default. These plots are meant to end up in different places -- probably in Word based reports, in automatically generated Latex design documentation, and in PPoints. The current layout (with basically no margins) is something we can work with in all of those places. But I'd much rather have one solution in our stylesheet than one workaround in each of the places where we want to use these figures (or worse, one workaround in each of the places where we generate a figure).","Easy would be to add an rcParam for the default *rect*.  However _rect_ is relative to the figure size, so it won't give you a 0.5 inch margin (for instance), but rather one in the fraction of the figure size.  Perhaps that is adequate for your needs, and I'm sure we'd welcome a PR.  \r\n\r\nIf you want to add a physical-space margin on the outside (eg in inches),  that is not available in the way constrained layout is made currently.  It _could_ be made to work by various methods, but I think it would be substantial work.  My immediate idea would be to vary \"rect\" dynamically as the figure changes size, but not 100% sure that would work.  One could also add another layer of margins that simply default to zero width - thats not conceptually too hard, but a bit of plumbing would be necessary.  \r\n\r\nI would still say that this is something I would set up in the final document's stylesheet, not in Matplotlib.   But if someone wanted to work on it, I don't think there is any reason not to add an external margin.  \r\n\r\n"],"labels":["New feature","status: needs clarification"]},{"title":"Fix specifying number of levels with log contour","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n\r\nWhen plotting contours with a log norm, passing an integer value to the ``levels`` argument to cap the maximum number of contour levels now works as intended.  Partially addresses https:\/\/github.com\/matplotlib\/matplotlib\/issues\/19856 and replaces https:\/\/github.com\/matplotlib\/matplotlib\/pull\/25149.\r\n\r\nI've maually checked that the added test fails before this fix. Testing with the following script:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.colors import LogNorm\r\nimport numpy as np\r\n\r\nx, y = np.mgrid[1:10:0.1, 1:10:0.1]\r\ndata = np.abs(np.sin(x)*np.exp(y))\r\n\r\nfor n_levels in range(2, 20):\r\n    fig, ax = plt.subplots()\r\n    im = ax.contourf(x, y, data, norm=LogNorm(), levels=n_levels)\r\n    cbar = fig.colorbar(im, ax=ax)\r\n    n_ticks = len(cbar.ax.get_yticklabels())\r\n    print(f\"Requested max {n_levels + 1}, got {n_ticks - 1}\")\r\n```\r\n\r\nGives on current `main`:\r\n```\r\nRequested max 3, got 7\r\nRequested max 4, got 7\r\nRequested max 5, got 7\r\nRequested max 6, got 7\r\nRequested max 7, got 7\r\nRequested max 8, got 7\r\nRequested max 9, got 7\r\nRequested max 10, got 7\r\nRequested max 11, got 7\r\nRequested max 12, got 7\r\nRequested max 13, got 7\r\nRequested max 14, got 7\r\nRequested max 15, got 7\r\nRequested max 16, got 7\r\nRequested max 17, got 7\r\nRequested max 18, got 7\r\nRequested max 19, got 7\r\nRequested max 20, got 7\r\n```\r\nand with this PR:\r\n\r\n```\r\nRequested max 3, got 3\r\nRequested max 4, got 4\r\nRequested max 5, got 4\r\nRequested max 6, got 4\r\nRequested max 7, got 7\r\nRequested max 8, got 7\r\nRequested max 9, got 7\r\nRequested max 10, got 7\r\nRequested max 11, got 7\r\nRequested max 12, got 7\r\nRequested max 13, got 7\r\nRequested max 14, got 7\r\nRequested max 15, got 7\r\nRequested max 16, got 7\r\nRequested max 17, got 7\r\nRequested max 18, got 7\r\nRequested max 19, got 7\r\nRequested max 20, got 7\r\n```\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [n\/a] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["status: needs review","topic: contour"]},{"title":"Make `Animation._start()` public?","body":"Hello,\r\n\r\nThis is not exactly a bug report, nor a feature request, but rather more of a development dilemma that I'd like to discuss with you. I hope it's OK to discuss it here and not on discourse, as I feel here much more comfortable with code snippets and attachments, and I think that after a discussion this issue will be actionable as a feature request or a bug report.\r\n\r\nI managed to create the following \"poor man's GUI\" to view results of many simulations in 1 figure:\r\n\r\n[matplotlib-_start-issue-demonstration - trimmed - without issue.webm](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10998835\/d8ace120-081d-4bfa-93c9-2db5de746bce)\r\n\r\nWhere the black vertical line in the lower right plot shows the progress of the simulation. This seems to behave great right? Apparently, I had to call an animation's `_start()` function to achieve this. Here are details of the progress:\r\n\r\nI used the [Data browser](https:\/\/matplotlib.org\/stable\/gallery\/event_handling\/data_browser.html) code as a starting point. Basically, when `self.update` is called (every time a simulation is picked), an animation is created using `self.anim = animation.FuncAnimation(...)`. The weird behavior I experienced before using `self.anim._start()`, is demonstrated in the following video:\r\n\r\n[matplotlib-_start-issue-demonstration - trimmed - with issue.webm](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10998835\/35ad437c-c988-456d-8172-c298aaee25bf)\r\n\r\nAs you can see, the animation never restarts it self, although the `self.anim` object is assigned a new value every time a simulation is changed - the black time marker in the lower-right plot demonstrates this. Sometimes I experienced that pressing <kbd>n<\/kbd> or <kbd>p<\/kbd> (events handled by the class), in a certain timing, does make the simulation restart, but this is not well defined.\r\n\r\nHere is the commit in my code that reproduces the issue I'm describing:\r\n\r\nhttps:\/\/gitlab.com\/doronbehar\/lab-ion-trap-simulations\/-\/commit\/2edc2abbe874ebd2af458f1d4f80710754d8625a\r\n\r\nIf you really want to reproduce the issue with my data, you will have to trust me with the pickle data I uploaded to this repository, to the branch [`matplotlib-_start-issue-reproducing`](https:\/\/gitlab.com\/doronbehar\/lab-ion-trap-simulations\/-\/tree\/matplotlib-_start-issue-reproducing).\r\n\r\nSorry for not creating a minimal working example :grimacing:, but I hope you'd be able to discuss the issue although the code that reproduces it is involved in many irrelevant details.\r\n\r\nThanks for your attention!","comments":["https:\/\/github.com\/matplotlib\/matplotlib\/blob\/e5a85f960b2d47eac371cff709b830d52c36d267\/lib\/matplotlib\/animation.py#L879-L881\r\n\r\nis where we use `_start()` internally.  This sets up a callback so that when the Figure in eventually drawn we start the animation.  I think this is a more reliably way to manage making sure the animation is started as if the user manages it directly.\r\n\r\nI suspect if you add `fig.canvas.draw_idle()` to the bottom of your `def update` it will work reliably.  It looks like you dropped the `self.fig.canvas.draw()` from the example.\r\n\r\n-----\r\n\r\nAs a side note, the `np.hypot` in the example is because pick events will return the index of all of the points within the pick range of where you clicked so computing the distance is there to get the closest one (not just the first one).","> As a side note, the `np.hypot` in the example is because pick events will return the index of all of the points within the pick range of where you clicked so computing the distance is there to get the closest one (not just the first one).\r\n\r\nThanks for reading my comments and explaining :). I suspected this was the reason, though I didn't find a difference in the behavior between my seemingly oversimplified implementation.\r\n\r\n> I suspect if you add `fig.canvas.draw_idle()` to the bottom of your `def update` it will work reliably. It looks like you dropped the `self.fig.canvas.draw()` from the example.\r\n\r\nThanks for reading my code! Indeed I forgot I removed the call to `fig.canvas.draw`, and I don't remember why. However, both of your suggestions didn't really help. With `fig.canvas.draw_idle()`, I get exactly the same behavior as in the 2nd video I uploaded above. With `fig.canvas.draw()`, I get an interesting, yet still unsatisfying behavior:\r\n\r\n[matplotlib-_start-issue-demonstration - with canvas.draw.webm](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10998835\/3dcb4c66-1ce3-4542-b01d-b5c94fd14add)\r\n","The issue may also be that the older Animations are still running.  There is public `pause` method on them, does it work better if you pause the previous animation before you create a new one?","> The issue may also be that the older Animations are still running. There is public `pause` method on them, does it work better if you pause the previous animation before you create a new one?\r\n\r\nI tried that as well, and that simply causes the animation to stop when I press one of the buttons, and it never starts:\r\n\r\n[matplotlib-_start-issue-demonstration - only pausing.webm](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10998835\/d59b20cc-5e5c-4ac0-ad54-552d22e9b0c0)","Can you get this down to a smaller example?","I'm not sure I'll have time to construct something, but I'll keep you updated!"],"labels":["API: changes"]},{"title":"[Bug]: QuadMesh.get_cursor_data() returns incorrect value","body":"### Bug summary\n\n`QuadMesh.get_cursor_data()` returns the incorrect value, but only for some figure sizes, when an event is near the boundary between two cells and the axis is categorical. By 'incorrect', I mean it doesn't align with the event's `xdata` and `ydata` values.\r\n\r\nIn the below sample I get the cell value by two means and compare them:\r\n* by rounding the `xdata` and `ydata` values from the event to index into the underlying data\r\n* using `get_cursor_data`.\r\n\r\nThey _almost_ always match, but not always.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\nimport numpy as np\r\n\r\nplt.rcParams[\"backend\"] = \"TKAgg\"\r\nplt.ion()\r\nfig, ax = plt.subplots()\r\n\r\ndata = np.arange(6).reshape(2, 3)\r\n\r\nqm = ax.pcolormesh(\r\n    [\"col 1\", \"col 2\", \"col 3\"],\r\n    [\"row 1\", \"row 2\"],\r\n    data,\r\n)\r\n\r\n\r\ndef on_mouse_move(event):\r\n    if not event.inaxes:\r\n        return\r\n    cd = qm.get_cursor_data(event)\r\n    if cd is None:\r\n        return\r\n\r\n    # The value of the cell, according to get_cursor_data()\r\n    cd_val = cd[0]\r\n\r\n    # The value of the cell, according to the data row\/col\r\n    data_val = data[round(event.ydata), round(event.xdata)]\r\n\r\n    if cd_val == data_val:\r\n        print(\"Fine\")\r\n    else:\r\n        print(event)\r\n        print(cd)\r\n        raise ValueError(f\"Value mismatch. {cd_val} != {data_val}\")\r\n\r\n\r\nfig.canvas.mpl_connect(\"motion_notify_event\", on_mouse_move)\r\nfig.canvas.manager.window.geometry(\"800x1054+100+100\")\n```\n\n\n### Actual outcome\n\nAs you hover the cursor right in the middle where two cells touch, it raises the error when the values don't match.\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/4443482\/b81716a5-5866-4fcc-b036-31bb654a4ca2)\r\n\n\n### Expected outcome\n\nThe two values should always match.\n\n### Additional information\n\nTrying to track down the issue, I noticed that it only happens at some figure heights. When I changed from my default to pretty much anything else, it was difficult to get the error.\r\n\r\nSo I can confirm that it isn't _caused_ by the call to `fig.canvas.manager.window.geometry`, but if you don't do this you likely won't be able to replicate the issue.\r\n\r\nThe real world situation where I discovered this: I was producing a tooltip for a heatmap. I got the y label (Country) using `ax.format_ydata(event.ydata)` and the cell value using `quad_mesh.get_cursor_data(event)`. I only noticed when the cells are quite  small, it gives me incorrect information a lot, e.g. Canada has no bananas, so should show `nan` (short for no nanas), but it shows the value from Cape Verde instead.\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/4443482\/1472ec16-ca54-4873-a7af-1736c35971df)\r\n\r\nZoomed in\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/4443482\/b44602c0-9acc-4efe-856e-39e639b42525)\r\n\r\nYou can also replicate this without interaction by just firing a bunch of mouse events near the border, this will fail regardless of the figure size.\r\n```py\r\nfig.canvas.draw()\r\n\r\nfor ax_y in np.linspace(0.49, 0.51, 100):\r\n    x, y = ax.transAxes.transform((0.5, ax_y))\r\n    mouse_event = MouseEvent(\r\n        name=\"motion_notify_event\",\r\n        canvas=fig.canvas,\r\n        x=x,\r\n        y=y,\r\n    )\r\n    on_mouse_move(mouse_event)\r\n```\r\n\r\nI'm not sure what the fix would look like, it seems to go quite deep. A good interim step would be a note in the docs for `get_cursor_data()` warning that it isn't guaranteed to align with `xdata` and `ydata` near the borders.\n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.8.0\n\n### Matplotlib Backend\n\nTKAgg\n\n### Python version\n\n3.10\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip","comments":[],"labels":["topic: pcolor\/pcolormesh"]},{"title":"DOC: initial tags for statistics section of gallery","body":"\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n\r\nBatch of tags for the stats functions, started by @ktnharris22 in #27235\r\n\r\nI mostly didn't add to the tags except to flag stuff that's veering into tutorial or might belong in plot-types.  I put\/propose stashing internal-tags in an ifconfig b\/c I think they can be useful on dev as a flag of what to work on and confusing\/clutter on any of the stable versions.  \r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["status: upstream fix required","Documentation: tags"]},{"title":"DOC: batch of tags","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n\r\nTags from the spreadsheet from #27235 - I'm breaking them up into batches by author to make reviewing easier. These are by @RickyP24, @smcgrawDotNet, and @kakun45\r\n\r\nIs waiting on sphinx-tag merging open PRs for supporting content in body of tag. \r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["status: upstream fix required","Documentation: tags"]},{"title":"Add `set_offset3d` and `get_offset3d` methods to 3D Collections","body":"## PR summary\r\nCloses https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27543\r\n\r\nMore discussion in https:\/\/github.com\/matplotlib\/matplotlib\/pull\/19573\r\n\r\nNote that the inherited `Collection.set_offset` and `Collection.get_offset` methods with 2D coordinates are used in zordering calculations and I couldn't see an easy way to abstract those out in order to override those methods and keep the same names as the 2D case.\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [n\/a] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n","comments":["Only test failure is codecov, but these are fairly well covered and should be fine.","I took the liberty to create a commit with the style fixes.","Could you add a simple test? I think just manipulating the values and reading them back to assert that you get the new offesets is sufficient. Or, if you want to be a bit more fancy make an image comparison test where you create a collection in `fig_test` with `offests_0` and then `set_offsets3d(offsets_1)` and compare that to `fig_ref` with directly set `offsets_1`. This could also be amended with `zdir`.","Moving back to draft since I need to dig more into what Poly3DCollection is doing"],"labels":["topic: mplot3d"]},{"title":"Move axisartist towards untransposed transforms (operating on (N, 2) arrays instead of (2, N) arrays).","body":"While Matplotlib normally represents lists of (x, y) coordinates as (N, 2) arrays and transforms (which we'll call \"trans\") have shape signature (N, 2) -> (N, 2), axisartist uses the opposite convention of using (2, N) arrays (or size-2 tuples of 1D arrays) and transforms (which it typically calls \"transform_xy\").  Change that and go back to Matplotlib's standard represenation in some of axisartist's internal representations for consistency.  Also replace some uses of (x1, y1, x2, y2) quadruplets by single Bbox objects, which avoid having to keep track of the order of the points (is it x1, y1, x2, y2 or x1, x2, y1, y2?).\r\n\r\n- Add a `_find_transformed_bbox(trans, bbox)` API to ExtremeFinderSimple and its subclasses, replacing `__call__(transform_xy, x1, y1, x2, y2)`. (I intentionally did not overload `__call__`'s signature yet nor did I deprecate it for now; we can consider doing that later.)\r\n- Deprecate `GridFinder.{,inv_}transform_xy`, which implement the transposed transform API.\r\n- Switch `grid_info[\"extremes\"]` from quadruplet representation to Bbox.\r\n- Switch `grid_info[\"lon\"][\"lines\"]` and likewise for \"lat\" from list-of-size-1-lists-of-pairs-of-1D-arrays to list-of-(N, 2)-arrays.\r\n- Switch `grid_info[\"line_xy\"]` from pair-of-1D-arrays to a (N, 2) array.\r\n- Let `_get_raw_grid_lines` take a Bbox as last argument instead of 4 coordinates.\r\n\r\nNote that I intentionally mostly didn't touch (transpose) public-facing APIs for now, this may happen later.\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["topic: mpl_toolkit"]},{"title":"Extend set_offsets to 3D for Path3DCollection, Patch3DCollection","body":"### Summary\n\nWhen creating 3D animations, it's best practice to update positions for the scatter points rather than re-drawing the whole thing. However, the only way to do this currently is to write to the private attribute `_offsets3d` directly. We should have a public `set_offsets` method to mirror the 2D behavior.\r\n\r\nSee also: https:\/\/stackoverflow.com\/questions\/41602588\/how-to-create-3d-scatter-animations\n\n### Proposed fix\n\n_No response_","comments":["Note to self, `set_facecolor` seems potentially messed up too.\r\n\r\nEdit: this is a separate issue, see https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27555","I imagine there will be quite a number of similar cases around.\r\n\r\nThis is a major downside of the concept to promote 2D to 3D by subclassing. One would have to make sure that all 2d API and logic is overwritten. But AFAICT this has not been done.","Yeah, agreed. It's a bit of a pain because it'll be a pretty big effort to go scrub everything - quite a few methods work just fine being subclassed. For right now I figure I can knock down things as they come up. Might be worth doing a look through the top mplot3d stackoverflow questions to see if there are any gaps identified there."],"labels":["topic: mplot3d"]},{"title":"Update conda on AppVeyor","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n\r\nThe AppVeyor tests are pretty slow and quite a bit of the time seems to be setting things up. (About 12 of 36 minutes spent running the actual tests.)\r\n\r\nAs a really old version of conda is used by default (4.7.12), this PR aims to upgrade to the latest conda version which hopefully runs faster (as most things are faster).\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Seems like the problem is that the image that we are using only has Python 3.7 installed so resolving the environment for 3.9 and 3.10 takes significant time. https:\/\/www.appveyor.com\/docs\/windows-images-software\/#python Also, updating conda does not give the latest version, so not clear how much of the recent improvements are actually included.\r\n\r\nUpdating the image will only give 3.8 though if we stick with conda. pip-based installs can run any version of Python. But then, I do not really know what the purpose of the AppVeyor tests are.","Could micromamba help us here?\r\n\r\nIt looks like the upgrade is only getting us from 4.12 -> 4.14 which is still well before the change to use the mamba solver.  My guess (not checked) is that 4.14 is the newest version available for py37.","It looks like we could use Chocolatey to get a [newer miniconda3](https:\/\/community.chocolatey.org\/packages\/miniconda3) with Python 3.9, but the latest version is still 4.12.0. Chocolatey also has [mambaforge 23.3.1.100](https:\/\/community.chocolatey.org\/packages\/mambaforge), which [should be about the same as miniforge](https:\/\/github.com\/conda-forge\/miniforge#whats-the-difference-between-mambaforge-and-miniforge).","If Appveyor does not provide a recent minconda out of the box, micromamba is likely the way to go."],"labels":["CI: testing"]},{"title":"Make zdir key-word only for 3D-scatter and -bar","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n\r\nRelated to #27287 and #27368. Putting it here to see the consequences on examples etc and to discuss if it makes sense. Will naturally add release notes.\r\n\r\n(As far as I can see, `zdir` is not tested at all for `scatter`. `bar` only has a single test which passes zdir as a kwarg.)\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["It seems okay, other than the missing tests?","> It seems okay, other than the missing tests?\r\n\r\nMissing tests as in tests to see that it actually warns or tests for `zdir`? The first will be there, the second I tried but couldn't really understand how it was supposed to work, so seems bad to add a test when one isn't convinced that it works as expected..."],"labels":["topic: mplot3d","API: changes"]},{"title":"[Bug]: pcolorfast does not support units for X\/Y","body":"### Bug summary\r\n\r\nAs found in #27450, the `X`\/`Y` arguments to `pcolorfast` do not support units.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport datetime\r\n\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\n\r\nnp.random.seed(19680801)\r\n\r\nbasedate_x = datetime.datetime(2023, 12, 6, 1, 30, 30)\r\nbasedate_y = datetime.datetime(2024, 5, 5, 12, 15, 45)\r\ndates_x = [basedate_x + datetime.timedelta(days=1*i, hours=6*i, minutes=20*i)\r\n           for i in range(10)]\r\ndates_y = [basedate_y + datetime.timedelta(days=1*i, hours=8*i, minutes=30*i)\r\n           for i in range(10)]\r\n\r\ndata = np.random.rand(0, 100)\r\n\r\nfig, ax = plt.subplots()\r\npc = ax.pcolorfast(dates_x, dates_y, data)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n``` python\r\nTraceback (most recent call last):\r\n  File \"\/home\/elliott\/code\/matplotlib\/pcolorfast.py\", line 19, in <module>\r\n    pc = ax.pcolorfast(dates_x, dates_y, data)\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/__init__.py\", line 1472, in inner\r\n    return func(\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/axes\/_axes.py\", line 6527, in pcolorfast\r\n    self.update_datalim(np.array([[xl, yb], [xr, yt]]))\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/axes\/_base.py\", line 2503, in update_datalim\r\n    if not np.any(np.isfinite(xys)):\r\nTypeError: ufunc 'isfinite' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\r\n```\r\n### Expected outcome\r\n\r\nA plot similar to `pcolormesh`, with dates on the x\/y axis.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\n_No response_\r\n\r\n### Matplotlib Version\r\n\r\n589d3fbe13f0067a21804ab3f55ffeb07a839b90\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\ngit checkout","comments":["Using non-datetime units (from `pint`) works fine and the axes are labelled correctly, so this is perhaps an issue specifically with datetime or list of datetimes?\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nimport pint\r\nureg = pint.UnitRegistry()\r\nureg.setup_matplotlib()\r\n\r\nX, Y = np.meshgrid(np.linspace(-3, 3, 16), np.linspace(-3, 3, 16))\r\nC = X**2 + Y**2\r\n\r\nX = X * ureg.m\r\nY = Y * ureg.m\r\n\r\nfig, ax = plt.subplots()\r\nax.pcolormesh(X, Y, C)\r\nplt.show()\r\n```","Specifically the issue seems to be `_AxesBase.update_datalim()` does not like being given `List[Tuple[datetime.datetime, datetime.datetime]` becasue `np.isfinite` doesn't work on that type."],"labels":["topic: date handling","topic: units and array ducktypes"]},{"title":"[Bug]: clabel manual argument does not accept units","body":"### Bug summary\r\n\r\nAs found in #27490, while `contour` does appear to allow units, if you pass manual label locations to the `manual` argument of `clabel, it will fail.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport datetime\r\n\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\n\r\n# Sample data for contour plot\r\ndates = [datetime.datetime(2023, 10, 1) + datetime.timedelta(days=i) for i in range(10)]\r\nx_start, x_end, x_step = -10.0, 5.0, 0.5\r\ny_start, y_end, y_step = 0, 10, 1\r\n\r\nx = np.arange(x_start, x_end, x_step)\r\ny = np.arange(y_start, y_end, y_step)\r\n\r\n# In this case, Y axis has dates\r\nX, Y = np.meshgrid(x, dates)\r\n\r\nrows = len(X)\r\ncols = len(X[0])\r\n\r\nz1D = np.arange(rows * cols)\r\nZ = z1D.reshape((rows, cols))\r\n\r\nfig, ax = plt.subplots()\r\nCS = ax.contour(X, Y, Z)\r\n\r\nax.clabel(CS, CS.levels, inline=True, fmt=dict(zip(CS.levels, dates)),\r\n          manual=[(x, y) for x, y in zip(x, dates)])\r\n```\r\n\r\n\r\n### Actual outcome\r\n```python\r\nTraceback (most recent call last):\r\n  File \"\/home\/elliott\/code\/matplotlib\/clabel.py\", line 27, in <module>\r\n    ax.clabel(CS, CS.levels, inline=True, fmt=dict(zip(CS.levels, dates)),\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/axes\/_axes.py\", line 6581, in clabel\r\n    return CS.clabel(levels, **kwargs)\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/contour.py\", line 195, in clabel\r\n    self.add_label_near(x, y, inline, inline_spacing)\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/contour.py\", line 553, in add_label_near\r\n    x, y = transform.transform((x, y))\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/transforms.py\", line 1508, in transform\r\n    res = self.transform_affine(self.transform_non_affine(values))\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/_api\/deprecation.py\", line 297, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/transforms.py\", line 2422, in transform_affine\r\n    return self.get_affine().transform(values)\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/transforms.py\", line 1797, in transform\r\n    return self.transform_affine(values)\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/_api\/deprecation.py\", line 297, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/transforms.py\", line 1868, in transform_affine\r\n    return affine_transform(values, mtx)\r\nTypeError: Cannot cast array data from dtype('O') to dtype('float64') according to the rule 'safe'\r\n```\r\n### Expected outcome\r\n\r\nLabels are added at spots corresponding to those given in `manual`.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\n_No response_\r\n\r\n### Matplotlib Version\r\n\r\n589d3fbe13f0067a21804ab3f55ffeb07a839b90\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\ngit checkout","comments":[],"labels":["topic: units and array ducktypes","topic: contour"]},{"title":"Add axes.violinplot test from test_datetime.py","body":"## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nThis PR is modeled for #26864 ``Axes.violinplot``.\r\n\r\nImage of generated plot:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/96572616\/b6df0f39-98a7-4c05-bbc6-4b8474c34bcc)\r\n","comments":["From https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27485#issuecomment-1851059743:\r\n\r\n> All that said, I am now curious if at least the positioning values (`position` and `width`) work as desired (with the latter being a `timedelta`). Because while doing statistics on dates can get strange fast (not impossible, just have to be careful about knowing what you are doing), saying \"I want a violin plot comparing measurements taken on different dates\" seems completely reasonable.\r\n> \r\n> I think my leaning is to deprioritize fixing of units along the stats axis of these, but ask that this test case is written to focus on positions instead for the time being.\r\n\r\nWhile I agree that the \"primary\" piece of violinplot generally doesn't make sense\/doesn't work with dates, there is still _a_ piece that _should_ work (Though I admittedly haven't tested it)","@ksunden Not sure which \"piece\" you are talking about... Should I test again with ``width`` being a ``timedelta``? \r\nUnfortunately, keeping  ``positions = date_timedeltas`` and  ``widths = timedelta(days=5)`` didn't worked:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nfrom datetime import datetime, timedelta\r\nfrom collections import defaultdict\r\nimport pytest\r\nimport matplotlib as mpl\r\n\r\n@pytest.mark.xfail(reason=\"Test for violinplot not written yet\")\r\n@mpl.style.context(\"default\")\r\nclass TestViolinPlot:\r\n\r\n    def test_violinplot(self):\r\n        np.random.seed(42)\r\n        n_samples = 100\r\n        dates_values = [(datetime(2023, 1, 1) + timedelta(days=np.random.randint(1, 15)), np.random.randn())\r\n                        for _ in range(n_samples)]\r\n        values_by_date = defaultdict(list)\r\n        for date, value in dates_values:\r\n            values_by_date[date.toordinal()].append(value)\r\n        date_ordinals, values = zip(*values_by_date.items())\r\n        date_timedeltas = [datetime.fromordinal(date) - datetime(2023, 1, 1) for date in date_ordinals]\r\n        fig, ax = plt.subplots()\r\n        result = ax.violinplot(values, positions=date_timedeltas, widths=timedelta(days=5), showmeans=True, showextrema=True)\r\n        ax.set_title('Violin Plot with DateTime and Timedelta Positions')\r\n        ax.set_xticks(date_timedeltas)\r\n        ax.set_xticklabels([datetime.fromordinal(date).strftime('%Y-%m-%d')\r\n                           for date in date_ordinals], rotation=45, ha='right')\r\n        ax.set_xlabel('Dates')\r\n        ax.set_ylabel('Values')\r\n        assert result is not None, \"Failed to create violin plot\"\r\n```\r\n\r\nPytest Output:\r\n\r\n```python\r\n================================================= test session starts =================================================\r\nplatform win32 -- Python 3.11.5, pytest-7.4.3, pluggy-1.3.0\r\nMatplotlib: 3.8.2\r\nFreetype: 2.6.1\r\nrootdir: C:\\Users\\XXXX\r\nplugins: anyio-3.5.0, asdf-3.0.1, mpl-0.16.1\r\ncollected 1 item\r\n\r\nXXXX\\test_untitled2.py x                                                                             [100%]\r\n\r\n================================================= 1 xfailed in 0.50s ==================================================\r\n```\n\nEdit: Corrected grammatical mistakes.","Oops, I wrote the wrong test in the PR description. (The test gives an output (plus it doesn't deal with timedelta); my bad!)\r\nRemoved the test :)","`positions` is a `datetime`, `widths` is a `timedelta`:\r\n\r\n```python\r\nfrom datetime import datetime, timedelta\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\n\r\nnp.random.seed(19680801)\r\nn_samples = 100\r\nvalues = np.random.randn(n_samples)\r\nfig, ax = plt.subplots()\r\nresult = ax.violinplot(values, positions=[datetime(2023, 1, 10)], widths=[timedelta(days=10)], showmeans=True, showextrema=True)\r\n```\r\n\r\nGives:\r\n\r\n![violin](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2501846\/0303593a-f765-49e3-b00e-b795265d4e0d)\r\n\r\n\r\nThis shows a plot that is _centered_ on on a datetime and has a width given by the time delta.\r\n\r\nIt automatically sets the ticks and formatter for the X axis.\r\n\r\nSo it is demonstrating that units are adhered to by positions\/width.\r\n\r\nA more complete test would probably have multiple violins (possibly on the same Axes) with different widths\/positions\/etc.\r\n\r\nWhile the _values_ are _not_ handed datetime values (in any sense) here, which is one way violin _could have_ (but does not fully) supported units, the position and width (x-axis) values are supported.","@ksunden Could you please review?"],"labels":["topic: testing","topic: units and array ducktypes"]},{"title":"[ENH]: figure clear=True should clear events to prevent duplicates","body":"### Problem\n\nWhen I run this code in an interactive console\r\n```py\r\nfrom matplotlib import pyplot as plt\r\n\r\nplt.rcParams[\"backend\"] = \"TKAgg\"\r\nplt.ion()\r\nfig, ax = plt.subplots(num=\"My chart\", clear=True)\r\n\r\ndef on_click(event):\r\n    print(\"Hello\")\r\n\r\nfig.canvas.mpl_connect(\"button_press_event\", on_click)\r\n```\r\n\r\nand then rerun the code in the same interactive session (either in PyCharm, VS Code, or a Jupyter notebook) the same figure is reused (good) but the connected events are never removed, so I get a buildup of duplicated events.\n\n### Proposed solution\n\nI've written a solution for this, in my own utilities file, I track what the built in events are, and disconnect any user-added events, like so:\r\n\r\n```py\r\n# Connection IDs present in a new figure.\r\n_initial_cids = {}\r\n\r\n\r\ndef clear_events(fig=None):\r\n    \"\"\"\r\n    Clears user-added event handlers so that code can be re-run without\r\n    a build up of events.\r\n    Should be called after figure creation, before adding events\r\n    \"\"\"\r\n    fig = fig or plt.gcf()\r\n\r\n    # Get all the CIDs in the callback registry\r\n    cids = []\r\n    for cb_dict in fig.canvas.callbacks.callbacks.values():\r\n        cids.extend(cb_dict.keys())\r\n\r\n    if _initial_cids.get(fig.number) is None:\r\n        # These are the event CIDs for a new figure\r\n        _initial_cids[fig.number] = cids\r\n    else:\r\n        # We must be re-running code for an existing figure\r\n        # What CIDs have been added since the first time this was called?\r\n        added_cids = set(cids).difference(_initial_cids[fig.number])\r\n\r\n        # Disconnect those CIDs\r\n        for cid in added_cids:\r\n            fig.canvas.mpl_disconnect(cid)\r\n```\r\n\r\nWhich is then used like so:\r\n\r\n```py\r\nfrom matplotlib import pyplot as plt\r\n\r\nimport my_utils\r\n\r\nplt.rcParams[\"backend\"] = \"TKAgg\"\r\nplt.ion()\r\nfig, ax = plt.subplots(num=\"My chart\", clear=True)\r\nmy_utils.clear_events()  # <- clear any previously-added event handlers, below will re-add them\r\n\r\ndef on_click(event):\r\n    print(\"Hello\")\r\n\r\nfig.canvas.mpl_connect(\"button_press_event\", on_click)\r\n```\r\n\r\nI've been using this for a while and it works fine, which leaves me wondering a few things:\r\n* Am I doing something dumb, do other people not have this same problem, is there a more obvious solution that I'm missing?\r\n* If this is a sensible solution, could it be baked into Matplotlib?\r\n* If so, could it be run by default when `clear=True` is passed during figure creation? Or is there a legitimate case where a user wants to use an existing figure, has passed `clear=True`, but expects the events to not clear.","comments":["I think there are extremely valid reasons to desire current behavior, so I'm not totally convinced it _should_ change... \r\n\r\nFirst of all it is a question of what it means to \"clear\" a figure... the event handling is done on the `FigureCanvas`, not on the `Figure` object itself, and when cleared, mostly it means simply removing all artists from the figure, but keeping the current canvas (just it is now blank), including e.g. the canvas size and dpi.\r\n\r\nTo make things more complicated, `Figure.clear` takes a `keep_observers` argument (defaulting to `False`) which _does_ affect a _different_ `CallbackRegistry` object (one that lives on the `Figure` directly and is interacted with via `add_axobserver`, a method that does _not_ return a CID and does not provide any way of removing _other_ than `clear`, and only provides one signal \"_axes_change_event\", which is triggered on `sca` and `_remove_axes`. This sounds kind of like it could interact with the canvas callbacks, but it doesn't, and I think it is intended to be quite a bit narrower...\r\n\r\nPersonally I think it makes sense that canvas-local attributes (like the callbacks) are _not_ reset under this description of \"clear\".\r\n\r\nEven in the case of the built-in viewer applicatioan, we use the callbacks to build the UI to interact with the figure. It is not unreasonable to think that it is _likely_ that some users are extending the UI with additional callbacks that they _don't_ want wiped away when clearing out the figure. These callbacks are added at various places in backend code\/backend_bases\/widgets, etch and not in a way that you could e.g. clear out all of them and then easily add back in the default set.\r\n\r\nI don't particularly like having to keep track of \"user added\" event handlers... that seems more likely to cause problems than solve them to me (e.g. all of the cases where that cache should be invalidated). I also do not like the idea of relying on order of execution\/CIDs starting at 0 to identify the \"default\" set as is in the example here... that seems fragile to me. (We could probably do _better_ implementing such tracking internally... but not confident we could do _precisely_ what we want...)","OK so it sounds like `clear=True` clearing events is out, that's fair enough.\r\n\r\nMay I pivot the feature request then to suggest adding a way to clear events (e.g. via a new `clear_events` parameter as a sibling to `clear`).\r\n\r\nThe only reason my code keeps track of user-added event handlers is to remain robust over Matplotlib versions (in case the next version has extra\/fewer built in event handlers), because it's external to Matplotlib. If the behaviour were to be moved into Matplotlib, then obviously there could be a more direct way to remove them, as you say.\r\n\r\nBTW there's no reliance on order of CIDs here, the logic would work if MPL switched to UUIDs or anything else for CIDs, it's just looking for CIDs that weren't there immediately after a new figure was created, not CIDs that are larger or anything like that."],"labels":["New feature"]},{"title":"[Bug]:  Units behavior of `streamplot`","body":"### Bug summary\n\nAs seen in #27489 `streamplot` does not allow passing unitful data as x\/y\n\n### Code for reproduction\n\n```python\nfig, ax = plt.subplots()\r\n\r\nnp.random.seed(19680801)\r\nlimit_value = 30\r\n\r\ndate_array = np.array(\r\n        [datetime.datetime(2023, 12, n) for n in range(1, limit_value)]\r\n    , dtype=np.datetime64)\r\n#date_array_converted = mpl.dates.date2num(date_array)\r\nX, Y = np.meshgrid(date_array, date_array)\r\nU = np.random.rand(limit_value-1, limit_value-1)\r\nV = np.random.rand(limit_value-1, limit_value-1)\r\n\r\nax.streamplot(X, Y, U, V)\n```\n\n\n### Actual outcome\n\n```python\r\nTraceback (most recent call last):\r\n  File \"\/home\/kyle\/play\/gh27487.py\", line 22, in <module>\r\n    ax.streamplot(X, Y, U, V)\r\n  File \"\/home\/kyle\/src\/scipy\/matplotlib\/lib\/matplotlib\/__init__.py\", line 1472, in inner\r\n    return func(\r\n           ^^^^^\r\n  File \"\/home\/kyle\/src\/scipy\/matplotlib\/lib\/matplotlib\/streamplot.py\", line 91, in streamplot\r\n    grid = Grid(x, y)\r\n           ^^^^^^^^^^\r\n  File \"\/home\/kyle\/src\/scipy\/matplotlib\/lib\/matplotlib\/streamplot.py\", line 330, in __init__\r\n    if not np.allclose(x_row, x):\r\n           ^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/home\/kyle\/.pyenv\/versions\/edge\/lib\/python3.11\/site-packages\/numpy\/core\/numeric.py\", line 2241, in allc\r\nlose\r\n    res = all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan))\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/home\/kyle\/.pyenv\/versions\/edge\/lib\/python3.11\/site-packages\/numpy\/core\/numeric.py\", line 2345, in iscl\r\nose\r\n    dt = multiarray.result_type(y, 1.)\r\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nnumpy.exceptions.DTypePromotionError: The DType <class 'numpy._FloatAbstractDType'> could not be promoted by <c\r\nlass 'numpy.dtypes.DateTime64DType'>. This means that no common DType exists for the given inputs. For example \r\nthey cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'nump\r\ny.dtypes.DateTime64DType'>, <class 'numpy._FloatAbstractDType'>)\r\n```\n\n### Expected outcome\n\nUnits can be passed as at least X\/Ya (I could see requiring them to be the _same_ units... or even saying \"this type of plot _shouldn't_ support units\", but would want to be explicit about that.\r\n\r\nI do wonder a bit about `U\/V` and whether they should be specified in `delta` units or not? `quiver` can treat them as independent values or as delta values, I believe, but don't see such a distinction on stream lines.\n\n### Additional information\n\nMay be as easy as calling `_process_unit_info` on the inputs, I think.\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.9.0.dev821+gfa6be74127 (~main at time of reporting)\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\ngit checkout","comments":[],"labels":["topic: units and array ducktypes"]},{"title":"[Bug]: Units behavior of `tri*` methods","body":"### Bug summary\n\nAs seen in #27491, #27488, #27494, #27487\r\n\r\nIt appears that the `tri*` methods _do not_ actually properly handle units.\n\n### Code for reproduction\n\n```python\nfig, ax = plt.subplots()\r\nnp.random.seed(19680801)\r\nlimit_value = 30\r\n\r\nstartdate = np.datetime64(\"2023-12-01\")\r\n\r\nx_dates = startdate + np.random.randint(0, 15, size=(limit_value-1,)).astype(\"timedelta64[D]\")\r\ny_dates = startdate + np.random.randint(0, 15,size=(limit_value-1,)).astype(\"timedelta64[D]\")\r\n\r\nx_dates_converted = mpl.dates.date2num(x_dates)\r\n\r\ny_data = np.random.rand(limit_value - 1)\r\n\r\nz_data = np.sin(x_dates_converted) + np.cos(y_data)\r\n\r\nax.triplot(x_dates, y_dates)\r\nax.tripcolor(x_dates, y_dates, z_data)\r\n#ax.tricontour(x_dates, y_dates, z_data)\r\n#ax.tricontourf(x_dates, y_dates, z_data)\n```\n\n\n### Actual outcome\n\nPrior to (probably, though I didn't actually bisect it) #24522, the code would actually error, as it attempted to cast the x\/y arrays to float64 arrays.\r\n\r\nNow it will actually work to plot (seemingly even getting the actual values converted, though now that I think about it not sure _where_... my guess is that it is actually coincidental that they are `datetime64[D]` dtype which _happens_ to be the same scale\/epoch as mpl, but it is not actually being properly converted) however it does _not_ set the Formatters\/etc.\n\n### Expected outcome\n\nUnits are set properly (including axisinfo such as formatters).\n\n### Additional information\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.9.0.dev821+gfa6be74127 (~main currently)\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\ngit checkout","comments":["The `plot` calls in #27491 actually obscure the problem, which is part of why it looks like it works..."],"labels":["topic: units and array ducktypes","topic: tri"]},{"title":"Added test for tricontour in test_datetime.py","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.-->\r\nThis PR addresses the tricontour task in the Increase Unit Test Coverage Issue: https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26864. \r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [N\/A] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["topic: testing","topic: units and array ducktypes"]},{"title":" test_tripcolor (Issue #26864) plots with datetime on x-axis only , y-axis only, and both x- and y-axis","body":"\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\nAdded code to test the tripcolor plotting with np.datetimes, based on the tripcolor(x,y,z) example in the Matplotlib user documentation.  This is one of the numerous sub-tasks identified for testing various Axes._plottype_ ( where plottype= hist, scatter, violin, etc.) described in issue #26864\r\n\r\nGenerated plots look like the following:\r\n\r\n![Screenshot 2023-12-09 at 8 12 26 PM](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/3753118\/6aaba4be-b7d9-4fc1-9b39-7949774abbb3)\r\n\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"part of issue #26864\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [NA] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [NA] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [NA] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [NA] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["I think that this is actually relatively recent that it _works_ (thanks to probably #24522) but it does seem to work now, which is good. (I tested on a machine I hadn't pulled for a while on, and it didn't work, but after pulling it worked)\r\n\r\nThe second plot (`ax1`) looks odd, though... but I think that is just an aspect ratio\/different scales  on the axes problem, (the triangles are drawn essentially to maximize the minimum angle of the triangles, but that computation is done in x-y space, not in screen space so we are squishing some down so that they have smaller angles.) I don't think there is much to do here, as it is _correct_, but it did flag for me as odd.","Thats why I'd prefer the background data was retained, rather than be scrambled.  ","Further testing has shown that `tripcolor` does _not_ actually behave as we wish it to, issue opened in #27499 to track it.\r\n\r\nThe axis units are not updated (and in fact I'm pretty sure if we used a different scale (other than `D`) the values would be off, it just happens to match mpl's internal model)\r\n\r\nAs such I'm inclined to not merge this for the time being (until the underlying problems are fixed)\r\n\r\nThough perhaps remove the `plot` calls, since those hide the problem (by setting the axis units) so that this test is largely ready when the time comes. (along with some of the other edits)"],"labels":["topic: testing"]},{"title":"Defined the test_clabel function in the test_datetime file","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nThis PR is one of the issues identified by the larger issue #26864. These changes add a test for the clabel function. I have tested passing datetimes as input labels to the contours and the axis. ~~I could not think of a way nor do I think it to make sense to pass datetime objects as labels to either axis.~~\r\n\r\n### Edit: Attempt 3\r\nThis time I correctly generate the contour using datetime objects and directly pass it to the clabel function. Passing a contour that was generated where either X or Y values contain datetime objects functions correctly. I simply avoided doing any math related to the inputs to find Z. The [Hovomoller ](https:\/\/en.wikipedia.org\/wiki\/Hovm%C3%B6ller_diagram) diagram @rcomer mentioned helped me visualize how this kind of contour plot with dates would be used which helped me form an example.\r\n\r\nNote: I have NOT been able to specify the locations of the labels using the manual kwarg using datetime objects, please see discussion\/comments below\r\n\r\nNote: I did not use the example where x-axis was used as a date (commented in the code) because it was quite messy, instead I've provided the plot generated when datetime objects are used to set the y-axis of a contour plot.\r\n\r\n![download](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/62535124\/26d4bd2b-2593-4fd3-b370-f829740bd9f6)\r\n\r\n\r\n### Edit: Attempt 2\r\n\r\n1. Passing datetime objects to the clabel function works as expected and labels the contours as seen in both the above and below imgs\r\n2. Trying to generate contours using datetime objects and thus have the axis be labeled naturally as you would with numbers fails (any kind of math you do with numpy will fail).\r\n3. You can, however use ax.set_ticks and the ax.set_xticklabels functions, passing datetime objects directly if you wish, to label the x-axis of a contour plot. I do not know however, if this is what the original issue was attempting to test. In any case, the following is the plot produced:\r\n\r\n![download1](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/62535124\/f4998987-6275-4778-83c0-1c08bd777d41)\r\n\r\n### Original PR summary (Attempt 1)\r\nHere is the image generated by this code:\r\n\r\n![download](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/62535124\/12254c67-6ef9-4e5f-b570-d88cb62766bc)\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [N\/A] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\nI have struggled to run pytest due to a circular import issue. Instead, the image of the plot was generated using a separate script.\r\n\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["I think the test here is that the contour x and\/or y axes are datetimes, and that the manual placement of clabels can be specified with datetimes.  I'm actually skeptical that this works, but if not, would be good to document it.","How would I be able to test this? I've tried a few different things but only ran into errors.\r\n\r\nEdit: Perhaps this PR should be modified to just delete the test? I don't think what #26864 is attempting to test makes sense for clabel.","@AliAboelela123 I've not looked in detail, but it is possible to contour with `x`  or `y` as a datetime vector.  `z` should just be normal non-datetime data.  First, it would be madly useful to double check that `clabel` works at all for that case.  Second, `clabel` takes a `manual` kwarg, and the x, y version of that kwarg would ideally take datetime as the `x` value.  I'm not sure if it does or not.  \r\n\r\nhttps:\/\/matplotlib.org\/stable\/api\/contour_api.html#matplotlib.contour.ContourLabeler.clabel\r\n","One use-case for z datetimes is to plot a [map of monsoon onset](https:\/\/www.skymetweather.com\/content\/wp-content\/uploads\/2014\/05\/SW-MONSOON-FINAL.jpg), though I agree that having datetimes on the x- or y-axis (e.g. [Hovm\u00f6ller diagrams](https:\/\/en.wikipedia.org\/wiki\/Hovm%C3%B6ller_diagram)) is more common.  Perhaps it is worth testing both?","> I've tried a few different things but only ran into errors.\r\n\r\nIf the errors show that we don't currently support this, then that is useful information and part of what the issue is looking to find out.  So please post your findings :+1: ","I've made some updates, I don't expect this to be merged soon but rather just trying to continue the conversation. I summarized my findings in an edit","@AliAboelela123 I still think you are misunderstanding. The x array should be datetime _before_ sending to contour.  Subsequently clabel should be called with the manual kwarg.  ","> Perhaps it is worth testing both\n\nThe z data in contour is not run through unit machinery, so all we would be testing is that clabel takes an arbitrary string.  ","Ok I've tried to fix the PR by constructing the contour using datetime objects and passing that as input to the clabel function. I have not used the manual kwarg though. Do the current changes more accurately reflect what this test suite is attempting to test?","> Subsequently clabel should be called with the manual kwarg.\r\n\r\n> I have not used the manual kwarg though. Do the current changes more accurately reflect what this test suite is attempting to test?\r\n\r\nNo?  What are you not understanding about the \"manual\" kwarg? \r\n","```\r\n# Select specific x values\r\nselected_x_values = [x[0], x[6], x[12], x[18]]\r\n\r\n#Pair them with specific dates\r\nselected_dates = [dates[0], dates[3], dates[6], dates[9]]\r\n\r\n#Create pairs of (x, date)\r\nmanual = [(x_val, date) for x_val, date in zip(selected_x_values, selected_dates)\r\n```\r\nI tried to pass the above ^^ \"manual\" param to the clabel function but I get the following error:\r\n\r\n\"TypeError: Cannot cast array data from dtype('O') to dtype('float64') according to the rule 'safe'\"\r\n\r\nThis makes me think that the manual param expects the tuples to have float type i.e. coordinates in a plane rather than data type 'O' which I think means object and is referencing the datetime obj. I'm not sure if I'm doing something wrong or if this is the intended limitation of the clabel function which we are attempting to document.","I didn't test it myself, but if the manual clabel doesn't work then that would be a bug report issue.  Probably we should process the unit info for the clabel manual inputs.  \r\n\r\nThis PR could still test that labelling works when the x and y axis are datetimes.  Somewhat more trivial, but worth checking. ","I've opened #27525 for the `manual` argument of `clabel` not accepting units. This PR is possibly okay without testing that yet, but it currently has linting issues that need to be fixed."],"labels":["topic: testing","topic: units and array ducktypes"]},{"title":"Adding test for axes.streamplot using datetime","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nI've created a test for Axes.streamplot in test_datetime.py as requested in https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26864\r\nI tried using the normal datetime.datetime data type and passing that into np.meshgrid. However, it looks like np.meshgrid doesn't accept the datetime type and only accepts numerical arrays. I tried doing some research and looking into np.meshgrid further but could not find any way to pass in an array of datetime values. Therefore, I had to convert the datetime values into numerical values using date2num. This allows it to be passed into np.meshgrid to create the X and Y arrays which are then passed into the streamplot function.\r\n\r\nNote: I am new to working with matplotlib and also new to open-source contributions so I would really appreciate your support and advice on this PR.\r\n\r\nThe outputted graph is as follows:\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/54194957\/80496b82-f888-45b7-b612-11d2f4a408af)\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["topic: testing"]},{"title":"Added Axes.tricontourf Datetime Test","body":"## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nAdded code to test_datetime.py in order to test Axes.tricontourf as requested in https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26864\r\nBased on my testing, it seems that the tricontourf function does not support the datetime type, therefore I had to first convert it using date2num() to plot it correctly.\r\n\r\nI'm new to this repository and GitHub open source contributions in general, I would appreciate if you provide feedback or if you have any suggestions on how I should proceed. \r\n\r\nThe outputted graph is as follows:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/77181471\/d17f6c6d-4540-4233-8c02-e45927c40c3e)\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["topic: testing"]},{"title":"[Bug]: linelengths parameter of Axes.eventplot does not accept delta units","body":"### Bug summary\n\nBased on #27466, the `linelengths` parameter of `Axes.eventplot` does not accept delta units, such as `datetime.timedelta`. This should work, as `linelengths` is something similar to `width` in `bar`.\n\n### Code for reproduction\n\n```python\nfig, ax = plt.subplots(layout=\"constrained\")\r\n\r\nx_dates1 = np.array(\r\n    [datetime.datetime(2020, 6, 30), datetime.datetime(2020, 7, 22),\r\n     datetime.datetime(2020, 8, 3), datetime.datetime(2020, 9, 14),],\r\n    dtype=np.datetime64)\r\n\r\nnp.random.seed(19680801)\r\n\r\nstart_date = datetime.datetime(2020, 7, 1)\r\nend_date = datetime.datetime(2020, 10, 15)\r\ndate_range = end_date - start_date\r\n\r\ndates1 = start_date + np.random.rand(30) * date_range\r\ndates2 = start_date + np.random.rand(10) * date_range\r\ndates3 = start_date + np.random.rand(50) * date_range\r\n\r\ncolors = ['C1', 'C2', 'C3']\r\nlineoffsets = np.array([\r\n    datetime.datetime(2020, 7, 1),\r\n    datetime.datetime(2020, 7, 15),\r\n    datetime.datetime(2020, 8, 1)\r\n], dtype=np.datetime64)\r\nlinelengths = [datetime.timedelta(days=5), datetime.timedelta(days=2),\r\n               datetime.timedelta(days=3)]\r\n\r\nax.eventplot([dates1, dates2, dates3], colors=colors,\r\n             lineoffsets=lineoffsets, linelengths=linelengths)\n```\n\n\n### Actual outcome\n\n```pytb\r\nTraceback (most recent call last):\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/axis.py\", line 1766, in convert_units\r\n    ret = self.converter.convert(x, self.units, self)\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/dates.py\", line 1829, in convert\r\n    return self._get_converter().convert(*args, **kwargs)\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/dates.py\", line 1757, in convert\r\n    return date2num(value)\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/dates.py\", line 449, in date2num\r\n    d = d.astype('datetime64[us]')\r\nValueError: Could not convert object to NumPy datetime\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"\/home\/elliott\/code\/matplotlib\/foo.py\", line 31, in <module>\r\n    ax.eventplot([dates1, dates2, dates3], colors=colors,\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/__init__.py\", line 1472, in inner\r\n    return func(\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/axes\/_axes.py\", line 1353, in eventplot\r\n    lineoffsets, linelengths = self._process_unit_info(\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/axes\/_base.py\", line 2566, in _process_unit_info\r\n    return [axis_map[axis_name].convert_units(data)\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/axes\/_base.py\", line 2566, in <listcomp>\r\n    return [axis_map[axis_name].convert_units(data)\r\n  File \"\/home\/elliott\/code\/matplotlib\/lib\/matplotlib\/axis.py\", line 1768, in convert_units\r\n    raise munits.ConversionError('Failed to convert value(s) to axis '\r\nmatplotlib.units.ConversionError: Failed to convert value(s) to axis units: [datetime.timedelta(days=5), datetime.timedelta(days=2), datetime.timedelta(days=3)]\r\n```\n\n### Expected outcome\n\nThe plot should work, with some kind of date-based scale on the vertical axis.\n\n### Additional information\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\na2a28093ba836366e7ff0c6f1edb4fd98b47a04d\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\ngit checkout","comments":["`linelengths` _is_ passed through `_process_unit_info`, but does not get transformed for `timedelta` inputs:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/d48b2a88a6b2d4a47c339e08ee5ef414a35d038f\/lib\/matplotlib\/axes\/_axes.py#L1353-L1354\r\n\r\n(And then the floats for the offsets, which _are_ transformed, are attempted to be combined with `timedelta` objects later on)","It should maybe be sent through something like `_convert_dx`?"],"labels":["topic: units and array ducktypes"]},{"title":"Fixed _has_alpha_channel function to work with hex and tuple colors","body":"## PR summary\r\nThis PR fixes bug #27321. The _has_alpha_channel function didn't work for hex strings and tuples because it just checked for decimal strings of length 4 (RGBA). The new implementation cases on the three different possible inputs (decimal, hex, and tuple) and determines if the input is a valid color that has an alpha channel. For checking hex colors, the function checks if all the symbols are hex values (0-9, A-F), and if the string is the correct length. Since hex values can be represented with the prefix \"#\" or \"0x\", the input strings have to be of length 9 or 10 (prefix + 4 bytes or 8 hex values for all channels).\r\n\r\n## PR checklist\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n## Note\r\nThis PR doesn't pass the MyPy Stubtest, but passes all of the others. I'm not entirely sure how to get it to pass that, although it doesn't seem like too big of an error.","comments":[],"labels":["status: duplicate"]},{"title":"Doc: follow up on histogram normalization example","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n\r\nPer https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27426#issuecomment-1844238677, PR aimed at reducing some of the [cognitive load](http:\/\/swcarpentry.github.io\/swc-releases\/2016.06\/instructor-training\/11-load\/) required to understand this example by adding:\r\n * subheadings pulling from the bullet list at the top of the page,\r\n   * particularly pulled out\/made each parameter the focus\r\n   * moved examples to the bottom -> that way focus is on Matplotlib functionality  \r\n *  add titles to plots to guide folks on what they're supposed to be looking for \r\n * add an alpha to the data so that it's not competing with the histogram for visual focus. \r\n * deemphasizing labeling in the code because the point of this example is supposed to be histograms\r\n\r\nAs mentioned in https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27426#issuecomment-1841731787, reducing cognitive load makes the example more accessible (in a DEI way), which is in keeping with our CoC and mission. Universal design principals are that material that is more accessible tends to lead to better learning outcomes even for folks who don't need the accommodation. \r\n\r\nI also moved it to tutorials because on https:\/\/matplotlib.org\/devdocs\/ we've started making the distinction that \r\n* demos -> plot types, examples\r\n* usage -> user guide, tutorial\r\n\r\nThis document is very much focused on why and how normalization works and when to use it rather than a demonstration of features (though this PR revision emphasizes the parameters) and I think the more we start scoping things the easier it'll be to start building identities around each section of the docs, which hopefully will help w\/ discoverability. \r\n\r\n\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["ToDo: I wanna pull out the one line that's the histogram before or after the code block to more clearly isolate\/explain how to do the things. - done ","I have several substantial concerns about this.\r\n\r\nThe bulk of these changes were proposed and rejected as part of the discussion in #27426.  I don't see any discussion of what is different now.\r\n\r\nIf this content is moved, it should probably be moved to \"exp}lain\" not \"tutorial\" as it is (was) an explanation of what each of the (many) imports to `hist` do (https:\/\/diataxis.fr\/explanation\/ vs https:\/\/diataxis.fr\/tutorials\/).\r\n\r\nWhile discussion of cognitive load is reasonable, I have concerns with it being used as the primary justification of these changes.  While in some cases increasing the structure can help, introducing the wrong structure can also make it worse.  \r\n\r\nPreviously the two top level sections were \"I want to change the bin edges\" (which is only `bins`) and \"I want to change the meaning of the bin values\" (which is `density` and `weights`).   In this case I actually think these changes increase cognitive load by leaning too far into a parameter per subheading and by moving the most clarifying text abou why things behave the way they to into \"case studies\".","> The bulk of these changes were proposed and rejected as part of the discussion in https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27426. \r\n\r\nAs linked to at the very top of this PR, @jklymak said to put these changes in a follow up PR:\r\n\r\n> I'd suggest further changes could be follow-up PRs.\r\n\r\n> \"I want to change the meaning of the bin values\" (which is density and weights). In this case I actually think these changes increase cognitive load by leaning too far into a parameter per subheading \r\n\r\nThe reason for separating them is that the Matplotlib library provides them as separate independent keywords so someone scanning this doc can see \"oh density, and here's an explanation\", \"oh weights, here's an explanation\" -> that separation enforces that these are distinct parameters used to achieve distinct goals & that's why the API provides both as distinct entities. \r\n\r\n\r\n> and by moving the most clarifying text abou why things behave the way they to into \"case studies\".\r\n\r\nThe explanations of what weights does and what density does are still under the respective parameter subheadings, so can you please explain what you mean here? Frankly I think the \"why I want to change the meaning of the bin values\" is completely out of scope for the Matplotlib docs because that's data\/stats, but I can see the value in it so I left it as case studies. \n\nI'll flesh out that intro to that section\/change the title to make that clearer, but I think for the Matplotlib docs we want to separate the \"how does it work\" from the \"why do I want to do this\" b\/c the why is different for every user and many users know their why but still need to know our how. \n\nETA: also I think it's a good idea to put back a higher level \"computing bin values\" before the density and weights section and I'll put that back. \r\n","> If this content is moved, it should probably be moved to \"exp}lain\" not \"tutorial\" as it is (was) an explanation of what each of the (many) imports to hist do (https:\/\/diataxis.fr\/explanation\/ vs https:\/\/diataxis.fr\/tutorials\/).\r\n\r\nI could see that, in that the example it's most similar to is https:\/\/matplotlib.org\/devdocs\/users\/explain\/artists\/imshow_extent.html and I don't mind it moving there. \r\n\r\nBut also, the rewrite is in line with  the diataxis 'tutorial' style \r\n>  The principles outlined below - repetition, action, small steps, results early and often, concreteness \r\n\r\nit works through the parameters one by one building them up, with repetition and concrete images at every step and It breaks up the explanations into very small chunks paired with  immediate concrete examples. Even the pulling out the code before the larger examples is to prime the reader to see it in the larger example-> again repetition + small steps.  (ETA: it's even written in the *we* and that was @jklymak )\r\n\r\nWhich, a related but separate discussion is untangling tutorials from user guide because currently they're explicitly intermixed in a way where it's very unclear which one a user should go to. ","> The reason for separating them is that the Matplotlib library provides them as separate independent keywords so someone scanning this doc can see \"oh density, and here's an explanation\", \"oh weights, here's an explanation\" -> that separation enforces that these are distinct parameters used to achieve distinct goals & that's why the API provides both as distinct entities.\r\n\r\nThe _original_ goal of this example was to give people an idea how to make certain types of histograms, not explain the API, which is what the API docs should do.  In particular, the original goal was to document how you get the probability mass function, since people are often confused that is not what `density=True` provides.  \r\n\r\nAn example of using *weights* for other uses would probably be fine, since the scope of the example broadened somewhat as it was composed.  \r\n\r\nI don't think this belongs in Tutorials.  Having Tutorials creep back into being a catchall for things we want to explain would be an organizational step backwards.  I think it belongs in Examples, because we do not have in-depth examples like this in the Users guide, and adding a bunch of very specialized ones like this would be hard to do in a balanced fashion.  ","> . I think it belongs in Examples, because we do not have in-depth examples like this in the Users guide, and adding a bunch of very specialized ones like this would be hard to do in a balanced fashion.\n\nI definitely don't think it belongs in the user guide - but I also don't think that the imshow guide belongs in the user guide either. You said yourself elsewhere that you think of the gallery as short stack overflow style demos -> which an explanation of histogram normalization is not.\n\n> Having Tutorials creep back into being a catchall for things we want to explain would be an organizational step backwards. \n\nWhat I'm proposing is tutorials be the place for long form explanatory tutorials of how to use our plotting methods...which yes means pulling some things back from the user guide. When I'm thinking clean separation and scope, my mind goes to: \n\n* User guide: key concepts\/core objects-what is a figure\/axes\/formatter\/locator\/norm\/colormap\n* Tutorial: how do I use the histogram method? \n* Gallery: here's a demo of the pmf with a link back to the histogram usage guide\/tagged plot_type:histogram like the usage guide so that  they'll show up together.\n\nGranted, what I really would like is to maybe do this sorting out as another GSOD, but there's no way it'll be successful if we can't compromise somehow. I think for the most part the bulk of the work ends up being cleaning up framing so that it's consistent within a section, with some moving around based on agreed upon content guidelines.\n\n> The original goal of this example was to give people an idea how to make certain types of histograms, not explain the API, which is what the API docs should do. \n\nI think it's nice to have docs that show how all the API parameters work in one place\/how to use those parameters (this is a thing folks ask for a lot - how do I use pie) & that in the API docs this kinda step by step w\/ pictures would be majorly distracting\/annoying for folks who already know how to use hist & just want to double check an argument - which that's the instructive vs reference distinction.\n\n> In particular, the original goal was to document how you get the probability mass function, since people are often confused that is not what density=True provides\n\nThen it should have been scoped to that, but the scope grew and it became a tutorial on histogram binning. Fundementally what I'm aiming at here is reframing this document so that it's primarily focused on library functionality. I was very careful to not remove any of the content you wrote. \n","> What I'm proposing is tutorials be the place for long form explanatory tutorials of how to use our plotting methods...which yes means pulling some things back from the user guide. When I'm thinking clean separation and scope, my mind goes to:\r\n> \r\n> * User guide: key concepts\/core objects-what is a figure\/axes\/formatter\/locator\/norm\/colormap\r\n> * Tutorial: how do I use the histogram method?\r\n> * Gallery: here's a demo of the pmf with a link back to the histogram usage guide\/tagged plot_type:histogram like the usage guide so that  they'll show up together.\r\n\r\nI don't agree with that as an endpoint for the user guide.  The user guide should be how to use Matplotlib, as completely as we can manage. To me, that eventually _would_ include \"how do I use the histogram method\".    Tutorials should be like the \"Lifecycle of a plot\" variety, or other online tutorials that take the reader on a complete guided journey.  Examples should be standalone, and relatively short. \r\n\r\nThis particular example is long, so I agree it is borderline.  An advantage to leaving it in \"examples\" is that it puts all the `hist` things in one spot.  If one were to make a \"hist tutorial\" it would ideally _also_ discuss styling the histograms, and whatever else is in the hist examples.  Eventually with enough such method-based tutorials, you could imagine migrating them to the user guide.  \r\n\r\n> Then it should have been scoped to that, but the scope grew and it became a tutorial on histogram binning.\r\n\r\nNot clear that is a problem - you need to understand the binning if you were going to understand the density arguments because they interact so strongly.  I mean I guess there could have been two separate examples, but that doesn't seem necessary ","> Tutorials should be like the \"Lifecycle of a plot\" variety, or other online tutorials that take the reader on a complete guided journey.\n\nYeah, I'm proposing complete guided journeys of the plotting methods. The feedback I've consistently heard on the lifecycle tutorial is that we ruined what made it good & now nobody understands what it's for.  And what do you mean by other online tutorials? \n\nWhat I'm struggling with is what would be the paragraph at the top of \"user guide\" and on top of \"tutorial\" telling the user what they could expect from each page. \n\nGranted, I also wouldn't mind getting rid of tutorials all together if we can't come to a consensus on its purpose.\n\n> An advantage to leaving it in \"examples\" is that it puts all the hist things in one spot. \n\nWe can also use tags to do that. \n\n> If one were to make a \"hist tutorial\" it would ideally also discuss styling the histograms, and whatever else is in the hist examples.\n\nSort of the intent behind restructuring in this way - it provides a natural way to slot in the other hist parameters.\n\n> You need to understand the binning if you were going to understand the density arguments because they interact so strongly. \nI mean I guess there could have been two separate examples, but that doesn't seem necessary\n\nTwo separate examples means that there's a binning example that we could link to\/cross reference across every example where it may be helpful to know about binning. If I was gonna draw an n-level deep toctree of the docs, the implication would be that binning is a topic that's important only for normalization because that's where it's explained - a big motivator for a lot of what I'm proposing is to try and prevent users from conflating topics.\n\nETA: one of my major meta motivations is that I think it's much easier to see what docs are missing if we've got our docs well organized. And to organize our docs, we have to collectively decide on what we think should go where. \n\nETA 2: Granted, I also think we've had so many back and forths on this and are at a total impasse & it's probably more constructive to hash this out on a call in January at this point. ","Also, just for the record, I'm not really married to the exact user guide\/tutorial bins that I'm proposing here - @melissawm and @esibinga weren't super keen on my exact division either. I'm concerned about putting plotting function tutorials in user guide b\/c a) I think we agree that they should be written as tutorials even if we disagree on what that means, b) we've got 60 odd methods, 30 or so in the plot type gallery, and that's a lot of content to add the guide c) my meta proposal is that the guide cover the topics that apply to an arbitrary plot -> figure\/axes\/formatting\/etc - while plotting method usage is guided by individual needs (for example, I've never needed to make a contour plot, but yes under this definition something like the imshow guide would stay under user guide but expanded to make clear it applies to all the AxesImage plot types, which # ties back to underlying object as the organizing principal). \r\n\r\nMy priority is that each section of the docs have a clear distinct identity, scope, & pedagogical approach (ETA: which is what the diataxes approach is fundementally advocating) so that we can sort documents, improve cohesiveness within a section, and reduce duplication\/redundancy.\r\n\r\nThe motivation for this PR was that the contents of the  document changed scope within the original (pulling back to being the histogram features example this replaced)  & this attempts to update the structure to match that change in scope. Functionally, this is what I've been doing with basically all my doc PRs lately - sorting and binning to make the distribution of docs\/topics\/content cleaner.  ETA: This is b\/c I had thought that there was long standing consensus that the major issue w\/ the docs is the information architecture, so I was approaching this PR w\/ that in mind. I mostly do not have major concerns w\/ the original PR as a standalone document, but within the context of the rest of the documentation I think it is too much a tutorial on histogram to be an example (bins don't need to be explained for a demo of using hist for norming) but as a tutorial is too focused on the statistics\/why use histograms and not enough on library functionality and I'm fairly certain our goal is not to recreate https:\/\/www.itl.nist.gov\/div898\/handbook\/eda\/section3\/histogra.htm","makes more sense to rework this w\/ consolidating the other histogram examples in https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27569 so shifting back to draft. "],"labels":["Documentation"]},{"title":"[Doc]: add examples of what each type deprecation means ","body":"### Documentation Link\r\nhttps:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html#deprecation\r\n\r\n### Problem\r\n\r\nThe deprecation docs are fairly terse in terms of which decorator gets applied where\/how. \r\n\r\n### Suggested improvement\r\n\r\n@QuLogic had a really nice write up with examples of how to do deprecation in #26865 and I think it'd be great to fold that into our deprecation guide. \r\n\r\n Especially if deprecation is gonna be a standing sprint\/good first issue, it's nice to be able to point to a page in docs and not have it mixed up w\/ issue information;. ","comments":["> Especially if deprecation is gonna be a standing sprint\/good first issue\r\n\r\nHopefully only *expiring* deprecations can be made a standing sprint\/good first issue.","To be clear, the examples in #26865 are about expiring not adding deprecations.  Having done it once, I am not sure I would want to use expiring deprecations as a sprint issue again.\r\n\r\nThe helpers mentioned are well documented in the source (e.g. https:\/\/github.com\/matplotlib\/matplotlib\/blob\/7ba90feacdecb9c99fb6aafd79acebc6c3f28d66\/lib\/matplotlib\/_api\/deprecation.py#L50-L91 ) but we do not put them in the html docs (which I think is a reasonable choice, we really do not want people outside of our code base to use these).  I also do not think it is too big of a lift to expect someone who is adding a deprecation to find an existing use in the code base \/ git history if they want to find an example usage.  \r\n\r\nOn net I think this is sufficiently documented for its audience.  ","> but we do not put them in the html docs\n\nhttps:\/\/matplotlib.org\/stable\/devel\/contribute.html#expire-deprecation\n\nThough I would argue to document them in the docs if you don't want to expand this section of the docs.\n\n> also do not think it is too big of a lift to expect someone who is adding a deprecation to find an existing use in the code base \/ git history if they want to find an example usage.\n\nThe advantage of @QuLogic's write up, and integrating it into the docs, is that it's got framing\/context + example. What is the benefit of making them chase down an example that they may not be sure is a good example? \n\nETA: also my thinking on this is that this is already written to serve a need & not having it is more likely to either mean folks bounce cause they're not sure where to start or they ask us these questions and we ad-hoc write this guide."],"labels":["Documentation: devdocs"]},{"title":"Attempted to add test_pcolorfast in test_datetime.py","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nAttempted to add code to `test_pcolorfast` in `test_datetime.py` as requested in #26864\r\nBased on my researches and shallow understandings of the code, the original function `pcolorfast()` does not seem to directly support inputs of type `datetime.datetime` or `numpy.datetime64`; therefore I have used `date2num()` to make the graph print correctly.\r\nI am (almost) new to GitHub and entirely new to OSS contributions so I apologize ahead if I have made mistakes or caused trouble. Please feel free to point out my flaws and mistakes so that I can correct them.\r\n\r\nThe outputted graph is as follows:\r\n![pcolorfast_plot](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/144465361\/3cb11718-c337-404b-8d37-f5a4fc9605eb)\r\n\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Wait... what's happening with all the test fails...?\r\nI will be very grateful if someone can briefly explain it for me; thanks!","Thank you for working this!\r\n\r\nOne of the explicit goals of writing these tests was in fact to _find_ places where our unit handling could be better\/methods that _should_ participate in unit conversions but don't. Could you create an issue to help us track it?\r\n\r\nWe may not merge this PR before that is resolved, since actually passing `datetime`s in is intended to work and is what we wish to be testing here (though I don't think we should _remove_ the test as not wanted because we will want it eventually.)","I've opened #27526 to track the missing unit handling in `pcolorfast`."],"labels":["topic: testing"]},{"title":"Added default kwargs values to figure.suptitle() in rcParams and inheritance for function","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\n-->\r\nThis PR addresses issue #24090 which requests to added default kwargs parameters to use for function figure.suptitle() in rcParams. Basic default parameters have been added and adapted to use in inheritance. PR needs to be reviewed and can closes #24090. \r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #24090\" is in the body of the PR description to [[link the related issue](https:\/\/github.com\/matplotlib\/matplotlib\/issues\/24090)](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n","comments":["Thanks for this! \r\n\r\nSome quick notes:\r\n\r\nIt seems like to naming is inconsistent in the files. For example: `figure.title_locy`, `figure.titleloc_y`, and `figure.title_y` are all used for what I believe is the same parameter. I think there needs to be some discussion about the \"best\" name. (Personally, I think `figure.title.y`, but since there is, e.g., `figure.titlesize` already, it doesn't really make sense to change format.)\r\n\r\nThis will also need a \"What's new\"-note.","Thanks for catching that. I settled for title_x and title_y as a good mix of both naming formats.","there is still a mix of `title_ha` and `titleha`, causing CI to fail"],"labels":["topic: rcparams","status: needs rebase"]},{"title":"Added test_loglog in test_datetime.py","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nAdded the test_loglog method in test_datetime.py \r\nThis PR is for `Axes.loglog` in #26864\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/50563098\/d5c1b17c-8a8a-4bc2-bb7f-2cceb7db1eda)\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [N\/A] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [N\/A] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["I will reassert my comment from the semilog version of this (#27320):\r\n\r\n> Yes, log\/semilog\/etc axes with datetimes do not make much sense, as they are based on the 1970-01-01 zero mark for computing the scale, and so you are rarely working on multiple orders of magnitude where log scaling makes sense (and even when you are, the zero mark is completely arbitrary and unlikely to be related to your data).\r\n> \r\n> Given that the implementation of semilog[xy] is really just some kwarg management over set_[xy]scale plus plot, the latter of which is already tested with datetimes and the former of which is tested pretty thoroughly independently, I think my vote would be to just omit the tests from the datetime file.\r\n> \r\n> If we were to keep it (which, again, I'd argue we likely don't), just to prove that nothing about units prevents it from being applied, this is actually the case where using dates closer to 1970 (and spanning several decades, most likely) is likely beneficial, as it would make the scale transform visually apparent.\r\n","```python\r\nmpl.rcParams[\"date.converter\"] = 'concise'\r\nfig, (ax1, ax2, ax3) = plt.subplots(3, 1, layout='constrained')\r\nx = np.arange(np.datetime64('2015-12-01'), np.datetime64('2023-12-06'))\r\ny = 10 ** np.linspace(0, 4, len(x))\r\nax1.loglog(x, y)\r\nax2.loglog(y, x)\r\nax3.loglog(x, x)\r\n```\r\n\r\nAs @ksunden points out, this is hardly great for larger time spans, with minor ticks being mislabeled.  \r\n\r\n![boo](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1562854\/0d05dbce-54b5-4c38-a635-e607560d06e2)\r\n\r\nOTOH, it doesn't spit out an error message, so maybe thats OK for the purposes of these smoke tests?\r\n","I updated the PR to have wider date range input"],"labels":["topic: testing","topic: date handling","topic: transforms and scales"]},{"title":"Added test_pcolormesh in test_datetime.py","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nAdded code for `test_pcolormesh` in `test_datetime.py` as requested in #26864 \r\n\r\n(old commits in this branch have already been merged #27401, only new additions are shown - the test_pcolormesh test)\r\n\r\nImage of the plot:\r\n![plot](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/136858218\/074cac0a-4a01-4f6f-bcd9-96622cba5efd)\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] resolves part of #26864\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["topic: testing"]},{"title":"Added test_hist2d","body":"## PR summary\r\n\r\nI have added a test for Axes.hist2d in lib\/matplotlib\/tests\/test_datetime.py that tests with randomly created data if the data correctly plots. It is similar to the Axes.hist method of testing, as it uses similar generated data and methods.\r\n\r\nThis addresses the Axes.hist2d task from https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26864.\r\n\r\nBelow is a picture of the generated plots.\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/66811124\/a6fca0ff-46c0-4402-983a-71e9f4cc00f6)\r\n\r\n## PR checklist\r\n\r\n- [N\/A] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [N\/A] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines","comments":[],"labels":["topic: testing"]},{"title":"[Bug]: get_tick_params on xaxis shows wrong keywords","body":"### Bug summary\n\n`get_tick_params` on xaxis shows yaxis keywords\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax = plt.subplots()\r\n\r\nprint(ax.xaxis.get_tick_params())\n```\n\n\n### Actual outcome\n\n{'left': True, 'right': False, 'labelleft': True, 'labelright': False, 'gridOn': False}\n\n### Expected outcome\n\n{'bottom': True, 'top': False, 'labelbottom': True, 'labeltop': False, 'gridOn': False}\n\n### Additional information\n\nThe current implementation of `get_tick_params` tries to invert the [`keymap`](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/eb02b108ea181930ab37717c75e07ba792e01f1d\/lib\/matplotlib\/axis.py#L1071-L1084) dict which is impossible because this dict is a 1:n relationship (multiple keys with the same value).  \r\nThis went unnoticed because the [test_axis_get_tick_params](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/379989e9529b9c98dc866a338b272beedf1f697a\/lib\/matplotlib\/tests\/test_axes.py#L6794) didn't actually test anything: the expected value is _calculated_ in the test using the very same algorithm as the function under test.\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.8.2\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nNone","comments":[],"labels":["topic: ticks axis labels"]},{"title":"Fix get_tick_params","body":"## PR summary\r\nFix get_tick_params\r\n- show values for x axis too\r\n- fix nonfunctional test\r\n- move axis tests from test_axes.py to test_axis.py\r\n- make note in `get_tick_params` docstring more precise\r\n- add `GridOn` to `set_tick_params` as it's always returned by `get_tick_params`, so it would be illogical if you couldn't set the paramter in the setter\r\n\r\nCloses #27416.\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["This re-write of the Note in the [get_tick_params](https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.axis.Axis.get_tick_params.html#matplotlib.axis.Axis.get_tick_params) documentation was caused by this example: \r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib as mpl\r\n\r\nwith mpl.rc_context({\"ytick.labelcolor\": \"blue\"}):\r\n    fig, ax = plt.subplots()\r\n\r\nfor label in ax.get_xticklabels():\r\n    label.set_fontweight(\"bold\")\r\n\r\nplt.xticks(ha=\"left\")\r\n\r\nfig.text(0.2, 0.7, \"\\n\".join([\"___x___\"] + [f\"{k}: {v}\" for k, v in ax.xaxis.get_tick_params().items()]), va=\"top\")\r\nfig.text(0.6, 0.7, \"\\n\".join([\"___y___\"] + [f\"{k}: {v}\" for k, v in ax.yaxis.get_tick_params().items()]), va=\"top\")\r\nplt.show()\r\n```\r\n\r\n![get_params](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/19879328\/b726e452-6363-41aa-a0a8-083d8513e9fb)\r\n\r\nThis shows that\r\n- neither the label color nor the horizontal alignement are returned by `get_tick_params` although the were not set via the set_* methods on the individual tick objects\r\n- the bold fontweight set on the individual tick labels is also applied to __new__ labels (the warning at [`get_major_ticks`](https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.axis.Axis.get_major_ticks.html#matplotlib.axis.Axis.get_major_ticks) is correct as it says that there's _a risk_ that the changes will not survive, it doesn't claim that these changes only apply to current labels.\r\n"],"labels":["topic: ticks axis labels"]},{"title":"Add test_quiver in test_datetime.py","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\nI have added a datetime smoke test for Axes.quiver in lib\/matplotlib\/test\/test_datetime.py.\r\nThis addresses the Axes.quiver task from https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26864.\r\n\r\nThe image below is the plot generated from my example code.\r\n![quiver test](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/112187975\/46e81507-0d50-4dac-b38a-2cc3ca5b20de)\r\n\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [N\/A] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [N\/A] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["topic: testing"]},{"title":"proposed fix for transparency issue #27173","body":"Suggestion by @Wuzuw, another friend and me for the closing of #27173\r\n\r\nWe suggest to check if the pillowwriter is used. If so we use the fix by @tacaswell in #19040 and if ffmpeg is used we use the standard rgba-values because ffmpeg can deal with transparency.","comments":[],"labels":["topic: animation"]},{"title":"[Doc]: Move non user guide related content out of `\/users`","body":"### Problem\r\n\r\nGiven that `\/doc` is now the root folder\/index, a lot of the indexing that used to live on the `users` index page is now on the `doc\/index` and it's a little easier to find things when the code structure matches the indexing. Also currently it's a little hard to define what we mean by user guide and scoping the contents of the folder can help in defining the purpose. \r\n\r\n### Suggested improvement\r\n\r\n* `\/users\/project` -> `\/doc\/project` \r\n* `\/users\/installing`->`doc\/installing` \r\n* `\/users\/{generate_credits, github_stats, *_whats_new, release_notes*}` -> `\/doc\/release`\r\n* `\/getting_started\/* -> quickstart guide\r\n* `\/users\/users_explain\/*` -> `\/users`\r\n\r\n#### Consensus\r\n\r\nAs discussed on the call, the rough consensus is this organization makes sense but should be done in stages, roughly one folder at a time. Largest concern was getting all the [redirects](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#move-documentation) correct and making sure that any links and instructions related to those docs are updated as needed. The stages are:\r\n\r\n- [x] move the `\/project` folder up ->https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27560\r\n- [ ] move the release related folders and docs {generate_credits, github_stats, *_whats_new, release_notes*} into a folder and up one level\r\n- [ ] move the `\/installing` folder up -> (might be a good chance to change the name to install?)\r\n- [ ] merge the contents in `users\/getting_started` into the `gallery\/users_explain\/quickstart guide` and remove the `getting_started` folder\r\n- [ ] remove `doc\/users` and rename `gallery\/users_explain` to users \r\n\r\n#### Motivation\r\n\r\n* currently `\/users\/index\/` is scoped to `users_explain` + `getting_started`, this would be matching structure to stated structure, in turn making it easier to find where a doc is to change it\r\n  * also means we can remove the symlink, which currently trips folks up when trying to edit documents under \/user \r\n* the contents under `\/project` are I think version independent (though we may want to keep the versioning on the site b\/c the historicity is also important) but also for the most part should not be changed w\/o consensus\/streering-council sign off and it's a little easier to communicate that if it's not lumped with other user docs\r\n* I'm half\/half on `\/doc\/install` b\/c I understand why it would be inside a users guide but we also write those documents as a more general installation guide\/reference for both \r\n* there are a lot of files related to the release process and unlike `\/api\/changes` it's not clear why they are here. \r\n","comments":["@story645 I can start working on this now!"],"labels":["Documentation","Documentation: website"]},{"title":"[ENH]: Good looking date\/time axes with primary and secondary annotation and interval annotation","body":"### Problem\n\nThe default matplotlib date\/time axes are difficult to customize to look professional. Date values usually denote time intervals (days, months, years), but matplotlib default date labels are attached to single ticks that mark the start of that interval. And since all date\/time annotations are usually put on a single axis, the labels get long, and often have to be plotted at an angle, which does not look pleasing and makes the plots more difficult to read.\n\n### Proposed solution\n\nGood-looking and easy to read date\/time axes need implementation of two features:\r\n- Interval labels - where the labels for years, months, week numbers and days are drawn between two adjacent tick marks\r\n- Primary and secondary axes that are vertically stacked, so that the top ticks\/labels can denote a smaller unit of time than the bottom one.\r\n\r\nSome excellent examples of the look that can be achieved using these two features can be seen in the cookbook of the Generic Mapping Tools: https:\/\/docs.generic-mapping-tools.org\/latest\/cookbook\/options.html#cartesian-time-axes\r\n\r\nThe \"interval labels\" feature could also be made reusable for custom interval annotations, like in the further example on that website: https:\/\/docs.generic-mapping-tools.org\/latest\/cookbook\/options.html#custom-axes","comments":["Does `ConciseDateConverter` address your \"primary and secondary axes\" point?\r\nhttps:\/\/matplotlib.org\/stable\/gallery\/ticks\/date_concise_formatter.html","No, `ConciseDateConverter` does not add a secondary axis, only a single additional label. I find the examples not very intuitive to read, as this additional label is not a commonly used convention. The reader first has to parse what it means. For the example where the time series ends on April 1, 2005, it gets particularly confusing, since none of the dates displayed on the axis actually fall inside that month.\r\n\r\nThe examples with the true primary and secondary axes in the Generic Mapping Tools documentation on the other hand, convey a much more conventional calendar-like approach to displaying dates and times, that should be clear to readers of the plots much more quickly.\r\n\r\nPerhaps the functionality of `ax.secondary_xaxis()` could be reused for this in matplotlib, when the secondary axis is put on the same side as the primary and provided with an additional offset.\r\n\r\nAnother example implementation of these two features, with an automatic selection of the appropriate ticks and labels, is available in a web application I have built: https:\/\/spaceweather.knmi.nl\/viewer\/. Here, the interval annotation feature was achieved by simply adding an offset to the labels, relative to the ticks, and changing their alignment (from centred to left-aligned). Having a choice to center those interval annotation labels between two ticks would be even better.\r\n\r\n","We do not currently have a way to add an extra level of ticks.  \r\n\r\nYou can fake this with a secondary x axis or with minor and major ticks on the main axis.  If I were doing it, I'd place a secondary xaxis at y=0 and just add carriage returns to the tick labels rather than messing with offsets by hand. \r\n\r\nLabelling time in general is quite hard and there will always be taste differences.  If your taste differs from the available defaults, you are going to have to do some work.   \r\n\r\nThe general request for multiple label levels is the same as https:\/\/github.com\/matplotlib\/matplotlib\/issues\/6321","Thanks for those considerations. The [Stack Overflow example](https:\/\/stackoverflow.com\/questions\/19184484\/how-to-add-group-labels-for-bar-charts) mentioned in #6321, already implements both dual labels and interval labelling with some additional code.\r\nSo then I think a good solution would be an alternative to [date_concise_formatter.html](https:\/\/matplotlib.org\/stable\/gallery\/ticks\/date_concise_formatter.html), which implements these features \"behind-the-scenes\" to offer two levels of annotation, and adds some sensible defaults based on the plot width and time interval for casual users, as well as offers parameters to customize the primary and secondary date\/time annotations.\r\n\r\nI agree that labelling time is hard, and the above would take a considerable implementation and fine-tuning effort. But I don't think the main differences between the examples under the links I gave above on the one hand, and those in [date_concise_formatter.html](https:\/\/matplotlib.org\/stable\/gallery\/ticks\/date_concise_formatter.html) and the current matplotlib default on the other, come down purely to a matter of taste. I think the readability\/usability differences can be considered objectively."," > which implements these features \"behind-the-scenes\" to offer two levels of annotation, and adds some sensible defaults based on\n\nEdit 2: If I follow correctly, the simplest version of what's being proposed here is \n\n* `DateIntervalLocator`: trick here is it doesn't draw ticks\/is used for invisible positioning\n* `DateIntervalFormatter`: put this label at invisible ticks\n\nWhich I think is reasonable to implement at the major\/minor axes - so no leveling - as a first pass.\n\nThen, building around some of the ideas here, what about something that can compose the various [Datetime Locators\/Formatters](https:\/\/matplotlib.org\/stable\/gallery\/ticks\/date_formatters_locators.html) <- which side note, this was really hard to find & I wonder if making it easier to find would improve things.\n\n Something like this super explicit version as a first pass and then we can think about sensible defaults: \n\n```Python\n\nDateCompositeLocator([WeekdayLocator(**params),  MicrosecondLocator(params)] , separate_axes = False) \n\nDateCompositeFormatter(list of format strings matching composite locator)\n```\n\nBecause here we know the hierarchy\/it's defined by virtue of the units. The # of possible levels are fixed and we can start w\/ no defaults and then grow out to defaults. This could also be a good starting point on which to build a more generalized solution later? \n\n","Yes, something like that would be a very good starting point. \r\n\r\nThe default locators\/formatters for https:\/\/spaceweather.knmi.nl\/viewer\/ are implemented (in JS) here: https:\/\/gitlab.com\/KNMI-OSS\/spaceweather\/knmi-hapi-timeline-viewer\/-\/blob\/main\/src\/lib\/svg_plots\/plot_frame_components\/datetimetickinfo.js\r\nThese were created by trial\/error\/tweaking, but it seems to scale well across a large range of plot canvas sizes and time ranges, from smartphones to large high-res displays and from centuries to seconds. Something like that could be translated to use the matplotlib locators\/formatters, and would probably have to be tweaked a bit further to correct for font\/plot size\/unit differences between this JS\/CSS\/SVG implementation and matplotlib. Those could then feed into the DateCompositeLocator\/Formatters.","The aesthetics of the date locators and formatters is a side issue to me - anyone can write their own to override the Matplotlib-offered ones, and the defaults aren't going to change until we do a style-break release.\r\n\r\nThe first job is deciding on an API for how to add a second (or more) level of tick annotations.  \r\n\r\n> `DateCompositeLocator([WeekdayLocator(**params),  MicrosecondLocator(params)] , separate_axes = False)` \r\n\r\n> This could also be a good starting point on which to build a more generalized solution later?\r\n\r\nI think the form of the API would need to be figured out first.  For instance, I'm not a fan of the Locator controlling if there are two axis levels or not.  The locator is really just there to give tick values. Rather it seems an `axis`-level method eg `xaxis.set_second_level_locator(BooLocator)`, or an `axes`-level method (ax.second_xaxis).\r\n\r\nOverall, the problem of adding a second level of tick labels is largely an issue of how to place the tick labels in a way that looks good without manual tweaking.  It's a tricky problem in general.  There will also be the question of styling how the intervals in the second row are indicated.  \r\n\r\n>  I think the readability\/usability differences can be considered objectively.\r\n\r\nI'm sure it is possible to come up with metrics for such things, and design studies to measure them."],"labels":["New feature","topic: date handling","topic: ticks axis labels"]},{"title":"Added test_pcolor in test_datetime.py","body":"## PR summary\r\nI have added a datetime smoke test for Axes.pcolor in lib\/matplotlib\/test\/test_datetime.py.\r\nThis addresses the Axes.pcolor task from https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26864.\r\n![pcolor test](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/112187975\/b6997d98-cb84-4f62-8104-306b85ca5ca5)\r\n\r\n\r\n## PR checklist\r\n- [N\/A] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [N\/A] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines","comments":[],"labels":["topic: testing"]},{"title":"Fix 3D lines being visible when behind camera","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\nCloses https:\/\/github.com\/matplotlib\/matplotlib\/issues\/6305\r\n\r\n## PR summary\r\n\r\nLines behind the camera were not being properly culled, and were visible in certain circumstances. Will leave this as a draft until I figure out if this issue applies to all 3D objects and not just lines. Also want to understand what exactly `proj3d.proj_transform_clip` is doing since I would have thought that does exactly this, but swapping to that function didn't solve anything.\r\n\r\nNote to self, this is a good reference: https:\/\/www.scratchapixel.com\/lessons\/3d-basic-rendering\/perspective-and-orthographic-projection-matrix\/opengl-perspective-projection-matrix\r\n\r\n## PR checklist\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [n\/a] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [n\/a] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n","comments":[],"labels":["topic: mplot3d"]},{"title":"[Doc]: Example showing how to plot images\/data on a 3D surface","body":"### Documentation Link\n\n_No response_\n\n### Problem\n\nPlotting up Earth as a globe like the examples here would be great:\r\n* https:\/\/stackoverflow.com\/a\/36403111\/11584125\r\n* https:\/\/s3dlib.org\/examples\/imagemap.html\r\n\r\nMight need to have this merged in first? https:\/\/github.com\/matplotlib\/matplotlib\/issues\/4468\n\n### Suggested improvement\n\n_No response_","comments":["Yes but I'd rather\/in addition tell folks that if they're doing that kinda visualization they should probably be using cartopy.","That's a good callout, though I'll note that afaik cartopy doesn't have a true 3D view. It maps 3D points to a 2D projection, so there's no way to e.g. plot some orbits on top and spin around the globe interactively."],"labels":["Documentation","topic: mplot3d"]},{"title":"[ENH]: pick event should be called after mouse pressed event","body":"### Problem\r\n\r\nCurrently the pick event is fired before the mouse pressed event. This makes detecting a situation where the user has clicked the plot but not selected anything very difficult. I'm currently facing this exact problem working on an application that embedds mpl plots into a Qt GUI. The only solutions we could come up with are either saving a timestamp for the last pick event and checking whether the mouse pressed event occured right after or just manually writing our own pick detection inside of the mouse pressed event.\r\n\r\n### Proposed solution\r\n\r\nChanging the order of these events would save us from a lot of head aches. The reverse sitation would no be a problem either since the developer knows that a mouse press event has to fire beforea pick event","comments":[],"labels":["New feature"]},{"title":"[TST] Added test_arrow in test_datetime.py","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nThis PR adds a smoke test for Axes.arrow in lib\/matplotlib\/tests\/test_datetime.py. This PR closes one of the items listed in the issue https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26864.\r\nSmoke test Plot:\r\n![mpl_arrow](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/96338098\/63542e82-8ff0-4a76-9f88-1ed78e979171)\r\n\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["topic: date handling","topic: arrow"]},{"title":"[Doc] Updated Hatches API page ","body":"## PR summary\r\n\r\nThis proposed change aims to address the sparsity of information on the hatches API landing page requested in issue #27196. Currently, users landing on this page may see a lack of information on supported hatches. By enhancing the content and linking to the supported hatches it will make it easier for individuals to quickly locate the information they are seeking.\r\n\r\nAshhar-24 was made co-author of this current PR as I took inspiration from Ashhar-24's PR #27203. \r\n\r\ncloses #27196\r\n\r\n## PR checklist\r\n- [X] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [N\/A] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [X] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n## Additional Information\r\nIn issue #27196 it is requested for an image to be embedded at the top of the API reference page (via the .. plot:: path\/to\/image directive). Through testing I am unsure if one can use this directive with a path to an image file. The .. image:: directive may be a better option. \r\n\r\nReferencing #27357 and https:\/\/matplotlib.org\/stable\/api\/sphinxext_plot_directive_api.html I was able to embed the required image using \".. plot::\". \r\n\r\nIn the review please let me know if .. image:: would have been a better choice, and if not, the reasons behind that decision. Your insights will be invaluable for my future pull requests. Thank you.","comments":["> through testing I am unsure if one can use this directive with a path to an image file\r\n\r\nYes, and that was my intent with that suggestion. The following should work:\r\n```rst\r\n.. plot:: gallery\/shapes_and_collections\/hatch_style_reference.py\r\n```\r\nif it doesn't b\/c the example makes too many images then use `..image`","@story645 Yes you are correct using `.. plot::` led to too many examples. I opted for `.. image::` and changed the code accordingly.\r\nLet me know if there is anything else I need to do. Thank you! ","Hmm, should this go here, or in the module description in `lib\/matplotlib\/hatches.py`?","Figured here b\/c it gets rendered at the top of the reference page & also I thought this sorta thing was the point of the \/API pages? \n\nhttps:\/\/output.circle-artifacts.com\/output\/job\/6428217d-4dd4-4c9d-bf62-02905d884afc\/artifacts\/0\/doc\/build\/html\/api\/hatch_api.html","The top of that file appears there too; it's the \"Contains classes for generating hatch patterns.\" line.","Yeah I know, what I'm trying to say\/ask is why the module page vs the API page since they get rendered together in the docs? ","@QuLogic @story645 Is there any update on this? Any thing I need to do?","> Yeah I know, what I'm trying to say\/ask is why the module page vs the API page since they get rendered together in the docs?\r\n\r\nWe currently don't have a strict policy on this. However, I suggest that we try to keep most API pages free of content, i.e. as the `hatches_api.rst` has been for now. As long as you only want a short description at the top, that should go into the module docstring. Advantages are:\r\n\r\n- api.rst pages are purely technical definitions of layout. If we want to change that in the future, it's simpler than having to search through content.\r\n- The content is in one place. You know where to look and there is no danger of duplicate or incongruent content because part is written in the api.rst and part is written in the module docstring (both are rendered in the HTML page).\r\n- The type of information on top of the API page is exactly what should be in a module docstring. When actually writing it into the module docstring, there's less danger that the API pages grow tutorial style or lengthy examples. \r\n\r\nI propose to make the a general rule. Of course, there will be exceptions for a few more involved API pages like https:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/doc\/api\/axes_api.rst\r\n",">  propose to make the a general rule.\n\nI'm not opposed\/your reasoning makes sense to me, but then I'd like it documented in the \"writing docs\" section of dev docs if it's gonna be policy.","@pat8901 last steps are\r\n* move the docs to `hatch.py` as suggested by @timhoffm \r\n* consider my suggested alt text\r\n\r\n@timhoffm can I spin your comment off into an issue? I'll make sure to put a giant \"Not for new contributors\" disclaimer. "],"labels":["topic: hatch","Documentation: API"]},{"title":"[Bug]: AttributeError: 'Path3DCollection' object has no attribute '_offsets3d'","body":"### Bug summary\r\n\r\nFirst time using this Axes3D, don't know how to solve this Issue\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nfig = plt.figure(figsize=(10, 10))\r\nax = Axes3D(fig)\r\nax = plt.subplot(111, projection='3d')\r\n# ax.scatter(tsne3D_normal[:, 0], tsne3D_normal[:, 1], tsne3D_normal[:, 2], 1, color='red', label='normal ')\r\n# # tsne_normal[i, 0]\u4e3a\u6a2a\u5750\u6807\uff0cX_norm[i, 1]\u4e3a\u7eb5\u5750\u6807\uff0c1\u4e3a\u6563\u70b9\u56fe\u7684\u9762\u79ef\uff0c color\u7ed9\u6bcf\u4e2a\u7c7b\u522b\u8bbe\u5b9a\u989c\u8272\r\n# ax.scatter(tsne3D_fault_1[:, 0], tsne3D_fault_1[:, 1], tsne3D_fault_1[:, 2], 1, color='green', label='fault_1-\u4e0b\u6321\u9500\u6a2a\u5411\u5e72\u6d89')\r\n# ax.scatter(tsne3D_fault_2[:, 0], tsne3D_fault_2[:, 1], tsne3D_fault_2[:, 2], 1, color='blue', label='fault_2-\u4e0b\u6321\u9500\u7eb5\u5411\u5e72\u6d89')\r\n# ax.scatter(tsne3D_fault_3[:, 0], tsne3D_fault_3[:, 1], tsne3D_fault_3[:, 2], 1, color='yellow', label='fault_3-\u538b\u8f6e\u8fc7\u538b')\r\n# ax.scatter(tsne3D_fault_4[:, 0], tsne3D_fault_4[:, 1], tsne3D_fault_4[:, 2], 1, color='black', label='fault_4-\u7f13\u51b2\u5934\u78e8\u635f')\r\n# ax.scatter(tsne3D_fault_5[:, 0], tsne3D_fault_5[:, 1], tsne3D_fault_5[:, 2], 1, color='purple', label='fault_5-V\u578b\u5c3a\u5bf8\u5f02\u5e38')\r\n# ax.scatter(tsne3D_fault_6[:, 0], tsne3D_fault_6[:, 1], tsne3D_fault_6[:, 2], 1, color='orange', label='fault_6-\u4e0a\u6ed1\u9053\u5f02\u5e38')\r\nax.title('t-SNE')\r\n# plt.legend(loc='upper left')\r\nax.legend()\r\nplt.show()\r\n# plt.savefig('ModelVisual.png', dpi=300)\r\n```\r\n\r\n\r\n### Actual outcome\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n[d:\\WorkStation\\Bigdatadevelop\\pythondev\\TrainDoor\\tapnet-master\\tapnet-master\\model_res\\T-sne.ipynb](file:\/\/\/D:\/WorkStation\/Bigdatadevelop\/pythondev\/TrainDoor\/tapnet-master\/tapnet-master\/model_res\/T-sne.ipynb) Cell 12 line 4\r\n      [2](vscode-notebook-cell:\/d%3A\/WorkStation\/Bigdatadevelop\/pythondev\/TrainDoor\/tapnet-master\/tapnet-master\/model_res\/T-sne.ipynb#X13sZmlsZQ%3D%3D?line=1) ax = plt.subplot(111, projection='3d')\r\n      [3](vscode-notebook-cell:\/d%3A\/WorkStation\/Bigdatadevelop\/pythondev\/TrainDoor\/tapnet-master\/tapnet-master\/model_res\/T-sne.ipynb#X13sZmlsZQ%3D%3D?line=2) # ax.scatter(tsne3D_norm[:, 0], tsne3D_norm[:, 1], tsne3D_norm[:, 2], 1, c=labels,cmap = plt.cm.Spectral)\r\n----> [4](vscode-notebook-cell:\/d%3A\/WorkStation\/Bigdatadevelop\/pythondev\/TrainDoor\/tapnet-master\/tapnet-master\/model_res\/T-sne.ipynb#X13sZmlsZQ%3D%3D?line=3) ax.scatter(tsne3D_normal[:, 0], tsne3D_normal[:, 1], tsne3D_normal[:, 2], 1, color='red', label='normal ')\r\n      [5](vscode-notebook-cell:\/d%3A\/WorkStation\/Bigdatadevelop\/pythondev\/TrainDoor\/tapnet-master\/tapnet-master\/model_res\/T-sne.ipynb#X13sZmlsZQ%3D%3D?line=4) # # tsne_normal[i, 0]\u4e3a\u6a2a\u5750\u6807\uff0cX_norm[i, 1]\u4e3a\u7eb5\u5750\u6807\uff0c1\u4e3a\u6563\u70b9\u56fe\u7684\u9762\u79ef\uff0c color\u7ed9\u6bcf\u4e2a\u7c7b\u522b\u8bbe\u5b9a\u989c\u8272\r\n      [6](vscode-notebook-cell:\/d%3A\/WorkStation\/Bigdatadevelop\/pythondev\/TrainDoor\/tapnet-master\/tapnet-master\/model_res\/T-sne.ipynb#X13sZmlsZQ%3D%3D?line=5) # ax.scatter(tsne3D_fault_1[:, 0], tsne3D_fault_1[:, 1], tsne3D_fault_1[:, 2], 1, color='green', label='fault_1-\u4e0b\u6321\u9500\u6a2a\u5411\u5e72\u6d89')\r\n      [7](vscode-notebook-cell:\/d%3A\/WorkStation\/Bigdatadevelop\/pythondev\/TrainDoor\/tapnet-master\/tapnet-master\/model_res\/T-sne.ipynb#X13sZmlsZQ%3D%3D?line=6) # ax.scatter(tsne3D_fault_2[:, 0], tsne3D_fault_2[:, 1], tsne3D_fault_2[:, 2], 1, color='blue', label='fault_2-\u4e0b\u6321\u9500\u7eb5\u5411\u5e72\u6d89')\r\n   (...)\r\n     [10](vscode-notebook-cell:\/d%3A\/WorkStation\/Bigdatadevelop\/pythondev\/TrainDoor\/tapnet-master\/tapnet-master\/model_res\/T-sne.ipynb#X13sZmlsZQ%3D%3D?line=9) # ax.scatter(tsne3D_fault_5[:, 0], tsne3D_fault_5[:, 1], tsne3D_fault_5[:, 2], 1, color='purple', label='fault_5-V\u578b\u5c3a\u5bf8\u5f02\u5e38')\r\n     [11](vscode-notebook-cell:\/d%3A\/WorkStation\/Bigdatadevelop\/pythondev\/TrainDoor\/tapnet-master\/tapnet-master\/model_res\/T-sne.ipynb#X13sZmlsZQ%3D%3D?line=10) # ax.scatter(tsne3D_fault_6[:, 0], tsne3D_fault_6[:, 1], tsne3D_fault_6[:, 2], 1, color='orange', label='fault_6-\u4e0a\u6ed1\u9053\u5f02\u5e38')\r\n     [12](vscode-notebook-cell:\/d%3A\/WorkStation\/Bigdatadevelop\/pythondev\/TrainDoor\/tapnet-master\/tapnet-master\/model_res\/T-sne.ipynb#X13sZmlsZQ%3D%3D?line=11) ax.title('t-SNE')\r\n\r\nFile [f:\\Miniconda3\\envs\\modeldev\\lib\\site-packages\\matplotlib\\__init__.py:1412](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/__init__.py:1412), in _preprocess_data.<locals>.inner(ax, data, *args, **kwargs)\r\n   [1409](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/__init__.py:1409) @functools.wraps(func)\r\n   [1410](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/__init__.py:1410) def inner(ax, *args, data=None, **kwargs):\r\n   [1411](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/__init__.py:1411)     if data is None:\r\n-> [1412](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/__init__.py:1412)         return func(ax, *map(sanitize_sequence, args), **kwargs)\r\n   [1414](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/__init__.py:1414)     bound = new_sig.bind(ax, *args, **kwargs)\r\n   [1415](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/__init__.py:1415)     auto_label = (bound.arguments.get(label_namer)\r\n   [1416](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/__init__.py:1416)                   or bound.kwargs.get(label_namer))\r\n\r\nFile [f:\\Miniconda3\\envs\\modeldev\\lib\\site-packages\\mpl_toolkits\\mplot3d\\axes3d.py:2390](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/mpl_toolkits\/mplot3d\/axes3d.py:2390), in Axes3D.scatter(self, xs, ys, zs, zdir, s, c, depthshade, *args, **kwargs)\r\n   [2387](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/mpl_toolkits\/mplot3d\/axes3d.py:2387)     zs = zs.copy()\r\n...\r\n--> [910](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/mpl_toolkits\/mplot3d\/art3d.py:910) elif zdir[0] == '-':\r\n    [911](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/mpl_toolkits\/mplot3d\/art3d.py:911)     return rotate_axes(xs, ys, zs, zdir)\r\n    [912](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/mpl_toolkits\/mplot3d\/art3d.py:912) else:\r\n\r\nTypeError: 'int' object is not subscriptable\r\n\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\nFile [f:\\Miniconda3\\envs\\modeldev\\lib\\site-packages\\IPython\\core\\formatters.py:340](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/IPython\/core\/formatters.py:340), in BaseFormatter.__call__(self, obj)\r\n    [338](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/IPython\/core\/formatters.py:338)     pass\r\n    [339](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/IPython\/core\/formatters.py:339) else:\r\n--> [340](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/IPython\/core\/formatters.py:340)     return printer(obj)\r\n    [341](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/IPython\/core\/formatters.py:341) # Finally look for special method names\r\n    [342](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/IPython\/core\/formatters.py:342) method = get_real_method(obj, self.print_method)\r\n\r\nFile [f:\\Miniconda3\\envs\\modeldev\\lib\\site-packages\\IPython\\core\\pylabtools.py:152](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/IPython\/core\/pylabtools.py:152), in print_figure(fig, fmt, bbox_inches, base64, **kwargs)\r\n    [149](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/IPython\/core\/pylabtools.py:149)     from matplotlib.backend_bases import FigureCanvasBase\r\n    [150](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/IPython\/core\/pylabtools.py:150)     FigureCanvasBase(fig)\r\n--> [152](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/IPython\/core\/pylabtools.py:152) fig.canvas.print_figure(bytes_io, **kw)\r\n    [153](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/IPython\/core\/pylabtools.py:153) data = bytes_io.getvalue()\r\n    [154](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/IPython\/core\/pylabtools.py:154) if fmt == 'svg':\r\n\r\nFile [f:\\Miniconda3\\envs\\modeldev\\lib\\site-packages\\matplotlib\\backend_bases.py:2295](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/backend_bases.py:2295), in FigureCanvasBase.print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\r\n   [2289](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/backend_bases.py:2289)     renderer = _get_renderer(\r\n   [2290](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/backend_bases.py:2290)         self.figure,\r\n   [2291](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/backend_bases.py:2291)         functools.partial(\r\n   [2292](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/backend_bases.py:2292)             print_method, orientation=orientation)\r\n   [2293](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/backend_bases.py:2293)     )\r\n   [2294](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/backend_bases.py:2294)     with getattr(renderer, \"_draw_disabled\", nullcontext)():\r\n-> [2295](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/backend_bases.py:2295)         self.figure.draw(renderer)\r\n   [2297](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/matplotlib\/backend_bases.py:2297) if bbox_inches:\r\n...\r\n    [602](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/mpl_toolkits\/mplot3d\/art3d.py:602)     # Sort the points based on z coordinates\r\n    [603](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/mpl_toolkits\/mplot3d\/art3d.py:603)     # Performance optimization: Create a sorted index array and reorder\r\n    [604](file:\/\/\/F:\/Miniconda3\/envs\/modeldev\/lib\/site-packages\/mpl_toolkits\/mplot3d\/art3d.py:604)     # points and point properties according to the index array\r\n\r\nAttributeError: 'Path3DCollection' object has no attribute '_offsets3d'\r\n```\r\n### Expected outcome\r\n\r\n3D image\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nWindows\r\n\r\n### Matplotlib Version\r\n\r\n3.8.2\r\n\r\n### Matplotlib Backend\r\n\r\nmodule:\/\/matplotlib_inline.backend_inline\r\n\r\n### Python version\r\n\r\n3.9.18\r\n\r\n### Jupyter version\r\n\r\n6.5.6\r\n\r\n### Installation\r\n\r\nconda","comments":["Please provide code that is minimally complete and runnable.","This seems to be the actual error:\r\n```\r\n...\r\n--> 910 elif zdir[0] == '-':\r\n911 return rotate_axes(xs, ys, zs, zdir)\r\n912 else:\r\n\r\nTypeError: 'int' object is not subscriptable\r\n```\r\n\r\nwhich leads me to believe that the 1 passed as the fourth argument, `zdir`, is the problem\r\n```\r\nax.scatter(tsne3D_normal[:, 0], tsne3D_normal[:, 1], tsne3D_normal[:, 2], 1, color='red', label='normal ')\r\n```\r\n\r\nTry passing 'x' instead.\r\n\r\nOne may think that the error message can be a bit better though. `zdir` should be a string, so one probably should check for that explicitly.","A problem here is that both `juggle_axes` and `rotate_axes` has a default case so maybe a stricter check needs to be done as a two-stage approach: first deprecating passing anything else than the expected strings and then throw a better error.\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/62a5ba4d3e3ac6f32ea4c8c9e89c62381390ac9a\/lib\/mpl_toolkits\/mplot3d\/art3d.py#L1129-L1157","An option to hide the incorrect input (as is done for many other types of incorrect input) is to replace \r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/62a5ba4d3e3ac6f32ea4c8c9e89c62381390ac9a\/lib\/mpl_toolkits\/mplot3d\/art3d.py#L1140\r\nwith\r\n``` python\r\nelif np.iterable(zdir) and zdir[0] == '-':\r\n```","Seems related to https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27287"],"labels":["topic: mplot3d","status: needs clarification","API: argument checking"]},{"title":"[Doc] Improve axisartist documentation","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nSome improvements to the axisartist documentation. Can be further improved, but at least providing a bit more info.\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [N\/A] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [N\/A] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["topic: mpl_toolkit","Documentation: API"]},{"title":"[MNT]: pyplot.xkcd() leads to findfont errors under Windows ","body":"### Summary\n\nany plot with the xkcd style `pyplot.xkcd()` generates a bunch of errors from the findfont function under Windows even when fonts like \"Comic Neue\" are installed. I also regenerated the font cache and copied the font files into the matplotlib site-packages font folder, but this did not help. (I am using mpl 3.8.2 on python 3.11)\r\n\r\nI am unsure if this is an issue under other OSs but I have the same issue under Win10 and Win11\n\n### Proposed fix\n\nIn the end I modified the `pyplot.py` file in the `xkcd` function, to get rid of the errors\r\n```\r\n    rcParams.update({\r\n        'font.font-family': ['xkcd', 'xkcd Script', 'Comic Neue', 'Comic Sans MS'],\r\n...\r\n```\r\nto\r\n ```\r\n    rcParams.update({\r\n        'font.sans-serif': ['xkcd', 'xkcd Script', 'Comic Neue', 'Comic Sans MS'],\r\n...\r\n```","comments":["I'd assume this would be due to https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27339 but the only change there was removing humor sans.","I think this is older than that; the caching on the warning seems either very specific, or non-existent, as it seems to trigger at all draws (e.g., pan or resize, and a bunch of warnings are printed.)",">  or non-existent, as it seems to trigger at all draws\n\nThat's what I thought was going on w\/ the findfont warning - is why I started #26602\n\nAlso I don't know if it's a windows specific thing, but I think I have to delete my fontcache to force a rebuild.","These warnings are caused by `_find_fonts_by_props` introduced in #20740 with matplotlib 3.6.0.  \r\n\r\nThis function searches the complete list of `font.family`:\r\n https:\/\/github.com\/matplotlib\/matplotlib\/blob\/0a4efbeed0c784dee4a44ab4da8cc02c647510fe\/lib\/matplotlib\/font_manager.py#L1351\r\n\r\nimplicitly **assuming that all entries are family names**. If this list also contains concrete font names, a warning will be issued if a font name is not found. Prior to v3.6.0, only the _existing_ font files from the font cache were reviewed in `_findfont_cached`.\r\n\r\nSee the following example:\r\n```\r\nimport matplotlib as mpl\r\nimport matplotlib.pyplot as plt\r\n\r\nwith mpl.rc_context({'font.family': [\"monospace\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\"]}):\r\n    fig = plt.figure()\r\n    fig.text(0.4, 0.5, \"mimi\\nimim\", size=40)\r\n```\r\nStarting with v3.6.0 it returns the warnings `WARNING:matplotlib.font_manager:findfont: Font family 'Bitstream Vera Sans Mono' not found.`. No warnings occurred up to v3.5.3.\r\n\r\nSo to fix this concrete issue it would indeed be sufficient to set `font.family` to `'sans-serif'` (just in case it has been changed from the default before) and then set the list of concrete fonts to `'font.sans-serif'` as @bkasel already found out. This doesn't address, however, the underlying root cause.","> If this list also contains concrete font names, a warning will be issued if a font name is not found.\n\nMy preference would be to allow font-names as part of finding family names (or control w\/ a flag that defaults to permissive), what am I missing for why that's a bad idea? ","> My preference would be to allow font-names as part of finding family names (...), what am I missing for why that's a bad idea?\r\n\r\nI didn't say that `font.family` must not contain concrete font names (sorry if I phrased that in a misleading way). On the contrary, I _think_ it might be sufficient to just emit the warning only for font families, not for concrete fonts (but I didn't check yet if this completely restores the old behavior):\r\n\r\n```\r\n@@ -1367,7 +1367,7 @@ class FontManager:\r\n                         \"none of the following families were found: %s\",\r\n                         family, \", \".join(self._expand_aliases(family))\r\n                     )\r\n-                else:\r\n+                elif family in [\"serif\", \"sans-serif\", \"cursive\", \"fantasy\", \"monospace\"]:\r\n                     _log.warning(\"findfont: Font family %r not found.\", family)\r\n```","> didn't say that\u00a0font.family\u00a0must not contain concrete font names\n\nI think I'm the one who phrased things weird, I was just asking if we could expand find font family to not raise a warning if the font exists ","> ... to not raise a warning if the font exists\r\n\r\nI guess it should read \"if the font doesn't exist\". If the font exists then `findfont` will not raise and no warning will be issued. But I think that we're both talking about the same thing.","> But I think that we're both talking about the same thing.\r\n\r\nProbably - what I'm getting at is basically that when it comes to not found error messages, we should be assuming something like this relation for the rcparams: $font.[serif, fantasy, etc] \\subset font.family$\r\n\r\nso that if updating $font.sans-serif$ doesn't raise a warning, than updating $font.family$ also shouldn't. I know technically $family \\neq font$ but there are lots of places in our examples were we pass in a font to a ```family``` parameter so we're kinda using them interchangeably anyway. "],"labels":["Maintenance"]},{"title":"[ENH] Implement dynamic clipping to axes limits for 3D plots","body":"Closes https:\/\/github.com\/matplotlib\/matplotlib\/issues\/25804\r\n\r\n## PR summary\r\nThis PR introduces \"dynamic clipping\" of the data in 3D plots, such that data outside the axis limits is not shown. I did a deep dive into stackoverflow and found 12 separate questions asking for this sort of functionality (see that list in [this comment](https:\/\/github.com\/matplotlib\/matplotlib\/issues\/25804#issuecomment-1723985066)).\r\n\r\nAll 3D plotting functions now support the `axlim_clip` keyword argument (default `False`), which when `True` will clip the data to the axes view limits, hiding all data outside those bounds. This clipping will be dynamically applied in real time while panning and zooming.\r\n\r\nPlease note that if one vertex of a line segment or 3D patch is clipped, the entire segment or patch will be hidden. Not being able to show partial lines or patches such that they are \"smoothly\" cut off at the boundaries of the view box is a limitation of the current renderer.\r\n\r\nWhat's new and new gallery example image (I'm not in love with this example, but it'll do for now):\r\n\r\n![3d_clip_to_axis_limits-1](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/14363975\/ccaeb767-9837-4802-ab5e-7975b62ed8e6)\r\n\r\nVideo of the dynamic behavior, please excuse my sluggish machine:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/assets\/14363975\/3ab251e2-3a1b-4ca1-81a1-34401f0d105e\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines","comments":["Current test failures are due to minor pixel differences in the contours unrelated to this change, will keep tweaking until it passes.\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/14363975\/e633b48d-d442-4317-8b78-959b558aeb98)","TODO: \r\n\r\n- [x] Fix marginal test failures\r\n- [x] Check to see if this fixes https:\/\/github.com\/matplotlib\/matplotlib\/issues\/8902\r\n- [n\/a] Does it make more sense for patches on the boundary to just drop a vertex instead of the entire patch? -> defer to a new issue\r\n- [x] Make a gallery example","> Not being able to show partial lines or patches such that they are \"smoothly\" cut off at the boundaries of the view box is a limitation of the current renderer.\r\n\r\nI don't think that's the case; we can definitely clip partial lines or patches to the Axes. Unless you mean the 3D renderer?\r\n\r\nIn that case, you would have to do some magic to calculate the clipping path of the Axes3D box with the artist in flattened 2D space, and apply it with `set_clip_path`. I'm not sure if that is worth it or not.","Yeah, I mean smooth clipping for the 3D renderer. It'd be a really big effort I think, especially considering (literal) corner cases. This ticket's I think the best to track that ask: https:\/\/github.com\/matplotlib\/matplotlib\/issues\/8902","Tests cleaned up, this is good for review & merge when acceptable","Only test failure is this one, unrelated\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/issues\/27635","Should the new argument be keyword-only? It appears to be the case for most of the classes, when it appears after `*`, but not for e.g., `Text3D` or `Line3DCollection`. It also appears before `*args` in many of the `Axes3D` methods, and it probably should be keyword-only there.","```python\r\n\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nfrom matplotlib import cm\r\nfrom mpl_toolkits.mplot3d.axes3d import get_test_data\r\n\r\n# set up a figure twice as wide as it is tall\r\nfig = plt.figure(figsize=plt.figaspect(0.5))\r\n\r\n# =============\r\n# First subplot\r\n# =============\r\n# set up the axes for the first plot\r\nax = fig.add_subplot(1, 2, 1, projection='3d')\r\n\r\n# plot a 3D surface like in the example mplot3d\/surface3d_demo\r\nX = np.arange(-5, 5, 0.25)\r\nY = np.arange(-5, 5, 0.25)\r\nX, Y = np.meshgrid(X, Y)\r\nR = np.sqrt(X**2 + Y**2)\r\nZ = np.sin(R)\r\nsurf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm,\r\n                       linewidth=0, antialiased=False, axlim_clip=True)\r\nax.set_zlim(-1.01, 1.01)\r\nfig.colorbar(surf, shrink=0.5, aspect=10)\r\n\r\n# ==============\r\n# Second subplot\r\n# ==============\r\n# set up the axes for the second plot\r\nax = fig.add_subplot(1, 2, 2, projection='3d')\r\n\r\n# plot a 3D wireframe like in the example mplot3d\/wire3d_demo\r\nX, Y, Z = get_test_data(0.05)\r\nax.plot_wireframe(X, Y, Z, rstride=10, cstride=10, axlim_clip=True)\r\n\r\nplt.show()\r\n```\r\n\r\n(Adapted from [this example](https:\/\/matplotlib.org\/stable\/gallery\/mplot3d\/subplot3d.html#d-plots-as-subplots), just adding the new kwarg)\r\n\r\nI think this example is illustrative of the limitations of this approach, in ways that may in fact be able to be better than they are.\r\n\r\nIn short, the wireframe works really well, but the filled surface exposes some draw ordering problems that we don't see with the argument set to `False`. (The same kinds of problems we see all the time, where something that is \"behind\" being drawn \"above\") It is not super clear to me _why_ the nan-ifying\/clipping actually causes this, but we don't see them drawn in the \"wrong\" order without it.\r\n\r\n\r\nThis is relevant because the example in #25804 was using a filled surface, and so I'm not sure this would actually satisfy their usecase.\r\n\r\n@scottshambaugh thoughts?\r\n\r\nIn general I'm willing to accept \"This is the best we can do, but yeah its relatively limited utility, but still want to add it\", but if you have ideas here, I'd like to hear them."],"labels":["New feature","topic: mplot3d"]},{"title":"[ENH]: stairs to support ordering of categorical data on the height (y) axis","body":"### Problem\n\nI have timeseries of state transitions, e.g, \r\n2023-02-11 15:01:34.368     Valve Closing\r\n2023-02-21 06:26:34.505     Valve Closed\r\n2023-02-21 07:07:36.863     Valve Opening\r\n2023-02-21 07:10:03.692     Value Open\r\n\r\nand use stairs to plot the state transitions using \r\n```plt.stairs(df.state[:-1], df.index\")```\r\n\r\nThis creates a plot where with the states on the y-axis. However these are ordered by the sequence they are found in the data, i.e., Valve Closing is first etc\r\n\r\nI want to be able to specify the order of values to put Closed at the bottom, then Closing, then Opening then Open, which makes the plot easier to interpret.\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/16606323\/ac8ab991-234d-4363-b35f-9557ecf0398b)\r\n\n\n### Proposed solution\n\nTwo possible ways to do this are\r\n1. Add a category order parameter that takes a list of the categories in order.\r\n3. Support python ordered categories, ie.., pd.CategoricalDtype(valve_order, ordered=True)","comments":["If you want the categories in a certain order you can just make invisible entries.  ","Thanks for the suggestion. in the end it was easier to use sns\r\n```sns.lineplot(y=df.state, x=df.index,drawstyle='steps-pre')```\r\nwhich observes the ordering in CategoricalDtype","The jpl units stash ordering on categorical in the unit info - we might be able to do that too, possibly in a way that could pick it up from pandas? "],"labels":["New feature"]},{"title":"Update hatch.py","body":"Dashed Hatch added \/ #27170","comments":["Hi @Arikad0 - can you address the current check failures? (check out above the Linting, Mypy and Tests failures)\r\n\r\nAlso, if this PR closes the issue you mentioned in the description, you can use one of the magic phrases such as \"Closes #<issue number>\" so that GitHub understands to link the issue and PR. Thanks!","As it stands, the implementation here is identical to that for the vertical lines, so we have\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax = plt.subplots()\r\nax.fill_between([0, 1], [0, 1], hatch=\"_\")\r\nplt.show()\r\n```\r\n![test](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10599679\/d3d704de-f34d-446c-aa74-c0de21b79d52)\r\n\r\n\r\nI believe the reason the tests fail is because we now have two vertical lines on top of each other for the \"+\" hatching.  E.g here are the result and diff images for the failing legend test:\r\n\r\n![hatching](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10599679\/1b9c9a60-6e28-4d21-826c-2ad5b5c220b0)\r\n\r\n![hatching-failed-diff](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10599679\/8f02d966-9e70-4db4-8cfd-21824330c3c9)\r\n\r\n@Arikad0 do you have thoughts on how to actually create the dashed pattern?","I'm a bit lost on how to proceed on this issue. Do you have any idea that may help? Thanks\u00a0in\u00a0advance","Gentle ping - any reviewers available to take a look? Thanks!","I wondered if we could use the `Shapes` type of hatch with a very simple straight path for this and actually it seems to work well:\r\n\r\nDefining the class as\r\n```python\r\n\r\nclass Dashes(Shapes):\r\n    size = 0.35\r\n    def __init__(self, hatch, density):\r\n        self.num_rows = (hatch.count('_')) * density\r\n        path = Path([[0, 0], [1, 0]], [Path.MOVETO, Path.LINETO])\r\n        self.shape_vertices = path.vertices\r\n        self.shape_codes = path.codes\r\n        super().__init__(hatch, density)\r\n```\r\n\r\nand adapting the example from #27146\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# Data\r\ncols = 10\r\nrows = 4\r\n\r\ndata = (\r\n    np.reshape(np.arange(0, cols, 1), (1, -1)) ** 2\r\n    + np.reshape(np.arange(0, rows), (-1, 1))\r\n    + np.random.random((rows, cols))*5\r\n)\r\n\r\n# Plot\r\nfig, ax = plt.subplots()\r\n\r\nx = range(data.shape[1])\r\nax.stackplot(\r\n    x, data,\r\n    hatch=[\"_\", \"__\", \"___\", \"____\"]\r\n)\r\n\r\nax.set_xlim(0, 9)\r\nax.set_ylim(0, 350)\r\n\r\nplt.show()\r\n```\r\nI have\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10599679\/128e91db-48ee-4c53-b014-115760f198a0)\r\n\r\nPossibly there are better ways."],"labels":["New feature","status: needs revision","topic: hatch"]},{"title":"[Bug]: Matplotlib fig.savefig() stalls when I add a singular patch, no matter the size","body":"### Bug summary\n\nWhen attempting to save a figure with matplotlib, using fig.savefig(), this function stalls if I have a singular patch, no matter the size of it. I'm not sure what's going on, as it worked yesterday fairly quickly with multiple Circle patches. However, now, even if I add one patch, the savefig call just stalls, and I'm unable to produce an image.\n\n### Code for reproduction\n\n```python\nLOG.info(f\"{shape_type} Matplotlib Patches being applied.\")\r\n\r\n    patch = getattr(matplotlib.patches, shape_type)\r\n    crs = ccrs.CRS(mapobj)\r\n    norm = matplotlib.colors.Normalize(vmin=0, vmax=25)\r\n    for idx in range(10):\r\n        lat = data_dict[\"latitude\"][idx]\r\n        lon = data_dict[\"longitude\"][idx]\r\n        radius = data_dict[\"product\"][idx]\r\n        shape = patch(\r\n            crs.transform_point(lon, lat, mapobj.source_crs),\r\n            radius * 8000,\r\n            transform=mapobj,\r\n            color=cmap(norm(radius)),\r\n            alpha=0.5,\r\n        )\r\n        main_ax.add_patch(shape)\r\n        break\r\n\r\n.... later in the code\r\n\r\n        fig.savefig(\r\n            out_fname,\r\n            dpi=rc_params[\"figure.dpi\"],\r\n            pad_inches=0.1,\r\n            bbox_inches=\"tight\",\r\n            transparent=False,\r\n        )\n```\n\n\n### Actual outcome\n\nNo output. Code just hangs one I call fig.savefig. Here is the size of the figure:\r\n\r\n```\r\nIn [1]: fig\r\nOut[1]: <Figure size 2580.65x2597.4 with 1 Axes>\r\n```\n\n### Expected outcome\n\nFor the figure to save with the associated `out_fname`.\n\n### Additional information\n\nThis has previously worked, but has since stopped. Here is the version of matplotlib I am using:\r\n\r\n```\r\nmatplotlib                    3.7.2\r\nmatplotlib-inline             0.1.6\r\n```\n\n### Operating system\n\n  `Operating System: CentOS Linux 7 (Core)`\n\n### Matplotlib Version\n\n`matplotlib 3.7.2`\n\n### Matplotlib Backend\n\nagg\n\n### Python version\n\n`Python 3.10.12`\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip","comments":["Thanks for the report @evrose54.  Could you provide a self-contained code example that we can run to reproduce the problem?","Sure, I'll start working on that now. Be back soon. Thanks for your quick response!","Preferably without cartopy as well if possible.  Otherwise might be better to report there.  "],"labels":["status: needs clarification"]},{"title":"[ENH]: Dropdown widget","body":"### Problem\n\nFrom https:\/\/matplotlib.org\/stable\/gallery\/widgets\/index.html I can't see a dropdown widget - is there a nice way to do it?\r\nIf not it would be nice to have it.\n\n### Proposed solution\n\n_No response_","comments":["It should be possible to build one using a button combined with the Menu example. At this stage, maybe an example how to do that will be a good start?","Can you please elaborate about which dropdown widget you are referring to?\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/116297412\/cc7c1ed8-c0ef-477c-817d-6691daff1ce5)\r\n","@Priyanshu-Batham this issue is about creating a dropdown widget, because there currently isn't one."],"labels":["New feature","topic: widgets\/UI"]},{"title":"[Bug]: Element missing in .eps when using Type 42 fonts","body":"### Bug summary\n\nWhen setting ``fonttype=``**Type 42 fonts** meanwhile  ``font.family``=**Times New Roman**, legends and tick labels are not rendered in saved figures as ``.eps`` format, while OK for ``.png``, ``.svg``, ``.pdf``, etc. It seems to originate from setting conflicts of fonts.\n\n### Code for reproduction\n\n```python\nimport matplotlib.font_manager as font_manager\r\nimport matplotlib\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nfont = 'Times New Roman'\r\nprint(font_manager.fontManager.findfont(font))  # C:\\Windows\\Fonts\\times.ttf does exist\r\n\r\n# if we dont use 42 fonttype here, it works fine\r\nmatplotlib.rcParams['ps.fonttype'] = 42\r\nmatplotlib.rcParams['pdf.fonttype'] = 42\r\n\r\nxs = np.arange(10)\r\nys = np.exp(xs)\r\nplt.plot(xs, ys, label='Exp')\r\nplt.xlabel('x')\r\nplt.ylabel('y')\r\n\r\nplt.xticks(fontsize=20, font=font)  # if we dont set the font here, it works fine as well\r\nplt.yticks(fontsize=20, font=font)\r\nplt.legend(prop={'family': font}, framealpha=1)\r\n\r\nplt.savefig('demo.eps', dpi=400)  # when both above are set, there is a problem\n```\n\n\n### Actual outcome\n\nIn EPSViwer:\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/109205133\/17049d65-e6cf-4e0b-af2b-614de2430591)\r\n\n\n### Expected outcome\n\nThis is saved as png and correct:\r\n![demo](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/109205133\/6d8610a6-c001-4c2e-99e0-a85181fd6570)\r\n\n\n### Additional information\n\nI met this problem since the IEEE journal requires figures in EPS format and the text within them encapsulated as  TrueType. Yet the default fonttype used by MPL is **Type 3**, which counters the condition. I guess this demand may be very common in scientific visualization using MPL and wonder if someone may help me. Many thanks! \n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.8.1\n\n### Matplotlib Backend\n\ntried ps, cario, TKAgg\n\n### Python version\n\n3.10.2\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip","comments":["Totally unrelated, but the IEEE publishing rules have really gone in a weird direction lately... Moving from one of the best LaTeX templates around to something with obvious errors, TrueType fonts, ignoring well-known writing rules, etc.\r\n\r\nI think one solution here is to convert the fonts to paths. That should follow the IEEE standard (as there are not incorrect types embedded). I do not  think MPL currently can handle that as part of the eps save-path, but one option may be to save as SVG, open in Inkscape and then save as eps while converting texts to path. ","So just for clarification, I tried replicating the issue but ran into no errors. My current version of matplotlib is 3.7.2. It was not used recently, I did not purposely choose the version or anything. My OS is windows as well. There must have been a recent change that caused this issue i imagine. \r\n\r\n![possible new change](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/55243596\/8cc1039a-4d4b-4650-bfc8-3d4fbf5ff10b)\r\n\r\n\r\n","can the bug even be replicated anymore? I just updated it and..\r\n![can it be replicated](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/55243596\/73fc8a73-c850-4d3b-ad3f-b9760e3a28d1)\r\n","Thanks for comments of @oscargus and tests of @Higgs32584! Yet unfortunately, somehow I still came into the same problem when save image as ``.eps`` format after upgrading MPL to ``3.8.2``, perhaps this problem is related to settings on personal computer? I don't know. My workaround was to save images as ``.svg`` and then convert them by a third-party tool https:\/\/cloudconvert.com\/, maybe others will also find this way helps :)"],"labels":["topic: text\/fonts"]},{"title":"Update for checking whether colors have an alpha channel","body":"## PR summary\r\n* Update check of whether a color has an alpha channel to include hexadecimal and color\/alpha tuple formats.\r\n* Add test of the new formats\r\n* Add method to check whether a sequence of colors has an alpha channel\r\n\r\nFor more explanation see the matplotlib page on [specifying colors](https:\/\/matplotlib.org\/stable\/users\/explain\/colors\/colors.html).\r\n\r\n## PR checklist\r\n- [x] \"Closes #27321\"\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n","comments":["I'm not sure how to add the check for whether *c* is indicating a color in a color cycle. I think it requires checking whether the first element of the string is `'C'` and if the next elements represent a digit. \r\n\r\nAlso: I'm not sure why those tests are failing, but it seems like the test server isn't connected to the internet..? ","Looks like the CI failures were largely due to network problems on GHA\/Azure so cycling to rerun","## Background\r\nI opened this PR because of my work on PR #27304, which I though would benefit from a check on whether the user provided a color with an alpha value to determine how the violinplot function handles alpha values. However, after @story645 explained, the point of allowing alpha to be included in a color was to remove unnecessary arguments, which I agree with, so that sort of makes my work here less relevant (except for the fact that the previous ``_has_alpha_channel()`` was out of date).\r\n\r\n## Current use of ``_has_alpha_channel()``\r\nThe ``_has_alpha_channel()`` method is only used in one place throughout the entire library: [``lib\/matplotlib\/axis.Tick``](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/5b5154ded5ee9c546e640b01f1a75ac041fd2fed\/lib\/matplotlib\/axis.py#L151). In that location, it just checks whether the provided grid color has an alpha channel specified, and if not, uses ``mpl.rcParams[\"grid.alpha\"]`` instead. \r\n\r\n``Tick()`` is the parent of ``XTick()`` and ``YTick()``, which are the parents of ``SkewXTick()``. However, nowhere in the entire library do those methods set the kwargs ``grid_color`` or ``grid_alpha``. \r\n\r\n## Proposal\r\nIt seems like ``_has_alpha_channel()`` is obsolete, and should be removed from the library. I propose:\r\n1. Removing it (and it's tests in ``test_colors.py``). \r\n2. In ``Tick()``, removing ``grid_alpha`` as an argument and letting ``grid_color`` specify the alpha setting.\r\n\r\n\r\n\r\n","I'm +0.5 on removing `grid_alpha`. There's value in reducing the number of parameters an dependency between them. While we should not remove primary `alpha` parameters from functions because they are used too widely, removing `*_alpha` parameters for secondary color attributes (typically pass through) seems viable.\r\n\r\nBefore we can remove `grid_alpha`, it has to go through our deprecation cycle.\r\n\r\nIt should also be ensured, that  `grid_color=(None, 0.5)` works and only modifies the alpha. Otherwise, only modifying the alpha becomes cumbersome."],"labels":["topic: color\/alpha"]},{"title":"[TST] Added test_axlines in test_datetime.py","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nThis PR adds a smoke test for Axes.axlines in lib\/matplotlib\/tests\/test_datetime.py. This PR closes one of the items listed in the issue https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26864.\r\nSmoke test Plot:\r\n<img width=\"1383\" alt=\"result\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/96338098\/30ec9e6b-c06f-47e3-9599-c753945f1bbe\">\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["topic: testing"]},{"title":"Add test_semilogx and test_semilogy tests to test_datetime","body":"## PR summary\r\nAdds test_semilogx and test_semilogy tests to test_datetime, resolving `Axes.semilogx` and `Axes.semilogy` in #26864 \r\n\r\nsemilogx:\r\n<img width=\"640\" alt=\"image\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/43834310\/4d5d8df8-7816-4eef-8f89-de33e9517f6a\">\r\nsemilogy:\r\n<img width=\"639\" alt=\"image\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/43834310\/7155a92f-9574-4c68-93a2-a9f7d2b78a0e\">\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n","comments":["Let me know if I should use different ranges for test data\/any other changes needed, happy to fix","Thanks!\r\n\r\nI think that if one can include timedelta as well that would be great. That is, plotting the timedelta, rather than adding it (which is OK as such, but the plotting is still datetime).\r\n\r\n(Do you agree with me that it seems like it is not properly working for dates? Not relevant for the test case writing, but these tests show that it doesn't work?)","Or, thinking twice, maybe one will have to use timedelta to get something sensible \"log-like\"? The \"log-aspect\" of the contemporary dates are probably rather small.","Timedeltas do not have first class support currently (see #8869 and linked PRs from there). They are used only when added to values.\r\n\r\nYes, log\/semilog\/etc axes with datetimes do not make much sense, as they are based on the 1970-01-01 zero mark for computing the scale, and so you are rarely working on multiple orders of magnitude where log scaling makes sense (and even when you are, the zero mark is completely arbitrary and unlikely to be related to your data).\r\n\r\nGiven that the implementation of `semilog[xy]` is really just some kwarg management over `set_[xy]scale` plus `plot`, the latter of which is already tested with datetimes and the former of which is tested pretty thoroughly independently, I think my vote would be to just omit the tests from the `datetime` file.\r\n\r\nIf we were to keep it (which, again, I'd argue we likely don't), just to prove that nothing about units prevents it from being applied, this is actually the case where using dates closer to 1970 (and spanning several decades, most likely) is likely beneficial, as it would make the scale transform visually apparent."],"labels":["topic: testing","topic: date handling"]},{"title":"[ENH]: add path.sketch.{scale, length, randomness, seed} rcParams","body":"### Problem\n\nLooking at #25796 and #26854, it might be helpful to be able to independently set the different parts of sketch and not just as a tuple.  This is motivated by wanting to make `plt.xkcd` discouraged and wanting the cleanest alternative for passing in the sketch params. \r\n\n\n### Proposed solution\n\n\r\n#25796  moves in this direction by allowing both\r\n\r\n```python\r\n\r\nmpl.rcParams['path.sketch'] = (scale, length, randomness, seed)\r\nmpl.rcParams[`path.sketch_seed'] = seed\r\n\r\n```\r\n\r\nand if we're OK w\/ the other parameters getting their own rcParams then they can have a unified naming scheme. Alternatively, we can probably do the parsing so ``None = default`` but I don't like having to remember which position is which param. ","comments":["Why would we actually want to deprecate plt.xkcd?","> Why would we actually want to deprecate plt.xkcd\n\nConsensus on the call is we won't, I think we should b\/c I think all the styling functionality should just live together & it's odd to have this one special cased styling function."],"labels":["New feature","topic: rcparams"]},{"title":"Improve symlog axis ticks","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n\r\nIn the current implementation, `symlog` axes only get major ticks by default. Depending on the data range, this can lead to too few or even no ticks at all. When \"subticks\" between decades are specified manually, those are sometimes labeled in an unintended manner (when they are at a decade).\r\n\r\nThis PR re-implements the tick placement and formatting for `symlog` axes to remedy these problems. If I am not mistaken, this closes #17402, closes #18757 and closes #25994.\r\n\r\nI am submitting this as a PR now to get some general feedback on the approach and pointers if I need to consider anything regarding style or conventions that I missed. If I get a thumbs up, I would polish some things off (like making `_SymmetricalLogUtil`'s methods work with `np.array`s and have `.firstdec()` cache results) before merging.\r\n\r\n## My approach for the tick locator\r\n\r\nI was aiming for `SymmetricalLogLocator` to behave identically to `LogLocator` as long as the data range is outside of the linear part of the scale and extend this reasonably to the linear part if it's present. What I came up with is this (I'm describing the positive half axis here for simplicity, everything works the same on the negative side):\r\n\r\n- Major ticks at decades, where the first decade to be considered for labelling must be at least half the length of a decade from 0 (otherwise there would be infinitely many labeled decades close to 0).\r\n- That decade receives the _decade number_ 1, the next larger one 2 and so on. 0 gets the \"decade\" number 0. Values between those decades get interpolated decade numbers.\r\n- We now have an obvious definition of the number of decades in the data range and can basically copy the logic from `LogLocator`, the only caveat being that 0 should always receive a tick if it is in the range.\r\n- In the linear part of the scale, we add the same minor ticks below the first decade as below any other and add the next lower decade as a minor tick. That is, if with base b one gets minor ticks 2 to b-1 between larger decades one gets 1 to b-1 below the first one, effectively producing linear ticks between the first decade and 0.\r\n\r\n`LogFormatter` (which is also used for `symlog` axes) is adapted accordingly.\r\n\r\n- I added a separate field `_firstsublabels` for placing sublabels below the first decade.\r\n- As with `log` axes it can sometimes happen that there is only one major tick with unlabeled minor ticks around it. This is fine (one can still identify the unlabeled positions) as long as the major tick is at some decade and not at 0, which can happen with `symlog` axes. In that case, we need to label at least one of the minor ticks to allow reading values off the axis.\r\n\r\nSince both the locator and the formatter need the calculation of the first decade I placed the code regarding this into a helper class `_SymmetricalLogUtil`.\r\n\r\nFinally, `SymmetricalLogScale` is adapted to actually use the new functionality by default.\r\n\r\nI checked all parameter ranges I could think of and this seems to work out quite nicely.\r\n<details>\r\n<summary>This is how it looks.<\/summary>\r\n\r\n![showcase_new](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/23075534\/2a16868f-d5a5-4722-9b93-6874ced84216)\r\n\r\n<\/details>\r\n<details>\r\n<summary>For comparison, this is how it used to look.<\/summary>\r\n\r\n![showcase_current](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/23075534\/efa57ea8-8046-438b-b4c8-20506a618458)\r\n\r\n<\/details>\r\n<details>\r\n<summary>Code to reproduce.<\/summary>\r\n\r\n```python\r\nimport numpy as np\r\nfrom matplotlib import pyplot as plt\r\n\r\ndef showcase_scales(axs, *plotargs, **plotkwargs):\r\n    for ax, scale in zip(axs, ['linear', 'symlog', 'log']):\r\n        ax.set_yscale(scale)\r\n        ax.yaxis.grid()\r\n        ax.plot(*plotargs, **plotkwargs)\r\n\r\nvalues = [\r\n    np.linspace(3, 150),\r\n    np.linspace(20, 60),\r\n    np.linspace(0.5, 12),\r\n    np.linspace(0.5, 5),\r\n    np.linspace(0.6, 3),\r\n    np.linspace(1e-4, 1e-2),\r\n    np.linspace(0, 40),\r\n    np.linspace(-0.8, 0.9),\r\n    np.linspace(-4, 4),\r\n    np.linspace(-22, 22),\r\n    np.linspace(0, 0),\r\n    np.linspace(1, 1),\r\n    np.linspace(2, 2),\r\n    np.linspace(10, 10),\r\n    np.linspace(13, 13),\r\n]\r\nfig, axs = plt.subplots(len(values), 3, squeeze=False, sharex=True,\r\n                        figsize=(9, 2 * len(values)))\r\nfor a, v in zip(axs, values):\r\n    showcase_scales(a, v)\r\naxs[0, 0].set_title('linear')\r\naxs[0, 1].set_title('symlog')\r\naxs[0, 2].set_title('log')\r\nfig.tight_layout()\r\nfig.savefig('showcase.png')\r\n```\r\n\r\n<\/details>\r\n\r\n## Requested feedback\r\n\r\nThere are some details regarding which I would like feedback\/guidance from you.\r\n\r\n- When computing `stride` (i.e. the number of decades between major ticks) a possible forced tick at 0 is not considered. This may lead to an off-by-one error regarding `numticks` (i.e. a `stride` value smaller by one would have been possible) but I feel like preventing this is not worth the complication of taking it into account. Do you agree?\r\n- `subs=None` is equivalent to `subs='auto'` in `LogLocator` but to `subs=(1.0,)` in `SymmetricalLogLocator`. Is that on purpose? I left it like that.\r\n- For some reason, `base` came _after_ `linthresh` in `SymmetricalLogLocator`'s signature, contrary to most other occurences. In adding `linscale` I reordered those. While this is strictly a backwards incompatible change (whereas I just appended `linscale` everywhere else), I don't expect it to have ever been used in an incompatible way: providing `base` only make sense when `transform` (the first argument) is not given, so it's most probably always been don by keyword argument, though it is in principle possible to say `SymmetricalLogLocator(None, None, 2, 10)` to get `SymmetricalLogLocator(linthresh=2, base=10)`. Should I switch it back for backwards compatibility or do we care more about consistent argument order?\r\n- `LogFormatter` threw away the sign of any value, even though it is used for negative values with `symlog` axes. This was no problem because `LogFormatterMathtext` overwrites `__call__` and preserves the sign, so it didn't actually show up on any axis (with the default configuration). I fixed this. Is it fine to just leave it in this PR or should it be a separate one?\r\n- In `test_ticker.py` the test `TestSymmetricalLogLocator.test_extending()` relies on `rcParams['axes.autolimit_mode']` being set to `round_numbers` but this is not set up in the test itself. I assume that this configuration is left in place by some previous test, though I can't tell where. Is this by design or should an `rc_context` be used, like in some other tests?\r\n- The checklist below tells me to note API changes (which the new `linscale` argument to the locator and the formatter as well as the changed default value of `SymmetricalLogScale`'s `subs` argument qualify as, I think) with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes), but the linked section does not seem to exist. What do I need to do?\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Ah, about the tests: Not all tests ran succesfully on my machine, but all the ones that fail also do so on `main`, so I'm confident this is not due to my changes.","Leaving this comment to ping you guys, as it's been more than a week since I opened this PR. :-)","Leaving another ping-comment, as it's been almost six weeks.","Sorry there hasn't been much discussion here. I've put this on [the agenda for tomorrow's meeting](https:\/\/hackmd.io\/l9vkn_T4RSmk147H_ZPPBA).","Sorry I meant to comment last week after the meeting, but it seemed to have been left here without going through.\r\n\r\nIn general, we are in favour of this change. However, we would like to see that it be behind a flag of some sort, either a) an argument to the class init, or b) an rcParam, or c) both. Sometime in the future, it may make sense to flip that flag (which I would be in favour of), but it should be tested out a bit first.\r\n\r\n> * When computing `stride` (i.e. the number of decades between major ticks) a possible forced tick at 0 is not considered. This may lead to an off-by-one error regarding `numticks` (i.e. a `stride` value smaller by one would have been possible) but I feel like preventing this is not worth the complication of taking it into account. Do you agree?\r\n\r\nI think I've seen an issue related to this somewhere and will try to find it.\r\n\r\n> * `subs=None` is equivalent to `subs='auto'` in `LogLocator` but to `subs=(1.0,)` in `SymmetricalLogLocator`. Is that on purpose? I left it like that.\r\n\r\nIt was probably an artifact of whoever implemented things, but then was refactored to share code and now it seems inconsistent. But now it can't easily change for backwards compatibility reasons.\r\n\r\n> * For some reason, `base` came _after_ `linthresh` in `SymmetricalLogLocator`'s signature, contrary to most other occurences. In adding `linscale` I reordered those. While this is strictly a backwards incompatible change (whereas I just appended `linscale` everywhere else), I don't expect it to have ever been used in an incompatible way: providing `base` only make sense when `transform` (the first argument) is not given, so it's most probably always been don by keyword argument, though it is in principle possible to say `SymmetricalLogLocator(None, None, 2, 10)` to get `SymmetricalLogLocator(linthresh=2, base=10)`. Should I switch it back for backwards compatibility or do we care more about consistent argument order?\r\n\r\nUnfortunately we do, so it will have to be reverted. In some cases, we might want to start making arguments keyword-only, but that does require going through a deprecation cycle.\r\n\r\n> * `LogFormatter` threw away the sign of any value, even though it is used for negative values with `symlog` axes. This was no problem because `LogFormatterMathtext` overwrites `__call__` and preserves the sign, so it didn't actually show up on any axis (with the default configuration). I fixed this. Is it fine to just leave it in this PR or should it be a separate one?\r\n\r\nIt's probably fine here, but if you have some easy way to show that difference outside of the other changes, it might be quicker for review as a separate PR.\r\n\r\n> * In `test_ticker.py` the test `TestSymmetricalLogLocator.test_extending()` relies on `rcParams['axes.autolimit_mode']` being set to `round_numbers` but this is not set up in the test itself. I assume that this configuration is left in place by some previous test, though I can't tell where. Is this by design or should an `rc_context` be used, like in some other tests?\r\n\r\nThis is set by the classic style, which is the default for all tests, though new tests should start using `mpl20` and in that case you would need to set the `rcParam` yourself. There's not really a need for `rc_context` unless you are mixing more than one call in a test, as all rcParams are reset before each test.\r\n\r\n> * The checklist below tells me to note API changes (which the new `linscale` argument to the locator and the formatter as well as the changed default value of `SymmetricalLogScale`'s `subs` argument qualify as, I think) with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes), but the linked section does not seem to exist. What do I need to do?\r\n\r\nI think this might have moved [here](https:\/\/matplotlib.org\/devdocs\/devel\/api_changes.html). @story645 I guess we need to update the pull request template for some of the recent refactors?","> The checklist below tells me to note API changes (which the new linscale argument to the locator and the formatter as well as the changed default value of SymmetricalLogScale's subs argument qualify as, I think) with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes), but the linked section does not seem to exist. What do I need to do?\r\n\r\nis something like this clearer? \r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/a361fd07-14cb-4b78-8246-01f0a9762c75)\r\n\r\nif not or you have a suggestion, please let me know at https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27641\r\n","Thanks for your comments! I think I have everything to make final adjustments now. I'm quite busy at the moment, but I will try and get that done soon.","Does this also close #10369?"],"labels":["status: needs rebase","topic: ticks axis labels","status: needs comment\/discussion"]},{"title":"[Bug]: Axes.label_outer() does not work when there is a colorbar","body":"### Bug summary\n\n`Axes.label_outer()` fails to hide axis and tick labels for plots that have a colorbar.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nx = np.linspace(0, 2 * np.pi, 400)\r\ny = np.sin(x ** 2)\r\n\r\nfig, axs = plt.subplots(2, 2)\r\naxs[0, 0].plot(x, y)\r\ncl2c = axs[0, 1].scatter(x, y, c=x)\r\nfig.colorbar(cl2c, ax=axs[0, 1], label='c-label')\r\naxs[1, 0].plot(x, y)\r\naxs[1, 1].plot(x, y)\r\n\r\nfor ax in axs.flat:\r\n    ax.set(xlabel='x-label', ylabel='y-label')\r\n\r\n# try to hide x labels and tick labels for top plots and y ticks for right plots,\r\n# but this fails to hide the labels for axs[0, 1] due to its colorbar\r\nfor ax in axs.flat:\r\n    ax.label_outer()\n```\n\n\n### Actual outcome\n\nThe output of the code above gives:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/7686641\/e9a79307-42c5-492f-884a-ede626bc08dc)\n\n### Expected outcome\n\nI would have expected the plot to look like:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/7686641\/aac412ba-3578-4c7f-aa8b-0dba39d57823)\r\n\r\nThis expected plot was created by creating the colorbar after the `ax.label_outer()` calls. However, I would not have expected this to have affected whether the labels\/ticks are removed.\r\n\r\n```python\r\nfig, axs = plt.subplots(2, 2)\r\naxs[0, 0].plot(x, y)\r\ncl2c = axs[0, 1].scatter(x, y, c=x)\r\naxs[1, 0].plot(x, y)\r\naxs[1, 1].plot(x, y)\r\n\r\nfor ax in axs.flat:\r\n    ax.set(xlabel='x-label', ylabel='y-label')\r\n\r\n# Hide x labels and tick labels for top plots and y ticks for right plots.\r\nfor ax in axs.flat:\r\n    ax.label_outer()\r\n\r\nfig.colorbar(cl2c, ax=axs[0, 1], label='c-label')\r\n\r\nfig.tight_layout()\r\n```\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nUbuntu 20.04.5 LTS\n\n### Matplotlib Version\n\n3.8.0\n\n### Matplotlib Backend\n\nmodule:\/\/matplotlib_inline.backend_inline\n\n### Python version\n\nPython 3.11.6\n\n### Jupyter version\n\n7.0.6\n\n### Installation\n\nconda","comments":["Can you try w layout='constrained'.  I think with normal colorbars the parent axes gets shoved down a level in the subplot spec and hence becomes \"outer\" to the axes\/colorbar pair.  This doesn't happen for layout='constrained' or in the colorbar you can also do use_gridspec=False and I think that will fix the issue ","I checked, and my diagnosis above is correct.  Given that there are at least three work arounds for this, I don't know what the appetite is to check if the axes is embedded in a subplotsepc with a colorbar, and that the parent subplotspec is \"inner\".  I'd recommend using layout='constrained'\r\n\r\n","The following patch implements the necessary checking of gridspecs for non-constrainedlayout-positioned colorbars, AFAICT:\r\n```patch\r\ndiff --git i\/lib\/matplotlib\/axes\/_base.py w\/lib\/matplotlib\/axes\/_base.py\r\nindex b113b0f211..ac991167e1 100644\r\n--- i\/lib\/matplotlib\/axes\/_base.py\r\n+++ w\/lib\/matplotlib\/axes\/_base.py\r\n@@ -4560,13 +4560,41 @@ class _AxesBase(martist.Artist):\r\n         self._label_outer_yaxis(skip_non_rectangular_axes=False,\r\n                                 remove_inner_ticks=remove_inner_ticks)\r\n\r\n+    def _get_subplotspec_with_optional_colorbar(self):\r\n+        \"\"\"\r\n+        Return the subplotspec for this Axes, except that if this Axes has been\r\n+        moved to a subgridspec to make room for a colorbar, then return the\r\n+        subplotspec that encloses both this Axes and the colorbar Axes.\r\n+        \"\"\"\r\n+        ss = self.get_subplotspec()\r\n+        if not ss:\r\n+            return\r\n+        gs = ss.get_gridspec()\r\n+        if (isinstance(gs, mpl.gridspec.GridSpecFromSubplotSpec)\r\n+                and gs.nrows * gs.ncols == 2):\r\n+            for ax in self.figure.axes:\r\n+                if (ax is not self\r\n+                        and hasattr(ax, \"_colorbar_info\")\r\n+                        and ax.get_subplotspec()\r\n+                        and isinstance(ax.get_subplotspec().get_gridspec(),\r\n+                                       mpl.gridspec.GridSpecFromSubplotSpec)\r\n+                        and isinstance(ax.get_subplotspec().get_gridspec()\r\n+                                       ._subplot_spec.get_gridspec(),\r\n+                                       mpl.gridspec.GridSpecFromSubplotSpec)\r\n+                        and (ax.get_subplotspec().get_gridspec()\r\n+                             ._subplot_spec.get_gridspec()._subplot_spec\r\n+                             is gs._subplot_spec)):\r\n+                    ss = gs._subplot_spec\r\n+                    break\r\n+        return ss\r\n+\r\n     def _label_outer_xaxis(self, *, skip_non_rectangular_axes,\r\n                            remove_inner_ticks=False):\r\n         # see documentation in label_outer.\r\n         if skip_non_rectangular_axes and not isinstance(self.patch,\r\n                                                         mpl.patches.Rectangle):\r\n             return\r\n-        ss = self.get_subplotspec()\r\n+        ss = self._get_subplotspec_with_optional_colorbar()\r\n         if not ss:\r\n             return\r\n         label_position = self.xaxis.get_label_position()\r\n@@ -4593,7 +4621,7 @@ class _AxesBase(martist.Artist):\r\n         if skip_non_rectangular_axes and not isinstance(self.patch,\r\n                                                         mpl.patches.Rectangle):\r\n             return\r\n-        ss = self.get_subplotspec()\r\n+        ss = self._get_subplotspec_with_optional_colorbar()\r\n         if not ss:\r\n             return\r\n         label_position = self.yaxis.get_label_position()\r\n```","Ha, cross-post.  I'm still not convinced the above is worth the bother, but wouldn't block if someone wanted to add it.","Will #27306 simplify the patch?","Yes, this patch is what motivated #27306 in fact (you'll only need to dig one gridspec in rather than two).","The simplified patch now that #27306 has been merged:\r\n```patch\r\ndiff --git i\/lib\/matplotlib\/axes\/_base.py w\/lib\/matplotlib\/axes\/_base.py\r\nindex b113b0f211..07f767c253 100644\r\n--- i\/lib\/matplotlib\/axes\/_base.py\r\n+++ w\/lib\/matplotlib\/axes\/_base.py\r\n@@ -4560,13 +4560,37 @@ class _AxesBase(martist.Artist):\r\n         self._label_outer_yaxis(skip_non_rectangular_axes=False,\r\n                                 remove_inner_ticks=remove_inner_ticks)\r\n \r\n+    def _get_subplotspec_with_optional_colorbar(self):\r\n+        \"\"\"\r\n+        Return the subplotspec for this Axes, except that if this Axes has been\r\n+        moved to a subgridspec to make room for a colorbar, then return the\r\n+        subplotspec that encloses both this Axes and the colorbar Axes.\r\n+        \"\"\"\r\n+        ss = self.get_subplotspec()\r\n+        if not ss:\r\n+            return\r\n+        gs = ss.get_gridspec()\r\n+        if (isinstance(gs, mpl.gridspec.GridSpecFromSubplotSpec)\r\n+                and gs.nrows * gs.ncols == 6):\r\n+            for ax in self.figure.axes:\r\n+                if (ax is not self\r\n+                        and hasattr(ax, \"_colorbar_info\")\r\n+                        and ax.get_subplotspec()\r\n+                        and isinstance(ax.get_subplotspec().get_gridspec(),\r\n+                                       mpl.gridspec.GridSpecFromSubplotSpec)\r\n+                        and (ax.get_subplotspec().get_gridspec()._subplot_spec\r\n+                             is gs._subplot_spec)):\r\n+                    ss = gs._subplot_spec\r\n+                    break\r\n+        return ss\r\n+\r\n     def _label_outer_xaxis(self, *, skip_non_rectangular_axes,\r\n                            remove_inner_ticks=False):\r\n         # see documentation in label_outer.\r\n         if skip_non_rectangular_axes and not isinstance(self.patch,\r\n                                                         mpl.patches.Rectangle):\r\n             return\r\n-        ss = self.get_subplotspec()\r\n+        ss = self._get_subplotspec_with_optional_colorbar()\r\n         if not ss:\r\n             return\r\n         label_position = self.xaxis.get_label_position()\r\n@@ -4593,7 +4617,7 @@ class _AxesBase(martist.Artist):\r\n         if skip_non_rectangular_axes and not isinstance(self.patch,\r\n                                                         mpl.patches.Rectangle):\r\n             return\r\n-        ss = self.get_subplotspec()\r\n+        ss = self._get_subplotspec_with_optional_colorbar()\r\n         if not ss:\r\n             return\r\n         label_position = self.yaxis.get_label_position()\r\n```"],"labels":["topic: geometry manager","topic: color\/colorbar","status: has patch"]},{"title":"Allow user to specify colors in violin plots with constructor method","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\nThis PR adds the option of specifying the fillcolor and linecolor of violinplots. It addresses\r\nissue #27298 (and other discusssions and requests elsewhere).\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] Closes #27298 \r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Thanks!\r\n\r\nCan you please add a test for this? I think either an image test, e.g. with a number of subplots using different color arguments, or an image comparison test where one check that using the arguments and setting the colors afterwards result in identical images.\r\n\r\nEdit: see https:\/\/matplotlib.org\/stable\/devel\/testing.html#writing-an-image-comparison-test if more info on the testing is required.","I couldn't find a doc-page for that, but in https:\/\/github.com\/matplotlib\/matplotlib\/tree\/main\/doc\/users\/next_whats_new there are small notes to be included in the next What's New. Please add one for this feature, ideally with an example showing how it works to highlight this new and useful feature.","> Thanks!\r\n> \r\n> Can you please add a test for this? I think either an image test, e.g. with a number of subplots using different color arguments, or an image comparison test where one check that using the arguments and setting the colors afterwards result in identical images.\r\n> \r\n> Edit: see https:\/\/matplotlib.org\/stable\/devel\/testing.html#writing-an-image-comparison-test if more info on the testing is required.\r\n\r\nTest added, I have never written one but I believe this should work as expected.","And now there's a whats new page. I think that covers your requests. Let me know if there's anything else to do! Thanks for your feedback and support.","You might want to install the pre-commit hooks to help with the linting\/formatting errors\r\nof the https:\/\/matplotlib.org\/devdocs\/devel\/development_setup.html#install-pre-commit-hooks\r\n\r\nETA: Also, thanks for jumping headfirst into this, this is a good feature to have.","I think that's everything @oscargus and @story645. Thanks for your help! ","> Maybe one should change both face- and edgecolor (to different values) in one of the subplots to confirm that it also works?\r\n\r\nGood point. I added two new subplot axes to the test - one that changes ``facecolor`` and ``edgecolor`` to different things, and one that checks if ``color`` overwrites the other two. \r\n\r\n","> I understand if you feel this is out of scope, but since you're already implementing these parameters how do you feel about implementing them vectorized? Meaning that you can also pass in a list of colors\/facecolor\/edgecolor like in bar?\r\n\r\nGood idea! That's now implemented with documentation, a test for this feature, and an example for the gallery. It's implemented the same way as it is in the `bar` method, where a sequence of colors can be passed that has a different length than the data, but the violin method will repeat the colors. ","@timhoffm I can tell you from my perspective as someone who thinks about matplotlib primarily as a user (this is my first PR) I'm very happy to have a plotting function that allows me to make something look good very quickly, but that has the option of more detailed customization if required. The way the violinplot works now (after this PR) seems to fit that criteria. You can make a violin or set of violins with a color scheme that works, in one line of code, then go and edit individual objects later if you need to. \r\n\r\n--\r\n\r\n> For now the two minimal requirements if have on API consistency are\r\n> \r\n> * Check the `color` behavior of `bar()` and be consistent with it or argue why we should behave differently here.\r\n\r\nThe color behavior between the new violinplot() and bar() are identical in terms of how the colors are handled within the function. However, bar() only has edgecolor and color as inputs. I changed the violinplot() to have edgecolor, facecolor, and color (which overwrites the other two) in response to @ksunden's point in issue #27298. This makes it consistent with patches.\r\n\r\nIn my opinion, this makes a lot of sense, because a user might want specific control over the lines and patch within the violin plot (i.e. using edgecolor\/facecolor), or might want to make everything look the same (i.e. using color). That seems like a perfect compromise between customizability and simplicity. So if anything, maybe bar() should copy this behavior?\r\n\r\nExtra point: I think this edgecolor\/facecolor\/color schema additionally makes sense given the way I plan to handle alpha values, which I'll explain in the response to @ksunden and @story645 in the above thread. \r\n\r\n--\r\n\r\n> * Is `edgecolor` the correct name? Does it color the `bodies` edges (if they have a finite width)? Should it?\r\n\r\nI changed the name to edgecolor from linecolor because @ksunden and @story645 pointed out that that's the typical name for the rest of the library. I agree with that reasoning.\r\n\r\nAs it is, the bodies by default do not have an edgeline for violinplots. This is how it was before and still is. I think this is great, because it creates a very clean looking plot, and if the user wants to, they can go in and add an edge to the bodies. We can add this as an example to the [customized violin plot](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/galleries\/examples\/statistics\/customized_violin.py) in the gallery for the interested user if you think that's a good idea.\r\n\r\n","I guess I had it in my head when I made the original suggestion that the main shape were by default drawn with edges, which isn't actually true.\r\n\r\nI think Tim is right that `bar` is the closer analog here...\r\n\r\nI do think that the most full solution would be to do something like `bodyprops=dict(...)`, `cmeanprops=dict(...)`, etc... (naming up to debate, as they are pluralized in the returns)... but I also agree that it is probably a bigger lift than we _really_ want.) That style is explicit and flexible (and something we do use in other parts of the library, particularly when there are multiple places `**kwargs` could be routed to, including `boxplot`, which is the closest analog to `violinplot`), but not necessarily the most friendly to use. \r\n\r\n`box` has `color` (defaults to next patch color), `edgecolor` (defaults to None, which translates to the same as facecolor, I think) as well as `ecolor` (defaults to black, used for error bars).\r\n\r\n`color` is either a single color or a list of colors which is cycled.","Not to complicate things further but regarding the earlier discussion it also may be helpful to include an argument like `facealpha`. I'm happy to keep working on it (although I think I may tap out if the lift to ``bodyprops=dict(...)`` is requested). But I think these decisions are above my pay grade so let me know what you all think.\r\n\r\nAlso, I'm not sure I understand why the tests failed. \r\nThe python 3.9 on ubuntu-20.04 (with and without Minimum Versions) failed because: \r\n``FAILED lib\/matplotlib\/tests\/test_backends_interactive.py::test_figure_leak_20490[time_mem0-{'MPLBACKEND': 'wxagg'}]``\r\n\r\nAnd the Main Pytest Windows_py39 failed because:\r\n``FAILED lib\/matplotlib\/tests\/test_pickle.py::test_pickle_load_from_subprocess[png]``\r\n\r\nBut I'm not sure why that is happening or how it relates to the commits I've made. ",">  it also may be helpful to include an argument like facealpha. \r\n\r\nWe added support for `(color, alpha)` as a valid [color specification](https:\/\/matplotlib.org\/devdocs\/users\/explain\/colors\/colors.html#sphx-glr-users-explain-colors-colors-py) precisely to support specifying alpha on specific components w\/o growing kwargs #24691 ","> how it relates to the commits I've made.\r\n\r\nIt shouldn't be directly related. While it is weird that it seems to happen consistently on this PR (and some others), there is no obvious reason why it happens.\r\n","> > it also may be helpful to include an argument like facealpha.\r\n> \r\n> We added support for `(color, alpha)` as a valid [color specification](https:\/\/matplotlib.org\/devdocs\/users\/explain\/colors\/colors.html#sphx-glr-users-explain-colors-colors-py) precisely to support specifying alpha on specific components w\/o growing kwargs #24691\r\n\r\nYep. I now removed the alpha handling so the alpha will just directly be controlled by `facecolor` without defaults to alternative values.","I just wanted to ping the reviewers in case there is continued interest in this PR. I'm happy to continue working on the changes to the violinplot constructor, but there was no clear agreement on how best to manage the additional color arguments. \r\n\r\nIt seems to me like there is tension between which other plotting method ``violinplot`` should be consistent with -- should it be similar to ``barplot`` or ``boxplot`` (or something else)? And -- should the kwargs be expanded to include parameter control over each feature of the violinplot -- e.g. ``bodies``, ``cmeans``, ``cmins``, etc. or just have a single set of kwargs to control each feature of the plot. \r\n\r\nIn my opinion as a user, I'm very happy to have a few simple kwargs (like in ``barplot``, i.e. just having ``color``, ``edgecolor``, ``facecolor``) and letting matplotlib apply them to each feature of the plot so it looks good with minimal effort. The output of the constructor still provides the option of using the feature dictionaries for further specification if desired by a user. ","@landoskape thanks for following up. We've got a developers call Thursday at I think 8:00PM UTC) where I think it might be good to discuss this - please join if you can make it: https:\/\/scientific-python.org\/calendars\/ \n\nI tend to agree w\/ @landoskape on keeping it simple: color\/face\/edge & if folks want more complicated then they can pop into the artist layer.","So looking at how seaborn just exposes body color, @mwaskom is one proposal (bar plot vs box plot) preferable? \r\n\r\n```python\r\nseaborn.violinplot(data=None, *, x=None, y=None, hue=None, order=None, hue_order=None, orient=None, color=None, palette=None, saturation=0.75, fill=True, inner='box', split=False, width=0.8, dodge='auto', gap=0, linewidth=None, linecolor='auto', cut=2, gridsize=100, bw_method='scott', bw_adjust=1, density_norm='area', common_norm=False, hue_norm=None, formatter=None, log_scale=None, native_scale=False, legend='auto', scale=<deprecated>, scale_hue=<deprecated>, bw=<deprecated>, inner_kws=None, ax=None, **kwargs)\r\n```","Hi @landoskape, sorry didn't update last week. Rough consensus on call was: \n\n* Add facecolor and edgecolor as parameters\n* Allow facecolor to take a list of colors\n* edgecolor can only take one color\n* Add an explicit alpha parameter and default it to the current default of 3.0 ","> * edgecolor can only take one color\r\n\r\n@story645 IIRC we said this because some aspects were represented by a Line2D, so that individual styling per violin is not supported. However, looking at the code, I only see LineCollections, which should support individual colors. Do you still remember where the Line2\u20ac was coming in?"],"labels":["New feature","status: needs rebase"]},{"title":"Tags for simple_scatter.py demo","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n\r\nHello! This PR adds the tags for the simple scatter demo. I tagged a few more examples during the sprint. I wanted to start with just one to see how it goes.\r\n\r\nLink to the scatter demo:\r\nhttps:\/\/matplotlib.org\/devdocs\/gallery\/animation\/simple_scatter.html\r\n\r\nRelated: https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27235\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [N\/A] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Cycling to rerun doc test","@ksunden so I've got multiline content tags implemented, it's just waiting on reviews and merging https:\/\/github.com\/melissawm\/sphinx-tags\/pull\/84 which should be good to go after https:\/\/github.com\/melissawm\/sphinx-tags\/pull\/89 \r\n\r\nBut doc tests will fail w\/o those PRs in. ","@gougouasmi did you want to handle the rest of your tags? I left them out of my batch PRs in case you did.","Hello @story645 ! I am a bit lost about what to do from here. Are we waiting on two other PRs? https:\/\/github.com\/melissawm\/sphinx-tags\/pull\/84 and https:\/\/github.com\/melissawm\/sphinx-tags\/pull\/89 \r\n","> Are we waiting on two other PRs? melissawm\/sphinx-tags#84 and melissawm\/sphinx-tags#89\n\nKinda - those implement support for putting the tags in the body of the directive:\n\n```rst\n\n.. tag::\n\n   t1, t2, etc\n\n```\n\nBut tags on one line work perfectly well. Basically if you're still interested you can put in the PR even if it'll be a bit before it can get merged - just put the tags on one line to test that it works."],"labels":["Documentation: tags"]},{"title":"[ENH]: Add color argument to violinplot constructor","body":"### Problem\n\nIt would be nice to specify the color of a set of violin plots in the constructor, rather than doing it afterwards for each component of the violinplot. This is usually how colors are set in matplotlib, so it would be in keeping with the general schema of matplotlib.\r\n\r\nI can set this up as a PR if people think it's useful and makes sense for the library.\n\n### Proposed solution\n\nThe current color selection is done [here](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/v3.8.1\/lib\/matplotlib\/axes\/_axes.py#L8382). It looks like this:\r\n\r\n```python\r\n        # Colors.\r\n        if mpl.rcParams['_internal.classic_mode']:\r\n            fillcolor = 'y'\r\n            linecolor = 'r'\r\n        else:\r\n            fillcolor = linecolor = self._get_lines.get_next_color()\r\n```\r\n\r\nThe proposed enhancement would look something like this, where `color` is a new key word argument with default value `=None`.\r\n\r\n```python\r\n        # Colors.\r\n        if mpl.rcParams['_internal.classic_mode']:\r\n            fillcolor = 'y'\r\n            linecolor = 'r'\r\n        elif color is not None:\r\n            fillcolor = linecolor = color \r\n        else:\r\n            fillcolor = linecolor = self._get_lines.get_next_color()\r\n```\r\n\r\nThis could even work for a sequence of colors, but a little bit more code would have to be changed. ","comments":["I think that's reasonable - if we support violin plot then we should support passing in colors. \n\n","I think we may want similar \"facecolor\"\/\"edgecolor\"\/\"color(which is both)\" logic from patches here. I also think that if given as a parameter, it should take precedence over the \"classic mode\" rc param, as you are explicitly asking for something deviating from default behavior then, and it is unexpected that it would be ignored.","I am working on a PR. I haven't contributed to Matplotlib before, so am noting locations where updates might be desired if the PR is accepted. \r\n\r\nexamples\/statistics\/customized_violin.py\r\ngalleries\/plot_types\/stats\/violin.py\r\nlib\/matplotlib\/tests\/test_axes.py -- may want to add color testing here\r\n\r\nAnd of course the \"what's new\", etc.\r\n\r\n\r\nNo comment needed until this finds it's way into a PR. ","Closed, moving conversation to PR #27304 ","We typically keep issues open until a pr is merged, not just opened."],"labels":["New feature"]},{"title":"[Doc]: Incomplete annotation for `labels` in `Axes.set_xticklabels`","body":"### Documentation Link\n\nhttps:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.axes.Axes.set_xticklabels.html\n\n### Problem\n\nThe explanation for `labels` says it accepts either sequence of strings or Texts:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/8880777\/dfcf4f25-7568-45ec-a16f-d0435630ca1b)\r\n\r\nHowever, it's also possible to pass as a parameter e.g. `list` of `ints` or `floats` or similar and the method works too.\r\n\r\nI think this should be reflected in the doc.\r\n\r\n```python\r\nimport random\r\nimport matplotlib.pyplot as plt\r\n\r\nx = sorted(random.sample(range(15), 5))\r\ny = sorted(random.sample(range(10), 5))\r\n\r\nfig, ax = plt.subplots(\r\n    figsize=(10, 6)\r\n)\r\n\r\nax.plot(x, y, \"o-\")\r\nax.set_xticks(x)\r\nax.set_xticklabels(x)  # x is `list` of INTs, not strings\r\nax.grid(axis=\"x\")\r\n```\r\n\r\nGives this, without any problems:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/8880777\/99ca7519-6f11-4ba8-b74b-95018a3937a4)\r\n\r\nOr if you generate list of floats:\r\n\r\n```python\r\nx_labels = [random.random() for _ in range(len(x))]\r\n```\r\n\r\nAnd then update the tick labels:\r\n```python\r\nax.set_xticklabels(x_labels)  # x is `list` of FLOATs, not strings\r\n```\r\n\r\nI'll get this:\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/8880777\/2a29ee90-71f4-481c-b1f0-5eef3d56ad33)\r\n\n\n### Suggested improvement\n\nUpdate the description so it's clear numeric arrays can be passed on as a parameter.","comments":["This is the same (core) problem as the point about `xlabel` in #26858. The _actual_ code certainly will accept any object (by virtue of having a `__str__` method), but how much of that should be considered \"expected\" vs \"implementation detail\"?\r\n\r\nOne suggestion we have been discussing (from the type hinting side at least) is having an alias like `StrLike` which actually resolves to `object` or `Any` but communicates the intent to treat it as a `str`.\r\n\r\nIn the case of passing numbers, it is actually quite unintuitive what happens, as the numbers are now labeling a point (possibly) other than the point that is numerically equivalent. (Even in your (float) example, the numbers appear out of order, for instance, which is likely to cause confusion.) While it _works_, and if that is truly what you want, you _can_ do it, I actually think by encouraging (if not requiring) explicit casting to string makes your code easier to tell that that was intentional and not e.g. wanting to call `set_xticks`, but actually calling `set_xticklabels`. Even moreso with floats, as I think if you were actually wanting float labels, it is likely that you would want to format them to e.g. have 3 decimal places (and also likely that you want it showing up at the numerical equivalence point, at which point, a Formatter is usually the tool for the job rather than passing tick labels directly) ","See also this comment on the subject:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/pull\/26867#issuecomment-1731256429"],"labels":["Documentation"]},{"title":"[Tag]: version: 3.N","body":"### Need\r\n\r\nIt's nice to have ways to highlight when something comes into the library, especially newer features xref: #15920 \r\n\r\nIf we can add a tag for versions, that'll let us highlight what in the gallery came in on a specific version -> specifically new features. Tagging by version number means we don't have to move a whole bunch of tags on every new version. Adding \"and add tag: N.M\" to the other documenting new features instructions isn't a big deal. \r\n\r\n### Proposed solution\r\n\r\nWe should use the same format as the versioning directives, `version: 3.N`","comments":["Sometimes an existing example is modified to show a new feature, e.g. #23208.  Would you still add the tag in that case?","I think so - it's still showing a feature that came in recently. I think the only complication is if an example warrants multiple version tags, making it clear which feature goes to which tag - but that may be a good usecase for putting tags in places other than the bottom if it's an example with multiple parts.","IMHO the Tag should only be set if the feature is the central aspect of the example. It should be rare that we\u2018ll have duplicate labels then. \r\n\r\nMore generally, labels can have two functions:\r\n\r\n- Show the minimal requirement needed for the example. \r\n- Draw attentions to new features.\r\n\r\nThe first one is not reliable, because minor aspects of the example may still need newer versions.\r\nThis leaves us with the second, so that we can always resolve to the newest version.","> the Tag should only be set if the feature is the central aspect of the example\n\nI'm fine w\/ that criteria and it fits w\/ the other \"versioning guidelines\" criteria."],"labels":["Documentation: tags"]},{"title":"[Bug]: 3D Scatterplot - Passing String as Positional Argument Results in Unexpected Behaviour","body":"### Bug summary\r\n\r\nWhen passing the `\"x\"` as a positional argument to the scatterplot function, it unexpectedly reorders the actual input data.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nnp.random.seed(1)\r\n\r\nx = np.random.uniform(-5, 5, 50)\r\ny = np.random.uniform(-5, 5, 50)\r\nz = np.random.uniform(-5, 5, 50)\r\n\r\nax = plt.subplot(111, projection='3d')\r\nax.scatter(x,y,z, \"x\", color=\"r\", label=\"Target\")\r\nax.scatter(x,y,z, \"^\", color=\"b\", label=\"Target\")\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/73585648\/a009f200-3c4b-45f3-95a2-e5d847f10d20)\r\n\r\n\r\n### Expected outcome\r\n\r\nThis should probably throw an error of some kind. Otherwise it should not result i unexpected behaviour.\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/73585648\/ca547904-5f10-40b6-b1c0-49a462acba50)\r\n\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nMac OS 13.5\r\n\r\n### Matplotlib Version\r\n\r\n3.8.0\r\n\r\n### Matplotlib Backend\r\n\r\nmodule:\/\/matplotlib_inline.backend_inline\r\n\r\n### Python version\r\n\r\n3.11.6\r\n\r\n### Jupyter version\r\n\r\n7.0.6\r\n\r\n### Installation\r\n\r\npip","comments":["Can you explain the image you have under \"expected\"?\r\n\r\nIt looks like you are trying to set the marker. I will note that `scatter` (unlike `plot`) does not accept marker\/fmt string as the 4th positional argument. (In the 2D case, it is `s` for the size, in the 3D case, it is actually the `zdir` argument, which actually probably could be kw-only as it mostly makes sense if you _don't_ supply z values...)\r\n\r\nThere are a few more things I find confusing about this though...\r\n\r\n- First, the scatter docs say this param accepts \"x\", \"y\", \"z\" _and_ \"-x\", \"-y\", \"-z\", but the intermediate underlying utilities make no mention in the docstrings of the \"-\" variants (though `juggle_axes` does)\r\n  - [scatter](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/fac632fe3c66344418b654d0ac86e9598c1fa89f\/lib\/mpl_toolkits\/mplot3d\/axes3d.py#L2320)\r\n  - [patch_collection_2d_to_3d](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/ea66786a00d351a558a9ecd7392c89606bd256d6\/lib\/mpl_toolkits\/mplot3d\/art3d.py#L817)\r\n  - [Patch3DCollection.set_3d_properties](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/ea66786a00d351a558a9ecd7392c89606bd256d6\/lib\/mpl_toolkits\/mplot3d\/art3d.py#L579C14-L579C14)\r\n  - [juggle_axes](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/ea66786a00d351a558a9ecd7392c89606bd256d6\/lib\/mpl_toolkits\/mplot3d\/art3d.py#L1129)\r\n- `juggle_axes` does not validate that the input is what it expects to receive, defaulting to returning the input as provided\r\n\r\nNot sure which level I would want the validation on, to be honest. @scottshambaugh opinions?","The image I posted under \"expected\" just shows the data plotted twice, once in red, once in blue and since there is no unexpected reordering, the dots coincide. Note, that in this case I passed `\"^\"` as the 4th positional argument for both the red and the blue plot.\r\n\r\nSo I unintentionally supplied the `zdir` argument and in that sense, the result is not necessarily wrong.\r\nHowever, it should probably throw an error, when I pass `\"^\"` as an argument.","Yeah a couple things shaking out of this:\r\n* I'd support making `zdir` a keyword only, I don't like that this breaks API convention with `plot`, and it's a mix-up I've personally done a couple times. The 2d case is probably run into a lot more but that's a bigger change\r\n* Looking through the code path it doesn't seem like the `-z` case is doing anything here? I'm not sure I understand the intended behavior\r\n* Some docstrings to clean up to allow the `-x, -y, -z` cases\r\n* I don't have strong options on where to validate, but I'll note that these are all public methods so it should either be on the lowest levels of the call chain that the string is used, or all levels. We'll want to add validation to [rotate_axes](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/ea66786a00d351a558a9ecd7392c89606bd256d6\/lib\/mpl_toolkits\/mplot3d\/art3d.py#L1146C1-L1147C1) as well, and probably scrub the whole 3d module to make sure we're coving that fully.","Thanks guys, I appreciate the work that you are putting into this a lot."],"labels":["topic: mplot3d","API: consistency"]},{"title":"[Bug]: ImportError: DLL load failed while importing _path in conda development installation","body":"### Bug summary\n\nI want to set up a development installation of `matplotlib` following the instructions [here](https:\/\/matplotlib.org\/devdocs\/devel\/development_setup.html). I am on Windows 11 using `conda` and `gcc` from MSYS2. I did a fresh `git clone`, created the `conda` environment and successfully installed `matplotlib` using `pip`, as instructed. However, when I try to import it, I get the following error:\r\n```pycon\r\n(mpl-dev) d:\\Projekte\\miscellaneous_git_repos\\matplotlib>python\r\nPython 3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:29:11) [MSC v.1935 64 bit (AMD64)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import matplotlib\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"D:\\Projekte\\miscellaneous_git_repos\\matplotlib\\lib\\matplotlib\\__init__.py\", line 161, in <module>\r\n    from . import _api, _version, cbook, _docstring, rcsetup\r\n  File \"D:\\Projekte\\miscellaneous_git_repos\\matplotlib\\lib\\matplotlib\\rcsetup.py\", line 27, in <module>\r\n    from matplotlib.colors import Colormap, is_color_like\r\n  File \"D:\\Projekte\\miscellaneous_git_repos\\matplotlib\\lib\\matplotlib\\colors.py\", line 57, in <module>\r\n    from matplotlib import _api, _cm, cbook, scale\r\n  File \"D:\\Projekte\\miscellaneous_git_repos\\matplotlib\\lib\\matplotlib\\scale.py\", line 22, in <module>\r\n    from matplotlib.ticker import (\r\n  File \"D:\\Projekte\\miscellaneous_git_repos\\matplotlib\\lib\\matplotlib\\ticker.py\", line 143, in <module>\r\n    from matplotlib import transforms as mtransforms\r\n  File \"D:\\Projekte\\miscellaneous_git_repos\\matplotlib\\lib\\matplotlib\\transforms.py\", line 49, in <module>\r\n    from matplotlib._path import (\r\nImportError: DLL load failed while importing _path: The specified procedure could not be found.\r\n```\r\n\r\nI found a couple of issues with similar problems on here, but those seemed to be resolved by using a newer version of Python or of Matplotlib, both of which I am already doing (relative to those issues).\r\n\r\nI also found allusions that I might need some MSVC installation for the `dll`, though it is unclear to me how to check that. I have the Visual C++ Redistributables 2010, 2012, 2013, 2015-2019, and 2017 installed from other applications, though, so I assume that I am fine on that front.\n\n### Code for reproduction\n\n```python\nimport matplotlib\n```\n\n\n### Actual outcome\n\nError (see above).\n\n### Expected outcome\n\nNo error.\r\n\r\n(Sorry about the redundancy, I could not quite make this issue fit the template..)\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nWindows 11\n\n### Matplotlib Version\n\n3.9.0\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n3.11.6\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nNone","comments":["What pip command did you use?  Note that it recently changed.  https:\/\/matplotlib.org\/devdocs\/devel\/contribute.html#workflow-overview","I used\r\n```\r\npython -m pip install --verbose --no-build-isolation --editable .[dev]\r\n```\r\nso the same as you linked, except for the `--verbose` flag.","Can you run Dependency Walker on the DLL to find out which runtime DLL is missing? Though it seems to be complaining about a missing symbol instead.","@QuLogic I'm happy to do that but I'm unsure which file to run it on and what to look for. Do I use the GUI or the command line (how?) and post the output here? Where do I find the relevant DLL to run on?","Using the editable install, it should be in `D:\\Projekte\\miscellaneous_git_repos\\matplotlib\\build\\cp311\\src\\_path.cp311-win_amd64.pyd`. I think the GUI should be fine, but I'm not sure how it shows the missing symbols.\r\n\r\nYou might also be able to run `dumpbin \/imports _path.cp311-win_amd64.pyd` from the MSVC command prompt.","Out of curiosity, do you get the same error when you try to import Matplotlib outside the repo? ","> Using the editable install, it should be in `D:\\Projekte\\miscellaneous_git_repos\\matplotlib\\build\\cp311\\src\\_path.cp311-win_amd64.pyd`. I think the GUI should be fine, but I'm not sure how it shows the missing symbols.\r\n\r\nOk, I did that. I got\r\n```\r\nError: At least one required implicit or forwarded dependency was not found.\r\nError: At least one module has an unresolved import due to a missing export function in an implicitly dependent module.\r\nError: A circular dependency was detected.\r\nWarning: At least one delay-load dependency module was not found.\r\nWarning: At least one module has an unresolved import due to a missing export function in a delay-load dependent module.\r\n```\r\nand in the module list I got\r\n```\r\nError opening file. The system cannot find the file specified (2).\r\n```\r\nfor each of the following files (sorry, long list):\r\n```\r\nAPI-MS-WIN-CORE-APIQUERY-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-APPCOMPAT-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-APPCOMPAT-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-APPINIT-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-ATOMS-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-COMM-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-CONSOLE-L1-2-1.DLL\r\nAPI-MS-WIN-CORE-CONSOLE-L2-1-0.DLL\r\nAPI-MS-WIN-CORE-CONSOLE-L2-2-0.DLL\r\nAPI-MS-WIN-CORE-CONSOLE-L3-2-0.DLL\r\nAPI-MS-WIN-CORE-CRT-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-CRT-L2-1-0.DLL\r\nAPI-MS-WIN-CORE-DATETIME-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-DATETIME-L1-1-2.DLL\r\nAPI-MS-WIN-CORE-DEBUG-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-DELAYLOAD-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-DELAYLOAD-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-ERRORHANDLING-L1-1-2.DLL\r\nAPI-MS-WIN-CORE-ERRORHANDLING-L1-1-3.DLL\r\nAPI-MS-WIN-CORE-FIBERS-L2-1-0.DLL\r\nAPI-MS-WIN-CORE-FIBERS-L2-1-1.DLL\r\nAPI-MS-WIN-CORE-FILE-L1-2-1.DLL\r\nAPI-MS-WIN-CORE-FILE-L1-2-2.DLL\r\nAPI-MS-WIN-CORE-FILE-L1-2-4.DLL\r\nAPI-MS-WIN-CORE-FILE-L2-1-1.DLL\r\nAPI-MS-WIN-CORE-FILE-L2-1-2.DLL\r\nAPI-MS-WIN-CORE-FILE-L2-1-3.DLL\r\nAPI-MS-WIN-CORE-HEAP-L2-1-0.DLL\r\nAPI-MS-WIN-CORE-HEAP-OBSOLETE-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-IO-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-IO-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-JOB-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-KERNEL32-LEGACY-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-KERNEL32-LEGACY-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-KERNEL32-PRIVATE-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-LARGEINTEGER-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-LIBRARYLOADER-L1-2-0.DLL\r\nAPI-MS-WIN-CORE-LIBRARYLOADER-L1-2-1.DLL\r\nAPI-MS-WIN-CORE-LIBRARYLOADER-L1-2-2.DLL\r\nAPI-MS-WIN-CORE-LIBRARYLOADER-L1-2-3.DLL\r\nAPI-MS-WIN-CORE-LIBRARYLOADER-L2-1-0.DLL\r\nAPI-MS-WIN-CORE-LOCALIZATION-L2-1-0.DLL\r\nAPI-MS-WIN-CORE-LOCALIZATION-OBSOLETE-L1-2-0.DLL\r\nAPI-MS-WIN-CORE-LOCALIZATION-PRIVATE-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-MEMORY-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-MEMORY-L1-1-2.DLL\r\nAPI-MS-WIN-CORE-MEMORY-L1-1-3.DLL\r\nAPI-MS-WIN-CORE-MISC-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-NAMEDPIPE-L1-2-1.DLL\r\nAPI-MS-WIN-CORE-NAMEDPIPE-L1-2-2.DLL\r\nAPI-MS-WIN-CORE-NAMESPACE-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-NORMALIZATION-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-PCW-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-PRIVATEPROFILE-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-PROCESSENVIRONMENT-L1-2-0.DLL\r\nAPI-MS-WIN-CORE-PROCESSSNAPSHOT-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-PROCESSTHREADS-L1-1-2.DLL\r\nAPI-MS-WIN-CORE-PROCESSTHREADS-L1-1-3.DLL\r\nAPI-MS-WIN-CORE-PROCESSTOPOLOGY-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-PSAPI-ANSI-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-PSAPI-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-REALTIME-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-REGISTRY-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-REGISTRY-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-REGISTRY-L1-1-2.DLL\r\nAPI-MS-WIN-CORE-RTLSUPPORT-L1-2-2.DLL\r\nAPI-MS-WIN-CORE-SIDEBYSIDE-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-STRING-L2-1-0.DLL\r\nAPI-MS-WIN-CORE-STRING-OBSOLETE-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-STRINGANSI-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-SYNCH-L1-2-1.DLL\r\nAPI-MS-WIN-CORE-SYSINFO-L1-2-0.DLL\r\nAPI-MS-WIN-CORE-SYSINFO-L1-2-1.DLL\r\nAPI-MS-WIN-CORE-SYSINFO-L1-2-3.DLL\r\nAPI-MS-WIN-CORE-SYSTEMTOPOLOGY-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-SYSTEMTOPOLOGY-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-THREADPOOL-L1-2-0.DLL\r\nAPI-MS-WIN-CORE-THREADPOOL-LEGACY-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-THREADPOOL-PRIVATE-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-WINDOWSERRORREPORTING-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-WINDOWSERRORREPORTING-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-WINDOWSERRORREPORTING-L1-1-2.DLL\r\nAPI-MS-WIN-CORE-WINDOWSERRORREPORTING-L1-1-3.DLL\r\nAPI-MS-WIN-CORE-WOW64-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-WOW64-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-WOW64-L1-1-3.DLL\r\nAPI-MS-WIN-CORE-XSTATE-L2-1-0.DLL\r\nAPI-MS-WIN-CORE-XSTATE-L2-1-1.DLL\r\nAPI-MS-WIN-CORE-XSTATE-L2-1-2.DLL\r\nAPI-MS-WIN-EVENTING-CONSUMER-L1-1-0.DLL\r\nAPI-MS-WIN-EVENTING-CONSUMER-L1-1-1.DLL\r\nAPI-MS-WIN-EVENTING-CONTROLLER-L1-1-0.DLL\r\nAPI-MS-WIN-EVENTING-PROVIDER-L1-1-0.DLL\r\nAPI-MS-WIN-GDI-INTERNAL-UAP-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-APPCONTAINER-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-AUDIT-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-AUDIT-L1-1-1.DLL\r\nAPI-MS-WIN-SECURITY-BASE-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-BASE-L1-2-0.DLL\r\nAPI-MS-WIN-SECURITY-BASE-PRIVATE-L1-1-0.DLL\r\nAPI-MS-WIN-SERVICE-CORE-L1-1-0.DLL\r\nAPI-MS-WIN-SERVICE-CORE-L1-1-1.DLL\r\nAPI-MS-WIN-SERVICE-CORE-L1-1-2.DLL\r\nAPI-MS-WIN-SERVICE-MANAGEMENT-L1-1-0.DLL\r\nAPI-MS-WIN-SERVICE-MANAGEMENT-L2-1-0.DLL\r\nAPI-MS-WIN-SERVICE-PRIVATE-L1-1-0.DLL\r\nAPI-MS-WIN-SERVICE-PRIVATE-L1-1-2.DLL\r\nAPI-MS-WIN-SERVICE-PRIVATE-L1-1-3.DLL\r\nAPI-MS-WIN-SERVICE-PRIVATE-L1-1-4.DLL\r\nAPI-MS-WIN-SERVICE-WINSVC-L1-1-0.DLL\r\nAPI-MS-WIN-STATESEPARATION-HELPERS-L1-1-0.DLL\r\nPYTHON311.DLL\r\nAPI-MS-WIN-APPMODEL-ADVERTISINGID-L1-1-0.DLL\r\nAPI-MS-WIN-APPMODEL-IDENTITY-L1-2-0.DLL\r\nAPI-MS-WIN-APPMODEL-RUNTIME-INTERNAL-L1-1-2.DLL\r\nAPI-MS-WIN-APPMODEL-RUNTIME-INTERNAL-L1-1-7.DLL\r\nAPI-MS-WIN-APPMODEL-RUNTIME-L1-1-0.DLL\r\nAPI-MS-WIN-APPMODEL-RUNTIME-L1-1-1.DLL\r\nAPI-MS-WIN-APPMODEL-STATE-L1-2-0.DLL\r\nAPI-MS-WIN-APPMODEL-UNLOCK-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-APIQUERY-L2-1-0.DLL\r\nAPI-MS-WIN-CORE-COM-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-COM-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-COM-L2-1-1.DLL\r\nAPI-MS-WIN-CORE-COM-MIDLPROXYSTUB-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-COM-PRIVATE-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-COMMANDLINETOARGV-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-DEBUG-MINIDUMP-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-ERRORHANDLING-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-FEATURESTAGING-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-FIBERS-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-KERNEL32-PRIVATE-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-LOCALIZATION-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-LOCALIZATION-L1-2-2.DLL\r\nAPI-MS-WIN-CORE-LOCALIZATION-L1-2-3.DLL\r\nAPI-MS-WIN-CORE-LOCALREGISTRY-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-MARSHAL-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-PATH-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-PERFCOUNTERS-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-PROCESSTOPOLOGY-OBSOLETE-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-PSM-APP-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-PSM-KEY-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-PSM-KEY-L1-1-3.DLL\r\nAPI-MS-WIN-CORE-PSM-RTIMER-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-QUIRKS-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-REALTIME-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-REGISTRY-L2-1-0.DLL\r\nAPI-MS-WIN-CORE-REGISTRY-PRIVATE-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-REGISTRYUSERSPECIFIC-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-SHLWAPI-LEGACY-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-SHLWAPI-OBSOLETE-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-STRING-L2-1-1.DLL\r\nAPI-MS-WIN-CORE-SYNCH-ANSI-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-SYSINFO-L2-1-0.DLL\r\nAPI-MS-WIN-CORE-THREADPOOL-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-TOOLHELP-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-URL-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-VERSION-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-VERSION-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-VERSION-PRIVATE-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-WINRT-ERROR-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-WINRT-ERROR-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-WINRT-ERRORPRIVATE-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-WINRT-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-WINRT-PROPERTYSETPRIVATE-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-WINRT-PROPERTYSETPRIVATE-L1-1-1.DLL\r\nAPI-MS-WIN-CORE-WINRT-REGISTRATION-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-WINRT-ROBUFFER-L1-1-0.DLL\r\nAPI-MS-WIN-CORE-WINRT-STRING-L1-1-0.DLL\r\nAPI-MS-WIN-COREUI-SECRUNTIME-L1-1-0.DLL\r\nAPI-MS-WIN-DEVICES-CONFIG-L1-1-1.DLL\r\nAPI-MS-WIN-DEVICES-QUERY-L1-1-0.DLL\r\nAPI-MS-WIN-DOWNLEVEL-ADVAPI32-L1-1-0.DLL\r\nAPI-MS-WIN-DOWNLEVEL-KERNEL32-L1-1-0.DLL\r\nAPI-MS-WIN-DX-D3DKMT-L1-1-0.DLL\r\nAPI-MS-WIN-DX-D3DKMT-L1-1-1.DLL\r\nAPI-MS-WIN-DX-D3DKMT-L1-1-3.DLL\r\nAPI-MS-WIN-DX-D3DKMT-L1-1-4.DLL\r\nAPI-MS-WIN-DX-D3DKMT-L1-1-7.DLL\r\nAPI-MS-WIN-EVENTING-CLASSICPROVIDER-L1-1-0.DLL\r\nAPI-MS-WIN-EVENTING-LEGACY-L1-1-0.DLL\r\nAPI-MS-WIN-EVENTING-OBSOLETE-L1-1-0.DLL\r\nAPI-MS-WIN-EVENTING-TDH-L1-1-0.DLL\r\nAPI-MS-WIN-EVENTLOG-LEGACY-L1-1-0.DLL\r\nAPI-MS-WIN-GDI-DPIINFO-L1-1-0.DLL\r\nAPI-MS-WIN-HTTP-TIME-L1-1-0.DLL\r\nAPI-MS-WIN-NETWORKING-INTERFACECONTEXTS-L1-1-0.DLL\r\nAPI-MS-WIN-NTUSER-RECTANGLE-L1-1-0.DLL\r\nAPI-MS-WIN-NTUSER-SYSPARAMS-L1-1-0.DLL\r\nAPI-MS-WIN-OLE32-IE-L1-1-0.DLL\r\nAPI-MS-WIN-OOBE-NOTIFICATION-L1-1-0.DLL\r\nAPI-MS-WIN-POWER-BASE-L1-1-0.DLL\r\nAPI-MS-WIN-POWER-SETTING-L1-1-0.DLL\r\nAPI-MS-WIN-PRIVACY-COREPRIVACYSETTINGSSTORE-L1-1-0.DLL\r\nAPI-MS-WIN-RO-TYPERESOLUTION-L1-1-1.DLL\r\nAPI-MS-WIN-RTCORE-NTUSER-CLIPBOARD-L1-1-0.DLL\r\nAPI-MS-WIN-RTCORE-NTUSER-PRIVATE-L1-1-0.DLL\r\nAPI-MS-WIN-RTCORE-NTUSER-PRIVATE-L1-1-11.DLL\r\nAPI-MS-WIN-RTCORE-NTUSER-PRIVATE-L1-1-2.DLL\r\nAPI-MS-WIN-RTCORE-NTUSER-PRIVATE-L1-1-4.DLL\r\nAPI-MS-WIN-RTCORE-NTUSER-PRIVATE-L1-1-7.DLL\r\nAPI-MS-WIN-RTCORE-NTUSER-PRIVATE-L1-1-9.DLL\r\nAPI-MS-WIN-RTCORE-NTUSER-SHELL-L1-1-0.DLL\r\nAPI-MS-WIN-RTCORE-NTUSER-SYNCH-L1-1-0.DLL\r\nAPI-MS-WIN-RTCORE-NTUSER-WINDOW-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-ACCESSHLPR-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-ACTIVEDIRECTORYCLIENT-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-ACTIVEDIRECTORYCLIENT-L1-1-1.DLL\r\nAPI-MS-WIN-SECURITY-BASE-L1-2-1.DLL\r\nAPI-MS-WIN-SECURITY-BASE-PRIVATE-L1-1-1.DLL\r\nAPI-MS-WIN-SECURITY-CAPABILITY-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-CREDENTIALS-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-CREDENTIALS-L2-1-0.DLL\r\nAPI-MS-WIN-SECURITY-CREDENTIALS-L2-1-1.DLL\r\nAPI-MS-WIN-SECURITY-CRYPTOAPI-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-GROUPPOLICY-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-ISOLATEDCONTAINER-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-ISOLATIONPOLICY-L1-2-0.DLL\r\nAPI-MS-WIN-SECURITY-LOGON-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-LSALOOKUP-ANSI-L2-1-0.DLL\r\nAPI-MS-WIN-SECURITY-LSALOOKUP-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-LSALOOKUP-L1-1-1.DLL\r\nAPI-MS-WIN-SECURITY-LSALOOKUP-L1-1-2.DLL\r\nAPI-MS-WIN-SECURITY-LSALOOKUP-L2-1-0.DLL\r\nAPI-MS-WIN-SECURITY-LSAPOLICY-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-PROVIDER-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-SDDL-ANSI-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-SDDL-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-SDDLPARSECOND-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-SYSTEMFUNCTIONS-L1-1-0.DLL\r\nAPI-MS-WIN-SECURITY-TRUSTEE-L1-1-0.DLL\r\nAPI-MS-WIN-SERVICE-CORE-L1-1-4.DLL\r\nAPI-MS-WIN-SHCORE-COMHELPERS-L1-1-0.DLL\r\nAPI-MS-WIN-SHCORE-OBSOLETE-L1-1-0.DLL\r\nAPI-MS-WIN-SHCORE-PATH-L1-1-0.DLL\r\nAPI-MS-WIN-SHCORE-REGISTRY-L1-1-0.DLL\r\nAPI-MS-WIN-SHCORE-STREAM-L1-1-0.DLL\r\nAPI-MS-WIN-SHCORE-STREAM-WINRT-L1-1-0.DLL\r\nAPI-MS-WIN-SHCORE-SYSINFO-L1-1-0.DLL\r\nAPI-MS-WIN-SHCORE-TASKPOOL-L1-1-0.DLL\r\nAPI-MS-WIN-SHCORE-THREAD-L1-1-0.DLL\r\nAPI-MS-WIN-SHCORE-UNICODEANSI-L1-1-0.DLL\r\nAPI-MS-WIN-SHELL-CHANGENOTIFY-L1-1-0.DLL\r\nAPI-MS-WIN-SHELL-NAMESPACE-L1-1-0.DLL\r\nAPI-MS-WIN-SHELL-SHDIRECTORY-L1-1-0.DLL\r\nAPI-MS-WIN-SHELL-SHELLFOLDERS-L1-1-0.DLL\r\nAPI-MS-WIN-SHLWAPI-IE-L1-1-0.DLL\r\nAPI-MS-WIN-SHLWAPI-WINRT-STORAGE-L1-1-1.DLL\r\nEXT-MS-MF-PAL-L2-1-0.DLL\r\nEXT-MS-ONECORE-APPMODEL-DEPLOYMENT-INTERNAL-L1-1-0.DLL\r\nEXT-MS-ONECORE-APPMODEL-STATEREPOSITORY-CACHE-L1-1-0.DLL\r\nEXT-MS-ONECORE-APPMODEL-STATEREPOSITORY-CACHE-L1-1-2.DLL\r\nEXT-MS-ONECORE-APPMODEL-STATEREPOSITORY-CACHE-L1-1-4.DLL\r\nEXT-MS-ONECORE-APPMODEL-STATEREPOSITORY-INTERNAL-L1-1-3.DLL\r\nEXT-MS-ONECORE-APPMODEL-STATEREPOSITORY-INTERNAL-L1-1-4.DLL\r\nEXT-MS-ONECORE-APPMODEL-STATEREPOSITORY-INTERNAL-L1-1-6.DLL\r\nEXT-MS-ONECORE-DCOMP-L1-1-0.DLL\r\nEXT-MS-ONECORE-ORIENTATION-L1-1-0.DLL\r\nEXT-MS-ONECORE-SHELLCHROMEAPI-L1-1-0.DLL\r\nEXT-MS-WIN-ADSI-ACTIVEDS-L1-1-0.DLL\r\nEXT-MS-WIN-ADVAPI32-MSI-L1-1-0.DLL\r\nEXT-MS-WIN-ADVAPI32-NPUSERNAME-L1-1-0.DLL\r\nEXT-MS-WIN-ADVAPI32-NTMARTA-L1-1-0.DLL\r\nEXT-MS-WIN-ADVAPI32-PSM-APP-L1-1-0.DLL\r\nEXT-MS-WIN-ADVAPI32-REGISTRY-L1-1-0.DLL\r\nEXT-MS-WIN-ADVAPI32-REGISTRY-L1-1-1.DLL\r\nEXT-MS-WIN-ADVAPI32-SAFER-L1-1-0.DLL\r\nEXT-MS-WIN-APPCOMPAT-AEINV-L1-1-0.DLL\r\nEXT-MS-WIN-APPCOMPAT-AEPIC-L1-1-0.DLL\r\nEXT-MS-WIN-APPCOMPAT-APPHELP-L1-1-0.DLL\r\nEXT-MS-WIN-APPMODEL-APPEXECUTIONALIAS-L1-1-0.DLL\r\nEXT-MS-WIN-APPMODEL-APPEXECUTIONALIAS-L1-1-1.DLL\r\nEXT-MS-WIN-APPMODEL-APPEXECUTIONALIAS-L1-1-2.DLL\r\nEXT-MS-WIN-APPMODEL-APPEXECUTIONALIAS-L1-1-3.DLL\r\nEXT-MS-WIN-APPMODEL-DAXCORE-L1-1-0.DLL\r\nEXT-MS-WIN-APPMODEL-DAXCORE-L1-1-2.DLL\r\nEXT-MS-WIN-APPMODEL-DEPLOYMENT-L1-1-0.DLL\r\nEXT-MS-WIN-APPMODEL-SHELLEXECUTE-L1-1-0.DLL\r\nEXT-MS-WIN-APPMODEL-STATE-EXT-L1-2-0.DLL\r\nEXT-MS-WIN-APPMODEL-USERCONTEXT-L1-1-0.DLL\r\nEXT-MS-WIN-APPMODEL-VIEWSCALEFACTOR-L1-1-0.DLL\r\nEXT-MS-WIN-APPXDEPLOYMENTCLIENT-APPXDEPLOY-L1-1-0.DLL\r\nEXT-MS-WIN-APPXDEPLOYMENTCLIENT-APPXDEPLOYONECORE-L1-1-0.DLL\r\nEXT-MS-WIN-AUTHZ-CLAIMPOLICIES-L1-1-0.DLL\r\nEXT-MS-WIN-AUTHZ-CONTEXT-L1-1-0.DLL\r\nEXT-MS-WIN-AUTHZ-REMOTE-L1-1-0.DLL\r\nEXT-MS-WIN-BIOMETRICS-WINBIO-CORE-L1-1-0.DLL\r\nEXT-MS-WIN-BIOMETRICS-WINBIO-CORE-L1-1-1.DLL\r\nEXT-MS-WIN-BRANDING-WINBRAND-L1-1-0.DLL\r\nEXT-MS-WIN-CI-MANAGEMENT-L1-1-0.DLL\r\nEXT-MS-WIN-CI-MANAGEMENT-L1-1-3.DLL\r\nEXT-MS-WIN-CNG-RNG-L1-1-1.DLL\r\nEXT-MS-WIN-COM-APARTMENTRESTRICTION-L1-1-0.DLL\r\nEXT-MS-WIN-COM-CLBCATQ-L1-1-0.DLL\r\nEXT-MS-WIN-COM-COML2-L1-1-1.DLL\r\nEXT-MS-WIN-COM-OLE32-L1-1-0.DLL\r\nEXT-MS-WIN-COM-OLE32-L1-1-1.DLL\r\nEXT-MS-WIN-COM-OLE32-L1-1-3.DLL\r\nEXT-MS-WIN-COM-OLE32-L1-1-5.DLL\r\nEXT-MS-WIN-COM-PSMREGISTER-L1-1-0.DLL\r\nEXT-MS-WIN-COM-SUSPENDRESILIENCY-L1-1-0.DLL\r\nEXT-MS-WIN-CORE-WINRT-REMOTE-L1-1-0.DLL\r\nEXT-MS-WIN-DESKTOPAPPX-L1-1-0.DLL\r\nEXT-MS-WIN-DESKTOPAPPX-L1-1-3.DLL\r\nEXT-MS-WIN-DEVMGMT-DM-L1-1-0.DLL\r\nEXT-MS-WIN-DEVMGMT-DM-L1-1-1.DLL\r\nEXT-MS-WIN-DEVMGMT-DM-L1-1-2.DLL\r\nEXT-MS-WIN-DEVMGMT-POLICY-L1-1-0.DLL\r\nEXT-MS-WIN-DIRECT2D-DESKTOP-L1-1-0.DLL\r\nEXT-MS-WIN-DOMAINJOIN-NETJOIN-L1-1-0.DLL\r\nEXT-MS-WIN-DWMAPIDXGI-EXT-L1-1-0.DLL\r\nEXT-MS-WIN-DWMAPIDXGI-EXT-L1-1-1.DLL\r\nEXT-MS-WIN-DX-D3DKMT-DXCORE-L1-1-0.DLL\r\nEXT-MS-WIN-DX-D3DKMT-DXCORE-L1-1-3.DLL\r\nEXT-MS-WIN-DX-D3DKMT-GDI-L1-1-0.DLL\r\nEXT-MS-WIN-DX-DXDBHELPER-L1-1-0.DLL\r\nEXT-MS-WIN-DX-DXDBHELPER-L1-1-1.DLL\r\nEXT-MS-WIN-DX-DXDBHELPER-L1-1-2.DLL\r\nEXT-MS-WIN-DXCORE-INTERNAL-L1-1-0.DLL\r\nEXT-MS-WIN-DXCORE-L1-1-0.DLL\r\nEXT-MS-WIN-EDPUTIL-POLICY-L1-1-0.DLL\r\nEXT-MS-WIN-EDPUTIL-POLICY-L1-1-1.DLL\r\nEXT-MS-WIN-ELS-ELSCORE-L1-1-0.DLL\r\nEXT-MS-WIN-EVENTING-RUNDOWN-L1-1-0.DLL\r\nEXT-MS-WIN-FECLIENT-ENCRYPTEDFILE-L1-1-0.DLL\r\nEXT-MS-WIN-FECLIENT-ENCRYPTEDFILE-L1-1-1.DLL\r\nEXT-MS-WIN-FECLIENT-ENCRYPTEDFILE-L1-1-2.DLL\r\nEXT-MS-WIN-FECLIENT-ENCRYPTEDFILE-L1-1-3.DLL\r\nEXT-MS-WIN-FIREWALLAPI-WEBPROXY-L1-1-0.DLL\r\nEXT-MS-WIN-FIREWALLAPI-WEBPROXY-L1-1-1.DLL\r\nEXT-MS-WIN-FVEAPI-QUERY-L1-1-0.DLL\r\nEXT-MS-WIN-GAMING-DEVICEFAMILY-L1-1-0.DLL\r\nEXT-MS-WIN-GDI-CLIPPING-L1-1-0.DLL\r\nEXT-MS-WIN-GDI-DC-CREATE-L1-1-0.DLL\r\nEXT-MS-WIN-GDI-DC-L1-2-0.DLL\r\nEXT-MS-WIN-GDI-DC-L1-2-1.DLL\r\nEXT-MS-WIN-GDI-DEVCAPS-L1-1-0.DLL\r\nEXT-MS-WIN-GDI-DRAW-L1-1-0.DLL\r\nEXT-MS-WIN-GDI-DRAW-L1-1-1.DLL\r\nEXT-MS-WIN-GDI-DRAW-L1-1-2.DLL\r\nEXT-MS-WIN-GDI-DRAW-L1-1-3.DLL\r\nEXT-MS-WIN-GDI-EDGEGDI-L1-1-0.DLL\r\nEXT-MS-WIN-GDI-FONT-L1-1-0.DLL\r\nEXT-MS-WIN-GDI-FONT-L1-1-1.DLL\r\nEXT-MS-WIN-GDI-FONT-L1-1-2.DLL\r\nEXT-MS-WIN-GDI-FONT-L1-1-3.DLL\r\nEXT-MS-WIN-GDI-INTERNAL-DESKTOP-L1-1-0.DLL\r\nEXT-MS-WIN-GDI-INTERNAL-DESKTOP-L1-1-1.DLL\r\nEXT-MS-WIN-GDI-INTERNAL-DESKTOP-L1-1-2.DLL\r\nEXT-MS-WIN-GDI-INTERNAL-DESKTOP-L1-1-3.DLL\r\nEXT-MS-WIN-GDI-INTERNAL-DESKTOP-L1-1-4.DLL\r\nEXT-MS-WIN-GDI-INTERNAL-UAP-INIT-L1-1-0.DLL\r\nEXT-MS-WIN-GDI-METAFILE-L1-1-0.DLL\r\nEXT-MS-WIN-GDI-METAFILE-L1-1-1.DLL\r\nEXT-MS-WIN-GDI-METAFILE-L1-1-2.DLL\r\nEXT-MS-WIN-GDI-PATH-L1-1-0.DLL\r\nEXT-MS-WIN-GDI-PRINT-L1-1-0.DLL\r\nEXT-MS-WIN-GDI-PRIVATE-L1-1-0.DLL\r\nEXT-MS-WIN-GDI-RENDER-L1-1-0.DLL\r\nEXT-MS-WIN-GDI-WCS-L1-1-0.DLL\r\nEXT-MS-WIN-GPAPI-GROUPPOLICY-L1-1-0.DLL\r\nEXT-MS-WIN-HOSTACTIVITYMANAGER-HAM-PRIVATE-EXT-L1-1-0.DLL\r\nEXT-MS-WIN-IMM-L1-1-0.DLL\r\nEXT-MS-WIN-KERNEL32-APPCOMPAT-L1-1-0.DLL\r\nEXT-MS-WIN-KERNEL32-DATETIME-L1-1-0.DLL\r\nEXT-MS-WIN-KERNEL32-ERRORHANDLING-L1-1-0.DLL\r\nEXT-MS-WIN-KERNEL32-FILE-L1-1-0.DLL\r\nEXT-MS-WIN-KERNEL32-LOCALIZATION-L1-1-0.DLL\r\nEXT-MS-WIN-KERNEL32-PACKAGE-CURRENT-L1-1-0.DLL\r\nEXT-MS-WIN-KERNEL32-PACKAGE-L1-1-0.DLL\r\nEXT-MS-WIN-KERNEL32-PACKAGE-L1-1-2.DLL\r\nEXT-MS-WIN-KERNEL32-QUIRKS-L1-1-0.DLL\r\nEXT-MS-WIN-KERNEL32-QUIRKS-L1-1-1.DLL\r\nEXT-MS-WIN-KERNEL32-REGISTRY-L1-1-0.DLL\r\nEXT-MS-WIN-KERNEL32-SIDEBYSIDE-L1-1-0.DLL\r\nEXT-MS-WIN-KERNELBASE-PROCESSTHREAD-L1-1-0.DLL\r\nEXT-MS-WIN-KERNELBASE-PROCESSTHREAD-L1-1-1.DLL\r\nEXT-MS-WIN-KERNELBASE-PROCESSTHREAD-L1-1-2.DLL\r\nEXT-MS-WIN-LAPS-L1-1-0.DLL\r\nEXT-MS-WIN-MININPUT-INPUTHOST-L1-1-0.DLL\r\nEXT-MS-WIN-MPR-MULTIPLEPROVIDERROUTER-L1-1-0.DLL\r\nEXT-MS-WIN-MRMCORER-RESMANAGER-L1-1-0.DLL\r\nEXT-MS-WIN-NETPROVISION-NETPROVFW-L1-1-0.DLL\r\nEXT-MS-WIN-NETWORKING-WCMAPI-L1-1-0.DLL\r\nEXT-MS-WIN-NTDSA-ACTIVEDIRECTORYSERVER-L1-1-0.DLL\r\nEXT-MS-WIN-NTDSAPI-ACTIVEDIRECTORYCLIENT-L1-1-0.DLL\r\nEXT-MS-WIN-NTDSAPI-ACTIVEDIRECTORYCLIENT-L1-1-1.DLL\r\nEXT-MS-WIN-NTUSER-DC-ACCESS-EXT-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-DIALOGBOX-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-DIALOGBOX-L1-1-1.DLL\r\nEXT-MS-WIN-NTUSER-DRAW-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-GUI-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-GUI-L1-3-0.DLL\r\nEXT-MS-WIN-NTUSER-KEYBOARD-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-MESSAGE-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-MESSAGE-L1-1-1.DLL\r\nEXT-MS-WIN-NTUSER-MISC-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-MISC-L1-2-0.DLL\r\nEXT-MS-WIN-NTUSER-MOUSE-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-PRIVATE-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-PRIVATE-L1-1-1.DLL\r\nEXT-MS-WIN-NTUSER-RECTANGLE-EXT-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-ROTATIONMANAGER-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-STRING-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-SYNCH-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-UICONTEXT-EXT-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-WINDOW-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-WINDOW-L1-1-1.DLL\r\nEXT-MS-WIN-NTUSER-WINDOW-L1-1-2.DLL\r\nEXT-MS-WIN-NTUSER-WINDOW-L1-1-3.DLL\r\nEXT-MS-WIN-NTUSER-WINDOWCLASS-L1-1-0.DLL\r\nEXT-MS-WIN-NTUSER-WINDOWSTATION-L1-1-0.DLL\r\nEXT-MS-WIN-OLE32-BINDCTX-L1-1-0.DLL\r\nEXT-MS-WIN-OLE32-IE-EXT-L1-1-0.DLL\r\nEXT-MS-WIN-OLE32-OLEAUTOMATION-L1-1-0.DLL\r\nEXT-MS-WIN-OOBE-QUERY-L1-1-0.DLL\r\nEXT-MS-WIN-PACKAGEVIRTUALIZATIONCONTEXT-L1-1-0.DLL\r\nEXT-MS-WIN-PROFILE-EXTENDER-L1-1-0.DLL\r\nEXT-MS-WIN-PROFILE-USERENV-L1-1-0.DLL\r\nEXT-MS-WIN-PROFILE-USERENV-L1-1-1.DLL\r\nEXT-MS-WIN-RAS-RASAPI32-L1-1-0.DLL\r\nEXT-MS-WIN-REINFO-QUERY-L1-1-0.DLL\r\nEXT-MS-WIN-RESOURCEMANAGER-CRM-L1-2-0.DLL\r\nEXT-MS-WIN-RESOURCEMANAGER-CRM-PRIVATE-EXT-L1-1-0.DLL\r\nEXT-MS-WIN-RO-TYPERESOLUTION-L1-1-0.DLL\r\nEXT-MS-WIN-RPC-SSL-L1-1-0.DLL\r\nEXT-MS-WIN-RTCORE-GDI-DEVCAPS-L1-1-0.DLL\r\nEXT-MS-WIN-RTCORE-GDI-OBJECT-L1-1-0.DLL\r\nEXT-MS-WIN-RTCORE-GDI-RGN-L1-1-0.DLL\r\nEXT-MS-WIN-RTCORE-MINUSER-INPUT-L1-1-1.DLL\r\nEXT-MS-WIN-RTCORE-MINUSER-INTERNAL-L1-1-0.DLL\r\nEXT-MS-WIN-RTCORE-MINUSER-PRIVATE-EXT-L1-1-0.DLL\r\nEXT-MS-WIN-RTCORE-MINUSER-PRIVATE-EXT-L1-1-1.DLL\r\nEXT-MS-WIN-RTCORE-MINUSER-PRIVATE-EXT-L1-1-2.DLL\r\nEXT-MS-WIN-RTCORE-NTUSER-CURSOR-L1-1-0.DLL\r\nEXT-MS-WIN-RTCORE-NTUSER-DC-ACCESS-L1-1-0.DLL\r\nEXT-MS-WIN-RTCORE-NTUSER-DPI-L1-1-0.DLL\r\nEXT-MS-WIN-RTCORE-NTUSER-DPI-L1-2-0.DLL\r\nEXT-MS-WIN-RTCORE-NTUSER-DPI-L1-2-1.DLL\r\nEXT-MS-WIN-RTCORE-NTUSER-IAM-L1-1-0.DLL\r\nEXT-MS-WIN-RTCORE-NTUSER-INTEGRATION-L1-1-0.DLL\r\nEXT-MS-WIN-RTCORE-NTUSER-SYNCH-EXT-L1-1-0.DLL\r\nEXT-MS-WIN-RTCORE-NTUSER-SYSPARAMS-L1-1-0.DLL\r\nEXT-MS-WIN-RTCORE-NTUSER-WINDOW-EXT-L1-1-0.DLL\r\nEXT-MS-WIN-SAMSRV-ACCOUNTSTORE-L1-1-0.DLL\r\nEXT-MS-WIN-SECUR32-TRANSLATENAME-L1-1-0.DLL\r\nEXT-MS-WIN-SECURITY-CAPAUTHZ-L1-1-0.DLL\r\nEXT-MS-WIN-SECURITY-CAPAUTHZ-L1-1-1.DLL\r\nEXT-MS-WIN-SECURITY-CHAMBERS-L1-1-0.DLL\r\nEXT-MS-WIN-SECURITY-CREDUI-INTERNAL-L1-1-0.DLL\r\nEXT-MS-WIN-SECURITY-CREDUI-L1-1-0.DLL\r\nEXT-MS-WIN-SECURITY-CRYPTUI-L1-1-0.DLL\r\nEXT-MS-WIN-SECURITY-CRYPTUI-L1-1-1.DLL\r\nEXT-MS-WIN-SECURITY-EFS-L1-1-0.DLL\r\nEXT-MS-WIN-SECURITY-EFSWRT-L1-1-0.DLL\r\nEXT-MS-WIN-SECURITY-LSAADT-L1-1-0.DLL\r\nEXT-MS-WIN-SECURITY-LSAADTPRIV-L1-1-0.DLL\r\nEXT-MS-WIN-SECURITY-LSAAUDITRPC-L1-1-0.DLL\r\nEXT-MS-WIN-SECURITY-NGC-LOCAL-L1-1-0.DLL\r\nEXT-MS-WIN-SECURITY-VAULTCLI-L1-1-0.DLL\r\nEXT-MS-WIN-SECURITY-WINSCARD-L1-1-0.DLL\r\nEXT-MS-WIN-SECURITY-WINSCARD-L1-1-1.DLL\r\nEXT-MS-WIN-SESSION-USERMGR-L1-1-0.DLL\r\nEXT-MS-WIN-SESSION-USERTOKEN-L1-1-0.DLL\r\nEXT-MS-WIN-SESSION-WINSTA-L1-1-0.DLL\r\nEXT-MS-WIN-SESSION-WTSAPI32-L1-1-0.DLL\r\nEXT-MS-WIN-SESSION-WTSAPI32-L1-1-1.DLL\r\nEXT-MS-WIN-SHELL-DIRECTORY-L1-1-0.DLL\r\nEXT-MS-WIN-SHELL-EMBEDDEDMODE-L1-1-0.DLL\r\nEXT-MS-WIN-SHELL-SHELL32-L1-2-0.DLL\r\nEXT-MS-WIN-SHELL-SHLWAPI-L1-1-0.DLL\r\nEXT-MS-WIN-SHELL32-SHELLCOM-L1-1-0.DLL\r\nEXT-MS-WIN-SHELL32-SHELLFOLDERS-L1-1-0.DLL\r\nEXT-MS-WIN-SMBSHARE-BROWSERCLIENT-L1-1-0.DLL\r\nEXT-MS-WIN-SXS-OLEAUTOMATION-L1-1-0.DLL\r\nEXT-MS-WIN-SYSMAIN-PLMAPI-L1-1-0.DLL\r\nEXT-MS-WIN-UI-VIEWMANAGEMENT-L1-1-0.DLL\r\nEXT-MS-WIN-WER-UI-L1-1-0.DLL\r\nEXT-MS-WIN-WER-XBOX-L1-1-0.DLL\r\nEXT-MS-WIN-WER-XBOX-L1-1-2.DLL\r\nEXT-MS-WIN-WER-XBOX-L1-1-3.DLL\r\nEXT-MS-WIN-WER-XBOX-L1-1-4.DLL\r\nEXT-MS-WIN-WEVTAPI-EVENTLOG-L1-1-0.DLL\r\nEXT-MS-WIN-WEVTAPI-EVENTLOG-L1-1-2.DLL\r\nEXT-MS-WIN-WEVTAPI-EVENTLOG-L1-1-3.DLL\r\nEXT-MS-WIN-WINRT-DEVICE-ACCESS-L1-1-0.DLL\r\nEXT-MS-WIN-WINRT-STORAGE-WIN32BROKER-L1-1-0.DLL\r\nEXT-MS-WIN-WLAN-SCARD-L1-1-0.DLL\r\nEXT-MS-WIN-WWAN-WWAPI-L1-1-0.DLL\r\nEXT-MS-WIN-WWAN-WWAPI-L1-1-1.DLL\r\nEXT-MS-WIN32-SUBSYSTEM-QUERY-L1-1-0.DLL\r\nEXT-MS-WINDOWSCORE-DEVICEINFO-L1-1-0.DLL\r\nWPAXHOLDER.DLL\r\n```\r\n\r\n> You might also be able to run `dumpbin \/imports _path.cp311-win_amd64.pyd` from the MSVC command prompt.\r\n\r\nHere's the output:\r\n```\r\nD:\\Projekte\\miscellaneous_git_repos\\matplotlib\\build\\cp311\\src>dumpbin \/imports _path.cp311-win_amd64.pyd\r\nMicrosoft (R) COFF\/PE Dumper Version 14.37.32825.0\r\nCopyright (C) Microsoft Corporation.  All rights reserved.\r\n\r\n\r\nDump of file _path.cp311-win_amd64.pyd\r\n\r\nFile Type: DLL\r\n\r\n  Section contains the following imports:\r\n\r\n    libgcc_s_seh-1.dll\r\n             1FB0793B8 Import Address Table\r\n             1FB079078 Import Name Table\r\n                     0 time date stamp\r\n                     0 Index of first forwarder reference\r\n\r\n                           F _Unwind_Resume\r\n\r\n    KERNEL32.dll\r\n             1FB0793C8 Import Address Table\r\n             1FB079088 Import Name Table\r\n                     0 time date stamp\r\n                     0 Index of first forwarder reference\r\n\r\n                         119 DeleteCriticalSection\r\n                         13D EnterCriticalSection\r\n                         274 GetLastError\r\n                         37A InitializeCriticalSection\r\n                         3D6 LeaveCriticalSection\r\n                         57F Sleep\r\n                         5A2 TlsGetValue\r\n                         5D1 VirtualProtect\r\n                         5D3 VirtualQuery\r\n\r\n    msvcrt.dll\r\n             1FB079418 Import Address Table\r\n             1FB0790D8 Import Name Table\r\n                     0 time date stamp\r\n                     0 Index of first forwarder reference\r\n\r\n                          54 __iob_func\r\n                          63 __setusermatherr\r\n                          7C _amsg_exit\r\n                          CF _errno\r\n                         151 _initterm\r\n                         1C0 _lock\r\n                         343 _unlock\r\n                         41E abort\r\n                         41F acos\r\n                         42F calloc\r\n                         457 free\r\n                         464 fwrite\r\n                         49C memcpy\r\n                         49D memmove\r\n                         49E memset\r\n                         4B3 realloc\r\n                         4D3 strlen\r\n                         4D6 strncmp\r\n                         4F9 vfprintf\r\n\r\n    libstdc++-6.dll\r\n             1FB0794B8 Import Address Table\r\n             1FB079178 Import Name Table\r\n                     0 time date stamp\r\n                     0 Index of first forwarder reference\r\n\r\n                         BAC _ZNSt13runtime_errorC1EPKc\r\n                         BB6 _ZNSt13runtime_errorD1Ev\r\n                        1128 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEyyPKcy\r\n                        1151 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc\r\n                        1182 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEyyPKcy\r\n                        1187 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEy\r\n                        118A _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcy\r\n                        118E _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEyyPKcy\r\n                        1190 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc\r\n                        14B2 _ZNSt9bad_allocD1Ev\r\n                        14E2 _ZNSt9exceptionD2Ev\r\n                        152E _ZSt17__throw_bad_allocv\r\n                        1546 _ZSt20__throw_length_errorPKc\r\n                        1557 _ZSt24__throw_out_of_range_fmtPKcz\r\n                        155B _ZSt28__throw_bad_array_new_lengthv\r\n                        18CC _ZTVN10__cxxabiv117__class_type_infoE\r\n                        18D1 _ZTVN10__cxxabiv120__si_class_type_infoE\r\n                        1992 _ZTVSt9bad_alloc\r\n                        19F7 _ZdaPv\r\n                        1A01 _ZdlPvy\r\n                        1A03 _Znay\r\n                        1A07 _Znwy\r\n                        1A0E __cxa_allocate_exception\r\n                        1A11 __cxa_begin_catch\r\n                        1A17 __cxa_end_catch\r\n                        1A19 __cxa_free_exception\r\n                        1A22 __cxa_rethrow\r\n                        1A23 __cxa_throw\r\n                        1A35 __gxx_personality_seh0\r\n\r\n    python311.dll\r\n             1FB0795A8 Import Address Table\r\n             1FB079268 Import Name Table\r\n                     0 time date stamp\r\n                     0 Index of first forwarder reference\r\n\r\n                          1E PyBytes_AsString\r\n                          27 PyBytes_FromStringAndSize\r\n                          3A PyCapsule_GetPointer\r\n                          42 PyCapsule_Type\r\n                          B2 PyErr_Clear\r\n                          B6 PyErr_Format\r\n                          BF PyErr_Occurred\r\n                          C0 PyErr_Print\r\n                          D9 PyErr_SetString\r\n                          FD PyExc_AttributeError\r\n                         114 PyExc_ImportError\r\n                         11D PyExc_MemoryError\r\n                         123 PyExc_OverflowError\r\n                         12A PyExc_RuntimeError\r\n                         134 PyExc_TypeError\r\n                         13C PyExc_ValueError\r\n                         150 PyFloat_AsDouble\r\n                         198 PyImport_ImportModule\r\n                         1B6 PyList_New\r\n                         1B8 PyList_SetItem\r\n                         1CB PyLong_FromLong\r\n                         1EA PyMem_Free\r\n                         209 PyModule_Create2\r\n                         24A PyOS_double_to_string\r\n                         24F PyOS_snprintf\r\n                         27B PyObject_GetAttrString\r\n                         280 PyObject_HasAttrString\r\n                         288 PyObject_IsTrue\r\n                         2BD PySequence_Check\r\n                         2C4 PySequence_GetItem\r\n                         2CF PySequence_Size\r\n                         2D0 PySequence_Tuple\r\n                         36C PyUnicode_AsASCIIString\r\n                         43D _PyArg_ParseTupleAndKeywords_SizeT\r\n                         43E _PyArg_ParseTuple_SizeT\r\n                         515 _PyObject_CallMethod_SizeT\r\n                         5D4 _Py_BuildValue_SizeT\r\n                         5DA _Py_Dealloc\r\n                         5EA _Py_FalseStruct\r\n                         60A _Py_NoneStruct\r\n                         615 _Py_TrueStruct\r\n\r\n  Summary\r\n\r\n        1000 .CRT\r\n        1000 .bss\r\n        1000 .data\r\n        3000 .debug_abbrev\r\n        1000 .debug_aranges\r\n        1000 .debug_frame\r\n        B000 .debug_info\r\n        3000 .debug_line\r\n        3000 .debug_line_str\r\n        3000 .debug_loclists\r\n        1000 .debug_rnglists\r\n        1000 .debug_str\r\n        1000 .edata\r\n        2000 .idata\r\n        1000 .pdata\r\n        3000 .rdata\r\n        1000 .reloc\r\n       1F000 .text\r\n        1000 .tls\r\n        2000 .xdata\r\n```","> Out of curiosity, do you get the same error when you try to import Matplotlib outside the repo?\r\n\r\nYes, same thing.","> ```\r\n> libgcc_s_seh-1.dll\r\n> libstdc++-6.dll\r\n> ```\r\n\r\nThis extension was compiled with `gcc`. Did you install the `gcc` compilers from conda? (Our `environment.yml` doesn't do that.) Or were you planning to use MSVC? I think you might have Strawberry Perl installed, which is failing the same way as https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27168#issuecomment-1776842704.","> This extension was compiled with `gcc`. Did you install the `gcc` compilers from conda? (Our `environment.yml` doesn't do that.) Or were you planning to use MSVC?\r\n\r\nNo, I used `gcc` from MSYS2 (on purpose). My understanding from the docs was that this should also work. Or did I misunderstand something?\r\n\r\nI did try it with MSVC instead now and that seems to work. But reading about the [build dependencies](https:\/\/matplotlib.org\/devdocs\/devel\/dependencies.html#compiled-extensions) again it still seems to me that `gcc` should work as an alternative..\r\n\r\n> I think you might have Strawberry Perl installed, which is failing the same way as [#27168 (comment)](https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27168#issuecomment-1776842704).\r\n\r\nI do not have Strawberry Perl installed, no. (Though it is possible that I did in the past; I'm not sure. Could that still cause problems?)","> No, I used `gcc` from MSYS2 (on purpose). My understanding from the docs was that this should also work. Or did I misunderstand something?\r\n\r\nYou have understood correctly; it should be allowed, but I don't think it has been tested or confirmed to work. But that's why we don't pass `--vsenv` by default.\r\n\r\nSince the imports seem to list some MSYS2 DLLs, but Dependency Walker can't find them, I think you would need to ensure your MSYS2 DLL directories are in your `PATH`.\r\n\r\nYou might also be able to pass `-static-libstdc++` to gcc so it bundles the libraries, but that's definitely in untested waters.","> Since the imports seem to list some MSYS2 DLLs, but Dependency Walker can't find them, I think you would need to ensure your MSYS2 DLL directories are in your `PATH`.\r\n\r\n`C:\\msys64\\mingw64\\bin` is in my `PATH`, but there aren't many DLLs there. There are a lot of subfolders in the `msys64` directory with DLLs, so it seems impractical to add all of them.\r\n\r\n> You might also be able to pass `-static-libstdc++` to gcc so it bundles the libraries, but that's definitely in untested waters.\r\n\r\nOk, thanks for all of your pointers. I think I will stick with MSVC for now, as that seems to work.\r\n\r\nFeel free to close this issue or leave it open if you want to do something about this on your end. I'm happy to help by testing but I fear that I can't be much help other than that."],"labels":["OS: Microsoft","Build"]},{"title":"[ENH]: Handling of closed streamlines in streamplot","body":"### Problem\r\n\r\nWith the current streamplot implementation, when asking for unbroken streamlines with given start points on fields with theoretically closed streamlines, the integration process spirals in practice until the maximum trajectory length is reached. The issue is more detailed, with an example and a workaround in [this stack overflow question and answer](https:\/\/stackoverflow.com\/questions\/77344931\/how-can-i-avoid-spiraling-streamlines-in-matplotlib-pyplot-streamplot). When it is theoretically known that some streamlines should loop over themselves, we would like to be able to specify it and integrate the streamlines so that they are actually closed or, at least, stop the integration when a \"quasi-loop\" has been detected, by passing again close enough to a start point and\/or when a 360 degrees rotation has been observed for the velocity vector.\r\n\r\n### Proposed solution\r\n\r\nA minimal and quite easy solution for single-direction integration could be to keep track of the accumulated rotation of the velocity vector along the trajectory, to continuously check the distance between the starting point and additional segments and to stop the integration at the closest point to the starting point after about one complete plus or minus 360 degrees velocity vector rotation and if the closest point is close enough to the starting point. Something similar though a bit more complicated could be done for two-direction integration.\r\n\r\nA second-level solution would be to do exactly the same but while additionally modifying \"on the fly\" the original vector field with a very small rotation so that, after the integration, \"the closest point to the starting point\" becomes as close as possible to the starting point. The optimal \"very small rotation\" angle could be theoretically predicted and\/or iteratively determined. Though this may appear as tampering with the source data, if there are good theoretical reasons to believe that the streamlines should be closed (the user should know what she or he is doing when using the \"force_closed_streamlines\" option), this is overall more likely to correct accumulated integration errors than to distort the result.\r\n\r\nHaving looked at the code, it seems to me that I should be able to implement this and maybe I will do so anyway for my personal use as the workaround that I am currently using is very impractical. However, it would certainly be done much better by matplotlib developers. Please let me know if this feature if of interest, if some matplotlib developers would consider implementing it, and if yes, how long it could take.","comments":["If I wanted closed streamlines, I'd calculate the stream function and contour that.  In fact if I was sure that the vector field was non-divergent, I'd always do that anyways rather than using `streamplot`.  Making the end of a streamline exactly hit the starting point of a streamline is going to be very difficult and any fuzzy logic is going to be incorrect for some vector fields.","> If I wanted closed streamlines, I'd calculate the stream function and contour that. In fact if I was sure that the vector field was non-divergent, I'd always do that anyways rather than using `streamplot`. Making the end of a streamline exactly hit the starting point of a streamline is going to be very difficult and any fuzzy logic is going to be incorrect for some vector fields.\r\n\r\nI would indeed do that if I had a direct access to the potential function from which the field is derived. There theoretically exists one for the fields I am considering but I do not have access to it and I don't know either how to reconstruct it from the field itself. Therefore, I don't know what to contour. Making the end of a streamline \"exactly\" hit the starting point of a streamline is a bit complicated to implement but a priori doable. I don't see what fuzzy logic has to do with fields nor what the issue would be.\r\n\r\n","Because the streamplot is just an approximation, it is very unlikely the streamlines start and ends will exactly match up numerically, so you would need to have a tolerance to say a streamline is \"touching\" itself and call it closed.  \r\n\r\nYou empirically calculate the stream function from the velocity field by psi = -du\/dy and\/or dv\/dx and integrate using known boundary conditions (usually that a boundary is a streamline).   The resulting stream function is also just an approximation, but subsequently calling `contour` will give you closed (approximate) contours.  \r\n\r\nPerhaps this should be an example, but I don't think there is a way to add it to streamplot.  ","> You empirically calculate the stream function from the velocity field by psi = -du\/dy and\/or dv\/dx and integrate using known boundary conditions (usually that a boundary is a streamline). The resulting stream function is also just an approximation, but subsequently calling `contour` will give you closed (approximate) contours.\r\n\r\nGreat! I learned something today, thanks a lot! Actually, it is u = dpsi\/dy and v = -dpsi\/dx but I got the idea and the code is just;\r\n```\r\ndx, dy = x[0,1]-x[0,0], y[1,0]-y[0,0]\r\npsi = np.cumsum(u,axis=0)*dy-np.cumsum(v[0:1,:],axis=1)*dx\r\nplt.contour(x, y, psi, levels = 31)\r\n```\r\nIt seems to work well with magnetic fields generated using magpylib. Fixing the starting points should be easy.\r\nWith that, it seems pointless to implement a \"close_streamline\" feature in streamplot, at least for me.","Lets reopen as a documentation request, as I think a nice example along these lines would be very helpful to point folks towards...","Sure, it would have saved me time if I had encountered this before. I will also make the suggestion on the magpylib side.","Hoping this helps, I have provided an  [example with magpylib on stack overflow](https:\/\/stackoverflow.com\/a\/77419388\/13707125).","@quenot would you like to also add your example to our docs by adding a new example in https:\/\/github.com\/matplotlib\/matplotlib\/tree\/main\/galleries\/examples\/images_contours_and_fields ? ","@story645 Sure, I am preparing [something a bit better finished and complete for magpylib](https:\/\/github.com\/magpylib\/magpylib\/discussions\/677). I will be happy to share it on the matplotlib side too. It may take a few days. I'll let you know when it is ready.","Just a heads up that we are very unlikely to accept magpylib as a documentation dependency.  ","@jklymak I expected that and it makes sense. I will just have to use another source field. Everything else should not change.","As a side point, I also think your SO post may be showing a real bug wrt. masking? (the streamlines that cross the masked region due to a too-large step size?)","@anntzer Yes, I feel that this is a bug as I mentioned in my SO post. Actually, I would not only expect the streamlines not to go though masked region but I would also expect them to reach the boundary of the masked region when possible by some kind of Euler step there too. Having looked at the code, both do not seem easy to implement.\r\n\r\nReducing the step size seems to be a reasonable and easy workaround even if it slows down the computation (checking for masked region crossing would be costly too anyway). It seems that the only way to control the step size is by increasing the density as the step size is bounded so that the step cannot go through more than one density cell at once. Maybe a direct control of the step size as an additional parameter to streamplot would be more convenient (there is a hard default value at 0.1 in the code). This parameter might also be used to control the accuracy of the integration in complement of the grid resolution.","@jklymak @story645 @anntzer \r\nHello.\r\nHere are some news. Regarding the stream function approach, unfortunately, it turned out to be quite unstable and\/or complicated to make work as expected, especially in the case of magnets, as this is discussed in https:\/\/github.com\/magpylib\/magpylib\/issues\/678#issuecomment-1803421634\r\nHowever, I finally implemented, with the help of @Alexboiboi, the solution that I initially proposed above: https:\/\/github.com\/magpylib\/magpylib\/issues\/678#issuecomment-1807193641. It currently relies on pyvista, which is a dependency that I guess you are also very unlikely to accept. It is like that because I built upon a partial implementation from @Alexboiboi which was based on it and also because matplotlib's streamplot does not currently return the streamlines without plotting them and modifying them after they have been returned does not act back on the plot but the \"hard part\" does not rely itself on pyvista.\r\nI believe that it can be quite easily integrated directly in matplotlib's streamplot as a \"close_streamlines\" option if you think that this can be of interest to matplotlib users.\r\nIt has not been intensively tested but it successfully worked in two hard cases: degenerated (theoretically reduced to one point) streamlines and streamlines with (theoretically) abrupt changes in direction. With non-singular streamlines, the looping is already very good and the distortion is very small, almost unnecessary. For what I got, pyvista default's and matplotlib's integration methods are in principle the same."],"labels":["Documentation","topic: contour","Documentation: examples"]},{"title":"Fixes : Add setter\/getter methods for all keyword parameters to Figure.__init__ #24617","body":"\r\n\r\n## PR summary\r\nThis fixes Add setter\/getter methods for all keyword parameters to Figure.__init__ #24617\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/issues\/24617\r\n. It adds getters and setters for : \r\nSubplotBars\r\nFigsize \r\nLayout .\r\nIt cherry picks  code from #21549\r\nas well as adding missing get\/set for figsize \r\n-->\r\n\r\n\r\n- [ ] \"closes #24617 \" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] Testing has been added however this is my first PR and I am a bit unsure about the testing so some help with this would be great \r\n\r\n\r\n","comments":["Thanks for taking this on! Since you're building on a previous committees work, can you please  add them as a coauthor https:\/\/docs.github.com\/en\/pull-requests\/committing-changes-to-your-project\/creating-and-editing-commits\/creating-a-commit-with-multiple-authors","> Thanks for taking this on! Since you're building on a previous committees work, can you please add them as a coauthor https:\/\/docs.github.com\/en\/pull-requests\/committing-changes-to-your-project\/creating-and-editing-commits\/creating-a-commit-with-multiple-authors\r\n\r\nThanks for letting me know, ill take a look and do that","Co author : @stanleyjs added to commits ","Thanks for pointing that out ill look through and see if i can fix some of them  ","Im looking through the errors and trying to fix, but bit confused about the meaning of this one, any pointers appreciated\r\n\r\n Stub: in file lib\/matplotlib\/figure.pyi\r\nMISSING\r\nRuntime: in file lib\/matplotlib\/figure.py:2930\r\n<function Figure.set_layout at 0x7f56cf17f9d0>\r\n","Tests should be added to https:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/lib\/matplotlib\/tests\/test_figure.py and not put in a new file -> I think that's why coverage thinks nothing is tested. And that error is I think cause you need to add the new setter\/getter methods to https:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/lib\/matplotlib\/figure.pyi\r\n\r\nsee https:\/\/matplotlib.org\/devdocs\/devel\/contribute.html#type-hints"],"labels":["status: needs rebase"]},{"title":"[Doc]: PyData NYC Tagging Sprint","body":"The following issue is restricted to folks participating in-person at the PyData New York Sprints on Oct 31st. Eventually we plan to open participation to everyone, but are starting with a small group to work out how to scale this in a managable way. \r\n\r\n## Introduction\r\nWe're improving the user experience of Matplotlib's [gallery of examples](https:\/\/matplotlib.org\/stable\/gallery\/index.html) by implementing tags for better organization and navigability. Over the last few months, we developed [tagging guidelines](https:\/\/matplotlib.org\/devdocs\/devel\/tag_guidelines.html) and began to tag some examples. Now we're ready to see what we can do with more brains on the project. \r\n\r\n## Participants\r\nHey folks, thanks for helping us tag our gallery. This sprint has two stages: \r\n* **NO CODE:** Tag gallery examples in our [tagging spreadsheet](https:\/\/docs.google.com\/spreadsheets\/d\/1jQvbda6g7P22iKZYelQ0LXF77y7qHeW2yxA5vMDcMos\/edit?usp=sharing)\r\n* **LOW CODE (*optional*):** Add tags to gallery examples using the `tag` directive\r\n\r\nTo participate, please:\r\n* [Sign up for github](https:\/\/github.com\/signup?)\r\n* **Claim an untagged example:** add your github handle to our [tagging spreadsheet](https:\/\/docs.google.com\/spreadsheets\/d\/1jQvbda6g7P22iKZYelQ0LXF77y7qHeW2yxA5vMDcMos\/edit?usp=sharing)\r\n    * Please do not work on an example that has already been tagged by someone else\r\n\r\n### Tag examples\r\nAdd tags to the spreadsheet following these instructions:\r\n#### To add a single tag:\r\n1. Add your Github handle to Column K\r\n2. Type the tag you want to add in Column G\r\n#### To add multiple tags (manual method)\r\n1. Add your Github Handle to Column K\r\n2. You can type the tags in manually, just make sure to double check that the formatting is correct. Each tag is in the format `subcategory: tag`, and multiple tags **must be separated by commas**.\r\n\r\n\r\n### Convert tags to pull request (*optional*)\r\nPlease only open pull requests for entries you have tagged, unless you have gotten permission from the person who tagged those entries. \r\n\r\n1. Create a fork and development environment as described in our [pull request guide](https:\/\/matplotlib.org\/devdocs\/devel\/contribute.html#how-to-contribute)\r\n2. Add tags as described in our [tagging guide](https:\/\/matplotlib.org\/devdocs\/devel\/tag_guidelines.html)\r\n3. Follow the rest of the instructions in the [pull request guide](https:\/\/matplotlib.org\/devdocs\/devel\/contribute.html#how-to-contribute) to create a pull request\r\n    * If you're working on an entry tagged by someone else, add them as a [co-author](https:\/\/docs.github.com\/en\/pull-requests\/committing-changes-to-your-project\/creating-and-editing-commits\/creating-a-commit-with-multiple-authors)\r\n4. Add a link to the PR to the [spreadsheet](https:\/\/docs.google.com\/spreadsheets\/d\/1jQvbda6g7P22iKZYelQ0LXF77y7qHeW2yxA5vMDcMos\/edit?usp=sharing) entry\r\n\r\n### Propose a new tag\r\nDuring the tagging sprint, you can propose new tags by adding them to the `propose new tags` sheet in the spreadsheet. After the tagging sprint, new tag proposals will new issues. Check the `propose new tags` sheet for instructions and a place for proposed tags. \r\n\r\n## Maintainers\r\nHey folks, thanks for your help! Please add tagging pull requests to the [Gallery Tagging Project](https:\/\/github.com\/orgs\/matplotlib\/projects\/6) and milestone for 3.9.0.\n\nIf the pull request needs extra attention, please tag @esibinga, @melissawm or @story645\r\n\r\n","comments":["Are there any more examples to tagging ?","> Are there any more examples to tagging ?\n\nYeah, anything in the gallery can be tagged and anything that has tags can have more added to them. We just haven't been merging tags yet b\/c waiting on a sphinx-tags update."],"labels":["Documentation","mentored: sprint","Documentation: tags"]},{"title":"BUG:  .notdef glyph has to be present in fonts in fontlist","body":"              > This also happens with the xkcd plotting style using the \"Humor Sans\" font.\r\n\r\nSo uh, this is why #26854 is failing (the plt.xkcd examples seem to work because they don't have a negative in the labels anywhere): throws \"glyph missing\" warning for title, omits hyphen for ticks:\r\n![Figure_1](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/d79564f3-846b-40a3-b4d0-cbbd65b456fc)\r\n\r\n_Originally posted by @story645 in https:\/\/github.com\/matplotlib\/matplotlib\/issues\/17007#issuecomment-1786319109_\r\n\r\nper the discussion downthread, if a font does not have a designated [.notdef](https:\/\/en.wikipedia.org\/wiki\/Unicode_input#Availability) then the missing glyph character (the .notdef) is not rendered.\r\n\r\n# Suggested Fix\r\nFor this one character, we should have a fallback such that we always render some glyph when a glyph is not found. This is particularly because of situations like the missing - at the front of a text, where it may be easy to miss that it's missing.","comments":["what would you suggest we do about this?\r\n\r\nA glyph missing from a font is not really something we have control over.\r\n\r\nAlso, I just installed `Humor Sans` locally (from both http:\/\/antiyawn.com\/uploads\/humorsans.html and the debian archives), and it appears to work fine with the negative sign, including in the style reference that is failing in that PR.\r\n\r\nThis includes explicitly adding the text `\"-\\N{MINUS SIGN}\"`\r\n\r\nFurther the default formatter uses \"-\" (`chr(45)` not `chr(8722)`, as far as I can tell, so not sure where that is coming from? are we getting leaking rcParams from another example? \r\n\r\nPerhaps the xkcd style file should explicitly set `:rc:axes.unicode_minus` to `False`, as that may be the source of the unicode character being used. (Though I'll note that locally I _still_ did not get a warning when that rcparam was set to true)\r\n\r\nThis appears to be `False` by default, but seems related.\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/b318dbfd80b22709e269b3e7d0cad6e3312a2561\/lib\/matplotlib\/ticker.py#L253","> Perhaps the xkcd style file should explicitly set :rc:axes.unicode_minus to False\r\n\r\nAlready do: https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26854\/files#diff-c8d8664596e18df275867e8057148fa2f964640f41e0e89269b32ebd41c75836R13\r\n\r\nAnd this is the build error I get: https:\/\/output.circle-artifacts.com\/output\/job\/a08b57c8-782a-4b83-8c0d-6aa57dab2b41\/artifacts\/0\/doc\/build\/html\/gallery\/style_sheets\/style_sheets_reference.html#sphx-glr-gallery-style-sheets-style-sheets-reference-py\r\n\r\n> Also, I just installed Humor Sans locally (from both http:\/\/antiyawn.com\/uploads\/humorsans.html and the debian archives), and it appears to work fine with the negative sign, including in the style reference that is failing in that PR.\r\n\r\nAre you forcing it to only use `Humor Sans`? This is how I reproduced it - in jupyter and tkagg, w\/ dev and 3.7.1 \r\n\r\n```python\r\nmatplotlib.font_manager._load_fontmanager(try_read_cache=False)\r\nwith plt.xkcd():\r\n    mpl.rcParams['font.family'] = 'Humor Sans'\r\n    plt.plot([-2, 2])\r\n    t = plt.title(\"\\N{MINUS SIGN}\" + f\"{mpl.rcParams['axes.unicode_minus']}\", fontfamily=['Humor Sans'])\r\n    \r\n```\r\n\r\nI also don't get a build error when I build locally, only on CI. \r\n\r\n> A glyph missing from a font is not really something we have control over.\r\n\r\nYes but disappearing minus is concerning. I think what's happening here is we're not trying to replace the \\unicode_minus w\/ a regular minus and also not replacing it w\/ a tofu character. Which, a maybe related aside is that tofu characters seem to not work in xkcd mode -  `plt.text(0, 0, \"\ud83d\ude43\")` doesn't  show tofu either.  And again this is on 3.7 so it's independent from anything I've done in #26854 \r\n\r\nBasically, I think we only ever do the replacement in the `- -> '\\N{Minus SIGN}'' direction. \r\n\r\n\r\n","It looks like we get the tofu from the first font in the fallback list:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/cc46ee7bd0cbaa83257d0bc3f808ca42b8c0590e\/src\/ft2font.cpp#L515-L523\r\n\r\nwhich suggests that the tofu in that font is empty?\r\n\r\nMaybe the fix is to use a fallback font with Humor Sans?","> Maybe the fix is to use a fallback font with Humor Sans?\r\n\r\nI can do that in the gallery example, but is there something we can do that generalizes? which I think would mean shipping\/storing our own tofu glyph? ","I suspect that in `xkcd()` we can set the font to be something like `['humor sans', 'deja vu']` ?","I guess what I'm thinking is if someone who doesn't know that this is happening, if there's a way to make sure they see tofu. \r\n\r\nI will try adding dejavu to my list of fonts in xkcd.mplstyle\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/8dc310ed5395de222e69e78e3043918c98fd5cc7\/lib\/matplotlib\/mpl-data\/stylelib\/xkcd.mplstyle#L7","also yes no tofu:\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/590a80b0-8f61-4475-b06d-da3f1aa09bb1)\r\n\r\n","Ok, so for my immediate need for #26854 I can find a different font, but I think the resolution for this issue is that we should have a fallback for the missing glyph glyph such that it's visible in the image that the glyph is missing. \r\n","xref https:\/\/github.com\/has2k1\/plotnine\/issues\/451","### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the Matplotlib internals. To get started, please see our [contributing guide](https:\/\/matplotlib.org\/stable\/devel\/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull requests (PRs). If there are none, feel free to start working on it. If there is an open PR, please collaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication channels](https:\/\/matplotlib.org\/stable\/devel\/contributing.html#get-connected).","Good first issue cause the work is fairly independent of most of the matplotlib mechanics, but medium difficulty b\/c  it requires some experience to determine how to ensure that there's always a fallback glyph.\r\n\r\nOff hand, I think either:\r\n\r\n1) add a 1 character font to matplotlib that just defines a .notdef glyph\r\n2) have a default fallback to a system font that packages a .notdef glyph\r\n\r\nAnd then add a test that given a font where:\r\n* the .notdef character isn't defined, it fallsback to the default .notdef character. \r\n* .notdef is defined, it uses the font's notdef character","I am not convinced that this is something we want to do.\r\n\r\nDo we have any evidence that this is a wider problem than that one font? \r\n\r\nIf I am reading our code and https:\/\/freetype.org\/freetype2\/docs\/tutorial\/step2.html, correctly it looks like the \".notdef\" glyph is index `0` in freetype's API and in https:\/\/github.com\/matplotlib\/matplotlib\/blob\/cc46ee7bd0cbaa83257d0bc3f808ca42b8c0590e\/src\/ft2font.cpp#L704-L714 we will throw c++ exceptions (which I am 99% sure we turn into Python exceptions via the CALL_CPP macro).  So it is not clear to me that the `.notdef` is actually missing here, but rather that it is empty.\r\n\r\nLooking at https:\/\/freetype.org\/freetype2\/docs\/reference\/ft2-character_mapping.html#ft_get_char_index it seems that freetype will always ensure that 0 is the \"missing glyph\" so it is unclear to me if it is even possible to detect that it is missing via freetype.  I think this also means that freetype as already done \"the .notdef character isn't defined, it fallsback to the default .notdef character.\" for us.  If there default is empty, then I think we need to understand why they made that choice before we try to second-guess it.","> I am not convinced that this is something we want to do.\n\nCurrently we drop a minus and don't warn that we're dropping it. Besides being not great for folks doing a quick scan, it's not great for folks using a screen reader that they can't trust that the code they wrote is producing the image they expected. \n\nETA: Pushing on this more, of course users should know what their data looks like but frankly plenty of our users don't and while they likely shouldn't be using weird xkcd font they may and silently dropping the - is breaking the basic assumption that the visualization is accurately mapping the data b\/c it implies the data is something else.\n\nWhich maybe in addition\/alternatively ticks should raise a glyph not found error if it can't find a -. \n\n> Do we have any evidence that this is a wider problem than that one font\n\nThere's no way to determine if this is just a problem w\/ this one font, but technically any custom font could have this problem & we explicitly aren't trying to monitor what fonts our users are using. And also it's a problem for this font that is prominently used for xkcd & even if I remove it from the docs (which I do in #26854), there's nothing to stop our users from using this font and users have flagged this error before.\n\n\nAs far as I can tell, the convention for .notdef characters is that it's always character 0 in any arbitrary font.\n\nETA2: to be clear\/fair, I don't have a strong preference on the solution. Something like we ship a .notdef we always use and minus always falls back to hyphen, whatever is workable -  I just think fundamentally we shouldn't knowingly be taking the risk of generating labels that don't match what the users specified or data calls for  where visible not defs count as matching cause they're a warning).","However, it looks like freetype is _already_ ensuring that `.notdef` is available: \r\nSo the questions are:\r\n\r\n - for this font did freetype make the default `.notdef` or does the font actually have an `.notdef` and it is just empty? (I think it is the second making the rest of this moot for this case)\r\n - if freetype made the default `.notdef` did they pick empty? and if so why?\r\n - from the freetype API can we tell that any of the above have happened?\r\n\r\nA bigger question is a font even a valid font without a `.notdef` (it seems that type42 requires it and TTF at at least requires the 'post' table which in some forms requires `.notdef`)?\r\n\r\n-----\r\n\r\nPoking at this font in `fontforge` it looks like it does indeed provide `.notdef` it is blank.  If I am understand this correctly, then there is no way we can detect if the `.notdef` glyph is \"good\" so none of this proposal would actually fix the problem.\r\n\r\nAt some level, a font can randomize the mapping between the numbers and the glyphs (e.g. it render \"1\" to look like \"7\" or something) and there is nothing we can do about that.\r\n\r\n----\r\n\r\nThe minimal solution is we should burn `Humor Sans` out of our code base (both for this reason and because it replaces \u20ac with an emoji of Hitler).  It is probably with cleaving that off of the bigger xkcd PR so we can backport it.","I think InDesign has an interesting\/possibly we should steal approach to missing glyphs: [Missing Glyph Protection](https:\/\/books.google.com\/books?id=eAJfDwAAQBAJ&pg=PT292&lpg=PT292&dq=indesign+missing+glyph+protection&source=bl&ots=vPN4hsv67O&sig=ACfU3U3I5yosWoFqsMcNSuatNttqFXSOaw&hl=en&sa=X&ved=2ahUKEwi2tc2m_LmCAxVdkYkEHbudCOQQ6AF6BAg2EAM#v=onepage&q=indesign%20missing%20glyph%20protection&f=false) \r\n\r\nwhere they default to coloring the space for the missing glyph light pink (which we probably can't do that, but we could possibly outline or hatch the textarea?), but also allow users to fallback to filling in with another font (which is what we already do with fallback) "],"labels":["topic: rcparams","topic: text\/unicode","Difficulty: Medium"]},{"title":"[Bug]: Matplotlib hangs on Spyder run on Mac","body":"### Bug summary\r\n\r\nI have a very basic code on my work computer to create a plot in Spyder using Matplotlib. I am new to Mac OS and installed Spyder through a standalone installer as my organization does not allow Anaconda. I have the most updated versions of Matplotlib, Spyder and Python. On running the code to generate an interactive plot, I see a white window that's frozen and hangs up. I can run Spyder only after I force quit the window.\r\n\r\nAlso, my backend is set to Automatic (Spyder-->preferences-->IPython console-->Graphics-->Backend-->automatic). \r\nPlot works fine when I set it to inline but the disadvantage there is that it's not interactive. \r\n\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\na=[1,2,3,4,5]\r\nb=[1,4,6,8,10]\r\nplt.plot(a,b)\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n<img width=\"970\" alt=\"Screenshot 2023-10-29 at 5 19 49 PM\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/31229269\/8960d90a-4ffc-4ad7-bc2c-f684358b9cc6\">\r\n\r\n\r\n### Expected outcome\r\n\r\nI was expecting to create a plot that works fine when I set backend to 'inline' \r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nMac OS\r\n\r\n### Matplotlib Version\r\n\r\n3.8.0\r\n\r\n### Matplotlib Backend\r\n\r\nQt5Agg\r\n\r\n### Python version\r\n\r\n3.9.6\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip","comments":["Do you see any output in the console when the window hangs?  Also what happens if you set the backend to a specific interactive one?\r\n\r\nA colleague of mine recently had a similar problem in pycharm: the traceback showed that it was somehow defaulting to the macos backend, although she was using Linux\u2026","Are you sure you are using the Qt5Agg backend? That one has the toolbar on the top of the figure and has separators between button groups.","https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26669 may help in asking people to debug issues like this."],"labels":["OS: Apple","status: needs clarification","GUI: Qt"]},{"title":"Previous view not always saved when using zoom_pan","body":"### Bug summary\r\nAll's in the title.\r\n\r\nWhen having several graphics sharing an axis for the display, the zoom pan module is not always saving the previous view before zooming.\r\n```(axes=plt.subplot(sharex=refAxis)```\r\n\r\nAfter investigation I think I understand why.\r\nThe navigation toolbar pushes the new state only if the _navStack is empty.\r\nI believe the proper check should be : \r\n- If the navStack is empty or if the current position is not the last one in the navStacj\r\n\r\ncf following line of code\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/39582424f8ce5e042e4e39eeac94893f222c9f8b\/lib\/matplotlib\/backend_bases.py#L3015\r\n\r\n### Code for reproduction\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nt = np.arange(0.01, 5.0, 0.01)\r\ns1 = np.sin(2 * np.pi * t)\r\n\r\nax1 = plt.subplot()\r\nplt.plot(t, s1)\r\nplt.tick_params('x', labelsize=6)\r\n\r\n# share x only\r\nplt.figure()\r\nax2 = plt.subplot(sharex=ax1)\r\nplt.plot(t, s1)\r\nplt.tick_params('x', labelsize=6)\r\n```\r\n\r\n\r\n### Step to reproduce:\r\n1. Create two different figures sharing the same x axis (using sharex attribute for instance)\r\n2.  zoom in the first figure using the navigationToolBar\r\n3.  zoom again in the second figure\r\n4. Return in the first figure and zoom again\r\n5. Press back button in the first figure\r\n\r\nExpected Outcomes:\r\n1. two figures displayed\r\n2. Figure 1 and 2 display the _first_ zoomed zone along x axis (*zone1*)\r\n3. Figure 1 and 2 display the _second_ zoomed zone along x axis (*zone2*)\r\n3. Figure 1 and 2 display the _third_ zoomed zone along x axis (*zone3*)\r\n4. Figure 1 and 2 display the _second_ zoomed zone along x axis (*zone2*)\r\n\r\nObersed Outcomes:\r\n1. two figures displayed\r\n2. Figure 1 and 2 display the _first_ zoomed zone along x axis (*zone1*)\r\n3. Figure 1 and 2 display the _second_ zoomed zone along x axis (*zone2*)\r\n3. Figure 1 and 2 display the _third_ zoomed zone along x axis (*zone3*)\r\n4. **Figure 1 and 2 display the **_first_** zoomed zone along x axis (*zone1*)** ---> Here is not as expected (zone 1 instead of zoom 2 ie previous state before the zoom)\r\n\r\n### Additional information\r\n\r\n\r\n### Operating system\r\nWindows\r\n\r\n### Matplotlib Version\r\n3.8\r\n\r\n### Matplotlib Backend\r\nqtagg\r\n\r\n### Python version\r\n3.7.0\r\n\r\n","comments":["Here is what I did to solve the issue on my side.\r\nBut I would defintely prefer on handling at matplotlib side because it is very tight to the navigationToolBar implementation, and it will have very poor maintainability aggainst matplotlib library updates.\r\n\r\n\r\n```\r\n\r\n# -*- coding: utf-8 -*-\r\n\r\nfrom matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavBar\r\n\r\n\r\ndef bbox_equal(bbox1, bbox2, tol=1e-8):\r\n    # Compare the coordinates of the two Bbox objects with tolerance\r\n    return (\r\n        abs(bbox1.x0 - bbox2.x0) <= tol and\r\n        abs(bbox1.y0 - bbox2.y0) <= tol and\r\n        abs(bbox1.x1 - bbox2.x1) <= tol and\r\n        abs(bbox1.y1 - bbox2.y1) <= tol\r\n    )\r\n\r\n# Custom implementation of the NavigationToolbar2QT to correct observed issues \r\n# inside matplotlib library (refer to https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27228)\r\nclass NavigationToolBar2_saveLimits(NavBar):\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        \r\n    def press_zoom(self, *args, **kwargs):\r\n        # override press_zoom method of the Navigation toolbar because it does not behave\r\n        # preoperly when the x axis of the figured is shared between several figure\r\n        # Toolbar won't save the current state before zooming in some cases \r\n        # (https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27228)\r\n        \r\n        self.push_current()\r\n        super().press_zoom(*args, **kwargs)\r\n        \r\n    def press_pan(self, *args, **kwargs):\r\n        # override press_zoom method of the Navigation toolbar because it does not behave\r\n        # preoperly when the x axis of the figured is shared between several figure\r\n        # Toolbar won't save the current state before zooming in some cases \r\n        # (https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27228)\r\n        \r\n        self.push_current()\r\n        super().press_pan(*args, **kwargs)\r\n        \r\n    def isSameAsCurrent(self):\r\n        # Add a method to compare the current value of the navStack vs the current \r\n        # position of the axes in order NOT to push again two similar positions\r\n        # This is a workaround for the issue described here (https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27228)\r\n        # !! WARNING !!\r\n        # This implementation is very tight to the current implementation of the NavigationToolbar2\r\n        # and could break upon any update of matplotlib\r\n        \r\n        nav_info = self._nav_stack()\r\n        if nav_info is None:\r\n            return False\r\n        for ax in self.canvas.figure.axes:\r\n            if ax in nav_info.keys():\r\n                (view, (pos_orig, pos_active)) = nav_info[ax]\r\n                if ax._get_view() != view:\r\n                    return False\r\n                # we need a soft check because floating points are never equal\r\n                if bbox_equal(ax.get_position(True).frozen(), pos_orig) is False:\r\n                    return False\r\n                # we need a soft check because floating points are never equal\r\n                if bbox_equal(ax.get_position().frozen(), pos_active) is False:\r\n                    return False\r\n                \r\n        return True\r\n            \r\n            \r\n        \r\n    def push_current(self, *args, **kwargs):\r\n        # override push_current method as it is now always called even if not needed\r\n        # in order to perform the push only if required with our own check\r\n        if self.isSameAsCurrent() is False:\r\n            super().push_current(*args, **kwargs)\r\n\r\n        \r\n```\r\n            \r\n            ","The main issue here is that shared Axis information is stored on Axes, while view state is stored on toolbars (a property of figure canvases). I've been able to thread these two together, though some of the implementation needs cleanup.\r\n\r\nOne open issue, I think, is what happens with going down or up the stack. If you click Back in one Figure, does the other Figure go back? What if there are other non-shared Axes in the Figure? And if you click Home, does that go Home on the second Figure? And again, what does that do to non-shared Axes?\r\n\r\nUnless we start adding a full-Figure sharing option, I think the only viable option that keeps the stacks independent, is that clicking Back or Home on one Figure changes the shared Axes, but _adds_ to the second Figure's stack. But this will add to the implementation somewhat."],"labels":["topic: widgets\/UI"]},{"title":"[Bug]: pickling and unpickling hidpi a qt figure that has been already shown doubles its physical size","body":"### Bug summary\n\nAll's in the title.\n\n### Code for reproduction\n\n```python\n# Run this from a computer with a hidpi display.\r\nfrom pylab import *; import pickle\r\nfig = figure(figsize=(5, 4))\r\nshow(block=False)\r\ncopy = pickle.loads(pickle.dumps(fig))\r\nshow(block=False)\r\nprint(fig.get_size_inches(), c.get_size_inches())\n```\n\n\n### Actual outcome\n\n`[5. 4.] [10.  8.]`\r\n... and the second figure is indeed twice bigger.\n\n### Expected outcome\n\n`[5. 4.] [5.  4.]`\r\n... and two figures with the same size.\n\n### Additional information\n\nBisects to #23476.\n\n### Operating system\n\nmacOS\n\n### Matplotlib Version\n\n3.8\n\n### Matplotlib Backend\n\nqtagg\n\n### Python version\n\n3.12\n\n### Jupyter version\n\nENOSUCHLIB\n\n### Installation\n\ngit checkout","comments":["probably related to #26380\r\n\r\nThat one did not go through pickling, but did recreate widgets\/FigureCanvasQtAgg objects with existing figures, which seems likely the actual core mechanism at play when pickling as well."],"labels":["GUI: Qt","topic: dpi and resolution"]},{"title":"API: finish LocationEvent.lastevent removal","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n\r\nRemove a scheduled deprecation of holding a hard reference to the last event.\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n","comments":["This is a 3.8 deprecation; it needs to wait for 3.10."],"labels":["API: changes"]},{"title":"changing import suggested by tim","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\npyplot.cycler and matplotlib.cycler are 2 different cycler functions that can be called. We should not expose two different cycler functions in matplotlib, as this may lead to inconsistencies. Exposing matplotlib.rcsetup.cycler() in pyplot.\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #26868\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["From the issue:\r\n> The main task here is not the code change itself, but to understand the logic and be sure that the change would not break any users.\r\n\r\nDid you do that check?","Yes, but since there were some errors, perhaps there was in fact something different in the logic that I missed.  The errors they gave were different from my previous PR and do not explicitly show where exactly the error is.  I am, again, reviewing the logic and, if I find differences, I will update here.","From what I understand, the code actually validates the arguments passed and then calls the \"original\" cycler function. First it checks whether the arguments are unique, since the function only has one type of argument (i.e., either just positional arguments or just keyword arguments), but not both. If this is the case, an error is raised. It also checks how many arguments are passed, and depending on the result it performs different validations. If it is just one argument, for example, it checks if the argument type is a 'Cycler', if so, it calls a function called validate_cycler with that object and returns the result. This is a way of copying an already existing Cycler object. All the code, until the last line, is just for validating the arguments passed. The last line was the trickiest to understand for me.\r\n\r\nreturn reduce(operator.add, (ccycler(k, v) for k, v in validated))\r\n\r\nFrom what I understand, it creates a 'Cycler' object that contains their validated values. It does this using the 'reduce' function, which combines the Cycler objects using the addition operation ('operator.add'). It iterates over the list of (k, v) pairs in validated and creates a Cycler object for each pair, then combines them using the addition operation. In this sense, I believe that some test may be failing in this last line, but it seems to me, in fact, the matplotlib.rcsetup cycler just does some validations and after that calls the original cycler."],"labels":["status: needs rebase","Maintenance"]},{"title":"[Doc]: List supported hatches and link to\/embed hatch reference on hatches API page","body":"### Documentation Link\n\nhttps:\/\/matplotlib.org\/devdocs\/api\/hatch_api.html\n\n### Problem\n\nThe hatches API landing page is very sparse and I think some folks landing on this page are probably trying to find the list of supported hatches. \r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/f7d72dbe-af1d-4eb8-84c2-431fce3f2e44)\r\n\n\n### Suggested improvement\n\nMinimally, I think the API reference should link\/refer to the [example gallery reference](https:\/\/matplotlib.org\/devdocs\/gallery\/shapes_and_collections\/hatch_style_reference.html), but I also think maybe the first image from the gallery reference should be embedded at the top of the API reference page (via the `.. plot:: path\/to\/image` directive)\r\n![sphx_glr_hatch_style_reference_001](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/06d1e6c0-958e-4927-bcbc-6f970a27c310)\r\n\r\nThis is the file that would be changed in addressing this issue:\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/879cf769efa6801c1a949f9fe75c9626709c6314\/doc\/api\/hatch_api.rst?plain=1#L1-L8","comments":["### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the Matplotlib internals. To get started, please see our [contributing guide](https:\/\/matplotlib.org\/stable\/devel\/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull requests (PRs). If there are none, feel free to start working on it. If there is an open PR, please collaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication channels](https:\/\/matplotlib.org\/stable\/devel\/contributing.html#get-connected).","Hey @story645 , I would love to work on this!\r\nBut I'm not able to understand how should I edit \"matplotlib\/doc\/api\/hatch_api.rst\" file so that that API reference page will also show images of the hatches.\r\nKindly guide me through.\r\nThanks","I want to work on it assign me!","Sorry @shivam200446 we do not assign issues & there's already an opened pull request about this.","(plot:: path\/to\/image) appears to be used in documentation tools like Sphinx @story645 \r\n","@ikigai27 yes, our docs are built with sphinx. I'm not sure if you're asking a question or answering someone elses.","@story645 Permission to matplotlib denied to ikigai27. how to solve any guidance.","What are you doing to get that error?","making PR it gives an error while pushing the changes to origin repository","Did you follow our guide for making the changes on a feature branch on your own fork?\n\nhttps:\/\/matplotlib.org\/devdocs\/devel\/contribute.html#how-to-contribute\n\nIf not, I suggest you follow our instructions and then copy your changes over."],"labels":["Documentation","Good first issue","topic: hatch"]},{"title":"[Bug]: Poly3DCollection, set_edgecolor('face') and set_linewidth do not work right","body":"### Bug summary\n\nBUG1 - poly.set_lw(0) is supposed to not draw edges between poly. It does that, but it leaves a small gap which is essentially filled by the background color.  This is not desireable.\r\n\r\nBUG2 - poly.set_edgecolor('face') is supposed to color the edges using the face color. (which one? who knows?) but instead it colors the edge randomly.  The bug is because the edges are colored in the order they are DRAWN (back to front) so it does not necessarily match the order of the face color array.\r\n\r\nBUG3 - poly.set_lw allows an array of widths (one per face).  However (similar to bug2) the order is based on the order they are DRAWN (back to front) so it does not match the order of the face list.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.animation import FuncAnimation\r\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\r\nimport trimesh\r\n\r\nmesh = trimesh.load_mesh('src\/data\/bunny1.stl')  # stanford bunny reduced to 3000 faces\r\n\r\nplt.style.use(\"dark_background\")\r\n\r\nfig = plt.figure(figsize=(6,6), dpi=128)\r\nax = fig.add_subplot(111, projection='3d')\r\n\r\npoly = Poly3DCollection(mesh.vertices[mesh.faces], edgecolor='none')\r\nax.add_collection3d(poly)\r\n\r\nlo,hi = mesh.vertices.min(axis=0), mesh.vertices.max(axis=0)\r\nax.set_xlim(lo[0],hi[0])\r\nax.set_ylim(lo[1],hi[1])\r\nax.set_zlim(lo[2],hi[2])\r\n\r\nplt.axis('off')\r\nplt.tight_layout(pad=0)\r\n\r\n# NOTE:  there are three functions to control poly. set_edgecolor(E), set_facecolor(F), set_lw(W).\r\n# all three can take an array and the size of the array must equal the number of faces.\r\n# if the array is too small, E will be repeated in depth sorted order (back to front, which looks\r\n# like total garbage) and F and W will be truncated to 1.  If E is 'face' the face colors will be \r\n# use however they will be depth sorted, so it will look like garbage. Setting E=F and W=0.5 seems\r\n# to produce the BEST result most of the time.  The only caveat is that E treats alpha differently, \r\n# so the face alpha=0.5 will match edge alpha=0.05 (approx).\r\n\r\nfcolor = [[1,.5,0]]*1000+[[0,1,0]]*1000+[[0,.5,1]]*1000\r\nbug = 1\r\n\r\ndef animation_frame(frame_number):\r\n    global bug\r\n    if bug == 1:    # this show gaps between faces, but it should not\r\n        poly.set_facecolor(fcolor)\r\n        poly.set_edgecolor(fcolor)\r\n        poly.set_lw(0)\r\n    if bug == 2:    # the edge colors should match the faces, but it does not\r\n        poly.set_facecolor(fcolor)\r\n        poly.set_edgecolor('face')\r\n        poly.set_lw(1)\r\n    if bug == 3:    # the RED edges should be visible on ORANGE faces only\r\n        poly.set_facecolor(fcolor)\r\n        poly.set_edgecolor('r')\r\n        poly.set_lw([c[0] for c in fcolor])\r\n    bug = bug % 3 + 1\r\n        \r\n\r\nanimation = FuncAnimation(fig, func=animation_frame, interval=5000)\r\nanimation_frame(0)\r\n\r\nax.view_init(50,90)\r\nplt.show()\n```\n\n\n### Actual outcome\n\nBug 1 leaves gaps between faces\r\n\r\nBug 2 edges are drawn with random color\r\n\r\nBug 3 edges furthest from camera are drawn\n\n### Expected outcome\n\nBug 1 no gaps between faces\r\n\r\nBug 2 edges are drawn with face color\r\n\r\nBug 3 RED edges are drawn around ORANGE faces only\n\n### Additional information\n\n[bunny1.zip](https:\/\/github.com\/matplotlib\/matplotlib\/files\/13169947\/bunny1.zip)\r\n\n\n### Operating system\n\nWindows 10\n\n### Matplotlib Version\n\n3.8.0\n\n### Matplotlib Backend\n\nTkAgg\n\n### Python version\n\n3.9.7\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip","comments":["bug1 is very hard to fix because each patch is drawn independently and they do not know to shade towards each other to fill in the gaps\r\n\r\nbug2 and bug3 are fixable."],"labels":["topic: mplot3d"]},{"title":"[Doc]: clarify when and how to use boilerplate.py","body":"### Documentation Link\r\n\r\n_No response_\r\n\r\n### Problem\r\n\r\nPer this discussion https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27158#discussion_r1371803287, I (maybe other folk) are a bit confused on what the \"do not edit\" comments in pyplot mean given that [boilerplate.py](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/tools\/boilerplate.py) is never run automatically. Consensus seems to be that the process should be `when changing the signature of a pyplot function, run boilerplate.py and commit those changes` but that's not documented anywhere. \r\n\r\n### Suggested improvement\r\n\r\nMore clearly document using boilerplate.py by:\r\n1) changing the Autogen message to \"generated by biolerplate.py, do not edit\"\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/b86e3312f8bc52a342362c6104c2d46a51f7e943\/tools\/boilerplate.py#L61-L64\r\n2) change the comment at the top of pyplot to something like \"plotting signatures are generated by boilerplate.py, rerun when changing signatures and commit the changes\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/b86e3312f8bc52a342362c6104c2d46a51f7e943\/lib\/matplotlib\/pyplot.py#L1-L2\r\n3) add something like (note: this rst may be incorrect)  to the coding guideline. \r\n```rst\r\nWhen a function in the :doc:`pyplot  API<doc\/api\/pyplot_summary>`, run :file:`lib\/matplotlib\/test_pyplot.py::test_pyplot_up_to_date`. If the test fails and and you intended to change those signatures, run boilerplate.py and commit the changes\r\n```","comments":["> Consensus seems to be that the process should be `when changing the signature of a pyplot function, run boilerplate.py and commit those changes` but that's not documented anywhere.\r\n\r\nThis is generally true, though there are functions in there that are not part of the automatically generated set. An easier indicator is \"if the `lib\/matplotlib\/tests\/test_pyplot.py::test_pyplot_up_to_date` test fails\", but one has to clarify that with \"and you intended to change those signatures\"."],"labels":["Documentation","status: waiting for other PR","Documentation: devdocs"]},{"title":"Fix behaviour of Figure.clear() for SubplotParams","body":"\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n\r\n* Update `Figure.clear()` to reset the properties of `Figure.subplotpars`. \r\n* Add representation method for `matplotlib.gridspec.SubplotParams`\r\n* Add `rc_default` parameter to the `SubplotParams.update`\r\n\r\nFixes #11059. This PR is a continuation of #11086. @fredrik-1 \r\n\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["@jklymak Would you be able to review this pr? Thanks","Why add an additional flag to `update` rather than extracting the rcparam values and passing them in `clear` (where we have to add a call to `update` anyway)?\r\n\r\nI am not against the current implementation, but am curious why a more minimal approach would not work?","> Why add an additional flag to `update` rather than extracting the rcparam values and passing them in `clear` (where we have to add a call to `update` anyway)?\r\n> \r\n> I am not against the current implementation, but am curious why a more minimal approach would not work?\r\n\r\n@tacaswell This is a continuation of #11086 and I followed the implementation there. \r\n\r\nLooking at the code right now: the new flag is used both in `clear()` and `subplots_adjust(...)`. If we would only modify the `clear()`, then I fully agree we could do without the flag. If we do add a parameter to `subplots_adjust`, then the flag in `update` avoids a bit of duplicated code in `clear` and `subplots_adjust`.\r\n\r\nI am fine with leaving the PR as is, or removing the flag in both `update` and `subplots_adjust`, or removing the flag in `update` while generating the new parameters in both `clear` and `subplots_adjust`.\r\n\r\n","@tacaswell Gentle ping"],"labels":["topic: geometry manager","topic: pyplot API","topic: figures and subfigures"]},{"title":"[Doc]: patches.FancyArrowPatch() and Donut demo: angleA and angleB not clearly defined","body":"### Documentation Link\n\nhttps:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.patches.FancyArrowPatch.html#matplotlib.patches.FancyArrowPatch\n\n### Problem\n\nThe `FancyArrowPatch()` documentation does not adequately describe how _angleA_ and _angleB_ are defined, and the notes on those parameters in the regular `ArrowPatch()` documentation do not clearly translate to their usage in `FancyArrowPatch()`. This is a problem if, for example, one tries to use the [Donut chart labelling example](https:\/\/matplotlib.org\/stable\/gallery\/pie_and_polar_charts\/pie_and_donut_labels.html#sphx-glr-gallery-pie-and-polar-charts-pie-and-donut-labels-py) with data that results in 2 annotation boxes sitting on top of each other.\n\n### Suggested improvement\n\nPlease add the following description, or something similar, to the `FancyArrowPatch()` documentation or the `annotate()` documentation where it describes _arrowprops_ kwargs:\r\n>_angleA_ and _angleB_ are both measured counterclockwise from the positive x-axis, where the vertex referenced by _angleA_ is at the base of the arrow, and the vertex referenced by _angleB_ is at the head of the arrow.\r\n\r\nIt might also be good to include a similar description in the [donut example](https:\/\/matplotlib.org\/stable\/gallery\/pie_and_polar_charts\/pie_and_donut_labels.html#sphx-glr-gallery-pie-and-polar-charts-pie-and-donut-labels-py) to specify that the vertex of _angleA_ is where the arrow meets the textbox, and the vertex of _angleB_ is at the point that is being annotated.","comments":[">and the notes on those parameters in the regular ArrowPatch() documentation do not clearly translate to their usage in FancyArrowPatch()\r\n\r\nCan you please describe this discrepancy a bit more? That parameter isn't documented in FancyArrowPatch because it's supposed to be forwarded to ArrowPatch. \r\n\r\n> It might also be good to include a similar description in the [donut example](https:\/\/matplotlib.org\/stable\/gallery\/pie_and_polar_charts\/pie_and_donut_labels.html#sphx-glr-gallery-pie-and-polar-charts-pie-and-donut-labels-py) to specify that the vertex of angleA is where the arrow meets the textbox, and the vertex of angleB is at the point that is being annotated.\r\n\r\nWould you like to open a PR making this change? \r\n\r\nAnd would clarifying the following somewhere help: \r\n * head: thing being annotated\r\n * tail: text\/annotation \r\n\r\nI ask b\/c I know we're sometimes inconsistent about it\/I have comments in my code reminding me of the orientation. \r\n"],"labels":["Documentation","topic: arrow"]},{"title":"[Bug]: Gifs no longer create transparent background","body":"### Bug summary\n\nMatplotlib is no longer able to create gifs with a transparent background.\n\n### Code for reproduction\n\n```python\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.animation import FuncAnimation\r\n\r\nfig, ax = plt.subplots()\r\nxdata, ydata = [], []\r\nln, = ax.plot([], [], 'ro')\r\n\r\ndef init():\r\n    ax.set_xlim(0, 2*np.pi)\r\n    ax.set_ylim(-1, 1)\r\n    return ln,\r\n\r\ndef update(frame):\r\n    xdata.append(frame)\r\n    ydata.append(np.sin(frame))\r\n    ln.set_data(xdata, ydata)\r\n    return ln,\r\n\r\nani = FuncAnimation(fig, update, frames=np.linspace(0, 2*np.pi, 128),\r\n                    init_func=init, blit=True)\r\n\r\n\r\nsavefig_kwargs = {\r\n    \"facecolor\": \"none\",\r\n}\r\nani.save(\"test.gif\", savefig_kwargs=savefig_kwargs)\n```\n\n\n### Actual outcome\n\nWith Matplotlib version 3.8.0 (and also 3.7.3) installed this is the ouput:\r\n![3 8 0](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/148774400\/558b06cb-ba89-446d-97a3-b5e8aa2d7b1f)\r\n\r\nA gif-file with a white background\n\n### Expected outcome\n\nIn 3.6.3 and before the file had a transparent background\r\n\r\n![3 6 3](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/148774400\/daf64674-e396-41e1-8444-084b40ff07dd)\r\n\n\n### Additional information\n\nI tried many different setups, different values for facecolor (e.g. (1,1,1,1)), set \"transparent\": True and googeling quite a lot - old solutions on github won't work.\r\n\r\nLike in the expected outcome stated, this worked in the past (until Matplotlib 3.6.3).\r\n\r\nThere either seems to be an error in the fix for another issue in #21831 - or this is now the new correct behavior, but it seems like the transparency should still work for gifs, as this was an issue with different formats.\n\n### Operating system\n\nWindows 11\n\n### Matplotlib Version\n\n3.8.0\n\n### Matplotlib Backend\n\nTkAgg\n\n### Python version\n\nPython 3.12.0\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip","comments":["It seems it comes from:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/3ecb14885c4803ea034ddb4b778a02d33366882f\/lib\/matplotlib\/animation.py#L1080-L1084\r\n\r\nwhere `pre_composite_to_white` matches `'none'` to a white color. \r\n\r\nIs this intended behaviour @tacaswell (I think you added this ?)","@cgadal @JohannesWal @tacaswell \r\n\r\nMe and two fellow students have been looking into this issue as part of a project.\r\nSo far we have found that the fix you mentioned takes alpha and therefore transparency out of the equation. As far as we understand it simulates transparency by scaling the color and making it appear \"faded\" over a white background. But actually it transforms the rgba value to a rgb value (no transparency).\r\n\r\nIf you hardcode a rgba value then the previous problem returns (the blocky looks). However only if you don't use ffmpeg and only the pillowwriter.\r\n\r\nWe think this could be solved by checking which writer is used and only allowing \"true\" transparency when using ffmpeg and using the previous fix without it.\r\n"],"labels":["topic: animation"]},{"title":"[ENH]: dashed hatching pattern ","body":"### Problem\n\nI've recently seen a plot with a dashed hatching style and was wondering if there's a case for adding such a style to matplotlib? Especially that we've got dotted hatching already available and this seems to be similar.\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/8880777\/0afd5e9e-a8e1-4b47-8b10-71aa4c5dc5b5)\r\n\r\nSource: https:\/\/twitter.com\/DataVizStefan\/status\/1714930118781530248\/photo\/1\r\n\r\n\n\n### Proposed solution\n\nI don't have the exact solution but matplotlib allows to create all sorts of fancy edge line styles so I'd imagine the technical ability of the library to implement this request is there.\r\n\r\nhttps:\/\/matplotlib.org\/stable\/gallery\/lines_bars_and_markers\/linestyles.html","comments":["this looks pretty and also reasonable, but also this is pushing more in the direction of custom hatch #20690 ","Yes, I can see it now. I didn't realize there's a similar request in the pipeline already.","Both? I think this in particular is clear enough that it could be an out of the box style, but I have no idea what the unambiguous short notation would be since `--` is a more dense horizontal line. ","How about `\"- \"` (dash\/minus sign with a space)?  \r\nOr `\"_\"` (underscore)?","> How about \"- \" (dash\/minus sign with a space)?\r\n\r\nit won't work with our current parsing scheme, which allows infinite repetition of any character in the set '-+|\/\\xXoO.*'\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/b34e7049b1d9f66d1c395183cc2a03a4fc86625d\/lib\/matplotlib\/hatch.py#L182-L188\r\n\r\nbut now I'm thinking this would also be nice in vertical and diagonal and thinking that \"DashedHatch\" might be a good place to prototype a custom hatch object since it's scoped pretty clean? Using any of the classes specified in https:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/lib\/matplotlib\/hatch.py#L14 as a model?","Any two character sequence is tough, and any sequence that includes an extant character is even tougher, as hatch patterns use repetitions to increase density, and do so irrespective of their ordering, etc. (They just do `pattern.count(\"-\")`) Retaining desired behavior while allowing for multichar sequences is likely to cause confusion.\r\n\r\nI think `_` could work, could also argue for `=`, though I think that would imply a slightly different mark.\r\n\r\nI do think that some of the finer points of the example above may be challenging without a more extensive refactor of hatching (which isn't to say not its not worthwhile, but is to say it may be a larger task than originally expected)\r\n\r\n- The fact that the first dash in a line looks to be following the contour of the region rather than being on a fixed grid\r\n   - Lines in the lower section are stacked on top of one another, while lines in the upper section are staggered, but not by any particular pattern.\r\n- That density seems to equate to shorter lines is a bit of a wrinkle (though I think this could be done in current frameworks)\r\n\r\nI agree that the example looks nice and if we could capture that it would be good, I just expect that what we would implement now would be potentially more rigid looking:\r\n\r\ne.g. here is what I got by just hacking the dash pattern in the svg backend (not threading it through anywhere, etc, just was trying to get an idea, was using the branch from #27158 as my starting point because the example there is analogous to the example here in a way):\r\n\r\n![test](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2501846\/7a836f18-e9b9-4335-a765-92569a0d0b49)\r\n\r\nNote how all the dashes\/gaps are aligned vertically.. I _suspect_ that many of the \"easy\" ways to implement this idea will have that in common. I'm less concerned with the fact that this example does not scale the lines\/gaps inversely to density, I think that is relatively easy to do ."],"labels":["New feature","topic: hatch"]},{"title":"ENH: add long_axis property to colorbar","body":"\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n\r\nAs discussed in https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26896 exposing a long_axis property for colorbar.  \r\n\r\n\r\n\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["I think I replaced all the _long_axis calls. ","Can we please still have a short discussion on naming? See https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26896#issuecomment-1776249546"],"labels":["topic: color\/colorbar"]},{"title":"[MNT]: ipykernel is deprecating gtk3 event loop integration and missing gtk4 event loop integration","body":"### Summary\n\nSee https:\/\/github.com\/ipython\/ipykernel\/issues\/1148.  Perhaps it would be good to work with the ipykernel devs to add support for gtk4 and to undeprecate gtk3?\n\n### Proposed fix\n\n_No response_","comments":[],"labels":["GUI: gtk","third-party integration","Maintenance"]},{"title":"Changed Bbox.transformed to support more general affine transformations.  ","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n\r\nThe original Bbox.transformed method does not work correctly with general affine transformations.  \r\n\r\nRelevant issue [27151](https:\/\/github.com\/matplotlib\/matplotlib\/issues\/27151)\r\n\r\nThis PR closes #27151.\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [yes] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [no] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [no] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["I think this is right, but shocking this wasn't tested before.  Can you add some tests to test_transforms.py so we don't break this? ","I think I agree that the implementation needs to be updated.\r\n\r\nHowever, there has been recent discussion regarding deprecating `bbox.corners` (See #26805 and #26878) So I think we should perhaps resolve that before expanding its usage. (@anntzer was the one to suggest it)\r\n\r\nCurrently corners is only used internally in `rotated`, which itself is basically doing what this PR proposes, just creating the rotation transform on the fly. (Though that one starts from `Bbox.unit()`, not `Bbox.null()`, which works because of the `ignore=True`)\r\n\r\nI suppose there is also a broader question of non-affine transforms... while for Affine transforms, I think it should be true that the corners will define the total extent, that is not generically true, but I don't think we have the ability to guarantee accuracy of this method for all transforms...\r\n\r\n(Take, for example a geographic transform where the poles end up degenerate, and so the corners of the bounding box end up with just a sliver rather than encompasing the whole transformed shape...)","See also https:\/\/github.com\/matplotlib\/matplotlib\/issues\/12059, though.","@jklymak @ksunden @anntzer, thanks for the feedback!  I'm a big fan of the matplotlib package, so thanks for the work you do.\r\n\r\nMy sense is that `Bbox` is a intended to be a low overhead, utility class that provides a lot of syntactic sugar.  I've found it useful outside of matplotlib and, in that sense, I'd be sad to see a method like `Bbox.corners` disappear.  I'll add my two cents to the discussion of #26805 and #26878.\r\n\r\nHowever, I think the most interesting thing, here, is to agree on what `Bbox.transformed` should do, particularly with respect to the level of generality; tests and documentation to follow.  \r\n\r\nSupporting affine transformations seems to be a reasonable line to draw.  I think the argument is twofold:  (1) an affine transform will map segments to segments and (2) an affine transform will preserve convexity.  The implication is that you only need to consider the transformation of the corners and their corresponding extents to correctly recover the bounding box under the transformation.  \r\n\r\nAnother level of generality would be to support continuous transformations.  The idea here is that you want to preserve topologies:  if the transformation avoids cutting or piercing the domain, then the only thing that needs consideration is the boundary of the domain.  This could be addressed by inserting points along each edge of the box and transforming these newly introduced points along with the corners.  One might hazard a guarantee on accuracy with a multiresolution approach.  That is, if the number of points along each edge is N, and we compute something like the boundary length under the transformation; and we do the same where the number of points along each edge is 2*N; and if these numbers agree within some tolerance, then we can have some confidence that we have correctly transformed the original boundary.\r\n\r\nI haven't given much thought to the more general cases although I would expect the complexity of a solution to increase; nor is it clear that that there's a demonstrable need for it.\r\n\r\nGoing back to the continuous case, a multiresolution solution doesn't seem well aligned with the idea that `Bbox` should be a low overhead, utility class.  At the very least, a user might want to opt-out of such behavior.  It also seems like there would probably be a significant overlap with the logic of how other patches are handled under general transformations.  However, this isn't a part of the code that I've waded into.\r\n\r\nAll told, I think the affine case is a good target with one caveat:  I don't want to throw any exceptions on the `is_affine` property.  This is because I have a use case where I'm relying on composite transform that maps a rectangle to another rectangle via a non-linear intermediate step.  How to best notify the user in this scenario feels like an open question.","Bumping the thread for feedback on this PR.  \r\n\r\nThe tl;dr proposal:  support affine transforms in `Bbox.transformed` and include relevant tests.  Will not, in general, support continuous transformations.  Will remove dependency on `Bbox.corners`."],"labels":["topic: transforms and scales"]},{"title":"[Bug]: Bbox transformed method produces unexpected results","body":"### Bug summary\r\n\r\nThe current implementation seems to assume that the lower left `ll`, upper left `ul`, and lower right `lr` corners are preserved under transformation.  This need not be the case.  For example, an affine transformation that simply switches coordinates produces a wrong result.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nfrom matplotlib.transforms import Affine2D, Bbox\r\n\r\n# Switch 'x' and 'y' coordinates\r\nT   = Affine2D( \r\n        np.array([\r\n          [0,1,0],\r\n          [1,0,0],\r\n          [0,0,1]\r\n        ])\r\n      )\r\n\r\n# Unit vectors\r\npts = np.array([\r\n  [1, 0],\r\n  [0, 1]\r\n])\r\n\r\n# Produce a Bbox from the unit vectors\r\nbb = Bbox.null()\r\nbb.update_from_data_xy(pts)\r\n\r\n# Result\r\nbb.transformed( T )\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\nIn [84]: bb.transformed( T )\r\nOut[84]: Bbox([[0.0, 0.0], [0.0, 0.0]])\r\n```\r\n\r\n### Expected outcome\r\n\r\n```\r\nbb.transformed( T ).height == 1.0\r\nbb.transformed( T ).width == 1.0\r\n```\r\n\r\n\r\n### Additional information\r\n\r\nThe current implementation (v3.8.0) seems to assume that the lower left `ll`, upper left `ul`, and lower right `lr` corners are preserved under transformation.  A more general solution should probably transform each corner and fully recompute the bounding box.\r\n\r\n\r\n### Operating system\r\n\r\nlinux\r\n\r\n### Matplotlib Version\r\n\r\n3.8.0\r\n\r\n### Matplotlib Backend\r\n\r\nTkAgg\r\n\r\n### Python version\r\n\r\n3.11.5\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip","comments":["See also https:\/\/github.com\/matplotlib\/matplotlib\/issues\/12059."],"labels":["topic: transforms and scales"]},{"title":"Correctly treat pan\/zoom events of overlapping axes.","body":"Followup for #22347 ","comments":["It may not make sense to roll into this PR, but while you\u2019re looking at this could you check the behavior of 3D axes as well? They have different pan\/rotate\/zoom handling. ","@scottshambaugh \r\n\r\nSorry to disappoint you, but this PR is already going on for a very long time and I really like to get this merged in a reasonble time. Extending it with additional functionalities is unfortunately out of scope for me at the moment (also my experience with mpl3d is limited). \r\n\r\n","The newly added methods\/`__init__` arguments should be added to the `pyi` stub file (with type hints, which I think are mostly just `bool | Literal[\"auto\"]` here)","@ksunden Stub-files are updated now!","I think this largely works as desired\/documented. My concern is that I think it is confusing that `ax.patch.set_facecolor(\"none\")` behaves differently to `ax.patch.set_visible(False)` here... visually they are identical, but they differ in interactivity because the `\"auto\"` treatment checks `patch.is_visible()`. \r\n\r\nI'm not sure that that should be blocking, necessarily, but I do think that transparent axes are one of the most sensible cases for overlapping axes (along with things like insets, etc) and I'm not certain that people will have used `set_visible` rather than `set_facecolor(\"none\")`\r\n\r\nAnd of course if we _do_ decide to key off of the alpha value, we would need to decide what cutoff to use:\r\n\r\n- alpha=0 means pass events, any nonzero value absorbs\r\n- alpha=1 absorbs events, any non-one value passes\r\n- something in between? 0.5 as a cutoff?\r\n\r\nI would lean towards one of the first two, I think though not sure which one. (Under the assumption we want to key off of alpha in the first palace, which I'm not totally convinced of)","@ksunden Thanks for taking a close look on the PR!\r\n\r\nLet me add my 2 cents to your concerns:\r\n\r\nIn my opinion, the current implementation still seems the most intuitive... to clarify:\r\n\r\n- Axes only forward events by default if the background is **explicitly hidden** (e.g. via `ax.patch.set_visible(False)`) \r\n  - I think this is quite intuitive because even if the patch is set to transparent, it is _\"still present in the figure\"_ (e.g. changing the color would make it immediately visible) while a hidden patch only becomes visible if it is explicitly shown (e.g. via `ax.patch.set_visible(True)`) independent of all other patch-properties.\r\n  - In short, this means that the presence of a patch directly triggers capturing of events.\r\n\r\nConsidering the effects of transparency as an additional trigger for capturing behavior, I think it would add more confusion than it solves.\r\n\r\n- using an alpha-value other than 0 or 1 would be quite arbitrary\r\n- in my opinion, changing the color of a patch should not interfere with any type of low-level behavior of an axes. \r\n\r\nIn 99% of the case, people will want axes that capture events. So even though less people use `set_visible`, the ones who want to temper with the capturing behavior will find it in the docs and all other users that only use `set_facecolor(\"none\")` (or `set_alpha(0)`) do not interfere with the capturing behavior at all.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","@tacaswell thanks for having a look at the PR!\r\nI addressed all comments so this should be ready for a re-review!","Do we have a theory as to why coverage looks wrong?  Are we sure that the test is actually running on CI?","@tacaswell thanks for the follow-up!\r\n\r\nGood point... I assumed that pytest grabs it just like any other test... however looking at codecov it seems that something strange is going on...  \r\n\r\nThe test itself is fully covered so I guess it was executed, but I can't really wrap my head around how it is even possible that the resulting coverage looks like this (in `backend_bases.py` [here](https:\/\/app.codecov.io\/gh\/matplotlib\/matplotlib\/pull\/27148\/blob\/lib\/matplotlib\/backend_bases.py#L2975))...\r\n\r\n<img src=https:\/\/github.com\/matplotlib\/matplotlib\/assets\/22773387\/7823b5e3-f06f-4cd7-93aa-841c9decb06e width=50%\/>\r\n\r\nI'll try to look into this as soon as I find some time!\r\n\r\n\r\n\r\n","At least locally for me they are being discovered, but I can reproduce the lack of coverage.  It looks like it only ever runs until the `if len(axes): return []` fast-exit.","Any update on this?","Hey, sorry that I've disappeared after pushing for more speed on this... There were some things that kept me busy.\r\nI'll try to make some time and have a look in the next few days!","No worries!  For volunteers basically everything else in your life should take priority and we understand stuff comes up.","@raphaelquast gentle ping as we are rounding up things for 3.9","Hey @ksunden, thanks for pinging. \r\nIt's really a pity but I'm all fed up with other things at the moment so I can't promise a timely update here.\r\n\r\nAs I see it the only thing that holds this back is the mysterious unittests that somehow don't run as expected. \r\nEveryting else is done (api-change-notice, stub-files, etc.). \r\n\r\n--- \r\n\r\nI quickly did another check if I can reproduce this but unfortunately I really don't get why the tests are not showing the expected coverage. \r\n\r\nTo clarify, I just did the following crude test to be absolutely sure the lines are covered locally on my side:\r\n\r\n- I add `print(\"Found axes to trigger:\", axes_to_trigger)` at the bottom of the `_start_event_axes_interaction(..)` function  of `backend_bases.py` (e.g. at a position that is supposedly not covered by the tests)\r\n- I run `python -m pytest tests -k test_interactive_pan_zoom_events -s`   to run my test (`-s` flag to see print outputs)\r\n\r\n<details> <summary>... and this is what pytest gives me: [click to show]<\/summary>\r\n\r\n```\r\n(mpl-dev) C:\\Users\\Admin\\Projects\\matplotlib\\lib\\matplotlib>python -m pytest tests -k test_interactive_pan_zoom_events -s\r\n============================================================= test session starts ==============================================================\r\nplatform win32 -- Python 3.11.6, pytest-7.4.2, pluggy-1.3.0\r\nrootdir: C:\\Users\\Admin\\Projects\\matplotlib\r\nconfigfile: pytest.ini\r\nplugins: anyio-4.0.0, cov-4.1.0, rerunfailures-12.0, timeout-2.2.0, xdist-3.3.1\r\ncollected 9344 items \/ 9296 deselected \/ 2 skipped \/ 48 selected\r\n\r\ntests\\test_backend_bases.py Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>, <Axes: label='ax_b_twin'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>, <Axes: label='ax_b_twin'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>, <Axes: label='ax_b_twin'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>, <Axes: label='ax_b_twin'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>, <Axes: label='ax_b_twin'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>, <Axes: label='ax_b_twin'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>, <Axes: label='ax_b_twin'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>, <Axes: label='ax_b_twin'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>, <Axes: label='ax_b_twin'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>, <Axes: label='ax_b_twin'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>, <Axes: label='ax_b_twin'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t_twin'>, <Axes: label='ax_t'>, <Axes: label='ax_b_twin'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>, <Axes: label='ax_b'>]\r\n.Found axes to trigger: [<Axes: label='ax_t'>, <Axes: label='ax_b'>]\r\n.\r\n\r\n=============================================== 48 passed, 2 skipped, 9296 deselected in 26.49s ================================================\r\n```\r\n\r\n<\/details>\r\n\r\n... which is what I was expecting to get if the function was executed properly\r\n\r\n> So long story short, I unfortunately cannot reproduce the lack of coverage so I am quite stuck.  \r\n> Since my time is very limited at the moment I don't know how to proceed here as I don't have the time to dig into reasons why the lines are apparently executed but not reported to codecov.\r\n> \r\n> Any help here is highly appreciated!  (I can try my best to finalize this for 3.9 but I'd need a way to reproduce it) \r\n> My last guess is that it might somehow be OS-related?? (I'm on windows)\r\n\r\n","> At least locally for me they are being discovered, but I can reproduce the lack of coverage. It looks like it only ever runs until the `if len(axes): return []` fast-exit.\r\n\r\nI can't reproduce locally after a rebase to latest `main` (though I didn't try before the rebase); maybe that will help here?","@QuLogic Thanks a lot for taking a look! I updated the branch to the latest `main`... let's see if that helps!","@QuLogic I rebased to the latest `main` but now the `macOS_py311` test on azure is failing with the (I guess unrelated) error:\r\n`Path does not exist: \/Users\/runner\/work\/1\/s\/result_images` \r\n","It appears that someone re-ran that, as it seems to be passing now. The code coverage looks pretty good now; only the early returns are uncovered.","OK perfect! But `codecov\/project\/tests` is still failing (even though all added\/changed lines are covered)? "],"labels":["New feature","topic: axes","topic: canvas and figure manager","Documentation: examples"]},{"title":"[ENH]: increasing figure size with other elements scaling as well for vector graphics","body":"### Problem\r\n\r\nIt seems to me there is no easy way to save a figure in vectorial formats n times (e.g. twice) bigger than the one created with other elements scaling up as well.\r\n\r\n[One](https:\/\/stackoverflow.com\/questions\/77308083\/how-to-change-figure-size-and-other-size-elements-for-a-svg-file\/77311912#77311912) could suggest to scale up all elements in the rc file, but it seems really hard to do without forgetting any of it.\r\n\r\nAnother way to achieve this goal is to rely on external tools, such as `svgutils`:\r\n\r\n```python\r\nimport svgutils.transform as sg\r\nimport matplotlib.pyplot as plt\r\n\r\nfigname = 'test.svg'\r\nscale_factor = 2\r\n\r\nfig = plt.figure()\r\nfig.savefig(figname)\r\n\r\nfig = sg.fromfile(figname)\r\nnewsize = ['{}pt'.format(scale_factor * float(i.replace('pt', ''))) for i in fig.get_size()]\r\n\r\nfig.set_size(newsize)\r\nfig.save(figname)\r\n```\r\n\r\nIt would be great to have such a feature directly included in `matplotlib` ! Maybe as an argument of `savefig` ?\r\n\r\n\r\n### Proposed solution\r\n\r\nOne solution would be to integrate `svgutils` directly as a required package when installing `matplotlib`, and use it. However, it is relatively new, and I do not know for how long it will be maintained.\r\n\r\nAnother solution would be to list all parameters of the rc file that should be scaled up, and work around this ?","comments":["What is the motivation for this?","Short answer: if someone wants a figure twice bigger while maintaining the default matplotlib layout, in terms of axis linewidths, tick lengths, etc ...\r\n\r\nLonger answer:\r\n\r\nAs for me, the motivation is mainly integrate those in presentations or webpages while painting consistency in terms of fontsizes, linewidths, and symbols sizes across the different figures and with the surrounding text.\r\n\r\nTo maintain consistency, one has to prepare the figures already at the size at which they will be integrated in the document, presentation, webpage, and not use scaling arguments often offered by the tool when integrating the figure (i.e if you want a figure half the width of your presentation or full width, you should not use something similar to `width=50%` as it will also shrink the fontsizes, linewidths etc...).\r\n\r\nHowever, `matplotlib` default `rcparams` are very well designed to look good for a figure inside a document, i.e with a size around the default figsize. Consider now you want to include the matplotlib figure in a HTML presentation, or webpage. Typical screen resolution being 1920*1080, and considering a typical ppi of 96, you will need a figsize of about 20 inches for a full screen figure, which results in super small line widths for the axis:\r\n\r\n```python\r\nfrom matplotlib import rcParams\r\n\r\n# document properties\r\nrevealjs_width = 1920  # [px]\r\nrevealjs_height = 1080  # [px]\r\nrevealjs_fontsize = 40  # [px]\r\nrevealjs_ppi = 96  # [px per inches]\r\n\r\n# constants\r\ngolden_ratio = (1 + 5**0.5) \/ 2\r\nptpi = 72  # [pt per inches]\r\n\r\npx_per_pt = (revealjs_ppi \/ ptpi)  # px per pt\r\nscaling_factor = 1\r\n\r\n# updating params\r\nrcParams['font.size'] = int(revealjs_fontsize \/ px_per_pt \/ scaling_factor)\r\n\r\nregular_fig_height = 0.75 * revealjs_height \/ revealjs_ppi \/ scaling_factor\r\nregular_fig_width = regular_fig_height * golden_ratio\r\nregular_fig_size = (regular_fig_width, regular_fig_height)\r\nrcParams['figure.figsize'] = regular_fig_size\r\n\r\nif __name__ == '__main__':\r\n    import matplotlib.pyplot as plt\r\n\r\n    fig = plt.figure(layout='constrained')\r\n    plt.plot([0, 1], [0, 1])\r\n    plt.gca().set_xlabel('Some label')\r\n    plt.gca().set_ylabel('Some label')\r\n    plt.savefig('test_scale_up.svg')\r\n```\r\n![test_scale_up](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/48522112\/85b45d57-8693-4e51-b1d9-ac043f444633)\r\n\r\n\r\nHowever, you can consider building a 10 inches  figure with matplotlib default rcparams, and then scale it up by a factor two:\r\n\r\n```python\r\nimport svgutils.transform as sg\r\nfrom matplotlib import rcParams\r\n\r\n# document properties\r\nrevealjs_width = 1920  # [px]\r\nrevealjs_height = 1080  # [px]\r\nrevealjs_fontsize = 40  # [px]\r\nrevealjs_ppi = 96  # [px per inches]\r\n\r\n# constants\r\ngolden_ratio = (1 + 5**0.5) \/ 2\r\nptpi = 72  # [pt per inches]\r\n\r\npx_per_pt = (revealjs_ppi \/ ptpi)  # px per pt\r\nscaling_factor = 2\r\n\r\n# updating params\r\nrcParams['font.size'] = int(revealjs_fontsize \/ px_per_pt \/ scaling_factor)\r\n\r\nregular_fig_height = 0.75 * revealjs_height \/ revealjs_ppi \/ scaling_factor\r\nregular_fig_width = regular_fig_height * golden_ratio\r\nregular_fig_size = (regular_fig_width, regular_fig_height)\r\nrcParams['figure.figsize'] = regular_fig_size\r\n\r\nif __name__ == '__main__':\r\n    import matplotlib.pyplot as plt\r\n\r\n    fig = plt.figure(layout='constrained')\r\n    plt.plot([0, 1], [0, 1])\r\n    plt.gca().set_xlabel('Some label')\r\n    plt.gca().set_ylabel('Some label')\r\n    plt.savefig('test_scale_up.svg')\r\n\r\n    #\r\n    fig = sg.fromfile('test_scale_up.svg')\r\n    newsize = ['{}pt'.format(scaling_factor * float(i.replace('pt', ''))) for i in fig.get_size()]\r\n\r\n    fig.set_size(newsize)\r\n    fig.save('test_scale_up.svg')\r\n```\r\n\r\n![test_scale_up](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/48522112\/a002bf28-8bd1-4962-88f1-d30e77e2b270)\r\n\r\nHope that makes sense.","There is an rcparam for linewidth (and marker size) as well.\r\n\r\nI suspect that this might be a good case for `mpl.style.use(make_for_size(20))` where `make_for_size` returns a dictionary of all of the rcparams you want to set for a given size figure (I can imagine you may also want to tune some of the layout values for spacing between subplots and the values of the automargin code).\r\n\r\nI am very skeptical of adding this sort of post-processing into Matplotlib (as it can clearly some aspects of it can be done by external tools working only on the svg), however I think the root source of these issues is that we specify a number of sizes in absolute units (px, pts, etc).  I think what you really want is for the linewidth to be specified in relative size (looks like svg can technically do this: https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/SVG\/Attribute\/stroke-width) but I have no guess off the top of my head how hard that would be to thread through Matplotlib. ","Figures have things in relative units (axes sizes, data) and physical units (fonts, line widths).  If you make the figure twice as large, then the relative units grow but the physical units stay the same.  \r\n\r\nHowever, it seems you want the physical sizes to also grow.  So you double the figure size you want the fonts to double in size as well.  To my view that is the job of the viewer or program embedding the figure, not Matplotlib.  \r\n\r\nHowever, I am confused because above you also say\r\n\r\n>  you want a figure half the width of your presentation or full width, you should not use something similar to width=50% as it will also shrink the fontsizes, linewidths etc...).\r\n\r\nwhich says to me that you do _not_ want the objects with physical to change size.  In which case, you can just change the figure size?\r\n\r\nTLDR: If you just want to change the figure size and keep font sizes the same, just change the figure size.  If you want to scale everything in the figure, scale it in your presentation or word-processing software.  ","@tacaswell \r\n\r\n> I suspect that this might be a good case for mpl.style.use(make_for_size(20)) where make_for_size returns a dictionary of > all of the rcparams you want to set for a given size figure (I can imagine you may also want to tune some of the layout > > values for spacing between subplots and the values of the automargin code).\r\n\r\nMaybe at first, having just a function, or an example in the doc, listing all the parameters that are not in relative units, and showing how to scale the with the `figsize` would be enough ?\r\n\r\nI do agree that adding the post-processing of figures to `matplotlib` is surely not a good idea, and it's probably best to leave this to specific vector graphic tools, running in Python or not.","@jklymak \r\n\r\n>  If you want to scale everything in the figure, scale it in your presentation or word-processing software.\r\n\r\nUnfortunately, not every presentation or word-processing software offers this functionality. Working in LaTeX, I could change the macro inserting figures so that everything is inserted at a `scale = 2`. \r\n\r\nHowever, it is much more difficult for `.html` documents. For CSS < Version 3, it is not possible and requires using js queries. For the more recent versions, it requires `transform`, which does not go well with the flow of elements and usually breaks it or `zoom` which is not widely supported and non-standard, and thus not recommended. \r\n\r\n","@cgadal I'm no html expert, and I don't know how you are trying to embed your images, but it would be shocking to me if _scalable_ vector graphics were not indeed scalable in most browsers since that is the whole point of them.  \r\n\r\nOn google and chrome just testing with no css:\r\n\r\n```html\r\n<div>\r\n    <img src=\"boo.svg\" style=\"width: 90%\">\r\n<\/div>\r\n<div>\r\n    <img src=\"boo.svg\" style=\"width: 70%\">\r\n<\/div>\r\n<div>\r\n    <img src=\"boo.svg\" style=\"width: 20%\">\r\n<\/div>\r\n```\r\ngives me scaled Matplotlib svgs that adapt as I make the viewport wider or narrower.  I can also use fixed sizes. \r\n\r\n<img width=\"1044\" alt=\"SVG\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1562854\/09be67ae-bc2d-477c-bdca-0aefcab7618e\">\r\n","@jklymak \r\nI am sorry I am not clear enough on this. Doing this scales the object with respect to the parent container, not the object itself.\r\n\r\nIf I try to summarize my issue based on your example, I'd like to do the exact same thing but:\r\n\r\n-  while conserving the font size, line widths, etc .. between the 3 figures\r\n-  doing for a page that's typically in 1920px*1080px, with fontsize for labels of 40 px ~ 30 pt\r\n- conserving the default matplotlib layout, i.e ratio between fontsize, linewidths etc ...\r\n\r\n if you try to do this, it seems to me you need to print your figures at the size you want them to be on your page.\r\n\r\nEDIT: Another constraint is that you often want to include your figures somewhere with an already defined layout, and it makes sense to me that you want to adapt the figure to the document layout, rather than modify the document layout (i.e the CSS file) to adapt it to the matplotlib layout.","@cgadal These are all different things.  \r\n\r\n> while conserving the font size, line widths, etc .. between the 3 figures\r\n\r\nThen you change the fig size parameter:  `fig.set_size_inches(figsize)`\r\n\r\n<img width=\"427\" alt=\"Scale\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1562854\/b9fdaa2d-92fe-4613-b373-f8baff482890\">\r\n\r\n\r\n> doing for a page that's typically in 1920px*1080px, with fontsize for labels of 40 px ~ 30 pt\r\n\r\nIts not clear if you want to do this at the same time as the above; it is also not clear if you _just_ want the font size to increase, or if you want the lines to also thicken.  If you want both, then you make the figure smaller, and scale in your presenter:\r\n\r\n<img width=\"427\" alt=\"WidthsChange\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1562854\/bf477928-0a5a-4233-be5b-6ce30cf48421\">\r\n\r\nIf you just want the fonts to change size then you just do  `matplotlib.rc('font', size=30)`\r\n\r\n<img width=\"427\" alt=\"BigFont\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1562854\/f4c476d6-7d96-4c8c-a0a7-a501e0ab0947\">\r\n\r\n> conserving the default matplotlib layout, i.e ratio between fontsize, linewidths etc ...\r\n\r\nAs above, you do that by making the figure smaller in Matplotlib, and scaling up in your viewer. \r\n\r\n> EDIT: Another constraint is that you often want to include your figures somewhere with an already defined layout, and it makes sense to me that you want to adapt the figure to the document layout, rather than modify the document layout (i.e the CSS file) to adapt it to the matplotlib layout.\r\n\r\nSure, let's say you want your figure to be 5 inches wide by 4 inches high, but fonts and lines scaled up to be larger so that a 12-pt font is 30 pts.  In Matplotlib you just do:\r\n\r\n```\r\nscale = 30\/12\r\nfig, ax = plt.subplots(layout='constrained', figsize=(5\/scale, 4\/scale))\r\n```\r\n\r\nand in your html you just do\r\n\r\n```\r\n    <img src=\"Scaled.svg\" style=\"width: 5in\">\r\n```\r\n\r\nyour fonts will be 30 pts, and your lines will be thicker\r\n\r\n<img width=\"713\" alt=\"Scaling\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1562854\/4f447e6a-efe0-4679-b02d-ae5b67da548a\">\r\n\r\nI agree that the resulting svg claims it is only 2 inches wide instead of 5 inches.  But that really doesn't matter at all - it's the relative size of the figure to its elements that matters.  After that, it is the job of the viewer to scale the graphic.   However, if you want to rescale it in SVG post processing, you can do that, but I don't think Matplotlib should be involved in that.  \r\n\r\n\r\n","Also note that if you _really_ want to not use `width=5in`, you can edit the svg yourself:\r\n\r\n```\r\n<svg xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\" width=\"144pt\" height=\"115.2pt\" viewBox=\"0 0 144 115.2\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" version=\"1.1\">\r\n```\r\n\r\nto \r\n\r\n```\r\n<svg xmlns:xlink=\"http:\/\/www.w3.org\/1999\/xlink\" width=\"360pt\" height=\"288pt\" viewBox=\"0 0 144 115.2\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\" version=\"1.1\">\r\n```\r\n\r\nwhich reports the correct size and otherwise looks identical to the above. \r\n\r\nI guess all you are asking is that Matplotlib do this for you on `savefig`.    I think we would balk at adding something that can only be done for one backend.  It's possible\/likely something similar exists for PDF and EPS so maybe a `scale_vector_output` is possible.  However, in my opinion, it's the wrong tool for the job.  "],"labels":["New feature","status: needs clarification"]},{"title":"[ENH]: Better support for stackplot with units [particularly datetimes]","body":"### Problem\r\n\r\nAs noted during the review of #27114, the current support of units in stackplot is subpar, particularly for the `y` axis.\r\n\r\nFor datetimes in particular, the implicit 0 of the API is problematic, introducing 1970-01-01 when that is not a relevant date.\r\n\r\nTherefore I suggest allowing `baseline` to be not only the current supported string literals, but also a scalar value (or potentially an array, I guess) such that a \"sensible\" baseline can be provided for cases where `0` is not sensible. (even the other options for baseline assume you want your plot centered around 0... I'm not concerned about wanting \"wiggle centered at 2023-02-28\" or anything like that, that seems perhaps a bridge too far.)\r\n\r\nI also think it is important to explicitly state that the y values are in delta units (similar to how we do for e.g. [`bar`](https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.axes.Axes.bar.html#matplotlib.axes.Axes.bar) for the `width` parameter. This is already true in that adding actual datetime values will fail, but passing timedelta objects will work.\r\n\r\nFinally, the `cumsum` call contains a `promote_types(y.dtype, np.float32)`, which will fail for `np.timedelta64` arrays (Edit, to be consistent with other points, clarified that I really meant timedelta instead of datetime64 here):\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/39582424f8ce5e042e4e39eeac94893f222c9f8b\/lib\/matplotlib\/stackplot.py#L81\r\n\r\nSo either removing that or at least handling the error case is needed. It's not fully clear to me what we are guarding against there, as `cumsum` of integers is fine being integral, though I guess we _could_ run into overflow issues? Passing `datetime.timedelta` as `object` arrays (or as lists which get turned into `object` arrays) will work and produce _a_ plot, just without a sensible baseline, currently. \r\n\r\n### Proposed solution\r\n\r\n_No response_","comments":["I didn't really think about this in depth, but does a stackplot centered on a time\/date actually ever make sense? I think stackplots centered on the zero timedelta does make sense, though that goes back to the long-standing issue of adding a unit converter for timedeltas. Centering on a time\/date, I'm not so sure.","I think that allowing baseline to be a scalar is a relatively easy change that makes sense and makes it more consistent with other plot types that have implicit zeros (e.g. bar graphs, stem plots, etc) While I do not have a specific usecase in mind, I think that is a good change regardless.\r\n\r\nBeyond that, clarifying in docs that units are in delta units I think makes sense because they are processed through `cumsum`. and while I also agree that `datetime` is an odd one, it is a specific case of the general class of unit-ful data that has a different unit for delta vs absolute (and it is the only one that is baked in to the core library).\r\n\r\nThe other common unit that has such a distinction is temperature units (at least in some unit libraries) and I can easily think of  plot that is using stackplot to e.g. plot the contribution of different energy sources to the temperature of something, and wanting that baseline to be the starting temperature, e.g.\r\n\r\nSo, in summary I agree that the specific case is unusual, but the general case that can be enabled by relatively small changes may be useful. (And the specific case just gives us the ability to test it)","Hey guys! I think that I got what you mean. I'm going to open a PR implementing the possibility of the baseline receiving a scalar value. About it receiving an array, as far as I understood, the possibility is still open. Also, with the PR, I believe that more fruitful discussion will occur, which is a plus. Glad to close it or do any other action based on your feedback!"],"labels":["New feature"]},{"title":"Creating @skipif_font_missing","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nCreates skipif_font_missing decorator to make tests involving fonts cleaner. Closes #27121\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- N\/A new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- N\/A *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- N\/A *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- N\/A Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Thanks for taking this on! I agree w\/ @ksunden  on retaining the current behavior such that:\r\n\r\n* @skipif_font_missing(['A', 'B']) parametrizes two tests:\r\n  *  test a: runs if font A is present\r\n  *  test b: runs if font B is present\r\n* @skipif_font_missing([['A', 'B'], ['C', 'D']]) also parameterizes two tests:\r\n  * test a: run if A and B are present\r\n  * test b: run if C and D are present\r\n\r\nBut I would prefer that this provides a font_list fixture so that there's no chance of skipped files being out of sync with tested files - basically I don't want to risk the setup where the paramterized font_list is different from the tested font_list & I can easily see that happening accidentally cause of thrashing. \r\n\r\nCould the way to do that while still having true false semantics is that if a font_file is not found then it returns false, and if the file is found it returns the file (or true)-> basically there's the \"bool check if fontfound\" function that does what Kyle is asking for, but then it's wrapped in the @skip_if decorator I'm asking for? So that the different functions can be used as needed?\r\n\r\nETA: something like:\r\n\r\n```python\r\n\r\ndef _font_found(font_list):\r\n    # code to look up fonts      \r\n    return is_found\r\n\r\ndef skipif_font_found(font_list):\r\n    _font_found(font_list)\r\n   #does whatever magic to be a fixture\r\n```","Writing decorators that work with pytest is a bit non-trivial because of the amount of magic that pytest does to make discovery and fixtures work.\r\n\r\nI think you either want to parameterize using `pytest.mark` like https:\/\/github.com\/matplotlib\/matplotlib\/blob\/1d1171fa04a7d1fc3c2826b593610a2f832374f0\/lib\/matplotlib\/testing\/decorators.py#L46-L53 or you need to do things like https:\/\/github.com\/matplotlib\/matplotlib\/blob\/1d1171fa04a7d1fc3c2826b593610a2f832374f0\/lib\/matplotlib\/testing\/decorators.py#L190-L203\r\n\r\nBecause the tests are already parameterized I think you will have to do something closer to the second.\r\n\r\nOverall I am \ud83d\udc4e\ud83c\udffb on this change.  It technically reduces a bit of duplication, but the balance of complexity we have to pick up (writing a decorator that integrates with pytest's fixtures and test discovery and maybe a second one for non-parameterized tests) to do so is not worth it.\r\n","> It technically reduces a bit of duplication, \n\nIt's not just a bit, we use this check in a lot of the font tests. The reason I want this is to improve consistency in the tests. I had to add these tests\/fixtures in a bunch of places b\/c the code\/tests segfault if the font is missing - which yes we should definitely be writing more robust code on the C side so that doesn't happen- and am far more comfortable with a consistent way of doing so. ","> segfault if the font is missing\r\n\r\nYou can segfault main with a missing font?!  If so is there an issue for that and it should be release critical for 3.8.1","> You can segfault main with a missing font?! If so is there an issue for that and it should be release critical for 3.8.1\n\nYeah... any font code where you're trying to access a property on face fails if face is none...the Python code guards against this but not the C++ code.","Do we have a reproducer that segfaults?\r\n\r\nIf you pass a non-existant font, you still just get:\r\n\r\n```\r\nfindfont: Font family 'this_doesnt_exist' not found.\r\n```\r\n\r\nwhich isn't a segfault. ","I'm not gonna be near a computer for most of today, but try Ft2Font objects directly - that findfont warning is printed in fontmanager, & the problems can arise when you bypass font-manager.","I mean, you can't make a FT2Font object without a valid font file, so I don't think there is a problem... ","Maybe, but lots of the c++ font code isn't super well tested (xref #27115) which is why I could remove warnings without breaking tests.\n\nAnd also you can totally pass in a missing fontfile in as part of the fallback list - that's how I get the the fallback Chinese examples to work on Windows. https:\/\/matplotlib.org\/devdocs\/users\/explain\/text\/fonts.html#font-fallback","@PaMeirelles I think what objection there is is to the decorator, so I'd recommend factoring out a Boolean \"_is_font_found\" method that could be used in a decorator or tests or wherever else. Possibly this method can be put in font manager or book or something - @anntzer may have an idea.\n\nThen we can separately discuss the utility of wrapping it in a decorator.","I guess we really just need a helper in font_manager that does basically the same thing as findfont, but returns None (or raises) when the font of the requested family is not found, without ever trying to return a font from another family or performing fallback?\r\nI agree with @tacaswell that wrapping in a pytest decorator is just too much complexity to be worth it.","> I guess we really just need a helper in font_manager that does basically the same thing as findfont, but returns None (or raises) when the font of the requested family is not found, without ever trying to return a font from another family or performing fallback?\n\nYeah, specifically it can't raise & should be passable to skip_if \n\nAnd there's probably a way to compose it with a font_list parameterization to do what I want","hi @PaMeirelles - let us know if you need help with rebasing this. Here's basic instructions: https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html#rebase-onto-upstream-main"],"labels":["status: needs rebase"]},{"title":"[MNT]: create a skipif decorator for missing fonts","body":"### Summary\r\n\r\nA ton of the testing code dealing with fonts has something like the following code block in it\r\n\r\n``` python\r\nfp = fm.FontProperties(family=[family_name])\r\n\r\nfound_file_name = Path(fm.findfont(fp)).name\r\nif file_name not in found_file_name:\r\n    pytest.skip(f\"Font {family_name} ({file_name}) is missing\")\r\n```\r\n\r\n\r\n### Proposed fix\r\n\r\nI think it'd be a lot cleaner if this could be wrapped up as a `@skipif_font_missing` decorator\/fixture. Something like\r\n\r\n```python\r\n@skipif_font_missing(['Dejavu Sans', `Noto SansTC`]):\r\ndef test_font(family_name):\r\n    # testing code\r\n```\r\n\r\npossibly with a nesting option when you want to explicitely test lists\r\n```python\r\n@skipif_font_missing([['Dejavu Sans', `Noto SansTC`]]):\r\ndef test_font(family_name):\r\n    for font in family_name:\r\n```\r\n\r\nIf new contributors are interested in working on this, this function would be added to [matplotlib.testing.decorators](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/lib\/matplotlib\/testing\/decorators.py). This issue requires working knowledge of pytest and some fluency with how matplotlib works with fonts.","comments":[],"labels":["topic: testing","Difficulty: Medium","topic: text\/fonts","Maintenance"]},{"title":"[MNT]: Add more tests for `FT2Font.load_char`","body":"### Summary\r\n\r\nIn #26989 I could remove the lines warning that a glyph was missing without breaking any tests:\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/112a2257387b72490f7ab0e0b428a2abd2c39374\/src\/ft2font.cpp#L582-L585\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/112a2257387b72490f7ab0e0b428a2abd2c39374\/src\/ft2font.cpp#L594-L596\r\n\r\nI didn't remove the warnings cause I don't think we test what [Ft2Font.load_char](https:\/\/matplotlib.org\/devdocs\/api\/ft2font.html#matplotlib.ft2font.FT2Font.load_char) does when given a missing glyph. It's used in three places in the library: \r\n* mathtext: https:\/\/github.com\/matplotlib\/matplotlib\/blob\/978b402159bd40663bcf74d3beef62b009010083\/lib\/matplotlib\/_mathtext.py#L329-L333\r\n* textpath: https:\/\/github.com\/matplotlib\/matplotlib\/blob\/978b402159bd40663bcf74d3beef62b009010083\/lib\/matplotlib\/textpath.py#L163-L167\r\n* backend_pdf: https:\/\/github.com\/matplotlib\/matplotlib\/blob\/978b402159bd40663bcf74d3beef62b009010083\/lib\/matplotlib\/backends\/backend_pdf.py#L661-L664\r\n\r\n### Proposed fix\r\n\r\nMinimally, there should be at least two tests of how `load_char` \/the methods calling it handle missing glyphs - mathtext may be a good start. There should be one test for each codepath that triggers a missing glyph error. It would probably also be good to add some more tests for TextPath -> it mostly seems to be tested via gallery examples. ","comments":[],"labels":["topic: text","topic: testing","Maintenance"]},{"title":"Deduplicate hatch validate","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\nCloses #24797 \r\n\r\nHello! I replaced the deprecated warning from `_validate_hatch_pattern()` function in hatch.py with the validate_hatch() warn from rcsetup.py. I also make `validate_hatch()` warn from rcsetup.py use the `_validate_hatch_pattern()` function. This removed the deprecated warning from the hatch validation code and made it the canonical validator for all hatch patterns.\r\n\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #24797\".\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #24797\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [N\/A] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["@ksunden I reverted all of the unrelated changes and followed your sugestion of using \"validate_hatch = _validate_hatch_pattern\" instead of my previous solution.","I believe the failures here are legitimate, could you take a look and try to fix those @EricRLeao1311 ? You can find more information on the failures here: https:\/\/github.com\/matplotlib\/matplotlib\/actions\/runs\/6559832186\/job\/17816229759?pr=27108#step:13:1","There is another difference between the two validators. While one of them accepts 'X', the other does not. This creates problems and makes it fail tests when we accept the 'X' as a valid hatch. I am removing it from validation, but I believe it would be better to accept it, as the discussion is moving towards greater acceptance for different hatches.","@melissawm Could you help me me with what I should do in this case where there are 2 inconsistent tests? One that says 'X' is a valid hatch, while the other says that 'X' is an invalid hatch. (_validate_hatch_pattern() accepts 'X' while validate_hatch() does not) Could I remove the test that checks whether 'X' is invalid given that discussions are moving towards greater acceptance of different hatches? Thanks in advance.","@EricRLeao1311 sorry for the delay in getting back to you, do you know why one accepts X and the other doesn't?","@story645 the discrepancy arises from different implementation logic. In hatch.py we have \"valid_hatch_patterns = set(r'-+|\/\\xXoO.*')\" but in rcsetup.py we have \"unknown = set(s) - {'\\\\', '\/', '|', '-', '+', '*', '.', 'x', 'o', 'O'}\". I don't think there is a greater reason for one to accept X and the other not. I propose aligning both validators to accept 'X' as discussions lean towards greater acceptance, but for this we need to change test cases.","> I propose aligning both validators to accept 'X' as discussions lean towards greater acceptance\n\nI agree w\/ you on that.","Since there are test cases that accept X and that do not accept X, how should I proceed? Can I change the test that does not accept capital X to accept it? If so, how could I do this?","> Can I change the test that does not accept capital X to accept it? If so, how could I do this?\r\n\r\nSounds good to me? I think you move the X out of the fail and into the success set: \r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/3d56dc404cfb193370543482868d74c6934c2478\/lib\/matplotlib\/tests\/test_rcparams.py#L313-L317"],"labels":["Maintenance","topic: hatch"]},{"title":"[Bug]: build failure with meson + python 3.11\/3.12 + macos14.0","body":"### Bug summary\r\n\r\nI fail to build matplotlib HEAD with python 3.11\/3.12 (freshly updated mamba environment) on macos14.0\r\n\r\n### Code for reproduction\r\n\r\nFrom a matplotlib repo:\r\n```sh\r\ngit clean -xdf && pip install --no-build-isolation -ve .\r\n```\r\n\r\n### Actual outcome\r\n\r\n```\r\nUsing pip 23.1.2 from \/Users\/antony\/mambaforge\/envs\/default\/lib\/python3.12\/site-packages\/pip (python 3.12)\r\nUser install by explicit request\r\nCreated temporary directory: \/private\/var\/folders\/19\/mg_y1scj38z0v1v99tgtkn3m0000gn\/T\/pip-build-tracker-wb1h_5bj\r\nInitialized build tracking at \/private\/var\/folders\/19\/mg_y1scj38z0v1v99tgtkn3m0000gn\/T\/pip-build-tracker-wb1h_5bj\r\nCreated build tracker: \/private\/var\/folders\/19\/mg_y1scj38z0v1v99tgtkn3m0000gn\/T\/pip-build-tracker-wb1h_5bj\r\nEntered build tracker: \/private\/var\/folders\/19\/mg_y1scj38z0v1v99tgtkn3m0000gn\/T\/pip-build-tracker-wb1h_5bj\r\nCreated temporary directory: \/private\/var\/folders\/19\/mg_y1scj38z0v1v99tgtkn3m0000gn\/T\/pip-install-80otcewo\r\nCreated temporary directory: \/private\/var\/folders\/19\/mg_y1scj38z0v1v99tgtkn3m0000gn\/T\/pip-ephem-wheel-cache-2d3i6u_d\r\nObtaining file:\/\/\/Users\/antony\/src\/extern\/matplotlib\r\n  Added file:\/\/\/Users\/antony\/src\/extern\/matplotlib to build tracker '\/private\/var\/folders\/19\/mg_y1scj38z0v1v99tgtkn3m0000gn\/T\/pip-build-tracker-wb1h_5bj'\r\n  Running command Checking if build backend supports build_editable\r\n  Checking if build backend supports build_editable ... done\r\n  Created temporary directory: \/private\/var\/folders\/19\/mg_y1scj38z0v1v99tgtkn3m0000gn\/T\/pip-modern-metadata-qm6cfgxp\r\n  Running command Preparing editable metadata (pyproject.toml)\r\n  + meson setup \/Users\/antony\/src\/extern\/matplotlib \/Users\/antony\/src\/extern\/matplotlib\/build\/cp312 -Dbuildtype=release -Db_ndebug=if-release -Db_vscrt=md --native-file=\/Users\/antony\/src\/extern\/matplotlib\/build\/cp312\/meson-python-native-file.ini\r\n  The Meson build system\r\n  Version: 1.2.2\r\n  Source dir: \/Users\/antony\/src\/extern\/matplotlib\r\n  Build dir: \/Users\/antony\/src\/extern\/matplotlib\/build\/cp312\r\n  Build type: native build\r\n  Project name: matplotlib\r\n  Project version: 3.9.0.dev0\r\n\r\n  ..\/..\/meson.build:1:0: ERROR: Unable to detect linker for compiler `cc -Wl,--version -fdiagnostics-color`\r\n  stdout:\r\n  stderr: ld: unknown options: --version\r\n  clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n\r\n\r\n  A full log can be found at \/Users\/antony\/src\/extern\/matplotlib\/build\/cp312\/meson-logs\/meson-log.txt\r\n  error: subprocess-exited-with-error\r\n\r\n  \u00d7 Preparing editable metadata (pyproject.toml) did not run successfully.\r\n  \u2502 exit code: 1\r\n  \u2570\u2500> See above for output.\r\n```\r\n\r\n### Expected outcome\r\n\r\nbuild succeeds\r\n\r\n### Additional information\r\n\r\n- It's unclear to me whether that's rather an issue on meson-python's side.\r\n- `cc -Wl,--version -fdiagnostics-color` indeed errors as above.  `cc` is `\/usr\/bin\/cc`, `cc --version` is:\r\n```\r\nApple clang version 15.0.0 (clang-1500.0.40.1)\r\nTarget: arm64-apple-darwin23.0.0\r\nThread model: posix\r\nInstalledDir: \/Library\/Developer\/CommandLineTools\/usr\/bin\r\n```\r\n\r\n### Operating system\r\n\r\nmacos 14\r\n\r\n### Matplotlib Version\r\n\r\nv3.8.0-447-g112a225738\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nNone","comments":["Can you check what's actually being tested in `meson-log.txt`?","GNU `ld` supports `--version`, but LLVM `ld` from macos does not support `--version` ( it does support `-v` though, which is roughly equivalent)\r\n\r\nGNU `ld` also supports `-v`, though `--version` additionally outputs copyright info, whereas `ld -v` just gives the one line.","(That said, I do not see this error with my setup, which is using pip\/virtualenv rather than conda\/mamba envs\/packages)\r\n\r\nAlso I guess its probably BSD `ld` rather than \"LLVM\", but the point stands (`bsd` is not actually mentioned in either the `-v` or the man page, but it seems more correct)","meson-log.txt, back on python3.11 (though I suspect 3.12 would be the same):\r\n```\r\nBuild started at 2023-10-17T08:53:30.600154\r\nMain binary: \/opt\/homebrew\/opt\/python@3.11\/bin\/python3.11\r\nBuild Options: -Dbuildtype=release -Db_ndebug=if-release -Db_vscrt=md --native-file=\/Users\/antony\/src\/extern\/matplotlib\/build\/cp311\/meson-python-native-file.ini\r\nPython system: Darwin\r\nThe Meson build system\r\nVersion: 1.2.2\r\nSource dir: \/Users\/antony\/src\/extern\/matplotlib\r\nBuild dir: \/Users\/antony\/src\/extern\/matplotlib\/build\/cp311\r\nBuild type: native build\r\nProject name: matplotlib\r\nProject version: 3.9.0.dev0\r\n-----------\r\nDetecting compiler via: `cc --version` -> 0\r\nstdout:\r\nApple clang version 15.0.0 (clang-1500.0.40.1)\r\nTarget: arm64-apple-darwin23.0.0\r\nThread model: posix\r\nInstalledDir: \/Library\/Developer\/CommandLineTools\/usr\/bin\r\n-----------\r\nRunning command: cc -E -dM -\r\n-----\r\n-----------\r\nDetecting linker via: `cc -Wl,--version -fdiagnostics-color` -> 1\r\nstderr:\r\nld: unknown options: --version\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n-----------\r\n\r\n..\/..\/meson.build:1:0: ERROR: Unable to detect linker for compiler `cc -Wl,--version -fdiagnostics-color`\r\nstdout:\r\nstderr: ld: unknown options: --version\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n```\r\nhmm... that's interesting that it seems to find homebrew's python (even though I am in an active mamba environment, where typing python at the shell indeed gives me mamba's python); however, I guess that may be another separate issue?","Do you perhaps have Meson installed via homebrew and not the mamba environment? I'd expect that might be why it's finding an unexpected Python.","Ah, indeed.  Fixed that (meson is now installed in the env and I even removed the homebrew one just to be sure).  The logs now show that the correct (mamba) python is found, but the error (regarding `ld --version`) remains the same.","Seems like an upstream bug actually, see https:\/\/github.com\/mesonbuild\/meson\/issues\/12282 -- the LDFLAGS fix does work for me.\r\nMay still be worth a note or a workaround?","Yes, it seems to be an Xcode 15 problem, but I wasn't able to work out if there's any update that would fix it.","@anntzer did Meson 1.3.0 help here?","Even meson 1.2.3 fixed this, thanks.\r\n\r\n-----\r\n\r\nEdit: actually, no, even with 1.3.0, a fresh install needs LDFLAGS.\r\nI'm also having issues with editable installs not working at all anymore... will try to do a proper writeup.","> I'm also having issues with editable installs not working at all anymore... will try to do a proper writeup.\r\n\r\nRemember to pass `--no-build-isolation` for those (don't know why `pip` would not default to that).","Yes, this was with --no-build-isolation.\r\n...\r\nAlthough after uninstalling and reinstalling pybind11 (which is what the editable install was complaining about), everything works again (well, if I pass LDFLAGS).  Sorry for the lack of clean repro, I let you know if I manage to get one."],"labels":["Build"]},{"title":"[Bug]: clabels with logarithmic axes","body":"### Bug summary\r\n\r\nI am using clabels. However, when introducing logarithmic axes, the inline placement becomes inaccurate.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\ndelta = 0.025\r\nx = np.geomspace(1e-2, 1e3, 40)\r\ny = np.geomspace(1e-2, 1e3, 40)\r\nX, Y = np.meshgrid(x, y)\r\nZ = np.log(X) + np.log(Y)\r\n\r\nfig, ax = plt.subplots(nrows=1, figsize=(3, 3))\r\n\r\n\r\nCS = ax.contour(X, Y, Z)\r\nax.clabel(CS, inline=1, fontsize=10)\r\nax.set_xscale('log')\r\nax.set_yscale('log')\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n![example](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/15159319\/7050ec8c-3632-4992-b201-e7d6a2fba667)\r\n\r\n\r\n### Expected outcome\r\n\r\nWhat is quite interesting: If I create several subplots with an identical content, using shared x and y axes, all but the first plot will show the correct behaviour.\r\n\r\nThis code:\r\n\r\n```\r\nfig, ax = plt.subplots(nrows=1, ncols=3, sharey=True, sharex=True, figsize=(10, 3.2))\r\n\r\nCS = ax[0].contour(X, Y, Z)\r\nax[0].clabel(CS, inline=1, fontsize=10)\r\nax[0].set_xscale('log')\r\nax[0].set_yscale('log')\r\n\r\nCS = ax[1].contour(X, Y, Z)\r\nax[1].clabel(CS, inline=1, fontsize=10)\r\nax[1].set_xscale('log')\r\nax[1].set_yscale('log')\r\n\r\nCS = ax[2].contour(X, Y, Z)\r\nax[2].clabel(CS, inline=1, fontsize=10)\r\nax[2].set_xscale('log')\r\nax[2].set_yscale('log')\r\n```\r\n\r\nwith the X, Y, Z values from above, lead to this plot:\r\n\r\n![working](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/15159319\/7aa29162-dc86-4afe-9f71-6908604e2d2d)\r\n\r\nNote that this only provides the correct results for `sharex=True` and `sharey=True`, if one (or both) are set to False, results are invalid.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nLinux and MacOS\r\n\r\n### Matplotlib Version\r\n\r\n3.7.3\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\n3.8.10\r\n\r\n### Jupyter version\r\n\r\n6.0.3\r\n\r\n### Installation\r\n\r\npip","comments":["I can reproduce this with v3.8.0, but if I put the `clabel` call after the setting the log scales, it looks right:\r\n\r\n![test](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10599679\/599de5c4-708e-49a5-9fd4-cb9b397af306)\r\n\r\nSo I think the reason the second and third plots in the shared axis figure look right is because they already have the log scale when the contour labels are calculated.\r\n","> I can reproduce this with v3.8.0, but if I put the `clabel` call after the setting the log scales, it looks right:\r\n> \r\n> ![test](https:\/\/user-images.githubusercontent.com\/10599679\/274892260-599de5c4-708e-49a5-9fd4-cb9b397af306.png)\r\n> \r\n> So I think the reason the second and third plots in the shared axis figure look right is because they already have the log scale when the contour labels are calculated.\r\n\r\nOh my! That is an embarrassingly simple solution to my problem! Thanks a lot! \ud83d\ude04 \r\n\r\nDoes this still count as a bug so I keep the issue open, or is this expected behaviour?","I _think_ making the original example work would require calculating the labels (and modifying the contours) at draw time rather than when `clabel` is called.  Since the draw machinery is often called multiple times for a figure, that could potentially be inefficient.\r\n\r\nIt might be better to wait for a more experienced developer to weigh in though.","I think @rcomer is correct.  In general it is safest to assume things are \"drawn\" when you call them. In addition to very substantial inefficiencies, it would require a whole lot of machinery to carry around the clabel info until draw time. ","Per https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26971#issuecomment-1743729592 I think the proper solution is to add support for knockout groups in Matplotlib's rendering model (as described in the linked comment).  Otherwise implementation would be quite complex.","One thing that would help in the case here, though, is to pass use_clabeltext=True -- at least the labels rotation is correct, even though the space removed around them is still wrong.\r\nI actually think use_clabeltext=True should be the made default (it basically recomputes text rotations at draw time based on the actual scales and limits used) and the whole option deprecated as I'm not sure there's a good reason to use the =False case (except perhaps for a small gain in performance, but I doubt it really matters).  I guess the option only exists because that functionality was added \"later\" (in 2009) and no one wanted to change the default back then.\r\nChanging the default use_clabeltext should be relatively easy (except for the usual backcompat dance); adding support for KO groups is of course a much bigger endeavor."],"labels":["API: default changes","Difficulty: Hard","topic: contour"]},{"title":"[ENH]: Hide pcolormesh underlying colorbar from qt figure options for colorbar axes","body":"### Problem\n\nIn #23080 a user tried to select a colorbar axes in the qt figure options and set a colormap on the pcolormesh that is used to draw the colorbar, hoping that the modification is propagated to the main axes.  This doesn't work, and I'm not sure it should anyways (just like if you call set_cmap on that pcolormesh programatically?), but perhaps we can give a special label() (or other internal marker) to the pcolormesh that marks it as hidden from the qt figure options, as I don't think(?) it makes sense to change any of its properties via that interface?\n\n### Proposed solution\n\n_No response_","comments":[],"labels":["New feature","GUI: Qt","topic: color\/colorbar"]},{"title":"Changing _log.info to warnings.warn and importing the warnings module.","body":"## PR summary\r\nChanging the _log.info to warnings.warn when passing string-formatted numbers as data, closes #23422 as for now. \r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n","comments":["Yeah, they weren't. I thought not a lot of discussion was going to happen, that's why I opened the PR. But I believe opening the PR sparked the discussion again, as it made it more recent and fresh.","Unfortunately, the decision is not conclusive yet. You are right that it stalled, but got revived through this PR :smile: . Let's wait, what #23422 brings."],"labels":["Maintenance"]},{"title":"MNT: set codcov to ignore docs and galleries","body":"No idea if this is the right way to do this and not sure how to check, but it's very confusing to have documentation prs fail on code cov. ","comments":["I also think adding a `threshold: 0.5%` (or 1% or whatever level we wish to add) would greatly help reduce the number of red X's we get that most just ignore anyway.\r\n\r\nI think this would go inside of the `default` entry? though have also have not looked too deeply at their config file format...","I followed the instructions in https:\/\/docs.codecov.com\/docs\/ignoring-paths and ran it on the validator, so dunno?","We have also seen issues where because we are feeding codecov from a bunch of different CI services they have the problem of deciding when they have received \"enough\" of the reports to be worth posting their report.  \r\n\r\nFor example, if we lose a windows job it can cause some tests (and code) to not be covered.  Sometimes CI has died \/ failed \/ upload errored out so it is never coming and sometimes it is just taking \"too long\" so we get a false-negative."],"labels":["status: needs rebase","Maintenance","CI: testing"]},{"title":"[ENH]: matplotlib legend fill columnswise","body":"### Problem\r\n\r\nI would like to have the options to determine how the legend should be filled, i.e. rowwise or columnwise. At the moment the rows are filled first. For example:\r\n```\r\nx = np.arange(0, 10)\r\nfig, ax = plt.subplots()\r\nax.plot(x, x, label='1')\r\nax.plot(x, x+1, label='2')\r\nax.plot(x, x+ 2, label='3')\r\nax.plot(x, x+3, label='4')\r\nax.legend(ncols=2)\r\nplt.show()\r\n```\r\n\r\nThe legend looks like:\r\n| 1 | 3 |\r\n|---|---|\r\n| 2 | 4 |\r\n\r\nWhat I would like is:\r\n| 1 | 2 |\r\n|---|---|\r\n| 3 | 4 |\r\n\r\n\r\n### Proposed solution\r\n\r\n_Not my own solution, but found here: https:\/\/stackoverflow.com\/questions\/10101141\/matplotlib-legend-add-items-across-columns-instead-of-down_ \r\n\r\nOne way to implement this is to add a keyword and use this function:\r\n```python\r\ndef flip(items, ncol):\r\n    \"\"\"\r\n    Flips the order of items in a list by grouping them into columns.\r\n    *used to fill columns of legends first*\r\n\r\n    Parameters:\r\n        items (list): The list of items to be flipped.\r\n        ncol (int): The number of columns to group the items into.\r\n\r\n    Returns:\r\n        itertools.chain: A chain object containing the flipped items.\r\n\r\n    Source:\r\n        https:\/\/stackoverflow.com\/questions\/10101141\/\r\n        matplotlib-legend-add-items-across-columns-instead-of-down\r\n    \"\"\"\r\n    return itertools.chain(*[items[i::ncol] for i in range(ncol)])\r\n\r\nhandles, labels = axs.get_legend_handles_labels()\r\nncol = 2\r\nax.legend(flip(handles, ncol), flip(labels, ncol), ncol=ncol)\r\n````\r\n\r\nAt the moment it is a seperate function, but based on an extra keyword-argument one could check if the labels should be distributed column or row wise and use the ncol argument to change this. \r\n\r\n","comments":["I'm nominally for this and also concerned about keyword creep. I think though if we do take this in, I'd prefer strings `order: {'row', 'column'}` to keep it nice and explicit.","Thank you for the feedback. I changed to code to use the keyword 'order' with the options 'horizontal' and 'vertical'. The options row and columns could be ambiguous, is `row` to fill first the rows (vertical in one column) or fill the columns of a row (horizontal). So I changed it to `order: {'horizontal', 'vertical'}`. \r\n\r\nThe pull request is updated. "],"labels":["New feature","topic: legend"]},{"title":"[Doc\/SEO]:  Google picking up old docs","body":"### Documentation Link\n\nhttps:\/\/www.google.com\/search?q=matplotlib+set_aspect+axes\n\n### Problem\n\nTop non-sponsored hit is https:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.axes.set_aspect.html.  This redirects to https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.axes.Axes.set_aspect.html\r\n\r\nFirst the top hit should be: \r\n\r\nhttps:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.axes.Axes.set_aspect.html which is the second top hit.  \n\n### Suggested improvement\n\nI think matplotlib.org\/api\/ should get a 301 redirect to matplotlib\/stable\/api..  ","comments":["should we have SEO optimization or permanent redirect ? .  \r\n(redirect :- old version is depricated . no longer shown)","I think this should be a redirect on the doc root.  This has moved, and there is no reason for the generic `api\/_as_gen\/` to redirect to an old version of the docs.  Of course the old version of the docs should remain accessible.  \r\n\r\nPing @QuLogic  as I think you have the ability to do this on our hosting solution.","This one gives me a \u201cnot found\u201d page \ud83d\ude15 \r\nhttps:\/\/matplotlib.org\/api\/_as_gen\/matplotlib.axes.set_aspect.html\r\n\r\nFor me, Google gives a geeksforgeeks page first (as a \u201cfeatured snippet\u201d), then  the stable docs, then the 3.1.1 docs.","OK, so maybe it is the optimization and 3.1.1 should be discouraged.  ","The first one on Google has a breadcrumb that looks like it's a top-level `api` path, but the link really is to 3.1.1, so I'm not sure there's a redirect there at all. Maybe Google indexed it that way at some point and just remembered the redirect.\r\n\r\nI think an issue is that the sitemap does not include _any_ of the old top-level directories, so they get default priority.\r\n\r\nAlso, reading the sitemap spec again, I'm not sure if we're actually compliant. We only specify top-level directories, but it seems like they want full and exact URLs.","> I think an issue is that the sitemap does not include any of the old top-level directories, so they get default priority.\r\n\r\nThats possible.  \r\n\r\nIts pretty annoying as the 3.1.1 doc correctly has the canonical set to the `stable\/` version"],"labels":["Documentation"]},{"title":"Add Legends Capability and contour labels for Ax.AddGeometry","body":"### Problem\n\nI want to transition many of my plots from metpy plot syntax to matplotlib as its much more open to customization. However, I use geopandas polygons and cannot add a legend to highlight what each color polygon means or add contour labels like I can in metpy.\n\n### Proposed solution\n\nAdd polygon labels similar to contour labels and add the ability to make a legend for polygons like one can for markers.","comments":["Disclaimer: I am not a geopandas\/metpy user\r\n\r\nWe do provide a way of changing what gets put in the legend.\r\n\r\nOur [legend guide](https:\/\/matplotlib.org\/stable\/users\/explain\/axes\/legend_guide.html) provides a pretty good introduction to the tools at play here.\r\n\r\nBy default if you just call `ax.legend()`, it will pick up anything that has a `label` attribute set (Either at instantiation or by calling `set_label`). Or you can pass a list of objects and a list of labels in to the `legend` call. (The latter is useful if you e.g. want to include only one of each color or control the order independent of the order things get added to the axes or want a legend entry for something that doesn't actually appear in the figure)\r\n\r\nBy default patches (the Artist used to draw polygons, at least in the core library) appear in legends as rectangles with the edge\/face\/hatch patterns inherited from the one passed in.\r\n\r\nIt may not be as automated as you get with `metpy`, but I think it is already possible to do what you wish, you just may need to generate dummy patches first so you have something to hand the `legend` call.\r\n\r\nI don't see anything directly that `metpy` does special regarding legend handling, nor even actually setting labels, though it is possible something comes from `cartopy` instead (haven't dug into that too much, just see references to cartopy in metpy tests)","> and cannot add a legend to highlight what each color polygon means\r\n\r\nI kind of want this feature too but for clarification what are you asking for that's not covered in https:\/\/geopandas.org\/en\/stable\/gallery\/choro_legends.html"],"labels":["New feature"]},{"title":"Add datetime testing for boxplot","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\nI have added the code corresponding screenshots for the boxplot testing function in test_datetime.py file. and completed the portion for Axes.boxplot of issue https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26864\"\r\nthis is the screenshot of  boxplot by given code..\r\n![boxplot_final](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/94514710\/ad74a1a8-ea0e-48ab-9d62-845d7bd0810e)\r\n\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"addresses part of #26864 \" is in the body of the PR description to [Boxplot for datetime](https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26864)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Since this PR has been inactive for over two months, can I create a new PR using advice from the comment on #27485 :\r\n\r\n\"I think it could translate well to physical units, so perhaps we should make it so that at least we try to adhere to the units behavior...\""],"labels":["topic: testing"]},{"title":"List of lists of categorical data failing: Scatter ravel is performed before _process_unit_info() is called.","body":"## PR summary\r\nAddresses issue #26743 . A possible solution is to flatten the data before passing it to the _base._process_unit_info() function. In this way the behaviour is consitent. However, this creates that the tests in test_category.py::TestPlotTypes related to scatter fail, due to a TypeError not being raised. \r\n\r\nThis happens because the modification in the _axes.py makes it so that no error is raised and the plots are created (Image below). I don't think that the behaviour of this plots is odd, so I removed the Scatter from the test. This tests were added in PR #9783, but I am not sure why. The plots below show the output of:\r\n```python\r\nydata=[1, 2]\r\nax.scatter(xdata, ydata)\r\n```\r\nand xdata are the test cases (as title of each subplot)\r\n\r\n![tests](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/17013182\/8eaf1b75-81ee-4536-928d-7f33831267b5)\r\n\r\nThe only possible discrepancy in this plots is the case with ['12', np.nan] vs [12, np.nan]. When 12 is a string, nan is also taken as a string. I don't know how I could avoid this.\r\n\r\nIf we wished to conserve the tests, another posibility would be to add a check in _axes.py before the _base._process_unit_info() to avoid having to edit _base.\r\nAlso, as said in the original issue( https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26743#issuecomment-1715897083 ), the flattening could be deprecated. In that case what would be the correct implementation? add a warning, and after a few versions then check if its a list of list and raise some exception?)\r\n\r\n## PR checklist\r\n- [ ] \"closes #26743\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines","comments":["> When 12 is a string, nan is also taken as a string. I don't know how I could avoid this.\r\n\r\nThat's expected behavior xref:#19139 for a request to fix that. \r\n\r\n ","hi @borgesaugusto sorry it took so long to review this, are you planning to pick it back up? "],"labels":["topic: categorical","topic: plotting methods"]},{"title":"Changed hatch density typing to float. Added FutureWarning for cases \u2026","body":"\u2026where conversion would change behaviour\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nRelates to #26645 . The test for the FutureWarning is added in test_path.py ( there is no test_hatch.py). All signatures were changed to float, also the defaults converted from 6 to 6.0. \r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #26645 \" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Not sure I fully understood the transition path, but I think that the default value should not be changed to a float at this stage as that will trigger warnings for the default which is a bit confusing (and leads to errors).\r\n\r\nProbably, the way is to type it as both int and float for now and keep the int default? ","> Not sure I fully understood the transition path, but I think that the default value should not be changed to a float at this stage as that will trigger warnings for the default which is a bit confusing (and leads to errors).\r\n> \r\n> Probably, the way is to type it as both int and float for now and keep the int default?\r\n\r\nThanks for the feedback!\r\nThe default value as float doesn't trigger warnings. Just in case I changed the test to try that. First test takes the case were int(density) != density\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/f068c37f090a3e161cb7bb38224258255f72df2b\/lib\/matplotlib\/tests\/test_path.py#L544-L548\r\n\r\nAnd the second one, passes a float and shouldn get a warning (could be any float 2.0~2.5)\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/f068c37f090a3e161cb7bb38224258255f72df2b\/lib\/matplotlib\/tests\/test_path.py#L550-L551\r\n\r\nIs that what you meant?","I think the check as implemented will not warn for floating inputs that are integers as `int(6.0) == 6.0` evaluates to true and is rather unambiguously represented as a float.\r\n\r\nThat said, i'm unclear why additional casts were added here, as they seem a) likely to be unintentionally missed when doing the behavior change (a comment would help that point) and b) likely to cause inputs that we _want_ to warn to _not_ warn.\r\n\r\nI think that the cast to int should be retained in `get_path` (but after the warning). and not distributed to all of the calling functions. this will keep the code change that is needed on expiry close to the warning.\r\n\r\nThat said, there may be some patterns (such as circles\/stars\/etc) that _are_ required to be integers, so maybe we should think about what the code looks like after expiry here... there may be some that can be continuously changed (lines feels like they should be able to) and some that are necessarily discrete (circles, maybe).\r\n\r\nI'm going to play around with the density uncast and see what breaks."],"labels":["topic: hatch"]},{"title":"[MNT]: mark `**kwargs` as `Any` to suppress warnings about \"partially unknown\" function signatures in pyright","body":"### Summary\n\nIt would be nice if all the `**kwargs` in functions were explicitly marked with `Any` to suppress unknown errors from pyright\/pylance in strict mode.\r\n\r\n<img width=\"710\" alt=\"image\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/41439633\/819701c6-efa6-4946-80e9-3d877c47536a\">\r\n\n\n### Proposed fix\n\nreplace untyped `**kwargs` with `**kwargs: Any` in function signatures.","comments":["I have no issue with doing this, especially if it helps with pyright (I mostly use mypy which doesn't complain about this)\r\n\r\nMy slight hesitation is a readability argument, where it doesn't add any information, but just takes up more space. However, these are (largely) isolated in pyi stub files (plus generated code in pyplot.py), where any readability argument really falls quite flat.\r\n\r\nLonger term I'd be interested in investigating [PEP 692](https:\/\/peps.python.org\/pep-0692\/) style TypedDict annotations for more of our `**kwargs`, but I suspect that will prove a bit frustrating because:\r\n\r\n- The sheer number of arguments some of our methods\/classes have\r\n- The fact that things seem reusable, but then you have to take out certain arguments in various usages\r\n- That it requires keeping a parallel list up to date (in addition to the source (usually `__init__` kwargs) and the docstring(s) (though we template that out pretty well in most cases)), having to update the `TypedDict` definition adds complexity there\r\n\r\nWe do use such for some deprecation machinery already, but that is the only place we use it so far:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/lib\/matplotlib\/_api\/deprecation.pyi#L15\r\n\r\n@vidhanio would you like to open a PR for this?","Hi! If no one opposes, I would like to claim this issue. I would love to contribute to matplotlib, and this issue seems simple enough to be a good starting point. Please let me know if there are any objections. Thanks!","@PaMeirelles anyone can work on any issue so please go ahead!  Our Contributors\u2019 Guide is here:\r\nhttps:\/\/matplotlib.org\/devdocs\/devel\/index.html","Awesome! Thanks for the opportunity.","sorry for the inactivity, it's midterm season \ud83d\ude05 thank you @PaMeirelles! if you'd like to open a draft PR or something of the sort, i would be happy to help with your effort."],"labels":["Maintenance","topic: typing"]},{"title":"[Bug]: Polygon.contains_point() only works if transparency is zero","body":"### Bug summary\r\n\r\nWhen trying to see if a Polygon contains a point, the contains_point() method only seems to work if alpha is set to 0 or no options are set when defining the polygon. (mpl version = 3.8.0)\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nfrom matplotlib.patches import Polygon\r\n\r\nvertices = [[0,0],[0,1],[1,1],[1,0]] # Square \r\npoint = [0.5,0.5] # Point inside square\r\n\r\npoly0 = Polygon(vertices, closed=True, fill=True, color=(1,0,0,1))  # False\r\npoly1 = Polygon(vertices, closed=True, fill=True, color='r')        # False\r\npoly2 = Polygon(vertices, closed=True, fill=True, color=(1,0,0,0))  # True\r\npoly3 = Polygon(vertices, fill = False,alpha = 0)                   # True\r\npoly4 = Polygon(vertices, fill = False)                             # False                       \r\npoly5 = Polygon(vertices)                                           # True                       \r\n\r\n\r\nfor idx, poly in enumerate((poly0, poly1, poly2, poly3, poly4, poly5)):\r\n    print(f\"Polygon {idx} contains point {point}: {poly.contains_point(point)}\")\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nPolygon 0 contains point [0.5, 0.5]: False\r\nPolygon 1 contains point [0.5, 0.5]: False\r\nPolygon 2 contains point [0.5, 0.5]: True\r\nPolygon 3 contains point [0.5, 0.5]: True\r\nPolygon 4 contains point [0.5, 0.5]: False\r\nPolygon 5 contains point [0.5, 0.5]: True\r\n\r\n### Expected outcome\r\n\r\nShould return True for all polygons since the point is inside them all.\r\n\r\n### Additional information\r\n\r\nTested in mpl v3.7.1 and v3.8.0 with identical outcomes\r\nAlso fails if fill=False and alpha is not set.\r\nTemporary fix is to set alpha to 0. \r\n\r\n### Operating system\r\n\r\nMacOS 12.5.1 Monterrey\r\n\r\n### Matplotlib Version\r\n\r\n3.8.0\r\n\r\n### Matplotlib Backend\r\n\r\nMacOSX\r\n\r\n### Python version\r\n\r\nPython 3.11.5\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip","comments":["Just add the radius parameter to the contais_point() function and set it 0.\r\n<img width=\"477\" alt=\"image\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/129727667\/461d3ead-09c6-42d8-952a-eb1cf1cb2dc8\">\r\n\r\n","> Just add the radius parameter to the contais_point() function and set it 0. <img alt=\"image\" width=\"477\" src=\"https:\/\/user-images.githubusercontent.com\/129727667\/273447918-461d3ead-09c6-42d8-952a-eb1cf1cb2dc8.png\">\r\n\r\nThis solution did indeed work for the example cases provided in the question. My main use case within my project is still failing with  the radius parameter at 0, I will investigate further to see if I can reproduce the issue and add it here.","The explanation for the OP case is here.  If radius is not set and alpha is non-zero, then the radius defaults to the linewidth.\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/836d2b045dae996051663ac310992f07bcf0a0fa\/lib\/matplotlib\/patches.py#L114-L124\r\n\r\nI think this could at least be better documented.  The doc for [Patch.contains_point](https:\/\/matplotlib.org\/devdocs\/api\/_as_gen\/matplotlib.patches.Patch.html#matplotlib.patches.Patch.contains_point) directs us to [Path.contains_point](https:\/\/matplotlib.org\/devdocs\/api\/path_api.html#matplotlib.path.Path.contains_point) for the explanation of the radius.  There, the stated radius default is zero.","I'm still confused whether the behaviour is right.  [Path.contains_point](https:\/\/matplotlib.org\/devdocs\/api\/path_api.html#matplotlib.path.Path.contains_point) states \"The path is extended tangentially by radius\/2; i.e. if you would draw the path with a linewidth of radius, all points on the line would still be considered to be contained in the area.\"\r\n\r\nIn the OP's case the point is 0.5 points from the closest parts of the polygon (since no transform was set, we work in points).  So with a linewidth\/radius of 1, the point is right on the edge of the line and therefore either on the line or enclosed by it.  So `contains_point` should return `True`?\r\n\r\nEdit: setting radius to either 0.999 or 1.001 gives `True`.  radius=1 gives `False`.  So I think maybe having the point right on the edge of the line could be triggering some sort of edge case.","I actually think some of this (though not all) may be related to some cautioning that I've been doing in relation to `pickradius` handling (see #26682, #27068), as `isinstance(True, Number)` returns True, so I think it is treating the radius as 1 when picker is set to `True`, regardless of linewidth. Though that should not affect when `radius=0` is passed to the `contains` call directly... (but if you had instead set pickradius to 0, expecting it to be picked up by contains, which it _should_, then that would explain some things...)\r\n\r\nMay also have to do with self-intersecting paths similar to some of the drawing problems we've seen such as #25410. when you have a square that is only 1.0 pt to a side, but is drawn with a linewidth of 1.0 pt (as in this example), expectations get weird.\r\n\r\nThe reason alpha=0 works is that the edgecolor has zero alpha and so contains is not expanding by the linewidth. (the face color can still be non-zero alpha and it will work)"],"labels":["Documentation","topic: plotting methods"]},{"title":"[MNT]: Any type hint in subplots","body":"### Summary\n\nI noticed that type inference in vscode didn't work as expected anymore after updating to 3.8.0 from 3.7.3.  I tracked it down to that the type hint for the output of subplots() is tuple[Figure, Any] and the ax output didn't get proper intellisense in the IDE.\r\n\n\n### Proposed fix\n\nShouldn't the type hint for the output be something like ```tuple[Figure, Axes | list[Axes]]```?\r\n","comments":["There is discussion at https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27001"],"labels":["Maintenance","topic: typing"]},{"title":"Convert Agg extension to pybind11","body":"## PR summary\r\n\r\nThis is somewhat partially implemented, in that the NumPy array parts are not changed yet. I think I'll want to do path first, to make this simpler. I'll leave this as draft until then.\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [n\/a] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [n\/a] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [n\/a] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [n\/a] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines","comments":["I rebased this on top of #27087 so that I can re-use the type casters that it has. However, there is still an issue with the `GCAgg` type caster, but I'll leave that for when the other PR is in."],"labels":["backend: agg","topic: path handling","status: needs rebase","status: waiting for other PR"]},{"title":"[TYP] Add overload of `pyplot.subplots`","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\nChange the type hint of the return value of `pyplot.subplots` from `Any` to `Axes`, `ndarray`, or `Axes | ndarray`.\r\n\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [N\/A] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Thank you for the quick review!\r\nAdding variables as arguments is not something I typically do, so it was a complete oversight on my part.\r\nI would have preferred the Axes to be inferred when indexing, but I also understand the limitation and previous discussions, so I also think a scaled back version is reasonable.\r\n","Note that this might also be better served by #25937.","The motivation for this PR is that I noticed a loss in development experience when using mpl>=3.8 compared to mpl<3.8, which benefited from [microsoft\/python-type-stubs](https:\/\/github.com\/microsoft\/python-type-stubs).\r\nI think it would be great to define a class better than `ndarray`, but it would be painful to develop with object-oriented-interface `fig, ax = plt.subplots()` until it it implemented.","Looks like Microsoft did: https:\/\/github.com\/microsoft\/python-type-stubs\/blob\/e328827329a072baac06e287bd6146ff80796e5e\/stubs\/matplotlib\/pyplot.pyi#L114 ","So the microsoft ones contain 9 different (but mostly redundant by my analysis) overloaded signatures:\r\n\r\n```\r\nA) squeeze=false, nrows=ncols=int -> ndarray\r\n   - One of the cases in this PR\r\n    \r\nB) squeeze=True, nrows=ncols=1 -> Axes\r\n   - One of the cases in this PR\r\n            \r\nC) Squeeze=True, nrows=1 ncols=int -> ndarray\r\n   - Technically wrong, to my understanding, as ncols can still be 1 but only known to be int at type check time\r\n         \r\nD) Squeeze=True, nrows=int ncols=1 -> ndarray\r\n   - Technically wrong, to my understanding, for the same reason\r\n    \r\nE) Squeeze=True, nrows=ncols=int; keyword only -> ndarray\r\n   - Technically wrong, to my understanding\r\n   - redundant to nrows\/ncols not being kwonly  (A\/I)\r\n\r\nF) squeeze=True, nrows omitted, ncols=int; kwonly -> ndarray\r\n   - redundant to C\r\n  \r\nG) squeeze=True, nrows=int, ncols omitted -> ndarray\r\n   - redundant to D\r\n\r\nH) squeeze=True, nrows and ncols omitted -> Axes\r\n   - redundant to B\r\n    \r\nI) squeeze=bool, nrows=ncols-int -> ndarray\r\n   - Technically wrong, as squeeze=True, nrows=1,ncols=1 will match but not return an ndarray\r\n   - Closest to the last one from this PR (though there is a union to ensure technically correct)\r\n```\r\n\r\nI think what is in this PR is better than what Microsoft had because it reduces redundant cases, and does not include incorrect overlapping cases (which I'm a little surprised doesn't flag for them, to be honest, I've definitely seen similar errors flagged by mypy) but still at least carves out where we can tell based on input types and the most common calls.\r\n\r\nAdditionally, the microsoft ones are missing the `width\/height_ratios` arguments and do not specify that the dictionaries have string keys.\r\n\r\nI would like to see the three cases from this PR also included in `figure.pyi` and `gridspec.pyi` versions of `subplots`. (These already have 2 overloads, but could be made better by including the `Literal[1]` case)\r\n\r\nI will note that they have a `SubplotBase` as a possible return, which should also be removed. It doesn't seem to fail mypy without it, and seems to come back to `Figure.add_subplot`'s docstring which stated (but has now removed) it was a possible return, but then it was omitted from the type hints with a comment:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/9cd2812c5a6a6ad2ab50edcb9386f671cff615f5\/lib\/matplotlib\/figure.pyi#L81\r\n "],"labels":["topic: typing"]},{"title":"Draft for multivariate and bivariate colormaps","body":"## PR summary\r\n\r\n\r\nThis draft PR is a reply to #14168 Feature request: Bivariate colormapping\r\n\r\nThe context of this draft PR is the discussion thread for #14168 and the weekly meeting Sep 15th 2023.\r\nIt was suggested that a class `VectorMappable` should be a drop-in replacement for `ScalarMappable`.\r\nAnd it would be of interest to see how `VectorMappable` and multivariate colormaps can be threaded through the existing api.\r\nIt was further suggested that the new functionality should be triggered by providing a multivariate or bivariate colormap.\r\nThis ensures that the new functionality is only triggered when the user shows *intent*.\r\n\r\nThis draft PR is intended to allow for further discussion of #14168 at the next few weekly meetings.\r\n\r\n### The following functionality is supported:\r\nMultivariate colormaps:\r\n```py\r\nimport matplotlib.pyplot as plt\r\nA = plt.imread('R.png')\r\nB = plt.imread('G.png')\r\nC = plt.imread('B.png')\r\n\r\nfig, axes = plt.subplots(1, 2, figsize = (12,4))\r\n\r\npm = axes[0].pcolormesh((A,B,C), cmap = '3VarSubA', vmax = (0.4, 0.6, 0.5))\r\ncb0, cb1, cb2 = fig.colorbars(pm, shape = (-1,2))\r\naxes[0].set_title('Subtractive multivariate colormap')\r\n\r\npm = axes[1].pcolormesh((A,B,C), cmap = '3VarAddA', vmax = (0.4, 0.6, 0.5))\r\ncb0, cb1, cb2 = fig.colorbars(pm, shape = (-1,2))\r\naxes[1].set_title('Additive multivariate colormap')\r\n```\r\n![multivariate colormaps](https:\/\/raw.githubusercontent.com\/trygvrad\/trygvrad.github.io\/main\/add_sub.png)\r\nBivariate colormaps:\r\n```py\r\nim0, im1 = get_random_data()\r\nfig, axes = plt.subplots(1, 2, figsize = (12,4))\r\n\r\npm = axes[0].pcolormesh((im0,im1), cmap = 'BiOrangeBlue', vmin = -1, vmax = 1)\r\ncax = fig.colorbar_2D(pm, shape = (-1,2))\r\naxes[0].set_title('Square 2d colormap')\r\n\r\npm = axes[1].pcolormesh((im0,im1), cmap = 'BiCone', vmin = -1, vmax = 1)\r\ncax = fig.colorbar_2D(pm, shape = (-1,2))\r\naxes[1].set_title('Circular 2d colormap')\r\n```\r\n![multivariate colormaps](https:\/\/raw.githubusercontent.com\/trygvrad\/trygvrad.github.io\/main\/2d.png)\r\n\r\n\r\n\r\n## Minimum changes required\r\n\r\nThis implementation is designed to make minimal changes to the existing code. \r\nI have tried to list the significant changes bellow:\r\n\r\n`cm.VectorMappable` is a drop in replacement for `cm.ScalarMappable`.\r\n`VectorMappable` uses delegation and contains one or more `ScalarMappables` (`.scalars`).\r\n\r\nA new function `axes._base.ensure_cmap(cmap)` is added. \r\n`ensure_cmap(cmap)` takes a colormap, string or None and returns a `Colormap`, `MultivarColormap`, or `BivarColormap` object.\r\nNone will always return the default (1D) colormap. i.e. to use bivariate or multivariate data, the user must show intent by actively choosing a suitable colormap.\r\n\r\nA new function `axes._base.ensure_multivariate_norm(n_variates, data, norm, vmin, vmax)`  is added.\r\nWhen called, this ensures that `data`, `norm`, `vmin`, and `vmax` all have length `n_variates`. Single arguments are repeated if neccessary.\r\n\r\nThe new member varaible `n_variates` is accessible on all `Colormap`, `BivarColormap`, and `MultivarColormap` objects. It is 1, 2 or n, respectively.\r\n\r\n`Figure.pcolormesh()` is adapted to support multivariate data by the following four changes:\r\n1. `collections.Collection` now inherits from `cm.VectorMappable` instead of `cm.ScalarMappable`\r\n2. `cmap = ensure_cmap(cmap)` is called immediately in `Figure.pcolormesh()`. This gives access to `cmap.n_variates`.\r\n3. If `cmap.n_variates > 1`, the function `ensure_multivariate_norm()` is called to ensure the correct length of the norm parameters\r\n4. `axes._pcolorargs()` takes an additional keyword argument (`n_variates`), so that if `n_variates > 1`, it can correctly extract the dimensions from the input data.\r\n\r\n\r\n## Implementation of multivariate and bivariate colormaps\r\n\r\nMultivariate data (2-8 variates) is supported vi the class `colors.MultivarColormap`.\r\n`MultivarColormap` is iterable, and iterating on `MultivarColormap` returns (1D) Colormap objects.\r\n`MultivarColormap.combination_mode` is either `'Add'` or `'Sub'`, and this determines if the colormaps are are combined by adding or subtracting the RGB values.\r\nThe file `_cm_listed_multivar` contains new 1D colormaps to bulid the multivariate colormaps.\r\nThe multivariate colormaps are contained in a `cm.ColormapRegistry()` accessible at `mpl.multivar_colormaps`\r\n\r\n2D colormaps are supported via the class `colors.BivarColormap`. \r\nThere are two subclasses: `SegmentedBivarColormap` and `BivarColormapFromImage`\r\n`SegmentedBivarColormap` repurposes `_image.resample()` to extrapolate a smaller image to a larger image. By using this we do not need to store the full (256,256,3) LUT in the source files, but can get away with (65,65,3) for complex colormaps or (9,9,3) for more simple colormaps with no significant loss in fidelity.\r\n`BivarColormap.shape` is either `'square'` or `'circle'`. This changes how values outside the colormap are interpolated onto the colormap. \r\nThe bivariate colormaps are contained in a `cm.ColormapRegistry()` accessible at `mpl.bivar_colormaps`\r\n\r\n## Further work\r\n\r\nThere are a number of further topics that need to be worked on to make this more than a draft PR (as lited below). \r\nHowever I think it would be conducive to first discuss the points above, and whether the design desicions made so far, are sensible.  \r\n1. There is an *absolutely minimal* implementation of `Figure.colorbars()` and `Figure.colorbar_2D()`. \r\nThese are only for illustration purposes, and will need to be completely rewritten, and we need to think about return types. \r\n3. I have not tested multi\/bivariate colormaps with different kinds of norms (log, etc.). I suspect it already works, but it will need to be supported in figure.colorbar_2D().\r\n4. Need to implement multivariate functionality for (all?, subset of?) other functions that take cmap [`scatter, hexbin, imshow, pcolor, pcolorfast, specgram, contour, contourf, hist2d, matshow`, others?].\r\n5. Ensure docstrings are suitable for the new classes and altered functions.\r\n6. I designed a number colormaps, but we should have a discussion about these at some point. If the design criteria I chose is suitable, or if we should design some others instead.\r\n7. Test for all functions that can now accept multivariate colormaps.\r\n8. Tests for `Figure.colorbars()\/Figure.colorbar_2D()` with various placement options, norms etc.\r\n9. Documentation of new functionality\r\n10. I have attempted to write\/update docstrings as I have added new functionality\/classes\/functions, nonetheless they probably need some refinement. Likely first by me, and then someone else.\r\n11. The additional functionality requires changes to a number of error messages, and new error messages will need to be raised in order to help users use the new functionality. I have attempted to make\/update the most relevant cases, but more will probably be needed. \r\n12. Suitable names of functions\/variables\r\n13. ...\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #14168\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n","comments":[],"labels":["status: needs rebase","topic: color\/color & colormaps"]},{"title":"Dokumentation Link and rename README","body":"Making the README an md file. Change the link to the right one and making it a hyperlink.\r\n\r\n- [N\/A ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [N\/A ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n","comments":["I dont get the error\r\n","https:\/\/github.com\/matplotlib\/matplotlib\/blob\/6ba7d5fadcce3c647ae12518697c2a936d5b3278\/lib\/matplotlib\/tests\/meson.build#L97-L104 tells meson about this file so if we rename it we have to update it there too.  It is also possible that we `include` this file in the documentation.\r\n\r\nI am -0 on adding the extension, README files without an extension are not uncommon.\r\n\r\nThe other thing that is concerning as that the rst reference is the source of https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html not the built page referenced.","I want to point out that we currently have no consistent type and naming scheme for READMEs:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/d792bfad-a7c8-4f70-b28a-6ca47aa98a93)\r\n\r\nI did not check all their content, but at least some of the `README.txt` files are ReST formatted.\r\n\r\n---\r\n\r\nI don't think it's particularly important to have consistency here, but if we do want that, I'd be -0.5 on ReST. ReST has its merits for complex documents. But the READMEs are quite simple, not part of the doc build and often read as plain text.","> But the READMEs are quite simple, not part of the doc build and often read as plain text.\r\n\r\nNot entirely true. The ones in the galleries are used by sphinx-gallery, and must be `README.txt` or `README.rst` (or actually whatever `source_suffix` is in the doc config), and should be reST unless we start using MyST.","I think README is a misnomer for the gallery header files. I\u2019ve opened https:\/\/github.com\/sphinx-gallery\/sphinx-gallery\/issues\/1209 to see whether the can be changed to something more telling\/accurate.\r\n\r\nBut that\u2019s orthogonal to this PR."],"labels":["Documentation: API"]},{"title":"Resolves different edgecolor and hatch color in bar plot ","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\nFixes #26074\r\nContinued From #26683\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Hi @Vashesh08 , it looks like you pulled in a number of unrelated commits into your branch. You will probably need to [rebase your branch](https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html#recover-from-mistakes) to leave only your commits. If you run into trouble and need help, let us know. ","@melissawm I think I removed the unrelated commits. Thanks for the docs!","I'm extremely sorry for the delay in responding. I missed out on your response.\r\n\r\nThe primary concern I had was how should I tackle the hatchcolor when both hatchcolor and edgecolor values both are specified. Since these values are updating using `_internal_update` method, which makes the order of these parameters important. In order to tackle this, I had to introduced a class variable `self.set_hatch_color` and local function variables `set_hatchcolor_from_edgecolor`.\r\n\r\n\r\n``` the hatchcolor shouldn't be set inside edgecolor```\r\nI think the way this would have to be done would be passing an additional parameter to set_hatchcolor function. Although that would make a redundant variable but I think it would clean up the logic.\r\n\r\nI will be pushing these changes. Lmk if you still think there are room for any more improvements. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","hi, we discussed this on the call this week b\/c I was worried  and @ksunden and @QuLogic both suggested that there's a way to inherit the rcparam from edgecolor so that you can reduce the fallback logic and that legend.facecolor already tracks legend.edgecolor and you can maybe use that as a model. What that means is it solves the `black` default or `intentional` problem so \r\n\r\n- setting hatch.color to 'inherit'\r\n    - needs an API behavior note probably\r\n    - https:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/lib\/matplotlib\/mpl-data\/matplotlibrc#L534\r\n    - https:\/\/github.com\/matplotlib\/matplotlib\/blob\/5e347777192b37ac77decc4f975e53ed9d87973b\/lib\/matplotlib\/rcsetup.py#L1175\r\n   \r\n- use legend.facecolor tracking legend.edgecolor as model:\r\n  - https:\/\/github.com\/matplotlib\/matplotlib\/blob\/5e347777192b37ac77decc4f975e53ed9d87973b\/lib\/matplotlib\/legend.py#L532-L538\r\n \r\n- include hatches in set_alpha color changes b\/c setting alpha after setting edgecolor will overwrite current,\r\n    - needs an API behavior note \r\n  \r\n- Check for parallel behavior, if possible, between Patch and Collection since both have hatches. \r\n\r\nAlso thanks for your patience and perseverance on this. \r\n"],"labels":["New feature","status: needs rebase"]},{"title":"fix floating comparison in path.arc","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nCloses #26972. When drawing the spine for the radial axis, we call `Path.arc` to draw. In `Path.arc`, we are using `==` for floating point comparison which may results in wrong results. The solution is to compare with a tolerance.\r\n\r\nTests on `Path.arc` is added to ensure that it's robust about the input change within [-1e-6, 1e-6]\r\n\r\n~~The solution is to replace this with `np.isclose()`~~ `np.isclose(0, 1e-6)` will give false, which is not we want.\r\n\r\n~~However, a large number of tests will break and I'm checking whether the difference of results will be noticed by human eyes.~~ Failing locally, we think this is irrelevant\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [NA] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [NA] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Seems like all tests were OK?\r\n\r\nMaybe add a test like one of the examples in #26972 though? ","> Seems like all tests were OK?\r\n> \r\n> Maybe add a test like one of the examples in #26972 though?\r\n\r\nThat's weird, numerous tests are failing on my machine `test_pathes`, `test_path`, `test_axes`... They are all image comparison tests complaining \"image not close\" but the difference are all black (according to human eyes) Are we doing image comparison tests differently on CI?\r\n\r\nmpl version is 3.9.0.dev356+g19c0e07558","Should the test be an image comparison test that with a baseline image? I haven't think about a way that we don't need to add a image","Does the tests pass on main for you? A common reason for failing tests is font issues (one reason that MPL pin freetype to an old version is subtle differences in the exact rendering). A consequence is that it may be hard to generate test images on such an install (as they will maybe fail on the CI, but worth trying, it is actually possible to download the CI-generated image from the artifact and use that if it is a problem).\r\n\r\nAnother reason is that a different processor architecture is used, which may lead to floating-point differences. Usually we compensate for that in the tests, e.g. https:\/\/github.com\/matplotlib\/matplotlib\/blob\/15362458ce3a1a7a7106fdbbde140e037e67ac0d\/lib\/matplotlib\/tests\/test_contour.py#L384-L387\r\n\r\nBut considering your multiple failures I'd guess freetype.\r\n\r\n","> Does the tests pass on main for you? A common reason for failing tests is font issues (one reason that MPL pin freetype to an old version is subtle differences in the exact rendering). A consequence is that it may be hard to generate test images on such an install (as they will maybe fail on the CI, but worth trying, it is actually possible to download the CI-generated image from the artifact and use that if it is a problem).\r\n> \r\n> Another reason is that a different processor architecture is used, which may lead to floating-point differences. Usually we compensate for that in the tests, e.g.\r\n> \r\n> https:\/\/github.com\/matplotlib\/matplotlib\/blob\/15362458ce3a1a7a7106fdbbde140e037e67ac0d\/lib\/matplotlib\/tests\/test_contour.py#L384-L387\r\n> \r\n> But considering your multiple failures I'd guess freetype.\r\n\r\nThanks for the help! There still test failures on main (I just assumed that they will work...) I setup the dev environment with conda following \"Setting up Matplotlib for development\", so I have no ida about where the font issues come from?","My understanding of the problem is that:\r\n\r\n - we always try to draw an arc less than or equal to 360 in the clockwise direction\r\n - to sort this out we subtract the extra multiples of 360 off of the second angle\r\n - if the second angle is now less than the first, assume they are \"equal\" and add 360 back to the second so we go all the way around\r\n - in some cases when they are \"equal\" the floating point error falls the other way and it looks like the user asked for (0, 360 + delta) which we want to normalize to (0, delta) when the user wanted a full circle.\r\n\r\n\r\nI don't think that this is quite the right fix.  The behavior we want is:\r\n\r\n - if theta1 == theta2 -> do nothing \r\n - if theta1 - theta2 < 360 -> do nothing\r\n - if theta2 == theta1 + 360 + non-epsilon -> normalize to the shortest way around\r\n - if theta2 == theta1 + 360*n + epsilon -> draw a complete circle\r\n\r\nso I think the test is:\r\n\r\n - do we have a \"winding\"\r\n   - if so, is it \"close\" to an integer number -> then draw a full circle\r\n   - if not, make no changes"],"labels":["topic: path handling"]},{"title":"[Doc]: In the quick start guide, some code cannot be run on your own machine","body":"### Documentation Link\n\nhttps:\/\/matplotlib.org\/devdocs\/users\/explain\/quick_start.html#styling-artists\n\n### Problem\n\nFor the example code under \"Styling artists\" in the quick start guide, you cannot copy paste the code and run it on your own machine because data1 is not defined in the cell. It's unclear if data1 is supposed to come from the previous cell.\n\n### Suggested improvement\n\nAdd a line to the cell defining data1","comments":["That code doesn't work without imports either.  We need to strike a balance between being concise and reproducible. \r\n\r\nHowever, I could see an argument for moving those data definitions to the import block, with a comment that they are used further down. ","Both work, but personally, because people may be skipping directly into sections instead of reading the quick start from top to bottom, I'd advocate for redefining the data in each section. May be redundant but makes each section more self contained. ","I am \ud83d\udc4d\ud83c\udffb on longer but self-contained copy-pasteable examples.","I don't feel super strongly.  Just pointing out that docs are often criticized for having too much data creation in them.  It saves a lot of extra verbiage to use `data1`,... `data4` though this series of examples.   ",">  It saves a lot of extra verbiage to use data1,... data4 though this series of examples.\r\n\r\nWhy not both? I'm usually the one complaining about too much data creation, but I'm not opposed to a single line of code for data creation in this context where that creation is 1 line of code and clearly denoted as not important because it's set to random. Especially if the same format is consistently used for all the sections, i.e. `data1, ..., datan = np.random.randn(n,100)` ","I am not a huge fan of random data for examples because it is hard to know what the plot _should_ look like (and we probably should not use random without setting the RNG seed).  \r\n\r\nWhere practical we should use well known functions (trig functions, low-order polynomials, Gaussian, ... ) so the reader can check their expectations with the demonstrated behavior.","> Where practical we should use well known functions (trig functions, low-order polynomials, Gaussian, ... ) so the reader can check their expectations with the demonstrated behavior.\r\n\r\nMy bias in those cases is to pass in a list of fixed numbers and not assume math background at all. Especially since it's becoming increasingly common to teach Matplotlib\/data science to audiences that may not have taken trigonometry (for example, I've taught matplotlib to younger high school students &  psychology majors who've only been required to take stats). They'll probably recognize a sin curve or gaussian, yes, but especially for examples discussing limits, ticks, or the like may not know how the function is supposed to change or what the numerical values are supposed to be. "],"labels":["Documentation"]},{"title":"Fixes Issue #26377 - Adding Support For % Symbol in Latex ","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\nFixes Issue #26377 - Adding Support For % operator in Latex. Continued From #26642\r\n'%' operator is considered as the start of a comment in LaTeX. In order to avoid this behavior, `\\%` needs to be used.\r\nUses Regex to substitute `\\%` instead of `%`. It also resolves in case the string is already pre-escaped.\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] closes #26377\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["I am a tad confused by the title.  It says \"operator\", but it is only letting `%` pass without triggerin a comment?\r\n\r\nI think this needs a whats new entry so that we can highlight this if anyone has been (ab)using this to intentionally put comments into strings. "],"labels":["New feature","status: needs review","topic: text\/usetex","status: needs rebase"]},{"title":"[Bug]: set_theta_offset removes grid outline","body":"### Bug summary\r\n\r\nWhen producing a polar plot, ``set_theta_offset`` removes the outer gridlines.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfig, (ax1,ax2) = plt.subplots(1,2,subplot_kw=dict(projection='polar'))\r\n\r\nazis = np.radians(np.linspace(0,360,72)); r = np.linspace(0, 250, 250)\r\ndats = np.random.rand(250,72)\r\nX,Y=np.meshgrid(azis,r)\r\n\r\nfor ax in [ax1,ax2]:\r\n    ax.contourf(X,Y,dats,cmap=\"RdYlBu\")\r\n\r\nax2.set_theta_offset(1.570796327)\r\nplt.subplots_adjust(wspace=0.5)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nFirst axis has no \"set_theta_offset\", which means the plot starts at 90. Second axis has \"set_theta_offset\", which rotates the plot to start at 0, but it removes the black outline. \r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/41115380\/42cb66b5-5df0-412e-a485-1d663f144cbf)\r\n\r\n\r\n### Expected outcome\r\n\r\nExpect ax2 above to have a black circular outline as in ax1.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nWindows\r\n\r\n### Matplotlib Version\r\n\r\n3.7.1\r\n\r\n### Matplotlib Backend\r\n\r\nmodule:\/\/matplotlib_inline.backend_inline\r\n\r\n### Python version\r\n\r\n3.11.3\r\n\r\n### Jupyter version\r\n\r\n6.5.4\r\n\r\n### Installation\r\n\r\nconda","comments":["Thanks for reporting this. However I cannot run the script and it looks like you forgot to include the definition of \"azis\" and \"r\" in the script. Would you add that so we can get the exactly same result as you?","@stevezhang1999 thanks for flagging that, have updated now","> @stevezhang1999 thanks for flagging that, have updated now\r\n\r\nThanks, now I can reproduce this with mpl = 3.7.2","A simpler example to reproduce issue\r\n```\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfig, ax = plt.subplots(1, 1,subplot_kw=dict(projection='polar'))\r\n\r\nax.set_theta_offset(1.570796327)\r\nplt.subplots_adjust(wspace=0.5)\r\n```\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/38875181\/23f1b1bd-4705-4b27-9a70-22e7e32d3751)\r\n\r\n","It looks like you are mostly referring to the \"spine\" (the bold outline) xref #16066 for that\r\n\r\nBut also seems to have problems with gridlines still... and I'm reminded of an idea from #24996 of possibly using axhline for gridlines, which _may_ help?","I think this results from a calculation flaw within `path.arc` so this is not directly related to https:\/\/github.com\/matplotlib\/matplotlib\/issues\/16066. Will open a PR for more details and the fix tomorrow (hopefully)","Similar to the axhline suggestion, I can create a quick workaround for the \"spine\" using a plot command like this:\r\n\r\n```python\r\nax.plot(np.linspace(0, 2*np.pi, 50), np.ones(50)*250, color='black', linestyle='solid',linewidth=2)\r\n```\r\n\r\nThis is much more relevant for my uses anyway, but obviously doesn't solve the bug within matplotlib.","@stevezhang1999 do you think this is something more like #13717?","> @stevezhang1999 do you think this is something more like #13717?\r\n\r\n**Update**: I think the results in https:\/\/github.com\/matplotlib\/matplotlib\/issues\/13717 looks good. `Path.arc` doesn't document what will happen if theta1 is greater than theta2. As long as (theta1 - theta2) is not close enough to multiple of 360, it's unlikely that we will suffer from the floating point comparison error from roundoff. \r\n\r\nI suspect that they are related and will look at it later tonight. To fix this issue, I believe we need to replace the floating point comparison inside with np.isclose() - but it will break many tests and I\u2019m still looking at them."],"labels":["status: confirmed bug","topic: polar"]},{"title":"[Doc]: turn anatomy figure into clickable table of contents","body":"### Documentation Link\r\n\r\nhttps:\/\/matplotlib.org\/stable\/users\/explain\/quick_start.html#parts-of-a-figure\r\n\r\n### Problem\r\n\r\nIt's not always clear what Matplotlib names things, so it could be really useful if the anatomy figure could be marked up as an svg with links to the relevant user guide sections. \r\n\r\n![sphx_glr_anatomy_001](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/6484bd36-8a08-406b-ae92-07905d3cada3)\r\n\r\nRelated to (or alt to) #26205, but building on the idea of using the Anatomy figure as the scoping for the userguide. \r\n","comments":["We had some issues with generating example images in SVG, but if that could be fixed, this could be done relatively easily by calling `.set_url` on all the artists you wanted linked.","Hi sir, \r\n\r\nI am interested in trying my hands over this issue.","But I need clarification on the issue.\r\n\r\nIs it necessary to convert the image into SVG one or can I go with img?\r\n\r\nAlso is it similar to doing image mapping in html ...?\r\n\r\n","> Also is it similar to doing image mapping in html\n\nSame effect, but programmatically using the .set_url method on every element of the image so that the urls can be turned to the document version. This PR is really straightforward if you know what a [Matplotib Artist](https:\/\/matplotlib.org\/devdocs\/tutorials\/artists.html#sphx-glr-tutorials-artists-py) is & overly complicated if you don't.\n\nbut the question that @QuLogic is raising is that if may not work at all b\/c we've been having trouble "],"labels":["Documentation","Documentation: user guide"]},{"title":"[Bug]: Missing typing for dates.py","body":"### Bug summary\n\nwith mypy,  `MinuteLocator` results in error:\r\n\r\nerror: Call to untyped function \"MinuteLocator\" in typed context  [no-untyped-call]\r\n\n\n### Code for reproduction\n\n```python\nimport matplotlib.dates as mdates\r\n\r\nmdates.MinuteLocator(byminute=range(0, 60, 5))\r\n# run mypy --strict\n```\n\n\n### Actual outcome\n\nerror: Call to untyped function \"MinuteLocator\" in typed context  [no-untyped-call]\r\n\n\n### Expected outcome\n\nNo Mypy error\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nUbuntu\n\n### Matplotlib Version\n\n3.8.0\n\n### Matplotlib Backend\n\nQTAgg\n\n### Python version\n\n3.8.10\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip","comments":["Units handling is a second portion which was omitted from the first round of type hinting.\r\n\r\nWhile much of it _should_ be relatively straightforward (at the very least formatters\/locators\/etc, as in this example) the units portions of the code have quite a bit of dynamic behavior that is not always possible to capture in a static typing context.\r\n\r\nWe can (and should) do better where we are able, but addressing units as a whole is a relatively large typing task.\r\n\r\nSimilar to #26941, the base class for Locators is type hinted, and so some level of benefit from type hints can be gained by using that, but it does not address the constructor call.\r\n\r\nIn general I think that `--strict` is often _too_ strict especially when it comes to the `no-untyped-call` check\r\n\r\nI would perhaps suggest adding a config for matplotlib to ignore this rule:\r\n\r\nhttps:\/\/mypy.readthedocs.io\/en\/stable\/config_file.html#example-mypy-ini\r\n\r\nhttps:\/\/mypy.readthedocs.io\/en\/stable\/config_file.html#example-pyproject-toml\r\n\r\n```toml\r\n[[tool.mypy.overrides]]\r\nmodule = \"matplotlib\"\r\ndisallow_untyped_calls = false\r\n```\r\n\r\nbecause while I would welcome improving our type hints, there may well continue to be portions that are not type hinted."],"labels":["topic: date handling","topic: typing"]},{"title":"[Bug]: Missing typing for backend_wxagg.py","body":"### Bug summary\n\nwith mypy, `FigureCanvasWxAgg` results in error:\r\n\r\n_Call to untyped function \"FigureCanvasWxAgg\" in typed context  [no-untyped-call]_\n\n### Code for reproduction\n\n```python\nfrom matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas\r\n\r\nFigureCanvas(None, -1)\r\n# Then run mypy --strict\n```\n\n\n### Actual outcome\n\n_Call to untyped function \"FigureCanvasWxAgg\" in typed context  [no-untyped-call]_\n\n### Expected outcome\n\nNo Mypy error\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nUbuntu\n\n### Matplotlib Version\n\n3.8.0\n\n### Matplotlib Backend\n\nwxAgg\n\n### Python version\n\n3.8.10\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip","comments":["All backends are missing typing (except for the C++-based agg-backend).","Backends were left out of the initial round of type hints because they are a bit more advanced and we needed to reign in the scope a bit.\r\n\r\nEven the agg one is an empty file, FYI. (There just to make it so that imports aren't flagged)\r\n\r\nWhile it doesn't help with the constructor call, you should be able to get a reasonable amount of the benefits of type hinting from `matplotlib.backend_bases.FigureCanvasBase`, which is the shared base class for all figure canvases. The base class is type hinted.\r\n\r\nIf you are interested in adding type hints to backends, that would also be welcome.\r\n\r\nFor wxagg, this would include type hinting the `agg` backend, which defines the following methods not found in `FigureCanvasBase`:\r\n\r\n```python\r\n>>> set(dir(agg))-set(dir(base))\r\n{\r\n    'print_jpg',\r\n    'print_jpeg',\r\n    '_print_pil',\r\n    'print_tiff',\r\n    'restore_region',\r\n    'print_to_buffer',\r\n    'tostring_rgb',\r\n    '_lastKey',\r\n    'print_tif',\r\n    'print_raw',\r\n    'print_webp',\r\n    'get_renderer',\r\n    'buffer_rgba',\r\n    'print_rgba',\r\n    'print_png',\r\n    'copy_from_bbox',\r\n    'tostring_argb'\r\n}\r\n```\r\n\r\nAnd the following functions are defined which are not defined for either of the base classes (Filtering out things added by the wx Parent):\r\n\r\n```python\r\n>>> set(filter(lambda x: x[0] == x[0].lower() and x[0] != '_', set(dir(wx))-set(dir(base))-set(dir(agg)))\r\n{'gui_repaint', 'keyvald'}\r\n```\r\n\r\nThese lists are a starting point\/hint at the amount of work for this task, but I'd actually suggest running [`stubgen`](https:\/\/mypy.readthedocs.io\/en\/stable\/stubgen.html) to get started.\r\n\r\nNote that a full solution would address not only FigureCanvas, but also Renderer, Toolbar-related things, etc. (essentially all classes defined in `backend_wx.py`, `backend_wxagg.py`, and `backend_agg.py`, and at least their public behaviors) \r\nFunctions which do not modify signatures from the base class may be omitted from the stub file.\r\n\r\nI believe all of these to be reasonably well behaved from a type perspective, though it is quite possible docstrings are lacking parameter information (or missing entirely) for these, so may take some digging for someone who has not worked with backends code before (and I'd count myself in that category)."],"labels":["topic: typing"]},{"title":"Added tilda (~) as a marker.","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n\r\nThis is a feature request for a ~ (tilda) as a marker.\r\n\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] N\/A - \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["You should be able to get this by using `marker=\"$\\sim$\"`\r\n\r\n```python\r\n>>> plt.scatter([0,1,2], [1,5,2], marker=r\"$\\sim$\")\r\n<matplotlib.collections.PathCollection object at 0x11a59ecd0>\r\n```\r\n\r\n![Figure_1](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2501846\/b76ca068-c0b7-43eb-88d4-64124677a2d1)\r\n\r\nThis is using LaTeX based symbols (though it works with our built in Mathtext parser, so not dependent on using _actual_ latex)\r\n\r\n\r\nAnd will work for _any_ of the symbols listed in https:\/\/matplotlib.org\/stable\/users\/explain\/text\/mathtext.html#symbols","Btw, the more common name is tilde: https:\/\/en.m.wikipedia.org\/wiki\/Tilde","I actually rather like the idea of allowing `~`. I certainly wouldn't have\r\neven thought about the latex representation. Of course, it is difficult to\r\nfigure out where to draw the line on what symbols to have a shortcut for,\r\nso perhaps having it in an example would make sense (in the latex form).\r\n\r\nOn Wed, Sep 27, 2023 at 5:15\u202fPM Kyle Sunden ***@***.***>\r\nwrote:\r\n\r\n> You should be able to get this by using marker=\"$\\sim$\"\r\n>\r\n> >>> plt.scatter([0,1,2], [1,5,2], marker=r\"$\\sim$\")<matplotlib.collections.PathCollection object at 0x11a59ecd0>\r\n>\r\n> [image: Figure_1]\r\n> <https:\/\/user-images.githubusercontent.com\/2501846\/271117188-b76ca068-c0b7-43eb-88d4-64124677a2d1.png>\r\n>\r\n> This is using LaTeX based symbols (though it works with our built in\r\n> Mathtext parser, so not dependent on using *actual* latex)\r\n>\r\n> And will work for *any* of the symbols listed in\r\n> https:\/\/matplotlib.org\/stable\/users\/explain\/text\/mathtext.html#symbols\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26938#issuecomment-1738088102>,\r\n> or unsubscribe\r\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AACHF6CVBZYV44YEF4ZCNXTX4SJNTANCNFSM6AAAAAA5J6P7JA>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n","There is https:\/\/matplotlib.org\/stable\/gallery\/lines_bars_and_markers\/marker_reference.html#markers-created-from-tex-symbols.\r\n\r\nWhat's so special\/important about \"~\" that we should make it directly accessible?","No, I mean that `$\\sim$` gets you a tilde. It isn't immediately obvious\r\nunless you happen to have needed to use it in mathtex. So, adding it as an\r\nexample would make it more knowable.\r\n\r\nTilde is one of the view non-alphanumerical symbols left that is on most\r\nkeyboards that isn't in the list. Seems like an oversight to me.\r\n\r\nOn Wed, Sep 27, 2023 at 8:12\u202fPM Tim Hoffmann ***@***.***>\r\nwrote:\r\n\r\n> There is\r\n> https:\/\/matplotlib.org\/stable\/gallery\/lines_bars_and_markers\/marker_reference.html#markers-created-from-tex-symbols\r\n> .\r\n>\r\n> What's so special\/important about \"~\" that we should make it directly\r\n> accessible?\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26938#issuecomment-1738266900>,\r\n> or unsubscribe\r\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AACHF6HYP6JEPZICZNOI7A3X4S6IHANCNFSM6AAAAAA5J6P7JA>\r\n> .\r\n> You are receiving this because you commented.Message ID:\r\n> ***@***.***>\r\n>\r\n","s\/view\/few\/\r\n\r\nOn Wed, Sep 27, 2023 at 11:15\u202fPM Benjamin Root ***@***.***> wrote:\r\n\r\n> No, I mean that `$\\sim$` gets you a tilde. It isn't immediately obvious\r\n> unless you happen to have needed to use it in mathtex. So, adding it as an\r\n> example would make it more knowable.\r\n>\r\n> Tilde is one of the view non-alphanumerical symbols left that is on most\r\n> keyboards that isn't in the list. Seems like an oversight to me.\r\n>\r\n> On Wed, Sep 27, 2023 at 8:12\u202fPM Tim Hoffmann ***@***.***>\r\n> wrote:\r\n>\r\n>> There is\r\n>> https:\/\/matplotlib.org\/stable\/gallery\/lines_bars_and_markers\/marker_reference.html#markers-created-from-tex-symbols\r\n>> .\r\n>>\r\n>> What's so special\/important about \"~\" that we should make it directly\r\n>> accessible?\r\n>>\r\n>> \u2014\r\n>> Reply to this email directly, view it on GitHub\r\n>> <https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26938#issuecomment-1738266900>,\r\n>> or unsubscribe\r\n>> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AACHF6HYP6JEPZICZNOI7A3X4S6IHANCNFSM6AAAAAA5J6P7JA>\r\n>> .\r\n>> You are receiving this because you commented.Message ID:\r\n>> ***@***.***>\r\n>>\r\n>\r\n","There are quite a few non-alphanumeric characters on the keyboard that are not markers.\r\n> ~ ! \u00a7 $ % & \/ \\ ? # ;\r\n\r\nIn general, our marker identifiers don't follow the direction \"I have a character and want that to be printed as marker\". It's rather the other way round: \"What are reasonably common markers (e.g. square, cross, plus,...) and how can we represent them reasonably as a single-char mnemonic?\r\n\r\nI don't think `~` is that common, and IMHO it's not a very good marker either because the curvey appearance blurs the exact position. There may be niche use cases in which it is suitable, but I would not recommend using it in general.","Right, that's what I was getting at with where to draw the line. All of\r\nthose other characters I probably wouldn't admit as explicit markers. Your\r\npoint about it blurring the exact position is a good one and might be a\r\ngood rule to use for where to draw the line.\r\n\r\nOn Thu, Sep 28, 2023 at 4:13\u202fAM Tim Hoffmann ***@***.***>\r\nwrote:\r\n\r\n> There are quite a few non-alphanumeric characters on the keyboard that are\r\n> not markers.\r\n>\r\n> ~ ! \u00a7 $ % & \/ \\ ? # ;\r\n>\r\n> In general, our marker identifiers don't follow the direction \"I have a\r\n> character and want that to be printed as marker\". It's rather the other way\r\n> round: \"What are reasonably common markers (e.g. square, cross, plus,...)\r\n> and how can we represent them reasonably as a single-char mnemonic?\r\n>\r\n> I don't think ~ is that common, and IMHO it's not a very good marker\r\n> either because the curvey appearance blurs the exact position. There may be\r\n> niche use cases in which it is suitable, but I would not recommend using it\r\n> in general.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26938#issuecomment-1738683556>,\r\n> or unsubscribe\r\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AACHF6AJNBQYPAAXHERGFQDX4UWSDANCNFSM6AAAAAA5J6P7JA>\r\n> .\r\n> You are receiving this because you commented.Message ID:\r\n> ***@***.***>\r\n>\r\n","Thank you for your interest and effort @Robinhoets .\r\n\r\nI have moved this to draft because \r\n\r\n - from the discussion it is not clear why we need this over the proposed method that works with _any_ glyph\r\n - this seems to be missing the actual implementation of the marker\r\n - missing tests + whats new documentation\r\n\r\nI think the path forward is explain why this feature is needed and if there is consensus that we should take an implementation, to actually implement it.","I agree with @timhoffm against this PR."],"labels":["status: needs clarification"]},{"title":"[ENH]: provide automatic linestyle cycling by default","body":"### Problem\r\n\r\nmatplotlib already provides automatic cycling of line colours, for instance using `ax.plot(x,y)` multiple times to show multiple curves on the same axes generates those curves with colours blue, orange, green, red, etc.\r\n\r\nIt would be generally useful to also provide or allow for automatic cycling of the linestyle (solid, dotted, dashed etc).  A particular use-case is when a document might be printed on a black&white printer.  Colours may not be easily discernible in grey shading, so different linestyles are important for distinguishing which curve is which.\r\n\r\n### Proposed solution\r\n\r\nThe existing colour cycler could be extended to also cycle over linestyles.  (I haven't been able to locate the definition of the default colour cycling in the code, I'd be grateful if someone could point it out).\r\n\r\nIf consensus is that by default the linestyle should remain solid for all lines, then as an alternative it would be helpful to provide an alternative cycler definition which adds linestyle cycling to the existing colour cycling. For completeness it could also then be appropriate to provide a third cycler object which provides linestyle cycling with the same colour. This would save having to create custom cyclers manually each time (or reconfigure the local rc config file for each user).","comments":["You can cycle over line styles: https:\/\/matplotlib.org\/stable\/users\/explain\/artists\/color_cycle.html","That link describes how to set up cycling manually.  This issue requests cycling as a default configuration.\r\n\r\nAnother point is that that page only cycles over 3 or 4 linestyles.  A larger set of linestyles would be desirable, in line with the number colours that are cycled over in the default configuration.","I doubt that we plan to change the default cycle.  You can create your own style sheet (https:\/\/matplotlib.org\/stable\/users\/explain\/customizing.html#defining-your-own-style) or just change your .matplotlibrc to change this all the time.  \r\n\r\n> A larger set of linestyles would be desirable\r\n\r\nOur Linestyle API is here: https:\/\/matplotlib.org\/stable\/gallery\/lines_bars_and_markers\/linestyles.html. You can use this to specify your cycler to cycle through those line styles.  \r\n\r\n\r\n","For reference, the ISO 128-2:2022 standard defines 15 specific line types,  https:\/\/www.iso.org\/standard\/83355.html\r\nI'm not sure if there's a public version of the document though.","I think we _would_ consider expanding the Linestyles API to make creation of ISO line types easier.  I'm not sure if we would expand our string designation of the line styles, but a simple proposal might work.  \r\n\r\nThis is somewhat orthogonal to the original request for a lifestyle cycle to be default.  ","I\u2018m -1 on line style cycling by default. Apart from the backwards compatibility aspect of changing a default, I claim that black-white print is not the most common representation of plots anymore, and that solid colored lines are better readable on colored devices than dashed or dotted lines. I\u2018m also not aware of any other current visualization software that cycles line styles by default.","Not entirely orthogonal: enabling easy creation of linestyle cyclers would implement this request via the option in the last paragraph: providing standardised cyclers that can be easily accessed rather than manually generating linestyle cyclers each time. I can imagine the three cases\r\n\r\n1. `standard_cycler_color`  (used by default)\r\n2. `standard_cycler_color_linestyle`\r\n3. `standard_cycler_linestyle`\r\n\r\nPerhaps ISO128_2 could be embedded in the cycler names. Incidently ISO128-2 also declares standard colours, but the preview copy I have at hand doesn't include that section. So I don't know if they're the same as matplotlib's existing set or not. For my own work I've been using the colour set designed for colour blindness recommended by https:\/\/www.nature.com\/articles\/nmeth.1618 (see also https:\/\/jfly.uni-koeln.de\/html\/manuals\/pdf\/color_blind.pdf)\r\n\r\nUsing the default cycler and the linestyle examples at https:\/\/matplotlib.org\/stable\/gallery\/lines_bars_and_markers\/linestyles.html, one approach could be something like\r\n```\r\nimport matplotlib\r\nfrom cycler import cycler\r\n\r\nstandard_linestyle_str = [\r\n     ('solid', 'solid'),      # Same as (0, ()) or '-'\r\n     ('dotted', 'dotted'),    # Same as (0, (1, 1)) or ':'\r\n     ('dashed', 'dashed'),    # Same as '--'\r\n     ('dashdot', 'dashdot')]  # Same as '-.'\r\n\r\nstandard_linestyle_tuple = [\r\n     ('loosely dotted',        (0, (1, 10))),\r\n     ('dotted',                (0, (1, 1))),\r\n     ('densely dotted',        (0, (1, 1))),\r\n     ('long dash with offset', (5, (10, 3))),\r\n     ('loosely dashed',        (0, (5, 10))),\r\n     ('dashed',                (0, (5, 5))),\r\n     ('densely dashed',        (0, (5, 1))),\r\n\r\n     ('loosely dashdotted',    (0, (3, 10, 1, 10))),\r\n     ('dashdotted',            (0, (3, 5, 1, 5))),\r\n     ('densely dashdotted',    (0, (3, 1, 1, 1))),\r\n\r\n     ('dashdotdotted',         (0, (3, 5, 1, 5, 1, 5))),\r\n     ('loosely dashdotdotted', (0, (3, 10, 1, 10, 1, 10))),\r\n     ('densely dashdotdotted', (0, (3, 1, 1, 1, 1, 1)))]\r\n\r\nstandard_linestyles_known = standard_linestyle_str + standard_linestyle_tuple\r\nstandard_colors_known = matplotlib.rcParams['axes.prop_cycle'].by_key()['color']  # i.e. access \"standard_cycler_color\"\r\ncombined_style_number = min(len(standard_linestyles_known), len(standard_colors_known))\r\n\r\nstandard_cycler_color_linestyle = (cycler(color=standard_colors_known[:combined_style_number]) +\r\n                     cycler(linestyle=[ ls[1] for ls in standard_linestyles_known[:combined_style_number]]))\r\n\r\nstandard_cycler_linestyle = cycler(linestyle=[ ls[1] for ls in standard_linestyles_known])\r\n```\r\nThen the colour\/line cycler can be set with\r\n```\r\nplt.rc('axes', prop_cycle=standard_cycler_color_linestyle)\r\n```\r\n\r\nCould you point me where in the code the current default (colour) cycler is defined? The idea would be to have these standard linestyle definitions alongside the standard colour definitions.\r\n","The defaults are defined in our matplotlibrc: https:\/\/github.com\/matplotlib\/matplotlib\/blob\/31ae0fe9d9e91d4b9a9b12761026a6140bf98f9f\/lib\/matplotlib\/mpl-data\/matplotlibrc#L414\r\n\r\nOther styles are defined in https:\/\/github.com\/matplotlib\/matplotlib\/tree\/main\/lib\/matplotlib\/mpl-data\/stylelib\r\n\r\nLinestyles are defined at https:\/\/github.com\/matplotlib\/matplotlib\/blob\/31ae0fe9d9e91d4b9a9b12761026a6140bf98f9f\/lib\/matplotlib\/lines.py#L1138 At some point we had the idea of a Linestyle class but it looks like that didn't make it through. \r\n\r\nGiven the lack of a Linestyles class I think what you are discussing is more possible strings to `set_linestyle`.  eg maybe 'iso15' or somesuch.  Maybe long names like above would be fine too.  \r\n\r\nConversely, you may just want to define a style which has the line cycler include the codes you want to use.  \r\n\r\nThe code you cribbed from above is just an example to show how to use the `(offset, onoffseq)` pairs in `set_linestyle`. ","I think changing the default cycle is not likely something to happen outside of a larger defaults change.\r\n\r\nHowever, we looked at ISO 128-2 yesterday; it appears quite possible to define all their line styles based on the preview I had available:\r\n![iso128](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/302469\/c1eb20ce-3c57-4088-9555-d812d313ff11)\r\nThe question does remain as to which name these should be added, or if perhaps they belong in a third-party package.","Fair enough, there's consensus to keep the default cycle is it is.\r\n\r\nFor providing ISO 128-2 definitions, would the `lines` submodule be the right place to keep them?\r\n\r\nDoes your ISO 128-2 preview show the ISO colours? They could be provided in the colors submodule. Alternatively an ISO submodule could be created containing both (the ISO standard also defines standard line widths)","The preview is only the first 15 or so pages; I have no idea what the colours are.","> The question does remain as to which name these should be added, or if perhaps they belong in a third-party package.\r\n\r\nThe third-party package doesn\u2019t make sense. Nobody would install an additional package just for the names and the maintenance cost within Matplotlib for having an extended mapping of names to styles is low.\r\n\r\nLinestyle names could be one or both of\r\n\r\n- numbers: \u201cISO 128-2 01\u201d, \u201cISO 128-2 02\u201d\u2026 While they are not understandable, they might be helpful for \u201cI need N different line styles\u201d so that doesn\u2019t have to bother with stating individual names (but that could also be solved by an accessible list).\r\n- The description column in table 1, without the \u201cline\u201d suffix, e.g. \u201ccontinuous\u201d, \u201cdashes spaced\u201d.\r\n","> The preview is only the first 15 or so pages; I have no idea what the colours are.\r\n\r\nSame as me. If we do agree to go ahead implementing an ISO set, it'd probably be good manners to buy the official standard (and then also get the colours and line widths).\r\n\r\nMight be an idea to check with ISO about copyright. I don't think it will be a problem, they want their standards used. The copyright is on the standards document, not the implementation of the standards. It fits with \"Copy parts of a standard for your book or software\" on p.5 of their [copyright user guide](https:\/\/www.iso.org\/publication\/PUB100206.html). So I think it will be fine but should check with them.\r\n\r\nDoes matplotlib have funds to buy the standard? If not, might be possible to ask NumFOCUS for support.","My loose understanding of ISO standards is that you can't claim something is \"iso\" unless it's been audited by someone who can approve it as meeting the ISO spec?  I'm fine with something that is \"iso-esque\". I'm not sure we want to claim perfect ISO compliance.  "],"labels":["New feature"]},{"title":"[Bug]: Resolution of Collection with unfilled markers edgecolors depends on whether colors are passed in constructor or later","body":"### Bug summary\n\nIn the example below, I construct two collections of unfilled markers via `scatter(..., marker=\"x\")`.  In one case I set the marker colors in the constructor, in the other case I set it immediately after via an explicit setter call.\r\nI then set the collection's facecolor (it doesn't matter here for unfilled markers, but one can imagine this is generic code where the marker used actually comes from elsewhere and I just have `marker=user_specified` and here the user just happened to be `\"x\"`.\r\nI then probe the collection's edgecolor (which is how the cross will actually be drawn).  In the first case, the edgecolor actually switched to blue, i.e. it followed the facecolor.  In the second case it stays (red, green), i.e. it followed the set_color call and ignored the later set_facecolor.\n\n### Code for reproduction\n\n```python\nfrom pylab import *\r\n\r\ncoll = plt.scatter([0, 1], [0, 1], marker=\"x\",\r\n                   color=[\"r\", \"g\"])\r\ncoll.set_facecolor(\"b\")\r\nprint(coll.get_edgecolor())\r\n\r\ncoll = plt.scatter([0, 1], [0, 1], marker=\"x\")\r\ncoll.set_color([\"r\", \"g\"])\r\ncoll.set_facecolor(\"b\")\r\nprint(coll.get_edgecolor())\n```\n\n\n### Actual outcome\n\n[[0. 0. 1. 1.]]\r\n[[1.  0.  0.  1. ]\r\n [0.  0.5 0.  1. ]]\n\n### Expected outcome\n\nSame output for both collections.\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nmacos\n\n### Matplotlib Version\n\n3.8\n\n### Matplotlib Backend\n\nagg\n\n### Python version\n\n3.11\n\n### Jupyter version\n\nENOSUCHLIB\n\n### Installation\n\ngit checkout","comments":["I assume this has something to do with property resolution that @efiring refactored some time ago.","The basic problem is that `scatter` has a special behavior for unfilled markers: they are treated as if they had only a face, not an edge, even though in fact it is the other way around. From the docstring (and #17543):\r\n```\r\n            For non-filled markers, *edgecolors* is ignored. Instead, the color\r\n            is determined like with 'face', i.e. from *c*, *colors*, or\r\n            *facecolors*.\r\n```\r\nBut `scatter` then returns a generic `PathCollection`, initialized with the marker's path, that doesn't know about this behavior, so it has no way to maintain it when color attributes are subsequently changed.\r\n\r\nI think the solution might be to make a `MarkerCollection` subclass of `PathCollection`.  Some of the color manipulation logic would then be moved from the `Axes.scatter()` method to the new class. \r\n\r\nAlternatively, just accept and document the current behavioral inconsistency."],"labels":["topic: collections and mappables"]},{"title":"[ENH]: Remove `canvas.draw` from `widgets.Cursor.onmove`","body":"### Problem\n\nA busy icon appears every time the mouse goes off the axes and the cursor is cleared.\r\nFor image files ~100MB, the busy icon lasts 1-2 seconds each time.\r\n\r\nSample code:\r\n```python\r\nfrom matplotlib.widgets import Cursor\r\nfrom matplotlib import pyplot as plt\r\nfrom matplotlib import cm\r\nfrom PIL import Image\r\n\r\nfig, ax = plt.subplots()\r\n\r\nimg = Image.open(r\"Path to large image file ~100MB\")\r\nax.imshow(img, cmap=cm.gray)\r\n\r\ncursor = Cursor(ax, useblit=True, color='red', linewidth=1)\r\n\r\nplt.show()\r\n```\n\n### Proposed solution\n\nI think the behavior of not clearing the cursor when the mouse goes off the axes is acceptable.\r\nIt is also consistent with the behavior of the similar class `MultiCursor` which doesn't call  `canvas.draw`.\r\n\r\nIf accepted, the following lines can be removed and `needclear` will also be removed:\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/ff552f45f2d30c76120fe0355306afac9a9dd2da\/lib\/matplotlib\/widgets.py#L2015-L2017\r\n\r\n","comments":["@anntzer @oscargus either of you have any comments about this?  ","I sort of agree that in general it may not be a problem if the cursor is not cleared. However, I was thinking that one possibly can add a keyword argument that can be used to control this so that we do not break any previous behavior, but allowing users to avoid clearing it if it is beneficial\/acceptable.\r\n\r\nMaybe `clearoutside` (or a better name), which defaults to `True` and then something like\r\n```\r\nif self._clearoutside and self.needclear: \r\n     self.canvas.draw() \r\n     self.needclear = False\r\n```\r\nor maybe even an early return before setting it to non-visible?\r\n\r\n(Edit: probably one would like to consider enabling clearing for MultiCursors...)\r\n\r\n(Edit 2: as `needclear` is, sort of, public, we would also need to go through the deprecation dance. Hence, probably easier to optionally disable it.)","It seems clear that needclear should have been private, and should be made so via deprecation.\r\nI didn't really look in depth but why does Cursor even need to clear and redraw everything when the mouse goes off the axis?","> I didn't really look in depth but why does Cursor even need to clear and redraw everything when the mouse goes off the axis?\r\n\r\nIt is quite nice once you have it. However not clear why it has to redraw everything and cannot rely on the normal drawing\/blitting. Probably an easy, but not efficient, way to do it.","Thank you for your review.\r\nI added the following monkey patch to my program and it worked fine for me.\r\n```python\r\nif 1:\r\n    class Cursor(Cursor):\r\n        def onmove(self, event):\r\n            if self.ignore(event)\\\r\n              or not self.canvas.widgetlock.available(self):\r\n                return\r\n            ## xdata, ydata = self._get_data_coords(event) # >= 3.8 only\r\n            xdata, ydata = event.xdata, event.ydata\r\n            self.linev.set_xdata((xdata, xdata))\r\n            self.linev.set_visible(self.visible and self.vertOn)\r\n            self.lineh.set_ydata((ydata, ydata))\r\n            self.lineh.set_visible(self.visible and self.horizOn)\r\n            if self.visible and (self.vertOn or self.horizOn):\r\n                self._update()\r\n```\r\nSince `events.xdata` and `ydata` return None , it is simply cleared rather than drawn.\r\n(In the latest version, `_get_data_coords` would be better)"],"labels":["New feature","topic: widgets\/UI"]},{"title":"[ENH]: Add Colorbar.{get,set}_{,minor}{locator,formatter}","body":"### Problem\n\nCurrently, setting a Colorbar's formatter is done by assigning to the `cbar.formatter` property.  It would be nice if a getter\/setter was provided following the standard Matplotlib API (ditto for minor formatters), as that would also allow directly setting the formatter in the constructor (`fig.colorbar(..., formatter=...)`) or via a general `cbar.set(..., formatter=...)`\r\n\r\nThe same issue applies for ticks, although in that case there's actually already set_ticks which already accepts taking a locator as argument; here I guess(?) it should be possible to just let `ticks` be an alias for `locator`.\n\n### Proposed solution\n\n_No response_","comments":["You can access the yaxis and set these like you do for any other axes, can't you?  ","Sure, though in that case one may even ask why cbar.locator\/cbar.formatter even exists as accessing through the axis would likewise work.  I think the advantage of having direct\/shorthand access is in particular because it is generic wrt orientation (i.e. you can write the same code for horizontal and for vertical axes); what I'm suggesting here is that the shorthand versions should go through getters\/setters like many other Matplotlib APIs rather than through properties.","I'm not super against adding these, I just think we should decide if we want all these shortcuts, or if we want to make the API more like axes.  Another idea is to provide `long_axis` as a property and then you could do `cax.long_axis.set_major_formatter` so that the same code could be used for horizontal and vertical ","Publically exposing long_axis seems fine to me too.","Added to the weekly meeting.  If he cannot make it, perhaps @timhoffm has an opinion. @greglucas  has also though a lot about colorbar.  \r\n\r\nMy personal take would be that exposing `long_axis` stops us from having to expose a whole shadow axis API on colorbar, in keeping with the goal of making colorbar a more normal axes.  ","> My personal take would be that exposing `long_axis` stops us from having to expose a whole shadow axis API on colorbar, in keeping with the goal of making colorbar a more normal axes.\r\n\r\nThis is reasonable and should be done for the arguments given. Maybe there's a better name than `long_axis`? `value_axis`, `color_axis` ...?\r\n\r\nOf course, it does not allow the orignally requested calls (`(fig.colorbar(..., formatter=...))` or `cbar.set(..., formatter=...)`). While they would be nice as well, this indeed means reexposing already existing axis functions. I suggest to not do this right now. If there is a strong desire for that later and the `cbar.*_axis` access is not sufficient, we can always add that later.","I think exposing long_axis (name TBD) would be good enough, and agree that \"exposing a whole shadow axis API on colorbar\" is not great.","`main_axis`?  `primary_axis`?  `value_axis` and `color_axis` are good too.  Agree that `long_axis` is probably not intuitive - it's just what we have internally.  ","BTW, I don't think this precludes passing `formatter=` etc in the colorbar constructor.  The only issue there is if we want major\/minor to be differentiated.","Note that there is already a `format` kwarg in the factory function https:\/\/matplotlib.org\/stable\/api\/figure_api.html#matplotlib.figure.Figure.colorbar. That applies to the major formatter should be enough as a high level interface for `colorbar()`. In the rare case that users need more conrol, they should go through the axis.","Ah, I had completely missed that API; I agree that's enough for the high-level interface.  Perhaps ticks and format could gain aliases (locator and formatter respectively), though, so that they are available under more standard names?","I'm -0.5 on aliases here. Aliases have a cost (additional code, longer documentation). AFAIK, we don't have other cases where we pass in Formatters or Locators as a configuration parameter, so it's not strictly a consistency topic.\r\n\r\nMaybe even more important: aside from Locators\/Formatters the kwargs accept a list of tick positions\/a format string. While the present kwargs read well both ways (`colorbar(..., format='%.3f', ticks=[1, 2, 3])` and `colorbar(..., format=DateFormatter(\"%Y-%m-%d\"), ticks=MaxNLocator(5))`), using `colorbar(..., formatter='%.3f', locator=[1, 2, 3])` feels a bit odd. - The reason being: The current kwargs `format\/ticks` generically describe semantics, but `formatter`\/`locator` call for specific specific code representations (classes) of the semantics.","> The current kwargs format\/ticks generically describe semantics, but formatter\/locator call for specific specific code representations (classes) of the semantics.\r\n\r\nNote that this is already not really anymore the case, as Axis.set_major_formatter already accepts format strings and arbitrary callables (respectively autoconverting them to StrMethodFormatter and to FuncFormatter).  Colorbar tries to accept *both* %-format strings and {}-format strings, so at least something like `formatter=\"{:.3f}\"` still only requires an alias, and is consistent with the set_major_formatter API.","> so at least something like `formatter=\"{:.3f}\"` still only requires an alias, and is consistent with the set_major_formatter API.\r\n\r\nPoint taken. Still, I'm unsure whether aliases are worth it. Let's say. I'm -0 on `formatter` alias now.","The consensus of the developer call is to expose `long_axis` as a public property .","Can you please comment on the reasoning behind going with `long_axis`? While that name is ok and clear enough to understand, the purely geometrical description is a different logical approach than x\/y axis. `color_axis` or `value_axis` seem more logically consistent with x\/yaxis to me:\r\n- `color_axis`: the scatter(x, y, color) inputs go to the xaxis\/yaxis\/color_axis).\r\n- `value_axis`: the type of data in the axis are the *values associated with the colors* - note that the color name part will typically come in via the Colorbar Axes, I.e. `colorbar.value_axis`, so that we don\u2019t need an extra \u201ccolor\u201d in the axis attribute like `colorbar.color_value_axis`\r\n\r\nBluntly speaking, `long_axis` feels a bit like if we had named `yaxis` `vertical_axis` instead. It\u2019s clear, but `vertical_axis` and `xaxis` do not rhyme.","Fwiw value_axis and color_axis both sound good to me, with a slight preference for the former I think.","The logic against \"color_axis\" was that it would cross with the things you change through the norm \/ colormap vs the things you change via the axis.\r\n\r\nThe logic against \"value_axis\" is that everything is a \"value\". It leaves too much space for users to do \"wishful API reading\" and have incorrect expectations about what it refers to.\r\n\r\nThe logic for \"long_axis\" is that if two people are looking at a figure with a color bar Q: \"which axis of the colorbar are the ticks on?\" A: \"the long axis\" is completely unambiguous. \r\n\r\nWith x and y there are very ingrained expectations of what those mean (and we Axes level API with x\/y\/z in the names).  With the color axis there is less ingrained expectations.  Rather than try to induce those expectations, go with the super clear geometric naming.\r\n\r\n------\r\n\r\nMy preference is long > color > value.","long_axis is pretty intuitive - in my view xaxis is only intuitive because of long tradition; certainly the xaxis is often not the xaxis. \r\n\r\nI don't like either color_axis or value_axis for the reasons above, though I find color_axis the most confusing.   I'd rank long > value >> color.  \r\n\r\nMaybe `labelled_axis` since that is what is functionally being done here?","Thanks for the explanation and patience. I want to make sure we have carefully chosen the new API. If there is still a majority for `long_axis` after weighing the arguments, I'll submit to that.\r\n\r\nThe key distinction between a colorbar Axes and and a standard x\/y Axes is that the colorbar is conceptually 1D: we only have one axis that contains semantic information. If possible, I'd like to have that captured in the name. `labelled_axis` basically works, but feels a bit bulky (maybe that is just me always struggling to remember whether there's a double \"l\" or not).\r\n\r\nI just started to like `data_axis`. While `data` is a very generic term and should usually be avoided, maybe we actually want that generic aspect here. We don't need to focus on the exact type of data (one can think label, color, numeric value as one likes). `data` generically captures the `semantic information` aspect, contrasting from the other *non-data* axis.\r\n\r\n"],"labels":["New feature","API: consistency","topic: color\/colorbar"]},{"title":"[MNT]: Some Timer behaviors are underspecified","body":"### Summary\n\nIt is unclear whether updating the `interval` or `single_shot` attributes of an already running Timer instance should actually update the timer, and I think the behavior is actually not consistent between backends.  From a quick look:\r\n- gtk, qt, wd: both interval and single_shot update the running timer\r\n- wx, webagg: interval updates the running timer, not single_shot\r\n- macos: neither update the running timer\n\n### Proposed fix\n\nSpecify the expected behavior.  (I'm not actually so sure we actually need to support updating these attributes on a running timer at all.)","comments":["Hello,\r\n\r\nSince there hasn't been any discussion on the topic, I'd like to proceed with the proposed fix. This would standardize all backends to prevent updating attributes on running timers. Please let me know if there are any objections or concerns. Thank you in advance."],"labels":["Maintenance"]},{"title":"PGF: Consistently set LaTeX document font size","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\nCurrently, when using the PGF backend, different LaTeX document font size settings are used when measuring widths vs. producing output. Although this is usually not a problem (since all text produced by the PGF backend locally sets the font properties), packages used in the custom preamble (such as `unicode-math`) may depend on the font size settings, leading to incorrect width measurements since different outcomes are produced in the two cases. This fixes the issue by always setting the LaTeX font size to the rc setting `font.size`.\r\n\r\nCloses #26892.\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Not sure what\u2019s going on with the flake8 test thing \u2013 it doesn\u2019t look like I changed anything about blank lines where it\u2019s complaining.","> However, it may be worthwhile adding an image test to confirm that the new behavior is kept.\r\n\r\nSounds like a good idea \u2013 I\u2019ll get on that.\r\n\r\n> Also, it may be that one will need to install `scrextend` in the CI to get it going (not sure if it is included in any standard distribution or not).\r\n\r\n`scrextend` is part of the KOMA Script bundle, which is very widely used. In TeX Live, it\u2019s part of `collection-latexrecommended`, the same as `fontspec` and `underscore` which are currently already loaded unconditionally. So normally, it should be present if the other two are.\r\n\r\nEither way, the use of `scrextend` is really just to set up the font size commands `\\tiny`, ..., `\\normalsize`, ..., `\\Huge` with sensible values. I don\u2019t think these are commonly used, and the fallback takes care of the one that really matters when it comes to this issue (`\\normalsize`).\r\n\r\n> Finally, it may be helpful to add a note that this will work better if `scrextend` is available. Maybe as an additional bullet at the end of https:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/galleries\/users_explain\/text\/pgf.py (https:\/\/matplotlib.org\/stable\/users\/explain\/text\/pgf.html)\r\n\r\nNot sure if this is necessary given the use of `fontspec` and `underscore` (see above)? The only reason I added the `\\IfFileExists` check is really just because `scrextend` is not absolutely *necessary* to fix the main issue, and I wanted to assume as little as possible about the user\u2019s TeX installation.","Then it should be fine I think! \r\n\r\n(Or rather, it would be nice that the required packages are explicitly stated somewhere, I may have missed it though, but this PR doesn't strictly add something to that.)","@pwuertz Do you have bandwidth to review this?"],"labels":["backend: pgf"]},{"title":"[ENH]: Provide a standard place to manually register widgets\/animations on a figure\/artist\/etc.","body":"### Problem\n\nIt is well known that references must be kept to widgets to keep them responsive and to animations to keep them running.  Yet sometimes there's no obvious place to stash them, e.g. (minimal example, fill in real-world usage as desired)\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.widgets import Cursor\r\n\r\ndef main():\r\n    fig, ax = plt.subplots(figsize=(8, 6))\r\n    cursor = Cursor(ax)\r\n    plt.show()\r\n\r\nmain()\r\n```\r\nIf you run this in non-interactive mode (e.g. saved in module.py and run from an external shell) then you are fine because show() blocks and thus the function frame keeps a reference to the cursor.  But if you run this in interactive mode (e.g. from an IPython shell -- `import module; module.main()`) then show() is non-blocking and immediately returns, so while the figure is displayed, the cursor is gc'ed.\r\n\r\nAs the developer of module.py, if you want to guard against this problem, then you need either to promote your simple function to a full-blown custom class holding the figure and the cursor, or you can go for the \"practical\" approach of stashing a reference to the cursor at the only reasonable place to do so: `fig._cursor_ref = cursor` (or similarly as an axes attribute).  But adding a custom attribute on the figure for that purpose feels rather dirty, and I guess that static type checkers probably don't like that at all either (not that I've checked...).\n\n### Proposed solution\n\nProvide e.g. Figure.register_child\/register_widget\/register_animation (name up to bikeshedding, and I'm not sure either whether that should just exist on Figures or on all Artists), which simply appends the child object (a widget or an animation, typically) to an internal list whose purpose is only to keep it alive.  Perhaps also provide a manual unregistration method.\r\n\r\n(Many, including myself, have argued elsewhere that widgets and animations should be auto-kept alive anyways, but I can understand the arguments against that behavior; in this issue I'm just arguing that we should have a standard way to manually register widgets and animations as to be kept alive.)","comments":[],"labels":["New feature","topic: widgets\/UI","topic: animation"]},{"title":"[ENH]: Release memory when raising error","body":"### Problem\n\nI am plotting a very large dataset. When an error occurs during plotting, such as when plt.plot(X, Y) raises a memory error, the memory assigned for plotting is not released until I manually run plt.close() at a later point.\r\n\r\nA nice feature to have would be to release the allocated memory automatically when errors as such occur.\n\n### Proposed solution\n\nRelease the allocated memory before raising memory error (or possibly other errors.)","comments":["We can not release the memory while there are still references to the Python objects using it.  It would also be really surprising that if on an exception (which we may not be in a position to even catch) we cleared the Figure (which is still not guaranteed to actually release the memory) would be very surprising)\r\n\r\nThere is at least a reference to the top level Figure in pyplot (`plt.close()` drops our reference to the `Figure`) and that will (recursively) hold reference to everything else in the tree.   For bettor or worse, our artist tree is linked both directions so if you have a refernce to a plotted artist anywhere that will also keep the objects alive.\r\n\r\nAnother place that references can \"hide\" is in traceback object which holds onto the locals of every frame in the traceback (which is super useful for debugging!).\r\n ","This might not be the right place to ask, but my actual traceback (at least the matplotlib traceback) looks like this. There is a separate traceback for numpy.concatenate that occurs occasionally. One of the problems that I noticed was that all of my data were in np.float32 to conserve memory, but it seems the default float for numpy is np.float64. So perhaps when matplotlib calls these numpy functions with default arguments, it asks for more memory that it actually needs? Is there a way of working around that?\r\n\r\n````\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\pyplot.py:2812, in plot(scalex, scaley, data, *args, **kwargs)\r\n   2810 @_copy_docstring_and_deprecators(Axes.plot)\r\n   2811 def plot(*args, scalex=True, scaley=True, data=None, **kwargs):\r\n-> 2812     return gca().plot(\r\n   2813         *args, scalex=scalex, scaley=scaley,\r\n   2814         **({\"data\": data} if data is not None else {}), **kwargs)\r\n\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\axes\\_axes.py:1690, in Axes.plot(self, scalex, scaley, data, *args, **kwargs)\r\n   1688 lines = [*self._get_lines(*args, data=data, **kwargs)]\r\n   1689 for line in lines:\r\n-> 1690     self.add_line(line)\r\n   1691 if scalex:\r\n   1692     self._request_autoscale_view(\"x\")\r\n\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\axes\\_base.py:2304, in _AxesBase.add_line(self, line)\r\n   2301 if line.get_clip_path() is None:\r\n   2302     line.set_clip_path(self.patch)\r\n-> 2304 self._update_line_limits(line)\r\n   2305 if not line.get_label():\r\n   2306     line.set_label(f'_child{len(self._children)}')\r\n\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\axes\\_base.py:2327, in _AxesBase._update_line_limits(self, line)\r\n   2323 def _update_line_limits(self, line):\r\n   2324     \"\"\"\r\n   2325     Figures out the data limit of the given line, updating self.dataLim.\r\n   2326     \"\"\"\r\n-> 2327     path = line.get_path()\r\n   2328     if path.vertices.size == 0:\r\n   2329         return\r\n\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\lines.py:1029, in Line2D.get_path(self)\r\n   1027 \"\"\"Return the `~matplotlib.path.Path` associated with this line.\"\"\"\r\n   1028 if self._invalidy or self._invalidx:\r\n-> 1029     self.recache()\r\n   1030 return self._path\r\n\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\lines.py:662, in Line2D.recache(self, always)\r\n    660 if always or self._invalidy:\r\n    661     yconv = self.convert_yunits(self._yorig)\r\n--> 662     y = _to_unmasked_float_array(yconv).ravel()\r\n    663 else:\r\n    664     y = self._y\r\n\r\nFile ~\\anaconda3\\Lib\\site-packages\\matplotlib\\cbook\\__init__.py:1335, in _to_unmasked_float_array(x)\r\n   1333     return np.ma.asarray(x, float).filled(np.nan)\r\n   1334 else:\r\n-> 1335     return np.asarray(x, float)\r\n\r\nMemoryError: Unable to allocate 382. MiB for an array with shape (50030001,) and data type float64\r\n````"],"labels":["New feature"]},{"title":"Deprecate BboxBase.corners.","body":"... which is used only internally in one place, and can be easily inlined.  Possibly in prevision for repurposing the name for other purposes.\r\n\r\nSee discussion at #26805.\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["FYI `.corners` is used (in testing code) in seaborn and in networkx","Moving this to 3.10, as @inferentialist makes a compelling case for it being used \"in the wild\" and @timhoffm has a bunch of thoughts on what the API should be that I don't think we fully hashed out."],"labels":["Maintenance"]},{"title":"[Bug]: Should animations include a lock so that save()ing a running animation doesn't race with its display?","body":"### Bug summary\n\nCalling `Animation.save` on an animation currently being displayed can create a race condition.\n\n### Code for reproduction\n\n```python\n# At an IPython shell -- here we just reuse an example, but you can\r\n# pretend we created our own animation.\r\nplt.ion()\r\n%run ...\/matplotlib\/galleries\/examples\/animation\/animate_decay.py\r\n# Oh, I like it, let's save it.\r\nani.save(\"\/tmp\/out.gif\")\n```\n\n\n### Actual outcome\n\nThe running animation freezes while the save() loop runs (that's more or less OK and unavoidable if we don't want to run save() in a separate thread, which we probably don't want), *and* after the save() finishes the animation continues, but with intermediate frames being \"skipped\".  In the specific case of animate_decay, some (t, y) pairs seem to disappear and instead the \"before\" and \"after\" parts of the sinusoid are connected by a straight line.\n\n### Expected outcome\n\nNo race condition between the save() and the display timer loop.\n\n### Additional information\n\nAdmittedly this could be considered a \"we're thread-unsafe\" wontfix, but on the other hand the end user isn't actually managing any thread themselves explicitly.  We could perhaps either explicitly freeze the running animation (to prevent skips of updates) during the save, or even just explicitly error out when trying to save a running animation.\n\n### Operating system\n\nmacos\n\n### Matplotlib Version\n\n3.8\n\n### Matplotlib Backend\n\nqtagg\n\n### Python version\n\n3.11\n\n### Jupyter version\n\nENOSUCHLIB\n\n### Installation\n\ngit checkout","comments":[],"labels":["topic: animation"]},{"title":"Removed the deprecated code from axis.py","body":"## PR summary\r\nThis PR removes the deprecated code during the version 3.8 from `lib\/matplotlib\/axis.py`  which is a sub issue in the parent issues here: https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26865\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ N\/A] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ N\/A] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [N\/A ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["https:\/\/matplotlib.org\/stable\/api\/prev_api_changes\/api_changes_3.8.0.html#tick-set-label1-and-tick-set-label2\r\n\r\nHere is the release note from the deprecation","pre-commit.ci autofix"],"labels":["mentored: hackathon","Maintenance"]},{"title":"[MNT]: matplotlib.cycler and pyplot.cycler are different functions","body":"### Summary\r\n\r\n- `pyplot.cycler` is an (unused) import of the original `cycler.cycler()` function. This was originally imported in 0c1e609e to be used inside the `xkcd()` function. It's probably not meant to be public, but as a matter of fact is now (https:\/\/github.com\/search?q=plt.cycler&type=code). - We even have used it in an example in 3.4.0 What's new.\r\n- `matplotlib.cycler` is `matplotlib.rcsetup.cycler()` which is a wrapper around  `cycler.cycler()` and additionally includes validation.\r\n\r\n\r\n### Proposed fix\r\n\r\nAttention @ksunden: `pyplot.cycler` is not re-exported for typing, so we may see complaints about this in the near future.\r\n\r\n---\r\n\r\nGenerally, we should not expose two different cycler functions within matplotlib. It's questionable enough (though one can argue for it) that we provide a replacement for the original cycler.\r\n\r\nLikely, the reasonable way forward is to expose `matplotlib.rcsetup.cycler()` in `pyplot`. ","comments":["> Likely, the reasonable way forward is to expose matplotlib.rcsetup.cycler() in pyplot.\r\n\r\nI agree","Good morning. I'm a new contributor and would like to understand what should be done. What we should do, then, is that when the pyplot.cycler function is called, matplotlib.rcsetup.cycler() is called instead. Did I understand correctly?","The key thing to check (and I'm not familiar enough with the cycler logic to do this ad-hoc) is whether `matplolib.rcsetup.cycler()` is a fully API compatible drop-in replacement for `cycler.cycler()`, except for the added validation.\r\n\r\nIf that's the case, the fix is as easy as replacing\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/dfdb37aa11ada50d8c91c320dbd250955b15a990\/lib\/matplotlib\/pyplot.py#L54\r\n\r\nby\r\n\r\n```\r\nfrom matplotlib.rcsetup import cycler\r\n```\r\n\r\nThe main task here is not the code change itself, but to understand the logic and be sure that the change would not break any users.","I do believe they are signature compatible, though I will note that part of the validation done by `rcsetup.cycler` is to limit the valid keys to a known set (not just validate values for a known set of keys). So if someone is using `plt.cycler` for something other than making a cycler for matplotlib prop cycles, it would break... on the other hand, if they are doing that, they should probably be using `cycler` directly anyway.\r\n\r\n> pyplot.cycler is not re-exported for typing, so we may see complaints about this in the near future.\r\n\r\nIs pyplot really a namespace we wish to advertise cycler is available at? I guess I would actually lean towards taking it out as an implementation detail rather than switching the source... (perhaps as part of a larger cleanup of the pyplot namespace, perhaps with deprecations, etc) if users want the existing cycler method that is there, it should be imported from cycler directly; if you want the validated one get it from rcsetup? I don't have a _huge_ problem with making it technically available. It is not documented in that location (at least in api docs or our own examples; there is one \"whats new\" entry that uses `plt.cycler`). It is not used internally by `pyplot.py` either."],"labels":["Maintenance"]},{"title":"[TYP] Change typing for texts to StrLike","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n\r\nRelated to #26858.\r\n\r\nIt is a bit unintuitive (maybe) to change like this, but apparently people are relying on `set_text` making the `str`-conversion.\r\n\r\nSetting as draft for now as we probably should discuss it (and I have most likely missed some).\r\n\r\nAdditional classes\/methods to change:\r\n- [ ] Annotation\/annotate\r\n- [ ] TextArea\r\n- [ ] Figure.text\r\n- [ ] QuiverKey (label)\r\n- [ ] set_title etc.\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["One can see this as similar to %s or f-strings, where the parameter is implicitly converted to str. OTOH I'm reluctant to officially broaden the type to Any. This would be very general, and IHMO would loose the semantic aspect of the type definition.\r\nThe automatic str conversion decision may be intentional and for convenience. Due to compatibility, we're bound to the behavior whether we want or not. But I'm inclined to regard this rather as a gone-public implementation detail that we have to support, and not as an intended feature that we want to advertise.\r\n\r\nTherefore, at least for the docstrings, I'm very much in favor of keeping `str`. It may be a technical solution to make a type alias `StrLike = Any` for annotations in this case, including a description why we use that. That'd be a somewhat simpler solution than the [propsed](https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26858#issuecomment-1729952159) `SupportsStr` protocol. It would  placate the type system for current code, but still carry the semantics."],"labels":["topic: text","topic: typing"]},{"title":"[TST]: increase unit test coverage ","body":"# Problem\r\n\r\nAlthough we nominally support units through all of our plotting APIs, this is not through tested (unfortunately this is a case where code coverage is not super informative).   The address this issue we would like to add a \"smoke test\" (does it run without smoke coming out?) of every plotting method using \"unit-full\" data.  The most common \"unit-full\" data is likely datetime, thus we are going to use datetime and timedelta values as the vehicle to exhaustively test which of the methods correctly handle units.\r\n\r\nThis is the tracking issue for this work.\r\n\r\n# Process\r\n\r\n1. Fork Matplotlib and get set up for development. See https:\/\/matplotlib.org\/devdocs\/devel\/contribute.html#contribute-code for detailed instructions of setting up a local or codespaces development environment.  For this work it is not strictly necessary to have a development version of Matplotlib installed, just an up-to-date installation (mpl 3.8.0) as the tested behavior _should_ be stable.\r\n2. Select a method to work on (for GHC OSD we will use slack and zoom to make sure we de-conflict!)\r\n3. Develop a short example that exercises passing dates or time deltas into the plotting methods.  Try to exercise as many of the inputs (and their combinations) as practical with the datetimes.\r\n    1. If you have a working example open a Pull request adding the example as a body to the correct test method in `lib\/matplotlib\/tests\/test_datetime.py`. Please include an image of the generated plot in the description of the PR and cross reference this issue (by including `#26864` in the PR description body).  This is modeled for `ax.plot` (I took the easiest one ;) ) in #26859.\r\n    2. If you find a method that _should_ support datetime input but does not, open a new bug with the broken code and similarly reference this issue.\r\n    3. If passing datetime \/ united data to the method does not make any sense or it should not work open a PR removing that test method and similarly reference this issue.\r\n\r\n# Task list\r\n\r\n - [x] `Axes.acorr` #27427\r\n - [x] ~`Axes.angle_spectrum`~\r\n - [x] `Axes.annotate` #27222\r\n - [ ] `Axes.arrow` #27372\r\n - [x] `Axes.axhline` #27177\r\n - [x] `Axes.axhspan` #27139\r\n - [ ] `Axes.axline` #27326\r\n - [x] `Axes.axvline` #27208\r\n - [x] `Axes.axvspan` #27130 \r\n - [x] `Axes.bar` #27033\r\n - [x] `Axes.bar_label` #27431\r\n - [x] `Axes.barbs` #27331\r\n - [x] `Axes.barh` #27084\r\n - [ ] `Axes.boxplot` #27038\r\n - [x] `Axes.broken_barh` #27428\r\n - [x] `Axes.bxp` #27390\r\n - [ ] `Axes.clabel` #27490\r\n - [ ] ~`Axes.cohere`~\r\n - [x] `Axes.contour` #27013\r\n - [x] `Axes.contourf` #27024\r\n - [x] ~`Axes.csd`~\r\n - [x] `Axes.errorbar` #27185\r\n - [x] `Axes.eventplot` #27466\r\n - [x] `Axes.fill` #27401\r\n - [x] `Axes.fill_between` #27423 \r\n - [x] `Axes.fill_betweenx`#27425\r\n - [ ] `Axes.hexbin` #27475\r\n - [x] `Axes.hist`  #27028\r\n - [ ] `Axes.hist2d` #27418\r\n - [x] `Axes.hlines` #27211\r\n - [x] `Axes.imshow` #27476\r\n - [ ] `Axes.loglog` #27435\r\n - [x] ~`Axes.magnitude_spectrum`~\r\n - [x] `Axes.matshow` #27474 \r\n - [ ] `Axes.pcolor` #27391\r\n - [ ] `Axes.pcolorfast` #27450\r\n - [ ] `Axes.pcolormesh` #27433 \r\n - [x] ~`Axes.phase_spectrum`~\r\n - [x] `Axes.pie` #27117\r\n - [x] `Axes.plot`\r\n - [x] `Axes.plot_date` #27037\r\n - [x] ~`Axes.psd`~\r\n - [ ] `Axes.quiver` #27407\r\n - [x] `Axes.quiverkey` #27449\r\n - [x] `Axes.scatter` #26882\r\n - [ ] `Axes.semilogx` #27320\r\n - [ ] `Axes.semilogy` #27320\r\n - [x] ~`Axes.specgram`~\r\n - [x] ~`Axes.spy`~ #27392\r\n - [x] `Axes.stackplot` #27114\r\n - [x] `Axes.stairs`#27424\r\n - [x] `Axes.stem` #27135\r\n - [x] `Axes.step` #27091 \r\n - [ ] `Axes.streamplot` #27489\r\n - [x] ~`Axes.table`~\r\n - [x] `Axes.text` #27142\r\n - [ ] `Axes.tricontour` #27494\r\n - [ ] `Axes.tricontourf` #27487\r\n - [ ] `Axes.tripcolor` #27491\r\n - [ ] `Axes.triplot` #27488\r\n - [ ] `Axes.violin` #27486\r\n - [ ] `Axes.violinplot` #27521\r\n - [x] `Axes.vlines` #27410\r\n - [x] `Axes.xcorr` #27427\r\n","comments":["### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the Matplotlib internals. To get started, please see our [contributing guide](https:\/\/matplotlib.org\/stable\/devel\/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull requests (PRs). If there are none, feel free to start working on it. If there is an open PR, please collaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication channels](https:\/\/matplotlib.org\/stable\/devel\/contributing.html#get-connected).","Hello! I'll take Axes.scatter\r\n","Hello, I will take the axes.bar","hii @tacaswell\r\n I'll start working on Axes.boxplot.\r\nthank you.","Note we are testing `matplotlib` unit support here, so please use numpy\/matplotlib\/datetime only in these tests (e.g. not pandas)","Hi @tacaswell \r\nI'm starting to work on Axes.contour.","Hi @tacaswell I'd like to be assigned on one or more tasks\r\n","Hi @Quetzalcoatl29, we do not assign tasks.  Please work on whichever one you like.  If you comment to say which you are starting on, as others have done, then that will help to prevent duplication of effort.","I'll be working on `Axes.contourf` next once this [PR](https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27013) is merged.\r\n**Update:** Since the previous PR is approved, without waiting further, raised [another PR for contourf.](https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27024)","I will work on  Axes.hist\r\n","I am able to write the test and run it with no failure but I am having a problem generating the graph. I tried adding plt.show() at the end of my test but that will make the test fail. Any help would be much appreciated.","I decided not to do the bar plot anymore. But thanks. ","Okay, I'll try out `Axes.bar`.","Hello! I'll start working on Axes.stackplot","I'm working on `Axes.plot_date`.\r\nAlso, I'm waiting for reviews on these PRs -\r\n- https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27033\r\n- https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27024\r\n","I will work on Axes.barh.","I will work on Axes.axvspan and Axes.axhspan","I crossed out the spectral ones - arguments aside about whether they should be part of Matplotlib, they don't have units as arguments.","Hello! Can I just solve the `Axes.pie` problem?","@Sheepfan0828 please do!","@rcomer how can i create a branch to work with? I have forked this repo to my own account as the local repo and then cloned it into my own machine.","> @rcomer how can i create a branch to work with? I have forked this repo to my own account as the local repo and then cloned it into my own machine.\n\n\nTake a look at our contributing docs https:\/\/matplotlib.org\/devdocs\/devel\/contribute.html#how-to-contribute","@story645 I have checked with that, is that means i just need to create the branch for the repo that i have forked into, and then after the changes have been submitted to this branch, i just make the pull request in my forked repo so that you will approve my branch to be merged into the base repo, not just the my forked one?","All pull requests (with very few exceptions), including those from core contributors come from our personal forks, you do not need to have a branch on the base repo before making a pull request.","> i just make the pull request in my forked repo so that you will approve my branch to be merged into the base repo, not just the my forked one?\n\nYep, you just want to be sure that the base is \"matplotib\/main\" and head is \"your fork\/your branch\"","I have done `pie` problem now, and it is removed from the project file since we cannot directly pass the `datetime` object into the `pie` function as a parameter so that `pie` function is not testable with `datetime` object. But now i see someone is doing the `scatter` but haven't solved it yet, can i just do `scatter` problem?","I am currently working on Axes.axhline.","~I'm working on `Axes.xcorr`.~\r\n~**Update :** Awaiting review on this - https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27033~\r\n\r\n-----\r\n\r\nI'm no longer working on `Axes.xcorr` as I'm not having clarity on how to use datetime on this for testing. I'd like to let others pick this up. For now, I'll pick up something else from the available list.","Working on Axes.annotate","Working on Axes.axlines","I will work on Axes.barbs","will work on Axes.arrow","I would like to work on Axes.streamplot ! \ud83d\ude04 ","Working on axes.bxp! Will shortly submit a PR","hello, I am working on axes.fill","hello, I am working on axes.fill_between","Hello, I am working on Axes.stairs","Hello, I am working on Axes.fill_betweenx.","Hello, I will be working on Axes.broken_barh\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Hi, I will work on Axes.loglog","I'm seeing most of these PRs doing something like:\r\n\r\n```\r\n start_date = datetime.datetime(2023, 1, 1)\r\n dates = [start_date + datetime.timedelta(days=i) for i in range(31)]\r\n```\r\n\r\nProbably don't need to go through and redo them all, but I think it would be nicer to encourage proper numpy arrays:\r\n\r\n```\r\ndates = np.arange(np.datetime64('2023-01-01'), np.datetime64('2023-02-01'), np.timedelta64(1, 'D'))\r\n```\r\nor for days, it is even simpler:\r\n```\r\ndates = np.arange(np.datetime64('2023-01-01'), np.datetime64('2023-02-01'))\r\n```\r\n","Hi, I will work on Axes.bar_label","Hello, I will work on axes.pcolormesh!","Hi! I will take Axes.pcolorfast()!","> Probably don't need to go through and redo them all, but I think it would be nicer to encourage proper numpy arrays:\r\n> \r\n> ```\r\n> dates = np.arange(np.datetime64('2023-01-01'), np.datetime64('2023-02-01'), np.timedelta64(1, 'D'))\r\n> ```\r\n> \r\n> or for days, it is even simpler:\r\n> \r\n> ```\r\n> dates = np.arange(np.datetime64('2023-01-01'), np.datetime64('2023-02-01'))\r\n\r\nPossibly should make that a module scoped fixture, but concerned that it will make things too confusing. \r\n\r\nAlso `ax.imshow` shouldn't be on this list cause AxesImage\/color doesn't participate in units #7383\r\n\r\n","> Also `ax.imshow` shouldn't be on this list cause AxesImage\/color doesn't participate in units #7383\r\n\r\nThere is no reason the `extents` (x and y axes) cannot participate in units.  ","Hi! I'll take Axes.quiverkey","hi I will be taking on Axes.plot()","@tracyqian0720 note that plot is checked off as completed (it was the example one, just never got linked here)","thanks @ksunden I'll take Axes.violin then!","HI, I will work on Axes.eventplot!","I'll work on Axes.hexbin","I'll work on matshow","I'll work on Axes.streamplot","Hi all, I'll work on Axes.tricontour","I'll work on Axes.tripcolor ","...and imshow","I\u2019ll work on Axes.clabel","I will work on Axes.violinplot.\r\n","I will work on Axes.triplot.","I will work on Axes.tricontourf.","Hi, I'm new to Open-Source Contributions but I'd like to contribute towards this project. I can work on creating a test for axes.streamplot.\r\nThank you","I do believe we now have PRs (at least) opened for each of these.\r\n\r\nThank you to all of the first time contributors who helped get us this far.","Hello , I would like to tackle the Axes.quiver if you don't mind, since i notice that it has not been solved yet.","Please note that we have an open PR for Quiver, and we generally prefer the earlier PR when possible. https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27407\r\n\r\n","I'm removing the good first issue tag because we have PRs at least started for all points here.","> Please note that we have an open PR for Quiver, and we generally prefer the earlier PR when possible. #27407\r\n\r\nThank you for your reply. I just noticed that the previous [#27407 ](https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27407) did not fully solve the problem. It only tested X and did not test Y, and the previous pull request has not been merged, so I thought I could continue to contribute to this issue."],"labels":["mentored: hackathon","topic: testing","topic: units and array ducktypes"]},{"title":"[Bug\/TYP]: misc type errors","body":"### Bug summary\r\n\r\nPandas uses mypy\/pyright to check its internal code. We currently pin matplotlib <3.8 to avoid many type errors https:\/\/github.com\/pandas-dev\/pandas\/pull\/55210 Many of these errors are definitely on pandas's side :) but a few might be bugs in matplotlib.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\n# Simplified examples from pandas that trigger type errors\r\n\r\ndef format_date_labels(ax: Axes, rot) -> None:\r\n    for label in ax.get_xticklabels():\r\n        label.set_ha(\"right\") # error: \"Text\" has no attribute \"set_ha\"  [attr-defined]\r\n\r\n\r\ndef test(cellText: np.ndarray):\r\n    # error: Argument \"cellText\" to \"table\" has incompatible type \"ndarray[Any, Any]\"; expected \"Sequence[Sequence[str]] | None\"  [arg-type]\r\n    # maybe use a Protocol such as Iterable?\r\n    matplotlib.table.table(ax, cellText=cellText **kwargs)\r\n\r\n\r\ndef decorate_axes(ax: Axes, freq, kwargs) -> None:\r\n    # The following might just be bad pandas code\r\n    # error: \"Axes\" has no attribute \"freq\"  [attr-defined]\r\n    ax.freq = freq\r\n    xaxis = ax.get_xaxis()\r\n    xaxis.freq = freq\r\n    if not hasattr(ax, \"legendlabels\"):\r\n        ax.legendlabels = [kwargs.get(\"label\", None)]\r\n    else:\r\n        ax.legendlabels.append(kwargs.get(\"label\", None))\r\n\r\n# error: Argument 1 to \"FixedLocator\" has incompatible type \"ndarray[Any, Any]\"; expected \"Sequence[float]\"  [arg-type]\r\nFixedLocator(ax.get_xticks()) \r\n\r\n# same also for set_ylabel, maybe use a protocol for str-coercible types instead of requiring str\r\ndef test(ax: Axes, label: Hashable): # Hashable might be too wide, but str seems to strict\r\n    ax.set_xlabel(label)\r\n\r\ndef test(ax: Axes):\r\n    axes = np.array([ax])\r\n    # error: Argument 1 to \"set_ticks_props\" has incompatible type \"ndarray[Any, dtype[Any]]\"; expected \"Axes | Sequence[Axes]\"  [arg-type]\r\n    set_ticks_props(axes, **kwargs)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nthe above type errors\r\n\r\n### Expected outcome\r\n\r\nFewer errors, but still some errors - some of the pandas code is definitely to be blamed!\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\n_No response_\r\n\r\n### Matplotlib Version\r\n\r\n3.8\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nNone","comments":["```\r\n# same also for set_ylabel, maybe use a protocol for str-coercible types instead of requiring str\r\ndef test(ax: Axis, label: Hashable): # Hashable might be too wide, but str seems to strict\r\n    ax.set_xlabel(label)\r\n\r\ndef test(ax: Axis):\r\n    axes = np.array([ax])\r\n    # error: Argument 1 to \"set_ticks_props\" has incompatible type \"ndarray[Any, dtype[Any]]\"; expected \"Axes | Sequence[Axes]\"  [arg-type]\r\n    set_ticks_props(axes, **kwargs)\r\n```\r\n\r\nThese should be `Axes` not `Axis` ?","Thank you - that might be my copy&past mistakes. The main point is that it doesn't work with an np.ndarray that contains the appropriate type.\r\n\r\n(Sorry, not familiar with matplotlib and how pandas uses matplotlib)\r\n\r\nedit: updated the examples","```\r\ndef test(cellText: np.ndarray):\r\n    # error: Argument \"cellText\" to \"table\" has incompatible type \"ndarray[Any, Any]\"; expected \"Sequence[Sequence[str]] | None\"  [arg-type]\r\n    # maybe use a Protocol such as Iterable?\r\n    matplotlib.table.table(ax, cellText=cellText **kwargs)\r\n```\r\nThis is documented as `str` all the way down to the `Text` object, where `set_text` will apply `str` on whatever comes in. So this can be changed, both in the documentation and in the typing stubs.\r\n\r\nI'd suspect the same thing holds for `set_*label`. \r\n\r\nThe natural thing is to provide `str` here, but, as you point out, anything coercible to a `str` can be used. Which then is everything, so `Any` is correct, but still maybe not what we would like to encourage...","- `set_ha` is a dynamically generated alias of `set_horizontalalignment`, so type-checked code should probably use the statically defined canonical version. (Without effectively undoing the reasons for having the dynamic alias helpers, we _can't_ type hint aliases appropriately)\r\n\r\n- `np.ndarray` not being compatible with `Sequence[Sequence[...]]`, maybe we can add an overload or something, but the key to when the latter is used is that ragged data structures are allowed, so `ArrayLike` and other nd-array type hints are insufficient themselves. Not 100% clear how to square that circle here.\r\n\r\n- `ax.freq` is _not_ an attribute that is present on `Axes` or `Axis` objects by default, I don't see anywhere in the matplotlib codebase where that is added, I think that one is correct to flag as a type checker. Pandas is adding a dynamic attribute, here, I think. (same with `legendlabels`, actually)\r\n\r\n- FixedLocator, is partially that we do not specify the dtype on return of `get_xticks`, which we probably can do, but also `np.NDArray[np.float64]`, still doesn't fully qualify as a `Sequence`, I guess, so similar to the `Sequence[Sequence[...]]` ones, may need to overload\/union type (which is not ideal for maintainability) or figure out if there is a way to enforce that NDArray is a sequence (I think zero-D arrays are what throws that for a bit of a loop)... I thought NDArray met the definition of Sequence when I was writing the type hints initially, though, so I'm slightly confused by this.\r\n\r\n- Labels, I think the actual \"proper\" type hint might be:\r\n\r\n```python\r\nclass SupportsStr(Protocol):\r\n   def __str__(self) -> str: ...\r\n```\r\n\r\n(the stdlib typing module provides similar protocols for `int`, `float`, etc, but not actually `str`, probably because `object` implements `__str__`)\r\n\r\nWhich effectively reduces to `Any` (aside from things that actively remove `__str__`, since `object` defines `__str__`)\r\n\r\nI will note that in the case of `set_xlabel`, the docstring actually does declare the officially supported type as `str`, though (as does `Axis.set_label_text`), though it is eventually handed to `Text.set_text` which is actually type hinted as `Any`\/docstring defined as `object`. So I was following the docstring here, but there is a reasonable argument that those could be expanded.\r\n\r\n- The last one is just yet another instance of \"NDArray doesn't qualify as Sequence\", though with a mixin of numpy\/numpy#24738 on top of that... but yeah, from a typing perspective the contents of the sequence is important to that method, so not sure we _should_ just accept `NDArray[Any]`... at which point, not sure we can type hint `NDArray` at all at present...","`ndarray` seems to not qualify under `Sequence` because it does not implement `index` or `count`, which are methods defined for `Sequence`, but when used as a parent class are implemented for you.\r\n\r\nThere does not seem to be another good ABC to use between `Collection` (which doesn't define `__getitem__`) and `Sequence` (which requires `index`\/`count`)\r\n\r\nI know numpy is trying to _reduce_ the number of methods rather than increase it, but perhaps there is a compelling case to be made for these... though not fully sure `index` at least can be made sensibly such that type checkers will agree that it is implemented according to `Sequence` (though at least at runtime, no actual annotations are reported for `Sequence` methods, so who knows?)","@twoertwein Can you help me to run the type checks against pandas locally?\r\n\r\nI had tried quite a bit earlier in the process running against `pandas-stubs` and it did not flag anything from mpl, so I moved on (and therefore didn't give you all as much of a warning as I did to some other projects where I _did_ find things flagged, so sorry to have missed it, I just got a little hopeful that things just ended up working out even better than I thought)\r\n\r\nEven now, if I do `mypy pandas-stubs` from that repo (with mpl git version), I don't see anything, and if I do `mypy pandas` from the main repo (with stubs installed) I see a lot of unrelated errors, mostly for `Need type annotation`, though I do additionally see some things related to `Axes`, though they all seem like legitimate flags for a static type checker (mostly that dynamic attributes seem to be added to them, like the examples regarding `freq` above.\r\n\r\nI also tried `mypy -m pandas` to see if that changed anything, and didn't get any flags?\r\n\r\nEdit: after writing this, I noticed the `tests` folder in the pandas-stubs repo, but even running those gave nothing related to mpl (some failures due to lack of optional dependenciees and some `np.bool_` vs `bool` builtin errors)\r\n\r\nDouble edit: I think I got there, turns out `git pull` helps reduce the unrelated things. (I had pulled on stubs but not the main repo...) I guess I'm still a bit surprised that mypy doesn't flag anything when run on the stubs.","> @twoertwein Can you help me to run the type checks against pandas locally?\r\n\r\nThe pandas mypy\/pyright checks do not use pandas-stubs. It is best to follow the instructions [here](https:\/\/pandas.pydata.org\/docs\/dev\/development\/contributing_environment.html) to set the development environment up. After that you can simply call mypy.\r\n\r\nThank you for spending much time on [this summary](https:\/\/github.com\/pandas-dev\/pandas\/pull\/55210#issuecomment-1730523654). Sorry, I didn't intend to consume your time by debugging the issues over at pandas - I'm happy to cc you for targeted questions though :)\r\n\r\nedit: also feel free to ping me if you like me to test the impact of important\/big matplotlib type changes on internal pandas code.","Thank you very much for the quick and active response! I will work on pandas PRs to get the internal pandas code (more) compliant with the matplotlib annotations (might take a bit).\r\n\r\nSorry, I'm not sure how actionable this issue is on the matplotlib side (obviously many todos on the pandas side). Feel free to close it.","About ndarray and Sequence: Sequence is a concrete class, not a protocol. Unless ndarray inherits from it, it will never match it.","I mean, Sequence is very much an Abstract class, but you are correct that it does require inheritance to be considered (well, runtime you can `register` it... and in fact `list`\/`tuple`\/etc do _not_ actually inherit from it, though they count for mypy purposes... I had been thinking that mypy had special handling that effectively treated it as a protocol, even though I knew it wasn't actually one at runtime, but I was in fact mistaken)","> I mean, Sequence is very much an Abstract class, but you are correct that it does require inheritance to be considered...\r\n\r\nI recall some discussions about changing this way back in the past, though nothing has come for it. If you do really want to express `ndarray` as a sequence you could consider using a slightly different definition: that of the sequence protocol as defined by the Python C API: https:\/\/docs.python.org\/3\/c-api\/sequence.html#c.PySequence_Check. Not sure to what extent this would be practically useable in matplotlib, but this should take care of the whole \"ndarray is not an `abc.Sequence` member\"-problem.\r\n``` python\r\nfrom typing import Protocol, TypeVar\r\n\r\n_T_co = TypeVar(\"_T_co\", covariant=True)\r\n\r\nclass _PySequence(Protocol[_T_co]):\r\n    def __len__(self) -> int: ...\r\n    def __getitem__(self, __key: int) -> _T_co: ...\r\n```","There is also a Sequence-like protocol that disallows strings https:\/\/github.com\/hauntsaninja\/useful_types\/pull\/14 It could probably be adjusted to also fit ndarray.\r\n\r\n(Pandas has the same issue: Index and Series are incompatible with Sequence.) "],"labels":["topic: typing"]},{"title":"[MNT]: Cleanup Timer inheritance scheme","body":"### Summary\n\nCurrently, subclasses inheriting from TimerBase need to override a number of private methods (at least _timer_start() and _timer_stop(), as well as optionally a few others).  It would be better (e.g. for documentation purposes, as argued elsewhere) if only public methods needed to be overridden.\r\n\r\nAt a first glance this should be fairly doable, by directly overriding start() and stop() instead (possibly getting rid of the interval kwarg to start(), which we never use and can be replaced by `timer = Timer(interval=...)` or `timer.interval = ...` before starting anyways) and reading the values off timer.interval and timer.single_shot directly.  Of course, the change would need to go through deprecate_method_override, yada yada.\n\n### Proposed fix\n\n_No response_","comments":["Sounds ok and doable. I think it's a low priority, so I wouldn't start it myself, but if you want to make a PR, go for it.","Hi\r\n\r\nI'd like to make a PR for this issue\r\n"],"labels":["Maintenance"]},{"title":"[ENH] xkcd.mplstyle w\/ quasi parsing of patheffects.{functions}","body":"## PR summary\r\n\r\nCloses #5992 by parsing patheffects, is an alternative to #14943 and also builds on some of the ideas there and in #26050. \r\n\r\n* commit 1: all the changes to path.effects\r\n* <strike>commit 2: swap xkcd script for humor sans <\/strike>#27299 \r\n* commit 2: xkcd style sheet related changes + what's new\r\n* commit 3: discouraged admonition\r\n\r\n@anntzer pointed out that input needs to be a list b\/c the same patheffects function can be called multiple times and yield different results, so in this implementation `path.effects` can be set to:\r\n\r\n* list of function: `[patheffects.Normal(), patheffects.withStroke(linewidth=4)]`\r\n* list of tuples specifying functions: `[('Normal', ), ('withStroke', {'linewidth':4})]`\r\n* list of functions + tuples: `[patheffects.Normal(),  ('withStroke', {'linewidth':4})]`\r\n* string list of tuples `('Normal', ), ('withStroke', {'linewidth':4})`\r\n\r\n\r\n<strike>I'm gonna defer writing a what's new and all the rest until there's some discussion\/consensus on if this is a feasible approach. This PR introduces an `xkcd.mplstyle` and shims it into `xkcd.plot` b\/c  that was the motivation for this PR, but I can also spin the xkcd stuff out into a separate PR\/commit once decisions are more settled. <\/strike>\r\n\r\nFor the arguments\/keywords I went with a very generous \"is this an ast_literal parsable dictionary\" - advantage is it's a lot cleaner than the [patheffects mini parser I started writing](https:\/\/gist.github.com\/story645\/d438d3bb6a448b16a990d5f54ee38f48), disadvantage is that it's <strike>not gonna error out til draw time<\/strike> using the function to do the validation. \r\n\r\n<strike>Definitely not the most optimal\/optimized implementation, but this PR sketches out using a function name : dictionary approach, e.g:\r\n```css\r\npath.effects.withStroke : {'linewidth':4, 'foreground': 'w'}\r\n```\r\nThe advantage of this approach is that we can heavily restrict which patheffects to support and let rc_setup handle that validation, disadvantage is slighlty more typing. <\/strike>\r\n\r\n<strike>changed some of the path.sketch docs to clarify their format cause misreading them was what caused a lot of the rest of my test failures.<\/strike> spun out #26921 so that may need to go in first\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n\r\n","comments":["doc build failure mystifies me cause builds locally ","And it's an important doc build since it's the style example and unicode_minus keyword :\/","Note to self:\r\n- [x] add a figures equal test that plt.xkcd and with style(xkcd) produce the same figure.\r\n- [x] change `name` to  `__name__` or `patheffect` or  use list `[(name, kwarg dict), (name, kwarg dict)]`","A concern with using `{'name': 'func_name, **func_kwargs}` as the structure there is a collision between keys that the API here controls (`'name'`) and the keys that belong to the function that is going to be selected.   While it is true none of the functions currently in `patheffects` have a keyword named 'name', but it seems unwise to leave that resolvable conflict \/ special case on the table.  Picking another name might reduce the risk of a collision, but using `Tuple[str, dict]` seems like the safest way to encode this and drops the need for a bunch of text + magic key in the input.\r\n\r\n\r\nhttps:\/\/www.youtube.com\/watch?v=iKzOBWOHGFE has a good section on inband vs out-of-band encoding of information.","> but using Tuple[str, dict] seems like the safest way to encode this and drops the need for a bunch of text + magic key in the input.\r\n\r\nTechnically with this format I can do Tuple[str, list, dict] for `(name, args, kwargs)` but I dunno if that saves anyone work.","> Technically with this format I can do Tuple[str, list, dict] for `(name, args, kwargs)` but I dunno if that saves anyone work.\r\n\r\nIf you want `Tuple[str, list, dict]`, it should likely be `Tuple[str, dict] | Tuple[str, list, dict]`, because I anticipate that the first case is the fare more common one, and empty args `'withStroke', (), {'linewidth': 4}` is somewhat annoying.\r\n\r\nBut I suggest to keep it simple and only support kwargs. One could always add the other option later.","It'd be really helpful if #26989 could get in b\/c that would help me debug the unicode minus glyph not working error","Theories? \r\n- xkcd plot works (uses style sheet underneath): https:\/\/output.circle-artifacts.com\/output\/job\/b8c403ad-c65e-432b-a235-c17285d46d2c\/artifacts\/0\/doc\/build\/html\/gallery\/showcase\/xkcd.html#sphx-glr-gallery-showcase-xkcd-py\r\n- xkcd in style sheet reference doesn't: https:\/\/output.circle-artifacts.com\/output\/job\/b8c403ad-c65e-432b-a235-c17285d46d2c\/artifacts\/0\/doc\/build\/html\/gallery\/style_sheets\/style_sheets_reference.html#sphx-glr-gallery-style-sheets-style-sheets-reference-py\r\nCould it be a not properly isolating settings thing? It builds fine locally. ","> Theories?\r\n> \r\n>     * xkcd plot works (uses style sheet underneath): https:\/\/output.circle-artifacts.com\/output\/job\/b8c403ad-c65e-432b-a235-c17285d46d2c\/artifacts\/0\/doc\/build\/html\/gallery\/showcase\/xkcd.html#sphx-glr-gallery-showcase-xkcd-py\r\n> \r\n>     * xkcd in style sheet reference doesn't: https:\/\/output.circle-artifacts.com\/output\/job\/b8c403ad-c65e-432b-a235-c17285d46d2c\/artifacts\/0\/doc\/build\/html\/gallery\/style_sheets\/style_sheets_reference.html#sphx-glr-gallery-style-sheets-style-sheets-reference-py\r\n>       Could it be a not properly isolating settings thing? It builds fine locally.\r\n\r\nNot entirely clear to me that the issue has anything to do with xkcd. You are referring to the `plt.style.use('ggplot')` call failing, right?\r\n\r\n","> You are referring to the plt.style.use('ggplot') call failing, right?\r\n\r\nI don't think that calls is failing, but I think I'm gonna maybe rework the example so it's easier to diagnose which one is.","builds using https:\/\/github.com\/dummy-index\/xkcd-font\/raw\/brushup\/xkcd-script\/font\/xkcd-script.ttf so do I need to verify that it's okay to use? liscence is cc and using this file b\/c it has an extended character set","Also, we may want to ask if we can vendor that file since it's on an unmerged branch of an unmaintained fork if we're gonna use it in doc builds? ETA: or fork that fork or the original project and add that fork? ","And do we wanna deprecate `plt.xkcd` if this goes in? shadowed all the existing xkcd tests so continuity is maintained. ","Can you please put the `Humor Sans` work in its own PR so we can get that merged and backported ASAP?","#27299","follow up from call is to make a note in xkcd docs about plt.style as alt ","notes:\r\nfix doc build - is probably xkcd-font missing symbol\r\nsupport third party using fully qualified name"],"labels":["New feature","topic: rcparams","topic: path handling","status: needs rebase","topic: styles"]},{"title":"Improve RectangleSelector Rotation revisited and rebased","body":"## PR summary\r\nThis PR rebases the changes from #21945 onto (post-3.8.0) `main`. Since the merge conflicts after almost 2 years became prohibitive, I have applied the original modifications to a fresh PR. Almost all actual code changes are taken from @dstansby's original PR; from its summary:\r\n\r\n> This modifies RectangleSelector and EllipseSelector to be drawn in display coordinates instead of display coordinates. This has a number of advantages:\r\n\r\n> Allows the rectangle to be rotated past the previous +\/- 45 degrees limit\r\nFixes scaling the rectangle when it is rotated (to demonstrate, create a selector with rotation and try scaling before and then with this PR).\r\nRemoves the need for _aspect_ratio_correction.\r\nImproves performance, because the event handling and artist drawing is all done in figure coordinates, removing transformations to data coordinates and back.\r\nCode to test:\r\n\r\n```pycon\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.widgets import RectangleSelector\r\n\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot()\r\n\r\nselector = RectangleSelector(ax, lambda *args: None, interactive=True)\r\nselector.extents = (0.4, 0.7, 0.3, 0.4)\r\nselector.add_state('rotate')\r\n\r\nplt.show()\r\n```\r\nThis implementation preserves shapes in display coordinates as discussed in https:\/\/github.com\/matplotlib\/matplotlib\/pull\/21945#issuecomment-1165410652\r\nRenamed a property `_geometry_state` in response to https:\/\/github.com\/matplotlib\/matplotlib\/pull\/21945#discussion_r785292476\r\n\r\nLast (new) commit to fix `MatplotlibDeprecationWarning: Setting data with a non sequence...` raised by calling `self._center_handle.set_data(*self.center)` on a single coordinate array.\r\nThe workaround does not feel very pretty; might discuss whether `self.center` should instead return a tuple `(np.array[xc], np.array[yc])` in https:\/\/github.com\/matplotlib\/matplotlib\/blob\/2c9919cb3a672adf55eead2c09f61cf4733784e2\/lib\/matplotlib\/widgets.py#L3696\r\nbut this would in turn break tests like `assert_allclose(tool.center, (50, 65))`.\r\n\r\nCloses #21937\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["Tests were failed due to (now yanked) setuptools-scm v8.0.0, restarting tests","Thanks! I ran into the same issue managing to fetch 8.0.0 in the single hour it was online at condaforge... \ud83d\ude2c","@dhomeier this looks almost good to go, are you planning on coming back to this?"],"labels":["topic: widgets\/UI"]},{"title":"[Bug]: Curves goes to infinity with limited points","body":"### Bug summary\r\n\r\nI'm trying to plot a closed curve made of linear and quadratic bezier using ``Path`` and ``PathPatch``. But somehow it goes to infinity as shown in the images\r\n\r\nCan anyone verify if this error is reproductible?\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nfrom matplotlib import pyplot as plt\r\nfrom matplotlib.path import Path\r\nfrom matplotlib.patches import PathPatch\r\n\r\npoints = [[0,2],[-4,2],[-4,-2],[0,-2],[2,-2],[2,0],[2,2],[0,2]]\r\ncodes = [1,2,2,2,3,3,3,79]\r\n\r\nfig, ax = plt.subplots()\r\nax.grid()\r\n\r\npath = Path(points, codes)\r\npatch = PathPatch(path, color=\"lime\", alpha=0.25)\r\nax.add_patch(patch)\r\n\r\npath = Path(points, codes)\r\npatch = PathPatch(path, edgecolor=\"red\", facecolor=\"none\", lw=2)\r\nax.add_patch(patch)\r\n\r\nplt.xlim(-8, 8)\r\nplt.ylim(-8, 8)\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n[Image without zoom](https:\/\/ibb.co\/BPLKnL9)\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10599679\/a8105ea8-9d15-466c-8cf2-2102e1a2f948)\r\n\r\n\r\n[Image with zoom](https:\/\/ibb.co\/NTxPHw6)\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10599679\/babefcda-3a1e-47a1-910e-72103d28df80)\r\n\r\n\r\n\r\n### Expected outcome\r\n\r\nIt's suposed to get the following image, or a section of this image without exploding\r\n\r\n[Perfect image](https:\/\/ibb.co\/xqwSfSf)\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10599679\/f8a01962-8d13-4889-ab41-8dd9d57dd9a3)\r\n\r\n\r\n### Additional information\r\n\r\nBy inserting the point ``(0, 2)`` and the code ``3`` at the end, it solves globally the issue, but the red curve still explodes to infinity when a specific zoom in applied, as shown in the image.\r\n\r\n```python\r\npoints = [[0,2],[-4,2],[-4,-2],[0,-2],[2,-2],[2,0],[2,2],[0,2],[0,2]]\r\ncodes = [1,2,2,2,3,3,3,3,79]\r\n```\r\n\r\n[New zoomed image](https:\/\/ibb.co\/DGPf6s5)\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/10599679\/d87f06bc-5f92-4bf8-b141-578847869b0b)\r\n\r\n\r\n### Operating system\r\n\r\nWindows\r\n\r\n### Matplotlib Version\r\n\r\n3.8.0\r\n\r\n### Matplotlib Backend\r\n\r\nTkAgg\r\n\r\n### Python version\r\n\r\n3.10.11\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip","comments":["```python\r\npoints = [[0,2],[-4,2],[-4,-2],[0,-2],[2,-2],[2,0],[2,2],[0,2],[0,2]]\r\ncodes = [1,2,2,2,3,3,3,3,79]\r\n```\r\n\r\nYou can get the shape you want by adding one additional point, because the point associated with `CLOSE_POLY` is actually ignored\r\n\r\nI will also point out this statement from the [`Path` docs](https:\/\/matplotlib.org\/stable\/api\/path_api.html#matplotlib.path.Path.codes)\r\n\r\n>For codes that correspond to more than one vertex ([CURVE3](https:\/\/matplotlib.org\/stable\/api\/path_api.html#matplotlib.path.Path.CURVE3) and [CURVE4](https:\/\/matplotlib.org\/stable\/api\/path_api.html#matplotlib.path.Path.CURVE4)), that code will be repeated so that the length of [vertices](https:\/\/matplotlib.org\/stable\/api\/path_api.html#matplotlib.path.Path.vertices) and [codes](https:\/\/matplotlib.org\/stable\/api\/path_api.html#matplotlib.path.Path.codes) is always the same.\r\n\r\n`CURVE3` (3) expects two points per segment, your path has an odd number of points listed with `3`.","I added another point as indicated in docs, repeating the last one, but then I got the image in **Additional Information**. It's weird cause this shape only happens when I zoom in one part.","Huh, weird... I suspect there is some optimization that is clipping out points and clips too many for CURVE3? It looks like it only affects unfilled paths, though, so that is something to look for.\r\n\r\n\r\nI will note that in 3.8 we have made specifying colors with alphas easier, so you can do:\r\n\r\n```python\r\npath = Path(points, codes)\r\npatch = PathPatch(path, edgecolor=\"red\", facecolor=(\"lime\", 0.25), lw=2)\r\nax.add_patch(patch)\r\n```\r\n\r\nAnd then it doesn't seem to happen. (For backwards compatibility you can also pass `mpl.colors.to_rgba(\"lime\", alpha=0.25)` in for facecolor, but the tuple shorthand is a new feature)"," This only occurs when zooming in because clipping occurs on the figure bounding box. And history-wise, it appears to have been caused by #20363. I made that change because the code does claim to ignore curve points.\r\n\r\nHowever, it appears that it does not fully do so, in that the previous point is part of the definition of the curve, but that point may be clipped since it isn't a CURVE[34]. This causes the curve to route back to whatever the previous unclipped point was.\r\n\r\nHandling all these special cases is one of the reasons why #2708 has been a long-term open issue."],"labels":["backend: agg","topic: path handling"]},{"title":"[ENH]: Rename Bbox.from_extents \/ Bbox.extents to \"corners\"","body":"### Problem\n\nI always find it difficult when working on internals to remember which of Bbox.extents and Bbox.bounds is (x0, y0), (x1, y1) and which is x0, y0, w, h (perhaps there's a clear mnemonic as to why one should be called extents and one should be called bounds, but I never found it :\/)\r\nA possible improvement would be to rename extents ((x0, y0), (x1, y1)) to \"corners\", as that seems to be a more transparent name (at least to me...); I can't think of a less ambiguous name for bounds, but if we slowly get rid of \"extents\" in the codebase, bounds will just remain as \"the one that's not \"corners\"\".\r\n(We can also debate whether that's an opportunity to have `Bbox.corners` return the structured `((x0, y0), (x1, y1))` whereas `Bbox.extents` currently returns the unstructured `(x0, y0, x1, y1)`, but that's a secondary question.)\r\n\r\nNote that unlike #22515 this doesn't really address the confusion that exists at the level of user-facing APIs; this issue is mostly about what we use internally.\n\n### Proposed solution\n\n_No response_","comments":["Note that we already have https:\/\/matplotlib.org\/stable\/api\/transformations.html#matplotlib.transforms.BboxBase.corners\r\n\r\nwhich is different from your suggestion \ud83d\ude22.","Another name for extents could be `diag` (or `diagonal` if we want to be verbose).\r\nWe could also consider deprecating the old `corners`, which seems to be used nowhere externally (and once internally in `rotated`, but `corners` can easily be inlined there).","Looking at the existing API (see code below) I note that\r\n\r\n- your \"corners\" suggestion is essentially the canonical constructor + `get_points()`\r\n- *extents* is `bb.get_points().ravel()` - Maybe we don't need *extents* at all but can get away with the points?\r\n- *bounds* is barely understandable. To me, *width* and *height* should be named *extents*. A better name signature would be `Bbox.from_point_and_extents(p0, width, height)` (+\/- putting width, height into one tuple, but I'm tempted not to, First, because the `Rectangle` signature has them separate as well. Second, because this would be two tuples again, which is easier to mix up with the points (p0, p1).\r\n- There's a hodgepodge of accessors: properties, function with get, function without get. This could be an opportunity to clean things up.\r\n\r\n\r\n```\r\n>>> p0 = (x0, y0) = -2, -1\r\n>>> p1 = (x1, y1) = 2, 1\r\n\r\n>>> bb = Bbox([p0, p1])\r\n\r\n>>> bb.get_points()\r\narray([[-2.,  -1.],\r\n       [ 2.,  1.]])\r\n\r\n>>> bb.extents\r\narray([-2., -1.,  2.,  1.])\r\n\r\n>>> bb.corners()\r\narray([[-2., -1.],\r\n       [-2.,  1.],\r\n       [ 2., -1.],\r\n       [ 2.,  1.]])\r\n\r\n>>> bb.bounds\r\n(-2.0, -1.0, 4.0, 2.0)\r\n```\r\n\r\n---\r\nI think the minimal reasonable API would be:\r\n```\r\n# creation\r\nBbox([p0, p1])\r\nBbox.from_point_and_extents(p0, width, height)\r\n\r\n# retieval\r\nbb.points\r\nbb.point_and_extents\r\n```\r\n\r\n\r\n","In https:\/\/github.com\/matplotlib\/matplotlib\/issues\/22515#issuecomment-1046577171 you also proposed to keep p0 as a single tuple but to split width, height (in a similar situation as here).  To be honest I'm not really convinced that this is a real improvement (for me (w, h) is very natural as a pair), but I'm willing to consider the option.","I will note that the `BboxBase.corners` method is not actually called when running tests (looking over coverage in case we need additional things for GHC today)\r\n\r\n(Which may be an argument in favor of deprecating)","I'm new to the group, just kicked off my first bug \/ pr yesterday #27152, and @anntzer referred me here as a related issue.  Apologies if I'd adding comments in the wrong place.\r\n\r\nI'd like to argue in favor of keeping functionality in `Bbox`.  I've found it to be a really useful, low overhead, utility class that I use outside of matplotlib.  It's saved me from having to roll my own code on multiple occasions:  all the variations I might need are right there.  \r\n\r\nHere are a couple of specific reasons I'm enamored with `Bbox.corners`\r\n\r\n1 When I need to create a gdal (osgeo) linestring, `Bbox.corners` keeps that code very clear.\r\n2 Orientation of polygons is useful when dealing with complex polygons because it provides a convention for how to treat holes.  For me, `Bbox.corners` would be clearer in this regard than, say, `Bbox.get_points`  \r\n\r\nFWIW, it was the perception of an orientation issue that led me to #27152.  I was working with two coordinate systems, one that was row, column based and the other that was cartesian.  `Bbox.corners` probably wouldn't have helped, but I imagine that there are places where it might be useful as a sanity check."],"labels":["New feature","API: consistency","API: changes","topic: transforms and scales"]},{"title":"[Doc]: `.set_linestyle()` tuple method is unclear","body":"### Documentation Link\n\nhttps:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.patches.Patch.html#matplotlib.patches.Patch.set_linestyle\n\n### Problem\n\nI looked up a method for setting plot's `spine` line style to a custom dash and my lazy eye caught what I highlighted in yellow:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/8880777\/d3125266-7d66-4da4-93b9-fa8d43b7c830)\r\n\r\nI tried this and naturally I got an error:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/8880777\/765ef940-963d-4c54-a45f-3733cea403f0)\r\n\r\nOnly after googling some example and reading the doc very carefully I noticed the correct way to change the line style:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/8880777\/43aee630-b3af-4202-9ebf-e669c5c08b99)\r\n\n\n### Suggested improvement\n\nI think the `doc` should be re-written so it's more explicit:\r\n\r\n\r\nAlternatively a dash tuple of the following form can be provided:\r\n```\r\n(offset, (off_ink, on_ink))\r\n```\r\nWhere:\r\n* `offset`: definition\r\n* `on_ink`\/`off_ink`: definition","comments":["Also, the `line` object has a method `set_dashes()` and I wonder if it's a viable option to add a similar method to the `spine` object.\r\n\r\nhttps:\/\/matplotlib.org\/stable\/gallery\/lines_bars_and_markers\/line_demo_dash_control.html","`(offset, (on_ink, off_ink))`\r\n\r\nI think this would not be quite right as it seems to imply only a length 2 on-off pattern, whereas any even number should work.  The [linestyles example](https:\/\/matplotlib.org\/stable\/gallery\/lines_bars_and_markers\/linestyles.html#sphx-glr-gallery-lines-bars-and-markers-linestyles-py) explains things pretty well, so possibly a good way to improve here is to just link the example from the docstring?","There is a PR which deals with most of these things that hopefully will be merged for 3.9: https:\/\/github.com\/matplotlib\/matplotlib\/pull\/23056\r\n\r\n(The discussions are really about what `get_linestyle` and `get_dashes` should return, as that is currently inconsistent between classes and unifying it will probably break some code somewhere.)\r\n\r\nFor the original issue: yes, it is maybe unclear, but correct. Probably it can be clarified a bit further in the PR above, but it does link to the example @rcomer pointed out.\r\n\r\nAn additional challenge here is that `set_dashes` only takes the `on-off-seq`-part so it is not possible to change `offset` later. ","> `(offset, (on_ink, off_ink))`\r\n> \r\n> I think this would not be quite right as it seems to imply only a length 2 on-off pattern, whereas any even number should work. The [linestyles example](https:\/\/matplotlib.org\/stable\/gallery\/lines_bars_and_markers\/linestyles.html#sphx-glr-gallery-lines-bars-and-markers-linestyles-py) explains things pretty well, so possibly a good way to improve here is to just link the example from the docstring?\r\n\r\nI haven't seen this page before. Thanks for sharing. And yes, I think having this page linked in the doc would help as well."],"labels":["Documentation"]},{"title":"Surprising behaviour from `plt.style.use('theme')`, `themes` being not exclusive","body":"Thank you for your work on this cornerstone lib.\r\n\r\n\r\n### Bug summary\r\n\r\nNot a bug, since documented, but still a surprising behavior from `plt.style.use('theme')` not resetting values to the default before applying the new ones. Apologies if an issue already exist, didn't find one.\r\n\r\n> This updates the [rcParams](https:\/\/matplotlib.org\/stable\/api\/matplotlib_configuration_api.html#matplotlib.rcParams) with the settings from the style. [rcParams](https:\/\/matplotlib.org\/stable\/api\/matplotlib_configuration_api.html#matplotlib.rcParams) not defined in the style are kept.\r\n\r\nThis is especially an issue when using `jupyter notebook` for example, where one's would cycle through themes before sticking to one they think look good, while it's a mix of multiple themes and dependent of the order in which they've tried it!\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nplt.style.use(\"seaborn-v0_8-dark\")\r\nplt.style.use(\"dark_background\")\r\n# ...\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nMix of both styles.\r\n\r\n### Expected outcome\r\n\r\nequivalent to \r\n```\r\nplt.style.use(\"dark_background\")\r\n# ...\r\n```\r\n\r\n### Additional information\r\n\r\nFrom what I've seen [plotting appearance](https:\/\/matplotlib.org\/devdocs\/devel\/color_changes.html) falls under breaking change, but I don't know how strict this is enforced. I'd expect people willingly setting multiple themes at the same time to get a custom style chimera to be quite small.","comments":["@kraktus I think that is one of the reasons we have a theme context manager:  \r\n\r\n```\r\nwith plt.style.use('seaborn-v0_8-dark'): \r\n   plot() # seaborn theme\r\n\r\nplot() # old theme \r\n\r\n```\r\n\r\nPeople want to compose themes quite often (apply some of one theme, some of another) so, back compatibility aside, I expect it is unlikely that we will revert to default every time `style.use` is called. ","### We are good\r\n\r\nThe behavior is documented correctly: https:\/\/matplotlib.org\/stable\/api\/style_api.html#matplotlib.style.use\r\n\r\n### Can we be better?\r\n\r\nThe default will not change, but possible extensions are:\r\n\r\n- adding a parameter to start from default or\r\n- allow styles to specify whether they are incremental to the current state or whether they are based on default (or another style). This is likely better than the parameter because whether a style is incremental or not is basically a static design decision of that style. It should be rare that one wants the same style config incremental in one case and absolute in another.\r\n\r\n","When we brought is styles the ability to compose them like this was one of the explicit design goals.  If a style wants to be against the default, then it should copy more of the default values into itself.\r\n\r\nThis is something that the chainmap work @chahak13 has going may help with. Currently we can only say \"go back to default\" and no way to say \"please undue the last style application\" (short of the context manager)."],"labels":["topic: styles"]},{"title":"[MNT]: Numpy 2.0 support strategy","body":"### Summary\r\n\r\nNumpy will release version 2.0 around end of December 2023 with substantial API clearnup: https:\/\/github.com\/numpy\/numpy\/issues\/24300\r\n\r\nThere are already some releated PRs:\r\n#26762, #26756, #26706, #26687, #26664, #26566\r\n\r\nThis ticket should serve two purposes:\r\n\r\n1. Define the migration strategy\r\n   https:\/\/github.com\/numpy\/numpy\/issues\/24300#issue-1828940995 has \"Key guidance for users and downstream package authors\"\r\n   Are we heavy users that we have to pin <2 for now and fix everything once they have their RC out? Or could we fix everything already now (ideally still for 3.8.0)? Note that the pinning is also only a bandaid and package managers may choose to resolve to numpy=2 and matplotlib=3.7.x (which is still unpinned).\r\n2. Track the progress and open steps\r\n\r\n","comments":["Yeah, unfortunately even we were a bit late on the \"pin to <2\" train, though not sure there was anything that could have been done to prevent having _some_ version that was not pinned and thus purported to be compatible when it isn't. We did end up pinning for 3.7.3 and 3.8.0, though <=3.7.2 is unpinned.\r\n\r\nFor us, I think the biggest things left to change are that they are willing\/expecting ABI to break, and thus wheels made with np<2 will not work with np==2. (though my understanding is wheels made with np==2 _will_ work with np<2)\r\n\r\nThese changes have not happened yet, though some precursors have, which on original implementation broke mpl, but were reworked such that they didn't with relative ease. (See numpy\/numpy#24634)\r\n\r\nI _think_ the changes to the python API are largely taken care of now, though there may be a few that come in later. There was an ambitious initial proposal that would have had a lot more requiring change, but that got pared down significantly. And I suspect our usage of the C API will not be too affected either, other than requiring re-compiling (though I have some reserves about pybind11 requiring changes, which may slow it down from _just_ \"recompile\").\r\n\r\nWhile continuing to monitor and watch for things that break us, I think the biggest thing is to be ready to do a patch release compiled with np 2.0 (possibly their RC, to allow for timing\/etc) in coordination with the numpy release, such that users have a wheel to install that works immediately.\r\n\r\nThe advise I got was to not pin on main, but pin on release branches.\r\n\r\nLuckily(?) we are _used_ in numpy CI, so there is a reasonable chance that at least at the point where the first actual breakage happens, we are likely to know at the PR stage. (Though they may end up having to install compiled against their own numpy for CI at that point, though we will still find out if recompiling is not enough, I guess.)\r\n\r\nAlso see #26422, which I opened when the initial idea of much more significantly paring down the main np namespace was proposed, and found where we used all of the possibly removed functions. I closed this when all of the items seemed to be taken care of\/dropped from the list of removals, but it only originally covered the main namespace and then they moved on to the ndarray class namespace cleanups (which I think are _less_ broad than even the pared down main namespace cleanup, and I have not seen any list of further planned but not implemented changes there, though that doesn't mean they can't happen)","Thanks for the detailed answer. To sum up:\r\n- We need to sync a release with numpy=2 because we need to compile for it.\r\n- We have done what we can for now.\r\n- We are an in the loop for potential additional problems that need to be addressed on our side.","FWIW (it looks like someone had already done this but I didn't see it in the linked tickets), I ran the ruff tool as recommended by https:\/\/numpy.org\/devdocs\/numpy_2_0_migration_guide.html against the main branch and it came back clean. \r\n`ruff check path\/to\/code\/ --select NPY201`\r\n\r\nThe 2.0.0b1 release is out for testing as of March 11 and it looks like 2.0.0rc1 is [due any day now](https:\/\/github.com\/numpy\/numpy\/issues\/24300#issuecomment-1986815755).","We have been running tests against nightlies, and only recently started failing, see #27892 \r\n\r\nCurrently waiting on pybind11 to catch up (seberg has a PR in) which is causing at least a few of the failures... (mostly in tri- related things and contouring)  I suspect this is delaying the RC timeline to a degree...\r\n\r\nThere are more failures on CI than I see locally, but suspect that is due to inconsistent np2 support, so _hopefully_ will be worked out with little to no direct action over time."],"labels":["Maintenance"]},{"title":"Connect the Animation event source callback in the constructor.","body":"Currently, there is no \"official\" way of knowing whether a Figure hosts an Animation.  Yet, this information can be of interest e.g. for third-party backends.  For example, a variant of the ipython inline backend could choose to actually animate its (inline) output in that case; indeed, this feature was already supported by the itermplot backend. itermplot is actually now outdated but the general idea can still be made to work -- I have a working patch for mplterm.\r\n\r\nThe idea is for the backend to override FigureCanvas.new_timer (on the backend-specific canvas subclass) to internally register any timer that gets created (e.g. by the animation module), then, when the canvas is show()n, to first trigger a fake draw_event so that animation callbacks (if any) get attached to the timer, and then to introspect what callbacks have been attached to the timer and retrieve any Animation instance from that.\r\n\r\nWhile this all works, there is brittleness on a specific point, namely the need to trigger the fake draw_event (as the callback only gets attached in Animation._start) early in show(): at that point there may be no renderer available so one cannot construct a real DrawEvent (in fact, itermplot just sets renderer to None).  If there are additional (end-user-provided) draw_event handlers connected, they may well error out on this fake draw_event.\r\n\r\nYet, it is easy to work around this problem, by connecting the animation stepping callback immediately to the timer when the Animation is constructed, rather than waiting for the first draw.  The timer is still only *started* at the first draw, so nothing changes from the point of view of the end user.\r\n\r\nNote that this does not create a strong reference holding the Animation in the \"usual\" case (of backends that don't keep a reference to the timers they create) -- it's just a reference loop of the Animation holding the Timer holding an Animation method as a callback.  Furthermore, the callback could easily be replaced by a WeakMethod to completely get rid of the reference loop.\r\n\r\n(If we agree on the change here I can also add a test that explicitly checks for this early-binding.)\r\n\r\n-----\r\n\r\nEdit: Actually, a much simpler and more general issue with the \"trigger draw to see what gets connected to the timer\" is that that also starts the timer and therefore subsequent introspection becomes racy and may be too slow to catch the first frames.\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":[],"labels":["topic: animation"]},{"title":"[Bug]: get_backend() will get stuck if DISPLAY cannot be connected","body":"### Bug summary\r\n\r\n`matplotlib.get_backend()` will get stuck if `DISPLAY` cannot be connected. Maybe should consider adding a timeout here.\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/1b4b50b85b0a90061baf6137817b05574ad659ea\/src\/_c_internal_utils.c#L19-L37\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib\r\nmatplotlib.get_backend()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nget stuck\r\n\r\n### Expected outcome\r\n\r\nreturn `headless` if `DISPLAY` cannot be connected\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\n_No response_\r\n\r\n### Matplotlib Version\r\n\r\n3.7.3\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n3.11.3\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip","comments":["I can not reproduce this issue.  I tried setting DISPLAY to something invalid:\r\n\r\n```\r\n\u2714 14:51:59 [belanna] @ $DISPLAY='bob'\r\n~\r\n\u2714 14:52:04 [belanna] @ $DISPLAY\r\n'bob'\r\n~\r\n\u2714 14:52:05 [belanna] @ ipython\r\nPython 3.11.5 (main, Sep  2 2023, 14:16:33) [GCC 13.2.1 20230801]\r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 8.15.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: import matplotlib\r\n\r\nIn [2]: matplotlib.get_backend()\r\nOut[2]: 'agg'\r\n\r\nIn [3]:\r\n\r\n```\r\n\r\nand it came back immediately.","\u200c\u200c@tacaswell Please use the correct DISPLAY format, such as 172.1.1.1:0","It works correctly with non-existant local ports `:158`, but hangs for things with non-accessible ip addresses.\r\n\r\nIt does not look like `XOpenDisplay` has a way to set a timeout: https:\/\/www.x.org\/releases\/X11R7.5\/doc\/man\/man3\/XOpenDisplay.3.html\r\n\r\nAt least on my system the default timeout is over 2 minutes \r\n\r\n```\r\n\u2714 12:29:23 [belanna] @ ipython\r\nPython 3.11.5 (main, Sep  2 2023, 14:16:33) [GCC 13.2.1 20230801]\r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 8.15.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: import matplotlib as mpl\r\n\r\nIn [2]: %time mpl.get_backend()\r\nCPU times: user 127 ms, sys: 10.4 ms, total: 137 ms\r\nWall time: 2min 14s\r\nOut[2]: 'agg'\r\n\r\nIn [3]: import os\r\n\r\nIn [4]: os.environ['DISPLAY']\r\nOut[4]: '172.1.1.1:0'\r\n\r\nIn [5]:\r\n```\r\n\r\nI am not sure that there is anything that we can do here.","@tacaswell i can reproduce this issue\r\n1\u3001you can test with ubuntu desktop, such as Ubuntu 22.04.3 LTS\r\n2\u3001if you login with gui in ubuntu, and test **get_backend()**, it will return for example TkAgg immediately\r\n3\u3001then, you can use another computer with ssh to connect this ubuntu, and test with **get_backend()**, it will stuck without return","oh, i find that i use electerm ssh client with x11 enable, so when i login in ubuntu, it will set **DISPLAY** value, but x11 can't get real display, so the **get_backend** is stuck, i think my issue is related to **electerm**"],"labels":["status: needs clarification"]},{"title":"[Bug]: Colormap extend does not work with PolarAxes when using tricontourf","body":"### Bug summary\n\nCalling `tricontourf` from `PolarAxes` and adding in the kwarg `extend='both'` does not extend the colormap to cover patches outside of the colormap.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\nfig = plt.figure()\r\nax = fig.add_subplot(1,1,1, polar=True)\r\nax.tricontourf(angle, radius, data, extend='both')\n```\n\n\n### Actual outcome\n\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/118781146\/19231828-7b61-4c7d-b94e-6b06a044d8e0)\r\n\n\n### Expected outcome\n\nNo white patches in the plot, all replaced by the minimum color. \n\n### Additional information\n\n_No response_\n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.7.2\n\n### Matplotlib Backend\n\nQt5Agg\n\n### Python version\n\n3.11.3\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip","comments":["Please create an example we can run, preferably with a self-contained minimal data set, that shows the issue, otherwise it is hard to see what the problem might be.  ","The code below along with the data I have attached (a numpy array but saved in a zip so I can actually upload it) gives me the same issues described above: \r\n\r\n```\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\ndata = np.load('data.npy')\r\n\r\nfig = plt.figure()\r\nax = fig.add_subplot(1,1,1, polar=True)\r\nax.tricontourf(data[0], data[1], data[2], extend='both')\r\n```\r\n[data.zip](https:\/\/github.com\/matplotlib\/matplotlib\/files\/12592116\/data.zip)\r\n\r\nThank you!"],"labels":["status: needs clarification"]},{"title":"[ENH]: add an official sixel backend to matplotlib","body":"### Problem\n\nI often work over ssh on remote machines, either running scripts or doing interactive work in ipython. Currently, if I want to view a plot from matplotlib, my options are a) save to disk and view the file somehow, b) use the webagg backend, c) instead of ssh, use jupyter and view stuff over https. Up until now using sixels was not really an option in practice, because one would usually want to work a tmux or the like so a disconnect doesn't waste a lot of work. But since a few weeks ago tmux can also render sixels, which opens up the option for a workflow to make plots in ipython directly via sixels. This, at least for me certainly, would be _much_ better, than either webagg or jupyter. A lot of modern terminals support sixels, and I think its addition to tmux also signals that this is now become pretty standard.\r\n\r\nCurrently there are some unofficial backends, but the most recently updated one is two years old, the repo does not accept issues, but unfortunately, does not work properly (at least I couldn't get a high-res render from it): https:\/\/github.com\/jonathf\/matplotlib-sixel.\r\n\r\nJulia also supports sixels, so I think it's safe to say I'm not the only one who would like to work in a REPL with sixels support :)\r\n\r\ntldr; I think an official backend that would support sixels in ipython would be very useful for many people.\n\n### Proposed solution\n\nShip matplotlib with a sixel backend.","comments":["Agreed that a solution that doesn't involve jupyter is always good to have ;)\r\nFWIW I wrote https:\/\/github.com\/anntzer\/mplterm last year, and as of now it still seems to work for me (the protocol autodetector doesn't handle tmux yet, but that's easily fixable by adding it to the list in _detect_protocol, and you should be able to use `MPLTERM=proto=sixel` anyways).","There is a community plugin for Julia so far as I can tell.  https:\/\/juliapackages.com\/p\/sixelterm.  It has 38 stars, so I'm not sure it is in massive use.  Perhaps this would be better started as third party library - if it is heavily used we could consider first-classing it?  ","@jklymak I can certainly understand not wanting to support a feature that might not be too popular (although easy availability can make things popular :)). I'm also not sure how about the percentage of windows users of matplotlib, who still need to wait to get a properly working terminal (some work going on though: https:\/\/github.com\/microsoft\/terminal\/issues\/1173), until that it would certainly be slightly niche.","@anntzer Your library works outside of tmux, thanks! I'll open an issue about tmux at your repo.","Perhaps I'm missing a detail, but I typically use `ssh -X ...` and am then\r\nable to use interactive plotting that way. Is this for those without an\r\nX11-compatible terminal?\r\n\r\nOn Wed, Sep 13, 2023 at 2:06\u202fPM Bence Ferdinandy ***@***.***>\r\nwrote:\r\n\r\n> @anntzer <https:\/\/github.com\/anntzer> Your library works outside of tmux,\r\n> thanks! I'll open an issue about tmux at your repo.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26755#issuecomment-1718089179>,\r\n> or unsubscribe\r\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AACHF6G5Q7YEIDN7PXFVU6LX2HY3FANCNFSM6AAAAAA4VL4ED4>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n","@WeatherGod are you referring to `plt.show()` spawning a new GUI window and showing the plot in there? A sixel capable terminal can render the image _inside_ the terminal, so you get something like in a jupyter notebook, sans the interactive elements, so just a static image:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/6343487\/9619946b-9025-4d7c-8426-3d1b48b024eb)\r\n\r\n(I'm not sure what you mean by X11 compatibility though).\r\n","Yes, spawning a new GUI window is what I meant. I was completely unaware of\r\n\"sixel\" and this sort of terminal feature. It is very neat.\r\n\r\nAnd by X11 compatibility, I'm talking about how those GUI windows get\r\ncreated locally because of the ssh X11-tunneling. It is a feature that has\r\nbeen around for a very long time, and now I feel incredibly old...\r\n\r\nOn Wed, Sep 13, 2023 at 2:52\u202fPM Bence Ferdinandy ***@***.***>\r\nwrote:\r\n\r\n> @WeatherGod <https:\/\/github.com\/WeatherGod> are you referring to\r\n> plt.show() spawning a new GUI window and showing the plot in there? A\r\n> sixel capable terminal can render the image *inside* the terminal, so you\r\n> get something like in a jupyter notebook, sans the interactive elements, so\r\n> just a static image:\r\n>\r\n> [image: image]\r\n> <https:\/\/user-images.githubusercontent.com\/6343487\/267758939-9619946b-9025-4d7c-8426-3d1b48b024eb.png>\r\n>\r\n> (I'm not sure what you mean by X11 compatibility though).\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26755#issuecomment-1718150720>,\r\n> or unsubscribe\r\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AACHF6B7CFKJDTPY76WMU5DX2H6GRANCNFSM6AAAAAA4VL4ED4>\r\n> .\r\n> You are receiving this because you were mentioned.Message ID:\r\n> ***@***.***>\r\n>\r\n","\nOn Wed Sep 13, 2023 at 21:13, Benjamin Root wrote:\n> Yes, spawning a new GUI window is what I meant. I was completely unaware of\n> \"sixel\" and this sort of terminal feature. It is very neat.\n\nI'm a big fan, I really don't like poking my head out of my terminal just to occasionally look at an image ...  :)\n>\n> And by X11 compatibility, I'm talking about how those GUI windows get\n> created locally because of the ssh X11-tunneling.\n\nAh ok, I was confused, because I think that's just ssh, completely unrelated to the actual terminal emulator, right? Well, maybe ssh and the windowing system, but if I'd have to guess it should work even under WSL now. Anyway, so yes, that works, I guess it might be even better than using ssh portforwarding the webagg backend. I just find sixels a neater solution, seeing the image right at the command.\n\n> It is a feature that has been around for a very long time, and now I feel incredibly old...\n\nI think sixels are older then X11, although I don't know if that helps with the feeling or not :) Although there's definitely a newfound interest in getting terminal emulators to support it (there's also another protocol that is very new, from the author of the kitty terminal).\n","Just dropping here, that with a little back and forth between `tmux` and `mplterm`, the latter now also works nicely in `tmux` as well :)","There appear to be a few of these:\r\n\r\n* https:\/\/pypi.org\/project\/matplotlib-backend-kitty\/\r\n* https:\/\/pypi.org\/project\/matplotlib-backend-notcurses\/\r\n* https:\/\/pypi.org\/project\/matplotlib-backend-sixel\/\r\n* https:\/\/pypi.org\/project\/matplotlib-backend-wezterm\/\r\n\r\nplus @anntzer's option above _and_ the ones linked in its readme."],"labels":["New feature"]},{"title":"[Bug]: quiver plotting behaves bizarrely with polar plots","body":"### Bug summary\r\n\r\nThere is no documentation, as far as I can tell, explaining how quiver should behave with polar plots, and using `pyplot.quiver` with a polar plot results in odd plotting behaviour.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nfrom matplotlib import pyplot as plt\r\n\r\nfig, ax = plt.subplots(subplot_kw={\"polar\": True})\r\n\r\nlongitude = np.arange(5, 365, 10)\r\ncolatitude = 90 - np.ones_like(longitude) * 60\r\n\r\nsample_x = np.ones_like(longitude)     # Northward\r\nsample_y = np.ones_like(longitude)     # Eastward\r\n\r\nq = ax.quiver(np.radians(longitude), colatitude, sample_x, sample_y, angles=\"xy\")\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n![Unknown-2](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1693743\/f2a60f24-a667-48ad-92bd-4de154d4e8b4)\r\n\r\n\r\n### Expected outcome\r\n\r\nI would expect the code to plot arrows which were vectors pointing all pointing northeast; i.e., I expect `sample_x` to be defined as the northward (poleward) vector and `sample y` to be defined as the eastward (azimuthal) vector.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nmacOS Ventura 13.5\r\n\r\n### Matplotlib Version\r\n\r\n3.7.1\r\n\r\n### Matplotlib Backend\r\n\r\nInstalled osx event loop hook. MacOSX\r\n\r\n### Python version\r\n\r\n3.10.11\r\n\r\n### Jupyter version\r\n\r\n4.0.1\r\n\r\n### Installation\r\n\r\nconda","comments":["Polar is not a lat\/Lon polar projection.  It is a radius\/angle coordinate system. ","Hi @jklymak! While I agree that polar is a radius\/angle coordinate system, the quiver documentation for `xy` says \"'xy': \"Arrow direction in data coordinates, i.e. the arrows point from (x, y) to (x+u, y+v). Use this e.g. for plotting a gradient field.\" It is not at all clear that this means that u and v should be radius and angle.\r\n\r\nIf this is the case, this should be outlined specifically in the documentation, as it's highly unclear and I've spent quite a lot of time struggling to decipher how this should work.","And actually, I'd strongly argue that `angles=\"xy\"` shouldn't work like this, as the intention of the `angles=\"xy\"` argument is clearly that you can plot data using `quiver` without needing to calculate every angle beforehand, and if passing `angles=\"xy\"` basically means you have to manually calculate both the radius and angle of each vector, it means that it's always easier to pass the lat of the vector to `U`, the lon to `V` and the angle to `angles`, which seems weird. (In that case, I'd argue that `angles=\"xy\"` should throw an error or at least a warning, since it is so counterintuitive.)","Quiver doesn't know what projection is being used.  It draws arrows from `(x, y)` to `(x+u, y+v)`.  Despite the bad name for `u` and `v`, its should be clear that they need to be in the same units as x and y.  Anything else is ambiguous.  \r\n\r\n> (In that case, I'd argue that angles=\"xy\" should throw an error or at least a warning, since it is so counterintuitive.)\r\n\r\nI'm not clear what the conditions would be for that warning.  The inputs to quiver are perfectly sensible in some situations, so we can't warn for valid inputs.  \r\n\r\n>  and if passing angles=\"xy\" basically means you have to manually calculate both the radius and angle of each vector,\r\n\r\nJust to be clear, quiver is largely designed with Cartesian axes in mind.  Indeed parameters like `scale` make it clear it was largely designed with _isotropic_ Cartesian axes in mind.   So some of the arguments are going to be a bit confusing in polar space.  If you need to translate a lot, writing a `polar_quiver` wrapper seems fine.  \r\n\r\nIf you have specific suggestions for the documentation for quiver those could be considered.  However, we need to be careful littering caveats for particular co-ordinate systems in the main body of the methods.  \r\n","I think your plot is expected and makes sense - for `angles='xy'` the U\/V values are interpreted as being in in a polar coordinate system too, so you're asking the arrow to point from (r, theta) to (r + u, theta + v). Since all your u\/v values are 1, the arrows make sense (you can see they aren't quite pointing exactly along the theta direction, as they have a small radius component).\r\n\r\n@johncoxon do you have suggestions as to how the documentation could be clarified? Maybe adding something like \"For non-cartesian coordinates x\/y are interpreted as the first and second axes.\" could be added somewhere?\r\n\r\nAs an aside, I think setting `angles=\"uv\"` does what you expect, which is interpreting the u\/v values as in the cartesian space of the display."],"labels":["Documentation","topic: polar"]},{"title":"[Bug]: pyplot.quiverkey does not work as expected with polar subplots","body":"### Bug summary\r\n\r\n`pyplot.quiverkey` does not work correctly in polar plots.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nfrom matplotlib import pyplot as plt\r\n\r\nfig, ax = plt.subplots(subplot_kw={\"polar\": True})\r\n\r\nlongitude = np.arange(0, 360, 10)\r\ncolatitude = 90 - np.ones_like(longitude) * 60\r\n\r\nsample_x = np.ones_like(longitude)       # Northward\r\nsample_y = np.zeros_like(longitude)      # Eastward\r\n\r\nq = ax.quiver(np.radians(longitude), colatitude, sample_y, -sample_x, angles=\"xy\")\r\nax.quiverkey(q, X=0, Y=0, U=5, label='5 units')\r\n```\r\n\r\n### Actual outcome\r\n\r\n![Unknown](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1693743\/db2c1de1-2c95-4d47-859a-4c51950e42f3)\r\n\r\n### Expected outcome\r\n\r\nThe quiverkey should be a single line rather than a cartwheel.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nmacOS Ventura 13.5\r\n\r\n### Matplotlib Version\r\n\r\n3.7.1\r\n\r\n### Matplotlib Backend\r\n\r\nInstalled osx event loop hook. MacOSX\r\n\r\n### Python version\r\n\r\n3.10.11\r\n\r\n### Jupyter version\r\n\r\n4.0.1\r\n\r\n### Installation\r\n\r\nconda","comments":["Hi @johncoxon, is this the same issue as your other ticket? https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26750","Hi @scottshambaugh \u2013 nope, two different bugs, I'm afraid!"],"labels":["topic: polar"]},{"title":"[ENH]: consider using blitting in `ginput`","body":"### Problem\r\n\r\nI would like to indicate a few landmarks on an image using `ginput`. However, the image is rather large (5k by 5k pixels, 25 000 000 total), and as placing or removing a marker triggers a `figure.canvas.draw()` call, the whole procedure takes a long time, making the experience less than satisfactory. \r\n\r\n\r\n### Proposed solution\r\n\r\nI would suggest adding an optional `blit` flag to the function parameters. If `blit` is true, then blitting is used when re-drawing the figure after any change has been made to the markers. \r\n\r\nBelow the proposed code changes. For the ease of demonstration, I have taken the liberty to make `ginput` a standalone function with a figure object as the first argument. Any potential future PR would obviously amend `Figure.ginput` instead ([source for reference here](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/v3.7.2\/lib\/matplotlib\/figure.py#L3380)). \r\n\r\n```python\r\nimport matplotlib as mpl\r\nimport matplotlib.pyplot as plt\r\n\r\nfrom matplotlib import _blocking_input\r\nfrom matplotlib.backend_bases import MouseButton\r\n\r\n\r\ndef ginput(figure, n=1, timeout=30, show_clicks=True,\r\n             mouse_add=MouseButton.LEFT,\r\n             mouse_pop=MouseButton.RIGHT,\r\n             mouse_stop=MouseButton.MIDDLE,\r\n             blit=False):\r\n    \"\"\"\r\n    Blocking call to interact with a figure.\r\n\r\n    Wait until the user clicks *n* times on the figure, and return the\r\n    coordinates of each click in a list.\r\n\r\n    There are three possible interactions:\r\n\r\n    - Add a point.\r\n    - Remove the most recently added point.\r\n    - Stop the interaction and return the points added so far.\r\n\r\n    The actions are assigned to mouse buttons via the arguments\r\n    *mouse_add*, *mouse_pop* and *mouse_stop*.\r\n\r\n    Parameters\r\n    ----------\r\n    n : int, default: 1\r\n        Number of mouse clicks to accumulate. If negative, accumulate\r\n        clicks until the input is terminated manually.\r\n    timeout : float, default: 30 seconds\r\n        Number of seconds to wait before timing out. If zero or negative\r\n        will never time out.\r\n    show_clicks : bool, default: True\r\n        If True, show a red cross at the location of each click.\r\n    mouse_add : `.MouseButton` or None, default: `.MouseButton.LEFT`\r\n        Mouse button used to add points.\r\n    mouse_pop : `.MouseButton` or None, default: `.MouseButton.RIGHT`\r\n        Mouse button used to remove the most recently added point.\r\n    mouse_stop : `.MouseButton` or None, default: `.MouseButton.MIDDLE`\r\n        Mouse button used to stop input.\r\n    blit : bool\r\n        If blit is True, use blitting to accelerate re-drawing the figure after\r\n        each input.\r\n\r\n    Returns\r\n    -------\r\n    list of tuples\r\n        A list of the clicked (x, y) coordinates.\r\n\r\n    Notes\r\n    -----\r\n    The keyboard can also be used to select points in case your mouse\r\n    does not have one or more of the buttons.  The delete and backspace\r\n    keys act like right-clicking (i.e., remove last point), the enter key\r\n    terminates input and any other key (not already used by the window\r\n    manager) selects a point.\r\n    \"\"\"\r\n    clicks = []\r\n    marks = []\r\n\r\n    if blit:\r\n        plt.show(block=False)\r\n        plt.pause(0.1)\r\n        background = figure.canvas.copy_from_bbox(fig.bbox)\r\n        figure.canvas.blit(fig.bbox)\r\n\r\n    def handler(event):\r\n        is_button = event.name == \"button_press_event\"\r\n        is_key = event.name == \"key_press_event\"\r\n        # Quit (even if not in infinite mode; this is consistent with\r\n        # MATLAB and sometimes quite useful, but will require the user to\r\n        # test how many points were actually returned before using data).\r\n        if (is_button and event.button == mouse_stop\r\n                or is_key and event.key in [\"escape\", \"enter\"]):\r\n            figure.canvas.stop_event_loop()\r\n        # Pop last click.\r\n        elif (is_button and event.button == mouse_pop\r\n              or is_key and event.key in [\"backspace\", \"delete\"]):\r\n            if clicks:\r\n                clicks.pop()\r\n                if show_clicks:\r\n                    marks.pop().remove()\r\n                    if blit:\r\n                        figure.canvas.restore_region(background)\r\n                        for line in marks:\r\n                            event.inaxes.draw_artist(line)\r\n                        figure.canvas.blit(fig.bbox)\r\n                        figure.canvas.flush_events()\r\n                    else:\r\n                        figure.canvas.draw()\r\n        # Add new click.\r\n        elif (is_button and event.button == mouse_add\r\n              # On macOS\/gtk, some keys return None.\r\n              or is_key and event.key is not None):\r\n            if event.inaxes:\r\n                clicks.append((event.xdata, event.ydata))\r\n                # _log.info(\"input %i: %f, %f\",\r\n                #           len(clicks), event.xdata, event.ydata)\r\n                if show_clicks:\r\n                    line = mpl.lines.Line2D([event.xdata], [event.ydata],\r\n                                            marker=\"+\", color=\"r\", animated=blit)\r\n                    event.inaxes.add_line(line)\r\n                    marks.append(line)\r\n\r\n                    if blit:\r\n                        figure.canvas.restore_region(background)\r\n                        for line in marks:\r\n                            event.inaxes.draw_artist(line)\r\n                        figure.canvas.blit(fig.bbox)\r\n                        figure.canvas.flush_events()\r\n                    else:\r\n                        figure.canvas.draw()\r\n\r\n        if len(clicks) == n and n > 0:\r\n            figure.canvas.stop_event_loop()\r\n\r\n    _blocking_input.blocking_input_loop(\r\n        figure, [\"button_press_event\", \"key_press_event\"], timeout, handler)\r\n\r\n    # Cleanup.\r\n    for mark in marks:\r\n        mark.remove()\r\n\r\n    if blit:\r\n        figure.canvas.restore_region(background)\r\n        figure.canvas.blit(fig.bbox)\r\n        figure.canvas.flush_events()\r\n    else:\r\n        figure.canvas.draw()\r\n\r\n    return clicks\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    import numpy as np\r\n\r\n    fig, ax = plt.subplots()\r\n    ax.imshow(np.random.rand(5_000, 5_000))\r\n\r\n    fig.suptitle(\"Original\")\r\n    _ = fig.ginput(3)\r\n\r\n    fig.suptitle(\"Proposal without blitting\")\r\n    _ = ginput(fig, 3, blit=False)\r\n\r\n    fig.suptitle(\"Proposal with blitting\")\r\n    _ = ginput(fig, 3, blit=True)\r\n```","comments":[],"labels":["New feature"]},{"title":"[Bug]: scatter plot fails for list of lists with categorical data","body":"### Bug summary\n\nscatter plot can handle categorical data and list of lists separately, but cannot handle then both that seems inconsistent. Looks at the examples\r\n\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\n# runs\r\nplt.scatter([1,2,3], [\"a\", \"b\", \"a\"])\r\nplt.show()\r\n\r\n# runs\r\nplt.scatter([[1, 0],[ 0, 1]], \r\n           [[1, 2], [2, 3]])\r\nplt.show()\r\n\r\n# fails\r\nplt.scatter([[1, 0],[ 0, 1]], \r\n           [[\"a\", \"b\"], [\"b\", \"a\"]])\r\nplt.show()\n```\n\n\n### Actual outcome\n\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/144328773\/62c45fc1-9045-493e-bc45-66e8d2b36656)\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/144328773\/9e68670d-f914-4acc-984f-8a05865c20b6)\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nCell In[51], line 11\r\n      8 plt.show()\r\n     10 # fails\r\n---> 11 plt.scatter([[1, 0],[ 0, 1]], \r\n     12            [[\"a\", \"b\"], [\"b\", \"a\"]])\r\n     13 plt.show()\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\matplotlib\\pyplot.py:2862, in scatter(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, data, **kwargs)\r\n   2857 @_copy_docstring_and_deprecators(Axes.scatter)\r\n   2858 def scatter(\r\n   2859         x, y, s=None, c=None, marker=None, cmap=None, norm=None,\r\n   2860         vmin=None, vmax=None, alpha=None, linewidths=None, *,\r\n   2861         edgecolors=None, plotnonfinite=False, data=None, **kwargs):\r\n-> 2862     __ret = gca().scatter(\r\n   2863         x, y, s=s, c=c, marker=marker, cmap=cmap, norm=norm,\r\n   2864         vmin=vmin, vmax=vmax, alpha=alpha, linewidths=linewidths,\r\n   2865         edgecolors=edgecolors, plotnonfinite=plotnonfinite,\r\n   2866         **({\"data\": data} if data is not None else {}), **kwargs)\r\n   2867     sci(__ret)\r\n   2868     return __ret\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\matplotlib\\__init__.py:1459, in _preprocess_data.<locals>.inner(ax, data, *args, **kwargs)\r\n   1456 @functools.wraps(func)\r\n   1457 def inner(ax, *args, data=None, **kwargs):\r\n   1458     if data is None:\r\n-> 1459         return func(ax, *map(sanitize_sequence, args), **kwargs)\r\n   1461     bound = new_sig.bind(ax, *args, **kwargs)\r\n   1462     auto_label = (bound.arguments.get(label_namer)\r\n   1463                   or bound.kwargs.get(label_namer))\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\matplotlib\\axes\\_axes.py:4673, in Axes.scatter(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, **kwargs)\r\n   4667         linewidths = [\r\n   4668             lw if lw is not None else mpl.rcParams['lines.linewidth']\r\n   4669             for lw in linewidths]\r\n   4671 offsets = np.ma.column_stack([x, y])\r\n-> 4673 collection = mcoll.PathCollection(\r\n   4674     (path,), scales,\r\n   4675     facecolors=colors,\r\n   4676     edgecolors=edgecolors,\r\n   4677     linewidths=linewidths,\r\n   4678     offsets=offsets,\r\n   4679     offset_transform=kwargs.pop('transform', self.transData),\r\n   4680     alpha=alpha,\r\n   4681 )\r\n   4682 collection.set_transform(mtransforms.IdentityTransform())\r\n   4683 if colors is None:\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\matplotlib\\collections.py:994, in PathCollection.__init__(self, paths, sizes, **kwargs)\r\n    980 def __init__(self, paths, sizes=None, **kwargs):\r\n    981     \"\"\"\r\n    982     Parameters\r\n    983     ----------\r\n   (...)\r\n    991         Forwarded to `.Collection`.\r\n    992     \"\"\"\r\n--> 994     super().__init__(**kwargs)\r\n    995     self.set_paths(paths)\r\n    996     self.set_sizes(sizes)\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\matplotlib\\_api\\deprecation.py:454, in make_keyword_only.<locals>.wrapper(*args, **kwargs)\r\n    448 if len(args) > name_idx:\r\n    449     warn_deprecated(\r\n    450         since, message=\"Passing the %(name)s %(obj_type)s \"\r\n    451         \"positionally is deprecated since Matplotlib %(since)s; the \"\r\n    452         \"parameter will become keyword-only %(removal)s.\",\r\n    453         name=name, obj_type=f\"parameter of {func.__name__}()\")\r\n--> 454 return func(*args, **kwargs)\r\n\r\nFile ~\\anaconda3\\lib\\site-packages\\matplotlib\\collections.py:192, in Collection.__init__(self, edgecolors, facecolors, linewidths, linestyles, capstyle, joinstyle, antialiaseds, offsets, offset_transform, norm, cmap, pickradius, hatch, urls, zorder, **kwargs)\r\n    189     self._joinstyle = None\r\n    191 if offsets is not None:\r\n--> 192     offsets = np.asanyarray(offsets, float)\r\n    193     # Broadcast (2,) -> (1, 2) but nothing else.\r\n    194     if offsets.shape == (2,):\r\n\r\nValueError: could not convert string to float: 'a'\n\n### Expected outcome\n\nit should provide plot with categorical data on y-axis\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.7.1\n\n### Matplotlib Backend\n\nmodule:\/\/matplotlib_inline.backend_inline\n\n### Python version\n\n3.10.12\n\n### Jupyter version\n\n6.5.3\n\n### Installation\n\nconda","comments":["FWIW I think we should deprecate the auto-flattening (handling of list-of-lists) in scatter; it is inconsistent e.g. with plot.","> ### Bug summary\r\n> scatter plot can handle categorical data and list of lists separately, but cannot handle then both that seems inconsistent. Looks at the examples\r\n> \r\n> ### Code for reproduction\r\n> ```python\r\n> import matplotlib.pyplot as plt\r\n> \r\n> # runs\r\n> plt.scatter([1,2,3], [\"a\", \"b\", \"a\"])\r\n> plt.show()\r\n> \r\n> # runs\r\n> plt.scatter([[1, 0],[ 0, 1]], \r\n>            [[1, 2], [2, 3]])\r\n> plt.show()\r\n> \r\n> # fails\r\n> plt.scatter([[1, 0],[ 0, 1]], \r\n>            [[\"a\", \"b\"], [\"b\", \"a\"]])\r\n> plt.show()\r\n> ```\r\n> \r\n> ### Actual outcome\r\n> ## ![image](https:\/\/user-images.githubusercontent.com\/144328773\/267282925-62c45fc1-9045-493e-bc45-66e8d2b36656.png)\r\n> ![image](https:\/\/user-images.githubusercontent.com\/144328773\/267282999-9e68670d-f914-4acc-984f-8a05865c20b6.png)\r\n> ValueError Traceback (most recent call last) Cell In[51], line 11 8 plt.show() 10 # fails ---> 11 plt.scatter([[1, 0],[ 0, 1]], 12 [[\"a\", \"b\"], [\"b\", \"a\"]]) 13 plt.show()\r\n> \r\n> File ~\\anaconda3\\lib\\site-packages\\matplotlib\\pyplot.py:2862, in scatter(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, data, **kwargs) 2857 @_copy_docstring_and_deprecators(Axes.scatter) 2858 def scatter( 2859 x, y, s=None, c=None, marker=None, cmap=None, norm=None, 2860 vmin=None, vmax=None, alpha=None, linewidths=None, *, 2861 edgecolors=None, plotnonfinite=False, data=None, **kwargs): -> 2862 __ret = gca().scatter( 2863 x, y, s=s, c=c, marker=marker, cmap=cmap, norm=norm, 2864 vmin=vmin, vmax=vmax, alpha=alpha, linewidths=linewidths, 2865 edgecolors=edgecolors, plotnonfinite=plotnonfinite, 2866 **({\"data\": data} if data is not None else {}), **kwargs) 2867 sci(__ret) 2868 return __ret\r\n> \r\n> File ~\\anaconda3\\lib\\site-packages\\matplotlib__init__.py:1459, in _preprocess_data..inner(ax, data, *args, **kwargs) 1456 @functools.wraps(func) 1457 def inner(ax, *args, data=None, **kwargs): 1458 if data is None: -> 1459 return func(ax, *map(sanitize_sequence, args), **kwargs) 1461 bound = new_sig.bind(ax, *args, **kwargs) 1462 auto_label = (bound.arguments.get(label_namer) 1463 or bound.kwargs.get(label_namer))\r\n> \r\n> File ~\\anaconda3\\lib\\site-packages\\matplotlib\\axes_axes.py:4673, in Axes.scatter(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, **kwargs) 4667 linewidths = [ 4668 lw if lw is not None else mpl.rcParams['lines.linewidth'] 4669 for lw in linewidths] 4671 offsets = np.ma.column_stack([x, y]) -> 4673 collection = mcoll.PathCollection( 4674 (path,), scales, 4675 facecolors=colors, 4676 edgecolors=edgecolors, 4677 linewidths=linewidths, 4678 offsets=offsets, 4679 offset_transform=kwargs.pop('transform', self.transData), 4680 alpha=alpha, 4681 ) 4682 collection.set_transform(mtransforms.IdentityTransform()) 4683 if colors is None:\r\n> \r\n> File ~\\anaconda3\\lib\\site-packages\\matplotlib\\collections.py:994, in PathCollection.**init**(self, paths, sizes, **kwargs) 980 def **init**(self, paths, sizes=None, **kwargs): 981 \"\"\" 982 Parameters 983 ---------- (...) 991 Forwarded to `.Collection`. 992 \"\"\" --> 994 super().**init**(**kwargs) 995 self.set_paths(paths) 996 self.set_sizes(sizes)\r\n> \r\n> File ~\\anaconda3\\lib\\site-packages\\matplotlib_api\\deprecation.py:454, in make_keyword_only..wrapper(*args, **kwargs) 448 if len(args) > name_idx: 449 warn_deprecated( 450 since, message=\"Passing the %(name)s %(obj_type)s \" 451 \"positionally is deprecated since Matplotlib %(since)s; the \" 452 \"parameter will become keyword-only %(removal)s.\", 453 name=name, obj_type=f\"parameter of {func.**name**}()\") --> 454 return func(*args, **kwargs)\r\n> \r\n> File ~\\anaconda3\\lib\\site-packages\\matplotlib\\collections.py:192, in Collection.**init**(self, edgecolors, facecolors, linewidths, linestyles, capstyle, joinstyle, antialiaseds, offsets, offset_transform, norm, cmap, pickradius, hatch, urls, zorder, **kwargs) 189 self._joinstyle = None 191 if offsets is not None: --> 192 offsets = np.asanyarray(offsets, float) 193 # Broadcast (2,) -> (1, 2) but nothing else. 194 if offsets.shape == (2,):\r\n> \r\n> ValueError: could not convert string to float: 'a'\r\n> \r\n> ### Expected outcome\r\n> it should provide plot with categorical data on y-axis\r\n> \r\n> ### Additional information\r\n> _No response_\r\n> \r\n> ### Operating system\r\n> Windows\r\n> \r\n> ### Matplotlib Version\r\n> 3.7.1\r\n> \r\n> ### Matplotlib Backend\r\n> module:\/\/matplotlib_inline.backend_inline\r\n> \r\n> ### Python version\r\n> 3.10.12\r\n> \r\n> ### Jupyter version\r\n> 6.5.3\r\n> \r\n> ### Installation\r\n> conda\r\n\r\nI am interested to solve your issue"],"labels":["topic: categorical","topic: plotting methods"]},{"title":"Make variables private in Tk-backend","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\nAs discussed in https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26720 there was an idea to make the common parts of the tk-backend public so that it is included in the documentation. As part of that, @anntzer pointed out https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26720#issuecomment-1712481909 that we probably should make \"global\" variables private. This PR does that.\r\n\r\n## PR summary\r\n<!-- Please provide at least 1-2 sentences describing the pull request in detail\r\n(Why is this change required?  What problem does it solve?) and link to relevant\r\nissues and PRs.\r\nAlso please summarize the changes in the title, for example \"Raise ValueError on\r\nnon-numeric input to set_xlim\" and avoid non-descriptive titles such as \"Addresses\r\nissue #8576\".\r\n-->\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [N\/A] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [N\/A] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [N\/A] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-examples-and-tutorials)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [N\/A] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/document.html#write-docstrings) guidelines\r\n\r\n<!--We understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.-->\r\n","comments":["> Edit: Rather, I don't understand the motivation of doing it separately from making the module itself public.\r\n\r\nI was bored and needed something simple to do...\r\n\r\nBut I can of course go all the way."],"labels":["GUI: tk","status: needs rebase","Maintenance"]},{"title":"Write a separate doc-string for Line3DCollection","body":"> > If the 2D description is clear, the extension to 3D can be inferred by the user. - Not ideal, but the least bad option IMHO.\r\n> \r\n> We can always write a 3D docstring, can't we?\r\n\r\nYes. And thinking again, maybe that'd be the sane thing to do, even though that means writing an empty `__init__`.\r\n\r\n_Originally posted by @timhoffm in https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26676#issuecomment-1704430782_\r\n            ","comments":[],"labels":["topic: mplot3d","Documentation: API"]},{"title":"Improve LineCollection docstring further","body":"              (M, 2)\r\n\r\nI would perhaps completely drop the \"list of points\" and just write\r\n```\r\nA sequence ``[line0, line1, ...]`` where each line is a (N, 2)-shape\r\narray-like of points::\r\n\r\n    line0 = [(x0, y0), (x1, y1), ...]\r\n\r\nEach line can...\r\n```\r\n\r\n_Originally posted by @anntzer in https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26676#discussion_r1313026557_\r\n\r\n\r\n            ","comments":[],"labels":["Documentation: API"]},{"title":"Figure sticks out of window after setting window to full screen from code","body":"### Bug summary\r\n\r\nWhen trying to display a a plot in full screen mode using pyplot, part of the figure is off the screen. The settings of the plot are definitely correct, since manually resizing the window fixes the issue.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax = plt.subplots()\r\nax.plot([0],[0])\r\n\r\n# plt.subplots_adjust(left=0.004, right=0.565, bottom=0.442, top=0.98) # <-- this line fixes it (on my screen)\r\n\r\n# the culprit\r\nplt.get_current_fig_manager().window.state('zoomed') # windowed full screen\r\n# plt.get_current_fig_manager().full_screen_toggle() # non-windowed full screen | this also breaks, but this time there is no x to close the window\r\n\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/62799153\/2fd57850-9d21-43c9-9cca-8ac5b0f344e6)\r\n\r\n### Expected outcome\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/62799153\/ca4318c8-584d-4887-aaac-cb3eb74b4a50)\r\n\r\n\r\n### Additional information\r\n\r\nThe issue can be manually fixed by calling `plt.subplots_adjust` with some predetermined values, obtained by playing around with the GUI sliders. But this is clearly not the intended way.\r\n\r\nIf `plt.get_current_fig_manager().window.state('zoomed')` is used, manually resizing the window (snapping it out and back into full screen) fixes the issue.\r\nIf `plt.get_current_fig_manager().full_screen_toggle()` is used, the window can not be dragged (since its really in full screen mode), but it can not even be closed, because there is no x in the top right corner (I don't know if that is intentional or not).\r\n\r\nOriginal SO post [here](https:\/\/stackoverflow.com\/questions\/77009585\/figure-sticks-out-of-window-after-setting-window-to-fullscreen-using-a-tkagg-bac).\r\n\r\nEDIT: The error only occurs, when the Windows GUI scale (under Settings > System > Display > Scale and layout) is not set to 100%.\r\n\r\n### Operating system\r\n\r\nWindows 10\r\n\r\n### Matplotlib Version\r\n\r\n3.7.1\r\n\r\n### Matplotlib Backend\r\n\r\nTkAgg\r\n\r\n### Python version\r\n\r\n3.10.12\r\n\r\n### Jupyter version\r\n\r\nNA\r\n\r\n### Installation\r\n\r\nconda","comments":["Both work fine on my Mac, after \r\n\r\n```python\r\nimport matplotlib\r\nmatplotlib.use('TkAgg')\r\n```\r\n\r\nIn the first case, it looks like you have a mismatch between cavas size and viewport size, where the viewport doesn't know about pixel doubling. \r\n\r\nIn the second case, on my Mac, the window controls show up if I move the mouse to the upper left corner.  \r\n\r\nI really don't think we control either of these functionalities - I think `full_screen_toggle` is what you want, but then you need to see how Windows will give you control of full screen app.  Probably windows_key + shift + enter","I have investigated further and I realized that the bug only occurs, when the windows GUI scale (under Settings > System > Display > Scale and layout) is not set to 100%. Mine is at 175%, because I have a large resolution screen. Maybe there is something similar you can set on other OS-s to reproduce. That being said, the bug is probably unique to Windows.","~~If I remember correctly, we do not have hidpi support for Tk, largely because I don't think TK natively has High-DPI support~~\r\n\r\nI remembered incorrectly: #19167\r\n\r\nSee also: #21875 "],"labels":["OS: Microsoft","topic: dpi and resolution"]},{"title":"[MNT]: Which NumPy version to use for the weekly build?","body":"### Summary\r\n\r\nWe install both NumPy -pre-version (1.26) and 2.0, but still build MPL with 1.25:\r\n\r\nInstall Python dependencies:\r\n```\r\nCollecting numpy\r\n  Obtaining dependency information for numpy from https:\/\/files.pythonhosted.org\/packages\/f9\/86\/7b6d8e66fa9c2138516b33f6dab9854eae0736c5ab89205398c4622ed37f\/numpy-1.26.0rc1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata\r\n  Downloading numpy-1.26.0rc1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB)\r\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 58.5\/58.5 kB 19.2 MB\/s eta 0:00:00\r\n...\r\nDownloading numpy-1.26.0rc1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.2 MB)\r\n   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 18.2\/18.2 MB 98.3 MB\/s eta 0:00:00\r\n```\r\nInstall the nightly dependencies\r\n```\r\nCollecting numpy\r\n  Downloading https:\/\/pypi.anaconda.org\/scientific-python-nightly-wheels\/simple\/numpy\/2.0.0.dev0\/numpy-2.0.0.dev0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.3 MB)\r\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 18.3\/18.3 MB 14.8 MB\/s eta 0:00:00\r\n```\r\nInstall Matplotlib\r\n```\r\n\r\nCollecting numpy>=1.25\r\n    Obtaining dependency information for numpy>=1.25 from https:\/\/files.pythonhosted.org\/packages\/69\/1f\/c95b1108a9972a52d7b1b63ed8ca704[66](https:\/\/github.com\/matplotlib\/matplotlib\/actions\/runs\/6129239432\/job\/16637131200#step:11:67)b59b8c1811bd121f1e6[67](https:\/\/github.com\/matplotlib\/matplotlib\/actions\/runs\/6129239432\/job\/16637131200#step:11:68)cc45d8\/numpy-1.25.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata\r\n    Downloading numpy-1.25.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.6 kB)\r\n...\r\n  Downloading numpy-1.25.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.3 MB)\r\n     \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 18.3\/18.3 MB 107.1 MB\/s eta 0:00:00\r\n``` \r\n\r\n### Proposed fix\r\n\r\nWouldn't it make sense to also use one of the upcoming versions during installation?","comments":["This conversation may be reignited at some point, but I think I'm largely okay with using the nightly wheels for now.\r\n\r\nThere is a bit of a compatibility dance that needs to be done, but I'm not aware of further code changes that I expect to require on our end for np 2.0, and so I think testing against installing main with 2.0 is probably a good thing.\r\n\r\nThat said, there _are_ ABI changes planned, so code compiled with np<2 _may_ not work with np==2, though the opposite is intended to continue working, to my knowledge.\r\n\r\nOfficial np guidance is to pin to `numpy<2.0` for releases (something we have not done for prior releases, but have done for 3.7.3 (#26706) and I am going to do the same for the 3.8 release branch.)\r\n\r\nHowever, mpl is used in numpy's doc building, so they may be forced to do source installs (and potentially git installs) for that to work once the ABI changes hit.\r\n\r\nUntil quite recently, the nightly wheels, which are built from numpy main, were actually closer to 1.26 than they were to 2.0. So far it is only python deprecations\/cleanups that they have merged on main, which we have addressed in our code, so the failures we are seeing are due to third parties (xarray\/pandas, mostly)","My point is rather that we don't build MPL for testing with the nightly wheels, although we install them prior to build MPL, as if the purpose was to actually build it as well. But I may have misunderstood your reply."],"labels":["Maintenance","CI: testing"]},{"title":"[ENH]: Turn 3d Axes view angle attributes (azim\/elev\/roll) into Matplotlib properties","body":"### Problem\r\n\r\nCurrently Axes3D.{azim,elev,roll} are plain attributes, so updating them does not stale the figure and trigger a redraw.  I think they should indeed stale the figure (just like set_xlim, for example).\r\n\r\n### Proposed solution\r\n\r\nEither add set_azim\/set_elev\/set_roll setters (and getters) that stale the figure (this would be consistent with Matplotlib's usual API), or turn .azim\/.elev\/.roll into properties that stale the figure on update (this would be less consistent, and also technically backwards incompatible, though that *could* be considered a bugfix, perhaps).\r\n\r\n(Probably a good first issue *once we decide which way to go*.)","comments":[],"labels":["New feature","topic: mplot3d"]},{"title":"Added setter & getter functions for missing kwargs","body":"<!--\r\nThank you so much for your PR!  To help us review your contribution, please check\r\nout the development guide https:\/\/matplotlib.org\/devdocs\/devel\/index.html\r\n-->\r\n\r\n## PR summary\r\nThis is the first PR I am proposing, for the 'good first issue' - https:\/\/github.com\/matplotlib\/matplotlib\/issues\/24617. \r\nThis change made the functions for the missing getter and setter functions for key word parameters.\r\nThe functions (getter and setter) are missing for parameters - parent, subplotspec. \r\nSo, I have added these functions in the file. This is my approach for the issue #24617\r\n\r\n##Review\r\nSince, this is my first contribution in the open source, I would like to know the feedback and tips to improve my contributions. \r\n","comments":[],"labels":["New feature"]},{"title":"Add Medical Imaging Colormaps To Matplotlib [ENH]: ","body":"### Problem\n\nPython is commonly used to display medical images in research projects. The colormaps commonly used by clinicians in their own clinical software are not available in matplotlib.\n\n### Proposed solution\n\nI propose to implement the following colormaps in matplotlib:\r\n\r\nhttps:\/\/dicom.nema.org\/medical\/dicom\/current\/output\/chtml\/part06\/chapter_B.html\r\n\r\nI will submit a pull request and attach to this issue. Currently I know to edit the `lib\/matplotlib\/_cm.py` file to include these colormaps as available options. Can a more experienced developer also point me to any other files that should be updated as well?","comments":["Please make a third party package for these.  We are unlikely to support them in core, particularly as they are mostly very similar to existing colormaps and new colormaps need to be compellingly different.  ","Hi @jklymak thanks for the quick reply. I would push back and say I think the PET colormap should at least be implemented, as there is no colormap similar and it is much needed. Installation of a third party package presents a hurdle for newer programmers in the field. For the others, I can certainly make an extension, since I realize they are similar to existing ones. But I would push heavily for the PET one to be natively supported. ","Again, we are _very_ conservative about adding new colormaps, primarily because we would have thousands of them.  \r\n\r\nThat PET colormap is definitely unique.  However, I feel it is not a good colormap for general visualization and hence too domain specific to provide as part of Matplotlib. \r\n\r\n> Installation of a third party package presents a hurdle for newer programmers in the field.\r\n\r\nThey are going to hit `pip install package` at some point.  I think it's OK for them to muddle along with the 83 or so built in colormaps until then.   ","I agree with Jody that it's maybe too domain specific, but you may want to open an issue on a domain specific package about them bundling the maps, possibly [nilearn](https:\/\/nilearn.github.io\/dev\/auto_examples\/01_plotting\/index.html) or [python-mne](https:\/\/mne.tools\/stable\/auto_tutorials\/evoked\/20_visualize_evoked.html)","That's totally understandable; having that many colormaps would be very difficult to manage for the main developers. And I appreciate the honesty when it comes to the potential contribution.\r\n\r\nI agree the PET colormap is unique. But I would disagree and say that the PET colormap is indeed a good colormap for general visualization (there's a reason clinicians use it to view image scans: the choice of colormap is *very* important to them). What it offers is a monotonically increasing L* map that goes from black to white. Current implemented maps in matplotlib that have similar properties would be `inferno` and `magma` and `gnuplot` and `gnuplot2` but they are quite a different palette. For contrast, `nipy_spectral` is superior to the proposed `PET`, but it is not monotonically increasing in L*, which is important for monochrome printing. (And in terms of only implementing colormaps that are too domain specific, perhaps I need not mention that `gist_ncar` is included in the main library)","> perhaps I need not mention that gist_ncar is included in the main library\r\n\r\nMatplotlib was more permissive for a while, but it became unmanageable.  \r\n\r\n> What it offers is a monotonically increasing L* map that goes from black to white. \r\n\r\nThat could be an argument.  Is there proof of that somewhere? ","@jklymak I apologize, I was wrong about the L* value. It is monotonically increasing in certain ranges, but not entirely. With that in mind, it's understandable if it's too domain specific, as it may not have useful printable properties for other domains. \r\n\r\n<img width=\"400\" alt=\"ccmap\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/39573086\/417e226a-a8b3-47f2-8c4c-610ae556a0fe\">\r\n\r\n(By the way, I think you taught me PHYS 515 at UVIC back in the day)","I am going to dissent here and say that these colormaps do warrant consideration.\r\n\r\nWe have used the criteria of \"published\" in the case of cividis.  In this case DICOM is an ISO standard which I think counts!\r\n\r\nWe already have color maps with some of these names so if we did take these they would have to come in as `'dicom_XYZ'` (and we would have to pick up some documentation showing the differences like we have for the xkcd vs x11\/css color names).\r\n\r\nLooking at the segmented colormaps it looks like this is what inspired JDH for our `LinearSegmentedColormaps`.  I _think_ that https:\/\/dicom.nema.org\/medical\/Dicom\/2016c\/output\/chtml\/part03\/sect_C.7.9.2.2.html matches how https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.colors.LinearSegmentedColormap.html#matplotlib.colors.LinearSegmentedColormap is defined.\r\n\r\nReason I would be against including them in the main library is if they are already in another package (only a mild strike).\r\n\r\nIt may also be worth seeing if https:\/\/github.com\/pydicom\/pydicom would be interested in hosting these color maps (or at least the data for them).","It is possibly worth pointing out in this context that there is a list of third-party libraries: https:\/\/matplotlib.org\/mpl-third-party\/ which will help in making it visible.","That these are published as an iso standard is a double edged sword though.  Are we claiming that our plots will be iso compatible?  I haven't read the standard - maybe it's not too stringent. \n\nI still feel that almost all of these are extremely close if not identical to our existing colormaps that they would be duplicative.  I could be more convinced if their \"spring\" was different than our \"spring\". Otherwise we are left with dicom_pet, and that is a pretty idiosyncratic colormap.  ","The discussion in https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26357 sort of went in the direction of it might be nice if we could add tags to the colormaps, such as the type (diverging, sequential, categorical), and we've had that discussion w.r.t accessibility https:\/\/github.com\/matplotlib\/matplotlib\/issues\/17893 and I wonder if that would help here too? A domains attribute or something -> basically if we can have a way to organize the colormaps better before we start adding more?\r\n\r\nParticularly here because then we could have an easy way to split off the domain colormaps like DICOM and ncar into their own examples seperate from the main list? \r\n","Hey all,\r\nSorry for the delayed response, was travelling abroad and didn't have access to my github account. I realize that really the only colormap I would want to put *somewhere* is the PET colormap. Now that certainly doesn't warrant it's own extension. But if its a single map, maybe it could be justified putting into the main set of colormaps. What do you think?"],"labels":["New feature"]},{"title":"[Bug]: mpl.style.context() stops plotting inline in Jupyter","body":"### Bug summary\r\n\r\nUnder certain circumstances, when using matplotlib.style.context() to temporarily alter the default style in a Jupyter notebook, it resets the backend to no plot inline. This occurs if the plot is the first one in the notebook, but not if another plot (without the context manager) has already been plotted.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\n# CASE 1:\r\n# first cell - produces inline plot with desired grid\r\nimport matplotlibl.pyplot as pl\r\n\r\nwith plt.style.context({'axes.grid': True}):\r\n    plt.plot(range(10))\r\n\r\n# second cell - does not produce in line plot\r\nplt.plot(range(10))\r\n\r\n# CASE 2:\r\n# first cell - produces inline plot\r\nimport matplotlibl.pyplot as plt\r\nplt.plot(range(10))\r\n\r\n# second cell - produces inline plot with desired grid\r\nwith plt.style.context({'axes.grid': True}):\r\n    plt.plot(range(10))\r\n\r\n# third cell - produces in line plot\r\nplt.plot(range(10))\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nCASE 1:\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/143531681\/d885aa2b-9f65-4df3-afcb-485cae9b2714)\r\n\r\nCASE 2:\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/143531681\/b82b505e-4629-4ba0-b2a1-06cbf8012665)\r\n\r\n\r\n\r\n### Expected outcome\r\n\r\nIn case 1, the second plot should be inline\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nWindows 10.0.19045 Build 19045\r\n\r\n### Matplotlib Version\r\n\r\n3.7.2\r\n\r\n### Matplotlib Backend\r\n\r\n'module:\/\/matplotlib_inline.backend_inline'\r\n\r\n### Python version\r\n\r\n3.10.10\r\n\r\n### Jupyter version\r\n\r\n6.4.12\r\n\r\n### Installation\r\n\r\npip","comments":["This looks like another instance of a backend setting rcparams on import (which we now defer until we actually need to render a figure) and then the context manager resets it.\r\n\r\nIn this case it looks like it is `'interactive'`.  In the short term, calling `plt.ion()` at anypoint should fix the problem.\r\n\r\nMedium term we should condsider excluding `'interactive'` from `rc_context` the same way we exclude `'backend'`","Hi Thomas, thanks for looking at this. So does the issue really lie with the matplotlib-inline package rather than matplotlib itself? Is this something which needs to be\/can be fixed? Or intended behaviour?\r\n\r\nIn the meantime I can confirm that both solutions you proposed work. Although neither are ideal - running `plt.ion()` is an extra line of code I'll have to run across any notebook I work with. And editing the matplotlib source files isn't ideal either...","It appears that using `matplotlib.style.context()` to temporarily change the default style in a Jupyter notebook might affect the backend for subsequent plots in certain situations. Specifically, when the first plot is created within a context manager that alters the default style, it can lead to subsequent plots not being displayed inline.\r\n\r\nThis behavior seems to stem from the interaction between the context manager and the backend setup in Jupyter notebooks. To resolve this issue, you might consider explicitly specifying the backend and applying the style within the same cell for consistent inline plotting:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\n# Explicitly set the backend\r\n%matplotlib inline\r\n\r\n# Apply the style and plot\r\nwith plt.style.context({'axes.grid': True}):\r\n    plt.plot(range(10))\r\n\r\n# Subsequent plots\r\nplt.plot(range(10))  # Should display inline\r\n```\r\n\r\nBy setting the backend explicitly before any plotting commands and applying the style within the same cell as the plot command, it should ensure consistent inline plotting without being affected by the context manager's behavior in subsequent cells. This way, the default style is set, and subsequent plots should display inline as expected.","Hi Sam, I can confirm the above works. However, this doesn't feel like a completely satisfactory solution as it relies on the user having to remember to set `%matplotlib inline` in every notebook. Since inline plotting is default behaviour in current jupyter versions, this is not ideal. Additionally, I have use cases where the `matplotlib.style.context()` manager is used on imported functions, so its use is hidden from the end user, making this bug difficult to spot.","I had the same problem. It took me a long time to figure out why things would stop working _sometimes_. In my humble opinion the workaround suggested above is a bit cumbersome. \r\n\r\n"],"labels":["topic: backends"]},{"title":"[Bug]: tkAgg (and others) event look issue","body":"### Bug summary\n\ntk hangs\/crashes if windows are closed not in reverse order of opened.  This happens in ipython shell.  \r\n\r\nI have no other issues with ipython, only with matplotlib.\n\n### Code for reproduction\n\n```python\n%matplotlib tk\r\nfigure()\r\nfrom matplotlib.pylab import *\r\nion()\r\nplot([0,1])\r\nfigure()\r\nplot([0,1])\r\n\r\n# Then close Window 1.\n```\n\n\n### Actual outcome\n\nWindow 2 becomes non-responsive.\n\n### Expected outcome\n\nThere should be no crash irrespective in what order windows are closed.  \r\n\r\nIn some cases the shell hangs entirely, and the terminal window has to be closed (`^C` or `^Z` do not work).\n\n### Additional information\n\nIt happens 100% of the time.\n\n### Operating system\n\nFedora 38\n\n### Matplotlib Version\n\n3.7.2\n\n### Matplotlib Backend\n\nTkAgg\n\n### Python version\n\n3.11.4 (build from source)\n\n### Jupyter version\n\n8.15.0 (installed from pip)\n\n### Installation\n\npip","comments":["https:\/\/github.com\/ipython\/ipython\/issues\/14155","I can repro the issue on macos; it only occurs in ipython (8.14.0, haven't tried older ones), not in a plain python shell, and goes at least as far back as matplotlib 3.0.3.","It may be present since  prompt-toolkit! >=3 is used in IPython.  Yet I do not know whether the issue is in IPython or in Matplotlib - they just seem to be not happy together.","My guess is that the issue is in https:\/\/github.com\/ipython\/ipython\/blob\/main\/IPython\/terminal\/pt_inputhooks\/tk.py\r\n\r\nWe go through some jigger-pokery to make our mainloop logic work (https:\/\/github.com\/matplotlib\/matplotlib\/blob\/e9f1d7b984488771eff0403585ecb75c0697cf7e\/lib\/matplotlib\/backends\/_backend_tk.py#L513-L525) but I do not remember all of the details of why we do it that may.\r\n\r\nMy guess as to what is going on here is that the input hook is waiting on the \"wrong\" root and the keyboard events that should be going through it never come in to exit the event loop and give control back to the prompt. \r\n\r\nI suspect the signals do not work because the signal handlers that Python installs note they were fired and then set a flag that will be handled the next time that the byte code processing loop runs.  However if the event loop is running, from Python's point of view we are in a c-library call and it is waiting for that to return before it handles the SIGINT!  We have a bunch of logic in the Qt backend (https:\/\/github.com\/matplotlib\/matplotlib\/blob\/e9f1d7b984488771eff0403585ecb75c0697cf7e\/lib\/matplotlib\/backends\/qt_compat.py#L165-L230) to make this work in the Qt case.  We may need something similar for Tk?\r\n\r\nattn @richardsheridan and @daniilS who understand Tk :) ","As a note, the issue seems to be also not present in the `gtk4` backend.","> My guess is that the issue is in https:\/\/github.com\/ipython\/ipython\/blob\/main\/IPython\/terminal\/pt_inputhooks\/tk.py\r\n\r\nI agree with this. It seems to be an unfortunate consequence of `tkinter` conflating windows with the tcl interpreter and IPython needing to rely on its internal global state.  I don't know how to fix it but I think there's nothing to be done here."],"labels":["GUI: tk","third-party integration"]},{"title":"Add support for High DPI displays to wxAgg backend","body":"### Summary\r\n\r\nThis PR adds support to the `wxAgg` backend to corrertly render plots in high DPI displays in all three platforms that the wx toolkit supports: Linux, MACOS and Windows.\r\n\r\nThis PR closes issue #7720\r\n\r\n### Background\r\n\r\nThis PR adds support for high DPI displays using the underlying toolkit support for high DPI displays: For information of wxPython support for High DPI displays, see https:\/\/docs.wxpython.org\/high_dpi_overview.html\r\n\r\nThe wxPython toolkit is built on top of of the C++ wxWidgets toolkit. For a more detailed explanation of support for high DPI displays in the wx ecosystem see the WxWidgets explanation: https:\/\/docs.wxwidgets.org\/3.2\/overview_high_dpi.html\r\n\r\n### Additional details\r\n\r\nThis PR correctly scales plots in high DPI displays, including figure size, font size and marker and line width. This PR also includes reading toolbar icons from svg instead of png to make them sharp at all dpi's. ~I remark this last feature comes with the caveat that automatically changing icon colors for dark themes is not done.~ _[The limitation mentioned in the previous sentence has been removed in the current version of this PR. See discussion below for details. I am crossing out the sentence and adding this note, instead of removing the sentece so the discussion still makes sense]_\r\n\r\n### Additional testing\r\n\r\nThe variety of use cases and features of matplotlib is very large. I welcome additional testing in all platforms as it is conceivable that there may be features that I have not tested and that I have not added support for. Thank you.\r\n\r\n","comments":["I squashed the commits to not pollute history","Is there anything I can do to help merge this?","I gave this a try on Windows, but it didn't seem to work. According to your links, the application needs to set HiDPI awareness in its manifest. We can't really do that however given that we aren't an application, so I think we might need to abstract out the runtime-setting of the awareness from `_tkagg.enable_dpi_awareness` (and not the window procedure replacement as wxAgg should handle that bit for us). I can perhaps look into this some next week if you are not able to.\r\n\r\nI unfortunately do not have a Linux HiDPI setup at the moment to test.","Hello @QuLogic Thank you for spending time on this:\r\n\r\n> the application needs to set HiDPI \r\n\r\nFrom the [MSW documentation](https:\/\/docs.microsoft.com\/en-us\/windows\/win32\/api\/shellscalingapi\/ne-shellscalingapi-process_dpi_awareness?redirectedfrom=MSDN) a Windows script\/application that wants to handle its own scaling --instead of letting the OS do the scaling in a generic way with blurry results-- must let the OS know. This is true regardless of the language the application is written in or any frameworks used. In python this is achieved with the following code:\r\n\r\n```python\r\n    import ctypes\r\n    ctypes.windll.shcore.SetProcessDpiAwareness(1)\r\n```\r\nMy understanding is that this code should be part of the end user's application or script, not set by libraries (e.g. matplotlib) or frameworks (e.g. wx) because it is the user who knows if all the libraries and components they use are capable of handling their own scaling. If the end user set's it, wx, matplotlib and other graphical components should read the actual DPI value and handle scaling in a library specific manner. wx already behaves this way. I believe this PR makes matplotlib behave this way when used in conjunction with wx. \r\n\r\nIf you have a chance, please try adding these lines to your test script and let me know the results. If you encounter any issues I can work with you on them. Thank you.\r\n \r\n #### Additional notes for the record\r\n* A wx multiplatform application would include the above code inside: `if wx.Platform == '__WXMSW__':`\r\n* Using a value of [one](https:\/\/learn.microsoft.com\/en-us\/dotnet\/api\/system.windows.forms.highdpimode?view=windowsdesktop-7.0) in the code above sets _per-process_ dpi awareness, which is sufficient if one has a single monitor or all monitors have the same dpi. If the application wants to handle multiple monitors with different dpi's then one can set _per monitor_ dpi awareness instead: One would call `SetProcessDpiAwareness(3)` per the reference above, and optionally implement a [wx callback in each top level window](https:\/\/docs.wxpython.org\/wx.DPIChangedEvent.html)  to react the event of the window being dragged to a monitor with a different DPI in a way suitable to the application. This may involve changing the layout of widgets, etc.\r\n","When Matplotlib is the one managing windows (i.e., through `pyplot`), then it _is_ the application that should enable HiDPI mode. See the triggers in the Tk backend on the manager for example.","> When Matplotlib is the one managing windows (i.e., through pyplot), then it is the application that should enable HiDPI mode. \r\n\r\nThis makes sense to me\r\n\r\n> See the triggers in the Tk backend on the manager for example.\r\n\r\nIn `_backend_tk.py` I find the block of code\r\n\r\n```\r\nself._window_dpi_cbname = ''\r\nif _tkagg.enable_dpi_awareness(window_frame, window.tk.interpaddr()):\r\n    self._window_dpi_cbname = self._window_dpi.trace_add(\r\n         'write', self._update_window_dpi)\r\n```\r\nThis code calls the function defined at `_tkagg.cpp` which itself does call the MSW library to set awareness to \"per-monitor\" awareness unconditionally.\r\n\r\nTo achieve the same functionality in the wx backend It would be trivial to add the following lines to the wx backend:\r\n\r\n```\r\nif wx.Platform == '__WXMSW__':\r\n    import ctypes\r\n    ctypes.windll.shcore.SetProcessDpiAwareness(3)\r\n```\r\n\r\nBut I do not think in the wx backend case it makes sense to call these lines unconditionally because the typical use of matplotlib with the wx backend is to have figures embedded in larger wx applications rather than in stand alone windows. So I think we need to let the end user retain control of whether dpi awareness should be handled by their application or the OS. What do you think?\r\n\r\nIf you agree we could add these lines as a function to the wx backend that the user can invoke if they so choose. Or perhaps better, to avoid redundancy, we could document the functionality and have the user call the original MSW `SetProcessDPIAwareness` with a value of their choosing.","Is there anything I can do to help merge this?","Thanks for the PR. The text\/plot looks great on macOS. However, for the following code, the initial plot screen doesn't looks correct, and the toolbar also looks a little weird.\r\n```python\r\n>>> import matplotlib\r\n>>> matplotlib.use('wxAgg')\r\n>>> import matplotlib.pyplot as plt\r\n>>> plt.plot([1,2,3,4,5])\r\n>>> plt.show()\r\n```\r\nInitial plot screen from above code\r\n<img src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/12435643\/6a474438-9b85-4129-972b-a345a986a0a5\" width=\"400\">\r\nAfter resize the plot window (drag the edge), the axes area looks great (the toolbar area looks same as above)\r\n<img src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/12435643\/057cb658-d752-46a3-b314-5092fd66d419\" width=\"400\">\r\n\r\n\r\n","Thank you @tianzhuqiao for testing this, and for your feedback. I don't have access to a Mac, but I am going to look into it and try to fix  it and, if you don't mind, I will ask you to please test on a Mac. Thank you in advance. I am currently traveling, so it may take me a few weeks to get back to you.","@jmoraleda, sure, no problem. And `draw_rubberband` may also need to be updated, otherwise, it shows in a wrong location.\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/e470c70e99995b47555402e53a98fb6c815d4dce\/lib\/matplotlib\/backends\/backend_wx.py#L1124\r\n","Thanks. The initial plot and icon size look great on Mac now.\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/12435643\/96a41a6f-eea3-4751-a2b2-7b5b20e9f0a6)\r\n","@tianzhuqiao I believe my last commit fixes the `draw_rubberband` in all platforms. Thank you for pointing this out!","The tests failed because of a problem with a new version of pytest which has now been yanked.  I\u2019m going to close and re-open to restart the CI.","Thanks @jmoraleda , `draw_rubberband` works on macOS now.","> But I do not think in the wx backend case it makes sense to call these lines unconditionally because the typical use of matplotlib with the wx backend is to have figures embedded in larger wx applications rather than in stand alone windows.\r\n\r\nI am a bit curious what this assertion is based on.  My expectation is the opposite in that independent of backend we are going to have many more users of `pyplot` than who are doing embedding in a large GUI (if for no other reason than the barrier for entry is much lower with `pyplot`).  On the other hand, wx is after tk in the fallback list so it is possible it only very rarely gets auto-selected.  However, leaving that aside we do have users of both `pyplot` + wx and embedding + wx so we need to make this work for both.\r\n\r\n>  So I think we need to let the end user retain control of whether dpi awareness should be handled by their application or the OS. What do you think?\r\n\r\nIf we go through https:\/\/github.com\/matplotlib\/matplotlib\/blob\/9618fc6322745834dd098cadecf8e05a0917d498\/lib\/matplotlib\/backends\/backend_wx.py#L43-L48 then we are definitely creating the App not the user.  In that case we should do the helpful thing and enable hi-dpi like the other platforms and backends rather than making users on wx on windows jump through extra hoops.\r\n\r\nA similar bit of logic should probably be pushed to IPython in the case that they make the App.\r\n\r\n[edited to fix markup]","### Brief answer\r\nI think my last commit does the right thing in all cases that we have discussed :-). Please test if you have a chance!\r\n\r\n### Longer answer\r\n@tacaswell Thank you for reviewing this and especially for bringing `_create_wxapp` to my attention. \r\n\r\nI had not paid attention to the fact that this function is only invoked if a `wx.App` has not previously been created. This opens a beautiful path to address simultaneously the requirements of both constituencies:\r\n\r\n* dpi awareness should be set automatically when matplotlib is creating the application. In paticular, matplotlib code should just work out of the box as expected taking full advantage of monitor resolutions, as @QuLogic pointed out above.\r\n* dpi awareness should be set by the end-user application when embedding matplotlib figures in a pre-existing wx application so that the user can decide what best suites them.\r\n\r\n**I just pushed a commit that sets _per-monitor_ dpi awareness inside `_create_wxapp` thus addressing both requirements.**\r\n\r\nNow typical matplotlib code such as:\r\n```python\r\nimport matplotlib\r\nmatplotlib.use('wxAgg')\r\nimport matplotlib.pyplot as plt\r\nplt.plot([1,2,3,4,5])\r\nplt.show()\r\n```\r\njust works out of the box taking advantage of the full monitor resolution as expected. While wx users that embed matplotlib figures in their applications can still set dpi as they wish. \r\n\r\n### Remark\r\nPer MSW documentation, once a process makes an API call to choose how to handle dpi awareness, future calls will be ignored and the initial setting will not be changed:\r\n>  Once you set the DPI awareness for a process, it cannot be changed. \r\n\r\n(https:\/\/learn.microsoft.com\/en-us\/windows\/win32\/api\/shellscalingapi\/ne-shellscalingapi-process_dpi_awareness)\r\n\r\n This is why we shouldn't always set _per-process_ dpi awareness when using the wx backend, since there are applications that do not implement support to handle this in their non-matplotlib windows and would thus break if the O\/S expected them to.\r\n \r\n ","The remaining linter warning is about a line that is too long. That line is a comment containing a url to MS documentation on the topic of setting dpi awareness. I think it is useful to retain it for future reference, but let me know what you think. Thank you."],"labels":["New feature","GUI: wx","topic: dpi and resolution"]},{"title":"[ENH]: Add ggplot2-like style sheets","body":"### Problem\n\n* I want to add a style sheet that accurately mimics ggplot2 styles.\n\n### Proposed solution\n\nI have created two curated _mplstyle_ files that mimic ggplot2's **theme_bw** and **theme_classic** styles.\r\n\r\nIt is provided in https:\/\/github.com\/smortezah\/mplstyle.","comments":["Hi, how would you feel about making a third party library that packages ggplot stylesheets? https:\/\/matplotlib.org\/mpl-third-party\/#colormaps-and-styles\n\nThe reason I'm asking is that in the past it's been hard for us to keep our stylesheets based on external libraries in sync with those libraries b\/c of the differences in release cycles - current policy is we deprecate styles very rarely (like I'm not sure we ever have) and also rarely add new styles because we haven't quite agreed on criteria for adding new styles.\n\n"],"labels":["New feature","topic: styles"]},{"title":"[Bug]: svg.fonttype = 'none' is ignored if patheffects are set","body":"### Bug summary\n\nThis might not be a bug per se but I think a different behaviour would make more sense. Currently the `svg.fonttype` parameter of the SVG backend is ignored if any path effect is set. Though I would argue that it might still desirable to apply path effects to the axis etc and then choose a font which is matching those effects instead of rendering the text with exactly the same effects.\r\n\r\nIn my case I noticed it with the \"xckd\" style plotting which also selects a matching font. But due to the path effects taking precedence the SVG would never use the font making it impossible to find (search) text in the SVG when displayed on a website. \n\n### Code for reproduction\n\n```python\nimport matplotlib\r\nimport matplotlib.pyplot as plt\r\n\r\nwith plt.xkcd():\r\n    plt.rcParams['svg.fonttype'] = 'none'\r\n\r\n    fig = plt.figure()\r\n    fig, ax = plt.subplots()\r\n    ax.annotate(\"Test\", (0.5, 0.5))\r\n    plt.savefig(\"test.svg\")\n```\n\n\n### Actual outcome\n\nInstead of a `text` tag in the SVG the text is rendered as `path`\n\n### Expected outcome\n\nThe text represented by a `text` tag in the SVG.\n\n### Additional information\n\nThe \"problem\" originates in `text.py` line 785 (https:\/\/github.com\/matplotlib\/matplotlib\/blob\/781c6a0e8ac9a42f4079918b91d4310675dc1549\/lib\/matplotlib\/text.py#L785) where the SVG renderer is swapped against the path effects renderer.\r\n\r\nThe behaviour I would prefer could be achieved with the following patch but it feels rather hacky. Any suggestion how to achieve this in a better way would be welcome.\r\n\r\n```\r\ndiff --git a\/lib\/matplotlib\/text.py b\/lib\/matplotlib\/text.py\r\nindex 7a58ce7172..8197910820 100644\r\n--- a\/lib\/matplotlib\/text.py\r\n+++ b\/lib\/matplotlib\/text.py\r\n@@ -782,7 +782,9 @@ class Text(Artist):\r\n                     y = canvash - y\r\n                 clean_line, ismath = self._preprocess_math(line)\r\n \r\n-                if self.get_path_effects():\r\n+                from matplotlib.backends.backend_svg import RendererSVG\r\n+\r\n+                if not (isinstance(renderer._renderer, RendererSVG) and mpl.rcParams['svg.fonttype'] == \"none\") and self.get_path_effects():\r\n                     from matplotlib.patheffects import PathEffectRenderer\r\n                     textrenderer = PathEffectRenderer(\r\n                         self.get_path_effects(), renderer)\r\n```\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.7.2\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip","comments":["I do not think we can ignore path effects for text generically, though there may be some latitude in the specific case of xkcd, as it looks like that may not actually alter text paths in the first place... (It is certainly not super noticeable with default settings if it does)\r\n\r\nPath effects are actually _often_ used to modify text, though, in fact if you look at the [path effects guide](https:\/\/matplotlib.org\/stable\/tutorials\/advanced\/patheffects_guide.html) almost all of the examples of using it _are_ for text.\r\n\r\nSo then, if you have path effects, while in some cases (such as strokes or shadows), there are likely better ways of passing the info on to SVG and keeping things as text, the generic case of path effects are not necessarily trivial to implement in SVG (xkcd actually being among the harder ones to do so with, as it is parameterized and random-seeded)\r\n\r\nIdeally most to all path effects could be implemented in svg and keep text instances, but that is not how the current implementation works for path effects, path effects are applied to mpl paths, and thus when applied to text, those text instances _must_ be paths.\r\n\r\n\r\nThese are a bit longer term projects, though would be welcome additions, if they could work.\r\n\r\n\r\nThat leaves us with options:\r\n  - ignore path effects for text (non-viable, as text is one of the main usecases)\r\n  - current behavior (ignore svg font type = none when path effects are in play) something needs to take precedence, and I don't think it is wrong for path effects to take precedence here.\r\n  - error if font_type is `none` and path effects are applied (which would break a fair amount of existing code)\r\n      - we could downgrade to a warning, but even then it is warning on expected behavior in many instances\r\n\r\nFrom a library perspective I think I currently lean towards status quo in the near term (though implementing path effects in svg and being able to get both, at least _most_ of the time would be better).\r\n\r\nNow, for what you want in this particular case, there is a pretty easy workaround that is explicit and gives you what you probably want:\r\n\r\n```python\r\nwith plt.xkcd():\r\n    plt.rcParams['svg.fonttype'] = 'none'\r\n\r\n    fig = plt.figure()\r\n    fig, ax = plt.subplots()\r\n    ax.annotate(\"Test\", (0.5, 0.5), path_effects=[])\r\n    plt.savefig(\"test_path_effects_none.svg\")\r\n```\r\n\r\nadding `path_effects=[]` to the annotate call negates the path effects applied to the text.\r\n\r\nThis works well for annotate and many other text calls (e.g. titles\/labels\/etc), though it may be a little trickier for tick labels. I think it may be that you have to loop through tick labels after they are created and calling `tick.set_path_effects([])` prior to saving\/drawing... its not _ideal_ but it will work.\r\n","Thanks for the background information on path effects.\r\n\r\n> - current behavior (ignore svg font type = none when path effects are in play) something needs to take precedence, and I don't think it is wrong for path effects to take precedence here.\r\n> - error if font_type is none and path effects are applied (which would break a fair amount of existing code)\r\n>    - we could downgrade to a warning, but even then it is warning on expected behavior in many instances\r\n\r\nFor me this was not at all the expected behavior. Since I manually changed the `svg.fonttype` parameter I expected to see some effect of it. Or potentially a warning that it is ignored since paths effects are already set.\r\nI would have chosen precedence the other way round since path effects (at least sound) more generic than just applying changes to text. Whereas the `svg.fonttype` is just about text. So for me it made sense to be able to enable path effects but then change the text rendering back to font based.\r\n\r\nAnyway, I can live with the workaround you proposed. That is definitely good enough for my use case. Feel free to close this issue."],"labels":["backend: svg","topic: text\/fonts"]},{"title":"[Bug]: Matplotlib font issues on Ubuntu 22.04","body":"### Bug summary\n\n**Issue 1:** Recently, whenever I used `plt.rcParams['font.family'] = 'serif'`, I got the warning `font family ['serif'] not found. Falling back to DejaVu Sans`. Following suggestions given [here](https:\/\/github.com\/matplotlib\/matplotlib\/issues\/13139\/#issue-397587794), I deleted `~\\.cache\\matplotlib`, but this worked only partially: \r\n**Issue 2:** Even though the output of `plt.rcParams['font.serif']` contains multiple fonts (see below, under additional information), setting any font other than `'DejaVu Serif'` now gives the warning `findfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Roman` (or whichever font I try)\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\nplt.rcParams['font.family'] = 'serif'\r\nplt.rcParams['font.serif'] = 'Computer Modern Roman'\r\n\r\nfig, ax = plt.subplots()\n```\n\n\n### Actual outcome\n\n```\r\nfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Romanfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Romanfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Romanfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Romanfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Romanfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Romanfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Roman\r\n\r\n\r\n\r\n\r\n\r\n\r\nfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Roman\r\nfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Roman\r\nfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Roman\r\nfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Roman\r\nfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Roman\r\nfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Roman\r\nfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Roman\r\nfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Roman\r\nfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Roman\r\nfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Roman\r\nfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Roman\r\nfindfont: Generic family 'serif' not found because none of the following families were found: Computer Modern Roman\r\n```\n\n### Expected outcome\n\nFigure with Computer Modern Roman font\n\n### Additional information\n\nOutput of `plt.rcParams['font.serif']`:\r\n\r\n```\r\n['DejaVu Serif',\r\n 'Bitstream Vera Serif',\r\n 'Computer Modern Roman',\r\n 'New Century Schoolbook',\r\n 'Century Schoolbook L',\r\n 'Utopia',\r\n 'ITC Bookman',\r\n 'Bookman',\r\n 'Nimbus Roman No9 L',\r\n 'Times New Roman',\r\n 'Times',\r\n 'Palatino',\r\n 'Charter',\r\n 'serif']\r\n```\r\n\r\nIf I remember correctly, in an earlier version (can't remember which version exactly, sorry) I didn't have any trouble using serif fonts.\r\n\r\nNot sure whether this is relevant, but I'm using Spyder 5.4.3.\n\n### Operating system\n\nUbuntu 22.04\n\n### Matplotlib Version\n\n3.7.1\n\n### Matplotlib Backend\n\nQt5Agg\n\n### Python version\n\n3.9.15\n\n### Jupyter version\n\nn\/a\n\n### Installation\n\nconda","comments":["I wonder if you found a solution?\r\n","> I wonder if you found a solution?\r\n\r\nNope, nothing yet","The issue is that Matplotlib is unable to find a font named `'Computer Modern Roman'` installed.\r\n\r\nTo see a list of the fonts that Matplotlib found on your system use:\r\n\r\n```python\r\nimport matplotlib.font_manager as fm\r\nprint(sorted(fm.get_font_names()))\r\n```\r\n\r\nMatplotlib caches installed fonts the first time it is imported and (if I recall correctly) removing the cache is the best way to force Matplotlib to (re)discover installed fonts.\r\n\r\nOn one hand, we may be a bit overly enthusiastic about warning everytime we fail to find a font, but it seems better to over-warn about that than to only warn once per process and make it easy to miss.\r\n\r\n---\r\n\r\n```\r\nIn [1]: import matplotlib.pyplot as plt\r\n   ...:\r\n   ...: plt.rcParams['font.family'] = 'serif'\r\n   ...: plt.rcParams['font.serif'] = 'Computer Modern Roman'\r\n   ...:\r\n   ...: print(plt.rcParams['font.serif'])\r\n['Computer Modern Roman']\r\n```\r\n\r\nso I am a bit confused by the second part of this bug report.","Thanks, that all looks very sensible. The point is that this doesn't seem to work for me: even though initially (before changing anything in `plt.rcParams`), `plt.rcParams['font.serif']` returns a list of options (including `Computer Modern Roman`), Matplotlib won't let me choose anything other than `DejaVu Serif`. \r\n\r\nI'm fairly sure that the other fonts in the list are installed alright, especially `Computer Modern Roman`, as this is what's used by LaTeX. When I set `plt.rcParams['usetex'] = True`, Matplotlib has no trouble finding `Computer Modern Roman`.\r\n\r\nHow can I tell Matplotlib where to look for these fonts?","The `rcParams` list the fonts that someone thinks should be used, they are not related to the installed fonts.\r\n\r\nCan you please check the output of \r\n``` python\r\nimport matplotlib.font_manager as fm\r\nprint(sorted(fm.get_font_names()))\r\n```\r\n\r\nFor the usetex case, it is not Matplotlib that finds the font, it is LaTeX, which has a completely different font search path mechanism.","Ah, thanks, that explains a lot! \r\nThe output you asked for:\r\n```\r\n['Abyssinica SIL', 'Ani', 'AnjaliOldLipi', 'C059', 'Caladea', 'Carlito', 'Chandas', 'Chilanka', 'D050000L', 'DejaVu Math TeX Gyre', 'DejaVu Sans', 'DejaVu Sans Display', 'DejaVu Sans Mono', 'DejaVu Serif', 'DejaVu Serif Display', 'Dhurjati', 'Droid Sans Fallback', 'Dyuthi', 'FreeMono', 'FreeSans', 'FreeSerif', 'Gargi', 'Garuda', 'Gayathri', 'Gentium', 'Gentium Basic', 'Gentium Book Basic', 'GentiumAlt', 'Gidugu', 'Gubbi', 'Gurajada', 'Inconsolata', 'Jamrul', 'KacstArt', 'KacstBook', 'KacstDecorative', 'KacstDigital', 'KacstFarsi', 'KacstLetter', 'KacstNaskh', 'KacstOffice', 'KacstOne', 'KacstPen', 'KacstPoster', 'KacstQurn', 'KacstScreen', 'KacstTitle', 'KacstTitleL', 'Kalapi', 'Kalimati', 'Karumbi', 'Keraleeyam', 'Khmer OS', 'Khmer OS System', 'Kinnari', 'LKLUG', 'LakkiReddy', 'Laksaman', 'Liberation Mono', 'Liberation Sans', 'Liberation Sans Narrow', 'Liberation Serif', 'Likhan', 'Linux Biolinum Keyboard O', 'Linux Biolinum O', 'Linux Libertine Display O', 'Linux Libertine Initials O', 'Linux Libertine Mono O', 'Linux Libertine O', 'Lohit Assamese', 'Lohit Bengali', 'Lohit Devanagari', 'Lohit Gujarati', 'Lohit Gurmukhi', 'Lohit Kannada', 'Lohit Malayalam', 'Lohit Odia', 'Lohit Tamil', 'Lohit Tamil Classical', 'Lohit Telugu', 'Loma', 'Mallanna', 'Mandali', 'Manjari', 'Meera', 'Mitra ', 'Mukti', 'NATS', 'NTR', 'Nakula', 'Navilu', 'Nimbus Mono PS', 'Nimbus Roman', 'Nimbus Sans', 'Nimbus Sans Narrow', 'Norasi', 'Noto Kufi Arabic', 'Noto Looped Lao', 'Noto Looped Lao UI', 'Noto Looped Thai', 'Noto Looped Thai UI', 'Noto Mono', 'Noto Music', 'Noto Naskh Arabic', 'Noto Naskh Arabic UI', 'Noto Nastaliq Urdu', 'Noto Rashi Hebrew', 'Noto Sans', 'Noto Sans Adlam', 'Noto Sans Adlam Unjoined', 'Noto Sans Anatolian Hieroglyphs', 'Noto Sans Arabic', 'Noto Sans Arabic UI', 'Noto Sans Armenian', 'Noto Sans Avestan', 'Noto Sans Balinese', 'Noto Sans Bamum', 'Noto Sans Bassa Vah', 'Noto Sans Batak', 'Noto Sans Bengali', 'Noto Sans Bengali UI', 'Noto Sans Bhaiksuki', 'Noto Sans Brahmi', 'Noto Sans Buginese', 'Noto Sans Buhid', 'Noto Sans CJK JP', 'Noto Sans Canadian Aboriginal', 'Noto Sans Carian', 'Noto Sans Caucasian Albanian', 'Noto Sans Chakma', 'Noto Sans Cham', 'Noto Sans Cherokee', 'Noto Sans Coptic', 'Noto Sans Cuneiform', 'Noto Sans Cypriot', 'Noto Sans Deseret', 'Noto Sans Devanagari', 'Noto Sans Devanagari UI', 'Noto Sans Display', 'Noto Sans Duployan', 'Noto Sans Egyptian Hieroglyphs', 'Noto Sans Elbasan', 'Noto Sans Elymaic', 'Noto Sans Ethiopic', 'Noto Sans Georgian', 'Noto Sans Glagolitic', 'Noto Sans Gothic', 'Noto Sans Grantha', 'Noto Sans Gujarati', 'Noto Sans Gujarati UI', 'Noto Sans Gunjala Gondi', 'Noto Sans Gurmukhi', 'Noto Sans Gurmukhi UI', 'Noto Sans Hanifi Rohingya', 'Noto Sans Hanunoo', 'Noto Sans Hatran', 'Noto Sans Hebrew', 'Noto Sans Imperial Aramaic', 'Noto Sans Indic Siyaq Numbers', 'Noto Sans Inscriptional Pahlavi', 'Noto Sans Inscriptional Parthian', 'Noto Sans Javanese', 'Noto Sans Kaithi', 'Noto Sans Kannada', 'Noto Sans Kannada UI', 'Noto Sans Kayah Li', 'Noto Sans Kharoshthi', 'Noto Sans Khmer', 'Noto Sans Khmer UI', 'Noto Sans Khojki', 'Noto Sans Khudawadi', 'Noto Sans Lao', 'Noto Sans Lao UI', 'Noto Sans Lepcha', 'Noto Sans Limbu', 'Noto Sans Linear A', 'Noto Sans Linear B', 'Noto Sans Lisu', 'Noto Sans Lycian', 'Noto Sans Lydian', 'Noto Sans Mahajani', 'Noto Sans Malayalam', 'Noto Sans Malayalam UI', 'Noto Sans Mandaic', 'Noto Sans Manichaean', 'Noto Sans Marchen', 'Noto Sans Masaram Gondi', 'Noto Sans Math', 'Noto Sans Mayan Numerals', 'Noto Sans Medefaidrin', 'Noto Sans Meetei Mayek', 'Noto Sans Mende Kikakui', 'Noto Sans Meroitic', 'Noto Sans Miao', 'Noto Sans Modi', 'Noto Sans Mongolian', 'Noto Sans Mono', 'Noto Sans Mro', 'Noto Sans Multani', 'Noto Sans Myanmar', 'Noto Sans Myanmar UI', 'Noto Sans NKo', 'Noto Sans Nabataean', 'Noto Sans New Tai Lue', 'Noto Sans Newa', 'Noto Sans Nushu', 'Noto Sans Ogham', 'Noto Sans Ol Chiki', 'Noto Sans Old Hungarian', 'Noto Sans Old Italic', 'Noto Sans Old North Arabian', 'Noto Sans Old Permic', 'Noto Sans Old Persian', 'Noto Sans Old Sogdian', 'Noto Sans Old South Arabian', 'Noto Sans Old Turkic', 'Noto Sans Oriya', 'Noto Sans Oriya UI', 'Noto Sans Osage', 'Noto Sans Osmanya', 'Noto Sans Pahawh Hmong', 'Noto Sans Palmyrene', 'Noto Sans Pau Cin Hau', 'Noto Sans PhagsPa', 'Noto Sans Phoenician', 'Noto Sans Psalter Pahlavi', 'Noto Sans Rejang', 'Noto Sans Runic', 'Noto Sans Samaritan', 'Noto Sans Saurashtra', 'Noto Sans Sharada', 'Noto Sans Shavian', 'Noto Sans Siddham', 'Noto Sans SignWriting', 'Noto Sans Sinhala', 'Noto Sans Sinhala UI', 'Noto Sans Sogdian', 'Noto Sans Sora Sompeng', 'Noto Sans Soyombo', 'Noto Sans Sundanese', 'Noto Sans Syloti Nagri', 'Noto Sans Symbols', 'Noto Sans Symbols2', 'Noto Sans Syriac', 'Noto Sans Tagalog', 'Noto Sans Tagbanwa', 'Noto Sans Tai Le', 'Noto Sans Tai Tham', 'Noto Sans Tai Viet', 'Noto Sans Takri', 'Noto Sans Tamil', 'Noto Sans Tamil Supplement', 'Noto Sans Tamil UI', 'Noto Sans Telugu', 'Noto Sans Telugu UI', 'Noto Sans Thaana', 'Noto Sans Thai', 'Noto Sans Thai UI', 'Noto Sans Tifinagh', 'Noto Sans Tifinagh APT', 'Noto Sans Tifinagh Adrar', 'Noto Sans Tifinagh Agraw Imazighen', 'Noto Sans Tifinagh Ahaggar', 'Noto Sans Tifinagh Air', 'Noto Sans Tifinagh Azawagh', 'Noto Sans Tifinagh Ghat', 'Noto Sans Tifinagh Hawad', 'Noto Sans Tifinagh Rhissa Ixa', 'Noto Sans Tifinagh SIL', 'Noto Sans Tifinagh Tawellemmet', 'Noto Sans Tirhuta', 'Noto Sans Ugaritic', 'Noto Sans Vai', 'Noto Sans Wancho', 'Noto Sans Warang Citi', 'Noto Sans Yi', 'Noto Sans Zanabazar Square', 'Noto Serif', 'Noto Serif Ahom', 'Noto Serif Armenian', 'Noto Serif Balinese', 'Noto Serif Bengali', 'Noto Serif CJK JP', 'Noto Serif Devanagari', 'Noto Serif Display', 'Noto Serif Dogra', 'Noto Serif Ethiopic', 'Noto Serif Georgian', 'Noto Serif Grantha', 'Noto Serif Gujarati', 'Noto Serif Gurmukhi', 'Noto Serif Hebrew', 'Noto Serif Hmong Nyiakeng', 'Noto Serif Kannada', 'Noto Serif Khmer', 'Noto Serif Khojki', 'Noto Serif Lao', 'Noto Serif Malayalam', 'Noto Serif Myanmar', 'Noto Serif Sinhala', 'Noto Serif Tamil', 'Noto Serif Tamil Slanted', 'Noto Serif Tangut', 'Noto Serif Telugu', 'Noto Serif Thai', 'Noto Serif Tibetan', 'Noto Serif Yezidi', 'Noto Traditional Nushu', 'OpenSymbol', 'P052', 'Padauk', 'Padauk Book', 'Pagul', 'Peddana', 'Phetsarath OT', 'Ponnala', 'Pothana2000', 'Potti Sreeramulu', 'Purisa', 'Quicksand', 'Quicksand Light', 'Quicksand Medium', 'Rachana', 'RaghuMalayalamSans', 'Ramabhadra', 'Ramaraja', 'Rasa', 'RaviPrakash', 'Rekha', 'STIXGeneral', 'STIXNonUnicode', 'STIXSizeFiveSym', 'STIXSizeFourSym', 'STIXSizeOneSym', 'STIXSizeThreeSym', 'STIXSizeTwoSym', 'Saab', 'Sahadeva', 'Samanata', 'Samyak Devanagari', 'Samyak Gujarati', 'Samyak Malayalam', 'Samyak Tamil', 'Sarai', 'Sawasdee', 'Source Code Pro', 'Sree Krushnadevaraya', 'Standard Symbols PS', 'Suranna', 'Suravaram', 'Suruma', 'Syamala Ramana', 'TenaliRamakrishna', 'Tibetan Machine Uni', 'Timmana', 'Tlwg Mono', 'Tlwg Typewriter', 'Tlwg Typist', 'Tlwg Typo', 'URW Bookman', 'URW Gothic', 'Ubuntu', 'Ubuntu Condensed', 'Ubuntu Mono', 'Umpush', 'Uroob', 'Vemana2000', 'Waree', 'Yrsa', 'Z003', 'aakar', 'cmb10', 'cmex10', 'cmmi10', 'cmr10', 'cmss10', 'cmsy10', 'cmtt10', 'dsrom10', 'esint10', 'eufm10', 'mry_KacstQurn', 'msam10', 'msbm10', 'ori1Uni', 'padmaa', 'padmaa-Bold.1.1', 'rsfs10', 'stmary10', 'wasy10']\r\n```\r\nAnd indeed, this doesn't include `Computer Modern Roman`, or `Times New Roman`, or any of the other fonts listed by `plt.rcParams['font.serif']`. Is there any way that I can tell Matplotlib where to look for these fonts?","If I am not wrong, `cmr10` is Computer Modern Roman, although maybe not resizable (font size 10).","Of course, you're right, I overlooked that one.\r\nStill, is there a way to point Matplotlib to all these other serif fonts on my PC?"],"labels":["topic: text\/fonts"]},{"title":"[MNT]: `[ci doc]` doesn't skip Github tests.","body":"### Summary\n\nWhen putting `[ci doc]` in the commit message, the GitHub tests all still run.  \r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/389a7e8889c25d05afab4e9ba7ce43e56cf82a99\/.github\/workflows\/tests.yml#L39 is supposed to cause a skip, but I suspect https:\/\/github.com\/matplotlib\/matplotlib\/pull\/25145 broke this?\r\n\r\nping @ksunden\n\n### Proposed fix\n\n_No response_","comments":["That PR is the one that _introduced_ the behavior to skip on `[ci doc]`, prior to that it wasn't accounted for.\r\n\r\nI tested it in that PR by adding an empty commit and it didn't run gha (appveyor still ran, I believe)\r\n\r\n\r\nAs far as I can tell, it worked for the most recent commit of #26669  (a84ab3d54773600eba0d3b14104a1b81c10a310c).\r\n\r\nNote that it does only take into account the most recent commit message, not all commits of the PR.\r\n\r\nAlso, only the _tests_ workflow is skipped, not _all gha_ workflows, so linting\/pr cleanliness, mypy, etc still do run, but those are all pretty quick checks.\r\n","Quoting myself from https:\/\/github.com\/matplotlib\/matplotlib\/pull\/25383#issuecomment-1454821205\r\n\r\n> > the GitHub Actions tests still ran!\r\n> \r\n> Yeah, I've been digging around the docs for that, as I've noticed it before. From what I can tell, `head_commit` is a property of a [push event](https:\/\/docs.github.com\/webhooks-and-events\/webhooks\/webhook-events-and-payloads#push), but not of a [pull_request event](https:\/\/docs.github.com\/webhooks-and-events\/webhooks\/webhook-events-and-payloads#pull_request). So possibly it just can't work for PR CI?\r\n\r\n","Hmmm.... I mean just looking at #26669, that does not show the tests as having run for the PR status checks, so it doesn't seem to be a _universal_ thing, but perhaps it doesn't work on initial opening of the PR, but does for subsequent pushes?\r\n\r\nWould have to test it out to see the boundaries.","#26669 only touches files under `doc` and `galleries`, so will also be affected by these lines:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/389a7e8889c25d05afab4e9ba7ce43e56cf82a99\/.github\/workflows\/tests.yml#L15-L18","[2065f14](https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26629\/commits\/2065f149811ed87d6aed6498f8855ecb6dfb3726) ran all the Github tests despite the commit message being `[ci doc]`\r\n\r\nHowever, I did not make the _initial_ commit have this in the commit message.  Is that the difference?  ","Sorry, I meant #25175 broke this.  \r\n\r\nthe logic is indeed different: if `github.event_name == 'workflow_dispatch' ` is `True` then the workflow runs, even if '[ci doc]' is in the commit message.  Is it possible `workflow_dispatch` is True in these runs?  From the docs it seems it should not be, but??","\"workflow_dispatch\" is the keyword for \"manually run action\", i.e. running the action by clicking the \"Run workflow\" button in the GHActions web UI.\r\n\r\nI think if you are asking explicitly to run a workflow, it should run, regardless of whether the last commit has a `[ci skip]` in it or not, so I think that logic is sound.\r\n\r\nI do wonder if \"ignore paths\" causes empty commits to skip, which made it look like it was working when I was testing it, though.","The `paths_ignore` was added at #25261, so more recently than the #25145 testing."],"labels":["Maintenance","CI: testing"]},{"title":"[MNT]: Inconsistent API Figure.suptitle()","body":"### Summary\n\n@story645 noted in https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26629#discussion_r1314387831\r\n\r\nWhy is it `Figure.suptitle()` and not `Figure.set_suptitle()`. Same with `Figure.supxlabel()` \/ `Figure.supylabel()`.\r\n\r\nAnd related: Should we do something about this?\n\n### Proposed fix\n\n_No response_","comments":["> Should we do something about this?\r\n\r\nI know it's ugly, but adding the get_{property} methods as aliases would preserve consistency. \r\n\r\nI agree w\/ @jklymak that property versions like  `ax.xlabel` would be nice https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26629#discussion_r1315116363 and that's something folks have been asking for for ages, that instead of {get,set}_property, they could behave like python properties - but that's also a project and a half. \r\n\r\n","@jklymak proposed set-less functions `ax.xlabel(name)`, not properties `ax.xlabel = name`. Properties would be much more difficult because we often have optional parameters. I can see the argument for `xlabel()`. Semantically, this is more a declarative style compared to the imperative `set_*`. We'd also move logic closer to `pyplot` so that for setters they are equivalent `plt.xlabel(name)` \/ `ax.xlabel(name)`. This could be nice, because we already have this parallelism for the functions adding data (like `plot()`). OTOH, we'd have to decide on getters. I don't think we want the MATLABism of pyplot \"calling a function without arguements returns the current value\". IMHO we still have to stick with getters. But that's ok; they are much less used.\r\n\r\nThat said, this would be a major API overhaul, and we'd have yet another way. While it's reasonable on its own. We should carefully decide wether we want that additional API surface, whether we want to afford this change knowing that there is more to come e.g. mpl-gui, and if we are touching on the API whether other patterns like e.g. method chaining (`plot(x, y).xlabel('the x').ylabel('the y')` are an option.","> @jklymak proposed set-less functions ax.xlabel(name), not properties ax.xlabel = name. \n\nYeah, I should have said property-like b\/c I was thinking of the pyplot pattern where the function is both the getter and setter. Which yeah, we'd want for consistency between the two APIs. "],"labels":["Maintenance"]},{"title":"[ENH]: Remove some default keymaps","body":"### Problem\n\nCurrently, the default rcParams define a lot of aliases for some keymaps, which make the keys unavailable for other interactive purposes (i.e. it is tricky to have custom key_press_events that bind to those keys -- in theory one could always modify rcParams to remove the default keybindings, but that can confuse other end users which may be used to the default behavior of the keymaps).\r\n\r\nI would thus suggest removing some of the default keymaps to make more of them available for custom key_press_events.  A concrete proposal is below (although I realize each user may be used to different keymaps and thus any change is likely going to make someone unhappy).\n\n### Proposed solution\n\n- fullscreen (f, ctrl+f):  I think this is relatively rarely used and we could just stick to \"ctrl+f\", or even just remove any default keymap as the window manager may already have its own keymap for that purpose.\r\n- home (h, r, home):  I'd keep just \"h\" or \"home\".  (I'm used to \"h\", but \"home\" seems OK too.)\r\n- back (left, c, backspace, mouse back) and forward (right, v, mouse forward): I'd definitely remove \"c\" and \"v\" (unless there are clear mnemonics associated to them, which I can't think of) and would also suggest removing \"backspace\" (which has no equivalent for \"forward\", and which I've have wanted for other purposes previously.  Also note the slightly strange asymmetry between \"home\" and \"back\/forward\": it would perhaps have made sense to bind them either to \"home\/pageup\/pagedown\", or to \"up\/left\/right\", but perhaps that's too disruptive.\r\n- pan (p), zoom (o), help (f1), grid (g), grid_minor (G): single keymaps, no big reason for changing them I'd say.\r\n- xscale->log (l), yscale->log (k, L): could remove one of k or L, but no strong opinion here.\r\n- save (s, ctrl+s): we could possibly drop s and add cmd+s (for macos), no strong opinion.\r\n- quit (ctrl+w, cmd+w, q): for better or worse I have muscle memory for \"q\" even though we should probably have stuck to the more standard ctrl+w\/cmd+w...\r\n- copy (ctrl+c, cmd+c): seems standard, toolmanager-only.","comments":["It seems, we try to support two patterns:\r\n1) Standard Application \/ Window manager shortcuts, e.g. `Ctrl+...`, `Home`, ...\r\n2) Single-letter shortcuts. These are non-standard. Many applications can't use them because users need to be able to type text. OTOH, they are faster to type.\r\n\r\nWe may question whether we want\/need the duality.\r\n\r\nFor (1) we should check what the typical defaults are across platforms. Some comments:\r\n\r\n- F11 is common for fullscreen as well.\r\n- Check whether all major target platforms have a builtin fullscreen - only if that's the case, remove the fullscreen shortcut\r\n- Alt+Left\/Right are common for forward\/backward\r\n- I'd remove the log shortcuts. You'll likely know beforehand whether you want log scales.\r\n\r\nThere's also a discoverability issue. I haven't been able to find out the shortcuts from within a (Qt) Figure window. matplotlibrc mentions\r\n\r\n> #keymap.help: f1                # display help about active tools\r\n\r\nwhich maps to `ToolHelpBase`, but is not active - without checking likely a toolbar2\/toolmanager topic. But irrespective of the reason: just saying, it's hard to find the shortcuts. It'd be also an option to add them to the tool button tooltips (at least where we have the buttons).","> I'd remove the log shortcuts. You'll likely know beforehand whether you want log scales.\r\n\r\nA quick switching between linear and log is something I've often taken advantage of for data whose distribution is unclear.\r\n\r\n> #keymap.help: f1 # display help about active tools\r\n\r\nThis is indeed toolmanager-only; we could \"easily\" support it in toolbar2 as well, just like we could support keymap.copy as well (the implementations are already there, it's just moving a bunch of code around).","> fullscreen (f, ctrl+f): I think this is relatively rarely used and we could just stick to \"ctrl+f\", or even just remove any default keymap as the window manager may already have its own keymap for that purpose.\r\n\r\n<kbd>f<\/kbd> is used in most video streaming sites these days, I think. <kbd>Ctrl+f<\/kbd> is a bit odd as it's usually find (or forward in vim, I suppose.)"],"labels":["New feature"]},{"title":"fix set_pickradius and set_picker conflict","body":"## PR summary\r\nFix conflict with _pickradius \"losing\" its value when set_picker was used after set_pickradius for 2D Lines.\r\nSet_picker now setting value as described in documentation (float type for _pickradius)\r\n\r\n## PR \r\n- [x] \"closes #26507\" \r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/gallery\/event_handling\/legend_picking.html)\r\n- [N\/A] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [N\/A ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-docstrings) guidelines\r\n\r\n<!--\r\n\r\n- The PR title should summarize the changes, for example \"Raise ValueError on\r\n  non-numeric input to set_xlim\".  Avoid non-descriptive titles such as\r\n  \"Addresses issue #8576\".\r\n\r\n- The summary should provide at least 1-2 sentences describing the pull request\r\n  in detail (Why is this change required?  What problem does it solve?) and\r\n  link to any relevant issues.\r\n\r\n- If you are contributing fixes to docstrings, please pay attention to\r\n  https:\/\/matplotlib.org\/stable\/devel\/documenting_mpl.html#formatting-conventions.  In particular,\r\n  note the difference between using single backquotes, double backquotes, and\r\n  asterisks in the markup.\r\n\r\nWe understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.\r\n-->\r\n","comments":["`Artist.set_picker` [explicitly](https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.artist.Artist.set_picker.html#matplotlib.artist.Artist.set_picker) accepts both `None` and bool inputs.\r\n\r\nHowever, `Line2D.set_picker` [is not documented](https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D.set_picker) to accept these types.\r\n\r\nMy instinct is to be in favor of supporting them, as they are supported by the superclass, however, I think that we should also update the docstring (and type hints, for that matter).","should I update this in this PR? Or maybe start a feature type issue with this?","I would lean toward it being done together, but yeah, some care to be taken in making it behave as expected (with some weight towards existing behavior, at least for the case of `float` input)\r\n\r\nAlso consider integer input (e.g. `5` in the original report), `isinstance(5, float)` is false...\r\n\r\nBut further beware of `isinstance(True, int)`, which is true.\r\n\r\nWe may have to explicitly handle the None\/boolean cases here instead.","actually, when I set a integer value, `isinstance(x, float)` returns true, so it fixes the original report (I tested it). I don't know exactly why this happens but I found some people trying to check if a input were `int` or `float` and `isinstance` wasn't working for them. \r\nI could do something like:\r\n```\r\nif float(i).is_integer():\r\n        \/\/ int values\r\n    else:\r\n        \/\/ float values\r\n```\r\nbut I don't know if it's necessary. What do you think?","`isinstance(3, float)` certainly returns `False`, so not sure what you mean?\r\n\r\ncertainly you can pass the otherwise equivalent `3.0` which will return `True`, but it is possible to pass an int which does not pass the `isinstance` check. and also it is certain that if we want special handling for bools we have to be careful of `isinstance` checks for ints still too.\r\n\r\nIt is not the case that integers need to be handled differently than floats, other than that bools count as integers.","hello, I'm having a problem with matplotlib installation in my ve, i think it's a problem with my operational system and I'll have to format my computer, but I'm waiting till the end of semester for it. To get this PR accepted I should change this details you mentioned, right? "],"labels":["topic: legend"]},{"title":"[MNT]: Hatch density being int or float?","body":"### Summary\r\n\r\nThe typing makes it clear that both are used.\r\n\r\n`density` of `Path.hatch` is typed as `float`. This is then passed to `hatch.get_path`, where it is typed as `int` and then does:\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/8d56b9cc4d0ab62f7077e7a5483f69594f4d7f58\/lib\/matplotlib\/hatch.py#L205-L208\r\n\r\n`hatch_type` is one of the hatch methods and typically has a line like: https:\/\/github.com\/matplotlib\/matplotlib\/blob\/8d56b9cc4d0ab62f7077e7a5483f69594f4d7f58\/lib\/matplotlib\/hatch.py#L16\r\n\r\nAs seen it is possible to pass a float until here. \r\n\r\n### Proposed fix\r\n\r\nI see two solutions:\r\n\r\n1. Type `density` of `Path.hatch` as `int`. This makes it consistent and there are no consequences.\r\n2. Type  `density` elsewhere as `float` and remove the `int(density)` in `get_path`. This will work properly from a typing pespective, but change the appearance. For example, using `Path.hatch(\"\/xX\/xX\", 1.9)` will change `num_lines` of `NorthEastHatch` from `6*int(1.9) = 6` to `int(6*1.9) = 11`. However, it will also allow a more detailed control of the density in a more natural way.","comments":["The other place where we use it is in `backend_bases.GraphicsContextBase.get_hatch_path`, which currently passes to `Path.hatch` using density as a floating-point `6.0`, so there is some indication that \"float\" should be allowed.\r\n\r\nPerhaps we could do this the slightly slower version of (2), which is to do something like:\r\n\r\n```python\r\nif int(density) != density:\r\n    warnings.warn(\"Passing floating point density will result in a behavior change\", category=FutureWarning)\r\n```\r\n\r\n(May want to expand on what the behavior change will entail)\r\n\r\nBut then leave the cast to int as is for a release or two such that warnings can be issued.\r\n\r\nIts a bit messy, but it may beat not warning and changing behavior","How is this going? I'd appreciate if I could try to solve this issue. It would be a good opportunity to understand better how some variable types operate inside the project.","First and foremost there's a design decision to be made.\r\n\r\nI agree with @ksunden's proposal. Concecptually, a floating point hatch is reasonable. In fact, the current logic is rather surpising: passing 1 and 1.5 as hatch density gives the same result. There's no reason we have to limit density to int. The transition path is also reasonable. The warning should be more detailed."],"labels":["Maintenance","topic: hatch"]},{"title":"[Doc]: regression in stable\/api\/index","body":"### Documentation Link\r\n\r\nhttps:\/\/matplotlib.org\/stable\/api\/index versus https:\/\/matplotlib.org\/devdocs\/api\/index.html\r\n\r\n### Problem\r\n\r\nThere was some cleanup of https:\/\/matplotlib.org\/devdocs\/api\/index.html by @timhoffm in #26402, but I feel it went too far.  For instance, there used to be a small plot on the API page to orient users as to the basic usage pattern.  I find the current version very terse, and not helpful to new users.  You can argue that an API page should be terse, however our API is actually pretty strange and subject to confusion, so I think getting users on the right path here is helpful.  \r\n\r\n### Suggested improvement\r\n\r\n* should at least include the small example again\r\n* be a bit more verbose about the two APIs.  \r\n* include `subplot_mosaic` on the same level as `subplots`.  ","comments":["I'd rather just have a very large link at the top: to learn how to use this, see quick start\/user guide. \nI kinda think the teach by example isn't much better than the stack overflow cause it's still missing contextualization of concept. And if we were gonna do contextualization on the API page then it should be happening within the explanation of each API and not before.","The original goal of the simple example was to provide a quick map of the API - create a Figure and Axes, use the Axes.  Previously there was nothing to guide users to the Axes page.  The current version does that using words, but those words are pretty abstract if you aren't familiar with the library.  ","> The current version does that using words, but those words are pretty abstract if you aren't familiar with the library.\r\n\r\nIf you aren't familiar with the library, the *API reference* should not be your starting point. We redirect such people:\r\n\r\n> See [Matplotlib Application Interfaces (APIs)](https:\/\/matplotlib.org\/devdocs\/users\/explain\/figure\/api_interfaces.html#api-interfaces) for a more detailed description of both and their recommended use cases.\r\n\r\nand if you will, add @story645's proposal\r\n\r\n> I'd rather just have a very large link at the top: to learn how to use this, see quick start\/user guide.","> If you aren't familiar with the library, the API reference should not be your starting point. We redirect such people:\r\n\r\nBy that logic there should be no discussion of the two API types here at all, which we decided quite a while ago was untenable.  ","> By that logic there should be no discussion of the two API types here at all, which we decided quite a while ago was untenable.\r\n\r\nThe basic discussion was there to signpost\/roadmap where people need to go when they hit the landing page. Including folks who've learned a ton of pyplot via examples so may not know the name of what they're using but can pattern match to it -> which is why I think a teeny tiny no picture need code example could be useful. ","What is the rationale for not showing the picture that results from the code?   Clutter and succinctness doesn't make sense, because there is _nothing_ else on the page.  ","> What is the rationale for not showing the picture that results from the code\n\nBecause the goal here isn't to show what the code produces, but to highlight the differences in API. So the worry, especially if there's a lot going on in the figure, is that the figure contents will distract from the code. \nGranted, I'm OK with teeny tiny can fit in table stripped down figs that show that these interfaces yield the same thing."],"labels":["Documentation"]},{"title":"[Doc]: Improve legend loc and bbox_to_anchor documentation","body":"### Documentation Link\n\nhttps:\/\/matplotlib.org\/devdocs\/api\/_as_gen\/matplotlib.axes.Axes.legend.html#matplotlib.axes.Axes.legend\n\n### Problem\n\nInspired by #26612\r\n\r\n> 3. [Legends](https:\/\/stackoverflow.com\/questions\/4700614\/how-to-put-the-legend-outside-the-plot\/43439132#43439132): Replace [confusing terminology](https:\/\/stackoverflow.com\/questions\/25068384\/bbox-to-anchor-and-loc-in-matplotlib) like bbox_to_anchor etc, and make the legend positioning simpler\n\n### Suggested improvement\n\n### Parameter *loc*\r\n\r\n- Explicitly state that the locations are positions within a given box (configurable via bbox_to_anchor, default: Axes box)\r\n- Replace\r\n  > The strings 'upper left', 'upper right', 'lower left', 'lower right' place the legend at the corresponding corner of the axes.\r\n  > The strings 'upper center', 'lower center', 'center left', 'center right' place the legend at the center of the corresponding edge of the axes.\r\n  > The string 'center' places the legend at the center of the axes.\r\n\r\n  By Add a visual similar to the cheat sheet\r\n  ![grafik](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/76ff7699-7434-493d-b124-d90bf60e732e)\r\n  but with the string names in the respective positions.\r\n\r\n### Parameter *bbox_to_anchor*\r\n\r\n- Make it more clear that this is an advanced option for free placement\r\n- Link to https:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/legend_guide.html#legend-location\r\n- Link to https:\/\/matplotlib.org\/devdocs\/api\/figure_api.html#matplotlib.figure.Figure.legend for outside legend (which in former times could only be achieved using bbox_to_anchor), and there make the outside options more prominent.\r\n","comments":["xref #10079 "],"labels":["Documentation","topic: legend"]},{"title":"[ENH]: alias colorbar location keyword to loc","body":"### Problem\n\nThe location keyword for legend is `loc` so it's odd that it's `location` for colorbar. Nobody brought  it up in #23267 so I don't know if there's been a discussion\/argument against - but if there's no reason not to then it would be nice if legend and colorbar took the same positioning keyword. \n\n### Proposed solution\n\n_No response_","comments":["Title sadly takes \"loc\" as well.  I think all of these should take loc\/location as aliases.  ","I'm +\/-0 on doing this. On the one hand, `location` is much better and would be the green-field choice. On the other hand, `loc` is so prominent that we'll have to keep it around and multiple alternatives complicate things.\r\n\r\nIf somebody wants to dig into this, these are likely the places to check to make everything consistent.\r\n\r\n![grafik](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/fb6a9084-5877-4c17-8d4d-b1e423038f42)\r\n"],"labels":["New feature","API: consistency"]},{"title":"MNT: print missing font warning only once per font.","body":"\r\nWrapping the log calls in a check that the missing font isn't in a list of missing fonts. Goal is to make the doc builds easier to read by squashing the extra prints. \r\n\r\nI have it separated out my msg cause I'm not sure if that's important, could totally see easier versions that check if the entire msg has been seen (so stores a list of msgs) or that only looks at font and not the msg. base on call convo w\/ @ksunden ","comments":["I\u2019ve not following the details here, but if this is only about suppressing expected warnings in the doc builds, a warnings filter in conf.py would be the way to go. ","> , a warnings filter in conf.py would be the way to go.\n\nNot sure how since we want one warning per missing font to print out at once. I tried using the once filter and couldn't get that working.","Ah sorry, I was thining about `warnings.warn()` not `logging.warning()`. Forget the filter comment then.\r\n\r\nI would base deduplication on the message. Separate ids is more effort than it's worth. Likely the simplest approach is to wrap your logging in use a `functools.cache`.\r\n","> Likely the simplest approach is to wrap your logging in use a functools.cache.\r\n\r\nGoing down that rabbit hole, it looks like the least extra\/most generalizable may be to make a [custom loghandler](https:\/\/stackoverflow.com\/questions\/57472091\/how-to-build-a-python-logging-function-that-doesnt-repeat-the-exact-same-message) or use a handler filter (which is what I'm trying now)","So uh adding a filter works really nicely, and I can move it to the sphinxextensions - there's one for [missing references](https:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/doc\/sphinxext\/missing_references.py) I used as a model-but I think the multiple prints are annoying in any context. Only problem is it works a bit too well and I can't get the messages to show up on new runs -> any tips for resetting the msg_cache on new runs? "],"labels":["status: needs rebase","topic: text\/fonts","Maintenance"]},{"title":"[ENH]: Properly set .modifiers field on key events","body":"### Problem\n\nCurrent, many events set the .modifiers attribute (since #23473), but this is not the case yet for key events themselves (https:\/\/github.com\/matplotlib\/matplotlib\/pull\/23473#pullrequestreview-1215894385).  It would seem reasonable to fix that for consistency between events.\n\n### Proposed solution\n\n_No response_","comments":[],"labels":["New feature"]},{"title":"Fix toolmanager x\/y scale \"togglers\".","body":"ToolXScale and ToolYScale actually *cannot* be implemented using ToolToggleBase because a single \"toggle\" flag cannot store the log\/linear state of *multiple* axes at once (i.e. the behavior of pressing \"l\" becomes wrong as soon as there are multiple axes in a given figure).  Instead these must be plain tools that inspect the actual scale on the axes before deciding what to do.\r\n\r\nIn practice, the easiest is to again reuse the classic toolbar implementation, as is already done for ToolGrid and ToolMinorGrid. Factor out that \"forward-to-classic-toolbar\" implementation into a _ToolForwardingToClassicToolbar base class and use that whereever possible.\r\n\r\nAs in #16823, providing strict backcompat seems too hard to be worth it.\r\n\r\n## PR summary\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-docstrings) guidelines\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please\r\nconsider the following points:\r\n\r\n- A development guide is available at https:\/\/matplotlib.org\/devdocs\/devel\/index.html.\r\n\r\n- Help with git and github is available at https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html\r\n\r\n- Create a separate branch for your changes and open the PR from this branch. Please avoid working on `main`.\r\n\r\n- The PR title should summarize the changes, for example \"Raise ValueError on\r\n  non-numeric input to set_xlim\".  Avoid non-descriptive titles such as\r\n  \"Addresses issue #8576\".\r\n\r\n- The summary should provide at least 1-2 sentences describing the pull request\r\n  in detail (Why is this change required?  What problem does it solve?) and\r\n  link to any relevant issues.\r\n\r\n- If you are contributing fixes to docstrings, please pay attention to\r\n  https:\/\/matplotlib.org\/stable\/devel\/documenting_mpl.html#formatting-conventions.  In particular,\r\n  note the difference between using single backquotes, double backquotes, and\r\n  asterisks in the markup.\r\n\r\nWe understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.\r\n-->\r\n","comments":["Yes, that's much better, thanks for the suggestion.","I actually can't repro the failures locally (tests pass fine) :\/  I'll investigate, but do you get them?","Doc warnings are real:\r\n\r\n> \/home\/circleci\/project\/lib\/matplotlib\/backend_tools.py:docstring of matplotlib.backend_tools.ToolFullScreen:1: WARNING: py:class reference target not found: matplotlib.backend_tools._ToolForwardingToClassicToolbar\r\n\/home\/circleci\/project\/lib\/matplotlib\/backend_tools.py:docstring of matplotlib.backend_tools.ToolGrid:1: WARNING: py:class reference target not found: matplotlib.backend_tools._ToolForwardingToClassicToolbar\r\n\/home\/circleci\/project\/lib\/matplotlib\/backend_tools.py:docstring of matplotlib.backend_tools.ToolMinorGrid:1: WARNING: py:class reference target not found: matplotlib.backend_tools._ToolForwardingToClassicToolbar\r\n\/home\/circleci\/project\/lib\/matplotlib\/backend_tools.py:docstring of matplotlib.backend_tools.ToolQuit:1: WARNING: py:class reference target not found: matplotlib.backend_tools._ToolForwardingToClassicToolbar\r\n\/home\/circleci\/project\/lib\/matplotlib\/backend_tools.py:docstring of matplotlib.backend_tools.ToolQuitAll:1: WARNING: py:class reference target not found: matplotlib.backend_tools._ToolForwardingToClassicToolbar\r\n\/home\/circleci\/project\/lib\/matplotlib\/backend_tools.py:docstring of matplotlib.backend_tools.ToolXScale:1: WARNING: py:class reference target not found: matplotlib.backend_tools._ToolForwardingToClassicToolbar\r\n\/home\/circleci\/project\/lib\/matplotlib\/backend_tools.py:docstring of matplotlib.backend_tools.ToolYScale:1: WARNING: py:class reference target not found: matplotlib.backend_tools._ToolForwardingToClassicToolbar\r\n\r\nI'm off-site and cannot run the tests locally right now.","(I know about the doc failures, I just need to (pick a better base class name and) rerun sphinx with -Omissing_references_write_json=1)"],"labels":["MEP: MEP22"]},{"title":"Fix broken \"save figure\" with GTK4 on mac","body":"## PR summary\r\n\r\nIn short, the current GTK 4 works on Ubuntu 22.04 but fails on Mac. After this patch, GTK 4 only works on the latest Ubuntu (23.04) but issues on Mac are fixed. Want to know how we want to proceed - keeping the broken app on Mac or moving to Ubuntu 23.04.\r\n\r\nThis PR tries to fix GTK4 GUI on Mac by using newer version of GTK4 APIs - `FileDialog` instead of `FileChooserNative` which is deprecated. The fixed version works well on Mac. Unfortunately, it doesn't work on my Ubuntu 22.04. I got response from the Genome team that this newer version of GTK4 is not supported on Ubuntu 22.04, however, it's available on Ubuntu 23.04.\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #26551 \" \r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html) - integration tests, no unit test added\r\n- [n\/a] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-examples-and-tutorials)\r\n- [n\/a] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [n\/a] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-docstrings) guidelines\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please\r\nconsider the following points:\r\n\r\n- A development guide is available at https:\/\/matplotlib.org\/devdocs\/devel\/index.html.\r\n\r\n- Help with git and github is available at https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html\r\n\r\n- Create a separate branch for your changes and open the PR from this branch. Please avoid working on `main`.\r\n\r\n- The PR title should summarize the changes, for example \"Raise ValueError on\r\n  non-numeric input to set_xlim\".  Avoid non-descriptive titles such as\r\n  \"Addresses issue #8576\".\r\n\r\n- The summary should provide at least 1-2 sentences describing the pull request\r\n  in detail (Why is this change required?  What problem does it solve?) and\r\n  link to any relevant issues.\r\n\r\n- If you are contributing fixes to docstrings, please pay attention to\r\n  https:\/\/matplotlib.org\/stable\/devel\/documenting_mpl.html#formatting-conventions.  In particular,\r\n  note the difference between using single backquotes, double backquotes, and\r\n  asterisks in the markup.\r\n\r\nWe understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.\r\n-->\r\n","comments":["This will have to use the new API only if available (GTK 4.10+) and the old API otherwise."],"labels":["status: needs rebase"]},{"title":"[Bug]: Cannot save figure with GTK4 on Mac","body":"### Bug summary\r\n\r\nWhen trying to save figure with GTK4 on Mac, the file format is always pgf regardless what we have selected. Furthermore, if the saving pgf fails, an error box is displayed and cannot be closed. I tried to investigate what was happening there but haven't fixed it yet. (See additional information)\r\n\r\nNo matter what we have selected, format is always pgf when saving\r\n<img width=\"669\" alt=\"image\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/38875181\/c083c6ba-6774-44ff-9a98-76b179ba0726\">\r\n\r\n\r\n<img width=\"640\" alt=\"image\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/38875181\/38008fe6-9037-4128-962e-6fbd0076e5d9\">\r\n\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib as mpl\r\n\r\nprint(mpl.__file__)\r\nprint(mpl.__version__)\r\nmpl.use('gtk4agg')\r\n\r\n# evenly sampled time at 200ms intervals\r\nt = np.arange(0., 5., 0.2)\r\n# red dashes, blue squares and green triangles\r\nplt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nSave fig fails\r\n\r\n### Expected outcome\r\n\r\nSave fig success\r\n\r\n### Additional information\r\npygobject 3.44.1\r\ngtk4: stable 4.12.0\r\n\r\nFor the \"always pgf\" bug:\r\n\r\n\/lib\/matplotlib\/backends\/backend_gtk4.py line 361\r\n```\r\ndialog.set_choice('format', formats[default_format])\r\n```\r\nshould be \r\n```\r\ndialog.set_choice('format', formats[0])\r\n```\r\n\r\n\r\nfull code snippet:\r\n`dialog` is a [Gtk.FileChooserNative](https:\/\/docs.gtk.org\/gtk3\/class.FileChooserNative.html) instance.\r\n```\r\nformats = [formats[default_format], *formats[:default_format],\r\n                   *formats[default_format+1:]]\r\ndialog.add_choice('format', 'File format', formats, formats)\r\ndialog.set_choice('format', formats[default_format])\r\n\r\ndialog.set_current_folder(Gio.File.new_for_path(\r\n    os.path.expanduser(mpl.rcParams['savefig.directory'])))\r\ndialog.set_current_name(self.canvas.get_default_filename())\r\n```\r\nHowever, after fixing this, it always resolve to PNG (the correct default choice.) I suspect `dialog.add_choice()` cannot work correctly on Mac or doesn't work anymore. \r\n\r\nThe easiest fix is extracting the file extension via `dialog.get_file()` which is already at line 372 in \/lib\/matplotlib\/backends\/backend_gtk4.py line 361\r\n\r\nP. S.\r\nI tried to replace it with `Gtk.FileChooserNative.get_filter()`, but it doesn't work and it's probably a confirmed bug in GTK4https:\/\/gitlab.gnome.org\/GNOME\/gtk\/-\/issues\/1820\r\n\r\n### Operating system\r\n\r\nMac\r\n\r\n### Matplotlib Version\r\n\r\n3.8.0.dev1829+g3d2d0727ec.d20230818\r\n\r\n### Matplotlib Backend\r\n\r\ngtk4agg\r\n\r\n### Python version\r\n\r\n3.9.6\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nNone","comments":["Today I tested GTK 3 and GTK 4 on Ubuntu. GTK3 works well. GTK4 works well and the \"always default\" bug doesn't occur as on Mac. So the bug that file filter doesn't work may be a Mac only bug. Also, the different behavior on different platforms make the bug hard to fix:\r\n\r\nAbove, I suggested. extracting the file extension with `dialog.get_file()`. However, the file name retrieved from  `dialog.get_file()` wasn't automatically set with the selected extension format - the behavior of getting file name on Ubuntu and on Mac is different. (See P. S. for more detailed description)\r\nFurthermore, the GTK4 documentation doesn't state that what kind of behavior is expected or guaranteed. Thus, the solution proposed above about extracting the file extension with `dialog.get_file()` won't guarantee portability.\r\n\r\nP.S.\r\n\r\nExample using GTK4:\r\nWith GTK4, after we select SVG format from the filter, the file name won't be updated with the format we selected. We have to manually edit the file name before clicking \"Save\"\r\n\r\nExample using Mac:\r\nWith Mac, the default file name displayed in the text input box for user is without an extension - e.g., \"Figure_1\". After clicking save, the app will add the extension for us - `dialog.get_file().get_path()` will give something like \"Figure_1.png\""],"labels":["GUI: gtk"]},{"title":"[ENH]: A function for computing and displaying 3D streamline?","body":"### Problem\n\n### Worth adding a function for computing and displaying 3D stream plots? \r\n\r\nA 3D version of the streamline plot function `pyplot.streamplot` would display the streamlines in 3D vector fields. This is doable in Matplotlib by computing everything beforehand and displaying the results in 3D, but it would be a lot simpler if Matplotlib had a function that does everything. This function would be especially useful for displaying magnetic field streamlines in 3D.\r\n\r\nSimilar functions in [Mayavi ](https:\/\/docs.enthought.com\/mayavi\/mayavi\/auto\/mlab_pipeline_other_functions.html#mayavi.tools.pipeline.streamline), [Magpylib via Pyvista](https:\/\/magpylib.readthedocs.io\/en\/latest\/examples\/examples_30_coil_field_lines.html#pyvista-streamlines), and [Mathematica](https:\/\/reference.wolfram.com\/language\/ref\/ListStreamPlot3D.html).\n\n### Proposed solution\n\n_No response_","comments":["Definitely useful! I think we would need us to think about how best to tie this in with the 2D implementation in https:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/lib\/matplotlib\/streamplot.py\r\n\r\nI'm a little uncomfortable with how we are currently abstracting away all the streamline calculations - there's a lot of nuance about integrator settings that we are brushing under the rug. For example I think using only a 2nd order runge-kutta method right now for integration is a bit of a questionable choice, as is using a linear interpolator, and boundary conditions aren't configurable at all. But the very nature & sparsity of a streamline plot does suggest that it's just an approximate visualization, so maybe this is fine. Shouldn't preclude adding in a basic implementation in any case.","I would start with an external package for this, and then we can see if we can work it in.  In particular I would be much more concerned about speed and how to make it look reasonable than accuracy.  ","@jklymak do you know of an external package for this? I did a quick search but couldn\u2019t find anything. If I recall correctly how it worked with the contour package we pull in, that it started in matplotlib and split off after it got to a point of high enough maturity. ","I meant I would suggest writing an external package.\r\n\r\ncontouring was split off because it is a more general problem than just Matplotlib, and now other libraries can use it.  If we were doing it again, I suspect we would have started out that way.  Similarly here - calculating streamlines is complex, and somewhat dependent on the underlying physics, so developing the code outside of Matplotlib may make sense, and then we could make it a dependency eventually if there is a simple API that can be used. ","Seconding this - I would love a 3D streamplot feature for Matplotlib. Is there any work being done in this direction?","I need a function to draw ternary streamplot. I know a package python-ternary can draw ternary diagrams, but it can't draw stream plot. Can anyone help me?"],"labels":["New feature","topic: mplot3d"]},{"title":"[Bug]: timedelta64 with pcolormesh","body":"### Bug summary\n\n`timedelta64` doesn't work with pcolormesh, and many other methods.  \n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\ntime = np.arange(0, 50, dtype='timedelta64[h]')\r\ny = np.arange(10)\r\nZ = np.random.randn(10, 50)\r\n\r\nfig, ax = plt.subplots()\r\nax.pcolormesh(time, y, Z)\n```\n\n\n### Actual outcome\n\n```\r\nTraceback (most recent call last):\r\n  File \"\/Users\/jklymak\/matplotlib\/testit.py\", line 9, in <module>\r\n    ax.pcolormesh(time, y, Z)\r\n  File \"\/Users\/jklymak\/matplotlib\/lib\/matplotlib\/__init__.py\", line 1465, in inner\r\n    return func(ax, *map(sanitize_sequence, args), **kwargs)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/Users\/jklymak\/matplotlib\/lib\/matplotlib\/axes\/_axes.py\", line 6270, in pcolormesh\r\n    X, Y, C, shading = self._pcolorargs('pcolormesh', *args,\r\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/Users\/jklymak\/matplotlib\/lib\/matplotlib\/axes\/_axes.py\", line 5854, in _pcolorargs\r\n    X = _interp_grid(X)\r\n        ^^^^^^^^^^^^^^^\r\n  File \"\/Users\/jklymak\/matplotlib\/lib\/matplotlib\/axes\/_axes.py\", line 5833, in _interp_grid\r\n    dX = np.diff(X, axis=1)\/2.\r\n         ~~~~~~~~~~~~~~~~~~^~~\r\n  File \"\/Users\/jklymak\/mambaforge\/envs\/mpl-dev\/lib\/python3.11\/site-packages\/numpy\/ma\/core.py\", line 4254, in __truediv__\r\n    return true_divide(self, other)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"\/Users\/jklymak\/mambaforge\/envs\/mpl-dev\/lib\/python3.11\/site-packages\/numpy\/ma\/core.py\", line 1171, in __call__\r\n    m |= domain(da, db)\r\n         ^^^^^^^^^^^^^^\r\n  File \"\/Users\/jklymak\/mambaforge\/envs\/mpl-dev\/lib\/python3.11\/site-packages\/numpy\/ma\/core.py\", line 858, in __call__\r\n    return umath.absolute(a) * self.tolerance >= umath.absolute(b)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nTypeError: The DType <class 'numpy.dtype[timedelta64]'> could not be promoted by <class 'numpy.dtype[float64]'>. This means that no common DType exists for the given inputs. For example they cannot be stored in a single array unless the dtype is `object`. The full list of DTypes is: (<class 'numpy.dtype[timedelta64]'>, <class 'numpy.dtype[float64]'>)\r\n```\r\n\n\n### Expected outcome\n\nThe expected outcome is debatable.  We have tried to have this go through units like `datetime64`.  However, I really think we should just convert to float.  Yeah, that will give giant numbers for timedelta64 of ns, but I think it's better than failing.\r\n\r\n\n\n### Additional information\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\nmain\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nNone","comments":["```\r\nfrom datetime import datetime, timedelta\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n#time = np.arange(0, 50, dtype=np.timedelta64(1,\"h\"))\r\nbase = datetime.today()\r\ntime = [base - timedelta(hours=x) for x in range(0, 50)]\r\ny = np.arange(10)\r\nZ = np.random.randn(10, 50)\r\n\r\nfig, ax = plt.subplots()\r\nax.pcolormesh(time, y, Z)\r\n```\r\nI have tried this code, it's working.\r\nIf it doesn't work then let me know.","That does work.  What does not work is timedelta64, which is a very common format for in numerical simulations and other applications. ","Hmmm... odd... when I just create an array with dtype timedelta64[h], I can diff and divide that by 2 with no issues, not sure what is different about the usage internally...\r\n\r\nIt is a masked array internally, so a masked array with timedelta dtype differs from a normal array, and that seems like perhaps something that should be fixed upstream\r\n\r\nPure numpy examples:\r\n```python\r\n>>> masked_array([1,2,3], dtype=\"timedelta64[h]\")\r\nmasked_array(data=[1, 2, 3],\r\n             mask=False,\r\n       fill_value=numpy.timedelta64('NaT','h'),\r\n            dtype='timedelta64[h]')\r\n>>> masked_array([1,2,3], dtype=\"timedelta64[h]\") \/ 2\r\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\r\n\u2502 in <module>:1                                                                                    \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502 \/home\/kyle\/venvs\/pyenv\/versions\/edge\/lib\/python3.11\/site-packages\/numpy\/ma\/core.py:4270 in       \u2502\r\n\u2502 __truediv__                                                                                      \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502   4267 \u2502   \u2502   \"\"\"                                                                               \u2502\r\n\u2502   4268 \u2502   \u2502   if self._delegate_binop(other):                                                   \u2502\r\n\u2502   4269 \u2502   \u2502   \u2502   return NotImplemented                                                         \u2502\r\n\u2502 \u2771 4270 \u2502   \u2502   return true_divide(self, other)                                                   \u2502\r\n\u2502   4271 \u2502                                                                                         \u2502\r\n\u2502   4272 \u2502   def __rtruediv__(self, other):                                                        \u2502\r\n\u2502   4273 \u2502   \u2502   \"\"\"                                                                               \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502 \/home\/kyle\/venvs\/pyenv\/versions\/edge\/lib\/python3.11\/site-packages\/numpy\/ma\/core.py:1171 in       \u2502\r\n\u2502 __call__                                                                                         \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502   1168 \u2502   \u2502   # Apply the domain                                                                \u2502\r\n\u2502   1169 \u2502   \u2502   domain = ufunc_domain.get(self.f, None)                                           \u2502\r\n\u2502   1170 \u2502   \u2502   if domain is not None:                                                            \u2502\r\n\u2502 \u2771 1171 \u2502   \u2502   \u2502   m |= domain(da, db)                                                           \u2502\r\n\u2502   1172 \u2502   \u2502   # Take care of the scalar case first                                              \u2502\r\n\u2502   1173 \u2502   \u2502   if not m.ndim:                                                                    \u2502\r\n\u2502   1174 \u2502   \u2502   \u2502   if m:                                                                         \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502 \/home\/kyle\/venvs\/pyenv\/versions\/edge\/lib\/python3.11\/site-packages\/numpy\/ma\/core.py:858 in        \u2502\r\n\u2502 __call__                                                                                         \u2502\r\n\u2502                                                                                                  \u2502\r\n\u2502    855 \u2502   \u2502   # don't call ma ufuncs from __array_wrap__ which would fail for scalars           \u2502\r\n\u2502    856 \u2502   \u2502   a, b = np.asarray(a), np.asarray(b)                                               \u2502\r\n\u2502    857 \u2502   \u2502   with np.errstate(invalid='ignore'):                                               \u2502\r\n\u2502 \u2771  858 \u2502   \u2502   \u2502   return umath.absolute(a) * self.tolerance >= umath.absolute(b)                \u2502\r\n\u2502    859                                                                                           \u2502\r\n\u2502    860                                                                                           \u2502\r\n\u2502    861 class _DomainGreater:                                                                     \u2502\r\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\r\nUFuncTypeError: Cannot cast ufunc 'greater_equal' input 0 from dtype('<m8[h]') to dtype('<m8') with casting rule 'same_kind'\r\n\r\n\r\n>>> array([1,2,3], dtype=\"timedelta64[h]\") \/ 2\r\narray([0, 1, 1], dtype='timedelta64[h]')\r\n```","for the record add, subtract, and multiply all work fine, It is just divide (and mod) operations.\r\n\r\nAlso trig\/log\/sqrt, but those ones do _not_ work on standard timedelta arrays, so not as concerned\r\n\r\nBut the underlying thing here is that comparisons are used to guard against infinities, for... some reason...\r\n\r\nSee discussion at numpy\/numpy#22347, particularly https:\/\/github.com\/numpy\/numpy\/issues\/22347#issuecomment-1262036298","I mean is the practical fix to multiply by 0.5?\r\n\r\nEdit: no - the problem is `dX >= 0`","You can keep chasing this down the stack, but at the end of the day, X needs to be a float at this point as we have already called `_process_unit_info`.  \r\n\r\nNote https:\/\/github.com\/matplotlib\/matplotlib\/pull\/19236 makes a new Converter interface for timedelta64 which would close this.  I think the question is if they PR needs to be perfect, or greatly simplified (eg just convert to float, using whatever timedelta64 units are supplied).   \r\n\r\n"],"labels":["topic: units and array ducktypes"]},{"title":"Add alpha-array support to _rgb_to_rgba","body":"## PR summary\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #26092\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [x] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-docstrings) guidelines\r\n\r\n## Plotting demo:\r\n\r\n<details>\r\n<summary>\r\n    <h4>Code<\/h4>\r\n<\/summary>\r\n<p>\r\n\r\n\r\n```py\r\n# test alpha blending when both alpha and array alpha are passed\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.colors import ListedColormap\r\nimport numpy as np\r\n\r\nfig, axs = plt.subplots(3, 4, figsize=(12, 10), layout='compressed')\r\n\r\nfor ax in axs.flat:\r\n    ax.set(facecolor='red', xticks=[], yticks=[])\r\n\r\nmapped = np.array([\r\n    [0.1, 1.0],\r\n    [1.0, 0.1]\r\n])\r\nrgb = np.repeat(mapped[:, :, np.newaxis], 3, axis=2)\r\nrgba = np.concatenate(\r\n    [\r\n        rgb,\r\n        [\r\n            [[1.0], [0.9]],\r\n            [[0.8], [0.7]],\r\n        ]\r\n    ],\r\n    axis=2\r\n)\r\n\r\nalpha_scalar = 0.5\r\nalpha_2d = np.full_like(mapped, alpha_scalar)\r\n\r\ncmap_with_alpha = ListedColormap(\r\n    np.concatenate([plt.cm.viridis.colors,\r\n                    np.full((len(plt.cm.viridis.colors), 1), alpha_scalar)],\r\n                   axis=1),\r\n)\r\n\r\n\r\n\r\n# axs[0,0].imshow(rgb, alpha=alpha_scalar)\r\n# axs[0,1].imshow(rgb, alpha=alpha_2d)\r\nfor ax, alpha, t in zip(axs, [None, alpha_scalar, alpha_2d], ['off', 'float', 'array']):\r\n    ax[0].imshow(mapped, alpha=alpha)\r\n    ax[0].set_title(f'2D, alpha={alpha_scalar} {t}')\r\n\r\n    ax[1].imshow(mapped, cmap=cmap_with_alpha, alpha=alpha)\r\n    ax[1].set_title(f'2D with {alpha_scalar} alpha cmap, alpha={alpha_scalar} {t}')\r\n\r\n    ax[2].imshow(rgb, alpha=alpha)\r\n    ax[2].set_title(f'RGB, alpha={alpha_scalar} {t}')\r\n\r\n    ax[3].imshow(rgba, alpha=alpha)\r\n    ax[3].set_title(f'RGBA, alpha={alpha_scalar} {t}')\r\n\r\nplt.show()\r\n```\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please\r\nconsider the following points:\r\n\r\n- A development guide is available at https:\/\/matplotlib.org\/devdocs\/devel\/index.html.\r\n\r\n- Help with git and github is available at https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html\r\n\r\n- Create a separate branch for your changes and open the PR from this branch. Please avoid working on `main`.\r\n\r\n- The PR title should summarize the changes, for example \"Raise ValueError on\r\n  non-numeric input to set_xlim\".  Avoid non-descriptive titles such as\r\n  \"Addresses issue #8576\".\r\n\r\n- The summary should provide at least 1-2 sentences describing the pull request\r\n  in detail (Why is this change required?  What problem does it solve?) and\r\n  link to any relevant issues.\r\n\r\n- If you are contributing fixes to docstrings, please pay attention to\r\n  https:\/\/matplotlib.org\/stable\/devel\/documenting_mpl.html#formatting-conventions.  In particular,\r\n  note the difference between using single backquotes, double backquotes, and\r\n  asterisks in the markup.\r\n\r\nWe understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.\r\n-->\r\n","comments":["Hi @AALAM98mod100 - just leaving a note that if you want this to be reviewed make sure you mark it as \"Ready for review\". Cheers!","Thanks for the PR! As far as I can tell, it looks good!\r\n\r\nHowever, I am a bit surprised to see that it doesn't work for SVGs? Especially since there is an embedded PNG in the SVG. This may be a another issue though... But do you have any comments on that? Maybe we should wait with adding SVG and PDF test images (although they are quite small, so not sure if it really is a problem).\r\n\r\nRight now we are in the final stages of releasing 3.8, so it may take some time to get additional feedback.","Just as a FYI, in the original issue thread, some incorrect result was observed using `savefig` (I haven't tested it yet)"],"labels":["status: needs rebase"]},{"title":"Fix glyphs for angle brackets","body":"## PR summary\r\nFixes #18740\r\n\r\n\r\n![Figure_1_cal](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/8b427042-5385-40eb-b637-7ce4ecb01381)\r\n\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-docstrings) guidelines\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please\r\nconsider the following points:\r\n\r\n- A development guide is available at https:\/\/matplotlib.org\/devdocs\/devel\/index.html.\r\n\r\n- Help with git and github is available at https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html\r\n\r\n- Create a separate branch for your changes and open the PR from this branch. Please avoid working on `main`.\r\n\r\n- The PR title should summarize the changes, for example \"Raise ValueError on\r\n  non-numeric input to set_xlim\".  Avoid non-descriptive titles such as\r\n  \"Addresses issue #8576\".\r\n\r\n- The summary should provide at least 1-2 sentences describing the pull request\r\n  in detail (Why is this change required?  What problem does it solve?) and\r\n  link to any relevant issues.\r\n\r\n- If you are contributing fixes to docstrings, please pay attention to\r\n  https:\/\/matplotlib.org\/stable\/devel\/documenting_mpl.html#formatting-conventions.  In particular,\r\n  note the difference between using single backquotes, double backquotes, and\r\n  asterisks in the markup.\r\n\r\nWe understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.\r\n-->\r\n","comments":["I'm not sure about the spacing of the result. The rightmost side of the left angle appears to be half as close as the leftmost side of the right angle. For the first three examples, it's about 1 vs 2 pixels, while about 2 vs 4 on the rightmost largest one.\r\n\r\nIf you take your test and call it with _only_ `<>` or only `\\langle\\rangle` and revert the other changes, then the text between `<>` all appear centred (though of course the other version is broken as in #18740.) Something like:\r\n```python\r\n@image_comparison(baseline_images=['math_angle_brackets.png']*2)\r\ndef test_math_angle_brackets():\r\n    tests = [\r\n        r'$\\left< x \\right>$',\r\n        r'$\\left< ? \\right>$',\r\n        r'$\\left< \\frac{1}{2}\\right>$',\r\n        r'$\\left< \\frac{\\sum_{0}^{1}}{2}\\right>$',\r\n        r'$\\left<\\frac{\\sum_{0}^{1}}{\\sum_{0}^{1}}\\right>$'\r\n    ]\r\n    for left, right in [('<', '>'), (r'\\langle', r'\\rangle')]:\r\n        fig = plt.figure(figsize=(5, 1))\r\n        for idx, text in enumerate(tests):\r\n            fig.text((idx + 0.3)\/len(tests), 0.5,\r\n                     text.replace('<', left).replace('>', right),\r\n                     math_fontfamily='cm')\r\n```","I reverted the changes and tested the code again. The misalignment appears due to the missing sizing of the angle brackets, but reordering the sizing for the glyphs following this diff, generates the following image, which seems to be centered(?) with `cm` but a bit wonky with `custom` fonts\r\n\r\n```diff\r\n--- a\/lib\/matplotlib\/_mathtext.py\r\n+++ b\/lib\/matplotlib\/_mathtext.py\r\n@@ -419,10 +419,10 @@ class BakomaFonts(TruetypeFonts):\r\n                         ('ex', '\\xbb'), ('ex', '\\x26')],\r\n         r'\\rceil':     [('ex', '\\xa8'), ('ex', '\\x6d'),\r\n                         ('ex', '\\xbc'), ('ex', '\\x27')],\r\n-        r'\\langle':    [('ex', '\\xad'), ('ex', '\\x44'),\r\n-                        ('ex', '\\xbf')],\r\n-        r'\\rangle':    [('ex', '\\xae'), ('ex', '\\x45'),\r\n-                        ('ex', '\\xc0')],\r\n+        r'\\langle':    [('ex', '\\xad'), ('ex', '\\x2a'),\r\n+                        ('ex', '\\xbf'), ('ex', '\\x44')],\r\n+        r'\\rangle':    [('ex', '\\xae'), ('ex', '\\x2b'),\r\n+                        ('ex', '\\xc0'), ('ex', '\\x45')],\r\n         r'\\__sqrt__':  [('ex', '\\x70'), ('ex', '\\x71'),\r\n                         ('ex', '\\x72'), ('ex', '\\x73')],\r\n         r'\\backslash': [('ex', '\\xb2'), ('ex', '\\x2f'),\r\n@@ -433,6 +433,8 @@ class BakomaFonts(TruetypeFonts):\r\n                         ('ex', '\\x64')],\r\n         r'\\widetilde': [('rm', '\\x7e'), ('ex', '\\x65'), ('ex', '\\x66'),\r\n                         ('ex', '\\x67')],\r\n+        r'<':          [('ex', '\\x44')],\r\n+        r'>':          [('ex', '\\x45')]\r\n         }\r\n```\r\n\r\nImage for CM font:\r\n![math_angle_brackets](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/773c84b9-0b89-42ca-a1be-c20efaac985b)\r\n\r\nImage for Custom font:\r\n![math_angle_brackets](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/3c188c94-cadb-4391-8e50-d5cdcc0aad8f)\r\n\r\n\r\n"],"labels":["topic: text\/mathtext"]},{"title":"[Bug]: get_path_collection_extents wrong when master_transform is not affine","body":"### Bug summary\n\nAll's in the title.\n\n### Code for reproduction\n\n```python\nfrom matplotlib.path import *\r\nfrom matplotlib.transforms import *\r\nfrom matplotlib.scale import LogTransform\r\n\r\nget_path_collection_extents(\r\n    Affine2D().scale(2, 3),\r\n    [Path([(1, 2), (3, 4)])], [], [(0, 0)], IdentityTransform())\r\nget_path_collection_extents(\r\n    blended_transform_factory(IdentityTransform(), LogTransform(10)) + Affine2D().scale(2, 3),\r\n    [Path([(1, 2), (3, 4)])], [], [(0, 0)], IdentityTransform())\n```\n\n\n### Actual outcome\n\nBoth expressions evaluate to `Bbox([[2.0, 6.0], [6.0, 12.0]])`.\n\n### Expected outcome\n\nThe second expression is different.\n\n### Additional information\n\nThis probably has the same underlying cause as #7975 (implicit conversion of the non-affine transform to its affine component only).  (I tried to add a warning for the deprecation in #7975 and ran into this bug.)\r\nget_path_collection_extents is called by Collection.get_datalim; it may be possible to construct a more explicit example where the autoscaling is wrong for a suitably-constructed Collection.\n\n### Operating system\n\nmacos\n\n### Matplotlib Version\n\n3.8.0.dev1803+gbba391d1b6\n\n### Matplotlib Backend\n\nany\n\n### Python version\n\n3.11.3\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\ngit checkout","comments":[],"labels":["topic: path handling","topic: transforms and scales"]},{"title":"[Bug]: <artist>.set_picker(True) destroys value of <artist>.pickradius(5) ","body":"### Bug summary\n\nAfter setting <artist>.set_picker(True), the pickradius wasn't a number anymore but a bool with value true.\n\n### Code for reproduction\n\n```python\n'''Command <legend>.set_picker(True) sets also \r\n   <legend>.get_pickerradius to 'True' '''\r\n\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax = plt.subplots()\r\nax.plot([0,1], [0,1], label='MyLabel')\r\n\r\nleg = ax.legend()\r\nlegline = leg.get_lines()[0]\r\n\r\nlegline.set_pickradius(5)                                             # Set pickradius to five\r\nprint(\"should be five, not 'True':\", legline.get_pickradius())        # Check, if it is ok. Yes it is.\r\n\r\nlegline.set_picker(True)                                              # Turn on picking for this artist.\r\nprint(\"should be five, not 'True':\", legline.get_pickradius())        # Check pickradius once more.\r\n                                                                      # It is \"True\" now, not five. Why not five ? Where is my 'five' gone ?\r\n\r\n# In the following usage, which is not seen here, I noticed, the legendline was clickable, but it was hard to hit !\r\n\r\n# A workaround is, first set_picker(True) and afterwards set_pickradius(5). But it took me several time to find the problem.\r\n\r\n# If possible, please make it possible to set these values in both orders. It is much easier to understand.\r\n\r\n\r\n##  Requirement already satisfied: pip in c:\\users\\norbert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (23.2.1)\r\n##  Requirement already satisfied: matplotlib in c:\\users\\norbert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (3.7.2)\r\n##  Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\norbert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (1.1.0)\r\n##  Requirement already satisfied: cycler>=0.10 in c:\\users\\norbert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (0.11.0)\r\n##  Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\norbert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (4.42.0)\r\n##  Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\norbert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (1.4.4)\r\n##  Requirement already satisfied: numpy>=1.20 in c:\\users\\norbert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (1.25.2)\r\n##  Requirement already satisfied: packaging>=20.0 in c:\\users\\norbert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (23.1)\r\n##  Requirement already satisfied: pillow>=6.2.0 in c:\\users\\norbert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (10.0.0)\r\n##  Requirement already satisfied: pyparsing<3.1,>=2.3.1 in c:\\users\\norbert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (3.0.9)\r\n##  Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\norbert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (2.8.2)\r\n##  Requirement already satisfied: six>=1.5 in c:\\users\\norbert\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n```\n\n\n### Actual outcome\n\nshould be five, not 'True': 5\r\nshould be five, not 'True': True\n\n### Expected outcome\n\nshould be five, not 'True': 5\r\nshould be five, not 'True': 5\n\n### Additional information\n\nDo you maybe even know a fix?\r\n\r\nFirst do set \".set_picker(True)\", afterwards .set_pickradius(5)\n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.7.2\n\n### Matplotlib Backend\n\nTkAgg\n\n### Python version\n\nPython 3.11.4\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip","comments":[],"labels":["topic: legend"]},{"title":"[Doc]: Redundant layout in Matplotlib documentation","body":"### Documentation Link\n\nhttps:\/\/matplotlib.org\/stable\/api\/axes_api.html#projection\n\n### Problem\n\n* All the content in the table of content already contained in the \"On this page\"  .  We can probably remove the Table of Content from the top. It makes no sense adding. Users usually click the pages from the right-most On this page expander. \r\n\n\n### Suggested improvement\n\n_No response_","comments":["@codewithdev  i would like to work on this issue","@akshayamadhuri I think @codewithdev's issue is a good suggestion given sphinx design now provides the TOC on the side, but I suggest letting this issue get a bit more support before you starting working on it.","I would happy to collaborate.","This is a _very_ long API doc, and having an intro TOC with nested levels helps get to the correct place quickly.  Also on mobile you don't see the \"On this page\".  I think the duplication is warranted and helpful for this page.","@jklymak want to understand this more. Is this Sphinx ver issue? or added just to make it visible for mobile device users? Most users look at the docs on desktop. Also the use-case is bit unclear here.","\"on this page\" exists for mobile, it just needs to be pulled out by clicking the 3 bars:\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/a36d94c8-85a4-4ef2-bcef-9cfa8e95a65b)\r\n\r\non desktop the \"on this page\" is legit side by side\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/50014f63-ed7c-4b74-abe0-f08533334470)\r\n\r\n\r\n> Also the use-case is bit unclear here.\r\n\r\nCan you elaborate more here? I generally support getting rid of of the ToC here because I don't think it's really doing anything that the right hand side isn't also doing. I'd rather use that space to set context\/expectations for the page - shorter roadmap instead of full TOC. \r\n\r\n","Facing make build issue in local. Would be great if someone can raise a PR for the same."],"labels":["Documentation","status: needs comment\/discussion"]},{"title":"[ENH]: Disable subplots_adjust toolbar button when the figure's layout manager is not adjust_compatible","body":"### Problem\n\nThe subplots_adjust toolbar button could be disabled when `figure.get_layout_engine().adjust_compatible` is False.\r\nBonus points if this reuses the machinery for disabling the forward\/back buttons depending on the position in the history stack.\n\n### Proposed solution\n\n_No response_","comments":["I saw in gtk, tk, qt, wx, webagg, but not in macosx, the forward\/back are disabled when not applicable, so I guess we will we want make the improvement on the same backends?","My understanding is the layout engine is specified when the figure is created, so can we disable the subplots_adjust toolbar button at the time the toolbar is created? (``backend_bases::NavigationToolbar2.__init__()``)\r\n\r\nThe plan I can think of is adding something like ``set_enable_subplots_toolbar()`` in ``backend_bases::NavigationToolbar2.__init__()``\r\n\r\nI think reusing the codes for forward\/back is tempting (``NavigationToolbar2.set_history_buttons()``) as it minimizes code modification, but  maybe we don't want to mix the forward\/back and subplot button together?\r\n\r\n"],"labels":["New feature","topic: geometry manager","topic: toolbar"]},{"title":"[Bug]: 3d interactive axes rotation is uninituitive","body":"### Summary\r\n\r\nClicking and moving the mouse e.g. left-right over the top part of a 3d axes seems to always rotate the axes along the *data* z-direction, no matter what that direction is on screen.  This means that if the data z-axis is oriented \"normal to the screen\", then the same mouse motion can rotate the axes visually clockwise or counterclockwise (first two cases below); if the data z-axis is oriented \"in the screen\" then the rotation is again different (last case below).\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/assets\/1322974\/98588ba4-f81d-4469-9ced-3df237d182e6\r\n\r\n\r\n\r\n### Proposed fix\r\n\r\nProbably(?) mouse-interactive rotations should be relative to *screen* directions rather than *data* axes directions.\r\n\r\nFor the record, the axes above were generated with\r\n```python\r\na0, a1, a2 = plt.figure(figsize=(12, 4)).subplots(1, 3, subplot_kw=dict(projection=\"3d\", xlabel=\"x\", ylabel=\"y\", zlabel=\"z\"))\r\na0.elev, a0.azim, a0.roll = -90, 90, 0\r\na1.elev, a1.azim, a1.roll = 90, 90, 0\r\na2.elev, a2.azim, a2.roll = 0, 90, 0\r\n```","comments":["I agree. The interaction has always been janky, but I could never quite put\r\nmy finger on it. I think your assessment is right.\r\n\r\nOn Thu, Aug 10, 2023 at 6:57\u202fPM Antony Lee ***@***.***> wrote:\r\n\r\n> Summary\r\n>\r\n> Clicking and moving the mouse e.g. left-right over the top part of a 3d\r\n> axes seems to always rotate the axes along the *data* z-direction, no\r\n> matter what that direction is on screen. This means that if the data z-axis\r\n> is oriented \"normal to the screen\", then the same mouse motion can rotate\r\n> the axes visually clockwise or counterclockwise (first two cases below); if\r\n> the data z-axis is oriented \"in the screen\" then the rotation is again\r\n> different (last case below).\r\n>\r\n>\r\n> https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1322974\/98588ba4-f81d-4469-9ced-3df237d182e6\r\n> Proposed fix\r\n>\r\n> Probably(?) mouse-interactive rotations should be relative to *screen*\r\n> directions rather than *data* axes directions.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26492>, or unsubscribe\r\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AACHF6AD4NLSVBNNAFUXFJDXUVRMLANCNFSM6AAAAAA3ME3PG4>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n","You can reach out to us through this mail nirajpatil849@gmail.com We would like to contribute in this "],"labels":["topic: mplot3d"]},{"title":"[Doc]: Document setters and getters from private superclasses","body":"### Documentation Link\n\nhttps:\/\/matplotlib.org\/devdocs\/api\/image_api.html#matplotlib.image.AxesImage.set\n\n### Problem\n\nThe above is one example, but there are some cases where the superclass is common and therefore the corresponding setters and getters are not documented. For images, it is `alpha`, `array`, `data`, `filternorm`, `filterrad`, `interpolation`, `interpolation_stage`, and `resample` that has getters and setters with doc-strings, but since `_ImageBase` is private they are not shown.\r\n\r\nAlso, other common methods as `can_composite`, `get_size`, `get_shape`, and `write_png` are shown in the documentation.\n\n### Suggested improvement\n\nFigure out how to add these in a good way. There are probably more classes where this happens.","comments":["FWIW I think we should just make ImageBase public, as e.g. it makes sense to allow users to do `isinstance(artist, ImageBase)`.","Sphinx is not well suited to document class hierarchies. I think the options here are:\r\n\r\n- Make the base classes public. API-wise this should be mostly ok. All the public methods inherited from a private base classes are effectively public anyway. However, this does only marginally improve discoverability of the inherited methods. All you get is a working link to the base class \r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/2387ce20-bc79-42f1-9c1f-c5a450457ddb)\r\nbut users have to follow that to see what's provided in there.\r\n\r\n- You can use `:inherited-members:` [in autodoc](https:\/\/www.sphinx-doc.org\/en\/master\/usage\/extensions\/autodoc.html#directives). But AFAIK, this just pulls everything together. You get very long lists of methods and there is no indication whether they are new or inherited. Also, this results in a lot of duplication.\r\n\r\nIdeally, one would have a compact summary of inherited methods that links to the original documentation. Qt does something like this \r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/2db46c21-1acb-4388-acf9-51b21dde4e38)\r\nhttps:\/\/doc.qt.io\/qt-6\/qpushbutton.html But I don't think sphinx has a way to achieve that.\r\n","There will be a handful of links working with this and also the table in `set` will contain more links. So I think that there will be additional benefits.\r\n\r\nYes, the duplication is indeed an issue.\r\n","I agree, we should make ImageBase public."],"labels":["Documentation"]},{"title":"Add rectangle collection with rotation","body":"## PR summary\r\n\r\nBased on #26375 with a refactor the `EllipseCollection` to make a more generic collection class handling `widths`, `heights` and `angles` parameters.\r\n\r\nDoes it deserve an example in the gallery?\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [n\/a] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-docstrings) guidelines\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please\r\nconsider the following points:\r\n\r\n- A development guide is available at https:\/\/matplotlib.org\/devdocs\/devel\/index.html.\r\n\r\n- Help with git and github is available at https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html\r\n\r\n- Create a separate branch for your changes and open the PR from this branch. Please avoid working on `main`.\r\n\r\n- The PR title should summarize the changes, for example \"Raise ValueError on\r\n  non-numeric input to set_xlim\".  Avoid non-descriptive titles such as\r\n  \"Addresses issue #8576\".\r\n\r\n- The summary should provide at least 1-2 sentences describing the pull request\r\n  in detail (Why is this change required?  What problem does it solve?) and\r\n  link to any relevant issues.\r\n\r\n- If you are contributing fixes to docstrings, please pay attention to\r\n  https:\/\/matplotlib.org\/stable\/devel\/documenting_mpl.html#formatting-conventions.  In particular,\r\n  note the difference between using single backquotes, double backquotes, and\r\n  asterisks in the markup.\r\n\r\nWe understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.\r\n-->\r\n","comments":[],"labels":["status: needs rebase","status: waiting for other PR"]},{"title":"[GSoD] refine gallery examples (titles, scope, link)","body":"## PR summary\r\nsmall cleanup projects:\r\n- add link to axes intro in user guide\r\n- remove text that doesn't belong in gallery example\r\n- add descriptive titles to dolphins, donuts, and firefox\r\n\r\n@story645 \r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-docstrings) guidelines\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please\r\nconsider the following points:\r\n\r\n- A development guide is available at https:\/\/matplotlib.org\/devdocs\/devel\/index.html.\r\n\r\n- Help with git and github is available at https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html\r\n\r\n- Create a separate branch for your changes and open the PR from this branch. Please avoid working on `main`.\r\n\r\n- The PR title should summarize the changes, for example \"Raise ValueError on\r\n  non-numeric input to set_xlim\".  Avoid non-descriptive titles such as\r\n  \"Addresses issue #8576\".\r\n\r\n- The summary should provide at least 1-2 sentences describing the pull request\r\n  in detail (Why is this change required?  What problem does it solve?) and\r\n  link to any relevant issues.\r\n\r\n- If you are contributing fixes to docstrings, please pay attention to\r\n  https:\/\/matplotlib.org\/stable\/devel\/documenting_mpl.html#formatting-conventions.  In particular,\r\n  note the difference between using single backquotes, double backquotes, and\r\n  asterisks in the markup.\r\n\r\nWe understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.\r\n-->\r\n","comments":[],"labels":["Documentation: examples"]},{"title":"[ENH]: restrict x and y does not move out of the range of the graph or floating on the axis when panning and zooming.","body":"### Problem\r\n\r\nI want the graph of heatmap not floating around the on x and y axis, I hope I can zoom in an out only on the graph area, when scroll to I zoom out, it becomes so small heatmap with whitespace. I don't want to zoom too much out, set limit to the heatmap range. I also don't want the heatmap go out of range when I use the drag pan on the tool bar\r\n\r\n```\r\nimport matplotlib\r\nimport matplotlib.pyplot as plt\r\nimport mplcursors\r\nimport numpy as np\r\nimport torch\r\n\r\ndef draw_heatmap(heatmap_data):\r\n    figure = plt.figure()\r\n    axes = figure.add_subplot(111)\r\n    heatmap = axes.imshow(heatmap_data, cmap='coolwarm', interpolation='nearest', aspect=1)\r\n    plt.gca().figure.canvas.mpl_connect('scroll_event', lambda event: zoom_heatmap(axes, event))\r\n    plt.show()\r\n\r\ndef zoom_heatmap(axes, event):\r\n    xlim = axes.get_xlim()\r\n    ylim = axes.get_ylim()\r\n    \r\n    if event.xdata is not None and event.ydata is not None:\r\n        scale_factor = 1.5 if event.button == 'up' else 1\/1.5\r\n        new_xlim = (\r\n            (xlim[0] - event.xdata) * scale_factor + event.xdata,\r\n            (xlim[1] - event.xdata) * scale_factor + event.xdata\r\n        )\r\n        new_ylim = (\r\n            (ylim[0] - event.ydata) * scale_factor + event.ydata,\r\n            (ylim[1] - event.ydata) * scale_factor + event.ydata\r\n        )\r\n        \r\n    axes.set_xlim(new_xlim)\r\n    axes.set_ylim(new_ylim)\r\n    axes.figure.canvas.draw()\r\n\r\ndata = torch.randn(512, 512).numpy()\r\ndraw_heatmap(data)\r\n```\r\n\r\nSimilar issues for the histogram\r\nhttps:\/\/stackoverflow.com\/questions\/76831010\/python-matplotlib-forcing-pan-zoom-to-constrain-the-x-axis-to-a-range-of-x-val\r\n\r\n### Proposed solution\r\n\r\n_No response_","comments":["Hi @LinqingZ , can you talk more about what feature do you want? From my understanding, you want to limit the x and y within some range. For example, if we have a 512 by 512 image and you limit both x and y within [-512, 512], then we can only zoom out 0.5x. Also, when we are panning, the x and y will be limited to [-512, 512]. Did I get all you want?","The logic for updating the view limits based on user input lives at https:\/\/github.com\/matplotlib\/matplotlib\/blob\/1bea95f1470937ef60d12857d7490008d21e261e\/lib\/matplotlib\/backend_bases.py#L3086-L3125 and https:\/\/github.com\/matplotlib\/matplotlib\/blob\/1bea95f1470937ef60d12857d7490008d21e261e\/lib\/matplotlib\/axes\/_base.py#L4289-L4309 (which is overridden in some Axes subclass).  Both of which will require a bit of chasing to get to the bottom of the implementation. \r\n\r\nOn one hand, implementing this is technically straight forward: we need to add some logic to clip the updated limits set.  However, I think this is conceptually\/naming-wise complicated as it will require adding a set of \"meta-limits\" (interactive limits) to the Axes.  We would also have to sort out which (if any) plotting methods automatically set this for the user.\r\n\r\nTyping this out I went from \"impossible\" to \"messy\" to \"mostly requires settling on names + writing documentation\".\r\n\r\nI think we should consider adding this feature."],"labels":["New feature"]},{"title":"[Bug]: The arrow length is different with or without bbox parameter when using ax.annotate ","body":"### Bug summary\r\n\r\nWhen using ax.annotate to draw text with arrow, the text is not aligned with the arrow. You can see some texts are overlapping with the arrow, but some texts are far away from arrow. The annotate code is:\r\n```python\r\n    ax.annotate(f\"({x_pos:.02f}kbps, {y_pos:.02f}dB)\",\r\n                (x_pos, y_pos),\r\n                textcoords=\"offset points\",\r\n                arrowprops=dict(arrowstyle=\"]->\", connectionstyle=\"arc3\", color=p[0].get_color()),\r\n                xycoords='data',\r\n                xytext=xy_text,\r\n                color=p[0].get_color(),\r\n                size=8,\r\n                ha=ha,\r\n                va=va,\r\n                transform_rotates_text=True, rotation=np.rad2deg(np.arctan(slope)), rotation_mode='anchor'\r\n                )\r\n```\r\nBut when I add bbox option, the output seems right. The texts and the arrows have correct distance:\r\n```python\r\n    ax.annotate(f\"({x_pos:.02f}kbps, {y_pos:.02f}dB)\",\r\n                (x_pos, y_pos),\r\n                textcoords=\"offset points\",\r\n                arrowprops=dict(arrowstyle=\"]->\", connectionstyle=\"arc3\", color=p[0].get_color()),\r\n                xycoords='data',\r\n                xytext=xy_text,\r\n                color=p[0].get_color(),\r\n                size=8,\r\n                ha=ha,\r\n                va=va,\r\n                bbox=dict(boxstyle=\"rarrow,pad=0.3\",\r\n                          fc=\"lightblue\", ec=\"steelblue\", lw=2),\r\n                transform_rotates_text=True, rotation=np.rad2deg(np.arctan(slope)), rotation_mode='anchor'\r\n                )\r\n```\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport scipy as sp\r\nimport numpy as np\r\n\r\nanchor_rate = [1000, 1660.89, 3220.62, 5927.36]\r\nanchor_psnr = [31.799098, 34.155477, 36.053423, 36.5]\r\n\r\nanchor_rate_log = np.log(anchor_rate)\r\n\r\nlin = np.linspace(min(anchor_psnr), max(anchor_psnr), num=1024, retstep=True)\r\nsamples = lin[0]\r\nv1 = sp.interpolate.pchip_interpolate(np.sort(anchor_psnr), np.sort(anchor_rate_log), samples)\r\n\r\nfig, ax = plt.subplots(figsize=(8, 6))\r\nindices1 = np.logical_and(samples >= anchor_psnr[0], samples <= anchor_psnr[-1])\r\np = ax.plot(np.exp(v1[np.nonzero(indices1)]), samples[np.nonzero(indices1)], \"\", )\r\nax1, = ax.plot(anchor_rate, anchor_psnr, marker=\"o\", linestyle=\"\", color=p[0].get_color(), label=\"Anchor\")\r\n\r\nrng = plt.axis()\r\nexpected = True\r\nfor x_pos, y_pos in zip(anchor_rate, anchor_psnr):\r\n    idx = np.argwhere(np.array(samples) > y_pos)\r\n    if idx.any():\r\n        near_psnr = samples[idx[0][0]]\r\n        near_rate = np.exp(v1[idx[0][0]])\r\n    else:\r\n        near_psnr = samples[-2]\r\n        near_rate = np.exp(v1[-2])\r\n    slope = (near_psnr - y_pos) * (rng[1] - rng[0]) \/ ((near_rate - x_pos) * (rng[3] - rng[2]))\r\n    perp_slope = -1 \/ slope\r\n    print(perp_slope)\r\n    d = 15\r\n    x = d \/ np.sqrt(1 + perp_slope ** 2)\r\n    y = perp_slope * x\r\n    print(f\"anchor: ({x},{y})\")\r\n\r\n    if expected:\r\n        xy_text = (x, y)\r\n        va = 'top'\r\n        ha = 'center'\r\n    else:\r\n        xy_text = (-x, -y)\r\n        va = 'bottom'\r\n        ha = 'center'\r\n    expected = not expected\r\n    ax.annotate(f\"({x_pos:.02f}kbps, {y_pos:.02f}dB)\",\r\n                (x_pos, y_pos),\r\n                textcoords=\"offset points\",\r\n                arrowprops=dict(arrowstyle=\"]->\", connectionstyle=\"arc3\", color=p[0].get_color()),\r\n                xycoords='data',\r\n                xytext=xy_text,\r\n                color=p[0].get_color(),\r\n                size=8,\r\n                ha=ha,\r\n                va=va,\r\n                bbox=dict(boxstyle=\"rarrow,pad=0.3\",\r\n                          fc=\"lightblue\", ec=\"steelblue\", lw=2),\r\n                transform_rotates_text=True, rotation=np.rad2deg(np.arctan(slope)), rotation_mode='anchor'\r\n                )\r\n\r\nax.set_xlim([0, ax.get_xlim()[1] * 1.1])\r\nax.set_ylim([ax.get_ylim()[0] * 0.99, ax.get_ylim()[1] * 1.01])\r\n\r\nplt.show()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n![myplot](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/7447401\/fd083e65-ef1b-47d6-a923-04b2763b1bbf)\r\n\r\n### Expected outcome\r\n\r\n![myplot1](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/7447401\/2d3f91f2-e735-49ca-869c-e085494a5715)\r\n\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nOS\/X\r\n\r\n### Matplotlib Version\r\n\r\n3.7.2\r\n\r\n### Matplotlib Backend\r\n\r\nMacOSX\r\n\r\n### Python version\r\n\r\nPython 3.11.4\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nNone","comments":["Thank you for the report @ilongshan, however I am finding the reproduction code a little hard to follow.  Are you able to reproduce the problem with a simpler example?  Maybe hard-code the numbers that are passed to `annotate`.","@rcomer Hi, this is th simplified code:\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nanchor_rate = [1000, 1660.89, 3220.62, 5927.36]\r\nanchor_psnr = [31.799098, 34.155477, 36.053423, 36.5]\r\n\r\nfig, ax = plt.subplots(figsize=(8, 6))\r\nax1, = ax.plot(anchor_rate, anchor_psnr, marker=\"o\", linestyle=\"\", color='#1f77b4', label=\"Anchor\")\r\n\r\nax.annotate(f\"(5927.36kbps, 36.5dB)\",\r\n            (5927.36, 36.5),\r\n            textcoords=\"offset points\",\r\n            arrowprops=dict(arrowstyle=\"]->\", connectionstyle=\"arc3\", color='#1f77b4'),\r\n            xycoords='data',\r\n            xytext=(-1.6921283813438717, 14.904251123120897),\r\n            color='#1f77b4',\r\n            ha='center',\r\n            va='bottom',\r\n            bbox=dict(boxstyle=\"rarrow,pad=0.3\",\r\n                      fc=\"lightblue\", ec=\"steelblue\", lw=2),\r\n            transform_rotates_text=True, rotation=6.47724215379907, rotation_mode='anchor'\r\n            )\r\n\r\nplt.show()\r\n```\r\nThis is the not aligned image:\r\n![before](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/7447401\/0969b8d0-e556-4d29-a5f1-de8ec30bbeb6)\r\n\r\nAnd this is the image with bbox parameter:\r\n![after](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/7447401\/bacd2a97-2917-48ff-82d3-2169b29811af)\r\n","@ilongshan we have a discussion forum https:\/\/discourse.Matplotlib.org. I wonder if these questions would be better discussed there before escalating to bug reports?   The current report is not particularly clear to me and I'm not sure a bug has been nailed down. ","@jklymak It is OK to put this issue on https:\/\/discourse.matplotlib.org. \r\nI have create a post about this issue: [The text is not aligned with arrow when using ax.annotate](https:\/\/discourse.matplotlib.org\/t\/the-text-is-not-aligned-with-arrow-when-using-ax-annotate\/23970)\r\nI expected that the text is near to the arrow not far way from it."],"labels":["status: needs clarification"]},{"title":"[ENH]: expand connectionPatch coords to support all annotation coords","body":"### Problem\n\nConnectionPatch is described as annotation w\/o text in the tutorial and as a function for connecting two aribtrary points in its docs and it would be very helpful if those two points could be artists. Since annotation supports this, I'm doing a lot of \r\n\r\n```python\r\n\r\narrow = ax.annotate(\"\", (x1, y1), (x2, y2), xycoords=A1, textcoords=A2, arrowprops=dict(arrowstyle='-|>'))\r\nlabel = ax.annotate(\"label\", (xp, yp), xycoords=arrow)\r\n```\r\n\r\nand I'd really rather prefer to use the object with \"connect thing\" semantics for connecting things and the object with \"label things\" semantics for labeling.   \n\n### Proposed solution\n\n@anntzer proposed factoring out the annotation coordinate system in https:\/\/github.com\/matplotlib\/matplotlib\/issues\/22223#issuecomment-1011957191 and that's the approach I'd advocate here -> pull out the coordinate logic into its own logic and then have ConnectionPatch call out to that function.","comments":[],"labels":["New feature","topic: arrow"]},{"title":"[Bug]: The width of arrow is not equal to the widthB setting in arrowprops","body":"### Bug summary\n\nUsing ax.annotate to plot arrow with widthB, but the width of the arrow is not equal to the widthB\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax = plt.subplots(figsize=(8, 8), dpi=72)\r\nax.set_xlim(0, 8)\r\nax.set_ylim(0, 8)\r\nax.annotate(\"Test\", xy=(3, 2),\r\n            xytext=(0, 2),\r\n            textcoords=\"offset points\",\r\n            ha='center', va='bottom',\r\n            arrowprops=dict(arrowstyle=\"-[, widthB = 2\"))\r\nplt.show()\n```\n\n\n### Actual outcome\n\n<img width=\"576\" alt=\"image\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/7447401\/e7229cf0-250f-4199-9eca-4a2301146eda\">\r\n\n\n### Expected outcome\n\nexpect the width is equal to 2\n\n### Additional information\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.7.2\n\n### Matplotlib Backend\n\nMacOSX\n\n### Python version\n\nPython 3.11.4\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nNone","comments":["What do you expect width 2 to be visually? I'm asking b\/c the unit of the [width B argument](https:\/\/matplotlib.org\/devdocs\/api\/_as_gen\/matplotlib.axes.Axes.annotate.html#matplotlib.axes.Axes.annotate) is [typographic points](https:\/\/en.m.wikipedia.org\/wiki\/Point_(typography)) where 1 pt =1\/72 inch, which means 2 pt = 1\/36 inch. Is that what it is on screen w\/ the image blown up to it's physical size? ","`widthB` is of [`FancyArrowPatch`](https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.patches.FancyArrowPatch.html#matplotlib.patches.FancyArrowPatch), and is not actually in points, it is rather just a relative scale factor (which is additionally modified by the `mutation_scale` parameter (which defaults to 1 as well). (The `width` argument from `annotate` docs which is in points is for the simple arrows, but since this is using `arrowstyle` in `arrowprops` it is a fancy arrow... yes... this is rather confusing...)\r\n\r\nFor this style of arrow (\"-[\", it looks like the default (1) is roughly just equal to \"about the height of the text\", not really sure if there is any specific value, so a value of 2 is just \"twice as big as the default\", which it does seem to do.","@story645 I expect widthB=2 should be 2 points, which I think is more natural. I cannot find some document to explain it.","@ksunden Maybe you are right. But it is too rough that I can not control it. Hope someone can find a way to make it","> The width argument from annotate docs which is in points is for the simple arrows, but since this is using arrowstyle in arrowprops it is a fancy arrow... yes... this is rather confusing...\r\n\r\nYeah I think a first pass to addressing this issue is documenting the units of widthA\/widthB. I think that it's relative width is only documented in code and [a gitter chat](https:\/\/matrix.to\/#\/!BXmyZMTnRjWJldDRLV:gitter.im\/$rVZUbLaR19Q2b_UTLgSIGwUzBYJtwYbc6FVzPCnifOY?via=gitter.im&via=matrix.org&via=aria-net.org)."],"labels":["Documentation: API"]},{"title":"Add mappings for bold and italic cal font class","body":"## PR summary\r\nFixes #22056 \r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-docstrings) guidelines\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please\r\nconsider the following points:\r\n\r\n- A development guide is available at https:\/\/matplotlib.org\/devdocs\/devel\/index.html.\r\n\r\n- Help with git and github is available at https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html\r\n\r\n- Create a separate branch for your changes and open the PR from this branch. Please avoid working on `main`.\r\n\r\n- The PR title should summarize the changes, for example \"Raise ValueError on\r\n  non-numeric input to set_xlim\".  Avoid non-descriptive titles such as\r\n  \"Addresses issue #8576\".\r\n\r\n- The summary should provide at least 1-2 sentences describing the pull request\r\n  in detail (Why is this change required?  What problem does it solve?) and\r\n  link to any relevant issues.\r\n\r\n- If you are contributing fixes to docstrings, please pay attention to\r\n  https:\/\/matplotlib.org\/stable\/devel\/documenting_mpl.html#formatting-conventions.  In particular,\r\n  note the difference between using single backquotes, double backquotes, and\r\n  asterisks in the markup.\r\n\r\nWe understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.\r\n-->\r\n","comments":["From the #22056 discussion, it seems using `plt.rcParams['font.weight'] = 'bold'` seems to be problematic. Using the `\\mathbfit` command to fetch the bold calligraphy fonts could be a way forward (?)\r\n\r\n```python\r\nfontsets = [\"dejavusans\", \"dejavuserif\", \"cm\", \"stixsans\", \"stix\"]\r\nfor x, fs in enumerate(fontsets):\r\n    s = \"$\\mathrm{%s}: \\mathcal{ABCDE} \\mathbfit{\\mathcal{ABCDE}}$\" % (fs)\r\n    ...\r\n```\r\n\r\n\r\n![cal_bold](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/8de814aa-a35e-4cd1-a5a9-f84fcb86c62c)\r\n","Hi @ksunden, I investigated further on this issue and listing my findings on this:\r\n\r\n* It is tricky to render the bold cal symbol in LaTeX, however, it provides a `mathbfcal` command to use bold calligraphic versions of the symbols.\r\nReference: https:\/\/tex.stackexchange.com\/questions\/2783\/bold-calligraphic-typeface\r\n* There is a `mathalpha` package that provides the `Euler Bold Script ` or `Euler-Math` fonts for the bold calligraphic versions. \r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/04b3cf6c-2d31-45f5-9116-7c743b008f6a)\r\n\r\nReferences:\r\n- https:\/\/mirror.niser.ac.in\/ctan\/fonts\/euler-math\/Euler-Math.pdf\r\n- https:\/\/ctan.math.illinois.edu\/macros\/latex\/contrib\/mathalpha\/doc\/mathalpha-doc.pdf\r\n\r\n* From my understanding, I think neither `DejaVu Sans` nor `Stix` provides the bold `mathcal` Unicode. Although the Computer Modern font provides bold versions for `mathcal` from the `cmbsy10` font listed [here](https:\/\/ctan.org\/tex-archive\/fonts\/cm\/ps-type1\/bakoma\/ttf), integrating that results in the following:\r\n![bold cal](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/a1de51d6-be6b-415c-9781-f5d0c5106f49)\r\n\r\nHowever, it does not make much sense to add a new font just for `Computer Modern`, or to add the `Euler-math` font. So this issue could be closed as expected LaTeX behavior because default LaTeX does not seem to provide it simply either.\r\nAs a side note, I could add the `cmbsy10` changes here as a reference for the user or maybe an example plot or something (?)\r\n\r\nSome more useful references:\r\nhttps:\/\/tug.org\/TUGboat\/tb33-3\/tb105vieth.pdf\r\nhttps:\/\/cs.brown.edu\/about\/system\/managed\/latex\/doc\/euler.pdf\r\nhttps:\/\/tex.stackexchange.com\/questions\/580904\/accessing-all-possible-math-styles-of-the-stix-font"],"labels":["status: needs rebase","topic: text\/mathtext"]},{"title":"DOC: Add overview of axes creation methods","body":"Closes #17376.\r\n\r\nThere might still be room for further improvements, be it description or formatting. But I would like to leave that for later. The main goal is to get a first version of this in soon.\r\n","comments":["Preview:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/10e77dea-389f-4745-a622-b19cef6cccf8)\r\n","I think @ksunden's scipy tutorial was in this vein, so he might have some thing. \r\n\r\nETA- I also kinda prefer the unstyled flowchart. ","Meta concern here- I'm not sure somebody who doesn't already know what we mean by simple vs complex grid (for example) will be able to follow this chart, so I think it kinda needs little thumbnails\/visual cues in the decision diamonds. ","> I'm not sure somebody who doesn't already know what we mean by simple vs complex grid\r\n\r\nI've changed to \"regular grid\" and \"general grid\".","> I've changed to \"regular grid\" and \"general grid\".\r\n\r\nI'm not sure that's any better?\r\n\r\nsince this chart can be made in matplotlib with connection patch, let me try to make what I'm thinking of? ","> https:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/axes_intro.html#creating-axes\r\n> \r\n> How does this relate to the above? At the least they should be cross linked if not merged.\r\n\r\nYour link is the first point of contact for creating Axes, right after explaining the elements of a figure. It should not go into much all the creation details. IMHO it should only contain `subplots()` and mention that there are more methods.\r\n\r\nOTOH the diagram is meant as a comprehensive list of all Axes creation methods together with a compact guide which ones are for which purpose.\r\n","> I'm not sure that's any better?\r\n> \r\n> since this chart can be made in matplotlib with connection patch, let me try to make what I'm thinking of?\r\n\r\n\"regular\" is for sure better than \"simple\" as it is more specific. \"general\" and \"complex\" are rather equally bad, but I cannot come up with a short defining term for \"unequally spaced grid and\/or including spans over multiple grid cells\".\r\n",">but I cannot come up with a short defining term for \"unequally spaced grid and\/or including spans over multiple grid cells\".\r\n\r\nirregular or unstructured - that's the language we use in plot types?\r\n\r\nAlso yes I misspoke - regular is way better than simple for describing the grid, but I think visual cues would be better still so I'm drafting up that figure ","Folks, thanks for the feedback. As mentioned above, I'm not going to bikeshed this (sorry, but I really don't have the time). I wanted to get this in, because #17376 has 4 upvotes (my most-upvoted issue and among the top 25 of upvotes on any issue). IMHO this already an improvement as is. Anybody can pick up from here and refine.\r\n\r\nMy wish would be that we keep the aspects that I tried to incorporate into this diagram:\r\n\r\n- Provide a comprehensive list of all Axes creation methods\r\n- Distinguish and show parallels between `pyplot` and the object methods\r\n- De-emphasize less used variants (i.e. gridspecs and subplot)\r\n- Give a recipe which method to use based on the desired Axes properties\/type\r\n\r\nI think having all of them is essential to being able to drill down to one preferred solution for a use case. It doesn't help if we give multiple solutions without further distinctions or guidance: This example part of the original plot is quite unhelpful and rather scary\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/12bb2933-51a5-48f4-aa4a-7b557936ed92)\r\n\r\nBonus points when rendering this as SVG with links to the methods.","> irregular or unstructured - that's the language we use in plot types?\r\n\r\nNot really. There's still partial structure\/regularity. - For data points (in plot types) that means really random positions. We're not that random here.","We also have https:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/arranging_axes.html. Can you add this there?  I dont think this needs a separate page that overlaps both sections so completely. ","Working out the most messy version of this that I deeply dislike, I think this might be most useful as a table or flow chart on \r\nhttps:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/index.html to direct folks to which tutorial they should read? Especially since it mixes inset and twin in?\r\n\r\n<details>\r\n<summary>really ugly draft of table<\/summary>\r\n<img src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/0c7b289f-7b7d-4b01-9aa1-4671f43df20d\"><\/img>\r\n<\/details>\r\n","> wanted to get this in, because https:\/\/github.com\/matplotlib\/matplotlib\/issues\/17376 has 4 upvotes\r\n\r\nThis urgency ties into the meta issue I'm having w\/ how docs are handled in this project,  which is that all this new content is great and popular in the individual but turns into an inconsistent undiscoverable blob in the aggregate. Like taking this very awesome chart and trying to situate it and now I'm thinking it really shouldn't be a chart that implies these things are somehow mutually exclusive since any axes can have an inset or a twin. ","@story645 thanks for pointing out the visual aspect of this with your example. I came from the \"recipe\" idea to ask a series of questions and by that guide people to the appropriate function. However, with the visualization we can just show the layouts and people can immediately see what they get and pick one.\r\n\r\nI believe this is best done as a pictographic representation, rather than trying to plot it with matplotlib. We can well create SVGs (e.g. with Inkscape) and embed them. As a quick example, we could go in this direction:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/ee545a38-fb6b-476f-a250-c2691e9fbc03)\r\n\r\n> meta issue I'm having w\/ how docs are handled in this project, which is that all this new content is great and popular in the individual but turns into an inconsistent undiscoverable blob in the aggregate.\r\n\r\nI fundamentally agree. We need more fundamental restructuring and consolidation. This essentially belongs to https:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/arranging_axes.html but doesn't fit into its current narrative. I'm a big fan of doing things stepwise. First put all the cards on the table, and then rearange them - even at the risk at having temporarily more clutter. As we see above, there are still conceptual discussions on this idea itself. Tying this to a restructuring of https:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/arranging_axes.html is too much and almost guaranteed to stall (at least with our current processes).","It hardly seems a heavy lift to add it at the beginning of arranging_axes. Even just as-is, if you don't want to edit any existing material.  I think that's preferable to a new top TOC entry.  ","> I believe this is best done as a pictographic representation,\r\n\r\nI like your pictograph and I think stripping out the ticks is the right move . I was thinking sphinx design table\/grid mostly cause then all the auto reflow goodness and the code markup\/intersphinx. \r\n\r\n>  Tying this to a restructuring of https:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/arranging_axes.html is too much and almost guaranteed to stall \r\n\r\nI hear, and @jklymak has made similar points about other PRs and I don't think either of you are wrong - but I'm also concerned about making a restructure harder every time we add new cards. I don't think that's what's going on here exactly, but I think we should have a discussion\/consensus on a shared direction that we can then use to guide PR reviews. \r\n\r\nETA:\r\n> However, with the visualization we can just show the layouts and people can immediately see what they get and pick one.\r\n\r\nain't that the best part about being a visualization library? ;)","I'll reiterate the above.  I don't see anything here that is incompatible with the narrative in arranging_axes.  It's missing some things that are in arranging_axes, and arranging_axes is missing some things here (twins and insets) but the info is largely the same.  Having a visual overview with links to the appropriate subsections and or methods seems like a great idea.  \n\nFrom a meta point of view, I agree that we should have some consensus about scope and audience.  I'd encourage us to schedule a call or two in the fall for this.  However you can't codify taste, and at some point people are just going to do things differently. What I feel we should avoid is lots of back and forth about taste issues. In the case of disagreement, @tacaswell will have to decide, or delegate someone to make intermediate decisions.  ",">  However you can't codify taste, and at some point people are just going to do things differently.\r\n\r\nOne the one hand don't want to pull this discussion further OT, but fundamentally disagree this is a taste issue - it's about consistency in expository writing so that the docs are cohesive and coherent.  Tim and Anthony are responsible for this on the API side, I don't think it's unreasonable to want the same on the docs side.\n\nPrecisely because observations like this\r\n\r\n>  It's missing some things that are in arranging_axes, and arranging_axes is missing some things here (twins and insets) \r\n\r\nare much easier to make if, going back to the card metaphor, all the cards are expected to come from the same deck. \n\nETA: while yes I have my preferred approaches - chunking, scaffolding - that I'm gonna advocate for, I'm right now more interested in us agreeing on some small handful. Partially also b\/c I think approach is largely what distinguishes user guide from tutorial from gallery - for example, the plot types gallery is our cleanest section of the docs, and is also the one w\/ the clearest guidelines on what belongs.\r\n","We have two proposed format for this graphic, and four proposed locations.  I don't feel there is an objective criteria to be applied to say one is more \"consistent\" or \"coherent\".  There are only suggestions and arguments, and eventually a subjective decision will have to be made. ",">  I don't feel there is an objective criteria to be applied to say one is more \"consistent\" or \"coherent\".\r\n\r\nThe flow chart approach has coherency issues because it implies all these methods are at the same level and are mutually exclusive 'cause they're part of the same decision tree. This is why it's not sitting cleanly in `arranging_axes` which l agree with you is generally speaking the right place for most of this table. While I proposed putting it on the landing page for this section, I now think it's not comprehensive enough for that. \r\n\r\nETA: Pictures are a value add, yes, but I also think one of the reasons for review is to offer suggestions that would improve the contribution. ","Just found this little bit in the cheatsheets https:\/\/matplotlib.org\/cheatsheets\/cheatsheets.pdf\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/6077a414-7cb3-481f-9855-94721fa60a87)\r\n","> Just found this little bit in the cheatsheets\r\n\r\n\ud83d\udc4d looks like mine but they should switch to subplot_mosaic.  :)\r\n\r\n\r\n","Small nit: GridSpec.subplots() really makes a complete grid, though one can use subplots() on a *sub*gridspec when constructing complex layouts."],"labels":["Documentation"]},{"title":"histogram , logarithmic scale , negative values.","body":"### Problem\n\nI would like to tackle an issue by plotting the histogram of a data with negative values in logarithmic scale.\r\nHence there are 3 factors : data with negative values , histogram , logarithmic scale.\r\n\r\nSeaborn package can plot a histogram with logarithmically sized bins. Hence bins visually seem equal in axes with logarithmics scale. But seaborn can not plot negative values.\r\nI contrast, matplotlib can plot negative values in logarithmic scale (\u2018symlog\u2019), but can not display a proper histogram (the bin sizes are not correspondingly logarithmically sized, they are linearly sized).\r\n\r\nI suggest initially defining the bin sizes in logscale & then assigning them as bins.\r\nI would like to have an object-oriented parameter in the hist function to do this.\r\nThe frame of the method :\r\n\n\n### Proposed solution\n\n```python\r\ndata = df[\u2018column\u2019]\r\nnb = 60  # number of desired bins\r\n\r\nlogbins = np.logspace( np.log10( data.abs().min() ) , np.log10( data.abs().max() ) , int(nb\/2) )\r\nlogbins_2 = np.concatenate((-1*np.flip(logbins) , logbins))\r\nlogbins_3 = np.sort(logbins_2) \r\n\r\nplt.hist( data , bins=logbins_3 )\r\nplt.xscale('symlog' , linthresh=0.001)  \r\n```\r\n\r\nI tested this and it functions correctly.\r\nI\u2019m not much familiar with object-oriented programming & using git. Hence it would be good that some other volunteer here continue the job by creating a parameter for the hist function : for example   \r\n\r\n```python\r\nplt.hist( data , symlogbins=True )\r\n```\r\n\r\n\r\n\r\n","comments":["I don't think we'd accept such a change. We use np.hist and want to avoid doing too much different from what it does. As you note, we allow you to pass your bins in manually, so that works for users with specialized needs.  ","I agree with @jklymak Our focus is on visualization, not on data processing. If logarithmic scale on histograms are important enough, that should go into the algorithmic code, i.e. `numpy.histogram`. If you can convince `numpy` to do the logic, we'll pick that interface up.","Alright. I had not thought about numpy as the main processor of data in matplotlib.hist function.\r\nI\u2019ll contact the numpy community & will return here with the outcome.\r\n"],"labels":["New feature"]},{"title":"Adds row and column axes sharing to simple subplot mosaics","body":"## PR summary\r\nResolves #18305.  \r\nRecreated with new forked branch from #26327 \r\nAdds row and column axes sharing to simple subplot mosaics. This feature is implemented only for non-nested mosaics. A set of axes are part of the same row\/column if it has the same span (axes' start and end row\/column are the same).\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-docstrings) guidelines\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please\r\nconsider the following points:\r\n\r\n- A development guide is available at https:\/\/matplotlib.org\/devdocs\/devel\/index.html.\r\n\r\n- Help with git and github is available at https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html\r\n\r\n- Create a separate branch for your changes and open the PR from this branch. Please avoid working on `main`.\r\n\r\n- The PR title should summarize the changes, for example \"Raise ValueError on\r\n  non-numeric input to set_xlim\".  Avoid non-descriptive titles such as\r\n  \"Addresses issue #8576\".\r\n\r\n- The summary should provide at least 1-2 sentences describing the pull request\r\n  in detail (Why is this change required?  What problem does it solve?) and\r\n  link to any relevant issues.\r\n\r\n- If you are contributing fixes to docstrings, please pay attention to\r\n  https:\/\/matplotlib.org\/stable\/devel\/documenting_mpl.html#formatting-conventions.  In particular,\r\n  note the difference between using single backquotes, double backquotes, and\r\n  asterisks in the markup.\r\n\r\nWe understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.\r\n-->\r\n\r\n\r\n\r\n","comments":[],"labels":["status: needs rebase","mentored: sprint"]},{"title":"Add `U`, `V` and `C` setter to `Quiver`","body":"## PR summary\r\n\r\nSimilarly as #26375, add setters to be able to update arrows collection using quiver collection interface.\r\n\r\nExample:\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.quiver as mquiver\r\nimport numpy as np\r\n\r\nfig, ax = plt.subplots()\r\nX = np.arange(-10, 10, 1)\r\nY = np.arange(-10, 10, 1)\r\nU, V = np.meshgrid(X, Y)\r\nM = np.hypot(U, V)\r\nqc = mquiver.Quiver(\r\n    ax, X, Y, U, V, M\r\n    )\r\n\r\nax.add_collection(qc)\r\nax.autoscale_view()\r\n\r\nqc.set_U(U\/5)\r\n```\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [n\/a] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [n\/a] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-docstrings) guidelines\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please\r\nconsider the following points:\r\n\r\n- A development guide is available at https:\/\/matplotlib.org\/devdocs\/devel\/index.html.\r\n\r\n- Help with git and github is available at https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html\r\n\r\n- Create a separate branch for your changes and open the PR from this branch. Please avoid working on `main`.\r\n\r\n- The PR title should summarize the changes, for example \"Raise ValueError on\r\n  non-numeric input to set_xlim\".  Avoid non-descriptive titles such as\r\n  \"Addresses issue #8576\".\r\n\r\n- The summary should provide at least 1-2 sentences describing the pull request\r\n  in detail (Why is this change required?  What problem does it solve?) and\r\n  link to any relevant issues.\r\n\r\n- If you are contributing fixes to docstrings, please pay attention to\r\n  https:\/\/matplotlib.org\/stable\/devel\/documenting_mpl.html#formatting-conventions.  In particular,\r\n  note the difference between using single backquotes, double backquotes, and\r\n  asterisks in the markup.\r\n\r\nWe understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.\r\n-->\r\n","comments":["Thank you @rcomer for the review, this should all done - the failure with the doc seems to be unrelated to this PR.","I just noticed there is overlap here with #22407.","Talked about this on weelky call\r\n\r\nGiven the @rcomer 's discovery that the sizes can miss-matched, we think it would be best to add a `set_XYUVC(X=None, Y=None, U=None, V=None, C=None)` method that does the same thing for X and Y that this PR proposes for UVC that also re-verifies all of the shapes are consistent (and then we get the \"nice\" thin wrappers that call the main one).","I have not studied it in detail, but the proposed `set_data` in #22407 appears to do what we need for `set_XYUVC`.  So potentially @ianhi's code could be pulled in here.","Please lift whatever code is helpful from that PR!","To summarize (and make sure that I understand correctly):\r\n- add `set_XYUVC` to avoid issue with mismatching array shapes and is the only method which will allow changing the size of the arrays\r\n- privatise atttibutes `XY`, `N` with deprecation?\r\n- Add setters\/getters for `X`, `Y`, `U`, `V`, `C` with array size checks?","> * Add setters\/getters for `X`, `Y`, `U`, `V`, `C` with array size checks?\r\n\r\nWell, they just call `set_XYUVC` which ensures length consistency with the existing data, e.g.\r\n\r\n```\r\ndef set_U(self, U):\r\n    self.set_XYUVC(U=U)\r\n```\r\n","Similar ping here as in #26375","This should be ready, I have used @ianhi's code from #22407 to parse the arguments and check the length consistency. Most attribute have been privatised."],"labels":["New feature","status: needs revision","topic: plotting methods"]},{"title":"[MNT]: Improve backend selection API","body":"### Summary\r\n\r\nWe currently have:\r\n\r\n- `matplotlib.use`\r\n- `matplotlib.get_backend`\r\n- `pyplot.switch_backend`\r\n\r\nIssues:\r\n\r\n- The name `matplotlib.use` is really obscure. \r\n- The difference between `switch_backend` and `use` is not quite clear.\r\n\r\n### Proposed fix\r\n\r\n- Consider renaming `matplotlib.use` (and either discourace or long-term deprecate `use` (with a pending deprecation)).\r\n- Check whether `use` and `switch_backend` can be unified. If not, at least improve the documentation.\r\n\r\n---\r\n\r\nSide note: The `force` parameter in `use` can be dropped.\r\n\r\n```\r\nmatplotlib.use(..., force=True)\r\n```\r\nis equivalent to\r\n```\r\ntry:\r\n    matplotlib.use(...)\r\nexcept ImportError:\r\n    pass\r\n```\r\nIt should be rare that users want to ignore that changing the backend fails. And if so, they can do it explicitly. We do not need to provide API for that. The only slight complication is that this the default behavior is force=True; i.e. dropping would change the default behavor. But we can address that in the course of \"renaming\": We simply provide a new function, e.g. `set_backend` with the new behavior.\r\n\r\n","comments":["use() is a somewhat obscure name, but it's so widely used that it's probably never removable.\r\n\r\nThe notion of having \"a\" backend is really a pyplot one (because that's basically what plt.figure()\/plt.show() dispatch to), so in theory the backend-control functions should really be in pyplot (and in practice the actual logic, i.e. switch_backend, is indeed implemented in pyplot), but for a long time backends were not switchable after pyplot had been imported hence the existence of use() at the toplevel, which could be called (just to register whatever backend the user actually wants) before pyplot gets imported.\r\nNow the situation is a bit better, and backend switches are possible, but still not perfect (just importing pyplot still tries to import the \"current\" backend and thus may load PyQt\/wxPython\/whatnot in the module space, which was e.g. a problem back when we supported PyQt4 and PyQt5 because these two modules *cannot* be imported in the same process at all, even without starting an event loop; I'd guess ideally we'd only import the backend module when actually calling plt.figure(), i.e. at the last possible moment).  So it's still useful to have a backend setting function accessible before importing pyplot.\r\n\r\nTo summarize: I think we need to keep an API outside of pyplot (use) unless we further cleanup pyplot to delay even more the actual backend importing (which is probably doable and worthwhile); also that API may be very hard to ever deprecate.  I also think it makes sense for the implementation to live in pyplot (because it's fundamentally a pyplot concept), though it could possibly be made private (I'm not sure I'd really want that, though).\r\n\r\nOne should also check how this plays with mpl-gui.","> just importing pyplot still tries to import the \"current\" backend and thus may load\r\n\r\nThis isn't true in 3.7 any more:\r\n\r\n```\r\n\u2714 17:05:51 [belanna] @ ipython\r\nPython 3.11.3 (main, Jun  5 2023, 09:32:32) [GCC 13.1.1 20230429]\r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 8.14.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: import matplotlib\r\n\r\nIn [2]: import matplotlib.pyplot as plt\r\n\r\nIn [3]: type(matplotlib.rcParams)\r\nOut[3]: matplotlib.RcParams\r\n\r\nIn [4]: type(matplotlib.rcParams).mro()\r\nOut[4]:\r\n[matplotlib.RcParams,\r\n collections.abc.MutableMapping,\r\n collections.abc.Mapping,\r\n collections.abc.Collection,\r\n collections.abc.Sized,\r\n collections.abc.Iterable,\r\n collections.abc.Container,\r\n dict,\r\n object]\r\n\r\nIn [5]: dict.__getitem__(matplotlib.rcParams, 'backend')\r\nOut[5]: <object at 0x7ff7fd8ffc80>\r\n\r\nIn [6]: matplotlib.__version__\r\nOut[6]: '3.7.2'\r\n\r\nIn [7]:\r\n```\r\n\r\nbut if you do anything that iterates over the rcParams (like tab-complete in IPython (\ud83e\udd2f)) it will run though the fall-back logic and pick a backend.  In IPython picking the backend will also aggressively start the event loop by installing the inputhook.   \r\n\r\nI agree with @anntzer \"active backend\" is really a `pyplot` concept and if possible we should push it as far into `pyplot` as we can.\r\n\r\nThe real trap we are in is:\r\n\r\n - users can use rcParams to set the backend\r\n - we want the `rcParams['backend']` to always reflect reality\r\n - we do not want to return the auto-sentinel to users (and we need the auto sentinal to detect \"the user is on a headless system and does not care, give them agg\" vs \"the user asked for Qt, they are on a headless system, raise because we can not do what they asked).\r\n\r\nGiving up any of those three would make the problem a lot simpler.   The softest one is probably the third (breaking type stability on `rcParams['backend']`) and letting the user know \"we have not locked a backend yet\".  If we accept that we can drop the \"maybe import pyplot\" logic in the rcParams object.\r\n\r\nI think the path would be then to:\r\n - stop documenting `mpl.use` and `mpl.get_backend()` in examples etc (agree with @anntzer that they are too widespread to actually deprecate)\r\n - highlight `plt.switch_backend` in our docs as the \"right\" way to force a backend of the user's choice\r\n - move the actual selection to only automatically happen when `plt.figure` is called (now it is that _or_ when `rcParams['backend']` or `mpl.get_backend()` is used). \r\n","> The softest one is probably the third (breaking type stability on rcParams['backend']) and letting the user know \"we have not locked a backend yet\"\r\n\r\nBy the way when I first implemented the autoselection logic there was also the idea of allowing the user to explicitly set rcParams[\"backend\"] to a *list* of strings (the list of backends that will be tested when we actually need to select a backend) instead of introducing an opaque object representing the (fixed) builtin fallback order (see discussion in the old threads).  The idea was rejected on grounds of type stability, but may be perhaps worth revisiting (... or not).  (Reading rcParams[\"backend\"] could also return that list if we haven't selected the backend yet, or (as we do now) force selection and return just the selected backend.)","I am coming around the the list version more than when it was first proposed.  `plt.switch_backend([list, of, options])` also seems nice?","All of the above makes sense.\r\n\r\nIt would also be a lot easier if rcParams[\"backend\"] would not need to reflect the current state, i.e. it's just a (list of) value(s) to look up when needed. Similar to prop_cycle not holding the actual cycler state.\r\nBut I don't see a reasonable migration strategy (other than deprecating rcParams[\"backend\"] and replacing it with rcParams[\"default_backend\"] and deferring all actual setting\/retrieving actions to pyplot functions).","`'proposed_backend'` `'preferred_backend'`, `'backend_priority'`, `'backend_order'`?\r\n\r\n","Do the name proposals mean, you consider it worthwile redesigning the rcParams backend interaction (including the implied API changes)?","I feel that the few things that are not \"style\" would ideally be segregated from `rcParams`.  ","> Do the name proposals mean, you consider it worthwile redesigning the rcParams backend interaction (including the implied API changes)?\r\n\r\nI think it is worth considering so we can get away from rcParams having to be updated to match the selected backend.\r\n\r\n> I feel that the few things that are not \"style\" would ideally be segregated from rcParams.\r\n\r\nYes, but the ability to set the preferred backend via configuration file is too useful to give up and I think the cost of having backend information in rcParams is a lesser evil than having a second configuration file.\r\n"],"labels":["API: consistency","API: changes","Maintenance"]},{"title":"[ENH]: More generic slider","body":"### Problem\n\nI've found the current implementation of slider to be quite limited in what you can do. Quite often I don't want a scaler with a linear behaviour but rather with log scale or something even more exotic.\r\n\r\nMy typical work around is to have vmin and vmax transformed to a linear scale and then call the inverse of this transform in the update function that uses the values from my sliders and sets a new custom text with `self.valtxt.set_text`.\r\n\r\nHowever, having to this kind of transform inverse combination for each slider and usage of slider is rather anoying and can easily lead to mistakes.\r\n\r\nSome other people with similar use cases:\r\n - https:\/\/stackoverflow.com\/q\/39960791\/15399131\r\n - https:\/\/stackoverflow.com\/q\/62804263\/15399131\n\n### Proposed solution\n\nI imagine that you could create a class `NormSlider` that additionally takes in a keyword argument `norm: mpl.colors.Normalize` to deal with the this. Then it is a matter of calling `norm(val)` and `norm.inverse(scale_val)` inside this class instead of having to keep track of it outside the Slider class. \r\n\r\nIt would still be limited to monotonic transformations as far as I can tell, but it is atleast as general as using\r\n```\r\nnorm = mpl.colors.FuncNorm((_forward, _inverse), vmin=vmin, vmax=vmax)\r\n```\r\n\r\nOther solutions I can think of would be to have a `SequenceSlider` which would take an argument `vals: Sequence` instead of `valmin`, `valmax` and `valstep`. Then the slider would be indexing the values in this array instead. This is arguably as general as you can get.\r\n\r\nI'm not sure which one would be better.","comments":["Sliders already exist on axes that can have norms applied to their x- or y- axis:\r\n\r\nA quick example adapted from the slider demo in the docs, but having a log scaled slider and adding the axis back in to make it a bit more clear what its doing:\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.widgets import Slider\r\n\r\n# The parametrized function to be plotted\r\ndef f(t, amplitude, frequency):\r\n    return amplitude * np.sin(2 * np.pi * frequency * t)\r\n\r\nt = np.linspace(0, 1, 1000)\r\n\r\n# Define initial parameters\r\ninit_frequency = 3\r\n\r\n# Create the figure and the line that we will manipulate\r\nfig, axs = plt.subplot_mosaic([[\"fig\"], [\"slider1\"], [\"slider2\"]], height_ratios=[1, .1, .1], layout=\"constrained\")\r\nline, = axs[\"fig\"].plot(t, f(t, 5, init_frequency), lw=2)\r\naxs[\"fig\"].set_xlabel('Time [s]')\r\n\r\n# Make a horizontal slider to control the frequency.\r\nfreq_slider1 = Slider(\r\n    ax=axs[\"slider1\"],\r\n    label='Frequency [Hz]',\r\n    valmin=0.1,\r\n    valmax=100,\r\n    valinit=init_frequency,\r\n)\r\n\r\n# This is the critical section for this issue\r\naxs[\"slider1\"].set_xscale(\"log\")\r\naxs[\"slider1\"].set_axis_on()\r\naxs[\"slider1\"].set_yticks([])\r\n\r\n\r\n# Second, tracking slider added for comparison to linear scale\r\nfreq_slider2 = Slider(\r\n    ax=axs[\"slider2\"],\r\n    label='Frequency [Hz]',\r\n    valmin=0.1,\r\n    valmax=100,\r\n    valinit=init_frequency,\r\n)\r\n# The function to be called anytime a slider's value changes\r\ndef update1(val):\r\n    if freq_slider2.val != val:\r\n        freq_slider2.set_val(val)\r\n    line.set_ydata(f(t, 5, val))\r\n    fig.canvas.draw_idle()\r\n\r\ndef update2(val):\r\n    if freq_slider1.val != val:\r\n        freq_slider1.set_val(val)\r\n    line.set_ydata(f(t, 5, val))\r\n    fig.canvas.draw_idle()\r\n\r\n# register the update function with each slider\r\nfreq_slider1.on_changed(update1)\r\nfreq_slider2.on_changed(update2)\r\n\r\nplt.show()\r\n```\r\n\r\nNote that only the `set_xscale(\"log\")` is needed for it to be spaced as log, the rest is to get the ticks to show up (for only the x-axis)\r\n\r\n\r\n![Figure_1](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2501846\/16e89fe0-2a64-448f-84a8-98fd70fcab02)\r\n","This is a duplicate of #18571 (but perhaps a doc entry would be useful).  See also the related #18572 (explained in the discussion of #18571).","Oh, yes that solves most scenarios and coupling it with `matplotlib.scale.FuncScale` probably solves the rest. Though, documentation would be nice."],"labels":["Documentation: examples"]},{"title":"[Doc]: Does Matplotlib 3D support 6 DOF?","body":"### Documentation Link\n\nhttps:\/\/matplotlib.org\/stable\/api\/toolkits\/mplot3d\/view_angles.html\n\n### Problem\n\nI found the linked page to view angles unclear because it's not clear if matplotlib 3D supports 6 DOF. By that I mean the ability to configure (either in the GUI or programmatically) the camera with respect to the origin via the 3 axes, but also rotate about them as well.\r\n\r\nThe docs imply the first 3 DOF in that the camera can be positioned anywhere, provided it aims at the origin. If it had 6 DOF that would mean it can be positioned anywhere, but also aimed anywhere. Is this supported? How would I do this?\n\n### Suggested improvement\n\nA paragraph\/code snippet could be added to clarify how to configure rotating the camera. If this functionality is not supported, then a note at the top of the page would probably make sense, as this is the page that seems the most relevant.","comments":["No, it does not support rotating the camera\r\n\r\nOn Wed, Jul 26, 2023 at 4:35\u202fPM Daniel Soutar ***@***.***>\r\nwrote:\r\n\r\n> Documentation Link\r\n>\r\n> https:\/\/matplotlib.org\/stable\/api\/toolkits\/mplot3d\/view_angles.html\r\n> Problem\r\n>\r\n> I found the linked page to view angles unclear because it's not clear if\r\n> matplotlib 3D supports 6 DOF. By that I mean the ability to configure\r\n> (either in the GUI or programmatically) the camera with respect to the\r\n> origin via the 3 axes, but also rotate about them as well.\r\n>\r\n> The docs imply the first 3 DOF in that the camera can be positioned\r\n> anywhere, provided it aims at the origin. If it had 6 DOF that would mean\r\n> it can be positioned anywhere, but also aimed anywhere. Is this supported?\r\n> How would I do this?\r\n> Suggested improvement\r\n>\r\n> A paragraph\/code snippet could be added to clarify how to configure\r\n> rotating the camera. If this functionality is not supported, then a note at\r\n> the top of the page would probably make sense, as this is the page that\r\n> seems the most relevant.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26394>, or unsubscribe\r\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AACHF6CHX23BDXQBOJVXUZDXSF5QRANCNFSM6AAAAAA2ZDWU4Y>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n","To be precise, the camera is always pointing to the center of the Axes box. With respect to that center, you have the degrees of freedom *azimuth*, *elevation* and *roll* as indicated in https:\/\/matplotlib.org\/stable\/api\/toolkits\/mplot3d\/view_angles.html.","Thanks @timhoffm that makes sense. But ultimately that means the answer is no re 6 DOF. Is that something that is being worked on\/could change? I\u2019d like to contribute to this if possible.\r\n\r\nIn any case I think clarifying that limitation in the docs is worth doing to avoid duplicate questions like mine. I think a note somewhere that explicitly states matplotlib does not currently support rotation along the axes for any arbitrary point would be good.\r\n\r\nAs an aside, you could also mention that rotating\/translating the data would allow users to effectively simulate 6 DOF? But admittedly that is a bit of a hack and close to the edge of what matplotlib 3D is intended for.","I'm pretty sure the other three degrees of freedom can be achieved by changing the x, y and z lims. You can use these to put the centre of the box wherever you want in data space and at whatever level of zoom you want.  In fact there are more than 6 dof because x y and z can be zoomed independently. ","> In fact there are more than 6 dof because x y and z can be zoomed independently.\r\n\r\nI don't think this is a valid\/consistent view on the problem.\r\n\r\nThe 6 DOF is referring to the camera position: assuming you have a fixed scenery, you can place your camera everywhere (x, y, z) and rotate it in any direction (rx, ry, rz).\r\n\r\nOne can rephrase this with a fixed camera and moving the scenery instead. Rotations can translated directly (you can rotate the camera or you can rotate the scenery wrt. to the camera.\r\nBut we do not have equivalent positioning dofs, synchronously zooming x, y, z is - for the displayed data - equivalent to moving the camera along the radius (but the Axes box is fixed - you cannot look from closer of further away on the axes box). \r\n\r\nTherefore I'd claim that we effectively have 3 rotational dofs for the Axes box, and  we have 3 rotational dofs and one distance dof for the data. The two missing positional dofs would effectively allow to not point the camera at the center of the Axes box\/data range).\r\n\r\nAs a practical explanation:\r\n\r\n*The camera always points to the center of the Axes box. With respect to that center, you have all rotational degrees of freedom (azimuth, elevation and roll). For the plotted data, scaling of the Axes limits is equivalent to a zoom, but it keeps the Axes box as is.*\r\n","> But we do not have equivalent positioning dofs, synchronously zooming x, y, z is - for the displayed data - equivalent to moving the camera along the radius\r\n\r\nIn _data space_ we can indeed \"zoom\" and place the camera at arbitrary x, y, z.  If you are talking about the gray axes box, I am not aware of a toggle to move that, but that is just to provide scale.  \r\n\r\nIf the argument is that we don't provide an explicit \"zoom\" or camera location interface in data space, that is true, but one could readily do the math to determine the correct values of xlim, ylim, and zlim to make that happen.  If someone wanted to write a set of methods that did this, that would be fine. \r\n\r\nMy point though is that in terms of degrees of freedom, we indeed have them already user accessible, if in a form that some users may not be familiar with. \r\n\r\n![MovingCamera](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1562854\/35412ad3-cfe9-4812-ab77-f05438687003)\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib import cm\r\nimport numpy as np\r\n\r\nfrom mpl_toolkits.mplot3d.axes3d import get_test_data\r\n\r\n\r\n# set up a figure twice as wide as it is tall\r\nfig = plt.figure(figsize=(8, 8))\r\n\r\n# =============\r\n# First subplot\r\n# =============\r\n# set up the axes for the first plot\r\nax = fig.add_subplot(2, 2, 1, projection='3d')\r\n\r\n# plot a 3D surface like in the example mplot3d\/surface3d_demo\r\nX = np.arange(-5, 5, 0.25)\r\nY = np.arange(-5, 5, 0.25)\r\nX, Y = np.meshgrid(X, Y)\r\nR = np.sqrt(X**2 + Y**2)\r\nZ = np.sin(R)\r\nsurf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm,\r\n                       linewidth=0, antialiased=False)\r\nax.set_zlim(-1.01, 1.01)\r\n\r\nax = fig.add_subplot(2, 2, 2, projection='3d')\r\n\r\n# plot a 3D surface like in the example mplot3d\/surface3d_demo\r\nsurf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm,\r\n                       linewidth=0, antialiased=False)\r\nax.set_zlim(-1.01, 1.01)\r\nax.set_xlim(-6+3, 6+3)\r\n\r\nax.set_title('Pan along x axis')\r\n\r\n\r\nax = fig.add_subplot(2, 2, 3, projection='3d')\r\n\r\n# plot a 3D surface like in the example mplot3d\/surface3d_demo\r\nsurf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm,\r\n                       linewidth=0, antialiased=False)\r\nax.set_zlim(-2.02, 2.02)\r\nax.set_xlim(-12, 12)\r\nax.set_ylim(-12, 12)\r\n\r\nax.set_title('zoom out')\r\n\r\nax = fig.add_subplot(2, 2, 4, projection='3d')\r\n\r\n# plot a 3D surface like in the example mplot3d\/surface3d_demo\r\nsurf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm,\r\n                       linewidth=0, antialiased=False)\r\nax.set_zlim(-0.5, 0.5)\r\nax.set_xlim(-3, 3)\r\nax.set_ylim(-3, 3)\r\n\r\nax.set_title('zoom in')\r\n\r\nplt.show()\r\nfig.savefig('MovingCamera.png', dpi=100)\r\n```","A 6DOF camera is originally what I was shooting for when I implemented the roll angle in support of [this project](https:\/\/www.youtube.com\/watch?v=OIT4kRJhyBY) - the idea was to be able to use an IMU as a virtual camera to fly around in physical space and use that to control your view of the data. I dropped the translation DOF part of that project because I didn't have an easy way to get rid of IMU drift, but the idea is still sound and the Axes3D code is in a much better place to be able to do this now.\r\n\r\nAs @jklymak said, a full 6DOF should be possible now for the _data space_ by changing the data limits (I don't see much value in translating the view of the gray axis panes, as they will just go offscreen most of the time). We don't have a great function to make this easy for the user at the moment, but I do think that this would be a very useful interface to add. For example, this could be accomplished with a method that takes in the camera location and the location the camera is pointing at, and calculates the xlims, ylims, zlims, roll, azim, and elev (and perhaps focal length) required to create that view. If you want to take a stab at writing that @danielsoutar then I think we would welcome the PR! If not then I can also take a shot at it.\r\n\r\nAnd in the meantime, we would also welcome wording that makes the current behavior of the camera clearer! I wrote that \"it always points towards the center of the plot box volume\" rather than \"at the origin\" because the central point there is not always (0, 0, 0) in data coordinates. But this is certainly a non-trivial subject with good opportunity to clarify the docs here.","> \"it always points towards the center of the plot box volume\" \r\n\r\nI think that is maybe more mystifying than helpful.  \"The camera points at what it is looking at\" is a bit tautological ;-)\r\n\r\nMaybe: \r\n\r\n```\r\nThe angular position of the viewport \"camera\" in a 3D plot is defined by three angles: elevation, azimuth, and roll. \r\nThe angle direction is a common convention, and is shared with [PyVista](https:\/\/docs.pyvista.org\/api\/core\/camera.html) \r\nand [MATLAB](https:\/\/www.mathworks.com\/help\/matlab\/ref\/view.html) (though MATLAB lacks a roll angle). Note that a \r\npositive roll angle rotates the viewing plane clockwise, so the 3d axes will appear to rotate counter-clockwise.\r\n\r\nThe camera can further be translated in 3D and made further or closer to the data by changing the axis limits on \r\nthe  x, y, and z axises.  Note that this translation would apply _after_ the angular rotations. \r\n```\r\n\r\nI think the last is correct, but necessary since order of operation matters.  "],"labels":["Documentation","topic: mplot3d"]},{"title":"[Doc]: Sort out doc mechanics\/formatting\/content guides","body":"### Documentation Link\n\n_No response_\n\n### Problem\n\nWe have these two documentation guides where the write docs page is a mix of \"how to build\", and formatting and content guidelines and the \"style guide\" mixes formatting and content:\r\n\r\n* https:\/\/matplotlib.org\/devdocs\/devel\/document.html\r\n* https:\/\/matplotlib.org\/devdocs\/devel\/style_guide.html\r\n\n\n### Suggested improvement\n\nBuild related docs should go on a different page from formatting and content related guides. The content is of a different type and scope and separating it out will down the line help us surface it more cleanly in TOCs, sidebars, and the like and give us more flex if we decide it belongs in workflow rather than guidelines. \r\n\r\nI also think we should separate out formatting from content guidelines. The major reason is that the general formatting guidelines apply to all the docs regardless of what type, while content specific guides are specific to docstrings\/examples\/tutorials\/user guide and seperating this out may make it easier to communicate that. It will also allow us to reduce some of the replication we're currently seeing across the style and writing guides. My bias is to put each set of content guidelines on its own page (so like \"docstring content guidelines\") in a docsdoc\/content folder but that's mostly b\/c of my preference for small scoped docs pages.  \r\n\r\nSomewhat inspired by @esibinga's GSOD work and trying to figure out where to put it. ","comments":[],"labels":["Documentation","Documentation: devdocs"]},{"title":"[DOC]: usage docs content guidelines","body":"Per #26366, I am wary about a lot more work being put into revising the content of the user guide before we settle on what we think that content should read like.  I'm drafting some ideas here because I'd like us to adopt some sorta guidelines and also b\/c I'd like discussion before I or anyone else puts the investment into getting our guide into this kinda form. The approach I describe here is inline with the approach we use in some tutorials, like [colormap tutorial](https:\/\/matplotlib.org\/devdocs\/users\/explain\/colors\/colormap-manipulation.html#sphx-glr-users-explain-colors-colormap-manipulation-py) and [annotation tutorial](https:\/\/matplotlib.org\/devdocs\/users\/explain\/text\/annotations.html). \r\n\r\n\r\nThe reasons why I think we need content guidelines:\r\n* a consistent approach to presenting the material is going to make the document far more cohesive, which makes it easier for a new user to follow the guide and for us to see what's missing. \r\n* much easier to intuit where a document is or should go if we have clear distinctions between \"is it a guide, tutorial, or example?\" -> @esibinga is doing this work for examples\r\n* having guidelines we agree on before new content is written means less content to rewrite into the agreed upon form\r\n* direction and structure if we'd want to hire a tech writer - and also for newer contributors who may feel overwhelmed by the whole thing\r\n* streamlines reviews by having an agreed upon \"this is what this should look like\"\r\n\r\ntldr proposal: https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26389#issuecomment-1878141078\r\n\r\nETA: Pulling in from arguments elsewhere, style is not a matter of taste in this context because the disagreement we're having is on codifying which teaching methodologies to use in our most explanatory\/educational set of docs.  Generally on the code side we ask that contributors follow best practice & that is considered a non-controversial review practice.  In the case of instructional documentation, there is also best practice on how to present new material to a novice audience. This PR is advocating for the adoption of some of these best practices as part of our content guidelines. Most of the  [PLOS 10 quick tips for teaching programming](https:\/\/journals.plos.org\/ploscompbiol\/article?id=10.1371\/journal.pcbi.1006023#pcbi.1006023.ref021) are transferable to teaching how to use a library.\r\n\r\nETA2: The Software Carpentry instructor training on managing [memory and cognitive load](https:\/\/carpentries.github.io\/instructor-training\/05-memory.html) discusses why the approach more or less described here is best practice, and we have very very high overlap w\/ their audience, especially for introductory material. ","comments":["can I do this task","@pukarlamichhane \nThis is a pull request, which means that if you click on review changes you'll see what I've written for this task. You're welcome to add to it though.","Thanks for the review @timhoffm! One of the things I've been considering is pulling all the content guidelines into their own document. Not sure if it makes sense here or in a follow up, but for starters:\r\n* this PR\r\n* @esibinga 's gallery guidelines https:\/\/matplotlib.org\/devdocs\/devel\/tag_guidelines.html#related-content\r\n* your API guidelines: https:\/\/github.com\/matplotlib\/matplotlib\/pull\/27370#issuecomment-1846823844\r\n\r\nAnd also I know we've gotta have a discussion on all this b\/c I don't think there's consensus on whether we should even have guidelines.  I honestly feel like organizing the docs is a complete waste of time without content guidelines because guidelines are how we enforce organization, but also that it's even worse if we have content guidelines that we don't enforce. ","> However, I disagree that beginners should be able to random access the user guide and necessarily understand any given subsection without having understood some basic concepts first. Similarly, within a section, it should definitely begin straight forwardly and with strong motivation, but in further subsections we should be able to assume the reader has read the introductory material. If every section is written assuming nothing else has been read, then the user guide will be infinitely long and unbearable to read for people who have actually read some of the intro material.\n\nWhat have I written here that implies that this is what I'm advocating for? ","> What have I written here that implies that this is what I'm advocating for?\r\n\r\nThese two phrases in particular could have more nuance:\r\n\r\n> The material is introduced in small, usually one change or task at a time, chunks to keep focus on the specific line of code enabling the given task. \r\n\r\n>... content should be written with the assumption that the reader does not yet know what Matplotlib calls a given visualization task nor how any task is accomplished in Matplotlib.\r\n\r\nWhat knowledge we assume, or what we need to chunk varies by where we are in the docs.  ","> What knowledge we assume, or what we need to chunk varies by where we are in the docs.\r\n\r\nCan you elaborate on this? ","> Can you elaborate on this?\r\n\r\nA lot of chunking or explanation for the initial parts of topics makes some sense.  However as we get deeper into a topic, the need for explanation and chunking should drop away as we assume more knowledge.  As a trivial example, we shouldn't have to explain what `fig, axs = plt.subplots()` means or does for every page, etc as we get deeper into the User Guide\r\n","> However as we get deeper into a topic, the need for explanation and chunking should drop away as we assume more knowledge.\n\nYeah, I went back in and added a bit about scaffolding, b\/c that's what scaffolding is.\n\n> As a trivial example, we shouldn't have to explain what fig, axs = plt.subplots() means or does for every page, etc as we get deeper into the User Guide\n\nYeah, agree...what gave you the impression I was proposing this? ","I think this page may be a good summation of what I'm trying to get at https:\/\/cambridge-community.org.uk\/professional-development\/gswkey\/index.html where in Matplotlib the key concept is the `Artist` like how in Numpy it's the array or in Pandas it's the dataframe or in SKlearn it's the Model object ","Reworked and pulled out into standalone page. Also following changes:\r\n* @efiring suggested I write a short sentence or two about the purpose of each section, so that's now at the top anchoring this doc. (Sidenote-found this suggestion really helpful in that I think all the docs together helps contextualize the individual page guidelines)\r\n* Pulled in @timhoffm's API guidelines\r\n* @esibinga's Example guidelines from the tagging guidelines \r\n* plot type guidelines from the plot type gallery, \r\n* added a new section for tutorials b\/c one of my takeaways from all the discussions is it's really hard to define user guide independent of tutorials. \r\n* updated the content guidelines to include differentiation","> There is no reference to https:\/\/diataxis.fr\/\r\n\r\nWhere would it  be appropriate to include in this PR? \r\n\r\n\r\nThe summary is diataxes:\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/873eb646-64c4-4286-9f8f-02973b199fc3)\r\n\r\n* User guide -> explain\r\n* Tutorials >- lesson\r\n* Gallery -> demonstrate\r\n* API -> describe\r\n\r\nAnd semi accidentally but also by nature of diataxes, the different plans\/samples for each section are kinda written as the type of writing they promote - so the user guide section is a bit of a treatise on writing a guide document, the tutorial section is more a meta here is an lesson on writing a tutorial, the examples section is just the formatting rules, and the API reference describes the content of an API reference. ","I think some of the concern @jklymak is raising is sort of this cycle from diataxes:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/59413456-3222-4e86-b2c9-ede7be89f36f)\r\n\r\nwhich was basically, before I saw it, the motivation for https:\/\/github.com\/matplotlib\/mpl-sphinx-theme\/pull\/72\r\n\r\nSo I think a meta point of disagreement is whether the user guide is primarily learning or understanding oriented. I don't particularly care which one we decide on, but the choice affects the framing\/priority\/organization of the documents in that section. And if we decide that it is learning oriented, then we need to figure out where explanation oriented docs go. ","I have several serious concerns\r\n\r\nThis makes no reference to https:\/\/diataxis.fr .  It is a well thought out, documented, and widely used system for organizing the docs.  I thought we had previously agreed we were going to start using.  We do not have the time or expertise to develop a new documentation system from scratch.  I think highlighting which of existing docs are clean example of their categories, but diataxis's categories should be the guiding principle of how the docs on our docs are written are framed.\r\n\r\nI disagree about the level of the target audience of our docs.  Using software carpentry as benchmark, the floor of our target audience should be people who have completed Software Carpentry (not people who should take or are taking carpentry classes).\r\n\r\nI am worried about framing our docs too closely through guidelines for developing lessons and in-person teaching of people who do not know how to program.  I think both the level is wrong (same as the previous concern) and documentation is consumed very differently with different goals.\r\n\r\nI think the user guide should be roughly two parts.  The first which is a linear section that after you read you should understand all the parts of the `Figure` and how they interact with each other.  The second part which is deep dives explaining the more complicated APIs.  Both are \"understand\" but the first is at a system scale and second at a component granular scale.\r\n\r\n@jklymak has been doing an extremely good job of organizing and filling in the first and most of what was in the user guide prior to Jody's work was the second.  I expect these docs to be validating and embracing that work rather than trying to do something different.","> This makes no reference to https:\/\/diataxis.fr\/ . It is a well thought out, documented, and widely used system for organizing the docs.\r\n\r\nIs this the case?   Sorry to question a previous decision, but I am somewhat skeptical that the diataxis framework actually leads to useful organization of docs, at least for a library like Matplotlib.  Does anyone have a good example of it being implemented?  \r\n\r\n> .... these docs to be validating and embracing that work\r\n\r\nI'd also prefer we not re-define what should go in each section absent of the substantial work that has already been done.  However, I also agree that it is reasonable to write down what the plan is.  ","> I'd also prefer we not re-define what should go in each section absent of the substantial work that has already been done. However, I also agree that it is reasonable to write down what the plan is.\r\n\r\nIgnoring the existing user guide\/tutorial work was never my intent and I am sorry that it came across that way. My goal in writing out samples was to give a simple example for new contributors, as we do with other parts of the contributing docs documentation. \r\n\r\nI think a lot of the content is already more or less written in either the diataxes tutorial or explanation style and my intent was that if we can agree on a plan, then we can apply the guidelines to new doc PRs.  One of my major goals in this document, particularly for the user guide, is to try and build shared agreement on scope and framing within each document for those second and third order groupings -> we agree this doc belongs in X, ok in which section in X? How does this flow with the other documents in that section? If we can agree on something broadly, my plan for existing docs would be much more akin to #26196 where the existing content is moved around and maybe reframed so that sections\/subsections have a shared scope\/purpose\/thru-line. \r\n\r\n> Does anyone have a good example of it being implemented?\r\n\r\nhttps:\/\/docs.djangoproject.com\/en\/5.0\/#how-the-documentation-is-organized\r\n\r\n> but I am somewhat skeptical that the diataxis framework actually leads to useful organization of docs, at least for a library like Matplotlib.\r\n\r\nSo I wrote this against diataxis (and as a consequence of today's call will make that more explicit), but I also share some of your concern. I think this chart on blur may be where some of our sticking points are in that I think we both see the goal of the user guide to be the acquisition of skill in using Matplotlib, but differ in the approach:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/cce1e651-25b6-4cae-ab67-df86b69ce258)\r\n\r\nI expect we'll discuss this on another call again, but discussed this today and I think a rough consensus that for the user guide in particular, it may be more appropriate  to have a second order hierarchy differentiated on level of explanation. We haven't agreed on definitions of those levels, but roughly this is what I think would clean up what I feel is the mix of diataxes  styles:\r\n\r\n* make -> tutorial: this is the more akin to tutorial approach I think  you're mostly already using in the quick start guide -> goal being \"what does the reader need to know to make some plots?\"\r\n* customize -> tutorial\/explanation: this is the tutorial\/explanation approach I think you're mostly already using in the docs that flesh out the quick start, with some caveats that I think some of those docs could maybe be reframed\/restructured a drop to lead w\/ explanation-> the goal being \"what does the reader need to know to customize their plots?\"\r\n* extend -> explanation: these are the deep dives into things like backends that are for the most part already written-> the goal being \"what does the reader need to know to write custom artists\/plots\/backends\/etc\"\n\n\r\n","I have a pretty different take on the slicing of things.  As noted a few times before, our previous organization was largely based around the fact folks wanted to write documentation using sphinx gallery.  Quite appropriately in my opinion, as it is easier to develop the visualizations that go along with the narrative if you can see them in quasi real time, rather than wait for a (partial) docs build.  Hence long-form write-ups ended up in \"tutorials\".  In my opinion, 90% of that material belonged in the \"users guide\". \r\n\r\nSecond, I think we should be very clear that some of our main sections can and should have substantial overlap.  \r\n\r\nThird, any organization needs to be flexible,  and we shouldn't get too hung up on _exactly_ where something goes.  I teach Physics, but choose your favourite subject, and pull two first year texts off the shelf, and the odds of them being in _exactly_ the same order, or having the same org tree is extremely small.  Particularly for online docs, I think being super fussy about the table of contents is counter productive.  \r\n\r\nSo given that, I'd divide things as \r\n\r\n\"Users Guide\" Narrative explanation for how to use Matplotlib, moving from general intorduction to specific subtopics and explanations, _heavily_ using examples.\r\n\r\n\"Examples\" Short self contained documents that have one main subject.  If someone comes up with a new one, we should ask if it fits in the existing \"Users Guide\" or not, and maybe expand the scope to adding there is appropriate (or suggest a follow-up issue).  \r\n\r\n\"Tutorials\": I think these should be cross-cutting such that they don't fit into the User Guide narrative, and they are too involved or too many topics for an Example.  I also think we should have very few of these.  \r\n\r\nSo let's take the recent discussion about histogram normalization (#27426).  I feel it would be a mistake to put this info in the \"Tutorial\" section.  Let's say a user found this tutorial, and then was trying to find it again a month later without remembering our TOC.  If we start putting specific subject docs like this under Tutorials, folks have three places to look: \"Users Guide - hmm there is no discussion of _any_ plot methods - strange users guide\", \"Examples - ahhh, there are a bunch of histogram examples; its got to be one of these\", \"Tutorials - thats a weird place for this specific topic\". Medium-term, I think it would be great if material from a few of the `hist` examples was combined to make a User Guide doc about how to use the `hist` method.  I don't feel that means we would have to get rid of the existing examples - we should just liberally cross-link.  \r\n\r\nI think the above is really simple - everything basically belongs in the User Guide (eventually), supplemented by an extensive gallery with back links to the user guide, and with a few cool tutorials that combine a bunch of topics that would be too confusing in the middle of the User Guide.\r\n  \r\n\r\n","> \"Users Guide\" Narrative explanation for how to use Matplotlib, moving from general intorduction to specific subtopics and explanations, heavily using examples.\r\n   \"Examples\" Short self contained documents that have one main subject. If someone comes up with a new one, we should ask if it fits in the existing \"Users Guide\" or not, and maybe expand the scope to adding there is appropriate (or suggest a follow-up issue).\r\n   \"Tutorials\": I think these should be cross-cutting such that they don't fit into the User Guide narrative, and they are too involved or too many topics for an Example. I also think we should have very few of these.\r\n\r\nWhat's the taxonomy here? I'm reading this and seeing the same spectrum we already have where:\r\n\r\n1) it's not clear why a document is placed where it is -> not for the reader nor for a ~new~ contributor\r\n2) there is a lack of clear concrete guidance on what sort of subjects are appropriate and which aren't\r\n3) docs within a page or section do not have a clear or readily apparent cohesive thread. \r\n4) These are all the same document - for all intents and purposes the only difference is in length-which means that they inherently aren't tuned to serve different needs. \r\n\r\nFrankly, how does your proposal translate into a plan for improving organization, cohesiveness, and discoverability?\r\n\r\n> Second, I think we should be very clear that some of our main sections can and should have substantial overlap.\r\n\r\nWhich same discoverability problem - too much overlap makes it hard to know which documents they should look at. This is the exact same concern as for #26095\r\n\r\n>  I teach Physics, but choose your favourite subject, and pull two first year texts off the shelf, and the odds of them being in exactly the same order, or having the same org tree is extremely small. \r\n\r\nI teach pointers when I teach variables, moving it up like 10 chapters, b\/c that's where it needs to be for how I teach functions.  Which you have said that the expectation is that the user guide be read in order -> so what's the scheme for dictating that order?\r\n\r\nThe make\/customize\/extend division is primarily so readers know a) what they should get out of reading this section, b) why they should read this section. It also lets us very clearly and explicitly level set, b\/c another complaint both you and Tom have repeatedly asserted is the repetition of elementary material. Being very explicit about hierarchy means that it's clear that nobody should expect intro level material in a section of tutorials aimed at learning how to extend the library. \r\n\r\n>  I feel it would be a mistake to put this info in the \"Tutorial\" section. \r\n\r\nYeah, I agree at this point but that's mostly because I want to rework it into a general explanation of the functionality provided by `hist` . Which at this point, my primary concern w\/ that document is that the framing is \"why should someone do histogram normalization?\" and I think for the Matplotlib docs the framing should always prioritize the functionality or visualization technique and not the math or science. Which in your proposal, what is the guidance on framing? \r\n\r\nTo pull this back to the contributing guide, we had all these discussions about gitwash and ultimately removed it b\/c owning a full git tutorial is out of scope for our docs even though we use git. Currently https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html is scoped more or less to git topics that are specific to the workflow we ask of contributers -> e.g. we discuss rebasing b\/c we often ask users for it. Whether that's an appropriate scope is debatable, but it's one I can clearly articulate and it makes that document a lot easier to read. \r\n\r\nWhich going back to your physics text book example, yes each book may arrange it's chapters slightly differently, but I can't imagine that a single textbook puts a discussion of thermodynamics in the middle of its introduction to speed and velocity. Or that the book loses identity midway - for example Schey's Div Grad Curl and Stewart's multivariable calculus and The Schuam's guide to multivariate calculus all cover the same material -> but they do so in such radically different ways that mixing a chapter of one into the others will probably be majorly disorienting. \r\n\r\nI understand that there's always going to be some inconsistencies because large open source project w\/ lots of authors, but fundamentally I don't see this as radically different from imposing coding guidelines to improve consistency. ","tldr: \r\n\r\nThis is diataxes https:\/\/diataxis.fr\/map\/\r\n\r\n> Moving around the map\r\n> * learning-oriented phase: We begin by learning, and learning a skill means diving straight in to do it - under the guidance of a teacher, if we\u2019re lucky.\r\n> * goal-oriented phase: Next we want to put the skill to work.\r\n> \r\n> * information-oriented phase: As soon as our work calls upon knowledge that we don\u2019t already have in our head, it requires us to consult technical reference.\r\n> \r\n>  * explanation-oriented phase: Finally, away from the work, we reflect on our practice and knowledge to understand the whole.\r\n> \r\n\r\nThis is my organize+scope proposal that gets diataxes as a consequence:\r\n\r\n| section | diataxes stage |focus | goal | approach | examples |\r\n|----------|------------------|-------|-------|------------ |-------------|\r\n| tutorials |  learning | complex visualizations | which buttons need to be pushed and in what order? | [navigate](https:\/\/diataxis.fr\/tutorials\/#show-the-learner-where-they-ll-be-going) the process of pushing the buttons | make a linked views dashboard |\r\n| examples| goal |individual visualization tasks | which button does this? | [instruct](https:\/\/diataxis.fr\/how-to-guides\/#provide-a-set-of-instructions) how to push the button | change line color |\r\n| reference | information| API | what can this button do? | [describe](https:\/\/diataxis.fr\/reference\/#describe-and-only-describe) input\/output\/behavior of button | color: colorLike |\r\n| user guide| learning\/explanation | functionality | what are the buttons and why push them? | [talk about](https:\/\/diataxis.fr\/explanation\/#talk-about-the-subject) the buttons | what is color in Matplotlib? | \r\n\r\nwith the following subdivision for the user guide that roughly encapsulates the content that is already there:\r\n\r\n| section | diataxes stage |focus | goal | approach | examples |\r\n|----------|------------------|-------|-------|------------ |-------------|\r\n| make   |   learning  | high level API (plt.figure + ax methods)  |  which buttons do I push to make the basic things? | tutorials on common general tasks | How do I make a line plot? |\r\n| customize |  explain |   objects\/modules ETA+ plotting methods+figure creation methods | which buttons are available to make more custom things ? | [talk about](https:\/\/diataxis.fr\/explanation\/#talk-about-the-subject) and [provide context](https:\/\/diataxis.fr\/explanation\/#provide-context)  for button | What can I do to a figure? | \r\n| extend | explain | architecture | how do I make new buttons? | [explain why](https:\/\/diataxis.fr\/explanation\/#explanation-and-understanding) design of buttons, provide context for multiple buttons | what do I need to know to subclass a figure object? |","Repeating my objection: I strongly object to relegating the users guide to simply \"learning\/explanation\" and think it needs to show you how to \"push the buttons\".  Ideally the users guide would be readable without reference to the examples or tutorials.  Having read it, the reader will come away understanding how to use Matplotlib and have some idea of the concepts that underpin how Matplotlib works.  ","> Repeating my objection: I strongly object to relegating the users guide to simply \"learning\/explanation\" and think it needs to show you how to \"push the buttons\".  \n\nIt's a matter of focus - short illustrative examples that explains usage are part of explaining the button, while long combine all the things examples that pull focus away not so much. \n\nLike my line example still demonstrates how to use a line object, and I'd probably include constructing an object if I expanded on it. It just doesn't show much else b\/c the focus of that example is the Line2D object.\n\nETA: Also I'm not married to Line2D - if this convo is easier if I do Formatters or something then I'll do that.\n\n> Having read it, the reader will come away understanding how to use Matplotlib and have some idea of the concepts that underpin how Matplotlib works.  \n\nThis is sorta why my revised proposal is that the getting started guide does this & is in tutorial form. It's the learning launchpad to either go into the examples or explanations -> which is why I end the sample tutorial w\/ that breadcrumb. It gets you just enough of the way to make plots and look in the galleries for things, but if you want to go deeper you circle back to the next level in the user guide. \n\nETA: also added plotting methods back into the user guide table (forgot we discussed that) and that can also fall under explain - again, it's is the focus on the one thing (the functionality provided by that function) or how to mix the functionality to make the thing (complex visualization).","Also that table assumes\/can sort current content as written give or take a couple of small reframes\/restructures\/moves on the scale of the contributing rework. It very much doesn't require major rewrites of any sort.\n\nLike if we went w\/ it or something close too, the plan would look something like:\n\n1. Remove non-tutorial docs from tutorials \n2. User guide:\n  1. Pull out \"extend\" docs into their own section \n  2. merge in the starting_guide gallery docs + smooth out collection of docs \n  3. Smooth out \"customize\" docs, which will mostly keep current groupings by concept\/object\/functionality \n3. go back into gallery and start identifying docs that belong in user guide and tutorials\n   1. Clean up\/move guide docs\n   2. Clean up\/move tutorial docs\n\nWhere again clean up is the sort of small tweaks we make to docs all the time, just in a more systemic fashion. Given these docs were written\/contributed at different times, I also think it's just housekeeping on the order of refreshing slides every semester.\n\nI was planning to touch the tutorial and user guide index pages anyway once my mini-galleries PR goes in https:\/\/github.com\/sphinx-gallery\/sphinx-gallery\/pull\/1226 \n","> This is sorta why my revised proposal is that the getting started guide does this & is in tutorial form. \r\n\r\nI feel the Getting Started Guide should be considerably shortened, rather than expanded.  When originally composed it was the only user guide that the User Guide section had, and picked up numerous digressions.  Much of the digressive material is now elsewhere in the User Guide.  Expanding the Getting Started would be going in the wrong direction. \r\n\r\n","> I feel the Getting Started Guide should be considerably shortened, rather than expanded. When originally composed it was the only user guide that the User Guide section had, and picked up numerous digressions. Much of the digressive material is now elsewhere in the User Guide. Expanding the Getting Started would be going in the wrong direction.\r\n\r\nYay! What I meant by \"getting started guide does this\" is that it's already written more in tutorial style than explanation style. I'm relieved that you're ok w\/ condensing it b\/c I totally agree and given the go ahead would definitely cut things as part of smoothing it out rather than trying extra hard to keep stuff in there.","> Having read it, the reader will come away understanding how to use Matplotlib and have some idea of the concepts that underpin how Matplotlib works.\r\n\r\nLet me rephrase my question given we agree on shortened getting started guide: what's missing from the rubric + tutorial getting started + explanation of concepts in terms of getting to this? Here's a numpy example of explaining indexing that I think our counterpart would be something like the arranging axes: https:\/\/numpy.org\/doc\/stable\/user\/basics.indexing.html","\r\n> What's the taxonomy here? I'm reading this and seeing the same spectrum we already have where:\r\n> \r\n> 1. it's not clear why a document is placed where it is -> not for the reader nor for a ~new~ contributor\r\n\r\nThe \"taxonomy\" is trivial: \r\n\r\nIf something is part of a self-contained subject:\r\n  - it would _ideally_ be in the User Guide.\r\n      - an accompanying example could _also_ be in the Examples.   \r\n  - if there is no obvious TOC location for it in the User Guide, it could be parked in the appropriate section of Examples, and an issue raised that there is no proper location in the User Guide\r\n\r\nIf something is a long cross-cutting document (eg how to set up a dashboard) it would go in Tutorials.  \r\n\r\n> 2. there is a lack of clear concrete guidance on what sort of subjects are appropriate and which aren't\r\n\r\nDoes the doc help someone make scientific visualizations in Matplotlib in general?  Then it belongs in the User Guide.  If it is some specialist visualization technique that doesn't particularly teach something that isn't already in the User Guide, then it should be an Example.  \r\n\r\n> 3. docs within a page or section do not have a clear or readily apparent cohesive thread.\r\n\r\nI'm not sure where you inferred this - The User Guide should be coherent.  \r\n\r\n> 4. These are all the same document - for all intents and purposes the only difference is in length-which means that they inherently aren't tuned to serve different needs.\r\n\r\nI don't think it particularly has to do with length.  Individual subsections of the User Guide need not be a particular length. Similarly I think it's fine if some Examples are long.  However, Examples should be on one topic, or they stretch out into being Tutorials.  \r\n\r\n","> what's missing from the rubric + tutorial getting started + explanation of concepts in terms of getting to this?\r\n\r\nAs before, your rubric says that \"How to push the button\" is under Examples, and not in the User Guide.  I strongly (extremely strongly) object to that.  \"How to push the button\" is the main point of the User Guide, explanation of concepts happens along the way by way of comprehensive buttton-pushing examples.  ","> explanation of concepts happens along the way by way of comprehensive buttton-pushing examples.\r\n\r\nGonna go back to the numpy doc cause I think we have the exact same audience: \r\n https:\/\/numpy.org\/doc\/stable\/user\/basics.indexing.html\r\n\r\nIt's fully structured explanation + short example, explanation + short example showing how to do the one thing (push the button).\r\n\r\nIt's a set of comprehensive examples of button pushing, w\/ an explanation beforehand of why it's showing that example. Frankly it isn't written terribly differently from what you've already written\/how you've written these docs.\r\n\r\nETA:\r\nHere, a doc you wrote that's basically written in explain format: \r\nhttps:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/colorbar_placement.html\r\n\r\nhere's what diataxes says about explain: https:\/\/diataxis.fr\/explanation\/\r\n\r\n> Explanation guides are about a topic in the sense that they are around it. Even the names of your explanation guides should reflect this; you should be able to place an implicit (or even explicit) about in front of each title. For example: About user authentication, or About database connection policies.\r\n","```txt\r\nIf something is part of a self-contained subject:\r\n        it would ideally be in the User Guide\r\n           an accompanying example could also be in the Examples.\r\n        elif there is no obvious TOC location for it in the User Guide, \r\n            it could be parked in the appropriate section of Examples, \r\n            issue raised that there is no proper location in the User Guide\r\nIf something is a long cross-cutting document (eg how to set up a dashboard) \r\n           it would go in Tutorials.\r\n```\r\n\r\nIf the same document can be placed in user guide and examples or examples and tutorials, then that means those sections of the docs aren't serving distinct purposes. Fundamentally doc architecture works the same as API architecture -> clear well defined roles\/scope\/purpose - if they're not serving distinct purposes then it's unclear why they exist.\r\n\r\nI think the rubric gets to roughly the same divisions with less ambiguity:\r\n   * `self-contained subject` is comprehensive explanation of specific library functionality\r\n      * setting up a dashboard is a self contained subject, but cross multiple functionalities \r\n      * a parallel coordinates plot (which we should definitely add as a tutorial) is super self contained one plot type and subject wise is no different than histogram -> except we don't ship a PCP and so it's definitely not functionality we provide. \r\n   * `cross-cutting` is defined as creating a comprehensive visualization\r\n      * setting up color crosses Color\/Norm\/colorbar\/legend but is fundamentally about color \r\n      * this has a ton of different plots but is focused primarily on explaining the units interface https:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/axes_units.html\r\n\r\nETA: the reason for removing ambiguity ties back to this:\r\n\r\n> I'm not sure where you inferred this - The User Guide should be coherent.\r\n\r\nCoherency means that there's a connecting style and thread between the documents in one section of the docs. The user guide section on figures doesn't suddenly diverge into being about pie charts, the section on axes doesn't have an api reference doc stuck in the middle. For example this doc technically meets the user guide criteria about being about one thing, but it doesn't explain anything https:\/\/matplotlib.org\/stable\/users\/explain\/toolkits\/mplot3d.html \r\nSo the reason for \"focus, goal, approach\" is to do internal organization on our https:\/\/diataxis.fr\/complex-hierarchies\/\r\n\r\n\r\nAnd also the rubric advocates for different writing styles b\/c here's the diataxis on this:\r\n\r\n> A clear advantage of organising material this way is that it provides both clear expectations (to the reader) and guidance (to the author). It\u2019s clear what the purpose of any particular piece of content is, it specifies how it should be written and it shows where it should be placed.\r\n> When these distinctions are allowed to blur, the different kinds of documentation bleed into each other. Writing style and content make their way into inappropriate places. It also causes structural problems, which make it even more difficult to maintain the discipline of appropriate writing.\r\n> Sometimes the user is at study, and sometimes the user is at work. Documentation has to serve both those needs. A tutorial serves the needs of the user who is at study. Its obligation is to provide a successful learning experience. A how-to guide serves the needs of the user who is at work. Its obligation is to help the user accomplish a task.\r\n> Reference is what a user needs in order help apply knowledge and skill, while they are working.\r\n> Explanation is what someone will turn to to help them acquire knowledge and skill - \u201cstudy\u201d.\r\n\r\nOne of the major reasons for using different writing styles is to prevent:\r\n\r\n>  When originally composed it was the only user guide that the User Guide section had, and picked up numerous digressions. Much of the digressive material is now elsewhere in the User Guide. \r\n\r\nIf each section has a well defined focus\/purpose\/goal\/direction, it's much easier to assess \"hey, is this a digression?\" ","Just to maybe make things more concrete, here's a breakdown of how the diataxis framework was a consequence of the https:\/\/matplotlib.org\/devdocs\/devel\/index.html reorg. My goal in making up this doc is to hopefully show:\r\n1) implementing a structure that yields this framework does not require large changes to content - I basically ended up writing maybe two new paragraphs that we'd wanted written anyway (the intros to coding\/docs)\r\n2) to show concretely how it allows more experienced users and contributors to go straight to the information they need\r\n3) and to show that the framework isn't overly didactic. The primary organizing principal is the purpose of the document, and the style in which it is written is the natural consequence of identifying purpose. \r\n<img width=\"971\" alt=\"diataxis applied to contributing docs\" src=\"https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/781bea91-91cc-4276-9599-9d6fa3f8891c\">\r\n\r\nETA: for anyone using a screen reader, the gist of the image above is that the sections of the contributing guide map to diataxis as follows:\r\n\r\n|diataxis| contributing guide | \r\n|---------| ----------------------|\r\n|tutorial |new contributors left column of questions about contributing |\r\n|explanation | new contributors right column of ways to contribute |\r\n| how-to-guide | development environment and workflow |\r\n|reference | policies and guidelines, w\/ the caveat that build doc docs should be moved under development |","> If the same document can be placed in user guide and examples or examples and tutorials, then that means those sections of the docs aren't serving distinct purposes. Fundamentally doc architecture works the same as API architecture -> clear well defined roles\/scope\/purpose - if they're not serving distinct purposes then it's unclear why they exist.\r\n\r\nI think we are conflating \"distinct purposes\" and \"distinct documents\".   The \"User Guide\" needs examples, and the idea that those examples should not overlap with the \"Examples\" section is not viable, in my opinion. \r\n\r\nThe difference between User Guide and Examples is not in content, but in how they are presented, accessed, and somewhat in how they are organized.  I'd think of it as akin to a text book, versus a study guide.  They probably overlap in a lot of their examples, but the text book has more verbiage, and the study guide has more worked examples.    The study guide can also me accessed somewhat randomly as the user needs to figure a particular subject out.  \r\n\r\nMy comment about the same document going in the Users Guide or Examples was not meant to mean that _exactly_ the same document would go in both, verbatim.  Just that the contributor should be asked to consider putting it in the User Guide with an appropriate level of explanatory verbiage, if there is an appropriate place in the table of contents.  The more stripped down version may still be appropriate for the \"Examples\". If there is no place in the Users Guide table of contents, it can probably just go in Examples, but we should consider if the TOC needs fleshing out. ","> The difference between User Guide and Examples is not in content, but in how they are presented, accessed, and somewhat in how they are organized. \r\n\r\n I agree w\/ you in theory but I think our sticking point is practice. Every single cell of https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26389#issuecomment-1878141078 is about button pushing because yes fundementally the library docs are about the Matplotlib API. \r\n\r\n> They probably overlap in a lot of their examples, but the text book has more verbiage, and the study guide has more worked examples. The study guide can also me accessed somewhat randomly as the user needs to figure a particular subject out.\r\n\r\nSo in the diataxes frame, this is the difference between the user guide and tutorials, as those are both the learning\/pedagogy sections. The explain section is written more like textbook format, and the tutorial like a study guide. And now I'm thinking about disciplinary differences cause a CS textbook's sections would be topics akin to my proposal of functionality: variables, assignment, selection, repetition, etc -> the textbook introduces the concept and motivation for the concept, and then has a short worked example or two, then builds up to the next small worked example -> but big putting everything together happens in a case study at the end of the chapter or section that's much more akin to the tutorials. \r\n\r\nWhich yes I agree with you that the tutorials and examples should for the most part be random access -> even in the tagging guidelines leveling is by [how much matplotlib the example uses](https:\/\/matplotlib.org\/devdocs\/devel\/tag_glossary.html#structural-tags-what-format-is-the-example-what-context-can-we-provide)\r\n\r\n> My comment about the same document going in the Users Guide or Examples was not meant to mean that exactly the same document would go in both, verbatim. Just that the contributor should be asked to consider putting it in the User Guide with an appropriate level of explanatory verbiage, if there is an appropriate place in the table of contents. The more stripped down version may still be appropriate for the \"Examples\"\r\n\r\nThe role of examples in a diataxes framework is closer to the API docs -> they're informational rather than education. They're supposed to be aimed at folks like our maintainers  who just want to look up how to do the thing & don't want or need the explanation. So the question about the same thing in both is a) is this example the best way to get the concept\/behavior across vs. b) is this example a thing folks would want to look up.  And yes, sometimes the same example is great for both, but also we start with toy examples so that the equation or concept doesn't get lost.\r\n\r\nA semi-frequent complaint we get about the examples is that they're doing too much -> folks are expecting something like an API entry and not a tutorial - and one of the nice things about diataxes (or really any good taxonomy) is not just separating the purpose of text but also the purpose of the code: is the primary purpose to make a good explanatory or reference image, something they can learn from, or something they can C & P b\/c they know\/trust that it's good. \r\nETA: Major motivation for tightly scoped informational examples (why we want examples=how-to rather than how-to\/tutorial blur) is to make it easy to string multiple examples together ( \"build your own how-to\") to create the things that we don't have an example for.\r\n\r\nSo here's how annotation is presented in the 4 modalities, and what I think is worth highlighting here is how yes these do have some repeated information but they also all play off each other too b\/c the other docs exist. \r\n\r\n* Tutorials: really cute story of making donut plots, holds the readers hand through using annotations to highlight plot sections, annotation within context of larger task of building viz\r\nhttps:\/\/matplotlib.org\/devdocs\/gallery\/pie_and_polar_charts\/pie_and_donut_labels.html\r\nAlso yes cheated and grabbed something from examples b\/c one of the consequences of the current doc placement scheme is tutorials in the wrong places\r\n\r\n* Examples: concatenating text -> one small task that is part of building a larger visualization, text is all informational\r\nhttps:\/\/matplotlib.org\/devdocs\/gallery\/text_labels_and_annotations\/rainbow_text.html#sphx-glr-gallery-text-labels-and-annotations-rainbow-text-py\r\n\r\n* Reference: https:\/\/matplotlib.org\/devdocs\/api\/_as_gen\/matplotlib.axes.Axes.annotate.html#matplotlib.axes.Axes.annotate\r\n\r\n* Explanation: all about annotation in Matplotlib, with lots of very small very toy coding examples to keep focus on annotation -> in some ways this is just fleshed out API docs\r\nhttps:\/\/matplotlib.org\/devdocs\/users\/explain\/text\/annotations.html\r\n\r\nAnd yes I have previously advocated to throw all of these \"walk through a function\" docs into tutorials but (give or take some small reframing), they are primarily written with the intent that the explain the functionality, with the \"teaching to use\" being secondary. \r\n\r\n","> And now I'm thinking about disciplinary differences cause a CS textbook's sections would be topics akin to my proposal of functionality: variables, assignment, selection, repetition, etc -> the textbook introduces the concept and motivation for the concept, and then has a short worked example or two, then builds up to the next small worked example -> but big putting everything together happens in a case study at the end of the chapter or section that's much more akin to the tutorials.\r\n\r\nThat sounds great.  My  point is that they are all in the same chapter, and the user doesn't have to flip between whole different sections to find the concepts in use.  By analogy, I don't think the tutorial that \"puts everything together\" should be in a separate \"Tutorial\" section of the docs, any more than I think examples should be solely relegated to an \"Examples\" section.  \r\n\r\n> Explanation: all about annotation in Matplotlib, with lots of very small very toy coding examples to keep focus on annotation -> in some ways this is just fleshed out API docs\r\nhttps:\/\/matplotlib.org\/devdocs\/users\/explain\/text\/annotations.html\r\n\r\nThis is far better than \"talk about the buttons\", with `Line2D` as an example.  \r\n\r\n> Tutorials: really cute story of making donut plots, holds the readers hand through using annotations to highlight plot sections, annotation within context of larger task of building viz\r\nhttps:\/\/matplotlib.org\/devdocs\/gallery\/pie_and_polar_charts\/pie_and_donut_labels.html\r\nAlso yes cheated and grabbed something from examples b\/c one of the consequences of the current doc placement scheme is tutorials in the wrong places\r\n\r\nI would still object to this - we don't need to squeeze the org into the diataxis framework. I'm sorry, but as a non-django user, the Django docs are pretty bad.  Apologies to the hard working folks who put in volunteer time to write them, but you'd have to come up with a far better example to convince me that diataxis is worth bending over backwards to fill out full sections for.  `pie_and_donut_labels` should stay in examples.  Why would we move it to Tutorials?  It's a single self contained example.  As stated before, I think we should have vanishingly few links in tutorials, and they should tackle pretty big cross cutting things.  Making donut graphs is not a big cross-cutting thing in my opinion, and I don't see how it would help discoverability or readability to have it off in Tutorials by itself where no one will ever find it, instead of in the \"Pie and polar charts\" section of the examples where it is easy to find.  \r\n","> . My point is that they are all in the same chapter, and the user doesn't have to flip between whole different sections to find the concepts in use. By analogy, I don't think the tutorial that \"puts everything together\" should be in a separate \"Tutorial\" section of the docs, any more than I think examples should be solely relegated to an \"Examples\" section.\r\n\r\nBut the lovely thing about online docs is that we can use links (and single line tags and minigallery and intersphinx). So we can handle the \"hey here's more information\" so there's no more flipping then the switching between webpages they'd have to do anyway. Which the point of putting all the tutorials together is for the users who start at tutorials -> they wanna start at \"big build thing\" and will end up at explanation when they feel they need the why. These folks aren't gonna hang around the user guide looking for the tutorials and will get lost in the examples. \r\n\r\nAs for the examples, again I'm gonna keep repeating that it's about scope and purpose. Some short examples are a given as part of explanation -> the issue is when the examples clobber the explanation. \r\n\r\n> this is far better than \"talk about the buttons\", with Line2D as an example.\r\n\r\nThanks. Yeah at some point before this goes back on the call in two weeks I'll update the topline examples to be links to the one thing in multiple modalities. And I still think a table could be good, but I'll probably switch it from buttons to building blocks 'cause we make the claim that MPL is a building block library (https:\/\/www.youtube.com\/watch?v=_H8y6j42Q2w)\r\n\r\n* Explain: What are the blocks? Why do we use 'em?\r\n* Tutorial: lets build something together \r\n* Examples: Instruction sets that come w\/ lego sets\r\n* Reference: block spec sheets\r\n\r\n>  diataxis is worth bending over backwards to fill out full sections for\r\n\r\nIt's sorta the other way around. Like I wasn't intending to sort the contributing docs into diataxis, they just ended up there as a natural consequence of sorting by purpose. And I still think that's what would shake out here too. \r\n\r\nLike either way I'd propose sorting user guide into {make, customize, extend} b\/c I think those are the three main types of users\/the natural leveling: everyone starts needing to make things, many folks quickly move into needing to customize things, a small subset will eventually want to extend the library to write their own packages. This is also not bending over backwards, given that the starting tutorial is already its own section and the other work involved is taking an inventory of which docs are deep dives and moving them into their own section.  And moving the docs that are extend into their own section is a way to make it clear \"hey, please don't let this overwhelm\/intimidate you, by the time you need to know this, this will be accessible. The other advantage of 3 is that devs who've been using Matplotlib for years can just go straight to the extra chapters in the back of the book. It's also basically a direct mapping into the \"amount of context\" leveling we already use for good first issues and have as our tagging guidelines.\r\n\r\n\r\n>  pie_and_donut_labels should stay in examples. Why would we move it to Tutorials? It's a single self contained example. \r\n\r\nThe style it's written in, which is \"hey, let's build this together\" rather than just the code to do the thing. Also it shows how to put a bunch of different matplotlib components together (it cuts across lots of different functionality), and I think it's good if have both simpler and more complex tutorials. Again, differentiating on level by having the simple means that we don't have to try to include the simple in the complex. \r\n\r\n> and I don't see how it would help discoverability or readability to have it off in Tutorials by itself where no one will ever find it, instead of in the \"Pie and polar charts\" section of the examples where it is easy to find.\r\n\r\n`.. tags:: plot-type: pie` `.. minigallery: Axes.pie` \r\n\r\nWhich, same as user guide, I think sorting out the user guide\/ tutorials\/examples by purpose will mostly shake out to diataxis. And that starting w\/ sorting out the user guide will make the other two sections fall out a bit cleaner. \r\n\r\nWhich why do you think it's bending over backward? ","> Explain: What are the blocks? Why do we use 'em?\r\n\r\nI wish you would stop calling the User Guide \"Explain\".  It is meant to be a User Guide, and \"Why do we use 'em?\" should be replaced by \"How do we use them?\".  I don't think. its a good idea, but if someone wants to write a \"Theory of Matplotlib\" section, they can go ahead, but lets not conflate the User Guide with that.  \r\n\r\n> and moving the docs that are extend into their own section is a way to make it clear \"hey, please don't let this overwhelm\/intimidate you, by the time you need to know this, this will be accessible. \r\n\r\nIf the goal is to have a TOC:\r\n\r\n- Users Guide:\r\n  - make:\r\n     - figure\r\n     - axes\r\n     - line plot\r\n     - pcolorplot\r\n     - ...\r\n  - customize:\r\n     - figure\r\n     - axes\r\n     - line plot\r\n     - pcolorplot\r\n     - ...\r\n  - extend:\r\n     - figure, axes, line plot, pcolorplot, ...\r\n- Tutorials\r\n     - figure, axes, line plot, pcolorplot, ...\r\n- Examples\r\n     - figure, axes, line plot, pcolorplot, ...\r\n\r\nThen I think this would be a big mistake.  My outline would rather be\r\n\r\n- Users Guide:\r\n   - figure:\r\n     - make\r\n     - customize\r\n     - extend\r\n   - axes:\r\n     - make\r\n     - customize\r\n     - extend\r\n   - plotting\r\n     - lineplot\r\n       - make, customize, extend\r\n     - pcolorplot....\r\n- Tutorials:\r\n   - a couple of things\r\n- Examples:\r\n     Basically as they are now:\r\n     - figure\r\n     - axes\r\n     - line plot\r\n     - pcolorplot\r\n     - ...\r\n    \r\nwhich is basically what we have now, though with some obvious gaps.  Ripping customization of all the methods out into their own sections doesn't make sense to me.  \r\n\r\n> Yeah at some point before this goes back on the call in two weeks\r\n\r\nI have no idea what call you are talking about, and I'll likely be on a ship. ","The docs are much more random-access than linear read (a vast majority of people who land in our docs come in through search engines and land someplace deep within our docs).  While some sub-parts may make sense to be read linearly, overall they do not.  We should be careful about over-indexing either text book or lesson planning concepts onto the overall structure.\r\n\r\n----\r\n\r\nThe point of diataxis is to sort out the purpose of a given document and then write for that use.  My attempt at translating this to what we currently have:\r\n\r\n - explain: the goal is to understand something.  In our case, that is the user guide where the first goal should be for the reader to end up with a (correct) mental model of how Matplotlib is designed.  There is no way to do that without examples and also teaching them how to use the library.  In here we don't need to cover _every_ formatter, but the idea that Axes have Axis that have both major and minor locators & formatters so that the user can go \"oh, I want these ticks someplace else, I should look up `Locators`...\".  This is exactly what I think you have been producing with your recent work @jklymak . I would also add a \"deep dive\" section that collects the explanations of some of our more complex APIs that include the why of the design which would smooth out some of the flow issues (e.g. no one should have to learn about event loop integration unless they really need to).   These are \"breadth first\" docs.\r\n - how-to: the goal is to quickly be able to do a thing without having to understand.  There are our examples as copy-paste-editable snippets.  You do not need to understand what a locator is to use an example that sets one if you are willing to accept some level of \"magic\" (which with computers we _always_ accept there is some level below which we do not need (want) to look).  The goal of these is to send the user off to solve their actual problem with a useful bit of code as quickly as possible without asking them to read a multi page essay waxing poetically about the details of our architecture or academic visualization theory.\r\n - tutorials: these are long-form prose documents that are some cross-cutting project that both shows the code to get some outcome and explains the choices that were made and why.  If you took a tutorial, deleted all of the text and only kept the final version you get get and example\/how-to and if you took a how-to and bulked it up with incremental development of the code and prose about each step then you would get a tutorial.  In contrast to the user guide, these are \"depth first\" docs.\r\n - reference: the docstrings which have the exact spelling of the parameters in as terse of a way as we can achieve. \r\n\r\n\r\nThe point of this sorting is not the _content_ but what the reader is trying to do at the time when they read it.   Are they trying to understand Matplotlib as a thing (user guide) or are they just trying to get the plot they need on the screen ASAP (examples\/reference)?  Do they want to they want general explanations (user guide) or worked complex examples (tutorials)?\r\n\r\n\r\n-----\r\n\r\n\r\nI agree not putting code in the user guide is a non-starter, but I don't think anyone is proposing that.","@jklymak thanks for writing that out, what I was proposing was more like:\r\n\r\n## Make\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/6f3663d2-e99a-4308-acae-d179aeb6d6ad)\r\n\r\n## Customize (figures here as an example, but more or less keeping the same sections\/adding a section on plotting)  \r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/20fe52ed-92a2-4a2a-8785-f665ee51d4ac)\r\n\r\n## Extend (same as above, these as example but pulling out all these types of docs)\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/1300499\/27eb26d4-7de9-44ec-9167-f4dd73d999dd)\r\n\r\nLike I keep mentioning, my plan is much more akin to the contributing docs reorg where I (mostly) don't write new docs.  The sorting is, like @tacaswell  said, on 'what topics do I need to know to achieve this goal', not a rehashing of topics at each layer. \r\n\r\n>  have no idea what call you are talking about, and I'll likely be on a ship.\r\n\r\nWeekly dev call","> what I was proposing was more like:\r\n\r\nThat is a couple of examples, and I don't know how you would implement it in general.  \r\n\r\nI'm fine with @tacaswell's [characterization of the docs](https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26389#issuecomment-1881545586) :\r\n\r\n> The point of diataxis is to sort out the purpose of a given document and then write for that use. My attempt at translating this to what we currently have...\r\n\r\nand would prefer we continued to work in this direction.\r\n","> That is a couple of examples\r\n\r\nThat's kinda the point? \r\n1. Start w\/ the sorting and end up w\/ an extend section that probably more or less ends up looking like our old user guide. \r\n3. Look through the old issues and PRs and see which are trying to fill gaps and mark for follow up\r\n4. Add new content as needs arise for it. \r\n\r\n> I'm fine with @tacaswell's https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26389#issuecomment-1881545586 :\r\n    The point of diataxis is to sort out the purpose of a given document and then write for that use. My attempt at translating this to what we currently have...\r\n> and would prefer we continued to work in this direction.\r\n\r\nFrankly I don't understand how what I proposed wasn't already working in this direction. In this discussion and in the PR as it currently stands, the language isn't quite the same (and yes I'll revise) but is aimed at getting to the same thing:\r\n\r\n> explain: the goal is to understand something. In our case, that is the user guide where the first goal should be for the reader to end up with a (correct) mental model of how Matplotlib is designed. \r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/89ce54e5c11e69ff1f39a66064c4c5da2c9ffef4\/doc\/devel\/content_guide.rst?plain=1#L51-L60\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/89ce54e5c11e69ff1f39a66064c4c5da2c9ffef4\/doc\/devel\/content_guide.rst?plain=1#L78-L80\r\n\r\n> how-to: the goal is to quickly be able to do a thing without having to understand\r\n\r\n* The role of examples in a diataxes framework is closer to the API docs -> they're informational rather than education. They're supposed to be aimed at folks like our maintainers who just want to look up how to do the thing & don't want or need the explanation.  https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26389#issuecomment-1880328724\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/89ce54e5c11e69ff1f39a66064c4c5da2c9ffef4\/doc\/devel\/content_guide.rst?plain=1#L255-L258\r\n\r\n> tutorials: these are long-form prose documents that are some cross-cutting project that both shows the code to get some outcome and explains the choices that were made and why.\r\n\r\n* The style it's written in, which is \"hey, let's build this together\" rather than just the code to do the thing https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26389#issuecomment-1880592367\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/89ce54e5c11e69ff1f39a66064c4c5da2c9ffef4\/doc\/devel\/content_guide.rst?plain=1#L169-L171\r\n\r\n> reference: the docstrings which have the exact spelling of the parameters in as terse of a way as we can achieve.\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/89ce54e5c11e69ff1f39a66064c4c5da2c9ffef4\/doc\/devel\/content_guide.rst?plain=1#L292-L294","> Frankly I don't understand how what I proposed wasn't already working in this direction. In this discussion and in the PR as it currently stands, the language isn't quite the same (and yes I'll revise) but is aimed at getting to the same thing:\r\n\r\n>> explain: the goal is to understand something. In our case, that is the user guide where the first goal should be for the reader to end up with a (correct) mental model of how Matplotlib is designed.\r\n\r\nBecause that sounds like the User Guide is a discourse on how the library was designed, _not_ on how to _use_ it.  It would be like if I got the User Guide to a fridge and all its \"first goal\" was to explain how refrigeration works.  Most people don't care - they want the User Guide to tell them how to _use_ the fridge.  \r\n\r\nUsers Guide: the goal is to understand how to use Matplotlib.\r\n","> Because that sounds like the User Guide is a discourse on how the library was designed, not on how to use it.\r\n\r\n>It would be like if I got the User Guide to a fridge and all its \"first goal\" was to explain how refrigeration works. Most people don't care - they want the User Guide to tell them how to use the fridge.\r\n\r\nIs the hangup in how I'm using the word \"works\"?\r\n\r\n\"Explain how to use\" -> \"Explain how it works\" was a PR suggestion in https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26389#discussion_r1429321822 - me and @timhoffm were using them interchangebly\r\n\r\n>  The goal of the user guide is to explain how Matplotlib works to someone who is  unfamiliar with the library. The focus is primarily on the functionality provided by the  library. \r\n\r\nThe second sentence explicitly says that by \"works=functionality\", like a manual that explains how the fridge works talks about the icemaker and the freezer and has an exploded view of the fridge. The rest of that section is like \"identify each component\" like how a fridge manual says \"and the icemaker is here\"\r","> Is the hangup in how I'm using the word \"works\"?\r\n>\r\n> ETA: \"Explain how to use\" -> \"Explain how it works\" was a PR suggestion in https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26389#discussion_r1429321822 - me and @timhoffm were using them interchangebly\r\n\r\nYes that is the hang up.  A user only needs to know how it \"works\" to get things done.  I disagree with @timhoffm's comment that there is anything wrong with this sounding like a tutorial, and strongly prefer how you originally wrote it.  \r\n\r\n> The second sentence explicitly says that by \"works=functionality\", like a manual that explains how the fridge works talks about the icemaker and the freezer and has an exploded view of the fridge. The rest of that section is like \"identify each component\" like how a fridge manual says \"and the icemaker is here\"\r\n\r\nI agree.   How to \"find\" the ice maker is a great thing for the Users _Guide_.  How to \"use\" the ice maker is a good thing for the _Users_ Guide.  Contrary to @tacaswell, I would put \"How does the ice maker work?\" at the end of the list, as something that is perhaps helpful for a user to understand but not 100% necessary.  But a full explanation of the Carnot cycle would probably belong elsewhere.  ","> How to \"find\" the ice maker is a great thing for the Users Guide. How to \"use\" the ice maker is a good thing for the Users Guide. Contrary to @tacaswell, I would put \"How does the ice maker work?\" at the end of the list,\r\n\r\nSo going back to my layers to bridge find->use->work:\r\n\r\n1. Make $\\approx$ find icemaker $\\approx$ demo video\r\n    * audience: total novice, doesn't know what Matplotlib calls things\r\n    * purpose: provide an overview of using Matplotlib to make things\r\n    * level: no-context\/beginner\r\n    * content: more or less the starting guide that's already there:\r\n       -> this is why I keep bringing up the idea of using  the anatomy figure as a sort of like \"exploded view\" of the library (fridge) to then hook the \"what is this and what can I do w\/ it\" explaination \r\n2. Customize $\\approx$ use ice maker $\\approx$ review video\r\n    * audience:  thinking of this user matplotlib\/matplotlib#26612 <- used the library a bit, would benefit from understanding the OO model better\r\n    * purpose: explain about the various components - functionality, features, usage - so that the reader can build that mental map and understand how to fit the components of the library together\r\n    * level: medium context\/intermediate\r\n    * content:  this is more or less the \"what is a figure\/Axes\/units\" docs that are already there\r\n3. Extend: $\\approx$ how it works $\\approx$ repair video\r\n   * audience: downstream library developers whose use case is they need to write a custom artist or projection or the like\r\n   * purpose: explain how the component works\/design decisions so that then can build on top of it \r\n   * level: high context\/advanced\r\n   * content: deep discursive dives like the pyplot architecture doc  \r\n\r\nAnd the major reason I keep pushing for the three very distinct content areas is that I think one of the reasons we're going in all these circles around audience and purpose and content in the user guide is b\/c there's actually these three distinct categories.\r\n\r\nETA3: folded leveling in b\/c I think the explain aspect, for 1. especially, is giving the the reader enough context to move onto the next level\r\n\r\nETA: Also circling way back, this is kinda the user guide equiv of [overview->zoom and filter->details on demand](https:\/\/www.cs.umd.edu\/~ben\/papers\/Shneiderman1996eyes.pdf) (to be clear, this is my brain weirdness and what I think is a meta UX pattern, not something I'd concretely work in)\r\n\r\n> But a full explanation of the Carnot cycle would probably belong elsewhere.\r\n\r\nETA2: I think we're all in agreement in this, at least I think that would be widely out of scope for a fridge manual. ","Newest version (probably) https:\/\/output.circle-artifacts.com\/output\/job\/4770a68d-dcb5-446e-8ca5-b58000f4e974\/artifacts\/0\/doc\/build\/html\/devel\/document_content.html#content-tutorials\r\nAlignment w\/ Di\u00e1taxis: Summary section of doc\r\n\r\nETA: keep making small changes so gave up on linking to output","@story645 I have read the majority of this now (but not all details of the *User guide* section). Here's my feedback:\r\n\r\n- The fundamental idea of explicitly writing down the purpose and how to write the different parts of our documentation is great. - And I believe basically all core devs will agree with this.\r\n- I think, you're doing too much in this PR, which is why the PR is not moving forward well: 1. It's too much in volume - a reviewer needs quite some time to dig into this (this is also why I myself pushed looking into this forward again and again). 2. It's too much in complexity, in particular the \"User guide\" section is quite a construct, and by itself a possible source of longer debate.\r\n- Apart from the review aspect: Can we make this more compact? The document feels quite long, and the longer it is the less people will read it. I propose as a general guiding question: With how little content and conceptual overhead can we reasonably cover the topic? - I'm particularly thinking of the \"User guide\" here, but also e.g. of the introduced term \"modality\" for the type of documentation.\r\n\r\nTo move forward, I propose to split this up and in a first step cut off after the summary (probably simplest to 1:1 copy that part to a new PR and start discussing there). The detailed descriptions of the individual sections can be handled later.",">  It's too much in complexity, in particular the \"User guide\" section is quite a construct, and by itself a possible source of longer debate.\r\n\r\nSo this PR started as just the user guide section, and what I found was I had to fold back the other information to contextualize the proposal for the user guide - basically I don't see how to propose a holistic approach to the docs w\/o being holistic. Also don't see how to do a summary w\/o the what is it summarizing. \r\n\r\nETA: also I have been consistently revising\/updating the user guide proposal based on the feedback to this PR. The current proposal accommodates the existing documentation with relatively little reframing of a few documents (which would be necessary of any restructuring proposal) while also proposing a structure that communicates to the reader both audience and purpose.\r\n\r\n\r\nBut, I do hear you on the overwhelming so I propose spinning out each section into its own page and turning the summary page into the landing page for this section.  And I'll see what I can slim down in each subpage. Also pulled the tutorials changes out to #27769\r\n\r\n> The detailed descriptions of the individual sections can be handled later.\r\n\r\nFrankly, I don't see this happening if it doesn't go in w\/ this PR and w\/o details this guide isn't very  actionable or useable to new contributors. ",">But, I do hear you on the overwhelming so I propose spinning out each section into its own page and turning the summary page into the landing page for this section. \r\n\r\nOk, this ended up being slightly absurd and likely to encourage scope creep on each individual page ([demo](https:\/\/output.circle-artifacts.com\/output\/job\/5fce5905-3e13-4304-b0d9-7319ec4f79b3\/artifacts\/0\/doc\/build\/html\/devel\/content_guide\/index.html)) so instead wrote tldr summary for user guide and linked out to the detailed page. (and streamlined tutorial) "],"labels":["Documentation","status: needs comment\/discussion","Documentation: devdocs"]},{"title":"[Doc]: Revisit interface terminology: Axes interface \/ pyplot interface","body":"### Documentation Link\r\n\r\nhttps:\/\/matplotlib.org\/devdocs\/api\/index.html\r\n\r\n### Problem\r\n\r\nWe currently use the terms the *explicit API* and *implicit API*. Even though they were the result of lengthy discussions, I still have a hard time using them. I bet that most of our users do not know these terms.  And also when given these terms, I suppose most would not know what they mean. In my experience, I always have to follow up on these terms with an explanation.\r\n\r\nI think the problem is that they are very technical and not something a user can relate to intuitively: Explicit\/implicit is the mode of operation; i.e. how the written code references the Figure and Axes. This is not a primary concern of users.\r\n\r\n\r\n\r\n### Suggested improvement\r\n\r\n#### Use *interface* instead of *API*.\r\n\r\nAPI is too much on the technical side (which objects\/functions\/methods are there and what are their signatures). To me *interface* has more emphasis on the conceptual aspect (how do I work with this). Also, *interface* can have a good-enough intuitive meaning for non-software developers who do not know \"API\" at all.\r\n\r\n#### Distinguishing characteristics\r\n\r\nUse the the things the user interacts with as the distinguishing characteristic:\r\n\r\n- <s>Variant 1) *conceptual distinction*: **the object interface \/ the function interface**<\/s>\r\n- Variant 2) *practical distinction*: **the Axes interface \/ the pyplot interface**\r\n\r\nI propose to go with variant 2). While object\/function is more concrete than explicit\/implicit, it's still somewhat generic (what objects\/functions?). Also, the OOP aspect is dilluted because you usually do not instantiate objects yourself and the interactions is mostly limited to Figure and Axes objects.\r\n\r\nIn variant 2) one could have gone with \"the Figure-and-Axes interface\", but that seems too verbose, and given that operations on the Figure are much less frequent compared to operations on the Axes, I think we can afford that simplification. The nice thing about this description is that it directly relates to the prefixes that are used for plotting: Axes -> `ax`; pyplot --> `plt`.\r\n\r\n```\r\n# The Axes interface\r\nfig, ax = plt.subplots()\r\nax.plot(x, y)\r\nax.set_xlabel(...)\r\nax.set_ylabel(...)\r\nax.set_title(...)\r\n\r\n# The pyplot interface\r\nplt.plot(x, y)\r\nplt.xlabel(...)\r\nplt.ylabel(...)\r\nplt.title(...)\r\n```","comments":["> 2) the Axes interface \/ the pyplot interface\r\n\r\ntruthfully I think this is mostly what I already use as `@matplotlib` because I think it's got the least cognitive overload\/overhead. I forgot about the explicit\/implicit thing, but I totally agree w\/ you that it explains the difference between the two but not what they are. ","Agreed - implicit and explicit is hard to keep track of.  OTOH, it could still be mentioned.","because I don't want to open up a PR for a one word change, while someone is changing those docs they should also remove the word `Native` from the [interfaces](https:\/\/matplotlib.org\/devdocs\/users\/explain\/figure\/api_interfaces.html#native-matplotlib-interfaces) heading as it doesn't add anything","You can rephrase it if you like, but it is in contrast to \"third-party\" interfaces in the next section.  ",">  but it is in contrast to \"third-party\" interfaces in the next sectio\n\nThen maybe rename the next section to \"External (third party) Interfaces\"? I think \"Matplotib Interfaces\" and the content of that section make it clear that these are the ones we ship? \n\nETA: It's kinda I think another variant of what this issue is about, internal\/external, native\/third-party describe the contrast\/where to find but now what it is.","A disadvantage of \"axes interface\" vs \"pyplot interface\" is that it does not actually convey any information about what they are or why you would want to pick one over the other or why both exist.  For someone new to the library it might as well be \"flibber interface\" and \"jibberish interface\".\r\n\r\nWith explicit \/ implicit there is at least some additional information in there about how they the two APIs differ and (maybe) an implication that they have equivalent capabilities.  If people have read the zen of Python it also helps nudge them to using the explicit interface.","In https:\/\/matplotlib.org\/stable\/users\/explain\/api_interfaces.html#api-interfaces we say \"The explicit \"Axes\" interface\" and \"The implicit \"pyplot\" interface\".  Maybe just move that into this location as well.","Coming from https:\/\/twitter.com\/matplotlib\/status\/1698143656077599077?s=20\r\n\r\nThe most effective way to avoid confusion between interfaces for users is to say \"import X is discouraged, please use import Y instead\".\r\n\r\nSo if there was an `import matplotlib.axes as plt` interface that provided `figure()`, `subplots()`, etc and left `plot()` out, it would be easier for users to tell \"this is what matplotlib devs want me to use\" vs \"this is what I have always used\" and then adapt and ask questions about it.\r\n\r\nAutocomplete would tell us users what best practice is.\r\n\r\nThanks for all your work!","Yes we have that, but it's not merged yet.  Should be in my opinion. https:\/\/github.com\/matplotlib\/mpl-gui"],"labels":["Documentation"]},{"title":"Update LICENSE_COLORBREWER","body":"Adds additional clarification found on the author's information page about the license for the software.\r\n\r\n## PR summary\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-docstrings) guidelines\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please\r\nconsider the following points:\r\n\r\n- A development guide is available at https:\/\/matplotlib.org\/devdocs\/devel\/index.html.\r\n\r\n- Help with git and github is available at https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html\r\n\r\n- Create a separate branch for your changes and open the PR from this branch. Please avoid working on `main`.\r\n\r\n- The PR title should summarize the changes, for example \"Raise ValueError on\r\n  non-numeric input to set_xlim\".  Avoid non-descriptive titles such as\r\n  \"Addresses issue #8576\".\r\n\r\n- The summary should provide at least 1-2 sentences describing the pull request\r\n  in detail (Why is this change required?  What problem does it solve?) and\r\n  link to any relevant issues.\r\n\r\n- If you are contributing fixes to docstrings, please pay attention to\r\n  https:\/\/matplotlib.org\/stable\/devel\/documenting_mpl.html#formatting-conventions.  In particular,\r\n  note the difference between using single backquotes, double backquotes, and\r\n  asterisks in the markup.\r\n\r\nWe understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.\r\n-->\r\n","comments":["Documenting my reasoning from https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26361 I did not include this portion of the text because:\r\n\r\nFrom the indentation of section 4 of http:\/\/www.personal.psu.edu\/cab38\/ColorBrewer\/ColorBrewer_updates.html I read that the License is the first indented block and the rest of the text (above and below) as commentary.  I read \"remains in place\" as \"retained for historical reference on this website\", not \"appended to the License\".\r\n\r\nThe github repo behind the https:\/\/colorbrewer2.org only carries an unmodified Apache 2.0 license (https:\/\/github.com\/axismaps\/colorbrewer\/pull\/17 \/ https:\/\/github.com\/axismaps\/colorbrewer\/blob\/master\/LICENCE.txt (which given they did not fill in the template may be its own problem but if it is I do not think is my problem) )\r\n\r\nFinally, the stated intent of the change was to avoid a claimed incompatibility with the GPL which, per my understanding of the FSF's claims, is due to the restricitons on the use of names (https:\/\/www.gnu.org\/licenses\/license-list.en.html#apache1.1 ).  Appending the Apache v1.1 license to the v2.0 version would defeat the stated intention.\r\n\r\n-------\r\n\r\nI should note that I am not a Lawyer and @pchestek is (trying to sort out who I was talking to I believe she is https:\/\/opensource.org\/board-member\/pamela-chestek-2\/).\r\n\r\n@pchestek Are you opening this PR as yourself or on behalf of a client?\r\n\r\n\r\n----\r\n\r\n[Edited to fix miss-pasted link]","@tacaswell, should we close this?  "],"labels":["status: needs clarification","Maintenance"]},{"title":"[Bug]: DPI keeps doubling when creating a new MatPlotLib QtWidget in qt6","body":"### Bug summary\r\n\r\nI ran into this bizarre bug, I am not sure if it's a skill issue on my end, but I am trying to embed a plot in my qt6 application. Allowing the user to plot and replot for some reason keeps increasing the sizes of my chart elements, but *only* when I have display scaling on (e.g. 125%, 150% etc). To illustrate:\r\n\r\n![wat](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/59785388\/286c07a7-e217-4fea-82db-817f7c3b3b10)\r\n\r\nSee below for the code, basically I am creating a new plot every time there is a mouse click on that row. Embedding `print(self.chart.figure.dpi)` shows that my plot's dpi keeps doubling every other time I trigger a click. Console output:\r\n\r\n```\r\n100.0\r\n100.0\r\n200.0\r\n200.0\r\n400.0\r\n400.0\r\n```\r\n\r\nI can workaround this by explicitly setting the figure DPI, e.g. figure.dpi = 100 when creating it. But I assume that means I'm giving up display scaling\r\n        \r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib\r\n\r\nmatplotlib.use(\"Qt5Agg\")\r\nfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg\r\nfrom matplotlib.figure import Figure\r\nfrom PyQt6.QtWidgets import (\r\n    QWidget,\r\n    QVBoxLayout, QFrame\r\n)\r\n\r\nclass GraphView(QWidget):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.layout = QVBoxLayout()\r\n        self.separator = None\r\n        self.chart = MplCanvas()\r\n\r\n        self.figures = None\r\n\r\n        self.init_widget()\r\n\r\n    def init_widget(self):\r\n        self.init_separator()\r\n        self.layout.addWidget(self.separator)\r\n        self.layout.addWidget(self.chart)\r\n        self.setLayout(self.layout)\r\n    ...\r\n    # Note this is the code that triggers when I click a row.\r\n    def update_graph(self, figure):\r\n\r\n        self.chart.deleteLater()\r\n        self.chart = MplCanvas(fig=figure)\r\n    \r\n        self.layout.addWidget(self.chart)\r\n        self.layout.update()\r\n\r\nclass MplCanvas(FigureCanvasQTAgg):\r\n    def __init__(self, fig=Figure()):\r\n        super(MplCanvas, self).__init__(fig)\r\n\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nFigure DPI keeps dynamically doubling\r\n\r\n### Expected outcome\r\n\r\nDPI shouldn't double like that, it's madness :frowning_face: \r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nWindows, Linux\r\n\r\n### Matplotlib Version\r\n\r\n3.6.3\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\n3.11.4\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip","comments":["Can you please try with a newer version of Matplotlib?  I believe we have fixed this bug already. ","Thanks @tacaswell, the issue is still present in ver 3.7.2. \r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/59785388\/3d0b190a-ec10-41a1-9fb5-a659f8cc6234)\r\n\r\n If i get time I will write up some simple reproducible code. ","Are you setting the DPI internally to your code?\r\n\r\nAre you updating one `Figure` or do you have more than one Figure that you show\/hide?  Do you do that show\/hide by having more than one Canvas and then doing Qt things or do you have one canvas that you attach to each figure in turn?","(1) No, I am not setting DPI internally.\r\n(2) More than one figure, clicking the QTableWidget row effectively just requests a new figure. Every time a request is made a new `MplCanvas` object (inherits `FigureCanvasQTAgg`, see above) is being created and added to the Qt window as a widget. So basically the canvas is being deleted + new one being created every time a figure is requested.","If you are creating new `Figure` and `FigureCanvasQtAgg` each time, where is the scaled-up DPI being persisted?  The source of the scaling is that on high DPI screens we upscale the user set DPI by what ever the pixel ratio is.  IF you then read that DPI and set it back you can get these \"always gets bigger\" loops.","honestly, I don't know, since I don't set dpi settings anywhere in my code. I'll try write something reproducible for you. ","> the issue is still present in ver 7.4.2.\r\n\r\nThere is no such version of Matplotlib?","> > the issue is still present in ver 7.4.2.\r\n> \r\n> There is no such version of Matplotlib?\r\n\r\nSorry, I meant version 3.7.2 **","@tacaswell I can reproduce this bug with the following code (using v. 3.7.2). It seems like this occurs when plotting preexisting figures on a canvas (if creating a new figure each time \"plot\" is clicked, there are no issues). So I guess the dpi info is persisting in the figure object? \r\n\r\nRecording:\r\n\r\n![bug](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/59785388\/153d0a13-ca3d-4a02-b274-9185c8a59233)\r\n\r\nCode:\r\n\r\n```python\r\nimport sys\r\nimport matplotlib\r\nimport random\r\n\r\nmatplotlib.use('Qt5Agg')\r\nfrom matplotlib.figure import Figure\r\nimport matplotlib.pyplot as plt\r\nfrom PyQt6.QtWidgets import QWidget, QVBoxLayout, QApplication, QPushButton\r\nfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg\r\n\r\n\r\nclass App(QWidget):\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.layout = QVBoxLayout()\r\n        self.chart = Canvas()\r\n\r\n        self.btn = QPushButton(\"Plot\")\r\n        self.figs = self.make_figs()\r\n        self.btn.clicked.connect(self.show_plots)\r\n\r\n        self.layout.addWidget(self.btn)\r\n        self.layout.addWidget(self.chart)\r\n        self.setLayout(self.layout)\r\n\r\n    def show_plots(self):\r\n        i = random.choice([0, 1])\r\n        figure = self.figs[i]\r\n        self.chart.deleteLater()\r\n        self.chart = Canvas(fig=figure)\r\n\r\n        self.layout.addWidget(self.chart)\r\n        self.layout.update()\r\n\r\n    def make_figs(self):\r\n        # test figures:\r\n        fig1, ax1 = plt.subplots()\r\n        fig2, ax2 = plt.subplots()\r\n\r\n        data1 = [5, 10, 15, 20]\r\n        data2 = [[20, 30, 18, 12], [3, 5, 7, 8]]\r\n\r\n        ax1.boxplot(data1)\r\n        ax2.scatter(data2[0], data2[1])\r\n\r\n        return [fig1, fig2]\r\n\r\n\r\nclass Canvas(FigureCanvasQTAgg):\r\n    def __init__(self, fig=Figure()):\r\n        super(Canvas, self).__init__(fig)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app = QApplication(sys.argv)\r\n\r\n    ex = App()\r\n    ex.show()\r\n    sys.exit(app.exec())\r\n\r\n```"],"labels":["GUI: Qt","topic: dpi and resolution"]},{"title":"[Bug]: Pie chart autopcr % symbol disappears with text.usetex=\"True\"","body":"### Bug summary\n\nWhen I plot a simple bar chart and set `plt.rcParams[\"text.usetex\"] = True`, the % symbol in the bar chart disappears. It makes sense considering that % is treated as a comment within Latex, but there seems to be no way to override this. When I comment out that line, things return to normal. \n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\n#formatting\r\nplt.rcParams[\"text.usetex\"] = True\r\nplt.rc('font', family='serif')\r\nplt.rc(\"font\",size=11)\r\n\r\nfirst_year = [20,10,70]\r\ncolors = [\"deepskyblue\",\"steelblue\",\"darkblue\"]\r\nlegend=[\"Coursework\", \"Practical\",\"Examination\"]\r\n\r\nfig1,ax1 = plt.subplots(1,1)\r\nax1.pie(first_year,colors=colors,autopct=\"%1.0f%%\",textprops={'color':\"w\",\"weight\":\"bold\"},radius=2,wedgeprops=dict(width=1.2),pctdistance=0.65)\r\nax1.set_title(\"Year 1\",y=1.5,weight='bold')\r\nfig1.legend(legend,ncol=3,loc=\"lower center\")\r\nfig1.tight_layout()\r\n\r\nplt.show()\n```\n\n\n### Actual outcome\n\n![mwe_tex](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/41192490\/d394f4af-26b8-45ac-9ee3-27b5e99f589f)\r\n\n\n### Expected outcome\n\nIt should look like this, except the text should be in the Latex font\r\n\r\n![mwe_notex](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/41192490\/65d25a1b-f46b-43f0-855e-17b0be2c311b)\r\n\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nUbuntu on WSL\n\n### Matplotlib Version\n\n3.7.1\n\n### Matplotlib Backend\n\nQtAgg\n\n### Python version\n\n3.10.10\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nconda","comments":["I suspect it would be nice to have something like 972b815c596792c0f40a3a368f44e5b8eada3b26 for usetex.  Labeling as good first issue as there's no API decision required (I think?) and the patch for pgf is already there, but medium difficulty as you need some familiarity with tex internals and with the usetex implementation to work on this.","### Good first issue - notes for new contributors\n\nThis issue is suited to new contributors because it does not require understanding of the Matplotlib internals. To get started, please see our [contributing guide](https:\/\/matplotlib.org\/stable\/devel\/index).\n\n**We do not assign issues**. Check the *Development* section in the sidebar for linked pull requests (PRs). If there are none, feel free to start working on it. If there is an open PR, please collaborate on the work by reviewing it rather than duplicating it in a competing PR.\n\nIf something is unclear, please reach out on any of our [communication channels](https:\/\/matplotlib.org\/stable\/devel\/contributing.html#get-connected).","Hi, I'm quite new to contributing. I believe the issue lies in specifying the format string for autopct.\r\n\r\nInstead of `autopct=\"%1.0f%%\"`\r\nTry using `autopct=\"%1.0f\\%%\"`\r\n\r\n### Outcome\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/114261455\/edb123c4-7a3f-4557-a722-22c747274289)\r\n","how to solve this problem , I did not get snippet in the repository \r\n","i am new in this field , I don't know how to find issues and solve that problem.\r\nPlease help.\r\n","`import matplotlib.pyplot as plt\r\n\r\nplt.rcParams[\"text.usetex\"] = True\r\nplt.rc('font', family='serif')\r\nplt.rc(\"font\", size=11)\r\n\r\nfirst_year = [20, 10, 70]\r\ncolors = [\"deepskyblue\", \"steelblue\", \"darkblue\"]\r\nlegend = [\"Coursework\", \"Practical\", \"Examination\"]\r\n\r\nfig1, ax1 = plt.subplots(1, 1)\r\nax1.pie(first_year, colors=colors, autopct=\"%1.0f\\\\%%\", textprops={'color': \"w\", \"weight\": \"bold\"},\r\n        radius=2, wedgeprops=dict(width=1.2), pctdistance=0.65)\r\nax1.set_title(\"Year 1\", y=1.5, weight='bold')\r\nfig1.legend(legend, ncol=3, loc=\"lower center\")\r\nfig1.tight_layout()\r\n\r\nplt.show()`\r\n\r\n\r\n\r\nThis works perfectly how to contribute?\r\n","@praetorian2710 @Priyanshu72 it looks like there are two different things here: one is that you can maybe bypass the escaping issue if you give the plotting method a properly formatted string, and the other is that we may want to do this internally to avoid extra work by the user.\r\n\r\nYou can check out our [contributing guide](https:\/\/matplotlib.org\/stable\/devel\/index) for the general contribution workflow. In this particular case, as mentioned above, you may need some familiarity with the TeX internals and\/or usetex. You may want to start here: https:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/lib\/matplotlib\/backends\/backend_pgf.py (also maybe take a look at https:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/lib\/matplotlib\/text.py or https:\/\/github.com\/matplotlib\/matplotlib\/blob\/main\/lib\/matplotlib\/texmanager.py)","Hello @melissawm, if we need to resolve this issue by handling it internally, which function and file should be worked on specifically?","@yjrab I think deciding on that may be part of the work on this issue, so starting from the files I pointed above maybe you can try and see what makes more sense?","@melissawm @anntzer \r\n\r\nI think replacing the '%' in text with '\\\\%' will solve the issue. Can you please review the pull request. Thanks\r\nPR #26642 \r\n","Can I pick up this issue as it doesn't seem to be resolved yet and it has been over 3 months since the last PR","Hi @sebas-inf, it looks like that PR is currently waiting on us for a review.  So in this case I wouldn't write a new one.  If you see one that has been waiting on the author for a while, then it would be totally reasonable to open a new one."],"labels":["New feature","Difficulty: Medium","Good first issue","topic: text\/usetex"]},{"title":"Add `widths`, `heights` and `angles` setter to `EllipseCollection`","body":"## PR summary\r\n\r\nCurrently, the following example:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.collections import EllipseCollection\r\nimport numpy as np\r\n\r\nrng = np.random.default_rng(0)\r\n\r\nwidths = (2, )\r\nheights = (3, )\r\nangles = (45, )\r\noffsets = rng.random((10, 2)) * 10\r\n\r\nfig, ax = plt.subplots()\r\n\r\nec = EllipseCollection(\r\n    widths=widths,\r\n    heights=heights,\r\n    angles=angles,\r\n    offsets=offsets,\r\n    units='x', \r\n    offset_transform=ax.transData,\r\n    )\r\n\r\nax.add_collection(ec)\r\nax.set_xlim(-2, 12)\r\nax.set_ylim(-2, 12)\r\n\r\nnew_widths = rng.random((10, 2)) * 2\r\nnew_heights = rng.random((10, 2)) * 3\r\nnew_angles = rng.random((10, 2)) * 180\r\n\r\nec.set(widths=new_widths, heights=new_heights, angles=new_angles)\r\n```\r\nwill fails with the errors:\r\n\r\n```python\r\n  File ~\\Dev\\matplotlib\\lib\\matplotlib\\artist.py:147 in <lambda>\r\n    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)\r\n\r\n  File ~\\Dev\\matplotlib\\lib\\matplotlib\\artist.py:1221 in set\r\n    return self._internal_update(cbook.normalize_kwargs(kwargs, self))\r\n\r\n  File ~\\Dev\\matplotlib\\lib\\matplotlib\\artist.py:1213 in _internal_update\r\n    return self._update_props(\r\n\r\n  File ~\\Dev\\matplotlib\\lib\\matplotlib\\artist.py:1187 in _update_props\r\n    raise AttributeError(\r\n\r\nAttributeError: EllipseCollection.set() got an unexpected keyword argument 'widths'\r\n```\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [n\/a] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [n\/a] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-examples-and-tutorials)\r\n- [x] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-docstrings) guidelines\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please\r\nconsider the following points:\r\n\r\n- A development guide is available at https:\/\/matplotlib.org\/devdocs\/devel\/index.html.\r\n\r\n- Help with git and github is available at https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html\r\n\r\n- Create a separate branch for your changes and open the PR from this branch. Please avoid working on `main`.\r\n\r\n- The PR title should summarize the changes, for example \"Raise ValueError on\r\n  non-numeric input to set_xlim\".  Avoid non-descriptive titles such as\r\n  \"Addresses issue #8576\".\r\n\r\n- The summary should provide at least 1-2 sentences describing the pull request\r\n  in detail (Why is this change required?  What problem does it solve?) and\r\n  link to any relevant issues.\r\n\r\n- If you are contributing fixes to docstrings, please pay attention to\r\n  https:\/\/matplotlib.org\/stable\/devel\/documenting_mpl.html#formatting-conventions.  In particular,\r\n  note the difference between using single backquotes, double backquotes, and\r\n  asterisks in the markup.\r\n\r\nWe understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.\r\n-->\r\n","comments":["Thank you @oscargus for the review, this should be all done.\r\n\r\n> (Are there getters as well?)\r\n\r\nI didn't add the getters because we don't need them and I don't know how to get their value after the transform. But if someone give me some pointers, I am happy to do that in this PR - if there are setters, it would be fair to expect getters too!","We talked about this on the call and are \ud83d\udc4d\ud83c\udffb on it going in but would like getters.\r\n\r\nThe consensus on the call was for the getters to undo the geometric transformations, but don't worry about the ravel (if someone is passing in higher than 1D data, we would like to know why before bending over backwards to give it back).","I added the getters which return the same as what is given to the setters and rebased. The CI failures shouldn't be related to the changes of this PR.","A friendly ping on this; I'd like to put out 3.9 beta\/rc next week.","Thanks @QuLogic, yes it would be good to finish this PR. \r\n\r\n@timhoffm, does it sound good to overwrite the `set` method? In the example added in this PR, `set` is used these values in a single call. This has the advantage of keeping the API minimal and consistent. ","> @timhoffm, does it sound good to overwrite the `set` method?\r\n\r\nThat may work, but it's a bit tricky because the `set` methods are auto-generated to include all properties of the class:\r\n\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/9e18a343fb58a2978a8e27df03190ed21c61c343\/lib\/matplotlib\/artist.py#L139-L150\r\n\r\nYou may have to care for `_autogenerated_signature` and\/or `_update_set_signature_and_docstring()` to get explicit `set` signature and docstring without manually having to specify all parameters. This is some you would have to fiddle into.\r\n\r\n---\r\n\r\n*Edit:* I see this is slightly more complicated than https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26410#issuecomment-1910971749. I thought we make an equivalent to `set_XYUVC()`, but that would be something like `set_widths_heights_angles_offsets()` which is quite bulky, and I don't believe this would genralize well to arbitrary collections.\r\nThus, I'm not sure we get a viable solution with length consistency checks quickly. Therefore, if people want the fundamental functionality to set these parameters (without saftety checks) in 3.9, I would be ok to merge the current proposal as is. It's not adding any API that we'd regret later.","I added a `_check_length` method to check the length of the input parameter using `offsets` as reference for the number of items in the collection."],"labels":["New feature","status: needs review","topic: collections and mappables"]},{"title":"[TYP]: Decide what to re-export from pyplot","body":"### Summary\n\nRunning `mypy --strict` generates the following missed items found in the tests or other parts of the code base:\r\n```\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"Axes\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"Circle\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"cm\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"color_sequences\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"figaspect\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"FixedFormatter\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"FixedLocator\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"FormatStrFormatter\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"FuncFormatter\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"get_backend\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"Line2D\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"LinearLocator\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"MaxNLocator\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"MultipleLocator\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"Normalize\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"NullLocator\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"_pylab_helpers\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"rcParams\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"rcParamsDefault\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"Rectangle\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"style\"  [attr-defined]\r\n```\r\n\r\nWe should decide whether these items should be re-exported there or we should reduce that usage internally as well.\n\n### Proposed fix\n\n_No response_","comments":["Ok:\r\n- cm\r\n- rcParams\r\n- style\r\n\r\nRather ok:\r\n- color_sequences\r\n- figaspect\r\n\r\nRather no:\r\n- get_backend\r\n- rcParamsDefault\r\n\r\nAll others: No","Running on the galleries, we additionally have:\r\n```\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"colormaps\"  [attr-defined]\r\nerror: Module \"matplotlib.pyplot\" does not explicitly export attribute \"LogLocator\"  [attr-defined]\r\n```\r\n","Colormaps: yes\r\nLogLocator: no","#26385 has now re-exported `cm`, `get_backend`, `rcParams`, `style`, `colormaps`, and `color_sequences`. No decision on the maybes yet.","Relatedly, found a case of using `cycler` from `matplotlib`, which is a re-export of `matplotlib.rcsetup.cycler`, _not_ directly from `cycler`-the-package.","`rcsetup.cycler` is not _quite_ the same as the cycler package's `cycler` method (it _uses_ that method, and returns a `cycler.Cycler`, and maybe _should_ be private (along with most-all of rcsetup, to be honest), but it is actually different in that it does rcparams validation. (I did not copy the cycler overloads for the call patterns which are defined on `cycler.cycler`, though I did leve a `TODO` comment musing about doing so.)"],"labels":["Maintenance","topic: typing"]},{"title":"[ENH]: Add option to centre `supxlabel()` and `supylabel()` on axes","body":"### Problem\n\nThe `supxlabel()` and `supylabel()` functions are very useful to label the axes of multiple subplots. But it is often ungainly that the labels are centred on the figure, and not on the axes of the plot.\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/3993688\/4dc7607c-794f-4f18-9eb3-a83e244e07b4)\r\n\r\nIt would be great if a parameter, say, could be added to the functions that centres the labels on the axes instead.\n\n### Proposed solution\n\nHere's a very simple toy implementation, using the bounding boxes of `Figure.axes`.\r\n\r\n```py\r\nclass AxesBbox(BboxBase):\r\n    def __init__(self, axes):\r\n        super().__init__()\r\n        self._points = None\r\n        self._bboxes = [ax.bbox for ax in axes]\r\n        self.set_children(*self._bboxes)\r\n\r\n    def get_points(self):\r\n        if self._invalid:\r\n            self._points = self.union(self._bboxes).get_points()\r\n            self._invalid = 0\r\n        return self._points\r\n\r\n\r\ndef supxlabel(fig, *args, **kwargs):\r\n    label = fig.supxlabel(*args, **kwargs)\r\n    trans = blended_transform_factory(BboxTransformTo(AxesBbox(fig.axes)),\r\n                                      label.get_transform())\r\n    label.set_transform(trans)\r\n    return label\r\n\r\n\r\ndef supylabel(fig, *args, **kwargs):\r\n    label = fig.supylabel(*args, **kwargs)\r\n    trans = blended_transform_factory(label.get_transform(),\r\n                                      BboxTransformTo(AxesBbox(fig.axes)))\r\n    label.set_transform(trans)\r\n    return label\r\n\r\n```\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/3993688\/f1ab17f3-1509-4902-a750-8d561f682e24)\r\n","comments":[],"labels":["New feature"]},{"title":"[Bug]: Long audio files result in incomplete spectrogram visualizations","body":"### Bug summary\n\nWhen using matplotlib to generate spectrogram visualizations of audio files, if the audio file is too long, the spectrogram portion of the plot becomes blank towards the latter half, while the waveform continues to be displayed properly.\n\n### Code for reproduction\n\n```python\nimport torchaudio\r\nimport torchaudio.transforms as transforms\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport scipy.interpolate\r\nimport librosa.display\r\nimport matplotlib.gridspec as gridspec\r\n\r\nfrom tqdm import tqdm\r\nfrom concurrent.futures import ProcessPoolExecutor, as_completed\r\n\r\n\r\ndef compute_spectrogram_per_channel(channel_waveform, sample_rate):\r\n    # Create transformer to convert waveform to spectrogram\r\n    spectrogram_transform = transforms.Spectrogram(n_fft=2048, hop_length=256)\r\n\r\n    # Apply the transformer\r\n    spectrogram = spectrogram_transform(channel_waveform.unsqueeze(0))\r\n\r\n    amplitude_spectrogram = np.sqrt(spectrogram)\r\n    db_spectrogram = librosa.amplitude_to_db(amplitude_spectrogram[0].numpy(), ref=np.max)\r\n    db_spectrogram = np.clip(db_spectrogram, a_min=None, a_max=0)  # clip to 0dB\r\n\r\n    # Set new log scale\r\n    num_freqs, num_frames = db_spectrogram.shape\r\n    min_freq = 1  # human hearing range in Hz\r\n    max_freq = sample_rate \/ 2  # Nyquist frequency\r\n    frequencies = np.linspace(min_freq, max_freq, num=num_freqs)\r\n\r\n    # Create a new scale\r\n    log_scale = np.log10(frequencies)\r\n    linear_scale = np.linspace(np.log10(min_freq), np.log10(max_freq), num=num_freqs)\r\n    scale_ratio = 0.75  # adjust this parameter to control the ratio of log scale and linear scale\r\n    new_scale = scale_ratio * log_scale + (1 - scale_ratio) * linear_scale\r\n\r\n    new_db_spectrogram = np.empty_like(db_spectrogram)\r\n\r\n    # Apply interpolation for each frame\r\n    for frame in tqdm(range(num_frames)):\r\n        interpolator = scipy.interpolate.interp1d(log_scale, db_spectrogram[:, frame])\r\n        new_db_spectrogram[:, frame] = interpolator(new_scale)\r\n\r\n    return channel_waveform.t().numpy(), db_spectrogram, new_db_spectrogram\r\n\r\n\r\ndef plot_spectrogram(waveforms, new_db_spectrograms, audio_duration):\r\n    num_channels = len(waveforms)\r\n\r\n    # Create a plot, set the background to black and adjust the size based on audio duration\r\n    plt.figure(figsize=(max(audio_duration * 2, 10), 8), facecolor=\"black\")\r\n\r\n    # Dynamically create subplots based on the number of channels\r\n    gs = gridspec.GridSpec(2 * num_channels, 1, height_ratios=[1] * num_channels + [5] * num_channels)\r\n\r\n    # Loop through each channel to plot the waveform and spectrogram\r\n    for i in range(num_channels):\r\n        # Plot the waveform\r\n        ax_waveform = plt.subplot(gs[i])\r\n        ax_waveform.plot(waveforms[i], color=\"#4BF2A7\")\r\n        nonzero_indices = np.where(waveforms[i] != 0)[0]  # Find indices of non-zero values\r\n        ax_waveform.set_xlim(nonzero_indices[0], nonzero_indices[-1])  # Set x limit to range of non-zero values\r\n        ax_waveform.axis(\"off\")\r\n\r\n        # Plot the spectrogram\r\n        ax_spectrogram = plt.subplot(gs[i + num_channels])\r\n        ax_spectrogram.imshow(new_db_spectrograms[i], origin=\"lower\", aspect=\"auto\")\r\n        ax_spectrogram.axis(\"off\")\r\n\r\n    plt.subplots_adjust(left=0, right=1, top=1, bottom=0, wspace=0, hspace=0)  # Adjust to remove borders and gaps\r\n    plt.savefig(\"spectrogram.jpeg\", facecolor=\"black\", bbox_inches=\"tight\", pad_inches=0)  # Save the figure\r\n\r\n\r\ndef main(file):\r\n    # Load the audio file\r\n    waveform, sample_rate = torchaudio.load(file)\r\n\r\n    num_channels = waveform.shape[0]\r\n    audio_duration = waveform.shape[1] \/ sample_rate  # Calculate audio duration\r\n\r\n    with ProcessPoolExecutor() as executor:\r\n        futures = {\r\n            executor.submit(compute_spectrogram_per_channel, waveform[ch], sample_rate): ch\r\n            for ch in range(num_channels)\r\n        }\r\n        waveforms = [None] * num_channels\r\n        db_spectrograms = [None] * num_channels\r\n        new_db_spectrograms = [None] * num_channels\r\n        for future in as_completed(futures):\r\n            ch = futures[future]\r\n            waveforms[ch], db_spectrograms[ch], new_db_spectrograms[ch] = future.result()\r\n\r\n    # Adjust figure width based on audio duration\r\n    plot_spectrogram(waveforms, new_db_spectrograms, audio_duration)\r\n\r\n\r\n# Run the main function\r\nif __name__ == \"__main__\":\r\n    file = \"long.wav\"\r\n    main(file)\n```\n\n\n### Actual outcome\n\nWhen visualizing an audio file of significant length, the spectrogram does not render correctly for the entire duration of the audio. The latter part of the spectrogram is blank and contains no information, which doesn't match with the waveform visualization, which continues to display normally.\r\n\r\nlong wave\r\n![spectrogram](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/59153990\/1abda313-8ca3-4f8d-b398-3bb1b5290b99)\r\n\r\nshort wave\r\n![spectrogram](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/59153990\/23635ce8-6156-4d5e-8cd1-8f7dbc0fedcc)\r\n\n\n### Expected outcome\n\nThe spectrogram should be consistently rendered for the entire duration of the audio file, matching the waveform visualization. Regardless of the length of the audio file, the spectrogram should be complete and not become blank at any point.\n\n### Additional information\n\n - Other libraries involved: torchaudio, librosa, numpy, scipy\r\n\r\nThis issue occurs regardless of the audio file format or the specifics of the audio content. It seems directly related to the length of the audio file.\n\n### Operating system\n\nWindows & Ubuntu\n\n### Matplotlib Version\n\n3.7.2\n\n### Matplotlib Backend\n\nTkAgg\n\n### Python version\n\nPython 3.10.10\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip","comments":["Can you reproduce this without the dependency on other libraries (i.e. pure numpy and matplotlib, preferably)? \r\n\r\nWe tend not debug scripts that require additional libraries.\r\n\r\nI'm suspicious that the facecolor (which is set _twice_) also ends at the same point the image ends, which may indicate some form of clip box.\r\n\r\nYou may also have problems with large images (>2**23 per dimension), which do get downsampled automatically, and not 100% sure how that handles \"auto\" aspect.\r\n\r\nI'm also slightly curious if removing the `bbox_inches=\"tight\"` affects the behavior, though I would rather doubt it","At some point you can't keep creating an image.  Making a figure that is hundreds of inches wide can't render on any realistic screen anyway.  Suggest you reduce your data somehow, perhaps by making the spectrogram windows wider in time.  ","> At some point you can't keep creating an image. Making a figure that is hundreds of inches wide can't render on any realistic screen anyway. Suggest you reduce your data somehow, perhaps by making the spectrogram windows wider in time.\r\n\r\nI need to create a very wide image to display on a web page. Users can drag to scroll the viewport. The data cannot be reduced or scaled, this is the only way.","> Can you reproduce this without the dependency on other libraries (i.e. pure numpy and matplotlib, preferably)?\r\n> \r\n> We tend not debug scripts that require additional libraries.\r\n> \r\n> I'm suspicious that the facecolor (which is set _twice_) also ends at the same point the image ends, which may indicate some form of clip box.\r\n> \r\n> You may also have problems with large images (>2**23 per dimension), which do get downsampled automatically, and not 100% sure how that handles \"auto\" aspect.\r\n> \r\n> I'm also slightly curious if removing the `bbox_inches=\"tight\"` affects the behavior, though I would rather doubt it\r\n\r\nI tried removing bbox_inches=\"tight\" and \"facecolor='black'\" at the plt.savefig function, but the result remained the same as before.\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/59153990\/8b74ddd8-8168-4561-97d1-40ed14f366ac)","Here's the minimal test code that I've written which can reproduce this issue:\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nimage = np.zeros((50000, 800, 3))\r\n\r\nlinspace = np.linspace(0, 1, 800)\r\n\r\nimage[:, :, 0] = 1 - linspace  # Red channel\r\nimage[:, :, 2] = linspace  # Blue channel\r\n\r\nr, g, b = image[:, :, 0], image[:, :, 1], image[:, :, 2]\r\nr_hist, r_bins = np.histogram(r, bins=256, range=[0, 1])\r\ng_hist, g_bins = np.histogram(g, bins=256, range=[0, 1])\r\nb_hist, b_bins = np.histogram(b, bins=256, range=[0, 1])\r\n\r\nplt.figure(figsize=(500, 8), dpi=100)\r\n\r\nplt.subplot(2, 1, 1)\r\n\r\nplt.imshow(image, aspect=\"auto\")\r\n\r\nplt.subplot(2, 1, 2)\r\n\r\nplt.plot(r_bins[:-1], r_hist, color=\"red\", alpha=0.7, label=\"Red\")\r\nplt.plot(g_bins[:-1], g_hist, color=\"green\", alpha=0.7, label=\"Green\")\r\nplt.plot(b_bins[:-1], b_hist, color=\"blue\", alpha=0.7, label=\"Blue\")\r\n\r\nplt.tight_layout()\r\nplt.savefig(\"gradient_image.jpeg\", pad_inches=0)\r\n```\r\n![gradient_image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/59153990\/2a0bb31b-d161-482d-b760-3861957d2299)\r\n","Thanks @djkcyl, I can reproduce your test code on my machine. Lowering the number of pixels and figsize by a factor of 10, I get this as the expected image:\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/14363975\/33c70468-11af-43d1-ad74-731ab4a92a59)\r\n\r\nI would definitely consider this a bug. The only justification I can think of for limiting the size of an image is preventing a user from running out of memory and crashing the shell, but if we want a hard limit then it should be made an rcparam. Beyond the use case above, images for print often need much-larger-than-screen resolutions, and if someone wants to do manipulations on a gigapixel image they should ideally only be limited by their machine's capability.","I'm pretty sure this is an agg limitation of 2^16 pixels in either direction?  ","2^16 = 65536 pixels would work for this example... if I eyeball it this looks more like this image cuts off around 2^14 = 16384 pixels (about a third of the 50000 we are trying to draw). That limit might come if they are indexing RGB subpixels instead of real pixels (3 * 2^14 fits in a uint16).\r\n\r\nI'm pretty unfamiliar with AGG, but looking at the source I do see a note here that suggests that this limit should be able to be raised to 2^32 somehow: https:\/\/agg.sourceforge.net\/antigrain.com\/__code\/include\/agg_scanline_bin.h.html#scanline32_bin\r\n```\r\n\/\/ Adaptation for 32-bit screen coordinates ([scanline32_bin](https:\/\/agg.sourceforge.net\/antigrain.com\/__code\/include\/agg_scanline_bin.h.html#scanline32_bin)) has been sponsored by \r\n\/\/ Liberty Technology Systems, Inc., visit http:\/\/lib-sys.com\r\n```","Maybe related to https:\/\/github.com\/matplotlib\/matplotlib\/issues\/23826?","We've had quite a few issues like this over the years.  Maybe Cairo doesn't have this issue?  ","Probably also related to https:\/\/github.com\/matplotlib\/matplotlib\/issues\/19276 .\r\nUnlike #19276 (which was an image that was bigger than the limit that were failing to down sample), this is a big render failing.\r\n\r\nAt 50k pixels wide Agg appears to be breaking down.  If you remove the image and just look at the bounding boxes in the Axes _something_ is going very wrong.\r\n\r\nI think the quickest fix for @djkcyl is to use the svg backend with `interpolation='none'` which will drop an (un-resampled) image in the SVG and defer the rendering problem to the browser:\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nN = 800\r\nimage = np.zeros((50_000, N, 3))\r\n\r\nlinspace = np.linspace(0, 1, N)\r\n\r\nimage[:, :, 0] = 1 - linspace  # Red channel\r\nimage[:, :, 2] = linspace  # Blue channel\r\n\r\nr, g, b = image[:, :, 0], image[:, :, 1], image[:, :, 2]\r\nr_hist, r_bins = np.histogram(r, bins=256, range=[0, 1])\r\ng_hist, g_bins = np.histogram(g, bins=256, range=[0, 1])\r\nb_hist, b_bins = np.histogram(b, bins=256, range=[0, 1])\r\n\r\nfig = plt.figure(figsize=(500, 8), dpi=100, layout='constrained')\r\n\r\nax = fig.add_subplot(2, 1, 1)\r\n\r\n\r\nax.imshow(image, aspect=\"auto\", interpolation='none')\r\n\r\nax2 = fig.add_subplot(2, 1, 2)\r\n\r\nax2.plot(r_bins[:-1], r_hist, color=\"red\", alpha=0.7, label=\"Red\")\r\nax2.plot(g_bins[:-1], g_hist, color=\"green\", alpha=0.7, label=\"Green\")\r\nax2.plot(b_bins[:-1], b_hist, color=\"blue\", alpha=0.7, label=\"Blue\")\r\n\r\nfig.savefig(\"\/tmp\/gradient_image2.svg\")\r\n\r\n\r\n```\r\n\r\nIt may also be work checking if `mplcairo` can render these \r\n\r\nWe already have some checks in the c++ code to make sure we do not try to render an output that is so big we segfault.\r\n\r\nTrying to render this with `mplcairo` fails hard:\r\n\r\n```pytb\r\n[truncated]\r\n\r\nFile ~\/.virtualenvs\/bleeding\/lib\/python3.13\/site-packages\/mplcairo\/base.py:365, in FigureCanvasCairo.print_png(self, path_or_stream, dryrun, metadata, pil_kwargs, **kwargs)\r\n    362 def print_png(self, path_or_stream, *,\r\n    363               dryrun=False, metadata=None, pil_kwargs=None, **kwargs):\r\n    364     _check_print_extra_kwargs(**kwargs)\r\n--> 365     img = self._get_fresh_straight_rgba8888()\r\n    366     if dryrun:\r\n    367         return\r\n\r\nFile ~\/.virtualenvs\/bleeding\/lib\/python3.13\/site-packages\/mplcairo\/base.py:345, in FigureCanvasCairo._get_fresh_straight_rgba8888(self)\r\n    344 def _get_fresh_straight_rgba8888(self):\r\n--> 345     renderer = self.get_renderer()\r\n    346     renderer.clear()\r\n    347     with _LOCK:\r\n\r\nFile ~\/.virtualenvs\/bleeding\/lib\/python3.13\/site-packages\/mplcairo\/base.py:221, in FigureCanvasCairo.get_renderer(self, cleared)\r\n    219     renderer = last_renderer\r\n    220 else:\r\n--> 221     renderer = GraphicsContextRendererCairo(*args)\r\n    222     self._last_renderer_call = args, renderer\r\n    223 if cleared:  # matplotlib#22245 (<3.6).\r\n\r\nFile ~\/.virtualenvs\/bleeding\/lib\/python3.13\/site-packages\/mplcairo\/base.py:63, in GraphicsContextRendererCairo.__init__(self, width, height, dpi)\r\n     60 def __init__(self, width, height, dpi):\r\n     61     # Hide the overloaded constructors used by from_pycairo_ctx and\r\n     62     # _for_fmt_output.\r\n---> 63     _mplcairo.GraphicsContextRendererCairo.__init__(\r\n     64         self, width, height, dpi)\r\n     65     RendererBase.__init__(self)\r\n\r\nValueError: invalid value (typically too big) for the size of the input (surface, pattern, etc.)\r\nError in callback <function _draw_all_if_interactive at 0x7f1d10094900> (for post_execute):\r\n\r\n```\r\n\r\nI suspect we need to push down the maximum output size in the Agg backends as \"does not segfault\" is not stringent enough.","I tried saving the result as an SVG, but I still encounter the issue when opening it in a browser.\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/59153990\/bb8d4f18-27a4-4a07-8d7c-4a31f8bb2f59)"],"labels":["Performance"]},{"title":"[Doc]: Improve new user guide sections","body":"### Documentation Link\r\n\r\nhttps:\/\/matplotlib.org\/devdocs\/users\/explain\/index.html\r\n\r\n### Problem\r\n\r\nhttps:\/\/matplotlib.org\/devdocs\/users\/explain\/index.html has seen significant new material added.  In particular \r\n\r\n- https:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/axes_intro.html\r\n- https:\/\/matplotlib.org\/devdocs\/users\/explain\/artists\/artist_intro.html\r\n- the new material in https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26279 (not on devdocs as of this Issue).\r\n\r\nI'd expand this list to the quick-start guide:\r\n\r\n- https:\/\/matplotlib.org\/devdocs\/users\/explain\/quick_start.html\r\n\r\nwhich I think could use some revision in light of where it now stands in the docs (some things could be removed and reference other parts of the new User Guide)\r\n\r\nI wrote these, and they had minimal input from others.  I think they are necessary as placeholders and not embarrassing in their content.  However, they could benefit from other input now that they are in place, and follow-on PRs (or issues if they are focused) are most welcome.  Indeed I'll try and stay out of reviewing any changes, unless I really feel things are going off the rails.  If we are talking further reorganization, I would like to be part of the conversation, and I'd encourage discussion before anyone puts a lot of work into that.  \r\n\r\nI don't think improving these is urgent, and can happen in point releases.\r\n\r\n\r\nEDIT: Another important suggestions is more cross linking to the Examples.  ","comments":["I will further comment that some of the criticism of the new material is that it is too curt, and has hard-to-follow loop constructs etc.  Agreed! and some of this was just expediency of adapting an existing Example.  \r\n\r\nHowever, I think there is a discussion to be had about the level that the docs are pitched at, and what level of assumed knowledge each page can make.  We should map that out, but I strongly feel every page should not be re-teaching every concept, or the docs will be completely unreadable. \r\n\r\nI also think there should be some consensus about what we think the right mental model for Matplotlib is.  People who love the Grammar of Graphics declarative paradigms are never going to be comfortable with Matplotlib's imperative paradigm.  Outside of the one page where we discuss this, I don't think we should _ever_ discuss it.  We should stick to our lane and the mental model that has served Matlab and Matplotlib well for many decades now. \r\n\r\nMaybe for a special dev call.","Top line is my issues are with content more than organization. \r\n\r\n> I wrote these, and they had minimal input from others. \r\n\r\nEvery time I left a detailed review, I was told that it was out of scope and I should implement it myself. I don't think #26279 should have been merged b\/c I think it makes the documentation problem worse and not better because now we have the same content framed the same way in two places rather than scoping for different audiences.  I link new users to the docs all the time and **https:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/axes_scales.html#axis-scales** isn't an improvement to linking https:\/\/matplotlib.org\/stable\/gallery\/ticks\/index.html#ticks \r\n\r\n\r\n> We should map that out, but I strongly feel every page should not be re-teaching every concept, or the docs will be completely unreadable.\r\n\r\nThe very consistent feedback we've gotten on our docs is that they're not very helpful to folks who don't already know how to use the library, so I think most of the time we're not teaching the concepts in the first place. \r\n\r\nReiterating https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26279#issuecomment-1634675103, I don't think demos are teaching. I absolutely agree that we should have a one source of truth teaching doc, but a teaching concepts of matplotlib doc steps through and explains what's going on: \r\n```\r\nWe create 3 plots to illustrate the three ways we support setting ticks. \r\nIn this example we use the y axis, but we have equivalent methods for the x and z axis. \r\n\r\n* ax1: automatic \r\n* ax2: manually using `set_yticks` and `set_yticklabels`\r\n* ax3: using `Locator` and `Formatter` objects:\r\n\r\nWe plot the same diagonal line going from 0 to 100 on all three::\r\n  \r\n fig, (ax1, ax2, ax3) = plt.subplots(3) \r\n for ax, label in [(ax1, \"Automatic\"), (ax2, \"Manual\"), (ax3, \"Object Oriented\")]:\r\n   ax.plot( np.arange(100), np.arange)\r\n   ax.set_title(f'{label} ticks')\r\n\r\nOn *ax2* we will manually set ticks at every 100\/3 mark using the `set_ticks` method::\r\n\r\n ax2.set_yticks(np.arange(0, 100.1, 100\/3))\r\n\r\nThen we manually set the labels for these ticks using the `set_ticklabels` method::\r\n        \r\n ax2.set_yticks(np.arange(0, 100.1, 100\/30), minor=True)\r\n\r\nOn *ax3* we use `Locator` and `Formatter` objects to customize where ticks are placed. \r\nWe have many, see (ref or doc) for details, here we show one to illustrate how they are generally used. \r\n\r\nOn *ax3* we use the `MultipleLocator` to place a tick at every 100\/3 mark on the major axis::\r\n\r\n ax3.yaxis.set_major_locator(ticker.MultipleLocator(100\/3))\r\n\r\nOn *ax3* we use a string formatter to append the unit to every tick mark::\r\n\r\n ax3.yaxis.set_major_formatter('{x} steps')\r\n```\r\n\r\nwhile demoing formatters looks like:\r\n\r\nhttps:\/\/matplotlib.org\/stable\/gallery\/ticks\/index.html#ticks\r\n\r\nAnd we need both. We get a ton of requests for the step through everything please docs, but they want it in the gallery where that's completely unmaintainable. Where it would be appropriate though would be the user guide, where we could then link out to as needed. \r\n\r\n\r\n",">  also think there should be some consensus about what we think the right mental model for Matplotlib is. People who love the Grammar of Graphics declarative paradigms are never going to be comfortable with Matplotlib's imperative paradigm. Outside of the one page where we discuss this, I don't think we should ever discuss it. We should stick to our lane and the mental model that has served Matlab and Matplotlib well for many decades now.\r\n\r\nI think this is a strawman, 'cause yes Matplotlib isn't Grammer of Graphics or Matlab and both are the wrong mental model- GoG 'cause declarative, Matlab b\/c we don't actually want folks using the pyplot API.  But, the docs make nods to the audience coming from Matlab so that they're oriented to where Matplotlib diverges and what Matplotlib calls things. GoG uses the conventions common in the visualization community, and so there's a generation of folks who are learning visualization that way. I think it serves us well to be inclusive of that audience by saying \"hey, this is what we call thing x that you may know as y\"","> I think it makes the documentation problem worse and not better because now we have the same content framed the same way in two places rather than scoping for different audiences. I link new users to the docs all the time and **https:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/axes_scales.html#axis-scales** isn't an improvement to linking https:\/\/matplotlib.org\/stable\/gallery\/ticks\/index.html#ticks\r\n\r\nIf you meant https:\/\/matplotlib.org\/devdocs\/gallery\/scales\/index.html (rather than ticks), then agreed that the material is very similar.  \r\n\r\nThe important improvement in https:\/\/github.com\/matplotlib\/matplotlib\/pull\/26279, that I feel merit it being merged, is that now \"scales\" appears in the TOC of the User Guide with the rest of the information about Axes, at https:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/index.html.  It would be a strange user guide without this information.  \r\n\r\nAs noted here, the quality of the new material, or how it is pitched, or how much it overlaps with the existing examples, can all be reworked.  Please consider what was merged a placeholder.  ","The docs are unequivocally better now with #26279 merged (which I obviously think because I merged it).   Our convention on docs PRs is \"better than it was\" and we do not do copy-editing via PR because that is soul crushing.  The response to anyone who says \"you need to re-write this section because I do not like the style\" (rather than \"that text is factually wrong\") is going to be a suggestion that they follow up with another PR.\r\n\r\nPlease to not confuse \"not how I would write that\" with \"wrong\".","> \"you need to re-write this section because I do not like the style\"\r\n\r\nIt's not style, it's content - I get told all the time to rewrite my doc PRs b\/c a reviewer feels what I wrote isn't appropriate for that section of the docs. \r\n\r\nEta: to elaborate, we tell contributors all the time that something would be more appropriate as an example or as a section in the tutorials or it belongs in API docs b\/c these sections are written differently and have different criteria. We haven't formally codified that yet for user guide but \"I think this content isn't appropriate for the user guide b\/c it doesn't teach (in a way that's different than how we already teach this elsewhere)\" is equivalent to  rejecting code because the reviewer believes that the way it's coded doesn't solve the problem - which is what we do do all the time.","> Please consider what was merged a placeholder.\r\n\r\nI really appreciate you saying this, but my concern is that because the documentation is there, folks, especially newer contributors, will feel that it's not their place to rewrite or rework it. Even I kinda feel I'm being disrespectful, and I'm coming at it from being the community manager, having taught Matplotlib and visualization for years to a really wide variety of folks, and mentoring the GSOD. \r\n\r\nI think one of the overarching issues with the docs is that \"does it make it better\" is usually true on each individual page where the information is added, but that new material tends to be added without evaluating how it fits into the overall docs, and what we end up with is doc sprawl. I think defining some content guidelines for each section of the docs-Gallery, Tutorials, User Guide- could really help with navigability and also possibly help our documentation PR process by providing guidance on what content we think belongs in each section. @esibinga is doing this work for the gallery GSOD, and I want to propose content guidelines here for the new contributors guide:\r\n\r\n**Purpose** Teach folks how to use Matplotlib\r\nFairly consistent feedback we get about the docs is that folks who already know how to use Matplotlib generally like the docs and find them really useful, while folks who do not know how to use the library don't feel like they can learn how to from the docs. \r\n\r\n**Scope** Matplotlib specific concepts\/constructions\r\nIn explaining Matplotlib specific constructions, we should weave in what they're called in the visualization and stats communities so that contributors who do not know Matplotlib can make the connections\/get that grounding. I hear the concern that we don't want to be writing a visualization or statistical methods textbook and I agree - which concepts we introduce should be driven by the Matplotlib object we're explaining. \r\n\r\n**Approach**: scaffolded isolation of concept\r\nGenerally the tutorials that got moved into user guide like [annotation](https:\/\/matplotlib.org\/devdocs\/users\/explain\/text\/annotations.html) and [custom colormaps](https:\/\/matplotlib.org\/devdocs\/users\/explain\/colors\/colorbar_only.html) follow a similar format of breaking up the material into very small chunks, generally one keyword at a time. This isolation of each concept is intended to make it easier for folks to learn how each works, and then how to combine these parameters together to generate more complex visuals. ","I largely agree with the above from a tactical point of view.\r\n\r\n> Fairly consistent feedback we get about the docs\r\n\r\nHow are we gathering this feedback?  \r\n\r\n> while folks who do not know how to use the library don't feel like they can learn how to from the docs.\r\n\r\nI strongly feel the biggest problem with the docs was the lack of an actual Users Guide.  The collection of examples, tutorials, and the few things that are in the current \"explain\" part of the \"user guide\" do nothing to guide new users.  (eg https:\/\/matplotlib.org\/3.7.2\/users\/explain\/index.html is a mystifying hodgepodge).  The best we had were the tutorials, going from Basic, Intermediate, and Advanced, but even those were lacking context and a narrative arc. There was the Quick Start Guide, but that was all we had to orient people. \r\n\r\nThe attempt with the reorganization PRs has been to reorganize much of the material in the tutorials into a narrative arc that we can actually call a Users Guide (compare https:\/\/matplotlib.org\/devdocs\/users\/explain\/index.html to the above).   The goal of these has been to start from major topics and focus on details either deeper in the intros or in subsidiary pages.  I think the things 95% of the people do 95% of the time should be covered relatively clearly; I think some of the more advanced things can be covered in subsidiary pages or in the API docs. There should be an attempt for this Guide to be as comprehensive as possible, but it need not cover every option of every feature in the library.  \r\n\r\nI look forward to seeing how the new User Guide evolves over the next few months and years.  I think it will be more helpful to our users than what we have now, and it can continue to evolve as we get feedback.  \r\n\r\n\r\n\r\n\r\n","> How are we gathering this feedback\n\nThe most recent formal method was the user survey we did for the last GSoD, which @paniterka took another look at for this year's GSoD. I would like it if we could run a new one after the user guide  settles to see if changes were successful. \n\n>I strongly feel the biggest problem with the docs was the lack of an actual Users Guide\n\nI don't disagree exactly -  one of my motivations for the plot types gallery and the cheat sheets was for more entry level heavily curated overview type content. I just would have preferred tackling the user guide after we get some consensus on what belongs where and agreeing on content guidelines.\n\n\n>  even those were lacking context and a narrative arc\n\nSo I think fundementally my issue is that I'm not sure we get context and narrative arc just because we have a cleaner outline via TOC. Like if it was just that, the ToC could have been a series of links out to the respective section of the gallery. I worry that going between parts of the guide that are inconsistent in how they present information could disorient the reader once they get to a point where they don't understand the information - I think we want confused readers to suggest ways we can improve our docs, not think they're incapable of using the library.  (ETA: basically I worry they'll blameselves for issues arising due to the docs being incomplete or unclear b\/c it's harder to see those issues in the docs when they're a mix of approaches\/not cohesive) \n\n\n> and it can continue to evolve as we get feedback.\n\nMy worry is that w\/o agreed upon content guidelines, this evolution will land us right back in this disorganization. \n","> My worry is that w\/o agreed upon content guidelines, this evolution will land us right back in this disorganization.\r\n\r\nSure, maybe.  On the other hand, we have been _talking_ about doc overhauls for _years_.  I think its better to start with something imperfect rather than suffer [analysis paralysis](https:\/\/en.wikipedia.org\/wiki\/Analysis_paralysis).\r\n\r\nWe have made concrete steps to move the docs forward and improve the organization.  A couple years ago we could not move pages because links would break, and we had half the docs in tutorials and the other half in rst, disjoint sections of the docs with no way to merge the two.  \r\n\r\nNow, however, we have made sphinx-redirect (#19456), and we made the changes to sphinx gallery (https:\/\/github.com\/sphinx-gallery\/sphinx-gallery\/pull\/1071) to remove those restrictions. Now we have the tools to make a re-org possible, and I have made a first cut at a re-organization using those tools.  \r\n\r\n> So I think fundementally my issue is that I'm not sure we get context and narrative arc just because we have a cleaner outline via TOC.\r\n\r\nNo, we definitely don't, but it's a first step.  This re-org has also added concrete new introductory material to fill in gaps and they attempt to add narrative arc:\r\n\r\n- https:\/\/matplotlib.org\/devdocs\/users\/explain\/figure\/figure_intro.html\r\n- https:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/axes_intro.html\r\n   - https:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/axes_scales.html\r\n   - https:\/\/matplotlib.org\/devdocs\/users\/explain\/axes\/axes_ticks.html\r\n- https:\/\/matplotlib.org\/devdocs\/users\/explain\/artists\/artist_intro.html\r\n\r\nTo me, the concrete steps forward are to continue improving these pages, making the old pages that were moved more consistent, and adding new pages into the structure.  \r\n\r\nI don't think the steps taken so far are inconsistent with further writing \"agreed upon content guidelines\", having a doc summit, hiring an information architect, or any other aspirational way forward.  I don't think waiting for those things to happen should block further improvements.  \r\n","> To me, the concrete steps forward are to continue improving these pages, making the old pages that were moved more consistent, and adding new pages into the structure.\r\n\r\nHow do we make things more consistent without agreeing on what consistent means? There are like 4 different approaches going on in those docs. \r\n\r\n>  \"agreed upon content guidelines\", having a doc summit, hiring an information architect, or any other aspirational way forward\r\n\r\nThese are lumping multiple very disparate things together.  GSoD was a first pass at information architecture and I've been very clear about that and it wraps up in November. I'm not particularly interested in a doc summit either b\/c the agreed upon next step at the last one was that our issue wasn't lack of content, it was organization and we should hire an architect and that went nowhere.\r\n\r\nI think we absolutely need content guidelines. In https:\/\/github.com\/matplotlib\/matplotlib\/issues\/26196#issuecomment-1609934010 you also said that one of the major issues with the doc review process is that everyone has their own idea of what the docs should read like. Content guidelines provide guidelines on what's fair game for a review and which reviews need to be addressed and they even the playing field for newer contributors by letting them know what we want rather then them having to guess the style.  I can write the `user guide` content guidelines as policy PR that I put into our \"writing docs\" section and I'm very willing to see that through, but we need consensus that we'd actually follow it and its remotely enforceable.\r\n\r\nAlso frankly, the current system incentivizes me at least to just skip the review and go straight to putting in the competing rewrite PR and like I hate how not collaborative that is. \r\n\r\n> I think its better to start with something imperfect rather than suffer [analysis paralysis](https:\/\/en.wikipedia.org\/wiki\/Analysis_paralysis).\r\n\r\nETA: I'm not against starting w\/ something imperfect, I'm against starting something imperfect w\/o any real agreement on how it takes shape. This could have been discussed in a meeting, gotten consensus, and then implemented. "],"labels":["Documentation"]},{"title":"[Bug]: UnboundLocalError: local variable 'interval' referenced before assignment","body":"### Bug summary\n\nThe code below ends up with an exception.\n\n### Code for reproduction\n\n```python\nfrom datetime import datetime, timedelta\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.dates as mdates\r\n\r\nfig, ax = plt.subplots()\r\nt0 = datetime.now()\r\ndt = timedelta(seconds=1)\r\nax.plot([t0, t0+dt, t0+dt*2], [1, 2, 3])\r\n\r\nlocator = mdates.AutoDateLocator()\r\nlocator.intervald[mdates.MICROSECONDLY] = []\r\nax.xaxis.set_major_locator(locator)\r\nax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M:%S'))\r\n\r\nplt.show()\n```\n\n\n### Actual outcome\n\nBelow is the exception message with a stack trace.\r\n\r\n> Traceback (most recent call last):\r\n  File \"\/home\/tnakamoto\/.local\/lib\/python3.10\/site-packages\/matplotlib\/backends\/backend_qt.py\", line 468, in _draw_idle\r\n    self.draw()\r\n  File \"\/home\/tnakamoto\/.local\/lib\/python3.10\/site-packages\/matplotlib\/backends\/backend_agg.py\", line 400, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"\/home\/tnakamoto\/.local\/lib\/python3.10\/site-packages\/matplotlib\/artist.py\", line 95, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"\/home\/tnakamoto\/.local\/lib\/python3.10\/site-packages\/matplotlib\/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"\/home\/tnakamoto\/.local\/lib\/python3.10\/site-packages\/matplotlib\/figure.py\", line 3175, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"\/home\/tnakamoto\/.local\/lib\/python3.10\/site-packages\/matplotlib\/image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"\/home\/tnakamoto\/.local\/lib\/python3.10\/site-packages\/matplotlib\/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"\/home\/tnakamoto\/.local\/lib\/python3.10\/site-packages\/matplotlib\/axes\/_base.py\", line 3064, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"\/home\/tnakamoto\/.local\/lib\/python3.10\/site-packages\/matplotlib\/image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"\/home\/tnakamoto\/.local\/lib\/python3.10\/site-packages\/matplotlib\/artist.py\", line 72, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"\/home\/tnakamoto\/.local\/lib\/python3.10\/site-packages\/matplotlib\/axis.py\", line 1376, in draw\r\n    ticks_to_draw = self._update_ticks()\r\n  File \"\/home\/tnakamoto\/.local\/lib\/python3.10\/site-packages\/matplotlib\/axis.py\", line 1262, in _update_ticks\r\n    major_locs = self.get_majorticklocs()\r\n  File \"\/home\/tnakamoto\/.local\/lib\/python3.10\/site-packages\/matplotlib\/axis.py\", line 1484, in get_majorticklocs\r\n    return self.major.locator()\r\n  File \"\/home\/tnakamoto\/.local\/lib\/python3.10\/site-packages\/matplotlib\/dates.py\", line 1378, in __call__\r\n    locator = self.get_locator(dmin, dmax)\r\n  File \"\/home\/tnakamoto\/.local\/lib\/python3.10\/site-packages\/matplotlib\/dates.py\", line 1460, in get_locator\r\n    f\"intervald dictionary. Defaulting to {interval}.\")\r\nUnboundLocalError: local variable 'interval' referenced before assignment\n\n### Expected outcome\n\nMatplotlib should not raise this exception, but show an appropriate warning instead.\n\n### Additional information\n\n_No response_\n\n### Operating system\n\nUbuntu 22.04 on WSL2\n\n### Matplotlib Version\n\n3.7.2\n\n### Matplotlib Backend\n\nQtAgg\n\n### Python version\n\n3.10.6\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip","comments":["> ```python\r\n> locator.intervald[mdates.MICROSECONDLY] = []\r\n> ```\r\n\r\nHmm, it's not clear to me whether that is a valid input to `intervald`; the docs do not specifically spell out the requirements.\r\n\r\nWhat is your expected behaviour when passing an empty list?","I followed [the documentation about AutoDateLocator](https:\/\/matplotlib.org\/stable\/api\/dates_api.html#matplotlib.dates.AutoDateLocator). It clearly says that we cannot add or delete entries in ``interval``, but it does not prevent us from settings an empty list to each entry. Even if that is not valid, the exception should be raised when an empty list is given, not when matplotlib actually draws the plot.\r\n\r\nThe intent of settings an empty list to ``interval[MICROSECONDLY]`` is to prevent matplotlib from making ticks on a place where the fractional second is not zero. Otherwise, matplotlib could make a tick at 14:08:52.624, but I don't want that. I would like to have ticks at 14:08:52.000, 14:09:53.000, ....","To get what you want I think \r\n\r\n```python\r\nlocator.intervald[mdates.MICROSECONDLY] = [1_000_000]\r\n```\r\n\r\nis the fix (it says you can only put ticks every 1M microseconds (which is on the seconds).\r\n\r\nI think I see an easy fix to skip a frequency all together (by accepting an empty list).","@tacaswell Thank you for the workaround. That works well in my case.\r\n","```diff\r\ndiff --git a\/lib\/matplotlib\/dates.py b\/lib\/matplotlib\/dates.py\r\nindex 381dd810a5..a9d6c4c2df 100644\r\n--- a\/lib\/matplotlib\/dates.py\r\n+++ b\/lib\/matplotlib\/dates.py\r\n@@ -1443,6 +1443,12 @@ class AutoDateLocator(DateLocator):\r\n                 byranges[i] = None\r\n                 continue\r\n\r\n+            # if there are no candidate intervals at this level, skip it\r\n+            # and move on.\r\n+            if len(self.intervald[freq]) == 0:\r\n+                byranges[i] = None\r\n+                continue\r\n+\r\n             # Find the first available interval that doesn't give too many\r\n             # ticks\r\n             for interval in self.intervald[freq]:\r\n```\r\n\r\nbut in this case seems to fall back to the `Microsceond` locator with an internal of 1 which is a worst-case scenario here....\r\n\r\nIt is not yet clear to me what the right behavior here is.  On one hand, being able to drop out a level makes sense, but in this particular case it the algorithm did not like any of the other values so fell back to a _very_ bad default. ","Tagging as 3.9 as I think there maybe some behavior change we want here.  ","Hi @tacaswell , is there anyone working on this issue ?","@raghav24agarwal unless there is a PR linked to the issue, you can feel free to work on it. If you want to check your ideas before spending time on a full solution, feel free to also comment here on the issue with a proposed way forward. Cheers!"],"labels":["topic: date handling","topic: ticks axis labels","status: has patch"]},{"title":"[ENH]: Backend Context Manager","body":"### Problem\r\n\r\nInstead of [`switch_backend`](https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.pyplot.switch_backend.html#matplotlib.pyplot.switch_backend), sometimes it might be more appropriate to only use a backend within a context. For example: [temporarily disable figures from showing](https:\/\/stackoverflow.com\/questions\/15713279\/calling-pylab-savefig-without-display-in-ipython).\r\n\r\nContext managers are the right tool, to ensure `switch_backend` is called again when exiting the context, even if an exception occured.\r\n\r\n### Proposed solution\r\n\r\nAdd a context manager for backends analogous to [`matplotlib.style.context`](https:\/\/matplotlib.org\/stable\/api\/style_api.html#matplotlib.style.context).","comments":["I am interested in solving this issue.","I'm unclear what a context manager would actually solve:\r\n\r\n- Once any of the interactive backends has been used (decision point is currently the creation of the first figure), one cannot switch to another interactive backend.\r\n- One can always use non-interactive backends implicitly through a `plt.savefig()` command.\r\n\r\nWhat is an example use case that the context manager would make easier?","@timhoffm When I opened this issue, I was writing a library functions that creates multi-page pdf from some timeseries data using `matplotlib`. There were some issues when calling this function from within a jupyter-notebook, which I solved by wrapping the function into a context-manager that switches the backend.\r\n\r\n```python\r\nclass plot_backend(AbstractContextManager):\r\n    \"\"\"Context manager for switching matplotlib backend.\"\"\"\r\n\r\n    backend: str\r\n    current_backend: str\r\n\r\n    def __init__(self, backend: str) -> None:\r\n        self.backend = backend\r\n        self.current_backend = plt.get_backend()\r\n        available_backends = plt.rcsetup.all_backends\r\n        assert backend in available_backends\r\n\r\n    def __enter__(self):\r\n        plt.switch_backend(self.backend)\r\n\r\n    def __exit__(self, *args):\r\n        plt.switch_backend(self.current_backend)\r\n```\r\n\r\nThen wrapping with  `with plot_backend(\"agg\")` solved the issues.","> There were some issues when calling this function from within a jupyter-notebook\r\n\r\nWhat exactly? The only issue that I could imagine is that the figure is not closed in your function and thus ipython will render it.","@timhoffm If I remember correctly, there were 2 issues: (1) figures showing despite calling `plt.close()` and (2) \"too many open figures\" when using multiprocessing to generate the pages of the pdf in parallel. Both of these disappeared when using a non-GUI backends.","Since matplotlib 3.1 you can create standalone Figures and save them to files. This is likely the better approach for creating isolated plots in a function, compared to fighting the pyplot state.\r\n\r\nSee for example https:\/\/matplotlib.org\/devdocs\/gallery\/user_interfaces\/web_application_server_sgskip.html"],"labels":["New feature","status: needs comment\/discussion"]},{"title":"[Doc]: Confusing directions in prerelease banner","body":"### Documentation Link\n\n_No response_\n\n### Problem\n\nThe devdocs warning banner has been restored recently.\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/53cd0f85-01ee-4d4e-a5c3-ac3cfb1d7283)\r\n\r\ne.g. https:\/\/output.circle-artifacts.com\/output\/job\/daa43345-555b-45d6-b6eb-6bfaa9f85dbb\/artifacts\/0\/doc\/build\/html\/index.html\r\n\r\nI find \r\n> Try searching for the released version of this page instead?\r\n\r\nquite confusing.\r\n\r\nWhile the related page is likely the first hit, the search page is quite busy and it's hard to see where one wants to go:\r\n\r\n![image](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/2836374\/997e70e2-dab6-4d9f-8957-579d3cb28999)\r\n\r\n\r\n\n\n### Suggested improvement\n\nInstead I suggest that the link should be named \"Switch to the released version of this page\" and have the same effect as selecting \"stable\" from the version dropdown.","comments":["I saw this too and had the same thoughts.  That seems like it should be possible. OTOH it will 404 if the page doesn't exist in the released docs. I'm not sure if the link is needed or not. ",">  OTOH it will 404 if the page doesn't exist in the released docs. I'm not sure if the link is needed or not.\r\n\r\nI can live without the link, but a direct link is ok as well.\r\n\r\n404s should be quite rare. They only uccur for pages that we created or moved in the devdocs since the latest release. It's only the development deltas and they fix themselves with the next release. I even suppose that for the 404 cases, the current search mechanism will often not provide an adequate result. The search is by section title, and if we rename a page (e.g. \"Development\" -> \"Contributing\") it's likely that the name is not similar anymore - even the other way round: we may keep the filename and thus url for link compatibility and just adapt the section title.","It's probably easy in the template to replace \"devdocs\" with \"stable\".  The circle outputs are probably harder and maybe don't matter as much as the devdocs page.  \r\n\r\nI'm confused why the devdocs don't have the banner now.  Maybe they haven't been built for a while....\r\n\r\nhttps:\/\/matplotlib.org\/devdocs\/index.html","Circle outputs are largely irrelevant. People will only get there through github\/circle and know that they are in a dev context.\r\n\r\nAFAIK one of the main reasons for the banner was that some of these pages showed up in google. I think that has been solved. So the question is, who is getting to devdocs unintendedly at all?\r\n\r\nAnyway, I don't want to spend too much effort here. If somebody can make a link to stable, that's good. Otherwise I'll set up a PR to remove the link part completely."],"labels":["Documentation"]},{"title":"[MNT]: test failures due to matplotlibrc setting","body":"### Summary\n\nI, perhaps unwisely, put this in my matplotlibrc file\r\n\r\n`toolbar      : toolmanager`\r\n\r\nWhen running matplotlib tests I then saw a lot of test failures from `test_sphinxext.py`, `test_backend_tk.py` and `test_rcparams.py`\r\n\r\n because of this warning\r\n\r\n```\r\nconda_envs\/mpl-dev\/lib\/python3.11\/importlib\/__init__.py:126: UserWarning: Treat the new Tool classes introduced in v1.5 as experimental for now; the API and rcParam may change in future versions.\r\n```\n\n### Proposed fix\n\nI would have expected all matplotlibrc settings to be ignored when running the tests.","comments":["Where is the matplotlibrc file you used? There are a number of locations. Detection is done in https:\/\/github.com\/matplotlib\/matplotlib\/blob\/f08ff369c29e4d82afab483347c25fded28b3be6\/lib\/matplotlib\/__init__.py#L588-L630\r\n","I am on Linux, and the file is at `$HOME\/.config\/matplotlib\/matplotlibrc`.","The issue is that we use the style module to reset this and the style module explicitly ignores this key."],"labels":["Maintenance"]},{"title":"DOC: Added tabular example","body":"## PR summary\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [ ] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [x] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [x] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-docstrings) guidelines\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please\r\nconsider the following points:\r\n\r\n- A development guide is available at https:\/\/matplotlib.org\/devdocs\/devel\/index.html.\r\n\r\n- Help with git and github is available at https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html\r\n\r\n- Create a separate branch for your changes and open the PR from this branch. Please avoid working on `main`.\r\n\r\n- The PR title should summarize the changes, for example \"Raise ValueError on\r\n  non-numeric input to set_xlim\".  Avoid non-descriptive titles such as\r\n  \"Addresses issue #8576\".\r\n\r\n- The summary should provide at least 1-2 sentences describing the pull request\r\n  in detail (Why is this change required?  What problem does it solve?) and\r\n  link to any relevant issues.\r\n\r\n- If you are contributing fixes to docstrings, please pay attention to\r\n  https:\/\/matplotlib.org\/stable\/devel\/documenting_mpl.html#formatting-conventions.  In particular,\r\n  note the difference between using single backquotes, double backquotes, and\r\n  asterisks in the markup.\r\n\r\nWe understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.\r\n-->\r\n","comments":["Hi @Rock-Shell - can you clarify if this PR solves an outstanding issue? If not, can you explain the motivation for this? It makes it easier for maintainers to review and evaluate your PR. Thanks!","Hi @melissawm . The PR  is related to the issue #10079. I have added the tabular legend example to the legend_demo file. "],"labels":["Documentation: examples"]},{"title":"Support for vector hrule rendering","body":"## PR summary\r\nFixes #23763 \r\n\r\nThe current generated images are:\r\n\r\n**[PNG]**\r\n![Hrule_at_bottom](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/b1ce9a6d-8b41-4a57-a649-f5373a64137b)\r\n\r\n**[SVG]**\r\n![Hrule_at_bottom](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/cf24be92-3082-4eca-a760-5217938ca72a)\r\n\r\n## PR checklist\r\n<!-- Please mark any checkboxes that do not apply to this PR as [N\/A].-->\r\n\r\n- [x] \"closes #0000\" is in the body of the PR description to [link the related issue](https:\/\/docs.github.com\/en\/issues\/tracking-your-work-with-issues\/linking-a-pull-request-to-an-issue)\r\n- [ ] new and changed code is [tested](https:\/\/matplotlib.org\/devdocs\/devel\/testing.html)\r\n- [ ] *Plotting related* features are demonstrated in an [example](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-examples-and-tutorials)\r\n- [ ] *New Features* and *API Changes* are noted with a [directive and release note](https:\/\/matplotlib.org\/devdocs\/devel\/coding_guide.html#new-features-and-api-changes)\r\n- [ ] Documentation complies with [general](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-rest-pages) and [docstring](https:\/\/matplotlib.org\/devdocs\/devel\/documenting_mpl.html#writing-docstrings) guidelines\r\n\r\n<!--\r\nThank you so much for your PR!  To help us review your contribution, please\r\nconsider the following points:\r\n\r\n- A development guide is available at https:\/\/matplotlib.org\/devdocs\/devel\/index.html.\r\n\r\n- Help with git and github is available at https:\/\/matplotlib.org\/devdocs\/devel\/development_workflow.html\r\n\r\n- Create a separate branch for your changes and open the PR from this branch. Please avoid working on `main`.\r\n\r\n- The PR title should summarize the changes, for example \"Raise ValueError on\r\n  non-numeric input to set_xlim\".  Avoid non-descriptive titles such as\r\n  \"Addresses issue #8576\".\r\n\r\n- The summary should provide at least 1-2 sentences describing the pull request\r\n  in detail (Why is this change required?  What problem does it solve?) and\r\n  link to any relevant issues.\r\n\r\n- If you are contributing fixes to docstrings, please pay attention to\r\n  https:\/\/matplotlib.org\/stable\/devel\/documenting_mpl.html#formatting-conventions.  In particular,\r\n  note the difference between using single backquotes, double backquotes, and\r\n  asterisks in the markup.\r\n\r\nWe understand that PRs can sometimes be overwhelming, especially as the\r\nreviews start coming in.  Please let us know if the reviews are unclear or\r\nthe recommended next step seems overly demanding, if you would like help in\r\naddressing a reviewer's comments, or if you have been waiting too long to hear\r\nback on your PR.\r\n-->\r\n","comments":["After some discussion in our GSoC meeting, this is probably the reverse of the way to fix the issue. It appears that the raster output is shifted up when it shouldn't be (i.e., if it's a regular fraction, then all text is on the baseline, but with the test case from #23763, _all_ text is moved up (disregarding the missing shift for the patched fraction.)) The vector output remains on the baseline for both versions.","Possibly, the raster output needs the correct width, height, and depth to view a similar output to the vector image. The current dimensions for vector are given as:\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/21e9e388d59dc8667e360bb54a8a34784a3ea18b\/lib\/matplotlib\/_mathtext.py#L100-L101\r\n\r\nApplying the same calculations to the raster gives the following output, which is still shifted upwards and cuts off the end of the denominator text.\r\nHrule.png            |  Hrule.svg\r\n:-------------------------:|:-------------------------:\r\n![Hrule_at_bottom](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/32422530-8a6a-461d-8755-cc704dedcfe8) | ![Hrule_at_bottom](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/bd375e59-b2d3-4cef-a864-d23785f41c24)\r\n\r\nA few pointers from the above images:\r\n\r\n1. The fraction appears to be askew as well compared to the `usetex=True` version and could be related to [issue #18389](https:\/\/github.com\/matplotlib\/matplotlib\/issues\/18389)\r\n2. The `thickness` of the `Hrule` seems to be different than the TeX version.\r\n3. The fraction gets misaligned from the center of the `=` sign.\r\n\r\nThe raster output being cut off might be caused due to the `shifted` calculation:\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/21e9e388d59dc8667e360bb54a8a34784a3ea18b\/lib\/matplotlib\/_mathtext.py#L124-L131\r\n\r\nSo updating `for ox, oy, info in shifted.glyphs:` to fetch `ox`, `oy` from `self.glyphs` kind of fixes the issue here.\r\n\r\nHrule.png            |  Hrule.svg\r\n:-------------------------:|:-------------------------:\r\n![Hrule_at_bottom](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/d3e651aa-b798-471b-a79d-c1850713c6c6) | ![Hrule_at_bottom](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/8d3fa9fe-38c6-4b9c-be4d-630b5d54466d)\r\n\r\n\r\nI also tinkered around with the `_genfrac` function to check whether removing additional spacing improves the alignment of the images when rendering fractions.\r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/21e9e388d59dc8667e360bb54a8a34784a3ea18b\/lib\/matplotlib\/_mathtext.py#L2459\r\nwhich does improve the fraction spacing a bit, but the output shift between `png` and `svg` seems to stay put.\r\n\r\nHrule.png            |  Hrule.svg\r\n:-------------------------:|:-------------------------:\r\n![Hrule_at_bottom](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/016a9a67-8247-4e6d-87c4-b281579d2cc3) |![Hrule_at_bottom](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/ff84dd0e-a8fe-4ed4-97ad-8b605ecb273f)\r\n\r\n\r\n\r\n\r\n","@anntzer @oscargus Any insights on how to proceed with this?","Additionally, with the above edits the #23763 example of `hrule rendering`, the `Hrule` seems to disappear completely in the raster output.\r\n\r\n\r\n\r\nHrule.png             |  Hrule.svg\r\n:-------------------------:|:-------------------------:\r\n![Hrule_at_bottom](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/d0edc7a7-d704-4048-b20c-c10272810fbe) |  ![Hrule_at_bottom](https:\/\/github.com\/matplotlib\/matplotlib\/assets\/35831931\/714a9f71-ab39-4613-94df-869c7eda4751)","I'll have limited access to a dev machine for a few days, but can look into it after.","I haven't looked in depth into what's happening here, but 1) skipping the int-casting (via np.ceil) for vector output would seem normal, but can (likely?) cause shifts wrt. raster output; 2) perhaps https:\/\/github.com\/matplotlib\/matplotlib\/pull\/15339#issuecomment-534900408 and (the last part of) https:\/\/github.com\/matplotlib\/matplotlib\/pull\/15339#issuecomment-722553862 may be relevant?"],"labels":["status: needs rebase","topic: text\/mathtext"]}]