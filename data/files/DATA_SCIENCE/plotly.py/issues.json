[{"title":"Inconsistent row and col parameters used to add vline to faceted subplots","body":"I'm trying to have a vertical line added to faceted plots, with the line being at a different position for every subplot. Here's a MRE:\r\n```py\r\nimport plotly.express as px\r\nimport pandas as pd\r\nimport numpy as np\r\nfrom itertools import product\r\n\r\n# Prepare data\r\ncombinations = list(product(range(1, 11), repeat=2))\r\ndf = pd.DataFrame(combinations, columns=['cat', 'x'])\r\ndf['y'] = np.random.randint(1, 100, size=len(df))\r\n\r\n# Figure\r\nfig = px.line(df, x='x', y='y', facet_col='cat', facet_col_wrap=3)\r\n\r\n# Add vlines in a loop\r\ndef generate_lines(n, d):\r\n    tuples_list = []\r\n    a = 1  # Initial value for a\r\n    b = 1  # Initial value for b\r\n    for i in range(1, n+1):\r\n        tuples_list.append((i, a, b))\r\n        if i % d == 0:  # Check if the divider is reached\r\n            a += 1  # Increment a when the divider is reached\r\n            b = 1   # Reset b to 1 when the divider is reached\r\n        else:\r\n            b += 1  # Increment b otherwise\r\n    return tuples_list\r\n\r\nlines = generate_lines(10, 3)\r\nfor i, a, b in lines:\r\n    fig.add_vline(x=i, row=a, col=b, opacity=1, line_width=2, line_dash='dash', line_color='red')\r\n\r\nfig.show()\r\n```\r\n\r\nWhat this code should produce is a vertical line at the value of the `cat` parameter but this is obviously not the case:\r\n\r\n![image](https:\/\/github.com\/plotly\/plotly.py\/assets\/7341811\/c0e3cbb0-7aa0-4c8f-984d-3c7eec8b0e5d)\r\n\r\nIt took me a while to figure out what's actually happening. The issue is that the `row` argument does not start at the top left in the same way as faceting does, but instead starts at the bottom left. As a result, the (1,2) plot with a value of 2 is not shown because that's an empty space (would correspond to `cat=11`) and the 2nd subplot does not receive their vertical line.\r\n\r\nThis leads to inconsistencies and the required code to make the location more complicated because e.g. reducing the number of categories to 9 would mean that (1,1) needs to suddenly get a value of 7. \r\n\r\nThe behavior would be more intuitive if row 1 was the top one instead of the bottom one. If this is not a bug but a feature, it would be good to have this explicitly stated in the documentation \/ API reference.\r\n\r\nUsing plotly 5.13.0","comments":[],"labels":["bug","sev-2"]},{"title":"proposed addition of a df.agg stacked go.bar example","body":"\\### Documentation PR\r\n\r\n- [ X] I've [seen the `doc\/README.md` file](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/doc\/README.md)\r\n- [ X ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch\r\n- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible\r\n- [ X] Every new\/modified example has a descriptive title and motivating sentence or paragraph\r\n- [ X] Every new\/modified example is independently runnable\r\n- [ X?] Every new\/modified example is optimized for short line count\tand focuses on the Plotly\/visualization-related aspects of the example rather than the computation required to produce the data being visualized\r\n- [ X] Meaningful\/relatable datasets are used for all new examples instead of randomly-generated data where possible\r\n- [ N\/A] The random seed is set if using randomly-generated data in new\/modified examples\r\n- [ N\/A ] New\/modified remote datasets are loaded from https:\/\/plotly.github.io\/datasets and added to https:\/\/github.com\/plotly\/datasets\r\n- [ X ] Large computations are avoided in the new\/modified examples in favour of loading remote datasets that represent the output of such computations\r\n\r\nwe want to show the DF agg; I can move some of the other spadework to separate hidden files if needbe\r\n\r\n- [ x ] Imports are `plotly.graph_objects as go` \/ `plotly.express as px` \/ `plotly.io as pio`\r\n- [ ] Data frames are always called `df`\r\n- [ ] `fig = <something>` call is high up in each new\/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)\r\n- [ X ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new\/modified example\r\n- [ Z] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new\/modified example\r\n- [X ] `fig.show()` is at the end of each new\/modified example\r\n- [ X ] `plotly.plot()` and `plotly.iplot()` are not used in any new\/modified example\r\n- [ X ] Hex codes for colors are not used in any new\/modified example in favour of [these nice ones](https:\/\/github.com\/plotly\/plotly.py\/issues\/2192)\r\n\r\n## Code PR\r\n\r\n- [ ] I have read through the [contributing notes](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.\r\n- [ ] I have added tests (if submitting a new feature or correcting a bug) or\r\n  modified existing tests.\r\n- [ ] For a new feature, I have added documentation examples in an existing or\r\n  new tutorial notebook (please see the doc checklist as well).\r\n- [ ] I have added a CHANGELOG entry if fixing\/changing\/adding anything substantial.\r\n- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).\r\n\r\n-->\r\n","comments":["Thank you for sharing this, @rl-utility-man "],"labels":["documentation"]},{"title":"Feat request: ability to select multiple shapes to erase","body":"Currently, individual shapes can be selected and erased through the canvas controls on `dcc.Graph`:\r\n\r\n![canvas-shape-delete-f7580477ecaf331b11b56b59b2fe6454](https:\/\/github.com\/plotly\/plotly.py\/assets\/40243147\/f641f191-94dd-49c5-810e-03c6d0803fe7)\r\n\r\nHowever, it would be useful to be able to click on multiple shapes and erase them collectively. Perhaps using a CTRL-based clicker similar to how some OS file browsers allow a custom selection of files to be selected. ","comments":[],"labels":["feature","p3"]},{"title":"[feature request] Option to add \"select\" mode on any figure (specifically, Heatmap)","body":"It doesn't seem possible to add a \"select\" dragmode to a figure with a `go.Heatmap` object. You can specify the starting `dragmode` as `\"select\"`, in which case you can immediately drag and select. But if I wanted to pan, I can't choose to select afterwards. I cannot add it to the modebar. I would like to be able to do this so I can select a region of interest on my heatmap, and setup a callback to set this region of interest in my code. I don't care about actually selecting the points in the heatmap, just the bounds of the selection box.\r\n\r\nMy workaround to this is to add a `go.Scatter` to my figure:\r\n\r\n```python\r\nlayout =  go.Layout(\r\n        showlegend=False,\r\n        autosize=False,\r\n        xaxis=dict(\r\n            showgrid=False,\r\n            zeroline=False,\r\n            visible=False,\r\n            range=[0, images.shape[2] - 1],\r\n        ),\r\n        yaxis=dict(\r\n            showgrid=False,\r\n            zeroline=False,\r\n            visible=False,\r\n            range=[images.shape[1] - 1, 0],\r\n            scaleanchor=\"x\",\r\n            scaleratio=1,\r\n        ),\r\n        dragmode=\"zoom\",\r\n        modebar=go.layout.Modebar(remove=[\"lasso\"]),\r\n    )\r\n\r\nheat = go.FigureWidget(\r\n    data=[\r\n        go.Scatter(\r\n            x=[0],\r\n            y=[0],\r\n        ),\r\n        go.Heatmap(z=current_image, colorscale=\"Viridis\"),\r\n    ],\r\n    layout=layout,\r\n)\r\n```\r\n\r\nThis works, but is kind of silly...","comments":["Thank you for the suggestion, @swelborn "],"labels":["feature","p4"]},{"title":"[Feature Request] Simple independent axes for facet_row and facet_col","body":"Right now it is possible to have independent axes labels\/ticks for facets using this trick: https:\/\/stackoverflow.com\/questions\/60997189\/how-can-i-make-faceted-plots-in-plotly-have-their-own-individual-yaxes-tick-labe\r\n\r\nHowever, it is kind of hard to remember the 4-line solution by heart.\r\n\r\nIs it possible to add something like `independent_facet_y=True` in the kwargs for plots that support facet? For plots where e.g., facet is age and y axis is height, it's very difficult to interpret data since the smaller values are basically invisible without doing this.\r\n\r\nIdeally setting the flag would display axes ticks for each plot and scale the plots according to each facet's range.\r\n\r\nFor example, seaborn has sharex and sharey arguments that basically do this https:\/\/seaborn.pydata.org\/generated\/seaborn.catplot.html#seaborn-catplot","comments":["Thanks for the suggestion, @EmreAtes "],"labels":["feature","p4"]},{"title":"Can we add customdata to the px.density_heatmap?","body":"Instead of showing z value we wanna show a different value in text_auto from the dataframe by passing a column as customdata.\r\nPlease add this feature!","comments":[],"labels":["feature","p4"]},{"title":"Bug: go.Scatter3d doesn't display a given tensor","body":"# Issue  \r\nWhile plotting an np.ndarray of type fp64, it is not displayed.\r\nIt is so funny that we could reproduce it only for one specific array.\r\n\r\nThigs that make the script work:\r\n- If we add epsilon (as in the commented line), then the pointcloud is displayed properly.\r\n- If we cast to fp32 it works.\r\n- If we add a small value (0.000000000001 for example), it works.\r\n\r\nThings that doesn't work:\r\n- If we add or substract big values, like 0.4, 1 or 2, it doesn't work\r\n- If we substract epsilon, it doesn't work\r\n- if we add numbers larger than 0.000000000001, it doesnt' work even if tehy are small (0.000001 for example)\r\n\r\n # Environment  \r\nWe tried this (and reproduced in at least 2 computers) with numpy 1.26.3 and plotly 5.18.0 on ubuntu 22\r\n```\r\nimport numpy as np\r\nimport plotly.graph_objects as go\r\n\r\ninit = np.array(\r\n    [\r\n        [\r\n            -0.063,\r\n            -0.063,\r\n            0.0,\r\n        ],\r\n        [\r\n            -0.063,\r\n            -0.021,\r\n            0.0,\r\n        ],\r\n        [\r\n            -0.063,\r\n            0.021,\r\n            0.0,\r\n        ],\r\n        [\r\n            -0.063,\r\n            0.063,\r\n            0.0,\r\n        ],\r\n        [\r\n            -0.021,\r\n            -0.021,\r\n            0.0,\r\n        ],\r\n        [\r\n            -0.021,\r\n            -0.063,\r\n            0.0,\r\n        ],\r\n        [\r\n            -0.021,\r\n            0.021,\r\n            0.0,\r\n        ],\r\n        [\r\n            -0.021,\r\n            0.063,\r\n            0.0,\r\n        ],\r\n        [\r\n            0.021,\r\n            -0.063,\r\n            0.0,\r\n        ],\r\n        [\r\n            0.021,\r\n            -0.021,\r\n            0.0,\r\n        ],\r\n        [\r\n            0.021,\r\n            0.021,\r\n            0.0,\r\n        ],\r\n        [\r\n            0.021,\r\n            0.063,\r\n            0.0,\r\n        ],\r\n        [\r\n            0.063,\r\n            -0.063,\r\n            0.0,\r\n        ],\r\n        [\r\n            0.063,\r\n            -0.021,\r\n            0.0,\r\n        ],\r\n        [\r\n            0.063,\r\n            0.021,\r\n            0.0,\r\n        ],\r\n        [\r\n            0.063,\r\n            0.063,\r\n            0.0,\r\n        ],\r\n    ]\r\n)\r\n\r\nrot_mat = [\r\n    [4.93038066e-32, -1.00000000e00, 2.22044605e-16],\r\n    [2.22044605e-16, 2.22044605e-16, 1.00000000e00],\r\n    [-1.00000000e00, 0.00000000e00, 2.22044605e-16],\r\n]\r\n\r\ntransformed = (rot_mat @ init.T).T + np.array([0.5, 0.5, 0.5])\r\n\r\n\r\nx, y, z = 0, 1, 2\r\nidx = list(transformed.shape).index(3)\r\nif idx < 0:\r\n    raise ValueError(\"Array must be [X,Y,Z] x N\")\r\nelif idx == 1:\r\n    array = transformed.transpose()\r\n\r\ndefault_kwargs = dict(\r\n    mode=\"markers\",\r\n    marker=dict(size=3, color=\"black\"),\r\n)\r\n\r\nprint(array.dtype)\r\n\r\n# array[y]+=np.finfo(np.float64).eps\r\nprint(array.dtype)\r\nprint(array)\r\nplot = go.Scatter3d(x=array[x], y=array[y], z=array[z], **default_kwargs)\r\n\r\ndefault_kwargs = dict(\r\n    scene=dict(\r\n        xaxis=dict(title=\"X\", range=[0, 2]),\r\n        yaxis=dict(title=\"Y\", range=[0, 2]),\r\n        zaxis=dict(title=\"Z\", range=[0, 2]),\r\n    ),\r\n)\r\nlayout = go.Layout(**default_kwargs)\r\n\r\nfig = go.Figure(data=plot, layout=layout)\r\n\r\nfig.show()\r\n```","comments":["Also reproducible for Mac OS 14.1.2","Also reproducible on Windows 11, Plotly.js 2.27.0.\r\n\r\n@archmoj here's the [code pen code](https:\/\/codepen.io\/charmingdata\/pen\/NWJBEEv) that reproduces the empty graph.\r\n\r\nAnd here's the [altered code](https:\/\/codepen.io\/charmingdata\/pen\/poYZQGV) that plots the data seemingly correctly, after including `array[y]+=np.finfo(np.float64).eps`.","Thanks @Coding-with-Adam for the report as well as the codepens."],"labels":["bug","sev-2"]},{"title":"FutureWarning in _core.py","body":"Using `plotly==5.18.0` and `pandas==2.2.0`.\r\n\r\nI get the following `FutureWarning`\r\n\r\n```\r\n.venv\/lib\/python3.12\/site-packages\/plotly\/express\/_core.py:2065: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\r\n  sf: grouped.get_group(s if len(s) > 1 else s[0])\r\n```\r\n\r\nI can suppress the warning by fixing a line in `get_groups_and_orders()`\r\n\r\n`sf: grouped.get_group(s if len(s) > 1 else s[0])`\r\n\r\nto\r\n\r\n`sf: grouped.get_group(s if len(s) > 1 else (s[0], ))`\r\n\r\nIn my case, this only happens when I include color, which seems to trigger the grouping by tuple:\r\n\r\nThis doesn't work: `fig = px.bar(main_df, x='role', y='count', color='role')`\r\nThis works: `fig = px.bar(main_df, x='role', y='count')`","comments":["Thanks for reporting, @ramedina86 . Adding a similar report: https:\/\/github.com\/plotly\/plotly.py\/issues\/4500 "],"labels":["sev-1","pandas warning"]},{"title":" Add Support for fill Hatching \/Patterns styles in Plotly Boxplots [ Enhancement Request ]","body":"**Issue Description\r\n![Screenshot 2024-01-31 110419](https:\/\/github.com\/plotly\/plotly.py\/assets\/22257977\/504c7d62-dd84-4f51-98e1-85a12dd6f66f)\r\n:**\r\n\r\nThe current implementation of Plotly includes support for fill patterns (hatching or texture) in various chart types such as Bar charts, Histograms, Polar Bars, Area charts, and Pie charts. However, **this crucial feature is notably absent in Plotly Boxplots.**\r\n\r\n**Request:**\r\n\r\nConsidering the widespread use of Boxplots in scientific data visualization, especially in grouped boxplots, the addition of fill patterns to Plotly Boxplots would significantly enhance the interactive and informative aspects of plots. This feature is essential for various reasons:\r\n\r\nAccessibility: Introducing fill patterns allows for double-encoding variables, making visualizations more accessible to users with visual impairments. This improvement goes beyond the use of color alone.\r\n\r\nAdditional Variable Encoding: The inclusion of fill patterns provides the ability to encode an additional variable, offering more comprehensive insights and analysis possibilities.\r\n\r\nPrint-Friendly Charts: The option to use fill patterns in Boxplots makes charts more printer-friendly, especially in black and white, catering to situations where color might not be distinguishable.\r\n\r\nBy addressing this enhancement request, Plotly can further enhance its capabilities and cater to a wider range of users with diverse visualization needs.","comments":["Thank you for the suggestion, @Isurusachitha . \r\nIs this something you would like to try to build and create a pull request for?"],"labels":["feature","p2"]},{"title":"Button with method \"update\" does not work as intended","body":"There is a bug with buttons using \"method\":\"update\". The bug is present in your documentation for use of buttons: \r\n\r\nhttps:\/\/plotly.com\/python\/custom-buttons\/\r\n\r\n![image](https:\/\/github.com\/plotly\/plotly.py\/assets\/39623480\/43a70afe-567b-4e79-8811-bddc088c0f95)\r\n\r\nThe title and traces are supposed to be updated when you press different buttons, but nothing happens (apart from the annotations, they are updated). \r\n\r\n","comments":["Thank you for reporting this, @vegraux .\r\n@LiamConnors can you please take a look and see what might be causing this bug in the [update-button section](https:\/\/plotly.com\/python\/custom-buttons\/#update-button).","The figure is actually updated as expected when I use chrome \/ safari on my iphone. However, the bug is present on Chrome\/ Egde on my computer"],"labels":["bug","sev-2"]},{"title":"FutureWarning when using \"color\" argument in plotly express with pandas 2.2.0","body":"Pandas looks like it will be changing the semantics of the `get_group()` method in a future version, specifically for groupings created using a length-1 list-like. The current behavior of it accepting a single value in `get_group()` is deprecated, and will require using a tuple in the future. (This only applies to groupings created with a length-1 list (`groupby([\"a\"])`,) groupings created with a single value (`groupby(\"a\")`) are unaffected.)\r\n\r\n```\r\nimport plotly.express as px\r\n\r\npx.scatter(x=[1, 2, 3], y=[10, 20, 30], color=[\"a\", \"b\", \"a\"])\r\n\r\n\/opt\/conda\/lib\/python3.11\/site-packages\/plotly\/express\/_core.py:2065: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\r\n```","comments":["Is there a way to surpress this warning ?  "],"labels":["sev-1","pandas warning"]},{"title":"[BUG] Scatter_polar interactive selection is not consistent with the non-polar scatter plot","body":"When using `Box Select` or `Lasso Select` from the Modebar for the `scatter_polar` charts, the selection is not editable nor draggable as in regular `scatter` charts. This can be easily verified by interacting with the charts from the official Plotly website:\r\n1. [Scatter Polar (not editable or draggable)](https:\/\/plotly.com\/python\/polar-chart\/)\r\n2. [Scatter](https:\/\/plotly.com\/python\/line-and-scatter\/)\r\n\r\nWe should expect the same behavior across all charts available in Plotly.","comments":["Thanks @AAnzel. Definitely would be nice to make this behavior as consistent as possible across all plot types. The history of this is that prior to plotly.js v2.13, all selections looked like what you see in polar. In [2.13 we added](https:\/\/github.com\/plotly\/plotly.js\/blob\/master\/CHANGELOG.md#2130----2022-07-14) persistent selections, meaning that after you make a selection, if you zoom or pan the selection will still cover the same region of data space, and you can even create a plot with a predefined selection. Editing and dragging the selections came along with that new feature.\r\n\r\nBut we didn't extend this to polar (or ternary, all of what I'm about to say applies there as well except the shape distortion) because the main driver of this was persistence, and when you draw a rectangle on top of a polar plot the boundaries don't correspond to constant values in data space so they're hard to describe for persistence. Moreover if you zoom a polar plot, if the inner radius is not zero, the same selected area won't even be a rectangle.\r\n\r\nAside from the distortion, the same applies to ternary plots which also didn't get the upgraded selections.\r\n\r\nConceivably we could create editable & draggable selections on polar and ternary plots *without* making them persist to the layout... they would then need to disappear on zoom\/pan (and probably on redraw too). Or we could alter the selection so you're not really drawing a box, but some shape aligned to the data coordinates - I guess a sector on polar plots and a triangle on ternary? That may be unintuitive to use though. Or we could try to come up with a way to describe rectangles in these spaces, and draw the distorted shapes if you zoom or pan. None of these seem like really great solutions to me, but any one of them would be a good deal of work. Which is why they didn't happen at the same time as cartesian selections.\r\n\r\nI'm open to other suggestions for how this should behave!","Hello, @alexcjohnson ! Thank you for explaining the reasons behind the lack of this functionality and the associated difficulties. Based on my experience working with polar plots, I believe your last recommendation would be the most suitable for the proposed functionality. Drawing sectors on polar plots or triangles on ternary plots would align perfectly with the exploratory nature of the selection functionality.\r\n\r\nSpecifically, in the case of a polar plot, if we draw a sector using radial  (similar to the current zoom implementation) and angular coordinates (not implemented), users would be able to move the created shape (in this case, a selection sector) across the polar space without distorting its shape. You can find an example of such a shape in red on this [link](https:\/\/community.plotly.com\/t\/shapes-on-a-polar-plot-is-it-posible\/29155\/2). The same concept could be applied to the ternary plot.\r\n\r\nAdditionally, it's worth noting that polar and ternary coordinate spaces are not as commonly used as the Cartesian coordinate space, making them inherently less intuitive. However, I believe implementing a selection functionality would greatly improve data exploration in these spaces and bring them on par with other plot types in Plotly.","Thank you for starting this conversation, @AAnzel .\r\nOnce we decide on the right way forward, would you be willing to take a shot at the pull request? ","Hi @Coding-with-Adam! Sure thing, I would be more than happy to help. However, as I am not very proficient in JavaScript, I would prefer to work on the Python side of the implementation."],"labels":["feature","p4"]},{"title":"_bullet measure and range bars have issues if the data set has negative values","body":"The issue is with the method of sorting the data from highest to lowest. The data needs to be sorted so both, the largest positive and negative values are plotted first.\r\n\r\n\r\n`# Vertical Velocity\r\ndata = (\r\n  {\"label\": \"Vertical Velocity\", \"sublabel\": \"[FPM]\",\r\n  \"range\": sorted([-5000, -3000, 3000, 5000]), \"performance\": [-2000, -1000, 1000, 2000], \"point\": [500], 'command': [600]},\r\n)\r\n\r\nfig = ff.create_bullet(\r\n    data, titles='label', subtitles='sublabel', markers='point',\r\n    measures='performance', ranges='range', orientation='v',\r\n    title='Bullet Chart',\r\n    scatter_options={'marker': {'symbol': 'diamond'}},\r\n    width=300,\r\n)\r\n\r\nfig.show()`\r\n\r\nHere is the current implementation - you can see since the sort function puts the -5000 tick mark last and the bar on top of all less negative values.\r\n![Screenshot 2024-01-26 130212](https:\/\/github.com\/plotly\/plotly.py\/assets\/7718524\/8b10fd08-c254-453c-b28a-af953dbd4462)\r\n\r\nHere is a fix.\r\n![Screenshot 2024-01-26 130307](https:\/\/github.com\/plotly\/plotly.py\/assets\/7718524\/2fafea51-bc2a-443d-91bd-a4d34cc0587f)\r\n\r\nI did a little search on this function and it looks like it is being depreciated. I appologize if I have butchered the PR process.\r\n\r\n\r\n<!--\r\nPlease uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**\/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)\r\n\r\nIf your PR modifies code of the `plotly` package, we have a different checklist\r\nbelow :-).\r\n\r\n### Documentation PR\r\n\r\n- [ ] I've [seen the `doc\/README.md` file](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/doc\/README.md)\r\n- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch\r\n- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible\r\n- [ ] Every new\/modified example has a descriptive title and motivating sentence or paragraph\r\n- [ ] Every new\/modified example is independently runnable\r\n- [ ] Every new\/modified example is optimized for short line count\tand focuses on the Plotly\/visualization-related aspects of the example rather than the computation required to produce the data being visualized\r\n- [ ] Meaningful\/relatable datasets are used for all new examples instead of randomly-generated data where possible\r\n- [ ] The random seed is set if using randomly-generated data in new\/modified examples\r\n- [ ] New\/modified remote datasets are loaded from https:\/\/plotly.github.io\/datasets and added to https:\/\/github.com\/plotly\/datasets\r\n- [ ] Large computations are avoided in the new\/modified examples in favour of loading remote datasets that represent the output of such computations\r\n- [ ] Imports are `plotly.graph_objects as go` \/ `plotly.express as px` \/ `plotly.io as pio`\r\n- [ ] Data frames are always called `df`\r\n- [ ] `fig = <something>` call is high up in each new\/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)\r\n- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new\/modified example\r\n- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new\/modified example\r\n- [ ] `fig.show()` is at the end of each new\/modified example\r\n- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new\/modified example\r\n- [ ] Hex codes for colors are not used in any new\/modified example in favour of [these nice ones](https:\/\/github.com\/plotly\/plotly.py\/issues\/2192)\r\n\r\n## Code PR\r\n\r\n- [ ] I have read through the [contributing notes](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.\r\n- [ ] I have added tests (if submitting a new feature or correcting a bug) or\r\n  modified existing tests.\r\n- [ ] For a new feature, I have added documentation examples in an existing or\r\n  new tutorial notebook (please see the doc checklist as well).\r\n- [ ] I have added a CHANGELOG entry if fixing\/changing\/adding anything substantial.\r\n- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).\r\n\r\n-->\r\n","comments":["Thank you for reporting this, @ksheehy "],"labels":["bug","sev-4"]},{"title":"Unify hovertemplate title cannot be edited.","body":"Hello\r\n\r\nIt seems that we cannot modify the title of the hovertemplate when the chart uses a unify hovermode whenever the axis has not a date type.\r\n\r\nHere a short example with 2 scatter plots, the first one with a date axis and the second is linear:\r\n```\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom plotly.subplots import make_subplots\r\n\r\ndates = pd.date_range(\"2022-01-01\", \"2022-03-01\")\r\nvalues = np.random.randint(0, 10, len(dates))\r\n\r\nfig = make_subplots(cols=2) \r\nfig.add_scatter(x=dates, y=values, row=1, col=1)\r\nfig.add_scatter(x=values, y=values, mode=\"markers\", row=1, col=2)\r\n\r\nfig.update_traces(hovertemplate=\"%{y}<extra><\/extra>\")\r\nfig.update_xaxes(row=1, col=1, hoverformat=\" \")\r\nfig.update_xaxes(row=1, col=2, type=\"linear\", hoverformat=\" \")\r\nfig.update_layout(hovermode=\"x unified\")\r\n\r\nfig.show()\r\n```\r\n![image](https:\/\/github.com\/plotly\/plotly.py\/assets\/68944007\/292a11ea-4125-4591-a19b-69ce01664c9d)\r\n\r\n\r\nIf you force the second scatter to be a `date` type, the hovertemplate title is removed with the workaround `hoverformat=\" \"`. However, it only works for date axis.\r\n\r\nHere some references\/related issues:\r\nhttps:\/\/github.com\/plotly\/plotly.py\/issues\/4278\r\nhttps:\/\/community.plotly.com\/t\/customizing-text-on-x-unified-hovering\/39440\/18\r\nhttps:\/\/community.plotly.com\/t\/pass-nothing-or-disable-x-axis-hoverformat\/67496\r\n\r\nplotly version = 5.18.0","comments":["hi @FabioMosella \r\nThank you for reporting this bug. I was able able to reproduce the error locally. "],"labels":["bug","sev-3"]},{"title":"[Bug] Sankey diagram - loop to direct links (and reverse) transformation after node drag-and-drop","body":"Links mode does not change from direct to loop or reverse after node drag-and-drop. The same thing happens if initial nodes position is changed with XY coordinates. It appears that the mode is fixed after initial alignment and that it cannot be changed despite changes in XY coordinates causing some loops to be broken and others to be created. HTML and Javascript environment.\r\n\r\n<img width=\"387\" alt=\"Plotly Sankey\" src=\"https:\/\/github.com\/plotly\/plotly.py\/assets\/157448638\/a9799526-1ccc-467a-bc38-ffa58fb54cf4\">\r\n\r\nhttps:\/\/plotly.com\/python\/sankey-diagram\/\r\n\r\n**Expected behaviour**: Links mode (loop to direct and reverse) is redefined after (or during) each change of node position (drag-and-drop or setting XY coordinates)\r\n\r\nPS: this tool is amazing, I discovered it after using Google's \u043ene, and its flexibility is incredible","comments":["hi @Atrema6 \r\nThank you for opening this issue. Can you please share more about the bug. Is it present in this gif that I made? \r\n\r\n![sankey](https:\/\/github.com\/plotly\/plotly.py\/assets\/32049495\/7a11eb54-75ce-4845-84cb-2ab42e1026ea)\r\n","Hi @Coding-with-Adam \r\nYes, it would be expected if some links were switched to loop mode in this case. But the reverse case is much more annoying - when you move a node with an initial loop link to a position where the loop should disappear, instead of switching to a direct link, you get a weird broken loop edge (see picture above). You can check it with the loop chart by the link above. ","@Atrema6\r\nI was not able to replicate the problem. Please provide an animated gif or video file.\r\nThank you!","@archmoj \r\n![\u0410\u043d\u0438\u043c\u0430\u0446\u0438\u044f](https:\/\/github.com\/plotly\/plotly.py\/assets\/157448638\/d6940dfd-742d-4bec-be24-152d007f4d97)\r\n","Thanks @Atrema6 - that makes the issue quite clear, and I can reproduce it in the `sankey-circular` mock. When you drag C to the right of D, the link from D->C (the one that exits the right side of D and enters the left side of C) should change from a loop to an S-curve, not the crazy self-crossing jagged loop. And the link from C->D should become a loop, rather than an S-curve that subtly overlays both the source and target nodes, giving the impression of a flow in the wrong direction.\r\n\r\nThe solution must be, as your initial comment implies, that the test we do during the initial draw to determine which links are forward and which loop backward needs to be repeated while dragging.","@alexcjohnson thanks for contributing! Yes, exactly, but not only when dragging, but also after XY coordinates are changed, since even when XY coordinates are set during initialisation, they are applied after test is complete. The initial test is applied to default nodes before XY coordinates are applied."],"labels":["bug","sev-2"]},{"title":"go.Histogram2dContour does not normalize when using shared coloraxis and coloring='fill'","body":"Setup: \r\n`plotly==5.18.0`\r\n\r\nBug: \r\nWhen adding two `go.Histogram2dContour` to a subplot, the colorscale is not normalized, when using a shared coloraxis and setting `coloring='fill'`.\r\nIt works when setting `coloring='heatmap'`.\r\n\r\nDataframes used: \r\n```\r\ndf_a = pd.DataFrame({\r\n    'a':[0,0,1,1],\r\n    'b':[0,1,0,1],\r\n    'c':[0,1,2,3],\r\n    \r\n})\r\n\r\ndf_b = pd.DataFrame({\r\n    'a':[0,0,1,1],\r\n    'b':[0,1,0,1],\r\n    'c':[10,20,30,40],\r\n    \r\n})\r\n```\r\nExample `coloring='fill'`:\r\n![histogram2dContour_fill](https:\/\/github.com\/plotly\/plotly.py\/assets\/58612691\/483fa226-b44a-4e9e-80e9-225a4f2e1661)\r\n\r\nExample `coloring='heatmap'`:\r\n![histogram2dContour_heatmap](https:\/\/github.com\/plotly\/plotly.py\/assets\/58612691\/9905e3a5-acb5-4a98-8e17-197bcb7a9109)\r\n\r\nCode:\r\n```\r\nfig = make_subplots(rows=1,cols=2)\r\n\r\nfig.add_trace(\r\n            go.Histogram2dContour(\r\n                x=df_a['a'].to_list(),\r\n                y=df_a['b'].to_list(),\r\n                z=df_a['c'].to_list(),\r\n                # contours=dict(coloring=\"heatmap\"),\r\n                contours=dict(coloring=\"fill\"),\r\n                coloraxis=\"coloraxis\",\r\n                showscale=True,\r\n                showlegend=False,\r\n                histfunc='max',\r\n            ),\r\n            row=1,\r\n            col=1\r\n        )\r\n\r\nfig.add_trace(\r\n            go.Histogram2dContour(\r\n                x=df_b['a'].to_list(),\r\n                y=df_b['b'].to_list(),\r\n                z=df_b['c'].to_list(),\r\n                # contours=dict(coloring=\"heatmap\"),\r\n                contours=dict(coloring=\"fill\"),\r\n                coloraxis=\"coloraxis\",\r\n                showscale=True,\r\n                showlegend=False,\r\n                histfunc='max',\r\n            ),\r\n            row=1,\r\n            col=2\r\n        )\r\n\r\nfig.show()\r\n```","comments":["This might be a bug. Thanks for reporting, @PhilippHa3 \r\n\r\nHere's the full code that reproduces the bug:\r\n```\r\nimport pandas as pd\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\nfrom plotly.subplots import make_subplots\r\n\r\n\r\ndf_a = pd.DataFrame({\r\n    'a': [0, 0, 1, 1],\r\n    'b': [0, 1, 0, 1],\r\n    'c': [0, 1, 2, 3],\r\n\r\n})\r\n\r\ndf_b = pd.DataFrame({\r\n    'a': [0, 0, 1, 1],\r\n    'b': [0, 1, 0, 1],\r\n    'c': [10, 20, 30, 40],\r\n\r\n})\r\n\r\nfig = make_subplots(rows=1,cols=2)\r\n\r\nfig.add_trace(\r\n            go.Histogram2dContour(\r\n                x=df_a['a'].to_list(),\r\n                y=df_a['b'].to_list(),\r\n                z=df_a['c'].to_list(),\r\n                contours=dict(coloring=\"heatmap\"),\r\n                # contours=dict(coloring=\"fill\"),\r\n                coloraxis=\"coloraxis\",\r\n                showscale=True,\r\n                showlegend=False,\r\n                histfunc='max',\r\n            ),\r\n            row=1,\r\n            col=1\r\n        )\r\n\r\nfig.add_trace(\r\n            go.Histogram2dContour(\r\n                x=df_b['a'].to_list(),\r\n                y=df_b['b'].to_list(),\r\n                z=df_b['c'].to_list(),\r\n                contours=dict(coloring=\"heatmap\"),\r\n                # contours=dict(coloring=\"fill\"),\r\n                coloraxis=\"coloraxis\",\r\n                showscale=True,\r\n                showlegend=False,\r\n                histfunc='max',\r\n            ),\r\n            row=1,\r\n            col=2\r\n        )\r\n\r\nfig.show()\r\n```"],"labels":["bug","sev-2"]},{"title":"Error on shape editing with `dcc.Graph`: Invalid property specified for object of type plotly.graph_objs.layout.shape.label: 'texttemplate'","body":"I use dash components in my Flask app to render shapes on a `dcc.Graph` figure input. Oftentimes, this involves appending a list of shapes to the graph using the formula below:\r\n\r\n```\r\nfor center in center_list:\r\n            center = region.centroid\r\n            annotation = cluster_frame[cluster_frame['cell_id'] == mask_id]['cluster']\r\n            if len(annotation) > 0:\r\n                annotation = str(annotation.tolist()[0])\r\n                # boundary[int(center[0]), int(center[1])] = mask_id\r\n                shapes.append(\r\n                    {'editable': False, 'line': {'color': 'white'}, 'type': 'circle',\r\n                     'x0': (int(center[1]) - circle_size), 'x1': (int(center[1]) + circle_size),\r\n                     'xref': 'x', 'y0': (int(center[0]) - circle_size), 'y1': (int(center[0]) + circle_size),\r\n                     'yref': 'y',\r\n                     'fillcolor': cluster_assignments[data_selection][annotation]})\r\n        self.figure['layout']['shapes'] = shapes\r\n```\r\nIn the example above, a series of circles are generated around centroids for objects in the graph. \r\nThis scheme generally works well, but occasionally there will be in the following error when calling `go.Figure(self.figure)`:\r\n\r\n```\r\nInvalid property specified for object of type plotly.graph_objs.layout.shape.label: 'texttemplate'\r\n```\r\n\r\nWhen I evaluate the shapes, sometimes they have a strange property added to them:\r\n\r\n```\r\n{'editable': False, 'line': {'color': 'white'}, 'type': 'circle', 'x0': 763, 'x1': 779, 'xref': 'x', 'y0': 284, 'y1': 300, 'yref': 'y', 'label': {'texttemplate': ''}}\r\n```\r\nIt appears that plotly will randomly generate the `label` portion of the shape dictionary with a blank text template, which causes an error. It seems to happen indiscriminately and without a discernible pattern. \r\n\r\nBy comparison, most shapes appear to have a valid dictionary structure:\r\n\r\n```\r\n{'editable': True, 'line': {'color': 'white'}, 'type': 'circle', 'x0': 796, 'x1': 812, 'xref': 'x', 'y0': 293, 'y1': 309, 'yref': 'y'}\r\n```\r\n","comments":["Pinging here to see if there were any updates on this. I am continung to receive this error and it prevents certain callbacks from firing properly, such as when I want to export the current canvas from `dcc.Graph` as HTML. For example, with the following shapes contained in my `go.Figure`:\r\n\r\n```\r\nprint(fig['layout'['shapes'])\r\n```\r\n\r\n```\r\n[{'editable': True, 'fillcolor': 'rgba(0, 0, 0, 0)', 'fillrule': 'evenodd', 'label': {'text': ''}, 'layer': 'above', 'line': {'color': 'white', 'dash': 'solid', 'width': 4}, 'opacity': 1, 'path': 'M243.25,230.44512195121953L288.9817073170732,158.18902439024393L299.9573170731707,141.72560975609758L302.7012195121951,130.75000000000003L299.0426829268293,117.03048780487805L287.1524390243903,101.48170731707317L271.6036585365854,94.16463414634147L250.5670731707317,92.33536585365854L181.96951219512198,106.0548780487805L167.33536585365857,103.3109756097561L128.9207317073171,80.44512195121952L117.03048780487805,77.70121951219512L111.54268292682927,80.44512195121952L100.56707317073172,113.3719512195122L98.73780487804879,168.25000000000003L103.3109756097561,183.7987804878049L118.85975609756099,203.00609756097563L156.359756097561,220.38414634146343L175.56707317073173,226.78658536585368L204.83536585365857,245.9939024390244Z', 'type': 'path', 'xref': 'x', 'yref': 'y'}, {'line': {'color': 'white', 'width': 2, 'dash': 'solid'}, 'type': 'line', 'x0': 0.9299999999999999, 'x1': 0.95, 'xref': 'paper', 'y0': 0.05, 'y1': 0.05, 'yref': 'paper', 'editable': True, 'label': {'text': ''}, 'layer': 'above', 'opacity': 1, 'fillcolor': 'rgba(0,0,0,0)', 'fillrule': 'evenodd', 'path': 'M243.25,230.44512195121953L288.9817073170732,158.18902439024393L299.9573170731707,141.72560975609758L302.7012195121951,130.75000000000003L299.0426829268293,117.03048780487805L287.1524390243903,101.48170731707317L271.6036585365854,94.16463414634147L250.5670731707317,92.33536585365854L181.96951219512198,106.0548780487805L167.33536585365857,103.3109756097561L128.9207317073171,80.44512195121952L117.03048780487805,77.70121951219512L111.54268292682927,80.44512195121952L100.56707317073172,113.3719512195122L98.73780487804879,168.25000000000003L103.3109756097561,183.7987804878049L118.85975609756099,203.00609756097563L156.359756097561,220.38414634146343L175.56707317073173,226.78658536585368L204.83536585365857,245.9939024390244Z'}]\r\n```\r\n\r\nI still receive this error: \r\n```\r\nInvalid property specified for object of type plotly.graph_objs.layout.shape.Label: 'texttemplate'\r\n```\r\n\r\ndespite removing this key from the all of the shapes in the shape dictionary through the callback. "],"labels":["bug","sev-2"]},{"title":"Axis labels are not shown for all subplots when using plotly express, facets and string labels","body":"### Problem summary\r\nWhenever I have the following combination:\r\n- plotly express\r\n- facet plots\r\n- labels used for axis are strings\r\n\r\nThe first subplot shows the axis labels properly, but all following subplots don't show labels at all:  \r\n![Plot showing the issue](https:\/\/i.stack.imgur.com\/c3awX.png)  \r\nIf the axis labels are numbers, there is no problem.\r\n\r\nFrom a comment of [the initial issue I opened](https:\/\/github.com\/plotly\/plotly.js\/issues\/6806) I now know that `fig.update_traces(bingroup='x2', row=1, col=2)` can work around the issue, but that's not a permanent solution.\r\n\r\n### Reproducible example\r\nI originally created these plots in Python (plotly 5.18.0) and then used the `.to_json(pretty=True)` method to obtain the Javascript for the codepens.\r\n\r\n- Manually building up the figure using `graph_objects` and `make_subplots` I get the following working visualization: https:\/\/codepen.io\/sl1970\/pen\/BaMvNbp\r\n- If I use the convenient `plotly.express` library and the `facet` argument I get this broken visualization (no axis labels on the right plot): https:\/\/codepen.io\/sl1970\/pen\/jOdXPoa\r\n\r\n### Original Python code\r\n\r\n<details>\r\n<summary>If necessary, this is the original Python code I used<\/summary>\r\n\r\n```py\r\nimport pandas as pd\r\nimport plotly.express as px\r\nfrom plotly.subplots import make_subplots\r\nimport plotly.graph_objects as go\r\n\r\ndf = pd.DataFrame(\r\n    {\r\n        \"age\": { \"0\": \"Adult\", \"1\": \"Adult\", \"2\": \"Adult\", \"3\": \"Adult\", \"4\": \"Adult\", \"5\": \"Kid\", \"6\": \"Kid\", \"7\": \"Kid\", \"8\": \"Kid\", \"9\": \"Kid\", },\r\n        \"favourite_food\": { \"0\": \"Pizza\", \"1\": \"Noodles\", \"2\": \"Pizza\", \"3\": \"Pizza\", \"4\": \"Pizza\", \"5\": \"Burger\", \"6\": \"Pancake\", \"7\": \"Noodles\", \"8\": \"Pizza\", \"9\": \"Pancake\", },\r\n        \"favourite_drink\": { \"0\": \"Beer\", \"1\": \"Tea\", \"2\": \"Beer\", \"3\": \"Wine\", \"4\": \"Coffee\", \"5\": \"Coffee\", \"6\": \"Water\", \"7\": \"Beer\", \"8\": \"Tea\", \"9\": \"Wine\", },\r\n        \"max_running_speed\": { \"0\": 4.7362803248, \"1\": 16.7084927714, \"2\": 8.1135697835, \"3\": 1.0704264989, \"4\": 4.6330187561, \"5\": 6.331593807, \"6\": 16.5221040135, \"7\": 3.2256763127, \"8\": 4.3084468631, \"9\": 6.3677742299, },\r\n        \"number_of_bicycles\": { \"0\": 4, \"1\": 2, \"2\": 1, \"3\": 3, \"4\": 4, \"5\": 3, \"6\": 3, \"7\": 3, \"8\": 4, \"9\": 2, },\r\n    }\r\n)\r\ndf.set_index(\"age\", inplace=True)\r\n\r\n\r\nworking = make_subplots(rows=1, cols=2, subplot_titles=[\"Food\", \"Drink\"])\r\n\r\nworking.add_trace( go.Histogram( histfunc=\"count\", histnorm=\"percent\", x=df.loc[\"Adult\"].favourite_food, name=\"Adult\", legendgroup=\"Adult\", ), row=1, col=1, )\r\nworking.add_trace( go.Histogram( histfunc=\"count\", histnorm=\"percent\", x=df.loc[\"Kid\"].favourite_food, name=\"Kid\", legendgroup=\"Kid\" ), row=1, col=1, )\r\nworking.add_trace( go.Histogram( histfunc=\"count\", histnorm=\"percent\", x=df.loc[\"Adult\"].favourite_drink, name=\"Adult\", legendgroup=\"Adult\", ), row=1, col=2, )\r\nworking.add_trace( go.Histogram( histfunc=\"count\", histnorm=\"percent\", x=df.loc[\"Kid\"].favourite_drink, name=\"Kid\", legendgroup=\"Kid\" ), row=1, col=2, )\r\nworking.show()\r\n\r\nbroken = px.histogram(\r\n    df,\r\n    x=[\"favourite_food\", \"favourite_drink\"],\r\n    facet_col=\"variable\",\r\n    color=df.index,\r\n    barmode=\"group\",\r\n    histnorm=\"percent\",\r\n    text_auto=\".2r\",\r\n).update_xaxes(matches=None, showticklabels=True).update_yaxes(matches=None, showticklabels=True)\r\nbroken.show()\r\n```\r\n\r\n<\/details>\r\n\r\n### Related\r\n- [Related post on SO](https:\/\/stackoverflow.com\/q\/77592100\/1256347)\r\n- [Related post on Plotly community](https:\/\/community.plotly.com\/t\/how-to-show-axis-labels-of-all-subplots-when-the-labels-are-strings)","comments":["Thanks @b-a0 - let me add one more crucial condition to your list:\r\n\r\n- each facet should be given an independent set of category labels\r\n\r\nThat's why you added `update_xaxes(matches=None)`, but it's a slightly different statement from \"each facet should have [independent x axes](https:\/\/plotly.com\/python\/facet-plots\/#facets-with-independent-axes)\" - normally with faceted categorical axes you want to ensure all the axes show the same categories, but here since you're faceting on `variable` perhaps it would make sense to automatically give each facet an independent set of labels. It's not immediately clear to me whether this part is a bug or a feature request, but I think your usage makes sense.\r\n\r\nHowever, this also seems to be a plotly.js bug. Open your [broken codepen](https:\/\/codepen.io\/sl1970\/pen\/jOdXPoa?editors=0010) and pan to the right on the first pane, you'll see the drink categories hanging out there, which I guess makes sense based on the `bingroup` attribute, but in this case we need the second x axis to also get these category names.\r\n\r\nThat said, if I'm understanding it correctly, for your case a simpler fix may be: `.update_traces(bingroup=None)`. You probably want that anyway, in case there were ever some overlapping items and some non-overlapping items between the two sets of labels, if they all stayed in the same bingroup you could get some really weird outcomes. (Even if this fixes it for you, please leave this issue open since there are clearly things we want to address here)","`.update_traces(bingroup=None)` is indeed a more flexible workaround which I can use, thanks!\r\n\r\nI tried with partially overlapping labels such that the set of category labels is no longer fully independent, but that didn't work out of the box either. Not sure what that tells us...\r\n\r\n```py\r\nN = 100\r\n# Added 'Beer' as a food and 'Noodles' as a drink\r\nfood = [\"Dim sum\", \"Noodles\", \"Burger\", \"Pizza\", \"Pancake\", \"Beer\"]  \r\ndrink = [\"Beer\", \"Wine\", \"Soda\", \"Water\", \"Fruit juice\", \"Coffee\", \"Tea\", \"Noodles\"]\r\ndf = pd.DataFrame(\r\n    {\r\n        \"age\": np.random.randint(8, 99, N),\r\n        \"favourite_food\": np.random.choice(food, N, replace=True),\r\n        \"favourite_drink\": np.random.choice(drink, N, replace=True),\r\n        \"max_running_speed\": np.random.random(N)*20,\r\n        \"number_of_bicycles\": np.random.randint(0, 5, N)\r\n    }\r\n)\r\ndf.age.replace({range(0, 19): \"Kid\", range(19, 100): \"Adult\"}, inplace=True)\r\n\r\nfig = px.histogram(\r\n    df,\r\n    x=[\"favourite_food\", \"favourite_drink\"],\r\n    facet_col=\"variable\",\r\n    color=\"age\",\r\n    barmode=\"group\",\r\n    histnorm=\"percent\",\r\n    text_auto=\".2r\",\r\n).update_xaxes(matches=None, showticklabels=True).update_yaxes(matches=None, showticklabels=True)\r\n\r\nfig.show()\r\n```\r\n\r\n![newplot](https:\/\/github.com\/plotly\/plotly.py\/assets\/25707742\/9696dab1-ce89-4e0a-b408-cf3c4700a75b)\r\n\r\nAnd after `fig.update_traces(bingroup=None)`:\r\n\r\n![newplot](https:\/\/github.com\/plotly\/plotly.py\/assets\/25707742\/a6f72b0b-72ca-4a58-b030-1144bc204563)\r\n","The main issue is that, by default, `bingroup` gets set to axis `x` for every facet, like:\r\n```\r\nfor t in fig.data : \r\n    print(f\"for trace linked to xaxis {t['xaxis']} the bingroup is {t['bingroup']}\")\r\n\r\n# output\r\n# for trace linked to xaxis x the bingroup is x\r\n# for trace linked to xaxis x2 the bingroup is x\r\n# for trace linked to xaxis x the bingroup is x\r\n# for trace linked to xaxis x2 the bingroup is x\r\n```\r\n\r\nSo the issue can also be fixed with: \r\n```\r\nfig.for_each_trace(lambda trace: trace.update(bingroup=trace['xaxis']))\r\n```\r\n(which is a generalization of the fix @b-a0 commented in the first post)"],"labels":["feature"]},{"title":"[bug] add_hline and add_vline show random diagonal line when passed np.nan","body":"**Behaviour:** when `add_hline()` or `add_vline()` are called with `np.nan`, a diagonal line is rendered (perhaps because `np.nan` is a float?)\r\n**Expected:** possibly raise an exception?\r\n**Minimal example:**\r\n![image](https:\/\/github.com\/plotly\/plotly.py\/assets\/13348053\/3893a845-8c31-411f-89ad-d2dcd1fdc640)\r\n","comments":["consider passing valid numerical values as positions for the lines instead of np.nan\r\n","Thank you, I'm comfortable with how the lines work - I was raising a bug, not asking for advice. I raised this because drawing a diagonal line didn't seem to be the intended behaviour; if you don't want to fix it, then don't.","Thanks for reporting this, @al-vincent . \r\n@sonali489 thank you for trying to help @al-vincent. "],"labels":["bug","sev-4"]},{"title":"Normalized Histogram with Marginal producing the wrong plot","body":"Using plotly.express (px) to plot a Histogram with barnorm = 'percent' and marginal = 'histogram' produces a plot where the barnorm is ignored and the raw counts are plotted. I think the output should be a histogram with barnorm = 'percent' and a marginal histogram with the regular counts.\r\n\r\n\r\n```\r\npx.histogram(pd.DataFrame({'x': np.random.normal(0, 1, 100),\r\n                           'col': np.random.choice(['A', 'B'], 100)}), \r\n             x='x', color='col', barnorm='percent', marginal='histogram')\r\n```","comments":["It's working if you use the following code: \r\n```py\r\nimport plotly.express as px\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\ndf = pd.DataFrame({\r\n    'x': np.random.normal(0, 1, 100),                           \r\n    'col': np.random.choice(['A', 'B'], 100)\r\n})\r\n\r\nfig = px.histogram(df,\r\n    x='x', \r\n    color='col', \r\n    barnorm='percent', \r\n    marginal='rug'\r\n)\r\n\r\nfig.show()\r\n\r\n```","The rug marginal is different than the histogram marginal in this case. My issue is when the same marginal as the plot (histogram in  my code example) is used, the barnorm parameter is ignored. "],"labels":["bug","sev-4"]},{"title":"Empty Facets on partially filled MultiIndex DataFrame with datetime.date in bar plot","body":"I have a pandas dataframe with a multicolumn index consisting of three levels, which I want to plot using a plotly.express.bar. First dimension `Station` (str) goes into the facets, the second dimension `Night` (datetime.date) goes onto the x-axis and the third dimension `Limit` (int) is going to be the stacked bars.\r\n\r\nThe bug is, that the resulting figure does not show any data on facets which do only have data at one `Night`. The expected outcome would be that even though data exists only on one date this data is presented.   \r\n\r\nA reproducible example looks like this:\r\n```python\r\nimport datetime\r\nimport pandas as pd\r\nimport plotly.express as px\r\n\r\ndf = pd.DataFrame([\r\n    [\"station-01\", datetime.date(2023,10,1), 50, 0.1],\r\n    [\"station-01\", datetime.date(2023,10,1), 100, 0.15],\r\n    [\"station-01\", datetime.date(2023,10,2), 50, 0.2],\r\n    [\"station-01\", datetime.date(2023,10,2), 100, 0.22],\r\n    [\"station-01\", datetime.date(2023,10,3), 50, 0.05],\r\n    [\"station-01\", datetime.date(2023,10,3), 100, 0.02],\r\n    [\"station-02\", datetime.date(2023,10,1), 50, 0.5],\r\n    [\"station-02\", datetime.date(2023,10,1), 100, 0.2],\r\n    [\"station-03\", datetime.date(2023,10,1), 50, 0.5],\r\n    [\"station-03\", datetime.date(2023,10,1), 100, 0.5],\r\n], columns=[\"Station\", \"Night\", \"Limit\", \"Relative Duration\"])\r\ndf = df.set_index([\"Station\", \"Night\", \"Limit\"])\r\n\r\npx.bar(\r\n    df,\r\n    x=df.index.get_level_values(\"Night\"),\r\n    y=\"Relative Duration\",\r\n    range_y=[0, 1],\r\n    color=df.index.get_level_values(\"Limit\"),\r\n    facet_col=df.index.get_level_values(\"Station\"),\r\n)\r\n```\r\n\r\nThe figure created looks like this: \r\n![newplot (2)](https:\/\/github.com\/plotly\/plotly.py\/assets\/13436604\/78fcdae5-e2ae-4570-be8a-174ce80b4bbb)\r\n\r\nWhen replacing the `datetime.date` type by a string the figure looks like expected:\r\n```python\r\nimport datetime\r\nimport pandas as pd\r\nimport plotly.express as px\r\n\r\ndf = pd.DataFrame([\r\n    [\"station-01\", \"101\", 50, 0.1],\r\n    [\"station-01\", \"101\", 100, 0.15],\r\n    [\"station-01\", \"102\", 50, 0.2],\r\n    [\"station-01\", \"102\", 100, 0.22],\r\n    [\"station-01\", \"103\", 50, 0.05],\r\n    [\"station-01\", \"103\", 100, 0.02],\r\n    [\"station-02\", \"101\", 50, 0.5],\r\n    [\"station-02\", \"101\", 100, 0.2],\r\n    [\"station-03\", \"101\", 50, 0.5],\r\n    [\"station-03\", \"101\", 100, 0.3],\r\n], columns=[\"Station\", \"Night\", \"Limit\", \"Relative Duration\"])\r\ndf = df.set_index([\"Station\", \"Night\", \"Limit\"])\r\n\r\npx.bar(\r\n    df,\r\n    x=df.index.get_level_values(\"Night\"),\r\n    y=\"Relative Duration\",\r\n    range_y=[0, 1],\r\n    color=df.index.get_level_values(\"Limit\"),\r\n    facet_col=df.index.get_level_values(\"Station\"),\r\n)\r\n```\r\n![newplot (3)](https:\/\/github.com\/plotly\/plotly.py\/assets\/13436604\/ce40cce7-c8cb-4915-a770-364b0fb85c97)\r\n\r\nDue to this behavior I suspect the plot yielded from the initial data frame is false and there is a bug inside of the plotly.express code.\r\n\r\nThanks for helping out.","comments":[],"labels":["bug","sev-2"]},{"title":"Warn about `write_image` hanging with latest Kaleido ","body":"https:\/\/github.com\/plotly\/Kaleido\/issues\/134\r\n\r\nUnfixed problem, had to spend time debugging. A warning should be thrown, and it'd help to suggest the commonly-working fix of downgrading to `kaleido==0.1.0.post1` (`0.1.0` via `-conda-forge` also worked for me).","comments":["Thanks for the tip, I ran into the same issue.","Same here.  \r\nI figured that you need to downgrade to ``kaleido==0.0.3`` in order to make it work on Linux. Can somebody confirm this?","> [plotly\/Kaleido#134](https:\/\/github.com\/plotly\/Kaleido\/issues\/134)\r\n> \r\n> Unfixed problem, had to spend time debugging. A warning should be thrown, and it'd help to suggest the commonly-working fix of downgrading to `kaleido==0.1.0.post1` (`0.1.0` via `-conda-forge` also worked for me).\r\n\r\nThank you for this! Worked like a charm on Windows."],"labels":["bug","sev-3"]},{"title":"color_continuous_scale incompatible with marginal distributions in density_heatmap","body":"I was trying out the examples from https:\/\/plotly.com\/python\/2D-Histogram\/ and wanted to use the density heat map with marginal distribution on x and y but wanted to change the colour map to align with some previous work. \r\nI found when combining the two subsequent examples from the  2D-Histogram page I got an error. If the marginal distribution and color_continuous_scale aren't meant to be used together there should at least be a better error message.\r\nI btw also test other kinds of distributions like box, violin and rug with the same result.\r\n\r\nplotly Version: 5.17.0\r\n\r\nMy code:\r\n````\r\nimport plotly.express as px\r\ndf = px.data.tips()\r\n\r\nfig = px.density_heatmap(df, x=\"total_bill\", y=\"tip\", nbinsx=20, nbinsy=20, marginal_x=\"histogram\", marginal_y=\"histogram\", color_continuous_scale=\"Viridis\")\r\nfig.show()\r\n````\r\nTraceback:\r\n````\r\nValueError                                Traceback (most recent call last)\r\n[\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/attention_weight_event_viewer.ipynb](https:\/\/vscode-remote+ssh-002dremote-002b7b22686f73744e616d65223a226865705f475055227d.vscode-resource.vscode-cdn.net\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/attention_weight_event_viewer.ipynb) Cell 10 line 4\r\n      [1](vscode-notebook-cell:\/\/ssh-remote%2B7b22686f73744e616d65223a226865705f475055227d\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/attention_weight_event_viewer.ipynb#Y130sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0) import plotly.express as px\r\n      [2](vscode-notebook-cell:\/\/ssh-remote%2B7b22686f73744e616d65223a226865705f475055227d\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/attention_weight_event_viewer.ipynb#Y130sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1) df = px.data.tips()\r\n----> [4](vscode-notebook-cell:\/\/ssh-remote%2B7b22686f73744e616d65223a226865705f475055227d\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/attention_weight_event_viewer.ipynb#Y130sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3) fig = px.density_heatmap(df, x=\"total_bill\", y=\"tip\", nbinsx=20, nbinsy=20, marginal_y=\"histogram\", color_continuous_scale=\"Viridis\")\r\n      [5](vscode-notebook-cell:\/\/ssh-remote%2B7b22686f73744e616d65223a226865705f475055227d\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/attention_weight_event_viewer.ipynb#Y130sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4) fig.show()\r\n\r\nFile [~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/express\/_chart_types.py:187](https:\/\/vscode-remote+ssh-002dremote-002b7b22686f73744e616d65223a226865705f475055227d.vscode-resource.vscode-cdn.net\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/express\/_chart_types.py:187), in density_heatmap(data_frame, x, y, z, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, hover_name, hover_data, animation_frame, animation_group, category_orders, labels, orientation, color_continuous_scale, range_color, color_continuous_midpoint, marginal_x, marginal_y, opacity, log_x, log_y, range_x, range_y, histfunc, histnorm, nbinsx, nbinsy, text_auto, title, template, width, height)\r\n    145 def density_heatmap(\r\n    146     data_frame=None,\r\n    147     x=None,\r\n   (...)\r\n    180     height=None,\r\n    181 ) -> go.Figure:\r\n    182     \"\"\"\r\n    183     In a density heatmap, rows of `data_frame` are grouped together into\r\n    184     colored rectangular tiles to visualize the 2D distribution of an\r\n    185     aggregate function `histfunc` (e.g. the count or sum) of the value `z`.\r\n    186     \"\"\"\r\n--> 187     return make_figure(\r\n    188         args=locals(),\r\n    189         constructor=go.Histogram2d,\r\n    190         trace_patch=dict(\r\n    191             histfunc=histfunc,\r\n    192             histnorm=histnorm,\r\n    193             nbinsx=nbinsx,\r\n    194             nbinsy=nbinsy,\r\n    195             xbingroup=\"x\",\r\n    196             ybingroup=\"y\",\r\n    197         ),\r\n    198     )\r\n\r\nFile [~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/express\/_core.py:2256](https:\/\/vscode-remote+ssh-002dremote-002b7b22686f73744e616d65223a226865705f475055227d.vscode-resource.vscode-cdn.net\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/express\/_core.py:2256), in make_figure(args, constructor, trace_patch, layout_patch)\r\n   2251         group[var] = 100.0 * group[var] [\/](https:\/\/vscode-remote+ssh-002dremote-002b7b22686f73744e616d65223a226865705f475055227d.vscode-resource.vscode-cdn.net\/) group_sum\r\n   2253 patch, fit_results = make_trace_kwargs(\r\n   2254     args, trace_spec, group, mapping_labels.copy(), sizeref\r\n   2255 )\r\n-> 2256 trace.update(patch)\r\n   2257 if fit_results is not None:\r\n   2258     trendline_rows.append(mapping_labels.copy())\r\n\r\nFile [~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/basedatatypes.py:5141](https:\/\/vscode-remote+ssh-002dremote-002b7b22686f73744e616d65223a226865705f475055227d.vscode-resource.vscode-cdn.net\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/basedatatypes.py:5141), in BasePlotlyType.update(self, dict1, overwrite, **kwargs)\r\n   5139         BaseFigure._perform_update(self, kwargs, overwrite=overwrite)\r\n   5140 else:\r\n-> 5141     BaseFigure._perform_update(self, dict1, overwrite=overwrite)\r\n   5142     BaseFigure._perform_update(self, kwargs, overwrite=overwrite)\r\n   5144 return self\r\n\r\nFile [~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/basedatatypes.py:3921](https:\/\/vscode-remote+ssh-002dremote-002b7b22686f73744e616d65223a226865705f475055227d.vscode-resource.vscode-cdn.net\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/basedatatypes.py:3921), in BaseFigure._perform_update(plotly_obj, update_obj, overwrite)\r\n   3915 validator = plotly_obj._get_prop_validator(key)\r\n   3917 if isinstance(validator, CompoundValidator) and isinstance(val, dict):\r\n   3918 \r\n   3919     # Update compound objects recursively\r\n   3920     # plotly_obj[key].update(val)\r\n-> 3921     BaseFigure._perform_update(plotly_obj[key], val)\r\n   3922 elif isinstance(validator, CompoundArrayValidator):\r\n   3923     if plotly_obj[key]:\r\n   3924         # plotly_obj has an existing non-empty array for key\r\n   3925         # In this case we merge val into the existing elements\r\n\r\nFile [~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/basedatatypes.py:3942](https:\/\/vscode-remote+ssh-002dremote-002b7b22686f73744e616d65223a226865705f475055227d.vscode-resource.vscode-cdn.net\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/basedatatypes.py:3942), in BaseFigure._perform_update(plotly_obj, update_obj, overwrite)\r\n   3939                 plotly_obj[key] = val\r\n   3940         else:\r\n   3941             # Assign non-compound value\r\n-> 3942             plotly_obj[key] = val\r\n   3944 elif isinstance(plotly_obj, tuple):\r\n   3946     if len(update_obj) == 0:\r\n   3947         # Nothing to do\r\n\r\nFile [~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/basedatatypes.py:4876](https:\/\/vscode-remote+ssh-002dremote-002b7b22686f73744e616d65223a226865705f475055227d.vscode-resource.vscode-cdn.net\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/basedatatypes.py:4876), in BasePlotlyType.__setitem__(self, prop, value)\r\n   4872         self._set_array_prop(prop, value)\r\n   4874     # ### Handle simple property ###\r\n   4875     else:\r\n-> 4876         self._set_prop(prop, value)\r\n   4877 else:\r\n   4878     # Make sure properties dict is initialized\r\n   4879     self._init_props()\r\n\r\nFile [~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/basedatatypes.py:5220](https:\/\/vscode-remote+ssh-002dremote-002b7b22686f73744e616d65223a226865705f475055227d.vscode-resource.vscode-cdn.net\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/basedatatypes.py:5220), in BasePlotlyType._set_prop(self, prop, val)\r\n   5218         return\r\n   5219     else:\r\n-> 5220         raise err\r\n   5222 # val is None\r\n   5223 # -----------\r\n   5224 if val is None:\r\n   5225     # Check if we should send null update\r\n\r\nFile [~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/basedatatypes.py:5215](https:\/\/vscode-remote+ssh-002dremote-002b7b22686f73744e616d65223a226865705f475055227d.vscode-resource.vscode-cdn.net\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/plotly\/basedatatypes.py:5215), in BasePlotlyType._set_prop(self, prop, val)\r\n   5212 validator = self._get_validator(prop)\r\n   5214 try:\r\n-> 5215     val = validator.validate_coerce(val)\r\n   5216 except ValueError as err:\r\n   5217     if self._skip_invalid:\r\n\r\nFile [~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/_plotly_utils\/basevalidators.py:1374](https:\/\/vscode-remote+ssh-002dremote-002b7b22686f73744e616d65223a226865705f475055227d.vscode-resource.vscode-cdn.net\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/_plotly_utils\/basevalidators.py:1374), in ColorValidator.validate_coerce(self, v, should_raise)\r\n   1372     validated_v = self.vc_scalar(v)\r\n   1373     if validated_v is None and should_raise:\r\n-> 1374         self.raise_invalid_val(v)\r\n   1376     v = validated_v\r\n   1378 return v\r\n\r\nFile [~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/_plotly_utils\/basevalidators.py:287](https:\/\/vscode-remote+ssh-002dremote-002b7b22686f73744e616d65223a226865705f475055227d.vscode-resource.vscode-cdn.net\/groups\/icecube\/moust\/work\/IceCubeEncoderTransformer\/notebooks\/~\/miniconda3\/envs\/icet2\/lib\/python3.8\/site-packages\/_plotly_utils\/basevalidators.py:287), in BaseValidator.raise_invalid_val(self, v, inds)\r\n    284             for i in inds:\r\n    285                 name += \"[\" + str(i) + \"]\"\r\n--> 287         raise ValueError(\r\n    288             \"\"\"\r\n    289     Invalid value of type {typ} received for the '{name}' property of {pname}\r\n    290         Received value: {v}\r\n    291 \r\n    292 {valid_clr_desc}\"\"\".format(\r\n    293                 name=name,\r\n    294                 pname=self.parent_name,\r\n    295                 typ=type_str(v),\r\n    296                 v=repr(v),\r\n    297                 valid_clr_desc=self.description(),\r\n    298             )\r\n    299         )\r\n\r\nValueError: \r\n    Invalid value of type 'builtins.str' received for the 'color' property of histogram.marker\r\n        Received value: 'V'\r\n\r\n    The 'color' property is a color and may be specified as:\r\n      - A hex string (e.g. '#ff0000')\r\n      - An rgb\/rgba string (e.g. 'rgb(255,0,0)')\r\n      - An hsl\/hsla string (e.g. 'hsl(0,100%,50%)')\r\n      - An hsv\/hsva string (e.g. 'hsv(0,100%,100%)')\r\n      - A named CSS color:\r\n            aliceblue, antiquewhite, aqua, aquamarine, azure,\r\n            beige, bisque, black, blanchedalmond, blue,\r\n            blueviolet, brown, burlywood, cadetblue,\r\n            chartreuse, chocolate, coral, cornflowerblue,\r\n            cornsilk, crimson, cyan, darkblue, darkcyan,\r\n            darkgoldenrod, darkgray, darkgrey, darkgreen,\r\n            darkkhaki, darkmagenta, darkolivegreen, darkorange,\r\n            darkorchid, darkred, darksalmon, darkseagreen,\r\n            darkslateblue, darkslategray, darkslategrey,\r\n            darkturquoise, darkviolet, deeppink, deepskyblue,\r\n            dimgray, dimgrey, dodgerblue, firebrick,\r\n            floralwhite, forestgreen, fuchsia, gainsboro,\r\n            ghostwhite, gold, goldenrod, gray, grey, green,\r\n            greenyellow, honeydew, hotpink, indianred, indigo,\r\n            ivory, khaki, lavender, lavenderblush, lawngreen,\r\n            lemonchiffon, lightblue, lightcoral, lightcyan,\r\n            lightgoldenrodyellow, lightgray, lightgrey,\r\n            lightgreen, lightpink, lightsalmon, lightseagreen,\r\n            lightskyblue, lightslategray, lightslategrey,\r\n            lightsteelblue, lightyellow, lime, limegreen,\r\n            linen, magenta, maroon, mediumaquamarine,\r\n            mediumblue, mediumorchid, mediumpurple,\r\n            mediumseagreen, mediumslateblue, mediumspringgreen,\r\n            mediumturquoise, mediumvioletred, midnightblue,\r\n            mintcream, mistyrose, moccasin, navajowhite, navy,\r\n            oldlace, olive, olivedrab, orange, orangered,\r\n            orchid, palegoldenrod, palegreen, paleturquoise,\r\n            palevioletred, papayawhip, peachpuff, peru, pink,\r\n            plum, powderblue, purple, red, rosybrown,\r\n            royalblue, rebeccapurple, saddlebrown, salmon,\r\n            sandybrown, seagreen, seashell, sienna, silver,\r\n            skyblue, slateblue, slategray, slategrey, snow,\r\n            springgreen, steelblue, tan, teal, thistle, tomato,\r\n            turquoise, violet, wheat, white, whitesmoke,\r\n            yellow, yellowgreen\r\n      - A number that will be interpreted as a color\r\n        according to histogram.marker.colorscale\r\n      - A list or array of any of the above\r\n````\r\n","comments":["Can confirm.\r\n\r\nHere's simple example to see difference:\r\n\r\n```python\r\n\r\nfrom plotly import express as px\r\nimport pandas as pd\r\n\r\ndf = pd.DataFrame({\"x\": [1, 2], \"y\": [3,4]})\r\n\r\n# works\r\npx.density_heatmap(df)\r\n\r\n# works\r\npx.density_heatmap(df, color_continuous_scale=\"Viridis\")\r\n\r\n# works\r\npx.density_heatmap(df, marginal_y=\"histogram\", marginal_x=\"histogram\")\r\n\r\n# raises error\r\npx.density_heatmap(df, marginal_y=\"histogram\", marginal_x=\"histogram\", color_continuous_scale=\"Viridis\")\r\n```","I can confirm the same error message. \r\n```\r\nfrom plotly import express as px\r\nimport pandas as pd\r\ndff = px.data.tips()\r\nfig = px.density_heatmap(dff, x=\"total_bill\", y=\"tip\", marginal_x=\"histogram\")\r\nfig.show()\r\n\r\nerror_fig = px.density_heatmap(dff, x=\"total_bill\", y=\"tip\", marginal_x=\"histogram\", color_continuous_scale=\"Viridis\")\r\nerror_fig.show()\r\n```\r\nIt's as if it's trying to apply to the color scale to the marginal histogram as well...\r\n\r\nI'll mark this as a bug for now, and we'll see what our engineers think once they have more time to take a deeper look.","To understand what happens we have to study the \"anatomy\" of this fig:\r\n```\r\nfig=px.density_heatmap(df, marginal_y=\"histogram\", marginal_x=\"histogram\")\r\n```\r\nLet us inspect:\r\n```\r\nfig.data:\r\n(Histogram2d({\r\n     'coloraxis': 'coloraxis',\r\n     'hovertemplate': 'index=%{x}<br>value=%{y}<br>count=%{z}<extra><\/extra>',\r\n     'name': '',\r\n     'x': array([0, 1, 0, 1], dtype=int64),\r\n     'xaxis': 'x',\r\n     'xbingroup': 'x',\r\n     'y': array([1, 2, 3, 4], dtype=int64),\r\n     'yaxis': 'y',\r\n     'ybingroup': 'y'\r\n }),\r\n Histogram({\r\n     'alignmentgroup': 'True',\r\n     'bingroup': 'x',\r\n     'hovertemplate': 'index=%{x}<br>count=%{y}<extra><\/extra>',\r\n     'legendgroup': '',\r\n     'marker': {'color': '#0d0887'},\r\n     'name': '',\r\n     'offsetgroup': '',\r\n     'opacity': 0.5,\r\n     'showlegend': False,\r\n     'x': array([0, 1, 0, 1], dtype=int64),\r\n     'xaxis': 'x3',\r\n     'yaxis': 'y3'\r\n }),\r\n Histogram({\r\n     'alignmentgroup': 'True',\r\n     'bingroup': 'y',\r\n     'hovertemplate': 'value=%{y}<br>count=%{x}<extra><\/extra>',\r\n     'legendgroup': '',\r\n     'marker': {'color': '#0d0887'},\r\n     'name': '',\r\n     'offsetgroup': '',\r\n     'opacity': 0.5,\r\n     'showlegend': False,\r\n     'xaxis': 'x2',\r\n     'y': array([1, 2, 3, 4], dtype=int64),\r\n     'yaxis': 'y2'\r\n }))\r\n```\r\nand\r\n```\r\nfig.layout.coloraxis\r\nlayout.Coloraxis({\r\n    'colorbar': {'title': {'text': 'count'}},\r\n    'colorscale': [[0.0, '#0d0887'], [0.1111111111111111, '#46039f'],\r\n                   [0.2222222222222222, '#7201a8'], [0.3333333333333333,\r\n                   '#9c179e'], [0.4444444444444444, '#bd3786'],\r\n                   [0.5555555555555556, '#d8576b'], [0.6666666666666666,\r\n                   '#ed7953'], [0.7777777777777778, '#fb9f3a'],\r\n                   [0.8888888888888888, '#fdca26'], [1.0, '#f0f921']]\r\n})\r\n```\r\nWhat we see?  The values in the `Histogram2d`    are colormapped to the default colorscale, plasma, set via `layout.coloraxis.colorscale`, while the two marginal histograms  are colored with the first color, `'#0d0887'`, in the plasma colorscale, and  the opacity  0.5.\r\nHence if you want to change the colorscale to \"Viridis\", you may update it for the histogram2d as follows:\r\n`fig.update_layout(coloraxis_colorscale='Viridis')`, but you cannot access the color corresponding to 0.0 (the first color) in the viridis colorscale, to set is as a color for marginal histograms.  As a conclusion, I think that  there is no bug, and this type of plot was designed only for plasma colorscale, i.e. with the actual default settings, because setting the color for marginal distribution requires a non-standard operation . Looking at the [https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/packages\/python\/plotly\/plotly\/express\/colors\/__init__.py](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/packages\/python\/plotly\/plotly\/express\/colors\/__init__.py) we realize that using a particular colorscale would involve many searches to access the first color in that colorscale.","I don't think that the intention here was to make the marginal histogram of the colorscale you selected for the entire heatmap, but rather to *just* add a marginal histogram, in addition to main focus - the heatmap.\r\nMeaning, I would be fine if the marginal histogram remains in *whatever* colorscale as long as it is there and the heatmap follows the desired colormap. I was using heatmaps for a long time quite fine with custom colormap and didn't care that marginal histogram has a single color (aka colorscale was applied only to the heatmap, but not to marginal histogram) (btw, in plotly_dark they look terrible - hard to distinct). I hope the intention is clear: being able to use heatmpas with colorscales while also adding marginal heatmaps (with or without colorscale) - it's **not** to have both heatmap and histogram in single colorscale.\r\n\r\nI was going to try a workaround with converting Viridis to 2d list, but i see that it might not happen so easily...","I explained how this kind of px. density_heatmap is designed.   You can change the default settings performing trace updates ( for the color of the marginal histograms), respectively, layout update: ```fig.update_layout(coloraxis_colorscale='NewcolorscaleName')```","Example that still works:\r\n```python\r\n# custom color scale definition\r\ncscale = [\r\n    [0, '#FFFF66'],\r\n    [0.05, '#FFFF66'],\r\n    [0.7, '#ff0000'],\r\n    [1, '#ff0000']\r\n]\r\n\r\n# no error\r\npx.density_heatmap(df, marginal_y=\"histogram\", marginal_x=\"histogram\", color_continuous_scale=cscale)\r\n```\r\nWhat is strange to me is that I can set a custom colorscale, and it still works. And histogram won't try to be colorful in this case.\r\n\r\nJudging by the fact that this issue is brought up only now (I have some vague memory of this same error from a few months ago) - people are not using these 2 features together.\r\n\r\nI appreciate workaround you provided, but I don't see OP intention to apply colorscale to marginal histogram, nor do I want it - it's simply that using colorscale by name for heatmap with marginal histogram (regardless of colors of the marginal histogram) is not working is surprising and the resulting error is poorly communicated.\r\n\r\nI suggest letting the marginal histogram ignore the `color_continuous_scale` param from `density_heatmap` and similr figure factories, because it is not like that histogram will benefit much from being colorful. \r\nMaybe it would be nice to get a separate way of making that histogram obey some custom colorscale, but seems like it's not been requested yet.\r\n","This code snippet from ChatGPT3.5 is not raising error:\r\n\r\n```python\r\nimport numpy as np\r\nimport plotly.colors as pc\r\n\r\n# Sample values (from 0 to 1)\r\nvalues = np.linspace(0, 1, 10)  # Replace with your values\r\n\r\n# Get the Viridis colorscale\r\nviridis_colorscale = pc.sequential.Viridis\r\n\r\n# Map values to colors based on the Viridis colorscale\r\ncolors_for_values = [[value, viridis_colorscale[int(value * (len(viridis_colorscale) - 1))]] for value in values]\r\n\r\n# does not raise error\r\npx.density_heatmap(df, marginal_y=\"histogram\", marginal_x=\"histogram\", color_continuous_scale=colors_for_values)\r\n```","The solution given by ChatGPT  is a workaround that redefines an existing colorscale to give access to its first color.  You can avoid this redefinition, as I said in the previous post, by updates:\r\n```\r\nfig = px.density_heatmap(df, marginal_y=\"histogram\", marginal_x=\"histogram\")\r\nfig.update_layout(coloraxis_colorscale=\"Viridis\")\r\nfig.update_traces(marker_color=pc.sequential.Viridis[0], selector=dict(type=\"histogram\"))\r\n```\r\n\r\n","I see the issue doesn't progress...\r\n\r\nCould my suggestion be implemented?\r\n> I suggest letting the marginal histogram ignore the color_continuous_scale param from density_heatmap and similar figure factories..."],"labels":["bug","sev-2"]},{"title":"Latex not working in jupyter notebook v7.","body":"I recently upgraded to jupyter notebook v7 and I noticed that some plotly plots that previously rendered flawlessly now fail to render. I get the following output:\r\n\r\n![Screenshot from 2023-08-22 12-27-21](https:\/\/github.com\/plotly\/plotly.py\/assets\/42074085\/534753f0-449b-4a8a-a79e-1f8a27f22d57)\r\n\r\nAfter some exploration I found out that it comes from an error using MathJax in `jupyterlab-plotly`. It tries to access `MathJax.config.startup.output`, but `MathJax.config.startup` is `undefined`.\r\n\r\nIt is very easy to reproduce this error:\r\n- Create a new python environment (I tried with python 3.8).\r\n- `pip install jupyter plotly`\r\n- Open a jupyter notebook with `jupyter notebook`.\r\n- Run a cell with the following code:\r\n\r\n```python\r\nfrom plotly.graph_objects import Figure\r\n\r\nFigure().update_layout(title=\"$Title$\")\r\n```\r\n","comments":["Ok, I installed the `jupyterlab-plotly` extension with `jupyter labextension install plotlywidget` and it works, so I guess this will be fixed in the next python package release (?)","No, sorry it also doesn't work, the previous code snippet just literally shows `\"$Title$\"` as a title, but prepending the string with 'r' makes the issue show again:\r\n\r\n```python\r\nfrom plotly.graph_objects import Figure\r\n\r\nFigure().update_layout(title=r\"$Title$\")\r\n```","Hi, I faced the [same issue](https:\/\/github.com\/plotly\/plotly.py\/issues\/4340), any update?","No, I still need some solution for this \ud83d\ude05 ","@zhimin-z @pfebrer I've been seeing this issue for a while too.  Is there any understanding of the cause and what might be done to fix it? ","Yeah, still there... @newville \r\n![image](https:\/\/github.com\/plotly\/plotly.py\/assets\/8592144\/091a34b2-294e-45c7-be68-a7ffd033198a)\r\n","@zhimin-z  Yes, the problem still exists.  Is there any understanding of the cause of the problem?  Has anyone investigated what is going on in the code?  I'm afraid this is a bit outside of my area of expertise.","I have no idea...anyone who is in charge of latex functionality in this repo?","I'm tagging @alexcjohnson since he seems to be the last to have committed something to jupyterlab-plotly other than version changes :)\r\n\r\nIt looks like this is an easy fix that just needs an update to use the latest MathJax version, or somehow forcing jupyterlab to use an oldest one, I don't know if that's possible.","@pfebrer @alexcjohnson Thanks for looking into this.  Is there anything the rest of us can do to help further troubleshoot or fix this issue?  I'll admit that I do not have a deep understanding of how plotply.py and plotly.js interact or which version of mathjax  \r\nis actually being used.  ","I don't know, everything I know is that jupyterlab uses MathJax `3.2` and plotly's docs use `2.7`, but in principle version `3` should work as well according to https:\/\/github.com\/plotly\/plotly.js\/pull\/6073\r\n\r\nI don't even know how to modify `jupyterlab-plotly` and use a modified version of the extension. I have tried to `pip install -e .` the plotly repo to play a little bit with it but then jupyter doesn't render anything. ","@pfebrer  Thanks, sorry to be dense, but what precisely would one have to do to make it work?   Could that be folded into the plotly-py code?\r\n\r\nThe issue is kind of 3 months old, and it seems that there has been no explanation or acknowledgment of this issue.  \r\nBut, I don't really know what that means. Maybe the solution is obvious to someone? \r\n\r\n","I don't know, if I knew I would have submitted a PR already :)\r\n\r\nI already tried to fix it and I couldn't even set up a dev environment. I'm not a plotly developer so I don't have more time to spend on it unfortunately.\r\n\r\nThey already marked it as a bug, so I guess they'll address it whenever they have time. The bug is very annoying and I guess plenty of people will find it since everyone uses jupyter notebooks, so eventually they will have to fix it if they don't want people to move to other packages because of this very small detail.","> Could that be folded into the plotly-py code?\r\n\r\nMy impression for this was that `plotlyjs` should be modified (not just the javascript in `jupyterlab-plotly`), but I might be wrong.","@pfebrer @alexcjohnson it looks like maybe this is related to  #3661, #3696, and #3706, first identified 18 months ago and related to plotly using MathJax 2 when other code (say, Jupyter) has already loaded MathJax 3.  \r\n\r\nFWIW, the last release of MathJax2 was 3 years ago. MathJax 3 has been actively developed, and MathJax 4 is now in beta. ","As @pfebrer pointed out, Plotly.js has been able to use MathJax v3 or v2 since https:\/\/github.com\/plotly\/plotly.js\/pull\/6073 which was released in v2.10 (March 2022), so the problem is something about how we're detecting or invoking MathJax in certain environments.\r\n\r\nI have to admit my own attempts a few months ago to get multiple versions of Jupyter and Jupyterlab installed side-by-side so I could test and fix these issues left me with a borked environment that wouldn't run anything correctly, and I haven't tried to go back to it since then. So if someone else wants to give this a shot we'd welcome a PR - otherwise we'll get back to it at some point but I can't say when.\r\n\r\n@newville thanks for the note about MathJax 4, we'll give it a look! We'll certainly want to get it working in Plotly.js and Dash, regardless of the issues we've had in the various Jupyter environments.","@alexcjohnson Thanks for the response.    For me, running a standalone plot script, as in https:\/\/plotly.com\/python\/LaTeX\/  from a plain Python shell works fine (Python 3.10.12  or 3.11.5 on MacOS) -- it opens a browser in Chrome and the plot correctly renders the LaTeX.\r\n\r\nRunning that same script in a Jupyter Notebook fails to render the LaTeX.  To reproduce, one should be able to install Miniforge (https:\/\/github.com\/conda-forge\/miniforge), activate that environment, and then install with \r\n\r\n```\r\nmamba install -c conda-forge notebook pandas plotly\r\n```\r\n\r\nI might be willing to help, but I am having difficulty even navigating where to start here (not very fluent with the Jupyter code or Plotly).   I cannot really even figure out where the\r\n```\r\nJavascript error: cannot read properties of undefined\r\n```\r\nis coming from. \r\n",">  I cannot really even figure out where the\r\n> \r\n> Javascript error: cannot read properties of undefined\r\n> is coming from.\r\n\r\nIf you open the browser console (F12) you'll see some more information. But the JavaScript files are minified so it's really an impossible mission to debug from there.\r\n\r\nThat's why I tried to set up a dev environment, but I failed. @alexcjohnson maybe if you can point us to somewhere where it is explained how to set up the dev environment for the whole stack (plotly.py, jupyterlab-plotly, plotlyjs), we could try to help. Otherwise, at least in my case, it feels too difficult to try to contribute because I have to figure out everything myself and I don't know if I'm doing things right.","@alexcjohnson @pfebrer Just in case it wasn't obvious (or in case it helps with debugging), downgrading to jupyter notebook < 7 does avoid this problem:\r\n```\r\npip install \"notebook<7\"\r\n```\r\n\r\n\r\n","@alexcjohnson @pfebrer any thoughts on whether progress is going to be possible on this?  Help (or an attempt to help, at least) was offered, but the very low response rate here is less than encouraging.  I hope all is well. ","@alexcjohnson @pfebrer any updates on this? \r\n\r\nPerhaps a pull request on the documentation (https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/doc\/python\/LaTeX.md) to change that to state that latex formatting of strings is no longer supported in Jupyter would be in order?  The current statement there is misleading at best. \r\n\r\n\r\n","I have no idea how to fix it and I'm not part of the plotly team, so I don't see how I can help, sorry :(\r\n\r\nI would like to see this fixed as well, but there's nothing I can do.","@pfebrer Thanks - I am in the same position. It seems like the developers are either ignoring this or won't be able to fix it.  I think that perhaps the best option is to admit that this is not working, and put in a PR to change to documentation to say that latex strings do not work with Jupyter Notebook 7.\r\n"],"labels":["bug","sev-2"]},{"title":"marker symbol \"y-[up, down, left, right]\" doesnt work.","body":"```\r\nimport plotly.graph_objects as go\r\n\r\nfig = go.Figure()\r\n\r\nsymbol = \"circle\"\r\nnew_scatter = go.Scatter(x=[1,2,3], y=[1,2,3], mode=\"markers\", marker=dict(symbol=symbol) )\r\nfig.add_trace(new_scatter) # no-problem\r\n\r\nsymbol = \"y-up\"\r\nnew_scatter = go.Scatter(x=[4,5,6], y=[4,5,6], mode=\"markers\", marker=dict(symbol=symbol) )\r\nfig.add_trace(new_scatter) # it doesn't show\r\n\r\nfig.update_layout(    autosize=False,    width=500,    height=500)\r\nfig.show()\r\n```\r\n\r\nThe symbol \"y-up\" shows nothing.\r\nI tried it in two envs, [\u201cplotly.version, jupyterlab.version == (\u20185.15.0\u2019, \u20183.0.0\u2019)\u201d , \u201cplotly.version, jupyterlab.version == (\u20185.13.1\u2019, \u20184.0.1\u2019)\u201d] , and result is same. \r\n\r\nThis problem is cross checked by Adam Schroeder.\r\nhttps:\/\/community.plotly.com\/t\/the-marker-symbol-y-up-down-leftm-right-doesnt-show-up\/76015\/4?u=lasercho\r\n\r\nhttps:\/\/plotly.com\/python\/reference\/scatter\/?_gl=1*u3qwjg*_ga*NDE5OTk2NjIzLjE2ODEzODc4NDg.*_ga_6G7EE0JNSC*MTY4NjU4Nzk2Ny4zLjEuMTY4NjU4ODA1Ny4wLjAuMA..#scatter-marker-symbol","comments":["It concerns all symbols that are not filled. They are invisible as long as `marker_line_width` defaults to zero. If you set \r\n\r\n```python\r\nnew_scatter = go.Scatter(x=[4,5,6], y=[4,5,6], mode=\"markers\", marker=dict(symbol=symbol, line=dict(width=1)) )\r\n```\r\n\r\nthey show up.\r\n"],"labels":["bug","sev-2"]},{"title":"Create quiver plot example using `marker.angle`and `marker.size`","body":"Create a quiver plot example for the docs that uses `marker.angle`and `marker.size`\r\n\r\n","comments":[],"labels":["documentation"]},{"title":"plotly-express px.treemap has no access to totals ","body":"treemap() has no acees or properties for displaying parent values, even though the values are present in the hover data. I managed to pre-calculate the data and add it into the label property.\r\n\r\nfig = px.treemap(shares_data,\r\n                 title=tit,\r\n                 path=['Type', 'Stock'],\r\n                 values='Holding',\r\n                 color='Growth',\r\n                 color_continuous_scale=[(0, \"red\"), (0.33, \"yellow\"), (1, \"green\")]\r\n                  )\r\n![stonks_plotly2](https:\/\/user-images.githubusercontent.com\/29674819\/228483772-52505421-db9a-4460-a016-99e1e7388732.png)\r\n![stonks_plotly1](https:\/\/user-images.githubusercontent.com\/29674819\/228483782-e42946fc-312d-4adf-9c00-7d3963bdb79c.png)\r\n\r\n","comments":[],"labels":["feature"]},{"title":"example in docs about adding a wms layer not working","body":"doc\/mapbox-layers.md\r\n\r\nthe sample code works but maybe the source https is inaccessible. It works with another source.\r\nMapbox own example source works:\r\n'https:\/\/img.nj.gov\/imagerywms\/Natural2015?bbox={bbox-epsg-3857}&format=image\/png&service=WMS&version=1.1.1&request=GetMap&srs=EPSG:3857&transparent=true&width=256&height=256&layers=Natural2015'","comments":[],"labels":["documentation"]},{"title":"[BUG] Plotly Express constructor: lists passed to `x` and `y` params are mutated","body":"When either the `x` or `y` parameters to the Plotly Express constructor are passed lists of values, they are mutated such that values are converted to string.\r\n\r\nExpected behaviour: Plotly Express should not mutate objects supplied as arguments by the user. \r\n\r\nMinimal example (tested on Plotly 5.13.1 and master branch):\r\n\r\n```python\r\nfrom random import randrange\r\nimport pandas as pd\r\nimport plotly.express as px\r\n\r\ncols, rows = list(range(3)), list(range(10))\r\nprint(cols)\r\ndf = pd.DataFrame({col: [randrange(100) for _row in rows] for col in cols})\r\npx.bar(df, y=cols, barmode=\"group\")\r\nprint(cols)\r\n```\r\n\r\nBefore the `px.bar()` call, `cols` has the value `[1, 2, 3]` and afterwards it is `[\"1\", \"2\", \"3\"]`. The same behaviour occurs for the `x` param and also when using other plotting functions than `pxbar()` (I tried `px.histogram()`).\r\n\r\nI did some poking around, and can see that in the function `build_dataframe` in `plotly\/express\/_core.py`, the some of the fields in the user supplied args have copies made (which would fix this issue), but that is only applied to args found in the `array_attrables` list, which is `[\"dimensions\", \"custom_data\", \"hover_data\", \"path\", \"wide_variable\"]`, which does not include `x` and `y`.","comments":["yeah that does seem like a problem, I agree it's a bug.","Seems pretty deep into the \"wide mode\" code :\/ ... here `y` is interpreted as \"the columns to use in `df`\" and somehow we're forcing them to strings along the way.","It's not all lists, thankfully, just in wide-mode:\r\n\r\n```python\r\nimport plotly.express as px\r\ncols=[1]\r\npx.bar(y=cols)\r\nprint(cols)\r\n```"],"labels":["bug"]},{"title":"facet_row support in px.imshow","body":"# Feature Request: `facet_row` support in `px.imshow`\r\n\r\nIt would be very convenient to be able to utilise the `facet_row` kwarg with `plotly.express.imshow`.\r\n\r\n## Current Behaviour\r\n\r\nCurrently, `px.imshow` only takes the `facet_col` kwarg, limiting the display of multiple heatmap-like traces to a single dimension (e.g. layer slices through a 3D CT image). It is not possible to visualize 4D data without utilising the `animation_frame` kwarg.\r\n\r\n## Motivation\r\n\r\nIn a number of scientific and engineering use-cases, it is useful to visualize data which possesses a dense 4D tensor structure. Any experiment using full factorial design with at least four factors, common in machine learning and biological science applications, falls into this category. Providing a better convenience function for generating heatmap-style plots would improve the utility of Plotly for publication-standard multivariate data visualization. It should be noted that whilst parallel category and parallel coordinate plots offer an arguably better visualization tool for this sort of data, they are still underutilised in publications, and, as such, an expanded `imshow` still has good utility.\r\n\r\n","comments":["I've written an initial attempt to enable this feature; however, it's only designed to work with `xarray.DataArray` input for the time being, and I've only tested it as such. The updated function and a dummy example are given below.\r\n\r\n## Dummy use-case\r\n\r\n```\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\n# Create index labels\r\nidx_A = ['A1', 'A2', 'A3']\r\nidx_B = ['B1', 'B2', 'B3']\r\nidx_C = ['C1', 'C2', 'C3']\r\nidx_D = ['D1', 'D2', 'D3']\r\n\r\nindex = pd.MultiIndex.from_product([idx_A, idx_B, idx_C, idx_D], names=[\"A\", \"B\", \"C\", \"D\"])\r\n\r\nvals = np.random.rand(len(index))\r\n\r\nx = pd.Series(data=vals, index=index,name=\"val\").to_xarray()\r\n\r\nfrom new_imshow import imshow\r\n\r\nfig = imshow(x, x=\"A\",y=\"B\",facet_col=\"C\",facet_row=\"D\")\r\n\r\nfig.show()\r\n```\r\n\r\n## new_imshow.py\r\n\r\n```\r\nimport plotly.graph_objs as go\r\nfrom _plotly_utils.basevalidators import ColorscaleValidator\r\nfrom plotly.express._core import apply_default_cascade, init_figure, configure_animation_controls\r\nfrom plotly.express._imshow import _infer_zmax_from_type, _vectorize_zvalue\r\nfrom plotly.express.imshow_utils import rescale_intensity, _integer_ranges, _integer_types\r\nimport pandas as pd\r\nimport numpy as np\r\nimport itertools\r\nfrom plotly.utils import image_array_to_data_uri\r\n\r\ntry:\r\n    import xarray\r\n\r\n    xarray_imported = True\r\nexcept ImportError:\r\n    xarray_imported = False\r\n\r\ndef imshow(\r\n    img,\r\n    zmin=None,\r\n    zmax=None,\r\n    origin=None,\r\n    labels={},\r\n    x=None,\r\n    y=None,\r\n    animation_frame=None,\r\n    facet_col=None,\r\n    facet_row=None,\r\n    facet_col_wrap=None,\r\n    facet_col_spacing=None,\r\n    facet_row_spacing=None,\r\n    color_continuous_scale=None,\r\n    color_continuous_midpoint=None,\r\n    range_color=None,\r\n    title=None,\r\n    template=None,\r\n    width=None,\r\n    height=None,\r\n    aspect=None,\r\n    contrast_rescaling=None,\r\n    binary_string=None,\r\n    binary_backend=\"auto\",\r\n    binary_compression_level=4,\r\n    binary_format=\"png\",\r\n    text_auto=False,\r\n) -> go.Figure:\r\n    \"\"\"\r\n    Improved version of `plotly.express.imshow`.\r\n    Provides support for the `facet_row` kwarg.\r\n\r\n    Parameters\r\n    ----------\r\n    img: array-like image, or xarray\r\n        The image data. Supported array shapes are\r\n        - (M, N): an image with scalar data. The data is visualized\r\n          using a colormap.\r\n        - (M, N, 3): an image with RGB values.\r\n        - (M, N, 4): an image with RGBA values, i.e. including transparency.\r\n    zmin, zmax : scalar or iterable, optional\r\n        zmin and zmax define the scalar range that the colormap covers. By default,\r\n        zmin and zmax correspond to the min and max values of the datatype for integer\r\n        datatypes (ie [0-255] for uint8 images, [0, 65535] for uint16 images, etc.). For\r\n        a multichannel image of floats, the max of the image is computed and zmax is the\r\n        smallest power of 256 (1, 255, 65535) greater than this max value,\r\n        with a 5% tolerance. For a single-channel image, the max of the image is used.\r\n        Overridden by range_color.\r\n    origin : str, 'upper' or 'lower' (default 'upper')\r\n        position of the [0, 0] pixel of the image array, in the upper left or lower left\r\n        corner. The convention 'upper' is typically used for matrices and images.\r\n    labels : dict with str keys and str values (default `{}`)\r\n        Sets names used in the figure for axis titles (keys ``x`` and ``y``),\r\n        colorbar title and hoverlabel (key ``color``). The values should correspond\r\n        to the desired label to be displayed. If ``img`` is an xarray, dimension\r\n        names are used for axis titles, and long name for the colorbar title\r\n        (unless overridden in ``labels``). Possible keys are: x, y, and color.\r\n    x, y: list-like, optional\r\n        x and y are used to label the axes of single-channel heatmap visualizations and\r\n        their lengths must match the lengths of the second and first dimensions of the\r\n        img argument. They are auto-populated if the input is an xarray.\r\n    animation_frame: int or str, optional (default None)\r\n        axis number along which the image array is sliced to create an animation plot.\r\n        If `img` is an xarray, `animation_frame` can be the name of one the dimensions.\r\n    facet_col: int or str, optional (default None)\r\n        axis number along which the image array is sliced to create a horizontally facetted plot.\r\n        If `img` is an xarray, `facet_col` can be the name of one the dimensions.\r\n    facet_row: int or str, optional (default None)\r\n        axis number along which the image array is sliced to create a vertically facetted plot.\r\n        If `img` is an xarray, `facet_row` can be the name of one the dimensions.\r\n    facet_col_wrap: int\r\n        Maximum number of facet columns. Wraps the column variable at this width,\r\n        so that the column facets span multiple rows.\r\n        Ignored if `facet_col` is None, or if `facet_row` is not None.\r\n    facet_col_spacing: float between 0 and 1\r\n        Spacing between facet columns, in paper units. Default is 0.02.\r\n    facet_row_spacing: float between 0 and 1\r\n        Spacing between facet rows created when ``facet_col_wrap`` is used, in\r\n        paper units. Default is 0.0.7.\r\n    color_continuous_scale : str or list of str\r\n        colormap used to map scalar data to colors (for a 2D image). This parameter is\r\n        not used for RGB or RGBA images. If a string is provided, it should be the name\r\n        of a known color scale, and if a list is provided, it should be a list of CSS-\r\n        compatible colors.\r\n    color_continuous_midpoint : number\r\n        If set, computes the bounds of the continuous color scale to have the desired\r\n        midpoint. Overridden by range_color or zmin and zmax.\r\n    range_color : list of two numbers\r\n        If provided, overrides auto-scaling on the continuous color scale, including\r\n        overriding `color_continuous_midpoint`. Also overrides zmin and zmax. Used only\r\n        for single-channel images.\r\n    title : str\r\n        The figure title.\r\n    template : str or dict or plotly.graph_objects.layout.Template instance\r\n        The figure template name or definition.\r\n    width : number\r\n        The figure width in pixels.\r\n    height: number\r\n        The figure height in pixels.\r\n    aspect: 'equal', 'auto', or None\r\n      - 'equal': Ensures an aspect ratio of 1 or pixels (square pixels)\r\n      - 'auto': The axes is kept fixed and the aspect ratio of pixels is\r\n        adjusted so that the data fit in the axes. In general, this will\r\n        result in non-square pixels.\r\n      - if None, 'equal' is used for numpy arrays and 'auto' for xarrays\r\n        (which have typically heterogeneous coordinates)\r\n    contrast_rescaling: 'minmax', 'infer', or None\r\n        how to determine data values corresponding to the bounds of the color\r\n        range, when zmin or zmax are not passed. If `minmax`, the min and max\r\n        values of the image are used. If `infer`, a heuristic based on the image\r\n        data type is used.\r\n    binary_string: bool, default None\r\n        if True, the image data are first rescaled and encoded as uint8 and\r\n        then passed to plotly.js as a b64 PNG string. If False, data are passed\r\n        unchanged as a numerical array. Setting to True may lead to performance\r\n        gains, at the cost of a loss of precision depending on the original data\r\n        type. If None, use_binary_string is set to True for multichannel (eg) RGB\r\n        arrays, and to False for single-channel (2D) arrays. 2D arrays are\r\n        represented as grayscale and with no colorbar if use_binary_string is\r\n        True.\r\n    binary_backend: str, 'auto' (default), 'pil' or 'pypng'\r\n        Third-party package for the transformation of numpy arrays to\r\n        png b64 strings. If 'auto', Pillow is used if installed,  otherwise\r\n        pypng.\r\n    binary_compression_level: int, between 0 and 9 (default 4)\r\n        png compression level to be passed to the backend when transforming an\r\n        array to a png b64 string. Increasing `binary_compression` decreases the\r\n        size of the png string, but the compression step takes more time. For most\r\n        images it is not worth using levels greater than 5, but it's possible to\r\n        test `len(fig.data[0].source)` and to time the execution of `imshow` to\r\n        tune the level of compression. 0 means no compression (not recommended).\r\n    binary_format: str, 'png' (default) or 'jpg'\r\n        compression format used to generate b64 string. 'png' is recommended\r\n        since it uses lossless compression, but 'jpg' (lossy) compression can\r\n        result if smaller binary strings for natural images.\r\n    text_auto: bool or str (default `False`)\r\n        If `True` or a string, single-channel `img` values will be displayed as text.\r\n        A string like `'.2f'` will be interpreted as a `texttemplate` numeric formatting directive.\r\n    Returns\r\n    -------\r\n    fig : graph_objects.Figure containing the displayed image\r\n    See also\r\n    --------\r\n    plotly.graph_objects.Image : image trace\r\n    plotly.graph_objects.Heatmap : heatmap trace\r\n    Notes\r\n    -----\r\n    In order to update and customize the returned figure, use\r\n    `go.Figure.update_traces` or `go.Figure.update_layout`.\r\n    If an xarray is passed, dimensions names and coordinates are used for\r\n    axes labels and ticks.\r\n    \"\"\"\r\n    args = locals()\r\n    # Preprocess dataframe\r\n\r\n    apply_default_cascade(args)\r\n    labels = labels.copy()\r\n    nslices_facet_col = 1\r\n    nslices_facet_row = 1\r\n    # Product of row and col\r\n    nslices_facets = 1\r\n    if facet_row is None and facet_col is None:\r\n        nrows = 1\r\n        ncols = 1\r\n    else:\r\n        if facet_col is not None:\r\n            if isinstance(facet_col, str):\r\n                facet_col = img.dims.index(facet_col)\r\n            nslices_facet_col = img.shape[facet_col]\r\n        else:\r\n            nslices_facet_col = 1\r\n        if facet_row is not None:\r\n            if isinstance(facet_row, str):\r\n                facet_row = img.dims.index(facet_row)\r\n            nslices_facet_row = img.shape[facet_row]\r\n        else:\r\n            nslices_facet_row = 1\r\n        if facet_col_wrap is None:\r\n            ncols = nslices_facet_col\r\n            nrows = nslices_facet_row\r\n        else:\r\n            ncols = min(int(facet_col_wrap),int(nslices_facet_col))\r\n            nrows = (\r\n                nslices_facet_col \/\/ ncols + 1\r\n                if nslices_facet_col % ncols\r\n                else nslices_facet_col \/\/ ncols\r\n            )\r\n        nslices_facets = nslices_facet_row * nslices_facet_col\r\n\r\n    if animation_frame is not None:\r\n        if isinstance(animation_frame, str):\r\n            animation_frame = img.dims.index(animation_frame)\r\n        nslices_animation = img.shape[animation_frame]\r\n        animation_slices = range(nslices_animation)\r\n    slice_dimensions = (facet_col is not None) + (facet_row is not None) + (\r\n        animation_frame is not None\r\n    )  # 0, 1, 2, or 3\r\n    facet_col_label = None\r\n    facet_row_label = None\r\n    animation_label = None\r\n    img_is_xarray = False\r\n    # ----- Define x and y, set labels if img is an xarray -------------------\r\n    if xarray_imported and isinstance(img, xarray.DataArray):\r\n        dims = list(img.dims)\r\n        img_is_xarray = True\r\n        to_pop = []\r\n        if facet_col is not None:\r\n            facet_col_slices = img.coords[img.dims[facet_col]].values\r\n            to_pop.append(facet_col)\r\n            facet_col_label = img.dims[facet_col]\r\n        if facet_row is not None:\r\n            facet_row_slices = img.coords[img.dims[facet_row]].values\r\n            to_pop.append(facet_row)\r\n            facet_row_label = img.dims[facet_row]\r\n        if animation_frame is not None:\r\n            animation_slices = img.coords[img.dims[animation_frame]].values\r\n            to_pop.append(animation_frame)\r\n            animation_label = img.dims[animation_frame]\r\n        for idx in sorted(to_pop,reverse=True):\r\n            dims.pop(idx)\r\n        if x is None:\r\n            x_label = dims[0]\r\n        else:\r\n            assert isinstance(x,str), \"x must be a `str` or None if `img` is a DataArray.\"\r\n            x_label = x\r\n            dims[0] = x_label\r\n            img = img.transpose(x_label, *[el for el in img.dims if el != x_label])\r\n        if y is None:\r\n            y_label = dims[1]\r\n        else:\r\n            assert isinstance(x,str), \"y must be a `str` or None if `img` is a DataArray.\"\r\n            y_label = y\r\n            dims[1] = y_label\r\n            img = img.transpose(y_label, *[el for el in img.dims if el != y_label])\r\n        # np.datetime64 is not handled correctly by go.Heatmap\r\n        for ax in [x_label, y_label]:\r\n            if np.issubdtype(img.coords[ax].dtype, np.datetime64):\r\n                img.coords[ax] = img.coords[ax].astype(str)\r\n        x = img.coords[x_label].values\r\n        y = img.coords[y_label].values\r\n        if aspect is None:\r\n            aspect = \"auto\"\r\n        if labels.get(\"x\", None) is None:\r\n            labels[\"x\"] = x_label\r\n        if labels.get(\"y\", None) is None:\r\n            labels[\"y\"] = y_label\r\n        if labels.get(\"animation_frame\", None) is None:\r\n            labels[\"animation_frame\"] = animation_label\r\n        if labels.get(\"facet_col\", None) is None:\r\n            labels[\"facet_col\"] = facet_col_label\r\n        if labels.get(\"facet_row\", None) is None:\r\n            labels[\"facet_row\"] = facet_row_label\r\n        if labels.get(\"color\", None) is None:\r\n            labels[\"color\"] = xarray.plot.utils.label_from_attrs(img)\r\n            labels[\"color\"] = labels[\"color\"].replace(\"\\n\", \"<br>\")\r\n    else:\r\n        if hasattr(img, \"columns\") and hasattr(img.columns, \"__len__\"):\r\n            if x is None:\r\n                x = img.columns\r\n            if labels.get(\"x\", None) is None and hasattr(img.columns, \"name\"):\r\n                labels[\"x\"] = img.columns.name or \"\"\r\n        if hasattr(img, \"index\") and hasattr(img.index, \"__len__\"):\r\n            if y is None:\r\n                y = img.index\r\n            if labels.get(\"y\", None) is None and hasattr(img.index, \"name\"):\r\n                labels[\"y\"] = img.index.name or \"\"\r\n\r\n        if labels.get(\"x\", None) is None:\r\n            labels[\"x\"] = \"\"\r\n        if labels.get(\"y\", None) is None:\r\n            labels[\"y\"] = \"\"\r\n        if labels.get(\"color\", None) is None:\r\n            labels[\"color\"] = \"\"\r\n        if aspect is None:\r\n            aspect = \"equal\"\r\n\r\n    # --- Set the value of binary_string (forbidden for pandas)\r\n    if isinstance(img, pd.DataFrame):\r\n        if binary_string:\r\n            raise ValueError(\"Binary strings cannot be used with pandas arrays\")\r\n        is_dataframe = True\r\n    else:\r\n        is_dataframe = False\r\n\r\n    # --------------- Starting from here img is always a numpy array --------\r\n    img = np.asanyarray(img)\r\n    # Reshape array so that animation dimension comes first, then facets, then images\r\n    if facet_row is not None:\r\n        img = np.moveaxis(img, facet_row, 0)\r\n        if animation_frame is not None and animation_frame < facet_row:\r\n            animation_frame += 1\r\n        if facet_col is not None and facet_col < facet_row:\r\n            facet_col += 1\r\n        facet_row = True\r\n    if facet_col is not None:\r\n        img = np.moveaxis(img, facet_col, 0)\r\n        if animation_frame is not None and animation_frame < facet_col:\r\n            animation_frame += 1\r\n        facet_col = True\r\n    if animation_frame is not None:\r\n        img = np.moveaxis(img, animation_frame, 0)\r\n        animation_frame = True\r\n        args[\"animation_frame\"] = (\r\n            \"animation_frame\"\r\n            if labels.get(\"animation_frame\") is None\r\n            else labels[\"animation_frame\"]\r\n        )\r\n    iterables = ()\r\n    if animation_frame is not None:\r\n        iterables += (range(nslices_animation),)\r\n    if facet_col is not None:\r\n        iterables += (range(nslices_facet_col),)\r\n    if facet_row is not None:\r\n        iterables += (range(nslices_facet_row),)\r\n\r\n    # Default behaviour of binary_string: True for RGB images, False for 2D\r\n    if binary_string is None:\r\n        binary_string = img.ndim >= (3 + slice_dimensions) and not is_dataframe\r\n\r\n    # Cast bools to uint8 (also one byte)\r\n    if img.dtype == bool:\r\n        img = 255 * img.astype(np.uint8)\r\n\r\n    if range_color is not None:\r\n        zmin = range_color[0]\r\n        zmax = range_color[1]\r\n\r\n    # -------- Contrast rescaling: either minmax or infer ------------------\r\n    if contrast_rescaling is None:\r\n        contrast_rescaling = \"minmax\" if img.ndim == (2 + slice_dimensions) else \"infer\"\r\n\r\n    # We try to set zmin and zmax only if necessary, because traces have good defaults\r\n    if contrast_rescaling == \"minmax\":\r\n        # When using binary_string and minmax we need to set zmin and zmax to rescale the image\r\n        if (zmin is not None or binary_string) and zmax is None:\r\n            zmax = img.max()\r\n        if (zmax is not None or binary_string) and zmin is None:\r\n            zmin = img.min()\r\n    else:\r\n        # For uint8 data and infer we let zmin and zmax to be None if passed as None\r\n        if zmax is None and img.dtype != np.uint8:\r\n            zmax = _infer_zmax_from_type(img)\r\n        if zmin is None and zmax is not None:\r\n            zmin = 0\r\n\r\n    # For 2d data, use Heatmap trace, unless binary_string is True\r\n    if img.ndim == 2 + slice_dimensions and not binary_string:\r\n        y_index = slice_dimensions\r\n        if y is not None and img.shape[y_index] != len(y):\r\n            raise ValueError(\r\n                f\"The length of the y vector ({len(y)}) must match the length of the first \"\r\n                + f\"dimension of the img matrix ({img.shape[y_index]}).\"\r\n            )\r\n        x_index = slice_dimensions + 1\r\n        if x is not None and img.shape[x_index] != len(x):\r\n            raise ValueError(\r\n                f\"The length of the x vector ({len(x)}) must match the length of the second \"\r\n                + f\"dimension of the img matrix ({img.shape[x_index]}).\"\r\n            )\r\n\r\n        texttemplate = None\r\n        if text_auto is True:\r\n            texttemplate = \"%{z}\"\r\n        elif text_auto is not False:\r\n            texttemplate = \"%{z:\" + text_auto + \"}\"\r\n\r\n        traces = [\r\n            go.Heatmap(\r\n                x=x,\r\n                y=y,\r\n                z=img[index_tup],\r\n                coloraxis=\"coloraxis1\",\r\n                name=str(i),\r\n                texttemplate=texttemplate,\r\n            )\r\n            for i, index_tup in enumerate(itertools.product(*iterables))\r\n        ]\r\n        autorange = True if origin == \"lower\" else \"reversed\"\r\n        layout = dict(yaxis=dict(autorange=autorange))\r\n        if aspect == \"equal\":\r\n            layout[\"xaxis\"] = dict(scaleanchor=\"y\", constrain=\"domain\")\r\n            layout[\"yaxis\"][\"constrain\"] = \"domain\"\r\n        colorscale_validator = ColorscaleValidator(\"colorscale\", \"imshow\")\r\n        layout[\"coloraxis1\"] = dict(\r\n            colorscale=colorscale_validator.validate_coerce(\r\n                args[\"color_continuous_scale\"]\r\n            ),\r\n            cmid=color_continuous_midpoint,\r\n            cmin=zmin,\r\n            cmax=zmax,\r\n        )\r\n        if labels[\"color\"]:\r\n            layout[\"coloraxis1\"][\"colorbar\"] = dict(title_text=labels[\"color\"])\r\n\r\n    # For 2D+RGB data, use Image trace\r\n    elif (\r\n        img.ndim >= 3\r\n        and (img.shape[-1] in [3, 4] or slice_dimensions and binary_string)\r\n    ) or (img.ndim == 2 and binary_string):\r\n        rescale_image = True  # to check whether image has been modified\r\n        if zmin is not None and zmax is not None:\r\n            zmin, zmax = (\r\n                _vectorize_zvalue(zmin, mode=\"min\"),\r\n                _vectorize_zvalue(zmax, mode=\"max\"),\r\n            )\r\n        x0, y0, dx, dy = (None,) * 4\r\n        error_msg_xarray = (\r\n            \"Non-numerical coordinates were passed with xarray `img`, but \"\r\n            \"the Image trace cannot handle it. Please use `binary_string=False` \"\r\n            \"for 2D data or pass instead the numpy array `img.values` to `px.imshow`.\"\r\n        )\r\n        if x is not None:\r\n            x = np.asanyarray(x)\r\n            if np.issubdtype(x.dtype, np.number):\r\n                x0 = x[0]\r\n                dx = x[1] - x[0]\r\n            else:\r\n                error_msg = (\r\n                    error_msg_xarray\r\n                    if img_is_xarray\r\n                    else (\r\n                        \"Only numerical values are accepted for the `x` parameter \"\r\n                        \"when an Image trace is used.\"\r\n                    )\r\n                )\r\n                raise ValueError(error_msg)\r\n        if y is not None:\r\n            y = np.asanyarray(y)\r\n            if np.issubdtype(y.dtype, np.number):\r\n                y0 = y[0]\r\n                dy = y[1] - y[0]\r\n            else:\r\n                error_msg = (\r\n                    error_msg_xarray\r\n                    if img_is_xarray\r\n                    else (\r\n                        \"Only numerical values are accepted for the `y` parameter \"\r\n                        \"when an Image trace is used.\"\r\n                    )\r\n                )\r\n                raise ValueError(error_msg)\r\n        if binary_string:\r\n            if zmin is None and zmax is None:  # no rescaling, faster\r\n                img_rescaled = img\r\n                rescale_image = False\r\n            elif img.ndim == 2 + slice_dimensions:  # single-channel image\r\n                img_rescaled = rescale_intensity(\r\n                    img, in_range=(zmin[0], zmax[0]), out_range=np.uint8\r\n                )\r\n            else:\r\n                img_rescaled = np.stack(\r\n                    [\r\n                        rescale_intensity(\r\n                            img[..., ch],\r\n                            in_range=(zmin[ch], zmax[ch]),\r\n                            out_range=np.uint8,\r\n                        )\r\n                        for ch in range(img.shape[-1])\r\n                    ],\r\n                    axis=-1,\r\n                )\r\n            img_str = [\r\n                image_array_to_data_uri(\r\n                    img_rescaled[index_tup],\r\n                    backend=binary_backend,\r\n                    compression=binary_compression_level,\r\n                    ext=binary_format,\r\n                )\r\n                for index_tup in itertools.product(*iterables)\r\n            ]\r\n\r\n            traces = [\r\n                go.Image(source=img_str_slice, name=str(i), x0=x0, y0=y0, dx=dx, dy=dy)\r\n                for i, img_str_slice in enumerate(img_str)\r\n            ]\r\n        else:\r\n            colormodel = \"rgb\" if img.shape[-1] == 3 else \"rgba256\"\r\n            traces = [\r\n                go.Image(\r\n                    z=img[index_tup],\r\n                    zmin=zmin,\r\n                    zmax=zmax,\r\n                    colormodel=colormodel,\r\n                    x0=x0,\r\n                    y0=y0,\r\n                    dx=dx,\r\n                    dy=dy,\r\n                )\r\n                for index_tup in itertools.product(*iterables)\r\n            ]\r\n        layout = {}\r\n        if origin == \"lower\" or (dy is not None and dy < 0):\r\n            layout[\"yaxis\"] = dict(autorange=True)\r\n        if dx is not None and dx < 0:\r\n            layout[\"xaxis\"] = dict(autorange=\"reversed\")\r\n    else:\r\n        raise ValueError(\r\n            \"px.imshow only accepts 2D single-channel, RGB or RGBA images. \"\r\n            \"An image of shape %s was provided. \"\r\n            \"Alternatively, 3- or 4-D single or multichannel datasets can be \"\r\n            \"visualized using the `facet_col` or\/and `animation_frame` arguments.\"\r\n            % str(img.shape)\r\n        )\r\n\r\n    # Now build figure\r\n    col_labels = []\r\n    if facet_col is not None:\r\n        slice_label = (\r\n            \"facet_col\" if labels.get(\"facet_col\") is None else labels[\"facet_col\"]\r\n        )\r\n        col_labels = [\"%s=%s\" % (slice_label, str(i)) for i in facet_col_slices]\r\n    row_labels = []\r\n    if facet_row is not None:\r\n        slice_label = (\r\n            \"facet_row\" if labels.get(\"facet_row\") is None else labels[\"facet_row\"]\r\n        )\r\n        row_labels = [\"%s=%s\" % (slice_label, str(i)) for i in facet_row_slices]\r\n    fig = init_figure(args, \"xy\", [], nrows, ncols, col_labels, row_labels)\r\n    for attr_name in [\"height\", \"width\"]:\r\n        if args[attr_name]:\r\n            layout[attr_name] = args[attr_name]\r\n    if args[\"title\"]:\r\n        layout[\"title_text\"] = args[\"title\"]\r\n    elif args[\"template\"].layout.margin.t is None:\r\n        layout[\"margin\"] = {\"t\": 60}\r\n\r\n    frame_list = []\r\n    for index, trace in enumerate(traces):\r\n        if (facet_col and index < nrows * ncols) or index == 0:\r\n            fig.add_trace(trace, row=nrows - index \/\/ ncols, col=index % ncols + 1)\r\n    if animation_frame is not None:\r\n        for i, index in zip(range(nslices_animation), animation_slices):\r\n            frame_list.append(\r\n                dict(\r\n                    data=traces[nslices_facets * i : nslices_facets * (i + 1)],\r\n                    layout=layout,\r\n                    name=str(index),\r\n                )\r\n            )\r\n    if animation_frame:\r\n        fig.frames = frame_list\r\n    fig.update_layout(layout)\r\n    # Hover name, z or color\r\n    if binary_string and rescale_image and not np.all(img == img_rescaled):\r\n        # we rescaled the image, hence z is not displayed in hover since it does\r\n        # not correspond to img values\r\n        hovertemplate = \"%s: %%{x}<br>%s: %%{y}<extra><\/extra>\" % (\r\n            labels[\"x\"] or \"x\",\r\n            labels[\"y\"] or \"y\",\r\n        )\r\n    else:\r\n        if trace[\"type\"] == \"heatmap\":\r\n            hover_name = \"%{z}\"\r\n        elif img.ndim == 2:\r\n            hover_name = \"%{z[0]}\"\r\n        elif img.ndim == 3 and img.shape[-1] == 3:\r\n            hover_name = \"[%{z[0]}, %{z[1]}, %{z[2]}]\"\r\n        else:\r\n            hover_name = \"%{z}\"\r\n        hovertemplate = \"%s: %%{x}<br>%s: %%{y}<br>%s: %s<extra><\/extra>\" % (\r\n            labels[\"x\"] or \"x\",\r\n            labels[\"y\"] or \"y\",\r\n            labels[\"color\"] or \"color\",\r\n            hover_name,\r\n        )\r\n    fig.update_traces(hovertemplate=hovertemplate)\r\n    if labels[\"x\"]:\r\n        fig.update_xaxes(title_text=labels[\"x\"], row=1)\r\n    if labels[\"y\"]:\r\n        fig.update_yaxes(title_text=labels[\"y\"], col=1)\r\n    configure_animation_controls(args, go.Image, fig)\r\n    fig.update_layout(template=args[\"template\"], overwrite=True)\r\n    return fig\r\n\r\n```","In case anyone is interested in a similar use-case, I've written a brief convenience function for creating heatmaps from `pd.DataFrame` objects.\r\n\r\n```\r\ndef heatmaps(\r\n        data_frame,\r\n        x,\r\n        y,\r\n        color,\r\n        animation_frame=None,\r\n        facet_col=None,\r\n        facet_row=None,\r\n        facet_col_wrap=None,\r\n        facet_col_spacing=None,\r\n        facet_row_spacing=None,\r\n        zmin=None,\r\n        zmax=None,\r\n        origin=None,\r\n        labels={},\r\n        color_continuous_scale=None,\r\n        color_continuous_midpoint=None,\r\n        range_color=None,\r\n        title=None,\r\n        template=None,\r\n        width=None,\r\n        height=None,\r\n        aspect=None):\r\n    indexes = [el for el in [x,y,animation_frame,facet_col,facet_row] if el is not None]\r\n    data_frame = data_frame.set_index(indexes)[color].to_xarray()\r\n    # Replace labels to their px.imshow equivalent (i.e. `x` label is called `x`, not the value of x)\r\n    for k,v in dict(x=x,y=y,facet_col=facet_col,facet_row=facet_row, color=color).items():\r\n        if v in labels:\r\n            labels[k] = labels.pop(v)\r\n    return imshow(data_frame,zmin=zmin, zmax=zmax, origin=origin, labels=labels, x=x, y=y, animation_frame=animation_frame,\r\n                  facet_col=facet_col, facet_row=facet_row, facet_col_wrap=facet_col_wrap, facet_col_spacing=facet_col_spacing,\r\n                  facet_row_spacing=facet_row_spacing, color_continuous_scale=color_continuous_scale,\r\n                  color_continuous_midpoint=color_continuous_midpoint, range_color=range_color, title=title, template=template,\r\n                  width=width, height=height, aspect=aspect)\r\n```"],"labels":["feature"]},{"title":"Bump webpack from 5.75.0 to 5.76.0 in \/packages\/javascript\/jupyterlab-plotly","body":"Bumps [webpack](https:\/\/github.com\/webpack\/webpack) from 5.75.0 to 5.76.0.\n<details>\n<summary>Release notes<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/webpack\/webpack\/releases\">webpack's releases<\/a>.<\/em><\/p>\n<blockquote>\n<h2>v5.76.0<\/h2>\n<h2>Bugfixes<\/h2>\n<ul>\n<li>Avoid cross-realm object access by <a href=\"https:\/\/github.com\/Jack-Works\"><code>@\u200bJack-Works<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16500\">webpack\/webpack#16500<\/a><\/li>\n<li>Improve hash performance via conditional initialization by <a href=\"https:\/\/github.com\/lvivski\"><code>@\u200blvivski<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16491\">webpack\/webpack#16491<\/a><\/li>\n<li>Serialize <code>generatedCode<\/code> info to fix bug in asset module cache restoration by <a href=\"https:\/\/github.com\/ryanwilsonperkin\"><code>@\u200bryanwilsonperkin<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16703\">webpack\/webpack#16703<\/a><\/li>\n<li>Improve performance of <code>hashRegExp<\/code> lookup by <a href=\"https:\/\/github.com\/ryanwilsonperkin\"><code>@\u200bryanwilsonperkin<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16759\">webpack\/webpack#16759<\/a><\/li>\n<\/ul>\n<h2>Features<\/h2>\n<ul>\n<li>add <code>target<\/code> to <code>LoaderContext<\/code> type by <a href=\"https:\/\/github.com\/askoufis\"><code>@\u200baskoufis<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16781\">webpack\/webpack#16781<\/a><\/li>\n<\/ul>\n<h2>Security<\/h2>\n<ul>\n<li><a href=\"https:\/\/github.com\/advisories\/GHSA-3rfm-jhwj-7488\">CVE-2022-37603<\/a> fixed by <a href=\"https:\/\/github.com\/akhilgkrishnan\"><code>@\u200bakhilgkrishnan<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16446\">webpack\/webpack#16446<\/a><\/li>\n<\/ul>\n<h2>Repo Changes<\/h2>\n<ul>\n<li>Fix HTML5 logo in README by <a href=\"https:\/\/github.com\/jakebailey\"><code>@\u200bjakebailey<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16614\">webpack\/webpack#16614<\/a><\/li>\n<li>Replace TypeScript logo in README by <a href=\"https:\/\/github.com\/jakebailey\"><code>@\u200bjakebailey<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16613\">webpack\/webpack#16613<\/a><\/li>\n<li>Update actions\/cache dependencies by <a href=\"https:\/\/github.com\/piwysocki\"><code>@\u200bpiwysocki<\/code><\/a> in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16493\">webpack\/webpack#16493<\/a><\/li>\n<\/ul>\n<h2>New Contributors<\/h2>\n<ul>\n<li><a href=\"https:\/\/github.com\/Jack-Works\"><code>@\u200bJack-Works<\/code><\/a> made their first contribution in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16500\">webpack\/webpack#16500<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/lvivski\"><code>@\u200blvivski<\/code><\/a> made their first contribution in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16491\">webpack\/webpack#16491<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/jakebailey\"><code>@\u200bjakebailey<\/code><\/a> made their first contribution in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16614\">webpack\/webpack#16614<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/akhilgkrishnan\"><code>@\u200bakhilgkrishnan<\/code><\/a> made their first contribution in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16446\">webpack\/webpack#16446<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/ryanwilsonperkin\"><code>@\u200bryanwilsonperkin<\/code><\/a> made their first contribution in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16703\">webpack\/webpack#16703<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/piwysocki\"><code>@\u200bpiwysocki<\/code><\/a> made their first contribution in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16493\">webpack\/webpack#16493<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/askoufis\"><code>@\u200baskoufis<\/code><\/a> made their first contribution in <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/pull\/16781\">webpack\/webpack#16781<\/a><\/li>\n<\/ul>\n<p><strong>Full Changelog<\/strong>: <a href=\"https:\/\/github.com\/webpack\/webpack\/compare\/v5.75.0...v5.76.0\">https:\/\/github.com\/webpack\/webpack\/compare\/v5.75.0...v5.76.0<\/a><\/p>\n<\/blockquote>\n<\/details>\n<details>\n<summary>Commits<\/summary>\n<ul>\n<li><a href=\"https:\/\/github.com\/webpack\/webpack\/commit\/97b1718720c33f1b17302a74c5284b01e02ec001\"><code>97b1718<\/code><\/a> Merge pull request <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/issues\/16781\">#16781<\/a> from askoufis\/loader-context-target-type<\/li>\n<li><a href=\"https:\/\/github.com\/webpack\/webpack\/commit\/b84efe6224b276bf72e4c5e2f4e76acddfaeef07\"><code>b84efe6<\/code><\/a> Merge pull request <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/issues\/16759\">#16759<\/a> from ryanwilsonperkin\/real-content-hash-regex-perf<\/li>\n<li><a href=\"https:\/\/github.com\/webpack\/webpack\/commit\/c98e9e001441b165c7ed4845700839730b505833\"><code>c98e9e0<\/code><\/a> Merge pull request <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/issues\/16493\">#16493<\/a> from piwysocki\/patch-1<\/li>\n<li><a href=\"https:\/\/github.com\/webpack\/webpack\/commit\/5f34acfbc074da6cc09f48944d7f2b4273ffb3f8\"><code>5f34acf<\/code><\/a> feat: Add <code>target<\/code> to <code>LoaderContext<\/code> type<\/li>\n<li><a href=\"https:\/\/github.com\/webpack\/webpack\/commit\/b7fc4d876deb958d7ee81ecc00a312e39a354a44\"><code>b7fc4d8<\/code><\/a> Merge pull request <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/issues\/16703\">#16703<\/a> from ryanwilsonperkin\/ryanwilsonperkin\/fix-16160<\/li>\n<li><a href=\"https:\/\/github.com\/webpack\/webpack\/commit\/63ea82da4d4e4242b6a6285fc937f0684f264fe8\"><code>63ea82d<\/code><\/a> Merge branch 'webpack:main' into patch-1<\/li>\n<li><a href=\"https:\/\/github.com\/webpack\/webpack\/commit\/4ba225225b1348c8776ca5b5fe53468519413bc0\"><code>4ba2252<\/code><\/a> Merge pull request <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/issues\/16446\">#16446<\/a> from akhilgkrishnan\/patch-1<\/li>\n<li><a href=\"https:\/\/github.com\/webpack\/webpack\/commit\/1acd6350be3d74d4ac70b64cbbc60f27724b618b\"><code>1acd635<\/code><\/a> Merge pull request <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/issues\/16613\">#16613<\/a> from jakebailey\/ts-logo<\/li>\n<li><a href=\"https:\/\/github.com\/webpack\/webpack\/commit\/302eb37fe19ed7ca60eaf895aca4f9da9dfd7931\"><code>302eb37<\/code><\/a> Merge pull request <a href=\"https:\/\/redirect.github.com\/webpack\/webpack\/issues\/16614\">#16614<\/a> from jakebailey\/html5-logo<\/li>\n<li><a href=\"https:\/\/github.com\/webpack\/webpack\/commit\/cfdb1dfe59b33bf7441b8a8e4fc58d75e4f54cee\"><code>cfdb1df<\/code><\/a> Improve performance of hashRegExp lookup<\/li>\n<li>Additional commits viewable in <a href=\"https:\/\/github.com\/webpack\/webpack\/compare\/v5.75.0...v5.76.0\">compare view<\/a><\/li>\n<\/ul>\n<\/details>\n<details>\n<summary>Maintainer changes<\/summary>\n<p>This version was pushed to npm by <a href=\"https:\/\/www.npmjs.com\/~evilebottnawi\">evilebottnawi<\/a>, a new releaser for webpack since your current version.<\/p>\n<\/details>\n<br \/>\n\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=webpack&package-manager=npm_and_yarn&previous-version=5.75.0&new-version=5.76.0)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https:\/\/github.com\/plotly\/plotly.py\/network\/alerts).\n\n<\/details>","comments":[],"labels":["dependencies","javascript"]},{"title":"[Feature Requested]: Sunburst sort option to be optionally set individually by \"onion layer\"","body":"Hi, I've been looking everywhere on the web, and it appears that sorting for Sunburst charts can be set either `True `or `False`\r\n(cf plotly\/plotly.js#4823 and plotly\/plotly.js#5164)\r\n\r\nWould it be possible to add the possibility to set it independantly for the different \"onion layers\"\r\nas it is the case for many parameters?\r\n\r\nsomething like `sort=[True, False, False]` (which would be the thing specifically needed in my case )\r\n\r\nThanks in advance \ud83d\udc4d ","comments":["Based on your capitalization of `True` and `False` it seems like you're mostly using things from Python... if you're interested in changes done to `px.sunburst()` then I'd recommend moving this issue over to the Plotly.py repo: https:\/\/github.com\/plotly\/plotly.py\/",">  I'd recommend moving this issue over to the Plotly.py repo: https:\/\/github.com\/plotly\/plotly.py\/\n\nThanks Nicolas.\nIs that possible for me to move it or I need to recreate it on the other repo?","I'll move it now... see you on the other side!","OK. Here is where Plotly Express converts between the input data frame and the structure which go.Sunburst requires. Any changes to how things are sorted would need to be made here. https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/packages\/python\/plotly\/plotly\/express\/_core.py#L1543","To be clear, right now there's no sorting option in the python wrapper at all? Neither by \"onion layer\" nor for the plot as a whole?"],"labels":["feature"]},{"title":"Allow disabling lookup of missing prop names","body":"When running a large update on a plot, sometimes the time is dominated by the lookup for missing names, even when this lookup serves no purpose, such as in `plotly.subplots.make_subplots` where new axes are being added by the plotly library itself, and finding \"nearby\" names is not helpful when all that is needed is a check if the name already exists.\r\n\r\nIn [`plotly.basedatatypes.BaseDatatype._perform_update`](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/packages\/python\/plotly\/plotly\/basedatatypes.py#L3833), for each key to be updated it calls [`_check_path_in_prop_tree`](https:\/\/github.com\/plotly\/plotly.py\/blob\/8a151e17fbd0a80f09636645d5e84fb2996de710\/packages\/python\/plotly\/plotly\/basedatatypes.py#L159), but then ignores the error that is generated if the `plotly_obj` is a `BaseLayoutType` and the key matches one of the `_subplot_re_match` keywords, and just adds the key to the plotly_obj instead.\r\n\r\nThis call to `_check_path_in_prop_tree` is expensive when \r\n- there are a large number of defined keys in the layout (such as when there are a large number of subplots being initialized) and\r\n- the path is not yet in the prop tree\r\n\r\nWhen those conditions are met, the prop lookup `check_path_in_prop_tree` calls `BasePlotlyType.__getitem__`, which then calls `BasePlotlyType._raise_on_invalid_property_error`, which then calls `_plotly_utils.utils.find_closest_string` for each new property being added.  `find_closest_string` uses a `levenshtein` lookup and this takes geometrically more time the more keys there are to compare, which is the root of the problem.\r\n\r\nIf the lookup could be disabled in `_raise_on_invalid_property_error`, that would help, but there is a problem in that `_check_path_in_prop_tree` is using an implicit `__getitem__` on the `plotly_obj`, [here](https:\/\/github.com\/plotly\/plotly.py\/blob\/8a151e17fbd0a80f09636645d5e84fb2996de710\/packages\/python\/plotly\/plotly\/basedatatypes.py#L186)\r\n\r\nThe issue can be resolved by disabling the lookup completely, as shown in the second example notebook below, where `_plotly_utils.utils` is monkey-patched so that `find_closest_string` always raises an error, but this doesn't seem like the best way to handle it.\r\n\r\n## Example one: without disabling lookup\r\n```python\r\nimport plotly.subplots\r\nimport cProfile\r\nimport pstats\r\nfrom pstats import SortKey\r\n\r\ncProfile.run('fig = plotly.subplots.make_subplots(rows=20, cols=20)', 'restats')\r\np = pstats.Stats('restats')\r\np.sort_stats(SortKey.CUMULATIVE).print_stats(20)\r\n```\r\n\r\n    Mon Mar 13 15:24:56 2023    restats\r\n    \r\n             55179619 function calls (54968062 primitive calls) in 18.368 seconds\r\n    \r\n       Ordered by: cumulative time\r\n       List reduced from 868 to 20 due to restriction <20>\r\n    \r\n       ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        150\/1    0.000    0.000   18.368   18.368 {built-in method builtins.exec}\r\n            1    0.000    0.000   18.368   18.368 <string>:1(<module>)\r\n            1    0.000    0.000   18.368   18.368 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/subplots.py:7(make_subplots)\r\n            1    0.002    0.002   18.368   18.368 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/_subplots.py:45(make_subplots)\r\n            1    0.000    0.000   18.043   18.043 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/graph_objs\/_figure.py:736(update_layout)\r\n            1    0.000    0.000   18.043   18.043 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:1378(update_layout)\r\n            1    0.000    0.000   18.043   18.043 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:5096(update)\r\n        802\/2    0.010    0.000   17.536    8.768 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:3841(_perform_update)\r\n    19302\/14494    0.065    0.000   17.219    0.001 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:4659(__getitem__)\r\n    4893\/4891    0.018    0.000   17.209    0.004 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:159(_check_path_in_prop_tree)\r\n    14498\/14494    0.015    0.000   17.096    0.001 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:5828(__getitem__)\r\n          798    0.005    0.000   16.890    0.021 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:5047(_ret)\r\n          798    0.001    0.000   16.879    0.021 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/_plotly_utils\/utils.py:449(find_closest_string)\r\n         1600    0.176    0.000   16.878    0.011 {built-in method builtins.sorted}\r\n       390621    0.099    0.000   16.702    0.000 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/_plotly_utils\/utils.py:450(_key)\r\n    470776\/390621   11.539    0.000   16.603    0.000 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/_plotly_utils\/utils.py:430(levenshtein)\r\n     24961225    3.540    0.000    3.540    0.000 {built-in method builtins.min}\r\n     24971843    1.419    0.000    1.419    0.000 {method 'append' of 'list' objects}\r\n            1    0.000    0.000    0.507    0.507 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/contextlib.py:139(__exit__)\r\n            2    0.000    0.000    0.507    0.253 {built-in method builtins.next}\r\n    \r\n    \r\n    <pstats.Stats at 0x7faae67616f0>\r\n\r\n## Example two: disabling lookup\r\n```python\r\n## Patch the library to disable levenshtein lookup for missing strings.\r\ndef disable_find_closest_string(string, strings):\r\n    raise ValueError()\r\n\r\nimport _plotly_utils.utils\r\n_plotly_utils.utils.find_closest_string = disable_find_closest_string\r\n```\r\n\r\n\r\n```python\r\nimport plotly.subplots\r\nimport cProfile\r\nimport pstats\r\nfrom pstats import SortKey\r\n\r\ncProfile.run('fig = plotly.subplots.make_subplots(rows=20, cols=20)', 'restats')\r\np = pstats.Stats('restats')\r\np.sort_stats(SortKey.CUMULATIVE).print_stats(20)\r\n```\r\n\r\n    Mon Mar 13 15:25:05 2023    restats\r\n    \r\n             2674042 function calls (2542640 primitive calls) in 1.498 seconds\r\n    \r\n       Ordered by: cumulative time\r\n       List reduced from 866 to 20 due to restriction <20>\r\n    \r\n       ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        150\/1    0.000    0.000    1.498    1.498 {built-in method builtins.exec}\r\n            1    0.000    0.000    1.498    1.498 <string>:1(<module>)\r\n            1    0.000    0.000    1.498    1.498 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/subplots.py:7(make_subplots)\r\n            1    0.002    0.002    1.497    1.497 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/_subplots.py:45(make_subplots)\r\n            1    0.000    0.000    1.170    1.170 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/graph_objs\/_figure.py:736(update_layout)\r\n            1    0.000    0.000    1.170    1.170 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:1378(update_layout)\r\n            1    0.000    0.000    1.170    1.170 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:5096(update)\r\n        802\/2    0.009    0.000    0.626    0.313 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:3841(_perform_update)\r\n            1    0.000    0.000    0.544    0.544 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/contextlib.py:139(__exit__)\r\n            2    0.000    0.000    0.544    0.272 {built-in method builtins.next}\r\n            2    0.000    0.000    0.544    0.272 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:2995(batch_update)\r\n            1    0.000    0.000    0.544    0.544 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:2860(plotly_update)\r\n         9697    0.072    0.000    0.443    0.000 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:51(_str_to_dict_path_full)\r\n            1    0.000    0.000    0.417    0.417 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:2934(_perform_plotly_update)\r\n            1    0.004    0.004    0.417    0.417 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:2611(_perform_plotly_relayout)\r\n         1600    0.003    0.000    0.371    0.000 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:5842(__setitem__)\r\n         1596    0.004    0.000    0.355    0.000 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:5726(_set_subplotid_prop)\r\n         1598    0.010    0.000    0.353    0.000 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:5237(_set_compound_prop)\r\n       103626    0.042    0.000    0.347    0.000 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:1811(_str_to_dict_path)\r\n    19302\/14494    0.066    0.000    0.343    0.000 \/home\/bbm\/miniforge3\/envs\/refl1d_py310\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:4659(__getitem__)\r\n    \r\n    \r\n    <pstats.Stats at 0x7ff048631750>\r\n","comments":["Oof, this is a complex call stack. From your comment in the other issue \"it is pre-calculating an error message for a missing key\" ... it seems to me like pre-calculating the messages is the problem here. If we're not actually using any invalid keys, we shouldn't be anywhere near a levenshtein calculation IMO. Since you've been in the code here, does there seem like a decent way to not precalculate things?","I think the top of `_perform_update` could be restructured so that it doesn't first call `_check_path_in_prop_tree`, but instead does a simple `__contains__` check for the property.  If the property doesn't exist and doesn't match `_subplot_re_match`, then go ahead and calculate and throw the exception, but for internal methods like `make_subplots` that would never happen, and you'd never have to calculate the (increasingly expensive!) exception messages."],"labels":["performance"]},{"title":"histogram marginal plot order reversed wrt legend","body":"Also in the official example:\r\nhttps:\/\/plotly.com\/python\/marginal-plots\/\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/90703978\/223702655-3960bd9a-7040-4429-b78c-b1ff92a21566.png)\r\n\r\nI think its confusing that the order of species (colors)\r\nis not the same in the marginal plots (above the main plot) and in the legend","comments":["Hi @amstaniec. There's no way to change the `marginal_x` trace order, but if you'd like the order to be consistent with the legend, you can reverse the legend explicitly with\r\n\r\n```python\r\nfig.update_layout(legend_traceorder=\"reversed\")\r\n```","Then the right marginal looks backward (though that's less obvious, but I'd expect top->bottom to match left -> right)\r\nAnother option is to flip the top marginal:\r\n```py\r\nfig.update_layout(yaxis3_autorange='reversed')\r\n```\r\n@amstaniec I do see your point, it would be better if these matched the legend order. Even if you think of this trick you need to fiddle to figure out that it's `yaxis3`, and if the base plot is faceted you'd need to find ALL the relevant y axes. @nicolaskruchten What do you think about flipping these axes by default? I guess it would apply to all `marginal_x` plots except `'histogram'`?","This problem exists pretty much everywhere due to our mostly consistent inconsistent usage of origin-is-at-the-bottom\/legend-reads-top-down so I'm hesitant to special-case just marginals: stacked bar charts, stacked areas, regular (non-marginal) horizontal box plots...\r\n\r\n<img width=\"1332\" alt=\"image\" src=\"https:\/\/user-images.githubusercontent.com\/203523\/224157152-f3f73dca-b0b0-49d3-a15d-c6e7225cc09c.png\">\r\n","Ah yeah, much more widespread than I realized, and particularly stacking is tricky as you couldn't fix it just by flipping the relevant axis. OK so too big a change to be able to consider a bug but perhaps a mode we could opt into (with a large effort!)"],"labels":["feature"]},{"title":"Plotly FigureWidgets not rendered in Panel","body":"Panel is a good way to create dashboards which can show widgets, including ipywidgets, charts, figures etc. \r\n\r\nUnfortunately Plotly FigureWidgets cannot be shown, neither directly nor when wrapped inside a ipywidget like HBox. \r\n\r\nIt would be brilliant when this would work, since it appears to be the only way for how to combine some dashboard functions with Plotly figure which communicates with the Python process (which would not be possible or extremely clumsy in Plotly Dash)\r\n","comments":[],"labels":["feature"]},{"title":"Allow to set up a number of columns for the legend","body":"Hello!\r\nDo you think it would be possible to add a feature allowing to set up the number of columns in the legend just like in matplotlib? The only way currently to set up several columns is by using the option \"orientation = 'h'\", but then the labels disposition is not natural for a user. The best would be to allow selecting a number of columns when specifying \"orientation = 'v'\".\r\n\r\nProblem: only one column...\r\n![image](https:\/\/user-images.githubusercontent.com\/81229538\/222401709-18e993dc-2024-40be-aaca-138e59da7d8b.png)\r\n\r\nProblem: disposition is not very convenient...\r\n![image](https:\/\/user-images.githubusercontent.com\/81229538\/222402046-e641c603-4d37-4108-969c-81c6e2c141f6.png)\r\n","comments":[],"labels":["feature"]},{"title":"5.13.1: test suite is failing in `_plotly_utils\/tests\/validators\/test_integer_validator.py` unit","body":"I'm packaging your module as an rpm package so I'm using the typical PEP517 based build, install and test cycle used on building packages from non-root account.\r\n- `python3 -sBm build -w --no-isolation`\r\n- because I'm calling `build` with `--no-isolation` I'm using during all processes only locally installed modules\r\n- install .whl file in <\/install\/prefix>\r\n- run pytest with $PYTHONPATH pointing to sitearch and sitelib inside <\/install\/prefix>\r\n- build is performed in env which is *`cut off from access to the public network`* (pytest is executed with `-m \"not network\"`)\r\n\r\nLooks like something is wring when bumoy 1.24.2 is used.\r\nIn melow outpu there are as well some deprecation warnings\r\nHere is pytest output:\r\n<details>\r\n\r\n```console\r\n+ PYTHONPATH=\/home\/tkloczko\/rpmbuild\/BUILDROOT\/python-plotly-5.13.1-2.fc35.x86_64\/usr\/lib64\/python3.8\/site-packages:\/home\/tkloczko\/rpmbuild\/BUILDROOT\/python-plotly-5.13.1-2.fc35.x86_64\/usr\/lib\/python3.8\/site-packages\r\n+ \/usr\/bin\/pytest -ra -m 'not network' --ignore plotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py\r\n==================================================================================== test session starts ====================================================================================\r\nplatform linux -- Python 3.8.16, pytest-7.2.1, pluggy-1.0.0\r\nrootdir: \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/packages\/python\/plotly, configfile: pytest.ini\r\nplugins: anyio-3.6.2\r\ncollected 2568 items \/ 1 error\r\n\r\n========================================================================================== ERRORS ===========================================================================================\r\n_________________________________________________________ ERROR collecting _plotly_utils\/tests\/validators\/test_integer_validator.py _________________________________________________________\r\n_plotly_utils\/tests\/validators\/test_integer_validator.py:77: in <module>\r\n    @pytest.mark.parametrize(\"val\", [-2, -123, np.iinfo(np.int).min])\r\n\/usr\/lib64\/python3.8\/site-packages\/numpy\/__init__.py:305: in __getattr__\r\n    raise AttributeError(__former_attrs__[attr])\r\nE   AttributeError: module 'numpy' has no attribute 'int'.\r\nE   `np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\r\nE   The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\r\nE       https:\/\/numpy.org\/devdocs\/release\/1.20.0-notes.html#deprecations\r\n===================================================================================== warnings summary ======================================================================================\r\n_plotly_utils\/tests\/validators\/test_enumerated_validator.py:17\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/packages\/python\/plotly\/_plotly_utils\/tests\/validators\/test_enumerated_validator.py:17: DeprecationWarning:\r\n\r\n  invalid escape sequence \\d\r\n\r\n_plotly_utils\/tests\/validators\/test_enumerated_validator.py:29\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/packages\/python\/plotly\/_plotly_utils\/tests\/validators\/test_enumerated_validator.py:29: DeprecationWarning:\r\n\r\n  invalid escape sequence \\d\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1945\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1945: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1947\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1947: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1948\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1948: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1957\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1957: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1959\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1959: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1960\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1960: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2002\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2002: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2006\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2006: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2010\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2010: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2014\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2014: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_optional\/test_utils\/test_utils.py:18\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/packages\/python\/plotly\/plotly\/tests\/test_optional\/test_utils\/test_utils.py:18: FutureWarning:\r\n\r\n  pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\r\n\r\n-- Docs: https:\/\/docs.pytest.org\/en\/stable\/how-to\/capture-warnings.html\r\n================================================================================== short test summary info ==================================================================================\r\nERROR _plotly_utils\/tests\/validators\/test_integer_validator.py - AttributeError: module 'numpy' has no attribute 'int'.\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n============================================================================== 13 warnings, 1 error in 11.62s ===============================================================================\r\n```\r\n<\/details>\r\n\r\nHere is list of installed modules in build env\r\n<details>\r\n\r\n```console\r\nPackage              Version\r\n-------------------- --------------\r\nanyio                3.6.2\r\nargon2-cffi          21.3.0\r\nargon2-cffi-bindings 21.2.0\r\nasttokens            2.2.1\r\nattrs                22.2.0\r\nBabel                2.11.0\r\nbackcall             0.2.0\r\nbeautifulsoup4       4.11.2\r\nbleach               6.0.0\r\nBrlapi               0.8.4\r\nbuild                0.9.0\r\ncffi                 1.15.1\r\ncharset-normalizer   3.0.1\r\ncomm                 0.1.2\r\ncontourpy            1.0.7\r\ncycler               0.11.0\r\ndebugpy              1.6.6\r\ndecorator            5.1.1\r\ndefusedxml           0.7.1\r\ndistro               1.8.0\r\nentrypoints          0.4\r\nexceptiongroup       1.0.0\r\nexecuting            1.2.0\r\nfastjsonschema       2.16.1\r\nfonttools            4.38.0\r\ngpg                  1.18.0-unknown\r\nhtml5lib             1.1\r\nidna                 3.4\r\nimportlib-metadata   6.0.0\r\nimportlib-resources  5.12.0\r\niniconfig            2.0.0\r\nipykernel            6.20.2\r\nipython              8.6.0\r\nipython-genutils     0.2.0\r\njedi                 0.18.2\r\nJinja2               3.1.2\r\njson5                0.9.12\r\njsonschema           4.17.3\r\njupyter_client       7.4.9\r\njupyter_core         5.1.3\r\njupyter-server       1.23.3\r\njupyterlab           3.5.1\r\njupyterlab-pygments  0.1.2\r\njupyterlab_server    2.18.0\r\nkiwisolver           1.4.4\r\nlibcomps             0.1.19\r\nlouis                3.24.0\r\nMarkupSafe           2.1.2\r\nmatplotlib           3.6.3\r\nmatplotlib-inline    0.1.6\r\nmistune              2.0.5\r\nnbclassic            0.4.8\r\nnbclient             0.7.2\r\nnbconvert            7.2.9\r\nnbformat             5.7.3\r\nnest-asyncio         1.5.6\r\nnotebook             6.5.2\r\nnotebook_shim        0.2.2\r\nnumpy                1.24.2\r\nolefile              0.46\r\npackaging            23.0\r\npandas               1.5.2\r\npandocfilters        1.5.0\r\nparso                0.8.3\r\npep517               0.13.0\r\npexpect              4.8.0\r\npickleshare          0.7.5\r\nPillow               9.4.0\r\npip                  22.3.1\r\npkgutil_resolve_name 1.3.10\r\nplatformdirs         2.6.0\r\npluggy               1.0.0\r\nply                  3.11\r\nprometheus-client    0.16.0\r\nprompt-toolkit       3.0.36\r\npsutil               5.9.2\r\nptyprocess           0.7.0\r\npure-eval            0.2.2\r\npycparser            2.21\r\nPygments             2.14.0\r\nPyGObject            3.43.1.dev0\r\npyparsing            3.0.9\r\npyrsistent           0.19.3\r\npytest               7.2.1\r\npython-dateutil      2.8.2\r\npytz                 2022.4\r\npyzmq                24.0.1\r\nrequests             2.28.2\r\nrpm                  4.17.0\r\nSciPy                1.8.1\r\nSend2Trash           1.8.0\r\nsetuptools           65.6.3\r\nsix                  1.16.0\r\nsniffio              1.2.0\r\nsoupsieve            2.4\r\nstack-data           0.6.2\r\ntenacity             8.0.1\r\nterminado            0.17.1\r\ntinycss2             1.2.1\r\ntomli                2.0.1\r\ntornado              6.2\r\ntraitlets            5.8.1\r\nurllib3              1.26.12\r\nwcwidth              0.2.6\r\nwebencodings         0.5.1\r\nwebsocket-client     1.5.1\r\nwheel                0.38.4\r\nxarray               2022.12.0\r\nzipp                 3.15.0\r\n```\r\n<\/details>\r\n","comments":["I'm not really following all the details of what you're doing here, but our current test suite does run pretty well in CI. If you can suggest changes to our setup that make it also work in your context, I'd happily accept a PR but I don't think we can spend any cycles on making this particular setup work right now, I'm sorry.","In ticket you have list of modules installed in build env with version.\r\nYou know the best what could be possible cause that exact unit is failing.\r\nI'm asking only to have look on the list of modules, compare that with what you are using and provide kind of expertise what could be worng and\/or some advices aboutpossible steps which I can try to perform to expose caue that exacly this unit is failing.\r\nOnly this and nothing more \ud83d\ude0b \r\nTo solve the issue you need to know cause ..","If you try running the tests using the `requirements.txt` file provided in this repo e.g. here https:\/\/github.com\/plotly\/plotly.py\/tree\/master\/packages\/python\/plotly\/test_requirements you might be able to narrow down the source of the discrepancy.","Just tested 5.14.0. Looks like test suite is ntoot ready for lated `numpy`.\r\n\r\nHere is pytest output:\r\n<details>\r\n\r\n```console\r\n+ PYTHONPATH=\/home\/tkloczko\/rpmbuild\/BUILDROOT\/python-plotly-5.14.0-2.fc35.x86_64\/usr\/lib64\/python3.8\/site-packages:\/home\/tkloczko\/rpmbuild\/BUILDROOT\/python-plotly-5.14.0-2.fc35.x86_64\/usr\/lib\/python3.8\/site-packages\r\n+ \/usr\/bin\/pytest -ra -m 'not network' --deselect _plotly_utils\/tests\/validators\/test_integer_validator.py --ignore plotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.8.16, pytest-7.2.2, pluggy-1.0.0\r\nrootdir: \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.0\/packages\/python\/plotly, configfile: pytest.ini\r\nplugins: anyio-3.6.2\r\ncollected 2569 items \/ 1 error\r\n\r\n==================================== ERRORS ====================================\r\n__ ERROR collecting _plotly_utils\/tests\/validators\/test_integer_validator.py ___\r\n_plotly_utils\/tests\/validators\/test_integer_validator.py:77: in <module>\r\n    @pytest.mark.parametrize(\"val\", [-2, -123, np.iinfo(np.int).min])\r\n\/usr\/lib64\/python3.8\/site-packages\/numpy\/__init__.py:305: in __getattr__\r\n    raise AttributeError(__former_attrs__[attr])\r\nE   AttributeError: module 'numpy' has no attribute 'int'.\r\nE   `np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\r\nE   The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\r\nE       https:\/\/numpy.org\/devdocs\/release\/1.20.0-notes.html#deprecations\r\n=============================== warnings summary ===============================\r\n_plotly_utils\/tests\/validators\/test_enumerated_validator.py:17\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.0\/packages\/python\/plotly\/_plotly_utils\/tests\/validators\/test_enumerated_validator.py:17: DeprecationWarning:\r\n\r\n  invalid escape sequence \\d\r\n\r\n_plotly_utils\/tests\/validators\/test_enumerated_validator.py:29\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.0\/packages\/python\/plotly\/_plotly_utils\/tests\/validators\/test_enumerated_validator.py:29: DeprecationWarning:\r\n\r\n  invalid escape sequence \\d\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1945\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.0\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1945: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1947\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.0\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1947: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1948\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.0\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1948: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1957\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.0\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1957: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1959\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.0\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1959: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1960\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.0\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1960: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2002\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.0\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2002: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2006\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.0\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2006: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2010\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.0\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2010: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2014\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.0\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2014: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_optional\/test_utils\/test_utils.py:18\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.0\/packages\/python\/plotly\/plotly\/tests\/test_optional\/test_utils\/test_utils.py:18: FutureWarning:\r\n\r\n  pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\r\n\r\n-- Docs: https:\/\/docs.pytest.org\/en\/stable\/how-to\/capture-warnings.html\r\n=========================== short test summary info ============================\r\nERROR _plotly_utils\/tests\/validators\/test_integer_validator.py - AttributeErr...\r\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\r\n======================== 13 warnings, 1 error in 10.79s ========================\r\n```\r\n<\/details>\r\n\r\nHere is list of installed modules in build env\r\n<details>\r\n\r\n```console\r\nPackage                  Version\r\n------------------------ --------------\r\naiofiles                 23.1.0\r\nanyio                    3.6.2\r\nargon2-cffi              21.3.0\r\nargon2-cffi-bindings     21.2.0\r\narrow                    1.2.3\r\nasttokens                2.2.1\r\nattrs                    22.2.0\r\nBabel                    2.12.1\r\nbackcall                 0.2.0\r\nbeautifulsoup4           4.12.0\r\nbleach                   6.0.0\r\nBrlapi                   0.8.4\r\nbuild                    0.10.0\r\ncffi                     1.15.1\r\ncharset-normalizer       3.1.0\r\ncomm                     0.1.2\r\ncontourpy                1.0.7\r\ncycler                   0.11.0\r\ndebugpy                  1.6.6\r\ndecorator                5.1.1\r\ndefusedxml               0.7.1\r\ndistro                   1.8.0\r\nexceptiongroup           1.0.0\r\nexecuting                1.2.0\r\nfastjsonschema           2.16.3\r\nfonttools                4.39.3\r\nfqdn                     1.5.1\r\ngpg                      1.18.0-unknown\r\nhtml5lib                 1.1\r\nidna                     3.4\r\nimportlib-metadata       6.1.0\r\nimportlib-resources      5.12.0\r\niniconfig                2.0.0\r\nipykernel                6.22.0\r\nipython                  8.6.0\r\nipython-genutils         0.2.0\r\nisoduration              20.11.0\r\njedi                     0.18.2\r\nJinja2                   3.1.2\r\njson5                    0.9.12\r\njsonpointer              2.2\r\njsonschema               4.17.3\r\njupyter_client           8.1.0\r\njupyter_core             5.3.0\r\njupyter-events           0.6.3\r\njupyter_server           2.5.0\r\njupyter_server_fileid    0.8.0\r\njupyter_server_terminals 0.4.4\r\njupyter_server_ydoc      0.8.0\r\njupyter-ydoc             0.3.4\r\njupyterlab               3.6.2\r\njupyterlab-pygments      0.1.2\r\njupyterlab_server        2.21.0\r\nkiwisolver               1.4.4\r\nlibcomps                 0.1.19\r\nlouis                    3.25.0\r\nMarkupSafe               2.1.2\r\nmatplotlib               3.6.3\r\nmatplotlib-inline        0.1.6\r\nmistune                  2.0.5\r\nnbclassic                0.4.8\r\nnbclient                 0.7.2\r\nnbconvert                7.2.10\r\nnbformat                 5.7.3\r\nnest-asyncio             1.5.6\r\nnotebook                 6.5.2\r\nnotebook_shim            0.2.2\r\nnumpy                    1.24.2\r\nolefile                  0.46\r\npackaging                23.0\r\npandas                   1.5.2\r\npandocfilters            1.5.0\r\nparso                    0.8.3\r\npexpect                  4.8.0\r\npickleshare              0.7.5\r\nPillow                   9.4.0\r\npip                      23.0.1\r\npkgutil_resolve_name     1.3.10\r\nplatformdirs             3.1.1\r\npluggy                   1.0.0\r\nply                      3.11\r\nprometheus-client        0.16.0\r\nprompt-toolkit           3.0.38\r\npsutil                   5.9.2\r\nptyprocess               0.7.0\r\npure-eval                0.2.2\r\npycparser                2.21\r\nPygments                 2.14.0\r\nPyGObject                3.44.1\r\npyparsing                3.0.9\r\npyproject_hooks          1.0.0\r\npyrsistent               0.19.3\r\npytest                   7.2.2\r\npython-dateutil          2.8.2\r\npython-json-logger       2.0.7\r\npytz                     2023.2\r\nPyYAML                   6.0\r\npyzmq                    24.0.1\r\nrequests                 2.28.2\r\nrfc3339-validator        0.1.4\r\nrfc3986-validator        0.1.1\r\nrpm                      4.17.0\r\nSciPy                    1.8.1\r\nSend2Trash               1.8.0\r\nsetuptools               65.6.3\r\nsix                      1.16.0\r\nsniffio                  1.2.0\r\nsoupsieve                2.4\r\nstack-data               0.6.2\r\ntenacity                 8.2.2\r\nterminado                0.17.1\r\ntinycss2                 1.2.1\r\ntomli                    2.0.1\r\ntornado                  6.2\r\ntraitlets                5.8.1\r\ntyping_extensions        4.5.0\r\nuri-template             1.2.0\r\nurllib3                  1.26.15\r\nwcwidth                  0.2.6\r\nwebcolors                1.12\r\nwebencodings             0.5.1\r\nwebsocket-client         1.5.1\r\nwheel                    0.38.4\r\nxarray                   2022.12.0\r\ny-py                     0.6.1\r\nypy-websocket            0.8.4\r\nzipp                     3.15.0\r\n```\r\n<\/details>\r\n","gentle ping .. \ud83e\udd14 \r\n\r\nJust tested 5.14.1 and here is update pytest output\r\n<details>\r\n\r\n```console\r\n+ PYTHONPATH=\/home\/tkloczko\/rpmbuild\/BUILDROOT\/python-plotly-5.14.1-2.fc35.x86_64\/usr\/lib64\/python3.8\/site-packages:\/home\/tkloczko\/rpmbuild\/BUILDROOT\/python-plotly-5.14.1-2.fc35.x86_64\/usr\/lib\/python3.8\/site-packages\r\n+ \/usr\/bin\/pytest -ra -m 'not network'\r\n==================================================================================== test session starts ====================================================================================\r\nplatform linux -- Python 3.8.16, pytest-7.2.2, pluggy-1.0.0\r\nrootdir: \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly, configfile: pytest.ini\r\nplugins: anyio-3.6.2\r\ncollected 2628 items \/ 1 error\r\n\r\n========================================================================================== ERRORS ===========================================================================================\r\n_________________________________________________________ ERROR collecting _plotly_utils\/tests\/validators\/test_integer_validator.py _________________________________________________________\r\n_plotly_utils\/tests\/validators\/test_integer_validator.py:77: in <module>\r\n    @pytest.mark.parametrize(\"val\", [-2, -123, np.iinfo(np.int).min])\r\n\/usr\/lib64\/python3.8\/site-packages\/numpy\/__init__.py:305: in __getattr__\r\n    raise AttributeError(__former_attrs__[attr])\r\nE   AttributeError: module 'numpy' has no attribute 'int'.\r\nE   `np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\r\nE   The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\r\nE       https:\/\/numpy.org\/devdocs\/release\/1.20.0-notes.html#deprecations\r\n===================================================================================== warnings summary ======================================================================================\r\n_plotly_utils\/tests\/validators\/test_enumerated_validator.py:17\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/_plotly_utils\/tests\/validators\/test_enumerated_validator.py:17: DeprecationWarning:\r\n\r\n  invalid escape sequence \\d\r\n\r\n_plotly_utils\/tests\/validators\/test_enumerated_validator.py:29\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/_plotly_utils\/tests\/validators\/test_enumerated_validator.py:29: DeprecationWarning:\r\n\r\n  invalid escape sequence \\d\r\n\r\n..\/..\/..\/..\/..\/..\/..\/..\/usr\/lib\/python3.8\/site-packages\/jupyter_client\/connect.py:20\r\n  \/usr\/lib\/python3.8\/site-packages\/jupyter_client\/connect.py:20: DeprecationWarning:\r\n\r\n  Jupyter is migrating its paths to use standard platformdirs\r\n  given by the platformdirs library.  To remove this warning and\r\n  see the appropriate new directories, set the environment variable\r\n  `JUPYTER_PLATFORM_DIRS=1` and then run `jupyter --paths`.\r\n  The use of platformdirs will be the default in `jupyter_core` v6\r\n\r\n..\/..\/..\/..\/..\/..\/..\/..\/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: 100 warnings\r\n  \/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: DeprecationWarning:\r\n\r\n  Widget._active_widgets is deprecated.\r\n\r\n..\/..\/..\/..\/..\/..\/..\/..\/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: 100 warnings\r\n  \/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: DeprecationWarning:\r\n\r\n  Widget._widget_types is deprecated.\r\n\r\n..\/..\/..\/..\/..\/..\/..\/..\/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: 100 warnings\r\n  \/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: DeprecationWarning:\r\n\r\n  Widget.widget_types is deprecated.\r\n\r\n..\/..\/..\/..\/..\/..\/..\/..\/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: 100 warnings\r\n  \/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: DeprecationWarning:\r\n\r\n  Widget.widgets is deprecated.\r\n\r\n..\/..\/..\/..\/..\/..\/..\/..\/usr\/lib\/python3.8\/site-packages\/ipykernel\/comm\/comm.py:79\r\n  \/usr\/lib\/python3.8\/site-packages\/ipykernel\/comm\/comm.py:79: DeprecationWarning:\r\n\r\n  The `ipykernel.comm.Comm` class has been deprecated. Please use the `comm` module instead.For creating comms, use the function `from comm import create_comm`.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1945\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1945: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1947\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1947: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1948\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1948: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1957\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1957: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1959\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1959: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1960\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1960: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2002\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2002: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2006\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2006: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2010\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2010: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2014\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2014: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\n-- Docs: https:\/\/docs.pytest.org\/en\/stable\/how-to\/capture-warnings.html\r\n================================================================================== short test summary info ==================================================================================\r\nERROR _plotly_utils\/tests\/validators\/test_integer_validator.py - AttributeError: module 'numpy' has no attribute 'int'.\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n============================================================================== 414 warnings, 1 error in 11.24s ==============================================================================\r\n```\r\n<\/details>\r\n","After add _plotly_utils\/tests\/validators\/test_integer_validator.py  to --ignore list more units are failing\r\n<details>\r\n\r\n```console\r\n+ PYTHONPATH=\/home\/tkloczko\/rpmbuild\/BUILDROOT\/python-plotly-5.14.1-2.fc35.x86_64\/usr\/lib64\/python3.8\/site-packages:\/home\/tkloczko\/rpmbuild\/BUILDROOT\/python-plotly-5.14.1-2.fc35.x86_64\/usr\/lib\/python3.8\/site-packages\r\n+ \/usr\/bin\/pytest -ra -m 'not network' --deselect _plotly_utils\/tests\/validators\/test_integer_validator.py --ignore _plotly_utils\/tests\/validators\/test_integer_validator.py\r\n============================= test session starts ==============================\r\nplatform linux -- Python 3.8.16, pytest-7.3.1, pluggy-1.0.0\r\nrootdir: \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\r\nconfigfile: pytest.ini\r\nplugins: anyio-3.6.2\r\ncollected 2628 items\r\n\r\n_plotly_utils\/tests\/validators\/test_angle_validator.py ................. [  0%]\r\n........................................................                 [  2%]\r\n_plotly_utils\/tests\/validators\/test_any_validator.py ..............      [  3%]\r\n_plotly_utils\/tests\/validators\/test_basetraces_validator.py ........     [  3%]\r\n_plotly_utils\/tests\/validators\/test_boolean_validator.py ............... [  4%]\r\n...                                                                      [  4%]\r\n_plotly_utils\/tests\/validators\/test_color_validator.py ................. [  4%]\r\n......................................                                   [  6%]\r\n_plotly_utils\/tests\/validators\/test_colorlist_validator.py ............. [  6%]\r\n..                                                                       [  6%]\r\n_plotly_utils\/tests\/validators\/test_colorscale_validator.py ............ [  7%]\r\n........................................................................ [ 10%]\r\n........................................................................ [ 12%]\r\n........................................................................ [ 15%]\r\n........................................................................ [ 18%]\r\n........................................................................ [ 21%]\r\n...................                                                      [ 21%]\r\n_plotly_utils\/tests\/validators\/test_compound_validator.py .......        [ 22%]\r\n_plotly_utils\/tests\/validators\/test_compoundarray_validator.py .......   [ 22%]\r\n_plotly_utils\/tests\/validators\/test_dash_validator.py .................. [ 23%]\r\n....                                                                     [ 23%]\r\n_plotly_utils\/tests\/validators\/test_dataarray_validator.py ............. [ 23%]\r\n.                                                                        [ 23%]\r\n_plotly_utils\/tests\/validators\/test_enumerated_validator.py ............ [ 24%]\r\n..............                                                           [ 24%]\r\n_plotly_utils\/tests\/validators\/test_flaglist_validator.py .............. [ 25%]\r\n........................................................................ [ 28%]\r\n.............                                                            [ 28%]\r\n_plotly_utils\/tests\/validators\/test_imageuri_validator.py ......         [ 28%]\r\n_plotly_utils\/tests\/validators\/test_infoarray_validator.py ............. [ 29%]\r\n........................................................................ [ 31%]\r\n.....................................                                    [ 33%]\r\n_plotly_utils\/tests\/validators\/test_literal_validator.py .......         [ 33%]\r\n_plotly_utils\/tests\/validators\/test_number_validator.py ................ [ 34%]\r\n................................................                         [ 36%]\r\n_plotly_utils\/tests\/validators\/test_pandas_series_input.py ............. [ 36%]\r\n........................................................................ [ 39%]\r\n...                                                                      [ 39%]\r\n_plotly_utils\/tests\/validators\/test_string_validator.py ................ [ 40%]\r\n.............................................                            [ 41%]\r\n_plotly_utils\/tests\/validators\/test_subplotid_validator.py ............. [ 42%]\r\n.....                                                                    [ 42%]\r\n_plotly_utils\/tests\/validators\/test_xarray_input.py .................... [ 43%]\r\n.....................                                                    [ 43%]\r\nplotly\/matplotlylib\/mplexporter\/tests\/test_basic.py ..F....s.F.          [ 44%]\r\nplotly\/matplotlylib\/mplexporter\/tests\/test_utils.py .F.                  [ 44%]\r\nplotly\/tests\/test_core\/test_colors\/test_colors.py .......                [ 44%]\r\nplotly\/tests\/test_core\/test_errors\/test_dict_path_errors.py ............ [ 45%]\r\n....                                                                     [ 45%]\r\nplotly\/tests\/test_core\/test_figure_messages\/test_add_traces.py ......    [ 45%]\r\nplotly\/tests\/test_core\/test_figure_messages\/test_batch_animate.py .      [ 45%]\r\nplotly\/tests\/test_core\/test_figure_messages\/test_move_delete_traces.py . [ 45%]\r\n.......                                                                  [ 45%]\r\nplotly\/tests\/test_core\/test_figure_messages\/test_on_change.py .......... [ 46%]\r\n.....                                                                    [ 46%]\r\nplotly\/tests\/test_core\/test_figure_messages\/test_plotly_relayout.py .... [ 46%]\r\n.....                                                                    [ 46%]\r\nplotly\/tests\/test_core\/test_figure_messages\/test_plotly_restyle.py ..... [ 47%]\r\n...                                                                      [ 47%]\r\nplotly\/tests\/test_core\/test_figure_messages\/test_plotly_update.py ..     [ 47%]\r\nplotly\/tests\/test_core\/test_figure_widget_backend\/test_missing_ipywigets.py . [ 47%]\r\n                                                                         [ 47%]\r\nplotly\/tests\/test_core\/test_figure_widget_backend\/test_validate_no_frames.py . [ 47%]\r\n.....                                                                    [ 47%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_annotations.py .......       [ 47%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_append_trace.py ......       [ 48%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_constructor.py .........     [ 48%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_data.py .........            [ 48%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_error_bars.py ...            [ 48%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_figure.py .................  [ 49%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_figure_properties.py ....... [ 49%]\r\n....................                                                     [ 50%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_frames.py .....              [ 50%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_graph_objs.py .........      [ 51%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py .   [ 51%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_layout_subplots.py ......... [ 51%]\r\n..                                                                       [ 51%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_properties_validated.py .... [ 51%]\r\n........                                                                 [ 51%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_property_assignment.py ..... [ 52%]\r\n.......................                                                  [ 53%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_repr.py ..                   [ 53%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_scatter.py .                 [ 53%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_template.py ................ [ 53%]\r\n...............                                                          [ 54%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_to_ordered_dict.py ..        [ 54%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_update.py .........s.        [ 54%]\r\nplotly\/tests\/test_core\/test_graph_objs\/test_validate.py .                [ 54%]\r\nplotly\/tests\/test_core\/test_offline\/test_offline.py .................... [ 55%]\r\n.....                                                                    [ 55%]\r\nplotly\/tests\/test_core\/test_optional_imports\/test_optional_imports.py .. [ 55%]\r\n..                                                                       [ 55%]\r\nplotly\/tests\/test_core\/test_subplots\/test_find_nonempty_subplots.py .    [ 55%]\r\nplotly\/tests\/test_core\/test_subplots\/test_get_subplot.py ..              [ 56%]\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py ............. [ 56%]\r\n....................................................                     [ 58%]\r\nplotly\/tests\/test_core\/test_update_objects\/test_row_col_subplot_addressing.py . [ 58%]\r\n.........................                                                [ 59%]\r\nplotly\/tests\/test_core\/test_update_objects\/test_selector_matches.py .... [ 59%]\r\n.......                                                                  [ 59%]\r\nplotly\/tests\/test_core\/test_update_objects\/test_update_annotations.py .. [ 60%]\r\n.............                                                            [ 60%]\r\nplotly\/tests\/test_core\/test_update_objects\/test_update_layout.py ...     [ 60%]\r\nplotly\/tests\/test_core\/test_update_objects\/test_update_subplots.py ..... [ 60%]\r\n.....                                                                    [ 60%]\r\nplotly\/tests\/test_core\/test_update_objects\/test_update_traces.py ....... [ 61%]\r\n......                                                                   [ 61%]\r\nplotly\/tests\/test_core\/test_utils\/test_utils.py ....                     [ 61%]\r\nplotly\/tests\/test_io\/test_deepcopy_pickle.py ......                      [ 61%]\r\nplotly\/tests\/test_io\/test_html.py ..                                     [ 61%]\r\nplotly\/tests\/test_io\/test_pathlib.py .                                   [ 61%]\r\nplotly\/tests\/test_io\/test_renderers.py ................................. [ 63%]\r\n....................                                                     [ 64%]\r\nplotly\/tests\/test_io\/test_to_from_json.py .............................. [ 65%]\r\n......                                                                   [ 65%]\r\nplotly\/tests\/test_io\/test_to_from_plotly_json.py .........E............. [ 66%]\r\n........................................................................ [ 68%]\r\n...E...                                                                  [ 69%]\r\nplotly\/tests\/test_optional\/test_autoshapes\/test_annotated_shapes.py .... [ 69%]\r\n......                                                                   [ 69%]\r\nplotly\/tests\/test_optional\/test_autoshapes\/test_axis_span_shapes.py .... [ 69%]\r\n..............                                                           [ 70%]\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py .. [ 70%]\r\n.........................................................FFFFF.          [ 72%]\r\nplotly\/tests\/test_optional\/test_kaleido\/test_kaleido.py FF.....F         [ 73%]\r\nplotly\/tests\/test_optional\/test_matplotlylib\/test_annotations.py s       [ 73%]\r\nplotly\/tests\/test_optional\/test_matplotlylib\/test_axis_scales.py s       [ 73%]\r\nplotly\/tests\/test_optional\/test_matplotlylib\/test_bars.py sss            [ 73%]\r\nplotly\/tests\/test_optional\/test_matplotlylib\/test_data.py ssss           [ 73%]\r\nplotly\/tests\/test_optional\/test_matplotlylib\/test_date_times.py ss       [ 73%]\r\nplotly\/tests\/test_optional\/test_matplotlylib\/test_lines.py ss            [ 73%]\r\nplotly\/tests\/test_optional\/test_matplotlylib\/test_scatter.py ss          [ 73%]\r\nplotly\/tests\/test_optional\/test_matplotlylib\/test_subplots.py s          [ 73%]\r\nplotly\/tests\/test_optional\/test_offline\/test_offline.py ....             [ 73%]\r\nplotly\/tests\/test_optional\/test_px\/test_colors.py ..                     [ 73%]\r\nplotly\/tests\/test_optional\/test_px\/test_facets.py ...                    [ 74%]\r\nplotly\/tests\/test_optional\/test_px\/test_imshow.py ...................... [ 74%]\r\n..................................................                       [ 76%]\r\nplotly\/tests\/test_optional\/test_px\/test_marginals.py ................... [ 77%]\r\n.........................                                                [ 78%]\r\nplotly\/tests\/test_optional\/test_px\/test_pandas_backend.py .............. [ 78%]\r\n..........                                                               [ 79%]\r\nplotly\/tests\/test_optional\/test_px\/test_px.py .......................... [ 80%]\r\n........................................................................ [ 83%]\r\n.....F                                                                   [ 83%]\r\nplotly\/tests\/test_optional\/test_px\/test_px_functions.py ..............   [ 83%]\r\nplotly\/tests\/test_optional\/test_px\/test_px_hover.py ........             [ 84%]\r\nplotly\/tests\/test_optional\/test_px\/test_px_input.py .................... [ 84%]\r\n........................................................................ [ 87%]\r\n...............................                                          [ 88%]\r\nplotly\/tests\/test_optional\/test_px\/test_px_wide.py ..................... [ 89%]\r\n........................................................................ [ 92%]\r\n........................................................................ [ 95%]\r\n..........                                                               [ 95%]\r\nplotly\/tests\/test_optional\/test_px\/test_trendline.py FFF...FFF...FFFF... [ 96%]\r\nFFFF....F                                                                [ 96%]\r\nplotly\/tests\/test_optional\/test_subplots\/test_make_subplots.py ...       [ 96%]\r\nplotly\/tests\/test_optional\/test_tools\/test_figure_factory.py ........... [ 97%]\r\n.....................                                                    [ 97%]\r\nplotly\/tests\/test_optional\/test_utils\/test_utils.py .................... [ 98%]\r\n.......                                                                  [ 98%]\r\nplotly\/tests\/test_orca\/test_image_renderers.py FFFF                      [ 99%]\r\nplotly\/tests\/test_orca\/test_orca_server.py F.FFFFFF                      [ 99%]\r\nplotly\/tests\/test_orca\/test_sg_scraper.py F                              [ 99%]\r\nplotly\/tests\/test_orca\/test_to_image.py FFFFF.FFFFFFF                    [ 99%]\r\ntest_init\/test_dependencies_not_imported.py F                            [ 99%]\r\ntest_init\/test_lazy_imports.py F                                         [100%]\r\n\r\n[..]\r\n\r\n=============================== warnings summary ===============================\r\n_plotly_utils\/tests\/validators\/test_enumerated_validator.py:17\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/_plotly_utils\/tests\/validators\/test_enumerated_validator.py:17: DeprecationWarning:\r\n\r\n  invalid escape sequence \\d\r\n\r\n_plotly_utils\/tests\/validators\/test_enumerated_validator.py:29\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/_plotly_utils\/tests\/validators\/test_enumerated_validator.py:29: DeprecationWarning:\r\n\r\n  invalid escape sequence \\d\r\n\r\n..\/..\/..\/..\/..\/..\/..\/..\/usr\/lib\/python3.8\/site-packages\/jupyter_client\/connect.py:20\r\n  \/usr\/lib\/python3.8\/site-packages\/jupyter_client\/connect.py:20: DeprecationWarning:\r\n\r\n  Jupyter is migrating its paths to use standard platformdirs\r\n  given by the platformdirs library.  To remove this warning and\r\n  see the appropriate new directories, set the environment variable\r\n  `JUPYTER_PLATFORM_DIRS=1` and then run `jupyter --paths`.\r\n  The use of platformdirs will be the default in `jupyter_core` v6\r\n\r\n..\/..\/..\/..\/..\/..\/..\/..\/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: 100 warnings\r\n  \/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: DeprecationWarning:\r\n\r\n  Widget._active_widgets is deprecated.\r\n\r\n..\/..\/..\/..\/..\/..\/..\/..\/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: 100 warnings\r\n  \/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: DeprecationWarning:\r\n\r\n  Widget._widget_types is deprecated.\r\n\r\n..\/..\/..\/..\/..\/..\/..\/..\/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: 100 warnings\r\n  \/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: DeprecationWarning:\r\n\r\n  Widget.widget_types is deprecated.\r\n\r\n..\/..\/..\/..\/..\/..\/..\/..\/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: 100 warnings\r\n  \/usr\/lib\/python3.8\/site-packages\/traitlets\/traitlets.py:1016: DeprecationWarning:\r\n\r\n  Widget.widgets is deprecated.\r\n\r\n..\/..\/..\/..\/..\/..\/..\/..\/usr\/lib\/python3.8\/site-packages\/ipywidgets\/widgets\/widget.py:528: 1 warning\r\nplotly\/tests\/test_core\/test_figure_widget_backend\/test_missing_ipywigets.py: 1 warning\r\nplotly\/tests\/test_core\/test_figure_widget_backend\/test_validate_no_frames.py: 6 warnings\r\nplotly\/tests\/test_io\/test_to_from_json.py: 8 warnings\r\n  \/usr\/lib\/python3.8\/site-packages\/ipywidgets\/widgets\/widget.py:528: DeprecationWarning:\r\n\r\n  The `ipykernel.comm.Comm` class has been deprecated. Please use the `comm` module instead.For creating comms, use the function `from comm import create_comm`.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1945\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1945: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1947\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1947: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1948\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1948: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1957\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1957: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1959\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1959: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1960\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:1960: DeprecationWarning:\r\n\r\n  invalid escape sequence \\(\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2002\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2002: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2006\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2006: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2010\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2010: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2014\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tests\/test_core\/test_subplots\/test_make_subplots.py:2014: DeprecationWarning:\r\n\r\n  invalid escape sequence \\.\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_annotations.py: 7 warnings\r\nplotly\/tests\/test_core\/test_graph_objs\/test_data.py: 1 warning\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py: 2 warnings\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py: 4 warnings\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:62: DeprecationWarning:\r\n\r\n  plotly.graph_objs.Annotations is deprecated.\r\n  Please replace it with a list or tuple of instances of the following types\r\n    - plotly.graph_objs.layout.Annotation\r\n    - plotly.graph_objs.layout.scene.Annotation\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_annotations.py: 1 warning\r\nplotly\/tests\/test_core\/test_graph_objs\/test_append_trace.py: 2 warnings\r\nplotly\/tests\/test_core\/test_graph_objs\/test_data.py: 9 warnings\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py: 2 warnings\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py: 33 warnings\r\nplotly\/tests\/test_optional\/test_utils\/test_utils.py: 1 warning\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:31: DeprecationWarning:\r\n\r\n  plotly.graph_objs.Data is deprecated.\r\n  Please replace it with a list or tuple of instances of the following types\r\n    - plotly.graph_objs.Scatter\r\n    - plotly.graph_objs.Bar\r\n    - plotly.graph_objs.Area\r\n    - plotly.graph_objs.Histogram\r\n    - etc.\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_append_trace.py: 6 warnings\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py: 8 warnings\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/basedatatypes.py:2297: DeprecationWarning:\r\n\r\n  The append_trace method is deprecated and will be removed in a future version.\r\n  Please use the add_trace method with the row and col parameters.\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_append_trace.py: 4 warnings\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py: 64 warnings\r\nplotly\/tests\/test_io\/test_deepcopy_pickle.py: 2 warnings\r\nplotly\/tests\/test_optional\/test_subplots\/test_make_subplots.py: 2 warnings\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/tools.py:460: DeprecationWarning:\r\n\r\n  plotly.tools.make_subplots is deprecated, please use plotly.subplots.make_subplots instead\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_append_trace.py: 6 warnings\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py: 2 warnings\r\nplotly\/tests\/test_core\/test_graph_objs\/test_update.py: 2 warnings\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py: 141 warnings\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:544: DeprecationWarning:\r\n\r\n  plotly.graph_objs.XAxis is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.layout.XAxis\r\n    - plotly.graph_objs.layout.scene.XAxis\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_append_trace.py: 6 warnings\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py: 2 warnings\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py: 141 warnings\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:572: DeprecationWarning:\r\n\r\n  plotly.graph_objs.YAxis is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.layout.YAxis\r\n    - plotly.graph_objs.layout.scene.YAxis\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_append_trace.py::test_append_scatter3d\r\nplotly\/tests\/test_core\/test_graph_objs\/test_append_trace.py::test_append_scatter3d\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py::TestMakeSubplots::test_specs_is_3d\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py::TestMakeSubplots::test_specs_is_3d\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:489: DeprecationWarning:\r\n\r\n  plotly.graph_objs.Scene is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.layout.Scene\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_error_bars.py::test_instantiate_error_x\r\nplotly\/tests\/test_core\/test_graph_objs\/test_error_bars.py::test_instantiate_error_x\r\nplotly\/tests\/test_core\/test_graph_objs\/test_error_bars.py::test_key_error\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:235: DeprecationWarning:\r\n\r\n  plotly.graph_objs.ErrorX is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.scatter.ErrorX\r\n    - plotly.graph_objs.histogram.ErrorX\r\n    - etc.\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_error_bars.py::test_instantiate_error_y\r\nplotly\/tests\/test_core\/test_graph_objs\/test_error_bars.py::test_instantiate_error_y\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:266: DeprecationWarning:\r\n\r\n  plotly.graph_objs.ErrorY is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.scatter.ErrorY\r\n    - plotly.graph_objs.histogram.ErrorY\r\n    - etc.\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_figure.py::FigureTest::test_update_overwrite_data\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:434: DeprecationWarning:\r\n\r\n  plotly.graph_objs.Marker is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.scatter.Marker\r\n    - plotly.graph_objs.histogram.selected.Marker\r\n    - etc.\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_frames.py::FramesTest::test_instantiation\r\nplotly\/tests\/test_core\/test_graph_objs\/test_frames.py::FramesTest::test_instantiation\r\nplotly\/tests\/test_core\/test_graph_objs\/test_frames.py::FramesTest::test_non_string_frame\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:88: DeprecationWarning:\r\n\r\n  plotly.graph_objs.Frames is deprecated.\r\n  Please replace it with a list or tuple of instances of the following types\r\n    - plotly.graph_objs.Frame\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:115: DeprecationWarning:\r\n\r\n  plotly.graph_objs.AngularAxis is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.layout.AngularAxis\r\n    - plotly.graph_objs.layout.polar.AngularAxis\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py: 2 warnings\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py: 9 warnings\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:143: DeprecationWarning:\r\n\r\n  plotly.graph_objs.Annotation is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.layout.Annotation\r\n    - plotly.graph_objs.layout.scene.Annotation\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:173: DeprecationWarning:\r\n\r\n  plotly.graph_objs.ColorBar is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.scatter.marker.ColorBar\r\n    - plotly.graph_objs.surface.ColorBar\r\n    - etc.\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:204: DeprecationWarning:\r\n\r\n  plotly.graph_objs.Contours is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.contour.Contours\r\n    - plotly.graph_objs.surface.Contours\r\n    - etc.\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:293: DeprecationWarning:\r\n\r\n  plotly.graph_objs.ErrorZ is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.scatter3d.ErrorZ\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py: 2 warnings\r\nplotly\/tests\/test_core\/test_subplots\/test_make_subplots.py: 9 warnings\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:322: DeprecationWarning:\r\n\r\n  plotly.graph_objs.Font is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.layout.Font\r\n    - plotly.graph_objs.layout.hoverlabel.Font\r\n    - etc.\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:716: DeprecationWarning:\r\n\r\n  plotly.graph_objs.Histogram2dcontour is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.Histogram2dContour\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:349: DeprecationWarning:\r\n\r\n  plotly.graph_objs.Legend is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.layout.Legend\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:378: DeprecationWarning:\r\n\r\n  plotly.graph_objs.Line is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.scatter.Line\r\n    - plotly.graph_objs.layout.shape.Line\r\n    - etc.\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:405: DeprecationWarning:\r\n\r\n  plotly.graph_objs.Margin is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.layout.Margin\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:463: DeprecationWarning:\r\n\r\n  plotly.graph_objs.RadialAxis is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.layout.RadialAxis\r\n    - plotly.graph_objs.layout.polar.RadialAxis\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:516: DeprecationWarning:\r\n\r\n  plotly.graph_objs.Stream is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.scatter.Stream\r\n    - plotly.graph_objs.area.Stream\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:687: DeprecationWarning:\r\n\r\n  plotly.graph_objs.Trace is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.Scatter\r\n    - plotly.graph_objs.Bar\r\n    - plotly.graph_objs.Area\r\n    - plotly.graph_objs.Histogram\r\n    - etc.\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:625: DeprecationWarning:\r\n\r\n  plotly.graph_objs.XBins is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.histogram.XBins\r\n    - plotly.graph_objs.histogram2d.XBins\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:653: DeprecationWarning:\r\n\r\n  plotly.graph_objs.YBins is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.histogram.YBins\r\n    - plotly.graph_objs.histogram2d.YBins\r\n\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\nplotly\/tests\/test_core\/test_graph_objs\/test_instantiate_hierarchy.py::HierarchyTest::test_construct_datatypes\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/graph_objs\/_deprecations.py:598: DeprecationWarning:\r\n\r\n  plotly.graph_objs.ZAxis is deprecated.\r\n  Please replace it with one of the following more specific types\r\n    - plotly.graph_objs.layout.scene.ZAxis\r\n\r\nplotly\/tests\/test_core\/test_offline\/test_offline.py::PlotlyOfflineTestCase::test_config_bad_options\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/offline\/offline.py:157: UserWarning:\r\n\r\n\r\n  Unrecognized config options supplied: ['bogus']\r\n\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestStreamline::test_simple_streamline\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestStreamline::test_simple_streamline\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestStreamline::test_simple_streamline\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/figure_factory\/_streamline.py:385: PendingDeprecationWarning:\r\n\r\n  the matrix subclass is not the recommended way to represent matrices or deal with linear algebra (see https:\/\/docs.scipy.org\/doc\/numpy\/user\/numpy-for-matlab-users.html). Please adjust your code to use regular ndarray.\r\n\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestStreamline::test_simple_streamline\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestStreamline::test_simple_streamline\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestStreamline::test_simple_streamline\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/figure_factory\/_streamline.py:391: PendingDeprecationWarning:\r\n\r\n  the matrix subclass is not the recommended way to represent matrices or deal with linear algebra (see https:\/\/docs.scipy.org\/doc\/numpy\/user\/numpy-for-matlab-users.html). Please adjust your code to use regular ndarray.\r\n\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_default_dendrogram\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_colorscale\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_random_matrix\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_ticklabels\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/figure_factory\/_dendrogram.py:350: DeprecationWarning:\r\n\r\n  scipy.array is deprecated and will be removed in SciPy 2.0.0, use numpy.array instead\r\n\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_default_dendrogram\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_colorscale\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_random_matrix\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_ticklabels\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/figure_factory\/_dendrogram.py:351: DeprecationWarning:\r\n\r\n  scipy.array is deprecated and will be removed in SciPy 2.0.0, use numpy.array instead\r\n\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_default_dendrogram\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_colorscale\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_random_matrix\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_ticklabels\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/figure_factory\/_dendrogram.py:352: DeprecationWarning:\r\n\r\n  scipy.array is deprecated and will be removed in SciPy 2.0.0, use numpy.array instead\r\n\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_default_dendrogram\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_colorscale\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_orientation\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_random_matrix\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestDendrogram::test_dendrogram_ticklabels\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/figure_factory\/_dendrogram.py:353: DeprecationWarning:\r\n\r\n  scipy.array is deprecated and will be removed in SciPy 2.0.0, use numpy.array instead\r\n\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/figure_factory\/_violin.py:22: DeprecationWarning:\r\n\r\n  the `interpolation=` argument to percentile was renamed to `method=`, which has additional options.\r\n  Users of the modes 'nearest', 'lower', 'higher', or 'midpoint' are encouraged to review the method they used. (Deprecated NumPy 1.22)\r\n\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/figure_factory\/_violin.py:23: DeprecationWarning:\r\n\r\n  the `interpolation=` argument to percentile was renamed to `method=`, which has additional options.\r\n  Users of the modes 'nearest', 'lower', 'higher', or 'midpoint' are encouraged to review the method they used. (Deprecated NumPy 1.22)\r\n\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\nplotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestViolin::test_violin_fig\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/figure_factory\/_violin.py:24: DeprecationWarning:\r\n\r\n  the `interpolation=` argument to percentile was renamed to `method=`, which has additional options.\r\n  Users of the modes 'nearest', 'lower', 'higher', or 'midpoint' are encouraged to review the method they used. (Deprecated NumPy 1.22)\r\n\r\nplotly\/tests\/test_optional\/test_px\/test_imshow.py::test_nan_inf_data[True]\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/express\/imshow_utils.py:245: RuntimeWarning:\r\n\r\n  invalid value encountered in cast\r\n\r\nplotly\/tests\/test_optional\/test_px\/test_px_functions.py::test_timeline\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/express\/_core.py:1678: UserWarning:\r\n\r\n  Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\r\n\r\nplotly\/tests\/test_optional\/test_utils\/test_utils.py::test_masked_constants_example\r\n  \/usr\/lib64\/python3.8\/site-packages\/pandas\/plotting\/_matplotlib\/boxplot.py:12: UserWarning:\r\n\r\n  The NumPy module was reloaded (imported a second time). This can in some cases result in small but subtle issues and is discouraged.\r\n\r\nplotly\/tests\/test_optional\/test_utils\/test_utils.py::test_masked_constants_example\r\n  \/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.14.1\/packages\/python\/plotly\/plotly\/matplotlylib\/renderer.py:611: UserWarning:\r\n\r\n  I found a path object that I don't think is part of a bar chart. Ignoring.\r\n\r\n-- Docs: https:\/\/docs.pytest.org\/en\/stable\/how-to\/capture-warnings.html\r\n=========================== short test summary info ============================\r\nSKIPPED [1] plotly\/matplotlylib\/mplexporter\/tests\/test_basic.py:195: Test fails for older matplotlib\r\nSKIPPED [1] plotly\/tests\/test_core\/test_graph_objs\/test_update.py:61: See https:\/\/github.com\/plotly\/python-api\/issues\/291\r\nSKIPPED [1] plotly\/tests\/test_optional\/test_matplotlylib\/test_annotations.py:17: unconditional skip\r\nSKIPPED [1] plotly\/tests\/test_optional\/test_matplotlylib\/test_axis_scales.py:16: unconditional skip\r\nSKIPPED [1] plotly\/tests\/test_optional\/test_matplotlylib\/test_bars.py:15: unconditional skip\r\nSKIPPED [1] plotly\/tests\/test_optional\/test_matplotlylib\/test_bars.py:35: unconditional skip\r\nSKIPPED [1] plotly\/tests\/test_optional\/test_matplotlylib\/test_bars.py:55: unconditional skip\r\nSKIPPED [1] plotly\/tests\/test_optional\/test_matplotlylib\/test_data.py:15: unconditional skip\r\nSKIPPED [1] plotly\/tests\/test_optional\/test_matplotlylib\/test_data.py:34: unconditional skip\r\nSKIPPED [1] plotly\/tests\/test_optional\/test_matplotlylib\/test_data.py:66: unconditional skip\r\nSKIPPED [1] plotly\/tests\/test_optional\/test_matplotlylib\/test_data.py:77: unconditional skip\r\nSKIPPED [2] plotly\/tests\/test_optional\/test_matplotlylib\/test_date_times.py: unconditional skip\r\nSKIPPED [1] plotly\/tests\/test_optional\/test_matplotlylib\/test_lines.py:16: unconditional skip\r\nSKIPPED [1] plotly\/tests\/test_optional\/test_matplotlylib\/test_lines.py:32: unconditional skip\r\nSKIPPED [1] plotly\/tests\/test_optional\/test_matplotlylib\/test_scatter.py:15: unconditional skip\r\nSKIPPED [1] plotly\/tests\/test_optional\/test_matplotlylib\/test_scatter.py:35: unconditional skip\r\nSKIPPED [1] plotly\/tests\/test_optional\/test_matplotlylib\/test_subplots.py:17: unconditional skip\r\nERROR plotly\/tests\/test_io\/test_to_from_plotly_json.py::test_object_numpy_encoding[auto-False]\r\nERROR plotly\/tests\/test_io\/test_to_from_plotly_json.py::test_object_numpy_encoding[json-False]\r\nFAILED plotly\/matplotlylib\/mplexporter\/tests\/test_basic.py::test_path_collection\r\nFAILED plotly\/matplotlylib\/mplexporter\/tests\/test_basic.py::test_legend_dots\r\nFAILED plotly\/matplotlylib\/mplexporter\/tests\/test_utils.py::test_linestyle - ...\r\nFAILED plotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestTernarycontour::test_colorscale\r\nFAILED plotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestTernarycontour::test_optional_arguments\r\nFAILED plotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestTernarycontour::test_simple_ternary_contour\r\nFAILED plotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestTernarycontour::test_wrong_coordinates\r\nFAILED plotly\/tests\/test_optional\/test_figure_factory\/test_figure_factory.py::TestHexbinMapbox::test_aggregation\r\nFAILED plotly\/tests\/test_optional\/test_kaleido\/test_kaleido.py::test_kaleido_engine_to_image_returns_bytes\r\nFAILED plotly\/tests\/test_optional\/test_kaleido\/test_kaleido.py::test_kaleido_fulljson\r\nFAILED plotly\/tests\/test_optional\/test_kaleido\/test_kaleido.py::test_bytesio\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_px.py::test_render_mode - Modu...\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_trendline.py::test_trendline_results_passthrough[ols-None]\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_trendline.py::test_trendline_results_passthrough[lowess-None]\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_trendline.py::test_trendline_results_passthrough[lowess-options2]\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_trendline.py::test_trendline_enough_values[ols-None]\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_trendline.py::test_trendline_enough_values[lowess-None]\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_trendline.py::test_trendline_enough_values[lowess-options2]\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_trendline.py::test_trendline_nan_values[ols-None]\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_trendline.py::test_trendline_nan_values[ols-options1]\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_trendline.py::test_trendline_nan_values[lowess-None]\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_trendline.py::test_trendline_nan_values[lowess-options3]\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_trendline.py::test_ols_trendline_slopes\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_trendline.py::test_trendline_on_timeseries[ols-None]\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_trendline.py::test_trendline_on_timeseries[lowess-None]\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_trendline.py::test_trendline_on_timeseries[lowess-options2]\r\nFAILED plotly\/tests\/test_optional\/test_px\/test_trendline.py::test_overall_trendline\r\nFAILED plotly\/tests\/test_orca\/test_image_renderers.py::test_png_renderer_mimetype\r\nFAILED plotly\/tests\/test_orca\/test_image_renderers.py::test_svg_renderer_show\r\nFAILED plotly\/tests\/test_orca\/test_image_renderers.py::test_pdf_renderer_show_override\r\nFAILED plotly\/tests\/test_orca\/test_image_renderers.py::test_mimetype_combination\r\nFAILED plotly\/tests\/test_orca\/test_orca_server.py::test_validate_orca - Value...\r\nFAILED plotly\/tests\/test_orca\/test_orca_server.py::test_invalid_executable_found\r\nFAILED plotly\/tests\/test_orca\/test_orca_server.py::test_orca_executable_path\r\nFAILED plotly\/tests\/test_orca\/test_orca_server.py::test_orca_version_number\r\nFAILED plotly\/tests\/test_orca\/test_orca_server.py::test_ensure_orca_ping_and_proc\r\nFAILED plotly\/tests\/test_orca\/test_orca_server.py::test_server_timeout_shutdown\r\nFAILED plotly\/tests\/test_orca\/test_orca_server.py::test_external_server_url\r\nFAILED plotly\/tests\/test_orca\/test_sg_scraper.py::test_scraper - ImportError:...\r\nFAILED plotly\/tests\/test_orca\/test_to_image.py::test_simple_to_image[eps] - V...\r\nFAILED plotly\/tests\/test_orca\/test_to_image.py::test_to_image_default[eps] - ...\r\nFAILED plotly\/tests\/test_orca\/test_to_image.py::test_write_image_string[eps]\r\nFAILED plotly\/tests\/test_orca\/test_to_image.py::test_write_image_writeable[eps]\r\nFAILED plotly\/tests\/test_orca\/test_to_image.py::test_write_image_string_format_inference[eps]\r\nFAILED plotly\/tests\/test_orca\/test_to_image.py::test_write_image_string_bad_extension_failure\r\nFAILED plotly\/tests\/test_orca\/test_to_image.py::test_write_image_string_bad_extension_override\r\nFAILED plotly\/tests\/test_orca\/test_to_image.py::test_topojson_fig_to_image[eps]\r\nFAILED plotly\/tests\/test_orca\/test_to_image.py::test_latex_fig_to_image[eps]\r\nFAILED plotly\/tests\/test_orca\/test_to_image.py::test_problematic_environment_variables[eps]\r\nFAILED plotly\/tests\/test_orca\/test_to_image.py::test_invalid_figure_json - as...\r\nFAILED plotly\/tests\/test_orca\/test_to_image.py::test_bytesio - ValueError:\r\nFAILED test_init\/test_dependencies_not_imported.py::test_dependencies_not_imported\r\nFAILED test_init\/test_lazy_imports.py::test_lazy_imports - AssertionError: as...\r\n= 53 failed, 2555 passed, 18 skipped, 1014 warnings, 2 errors in 88.81s (0:01:28) =\r\n```\r\n<\/details>\r\n\r\nFull pytest log in attachment [python-plotly.FAIL.txt](https:\/\/github.com\/plotly\/plotly.py\/files\/11431635\/python-plotly.FAIL.txt)\r\n"],"labels":["testing"]},{"title":"5.13.1: documentation not ready for `sphinx` 6.1.3?","body":"Looks like `plotly` documentatio ncannot be generated using latest sphinx 61.3.\r\n```console\r\n+ \/usr\/bin\/sphinx-build -n -T -b man doc\/apidoc build\/sphinx\/man\r\nRunning Sphinx v6.1.3\r\nWARNING: Invalid configuration value found: 'language = None'. Update your configuration to a valid language code. Falling back to 'en' (English).\r\nmaking output directory... done\r\n\r\nTraceback (most recent call last):\r\n  File \"\/usr\/lib\/python3.8\/site-packages\/sphinx\/cmd\/build.py\", line 279, in build_main\r\n    app = Sphinx(args.sourcedir, args.confdir, args.outputdir,\r\n  File \"\/usr\/lib\/python3.8\/site-packages\/sphinx\/application.py\", line 237, in __init__\r\n    self.config.setup(self)\r\n  File \"\/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/doc\/apidoc\/conf.py\", line 209, in setup\r\n    app.add_stylesheet(\"plotly-style.css\")  # also can be a full URL\r\nAttributeError: 'Sphinx' object has no attribute 'add_stylesheet'\r\n\r\nException occurred:\r\n  File \"\/home\/tkloczko\/rpmbuild\/BUILD\/plotly.py-5.13.1\/doc\/apidoc\/conf.py\", line 209, in setup\r\n    app.add_stylesheet(\"plotly-style.css\")  # also can be a full URL\r\nAttributeError: 'Sphinx' object has no attribute 'add_stylesheet'\r\nThe full traceback has been saved in \/tmp\/sphinx-err-cu42fgnj.log, if you want to report the issue to the developers.\r\nPlease also report this if it was a user error, so that a better error message can be provided next time.\r\nA bug report can be filed in the tracker at <https:\/\/github.com\/sphinx-doc\/sphinx\/issues>. Thanks!\r\n```\r\n","comments":["Yes, we pin Sphinx to a lower version to generate https:\/\/plotly.com\/python-api-reference\/index.html","Sphinx 6.0.0 has been released exactly 4 months ago so .. \ud83e\udd14 sonner or later it will be nescessary to move to new sphinx version. \ud83d\ude0b \r\nDo you have any plans to do that soon? (just asking)","4 months is basically no time at all! It's unreasonable to expect us to track all the different major-version bumps of other packages in the ecosystem, especially within just a few months. We have no plans to move to a new version of Sphinx, no (and I don't think it will ever be \"necessary\")... we use it to generate the site mentioned above and make no promises about guaranteeing that other people can use it to do other things :)"],"labels":["forward compatibility"]},{"title":"How to remove x-axis if not has all colors","body":"## How to remove x-axis if not has all colors ?\r\n\r\nI need to remove the X axes with values (Supermercado Pinheiro, Pague Menos, Hiper Select and Top da Ilha Supermercados).\r\n\r\n![Example](https:\/\/iili.io\/HMYbk2R.png)","comments":["Hi @mvrpl. I think maybe you could accomplish this by manually specifying which values you want ticks for using a combination of `ticktext` and `tickvals`.\r\n\r\nAn example: https:\/\/plotly.com\/python\/axes\/#enumerated-ticks-with-tickvals-and-ticktext\r\n\r\nIn the docs: https:\/\/plotly.com\/python\/reference\/bar\/#bar-marker-colorbar-ticktext\r\nand https:\/\/plotly.com\/python\/reference\/bar\/#bar-marker-colorbar-tickvals"],"labels":["question"]},{"title":"Problem following How to Contribute (Windows + Conda) - possibly add Nodejs to optional requirements","body":"Hi all. I was running through the Windows + Conda set up instructions in the [Contributing](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/contributing.md#install-requirements---windows--conda) section but once I got to the **Editable install of plotly packages** section I got the following error: \r\n\r\n```bash\r\n(plotly-dev) C:\\Users\\lukef\\plotly.py>pip install -e packages\/python\/plotly\/\r\nObtaining file:\/\/\/C:\/Users\/lukef\/plotly.py\/packages\/python\/plotly\r\n  Installing build dependencies ... done\r\n  Checking if build backend supports build_editable ... done\r\n  Getting requirements to build editable ... error\r\n  error: subprocess-exited-with-error\r\n\r\n  \u00d7 Getting requirements to build editable did not run successfully.\r\n  \u2502 exit code: 1\r\n  \u2570\u2500> [46 lines of output]\r\n      C:\\Users\\lukef\\AppData\\Local\\Temp\\pip-build-env-mlstg81a\\overlay\\Lib\\site-packages\\setuptools\\config\\setupcfg.py:520: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.\r\n        warnings.warn(msg, warning_class)\r\n      C:\\Users\\lukef\\AppData\\Local\\Temp\\pip-build-env-mlstg81a\\overlay\\Lib\\site-packages\\setuptools\\dist.py:328: DistDeprecationWarning: use_2to3 is ignored.\r\n        warnings.warn(f\"{attr} is ignored.\", DistDeprecationWarning)\r\n      running egg_info\r\n      running jsdeps\r\n      `npm` unavailable.  If you're running this command using sudo, make sure `npm` is available to sudo\r\n      rebuilding js and css failed\r\n      missing files: ['C:\\\\Users\\\\lukef\\\\plotly.py\\\\packages\\\\python\\\\plotly\\\\jupyterlab_plotly\\\\nbextension\\\\index.js', 'C:\\\\Users\\\\lukef\\\\plotly.py\\\\packages\\\\python\\\\plotly\\\\jupyterlab_plotly\\\\labextension\\\\package.json']\r\n      Traceback (most recent call last):\r\n        File \"C:\\Users\\lukef\\AppData\\Local\\Continuum\\anaconda3\\envs\\plotly-dev\\lib\\site-packages\\pip\\_vendor\\pep517\\in_process\\_in_process.py\", line 351, in <module>\r\n          main()\r\n        File \"C:\\Users\\lukef\\AppData\\Local\\Continuum\\anaconda3\\envs\\plotly-dev\\lib\\site-packages\\pip\\_vendor\\pep517\\in_process\\_in_process.py\", line 333, in main\r\n          json_out['return_val'] = hook(**hook_input['kwargs'])\r\n        File \"C:\\Users\\lukef\\AppData\\Local\\Continuum\\anaconda3\\envs\\plotly-dev\\lib\\site-packages\\pip\\_vendor\\pep517\\in_process\\_in_process.py\", line 132, in get_requires_for_build_editable\r\n          return hook(config_settings)\r\n        File \"C:\\Users\\lukef\\AppData\\Local\\Temp\\pip-build-env-mlstg81a\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 447, in get_requires_for_build_editable\r\n          return self.get_requires_for_build_wheel(config_settings)\r\n        File \"C:\\Users\\lukef\\AppData\\Local\\Temp\\pip-build-env-mlstg81a\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 338, in get_requires_for_build_wheel\r\n          return self._get_build_requires(config_settings, requirements=['wheel'])\r\n        File \"C:\\Users\\lukef\\AppData\\Local\\Temp\\pip-build-env-mlstg81a\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 320, in _get_build_requires\r\n          self.run_setup()\r\n        File \"C:\\Users\\lukef\\AppData\\Local\\Temp\\pip-build-env-mlstg81a\\overlay\\Lib\\site-packages\\setuptools\\build_meta.py\", line 335, in run_setup\r\n          exec(code, locals())\r\n        File \"<string>\", line 495, in <module>\r\n        File \"C:\\Users\\lukef\\AppData\\Local\\Temp\\pip-build-env-mlstg81a\\overlay\\Lib\\site-packages\\setuptools\\__init__.py\", line 108, in setup\r\n          return distutils.core.setup(**attrs)\r\n        File \"C:\\Users\\lukef\\AppData\\Local\\Temp\\pip-build-env-mlstg81a\\overlay\\Lib\\site-packages\\setuptools\\_distutils\\core.py\", line 185, in setup\r\n          return run_commands(dist)\r\n        File \"C:\\Users\\lukef\\AppData\\Local\\Temp\\pip-build-env-mlstg81a\\overlay\\Lib\\site-packages\\setuptools\\_distutils\\core.py\", line 201, in run_commands\r\n          dist.run_commands()\r\n        File \"C:\\Users\\lukef\\AppData\\Local\\Temp\\pip-build-env-mlstg81a\\overlay\\Lib\\site-packages\\setuptools\\_distutils\\dist.py\", line 969, in run_commands\r\n          self.run_command(cmd)\r\n        File \"C:\\Users\\lukef\\AppData\\Local\\Temp\\pip-build-env-mlstg81a\\overlay\\Lib\\site-packages\\setuptools\\dist.py\", line 1221, in run_command\r\n          super().run_command(command)\r\n        File \"C:\\Users\\lukef\\AppData\\Local\\Temp\\pip-build-env-mlstg81a\\overlay\\Lib\\site-packages\\setuptools\\_distutils\\dist.py\", line 988, in run_command\r\n          cmd_obj.run()\r\n        File \"<string>\", line 104, in run\r\n        File \"<string>\", line 97, in run\r\n        File \"C:\\Users\\lukef\\AppData\\Local\\Temp\\pip-build-env-mlstg81a\\overlay\\Lib\\site-packages\\setuptools\\dist.py\", line 1221, in run_command\r\n          super().run_command(command)\r\n        File \"C:\\Users\\lukef\\AppData\\Local\\Temp\\pip-build-env-mlstg81a\\overlay\\Lib\\site-packages\\setuptools\\_distutils\\dist.py\", line 988, in run_command\r\n          cmd_obj.run()\r\n        File \"<string>\", line 203, in run\r\n      ValueError: Missing file: C:\\Users\\lukef\\plotly.py\\packages\\python\\plotly\\jupyterlab_plotly\\nbextension\\index.js\r\n      npm is required to build a development version of jupyterlab-plotly\r\n      [end of output]\r\n\r\n  note: This error originates from a subprocess, and is likely not a problem with pip.\r\nerror: subprocess-exited-with-error\r\n\r\n\u00d7 Getting requirements to build editable did not run successfully.\r\n\u2502 exit code: 1\r\n\u2570\u2500> See above for output.\r\n\r\nnote: This error originates from a subprocess, and is likely not a problem with pip.\r\n\r\n```\r\n\r\nI found a _somewhat_ similar [StackOverflow](https:\/\/stackoverflow.com\/questions\/61210272\/jupyterlab-plotly-build-npm-extensions-failed-to-install-on-linux) question and was able to resolve it similarly by first conda installing nodejs, i.e. running...\r\n\r\n```bash\r\nconda install -c conda-forge nodejs\r\n```\r\n\r\nAfter that rerunning `pip install -e packages\/python\/plotly\/` worked fine. So I'm wondering if `nodejs` should be added to the optional requirements. Thanks!","comments":["Yes, I agree we should add this to the contributing guide. In fact we now have an `environment.yml` file which `conda` users can use and that should really be integrated into the docs too :)"],"labels":["documentation"]},{"title":" Plotly express bar: slow to setup with animations and\/or color ","body":"https:\/\/github.com\/plotly\/plotly.py\/issues\/2400\r\nI am facing almost the similar problem, according to issue 2400 it has been address and increased the speed of loading.\r\n[tohistogram.txt](https:\/\/github.com\/plotly\/plotly.py\/files\/10787467\/tohistogram.txt)\r\nimport plotly.express as px\r\nimport pandas as pd\r\ndf=pd.read_csv('tohistogram.csv')\r\nfig_bar = px.bar(df,x='Name',y='Value',animation_frame='Time',color='Name',facet_row='Type') (4.8s to load)\r\nfig_bar = px.histogram(df,x='Name',y='Value',animation_frame='Time',color='Name',facet_row='Type') (5.1s to load)\r\nfig_bar = px.bar(df,x='Name',y='Value',animation_frame='Time',facet_row='Type') (1.48s to load)\r\nfig_bar = px.histogram(df,x='Name',y='Value',animation_frame='Time',facet_row='Type') (1.51s to load)\r\nfig_bar.show()\r\nWith color the plotting takes 4.8sec and without color it takes 1.47s,\r\n I have around 9 data point and each data point have 255 entry (Which is starting point, number of data points and entry gets bigger)\r\nIs this reasonable time what I am facing or am I doing something wrong here?\r\n","comments":[],"labels":["performance"]},{"title":"[Typing] `px.timeline.color_continuous_scale` accepts also `list[tuple[float,str]]`, not only `list[str]`","body":"https:\/\/plotly.com\/python-api-reference\/generated\/plotly.express.timeline.html\r\n\r\n> color_continuous_scale (list of str) \u2013 Strings should define valid CSS-colors This list is used to build a continuous color scale when the column denoted by color contains numeric data. Various useful color scales are available in the plotly.express.colors submodules, specifically plotly.express.colors.sequential, plotly.express.colors.diverging and plotly.express.colors.cyclical.\r\n\r\nHowever, here the example shows:\r\n\r\nhttps:\/\/github.com\/plotly\/plotly.py\/blob\/182fff29bce98c30ab516242d4e01d2d2d0bee0f\/doc\/python\/colorscales.md#explicitly-constructing-a-color-scale","comments":["So, we need to change ```color_continuous_scale (list of str)``` to ```color_continuous_scale (list of str and list of a tuple of float and string)```. If I have missed something please guide me.","Here's the syntactic type I've defined:\r\n\r\n```py\r\nPlotlyColorScale = Union[list[str], list[tuple[Union[float, int], str]]]\r\n# or, for py3.10\/3.11\r\nPlotlyColorScale = list[str] | list[tuple[float, str]]]\r\n# ... but for mypy, it should be `float == float | int` (https:\/\/github.com\/python\/mypy\/issues\/3186)\r\n```","Yes, the docstring here is a bit behind the API expansion, but the error message you get if you give it something wrong is complete and correct, as below. Note that a simple string is accepted as well (it is looked up case-insensitively in a list of constants shown below), with or without a trailing `\"_r\"` to reverse it. \r\n\r\n```\r\nThe 'colorscale' property is a colorscale and may be\r\n    specified as:\r\n      - A list of colors that will be spaced evenly to create the colorscale.\r\n        Many predefined colorscale lists are included in the sequential, diverging,\r\n        and cyclical modules in the plotly.colors package.\r\n      - A list of 2-element lists where the first element is the\r\n        normalized color level value (starting at 0 and ending at 1),\r\n        and the second item is a valid color string.\r\n        (e.g. [[0, 'green'], [0.5, 'red'], [1.0, 'rgb(0, 0, 255)']])\r\n      - One of the following named colorscales:\r\n            ['aggrnyl', 'agsunset', 'algae', 'amp', 'armyrose', 'balance',\r\n             'blackbody', 'bluered', 'blues', 'blugrn', 'bluyl', 'brbg',\r\n             'brwnyl', 'bugn', 'bupu', 'burg', 'burgyl', 'cividis', 'curl',\r\n             'darkmint', 'deep', 'delta', 'dense', 'earth', 'edge', 'electric',\r\n             'emrld', 'fall', 'geyser', 'gnbu', 'gray', 'greens', 'greys',\r\n             'haline', 'hot', 'hsv', 'ice', 'icefire', 'inferno', 'jet',\r\n             'magenta', 'magma', 'matter', 'mint', 'mrybm', 'mygbm', 'oranges',\r\n             'orrd', 'oryel', 'oxy', 'peach', 'phase', 'picnic', 'pinkyl',\r\n             'piyg', 'plasma', 'plotly3', 'portland', 'prgn', 'pubu', 'pubugn',\r\n             'puor', 'purd', 'purp', 'purples', 'purpor', 'rainbow', 'rdbu',\r\n             'rdgy', 'rdpu', 'rdylbu', 'rdylgn', 'redor', 'reds', 'solar',\r\n             'spectral', 'speed', 'sunset', 'sunsetdark', 'teal', 'tealgrn',\r\n             'tealrose', 'tempo', 'temps', 'thermal', 'tropic', 'turbid',\r\n             'turbo', 'twilight', 'viridis', 'ylgn', 'ylgnbu', 'ylorbr',\r\n             'ylorrd'].\r\n        Appending '_r' to a named colorscale reverses it.\r\n```","> Yes, the docstring here is a bit behind the API expansion, but the error message you get if you give it something wrong is complete and correct,\r\n\r\nWell ... REPL is not the nicest way to develop with unknown libraries \ud83d\ude05 \r\n\r\n1. typing\/stubbing would've been amazing (https:\/\/github.com\/plotly\/plotly.py\/issues\/1103, https:\/\/github.com\/plotly\/plotly.py\/issues\/3401, (https:\/\/github.com\/plotly\/dash\/issues\/2233), ...)\r\n2. then it's documentation\r\n3. ... then it's pulling your hair \"why does documentation say XYZ, but my developer here did ABC \u2049\ufe0f \u2049\ufe0f \u2049\ufe0f ... and it's working???\"\r\n4. Then ... it's giving wrong values as input so that you can get an error message with the accepted types?\r\n   While I commend your effort, on code that's working, that does not provide the same value (as when developing)\r\n","Yep, there is definitely room for improvement here. My feeling is that maintaining type-hint information is much harder than keeping the docstrings up to date, and we're already struggling to keep the docstrings up to date, so I can't commit to adding and maintaining type hints at the moment. We would gladly accept a PR that makes the docstrings from Plotly Express more complete. The relevant file is here: https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/packages\/python\/plotly\/plotly\/express\/_doc.py#L316","> My feeling is that maintaining type-hint information is much harder than keeping the docstrings up to date, ...\r\n\r\nWe certainly disagree on that \ud83d\ude05 \r\n\r\n`pre-commit` + `mypy` (especially now that it moved to v1.0.0) can go a long way of keeping the code up-to-date. Documentation is text; there's no validating it, certifying it, \"tying it down\".\r\n\r\nWhat led me here is \"flexible usage\" of the plotly API, lack of documentation (and also flexible usage of my code base before calling the said API).\r\n\r\n`mypy` is certainly a difficult demon to master, especially when supporting all \"smart\" cases - but it may be so just because it is actually solving the complex problem of \"over-flexibility allowed\" \ud83e\udd75 "],"labels":["documentation"]},{"title":"[Feature Request] Make the `._has_subplots` method from `go.Figure` accessible.","body":"In some cases, when writings callbacks that only update a subplot of a `Figure`, it is useful to know if the figure will accept an append_trace to a specific location, or if `add_trace` should be used instead.\r\n\r\nI use this workaround (using a try\/except isn't great):\r\n\r\n\r\n        if fig._has_subplots():\r\n            fig.append_trace(trace, 1, 1)\r\n        else:\r\n            _ = fig.add_trace(trace)\r\n\r\nIf I only use `fig.append_trace(trace, 1, 1)`, I get `Exception: In order to reference traces by row and column, you must first use plotly.tools.make_subplots to create the figure with a subplot grid.`\r\n\r\nIf I only use `fig.add_trace(trace)`, the layout gets messed up.\r\n\r\nCould it be possible to make this method public?","comments":[],"labels":["feature"]},{"title":"Polar plot with error bands","body":"Hi! I have a feature request. It would be nice if the `plotly.express` polar plot functions would also have `error_y` \/ `error_y_minus` options in order to draw error bands. This would allow users to inspect group differences in a multivariate space quickly. The issue is [further described on stackoverflow](https:\/\/stackoverflow.com\/questions\/75057418\/how-to-create-a-polar-plot-with-error-bands-in-plotly). The idea would be that each group gets its own trace. For each variable in `theta`, Samples within each group can be used to estimate the mean and some sort of confidence interval (e.g. SEM). ","comments":[],"labels":["feature"]},{"title":"Add support for histfunc='kde' in px.histogram()","body":"Would be great if the `histfunc` argument of `px.histogram()` accepted `'kde'`. It's currently limited to `['count', 'sum', 'avg', 'min', 'max']` but I'm looking for output like what `figure_factory.create_distplot()` gives [when `show_hist=False, show_rug=False`](https:\/\/plotly.com\/python\/distplot\/#plot-only-curve-and-rug).\r\n\r\n```py\r\nimport plotly.figure_factory as ff\r\nimport numpy as np\r\n\r\nx1 = np.random.randn(200) - 1\r\nx2 = np.random.randn(200)\r\nx3 = np.random.randn(200) + 1\r\n\r\nhist_data = [x1, x2, x3]\r\n\r\ngroup_labels = ['Group 1', 'Group 2', 'Group 3']\r\ncolors = ['#333F44', '#37AA9C', '#94F3E4']\r\n\r\n# Create distplot with curve_type set to 'normal'\r\nfig = ff.create_distplot(hist_data, group_labels, show_hist=False, show_rug=False, colors=colors)\r\n\r\n# Add title\r\nfig.update_layout(title_text='Curve and Rug Plot')\r\nfig.show()\r\n```\r\n![newplot](https:\/\/user-images.githubusercontent.com\/30958850\/216717601-cb31008a-4c67-4dd7-9511-83057427f965.png)\r\n\r\n","comments":[],"labels":["feature"]},{"title":"implement Plotly.js\u2019 localization features in Plotly.py","body":"Forum Tread: https:\/\/community.plotly.com\/t\/how-to-get-plotly-to-use-the-set-locale\/43499\r\n\r\nTLDR: You can't get Plotly graphs to show in any other language than English (e.g. axis labels for a date axis). The only workaround is to convert every label into a string, but then you loose some important features like tickstops. \r\n\r\nThe solution would be to get Plotly.py to use the set locale (e.g. `locale.setlocale(locale.LC_ALL, \"\")` to set it to the locale of the machine it's running on) - which apparently works in Plotly.js, but not Plotly.py.\r\n","comments":["Augusto Herrmann put a good write-up in the topic here:\r\nhttps:\/\/community.plotly.com\/t\/how-to-get-plotly-to-use-the-set-locale\/43499\/15?u=fludwig\r\n\r\nUnfortunately, @nicolaskruchten confirmed that this is a problem:\r\nhttps:\/\/community.plotly.com\/t\/how-to-get-plotly-to-use-the-set-locale\/43499\/16?u=fludwig"],"labels":["feature"]},{"title":"Support dict union operator in legend updates","body":"Would be nice if `layout.Legend` instances supported the [`dict` union operator](https:\/\/peps.python.org\/pep-0584):\r\n\r\n```py\r\nimport plotly.graph_objects as go\r\n\r\nfig = go.Figure()\r\n\r\nfig.layout.legend |= dict(title=\"\")\r\n```\r\n\r\n> TypeError: unsupported operand type(s) for |=: 'Legend' and 'dict'\r\n\r\nSince `legend.update()` works in analogy to `dict.update()`\r\n\r\n```py\r\nfig.layout.legend.update(dict(title=\"\"))\r\n\r\n>>> layout.Legend({\r\n    'title': {'text': ''}\r\n})\r\n```\r\n\r\nI was expecting other parts of the `dict` API to work as well.","comments":["That's a cool idea! We'd surely accept a pull-request for that :)"],"labels":["feature"]},{"title":"Horizontal Legend Stays Vertical","body":"Hello, I wasn't able to find a current closed or open issue with my problem so here it is:\r\n\r\nI'm trying to set my legend to horizontal over my candlestick but it keeps staying vertical, I've changed the legend names to be very short \"1\" \"2\" \"3\" etc to see if its a name issue and it still stays vertical.\r\n\r\nthis is the code I'm using: \r\n\r\n> fig.update_layout(legend=dict(orientation=\"h\", yanchor=\"top\", y = 1.03, xanchor=\"left\", x = 0.01))\r\n\r\nCan anyone point me in the right direction?","comments":["Could you provide a simplified version of the entire code, including the code for making the candlestick chart?","```\r\nthe candlesticks are loaded from data into arrays and passed into the add trace\r\n# make plot for graphs\r\nfig = make_subplots(\r\n    rows=2,\r\n    cols=2,\r\n    shared_xaxes=\"columns\",\r\n    shared_yaxes=False,\r\n    column_width=[0.8, 0.2],\r\n    row_heights=[0.8, 0.2],\r\n    horizontal_spacing=0.3,\r\n    vertical_spacing=float(0.1),\r\n)\r\n\r\n\r\n#add candlesticks\r\nfig.add_trace(\r\n    go.Candlestick(\r\n        x= time_data,\r\n        open= open_data,\r\n        high= high_data,\r\n        low= low_data,\r\n        close= close_data,\r\n        showlegend= False,\r\n    ),\r\n    row=1,\r\n    col=1\r\n    )\r\n\r\n\r\n#add volume chart \r\nfig.add_trace(\r\ngo.Bar(\r\n    x=time_data,\r\n    y=volume_data,\r\n    showlegend=False,\r\n    marker = dict(color=volume_colors),\r\n    marker_line_width=0,\r\n    opacity=0.95,\r\n    name=\"Volume\",\r\n    hoverinfo=\"x+y\",\r\n),\r\ncol=1,\r\nrow=2,\r\n)\r\n```","Hm... the legend is horizontal for me. I had to set `showlegend` to `True` of course in your example.\r\n\r\nWhat versions of `plotly.py` and `plotly.js` are you on? Also, perhaps a screenshot of the issue would be helpful.","Plotly 5.11 Python 3.11\r\n\r\nI set showlegend to True in the candlesticks and it is horizontal for me now too somehow, I don't want the candlesticks on the legend however so I never thought to try that I guess.  I have 4 scatter traces I want on the legend only, is it not possible to just have those?"],"labels":["usage"]},{"title":"Feature Request: Arbitrary formatting on x-axis and y-axis tick labels","body":"Thanks for the awesome work on this project! It is incredibly useful!\r\n\r\nI have a feature request. I work for a hedge fund and we want our plotly graphs to follow a standardized format. I am having a hard time through writing a generic formatting function that formats the x-axis and y-axis tick values. \r\n\r\nFor instance, if you wanted to set the tick axis to be bold and include a \"x\" at the end, you would need to do something like:\r\n```\r\nfig.update_layout(\r\n    yaxis = dict(\r\n        tickmode = 'array',\r\n        tickvals = [1, 2, 3],\r\n        ticktext = [\"<b>1x<\/b>\", \"<b>2x<\/b>\", \"<b>3x<\/b>\"]\r\n    )\r\n)\r\n```\r\nWhich is pretty inconvenient because you have to specify the tickvals every time you want to do this. \r\n\r\nSo I was thinking that it could be a good idea to add something like:\r\n`fig.update_xaxis(tick_text_formatter=<function that formats a tick value>)`\r\n\r\nThoughts?\r\n\r\nAgain, thanks for the awesome work!","comments":["The need for what you're asking for is very clear and your proposal makes a lot of sense from the Python developer's perspective but unfortunately this would be extremely challenging with the current architecture, as no Python code can be executed while a figure is being rendered... `update_layout()` and all other Python functions exclusively populate static JSON objects which are passed to Plotly.js for browser-side processing, so there would be no way for such a function to execute, and for security reasons the Plotly.js system cannot accept workaround such as stringified Javascript function in such a place either. We're basically left with the kind of formatting mini-language that we have right now, which we can\/should expand to meet various missing formatting needs. \r\n\r\nRegarding bolding, this is also something which is missing from Plotly.js' formatting concept at the moment. We have font family and font size but not font weight in the data model, although this could be added globally to all text objects I think. Conditional bolding, much like conditional coloring of something like tick text would need to work a bit differently however.","+1 for this kind of a feature. I came a cross a task recently where I needed to create custom format for tick values. I ended up just creating a fixed set of tick values manually but that killed the dynamic nature of the plot's ticks when zooming in on the plot which is a major drawback of my solution.\r\n\r\nJust for a note, the task was to create a secondary y axis ticks which would be proportional to the primary y axis ticks with a custom proportion function (something like `lambda x = 1 - x \/ some_constatnt`)."],"labels":["feature"]},{"title":"Misleading error message when an invalid y column name is provided to px.line","body":"When attempting to plot multiple y values using px.line (or similar), erroneous column names lead to a misleading error message that states that the length of the arguments is incorrect, when in fact the problem is that there the column name is wrong.\r\n\r\nSimple to reproduce:\r\n\r\n```\r\nimport plotly.express as px\r\nimport pandas as pd\r\nimport numpy as np\r\nx = np.linspace(0, 10, 100)\r\ndata1 = x**2\r\ndata2 = x**3\r\ndf = pd.DataFrame({\"x\": x, \"data1\": data1, \"data2\": data2})\r\npx.line(df, x = \"x\", y = [\"data1\", \"data2\"]) # works fine\r\npx.line(df, x = \"x\", y = [\"data1\", \"Data2\"]) \r\n\r\n# this last line gives a misleading error message: \r\n# ValueError: All arguments should have the same length. The length of argument `y` is 2, \r\n# whereas the length of  previously-processed arguments ['x'] is 100\r\n```","comments":["Yes, we should definitely find a way to give you a better hint there that there's a typo in the contents of `y`. It's a bit tricky to do and we're love some help to figure out how to do it! The relevant code is near here: https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/packages\/python\/plotly\/plotly\/express\/_core.py#L1247","The reason it's tricky is that we land deep in that `if` block based on some determination that happened way ahead of time here https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/packages\/python\/plotly\/plotly\/express\/_core.py#L1315 ... basically up front PX decides if it's in \"wide mode\" based on whether or not the contents of `y` are all column names, and then much later if they're not, it checks the length of the data `y` points to against the length of the data `x` points to.","See also https:\/\/github.com\/plotly\/plotly.py\/issues\/3359 and https:\/\/github.com\/plotly\/plotly.py\/issues\/3474 and https:\/\/github.com\/plotly\/plotly.py\/issues\/2586","Hi, was exploring this issue a bit. So the _build_dataframe_ function has another function _is_col_list_ to check if the supplied argument for x\/y is a list or not (hence wide-form) https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/packages\/python\/plotly\/plotly\/express\/_core.py#L1339\r\n\r\nNow this _is_col_list_ function has a check inside it to see if a column is present in the dataframe, and if not it returns _wide_mode_ as false. \r\nhttps:\/\/github.com\/plotly\/plotly.py\/blob\/master\/packages\/python\/plotly\/plotly\/express\/_core.py#L1036\r\n\r\nHere, in the _is_col_list_ functionwe can catch the erroneous column name and give the user a more helpful error message. So I tried to make 2 changes,\r\n\r\n1. **Line 1035** : Checking if y value is of pd.Series type and returning _wide_mode_ as false, if the condition is fulfilled. This takes care of any direct array inputs in x\/y arguments like below example.\r\n`px.scatter(df1,x = df1.sales, y = df2.market)`\r\n\r\n2. **Line 1042 - 1048 ** : Checking additionally if col_name supplied in list is present in df. And returning a more helpful error message.  Attached image shows both changes\r\n\r\n![image](https:\/\/github.com\/plotly\/plotly.py\/assets\/26029272\/1e4f898a-f2dd-4fe4-8fcb-1b97f76d5cc8)\r\n\r\n\r\nCould anyone kindly provide any feedback if this seems like the right approach?"],"labels":["bug"]},{"title":"FigureWidget responsive resizing","body":"Hi there,\r\n\r\nAs suggested by @nicolaskruchten I am open this issue to address `FigureWidget` specific resizing challenges.\r\n\r\nAs of the latest 5.12 release the resizing of a plotly `FigureWidget` is resolved:\r\n```python\r\nimport plotly.graph_objects as go\r\n\r\nfig = go.FigureWidget()\r\nfig\r\n```\r\n- #3689\r\n\r\nBut the issue remains when the widget is in another widget container.\r\n```python\r\nimport plotly.graph_objects as go\r\nimport ipywidgets as ipw\r\n\r\nfig = go.FigureWidget()\r\nipw.VBox([fig])\r\n```\r\n\r\n- There is a similar issue with bqplot that was adresssed by @mariobuikhuizen [bqplot\/bqplot#1531], maybe this is a good starting point (see @maartenbreddels comment https:\/\/github.com\/plotly\/plotly.py\/pull\/3930#issuecomment-1377376325)\r\n\r\nAlso it would really help to make responsive webapps with the ipywidgets ecosystem if the `FigureWidget` would also resize vertically to the available space inside its container.\r\n\r\n**No one on the Plotly team is really actively working on the Widget side of things so PRs are very welcome :)** \r\nI would gladly contribute but my knowledge in javascript is quasi non-existent^^, so I hope some of you are able to help out here.\r\n\r\nBest regards, Alex- \r\n","comments":[],"labels":["feature"]},{"title":"DPI metadata of png export should change with scale or be adjustable","body":"I export a figure as a png using write_image:\r\n```\r\n  fig.update_layout(width=300).write_image(\"test_1.png\", scale=1)\r\n```\r\nOpening this image in another program, the width of the image is 3.125 inches corresponding to a DPI of 96.\r\n\r\nIf I instead export an image with a different scale, e.g. 2\r\n`  fig.write_image(\"test_2.png\", scale=2)`\r\nI get a png file with a scaled pixel width (e.g. 600).\r\nBut opening the image in another program, the width in inches is also doubled to 6.25.\r\n\r\nThe ideal behavior IMO would be that the width of the image in inches is unaffected by the scale parameter or having a dpi keyword argument that sets the DPI metadata directly.\r\nA workaround (which others might find useful) is to use Pillow to fix the DPI metadata\r\n```\r\n  from PIL import Image\r\n  scale = 2\r\n  Image.open(\"test_2.png\").save(\"test_2_fixed.png\", dpi=(96 * scale, 96 * scale))\r\n```\r\nsuch that the image defaults to the same size in inches in other programs independent of the scale.\r\n","comments":["I think having a `dpi` setting would be excellent and I would welcome a PR if it didn't introduce a dependency on `PIL` or `pillow` :)"],"labels":["feature"]},{"title":"`Figure.add_vline()` annotations and shape positions do not match on log plots","body":"When adding a `vline` to a plot with a logarithmic x-axis, the `x` parameter is interpreted differently for annotations than it is for the placement of the line. The lines are placed at the literal x-location on the x-axis, while annotations are placed at the 10^x location.\r\n\r\nFor example, using the literal location will produce the line as intended, but the annotations are missing because they're off at 10^25.\r\n\r\n```python\r\nfig.add_vline(\r\n    x=25,\r\n    annotation_text='25'\r\n)\r\n```\r\n![lines](https:\/\/user-images.githubusercontent.com\/18335862\/211623169-fe6439e5-3081-4a3d-94c8-5787bd2d4b23.png)\r\n\r\nIf I were to input the `x` parameter using the 10^n convention used throughout plotly for log plots, then I get the correct annotations, but the line will now be located off at log(25) (\u22481.38).\r\n\r\n```python\r\nfig.add_vline(\r\n    x=np.log10(25),\r\n    annotation_text='25'\r\n)\r\n```\r\n\r\n![annotations](https:\/\/user-images.githubusercontent.com\/18335862\/211623090-98d1bc07-d45e-415b-b202-4508e0f79657.png)\r\n\r\nI'm on Windows 10 using Plotly v5.9.0 and Python 3.9.15.\r\n","comments":["Duplicate of #2580 "],"labels":["duplicate"]},{"title":"Can the points be shown inside of the violin area?","body":"One of my favorite types of plots to show distributions is to use [Sina plots](https:\/\/ggforce.data-imaginist.com\/reference\/geom_sina.html#examples) where the points are spread out within the area of the violin representing the density of the distribution. I then additionally overlay this with a boxplot as is already possible in plotly. So my questions\/feature requests are then:\r\n\r\n1. Can the points of a violin plot be shown inside of the violin [rather than next to it](https:\/\/plotly.com\/python\/violin\/#violin-plot-with-box-and-data-points)?\r\n2. Is it possible to have the points be spread out to the width of the violin as in the Sina plots?\r\n\r\nThank you for your consideration.","comments":["Hi @Midnighter, \r\nAs far as I know there is no direct way of doing this but you could do this in a two step way. It may not be very pretty though...\r\n```python\r\nimport plotly.express as px\r\n\r\ndf = px.data.tips()\r\npts = px.strip(df, y=\"total_bill\").data\r\nfig = px.violin(df, y=\"total_bill\", points=False)\r\nfig.add_traces(pts)\r\nfig.show()\r\n```\r\n<img width=\"572\" alt=\"image\" src=\"https:\/\/user-images.githubusercontent.com\/29252289\/212201966-d93213c7-c63f-4533-9cd2-cdbd2626b743.png\">\r\n","Thanks for the answer. For space reasons this is preferable to me but I agree that it would look better with more specific placement of the points.","You can do this with a single trace, using `pointpos`:\r\n\r\n```py\r\nimport plotly.express as px\r\n\r\ndf = px.data.tips()\r\nfig = px.violin(df, y=\"total_bill\", points=\"all\")\r\nfig.update_traces(pointpos=0)\r\nfig.show()\r\n```\r\n\r\nGives an identical result to what @Alexboiboi showed. But still you're right, the jitter algorithm was made for box plots rather than violins. If anyone is interested to make a PR to plotly.js it should be relatively easy to add an option to use the KDE as the jitter envelope, to achieve the effect you're looking for.","@alexcjohnson thank you for your addition. I've never looked at the plotly.js source code so far. Could you provide me with a link to where you think this new feature would need to be inserted, please?","The existing jitter algorithm is in [traces\/box\/plot.js](https:\/\/github.com\/plotly\/plotly.js\/blob\/a4f6249b07232800066f8f7b92cc685e505d54c8\/src\/traces\/box\/plot.js#L204-L232) - even though it's in the box trace, it also gets used by violins [here](https:\/\/github.com\/plotly\/plotly.js\/blob\/a4f6249b07232800066f8f7b92cc685e505d54c8\/src\/traces\/violin\/plot.js#L179).\r\n\r\nI think if you're in there from a violin trace you should have access to the [density array](https:\/\/github.com\/plotly\/plotly.js\/blob\/a4f6249b07232800066f8f7b92cc685e505d54c8\/src\/traces\/violin\/calc.js#L55). I'd suggest not supporting this for box traces, for now anyway, as that would require a separate calculation of the KDE.\r\n\r\nWe'll need a new [violin attribute](https:\/\/github.com\/plotly\/plotly.js\/blob\/master\/src\/traces\/violin\/attributes.js), maybe call it `jittermode: 'box'|'kde'`. Violins also reuse box [point attribute defaults](https:\/\/github.com\/plotly\/plotly.js\/blob\/a4f6249b07232800066f8f7b92cc685e505d54c8\/src\/traces\/violin\/defaults.js#L38), which sets `jitter` and `pointpos` [here](https:\/\/github.com\/plotly\/plotly.js\/blob\/a4f6249b07232800066f8f7b92cc685e505d54c8\/src\/traces\/box\/defaults.js#L248-L249) - to make this easiest to use we can modify that so if using the new `'kde'` mode the defaults are `pointpos: 0, jitter: 1`.","Huge fan of this idea! Note that at the moment the box logic does some approximation of this, by broadening the jitter width where there are a lot points, no? It would be nice to have this a bit better lined up with the violin trace. There's also the \"beeswarm\" type of jittering which is not random but geometry-aware: points are laid out so as to form a compact group without overlapping, but this would need to happen lower down in the pipeline I think."],"labels":["feature"]},{"title":"Bug using the underscore notation for annotation attributes, coupled with buttons","body":"Hi, I just had trouble with the following example:\r\n\r\n```\r\nfig.update_layout(\r\n            updatemenus=[\r\n                dict(\r\n                    type=\"buttons\",\r\n                    buttons=[\r\n                        dict(\r\n                            label=\"All\",\r\n                            method=\"update\",\r\n                            args=[\r\n                                {\"visible\": [True] * 9},  # show all traces\r\n                                {\r\n                                    \"annotations\": [inner_annotation]\r\n                                },\r\n                            ],\r\n                        ),\r\n                    ],\r\n                )\r\n            ]\r\n        )\r\n```\r\nEverything works fine on the figure load, however, clicking on the button would change the font_size of my annotation back to default, whereas I set it on 16.\r\n```\r\ninner_annotation = dict(\r\n            ...\r\n           font_size=16,\r\n        )\r\n```\r\n\r\nAfter some tests I figured out changing the syntax to \r\n```\r\ninner_annotation = dict(\r\n            ...\r\n           font={\"size\": 16},\r\n        )\r\n```\r\nresolved the issue.\r\n\r\n","comments":["As far as I can tell, setting `font` to a dictionary with keys such as `size` is the documented method: https:\/\/plotly.com\/python\/reference\/layout\/annotations\/#layout-annotations-items-annotation-font"],"labels":["usage"]},{"title":"Allow setting the camera \"field of view\"","body":"It doesn't seem possible to set the 3D camera field of view (fov).\r\n\r\n(Re: [my post](https:\/\/stackoverflow.com\/questions\/74945932\/plotly-is-it-possible-to-adjust-the-camera-field-of-view) to Stackoverflow.)\r\n\r\nLooking at the source code, I see that:\r\n\r\nIn https:\/\/github.com\/plotly\/plotly.js\/blob\/master\/src\/plots\/gl3d\/scene.js, it uses `glPlot3d.createScene` and sets the options in `proto.prepareOptions`.\r\n\r\nIn https:\/\/github.com\/gl-vis\/gl-plot3d\/blob\/master\/scene.js#L179, the allowed options include the field-of-view parameter `fovy` (field-of-view in the vertical direction), which defaults to `Math.PI\/4` (45 degrees).\r\n\r\nFor 3D graphics, a 45-degree vertical field-of-view typically gives an exaggerated perspective.  It [corresponds to](https:\/\/www.nikonians.org\/reviews\/fov-tables) about a 28mm camera lens.\r\n\r\nIt would be nice for `plotly.graph_objects.layout.scene.Camera` to include a `fovy` parameter (in radians).\r\n","comments":["Is there any way to hack this for the moment? Cheers"],"labels":["feature"]},{"title":"languages RTL direction issue fig.write_image \"jpeg\"","body":"The issue with export chart to jpeg in languages right to left direction (arbic -hebrew -urdu) ,when using \ncommand  \"fig.write_image\".\n\nto export to .html no issue and all brackets are ok\nbut to export to image jpg the brackets are missed up.\n\n![HTML ver](https:\/\/user-images.githubusercontent.com\/40159553\/210061359-bb1ae4b6-be89-4055-9dc7-f2b3e8f24202.png)\n\n![jpeg ver](https:\/\/user-images.githubusercontent.com\/40159553\/210061390-bed05b79-a78b-4174-899a-0ce878b0b786.jpeg)","comments":[],"labels":["bug"]},{"title":"Add ability to add map to px.imshow","body":"One major element missing from plotly at present is the ability to display an image or gridded dataset on a background tile map. \n\nFor example, one of the  example code snippets in  https:\/\/plotly.com\/python\/heatmaps\/\ndisplays air temp but there is no way to show this on a map easily and retain the tooltip. \n\nWould it be possible to have a px.imshow_geo ?\n\nPlease \n\n\n","comments":[],"labels":["feature"]},{"title":"Allow setting `fig.show()`\/`fig.write_html` `config` options globally","body":"I find myself having to repeat this config every time I write a plot to HTML:\r\n\r\n```py\r\nfig.write_html(\r\n    \"plot.html\",\r\n    include_plotlyjs=False,\r\n    full_html=False,\r\n    config=dict(showTips=False, displayModeBar=False, scrollZoom=True),\r\n)\r\n```\r\n\r\nWould be great if this could be set once globally, for example in a template. Something like this added to my custom template (currently unsupported):\r\n\r\n```diff\r\nglobal_layout = dict(\r\n    margin=dict(l=30, r=20, t=60, b=20),\r\n    paper_bgcolor=\"rgba(0,0,0,0)\",\r\n)\r\n+ global_config = dict(\r\n+     showTips=False, displayModeBar=False, scrollZoom=True)\r\n+ )\r\n- pio.templates[\"global\"] = dict(layout=global_layout)\r\n+ pio.templates[\"global\"] = dict(layout=global_layout, config=global_config)\r\npio.templates.default = \"global\"\r\n```\r\n\r\nRelated StackOverflow post: https:\/\/stackoverflow.com\/q\/63936983","comments":["I would love this as well.\r\n\r\nSomething like this would be great:\r\n\r\n```python\r\nplotly_renderer = pio.renderers[\"plotly_mimetype\"]\r\nplotly_renderer.config[\"displayModeBar\"] = False\r\n```\r\n\r\nCertain renderers support modifying defaults in this way, e.g. `pio.renderers[\"png\"].scale = 2`. Not sure how it's implemented, though.","I'd certainly consider merging a PR for this if someone wanted to submit one!"],"labels":["feature"]},{"title":"ModuleNotFoundError: No module named 'plotly.validators.surface'","body":"pandas: 1.5.2\r\nplotly: 5.11.0\r\npython: 3.10.6\r\nos: centos 7\r\n\r\n```\r\nimport pandas as pd\r\npd.options.plotting.backend = \"plotly\"\r\npd.DataFrame({'x':[1,2,3], 'y':[1,2,3]}).plot()\r\n```\r\n\r\nresults in <details closed><summary>ModuleNotFoundError: No module named 'plotly.validators.surface' 3998<\/summary>\r\n\r\n> ---------------------------------------------------------------------------\r\n> ModuleNotFoundError                       Traceback (most recent call last)\r\n> Cell In[10], line 1\r\n> ----> 1 pd.DataFrame({'x':[1,2,3], 'y':[1,2,3]}).plot()\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/pandas\/plotting\/_core.py:930, in PlotAccessor.__call__(self, *args, **kwargs)\r\n>     928 # when using another backend, get out of the way\r\n>     929 if plot_backend.__name__ != \"pandas.plotting._matplotlib\":\r\n> --> 930     return plot_backend.plot(self._parent, x=x, y=y, kind=kind, **kwargs)\r\n>     932 if kind not in self._all_kinds:\r\n>     933     raise ValueError(f\"{kind} is not a valid plot kind\")\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/__init__.py:103, in plot(data_frame, kind, **kwargs)\r\n>     101     return scatter(data_frame, **new_kwargs)\r\n>     102 if kind == \"line\":\r\n> --> 103     return line(data_frame, **kwargs)\r\n>     104 if kind == \"area\":\r\n>     105     return area(data_frame, **kwargs)\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/express\/_chart_types.py:264, in line(data_frame, x, y, line_group, color, line_dash, symbol, hover_name, hover_data, custom_data, text, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, error_x, error_x_minus, error_y, error_y_minus, animation_frame, animation_group, category_orders, labels, orientation, color_discrete_sequence, color_discrete_map, line_dash_sequence, line_dash_map, symbol_sequence, symbol_map, markers, log_x, log_y, range_x, range_y, line_shape, render_mode, title, template, width, height)\r\n>     216 def line(\r\n>     217     data_frame=None,\r\n>     218     x=None,\r\n>    (...)\r\n>     258     height=None,\r\n>     259 ) -> go.Figure:\r\n>     260     \"\"\"\r\n>     261     In a 2D line plot, each row of `data_frame` is represented as vertex of\r\n>     262     a polyline mark in 2D space.\r\n>     263     \"\"\"\r\n> --> 264     return make_figure(args=locals(), constructor=go.Scatter)\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/express\/_core.py:2249, in make_figure(args, constructor, trace_patch, layout_patch)\r\n>    2247 fig.update_layout(layout_patch)\r\n>    2248 if \"template\" in args and args[\"template\"] is not None:\r\n> -> 2249     fig.update_layout(template=args[\"template\"], overwrite=True)\r\n>    2250 for f in frame_list:\r\n>    2251     f[\"name\"] = str(f[\"name\"])\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/graph_objs\/_figure.py:762, in Figure.update_layout(self, dict1, overwrite, **kwargs)\r\n>     736 def update_layout(self, dict1=None, overwrite=False, **kwargs) -> \"Figure\":\r\n>     737     \"\"\"\r\n>     738 \r\n>     739     Update the properties of the figure's layout with a dict and\/or with\r\n>    (...)\r\n>     760 \r\n>     761     \"\"\"\r\n> --> 762     return super(Figure, self).update_layout(dict1, overwrite, **kwargs)\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:1401, in BaseFigure.update_layout(self, dict1, overwrite, **kwargs)\r\n>    1377 def update_layout(self, dict1=None, overwrite=False, **kwargs):\r\n>    1378     \"\"\"\r\n>    1379     Update the properties of the figure's layout with a dict and\/or with\r\n>    1380     keyword arguments.\r\n>    (...)\r\n>    1399         The Figure object that the update_layout method was called on\r\n>    1400     \"\"\"\r\n> -> 1401     self.layout.update(dict1, overwrite=overwrite, **kwargs)\r\n>    1402     return self\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:5122, in BasePlotlyType.update(self, dict1, overwrite, **kwargs)\r\n>    5120     with self.figure.batch_update():\r\n>    5121         BaseFigure._perform_update(self, dict1, overwrite=overwrite)\r\n> -> 5122         BaseFigure._perform_update(self, kwargs, overwrite=overwrite)\r\n>    5123 else:\r\n>    5124     BaseFigure._perform_update(self, dict1, overwrite=overwrite)\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:3899, in BaseFigure._perform_update(plotly_obj, update_obj, overwrite)\r\n>    3895 val = update_obj[key]\r\n>    3897 if overwrite:\r\n>    3898     # Don't recurse and assign property as-is\r\n> -> 3899     plotly_obj[key] = val\r\n>    3900     continue\r\n>    3902 validator = plotly_obj._get_prop_validator(key)\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:5861, in BaseLayoutType.__setitem__(self, prop, value)\r\n>    5858 match = self._subplot_re_match(prop)\r\n>    5859 if match is None:\r\n>    5860     # Set as ordinary property\r\n> -> 5861     super(BaseLayoutHierarchyType, self).__setitem__(prop, value)\r\n>    5862 else:\r\n>    5863     # Set as subplotid property\r\n>    5864     self._set_subplotid_prop(prop, value)\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:4851, in BasePlotlyType.__setitem__(self, prop, value)\r\n>    4849 # ### Handle compound property ###\r\n>    4850 if isinstance(validator, CompoundValidator):\r\n> -> 4851     self._set_compound_prop(prop, value)\r\n>    4853 # ### Handle compound array property ###\r\n>    4854 elif isinstance(validator, (CompoundArrayValidator, BaseDataValidator)):\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:5262, in BasePlotlyType._set_compound_prop(self, prop, val)\r\n>    5259 # Import value\r\n>    5260 # ------------\r\n>    5261 validator = self._get_validator(prop)\r\n> -> 5262 val = validator.validate_coerce(val, skip_invalid=self._skip_invalid)\r\n>    5264 # Save deep copies of current and new states\r\n>    5265 # ------------------------------------------\r\n>    5266 curr_val = self._compound_props.get(prop, None)\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/_plotly_utils\/basevalidators.py:2748, in BaseTemplateValidator.validate_coerce(self, v, skip_invalid)\r\n>    2742 if v == {} or isinstance(v, self.data_class) and v.to_plotly_json() == {}:\r\n>    2743     # Replace empty template with {'data': {'scatter': [{}]}} so that we can\r\n>    2744     # tell the difference between an un-initialized template and a template\r\n>    2745     # explicitly set to empty.\r\n>    2746     return self.data_class(data_scatter=[{}])\r\n> -> 2748 return super(BaseTemplateValidator, self).validate_coerce(\r\n>    2749     v, skip_invalid=skip_invalid\r\n>    2750 )\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/_plotly_utils\/basevalidators.py:2459, in CompoundValidator.validate_coerce(self, v, skip_invalid, _validate)\r\n>    2455     v = self.data_class(v, skip_invalid=skip_invalid, _validate=_validate)\r\n>    2457 elif isinstance(v, self.data_class):\r\n>    2458     # Copy object\r\n> -> 2459     v = self.data_class(v)\r\n>    2460 else:\r\n>    2461     if skip_invalid:\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/graph_objs\/layout\/_template.py:323, in Template.__init__(self, arg, data, layout, **kwargs)\r\n>     321 _v = data if data is not None else _v\r\n>     322 if _v is not None:\r\n> --> 323     self[\"data\"] = _v\r\n>     324 _v = arg.pop(\"layout\", None)\r\n>     325 _v = layout if layout is not None else _v\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:4851, in BasePlotlyType.__setitem__(self, prop, value)\r\n>    4849 # ### Handle compound property ###\r\n>    4850 if isinstance(validator, CompoundValidator):\r\n> -> 4851     self._set_compound_prop(prop, value)\r\n>    4853 # ### Handle compound array property ###\r\n>    4854 elif isinstance(validator, (CompoundArrayValidator, BaseDataValidator)):\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:5262, in BasePlotlyType._set_compound_prop(self, prop, val)\r\n>    5259 # Import value\r\n>    5260 # ------------\r\n>    5261 validator = self._get_validator(prop)\r\n> -> 5262 val = validator.validate_coerce(val, skip_invalid=self._skip_invalid)\r\n>    5264 # Save deep copies of current and new states\r\n>    5265 # ------------------------------------------\r\n>    5266 curr_val = self._compound_props.get(prop, None)\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/_plotly_utils\/basevalidators.py:2455, in CompoundValidator.validate_coerce(self, v, skip_invalid, _validate)\r\n>    2452     v = self.data_class()\r\n>    2454 elif isinstance(v, dict):\r\n> -> 2455     v = self.data_class(v, skip_invalid=skip_invalid, _validate=_validate)\r\n>    2457 elif isinstance(v, self.data_class):\r\n>    2458     # Copy object\r\n>    2459     v = self.data_class(v)\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/graph_objs\/layout\/template\/_data.py:1732, in Data.__init__(self, arg, barpolar, bar, box, candlestick, carpet, choroplethmapbox, choropleth, cone, contourcarpet, contour, densitymapbox, funnelarea, funnel, heatmapgl, heatmap, histogram2dcontour, histogram2d, histogram, icicle, image, indicator, isosurface, mesh3d, ohlc, parcats, parcoords, pie, pointcloud, sankey, scatter3d, scattercarpet, scattergeo, scattergl, scattermapbox, scatterpolargl, scatterpolar, scatter, scattersmith, scatterternary, splom, streamtube, sunburst, surface, table, treemap, violin, volume, waterfall, **kwargs)\r\n>    1730 _v = surface if surface is not None else _v\r\n>    1731 if _v is not None:\r\n> -> 1732     self[\"surface\"] = _v\r\n>    1733 _v = arg.pop(\"table\", None)\r\n>    1734 _v = table if table is not None else _v\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:4855, in BasePlotlyType.__setitem__(self, prop, value)\r\n>    4853 # ### Handle compound array property ###\r\n>    4854 elif isinstance(validator, (CompoundArrayValidator, BaseDataValidator)):\r\n> -> 4855     self._set_array_prop(prop, value)\r\n>    4857 # ### Handle simple property ###\r\n>    4858 else:\r\n>    4859     self._set_prop(prop, value)\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:5336, in BasePlotlyType._set_array_prop(self, prop, val)\r\n>    5333 # Import value\r\n>    5334 # ------------\r\n>    5335 validator = self._get_validator(prop)\r\n> -> 5336 val = validator.validate_coerce(val, skip_invalid=self._skip_invalid)\r\n>    5338 # Save deep copies of current and new states\r\n>    5339 # ------------------------------------------\r\n>    5340 curr_val = self._compound_array_props.get(prop, None)\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/_plotly_utils\/basevalidators.py:2547, in CompoundArrayValidator.validate_coerce(self, v, skip_invalid)\r\n>    2545     res.append(self.data_class(v_el))\r\n>    2546 elif isinstance(v_el, dict):\r\n> -> 2547     res.append(self.data_class(v_el, skip_invalid=skip_invalid))\r\n>    2548 else:\r\n>    2549     if skip_invalid:\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/graph_objs\/_surface.py:2535, in Surface.__init__(self, arg, autocolorscale, cauto, cmax, cmid, cmin, coloraxis, colorbar, colorscale, connectgaps, contours, customdata, customdatasrc, hidesurface, hoverinfo, hoverinfosrc, hoverlabel, hovertemplate, hovertemplatesrc, hovertext, hovertextsrc, ids, idssrc, legendgroup, legendgrouptitle, legendrank, legendwidth, lighting, lightposition, meta, metasrc, name, opacity, opacityscale, reversescale, scene, showlegend, showscale, stream, surfacecolor, surfacecolorsrc, text, textsrc, uid, uirevision, visible, x, xcalendar, xhoverformat, xsrc, y, ycalendar, yhoverformat, ysrc, z, zcalendar, zhoverformat, zsrc, **kwargs)\r\n>    2533 _v = colorbar if colorbar is not None else _v\r\n>    2534 if _v is not None:\r\n> -> 2535     self[\"colorbar\"] = _v\r\n>    2536 _v = arg.pop(\"colorscale\", None)\r\n>    2537 _v = colorscale if colorscale is not None else _v\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:4847, in BasePlotlyType.__setitem__(self, prop, value)\r\n>    4844     self._raise_on_invalid_property_error()(prop)\r\n>    4846 # ### Get validator for this property ###\r\n> -> 4847 validator = self._get_validator(prop)\r\n>    4849 # ### Handle compound property ###\r\n>    4850 if isinstance(validator, CompoundValidator):\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/basedatatypes.py:4329, in BasePlotlyType._get_validator(self, prop)\r\n>    4326 def _get_validator(self, prop):\r\n>    4327     from .validator_cache import ValidatorCache\r\n> -> 4329     return ValidatorCache.get_validator(self._path_str, prop)\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/site-packages\/plotly\/validator_cache.py:29, in ValidatorCache.get_validator(parent_path, prop_name)\r\n>      26         lookup_name = lookup_name or prop_name\r\n>      27         class_name = lookup_name.title() + \"Validator\"\r\n>      28         validator = getattr(\r\n> ---> 29             importlib.import_module(\"plotly.validators.\" + parent_path),\r\n>      30             class_name,\r\n>      31         )(plotly_name=prop_name)\r\n>      32     ValidatorCache._cache[key] = validator\r\n>      34 return ValidatorCache._cache[key]\r\n> \r\n> File ~\/.pyenv\/versions\/3.10.6\/lib\/python3.10\/importlib\/__init__.py:126, in import_module(name, package)\r\n>     124             break\r\n>     125         level += 1\r\n> --> 126 return _bootstrap._gcd_import(name[level:], package, level)\r\n> \r\n> File <frozen importlib._bootstrap>:1050, in _gcd_import(name, package, level)\r\n> \r\n> File <frozen importlib._bootstrap>:1027, in _find_and_load(name, import_)\r\n> \r\n> File <frozen importlib._bootstrap>:1004, in _find_and_load_unlocked(name, import_)\r\n> \r\n> ModuleNotFoundError: No module named 'plotly.validators.surface'\r\n<\/details>\r\n","comments":["This is working for me with the latest version of `pandas` (1.5.3) and `plotly` (5.13.0).\r\n\r\nI'm not very knowledgeable in regards to different types of `plotly` installations, but could this be an issue with your virtual environment setup?","Any help regarding this? It doesn't work for me with jupyter notebook.\r\n"],"labels":["usage"]},{"title":"Button for switching between two figures","body":"Hi\r\n\r\nIn many situations researchers need to switch from a figure with various traces and even maybe various layout to another figure. It should be really helpful if we could assign `fig` object to the buttons instead of modifying data using args. \r\n\r\nI mean that imagine I have `fig1` and `fig2`. So, by clicking on a button the I could witch from `fig1` to `fig2` on same plot window but displayed alternatively. That would be great if instead of entering or modifying traces and arguments in args we could only assign fig1 or fig2.\r\n\r\nWith all the best,\r\nBijan\r\n","comments":["Thanks for opening the issue, @BijanSeif \r\nThis [topic was first discussed](https:\/\/community.plotly.com\/t\/change-a-specific-trace-data-with-button\/71050) in the Forum on December 21. "],"labels":["feature"]},{"title":"Bug with dcc.graph in combination with plotly.make_subplots() consisting of go.Images()","body":"First off, I have also addressed this in the plotly community website, but I feel like this is the place it should be posted. \r\n\r\nEDIT: I realize it might be better suited in the dash github. Let me know if I need to move it.\r\n\r\nThere is a bug in plotly when using dcc.Graph in combination with a subplot figure consisting of go.Images the go.Images get moved around after the user changes the number of rows of plotly.make_subplots().\r\nFor example, when I first choose to plot 5 images beneath each other, the plot will look fine, [plotting five images closely together (chosen first)](https:\/\/i.stack.imgur.com\/PBcBi.png). However, when the user subsequently chooses to plot 2 points, [the images will be plotted in the same space the five images were](https:\/\/i.stack.imgur.com\/4z9nG.png). Similarly, when the user first chooses to plot 2 images the image looks fine. [Subsequently, when the user plots 5 images, they all get messed up.](https:\/\/i.stack.imgur.com\/8nnPI.png)\r\n\r\nThis does not happen when plotting, for example, scatter plots. Moreover, adding subtitles to the plot shows that the subtitles do not get moved around either. Using fig.show() on the figures also gives a good figure.\r\n\r\n You can use the code below to get a minimal working example.\r\n Moreover, using fig.show() also shows the images in their correct spaces. I believe this is a problem with dcc.graph in combination with subplots using go.Image.\r\n```\r\nfrom dash import Dash, dcc, html\r\nfrom dash.dependencies import Input, Output\r\nimport plotly.graph_objects as go\r\nimport dash.exceptions\r\nimport numpy as np\r\nfrom plotly.subplots import make_subplots\r\nimport plotly.express as px\r\n\r\ndef create_fig(n_rows):\r\n    fig = make_subplots(n_rows, 1)\r\n\r\n    for i in range(n_rows):\r\n        fig.add_trace(go.Image(z=np.random.randint(0, 255, size=(60, 60, 3))), i+1, 1)\r\n        #fig.add_trace(go.Scatter(x=[1, 2], y=[2, 4]), i + 1, 1)\r\n\r\n    fig.update_layout(autosize=True,\r\n                      width=100,\r\n                      height=n_rows*100,\r\n                      margin=dict(l=0, r=0, b=0, t=0)\r\n                      )\r\n    print(fig.layout)\r\n    return fig\r\n\r\n\r\napp = Dash(__name__)\r\napp.layout = html.Div(\r\n    [dcc.Graph(id='graph', style={'overflow':'scroll'}),\r\n     dcc.Input(value=0, id='input', type='number')])\r\n\r\n\r\n@app.callback(Output('graph', 'figure'), Input('input', 'value'))\r\ndef create_graph(n_rows):\r\n    if n_rows == 0:\r\n        raise dash.exceptions.PreventUpdate(\"Prevent update\")\r\n    else:\r\n        if n_rows is not None:\r\n            return create_fig(int(n_rows))\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run_server(debug=True)\r\n```\r\n","comments":[],"labels":["dash"]},{"title":"Box\/Lasso selection giving wrong indices in point_inds for px.scatter","body":"Hi,\r\nI am implementing lasso\/box selection in a scatterplot. I am using a callback function that returns me the indices of data selected by the user. The code works fine and returns me the correct indices when I applied a continuous or no label to the points. However, when I color the points using a discrete label I get incorrect indices or empty array.\r\n\r\nSample code to run is given below.\r\n```\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\nfrom plotly.graph_objs import *\r\nfrom IPython.display import display\r\n\r\ndf = px.data.iris()\r\nselected = []\r\ndef filter_(trace, points, state):\r\n    global selected\r\n    print(points)\r\n    selected = points.point_inds\r\n\r\nlayout = Layout(\r\n    paper_bgcolor='rgba(0,0,0,0)',\r\n    plot_bgcolor='rgba(0,0,0,0)',\r\n    width=1000,\r\n    height=600,\r\n\r\n)\r\n\r\nfig = px.scatter(\r\n    df,\r\n    x='sepal_length',\r\n    y='sepal_width',\r\n    color=\"species\",\r\n\r\n)\r\n\r\nfig.layout=layout\r\nfig.update_xaxes(visible=False)\r\nfig.update_yaxes(visible=False)\r\nfig = go.FigureWidget(fig.data, fig.layout)\r\nfig.layout.dragmode = 'lasso'\r\nfig.data[0].on_selection(filter_)\r\n\r\ndisplay(fig)\r\ndh = display(display_id=True)\r\n```\r\n\r\n On making a lasso\/box selection this is the output thrown. As you can see `point_inds` is empty.\r\n```\r\nPoints(point_inds=[],\r\n       xs=[],\r\n       ys=[],\r\n       trace_name='setosa',\r\n       trace_index=0)\r\n```\r\n\r\n If you comment `color=\"species\" `, the code works fine.\r\n\r\nIn the above code, I also applied `on_selection` on all objects of `fig.data` but still did not work.\r\n```\r\nfor f in fig.data:\r\n    f.on_selection(filter_)\r\n```\r\n\r\nVersion info - \r\n```\r\nPython - '3.8.8'\r\nPlotly - '5.11.0'\r\n\r\n```\r\n","comments":["Hi @ankur-26197 \r\n\r\nwhen using different colors, multiple traces are created and you need a callback function for each one. The points indices returned  by the callback function correspond to the indices of each trace and in the general case have nothing to do with the dataframe indices. On a selection event, all specific trace callbacks are triggered, even if they don't contain selected points. Below I show you an example on how to implement a general callback function that updates only on the last  single callback. \r\n\r\n```python\r\nimport ipywidgets as ipw\r\nimport numpy as np\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\n\r\ndf = px.data.iris()\r\ndf[\"row_id\"] = df.index\r\nselected = []\r\ncount = 1\r\nfig = px.scatter(\r\n    df,\r\n    x=\"sepal_length\",\r\n    y=\"sepal_width\",\r\n    color=\"species\",\r\n    hover_name=\"row_id\",\r\n)\r\nfig = go.FigureWidget(fig)\r\nfig.layout.dragmode = \"lasso\"\r\n\r\n\r\ndef on_selection_single_trace(trace, points, state):\r\n    global selected\r\n    inds = points.point_inds\r\n    row_ids = np.array(trace.hovertext)[inds]\r\n    selected.extend(rows_ids.astype(int).tolist())\r\n    if points.trace_index == len(fig.data) - 1:\r\n        try:\r\n            on_selection(sorted(selected))\r\n        finally:\r\n            selected = []\r\n\r\n\r\nout = ipw.Output()\r\n\r\n\r\n@out.capture(clear_output=True)\r\ndef on_selection(dataframe_indices):\r\n    print(\"last selected rows: \", selected)\r\n    display(df.iloc[dataframe_indices])\r\n\r\n\r\nfor ind, trace in enumerate(fig.data):\r\n    trace.on_selection(on_selection_single_trace)\r\n\r\ndisplay(fig, out)\r\n```\r\n![image](https:\/\/user-images.githubusercontent.com\/29252289\/206665850-3d1068a4-dc0b-4af9-9ca0-db29981b44f7.png)\r\n\r\nPS: I think this topic should be discussed in the plotly forum. Github is the place for feature requests or bug reports.\r\n\r\nHope it helps -  Alex","Also, if you don't want to rely on the `hover_data` you can use the custom data argument to store the dataframe indices.\r\n\r\n```python\r\nimport ipywidgets as ipw\r\nimport numpy as np\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\n\r\ndf = px.data.iris()\r\nselected = []\r\ncount = 1\r\nfig = px.scatter(\r\n    df,\r\n    x=\"sepal_length\",\r\n    y=\"sepal_width\",\r\n    color=\"species\",\r\n    custom_data=[df.index],\r\n)\r\nfig = go.FigureWidget(fig)\r\nfig.layout.dragmode = \"lasso\"\r\n\r\n\r\ndef on_selection_single_trace(trace, points, state):\r\n    global selected\r\n    inds = points.point_inds\r\n    rows_ids = np.array(trace.customdata)[inds].flatten()\r\n    selected.extend(rows_ids.astype(int).tolist())\r\n    if points.trace_index == len(fig.data) - 1:\r\n        try:\r\n            on_selection(sorted(selected))\r\n        finally:\r\n            selected = []\r\n\r\n\r\nout = ipw.Output()\r\n\r\n\r\n@out.capture(clear_output=True)\r\ndef on_selection(dataframe_indices):\r\n    print(\"last selected rows: \", selected)\r\n    display(df.iloc[dataframe_indices])\r\n\r\n\r\nfor ind, trace in enumerate(fig.data):\r\n    trace.on_selection(on_selection_single_trace)\r\n\r\ndisplay(fig, out)\r\n```"],"labels":["usage"]},{"title":"Excessive margin on the right when the actual margin is set to 0","body":"Hi.\r\n\r\nI see the excessive margin on the right even if the actual margin is set to 0. The wider the chart, the bigger is the excessive margin. The issue happens on 5.10.0 and 5.11.0 both on Mac and Ubuntu. Python version is 3.9.10.\r\n\r\nHere is the illustration:\r\n![image](https:\/\/user-images.githubusercontent.com\/39563347\/205434886-1108dba0-dd62-49b4-9800-846befd66fca.png)\r\n\r\nIt is the code to reproduce:\r\n\r\n```\r\nimport plotly.express as px\r\n\r\nimport plotly.graph_objects as go\r\nfrom plotly import subplots\r\n\r\ndf = px.data.gapminder().query(\"country=='Canada'\")\r\n\r\nfig = subplots.make_subplots(rows=1,\r\n                             cols=1,\r\n                             subplot_titles=[\"test\"],\r\n                             shared_xaxes=True,\r\n                             vertical_spacing=0,\r\n                             horizontal_spacing=0,\r\n                             specs=[[{\"secondary_y\": True}]])\r\n\r\nfig.add_trace(go.Scatter(x=df['year'],\r\n                         y=df['lifeExp'],\r\n                         mode='lines',\r\n                         name='some data'),\r\n              row=1, col=1,\r\n              secondary_y=False)\r\n\r\nfig.update_layout(\r\n    title_text=\"Title\",\r\n    autosize=False,\r\n    width=2500,\r\n    height=600,\r\n    legend_x=0,\r\n    margin=dict(\r\n        l=50,\r\n        r=0,\r\n        b=0,\r\n        t=70,\r\n        pad=4,\r\n    ),\r\n    legend=dict(\r\n        bordercolor=\"Black\",\r\n        borderwidth=2\r\n    ),\r\n    paper_bgcolor=\"LightSteelBlue\")\r\n\r\nprint(fig.layout)\r\n\r\nfig.show()\r\n```\r\n\r\n\r\nIt is the layout of the figure:\r\n\r\n```\r\nLayout({\r\n    'annotations': [{'font': {'size': 16},\r\n                     'showarrow': False,\r\n                     'text': 'test',\r\n                     'x': 0.47,\r\n                     'xanchor': 'center',\r\n                     'xref': 'paper',\r\n                     'y': 1.0,\r\n                     'yanchor': 'bottom',\r\n                     'yref': 'paper'}],\r\n    'autosize': False,\r\n    'height': 600,\r\n    'legend': {'bordercolor': 'Black', 'borderwidth': 2, 'x': 0},\r\n    'margin': {'b': 0, 'l': 50, 'pad': 4, 'r': 0, 't': 70},\r\n    'paper_bgcolor': 'LightSteelBlue',\r\n    'template': '...',\r\n    'title': {'text': 'Title'},\r\n    'width': 2500,\r\n    'xaxis': {'anchor': 'y', 'domain': [0.0, 0.94]},\r\n    'yaxis': {'anchor': 'x', 'domain': [0.0, 1.0]},\r\n    'yaxis2': {'anchor': 'x', 'overlaying': 'y', 'side': 'right'}\r\n})\r\n```\r\n\r\nI appreciate any help.","comments":["Duplicate of #3210","**Workaround**: because this is being caused by the `secondary_y` option, if you don't need a secondary y-axis, turning it off will remove the wide right margin.\r\n\r\nAs well, reducing the `width` option seems to scale down the extra space on the right"],"labels":["duplicate"]},{"title":"Dedicated docs on running a dash application using plotly scattergeo graphs when not connected to the internet","body":"I helped a Dash OSS user solve an issue today that took much longer than it should have. The developer was building a dash application that uses `plotly.graph_objects.Scattergeo`. The application worked well, but when the user ran the application locally without being connected to the internet, the chart would not render. The user works in a secure government setting and is likely one of many who have run into similar issues. I believe it would be useful to have a section in the plotly.py scattergeo section that shows how to run the charts fully offline. \r\n\r\nThe specific issue we ran into was caused because Plotly charting is looking for assets like [https:\/\/cdn.plot.ly\/usa_110m.json](https:\/\/cdn.plot.ly\/usa_110m.json) to render with. This location is unreachable if the app is offline.\r\n\r\nThese two community posts address and solve the issue but are out dated.\r\nhttps:\/\/community.plotly.com\/t\/loading-geo-assets-offline-solved\/11869\r\nhttps:\/\/community.plotly.com\/t\/offline-scattergeo-plots-not-working\/43790\r\n\r\nThe issue is common enough that it deserves to have better SEO and be more searchable.\r\n\r\nAll that was required to solve it in the Dash application offline was setting the plotlyConfig to point towards the asset directory in the app and referencing the plotlyConfig in the config prop within the dcc.Graph(). It was also necessary to upload the two relevant .json files to my assets folder. [1](https:\/\/cdn.plot.ly\/usa_110m.json) , [2](https:\/\/cdn.plot.ly\/world_110m.json)\r\n```\r\nplotlyConfig = {'topojsonURL':'http:\/\/127.0.0.1:8050\/assets\/'} \r\n...\r\ndcc.Graph(id=\"example-graph\", figure=fig, config=plotlyConfig),\r\n```\r\n\r\n@LiamConnors love to get your thoughts on this. ","comments":[],"labels":["documentation"]},{"title":"vline annotation gives TypeError","body":"I am trying to annotate my plot following https:\/\/plotly.com\/python\/horizontal-vertical-shapes\/ , but I get \r\n\r\n`TypeError: Addition\/subtraction of integers and integer-arrays with Timestamp is no longer supported. `\r\n\r\nmy dataframe index is of type `<M8[ns]`\r\n\r\n(it works without `annotation_text`)\r\n\r\nps:  plotly Version: 5.10.0\r\n\r\n<details>\r\n  <summary>here is the full log<\/summary>\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nInput In [82], in <cell line: 4>()\r\n      2 fig.update_layout(yaxis_title=r\"uV\")\r\n      4 for time, text, color in zip(times_list_1, condi_list, color_list):\r\n----> 6     fig.add_vline(x=time, annotation_text = text) # , annotation_position='bottom'\r\n      8 #         plt.text(time, (y_min + y_max) \/2 , text, c=color)\r\n      9 \r\n     10 # fig.show()\r\n     12 fig.write_html('session1_resam_mean.html')\r\n\r\nFile \/usr\/local\/lib\/python3.9\/site-packages\/plotly\/graph_objs\/_figure.py:1013, in Figure.add_vline(self, x, row, col, exclude_empty_subplots, annotation, **kwargs)\r\n    965 def add_vline(\r\n    966     self,\r\n    967     x,\r\n   (...)\r\n    972     **kwargs,\r\n    973 ) -> \"Figure\":\r\n    974     \"\"\"\r\n    975 \r\n    976     Add a vertical line to a plot or subplot that extends infinitely in the\r\n   (...)\r\n   1011         except for x0, x1, y0, y1 or type.\r\n   1012     \"\"\"\r\n-> 1013     return super(Figure, self).add_vline(\r\n   1014         x, row, col, exclude_empty_subplots, annotation, **kwargs\r\n   1015     )\r\n\r\nFile \/usr\/local\/lib\/python3.9\/site-packages\/plotly\/basedatatypes.py:4086, in BaseFigure.add_vline(self, x, row, col, exclude_empty_subplots, annotation, **kwargs)\r\n   4077 def add_vline(\r\n   4078     self,\r\n   4079     x,\r\n   (...)\r\n   4084     **kwargs,\r\n   4085 ):\r\n-> 4086     self._process_multiple_axis_spanning_shapes(\r\n   4087         dict(type=\"line\", x0=x, x1=x, y0=0, y1=1),\r\n   4088         row,\r\n   4089         col,\r\n   4090         \"vline\",\r\n   4091         exclude_empty_subplots=exclude_empty_subplots,\r\n   4092         annotation=annotation,\r\n   4093         **kwargs,\r\n   4094     )\r\n   4095     return self\r\n\r\nFile \/usr\/local\/lib\/python3.9\/site-packages\/plotly\/basedatatypes.py:4031, in BaseFigure._process_multiple_axis_spanning_shapes(self, shape_args, row, col, shape_type, exclude_empty_subplots, annotation, **kwargs)\r\n   4022 # shapes are always added at the end of the tuple of shapes, so we see\r\n   4023 # how long the tuple is before the call and after the call, and adjust\r\n   4024 # the new shapes that were added at the end\r\n   4025 # extract annotation prefixed kwargs\r\n   4026 # annotation with extra parameters based on the annotation_position\r\n   4027 # argument and other annotation_ prefixed kwargs\r\n   4028 shape_kwargs, annotation_kwargs = shapeannotation.split_dict_by_key_prefix(\r\n   4029     kwargs, \"annotation_\"\r\n   4030 )\r\n-> 4031 augmented_annotation = shapeannotation.axis_spanning_shape_annotation(\r\n   4032     annotation, shape_type, shape_args, annotation_kwargs\r\n   4033 )\r\n   4034 self.add_shape(\r\n   4035     row=row,\r\n   4036     col=col,\r\n   4037     exclude_empty_subplots=exclude_empty_subplots,\r\n   4038     **_combine_dicts([shape_args, shape_kwargs]),\r\n   4039 )\r\n   4040 if augmented_annotation is not None:\r\n\r\nFile \/usr\/local\/lib\/python3.9\/site-packages\/plotly\/shapeannotation.py:216, in axis_spanning_shape_annotation(annotation, shape_type, shape_args, kwargs)\r\n    214     annotation_position = kwargs[\"annotation_position\"]\r\n    215 if shape_type.endswith(\"line\"):\r\n--> 216     shape_dict = annotation_params_for_line(\r\n    217         shape_type, shape_args, annotation_position\r\n    218     )\r\n    219 elif shape_type.endswith(\"rect\"):\r\n    220     shape_dict = annotation_params_for_rect(\r\n    221         shape_type, shape_args, annotation_position\r\n    222     )\r\n\r\nFile \/usr\/local\/lib\/python3.9\/site-packages\/plotly\/shapeannotation.py:63, in annotation_params_for_line(shape_type, shape_args, position)\r\n     61 aX = max(X)\r\n     62 iX = min(X)\r\n---> 63 eX = _mean(X)\r\n     64 aaX = _argmax(X)\r\n     65 aiX = _argmin(X)\r\n\r\nFile \/usr\/local\/lib\/python3.9\/site-packages\/plotly\/shapeannotation.py:7, in _mean(x)\r\n      5 if len(x) == 0:\r\n      6     raise ValueError(\"x must have positive length\")\r\n----> 7 return float(sum(x)) \/ len(x)\r\n\r\nFile \/usr\/local\/lib\/python3.9\/site-packages\/pandas\/_libs\/tslibs\/timestamps.pyx:311, in pandas._libs.tslibs.timestamps._Timestamp.__add__()\r\n\r\nFile \/usr\/local\/lib\/python3.9\/site-packages\/pandas\/_libs\/tslibs\/timestamps.pyx:296, in pandas._libs.tslibs.timestamps._Timestamp.__add__()\r\n\r\nTypeError: Addition\/subtraction of integers and integer-arrays with Timestamp is no longer supported.  Instead of adding\/subtracting `n`, use `n * obj.freq`\r\n```","comments":["a similar issue, is already discussed in #3065 ...\r\nbut it's slightly different"],"labels":["bug"]},{"title":"Footprint chart for finances","body":"i want to create a footprint chart like this one where i am able to make an open high low close but also show how much trading volume was at each y value of the candle\r\n\r\nhere is an example of what i am talking about \r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/95321908\/203892801-1a527285-d5d1-4b2a-bbf4-22a27b46489e.png)\r\n","comments":["Interesting - that's a whole lot of extra information beyond the open, high, low, close needed to create `ohlc` and `candlestick` traces - and yet on its own it's insufficient to create the original trace as just those two sets of numbers don't indicate the open and close, nor (assuming that those numbers are binned as opposed to showing every valid price increment) do they contain as much precision as the OHLC numbers.\r\n\r\nSo while it would be possible, it doesn't seem like a great fit to shoehorn them into the `ohlc` and `candlestick` traces directly. I'd suggest adding the text in a [heatmap](https:\/\/plotly.com\/python\/heatmaps\/) - with the regular coloration of the heatmap hidden (make a white or transparent colorscale) and just display the text. If you're only showing a single candle the heatmap would have dimension 1xN.","> that's a whole lot of extra information beyond the open, high, low, close needed to create `ohlc` and `candlestick` traces\r\n\r\nits very easy to get that data ... getting and understanding how to organize the data on our end is very very easy ... you can see what a csv file would look like here ... https:\/\/public.bybit.com\/trading\/BTCUSD\/ \r\n\r\nlets say i wanted to create a 5 min candle ... for the info i would just add up all the sell orders at each price point of the candle and do the same for the buy orders ... then i have a dataframe within the candle that tells me the sell column and buy column ... and you can get the open high low close even from that data ... the open is the first trade at the start of the candle then the high is the highest point ... low is the lowest point and the close is the last candle ... \r\n\r\nthis info helps us visualize at what price point in the candle has the most trade volume ... footprint charts are used in high level trading ... I will be making a ton of videos on this subject if we can get one of these open source plotting platforms to help create something like this\r\n\r\nall we would need is send dataframes inside a master dataframe ... so you have the overall dataframe that houses all of the candles and inside each candle is a dataframe of all of the sell and buy data at each price of the candle\r\n\r\nultimately would be nice for it to look like this \r\n![image](https:\/\/user-images.githubusercontent.com\/95321908\/204044827-8c88c0f7-e359-4adf-984d-a38afdd2aca0.png)\r\n\r\nbut even something simple like what i showed in the first post would be nice","@alexcjohnson hey .. wanted to check back in and see if you were still interested in doing this","I haven't gotten a chance to try and make a demo yet (maybe over the holidays, no promises), but your second example makes the heatmap + candlestick idea seem even more appropriate.","I feel like a pair of `violin` traces here would give you the continuous version, and could be implemented fairly easily. One violin visible on the left for sellers and one on the right for buyers, per time-step.","@nicolaskruchten ... that is a nice suggestion ... i tried to do the split violin but i can't seem to get it to work (mind you i didn't try for very long) ... but here is my csv file and what i was able to get to show up ... doesn't seem like i have the right info but it is close to what i would like to do \r\n\r\n`import plotly.graph_objects as go\r\n\r\nimport pandas as pd\r\n\r\ndf = pd.read_csv(\"tester.csv\")\r\ndf.candle_time = pd.to_datetime(df.candle_time, unit='s')\r\n\r\nfig = go.Figure()\r\n\r\nfig.add_trace(go.Violin(x=df['candle_time'],\r\n                        y=df['price'],\r\n                        legendgroup='Yes', scalegroup='Yes', name='Yes',\r\n                        side='positive',\r\n                        line_color='green')\r\n             )\r\nfig.add_trace(go.Violin(x=df['candle_time'],\r\n                        y=df['price'],\r\n                        legendgroup='No', scalegroup='No', name='No',\r\n                        side='negative',\r\n                        line_color='red')\r\n             )\r\nfig.update_traces(meanline_visible=True)\r\nfig.update_layout(violingap=0, violinmode='overlay')\r\nfig.show()`\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/95321908\/207390380-84a6661f-5cee-4603-a442-8e92c2e15561.png)\r\n\r\n@alexcjohnson  not sure if you have any ideas on this ... but i will try to look more into this ... but if you guys can see a very easy problem let me know\r\n\r\ni somehow need 3 things here ... \r\nx needs to be the time\r\ny needs to be the price \r\nthen inside the violin needs to be the buys and sells at the particular price within the given time ... just like in the picture\r\n\r\n[tester.csv](https:\/\/github.com\/plotly\/plotly.py\/files\/10220059\/tester.csv)\r\n","@alexcjohnson wanted to check back in with you on this ... i have all the code done and all the csv files needed .... willing to also put in some dev work as well ","@alexcjohnson @AaronStiff @nicolaskruchten ... i am still interested in doing this ... so please have a look at this loom video of me explaining the concept ... really would like to use plotly because that is what i am used to using \r\nhttps:\/\/www.loom.com\/share\/76ccbf0a46374256b798f2a237f41f78\r\n\r\nhere is the github repo\r\nhttps:\/\/github.com\/QuantFreedom1022\/Footprints\/tree\/main","@QuantFreedom1022 I can't see that repo, but send me a note at alex@plot.ly and we can set up a call to discuss how to proceed.","@alexcjohnson just changed it to public for you ... sorry about that ... and i will send you a message soon"],"labels":["feature"]},{"title":"Bump pillow from 5.2.0 to 9.3.0 in \/packages\/python\/plotly\/test_requirements","body":"Bumps [pillow](https:\/\/github.com\/python-pillow\/Pillow) from 5.2.0 to 9.3.0.\n<details>\n<summary>Release notes<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/python-pillow\/Pillow\/releases\">pillow's releases<\/a>.<\/em><\/p>\n<blockquote>\n<h2>9.3.0<\/h2>\n<p><a href=\"https:\/\/pillow.readthedocs.io\/en\/stable\/releasenotes\/9.3.0.html\">https:\/\/pillow.readthedocs.io\/en\/stable\/releasenotes\/9.3.0.html<\/a><\/p>\n<h2>Changes<\/h2>\n<ul>\n<li>Initialize libtiff buffer when saving <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6699\">#6699<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Limit SAMPLESPERPIXEL to avoid runtime DOS <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6700\">#6700<\/a> [<a href=\"https:\/\/github.com\/wiredfool\"><code>@\u200bwiredfool<\/code><\/a>]<\/li>\n<li>Inline fname2char to fix memory leak <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6329\">#6329<\/a> [<a href=\"https:\/\/github.com\/nulano\"><code>@\u200bnulano<\/code><\/a>]<\/li>\n<li>Fix memory leaks related to text features <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6330\">#6330<\/a> [<a href=\"https:\/\/github.com\/nulano\"><code>@\u200bnulano<\/code><\/a>]<\/li>\n<li>Use double quotes for version check on old CPython on Windows <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6695\">#6695<\/a> [<a href=\"https:\/\/github.com\/hugovk\"><code>@\u200bhugovk<\/code><\/a>]<\/li>\n<li>GHA: replace deprecated set-output command with GITHUB_OUTPUT file <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6697\">#6697<\/a> [<a href=\"https:\/\/github.com\/nulano\"><code>@\u200bnulano<\/code><\/a>]<\/li>\n<li>Remove backup implementation of Round for Windows platforms <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6693\">#6693<\/a> [<a href=\"https:\/\/github.com\/cgohlke\"><code>@\u200bcgohlke<\/code><\/a>]<\/li>\n<li>Upload fribidi.dll to GitHub Actions <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6532\">#6532<\/a> [<a href=\"https:\/\/github.com\/nulano\"><code>@\u200bnulano<\/code><\/a>]<\/li>\n<li>Fixed set_variation_by_name offset <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6445\">#6445<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Windows build improvements <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6562\">#6562<\/a> [<a href=\"https:\/\/github.com\/nulano\"><code>@\u200bnulano<\/code><\/a>]<\/li>\n<li>Fix malloc in _imagingft.c:font_setvaraxes <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6690\">#6690<\/a> [<a href=\"https:\/\/github.com\/cgohlke\"><code>@\u200bcgohlke<\/code><\/a>]<\/li>\n<li>Only use ASCII characters in C source file <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6691\">#6691<\/a> [<a href=\"https:\/\/github.com\/cgohlke\"><code>@\u200bcgohlke<\/code><\/a>]<\/li>\n<li>Release Python GIL when converting images using matrix operations <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6418\">#6418<\/a> [<a href=\"https:\/\/github.com\/hmaarrfk\"><code>@\u200bhmaarrfk<\/code><\/a>]<\/li>\n<li>Added ExifTags enums <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6630\">#6630<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Do not modify previous frame when calculating delta in PNG <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6683\">#6683<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Added support for reading BMP images with RLE4 compression <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6674\">#6674<\/a> [<a href=\"https:\/\/github.com\/npjg\"><code>@\u200bnpjg<\/code><\/a>]<\/li>\n<li>Decode JPEG compressed BLP1 data in original mode <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6678\">#6678<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>pylint warnings <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6659\">#6659<\/a> [<a href=\"https:\/\/github.com\/marksmayo\"><code>@\u200bmarksmayo<\/code><\/a>]<\/li>\n<li>Added GPS TIFF tag info <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6661\">#6661<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Added conversion between RGB\/RGBA\/RGBX and LAB <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6647\">#6647<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Do not attempt normalization if mode is already normal <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6644\">#6644<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Fixed seeking to an L frame in a GIF <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6576\">#6576<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Consider all frames when selecting mode for PNG save_all <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6610\">#6610<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Don't reassign crc on ChunkStream close <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6627\">#6627<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Raise a warning if NumPy failed to raise an error during conversion <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6594\">#6594<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Only read a maximum of 100 bytes at a time in IMT header <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6623\">#6623<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Show all frames in ImageShow <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6611\">#6611<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Allow FLI palette chunk to not be first <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6626\">#6626<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>If first GIF frame has transparency for RGB_ALWAYS loading strategy, use RGBA mode <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6592\">#6592<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Round box position to integer when pasting embedded color <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6517\">#6517<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Removed EXIF prefix when saving WebP <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6582\">#6582<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Pad IM palette to 768 bytes when saving <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6579\">#6579<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Added DDS BC6H reading <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6449\">#6449<\/a> [<a href=\"https:\/\/github.com\/ShadelessFox\"><code>@\u200bShadelessFox<\/code><\/a>]<\/li>\n<li>Added support for opening WhiteIsZero 16-bit integer TIFF images <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6642\">#6642<\/a> [<a href=\"https:\/\/github.com\/JayWiz\"><code>@\u200bJayWiz<\/code><\/a>]<\/li>\n<li>Raise an error when allocating translucent color to RGB palette <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6654\">#6654<\/a> [<a href=\"https:\/\/github.com\/jsbueno\"><code>@\u200bjsbueno<\/code><\/a>]<\/li>\n<li>Moved mode check outside of loops <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6650\">#6650<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Added reading of TIFF child images <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6569\">#6569<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Improved ImageOps palette handling <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6596\">#6596<\/a> [<a href=\"https:\/\/github.com\/PososikTeam\"><code>@\u200bPososikTeam<\/code><\/a>]<\/li>\n<li>Defer parsing of palette into colors <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6567\">#6567<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Apply transparency to P images in ImageTk.PhotoImage <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6559\">#6559<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Use rounding in ImageOps contain() and pad() <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6522\">#6522<\/a> [<a href=\"https:\/\/github.com\/bibinhashley\"><code>@\u200bbibinhashley<\/code><\/a>]<\/li>\n<li>Fixed GIF remapping to palette with duplicate entries <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6548\">#6548<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Allow remap_palette() to return an image with less than 256 palette entries <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6543\">#6543<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<li>Corrected BMP and TGA palette size when saving <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6500\">#6500<\/a> [<a href=\"https:\/\/github.com\/radarhere\"><code>@\u200bradarhere<\/code><\/a>]<\/li>\n<\/ul>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Changelog<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/python-pillow\/Pillow\/blob\/main\/CHANGES.rst\">pillow's changelog<\/a>.<\/em><\/p>\n<blockquote>\n<h2>9.3.0 (2022-10-29)<\/h2>\n<ul>\n<li>\n<p>Limit SAMPLESPERPIXEL to avoid runtime DOS <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6700\">#6700<\/a>\n[wiredfool]<\/p>\n<\/li>\n<li>\n<p>Initialize libtiff buffer when saving <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6699\">#6699<\/a>\n[radarhere]<\/p>\n<\/li>\n<li>\n<p>Inline fname2char to fix memory leak <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6329\">#6329<\/a>\n[nulano]<\/p>\n<\/li>\n<li>\n<p>Fix memory leaks related to text features <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6330\">#6330<\/a>\n[nulano]<\/p>\n<\/li>\n<li>\n<p>Use double quotes for version check on old CPython on Windows <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6695\">#6695<\/a>\n[hugovk]<\/p>\n<\/li>\n<li>\n<p>Remove backup implementation of Round for Windows platforms <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6693\">#6693<\/a>\n[cgohlke]<\/p>\n<\/li>\n<li>\n<p>Fixed set_variation_by_name offset <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6445\">#6445<\/a>\n[radarhere]<\/p>\n<\/li>\n<li>\n<p>Fix malloc in _imagingft.c:font_setvaraxes <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6690\">#6690<\/a>\n[cgohlke]<\/p>\n<\/li>\n<li>\n<p>Release Python GIL when converting images using matrix operations <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6418\">#6418<\/a>\n[hmaarrfk]<\/p>\n<\/li>\n<li>\n<p>Added ExifTags enums <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6630\">#6630<\/a>\n[radarhere]<\/p>\n<\/li>\n<li>\n<p>Do not modify previous frame when calculating delta in PNG <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6683\">#6683<\/a>\n[radarhere]<\/p>\n<\/li>\n<li>\n<p>Added support for reading BMP images with RLE4 compression <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6674\">#6674<\/a>\n[npjg, radarhere]<\/p>\n<\/li>\n<li>\n<p>Decode JPEG compressed BLP1 data in original mode <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6678\">#6678<\/a>\n[radarhere]<\/p>\n<\/li>\n<li>\n<p>Added GPS TIFF tag info <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6661\">#6661<\/a>\n[radarhere]<\/p>\n<\/li>\n<li>\n<p>Added conversion between RGB\/RGBA\/RGBX and LAB <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6647\">#6647<\/a>\n[radarhere]<\/p>\n<\/li>\n<li>\n<p>Do not attempt normalization if mode is already normal <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6644\">#6644<\/a>\n[radarhere]<\/p>\n<\/li>\n<\/ul>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Commits<\/summary>\n<ul>\n<li><a href=\"https:\/\/github.com\/python-pillow\/Pillow\/commit\/d594f4cb8dc47fb0c69ae58d9fff86faae4515bd\"><code>d594f4c<\/code><\/a> Update CHANGES.rst [ci skip]<\/li>\n<li><a href=\"https:\/\/github.com\/python-pillow\/Pillow\/commit\/909dc64ed5f676169aa3d9b0c26f132a06321b83\"><code>909dc64<\/code><\/a> 9.3.0 version bump<\/li>\n<li><a href=\"https:\/\/github.com\/python-pillow\/Pillow\/commit\/1a51ce7b955c65c8f2c6bc7772735b197b8a6aa3\"><code>1a51ce7<\/code><\/a> Merge pull request <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6699\">#6699<\/a> from hugovk\/security-libtiff_buffer<\/li>\n<li><a href=\"https:\/\/github.com\/python-pillow\/Pillow\/commit\/2444cddab2f83f28687c7c20871574acbb6dbcf3\"><code>2444cdd<\/code><\/a> Merge pull request <a href=\"https:\/\/github-redirect.dependabot.com\/python-pillow\/Pillow\/issues\/6700\">#6700<\/a> from hugovk\/security-samples_per_pixel-sec<\/li>\n<li><a href=\"https:\/\/github.com\/python-pillow\/Pillow\/commit\/744f455830871d61a8de0a5e629d4c2e33817cbb\"><code>744f455<\/code><\/a> Added release notes<\/li>\n<li><a href=\"https:\/\/github.com\/python-pillow\/Pillow\/commit\/0846bfae48513f2f51ca8547ed3b8954fa501fda\"><code>0846bfa<\/code><\/a> Add to release notes<\/li>\n<li><a href=\"https:\/\/github.com\/python-pillow\/Pillow\/commit\/799a6a01052cea3f417a571d7c64cd14acc18c64\"><code>799a6a0<\/code><\/a> Fix linting<\/li>\n<li><a href=\"https:\/\/github.com\/python-pillow\/Pillow\/commit\/00b25fd3ac3648bc28eff5d4c4d816e605e3f05f\"><code>00b25fd<\/code><\/a> Hide UserWarning in logs<\/li>\n<li><a href=\"https:\/\/github.com\/python-pillow\/Pillow\/commit\/05b175ef88c22f5c416bc9b8d5b897dea1abbf2c\"><code>05b175e<\/code><\/a> Tighter test case<\/li>\n<li><a href=\"https:\/\/github.com\/python-pillow\/Pillow\/commit\/13f2c5ae14901c89c38f898496102afd9daeaf6d\"><code>13f2c5a<\/code><\/a> Prevent DOS with large SAMPLESPERPIXEL in Tiff IFD<\/li>\n<li>Additional commits viewable in <a href=\"https:\/\/github.com\/python-pillow\/Pillow\/compare\/5.2.0...9.3.0\">compare view<\/a><\/li>\n<\/ul>\n<\/details>\n<br \/>\n\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=5.2.0&new-version=9.3.0)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https:\/\/github.com\/plotly\/plotly.py\/network\/alerts).\n\n<\/details>","comments":[],"labels":["dependencies","python"]},{"title":"Incorrect handling of `np.datetime64[ns]` date values","body":"Dates specified using numpy `datetime64` with `[ns]` precision are handled incorrectly in plotting. Dates with microsec `[us]` precision or lower work as expected.\r\n```\r\nt0 = np.datetime64(\"2022-10-20T00:00:00\").astype(\"datetime64[ns]\")\r\nt1 = np.datetime64(\"2022-10-21T00:00:00\").astype(\"datetime64[ns]\")\r\n\r\nfig = go.Figure()\r\nfig.add_trace(go.Scatter(x=[t0, t1], y=[3, 4], mode=\"lines\"))\r\nfig.show()\r\n```\r\n![newplot](https:\/\/user-images.githubusercontent.com\/348089\/202196194-068b9e15-080b-4135-9c98-612f8a954af9.png)\r\n","comments":["This is indeed a bug. However, a workaround would be to use `plotly.express` as the issue is not present there."],"labels":["bug"]},{"title":"OSError: Address 'http:\/\/127.0.0.1:8050' already in use.","body":"Up to now I didn't find any solution for this.\r\n\r\nI try in Jupyter-Notebook (Windows10, Google Chrome):\r\n```\r\nfrom jupyter_dash import JupyterDash\r\napp = JupyterDash(__name__)\r\napp.run_server(mode='inline',height=600,width='80%')\r\n```\r\nand get the error:\r\n```\r\n---------------------------------------------------------------------------\r\nOSError                                   Traceback (most recent call last)\r\n~\\AppData\\Local\\Temp\\ipykernel_9776\\1759314688.py in <cell line: 0>()\r\n----> 1 app.run_server(mode='inline',height=600,width='80%')#,debug=True, use_reloader=True)\r\n\r\nC:\\Python311\\Lib\\site-packages\\jupyter_dash\\jupyter_app.py in run_server(self, mode, width, height, inline_exceptions, **kwargs)\r\n    337                 )\r\n    338 \r\n--> 339         wait_for_app()\r\n    340 \r\n    341         if JupyterDash._in_colab:\r\n\r\nC:\\Python311\\Lib\\site-packages\\retrying.py in wrapped_f(*args, **kw)\r\n     47             @six.wraps(f)\r\n     48             def wrapped_f(*args, **kw):\r\n---> 49                 return Retrying(*dargs, **dkw).call(f, *args, **kw)\r\n     50 \r\n     51             return wrapped_f\r\n\r\nC:\\Python311\\Lib\\site-packages\\retrying.py in call(self, fn, *args, **kwargs)\r\n    210                 if not self._wrap_exception and attempt.has_exception:\r\n    211                     # get() on an attempt with an exception should cause it to be raised, but raise just in case\r\n--> 212                     raise attempt.get()\r\n    213                 else:\r\n    214                     raise RetryError(attempt)\r\n\r\nC:\\Python311\\Lib\\site-packages\\retrying.py in get(self, wrap_exception)\r\n    245                 raise RetryError(self)\r\n    246             else:\r\n--> 247                 six.reraise(self.value[0], self.value[1], self.value[2])\r\n    248         else:\r\n    249             return self.value\r\n\r\nC:\\Python311\\Lib\\site-packages\\six.py in reraise(tp, value, tb)\r\n    717             if value.__traceback__ is not tb:\r\n    718                 raise value.with_traceback(tb)\r\n--> 719             raise value\r\n    720         finally:\r\n    721             value = None\r\n\r\nC:\\Python311\\Lib\\site-packages\\retrying.py in call(self, fn, *args, **kwargs)\r\n    198         while True:\r\n    199             try:\r\n--> 200                 attempt = Attempt(fn(*args, **kwargs), attempt_number, False)\r\n    201             except:\r\n    202                 tb = sys.exc_info()\r\n\r\nC:\\Python311\\Lib\\site-packages\\jupyter_dash\\jupyter_app.py in wait_for_app()\r\n    330                     host=host, port=port, token=JupyterDash._token\r\n    331                 )\r\n--> 332                 raise OSError(\r\n    333                     \"Address '{url}' already in use.\\n\"\r\n    334                     \"    Try passing a different port to run_server.\".format(\r\n\r\nOSError: Address 'http:\/\/127.0.0.1:8050\/' already in use.\r\n    Try passing a different port to run_server.\r\n```\r\nThe error remains independent of chosen port, Python version 3.9, 3.10, 3.11, Jupyter or JupyterLab or browser (Chrome, Edge).\r\n\r\nWhere is the problem?\r\n\r\n","comments":["Probably a duplicate of #3900 "],"labels":["duplicate"]},{"title":"`figure_factory.create_distplot` does not allow displaying of axes lines","body":"issue present at least in `plotly==5.11.0` and `plotly==5.3.1`\r\n\r\n```python\r\nimport plotly.figure_factory as ff\r\n\r\nhist_data=[[1269.66463677171, 1012.56976942082, 1248.33444866415, 2072.38446283373, 1242.34632349397, 983.741020300988, 1585.29532947827, 2009.51764563168, 1480.07676462684, 930.525568677103, 1176.33924571021, 1682.08676271457, 1387.91725472597, 1329.48563773319, 1379.18841910105, 2127.83169958537, 1385.5762224412, 856.469014914059, 1376.4505741624, 2539.66709819706, 1346.3825483294, 953.320775540402, 1136.13566750428, 1792.68644541483],\\\r\n    [1794.38125269685, 1184.68974564362, 2159.56183304568, 4451.42681765499, 2175.40668800218, 1232.74856938352, 2861.22727959865, 3774.23521025869, 2596.67861827751, 1133.18098239315, 2900.99041231726, 3872.75898144278, 2006.92691330766, 1321.62616568234, 2082.67453005456, 4563.15979223099, 1958.89248387657, 1039.64340011071, 2363.83687092187, 3773.51161275845, 1849.65075785192, 1035.8973792205, 2099.6885550133, 4618.93061443277]]\r\n\r\nfig=ff.create_distplot(hist_data=hist_data, group_labels=['x', 'y'],curve_type=\"kde\",show_hist=False,\\\r\n    show_curve=True, show_rug=False,bin_size=1,histnorm=\"probability density\")\r\nfig.update_layout(template='plotly_white')\r\nfig.update_xaxes(zeroline=False, showline=True, linewidth=1, linecolor=\"black\", mirror=True)\r\nfig.update_yaxes(zeroline=True, showline=True, linewidth=1, linecolor=\"black\",mirror=True)\r\n```\r\n![histogram](https:\/\/user-images.githubusercontent.com\/7725685\/201892281-e6d0fa6a-86e4-4dab-9341-2cc848ce3a54.png)\r\n\r\n\r\n","comments":["**Workaround:** set `mirror` to `'all'` instead of `True`"],"labels":["bug"]},{"title":"uirevision property doesn't keep the viewpoint consistent","body":"The following is the copy-paste of a question I opened on stackoverflow, it looks like to be a bug, so here i go:\r\n\r\nI'm trying to keep the viewpoint consistent in my plotly-dash web app after every callback. This should be straightforward according to many already answered questions. The following line of code should do the magic:\r\n```python\r\nfig.update_layout(uirevision='constant')\r\n```\r\n\r\nUnfortunately for me, it looks like that this is not the case for 3D scatter plots, here is a very brief piece of code that should allow to reproduce my problem:\r\n\r\n```python\r\nimport plotly.express as px\r\ndf = px.data.iris()\r\n\r\nimport dash\r\nfrom dash import dcc\r\nfrom dash import html\r\nfrom dash import Input, Output\r\n\r\napp = dash.Dash()\r\napp.layout = html.Div([\r\n    dcc.Dropdown(['option1', 'option2', 'option3'], 'axis', id='x-dropdown', clearable=False),\r\n    dcc.Graph(id='main-plot')\r\n])\r\n@app.callback(\r\n    Output('main-plot', 'figure'),\r\n    Input('x-dropdown', 'value'))\r\ndef update_figure(x_selector):\r\n    fig = px.scatter_3d(df, x='sepal_length', y='sepal_width', z='petal_width',  color='species')\r\n    fig.update_layout(uirevision='constant')\r\n    return fig\r\n    \r\napp.run_server(debug=True, use_reloader=False)\r\n```\r\n\r\nThis is what i'm observing:\r\n[![unexpected behavior][1]][1]\r\n\r\nI can tell that the `uirevision` is doing something since the viewpoint is not completely reset after the callback, but it is still very imprecise. Is there something I'm missing or is this the expected behavior?\r\n\r\n\r\n  [1]: https:\/\/i.stack.imgur.com\/5M0Aw.gif","comments":["Following up on @lpuglia's question, as I'm facing the same problem. \r\nI've tried several combinations of uirevsion in layout and in scene, but with no success.\r\n\r\nAre there any updates on this issue?\r\nThanks","Any update on this issue? I'm also experiencing the same thing\r\n\r\nplotly                    5.17.0\r\n","Same issue for me, 3d scatter plot seems to ignore uirevision.\r\n\r\nI'm instead having to store the state of the camera.","@DoctorDinosaur can you share a workaround?","```py\r\n\r\napp = Dash(__name__)\r\napp.layout = html.Div(\r\n    [\r\n        # ... Your dash elements\r\n        dcc.Store(id=\"camera\"),\r\n    ]\r\n)\r\n\r\n# Callback to store camera position\r\n@app.callback(\r\n    dd.Output(\"camera\", \"data\"),\r\n    dd.Input(\"graph\", \"relayoutData\"),\r\n)\r\ndef store_camera_position(relayoutData):\r\n    if relayoutData is not None:\r\n        if \"scene.camera\" in relayoutData:\r\n            return relayoutData[\"scene.camera\"]\r\n    return no_update\r\n    \r\n# ... some code ....\r\n\r\n\r\n@app.callback(\r\n    dd.Output(\"graph\", \"figure\"),\r\n    # ... Your other callback stuff\r\n    dd.State(\"graph\", \"figure\"),\r\n    dd.State(\"camera\", \"data\"),\r\n)\r\ndef your_callback_func(... , figure, camera):\r\n    if camera is not None:\r\n        figure[\"layout\"][\"scene\"][\"camera\"] = camera\r\n    # ... The rest of your callback func\r\n    return figure\r\n```\r\n\r\nLittle buggy, but better than nothing. I'm sure someone with more experience can refine this.","I have an observation that might be useful to whoever that's going to fix this problem.\r\n\r\nI have a graph object Scatter3d plot. uirevision works fine when I update the plot data. But it breaks down when I maximize the browser tab (in general, change tab size). From that point on, the camera resets each time there is an update to the plot."],"labels":["bug","sev-3"]},{"title":"Hang for several minutes when daily limit reached on 429 error","body":"Hi.\r\nMy code is hanging for 3-10 minutos because of the next error.\r\nThe problem is because we have reached the daily limit, but in my opinion this error should not retry the request. It's my job to handle it.\r\n\r\n**chart_studio.exceptions.PlotlyRequestError: Hi there, you've reached the threshold of 100 combined image exports and chart saves per 24h period. If you need to raise your daily limit, please consider upgrading to a paid plan**\r\n\r\nThis error was introduced on https:\/\/github.com\/plotly\/plotly.py\/pull\/1307\r\n\r\nAt the moment I can't get a paid plan until the boss decide it, so i've to live with that.\r\n\r\nMaybe this should be configurable.\r\n\r\nMany thanks.","comments":["Perhaps a potential workaround for now would be to include a try-except block that catches that particular error and stops the program?","The problem is that no retry should be done on first 429 error, because if i've reached the daily limit will fail again.\r\n\r\nPerhaps should be better to allow disabling retrying on 429 code with a variable or something like this\r\n\r\n```\r\nchart_studio.tools.disableRetryWhenThrottled()\r\n```"],"labels":["performance"]},{"title":"Plotly Express facet wrap has inverted row numbering","body":"When creating a Plotly Express figure with `facet_col_wrap` parameter, the row order is inverted compared to a normal subplots figure. Row 1 is then the bottom row, row 2 the one before the last row, etc.\r\n\r\nUsing the gapminder example:\r\n```\r\nimport plotly.express as px\r\n\r\ndf = px.data.gapminder()\r\nfig = px.scatter(df, x='gdpPercap', y='lifeExp', color='continent', size='pop',\r\n                facet_col='year', facet_col_wrap=4)\r\n\r\nfig.update_traces(row=1, marker_color=\"red\")\r\n\r\nfig.show()\r\n```\r\n\r\nThis highlights the bottom row:\r\n![image](https:\/\/user-images.githubusercontent.com\/863938\/198620177-6ada4155-f0f8-4201-9089-22f719a02758.png)\r\n\r\n","comments":["Yes, this is an unfortunate case of us using different defaults in different parts of the code... see my answers in https:\/\/github.com\/plotly\/plotly.py\/issues\/3908","Heya @nicolaskruchten, it would be great to get this nuance documented somewhere more prominent. I read closely through both [Facet and Trellis Plots in Python](https:\/\/plotly.com\/python\/facet-plots\/) and [Creating and Updating Figures in Python](https:\/\/plotly.com\/python\/creating-and-updating-figures\/) closely hoping to find some clue how the indexing for faceted plots produced from Plotly Express works, and why they were reversed from what I expected. It was only after a bunch of googling that I found this issue, which explained what's going on.\r\n\r\nJust a small section\/note explaining how the row\/col indexes are derived in either\/both of those pages would be really helpful.","@ned2 since you have a clear idea now what's missing from the docs, would you be up for adding such a note to those pages? They both have \"Suggest an edit to this page\" links which take you to an editor in the appropriate markdown files. Then @LiamConnors can review and deploy."],"labels":["duplicate"]},{"title":"Explicit figure height replaced with autosize=True in callback","body":"I'm creating a plotly express line chart and seeing an explicit height=300 being replaced with autosize=True in the layout when used as an Input or State to a callback. This causes size issues when trying to serialize the chart and load it back later.\r\n\r\nI'm using Plotly 5.10.0, Dash 2.6.2 with Python 3.10.7.\r\n\r\nThe following demonstrates the problem. \r\n\r\n```\r\nimport plotly.express as px\r\nimport dash\r\nfrom dash import Dash, dcc, html, Output, Input, State\r\nimport dash_bootstrap_components as dbc\r\n\r\n\r\n@dash.callback(\r\n    Output(\"main-content\", \"children\"),\r\n    Output(\"loaded-values\", \"children\"),\r\n    Input(\"load-button\", \"n_clicks\"),\r\n    prevent_initial_call=True\r\n)\r\ndef add_chart(clicks):\r\n    df = px.data.stocks()\r\n    df = df.melt(id_vars=\"date\", value_name=\"price\", var_name=\"stock\")\r\n\r\n    fig = px.line(\r\n        df,\r\n        x=\"date\",\r\n        y=\"price\",\r\n        color=\"stock\",\r\n        title=\"Stock Prices\",\r\n        height=300,\r\n    )\r\n\r\n    info = {\r\n        \"width\": fig.layout.width,\r\n        \"height\": fig.layout.height,\r\n        \"autosize\": fig.layout.autosize,\r\n    }\r\n\r\n    return dcc.Graph(figure=fig, id=\"plot\"), f\"{clicks}: {info}\"\r\n\r\n\r\n@dash.callback(\r\n    Output(\"callback-values\", \"children\"),\r\n    # Note: height=300 is seen when triggered by main-content, but autosize=True\r\n    #  is seen when triggered by observe-button\r\n    Input(\"observe-button\", \"n_clicks\"),\r\n    Input(\"main-content\", \"children\"),\r\n    prevent_initial_call=True\r\n)\r\ndef observe_chart(clicks, content):\r\n    ctx = dash.callback_context\r\n    info = {}\r\n    for k in [\"width\", \"height\", \"autosize\"]:\r\n        try:\r\n            info[k] = content[\"props\"][\"figure\"][\"layout\"][k]\r\n        except Exception as e:\r\n            info[k] = None\r\n\r\n    return f\"{clicks}: {info}\"\r\n\r\n\r\napp = Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])\r\napp.layout = dbc.Container([\r\n    dbc.Button(\"Load\", id=\"load-button\", class_name=\"m-2\"),\r\n    dbc.Button(\"Observe\", id=\"observe-button\", class_name=\"m-2\"),\r\n    html.Br(),\r\n    dbc.Label(\"Loaded Chart\"),\r\n    dbc.Container([], id=\"main-content\"),\r\n    dbc.Label(\"Loaded Layout Values\"),\r\n    dbc.Container(id=\"loaded-values\"),\r\n    dbc.Label(\"Callback Layout Values\"),\r\n    dbc.Container(id=\"callback-values\"),\r\n])\r\napp.run_server(debug=True)\r\n```\r\n\r\nClick the \"Load\" button to \"load\" the chart. The layout parameters of interest will be shown under \"Loaded Layout Values\" and the \"Callback Layout Values\" will be correct. Then click the \"Observe\" button to update the \"Callback Layout Values\". Instead of a height=300 there will be an autosize=True. \r\n\r\nWith the explicit height being discarded the user selected size can't be serialized and loaded later...\r\n\r\n\r\n","comments":[],"labels":["dash"]},{"title":"Sunburst chart label position\/CSS via python","body":"This is a feature request for either custom css via python or custom label position via arguments for sunburst charts\r\n\r\nThere's a number of posts across different forums and the solutions all betray the general ease of use via plotly, and in general are sub optimal. As the slices get too small, the data becomes unreadable. The pie chart has the ability to put labels outside the chart, but sunburst has no such option. An easy breakfix would be some sort of universal option to inject css options. I could then just offset the values outside the circle, and then make lines using css. \r\n\r\nIf you could take the css route, you add some powerful options across the board. ","comments":[],"labels":["feature"]},{"title":"Controlling Hoverlabel box position.","body":"It would be nice if we can control the hoverlabel box position for any type of charts:\r\n\r\n- As the box does not move, only the values would be modified.\r\n- Like the legends, it would be great if we have the possibility to get the hoverlabel box outside from the chart area.\r\n\r\nSome questions\/references:\r\n- [On the forum](https:\/\/community.plotly.com\/t\/is-it-possible-to-control-the-position-of-the-hoverlabel-box\/44631\/5)\r\n- [Stackoverflow](https:\/\/stackoverflow.com\/questions\/72865150\/how-to-fix-position-of-hover-template-in-plotly-express)\r\n","comments":[],"labels":["feature"]},{"title":"Add support for multiple imshow on the same plot, with opacity slider","body":"This displays two `imshow` images in two different tabs:\r\n\r\n```\r\nimport plotly.express as px\r\nimport numpy as np\r\nfrom skimage import io\r\n\r\nimg = io.imread('https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/0\/00\/Crab_Nebula.jpg\/240px-Crab_Nebula.jpg')\r\nfig = px.imshow(img)\r\n\r\nx = np.random.random((100, 200))\r\nfig2 = px.imshow(x)\r\n\r\nfig.show()\r\nfig2.show()\r\n```\r\n\r\nIs there planned support for displaying the two \"imshow\" on the same plot, with an opacity slider for both layers?\r\n\r\n(even if the two 2D-arrays are of different shape - this is possible in `matplotlib` with the `extent` parameter of imshow)\r\n","comments":["If not implemented yet, I can maybe help to code it, or was it already on your roadmap @nicolaskruchten ?\r\n\r\nHere is the matplotlib equivalent:\r\n\r\n```\r\nimport numpy as np, matplotlib.pyplot as plt, matplotlib.widgets as mpwidgets, scipy.misc\r\nx = scipy.misc.face(gray=False)     # shape (768, 1024, 3)\r\ny = np.random.random((100, 133))    # shape (100, 133)\r\nfig, (ax0, ax1) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [5, 1]})\r\nOPACITY = 0.5\r\nimg0 = ax0.imshow(x, cmap=\"jet\")\r\nimg1 = ax0.imshow(y, cmap=\"jet\", alpha=OPACITY, extent=img0.get_extent())\r\nslider0 = mpwidgets.Slider(ax=ax1, label='opacity', valmin=0, valmax=1, valinit=OPACITY)\r\nslider0.on_changed(lambda value: img1.set_alpha(value))\r\nplt.show()\r\n```\r\n\r\nDo you think the same is available in plotly?\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/6168083\/196716297-8d1acbb8-e3f0-4c22-a585-0824854c6c51.png)\r\n"],"labels":["feature"]},{"title":"v.2.3.0 JSON format converter","body":" I am looking at some code examples from https:\/\/moderndata.plotly.com\/elections-analysis-in-r-python-and-ggplot2-9-charts-from-4-countries\/\r\nThe code is very old (from 6 years ago) and the json API has changed considerably over the years. Could you please add a converter for reading old json files?\r\n\r\nThank you","comments":[],"labels":["feature"]},{"title":"Allow browser tab title to be set","body":"By default, if running a python script and doing `fig.show()`, there is no way to control the title of the browser window\/tab.\r\n\r\nIdeally, you'd be able to inject a `<title>MYTITLE<\/title>` into the generated HTML via some parameter.\r\n\r\nI found a way to hack it and posted an answer in StackOverflow here:\r\nhttps:\/\/stackoverflow.com\/a\/73807264\/1970354\r\n\r\nBut it would be nice if this was generalized and supported directly by plotly.\r\n","comments":["Does the following not support our needs?\r\n\r\n`app = dash.Dash(__name__, title='My Browser Tab Title')`","> Does the following not support our needs?\r\n> \r\n> `app = dash.Dash(__name__, title='My Browser Tab Title')`\r\n\r\nMaybe so, but then I have to create a `Dash` application.  Using `fig.show()` is a lot simpler!"],"labels":["feature"]},{"title":"Styling the appearance of bar charts","body":"Is it possible to change the appearance of bar charts so they look more like the images below?\r\nIs it possible to change the shape of the bar and create a partial overlap between different values like in image 1?\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/46263358\/191222512-9f5056b3-2b91-42f9-a77f-08afbbe0ca4b.png)\r\n![image](https:\/\/user-images.githubusercontent.com\/46263358\/191222582-0b8d0231-0978-4088-836f-e92dccd820a7.png)\r\n","comments":["Hi @rohitsathish. No, there is currently no way to change the shape or overlap of the bars in a bar plot. Probably the closest you could get to something like the examples you provided would be to use a Filled area plot, though it definitely wouldn't be as straightforward:\r\n\r\n```python\r\nimport plotly.graph_objects as go\r\n\r\nfig = go.Figure()\r\nfig.add_trace(go.Scatter(x=[0,0.5,1,1.5,2], y=[0,1,2,1,0],\r\n                    fill='toself', mode='none'))\r\n\r\nfig.add_trace(go.Scatter(x=[1,1.5,2,2.5,3], y=[0,1,2,1,0],\r\n                    fill='toself', mode='none'))\r\n\r\nfig.update_layout(\r\n    xaxis_range = [0,5.2],\r\n    yaxis_range = [0,3])\r\n\r\nfig.show()\r\n```\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/69512633\/224516754-e8fe2b0d-0bce-46f9-b71d-bbd9bed91d32.png)\r\n\r\n\r\nThose examples look like they were made in Excel or some other chart maker designed specifically to create stylized charts"],"labels":["question"]},{"title":"Can't render in jupyter lab with history_manager disabled","body":" Running the following code with history_manager diabled in jupyerlab\r\n\r\n```\r\nimport plotly.express as px\r\nfig = px.scatter(x=[0, 1, 2, 3, 4], y=[0, 1, 4, 9, 16])\r\n\r\nimport plotly.io as pio\r\npio.renderers.default = 'iframe'\r\nfig.show()\r\n```\r\n\r\nyields the following error:\r\n\r\n```\r\nFile ~\/venvs\/plotly\/lib\/python3.10\/site-packages\/plotly\/io\/_base_renderers.py:612, in IFrameRenderer.build_filename(self)\r\n    610 def build_filename(self):\r\n    611     ip = IPython.get_ipython() if IPython else None\r\n--> 612     cell_number = list(ip.history_manager.get_tail(1))[0][1] + 1 if ip else 0\r\n    613     filename = \"{dirname}\/figure_{cell_number}.html\".format(\r\n    614         dirname=self.html_directory, cell_number=cell_number\r\n    615     )\r\n    616     return filename\r\n\r\nIndexError: list index out of range\r\n```\r\n\r\nScript to reproduce:\r\n\r\nRun this, open the demo.ipynb try to execute the cell.\r\n\r\n```\r\npython3.10 -m venv .venv plotly\r\nsource plotly\/bin\/activate\r\npip install \"jupyterlab>=3\" \"ipywidgets>=7.6\" pandas \r\npip install plotly\r\nmkdir -p ipyc\/profile_default\r\n\r\necho \"c = get_config()\r\nc.HistoryManager.enabled = False\" > ipyc\/profile_default\/ipython_kernel_config.py\r\n\r\ncat > .\/demo.ipynb <<- EOM\r\n{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"id\": \"47466be7-d06a-454f-ba8e-8042889d7b6f\",\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"import plotly.express as px\\n\",\r\n    \"fig = px.scatter(x=[0, 1, 2, 3, 4], y=[0, 1, 4, 9, 16])\\n\",\r\n    \"\\n\",\r\n    \"import plotly.io as pio\\n\",\r\n    \"pio.renderers.default = 'iframe'\\n\",\r\n    \"fig.show()\"\r\n   ]\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3 (ipykernel)\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 3\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text\/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython3\",\r\n   \"version\": \"3.10.6\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 5\r\n}\r\nEOM\r\n\r\nIPYTHONDIR=.\/ipyc jupyter lab\r\n```","comments":["Thanks @jabbera, looks like a fairly simple fix - fall back on `get_ipython().execution_count` or just our own counter like we [use](https:\/\/github.com\/plotly\/plotly.py\/blob\/00c18fd0d09a21f7d0f54c383ff5258fe1ff7d28\/packages\/python\/plotly\/plotly\/io\/_base_renderers.py#L631) in `CoCalcRenderer`.\r\n\r\nCurious though, what's the motivation to disable `history_manager`?"," @alexcjohnson We are running in jupyterhub and the home folder is an NFS share which doesn't play well with sqlite."],"labels":["bug"]},{"title":"legend and yaxis titles don't match in color","body":"A community member has pointed out via message to Jiny that the yaxis2 and yaxis3 title colors don't match the yaxis2 and yaxis3 legend color in this [example](https:\/\/plotly.com\/python\/multiple-axes\/#multiple-axes).\r\n\r\nThe community member suggested the following:\r\n\r\n> the colors follow the \u2018Plotly\u2019 color sequence (#636EFA, #EF553B, #00CC96, #AB63FA).\r\nSetting titlefont and tickfont to those values in the order of the axes works.\r\n\r\nA similar issue can be found in the first example in the [javascript docs](https:\/\/plotly.com\/javascript\/multiple-axes\/); the second example of the javascript docs has a yaxis5 title which does not exist in the legend. ","comments":["Nice catch! In the first one, the issue is that we hard-coded the axis colors to match the default trace colors with no template, but when plotly.py adopted a different default template we needed to update the colors. While we're at it though, rather than setting `tickfont.color` and `textfont.color` separately, we should be able to just set `color`, ie this:\r\n```py\r\n    yaxis=dict(\r\n        title=\"yaxis title\",\r\n        titlefont=dict(\r\n            color=\"#1f77b4\"\r\n        ),\r\n        tickfont=dict(\r\n            color=\"#1f77b4\"\r\n        )\r\n    )\r\n```\r\ncan simplify to:\r\n```py\r\n    yaxis=dict(title=\"yaxis title\", color=\"#1f77b4\")\r\n```\r\n\r\nIn the JS docs, looks like someone just simplified this mock: https:\/\/rreusser.github.io\/plotly-mock-viewer\/#20 but didn't properly adjust the titles and colors of y5 and y6 to be correct for y3 and y4. Also that whole page can simplify the colors the same way."],"labels":["bug"]},{"title":"Plotly express shows Invalid property latitude for choropleth map plot ","body":"I am using these dataset \" dataset tempat perlancongan Malaysia.csv\" . In that I'm Passing the latitude and longitude for plotting the plot plot for spatial coordinate vs numerical feature .\r\nI am giving the Input as follows :\r\nimport plotly.express as px\r\nprint(df)\r\nfig = plotly.express.choropleth(df,\r\nlat='Latitude',\r\nlon='Longitude',\r\ncolor ='Nama Tempat')\r\n\r\nfig.show()\r\n\r\nerror I got =\r\n\r\nValueError: Invalid property specified for object of type plotly.graph_objs.Choropleth: 'lat'\r\n![Screenshot from 2022-09-06 12-16-52](https:\/\/user-images.githubusercontent.com\/112870317\/188802726-42d107ed-2421-453f-932b-b3ebcbd4aa43.png)\r\n\r\n","comments":["Hi @bhavana-khandare. The `Choropleth` graph object has neither `lat` nor `long` as a property.\r\n\r\nFor more information, see these examples: https:\/\/plotly.com\/python\/choropleth-maps\/\r\n\r\nor in the Figure Reference: https:\/\/plotly.com\/python\/reference\/choropleth\/#choropleth"],"labels":["usage"]},{"title":"Save choropleth figure as static png image (Offline)","body":"I would like to save a px.Cholorpleth figure into a static image (in png) using kaleido but it did not make it work (see below)\r\n\r\nI have pip install plotly-geo, but it did not solve the problem\r\nI give a geojson in argument to px.choropleth, so I don't understand why it needs to download https:\/\/cdn.plot.ly\/usa_110m.json\r\n\r\n```\r\nfrom urllib.request import urlopen\r\nimport json\r\nwith urlopen('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json') as response:\r\n    counties = json.load(response)\r\n\r\nimport pandas as pd\r\ndf = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/fips-unemp-16.csv\",\r\n                   dtype={\"fips\": str})\r\n\r\nimport plotly.express as px\r\n\r\nfig = px.choropleth(df, geojson=counties, locations='fips', color='unemp',\r\n                           color_continuous_scale=\"Viridis\",\r\n                           range_color=(0, 12),\r\n                           scope=\"usa\",\r\n                           labels={'unemp':'unemployment rate'}\r\n                          )\r\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\r\nfig.write_image('image.png')\r\n# ValueError: Transform failed with error code 525: unexpected error while fetching topojson file at https:\/\/cdn.plot.ly\/usa_110m.json\r\n\r\n```","comments":["Hi @gab23r. What versions of `plotly.py` and `plotly.js` are you using? The image saves as it should for me with recent versions.\r\n\r\nEDIT: Just noticed \"offline\" in the title :)\r\n\r\nThis looks to be somewhat of a duplicate of #3974. Basically that json file in the error has to come either from that CDN link, or an offline copy you can point `plotlyConfig` to."],"labels":["usage"]},{"title":"Introducing a template name flag\/variable","body":"Currently it is (as far as I can see from [templategen\/definitions.py](https:\/\/github.com\/plotly\/plotly.py\/blob\/00c18fd0d09a21f7d0f54c383ff5258fe1ff7d28\/packages\/python\/plotly\/templategen\/definitions.py) and [templategen\/\\_\\_init__.py](https:\/\/github.com\/plotly\/plotly.py\/blob\/00c18fd0d09a21f7d0f54c383ff5258fe1ff7d28\/packages\/python\/plotly\/templategen\/__init__.py)) not possible after applying a template to find out which template was applied. It would be nice to have a flag\/variable that can later be used for this purpose.\r\n","comments":[],"labels":["feature"]},{"title":"Using Additional Symbols in Plotly 3D","body":"Hello, \r\n\r\nI have a task to complete that requires seven distinct, solid symbols for a 3d scatter figure (go.Scatter3d), and from what I can gather from other threads there are only eight symbols available total, many of which are not solid, meaning I can't make the use of opacity meaningful, which is very important for what I'm trying to do. \r\n\r\nThese are the symbols my console is telling me are valid: ['circle', 'circle-open', 'cross', 'diamond',\r\n            'diamond-open', 'square', 'square-open', 'x']\r\n\r\nHow do I add more symbols, or is this even possible? Unfortunately this is a pretty hard requirement for me, diversity of symbols in plotting is pretty much non-negotiable for making plots colorblind-friendly\r\n\r\nThanks for your help! \r\n","comments":["Hi @rkerr31. This is certainly possible! See here for more information\/examples: https:\/\/plotly.com\/python\/marker-style\/#custom-marker-symbols"],"labels":["question"]},{"title":"Autorange property of update_yaxes does not work upon zooming in","body":"in func blw the row before the last (fig.update_yaxes(autorange=True)) does not produce any result: the Y axis remains unchanged upon zooming in the chart.\r\n\r\ndef chart_symbol(symbol, df):\r\n    fig = make_subplots(rows=3, cols=1, subplot_titles=[symbol, 'Volume', 'ATR(14)'], shared_xaxes=True)\r\n    fig.add_trace(go.Candlestick(x=df.date, open=df.open, high=df.high, low=df.low, close=df.close,\r\n                                 name=symbol, showlegend=False), row=1, col=1)\r\n    fig.add_trace(go.Scatter(x=df.date, y=df.dma10, line=dict(color='blue', width=2), name='10dma'), row=1, col=1)\r\n    fig.add_trace(go.Scatter(x=df.date, y=df.dma20, line=dict(color='violet', width=2), name='20dma'), row=1, col=1)\r\n    fig.add_trace(go.Scatter(x=df.date, y=df.dma50, line=dict(color='orange', width=2), name='50dma'), row=1, col=1)\r\n    fig.add_trace(go.Bar(x=df.date, y=df.volume, name='Volume'), row=2, col=1)\r\n    fig.add_trace(go.Scatter(x=df.date, y=df.vol30dma, line=dict(color='darkblue', width=1), name='Vol30dma'), row=2, col=1)\r\n    fig.add_trace(go.Scatter(x=df.date, y=df.ATR, line=dict(color='darkblue', width=1), name='ATR(14)'), row=3, col=1)\r\n    fig.update(layout_xaxis_rangeslider_visible=False)\r\n    fig.update_yaxes(autorange=True)\r\n    fig.show()","comments":["`yaxis_autorange=True` is the default setting. Hence `fig.update_yaxes(autorange=True)` has no effect.\r\nSee this reference: [https:\/\/plotly.com\/python\/reference\/layout\/yaxis\/#layout-yaxis-autorange](https:\/\/plotly.com\/python\/reference\/layout\/yaxis\/#layout-yaxis-autorange)\r\n\r\nOnly `fig.update_yaxes(autorange=False)`, respectively `fig.update_yaxes(autorange=\"reversed\")` has a visible effect:\r\n```\r\nimport numpy as np\r\nimport plotly.graph_objects as go\r\n\r\nfig=go.Figure()\r\nfig.add_scatter(x=np.arange(6), y=[1.2, 4.25, 3.02, 1.7, 2.3])\r\nfig.add_scatter(x=np.arange(6), y=[-0.75, 4.67, 3.14, 2.8, 7.35])\r\nfig.show()\r\nfig.update_yaxes(autorange=False) # or \"reversed\"\r\n```","I have a similar problem now.\r\n\r\nIf you have subplots with `shared_xaxes=True`, that is natural to do in time series using the X axis, the autorange only works in the chart you are doing the box select. \r\n\r\nAll the other charts apply the box selection but don't apply the yaxis autorange for the new data window.\r\n\r\nI'm trying to solve it using Dash callbacks, but can't find a way to clearly check which data is in each chart, so it's not easy to do because there is a lot of circular information in the internal data structure.\r\n\r\nI would expect to autorange to work in all the yaxis while selecting a box in one of the subplots while sharing xaxes, but it's not working."],"labels":["usage"]},{"title":"labels not working in legend un bars","body":"I\u00b4m trying the next code, but the atributte labels not is working\r\n```python\r\nimport plotly.express as px\r\n\r\nd = {'col1': [1, 2, 3], 'col2': [3, 4, 5]}\r\ndf = pd.DataFrame(data=d)\r\nfig = px.line(df, x=df.index, y=['col1', 'col2'], labels = {'col1':'hi', 'col2': 'hello'})\r\nfig.show()\r\n```\r\n\r\nfor this reason i use\r\n```python\r\nimport plotly.express as px\r\n\r\nd = {'col1': [1, 2, 3], 'col2': [3, 4, 5]}\r\ndf = pd.DataFrame(data=d)\r\nfig = px.line(df, x=df.index, y=['col1', 'col2'])\r\n\r\n\r\nnew_legend_names = {'col1':'hi', 'col2': 'hello'}\r\nfig.for_each_trace(\r\n    lambda t: t.update(\r\n        name=new_legend_names[t.name],\r\n        legendgroup=new_legend_names[t.name],\r\n        hovertemplate=t.hovertemplate.replace(t.name, new_legend_names[t.name]),\r\n    )\r\n)\r\n```","comments":[],"labels":["usage"]},{"title":"fig.add_vline fails on figure with a separate subplot containing Scatter3d","body":"The following code creates a 2D subplot in the left column and a 3D subplot in the right column. Adding a vertical line to the 2D subplot fails if a `Scatter3d` has been added to the 3D subplot.\r\n\r\nAnother bug shown in this example is that  `add_vline` does not add any annotations if the plot is empty.\r\n\r\n```python\r\nfrom plotly import subplots\r\nspecs = [\r\n    [{}, {'type': 'scene', 'rowspan': 1}],\r\n]\r\nfig = subplots.make_subplots(rows=1, cols=2, specs=specs)\r\n\r\n# Add dummy data \r\n# If both of these are commented out, fig.add_vline does nothing\r\n# If neither are commented out, fig.add_vline raises a PlotlyKeyError\r\n# If fig.add_scatter3d is commented out, the figure is generated successfully\r\nfig.add_scatter(x=[0, 1], y=[0, 1], row=1, col=1)\r\nfig.add_scatter3d(x=[0, 1], y=[0, 1], z=[0, 1], row=1, col=2)\r\n\r\n# Add vertical line to left (2D) subplots only\r\nfig.add_vline(x=2, col=1)  # Raises PlotlyKeyError\r\n```\r\n\r\n(Plotly version 5.9.0)","comments":["Three different behaviours for permutations of the order of the `fig` methods:\r\n\r\n```python\r\n# Works as intended\r\nfig.add_scatter(x=[0, 1], y=[0, 1], row=1, col=1)\r\nfig.add_vline(x=0.5, col=1)\r\nfig.add_scatter3d(x=[0, 1], y=[0, 1], z=[0, 1], row=1, col=2)\r\n```\r\n\r\n```python\r\n# Vertical line missing\r\nfig.add_vline(x=0.5, col=1)\r\nfig.add_scatter(x=[0, 1], y=[0, 1], row=1, col=1)\r\nfig.add_scatter3d(x=[0, 1], y=[0, 1], z=[0, 1], row=1, col=2)\r\n```\r\n\r\n```python\r\n# Exception raised\r\nfig.add_scatter3d(x=[0, 1], y=[0, 1], z=[0, 1], row=1, col=2)\r\nfig.add_scatter(x=[0, 1], y=[0, 1], row=1, col=1)\r\nfig.add_vline(x=0.5, col=1)\r\n```\r\n\r\nAnd the exception stack trace:\r\n\r\n```\r\n  File \"C:\\Users\\sam\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\plotly\\graph_objs\\_figure.py\", line 997, in add_vline\r\n    return super(Figure, self).add_vline(\r\n  File \"C:\\Users\\sam\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\plotly\\basedatatypes.py\", line 4086, in add_vline\r\n    self._process_multiple_axis_spanning_shapes(\r\n  File \"C:\\Users\\sam\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\plotly\\basedatatypes.py\", line 4034, in _process_multiple_axis_spanning_shapes\r\n    self.add_shape(\r\n  File \"C:\\Users\\sam\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\plotly\\graph_objs\\_figure.py\", line 22874, in add_shape\r\n    return self._add_annotation_like(\r\n  File \"C:\\Users\\sam\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\plotly\\basedatatypes.py\", line 1528, in _add_annotation_like\r\n    self._add_annotation_like(\r\n  File \"C:\\Users\\sam\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\plotly\\basedatatypes.py\", line 1584, in _add_annotation_like\r\n    not self._subplot_not_empty(\r\n  File \"C:\\Users\\sam\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\plotly\\basedatatypes.py\", line 4217, in _subplot_not_empty\r\n    for t in [\r\n  File \"C:\\Users\\sam\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\plotly\\basedatatypes.py\", line 4221, in <listcomp>\r\n    \"x\" if d[xaxiskw] is None else d[xaxiskw],\r\n  File \"C:\\Users\\sam\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\plotly\\basedatatypes.py\", line 4704, in __getitem__\r\n    self._raise_on_invalid_property_error(_error_to_raise=PlotlyKeyError)(\r\n  File \"C:\\Users\\sam\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\plotly\\basedatatypes.py\", line 5078, in _ret\r\n    raise _error_to_raise(\r\n_plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Scatter3d: 'xaxis'\r\n```","Looks like this is related to #3424 "],"labels":["bug"]},{"title":"Importing plotly.tools changes warnings.formatwarning as a side effect","body":"Importing plotly.tools changes warnings.formatwarning as a side effect. Is this necessary? If not, it would be better to only do this when requested explicitely.\r\n\r\nExample:\r\n```\r\nimport warnings\r\nprint(warnings.formatwarning)\r\nimport plotly.tools\r\nprint(warnings.formatwarning)\r\n```","comments":[],"labels":["question"]},{"title":"Button update does work when selecting specific traces","body":"Thanks for your interest in Plotly.py!\r\n\r\nBefore opening an issue, please search for existing and closed issues :)\r\n\r\n**Please** accompany bug reports with a reproducible example. Please use the [latest version](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/CHANGELOG.md) of plotly.py in your report unless not applicable.\r\n\r\nNote that GitHub Issues are meant to be used for bug reports and feature requests only. Implementation or usage questions should be asked on [community.plotly.com](https:\/\/community.plotly.com\/c\/graphing-libraries\/python\/10) or on Stack Overflow (tagged [`plotly`](https:\/\/stackoverflow.com\/questions\/tagged\/plotly)).\r\n\r\nSimilar issue reported here: https:\/\/chart-studio.plotly.com\/~empet\/15569\/updatemenus-bug-when-a-single-trace-is\/#\/\r\n\r\nMy example here:\r\n\r\n```\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\n\r\ndef data_sample():\r\n    start_date = pd.Timestamp(\"2020-01-01\")\r\n    end_date = pd.Timestamp(\"2021-01-31\")\r\n    index = pd.date_range(start_date, end_date, freq=\"D\")\r\n    df = pd.DataFrame(index=index)\r\n    df[\"x1\"] = (np.random.randn(len(index)) + 1) * 10000\r\n    df[\"x2\"] = (np.random.randn(len(index)) + 1) * 20000\r\n    df[\"x3\"] = (np.random.randn(len(index)) + 1) * 30\r\n    df[\"x4\"] = (np.random.randn(len(index)) + 1) * 40\r\n    df[\"x5\"] = (np.random.randn(len(index)) + 1) * 500\r\n    df['y'] = np.random.randn(len(index)) +\\\r\n        5*df[\"x1\"] + 10*df[\"x2\"] + 20*df[\"x3\"] + 30*df[\"x4\"] - 40*df[\"x5\"]\r\n    return df.clip(lower=0)\r\nts_data = data_sample().iloc[:10]\r\n\r\nfrom plotly.subplots import make_subplots\r\nfig_go = make_subplots(rows=2, cols=1, shared_xaxes=True)\r\nfor col in ts_data:\r\n    fig_go.add_trace(\r\n        go.Bar(\r\n            x=ts_data.index, y=ts_data[col], name=col\r\n        ),\r\n        row=1,\r\n        col=1\r\n    )\r\nfor col in ts_data:\r\n    fig_go.add_trace(\r\n        go.Bar(\r\n            x=ts_data.index, y=ts_data[col], name=col\r\n        ),\r\n        row=2,\r\n        col=1\r\n    )\r\n    \r\nmy_button_type = [\r\n    {\r\n        'label': \"Bar\",\r\n        'method': \"update\",\r\n        'args': [{\"type\": \"bar\"}, {}, [0, 1, 2, 3, 4, 5]]\r\n    },\r\n    {\r\n        'label': \"Scatter\",\r\n        'method': \"update\",\r\n        'args': [{\"type\": \"scatter\", 'mode': 'markers'}, {}, [0, 1, 2, 3, 4, 5]]\r\n    },\r\n    {\r\n        'label': \"Line\",\r\n        'method': \"update\",\r\n        'args': [{\"type\": \"scatter\", \"mode\": \"lines\"}, {}, [0, 1, 2, 3, 4, 5]]\r\n    }\r\n]\r\nmy_button_stack = [\r\n    {\r\n        'label': \"Non-stacked\",\r\n        'method': \"update\",\r\n        'args': [{\"fill\": None, \"stackgroup\": None}, {\"barmode\": \"group\"}, [0, 1, 2, 3, 4, 5]]\r\n    },\r\n    {\r\n        'label': \"Stacked\",\r\n        'method': \"update\",\r\n        'args': [{'fill': 'tozeroy', \"stackgroup\": 1}, {\"barmode\": \"relative\"}, [0, 1, 2, 3, 4, 5]]\r\n    }\r\n]\r\nmy_button_pct = [\r\n    {\r\n        'label': \"Absolute\",\r\n        'method': \"update\",\r\n        'args': [{\"visible\": abs_visible}, {}, [0, 1, 2, 3, 4, 5]],\r\n    },\r\n    {\r\n        'label': \"Percentage\",\r\n        'method': \"update\",\r\n        'args': [{\"visible\": pct_visible}, {}, [0, 1, 2, 3, 4, 5]]\r\n    }\r\n]\r\n\r\nfig_go.update_layout({\r\n        'updatemenus': [\r\n            {\r\n                'type': \"dropdown\",\r\n                'direction': 'down',\r\n                'x': 0.1,\r\n                'y': 1.15,\r\n                'showactive': True,\r\n                'active': 0,\r\n                'buttons': my_button_type\r\n            },\r\n            {\r\n                'type': \"dropdown\",\r\n                'direction': 'down',\r\n                'x': 0.25,\r\n                'y': 1.15,\r\n                'showactive': True,\r\n                'active': 0,\r\n                'buttons': my_button_stack\r\n            },\r\n            {\r\n                'type': \"dropdown\",\r\n                'direction': 'down',\r\n                'x': 0.4,\r\n                'y': 1.15,\r\n                'showactive': True,\r\n                'active': 0,\r\n                'buttons': my_button_pct\r\n            }\r\n    ]\r\n})\r\nfig_go.update_layout(hovermode='x unified')\r\nfig_go.show()\r\n```\r\n\r\nThe problem seems to be only on the \"Stack\/Non-stacked\" dropdown. Maybe because its the only one that changes both data and layout of the traces. ","comments":["Hi @gilbertovilarunc. It's currently not possible to switch to a completely new trace with distinct data and layout if that's what you're trying to accomplish.\r\n\r\nSee this discussion: https:\/\/community.plotly.com\/t\/change-a-specific-trace-data-with-button\/71050\/14\r\n\r\nAnd the accompanying feature request: https:\/\/github.com\/plotly\/plotly.py\/issues\/3994"],"labels":["usage"]},{"title":"Add date in subplots ","body":"Hi everyone!\r\n\r\nI'm currently trying to create 50 subplots which will update each second like real time.  I don't use dash because visualizing with Jupiter is more important for me. \r\n\r\nWell, here is an example of a pseudocode\r\n\r\n\r\n```python\r\nrows = 50\r\nfig = go.FigureWidget(make_subplots(rows = rows,  cols = 1, vertical_spacing = 0.005))\r\nfor i in range(1,rows+1):\r\n        fig.add_trace(go.Scatter(line_color = ...), row = i, col=1)\r\n```\r\n\r\nAfter, I update my subplots by signals. I decimated date and added in fig\r\n\r\n```python\r\nwith fig.batch_update():\r\n        for j in range(rows):\r\n            fig.data[j].x = trace['Date'][START:END]      \r\n            fig.data[j].y = trace.iloc[START:END, col_st:col_end][str(col_end)]\r\n```\r\n\r\nAnd this procedure takes 3 seconds each loop, which is a very long time for my tasks. My question is how I can add more faster date. \r\n\r\nIf anyone wants to repeat the code, create date with size 100 and add to each subplots. \r\n\r\n","comments":[],"labels":["performance"]},{"title":"Feature:  Add HTML as mode bar download option","body":"Currently, the mode bar download button can support png, svg, jpeg and webp as options to toImageButtonOptions. There is also fig.write_html() which can be used too save an interactive html file.\r\n\r\nIt would be useful to support html for the mode bar download button to avoid the necessity of adding a dcc.Download  explicitly and keep to a consistent interface... Or, alternately, allow the user to provide custom behavior.\r\n\r\n","comments":["See #2114 for a discussion on custom modebar buttons","I couldn't understand how to save the figure as html using the custom modebar button."],"labels":["feature"]},{"title":"Bump nbconvert from 5.6.1 to 6.5.1 in \/doc","body":"Bumps [nbconvert](https:\/\/github.com\/jupyter\/nbconvert) from 5.6.1 to 6.5.1.\n<details>\n<summary>Release notes<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/jupyter\/nbconvert\/releases\">nbconvert's releases<\/a>.<\/em><\/p>\n<blockquote>\n<h2>Release 6.5.1<\/h2>\n<p>No release notes provided.<\/p>\n<h2>6.5.0<\/h2>\n<h2>What's Changed<\/h2>\n<ul>\n<li>Drop dependency on testpath. by <a href=\"https:\/\/github.com\/anntzer\"><code>@\u200banntzer<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1723\">jupyter\/nbconvert#1723<\/a><\/li>\n<li>Adopt pre-commit by <a href=\"https:\/\/github.com\/blink1073\"><code>@\u200bblink1073<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1744\">jupyter\/nbconvert#1744<\/a><\/li>\n<li>Add pytest settings and handle warnings by <a href=\"https:\/\/github.com\/blink1073\"><code>@\u200bblink1073<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1745\">jupyter\/nbconvert#1745<\/a><\/li>\n<li>Apply Autoformatters by <a href=\"https:\/\/github.com\/blink1073\"><code>@\u200bblink1073<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1746\">jupyter\/nbconvert#1746<\/a><\/li>\n<li>Add git-blame-ignore-revs by <a href=\"https:\/\/github.com\/blink1073\"><code>@\u200bblink1073<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1748\">jupyter\/nbconvert#1748<\/a><\/li>\n<li>Update flake8 config by <a href=\"https:\/\/github.com\/blink1073\"><code>@\u200bblink1073<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1749\">jupyter\/nbconvert#1749<\/a><\/li>\n<li>support bleach 5, add packaging and tinycss2 dependencies by <a href=\"https:\/\/github.com\/bollwyvl\"><code>@\u200bbollwyvl<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1755\">jupyter\/nbconvert#1755<\/a><\/li>\n<li>[pre-commit.ci] pre-commit autoupdate by <a href=\"https:\/\/github.com\/pre-commit-ci\"><code>@\u200bpre-commit-ci<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1752\">jupyter\/nbconvert#1752<\/a><\/li>\n<li>update cli example by <a href=\"https:\/\/github.com\/leahecole\"><code>@\u200bleahecole<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1753\">jupyter\/nbconvert#1753<\/a><\/li>\n<li>Clean up pre-commit by <a href=\"https:\/\/github.com\/blink1073\"><code>@\u200bblink1073<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1757\">jupyter\/nbconvert#1757<\/a><\/li>\n<li>Clean up workflows by <a href=\"https:\/\/github.com\/blink1073\"><code>@\u200bblink1073<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1750\">jupyter\/nbconvert#1750<\/a><\/li>\n<\/ul>\n<h2>New Contributors<\/h2>\n<ul>\n<li><a href=\"https:\/\/github.com\/pre-commit-ci\"><code>@\u200bpre-commit-ci<\/code><\/a> made their first contribution in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1752\">jupyter\/nbconvert#1752<\/a><\/li>\n<\/ul>\n<p><strong>Full Changelog<\/strong>: <a href=\"https:\/\/github.com\/jupyter\/nbconvert\/compare\/6.4.5...6.5\">https:\/\/github.com\/jupyter\/nbconvert\/compare\/6.4.5...6.5<\/a><\/p>\n<h2>6.4.3<\/h2>\n<h2>What's Changed<\/h2>\n<ul>\n<li>Add section to <code>customizing<\/code> showing how to use template inheritance by <a href=\"https:\/\/github.com\/stefanv\"><code>@\u200bstefanv<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1719\">jupyter\/nbconvert#1719<\/a><\/li>\n<li>Remove ipython genutils by <a href=\"https:\/\/github.com\/rgs258\"><code>@\u200brgs258<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1727\">jupyter\/nbconvert#1727<\/a><\/li>\n<li>Update changelog for 6.4.3 by <a href=\"https:\/\/github.com\/blink1073\"><code>@\u200bblink1073<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1728\">jupyter\/nbconvert#1728<\/a><\/li>\n<\/ul>\n<h2>New Contributors<\/h2>\n<ul>\n<li><a href=\"https:\/\/github.com\/stefanv\"><code>@\u200bstefanv<\/code><\/a> made their first contribution in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1719\">jupyter\/nbconvert#1719<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/rgs258\"><code>@\u200brgs258<\/code><\/a> made their first contribution in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1727\">jupyter\/nbconvert#1727<\/a><\/li>\n<\/ul>\n<p><strong>Full Changelog<\/strong>: <a href=\"https:\/\/github.com\/jupyter\/nbconvert\/compare\/6.4.2...6.4.3\">https:\/\/github.com\/jupyter\/nbconvert\/compare\/6.4.2...6.4.3<\/a><\/p>\n<h2>6.4.0<\/h2>\n<h2>What's Changed<\/h2>\n<ul>\n<li>Optionally speed up validation by <a href=\"https:\/\/github.com\/gwincr11\"><code>@\u200bgwincr11<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1672\">jupyter\/nbconvert#1672<\/a><\/li>\n<li>Adding missing div compared to JupyterLab DOM structure by <a href=\"https:\/\/github.com\/SylvainCorlay\"><code>@\u200bSylvainCorlay<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1678\">jupyter\/nbconvert#1678<\/a><\/li>\n<li>Allow passing extra args to code highlighter by <a href=\"https:\/\/github.com\/yuvipanda\"><code>@\u200byuvipanda<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1683\">jupyter\/nbconvert#1683<\/a><\/li>\n<li>Prevent page breaks in outputs when printing by <a href=\"https:\/\/github.com\/SylvainCorlay\"><code>@\u200bSylvainCorlay<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1679\">jupyter\/nbconvert#1679<\/a><\/li>\n<li>Add collapsers to template by <a href=\"https:\/\/github.com\/SylvainCorlay\"><code>@\u200bSylvainCorlay<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1689\">jupyter\/nbconvert#1689<\/a><\/li>\n<li>Fix recent pandoc latex tables by adding calc and array (<a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/issues\/1536\">#1536<\/a>, <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/issues\/1566\">#1566<\/a>) by <a href=\"https:\/\/github.com\/cgevans\"><code>@\u200bcgevans<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1686\">jupyter\/nbconvert#1686<\/a><\/li>\n<li>Add an invalid notebook error by <a href=\"https:\/\/github.com\/gwincr11\"><code>@\u200bgwincr11<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1675\">jupyter\/nbconvert#1675<\/a><\/li>\n<li>Fix typos in execute.py by <a href=\"https:\/\/github.com\/TylerAnderson22\"><code>@\u200bTylerAnderson22<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1692\">jupyter\/nbconvert#1692<\/a><\/li>\n<li>Modernize latex greek math handling (partially fixes <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/issues\/1673\">#1673<\/a>) by <a href=\"https:\/\/github.com\/cgevans\"><code>@\u200bcgevans<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1687\">jupyter\/nbconvert#1687<\/a><\/li>\n<li>Fix use of deprecated API and update test matrix by <a href=\"https:\/\/github.com\/blink1073\"><code>@\u200bblink1073<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1696\">jupyter\/nbconvert#1696<\/a><\/li>\n<li>Update nbconvert_library.ipynb by <a href=\"https:\/\/github.com\/letterphile\"><code>@\u200bletterphile<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1695\">jupyter\/nbconvert#1695<\/a><\/li>\n<li>Changelog for 6.4 by <a href=\"https:\/\/github.com\/blink1073\"><code>@\u200bblink1073<\/code><\/a> in <a href=\"https:\/\/github-redirect.dependabot.com\/jupyter\/nbconvert\/pull\/1697\">jupyter\/nbconvert#1697<\/a><\/li>\n<\/ul>\n<h2>New Contributors<\/h2>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Commits<\/summary>\n<ul>\n<li><a href=\"https:\/\/github.com\/jupyter\/nbconvert\/commit\/7471b75a506b2fec776613e50e4f2234b97f3c8e\"><code>7471b75<\/code><\/a> Release 6.5.1<\/li>\n<li><a href=\"https:\/\/github.com\/jupyter\/nbconvert\/commit\/c1943e0e9fd0ad6abd7d8dae380474cca4b04a31\"><code>c1943e0<\/code><\/a> Fix pre-commit<\/li>\n<li><a href=\"https:\/\/github.com\/jupyter\/nbconvert\/commit\/8685e9378086e8d82a0df92505fe386095f929ad\"><code>8685e93<\/code><\/a> Fix tests<\/li>\n<li><a href=\"https:\/\/github.com\/jupyter\/nbconvert\/commit\/0abf2906bc6c7170c8d70bc0df6995d21c5aeaf1\"><code>0abf290<\/code><\/a> Run black and prettier<\/li>\n<li><a href=\"https:\/\/github.com\/jupyter\/nbconvert\/commit\/418d545ae596d95f5ea82d141c68fd1abc99f1a6\"><code>418d545<\/code><\/a> Run test on 6.x branch<\/li>\n<li><a href=\"https:\/\/github.com\/jupyter\/nbconvert\/commit\/bef65d7ab2a469b01e4aa25f44c0f20326f7c7c5\"><code>bef65d7<\/code><\/a> Convert input to string prior to escape HTML<\/li>\n<li><a href=\"https:\/\/github.com\/jupyter\/nbconvert\/commit\/0818628718c4a5d3ddd671fbd4881bf176e7d6e2\"><code>0818628<\/code><\/a> Check input type before escaping<\/li>\n<li><a href=\"https:\/\/github.com\/jupyter\/nbconvert\/commit\/b206470f9ecd71b006a37dd1298dd3d9e3dd46dd\"><code>b206470<\/code><\/a> GHSL-2021-1017, GHSL-2021-1020, GHSL-2021-1021<\/li>\n<li><a href=\"https:\/\/github.com\/jupyter\/nbconvert\/commit\/a03cbb8a8d04d47aefec51e7b1b816045682aed5\"><code>a03cbb8<\/code><\/a> GHSL-2021-1026, GHSL-2021-1025<\/li>\n<li><a href=\"https:\/\/github.com\/jupyter\/nbconvert\/commit\/48fe71eb3335caf4e03166e56e0d16efcfbeaf44\"><code>48fe71e<\/code><\/a> GHSL-2021-1024<\/li>\n<li>Additional commits viewable in <a href=\"https:\/\/github.com\/jupyter\/nbconvert\/compare\/5.6.1...6.5.1\">compare view<\/a><\/li>\n<\/ul>\n<\/details>\n<br \/>\n\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=nbconvert&package-manager=pip&previous-version=5.6.1&new-version=6.5.1)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https:\/\/github.com\/plotly\/plotly.py\/network\/alerts).\n\n<\/details>","comments":[],"labels":["dependencies","python"]},{"title":"ValueError: Invalid property specified for object of type plotly.graph_objs.layout.Shape: 'symbol'","body":"\r\nReproducible example:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom plotly import tools\r\n\r\nfig, ax = plt.subplots()\r\nax.plot([0, 1], [0, 1], \"s-\", label=\"foo\")\r\nax.legend()\r\n\r\ntools.mpl_to_plotly(fig)\r\n```\r\n\r\nWorks fine without legend or explicit [fmt](https:\/\/matplotlib.org\/2.1.2\/api\/_as_gen\/matplotlib.pyplot.plot.html).\r\n\r\nThis issue is quite severe because it disallows to use some sklearn visualizations:\r\n\r\n```python\r\nfrom sklearn.calibration import CalibrationDisplay\r\nfrom plotly import tools\r\n\r\ndisplay = CalibrationDisplay.from_predictions([1], [0.9])\r\n\r\ntools.mpl_to_plotly(display.figure_)\r\n```\r\n","comments":["Cannot reproduce the same error with the latest version of matplotlib, but receiving\r\n\r\n> ValueError: \r\n>     Invalid value of type 'builtins.str' received for the 'dash' property of layout.shape.line\r\n>         Received value: '1.5px,2.4749999999999996px'\r\n> \r\n>     The 'dash' property is a string and must be specified as:\r\n>       - One of the following strings:\r\n>             ['solid', 'dot', 'dash', 'longdash', 'dashdot',\r\n>             'longdashdot']\r\n>       - A number that will be converted to a string\r\n\r\ninstead\r\n\r\nI cannot use matplotlib 2.x because it's deprecated and I'm using python 3.8"],"labels":["bug","matplotlylib"]},{"title":"Bump numpy from 1.20.2 to 1.22.0 in \/packages\/python\/plotly\/test_requirements","body":"Bumps [numpy](https:\/\/github.com\/numpy\/numpy) from 1.20.2 to 1.22.0.\n<details>\n<summary>Release notes<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/numpy\/numpy\/releases\">numpy's releases<\/a>.<\/em><\/p>\n<blockquote>\n<h2>v1.22.0<\/h2>\n<h1>NumPy 1.22.0 Release Notes<\/h1>\n<p>NumPy 1.22.0 is a big release featuring the work of 153 contributors\nspread over 609 pull requests. There have been many improvements,\nhighlights are:<\/p>\n<ul>\n<li>Annotations of the main namespace are essentially complete. Upstream\nis a moving target, so there will likely be further improvements,\nbut the major work is done. This is probably the most user visible\nenhancement in this release.<\/li>\n<li>A preliminary version of the proposed Array-API is provided. This is\na step in creating a standard collection of functions that can be\nused across application such as CuPy and JAX.<\/li>\n<li>NumPy now has a DLPack backend. DLPack provides a common interchange\nformat for array (tensor) data.<\/li>\n<li>New methods for <code>quantile<\/code>, <code>percentile<\/code>, and related functions. The\nnew methods provide a complete set of the methods commonly found in\nthe literature.<\/li>\n<li>A new configurable allocator for use by downstream projects.<\/li>\n<\/ul>\n<p>These are in addition to the ongoing work to provide SIMD support for\ncommonly used functions, improvements to F2PY, and better documentation.<\/p>\n<p>The Python versions supported in this release are 3.8-3.10, Python 3.7\nhas been dropped. Note that 32 bit wheels are only provided for Python\n3.8 and 3.9 on Windows, all other wheels are 64 bits on account of\nUbuntu, Fedora, and other Linux distributions dropping 32 bit support.\nAll 64 bit wheels are also linked with 64 bit integer OpenBLAS, which should fix\nthe occasional problems encountered by folks using truly huge arrays.<\/p>\n<h2>Expired deprecations<\/h2>\n<h3>Deprecated numeric style dtype strings have been removed<\/h3>\n<p>Using the strings <code>&quot;Bytes0&quot;<\/code>, <code>&quot;Datetime64&quot;<\/code>, <code>&quot;Str0&quot;<\/code>, <code>&quot;Uint32&quot;<\/code>,\nand <code>&quot;Uint64&quot;<\/code> as a dtype will now raise a <code>TypeError<\/code>.<\/p>\n<p>(<a href=\"https:\/\/github-redirect.dependabot.com\/numpy\/numpy\/pull\/19539\">gh-19539<\/a>)<\/p>\n<h3>Expired deprecations for <code>loads<\/code>, <code>ndfromtxt<\/code>, and <code>mafromtxt<\/code> in npyio<\/h3>\n<p><code>numpy.loads<\/code> was deprecated in v1.15, with the recommendation that\nusers use <code>pickle.loads<\/code> instead. <code>ndfromtxt<\/code> and <code>mafromtxt<\/code> were both\ndeprecated in v1.17 - users should use <code>numpy.genfromtxt<\/code> instead with\nthe appropriate value for the <code>usemask<\/code> parameter.<\/p>\n<p>(<a href=\"https:\/\/github-redirect.dependabot.com\/numpy\/numpy\/pull\/19615\">gh-19615<\/a>)<\/p>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Commits<\/summary>\n<ul>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/4adc87dff15a247e417d50f10cc4def8e1c17a03\"><code>4adc87d<\/code><\/a> Merge pull request <a href=\"https:\/\/github-redirect.dependabot.com\/numpy\/numpy\/issues\/20685\">#20685<\/a> from charris\/prepare-for-1.22.0-release<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/fd66547557f57c430d41be2fc0764f74a62e8ccf\"><code>fd66547<\/code><\/a> REL: Prepare for the NumPy 1.22.0 release.<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/125304b035effcd82e366e601b102e7347eaa9ba\"><code>125304b<\/code><\/a> wip<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/c283859128b1a4b57014581570a23ed7950a24ea\"><code>c283859<\/code><\/a> Merge pull request <a href=\"https:\/\/github-redirect.dependabot.com\/numpy\/numpy\/issues\/20682\">#20682<\/a> from charris\/backport-20416<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/5399c03d4a069fe81a1616be0184c9749d7271ee\"><code>5399c03<\/code><\/a> Merge pull request <a href=\"https:\/\/github-redirect.dependabot.com\/numpy\/numpy\/issues\/20681\">#20681<\/a> from charris\/backport-20954<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/f9c45f8ebf31340b1a5a0371bfca25afcfc4794e\"><code>f9c45f8<\/code><\/a> Merge pull request <a href=\"https:\/\/github-redirect.dependabot.com\/numpy\/numpy\/issues\/20680\">#20680<\/a> from charris\/backport-20663<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/794b36f7e1bf2a8c42774ab0db86a74bd32f674b\"><code>794b36f<\/code><\/a> Update armccompiler.py<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/d93b14e3d7abaa1d837825e51671f817788e120f\"><code>d93b14e<\/code><\/a> Update test_public_api.py<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/7662c0789cc6a70d5ad4d950ee2e95f3afef7df6\"><code>7662c07<\/code><\/a> Update <strong>init<\/strong>.py<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/311ab52488a7d096ac3bc4c2de0fdae17ecd13ef\"><code>311ab52<\/code><\/a> Update armccompiler.py<\/li>\n<li>Additional commits viewable in <a href=\"https:\/\/github.com\/numpy\/numpy\/compare\/v1.20.2...v1.22.0\">compare view<\/a><\/li>\n<\/ul>\n<\/details>\n<br \/>\n\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.20.2&new-version=1.22.0)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https:\/\/github.com\/plotly\/plotly.py\/network\/alerts).\n\n<\/details>","comments":[],"labels":["dependencies","python"]},{"title":"Bump numpy from 1.19.5 to 1.22.0 in \/doc","body":"Bumps [numpy](https:\/\/github.com\/numpy\/numpy) from 1.19.5 to 1.22.0.\n<details>\n<summary>Release notes<\/summary>\n<p><em>Sourced from <a href=\"https:\/\/github.com\/numpy\/numpy\/releases\">numpy's releases<\/a>.<\/em><\/p>\n<blockquote>\n<h2>v1.22.0<\/h2>\n<h1>NumPy 1.22.0 Release Notes<\/h1>\n<p>NumPy 1.22.0 is a big release featuring the work of 153 contributors\nspread over 609 pull requests. There have been many improvements,\nhighlights are:<\/p>\n<ul>\n<li>Annotations of the main namespace are essentially complete. Upstream\nis a moving target, so there will likely be further improvements,\nbut the major work is done. This is probably the most user visible\nenhancement in this release.<\/li>\n<li>A preliminary version of the proposed Array-API is provided. This is\na step in creating a standard collection of functions that can be\nused across application such as CuPy and JAX.<\/li>\n<li>NumPy now has a DLPack backend. DLPack provides a common interchange\nformat for array (tensor) data.<\/li>\n<li>New methods for <code>quantile<\/code>, <code>percentile<\/code>, and related functions. The\nnew methods provide a complete set of the methods commonly found in\nthe literature.<\/li>\n<li>A new configurable allocator for use by downstream projects.<\/li>\n<\/ul>\n<p>These are in addition to the ongoing work to provide SIMD support for\ncommonly used functions, improvements to F2PY, and better documentation.<\/p>\n<p>The Python versions supported in this release are 3.8-3.10, Python 3.7\nhas been dropped. Note that 32 bit wheels are only provided for Python\n3.8 and 3.9 on Windows, all other wheels are 64 bits on account of\nUbuntu, Fedora, and other Linux distributions dropping 32 bit support.\nAll 64 bit wheels are also linked with 64 bit integer OpenBLAS, which should fix\nthe occasional problems encountered by folks using truly huge arrays.<\/p>\n<h2>Expired deprecations<\/h2>\n<h3>Deprecated numeric style dtype strings have been removed<\/h3>\n<p>Using the strings <code>&quot;Bytes0&quot;<\/code>, <code>&quot;Datetime64&quot;<\/code>, <code>&quot;Str0&quot;<\/code>, <code>&quot;Uint32&quot;<\/code>,\nand <code>&quot;Uint64&quot;<\/code> as a dtype will now raise a <code>TypeError<\/code>.<\/p>\n<p>(<a href=\"https:\/\/github-redirect.dependabot.com\/numpy\/numpy\/pull\/19539\">gh-19539<\/a>)<\/p>\n<h3>Expired deprecations for <code>loads<\/code>, <code>ndfromtxt<\/code>, and <code>mafromtxt<\/code> in npyio<\/h3>\n<p><code>numpy.loads<\/code> was deprecated in v1.15, with the recommendation that\nusers use <code>pickle.loads<\/code> instead. <code>ndfromtxt<\/code> and <code>mafromtxt<\/code> were both\ndeprecated in v1.17 - users should use <code>numpy.genfromtxt<\/code> instead with\nthe appropriate value for the <code>usemask<\/code> parameter.<\/p>\n<p>(<a href=\"https:\/\/github-redirect.dependabot.com\/numpy\/numpy\/pull\/19615\">gh-19615<\/a>)<\/p>\n<!-- raw HTML omitted -->\n<\/blockquote>\n<p>... (truncated)<\/p>\n<\/details>\n<details>\n<summary>Commits<\/summary>\n<ul>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/4adc87dff15a247e417d50f10cc4def8e1c17a03\"><code>4adc87d<\/code><\/a> Merge pull request <a href=\"https:\/\/github-redirect.dependabot.com\/numpy\/numpy\/issues\/20685\">#20685<\/a> from charris\/prepare-for-1.22.0-release<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/fd66547557f57c430d41be2fc0764f74a62e8ccf\"><code>fd66547<\/code><\/a> REL: Prepare for the NumPy 1.22.0 release.<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/125304b035effcd82e366e601b102e7347eaa9ba\"><code>125304b<\/code><\/a> wip<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/c283859128b1a4b57014581570a23ed7950a24ea\"><code>c283859<\/code><\/a> Merge pull request <a href=\"https:\/\/github-redirect.dependabot.com\/numpy\/numpy\/issues\/20682\">#20682<\/a> from charris\/backport-20416<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/5399c03d4a069fe81a1616be0184c9749d7271ee\"><code>5399c03<\/code><\/a> Merge pull request <a href=\"https:\/\/github-redirect.dependabot.com\/numpy\/numpy\/issues\/20681\">#20681<\/a> from charris\/backport-20954<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/f9c45f8ebf31340b1a5a0371bfca25afcfc4794e\"><code>f9c45f8<\/code><\/a> Merge pull request <a href=\"https:\/\/github-redirect.dependabot.com\/numpy\/numpy\/issues\/20680\">#20680<\/a> from charris\/backport-20663<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/794b36f7e1bf2a8c42774ab0db86a74bd32f674b\"><code>794b36f<\/code><\/a> Update armccompiler.py<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/d93b14e3d7abaa1d837825e51671f817788e120f\"><code>d93b14e<\/code><\/a> Update test_public_api.py<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/7662c0789cc6a70d5ad4d950ee2e95f3afef7df6\"><code>7662c07<\/code><\/a> Update <strong>init<\/strong>.py<\/li>\n<li><a href=\"https:\/\/github.com\/numpy\/numpy\/commit\/311ab52488a7d096ac3bc4c2de0fdae17ecd13ef\"><code>311ab52<\/code><\/a> Update armccompiler.py<\/li>\n<li>Additional commits viewable in <a href=\"https:\/\/github.com\/numpy\/numpy\/compare\/v1.19.5...v1.22.0\">compare view<\/a><\/li>\n<\/ul>\n<\/details>\n<br \/>\n\n\n[![Dependabot compatibility score](https:\/\/dependabot-badges.githubapp.com\/badges\/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.22.0)](https:\/\/docs.github.com\/en\/github\/managing-security-vulnerabilities\/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[\/\/]: # (dependabot-automerge-start)\n[\/\/]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options<\/summary>\n<br \/>\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https:\/\/github.com\/plotly\/plotly.py\/network\/alerts).\n\n<\/details>","comments":[],"labels":["dependencies","python"]},{"title":"px.density_mapbox does not show the data point if z value is \"1\"","body":"While using `px.density_mapbox` to show heatmap, if z value is '1', this data point will not show up on the map.\r\n\r\nFor example, the sample code below should show three data points:\r\n```\r\nimport pandas as pd\r\nimport plotly.express as px\r\n\r\ndata = {'Latitude': [54, 52,51], 'Longitude': [-114, -106,-97],'Color':[1,2,3]}\r\ndf = pd.DataFrame(data=data)\r\n\r\nfig = px.density_mapbox(df, lat='Latitude', lon='Longitude', z='Color', radius=30,\r\n                        center=dict(lat=52, lon=-97), zoom=2.5,\r\n                        mapbox_style=\"stamen-terrain\")\r\nfig.show()\r\n```\r\nThe result is as below:\r\n  - the point(54, -114) with z =1 (color) does not show up on the chart\r\n<img width=\"916\" alt=\"image\" src=\"https:\/\/user-images.githubusercontent.com\/77292603\/155581878-8642e1b1-5397-4ff1-84d7-56d255acffe6.png\">\r\n","comments":[],"labels":["bug"]},{"title":"With newer versions of orjson, users need to specify the json engine explicitly (bug?)","body":"Hey\r\n\r\nI found out I get an\r\n`AttributeError: partially initialized module 'orjson' has no attribute 'OPT_NON_STR_KEYS'`\r\nif I don't specify this\r\n`plotly.io.json.config.default_engine = 'orjson'`\r\nwhen using orjson v3.6.6 (latest as of 25jan2022)\r\n\r\nAlso, additional note for whoever might have this issue: you don't need to uninstall orjson if you don't want to use it. just set the engine to 'json' explicitly. \r\n\r\nI'm using orjson because of the performance claims, although I ran some tests switching between the 2 engines and they seem to yield the same results: using go.Candlestick with 10000 candlesticks and some 4-5 indicators, getting ~0.8sec in each case for creating the plot. My purpose is to improve the dash server performace, but it seems it makes no difference (the web page still renders slower than the ticker even with 600 candles)\r\n\r\n\r\n","comments":["+1","+1. App is presenting problems after a while. Not sure what's going on.","+1. Happens to me when I use streamlit's `st.plotly_chart` (plotly v5.18.0)","File \"\/.venv\/lib\/python3.11\/site-packages\/plotly\/io\/_json.py\", line 146, in to_json_plotly\r\nopts = orjson.OPT_NON_STR_KEYS | orjson.OPT_SERIALIZE_NUMPY\r\n\r\nThis line of code may cause this issue"],"labels":["bug","sev-3"]},{"title":"Make marker size absolute in scatterplot","body":"It seems that when creating a scatterplot, the marker sizes are always in pixels. The result is that when zooming into the plot, the points remain small. Is there a way to have them dynamically resize? Or set the size to be absolute instead of pixel?\r\n\r\n\r\nA code snippet to showcase the point\r\n```\r\nimport pandas as pd\r\nimport numpy as np\r\nimport plotly.express as px\r\n\r\n\r\nsome_data = pd.DataFrame({\"id\":list(range(50_000)), \"x\":np.random.normal(size=50_000), \"y\":np.random.normal(size=50_000)})\r\nsome_data[\"c\"] = pd.Categorical(np.random.randint(low=0,high=2,size=50_000))\r\n\r\n\r\nfig = px.scatter(some_data, x=\"x\", y=\"y\", color=\"c\")\r\n\r\nfig.update_traces(marker=dict(size=3, opacity=0.5),\r\n                  selector=dict(mode='markers'))\r\n\r\nfig.update_layout({\r\n    'plot_bgcolor': 'rgba(0, 0, 0, 0)',\r\n    'paper_bgcolor': 'rgba(0, 0, 0, 0)',\r\n})\r\n\r\nfig.update_yaxes(matches=None, showticklabels=False, visible=False)\r\nfig.update_xaxes(matches=None, showticklabels=False, visible=False)\r\n\r\n\r\nconfig = dict({'scrollZoom': True})\r\n\r\nfig.show(config=config)\r\n```\r\n\r\nZoomed out, this is a nice graph that shows the distribution clearly, but when zooming in, the points are so small it's nearly impossible to interact with any individual one. \r\n\r\nhttps:\/\/user-images.githubusercontent.com\/22605641\/147709359-34eb5036-d96e-4feb-a32f-f9076a7f3b4d.mov\r\n\r\n\r\n\r\nIs there a way for those points to have absolute sizes instead of fixed ones? Such that zooming in would cause them to increase (as would be intuitive naturally)?\r\n\r\nThanks!","comments":["+1 would love to see this as well. Would love a way to set their absolute size without having to dig too deep into plotly internals or plotly.js callbacks.","+1 I looked into this for some time a little while back with no success :(. It would be amazing to finally find a solution to this! ","+2 tried to forge a hand-made solution for this but failed","+1, also looking for a solution","+1 d3 does this out of the box.","+ 1 we also didn't found a solution yet","kiiiiind of a 'solution' would be to draw shapes instead of scatter points for each scatter point with add_shape()\r\nhere, zooming includes an increase of objects size when coming closer. However there are drawbacks because shapes are not meant to be plot objects but rather drawings\/annotations. Therefore things like hover info need to be implemented with invisible scatter points etc. Feels very dodgy but for my purposes it does the job.\r\n","+1 this would be very nice to have","I currently need this feature for work :)","+1 Drawing spheres do provide a solution. However, it can be too heavy when I have to draw over tens of thousands of points in the 3D plot. Waiting for an upgrade.","+1 This would be a big help in a dataset I'm working with where the size-generating data spans orders of magnitude and where there are dense regions of smaller-size markers.","This would be very useful!","Came here to see a solution. Looks like they've added documentation based on @luggie's solution https:\/\/plotly.com\/python\/shapes\/#circles-positioned-relative-to-the-axis-data","> Came here to see a solution. Looks like they've added documentation based on @luggie's solution https:\/\/plotly.com\/python\/shapes\/#circles-positioned-relative-to-the-axis-data\r\n\r\nUseful when there is little data.","This would be also useful in order to be able to become independent of rescaling the figure dpi after plotting","+1 I have been searching for a solution to this problem and am yet to find one. This should be standard behaviour.","I could imagine 2 different APIs for this.\r\n1. To add `sizex` and `sizey` to `marker`. In this case the a circle marker become an `ellipse` when scaled in on direction.\r\n2. To add a constant `sizemode`. In this case a circle marker remains circle when scaled in one direction as it is adjusted in other direction to maintain the area. ","For those of you interested in this feature: the key next step is to design the API, and for that we need to know a bit more about the use cases you have in mind. The crux of the issue is that zooming in and out does not generally preserve aspect ratio, so if we're trying to set the marker size in reference to the axis scaling rather than pixels, the question is which axis? I guess the options could be:\r\n- Give two sizes, one for x and one for y. This means in general as you zoom the markers will change aspect ratio, to become ellipses, rectangles, etc, but if the marker size really is supposed to mean something related to each axis scale, that might be the right solution. (note: this solution doesn't scale to 3D, because the markers maintain their orientation as the scene is rotated).\r\n- Size the markers based on one of the axis scales, but maintain aspect ratio regardless of the scale of the other axis.\r\n- Size the markers based on the data-scale area they cover, meaning when converted to linear size, markers grow with the geometric mean of the x and y (and z, this flavor would scale to 3D) axis scales. (@archmoj I guess this is what you meant with your variant 2? I like it!) This feels to me like it may be the best if the goal is \"make the markers bigger when you've zoomed in so there are only a few of them.\" I worry though that it'll be hard to use, as you'll need to figure out a reasonable scale on both axes and multiply these together, giving a number that might not be very meaningful to you, so you'd likely end up just trying a few things until something looks good.\r\n- I wonder if there's a calculation we could do as an \"auto\" input to the above variant - something like the std deviation along each axis of all the traces with markers, divided by the total number of markers?\r\n\r\nAnd for all variants, I bet it'll also be important to constrain the max and min resulting sizes. For array-sized markers we already have a `marker.sizemin` attribute, we should be able to reuse that here, and perhaps add `marker.sizemax` as well.","I can't imagine any use case where somebody wants an absolute scale, but not absolute in both axes.\n\nWhat I would use is a fixed radius, which means, r = xscale = yscale. That means it would be an ellipse when zoomed in.\n\nWhat's the situation when you might want a fixed scale in one axis but not the other?\n\nThat said, if you want an ellipse API and a circle API, just make two different shapes?","I would also like to have this feature.\r\nIf we have same units on each axis like a coordinates in meter for each axis and radius or diameter in meter for each marker we could associate this data to sizing each marker. As proposed by @archmoj I think it would be a good approach for circle data, the markers will appears as circle if axis x and y are orthonormal, as an ellipsis if not.","> kiiiiind of a 'solution' would be to draw shapes instead of scatter points for each scatter point with add_shape()\r\nhere, zooming includes an increase of objects size when coming closer. However there are drawbacks because shapes are not meant to be plot objects but rather drawings\/annotations. Therefore things like hover info need to be implemented with invisible scatter points etc. Feels very dodgy but for my purposes it does the job.\r\n\r\nUnfortunately, this only really works for small datasets. I managed to plot >100k datapoints as circles using [this](https:\/\/stackoverflow.com\/questions\/70276242\/adding-500-circles-in-a-plotly-graph-using-add-shape-function-takes-45-seconds) stack overflow answer but there are so many shapes in the figure that it is essentially impossible to render."],"labels":["feature","p4"]},{"title":"[BUG]","body":"Thank you so much for helping improve the quality of Dash!\r\n\r\nWe do our best to catch bugs during the release process, but we rely on your help to find the ones that slip through.\r\n\r\n\r\n**Describe your context**\r\nPlease provide us your environment, so we can easily reproduce the issue.\r\n\r\n-  replace the result of `pip list | grep dash` below\r\n```\r\ndash                      1.21.0\r\ndash-bootstrap-components 0.13.0\r\ndash-core-components      1.17.1\r\ndash-datetimepicker       0.0.4\r\ndash-html-components      1.1.4\r\ndash-table                4.12.0\r\n```\r\n-  if frontend related, tell us your Browser, Version and OS\r\n\r\n    - OS:  Win\r\n    - Browser chrome \r\n    - Version 96.0.4664.45\r\n\r\n**Describe the bug**\r\n\r\nLog graph has problem with Vrect\r\n\r\n**Expected behavior**\r\n\r\nThe annotation must locates on the Vrect.\r\n\r\n**Screenshots**\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/6903574\/144250789-bda1abc2-f7ac-4c7b-a79e-279ed9ea5591.png)\r\n\r\n\r\n```\r\n    def get_vrect(fig, x0, x1, text, color):\r\n        fig.add_vrect(x0=x0, x1=x1, annotation_text=text, annotation_position=\"inside top right\", fillcolor=color, opacity=0.3, line_width=0)\r\n        return fig\r\n```","comments":["cc @nicholas-esterer - shape coordinates are always in data units, whereas for annoying historical reasons annotations on log axes have these coordinates in log units."],"labels":["bug"]},{"title":"Ignore certain traces in autoscaling","body":"Feature request to ignore certain traces when doing autoscaling.\r\n\r\nMy use case is that I have a few scatter plots with colored shapes in the background indicating categories of the data. The category shapes are implemented as traces and are hidden from legend. If I mute some of the scatter plots, it would be ideal if scale adjusts to the data that remain. As it is, autoscale will be constant, just adjusted to the background shapes.\r\n","comments":["Including shapes in this would also be super useful!","I request support for annotations and the like too."],"labels":["feature","p3"]},{"title":"[BUG]. Plotly \/ Dash Python: mixed graph and table subplots break when hline or vline are added","body":"**Describe your context**\r\nPython 3.8\r\nDash 2.0\r\nPlotly 5.3.1\r\n\r\n-  replace the result of `pip list | grep dash` below\r\n```\r\ndash                                              2.0.0\r\ndash-core-components                              2.0.0\r\ndash-html-components                              2.0.0\r\ndash-table                                        5.0.0\r\n\r\n```\r\n\r\nTake a 5 x 3 subplot layout as follows:\r\n\r\n        fig = make_subplots(rows=5, cols=3,\r\n                            specs=[[{'secondary_y': True}, {'secondary_y': False}, {'type': 'table'}],\r\n                                   [{'secondary_y': False}, {'secondary_y': False}, {'secondary_y': False}],\r\n                                   [{'secondary_y': False}, {'secondary_y': False}, {'secondary_y': False}],\r\n                                   [{'secondary_y': False}, {'secondary_y': False}, {'secondary_y': False}],\r\n                                   [{'secondary_y': False}, {'secondary_y': False}, {'secondary_y': False}]],\r\n                            shared_xaxes=True, shared_yaxes=True,\r\n                            vertical_spacing=0.01, horizontal_spacing=0,\r\n                            row_heights=[0.775, 0.15, 0.025, 0.025, 0.025], column_widths=[0.8, 0.1, 0.1])\r\n\r\nWe add subplots as follows:\r\n\r\n    fig.add_trace(go.Scatter(x= ... row=1, col=1)\r\n    fig.add_trace(go.Scatter(x= ... row=1, col=2)\r\n    fig.add_trace(go.Scatter(x= ... row=2, col=1)\r\n    fig.add_trace(go.Scatter(x= ... row=3, col=1)\r\n    fig.add_trace(go.Scatter(x= ... row=4, col=1)\r\n    fig.add_trace(go.Scatter(x= ... row=5, col=1)\r\n\r\nAt position `row=1` `col=3` we place a table.\r\n\r\n    fig.add_trace(go.Table(header=dict(line=dict(color='red'),\r\n                                  fill=dict(color='red')),\r\n                           cells=dict(values=[df.A, df.B])),\r\n                  row=1, col=3)\r\n\r\nThis all works fine. But when we add an `hline` or `vline` to the top left graph...\r\n\r\n            fig.add_vline(x=42, line_width=1, line_dash='dot', line_color='rgba(255, 165, 0, 0.3)', row=1, col=1)\r\n\r\nPlotly throws an error:\r\n\r\n    _plotly_utils.exceptions.PlotlyKeyError: Invalid property specified for object of type plotly.graph_objs.Table: 'xaxis'\r\n    \r\n    Did you mean \"cells\"?\r\n\r\nThis happens regardless of line orientation (h or v), or if the lines are limited to a single row and col or spanning `all` cols.\r\n\r\nPosting in in case this may be a bug.\r\nPosted also on StackOverflow, where Rob Raymond prepared a working example and also a workaround for this issue.\r\nSee here:\r\nhttps:\/\/stackoverflow.com\/questions\/69498665\/why-do-plotly-dash-mixed-graph-and-table-subplots-break-when-hline-or-vline-ar\/69507165#69507165\r\n\r\n\r\n\r\n","comments":[],"labels":["bug"]},{"title":"'plotly' package contains 123MB of autogenerated code","body":"Thank you for plotly.py, it's definitely worked well for us in our app! \r\n\r\nWe're deploying our app's backend to AWS lambda, packaging dependencies in a \"layer\" which has a 256MB size limit. We are hitting this limit. Unfortunately, plotly's Python library is huge: for the version we're using there (4.14.3), it ends up being 58MB of Python source, and ~19MB of JavaScript (plotly.min.js, and then the Jupyter plugin). The python source seems to be almost entirely the auto-generated (AIUI) `graph_objs` and `validators` subdirectories. To reduce size, we've removed the JavaScript files, because the lambdas don't use any of that, however that still leaves the significant amount of Python code.\r\n\r\nTo make this more concrete, here's the numbers for the latest version on my Mac:\r\n\r\n```shell\r\n$ pip install plotly==5.1.0\r\n...\r\n$ pip show plotly\r\n...\r\nLocation: \/SOME\/PATH\/...\/site-packages\r\n...\r\n$ cd \/SOME\/PATH\/...\/site-packages # copied from the command above\r\n$ du -sch plotly\/* | sort -h\r\n4.0K\tplotly\/_version.py\r\n4.0K\tplotly\/_widget_version.py\r\n4.0K\tplotly\/animation.py\r\n4.0K\tplotly\/config.py\r\n4.0K\tplotly\/conftest.py\r\n4.0K\tplotly\/dashboard_objs.py\r\n4.0K\tplotly\/exceptions.py\r\n4.0K\tplotly\/files.py\r\n4.0K\tplotly\/grid_objs.py\r\n4.0K\tplotly\/missing_ipywidgets.py\r\n4.0K\tplotly\/optional_imports.py\r\n4.0K\tplotly\/presentation_objs.py\r\n4.0K\tplotly\/serializers.py\r\n4.0K\tplotly\/session.py\r\n4.0K\tplotly\/validator_cache.py\r\n4.0K\tplotly\/version.py\r\n4.0K\tplotly\/widgets.py\r\n8.0K\tplotly\/__init__.py\r\n8.0K\tplotly\/callbacks.py\r\n8.0K\tplotly\/colors\r\n8.0K\tplotly\/utils.py\r\n 12K\tplotly\/shapeannotation.py\r\n 16K\tplotly\/data\r\n 16K\tplotly\/plotly\r\n 24K\tplotly\/graph_objects\r\n 28K\tplotly\/tools.py\r\n 36K\tplotly\/basewidget.py\r\n 52K\tplotly\/subplots.py\r\n 76K\tplotly\/offline\r\n220K\tplotly\/basedatatypes.py\r\n264K\tplotly\/matplotlylib\r\n340K\tplotly\/__pycache__\r\n344K\tplotly\/express\r\n364K\tplotly\/io\r\n664K\tplotly\/figure_factory\r\n3.5M\tplotly\/package_data\r\n 43M\tplotly\/graph_objs\r\n 80M\tplotly\/validators\r\n129M\ttotal\r\n```\r\n\r\nThat is, 123MiB\/129MiB (95%) of the package size is the autogenerated `graph_objs` and `validators` submodules.\r\n\r\nSince these are autogenerated, potentially they could be autogenerated in a way that makes them significantly smaller without changing behaviour or structure. Some ideas:\r\n\r\n- reduce unnecessary whitespace, like empty lines, and, particularly, leading whitespace in doc strings (and potentially other multiline strings) or indentation (one space is enough, rather than 4)\r\n- other minification techniques, like those supported by https:\/\/pypi.org\/project\/python-minifier\r\n\r\nThese will require disabling black and generally make the files harder to read, but I don't think they're designed to be human readable anyway?\r\n\r\n(There's also other possibilities like combining multiple files into one, allowing sharing imports, but this is probably only a small win, and will require changing other code.)\r\n\r\nFor example, starting with https:\/\/github.com\/plotly\/plotly.py\/blob\/v5.1.0\/packages\/python\/plotly\/plotly\/graph_objs\/bar\/_stream.py one could save ~20%: https:\/\/gist.github.com\/huonw\/4b81b6825ebd508bbcd39f4bb2215f4e\r\n\r\n| state | size (bytes) | relative size |\r\n|---|---|---|\r\n| original | 4104 | 100% |\r\n| no leading whitespace in doc-strings | 3792 | 92% |\r\n| no empty lines or lines with only `# ----` comments | 3522 | 86% |\r\n| 1 space indent | 3201 | 78% |\r\n\r\nAssuming this 20% decrease generalises across all the autogenerated files, this would cut nearly 25MB off the 129M package.\r\n\r\n(Thanks again for plotly!)","comments":["Thanks for the deep look at this issue! @jonmmease what do you think? I think we could probably implement a lot of this so long as the docstrings are still readable, right?","Thanks for the quick response!\r\n\r\nTwo other potential options I thought of over the weekend could be:\r\n\r\n1. compress the files (e.g. `gzip -9 -c _stream.py | wc -c` reports 1163, i.e. less than 30% of the original), and lazily decompress and `exec` them on import, somehow (might require Python 3.7)\r\n2. place all the autogenerated files into a single zip file, and leverage https:\/\/docs.python.org\/3\/library\/zipimport.html to import them, although this may require modifying `sys.path` in a way that may be fragile to support Python 3.6 (whereas Python 3.7+ might be able to be fancier and use `zipimport.zipimporter.load_module` directly)","Thanks for taking a look at this @huonw. I'd have no problem running the generated code through a minimizer instead of black if that's helpful.  The compression approaches would carry a bit more breakage risk I think, so that take some care.\r\n\r\nThe biggest wins would probably be in detecting the use of identical objects throughout the figure hierarchy and sharing those classes.","Just a status check: this appears to have crept upwards (123MB in 5.1 -> 128MB in 5.8) with both `graph_objs`. and `validators`:\r\n\r\n```shell\r\npip install --target=\/tmp\/plotly\/ plotly==5.8.0\r\ndu -sch \/tmp\/plotly\/plotly\/* | sort -h\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n4.0K\t\/tmp\/plotly\/plotly\/_version.py\r\n4.0K\t\/tmp\/plotly\/plotly\/_widget_version.py\r\n4.0K\t\/tmp\/plotly\/plotly\/animation.py\r\n4.0K\t\/tmp\/plotly\/plotly\/config.py\r\n4.0K\t\/tmp\/plotly\/plotly\/conftest.py\r\n4.0K\t\/tmp\/plotly\/plotly\/dashboard_objs.py\r\n4.0K\t\/tmp\/plotly\/plotly\/exceptions.py\r\n4.0K\t\/tmp\/plotly\/plotly\/files.py\r\n4.0K\t\/tmp\/plotly\/plotly\/grid_objs.py\r\n4.0K\t\/tmp\/plotly\/plotly\/missing_ipywidgets.py\r\n4.0K\t\/tmp\/plotly\/plotly\/optional_imports.py\r\n4.0K\t\/tmp\/plotly\/plotly\/presentation_objs.py\r\n4.0K\t\/tmp\/plotly\/plotly\/serializers.py\r\n4.0K\t\/tmp\/plotly\/plotly\/session.py\r\n4.0K\t\/tmp\/plotly\/plotly\/validator_cache.py\r\n4.0K\t\/tmp\/plotly\/plotly\/version.py\r\n4.0K\t\/tmp\/plotly\/plotly\/widgets.py\r\n8.0K\t\/tmp\/plotly\/plotly\/__init__.py\r\n8.0K\t\/tmp\/plotly\/plotly\/callbacks.py\r\n8.0K\t\/tmp\/plotly\/plotly\/colors\r\n8.0K\t\/tmp\/plotly\/plotly\/utils.py\r\n 12K\t\/tmp\/plotly\/plotly\/shapeannotation.py\r\n 12K\t\/tmp\/plotly\/plotly\/subplots.py\r\n 16K\t\/tmp\/plotly\/plotly\/data\r\n 16K\t\/tmp\/plotly\/plotly\/plotly\r\n 20K\t\/tmp\/plotly\/plotly\/graph_objects\r\n 28K\t\/tmp\/plotly\/plotly\/tools.py\r\n 36K\t\/tmp\/plotly\/plotly\/basewidget.py\r\n 52K\t\/tmp\/plotly\/plotly\/_subplots.py\r\n 76K\t\/tmp\/plotly\/plotly\/offline\r\n220K\t\/tmp\/plotly\/plotly\/basedatatypes.py\r\n264K\t\/tmp\/plotly\/plotly\/matplotlylib\r\n352K\t\/tmp\/plotly\/plotly\/__pycache__\r\n368K\t\/tmp\/plotly\/plotly\/io\r\n380K\t\/tmp\/plotly\/plotly\/express\r\n668K\t\/tmp\/plotly\/plotly\/figure_factory\r\n3.7M\t\/tmp\/plotly\/plotly\/package_data\r\n 45M\t\/tmp\/plotly\/plotly\/graph_objs\r\n 84M\t\/tmp\/plotly\/plotly\/validators\r\n135M\ttotal\r\n```\r\n\r\n(As always, thank you for plotly.)","Any news on this? It's making it difficult to deploy AWS Lambda functions containing plotly, even when zipped."],"labels":["bug","sev-4"]},{"title":"PX doesn't force category orders on axes","body":"This causes ordering issues like this:\r\n\r\n```python\r\nimport plotly.express as px\r\nimport pandas as pd\r\n\r\ndf = pd.DataFrame(dict(\r\n    x=['a','b','c','d'],\r\n    y=[1,2,3,4],\r\n    z=['p','q','p','q']\r\n))\r\n\r\npx.bar(df, x=\"x\", y=\"y\", color=\"z\")\r\n```\r\n\r\n![newplot (1)](https:\/\/user-images.githubusercontent.com\/203523\/124765009-91444b00-df03-11eb-9693-63a76ed48368.png)\r\n","comments":["The workaround right now is to do `category_orders=dict(x=df.z.unique())` but ideally this would be done internally."],"labels":["bug"]},{"title":"Plotly express not compatible with pandas NAType\/pandas.NA\/pd.NA values","body":"Plotly express functions fall over when given dataframes containing `pd.NA` values. I think these should have the same behaviour as `None` values.\r\n\r\nExample:\r\n```\r\n# This works\r\npx.scatter(pd.DataFrame([1, 2, 3, None, 5]))\r\n\r\n# This results in \"TypeError: Object of type NAType is not JSON serializable\"\r\npx.scatter(pd.DataFrame([1, 2, 3, None, 5]).convert_dtypes())\r\n```","comments":["Thanks for pointing that out! We'll try to get it fixed soon :)","Note to self: will need to look at\r\n\r\nhttps:\/\/github.com\/plotly\/plotly.py\/blob\/b34bd6d2004b2b4c96d114011c82913573e50513\/packages\/python\/plotly\/_plotly_utils\/utils.py#L168-L178 \r\n\r\nhttps:\/\/github.com\/plotly\/plotly.py\/blob\/b34bd6d2004b2b4c96d114011c82913573e50513\/packages\/python\/plotly\/plotly\/io\/_json.py#L507-L526","This simple addition worked for me when i used ``px.timeline`` https:\/\/github.com\/plotly\/plotly.py\/pull\/3336. Note that I'm a plotly newbie.\r\n\r\nstolen from https:\/\/github.com\/GoogleCloudPlatform\/covid-19-open-data\/pull\/265\/files :)","#3705 partially fixed this issue. The issue is fixed when Python's `json` is used, but the problem persists for `orjson`.\r\n\r\n```python\r\nimport orjson  # assert that orjson is available\r\n\r\nplotly.io.json.config.default_engine = 'json'\r\npx.scatter(pd.DataFrame([1, 2, 3, None, 5]).convert_dtypes()).to_json()  # works\r\nplotly.io.json.config.default_engine = 'auto'  # or `orjson`\r\npx.scatter(pd.DataFrame([1, 2, 3, None, 5]).convert_dtypes()).to_json()  # fails\r\n```","thank you for taking a look at this @avm19 ."],"labels":["bug","sev-3"]},{"title":"px.scatter() errors when size param is Pandas Extension dtype Int64","body":"## Description\r\n`px.scatter()` errors when `size` param is **Pandas extension dtype Int64**. However, `size` param works as expected with standard\/numpy **int64.** \r\n\r\nThe new Pandas Extension dtypes should be supported  in Plotly Express eg. I use the `pandas.convert_dtypes()` util which changes `int64` to `Int64`.\r\n\r\n## Example Code\r\n\r\n```\r\ndf = pd.DataFrame({\r\n        'myx': [1, 2, 3, , 5]\r\n        'myy': [10, 20, 30, 40, 50],\r\n        'mysize': [100, 200, 300, 400, 500]},\r\n        dtype= 'Int64')\r\n\r\npx.scatter(df, x='myx', y='myy', size='mysize')\r\n```\r\n\r\n## Error\r\n\r\n<details><summary>Traceback<\/summary><p>\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n~\\Miniconda3\\envs\\jlab3\\lib\\site-packages\\_plotly_utils\\basevalidators.py in validate_coerce(self, v)\r\n    749             try:\r\n--> 750                 v_array = copy_to_readonly_numpy_array(v, force_numeric=True)\r\n    751             except (ValueError, TypeError, OverflowError):\r\n\r\n~\\Miniconda3\\envs\\jlab3\\lib\\site-packages\\_plotly_utils\\basevalidators.py in copy_to_readonly_numpy_array(v, kind, force_numeric)\r\n    108         if is_numpy_convertable(v):\r\n--> 109             return copy_to_readonly_numpy_array(\r\n    110                 np.array(v), kind=kind, force_numeric=force_numeric\r\n\r\n~\\Miniconda3\\envs\\jlab3\\lib\\site-packages\\_plotly_utils\\basevalidators.py in copy_to_readonly_numpy_array(v, kind, force_numeric)\r\n    137     if force_numeric and new_v.dtype.kind not in numeric_kinds:\r\n--> 138         raise ValueError(\r\n    139             \"Input value is not numeric and\" \"force_numeric parameter set to True\"\r\n\r\nValueError: Input value is not numeric andforce_numeric parameter set to True\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-185-76c5d168bced> in <module>\r\n      5         dtype= 'Int64')\r\n      6 \r\n----> 7 px.scatter(df, x='myx', y='myy', size='mysize')\r\n\r\n~\\Miniconda3\\envs\\jlab3\\lib\\site-packages\\plotly\\express\\_chart_types.py in scatter(data_frame, x, y, color, symbol, size, hover_name, hover_data, custom_data, text, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, error_x, error_x_minus, error_y, error_y_minus, animation_frame, animation_group, category_orders, labels, orientation, color_discrete_sequence, color_discrete_map, color_continuous_scale, range_color, color_continuous_midpoint, symbol_sequence, symbol_map, opacity, size_max, marginal_x, marginal_y, trendline, trendline_color_override, log_x, log_y, range_x, range_y, render_mode, title, template, width, height)\r\n     62     mark in 2D space.\r\n     63     \"\"\"\r\n---> 64     return make_figure(args=locals(), constructor=go.Scatter)\r\n     65 \r\n     66 \r\n\r\n~\\Miniconda3\\envs\\jlab3\\lib\\site-packages\\plotly\\express\\_core.py in make_figure(args, constructor, trace_patch, layout_patch)\r\n   2017                 args, trace_spec, group, mapping_labels.copy(), sizeref\r\n   2018             )\r\n-> 2019             trace.update(patch)\r\n   2020             if fit_results is not None:\r\n   2021                 trendline_rows.append(mapping_labels.copy())\r\n\r\n~\\Miniconda3\\envs\\jlab3\\lib\\site-packages\\plotly\\basedatatypes.py in update(self, dict1, overwrite, **kwargs)\r\n   5067                 BaseFigure._perform_update(self, kwargs, overwrite=overwrite)\r\n   5068         else:\r\n-> 5069             BaseFigure._perform_update(self, dict1, overwrite=overwrite)\r\n   5070             BaseFigure._perform_update(self, kwargs, overwrite=overwrite)\r\n   5071 \r\n\r\n~\\Miniconda3\\envs\\jlab3\\lib\\site-packages\\plotly\\basedatatypes.py in _perform_update(plotly_obj, update_obj, overwrite)\r\n   3883                     # Update compound objects recursively\r\n   3884                     # plotly_obj[key].update(val)\r\n-> 3885                     BaseFigure._perform_update(plotly_obj[key], val)\r\n   3886                 elif isinstance(validator, CompoundArrayValidator):\r\n   3887                     if plotly_obj[key]:\r\n\r\n~\\Miniconda3\\envs\\jlab3\\lib\\site-packages\\plotly\\basedatatypes.py in _perform_update(plotly_obj, update_obj, overwrite)\r\n   3904                 else:\r\n   3905                     # Assign non-compound value\r\n-> 3906                     plotly_obj[key] = val\r\n   3907 \r\n   3908         elif isinstance(plotly_obj, tuple):\r\n\r\n~\\Miniconda3\\envs\\jlab3\\lib\\site-packages\\plotly\\basedatatypes.py in __setitem__(self, prop, value)\r\n   4802                 # ### Handle simple property ###\r\n   4803                 else:\r\n-> 4804                     self._set_prop(prop, value)\r\n   4805             else:\r\n   4806                 # Make sure properties dict is initialized\r\n\r\n~\\Miniconda3\\envs\\jlab3\\lib\\site-packages\\plotly\\basedatatypes.py in _set_prop(self, prop, val)\r\n   5146                 return\r\n   5147             else:\r\n-> 5148                 raise err\r\n   5149 \r\n   5150         # val is None\r\n\r\n~\\Miniconda3\\envs\\jlab3\\lib\\site-packages\\plotly\\basedatatypes.py in _set_prop(self, prop, val)\r\n   5141 \r\n   5142         try:\r\n-> 5143             val = validator.validate_coerce(val)\r\n   5144         except ValueError as err:\r\n   5145             if self._skip_invalid:\r\n\r\n~\\Miniconda3\\envs\\jlab3\\lib\\site-packages\\_plotly_utils\\basevalidators.py in validate_coerce(self, v)\r\n    750                 v_array = copy_to_readonly_numpy_array(v, force_numeric=True)\r\n    751             except (ValueError, TypeError, OverflowError):\r\n--> 752                 self.raise_invalid_val(v)\r\n    753 \r\n    754             # Check min\/max\r\n\r\n~\\Miniconda3\\envs\\jlab3\\lib\\site-packages\\_plotly_utils\\basevalidators.py in raise_invalid_val(self, v, inds)\r\n    275                 name += \"[\" + str(i) + \"]\"\r\n    276 \r\n--> 277         raise ValueError(\r\n    278             \"\"\"\r\n    279     Invalid value of type {typ} received for the '{name}' property of {pname}\r\n\r\nValueError: \r\n    Invalid value of type 'pandas.core.series.Series' received for the 'size' property of scatter.marker\r\n        Received value: 0    100\r\n1    200\r\n2    300\r\n3    400\r\n4    500\r\nName: mysize, dtype: Int64\r\n\r\n    The 'size' property is a number and may be specified as:\r\n      - An int or float in the interval [0, inf]\r\n      - A tuple, list, or one-dimensional numpy array of the above\r\n```\r\n\r\n<\/p><\/details>\r\n\r\n## Versions\r\n<details><summary>conda env<\/summary><p>\r\n\r\n```\r\nWindows 10\r\njupyterlab 3.0.7\r\npython 3.8.6\r\npandas 1.2.1\r\nplotly 4.14.3\r\n```\r\n<\/p><\/details>","comments":["Any progress on this one? I am having the same error","Hi everyone, this bug unfortunately persists in Plotly 5.18.0, nearly three years after it was first reported here. What makes it worse is that the error message is not helpful at all for discovering the root of the problem because it says accepted would be\r\n\r\n> A tuple, list, or one-dimensional numpy array of the above\r\n\r\nIf the community is not willing to fix this for some reason, at least they should make the users aware that nullable integers are not OK. They have been around for quite a while so it makes sense to take them into account -- ideally by accepting them as integers.\r\n\r\nFixing this might be a good occasion to also address related issues such as #3495 ","Thanks for following up on this issue, @johentsch. I just ran the code provided above and can confirm that it works when data type is a numpy int64: `dtype='int64'` \r\n\r\nLet us look into this and see the best way to move forward. ","This problem persists in January 2024."],"labels":["bug","sev-2"]},{"title":"Error on using add_vline with text annotation for data with date-time x axis","body":"Hi, I am trying to use the library for a simple visualisation for the first time, and I stumbled upon supposedly a bug trying to draw a vertical line with text annotation on a graph with a date-time x axis.\r\n\r\n```\r\nimport plotly.express as px\r\ndf = px.data.stocks(indexed=True)\r\nfig = px.line(df)\r\nfig.add_vline(x=\"2018-09-24\", annotation_text=\"test\" )\r\nfig.show()\r\n```\r\n\r\nI get the following error message:\r\n\r\n`TypeError: unsupported operand type(s) for +: 'int' and 'str'`\r\n\r\nCould anyone please help me confirm that it is indeed a bug, my version is '4.14.1' ? Thank you.","comments":["Yep, definitely a bug! Thanks for the clear and reproducible report :)\r\n\r\nI'm not immediately clear why we need to compute the midpoint of anything here https:\/\/github.com\/plotly\/plotly.py\/blob\/03979d105c65dda3df3a155322eaff18f203b03f\/packages\/python\/plotly\/plotly\/shapeannotation.py#L58 but this is the problem. Ideally we would need to rework this to use the `(x|y)anchor` attribute instead of trying to do math on the coordinates in the Python layer.","Hi @MR0205, \r\n\r\nIf you're looking for a temporary workaround, you can get the annotation to work by converting your `x` value into milliseconds since epoch as follows: \r\n```\r\nimport plotly.express as px\r\nimport datetime\r\ndf = px.data.stocks(indexed=True)\r\nfig = px.line(df)\r\nfig.add_vline(x=datetime.datetime.strptime(\"2018-09-24\", \"%Y-%m-%d\").timestamp() * 1000, annotation_text=\"test\" )\r\nfig.show()\r\n```","@awrobel1 Thanks for your idea, I thought on using a rectangle as a replacement, where you would make both edges start at the limit of a single day. Not sure though that will completely imitate the vertical line, due to possible problem when zooming.","Following this too!","The above suggestion from @awrobel1 was great for me. In my case I simplified a tad with `x=datetime.datetime(2021,5,27).timestamp() * 1000`. No need to convert from a string first in this case.","Yes, after looking into this a bit more, the implementation assumes the data are types that can have arithmetic performed on them. It needs to do this in order to compute where to put the annotation. This bug probably got through because to compute where an annotation is placed, it only needs to find the minimum, maximum or mean of the extreme coordinate values. `min` and `max` are defined for strings, so dates don't break it for positions like 'left', 'right', etc., but I think the fact that it works is just luck: the strings often sort the same as the dates.\r\nThis points to 2 things that could be fixed at the higher level:\r\n - when doing arithmetic on data, operators should be chosen corresponding to the type of the axis: e.g., if the axis type is `'date'` then the values should be converted to milliseconds before arithmetic is performed\r\n - rather than having anchored annotations only available when using `add_hline` and the like, maybe have them available when using `add_shape`? Then `add_hline`, etc. are just special cases of `add_shape`.\r\n","Hi all,\r\n\r\nI have a rather weird problem that might be connected to this issue.\r\n\r\nI deployed an app using streamlit (V'1.2.0')\r\n\r\nI use Plotly (V'5.3.1') to create a plot in the app.\r\n\r\nThe plot is a timeline, and there is a vertical line in it. \r\nBased on this bug, i caluclate the postion of the of the line the following:\r\n    end_time_prelim = datetime.strptime(df['end_time'].max(), \"%Y-%m-%d %H:%M:%S\").timestamp() * 1000\r\n\r\nAnd then use this in\r\nfig.add_vline(x=end_time_prelim)\r\nThis works fine when I run the code locally.\r\nHowever, in the online version, the line is at a shifted different position and slightly shifted. \r\n\r\nIs this known? \r\nThanks a lot :-) \r\n\r\nNot sure if helpful, but this would be the app:\r\nhttps:\/\/share.streamlit.io\/claudiabehnke86\/tournamentcalculator\/tourcalc\/theapp.py ","Hi @ClaudiaBehnke86,\r\n\r\nNot sure, but you might be having trouble with time zones? When you run time timestamp calculation I believe that its looking for the timestamp based on your current timezone. So locally, everything works intuitively, but when you host your code in the cloud you start running on a UTC server and the times all seem to jump. \r\n\r\nIf this is the problem you just need to make sure to adjust your line based on the difference between your current time and UTC, by adding\/subtracting milliseconds or using timezone aware times. \r\n\r\nAlso, make sure your code can handle time shifts for daylight savings time if relevant!","Yes, this makes a lot of sense :-D. Thanks for the hint! ","> Hi @MR0205,\r\n> \r\n> If you're looking for a temporary workaround, you can get the annotation to work by converting your `x` value into milliseconds since epoch as follows:\r\n> \r\n> ```\r\n> import plotly.express as px\r\n> import datetime\r\n> df = px.data.stocks(indexed=True)\r\n> fig = px.line(df)\r\n> fig.add_vline(x=datetime.datetime.strptime(\"2018-09-24\", \"%Y-%m-%d\").timestamp() * 1000, annotation_text=\"test\" )\r\n> fig.show()\r\n> ```\r\n\r\nThanks for this! I had the same issue and it worked for me! ","Hi, how can I do similar things when `x` are strings (labels) instead of dates or numbers?","This is still a problem for all categorial data on the x axis. Is there any solution for when x are strings?","Yup this is still a very real and weird problem because if you try to do the annotation within the add_vline arguments you'll get the exception:\r\n```\r\nfig = px.line(df, x=\"string_category\", y=\"some_values\")\r\nfig.add_vline(\r\n    x=\"string_value\",\r\n    line_dash=\"dot\",\r\n    annotation_text=\"some_annotation\"\r\n)\r\n```\r\n\r\nbut if you do it with an add_annotation function it works fine\r\n```\r\nfig = px.line(df, x=\"string_category\", y=\"some_values\")\r\nfig.add_vline(\r\n    x=\"string_value\",\r\n    line_dash=\"dot\"\r\n)\r\nfig.add_annotation(x=\"string_value\",text=\"some_annotation\")\r\n```","Just got this exact error today, removing the annotation_text parameter works","Same error! For both,  `annotation_text=\"...\"` and `label=dict(text=\"...\")` inside `add_vline(...)`","Another solution is to add a box with a specific width:\r\n```python\r\nfrom datetime import timedelta\r\n\r\nfig.add_vrect(\r\n        x0=epoch,\r\n        x1=epoch + timedelta(minutes=1),\r\n        annotation_text=\"Text laebel\",\r\n        fillcolor=color,\r\n        line_width=2,\r\n        line_color=color,\r\n    )\r\n```","Got the same problem today as the one before using `add_vline` with the `annotation_text` parameter and I used this workaround.\r\n> Yup this is still a very real and weird problem because if you try to do the annotation within the add_vline arguments you'll get the exception:\r\n> \r\n> ```\r\n> fig = px.line(df, x=\"string_category\", y=\"some_values\")\r\n> fig.add_vline(\r\n>     x=\"string_value\",\r\n>     line_dash=\"dot\",\r\n>     annotation_text=\"some_annotation\"\r\n> )\r\n> ```\r\n> \r\n> but if you do it with an add_annotation function it works fine\r\n> \r\n> ```\r\n> fig = px.line(df, x=\"string_category\", y=\"some_values\")\r\n> fig.add_vline(\r\n>     x=\"string_value\",\r\n>     line_dash=\"dot\"\r\n> )\r\n> fig.add_annotation(x=\"string_value\",text=\"some_annotation\")\r\n> ```\r\n\r\n","Can confirm this problem. Is it planned to be fixed in any upcoming release? It's been around for a while ;)","What happens if you convert the dates to UNIX timestamps? ","Oh gosh, I don\u2019t think we want to recommend Unix timestamps\u2026 we\u2019d need them to be in milliseconds, and quite likely this will give time zone problems due to our weird backward-compatibility hacks on the plotlyjs side","> What happens if you convert the dates to UNIX timestamps?\r\n\r\nI will try to test it on the week of the 11th of March as before I don't have time. I hope I will remember XD"],"labels":["bug"]},{"title":"add_vline is broken for categorical scatter plots with categories that convert to numbers","body":"Thanks for your interest in plotly.py!!\r\n\r\nBefore opening an issue, please search for existing and closed issues. If your problem or idea is not addressed yet, [please open a new issue](https:\/\/github.com\/plotly\/plotly.py\/issues\/new).\r\n\r\nBug reports **must** be accompanied with a reproducible example. Please use the [latest version](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/CHANGELOG.md) of plotly.py in your report unless not applicable and specify if you're plotting [online](https:\/\/plot.ly\/python\/getting-started\/#initialization-for-online-plotting) or [offline](https:\/\/plot.ly\/python\/getting-started\/#initialization-for-offline-plotting).\r\n\r\nNote that GitHub issues are reserved for bug reports and feature requests only. Implementation questions should be asked on community.plot.ly (tagged [`python`](https:\/\/community.plot.ly\/c\/api\/python)) or on Stack Overflow (tagged [`plotly`](https:\/\/stackoverflow.com\/questions\/tagged\/plotly)).\r\n\r\nComments on GitHub issues or pull requests should add content to the discussions. Approbation comments such as *+1* or *I would like this feature to be implemented as well* will be deleted by the maintainers. Please use [GitHub reactions](https:\/\/github.com\/blog\/2119-add-reactions-to-pull-requests-issues-and-comments) instead.\r\n","comments":["**add_vline** works fine for categorical scatter plots where the category labels are strings that cannot convert to a number.  The line is placed as expected at the requested position on the x axis corresponding to the label.  However, if the x axis labels can convert to numbers, add_vline will convert the requested string label to a number and plot the line on the (n+1)th major tick of the x axis (Python zero-based) rather than at the position corresponding to the label.\r\n\r\nHere is a simple example:\r\n```\r\nfig = go.Figure()\r\nfig.add_trace(go.Scatter(x=['2', '4', '6', '8'],\r\n                         y=[1, 2, 3, 2]))\r\nfig.update_xaxes(type='category')\r\nfig.add_vline(x='6', line_dash='dot')\r\nfig.add_vline(x='2', line_dash='dash')\r\nfig.add_hline(y=2, line_dash='dot')\r\nfig.update_layout(width=400, height=400)\r\n```\r\nThe result of this is:\r\n![1-8-2021 6-45-32 PM](https:\/\/user-images.githubusercontent.com\/55862757\/104075872-42cb2380-51e2-11eb-8ede-9a8fb9dca3c2.png)\r\nThe dotted line should be at 6, but instead is plotted way out to the right where the 7th major tick would be.  The dashed line should be plotted at 2, but is plotted on the 3rd major tick, which is where the 6 is.\r\n\r\nNote that the x data are provided as strings and the x axis is specifically set to category rather than allowing an auto-select.\r\nSomewhat remarkably, the problem persists even if the x values are padded with spaces before and after, in an attempt to really denote them as strings.\r\n```\r\nfig = go.Figure()\r\nfig.add_trace(go.Scatter(x=[' 2 ', ' 4 ', ' 6 ', ' 8 '],\r\n                         y=[1, 2, 3, 2]))\r\nfig.update_xaxes(type='category')\r\nfig.add_vline(x=' 6 ', line_dash='dot')\r\nfig.add_vline(x=' 2 ', line_dash='dash')\r\nfig.add_hline(y=2, line_dash='dot')\r\nfig.update_layout(width=400, height=400)\r\n```\r\nThe expected behavior is only possible if the x values cannot be converted to numbers, even with trimming white space.\r\n```\r\nfig = go.Figure()\r\nfig.add_trace(go.Scatter(x=['2*', '4*', '6*', '8*'],\r\n                         y=[1, 2, 3, 2]))\r\nfig.update_xaxes(type='category')\r\nfig.add_vline(x='6*', line_dash='dot')\r\nfig.add_vline(x='2*', line_dash='dash')\r\nfig.add_hline(y=2, line_dash='dot')\r\nfig.update_layout(width=400, height=400)\r\n```\r\n![1-8-2021 6-57-02 PM](https:\/\/user-images.githubusercontent.com\/55862757\/104076192-56c35500-51e3-11eb-9ad4-617d98815821.png)\r\n","I believe this is due to a problem with plotly.js, related to https:\/\/github.com\/plotly\/plotly.js\/issues\/5767"],"labels":["bug"]},{"title":"px.pie has no legend title","body":"Reported in https:\/\/community.plotly.com\/t\/is-there-a-way-to-display-the-label-of-categories-in-px-pie\/48069","comments":["I will be working with this the next few days."],"labels":["bug"]},{"title":"Parcoords line opacity, rgba color not working","body":"The documentation specifies that the parcoords' line argument color can be a an rgba string. This doesn't work though and the lines remain a solid color as if using only the rgb part.\r\n\r\n![newplot(3)](https:\/\/user-images.githubusercontent.com\/22256302\/89779220-2b8ee980-db0f-11ea-9864-0a067abf3075.png)\r\n\r\n\r\n    import plotly.express as px\r\n    import plotly.graph_objects as go\r\n    \r\n    iris = px.data.iris()\r\n   \r\n    fig = go.Figure(\r\n     data=go.Parcoords(\r\n        line_color=\"rgba(100,00,0,0.1)\",\r\n        dimensions=list([\r\n            dict(label='sepal_length', values=iris.sepal_length),\r\n            dict(label='sepal_width', values=iris.sepal_width),\r\n            dict(tickvals=[1, 2, 3],\r\n                 label='species', values=iris.species_id,\r\n                 ticktext=iris.species_id.unique()),\r\n        ]))\r\n    )\r\n   \r\n    fig.write_html('parallel.html', auto_open=True)","comments":["It also doesn't work using the Line constructor and assigning an rgba color, or by defining an rgba colorscale.","Yes, I believe the docstring is incorrect in this case, and only RGB is supported.","Is this achievable through another manor? I can see when doing a brush selection, the unselected lines go transparent and dark","This bug has not been fixed, right? And I guess the plan is to leave it as it is, correct?","We'd welcome a PR to add RGBA\/opacity support to parcoords lines in https:\/\/github.com\/plotly\/plotly.js - but until that happens this is just a documentation bug (albeit a fairly subtle one, as currently we don't have a way in plotly.js\/plotly.py to designate colors as not supporting opacity)","Is there any updates?","hi @noob-procrastinator \r\nWould you be interested in creating a PR for this, as Alex commented above?\r\n\r\nOnce a PR is created, we would tie it to this issue so everyone is updated on the progress. "],"labels":["bug"]},{"title":"tickformat = ',d' results in an unexpected alignment of subplots","body":"### Preface\r\nI first encountered this issue in a **JupyterLab** notebook when using a custom axes layout (_without_ using the **`make_subplots()`** function, similar to the \"low-level API\" examples [here](https:\/\/plotly.com\/python\/subplots\/)). However, the reproducible examples below were produced and tested in an offline\/non-interactive environment (**Spyder** IDE) using `make_subplots()`, which suggests that this issue is independent of where or how subplots are generated.\r\n\r\n### Problem Description\r\nWhen I want to change the format of the YAxis ticks to only show integers, using `tickformat = ',d'` like so:\r\n\r\n```python\r\nfrom plotly.subplots import make_subplots\r\nimport plotly.graph_objects as go\r\n\r\nfig = make_subplots(rows = 1, cols = 7)\r\n\r\nfor i in range(7):\r\n    fig.add_trace(go.Scatter(x = [1, 2, 3], y = [4, 5, 6]),\r\n                  row = 1, col = i+1)\r\n\r\nfig.update_layout(yaxis_tickformat = ',d')\r\n    \r\nfig.show()\r\n```\r\nresults in an unexpected alignment of the subplot axes:\r\n\r\n![tickformat_1](https:\/\/user-images.githubusercontent.com\/45436070\/89744261-3434e080-da79-11ea-8b10-9765d14ba9ea.png)\r\n\r\nInterestingly, chosing a different `yaxis` (here `yaxis2`) for this formatting results in a slightly different layout:\r\n\r\n```python\r\nfrom plotly.subplots import make_subplots\r\nimport plotly.graph_objects as go\r\n\r\nfig = make_subplots(rows = 1, cols = 7)\r\n\r\nfor i in range(7):\r\n    fig.add_trace(go.Scatter(x = [1, 2, 3], y = [4, 5, 6]),\r\n                  row = 1, col = i+1)\r\n\r\nfig.update_layout(yaxis2_tickformat = ',d')\r\n    \r\nfig.show()\r\n```\r\n![tickformat_3](https:\/\/user-images.githubusercontent.com\/45436070\/89744313-b4f3dc80-da79-11ea-8bd0-6f2d99921cf3.png)\r\n\r\nCommenting out the relevant line results in a completely normal set of axes:\r\n\r\n```python\r\nfrom plotly.subplots import make_subplots\r\nimport plotly.graph_objects as go\r\n\r\nfig = make_subplots(rows = 1, cols = 7)\r\n\r\nfor i in range(7):\r\n    fig.add_trace(go.Scatter(x = [1, 2, 3], y = [4, 5, 6]),\r\n                  row = 1, col = i+1)\r\n\r\n# fig.update_layout(yaxis_tickformat = ',d')\r\n    \r\nfig.show()\r\n```\r\n![tickformat_2](https:\/\/user-images.githubusercontent.com\/45436070\/89744287-6e05e700-da79-11ea-9b5e-35ccd4be0333.png)\r\n\r\nIt seems that when these plots are rendered interactively (setting `plotly.io.renderers.default = 'browser'`), further issues are introduced with panning, zooming etc.\r\n**Is this behavior expected? Is there currently a way to format an axis to only show integers while avoiding these issues?**","comments":["This seems to be an automargin bug, as setting `yaxis_automargin=False` seems to be a workaround.\r\n\r\nThe underlying bug is recorded in the Javascript project as https:\/\/github.com\/plotly\/plotly.js\/issues\/5059"],"labels":["bug"]},{"title":"Python-side aggregation in PX","body":"Right now Plotly Express hews pretty closely to the concept of \"no computation in Python\" modulo stuff like sunburst `path` and scatter `trendlines`... notably `histogram`, `box` and `density_heatmap` embed the entire dataset into the figure and let the front end handle the aggregation. This is not particularly scalable, and generally means we can't leverage the excellent Python-side tools for big data (e.g. Vaex https:\/\/github.com\/plotly\/plotly_express\/issues\/139 or RAPIDS).\r\n\r\nWe should come up with some consistent way of using PX for big-data aggregations. Datashader would be a natural backend for `density_heatmap` for example.","comments":[],"labels":["\u2665 NEEDS SPON$OR"]},{"title":"PX figure overlay \/ layering","body":"PX today is nowhere near as powerful as something like ggplot in terms of layering: you can't take a bar chart and a line chart and overlay them easily, even though they have the same subplot information. In principle, so long as x, y, facet_col and facet_row are the same or compatible, I should be able to \"overlay\" PX figures.\r\n\r\nSee also Composition: #2647","comments":["# `px.overlay` notes\r\n\r\n- in order to check matching titles, the shape of the plot must be taken into consideration because the titles are only given to the outer elements\r\n- if the titles don't match, it could fail. But we might want to compare datasets, so perhaps given the geometry of the 2 plots is compatible, the titles could be combined somehow, or secondary y-axes could be used.\r\n- px sets all the y-ranges in the same row and all the x-ranges in the same column to be identical, so when combining charts, it would be a matter of finding the range that fits all the combined data\r\n- for simplicity in comparing axes, only 'xy'-type traces should be supported for now\r\n- compatibility of subplot geometry is quite complex as the layout is just a collection of axes that are configured to line-up in a desired way (e.g., producing a grid that looks like subplots). Because an infinite number of layouts is possible, we could say that figures are combinable if the axes in the layout match exactly. However many exceptions to this exist where combinability is still plausible: for example, if one subplot has an inset and the other doesn't, the main subplot data could be combined (show two line charts on the same subplot, say) and the inset could be placed over this. But how to extract this situation by just working with the axis descriptions and data references is difficult... a similar case can be made for secondary y axes. A more complete comparison of layouts would compare the topology of axis anchor references, as well as their position in the final subplot.\r\n\r\n## Simple implementation (first iteration)\r\n\r\n- the axes (as described in fig.layout) of the two figures are compared, if they\r\n  don't match exactly, the function fails.\r\n- somehow it must be known what is being shown in each figure, this could maybe\r\n  be extracted from the figure title. This will be used in a legend where the colors of the two overlayed plots will be annotated (e.g., stuff from figure 1 will be blue and stuff from figure 2 will be red).\r\n\r\n- A simple use case might be the observation of an optimization algorithm. In one figure, each subplot shows the error or cost surface (represented as a contour or a heatmap) for a pair of variables, in another figure the progression of an optimization algorithm is shown as line segments. This case is simple because the trace types are different, but the axes are the same.\r\n  \r\n- This becomes more complicated if the `color` kwarg (to px.scatter, say) was used because multiple series are compared in this case by varying their color. In this case, we could just continue the cycle of colors and append the new data to the plot, but also in this case it probably is easier for the user to extend the DataFrame.\r\n\r\n    - consider the following example, imagine animals can also dine out  in\r\n      restaurants (and smoke) and we have a different tips data set (called\r\n      tips2) with the keys: total_bill tip species smoker day time. Then we\r\n      can imagine doing the following:\r\n\r\n      fig1=px.scatter(tips,x=\"total_bill\", y=\"tip\", facet_col=\"smoker\",\r\n                      facet_row=\"time\", color=\"sex\")\r\n      fig2=px.scatter(tips2,x=\"total_bill\", y=\"tip\", facet_col=\"smoker\",\r\n                      facet_row=\"time\", color=\"species\")\r\n      fig=px.combine(fig1,fig2)\r\n\r\n      Then the legend could have the title 'sex or species' and the categories\r\n      would be 'male', 'female', 'dog', 'cat', 'bison' etc.\r\n      But in that case it would be easier to combine the data from the beginning.\r\n\r\n      tips=tips.rename({\"sex\",\"sex_species\"},axis=\"columns\")\r\n      tips2=tips2.rename({\"species\",\"sex_species\"},axis=\"columns\")\r\n      tips_combo=pd.concat([tips,tips2],axis=0,ignore_index=True)\r\n      px.scatter(tips_combo,...,color=\"sex_species\")\r\n      \r\n- A case where we cannot simply combine two data-columns is if we had an additional column that wasn't categorical, say \"calories consumed\". It's true we could pass size=\"calories consumed\" to px.scatter, but say we want to use an axis to observe the information, then it might be nice to have two legends and either a secondary_y-axis showing the other information, or have the axis extended to the range of both columns.\r\n\r\n- Another case where we cannot combine data-columns is if two trace types, say scatter and bar, are to be overlayed. If the subplot titles match, then this is just a matter of using one of the two provided layouts, combining the data, and updating the ranges. It would be helpful to have legend to indicate what is represented by each trace.\r\n\r\n    - A more realistic case for this is like the tips example, but we have exact times for all the data-points. We make a bar chart where the x-axis of each bar is the day of the week and the bar represents the total value of transactions (say sum of bill amounts) on that day. They could be stacked bars or a solid bar (in that case a histogram). Then we overlay a scatter plot where the transactions are plotted by their exact time. We might want a secondary y-axis in this case because the single transaction values will be much less than the total. Also the x-axis becomes a little more complicated because it plots a continuous value, not a category (although it should always be a continuous value and the axis should be a time-like axis).\r\n\r\n## Types of overlays:\r\n\r\n    - distribution \/ subset : like the optimization above where distribution is\r\n      the error contour and the subset is the path the optimzation algorithm\r\n      takes\r\n    - multidimensional comparison : like the case where in one \"plane\" we have\r\n      the tip amount and the other \"plane\" the calories consumed.\r\n    - raw data \/ model : like the case above where we show the value of\r\n      transactions in a day and each transaction individually\r\n","As there are many many possibilities: for the first iteration we try this perhaps:\r\n\r\n- axes in layouts must be exactly the same (same number of axes, same domain, same anchor, etc.), then this can work for strangely shaped plots\r\n- if titles can be extracted from the layout (by inspecting \"title\" and fig._grid_ref), then they are either checked against the other plot (function only succeeds if they match) or combined to make new titles\r\n- the ranges of the resulting plot are updated so all the data fits, or we introduce a secondary y axis in each subplot, if it doesn't already exist\r\n   - this means probably only 'xy' type plots are allowed\r\n   - detecting secondary y axes might be hard to do\r\n- making a legend in every case is a bit confusing, especially if we are combining two different trace types, so that requires a little more thought \/ guidance\r\n\r\n ","Detecting the top and right titles is a bit difficult \/ hacky because they are just annotations.\r\nAlso because the figures don't have much meta-data, the combine function would have to do a lot of guessing as to what a particular graph object was meant to be (is it annotation that's supposed to be a title? or point out something on the graph)?\r\nWondering if a better approach might be to have something like:\r\n`px.combine(trace_types=[px.scatter,px.bar],trace_args=[dict(x=\"total_bill\"...),dict(y=\"tips\"...)])`\r\nthat gives you these 2 plots super-imposed.","If looking at titles is too complicated, then feel free to assume that `px.whatever()` can add whatever metadata you need to the figure. There is a `layout.meta` attribute that PX could put stuff into.","Maybe in a first iteration we could just look at subplots: consider two figures \"compatible\" if they have the exact same amount of x\/y axis in the exact same domains, and no other subplots like scene\/geo\/ternary\/polar etc.","Some notes from our conversation today:\r\n* we could restrict ourselves to single-subplot or facet_col-only (including facet_col_wrap!) to avoid the \"labels on the right due to facet_row\" problem\r\n* we could reuse the x\/y\/legend titles if and only if they are the same between fig0 and fig1, otherwise leave them blank and let the user use `fig.update_xaxes(title=...)` to set them\r\n* what to do when users are combining two single-trace figures where the traces have no names? we maybe could use the y-axis titles as the trace names?\r\n* we should reflow reused colors between fig0 and fig1 using fig0.layout.colorway falling back to fig0.layout.template.layout.colorway","See also: https:\/\/github.com\/plotly\/plotly.py\/issues\/2146 for a different concept"],"labels":["\u2665 NEEDS SPON$OR"]},{"title":"PX figure composition","body":"It would be really nice to be able to take two figures created with Plotly Express (or really anything else) and \"glue them together\" side by side or one above the other, something like `fig3 = compose([fig1, fig2, fig3], orientation=\"h\")` or something even more powerful.\r\n\r\nI love how ggplot patchwork https:\/\/github.com\/thomasp85\/patchwork and Altair https:\/\/altair-viz.github.io\/user_guide\/compound_charts.html do this!\r\n\r\nSee also Overlaying: #2648","comments":["Just spent half an hour looking for a solution to this. Any progress made this week? I need to make some 2x2 subplots with different Y axes. Compose would be very helpful!","This would be a necessary feature, already strongly suggested by the community. The solutions so far are either not native Plotly or depreciates the PX design, for example, by taking only the trace, and leaving the layout out. See: https:\/\/github.com\/plotly\/plotly_express\/issues\/83#issuecomment-529167965\r\nIn the mentioned way, the rug, color, etc, are totally ignored. \r\n","If anyone wants to take this on, I'd be happy to review the code :) It's not on our short-term roadmap at the moment, despite how useful it would be!","@nicolaskruchten \r\n\r\nAm considering to take up this issue. Running into the following difficulty when trying to figure out a solution on Google Colab:\r\n\r\n```python\r\n!pip install plotly==4.12.0\r\n\r\nimport pandas as pd\r\nimport plotly.express as px\r\nfrom plotly.subplots import make_subplots\r\n\r\n\r\npd.options.plotting.backend = 'plotly'\r\n\r\n# Ames Housing dataset\r\ndf = pd.read_csv('https:\/\/github.com\/jads-nl\/discover-projects\/blob\/main\/ames-housing\/AmesHousing.csv?raw=true')\r\n\r\nfig = make_subplots(rows=1, cols=2, shared_xaxes=False, shared_yaxes=False)\r\nfig.add_trace(df.SalePrice.hist().data[0], row=1, col=1)\r\nfig.add_trace(df['Year Built'].hist().data[0], row=1, col=2)\r\n```\r\n\r\nThe second histogram on the right does not render properly, something goed wrong with the axis and\/or default values. I can't see which setting causes this. Could you give a pointer in the right direction perhaps?\r\n<img width=\"1443\" alt=\"Screenshot 2020-11-21 at 11 49 16\" src=\"https:\/\/user-images.githubusercontent.com\/4090894\/99875406-ba6fcf80-2bef-11eb-902e-8aba537e4b15.png\">\r\n","Hmm this last one is kind of funny... What's happening here is that both the traces you're extracting with `data[0]` have `bingroup: \"x\"` (where \"x\" is just an arbitrary string, but it's the PX default) and so the right-hand plot is getting all its data stuck in a single bin! Definitely something we'll have to manage with this composition issue!\r\n\r\nIf you run `fig.update_traces(bingroup=None)` after your code that'll clear the groups and each trace will be binned on its own.","Any updates here?.  \r\nSpend 1-hour searching for a solution!!","I am also hoping for this functionality.","Please add this! I would also add some bugs to the bucket if needed. Where can I donate?","Just pinging this. Would be helpful."],"labels":["feature","\u2665 NEEDS SPON$OR","p4"]},{"title":"Rangebreaks broken with go.Scattergl (works with go.Scatter)","body":"This code uses go.Scatter with rangebreaks and it works\r\n\r\n```\r\nimport pandas as pd\r\nimport plotly.graph_objects as go\r\ndf = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/finance-charts-apple.csv')\r\n\r\nfig = go.Figure()\r\n\r\nfig.add_trace(\r\n    go.Scatter( ### REPLACE WITH go.Scattergl\r\n        x=df[\"Date\"],\r\n        y=df[\"AAPL.High\"],\r\n    )\r\n)\r\n\r\nfig.update_xaxes(\r\n    rangebreaks=[\r\n        dict(bounds=[\"sat\", \"mon\"]), #hide weekends\r\n        dict(values=[\"2015-12-25\", \"2016-01-01\"])  # hide Christmas and New Year's\r\n    ]\r\n)\r\nfig.show()\r\n```\r\n\r\nIf you replace go.Scatter with go.Scattergl, the image is completely broken: it shows no data, with random values for the axes (year is 2000....)","comments":["I've observed the same but from `plotly.express.line` and `plotly.express.scatter` when the render mode is `auto` and the number of points is > 1000. Setting the render mode to `svg` is my current workaround.","Yes, this is a known limitation, and I've added a note to this effect to our documentation: https:\/\/plotly.com\/python\/time-series\/#hiding-weekends-and-holidays"],"labels":["\u2665 NEEDS SPON$OR"]},{"title":"Only a single hover box shown for overlapping\/multiple points","body":"This has been tested in version 4.7.1.\r\n\r\nWhen hover information is shown for points e.g. in a scatter plot, the following situations can occur:\r\n* there are multiple points on exactly the same coordinates\r\n* there are multiple points close to the same coordinates and the markers used to visualize those points overlap in the graph\r\n\r\nHover information for all those multiple points should be shown, especially in cases where the hover information includes additional data not shown directly in the graph.\r\n\r\nThe hvPlot library does this correctly: it shows stacked hover boxes for all the data points under the cursor. Plotly only shows one hover box and it is not clear which one. \r\n\r\nI think this is an actual bug since it makes it easy to miss data and the hover information does not represent the actual data in the graph. \r\n\r\nHere is an example using the Iris data set and Plotly:\r\n```\r\nimport plotly.express as px\r\nfrom bokeh.sampledata import iris\r\ndf = iris.flowers.copy()\r\nfig = px.scatter(df, x=\"sepal_length\", y=\"sepal_width\", color=\"species\",\r\n                 opacity=0.4, hover_data=[\"petal_length\", \"petal_width\"]\r\n                )\r\nfig.show()\r\n```\r\n\r\nThis shows: \r\n![plotly01](https:\/\/user-images.githubusercontent.com\/619106\/82115580-eeab9480-9763-11ea-8d11-baedb72e6dcc.png)\r\n\r\nWith hvPlot:\r\n```\r\ndf.hvplot(kind=\"scatter\", \r\n          x=\"sepal_length\", y=\"sepal_width\", by=\"species\", \r\n          hover_cols=[\"petal_length\", \"petal_width\"], \r\n          alpha=0.4)\r\n```\r\n![Hvplot01](https:\/\/user-images.githubusercontent.com\/619106\/82115624-3af6d480-9764-11ea-89ad-afe60e224e99.png)\r\n\r\n","comments":["I agree that we should have an additional hover mode for this behaviour but the current behaviour is not considered a bug at this time :)","My concern is that showing a single random data point when there are many can lead to serious misinterpretation, especially when one is used to a library like hvPlot which does show all the data points. One of the main purposes of visualizations and graphs is to learn about and understand data and I think all packages have to be very careful about how they do that. \r\nSo if the current behaviour is not considered a bug, it should at least be clearly documented and explained wherever it could be important. \r\n\r\nBut having a mode to actually display \r\n* points with identical graph coordinates\r\n* and optionally also points with close graph coordinates where the visual representation of the points overlap\r\nwould be a very important feature request then :)\r\n\r\nCurrently I would personally need some kind of workaround, so anything that would help to implement an equivalent functionality would be tremendously helpful. \r\nAll I can see at the moment is processing the data myself to calculate a list of data points per distinct coordinate and then use code and a custom hover template to do it all in code, but that is pretty inconvenient in comparison to just using hvPlot which just does it :)","Like I said, I agree :) \n\nAs far as I know it\u2019s not a random point we display the hover label for, it\u2019s the last one drawn which is the latest one in the trace IIRC.","I guess the proper workaround\/fix for this also depends on the rendering mode?\r\nIs the main route to fixing this maybe through plotly.js?","Yes, this would be a feature we would need to add in the Javascript library that powers Plotly.py. It's been brought up in the past here: https:\/\/github.com\/plotly\/plotly.js\/issues\/4294","See also https:\/\/github.com\/plotly\/plotly.js\/issues\/4999","having the same problem. When can we expect this feature to come out ?","It's a good feature and we'd love to have it in the library but it's not on anyone's roadmap at the moment as far as I know. That said, we as maintainers would be happy to [help someone from the community to implement it in Plotly.js](https:\/\/github.com\/plotly\/plotly.js\/blob\/master\/CONTRIBUTING.md), or to [accept sponsorship](https:\/\/plot.ly\/products\/consulting-and-oem\/) to get it on to our short-term roadmap :)","ok great, thx for the information!","Any updates?","It would be great to add this feature","Yeah its odd this hasnt been added. It should be relatively straighforward...","Another bump hoping this is put on the roadmap - this seems like a very common occurrence for any type of plot.","I would love this feature also - this happens all the time with real data!","Same here, would be really great to have this feature for users not to lose information when using the graph","I would also really like this feature! Especially for mapping with Plotly."],"labels":["\u2665 NEEDS SPON$OR"]},{"title":"Pandas import error","body":"A Dash user is seeing an error from `pandas` without ever directly importing `pandas`, just `dash`, `plotly`, and `numpy`. https:\/\/community.plotly.com\/t\/callback-error-when-plotting-multiple-graph-objects\/38756\r\n\r\nThe error occurs inside `plotly` when the Dash app tries to render one of the plots in a callback:\r\n```py\r\nTraceback (most recent call last):\r\n  File \"\/Users\/alex\/plotly\/fiddle\/f.py\", line 74, in update_dist_plot\r\n    \"data\": [go.Bar(x=bins, y=counts)],\r\n  File \"\/Library\/Frameworks\/Python.framework\/Versions\/3.7\/lib\/python3.7\/site-packages\/plotly\/graph_objs\/__init__.py\", line 93149, in __init__\r\n    self[\"x\"] = x if x is not None else _v\r\n  File \"\/Library\/Frameworks\/Python.framework\/Versions\/3.7\/lib\/python3.7\/site-packages\/plotly\/basedatatypes.py\", line 3490, in __setitem__\r\n    self._set_prop(prop, value)\r\n  File \"\/Library\/Frameworks\/Python.framework\/Versions\/3.7\/lib\/python3.7\/site-packages\/plotly\/basedatatypes.py\", line 3772, in _set_prop\r\n    val = validator.validate_coerce(val)\r\n  File \"\/Library\/Frameworks\/Python.framework\/Versions\/3.7\/lib\/python3.7\/site-packages\/_plotly_utils\/basevalidators.py\", line 385, in validate_coerce\r\n    v = copy_to_readonly_numpy_array(v)\r\n  File \"\/Library\/Frameworks\/Python.framework\/Versions\/3.7\/lib\/python3.7\/site-packages\/_plotly_utils\/basevalidators.py\", line 93, in copy_to_readonly_numpy_array\r\n    if pd and isinstance(v, (pd.Series, pd.Index)):\r\nAttributeError: module 'pandas' has no attribute 'Series'\r\n```\r\n\r\nThat's the error I see - the OP's error message is a little more extensive, which is a little funny because we both report pandas v1.0.3\r\n```\r\nAttributeError: partially initialized module \u2018pandas\u2019 has no attribute \u2018Series\u2019 (most likely due to a circular import)\r\n```\r\n\r\nI can reproduce locally with this app:\r\n\r\n```py\r\nimport dash_core_components as dcc\r\nimport dash_html_components as html\r\nfrom dash import Dash\r\nfrom dash.dependencies import Input, Output\r\nimport plotly.graph_objs as go\r\nimport numpy as np\r\n\r\napp = Dash(__name__)\r\n\r\napp.layout = html.Div(\r\n    [\r\n        html.Div(\r\n            [\r\n                html.Br(),\r\n                html.Label(\"Plotting Options\"),\r\n                dcc.RadioItems(\r\n                    id=\"trunk-angle-radio\",\r\n                    options=[\r\n                        {\"label\": \"Sagittal\", \"value\": \"Sagittal\"},\r\n                        {\"label\": \"Lateral\", \"value\": \"Lateral\"},\r\n                        {\"label\": \"Twist\", \"value\": \"Twist\"},\r\n                    ],\r\n                    value=\"Sagittal\",\r\n                ),\r\n            ]\r\n        ),\r\n        html.Div(\r\n            [\r\n                html.Div(\r\n                    [dcc.Graph(id=\"trunk-angle-plot\")],\r\n                    style={\"width\": \"48%\", \"display\": \"inline-block\"},\r\n                ),\r\n                html.Div(\r\n                    [dcc.Graph(id=\"trunk-angle-dist\")],\r\n                    style={\"width\": \"48%\", \"display\": \"inline-block\", \"float\": \"right\"},\r\n                ),\r\n            ]\r\n        ),\r\n        html.Div(\r\n            [\r\n                html.Label(\"Data Statistics\"),\r\n                html.Div(id=\"data-stats-div\", style={\"padding\": 10}),\r\n            ]\r\n        ),\r\n    ]\r\n)\r\n\r\n\r\n@app.callback(\r\n    Output(\"trunk-angle-plot\", \"figure\"), [Input(\"trunk-angle-radio\", \"value\")]\r\n)\r\ndef update_angle_plot(radio_option):\r\n    (x, y) = get_trunk_angles(radio_option)\r\n    fig = {\r\n        \"data\": [go.Scatter(x=x, y=y, mode=\"lines+markers\")],\r\n        \"layout\": go.Layout(\r\n            title=\"Trunk Angle Time Series Plot\",\r\n            xaxis={\"title\": \"Time (sec)\"},\r\n            yaxis={\"title\": \"Degrees\"},\r\n        ),\r\n    }\r\n    return fig\r\n\r\n\r\n@app.callback(\r\n    Output(\"trunk-angle-dist\", \"figure\"), [Input(\"trunk-angle-radio\", \"value\")]\r\n)\r\ndef update_dist_plot(radio_option):\r\n    (x, y) = get_trunk_angles(radio_option)\r\n    counts, bins = np.histogram(y, bins=range(-90, 91, 30))\r\n    bins = bins + (bins[1] - bins[0]) \/ 2\r\n    # print(counts, bins)\r\n    fig = {\r\n        \"data\": [go.Bar(x=bins, y=counts)],\r\n        \"layout\": go.Layout(\r\n            title=\"Trunk Angle Distributions\",\r\n            xaxis={\r\n                \"title\": \"Bin midpoint (degrees)\",\r\n                \"tickmode\": \"array\",\r\n                \"tickvals\": bins,\r\n                \"ticktext\": [str(int(bin)) for bin in bins],\r\n            },\r\n            yaxis={\"title\": \"Percentage of time\"},\r\n        ),\r\n    }\r\n    return fig\r\n\r\n\r\n@app.callback(\r\n    Output(\"data-stats-div\", \"children\"), [Input(\"trunk-angle-radio\", \"value\")]\r\n)\r\ndef update_stats(radio_option):\r\n    (x, y) = get_trunk_angles(radio_option)\r\n    stats_div = [\r\n        html.Div(\"Minimum: {}\".format(np.min(y)), id=\"trunk-angle-dist-min\"),\r\n        html.Div(\"Maximum: {}\".format(np.max(y)), id=\"trunk-angle-dist-max\"),\r\n        html.Div(\"Mean: {:.2f}\".format(np.mean(y)), id=\"trunk-angle-dist-mean\"),\r\n        html.Div(\r\n            \"Standard Deviation: {:.2f}\".format(np.std(y)), id=\"trunk-angle-dist-std\"\r\n        ),\r\n        html.Div(\r\n            \"Range: {}\".format(np.max(y) - np.min(y)), id=\"trunk-angle-dist-range\"\r\n        ),\r\n    ]\r\n    return stats_div\r\n\r\n\r\ndef get_trunk_angles(radio_option):\r\n\r\n    dummy_x = np.linspace(0, 50, 101)\r\n\r\n    if radio_option == \"Sagittal\":\r\n        dummy_y = np.random.randint(-90, 90, 101)\r\n    elif radio_option == \"Lateral\":\r\n        dummy_y = np.random.randint(-90, 90, 101)\r\n    elif radio_option == \"Twist\":\r\n        dummy_y = np.random.randint(-90, 90, 101)\r\n\r\n    return (dummy_x, dummy_y)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app.run_server(debug=True)\r\n```","comments":["I can make the error go away by adding `import pandas` at the top of the posted app. Then I just have to ignore the linter error about unused imports...","@alexcjohnson when did you get the error, when running the script or when triggering a specific callback from the UI? I cannot reproduce (I tried changing the value of the `RadioItems`) ","The error appears for me when first loading the app in the browser:\r\n<img width=\"1124\" alt=\"Screen Shot 2020-05-04 at 5 33 42 PM\" src=\"https:\/\/user-images.githubusercontent.com\/2678795\/81015893-796bc580-8e2d-11ea-85ab-e0e819c9c5bc.png\">\r\n\r\nIf I reload the page everything is fine thereafter - so it's just the first time these callbacks are called. after starting the app Maybe the two callbacks are being called in parallel threads and this is a race condition? One callback starts importing `pandas` but doesn't finish... the second one sees `pandas` as already loaded and tries to use it prematurely?","Interesting. Hum maybe this is indeed what happens. Probably if you initialize the `dcc.Graph` with an empty `go.Figure()` then the problem should disappear?","I have the same error when I try to update a graph using callback","Not sure if this is 100% related, but I put up a PR recently for a similar issue (https:\/\/github.com\/plotly\/plotly.py\/issues\/2391) involving ValueErrors thrown with numpy imports. Not a dash rendering issue, but I wonder if there's a more more efficient way we can do type checks involving different imports with libraries like numpy\/pandas?\r\n\r\nInteresting that OP has a \"partially initialized module error\". That seems to support the race condition theory and why it might only fail on initialization.","I'm not able to reproduce locally either, and wonder if it's dependent on the machine itself (perhaps low memory\/cpu when running the app? so loading pandas is taking longer than it takes to make that initial callback)","```\r\nimport pandas\r\nimport numpy as np\r\nimport math\r\nfrom plotly import graph_objects as go\r\n# import plotly.express as px\r\n\r\ntip = [0, 0, 0]\r\nend = [10, 10, 10]\r\ndistance = 10\r\nu = distance\r\nx_ = (1-u)*tip[0] + u*end[0]\r\ny_ = (1-u)*tip[1] + u*end[1]\r\nz_ = (1-u)*tip[2] + u*end[2]\r\n\r\n\r\nfig = go.Figure(\r\n        data=go.Scatter3d(\r\n                x=[x_, tip[0], end[0]],\r\n                y=[y_, tip[1], end[1]],\r\n                z=[z_, tip[2], end[2]]\r\n        )\r\n)\r\nfig.show()\r\n```\r\n\r\nI was able to get the error with just this block of simple code. I tried fixing multiple python installations as well. Creating a virtual environment also doesn't help. Will be really grateful if you could fix this!\r\n\r\nHere is the error log\r\n```\r\n  File \"C:\\Users\\Administrator\\Downloads\\workspace\\wna\\wiki-nearby-articles\\tests\\dis.py\", line 1, in <module>\r\n    import pandas\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\pandas\\__init__.py\", line 51, in <module>\r\n    from pandas.core.api import (\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\pandas\\core\\api.py\", line 14, in <module>\r\n    from pandas.core.algorithms import factorize, unique, value_counts\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\pandas\\core\\algorithms.py\", line 16, in <module>\r\n    from pandas.util._decorators import doc\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\pandas\\util\\__init__.py\", line 1, in <module>\r\n    from pandas.util._decorators import Appender, Substitution, cache_readonly  # noqa\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\pandas\\util\\_decorators.py\", line 2, in <module>\r\n    import inspect\r\n  File \"C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.496.0_x64__qbz5n2kfra8p0\\lib\\inspect.py\", line 36, in <module>\r\n    import dis\r\n  File \"C:\\Users\\Administrator\\Downloads\\workspace\\wna\\wiki-nearby-articles\\tests\\dis.py\", line 24, in <module>\r\n    data=go.Scatter3d(\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\plotly\\graph_objs\\_scatter3d.py\", line 2401, in __init__\r\n    self[\"x\"] = _v\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\plotly\\basedatatypes.py\", line 4804, in __setitem__\r\n    self._set_prop(prop, value)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\plotly\\basedatatypes.py\", line 5143, in _set_prop\r\n    val = validator.validate_coerce(val)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\_plotly_utils\\basevalidators.py\", line 388, in validate_coerce\r\n    elif is_homogeneous_array(v):\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\_plotly_utils\\basevalidators.py\", line 176, in is_homogeneous_array\r\n    or (pd and isinstance(v, (pd.Series, pd.Index)))\r\nAttributeError: partially initialized module 'pandas' has no attribute 'Series' (most likely due to a circular import)\r\n\r\n```","Still haven't been able to reproduce locally with my machine, with any of these provided examples... Makes me think this could potentially be hardware\/machine specific and some timing issues loading the library.\r\n\r\nAnyone have any other thoughts on how we might be able to reproduce better or locate a good place to start making some improvements?","I have a scenario that seems to reproduce this type of error fairly consistently:\r\n```python\r\nfrom uuid import uuid4\r\n\r\nimport flask\r\nimport dash\r\nfrom dash import html, dcc\r\nfrom dash.dependencies import Output, Input\r\n\r\nimport plotly.graph_objects as go\r\n\r\n\r\nserver = flask.Flask('app')\r\napp = dash.Dash('app', server=server)\r\n\r\n\r\nn_comps = 10\r\nbuttton_id = \"click_me\"\r\nn_clicks_counter_id = str(uuid4())\r\nfigids = [str(uuid4()) for _ in range(n_comps)]\r\n\r\n@app.callback(\r\n    Output(n_clicks_counter_id, \"children\"),\r\n    Input(buttton_id, \"n_clicks\")\r\n    )\r\ndef update_count(n_clicks):\r\n    return str(n_clicks)\r\n\r\nfor figid in figids:\r\n    @app.callback(\r\n        Output(figid, \"figure\"),\r\n        Input(buttton_id, \"n_clicks\")\r\n        )\r\n    def plot(val):\r\n        if val is None:\r\n            val = 0\r\n        figure = go.Figure(\r\n            data=[go.Bar(x=[1+val, 2, 3], y=[1, 3, 2])],\r\n            layout=go.Layout(\r\n                title=go.layout.Title(text=\"A Figure Specified By A Graph Object\")\r\n            )\r\n        )\r\n        return figure\r\n            \r\n\r\n    app.layout = html.Div(\r\n            id=\"main-title\",\r\n            children=[html.Button(id=buttton_id, children=\"click me\"), html.Div(children=\"0\", id=n_clicks_counter_id)] + \r\n            [\r\n                dcc.Graph(id=figid) for figid in figids\r\n             ]\r\n        )\r\n\r\nif __name__ == '__main__':\r\n    app.run_server()\r\n```\r\nInstead of running the script directly, start the server with gunicorn set to do semi-frequent worker reboots; e.g.  `gunicorn --bind 0.0.0.0:5000 --keep-alive 120 --max-requests 40 --preload --workers 2 --worker-class gthread --threads 2 --timeout 1000000 \"reproducing_module:server\"`. \r\n\r\nThen, click the button repeatedly; it should trigger an internal error fairly frequently. With dash 2.0 + orjson installed, it seems to first trigger a bad import of orjson:\r\n```\r\nException on \/_dash-update-component [POST]\r\nTraceback (most recent call last):\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/flask\/app.py\", line 2073, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/flask\/app.py\", line 1518, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/flask\/app.py\", line 1516, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/flask\/app.py\", line 1502, in dispatch_request\r\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/dash\/dash.py\", line 1336, in dispatch\r\n    response.set_data(func(*args, outputs_list=outputs_list))\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/dash\/_callback.py\", line 191, in add_context\r\n    jsonResponse = to_json(response)\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/dash\/_utils.py\", line 21, in to_json\r\n    return to_json_plotly(value)\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/plotly\/io\/_json.py\", line 127, in to_json_plotly\r\n    opts = orjson.OPT_SORT_KEYS | orjson.OPT_SERIALIZE_NUMPY\r\nAttributeError: partially initialized module 'orjson' has no attribute 'OPT_SORT_KEYS' (most likely due to a circular import)\r\n```\r\nif orjson is pre-emptively imported, it will instead break on a numpy import:\r\n```\r\nException on \/_dash-update-component [POST]\r\nTraceback (most recent call last):\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/flask\/app.py\", line 2073, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/flask\/app.py\", line 1518, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/flask\/app.py\", line 1516, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/flask\/app.py\", line 1502, in dispatch_request\r\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/dash\/dash.py\", line 1336, in dispatch\r\n    response.set_data(func(*args, outputs_list=outputs_list))\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/dash\/_callback.py\", line 151, in add_context\r\n    output_value = func(*func_args, **func_kwargs)  # %% callback invoked %%\r\n  File \"\/home\/mhwa\/local\/temp\/temp\/try_to_break.py\", line 36, in plot\r\n    data=[go.Bar(x=[1+val, 2, 3], y=[1, 3, 2])],\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/plotly\/graph_objs\/_bar.py\", line 3174, in __init__\r\n    self[\"x\"] = _v\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/plotly\/basedatatypes.py\", line 4819, in __setitem__\r\n    self._set_prop(prop, value)\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/plotly\/basedatatypes.py\", line 5158, in _set_prop\r\n    val = validator.validate_coerce(val)\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/_plotly_utils\/basevalidators.py\", line 400, in validate_coerce\r\n    elif is_homogeneous_array(v):\r\n  File \"\/home\/mhwa\/.cache\/pypoetry\/virtualenvs\/temp-BbzQGPLE-py3.8\/lib\/python3.8\/site-packages\/_plotly_utils\/basevalidators.py\", line 187, in is_homogeneous_array\r\n    and isinstance(v, np.ndarray)\r\nAttributeError: partially initialized module 'numpy' has no attribute 'ndarray' (most likely due to a circular import)\r\n```\r\nI tried this on a couple of machines and it seems to reproduce consistently."],"labels":["bug"]},{"title":"Make animation example more Python-idiomatic","body":"https:\/\/plotly.com\/python\/animations\/#using-a-slider-and-buttons is an example which hasn't really been restyled to use the object-oriented syntax of plotly.py 4+, it uses a lot of dicts and is very verbose.\r\n\r\n","comments":[],"labels":["documentation"]},{"title":"sunburst\/treemap: implement aggregation for continuous hover_data","body":"Following Sunburst example code: if we add \"gdpPercap\" into hover_data, the average 'gdpPercap' is missing for continent. Is there a way for Sunburst to show average 'gdpPercap' for each continent as well as for countries? \r\n```\r\nimport plotly.express as px \r\nimport numpy as np \r\ndf = px.data.gapminder().query(\"year == 2007\") \r\nfig = px.sunburst(df, path=['continent', 'country'], values='pop', \r\n                  color='lifeExp', hover_data=['iso_alpha','gdpPercap'], \r\n                  color_continuous_scale='RdBu', \r\n                  color_continuous_midpoint=np.average(df['lifeExp'], weights=df['pop'])) \r\nfig.show()\r\n```","comments":["Hi @pinglewang indeed we don't use an aggregation function for `hover_data` columns with continuous values, only for discrete values (with the simple heuristic that a parent takes the same name as children if they all share the same name).\r\n\r\nThe reason why we haven't implemented this feature yet is that several aggregation functions are possible (should it be sum, mean, count etc.) and that it's hard to decide for the user. What we could do is to have a dictionary of aggregation functions which could take either predefined names such as `sum`, `mean` etc. or accept user-provided functions. I'll therefore label your issue as a feature request. Of course we love community contributions ;-).","This would be great to have, can't do much with sum in my analysis, need a mean aggregation.","This feature would also be very useful for me (also for treemaps). Has there been any progress on this issue?"],"labels":["feature"]},{"title":"document the datasets","body":"Hello! I'm using plotly to teach [a Python class](https:\/\/github.com\/afeld\/python-public-policy), and was showing an example using `px.data.tips()`. A student asked where that data came from and what others they could access, and I didn't have a good answer. While examples use it, I'm not seeing any documentation of `px.data` itself on the Plotly site. [The module itself](https:\/\/github.com\/plotly\/plotly.py\/blob\/4ef310fb87d0b15992032fa21a315f630aca64de\/packages\/python\/plotly\/plotly\/data\/__init__.py) has docstrings for each, but that doesn't seem to be surfaced anywhere. Maybe should be part of [the datasets page](https:\/\/plotly.github.io\/datasets\/)?\r\n\r\nThanks!","comments":["Thank you for the report @afeld , we should indeed make sure the docstrings appear on https:\/\/plotly.com\/python-api-reference\/plotly.express.html#px. In fact the page already exists https:\/\/plotly.com\/python-api-reference\/generated\/plotly.data.html but we are not linking to it at the moment."],"labels":["sphinx"]},{"title":"feature request: z-ordering parameter for traces","body":"Hello,\r\n\r\nit would be very nice to have the possibilty to set the z-ordering priority of traces in plotly. I think the way matplotlib handles it is pretty handy: \r\n\r\n- default z-order value for a trace is 0;\r\n- if multiple trace have the same z-order value,  matplotlib decides the ordering of traces itself (random or whatever);\r\n- if a trace have a greater z-order than an other, it appears on top of it;\r\n- if a trace have a smaller z-order value than the other, it appears below;\r\n\r\nVeeeery useful. Right now I am strugling to have a marker to appear on top of a bunch of line plots and it is very annoying.","comments":["By the way, the hack I found to overcome this problem right now is to store the trace I want to add on TOP in a globalvariable (on can think of a list if one have multiple trace to add in a certain ordering) and then, just before rendering the figure, I had the trace to the figure. Then the last added trace appears on top of all other traces.","I am encountering the same issue. I would like to add several lines on top of scatter plot generated by `px.scatter()` .I tried to reorder the traces by doing `fig.data = fig.data[::-1]` but it only changes the order shown in legend, I still have not been able to add lines on top of points after trying almost all the tricks online, which is a bit frustrating..\r\n\r\nit would be super helpful if plotly can support something like `zorder`","Another use case for this feature is related to legend ordering. Currently, if you use the order of traces to specify the legend ordering, we cannot specify a z order independently. Since legend order is either None (i.e. insertion order) or alphabetical order, it is impossible to set an arbitrary order of legend items and at the same time set and arbitrary zorder of traces.","Has there been any movement to try to implement this?","A few notes on this:\r\n\r\n1. This would have to be implemented in Plotly.js rather than in Python\r\n2. Traces are currently drawn in batches by type, so scatter is always drawn on top of bar, etc, and this would be quite complicated to change, so the more straightforward option would be to control the other within types first","I should add that `fig.data = fig.data[::-1]` does work for me:\r\n\r\n```python\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\n\r\nfig = px.scatter(x=[1,2,3,4], y=[1,2,3,4], size=[1,2,3,4], color=[\"a\",\"a\",\"b\",\"b\"])\r\nfig.add_trace(go.Scatter(x=[1,2,3,4], y=[1,2,3,4], mode=\"lines\", line_color=\"black\"))\r\nfig.data = fig.data[::-1]\r\nfig.show()\r\n```\r\n\r\nas does reordering `fig.data` like this:\r\n\r\n```python\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\n\r\nfig = px.scatter(x=[1,2,3,4], y=[1,2,3,4], size=[1,2,3,4], color=[\"a\",\"a\",\"b\",\"b\"])\r\nfig.add_trace(go.Scatter(x=[1,2,3,4], y=[1,2,3,4], mode=\"lines\", line_color=\"black\"))\r\nfig.data = (fig.data[1],fig.data[2],fig.data[0])\r\nfig.show()\r\n```","Any news on this? This would be a great feature!","+1, would love to be able to draw scatter traces BEHIND candlesticks for example. When trying to use hover label to inspect individual candles, other lines on top prevent label from showing.","> \r\n> \r\n> I should add that `fig.data = fig.data[::-1]` does work for me:\r\n> \r\n> ```python\r\n> import plotly.express as px\r\n> import plotly.graph_objects as go\r\n> \r\n> fig = px.scatter(x=[1,2,3,4], y=[1,2,3,4], size=[1,2,3,4], color=[\"a\",\"a\",\"b\",\"b\"])\r\n> fig.add_trace(go.Scatter(x=[1,2,3,4], y=[1,2,3,4], mode=\"lines\", line_color=\"black\"))\r\n> fig.data = fig.data[::-1]\r\n> fig.show()\r\n> ```\r\n> \r\n> as does reordering `fig.data` like this:\r\n> \r\n> ```python\r\n> import plotly.express as px\r\n> import plotly.graph_objects as go\r\n> \r\n> fig = px.scatter(x=[1,2,3,4], y=[1,2,3,4], size=[1,2,3,4], color=[\"a\",\"a\",\"b\",\"b\"])\r\n> fig.add_trace(go.Scatter(x=[1,2,3,4], y=[1,2,3,4], mode=\"lines\", line_color=\"black\"))\r\n> fig.data = (fig.data[1],fig.data[2],fig.data[0])\r\n> fig.show()\r\n> ```\r\n\r\nSeems this trick doesn't work when there is too much data. Example:\r\n```python\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\nimport numpy as np\r\n\r\ndf = np.random.randint(0,100,size=(10000, 2))\r\ncolor_df = np.random.randint(0,4,size=(10000, 1)).T[0]\r\ncenters = np.random.randint(0,100,size=(7, 2))\r\n\r\nfig = px.scatter(x=df[:, 0], y=df[:, 1], color=color_df)\r\nfig.add_scatter(\r\n    x=centers[:, 0],\r\n    y=centers[:, 1],\r\n    marker=dict(size=20, color=\"LightSeaGreen\"),\r\n    name=\"Centers\",\r\n    mode=\"markers\",\r\n)\r\nfig.data = (fig.data[1], fig.data[0])\r\nfig.show()\r\n\r\n```\r\n\r\nI tried removing the optional parameters and use only X,Y but it keeps putting the centers below the data.\r\n\r\n","> Seems this trick doesn't work when there is too much data.\r\n\r\nI'm having a similar issue with a Candlestick trace always rendering in the BG, but in my case, I see the the legend re-ordered, but the graph maintains the old `z` ordering (candles are obscured by the scatter I'm trying to put in the BG).\r\n","> I should add that fig.data = fig.data[::-1] does work for me:\r\n\r\nThis does allow you to rearrange the order of the traces, but it rearranges it both in the legend and in the plot itself. The layering of the traces still seems to be inextricably linked to the order of the legend, unless there's something I'm missing. Often, I want less important traces to be at the bottom of the legend AND at the bottom layer on the plot. I don't see a way to do this currently. +1 for z-ordering parameter suggestion :)\r\n\r\n(BTW, I love plotly and use it all the time. Thanks for maintaining such an awesome library!)","@set92, @ptim just a quick FYI as I got a similar problem (with \"too much\" data) and got it working following your lead. The hint was in https:\/\/github.com\/plotly\/plotly.py\/issues\/2345#issuecomment-671461207, i.e. the ordering is done per type. In your example in https:\/\/github.com\/plotly\/plotly.py\/issues\/2345#issuecomment-778677610 the `px.scatter` is implicitly converted to a `Scattergl` but the `add_scatter` only adds a `Scatter` object. Now when the graph object for `add_trace` has the same resulting type (`Scattergl`), this works for me:\r\n\r\n```python\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\nimport numpy as np\r\n\r\ndf = np.random.randint(0, 100, size=(10000, 2))\r\ncolor_df = np.random.randint(0, 4, size=(10000, 1)).T[0]\r\ncenters = np.random.randint(0, 100, size=(7, 2))\r\n\r\nfig = px.scatter(x=df[:, 0], y=df[:, 1], color=color_df)\r\nfig.add_trace(\r\n    go.Scattergl(\r\n        x=centers[:, 0],\r\n        y=centers[:, 1],\r\n        marker=dict(size=20, color=\"LightSeaGreen\"),\r\n        name=\"Centers\",\r\n        mode=\"markers\",\r\n    )\r\n)\r\nfig.show()\r\n``` ","Please note that the idea of controlling the legend order is tracked in https:\/\/github.com\/plotly\/plotly.py\/issues\/2345, and is in principle distinct from the drawing order.","Update on legend ordering independently of trace ordering in `data`: this is now possible with the new `legendrank` attribute in v5.0 :) https:\/\/plotly.com\/python\/legend\/#legend-order","@nicolaskruchten  Thank you!\r\nWorks fine even with the subplots. \r\n\r\nIs it possible also to specify this for the shapes? I would like to keep sibling shapes in the same z-order.\r\n\r\nIs it affecting traces z-order or only legends order in the legends panel?","`legendrank` only impacts the legend, not the z-order, and shapes aren't linked to the legend, so this approach will not impact shapes, no.","@nicolaskruchten \r\nThank you, it's clear now, can it be also mentioned in the example documentation that it's about order, not z-order of the traces?\r\n\r\nBasically, my problem was that when you have subplots it's hard to control order of the legends sorted.\r\nEx: \r\n\r\n- SubPlot 1 [legend 14, legend 15]\r\n- SubPlot 2 [legend 1, legend 2, legend 3, legend 4]\r\n\r\nExpected legend:\r\n[legend 1, legend 2, legend 3, legend 4, legend 14, legend 15]\r\n\r\nBut in reality it was taken grouped from subplots.\r\n\r\nThis sorting problem is solved by legendrank.\r\n\r\nBut also sorting collerates with order for me:\r\nI am sorting legend by importance and it's expected that legends on top should be rendered top most (same is applicable for the related shapes, but less critical).\r\n\r\nActually to achieve the top most (legend on right) I have reverted order of the traces before appending them and than reverted back by the plotly property 'revert legends order'.\r\n\r\nNow I can append in any order to control z and rank legends to keep order.","Related to this, not having a z-order for a ridgeline plot caused me some trouble.  \r\n\r\nI wanted the bottom traces to be drawn on top.  But it seems that both the stacking order for violin plots and the (implicit) z-order are both bound to the `fig.data` ordering ... it isn't possible without some unintuitive hacking (see my example result at the bottom)\r\n\r\nSee my comment on the ridgeline plots issue: https:\/\/github.com\/plotly\/plotly_express\/issues\/25#issuecomment-886375427\r\n\r\nSee my post in the community forum: https:\/\/community.plotly.com\/t\/ridgeline-joy-plot-without-transparency\/55028?u=maegul\r\n\r\n![Screen Shot 2021-07-26 at 2 32 46 pm](https:\/\/user-images.githubusercontent.com\/13930443\/126935672-8bf350f4-0a1f-4726-a451-970214288351.png)\r\n","> \r\n> \r\n> `px.scatter` is implicitly converted to a `Scattergl` but the `add_scatter` only adds a `Scatter` object. Now when the graph object for `add_trace` has the same resulting type (`Scattergl`)\r\n\r\nAnd it works for me also.\r\n\r\nSo pleased that fleimgruber found and offered the work around that, after 'wasting' a day trying to find a solution, I signed up just to say 'Thank You, fleimgruber'.","For the `Scattergl` trick, I also had the problem that `px.scatter` makes either `Scattergl` or `Scatter ` traces (depending on the number of points to plot?). But one can force `webgl` in all cases with 'render_mode=\"webgl\"', so that the trick of re-ordering `fig.data` always works.\r\n\r\n   ","Would be a very nice and useful feature","Why is it still not implemented after 3 years?!","> Why is it still not implemented after 3 years?!\r\n\r\nNobody is being paid to do this. it's not happening unless you or someone else decides to donate their time.","Does someone fancy donating their time to this issue? - for the forwarding and advancement of humankind","Up! This feature would be ace to have!","Life changing feature, would love to see it implemented in the future!","push push ","Same here, this would be useful!","imperative feature. It should also be possible to alter the order in the rendered plot, by dragging and dropping the key items into the desired order.","[looks like someone is working on it ](https:\/\/github.com\/plotly\/plotly.js\/pull\/6918)"],"labels":["new feature","p1"]},{"title":"Buttons: update method not behaving as expected","body":"In the doc example https:\/\/plotly.com\/python\/custom-buttons\/#update-button, traces are not updated as planned when clicking on the buttons. Curiously, removing the layout part or switching to restyle method instead of update makes it work again.\r\n\r\nNext step: make a codepen to submit an issue in plotly.js.","comments":["Update: the problem only exists in Firefox, not in Chrome."],"labels":["bug"]},{"title":"Cannot specify figure width with Jupyterlab","body":"Jupyterlab always resizes the width of the figure to the width of the notebook. When executing the code below, one can see the figure generated with the correct figure for a very short time, and then it resizes to the full width. Is it related to recent changes to make plotly figures more reactive? \r\n```\r\nimport plotly.graph_objects as go\r\nfig = go.Figure(go.Scatter(y=[2, 3]))\r\nfig.update_layout(width=100)\r\nprint(fig)\r\nfig.show()\r\n```\r\n![image](https:\/\/user-images.githubusercontent.com\/263366\/77764630-3d2e9380-703d-11ea-9b8f-202d98dd35be.png)\r\n\r\n\r\nInside a fresh environment, with plotly \/ jupyterlab \/ widgets versions of our Readme.\r\n\r\nNo error messages in the console.","comments":["Could this be a consequence of \r\nhttps:\/\/github.com\/plotly\/plotly.js\/pull\/4392 ? @antoinerg ","@emmanuelle my guess is that it is not. I assume `responsive` is set to True by default? What happens if you specify both `width` AND `height`?\r\n\r\n#### Info about https:\/\/github.com\/plotly\/plotly.js\/pull\/4392\r\nPR https:\/\/github.com\/plotly\/plotly.js\/pull\/4392 is meant to resolve Promises returned by resize operations (ie. `Plots.resize`) that are dropped because a new request came in before the work could be done. Prior to this PR, those Promises would be pending forever. With the PR, those Promises will all resolve at the same time when the actual resize operation is performed\/finished.","thank you @antoinerg I will try to set both the width and height","Thanks for the great tip @antoinerg indeed if you specify both `width` and `height` it works. Does this give you a hint about what is happening?","Running into this problem also. Can confirm that setting both `width` and `height` makes the width be applied. \r\n\r\nWould be great to get a fix in for this. It took me a while to convince myself that there was some kind of a bug (as opposed to user error) and JupyterLab is increasingly becoming the default notebook experience."],"labels":["bug"]},{"title":"set_subplots","body":"I think it would be nice to be able to do something like `fig = go.Figure(); fig.set_subplots(...)` as an alternative to `make_subplots()` so as to save an import.\r\n\r\nIt would work maybe only once, if nothing is already there? Maybe later it can work if something is already there so long as there's no conflict or something.","comments":["probably `fig.set_subplots()` would call directly `make_subplots` and use the `data` and `layout` of the figure returned by `make_subplots`?","For people interested in contributing this feature, this would have to be implemented in this part https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/packages\/python\/plotly\/codegen\/figure.py#L19 of the library (the `codegen`).","> probably fig.set_subplots() would call directly make_subplots and use the data and layout of the figure returned by make_subplots?\r\n\r\nSomething like that I think... Maybe just try to merge the layout and abort if there is a conflict?"],"labels":["codegen","new feature"]},{"title":"px animations does not show correctly colors if all colors are not in the first frame","body":"For example\r\n\r\n```\r\nimport pandas as pd\r\nimport plotly.express as px\r\ndataVals = {\r\n    'Lat': [39.783730, 7, 39.783730, 39.783730, 20, -4.03, 39.783730, 36.82, 39.783730],\r\n    'Lon': [-100.445882, 66, -100.445882, -100.445882, 70, 5.33, -100.445882, -1.29, -100.445882],\r\n    'Value': [40, 12, 22, 3, 60, 23, 30, 100, 200],\r\n    'Year': ['1985', '1990', '1990', '1990', '1990', '1990', '2000', '2000', '2000'],\r\n    'Continent Color': [\"a\", \"b\", \"a\", \"a\", \"b\", \"c\", \"b\", \"d\", \"a\"]\r\n    }\r\ndata = pd.DataFrame(dataVals)\r\n\r\nfig = px.scatter_geo(data, lat=\"Lat\", lon=\"Lon\", size=\"Value\", color=\"Continent Color\",\r\n                     animation_frame=\"Year\", animation_group=\"Continent Color\",\r\n                     projection=\"natural earth\", size_max=200)\r\n\r\nfig.show()\r\n```\r\n\r\n(all points are displayed with the color of continent \"a\"). Reported by https:\/\/community.plot.ly\/t\/scatter-geo-only-shows-values-with-a-certain-color-if-i-have-multiple-years-as-the-same-year\/35976. Other functions such as `px.scatter` have the same problem.\r\n\r\nIf all colors are used for the first frame, the problem disappears.","comments":["I think I have a similar problem. I have a dataframe with elements with different states (susceptible, infected or recovered) at different time steps. Of course at the first time step there is no recovered, but only susceptible or infected, so plotly only computes the labels based on the first time step which yields susceptible, infected but not recovered. As a result recovered are never shown. ","I am experiencing the same issue when making a choropleth. However, the problem isn't completely solved when all colors are shown in the first frame. In the following minimal example, all colors are included in the first frame, the second frame should only have a single color. As shown in the attached image, also in the second frame two colors are shown.\r\n```\r\nimport pandas as pd\r\nimport plotly.express as px\r\n\r\ntest_gjson = {\r\n    \"type\": \"FeatureCollection\",\r\n    \"features\": [\r\n        {\r\n            \"type\": \"Feature\",\r\n            \"id\": \"N\",\r\n            \"geometry\": {\r\n                \"type\": \"Polygon\",\r\n                \"coordinates\": [[[-1, 0], [0, 1], [1, 0], [-1, 0]]]},\r\n            \"properties\": {}\r\n        },\r\n        {\r\n            \"type\": \"Feature\",\r\n            \"id\": \"S\",\r\n            \"geometry\": {\r\n                \"type\": \"Polygon\",\r\n                \"coordinates\": [[[-1, 0], [1, 0], [0, -1], [-1, 0]]]},\r\n            \"properties\": {}\r\n        }\r\n    ]\r\n}\r\n\r\ntest_df = pd.DataFrame.from_dict({\r\n    \"year\": [\"2000\", \"2000\", \"2010\", \"2010\"],\r\n    \"id\": [\"N\", \"S\", \"N\", \"S\"],\r\n    \"val\": [\"a\", \"b\", \"a\", \"a\"],\r\n})\r\n\r\npx.choropleth(\r\n    data_frame=test_df,\r\n    geojson=test_gjson,\r\n    color=\"val\",\r\n    locations=\"id\",\r\n    animation_frame=\"year\",\r\n).update_geos(fitbounds=\"locations\", visible=False)\r\n```\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/2463292\/84270285-bad94a00-ab2a-11ea-978c-9744b7332673.png)\r\n","I've just updated our documentation to highlight known limitations of our animation features. The specific one that's of note here is that animations are designed to work well when each row of input is present across all animation frames, and when categorical values mapped to symbol, color and facet are constant across frames. Animations may be misleading or inconsistent if these constraints are not met.","Are there any plans to improve this feature to make it work as expected?\r\nI use `animation_frame` a lot to group data that belongs together in conjunction with `color` and would love to be able to leverage the expected behavior.","There's definitely a lot we could do to improve this feature but there are no low-hanging fruits here, and we've got nothing planned on our roadmap for the next few months related to animations. We would happily accept pull requests into the Plotly.js library that does the actual animation, or [sponsorship](https:\/\/plotly.com\/consulting-and-oem\/) to be able to put these features on our roadmap.","I have the same problem but I do not know how to manage it. Is there any suggestion from your side?","same here!","Same problem here. In addition, I noticed that if a color is not present in a subsequent animation frame of x, the colors and xy values of the previous animation frame of x will be shown.","I have the same problem. \r\n\r\nI am trying to create an animation of depth-first search where nodes are in three different colors that represent if they are not discovered, discovered but not finished, or finished. In each frame the color of a single node changes as that node goes from being not discovered to being discovered but not finished or goes from being discovered but not finished to being finished. \r\n\r\nInitially all nodes are not discovered so they are a single color. But in the next frame, as the first nodes changes color from being not discovered to being discovered but not finished, the the node disappears and is not displayed. In fact, as each nodes is discovered, it disappears from the animation and is not displayed."," I've had the same issue when calling `choropleth_mapbox`. Certain polygon colors only appear after a certain amount of time elapses in the animation frame, which caused polygons whose color did not appear on the first timeframe to disappear entirely. My fix was to concatenate a couple of dummy rows to my dataframe with the colors that are not present on the first timeframe. For instance, all my data for 2021-06 had threshold_color red, which caused polygons with colors yellow and green to disappear, so I added the following lines to my dataframe:\r\n\r\n```\r\ngeodataframe = pd.concat([geodataframe, pd.DataFrame({'FIPSID': 'foo', 'date': '2021-06', 'count': 0, 'threshold_color': 'yellow'},index=[462])])\r\ngeodataframe = pd.concat([geodataframe, pd.DataFrame({'FIPSID': 'bar', 'date': '2021-06', 'count': 0, 'threshold_color': 'green'}, index=[463])])\r\n```","hello @emmanuelle .\r\nI found a workaround for this, because i am also having trouble with animation on px.\r\nI didn't modified the df, but i changed the approach of the color variable from categorical to numeric:\r\n- creating a new column, then \r\n- including color_continuous_scale and range_color variables\r\n\r\nHere is the modified code. Hopefully it will help others:\r\n\r\n```\r\ndef dummy_scatter():\r\n    dataVals = {\r\n        'Lat': [39.783730, 7, 39.783730, 39.783730, 20, -4.03, 39.783730, 36.82, 39.783730],\r\n        'Lon': [-100.445882, 66, -100.445882, -100.445882, 70, 5.33, -100.445882, -1.29, -100.445882],\r\n        'Value': [40, 12, 22, 3, 60, 23, 30, 100, 200],\r\n        'Year': ['1985', '1990', '1990', '1990', '1990', '1990', '2000', '2000', '2000'],\r\n        'Continent Color': [\"a\", \"b\", \"a\", \"a\", \"b\", \"c\", \"b\", \"d\", \"a\"]\r\n        }\r\n    data = pd.DataFrame(dataVals)\r\n    data['ContinentColorNumber']=data['Continent Color']\r\n    colordictContinent={'a':1,'b':2,'c':3,'d':4}\r\n    data.ContinentColorNumber.replace(colordictContinent,inplace=True)\r\n    \r\n    fig = px.scatter_geo(data, \r\n                         lat=\"Lat\", lon=\"Lon\", \r\n                         size=\"Value\", \r\n                         color=\"ContinentColorNumber\",\r\n                         color_continuous_scale='thermal',\r\n                         range_color=(data.ContinentColorNumber.min(),data.ContinentColorNumber.max()),\r\n                         projection=\"natural earth\", \r\n                         animation_frame=\"Year\",\r\n                         size_max=20)\r\n    \r\n    return fig\r\n\r\ndummy_scatter()\r\n```\r\n\r\n![Capture2](https:\/\/user-images.githubusercontent.com\/48687697\/201906847-3ea0677a-8c14-4553-8402-32132fa06043.PNG)\r\n","+1 encounter the same error when coloured attribute changes over time for the datasets \r\n\r\nEven when you have all colours present in the first animation frame, when navigating through subsequent frames of data, for some record it will stack two records of data from different animation frames. ","I am facing the same problem. I have a person that got covid in a specific timestamp. My goal is to plot a scatter plot showing to the evolution of the data. The problem is that, in the beginning the person does not have covid, and, at some specific time, he gets covid. But only the label \"nocovid\" is being displayed in the animation, and also its data.\r\n\r\n\r\n","+1 this bug also likely contributes to an issue I'm seeing, where `animation_group` is not respected when the colored attribute changes over time within the same `animation_group`.\r\n\r\nIn this case, the issue presents itself as points fading in and out of existence between frames, rather than moving around on the plot as expected.\r\n\r\n```\r\nimport plotly.express as px\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\npoints = 100\r\nframes = 40\r\ncolors=5\r\n\r\ndf = pd.DataFrame([dict(\r\n    x=np.random.rand(), y=np.random.rand(),color=str(np.random.randint(colors)),\r\n    animation_group=str(i), animation_frame=f\r\n) for i in range(points) for f in range(frames)])\r\nfig = px.scatter(df, x=\"x\", y=\"y\", animation_frame=\"animation_frame\", animation_group=\"animation_group\",\r\n           color=\"color\", range_x=[0,1], range_y=[0,1])\r\nfig.show()\r\n```\r\n\r\n![plotly_animation_group_bug](https:\/\/github.com\/plotly\/plotly.py\/assets\/37509266\/a63726e3-2c32-4f16-9a29-64c12a9cfede)\r\n","Facing a similar issue : \r\nSo far this is what I understand . Everything here is after ensuring there are the same number of datapoints in the same order of hover_name attribute. Also I am having both color and symbol fields as categorical. The color field remains same across all the frames, but the symbol field can change occasionally.\r\n\r\n1. First frame needs to have all combination of the legend (color and symbol cols) - if not, right from first frame there are additional points of the previous tick . I am able to work around by creating the first tick manually with a bunch of random values but different combinations of legends .\r\n\r\n2. Whenever there is change in state of a legend item for the same row item for symbol between one tick to next, the old tick remains on the screen for the next few frames and then those old ticks disappear (not sure on what triggers that ) . Interestingly , this doesn't happen on the first instance of the symbol change (eg. alive to dead, but happens on the frame when it changes again to alive) \r\n\r\n3. If I add animation_group for the rows by an identifier, say hover_name value - there is no improvement. The moment symbol changes the second time, the existing tick remains as an unwanted artifact. \r\n\r\nIs there any way to force a redraw? "],"labels":["bug"]},{"title":"external Orca server: pio.orca.status should have a more helpful output","body":"As reported from user @hiramf (https:\/\/github.com\/plotly\/orca\/issues\/279#issuecomment-5897900690), when using an external orca server, the output of `pio.orca.status` is not very user-friendly:\r\n\r\n```ipython\r\n>>> pio.orca.status\r\norca status\r\n-----------\r\n    state: unvalidated\r\n    executable: None\r\n    version: None\r\n    port: None\r\n    pid: None\r\n    command: None\r\n```\r\nIt should at least display the URL of the server and ideally ping it to tell the user whether it's working\/accessible.","comments":[],"labels":["documentation"]},{"title":"FigureWidget in Google Colab","body":"I just tried google colab, and using FigureWidget, it doesn\u00b4t seem to work, i.e nothing is displayed: \r\n![image](https:\/\/user-images.githubusercontent.com\/31547476\/74595675-c61cdd00-5044-11ea-967b-7c05357a6d7f.png)\r\n\r\nand the browser console shows an error\r\n![image](https:\/\/user-images.githubusercontent.com\/31547476\/74595528-c3b98380-5042-11ea-9a38-bd8971509da5.png)\r\n\r\ncan this be fixed (by installing something that\u00b4s missing from the colab defaults)?\r\n","comments":["I've got the same problem!\r\n\r\n![Screenshot_20200406_colab_plotly_issue](https:\/\/user-images.githubusercontent.com\/894111\/78502967-17289200-77a7-11ea-93bb-1f91a191bfd3.png)\r\n","I can reproduce. @jonmmease is the plotlywidget supposed to work in Colab? For a while Colab did not support `ipywidgets` since they had their own widgets but it seems to be working now...","Last I checked, Colab supported the built-in ipywidgets but not custom widgets. Though that was a while back.","ipywidgets ...buttons and slider work; I can create buttons with actions from a list. However, go.FigureWidget() seems like looping","Hello, \r\nI was trying to reproduce the example from [https:\/\/plotly.com\/python\/figurewidget-app\/](https:\/\/plotly.com\/python\/figurewidget-app\/) in Google Colab and although a widget like FloatRangeSlider works on its own, I could not make the example to work.\r\n\r\n<img width=\"671\" alt=\"Capture d\u2019e\u0301cran 2020-05-11 a\u0300 17 03 28\" src=\"https:\/\/user-images.githubusercontent.com\/22441447\/81577138-6450e280-93a9-11ea-800a-0a69a7109e62.png\">\r\n\r\nNothing is shown. Any idea why that may be ?\r\n`g.show()` displays the default graph. \r\n(Plotly: 4.4.1; ipywidgets: 7.5.1)\r\n\r\nRegards,\r\nAxel\r\n","@abisi this would work now. Ipywidgets is supported on colab now. ","@ucalyptus I tried and it still displays nothing. Have you tried?","Seems like it still doesn't work.","Hi everyone, \r\n@FlorentF9  @alexgorbachev  I tested it a few moments ago an still does not working. Despite it seems that runs correctly, this example does not show anything on the screen.","I tried it and it still does not work. I have no idea why since plotly.offline.iplot or .plot() work fine."],"labels":["bug"]},{"title":"customize  modebar ","body":"More explanation needs to be added to https:\/\/plot.ly\/python\/configuration-options\/#remove-modebar-buttons to show: \r\n- how to add buttons to modebar\r\n- buttons' name:\r\n2D:  \"zoom2d\", \"pan2d\", \"select2d\", \"lasso2d\", \"zoomIn2d\", \"zoomOut2d\", \"autoScale2d\", \"resetScale2d\",\r\nCartesian: \"hoverClosestCartesian\", \"hoverCompareCartesian\",\r\n3D: \"zoom3d\", \"pan3d\", \"resetCameraDefault3d\", \"resetCameraLastSave3d\", \"hoverClosest3d\", \"orbitRotation\", \"tableRotation\",\r\nGEO: \"zoomInGeo\", \"zoomOutGeo\", \"resetGeo\", \"hoverClosestGeo\", \r\nOthers: \"toImage\",  \"sendDataToCloud\",  \"hoverClosestGl2d\",  \"hoverClosestPie\",  \"toggleHover\",  \"resetViews\",  \"toggleSpikelines\",  \u201cresetViewMapbox\"\r\n- how to change their order ","comments":["Is there currently a way to add custom modebar buttons in python? If not, will this be a feature added in the future?","I am also interested to know if there is a way to add custom modebar buttons in python. I have tried using the js way, even by using a custom js code as a string in 'click', but to no avail.\r\nIf not, is there a workaround? Ideally It should point to a python function, but I would content if I could add a js code somewhere.","There is no way to add new buttons with custom Javascript to the modebar from Python at the moment, no.","@miliante I tried using Plotly with Python for a while, but ultimately switched over to Plotly JS. The JS version has more features and functionality in general. But if you have to use the python version then, like Nicolas mentioned, there isn't currently a way to do this. I'd recommend switching over to Plotly JS if possible.\r\nThere might be some way to interact with HTML buttons external to the plotly figure as a workaround, but that wouldn't yield the desired modebar functionality.","Thank you All. I figured as much. I tried everywhere to no avail. \r\n\r\n@ad4437 Indeed it is much more feature rich, but for the moment I am stuck with Python. My JS knowledge is minimum to basic :( The outside buttons do work well and I managed that as a workaround as you mentioned, but it is not pretty.","I've been chasing this as well. As far as I can tell, the main limitation is that in generating the html string plotly.py dumps the config dictionary to json, which of course puts `\" \"` around all the fields. The issue is that plotly.js then interprets the `\"click\": \"javascript snippet\"` as a string instead of javascript. manually editing the html string to remove the double quotes works, at least in chrome. \r\n\r\nI dont know much about javascript and especially plotly.js, but is it possible to add something there to interpret a string of .js as .js in the `\"click\":` argument for the custom button generation? i will post a question in the plotly.js repository as well. ","@CmpCtrl you're right about the mechanism here: Python strings are recorded as strings in the resulting output and Plotly.js doesn't (and will never) interpret strings as raw executable code. See below for some caveats.\r\n\r\nIf you could detail a bit more what you're trying to do exactly (what JS code do you want to run?) I might be able to suggest more ideas for you.\r\n\r\nThe caveats: there are some places in Plotly.js where Python can specify which JS code runs, notably in the way we handle `layout.buttons`. The way these work is that in Python you can specify an object which defines the name of the Plotly.js function to call, and its static arguments. This lets you build stuff like [play\/pause buttons](https:\/\/plotly.com\/python\/animations\/#defining-button-arguments) which call `Plotly.animate()` etc. We could probably make modebar buttons work like this, but it's not clear if that would meet your needs.\r\n\r\ncc @alexcjohnson ","@nicolaskruchten Thanks for the follow up. \r\n\r\nFor my specific use case I am adding a modebar button to copy an image of the plot to the clipboard. I prefer the modebar buttons since they're nice and tidy. The config dictionary i'm passing into the plotly api is this (in json):\r\n```\r\n{\r\n \"modeBarButtonsToAdd\": [\r\n  {\r\n   \"name\": \"Copy to Clipboard\",\r\n   \"icon\": {\r\n    \"path\": \"M102.17,29.66A3,3,0,0,0,100,26.79L73.62,1.1A3,3,0,0,0,71.31,0h-46a5.36,5.36,0,0,0-5.36,5.36V20.41H5.36A5.36,5.36,0,0,0,0,25.77v91.75a5.36,5.36,0,0,0,5.36,5.36H76.9a5.36,5.36,0,0,0,5.33-5.36v-15H96.82a5.36,5.36,0,0,0,5.33-5.36q0-33.73,0-67.45ZM25.91,20.41V6h42.4V30.24a3,3,0,0,0,3,3H96.18q0,31.62,0,63.24h-14l0-46.42a3,3,0,0,0-2.17-2.87L53.69,21.51a2.93,2.93,0,0,0-2.3-1.1ZM54.37,30.89,72.28,47.67H54.37V30.89ZM6,116.89V26.37h42.4V50.65a3,3,0,0,0,3,3H76.26q0,31.64,0,63.24ZM17.33,69.68a2.12,2.12,0,0,1,1.59-.74H54.07a2.14,2.14,0,0,1,1.6.73,2.54,2.54,0,0,1,.63,1.7,2.57,2.57,0,0,1-.64,1.7,2.16,2.16,0,0,1-1.59.74H18.92a2.15,2.15,0,0,1-1.6-.73,2.59,2.59,0,0,1,0-3.4Zm0,28.94a2.1,2.1,0,0,1,1.58-.74H63.87a2.12,2.12,0,0,1,1.59.74,2.57,2.57,0,0,1,.64,1.7,2.54,2.54,0,0,1-.63,1.7,2.14,2.14,0,0,1-1.6.73H18.94a2.13,2.13,0,0,1-1.59-.73,2.56,2.56,0,0,1,0-3.4ZM63.87,83.41a2.12,2.12,0,0,1,1.59.74,2.59,2.59,0,0,1,0,3.4,2.13,2.13,0,0,1-1.6.72H18.94a2.12,2.12,0,0,1-1.59-.72,2.55,2.55,0,0,1-.64-1.71,2.5,2.5,0,0,1,.65-1.69,2.1,2.1,0,0,1,1.58-.74ZM17.33,55.2a2.15,2.15,0,0,1,1.59-.73H39.71a2.13,2.13,0,0,1,1.6.72,2.61,2.61,0,0,1,0,3.41,2.15,2.15,0,0,1-1.59.73H18.92a2.14,2.14,0,0,1-1.6-.72,2.61,2.61,0,0,1,0-3.41Zm0-14.47A2.13,2.13,0,0,1,18.94,40H30.37a2.12,2.12,0,0,1,1.59.72,2.61,2.61,0,0,1,0,3.41,2.13,2.13,0,0,1-1.58.73H18.94a2.16,2.16,0,0,1-1.59-.72,2.57,2.57,0,0,1-.64-1.71,2.54,2.54,0,0,1,.65-1.7ZM74.3,10.48,92.21,27.26H74.3V10.48Z\",\r\n    \"transform\": \"scale(0.12)\"\r\n   },\r\n   \"click\": \"function (gd) {Plotly.toImage(gd, { format: 'png', width: 2100, height: 900 }).then(async function (url) {try {const data = await fetch(url);const blob = await data.blob();await navigator.clipboard.write([new ClipboardItem({[blob.type]: blob})]);console.log('Image copied.');} catch (err) {console.error(err.name, err.message);}});}\"\r\n  }\r\n ]\r\n}\r\n```\r\nI think that passing a function name and argument would be a good solution if we could then also get the script into the html with the `post_script` argument in `pio.to_html()` for instance. That would need some good documentation tho since its not real straightforward. \r\n\r\nFor now, my workaround is to use `pio.to_html()` to generate the html string with a place holder in the `click` field, which i then find and replace with the script above with no double quotes. Then save the string to a file, or serve it to the browser or whatever. This works fine for me, but it took a bit of work to figure out how to make it work, so its probably not as useful for new users, and i think that custom modebar buttons are a cool feature.\r\n\r\nI realize there are security concerns with my initial suggestion in the plotly.js post as @alexcjohnson pointed out. Are there similar concerns here? In other words, is it necessary to generate to spec json, or can it be relaxed to include js? It seems like that isn't a requirement since the `post_script` argument already allows for it, and since its so easy to manipulate the html string after its generated (which is what lead me to ignore the other use cases of plotly.js in my first suggestion). My first thought here was to make a class for a modebar button that would serialize differently to not include double quotes on the `click` field (which i understand is not to the json spec). I wasn't clever enough to make that work though. ","Thanks for the explanation, that's helpful. Today your current post-processing approach would be my suggestion, so looks like you've at least got *some* path forward, awkward as it is :)\r\n\r\nOne idea that comes to mind which might cleanly address this situation and provide a path forward for Dash users as well @alexcjohnson @chriddyp is to define a new event that fires when modebar buttons are clicked, which receives as a parameter the name of the button. Then generic handlers could be added in e.g. Dash as a prop, in `post_script` in the `.to_html()` context and in the FigureWidget and everywhere else folks use Plotly figures, so implement totally custom modebar behaviours."],"labels":["feature"]},{"title":"create_ternary_contour get wrong if all values are same","body":"Example (enthalpy is set to 1 for all points)\r\n```\r\nimport plotly.figure_factory as ff\r\nimport numpy as np\r\nAl = np.array([0. , 0. , 0., 0., 1.\/3, 1.\/3, 1.\/3, 2.\/3, 2.\/3, 1.])\r\nCu = np.array([0., 1.\/3, 2.\/3, 1., 0., 1.\/3, 2.\/3, 0., 1.\/3, 0.])\r\nY = 1 - Al - Cu\r\nenthalpy = np.ones(Al.shape) # set enthalpy to 1 for all points\r\nfig = ff.create_ternary_contour(np.array([Al, Y, Cu]), enthalpy,\r\n                                pole_labels=['Al', 'Y', 'Cu'],\r\n                                interp_mode='cartesian')\r\nfig.show()\r\n```\r\n\r\nResult:\r\n![newplot](https:\/\/user-images.githubusercontent.com\/3460059\/72672371-2b100200-3a9c-11ea-8f5e-5e29d68cb86c.png)\r\n\r\nNote that 2d-contour works well (i.e. filled by a single color) for such a setting.","comments":["Thank you for the bug report @y-uti. It's a corner case but it really does not look good. What would you expect in such a case? A completely flat area with a single color? One problem is that the concept of contours is hard to defined for a completely uniform field...","Hi @emmanuelle,\r\n\r\n> A completely flat area with a single color?\r\n\r\nYes. I think it is a good choice for Plotly, because 2d contour does so.\r\n```\r\nimport plotly.graph_objects as go\r\n\r\nfig = go.Figure(data=go.Contour(z=[[1] * 10] * 10))\r\nfig.show()\r\n```\r\n![newplot](https:\/\/user-images.githubusercontent.com\/3460059\/72855337-74f62380-3cfa-11ea-9637-7ff7efeb1d98.png)\r\n"],"labels":["bug"]},{"title":"Include range in the custom xbins examples?","body":"as per confusion encountered here: https:\/\/github.com\/plotly\/dash\/issues\/1090#issuecomment-575251831","comments":[],"labels":["documentation"]},{"title":"Bug in streamline?","body":"create_streamline breaks with the test example below. This seems to fix it:\r\n\r\n```\r\n- if ((x[index + 1] - x[index]) - (x[1] - x[0])) > 0.0001:\r\n+ if any(((x[index + 1] - x[index]) - (x[1] - x[0])) > 0.0001):\r\n```\r\n\r\n```\r\nimport plotly.figure_factory as ff\r\nimport numpy as np\r\n\r\nx,y = np.meshgrid(np.arange(0, 2, .2), np.arange(0, 2, .2))\r\nu = np.cos(x)*y\r\nv = np.sin(x)*y\r\n\r\nfig = ff.create_streamline(x, y, u, v, arrow_scale=.1)\r\n\r\n~\/.virtualenvs\/onbeach\/local\/lib\/python3.7\/site-packages\/plotly\/figure_factory\/_streamline.py in create_streamline(x, y, u, v, density, angle, arrow_scale, **kwargs)\r\n    112     utils.validate_equal_length(x, y)\r\n    113     utils.validate_equal_length(u, v)\r\n--> 114     validate_streamline(x, y)\r\n    115     utils.validate_positive_scalars(density=density, arrow_scale=arrow_scale)\r\n    116 \r\n\r\n~\/.virtualenvs\/onbeach\/local\/lib\/python3.7\/site-packages\/plotly\/figure_factory\/_streamline.py in validate_streamline(x, y)\r\n     26         raise ImportError(\"FigureFactory.create_streamline requires numpy\")\r\n     27     for index in range(len(x) - 1):\r\n---> 28         if ((x[index + 1] - x[index]) - (x[1] - x[0])) > 0.0001:\r\n     29             raise exceptions.PlotlyError(\r\n     30                 \"x must be a 1 dimensional, \" \"evenly spaced array\"\r\n\r\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n```\r\n","comments":["Thank you @rafa-guedes for the bug report. I tried the fix you proposed and then I got a ValueError later in the code (see below). Were you able to make the example execute correctly with just the fix above? Thanks again.\r\n```\r\nimport plotly.figure_factory as ff\r\nimport numpy as np\r\n\r\nx, y = np.meshgrid(np.arange(0, 2, .2), np.arange(0, 2, .2))\r\nu = np.cos(x)*y\r\nv = np.sin(x)*y\r\n\r\nfig = ff.create_streamline(x, y, u, v)\r\nfig.show()\r\n```\r\nError after adding the `any`\r\n```\r\n------------------------------------------------------\r\nValueError           Traceback (most recent call last)\r\n<ipython-input-1-4ea6a12e8cbb> in <module>\r\n      6 v = np.sin(x)*y\r\n      7 \r\n----> 8 fig = ff.create_streamline(x, y, u, v)\r\n      9 fig.show()\r\n\r\n~\/code\/plotly.py\/packages\/python\/plotly\/plotly\/figure_factory\/_streamline.py in create_streamline(x, y, u, v, density, angle, arrow_scale, **kwargs)\r\n    116 \r\n    117     streamline_x, streamline_y = _Streamline(\r\n--> 118         x, y, u, v, density, angle, arrow_scale\r\n    119     ).sum_streamlines()\r\n    120     arrow_x, arrow_y = _Streamline(\r\n\r\n~\/code\/plotly.py\/packages\/python\/plotly\/plotly\/figure_factory\/_streamline.py in __init__(self, x, y, u, v, density, angle, arrow_scale, **kwargs)\r\n    166         self.st_x = []\r\n    167         self.st_y = []\r\n--> 168         self.get_streamlines()\r\n    169         streamline_x, streamline_y = self.sum_streamlines()\r\n    170         arrows_x, arrows_y = self.get_streamline_arrows()\r\n\r\n~\/code\/plotly.py\/packages\/python\/plotly\/plotly\/figure_factory\/_streamline.py in get_streamlines(self)\r\n    297         for indent in range(self.density \/\/ 2):\r\n    298             for xi in range(self.density - 2 * indent):\r\n--> 299                 self.traj(xi + indent, indent)\r\n    300                 self.traj(xi + indent, self.density - 1 - indent)\r\n    301                 self.traj(indent, xi + indent)\r\n\r\n~\/code\/plotly.py\/packages\/python\/plotly\/plotly\/figure_factory\/_streamline.py in traj(self, xb, yb)\r\n    287             return\r\n    288         if self.blank[yb, xb] == 0:\r\n--> 289             t = self.rk4_integrate(xb * self.spacing_x, yb * self.spacing_y)\r\n    290             if t is not None:\r\n    291                 self.trajectories.append(t)\r\n\r\n~\/code\/plotly.py\/packages\/python\/plotly\/plotly\/figure_factory\/_streamline.py in rk4_integrate(self, x0, y0)\r\n    257             return stotal, xf_traj, yf_traj\r\n    258 \r\n--> 259         sf, xf_traj, yf_traj = rk4(x0, y0, f)\r\n    260         sb, xb_traj, yb_traj = rk4(x0, y0, g)\r\n    261         stotal = sf + sb\r\n\r\n~\/code\/plotly.py\/packages\/python\/plotly\/plotly\/figure_factory\/_streamline.py in rk4(x0, y0, f)\r\n    233                 try:\r\n    234                     k1x, k1y = f(xi, yi)\r\n--> 235                     k2x, k2y = f(xi + 0.5 * ds * k1x, yi + 0.5 * ds * k1y)\r\n    236                     k3x, k3y = f(xi + 0.5 * ds * k2x, yi + 0.5 * ds * k2y)\r\n    237                     k4x, k4y = f(xi + ds * k3x, yi + ds * k3y)\r\n\r\n~\/code\/plotly.py\/packages\/python\/plotly\/plotly\/figure_factory\/_streamline.py in f(xi, yi)\r\n    205 \r\n    206         def f(xi, yi):\r\n--> 207             dt_ds = 1.0 \/ self.value_at(self.speed, xi, yi)\r\n    208             ui = self.value_at(self.u, xi, yi)\r\n    209             vi = self.value_at(self.v, xi, yi)\r\n\r\n~\/code\/plotly.py\/packages\/python\/plotly\/plotly\/figure_factory\/_streamline.py in value_at(self, a, xi, yi)\r\n    184             self.y = yi.astype(np.int)\r\n    185         else:\r\n--> 186             self.val_x = np.int(xi)\r\n    187             self.val_y = np.int(yi)\r\n    188         a00 = a[self.val_y, self.val_x]\r\n\r\nValueError: cannot convert float NaN to integer\r\n```","@emmanuelle no sorry, I didn't try running the full code with that fix applied..","ok so we have more work to do here, thanks for bringing this to our attention,","I still have the same error. \r\nI am using plotly python '4.7.1' on ubuntu 20.04 machine.\r\n\r\n```python\r\nfig = create_streamline(r, v, dr, dv)\r\n```\r\nshape each input is e.g 20 by 20\r\n\r\n```sh\r\nfig = create_streamline(r, v, dr, dv)\r\n  File \"\/home\/ziaee\/git\/Dashboards\/dash_ve\/lib\/python3.8\/site-packages\/plotly\/figure_factory\/_streamline.py\", line 114, in create_streamline\r\n    validate_streamline(x, y)\r\n  File \"\/home\/ziaee\/git\/Dashboards\/dash_ve\/lib\/python3.8\/site-packages\/plotly\/figure_factory\/_streamline.py\", line 28, in validate_streamline\r\n    if ((x[index + 1] - x[index]) - (x[1] - x[0])) > 0.0001:\r\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n```\r\n\r\nany solution?\r\n","Any updates on the solution to this? I'm running plotly python '5.11.0' on Windows 10 machine.","Unfortunately, we're limited with resources currently. I'd encourage the community to try to fix the bug and write a test if possible. We would make sure to review that PR. "],"labels":["bug","figure_factory"]},{"title":"Sunburst should take grandparents info","body":"Sunburst should take grandparents info (as many as one want), to avoid identical ids passed to Sunburst, especially when working on categorical data.\r\n\r\nFor example, taking the sunburst plot example from the website:\r\n\r\n![Screenshot from 2019-12-04 13-40-01](https:\/\/user-images.githubusercontent.com\/35784524\/70184417-a78d8380-169c-11ea-8139-69658f8b30e3.png)\r\n\r\nIf we would like to add gender on the second circle, and some of the salesperson initials would have been the same, some of the sunburst ids would also be the same, and it would be possible to plot.\r\n\r\nThis problem happens every time you have categorial data.\r\n\r\nThank you,\r\n","comments":["Thank you for noticing this @rotemgb. I just hit exactly the same bug :-). We will update the doc.","@emmanuelle @rotemgb  I am having this issue can you please resolve this , the issue is similar to this one..\r\nhttps:\/\/github.com\/plotly\/plotly.py\/issues\/2285","As far as I know, this issue hasn't been resolved. I don't think @emmanuelle completely understood the issue. The problem is not with documentation, but the class of sunburst need to be modified to give flexibility when working on categorical data. \r\n\r\n@tayyabvohra  As for a work around the issue, I created a small loop that add to each category a space in the beginning or the end. for example, the string 'coffee' and 'coffee ' (with a space in the end) are not the same. That way sunburst \"think\" that they are different and manage to link each one of them to different children. This solution works well with small number of categories, but when you have too many, the plot will be a little messy, as the names of the labels can't be modified (as far as I know), and you will have the spaces you added in the plot.\r\n\r\nI think 2 things should be added to sunburst:\r\n**Give the users the flexibility to link not just the parents, but also the grandparents. That will solve the categorical data with sunburst issue.\r\n**Add the flexibility to change the labels on the plot. meaning, sunburst shouldn't take automatically the name of the parents and children as the labels, and there should be a way for us to modify it.\r\n\r\n@tayyabvohra hope that helps :) \r\n","@rotemgb can you share your code here for this problem..!","So to be clear: `id` must be unique per segment and must have a unique parent. The calling code probably should indeed prepend the `id`s of the parents to the `id`s of the children, recursively, but this is not something that can be done internally using the `id`\/`parent`\/`label` API.\r\n\r\nThat said, we added the `path` API to `px.sunburst` to handle doing this automatically for tabular data. Check it out here: https:\/\/plot.ly\/python\/sunburst-charts\/#sunburst-of-a-rectangular-dataframe-with-plotlyexpress\r\n\r\n@emmanuelle do you think you could you see if you can make the docs clearer\/more explicit about how unique IDs must be? ","Re the two proposed solutions:\r\n\r\n> Give the users the flexibility to link not just the parents, but also the grandparents. That will solve the categorical data with sunburst issue.\r\n\r\nThis is already possibly from outside Plotly: IDs should be prepended with parent information, recursively, and we will make this clearer in examples like https:\/\/plot.ly\/python\/sunburst-charts\/#sunburst-with-repeated-labels\r\n\r\n> Add the flexibility to change the labels on the plot. meaning, sunburst shouldn't take automatically the name of the parents and children as the labels, and there should be a way for us to modify it.\r\n\r\nThis is already not the case: `id` and `label` are different fields per node. `id` defaults to `label` if not provided but both can be provided so a node can have a `label`=`\"Female\"` for display, a `parent`=`\"a-b\"` and an `id`=`\"a-b-c\"`. Another node can then be a child of this one with another label (even if that label is the same as some other sector :) and a `parent`=`\"a-b-c\"` and an `id`=`\"a-b-c-d\"`.\r\n\r\nWe should make this distinction between `id` and `label` clearer in the docs as well (and repeat this clarification in the treemap docs).\r\n\r\nThanks for the feedback :)","Can you provide any code for this problem , I cannot find any solution related to the problem on the OP questions chart, although this problem can be solved with different type of sunburst chart provided in the documentation @nicolaskruchten ","@tayyabvohra you can find my code with the work-around the problem in here [https:\/\/www.kaggle.com\/rotemgb\/money-talks-gender-disparities-in-tech](url) , but after seeing this solution by @nicolaskruchten  using path, I think would solve your problem.\r\n\r\n> That said, we added the path API to px.sunburst to handle doing this automatically for tabular data. Check it out here: https:\/\/plot.ly\/python\/sunburst-charts\/#sunburst-of-a-rectangular-dataframe-with-plotlyexpress\r\n\r\nI don't have a code for that, because I haven't used it (I'm not sure this option existed when I used it..), but follow the code examples in this documentation.  ","@nicolaskruchten you all did a great adding the path functionality!  That solves all problems with categorical data.\r\n\r\nAbout the documentation, maybe adding an example on adding labels to your demo function `def build_hierarchical_dataframe` in [https:\/\/plot.ly\/python\/sunburst-charts\/#sunburst-of-a-rectangular-dataframe-with-plotlyexpress](url) might help. \r\n\r\nThank you!"],"labels":["documentation"]},{"title":"Offsetgroup alignmentgroup","body":"","comments":["@Mahdis-z can you incorporate Joe's feedback and rebase onto doc-prod please?","Can you rebase onto doc-prod please?"],"labels":["documentation"]},{"title":"Add continuous color scale to strip, box, and violin plots","body":"Currently, strip\/box\/violin plots only work with categorical\/discrete colormaps. This is sufficient for the violins and boxes but for the points that can be included in all three plots, it would be useful to color by a continuous feature and to add a colorbar to the plot. I looked around a bit and it seems like the go.Box constructor needs to have the coloraxis attrbute added to it (and I suspect something would need to be added to avoid coloring the boxes\/violins in the same colors as the points, since they are colored the same for categorical variables).\r\n\r\nThe example below illustrates the issue by trying to color by the sepal_width variable:\r\n\r\n```python\r\nimport plotly.express as px\r\n\r\niris = px.data.iris()\r\npx.strip(iris, 'species', 'sepal_length', 'sepal_width', stripmode='overlay')\r\n```\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/4560057\/69958881-07055b00-1506-11ea-8f14-6bec363c522e.png)\r\n\r\nThe resulting plot is not meaningful since it colors a continuous variable with a discrete colormap.\r\n\r\nSo far, I have not found a prettier workaround that this (which is imperfect since it uses the legend instead of a colorbar):\r\n\r\n```python\r\nimport matplotlib as mpl\r\n\r\nsw = iris['sepal_width'].sort_values()\r\nsw_01 = (sw - sw.min()) \/ (sw.max() - sw.min())\r\nsw_colors = {n: mpl.colors.rgb2hex(c) for n, c in zip(sw, mpl.cm.viridis(sw_01))}\r\npx.strip(iris, 'species', 'sepal_length', 'sepal_width',\r\n         stripmode='overlay', category_orders={'sepal_width': sw.to_list()[::-1]},\r\n         color_discrete_map=sw_colors)\r\n```\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/4560057\/69958970-4cc22380-1506-11ea-9654-a30e77e0540b.png)","comments":["Hi Joel!\r\n\r\nWhat you're trying to do makes sense in principle, although unfortunately the changes required to implement it all sit at the Javascript level, in plotly.js. `strip` is built on top of `box` at the moment, so basically we would need to add the ability for the *points* in `box`\/`violin` traces to be coloured differently from the boxes\/violins themselves. If that were done, then we would get the `coloraxis` attribute in the `graph_objects` automatically (via code-generation) and we could then figure out how to bolt this onto PX.\r\n\r\nAnother approach would be to add `jitter` options to `scatter` traces, and we could then build something like `strip` on top of `scatter` instead of on top of `box`. Either way that would require changes in the JS layer again.","PS: your workaround is pretty good actually! If you bin the continuous variable in Python and then color by that you can get pretty close!","Thanks for the reply @nicolaskruchten ! I suspected that this would have to be added in the js layer, but I wasn't sure how to provide example code in js so I decided to open an issue here to start. I think this would be great functionality to add to plotly, should I open a separate issue in plotly.js and reference this one?\r\n\r\nTo me, the first solution you suggested above would be preferable since it is then possible to also color the points when used together with violin or box. ","Any follow-ups about this issue? It seems like this continuous color scale issue for box plot is not resolved. ","Correct, we have not implemented this feature and no one is working on it at the moment.","+1 on adding this functionality. \r\n\r\nCurious if anyone has new\/different work around to accomplish dots with a continuous color scale.","+1","Yep this would be extremely useful!","+ 3! ","This feature would be helpful; I'm trying to replicate a summary plot for SHAP values, and I have not been able to do it. ","> This feature would be helpful; I'm trying to replicate a summary plot for SHAP values, and I have not been able to do it.\r\n\r\nSame! It's a shame. ","Hello! The same is for me. I'm trying to create a new feature importance visualization and I will need this. Hoper there will be a fix soon.\r\nThanks","+1","> > This feature would be helpful; I'm trying to replicate a summary plot for SHAP values, and I have not been able to do it.\r\n> \r\n> Same! It's a shame.\r\n\r\nWhat I did was generate an Explanation object and then use the shap library's plots functionalities. Hope this helps!","Has another workaround been found? I need the points to be colored differently than the violin part. Is there any way to iterate through fig.data to modify values one by one? Either with the marker size or the marker color? ","Check out [this post](https:\/\/stackoverflow.com\/questions\/55447131\/how-to-add-a-colorbar-to-an-already-existing-plotly-figure) to complement this workaround.","+1"],"labels":["feature","p3"]},{"title":"Wishlist: doc examples wanted","body":"Most items coming from questions on the community forum\r\n\r\n- [x] a proper multicategory bar example based on https:\/\/community.plotly.com\/t\/multicategory-axis-type-example\/26392\r\n- [ ] example of shape or annotation covering several subplots thanks to `xref='paper'`. Also the shapes and annotations tutorial should link to each other. \r\n- [ ] orthographic projection example in 3d axes tutorial (or 3d camera controls)\r\n- [ ] improve explanations on `updatemenus` and changing animation speed in animations. See https:\/\/stackoverflow.com\/questions\/59070876\/plotly-how-do-the-buttons-for-the-update-menus-really-work\/59076340#59076340,  https:\/\/community.plot.ly\/t\/scatter-animation-doesnt-work\/31944 https:\/\/community.plot.ly\/t\/need-animation-example-with-scattermapbox\/9720\/10 https:\/\/community.plot.ly\/t\/how-to-slow-down-animation-in-plotly-express\/31309\/7\r\n- [ ] in slider page https:\/\/plot.ly\/python\/sliders\/, add example using the `update` method (modifying both traces and layout), as in the buttons tutorial https:\/\/plot.ly\/python\/custom-buttons\/,  and also an example using `relayout`. Discussed in https:\/\/community.plot.ly\/t\/update-plot-with-restyle-method-get-the-current-selected-slider-value\/36162\/4.\r\n- [x] example using `px.strip`, see https:\/\/community.plotly.com\/t\/make-a-violin-plot-with-only-points\/37412\/3. In box plot page, and add a link also in violin page.\r\n- [x] example of [sparkline](https:\/\/en.wikipedia.org\/wiki\/Sparkline) in scatter and line page. See [this community post](https:\/\/community.plotly.com\/t\/sparklines-from-dataframe\/38174).\r\n- [x] example using `surfacecolor` in [3d surface tutorial](https:\/\/plotly.com\/python\/3d-surface-plots\/). See [this community post](https:\/\/community.plotly.com\/t\/assign-color-bar-to-x-axis\/38594\/2).\r\n- [ ] example of how to use `go.Frame` to target only certain traces in updates https:\/\/github.com\/plotly\/plotly.py\/issues\/2423#issuecomment-621906844\r\n- [ ] example of how to use `mapbox` `sourceattribution`\r\n- [ ] example of `update_scenes` and clarity on how `update_xaxes` is 2d only https:\/\/github.com\/plotly\/plotly.py\/issues\/2483 ... similarly let's ensure there's an example somewhere in the docs for every update method: polar, ternary etc\r\n- [ ] we need an example of `append_trace` somewhere, even just to say it's equivalent to `add_trace` except that it doesn't return the figure (for... reasons?)\r\n- [ ] would be nice to have a demo of a facet grid map like this one:\r\n![image](https:\/\/user-images.githubusercontent.com\/203523\/89045111-f3bac180-d318-11ea-91f9-69e3d5ce49fe.png)\r\n\r\n","comments":["I've tagged this issue as a good first issue since some examples are quite easy to add (especially if the forum posts have some code examples). Items which have already been ticked are already done. Feel free to ask questions here if you would like to contribute an example but are unsure about how to do it. Please also refer to the doc README https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/doc\/README.md","Here is also a couple of searches with no result on the doc website, which should return something\r\n- [ ] `lasso` and `box selection` (we do have a page for selection-events but it's for `FigureWidget`, we don't have anything for selections in plotly figures I believe, only in the config page maybe)\r\n- [ ] `io`\r\n- [ ] `modebar`\r\n- [ ] various figure factory names (`create_gantt`, `create_distplot`, `create_trisurf`)\r\n- [ ] drilldown (to be added to sunburst and treemap)\r\n- [ ] figsize (this is the matplotlib parameter, we might mention in when talking about the width and height of a figure).","I can help with that (I have experience with Plotly, but it's my first Open Source contribution). Are some of the tasks in progress? Or I can pick any that is not done?","Thank you @SylwiaOliwia2! I've updated the list by ticking contributions in progress, it was indeed not completely up to date :-). You can also write here on which example you would like to work on, or tick the corresponding box so that we know you're working on it. Thanks again :-) ","I'll start with the following:\r\n- [x] add coloraxis example to the subplots tutorial - Pull request #2226 \r\n- [x] example with legend only for a trace - Pull request #2227 \r\n- [x] add an example with matching axes (matches=\"x\")\r\n- [x] on histogram tutorial, mention that we cannot access the values of counts (it's asked a lot), and maybe mention numpy's function for this.  #2242 \r\n\r\nI'll keep updating this post about the tasks resolved by me.","@emmanuelle  \r\n\r\n> on histogram tutorial, mention that we cannot access the values of counts (it's asked a lot), and maybe mention numpy's function for this.\r\n\r\nyou mean that we can't display the total count of the histogram (ex. 25 for the selected items below)?\r\n![Plotly_hist](https:\/\/user-images.githubusercontent.com\/19889618\/75429387-fec48c80-5949-11ea-864b-991bb1a95004.png)\r\n","@SylwiaOliwia2 thanks for your PRs! Regarding the histogram, what I meant is that you cannot access the count values _from Python_. As you show in the figure, you can indeed see the count in the hover but it stays in Javascript. Is this clear enough? This confused me a bit when I started using plotly.py","I removed some of the completed examples from the list, so that the existing list is more readable.","- [x] example with colored links in sankey page #2291 \r\n- [x] in slider page, add example using the update method #2300 ","@emanuelle, regarding\r\n\r\n> example of shape or annotation covering several subplots thanks to xref='paper'\r\n\r\nThe `xref=\"paper\"` makes the annotation static and assumes that all the subplots are one plotting area. That's the point? It seems to be good to add custom legend or description, but not to annotate within the plot. See the example code [here](https:\/\/gist.github.com\/SylwiaOliwia2\/2f182a5b9ded70f32b284b01b004b175).","Is this issue still open?\r\nI want to contribute to it if there is some good first issue to be solved!\r\nCan anyone guide?","This issue is still open, although some have been addressed in #2488 which hasn't been merged yet.","Hi guys, I have used Plotly quite a lot for my school work and I really enjoyed it. I'm hoping to make some contribution to this project. Are the issues here, besides the ones resolved in #2488, still up to date? Would love to pick something simple and get started!","Hey, I want to make some contributions to Plotly as I have been using it a lot lately but this will be my first open-source contribution. So, I have to select any task from the checklist pinned at the top, right? Confirmation on this will be great and I'll start."],"labels":["documentation","good first issue"]},{"title":"A `validate=False` an option for `graph_objects` and `px` Figures?","body":"There's already an [issue outlining the effects `graph_object` validation has on plot generation time](https:\/\/github.com\/plotly\/plotly.py\/issues\/1052). Users can bypass this performance hit by replacing the `graph_objects` with `dict` and then display the plot with `plotly.offline.iplot(fig, validate=False)` or if they are creating graphs in Dash, they can forgo the `plotly.py` library altogether and just use a `dict` in their Graph component's `figure` argument. \r\n\r\nThis solution can [greatly improve the performance of Dash apps](https:\/\/github.com\/plotly\/dash-sample-apps\/pull\/332) but it means that Dash users with expensive graphs have to choose between using `px`\/plotly.py's `update` methods and optimally fast code. \r\n\r\nI wonder if a way to turn off validation, especially in Dash apps, would help Dash users get the best of both worlds.\r\n\r\ncc @matthewchan15 ","comments":["Also related to https:\/\/community.plot.ly\/t\/plotting-large-number-of-graphs\/35907. ","To be checked: can we do this and still keep the magical underscore methods? \r\n\r\nAlso possible: half-way point where we would disable the validation of only data arrays.\r\n\r\nNote that the \"import\" time is a big part of the lag when developing","Any update on this? certainly have my +1, using large data sets with datashader and it's taking seconds to validate. Likely will have to retrofit my code with the dict methods :(","@parksj10 can you confirm you\u2019re seeing performance issues with a version of plotly of 4.7 or higher? We made a number of performance improvements in 4.7 so I just want to make sure :)","@nicolaskruchten running plotly 4.8.1, I've attached a cProfile below, you can see that half the figure generation time is spent validating. In case you're interested, I've also attached the cProfile .dat file. Let me know if I can do anything else to help or provide other information. I think it would be rather difficult to create a low-complexity, working example from my app, but perhaps @michaelbabyn 's examples could be useful in this regard\r\n\r\n![Screen Shot 2020-06-25 at 7 41 04 PM](https:\/\/user-images.githubusercontent.com\/28692761\/85815021-3686e980-b71c-11ea-96a7-da09a5493701.png)\r\n\r\n[temp.dat.zip](https:\/\/github.com\/plotly\/plotly.py\/files\/4834815\/temp.dat.zip)\r\n","Thanks! This is something we should fix, and we\u2019d appreciate any help :)","I'm running into this, a few years later \ud83d\ude42. This causes major issues when working with e.g. choropleth maps with large GeoJSON files, where you will end up with giant JSON blobs that certainly do not need to be validated. \r\n\r\nI imagine this is a pretty common issue for folks working with charts with many points, and I had no idea this was even a thing until today. It'd be great at least to document this behaviour or make people more aware of it until it's possible to disable validation. Maybe even on https:\/\/plotly.com\/python\/webgl-vs-svg\/?","I like the idea of a three-level approach: full validation (current behavior), top-level validation (don\u2019t dig into data arrays or nested objects like GeoJSON), and no validation. ","(want to note as well that I'm seeing ~1second validation time\/mb of object. With GeoJSONs, we often see blobs in the size of 60mb+, which just destroys your app performance.)\r\n\r\nHaving the top-level validation option seems perfect!","So independently of the validation issue, if the GeoJSONs are static, you should always load them from `assets` in a Dash app, for caching purposes. Basically just pass in the URL rather than the GeoJSON blob.","> Having the top-level validation option seems perfect!\r\n\r\nYes, of course, although the last time we tried, we were unable to make it work :)","@nicolaskruchten -- yes, I'm able to mostly get around this issue by using `OperatorTransform` from Dash Extensions and combining that with using objects to define my Dash apps. Adding to `assets\/` would make it *even better* though... great idea. \r\n\r\nMy main concern here is that this isn't intuitive, and it's also not intuitive that you can boost performance of figures in Dash apps with a large number of points just by switching how they are defined (which is why it'd be great to at least see this behaviour documented).","(cc @red-patience \/ @LiamConnors on that last point maybe)","Throwing my support behind this one! Even if it takes some time to add in a `validate=False` param, in the meantime it would be really helpful to have documentation to alert people that this might be a bottleneck in chart performance and that you can work around it with creating the `dict` directly. \r\n\r\nBoth this trick and passing data as a static `asset` url have **massively** improved the performance of my graph and I wouldn't have known to do either of these things if I hadn't been pointed towards this issue. \r\n\r\ncc @red-patience ","I think I have a related issue affecting `subplots.make_subplots`, where the time to execute increases non-linearly with the number of plots.  For a 20x20 grid of plots it is taking 14 seconds, for a 21x21 grid it takes 18 seconds, for example.  This is for an *empty* figure, which is created with make_subplots e.g. \r\n```python\r\nfrom plotly.subplots import make_subplots\r\n\r\n%time fig = make_subplots(rows=20, cols=20)\r\n```\r\n\r\nFrom profiling, it is spending the vast majority of its time in the `_ret` function of basedatatypes.py, and all of the time in that function is spent in `find_closest_string`, which I think is because it is pre-calculating an error message for a missing key - which is related to the validation.  There would be a > 90% speedup if validation could be disabled, from what I can see in the profiling.\r\n\r\nEDIT: I think I will make a new issue for this: see #4100 ","Thanks for that profiling! We could probably speed things up by only computing error strings when we know there's an error..."],"labels":["enhancement"]},{"title":"Display percentages on Sankey diagram [feature request]","body":"I find it will be very useful having the option to display percentages alongside the absolute numbers on Sankey diagrams created with plotly.\r\nFor example, if the base node has sum of values of 100 going out of it in 5 flows, each flow accounting for 20% of the overall 100, I would like to display the 20 (value) and the 20% alongside (or instead, or toggle).","comments":["To take this further, it would be extra cool if you could display _both_ both input % (for example when hovering to the left of a node) and output % (for example when hovering to the right of a node). I find that usually you make a Sankey diagram because you are interested in both of these percentages so being able to show both explicitly would be extremely useful.","Any updates on this one? :)\r\n\r\nIs there any more or less clean way of doing it?","hi @Normale, \r\nWe don't have any updates on this feature request. It's currently not on our feature development roadmap.  "],"labels":["feature","p4"]},{"title":"Cannot Animate Plot by pandas.Timestamp","body":"Attempting to animate a plot using a pandas Timestamp column results in an exception.\r\n\r\nUsing Python 3.6.8, plotly_express==0.4.1, plotly==4.1.0\r\n\r\nCode to replicate:\r\n```python\r\nimport plotly_express as px\r\nimport pandas as pd\r\n\r\n# create a dataframe with mock data\r\ndf = pd.DataFrame(\r\n    [\r\n        {\"x\": 1, \"y\": 1, \"date\": \"2018-01-01\"},\r\n        {\"x\": 2, \"y\": 1, \"date\": \"2018-01-02\"},\r\n        {\"x\": 3, \"y\": 1, \"date\": \"2018-01-03\"},\r\n    ]\r\n)\r\ndf[\"date\"] = pd.to_datetime(df[\"date\"])\r\ndf.head()\r\n\r\n#       date | x | y\r\n# 2018-01-01 | 1 | 1\r\n# 2018-01-02 | 2 | 1\r\n# 2018-01-03 | 3 | 1\r\n\r\n# attempt to plot\r\npx.scatter(df, x=\"x\", y=\"y\", animation_frame=\"date\")\r\n\r\n```\r\n\r\nException & stack trace:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 2, in <module>\r\n  File \"C:\\Users\\jmccain\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\plotly\\express\\_chart_types.py\", line 52, in scatter\r\n    return make_figure(args=locals(), constructor=go.Scatter)\r\n  File \"C:\\Users\\jmccain\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\plotly\\express\\_core.py\", line 874, in make_figure\r\n    orders, sorted_group_names = get_orderings(args, grouper, grouped)\r\n  File \"C:\\Users\\jmccain\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\plotly\\express\\_core.py\", line 859, in get_orderings\r\n    key=lambda g: orders[col].index(g[i]) if g[i] in orders[col] else -1,\r\n  File \"C:\\Users\\jmccain\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\plotly\\express\\_core.py\", line 859, in <lambda>\r\n    key=lambda g: orders[col].index(g[i]) if g[i] in orders[col] else -1,\r\nValueError: Timestamp('2018-01-01 00:00:00') is not in list\r\n```\r\n\r\nI found the cause of the issue, in [_core.py:847](https:\/\/github.com\/plotly\/plotly.py\/blob\/6eb94f0fd817e1d399e458232e26ae58721a1dee\/packages\/python\/plotly\/plotly\/express\/_core.py#L847)\r\n\r\nPandas `.unique()` method returns a NumPy array, and as given in the [examples section](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.Series.unique.html), it will convert a `pandas.Timestamp` to a `numpy.datetime64`.\r\n```python\r\n>>> pd.Series([pd.Timestamp('2016-01-01') for _ in range(3)]).unique()\r\narray(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\r\n```\r\n\r\nThe `uniques` list defined at _core.py:847 uses the `.unique()` method, converting the series of `pandas.Timestamp` into an array of `numpy.datetime64`\r\n```python\r\nuniques = args[\"data_frame\"][col].unique()\r\n```\r\n\r\nThis distinction is relevant on line 857:\r\n```python\r\ngroup_names = sorted(\r\n    group_names,\r\n    key=lambda g: orders[col].index(g[i]) if g[i] in orders[col] else -1\r\n)\r\n```\r\n\r\nWhich causes the ValueError when `.index()` does not find a matching element due to this behavior of pandas.Timestamp and numpy.datetime64 seen here:\r\n\r\n```python\r\n>>> pandas.Timestamp('2018-01-01 00:00:00') in [numpy.datetime64('2018-01-01T00:00:00.000000000')]\r\nTrue\r\n>>> [numpy.datetime64('2018-01-01T00:00:00.000000000')].index(pandas.Timestamp('2018-01-01 00:00:00'))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nValueError: Timestamp('2018-01-01 00:00:00') is not in list\r\n```","comments":["Having dug a little deeper, the issue around animating by pandas.Timestamp goes beyond the code segment I addressed above.  Is animating by date supported functionality?  If not, would this be better as a feature request?","I have the same issue \r\n\r\nworkaround that works for me: \r\n`df_summary_time = df_summary_time.sort_values(by='timestamp') # sort rows based on timestamp`\r\n\r\n`df_summary_time['timestamp'] = df_summary_time.timestamp.apply(lambda x: x.date()).apply(str) # convert timestamp to a string `\r\n\r\n\r\nThen in px.scatter use `animation_frame=\"timestamp\"`\r\n","Thank you toships,\r\nworked for me too.\r\n","I have this problem too. A simpler workaround that worked for me is passing: \r\n`animation_frame = df.datecolumn.astype(str)`","> I have this problem too. A simpler workaround that worked for me is passing:\r\n> `animation_frame = df.datecolumn.astype(str)`\r\n\r\nThis works perfectly! Thank you! ","Is there any plan to fix this issue?"],"labels":["bug"]},{"title":"Width adjustment with fig.show()","body":"Plotly 4.0.0 \r\n\r\nI use JupyterLab.\r\n\r\nThere is a small issue with `fig.show()`:\r\n![Peek 2019-08-05 21-32](https:\/\/user-images.githubusercontent.com\/12001304\/62490152-eda70900-b7c8-11e9-9c08-50e47785a5f1.gif)\r\n\r\nNotice how the plot adjusts to the width of the window. I think it should behave just like `fig`:\r\n\r\n![Peek 2019-08-05 21-33](https:\/\/user-images.githubusercontent.com\/12001304\/62490170-f566ad80-b7c8-11e9-921e-635ded7a93a3.gif)\r\n\r\nwhich appears already adjusted.","comments":["Hi @sursu, thanks for the report. The difference here is that you're using a `FigureWidget` in the case above which has different rendering path than `fig.show()` uses.\r\n\r\nIf you don't need to make in-place updates to the figure after displaying it, you could switch to using a standard `Figure` object. When this object displays itself it will use the same rendering approach as `fig.show()` and so you should see the same behavior.","I still don't understand why `fig.show()` should display that flickering behavior, be it with `Figure` or with `FigureWidget`.","> I still don't understand why fig.show() should display that flickering behavior, be it with Figure or with FigureWidget.\r\n\r\nI wasn't saying that either *should* have the flickering behavior. Just that they have different rendering code paths, so it's not too surprising for them to have slightly different behavior.  Thanks again for the report."],"labels":["bug"]},{"title":"hexadecimal color definition with alpha","body":"Hi,\r\n\r\nIt seems plotly.py does not support hexadecimal color definition when it includes alpha.\r\nThis issue might be related to issue #1416, though the latter is declared as solved, while my issue is still valid with version 3.10.0. It appeared in version 3.0 (no issue with version 2.7)\r\nA very simple offline notebook code to show the problem:\r\n\r\nimport plotly.graph_objs as go\r\nimport plotly.offline as po\r\n\r\npo.init_notebook_mode(connected=True)\r\nc = '#112233ff'\r\npo.iplot([go.Scatter(x=[1, 2], y=[1, 1], line=dict(color=c))])\r\n\r\nWithout alpha, or with plotly 2.7.0, this code works.\r\n","comments":["Thanks for the report @Drumbits "],"labels":["bug"]},{"title":"Multiple figures on a single page without using subplot.","body":"It would be nice if subplot could be abstracted away in the case where you only want a single row (or column) of plots and just want to scroll left\/right (or up\/down). \r\n\r\nIdeally, I would like to just be able to make individual figures and maybe have some object with say an append_figure function that takes them and converts them to a subplot under the hood before plotting. It could be laid out either vertically or horizontally. \r\n\r\nI often do not know that I want to look at multiple plots on a single page until I've seen one plot. Having to go back and convert everything to using the subplot api after the fact is a burden. ","comments":["Hi @syamajala, thanks for the suggestion.  One of the key to making this, and several other subplot feature requests, possible is to make all of the subplot logic available lazily so that you can add additional subplots to a figure after it has been created.\r\n\r\nThis should be possible, but it's quite a bit more bookkeeping since we would need to be able to reposition basically the entire figure each time a new subplot is added.\r\n\r\nAs another workflow all together, you could make your figures as `FigureWidget` instances and then use the ipywidgets `HBox` \/ `VBox` to display separate figures next to each other in the same output cell.","How to merge multiple figures I currently use plotly.express and don't know how to merge them together or please tell me how to reverse figure.add_trace"],"labels":["make_subplots"]},{"title":"Boxplot hovertext, and text are broken","body":"In the Colored Box Plot example pulled from the docs, https:\/\/plot.ly\/python\/box-plots\/ when you change the `go.Box` trace to have a `text` attribute and use `hoverinfo` with the text the hover does not display, it also doesn't work if you use the `hovertext` property: \r\n\r\n```py\r\nimport plotly as plotly\r\nimport plotly.graph_objs as go\r\nimport numpy as np\r\n\r\ny0 = np.random.randn(50)\r\ny1 = np.random.randn(50)+1\r\n\r\ntrace0 = go.Box(\r\n    y=y0,\r\n    name = 'Sample A',\r\n    hovertext='text',\r\n    marker = dict(\r\n        color = 'rgb(214, 12, 140)',\r\n    )\r\n)\r\ntrace1 = go.Box(\r\n    y=y1,\r\n    name = 'Sample B',\r\n    text='hello',\r\n    hoverinfo='text',\r\n    marker = dict(\r\n        color = 'rgb(0, 128, 128)',\r\n    )\r\n)\r\ndata = [trace0, trace1]\r\nplotly.offline.iplot(data, config={'displayModeBar': False})\r\n```","comments":["Hi @susielu,\r\n\r\nThe text\/hovertext fields are setting text information for each point that is considered for the box plot.  So you will only have the hover text show up when hovering over the outlier points, not when hovering on the box itself.  Is this what you're seeing?  The trace's `name` property, on the other hand, is setting the name for the trace as a whole and it will show up when hovering over the box.\r\n\r\nIs this what you're seeing?","So hover just doesn't show up at all on the one that is using text\/hovertext. In the example I provided the boxplot on the right has no hover even though text is set.\r\n\r\nAnd in the one on the left the value for `hovertext` is not showing anywhere when I do hover, seems like it's totally ignored."],"labels":["question"]},{"title":"Matplotlib broken_barh does not work in plotly conversion","body":"Here is an example that works fine with matplotlib: \r\n```\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax = plt.subplots()\r\nax.broken_barh([(110, 30), (150, 10)], (10, 9), facecolors='blue')\r\nax.broken_barh([(10, 50), (100, 20), (130, 10)], (20, 9),\r\n               facecolors=('red', 'yellow', 'green'))\r\nax.set_ylim(5, 35)\r\nax.set_xlim(0, 200)\r\nax.set_xlabel('seconds since start')\r\nax.set_yticks([15, 25])\r\nax.set_yticklabels(['Bill', 'Jim'])\r\nax.grid(True)\r\nax.annotate('race interrupted', (61, 25),\r\n            xytext=(0.8, 0.9), textcoords='axes fraction',\r\n            arrowprops=dict(facecolor='black', shrink=0.05),\r\n            fontsize=16,\r\n            horizontalalignment='right', verticalalignment='top')\r\n\r\nplt.show()\r\n```\r\n\r\nBut when I try to convert it to plotly it doesn't render, I am using Plotly in a Jupyter notebook offline mode: \r\n```\r\nimport plotly.offline as py\r\nimport plotly.tools as tls\r\npy.init_notebook_mode(connected=True)\r\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax = plt.subplots()\r\nax.broken_barh([(110, 30), (150, 10)], (10, 9), facecolors='blue')\r\nax.broken_barh([(10, 50), (100, 20), (130, 10)], (20, 9),\r\n               facecolors=('red', 'yellow', 'green'))\r\nax.set_ylim(5, 35)\r\nax.set_xlim(0, 200)\r\nax.set_xlabel('seconds since start')\r\nax.set_yticks([15, 25])\r\nax.set_yticklabels(['Bill', 'Jim'])\r\nax.grid(True)\r\nax.annotate('race interrupted', (61, 25),\r\n            xytext=(0.8, 0.9), textcoords='axes fraction',\r\n            arrowprops=dict(facecolor='black', shrink=0.05),\r\n            fontsize=16,\r\n            horizontalalignment='right', verticalalignment='top')\r\n\r\n\r\nplotly_fig = tls.mpl_to_plotly(fig)\r\npy.iplot(plotly_fig)\r\n\r\n```\r\n\r\nIt renders with this error: \r\n```\r\n\r\n\/apps\/python3\/lib\/python3.6\/site-packages\/plotly\/matplotlylib\/renderer.py:451: UserWarning:\r\n\r\nDang! That path collection is out of this world. I totally don't know what to do with it yet! Plotly can only import path collections linked to 'data' coordinates\r\n```\r\n\r\nIs there any plan to support this? ","comments":["Hi @susielu, thanks for the report.  We don't have any immediate plans to put much more work into the matplotlib conversion functionality.  Of course, community contributions or [funding](https:\/\/plot.ly\/products\/consulting-and-oem\/) could certainly change that."],"labels":["enhancement","matplotlylib"]},{"title":"Overlapping boxplots in violinplot","body":"Hi,\r\n\r\nI was using the last example in [https:\/\/plot.ly\/python\/violin\/#advanced-violin-plot](https:\/\/plot.ly\/python\/violin\/#advanced-violin-plot) with my own data, and the fact that the boxplots overlap makes the plot a bit confusing, specially when dealing with many different split violin plots (i.e. More than 20).\r\n\r\nYou can see an example of what I am talking about in that very same example if you zoom in one of the violin plots:\r\n\r\n![Screen Shot 2019-06-20 at 15 37 48](https:\/\/user-images.githubusercontent.com\/1914694\/59853729-c0fe7580-9371-11e9-8900-0d87df3743bb.png)\r\n\r\nWhen zoomed, it does not look important, as I said, it makes the plot confusing in my data:\r\n\r\n<img width=\"1563\" alt=\"Screen Shot 2019-06-20 at 15 46 10\" src=\"https:\/\/user-images.githubusercontent.com\/1914694\/59854196-ba243280-9372-11e9-950b-bf6a0f5407f9.png\">\r\n\r\nCheers \r\n\r\n","comments":["Hi @falfaroalmagro, thanks for the report.  Do you have in mind how you would ideally like the boxes to behave for two-sided violin plots?  For your case, where you have so many violins, it might make sense to hide the boxes altogether by setting `box.visible=False`.","Hi, @jonmmease. Thanks for your answer. Removing the boxes may be an option in my case, but I still think that the overlapping looks wrong. There is no reason for making them overlap. It does not improve the visualisation and it impairs the aesthetics. How would I ideally like the boxes? Not-overlapping."],"labels":["question"]},{"title":"Add fallback command-line mode for orca image export","body":"The `plotly.io.write_image`\/`to_image` functions start an orca server and send image export requests to the orca server over a local port.  This provides the best performance for repeated image export requests, but at times folks have had trouble with this local server connection. See\r\n - https:\/\/github.com\/plotly\/plotly.py\/issues\/1460\r\n - https:\/\/github.com\/plotly\/plotly.py\/issues\/880#issuecomment-502343459\r\n\r\nIt would be useful to provide to option to call orca in command-line mode.  This would involve writing the figure to a temporary file, calling `orca  graph` on the file to create a temporary image file, then reading the image file bytes into memory, and deleting both temporary files.  This would be quite a bit slower (1-2 seconds per image), but it would likely be more reliable for some environments since it does not require communication over a local port.\r\n\r\nThe API should be designed along with https:\/\/github.com\/plotly\/plotly.py\/issues\/1570.","comments":[],"labels":["enhancement"]},{"title":"create_animation doesn't handle mix of dict and graph_objs","body":"See https:\/\/community.plot.ly\/t\/i-am-trying-to-create-bar-chart-animation-using-plotly-python-and-want-to-take-it-online\/24589.\r\n\r\nWhen a figure that contains a mix of `dict` and `graph_objs` is passed, there is an error raised in `chart_studio.plotly.create_animations`.","comments":[],"labels":["bug","V4"]},{"title":"Support for WMS or TMS Tiles","body":"First of all, thanks for this wonderful project! \r\n\r\nI find the support for mapbox tiles great and fairly intuitive, but I think it would be a nice feature to support some of the standard tile formats like WMS, TMS and XYZ tiles similar to the way they are implemented in [Leaflet](https:\/\/leafletjs.com\/) or [Openlayers](http:\/\/openlayers.org\/). This would make it easier to use self-hosted tile servers or for example OpenStreetMap tiles.","comments":["Thanks for the suggestion @njanakiev.  The MapBox JavaScript library supports rendering external (not provided by MapBox) tiles as `raster` layers.  We're looking into adding support for these through the Plotly API.  Would this satisfy the use cases you have in mind?","Thank you for the fast reply. Do you mean like shown in this [documentation](https:\/\/docs.mapbox.com\/mapbox-gl-js\/example\/wms\/)? I suppose this should support arbitrary WMS servers. What I also had in mind is support for TMS tiles as they are also fairly common. You can see how Leaflet uses WMS and TMS tiles in [these examples](https:\/\/leafletjs.com\/examples\/wms\/wms.html). They also support TMS tile layers with endpoints of the form:\r\n\r\n```\r\nhttp:\/\/base_url\/tms\/1.0.0\/ {tileset} \/ {z} \/ {x} \/ {y} .png\r\n```\r\n\r\nAn OpenStreetMap tile example would look like:\r\n\r\n```\r\nhttps:\/\/tile.openstreetmap.org\/7\/63\/42.png\r\n```\r\n\r\nIs this something that MapBox can also support with the `raster` layers?","I think you probably can by using mapbox with a custom layer, but I haven't quite got it working yet (see here: https:\/\/plot.ly\/python\/mapbox-layers\/).\r\n\r\n```python\r\nimport plotly.graph_objects as go\r\n\r\nfig = go.Figure()\r\n\r\nfig.update_layout(\r\n    mapbox_style=\"white-bg\",\r\n    mapbox_layers=[\r\n        {\r\n            \"below\": 'traces',\r\n            \"sourcetype\": \"raster\",\r\n            \"source\": [\"http:\/\/localhost:8080\/myWMSServer\/wms?\"]\r\n        }\r\n      ])\r\n\r\nfig.show()\r\n```\r\n\r\nI'm not sure if it's not working because I'm getting the source incorrect (I've tried using an address that will serve me a png map in the browser but that didn't work either) or if this idea will simply not work at all...\r\n\r\nI'd be grateful if anyone has any suggestions.","I'm sorry our docs are not sufficiently clear on this point... The contents of the `source` array are passed to Mapbox.js and according to their docs, should be [TileJSON](https:\/\/github.com\/mapbox\/tilejson-spec)-compliant. Basically this means that these URLs should have `{x}`, `{y}` and `{z}` placeholders OR a `{bbox-epsg-3857}` placeholder. We have an example in our docs with both in the same map here: https:\/\/plot.ly\/python\/mapbox-layers\/#base-tiles-from-the-usgs-radar-overlay-from-environment-canada-no-token-needed","Could you please add support for setting the scheme parameter to the `mapbox_layers`?\r\nThis is done for most params shown at the mapbox documentation:\r\nhttps:\/\/docs.mapbox.com\/mapbox-gl-js\/style-spec\/sources\/#raster-scheme\r\n\r\nlike minzoom and maxzoom. So there is no point in leaving the scheme param as mapbox supports it.\r\n\r\n","Mapbox supports adding a WMS source. It would be nice to have the same support for plotly.\r\nhttps:\/\/docs.mapbox.com\/mapbox-gl-js\/example\/wms\/","Being able to usw WMS-sources in plotly for background maps (e.g. in px.choropleth_mapbox) would greatly help in projects where it is mandatory that no data from servers in foreign countries (in this case servers from Mapbox) is requested. At least in Germany most services for background maps are WMS and not TileJSON-compliant.\r\n\r\nIn leaflet the use of WMS is already possible: https:\/\/dash-leaflet.herokuapp.com\/#wsm_tile_layer","@nicolaskruchten Hi, and thanks for the wonderful work you do. I'm in dire need of showing a WMS layer in mapbox as well. Any progress on this front so far? Does it need an access token? I use it offline? Also, if not, do you have an alternative? ","Actually, I've found a way right now to use a redirection and the mercantile library to convert xyz to a bbox for WMS layer. But for some reason when I add this redirection, mapbox shows the layer, but it somehow freezes and stops working. The code is something like this (not a working example, but you get the idea I guess):\r\n\r\nmapbox_layers.append(\r\n            {\r\n                \"below\": 'traces',\r\n                \"sourcetype\": \"raster\",\r\n                # \"sourceattribution\": \"United States Geological Survey\",\r\n                \"source\": [\r\n                    \"http:\/\/0.0.0.0\/my_redirection_to_wms\/\" + \"\/{z}\/{y}\/{x}\"\r\n                ]\r\n            }\r\n        )\r\n\r\n## The redirection url\r\n@app.server.route('\/my_redirection_to_wms\/<z>\/<x>\/<y>', methods=['GET'])\r\ndef getGISData(username: str, layers: str, z: str, x: str, y: str):\r\n    bound = mercantile.bounds(int(y), int(x), int(z))\r\n    omoor_gis = get_gis_omoor_username(username).omoorBoundary\r\n\r\n    if not omoor_gis.intersects(Point((bound.west, bound.south))) \\\r\n            and not omoor_gis.intersects(Point((bound.east, bound.north))):\r\n        return b\"\"\r\n\r\n    layers_list = \",\".join(layers.split(\"0\"))\r\n\r\n    redirect_url = f\"{gis_wms_route}\/qgis-server?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&BBOX={bound.west},{bound.south},{bound.east},{bound.north}&CRS=CRS:84&WIDTH=256&HEIGHT=256&LAYERS={layers_list}&FORMAT=image\/png&DPI=48&MAP_RESOLUTION=48&FORMAT_OPTIONS=dpi:96&TRANSPARENT=True\"\r\n\r\n    return requests.get(redirect_url).content","Like @Masoudas, I also have a strong need for showing WMS layers as TMS is EXTREMELY limiting. Is there any plan to implement this or does it need a sponsor?","@makmegs this isn't currently on our roadmap but if you're interested in sponsoring we'd be happy to discuss \ud83d\ude04 "],"labels":["enhancement","plotly.js"]},{"title":"what is \"plotlyServerURL\" option in plotly offline plots html page","body":"When I generate a html page using plotly offline plots, there are following references to plot.ly, what are they used for? are my plots exported to plot.ly by default?\r\n\r\nwindow.PLOTLYENV.BASE_URL='https:\/\/plot.ly'\r\n\r\n\"linkText\": \"Export to plot.ly\", \r\n\"plotlyServerURL\": \"https:\/\/plot.ly\"","comments":["Hi @maddukurisrinivasarao,\r\n\r\nNo, plots are **not** exported to plot.ly by default.  This base URL is only used when you click the edit in chart studio button, or the Export to plot.ly link.  And both of these (the button and the link) are disabled by default.\r\n\r\nBut that said, it would probably be a good idea for us to blank out these URLs when a user export a figure without the link\/button enabled.","@jonmmease  thanks for the clarification. It would be great if there is an option to control the URLs incorporation.","Also, would be nice if \"external\" is not added to the `plotlyServerURL` URL."],"labels":["enhancement","V4"]},{"title":"Uncaught ReferenceError: Plotly is not defined","body":"I am trying to create plots from jupyter kernel (based on ProcessMetaKernel) and display plots in jupyter notebook.\r\n\r\nMy Jupyter kernel code is\r\n\r\nclass MyKernel(ProcessMetaKernel):\r\n    def do_execute_direct(self, code, silent=True):\r\n        import plotly\r\n        import plotly.graph_objs as go\r\n        plot_div=plotly.offline.plot({\"data\": [go.Scatter(x=[1, 2, 3, 4], y=[4, 3, 2, 1])],\"layout\": \r\n        go.Layout(title=\"hello world\")}, auto_open=False, output_type='div',include_plotlyjs=True)\r\n        self.Display(HTML(data=plot_div))\r\n        return code","comments":["Hi @maddukurisrinivasarao,\r\n\r\nFor inline display in the classic JupyterNotebook, it doesn't work to load plotly.js using a `<script>` tag (which is what `include_plotlyjs=True` does), instead it seems to be necessary to load plotly.js using `requirejs`.  This is what the built-in `offline.iplot` function does.\r\n\r\nTake a look at the `HtmlRenderer`\/`NotebookRenderer` at https:\/\/github.com\/plotly\/plotly.py\/blob\/7cce28331781f189aaf545ab2476889f1bfe720c\/plotly\/io\/_base_renderers.py#L222 for details.  You may be able to borrow some of this logic for your custom kernel.\r\n\r\nHope that helps!"],"labels":["question"]},{"title":"Anaconda Not Opening After Installing Plotly 3.9.0","body":"Thanks for your interest in plotly.py!!\r\n\r\nBefore opening an issue, please search for existing and closed issues. If your problem or idea is not addressed yet, [please open a new issue](https:\/\/github.com\/plotly\/plotly.py\/issues\/new).\r\n\r\nBug reports **must** be accompanied with a reproducible example. Please use the [latest version](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/CHANGELOG.md) of plotly.py in your report unless not applicable and specify if you're plotting [online](https:\/\/plot.ly\/python\/getting-started\/#initialization-for-online-plotting) or [offline](https:\/\/plot.ly\/python\/getting-started\/#initialization-for-offline-plotting).\r\n\r\nNote that GitHub issues are reserved for bug reports and feature requests only. Implementation questions should be asked on community.plot.ly (tagged [`python`](https:\/\/community.plot.ly\/c\/api\/python)) or on Stack Overflow (tagged [`plotly`](https:\/\/stackoverflow.com\/questions\/tagged\/plotly)).\r\n\r\nComments on GitHub issues or pull requests should add content to the discussions. Approbation comments such as *+1* or *I would like this feature to be implemented as well* will be deleted by the maintainers. Please use [GitHub reactions](https:\/\/github.com\/blog\/2119-add-reactions-to-pull-requests-issues-and-comments) instead.\r\n","comments":["Hi All,\r\n\r\nDoes anyone of you facing issue of anaconda not opening  after installing Plotly 3.9.0 using pip  , I am receiving this  error in anaconda prompt : \r\n\r\nFatal Python error: init_sys_streams: can't initialize sys standard streams\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\r31982\\AppData\\Local\\Continuum\\anaconda3\\Lib\\site-packages\\plotly\\io\\__init__.py\", line 1, in <module>\r\n  File \"C:\\Users\\r31982\\AppData\\Local\\Continuum\\anaconda3\\Lib\\site-packages\\plotly\\io\\_orca.py\", line 6, in <module>\r\n  File \"C:\\Users\\r31982\\AppData\\Local\\Continuum\\anaconda3\\lib\\socket.py\", line 546, in <module>\r\nAttributeError: module 'io' has no attribute 'RawIOBase'\r\n\r\nBut when I remove the plotly folder or just this __init__.py file, anaconda works , but obviously plotly does not. \r\n\r\nYour help would be really appreciated.\r\n\r\nThanks \r\n\r\n","Hi @rahulkhatri121,\r\n\r\nThanks for the report, I'm honestly not sure what could be going on here.  Have you tried uninstalling and reinstalling the plotly pip package?  Have you tried installing plotly using conda? See https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/README.md#installation for those instructions.","Hi @jonmmease  Yes I tried installing Plotly using conda , it still has the same error with latest Plotly version. But later I tried version 3.8.1 , its working fine .\r\n\r\nThanks","seeing the same issue with plotly 4.5.1 and anaconda","I am getting the same issue using conda to install plotly 4.6.0; I have to manually delete the folder and then python\/spyder\/anaconda works again -- but no plotly"],"labels":["question"]},{"title":"Matplotlib is_frame_like is deprecated, and will be removed soon","body":"To repro, run this:\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport plotly.tools\r\nf = plt.figure()\r\nplt.plot([1,2,3,4])\r\nplotly.tools.mpl_to_plotly(f)\r\n```\r\n...which will result in this warning being printed to the console:\r\n```\r\n(...)\/lib\/python3.6\/site-packages\/plotly\/matplotlylib\/mpltools.py:368: MatplotlibDeprecationWarning:                                     \r\nThe is_frame_like function was deprecated in Matplotlib 3.1 and will be removed in 3.3.\r\n```","comments":["Thanks @tvst ","I had this same issue when trying to run tls.mpl_to_plotly() in python3.7 when I was plotting survival curve in dash app following [survival-analysis-r-vs-python](https:\/\/plot.ly\/ipython-notebooks\/survival-analysis-r-vs-python\/). \r\nAlso Userwarning same as raised in this [community thread] like: (https:\/\/community.plot.ly\/t\/some-parts-of-figure-not-displayed-when-converting-matplotlib-figure-to-plotly-figure-and-displaying-on-webpage-with-dash\/14449)\r\nAgain it's not an issue affecting app performance, just console logging.","I am also facing the same issue, the portion of my code where I am using plt (matplotlib.pyplot as plt) :\r\n```\r\n```\r\n    figure = plt.figure(figsize= size, facecolor= 'white')\r\n    subplot = figure.add_subplot(1,1,1)\r\n     .\r\n     .\r\n     .\r\n    rectangle = plt.Rectangle((tx,H), width, height, color=mycolor)\r\n    subplot.add_patch(rectangle)\r\n\r\n    plt.xlim([0, max_x])\r\n    plt.ylim([0,H])\r\n    plt.yticks(pos_labels, labels)\r\n```\r\n    .\r\n    .\r\n```\r\nplotly throws the warning:\r\n\r\n> The is_frame_like function was deprecated in Matplotlib 3.1 and will be removed in 3.3.\r\n> \r\n> \/users\/a\/.conda\/envs\/tf_gpu\/lib\/python3.7\/site-packages\/plotly\/matplotlylib\/renderer.py:512: UserWarning:\r\n> \r\n> I found a path object that I don't think is part of a bar chart. Ignoring.\r\n\r\nAnd misses all the rectangles, and all the y-axis labels set by 'plt.yticks(pos_labels, labels)'.\r\n","Indeed, our matplotlib conversion utility should be considered deprecated at this point as it isn\u2019t being actively maintained to track deprecations and changes in matplotlib itself so it works best with older versions of matplotlib. I should update the docstrings accordingly.","That said, if someone wants to work on it to bring it back up to date I\u2019d be happy to work with them to integrate the changes :)"],"labels":["matplotlylib"]},{"title":"mpl_to_plotly doesn't work for draw_networkx_edges in networkx","body":"Briefly, I couldn't plot edges of `networkx` using `mpl_to_plotly`. The example code is the following and detailed info shows in [stackoverflow][1]. In addtion, the return of `nx.draw_networkx_edges` method is a list of [`matplotlib.patches.FancyArrowPatch`][2].\r\n\r\n```python\r\nfrom __future__ import division\r\n\r\nimport matplotlib.pyplot as plt\r\nimport networkx as nx\r\nfrom plotly.offline import (init_notebook_mode, iplot)\r\nimport plotly.tools as tls\r\n\r\n\r\ninit_notebook_mode(connected=True)\r\n\r\nG = nx.generators.directed.random_k_out_graph(10, 3, 0.5)\r\npos = nx.layout.spring_layout(G)\r\n\r\nnode_sizes = [3 + 10 * i for i in range(len(G))]\r\nM = G.number_of_edges()\r\nedge_colors = range(2, M + 2)\r\nedge_alphas = [(5 + i) \/ (M + 4) for i in range(M)]\r\n\r\nfig = plt.figure()\r\n\r\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color='blue')\r\nedges = nx.draw_networkx_edges(G, pos, node_size=node_sizes, arrowstyle='->',\r\n                               arrowsize=10, edge_color=edge_colors,\r\n                               edge_cmap=plt.cm.Blues, width=2)\r\n\r\nplotly_fig = tls.mpl_to_plotly(fig)\r\niplot(plotly_fig)\r\n```\r\n\r\nThanks for your help!\r\n\r\n[1]: https:\/\/stackoverflow.com\/questions\/56158283\/why-i-cannot-plot-edges-of-networkx-in-iplot-mpl-method-of-plotly\r\n[2]: https:\/\/networkx.github.io\/documentation\/stable\/reference\/generated\/networkx.drawing.nx_pylab.draw_networkx_edges.html#networkx.drawing.nx_pylab.draw_networkx_edges","comments":["Hi @LangLEvoI, thanks for the report"," @LangLEvoI, I would just avoid the extra step of using matplotlib, just use nx and plotly directly. I have some examples of how to do network graphs directly in plotly, and I believe their are also examples on the plotly python documentation page(s).","Hi, @100518832  thanks for your comment and the docs :) I have already done my project with \"pure\" `plotly` style! But I was thinking it is not so convenient to plot a directed network using `plotly` because of the arrow plotting."],"labels":["matplotlylib"]},{"title":"Hover data doesn't map for create_facet_grid from figure factory","body":"Incorrect data will appear on tool tip when using a facet grid plot. \r\nIn the example provided below the data shows the Chevrolet Corvette 8 cylinder has a manual(m6) transmission:\r\n\r\n`manufacturer     model  displ  year  cyl        trans  drv  cty  hwy fl  \r\n   chevrolet  corvette    7.0  2008    8   manual(m6)    r   15   24  p`\r\n\r\nbut the tool tip shows auto(s6), see photo:\r\n![facet_plot](https:\/\/user-images.githubusercontent.com\/18241942\/57393722-9ab6b900-71bb-11e9-96d2-410f616596a2.jpg)\r\n\r\nCode to reproduce:\r\n\r\n`import plotly.offline as py\r\nimport plotly.figure_factory as ff\r\nimport pandas as pd\r\n\r\nmpg = pd.read_table('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/mpg_2017.txt')\r\neight_cyl = mpg[mpg['cyl'] == 8]\r\n\r\nprint(eight_cyl[eight_cyl['displ'] == 7.0])\r\n\r\nfig = ff.create_facet_grid(\r\n    mpg,\r\n    x='displ',\r\n    y='cty',\r\n    facet_col='cyl',\r\n    text=mpg['trans'].values,\r\n    hoverinfo = 'text'\r\n)\r\n\r\npy.plot(fig)`","comments":["Hi @SandyJJS,\r\n\r\nThanks for the report.  To be honest we probably won't put much more effort into the `create_facet_grid` figure factory because we're focused on `plotly_express` which offers much more flexible faceting functionality.  Have you tried out https:\/\/www.plotly.express\/ for this usecase?\r\n\r\nThat said, if someone wants to take a look and debug this we'd be happy to merge in any fixes!\r\n\r\n","@jonmmease can I help with this issue? ","Hi @isemaj, sure.  Have you tried reproducing this plot with `plotly_express`?  That's the first step I'd like to see.","Here's the `plotly_express` version, I'm not sure if this is the one that you're looking for but here it shows the right value which is `manual(m6`).\r\n\r\n![Screenshot from 2019-06-19 15-33-01](https:\/\/user-images.githubusercontent.com\/39540851\/59745628-cc856a00-92a7-11e9-9018-78527d61ae35.png)\r\n\r\n```python\r\nimport plotly_express as px\r\nimport pandas as pd\r\nmpg = pd.read_table('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/mpg_2017.txt')\r\npx.scatter(mpg, \r\n           x='displ', \r\n           y='cty', \r\n           facet_col='cyl', \r\n           hover_name='trans', \r\n           category_orders={'cyl': [4, 5, 6, 8]})\r\n```"],"labels":["bug"]},{"title":"Magic underscore error messages","body":"in the following code\r\n\r\n```python\r\nimport plotly_express as px\r\ntips = px.data.tips()\r\npx.scatter(\r\n           tips, x=\"total_bill\", y=\"tip\", text=\"size\",\r\n           color=\"size\", facet_col=\"sex\",\r\n           color_continuous_scale=px.colors.sequential.Viridis, \r\n).update_traces(text_position=\"top center\")\r\n```\r\n\r\nThe `text_position` magic underscore argument is incorrect (should be `textposition`) but the error message is not super-helpful:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-8-640c247e62b0> in <module>()\r\n      5            color=\"size\", facet_col=\"sex\",\r\n      6            color_continuous_scale=px.colors.sequential.Viridis,\r\n----> 7 ).update_traces(text_position=\"top center\")\r\n\r\n~\/miniconda2\/envs\/nb\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in update_traces(self, patch, selector, row, col, **kwargs)\r\n    793         \"\"\"\r\n    794         for trace in self.select_traces(selector=selector, row=row, col=col):\r\n--> 795             trace.update(patch, **kwargs)\r\n    796         return self\r\n    797 \r\n\r\n~\/miniconda2\/envs\/nb\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in update(self, dict1, **kwargs)\r\n   3356             with self.figure.batch_update():\r\n   3357                 BaseFigure._perform_update(self, dict1)\r\n-> 3358                 BaseFigure._perform_update(self, kwargs)\r\n   3359         else:\r\n   3360             BaseFigure._perform_update(self, dict1)\r\n\r\n~\/miniconda2\/envs\/nb\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in _perform_update(plotly_obj, update_obj)\r\n   2548             # -------------------------\r\n   2549             invalid_props = [\r\n-> 2550                 k for k in update_obj if k not in plotly_obj\r\n   2551             ]\r\n   2552 \r\n\r\n~\/miniconda2\/envs\/nb\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in <listcomp>(.0)\r\n   2548             # -------------------------\r\n   2549             invalid_props = [\r\n-> 2550                 k for k in update_obj if k not in plotly_obj\r\n   2551             ]\r\n   2552 \r\n\r\n~\/miniconda2\/envs\/nb\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in __contains__(self, prop)\r\n   3098                     return False\r\n   3099             else:\r\n-> 3100                 if obj is not None and p in obj._validators:\r\n   3101                     obj = obj[p]\r\n   3102                 else:\r\n\r\nAttributeError: 'numpy.ndarray' object has no attribute '_validators'\r\n```","comments":["This is basically because `text` is valid but it's meant to be an array or string, so `text_position` is read as `text.position` somehow but arrays don't support properties like this, I infer."],"labels":["documentation"]},{"title":"Cannot set x-axis to side='top' for second chart in subplot with shared_yaxes=True","body":"Hi all,\r\n\r\nI'm trying to display two charts with shared y-axes side-by side and with their respective x-axes shown at the top. This works for the 1st chart on the left, but not for the 2nd one on the right, see the minimal example below. Am I doing something wrong or is this a bug?\r\n\r\nNote that it works fine if I change `shared_yaxes` to `False` but I really need them shared.\r\n\r\n```python\r\nimport plotly.plotly as py\r\nimport plotly.graph_objs as go\r\nfrom plotly import tools\r\nfrom plotly.offline import init_notebook_mode, iplot\r\n\r\ninit_notebook_mode()\r\n\r\ntrace_left = go.Scatter(x=[3, 2, 5], y=[1, 2, 3], name='Left')\r\ntrace_right = go.Scatter(x=[2, 6, 7], y=[1, 2, 4], name='Right')\r\n\r\nfig = tools.make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_yaxes=True)\r\nfig.append_trace(trace_left, 1, 1)\r\nfig.append_trace(trace_right, 1, 2)\r\n\r\nlayout = go.Layout(\r\n    xaxis=dict(side='top'),\r\n    xaxis2=dict(side='top'),   # <- 2nd x-axis should be on top as well but isn't\r\n)\r\n\r\nfig['layout'].update(layout)\r\niplot(fig, filename='issue')\r\n```\r\n\r\n![06-05-2019 15-55-36](https:\/\/user-images.githubusercontent.com\/49198627\/57229997-a7021100-7017-11e9-805e-7ea1b7afe920.png)\r\n","comments":["Hi @kasparthommen,\r\n\r\nThanks for the report. I'm not exactly sure what's going wrong with the current version of `make_subplots`, but the new `make_subplots` version that will be the default in plotly.py version 4 (See https:\/\/github.com\/plotly\/plotly.py\/pull\/1528) seems to behave as you would expect.  You can try this out now using the `v4_subplots` future flag. For example:\r\n\r\n```python\r\nfrom _plotly_future_ import v4_subplots\r\nimport plotly.graph_objs as go\r\nfrom plotly import tools\r\nfrom plotly.offline import init_notebook_mode, iplot\r\n\r\ninit_notebook_mode()\r\n\r\ntrace_left = go.Scatter(x=[3, 2, 5], y=[1, 2, 3], name='Left')\r\ntrace_right = go.Scatter(x=[2, 6, 7], y=[1, 2, 4], name='Right')\r\n\r\nfig = tools.make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_yaxes=True)\r\nfig.append_trace(trace_left, 1, 1)\r\nfig.append_trace(trace_right, 1, 2)\r\n\r\nlayout = go.Layout(\r\n    xaxis=dict(side='top'),\r\n    xaxis2=dict(side='top'),   # <- 2nd x-axis should be on top as well but isn't\r\n)\r\n\r\nfig['layout'].update(layout)\r\niplot(fig, filename='issue')\r\n```\r\n![newplot-14](https:\/\/user-images.githubusercontent.com\/15064365\/57524449-d05fbd00-72f5-11e9-8402-d66d047ac861.png)\r\n\r\nYou can also make this a little bit more concise using the `update_xaxes` method added in version 3.9 (See https:\/\/github.com\/plotly\/plotly.py\/pull\/1548).\r\n\r\n```python\r\nfrom _plotly_future_ import v4_subplots\r\nimport plotly.graph_objs as go\r\nfrom plotly import tools\r\nfrom plotly.offline import init_notebook_mode, iplot\r\n\r\ninit_notebook_mode()\r\n\r\ntrace_left = go.Scatter(x=[3, 2, 5], y=[1, 2, 3], name='Left')\r\ntrace_right = go.Scatter(x=[2, 6, 7], y=[1, 2, 4], name='Right')\r\n\r\nfig = tools.make_subplots(\r\n    rows=1,\r\n    cols=2,\r\n    shared_yaxes=True\r\n).update_xaxes(side='top')\r\n\r\nfig.append_trace(trace_left, 1, 1)\r\nfig.append_trace(trace_right, 1, 2)\r\n\r\niplot(fig, filename='issue')\r\n```\r\n","Hi @jonmmease \r\n\r\nThanks for your reply, I'll try that!\r\n\r\nI assume this means that there won't be a fix for the current version? If so then please feel free to mark this issue as closed\/wont-fix or whatever you see fit, thanks."],"labels":["make_subplots","V4"]},{"title":"SVG files saved with vector-effect:non-scaling-stroke XML option","body":"When SVG figure files are saved using plotly.offline, the SVG image's XML code uses the style option `vector-effect:non-scaling-stroke` for lines associated with scatter traces, but not for graph axes or other lines. When importing these SVG files into vector graphic software packages like  [Inkscape](https:\/\/inkscape.org\/), this option results in trace lines remaining the same width regardless of the level of zoom, making it difficult to ensure lines are of the desired width. Below is a command line MWE, and some images showing how the generated SVG behaves in Inkscape.\r\n\r\n```\r\nimport numpy as np\r\nimport plotly\r\nfrom plotly.offline import iplot\r\nplotly.offline.init_notebook_mode()\r\n\r\ntrace = {\r\n                'x' : np.arange(0,10),\r\n                'y' : np.arange(0,10),\r\n                'type' : 'scatter',\r\n                'mode' : 'lines+markers',\r\n                'marker' : {'size': 4,  'symbol' : 0},\r\n                'name' : 'Minimal Working Example',\r\n                'line' : {'width' : 1.5,},\r\n         }\r\n\r\nfig = {'data': [trace]}\r\n\r\nplotly.offline.plot(\r\n        fig,  filename = 'mwe.html', image='svg', output_type='file',\r\n        image_filename = 'mwe', auto_open = False\r\n    )\r\n```\r\n\r\n![Screen Shot 2019-04-30 at 1 19 43 pm](https:\/\/user-images.githubusercontent.com\/3468451\/56939304-f4c7d680-6b4a-11e9-8d5b-9ffe25b0d0f0.png)\r\n![Screen Shot 2019-04-30 at 1 20 37 pm](https:\/\/user-images.githubusercontent.com\/3468451\/56939303-f42f4000-6b4a-11e9-9d25-4408337b239a.png)\r\n\r\nIn Inkscape, the `vector-effect:non-scaling-stroke` option also prevents you from editing the widths of lines. One [solution](https:\/\/graphicdesign.stackexchange.com\/questions\/117508\/scaling-with-zoom) is to manually change the XML code to `vector-effect:none` to stop this behaviour, although this is extremely tedious for figures with many traces.     \r\n\r\nI suspect the overwhelming majority of users would prefer `vector-effect:none` for their SVG images. If not, perhaps an option could be created so that the user could choose. I've had a brief look at the plotly source and suspect this needs to be implemented in Orca. If this sounds like a good idea, I would love to attempt the change myself, but will probably need some guidance as to where to look in the Orca code.  ","comments":["Thanks for the report and for sharing your experience here @eshort0401.\r\n\r\n@plotly\/plotly_js Do you all have any thoughts on whether the current difference in behavior between axis lines and scatter lines in SVG output is intentional?  Would removing `vector-effect:non-scaling-stroke` result in any change in appearance for figures when displayed live?","> Would removing `vector-effect:non-scaling-stroke` result in any change in appearance for figures when displayed live?\r\n\r\nIt wouldn't result in any visual changes on first draw, but it would on scroll zoom (see https:\/\/github.com\/plotly\/plotly.js\/issues\/1899).\r\n\r\nIt sounds to me like we could remove that `vector-effect:non-scaling-stroke` on static exports.","> It wouldn't result in any visual changes on first draw, but it would on scroll zoom (see plotly\/plotly.js#1899).\r\n> \r\n> It sounds to me like we could remove that vector-effect:non-scaling-stroke on static exports.\r\n\r\nThat would be my preference as a user. I think the non-scaling zoom behaviour makes sense for live figures, but not for static ones. \r\n","Thanks @etpinard, would you like this as a new plotly.js issue or as something to tack on to https:\/\/github.com\/plotly\/plotly.js\/issues\/1899?","Hi, I just stumbled upon this issue. Therefore, I wanted to ask if there is any progress on this, or a better workaround than rewriting manually the generated svg file. I am using this workaround:\r\n\r\n```\r\nimport io\r\n\r\n\r\ndef plotly_to_svg(file, fig, **kwargs):\r\n    buffer = io.BytesIO()\r\n    fig.write_image(buffer, format=\"svg\", **kwargs)\r\n    with open(file, \"bw\") as f:\r\n        f.write(\r\n            buffer.getvalue().replace(\r\n                b\"vector-effect: non-scaling-stroke\", b\"vector-effect: none\"\r\n            )\r\n        )\r\n\r\n\r\nplotly_to_svg(\"test.svg\", test_fig)\r\n```","No progress as yet. If anyone is motivated to make a PR to plotly.js we would happily help get it to completion. The suggestion above from @etpinard is definitely the way to go:\r\n\r\n> It sounds to me like we could remove that `vector-effect:non-scaling-stroke` on static exports.\r\n\r\nIdeally not as a post-processing step, but avoid adding that attribute in the first place when we see `gd._context.staticPlot`"],"labels":["plotly.js"]},{"title":"set the yaxis parameters(tickformat='p')","body":"I want to use percentage format(retain four decimal) ,When I set the yaxis parameters(tickformat='p'), but there are always some display problems. \r\n\r\nThis is my code:\r\n```\r\nimport plotly.offline as py\r\nfrom plotly.graph_objs import Scatter, Layout\r\nimport plotly.graph_objs as go\r\npy.init_notebook_mode(connected=True)\r\n\r\ntrace1=go.Scatter(\r\n    name=\"lenged2\",\r\n    x=['2018-01','2018-02','2018-03','2018-04','2018-05','2018-06','2018-07','2018-08','2018-09'],\r\n    y=[0.1,0.3,0.5,0.4,0.7,0.3,0.4,0.2,0.4,0.5], \r\n)\r\n\r\nlayout=go.Layout(\r\n    showlegend=True, \r\n    legend=dict(x=1.05,y=1.1),\r\n    xaxis=dict(showticklabels=True),\r\n    yaxis=dict(\r\n                tickformat='p',\r\n                showgrid=False,\r\n\r\n))\r\ndata=[trace1]\r\nfig=go.Figure(data=data, layout=layout)\r\npy.iplot(fig)\r\n```\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/47968090\/56843393-ac9e7f00-68d2-11e9-935e-24e9a016f051.png)\r\n\r\nAny help is greatly appreciated.\r\n\r\n","comments":["Hi @fenghuoqiuqiu, thanks for the report.  I've opened a corresponding issue with the JavaScript library at https:\/\/github.com\/plotly\/plotly.js\/issues\/3814.\r\n\r\nAs a workaround, you can manually specify the number of decimal places using the `'%'` format character.  For example:\r\n\r\n```python\r\nimport plotly.offline as py\r\nfrom plotly.graph_objs import Scatter, Layout\r\nimport plotly.graph_objs as go\r\npy.init_notebook_mode(connected=True)\r\n\r\ntrace1=go.Scatter(\r\n    name=\"lenged2\",\r\n    x=['2018-01','2018-02','2018-03','2018-04','2018-05','2018-06','2018-07','2018-08','2018-09'],\r\n    y=[0.1,0.3,0.5,0.4,0.7,0.3,0.4,0.2,0.4,0.5], \r\n)\r\n\r\nlayout=go.Layout(\r\n    showlegend=True, \r\n    legend=dict(x=1.05,y=1.1),\r\n    xaxis=dict(showticklabels=True),\r\n    yaxis=dict(\r\n                tickformat='.0%',\r\n                showgrid=False,\r\n\r\n))\r\ndata=[trace1]\r\nfig=go.Figure(data=data, layout=layout)\r\npy.iplot(fig)\r\n```\r\n![newplot-2](https:\/\/user-images.githubusercontent.com\/15064365\/56893134-ae418180-6a4f-11e9-877b-280b2c40e16e.png)\r\n","thank you for your help,but it remains an unsettling question,I want to use percentage format(retain four decimal,eg. 20.22%) .\r\nWhen I manually specify the number of decimal places using the '%' format character,it only retain two decimal.But when I use  the 'p' format character,there are always some display problems.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/47968090\/57189646-8799b400-6f43-11e9-8896-a9a86495935d.png)\r\n","> thank you for your help,but it remains an unsettling question,I want to use percentage format(retain four decimal,eg. 20.22%) .\r\n> When I manually specify the number of decimal places using the '%' format character,it only retain two decimal.But when I use  the 'p' format character,there are always some display problems.\r\n\r\n@jonmmease "],"labels":["plotly.js"]},{"title":"Sankey diagram breaks depending on the order of the trace.","body":"I'm trying to plot a Sankey diagram, and it breaks. Below is the simplest example with which I managed to reproduce the issue. Might be the same issue as #962, but I'm not using any subplot. \r\n\r\n```\r\nimport plotly\r\nimport plotly.graph_objs as go\r\n\r\nplotly.offline.plot(\r\n    {\r\n        \"data\": [\r\n            go.Sankey(\r\n                node=dict(\r\n                    label=[1, 2, 3, 4, 5],\r\n                    color=[\"blue\", \"blue\", \"blue\", \"blue\", \"blue\"],\r\n                ),\r\n                link=dict(\r\n                    source=[3, 3, 5, 3, 4, 1, 2, 1],\r\n                    target=[1, 5, 3, 4, 3, 5, 3, 2],\r\n                    value=[1, 1, 1, 1, 1, 1, 1, 1],\r\n                ),\r\n            )\r\n        ]\r\n    },\r\n    auto_open=True,\r\n)\r\n```\r\n\r\nWhen changing the order of the links, it works. \r\n```\r\nimport plotly\r\nimport plotly.graph_objs as go\r\n\r\nplotly.offline.plot(\r\n    {\r\n        \"data\": [\r\n            go.Sankey(\r\n                node=dict(\r\n                    label=[1, 2, 3, 4, 5],\r\n                    color=[\"blue\", \"blue\", \"blue\", \"blue\", \"blue\"],\r\n                ),\r\n                link=dict(\r\n                    source=[1, 3, 3, 5, 3, 4, 1, 2],\r\n                    target=[2, 1, 5, 3, 4, 3, 5, 3],\r\n                    value=[1, 1, 1, 1, 1, 1, 1, 1],\r\n                ),\r\n            )\r\n        ]\r\n    },\r\n    auto_open=True,\r\n)\r\n```\r\n\r\n","comments":["Thanks a lot for the report @adurivault.\r\n\r\nI reproduced the issue in JavaScript and opened https:\/\/github.com\/plotly\/plotly.js\/issues\/3813 to discuss with the Plotly.js folks.\r\n\r\nThis wasn't a cause of the error, but in case it wasn't clear to you I wanted to point out that the `source` and `target` arrays are zero-based indexes into the `node.label` array.  So a source\/target index of 1 will refer to the second node, the one with label \"2\" in your case.  And the source\/target index of 5 will refer to the 6th node, but since you only have 5 nodes this will result in a new black node with no label showing up in the diagram."],"labels":["bug","plotly.js"]},{"title":"Heatmap z and text missing array of array datatype in docs","body":"The documentation for Heatmap says that z and text should be a \r\n\r\n> list, numpy array, or Pandas series of numbers, strings, or datetimes\r\n\r\nHowever, it seems that the common usage would be to pass in a 2D array \/ list of lists for both z and text when constructing a heatmap?\r\n","comments":["Thanks for the suggestion @scott-- , I think this is something we could detect and improve in the docstring generation logic. "],"labels":["documentation"]},{"title":"Add react method to FigureWidget to replace full figure contents ","body":"It would be nice to have a `react` method on `FigureWidget` to be able to replace the entire figure contents in a single command.  This would be useful for updating a displayed `FigureWidget` with a new figure generated by a figure factory or `plotly_express`.\r\n\r\nCross reference: https:\/\/community.plot.ly\/t\/plotly-express-hover-selecting-event-only-partially-working\/22136 for ","comments":[],"labels":["enhancement"]},{"title":"jupyter notebook custom mapbox style loads blank page","body":"I have a custom mapbox style set on my `graph_objs.Layout()`; however, this renders a blank page. I can switch the plot to use `style='light'` and everything is fine. Here is an example of the broken `style` reference: https:\/\/plot.ly\/~calyxmatt\/3 (line 39)\r\n\r\nI have tried both online and offline plots without success. The token I am using has access to this style and I've even switched the style to public.\r\n\r\nI know others have reported 'hosted inline notebooks not rendering' but this isn't the issue. Even when I run the notebook locally I see something like: \r\n![image](https:\/\/user-images.githubusercontent.com\/1610241\/55989050-3eaf5200-5c5a-11e9-9371-2715f5712520.png)\r\n\r\nThis seems like a bug to me unless I'm doing something silly configuration wise?\r\n\r\nThanks!\r\n\r\n","comments":["Hi @wollerman, thanks for the report.\r\n\r\nCould you check out https:\/\/github.com\/plotly\/plotly.js\/issues\/3642 and see if you think you're having the same issue?","@jonmmease that seems to be the same issue. Pressing the home button does re-render the scatter points and the underlying style. Here's a screenshot after pressing the home button and zooming out:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/1610241\/56227013-62431580-6029-11e9-8f3b-42a4d71ec76d.png)\r\n\r\nI'll defer to you on closing this and tracking the other issue or not.\r\n\r\nThanks!\r\n"],"labels":["question"]},{"title":"Mix of Scatter and Scattergl - Scattergl is always on top","body":"A typical use case for me is to have a bunch of scatterpoints (need Scattergl), and then fit a line through them (ideally with normal Scatter). However, no matter the order of the traces, Scattergl always seems to end on top (and hence the line disappears below the scatter points). Ideally, the order of the traces should be retained (no matter if it's a Scatter or Scattergl). Even better would be a zorder parameter (as in matplotlib), where we don't need to worry about the order in which we add the traces to the data.\r\n\r\nHere's some code to reproduce the bug:\r\n \r\n```\r\nimport plotly.offline as py\r\nimport plotly.graph_objs as go\r\n\r\ntrace_scatter = go.Scattergl(x=[1, 2, 3, 4], y=[1, 2, 3, 4], mode='markers')\r\ntrace_line = go.Scatter(x=[1, 4], y=[1, 4], mode='lines')\r\n# line trace is placed last, so should end up top - but it doesn't\r\ndata = [trace_scatter, trace_line]\r\npy.iplot(data)\r\n```\r\n\r\nIf Scattergl is replaced by Scatter, the line is correctly drawn up top. I tested this in offline mode but assume the same is true in online mode. I'm new to plotly so I don't know enough about its inner workings to do a pull request right now (if really needed, with some pointings in the right direction, I could take a look).\r\n","comments":["Hi @wouterdobbels, thanks for the suggestion.\r\n\r\nSee https:\/\/github.com\/plotly\/plotly.js\/issues\/3748 for a recent discussion of this in the plotly.js project.  Feel free to chime in there if you have API suggestions."],"labels":["enhancement"]},{"title":"No fixed size for arrow heads in Quiver Plot","body":"While plotting two or more vectors using quiver plots arrows heads are scaled with respect to barb length. No option for having arrow heads of fixed size as depicted in attached file. Please add option for the same.Here is the code:\r\n\r\nfrom plotly import tools\r\nfrom plotly.offline import download_plotlyjs, plot, iplot, init_notebook_mode\r\nimport plotly.graph_objs as go\r\nimport plotly.figure_factory as ff\r\nimport numpy as np\r\n\r\ninit_notebook_mode(connected=True)\r\n\r\nlayout=go.Layout(xaxis=dict(range=[-10,10],dtick=1),\r\n                  yaxis=dict(range=[-10,10],dtick=1, ticks='outside'),\r\n                 width=900, height=900)\r\n\r\nv=np.array([[1,1],[-2,2], [4,7]])\r\nx, y = [0,0,0], [0,0,0]\r\nfig= ff.create_quiver(x, y, v[:,0], v[:,1], scale=1)\r\nfig.layout.update(layout)\r\niplot(fig)\r\n![vector](https:\/\/user-images.githubusercontent.com\/48869845\/55892732-7b386a80-5bd4-11e9-88d5-862d46da501f.png)\r\n","comments":["Would unit-vectoring and then multiplying the barbs `end_x` and `end_y` each by `sqrt(fixed_size)` in `get_barbs` be an acceptable implementation?\r\n\r\nhttps:\/\/github.com\/plotly\/plotly.py\/blob\/ce0ed07d872c487698bde9d52e1f1aadf17aa65f\/packages\/python\/plotly\/plotly\/figure_factory\/_quiver.py#L177-L197\r\n"],"labels":["enhancement","figure_factory"]},{"title":"Heatmap categorical axis not recognized as categorical","body":"I was trying to create an heat-map offline and the categorical axis is not recognized properly.\r\nIn the following example, the X axis is interpreted as numerical values and the heat-map is empty. \r\n\r\n```mport numpy as np\r\nimport plotly.graph_objs as go\r\nfrom plotly.offline import init_notebook_mode, iplot\r\nimport plotly\r\nprint(plotly.__version__)    #3.7.1\r\ninit_notebook_mode()\r\n\r\ntrace = go.Heatmap(z=np.random.rand(2, 9), y=[\"A\", \"B\"], x=[\"1E1\", \"2A1\", \"3E2\", \"2A2\", \"1A1\", \"3A1\", \"1E2\", \"3E3\", \"1A2\"],  colorscale=\"Viridis\")\r\niplot([trace])\r\n```\r\n\r\n![Empty](https:\/\/user-images.githubusercontent.com\/1944849\/55827054-4f838a80-5ad7-11e9-9d83-78899212fa39.png)\r\n","comments":["Thanks for the report @plpla,\r\n\r\nThis seems to be an issue with the Plotly.js logic for automatically choosing the axis type.  The workaround is be explicit that you want a categorical x-axis\r\n\r\n```python\r\nimport plotly.graph_objs as go\r\nimport numpy as np\r\n\r\nfrom plotly.offline import init_notebook_mode, iplot\r\nimport plotly\r\nprint(plotly.__version__)    #3.7.1\r\ninit_notebook_mode()\r\n\r\ntrace = go.Heatmap(z=np.random.rand(2, 9),\r\n                   y=[\"A\", \"B\"],\r\n                   x=[\"1B1\", \"2A1\", \"3E2\", \"2A2\", \"1A1\", \"3A1\", \"1E2\", \"3E3\", \"1A2\"],\r\n                   colorscale=\"Viridis\")\r\nfig = go.Figure(data=[trace],\r\n                layout={'xaxis': {'type': 'category'}})\r\niplot(fig)\r\n```\r\n![newplot (16)](https:\/\/user-images.githubusercontent.com\/15064365\/55873654-3671ec80-5b5e-11e9-91a9-45d4746e2534.png)\r\n\r\n@plotly\/plotly_js How does the categorical axis detection algorithm work?  Is it getting thrown off because some of these strings contain representations of valid numbers?","Ha, our auto-type algo must think `3E2` is `300` in exponential notation. Switching those `E` to e.g. `B` seems to make things work ok: https:\/\/codepen.io\/etpinard\/pen\/oOZeXp?editors=1010","The full algo is here: https:\/\/github.com\/plotly\/plotly.js\/blob\/54586b86e09b34aa1a669cdf30e088e36dd32cd0\/src\/plots\/cartesian\/axis_autotype.js","the operative part of that link above is `\/\/ require twice as many DISTINCT categories as distinct numbers` so basically all the `xEy` count as distinct numbers and the others as categories."],"labels":["question"]},{"title":"Sankey Diagram Not Resolving HTML Tags in Labels","body":"When using html tags in the labels of a Sankey diagram the html itself is displayed rather than the resolved form (even though in the hover labels it is resolved).\r\n\r\nI have added an example of code that generates this error below:\r\n\r\n\r\n```\r\nimport plotly\r\n\r\ndata = dict(\r\n    type='sankey',\r\n    node = dict(\r\n      pad = 15,\r\n      thickness = 20,\r\n      line = dict(\r\n        color = \"black\",\r\n        width = 0.5\r\n      ),\r\n      label = ['<a href=\"https:\/\/plot.ly\/python\/sankey-diagram\/\">A1<\/a>', \r\n                '<a href=\"https:\/\/plot.ly\/python\/sankey-diagram\/\">A2<\/a>', \r\n                '<a href=\"https:\/\/plot.ly\/python\/sankey-diagram\/\">B1<\/a>', \r\n                '<a href=\"https:\/\/plot.ly\/python\/sankey-diagram\/\">B2<\/a>', \r\n                '<a href=\"https:\/\/plot.ly\/python\/sankey-diagram\/\">C1<\/a>', \r\n                '<a href=\"https:\/\/plot.ly\/python\/sankey-diagram\/\">C2<\/a>'],\r\n      color = [\"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\"]\r\n    ),\r\n    link = dict(\r\n      source = [0,1,0,2,3,3],\r\n      target = [2,3,3,4,4,5],\r\n      value = [8,4,2,8,4,2]\r\n  ))\r\n\r\nlayout =  dict(\r\n    title = \"Basic Sankey Diagram\",\r\n    font = dict(\r\n      size = 10\r\n    )\r\n)\r\n\r\nfig = dict(data=[data], layout=layout)\r\nplotly.offline.plot(fig, filename = 'issue.html', auto_open=True)\r\n\r\n\r\n```","comments":["Thanks for the report @JMante1.  @antoinerg, as things stand right now, do you expect HTML formatting to work in Sankey labels?  Thanks!","Thank you @JMante1 for reporting this issue!\r\n\r\n> do you expect HTML formatting to work in Sankey labels?\r\n\r\n@jonmmease I expected it to work but it seems like this feature wasn't implemented. I would consider this is a bug. I opened an issue here: https:\/\/github.com\/plotly\/plotly.js\/issues\/3742\r\n","Thanks @antoinerg!","The same happens for `parcats`:\r\n\r\nThe following code:\r\n\r\n```python\r\n    dim_nuevas = go.parcats.Dimension(\r\n        values=df[elecciones_nuevas],\r\n        categoryorder='category ascending',\r\n        label='Elecciones Nuevas<br>'\r\n    )\r\n```\r\n\r\nWill result in:\r\n\r\n![newplot](https:\/\/github.com\/plotly\/plotly.py\/assets\/46565164\/79d14074-8aa9-4d94-a67b-a76091d30330)"],"labels":["bug","plotly.js"]},{"title":"Interface with animation options in Plotly.js","body":"Currently there is no option to access the animation options of Plotly.js from python. This makes it extremely difficult to make proper animations since the default time between frames in 500ms. I have added an extra keyword argument to offline.plot and offline.iplot called animation opts which allows the user to pass a python dictionary through and thus customize animations. \r\n\r\n```\r\nanimation_opts (default=None) -- Custom animation parameters to be passed\r\n    to the function Plotly.animate in Plotly.js in the form str(dict)\r\n    Example:\r\n\r\n\r\nfrom plotly.offline import plot\r\n    figure = {'data': [{'x': [0, 1], 'y': [0, 1]}],\r\n              'layout': {'xaxis': {'range': [0, 5], 'autorange': False},\r\n                         'yaxis': {'range': [0, 5], 'autorange': False},\r\n                         'title': 'Start Title'},\r\n              'frames': [{'data': [{'x': [1, 2], 'y': [1, 2]}]},\r\n                         {'data': [{'x': [1, 4], 'y': [1, 4]}]},\r\n                         {'data': [{'x': [3, 4], 'y': [3, 4]}],\r\n                          'layout': {'title': 'End Title'}}]}\r\n    plot(figure,animation_opts=\"{frame: {duration: 1}}\")\r\n```\r\n \r\n[https:\/\/github.com\/TakodaS\/plotly.py](https:\/\/github.com\/TakodaS\/plotly.py)\r\n","comments":["Hi @TakodaS, this sounds like a fine option to add.  Feel free to open a pull request if you already have an implementation to start with :slightly_smiling_face: Although it would need to be reworked a little once we merge https:\/\/github.com\/plotly\/plotly.py\/pull\/1474, which will hopefully be this week.\r\n"," #1503 Done. "],"labels":["enhancement"]},{"title":"Gantt chart legend scrolls dues to extra legend entries","body":"The gantt chart legend sometimes scrolls unnecessarily. \r\n\r\nCross references:\r\n - Community forums thread: https:\/\/community.plot.ly\/t\/gantt-chart-set-legend-colorbar-at-the-top-of-chart\/14733\/19.\r\n - PR that addressed legend entries being pushed to the bottom: https:\/\/github.com\/plotly\/plotly.py\/pull\/1110\r\n\r\n```python\r\nimport pandas as pd\r\nfrom plotly.offline import init_notebook_mode, iplot\r\nimport plotly.figure_factory as ff\r\ninit_notebook_mode()\r\n\r\ndf1 = pd.DataFrame({'TaskName': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'I', 'J', 'K'],\r\n                'StartDate1' : ['2019-03-27 00:00:00','2019-03-27 00:00:30', '2019-03-27 00:01:00', '2019-03-27 00:01:30', '2019-03-27 00:01:40',\r\n                             '2019-03-27 00:02:30', '2019-03-27 00:03:00', '2019-03-27 00:03:30', '2019-03-27 00:04:00', '2019-03-27 00:04:30'],\r\n                'EndDate1': ['2019-03-27 00:03:00', '2019-03-27 00:03:20', '2019-03-27 00:04:10', '2019-03-27 00:03:40', '2019-03-27 00:05:50',\r\n                            '2019-03-27 00:06:40', '2019-03-27 00:07:10', '2019-03-27 00:08:00', '2019-03-27 00:08:20', '2019-03-27 00:08:40'],\r\n                'StartDate2' : ['2019-03-27 00:03:00', '2019-03-27 00:03:20', '2019-03-27 00:04:10', '2019-03-27 00:03:40', '2019-03-27 00:05:50',\r\n                            '2019-03-27 00:06:40', '2019-03-27 00:07:10', '2019-03-27 00:08:00', '2019-03-27 00:08:20', '2019-03-27 00:08:40'],\r\n                'EndDate2': ['2019-03-27 00:04:00', '2019-03-27 00:04:20', '2019-03-27 00:05:10', '2019-03-27 00:05:40', '2019-03-27 00:06:50',\r\n                            '2019-03-27 00:07:40', '2019-03-27 00:08:10', '2019-03-27 00:09:00', '2019-03-27 00:09:20', '2019-03-27 00:09:40']})\r\n\r\ndef gantt_fig3(df1):\r\n    data3 = []\r\n    for row in df1.itertuples():\r\n        data3.append(dict(Task=str(row.TaskName), Start=str(row.StartDate1),\r\n                      Finish=str(row.EndDate1), Resource='Resource1'))\r\n        data3.append(dict(Task=str(row.TaskName), Start=str(row.StartDate2),\r\n                      Finish=str(row.EndDate2), Resource='Resource2'))\r\n\r\n\r\n    fig = ff.create_gantt(data3, index_col='Resource', title='Gantt Chart', show_colorbar = True, group_tasks = True , height=500, width=1300 )\r\n    fig['layout'].update(legend=dict(traceorder='reversed'))\r\n    return fig\r\n\r\niplot(gantt_fig3(df1))\r\n```\r\n![Screenshot_20190404_072724](https:\/\/user-images.githubusercontent.com\/15064365\/55552349-1d26f700-56ab-11e9-8b78-79c17a164736.png)\r\n","comments":[],"labels":["bug"]},{"title":"Sorting issues with multicategories","body":"Hello,\r\n\r\nas you can see here my chart is not correctly sorted by the x-axis and the line goes back which is really not an expected behavior.\r\n\r\n![troubleshoot_axis_sort_multicat](https:\/\/user-images.githubusercontent.com\/40694343\/55495687-c6370880-563d-11e9-8940-065e1019dabc.png)\r\n\r\nI found out that a workaround is to add \"missing\" x labels (as in missing months in this case, see below) with None in y values  but in my case it is very impractical.\r\n\r\n![troubleshoot_axis_sort_multicat_workaround](https:\/\/user-images.githubusercontent.com\/40694343\/55496346-1fec0280-563f-11e9-86f1-d635e0a3b505.png)\r\n\r\nFirst of all it will make the graph overly large (spans over 5 years in some cases but I do not have data for all months, far from that). Also I'm using this graph with dash and the data gets transformed a lot which makes adding missing labels quite tedious.\r\n\r\nEDIT:\r\n\r\nAnother option you might think is to just use the month names in this case. Turns out that does not work either:\r\n\r\n![multicategories_sorting_issues_update](https:\/\/user-images.githubusercontent.com\/40694343\/55509151-c219e380-565b-11e9-8f40-c81b38065621.png)\r\n\r\n\r\nThanks in advance for checking out the issue,\r\n\r\nThibault\r\n\r\n# Reproducible example with version 3.7.1 in offline mode\r\n\r\n```\r\nimport plotly.graph_objs as go\r\n\r\n\r\n\r\nx_axis = [[2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2018, 2018,2018, 2018], \r\n             [4, 5, 6, 8, 9, 10, 11, 12, 1, 2, 3, 4]]\r\ny1 = [ 57246.,   1587.,  63189.,  30680.,  26071., 117519.,  27519.,  42643., 8559.,  22355.,  59363.,  62955.]\r\ny2 = [0.22991999, 0.27284184, 0.18438336, 0.24866362, 0.18280848, 0.19382398, 0.17268069, 0.18802617, 0.17560463, 0.13415343, 0.14773512, 0.31319196]\r\n\r\n\r\n# all arrays must have the same length\r\nassert len(x_axis[0]) == len(x_axis[1]) == len(y1) == len(y2)\r\n\r\n\r\ntest_figure = go.Figure({\r\n    'data': [{'name': 'Fruits',\r\n              'type': 'bar',\r\n              'x': x_axis,\r\n              'y': y1},\r\n             \r\n             {'name': 'Price',\r\n              'type': 'scatter',\r\n              'x': x_axis,\r\n              'y': y2,\r\n              'yaxis': 'y2'}],\r\n    \r\n    \r\n    'layout': {'height': 600,\r\n               'showlegend': True,\r\n               'yaxis': {'showgrid': True, 'title': {'text': 'Fruits volume'}},\r\n               'yaxis2': {'anchor': 'x',\r\n                          'overlaying': 'y',\r\n                          'showgrid': False,\r\n                          'side': 'right',\r\n                          'title': {'text': 'Price per unit'}}}\r\n})\r\n\r\n\r\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\r\niplot(test_figure)\r\n```\r\n\r\n# Related issue on plotly.js\r\n\r\nThe issue I'm describing here should have been fixed in version 1.43.1 of plotly.js.\r\nSee https:\/\/github.com\/plotly\/plotly.js\/blob\/master\/CHANGELOG.md#1431----2018-12-21\r\n(issue 3362)\r\n\r\nEven though plotly.py uses a superior version as you can see there is still an issue.","comments":["Thanks for the report @ThibTrip, I've opened https:\/\/github.com\/plotly\/plotly.js\/issues\/3723 to discuss with the plotly.js team.","Just dropping another example:\r\n\r\nNote the commented line in `data` which also reverese the sub category sorting.\r\n\r\n```python\r\nimport pandas as pd\r\nimport plotly.graph_objects as go\r\n\r\ndata = [\r\n    [0, \"Born\", 4, \"Rhino\"],  # commenting this line will also reverse sub category sorting\r\n    [0, \"Died\", -1, \"Rhino\"],\r\n    [1, \"Born\", 4, \"Lion\"],\r\n    [1, \"Died\", -1, \"Lion\"],\r\n    [2, \"Born\", 12, \"Rhino\"],\r\n    [2, \"Died\", -5, \"Lion\"],\r\n]\r\nz_data = list(zip(*data))\r\n\r\ndf = pd.DataFrame({\r\n    \"tick\": z_data[0],\r\n    \"category\": z_data[1],\r\n    \"value\": z_data[2],\r\n    \"type\": z_data[3],\r\n})\r\ndf = df.sort_values(by=['tick', 'category', 'value', 'type'])\r\nprint(df)\r\nfig = go.Figure()\r\nfor t in df.type.unique():\r\n    plot_df = df[df.type == t]\r\n    fig.add_trace(go.Bar(\r\n        x=[plot_df.tick, plot_df.category],\r\n        y=abs(plot_df.value),\r\n        name=t,\r\n    ))\r\nfig.update_layout({\r\n    'barmode': 'stack',\r\n    'xaxis': {\r\n        'title_text': \"Tick\",\r\n        'tickangle': -90,\r\n    },\r\n    'yaxis': {\r\n        'title_text': \"Value\",\r\n    },\r\n})\r\nfig.write_html(str(\".\/diagram.html\"))\r\n```\r\n\r\n![uncommented](https:\/\/i.stack.imgur.com\/mJ9uv.png)\r\n![commented](https:\/\/i.stack.imgur.com\/wKEA7.png)"],"labels":["bug","plotly.js"]},{"title":"Drawing of hatched histogram","body":"I would like to make a histogram that is hatched to add it to my paper, so that the black and white printing is readable. I could not find this option.","comments":["Hi @mahmoudnabil, unfortunately I don't think hatching is possible.  You're welcome to open a request with the plotly.js project at https:\/\/github.com\/plotly\/plotly.js\/issues to discuss the feasibility of adding this.  Thanks!"],"labels":["enhancement","plotly.js"]},{"title":"x-axis errorbars fail on Scatter with datetime axis","body":"X-axis error bars do not show up when using date times with scatter plots. There's a small chance I'm just getting the syntax wrong here, but I've tried a bunch of variants. \r\n\r\nReproducible example: (I ran this in a jupyter notebook but I've seen the same behavior in a dash app.)\r\n\r\n```\r\nimport numpy as np\r\nimport pandas as pd\r\nimport time\r\n\r\nimport plotly.graph_objs as go\r\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\r\nimport plotly.plotly as py\r\n\r\nt0 = time.time()\r\nt1 = t0 + 1e2\r\nt2 = t0 + 2e2\r\n\r\nxs = pd.to_datetime(np.array([t0,t1,t2])*1e9)\r\n\r\ndata = [\r\n    go.Scatter(\r\n        x=xs,\r\n        y=[6, 10, 2],\r\n        error_x=dict(\r\n            type='data',\r\n            array=[pd.to_datetime(t2*1e9)-pd.to_datetime(t1*1e9), pd.to_datetime(t2*1e9)-pd.to_datetime(t1*1e9),  pd.to_datetime(t2*1e9)-pd.to_datetime(t1*1e9)],\r\n            visible=True\r\n        )\r\n    )\r\n]\r\n\r\niplot(data)\r\n\r\n\r\ndata = [\r\n    go.Scatter(\r\n        x=xs,\r\n        y=[6, 10, 2],\r\n        error_x=dict(\r\n            type='data',\r\n            symmetric=False,\r\n            array=[pd.to_datetime(t2*1e9), pd.to_datetime(t2*1e9), pd.to_datetime(t2*1e9)],\r\n            arrayminus=[pd.to_datetime(t1*1e9), pd.to_datetime(t1*1e9), pd.to_datetime(t1*1e9)],\r\n            visible=True\r\n        )\r\n    )\r\n]\r\n\r\niplot(data)\r\n\r\ndata = [\r\n    go.Scatter(\r\n        x=xs,\r\n        y=[6, 10, 2],\r\n        error_x=dict(\r\n            type='data',\r\n            array=[t1-t2, t1-t2, t1-t2],\r\n            visible=True\r\n        )\r\n    )\r\n]\r\n\r\niplot(data)\r\n```","comments":["Thanks for the report @Sakrejda-atsu, I've opened https:\/\/github.com\/plotly\/plotly.js\/issues\/3722 in the plotly.js project to discuss with the plotly.js team.  One note is that for ploty.js, the numeric representation of dates is in milliseconds rather than nanoseconds (like pandas).\r\n\r\nSo the example that I would have expected to work is\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport time\r\n\r\nimport plotly.graph_objs as go\r\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\r\ninit_notebook_mode()\r\n\r\nt0 = time.time()\r\nt1 = t0 + 1e2\r\nt2 = t0 + 2e2\r\n\r\nxs_numeric = np.array([t0,t1,t2])*1e3\r\nxs = pd.to_datetime(xs_numeric)\r\n\r\ndata = [\r\n    go.Scatter(\r\n        x=xs_numeric,\r\n        y=[6, 10, 2],\r\n        error_x=dict(\r\n            type='data',\r\n            array=[t2*1e3 - t1*1e3, t2*1e3 - t1*1e3,  t2*1e3 - t1*1e3],\r\n            visible=True\r\n        )\r\n    )\r\n]\r\n\r\nlayout = go.Layout(xaxis={'type': 'date'})\r\n\r\nfig = go.Figure(data, layout=layout)\r\niplot(fig)\r\n```\r\n![newplot-6](https:\/\/user-images.githubusercontent.com\/15064365\/55545968-57d56300-569c-11e9-9bd7-5b02f0529bfc.png)\r\n\r\nBut still no error bars appear.\r\n","as you might expect, the same issue occurs in plotly express. I did something generally like:\r\n```python\r\npx.scatter(\r\n    my_df,\r\n    x='timestamp',\r\n    y='some numeric column',\r\n    error_x='timedelta column'\r\n)\r\n```\r\nchanging `error_x` to `error_y` makes the error bars show up on the numeric axis, but they won't show up on the X axis where I want them.","In the end I went with gantt charts for representing this type of data\/prediction. I hope it may serve as a useful alternative for anyone who looks up this issue. I probably should have started there anyway, given what I was trying to represent. "],"labels":["bug","plotly.js"]},{"title":"Could we add \"paper\" as an x and y anchor for choropleth colorbars?","body":"I'm able to set them as paper in plotly chart studio, but I'm not able to do this in my application because of a value error. I took a peak at the [choropleth validator xanchor](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/plotly\/validators\/choropleth\/colorbar\/_xanchor.py), but wasn't to sure how to make the changes myself so I thought I would try and first see if this would be an easy fix. \r\n\r\nThe error I get is:\r\n```\r\nInvalid value of type 'builtins.str' received for the 'xanchor' property of choropleth.colorbar\r\n        Received value: 'paper'\r\n\r\n```","comments":["For reference: https:\/\/plot.ly\/create\/?fid=mbkupfer:8&fid=mbkupfer:7#\/\r\n","Hi @mbkupfer, thanks for the suggestion.\r\n\r\nThe `'paper'` coordinate specification is usually associated with the `xref`\/`yref` properties. e.g. `fig.layout.shape.xref = 'paper'`.  The `xanchor` property is used to specify which point on the object is being positioned by `x` and `y`.\r\n\r\nColorbars don't have `xref`\/`yref` properties because, I believe, they are always specified in `'paper'` coordinates.  They don't offer, for example, the ability to position them with respect to individual `xaxis`\/`yaxis` pairs.\r\n\r\nI haven't looked at the code in chart studio for this, but does it offer options other than `'paper'` for position the colorbar?","Hi @jonmmease , my issue was the result of the colorbar overlapping the plot so I figured setting it to paper would force it to not. That said, I think I figured out how to properly configure the colorbar to not do that. \r\n\r\n>I haven't looked at the code in chart studio for this, but does it offer options other than 'paper' for position the colorbar?\r\n\r\nIt doesn't specifically mention this, but it does allow me to set it. From the choropleth docstrings, the only options I see are `'left', 'center', 'right'`\r\n\r\nAll in all, I think this is just a question of configuration so feel free to close if the colorbar is in fact always specified in `paper`."],"labels":["question"]},{"title":"Latin1 encoding errors when exporting with orca","body":"I have a problem exporting plots using LATIN1 encoding for characters. When I produce the plot with the plotly command, it works well but when I export it with ocra, the encoding goes wrong for some characters (for example, le spanish '\u00e1' becomes '\ufffd' as the character is unknown - \ufffd = Unicode U+FFFD replacement for unrecognized character). I export simply with:\r\n\r\n```\r\norca(p, file = \"myplot.png\", width = 1000, height = 500, format = \"png\", scale = 1)\r\n```\r\n\r\nShould I do something within the orca command to plot those characters correctly?\r\n","comments":["Hi @mgfasel-unige, thanks for the report.\r\n\r\nCould you share a full example, including the definition of the figure?  Also, plotly.py doesn't have an `orca` function. What language\/library are you using?  Thanks!","Hi,\r\n\r\nThanks, I use the R plotly library.\r\n\r\nHere is an example:\r\n\r\n```\r\nex  <- data.frame(region = c(\"Par\u00e1\", \"Par\u00e1\", \"Par\u00e1\", \"Par\u00e1\", \"Par\u00e1\", \"Region2\", \"Region2\", \"Region2\", \"Region2\", \"Region2\", \"Region3\", \"Region3\", \"Region3\", \"Region3\", \"Region3\"),\r\n                  country = c(\"Brazil\", \"Brazil\", \"Brazil\", \"Brazil\", \"Brazil\", \"Country2\", \"Country2\", \"Country2\", \"Country2\", \"Country2\", \"Country3\", \"Country3\", \"Country3\", \"Country3\", \"Country3\"),\r\n                  var = c(\"VAR1\", \"VAR1\", \"VAR1\", \"VAR1\", \"VAR1\", \"VAR1\", \"VAR1\", \"VAR1\", \"VAR1\", \"VAR1\", \"VAR1\", \"VAR1\", \"VAR1\", \"VAR1\", \"VAR1\"),\r\n                  value = c(2,5,7,5,4,3,9,5,7,5,3,7,6,9,3))\r\np <- plot_ly(ex) %>%\r\n  add_trace(x = ~region, y = ~value,\r\n            color = ~country, fillcolor = ~country, opacity = 1.0,\r\n            type = 'box', boxpoints = \"all\", jitter = 0.0,\r\n            pointpos = 0, line = list(width = 1),\r\n            marker = list(color = '#000000', opacity = .8, size = 2),\r\n            orientation = \"v\", showlegend = T) %>%\r\n  layout(xaxis = list(title = 'Region', tickangle = 270, zeroline = FALSE,\r\n                      categoryorder = \"array\",\r\n                      categoryarray = c(unique(ex$country))),\r\n         yaxis = list(title = 'Value', zeroline = FALSE),\r\n         boxmode = \"group\", boxgap = 0.05, boxgroupgap = 0.3,\r\n         legend = list(bgcolor = 'transparent'))\r\np\r\nplotly_IMAGE(p, width = 600, height = 400, format = \"png\", scale = 1, dpi = 600,\r\n             out_file = paste0(\"D:\/Ex01a.png\"))\r\nsetwd(paste0(\"D:\/\"))\r\norca(p, file = paste0(\"Ex01b.png\"),\r\n     width = 600, height = 400, format = \"png\", scale = 1)\r\n```\r\n\r\nThe plotly'IMAGE command results in:\r\n![Ex01a](https:\/\/user-images.githubusercontent.com\/48024091\/55423637-9d037300-557e-11e9-945b-24d0e2c2ba23.png)\r\n\r\nWhile the orca command results in (note the \u00e1 in the Par\u00e1 label):\r\n![Ex01b](https:\/\/user-images.githubusercontent.com\/48024091\/55423660-a5f44480-557e-11e9-86f2-5077dbc6fecf.png)\r\n\r\n","I understand now that this thread is for Python. I will post it for R. Thanks..","I posted the issue in the orca thread. You can delete it here if better. Thanks again."],"labels":["question"]},{"title":"Helper for Table trace from pandas","body":"I know there is a `plotly.figure_factory.create_table` which can rake my pandas dataframe and create a table using the heatmap trace-type:\r\n```python\r\ndf = pd.DataFrame({'a': [1,2,3,4], 'b': [4,3,2,2]})\r\nfig = ff.create_table(df)\r\npy.plot(fig)\r\n```\r\n\r\nBut now that there is a go.Table trace type available, it would be awesome to have the `cells` and `header` attributes of this be auto populated from a pandas dataframe.\r\n\r\nSo, this is a feature request for a helper that converts a pd.DataFrame into a go.Table() to make it more pythonic to create that.","comments":["Currently, I need to do:\r\n```\r\ndf = pd.DataFrame({'a': [1,2,3,4], 'b': [4,3,2,2]})\r\nfig = go.Figure(\r\n    [go.Table(header={'values': df.columns}, cells={'values': [df[i] for i in df.columns]})],\r\n)\r\npy.iplot(fig)\r\n```\r\nBut there is so much other info in a pandas DataFrame that can be visualized nicely (done by the [to_html()](https:\/\/github.com\/pandas-dev\/pandas\/blob\/96a128eaa0a7425dd4285d219780ef29c2727e46\/pandas\/io\/formats\/html.py#L21) in pandas):\r\n - If an index is present, show the index in the left automatically\r\n - if the multi-index is present, show that nicely in the table\r\n - If the index is visualized, automatically highlight that with a `cells.fill.color` attribute\r\n","Thanks for the suggestion @AbdealiJK,\r\n\r\nThis might be a good fit for the new `plotly_express` library:  https:\/\/github.com\/plotly\/plotly_express\r\n\r\nWhat do you think @nicolaskruchten.  Something like:\r\n\r\n```python\r\nimport plotly_express as px\r\npx.table(df) # All columns, and index\r\npx.table(df, columns = [col1, col2, col3], index=False)  # three columns, no index\r\npx.table(df, color=col3)  # all columns, color rows by `col3`\r\n```\r\nOther inspiration: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/style.html\r\n\r\n-Jon","great idea! I've created an issue here https:\/\/github.com\/plotly\/plotly_express\/issues\/41 to continue the conversation","I'm sorry if this is a naive and slightly unrelated question. Could you help me understand what python express aims to do which is different from plotly.py ?\r\nCurrently it looks to me as:\r\n - plotly.py is a thin wrapper around plotly.js with the exact same attributes and so on\r\n - plotly-express is a python API to create plots powered by plotly.js (via plotly.py)\r\nIs that right? ","That's right! Plotly Express is meant to make it easier\/faster to build Plotly.py figures, often in just a single function call instead of dozens of lines of imperative code. The output of all `px` calls is a full `Figure` object that can then be customized at will. \r\n\r\nThis article has lots more info https:\/\/medium.com\/@plotlygraphs\/introducing-plotly-express-808df010143d"],"labels":["enhancement"]},{"title":"Add figure composition with overloading operator","body":"Hi,\r\n\r\nI found really useful overloading operators `+` and `*` to compose figure objects, as inspired in the [holoview library](http:\/\/holoviews.org\/user_guide\/Composing_Elements.html)\r\nHave you ever considered this feature ? ","comments":["Hi @mazzma12,\r\n\r\nYes, I like this approach a lot.  I actually implemented the subplotting logic for the HoloViews plotly backend.  It's implemented as the `figure_grid` function in https:\/\/github.com\/pyviz\/holoviews\/blob\/master\/holoviews\/plotting\/plotly\/util.py.\r\n\r\nHoloviews only supports a subset of plotly's constructs, so this implementation isn't sufficient for inclusion in plotly.py directly, but it would be a good starting point.\r\n\r\nAlso for reference, any new subplotting features are going to need to take into account the coming integration of `plotly_express` and it's plot faceting support.","Hi @jonmmease \r\n\r\nInteresting to see that there is a plotly backend for HV, I'll give it a try. \r\n\r\n> Holoviews only supports a subset of plotly's constructs, so this implementation isn't sufficient for inclusion in plotly.py directly, but it would be a good starting point.\r\n\r\nCan't you support it for a few simple structures s.a Scatter and let it fails with `NotImplementedError` Otherwise (or maybe I don't see the big picture)\r\n> Also for reference, any new subplotting features are going to need to take into account the coming integration of `plotly_express` and it's plot faceting support.\r\n\r\nI understand, actually, I hesitated reporting the request there but thought it was better to start it in the initial project.\r\n\r\n\r\n","It's 2022 and this feature still would be super useful! "],"labels":["enhancement","make_subplots"]},{"title":".pop()","body":"Just to make things feel a bit more `dict`-like, everywhere we accept `.update(key=None)` we should also accept `.pop(\"key\")`.","comments":["Looking at mutable mapping (https:\/\/docs.python.org\/3\/library\/collections.abc.html) folks might also expect \r\n- `popitem`\r\n- `clear`\r\n- `keys`\r\n- `items`\r\n- `values`\r\n- `setdefault`\r\n\r\nbut I think that `pop` is probably the most common of these.","This dict-like `.pop(\"key\")` seems to work on basic examples such as the below\r\n\r\n```\r\nimport plotly.graph_objects as go\r\n\r\ndict_of_fig = dict({\r\n    \"data\": [{\"type\": \"bar\",\r\n              \"x\": [1, 2, 3],\r\n              \"y\": [1, 3, 2]}],\r\n    \"layout\": {\"title\": {\"text\": \"A Figure Specified By A Graph Object With A Dictionary\"}}\r\n})\r\n\r\nfig = go.Figure(dict_of_fig)\r\n\r\nfig.pop(data)\r\n\r\nfig.show()\r\n```\r\n\r\nThis pops the data and then shows an empty bar chart.\r\n\r\nWas this issue resolved?","Some\/most of the collections methods work in some\/most places, but I don't think we converged on a real policy here and therefore left this issue open."],"labels":["enhancement"]},{"title":"Scattergl points disappear on FigureWidget update","body":"When I do a scattergl interactive plot with too many points the points disappear and the following error is output.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/24592596\/54996952-8bd8c600-4fc2-11e9-854a-6aea99fd79cd.png)\r\n\r\n<details>\r\n<summary>Reproducible example<\/summary>\r\n\r\n```python\r\nimport plotly.offline as py  # 3.7.1\r\nimport plotly.graph_objs as go\r\nimport datashader as ds  # 0.6.9\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\n\r\ndef ds_image_to_data(x_range, y_range, plot_width, plot_height):\r\nif x_range is None or y_range is None or plot_width is None or plot_height is None:\r\n    return None\r\n\r\ncvs = ds.Canvas(x_range=x_range, y_range=y_range, plot_height=plot_height, plot_width=plot_width)\r\nagg_scatter = cvs.points(df, 'x', 'y', ds.any())\r\n\r\n# get a boolean pixel mapping with index x and columns y\r\nagg_scatter = agg_scatter.to_pandas().transpose()\r\n# get a dataframe with columns x, y and boolean for pixel state\r\nagg_scatter = agg_scatter.stack().reset_index()\r\n# get only values with pixel set to True\r\nagg_scatter = agg_scatter.loc[agg_scatter[agg_scatter.columns[2]]]\r\nprint(f'Plotting {len(agg_scatter)} points')\r\nreturn agg_scatter['x'], agg_scatter['y']\r\n\r\ndef update_layout(layout, x_range, y_range, plot_width, plot_height):    \r\n# Update with batch_update so all updates happen simultaneously\r\nwith fig.batch_update():\r\n    fig.layout.xaxis.range = (x_range[0], x_range[-1])\r\n    fig.layout.yaxis.range = (y_range[0], y_range[-1])\r\n    fig.data[0].x, fig.data[0].y = ds_image_to_data(x_range, y_range, plot_width, plot_height)\r\n\r\n\r\nsize = 100000\r\ndf = pd.DataFrame({'x': np.arange(0, size),\r\n               'y': np.sin(np.arange(0, size))})\r\nx_range=[df.x.min(), df.x.max()]\r\ny_range=[df.y.min(), df.y.max()]\r\nplot_height=400\r\nplot_width=800        \r\n\r\ntrace = go.Scattergl(\r\nx = df['x'],\r\ny = df['y'],\r\nmode = 'markers',\r\n)\r\nlayout = {'width': plot_width, 'height': plot_height,\r\n     'xaxis': {'range': x_range},\r\n     'yaxis': {'range': y_range}\r\n     }\r\nfig = go.FigureWidget(data=[trace], layout=layout)\r\nfig.layout.on_change(update_layout, 'xaxis.range', 'yaxis.range', 'width', 'height')\r\n\r\nfig\r\n```\r\n<\/details>\r\n\r\nYou can check the relecant plotly community discussion here: https:\/\/community.plot.ly\/t\/scattergl-points-disappear-on-figurewidget-update\/21100","comments":["Im not able to get any points showing up when using Scattergl.  Lines do but not points \r\n\r\n![chrome_nMIW1rngjv](https:\/\/user-images.githubusercontent.com\/873737\/91501382-2067e780-e88b-11ea-8821-188191827e03.png)\r\n\r\nis this part of this bug mentioned here?  I'm on version 4.9.0 of plotly."],"labels":["bug"]},{"title":"FigureWidget in jupyterlab console","body":"The following code works fine and a plot is displayed if I run it in a notebook cell\r\n```\r\nimport plotly.graph_objs as go\r\nout = go.FigureWidget(data=[{'x':[1,2], 'y':[1,2]}], layout={})\r\nout\r\n```\r\n\r\nHowever if I do the same thing in a jupyterlab console, the output printed is not the graph but\r\n```\r\nFigureWidget({\r\n    'data': [{'type': 'scatter', 'uid': '6dfb8d3d-d48b-4f0d-9cb8-ea0d6e33e87b', 'x': [1, 2, 3, \u2026\r\n```\r\n\r\nWhen not using a FigureWidget but doing\r\n```\r\nimport plotly\r\nimport plotly.graph_objs as go\r\n\r\nplotly.offline.init_notebook_mode(connected=True)\r\n\r\nplotly.offline.iplot({\r\n    \"data\": [go.Scatter(x=[1, 2, 3, 4], y=[4, 3, 2, 1])],\r\n    \"layout\": go.Layout(title=\"hello world\")\r\n})\r\n```\r\nit works fine in both notebook and console.\r\n\r\nI am not too familiar with jupyterlab consoles. Is it expected that FigureWidget doesn't work in consoles?\r\n\r\nThe output of my `jupyter labextension list` is\r\n```\r\nJupyterLab v0.35.4\r\nKnown labextensions:\r\n   app dir: \/lxhome\/darcetam\/local\/myenv2\/share\/jupyter\/lab\r\n        @jupyter-widgets\/jupyterlab-manager v0.38.1  enabled  OK\r\n        beakerx-jupyterlab v1.3.0  enabled  OK\r\n        plotlywidget v0.7.1  enabled  OK\r\n        qgrid v1.1.1  enabled  OK\r\n```\r\n\r\nThanks very much for your help!","comments":["Hi @amaurydar, I think this is a matter of jupyter-widgets overall not being supported in the console. Could you check and see if a standard ipywidget slider shows up in the console?\r\n\r\n```python\r\nimport ipywidgets\r\nipywidgets.IntSlider()\r\n```\r\n\r\nIf this works we can dig in more here on why `FigureWidget` isn't following suite.  If this doesn't work then we should move the conversation to the jupyter-widgets project at https:\/\/github.com\/jupyter-widgets\/ipywidgets.  Thanks!"],"labels":["question"]},{"title":"Feature Request: Add Multi-category Support for Gantt Chart","body":"It would be great if: https:\/\/github.com\/plotly\/plotly.js\/pull\/3300 (Multi-Category) supported  https:\/\/plot.ly\/python\/gantt\/ (Plotly Gantt Chart). Currently at this moment it is unsupported. ","comments":["Thanks for the suggestion @matthewchan15 "],"labels":["enhancement"]},{"title":"Not getting the labels while creating the Grouped Bar Chart with Direct Labels using python","body":"Even upon properly identifying the text for trace, labels are not getting imputed. Even the code provided under the \"Grouped Bar Chart with Direct Labels\" is neither resulting the labels nor throwing any error.","comments":["Hi @Pseud0n1nja, could you please add a reproducible example that demonstrates the behavior you're seeing?  Or if it's something you see in one of the examples in the documentation please add the link to the documentation page.  Thanks!","I even tried the template code given in the [documentation\/tutorial](https:\/\/plot.ly\/python\/bar-charts\/), that is also not displaying the labels\r\n\r\n\r\nx = ['Product A', 'Product B', 'Product C']\r\ny = [20, 14, 23]\r\ny2 = [16,12,27]\r\n\r\ntrace1 = go.Bar(\r\n    x=x,\r\n    y=y,\r\n    text=y,\r\n    textposition = 'auto',\r\n    marker=dict(\r\n        color='rgb(158,202,225)',\r\n        line=dict(\r\n            color='rgb(8,48,107)',\r\n            width=1.5),\r\n        ),\r\n    opacity=0.6\r\n)\r\n\r\ntrace2 = go.Bar(\r\n    x=x,\r\n    y=y2,\r\n    text=y2,\r\n    textposition = 'auto',\r\n    marker=dict(\r\n        color='rgb(58,200,225)',\r\n        line=dict(\r\n            color='rgb(8,48,107)',\r\n            width=1.5),\r\n        ),\r\n    opacity=0.6\r\n)\r\n\r\ndata = [trace1,trace2]\r\n\r\npy.iplot(data, filename='grouped-bar-direct-labels')\r\n\r\nI am unable to attach the screenshot.\r\n","Hi @Pseud0n1nja, could you place your code inside a fenced code block (See https:\/\/help.github.com\/en\/articles\/creating-and-highlighting-code-blocks) so that it's possible to copy and paste to reproduce it. Thanks!\r\n\r\nWhen I try the example from https:\/\/plot.ly\/python\/bar-charts\/#grouped-bar-chart-with-direct-labels, here's what I see.\r\n\r\n```python\r\nimport plotly.graph_objs as go\r\nfrom plotly.offline import init_notebook_mode, iplot\r\ninit_notebook_mode()\r\n\r\ntrace1 = go.Bar(\r\n    x=['giraffes', 'orangutans', 'monkeys'],\r\n    y=[20, 14, 23],\r\n    name='SF Zoo'\r\n)\r\ntrace2 = go.Bar(\r\n    x=['giraffes', 'orangutans', 'monkeys'],\r\n    y=[12, 18, 29],\r\n    name='LA Zoo'\r\n)\r\n\r\ndata = [trace1, trace2]\r\nlayout = go.Layout(\r\n    barmode='group'\r\n)\r\n\r\nfig = go.Figure(data=data, layout=layout)\r\niplot(fig)\r\n```\r\n![newplot](https:\/\/user-images.githubusercontent.com\/15064365\/54959295-f93b1700-4f2e-11e9-94f1-9cf6d6ffbed8.png)\r\n\r\nThis result looks correct to me, are you seeing something different?\r\n"],"labels":["question"]},{"title":"Plotly templates do not include the titlefont attibute","body":"When I create a template with `plotly.io.to_templated()`, the `titlefont` attribute is excluded from the template.\r\nHere is a minimal example creating a simple template with the `titlefont` and `zeroline` attributes:\r\n\r\n```python\r\nimport plotly.graph_objs as go\r\nimport plotly.io as pio\r\n\r\n# Layout\r\nlayout = go.Layout(\r\n        xaxis=dict(titlefont=dict(size=18), zeroline=False),\r\n        yaxis=dict(titlefont=dict(size=18), zeroline=False),\r\n        width=550,\r\n        height=500,\r\n    )\r\n\r\n# Figure\r\nfig = go.Figure(data=None, layout=layout)\r\n\r\n# Create template\r\ntemplate = pio.to_templated(fig)\r\n```\r\n\r\nThe resulting `template.layout` object strips the `titlefont` from the template part and puts it in the rest of the layout:\r\n\r\n```\r\nLayout({\r\n    'template': {'layout': {'height': 500, 'width': 550, 'xaxis': {'zeroline': False}, 'yaxis': {'zeroline': False}}},\r\n    'xaxis': {'title': {'font': {'size': 18}}},\r\n    'yaxis': {'title': {'font': {'size': 18}}}\r\n})\r\n```\r\n\r\nWhen this template is further applied to a figure, only the contents of `template` are transferred and the titlefont is ignored.","comments":[],"labels":["bug"]},{"title":"FigureWidget does not honor all template attributes","body":"When using FigureWidget in a jupyter notebook, only some attributes of the active template are applied while others are ignored. For instance:\r\n\r\n```python\r\nimport plotly.graph_objs as go\r\nimport plotly.io as pio\r\n\r\n# Layout\r\nlayout = go.Layout(\r\n        xaxis=dict(\r\n            # Title\r\n            titlefont=dict(size=18),\r\n            # Ticks and font size\r\n            ticks='inside',\r\n            ticklen=4,\r\n            tickfont=dict(size=16),\r\n            # Grid\r\n            showgrid = True,\r\n            gridwidth = 1,\r\n            # Disable zeroline\r\n            zeroline=False, \r\n            # Box the plot\r\n            linecolor = 'black',\r\n            linewidth = 2, \r\n            mirror = True,\r\n        ),\r\n        yaxis=dict(\r\n            titlefont=dict(size=18),\r\n            # Ticks and font size\r\n            ticks='inside',\r\n            ticklen=4,\r\n            tickfont=dict(size=16),\r\n            # Grid\r\n            showgrid = True,\r\n            gridwidth = 1,\r\n            # Disable zeroline\r\n            zeroline=False, \r\n            # Box the plot\r\n            linecolor = 'black',\r\n            linewidth = 2, \r\n            mirror = True,\r\n        ),\r\n        width=550,\r\n        height=500,\r\n    )\r\n\r\n# Figure\r\nfig = go.Figure(data=None, layout=layout)\r\n\r\n# Create template\r\ntemplate = pio.to_templated(fig)\r\npio.templates['boxed'] = template.layout.template\r\npio.templates.default = 'boxed'\r\n\r\n# Test the template\r\n## Toy data\r\ndata_adh = [go.Scatter(\r\n    x = [0, 2, 2.5, 3.5, 4, 5, 5.5, 6],\r\n    y = [1, 0.72, 0.56, 0.29, 0.27, 0.19, 0.15, 0.13],\r\n    mode = \"markers\",\r\n    )]\r\n\r\n## Explicit layout\r\nfig_explicit = go.FigureWidget(data_adh, layout)\r\n\r\n## Layout from template\r\nfig_implicit = go.FigureWidget(data_adh)\r\n```\r\n\r\n```fig_explicit``` results in a correctly formatted plot:\r\n![newplot(4)](https:\/\/user-images.githubusercontent.com\/8866213\/54218084-40eb8880-44c3-11e9-9cef-795cc3fe779a.png)\r\n\r\nwhile ```fig_implicit``` only seems to apply the tick marks and tickfont attributes but not the linewidth, width and height:\r\n![Screen Shot 2019-03-12 at 12 36 56 PM](https:\/\/user-images.githubusercontent.com\/8866213\/54218236-9031b900-44c3-11e9-912b-bcd79d27a5f1.png)\r\n\r\nThe output of ```fig_implicit.layout``` shows the template was correctly read:\r\n```\r\nLayout({\r\n    'template': {'layout': {'height': 500,\r\n                            'width': 550,\r\n                            'xaxis': {'gridwidth': 1,\r\n                                      'linecolor': 'black',\r\n                                      'linewidth': 2,\r\n                                      'mirror': True,\r\n                                      'showgrid': True,\r\n                                      'tickfont': {'size': 16},\r\n                                      'ticklen': 4,\r\n                                      'ticks': 'inside',\r\n                                      'zeroline': False},\r\n                            'yaxis': {'gridwidth': 1,\r\n                                      'linecolor': 'black',\r\n                                      'linewidth': 2,\r\n                                      'mirror': True,\r\n                                      'showgrid': True,\r\n                                      'tickfont': {'size': 16},\r\n                                      'ticklen': 4,\r\n                                      'ticks': 'inside',\r\n                                      'zeroline': False}}}\r\n})\r\n```\r\n\r\nIt also seems that the ```titlefont``` attribute is not saved in the template but that should probably be a separate issue.","comments":["Thanks a lot for the report @hlgirard.\r\n\r\nIt'll take a little digging to determine whether this is something in plotly.py or plotly.js. Have you tried this example with anything other than `FigureWidget`? i.e. `plotly.offline.iplot` or `plotly.offline.plot`?","Thank you for looking into it.\r\nI have tried `plotly.offline.plot(go.Figure(data))` and `plotly.offline.iplot(go.Figure(data))` and they both lead to the same result as the FigureWidget, the template is ignored."],"labels":["bug"]},{"title":"powerpoint export","body":"It would be pretty interesting to add a function to `plotly.io` to export figures as PowerPoint slides.\r\n\r\nWe could have a thin `write_powerpoint` wrapper on top of `python-pptx` (https:\/\/python-pptx.readthedocs.io\/en\/latest\/). That would output a single slide PPTX presentation, optionally based on a template. This single slide could then be copied into a larger presentation.\r\n\r\nFor more complex reports, we should probably provide some documentation examples of integrating plotly figures using the `python-pptx` API.","comments":["For anyone interested, Jon also had a nice vision for how chart images in ppt slides could link to the interactive version. \r\n\r\n[Jon's notes from Slack]:\r\n\r\n- Potential syntax: `plotly.io.write_powerpoint(fig, 'output.pptx', template='template.pptx', picture_name='Image1')`\r\n\r\n- Could use orca to create the static image to embed in the slide, and write out a standalone HTML file, and link the static image in the slide to open the HTML file in the default web browser.\r\n\r\n- With the `plotly.io.renderer` [proposal](https:\/\/github.com\/plotly\/plotly.py\/issues\/1459) we could also add a `power_point` renderer so evaluating `show(fig, renderer='power_point')` would open a ppt slide containing the figure   "],"labels":["enhancement"]},{"title":"ODE integrator for FF streamline produces NaNs","body":"While providing a current field to a FF streamline object, I get this error. This error happens even in current plotly version: e53e626d59495d440341751f60aeff73ff365c28 (The last commit I tested the workflow in)\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/6287181\/53818464-65e27780-3f68-11e9-9cfa-642d7addd754.png)\r\n\r\nThe same field when provided to a matplotlib streamplot object produces the expected lines:\r\n![image](https:\/\/user-images.githubusercontent.com\/6287181\/53818740-d8ebee00-3f68-11e9-9f5f-2e04c062b23f.png)\r\n\r\nThe only difference which I could see is the ODE integrator being used in matplotlib and plotly. I refer to \r\nhttps:\/\/github.com\/matplotlib\/matplotlib\/blob\/master\/lib\/matplotlib\/streamplot.py with matplotlib using Heun's method.","comments":["Hi @kel85uk, could you add a minimal reproducible example that works in matplotlib but not in plotly?  Thanks!","Hi @jonmmease, thanks for the response. I have added an example notebook and the accompanying dataset. Any help in this would be much appreciated.\r\n\r\n[minimum_reproducible_example.zip](https:\/\/github.com\/plotly\/plotly.py\/files\/2942031\/minimum_reproducible_example.zip)\r\n ","Hi @jonmmease, I was wondering if there's any update on the issue? ","Hi @kel85uk, no I don't think anyone has looked at it yet.  We're definitely open to help if anyone would like to take a look at https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/plotly\/figure_factory\/_streamline.py and try to track down the issue.","hi @jonmmease, i have the same issue than @kel85uk so i decided to look further in _streamline.py. It's appear that the issue come from line 207 and 213 where self.value_at return 0. So dt_ds variable is infinite then f and g function return nan. \r\n\r\nThe best 'quick fix' i found is replacing 'except IndexError:' line 238 by 'except (IndexError, ValueError):'. I know is not the best way to fix the issue, but it's the only one i found working well. (the interesting side effect is that create_streamline handle now the nan value in u and v)\r\n\r\nI hope you could add some fix in the next release.\r\n\r\nps : i used the same dataset than @kel85uk","hi @emmanuelle, have you seen my previous message ? Could you tell me if an update is considered ? "],"labels":["bug","figure_factory"]},{"title":"Minute to Minute Data Is Not Visibly Seen On Gantt Chart ","body":"![dash_question](https:\/\/user-images.githubusercontent.com\/41263573\/53771130-5bf04400-3e96-11e9-962c-b77ef0205c57.png)\r\n\r\n\r\nEven though I have the data loaded as a list of dictionaries with {Task = 'John', Start = '2019-02-26 06:30', End = '2019-02-26 06:45', Resource = 'Pick'} the points aren't showing up on the gantt chart. If I zoom closely, I see a super minuscule point which I can't even zoom into all the way after doing several lasso-style rectangular time filters in the gantt chart.\r\nThe chart is created as follows:\r\n\r\n`fig =  ff.create_gantt(graph_employee_data, colors=colors, index_col='Resource', title='', group_tasks=True,\r\n                      show_colorbar=True, bar_width=10, height=500, width=1500, showgrid_x=True, showgrid_y=True)`","comments":["Hi @shreyastalamakki, thanks for the report. Please add a fully reproducible example (with imports, data definition, plot display code) and the version of plotly.py that you are using.  Thanks!"],"labels":["question"]},{"title":"How to arrange nodes by personalized order in Sankey? ","body":"From I know, the order of nodes is always according to the quantities in Sankey. The higher nodes are at the top of the column while the lower ones are at the bottom. So I wander if I can change the order of the nodes which enable specific arrangement of nodes? Such as some nodes with small quantities can be shown at the top of the column?\r\n\r\nHow can I realize it by Python?","comments":["@antoinerg is this a use case that would be addressed by your current or already planned Sankey work? Thanks!","+1 for the possibility to define x coordinates only."],"labels":["enhancement","plotly.js"]},{"title":"layout subplots has implicit magic, needs a better API","body":"This issue refers to the example \"Stacked Subplots with a Shared X-Axis\".\r\n\r\n```\r\nimport plotly.plotly as py\r\nimport plotly.graph_objs as go\r\n\r\ntrace1 = go.Scatter(\r\n    x=[0, 1, 2],\r\n    y=[10, 11, 12]\r\n)\r\ntrace2 = go.Scatter(\r\n    x=[2, 3, 4],\r\n    y=[100, 110, 120],\r\n    yaxis='y2'\r\n)\r\ntrace3 = go.Scatter(\r\n    x=[3, 4, 5],\r\n    y=[1000, 1100, 1200],\r\n    yaxis='y3'\r\n)\r\ndata = [trace1, trace2, trace3]\r\nlayout = go.Layout(\r\n    yaxis=dict(\r\n        domain=[0, 0.33]\r\n    ),\r\n    legend=dict(\r\n        traceorder='reversed'\r\n    ),\r\n    yaxis2=dict(\r\n        domain=[0.33, 0.66]\r\n    ),\r\n    yaxis3=dict(\r\n        domain=[0.66, 1]\r\n    )\r\n)\r\nfig = go.Figure(data=data, layout=layout)\r\npy.iplot(fig, filename='stacked-subplots-shared-x-axis')\r\n```\r\n\r\nFirst of all, I know that `make_subplots` abstracts a lot of this magic away, but the second I want finer control of my plot (e.g., more than just a grid or some shared axes), I need to use the layout object. \r\n\r\nThe implicit mapping of a trace from `yaxis='y2'` to the axis `yaxis2` is a bit too magical for me. The name of the axis that you give a trace doesn't match the name of the axis in the layout (`x` vs `xaxis`, `y2` vs `yaxis2`, etc.).  Also, the name of the first axis doesn't have a number, e.g., `x`, `x2`, ... and `xaxis`, `xaxis2`, ... . As far as I can tell, this is only documented by example. I had to reverse engineer it from the example and by examining the layout object after much trial and error. \r\n\r\nIdeally, an axis would be a first-class object with a unique identifier. A default name like `xaxis1`, `yaxis3` is fine (as long as the naming convention is consistent for all), but it would also be nice to allow custom names that are even more meaningful. \r\n\r\nThe top-level separation between a list of traces and a layout that define a figure is confusing once subplots are involved. There is a natural relationship between a _trace_, _axes_, and _axis_. An _axes_ should have x and y (or z) _axis_. An _axes_ should have one or more _trace_ children.\r\n\r\nI'd like to see the API look more like this:\r\n\r\n```\r\nfig = go.Figure(...)\r\nax = fig.add_axes(...) . # create a custom subplot\r\nax.add_trace(go.Trace(...))  # add a trace to an axes\r\n```\r\n\r\nThere could be some convenience functions:\r\n\r\n```\r\nax = fig.axes  # default axes\r\nfig.add_trace(go.Trace(...))  # equivalent to fig.axes.add_trace()\r\n\r\nax00, ax01, ax10, ax11 = fig.make_subplots(rows=2, cols=2)\r\n```\r\n\r\nOnce the API is more object-oriented, you can do cool things like add a _trace_ to more than one _axes_, and share _axis_ objects between _axes_. In the JSON representation, these would be defined once and referenced elsewhere by unique name.\r\n\r\nThese are just suggestions. Obviously there are many corner cases and backward compatibility that would have to be addressed.\r\n\r\nThe bottom line is that the current API is not intuitive and not well documented, therefore hard to use.\r\n","comments":["Hi @jthornbrue,\r\n\r\nThanks for taking the time to share your thoughts here and to propose an API alternative.  Improving subplot support is something I'm hoping we'll be able to tackle for plotly.py version 4, where we'll have a bit more flexibility with the API and backward compatibility.\r\n\r\nIn the last year or so Plotly.js added a built-in subplot API based on the concept of grids.  This isn't something we've really done examples with for plotly.py yet, but I would like to reimplement the `make_subplots` API on top of this abstraction for plotly.py v4. See https:\/\/github.com\/plotly\/plotly.js\/issues\/3507.\r\n\r\nAnother interesting development is that ploltly.js is adding matching axis support: https:\/\/github.com\/plotly\/plotly.js\/pull\/3506. So I would like any new API to make it easy to express these matching relationships.\r\n\r\nI'll try to remember to follow up here when we're getting ready to start working on the API design a bit more. It would be great to have your input at that stage! \r\n"],"labels":["enhancement","make_subplots"]},{"title":"[Feature Request] use own style.json instead of mapbox access token","body":"I'd wish the package also offered the possibility to use a self defined style.json like when you use Mapbox natively in JS. Using this specification (and using OSM tiles) makes the mapbox_access_token obsolete.","comments":["Hi @anderl80, thanks for your interest here.  Would you mind moving this issue to the plotly.js project at https:\/\/github.com\/plotly\/plotly.js?  This is where this kind of change would need to take place. Thanks!"],"labels":["plotly.js"]},{"title":"Create country choropleth hover regression","body":"Originally reported at https:\/\/community.plot.ly\/t\/county-choropleths-not-displaying-hoverinfo-in-offline-mode\/19241\r\n\r\nThe hover tooltips for the figure produced by `create_choropleth` are sometimes not being displayed properly with recent versions of plotly.js.\r\n\r\n```python\r\nimport plotly as py\r\nimport plotly.figure_factory as ff\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\ndf_sample = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/minoritymajority.csv')\r\ndf_sample_r = df_sample[df_sample['STNAME'] == 'California']\r\n\r\nvalues = df_sample_r['TOT_POP'].tolist()\r\nfips = df_sample_r['FIPS'].tolist()\r\n\r\ncolorscale = [\r\n    'rgb(193, 193, 193)',\r\n    'rgb(239,239,239)',\r\n    'rgb(195, 196, 222)',\r\n    'rgb(144,148,194)',\r\n    'rgb(101,104,168)',\r\n    'rgb(65, 53, 132)'\r\n]\r\n\r\nfig = ff.create_choropleth(\r\n    fips=fips, values=values, scope=['CA', 'AZ', 'Nevada', 'Oregon', ' Idaho'],\r\n    binning_endpoints=[14348, 63983, 134827, 426762, 2081313], colorscale=colorscale,\r\n    county_outline={'color': 'rgb(255,255,255)', 'width': 0.5}, round_legend_values=True,\r\n    legend_title='Population by County', title='California and Nearby States'\r\n)\r\n```\r\n\r\nPlotting this figure in the most recent version of plotly.js (1.44.3) results in no hover tooltips\r\n```\r\npy.offline.plot(fig,\r\n                filename='choropleth_california_and_surr_states_outlines',\r\n                include_plotlyjs='https:\/\/cdn.plot.ly\/plotly-1.44.3.min.js')\r\n```\r\n\r\nBut using 1.42.3 the tooltips are dipslayed as expected\r\n```\r\npy.offline.plot(fig,\r\n                filename='choropleth_california_and_surr_states_outlines',\r\n                include_plotlyjs='https:\/\/cdn.plot.ly\/plotly-1.42.3.min.js')\r\n```","comments":["FYI the workaround does not work when using iplot in jupyter notebook because there is no include_plotlyjs argument.","Any update on when this bug might be fixed?","Also, using this old version of the Javascript causes the title to not show up on plots (see https:\/\/github.com\/plotly\/dash\/issues\/539)","Hi all.  I don't think anyone has taken a look at this issue yet.  We're definitely open to help if someone would like to take a look at https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/plotly\/figure_factory\/_county_choropleth.py and try to work through what's going wrong.","I'm also encountering this issue with the following app dependencies\r\n```\r\ndash==1.0.0\"\r\nflask_caching==1.7.2\"\r\ngeopandas==0.3.0\"\r\nplotly-geo==1.0.0a1\"\r\npyshp==1.2.10\"\r\nshapely==1.6.3\"\r\n```\r\n\r\nThe hover info works fine on choropleths with < ~20 counties. Anything bigger than that breaks the tooltips.","It looks like the bug creates duplicate hover tooltips and stores their `x`, `y` coordinates as lists instead of floats. \r\n\r\ne.g.\r\n```\r\n[-86.1224], [-88.2717], [-94.2067], [-84.6049]\r\n```\r\ninstead of\r\n```\r\n-86.1224, -88.2717, -94.2067, -84.6049\r\n```\r\n\r\nDe-duplicating and flattening restores functionality. Building on the code snippet from @jonmmease's original post..\r\n\r\n```python\r\nhover_ix, hover = [(ix, t) for ix, t in enumerate(fig['data']) if t.text][0]\r\n\r\n# mismatching lengths indicates bug\r\nif len(hover['text']) != len(df_sample_r):\r\n\r\n    ht = pd.Series(hover['text'])\r\n\r\n    no_dupe_ix = ht.index[~ht.duplicated()]\r\n\r\n    hover_x_deduped = np.array(hover['x'])[no_dupe_ix]\r\n    hover_y_deduped = np.array(hover['y'])[no_dupe_ix]\r\n\r\n    new_hover_x = [x if type(x) == float else x[0] for x in hover_x_deduped]\r\n    new_hover_y = [y if type(y) == float else y[0] for y in hover_y_deduped]\r\n\r\n    fig['data'][hover_ix]['text'] = ht.drop_duplicates()\r\n    fig['data'][hover_ix]['x'] = new_hover_x\r\n    fig['data'][hover_ix]['y'] = new_hover_y\r\n```"],"labels":["bug"]},{"title":"Javascript Error: Cannot read property 'removeChild' of null when using offline mode","body":"Hello, I am using Jupyter lab offline mode for drawing several 3D models. However, I always meet an error called **Javascript Error: Cannot read property 'removeChild' of null** and this error cause that no figure will be shown on the page. \r\n\r\nI need to restart the server and sometimes again and again.\r\n\r\nI would like to know if this is caused by the large dataset for the model? PS, such models are repeatedly drawing in the Jupiter lab.\r\n\r\nCode causing error:\r\n`offline.iplot(fig, filename = 'test')`\r\n\r\nHowever, using offline.plot instead of offline.iplot definitely works:\r\n\r\nDefinitely work\r\n`offline.plot(fig, filename = 'test')`","comments":["Hi @xxyypp,\r\n\r\nIs there any chance you could make up and share an example that reproduces the error?  Either way, could you include your versions of the:\r\n - `plotly` Python package\r\n - `@jupyterlab\/plotly-extension` JupyterLab extension\r\n\r\nAnd could you add a screenshot of the full stack trace that appears in the browser console along with the error message?  Thanks!","Hello @jonmmease ,\r\n\r\n- plotly version is 3.5.0\r\n\r\n- plotly-extension version is v0.18.1\r\n\r\nThe only trace of the error is: \r\n![image](https:\/\/user-images.githubusercontent.com\/22870449\/52209644-72e24d00-287c-11e9-9224-9ddad0cf6185.png)\r\n\r\nI am currently trying to get the code snippet, but this seems a bit difficult since the data I used in my project is dynamic, I might need some time to figure out how to do.\r\n"],"labels":["question"]},{"title":"Version 4 discussion","body":"## Overview\r\nThis is an issue for discussing what we'd like to work towards in a future version 4, mostly focusing on changes that would not be backwards compatible.  Nothing here is set in stone and feedback is welcome.\r\n\r\n### Theming\r\nLets make the defualt theme be `plotly` or `plotly_white` (https:\/\/github.com\/plotly\/plotly.py\/pull\/1224)\r\n\r\n### Integrate `px`\r\nIntegrate the `px` project for exploratory data analysis directly into plotly.py (https:\/\/github.com\/plotly\/px)\r\n\r\n### Redo subplot support\r\nThere are a bunch of [outstanding issues](https:\/\/github.com\/plotly\/plotly.py\/issues?q=is%3Aopen+is%3Aissue+label%3Amake_subplots) with the `make_subplots` function.  The most significant limitation being that it doesn't support non-Cartesian subplot types.\r\n\r\nLast year, plotly.js introduced its own subplot layout system (`layout.grid`) so we could build the new subplot system on top of that (See https:\/\/github.com\/plotly\/plotly.js\/issues\/3507 ).  Hopefully we could still support the `make_subplots` API, but give most of the work to plotly.js\r\n\r\nI would also like to add support for accessing traces by subplot.  Something like\r\n`figure.get_traces(row=2, col=1)`.  This would allow users to construct an initial figure using `px`, and then easily grab particular traces to customize using `.update` or property assignment syntax. See https:\/\/github.com\/plotly\/plotly.py\/issues\/1484.\r\n\r\n### Self displaying figures\r\nI would like to allow `go.Figure` to display itself as a plotly.js figure when used in an ipython context.  We have a prototype of this in `px` with `FigurePx`\r\n\r\nhttps:\/\/github.com\/plotly\/px\/blob\/610910fd5f167de2482b01753db13cd0bd01c171\/plotly_express\/_px.py#L22-L33\r\n\r\nI would like to extend this a bit so that it's possible to use a global setting to configure how `go.Figure` should display itself.  `FigurePx` is using the `init_notebook_mode`\/`iplot` approach, but I'd also like to support a static image display (using orca) that would be suitable for use in QtConsole\/Spyder and for PDF export.\r\n\r\nThese changes would not affect `FigureWidget`.  `FigureWidget` will remain a separate class that is distinct from `go.Figure` in that is is a widget subclass and supports updating properties in place.\r\n\r\n### Convert offline html export to `plotly.io` module\r\nReplace the `plotly.offline.plot` function with functions in the `plotly.io` module (https:\/\/github.com\/plotly\/plotly.py\/issues\/1098)\r\n\r\n### Split off choropleth figure factory into a separate package\r\nSplitting the county choropleth figure factories into a separate package would help a lot with reducing the plotly.py package size.  Then we could add additional shape files to that geo-plotly package to support different geographic regions.\r\n\r\n### Split off `plotly.plotly` chart-studio integration into a separate package\r\nSplit off the functionality in `plotly.plotly` into a separate package called `chart_studio`.  This will make it easier for people to understand that you can use plotly.py totally offline and without an account.  Everything in the `plotly` package would be offline, and the chart_studio integration is in the `chart_studio` package.\r\n\r\nAlong with the change to make figures self-displaying and to move the html output to `plotly.io`, this would mean that users would no longer need to figure out the `online`\/`offline` distinction.  The plotly.py package just is offline, and you don't need to say offline anywhere to use it that way.\r\n\r\n### Documentation\r\nIf not before, documentation should be updated to remove use of `iplot` and allow figures to display themselves in \"offline\" mode (https:\/\/github.com\/plotly\/documentation\/issues\/992)\r\n\r\nAlso, before the v3 to v4 jump we should finish working out how to version the documentation so that the version 3 docs can remain active alongside the version 4 docs.\r\n\r\ncc @nicolaskruchten @jackparmer @chriddyp \r\n\r\n","comments":["Thanks for pulling this together! Agreed on all points I think!","As discussed on Slack, v4 may also be a good opportunity to introduce default mobile support through the plotly.js `breakpoints` API. This would work well with the \"Documentation\" and \"Theming\" spirit of this release. ","Feedback for annotated heatmaps:\r\n- Support for None values. Currently Plotly returns an error: `TypeError: '<' not supported between instances of 'NoneType' and 'NoneType'.`\r\n- Heatmaps with one axis. They will be useful, at least, in bioinformatics. Examples:\r\n![](https:\/\/www.researchgate.net\/profile\/Bonnie_Joubert\/publication\/49835363\/figure\/fig2\/AS:216358336897026@1428595255091\/Linkage-disequilibrium-LD-observed-across-SNPs-of-MS4A2-r2-values-displayed-in.png)\r\n\r\n![](https:\/\/estrip.org\/content\/users\/tinypliny\/0814\/orig\/reading_LD_blocks.png)","Target date for 4.0.0 release? :)","Hopefully next week. Cross reference release candidate announcement https:\/\/community.plot.ly\/t\/introducing-plotly-py-4-0-0rc1\/25639.","@jonmmease I'll let you close this one out :) Nice job!"],"labels":["V4"]},{"title":"plot function (from plotly.offline) does not support (open) file handles as target","body":"Currently, the `filename` parameter of `plot` only supports filenames (`temp-plot.html` is default). It does not support open file handles.\r\n\r\nThe latter is very useful when writing e.g. command line tools with [click](https:\/\/click.palletsprojects.com\/en\/7.x\/) (or similar tools), which [handles opening files specified by a user on the command line transparently](https:\/\/click.palletsprojects.com\/en\/7.x\/arguments\/#file-arguments) and only provides a file handle to the script.\r\n\r\n```python\r\nfrom plotly.offline import plot\r\nhelp(plot)\r\n\r\nplot(figure_or_data, show_link=False, link_text='Export to plot.ly', validate=True, output_type='file', include_plotlyjs\r\n=True, filename='temp-plot.html', auto_open=True, image=None, image_filename='plot_image', image_width=800, image_height\r\n=600, config=None, include_mathjax=False)\r\n[...]\r\n```","comments":["Just looked at the [relevant source code](https:\/\/github.com\/plotly\/plotly.py\/blob\/15aff13d8e596e0ed1872d872dbafcc6e070d1e5\/plotly\/offline\/offline.py#L701) - it's fairly easy to add. Would you accept a pull request?\r\n\r\nThe interesting question then becomes how to handle the stuff between subsequent lines 731 and 744. Ignore `auto_open == True` and `include_plotlyjs == 'directory'` options or raise exceptions if `filename` is an open file handle?","Hi @s-m-e, thanks for the suggestion.  Yes, and pull request would be appreciated!  It's fine to raise exceptions for combinations of parameters that don't make sense together.\r\n\r\nIn case you're interested in how I'd like to see this API refactored in the future, see https:\/\/github.com\/plotly\/plotly.py\/issues\/1098."],"labels":["enhancement"]},{"title":"Unable to define opacity of markers for Scatter3D using rgba","body":"I originally posted this in the [plotly community forums](https:\/\/community.plot.ly\/t\/how-to-define-opacity-per-point-for-scatter3d\/18621) and it was recommend I instead post this as an issue.\r\n\r\nI would like to define the opacity per point for a Scatter3D plot. I\u2019ve tried to do this by defining a rgba color per point, but the alpha component seems to be treated as white (example code below). Any suggestions? Thanks!\r\n\r\n```\r\nimport plotly\r\nimport plotly.graph_objs as go\r\nimport plotly.offline as off\r\nplotly.offline.init_notebook_mode(connected=False)\r\nimport numpy as np\r\n\r\nx_max = 2\r\nnum_bins = 20\r\n\r\nlinspace = np.linspace(-x_max, x_max, num_bins)\r\nX, Y, Z = np.meshgrid(linspace, linspace, linspace)\r\n\r\ngaussian = lambda x: np.exp(-np.sum(np.power(x, 2), 0, keepdims=False)\/0.5)\r\n\r\ncoords = np.concatenate((np.expand_dims(X.flatten(), 0),\r\n                         np.expand_dims(Y.flatten(), 0),\r\n                         np.expand_dims(Z.flatten(), 0)), 0)\r\n\r\ngaussian_coords = gaussian(coords)\r\n\r\ncolor_scale = lambda x: 'rgba(255, 0, 0, {})'.format(np.round(x, 2))\r\n\r\nhalf = int(20**3\/2)\r\n\r\ntrace1 = go.Scatter3d(\r\n    x=X.flatten()[:half],\r\n    y=Y.flatten()[:half],\r\n    z=Z.flatten()[:half],\r\n    mode='markers',\r\n    marker=dict(\r\n        size=10,\r\n        color = list(map(color_scale, \r\n                         gaussian_coords.flatten().tolist()[:half])),\r\n        line=dict(width=0, color='rgba(0, 0, 0, 0)'),\r\n        # opacity=0.5  # Toggle this to see the Gaussian shape more clearly\r\n    )\r\n)\r\n\r\ndata=[trace1]\r\n\r\nlayout=go.Layout(height=600, width=600)\r\n\r\nfig=go.Figure(data=data, layout=layout)\r\noff.iplot(fig)\r\n```","comments":["Example with \r\n```\r\nx_max = 2\r\nnum_bins = 10\r\n```\r\n![scatter3d_transperance](https:\/\/user-images.githubusercontent.com\/15064365\/51903719-e1aa3c80-238a-11e9-8664-9e70738bd6cb.gif)\r\n","Thanks for the report @blondegeek,\r\n\r\nI've opened up a pair of plotly.js issues based on this example.\r\n - https:\/\/github.com\/plotly\/plotly.js\/issues\/3492\r\n - https:\/\/github.com\/plotly\/plotly.js\/issues\/3493\r\n\r\nPlease check them out and double check that they capture the issues you're seeing.","Hi @jonmmease. Thanks for your responsiveness and filing the plotly.js issues. I hadn't actually noticed the second issue regarding gridlines until I saw the issue. The first issue certainly captures what I was seeing.","@jonmmease plotly\/plotly.js#3492 & plotly\/plotly.js#3493 are closed; so we may close this issue?"],"labels":["plotly.js"]},{"title":"Spacing for title reduced when using tools.make_subplots with subplot_titles","body":"I was using the `utils.make_subplots` and realized that the space given to the Title of the plot reduces if I use this compared to the other standard plots.\r\n\r\nThe plot with standard scatter:\r\n<img width=\"1624\" alt=\"screen shot 2019-01-25 at 2 27 45 pm\" src=\"https:\/\/user-images.githubusercontent.com\/2200743\/51735420-67896780-20ad-11e9-9de5-28355cde3135.png\">\r\nThe plot with `make_subplots`:\r\n<img width=\"1599\" alt=\"screen shot 2019-01-25 at 2 27 31 pm\" src=\"https:\/\/user-images.githubusercontent.com\/2200743\/51735421-67896780-20ad-11e9-9519-227a1a0d2921.png\">\r\n\r\nAs you can see the space below the title has reduced when using make_subplot.\r\nIt looks like the title of the subplot has eaten into that margin.\r\n\r\nHere is some code to reproduce:\r\n\r\n```python\r\nimport random\r\n\r\nimport plotly\r\nimport plotly.offline as py\r\nimport plotly.graph_objs as go\r\n\r\nmyplots = [\r\n    {\r\n        \"trace\": go.Scatter(\r\n            x=[random.randint(0, 10) for i in range(10)],\r\n            y=[random.randint(0, 10) for i in range(10)],\r\n            mode='markers', name='MyName{}'.format(i)),\r\n        \"title\": \"MyTitle{}\".format(i),\r\n        'xaxis': {\"title\": \"MyXAxis{}\".format(i)},\r\n        'yaxis': {\"title\": \"MyYAxis{}\".format(i)},\r\n    } for i in range(8)\r\n]\r\n\r\nNCOL = 4\r\nNROW = math.ceil(len(myplots) \/ NCOL)\r\nfigure = plotly.tools.make_subplots(\r\n    rows=NROW, cols=NCOL, subplot_titles=[i['title'] for i in myplots])\r\n\r\nfigure['layout'].update(title='My overall title', showlegend=False, height=400)\r\nfor isubplot, subplot in enumerate(myplots):\r\n    figure.append_trace(subplot['trace'], math.floor(isubplot \/ NCOL) + 1, (isubplot % NCOL) + 1)\r\n    figure['layout']['xaxis{}'.format(isubplot + 1)].update(subplot['xaxis'])\r\n    figure['layout']['yaxis{}'.format(isubplot + 1)].update(subplot['yaxis'])\r\n\r\nstandard_fig = go.Figure([o['trace'] for o in myplots], {\"title\": \"My overall Title\", \"height\": 400})\r\nsubplot_fig = figure\r\n```\r\n\r\nExpected behaviour:\r\nThe `layout.margin.t` attribute should be the distance between the top of the chart and the top of the `subplot_titles` values\r\n\r\nVersions:\r\nPlotly Py: 3.4.0\r\nPython: 3.6.4","comments":["Hi @AbdealiJK,\r\n\r\nThanks for the report.  The main problem that I'm seeing with this subplot figure is that the layout algorithm seems to break down when there are so many subplots is a relatively short figure, causing the bottom subplot titles to overlap with the xaxis in the subplot above.\r\n\r\nBut that doesn't sound like what you are referring to.\r\n\r\n> The `layout.margin.t` attribute should be the distance between the top of the chart and the top of the subplot_titles values\r\n\r\nI'm not sure I understand what you mean by this.  If this were true, wouldn't the top subplot titles (\"MyTitle1\" and \"MyTitle2\") overlap with the main figure title (\"My overall title\")?","Hi @jonmmease thanks for the reply :)\r\n\r\nYes, im not too worried about the axes overlapping (as i just made the height small so i can take small screenshots ;) )\r\n\r\nHere is a slightly better example of what the issue affecting us is. I'm changing the plots to have only 1 row and show 3 columns in a row.\r\n```python\r\nimport random\r\n\r\nimport plotly\r\nimport plotly.offline as py\r\nimport plotly.graph_objs as go\r\n\r\nmyplots = [\r\n    {\r\n        \"trace\": go.Scatter(\r\n            x=[random.randint(0, 10) for i in range(10)],\r\n            y=[random.randint(0, 10) for i in range(10)],\r\n            mode='markers', name='MyName{}'.format(i)),\r\n        \"title\": \"MyTitle{}\".format(i),\r\n        'xaxis': {\"title\": \"MyXAxis{}\".format(i)},\r\n        'yaxis': {\"title\": \"MyYAxis{}\".format(i)},\r\n    } for i in range(3) # --------------------------------- changed this to 3\r\n]\r\n\r\nNCOL = 3 # --------------------------------- changed this to 3\r\nNROW = math.ceil(len(myplots) \/ NCOL)\r\nfigure = plotly.tools.make_subplots(\r\n    rows=NROW, cols=NCOL, subplot_titles=[i['title'] for i in myplots])\r\n\r\nfigure['layout'].update(title='My overall title', showlegend=False, height=400)\r\nfor isubplot, subplot in enumerate(myplots):\r\n    figure.append_trace(subplot['trace'], math.floor(isubplot \/ NCOL) + 1, (isubplot % NCOL) + 1)\r\n    figure['layout']['xaxis{}'.format(isubplot + 1)].update(subplot['xaxis'])\r\n    figure['layout']['yaxis{}'.format(isubplot + 1)].update(subplot['yaxis'])\r\n\r\nstandard_fig = go.Figure([o['trace'] for o in myplots], go.Layout(title=\"My overall Title\", height=400))\r\nsubplot_fig = figure\r\n```\r\nNow if I do:\r\n```python\r\nsubplot_fig['layout'].margin= {\"t\": 25}\r\npy.plot(subplot_fig)\r\n# and\r\nstandard_fig['layout'].margin= {\"t\": 25}\r\npy.plot(standard_fig)\r\n```\r\n\r\nThe results are:\r\n<img width=\"1672\" alt=\"screen shot 2019-01-25 at 9 56 21 pm\" src=\"https:\/\/user-images.githubusercontent.com\/2200743\/51758619-1c427980-20ec-11e9-9b05-c80fb0971502.png\">\r\n<img width=\"1651\" alt=\"screen shot 2019-01-25 at 9 56 29 pm\" src=\"https:\/\/user-images.githubusercontent.com\/2200743\/51758620-1c427980-20ec-11e9-9665-7c0bc967030a.png\">\r\n\r\n\r\nSo, the issue I'm worried about here is that the \"My overall title\" is overlapping with the \"My Title 1\" in the case of subplots.\r\n\r\nEssentially - the title of the subplots is not being considered to do the margin calculations properly\r\n","Was looking at the function for `make_subplots` and realized that the reason is that the `subplot_titles` for the top row are at Y-location `1` and the yanchor is `bottom`. Hence it is basically going out of the `paper`.\r\n\r\nI tried setting `yanchor` to be `top` but that makes the title overlap with the chart itself.\r\n\r\n\r\n - We could set `layout.margin.t` and increase it by `16` (the font size of the title) more than the default value\r\n - We could set the `heights` and `grid` (i think) appropriately so that the graphs move down slightly when the title is being added.","Hi @AbdealiJK,\r\n\r\nYeah, the position of the subplot titles are calculated assuming the default margins. So if you change the margin after the figure is created then there's no way for the subplot titles to adjust.\r\n\r\nCould you explain what outcome you are trying to achieve?  Do you want less margin above the main title with the same spacing between the main title and the subplots below?\r\n\r\nIf you're using version 3.5.0, you have more control over the title placement now.\r\n\r\n```\r\nsubplot_fig.layout.title?\r\n```\r\n```\r\nType:        property\r\nString form: <property object at 0x116663db8>\r\nDocstring:  \r\nThe 'title' property is an instance of Title\r\nthat may be specified as:\r\n  - An instance of plotly.graph_objs.layout.Title\r\n  - A dict of string\/value properties that will be passed\r\n    to the Title constructor\r\n\r\n    Supported dict properties:\r\n        \r\n        font\r\n            Sets the title font. Note that the title's font\r\n            used to be customized by the now deprecated\r\n            `titlefont` attribute.\r\n        pad\r\n            Sets the padding of the title. Each padding\r\n            value only applies when the corresponding\r\n            `xanchor`\/`yanchor` value is set accordingly.\r\n            E.g. for left padding to take effect, `xanchor`\r\n            must be set to \"left\". The same rule applies if\r\n            `xanchor`\/`yanchor` is determined\r\n            automatically. Padding is muted if the\r\n            respective anchor value is \"middle*\/*center\".\r\n        text\r\n            Sets the plot's title. Note that before the\r\n            existence of `title.text`, the title's contents\r\n            used to be defined as the `title` attribute\r\n            itself. This behavior has been deprecated.\r\n        x\r\n            Sets the x position with respect to `xref` in\r\n            normalized coordinates from 0 (left) to 1\r\n            (right).\r\n        xanchor\r\n            Sets the title's horizontal alignment with\r\n            respect to its x position. \"left\" means that\r\n            the title starts at x, \"right\" means that the\r\n            title ends at x and \"center\" means that the\r\n            title's center is at x. \"auto\" divides `xref`\r\n            by three and calculates the `xanchor` value\r\n            automatically based on the value of `x`.\r\n        xref\r\n            Sets the container `x` refers to. \"container\"\r\n            spans the entire `width` of the plot. \"paper\"\r\n            refers to the width of the plotting area only.\r\n        y\r\n            Sets the y position with respect to `yref` in\r\n            normalized coordinates from 0 (bottom) to 1\r\n            (top). \"auto\" places the baseline of the title\r\n            onto the vertical center of the top margin.\r\n        yanchor\r\n            Sets the title's vertical alignment with\r\n            respect to its y position. \"top\" means that the\r\n            title's cap line is at y, \"bottom\" means that\r\n            the title's baseline is at y and \"middle\" means\r\n            that the title's midline is at y. \"auto\"\r\n            divides `yref` by three and calculates the\r\n            `yanchor` value automatically based on the\r\n            value of `y`.\r\n        yref\r\n            Sets the container `y` refers to. \"container\"\r\n            spans the entire `height` of the plot. \"paper\"\r\n            refers to the height of the plotting area only.\r\n\r\nReturns\r\n-------\r\nplotly.graph_objs.layout.Title\r\n```\r\n\r\nHere's what I get if I replace\r\n```python\r\nfigure['layout'].update(title='My overall title', showlegend=False, height=400)\r\n```\r\nwith\r\n```python\r\nfigure['layout'].update(\r\n    title={'text': 'My overall title',\r\n           'y': 0.98},\r\n    margin={'t': 50},\r\n    paper_bgcolor = 'lightgray',\r\n    showlegend=False, height=400)\r\n```\r\nNote that I added `paper_bgcolor` to make it easier to see the margins.\r\n\r\n![newplot 4](https:\/\/user-images.githubusercontent.com\/15064365\/51786540-a4983d00-2133-11e9-9fc4-0e6576838ba8.png)\r\n\r\nIs that useful for you?","So, the way it works for me is I generate some plots in python and I send it over to different clients\/websites\/apps.\r\nI try to keep as little style information in my plots as possible.\r\n\r\nThe client(s) then take my data\/layout then apply some styling depending on which theme they are using. One of the clients was trying to use a slightly more compact theme and the default margin was quite high for the plotly - so, in all their plots they have reduced the margin causing the other plots to look nice, but the plot by `make_subplot` does not look good.\r\n\r\nBut I guess that since this spacing calculation is happening in plotly.py and not plotly.js - this is not something they can control?\r\nNote: While the title control in 3.5.0 is awesome, it still isn't ideal in my opinion because it involved custom coding for this specific type of plot on all the client sides if they want to change margin.\r\n\r\nBut it is definitely the workaround I will use for now :) Thanks!\r\n\r\nJust some thoughts for a scenario like this ...\r\n**Approach 1**:\r\nIs there any way for plotly.js to use variables in their JSON values ?\r\nLike if we use something like `x: \"${layout.margin.t} + 1}\"` it should be able to calculate the value on the fly ?\r\n\r\n**Approach 2**:\r\nI notice that the subplot titles are being calculated as annotations with plotly.py - maybe this could have a property in plotly.js and calculated during rendering ?","Thanks for explaining your workflow. That makes sense.  I think for resizing with subplot titles to behave properly the titles would need to be handled by plotly.js.\r\n\r\nPlotly.js does have it's own version of subplots now (these were added relatively recently, after the `make_subplots` function was already in plotly.py). See https:\/\/plot.ly\/javascript\/subplots\/.  So it might make sense for title properties to be added to these subplots directly in plotly.js.  Feel free to open an issue to discuss this on the plotly.js project at https:\/\/github.com\/plotly\/plotly.js\/issues."],"labels":["question","make_subplots"]},{"title":"FigureWidget doesn't update in Jupyter Notebook","body":"This snippet in a Python cell produces a chart, but the chart does not update to get the new title and new data.\r\n```\r\nimport plotly.graph_objs as go\r\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\r\n\r\ninit_notebook_mode()\r\ndata = [go.Bar(\r\n            x=['giraffes', 'orangutans', 'monkeys'],\r\n            y=[20, 14, 23]\r\n    )]\r\nlayout = {'yaxis': {'range': [0, 25]}}\r\nfig = go.FigureWidget(data, layout)\r\niplot(fig)\r\n\r\n# The following code is ignored.\r\nfig.data[0].y = (5,10,1)\r\nfig.layout.title = \"New title\"\r\n```\r\n\r\nPlotly version: 3.5.0\r\nServer Information:\r\nYou are using Jupyter notebook.\r\nThe version of the notebook server is: 5.7.4\r\nThe server is running on this version of Python:\r\nPython 3.7.1 (default, Dec 14 2018, 13:28:58) \r\n[Clang 4.0.1 (tags\/RELEASE_401\/final)]\r\n\r\nCurrent Kernel Information:\r\nPython 3.7.1 (default, Dec 14 2018, 13:28:58) \r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 7.2.0 -- An enhanced Interactive Python. Type '?' for help.","comments":["Hi @ubershmekel ,\r\n\r\nFor the visual display of the `FigureWidget` to update you need to allow it to display itself as an ipywidget by making the `fig` variable the last statement in a notebook cell. In particular, you can't use `iplot`.  For example:\r\n\r\n```python\r\nimport plotly.graph_objs as go\r\n\r\ndata = [go.Bar(\r\n            x=['giraffes', 'orangutans', 'monkeys'],\r\n            y=[20, 14, 23]\r\n    )]\r\nlayout = {'yaxis': {'range': [0, 25]}}\r\nfig = go.FigureWidget(data, layout)\r\nfig\r\n```\r\n![newplot](https:\/\/user-images.githubusercontent.com\/15064365\/51741649-86fca200-2065-11e9-9171-497879d62c33.png)\r\n\r\n```python\r\n# The following code will update the plot above\r\nfig.data[0].y = (5,10,1)\r\nfig.layout.title = \"New title\"\r\n```\r\n\r\nDoes that work for you?\r\n\r\n","@jonmmease When I do that - nothing is displayed after the cell completes.","Ok, then it sounds like there is some kind if installation problem with respect to the `FigureWidget`.  \r\n\r\nAre you using the classic Jupyter Notebook or JupyterLab?\r\n\r\nIf classic, please include the output of \r\n```\r\njupyter nbextension list\r\n```\r\nif JupyterLab, please include the output of\r\n```\r\njupyter labextension list\r\n```\r\n\r\nWhat version of ipywidgets is installed?\r\n\r\nDo you see any errors\/messages in the browser console? (https:\/\/developers.google.com\/web\/tools\/chrome-devtools\/console\/)\r\n","```\r\n$ jupyter nbextension list\r\nKnown nbextensions:\r\n  config dir: \/anaconda3\/etc\/jupyter\/nbconfig\r\n    notebook section\r\n      plotlywidget\/extension  enabled \r\n      - Validating: OK\r\n      jupyter-js-widgets\/extension  enabled \r\n      - Validating: OK\r\n$ jupyter labextension list\r\nJupyterLab v0.32.1\r\nNo installed extensions\r\n```\r\n\r\nThere are errors in the console...\r\n\r\n```\r\nmanager-base.js:273 Could not instantiate widget\r\n(anonymous) @ manager-base.js:273\r\nstep @ manager-base.js:42\r\n(anonymous) @ manager-base.js:23\r\nrejected @ manager-base.js:15\r\nPromise.then (async)\r\nstep @ manager-base.js:16\r\n(anonymous) @ manager-base.js:17\r\n__awaiter @ manager-base.js:13\r\nManagerBase._make_model @ manager-base.js:257\r\n(anonymous) @ manager-base.js:246\r\nstep @ manager-base.js:42\r\n(anonymous) @ manager-base.js:23\r\n(anonymous) @ manager-base.js:17\r\n__awaiter @ manager-base.js:13\r\nManagerBase.new_model @ manager-base.js:232\r\nManagerBase.handle_comm_open @ manager-base.js:144\r\nexecuteBound @ underscore.js:762\r\n(anonymous) @ underscore.js:775\r\n(anonymous) @ underscore.js:122\r\n(anonymous) @ comm.js:89\r\nPromise.then (async)\r\nCommManager.comm_open @ comm.js:85\r\ni @ jquery.min.js:2\r\nKernel._handle_iopub_message @ kernel.js:1223\r\nKernel._finish_ws_message @ kernel.js:1015\r\n(anonymous) @ kernel.js:1006\r\nPromise.then (async)\r\nKernel._handle_ws_message @ kernel.js:1006\r\ni @ jquery.min.js:2\r\nutils.js:119 Error: Could not create a model.\r\n    at promiseRejection (utils.js:119)\r\npromiseRejection @ utils.js:119\r\nPromise.catch (async)\r\nManagerBase.handle_comm_open @ manager-base.js:149\r\nexecuteBound @ underscore.js:762\r\n(anonymous) @ underscore.js:775\r\n(anonymous) @ underscore.js:122\r\n(anonymous) @ comm.js:89\r\nPromise.then (async)\r\nCommManager.comm_open @ comm.js:85\r\ni @ jquery.min.js:2\r\nKernel._handle_iopub_message @ kernel.js:1223\r\nKernel._finish_ws_message @ kernel.js:1015\r\n(anonymous) @ kernel.js:1006\r\nPromise.then (async)\r\nKernel._handle_ws_message @ kernel.js:1006\r\ni @ jquery.min.js:2\r\n4kernel.js:1007 Couldn't process kernel message Error: Script error for \"plotlywidget\"\r\nhttp:\/\/requirejs.org\/docs\/errors.html#scripterror\r\n    at makeError (require.js?v=951f856e81496aaeec2e71a1c2c0d51f:168)\r\n    at HTMLScriptElement.onScriptError (require.js?v=951f856e81496aaeec2e71a1c2c0d51f:1735)\r\n(anonymous) @ kernel.js:1007\r\nPromise.catch (async)\r\nKernel._handle_ws_message @ kernel.js:1007\r\ni @ jquery.min.js:2\r\npytorch-mnist-cnn.ipynb#:1 Uncaught (in promise) Error: Script error for \"plotlywidget\"\r\nhttp:\/\/requirejs.org\/docs\/errors.html#scripterror\r\n    at makeError (require.js?v=951f856e81496aaeec2e71a1c2c0d51f:168)\r\n    at HTMLScriptElement.onScriptError (require.js?v=951f856e81496aaeec2e71a1c2c0d51f:1735)\r\nPromise.then (async)\r\nManagerBase.register_model @ manager-base.js:208\r\n(anonymous) @ manager-base.js:248\r\nstep @ manager-base.js:42\r\n(anonymous) @ manager-base.js:23\r\n(anonymous) @ manager-base.js:17\r\n__awaiter @ manager-base.js:13\r\nManagerBase.new_model @ manager-base.js:232\r\nManagerBase.handle_comm_open @ manager-base.js:144\r\nexecuteBound @ underscore.js:762\r\n(anonymous) @ underscore.js:775\r\n(anonymous) @ underscore.js:122\r\n(anonymous) @ comm.js:89\r\nPromise.then (async)\r\nCommManager.comm_open @ comm.js:85\r\ni @ jquery.min.js:2\r\nKernel._handle_iopub_message @ kernel.js:1223\r\nKernel._finish_ws_message @ kernel.js:1015\r\n(anonymous) @ kernel.js:1006\r\nPromise.then (async)\r\nKernel._handle_ws_message @ kernel.js:1006\r\ni @ jquery.min.js:2\r\n5kernel.js:1007 Couldn't process kernel message Error: Script error for \"plotlywidget\"\r\nhttp:\/\/requirejs.org\/docs\/errors.html#scripterror\r\n    at makeError (require.js?v=951f856e81496aaeec2e71a1c2c0d51f:168)\r\n    at HTMLScriptElement.onScriptError (require.js?v=951f856e81496aaeec2e71a1c2c0d51f:1735)\r\n(anonymous) @ kernel.js:1007\r\nPromise.catch (async)\r\nKernel._handle_ws_message @ kernel.js:1007\r\ni @ jquery.min.js:2\r\npytorch-mnist-cnn.ipynb#:1 Uncaught (in promise) Error: Script error for \"plotlywidget\"\r\nhttp:\/\/requirejs.org\/docs\/errors.html#scripterror\r\n    at makeError (require.js?v=951f856e81496aaeec2e71a1c2c0d51f:168)\r\n    at HTMLScriptElement.onScriptError (require.js?v=951f856e81496aaeec2e71a1c2c0d51f:1735)\r\n```","Thanks for adding the additional info.\r\n\r\nWhen you see these errors, are you running the classic notebook or jupyterlab?\r\n\r\nWhat version of ipywidgets do you have installed?\r\n\r\nAlso, since it looks like you're using conda. Could you double check that you don't have the `plotly` or `ipywidgets` packages installed using both conda and pip?  (You can check by running `pip list` and `conda list`).","> You are using Jupyter notebook.\r\n> The version of the notebook server is: 5.7.4\r\n\r\nI believe that means classic notebook.\r\n\r\nIndeed there are duplicate ipywidgets and plotly between the pip and conda.\r\n\r\n```\r\nipywidgets                         7.4.2     \r\nipywidgets                7.4.2                    py37_0  \r\nplotly                    3.5.0                     <pip>\r\nplotly                             3.5.0     \r\n```","> I believe that means classic notebook.\r\n\r\nThe server between the two is actually identical. The difference is whether you run `jupyter notebook` or `jupyter lab` from the command line to start up the server.\r\n\r\n> Indeed there are duplicate ipywidgets and plotly between the pip and conda.\r\n\r\nAlright, let's try this\r\n\r\n```\r\n$ pip uninstall ipywidgets\r\n$ pip uninstall plotly\r\n$ conda uninstall ipywidgets\r\n$ conda uninstall plotly\r\n\r\n$ conda install -c plotly plotly=3.5.0\r\n$ conda install \"notebook>=5.3\" \"ipywidgets>=7.2\"\r\n```\r\n\r\nIf that doesn't help, try uninstall and reinstalling the notebook extension\r\n```\r\n$ jupyter nbextension uninstall --py --sys-prefix widgetsnbextension\r\n$ jupyter nbextension uninstall --py --sys-prefix plotlywidget\r\n$ jupyter nbextension install --py --sys-prefix widgetsnbextension\r\n$ jupyter nbextension install --py --sys-prefix plotlywidget\r\n$ jupyter nbextension enable --py --sys-prefix widgetsnbextension\r\n$ jupyter nbextension enable --py --sys-prefix plotlywidget\r\n```\r\n\r\n","Partial success!!! (working in jupyter lab but not in jupyter notebook)\r\nWhen I follow the below steps, it started working only in jupyter lab but not in jypyter notebook.\r\nIn my jupyter notebook \"Nbextensions\" tab, both ploltywidget and jupyter-js-widgets extensions are disabled and says \"possibly incompatible\". I don't really understand why these are incompatible even though validation says it's OK.  (Image attached). \r\n![Jupyter Notebook error](https:\/\/user-images.githubusercontent.com\/45413346\/54499639-febab080-48e1-11e9-9182-e2085bea9c5d.JPG)\r\n\r\nNbextension list in Jupyter:\r\n![jupyter nbextension list](https:\/\/user-images.githubusercontent.com\/45413346\/54499672-653fce80-48e2-11e9-983b-5fe65e450c6e.JPG)\r\n\r\nLabextension list in Jupyter lab\r\n![jupyter labextension list](https:\/\/user-images.githubusercontent.com\/45413346\/54499718-e0a18000-48e2-11e9-8e06-da296b209f71.JPG)\r\n\r\n\r\n\r\n\r\nsteps followed: \r\n```\r\njupyter nbextension uninstall --py --sys-prefix widgetsnbextension\r\njupyter nbextension uninstall --py --sys-prefix plotlywidget\r\njupyter nbextension install --py --sys-prefix widgetsnbextension\r\njupyter nbextension install --py --sys-prefix plotlywidget\r\njupyter nbextension enable --py --sys-prefix widgetsnbextension\r\njupyter nbextension enable --py --sys-prefix plotlywidget\r\n```\r\nPlease help me fix it in **jupyter notebook** as well.\r\n\r\nAdditionally, I noticed that plotlywidget and jupyter-js-widget extensions are in an entirely different folder compared to deafult nbextension folder. Is this causing the problem? If yes, could you please help me on how to fix ? What files (file path) should I copy from one location to another location?\r\n\r\nDetails:  I don't have conflicting packages (for any of them listed below) in conda list and pip list.\r\n```\r\nPython: 3.7 (64-bit)\r\nPlotly:                                                       3.7.0\r\nipywidgets                                                7.4.2\r\nwidgetsnbextension                                 3.4.2\r\njupyter-nbextensions-configurator          0.4.1\r\njupyterlab                                                 0.35.3\r\njupyterlab-server                                       0.2.0\r\njupyter                                                       1.0.0\r\n```","> Hi @ubershmekel ,\r\n> \r\n> For the visual display of the `FigureWidget` to update you need to allow it to display itself as an ipywidget by making the `fig` variable the last statement in a notebook cell. In particular, you can't use `iplot`. For example:\r\n> \r\n> ```python\r\n> import plotly.graph_objs as go\r\n> \r\n> data = [go.Bar(\r\n>             x=['giraffes', 'orangutans', 'monkeys'],\r\n>             y=[20, 14, 23]\r\n>     )]\r\n> layout = {'yaxis': {'range': [0, 25]}}\r\n> fig = go.FigureWidget(data, layout)\r\n> fig\r\n> ```\r\n> \r\n> ![newplot](https:\/\/user-images.githubusercontent.com\/15064365\/51741649-86fca200-2065-11e9-9171-497879d62c33.png)\r\n> \r\n> ```python\r\n> # The following code will update the plot above\r\n> fig.data[0].y = (5,10,1)\r\n> fig.layout.title = \"New title\"\r\n> ```\r\n> \r\n> Does that work for you?\r\n\r\nfor me it worked like a charm, thanks a lot!"],"labels":["question"]},{"title":"ff.create_facet_grid not supporting numpy.int dtypes","body":"Related to the issue: https:\/\/github.com\/plotly\/documentation\/issues\/1244 logged by https:\/\/github.com\/Chippasaur\r\n\r\nThrows an error:\r\n```\r\nValueError: \r\n    Invalid value of type 'numpy.int64' received for the 'name' property of scatter\r\n        Received value: 6\r\n\r\n    The 'name' property is a string and must be specified as:\r\n      - A string\r\n      - A number that will be converted to a string\r\n```\r\nwhen the dataframe column contains numpy.int\r\n\r\nLooks like while checking for the instance: https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/_plotly_utils\/basevalidators.py#L1010 numpy-based dtypes should also be validated?","comments":["Good idea, thanks for the suggestion @priyatharsan "],"labels":["enhancement"]},{"title":"Add option(s) to prevent a trace (or legendgroup?) from being hidden by other traces' double-click events (or their own single-click events).","body":"In some cases it is desirable to have one or more traces remain always visible on the plot, even as other traces are toggled. For example, keeping some scatter nodes fixed while toggling different sets of edges. In particular other traces' double-click events cannot currently be prevented from toggling a trace.\r\n\r\nThere are a few cases I can think of that one might want, which should probably function independently\r\nof whether or not a trace has `showlegend` toggled, with the first being the main case I've run into:\r\n* Trace is unaffected by any double-click events (but may or may not be single-clickable).\r\n* Trace cannot be single-clicked (but may be affected by double-clicks). \r\n* [Obscure and probably not worth the potentially unexpected behaviour]: Trace is unaffected by others' double click events but its own double-click event works, or vice versa.\r\n\r\nIt seems best to add two options like `ignorelegendsingleclick` and `ignorelegenddoubleclick` to each trace (though a less granular `alwaysvisible` would also be sufficient for my own and probably most peoples' use cases).\r\n\r\nIt would probably also be a bonus if this worked with legendgroups - either allowing components of a legendgroup to differ in their toggleability settings and having it just work, or else raising an error if all members of a legendgroup don't share the same toggleability settings.\r\n\r\nA further annoyance I can think of would be if one were disable all double-click functionality but then be unable to hide the \"Double-click on legend to isolate one trace\" tooltip that pops up when the legend is clicked. It should probably also be toggleable or else auto-disable itself when it sees all traces ignore double-click.","comments":["+1 to \"In some cases it is desirable to have one or more traces remain always visible on the plot, even as other traces are toggled.\" Does this functionality not currently exist?","I'd like to see this feature too. Apparently it is [already available](https:\/\/github.com\/plotly\/plotly.js\/issues\/665) in plotly.js."],"labels":["enhancement"]},{"title":"Contributing instructions do not work on Windows","body":"A step in the contributing guide is to use the command `make setup_subs`. However, this does not work easily on Windows (uses make, rm, rsync). Is it worth moving this functionality to setup.py to be more platform-agnostic? Or is there some other preferred method of setting up one's plotly.py development environment on Windows?","comments":["Thanks for the suggestion @rockg.  Yeah, I'd love to get all of the functionality from the `makefile` moved into setup.py tasks and then get rid of the makefile altogether.\r\n\r\nIt looks like `git` and `rsync` are the only two commands that the makefile executes that don't have direct analogs in pure python.  We could call the same git commands using a subprocess since git works the same across platforms.  We could try replacing the rsync commands with delete and copy operations and see if the runtime is still reasonable.\r\n\r\nIs there anything here you're interested in working on?","I'll be happy to do this. I agree that rsync should easily be replicated with standard library python and that git should move into subprocesses.","I notice that `mplexporter` and `chunked_requests` already live in the plotly.py project not as submodules.  Further, the commit times in plotly are more recent than the `mplexporter` and `chunked_requests` submodule commits themselves.\r\n\r\nFor example, [plotly's mplexporter](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/plotly\/matplotlylib\/mplexporter\/exporter.py) was updated 11 months ago, but the corresponding file in the [mplexporter](https:\/\/github.com\/mpld3\/mplexporter\/blob\/f61e7261b969085b11c4e3128af19b67a2aa7e74\/mplexporter\/exporter.py) for the commit referenced in the submodule is 5 years old. Similarly with `chunked_requests` (5 months for the plotly file, 3 years for the chunked_requests file). Do the submodules even need to be used?","Thanks for pointing that out @rockg, it looks like there has been some activity on the mplexporter project sync we last synced things up, so I'd like to keep that submodule around and then I'll sync and test it for our next release.\r\n\r\nIt doesn't look like there have been any changes made to `chunked_requests` since our last sync, and in fact I made a change to it 5 months ago without realizing it was a submodule!\r\n\r\n@chriddyp, do you want keep `chunked_requests` as it's own repo and backport my change in https:\/\/github.com\/plotly\/plotly.py\/commit\/5138734cc035019b58b6ad26b61a6d4a074cbba7? Or should we just remove the submodule and make the plotly.py version authoritative?\r\n"],"labels":["testing","documentation"]},{"title":"Violin Plots not Grouping into Multiple Violins","body":"This seems to be an issue I experienced after updating plotly.py to 3.5.0, and  the issue persists whether I install from conda or from pip\r\n\r\nBased on the example from here: https:\/\/plot.ly\/python\/violin-plot\/\r\nUsing the code provided:\r\n\r\n```\r\nnp.random.seed(619517)\r\nNr = 250\r\ny = np.random.randn(Nr)\r\ngr = np.random.choice(list(\"ABCDE\"), Nr)\r\nnorm_params = [(0, 1.2), (0.7, 1), (-0.5, 1.4), (0.3, 1), (0.8, 0.9)]\r\n\r\nfor i, letter in enumerate(\"ABCDE\"):\r\n    y[gr == letter] *= norm_params[i][1] + norm_params[i][0]\r\ndf = pd.DataFrame(dict(Score = y, Group = gr))\r\n\r\nfig = ff.create_violin(df, data_header='Score', group_header='Group',\r\n                       height=500, width=800)\r\nplotly.offline.plot(fig, filename='C:\\\\Users\\\\USERNAME\\\\Documents\\\\PyPlots\\\\Multiple Violins.html')\r\n```\r\n\r\nThe same problem persists with my own data, the plots end up overlapping rather than grouping. This was literally working fine yesterday on an older version (3.4.2) of plotly, but now I cannot update or create multiple violin plots, despite no change in code.\r\n\r\nThe output looks something like this:\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/46386737\/50714159-392fe380-103d-11e9-91a3-ac15b8e23933.png)\r\n\r\n","comments":["Maybe related? https:\/\/github.com\/plotly\/plotly.js\/issues\/3390","> Maybe related? plotly\/plotly.js#3390\r\n\r\nI wouldn't be surprised that they are related. I don't use plotly.js but the issue seems to be rather similar.","Ah well Plotly.py is a wrapper for Plotly.js so you are kind of using it :)","> Ah well Plotly.py is a wrapper for Plotly.js so you are kind of using it :)\r\n\r\nFair, because I have heard about their being minor differences - with some parts of plotly.py not updating when plotly.js updates because of the potential for it to break, that's why I think this issue is probably still relevant to plotly.py users","Thanks for taking the time to report this @Omniportance.  I think there's a good chance that it's related to plotly\/plotly.js#3390, but I'll leave this open here as well as a reminder to double check once plotly\/plotly.js#3390 is addressed in plotly.js.","Hmm,\r\n\r\nhttps:\/\/user-images.githubusercontent.com\/46386737\/50714159-392fe380-103d-11e9-91a3-ac15b8e23933.png\r\n\r\nlooks like a violin generated from the plotly.py figure factory.","Yeah, good point @etpinard.  We should still get to the bottom of this, but the recommended way to create violin plots is now to use the first-class violin trace (https:\/\/plot.ly\/python\/violin\/#multiple-traces) rather than the figure factory.\r\n\r\nI looked into this a bit, and something seems odd with the layout.  Here's the layout that results from https:\/\/plot.ly\/python\/violin-plot\/#multiple-violins.\r\n\r\n```\r\n 'layout': {'autosize': False,\r\n               'height': 500,\r\n               'hovermode': 'closest',\r\n               'showlegend': False,\r\n               'title': {'text': 'Violin and Rug Plot'},\r\n               'width': 800,\r\n               'xaxis': {'mirror': False,\r\n                         'range': [-0.3519296977351358, 0.30994141477927983],\r\n                         'showgrid': False,\r\n                         'showline': False,\r\n                         'showticklabels': False,\r\n                         'ticks': '',\r\n                         'title': {'text': 'B'},\r\n                         'zeroline': False},\r\n               'xaxis2': {'mirror': False,\r\n                          'range': [-0.7016703968670251, 0.6013919973891876],\r\n                          'showgrid': False,\r\n                          'showline': False,\r\n                          'showticklabels': False,\r\n                          'ticks': '',\r\n                          'title': {'text': 'C'},\r\n                          'zeroline': False},\r\n               'xaxis3': {'mirror': False,\r\n                          'range': [-0.37874143756128675, 0.33228453130107233],\r\n                          'showgrid': False,\r\n                          'showline': False,\r\n                          'showticklabels': False,\r\n                          'ticks': '',\r\n                          'title': {'text': 'E'},\r\n                          'zeroline': False},\r\n               'xaxis4': {'mirror': False,\r\n                          'range': [-0.46963617536888913, 0.40803014614074096],\r\n                          'showgrid': False,\r\n                          'showline': False,\r\n                          'showticklabels': False,\r\n                          'ticks': '',\r\n                          'title': {'text': 'A'},\r\n                          'zeroline': False},\r\n               'xaxis5': {'mirror': False,\r\n                          'range': [-0.4956026892691915, 0.4296689077243263],\r\n                          'showgrid': False,\r\n                          'showline': False,\r\n                          'showticklabels': False,\r\n                          'ticks': '',\r\n                          'title': {'text': 'D'},\r\n                          'zeroline': False},\r\n               'yaxis': {'autorange': True,\r\n                         'mirror': False,\r\n                         'showgrid': False,\r\n                         'showline': True,\r\n                         'showticklabels': True,\r\n                         'ticklen': 4,\r\n                         'title': {'text': ''},\r\n                         'zeroline': False}}\r\n```\r\n\r\nThe traces representing each violin group are assigned to different xaxis numbers.  The figure factory doesn't (and hasn't ever as far as I can tell) specify an explicit domain for the different xaxis objects.\r\n\r\nWe can add an explicit domain to each xaxis, which I expect will take care of the problem. but @etpinard @nicolaskruchten can you think of any reason why the default behavior here might have changed?\r\n\r\n"],"labels":["bug","plotly.js"]},{"title":"Feature Request: Allow single trace in data argument.","body":"Calls to, for intance, iplot need the first argument, data to be a \u201clist of traces\u201d. However, often you just want to pass one trace and in this case the plot is not shown, wouldn\u2019t be convenient to accept as well data being a single trace argument as well as a list? or at least convert single traces to a list with length 1, like this data=[trace], but do it behind the scenes, transparently to the user.\r\n\r\nI expect this behaviour to be more intuitive and closer to how the plot function of R works.\r\n\r\n[Original thread in discourse](https:\/\/community.plot.ly\/t\/why-the-data-argument-for-plots-has-to-be-a-list-and-cant-be-a-single-element\/17030).","comments":[],"labels":["enhancement"]},{"title":"Using domain to draw multiple parcoords only draws first trace","body":"I'm trying to add several parcoords plots next to each other, to add some kind of edge splatting image \r\n(something like this:\r\n![image](https:\/\/user-images.githubusercontent.com\/15800976\/50096704-9b54b000-0218-11e9-990f-e4a1be773585.png))\r\n\r\nWhen using the domain to draw multiple parcoords (similar to how the pie is drawn in the docu), only the traces for the first parcoords are drawn:\r\n![image](https:\/\/user-images.githubusercontent.com\/15800976\/50096809-d6ef7a00-0218-11e9-9c85-7786459d4823.png)\r\n\r\neven though the debugger returns this as the data of the drawn figure:\r\n\r\n`<class 'tuple'>: (Parcoords({\r\n    'dimensions': [{'range': [0, 4], 'tickvals': [0], 'values': [1, 2, 3]},\r\n                   {'range': [0, 4], 'tickvals': [0], 'values': [2, 3, 1]}],\r\n    'domain': {'x': [0, 0.5]},\r\n    'line': {'cmin': 0,\r\n             'color': [4, 4, 5],\r\n             'colorbar': {'title': 'Colorbar'},\r\n             'colorscale': 'Greys',\r\n             'reversescale': True},\r\n    'showlegend': False,\r\n    'uid': '82dbeee2-bd11-4977-bf10-09c7171a3b7a',\r\n    'visible': True\r\n}), Parcoords({\r\n    'dimensions': [{'range': [0, 4], 'tickvals': [0], 'values': [1, 2, 3]},\r\n                   {'range': [0, 4], 'tickvals': [0], 'values': [2, 3, 4]}],\r\n    'domain': {'x': [0.5, 1.0]},\r\n    'line': {'cmin': 0, 'color': [4, 4, 5], 'colorscale': 'Greys', 'reversescale': True},\r\n    'showlegend': False,\r\n    'uid': '507b8968-e5b3-4ca5-9c2a-bed702ed51ca',\r\n    'visible': True\r\n}))`\r\n","comments":["Thanks for the report @lordalisat,\r\n\r\nHere's a quick example that I tried:\r\n\r\n```python\r\nimport plotly.graph_objs as go\r\nfrom plotly.offline import init_notebook_mode, iplot\r\ninit_notebook_mode()\r\n\r\ndata = [\r\nimport plotly.graph_objs as go\r\nfrom plotly.offline import init_notebook_mode, iplot\r\ninit_notebook_mode()\r\n\r\ndata = [\r\n    go.Parcoords(\r\n        line = dict(color = 'blue'),\r\n        domain = {\r\n            'x': [0, 0.45],\r\n            'y': [0, 1]\r\n        },\r\n        dimensions = list([\r\n            dict(range = [1,5],\r\n                 constraintrange = [1,2],\r\n                 label = 'A', values = [1,4]),\r\n            dict(range = [1.5,5],\r\n                 tickvals = [1.5,3,4.5],\r\n                 label = 'B', values = [3,1.5]),\r\n        ])\r\n    ),\r\n    go.Parcoords(\r\n        line = dict(color = 'blue'),\r\n        domain = {\r\n            'x': [0.55, 1],\r\n            'y': [0, 1]\r\n        },\r\n        dimensions = list([\r\n            dict(range = [1,5],\r\n                 constraintrange = [1,2],\r\n                 label = 'C', values = [1,4]),\r\n            dict(range = [1.5,5],\r\n                 tickvals = [1.5,3,4.5],\r\n                 label = 'D', values = [3,1.5]),\r\n        ])\r\n    ),\r\n]\r\n\r\nlayout =  dict(\r\n    title = \"Multi-Parcoords Diagram\",\r\n)\r\n\r\nfig = dict(data=data, layout=layout)\r\niplot(fig)\r\n```\r\n![newplot 35](https:\/\/user-images.githubusercontent.com\/15064365\/50341033-47cdb500-04eb-11e9-9732-534ebd4b56fd.png)\r\n\r\nIn my case I'm seeing the axes for both traces, but no data is appearing on the second trace. Is this what you're seeing?  I'll open a corresponding report with the plotly.js project.","Also, for your particular usecase, is there a reason you couldn't create this example plot with a single `parcoords` trace (one with 8 dimensions)?","This is indeed the same thing that I am seeing. The reason I am not using a single parcoords trace is that the number of values changes per dimension, as well as the weights of the traces (basically, I am using the parcoords to visualize a set of directed graphs). Thanks for trying to think with me though!"],"labels":["bug","plotly.js"]},{"title":"Gantt chart legend does not toggle","body":"The Gantt examples from the documentation can't toggle the resources:\r\n\r\nhttps:\/\/plot.ly\/python\/gantt\/#using-hours-and-minutes-in-times\r\n\r\nThis was already reported in https:\/\/github.com\/plotly\/plotly.py\/issues\/910#issuecomment-356799770, but I'm opening a separate issue to not clutter the original one.\r\n\r\n![Gantt](https:\/\/user-images.githubusercontent.com\/3409397\/34805075-f2f6616e-f6b6-11e7-9d5b-9daa7efe8931.png)","comments":["Thanks for opening the dedicated issue @Juanlu001.\r\n\r\nThis would be nice, and I think it would be possible with some restructuring of the figure factory.  Right now the rectangles are drawn as `layout.shape` objects, which aren't actually connected to a legend entry.  To get toggling to work, the rectangles could be drawn as `scatter` traces with a `fill=toself`.","I am experiencing the same problem: Drawing an offline Gantt chart, plotly shows the colorbar only if `index_col`is set to numerical values. Once `index_col` ist set to labels, `show_colorbar=True` is being ignored, no legend is shown.\r\n\r\nEdit: Actually, it was being shown but at a position far off, I had to scroll down until the end to see it (the plot was not moving while scrolling). Now, the problem is gone because I defined a color dictionary, applying a specific color to each Resource."],"labels":["enhancement"]},{"title":"Support of openstreetmap map tile","body":"It looks like plotly\/dash only support mapbox and google-map. Would the dev team consider to add some features supporting [openstreetmap map tile](https:\/\/wiki.openstreetmap.org\/wiki\/Tile_servers)? Or is there some workarounds already (so far, I don't find any on Internet)? Thank you! :)","comments":["Thanks for the suggestion @kitman0804. Do you know if Mapbox itself supports OSM map tiles?  If so this might be something that could be handled in [plotly.js](https:\/\/github.com\/plotly\/plotly.js). \r\n\r\nOtherwise, I wonder what it would take to extract\/convert png images from a tile server. From here it might be possible to use an approach like this datashader example (https:\/\/plot.ly\/python\/change-callbacks-datashader\/).","Thanks for your reply @jonmmease.\r\n\r\nAs I know, [the Mapbox Streets tileset source data is derived from OpenStreetMap.](https:\/\/www.mapbox.com\/help\/define-osm\/) rather than using OSM map tiles directly that doesn't require a token.\r\n\r\nIt would be cool if there is some integration between [plot.js](https:\/\/github.com\/plotly\/plotly.js\/) and some existing JS library, e.g. [leaflet.js](https:\/\/leafletjs.com\/), I hope it won't be too complex.\r\n","@kitman0804 There is a Python library, `osmnx` [https:\/\/github.com\/gboeing\/osmnx](https:\/\/github.com\/gboeing\/osmnx), that can be used to retrieve  from OpenStreetMap, data for places.\r\n (`place` is the name of a string variable in `osmnx` that defines a region on the map).\r\n `osmnx` provides functions to define, analyze, and plot street networks, as matplotlib figures.\r\n \r\n In this notebook [https:\/\/plot.ly\/~empet\/15043](https:\/\/plot.ly\/~empet\/15043) you can see how based on this library and performing a query  for the restaurants in a bounding box around the Lake Como, Italy, I plotted information as a Plotly scattermapbox.\r\n \r\n More precisely,  I retrieved and defined a geo-dataframe via `osmnx`,  for the boundary of the Lake Como (colored in blue), and  the city Como (colored with a red linecolor).  The boundaries of these `places` are defined as layers in Mapbox.\r\n  \r\n  In the second part I defined a query, via Overpass API, for restaurant nodes in a bounding box around the lake. I extracted their geographic position and name,\r\n  and defined a plotly `scattermapbox` trace.\r\n  \r\n  Here [https:\/\/plot.ly\/~empet\/15000] (https:\/\/plot.ly\/~empet\/15000) is an example of street network retrieved with the `osmnx`, and plotted with Plotly, by defining a custom function that returns   data for a plotly plot  of the network. "],"labels":["enhancement"]},{"title":"plotly.tools.make_subplots does not support go.Table","body":"I have a case where i was trying to place tables in a gris (1 row, 3 columns)\r\n\r\n```python\r\nimport plotly\r\nimport plotly.graph_objs as go\r\nsubplot_traces = [go.Table(cells={\"values\": [[\"a\"], [\"b\"]]}),\r\n                  go.Table(cells={\"values\": [[\"c\"], [\"d\"]]})]\r\nfigure = plotly.tools.make_subplots(rows=1, cols=3)\r\nfor isubplot, subplot_trace in enumerate(subplot_traces):\r\n    figure.append_trace(subplot_trace, 1, isubplot + 1)\r\n```\r\n\r\n\r\nError:\r\n```\r\nThis is the format of your plot grid:\r\n[ (1,1) x1,y1 ]  [ (1,2) x2,y2 ]  [ (1,3) x3,y3 ]\r\n\r\n----------------------------------------------------------------------\r\nValueError                           Traceback (most recent call last)\r\n<ipython-input-68-4d0180560ee7> in <module>()\r\n      5 figure = plotly.tools.make_subplots(rows=1, cols=3)\r\n      6 for isubplot, subplot_trace in enumerate(subplot_traces):\r\n----> 7     figure.append_trace(subplot_trace, 1, isubplot + 1)\r\n\r\n~\/anaconda3\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in append_trace(self, trace, row, col)\r\n   1212 \"\"\", DeprecationWarning)\r\n   1213\r\n-> 1214         self.add_trace(trace=trace, row=row, col=col)\r\n   1215\r\n   1216     def _set_trace_grid_position(self, trace, row, col):\r\n\r\n~\/anaconda3\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in add_trace(self, trace, row, col)\r\n   1059         return self.add_traces(data=[trace],\r\n   1060                                rows=[row] if row is not None else None,\r\n-> 1061                                cols=[col] if col is not None else None\r\n   1062                                )[0]\r\n   1063\r\n\r\n~\/anaconda3\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in add_traces(self, data, rows, cols)\r\n   1142         if rows is not None:\r\n   1143             for trace, row, col in zip(data, rows, cols):\r\n-> 1144                 self._set_trace_grid_position(trace, row, col)\r\n   1145\r\n   1146         # Make deep copy of trace data (Optimize later if needed)\r\n\r\n~\/anaconda3\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in _set_trace_grid_position(self, trace, row, col)\r\n   1249                                 \"An axis object for ({r},{c}) subplot \"\r\n   1250                                 \"cell got deleted.\".format(r=row, c=col))\r\n-> 1251             trace['xaxis'] = ref[0]\r\n   1252             trace['yaxis'] = ref[1]\r\n   1253\r\n\r\n~\/anaconda3\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in __setitem__(self, prop, value)\r\n   2781             # ### Validate prop ###\r\n   2782             if prop not in self._validators:\r\n-> 2783                 self._raise_on_invalid_property_error(prop)\r\n   2784\r\n   2785             # ### Get validator for this property ###\r\n\r\n~\/anaconda3\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in _raise_on_invalid_property_error(self, *args)\r\n   2961                                  full_obj_name=full_obj_name,\r\n   2962                                  invalid_str=invalid_str,\r\n-> 2963                                  prop_descriptions=self._prop_descriptions))\r\n   2964\r\n   2965     def update(self, dict1=None, **kwargs):\r\n\r\nValueError: Invalid property specified for object of type plotly.graph_objs.Table: 'xaxis'\r\n```\r\n\r\nSystem setup:\r\nPython 3.6\r\nPlotly 3.4.0","comments":["Hi @AbdealiJK,\r\n\r\nThat's correct, `make_subplots` does not currently support `table` traces. Thanks for the suggestion.\r\n \r\nThe alternative is to manually position your table traces using the `table.domain` property."],"labels":["enhancement","make_subplots"]},{"title":"ff.utils.validate_positive_scalars doesn't raise TypeError if user doesn't input a number","body":"This should result in an error:\r\n\r\n```python\r\nfrom plotly.figure_factory import utils\r\nutils.validate_positive_scalars(a=1, b=0.001, c=\"aString\")\r\n```\r\n\r\nThe code to change is here: https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/plotly\/figure_factory\/utils.py#L101-L115","comments":[],"labels":["enhancement","invalid"]},{"title":"make_subplots(row_width=[]) is parsed in the 'wrong' order","body":"Imagine have 3 subplots stacked one above the other. I want the first (i.e. the top one) to have its height twice as big as the others. \r\nSo after I have set:\r\n```python\r\nfig = tools.make_subplots(\r\n      rows=3, \r\n      cols=1,\r\n      subplot_titles=('subtitle 1', 'subtitle 2', 'subtitle 3'),\r\n```\r\n\u2026 I intuitively set (thanks to @Kully 's [previous PR](https:\/\/github.com\/plotly\/plotly.py\/issues\/1229)):\r\n```\r\n      row_width=[2, 1, 1]\r\n)\r\n```\r\n\r\nHowever, this makes the 3rd graph (i.e. the \"first\u2026 from last\") have its height twice as big as the others:\r\n\r\n![plot from api 3](https:\/\/user-images.githubusercontent.com\/37387755\/48549458-c2415e80-e8c7-11e8-9fe2-62a94ca7ec35.png)\r\n\r\nI believe that `row_width` is parsed in the wrong direction.\r\n\r\n----\r\n**MWE**\r\n```python\r\n\r\nfrom plotly import tools\r\nimport plotly.plotly as py\r\nimport plotly.graph_objs as go\r\n\r\ntrace1 = go.Scatter(\r\n    x=[3, 4, 5],\r\n    y=[1000, 1100, 1200],\r\n)\r\ntrace3 = go.Scatter(\r\n    x=[0, 1, 2],\r\n    y=[10, 11, 12]\r\n)\r\ntrace2 = go.Scatter(\r\n    x=[2, 3, 4],\r\n    y=[100, 110, 120],\r\n)\r\nfig = tools.make_subplots(\r\n      rows=3,\r\n      cols=1,\r\n      shared_xaxes=True,\r\n      vertical_spacing=0.1,\r\n      subplot_titles=('subtitle 1', 'subtitle 2', 'subtitle 3'),\r\n      row_width=[2, 1, 1]\r\n)\r\n\r\nfig.append_trace(trace1, 1, 1)\r\nfig.append_trace(trace2, 2, 1)\r\nfig.append_trace(trace3, 3, 1)\r\n\r\nfig['layout'].update(height=600, width=600, title='Subplots with Shared X-Axes')\r\n\r\nplot_url = py.plot(fig)\r\n```","comments":["Thanks for the report @EBoisseauSierra ,\r\n\r\nFor sake of discussion, here's the current behavior of the general 2D case where `row_width=[2, 1, 1]` and `column_width=[2, 1]`.\r\n\r\n```python\r\nfrom plotly import tools\r\nimport plotly.plotly as py\r\nimport plotly.graph_objs as go\r\n\r\ntrace1 = go.Scatter(\r\n    x=[3, 4, 5],\r\n    y=[1000, 1100, 1200],\r\n)\r\ntrace3 = go.Scatter(\r\n    x=[0, 1, 2],\r\n    y=[10, 11, 12]\r\n)\r\ntrace2 = go.Scatter(\r\n    x=[2, 3, 4],\r\n    y=[100, 110, 120],\r\n)\r\nfig = tools.make_subplots(\r\n      rows=3,\r\n      cols=2,\r\n      shared_xaxes=True,\r\n      vertical_spacing=0.1,\r\n      subplot_titles=('subtitle 1', 'subtitle 2', 'subtitle 3',\r\n                      'subtitle 4', 'subtitle 5', 'subtitle 6'),\r\n      row_width=[2, 1, 1],\r\n      column_width=[2, 1]\r\n)\r\n\r\nfig.append_trace(trace1, 1, 1)\r\nfig.append_trace(trace2, 2, 1)\r\nfig.append_trace(trace3, 3, 1)\r\nfig.append_trace(trace1, 1, 2)\r\nfig.append_trace(trace2, 2, 2)\r\nfig.append_trace(trace3, 3, 2)\r\n\r\nfig['layout'].update(height=600, width=800, title='Subplots with Shared X-Axes')\r\ngo.FigureWidget(fig)\r\n```\r\n![newplot 7](https:\/\/user-images.githubusercontent.com\/15064365\/48589120-12d8ac00-e908-11e8-92bb-99edd59e8f23.png)\r\n\r\nSo what's happening is that the `row_width` and `column_width` elements correspond to subplots starting from the bottom left. This matches the usual Cartesian coordinate system conventions, but is not consistent with the `row`\/`col` indexing, which starts from the top left.  The `subplot_titles` property is a 1D list that wraps around the subplots in row-major ordering.\r\n\r\nI agree that this is a bit of an inconsistent state of affairs, but it's worked this way for a long time so I don't think we should change the default before the next major version bump (version 4).  I'm going to tag this as `make_subplots` and `breaking change` so that we remember to come back to it when planning for version 4.  In the meantime, you can safely reverse the `row_width` list and trust that this behavior will hold during all version 3.* releases.\r\n\r\nDoes that sound reasonable?","I\u00a0now better understand how it worked, and get why it wasn't really a \"bug\".\r\nI still think that it still more intuitive to reverse the order, as it is then consistent with how subplots are assigned traces.\r\n\r\nAnyway, I totally get your point \u2014 backward compatibility is a big issue. I have no problem waiting for versions `4+`, keeping in mind to update my code in due time (-;\r\nIn the mean time, I\u00a0can now change `row_width=[ # in reverse order. don't ask why\u2026`!\r\n\r\nThanks a lot for responsiveness\u2026 and plotly!"],"labels":["breaking change","make_subplots","V4"]},{"title":"Integration with Datashader (zoom out animations)","body":"When using Datashader to aggregate data and then plot it, there is a problem with \"Autoscale\" and \"Reset Axes\" and double-click. I honestly can't tell the difference between the three of them, even though I know one of them should reset the plot to its initial state, namely double-click.\r\n\r\nIn the image example, which can be run with `datashader_image` show good behavior when datashading. The double-click zoom out also works beautifully.\r\n\r\nAs for the data example (ran with `datashader_data`), you can see the double-click animation working. \r\nSo, the image is reset to its initial position, whereas for the data example, double-clicking zooms out a little, but doesn't reset the plot to its initial state.\r\n\r\nYou can reproduce the aforementioned behavior with the example\r\n\r\n```python\r\nimport plotly.graph_objs as go\r\nimport pandas as pd\r\nimport numpy as np\r\nimport datashader as ds\r\nfrom datetime import datetime\r\nimport datashader.transfer_functions as tf\r\nimport dask.dataframe as dd\r\nfrom math import floor\r\n\r\nglobal plot_obj\r\nplot_obj = None\r\n\r\nglobal df\r\ndf = None\r\n\r\ndef generate_df(size=100000):\r\n    d = {    \r\n        'dates' : pd.date_range('2015-01-01', periods=size, freq='1min'),\r\n        'unique_id' : np.arange(0, size),\r\n        'ints' : np.random.randint(0, size, size=size),\r\n        'floats' : np.random.randn(size),\r\n        'bools' : np.random.choice([0, 1], size=size),\r\n        'int_nans' : np.random.choice([0, 1, np.nan], size=size),\r\n        'float_nans' : np.random.choice([0.0, 1.0, np.nan], size=size),\r\n        'constant' : 1, \r\n        'categorical' : np.random.choice([10, 20, 30, 40, 50], size=size) , \r\n        'categorical_binary' : np.random.choice(['a', 'b'], size=size), \r\n        #'categorical_nans' : np.random.choice(['a', 'b', np.nan], size=size)\r\n        'categorical_nans' : np.random.choice(['a', 'b', 'c'], size=size)\r\n    }\r\n\r\n    df = pd.DataFrame(d)\r\n    # df['hardbools'] = df['bools'] == 1\r\n    df['categorical_nans'] = df['categorical_nans'].replace('c', np.nan)\r\n    # df['hardcategorical_nans'] = df['categorical_nans'].astype('category')\r\n    df['categorical_binary'] = df['categorical_binary'].astype('category')\r\n    df['categorical_nans'] = df['categorical_nans'].astype('category')\r\n\r\n    # df = df.set_index('dates')\r\n    df['dates_int'] = df['dates'].astype('int64')\r\n    globals()['df'] = df\r\n    return df\r\n\r\n# ===================================DATA==========================\r\ndef update_timeseries(layout, x_range, y_range, plot_width, plot_height):\r\n    print(f\"On change\")\r\n    \r\n    x_range = [\r\n            int(pd.to_datetime(plot_obj.layout.xaxis.range[0]).timestamp()*1000000000), \r\n            int(pd.to_datetime(plot_obj.layout.xaxis.range[1]).timestamp()*1000000000)\r\n    ]\r\n    y_range = [\r\n            plot_obj.layout.yaxis.range[0],\r\n            plot_obj.layout.yaxis.range[1]]\r\n\r\n    plot_width = floor(plot_width)\r\n    plot_height = floor(plot_height)\r\n\r\n    cvs = ds.Canvas(x_range=x_range, y_range=y_range, plot_height=plot_height, plot_width=plot_width)\r\n\r\n    agg_scatter = cvs.points(df, 'dates_int', 'floats', agg=ds.any())\r\n\r\n    pq = agg_scatter.to_pandas().transpose()\r\n    a = pq.stack().reset_index()\r\n    q = a.loc[a[a.columns[2]]==True]\r\n\r\n    ew = [datetime.fromtimestamp(item\/1000000000) for item in q.dates_int.values]\r\n\r\n    with plot_obj.batch_update():\r\n        plot_obj.data[0].x = ew\r\n        plot_obj.data[0].y = q.floats.values\r\n        plot_obj.layout.xaxis.range = (ew[0], ew[-1])\r\n        plot_obj.layout.yaxis.range = (q.floats.min(), q.floats.max())\r\n\r\ndef datashader_data(size=1000000):\r\n    df = generate_df(size=size)\r\n\r\n    x_range=[df.head(1).dates.values[0].astype('int64'), df.tail(1).dates.values[0].astype('int64')]\r\n    y_range=[df.floats.min(), df.floats.max()]\r\n    plot_height=300\r\n    plot_width=300\r\n\r\n    cvs = ds.Canvas(x_range=x_range, y_range=y_range, plot_height=plot_height, plot_width=plot_width)\r\n\r\n    agg_scatter = cvs.points(df, 'dates_int', 'floats', agg=ds.any())\r\n\r\n\r\n    agg_scatter = agg_scatter.to_pandas().transpose()\r\n    agg_scatter = agg_scatter.stack().reset_index()\r\n    # select only pixels where data points are present\r\n    agg_scatter = agg_scatter.loc[agg_scatter[agg_scatter.columns[2]]==True]\r\n\r\n    # init plot\r\n    d = go.Scatter(\r\n            x=agg_scatter.dates_int.astype('int64').astype('<M8[ns]'), \r\n            y=agg_scatter.floats)#, mode='markers')\r\n    f = go.FigureWidget(data=[d])\r\n\r\n    # add callback\r\n    f.layout.on_change(update_timeseries, 'xaxis.range', 'yaxis.range', 'width', 'height')\r\n    f.layout.dragmode = 'zoom'\r\n    \r\n    globals()['plot_obj'] = f\r\n\r\n    return f\r\n\r\n# ===============================IMAGE===============================\r\ndef gen_ds_image(x_range, y_range, plot_width, plot_height):\r\n    if x_range is None or y_range is None or plot_width is None or plot_height is None:\r\n        return None\r\n    \r\n    cvs = ds.Canvas(x_range=x_range, y_range=y_range, plot_height=plot_height, plot_width=plot_width)\r\n    agg_scatter = cvs.points(df, 'dates_int', 'floats', agg=ds.any())\r\n\r\n    img = tf.shade(agg_scatter)\r\n    img = tf.dynspread(img, threshold=0.95, max_px=5, shape='circle')\r\n    \r\n    return img.to_pil()\r\n\r\ndef update_ds_image(layout, x_range, y_range, plot_width, plot_height):\r\n    print(f\"On change\")\r\n    img = plot_obj.layout.images[0]\r\n    \r\n    x_range = [\r\n            int(pd.to_datetime(plot_obj.layout.xaxis.range[0]).timestamp()*1000000000), \r\n            int(pd.to_datetime(plot_obj.layout.xaxis.range[1]).timestamp()*1000000000)]\r\n    y_range = [plot_obj.layout.yaxis.range[0], plot_obj.layout.yaxis.range[1]]\r\n\r\n    # Update with batch_update so all updates happen simultaneously\r\n    with plot_obj.batch_update():\r\n        img.x = x_range[0]\r\n        img.y = y_range[1]\r\n        img.sizex = x_range[1] - x_range[0]\r\n        img.sizey = y_range[1] - y_range[0]\r\n        img.source = gen_ds_image(x_range, y_range, plot_width, plot_height)\r\n\r\n\r\ndef datashader_image(size=100000):\r\n    df = generate_df(size=size)\r\n\r\n    x_range=[df.head(1).dates.values[0].astype('int64'), df.tail(1).dates.values[0].astype('int64')]\r\n    y_range=[df.floats.min(), df.floats.max()]\r\n    plot_height=600\r\n    plot_width=1200\r\n\r\n    initial_img = gen_ds_image(x_range, y_range, plot_width, plot_height)\r\n\r\n    # init plot\r\n    f = go.FigureWidget(\r\n        data=[{\r\n            'x': [\r\n                datetime.fromtimestamp(df.head(1).dates.values[0].astype('int64')\/1000000000), \r\n                datetime.fromtimestamp(df.tail(1).dates.values[0].astype('int64')\/1000000000)\r\n                ], \r\n            'y': y_range, \r\n            'mode': 'markers',\r\n            'marker': {'opacity': 0} # invisible trace to init axes and to support autoresize\r\n        }], \r\n        layout={'width': plot_width, 'height': plot_height}\r\n    )\r\n\r\n    # add image to plot\r\n    f.layout.images = [\r\n            go.layout.Image(\r\n                source = initial_img,  # plotly now performs auto conversion of PIL image to png data URI\r\n                xref = \"x\",\r\n                yref = \"y\",\r\n                x = x_range[0],\r\n                y = y_range[1],\r\n                sizex = x_range[1] - x_range[0],\r\n                sizey = y_range[1] - y_range[0],\r\n                sizing = \"contain\",\r\n                layer = \"below\")\r\n            ]\r\n\r\n    f.layout.on_change(update_ds_image, 'xaxis.range', 'yaxis.range', 'width', 'height')\r\n    f.layout.dragmode = 'zoom'\r\n\r\n    globals()['plot_obj'] = f\r\n    return f\r\n```","comments":[],"labels":["enhancement"]},{"title":"Integration with Datashader (datetime conversions)","body":"Following conversation with @jonmmease on https:\/\/github.com\/plotly\/plotly.py\/issues\/1266 .\r\n\r\nIn the example specified in https:\/\/plot.ly\/python\/change-callbacks-datashader\/ we can see a datashading example. This example doesn't use datetime indexes tho.\r\n\r\nIn order to datashade, the axis cannot be datetime since this causes problems when aggregating points. In order to solve this, we must convert the datetimes to ints (in milliseconds) before sending in the data for datashading. \r\n\r\nThis process is tedious and error-prone on the side of the user.\r\n\r\nAs stated by @jonmmease \r\n_I do want to build a convenient interface for doing what this example notebook does, probably as a new figure factory in the plotly.figure_factor package. This datashader-based figure factory would directly accept dask data structures and feed them into the datashader library to perform server-side rendering._\r\n\r\nThis, with the addition of datetime conversions, would be on par with Holoviews, in terms of big data plotting.","comments":["Thanks for raising the issue @pedroallenrevez!\r\n\r\nCross reference https:\/\/github.com\/plotly\/plotly.py\/issues\/1207 for discussion of datetime conversions.\r\nCross reference #1266 for discussion of dask's relationship with datashader","Cross reference https:\/\/github.com\/plotly\/plotly.py\/issues\/1272 for discussion of plot reset animation problems."],"labels":["enhancement"]},{"title":"Exporting image from Plotly Offline After Interaction SVG error","body":"Placeholder to investigate: https:\/\/community.plot.ly\/t\/exporting-svg-from-plotly-offline-after-interaction\/14868\/10\r\n\r\nRepository: https:\/\/github.com\/alexpreynolds\/flow-cytometry-visualization\r\n\r\nnotebook (nbviewer): http:\/\/nbviewer.jupyter.org\/github\/alexpreynolds\/flow-cytometry-visualization\/blob\/master\/FlowCytometryVisualization.ipynb","comments":["Double quotes are not properly handled \/ escaped within style attributes concerning fonts.","Please, I will also like this feature. Png format has a too low quality for me.\r\n\r\nIt would be nice the \"Download plot as png\" button lets you select different types of formats (jpeg, SVG, etc.)"],"labels":["bug"]},{"title":"Feature Request: Arrow Keys for Panning ","body":"I think it would nice to implement the use of arrow keys for panning in plots because for larger data sets there is a bit of a lag in switching between manipulation tools, plus it would be nice not to have to those few extra clicks. \r\n\r\nHard for me to gauge the difficulty of implementation but I thought it would be worth a mention.\r\n\r\nAlso just decided to do a quick google search and found several others seem to like the idea though for plotly.js: \r\n\r\nhttps:\/\/github.com\/plotly\/plotly.js\/issues\/562\r\n ","comments":["Hi @SterlingButters,\r\n\r\nThanks for the suggestion, having some way to respond to keystrokes would be a nice feature in general.  There would be some design questions to consider, for instance whether this would be a change in plotly.js or only plotly.py.\r\n\r\nAlso, for you immediate use-case, if you shift+left click in zoom mode you can perform a pan action without changing tools.  Similarly, if you shift+left click in pan mode you can perform a zoom action without changing tools.","@jonmmease I agree! And I would guess maybe the implementation would be in plotly.js with an eventlistener for the corresonding keyCodes for the arrow keys. \r\n\r\nInterestingly enough, my immediate-use case deals with 3D plots for which your suggestion did not seem to work (at least in Safari).  "],"labels":["enhancement"]},{"title":"Plotly Map with Lines Error","body":"Link to my graph:\r\nhttps:\/\/plot.ly\/~pnoonan32\/154\r\n\r\nImage of errors NOT indicated in python interpreter that are coming from JavaScript console:\r\n![image](https:\/\/user-images.githubusercontent.com\/39175596\/47816119-98fdcb80-dd28-11e8-9b7e-b5bb91e6094c.png)\r\n\r\nLink to tutorial I was following\r\nhttps:\/\/plot.ly\/python\/lines-on-maps\/\r\n\r\nI was attempting to follow this tutorial and successfully got created a graph but cannot see the graph due to unidentified errors. How should I go about fixing this issue?","comments":["Hi @pnoonan32 , thanks for the report. Could you copy over the exact code you ran to create the Figure when you hit this error?  I tried the first example from that page locally and it rendered fine, but I also see JavaScript errors when loading the link you shared.  \r\n\r\nDo you also get an error if you write the figure out to a local html file with `plotly.offline.plot`?\r\nThanks!","This code may not make sense as it is for a fairly large project, so I will send the code I specifically used to make the plotly graph and leave a link to the entire file just in case some the code does not make or you are having a hard time understanding what certain lists or dictionaries contain what data and in what quantity.\r\n\r\nCode used for graph:\r\ndef longitudes_and_latitudes_graph(rows):\r\n    \r\n    station_dict = {}\r\n    trip_dict = {}\r\n    max_counter = 1\r\n\r\n    for row in rows:\r\n\r\n        station_dict[ row['Starting Station ID'] ] = (row['Starting Station Latitude'], row['Starting Station Longitude'])\r\n\r\n        key = (row['Starting Station ID'], row['Ending Station ID'])\r\n        if key not in trip_dict:\r\n\r\n            trip_dict[key] = [row['Starting Station Latitude'], row['Starting Station Longitude'], row['Ending Station Latitude'], row['Ending Station Longitude'], 0]\r\n\r\n            # \"+=1\" for the counter i.e 0\r\n        trip_dict[key][4]+=1\r\n        max_counter = max(max_counter, trip_dict[key][4])\r\n\r\n\r\n\r\n    layout = dict(\r\n        title = 'Bike Share Paths',\r\n        showlegend = False, \r\n        geo = dict(\r\n            scope='usa',\r\n            projection=dict( type='azimuthal equal area' ),\r\n            showland = True,\r\n            landcolor = 'rgb(243, 243, 243)',\r\n            countrycolor = 'rgb(204, 204, 204)',\r\n        ),\r\n    )\r\n    \r\n\r\n    stations = [ dict(\r\n        type = 'scattergeo',\r\n        locationmode = 'USA-states',\r\n        lon = [v[1] for k,v in station_dict.items()],\r\n        lat = [v[0] for k,v in station_dict.items()],\r\n        hoverinfo = 'text',\r\n            # Will show Station ID on hover\r\n        text = [k for k,v in station_dict.items()],\r\n        mode = 'markers',\r\n        marker = dict( \r\n            size=2, \r\n            color='rgb(255, 0, 0)',\r\n            line = dict(\r\n                width=3,\r\n                color='rgba(68, 68, 68, 0)'\r\n            )\r\n        ))]\r\n\r\n        # t is reffering to the built-in \"sorted\" tuple\r\n    trip_dict =sorted(trip_dict.items(), key=(lambda t: -t[1][4]))\r\n        \r\n    bike_share_paths = []\r\n    for (key, (st_lat, st_lon, end_lat, end_lon, counter)) in trip_dict[:50]:\r\n        bike_share_paths.append(\r\n        dict(\r\n            type = 'scattergeo',\r\n            locationmode = 'USA-states',\r\n            lon = [ st_lon, end_lon ],\r\n            lat = [ st_lat, end_lat ],\r\n            mode = 'lines',\r\n            line = dict(\r\n                width = 1,\r\n                color = 'red',\r\n            ),\r\n            opacity = float(counter)\/float(max_counter),\r\n        )\r\n    )\r\n\r\n    import pdb; pdb.set_trace()\r\n\r\n    fig = go.Figure(data=stations + bike_share_paths, layout=layout)\r\n\r\n    ply.sign_in('pnoonan32', open(\"PlotlyAPI.txt\").read().strip())\r\n    url = ply.plot(fig, auto_open=False)\r\n    print(url)\r\n    open(\"Bike-Share-Trip-Path.html\", \"w\").write(\r\n        \"<h1>My cool graph<\/h1>\" + tls.get_embed(url))\r\n\r\nPython File: https:\/\/github.com\/pnoonan32\/Los-Angeles-Bike-Shares-Analytics\/blob\/master\/script.py\r\n\r\nAs for writing the graph to my local html file I will do that right now","I just tried plotting the graph offline and it did not work and received raw text in the html file:\r\nhttps:\/\/github.com\/pnoonan32\/Los-Angeles-Bike-Shares-Analytics\/blob\/master\/temp-plot.html"],"labels":["question"]},{"title":"Gantt Plot: Index by Numeric Variable only works with narrow numeric range","body":"I am using the example from the official docs:\r\n\r\n```\r\nimport plotly.plotly as py\r\nimport plotly.figure_factory as ff\r\n\r\ndf = [dict(Task=\"Job A\", Start='2009-01-01', Finish='2009-02-28', Complete=10),\r\n      dict(Task=\"Job B\", Start='2008-12-05', Finish='2009-04-15', Complete=60),\r\n      dict(Task=\"Job C\", Start='2009-02-20', Finish='2009-05-30', Complete=95)]\r\n\r\nfig = ff.create_gantt(df, colors='Viridis', index_col='Complete', show_colorbar=True)\r\npy.iplot(fig, filename='gantt-numeric-variable', world_readable=True)\r\n```\r\n\r\nIf I change any of the `Complete` values to be a little big higher\r\n`dict(Task=\"Job B\", Start='2008-12-05', Finish='2009-04-15', Complete=300)`\r\n\r\nthe below error is thrown. Is it possible to allow colouring for an arbitrary numerical range? \r\n```\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-5-3526608a9da8> in <module>()\r\n      7 \r\n      8 fig = ff.create_gantt(df, colors='Viridis', index_col='Complete', show_colorbar=True)\r\n----> 9 py.plot(fig, filename='gantt-numeric-variable')\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/plotly\/offline\/offline.py in plot(figure_or_data, show_link, link_text, validate, output_type, include_plotlyjs, filename, auto_open, image, image_filename, image_width, image_height, config)\r\n    474     plot_html, plotdivid, width, height = _plot_html(\r\n    475         figure_or_data, config, validate,\r\n--> 476         '100%', '100%', global_requirejs=False)\r\n    477 \r\n    478     resize_script = ''\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/plotly\/offline\/offline.py in _plot_html(figure_or_data, config, validate, default_width, default_height, global_requirejs)\r\n    152                default_height, global_requirejs):\r\n    153 \r\n--> 154     figure = tools.return_figure_from_figure_or_data(figure_or_data, validate)\r\n    155 \r\n    156     width = figure.get('layout', {}).get('width', default_width)\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/plotly\/tools.py in return_figure_from_figure_or_data(figure_or_data, validate_figure)\r\n   1477 \r\n   1478         try:\r\n-> 1479             figure = Figure(**figure).to_dict()\r\n   1480         except exceptions.PlotlyError as err:\r\n   1481             raise exceptions.PlotlyError(\"Invalid 'figure_or_data' argument. \"\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/plotly\/graph_objs\/_figure.py in __init__(self, data, layout, frames, skip_invalid)\r\n    378             is invalid AND skip_invalid is False\r\n    379         \"\"\"\r\n--> 380         super(Figure, self).__init__(data, layout, frames, skip_invalid)\r\n    381 \r\n    382     def add_area(\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in __init__(self, data, layout_plotly, frames, skip_invalid)\r\n    179         # ### Import Layout ###\r\n    180         self._layout_obj = self._layout_validator.validate_coerce(\r\n--> 181             layout, skip_invalid=skip_invalid)\r\n    182 \r\n    183         # ### Import clone of layout properties ###\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/_plotly_utils\/basevalidators.py in validate_coerce(self, v, skip_invalid)\r\n   1909 \r\n   1910         elif isinstance(v, dict):\r\n-> 1911             v = self.data_class(skip_invalid=skip_invalid, **v)\r\n   1912 \r\n   1913         elif isinstance(v, self.data_class):\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/plotly\/graph_objs\/_layout.py in __init__(self, arg, angularaxis, annotations, autosize, bargap, bargroupgap, barmode, barnorm, boxgap, boxgroupgap, boxmode, calendar, clickmode, colorway, datarevision, direction, dragmode, extendpiecolors, font, geo, grid, height, hiddenlabels, hiddenlabelssrc, hidesources, hoverdistance, hoverlabel, hovermode, images, legend, mapbox, margin, orientation, paper_bgcolor, piecolorway, plot_bgcolor, polar, radialaxis, scene, selectdirection, separators, shapes, showlegend, sliders, spikedistance, template, ternary, title, titlefont, updatemenus, violingap, violingroupgap, violinmode, width, xaxis, yaxis, **kwargs)\r\n   4002         self['separators'] = separators if separators is not None else _v\r\n   4003         _v = arg.pop('shapes', None)\r\n-> 4004         self['shapes'] = shapes if shapes is not None else _v\r\n   4005         _v = arg.pop('showlegend', None)\r\n   4006         self['showlegend'] = showlegend if showlegend is not None else _v\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in __setitem__(self, prop, value)\r\n   3692         if match is None:\r\n   3693             # Set as ordinary property\r\n-> 3694             super(BaseLayoutHierarchyType, self).__setitem__(prop, value)\r\n   3695         else:\r\n   3696             # Set as subplotid property\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in __setitem__(self, prop, value)\r\n   2769             elif isinstance(validator,\r\n   2770                             (CompoundArrayValidator, BaseDataValidator)):\r\n-> 2771                 self._set_array_prop(prop, value)\r\n   2772 \r\n   2773             # ### Handle simple property ###\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in _set_array_prop(self, prop, val)\r\n   3142         validator = self._validators.get(prop)\r\n   3143         # type: Tuple[BasePlotlyType]\r\n-> 3144         val = validator.validate_coerce(val, skip_invalid=self._skip_invalid)\r\n   3145 \r\n   3146         # Save deep copies of current and new states\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/_plotly_utils\/basevalidators.py in validate_coerce(self, v, skip_invalid)\r\n   1978                 elif isinstance(v_el, dict):\r\n   1979                     res.append(self.data_class(skip_invalid=skip_invalid,\r\n-> 1980                                                **v_el))\r\n   1981                 else:\r\n   1982                     if skip_invalid:\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/plotly\/graph_objs\/layout\/_shape.py in __init__(self, arg, fillcolor, layer, line, name, opacity, path, templateitemname, type, visible, x0, x1, xanchor, xref, xsizemode, y0, y1, yanchor, yref, ysizemode, **kwargs)\r\n    882         # ----------------------------------\r\n    883         _v = arg.pop('fillcolor', None)\r\n--> 884         self['fillcolor'] = fillcolor if fillcolor is not None else _v\r\n    885         _v = arg.pop('layer', None)\r\n    886         self['layer'] = layer if layer is not None else _v\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in __setitem__(self, prop, value)\r\n   2773             # ### Handle simple property ###\r\n   2774             else:\r\n-> 2775                 self._set_prop(prop, value)\r\n   2776 \r\n   2777         # Handle non-scalar case\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in _set_prop(self, prop, val)\r\n   3009                 return\r\n   3010             else:\r\n-> 3011                 raise err\r\n   3012 \r\n   3013         # val is None\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/plotly\/basedatatypes.py in _set_prop(self, prop, val)\r\n   3004         validator = self._validators.get(prop)\r\n   3005         try:\r\n-> 3006             val = validator.validate_coerce(val)\r\n   3007         except ValueError as err:\r\n   3008             if self._skip_invalid:\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/_plotly_utils\/basevalidators.py in validate_coerce(self, v, should_raise)\r\n   1111             validated_v = self.vc_scalar(v)\r\n   1112             if validated_v is None and should_raise:\r\n-> 1113                 self.raise_invalid_val(v)\r\n   1114 \r\n   1115             v = validated_v\r\n\r\n~\/.local\/miniconda3\/envs\/work3.6\/lib\/python3.6\/site-packages\/_plotly_utils\/basevalidators.py in raise_invalid_val(self, v)\r\n    242             typ=type_str(v),\r\n    243             v=repr(v),\r\n--> 244             valid_clr_desc=self.description()))\r\n    245 \r\n    246     def raise_invalid_elements(self, invalid_els):\r\n\r\nValueError: \r\n    Invalid value of type 'builtins.str' received for the 'fillcolor' property of layout.shape\r\n        Received value: 'rgb(623.0, 691.0, -57.0)'\r\n\r\n    The 'fillcolor' property is a color and may be specified as:\r\n      - A hex string (e.g. '#ff0000')\r\n      - An rgb\/rgba string (e.g. 'rgb(255,0,0)')\r\n      - An hsl\/hsla string (e.g. 'hsl(0,100%,50%)')\r\n      - An hsv\/hsva string (e.g. 'hsv(0,100%,100%)')\r\n      - A named CSS color:\r\n            aliceblue, antiquewhite, aqua, aquamarine, azure,\r\n            beige, bisque, black, blanchedalmond, blue,\r\n            blueviolet, brown, burlywood, cadetblue,\r\n            chartreuse, chocolate, coral, cornflowerblue,\r\n            cornsilk, crimson, cyan, darkblue, darkcyan,\r\n            darkgoldenrod, darkgray, darkgrey, darkgreen,\r\n            darkkhaki, darkmagenta, darkolivegreen, darkorange,\r\n            darkorchid, darkred, darksalmon, darkseagreen,\r\n            darkslateblue, darkslategray, darkslategrey,\r\n            darkturquoise, darkviolet, deeppink, deepskyblue,\r\n            dimgray, dimgrey, dodgerblue, firebrick,\r\n            floralwhite, forestgreen, fuchsia, gainsboro,\r\n            ghostwhite, gold, goldenrod, gray, grey, green,\r\n            greenyellow, honeydew, hotpink, indianred, indigo,\r\n            ivory, khaki, lavender, lavenderblush, lawngreen,\r\n            lemonchiffon, lightblue, lightcoral, lightcyan,\r\n            lightgoldenrodyellow, lightgray, lightgrey,\r\n            lightgreen, lightpink, lightsalmon, lightseagreen,\r\n            lightskyblue, lightslategray, lightslategrey,\r\n            lightsteelblue, lightyellow, lime, limegreen,\r\n            linen, magenta, maroon, mediumaquamarine,\r\n            mediumblue, mediumorchid, mediumpurple,\r\n            mediumseagreen, mediumslateblue, mediumspringgreen,\r\n            mediumturquoise, mediumvioletred, midnightblue,\r\n            mintcream, mistyrose, moccasin, navajowhite, navy,\r\n            oldlace, olive, olivedrab, orange, orangered,\r\n            orchid, palegoldenrod, palegreen, paleturquoise,\r\n            palevioletred, papayawhip, peachpuff, peru, pink,\r\n            plum, powderblue, purple, red, rosybrown,\r\n            royalblue, saddlebrown, salmon, sandybrown,\r\n            seagreen, seashell, sienna, silver, skyblue,\r\n            slateblue, slategray, slategrey, snow, springgreen,\r\n            steelblue, tan, teal, thistle, tomato, turquoise,\r\n            violet, wheat, white, whitesmoke, yellow,\r\n            yellowgreen\r\n```\r\n\r\n","comments":["Thanks for the suggestion @slazicoicr,\r\n\r\nYeah, it seems that the coloring range is hard coded to 0-100\r\n\r\nhttps:\/\/github.com\/plotly\/plotly.py\/blob\/defab4c7c668b7bd0c7b60d055733a8ccd959b36\/plotly\/figure_factory\/_gantt.py#L275-L288\r\n\r\nI think a reasonable enhancement would be to allow custom `index_cmin` `index_cmax` values to be passed in as arguments. And we should probably also raise an error if these index extents are exceeded.\r\n","In addition to the explicit values through arguments, would it not be possible to determine `index_cmin` and `index_cmax` from the data provided. I tested it on my dataset and it works. \r\n\r\n**Note that I am not sure how this would work with negative values**\r\n\r\nI added the following lines above the loop https:\/\/github.com\/plotly\/plotly.py\/blob\/defab4c7c668b7bd0c7b60d055733a8ccd959b36\/plotly\/figure_factory\/_gantt.py#L222\r\n\r\n```\r\nc_min = min([c[index_col] for c in chart])                              \r\nc_max = max([c[index_col] for c in chart])\r\n```\r\n\r\nChange this to keep all values between 0 and 1 https:\/\/github.com\/plotly\/plotly.py\/blob\/defab4c7c668b7bd0c7b60d055733a8ccd959b36\/plotly\/figure_factory\/_gantt.py#L252\r\n\r\n```\r\nintermed = (chart[index][index_col]) \/ c_max\r\n```\r\n\r\nFinally remove the hardcoded values https:\/\/github.com\/plotly\/plotly.py\/blob\/defab4c7c668b7bd0c7b60d055733a8ccd959b36\/plotly\/figure_factory\/_gantt.py#L282-L286\r\n\r\n```\r\nmarker={'color': 'white',\r\n     'colorscale': [[0, colors[0]], [1, colors[1]]],\r\n     'showscale': True,\r\n    'cmax': c_max,\r\n     'cmin': c_min}\r\n````\r\n\r\n\r\n","Hi @slazicoicr ,\r\n\r\nFor backward compatibility I think we would need to leave the default range of [0, 100]. Maybe we could add a new `complete_range` parameter that could be set to either:\r\n 1. A tuple of min\/max range values or\r\n 2. The string 'auto' to compute the range from the data.\r\n\r\nThe default value would be `(0, 100)` to match the current behavior.\r\nIf you're interested, feel free to open a PR with what you already have and we can talk through how to add the additional options\/defaults.","Hi,\r\n\r\nI believe I'm facing a similar issue. Any idea on when this enhancement will come through?\r\n\r\nSee reproducible example below:\r\n\r\n2019-07-17T11:00:58+00:00\r\n\r\nCPython 3.6.8\r\nIPython 7.6.0\r\n\r\ncompiler   : GCC 7.3.0\r\nsystem     : Linux\r\nrelease    : 3.10.0-957.21.3.el7.x86_64\r\nmachine    : x86_64\r\nprocessor  : x86_64\r\ninterpreter: 64bit\r\n\r\n```\r\nimport plotly.figure_factory as ff\r\nfrom io import StringIO\r\nimport pandas as pd\r\nTESTDATA = StringIO(\"\"\"\r\nTask,Start,Finish,diff_days\r\nA,2009-05-19,2009-08-29,102\r\nA,2009-12-15,2010-03-27,102\r\nA,2010-11-03,2012-03-16,499\r\nB,2010-11-03,2015-05-20,1659\r\nC,2012-06-26,2012-08-01,36\r\nA,2012-06-26,2013-09-08,439\r\nC,2013-02-21,2013-03-29,36\r\nD,2013-06-26,2015-04-19,662\r\nC,2014-07-24,2014-08-29,36\r\n\"\"\")\r\ndf = pd.read_csv(TESTDATA)\r\nfig = ff.create_gantt(\r\n    df,\r\n    index_col=\"diff_days\",\r\n    bar_width=0.2,\r\n    showgrid_x=True,\r\n    showgrid_y=True,\r\n) \r\nfig.show()\r\n```","I have submitted a pull request to address this issue.  https:\/\/github.com\/plotly\/plotly.py\/pull\/2605\r\n\r\n@jonmmease please let me know if this was what you had in mind.  I recognize that the figure_factory module in general is likely going to get deprecated at some point but until this was fixed I was unable to upgrade from version 2.7.0.  \r\n\r\nApologies for the re-submission.  Hopefully this one is properly formatted and includes necessary tests. ","As of the recent version 4.9 release we recommend using `px.timeline()` as a replacement for `ff.create_gantt()`, and it allows better control over ordering: https:\/\/plotly.com\/python\/gantt\/"],"labels":["enhancement"]},{"title":"Raise warning in plotly.offline.plot when output_type='file' and include_plotlyjs=False","body":"When calling plotly.offline.plot(), if we use output_type='file' and include_plotlyjs=False, the resulting html file is useless, as it cannot be rendered.\r\n\r\nI'm using plotly 3.3.0.\r\n\r\n```python\r\nimport plotly\r\nimport plotly.graph_objs as go\r\n\r\n#This generates a file that includes plotly.js, and works as intended\r\nplotly.offline.plot([go.Scatter(x=[1, 2, 3], y=[3, 2, 6])], \r\n                    filename='my-graph.html', output_type='file',\r\n                   include_plotlyjs=True)\r\n\r\n#This generates a file that doesn't include plotly.js, but fails to render\r\nplotly.offline.plot([go.Scatter(x=[1, 2, 3], y=[3, 2, 6])], \r\n                    filename='my-graph-nojs.html', output_type='file', \r\n                    include_plotlyjs=False)\r\n```\r\n\r\nAccording to the documentation:\r\n```\r\n    include_plotlyjs (default=True) -- If True, include the plotly.js\r\n        source code in the output file or string.\r\n        Set as False if your HTML file already contains a copy of the plotly.js\r\n        library.\r\n```\r\n\r\nI guess we are not supposed to use include_plotly_js=False and output_type='file' at the same time? If that is the case, the function should probably raise an error, rather than generating a useless file. However, I think the ideal solution would be to have the standalone html load plotly.js from an online CDN, like we do in Jupyter notebooks after calling `init_notebook_mode(connected=False)`. So we would insert something like the following block in the html file:\r\n\r\n```\r\n<script src=\"https:\/\/cdn.plot.ly\/plotly-latest.min.js\"><\/script>\r\n```","comments":["Hi @capelastegui , thanks for the suggestion.\r\n\r\nPerhaps `include_plotlyjs` should be allowed to be set to `True`, `False`, or `'cdn'`.","Hi @capelastegui, \r\n\r\nThis issue was part of the motivation for the #1234 PR.  Here is the updated docstring for `include_plotlyjs`\r\n\r\n```\r\n    include_plotlyjs (True | False | 'cdn' | 'directory' | path - default=True)\r\n        Specifies how the plotly.js library is included in the output html\r\n        file or div string.\r\n\r\n        If True, a script tag containing the plotly.js source code (~3MB)\r\n        is included in the output.  HTML files generated with this option are\r\n        fully self-contained and can be used offline.\r\n\r\n        If 'cdn', a script tag that references the plotly.js CDN is included\r\n        in the output. HTML files generated with this option are about 3MB\r\n        smaller than those generated with include_plotlyjs=True, but they\r\n        require an active internet connection in order to load the plotly.js\r\n        library.\r\n\r\n        If 'directory', a script tag is included that references an external\r\n        plotly.min.js bundle that is assumed to reside in the same\r\n        directory as the HTML file.  If output_type='file' then the\r\n        plotly.min.js bundle is copied into the directory of the resulting\r\n        HTML file. If a file named plotly.min.js already exists in the output\r\n        directory then this file is left unmodified and no copy is performed.\r\n        HTML files generated with this option can be used offline, but they\r\n        require a copy of the plotly.min.js bundle in the same directory.\r\n        This option is useful when many figures will be saved as HTML files in\r\n        the same directory because the plotly.js source code will be included\r\n        only once per output directory, rather than once per output file.\r\n\r\n        If a string that ends in '.js', a script tag is included that\r\n        references the specified path. This approach can be used to point\r\n        the resulting HTML file to an alternative CDN.\r\n\r\n        If False, no script tag referencing plotly.js is included. This is\r\n        useful when output_type='div' and the resulting div string will be\r\n        placed inside an HTML document that already loads plotly.js.  This\r\n        option is not advised when output_type='file' as it will result in\r\n        a non-functional html file.\r\n```\r\n\r\nI don't want to make the `output_type='div'` and `include_plotlyjs=False` combination an outright error because I don't want to break any existing workflows folks may have built around the current behavior.  What do you think?","Thanks, this looks great to me. I agree that throwing a new error risks breaking stuff - perhaps a warning could be useful instead? But the new explanation in the docs may be enough.","Thanks for the feedback @capelastegui. A warning is a reasonable suggestion. I'm going to consider the `enhancement` part of this request done (will be released in 3.4.0), and leave the issue open with the `documentation` tag  as a reminder to circle back around to the warning idea eventually."],"labels":["documentation"]},{"title":"Add choropleth maps for metropolitan and non-metropolitan areas (MSA's)","body":"Any chance we can add an ability to create choropleth maps of United States Metro and non-Metro Areas. I feel that this could be done since there is already a county map and metro are simply supersets of counties. Here is the definition of metro areas provided by the BLS. [https:\/\/www.bls.gov\/oes\/current\/area_definitions_m2017.xlsx](https:\/\/www.bls.gov\/oes\/current\/area_definitions_m2017.xlsx)\r\n The Excel sheet download can be used to map counties to metro and non-metro areas.\r\n\r\nHere is an example of this used in practice\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/6313008\/46544958-dd0cc600-c879-11e8-9046-0f4e40091590.png)\r\n\r\n[source](https:\/\/www.bls.gov\/oes\/current\/oes111031.htm)","comments":["Found this shape file that could be used: http:\/\/brenocon.com\/geocode\/cbsa.tiger2013.json.gz\r\n\r\n[Source](http:\/\/brenocon.com\/geocode\/)\r\n\r\nWill follow up later with my initial findings.","@jonmmease, follow up: I inspected the shape file and good news! The `GEOID` is a perfect match to the `AREA` column in the definitions file above. The CBSA file is (almost) a superset of the area definitions w\/over double the amount of areas. That said, there are some areas, 50 to be exact that are in the definitions, that aren't covered in the CBSA. I did a set difference and provided them below. These all seem to be metro divisions though which leads me to believe that their constituent metro areas will already be included. \r\n\r\nAs for coding this figure factory, I'm happy to give it a shot. I haven't used geopandas before, but it's coming pretty natural as I'm commonly using pandas. I also have `_county_choropleth.py` to work off of. Going to create a similar version called `plotly\/figure_factory\/_core_based_statistical_areas.py`. Will keep you posted. \r\n\r\n```\r\n{'Anaheim-Santa Ana-Irvine, CA Metropolitan Division',\r\n 'Boston-Cambridge-Newton, MA NECTA Division',\r\n 'Brockton-Bridgewater-Easton, MA NECTA Division',\r\n 'Camden, NJ Metropolitan Division',\r\n 'Chicago-Naperville-Arlington Heights, IL Metropolitan Division',\r\n 'Dallas-Plano-Irving, TX Metropolitan Division',\r\n 'Danbury, CT',\r\n 'Detroit-Dearborn-Livonia, MI Metropolitan Division',\r\n 'Dover-Durham, NH-ME',\r\n 'Dutchess County-Putnam County, NY Metropolitan Division',\r\n 'Elgin, IL Metropolitan Division',\r\n 'Fort Lauderdale-Pompano Beach-Deerfield Beach, FL Metropolitan Division',\r\n 'Fort Worth-Arlington, TX Metropolitan Division',\r\n 'Framingham, MA NECTA Division',\r\n 'Gary, IN Metropolitan Division',\r\n 'Haverhill-Newburyport-Amesbury Town, MA-NH NECTA Division',\r\n 'Lake County-Kenosha County, IL-WI Metropolitan Division',\r\n 'Lawrence-Methuen Town-Salem, MA-NH NECTA Division',\r\n 'Leominster-Gardner, MA',\r\n 'Los Angeles-Long Beach-Glendale, CA Metropolitan Division',\r\n 'Lowell-Billerica-Chelmsford, MA-NH NECTA Division',\r\n 'Lynn-Saugus-Marblehead, MA NECTA Division',\r\n 'Manchester, NH',\r\n 'Mayaguez, PR',\r\n 'Miami-Miami Beach-Kendall, FL Metropolitan Division',\r\n 'Montgomery County-Bucks County-Chester County, PA Metropolitan Division',\r\n 'Nashua, NH-MA NECTA Division',\r\n 'Nassau County-Suffolk County, NY Metropolitan Division',\r\n 'New Bedford, MA',\r\n 'New Haven, CT',\r\n 'New York-Jersey City-White Plains, NY-NJ Metropolitan Division',\r\n 'Newark, NJ-PA Metropolitan Division',\r\n 'Norwich-New London-Westerly, CT-RI',\r\n 'Oakland-Hayward-Berkeley, CA Metropolitan Division',\r\n 'Peabody-Salem-Beverly, MA NECTA Division',\r\n 'Philadelphia, PA Metropolitan Division',\r\n 'Portsmouth, NH-ME',\r\n 'San Francisco-Redwood City-South San Francisco, CA Metropolitan Division',\r\n 'San German, PR',\r\n 'San Rafael, CA Metropolitan Division',\r\n 'Seattle-Bellevue-Everett, WA Metropolitan Division',\r\n 'Silver Spring-Frederick-Rockville, MD Metropolitan Division',\r\n 'Springfield, MA-CT',\r\n 'Tacoma-Lakewood, WA Metropolitan Division',\r\n 'Taunton-Middleborough-Norton, MA NECTA Division',\r\n 'Warren-Troy-Farmington Hills, MI Metropolitan Division',\r\n 'Washington-Arlington-Alexandria, DC-VA-MD-WV Metropolitan Division',\r\n 'Waterbury, CT',\r\n 'West Palm Beach-Boca Raton-Delray Beach, FL Metropolitan Division',\r\n 'Wilmington, DE-MD-NJ Metropolitan Division'}\r\n```"],"labels":["enhancement"]},{"title":"math module has no attribute 'isclose'","body":"I got the following error:\r\n>   File \"\/Users\/javier\/Library\/Python\/2.7\/lib\/python\/site-packages\/plotly\/matplotlylib\/mpltools.py\", line 68, in convert_dash\r\n    if (math.isclose(float(dash_array[1]), 0.)):\r\nAttributeError: 'module' object has no attribute 'isclose'\r\n\r\nIt turns out that math.isclose was introduced in version 3.4.6, so it seems there should be a version check here. Perhaps it is easier to use numpy.isclose (this is matplotlib, after all).","comments":["Hi @javierggt , thanks for the report. Could you add a quick example that reproduces this error with Python 2.7?  Thanks!","Sure. Here it is:\r\n\r\n```python\r\ndef main():\r\n    import numpy as np\r\n    from matplotlib import pyplot as plt\r\n    figure = plt.figure('my_figure', clear=True)\r\n    x = np.array([245.47089156850285, 426.57951880159254,\r\n                  741.3102413009177, 977.2372209558101])\r\n    y = np.array([0.022331681268342514, 0.005960481954187414,\r\n                  0.0014765077815567915, 0.0005871572999836056])\r\n    plt.plot(x, y, \":k\")\r\n    return figure\r\n\r\n\r\nimport plotly.tools as tls\r\nfig = tls.mpl_to_plotly(main())\r\n\r\n```","the key is the line format, if I do `plt.plot(x, y, \"-k\")`, it works."],"labels":["matplotlylib"]},{"title":"create_gantt figure should be responsive","body":"The `figure_factory` `create_gantt` method outputs a figure with static dimensions. As most other Plotly charts are responsive, so should be the GANTT. Please allow the GANTT chart to be responsive to page\/device dimensions, rather than expecting hard-coded width and height dimensions.","comments":[],"labels":["enhancement"]},{"title":"create_gantt missing parameter documentation","body":"The `figure_factory` `create_gantt` method takes several arguments. Most of the arguments are documented, but a couple of them have no documentation:\r\n\r\nhttps:\/\/github.com\/plotly\/plotly.py\/blob\/2e5bf6e2f7c213295c405ece3e859f4d3f8030d1\/plotly\/figure_factory\/_gantt.py#L584-L616\r\n\r\nPlease add missing documentation to this factory method.","comments":["Thanks for taking the time to report this @brylie, looks like the undocumented arguments are `tasks`, `task_names`, `data`, and `group_tasks`.","And also `Description`, which was added here https:\/\/github.com\/plotly\/plotly.py\/pull\/588","Is there a way to define the sort order on the Y-Axis of grouped tasks?"],"labels":["documentation"]},{"title":"Long install time from windows.","body":"When `pip install plotly` from a windows machine, it takes anywhere from a minute to 5 minutes. From linux it took  no more than 10 seconds.","comments":["Thanks for the report. I've only tried the windows install on a VM so I wasn't sure what the real difference was. I'm wondering if it's related to compiling the `*.pyc` files, similar to the conda slowness reported in https:\/\/github.com\/plotly\/plotly.py\/issues\/1175.  Though I don't know why this would be so much slower on windows.\r\n\r\nIn that issue @fcollonval reported that the conda install from our `plotly` anaconda channel (which includes precompiled *.pyc files) took less than 20 seconds.\r\n\r\n","taking me forever to install on windows 10 with pip install dash, seems like plotly is taking up most of the time?","Same in my case. Windows 10 and plotly taking forever to install.","I've been trying to install for about 30 mins. It still hasn't finished. Should I cancel ?\r\nI am on Windows 10 Python 3.8.\r\n![image](https:\/\/user-images.githubusercontent.com\/44343120\/95179115-d5bc8200-07dd-11eb-94ba-2bc0c0591321.png)\r\n","That does seem like a long time... did it eventually succeed?","No I had to cancel it after 1 and 1\/2 hours.","I also experienced this on Windows 10, Python 3.6.10, and after ~5 minutes I canceled it.  However, I didn't get any error messages & plotly at least appears to be working fine; perhaps it's getting hung somewhere?","Same thing here. Using poetry on my mac, running `poetry add plotly` on an _empty_ environment took about 30 seconds. Executing the same command on my windows 10 pro machine took about 5 minutes...","It was probably an issue with my python installation. I reinstalled and now it takes about 5 mins. ","Same here, windows 10 and python 3.7.9. Waiting for plotly to install since more than 5 minutes.","I am also having this issue. Is there a solve for this?","Same issue on Windows 11","Same issue, stuck on Windows 11","plotly install\/update is pretty slow on WSL too. Slower than all the other packages I use. Is there a good justification for it?","Installation was getting stuck on Windows 11 for me as well, I aborted the installation and tried the following:\r\n\r\n``` pip install plotly -vvv ```\r\n\r\ninstalled pretty much within 30 seconds.","`pip install plotly` took ages, but \r\n`pip install plotly==5.14.1` is fine"],"labels":["performance"]},{"title":"Secret Links Upload Time (Python Online)","body":"It seems that secret links take significantly longer to upload than public or private. On average, my plots (regardless of complexity) will take 8 seconds to upload. Secret dashboards take even longer to upload, on average about 130 seconds for a dashboard with 8 plots. ","comments":["Thanks for the report @tim-sauchuk ,\r\n\r\n@cldougl @Kully do you have any experience or thoughts on this?","> @Kully do you have any experience or thoughts on this?\r\n\r\nI built the dashboards API and remember setting up the code logic turning plots into secret files. I'll look into this today and do some testing.","the `add_share_key_to_url()` function from `plotly.py` is nearly 100% to blame for the slow uploads when `sharing=secret`. There are a few components in the function slowing it down:\r\n\r\n- ~0.8 sec v2 UPDATE (ensuring that share key is enabled)\r\n- a 4 second buffer after hitting a v1 POST is occurring. At least one reason for it is because if you immediately hit v2 after creating the chart with v1, we intermittently get a failure and a defaulting to a private chart instead (see https:\/\/github.com\/plotly\/streambed\/issues\/9352#issue-219974547)\r\n- about 1.1 sec for a RETRIEVE to v2 (checking if share key enabled)\r\n\r\nThat all roughly adds up to about 6 seconds give or take\r\n\r\nThis is the code snippet I am running to test this:\r\n```python\r\nsharing = 'secret'\r\n\r\nimport plotly.plotly as py\r\nimport plotly.graph_objs as go\r\nimport time\r\n\r\ntrace1 = go.Scatter(\r\n    x=list(range(1)),\r\n    y=list(range(1)),\r\n)\r\n\r\ndata = [trace1]\r\na = time.time()\r\npy.iplot(data, filename='reg-scatter-{0}'.format(time.time()), sharing=sharing, auto_open=False)\r\nb = time.time()\r\nprint('\\n total upload time: {0}'.format(b-a))\r\n```\r\n\r\nI did not have to reattempt to enable the sharekey in all my code runnings so far: See [that part of the code here](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/plotly\/plotly\/plotly.py#L1329-L1335)\r\n\r\nrelated issue: https:\/\/github.com\/plotly\/streambed\/issues\/4089\r\n\r\n---\r\n\r\nUpdate:\r\n\r\nReducing the time wait to 0, we still get a lot of extra time. Here's the output of running the code above with print statements to help figure out what is happening:\r\n\r\n```\r\nv1 POST: 1.9992787838 \r\n\r\n'share_key=' not in url \r\n\r\nadd_share_key_to_url components:\r\n....update the body: 0.994600057602\r\n....(attempt 0)\r\n....sleep\r\n....woke up\r\n....time slept: 0.0\r\n\r\n....time to retrieve: 0.930931091309\r\n....time spent if share key is not enabled (retrying): 0.000255107879639\r\n-------------------- \r\n add_share_key_to_url TOTAL: 1.92818498611\r\n\r\n total upload time: 7.46026802063\r\n```"],"labels":["performance","plot.ly","legacy-versions"]},{"title":"on-prem accounts cannot upload with grid_ops, etc, from plotly.py","body":"PlotlyRequestError - bad API for grid_ops, dashboard_ops, presentation_ops in plotly.py\r\n\r\nUsing buildly(on-prem)\r\n\r\n```python\r\nimport plotly \r\nplotly.tools.set_config_file(plotly_domain='https:\/\/buildly.plotly.systems\/',\r\n                                             plotly_ssl_verification=False)\r\nplotly.tools.set_credentials_file(username=xxxxxxx, api_key=xxxxxxxxxx)\r\n```\r\n\r\n`.upload` functions for dashboard_ops, presentation_ops, grid_ops, are not working. For grid_ops, the following error gets returned\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nPlotlyRequestError                        Traceback (most recent call last)\r\n<ipython-input-9-f4e8f29b5161> in <module>()\r\n      4 column_2 = Column([4, 2, 5], 'voltage')\r\n      5 grid = Grid([column_1, column_2])\r\n----> 6 py.grid_ops.upload(grid, 'time vs voltage')\r\n\r\n\/Users\/adamkulidjian\/Desktop\/Adam\/plotly\/plotly.py\/plotly\/plotly\/plotly.pyc in upload(cls, grid, filename, world_readable, auto_open, meta)\r\n   1009             payload['parent_path'] = parent_path\r\n   1010 \r\n-> 1011         response = v2.grids.create(payload)\r\n   1012 \r\n   1013         parsed_content = response.json()\r\n\r\n\/Users\/adamkulidjian\/Desktop\/Adam\/plotly\/plotly.py\/plotly\/api\/v2\/grids.pyc in create(body)\r\n     16     \"\"\"\r\n     17     url = build_url(RESOURCE)\r\n---> 18     return request('post', url, json=body)\r\n     19 \r\n     20 \r\n\r\n\/Library\/Frameworks\/Python.framework\/Versions\/2.7\/lib\/python2.7\/site-packages\/retrying.pyc in wrapped_f(*args, **kw)\r\n     47             @six.wraps(f)\r\n     48             def wrapped_f(*args, **kw):\r\n---> 49                 return Retrying(*dargs, **dkw).call(f, *args, **kw)\r\n     50 \r\n     51             return wrapped_f\r\n\r\n\/Library\/Frameworks\/Python.framework\/Versions\/2.7\/lib\/python2.7\/site-packages\/retrying.pyc in call(self, fn, *args, **kwargs)\r\n    204 \r\n    205             if not self.should_reject(attempt):\r\n--> 206                 return attempt.get(self._wrap_exception)\r\n    207 \r\n    208             delay_since_first_attempt_ms = int(round(time.time() * 1000)) - start_time\r\n\r\n\/Library\/Frameworks\/Python.framework\/Versions\/2.7\/lib\/python2.7\/site-packages\/retrying.pyc in get(self, wrap_exception)\r\n    245                 raise RetryError(self)\r\n    246             else:\r\n--> 247                 six.reraise(self.value[0], self.value[1], self.value[2])\r\n    248         else:\r\n    249             return self.value\r\n\r\n\/Library\/Frameworks\/Python.framework\/Versions\/2.7\/lib\/python2.7\/site-packages\/retrying.pyc in call(self, fn, *args, **kwargs)\r\n    198         while True:\r\n    199             try:\r\n--> 200                 attempt = Attempt(fn(*args, **kwargs), attempt_number, False)\r\n    201             except:\r\n    202                 tb = sys.exc_info()\r\n\r\n\/Users\/adamkulidjian\/Desktop\/Adam\/plotly\/plotly.py\/plotly\/api\/v2\/utils.pyc in request(method, url, **kwargs)\r\n    166         content = response.content if response else 'No content'\r\n    167         raise exceptions.PlotlyRequestError(message, status_code, content)\r\n--> 168     validate_response(response)\r\n    169     return response\r\n\r\n\/Users\/adamkulidjian\/Desktop\/Adam\/plotly\/plotly.py\/plotly\/api\/v2\/utils.pyc in validate_response(response)\r\n     78         message = content if content else 'No Content'\r\n     79 \r\n---> 80     raise exceptions.PlotlyRequestError(message, status_code, content)\r\n     81 \r\n     82 \r\n\r\nPlotlyRequestError: Bad API key\r\n```","comments":["With further investigation, this looks like a v2 endpoint issue with on-prem domain names, eg. 'https:\/\/buildly.plotly.systems'\r\n\r\n`py.sign_in()` returns an error message, even though having those credentials filled out in the credentials file doesn't create any errors for producing a plain scatter:\r\n\r\neg.\r\n```\r\nimport plotly.plotly as py\r\npy.iplot([{'x': range(10), 'y': range(10)}])\r\n```\r\nworks fine","> py.sign_in() returns an error message\r\n\r\n@Kully can you provide more information like what the error message is? \r\nFurthermore, can you test if this is an issue with version 3+ or did this work in plotly.py 2.7? ","this issue will also affect `py.icreate_animations` https:\/\/plot.ly\/python\/animations\/#online-mode","> @Kully can you provide more information like what the error message is?\r\n\r\n`PlotlyRequestError: Bad API key`\r\n\r\nEven making a get request under the same domain returns the same error:\r\n\r\n```\r\nfrom __future__ import absolute_import\r\n\r\nfrom plotly.api.v2.utils import build_url, request\r\n\r\nRESOURCE = 'users'\r\nurl = build_url(RESOURCE, route='current')\r\nrequest('get', url)\r\n```","> Furthermore, can you test if this is an issue with version 3+ or did this work in plotly.py 2.7?\r\n\r\nI've checked versions 2.7 and 3.5 - it is an issue in both of them","I've been digging deeper into this bug and this is what I have so far.\r\n\r\n---\r\n\r\nTo really figure out what's going on, I am testing a regular pro account against an on-prem account. I am making a bare bones `get` request to USERS endpoint of v2 since that is where the problem lies (iplot and plot work fine for on-prem users AFAIK)\r\n\r\n```python\r\nv2.utils.request('get', 'https:\/\/api.plot.ly\/v2\/users\/current')\r\n```\r\n\r\nThe issue seems to be hovering around the authorization key that is passed in headers of the request body, with the form `Basic {username_encoded}{api_encoded}`\r\n\r\n### pro account\r\nFor the pro account, the `authorization` value doesn't make a difference. We get a **200**\r\n\r\n### on-prem account\r\n2. For the on-prem account, a correct `authorization` value (what gets passed normally) returns a **401**: `PlotlyRequestError: Bad API key`\r\n\r\nSay the normally computed authorization key is `'Basic lQTA3d1Uwb2g5dVNoODNvNnFRdQ='`\r\n\r\nthen...\r\n\r\nAUTHORIZATION KEY IN REQUEST | STATUS CODE\r\n|:-----------------------------:|:-----------:|\r\n`'Basic lQTA3d1Uwb2g5dVNoODNvNnFRdQ='` |  401\r\n`'B lQTA3d1Uwb2g5dVNoODNvNnFRdQ='` | 200\r\n`'lQTA3d1Uwb2g5dVNoODNvNnFRdQ='` | 200\r\n`''` | 200\r\n\r\n---\r\n\r\nNB\r\nI am testing with `https:\/\/buildly.plotly.systems`\r\n`requests` version - 2.10.0 "],"labels":["bug","plot.ly","legacy-versions"]},{"title":"Support non-cartesian hover events","body":"Currently the trace.on_hover method doesn't work for non-cartesian trace types like `parcoords` and `sankey`.  The reason these don't just work is because the structure of the callback data from Plotly.js doesn't match that from the cartesian trace types.\r\n\r\nFor parallel coordinates the Python callback signature for hover\/unhover could match that of the cartesian plots.  For `sankey` the hover data should probably be a new structure since the hover data is at the link or node level rather than points level.\r\n\r\nWhile we're at it. We should specialize the docstrings for certain traces and raise an exception when someone tries to install an event callback on a trace that doesn't support it.","comments":[],"labels":["enhancement"]},{"title":"Request efficient encoding for plotly offline","body":"I know @jonmmease is [planning to do this](https:\/\/github.com\/plotly\/plotly.js\/pull\/2911) anyway, so this issue isn't really necessary. However, [I said that I would create it](https:\/\/community.plot.ly\/t\/offline-plot-to-div-encode-numpy-data-as-binary-blob\/12965\/2) and I'd like to humbly ask to please keep multi-dimensional arrays in the back of your mind as you work on this. Heatmaps and contour plots are my biggest offenders.","comments":["Thanks for creating the issue @cboulay ,\r\n\r\nIn the meantime, let's do an experiment. I'd like to see how much the base64 encoding would help in your situation.\r\n\r\nTake one of the large multi-dimensional numpy arrays that you're dealing with, lets call it `a`. First convert it to JSON as a list and measure the time and size (in ipython or jupyter):\r\n\r\n```python\r\nimport json\r\nfrom plotly.utils import PlotlyJSONEncoder\r\nencode_timing1 = %timeit -o json.dumps(a, cls=PlotlyJSONEncoder)\r\nres1 = json.dumps(a, cls=PlotlyJSONEncoder)\r\ndecode_timing1 = %timeit -o json.loads(res1)\r\n```\r\n\r\nThen convert to a base64 encoded string:\r\n\r\n```python\r\nimport base64\r\nencode_timing2 = %timeit -o base64.b64encode(memoryview(a)).decode()\r\nres2 = base64.b64encode(memoryview(a)).decode()\r\ndecode_timing2 = %timeit -o np.frombuffer(base64.b64decode(res2.encode('utf-8')), dtype=a.dtype)\r\nlen(res2)\r\n```\r\n\r\nThen compare\r\n```python\r\nprint('Size list: %d chars' % len(res1))\r\nprint('Size base64: %d chars' % len(res2))\r\nprint('Size ratio: %.4f' % (len(res2)\/len(res1)))\r\n\r\nprint('Encode time list: %.6f seconds' % encode_timing1.average)\r\nprint('Encode time base64: %.6f seconds' % encode_timing2.average)\r\nprint('Encode time ratio: %.6f' % (encode_timing2.average \/ encode_timing1.average))\r\n\r\nprint('Decode time list: %.6f seconds' % decode_timing1.average)\r\nprint('Decode time base64: %.6f seconds' % decode_timing2.average)\r\nprint('Decode time ratio: %.6f' % (decode_timing2.average \/ decode_timing1.average))\r\n```\r\n"],"labels":["enhancement"]},{"title":"Matplotlib to plotly bar chart label loss","body":"Hi all,\r\n\r\nI posted the following problem on:  https:\/\/community.plot.ly\/t\/matplotlib-to-plotly-bar-chart-label-loss\/13383\/1 and i was advised to repost it here. I was having issues using the matplotlib to plotly conversion where categorical axis labels do not seem to be copied over. \r\n\r\nThanks,\r\n\r\nHarry Turner","comments":["Thanks for the report @henrykeithturner ","I am interested in this feature to get implemented. Plotly does not use matplotlib stylings and layout while converting.  To make it proper, i have to specifically use plotly.graph_objs.Layout and its attributes., which is a double work for the same graph and even difficult for complex plots.\r\nI request Plotly team to implement the full conversion feature as early as possible."],"labels":["matplotlylib"]},{"title":"Method to access traces by name","body":"I have been working a lot with Widgets and FigureWidgets lately and I think it would be useful to be able to access some trace in a figure by its name. For example, several times I've come across the situation where I have to set a Widget to change something in each of the traces separately and the handlers typically look like this:\r\n```python\r\ndef do_something(change):\r\n    with fig.batch_animate():\r\n        for trace in fig.data:\r\n            if trace.name == 'some_name':\r\n                change_something()\r\n```\r\nor as a workaround I sometimes use a lookup dictionary in the format `{name: index_in_data_list}`.\r\n```python\r\ndef do_something(change):\r\n    with fig.batch_animate():\r\n        fig.data[lookup['some_name']].some_attr = something\r\n```\r\nnothing too important, I just think it would be a nice feature to be able to do\r\n```python\r\ndef do_something(change):\r\n    with fig.batch_animate():\r\n        fig.get_trace(name='some_name').some_attr = something\r\n```\r\nwithout having to handle the lookup manually (maybe there's already something like this that I don't know about).","comments":["Hi @vlizanae , this is an interesting idea. Here are a couple of details that would need to be worked out.\r\n - Is a linear search acceptable (performance wise), or would we need to maintain a map from trace names to trace objects\/indexes? Keeping this map up to date would require a bit of effort in a few places in the code base.\r\n - What happens if two traces have the same name?\r\n - What happens if no trace by that name is present?","Those are good points. In my opinion:\r\n\r\n- A linear search is fine, as the number of traces shouldn't be that large in most of the cases.\r\n- I never thought about two traces having the same name before, probably the most consistent way is if the method returns a list with all the corresponding traces, that would also solve the problem where the name is not present."],"labels":["enhancement"]},{"title":"ScatterGeo updatemenus button not updating plot","body":"Pandas version: 0.20.3\r\nPlotly version: 3.1.1\r\nmacOS: 10.13.4\r\nPython: 3.6.3\r\n\r\nI am using Plotly offline plotting and came across an issue when trying to include a button in a `go.Scattergeo` plot. When I press the button I want some data points to disappear (`visible = False`) and other data points, that were previously invisible, to become visible. However when I press the button, all data points become invisible. Interacting with the plot makes the data points appear (moving a slider that appears when button is pressed, or clicking on a trace) however when the button is first pressed no data points are visible.\r\n\r\nI recreated the issue below with some sample data. The initial `go.Scattergeo` is the data plotted by state and another `go.Scattergeo` is the data plotted by year. There are 2 buttons for switching between the 2 plots.\r\n\r\nI have my some sample data loaded like this:\r\n``` python\r\ndata = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2014_us_cities.csv')\r\ndata = data.iloc[:400] # Keep only first 400 samples\r\ndata.loc[:100, 'year'] = '1990'\r\ndata.loc[100:200, 'year'] = '1991'\r\ndata.loc[200:300, 'year'] = '1992'\r\ndata.loc[300:, 'year'] = '1993'\r\n```\r\n\r\nand setup my scatterGeo plots like so:\r\n```python\r\ncities = []\r\nfor state in data['name'].value_counts().index:\r\n    data_sub = data.loc[data['name'] == state]\r\n    city = dict(\r\n        type = 'scattergeo',\r\n        visible = True,\r\n        locationmode = 'USA-states',\r\n        lon = data_sub['lon'],\r\n        lat = data_sub['lat'],\r\n        mode = 'markers',\r\n        marker = dict(\r\n            size = 8,\r\n            color = \"rgb(255, 102, 102)\",\r\n            opacity = 0.4,\r\n            line = dict(\r\n                width=0.5,\r\n                color='rgb(255, 102, 102)'\r\n            )\r\n        ),\r\n        name = state\r\n    )\r\n    cities.append(city)\r\n\r\ncities_year = []\r\nfor year in sorted(data.year.value_counts().index):\r\n    data_sub = data.loc[data['year'] == year]\r\n    city = dict(\r\n        type = 'scattergeo',\r\n        visible = False,\r\n        locationmode = 'USA-states',\r\n        lon = data_sub['lon'],\r\n        lat = data_sub['lat'],\r\n        mode = 'markers',\r\n        marker = dict(\r\n            size = 8,\r\n            color = \"rgb(255, 102, 102)\",\r\n            opacity = 0.4,\r\n            line = dict(\r\n                width=0.5,\r\n                color='rgb(255, 102, 102)'\r\n            )\r\n        ),\r\n        name = str(year)\r\n    )\r\n    cities_year.append(city)\r\n```\r\n\r\nI have 2 buttons that switch between which `go.Scattergeo` plot is visible: `states` and `years` (states is default). And I have a slider that appears when the `years` plot is visible.\r\n\r\n``` python\r\nfrom plotly.offline import plot\r\n\r\nslider = [dict(active = 0,\r\n               pad = dict(t = 1),\r\n               steps = [dict(args = [\"visible\", ([False] * len(cities)) + [True, False, False, False]], \r\n                             label = \"1990\",\r\n                             method = \"restyle\"\r\n                            ),\r\n                        dict(args = [\"visible\", ([False] * len(cities)) + [False, True, False, False]],\r\n                             label = \"1991\", \r\n                             method = \"restyle\"\r\n                            ),\r\n                        dict(args = [\"visible\", ([False] * len(cities)) + [False, False, True, False]],\r\n                             label = \"1992\",\r\n                             method = \"restyle\"\r\n                            ),\r\n                        dict(args = [\"visible\", ([False] * len(cities)) + [False, False, False, True]],\r\n                             label = \"1993\",\r\n                             method = \"restyle\"\r\n                            )\r\n                       ]\r\n              )\r\n         ]\r\n\r\nupdatemenus = list([\r\n    dict(type=\"buttons\",\r\n         active=0,\r\n         buttons=list([   \r\n            dict(label = 'states',\r\n                 method = 'update',\r\n                 args = [dict(visible = ([True] * len(cities)) + ([False] * len(cities_year))),\r\n                         dict(sliders = [],\r\n                              showlegend = True)]),\r\n            dict(label = 'years',\r\n                 method = 'update',\r\n                 args = [dict(visible = ([False] * len(cities)) + [True, False, False, False]),\r\n                         dict(sliders = slider,\r\n                              showlegend = False)])\r\n        ]),\r\n     )\r\n])\r\n\r\nlayout = dict(\r\n    title = 'myplot',\r\n    geo = dict(\r\n        scope='usa',\r\n        projection=dict(type='albers usa'),\r\n        showland=True,\r\n        showlakes = True,\r\n        landcolor = 'rgb(217, 217, 217)',\r\n        subunitwidth=1,\r\n        countrywidth=1,\r\n        subunitcolor=\"rgb(255, 255, 255)\",\r\n        countrycolor=\"rgb(255, 255, 255)\"\r\n    ),\r\n    updatemenus=updatemenus\r\n)\r\n\r\ntrace_data = cities + cities_year\r\nfig = dict(data=trace_data, layout=layout)\r\nplot(fig, validate=False)\r\n```\r\n\r\nWhen plot first appears, no issues:\r\n![unknown](https:\/\/user-images.githubusercontent.com\/12959255\/44950557-ae757880-adff-11e8-85e4-303fe0c44282.png)\r\n\r\nAfter pressing button, no data points appear:\r\n<img width=\"1270\" alt=\"screen shot 2018-09-01 at 3 56 02 pm\" src=\"https:\/\/user-images.githubusercontent.com\/12959255\/44950560-c0efb200-adff-11e8-81a7-a02c111563fd.png\">\r\n\r\nI tried implementing the plots in a different way (using `updatemenus = go.layout.Updatemenu(...)`, `city = go.Scattergeo(...)`, etc.) but had the same problem. Strangely though when I click on \"Download plot as a png\" after pressing button, the png file shows the data points plotted correctly. The issue doesn't appear when using `go.Scatter` instead of `go.ScatterGeo` so it seems to me it has something to do with updatemenus and `go.scatterGeo`.","comments":["Hi @enerrio , I do see what you mean. It seems like it's the introduction of the slider for the first time that's causing the points to disappear. This is something that would need to be addressed in plotly.js.\r\n\r\nI'll try to simplify the example a bit, translate it into javascript, and post it as an issue at https:\/\/github.com\/plotly\/plotly.js\/issues.\r\n\r\nBTW, do you need this to end up as a standalone html file?  If you were using this only in a Jupyter notebook, then you'd have a lot more flexibility working with a `FigureWidget` and ipywidgets controls.","Hi @jonmmease, thanks for the response. I don't need it as a standalone html file, I just wanted the visualizations to appear in the notebook. I actually tried using `FigureWidget` with above data like this:\r\n``` python\r\ngo.FigureWidget(data=trace_data, layout=layout)\r\n```\r\nBut it still has the same error as above.","Hi @enerrio , Here's an example of what I mean by using `FigureWidget` and `ipywidgets`\r\n\r\n```python\r\n# Imports\r\nimport pandas as pd\r\nimport plotly.graph_objs as go\r\nfrom plotly.offline import plot\r\nimport ipywidgets as widgets\r\n\r\n# Load data\r\ndata = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2014_us_cities.csv')\r\ndata = data.iloc[:400] # Keep only first 400 samples\r\ndata.loc[:100, 'year'] = '1990'\r\ndata.loc[100:200, 'year'] = '1991'\r\ndata.loc[200:300, 'year'] = '1992'\r\ndata.loc[300:, 'year'] = '1993'\r\n\r\n# Create Figure\r\ncities = []\r\nfor state in data['name'].value_counts().index:\r\n    data_sub = data.loc[data['name'] == state]\r\n    city = dict(\r\n        type = 'scattergeo',\r\n        visible = True,\r\n        locationmode = 'USA-states',\r\n        lon = data_sub['lon'],\r\n        lat = data_sub['lat'],\r\n        mode = 'markers',\r\n        marker = dict(\r\n            size = 8,\r\n            color = \"rgb(255, 102, 102)\",\r\n            opacity = 0.4,\r\n            line = dict(\r\n                width=0.5,\r\n                color='rgb(255, 102, 102)'\r\n            )\r\n        ),\r\n        name = state\r\n    )\r\n    cities.append(city)\r\n\r\ncities_year = []\r\nfor year in sorted(data.year.value_counts().index):\r\n    data_sub = data.loc[data['year'] == year]\r\n    city = dict(\r\n        type = 'scattergeo',\r\n        visible = False,\r\n        locationmode = 'USA-states',\r\n        lon = data_sub['lon'],\r\n        lat = data_sub['lat'],\r\n        mode = 'markers',\r\n        marker = dict(\r\n            size = 8,\r\n            color = \"rgb(255, 102, 102)\",\r\n            opacity = 0.4,\r\n            line = dict(\r\n                width=0.5,\r\n                color='rgb(255, 102, 102)'\r\n            )\r\n        ),\r\n        name = str(year)\r\n    )\r\n    cities_year.append(city)\r\n\r\nlayout = dict(\r\n    title = 'myplot',\r\n    margin = dict(r=300),  # Keep map from resizing when legend changes\r\n    geo = dict(\r\n        scope='usa',\r\n        projection=dict(type='albers usa'),\r\n        showland=True,\r\n        showlakes = True,\r\n        landcolor = 'rgb(217, 217, 217)',\r\n        subunitwidth=1,\r\n        countrywidth=1,\r\n        subunitcolor=\"rgb(255, 255, 255)\",\r\n        countrycolor=\"rgb(255, 255, 255)\"\r\n    )\r\n)\r\n\r\ntrace_data = cities + cities_year\r\nfig = go.FigureWidget(data=trace_data, layout=layout)\r\n\r\n# Create year slider\r\nyear_slider = widgets.SelectionSlider(\r\n    options=['1990', '1991', '1992', '1993'],\r\n    index=0,\r\n    description='Year:',\r\n    disabled=True,\r\n    orientation='horizontal',\r\n    continuous_update=False,\r\n    readout=True)\r\n\r\ndef set_year(*_):\r\n    year_visibility = ['legendonly'] * 4\r\n    year_visibility[year_slider.index] = True\r\n    fig.plotly_restyle({'visible': ([False] * len(cities)) + year_visibility})\r\n\r\nyear_slider.observe(set_year)\r\n\r\n# Create mode toggle\r\ndef set_mode(*_):\r\n    if mode_toggle.value == 'States':\r\n        year_slider.disabled = True\r\n        fig.plotly_update({'visible': ([True] * len(cities)) + [False, False, False, False]})\r\n    else:\r\n        year_slider.disabled = False\r\n        set_year()\r\n\r\nmode_toggle = widgets.ToggleButtons(\r\n    options=['States', 'Years'],\r\n    disabled=False)\r\n\r\nmode_toggle.observe(set_mode)\r\n\r\n# Create widget layout\r\nwidgets.VBox([fig, mode_toggle, year_slider])\r\n```\r\n![geodashboard](https:\/\/user-images.githubusercontent.com\/15064365\/45254686-461c1f00-b34a-11e8-8d8a-334df55bd53a.gif)\r\n\r\nI made a couple of other changes. I set `layout.margin.r` to keep map from jumping when legend changes. And I used `legendonly` rather than `False` for the `visible` property of years that aren't selected.\r\n\r\nSee https:\/\/ipywidgets.readthedocs.io\/en\/stable\/examples\/Widget%20List.html for more info on ipywidgets.\r\n\r\nHope that helps!\r\n"],"labels":["bug","plotly.js"]},{"title":"Links in plotly x-axis labels not working","body":"I'm trying to add links to each of the labels of the x axis of a heatmap. According to the docs html is respected, but the html data is added as 'data-unformatted'. Am I doing something wrong, or is this actually not supported? \r\n```\r\n<text text-anchor=\"start\" x=\"0\" y=\"578.4\" data-unformatted=\"<a href=\\\"MYLINKHERE.html\\\">axis_label_1<\/a>\" data-math=\"N\" transform=\"translate(179.72,0) rotate(30,0,572.4)\" style=\"font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(68, 68, 68); fill-opacity: 1; white-space: pre; pointer-events: all;\">\r\n    <a style=\"cursor:pointer\">axis_label_1<\/a>\r\n<\/text>\r\n```","comments":["Hi @Kkevsterrr,\r\n\r\nI'm able to create an axis label with a link in this example:\r\n\r\n```python\r\nimport plotly.graph_objs as go\r\nfig = go.FigureWidget(\r\n    data=[go.Heatmap(z=[[1, 20, 30],\r\n                        [20, 1, 60],\r\n                        [30, 60, 1]])])\r\nfig.layout.xaxis.title = 'Click <a href=\"http:\/\/www.google.com\">Link<\/a> Here'\r\nfig\r\n```\r\n![screen shot 2018-09-01 at 6 40 10 am](https:\/\/user-images.githubusercontent.com\/15064365\/44945213-100ef600-adb2-11e8-939a-992c76126e5b.png)\r\n\r\nCould you provide a full example of what you're doing to generate the label that doesn't work?\r\nThanks!\r\n","I can't post my original script, but I'll drop in some more information and work on building  a trimmed down example  later today. I'm trying to add links to the x-axis data labels, not the x-axis title (that seems to work fine). Oddly, the links seem to work in some browsers and not others (some builds of Firefox seem OK, whereas it dose not work in Chrome). \r\n```\r\nx_axis = [\"<a href=\\\"link_to_number_%d\">%d<\/a>\" % (num, num) for num in some_other_list]\r\ndata = [go.Heatmap(\r\n            z=intensity,\r\n            x=x_axis,\r\n            y=labels,\r\n            colorscale='Viridis'\r\n)]\r\n...\r\n```","Actually digging into this more, I'm not sure if it's a browser thing, it might be a plotly regression - this seems to work with plotly 2.4.1 and not work with plotly 3.1.1. \r\nI got those version numbers with the following:\r\n```\r\n# python3\r\n>>> import plotly\r\n>>> plotly.__version__\r\n'2.4.1'\r\n```","OK, thanks for the update.  Could you please still add a full reproducible example when you have a chance? Thanks!","Hi @Kkevsterrr , are you still interested in working through this? If so, could you add a full example? Thanks!","Sorry for the delay! Here's the code. I think I figured out the problem - if the links do not have \"http:\/\/\" in front of them, they don't work. Check the following example - on my version, the google link works, but the others do not. \r\n```\r\n#!\/usr\/bin\/env python3\r\nimport plotly.offline as po\r\nimport plotly.graph_objs as go\r\n\r\ndata1 =[[1, 20, 30],\r\n        [20, 1, 60],\r\n        [30, 60, 1]]\r\n\r\nx_axis = [\"<a href=\\\"http:\/\/google.com\\\">google.com<\/a>\", \"<a href=\\\"bing.com\\\">bing.com<\/a>\", \"<a href=\\\"test.com\\\">test.com<\/a>\"]\r\n\r\nbuilds = ['a', 'b', 'c']\r\n\r\ndata = [\r\n        go.Heatmap(\r\n            z=data1,\r\n            x=x_axis,\r\n            y=builds,\r\n            colorscale='Viridis',\r\n            )\r\n        ]\r\n\r\nfig = go.Figure(data=data)\r\npo.plot(fig, auto_open=True)\r\n```","Thanks for following up @Kkevsterrr , you're diagnosis looks right. And I think it is the expected behavior. Browsers tend to interpret google.com as http:\/\/google.com in the URL bar, but when used in a hyperlink, an `href` without `http:\/\/` is treated as a relative path.","Hmm no I don't think it's the expected behavior - plotly should be able to handle and graph with relative links and still treat it as a link - if you try that poc, a href is never set up for the links to bing and test.com - if I was hosting a heatmap and trying to add links to other sites on that server (which is what I was doing that led to the discovery of the bug), the <a> tag should be preserved (it isn't). Try running the poc and opening up Developer tools on the links - at least on my machine, there are no hrefs for links without \"http:\/\/\". ","Oh, I guess I'm seeing something different than you are.  I tried it in JupyterLab on Chrome and here's what I see.\r\n\r\n![screen shot 2018-10-24 at 10 41 07 am](https:\/\/user-images.githubusercontent.com\/15064365\/47438923-6462a080-d779-11e8-9011-bb9a4ea6a124.png)\r\n\r\nAll three labels are interpreted as links (I can click on each and I navigate to a new page)\r\n - the `google.com` link navigates to http:\/\/google.com, which chrome opens as https:\/\/www.google.com\/\r\n - the `bing.com` link navigates to http:\/\/localhost:8888\/bing.com, which is a 404.\r\n - Likewise for test.com\r\n\r\nThis is the \"expected\" behavior that I was referring to.\r\n\r\nBut, when I save it to a standalone html file, as in your example, the `bing.com` and `test.com` links look clickable, but clicking on them does nothing.  And here's what I see when I look at the SVG structure\r\n**google.com**\r\n![screen shot 2018-10-24 at 10 57 04 am](https:\/\/user-images.githubusercontent.com\/15064365\/47440133-937a1180-d77b-11e8-9ad2-94fad5c23527.png)\r\n\r\n**bing.com**\r\n![screen shot 2018-10-24 at 10 54 45 am](https:\/\/user-images.githubusercontent.com\/15064365\/47440022-675e9080-d77b-11e8-9e94-f240a22d9322.png)\r\n\r\nSo it looks like the google.com link results in a `xlink:href=\"http:\/\/google.com\"` attribute, but the bing.com link doens't result in a `xlink:href=\"bing.com\"` attribute. Which I do think it should.\r\n\r\nDoes this match what you're seeing?","Yup - that matches exactly what I'm seeing. Thanks for digging into it further! ","Still seeing this behavior in latest release, anything yet?"],"labels":["bug","plotly.js"]},{"title":"Rendering of Matplotlib linestyle=':' needs to be updated in par with 'dash' property","body":"Code sample:\r\n```\r\nax4.plot(y4 * points, linestyle=':', color=color, linewidth=3)\r\nax4.set_xlabel('Line Type :')\r\n\r\nplotly_fig = tls.mpl_to_plotly( fig )\r\n```\r\n\r\nThe error message is:\r\n```\r\nValueError: \r\n    Invalid value of type '__builtin__.str' received for the 'dash' property of scatter.line\r\n        Received value: 'circle'\r\n\r\n    The 'dash' property is a string and must be specified as:\r\n      - One of the following strings:\r\n            ['solid', 'dot', 'dash', 'longdash', 'dashdot',\r\n            'longdashdot']\r\n      - A number that will be converted to a string\r\n```","comments":["I think I encountered a related bug:\r\nSelf contained code sample:\r\n```\r\nimport plotly.offline\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib\r\nimport plotly\r\n\r\nprint('using matplotlib', matplotlib.__version__, 'and plotly', plotly.__version__)\r\n\r\nx = range(10)\r\n\r\nfig, ax = plt.subplots()\r\nax.plot(x, x, linestyle=':', linewidth=2)\r\nplotly.offline.plot_mpl(fig) \r\n```\r\nusing matplotlib 2.2.0 and plotly 3.7.0\r\n\r\nError:\r\n```\r\nValueError: \r\n    Invalid value of type 'builtins.str' received for the 'dash' property of scatter.line\r\n        Received value: 'dotted'\r\n\r\n    The 'dash' property is an enumeration that may be specified as:\r\n      - One of the following dash styles:\r\n            ['solid', 'dot', 'dash', 'longdash', 'dashdot', 'longdashdot']\r\n      - A string containing a dash length list in pixels or percentages\r\n            (e.g. '5px 10px 2px 2px', '5, 10, 2, 2', '10% 20% 40%', etc.)\r\n```\r\nI have no clue, what is going on here, but the problem is linewidth=2 in my case. Any other value like 2.1, 1.5, 3, etc. worked for me, but 2 triggers this error."],"labels":["matplotlylib"]},{"title":"Feature request: zsmooth parameter for Heatmapgl","body":"(First of all: FigureWidget + jupyterlab is just awesome, please continue!)\r\nthe zsmooth seems to not be implemented in `Heatmapgl` , while it is in `Heatmap`.\r\n\r\nCould you add this in the future? \r\nBy default `Heatmapgl` seems to use interpolation while I do like to turn it off.","comments":["Hi @mmlanger , glad you're enjoying the new workflow, thanks for letting us know \ud83d\ude42 \r\n\r\nCould you create a corresponding issue for the [Plotly.js library](https:\/\/github.com\/plotly\/plotly.js)? Any changes in trace options or behaviors have to flow through that library first.  Once you do, just post another comment here with the link to the Plotly.js issue.\r\n\r\nThanks!","Here goes the plotly.js issue:\r\nhttps:\/\/github.com\/plotly\/plotly.js\/issues\/2924\r\n\r\nThanks for your response!"],"labels":["enhancement","plotly.js"]},{"title":"Testing wishlist","body":"This issue is to discuss ideas and plans for improving testing for plotly.py.  I started thinking about this more while working on the CircleCI 2.0 migration in https:\/\/github.com\/plotly\/plotly.py\/pull\/1109.\r\n\r\nIn no particular order:\r\n - Migrate to pytest\r\n   + parameterization and lightweight fixtures are really useful, and pytest is already in use for the validator tests in `_plotly_utils\/tests`\r\n   + pytest can run most nosetests as is, so I don't expect this to be a lot of work (https:\/\/docs.pytest.org\/en\/latest\/nose.html)\r\n\r\n - Reintroduce pytest-based code coverage reporting (https:\/\/pytest-cov.readthedocs.io\/en\/latest\/)\r\n \r\n - Test the code generation logic on Python 3.6+. Make sure generation runs and produces no change relative to the committed code.\r\n\r\n - Add a Python 3.6+ workflow that runs code generation against Plotly.js master, and then runs all of the tests.  We wouldn't hold up PRs on this, but it would help us catch compatibility issues before Plotly.js releases. Maybe it just runs periodically on master.\r\n\r\n - Add orca integration tests to the CI test suite.\r\n\r\n - Add some selenium-based integration tests for `FigureWidget` in the classic notebook and in JupyterLab.\r\n\r\n - Add OS X and Windows CI tests. This will be especially helpful for the orca server process integration (https:\/\/github.com\/plotly\/plotly.py\/issues\/1105) since the process management logic has some OS-dependent considerations.\r\n\r\ncc @chriddyp @cldougl  @nicolaskruchten  @Kully","comments":["Maybe it's not migrated to pytest yet, at least https:\/\/github.com\/plotly\/plotly.py\/issues\/3670 may give that impression since there's a small interoperability issue there. Sorry to advertise that ticket like this, but would be great to have that interoperability with pytest, so that user tests in complicated data science projects may cover calling plotly express api up to the final `show()` step, or when using something like Xvfb for end-to-end headless testing, to make sure that visualization steps aren't broken.","We do use `pytest` for testing Plotly Express and the rest of Plotly."],"labels":["testing"]},{"title":"Add type annotation stubs","body":"Hi,\r\nI was wondering if you would be interested in PRs that add type annotation stubs for the plotly.py API. That would enable static type checkers like mypy and Pyre to statically type check Python projects using plotly, and as well as enhancing the IDE experience for editors able to offer richer experiences from type annotations (just as VSCode and PyCharM). ","comments":["Hi @malmaud, I would love to do this... but we still support Python 2.7.\r\n\r\nThat said, in all of our new generated code we use numpydoc docstrings with return types (see, for example, `plotly\/graph_objs\/_bar.py`). This is enough for PyCharm to figure things out (I haven't really tested other editors very much) and it does provide a nice experience when working with objects in the `graph_objs` hierarchy.\r\n\r\nI would be interested in gaining a better understanding of the most broadly compatible way to specify type information for a mixed Python 2\/3 project!","Great to hear that. The stubs can live in separate files that sit parallel\nto the original Python source files, which preserves Python 2\ncompatibility.\n\nI recently went through this with the Visdom project. See the\n`__init__.pyi` file in\nhttps:\/\/github.com\/facebookresearch\/visdom\/tree\/17f28cb258ad874d6fc5fcce5a4479abe4377738\/py\/visdom,\nwhich lives alongside the `__init__.py` that it annotates.\n\nThis is the same system as Typescript's `.d.ts` files, if you're familiar.\n\nOn Thu, Aug 9, 2018 at 11:47 AM Jon Mease <notifications@github.com> wrote:\n\n> Hi @malmaud <https:\/\/github.com\/malmaud>, I would love to do this... but\n> we still support Python 2.7.\n>\n> That said, in all of our new generated code we use numpydoc docstrings\n> with return types (see, for example, plotly\/graph_objs\/_bar.py). This is\n> enough for PyCharm to figure things out (I haven't really tested other\n> editors very much) and it does provide a nice experience when working with\n> objects in the graph_objs hierarchy.\n>\n> I would be interested in gaining a better understanding of the most\n> broadly compatible way to specify type information for a mixed Python 2\/3\n> project!\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/plotly\/plotly.py\/issues\/1103#issuecomment-411804475>,\n> or mute the thread\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AA8SvX25sAyyerFo8sTPtvFuVv0xX2JQks5uPFmAgaJpZM4V169w>\n> .\n>\n","That looks really interesting. I don't see any downside to adding these to at least the code generation output, because that would automatically stay up to date (and this covers the majority of the public API).\r\n\r\nWhat has your experience been like keeping these up to date as a codebase evolves (for the human generated code \ud83d\ude42)? What kind of tooling\/testing would you recommend to that help flag inconsistencies?","Well, I won't exaggerate - I became excited about static type checking for Python and started using it for my own research code, but I don't have have direct experience applying it to large multi-developer codebases. I'd look forward to trying and learning, however.\r\n\r\nIn terms of help from tooling, the only thing I know of is https:\/\/github.com\/Instagram\/MonkeyType. It attempts to produce stubs automatically based on the types it observes variables take during runtime, but I haven't tried it. \r\n\r\nThe good news is the worse-case scenario for an incorrect stub is a user gets an incorrect warning (or lack of warning) from their type checker and reports it as an issue. Actual runtime behavior can never be affected by incorrect stubs. ","If you're interested in digging in, I'd like to start by adding stub generation to the `graph_obj` code generation logic.  The current logic is in `codegen\/datatypes.py`.  As I said, this is the majority of the public API, and we can keep it correct for free.\r\n\r\nOnce we have this, I'd like to do a bit of an editor survey to get a full list of the Python editors that support completion across the full nested `graph_objs` hierarchy because of the addition of the stubs (as I mentioned, PyCharm does fine with just the types in the numpydoc strings).\r\n\r\nThen I think we'd have enough information to make an informed decision about how much benefit users would get from the slight increase in maintenance burden.\r\n\r\nHow does that sound?","Sounds great.\r\n \r\nI should mention that there's a formalized generalization of PyCharm's docstring-aware approach whereby type annotations can be encoded into strings and put as comments inline with a source file, instead of as a separate stub (https:\/\/www.python.org\/dev\/peps\/pep-0484\/#suggested-syntax-for-python-2-7-and-straddling-code). I personally feel this is less elegant than separate stubs that get to use the nice new Python 3 syntax for type annotations and I'm probably less motivated personally to contribute annotations in that format, but it's a possibility.","I'm going to link to https:\/\/github.com\/pytorch\/pytorch\/pull\/12500 as an example of a big project that went through the process of adding stubs and is discussing testing strategies etc  - might be a useful reference for me in the future or whoever else wants to take a stab at this.","Hey, I'm wondering if there is any news on this? With powerful static typecheckers such as Pylance (the new language server in VSCode) becoming widely available and adopted, it would be very nice to have decent typing information available for plotly objects.","There's no news at this time, but if someone wants to pick up the torch and work on a PR or proposal for how to get this done, we'd happily consider it and help you out :)","Also, depending on how large they are (we have a *lot* or graph object classes), we may need to ship them in a separate package.","Since python 2 has reached EOL now, I guess maintaining support for it should not be part of the consideration any more?","As pointed out by @technic in (this comment)[https:\/\/github.com\/plotly\/plotly.py\/issues\/1682#issuecomment-922361704] from #1682, it looks like a simple workaround is to make use to the [`TYPE_CHECKING`](https:\/\/docs.python.org\/3\/library\/typing.html#typing.TYPE_CHECKING) which is specifically designed to handle lazy imports.","I've added some very basic output type annotations to various functions that return `go.Figure` in this PR: https:\/\/github.com\/plotly\/plotly.py\/pull\/3708 but clearly there is lots of room to do more work in this area."],"labels":["enhancement"]},{"title":"mpl_to_plotly doesn't convert negative values properly in bar graph","body":"Bar graphs with negative values created in matplotlib are not converted properly by mpl_to_plotly as all negative values are turned positive.\r\n\r\nFrom [this](https:\/\/community.plot.ly\/t\/matplotlib-bar-chart-wont-plot-negative-numbers\/2137) community post.\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport plotly.tools as tls\r\nimport plotly.offline as py\r\npy.init_notebook_mode()\r\n\r\ny = [3, 10, -7, 5, 3, -4.5, 6, 8.1]\r\nN = len(y)\r\nx = range(N)\r\nwidth = 1\/1.5\r\nplt.bar(x, y, width, color=\"blue\")\r\n\r\n\r\nfig = plt.gcf()\r\nprint('MatPlotLib figure')\r\nplt.show()\r\n\r\nplotly_fig = tls.mpl_to_plotly(fig)\r\nprint('mpl_to_plotly figure')\r\npy.iplot(plotly_fig)\r\n\r\n#the y-axis data in the plotly_fig is all positive\r\nprint('The converted plotly y data: {}\\nThe original y data:{}'.format(plotly_fig['data'][0]['y'],y))\r\n\r\n#manually set the y-axis data and the plot works\r\nplotly_fig['data'][0]['y']=y\r\npy.iplot(plotly_fig)\r\n```","comments":["Thanks for the report and example @michaelbabyn !","Cross reference #428"],"labels":["matplotlylib"]},{"title":"Add output_type option to figure_factory functions","body":"I propose we add a new option to all figure factory methods named `output_type`. This may be set to `'Figure'` (default), `'FigureWidget'`, or `'dict'`.\r\n\r\nSetting `output_type` to `'dict'` would return only the dictionary version of the figure.  This would be the fastest path, especially for figure factories that produce figures with lost of traces. It would provide an option for people to construct a complex figure with a figure factory, customize it, and then save it with `plot`\/`iplot` without validation using the `validate=False` option. See dendrogram use-case described in #1052.\r\n\r\nSetting `output_type` to `'FigureWidget'` would directly return a `FigureWidget` instance. It would also open the door for figure factories to pre-install interactive functionality using callbacks for use in the Jupyter Notebook.\r\n\r\nFor example, we could add a `datashader_scatter_plot` figure factory that wraps the logic from this notebook: https:\/\/github.com\/jonmmease\/plotly_ipywidget_notebooks\/blob\/master\/notebooks\/DataShaderExample.ipynb. If `ouput_type` is `'Figure'` or `'dict'` then the datashader logic is executed once to build the data image for the initial axes ranges. If the `ouput_type` is `'FigureWidget'` then, in addition, we would install the zoom\/resize callback logic to automatically recompute the data image on zoom\/resize.\r\n\r\n@chriddyp @cldougl @Kully ","comments":[],"labels":["enhancement","performance"]},{"title":"Efficient deep copy of graph_objs without validation","body":"Consider the following:\r\n\r\n```python\r\nfig1 = go.Figure(...)\r\nfig2 = go.Figure(fig1)\r\n```\r\n\r\nRight now, the construction of `fig2` involves the re-validation of all of the properties in fig1. But this is unnecessarily since the properties are guaranteed to be valid in fig1.\r\n\r\nAlso consider this case:\r\n```python\r\ngo.Figure(data=[go.Scatter(marker=go.scatter.Marker(...))])\r\n```\r\n\r\nHere, go.Scatter should not rerun the marker validation logic, and go.Figure should not rerun the scatter trace validation logic.\r\n\r\nWe should have a fast performance path for these cases that just performs a `deepcopy` on the raw dict and splices that into a new object, without any additional validation.\r\n\r\nSee https:\/\/community.plot.ly\/t\/how-to-copy-figure-or-trace-object-deepcopy-no-longer-working\/12166","comments":[],"labels":["performance"]},{"title":"pass config options to FigureWidget","body":"Previously I was able to do\r\n```\r\nplotly.offline.plot(..., config={'showLink':False, 'displayModeBar':False})\r\n```\r\n\r\nIs it possible using the new FigureWidget ?","comments":["Hi @amaurydar , `plotly.offline.plot` still supports these options as before. But `FigureWidget` doesn't support them yet.\r\n\r\nI'm not certain that we'll be able to support all of the config options in `FigureWidget`, which of them would you find useful?","Thanks for your reply!\r\n\r\nThe 2 options I use currently are the ones mentioned above : `showLink` and `displayModeBar`.\r\nIt looks like by default `FigureWidget` sets `showLink=False`, so the only one I need is `displayModeBar` really.","yup, I'm looking for scrollZoom. If there any work around?","Is there an update on using scrollZoom with FigureWidgets yet?","@nicpayne713 I had to go through [ipyevents](https:\/\/github.com\/mwcraig\/ipyevents) extension to solve it","Hey @jonmmease I'm also interested in having `scrollZoom` in a `FigureWidget` (basically to implement some datashader-like behaviour for level-of-detail visualization of images). Any way I could help you out implementing this? Interested in chatting about this with you.","@jonmmease I got it working, will try to throw everything away which has nothing to do with `scrollZoom` and upload ipynb to GitHub if you believe it helps you in any way.","@LukaPitamic I'm interested :-). Thanks!\r\n","@LukaPitamic @emmanuelle \r\nCould you share this solution? I'm interested too.","Hi all, any progress on this matter? It would be quite useful for many, me included =)","Yes this would be useful. Really FigureWidget should pass most options available in `fig.show(config=config)`.\r\nOne example of config dict\r\n```\r\nconfig = {\r\n    'scrollZoom': False,\r\n    'displayModeBar': True,\r\n    'editable': False,\r\n    'showLink':False,\r\n    'displaylogo': False,\r\n    'toImageButtonOptions': {\r\n    'format': 'png', # one of png, svg, jpeg, webp\r\n    'filename': 'custom_image',\r\n    #'height': 500,\r\n    'width': 800,\r\n    'scale': 1, # Multiply title\/legend\/axis\/canvas sizes by this factor\r\n    }\r\n}\r\n```","@chaffra @luiztauffer @Diogo-Rossi @emmanuelle , been promising this for a while, here you go:\r\nhttps:\/\/github.com\/LukaPitamic\/other\/blob\/master\/Plotly-ScrollZoom.ipynb","> Yes this would be useful. Really FigureWidget should pass most options available in `fig.show(config=config)`.\r\n> One example of config dict\r\n> \r\n> ```\r\n> config = {\r\n>     'scrollZoom': False,\r\n>     'displayModeBar': True,\r\n>     'editable': False,\r\n>     'showLink':False,\r\n>     'displaylogo': False,\r\n>     'toImageButtonOptions': {\r\n>     'format': 'png', # one of png, svg, jpeg, webp\r\n>     'filename': 'custom_image',\r\n>     #'height': 500,\r\n>     'width': 800,\r\n>     'scale': 1, # Multiply title\/legend\/axis\/canvas sizes by this factor\r\n>     }\r\n> }\r\n> ```\r\n\r\nYes. Seconded. The most intuitive for me would be if FigureWidget accepted the exact same config dict.","@jonmmease Can we expect progress on this anytime soon?","We\u2019re not actively working on this at the moment but we\u2019d certainly accept a community PR if someone wanted to give it a  shot!","@nicolaskruchten Any pointers where should I look within plolty.py codebase if I want config to work with FigureWidgets?","Adding to the chorus of voices to say that I also need access to the displayModeBar setting for FigureWidget. I've tried hunting down where this is hooked up in the codebase with no luck and would also need some pointers.","Sorry, I never replied to @jaladh-singhal above!\r\n\r\nSo we would need at least two changes:\r\n\r\n1. A new Python API to provide the config information: `FigureWidget` doesn't use the `.show(config=...)` mechanism so that's out. We'd need a proposal for where to put this that is either `FigureWidget`-specific, or would work for both `FigureWidget` and `Figure`. Note that in general we don't consider the `config` to be part of the figure, but maybe we could live with something like `fig.set_config()` although it might behave a bit oddly: you wouldn't be able to change it once set for `FigureWidget` and it would be overridden by the config passed in to `fig.show(config=...)` for `Figures`. It also wouldn't be stored on disk when written out with `fig.write_json()` etc.\r\n2. Changes to the [`plotlywidget` Javascript extension](https:\/\/github.com\/plotly\/plotly.py\/tree\/master\/packages\/javascript\/plotlywidget) to actually retrieve this info and pass it along to the JS layer","Adding a suggestion.  Could you please add the ability to add horizontal and vertical scrollbars to this config?","checking back after a couple of years... any progress on this Issue?\r\nIt would be very useful to control the config properties for `FigureWidget`","It's possible to update the config by assigning the `_config` property. For example, to hide the modebar:\r\n```py\r\nfig = go.FigureWidget()\r\nfig._config = fig._config | {'displayModeBar': False}\r\ndisplay(fig)\r\n```\r\n**Note**:\r\n- The snippet above requires python 3.9+ to use the [`|` merge operator](https:\/\/docs.python.org\/3\/whatsnew\/3.9.html#dictionary-merge-update-operators)\r\n- The `_config` property must be updated through assignment [as stated in this comment](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/packages\/python\/plotly\/plotly\/basewidget.py#L43). For instance, the following **would not** work to hide the mode bar:\r\n```py\r\nfig = go.FigureWidget()\r\nfig._config['displayModeBar'] = False\r\ndisplay(fig)\r\n``` \r\n","> It's possible to update the config by assigning the `_config` property. For example, to hide the modebar:\r\n> \r\n> ```python\r\n> fig = go.FigureWidget()\r\n> fig._config = fig._config | {'displayModeBar': False}\r\n> display(fig)\r\n> ```\r\n> \r\n> **Note**:\r\n> \r\n>     * The snippet above requires python 3.9+ to use the [`|` merge operator](https:\/\/docs.python.org\/3\/whatsnew\/3.9.html#dictionary-merge-update-operators)\r\n> \r\n>     * The `_config` property must be updated through assignment [as stated in this comment](https:\/\/github.com\/plotly\/plotly.py\/blob\/master\/packages\/python\/plotly\/plotly\/basewidget.py#L43). For instance, the following **would not** work to hide the mode bar:\r\n> \r\n> \r\n> ```python\r\n> fig = go.FigureWidget()\r\n> fig._config['displayModeBar'] = False\r\n> display(fig)\r\n> ```\r\n\r\nThis did not work while creating a plotly plot in Python Shiny. The ModeBar still showed."],"labels":["enhancement"]},{"title":"Performance regression in 3.0.0","body":"OS: OSX 10.13.2\r\nPython: 3.6.4\r\n\r\nI'm creating the following animated chart using the offline API.\r\n![plotly-animation](https:\/\/user-images.githubusercontent.com\/446062\/42426044-5ae40b4c-82d9-11e8-8c47-a88b5e37802a.gif)\r\n\r\nUsing 2.7.0 generating the HTML file (30MB) takes ~11 seconds (0m11.044s)\r\nUsing 3.0.0 generating the HTML file takes: **4 MINUTES** (4m20.393s).\r\n\r\nThere is probably a much more efficient way of making this kind of animated scatter (please tell me if there is) but in 2.7 this was at least workable, in 3.0, not so much.\r\n\r\nThe following example reproduces the behavior. The size of the data is the same as in the gif above, the actual values are not.\r\n\r\n```python\r\nimport numpy as np\r\nimport plotly.graph_objs as go\r\nimport colorlover as cl\r\nfrom plotly.offline import plot\r\n\r\nsim_duration = 40.0\r\ntime_inc = 0.1\r\nmotor_unit_count = 120\r\ntimes = np.arange(0.0, sim_duration, time_inc)\r\n\r\n# Setting colors for plot.\r\npotvin_scheme = [\r\n    'rgb(115, 0, 0)',\r\n    'rgb(252, 33, 23)',\r\n    'rgb(230, 185, 43)',\r\n    'rgb(107, 211, 100)',\r\n    'rgb(52, 211, 240)',\r\n    'rgb(36, 81, 252)',\r\n    'rgb(0, 6, 130)'\r\n]\r\n# It's hacky but also sorta cool.\r\nc = cl.to_rgb(cl.interp(potvin_scheme, motor_unit_count))\r\nc = [val.replace('rgb', 'rgba') for val in c]\r\nc = [val.replace(')', ',{})') for val in c]\r\n\r\n\r\ndef get_color(trace_index: int) -> str:\r\n    # The first and every 20th trace should be full opacity\r\n    alpha = 0.2\r\n    if trace_index == 0 or ((trace_index + 1) % 20 == 0):\r\n        alpha = 1.0\r\n    color = c[trace_index].format(alpha)\r\n    return color\r\n\r\n\r\n# Per Motor Unit Force\r\nall_array = np.ones((120, len(times)))\r\ndata = []\r\nannotations = []\r\nanno_offsets = {\r\n    0: 20,\r\n    19: 30,\r\n    39: 40,\r\n    59: 45,\r\n    79: 17,\r\n    99: 56,\r\n    119: 170\r\n}\r\nmax_y = np.amax(all_array)\r\nfor i, t in enumerate(all_array):\r\n    trace = go.Scatter(\r\n        x=times[:1],\r\n        y=t[:1],\r\n        name=i + 1,\r\n        marker=dict(\r\n            color=get_color(i)\r\n        )\r\n    )\r\n    data.append(trace)\r\n\r\nframes = []\r\nfor i in range(1, len(times), 10):\r\n    frame_data = []\r\n    for j, t in enumerate(all_array):\r\n        trace = go.Scatter(\r\n            x=times[:i],\r\n            y=t[:i],\r\n            name=j + 1,\r\n            marker=dict(\r\n                color=get_color(j)\r\n            )\r\n        )\r\n        frame_data.append(trace)\r\n\r\n    frame = dict(\r\n        data=frame_data\r\n    )\r\n    frames.append(frame)\r\n\r\nlayout = go.Layout(\r\n    title='Motor Unit Forces by Time',\r\n    yaxis=dict(\r\n        title='Motor unit force (relative to MU1 tetanus)',\r\n        range=[0, max_y],\r\n        autorange=False\r\n    ),\r\n    xaxis=dict(\r\n        title='Time (s)',\r\n        range=[0, sim_duration],\r\n        autorange=False\r\n    ),\r\n    updatemenus=[{\r\n        'type': 'buttons',\r\n        'buttons': [{\r\n            'args': [\r\n                None,\r\n                {'frame': {'duration': 200, 'redraw': False},\r\n                 'fromcurrent': True,\r\n                 'transition': {'duration': 200, 'easing': 'linear'}\r\n                 }\r\n            ],\r\n            'label': 'Play',\r\n            'method': 'animate'\r\n        }]\r\n    }]\r\n)\r\nlayout['annotations'] = annotations\r\n\r\nfig = go.Figure(\r\n    data=data,\r\n    layout=layout,\r\n    frames=frames\r\n)\r\nplot(fig, filename='regression.html')\r\n```","comments":["Hi @iandanforth , thanks for the report and the reproducible example. This will be really helpful for future performance optimization.\r\n\r\nConstruction `Figure` objects with lots of frames is probably always going to be a bit slower in 3.0 compared to 2.7 because of all of the extra validation and defensive copying that's happening now, but I expect we'll be able to improve this a fair amount with some profiling.\r\n\r\nHere's what I recommend. Use objects from the `graph_objs` hierarchy when you're first building up the logic to construct your figure. This way you'll have the validation feedback while you're iterating on your design. Once you have it working the way you want, and you want to scale to a lot more frames, replace all of the graph_objs with plain `dict`s and set the `validate` param to `plot`\\`iplot` to `False`. This way you will bypass all property validation and things will run much faster.\r\n\r\nWhen I make these changes in your example, it runs in under 2 seconds.\r\n```python\r\n%%time\r\nimport numpy as np\r\nimport plotly.graph_objs as go\r\nimport colorlover as cl\r\nfrom plotly.offline import plot\r\n\r\nsim_duration = 40.0\r\ntime_inc = 0.1\r\nmotor_unit_count = 120\r\ntimes = np.arange(0.0, sim_duration, time_inc)\r\n\r\n# Setting colors for plot.\r\npotvin_scheme = [\r\n    'rgb(115, 0, 0)',\r\n    'rgb(252, 33, 23)',\r\n    'rgb(230, 185, 43)',\r\n    'rgb(107, 211, 100)',\r\n    'rgb(52, 211, 240)',\r\n    'rgb(36, 81, 252)',\r\n    'rgb(0, 6, 130)'\r\n]\r\n# It's hacky but also sorta cool.\r\nc = cl.to_rgb(cl.interp(potvin_scheme, motor_unit_count))\r\nc = [val.replace('rgb', 'rgba') for val in c]\r\nc = [val.replace(')', ',{})') for val in c]\r\n\r\ndef get_color(trace_index: int) -> str:\r\n    # The first and every 20th trace should be full opacity\r\n    alpha = 0.2\r\n    if trace_index == 0 or ((trace_index + 1) % 20 == 0):\r\n        alpha = 1.0\r\n    color = c[trace_index].format(alpha)\r\n    return color\r\n\r\n# Per Motor Unit Force\r\nall_array = np.ones((120, len(times)))\r\ndata = []\r\nannotations = []\r\nanno_offsets = {\r\n    0: 20,\r\n    19: 30,\r\n    39: 40,\r\n    59: 45,\r\n    79: 17,\r\n    99: 56,\r\n    119: 170\r\n}\r\n\r\nmax_y = np.amax(all_array)\r\nfor i, t in enumerate(all_array):\r\n    trace = dict(\r\n        x=times[:1],\r\n        y=t[:1],\r\n        name=i + 1,\r\n        marker=dict(\r\n            color=get_color(i)\r\n        )\r\n    )\r\n    data.append(trace)\r\n\r\nframes = []\r\nfor i in range(1, len(times), 10):\r\n    frame_data = []\r\n    for j, t in enumerate(all_array):\r\n        trace = dict(\r\n            x=times[:i],\r\n            y=t[:i],\r\n            name=j + 1,\r\n            marker=dict(\r\n                color=get_color(j)\r\n            )\r\n        )\r\n        frame_data.append(trace)\r\n\r\n    frame = dict(\r\n        data=frame_data\r\n    )\r\n    frames.append(frame)\r\n\r\nlayout = dict(\r\n    title='Motor Unit Forces by Time',\r\n    yaxis=dict(\r\n        title='Motor unit force (relative to MU1 tetanus)',\r\n        range=[0, max_y],\r\n        autorange=False\r\n    ),\r\n    xaxis=dict(\r\n        title='Time (s)',\r\n        range=[0, sim_duration],\r\n        autorange=False\r\n    ),\r\n    updatemenus=[{\r\n        'type': 'buttons',\r\n        'buttons': [{\r\n            'args': [\r\n                None,\r\n                {'frame': {'duration': 200, 'redraw': False},\r\n                 'fromcurrent': True,\r\n                 'transition': {'duration': 200, 'easing': 'linear'}\r\n                 }\r\n            ],\r\n            'label': 'Play',\r\n            'method': 'animate'\r\n        }]\r\n    }]\r\n)\r\nlayout['annotations'] = annotations\r\n\r\nfig = dict(\r\n    data=data,\r\n    layout=layout,\r\n    frames=frames\r\n)\r\n\r\nplot(fig, filename='regression.html', validate=False, auto_open=False)\r\n```\r\n\r\nI hope that's helpful.","@jonmmease Thanks for taking the time to look into this! This fix is very helpful for me. My remaining concern is one of *optics*. If someone tries to do much-data-many-frames-wow! and finds plotly slow it may deter them from using the library.\r\n\r\nTo address that I recommend creating a ticket to modify the animation documentation to include exactly your suggestions. I knew to use 'redraw=False' only because of those docs. (Which are very useful and well put together!)\r\n\r\nThanks again!","I'm glad this fix is working for you and thanks for the helpful suggestion regarding the documentation. \r\n\r\nI'm going to leave this issue open until I have a chance to profile your example and see what can be done to make the situation a bit less painful.","+1 for this issue.  Rather than submit another ticket, I have attached my own example of poor 3.0.0 performance.  On my machine, the difference was .013 seconds to 30 seconds so ~2000 times slower.  As per above I got out of trouble by extracting the data as lists of dicts using the _data property and operating on them in that form, re-creating a modified figure later.\r\n```\r\nimport plotly\r\nimport plotly.plotly as py\r\nimport plotly.graph_objs as go\r\nimport plotly.figure_factory as ff\r\n\r\nimport numpy as np\r\n\r\nplotly.tools.set_credentials_file(username='xxxxxx', api_key='xxxxx')\r\nplotly.tools.set_config_file(world_readable=False, sharing='private')\r\nplotly.offline.init_notebook_mode(connected=True)\r\n\r\nz = np.random.uniform(0, 1, size=(5000, 8))\r\nmyDendrogram = ff.create_dendrogram(z, orientation='bottom')\r\nplotly.offline.iplot(myDendrogram) \r\n\r\ndef placeAndScaleDendrogram(figure):\r\n    data = figure['data']\r\n    \r\n    for col in data:\r\n        col['xaxis'] = 'x'\r\n        col['yaxis'] = 'y2'\r\n        col['x'] = (col['x']\/10.0) + 0.5  # rescale the dendrogram to match the x axis\r\n\r\nget_ipython().run_line_magic('prun', 'placeAndScaleDendrogram(myDendrogram)')\r\n\r\ndef placeAndScaleDendrogramRaw(figure):\r\n    data = figure._data\r\n    \r\n    for col in data:\r\n        col['xaxis'] = 'x'\r\n        col['yaxis'] = 'y2'\r\n        col['x'] = (col['x']\/10.0) + 0.5  # rescale the dendrogram to match the x axis\r\n\r\nget_ipython().run_line_magic('prun', 'placeAndScaleDendrogramRaw(myDendrogram)')\r\n```\r\n\r\nthis is the performance figures for the first call\r\n```\r\n         3334357 function calls in 30.405 seconds\r\n\r\n   Ordered by: internal time\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n    79984   20.477    0.000   20.477    0.000 basedatatypes.py:2157(<listcomp>)\r\n    94982    3.435    0.000    3.589    0.000 basevalidators.py:251(present)\r\n    69986    2.289    0.000   24.440    0.000 basedatatypes.py:1198(_get_child_props)\r\n```\r\nNote that most of the time is held up here....\r\nplotly\/basedatatypes.py\r\n\r\n```\r\n    @staticmethod\r\n    def _index_is(iterable, val):\r\n        \"\"\"\r\n        Return the index of a value in an iterable using object identity\r\n        (not object equality as is the case for list.index)\r\n\r\n        \"\"\"\r\n        index_list = [\r\n            i for i, curr_val in enumerate(iterable) if curr_val is val # <<<-------HERE!\r\n        ]\r\n        if not index_list:\r\n            raise ValueError('Invalid value')\r\n\r\n        return index_list[0]\r\n```","Thanks for the example and the profiling information @JavascriptMick, I'll see what I can come up with...","Alright, I've made some progress in #1061 that will be included in version 3.0.2\r\n\r\n@iandanforth Your initial example has gone from ~110s to ~42s\r\n\r\n@JavascriptMick The creation of the dendrogram has gone from ~110s to ~20s, and the scaling that you were timing has gone from ~20s to ~2s.\r\n\r\nThat said, these are still far slower than version 2.7 where the `Figure` and `graph_objs` objects were basically just simple `dict` subclassses. We're not going to be able to get all of the performance back with the new feature set, but we should be able to keep making incremental progress.\r\n\r\nEach of your use cases has ~5000 traces in total, and for cases like these I think we'll need to encourage people to work with `dict` objects rather than `graph_objs`, and work through whether there's anything we should do in the API to make that easier.","Thanks @jonmmease.  Agree, with very large traces, lists and dict are the way to go.  The _data property that exposes the raw data currently support this so i guess make sure that these remain in the API.\r\n\r\nThe only other thing I can think of is providing a more elegant way of combining multiple plots.This ultimately was my goal when I discovered the issue (creating a Clustermap visualisation from a Heatmap and 2 dendrograms).  All of this spinning and placing things on alternate axes feels clumsy.  I understand that FigureFactories are the recommended answer to this and it is on my ToDo list to create a ClusterMap Figurefactory for this and raise a PR but It's unclear to me how much work this will be.. probably a lot.","Hi @JavascriptMick ,\r\n\r\nI'd rather people not get in the habit of using the `_data` property for performance reasons because that will mess up the synchronization of the new `FigureWidget` class.\r\n\r\nWhat do you think of the proposal in #1079 ? If this were implemented you could request that the figure factory return a `dict`, and then you could make modifications to the `dict` before converting it to a `Figure` (or even not converting it to a `Figure` if you use `plot`\/`iplot` with `validate=False`).\r\n\r\nAlso, the dendrogram itself with that many points is a bit of a mess visually. I'm thinking we should expose the scipy `truncate_mode` property (see http:\/\/lagrange.univ-lyon1.fr\/docs\/scipy\/0.17.1\/generated\/scipy.cluster.hierarchy.dendrogram.html) to have the option of limiting how many leaves are displayed.\r\n\r\nHere's one thought for making the construction of clustermap easier (short of creating a dedicated figure factory).  For figure factories that only deal with a single axis (like dendrogram), it would be nice if you could pass in a `Figure` object that was initialized with [`tools.make_subplots`](https:\/\/plot.ly\/python\/subplots\/#multiple-subplots-with-titles), along with the subplot `row`, `col` parameters.  In this case the figure factory would add all of its traces to the appropriate axes of the existing figure (In practice I'd prefer to refactor the internal logic a bit and have a separate function for adding traces to an existing figure, but that's the basic idea).\r\n\r\n\r\n","It seems i can reproduce the same issue with this code :\r\n```python\r\nimport plotly\r\nimport time\r\nimport plotly.plotly as py\r\nimport plotly.figure_factory as FF\r\n\r\nprint('plot version', plotly.__version__)\r\nt1 = time.time()\r\n\r\nz = []\r\nfor i in range(0, 100):\r\n    z.append([j for j in range(0, 100)])\r\n\r\nfigure = FF.create_annotated_heatmap(z)\r\nprint('Timing', time.time() - t1)\r\n```\r\nWith plotly version 3.10.0, i get around 24 seconds, versus 2.9 seconds for version 2.7.0.\r\n\r\nIs it the right place to raise the issue ?"],"labels":["performance"]},{"title":"optional_imports: Improve Warnings\/Dependencies","body":"I was trying to use the plotly.figure_factory.create_violin but it failed with warning \r\nNoneType does not have attribute gaussian_kde\r\n\r\nIt took a while for me to trace this to _violin.py, and realize that \r\nscipy_stats = optional_imports.get_module('scipy.stats')\r\nwas returning None.\r\n\r\nI was working in a \"fresh\" virtual environment, with the following requirements:\r\ndash==0.21.1\r\ndash-core-components==0.23.0\r\ndash-html-components==0.11.0\r\ndash-renderer==0.13.0\r\ndash-table-experiments==0.6.0\r\nplotly==2.7.0\r\n\r\nYou can confirm scipy_stats is `None` by working in this virtualenvironment::\r\n`\r\nimport plotly\r\n\r\nfrom plotly import optional_imports\r\nscipy_stats = optional_imports.get_module('scipy.stats')\r\ntype(scipy_stats)\r\n`\r\n\r\nThe request is to make scipy a dependency of plotly, or improve the verbosity of the 'optional_imports' routine.","comments":["Thanks for bringing this up @aberndsen , and for diagnosing the issue.\r\n\r\nYeah, the `create_violin` figure factory should check to make sure it's dependencies are available and say something helpful if not.\r\n\r\nAs a side note, in case you weren't aware, Plotly now has a first class violin trace (https:\/\/plot.ly\/python\/violin\/) that's more flexible than the legacy figure factory approach here."],"labels":["documentation"]},{"title":"Blank plot in html using nbconvert (basic template)","body":"Hi everyone,\r\n\r\nI know that to convert a jupyter notebook (.ipynb) to an html I can use this command :\r\n\r\n`jupyter nbconvert --to html --template full myNotebook.ipynb`\r\n\r\nIn this case I can successfully see my plot in the resulting html (myNotebook_full.html in \r\n[myNotebook.zip](https:\/\/github.com\/plotly\/plotly.py\/files\/2103910\/myNotebook.zip)).\r\n\r\nHowever, when I am trying to convert it using the basic template, there is a blank space instead of the plot \r\n\r\n(myNotebook_basic.html in [myNotebook.zip](https:\/\/github.com\/plotly\/plotly.py\/files\/2103910\/myNotebook.zip)).\r\n\r\n`jupyter nbconvert --to html --template basic myNotebook.ipynb`\r\n\r\n![missing](https:\/\/user-images.githubusercontent.com\/37963074\/41436904-1b0388e0-6ff1-11e8-8fa3-8f3097977109.png)\r\n\r\nDo you have an idea why ?\r\n\r\nThanks all for your work and support !\r\n","comments":["I finally managed to resolve my issue.\r\nI just needed to include the following scripts at the top of my .html template file :\r\n```\r\n<script src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/require.js\/2.1.10\/require.min.js\"><\/script>\r\n<script src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/jquery\/2.0.3\/jquery.min.js\"><\/script>\r\n```","For Sphinx docs that use themes without jQuery on `<head>`, this workaround is fragile and does not always work in all browsers or all the times. We are tracking it accross several places:\r\n\r\nspatialaudio\/nbsphinx#128, poliastro\/poliastro#281, rtfd\/readthedocs.org#4367\r\n\r\nPerhaps this is something that could be worked on the Plotly side? Could we please reopen this?","Hi @Juanlu001, sure we can reopen this.\r\n\r\nSo it looks to me like the JavaScript block emitted by plotly.py on `init_notebook_mode` expects `requirejs` to be active, but I don't see how it's using or altering jquery.\r\n\r\nhttps:\/\/github.com\/plotly\/plotly.py\/blob\/1e4a3c7e1cfc5a8e40a847e7242ed54b20a9050b\/plotly\/offline\/offline.py#L129-L141\r\n\r\nCould you summarize your current understanding of what's going wrong?\r\n\r\nAnother approach would be to use the fact the `FigureWidget` is an ipywidget.  I've successfully embedded `FigureWidget` instances for nbviewer, and it's supposed to be possible in sphinx as well (https:\/\/ipywidgets.readthedocs.io\/en\/stable\/embedding.html) though I haven't tried that yet.\r\n","> Could you summarize your current understanding of what's going wrong?\r\n\r\nYes! Please read my comment here:\r\n\r\nhttps:\/\/github.com\/rtfd\/readthedocs.org\/issues\/4367#issuecomment-423814712","Hi @Juanlu001, just following up. I haven't studied the thread in detail, but it seems like folks are making progress on the RTD side.  Is there anything you see at this point that you need from plotly.py?","@jonmmease Thanks! Progress is slow but I think it's been acknowledged that it's an issue on the RTD side - let's hope someone gives it the final push.","Just for your information, I found that using holoviews method as follows fixed the exporting issue, even if I'm not using holoviews in the notebook at all (you'll need to `conda install` or `pip install` a compatible holoviews)\r\n\r\n```python\r\nimport holoviews as hv\r\nhv.extension('plotly')\r\n```"],"labels":["question"]},{"title":"Add plot config options to display bundle so they are available to JupyterLab and nteract","body":"Hello,\r\n\r\nI'm currently working on data that cannot go online. I noticed the other day a button \"edit in Chart Studio\".\r\nI tried to remove it using this tutorial in your documentation: https:\/\/plot.ly\/python\/configuration-options\/\r\nbut even with the following code:\r\n```\r\nconfig={'showLink': False}\r\niplot(data, config=config)\r\n```\r\n\r\nthe button stays.\r\n\r\nIs there a step that I forgot ? I'd really appreciate some help to remove it.\r\n\r\nThank you,\r\n\r\nMichael","comments":["Hi there,\r\nCan you confirm that you're using an updated version of the python api and also that you're in offline mode (as mentioned in the [doc](https:\/\/plot.ly\/python\/configuration-options\/) these are offline configuration options only so with online you can edit the options via the iframe query string)\r\n\r\n<img width=\"1026\" alt=\"screen shot 2018-06-04 at 11 54 58 am\" src=\"https:\/\/user-images.githubusercontent.com\/2789078\/40928251-d8a6aa40-67ee-11e8-9e3d-5928b5367f9b.png\">\r\n","I was on 2.5.x, I updated it, and I am now on the same version as you.\r\n\r\nIt still doesn't work. I tried on JLab and Notebook, they both still have the floppy disk that says \"edit in Chart Studio\". (By the way, on your screenshot you have it too, I don't know if that's normal).\r\nThe floppy disk is clickable.","i guess this works to avoid online features completely.\r\n\r\n`config = {'showLink': False, 'displaylogo':False, 'modeBarButtonsToRemove':['sendDataToCloud']}`\r\n","you're right. It works well on Jupyter Notebook, but the same code doesn't work on JLab","Thanks @rysktky , that worked perfectly.","Thanks for digging into this @MichaelHalfon and @rysktky.  @rysktky 's solution above is the right way to handle this in `offline.iplot` in the classic notebook, and in `offline.plot` from anywhere.\r\n\r\nFor `offline.iplot` in JupyterLab things work a bit differently, in this case plotly.py doesn't construct the raw HTML to render the figure, but instead passes the `data`\/`layout`\/`frames` data structure to the front end in a display bundle, and this is then rendered by the [`@jupyterlab\/plotly-extension`](https:\/\/github.com\/jupyterlab\/jupyter-renderers\/tree\/master\/packages\/plotly-extension) extension.  At the moment, the config options aren't included in the display bundle and so they aren't available to `@jupyterlab\/plotly-extension`.\r\n\r\nTo support this, plotly.py will need to add the config options to the display bundle data structure and `@jupyterlab\/plotly-extension` will need to check for the presence of config options before creating the plot.  Similarly, to support config options in nteract, the nteract renderer would need to check for these options as well."],"labels":["enhancement"]},{"title":"Correct 2d_density doc string","body":"`from plotly.figure_factory create_2d_density` should be `from plotly.figure_factory import create_2d_density`\r\n\r\nlowercase the `D` in `d` for `fig = create_2D_density(x, y)`:\r\n\r\n******************************\r\nExample 1: Simple 2D Density Plot\r\n```\r\nimport plotly.plotly as py\r\nfrom plotly.figure_factory create_2d_density\r\n\r\nimport numpy as np\r\n\r\n# Make data points\r\nt = np.linspace(-1,1.2,2000)\r\nx = (t**3)+(0.3*np.random.randn(2000))\r\ny = (t**6)+(0.3*np.random.randn(2000))\r\n\r\n# Create a figure\r\nfig = create_2D_density(x, y)\r\n\r\n# Plot the data\r\npy.iplot(fig, filename='simple-2d-density')\r\n```\r\n\r\nExample 2: Using Parameters\r\n```\r\nimport plotly.plotly as py\r\nfrom plotly.figure_factory create_2d_density\r\n\r\nimport numpy as np\r\n\r\n# Make data points\r\nt = np.linspace(-1,1.2,2000)\r\nx = (t**3)+(0.3*np.random.randn(2000))\r\ny = (t**6)+(0.3*np.random.randn(2000))\r\n\r\n# Create custom colorscale\r\ncolorscale = ['#7A4579', '#D56073', 'rgb(236,158,105)',\r\n              (1, 1, 0.2), (0.98,0.98,0.98)]\r\n\r\n# Create a figure\r\nfig = create_2D_density(\r\n    x, y, colorscale=colorscale,\r\n    hist_color='rgb(255, 237, 222)', point_size=3)\r\n\r\n# Plot the data\r\npy.iplot(fig, filename='use-parameters')\r\n```","comments":[],"labels":["documentation"]},{"title":"Support custom hover text in create_choropleth figure factory","body":"Hi Team ,\r\nI was able to create county choropleth map using create_choropleth function ( https:\/\/plot.ly\/python\/county-choropleth\/ ).\r\n\r\nWhen we hover over county it shows data using..... (as shown below)  \r\nCounty \r\nState \r\nFIPS \r\nValue tag.\r\n\r\nIs there a way to customized this text so that it display only county name and another tag attribute with value ?\r\nFor example :- \r\nCounty : Westmoreland \r\nPopulation : Value1 \r\nDisease Count : Value2.","comments":["Right now these values and tags are hard-coded into the figure factory so unfortunately you cannot easily do this at the time. They are coded as shown below:\r\n\r\n```\r\nt_c = (\r\n    'County: ' + county_name_str + '<br>' +\r\n    'State: ' + state_name_str + '<br>' +\r\n    'FIPS: ' + padded_f + '<br>Value: ' + str(values[index])\r\n)\r\n```\r\n\r\nFor now you could write a script that will parse through all the data in your figure and pick out the ones that contain `text` as a parameter (i.e. the hoverdata), then replace the text with whatever you want.\r\n\r\nHope this helps.","Here's an example that elaborates on @Kully 's suggestion. It's based on the first example from https:\/\/plot.ly\/python\/county-choropleth\/. Here I construct the figure using `create_choropleth` as before, but then I modify the hover trace's text (to remove FIPS and add an `Other` value) before displaying it.\r\n\r\n```python\r\nfips = ['06021', '06023', '06027',\r\n        '06029', '06033', '06059',\r\n        '06047', '06049', '06051',\r\n        '06055', '06061']\r\n\r\nvalues1 = range(len(fips))\r\nvalues2 = range(100, 100+ len(fips))\r\n\r\nfig = ff.create_choropleth(fips=fips, values=values)\r\n\r\n# Modify tooltip\r\nhover_trace = [t for t in fig['data'] if 'text' in t][0]\r\nfor i, label in enumerate(hover_trace['text']):\r\n    \r\n    # Remove FIPS\r\n    new_label = label.replace(\"FIPS: %s<br>\" % fips[i], \"\")\r\n    \r\n    # Add a new value\r\n    new_label += \"<br>Other: %d\" % values2[i]\r\n    \r\n    # Update trace text\r\n    hover_trace['text'][i] = new_label\r\n\r\niplot(fig)\r\n```\r\n<img width=\"1022\" alt=\"screen shot 2018-06-04 at 9 04 06 am\" src=\"https:\/\/user-images.githubusercontent.com\/15064365\/40919083-6aef7d00-67d6-11e8-860e-3bafb4d6cb31.png\">\r\n\r\nIt probably would make sense to make it possible to customize this text directly in `create_choropleth` in the future, but hopefully this example shows how you can work around that in the meantime.\r\n","Just checking if any update has been made to alow a cutomised hovertemplate in FF?"],"labels":["enhancement"]},{"title":"subplot_titles posisiong value goes negative when shared axes is True and start_cell is bottom-left ","body":"Hi I just fund code like this does not work as described on the title.\r\nI could not find anything relevant about this.\r\nI am trying to find a workaround, but could there be simple solution?\r\n\r\nusing python3.6 with fedora 28.\r\ninstalled plotly with pip.\r\n\r\nRegards\r\n\r\n\r\n***sample code***\r\n#Added \"vertical_spacing=0.00\" to simplified the calculation as per plotly.py\/plotly\/tootls.py\r\n\r\n```\r\nfrom plotly import tools\r\nimport plotly.offline as py\r\nimport plotly.graph_objs as go\r\n\r\ntrace0 = go.Scatter( x=[1, 2], y=[1, 2])\r\ntrace1 = go.Scatter( x=[1, 2], y=[5, 3])\r\ntrace2 = go.Scatter( x=[1, 2, 3], y=[2, 1, 2])\r\n\r\nfig = tools.make_subplots(rows=3, cols=1, \r\n                          shared_xaxes=True,\r\n                          start_cell='bottom-left',\r\n                          vertical_spacing=0.00,\r\n                          subplot_titles=('First Subplot','Second Subplot', 'Third Subplot'))\r\n\r\nfig.append_trace(trace0, 1, 1)\r\nfig.append_trace(trace1, 2, 1)\r\nfig.append_trace(trace2, 3, 1)\r\n\r\nfig['layout'].update(showlegend=False, title='Specs with Subplot Title')\r\npy.plot(fig, filename='custom-sized-subplot-with-subplot-titles')\r\n```\r\n\r\n\r\n***pprint'ed the layout***\r\n```\r\n>>> pprint.pprint(fig['layout'])\r\n{'annotations': [{'font': {'size': 16},\r\n                  'showarrow': False,\r\n                  'text': 'First Subplot',\r\n                  'x': 0.5,\r\n                  'xanchor': 'center',\r\n                  'xref': 'paper',\r\n                  'y': 1.0,     <<<< This is GOOD.\r\n                  'yanchor': 'bottom',\r\n                  'yref': 'paper'},\r\n                 {'font': {'size': 16},\r\n                  'showarrow': False,\r\n                  'text': 'Second Subplot',\r\n                  'x': 0.5,\r\n                  'xanchor': 'center',\r\n                  'xref': 'paper',\r\n                  y': 0.0,     <<< 2nd subplot title is already at ZERO and it is shown on the bottom.\r\n                  'yanchor': 'bottom',\r\n                  'yref': 'paper'},\r\n                 {'font': {'size': 16},\r\n                  'showarrow': False,\r\n                  'text': 'Third Subplot',\r\n                  'x': 0.5,\r\n                  'xanchor': 'center',\r\n                  'xref': 'paper',\r\n                  'y': -1.0,     <<< It has negative value and does not get actually shown.\r\n                  'yanchor': 'bottom',\r\n                  'yref': 'paper'}],\r\n 'xaxis1': {'anchor': 'y1', 'domain': [0.0, 1.0]},\r\n 'yaxis1': {'anchor': 'x1', 'domain': [0.0, 0.3333333333333333]},\r\n 'yaxis2': {'anchor': 'free',\r\n            'domain': [0.3333333333333333, 0.6666666666666666],\r\n            'position': 0.0},\r\n 'yaxis3': {'anchor': 'free',\r\n            'domain': [0.6666666666666666, 1.0],\r\n            'position': 0.0}}\r\n```\r\n\r\n***It seems it is coming from this part of plotly.py\/plotly\/tootls.py***\r\n```\r\n1303     # Add subplot titles\r\n1304 \r\n1305     # If shared_axes is False (default) use list_of_domains\r\n1306     # This is used for insets and irregular layouts\r\n1307     if not shared_xaxes and not shared_yaxes:\r\n1308         x_dom = list_of_domains[::2]\r\n1309         y_dom = list_of_domains[1::2]\r\n1310         subtitle_pos_x = []\r\n1311         subtitle_pos_y = []\r\n1312         for x_domains in x_dom:\r\n1313             subtitle_pos_x.append(sum(x_domains) \/ 2)\r\n1314         for y_domains in y_dom:\r\n1315             subtitle_pos_y.append(y_domains[1])\r\n1316     # If shared_axes is True the domin of each subplot is not returned so the\r\n1317     # title position must be calculated for each subplot\r\n1318     else:\r\n1319         subtitle_pos_x = [None] * cols\r\n1320         subtitle_pos_y = [None] * rows\r\n1321         delt_x = (x_e - x_s)\r\n1322         for index in range(cols):\r\n1323             subtitle_pos_x[index] = ((delt_x \/ 2) +\r\n1324                                      ((delt_x + horizontal_spacing) * index))\r\n1325         subtitle_pos_x *= rows\r\n1326         for index in range(rows):\r\n1327             subtitle_pos_y[index] = (1 - ((y_e + vertical_spacing) * index))\r\n1328         subtitle_pos_y *= cols\r\n1329         subtitle_pos_y = sorted(subtitle_pos_y, reverse=True) \r\n```\r\n\r\n**How the result look like** \r\nPlease remember it has vertical_spacing=0.00. There are 3 subplots stacked vertically here...\r\n![newplot](https:\/\/user-images.githubusercontent.com\/39027949\/39674024-d112db48-5180-11e8-9350-8184f516f889.png)\r\n","comments":["I guess this works\r\n\r\nCould some one verify too?\r\n\r\n```\r\n--- a\/plotly\/tools.py\r\n+++ b\/plotly\/tools.py\r\n@@ -1324,9 +1324,15 @@ def make_subplots(rows=1, cols=1,\r\n                                      ((delt_x + horizontal_spacing) * index))\r\n         subtitle_pos_x *= rows\r\n         for index in range(rows):\r\n-            subtitle_pos_y[index] = (1 - ((y_e + vertical_spacing) * index))\r\n+            if ROW_DIR > 0:\r\n+                subtitle_pos_y[index] = (1 - ((y_e\/rows + vertical_spacing\/rows) * index))\r\n+            else:\r\n+                subtitle_pos_y[index] = (1 - ((y_e + vertical_spacing) * index))\r\n         subtitle_pos_y *= cols\r\n-        subtitle_pos_y = sorted(subtitle_pos_y, reverse=True)\r\n+        if ROW_DIR > 0:\r\n+            subtitle_pos_y = sorted(subtitle_pos_y, reverse=False)\r\n+        else:\r\n+            subtitle_pos_y = sorted(subtitle_pos_y, reverse=True)\r\n\r\n     plot_titles = []\r\n     for index in range(len(subplot_titles)):\r\n\r\n```","Just opened pullrequest #1005 for this.","This will be fixed in version 4 by https:\/\/github.com\/plotly\/plotly.py\/pull\/1528.\r\n\r\nYou can try out the new behavior using the `v4_subplot` future flag.\r\n```python\r\nfrom _plotly_future_ import v4_subplots\r\nfrom plotly import tools\r\nimport plotly.offline as py\r\nimport plotly.graph_objs as go\r\n\r\ntrace0 = go.Scatter( x=[1, 2], y=[1, 2])\r\ntrace1 = go.Scatter( x=[1, 2], y=[5, 3])\r\ntrace2 = go.Scatter( x=[1, 2, 3], y=[2, 1, 2])\r\n\r\nfig = tools.make_subplots(rows=3, cols=1, \r\n                          shared_xaxes=True,\r\n                          start_cell='bottom-left',\r\n                          vertical_spacing=0.00,\r\n                          subplot_titles=('First Subplot','Second Subplot', 'Third Subplot'))\r\n\r\nfig.append_trace(trace0, 1, 1)\r\nfig.append_trace(trace1, 2, 1)\r\nfig.append_trace(trace2, 3, 1)\r\n\r\nfig['layout'].update(showlegend=False, title='Specs with Subplot Title')\r\npy.plot(fig, filename='custom-sized-subplot-with-subplot-titles')\r\n```\r\n![newplot-4](https:\/\/user-images.githubusercontent.com\/15064365\/57070101-6cf5df80-6ca4-11e9-81a5-24507d6f0b5e.png)\r\n\r\n\r\n\r\n"],"labels":["bug","make_subplots","V4"]},{"title":"Error when trying to export maplotlib with imshow and colorbar  to plotly","body":"plotly: 2.0.0\r\nmatplotlib: 2.2.2\r\npython: 3.6.3\r\nOS: Ubuntu LST 14.04 LTS\r\n\r\nCode:\r\n```\r\nimport matplotlib.pylab as plt\r\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\r\nimport numpy as np\r\n\r\n# Plotly\r\nimport plotly\r\nimport plotly.plotly as py\r\nimport plotly.tools as tls\r\n\r\nirs_ = np.random.random_integers(0, 255, (200, 200, 4))\r\nfig, axes = plt.subplots(2, 2)\r\nfor i, ax in enumerate(axes.ravel()):\r\n    im = ax.imshow(irs_[:, :, i])\r\n    divider = make_axes_locatable(ax)\r\n    cax = divider.append_axes(\"right\", size=\"5%\", pad=0.05)\r\n    plt.colorbar(im, cax=cax)\r\n    ax.set_title('Image #{}'.format(i))\r\nplt.tight_layout()\r\nplotly_fig = tls.mpl_to_plotly(fig)\r\nplotly.offline.plot(plotly_fig, filename='file.html')\r\nplt.show()\r\n```\r\n\r\nResulting errors:\r\n```\r\nAw. Snap! You're gonna have to hold off on the selfies for now. Plotly can't import images from matplotlib yet!\r\nDang! That path collection is out of this world. I totally don't know what to do with it yet! Plotly can only import path collections linked to 'data' coordinates\r\n```\r\n\r\nIs this due to plotly not support imshow conversion to matplotlib?\r\n","comments":["Definitely interested in this feature as well","need this feature for an interactive dashboard, very sad its still not there :(","We're not really maintaining the matplotlib conversion code very much these days, but there is a `px.imshow()` method within Plotly now, so you could give that a try: https:\/\/plotly.com\/python\/imshow\/"],"labels":["matplotlylib"]},{"title":"Visualization of text annotations ","body":"Does Plotly have examples for text annotation visualization? \r\nHere is an example from here: http:\/\/nlp.cogcomp.org\/ \r\n<img width=\"339\" alt=\"screen shot 2018-04-29 at 11 34 59 am\" src=\"https:\/\/user-images.githubusercontent.com\/2441454\/39408253-6c66470a-4ba1-11e8-8a63-da824da35bbc.png\">\r\n\r\nBasically, the goal is to create such graphs (text, some spans, and their edges), for a given text and its annotation **on the fly**. \r\n\r\n\r\nIf you have something like this, better to make it more explicit and highlight it since this would bring so attention from AI and Natural Language Processing community to your library. \r\n\r\n","comments":[],"labels":["enhancement"]},{"title":"Plot rendering becomes very slow with many images","body":"I am trying to use plotly's `Scatter` to plot around 3000 RGB images of size 32x32 <br>(or about 3\\*32\\*32\\*3000=~9 MB of data total).\r\n\r\nplotly becomes very slow when I try to do this.  I don't think this is too much data to display (because D3 examples like [this](https:\/\/cs.stanford.edu\/people\/karpathy\/tsnejs\/) run fine), but the renderer seems to be handling it especially poorly.  I recorded a gif (below) of trying to explore the data, and a few things to notice are how it is generally laggy and how during zooming or panning, the images momentarily correspond with the wrong points in the graph.  This second point makes me think there is some inefficiency that may be a relatively easy fix to get better performance, but I'm not sure.\r\n\r\nBasically, my point in raising this Issue is to ask:\r\n- Is there a different way I should be doing this, that could be added to [this documentation](https:\/\/plot.ly\/python\/images\/#add-multiple-images)? Or is this the best\/only way in plotly, and I should use something else for now?\r\n- Are there any plans or could there be plans made to support more performant image displaying? \r\n\r\nThanks! :slightly_smiling_face: \r\n\r\n\r\n\r\n![slow_plotly](https:\/\/user-images.githubusercontent.com\/19582683\/37870257-55da6fea-2f8e-11e8-99b0-47362431b611.gif)\r\n\r\nHere is the snippet of code that I am using to plot.\r\n\r\n```python\r\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\r\nimport plotly.graph_objs as go\r\ninit_notebook_mode(connected=True)\r\n\r\n\r\ndef get_images(path=data_path):\r\n    \"\"\"return a list of dictionaries for all images\"\"\"\r\n    x=X_tsne[:,0]\r\n    y=X_tsne[:,1]\r\n    max_x = np.max(x)\r\n    max_y = np.max(x)\r\n    \r\n    for i in range(len(x)):\r\n        d = dict(\r\nxref=\"x\",\r\n            yref=\"y\",\r\n            sizex=max_x\/10,\r\n            sizey=max_y\/10,\r\n            xanchor=\"center\",\r\n            yanchor=\"middle\",\r\n            x=x[i],\r\n            y=y[i],\r\n            source=get_thumbnail_path(i),\r\n        )\r\n        dlist.append(d)\r\n        \r\n    return dlist\r\n\r\nimages = get_images()\r\n\r\n# plot all points from tsne\r\ntrace=go.Scatter(\r\n    x=X_tsne[:,0],\r\n    y=X_tsne[:,1],\r\n    mode='markers',\r\n    marker= dict(size= 14,\r\n                line= dict(width=1),\r\n                opacity= 0.0\r\n               ),\r\n    text=names)\r\n\r\n# layout with images, where each image corresponds with a data point\r\nlayout=go.Layout(\r\n    images=images,\r\n    title= 't-SNE',\r\n    hovermode='closest',\r\n    showlegend= False\r\n)\r\nfig = go.Figure(data=[trace], layout=layout)\r\niplot(fig)\r\n```\r\n\r\n","comments":["Checkout below link\r\n\r\nhttps:\/\/github.com\/YaleDHLab\/pix-plot\/"],"labels":["performance","plotly.js"]},{"title":"setup.py test - `TypeError: clientresp() missing 1 required positional argument: 'data'`","body":"Trying to run the tests, I get\r\n\r\n```\r\n$ python setup.py test\r\nrunning test\r\nrunning egg_info\r\nwriting plotly.egg-info\/PKG-INFO\r\nwriting dependency_links to plotly.egg-info\/dependency_links.txt\r\nwriting requirements to plotly.egg-info\/requires.txt\r\nwriting top-level names to plotly.egg-info\/top_level.txt\r\nreading manifest file 'plotly.egg-info\/SOURCES.txt'\r\nwriting manifest file 'plotly.egg-info\/SOURCES.txt'\r\nrunning build_ext\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 55, in <module>\r\n    zip_safe=False)\r\n  File \"\/usr\/local\/lib\/python3.6\/site-packages\/setuptools\/__init__.py\", line 129, in setup\r\n    return distutils.core.setup(**attrs)\r\n  File \"\/usr\/local\/Cellar\/python\/3.6.4_3\/Frameworks\/Python.framework\/Versions\/3.6\/lib\/python3.6\/distutils\/core.py\", line 148, in setup\r\n    dist.run_commands()\r\n  File \"\/usr\/local\/Cellar\/python\/3.6.4_3\/Frameworks\/Python.framework\/Versions\/3.6\/lib\/python3.6\/distutils\/dist.py\", line 955, in run_commands\r\n    self.run_command(cmd)\r\n  File \"\/usr\/local\/Cellar\/python\/3.6.4_3\/Frameworks\/Python.framework\/Versions\/3.6\/lib\/python3.6\/distutils\/dist.py\", line 974, in run_command\r\n    cmd_obj.run()\r\n  File \"\/usr\/local\/lib\/python3.6\/site-packages\/setuptools\/command\/test.py\", line 226, in run\r\n    self.run_tests()\r\n  File \"\/usr\/local\/lib\/python3.6\/site-packages\/setuptools\/command\/test.py\", line 248, in run_tests\r\n    exit=False,\r\n  File \"\/usr\/local\/Cellar\/python\/3.6.4_3\/Frameworks\/Python.framework\/Versions\/3.6\/lib\/python3.6\/unittest\/main.py\", line 94, in __init__\r\n    self.parseArgs(argv)\r\n  File \"\/usr\/local\/Cellar\/python\/3.6.4_3\/Frameworks\/Python.framework\/Versions\/3.6\/lib\/python3.6\/unittest\/main.py\", line 118, in parseArgs\r\n    self._do_discovery(argv[2:])\r\n  File \"\/usr\/local\/Cellar\/python\/3.6.4_3\/Frameworks\/Python.framework\/Versions\/3.6\/lib\/python3.6\/unittest\/main.py\", line 229, in _do_discovery\r\n    self.test = loader.discover(self.start, self.pattern, self.top)\r\n  File \"\/usr\/local\/Cellar\/python\/3.6.4_3\/Frameworks\/Python.framework\/Versions\/3.6\/lib\/python3.6\/unittest\/loader.py\", line 341, in discover\r\n    tests = list(self._find_tests(start_dir, pattern))\r\n  File \"\/usr\/local\/Cellar\/python\/3.6.4_3\/Frameworks\/Python.framework\/Versions\/3.6\/lib\/python3.6\/unittest\/loader.py\", line 398, in _find_tests\r\n    full_path, pattern, namespace)\r\n  File \"\/usr\/local\/Cellar\/python\/3.6.4_3\/Frameworks\/Python.framework\/Versions\/3.6\/lib\/python3.6\/unittest\/loader.py\", line 475, in _find_test_path\r\n    tests = self.loadTestsFromModule(package, pattern=pattern)\r\n  File \"\/usr\/local\/lib\/python3.6\/site-packages\/setuptools\/command\/test.py\", line 52, in loadTestsFromModule\r\n    tests.append(self.loadTestsFromName(submodule))\r\n  File \"\/usr\/local\/Cellar\/python\/3.6.4_3\/Frameworks\/Python.framework\/Versions\/3.6\/lib\/python3.6\/unittest\/loader.py\", line 190, in loadTestsFromName\r\n    return self.loadTestsFromModule(obj)\r\n  File \"\/usr\/local\/lib\/python3.6\/site-packages\/setuptools\/command\/test.py\", line 52, in loadTestsFromModule\r\n    tests.append(self.loadTestsFromName(submodule))\r\n  File \"\/usr\/local\/Cellar\/python\/3.6.4_3\/Frameworks\/Python.framework\/Versions\/3.6\/lib\/python3.6\/unittest\/loader.py\", line 190, in loadTestsFromName\r\n    return self.loadTestsFromModule(obj)\r\n  File \"\/usr\/local\/lib\/python3.6\/site-packages\/setuptools\/command\/test.py\", line 52, in loadTestsFromModule\r\n    tests.append(self.loadTestsFromName(submodule))\r\n  File \"\/usr\/local\/Cellar\/python\/3.6.4_3\/Frameworks\/Python.framework\/Versions\/3.6\/lib\/python3.6\/unittest\/loader.py\", line 204, in loadTestsFromName\r\n    test = obj()\r\nTypeError: clientresp() missing 1 required positional argument: 'data'\r\n```\r\n\r\nI am working off the master branch at commit, \r\n```\r\n$ git log | head -1\r\ncommit 86d5e6b1453c3c865999134c65ac7c0c7f1c2ecc\r\n```","comments":["Hi @aidan-plenert-macdonald , thanks for your interest in testing \ud83d\ude42  The tests have been reworked quite a bit since the version 3 release. If you're still interested, could you give it a try again with the current master?","Actually, I think the issue is the `python setup.py test` command. We run our tests using a combination of `nosetests` and `pytest`. See commands in `tox.ini`.  That said, it would be nice if `python setup.py test` did the right thing, but I haven't looked into how to configure this.","I believe this issue is deprecated since tests are now run on pytest"],"labels":["testing"]},{"title":"Feature request: prevent scatter text overlap","body":"It would be useful to have a setting to exclude text labels from being graphed if they would overlap with other labels.\r\n![newplot 13](https:\/\/user-images.githubusercontent.com\/8195040\/35353600-a45e6e84-0115-11e8-99be-62172c7bedd0.png)\r\n\r\n\r\nFor instance, ggplot2 in R has a check_overlap parameter - when true, it produces a graph like this:\r\n![hyp](https:\/\/user-images.githubusercontent.com\/8195040\/35353569-90751a4e-0115-11e8-91dd-bd44e2abfcea.png)\r\n","comments":["See https:\/\/github.com\/plotly\/plotly.js\/issues\/4674","One solution is to alternate the text position [like in this live demo][1]: \r\n\r\n```python\r\n    import pandas as pd\r\n    from plotly import express as px, graph_objects as go\r\n    \r\n    df = pd.DataFrame()\r\n    df['x'] = [0, 1, 1, 2, 3, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11, 12]\r\n    df['y'] = [57, 55, 75, 23, 80, 66, 66, 23, 79, 79, 20, 71, 59, 74, 82, 77]\r\n    df['explainer_name'] = ['tree_shap_approximation', 'saabas', 'tree_shap', 'baseline_random', 'archipelago',\r\n                            'shapley_taylor_interaction', 'partition', 'anova', 'permutation_partition', 'permutation',\r\n                            'shap_interaction', 'sage', 'maple', 'lime', 'kernel_shap', 'exact_shapley_values']\r\n    \r\n    fig = px.scatter(df,\r\n                         x='x',\r\n                         y='y',\r\n                         # size='dot_size',\r\n                         text='explainer_name',\r\n                         # log_x=True,\r\n                         labels={\r\n                             \"x\": \"Time\",\r\n                             \"y\": \"Score\",\r\n                             # 'dot_size': 'Portability',\r\n                             'explainer_name': 'Explainer '\r\n                         },\r\n                         title='No overlapping annotations',  # take some vertical space\r\n                         )\r\n    def improve_text_position(x):\r\n        \"\"\" it is more efficient if the x values are sorted \"\"\"\r\n    positions = ['top center', 'bottom center']  # you can add more: left center ...\r\n    return [positions[i % len(positions)] for i in range(len(x))]\r\n    \r\n    fig.update_traces(textposition=improve_text_position(df['x']))\r\n    fig.show()\r\n```\r\n\r\nBefore:\r\n[![enter image description here][2]][2]\r\n\r\nAfter:\r\n[![enter image description here][3]][3]\r\n\r\nIt might not work with a lot of points but it should help many users :)\r\n\r\n  [1]: https:\/\/4805.short.gy\/cxai_Overview_Plot\r\n  [2]: https:\/\/i.stack.imgur.com\/yYD6R.png\r\n  [3]: https:\/\/i.stack.imgur.com\/EIrzw.png\r\n"],"labels":["enhancement","\u2665 NEEDS SPON$OR"]},{"title":"[MPL conversion] Offline plot does not show legend correctly","body":"Using `plotly.offline.plot_mpl`, I am not able to create an interactive legend. In fact, the legend entries simply appear as text, without the matching line or symbol key.\r\n\r\n`plotly 2.2.2`\r\n`matplotlib 2.1.0`\r\n\r\nHere is my code:\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport plotly.offline\r\n\r\nfig, ax = plt.subplots()\r\n\r\nax.plot([0, 1, 2], [0, 1, 2], 'o-', label='a')\r\nax.plot([0, 1, 2], [0.5, 1.5, 2.5], 'o-', label='b')\r\n\r\nax.legend()\r\n\r\nplotly.offline.plot_mpl(fig, filename='temp-plot.html')\r\n```\r\n\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/11261876\/34643722-2c28e4e4-f37d-11e7-92e6-582b03b18429.png)\r\n  ","comments":["Oops, sorry I think we have different problem.\r\n\r\nIf you use figure, I believe you need `show_colorbar=True`  to use legend?\r\n\r\nmy situation is I have legend on my plot, but the toggle simply not working\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/3409397\/34805075-f2f6616e-f6b6-11e7-9d5b-9daa7efe8931.png)\r\n\r\n########################################\r\nSimilar situation, but I suspected not because offline?\r\n\r\nsituation 1: all gantt example can't toggle legend\r\nhttps:\/\/plot.ly\/python\/gantt\/#using-hours-and-minutes-in-times\r\n\r\nsituation 2: I tried my own offline gantt, can't toggle\r\n\r\nsituation 3: tried other offline example, it can toggle\r\nhttps:\/\/plot.ly\/python\/offline\/#plotting-offline-with-cufflinks\r\n\r\n\r\nanyway, just want my offline gantt can toggle legend...\r\n\r\n\r\n```\r\nfig = ff.create_gantt(df, colors=colors, index_col='Resource', title='Daily Schedule',\r\n                      show_colorbar=True, bar_width=0.8, showgrid_x=True, showgrid_y=True, group_tasks=True)\r\n\r\nplotly.offline.plot(fig, filename='gantt-hours-minutes.html')\r\n```","> my situation is I have legend on my plot, but the toggle simply not working\r\n\r\nI reported a separate issue https:\/\/github.com\/plotly\/plotly.py\/issues\/1371 so this can stay focused on the `plot_mpl` issue.","Getting same issue using pandas plot method:\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport plotly\r\nimport pandas as pd\r\n\r\ntime = range(20)\r\ny1 = []\r\ny2 = []\r\nfor i in time:\r\n    y1.append(i**1.5)\r\n    y2.append(i**2)\r\ndata = {'y1': y1,\r\n        'y2': y2}\r\ndf = pd.DataFrame(data)\r\n\r\nfig = plt.figure(figsize=(9, 5))\r\nax = fig.gca()\r\ndf.plot(legend=True, ax=ax)\r\nax.set_xlabel('x-label')\r\nax.set_ylabel('y-label')\r\nlgd = plt.legend(loc='lower right', shadow=True, title='legend', fancybox=True)\r\nlgd.get_frame().set_alpha(0.5)\r\nplt.show()\r\nplotly.offline.plot_mpl(fig, filename='.\/plt_fig.html', auto_open=False)\r\n```\r\n\r\n![plotly](https:\/\/user-images.githubusercontent.com\/39605888\/59357449-e4357f00-8cf8-11e9-9a9b-cd1795f90830.PNG)\r\n\r\n","Getting the same issue... It has almost been 2 yrs since this was opened. Any updates\/suggestions? \r\n\r\n# Code to reproduce \r\n\r\n```bash\r\n$ pip install bilby\r\n```\r\n\r\n```python\r\nfrom __future__ import division, print_function\r\n\r\nimport bilby \r\nimport matplotlib.pyplot as plt\r\nimport plotly\r\nimport plotly.tools as tls\r\nimport plotly.graph_objects as go\r\nfrom matplotlib.ticker import (AutoMinorLocator)\r\n\r\napproximants = [\"IMRPhenomPv2\", \"SEOBNRv4\"]\r\n\r\ninjection_parameters = dict(\r\n    mass_1=141.0741,\r\n    mass_2=113.0013,\r\n    a_1=0.9434,\r\n    a_2=0.2173,\r\n    tilt_1=0,\r\n    tilt_2=0,\r\n    phi_jl=0,\r\n    phi_12=0,\r\n    luminosity_distance=1782.1610,\r\n    theta_jn=0.9614,\r\n    psi=1.6831,\r\n    phase=5.2220,\r\n    geocent_time=1242424473.5880,\r\n    ra=0.9978,\r\n    dec=-0.4476\r\n)\r\n\r\n\r\ndef get_data(approximants, injection_parameters):\r\n    generator_args = dict(\r\n        duration=4,\r\n        sampling_frequency=2048.,\r\n        frequency_domain_source_model=bilby.gw.source.lal_binary_black_hole,\r\n        parameters=injection_parameters\r\n    )\r\n\r\n    waveform_args = dict(reference_frequency=50.)\r\n\r\n    approximant_data = dict()\r\n    for approximant in approximants:\r\n        waveform_args.update(dict(waveform_approximant=approximant))\r\n        generator_args.update(waveform_arguments=waveform_args)\r\n        generator = bilby.gw.WaveformGenerator(**generator_args)\r\n        h_signal = generator.time_domain_strain(injection_parameters)\r\n        h_time = generator.time_array\r\n        approximant_data.update({approximant: dict(x=h_time, y=h_signal['plus'])})\r\n    return approximant_data\r\n\r\n\r\ndef matplot_plot_data(approximant_data):\r\n    fig, ax = plt.subplots()\r\n\r\n    for approximant, data in approximant_data.items():\r\n        ax.plot(data['x'], data['y'], label=approximant)\r\n\r\n    ax.xaxis.set_minor_locator(AutoMinorLocator())\r\n    ax.set_title('Comparing Time-Domain Data')\r\n    ax.set_ylabel('Strain')\r\n    ax.set_xlabel('Time (s)')\r\n    ax.legend()\r\n    return fig\r\n\r\n\r\ndef plotly_plot_data(fig):\r\n    plotly_fig = tls.mpl_to_plotly(fig)\r\n    plotly.offline.plot(plotly_fig, filename=\"plotly_strain.html\")\r\n\r\n\r\ndata = get_data(approximants, injection_parameters)\r\nfig = matplot_plot_data(data)\r\nplotly_plot_data(fig)\r\n\r\n```\r\n\r\n# Matplotlib Plot:\r\n![Screen Shot 2019-11-26 at 4 15 31 pm](https:\/\/user-images.githubusercontent.com\/15642823\/69601379-113bdb00-1068-11ea-9c9f-00802b322fb1.png)\r\n\r\n# Plotly Plot:\r\n![Screen Shot 2019-11-26 at 4 15 40 pm](https:\/\/user-images.githubusercontent.com\/15642823\/69601383-1862e900-1068-11ea-884d-35d1d1ec1e87.png)\r\n","I came up with a hack-y fix which does the job:\r\n```python\r\ndef plotly_plot_data(fig):\r\n    ax_list = fig.axes\r\n    for ax in ax_list:\r\n        ax.get_legend().remove()\r\n\r\n    plotly_fig = tls.mpl_to_plotly(fig)\r\n    legend = go.layout.Legend(\r\n        x=0.05,\r\n        y=0.95\r\n    )\r\n    plotly_fig.update_layout(showlegend=True, legend=legend)\r\n    plotly.offline.plot(plotly_fig, filename=\"plotly_strain.html\")\r\n```\r\n![Screen Shot 2019-11-26 at 4 57 37 pm](https:\/\/user-images.githubusercontent.com\/15642823\/69603149-de94e100-106d-11ea-9601-aec6e4d79119.png)\r\n","We're not really maintaining the matplotlib-to-plotly conversion pipeline ourselves very much these days (although we would be happy to review and accept pull requests to it!) so the approach proposed immediately-above is probably the best way forward today."],"labels":["matplotlylib"]},{"title":"Sparkline FigureFactory (Discussion)","body":"Recreation of the Stephen Few Sparklines Charts\r\n\r\nCurrent strategy is to create a subplot to contain the bullet charts, text columns, line charts, etc.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/10369095\/33042035-74d980ca-ce0e-11e7-874b-9141ba4d6244.png)\r\n\r\n![image 2](https:\/\/user-images.githubusercontent.com\/10369095\/33042040-773777fa-ce0e-11e7-8107-b1892eee2c6b.png)\r\n\r\n![image 1](https:\/\/user-images.githubusercontent.com\/10369095\/33042044-79962d84-ce0e-11e7-9033-54af7903e484.png)\r\n","comments":["Some Discussion:\r\n\r\nFor the bullet charts, I think it would be very tedious for users to have all the information in their dataframes\/list of dictionaries that contain all their chart information to have all the bar lengths, blue bar lengths, etc.\r\n\r\nI'm voting having a users' data structured as just a bunch of columns:\r\n\r\n\u00a0 | adam | andrew | michael | chris | jack | \r\n-- | -- | -- | -- | -- | -- | \r\n0 | 2 | 9 | 6 | 2 | 3\r\n1 | 5 | 4 | 5 | 1 | 4\r\n2 | 7 | 6 | 7 | 6 | 5\r\n3 | 8 | 3 | 3 | 3 | 2\r\n4 | 9 | 5 | 1 | 11 | 12\r\n5 | 10 | 1 | 4 | 7 | 8\r\n6 | 4 | 5 | 8 | 13 | 14\r\n7 | 1 | 2 | 2 | 12 | 5\r\n8 | 3 | 5 | 1 | 11 | 10\r\n9 | 8 | 8 | 6 | 4 | 14\r\n\r\nand users then need to run a param like `column_types` which is a list of the order and type of columns they want in their subplots.\r\neg. `['name', 'bullet', 'line', 'avg']`\r\n\r\nAs for the bullet chart, I don't know of any canonical values for the measures bars and range bars, but perhaps:\r\nthe marker -> the avg of values + st dev\r\nperformance bar (thick bar in bkgd) -> the avg\r\nmeasure bar (thin bar) -> the last value in the list of values in column\r\n\r\n@jackparmer any thoughts?\r\n","@Kully yep, that is about what I was thinking. We can start with some sensible defaults in the style of the Few sparklines and extend later as needed."],"labels":["enhancement"]},{"title":"Inconsistent make_subplots print_grid output for subplot with rowspan and colspan","body":"When I try to make subplots as shown below, the printed grid is wrong.\r\n```\r\nfigure = tools.make_subplots(rows=3,\r\n                                 cols=3,\r\n                                 specs=[[{'is_3d': True}, {'rowspan': 3, 'colspan': 2, 'is_3d': False}, None],\r\n                                        [{'is_3d': True}, None, None],\r\n                                        [{'is_3d': False}, None, None]]\r\n                                 )\r\n# Output\r\n[ (1,1) scene1 ]  [ (1,2) x1,y1            -       ]\r\n[ (2,1) scene2 ]         |              (empty)     \r\n[ (3,1) x2,y2 ]          |                 |        \r\n```\r\n\r\nThat `(empty)` should not be there.","comments":["Hi there,\r\nI'm note sure I can tell what type of subplot you're intending to create based on the specs listed above. \r\nCan you provide a reproducible example with traces added? ","How does it matter what type of plot? I'm just setting up the figure and `make_subplots` function returns incorrect subplot information.","Just to clarify, you're pointing out that the printed grid information in this case has a cell labeled `(empty)` rather than `|`?","@jonmmease Yes."],"labels":["bug","make_subplots"]},{"title":"imgStretch param doesn't work properly for Presentations API","body":"`plotly.presentation_objs.Presentation`","comments":[],"labels":["bug","plot.ly","legacy-versions"]},{"title":"Feature Request:  Custom line objects for each data point (go.Scattergl)","body":"I'm working on a plot.ly wrapper for my networkx plots adapted from https:\/\/plot.ly\/python\/network-graphs\/. It would be really useful to have the ability to set the width for each connection based on the weights.  The weights are in the `attr_dict` as `weight`.  I tried setting `go.Line` objects but it wasn't working.  Attaching an example of the network structure from a plot I made in matplotlib.  \r\n\r\n**In future versions, would it be possible to set the the parameters for individual lines as I am trying to do below?**  I tried adding traces for each line but I got an overflow error (not shown).  There may be another way to do this than what I am trying but I haven't seen any yet. \r\n\r\n[![enter image description here][1]][1]\r\n```python\r\n    import requests\r\n    from ast import literal_eval\r\n    import plotly.offline as py\r\n    from plotly import graph_objs as go\r\n    py.init_notebook_mode(connected=True)\r\n    \r\n    # Import Data\r\n    pos = literal_eval(requests.get(\"https:\/\/pastebin.com\/raw\/P5gv0FXw\").text)\r\n    df_plot = pd.DataFrame(pos).T\r\n    df_plot.columns = list(\"xy\")\r\n    edgelist = literal_eval(requests.get(\"https:\/\/pastebin.com\/raw\/2a8ErW7t\").text)\r\n    _fig_kws={\"figsize\":(10,10)}\r\n    \r\n    # Plotting Function\r\n    def plot_networkx_plotly(df_plot, pos, edgelist, _fig_kws):\r\n        # Nodes\r\n        node_trace = go.Scattergl(\r\n                             x=df_plot[\"x\"],\r\n                             y=df_plot[\"y\"],\r\n                             mode=\"markers\",\r\n        )\r\n        # Edges\r\n        edge_trace = go.Scattergl(\r\n                             x=[], \r\n                             y=[],\r\n                             line=[],\r\n                             mode=\"lines\"\r\n        )\r\n        \r\n        for node_A, node_B, attr_dict in edgelist:\r\n            xA, yA = pos[node_A]\r\n            xB, yB = pos[node_B]\r\n            edge_trace[\"x\"] += [xA, xB, None]\r\n            edge_trace[\"y\"] += [yA, yB, None]\r\n            edge_trace[\"lines\"].append(go.Line(width=attr_dict[\"weight\"],color='#888'))\r\n        \r\n        # Data\r\n        data = [node_trace, edge_trace]\r\n        layout = {\r\n                    \"width\":_fig_kws[\"figsize\"][0]*100,\r\n                    \"height\":_fig_kws[\"figsize\"][1]*100,\r\n    \r\n        }\r\n        fig = dict(data=data, layout=layout)\r\n    \r\n        py.iplot(fig)\r\n        return fig\r\n    plot_networkx_plotly(df_plot, pos, edgelist, _fig_kws)\r\n    \r\n    # ---------------------------------------------------------------------------\r\n    # PlotlyDictValueError                      Traceback (most recent call last)\r\n    # <ipython-input-72-4a5d0e26a71d> in <module>()\r\n    #      46     py.iplot(fig)\r\n    #      47     return fig\r\n    # ---> 48 plot_networkx_plotly(df_plot, pos, edgelist, _fig_kws)\r\n    \r\n    # <ipython-input-72-4a5d0e26a71d> in plot_networkx_plotly(df_plot, pos, edgelist, _fig_kws)\r\n    #      25                          y=[],\r\n    #      26                          line=[],\r\n    # ---> 27                          mode=\"lines\"\r\n    #      28     )\r\n    #      29 \r\n    \r\n    # ~\/anaconda\/lib\/python3.6\/site-packages\/plotly\/graph_objs\/graph_objs.py in __init__(self, *args, **kwargs)\r\n    #     375         d = {key: val for key, val in dict(*args, **kwargs).items()}\r\n    #     376         for key, val in d.items():\r\n    # --> 377             self.__setitem__(key, val, _raise=_raise)\r\n    #     378 \r\n    #     379     def __dir__(self):\r\n    \r\n    # ~\/anaconda\/lib\/python3.6\/site-packages\/plotly\/graph_objs\/graph_objs.py in __setitem__(self, key, value, _raise)\r\n    #     430 \r\n    #     431         if self._get_attribute_role(key) == 'object':\r\n    # --> 432             value = self._value_to_graph_object(key, value, _raise=_raise)\r\n    #     433             if not isinstance(value, (PlotlyDict, PlotlyList)):\r\n    #     434                 return\r\n    \r\n    # ~\/anaconda\/lib\/python3.6\/site-packages\/plotly\/graph_objs\/graph_objs.py in _value_to_graph_object(self, key, value, _raise)\r\n    #     535             if _raise:\r\n    #     536                 path = self._get_path() + (key, )\r\n    # --> 537                 raise exceptions.PlotlyDictValueError(self, path)\r\n    #     538             else:\r\n    #     539                 return\r\n    \r\n    # PlotlyDictValueError: 'line' has invalid value inside 'scattergl'\r\n    \r\n    # Path To Error: ['line']\r\n    \r\n    # Current path: []\r\n    # Current parent object_names: []\r\n    \r\n    # With the current parents, 'line' can be used as follows:\r\n    \r\n    # Under ('figure', 'data', 'scattergl'):\r\n    \r\n    #     role: object\r\n```\r\n  [1]: https:\/\/i.stack.imgur.com\/iX1rQm.png\r\n","comments":["@jolespin you may want to follow https:\/\/github.com\/plotly\/plotly.js\/pull\/1869\r\ncc @dfcreative","Without some updates in Plotly.js I don't think we'll be able to support general variable width lines, but I think the graph use-case is common enough to warrant a dedicated figure factory. See https:\/\/github.com\/plotly\/plotly.py\/issues\/591 for some related discussion of the directed graph use-case.\r\n\r\nMy idea for implementing the variable edge widths in the figure factory would be to discretize the continuous edge weight values into 10-15 bins.  Then for each binned width value, create one `scattergl` trace that has that width and includes all of the graph edges in that bin.  With this approach, I would expect we could support graphs of over 100k total nodes+edges.\r\n\r\nVariable edge colors could be supported in the same way, but discretizing the numeric color values and creating a single trace per binned color value.\r\n\r\nThis isn't something I'll be taking on in the foreseeable future, but I'll keep throwing out ideas until someone is inspired to take it on \ud83d\ude42 "],"labels":["enhancement"]},{"title":"Categorical barplots from matplotlib not perfectly converted","body":"It seems to me that categorical data from a matplotlib object is not correcly processed by plotly.\r\n\r\n```\r\n>>> import numpy as np\r\n>>> import pandas as pd\r\n>>> import matplotlib.pyplot as plt\r\n>>> import seaborn as sns\r\n>>> sns.set(style=\"whitegrid\", color_codes=True)\r\n>>> titanic = sns.load_dataset(\"titanic\")\r\n>>> fig, ax = plt.subplots()\r\n>>> sns.barplot(x=\"sex\", y=\"survived\", hue=\"class\", data=titanic, ax=ax)\r\n<matplotlib.axes._subplots.AxesSubplot object at 0x7f50dcfb0470>\r\n>>> plt.savefig(\"categorical.png\", bbox_inches=\"tight\")\r\n```\r\n\r\nThis creates a figure like\r\n![categorical](https:\/\/user-images.githubusercontent.com\/7095926\/29373837-701829e2-827d-11e7-96c1-b483ac86fa5f.png)\r\n\r\nIn the conversion to a plotly object, a lot of information such as xaxis labels, data point labels, legend colors, etc.\r\n\r\n```\r\n>>> import plotly.tools as tls\r\n>>> import plotly as ply\r\n>>> plotly_fig = tls.mpl_to_plotly(fig)\r\n>>> from pprint import pprint\r\n>>> pprint(plotly_fig[\"data\"])\r\n[{'line': {'color': 'rgba (66, 66, 66, 1)', 'dash': 'solid', 'width': 3.15},\r\n  'mode': 'lines',\r\n  'name': '_line0',\r\n  'type': 'scatter',\r\n  'x': [-0.26666666666666672, -0.26666666666666672],\r\n  'xaxis': 'x1',\r\n  'y': [0.28668032786885245, 0.45081967213114754],\r\n  'yaxis': 'y1'},\r\n {'line': {'color': 'rgba (66, 66, 66, 1)', 'dash': 'solid', 'width': 3.15},\r\n  'mode': 'lines',\r\n  'name': '_line1',\r\n  'type': 'scatter',\r\n  'x': [0.73333333333333328, 0.73333333333333328],\r\n  'xaxis': 'x1',\r\n  'y': [0.92553191489361697, 1.0],\r\n  'yaxis': 'y1'},\r\n {'line': {'color': 'rgba (66, 66, 66, 1)', 'dash': 'solid', 'width': 3.15},\r\n  'mode': 'lines',\r\n  'name': '_line2',\r\n  'type': 'scatter',\r\n  'x': [0.0, 0.0],\r\n  'xaxis': 'x1',\r\n  'y': [0.092592592592592587, 0.23148148148148148],\r\n  'yaxis': 'y1'},\r\n {'line': {'color': 'rgba (66, 66, 66, 1)', 'dash': 'solid', 'width': 3.15},\r\n  'mode': 'lines',\r\n  'name': '_line3',\r\n  'type': 'scatter',\r\n  'x': [1.0, 1.0],\r\n  'xaxis': 'x1',\r\n  'y': [0.85526315789473684, 0.97368421052631582],\r\n  'yaxis': 'y1'},\r\n {'line': {'color': 'rgba (66, 66, 66, 1)', 'dash': 'solid', 'width': 3.15},\r\n  'mode': 'lines',\r\n  'name': '_line4',\r\n  'type': 'scatter',\r\n  'x': [0.26666666666666672, 0.26666666666666672],\r\n  'xaxis': 'x1',\r\n  'y': [0.10086455331412106, 0.1729106628242075],\r\n  'yaxis': 'y1'},\r\n {'line': {'color': 'rgba (66, 66, 66, 1)', 'dash': 'solid', 'width': 3.15},\r\n  'mode': 'lines',\r\n  'name': '_line5',\r\n  'type': 'scatter',\r\n  'x': [1.2666666666666666, 1.2666666666666666],\r\n  'xaxis': 'x1',\r\n  'y': [0.41666666666666669, 0.57638888888888884],\r\n  'yaxis': 'y1'},\r\n {'marker': {'color': '#5874A3', 'line': {'width': 0.3}},\r\n  'opacity': 1,\r\n  'orientation': 'v',\r\n  'type': 'bar',\r\n  'x': [-0.26666666666666672, 0.73333333333333339],\r\n  'xaxis': 'x1',\r\n  'y': [0.36885245901639346, 0.96808510638297873],\r\n  'yaxis': 'y1'},\r\n {'marker': {'color': '#5F9D6D', 'line': {'width': 0.3}},\r\n  'opacity': 1,\r\n  'orientation': 'v',\r\n  'type': 'bar',\r\n  'x': [0.0, 1.0],\r\n  'xaxis': 'x1',\r\n  'y': [0.15740740740740741, 0.92105263157894735],\r\n  'yaxis': 'y1'},\r\n {'marker': {'color': '#B55C5F', 'line': {'width': 0.3}},\r\n  'opacity': 1,\r\n  'orientation': 'v',\r\n  'type': 'bar',\r\n  'x': [0.26666666666666672, 1.2666666666666666],\r\n  'xaxis': 'x1',\r\n  'y': [0.13544668587896252, 0.5],\r\n  'yaxis': 'y1'}]\r\n```\r\n\r\nIt's even worse when you create the object without `hue`.  In this case even the color information gets los.","comments":[],"labels":["matplotlylib"]},{"title":"plot_mpl is not able to render specgram()","body":"Matplotlib has a nice fuction specgram() http:\/\/matplotlib.org\/examples\/pylab_examples\/specgram_demo.html , but the render function is not able to render this. Is it possible to add the missing function.\r\n\r\n```\r\nfig , ax = plt.subplots()\r\nPxx, freqs, bins, im = ax.specgram(x, NFFT=NFFT, Fs=Fs, noverlap=32)\r\ndv = plotly.offline.plot_mpl(fig, output_type='div')\r\n```\r\nbrings:\r\n```dv = plotly.offline.plot_mpl(fig, output_type='div')\r\n\/usr\/lib\/python2.7\/site-packages\/plotly\/matplotlylib\/renderer.py:396: UserWarning:\r\n\r\nAw. Snap! You're gonna have to hold off on the selfies for now. Plotly can't import images from matplotlib yet!\r\n```\r\n\r\n`Empty data list found. Make sure that you populated the list of data objects you're sending and try again.  Questions? Visit support.plot.ly`","comments":[],"labels":["matplotlylib"]},{"title":"Plotting DataFrame with timedelta64 (y-axis)","body":"Similar to #799 but on y-axis and https:\/\/github.com\/pandas-dev\/pandas\/issues\/16953\r\n\r\n```python\r\nimport pandas as pd\r\nfrom pandas.compat import StringIO\r\nimport plotly\r\nimport plotly.graph_objs as go\r\n\r\n\r\ndat = \"\"\"c1,c2,c3\r\n1000,2000,1500\r\n9000,8000,1600\"\"\"\r\n\r\ndf = pd.read_csv(StringIO(dat))\r\n\r\ndf = df.apply(lambda x: pd.to_timedelta(x, unit='ms'))\r\n\r\nprint(df)\r\nprint(df.dtypes)\r\nprint(df.index)\r\n\r\ntrace1 = go.Bar(\r\n    x=df.index,\r\n    y=df.c1,\r\n    name='c1'\r\n)\r\ntrace2 = go.Bar(\r\n    x=df.index,\r\n    y=df.c2,\r\n    name='c2'\r\n)\r\n\r\ntrace3 = go.Bar(\r\n    x=df.index,\r\n    y=df.c3,\r\n    name='c3'\r\n)\r\n\r\ndata = [trace1, trace2, trace3]\r\nlayout = go.Layout(\r\n    barmode='group'\r\n)\r\n\r\nplotly.offline.plot({\r\n\"data\": data,\r\n\"layout\": layout\r\n})\r\n```\r\n\r\ndisplays\r\n\r\n![capture d ecran 2017-07-22 a 12 35 57](https:\/\/user-images.githubusercontent.com\/109167\/28490453-b8235718-6eda-11e7-9237-39642c64c994.png)\r\n\r\ny-axis values are not correctly displayed","comments":["A workaround is to do:\r\n\r\n```python\r\nfor col in df.columns:\r\n    df[col] = df[col] + pd.to_datetime('1970\/01\/01')\r\n```\r\n\r\n![capture d ecran 2017-07-22 a 12 42 25](https:\/\/user-images.githubusercontent.com\/109167\/28490482-539793e4-6edb-11e7-911f-3d88f1eeb558.png)\r\n\r\nbut it will be nice if plotly.py could handle `timedelta64` on y-axis","Is there any progress regarding this, I really need to use timedelta64 on Y-axis?","That's really not much of a workaround. Showing Jan 1, 1970 at the bottom... Timedelta is really a standard feature used all the time and plots with the y-axis being timedelta are very common.","For reference, there are two other issues closely related to this one, covering the x axis (#799), and color axis (#3368). It would probably make sense to tackle all three issues holistically, rather than separately.","Hey, it's a bit late to the party. But, I wrote a solution for this issue. You can have dash, including its iterative features working and a datetime format in any sense. This, includes the autorender to solve for many x_sample points, so that it won't crash your axis.\r\n\r\nSuch is the following:\r\n\r\nFor the x_axis make absolutely sure that the format of your list is list[str] and they are consistent. ALSO, match the format in those strings in the tickformat of your list, the reference for time is standard as used in datetime objects, for future reference check: https:\/\/plotly.com\/python\/reference\/layout\/xaxis\/#layout-xaxis-tickformat\r\n\r\n\r\n e.g.:\r\n\r\n`mock_list = [\"00:00:00\", \"00:00:01\"]`\r\n\r\nmock_list to be the x values in a scatter plot for instance\r\nthen adjust the axis as follows:\r\n\r\n`fig.update_xaxes(\r\n    tickformat=\"%H:%M:%S\") `\r\n\r\n","Thanks @ThomasGl. However, this works only for the last subplot in the figure.\r\n\r\nThe X axis is displayed in `\"%H:%M:%S\"`.\r\nThe 3rd (bottom) subplot hover X data is in `\"%H:%M:%S\"`.\r\nBut 1st and 2nd subplots hover X data is still in `Jan 1, 1970, ...%H:%M:%S`. How to make them also `%H:%M:%S`?\r\n\r\nTried\r\n```python\r\n    for xaxis in range(1, 4):\r\n        fig['layout'][f'xaxis{xaxis}']['tickformat'] = \"%H:%M:%S.%f\"\r\n```\r\nwith no help.","> Thanks @ThomasGl. However, this works only for the last subplot in the figure.\n> \n> The X axis is displayed in `\"%H:%M:%S\"`.\n> The 3rd (bottom) subplot hover X data is in `\"%H:%M:%S\"`.\n> But 1st and 2nd subplots hover X data is still in `Jan 1, 1970, ...%H:%M:%S`. How to make them also `%H:%M:%S`?\n> \n> Tried\n> ```python\n>     for xaxis in range(1, 4):\n>         fig['layout'][f'xaxis{xaxis}']['tickformat'] = \"%H:%M:%S.%f\"\n> ```\n> with no help.\n\nHi. Ill take at look at it over the weekend, but can you share a bit more of information upon the issue you are having?","@dizcza also take note that you must adjust the axis for each subplot. As the engine responsible to generate the graphs renders each one as a new \"fig\" object with defaults params","Here is the code I'm using:\r\n```python\r\nimport plotly.graph_objects as go\r\nfrom plotly.subplots import make_subplots\r\n\r\n\r\ndef add_traces(fig, record_data_dict: dict):\r\n    # only one key\/value for now in this dict\r\n    for sensor, record_data in record_data_dict.items():\r\n        y = np.random.randn(1000, 3)\r\n        # convert s to ms\r\n        time_ms = (record_data.time * 1000).astype(np.int32)\r\n        td = pd.to_timedelta(time_ms, unit='ms') + pd.Timestamp(\"1970\/01\/01\")\r\n        idx = np.arange(len(y)).astype(str)\r\n        for dim in range(3):\r\n            trace = go.Scatter(\r\n                x=td,\r\n                y=y[:, dim],\r\n                hovertext=idx,\r\n                name=\"AAA\",\r\n                legendgroup=sensor,\r\n                showlegend=dim == 0,\r\n                marker=dict(color=colors[sensor]),\r\n                line=dict(color=colors[sensor]),\r\n                opacity=0.8\r\n            )\r\n            fig.add_trace(trace, row=dim + 1, col=1)\r\n \r\n \r\n \r\n def plot_fig(record_dir=DATA_DIR \/ \"2023.02.28\"):\r\n    fig = make_subplots(rows=3, shared_xaxes=True)\r\n    record = Record(record_dir)\r\n    add_traces(fig, record.data)\r\n    fig['layout']['xaxis3']['title'] = \"Time, s\"\r\n    fig.update_layout(\r\n        title=record_dir.name,\r\n        legend_title=\"Sensor\",\r\n    )\r\n    fig.update_xaxes(tickformat=\"%H:%M:%S.%f\")\r\n```\r\nand here is the plot\r\n![Screenshot from 2023-03-03 18-58-59](https:\/\/user-images.githubusercontent.com\/7688337\/222781774-260fa059-3013-4be7-a7ca-3df07f7bf0b7.png)\r\n\r\nThe 1st and 2nd plots hover data is incorrect: it starts with `Jan 1, 1970`.\r\n\r\n![Screenshot from 2023-03-03 18-58-16](https:\/\/user-images.githubusercontent.com\/7688337\/222781927-1cb45c09-cd2a-4a57-b1fd-7dd3e2058edb.png)\r\n","> @dizcza also take note that you must adjust the axis for each subplot. As the engine responsible to generate the graphs renders each one as a new \"fig\" object with defaults params\r\n\r\nHow can I do so? In my case, I have only one figure.","Each subplot renders the engine plot for figure, in the sense that you have as many fig objects as you have subplots, thus in your case you have 4 fig objects, One containing subplots and then 3 as you have 3 subplots.\r\n\r\nAs for starting in Jan 1, 1970. this is a standard initial date, in case of missing compiling data, meaning, if you don't have a \"DD:MM:YYYY\" string like in the element responsible to render it, check in the documentation for the dash plots in case it changed, or it has some slightly different format. This could be generated using a list comprehension.\r\n\r\nYet, as for correcting timestamp, pass the line with ```fig.update_xaxes``` to the last line in the function ```add_traces```\r\n\r\nBy the way, I can't know if theres an error with your data without the the function call arg to plot_fig, by that I mean that I need whatever DATA_DIR contains in order to recreate your plots","All right, here is fully reproducible code:\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport plotly.graph_objects as go\r\nfrom plotly.subplots import make_subplots\r\n\r\n\r\ndef add_traces(fig):\r\n    # only one key\/value for now in this dict\r\n    y = np.random.randn(1000, 3)\r\n    time_s = np.random.rand(len(y)).cumsum()\r\n    time_ms = (time_s * 1000).astype(np.int32)\r\n    td = pd.to_timedelta(time_ms, unit='ms') + pd.Timestamp(\"1970\/01\/01\")\r\n    idx = np.arange(len(y)).astype(str)\r\n    for dim in range(3):\r\n        trace = go.Scatter(\r\n            x=td,\r\n            y=y[:, dim],\r\n            hovertext=idx,\r\n            name=\"AAA\",\r\n            showlegend=dim == 0,\r\n            opacity=0.8\r\n        )\r\n        fig.add_trace(trace, row=dim + 1, col=1)\r\n\r\n\r\ndef plot_fig():\r\n    fig = make_subplots(rows=3, shared_xaxes=True)\r\n    add_traces(fig)\r\n    fig['layout']['xaxis3']['title'] = \"Time, s\"\r\n    fig.update_xaxes(tickformat=\"%H:%M:%S.%f\")\r\n    fig.show()\r\n\r\n\r\nif __name__ == '__main__':\r\n    plot_fig()\r\n```\r\n\r\n> As for starting in Jan 1, 1970. this is a standard initial date, in case of missing compiling data, meaning, if you don't have a \"DD:MM:YYYY\" string like in the element responsible to render it, check in the documentation for the dash plots in case it changed, or it has some slightly different format. This could be generated using a list comprehension.\r\n\r\nI understand that this is the standard initial date. But showing the date while hovering is not expected. I expect to have both the X axis and hover-on-data X values formatted to the `%H:%M:%S`.\r\n\r\n> Yet, as for correcting timestamp, pass the line with fig.update_xaxes to the last line in the function add_traces\r\n\r\nTried with no luck.\r\n","Just try running this example and hover on the 1st, 2nd, and 3rd subplots, and you'll see the difference.","I see, you only desire the xaxes in the \"%H:%M:%S\" to show up?\r\n\r\nIll run it tomorrow night","> I see, you only desire the xaxes in the \"%H:%M:%S\" to show up?\r\n\r\nCorrect. Not only the X axis (the bottom panel) but also X values when I hover the mouse over any subplot.","import numpy as np\r\nimport pandas as pd\r\nimport plotly.graph_objects as go\r\nfrom plotly.subplots import make_subplots\r\n\r\n\r\ndef add_traces(fig):\r\n    # only one key\/value for now in this dict\r\n    y = np.random.randn(1000, 3)\r\n    time_s = np.random.rand(len(y)).cumsum()\r\n    time_ms = (time_s * 1000).astype(np.int32)\r\n    td = [time[len(\"0 days \"):] for time in pd.to_timedelta(time_ms, unit='ms').astype(str)]\r\n    idx = np.arange(len(y)).astype(str)\r\n    for dim in range(3):\r\n        trace = go.Scatter(\r\n            x=td,\r\n            y=y[:, dim],\r\n            hovertext=idx,\r\n            name=\"AAA\",\r\n            showlegend=dim == 0,\r\n            opacity=0.8\r\n        )\r\n        fig.add_trace(trace, row=dim + 1, col=1)\r\n\r\n\r\ndef plot_fig():\r\n    fig = make_subplots(rows=3, shared_xaxes=True)\r\n    add_traces(fig)\r\n    fig['layout']['xaxis3']['title'] = \"Time, s\"\r\n    fig.update_xaxes(tickformat=\"%H:%M:%S.%f\")\r\n    fig.show()\r\n\r\n\r\nif __name__ == '__main__':\r\n    plot_fig()","@dizcza I am pretty sure this is what you were looking for? I didn't quite understand why you were adding pd.Timestamp(\"1970\/01\/01\"), and be aware of the dash expect type for this operation to work.... it needs a List[str] object, where the string are already formatted.... e.g. for a \"03:45:10\" its expected a \"%H:%M:%S\"","@ThomasGl thanks this is promising but the X axis labeling looks weird and not so intuitive in my original example. I mean it's much easier to look at \r\n![Screenshot from 2023-03-05 08-08-16](https:\/\/user-images.githubusercontent.com\/7688337\/222944619-ae67106c-d112-48c5-908e-5750c6912658.png)\r\nthan\r\n![Screenshot from 2023-03-05 08-08-48](https:\/\/user-images.githubusercontent.com\/7688337\/222944627-3f308086-2dfe-4576-a48b-b8d331396825.png)\r\n\r\n> I didn't quite understand why you were adding pd.Timestamp(\"1970\/01\/01\")\r\n\r\nBecause if I don't, I'm getting this:\r\n\r\n![Screenshot from 2023-03-05 08-10-14](https:\/\/user-images.githubusercontent.com\/7688337\/222944711-183321ca-4ef4-4816-8bd7-7880dc88eaa1.png)\r\n\r\nJust like the author of this issue reported. And he added `pd.Timestamp(\"1970\/01\/01\")` to workaround this. So do I.\r\n\r\n----\r\n\r\nThanks for the effort though. I'm not sure which version I'll use: with \"1970\/01\/01\" upfront obfuscating the users or confusing X axis string labeling for each point.","Hmmm. I mean yes it does look overcrowded a bit. Bit its because of the densuty of your data. When and if you zoom in you would see it fits better, again I suggest you look in the plotly documentation for the function behavior of ```update_xaxes()``` it might have some options on how to adjust the precision on which you see the xlabels. I am not sure how, as I didn't have to do it in my own projects.\n\nYet I hope I helped you understand a bit more and that you can carry on from here","The core challenge here is that Plotly's date\/time axes can only today represent _specific absolute instants in time_ (e.g. March 5, 2023 at 8:13am UTC), and hence are incompatible with _relative_ `timedelta` representations. Adding an absolute instant to such objects converts them to absolute instants, and by forcing the axis\/hover displays to include only day-of-month\/hour-of-day\/minute etc information, you can hide the underlying absoluteness of the data point to an extent, but this has limits. For example if you add January 1, 1970 and your delta represents 32 days, then the \"days\" portion will be incorrectly displayed as 1 (i.e. February 1). More generally you will not be able to display times in formats like \"200 minutes\" or \"26 hours and 4 minutes\". \r\n\r\nWe are aware of these limitations in the library and would certainly undertake the development required to add relative time axes to the underlying Plotly.js library, but this would require external sponsorship.","If you are mostly concerned with the hoverlabel, you can use the following single line to set the `hovertemplate` for all your traces to only include the h\/m\/s portion of the X value: `fig.update_traces(hovertemplate=\"%{x|%H:%M:%S.%f}, %{y}\")`","> If you are mostly concerned with the hoverlabel, you can use the following single line to set the `hovertemplate` for all your traces to only include the h\/m\/s portion of the X value: `fig.update_traces(hovertemplate=\"%{x|%H:%M:%S.%f}, %{y}\")`\r\n\r\nThanks @nicolaskruchten, I had trouble with hovertemplate language in the past that's why I had been avoiding templates till you showed me how to use them, and your solution works like a charm.\r\n\r\nWith these two hacks in mind, adding `pd.Timestamp(\"1970\/01\/01\")` and `hovertemplate=\"%{x|%H:%M:%S.%f}, %{y}\"`, I was able to achieve what I want. At least from the user's perspective, all looks nice and shiny."],"labels":["enhancement"]},{"title":"Plot DataFrame with TimedeltaIndex (x-axis)","body":"Hello,\r\n\r\nPlotly.py doesn't display x axis well when using a `TimedeltaIndex`\r\n\r\n```python\r\nimport pandas as pd\r\nfrom pandas.compat import StringIO\r\nimport plotly\r\nfrom plotly.graph_objs import Scatter, Layout\r\n\r\ndat = \"\"\"millis;ax;ay;az\r\n544;-5.65;-0.39;7.45\r\n550;-4.79;-0.59;7.26\r\n556;-4.79;-1.33;6.79\r\n562;-0.63;-1.33;9.53\r\n579;-4.63;0.16;7.96\r\n599;-5.45;0.35;7.34\r\n618;-5.18;1.88;3.77\r\n637;-6.12;-2.00;9.92\r\n658;-3.80;0.51;9.02\r\n677;-4.35;0.04;9.53\r\n697;-3.88;0.71;8.79\r\n717;-4.86;-0.43;8.83\r\n741;-4.16;-1.06;8.79\r\n756;-3.57;0.31;7.92\r\n777;-2.71;2.79;8.32\r\n796;-2.43;5.53;10.55\r\n816;-2.75;3.30;8.67\r\n835;-2.12;2.47;7.85\r\n856;-2.04;2.63;7.85\r\n875;-2.31;2.31;8.04\r\n894;-2.00;3.37;8.12\r\n922;0.86;7.69;9.65\r\n942;-1.45;5.26;8.75\r\n961;-1.96;4.35;8.04\r\n985;-1.80;3.77;8.36\r\n1001;-1.61;3.10;8.55\"\"\"\r\n\r\ndf = pd.read_csv(StringIO(dat), sep=';')\r\ndf['millis'] = pd.to_timedelta(df['millis'], unit='ms')\r\ndf = df.set_index('millis')\r\n\r\ndf.index = df.index + pd.Timestamp(\"1970\/01\/01\")\r\n\r\nprint(df)\r\nprint(df.dtypes)\r\nprint(df.index)\r\n\r\nplotly.offline.plot({\r\n\"data\": [\r\n    Scatter(x=df.index, y=df['ax'])\r\n],\r\n\"layout\": Layout(\r\n    title=\"DataFrame with %s\" % str(type(df.index))\r\n)\r\n})\r\n```\r\n\r\nWhen using `TimedeltaIndex` I get\r\n\r\n![capture d ecran 2017-07-22 a 12 09 19](https:\/\/user-images.githubusercontent.com\/109167\/28490298-f8e29f42-6ed6-11e7-8389-5ae5310babbb.png)\r\n\r\nx-axis have odd values starting with `P0D 0H0M0.`\r\n\r\nbut when using a `DatetimeIndex` I get\r\n\r\n![capture d ecran 2017-07-22 a 12 16 44](https:\/\/user-images.githubusercontent.com\/109167\/28490327-c4c0dcf0-6ed7-11e7-8213-5a4671a4067a.png)\r\n\r\nIt will be great if Plotly.py could handle `TimedeltaIndex` without hassle.\r\n\r\nKind regards","comments":["+1","Does anyone have any suggestions on how the timedelta values should be labeled on the axes? Or some examples of how other plotting libraries handle this?","it can be: hh:mm:ss.000000000\r\nhh is hour, mm is minute, ss is second, nine \"0\"s are for nanoseconds. \r\nthe underlying of timedelta 64 is int","Timedelta values could be labeled on the axes the same manner than `Timestamp` (which are correctly labeled) ... but without date.\r\nOn my side I only need millisecond resolution but I can perfectly understand that it can be different for people who need microsecond or nanosecond resolution","Maybe this Pandas issue about formatting `Timedelta` to string https:\/\/github.com\/pandas-dev\/pandas\/issues\/26897 should also be considered.\r\n\r\nBelow 24h, `Timedelta` could probably be written using `n days hh:mm:ss.xxx`\r\n\r\nBe also aware that the current way negative `Timedelta` are formatted with Pandas (and Python) are not really \"human\" readable https:\/\/github.com\/pandas-dev\/pandas\/issues\/17232\r\n\r\nWhen events resolution is only millisecond, we probably don't need to display Timestamp with microsecond or nanosecond resolution.","Any update on this? I'm using plotly express to look at histograms of TimeDelta objects and the X-axis labeling is basically useless. I have to manually convert to hours, minutes, etc.","If your organization has a software budget and needs this feature, you can prioritize & sponsor the development of it by reaching out to our team: https:\/\/plot.ly\/products\/consulting-and-oem\/. Much of our development is funded this way.\r\n\r\nOtherwise, we'll update this issue when it's planned for an upcoming release. There are no updates at this moment and it is still a good idea.","I've tried to fix this in different ways within my scratch plotly.py space but it always comes down to how Timedelta wants to be treated in plotly.js as a numeric entity and not as a weird date or string value. \r\n\r\nWhat's happening now when using a Timedelta series or index, the underlying data representations are getting written out as raw numerical values and the time unit information is lost. The values just show up in plotly.js as numbers. With extra work, you can cause the timedeltas to be printed out as strings, but then you lose the niceness of a numerical graph (interpolation, scaling, etc).\r\n\r\nWhat would be really nice would be to let timedeltas write themselves out numerically much like they already are, let that numeric value get passed around like it already is but on the plotly.js side, it would be nice if we could have provided a Timedelta specific print format specifier. That way axis labels and hovers print in a timedelta iso format while still being expressed numerically underneath the covers. \r\n\r\nI'm suggesting all that's needed is a Timedelta specific print format specifier. Maybe something that uses %t and %T where the underlying units can be either assumed or tacked on as a modifier, \"%t!s\" as an idea. More format expression would be nice if possible, the more like date formatting the better if possible, but these are just quick ideas for syntax examples.\r\n\r\nThere's just no way to use Timedelta as an axis cleanly without something like this. It either gets turned into weird datetimes or you have to turn them all into strings.\r\n\r\nIf you only want the time and no days, you can still hack timedelta somewhat by turning them all into actual datetimes:\r\n\r\n```\r\ndf.index = df.index + pd.Timestamp(\"1970\/01\/01\")\r\n```\r\n\r\nand then using a tick format specifier to print only the time portion:\r\n\r\n```\r\n\"layout\": Layout(\r\n    title=\"DataFrame with %s\" % str(type(df.index))\r\n    xaxis_tickformat = '%X.%LS',\r\n)\r\n```\r\n\r\nHaving said all of this, and already wished for more than just iso format, something even more flexible like embedded js or some client side callback might find even more uses: `%@func_name`  \r\n\r\nBut that's pie in the sky dreaming.\r\n","For reference, there are two other issues closely related to this one, covering the y axis (#801), and color axis (#3368). It would probably make sense to tackle all three issues holistically, rather than separately.","I'd like to see this, even if within plotly express they handle the change from the `timedelta` to `datetime` and then formating of the xaxis tick format.","Hi, any update on this issue?","I'm also looking forward for this issue to be resolved. In my case, I want to plot a gantt-chart-like bar plot, and in my case the x-axis goes from one time to another - which in a bar plot is given by a timedelta. `px.timeline` can handle that somehow -but there, it defines the start and end points, instead of start and duration. It is much more limited though.\r\n\r\nedit: I have compared the html generated by `px.timeline`, which  handle correctly the dates. I managed to do a workaround with 2 simple modifications on my barplot:\r\n- adding a type:\"date\" to the xaxis:\r\n fig['layout']['xaxis'].update(dict( type=\"date\" ))\r\n- dividing the timedelta by 1 million (seems that the time units are the problem here):\r\nx=(df['Finish']-df['Start'])\/1000000\r\n\r\nNow I have a decent range and tick labels on the x axis"],"labels":["enhancement","\u2665 NEEDS SPON$OR"]},{"title":"numerical colormaps don't interpret numerical color in ff.facet_grid","body":"```\r\nimport plotly.plotly as py\r\nimport plotly.figure_factory as ff\r\n\r\nimport pandas as pd\r\ntips = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/tips.csv')\r\n\r\ncolormap = 'Viridis' \r\n# colormap = [[0,'rgb(255,0,0)'], [1, 'rgb(0,255,0)']]\r\n\r\nfig = ff.create_facet_grid(\r\n    tips,\r\n    x='total_bill',\r\n    y='tip',\r\n    color_name='size',\r\n    colormap=colormap\r\n)\r\npy.iplot(fig, filename='facet - color by continuous variable')\r\n```\r\n\r\nYields the generic \"Reds\" colorscale without the colorbar on the side:\r\n![scatter_red](https:\/\/user-images.githubusercontent.com\/10369095\/27794069-9d185b00-5fce-11e7-8241-67cd995ce883.png)\r\n","comments":[],"labels":["bug"]},{"title":"Fix colorscale handling in scatterplot matrices","body":"`plotly.figure_factory.utils.py` has an incorrect `PLOTLY_SCALES`. It should be a dictionary of actual colorscales, not just a list of the first and last color in that colorscale.\r\n\r\nWill require a reworking of the way colorscales are handled in `plotly.figure_factory._scatterplot`","comments":[],"labels":["enhancement"]},{"title":"GPG signatures for source validation","body":"As we all know, today more than ever before, it is crucial to be able to trust our computing environments. One of the main difficulties that package maintainers of Linux distributions face, is the difficulty to verify the authenticity and the integrity of the source code.\r\n\r\nThe Arch Linux team would appreciate it if you would provide us GPG signatures\r\nin order to verify easily and quickly your source code releases.\r\n\r\n**Overview of the required tasks:**\r\n* Create and\/or use a 4096-bit RSA keypair for the file signing.\r\n* Keep your key secret, use a strong unique passphrase for the key.\r\n* Upload the public key to a key server and publish the full fingerprint.\r\n* Sign every new git commit and tag.\r\n* Create signed compressed (xz --best) release archives\r\n* Upload a strong message digest (sha512) of the archive\r\n* Configure https for your download server\r\n\r\n**Please also tag the release on git(hub)**\r\n\r\n[GPGit](https:\/\/github.com\/NicoHood\/gpgit) is meant to bring GPG to the masses.\r\nIt is not only a shell script that automates the process of creating new signed\r\ngit releases with GPG but also comes with this step-by-step readme guide for\r\nlearning how to use GPG.\r\n\r\n**Additional Information:**\r\n* https:\/\/github.com\/NicoHood\/gpgit\r\n* https:\/\/help.github.com\/categories\/gpg\/\r\n* https:\/\/wiki.archlinux.org\/index.php\/GnuPG\r\n* https:\/\/git-scm.com\/book\/en\/v2\/Git-Tools-Signing-Your-Work\r\n* https:\/\/www.qubes-os.org\/doc\/verifying-signatures\/\r\n* https:\/\/lkml.org\/lkml\/2016\/8\/15\/445\r\n* https:\/\/developers.google.com\/web\/fundamentals\/security\/encrypt-in-transit\/why-https\r\n* https:\/\/www.enigmail.net\/index.php\/en\/\r\n\r\nThanks in advance.","comments":["+1 Please sign your releases!","@cldougl @Kully any updates on this?","Any updates?"],"labels":["enhancement"]},{"title":"subplot doesn't support angularaxis \/ polar","body":"It seems like having both a polar and a non-polar graph in the same subplot doesn't work. In the following simple code, the angular polar graph doesn't work:\r\n```\r\nimport plotly\r\nimport plotly.graph_objs as go\r\nimport numpy as np\r\n\r\n# make 2 plots sublplot\r\nfig = plotly.tools.make_subplots(rows=1, cols=2, specs=[[{}, {}]])\r\n\r\n# the first subplot: a histogram\r\ntrace1 = go.Histogram(\r\n    x=np.random.uniform(1,6,size=62),\r\n)\r\nfig.append_trace(trace1, 1, 1)\r\n\r\n# the second subplot: a polar graph\r\ntrace2 = go.Scatter(\r\n    r = np.random.uniform(1,6,size=62),\r\n    t = np.random.uniform(30,5,size=62),\r\n    mode='markers',\r\n)\r\nfig.append_trace(trace2, 1, 2)\r\n\r\nplotly.offline.plot(fig, filename='temp.html')\r\n```\r\nNote that if `fig.append_trace(trace1, 1, 1)` is commented out, the polar graph is plotted. [I have been told](https:\/\/community.plot.ly\/t\/cant-get-polar-scatter-working-in-a-subplot\/) that subplot doesn't fully support polar graphs.","comments":[],"labels":["enhancement","make_subplots"]},{"title":"Labels are lost when using iplot_mpl()","body":"Hello,\r\ni use plotly usually in a jupyter notebook. My workflow is as follows:\r\n\r\n```python\r\nfig = plt.figure()\r\n... some plotting with matplotlib or pandas\r\npof.iplot_mpl(fig)\r\n```\r\n\r\nThis is quite easy for me and decently working. However, if I have specified labels, within a bar plot for instance, the converted plot just shows a sequence starting from 1 for them.\r\n\r\nIs it a known issue?\r\n","comments":["@lucaventurini Would you mind including a simple example? This will make it easier for us to test.","I am also running into this issue. The official examples in Plot.ly official documentation are also affected by this bug.\r\nhttps:\/\/plot.ly\/matplotlib\/bar-charts\/#plot-a-bar-using-a-dictionary\r\nhttps:\/\/plot.ly\/matplotlib\/bar-charts\/#stacked-bar-chart-with-labels"],"labels":["matplotlylib"]},{"title":"Figure factory: Plot a scalar field with geographical coordinates on map with projection ","body":"I have an array of global temperatures and associated longitude and latitude coordinates arrays. I would like to plot the temperatures as a heatmap on a map with custom projection and showing coastlines.\r\nA working code example using matplotlib is:\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport cartopy.crs as ccrs\r\n\r\nf, ax = plt.subplots(subplot_kw={'projection': ccrs.Robinson()})\r\np = ax.pcolormesh(longitude, latitude, temperature, cmap='RdBu_r', transform=ccrs.PlateCarree())\r\nax.coastlines()\r\nf.colorbar(p, orientation='horizontal')\r\n```\r\nThe output figure from code block above is (data available [here](https:\/\/www.esrl.noaa.gov\/psd\/data\/gridded\/data.noaa.oisst.v2.html)):\r\n![map](https:\/\/cloud.githubusercontent.com\/assets\/9553668\/24002863\/1d11b742-0a62-11e7-866b-7c5ca2b49d7e.png)\r\n\r\nAt the moment I was only able to use plotly for a simple heatmap with the following code:\r\n```python\r\nfrom plotly.offline import iplot\r\nimport plotly.graph_objs as go\r\n\r\nlayout = go.Layout(geo={'projection': {'type': 'robinson'}})\r\ndata = go.Heatmap(x=longitude, y=latitude, z=temperature)\r\n\r\nfig = go.Figure(data=[data], layout=layout)\r\niplot(fig)\r\n```\r\nAs next figure shows, main issues are:\r\n\r\n- the projection is not working;\r\n\r\n- no coastlines are shown.\r\n![heatmap](https:\/\/cloud.githubusercontent.com\/assets\/9553668\/24004032\/7fc01e30-0a65-11e7-96d9-c425204d43ea.png)\r\n\r\n","comments":["Would also love something similar!","You can plot both heatmap and contour plots on maps. Take a look here: https:\/\/plot.ly\/~Dreamshot\/9147 or visit this user (Dreamshot) Plotly profile for more examples. ","Thanks! Will take a look :)","Although it does not seem to support mapping per se. I mean, the data are on a lat-lon coordinates, but what if we want to change the projection? I don't see a proper support for maps right out of the box (or at least without creating a unique map for each use case).","This blog should help: [How to Create 2D and 3D Interactive Weather Maps in Python and R](https:\/\/medium.com\/@plotlygraphs\/how-to-create-2d-and-3d-interactive-weather-maps-in-python-and-r-77ddd53cca8)","A geographic heatmap figure factory would be really nice!","How about the progress here? It seems `geoviews` supports this function, but that's sometimes slow.\r\nSimilar question is on the [forum](https:\/\/community.plotly.com\/t\/how-to-use-2d-coordinates-to-plot-pixels-like-heatmap\/18375\/7).","I also would like to plot any scallar (numpy array, xarray, etc) with a projeceted basemap in plotly just like is done on matplolib+cartopy integration","I am currently using GeoMakie.jl (https:\/\/github.com\/MakieOrg\/GeoMakie.jl). Works really well!","> I am currently using GeoMakie.jl (https:\/\/github.com\/MakieOrg\/GeoMakie.jl). Works really well!\r\n\r\nNice, however it's in Julia. Is it possible to mix it inside a Python Plotly Dash app?","> > I am currently using GeoMakie.jl (https:\/\/github.com\/MakieOrg\/GeoMakie.jl). Works really well!\r\n> \r\n> Nice, however it's in Julia. Is it possible to mix it inside a Python Plotly Dash app?\r\n\r\nNot sure. Using Python inside Julia is easy, the other way around is more difficult in my experience. This is actually the reason why I use Julia : this gives me access to Julia and 100% of Python's ecosystem.","Of course, there are other methods out there, for Python cartopy stays the library of choice when it comes to map-based plots.  A speedy and interactive data visualization tool stays, however, a rare feat. \r\n\r\nI support the request for the feature and think it would make a good unique selling point for plotly in the geosciences and adjacent communities. ","A quick side remark: All scripts implementing the requested functionality (see above in the thread) depend on basemap which has reached EoL and names cartopy as a recommended replacement. Thus there is currently no example of an efficient geospatial data representation in plotly. \r\n\r\nI will no further bump this thread, but I'd like to stress that I would really like the feature and hope that it isn't just me."],"labels":["enhancement","\u2665 NEEDS SPON$OR"]},{"title":"Support size (N,1) numpy arrays where 1D arrays are supported","body":"When I create my graphic using the online servers everything looks great. If I use the same commands but switch to the `offline.plot`  function, only part of my figure is correctly drawn. If I then click the \"export to plot.ly\" button at the bottom, everything appears normal. There are no errors in my console. I tried this with Google Chrome and Firefox. I'm using version 2.0.2 of plotly.py.","comments":["Hey @alexfeld are you able to provide a reproducible example\/code snippet of the issue you're experiencing? ","I have an HTML file that displays the behavior. Unfortunately I haven't been able to reproduce it with a simpler example. The code that I'm using to plot this is quite complex.","By any chance are you using latex syntax in the plot? This is a current\/known issue for offline plots.","No, there is no latex. ","Thanks --\r\nUnfortunately if you don't have a reproducible example that you can provide or more information, we won't be able to progress any further with the issue.","I understand. I'm working on trying to get a simpler example working, but as I said, I'm only noticing this when my plot gets complicated. ","I finally got an example working. Please see below. The data sample data does not display in offline mode. In my other example the mean line does not appear either, but I bet this is due to the same bug.\r\n\r\n```(python)\r\nimport plotly\r\nfrom plotly import plotly as py\r\nfrom plotly import offline\r\nfrom plotly.graph_objs import Scatter\r\n\r\nimport numpy as np\r\n\r\n\r\ndef hex2rgb(hexcolor):\r\n    hexcolor = [hexcolor[1+2*i:1+2*(i+1)] for i in range(3)]\r\n    r,g,b = [int(n,16) for n in hexcolor]\r\n    return (r,g,b)\r\n\r\n# x = np.random.uniform(0,1,11)\r\n# yn = x**2 + np.random.randn(x.size)*0.05\r\n\r\nx = np.random.uniform(-3.,3.,(20,1))\r\nyn = np.sin(x) + np.random.randn(20,1)*0.05\r\n\r\nxvec = np.linspace(-4,4,1001)\r\n\r\ny = np.sin(xvec)\r\nyp = np.sin(xvec) + 1.\r\nym = np.sin(xvec) - 1.\r\nspecs = [[{'is_3d': 0 }]]\r\nfigure = plotly.tools.make_subplots(1,1, specs=specs)\r\n\r\nfcolor = 'rgba(114, 159, 207, 0.3)'\r\n\r\nkwargs={'opacity':0.3, 'line':{'color':'#204a87', 'width':0.4}, 'mode':'lines'}\r\ntrace1 = Scatter(x=x, y=yn, mode='markers', marker=plotly.graph_objs.Marker(symbol='x', color='black', colorscale=None))\r\ntrace0 = Scatter(x=xvec, y=y, mode='line', line=plotly.graph_objs.Line(color='#3465a4', width=2))\r\ntrace3 = Scatter(x=xvec, y=yp, fillcolor=fcolor, fill='tonextx', showlegend=True, name='filltest', legendgroup='filltest_fill_(1,1)', **kwargs)\r\ntrace2 = Scatter(x=xvec, y=ym, fillcolor=fcolor, showlegend=False, name='filltest', legendgroup='filltest_fill_(1,1)', **kwargs)\r\n\r\nfigure.layout.font = plotly.graph_objs.Font(family=\"Raleway, sans-serif\")\r\nfigure.append_trace(trace0, 1, 1)\r\nfigure.append_trace(trace1, 1, 1)\r\nfigure.append_trace(trace2, 1, 1)\r\nfigure.append_trace(trace3, 1, 1)\r\n\r\npy.plot(figure)\r\noffline.plot(figure)\r\n```","It appears that this is due to the array shape of the input data. If I change the `x` creation to `x=np.random.uniform(-3,3,21)` the plotting works both on and off line.","Simple example:\r\n```\r\nimport plotly\r\nfrom plotly import plotly as py\r\nfrom plotly import offline\r\nfrom plotly.graph_objs import Scatter\r\n\r\nimport numpy as np\r\n\r\nx = np.random.uniform(-1,1,(10,1))\r\nyn = np.sin(x)\r\n\r\ntrace = Scatter(x=x, y=yn, mode='markers')\r\npy.iplot([trace])\r\noffline.iplot([trace])\r\n```\r\n\r\nscatter plots where x\/y ndarrays have a shape of (x,x) fail to render offline\r\n(* shape should be (x,))","Thanks for taking the time to include that example @alexfeld ! \r\nCan you let me know the reasoning\/use case for passing  `x = np.random.uniform(-3.,3.,(20,1))` rather than `x = np.random.uniform(-3.,3.,20)`?\r\nFor scatter plots, x and y should be 1 dimensional. ","No problem! Sorry it took me so long. This issue arises when using `plotly` in a scientific setting. Often you are working with column vectors for mathematical reasons. This behavior would be confusing in that context, especially if you are used to using `matplotlib`.  "],"labels":["enhancement"]},{"title":"Improve tests for Violin plots in FF","body":"The current test coverage in unreleased version: https:\/\/1894-14579099-gh.circle-artifacts.com\/0\/tmp\/circle-artifacts.mLgBx3K\/coverage-reports\/py27-optional\/plotly_figure_factory__violin_py.html at 62%\r\n\r\n\r\n\r\n","comments":[],"labels":["testing"]},{"title":"Frames api interface","body":"For creating plots with frames, it would be ideal if we can have an interface that matches closely to the plotly.js interface - something like\r\n\r\n```py\r\npy.plot(data=data, layout=layout, frames=frames)\r\n```\r\n\r\nwould be awesome, and let plotly.py handle the internals of creating the references to grid data (e.g. `xsrc` and `ysrc` values).\r\n","comments":["+1 plotly.js *and* the [`offline.plot()` syntax](https:\/\/plot.ly\/python\/animations\/#moving-point-on-a-curve)"],"labels":["enhancement","plot.ly","legacy-versions"]},{"title":"Feature Request:  Directed graph figure factory","body":"Please think about adding arrows to line graphs.  That way we can plot DiGraph from NetworkX and have it look right in Plot.ly.  Using the arrows on annotations doesn't work so well.  Thanks for a great tool!\n","comments":["Agree. Drawing a directed graph is a really common use case.","I think the best way forward here would to create a graph\/di_graph figure factory.  Arrows could be drawn with annotations, or they could be simulated with `scatter` traces as they are in the [`create_quiver`](https:\/\/plot.ly\/python\/quiver-plots\/) figure factory.\r\n\r\nIf we input a NetworkX graph directly, we could also do some interesting things with the node\/edge metadata.  e.g. coloring nodes against a colormap, adding node\/edge hover tooltips, etc. ","Some addional notes from #839\r\n\r\n---\r\nMy idea for implementing the variable edge widths in the figure factory would be to discretize the continuous edge weight values into 10-15 bins.  Then for each binned width value, create one `scattergl` trace that has that width and includes all of the graph edges in that bin.  With this approach, I would expect we could support graphs of over 100k total nodes+edges.\r\n\r\nVariable edge colors could be supported in the same way, but discretizing the numeric color values and creating a single trace per binned color value."],"labels":["enhancement","\u2665 NEEDS SPON$OR"]},{"title":"Add support for transform graph objects","body":"plotly.js [`v1.18.0`](https:\/\/github.com\/plotly\/plotly.js\/releases\/tag\/v1.18.0) now ships with filter and groupby transforms. Transforms are a new plotly.js abstractions - they are incompatible with the current plotly.py plot-schema-to-graph-object logic.\n\nIn brief, any trace can now include a `\"transforms\"` list where each item is a dict with attributes. See example in js: http:\/\/codepen.io\/etpinard\/pen\/dpKLpq\n\ncc @Kully  @theengineear @chriddyp \n","comments":["@etpinard , I know that there's been some back and forth on the current transforms implementation. Should we hold off on adding this to plotly.py or go ahead with it?","> Should we hold off on adding this to plotly.py or go ahead with it?\r\n\r\nI'd vote for holding off. ","I\u2019m confused: there\u2019s this example:\r\n\r\nhttps:\/\/plot.ly\/python\/group-by\/\r\n\r\nbut it sets `validate=False`. does this mean it\u2019s an experimental implementation?"],"labels":["enhancement"]},{"title":"colorbar is not working","body":"This simple example is not working:\n\n``` python\nimport matplotlib.pyplot as plt\nimport plotly.plotly as py\npy.sign_in(?,?)\nplt.ion()\nfig = plt.figure()\ncm = plt.cm.get_cmap('RdYlBu')\nxy = range(20)\nz = xy\nsc = plt.scatter(xy, xy, c=z, vmin=0, vmax=20, s=35, cmap=cm)\nplt.colorbar(sc)\nplt.show()\n\nplot_urlfig1 = py.plot_mpl(fig)\nprint plot_urlfig1\n```\n\nI get this \n\n> Dang! That path collection is out of this world. I totally don't know what to do with it yet! Plotly can only import path collections linked to 'data' coordinates\n\n![image](https:\/\/cloud.githubusercontent.com\/assets\/8983713\/17836432\/89d88a8c-679b-11e6-94fb-f60619783a6b.png)\n\nand the colorbar is missing\n\nThanks.\n","comments":[],"labels":["matplotlylib"]},{"title":"Can't add subplot titles\/horizontal spacing to 3d subplots","body":"I've got this:\n\n```\nfig = tools.make_subplots(\n    rows = 2,\n    cols = 2,\n    specs = [\n        [{'is_3d': True}, {'is_3d': True}],\n        [{'is_3d': True}, {'is_3d': True}]\n    ],\n    horizontal_spacing = 0.001,\n    vertical_spacing = 0.000001\n)\n```\n\nand I'm unable to add this:\n\n`subplot_titles = ('title1', 'title2', 'title3', 'title4'),`\n\nI'm running 1.12.3. Here's the error when I try to add _just_ one title, and it's the same if I do four:\n\n```\nTraceback (most recent call last):\n  File \"wildhorsesbf.py\", line 514, in <module>\n    subplot_titles = ('srbfb'),\n  File \"C:\\Python27\\lib\\site-packages\\plotly\\tools.py\", line 1312, in make_subplots\n    plot_titles.append({'y': subtitle_pos_y[index],\nIndexError: list index out of range\n```\n","comments":["I am running into this error on my machine as well even without the spacing arguments.\n\n```\nfig = tools.make_subplots(\n    rows = 2,\n    cols = 2,\n    specs = [\n        [{'is_3d': True}, {'is_3d': True}],\n        [{'is_3d': True}, {'is_3d': True}]\n    ]\n)\n```\n","@jjc12 @eulerreich I have a hacky workaround, add the kwarg `shared_xaxes=True`.\r\n\r\nIt doesn't actually make the xaxis shared (I don't know if that is even possible in 3D) but does get rid of the error and make the titles appear for me.\r\n\r\nThis issue comes from this block of code ([`plotly\/tools.py#L1225-L1235`](https:\/\/github.com\/plotly\/plotly.py\/blob\/692b5aec3bf0112797bf037c9d73f05aa144aa73\/plotly\/tools.py#L1225-L1267)), so I figured if I could make it take the other conditional path it might work and it did.\r\n\r\nMy guess is that for 3D plots the `list_of_domains` is not ever populated. There seems to be a way to avoid using the `make_subplots` method (https:\/\/plot.ly\/python\/subplots\/#multiple-subplots). In that example its for 2D plots but I guess you could to the same for 3D plots. The `make_subplots` adds a `fig['annotations']` entry on [`plotly\/tools.py#L1267`](https:\/\/github.com\/plotly\/plotly.py\/blob\/692b5aec3bf0112797bf037c9d73f05aa144aa73\/plotly\/tools.py#L1267), so I guess in theory you could manually add the titles, but thats probably quite fiddly.\r\n\r\nI hope this workaround works for you \ud83d\ude04 ","As for version 3.5.0, the workaround from @Galadirith sadly does not work anymore","Is there a new workaround? I'm running into this bug right now. \r\n","@Xirious I just ran into this issue and used a quick (hack-y) workaround based on the insight from @Galadirith. Since subplot titles are generated as annotations, creating an equivalent figure without 3D subplots and then copying the annotations into the target figure seems to work. Don't know about solving the spacing issue.\r\n\r\nModifying the 3D-subplots example ([https:\/\/plot.ly\/python\/3d-subplots\/](https:\/\/plot.ly\/python\/3d-subplots\/)): \r\n\r\n~~~~\r\nfig = tools.make_subplots(rows=2, cols=2,\r\n                          specs=[[{'is_3d': True}, {'is_3d': True}],\r\n                                 [{'is_3d': True}, {'is_3d': True}]])\r\n\r\nannotations = tools.make_subplots(rows=2, cols=2,\r\n                          subplot_titles=('Plot 1', 'Plot 2', 'Plot 3', 'Plot 4')\r\n                                 )['layout']['annotations']\r\n\r\nfig['layout'].update(annotations=annotations)\r\n~~~~\r\n\r\n![newplot (1)](https:\/\/user-images.githubusercontent.com\/15705900\/56069098-4e03cd80-5d36-11e9-9e33-7f9e832e3225.png)"],"labels":["bug","make_subplots"]},{"title":"Converting Matplotlib to Plotly barcharts won't plot negative values","body":"I've been trying to convert some matplotlib charts to plotly however when I try to use negative values in the dataset for plotly's barcharts, plotly is unable to plot these values correctly. I have no idea why. Below I plot a simple barchart using matplotlib and then plotly to demonstrate.\n\n```\n# plotly version 1.9.6, Python 3.5.1, Windows 8.1\n# MATPLOTLIB VERSION\n\nN = 10\nx = np.arange(10)\ny = np.linspace(-5, 5, N)\nprint(y)\nwidth = .8\n\nfig = plt.figure()\nax = plt.gca()\nax.bar(x, y, width)\n```\n\n![matplotlylib_matplotlib barchart](https:\/\/cloud.githubusercontent.com\/assets\/7452471\/14049060\/2c19d3d0-f278-11e5-94de-6d52114b20b3.png)\n\n```\n# plotly version 1.9.6, Python 3.5.1, Windows 8.1\n# PLOTLY VERSION\n\nN = 10\nx = np.arange(10)\ny = np.linspace(-5, 5, N)\nprint(y)\nwidth = .8\n\nfig = plt.figure()\nax = plt.gca()\nax.bar(x, y, width)\npy.iplot_mpl(fig)\n```\n\n![matplotlylib_plotly barchart](https:\/\/cloud.githubusercontent.com\/assets\/7452471\/14049079\/4b2e49c2-f278-11e5-8925-5e7223f4f5d3.png)\n\nPlease advise. Thanks!\n","comments":["I have the exact same problem, any idea how to solve? Thanks very much. "],"labels":["matplotlylib"]},{"title":"more helpful error message when you set an invalid config or credentials key","body":"![image](https:\/\/cloud.githubusercontent.com\/assets\/1280389\/13064117\/e1c4dabe-d41d-11e5-8349-db0b06567b32.png)\n\nwe just say \"is invalid\" but it'd be nice to know which ones _were_ valid\n","comments":["Made a slight change here: [https:\/\/github.com\/plotly\/plotly.py\/pull\/407](url)\n"],"labels":["enhancement","plot.ly","legacy-versions"]},{"title":"Use tempfile module to create temporary file for offline.plot","body":"Right now the default file that `plotly.offline.plot` outputs to is `temp-plot.html` in the current working directory. I think it would be better to create a real temporary file using e.g. `tempfile.NamedTemporaryFile` so as not to pollute the current working directory?\n\nHappy to contribute this myself but thought I'd test the waters first. :)\n","comments":["Another advantage would be avoiding the situation where you make two calls to `plot` in one script without specifying a file, and two browser windows are naturally opened up, but often both contain the second plot.\n","hey @joshburkart - \nI'm a bit hesitant to use random filenames or temporary files because I think some users could accidentely fill up their hard-drive with a bunch of temporary plot files:\n\n```\nwhile True:\n   plot(figure) # no filename specified - if we create a random filename, then this will create a new file on every iteration\n```\n\nIs my understanding of `tempfile` correct here?\n\n> Another advantage would be avoiding the situation where you make two calls to plot in one script without specifying a file, and two browser windows are naturally opened up, but often both contain the second plot.\n\nI totally agree with you on this - it's really easy to accidentely overwrite a file the way we have it set up right now. \n\nI'm open to other suggestions!\n","Let's revisit this as a configuration option when get to working on the `plotly.io.show` module (https:\/\/github.com\/plotly\/plotly.py\/issues\/1098)"],"labels":["enhancement"]},{"title":"Workflow for displaying multiple small graphs in notebook with expansion\/details on click","body":"For example: assume each row can show 3 figures (maybe we can also adjust the number for very big displays), the output could be like:\n\nfig0 fig1 fig2\nfig3 fig4 fig5\nfig6 ...\n\nwhen we click a figure, it can expand to 100% in width.\n\nThis is very important for dense experiment work, such as CNN (Deep learning). We can plot neuron weights for many neurons (a heatmap for each neuron) easily. And we don't lose global views.\n\nWe don't use subplot because it needs to determine the numbers first and we need to hold the handle of a panel. (We don't like too much intrusive code in the framework for assist purpose)\n\nDo you think it can be integrated?\n","comments":["Would also very much appreciate this feature\n","Perhaps this could be done as a `FigureWidget` based extension of the WIP sparklines figure factory https:\/\/github.com\/plotly\/plotly.py\/pull\/888"],"labels":["enhancement"]},{"title":"TODO: matplotlib-build-wip","body":"https:\/\/github.com\/plotly\/plotly.py\/blob\/31ca2c79d2c65c20d5e3024482daeeb3887a236f\/plotly\/tests\/test_optional\/test_offline\/test_offline.py#L15-L23\n","comments":[],"labels":["matplotlylib"]},{"title":"ax3.spines['left'].set_position('zero') does not work","body":"This code results in python\n\n``` python\n%pylab\nfrom plotly import tools\nimport plotly.plotly as py\npy.sign_in('?',?')\nimport plotly.graph_objs as go\n\n\nfig = figure()\nax3 = subplot2grid((2,2),(0,1),rowspan=2)\nax1 = subplot2grid((2,2),(0,0))\nax2 = subplot2grid((2,2),(1,0))\n\n\n\nax1.plot([-1,2],[-5,2])\nax2.plot([-1,2],[-2,3])\nax3.plot([-4,2],[-7,3])\n\n\nax3.spines['left'].set_position('zero')\nax3.spines['right'].set_color('none')\nax3.spines['bottom'].set_position('zero')\nax3.spines['top'].set_color('none')\nax3.spines['left'].set_smart_bounds(True)\nax3.spines['bottom'].set_smart_bounds(True)\nsuptitle('C231100A3')\nplot_url = py.plot_mpl(fig)\n```\n\n![image of](https:\/\/cloud.githubusercontent.com\/assets\/8983713\/12297072\/0b8cad5a-ba14-11e5-9e38-89acf5895f0b.png)\n\nbut it results with this image (on the website)\n\n![image](https:\/\/cloud.githubusercontent.com\/assets\/8983713\/12297090\/1ea9e60a-ba14-11e5-9b33-1207e5d3b412.png)\n","comments":[],"labels":["matplotlylib"]},{"title":"Use plot title or axes tables as default filename instead of 'plot from API'","body":"","comments":[],"labels":["enhancement","plot.ly","legacy-versions"]},{"title":"display static images on nbconvert export","body":"https:\/\/github.com\/plotly\/python-api\/commit\/b1ec43030b19f3244af07e127c48976b88ec851b took out `_repr_png` etc methods on `iplot` because of performance.\n\nan alternative might be to display the image in HTML, and remove it from the `DOM` once the graph is loaded. then, in `nbconvert`, only the image will be present in the `DOM`. \n\nA WIP is here: https:\/\/github.com\/plotly\/python-api\/pull\/183\n","comments":["This is actually now possible in JupyterLab when using `iplot` with the `@jupyterlab\/plotly-extension`.  This extension adds a `png` representation of the plot to the mime bundle right after the plot is rendered.  This png representation is saved to the notebook where it is available to nbconvert. See\r\n\r\nhttps:\/\/github.com\/jupyterlab\/jupyter-renderers\/blob\/660d1529b75849e14cbe10922ff83a24fe328e61\/packages\/plotly-extension\/src\/index.ts#L77-L91\r\n\r\nThat said, with the orca integration it would also be possible to populate this image from the Python kernel, and provide configuration options for image format and quality settings.\r\n\r\n"],"labels":["enhancement"]},{"title":"Incorrect py.plot() \/ py.iplot() kwargs don't throw error","body":"Specifically sharing='...' \n(Ie if you type privacy='...' or something else)\n","comments":[],"labels":["enhancement","plot.ly","legacy-versions"]},{"title":"iplot_mpl is not working when converting from Matlab figure","body":"I don't understand what is going on here but I'm getting a RuntimeError: Cannot get window extent w\/o renderer when I try to convert a Matplolib chart in Plotly via iplot_mpl. The code for the chart is:\n\nidx = returns.index\nfig, ax = plt.subplots(figsize=(12,9))\nax.plot(idx.to_pydatetime(), returns)\nax.plot(idx.to_pydatetime(), 2 \\* np.exp(trace[s][::25].T), 'r', alpha = .03, linewidth=0.5)\nax.plot(idx.to_pydatetime(), -2 \\* np.exp(trace[s][::25].T), 'r', alpha = .03, linewidth=0.5)\nax.plot(idx.to_pydatetime(), 2 \\* rolling_std(returns, 20), 'm', lw = 2.5, alpha = .75)\nax.plot(idx.to_pydatetime(), -2 \\* rolling_std(returns, 20), 'm', lw = 2.5, alpha = .75)\nl1 = plt.Rectangle((0, 0), 1, 1)\nl2 = plt.Rectangle((0, 0), 1, 1, fc=\"r\")\nl3 = plt.Rectangle((0, 0), 1, 1, fc=\"m\")\nplt.xlabel('Dates')\nplt.ylabel('Daily Returns')\nplt.title('S&P 500 Daily Returns and Stochastic vs Historical Volatility bands')\nplt.legend([l1,l2,l3],['daily returns', 'stochastic volatility', \n                       'historical volatility'], loc='best')\nplt.tight_layout()\npy.iplot_mpl(fig, name='stochatstic volatility')\n\nand what it does is taking three time series (returns, stochastic and historical volatility) and plot them. It's a bit fiddly as some data is sampled while some other is contained in a DataFrame and I need to convert line up the dates. What I find strange is that if I commented out the lines to produce the chart legend, plotly would happily render everything instead of throwing the error I mentioned. For completeness, here is the full trace back for that error.\n\n---\n\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-31-944c9ad93fee> in <module>()\n     15                        'historical volatility'], loc='best')\n     16 plt.tight_layout()\n---> 17 py.iplot_mpl(fig, name='stochatstic volatility')\n\n\/home\/bruno\/anaconda\/envs\/py3k\/lib\/python3.4\/site-packages\/plotly\/plotly\/plotly.py in iplot_mpl(fig, resize, strip_style, update, **plot_options)\n    292 \n    293     \"\"\"\n--> 294     fig = tools.mpl_to_plotly(fig, resize=resize, strip_style=strip_style)\n    295     if update and isinstance(update, dict):\n    296         try:\n\n\/home\/bruno\/anaconda\/envs\/py3k\/lib\/python3.4\/site-packages\/plotly\/tools.py in mpl_to_plotly(fig, resize, strip_style, verbose)\n    461     if _matplotlylib_imported:\n    462         renderer = matplotlylib.PlotlyRenderer()\n--> 463         matplotlylib.Exporter(renderer).run(fig)\n    464         if resize:\n    465             renderer.resize()\n\n\/home\/bruno\/anaconda\/envs\/py3k\/lib\/python3.4\/site-packages\/plotly\/matplotlylib\/mplexporter\/exporter.py in run(self, fig)\n     47             import matplotlib.pyplot as plt\n     48             plt.close(fig)\n---> 49         self.crawl_fig(fig)\n     50 \n     51     @staticmethod\n\n\/home\/bruno\/anaconda\/envs\/py3k\/lib\/python3.4\/site-packages\/plotly\/matplotlylib\/mplexporter\/exporter.py in crawl_fig(self, fig)\n    114                                        props=utils.get_figure_properties(fig)):\n    115             for ax in fig.axes:\n--> 116                 self.crawl_ax(ax)\n    117 \n    118     def crawl_ax(self, ax):\n\n\/home\/bruno\/anaconda\/envs\/py3k\/lib\/python3.4\/site-packages\/plotly\/matplotlylib\/mplexporter\/exporter.py in crawl_ax(self, ax)\n    145                 with self.renderer.draw_legend(legend=legend, props=props):\n    146                     if props['visible']:\n--> 147                         self.crawl_legend(ax, legend)\n    148 \n    149     def crawl_legend(self, ax, legend):\n\n\/home\/bruno\/anaconda\/envs\/py3k\/lib\/python3.4\/site-packages\/plotly\/matplotlylib\/mplexporter\/exporter.py in crawl_legend(self, ax, legend)\n    165                     if not (child is legend.get_children()[-1]\n    166                             and child.get_text() == 'None'):\n--> 167                         self.draw_text(ax, child, force_trans=ax.transAxes)\n    168                 elif isinstance(child, matplotlib.lines.Line2D):\n    169                     self.draw_line(ax, child, force_trans=ax.transAxes)\n\n\/home\/bruno\/anaconda\/envs\/py3k\/lib\/python3.4\/site-packages\/plotly\/matplotlylib\/mplexporter\/exporter.py in draw_text(self, ax, text, force_trans, text_type)\n    209                                     coordinates=coords,\n    210                                     text_type=text_type,\n--> 211                                     style=style, mplobj=text)\n    212 \n    213     def draw_patch(self, ax, patch, force_trans=None):\n\n\/home\/bruno\/anaconda\/envs\/py3k\/lib\/python3.4\/site-packages\/plotly\/matplotlylib\/renderer.py in draw_text(self, **props)\n    510         \"\"\"\n    511         self.msg += \"    Attempting to draw an mpl text object\\n\"\n--> 512         if not mpltools.check_corners(props['mplobj'], self.mpl_fig):\n    513             warnings.warn(\n    514                 \"Looks like the annotation(s) you are trying \\n\"\n\n\/home\/bruno\/anaconda\/envs\/py3k\/lib\/python3.4\/site-packages\/plotly\/matplotlylib\/mpltools.py in check_corners(inner_obj, outer_obj)\n     40 \n     41 def check_corners(inner_obj, outer_obj):\n---> 42     inner_corners = inner_obj.get_window_extent().corners()\n     43     outer_corners = outer_obj.get_window_extent().corners()\n     44     if inner_corners[0][0] < outer_corners[0][0]:\n\n\/home\/bruno\/anaconda\/envs\/py3k\/lib\/python3.4\/site-packages\/matplotlib\/text.py in get_window_extent(self, renderer, dpi)\n    794             self._renderer = renderer\n    795         if self._renderer is None:\n--> 796             raise RuntimeError('Cannot get window extent w\/o renderer')\n    797 \n    798         bbox, info, descent = self._get_layout(self._renderer)\n\nRuntimeError: Cannot get window extent w\/o renderer\n","comments":["@bpajusco I think this usually happens when the matplotlib version is > 1.3.1. Our conversion depends on a package that depends on 1.3.1. What version of matplotlib are you running?\n","That explains it as I'm on 1.4.3. Any plans to migrate on newer build \nversions at your end and does this mean that the problem will keep \nresurfacing every time plotly and matplotlib will be out of sync?\n\nThanks,\nBruno\n\nOn 27\/09\/15 11:15, Andrew wrote:\n\n> @bpajusco https:\/\/github.com\/bpajusco I think this usually happens \n> when the matplotlib version is > 1.3.1. Our conversion depends on a \n> package that depends on 1.3.1. What version of matplotlib are you running?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https:\/\/github.com\/plotly\/python-api\/issues\/288#issuecomment-143539710.\n","I'm still seeing this issue. Is there a workaround?"],"labels":["matplotlylib"]},{"title":"You can no longer do `py.sign_in(**py.get_credentials())`","body":"I think we should preserve the symmetry between `py.sign_in()`, `py.get_credentials()`, and `py.get_config()`.\n","comments":[],"labels":["enhancement","plot.ly","legacy-versions"]},{"title":"mkdirs returns an int, not a response object","body":"This makes it pretty hard to get a handle on the folder you just created, right?\n\nIt forces users to rely on using filename _paths_, which ends up requiring extra db hits on the backend.\n\nJust opening this up for discussion?\n\nhttps:\/\/github.com\/plotly\/python-api\/blob\/master\/plotly\/plotly\/plotly.py#L729\n","comments":[],"labels":["enhancement","plot.ly","legacy-versions"]},{"title":"Treemap figure factory","body":"Another wrapper that would be fairly straightforward. Could recycling code from here:\nhttps:\/\/github.com\/laserson\/squarify\n\nColor blocks could be done with heatmaps like this:\nhttps:\/\/plot.ly\/~MattSundquist\/3492\/golden-spiral-trace-1-fibonacci-numbers\/\n\nOr area plots like this:\nhttps:\/\/plot.ly\/~jackp\/9536\n\n^^^ This one came from the MATLAB tree map package.\n","comments":[],"labels":["enhancement"]},{"title":"Stem plot figure factory","body":"Here's another super easy wrapper for TraceFactory:\nhttp:\/\/matplotlib.org\/examples\/pylab_examples\/stem_plot.html\n\nMATLAB syntax:\nhttp:\/\/www.mathworks.com\/help\/matlab\/ref\/stem.html?refresh=true\n","comments":[],"labels":["enhancement"]},{"title":"support matplotlib 1.4.x","body":"We've got an old dependency for matplotlib 1.3.1 :(\n\nWe need to upgrade this to be more current. It will likely require some tweaks to mplexporter\/matplotlylib. It should be well tested though, which will help us along here.\n\nNote that _when_ we make this change, we really need to either (a) support 1.3.1 still or (b) make it _very_ clear that the user needs to upgrade.\n","comments":["The current stable version is [1.5](http:\/\/matplotlib.org\/1.5.0\/index.html). Has there been any progress on this?\n","@alkamid Unfortunately, not yet. We'll post here when we get this updated.\n","FWIW, always happy to look over PRs if anyone wants to dig into the `mplexporter` dep and update the `matplotlylib` code (for reference).\n"],"labels":["matplotlylib"]},{"title":"Get new marker colorbar into mpl conversions","body":"Here's a working example of how to maker a colorbar on a scatter plot.\n\n``` python\nimport plotly.plotly as py\nfig = {\n    \"data\": [{\n        \"marker\": {\n            \"color\": [0, -1, -2, -3, -4, -7, -8, -9, -33, -34, -35, -36, -37],\n            \"colorbar\": {\"title\": \"hi!\"}\n        },\n        \"y\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n        \"type\": \"scatter\",\n        \"mode\": \"markers\",\n    }],\n    \"layout\": {\"title\": \"scatter + colorbar = <3\", \"showlegend\": False}\n}\n\npy.iplot(fig, validate=False)\n```\n\nThis was completed in streambed in https:\/\/github.com\/plotly\/streambed\/pull\/2430\n","comments":[],"labels":["matplotlylib"]},{"title":"switch from clientresp to `api.plot.ly\/v2\/*` endpoints","body":"a _lot_ of care needs to be taken here. Note that all public users of plot.ly will be _OK_ if we just switch this, but private users of plot.ly will _not_ have the most updated backend.\n","comments":["@theengineear is the new plots endpoint live?\n\nHere, I guess we'll:\n- check if accessing public site: then use new endpoint\n- if using on-prem, then hit clientresp until next on-prem release\n- on next on-prem release, release a new client lib which will hit the new endpoing. if a 404 is returned, then it'll fallback to clientresp\n","@chriddyp , plot creation isn't supported yet. I'm on that this week as I attempt to prep us to migrate away from clientresp.\n\nAnd yeah, what you listed is along the lines of how I was thinking of dealing with the problem. Shouldn't be too bad :)\n"],"labels":["enhancement","V4"]},{"title":"better matplotlylib support","body":"This really hinges on getting serialization into matplotlib. However, even after that serialization happens, we'll need to do a significant amount of dev in matplotlylib to get everything in line.\n","comments":[],"labels":["matplotlylib"]},{"title":"More flexible config \/ credentials","body":"We should revamp (not necessarily in a backwards compatible way) how we do the `.config` and `.credentials`. Since we can migrate old\/new credentials\/confic files, backwards compatibility isn't 100% important. However, to keep us in sync with the other libraries, we should try.\n\nIt'd be cool if we could support the following:\n- default plot_options, i believe we have the machinery to do this, but we just don't.\n- multiple profiles, might be cool, in a major way for devs, actually.\n","comments":["+1. setting a default `world_readable` setting is going to a new step in configuring the library\n"],"labels":["enhancement"]},{"title":"Add update functionality to make_subplots","body":"@theengineear @chriddyp \n\nSo that axes can be generated with custom attributes.\n\nPerhaps like\n\n``` py\ntls.make_subplots(rows=4, cols=3, update_xaxes=dict(), update_yaxes=dict())\n```\n\nand\/or\n\n``` py\ntls.make_subplots(rows=2, cols=2, specs=[[{update_xaxis=dict(), update_yaxis=dict()}, {}], [{}, {}]])\n```\n\nmore info [here](http:\/\/stackoverflow.com\/questions\/30429127\/how-to-set-axis-properties-using-a-row-column-type-index-on-a-plotly-graph-creat).\n","comments":["I recall that we thought about adding an `axes` object or attribute to `Figure` and `Layout` to put axes into lists: https:\/\/github.com\/plotly\/python-api\/pull\/170#issuecomment-68758254\n\nwhich would allow easier: \n\n```\nfor axis in Figure.axes:\n  axis['showgrid'] = False\n```\n\nadding @aneda @cldougl\n","@chriddyp \n\nThe `for axis in Figure.axes` pattern works great when looping over all axes, but not so much when pinpointing one axis or a handful of axes among all axes - as presented in this [stack overflow Q](http:\/\/stackoverflow.com\/questions\/30429127\/how-to-set-axis-properties-using-a-row-column-type-index-on-a-plotly-graph-creat).\n","I still think that we're making a micro-language of the `make_subplots` call. I just feel like you need to (1) understand plotly json syntax and now (2) understand all of `make_subplots` to grok this code. That said, it's clearly a need if we're getting SO hits on it.\n\n@etpinard the second method you suggest covers the user's needs, so I'd vote for that, even if it's a little more verbose.\n\nCould we do something like this (and maybe this is what you were getting at with the first approach)?\n\n``` python\ntls.make_subplots(rows=2, cols=2, axes_updates=[\n    {'target_axis': 'x', 'row': 1, 'col': 2, 'update': {'title': 'blah'},\n    {'target_axis': 'all', 'row': 1, 'col': 2, 'update': {'type': 'log'}\n])\n```\n\nThat _feels_ more readable to me. But maybe it's (1) not possible given how the code works or (2) working outside the `specs` system when we don't have to.\n\n(2) cents : D\n"],"labels":["enhancement","make_subplots"]},{"title":"get fid from filename","body":"With our new API endpoints (https:\/\/api.plot.ly\/v2\/), we'll need an easy way to either get the file-id from the filename, or allow the filename and the file-id to be interchangable in the functions that we expose.\n","comments":[":+1: related: https:\/\/github.com\/plotly\/streambed\/issues\/1558\n","Hey! Recently closed that issue ^^ so we can do this!\n"],"labels":["enhancement","plot.ly","legacy-versions"]},{"title":"Edit (workspace) url cannot be pasted into get_figure.","body":"This works: `https:\/\/plot.ly\/~user\/66`\nThis doesn't work: `https:\/\/plot.ly\/66\/~user`\n","comments":[],"labels":["bug","plot.ly","legacy-versions"]},{"title":"support axhline\/axvline exports from mpl with annotations in plotly","body":"Since axh(v)lines live in two coordinate systems, we haven't been exporting them. However, a nice solution is to add a headless arrow from an annotation in Plotly which can live just fine in both data _and_ page coordinates.\n","comments":["we now have shapes and lines!\n","w00t! this is great. Maybe it's worth patching together 1.4.x support for mpl and adding this in? I'm not sure how much effort that would take, but I think it might be worth it.\n","this may be naive (and slow), but could we just do rectangles and lines for all the MPL stuff that we can't crawl?\n","sorta. we still need to figure out _what_ some of those things are. For example, we want to make new annotations, not draw annotation boxes from mpl. Also we want to make the legend, not draw the little legend boxes.\n\nI think, yes, we get a lot of flexibility with this new info, but we'll end up adding confusing things to the plots if we're not careful.\n","Is there a way to generate axhline\/axvline directly in plotly as a workaround?\n\nI realize I can use the svg shapes and lines, but they break the autoscaling of the chart.\n","I realize now, the way to do this is to use the yref='paper'.\n","+1"],"labels":["matplotlylib"]},{"title":"Unable to plot python ggplot geom_area()","body":"I'm unable to create an area plot that uses ggplot's `geom_area()`. Here's an example to produce the ggplot figure:\n\n``` python\n%matplotlib inline\nfrom ggplot import *\nimport plotly.plotly as py\nimport pandas as pd\nimport numpy as np\n\n# py.sign_in('','')\n\ndata = pd.DataFrame({'x': np.arange(1,11), 'y': np.arange(1,11), 'ymin': np.arange(1,11)*.9, 'ymax': np.arange(1,11)*1.1})\n\np = ggplot(aes(x='x', y='y', ymin='ymin', ymax='ymax'), data=data) +\\\n    geom_area(aes(alpha=0.5)) +\\\n    geom_line()\n\np.draw()\n```\n\n![image](https:\/\/cloud.githubusercontent.com\/assets\/275114\/6072991\/2ce21720-ad5d-11e4-875b-8e2ad5d44421.png)\n\nAnd then if I draw to draw in plotly:\n\n``` python\npy.iplot_mpl(p.draw())\n```\n\n![image](https:\/\/cloud.githubusercontent.com\/assets\/275114\/6073003\/5a992d2a-ad5d-11e4-8c41-9e12265977ae.png)\n\nAny suggestions?\n","comments":[],"labels":["matplotlylib"]},{"title":"AttributeError: 'module' object has no attribute 'dpi'","body":"Attempting to write a blog post in which I run plotly on domino data labs python notebooks, I am running into this error:\n\nAttributeError: 'module' object has no attribute 'dpi'\n\nThe full error trace is available at the domino run url: https:\/\/app.dominodatalab.com\/earino\/domino_plotly#r\/54bffa7fe4b06f03e78c6d67\n\nI have made the project public, so feel free to run it.\n\nFull stack trace:\n\nTraceback (most recent call last):\n  File \"decision.py\", line 106, in <module>\n    plot_url = py.plot_mpl(plt)\n  File \"\/usr\/local\/lib\/python2.7\/dist-packages\/plotly\/plotly\/plotly.py\", line 283, in plot_mpl\n    fig = tools.mpl_to_plotly(fig, resize=resize, strip_style=strip_style)\n  File \"\/usr\/local\/lib\/python2.7\/dist-packages\/plotly\/tools.py\", line 371, in mpl_to_plotly\n    matplotlylib.Exporter(renderer).run(fig)\n  File \"\/usr\/local\/lib\/python2.7\/dist-packages\/plotly\/matplotlylib\/mplexporter\/exporter.py\", line 45, in run\n    fig.savefig(io.BytesIO(), format='png', dpi=fig.dpi)\nAttributeError: 'module' object has no attribute 'dpi'\n","comments":["@earino , are you using matplotlib 1.3.1 or a newer version? We still only support 1.3.1 but intend to support future matplotlib versions.\n","Greetings!\n\nYes, I believe so, if you go here:\n\nhttps:\/\/app.dominodatalab.com\/earino\/domino_plotly\n\nrequirements.txt has:\nmatplotlib==1.3.1\n\n(url: https:\/\/app.dominodatalab.com\/earino\/domino_plotly\/view\/requirements.txt?commitId=55e764a847fd3cdbd98f7f40435eb5aa5d2d85e9)\n\nand the code is:\nhttps:\/\/app.dominodatalab.com\/earino\/domino_plotly\/view\/decision.py?commitId=55e764a847fd3cdbd98f7f40435eb5aa5d2d85e9\n\nbasically, i am trying to convert the canonical example of classifier decision boundaries into a nice plotly graph.\n\nWhat other debug information can i provide? \n","@earino \n\nLooks like you passed `plt` into the py.plot_mpl() function. Try changing the following:\n\n``` python\nfigure.subplots_adjust(left=.02, right=.98)\n#plt.show()\npy.sign_in(os.environ['PLOTLY_USER'], os.environ['PLOTLY_PASSWORD'])\nplot_url = py.plot_mpl(plt)\n```\n\nTo:\n\n``` python\nfigure.subplots_adjust(left=.02, right=.98)\n#plt.show()\npy.sign_in(os.environ['PLOTLY_USER'], os.environ['PLOTLY_PASSWORD'])\nplot_url = py.plot_mpl(figure)  # <-- right here\n```\n\nLet us know if that works! Without an idea of what's getting visualized, I can't predict if it will copy over. However, if it doesn't work, I'd happily show you a way to plot with the plotly module alone.\n","Well, I'm embarrased. That worked, in that it generated a plot.\n\nNow, however, the problem is that the plot is fundamentally different :) So, the original plot I'm trying to produce is from here: http:\/\/scikit-learn.org\/stable\/auto_examples\/plot_classifier_comparison.html\n\nit is the best visualization i have ever seen of \"classifier decision boundaries.\" I literally took the code from this example, and added a call to py.plot_mpl() and it gave me:\n\nhttps:\/\/plot.ly\/~earinodomino\/10\n\nWhich is close, but definitely very different. In the run log I see the warning message:\n\n```\n Dang! That path collection is out of this world. I totally don't know what to do with it yet! Plotly can only   import path collections linked to 'data' coordinates\n```\n\nYou can see the whole run-log here: https:\/\/app.dominodatalab.com\/earino\/domino_plotly\/results\/54c27befe4b0f38272ad8711\n\nIs this simply a limitation of plotly, is there anything I can do differently?\n","@earino , the major issue is that matplotlib stores images for those heatmaps and we don't attempt to infer when images are data and what to do with it.\n\nHowever, we also thought this plot was great and used it as an example which you can find here:\n\nhttp:\/\/nbviewer.ipython.org\/github\/etpinard\/plotly-misc-nbs\/blob\/etienne\/ml-classifier-comp\/ml-classifier-comp.ipynb\n"],"labels":["matplotlylib"]},{"title":"Feature request: enable_notebook() command","body":"`mpld3` for example has a single command to turn all plots that are generated to d3 (`mpld3.enable_notebook()` I think). This would make it much easier if using plot.ly was just a single line at the beginning of the notebook rather than converting each figure.\n\nIn an email, Andrew had these concerns:\n\n```\n1. if you have a *bunch* of plots, this command is going to take forever right now, and won't be much fun\n2. you don't have any control of where those files will end up on your plotly account (and no way to give them filenames)\n3. you don't have control of updates to figures (update objects or strip_style args)\n```\n\nAll those points are valid. However, I think there's a good chunkg of users who don't care that much about 2. and 3. initially and just want to get going. Without any knowledge of the tool I could just use that command. Regarding 1., if I only want sections of my NB to use plot.ly I can easily section those with `enable_notebook` and `disable_notebook` calls.\n","comments":["@chriddyp and @etpinard , @twiecki already included some initial hesitations of mine above. Any additional thoughts?\n","Personally, I like the idea. \n\nSome details need to be worked out though.\n\nAbout 2:\n- How should we identify the figures made with `enable_notebook`  turned on ? Unlike `mpld3` every plotly figure needs to be saved and needs a filename. The implied filename in `enable_notebook` mode could be: \n  - the plot title (+ increment if duplicate)\n  - the name of the notebook (can we get that programmatically?) + increment\n  - other identifier or some combination of identifiers.\n- Maybe we could store all figures made with `enable_notebook` turned on in a plotly folder by default to improve organization ?\n-  Maybe we could print the implied filename and url in the notebook (below or above the iframe) to let users know where their figures are stored ?\n\nAbout 3:\n- Making `enable_notebook` take in the `plotly.plotly.plot` keyword arguments like `world_readable`, `strip_style`, etc. could be a nice compromise. \n- In addition, if a user wants an underlying figure object, these are always available via `plotly.plotly.get_figure` given the url of the plot.\n","Any update on this?\n","@twiecki , we've recently added in widget support which will make local versions of plots possible. With this, we may be able to allow iframes with live versions of the plots to be populated, though it woudn't require saving all of the plots unnecessarily to an account and proliferating unnamed figures in your profile on Plotly. I'll drop a note in here when if\/when we get closer to this feature.\n"],"labels":["matplotlylib"]},{"title":"New runtime error","body":"HI,\n\nI had some plotly code that had nicely produced Plotly from a 3 x 2 matplotlib multiplot.  Any example of the interactive 6-plot is shown here.\n\nhttp:\/\/nbviewer.ipython.org\/github\/hugadams\/FiberData\/blob\/master\/2014\/5_29_14\/Analysis\/Fiber2\/peg_overnight\/peg_overnight.ipynb\n\nNow when I run the same code, I get a RuntimeError.  The plot still works in matplotlib, so all I can figure is that it's a plotly issue?  I'm using `plotly 1.3.0`.  \n\nAny ideas?\n\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-3-71decdb19631> in <module>()\n      7 ts = ts.as_varunit(INTERVAL)\n      8 \n----> 9 six_plot_inter(ts, title='Full Data %.2f-%.2f%s' % (ts.columns[0], ts.columns[-1], INTERVAL), striplegend=True)\n\n<ipython-input-2-b8c750de4683> in six_plot_inter(_args, *_kwargs)\n     16           #           world_readable=False,\n     17                       height=650,\n---> 18                       update=_pyupdate) #Overwrite some mpl-conversion settings\n\n\/home\/glue\/Enthought\/Canopy_64bit\/User\/lib\/python2.7\/site-packages\/plotly\/plotly\/plotly.pyc in iplot_mpl(fig, resize, strip_style, update, **plot_options)\n    220 \n    221     \"\"\"\n--> 222     fig = tools.mpl_to_plotly(fig, resize=resize, strip_style=strip_style)\n    223     if update and isinstance(update, dict):\n    224         try:\n\n\/home\/glue\/Enthought\/Canopy_64bit\/User\/lib\/python2.7\/site-packages\/plotly\/tools.pyc in mpl_to_plotly(fig, resize, strip_style, verbose)\n    359     if _matplotlylib_imported:\n    360         renderer = matplotlylib.PlotlyRenderer()\n--> 361         matplotlylib.Exporter(renderer).run(fig)\n    362         if resize:\n    363             renderer.resize()\n\n\/home\/glue\/Enthought\/Canopy_64bit\/User\/lib\/python2.7\/site-packages\/plotly\/matplotlylib\/mplexporter\/exporter.pyc in run(self, fig)\n     47             import matplotlib.pyplot as plt\n     48             plt.close(fig)\n---> 49         self.crawl_fig(fig)\n     50 \n     51     @staticmethod\n\n\/home\/glue\/Enthought\/Canopy_64bit\/User\/lib\/python2.7\/site-packages\/plotly\/matplotlylib\/mplexporter\/exporter.pyc in crawl_fig(self, fig)\n    114                                        props=utils.get_figure_properties(fig)):\n    115             for ax in fig.axes:\n--> 116                 self.crawl_ax(ax)\n    117 \n    118     def crawl_ax(self, ax):\n\n\/home\/glue\/Enthought\/Canopy_64bit\/User\/lib\/python2.7\/site-packages\/plotly\/matplotlylib\/mplexporter\/exporter.pyc in crawl_ax(self, ax)\n    145                 with self.renderer.draw_legend(legend=legend, props=props):\n    146                     if props['visible']:\n--> 147                         self.crawl_legend(ax, legend)\n    148 \n    149     def crawl_legend(self, ax, legend):\n\n\/home\/glue\/Enthought\/Canopy_64bit\/User\/lib\/python2.7\/site-packages\/plotly\/matplotlylib\/mplexporter\/exporter.pyc in crawl_legend(self, ax, legend)\n    165                     if not (child is legend.get_children()[-1]\n    166                             and child.get_text() == 'None'):\n--> 167                         self.draw_text(ax, child, force_trans=ax.transAxes)\n    168                 elif isinstance(child, matplotlib.lines.Line2D):\n    169                     self.draw_line(ax, child, force_trans=ax.transAxes)\n\n\/home\/glue\/Enthought\/Canopy_64bit\/User\/lib\/python2.7\/site-packages\/plotly\/matplotlylib\/mplexporter\/exporter.pyc in draw_text(self, ax, text, force_trans, text_type)\n    209                                     coordinates=coords,\n    210                                     text_type=text_type,\n--> 211                                     style=style, mplobj=text)\n    212 \n    213     def draw_patch(self, ax, patch, force_trans=None):\n\n\/home\/glue\/Enthought\/Canopy_64bit\/User\/lib\/python2.7\/site-packages\/plotly\/matplotlylib\/renderer.pyc in draw_text(self, **props)\n    506         \"\"\"\n    507         self.msg += \"    Attempting to draw an mpl text object\\n\"\n--> 508         if not mpltools.check_corners(props['mplobj'], self.mpl_fig):\n    509             warnings.warn(\n    510                 \"Looks like the annotation(s) you are trying \\n\"\n\n\/home\/glue\/Enthought\/Canopy_64bit\/User\/lib\/python2.7\/site-packages\/plotly\/matplotlylib\/mpltools.pyc in check_corners(inner_obj, outer_obj)\n     39 \n     40 def check_corners(inner_obj, outer_obj):\n---> 41     inner_corners = inner_obj.get_window_extent().corners()\n     42     outer_corners = outer_obj.get_window_extent().corners()\n     43     if inner_corners[0][0] < outer_corners[0][0]:\n\n\/home\/glue\/Enthought\/Canopy_64bit\/User\/lib\/python2.7\/site-packages\/matplotlib\/text.pyc in get_window_extent(self, renderer, dpi)\n    737             self._renderer = renderer\n    738         if self._renderer is None:\n--> 739             raise RuntimeError('Cannot get window extent w\/o renderer')\n    740 \n    741         bbox, info, descent = self._get_layout(self._renderer)\n\nRuntimeError: Cannot get window extent w\/o renderer\n","comments":["@hugadams I'll take a look right now!\n\nCan you tell me what version of matplotlib you're using, i don't believe we support 1.4.x yet, fyi.\n","It is indeed 1.4.0.  Maybe that's the problem.\n\nOn Thu, Oct 23, 2014 at 2:34 PM, Andrew notifications@github.com wrote:\n\n> @hugadams https:\/\/github.com\/hugadams I'll take a look right now!\n> \n> Can you tell me what version of matplotlib you're using, i don't believe\n> we support 1.4.x yet, fyi.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/plotly\/python-api\/issues\/132#issuecomment-60286989.\n\n## \n\nAdam Hughes\nPhysics Ph.D Candidate\nGeorge Washington University\n","yeah, that could definitely be, it looks like the problem is the call to `corners()` on some mpl objects.\n\ndo you think you could try using 1.3.1 and see if it works? i think the alternative is going to be a long process to get us up to speed with 1.4.x (we're shooting for full workability in 1.5.x)\n","Alright, I'll give it a shot, thanks.\n\nOn Thu, Oct 23, 2014 at 2:46 PM, Andrew notifications@github.com wrote:\n\n> yeah, that could definitely be, it looks like the problem is the call to\n> corners() on some mpl objects.\n> \n> do you think you could try using 1.3.1 and see if it works? i think the\n> alternative is going to be a long process to get us up to speed with 1.4.x\n> (we're shooting for full workability in 1.5.x)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/plotly\/python-api\/issues\/132#issuecomment-60289003.\n\n## \n\nAdam Hughes\nPhysics Ph.D Candidate\nGeorge Washington University\n","I have the same problem. News?\n","I think the conclusion is that 1.4.x isn't yet supported so your best bet\nis to make a virtual environment (or just downgrade) to matplotlib 1.3\nuntil they are able to implement compatibility down the road.\n\nOn Sun, Nov 2, 2014 at 8:41 PM, Andrea Bedini notifications@github.com\nwrote:\n\n> I have the same problem. News?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/plotly\/python-api\/issues\/132#issuecomment-61433525.\n\n## \n\nAdam Hughes\nPhysics Ph.D Candidate\nGeorge Washington University\n"],"labels":["matplotlylib"]},{"title":"inf values dont work as they do in matplotlib","body":"a small discontinuity in matplotlib-> plotly  conversion. matplotlib can plot a vector with values of -inf, inf. they simply dont display the values. \nmpld3 (@jakevdp)  stops plotting at the last value, and plotly just fails, \n\nhttp:\/\/nbviewer.ipython.org\/gist\/arsenovic\/6a05b79b5224ae35ad9f\n\ni think expected behavior should be that of matplotlib, because you can see the inf's, but you dont have to clean the data. \n","comments":[],"labels":["matplotlylib"]},{"title":"X ticks orientation 90deg rotated in subplot","body":"Not sure how this happened.\n\n![screen shot 2014-08-21 at 7 21 26 pm](https:\/\/cloud.githubusercontent.com\/assets\/4041805\/4000185\/afd6a00e-2957-11e4-8c71-4e4c223bc2e6.png)\n\nIf it helps, here's my code:\n\n```\nfig = figure(figsize=(6,6))\nfor m in arange(0,len(data_IV_vs_T_vs_backgate)): \n    data = data_IV_vs_T_vs_backgate[m]\n    [Rmatup, Vmatup, Imatup, Rmatdown, Vmatdown, Imatdown, T, B] = data\n    ax = subplot(1,len(data_IV_vs_T_vs_backgate)+1,m+1)\n    colormap = cm.jet\n    colormap.set_gamma(1)\n    color_cycle = [colormap(i) for i in np.linspace(0, 0.9, len(Rmatup))]\n    ax.set_color_cycle(color_cycle)\n    for (t,I,R) in zip(T, Imatup, Rmatup):\n        label = 'T = ' + str(round(t*1e3)) + ' mK'\n        plot(I,R,label=label)\n    xlabel('$I_{dc} (A)$')\n    ylabel('$R_{xx,ac} (\\Omega)$')\n    title(measnames[m])\nwidth = 1000    # plot width in px\nheight = 500 # plot height in px\npy.iplot_mpl(fig,filename='\/superconductivity_XVII_LSM4_triton2\/Rxxac_vs_Idc_vs_T_vs_Vbg', width=width, height=height)\n```\n","comments":["@guenp, this one i'll have to look into a little more, my gut feeling is that it's a plotly default thinking that there isn't enough room for the xaxis labels there, but it might also be in the python library. I'll give you a quick fix for this one:\n\n``` python\nfig = figure(figsize=(6,6))\nfor m in arange(0,len(data_IV_vs_T_vs_backgate)): \n    data = data_IV_vs_T_vs_backgate[m]\n    [Rmatup, Vmatup, Imatup, Rmatdown, Vmatdown, Imatdown, T, B] = data\n    ax = subplot(1,len(data_IV_vs_T_vs_backgate)+1,m+1)\n    colormap = cm.jet\n    colormap.set_gamma(1)\n    color_cycle = [colormap(i) for i in np.linspace(0, 0.9, len(Rmatup))]\n    ax.set_color_cycle(color_cycle)\n    for (t,I,R) in zip(T, Imatup, Rmatup):\n        label = 'T = ' + str(round(t*1e3)) + ' mK'\n        plot(I,R,label=label)\n    xlabel('$I_{dc} (A)$')\n    ylabel('$R_{xx,ac} (\\Omega)$')\n    title(measnames[m])\nwidth = 1000    # plot width in px\nheight = 500 # plot height in px\nupdate = {\"layout\": {\"xaxis1\": {\"tickangle\": 0}, \"xaxis2\": {\"tickangle\": 0}}}\npy.iplot_mpl(fig,\n                  update=update,\n                  filename='\/superconductivity_XVII_LSM4_triton2\/Rxxac_vs_Idc_vs_T_vs_Vbg',\n                  width=width,\n                  height=height)\n```\n","again, thanks for these issue threads! always extremely helpful.\n","@theengineear thanks, this fixed my problem.\n"],"labels":["matplotlylib"]},{"title":"legend markers","body":"when I create a legend\n\n```\nlg = ax.legend(loc = 'center left', bbox_to_anchor = (0, 0.8), fontsize=16)\nlg.draw_frame(False)\n```\n\nthe label markers are not converted properly.\nmpl:\n![legend_mpl](https:\/\/cloud.githubusercontent.com\/assets\/4041805\/3999887\/b68e413e-2954-11e4-8ab3-479c7fc42714.png)\nplotly:\n![legend_ply](https:\/\/cloud.githubusercontent.com\/assets\/4041805\/3999886\/b68c53d8-2954-11e4-9387-21abb6b063c7.png)\n","comments":["@guenp, yes, this is a known issue that we're working on. I'll leave this open and let you know when it gets updated.\n\nIn the meantime, if you post a link to the actual live plotly graph here, I'd happily show you how to make these changes.\n\nThe _simplest_ thing you can do is simply _not_ draw a legend in matplotlib and then update the legend to be on with update:\n\n``` python\n## make some matplotlib figure here (don't create legend)\nupdate = {\"layout\": {\"showlegend\": True}}\npy.iplot_mpl(fig, update=update, filename=\"your-filename-here\")\n```\n\nFrom there, you can easily move the legend around in our webapp, or you could set it as follows:\n\n``` python\n## make some matplotlib figure here (don't create legend)\nupdate={\"layout\": {\"showlegend\": True, \"legend\": {\"x\": 0, \"y\": 1}}}\npy.iplot_mpl(fig, update=update, filename=\"your-filename-here\")\n```\n","@theengineear, thanks!\nHere's the plot: http:\/\/plotly.fys.ku.dk\/~guen\/27\nNow I'm having issues with hiding the legend labels for the interpolated curves.\n","ok, I fixed it by using this slightly hairy update :]\nupdate={\"layout\": {\"showlegend\": True, \"legend\": {\"x\": 0.1, \"y\": 0.85}},\n        \"data\": [{},{\"showlegend\": False}],}\n"],"labels":["matplotlylib"]},{"title":"double axis support","body":"Hi,\n\nI'm using this code to create a double axis plot:\n\n```\nfrom mpl_toolkits.axes_grid1 import host_subplot\nimport mpl_toolkits.axisartist as AA\n\nx = arange(0,10)\ny1 = rand(10)\ny2 = rand(10)\n\nfig = figure(figsize=(6,5))\n\nax1 = host_subplot(111, axes_class=AA.Axes)\nax2 = ax1.twinx()\nplt.subplots_adjust(right=1)\n\nax1.plot(x, y1,'.-')\nax2.plot(x, y2,'r.-')\n\nxlabel('x')\n\nax1.set_ylabel('y1', color='b')\nax2.set_ylabel('y2', color='r')\n\ntitle('Double axis plot')\nfig.tight_layout()\n```\n\n![doubleaxisplot](https:\/\/cloud.githubusercontent.com\/assets\/4041805\/3998232\/698900bc-2946-11e4-8116-ee6845b0798e.png)\n\nIs there a neat way to convert this to plotly? When I pass the fig to iplot_mpl it returns a gnarly error:\n\n```\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n<ipython-input-475-abb745724116> in <module>()\n     19 title('Double axis plot')\n     20 fig.tight_layout()\n---> 21 py.iplot_mpl(fig,filename='test')\n\n\/\/anaconda\/lib\/python2.7\/site-packages\/plotly\/plotly\/plotly.pyc in iplot_mpl(fig, resize, strip_style, update, **plot_options)\n    222 \n    223     \"\"\"\n--> 224     fig = tools.mpl_to_plotly(fig, resize=resize, strip_style=strip_style)\n    225     if update and isinstance(update, dict):\n    226         try:\n\n\/\/anaconda\/lib\/python2.7\/site-packages\/plotly\/tools.pyc in mpl_to_plotly(fig, resize, strip_style, verbose)\n    343     if _matplotlylib_imported:\n    344         renderer = matplotlylib.PlotlyRenderer()\n--> 345         matplotlylib.Exporter(renderer).run(fig)\n    346         if resize:\n    347             renderer.resize()\n\n\/\/anaconda\/lib\/python2.7\/site-packages\/plotly\/matplotlylib\/mplexporter\/exporter.pyc in run(self, fig)\n     47             import matplotlib.pyplot as plt\n     48             plt.close(fig)\n---> 49         self.crawl_fig(fig)\n     50 \n     51     @staticmethod\n\n\/\/anaconda\/lib\/python2.7\/site-packages\/plotly\/matplotlylib\/mplexporter\/exporter.pyc in crawl_fig(self, fig)\n    114                                        props=utils.get_figure_properties(fig)):\n    115             for ax in fig.axes:\n--> 116                 self.crawl_ax(ax)\n    117 \n    118     def crawl_ax(self, ax):\n\n\/\/anaconda\/lib\/python2.7\/site-packages\/plotly\/matplotlylib\/mplexporter\/exporter.pyc in crawl_ax(self, ax)\n    128                 if(hasattr(text, 'get_text') and text.get_text()):\n    129                     self.draw_text(ax, text, force_trans=ax.transAxes,\n--> 130                                    text_type=ttp)\n    131             for artist in ax.artists:\n    132                 # TODO: process other artists\n\n\/\/anaconda\/lib\/python2.7\/site-packages\/plotly\/matplotlylib\/mplexporter\/exporter.pyc in draw_text(self, ax, text, force_trans, text_type)\n    209                                     coordinates=coords,\n    210                                     text_type=text_type,\n--> 211                                     style=style, mplobj=text)\n    212 \n    213     def draw_patch(self, ax, patch, force_trans=None):\n\n\/\/anaconda\/lib\/python2.7\/site-packages\/plotly\/matplotlylib\/renderer.pyc in draw_text(self, **props)\n    491         \"\"\"\n    492         self.msg += \"    Attempting to draw an mpl text object\\n\"\n--> 493         if not mpltools.check_corners(props['mplobj'], self.mpl_fig):\n    494             warnings.warn(\"Looks like the annotation(s) you are trying \\n\" \n    495                           \"to draw lies\/lay outside the given figure size.\\n\\n\"\n\n\/\/anaconda\/lib\/python2.7\/site-packages\/plotly\/matplotlylib\/mpltools.pyc in check_corners(inner_obj, outer_obj)\n     37 \n     38 def check_corners(inner_obj, outer_obj):\n---> 39     inner_corners = inner_obj.get_window_extent().corners()\n     40     outer_corners = outer_obj.get_window_extent().corners()\n     41     if inner_corners[0][0] < outer_corners[0][0]:\n\n\/\/anaconda\/lib\/python2.7\/site-packages\/matplotlib\/text.pyc in get_window_extent(self, renderer, dpi)\n    750             self._renderer = renderer\n    751         if self._renderer is None:\n--> 752             raise RuntimeError('Cannot get window extent w\/o renderer')\n    753 \n    754         bbox, info, descent = self._get_layout(self._renderer)\n\nRuntimeError: Cannot get window extent w\/o renderer\n```\n","comments":["@guenp, I'm going to look into that error. In the mean time, here are some possible solutions for you:\nhttp:\/\/nbviewer.ipython.org\/gist\/theengineear\/c33160a3a73b12d5f88c\n\nThe problem is the shared-axes. While that's _definitely_ supported in Plotly, it's not yet being exported from matplotlib. I'll leave this issue thread open as we work on it. Thanks for the response!\n","@theengineear Thanks, this fix worked perfectly.\n","> The problem is the shared-axes. While that's definitely supported in Plotly, it's not yet being exported from matplotlib. I'll leave this issue thread open as we work on it. Thanks for the response!\r\n\r\nI ran across this thread trying to figure out what's going on with my offline output from plot_mpl. I can get plotly output from data I generated in matplotlib using the plot_mpl method, but the shared axis is not working.  Is this still an open issue (exporting shared axis from matplotlib)?\r\n"],"labels":["matplotlylib"]}]