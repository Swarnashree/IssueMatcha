[{"title":"Fix playback volume of mono sounds in the lwjgl3 backend","body":"Might fix #6784\r\n\r\nThe position of sound sources was set to (0,0,1) in 3D space, resulting in sounds not playing at full volume. This led to varying levels of audio output volume compared to other backends (stereo sounds weren't affected).\r\n\r\nThis PR sets the position to (0,0,0). In order to not break panning, I had to change the way how 2D panning works.\r\nIf pan is set to 0 (center), sound output shouldn't differ from playing an unpanned sound. This was the case with the original panning calculation and a default source position of (0,0,1).\r\n\r\nThe new panning calculation is based on this [comment](https:\/\/github.com\/kcat\/openal-soft\/issues\/194#issuecomment-392520073) by kcat, the author of OpenAL Soft. If you read the comment, you'll notice a mention of a second variant in the last block. I've chosen this method because the sound output closely matches the output prior to this PR.\r\n\r\nVisual comparison:\r\n`play(volume, pitch, pan)`\r\nThe red line indicates the maximum level of output.\r\n![pr](https:\/\/github.com\/libgdx\/libgdx\/assets\/108926\/b566afcd-bd4c-4c6b-ab43-f6717f459ff6)\r\n","comments":["It's different but sadly still not quite right, in terms of both amplitude and frequency response.\r\n\r\nThree-way comparison of a mono sound in this branch, a mono sound in 1.12.1, a stereo sound in this branch - in that order:\r\n\r\nhttps:\/\/github.com\/libgdx\/libgdx\/assets\/60154347\/00f8b8a0-a5d9-4d2c-94cc-e447ecf933ea\r\n\r\n(FLAC in MP4 container due to GitHub file restrictions - player is muted by default for some reason)\r\n\r\nThe files I'm using for testing (mono version is louder than each stereo channel): [boom-oggs.zip](https:\/\/github.com\/libgdx\/libgdx\/files\/14586341\/boom-oggs.zip)\r\n\r\nEdit: I think we're on the right track, though. By removing where `AL_DIRECT_CHANNELS_SOFT` is set, or setting it to the default `AL_FALSE`, I can get stereo sounds to sound bad like mono ones. Unfortunately, nothing I've done has made mono sounds sound good.","I also notice a slight difference. But for me it's minimal, barely audible, barely visible in the waveform. The difference in your mp4 is brutal. I honestly don't know what's going on.\r\n\r\nWell, even if it doesn't completely solve the problem for you, this PR is also a prerequisite for panning stereo sources, as stereo channels only remain separated at position (0,0,0) (if not panned). If we want to enable that in the future.","Stereo panning would be nice, and I think this makes mono sounds slightly better. Doesn't make them any worse, at least, so I'm not against this. I'm sure panning stereo sources works on GWT; don't see any reason why it shouldn't work for Android either since it just adjusts the volume of the left and right channels independently. iOS I'm not so sure on, but it's sorta the ugly duckling anyway and not a reason to hold desktop back. I'll repeat the experiment if you get stereo panning working, to see if that screws it up as well or if mono sources are a special case."],"labels":["desktop","audio"]},{"title":"Retire the gdx-lwjgl3-glfw-awt-macos extension","body":"Retire the gdx-lwjgl3-glfw-awt-macos extension in favour of LWJGL's own solution:\r\n\r\n```java\r\nif (SharedLibraryLoader.isMac) {\r\n    Configuration.GLFW_LIBRARY_NAME.set(\"glfw_async\");\r\n}\r\n```\r\n\r\nThis fixes #6896, #6989, #7059. It also seems to fix #6987 and #6992, but those crashes were hard to reproduce since they only seemed to happen very rarely. I couldn't reproduce #6872, but it might be fixed by this as well. ","comments":["When I tried this in gdx-liftoff, it didn't work any better than the AWT extension. I believe that was in the early days of LWJGL 3.3.3, and things may have changed, but you should try building a .jar version of the LWJGL3 tests and running it on Mac, resizing the window(s), moving them, etc. If it works for you, could you post that JAR here for other Mac users to test? I think so far the best solution is to do what Guacamole does and restart the JVM with the appropriate arguments for the platform. gdx-liftoff bundles StartupHelper with new LWJGL3 projects for this reason, which is mostly the same as the startup code in Guacamole. StartupHelper does also include some support for running on Windows when your username isn't all ASCII (which is a problem because LWJGL3 and libGDX copy DLLs into a temp directory by default, and that is normally inside the user's home dir, but libraries on Windows seem to only be load-able from ASCII paths).\r\n\r\nHere's the gdx-liftoff commit where I reverted the code that would be added here, because there were still problems:\r\n\r\nhttps:\/\/github.com\/libgdx\/gdx-liftoff\/commit\/ee645963f56e4ea0020b61d40bb395e13f861f2a#diff-ca301a9d8cc4f9ff71a5578872faca1a77eeacbe59089cd6d661249b69311c9d","Since LWJGL 3.3.1 (when this was introduced and when liftoff seems to have used it) LWJGL has pushed a couple of fixes for their async lib which seem to have resolved the initial issues. The jar file of the libGDX tests is too big to upload it here, so anyone else who wants to try this will have to clone libGDX and adapt the tests with the code snippet in the PR description above. On my end (M1 macbook) everything works quite well.\r\n\r\nUsing the `-XstartOnFirstThread` argument (either manually or by restarting the JVM) still has one advantage: the window [continues to be rendered](https:\/\/github.com\/libgdx\/libgdx\/pull\/7361\/files#diff-040a0bcb5d798c1906e75ea04d512d8a2ce33b694b8b1c4fe8edd6e6ffd9a2c5R79-R91) when it is resized."],"labels":["glfw-awt-macos"]},{"title":"performance: unnecessary window.makeCurrent() in LWJGL3 backend","body":"Please ensure you have given all the following requested information in your report.\r\n\r\n#### Issue details\r\nIn the main loop of a Lwjgl3Application there is a loop which iterates over all Lwjgl3Windows and calls window.makeCurrent() which triggers an OpenGL context switch using glfwMakeContextCurrent(). This is unnecessary to call repeatedly when there is only one single window. Optimizing this will cause my application to run around 10% faster.\r\n\r\nI suggest a simple change:\r\n\r\n```java\r\n                if (currentWindow != window) {\r\n                    window.makeCurrent();\r\n                    currentWindow = window;\r\n                }\r\n```\r\n\r\nThis is sufficient because currentWindow is null initially. So glfwMakeContextCurrent() will be called at least once.\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [x] Windows\r\n- [x] Linux\r\n- [x] macOS\r\n","comments":["Good catch! I think `currentWindow` would need to be set [here](https:\/\/github.com\/libgdx\/libgdx\/blob\/3d8cfb8ce3d86cdf0909ce298c38ecca53d50ea0\/backends\/gdx-backend-lwjgl3\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3Application.java#L560) as well, so that the right context is active in the first render pass after a second window is created. Do you want to submit a PR for this?","> Good catch! I think `currentWindow` would need to be set [here](https:\/\/github.com\/libgdx\/libgdx\/blob\/3d8cfb8ce3d86cdf0909ce298c38ecca53d50ea0\/backends\/gdx-backend-lwjgl3\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3Application.java#L560) as well, so that the right context is active in the first render pass after a second window is created. Do you want to submit a PR for this?\r\n\r\nYes, setting `currentWindow` to the created window and also calling `makeCurrent()` on the it [here](https:\/\/github.com\/libgdx\/libgdx\/blob\/3d8cfb8ce3d86cdf0909ce298c38ecca53d50ea0\/backends\/gdx-backend-lwjgl3\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3Application.java#L464) is also necessary for multi-window support. The additional call to `makeCurrent()` is only needed to update Gdx.graphics, Gdx.input, Gdx.gl, ... for the new active window (currently this is not happening ant therefore a bug in the current implementation).\r\n\r\nEdit: Alternatively, the context switch in `createGlfwWindow` could be reverted to the previous context at the end of the `createWindow` method which calls `glClearColor`, `glClear` and `glfwSwapBuffers` for the created window. In this case we would not need to update the `currentWindow` and also do not need to invoke `makeCurrent()`. I think this is a design question. Getting the current context is a simple call to `glfwGetCurrentContext`.\r\n\r\nI don't have a fork. As these are just a few lines it would probably be easier if someone else pushes\/PRs this.","you can edit file and submit a PR automatically using the github interface, go on the file, then click **edit**, it'll do the work for you","> you can edit file and submit a PR automatically using the github interface, go on the file, then click **edit**, it'll do the work for you\r\n\r\nI opened a PR: https:\/\/github.com\/libgdx\/libgdx\/pull\/7362"],"labels":["enhancement","LWJGL3"]},{"title":"Add config for automatic output device fetching on gwt","body":"fixes #7348","comments":["Maybe the limitation for the GWT backend should be mentioned on the interface? That it needs a special property to be set?\r\nOr maybe throwing a exception\/printing an error log when doing `getAvailableOutputDevices`, without the flag set on GWT?"],"labels":["gwt","audio"]},{"title":"Use official metal sources","body":"The [metal sources](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/backends\/gdx-backend-robovm-metalangle\/build.gradle) currently used by the robovm-metalangle backend are coming from a dead repo, see [readme](https:\/\/github.com\/kakashidinho\/metalangle\/).\r\n\r\nLibgdx should - at some point - use the official sources as they now cover a wider compatibility as the fork currently used.\r\nThe only issue is that there are no release binaries as far as I can see, so those would need to be built first, but the workflow files for this are in the fork repo, so shouldn't be too much effort.","comments":["While I agree moving to official Angle would be good I think it's not as simple as that. MGLKit API is not part of official Angle so the adapter framework would need to be created. https:\/\/github.com\/kakashidinho\/metalangle\/issues\/81 discusses this possibility but it seems the author doesn't have the time to work on it which suggests it's not such a low effort task."],"labels":["enhancement"]},{"title":"Textbutton over-offset","body":"Sorry if this is the wrong place, but couldn't find anywhere else. Saw that there was a label for feature requests so here I go;\r\n\r\nIt would be nice (and probably not too big a hurdle maybe?) to have an offset for when a TextButton is hovered, similar to how there's one for pressed, checked, unpressed. \r\n\r\nLooking through the source, checks using the isPressed() methods, then sets offset according to the button style. There is a isOver() method as well, so I was surprised when I didn't find a over-offset. \r\n\r\nIt was easy enough to work around but I feel like it would fit in with the other offset options. \r\n\r\nAgain if this is the wrong place, feel free to delete this, and I apologize in advance. ","comments":["I think this is reasonable. It would go in Button.ButtonStyle (not TextButtonStyle). The logic in Button#draw becomes:\r\n```\r\nfloat offsetX = style.unpressedOffsetX, offsetY = style.unpressedOffsetY;\r\nif (!isDisabled()) {\r\n\tif (isPressed()) {\r\n\t\toffsetX = style.pressedOffsetX;\r\n\t\toffsetY = style.pressedOffsetY;\r\n\t} else if (isChecked()) {\r\n\t\toffsetX = style.checkedOffsetX;\r\n\t\toffsetY = style.checkedOffsetY;\r\n\t} else if (isOver()) {\r\n\t\toffsetX = style.overOffsetX;\r\n\t\toffsetY = style.overOffsetY;\r\n\t}\r\n}\r\n```\r\nThis has a subtle difference: if not pressed and not checked, you get the over offset rather than the unpressed offset. That makes this a breaking change for apps that don't use 0 for unpressed offset. 0 for that is common, but the potential is there.\r\n\r\nIf everybody else is OK with that, I think it's OK."],"labels":["scene2d","feature request"]},{"title":"\"Extension string retrieval is broken\" when trying to run generated project with JDK 21 on linux","body":"Please ensure you have given all the following requested information in your report.\r\n\r\n#### Issue details\r\nI generated project from https:\/\/libgdx.com\/wiki\/start\/project-generation, selected only desktop and no extensions.\r\nAfter project was generated it didn't build at first (because core has source set to 1.7, which is not supported by JDK 21) - I set both core and desktop modules to 21 source level.\r\n\r\nAfter that I did `.\/gradlew desktop:run` and got following errors:\r\n```\r\n[LWJGL] GLFW_PLATFORM_ERROR error\r\n        Description : Extension string retrieval is broken\r\n        Stacktrace  :\r\n                org.lwjgl.glfw.GLFW.nglfwCreateWindow(GLFW.java:2058)\r\n                org.lwjgl.glfw.GLFW.glfwCreateWindow(GLFW.java:2229)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createGlfwWindow(Lwjgl3Application.java:527)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:463)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:449)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.<init>(Lwjgl3Application.java:163)\r\n                com.mygdx.game.DesktopLauncher.main(DesktopLauncher.java:13)\r\n[LWJGL] GLFW_PLATFORM_ERROR error\r\n        Description : Extension string retrieval is broken\r\n        Stacktrace  :\r\n                org.lwjgl.glfw.GLFW.nglfwCreateWindow(GLFW.java:2058)\r\n                org.lwjgl.glfw.GLFW.glfwCreateWindow(GLFW.java:2229)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createGlfwWindow(Lwjgl3Application.java:527)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:463)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:449)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.<init>(Lwjgl3Application.java:163)\r\n                com.mygdx.game.DesktopLauncher.main(DesktopLauncher.java:13)\r\n[LWJGL] GLFW_PLATFORM_ERROR error\r\n        Description : Extension string retrieval is broken\r\n        Stacktrace  :\r\n                org.lwjgl.glfw.GLFW.nglfwCreateWindow(GLFW.java:2058)\r\n                org.lwjgl.glfw.GLFW.glfwCreateWindow(GLFW.java:2229)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createGlfwWindow(Lwjgl3Application.java:527)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:463)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:449)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.<init>(Lwjgl3Application.java:163)\r\n                com.mygdx.game.DesktopLauncher.main(DesktopLauncher.java:13)\r\nException in thread \"main\" java.lang.NullPointerException\r\n        at org.lwjgl.system.Checks.check(Checks.java:188)\r\n        at org.lwjgl.system.MemoryUtil.memLengthNT1(MemoryUtil.java:2406)\r\n        at org.lwjgl.system.MemoryUtil.memASCII(MemoryUtil.java:2673)\r\n        at org.lwjgl.opengl.GL.createCapabilities(GL.java:442)\r\n        at org.lwjgl.opengl.GL.createCapabilities(GL.java:311)\r\n        at org.lwjgl.opengl.GL.createCapabilities(GL.java:295)\r\n        at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createGlfwWindow(Lwjgl3Application.java:572)\r\n        at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:463)\r\n        at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:449)\r\n        at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:449)\r\n        at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.<init>(Lwjgl3Application.java:163)\r\n        at com.mygdx.game.DesktopLauncher.main(DesktopLauncher.java:13)\r\n```\r\n\r\n\r\n#### Reproduction steps\/code\r\nThis is uploaded code (generated from the official web page with only desktop mode and changed build.gradle in core and desktop to have source code level set to 21) - https:\/\/github.com\/krzyk\/libgdx-test\r\n\r\nLinux, with Xorg, iGPU with unused nvidia GPU (everything runs on intel one).\r\nMaybe there is issue with selecting the correct GPU?\r\nOther applications that use OpenGL\/Vulcan are working fine (e.g steam games).\r\n\r\nI also tried the maven setup, which after I migrated to lwjgl3 gave exactly the same error\/stacktraces (with the default lwjgl2 it breaks in missing native link).\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\n1.12.1\r\n\r\n#### Stacktrace\r\n```java\r\n                org.lwjgl.glfw.GLFW.nglfwCreateWindow(GLFW.java:2058)\r\n                org.lwjgl.glfw.GLFW.glfwCreateWindow(GLFW.java:2229)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createGlfwWindow(Lwjgl3Application.java:527)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:463)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:449)\r\n                com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.<init>(Lwjgl3Application.java:163)\r\n                com.mygdx.game.DesktopLauncher.main(DesktopLauncher.java:13)\r\nException in thread \"main\" java.lang.NullPointerException\r\n        at org.lwjgl.system.Checks.check(Checks.java:188)\r\n        at org.lwjgl.system.MemoryUtil.memLengthNT1(MemoryUtil.java:2406)\r\n        at org.lwjgl.system.MemoryUtil.memASCII(MemoryUtil.java:2673)\r\n        at org.lwjgl.opengl.GL.createCapabilities(GL.java:442)\r\n        at org.lwjgl.opengl.GL.createCapabilities(GL.java:311)\r\n        at org.lwjgl.opengl.GL.createCapabilities(GL.java:295)\r\n        at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createGlfwWindow(Lwjgl3Application.java:572)\r\n        at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:463)\r\n        at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:449)\r\n        at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:449)\r\n        at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.<init>(Lwjgl3Application.java:163)\r\n        at com.mygdx.game.DesktopLauncher.main(DesktopLauncher.java:13)\r\n```\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [x] Linux\r\n- [ ] macOS\r\n","comments":["This looks to me like an Intel driver issue. This is more common on older Windows installations, but can happen on if your integrated graphics are either too old hardware-wise to support some common OpenGL feature, or they use newer hardware that hasn't had the drivers updated and so is using some barebones driver meant to work even on extremely old devices. I'm guessing other graphical applications are using the Nvidia GPU, and I'm not sure if Java has any way of suggesting to a Linux OS that it should run on the discrete GPU, if one is available. I don't know what distro\/version you're using, nor your CPU\/GPU versions. This is probably going to take some googling for your specific hardware situation -- but if you use Linux, you're probably used to that by now. My only Linux machine just had its battery nearly explode, so I can't do anything to reproduce right now.","No, other apps don't use nvidia (I don't have drivers for it installed at all) - I'm using purely Intel.\r\nQuite new kernel (`6.6.8`) and mesa+intel drivers compiled from sources a week or two ago.\r\n\r\nIntel CPU is not that old (`11th Gen Intel(R) Core(TM) i7-11850H`).\r\n\r\nAs for distro: `Ubuntu 20.04`, but as I mentioned I keep kernel and graphics drivers up to date on my own.\r\n\r\nI didn't notice such issues in any other apps, so I was quite surprised.\r\n\r\nGoogling unfortunately doesn't bring any useful data (almost nothing is there) :(\r\n\r\nI tried OpenJDK build from both Oracle and Temurin, both give the same results.\r\n\r\nvainfo output:\r\n```\r\nlibva info: VA-API version 1.21.0\r\nlibva info: User environment variable requested driver 'iHD'\r\nlibva info: Trying to open \/usr\/local\/lib\/dri\/iHD_drv_video.so\r\nlibva info: Found init function __vaDriverInit_1_21\r\nlibva info: va_openDriver() returns 0\r\nvainfo: VA-API version: 1.21 (libva 2.6.0)\r\nvainfo: Driver version: Intel iHD driver for Intel(R) Gen Graphics - 23.4.3 (32841e3dc)\r\n```","I did some tests and the app works on libgdx 1.11.0 and is broken on 1.12.0 and 1.12.1 (with the error above).\r\n\r\nI'll try to bisect to find the commit that broke it (hopefully I'll be able to build libgdx).\r\n","IMO the most likely culprits are the LWJGL 3 updates in 1.12.0 and 1.12.1. Instructions for building libGDX locally can be found [here](https:\/\/libgdx.com\/dev\/from-source\/).","I'm curious, is there a way to build just the desktop part of libgdx?\r\nVersion 1.11.x allowed to build without the Android SDK, but in 1.12 it is required to provide the SDK location\r\nIt is a PITA to download that SDK (considering that now it is a bit hard to download just that, AFAIR one has to download Android Studio) if I do just the desktop part.","Nevermind, went with Android Studio.\r\n\r\nSo the commit that broke the example app is b23419c535cd2b462087c1009c256ac279f66863\r\n\r\nWhich is just a library update, I probably should take it to lwjgl3, but I have zero knowledge how it is used, so I'm not sure I can give a good bug report there."],"labels":["bug","need more info","LWJGL3"]},{"title":"TiledMap can be loaded only in xml format and not json.","body":"Basically this is a request for new features. \r\n\r\nI would like to have the chance to load a map in json (.tmj) format from TILED. Right now only .tmx formats are loaded. \r\nMore i would like to have in the loader also a method to load a defined Tileset file (both formats as well) directly into a TiledMapTileSet. \r\n\r\nThanks a lot for your efforts.\r\nKeep up the incredible good work.\r\n","comments":[],"labels":["tilemap","feature request"]},{"title":"Added pauseWhenMinimized and pauseWhenLostFocus to Lwjgl3 backend","body":"PR does 2 things.\r\n\r\n1. It fixes `LifecycleListener` `pause\/resume` events not being fired on `Window` minimize\/restore. Without this change, `Timer`s  are not being paused on windows minimization nor any other application custom registered `LifecycleListener` informed. This will make Lwjgl3 consistent with the other backends behaviour.\r\n\r\n2. Adds a couple of flags to control behaviour on window minimizing\/maximizing as well as losing focus\/gaining focus. Default keeps old behaviour which is to pause on minimize and not to do anything on losing focus. It follows the same philosofy as the flags present in the old Lwjgl backend (`LwjglApplicationConfiguration`).\r\n\r\nQuick disclaimer. My knowledge of the specifics of Lwjgl3 is limited, I've tested (and modified to also display lifecycle events) using the simple `Lwjgl3DebugStarter`.","comments":[],"labels":["LWJGL3"]},{"title":"feat: RISCV native build support","body":"not tested yet, it needs LWJGL\/lwjgl3#890","comments":["Sooo, I was able to test it on my MilkV Mars board today, and it works!\r\n\r\nHere some beautiful pictures:\r\n![image_2023-11-11_01-54-45](https:\/\/github.com\/libgdx\/libgdx\/assets\/11720038\/fdff6542-7832-4860-bce4-4c2880518c50)\r\n![image_2023-11-11_01-58-15](https:\/\/github.com\/libgdx\/libgdx\/assets\/11720038\/228881c3-29e0-45c4-943a-e4bfb2873c80)\r\n![image_2023-11-11_01-59-10](https:\/\/github.com\/libgdx\/libgdx\/assets\/11720038\/f3762ad9-d8ee-4aa2-a2d0-32e91008da54)\r\n![image_2023-11-11_02-00-34](https:\/\/github.com\/libgdx\/libgdx\/assets\/11720038\/3fb4c513-8d7c-4674-ab8d-fe0d278beae5)\r\n\r\nAnd in case you are wondering, yes, the performance is currently terrible.\r\n\r\n<details open>\r\n<summary>This is what `glxinfo` gave me as info about the board<\/summary>\r\n\r\n```\r\nname of display: :1\r\nlibGL error: MESA-LOADER: failed to open starfive: \/usr\/lib\/dri\/starfive_dri.so: cannot open shared object file: No such file or directory (search paths \/usr\/lib\/riscv64-linux-gnu\/dri:\\$${ORIGIN}\/dri:\/usr\/lib\/dri, suffix _dri)\r\nlibGL error: failed to load driver: starfive\r\nlibGL error: MESA-LOADER: failed to open starfive: \/usr\/lib\/dri\/starfive_dri.so: cannot open shared object file: No such file or directory (search paths \/usr\/lib\/riscv64-linux-gnu\/dri:\\$${ORIGIN}\/dri:\/usr\/lib\/dri, suffix _dri)\r\nlibGL error: failed to load driver: starfive\r\ndisplay: :1  screen: 0\r\ndirect rendering: Yes\r\nserver glx vendor string: SGI\r\nserver glx version string: 1.4\r\nserver glx extensions:\r\n    GLX_ARB_context_flush_control, GLX_ARB_create_context, \r\n    GLX_ARB_create_context_no_error, GLX_ARB_create_context_profile, \r\n    GLX_ARB_fbconfig_float, GLX_ARB_framebuffer_sRGB, GLX_ARB_multisample, \r\n    GLX_EXT_create_context_es2_profile, GLX_EXT_create_context_es_profile, \r\n    GLX_EXT_fbconfig_packed_float, GLX_EXT_framebuffer_sRGB, \r\n    GLX_EXT_get_drawable_type, GLX_EXT_libglvnd, GLX_EXT_no_config_context, \r\n    GLX_EXT_texture_from_pixmap, GLX_EXT_visual_info, GLX_EXT_visual_rating, \r\n    GLX_MESA_copy_sub_buffer, GLX_OML_swap_method, GLX_SGIS_multisample, \r\n    GLX_SGIX_fbconfig, GLX_SGIX_pbuffer, GLX_SGIX_visual_select_group, \r\n    GLX_SGI_make_current_read\r\nclient glx vendor string: Mesa Project and SGI\r\nclient glx version string: 1.4\r\nclient glx extensions:\r\n    GLX_ARB_context_flush_control, GLX_ARB_create_context, \r\n    GLX_ARB_create_context_no_error, GLX_ARB_create_context_profile, \r\n    GLX_ARB_create_context_robustness, GLX_ARB_fbconfig_float, \r\n    GLX_ARB_framebuffer_sRGB, GLX_ARB_get_proc_address, GLX_ARB_multisample, \r\n    GLX_ATI_pixel_format_float, GLX_EXT_buffer_age, \r\n    GLX_EXT_create_context_es2_profile, GLX_EXT_create_context_es_profile, \r\n    GLX_EXT_fbconfig_packed_float, GLX_EXT_framebuffer_sRGB, \r\n    GLX_EXT_import_context, GLX_EXT_no_config_context, GLX_EXT_swap_control, \r\n    GLX_EXT_swap_control_tear, GLX_EXT_texture_from_pixmap, \r\n    GLX_EXT_visual_info, GLX_EXT_visual_rating, GLX_INTEL_swap_event, \r\n    GLX_MESA_copy_sub_buffer, GLX_MESA_query_renderer, GLX_MESA_swap_control, \r\n    GLX_NV_float_buffer, GLX_OML_swap_method, GLX_OML_sync_control, \r\n    GLX_SGIS_multisample, GLX_SGIX_fbconfig, GLX_SGIX_pbuffer, \r\n    GLX_SGIX_visual_select_group, GLX_SGI_make_current_read, \r\n    GLX_SGI_swap_control, GLX_SGI_video_sync\r\nGLX version: 1.4\r\nGLX extensions:\r\n    GLX_ARB_context_flush_control, GLX_ARB_create_context, \r\n    GLX_ARB_create_context_no_error, GLX_ARB_create_context_profile, \r\n    GLX_ARB_fbconfig_float, GLX_ARB_framebuffer_sRGB, \r\n    GLX_ARB_get_proc_address, GLX_ARB_multisample, \r\n    GLX_EXT_create_context_es2_profile, GLX_EXT_create_context_es_profile, \r\n    GLX_EXT_fbconfig_packed_float, GLX_EXT_framebuffer_sRGB, \r\n    GLX_EXT_no_config_context, GLX_EXT_texture_from_pixmap, \r\n    GLX_EXT_visual_info, GLX_EXT_visual_rating, GLX_MESA_copy_sub_buffer, \r\n    GLX_MESA_query_renderer, GLX_OML_swap_method, GLX_SGIS_multisample, \r\n    GLX_SGIX_fbconfig, GLX_SGIX_pbuffer, GLX_SGIX_visual_select_group, \r\n    GLX_SGI_make_current_read\r\nExtended renderer info (GLX_MESA_query_renderer):\r\n    Vendor: Mesa\/X.org (0xffffffff)\r\n    Device: softpipe (0xffffffff)\r\n    Version: 22.3.5\r\n    Accelerated: no\r\n    Video memory: 3893MB\r\n    Unified memory: no\r\n    Preferred profile: core (0x1)\r\n    Max core profile version: 3.3\r\n    Max compat profile version: 3.3\r\n    Max GLES1 profile version: 1.1\r\n    Max GLES[23] profile version: 3.1\r\nOpenGL vendor string: Mesa\/X.org\r\nOpenGL renderer string: softpipe\r\nOpenGL core profile version string: 3.3 (Core Profile) Mesa 22.3.5 (git-4f0ff776ff)\r\nOpenGL core profile shading language version string: 3.30\r\nOpenGL core profile context flags: (none)\r\nOpenGL core profile profile mask: core profile\r\nOpenGL core profile extensions:\r\n    GL_3DFX_texture_compression_FXT1, GL_AMD_conservative_depth, \r\n    GL_AMD_draw_buffers_blend, GL_AMD_gpu_shader_int64, \r\n    GL_AMD_multi_draw_indirect, GL_AMD_seamless_cubemap_per_texture, \r\n    GL_AMD_shader_stencil_export, GL_AMD_shader_trinary_minmax, \r\n    GL_AMD_texture_texture4, GL_AMD_vertex_shader_layer, \r\n    GL_AMD_vertex_shader_viewport_index, GL_ANGLE_texture_compression_dxt3, \r\n    GL_ANGLE_texture_compression_dxt5, GL_ARB_ES2_compatibility, \r\n    GL_ARB_ES3_1_compatibility, GL_ARB_ES3_compatibility, \r\n    GL_ARB_arrays_of_arrays, GL_ARB_base_instance, GL_ARB_blend_func_extended, \r\n    GL_ARB_buffer_storage, GL_ARB_clear_buffer_object, GL_ARB_clear_texture, \r\n    GL_ARB_clip_control, GL_ARB_color_buffer_float, \r\n    GL_ARB_compressed_texture_pixel_storage, GL_ARB_compute_shader, \r\n    GL_ARB_conditional_render_inverted, GL_ARB_conservative_depth, \r\n    GL_ARB_copy_buffer, GL_ARB_copy_image, GL_ARB_cull_distance, \r\n    GL_ARB_debug_output, GL_ARB_depth_buffer_float, GL_ARB_depth_clamp, \r\n    GL_ARB_derivative_control, GL_ARB_direct_state_access, \r\n    GL_ARB_draw_buffers, GL_ARB_draw_buffers_blend, \r\n    GL_ARB_draw_elements_base_vertex, GL_ARB_draw_indirect, \r\n    GL_ARB_draw_instanced, GL_ARB_enhanced_layouts, \r\n    GL_ARB_explicit_attrib_location, GL_ARB_explicit_uniform_location, \r\n    GL_ARB_fragment_coord_conventions, GL_ARB_fragment_layer_viewport, \r\n    GL_ARB_fragment_shader, GL_ARB_framebuffer_no_attachments, \r\n    GL_ARB_framebuffer_object, GL_ARB_framebuffer_sRGB, \r\n    GL_ARB_get_program_binary, GL_ARB_get_texture_sub_image, \r\n    GL_ARB_gpu_shader5, GL_ARB_gpu_shader_fp64, GL_ARB_gpu_shader_int64, \r\n    GL_ARB_half_float_pixel, GL_ARB_half_float_vertex, \r\n    GL_ARB_instanced_arrays, GL_ARB_internalformat_query, \r\n    GL_ARB_internalformat_query2, GL_ARB_invalidate_subdata, \r\n    GL_ARB_map_buffer_alignment, GL_ARB_map_buffer_range, GL_ARB_multi_bind, \r\n    GL_ARB_multi_draw_indirect, GL_ARB_occlusion_query2, \r\n    GL_ARB_parallel_shader_compile, GL_ARB_pipeline_statistics_query, \r\n    GL_ARB_pixel_buffer_object, GL_ARB_point_sprite, \r\n    GL_ARB_program_interface_query, GL_ARB_provoking_vertex, \r\n    GL_ARB_robustness, GL_ARB_sampler_objects, GL_ARB_seamless_cube_map, \r\n    GL_ARB_seamless_cubemap_per_texture, GL_ARB_separate_shader_objects, \r\n    GL_ARB_shader_atomic_counter_ops, GL_ARB_shader_atomic_counters, \r\n    GL_ARB_shader_bit_encoding, GL_ARB_shader_image_load_store, \r\n    GL_ARB_shader_image_size, GL_ARB_shader_objects, \r\n    GL_ARB_shader_stencil_export, GL_ARB_shader_storage_buffer_object, \r\n    GL_ARB_shader_subroutine, GL_ARB_shader_texture_lod, \r\n    GL_ARB_shading_language_420pack, GL_ARB_shading_language_include, \r\n    GL_ARB_shading_language_packing, GL_ARB_stencil_texturing, GL_ARB_sync, \r\n    GL_ARB_texture_buffer_object, GL_ARB_texture_buffer_object_rgb32, \r\n    GL_ARB_texture_buffer_range, GL_ARB_texture_compression_bptc, \r\n    GL_ARB_texture_compression_rgtc, GL_ARB_texture_cube_map_array, \r\n    GL_ARB_texture_filter_anisotropic, GL_ARB_texture_float, \r\n    GL_ARB_texture_gather, GL_ARB_texture_mirror_clamp_to_edge, \r\n    GL_ARB_texture_multisample, GL_ARB_texture_non_power_of_two, \r\n    GL_ARB_texture_query_levels, GL_ARB_texture_query_lod, \r\n    GL_ARB_texture_rectangle, GL_ARB_texture_rg, GL_ARB_texture_rgb10_a2ui, \r\n    GL_ARB_texture_stencil8, GL_ARB_texture_storage, \r\n    GL_ARB_texture_storage_multisample, GL_ARB_texture_swizzle, \r\n    GL_ARB_texture_view, GL_ARB_timer_query, GL_ARB_transform_feedback2, \r\n    GL_ARB_transform_feedback3, GL_ARB_transform_feedback_instanced, \r\n    GL_ARB_transform_feedback_overflow_query, GL_ARB_uniform_buffer_object, \r\n    GL_ARB_vertex_array_bgra, GL_ARB_vertex_array_object, \r\n    GL_ARB_vertex_attrib_64bit, GL_ARB_vertex_attrib_binding, \r\n    GL_ARB_vertex_buffer_object, GL_ARB_vertex_shader, \r\n    GL_ARB_vertex_type_10f_11f_11f_rev, GL_ARB_vertex_type_2_10_10_10_rev, \r\n    GL_ARB_viewport_array, GL_ATI_blend_equation_separate, \r\n    GL_ATI_texture_float, GL_ATI_texture_mirror_once, \r\n    GL_EXT_EGL_image_storage, GL_EXT_EGL_sync, GL_EXT_abgr, \r\n    GL_EXT_blend_equation_separate, GL_EXT_debug_label, \r\n    GL_EXT_depth_bounds_test, GL_EXT_draw_buffers2, GL_EXT_draw_instanced, \r\n    GL_EXT_framebuffer_blit, GL_EXT_framebuffer_multisample, \r\n    GL_EXT_framebuffer_multisample_blit_scaled, GL_EXT_framebuffer_object, \r\n    GL_EXT_framebuffer_sRGB, GL_EXT_packed_depth_stencil, GL_EXT_packed_float, \r\n    GL_EXT_pixel_buffer_object, GL_EXT_provoking_vertex, \r\n    GL_EXT_shader_integer_mix, GL_EXT_texture_array, \r\n    GL_EXT_texture_compression_dxt1, GL_EXT_texture_compression_rgtc, \r\n    GL_EXT_texture_compression_s3tc, GL_EXT_texture_filter_anisotropic, \r\n    GL_EXT_texture_integer, GL_EXT_texture_mirror_clamp, GL_EXT_texture_sRGB, \r\n    GL_EXT_texture_sRGB_R8, GL_EXT_texture_sRGB_RG8, \r\n    GL_EXT_texture_sRGB_decode, GL_EXT_texture_shared_exponent, \r\n    GL_EXT_texture_snorm, GL_EXT_texture_swizzle, GL_EXT_timer_query, \r\n    GL_EXT_transform_feedback, GL_EXT_vertex_array_bgra, \r\n    GL_EXT_vertex_attrib_64bit, GL_IBM_multimode_draw_arrays, \r\n    GL_KHR_context_flush_control, GL_KHR_debug, GL_KHR_no_error, \r\n    GL_KHR_parallel_shader_compile, GL_KHR_texture_compression_astc_ldr, \r\n    GL_KHR_texture_compression_astc_sliced_3d, GL_MESA_pack_invert, \r\n    GL_MESA_shader_integer_functions, GL_MESA_texture_signed_rgba, \r\n    GL_MESA_ycbcr_texture, GL_NV_conditional_render, GL_NV_copy_image, \r\n    GL_NV_depth_clamp, GL_NV_packed_depth_stencil, GL_NV_shader_atomic_float, \r\n    GL_OES_EGL_image, GL_S3_s3tc\r\n\r\nOpenGL version string: 3.3 (Compatibility Profile) Mesa 22.3.5 (git-4f0ff776ff)\r\nOpenGL shading language version string: 3.30\r\nOpenGL context flags: (none)\r\nOpenGL profile mask: compatibility profile\r\nOpenGL extensions:\r\n    GL_3DFX_texture_compression_FXT1, GL_AMD_conservative_depth, \r\n    GL_AMD_draw_buffers_blend, GL_AMD_multi_draw_indirect, \r\n    GL_AMD_seamless_cubemap_per_texture, GL_AMD_shader_stencil_export, \r\n    GL_AMD_shader_trinary_minmax, GL_AMD_texture_texture4, \r\n    GL_AMD_vertex_shader_layer, GL_AMD_vertex_shader_viewport_index, \r\n    GL_ANGLE_texture_compression_dxt3, GL_ANGLE_texture_compression_dxt5, \r\n    GL_APPLE_packed_pixels, GL_ARB_ES2_compatibility, \r\n    GL_ARB_ES3_1_compatibility, GL_ARB_ES3_compatibility, \r\n    GL_ARB_arrays_of_arrays, GL_ARB_base_instance, GL_ARB_blend_func_extended, \r\n    GL_ARB_buffer_storage, GL_ARB_clear_buffer_object, GL_ARB_clear_texture, \r\n    GL_ARB_clip_control, GL_ARB_color_buffer_float, GL_ARB_compatibility, \r\n    GL_ARB_compressed_texture_pixel_storage, GL_ARB_compute_shader, \r\n    GL_ARB_conditional_render_inverted, GL_ARB_conservative_depth, \r\n    GL_ARB_copy_buffer, GL_ARB_copy_image, GL_ARB_cull_distance, \r\n    GL_ARB_debug_output, GL_ARB_depth_buffer_float, GL_ARB_depth_clamp, \r\n    GL_ARB_depth_texture, GL_ARB_derivative_control, \r\n    GL_ARB_direct_state_access, GL_ARB_draw_buffers, \r\n    GL_ARB_draw_buffers_blend, GL_ARB_draw_elements_base_vertex, \r\n    GL_ARB_draw_indirect, GL_ARB_draw_instanced, GL_ARB_enhanced_layouts, \r\n    GL_ARB_explicit_attrib_location, GL_ARB_explicit_uniform_location, \r\n    GL_ARB_fragment_coord_conventions, GL_ARB_fragment_layer_viewport, \r\n    GL_ARB_fragment_program, GL_ARB_fragment_program_shadow, \r\n    GL_ARB_fragment_shader, GL_ARB_framebuffer_no_attachments, \r\n    GL_ARB_framebuffer_object, GL_ARB_framebuffer_sRGB, \r\n    GL_ARB_get_program_binary, GL_ARB_get_texture_sub_image, \r\n    GL_ARB_gpu_shader5, GL_ARB_gpu_shader_fp64, GL_ARB_half_float_pixel, \r\n    GL_ARB_half_float_vertex, GL_ARB_instanced_arrays, \r\n    GL_ARB_internalformat_query, GL_ARB_internalformat_query2, \r\n    GL_ARB_invalidate_subdata, GL_ARB_map_buffer_alignment, \r\n    GL_ARB_map_buffer_range, GL_ARB_multi_bind, GL_ARB_multi_draw_indirect, \r\n    GL_ARB_multisample, GL_ARB_multitexture, GL_ARB_occlusion_query, \r\n    GL_ARB_occlusion_query2, GL_ARB_parallel_shader_compile, \r\n    GL_ARB_pipeline_statistics_query, GL_ARB_pixel_buffer_object, \r\n    GL_ARB_point_parameters, GL_ARB_point_sprite, \r\n    GL_ARB_program_interface_query, GL_ARB_provoking_vertex, \r\n    GL_ARB_robustness, GL_ARB_sampler_objects, GL_ARB_seamless_cube_map, \r\n    GL_ARB_seamless_cubemap_per_texture, GL_ARB_separate_shader_objects, \r\n    GL_ARB_shader_atomic_counter_ops, GL_ARB_shader_atomic_counters, \r\n    GL_ARB_shader_bit_encoding, GL_ARB_shader_image_load_store, \r\n    GL_ARB_shader_image_size, GL_ARB_shader_objects, \r\n    GL_ARB_shader_stencil_export, GL_ARB_shader_storage_buffer_object, \r\n    GL_ARB_shader_subroutine, GL_ARB_shader_texture_lod, \r\n    GL_ARB_shading_language_100, GL_ARB_shading_language_420pack, \r\n    GL_ARB_shading_language_include, GL_ARB_shading_language_packing, \r\n    GL_ARB_shadow, GL_ARB_stencil_texturing, GL_ARB_sync, \r\n    GL_ARB_texture_border_clamp, GL_ARB_texture_buffer_object, \r\n    GL_ARB_texture_buffer_object_rgb32, GL_ARB_texture_buffer_range, \r\n    GL_ARB_texture_compression, GL_ARB_texture_compression_bptc, \r\n    GL_ARB_texture_compression_rgtc, GL_ARB_texture_cube_map, \r\n    GL_ARB_texture_cube_map_array, GL_ARB_texture_env_add, \r\n    GL_ARB_texture_env_combine, GL_ARB_texture_env_crossbar, \r\n    GL_ARB_texture_env_dot3, GL_ARB_texture_filter_anisotropic, \r\n    GL_ARB_texture_float, GL_ARB_texture_gather, \r\n    GL_ARB_texture_mirror_clamp_to_edge, GL_ARB_texture_mirrored_repeat, \r\n    GL_ARB_texture_multisample, GL_ARB_texture_non_power_of_two, \r\n    GL_ARB_texture_query_levels, GL_ARB_texture_query_lod, \r\n    GL_ARB_texture_rectangle, GL_ARB_texture_rg, GL_ARB_texture_rgb10_a2ui, \r\n    GL_ARB_texture_stencil8, GL_ARB_texture_storage, \r\n    GL_ARB_texture_storage_multisample, GL_ARB_texture_swizzle, \r\n    GL_ARB_texture_view, GL_ARB_timer_query, GL_ARB_transform_feedback2, \r\n    GL_ARB_transform_feedback3, GL_ARB_transform_feedback_instanced, \r\n    GL_ARB_transform_feedback_overflow_query, GL_ARB_transpose_matrix, \r\n    GL_ARB_uniform_buffer_object, GL_ARB_vertex_array_bgra, \r\n    GL_ARB_vertex_array_object, GL_ARB_vertex_attrib_64bit, \r\n    GL_ARB_vertex_attrib_binding, GL_ARB_vertex_buffer_object, \r\n    GL_ARB_vertex_program, GL_ARB_vertex_shader, \r\n    GL_ARB_vertex_type_10f_11f_11f_rev, GL_ARB_vertex_type_2_10_10_10_rev, \r\n    GL_ARB_viewport_array, GL_ARB_window_pos, GL_ATI_blend_equation_separate, \r\n    GL_ATI_draw_buffers, GL_ATI_fragment_shader, GL_ATI_separate_stencil, \r\n    GL_ATI_texture_compression_3dc, GL_ATI_texture_env_combine3, \r\n    GL_ATI_texture_float, GL_ATI_texture_mirror_once, \r\n    GL_EXT_EGL_image_storage, GL_EXT_EGL_sync, GL_EXT_abgr, GL_EXT_bgra, \r\n    GL_EXT_blend_color, GL_EXT_blend_equation_separate, \r\n    GL_EXT_blend_func_separate, GL_EXT_blend_minmax, GL_EXT_blend_subtract, \r\n    GL_EXT_compiled_vertex_array, GL_EXT_copy_texture, GL_EXT_debug_label, \r\n    GL_EXT_depth_bounds_test, GL_EXT_direct_state_access, \r\n    GL_EXT_draw_buffers2, GL_EXT_draw_instanced, GL_EXT_draw_range_elements, \r\n    GL_EXT_fog_coord, GL_EXT_framebuffer_blit, GL_EXT_framebuffer_multisample, \r\n    GL_EXT_framebuffer_multisample_blit_scaled, GL_EXT_framebuffer_object, \r\n    GL_EXT_framebuffer_sRGB, GL_EXT_gpu_program_parameters, \r\n    GL_EXT_gpu_shader4, GL_EXT_multi_draw_arrays, GL_EXT_packed_depth_stencil, \r\n    GL_EXT_packed_float, GL_EXT_packed_pixels, GL_EXT_pixel_buffer_object, \r\n    GL_EXT_point_parameters, GL_EXT_provoking_vertex, GL_EXT_rescale_normal, \r\n    GL_EXT_secondary_color, GL_EXT_separate_specular_color, \r\n    GL_EXT_shader_integer_mix, GL_EXT_shadow_funcs, GL_EXT_stencil_two_side, \r\n    GL_EXT_stencil_wrap, GL_EXT_subtexture, GL_EXT_texture, GL_EXT_texture3D, \r\n    GL_EXT_texture_array, GL_EXT_texture_buffer_object, \r\n    GL_EXT_texture_compression_dxt1, GL_EXT_texture_compression_latc, \r\n    GL_EXT_texture_compression_rgtc, GL_EXT_texture_compression_s3tc, \r\n    GL_EXT_texture_cube_map, GL_EXT_texture_edge_clamp, \r\n    GL_EXT_texture_env_add, GL_EXT_texture_env_combine, \r\n    GL_EXT_texture_env_dot3, GL_EXT_texture_filter_anisotropic, \r\n    GL_EXT_texture_integer, GL_EXT_texture_lod_bias, \r\n    GL_EXT_texture_mirror_clamp, GL_EXT_texture_object, \r\n    GL_EXT_texture_rectangle, GL_EXT_texture_sRGB, GL_EXT_texture_sRGB_R8, \r\n    GL_EXT_texture_sRGB_RG8, GL_EXT_texture_sRGB_decode, \r\n    GL_EXT_texture_shared_exponent, GL_EXT_texture_snorm, \r\n    GL_EXT_texture_swizzle, GL_EXT_timer_query, GL_EXT_transform_feedback, \r\n    GL_EXT_vertex_array, GL_EXT_vertex_array_bgra, GL_EXT_vertex_attrib_64bit, \r\n    GL_IBM_multimode_draw_arrays, GL_IBM_rasterpos_clip, \r\n    GL_IBM_texture_mirrored_repeat, GL_INGR_blend_func_separate, \r\n    GL_KHR_context_flush_control, GL_KHR_debug, GL_KHR_no_error, \r\n    GL_KHR_parallel_shader_compile, GL_KHR_texture_compression_astc_ldr, \r\n    GL_KHR_texture_compression_astc_sliced_3d, GL_MESA_pack_invert, \r\n    GL_MESA_shader_integer_functions, GL_MESA_texture_signed_rgba, \r\n    GL_MESA_window_pos, GL_MESA_ycbcr_texture, GL_NV_ES1_1_compatibility, \r\n    GL_NV_blend_square, GL_NV_conditional_render, GL_NV_copy_depth_to_color, \r\n    GL_NV_copy_image, GL_NV_depth_clamp, GL_NV_fog_distance, \r\n    GL_NV_half_float, GL_NV_light_max_exponent, GL_NV_packed_depth_stencil, \r\n    GL_NV_primitive_restart, GL_NV_shader_atomic_float, \r\n    GL_NV_texgen_reflection, GL_NV_texture_env_combine4, \r\n    GL_NV_texture_rectangle, GL_OES_EGL_image, GL_OES_read_format, \r\n    GL_S3_s3tc, GL_SGIS_generate_mipmap, GL_SGIS_texture_border_clamp, \r\n    GL_SGIS_texture_edge_clamp, GL_SGIS_texture_lod, GL_SUN_multi_draw_arrays\r\n\r\nOpenGL ES profile version string: OpenGL ES 3.1 Mesa 22.3.5 (git-4f0ff776ff)\r\nOpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.10\r\nOpenGL ES profile extensions:\r\n    GL_ANGLE_pack_reverse_row_order, GL_ANGLE_texture_compression_dxt3, \r\n    GL_ANGLE_texture_compression_dxt5, GL_APPLE_texture_max_level, \r\n    GL_EXT_EGL_image_storage, GL_EXT_base_instance, \r\n    GL_EXT_blend_func_extended, GL_EXT_blend_minmax, GL_EXT_buffer_storage, \r\n    GL_EXT_clear_texture, GL_EXT_clip_control, GL_EXT_clip_cull_distance, \r\n    GL_EXT_color_buffer_float, GL_EXT_color_buffer_half_float, \r\n    GL_EXT_compressed_ETC1_RGB8_sub_texture, GL_EXT_copy_image, \r\n    GL_EXT_debug_label, GL_EXT_depth_clamp, GL_EXT_discard_framebuffer, \r\n    GL_EXT_disjoint_timer_query, GL_EXT_draw_buffers, \r\n    GL_EXT_draw_buffers_indexed, GL_EXT_draw_elements_base_vertex, \r\n    GL_EXT_draw_instanced, GL_EXT_float_blend, GL_EXT_frag_depth, \r\n    GL_EXT_geometry_point_size, GL_EXT_geometry_shader, GL_EXT_gpu_shader5, \r\n    GL_EXT_map_buffer_range, GL_EXT_multi_draw_arrays, \r\n    GL_EXT_occlusion_query_boolean, GL_EXT_primitive_bounding_box, \r\n    GL_EXT_read_format_bgra, GL_EXT_render_snorm, GL_EXT_sRGB_write_control, \r\n    GL_EXT_separate_shader_objects, GL_EXT_shader_implicit_conversions, \r\n    GL_EXT_shader_integer_mix, GL_EXT_shader_io_blocks, \r\n    GL_EXT_texture_border_clamp, GL_EXT_texture_buffer, \r\n    GL_EXT_texture_compression_bptc, GL_EXT_texture_compression_dxt1, \r\n    GL_EXT_texture_compression_rgtc, GL_EXT_texture_compression_s3tc, \r\n    GL_EXT_texture_compression_s3tc_srgb, GL_EXT_texture_cube_map_array, \r\n    GL_EXT_texture_filter_anisotropic, GL_EXT_texture_format_BGRA8888, \r\n    GL_EXT_texture_mirror_clamp_to_edge, GL_EXT_texture_norm16, \r\n    GL_EXT_texture_query_lod, GL_EXT_texture_rg, GL_EXT_texture_sRGB_R8, \r\n    GL_EXT_texture_sRGB_RG8, GL_EXT_texture_sRGB_decode, \r\n    GL_EXT_texture_type_2_10_10_10_REV, GL_EXT_texture_view, \r\n    GL_EXT_unpack_subimage, GL_KHR_context_flush_control, GL_KHR_debug, \r\n    GL_KHR_no_error, GL_KHR_parallel_shader_compile, \r\n    GL_KHR_texture_compression_astc_ldr, \r\n    GL_KHR_texture_compression_astc_sliced_3d, GL_MESA_bgra, \r\n    GL_MESA_framebuffer_flip_y, GL_MESA_shader_integer_functions, \r\n    GL_NV_conditional_render, GL_NV_draw_buffers, GL_NV_fbo_color_attachments, \r\n    GL_NV_image_formats, GL_NV_pack_subimage, GL_NV_pixel_buffer_object, \r\n    GL_NV_read_buffer, GL_NV_read_depth, GL_NV_read_depth_stencil, \r\n    GL_NV_read_stencil, GL_NV_shader_noperspective_interpolation, \r\n    GL_OES_EGL_image, GL_OES_EGL_image_external, \r\n    GL_OES_EGL_image_external_essl3, GL_OES_EGL_sync, \r\n    GL_OES_compressed_ETC1_RGB8_texture, GL_OES_copy_image, GL_OES_depth24, \r\n    GL_OES_depth_texture, GL_OES_depth_texture_cube_map, \r\n    GL_OES_draw_buffers_indexed, GL_OES_draw_elements_base_vertex, \r\n    GL_OES_element_index_uint, GL_OES_fbo_render_mipmap, \r\n    GL_OES_geometry_point_size, GL_OES_geometry_shader, \r\n    GL_OES_get_program_binary, GL_OES_gpu_shader5, GL_OES_mapbuffer, \r\n    GL_OES_packed_depth_stencil, GL_OES_primitive_bounding_box, \r\n    GL_OES_required_internalformat, GL_OES_rgb8_rgba8, \r\n    GL_OES_shader_image_atomic, GL_OES_shader_io_blocks, \r\n    GL_OES_standard_derivatives, GL_OES_stencil8, GL_OES_surfaceless_context, \r\n    GL_OES_texture_3D, GL_OES_texture_border_clamp, GL_OES_texture_buffer, \r\n    GL_OES_texture_cube_map_array, GL_OES_texture_float, \r\n    GL_OES_texture_float_linear, GL_OES_texture_half_float, \r\n    GL_OES_texture_half_float_linear, GL_OES_texture_npot, \r\n    GL_OES_texture_stencil8, GL_OES_texture_storage_multisample_2d_array, \r\n    GL_OES_texture_view, GL_OES_vertex_array_object, GL_OES_vertex_half_float, \r\n    GL_OES_viewport_array\r\n\r\n270 GLX Visuals\r\n    visual  x   bf lv rg d st  colorbuffer  sr ax dp st accumbuffer  ms  sw cav\r\n  id dep cl sp  sz l  ci b ro  r  g  b  a F gb bf th cl  r  g  b  a ns b ap eat\r\n----------------------------------------------------------------------------\r\n0x021 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x022 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x2ba 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x2bb 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x2bc 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x2bd 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x2be 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x2bf 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x2c0 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x2c1 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x2c2 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x2c3 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x2c4 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x2c5 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x2c6 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x2c7 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x2c8 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x2c9 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x2ca 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x2cb 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x2cc 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x2cd 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x2ce 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x2cf 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x2d0 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x2d1 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x2d2 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x2d3 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x2d4 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x2d5 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x2d6 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x2d7 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x2d8 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x2d9 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x2da 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x2db 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x2dc 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x2dd 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x2de 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x2df 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x2e0 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x2e1 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x2e2 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x2e3 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x2e4 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x2e5 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x2e6 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x2e7 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x2e8 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x2e9 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x2ea 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x2eb 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x2ec 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x2ed 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x2ee 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x2ef 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x2f0 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x2f1 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x2f2 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x2f3 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x2f4 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x2f5 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x2f6 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x2f7 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x2f8 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x2f9 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x2fa 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x2fb 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x2fc 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x2fd 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x2fe 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x2ff 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x300 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x301 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x302 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x303 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x304 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x305 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x306 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x307 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x308 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x309 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x30a 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x30b 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x30c 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x30d 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x30e 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x30f 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x310 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x311 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x312 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x313 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x314 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x315 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x316 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x317 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x318 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x319 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x31a 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x31b 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x31c 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x31d 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x31e 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x31f 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x320 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x321 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x322 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x323 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x324 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x325 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x326 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x327 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x328 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x329 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x32a 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x32b 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x32c 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x32d 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x32e 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x32f 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x330 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x331 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x332 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x333 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x334 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x335 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x336 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x337 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x338 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x339 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x33a 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x33b 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x33c 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x33d 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x33e 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x33f 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x340 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x341 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x342 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x343 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x344 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x345 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x346 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x347 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x348 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x349 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x34a 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x34b 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x34c 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x34d 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x34e 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x34f 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x350 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x351 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x352 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x353 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x354 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x355 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x356 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x357 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x358 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x359 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x35a 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x35b 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x35c 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x35d 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x35e 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x35f 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x360 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x361 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x362 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x363 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x364 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x365 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x366 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x367 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x368 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x369 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x36a 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x36b 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x36c 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x36d 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x36e 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x36f 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x370 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x371 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x372 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x373 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x374 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x375 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x376 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x377 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x378 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x379 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x37a 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x37b 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x37c 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x37d 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x37e 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x37f 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x380 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x381 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x382 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x383 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x384 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x385 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x386 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x387 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x388 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x389 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x38a 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x38b 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x38c 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x38d 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x38e 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x38f 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x390 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x391 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x392 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x393 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x394 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x395 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x396 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x397 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x398 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x399 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x39a 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x39b 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x39c 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x39d 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x39e 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x39f 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x3a0 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x3a1 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x3a2 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x3a3 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x3a4 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x3a5 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x3a6 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x3a7 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x07f 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x3a8 32 tc  0  32  0 r  . .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x3a9 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x3aa 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x3ab 32 tc  0  32  0 r  . .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x3ac 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x3ad 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x3ae 32 tc  0  32  0 r  . .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x3af 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x3b0 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x3b1 32 tc  0  32  0 r  . .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x3b2 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x3b3 32 tc  0  32  0 r  . .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x3b4 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x3b5 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x3b6 32 tc  0  32  0 r  . .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x3b7 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x3b8 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x3b9 32 tc  0  32  0 r  . .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x3ba 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x3bb 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x3bc 32 tc  0  32  0 r  . .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x3bd 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x3be 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x3bf 32 tc  0  32  0 r  . .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x3c0 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x3c1 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x3c2 32 tc  0  32  0 r  . .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x3c3 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x3c4 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n\r\n570 GLXFBConfigs:\r\n    visual  x   bf lv rg d st  colorbuffer  sr ax dp st accumbuffer  ms  sw cav\r\n  id dep cl sp  sz l  ci b ro  r  g  b  a F gb bf th cl  r  g  b  a ns b ap eat\r\n----------------------------------------------------------------------------\r\n0x080  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x081  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x082  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x083  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x084  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0  0  0  0  0  0 0 c  None\r\n0x085  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x086  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x087  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x088  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x089  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x08a  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0  0  0  0  0  0 0 c  None\r\n0x08b  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x08c  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x08d  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x08e  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x08f  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x090  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0  0  0  0  0  0 0 c  None\r\n0x091  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x092  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x093  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x094  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x095  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x096  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8  0  0  0  0  0 0 c  None\r\n0x097  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x098  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x099  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x09a  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x09b  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x09c  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0  0  0  0  0  0 0 c  None\r\n0x09d  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x09e  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x09f  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x0a0  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x0a1  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x0a2  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0  0  0  0  0  0 0 c  None\r\n0x0a3  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x0a4  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x0a5  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x0a6  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x0a7  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x0a8  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0  0  0  0  0  0 0 c  None\r\n0x0a9  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x0aa  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x0ab  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x0ac  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x0ad  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x0ae  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0  0  0  0  0  0 0 c  None\r\n0x0af  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x0b0  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x0b1  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x0b2  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x0b3  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x0b4  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8  0  0  0  0  0 0 c  None\r\n0x0b5  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x0b6  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x0b7  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x0b8  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x0b9  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x0ba  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0  0  0  0  0  0 0 c  None\r\n0x0bb  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x0bc  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x0bd  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x0be  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x0bf  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x0c0  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0  0  0  0  0  0 0 c  None\r\n0x0c1  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x0c2  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x0c3  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x0c4  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x0c5  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x0c6  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0  0  0  0  0  0 0 c  None\r\n0x0c7  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x0c8  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x0c9  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x0ca  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x0cb  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x0cc  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0  0  0  0  0  0 0 c  None\r\n0x0cd  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x0ce  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x0cf  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x0d0  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x0d1  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x0d2  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8  0  0  0  0  0 0 c  None\r\n0x0d3  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x0d4  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x0d5  0 tc  0  32  0 r  . .  10 10 10  2 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x0d6  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x0d7  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x0d8  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0  0  0  0  0  0 0 c  None\r\n0x0d9  0 tc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x0da  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x0db  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x0dc  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x0dd  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x0de  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0  0  0  0  0  0 0 c  None\r\n0x0df  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x0e0  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x0e1  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x0e2  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x0e3  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x0e4  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0  0  0  0  0  0 0 c  None\r\n0x0e5  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x0e6  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x0e7  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x0e8  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x0e9  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x0ea  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0  0  0  0  0  0 0 c  None\r\n0x0eb  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x0ec  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x0ed  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x0ee  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x0ef  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x0f0  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8  0  0  0  0  0 0 c  None\r\n0x0f1  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x0f2  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x0f3  0 tc  0  30  0 r  . .  10 10 10  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x0f4  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x0f5  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x0f6  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0  0  0  0  0  0 0 c  None\r\n0x0f7  0 tc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x0f8 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x0f9 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x0fa 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x0fb 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x0fc 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 c  None\r\n0x0fd 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x0fe 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x0ff 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x100 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x101 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x102 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 c  None\r\n0x103 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x104 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x105 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x106 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x107 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x108 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 c  None\r\n0x109 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x10a 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x10b 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x10c 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x10d 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x10e 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 c  None\r\n0x10f 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x110 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x111 24 tc  0  32  0 r  . .   8  8  8  8 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x112 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x113 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x114 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 c  None\r\n0x115 24 tc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x116 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x117 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x118 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x119 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x11a 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0  0  0  0  0  0 0 c  None\r\n0x11b 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x11c 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x11d 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x11e 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x11f 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x120 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0  0  0  0  0  0 0 c  None\r\n0x121 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x122 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x123 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x124 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x125 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x126 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0  0  0  0  0  0 0 c  None\r\n0x127 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x128 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x129 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x12a 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x12b 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x12c 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8  0  0  0  0  0 0 c  None\r\n0x12d 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x12e 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x12f 24 tc  0  24  0 r  . .   8  8  8  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x130 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x131 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x132 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0  0  0  0  0  0 0 c  None\r\n0x133 24 tc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x134 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x135 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x136 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x137 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x138 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 c  None\r\n0x139 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x13a 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x13b 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x13c 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x13d 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x13e 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 c  None\r\n0x13f 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x140 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x141 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x142 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x143 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x144 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 c  None\r\n0x145 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x146 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x147 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x148 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x149 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x14a 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 c  None\r\n0x14b 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x14c 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x14d 24 tc  0  32  0 r  . .   8  8  8  8 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x14e 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x14f 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x150 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 c  None\r\n0x151 24 tc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x152 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x153 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x154 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x155 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x156 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0  0  0  0  0  0 0 c  None\r\n0x157 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x158 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x159 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x15a 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x15b 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x15c 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0  0  0  0  0  0 0 c  None\r\n0x15d 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x15e 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x15f 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x160 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x161 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x162 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0  0  0  0  0  0 0 c  None\r\n0x163 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x164 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x165 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x166 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x167 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x168 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8  0  0  0  0  0 0 c  None\r\n0x169 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x16a 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x16b 24 tc  0  24  0 r  . .   8  8  8  0 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x16c 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x16d 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x16e 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0  0  0  0  0  0 0 c  None\r\n0x16f 24 tc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x170  0 tc  0  16  0 r  . .   5  6  5  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x171  0 tc  0  16  0 r  . .   5  6  5  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x172  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x173  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x174  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0  0  0  0  0  0  0  0 0 c  None\r\n0x175  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x176  0 tc  0  16  0 r  . .   5  6  5  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x177  0 tc  0  16  0 r  . .   5  6  5  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x178  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x179  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x17a  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 16  0  0  0  0  0  0 0 c  None\r\n0x17b  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x17c  0 tc  0  16  0 r  . .   5  6  5  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x17d  0 tc  0  16  0 r  . .   5  6  5  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x17e  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x17f  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x180  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 24  0  0  0  0  0  0 0 c  None\r\n0x181  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x182  0 tc  0  16  0 r  . .   5  6  5  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x183  0 tc  0  16  0 r  . .   5  6  5  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x184  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x185  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x186  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 24  8  0  0  0  0  0 0 c  None\r\n0x187  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x188  0 tc  0  16  0 r  . .   5  6  5  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x189  0 tc  0  16  0 r  . .   5  6  5  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x18a  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x18b  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x18c  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 32  0  0  0  0  0  0 0 c  None\r\n0x18d  0 tc  0  16  0 r  y .   5  6  5  0 .  .  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x18e  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x18f  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x190  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x191  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x192  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0  0  0  0  0  0 0 c  None\r\n0x193  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x194  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x195  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x196  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x197  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x198  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0  0  0  0  0  0 0 c  None\r\n0x199  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x19a  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x19b  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x19c  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x19d  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x19e  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0  0  0  0  0  0 0 c  None\r\n0x19f  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x1a0  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x1a1  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x1a2  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x1a3  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x1a4  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8  0  0  0  0  0 0 c  None\r\n0x1a5  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x1a6  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x1a7  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x1a8  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x1a9  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x1aa  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0  0  0  0  0  0 0 c  None\r\n0x1ab  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x1ac  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x1ad  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x1ae  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x1af  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x1b0  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0  0  0  0  0  0 0 c  None\r\n0x1b1  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x1b2  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x1b3  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x1b4  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x1b5  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x1b6  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0  0  0  0  0  0 0 c  None\r\n0x1b7  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x1b8  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x1b9  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x1ba  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x1bb  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x1bc  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0  0  0  0  0  0 0 c  None\r\n0x1bd  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x1be  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x1bf  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x1c0  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x1c1  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x1c2  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8  0  0  0  0  0 0 c  None\r\n0x1c3  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x1c4  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x1c5  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x1c6  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x1c7  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x1c8  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0  0  0  0  0  0 0 c  None\r\n0x1c9  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x1ca  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x1cb  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x1cc  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x1cd  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x1ce  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0  0  0  0  0  0 0 c  None\r\n0x1cf  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x1d0  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x1d1  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x1d2  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x1d3  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x1d4  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0  0  0  0  0  0 0 c  None\r\n0x1d5  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x1d6  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x1d7  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x1d8  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x1d9  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x1da  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0  0  0  0  0  0 0 c  None\r\n0x1db  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x1dc  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x1dd  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x1de  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x1df  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x1e0  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8  0  0  0  0  0 0 c  None\r\n0x1e1  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x1e2  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x1e3  0 dc  0  32  0 r  . .  10 10 10  2 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x1e4  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x1e5  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x1e6  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0  0  0  0  0  0 0 c  None\r\n0x1e7  0 dc  0  32  0 r  y .  10 10 10  2 .  .  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x1e8  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x1e9  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x1ea  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x1eb  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x1ec  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0  0  0  0  0  0 0 c  None\r\n0x1ed  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x1ee  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x1ef  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x1f0  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x1f1  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x1f2  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0  0  0  0  0  0 0 c  None\r\n0x1f3  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x1f4  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x1f5  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x1f6  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x1f7  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x1f8  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0  0  0  0  0  0 0 c  None\r\n0x1f9  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x1fa  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x1fb  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x1fc  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x1fd  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x1fe  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8  0  0  0  0  0 0 c  None\r\n0x1ff  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x200  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x201  0 dc  0  30  0 r  . .  10 10 10  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x202  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x203  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x204  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0  0  0  0  0  0 0 c  None\r\n0x205  0 dc  0  30  0 r  y .  10 10 10  0 .  .  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x206 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x207 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x208 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x209 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x20a 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 c  None\r\n0x20b 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x20c 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x20d 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x20e 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x20f 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x210 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 c  None\r\n0x211 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x212 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x213 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x214 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x215 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x216 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 c  None\r\n0x217 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x218 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x219 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x21a 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x21b 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x21c 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 c  None\r\n0x21d 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x21e 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x21f 24 dc  0  32  0 r  . .   8  8  8  8 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x220 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x221 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x222 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 c  None\r\n0x223 24 dc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x224 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x225 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x226 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x227 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x228 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0  0  0  0  0  0 0 c  None\r\n0x229 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x22a 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x22b 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x22c 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x22d 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x22e 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0  0  0  0  0  0 0 c  None\r\n0x22f 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x230 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x231 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x232 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x233 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x234 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0  0  0  0  0  0 0 c  None\r\n0x235 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x236 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x237 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x238 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x239 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x23a 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8  0  0  0  0  0 0 c  None\r\n0x23b 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x23c 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x23d 24 dc  0  24  0 r  . .   8  8  8  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x23e 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x23f 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x240 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0  0  0  0  0  0 0 c  None\r\n0x241 24 dc  0  24  0 r  y .   8  8  8  0 .  .  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x242 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x243 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x244 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x245 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x246 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 c  None\r\n0x247 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x248 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x249 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x24a 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x24b 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x24c 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 c  None\r\n0x24d 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x24e 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x24f 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x250 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x251 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x252 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 c  None\r\n0x253 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x254 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x255 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x256 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x257 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x258 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 c  None\r\n0x259 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x25a 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x25b 24 dc  0  32  0 r  . .   8  8  8  8 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x25c 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x25d 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x25e 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 c  None\r\n0x25f 24 dc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x260 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x261 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x262 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x263 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x264 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0  0  0  0  0  0 0 c  None\r\n0x265 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x266 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x267 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x268 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x269 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x26a 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0  0  0  0  0  0 0 c  None\r\n0x26b 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x26c 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x26d 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x26e 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x26f 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x270 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0  0  0  0  0  0 0 c  None\r\n0x271 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x272 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x273 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x274 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x275 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x276 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8  0  0  0  0  0 0 c  None\r\n0x277 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x278 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x279 24 dc  0  24  0 r  . .   8  8  8  0 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x27a 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x27b 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x27c 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0  0  0  0  0  0 0 c  None\r\n0x27d 24 dc  0  24  0 r  y .   8  8  8  0 .  s  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x27e  0 dc  0  16  0 r  . .   5  6  5  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x27f  0 dc  0  16  0 r  . .   5  6  5  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x280  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x281  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0  0  0 16 16 16 16  0 0 u  Slow\r\n0x282  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0  0  0  0  0  0  0  0 0 c  None\r\n0x283  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0  0  0 16 16 16 16  0 0 c  Slow\r\n0x284  0 dc  0  16  0 r  . .   5  6  5  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x285  0 dc  0  16  0 r  . .   5  6  5  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x286  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x287  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 16  0 16 16 16 16  0 0 u  Slow\r\n0x288  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 16  0  0  0  0  0  0 0 c  None\r\n0x289  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 16  0 16 16 16 16  0 0 c  Slow\r\n0x28a  0 dc  0  16  0 r  . .   5  6  5  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x28b  0 dc  0  16  0 r  . .   5  6  5  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x28c  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x28d  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 24  0 16 16 16 16  0 0 u  Slow\r\n0x28e  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 24  0  0  0  0  0  0 0 c  None\r\n0x28f  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 24  0 16 16 16 16  0 0 c  Slow\r\n0x290  0 dc  0  16  0 r  . .   5  6  5  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x291  0 dc  0  16  0 r  . .   5  6  5  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x292  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x293  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 24  8 16 16 16 16  0 0 u  Slow\r\n0x294  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 24  8  0  0  0  0  0 0 c  None\r\n0x295  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 24  8 16 16 16 16  0 0 c  Slow\r\n0x296  0 dc  0  16  0 r  . .   5  6  5  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x297  0 dc  0  16  0 r  . .   5  6  5  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x298  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x299  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 32  0 16 16 16 16  0 0 u  Slow\r\n0x29a  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 32  0  0  0  0  0  0 0 c  None\r\n0x29b  0 dc  0  16  0 r  y .   5  6  5  0 .  .  0 32  0 16 16 16 16  0 0 c  Slow\r\n0x29c 32 tc  0  32  0 r  . .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x29d 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 u  None\r\n0x29e 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0  0  0  0  0  0  0  0 0 c  None\r\n0x29f 32 tc  0  32  0 r  . .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x2a0 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 u  None\r\n0x2a1 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 16  0  0  0  0  0  0 0 c  None\r\n0x2a2 32 tc  0  32  0 r  . .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x2a3 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 u  None\r\n0x2a4 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  0  0  0  0  0  0 0 c  None\r\n0x2a5 32 tc  0  32  0 r  . .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x2a6 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 u  None\r\n0x2a7 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 24  8  0  0  0  0  0 0 c  None\r\n0x2a8 32 tc  0  32  0 r  . .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x2a9 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 u  None\r\n0x2aa 32 tc  0  32  0 r  y .   8  8  8  8 .  .  0 32  0  0  0  0  0  0 0 c  None\r\n0x2ab 32 tc  0  32  0 r  . .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x2ac 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 u  None\r\n0x2ad 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0  0  0  0  0  0  0  0 0 c  None\r\n0x2ae 32 tc  0  32  0 r  . .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x2af 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 u  None\r\n0x2b0 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 16  0  0  0  0  0  0 0 c  None\r\n0x2b1 32 tc  0  32  0 r  . .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x2b2 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 u  None\r\n0x2b3 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  0  0  0  0  0  0 0 c  None\r\n0x2b4 32 tc  0  32  0 r  . .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x2b5 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 u  None\r\n0x2b6 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 24  8  0  0  0  0  0 0 c  None\r\n0x2b7 32 tc  0  32  0 r  . .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x2b8 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 u  None\r\n0x2b9 32 tc  0  32  0 r  y .   8  8  8  8 .  s  0 32  0  0  0  0  0  0 0 c  None\r\n```\r\n\r\n<\/details>\r\n\r\nIf someone wants the builded jar, text me"],"labels":["build","desktop","LWJGL3"]},{"title":"NOR","body":"\r\nwhen I create class extends AndroidFragmentApplication and implements ApplicationListener, it throws this error before View initializing (initializeForView called in onCreate),\r\nI fix it by overriding onResumeFragments of my activity then if(androidFrag.getInput()!=null) super.onResumeFragments();..\r\nbut maybe there's a better solution should be added to the library... java.lang.NullPointerException: Attempt to invoke interface method 'void com.badlogic.gdx.backends.android.AndroidInput.onResume()' on a null object reference","comments":["You should be calling initializeForView in onCreateView, rather than onCreate."],"labels":["android"]},{"title":"Different behavior on ExtendViewport between MacOS and Windows 11 ","body":"#### Issue details\r\nI have noticed a different behavior between Windows and MacOS when you move your window, the viewport temporarly stretches and get back to normal **only** when resizing the windows.\r\n\r\n#### Reproduction steps\/code\r\n\r\n##### file game \r\n```java\r\n\r\npackage com.gametest.zero;\r\n\r\nimport com.badlogic.gdx.Game;\r\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\nimport com.badlogic.gdx.utils.ScreenUtils;\r\nimport com.gametest.zero.resources.Assets;\r\nimport com.gametest.zero.screens.GameScreen;\r\n\r\npublic class SFS extends Game {\r\n    public SpriteBatch batch;\r\n    public Assets assets;\r\n\r\n    public GameScreen gameScreen;\r\n\r\n    @Override\r\n    public void create() {\r\n        batch = new SpriteBatch();\r\n        assets = new Assets();\r\n\r\n        \/\/load all assets\r\n        assets.load();\r\n        assets.manager.finishLoading();\r\n\r\n        \/\/initialize game screen and switch to it\r\n        gameScreen = new GameScreen(this);\r\n        setScreen(gameScreen);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void render() {\r\n        super.render();\r\n    }\r\n\r\n    @Override\r\n    public void dispose() {\r\n        batch.dispose();\r\n        assets.dispose();\r\n    }\r\n}\r\n\r\n```\r\n##### file screen\r\n```java\r\n\r\npackage com.gametest.zero.screens;\r\n\r\nimport com.badlogic.gdx.Screen;\r\nimport com.badlogic.gdx.graphics.Texture;\r\nimport com.badlogic.gdx.utils.ScreenUtils;\r\nimport com.badlogic.gdx.utils.viewport.ExtendViewport;\r\nimport com.gametest.zero.SFS;\r\nimport com.gametest.zero.resources.Assets;\r\nimport com.gametest.zero.resources.GlobalVariables;\r\n\r\npublic class GameScreen implements Screen {\r\n    private final SFS game;\r\n    private final ExtendViewport viewport;\r\n\r\n    \/\/background\/ring\r\n    private Texture backgroundTexture;\r\n    private Texture frontRopesTexture;\r\n\r\n    public GameScreen(SFS game) {\r\n        this.game = game;\r\n\r\n        \/\/setup the viewport\r\n        viewport = new ExtendViewport(\r\n                GlobalVariables.WORLD_WIDTH, GlobalVariables.MIN_WORLD_HEIGHT,\r\n                GlobalVariables.WORLD_WIDTH, 0\r\n        );\r\n\r\n        \/\/setup game area\r\n        createGameArea();\r\n    }\r\n\r\n    private void createGameArea() {\r\n        backgroundTexture = game.assets.manager.get(Assets.BACKGROUND_TEXTURE);\r\n        frontRopesTexture = game.assets.manager.get(Assets.FRONT_ROPES_TEXTURE);\r\n    }\r\n\r\n    @Override\r\n    public void show() {\r\n        \r\n    }\r\n\r\n    @Override\r\n    public void render(float delta) {\r\n        \/\/clear the screen\r\n        ScreenUtils.clear(0, 0, 0, 1);\r\n\r\n        \/\/set the sprite batch to use the camera\r\n        game.batch.setProjectionMatrix(viewport.getCamera().combined);\r\n\r\n        \/\/begin drawing\r\n        game.batch.begin();\r\n\r\n        \/\/draw bg\r\n        game.batch.draw(\r\n                backgroundTexture, 0, 0,\r\n                backgroundTexture.getWidth() * GlobalVariables.WORLD_SCALE,\r\n                backgroundTexture.getHeight() * GlobalVariables.WORLD_SCALE\r\n        );\r\n\r\n        \/\/end drawing\r\n        game.batch.end();\r\n    }\r\n\r\n    @Override\r\n    public void resize(int width, int height) {\r\n        \/\/update the viewport with the new screen size\r\n        viewport.update(width, height, true);\r\n    }\r\n\r\n    @Override\r\n    public void pause() {\r\n        \r\n    }\r\n\r\n    @Override\r\n    public void resume() {\r\n       \r\n    }\r\n\r\n    @Override\r\n    public void hide() {\r\n        \r\n    }\r\n\r\n    @Override\r\n    public void dispose() {\r\n        \r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\nHere the relevant part that don't behave the same between windows and MacOS\r\n\r\n```java\r\n\/\/Inside the constructor\r\n\r\nviewport = new ExtendViewport(\r\n            GlobalVariables.WORLD_WIDTH, GlobalVariables.MIN_WORLD_HEIGHT,\r\n            GlobalVariables.WORLD_WIDTH, 0\r\n    );\r\n\r\n```\r\nAs you can see, i've set the 4 parameters of ExtendViewport this way to : \r\n\r\n- care about min and max width (with centered background)\r\n- care only about min height (leading to a bottom centered picture)\r\n\r\nEverything is fine when i resize my windows, on both windows and macos. \r\nHere is how look the background picture with over-resizing vertically and horizontally\r\nIt is what we would expect : \r\n![image](https:\/\/github.com\/libgdx\/libgdx\/assets\/119100622\/3a3bb464-f5f0-4ae3-89fe-f761d91292a7)\r\n\r\n![image](https:\/\/github.com\/libgdx\/libgdx\/assets\/119100622\/8e598c60-4eb1-448c-94ec-0d1a0c4589da)\r\n\r\n**But  As soon as I drag the window's head bar somewhere else i get this :** \r\n\r\n![image](https:\/\/github.com\/libgdx\/libgdx\/assets\/119100622\/3ab5d452-44a5-4fae-8ea0-5b2bc2992411)\r\n\r\nIf i resize the window, it will get back to normal, and **on Windows platform, this same code, does not strech the background image and it stay centered.**\r\n\r\nThis problem does not appear on the vertical axis because the fourth parameter is set to 0. If set to something else, the problem also happen vertically.\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\nSDK temurin 11.0.20\r\nLibgdx 1.12.0\r\n\r\n#### Stacktrace\r\nNo stacktrace\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [X] macOS\r\n","comments":["Sounds like a bug in the backend, so we need to know what backend you use for macOS. LWJGL3?","Yes, anything you need me to follow to help you, let me know !","I already did that but you didn't provide the answer. \ud83d\ude06 I don't work on macOS and I don't do much with LWJGL3 so I'm unlikely to be able to help, but the next person is just going to ask you the same thing.","My \"**Yes,**\" was meant to reply to your question about the backend.\r\n\r\n![image](https:\/\/github.com\/libgdx\/libgdx\/assets\/119100622\/b69a829e-cdb6-4f47-a770-f9f64466f4c5)\r\n","I can reproduce this on my end, but no idea what is causing this.\r\n\r\n<details>\r\n  <summary><i>Executable example<\/i><\/summary>\r\n\r\n  ```java\r\nimport com.badlogic.gdx.ApplicationAdapter;\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application;\r\nimport com.badlogic.gdx.backends.lwjgl3.Lwjgl3ApplicationConfiguration;\r\nimport com.badlogic.gdx.graphics.Texture;\r\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\nimport com.badlogic.gdx.utils.ScreenUtils;\r\nimport com.badlogic.gdx.utils.viewport.ExtendViewport;\r\n\r\n\/\/   Just drag the window around to see the problem\r\npublic class Issue7232 extends ApplicationAdapter {\r\n\r\n    public static void main(String[] args) {\r\n        Lwjgl3ApplicationConfiguration config = new Lwjgl3ApplicationConfiguration();\r\n        config.setWindowedMode(900, 250);\r\n        new Lwjgl3Application(new Issue7232(), config);\r\n    }\r\n\r\n    private ExtendViewport viewport;\r\n    private Texture texture;\r\n    private SpriteBatch batch;\r\n\r\n    public void create() {\r\n        texture = new Texture(Gdx.files.internal(\"data\/badlogic.jpg\"));\r\n        batch = new SpriteBatch();\r\n        viewport = new ExtendViewport(150, 200, 550, 0);\r\n    }\r\n\r\n    public void render() {\r\n        ScreenUtils.clear(1, 0, 0, 1);\r\n        batch.setProjectionMatrix(viewport.getCamera().combined);\r\n        batch.begin();\r\n        batch.draw(texture, 0, 0, texture.getWidth(), texture.getHeight());\r\n        batch.end();\r\n    }\r\n\r\n    public void resize(int width, int height) {\r\n        viewport.update(width, height, true);\r\n    }\r\n\r\n}\r\n```\r\n  \r\n<\/details>","This crashes for me. \r\nWith       config.setOpenGLEmulation(Lwjgl3ApplicationConfiguration.GLEmulation.ANGLE_GLES20, 3, 2);\r\nThe behavior is correct, but default GLES20 it dies","Seems like there is an issue on m1 with resize on the default emulation that ends up with a crash. It doesn't seem related to this specific issue.\r\n\r\nIf you viewport.apply() in your render start, moving the window no longer results in the wrong render.  So current thoughts are that something is messing with glViewport when the window moves. However this does not seem to be from the libgdx side.\r\n\r\n```\r\n      IntBuffer allocate = BufferUtils.newIntBuffer(4);\r\n      Gdx.gl.glGetIntegerv(Gdx.gl.GL_VIEWPORT, allocate);\r\n      System.out.println(allocate.get(0) + \" \" + allocate.get(1) + \" \" + allocate.get(2) + \" \" + allocate.get(3));\r\n  ```\r\n  \r\n  \r\nShows that indeed the viewport is getting changed. Not sure what is doing this, but its not from java side from what I see. I also dont see anything that lwjgl or glfw would be doing directly, and as it changes its behavior with opengl emulation, I suspect its AppleMetalOpenGLRenderer. \r\n      \r\nWhat mac are you running?","> Seems like there is an issue on m1 with resize on the default emulation that ends up with a crash. It doesn't seem related to this specific issue.\r\n\r\nDo you have a dependency on the `gdx-lwjgl3-glfw-awt-macos` extension in your build files? (The libGDX LWJGL 3 tests do so, by default.) If so, this is likely caused by #6992.\r\n\r\n> If you viewport.apply() in your render start, moving the window no longer results in the wrong render.\r\n\r\nAh that is good to know! I can confirm this on my M1 macbook with macOS 14.3.1. Since this is (likely) caused by upstream and we have a workaround, I think we can close this.\r\n\r\n"],"labels":["bug","LWJGL3","graphics"]},{"title":"OpenXR support","body":"OpenXR became a VR standard that removed OpenVR, OVR, Steam VR and etc.\r\nLWJGL already has support for OpenXR at least one year.\r\nIs there any chance to get it in libgdx?\r\n\r\nI understand that libgdx is a not popular for 3D, so the chance is small.","comments":["I think the latest effort to run a libGDX VR application is [this](https:\/\/github.com\/Zomby2D\/gdx-vr-extension) project. OpenXR support seems to be planned in the future."],"labels":["feature request"]},{"title":"Why the BACKSPACE key is treated differently in libGDX\/GWT than in libGDX\/LWJGL ? ","body":"#### Issue details\r\nIn libGDX, I use `Gdx.input.isKeyPressed(Input.Keys.BACKSPACE)` to know when the use push BACKSPACE.\r\nBut, results are different depending on the backend. In libgGDX\/LWJGL, when I press BACKSPACE, the above expression returns true but in libgGDX\/GWT, it always returns false. After searching in code, I found the following lines in libGDX: [DefaultGwtInput line 699](https:\/\/github.com\/libgdx\/libgdx\/blob\/6fbf3abe28dcfa55b81a9c3dd2817d4f5f3c96ad\/backends\/gdx-backends-gwt\/src\/com\/badlogic\/gdx\/backends\/gwt\/DefaultGwtInput.java#L699) where I can clearly see that BACKSPACE key is treated differently and that `Gdx.input.isKeyPressed(Input.Keys.BACKSPACE)` will never returns true. In libGDX\/LWJGL there is no such difference.\r\nWhy the BACKSPACE key is treated differently in libgGDX\/GWT than in libGDX\/LWJGL ? \r\n\r\n#### Reproduction steps\/code\r\n[test.tar.gz](https:\/\/github.com\/libgdx\/libgdx\/files\/12466637\/test.tar.gz)\r\nDownload and untar `test.tar.gz`.\r\nThe program is just a black window. An `InputProcessor` is attached to Gdx.input. When BACKSPACE is pressed, an event is triggered, InputProcessor#keyDown is called and I print '[DEBUG] DOWN'. Then, the render method is called multiple times, resulting in printing multiple times `[DEBUG] PRESSED` (using Gdx.input.isKeyPresssed). Finally, when BACKSPACE is released,  InputProcessor#keyUp is called and I print '[DEBUG] UP'. This is the expected output.\r\n\r\nOn a desktop, the output is:\r\n```\r\n[DEBUG]\u00a0DOWN\r\n[DEBUG] PRESSED       (repeated multiple times)\r\n[DEBUG] UP\r\n```\r\nwhich is expected. \r\nWith the HTML version the output is:\r\n```\r\n[DEBUG] DOWN           (repeated multiple times)\r\n[DEBUG] UP\r\n```\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\nlibGDX version 1.12.0\r\nGWT version 2.10.0\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [x] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [\u00a0] macOS\r\n","comments":["I think this is just a relic of when BACKSPACE was the only key being caught on GWT (see #6277 for context). We should be able to remove that whole if-clause [here](https:\/\/github.com\/libgdx\/libgdx\/blob\/6fbf3abe28dcfa55b81a9c3dd2817d4f5f3c96ad\/backends\/gdx-backends-gwt\/src\/com\/badlogic\/gdx\/backends\/gwt\/DefaultGwtInput.java#L699-L704) and emulate the BACKSPACE `keypress` event down [here](https:\/\/github.com\/libgdx\/libgdx\/blob\/6fbf3abe28dcfa55b81a9c3dd2817d4f5f3c96ad\/backends\/gdx-backends-gwt\/src\/com\/badlogic\/gdx\/backends\/gwt\/DefaultGwtInput.java#L735-L739) similar to how we handle TAB."],"labels":["bug","gwt","input"]},{"title":"[Feature Request] Add a method to Array<T> to get items of specified type T1","body":"#### Issue details\r\nI thought it would good to have this functionality in the existing Array<> class.\r\n```java\r\n\/** Loops through this Array and returns Array of objects of specified type {@code typeIn} *\/\r\npublic <T1> Array<T1> ofType(Class<T1> typeIn)\r\n{\r\n    Array<T1> output = new Array<>(typeIn);\r\n\r\n    for (Object o : this)\r\n    {\r\n        \/* (o instanceof typeIn) *\/\r\n        if (typeIn.isInstance(o))\r\n            output.add(typeIn.cast(o));\r\n    }\r\n\r\n    return output;\r\n}\r\n```\r\nThere is one potential problem that I found: returned Array will also include subclasses of type T1.\r\n#### Reproduction steps\/code\r\nWorking example:\r\n```java\r\nimport com.badlogic.gdx.utils.Array;\r\n\r\npublic class ArrayExTestMain {\r\n    public static void main(String[] args)\r\n    {\r\n        ArrayEx<SuperClass> a = new ArrayEx<>();\r\n\r\n        a.add(new SuperClass());\r\n        a.add(new SuperClass());\r\n        a.add(new SubClass(\"A\"));\r\n        a.add(new SuperClass());\r\n        a.add(new SuperClass());\r\n        a.add(new SubClass(\"B\"));\r\n        a.add(new SuperClass());\r\n        a.add(new ChildOfSubClass(\"C\"));\r\n        a.add(new SuperClass());\r\n\r\n        System.out.print(\"Before: \");\r\n        System.out.println(a.toString(\", \"));\r\n        System.out.print(\"After: \");\r\n        System.out.println(a.ofType(SubClass.class).toString(\", \"));\r\n    }\r\n\r\n    public static class ArrayEx<T> extends Array<T> {\r\n        \/** Loops through this Array and returns Array of objects of specified type {@code typeIn} *\/\r\n        public <T1> Array<T1> ofType(Class<T1> typeIn)\r\n        {\r\n            Array<T1> output = new Array<>(typeIn);\r\n\r\n            for (Object o : this)\r\n            {\r\n                \/* (o instanceof typeIn) *\/\r\n                if (typeIn.isInstance(o))\r\n                    output.add(typeIn.cast(o));\r\n            }\r\n\r\n            return output;\r\n        }\r\n    }\r\n\r\n    private static class SuperClass {\r\n        static int instanceCount = 0;\r\n        protected String name;\r\n        public SuperClass() { name = this.getClass().getSimpleName() + instanceCount++; }\r\n\r\n        @Override\r\n        public String toString() { return name; }\r\n    }\r\n\r\n    private static class SubClass extends SuperClass { public SubClass(String s) { name = s; } }\r\n\r\n    private static class ChildOfSubClass extends SubClass { public ChildOfSubClass(String s) { super(s); } }\r\n}\r\n```\r\nOutput:\r\n```\r\n> Task :desktop:ArrayExTestMain.main()\r\nBefore: SuperClass0, SuperClass1, A, SuperClass3, SuperClass4, B, SuperClass6, SuperClass7, SuperClass8\r\nAfter: A, B\r\n```","comments":["It is (almost completely) a working example; I just am not a huge fan of type-level logic at runtime. The (almost completely) is due to GWT not having a full-featured Class<T> class; instead we use libGDX's ClassReflection:\r\n```java\r\n    public static class ArrayEx<T> extends Array<T> {\r\n        \/** Loops through this Array and returns Array of objects of specified type {@code typeIn} *\/\r\n        @SuppressWarnings(\"unchecked\")\r\n        public <T1> Array<T1> ofType(Class<T1> typeIn)\r\n        {\r\n            \/\/ preserve the ordered status, use size as an upper bound on capacity, use T1 for items\r\n            Array<T1> output = new Array<>(ordered, size, typeIn);\r\n            \/\/ \"fori\" loop tends to be preferred within libGDX, when possible; it permits nesting\r\n            for (int i = 0, n = size; i < n; i++)\r\n            {\r\n                Object o = items[i];\r\n                \/\/ ClassReflection is needed for GWT support; it also can't call .cast()\r\n                if (ClassReflection.isInstance(typeIn, o))\r\n                    output.add((T1)o);\r\n            }\r\n            return output;\r\n        }\r\n    }\r\n```\r\nI can see places where people might want this, and it would be better to have in Array than in an external class. The alternative using the existing select() is quite clumsy, and I can see why I haven't used the Predicate API until now:\r\n```java\r\n        Iterable<SuperClass> pit = a.select(new Predicate<SuperClass>() {\r\n            public boolean evaluate(SuperClass item) {\r\n                return ClassReflection.isInstance(SubClass.class, item);\r\n            }\r\n        });\r\n        Array<SubClass> subs = new Array<>(a.ordered, a.size, SubClass.class);\r\n        for(SuperClass sup : pit)\r\n            subs.add((SubClass) sup);\r\n```\r\nIt is only a little cleaner using Java 8 lambdas. Using a dedicated method, like what you gave, would be preferable to this, mainly because it is resilient against any change to the original Array (using a PredicateIterable wouldn't necessarily be able to work if the Array gets cleared).\r\n\r\nI'm curious what @NathanSweet thinks about including type-changing code in Array, since I think most of Array is his work.","I don't hate the method necessarily, though it feels a little close to being application specific. If it was needed often it could make sense. I don't personally do this very often. Do you guys feel it warrants a method?\r\n\r\nI'm not sure about the `ofType` name, as we already have a static `of` method.\r\n\r\nI've never actually used the predicate API either.","I'm having a hard time thinking of a better name -- withType() sounds like it adds some type info, havingType() is clumsy... There's some precedent for reusing the first word, where select() and selectRanked() are completely different methods.\r\n\r\nThis does seem rather specific and maybe better handled in application code? I imagine many use cases that would want something like this would need something slightly different anyway...","There's a similar method in the maps code (see MapObjects, MapLayers) where it is called getByType, though getAllByType is probably more accurate albeit verbose."],"labels":["feature request"]},{"title":"Removed duplicate code in TmxMapLoader","body":"extracted the common variable to simplify some similar code","comments":["Looks good to me."],"labels":["code quality","tilemap"]},{"title":"FIX: Parsing imagelayer inside a group tag in TMX file","body":"TmxMapLoader did not parse `imagelayer` tag when it is inside `group` tag.\r\n\r\nThe problem was that the code only passed through the descendants of the `map` tag.\r\nThe Solution is to change ` root.getChildByName(\"tileset\")` to ` root.getChildrenByNameRecursively(\"tileset\")`\r\n\r\nAdded the test for this situation","comments":["Wow! I can't believe I didn't realize getChildrenByNameRecursively existed.\r\nI had a manual fix for this here, PR https:\/\/github.com\/libgdx\/libgdx\/pull\/7075\r\nYour solution is way cleaner, so I can close out mine out if this works.\r\nCan you confirm this works on really messy and nested layer groups, something like this?\r\n![image](https:\/\/user-images.githubusercontent.com\/55356015\/235478585-b0e5a6c7-1221-48d1-9f92-ad931fa3b5bb.png)\r\n\r\n","> Wow! I can't believe I didn't realize getChildrenByNameRecursively existed. I had a manual fix for this here, PR #7075 Your solution is way cleaner, so I can close out mine out if this works. Can you confirm this works on really messy and nested layer groups, something like this? ![image](https:\/\/user-images.githubusercontent.com\/55356015\/235478585-b0e5a6c7-1221-48d1-9f92-ad931fa3b5bb.png)\r\n\r\nYes, I updated `TiledMapGroupLayerWithImagelayerTest`, so it uses the `test.tmx` same as from your comment.\r\n\r\nThe screenshot\r\n![Screenshot from 2023-05-02 20-01-13](https:\/\/user-images.githubusercontent.com\/2102296\/235747759-13eaf629-3e5d-4c2d-9d54-5a327d78a437.png)\r\n[test.tmx](https:\/\/github.com\/libgdx\/libgdx\/pull\/7135\/files#diff-6570cba33c9fea6beca8bd1e8dea81554019ebf4a490fbac74e4c4f83e3fc8f1)","Awesome work! You never know when someone will have some crazy mess of nested groups and layers, so I just had to check. \r\nI'll be closing out my PR on this subject in favor of yours."],"labels":["bug","tilemap"]},{"title":"TextureUnpacker using Gdx, no AWT involvement.","body":"However this one has to be run from Gdx application context, so that it has access to OpenGL and Gdx.file. As a result, it cannot be run from command line.","comments":["+1 for non AWT TexturePacker and replacement. I think I had a dream where you did that @tommyettinger.\r\n\r\nFor a solution right now for m1, I spawn a new jvm and run tools as its own runnable jar programmatically when I need to pack\/unpack on m1, which is not very nice","It turns out I did make [a standalone texture packer and unpacker](https:\/\/github.com\/tommyettinger\/libgdx-texturepacker\/tree\/main); they don't use LWJGL3, but still use AWT, and I think should work on Macs. I made quite a few of the gdx-tools into standalone apps, though there's no central directory of them now, so the easiest way to find them is by looking through the repos on my GitHub profile. They all have names starting with `libgdx-` ."],"labels":["tools"]},{"title":"Feature request: improve GWT reflection lib over Method Modifiers.","body":"This is a feature request regarding Method Modifiers. \r\nThe class [Method.java](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/utils\/reflect\/Method.java)  does not take care of Synthetic and Bridge methods. \r\nIt should be added at least `boolean isSynthetic()` and `boolean isBridge()` methods to cover are possible Method's modifiers.\r\nIt would be even better if can be added a method `int getModifiers()` so that it would be simpler to cope with method's modifiers.\r\n\r\nPlease take in consideration to implement this feature in the near future.\r\nThanks in advance.\r\n\r\n","comments":[],"labels":["feature request"]},{"title":"[Feature request] Add ability to get texture coordinates from ray cast hit","body":"#### Issue details\r\nI'm trying to implement a simple painting functionality in a 3D space and I'm completely confused that there's no in-built way to get the texture coordinate from ray cast like Unity's RayCastHit.textureCoord. It would be great if we have a simple way to obtain it because currently, it's a tremendous limitation for framework usage for a 3D game development\r\n\r\n\r\n","comments":[],"labels":["feature request"]},{"title":"Android touch input starts after a few seconds (Android 13)","body":"#### Issue details\r\nWhen starting a GDX application on Android it takes a few (2-3) seconds before the first touch input is recognized.\r\nI had this issue using a Google Pixel 6 Pro and Google Pixel 5 with Android 13. On a LG G6 with Android 9 it works as expected directly after launching the application. Maybe it has something to do with the Android verisons?\r\n\r\nThe code I'm testing with is pretty simple:\r\n```java\r\nimport com.badlogic.gdx.ApplicationAdapter;\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.graphics.GL20;\r\n\r\npublic class Game extends ApplicationAdapter {\r\n\r\n\t@Override\r\n\tpublic void render() {\r\n\t\tif (Gdx.input.justTouched()) {\r\n\t\t\tGdx.app.log(\"INPUT_TEST\", \"justTouched\");\r\n\t\t}\r\n\t\tif (Gdx.input.isTouched()) {\r\n\t\t\tGdx.app.log(\"INPUT_TEST\", \"isTouched\");\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n#### Reproduction steps\/code\r\nReproduction is pretty simple. I just have to restart the app, touch the display a few times per second and wait for the log output.\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\nThese are the dependency versions I'm using. No further dependencies were used. It's the default project setup using the setup tool.\r\n- gdxVersion = '1.11.0'\r\n- roboVMVersion = '2.3.16'\r\n- box2DLightsVersion = '1.5'\r\n- ashleyVersion = '1.7.4'\r\n- aiVersion = '1.8.2'\r\n\r\n#### Stacktrace\r\n-\r\n\r\n#### Please select the affected platforms\r\n- [x] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] macOS\r\n\r\nSorry if I missed some information. Just let me know and I will provide them.\r\n","comments":["Does messing with `targetSdkVersion` achieve anything? There was some gesture stuff or something introduced in Android 13 and I wonder if it may be interfering. This behaviour doesn't occur in non-libGDX apps, right?","This behaviour only occurs on libGDX apps. I tested it with some other published apps like PokeMMO and Kakele which are listed on the libGDX showcase page. I have the same issue using these apps. Using any other non libGDX games\/apps works just fine, input works directly after the app started. \r\n\r\nI could mess around with the `targetSdkVersion` but this sounds more like a workaround than a real solution. But I will try it anyways and post the result in a later post. \r\nCurrently the `targetSdkVersion` is set to 32 (Android 12) so I don't even use the one for Android 13.","I can reproduce on Pixel 6 (Android 13), doesn't occur on Pixel 3 (Android 12) with targetSDK 33. Not sure what's going on yet."],"labels":["android"]},{"title":"Fix : RenderBuffer leak in GLFrameBuffer class","body":"RenderBuffer leak : depth and stencil render buffers are never released. \r\n\r\nDestroy any created render buffer. According to openGL specs it's possible to do so without even checking if the buffer has been created\r\n\r\nSee: #7094 \r\n\r\n-- ","comments":["this is a very important fix. Is there anything wrong, stopping a merge into GDX master ?","Looking to the original issue, it looks like a misuse of the API, i think it would be better to throw an exception when user add non compatible\/duplicate buffers instead.\r\n\r\nBTW, you don't have to create an issue and a PR for the same topic, simply a PR is enough.","PR came after issue.\r\nApi can be misused anyway, so this fix is welcome.\r\n\r\n No bother, we keep this fix internally. It will not hurt anyone.","@MikOfClassX do you plan to implement the proper fix? if not, maybe you could close the PR.","> \r\n\r\non that now with @dar-dev "],"labels":["GL"]},{"title":"Add glBlendEquationSeparate\/glBlendFuncSeparate support in BlendingAttribute + Bug fixes","body":"We really miss the possiblity to enable advanced blending modes in BlendingAttribute.\r\nBlending towards fully transparent buffers (ie. FBO) needs more control for alpha and rgb equations, expecially when dealing with premultiplied alpha. \r\n\r\nThis PR is API compliant and does not introduce additional openGL state changes if not used advanced blending features.\r\n\r\nWe also fix the following issues : #7085 , #7086\r\n\r\n--","comments":["the problem of libgdx public fields is a persecution.\r\nSo, if a compiling issue is acceptable for you, why don't we just create accessors and make those fields private ?\r\nThere will be no perf hit using them. Just better oop desing. The compliler will just inline accessors code. https:\/\/medium.com\/codex\/method-inlining-in-java-84caec9b3e18\r\n\r\n","Since all of other Attribute classes expose values as public fields, i think it's preferable to keep them public for consistency. GLES spec is pretty stable now and i don't think we'll need to change that again.","I'll never stress too much the lack of encapsulation is the real stopper of libgdx improvement. You know that already.\r\nBTW I'm not getting the GLES correlation with public fields."],"labels":["enhancement","GL","breaking change"]},{"title":"[Feature request]\nAnimation retargeting and inverse kinematics","body":"I need to share\/retarget animation from one model to another sharing same skeleton structure.It would be nice if libgdx provide an easy api.\n","comments":["You might get some good ideas and\/or usable inverse kinematics code from @Raxorg 's Alejandria repo: https:\/\/github.com\/Raxorg\/Alejandria\/blob\/master\/core\/src\/com\/epicness\/alejandria\/showcase\/modules\/kinematics\/InverseKinematics.java\r\n\r\nI haven't used the code yet, but [the demo that shows Alejandria](https:\/\/raxorg.github.io\/Alejandria\/) is impressive."],"labels":["feature request"]},{"title":"Support for Image Layer repeat x and y in TiledMap + Bugfix","body":"This PR will accomplished two things.\r\n1. Add the ability for Image Layers to be repeated along the X and\/or Y axis to support the repeatx and repeaty attributes on a layer in Tiled.\r\n2. Fix a Glaring position issue that has always existed when using ImageLayers in any non-orthograpic map renderer. (That I only learned about while working on this).\r\n3. Added a new GDXTest specifically to show off this feature.\r\n\r\nFirst I would like to point out a bug that seems to have always existed. As I learned while working on this PR. Any imagelayer that was added to a tiled map would render at the incorrect position in the following MapRenderers:\r\nIsometricStaggeredTiledMapRenderer\r\nIsometricTiledMapRenderer\r\nHexagonalTiledMapRenderer (staggered X and\/or Y)\r\n\r\nThis was because they were all using the same BatchTiledMapRenderer.renderImageLayer() which works fine for the OrthogonalTiledMapRenderer but not the rest.\r\nWhile fixing this I needed to give each renderer their own specific renderImageLayer() to fit it's needs.\r\n\r\nUsing the base examples I modified with an Image Layer found in GDXTests:\r\nPictures comparing Tiled, with how they render in libGDX.\r\nAnd what I think to be the reasoning behind the issue. Please correct me if I am mistaken.\r\nIsometricTiledMapRenderer:\r\n![iml_Issue_Iso](https:\/\/user-images.githubusercontent.com\/55356015\/216076920-6240cb34-2bc9-46b2-90ef-586d13988e47.PNG)\r\nSo, Because of the way libGDX handles the isometric coordinates. The leftmost tile of the map begins rendering at world position 0,0, while in Tiled the y position is actually totalHeight\/2\r\nex. Map 800px in height, leftmost tile edge starts rendering at 0,400 in tiled\r\nTo compensate for that we need to subtract half the map's height in pixels then add half of the tile's height in order to position it properly in order to get a 1 to 1 rendering as to where the imagelayer renders in tiled. \r\nhttps:\/\/github.com\/BoBIsHere86\/libgdx\/blob\/61b2384796a471d8af54eb1849861c1994f8588b\/gdx\/src\/com\/badlogic\/gdx\/maps\/tiled\/renderers\/IsometricTiledMapRenderer.java#L262\r\n\r\nIsometricStaggeredTiledMapRenderer:\r\n![iml_Issue_IsoStag](https:\/\/user-images.githubusercontent.com\/55356015\/216076949-58812f11-a7d4-4cbc-9604-cd53a05c9932.PNG)\r\nMust offset imagelayer x position by half of tileWidth to match position in  tiled.\r\nhttps:\/\/github.com\/BoBIsHere86\/libgdx\/blob\/61b2384796a471d8af54eb1849861c1994f8588b\/gdx\/src\/com\/badlogic\/gdx\/maps\/tiled\/renderers\/IsometricStaggeredTiledMapRenderer.java#L211\r\n\r\nHexagonalTiledMapRenderer Stagger X Axis:\r\n![iml_Issue_Hex_X](https:\/\/user-images.githubusercontent.com\/55356015\/216077021-80526cc1-0e3f-4d56-a604-e8246f269bbc.PNG)\r\nIf X axis is the staggered axis, must offset imagelayer y position by adding half of tileHeight to match position\r\nhttps:\/\/github.com\/BoBIsHere86\/libgdx\/blob\/61b2384796a471d8af54eb1849861c1994f8588b\/gdx\/src\/com\/badlogic\/gdx\/maps\/tiled\/renderers\/HexagonalTiledMapRenderer.java#L290\r\n\r\nHexagonalTiledMapRenderer  Stagger Y Axis:\r\n![iml_Issue_hex_y](https:\/\/user-images.githubusercontent.com\/55356015\/216077063-f3a69731-61a0-45fe-ba14-041ea18d4c60.PNG)\r\nThis one was a bit complicated to figure out but ImageLayer's y position seems to be placed at an offset determined the total height if this were a normal tile map minus the height as calculated for a hexmap. We get this number and use it to counter offset our Y. Then we will have our imagelayer matching its position in Tiled. \r\nhttps:\/\/github.com\/BoBIsHere86\/libgdx\/blob\/61b2384796a471d8af54eb1849861c1994f8588b\/gdx\/src\/com\/badlogic\/gdx\/maps\/tiled\/renderers\/HexagonalTiledMapRenderer.java#L295\r\n\r\nAnyway, once that issue was out of the way. Now I could get to the ACTUAL PR, lol.\r\n\r\nThe basic idea behind the tiling feature was to make it match 1:1 with how Tiled renders it.\r\nRepeat X, Tiles horizontally. Repeat Y Tiles vertically. But if we have both select. It tiles all directions infinitely and not just Up\/Down.\r\n\r\nI have an example of the results in a new TiledMapImageLayerRepeatTest test I made, each with it's own map based on the maps we seem to always use.\r\n\r\nOrthogonalTiledMapRenderer:\r\n![imagelayer_RepeatOrtho](https:\/\/user-images.githubusercontent.com\/55356015\/216086822-853e4e0c-4aa0-45cb-a9c4-b3d05c432707.gif)\r\n\r\nOrthoCachedTiledMapRenderer:\r\n![imagelayer_RepeatOrthoCache](https:\/\/user-images.githubusercontent.com\/55356015\/216087239-90e49c41-130f-4c0f-909b-5ce7feb7d0f7.gif)\r\nThis I found to be a bit tricky, but I based it on the bounds cache. So it will render as many tiles are needed to fit within the bounds of the cache. Then when it gets to the point where the cache is invalided it get's rendered. But you will never notice this, unlike in the test. where we can see outside of the bounds, which is why this looks different than the OrthogonalTiledMapRenderer Test.\r\n\r\nIsometricTiledMapRenderer:\r\n![iso](https:\/\/user-images.githubusercontent.com\/55356015\/216086912-f4555c1d-dd0e-4d61-9eda-9e6582b2454a.PNG)\r\n\r\nIsometricStaggeredTiledMapRenderer:\r\n![isoStag](https:\/\/user-images.githubusercontent.com\/55356015\/216087006-3f92ab3e-c7f5-48d6-a872-a020de71f7e1.PNG)\r\n\r\nHexagonalTiledMapRenderer staggered X:\r\n![hex_x](https:\/\/user-images.githubusercontent.com\/55356015\/216087070-1f317a68-acf4-4733-b2dd-ed06260207a7.PNG)\r\n\r\nHexagonalTiledMapRenderer staggered Y:\r\n![hex_y](https:\/\/user-images.githubusercontent.com\/55356015\/216087141-7a7e8aa1-4557-4a4e-8837-790f1076b7f6.PNG)\r\n\r\nAs for how I actually implemented this tiling function:\r\nhttps:\/\/github.com\/BoBIsHere86\/libgdx\/blob\/61b2384796a471d8af54eb1849861c1994f8588b\/gdx\/src\/com\/badlogic\/gdx\/maps\/tiled\/renderers\/BatchTiledMapRenderer.java#L243\r\n\r\nAnd this is replicated in each of the specific renders.\r\n\r\nI left a giant comment in there explaining the my thought process. I may remove it. But I wasn't sure what the protocol was, as I thought it would help if someone was looking at it. I could just remove it.\r\n\r\nAny thoughts or complaints are welcome.\r\n\r\nAlso, While I was writing up this PR it seems like the Parallax feature was reviewed and accepted. I will need to add and do some testing to make sure the Parallax effect will work on image layers and if they tile properly with it enabled. But as of right now the parallax attribute is not taken into account.\r\n\r\n\r\n\r\n\r\n\r\n","comments":["I've tested Quillravens parallax code in a separate merged local branch I have.\r\nAnd the effect seems to work without issue. Though it might be hard to tell with this low fps gif I quickly made.\r\n![imageLayerRepeatParallaxOrtho](https:\/\/user-images.githubusercontent.com\/55356015\/216118380-ece6ab12-72a6-493a-99df-4ba8b2d90eb5.gif)\r\n\r\nThis PR will have to wait until https:\/\/github.com\/libgdx\/libgdx\/pull\/6714 get's merged. As I will need to modify the new renderImage Methods to support it as this branch does not contain any of his parallax code.","Now that Quillraven's Parallax code has been merged. I rebased against the master to pull in his changes. \r\nAnd I modified the renderImageLayer() functions that I added while doing this PR to make sure they support the parallax effect as well.\r\nThe only last hanging thread would be if my Tinting Feature PR were to be accepted as I completed that first.(https:\/\/github.com\/libgdx\/libgdx\/pull\/7076). I would need to update that PR, if this one is accepted and merged. To add tinting functionality to the new image renderers. \r\n\r\nOther than that there is no more work for me to do on this PR, unless someone finds and issue. \r\nLet me know. Cheers!","I felt my original code for tiling the images was a bit overly complicated and hard to understand. I realized it could be done a lot simpler so I changed it, retested and removed a giant ugly comment I had placed in there.\r\nThat is all.","I see a bunch of Tiled PRs here but I don't think anyone in the team who can review... uses Tiled. I can only just barely use Tiled well enough to replicate\/verify bugs; I don't use it day-to-day in any of my code. There's been some talk of splitting the Tiled maps package into its own repo, though that would have to be after the next release. So uh... sorry these PRs are taking so long to get merged; you clearly put a lot of thought and work into the descriptions!","Thanks for the update. No rush on my end, libGDX is an awesome framework and I'm just doing my part to give back to this great community when I can."],"labels":["tilemap"]},{"title":"Support for Layer TintColor in TiledMap","body":"After coming across this issue https:\/\/github.com\/libgdx\/libgdx\/issues\/6503 I decided to try and give it a go.\r\nThis PR gives the ability for the Tint Color attribute which was added in Tiled 1.4 to be recognized.\r\n\r\n\r\nAs I was researching this I also found and implemented a fix for the following issue:\r\nWhen a layer was in a group which had it's opacity set, that opacity attribute was being ignored as the layer's own opacity was not affected by the parent's. Which is NOT how it is rendered in tiled. \r\n\r\nOverview of PR Changes:\r\n- Implemented TiledMap tintcolor attribute\r\n- Fixed issue where opacity of parent group was ignored when rendering.\r\n- Insure tintcolor and opacity attribute changes work in all of the following maptypes:\r\nOrthogonalTiledMapRenderer, OrthoCachedTiledMapRenderer, IsometricTiledMapRenderer, IsometricStaggeredTiledMapRenderer, HexagonalTiledMapRenderer\r\n- ImageLayers are rendered in a different method compared to normal TileLayers. So I made effort to include a test map with them.\r\n- Created a new GDXTest, TiledMapLayerTintOpacityTest based on the TiledMapLayerOffsetTest as it was most similar. Created 6 separate test maps which showcase different opacity and tinting combinations.\r\n- End result is that maps generated should match 1:1 with their tiled counterpart\r\n- *also note: I fixed a comment where I found a typo in Color.class\r\n\r\n\r\nOne thing to mention specifically about the tintcolor attribute, that I learned.\r\nI saw that we already have some code in place which converts tile's color format to a libGDX color. For custom properties which could be of type Color.\r\nhttps:\/\/github.com\/libgdx\/libgdx\/blob\/9fb9353c99ae5b30b455262832c13a84c2736bd4\/gdx\/src\/com\/badlogic\/gdx\/maps\/tiled\/BaseTmxMapLoader.java#L440\r\n\r\nTiled uses the format #AARRGGBB but for some reason when a tintcolor is selected and has an alpha of 255 (the default), tiled generates the color code without adding in the alpha for some reason. For example, a layer with a tint of Solid red, with an alpha of 255 generates: ` <layer id=\"1\" name=\"Tile Layer 1\" width=\"10\" height=\"10\" tintcolor=\"#ff0000\">`\r\nWhile Solid Red with an alpha of 254 generates: `<layer id=\"1\" name=\"Tile Layer 1\" width=\"10\" height=\"10\" tintcolor=\"#feff0000\">`\r\n#ff0000(alpha not included) vs #feff0000\r\nBut for the custom color property, that is not the case, it always passes the full color code.\r\nAnyways, I specifically setup a check for it in tintcolor based on this possibility here:\r\nhttps:\/\/github.com\/BoBIsHere86\/libgdx\/blob\/927528e9e22402c834fdf97c5ef6fc606327c486\/gdx\/src\/com\/badlogic\/gdx\/maps\/tiled\/BaseTmxMapLoader.java#L315\r\n\r\n\r\n\r\nExamples comparing tiled and the result in GDXtest:\r\nOrthogonalTiledMapRenderer:\r\n![test1](https:\/\/user-images.githubusercontent.com\/55356015\/214944945-a335e904-287b-4c95-b9a8-2898b5fa2dec.PNG)\r\n\r\nOrthoCachedTiledMapRenderer:\r\n(Note: the OrthoCached map does not seem to have support for groups, so I am using a different testmap then the one above)\r\n![test2](https:\/\/user-images.githubusercontent.com\/55356015\/214945144-ce627833-5a47-4c3d-926e-58369e759198.PNG)\r\n\r\nIsometricTiledMapRenderer:\r\n![test3](https:\/\/user-images.githubusercontent.com\/55356015\/214945638-cee006d3-af99-4079-b4b6-514aba619f8d.PNG)\r\n\r\nIsometricStaggeredTiledMapRenderer:\r\n![test4](https:\/\/user-images.githubusercontent.com\/55356015\/214945752-1c403824-3b46-48a3-ae5c-28f4348c9cbd.PNG)\r\n\r\nHexagonalTiledMapRenderer:\r\n![test5](https:\/\/user-images.githubusercontent.com\/55356015\/214945997-cd57e982-d589-4cfa-9787-15dfef23827d.PNG)\r\n\r\nOrthogonalTiledMapRenderer (with ImageLayers):\r\nSince I made a modification to all the renderImageLayer() methods  I thought it far to have a test show working ImageLayers\r\n![test6](https:\/\/user-images.githubusercontent.com\/55356015\/214946047-b3670a47-8d40-4603-a066-9606bf1aefc2.PNG)\r\n\r\nThis is my first large PR for libGDX, so please any comments, thoughts or complaints. Feel free to yell at me, it's the only way I'll learn.\r\n","comments":["Now that Quillraven's Parallax update is in place. Some modifications need to be made. But I will wait to see if the ImageLayer Repeat PR is accepted (https:\/\/github.com\/libgdx\/libgdx\/pull\/7080). As I will need to add tint functionality to those new areas of the renderer."],"labels":["tilemap"]},{"title":"On window minimize Screen.resize(0,0) called on Windows but not on Linux","body":"When user minimizes the game window, or alt-tabs out of a fullscreen mode, Screen.resize(0,0) gets called when running on Windows. But running on Linux (Debian MATE, if that matters) Screen.resize(0,0) is not called. I don't know if this is a bug, it just caused me some confusion. \r\n\r\nWhich is the intended behavior, calling resize(0,0) or not calling? On Linux it anyway correctly calls pause() and resume() which are handy for handling relevant logic when exiting \/ resuming the game window, so resize(0,0) seems redundant to me.\r\n\r\nUsing libGDX verion 1.11.0 \r\n\r\nCould not test on macOS for I don't have one\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [X] Windows\r\n- [X] Linux\r\n- [ ] macOS \r\n","comments":["In my Ubuntu MATE Linux experience, `pause()` doesn't get called on Alt+Tab. To detect that, a `Lwjgl3WindowAdapter` is required (`focusLost()`, `focusGained()`). Though it does get called on minimise, and `resume()` on unminimise.\r\n\r\nThe `resize(0, 0)` behaviour is odd to me - LWJGL2 wasn't like this, and it's a frequent source of bugs such as when generating a gdx-freetype font based on window size (generating a font of size 0 crashes it). The different behaviour across operating systems only adds to this oddness.","I did some further testing, and turns out you are correct: on Linux (MATE at least) `pause()` is not called on Alt+Tab when in windowed mode. Yet `pause()` is called when  alt-tabbing out of fullscreen mode, at least with this configuration:\r\n```\r\n\r\n  config.setDecorated(false);\r\n  config.setResizable(false);\r\n  config.setFullscreenMode(Lwjgl3ApplicationConfiguration.getDisplayMode());\r\n  \r\n```\r\n \r\nSo, yeah - some oddity oddness, maybe? Naturally, one can live with this once one figures out how things work on each environment, but if possible it would be great to have consistent behavior on different Desktop OSes.  ","`pause()` occurs when Alt+Tabbing with that configuration because the window automatically minimises. `config.setAutoIconify(false)` to stop that.","Ah, thanks for the clarification! Personally, I find pause() being called handy, for it is where I stop background music etc. when the game loses focus.\r\n\r\nIs there then a way to make pause() to be called when alt-tabbing out in windowed mode? Or are we supposed to handle this kind of logic with Lwjgl3WindowAdapter focusLost() and focusGained() ?","Hopefully someone more involved in the backends can say. Desktop is the odd one out, as the game is always running in comparison to other backends where the game actually pauses when switching to a different app on mobile or tab on GWT. For this reason, I give it special attention for this sort of stuff. I like to pause rendering etc. on minimise.","`pause()` being called when the window loses focus is part of  #7287. As to whether `resize(0, 0)` should be called on pause \u2013 that depends on the platform, see [#33](https:\/\/github.com\/glfw\/glfw\/issues\/33). We could definitely document that behaviour better, but changing it is probably not a good idea if the `resize(0, 0)` calls actually serve a purpose (albeit a rather limited one)."],"labels":["bug","desktop"]},{"title":"Fix GLFW window creation with ANGLE and Ubuntu with Nvidia GPU Drivers","body":"This is just a propose for a workaround to fix #6860 , I didn't understand the real root cause of this issue, this only info I was able to find was in GLFW docs https:\/\/www.glfw.org\/docs\/3.3\/window_guide.html#GLFW_CONTEXT_CREATION_API_hint they advice some special behaviors with some Linux systems and X11 which looks like linked to the problem.\r\n\r\nAny comments or insights would be highly appreciated.","comments":[],"labels":["angle"]},{"title":"isKeyJustPressed & isButtonJustPressed does not trigger consistently at '1.11.0' with gdx-lwjgl3-glfw-awt-macos","body":"Not using the gdx-lwjgl3-glfw-awt library and using JVM opts \"-XstartOnFirstThread\" fixes the issue.\r\n- [ X] macOS\r\n","comments":["It seems like -XstartOnFirstThread is the only really reliable way to have LWJGL3 work on MacOS. The [StartOnFirstThreadHelper](https:\/\/github.com\/crykn\/guacamole\/blob\/master\/gdx-desktop\/src\/main\/java\/de\/damios\/guacamole\/gdx\/StartOnFirstThreadHelper.java) class from Guacamole may make distributing executable JARs easier -- just start your main() method with `if (StartOnFirstThreadHelper.startNewJvmIfRequired()) return;` and that file takes care of restarting with the necessary argument if it isn't already there. Distributing with Packr or jpackage means users don't need a JDK installed (which can be tricky on MacOS, because of x64 and ARM64 both being used), and both of those can specify -XstartOnFirstThread as an argument when launched via the .app . The need for -XstartOnFirstThread is mostly an issue during development, when JARs are being sent around but not yet packaged with JREs for distribution. Hopefully the class from Guacamole (which really just needs that file, not the library) can help.","I am planning to create a debug UI\/editor UI as a second window on top \/ besides my libgdx app. \r\n\r\nSo I would be interested to fix these issues also. Where would I have to look ?","I don't think this is as easy to fix as you'd like it to be, but the best place to start looking is the original PR that introduced the extension (https:\/\/github.com\/libgdx\/libgdx\/pull\/6772). \r\n\r\nApart from that, you could try removing the `gdx-lwjgl3-glfw-awt-macos` extension and doing this at the beginning of your `DesktopLauncher` instead:\r\n```java\r\nif (SharedLibraryLoader.isMac && Gdx.app == null) {\r\n    org.lwjgl.system.Configuration.GLFW_LIBRARY_NAME.set(\"glfw_async\");\r\n}\r\n```\r\n\r\nThis should have the same effect as our extension, but is offered by LWJGL 3 itself. So they might be able to help you figure out what is causing this."],"labels":["bug","glfw-awt-macos"]},{"title":"[gdx-lwjgl3-angle] Library extraction not compatible with osx packaging","body":"#### Issue details\r\nThe angle libraries are extracted in the current directory of the app, see [source code](https:\/\/github.com\/libgdx\/libgdx\/blob\/999291f7169bf463cee517d911499153cf8f2574\/extensions\/gdx-lwjgl3-angle\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/angle\/ANGLELoader.java#L207)\r\n\r\nThis causes issues with various package formats since it changes the overall package signature.\r\nOn OSX for example, the `*.app` package won't run anymore because of that.\r\n\r\nThere is no issue when running the plain jar file, but as soon as you're running from a package application everything breaks.\r\n\r\n\r\nOn a more general note it looks like a lot of the native library load code is duplicated from [gdx-jnigen](https:\/\/github.com\/libgdx\/gdx-jnigen\/blob\/master\/gdx-jnigen-loader\/src\/main\/java\/com\/badlogic\/gdx\/utils\/SharedLibraryLoader.java).\r\n\r\nWouldn't it be possible to simply reuse it instead of re-inventing the wheel?\r\n\r\nI noticed the same issue duplicate code issue in the [GlfwAWTLoader](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/extensions\/gdx-lwjgl3-glfw-awt-macos\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/awt\/GlfwAWTLoader.java).\r\n\r\nMerging the load code would also make sure that the folder\/file structure for the native libraries is the same. Currently it's a big mix of everything: Subfolders per os\/arch, files per os\/arch.\r\n\r\nIf it's really required to have the libraries in a path accessible by `dlopen`, would it be possible to specify a custom directory which should be used for extraction and then provide `DYLD_LIBRARY_PATH` as startup environment? (not sure if that works, might need to do some testing)\r\n\r\n#### Reproduction steps\/code\r\n1) Use the angle extension\r\n2) Package the libgdx app into an `*.app` bundle\r\n3) Sign all files\r\n4) Notarize and stamp the bundle\r\n5) Try to start the app\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\n1.11.0\r\n\r\n#### Stacktrace\r\nWhen manually running the jar in the app bundle:\r\n```java\r\nEGL: Library not found\r\n```\r\n\r\nWhen running the app bundle (as an end-user would): Nothing, app doesn't start\r\n\r\n#### Please select the affected platforms\r\n- [X] macOS\r\n","comments":["Read the fhll comment. It explaims exactly why this works as it does (which\nalso explains why it doesn't reuse the loader from jnigen). I don't have a\nsolution for that, other than forking GLFW, which seems like a worse\nsolution.\n\nOn Fri, Jan 6, 2023, 15:14 David ***@***.***> wrote:\n\n> Issue details\n>\n> The angle libraries are extracted in the current directory of the app, see source\n> code\n> <https:\/\/github.com\/libgdx\/libgdx\/blob\/999291f7169bf463cee517d911499153cf8f2574\/extensions\/gdx-lwjgl3-angle\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/angle\/ANGLELoader.java#L207>\n>\n> This causes issues with various package formats since it changes the\n> overall package signature.\n> On OSX for example, the *.app package won't run anymore because of that.\n>\n> There is no issue when running the plain jar file, but as soon as you're\n> running from a package application everything breaks.\n>\n> On a more general note it looks like a lot of the native library load code\n> is duplicated from gdx-jnigen\n> <https:\/\/github.com\/libgdx\/gdx-jnigen\/blob\/master\/gdx-jnigen-loader\/src\/main\/java\/com\/badlogic\/gdx\/utils\/SharedLibraryLoader.java>\n> .\n>\n> Wouldn't it be possible to simply reuse it instead of re-inventing the\n> wheel?\n>\n> I noticed the same issue duplicate code issue in the GlfwAWTLoader\n> <https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/extensions\/gdx-lwjgl3-glfw-awt-macos\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/awt\/GlfwAWTLoader.java>\n> .\n>\n> Merging the load code would also make sure that the folder\/file structure\n> for the native libraries is the same. Currently it's a big mix of\n> everything: Subfolders per os\/arch, files per os\/arch.\n> Reproduction steps\/code\n>\n>    1. Use the angle extension\n>    2. Package the libgdx app into an *.app bundle\n>    3. Sign all files\n>    4. Notarize and stamp the bundle\n>    5. Try to start the app\n>\n> Version of libGDX and\/or relevant dependencies\n>\n> 1.11.0\n> Stacktrace\n>\n> EGL: Library not found\n>\n> Please select the affected platforms\n>\n>    - macOS\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/libgdx\/libgdx\/issues\/7058>, or unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAD5QBBOJW5SS2VL73VNHITWRASDRANCNFSM6AAAAAATTD2JQM>\n> .\n> You are receiving this because you are subscribed to this thread.Message\n> ID: ***@***.***>\n>\n","Yeah I read the comment, but the intention isn't completely clear to me. Is it to use the angle glfw binding instead of the regular one? Aka overriding the other library?\r\n\r\nThe main issue is that it's not usable in this state for osx, since I suppose every dev would ship their app as bundle. Especially due to security requirements by Apple.","Are you integrating the ANGLE binding on purpose? If so, then there\ncurrently is no alternative to how it works.\n\nif you do not use it on purpose, remove it from the Gradle build of your\napp.\n\nOn Fri, Jan 6, 2023, 17:03 David ***@***.***> wrote:\n\n> Yeah I read the comment, but the intention isn't completely clear to me.\n> Is it to use the angle glfw binding instead of the regular one? Aka\n> overriding the other library?\n>\n> The main issue is that it's not usable in this state for osx, since I\n> suppose every dev would ship their app as bundle. Especially due to\n> security requirements by Apple.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https:\/\/github.com\/libgdx\/libgdx\/issues\/7058#issuecomment-1373836669>,\n> or unsubscribe\n> <https:\/\/github.com\/notifications\/unsubscribe-auth\/AAD5QBH6VCJBZXHYY5NHUKLWRA64FANCNFSM6AAAAAATTD2JQM>\n> .\n> You are receiving this because you commented.Message ID:\n> ***@***.***>\n>\n","Yes I am, well was. I tested it and stumbled upon this issue.\r\n\r\nWe should try to find a solution since it's not usable in a production build otherwise imho. Maybe the libs can be already included in the correct place in the bundle and provide a note in the documentation ","Okay so I've spent a lot of time trying to find a solution, but it appears that it's not as simple as expected:\r\n1. The default working directory when running an osx app is either `\/` or the bundle path itself (depending if executed via finder or `open`)\r\n2. Both location do not allow the libraries to be extracted \r\n\r\nMy idea was to disable the extraction at these locations in the `ANGLELoader` and manually include the libs. This however had a couple of other issues since the launcher binary included by `jpackage` doesn't use the `-headerpad_max_install_names` linker flags, it's not possible to use the `install_name_tool` to include the path to the libraries.\r\nThis would require a change on the JDK side, which I'll try to push forward.\r\n","I was able to successfully include the libraries using an adjusted jdk launcher. I'll write up some documentation on how to include angle in an app bundle. This depends on https:\/\/github.com\/openjdk\/jdk\/pull\/11922 being merged","The fix was added to the jdk jpackage, so the associated MR here is ready","@crykn can anyone take a look at the code?","I don't know anything about the ANGLE backend nor native code, sorry. @badlogic was the one to introduce the gdx-lwjgl3-angle extension, so he's probably the one best equipped to judge #7061."],"labels":["bug","angle"]},{"title":"Mac: Tabbing out of lwjgl application and returning yields false key press","body":"#### Issue details\r\n\r\nIf you have a focused `TextField` and use `cmd+tab` to change application focus, `Gdx.input.isKeyPressed(Input.Keys.SYM)` will keep returning true, even after returning to the application. This will prevent the `TextField` input from working after returning due to this logic: https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/scenes\/scene2d\/ui\/TextField.java#L1037\r\n`if (UIUtils.isMac && Gdx.input.isKeyPressed(Keys.SYM)) return true;`\r\n\r\n#### Reproduction steps\/code\r\n\r\n1. Run a `LwjglApplication` on Mac.\r\n2. In the render method, log the output of `Gdx.input.isKeyPressed(Input.Keys.SYM)`.\r\n3. `cmd+tab` out of the application, then reopen it.\r\n4. Notice how `Gdx.input.isKeyPressed(Input.Keys.SYM)` will still return true.\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\n\r\n* gdx: `1.10.0`\r\n* Tested on MacOS Monterey 12.2.1\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [X] macOS\r\n","comments":["I can't reproduce this on master with your steps, however I can reproduce it using CMD + SHIFT + 5 to record video. And the SYM state is \"stuck\" there."],"labels":["bug"]},{"title":"[Flame] Show saved aspect texture region settings on region picker panel","body":"Currently if I open a particle what has texture with region influencer then this doesn't visible on the view of this influencer.\r\n\r\nExample:\r\n![current](https:\/\/user-images.githubusercontent.com\/1684274\/199675047-970a1032-ca81-45a5-abc4-331933816348.gif)\r\n\r\nPart of particle:\r\n```\r\n\"influencers\": [\r\n          {\r\n            \"class\": \"com.badlogic.gdx.graphics.g3d.particles.influencers.RegionInfluencer$Animated\",\r\n            \"regions\": [\r\n              {\r\n                \"u2\": 0.5,\r\n                \"v2\": 0.49892932,\r\n                \"halfInvAspectRatio\": 0.49364406\r\n              },\r\n              {\r\n                \"u\": 0.5,\r\n                \"v\": 0.49892932,\r\n                \"u2\": 1,\r\n                \"v2\": 0.99785864,\r\n                \"halfInvAspectRatio\": 0.49364406\r\n              },\r\n              {\r\n                \"v\": 0.49892932,\r\n                \"u2\": 0.5,\r\n                \"v2\": 0.99785864,\r\n                \"halfInvAspectRatio\": 0.49364406\r\n              },\r\n              {\r\n                \"u\": 0.5,\r\n                \"u2\": 1,\r\n                \"v2\": 0.49892932,\r\n                \"halfInvAspectRatio\": 0.49364406\r\n              }\r\n            ]\r\n          },\r\n```\r\n\r\nWith this fix:\r\n![with_fix](https:\/\/user-images.githubusercontent.com\/1684274\/199675078-2bda0403-cf83-4d02-877f-aa72ba264a64.gif)\r\n\r\nExample particle:\r\n[smoke.zip](https:\/\/github.com\/libgdx\/libgdx\/files\/9926653\/smoke.zip)\r\n\r\n","comments":[],"labels":["bug","tools"]},{"title":"Added support for 'class' property in tiled tmx maps.","body":"Tiled renamed the 'type' property to 'class', so I added support for that.\r\n\r\nhttps:\/\/doc.mapeditor.org\/en\/stable\/reference\/tmx-changelog\/","comments":["Looks okay to me, but appears to have conflicts what need to be resolved.","This looks like it would solve #7047 . As always, I have no idea what I am doing with Tiled and am not a good person to review this. Do we have anyone who can review Tiled code and make sense of it?","As stated in #6934 \r\n> There was a discussion also in Tiled repo because this change broke a couple of things also for non LibGDX users. I cannot remember if Bj\u00f6rn wanted to revert this change or if he keeps it.\r\n>\r\n> I would check that once more before merging the linked PR because maybe the PR is not needed.\r\n\r\n","So:\r\n> So for Tiled 1.10, we're now back to using type for objects and tiles, but for other types of objects we're still using class in order to not break compatibility again.\r\nhttps:\/\/github.com\/mapeditor\/tiled\/issues\/3492#issuecomment-1431165018\r\n\r\nTherefore I think this PR should be merged as is, as then whoever uses Tiled 1.9 still gets supported for the class type on tiles and it will still work for the 1.10 revert where some things are using \"type\" again. (And for any older versions)","Seems like tiled 1.10 was just released today and as Lyze mentioned. They reverted the Type\/Class change. But this does leave us with the tiled 1.9 inconsistency. 1.9 was active for over half a year, so I don't think it would hurt to make sure we have compatibility for those who've been using it for their maps the past year or so."],"labels":["tilemap"]},{"title":"Issues with window resizing and closing on MacOS","body":"Please ensure you have given all the following requested information in your report.\r\n\r\n#### Issue details\r\nWe encountered two issues related to application windows on MacOS:\r\n- When the app window is resized, the app very often (but not always) crashes\r\n- When the app window is closed, sometimes the app does not quit, but the window cannot be reopened. WindowListener's closeRequested is not triggered.\r\n- \r\n#### Reproduction steps\/code\r\n- Resize an app window, the app crashes with exception \"failed assertion `A command encoder is already encoding to this command buffer\"\r\n- Move the app window around a little bit, minimize, reopen the app window, then close the app window (by clicking the X button, or press Command Q). Observe that the app is not quit, but the window cannot be reopened.\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\nlibgdx = 1.11.0\r\nroboVM version = 2.3.16\r\ncom.badlogicgames.gdx:gdx-lwjgl3-glfw-awt-macos extension is used.\r\n\r\n#### Stacktrace\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ x] macOS\r\n","comments":["Probably related to #6987.","#2322","@Thakor-Yashpal You are not being helpful right now. I also have some suspicions that you are a bot, or are acting in an atypical way for a legitimate human user. Please send a picture of a cute cat to confirm that you are human. I also just like cats.","Unable to reproduce on my Intel Mac, #6987 suggests that these issues may only exist on ARM Macs."],"labels":["bug","glfw-awt-macos"]},{"title":" Gdx.input.setCursorCatched(true) crashes app on macOs with M1 chip","body":"#### Issue details\r\nCalling this particular function on macOs with M1 chip crashes the app:\r\n```java\r\nGdx.input.setCursorCatched(true);\r\n```\r\n\r\n#### Reproduction steps\/code\r\n1. Use macOs with M1\r\n2. Create new LibGdx 1.11.0 project\r\n3. Add dependency:\r\n```gradle\r\napi \"com.badlogicgames.gdx:gdx-lwjgl3-glfw-awt-macos:$gdxVersion\"\r\n```\r\n4. Set source compatability to 1.8 in ``build.gradle``\r\n5. Call function:\r\n```java\r\nGdx.input.setCursorCatched(true);\r\n```\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\n* macOs Monterey\r\n* JDK 17\r\n* LibGdx 1.11.0 + gdx-lwjgl3-glfw-awt-macos\r\n\r\n#### Stacktrace\r\n[link](https:\/\/gist.github.com\/PilzHere\/5fe1fb8cd309f65f9a3ce030c551732c)\r\n#### Content from ``hs_err_pid28244.log``\r\n[link](https:\/\/gist.github.com\/PilzHere\/cdc31f31cd5ccf8a4d1d15c391e0d0c8)\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [x] macOS\r\n","comments":[],"labels":["bug","glfw-awt-macos"]},{"title":"Desktop apps crash on Mac when window is moved around","body":"#### Issue details\r\nDesktop apps crash Mac OS when the window is moved around.\r\n\r\nSometimes it shows the following error: \r\n`A command encoder is already encoding to this command buffer `\r\n\r\n#### Reproduction steps\/code\r\nStart a Desktop app on Mac OS and move the window around, after a few seconds the app crashes.\r\n\r\n#### Workaround\r\nRemove from build.file: \r\n`implementation \"com.badlogicgames.gdx:gdx-lwjgl3-glfw-awt-macos:$gdxVersion\"`\r\nAnd use -XstartOnFirstThread as VM option\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\n1.11.1-SNAPSHOT\r\nMac OS 12.6\/M1 Mac\r\nI could not test it on Intel Mac but found a similar issue here and that happens only on M1:\r\nhttps:\/\/github.com\/opentk\/opentk\/issues\/1457\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [x] macOS\r\n","comments":["I'm just using this code now, for what it's worth. It goes in the DesktopLauncher or Lwjgl3Launcher, before any GLFW calls are made. I'm not using gdx-lwjgl3-glfw-awt-macos at all, since this acts similarly. The glfw_async feature is relatively new in LWJGL3, so requires libGDX 1.11.0 or newer.\r\n```java\r\n\t\tif (SharedLibraryLoader.isMac && Gdx.app == null) {\r\n\t\t\torg.lwjgl.system.Configuration.GLFW_LIBRARY_NAME.set(\"glfw_async\");\r\n\t\t}\r\n```","> I'm just using this code now, for what it's worth. It goes in the DesktopLauncher or Lwjgl3Launcher, before any GLFW calls are made. I'm not using gdx-lwjgl3-glfw-awt-macos at all, since this acts similarly. The glfw_async feature is relatively new in LWJGL3, so requires libGDX 1.11.0 or newer.\r\n> \r\n> ```java\r\n> \t\tif (SharedLibraryLoader.isMac && Gdx.app == null) {\r\n> \t\t\torg.lwjgl.system.Configuration.GLFW_LIBRARY_NAME.set(\"glfw_async\");\r\n> \t\t}\r\n> ```\r\n\r\nSo this approach turns out to still have issues with resizing. I've been recommending using [some form of this gist](https:\/\/gist.github.com\/tommyettinger\/27f622c2b3f3fa90fc03a4613b46a082) for a little while now, and gdx-liftoff includes that gist's code in LWJGL3 modules. On macOS, it automatically adds `-XstartOnFirstThread` so users don't need to mess with that, and doesn't need any extra dependencies or the glfw_async thing. That's all @crykn 's code from Guacamole. The part I added affects Windows, and allows users with non-ASCII usernames (and so non-ASCII paths for their default temp directory) to still run an LWJGL3 game, in at least most cases. Without something like this, a user with Turkish-specific letters in their username wouldn't be able to launch the game at all, and the same is true for some other languages."],"labels":["bug","glfw-awt-macos"]},{"title":"Added soundId support for AsynchronousSound","body":"Some time ago @obigu added asynchronous sound implementation for Android ( https:\/\/github.com\/libgdx\/libgdx\/pull\/6243 ) but it lacks support for soundId methods. This PR is my suggestion how to add support for soundId in AsynchronousSound.\r\n\r\nI've added `MAX_STREAMS_COUNT` static field to pass it to `AsynchronousSound` constructor. I could use `MAX_STREAMS_COUNT` directly in `AsynchronousSound` but `AsynchronousSound` operates with `Sound`, not `AndroidSound`. So I do not want to tie `AsynchronousSound` with `AndroidSound`.\r\n\r\nMy next doubt is about executing methods with soundId (`stop(long soundId)`, `pause(long soundId)`, `resume(long soundId)`, etc..): I running them directly, not through `Handler`. I do not know if it's ok but @obigu did the same with `stop()`, `resume()` and `pause()` methods earlier in his PR.\r\n\r\nI've tested this solution and it works in my game but probably should be tested by others.","comments":["This looks great, thanks! I'll give it a try when I have some time.","@obigu could you look at it?","> @obigu could you look at it?\r\n\r\nSorry for the delay.\r\n\r\nThe reason for `pause()` and `resume()` not requiring the `Handler` is that they don't touch the `streamIds` array which is not thread safe but `stop()` does need to go in the `Handler`. Regarding `stop(long soundId)`, `pause(long soundId)`, `resume(long soundId)` I think they are Ok not being passed to the `Handler` in terms of thread safety but not so sure in terms of functionality. What happens if a user calls `play()` and `stop(long soundId)`in a very short interval of time before the `realSoundId` has been returned? I guess `realSoundId` will be resolved as `0` (or a previous reused id) and the sound will not be stopped right? Would passing these methods to the `Handler` fix these situations because the Runnables will then need to be executed in order?"],"labels":["android","audio"]},{"title":"ci: add minimum GitHub token permissions for workflows","body":"### Description\r\nThis PR adds minimum token permissions for the GITHUB_TOKEN in GitHub Actions workflows using https:\/\/github.com\/step-security\/secure-workflows.\r\n\r\nGitHub Actions workflows have a GITHUB_TOKEN with write access to multiple scopes.\r\nHere is an example of the permissions in one of the workflows:\r\nhttps:\/\/github.com\/libgdx\/libgdx\/runs\/8200695914?check_suite_focus=true#step:1:19\r\n\r\nAfter this change, the scopes will be reduced to the minimum needed for the following workflows:\r\n\r\n- build-publish.yml\r\n- gradle-wrapper-validation.yml\r\n\r\nThe following workflows already have the least privileged token permission set:\r\n\r\n- build-pullrequest.yml\r\n- fix-formatting.yml\r\n\r\n### Motivation and Context\r\n\r\n- This is a security best practice, so if the GITHUB_TOKEN is compromised due to a vulnerability or compromised Action, the damage will be reduced.\r\n- GitHub recommends defining minimum GITHUB_TOKEN permissions.\r\n  https:\/\/docs.github.com\/en\/actions\/security-guides\/automatic-token-authentication#modifying-the-permissions-for-the-github_token\r\n- The Open Source Security Foundation (OpenSSF) [Scorecards](https:\/\/github.com\/ossf\/scorecard) also treats not setting token permissions as a high-risk issue. This change will help increase the Scorecard score for this repository.\r\n\r\nSigned-off-by: Ashish Kurmi <akurmi@stepsecurity.io>","comments":["@Tom-Ski \/ @Frosty-J \/ @PokeMMO : could you please review this PR?\r\n ","I don't have big boy status here, so my approval wouldn't do much. Any changes to codeowner-protected stuff go by slowly in this repository. I don't know if this could break anything - my philosophy would be to try it and find out.","Thanks @Frosty-J for your response! Based on my analysis, this shouldn't break anything.","Thanks @MobiDevelop for approving the PR. Is there anything else I need to do before the PR is merged?"],"labels":["build"]},{"title":"IndexOutOfBoundsException with OpenALAudio and AudioDevice","body":"#### Issue details\r\nA concurrent modification can cause an `IndexOutOfBoundsException` when iterating through the `idleSources` `IntArray` in `OpenALLwjgl3Audio`. While accessing the audio API isn't typically done in multiple threads (usually just called on the rendering thread), when using `AudioDevice` it effectively becomes mandatory due to `AudioDevice#writeSamples` blocking.\r\n\r\nMy suspicion that it is a concurrency issue stems from the fact that I use `AudioDevice` with the [Beads](https:\/\/github.com\/orsjb\/beads) audio library to produce realtime sample data. This is done in a separate thread because the `AudioDevice#writeSamples` method blocks until it is complete.\r\n\r\nIn `OpenALLwjgl3Audio#stopSourcesWithBuffer`, the `IntArray` of `idleSources` is iterated through. https:\/\/github.com\/libgdx\/libgdx\/blob\/b86c20cf1a354f5345fd1e8612dcd46c9b46a972\/backends\/gdx-backend-lwjgl3\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/audio\/OpenALLwjgl3Audio.java#L221-L231\r\n\r\nHowever, `idleSources` is only ever mutated in `obtainSource` (an item is removed, L181) or `freeSource` (source added, L205). https:\/\/github.com\/libgdx\/libgdx\/blob\/b86c20cf1a354f5345fd1e8612dcd46c9b46a972\/backends\/gdx-backend-lwjgl3\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/audio\/OpenALLwjgl3Audio.java#L172-L206\r\n\r\nIn `freeSource`, it is only ever removed if the source `isMusic`, which is only called with `isMusic` = true in `OpenALMusic` and `OpenALAudioDevice#writeSamples(byte[], int, int)`. In the latter's method, `obtainSource` is possibly called. https:\/\/github.com\/libgdx\/libgdx\/blob\/b86c20cf1a354f5345fd1e8612dcd46c9b46a972\/backends\/gdx-backend-lwjgl3\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/audio\/OpenALAudioDevice.java#L84-L89\r\n\r\nIn the for loop when iterating through `idleSources` in `OpenALLwjgl3Audio`, the only way for it to throw an `IndexOutOfBoundsException` would be for `n`, being initially set to `idleSources.size`, to be larger than what `idleSources.size` eventually is in later iterations. Therefore, I believe this can be triggered due to concurrent mutations (specifically removals) of `idleSources` when using `AudioDevice`, since usage of that API warrants multithreading. (See first snippet.) Additionally, there are other instances of iterating through `idleSources` in `OpenALLwjgl3Audio`, it isn't just in `stopSourcesWithBuffer()`.\r\n\r\n#### Reproduction steps\/code\r\nI don't think this issue is easily reproducible due to my suspicion that it is a concurrency issue, but I have a (LWJGL3 backend) example that could theoretically trigger it. There's a separate thread that feeds `AudioDevice#writeSamples` with a 440 Hz sine tone as a demonstration, and a separate ticking `Sound` that is repeatedly being played and stopped midway through.\r\n\r\n```java\r\nimport com.badlogic.gdx.ApplicationAdapter;\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.audio.AudioDevice;\r\nimport com.badlogic.gdx.audio.Sound;\r\nimport com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application;\r\nimport com.badlogic.gdx.graphics.GL20;\r\nimport com.badlogic.gdx.math.MathUtils;\r\n\r\npublic class Barebones extends ApplicationAdapter {\r\n\t\r\n\tprivate Sound ticSound;\r\n\tprivate AudioDevice audioDevice;\r\n\tprivate Thread audioDevThread;\r\n\tprivate float sfxCountdown = 0f;\r\n\t\r\n\tpublic void create () {\r\n\t\tticSound = Gdx.audio.newSound(Gdx.files.internal(\"data\/tic_long.ogg\"));\r\n\t\t\r\n\t\taudioDevice = Gdx.audio.newAudioDevice(44100, false);\r\n\t\taudioDevThread = new Thread(() -> {\r\n\t\t\tfloat[] samples = new float[10000];\r\n\t\t\t\r\n\t\t\t\/\/ Generates a simple sine tone at 440 Hz\r\n\t\t\tfloat period = 44100 \/ 440f;\r\n\t\t\tfor (int i = 0; i < samples.length \/ 2; i++) {\r\n\t\t\t\tfloat value = (float) Math.sin(2 * MathUtils.PI * i \/ period);\r\n\t\t\t\tvalue *= 0.075f;\r\n\t\t\t\tsamples[i * 2] = value;\r\n\t\t\t\tsamples[i * 2 + 1] = value;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\/\/ Constantly write to the audio device.\r\n\t\t\twhile (true) {\r\n\t\t\t\taudioDevice.writeSamples(samples, 0, samples.length);\r\n\t\t\t}\r\n\t\t});\r\n\t\taudioDevThread.setDaemon(true);\r\n\t\taudioDevThread.start();\r\n\t}\r\n\r\n\tpublic void render () {\r\n\t\tGdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\r\n\t\t\r\n\t\tif (sfxCountdown <= 0f) {\r\n\t\t\tsfxCountdown = 1f;\r\n\t\t\tticSound.stop();\r\n\t\t\tticSound.play(0.75f);\r\n\t\t} else {\r\n\t\t\tsfxCountdown -= Gdx.graphics.getDeltaTime() \/ 0.2f;\r\n\t\t}\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void dispose() {\r\n\t\tsuper.dispose();\r\n\t\tticSound.dispose();\r\n\t\taudioDevThread.interrupt();\r\n\t\taudioDevice.dispose();\r\n\t}\r\n\r\n\tpublic static void main (String[] args) throws Exception {\r\n\t\tnew Lwjgl3Application(new Barebones());\r\n\t}\r\n}\r\n```\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\nStacktrace was on libGDX 1.11.0. SSCCE was written on libGDX commit b86c20cf1a354f5345fd1e8612dcd46c9b46a972, which was the most recent commit at the time of testing and writing. Using the LWJGL3 backend in both cases. No other dependencies.\r\n\r\n#### Stacktrace\r\nThis stacktrace was given to me by one of my users. I was not able to reproduce it but I have detailed my own findings above.\r\n```java\r\njava.lang.IndexOutOfBoundsException: index can't be >= size: 98 >= 98\r\n\tat com.badlogic.gdx.utils.IntArray.get(IntArray.java:131)\r\n\tat com.badlogic.gdx.backends.lwjgl3.audio.OpenALLwjgl3Audio.stopSourcesWithBuffer(OpenALLwjgl3Audio.java:224)\r\n\tat com.badlogic.gdx.backends.lwjgl3.audio.OpenALSound.stop(OpenALSound.java:98)\r\n        ... triggered by a call in my game to com.badlogic.gdx.audio.Sound#stop() in the main rendering thread\r\n```\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [x] Windows\r\n- [ ] Linux\r\n- [ ] macOS\r\n","comments":["I didn't tried to reproduce but there is clearly an issue. \r\n@crykn  i'll mark it as a bug since It doesn't make sense to call `writeSamples` in the rendering thread.\r\n\r\nThe best solution imho is to move that late init code (source creation) to the constructor, i think it was a copy paste from Music implementation. Also, the stop method is questionable and could be removed.\r\n\r\nNote that i had a special (pure-data) audio backend that worked perfectly but i didn't mixed audio device with other stuff (Sound and Music).","Since no class in libGDX is thread-safe until specified otherwise, I figured this was best categorized as a feature request\/enhancement. But you're right, considering the fact that calling the blocking `AudioDevice#writeSamples` on another thread is probably a very common use case, marking this as a bug makes sense as well! ","i agree, AudioDevice should be better documented: which method should be called in rendering thread and which are fine (or intended) to be called in another thread.","> The best solution imho is to move that late init code (source creation) to the constructor, i think it was a copy paste from Music implementation.\r\n\r\nI am a bit hesitant about this solution because it's likely that someone who uses AudioDevice in another thread probably also created it in another thread, which could lead to the same problem. (I do that with my interface with Beads and gdx's AudioDevice.) However, I understand that every libGDX class is not thread-safe unless specified, so it's perfectly acceptable to specify that a new AudioDevice should only be created in the main rendering thread.\r\n\r\nI suppose that ensuring thread-safe concurrent access to `idleSources` in OpenALLwjgl3Audio would be enough due to its mutability, but I'm not sure on the performance overhead for that.\r\n\r\nThanks for the swift responses so far!"],"labels":["bug","desktop","audio"]},{"title":"Demo page is down","body":"Please ensure you have given all the following requested information in your report.\r\n\r\n#### Issue details\r\nhttps:\/\/libgdx.badlogicgames.com\/demos\/ is down (503)\r\n\r\n#### Reproduction steps\/code\r\nGo to https:\/\/libgdx.badlogicgames.com\/demos\/ \r\n\r\n\r\n```\r\n> $ ping https:\/\/libgdx.badlogicgames.com\/demos\r\nping: cannot resolve https:\/\/libgdx.badlogicgames.com\/demos: Unknown host\r\n> $ ping https:\/\/libgdx.badlogicgames.com                                                                                                                                            X\r\nPING https:\/\/libgdx.badlogicgames.com (95.216.8.184): 56 data bytes\r\n64 bytes from 95.216.8.184: icmp_seq=0 ttl=53 time=46.012 ms\r\n64 bytes from 95.216.8.184: icmp_seq=1 ttl=53 time=45.540 ms\r\n```\r\n\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\n_Please provide the version(s) affected._\r\n\r\n#### Stacktrace\r\n```java\r\n\/\/Please provide the stacktrace if applicable \r\n```\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] macOS\r\n","comments":["I'm not sure where the demos are hosted now, if anywhere, but https:\/\/libgdx.com\/wiki\/start\/demos-and-tutorials needs to be updated when hosting is figured out. @crykn , do you know if the old demos are still up anywhere (as built GWT apps)? Or what it would take to host them on libgdx.com , if we can build them again?","Don't think they're hosted anywhere, except for the one I built. Duplicate of #6870.","@Frosty-J is right, at the moment they don't seem to be hosted anywhere. If badlogicgames.com doesn't come online again, we should definitely think about transferring them to libgdx.com. The easiest way of achieving this would probably be to build them automatically via GitHub Actions and then deploy the GWT builds to GitHub Pages (similarily to what we do in the https:\/\/github.com\/libgdx\/libgdx-wiki-examples repo). The desktop and Android downloads could be provided via the releases tab of the corresponding repos.\r\n\r\nRegardless of that, going forward we should probably think about what we want to do with the demo projects. We might want to archive a few of those\/maybe even replace them, considering they are all quite old, have a bunch of open issues\/PRs and it's a hassle keeping them up to date.","I will look into attempting to create PRs to update some of these so that they build at least. It looks like @obigu updated lots of them in 2021 but perhaps they are broken again?\r\n\r\nHowever I'm not sure if I should update lwjgl to version 3 or leave it as is (or perhaps keep both?) for some of the older projects. Lwjgl3 is the main now, but 2 is still supported, right? \r\nEdit: I'll just make changing to lwjgl3 a separate PR","I'd think they should target GWT if at all possible; the downloadable targets are much less likely for newcomers to try. If you include a desktop build, LWJGL3 is preferable because M1 and later macs don't work (normally) with LWJGL2.","Some changes may be desirable for GWT. For example, that backend doesn't support setting a frame rate cap, so demos that don't use delta times will run at the wrong speed for users who have non-60Hz displays.","Manually changing one of the gradle projects now (although it may honestly just be easier to create a new project with the game name and drop the code files in), but I was curious about how it pulls the latest version numbers from the website as opposed to them being pinned like in newly generated projects. https:\/\/github.com\/libgdx\/libgdx-demo-superjumper\/blob\/master\/build.gradle\r\nIt means the project is updated to the latest libgdx version automatically, but could this lead to breakage if e.g. the android api version changes?","I'd think if the projects are currently fetching the latest libGDX, they're broken as-is. They should IMO be pinned, and updated when the project is brought up-to-date for a new release."],"labels":["documentation"]},{"title":"No way to retrieve the correct key letter from a keycode on non-QWERTY keyboards","body":"#### Issue details\r\nAt the moment, there's no way to get the correct String representation of a keycode, unless you're using a standard (US?) QWERTY keyboard. This is mainly an issue for displaying key bindings where you have to work with the keycode directly.\r\n\r\n#### Example\r\nPress Q on a QWERTY keyboard => `Input.Keys.toString(keycode)` will return \"Q\".\r\nPress Q on a AZERTY keyboard => `Input.Keys.toString(keycode)` will return \"A\".\r\nPress \u0439 on a Russian keyboard => `Input.Keys.toString(keycode)` will return \"Q\".\r\n\r\n#### Potential fix\r\nPlease read #6957 for a discussion about how this could be fixed.\r\n\r\n#### Please select the affected platforms\r\nI'm not totally sure what platforms are affected. It's definitely an issue for Lwjgl3, so here's the checkboxes for that.\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [x] Windows\r\n- [x] Linux\r\n- [x] macOS\r\n\r\nThough, even if virtual keys are used on the other platforms instead of the physical ones, there's still a problem on non-latin character keyboards. Like `Input.Keys.toString(keycode)` wouldn't return any cyrillic characters.","comments":[],"labels":["enhancement","input"]},{"title":"Respect OnscreenKeyboardType on gwt getTextInput","body":null,"comments":[],"labels":["gwt","input"]},{"title":"Seamless\/gapless looping of music on Android","body":"I've been moaning in #6622 lately, so I decided to just get on with it. This is a work-in-progress thing for seamless audio looping. No ETA, and to make matters worse I intend to go on holiday soon without access to my desktop computer's RAM.\r\n\r\nCurrently `MusicTest` seems to be working fine. API 16+ gets the seamless approach and <= 15 gets the normal one. Here's what each sounds like in the emulator at the loop point of a 90-second Ogg Vorbis (GitHub doesn't allow audio uploads, hence why they're videos without video tracks - be sure to unmute):\r\n\r\n<table><tr><td>\r\n\r\nhttps:\/\/user-images.githubusercontent.com\/60154347\/177068907-08a8c215-289c-43a4-a758-b7340f4d550c.mp4\r\n\r\n<\/td><td>\r\n\r\nhttps:\/\/user-images.githubusercontent.com\/60154347\/177068925-25703f7a-e722-4175-aedd-36848fcccb71.mp4\r\n\r\n<\/td><\/tr><\/table>\r\n\r\nWhen `music.setLooping(true)` is called, a second `MediaPlayer` is created, and it loops back and forth between them. So this pull request doesn't add any overhead for non-looping music. I considered if we should expose a boolean for whether the looping should attempt to be seamless or not, but it seemed silly to have that when it only applied to Android. Though the whole situation is a complete farce - I don't see why seamless looping still isn't part of the Android API, when [seamless queuing is](https:\/\/developer.android.com\/reference\/android\/media\/MediaPlayer#setNextMediaPlayer(android.media.MediaPlayer)).\r\n\r\nIt's currently a draft because I haven't tested too thoroughly, I don't know if I should be concerned about `E\/MediaPlayerNative: error (-38, 0)` and `E\/MediaPlayer: Error (-38,0)`, and things may break if merged in its current state (`newMusic (FileDescriptor fd)` is commented out for a start). Maybe someone can steer it in the right direction without hurting my drafty feelings too badly.\r\n\r\nI also want to consider if we can expose this to the core module, somehow. Take for example the following code:\r\n\r\n```java\r\nmusicIntro.setOnCompletionListener(new Music.OnCompletionListener() {\r\n  @Override\r\n  public void onCompletion(Music music) {\r\n    musicChorus.play();\r\n  }\r\n});\r\n```\r\n\r\nThis introduces a gap. In a perfect world, we'd be able to do something like `musicIntro.setNextMusic(musicChorus)` without a gap. But the cross-platform nature of libGDX complicates matters.","comments":[],"labels":["android","audio"]},{"title":"Larger, non-cubic textures with mipmap filters are not rendered on GLEmulation.ANGLE_GLES20","body":"#### Issue details\r\nIt fails to render larger textures (mipmap, filters) when using ANGLE.\r\nFor example a texture with 2048x2048 renders ok, but texture 2048x1024 fails to render.\r\n\r\n#### Reproduction steps\/code\r\n\r\n```java\r\n\/\/ use a texture with size 2048x1024\r\n\r\nimg = new Texture(Gdx.files.internal(\"test2.png\"), true);\r\nimg.setFilter(Texture.TextureFilter.MipMapLinearNearest, Texture.TextureFilter.Linear);\r\n```\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\n1.11.0\r\n\r\n#### Stacktrace\r\n\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [x] Windows\r\n- [ ] Linux\r\n- [ ] macOS\r\n","comments":[],"labels":["bug","desktop","angle"]},{"title":"AndroidDaydream input null check","body":"I've had numerous crash reports on Galaxy S21 and S22 family devices with an NPE in `AndroidDaydream.onConfigurationChanged()`. My best guess of what's happening is that these devices are calling `onConfigurationChanged()` before `onAttachedToWindow()`, so `input` is still null.\r\n\r\nThis change should be safe because\r\n1. If `onConfigurationChanged()` is called before `onAttachedToWindow()`, the keyboard state will be updated in the user's `initialize()` call.\r\n2. It's a screen-saver. We probably don't care if the keyboard is attached anyway.\r\n\r\nI don't have one of the offending devices to test on, but I also don't know how many of you actually use AndroidDaydream. If I don't get any feedback in a couple of weeks, I plan to go ahead and pull this.","comments":["Worth a shot. Best-case scenario this fixes it; worst it does nothing. Like you, I don't have a problematic device to test on (and I barely even know what Daydream is). I don't know if you're aware that live wallpapers also seem screwed on them (#6729; CivilEngineeringInformation is a spambot and can be ignored).","@cypherdare Have you been able to confirm this fix works?"],"labels":["android"]},{"title":"Default shaders don't work with OpenGL 3.2 on macOS","body":"Please ensure you have given all the following requested information in your report.\r\n\r\n#### Issue details\r\nto simplify the debugging I created a simple test using the project creator wizard.\r\nhttps:\/\/github.com\/kunterbunt2\/libgdx4m1\r\nif run with setOpenGLEmulation(GLEmulation.GL30, 3, 2), it will throw an exception on a mac mini with m1 chip.\r\nexception at https:\/\/github.com\/kunterbunt2\/libgdx4m1\/blob\/main\/SpriteBatchTestException.txt\r\n\r\nxception in thread \"main\" java.lang.IllegalArgumentException: Error compiling shader: Vertex shader\r\nERROR: 0:1: '' :  #version required and missing.\r\nERROR: 0:1: 'attribute' : syntax error: syntax error\r\nFragment shader:\r\nERROR: 0:1: '' :  #version required and missing.\r\nERROR: 0:7: 'varying' : syntax error: syntax error\r\n\r\n\tat com.badlogic.gdx.graphics.g2d.SpriteBatch.createDefaultShader(SpriteBatch.java:164)\r\n\tat com.badlogic.gdx.graphics.g2d.SpriteBatch.<init>(SpriteBatch.java:127)\r\n\tat com.badlogic.gdx.graphics.g2d.SpriteBatch.<init>(SpriteBatch.java:81)\r\n\tat com.mygdx.game.Libgdx4M1.create(Libgdx4M1.java:14)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Window.initializeListener(Lwjgl3Window.java:416)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Window.update(Lwjgl3Window.java:366)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.loop(Lwjgl3Application.java:192)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.<init>(Lwjgl3Application.java:166)\r\n\tat com.mygdx.game.full.screen.SpriteBatchTest.main(SpriteBatchTest.java:21)\r\n\r\n#### Reproduction steps\/code\r\nimport project at https:\/\/github.com\/kunterbunt2\/libgdx4m1 as gradle project into Eclipse with jre 1.8.\r\nexecute desktop\/src\/com\/mygdx\/game\/full\/screen)\/SpriteBatchTest.java\r\nyou will see exception\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\n\r\nlibgdx 1.11.0 + gdx-lwjgl3-glfw-awt-macos\r\n\r\nStacktrace\r\nhttps:\/\/github.com\/kunterbunt2\/libgdx4m1\/blob\/main\/SpriteBatchTestException.txt\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [X] macOS\r\n","comments":["See #5960. You can find a drop-in-solution [here](https:\/\/github.com\/eskalon\/pancake\/blob\/a117c8e664cdda0812e4f38ae5105a3c96cd9906\/core\/src\/main\/java\/de\/eskalon\/commons\/utils\/GL32CMacIssueHandler.java#L48-L91) and [here](https:\/\/github.com\/crykn\/guacamole\/blob\/4c7fd97c212a922cb6a3730d15fb86666f29e013\/gdx\/src\/main\/java\/de\/damios\/guacamole\/gdx\/graphics\/ShaderCompatibilityHelper.java#L105-L110).","Wow, that was fast. Will try it tomorrow. Strange that I did not find that ticket. Sorry!","@crykn it looks as if the latest version of your gdx library (that is compatible with libgdx 1.11), is not available as an artifact. 0.3.1 is available, but not 0.3.2. Strange is that the core library is available.\r\nI cannot actually search at https:\/\/oss.sonatype.org\/content\/repositories\/snapshots, I have to use maven for that.","You should probably use JitPack to get Guacamole, if that's what you're referring to. https:\/\/jitpack.io\/#crykn\/guacamole\/v0.3.2","I use jitpack and can get the core library, but not the gtx library. I switched to previous version until the 0.3.2 is deployed to jitpack.","Did you click the `Subproject` dropdown and select `gdx`? That gives `implementation 'com.github.crykn.guacamole:gdx:v0.3.2'` , note how the group ID now includes \"guacamole\" and the artifact ID is now \"gdx\".","The Jitpack [build log](https:\/\/jitpack.io\/com\/github\/crykn\/guacamole\/0.3.2\/build.log) says it's there, but I remember having some trouble with the same artifact missing in the past as well. Alternatively, you could just copy the necessary classes. \n\nBtw opinions on and reviews of #5960 are very welcome!","I will check when I am back at my computer. Thanks.","Concerning the pull request. I am new to git and need to study if I can include this in my version to test it, or if this is just a theoretical discussion of the calling convention. \r\ninterestingly, I use both default shaders,  it also added my own pre code to shaders. So, I am interested in the topic , as I am just now trying to get my game working on Mac."],"labels":["bug","desktop"]},{"title":"setFullScreen(true) will crash jre on macos with M1 chip","body":"Please ensure you have given all the following requested information in your report.\r\n\r\n#### Issue details\r\nTo simplify the debugging I created a simple test using the project creator wizard.\r\nhttps:\/\/github.com\/kunterbunt2\/libgdx4m1\r\nif run with full screen mode, it will crash the jre on a mac mini with m1 chip.\r\ncrash report at https:\/\/github.com\/kunterbunt2\/libgdx4m1\/blob\/main\/fullScreenCrash.txt\r\n\r\n#### Reproduction steps\/code\r\nimport project at https:\/\/github.com\/kunterbunt2\/libgdx4m1 as gradle project into Eclipse with jre 1.8.\r\nexecute desktop\/src\/com\/mygdx\/game\/full\/screen)\/FullScreen.java\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\nlibgdx 1.11.0 + gdx-lwjgl3-glfw-awt-macos\r\n\r\n#### Stacktrace\r\nhttps:\/\/github.com\/kunterbunt2\/libgdx4m1\/blob\/main\/fullScreenCrash.txt\r\n\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [X] macOS\r\n","comments":["Does the issues also happen without the glfw-awt-macos extension (i.e. with the [`-XstartOnFirstThread` argument](https:\/\/libgdx.com\/news\/2021\/07\/devlog-7-lwjgl3#do-i-need-to-do-anything-else))?","tested with -XstartOnFirstThread. This will sound crazy:\r\n\r\n1. If I remove the setFullScreen(true) code, it works.\r\n2. If I remove the setFullScreen(true) code, and remove the dependency to api \"com.badlogicgames.gdx:gdx-lwjgl3-glfw-awt-macos:$gdxVersion\", it till works, although it should not.\r\n3. if I add -XstartOnFirstThread to the eclipse vm argument run configuration , it crashes. I need to check the crash, it might be another bug.\r\n\r\nThis is behaving so strange, that it would really make sense for someone to test this on another system.\r\nI feel as if something is wrong with my system.","Regarding number 3: did you use the -XStartOnFirtsThread argument and the glfw-awt-macos extension at the same time? Then a crash is expected, they are exclusive to one another.","No, I did 1, then 2, then 3. so dependency was no longer there.\r\nBut I will recheck tomorrow after work, as this is behaving exactly as you suggest. Maybe eclipse did not refresh the dependencies.","ok @crykn , I retested and checked eclipse external dependency and as you suspected, the macos awt library was still there. I then refreshed the gradle project and rechecked and it was gone. Something I usually always do after editing the build.gradle file, but must have missed to do this time.\r\nNow I can confirm that if I remove the glfw-awt-macos extension and add the -XstartOnFirstThread argument full screen mode will work and not crash.\r\nThis means that we have a workaround!\r\nThanks!"],"labels":["bug","desktop","glfw-awt-macos"]},{"title":"Game freezes when window is closed on Mac on LibGDX 1.11.0 and LWJGL3","body":"#### Issue details\r\nAfter I launch the game on Android Studio (DesktopLauncher.main) if I close the game using Cmd-Q, I get randomly one of these outcomes:\r\n1) freezes for a few seconds and then process stops gracefully; or\r\n2) freezes for several minutes (maybe\/probably indefinitely, didnt wait much to test, I force STOP after a while); or\r\n3) locks Android Studio completely (happened only once, might be unrelated, but it feels like it is related)\r\n\r\n#### Reproduction steps\/code\r\nThis issue is happening only after migrating to LibGDX 1.11.0 and LWJGL3, and never happened before (ie, on 1.10 & non-LWJGL3). This happens on the default generated project (badlogic.jpg one), the only change I have to do is add the extension to gradle: gdx-lwjgl3-glfw-awt-macos . I made no other change to the project.\r\n\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\nLatest OSX. Non-M1 mac. LibGDX 1.11.0 with gdx-lwjgl3-glfw-awt-macos extension.\r\n\r\n#### Stacktrace\r\nEventQueue class ->  getNextEvent() method -> freezes on pushPopCond.await()\r\n\r\nThreads:\r\n\"AWT-EventQueue-0\"@1,047 in group \"main\": WAIT\r\n\"AppKit Thread\"@989: RUNNING\r\n\"AWT-Shutdown\" @992: WAIT\r\n\"Common-Cleaner\" @419 in group \"InnocuousThreadGroup\": WAIT\r\n\"DestroyJavaVM\"@1,681 in group \"main\": RUNNING\r\n\"Finalizer\" @1,683: WAIT\r\n\"Reference Handler\" @1,682: RUNNING\r\n\"Signal Dispatcher\" @1,684: RUNNING\r\n\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [X] macOS\r\n","comments":["Update\/fix: on discord it was suggested to me to try to not use the gdx-lwjgl3-glfw-awt-macos extension, and use -XstartOnFirstThread instead, and I tried it and it seems to have indeed dodged the problem. In any case something is wrong with either the extension or LibGDX. Also for now I would suggest to stop recommending the extension on the migration guide and to use -XstartOnFirstThread instead.","Does this issue occur with LWJGL3's own glfw_async library? You can load it early in your main() method using:\r\n`Configuration.GLFW_LIBRARY_NAME.set(\"glfw_async\");` per [the docs](https:\/\/github.com\/LWJGL\/lwjgl3\/blob\/master\/doc\/notes\/3.3.1.md)\r\n\r\nIt's preferable not to be stuck in a situation where we're recommending XstartOnFirstThread. That approach has its own caveats, like being unable to use AWT\/Swing at all.","Thanks for the suggestion. Here are the scenarios that I tried:\r\n\r\n1)\r\n[X]  Configuration.GLFW_LIBRARY_NAME.set(\"glfw_async\"); (as 1st line in main method)\r\n[X] XstartOnFirstThread\r\n[ ] Extension\r\nOutcome:\r\nit crashed immediately without even showing the game window (doesnt freeze or hang, so not the same outcome as the original issue).\r\nA fatal error has been detected by the Java Runtime Environment:\r\nSIGILL (0x4) at pc=0x00007ff81946eabd, pid=7045, tid=259\r\n\r\n2)\r\n[X]  Configuration.GLFW_LIBRARY_NAME.set(\"glfw_async\"); (as 1st line in main method)\r\n[ ] XstartOnFirstThread\r\n[ ] Extension\r\nOutcome:\r\nIt worked normally, the game launched, doesnt seem to freeze when closing the game window.\r\n\r\n3)\r\n[ ]  Configuration.GLFW_LIBRARY_NAME.set(\"glfw_async\"); (as 1st line in main method)\r\n[ ] XstartOnFirstThread\r\n[ ] Extension\r\nOutcome:\r\nDoesnt launch, says I need XstartOnFirstThread ( Caused by: java.lang.IllegalStateException: GLFW may only be used on the main thread and that thread must be the first thread in the process. Please run the JVM with -XstartOnFirstThread. This check may be disabled with Configuration.GLFW_CHECK_THREAD0. )\r\n\r\n4)\r\n[X]  Configuration.GLFW_LIBRARY_NAME.set(\"glfw_async\"); (as 1st line in main method)\r\n[ ] XstartOnFirstThread\r\n[X] Extension\r\nOutcome:\r\nGame launches normally, but freezes when I close the window (ie, the original issue)\r\n\r\n\r\nSo I should simply add that line to my main method and that fixes it? Is this a \"safe\" solution, or more like a temporary hack?","> \r\n\r\nThese glfw async libraries are fundamentally incompatible with the `-XstartOnFirstThread` JVM arg, which is why you were crashing in the first scenario.\r\n\r\n> So I should simply add that line to my main method and that fixes it? Is this a \"safe\" solution, or more like a temporary hack?\r\n\r\nI don't think I'd regard it as a temporary hack. It's a recent addition to lwjgl3 3.3.1 and I'd guess it was split to ensure that there's a fallback in case it's buggy. Not sure if lwjgl3 ever plans to make the async lib the default, though we haven't had any issues using it in testing.","I experience also a freeze but already when application starts up. Here's a related issue on lwjgl issuetracker: https:\/\/github.com\/LWJGL\/lwjgl3\/issues\/619\r\n\r\nThe `org.lwjgl.system.Configuration.GLFW_LIBRARY_NAME.set(\"glfw_async\");` crashes immediately when added to main with:\r\n```\r\nProcess finished with exit code 133 (interrupted by signal 5: SIGTRAP)\r\n```","Just adding some info to this issue:\r\n\r\nI have just updated several things\/libs\/dependencies on my project (versions on build.gradles, gradle wrapper version, etc), and now that \"hack\" below causes my game not to launch, as soon as it reaches that line below the game closes down without any error messages. Since this line is before creating the Lwjgl3Application class, the game window doesnt even show up.\r\n\r\nConfiguration.GLFW_LIBRARY_NAME.set(\"glfw_async\");\r\n\r\nAs soon as I commented out this line the game launched normally, and it seems the freeze I was getting originally when closing the game is gone also.","Are you using glfw_async with -XstartOnFirstThread , or without? This whole thing is a total mess, and the approach I go with these days is just to include the [StartOnFirstThreadHelper](https:\/\/github.com\/crykn\/guacamole\/blob\/master\/gdx-desktop\/src\/main\/java\/de\/damios\/guacamole\/gdx\/StartOnFirstThreadHelper.java) from the Guacamole helper library, which is just one file that can be copied into an LWJGL3 module.","Im not using any of those 2 commands anymore (glfw_async or XstartOnFirstThread) and it seems to be running fine. Im not sure if I just got lucky or if the updates on build.gradle fixed it.\r\n\r\nWhat I did: I copied all the build.gradle wrapper androidmanifest etc from a new project created using the libgdx setup tool (and adjusted the project name\/package name etc to my game). There were some other changes on the build.gradle structure as well (when compared to my project's build.gradle files), not only the libs versions.\r\n","I've never heard of a Mac being able to run an LWJGL3 app\/game out of the box without any handling for the first thread issue, which could be any of the glfw_async configuration, -XstartOnFirstThread argument (possibly via Guacamole), or gdx-lwjgl3-glfw-awt-macos dependency. Gradle also shouldn't be related, and should be unrelated entirely if you build a jar and launch that. I'm definitely curious what you have going that works with no extra changes to a gdx-setup project.","> I've never heard of a Mac being able to run an LWJGL3 app\/game out of the box without any handling for the first thread issue, which could be any of the glfw_async configuration, -XstartOnFirstThread argument (possibly via Guacamole), or gdx-lwjgl3-glfw-awt-macos dependency. Gradle also shouldn't be related, and should be unrelated entirely if you build a jar and launch that. I'm definitely curious what you have going that works with no extra changes to a gdx-setup project.\r\n\r\nYou are correct, sorry. The -Xstart flag was present on the Gradle 'run' task. I tried to remove it now and it wouldnt launch (\"Caused by: java.lang.IllegalStateException: GLFW may only be used on the main thread and that thread must be the first thread in the process. Please run the JVM with -XstartOnFirstThread. This check may be disabled with Configuration.GLFW_CHECK_THREAD0.\")."],"labels":["bug","desktop","glfw-awt-macos"]},{"title":"Libgdx app not running on pi4","body":"Please ensure you have given all the following requested information in your report.\r\n\r\n#### Issue details\r\nI am trying to run my libgdx app that I made on my rpi4. It used to run fine until suddenly it didn't. The jar works fine on my Windows PC and as stated before, it used to run on the pi. But then it started crashing before even opening the window. No code was changed and I created a new fresh project template and that also did not run.\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\nv1.10.1 SNAPSHOT (and other versions supported with lwjgl3\r\n\r\n#### Stacktrace\r\n```java\r\nException in thread \"main\" java.lang.NullPointerException\r\n\tat org.lwjgl.system.Checks.check(Checks.java:188)\r\n\tat org.lwjgl.glfw.GLFW.nglfwGetMonitorWorkarea(GLFW.java:1432)\r\n\tat org.lwjgl.glfw.GLFW.glfwGetMonitorWorkarea(GLFW.java:1463)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createGlfwWindow(Lwjgl3Application.java:547)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:462)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:448)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.<init>(Lwjgl3Application.java:162)\r\n\tat pibot.lib.desktop.DesktopLauncher.main(DesktopLauncher.java:18)\r\n```\r\n\r\n#### Please select the affected platforms\r\n- [x] Linux\r\n","comments":["It seems like [glfwGetPrimaryMonitor](https:\/\/www.glfw.org\/docs\/3.3\/group__monitor.html#gac3adb24947eb709e1874028272e5dfc5) is returning NULL somehow.\r\n\r\nI'm not aware of any changes that would have happened within lwjgl3 or glfw to cause this."],"labels":["bug","desktop","LWJGL3","third-party?"]},{"title":"`Lwjgl3ApplicationConfiguration#enableGLDebugOutput` doesn't work with `GLEmulation.ANGLE_GLES20`","body":"#### Issue details\r\nAs title, it is not possible to enable the GL debug if `ANGLE_GLES20` is enabled.\r\n\r\n#### Reproduction steps\/code\r\n```Java\r\nLwjgl3ApplicationConfiguration config = new Lwjgl3ApplicationConfiguration();\r\nconfig.enableGLDebugOutput(true, System.out);\r\nconfig.setOpenGLEmulation(Lwjgl3ApplicationConfiguration.GLEmulation.ANGLE_GLES20, 3, 2);\r\nnew Lwjgl3Application(new App(), config);\r\n```\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\nlibGDX 1.10.1-SNAPSHOT\r\n\r\n#### Stacktrace\r\n```java\r\njava.lang.IllegalStateException: No GLCapabilities instance set for the current thread. Possible solutions:\r\n\ta) Call GL.createCapabilities() after making a context current in the current thread.\r\n\tb) Call GL.setCapabilities() if a GLCapabilities instance already exists for the current context.\r\n\tat org.lwjgl.opengl.GL.checkCapabilities(GL.java:234)\r\n\tat org.lwjgl.opengl.GL.getCapabilities(GL.java:229)\r\n\tat org.lwjgl.opengl.GLUtil.setupDebugMessageCallback(GLUtil.java:41)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createGlfwWindow(Lwjgl3Application.java:586)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:462)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:448)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.<init>(Lwjgl3Application.java:162)\r\n```\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [X] Windows\r\n- [X] Linux\r\n- [X] macOS\r\n","comments":["the fact, Lwjgl3ApplicationConfiguration.GLEmulation.GL30 also crash for me. In mac os\r\n\r\nbut have different appearance, some error with shader script","Hey @jootnet, your problem is most certainly not related to the one reported in this issue. Instead, it's likely caused by the fact that macOS only supports the OpenGL 3.2 core profile for OpenGL 3, see #5960. "],"labels":["bug","desktop","angle"]},{"title":"`GLEmulation.ANGLE_GLES20` not so much friendly with Ubuntu 22.04 and Nvidia drivers","body":"#### Issue details\r\nWith new Ubuntu update Wayland has become the default display server and probably some issues with Nvidia proprietary drivers are now rising. This is what I've noticed using LWJGL3 backend and ANGLE extension:\r\n\r\n- `GLEmulation.ANGLE_GLES20` with Wayland and trying to active the Nvidia card: simply no effect. The default Intel IGPU is used (bad performances)\r\n- `GLEmulation.ANGLE_GLES20` with X11 and trying to active the Nvidia card: Crash happens related to LWJGL\r\n```\r\n[LWJGL] GLFW_PLATFORM_ERROR error\r\n    Description : EGL: Failed to create window surface: Arguments are inconsistent\r\n    Stacktrace  :\r\n        org.lwjgl.glfw.GLFW.nglfwCreateWindow(GLFW.java:2024)\r\n        org.lwjgl.glfw.GLFW.glfwCreateWindow(GLFW.java:2197)\r\n        com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createGlfwWindow(Lwjgl3Application.java:524)\r\n        com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:462)\r\n        com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:448)\r\n        com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.<init>(Lwjgl3Application.java:162)\r\n        games.rednblack.editor.Main.main(Main.java:50)\r\n```\r\n\r\nEverything works fine with any other configuration (GL20 both Nvidia and Intel, GL30 both Nvidia and Intel, ANGLE_GLES20 with Intel IGPU).\r\nThis issue looks like something related more to drivers (https:\/\/www.phoronix.com\/scan.php?page=news_item&px=Ubuntu-22.04-NVIDIA-XOrg-Back) or LWJGL itself and so hard to fix on libGDX side, but I think it's good to point out in any case.\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\nlibGDX: 1.10.1-SNAPSHOT\r\nGPU: nvidia-driver-510\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [X] Linux\r\n- [ ] macOS\r\n","comments":["That line appears to be the culprit\r\n https:\/\/github.com\/libgdx\/libgdx\/blob\/aca13b245c2832da425a5c484be427bac3ad19df\/backends\/gdx-backend-lwjgl3\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3Application.java#L501\r\n\r\nIf commented it doesn't crash anymore and GLES is correctly used by libGDX.. No idea why it doesn't work, seems that nvidia drivers in X11 doesn't like EGL context ","I see zero benefit to using ANGLE on Linux, but it's good you found the offending line.","Indeed I don't think that ANGLE is actually used when running on Linux, GLES bindings should be directly used, or at least I can't see anywhere that ANGLE starts on Linux"],"labels":["bug","desktop","angle"]},{"title":"GWT - Calculate MD5 hash while copying file to avoid errors on very large files","body":"For GWT, we calculate an MD5 hash of the file contents of each asset to assist browsers with caching. The current implementation reads the file fully into a byte array, calculates the MD5, adds it to the destination file name, then copies the source file to the output path. While this is fine for small files (albeit inefficient as we read each file multiple times), it can cause problems with large files.\r\n\r\nThis proposed implementation instead calculates the MD5 while reading the source InputStream for the copy operation, then renames (moves) the file to include the MD5 hash.\r\n\r\nRefer to #4314 for the original addition, and #6848 for the problem this solves.","comments":["I'll have to figure why the build is not finding File.toPath() - it's fine when I compile the backend directly.","@MobiDevelop amazing! Have you noticed any gain on speed during GWT build?","A note on the build failure, oddly it has started picking up the emulation of File which doesn't have the getPath() method. Weird that it never did that while I was coding it, and now it is. I wouldn't think the compile time generator would be using the emulation classes - but GWT magic is the darkest of magic.","@yuripourre Not much of a difference with smaller files, as they get bigger the multiple reads stack up. I also noticed that when running the `:tests:gdx-tests-gwt:dist` task, all of assets were being copied 4 times, so that obviously adds a non-trivial amount of time to the builds. Not sure if the same happens in a real project.","Thank you for the PR @MobiDevelop! I will try to test this new logic with the asset I was trying before and check how it performs."],"labels":["enhancement","gwt"]},{"title":"ANGLE doesn't work on 32-bit Windows","body":"I saw #6804 posted today, which reminded me of my tests with ANGLE last month. I don't think Mario reads everything on Discord, so this is partly a summarised repeat of what I wrote on there so that we can all have a record of it here.\r\n\r\n## Issue details\r\n\r\n**Windows XP and Vista (32-bit):** `libEGL.dll: The specified procedure could not be found`\r\n\r\n**Windows 7 and 10 (32-bit):** [hs_err_pid7660.log](https:\/\/cdn.discordapp.com\/attachments\/522048465736433664\/934228841377976400\/hs_err_pid7660.log)\r\n\r\n**Windows 10 (64-bit JVM):** It works.\r\n\r\nI'm not *too* bothered about it crashing on 32-bit hardware, 32-bit installations of Windows and 32-bit installations of Java, as things are moving on. In the [January 2022 Steam hardware survey](https:\/\/store.steampowered.com\/hwsurvey?platform=pc), 99.58% of Windows gamers were on 64-bit Windows and 0.31% 32-bit. Windows 11 doesn't even have a 32-bit version anymore, signalling its extinction.\r\n\r\nIt should go without saying that we can live without XP and Vista support. I just think it's interesting to make a note of, seeing as the rest of libGDX functions on those operating systems.\r\n\r\nHowever, bundling 32-bit native libraries that don't work is a waste of space, and gives developers a false impression that it ought to work on 32-bit. Unless someone is about to chip in with \"oh, this is easy to fix - just change this line here,\" I propose we don't ship 32-bit ANGLE libraries.\r\n\r\n## Reproduction steps\r\nUsage instructions are at #6672. Build and run any application that uses ANGLE.\r\n\r\n## Version of libGDX and\/or relevant dependencies\r\n\r\n* 1.10.1-SNAPSHOT (21 January 2022)\r\n* gdx-lwjgl3-angle\r\n\r\n## Affected platforms\r\n\r\nI've only done much testing on Windows. Not sure what the Linux natives actually do, since in my test on an x64 computer it just used OpenGL.\r\n\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [X] Windows\r\n- [ ] Linux\r\n- [ ] macOS","comments":["Yes, I can confirm the 32bit binaries are not working (tested via 64bit Windows 10). Running a 32bit JVM via the default method, i.e. OpenGL directly, works. However, running ANGLE doesn't work (same JVM). \r\n\r\n```\r\n#\r\n# A fatal error has been detected by the Java Runtime Environment:\r\n#\r\n#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00000000, pid=5396, tid=0x00003da0\r\n#\r\n# JRE version: Java(TM) SE Runtime Environment (8.0_201-b09) (build 1.8.0_201-b09)\r\n# Java VM: Java HotSpot(TM) Client VM (25.201-b09 mixed mode windows-x86 )\r\n# Problematic frame:\r\n# C  0x00000000\r\n#\r\n# Failed to write core dump. Minidumps are not enabled by default on client versions of Windows\r\n#\r\n# If you would like to submit a bug report, please visit:\r\n#   http:\/\/bugreport.java.com\/bugreport\/crash.jsp\r\n# The crash happened outside the Java Virtual Machine in native code.\r\n# See problematic frame for where to report the bug.\r\n#\r\n\r\n---------------  T H R E A D  ---------------\r\n\r\nCurrent thread (0x0278ec00):  JavaThread \"main\" [_thread_in_native, id=15776, stack(0x026b0000,0x02700000)]\r\n\r\nsiginfo: ExceptionCode=0xc0000005, ExceptionInformation=0x00000008 0x00000000\r\n\r\nRegisters:\r\nEAX=0x00000000, EBX=0x2b1c0538, ECX=0x221b7363, EDX=0x00c30000\r\nESP=0x026ff43c, EBP=0x026ff474, ESI=0x2b1c0530, EDI=0x0278ec00\r\nEIP=0x00000000, EFLAGS=0x00010202\r\n\r\nTop of Stack: (sp=0x026ff43c)\r\n0x026ff43c:   00000000 00000000 3f800000 2b1ca158\r\n0x026ff44c:   2b1c0538 02a33d56 026ff454 2b1c0530\r\n0x026ff45c:   026ff490 2b1c9ae0 00000000 2b1c0538\r\n0x026ff46c:   00000000 026ff484 026ff4b4 02a248d4\r\n0x026ff47c:   04dc6868 02a2e1a9 3f800000 00000000\r\n0x026ff48c:   00000000 00000000 026ff494 2b1948c4\r\n0x026ff49c:   026ff4c8 2b1b8018 00000000 2b194908\r\n0x026ff4ac:   026ff484 026ff4bc 026ff4ec 02a248d4 \r\n\r\nInstructions: (pc=0x00000000)\r\n0xffffffe0:   \r\n\r\n\r\nRegister to memory mapping:\r\n\r\nEAX=0x00000000 is an unknown value\r\nEBX={method} {0x2b1c053c} 'glClearColor' '(FFFF)V' in 'org\/lwjgl\/opengl\/GL11C'\r\nECX=0x221b7363 is an unallocated location in the heap\r\nEDX=0x00c30000 is an unknown value\r\nESP=0x026ff43c is pointing into the stack for thread: 0x0278ec00\r\nEBP=0x026ff474 is pointing into the stack for thread: 0x0278ec00\r\nESI=0x2b1c0530 is pointing into metadata\r\nEDI=0x0278ec00 is a thread\r\n\r\n\r\nStack: [0x026b0000,0x02700000],  sp=0x026ff43c,  free space=317k\r\nJava frames: (J=compiled Java code, j=interpreted, Vv=VM code)\r\nj  org.lwjgl.opengl.GL11C.glClearColor(FFFF)V+0\r\nj  org.lwjgl.opengl.GL11.glClearColor(FFFF)V+4\r\nj  com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lcom\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3Window;Lcom\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3ApplicationConfiguration;J)V+58\r\nj  com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lcom\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3ApplicationConfiguration;Lcom\/badlogic\/gdx\/ApplicationListener;J)Lcom\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3Window;+23\r\nj  com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.<init>(Lcom\/badlogic\/gdx\/ApplicationListener;Lcom\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3ApplicationConfiguration;)V+243\r\nj  com.noblemaster.lib.boot.plaf.impl.libgdx.ExecDesktopLibGDX$4.<init>(Lcom\/badlogic\/gdx\/ApplicationListener;Lcom\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3ApplicationConfiguration;)V+3\r\nj  com.noblemaster.lib.boot.plaf.impl.libgdx.ExecDesktopLibGDX.run(Lcom\/noblemaster\/lib\/boot\/arch\/Program;Ljava\/lang\/Class;[Ljava\/lang\/String;Lcom\/noblemaster\/lib\/boot\/plaf\/impl\/libgdx\/ExecDesktopLibGDX$MainConfiguration;ZJ)V+346\r\nj  com.noblemaster.lib.boot.plaf.impl.libgdx.ExecDesktopLibGDX.run(Lcom\/noblemaster\/lib\/boot\/arch\/Program;Ljava\/lang\/Class;[Ljava\/lang\/String;Lcom\/noblemaster\/lib\/boot\/plaf\/impl\/libgdx\/ExecDesktopLibGDX$MainConfiguration;Z)V+9\r\nj  com.retrocommander.app.user.Main.main([Ljava\/lang\/String;)V+18\r\nv  ~StubRoutines::call_stub\r\n\r\n---------------  P R O C E S S  ---------------\r\n\r\nJava Threads: ( => current thread )\r\n  0x25dc6c00 JavaThread \"Thread-1\" [_thread_blocked, id=13216, stack(0x26a90000,0x26ae0000)]\r\n  0x259dac00 JavaThread \"Service Thread\" daemon [_thread_blocked, id=9776, stack(0x25c30000,0x25c80000)]\r\n  0x258d3400 JavaThread \"C1 CompilerThread0\" daemon [_thread_blocked, id=8792, stack(0x25ba0000,0x25bf0000)]\r\n  0x250a8c00 JavaThread \"JDWP Command Reader\" daemon [_thread_in_native, id=17912, stack(0x25710000,0x25760000)]\r\n  0x250a5c00 JavaThread \"JDWP Event Helper Thread\" daemon [_thread_blocked, id=12324, stack(0x25680000,0x256d0000)]\r\n  0x25096c00 JavaThread \"JDWP Transport Listener: dt_socket\" daemon [_thread_blocked, id=580, stack(0x255f0000,0x25640000)]\r\n  0x2509d400 JavaThread \"Attach Listener\" daemon [_thread_blocked, id=22276, stack(0x25560000,0x255b0000)]\r\n  0x2509b400 JavaThread \"Signal Dispatcher\" daemon [_thread_blocked, id=11420, stack(0x254d0000,0x25520000)]\r\n  0x2507fc00 JavaThread \"Finalizer\" daemon [_thread_blocked, id=19064, stack(0x25340000,0x25390000)]\r\n  0x25079c00 JavaThread \"Reference Handler\" daemon [_thread_blocked, id=15788, stack(0x252b0000,0x25300000)]\r\n=>0x0278ec00 JavaThread \"main\" [_thread_in_native, id=15776, stack(0x026b0000,0x02700000)]\r\n\r\nOther Threads:\r\n  0x25062c00 VMThread [stack: 0x25260000,0x252b0000] [id=16752]\r\n  0x25a03c00 WatcherThread [stack: 0x25cc0000,0x25d10000] [id=7616]\r\n\r\nVM state:not at safepoint (normal execution)\r\n\r\nVM Mutex\/Monitor currently owned by a thread: None\r\n\r\nHeap:\r\n def new generation   total 4992K, used 2462K [0x04c00000, 0x05160000, 0x0f6a0000)\r\n  eden space 4480K,  43% used [0x04c00000, 0x04de7b98, 0x05060000)\r\n  from space 512K,  99% used [0x05060000, 0x050dff40, 0x050e0000)\r\n  to   space 512K,   0% used [0x050e0000, 0x050e0000, 0x05160000)\r\n tenured generation   total 10944K, used 3988K [0x0f6a0000, 0x10150000, 0x24c00000)\r\n   the space 10944K,  36% used [0x0f6a0000, 0x0fa853b8, 0x0fa85400, 0x10150000)\r\n Metaspace       used 8862K, capacity 9198K, committed 9344K, reserved 9600K\r\n\r\nCard table byte_map: [0x04a20000,0x04b30000] byte_map_base: 0x049fa000\r\n\r\nPolling page: 0x00e50000\r\n\r\nCodeCache: size=32768Kb used=1759Kb max_used=1759Kb free=31008Kb\r\n bounds [0x02a20000, 0x02be0000, 0x04a20000]\r\n total_blobs=1188 nmethods=627 adapters=499\r\n compilation: enabled\r\n\r\nCompilation events (10 events):\r\nEvent: 4.792 Thread 0x258d3400  632             sun.misc.URLClassPath$JarLoader::access$700 (5 bytes)\r\nEvent: 4.792 Thread 0x258d3400 nmethod 632 0x02b0ea08 code [0x02b0eb00, 0x02b0eb70]\r\nEvent: 4.800 Thread 0x258d3400  633             java.security.CodeSource::getLocation (5 bytes)\r\nEvent: 4.800 Thread 0x258d3400 nmethod 633 0x02b0e848 code [0x02b0e940, 0x02b0e9c0]\r\nEvent: 4.806 Thread 0x258d3400  634             java.security.CodeSource::getCertificates (98 bytes)\r\nEvent: 4.806 Thread 0x258d3400 nmethod 634 0x02b0e1c8 code [0x02b0e320, 0x02b0e5fc]\r\nEvent: 4.830 Thread 0x258d3400  635   !         java.net.URLClassLoader::findClass (47 bytes)\r\nEvent: 4.830 Thread 0x258d3400 nmethod 635 0x02b0db48 code [0x02b0dc70, 0x02b0de98]\r\nEvent: 4.831 Thread 0x258d3400  636  s!         java.net.URLStreamHandler::getHostAddress (54 bytes)\r\nEvent: 4.831 Thread 0x258d3400 nmethod 636 0x02b0d388 code [0x02b0d4c0, 0x02b0d898]\r\n\r\nGC Heap History (10 events):\r\nEvent: 2.723 GC heap before\r\n{Heap before GC invocations=10 (full 1):\r\n def new generation   total 4992K, used 4701K [0x04c00000, 0x05160000, 0x0f6a0000)\r\n  eden space 4480K, 100% used [0x04c00000, 0x05060000, 0x05060000)\r\n  from space 512K,  43% used [0x050e0000, 0x05117680, 0x05160000)\r\n  to   space 512K,   0% used [0x05060000, 0x05060000, 0x050e0000)\r\n tenured generation   total 10944K, used 2905K [0x0f6a0000, 0x10150000, 0x24c00000)\r\n   the space 10944K,  26% used [0x0f6a0000, 0x0f976768, 0x0f976800, 0x10150000)\r\n Metaspace       used 6246K, capacity 6458K, committed 6528K, reserved 6528K\r\nEvent: 2.725 GC heap after\r\nHeap after GC invocations=11 (full 1):\r\n def new generation   total 4992K, used 310K [0x04c00000, 0x05160000, 0x0f6a0000)\r\n  eden space 4480K,   0% used [0x04c00000, 0x04c00000, 0x05060000)\r\n  from space 512K,  60% used [0x05060000, 0x050ada80, 0x050e0000)\r\n  to   space 512K,   0% used [0x050e0000, 0x050e0000, 0x05160000)\r\n tenured generation   total 10944K, used 2905K [0x0f6a0000, 0x10150000, 0x24c00000)\r\n   the space 10944K,  26% used [0x0f6a0000, 0x0f976768, 0x0f976800, 0x10150000)\r\n Metaspace       used 6246K, capacity 6458K, committed 6528K, reserved 6528K\r\n}\r\nEvent: 3.614 GC heap before\r\n{Heap before GC invocations=11 (full 1):\r\n def new generation   total 4992K, used 4789K [0x04c00000, 0x05160000, 0x0f6a0000)\r\n  eden space 4480K,  99% used [0x04c00000, 0x0505fb30, 0x05060000)\r\n  from space 512K,  60% used [0x05060000, 0x050ada80, 0x050e0000)\r\n  to   space 512K,   0% used [0x050e0000, 0x050e0000, 0x05160000)\r\n tenured generation   total 10944K, used 2905K [0x0f6a0000, 0x10150000, 0x24c00000)\r\n   the space 10944K,  26% used [0x0f6a0000, 0x0f976768, 0x0f976800, 0x10150000)\r\n Metaspace       used 6699K, capacity 6899K, committed 6912K, reserved 7552K\r\nEvent: 3.618 GC heap after\r\nHeap after GC invocations=12 (full 1):\r\n def new generation   total 4992K, used 511K [0x04c00000, 0x05160000, 0x0f6a0000)\r\n  eden space 4480K,   0% used [0x04c00000, 0x04c00000, 0x05060000)\r\n  from space 512K,  99% used [0x050e0000, 0x0515fff8, 0x05160000)\r\n  to   space 512K,   0% used [0x05060000, 0x05060000, 0x050e0000)\r\n tenured generation   total 10944K, used 3224K [0x0f6a0000, 0x10150000, 0x24c00000)\r\n   the space 10944K,  29% used [0x0f6a0000, 0x0f9c62a0, 0x0f9c6400, 0x10150000)\r\n Metaspace       used 6699K, capacity 6899K, committed 6912K, reserved 7552K\r\n}\r\nEvent: 3.929 GC heap before\r\n{Heap before GC invocations=12 (full 1):\r\n def new generation   total 4992K, used 4991K [0x04c00000, 0x05160000, 0x0f6a0000)\r\n  eden space 4480K, 100% used [0x04c00000, 0x05060000, 0x05060000)\r\n  from space 512K,  99% used [0x050e0000, 0x0515fff8, 0x05160000)\r\n  to   space 512K,   0% used [0x05060000, 0x05060000, 0x050e0000)\r\n tenured generation   total 10944K, used 3224K [0x0f6a0000, 0x10150000, 0x24c00000)\r\n   the space 10944K,  29% used [0x0f6a0000, 0x0f9c62a0, 0x0f9c6400, 0x10150000)\r\n Metaspace       used 7472K, capacity 7787K, committed 7808K, reserved 8576K\r\nEvent: 3.932 GC heap after\r\nHeap after GC invocations=13 (full 1):\r\n def new generation   total 4992K, used 512K [0x04c00000, 0x05160000, 0x0f6a0000)\r\n  eden space 4480K,   0% used [0x04c00000, 0x04c00000, 0x05060000)\r\n  from space 512K, 100% used [0x05060000, 0x050e0000, 0x050e0000)\r\n  to   space 512K,   0% used [0x050e0000, 0x050e0000, 0x05160000)\r\n tenured generation   total 10944K, used 3562K [0x0f6a0000, 0x10150000, 0x24c00000)\r\n   the space 10944K,  32% used [0x0f6a0000, 0x0fa1a938, 0x0fa1aa00, 0x10150000)\r\n Metaspace       used 7472K, capacity 7787K, committed 7808K, reserved 8576K\r\n}\r\nEvent: 4.593 GC heap before\r\n{Heap before GC invocations=13 (full 1):\r\n def new generation   total 4992K, used 4992K [0x04c00000, 0x05160000, 0x0f6a0000)\r\n  eden space 4480K, 100% used [0x04c00000, 0x05060000, 0x05060000)\r\n  from space 512K, 100% used [0x05060000, 0x050e0000, 0x050e0000)\r\n  to   space 512K,   0% used [0x050e0000, 0x050e0000, 0x05160000)\r\n tenured generation   total 10944K, used 3562K [0x0f6a0000, 0x10150000, 0x24c00000)\r\n   the space 10944K,  32% used [0x0f6a0000, 0x0fa1a938, 0x0fa1aa00, 0x10150000)\r\n Metaspace       used 7944K, capacity 8250K, committed 8320K, reserved 8576K\r\nEvent: 4.596 GC heap after\r\nHeap after GC invocations=14 (full 1):\r\n def new generation   total 4992K, used 353K [0x04c00000, 0x05160000, 0x0f6a0000)\r\n  eden space 4480K,   0% used [0x04c00000, 0x04c00000, 0x05060000)\r\n  from space 512K,  69% used [0x050e0000, 0x05138708, 0x05160000)\r\n  to   space 512K,   0% used [0x05060000, 0x05060000, 0x050e0000)\r\n tenured generation   total 10944K, used 3795K [0x0f6a0000, 0x10150000, 0x24c00000)\r\n   the space 10944K,  34% used [0x0f6a0000, 0x0fa54c40, 0x0fa54e00, 0x10150000)\r\n Metaspace       used 7944K, capacity 8250K, committed 8320K, reserved 8576K\r\n}\r\nEvent: 4.798 GC heap before\r\n{Heap before GC invocations=14 (full 1):\r\n def new generation   total 4992K, used 4833K [0x04c00000, 0x05160000, 0x0f6a0000)\r\n  eden space 4480K, 100% used [0x04c00000, 0x05060000, 0x05060000)\r\n  from space 512K,  69% used [0x050e0000, 0x05138708, 0x05160000)\r\n  to   space 512K,   0% used [0x05060000, 0x05060000, 0x050e0000)\r\n tenured generation   total 10944K, used 3795K [0x0f6a0000, 0x10150000, 0x24c00000)\r\n   the space 10944K,  34% used [0x0f6a0000, 0x0fa54c40, 0x0fa54e00, 0x10150000)\r\n Metaspace       used 8531K, capacity 8839K, committed 8960K, reserved 9600K\r\nEvent: 4.799 GC heap after\r\nHeap after GC invocations=15 (full 1):\r\n def new generation   total 4992K, used 511K [0x04c00000, 0x05160000, 0x0f6a0000)\r\n  eden space 4480K,   0% used [0x04c00000, 0x04c00000, 0x05060000)\r\n  from space 512K,  99% used [0x05060000, 0x050dff40, 0x050e0000)\r\n  to   space 512K,   0% used [0x050e0000, 0x050e0000, 0x05160000)\r\n tenured generation   total 10944K, used 3988K [0x0f6a0000, 0x10150000, 0x24c00000)\r\n   the space 10944K,  36% used [0x0f6a0000, 0x0fa853b8, 0x0fa85400, 0x10150000)\r\n Metaspace       used 8531K, capacity 8839K, committed 8960K, reserved 9600K\r\n}\r\n\r\nDeoptimization events (0 events):\r\nNo events\r\n\r\nClasses redefined (0 events):\r\nNo events\r\n\r\nInternal exceptions (10 events):\r\nEvent: 4.724 Thread 0x0278ec00 Exception <a 'sun\/nio\/fs\/WindowsException'> (0x04e06b98) thrown at [C:\\re\\workspace\\8-2-build-windows-i586-cygwin\\jdk8u201\\12322\\hotspot\\src\\share\\vm\\prims\\jni.cpp, line 709]\r\nEvent: 4.724 Thread 0x0278ec00 Exception <a 'sun\/nio\/fs\/WindowsException'> (0x04e07320) thrown at [C:\\re\\workspace\\8-2-build-windows-i586-cygwin\\jdk8u201\\12322\\hotspot\\src\\share\\vm\\prims\\jni.cpp, line 709]\r\nEvent: 4.730 Thread 0x0278ec00 Exception <a 'sun\/nio\/fs\/WindowsException'> (0x04e184a8) thrown at [C:\\re\\workspace\\8-2-build-windows-i586-cygwin\\jdk8u201\\12322\\hotspot\\src\\share\\vm\\prims\\jni.cpp, line 709]\r\nEvent: 4.730 Thread 0x0278ec00 Exception <a 'sun\/nio\/fs\/WindowsException'> (0x04e18ac8) thrown at [C:\\re\\workspace\\8-2-build-windows-i586-cygwin\\jdk8u201\\12322\\hotspot\\src\\share\\vm\\prims\\jni.cpp, line 709]\r\nEvent: 4.732 Thread 0x0278ec00 Exception <a 'sun\/nio\/fs\/WindowsException'> (0x04e2f8a8) thrown at [C:\\re\\workspace\\8-2-build-windows-i586-cygwin\\jdk8u201\\12322\\hotspot\\src\\share\\vm\\prims\\jni.cpp, line 709]\r\nEvent: 4.732 Thread 0x0278ec00 Exception <a 'sun\/nio\/fs\/WindowsException'> (0x04e30090) thrown at [C:\\re\\workspace\\8-2-build-windows-i586-cygwin\\jdk8u201\\12322\\hotspot\\src\\share\\vm\\prims\\jni.cpp, line 709]\r\nEvent: 4.854 Thread 0x0278ec00 Exception <a 'sun\/nio\/fs\/WindowsException'> (0x04d88360) thrown at [C:\\re\\workspace\\8-2-build-windows-i586-cygwin\\jdk8u201\\12322\\hotspot\\src\\share\\vm\\prims\\jni.cpp, line 709]\r\nEvent: 4.854 Thread 0x0278ec00 Exception <a 'sun\/nio\/fs\/WindowsException'> (0x04d88ac0) thrown at [C:\\re\\workspace\\8-2-build-windows-i586-cygwin\\jdk8u201\\12322\\hotspot\\src\\share\\vm\\prims\\jni.cpp, line 709]\r\nEvent: 4.859 Thread 0x0278ec00 Exception <a 'sun\/nio\/fs\/WindowsException'> (0x04d99260) thrown at [C:\\re\\workspace\\8-2-build-windows-i586-cygwin\\jdk8u201\\12322\\hotspot\\src\\share\\vm\\prims\\jni.cpp, line 709]\r\nEvent: 4.859 Thread 0x0278ec00 Exception <a 'sun\/nio\/fs\/WindowsException'> (0x04d99880) thrown at [C:\\re\\workspace\\8-2-build-windows-i586-cygwin\\jdk8u201\\12322\\hotspot\\src\\share\\vm\\prims\\jni.cpp, line 709]\r\n\r\nEvents (10 events):\r\nEvent: 4.861 Thread 0x0278ec00 DEOPT PACKING pc=0x02b8f714 sp=0x026fe490\r\nEvent: 4.861 Thread 0x0278ec00 DEOPT UNPACKING pc=0x02a5c5e5 sp=0x026fe3bc mode 1\r\nEvent: 4.862 loading class org\/lwjgl\/opengl\/GL11C\r\nEvent: 4.862 loading class org\/lwjgl\/opengl\/GL11C done\r\nEvent: 4.862 Thread 0x0278ec00 DEOPT PACKING pc=0x02b0dd7c sp=0x026fea40\r\nEvent: 4.862 Thread 0x0278ec00 DEOPT UNPACKING pc=0x02a5c5e5 sp=0x026fe8f0 mode 1\r\nEvent: 4.862 Thread 0x0278ec00 DEOPT PACKING pc=0x02b8f7a8 sp=0x026fea90\r\nEvent: 4.862 Thread 0x0278ec00 DEOPT UNPACKING pc=0x02a5c5e5 sp=0x026fe9b0 mode 1\r\nEvent: 4.862 Thread 0x0278ec00 DEOPT PACKING pc=0x02b8f714 sp=0x026feb70\r\nEvent: 4.862 Thread 0x0278ec00 DEOPT UNPACKING pc=0x02a5c5e5 sp=0x026fea9c mode 1\r\n\r\n\r\nDynamic libraries:\r\n0x00670000 - 0x006a3000 \tC:\\Program Files (x86)\\Java\\jdk1.8.0_201\\bin\\java.exe\r\n0x77c50000 - 0x77df3000 \tC:\\WINDOWS\\SYSTEM32\\ntdll.dll\r\n0x77980000 - 0x77a70000 \tC:\\WINDOWS\\System32\\KERNEL32.DLL\r\n0x776a0000 - 0x778b4000 \tC:\\WINDOWS\\System32\\KERNELBASE.dll\r\n0x6e7e0000 - 0x6e87f000 \tC:\\WINDOWS\\SYSTEM32\\apphelp.dll\r\n0x76bf0000 - 0x76c6b000 \tC:\\WINDOWS\\System32\\ADVAPI32.dll\r\n0x774f0000 - 0x775af000 \tC:\\WINDOWS\\System32\\msvcrt.dll\r\n0x77600000 - 0x77676000 \tC:\\WINDOWS\\System32\\sechost.dll\r\n0x75b20000 - 0x75bde000 \tC:\\WINDOWS\\System32\\RPCRT4.dll\r\n0x760c0000 - 0x7625c000 \tC:\\WINDOWS\\System32\\USER32.dll\r\n0x77680000 - 0x77698000 \tC:\\WINDOWS\\System32\\win32u.dll\r\n0x76260000 - 0x76284000 \tC:\\WINDOWS\\System32\\GDI32.dll\r\n0x76620000 - 0x766fc000 \tC:\\WINDOWS\\System32\\gdi32full.dll\r\n0x765a0000 - 0x7661b000 \tC:\\WINDOWS\\System32\\msvcp_win.dll\r\n0x77b10000 - 0x77c30000 \tC:\\WINDOWS\\System32\\ucrtbase.dll\r\n0x6f620000 - 0x6f830000 \tC:\\WINDOWS\\WinSxS\\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.19041.1110_none_a8625c1886757984\\COMCTL32.dll\r\n0x76bc0000 - 0x76be5000 \tC:\\WINDOWS\\System32\\IMM32.DLL\r\n0x6bdf0000 - 0x6beaf000 \tC:\\Program Files (x86)\\Java\\jdk1.8.0_201\\jre\\bin\\msvcr100.dll\r\n0x54c20000 - 0x54ff5000 \tC:\\Program Files (x86)\\Java\\jdk1.8.0_201\\jre\\bin\\client\\jvm.dll\r\n0x773e0000 - 0x773e6000 \tC:\\WINDOWS\\System32\\PSAPI.DLL\r\n0x75020000 - 0x75048000 \tC:\\WINDOWS\\SYSTEM32\\WINMM.dll\r\n0x75a10000 - 0x75a18000 \tC:\\WINDOWS\\SYSTEM32\\VERSION.dll\r\n0x6ee30000 - 0x6ee38000 \tC:\\WINDOWS\\SYSTEM32\\WSOCK32.dll\r\n0x77310000 - 0x77373000 \tC:\\WINDOWS\\System32\\WS2_32.dll\r\n0x6ddd0000 - 0x6dddc000 \tC:\\Program Files (x86)\\Java\\jdk1.8.0_201\\jre\\bin\\verify.dll\r\n0x6d610000 - 0x6d631000 \tC:\\Program Files (x86)\\Java\\jdk1.8.0_201\\jre\\bin\\java.dll\r\n0x6bdc0000 - 0x6bdeb000 \tC:\\Program Files (x86)\\Java\\jdk1.8.0_201\\jre\\bin\\jdwp.dll\r\n0x6d600000 - 0x6d607000 \tC:\\Program Files (x86)\\Java\\jdk1.8.0_201\\jre\\bin\\npt.dll\r\n0x6bd40000 - 0x6bd60000 \tC:\\Program Files (x86)\\Java\\jdk1.8.0_201\\jre\\bin\\instrument.dll\r\n0x6b520000 - 0x6b534000 \tC:\\Program Files (x86)\\Java\\jdk1.8.0_201\\jre\\bin\\zip.dll\r\n0x76c70000 - 0x77225000 \tC:\\WINDOWS\\System32\\SHELL32.dll\r\n0x728e0000 - 0x72eec000 \tC:\\WINDOWS\\SYSTEM32\\windows.storage.dll\r\n0x76290000 - 0x76510000 \tC:\\WINDOWS\\System32\\combase.dll\r\n0x72870000 - 0x72894000 \tC:\\WINDOWS\\SYSTEM32\\Wldp.dll\r\n0x76510000 - 0x76597000 \tC:\\WINDOWS\\System32\\SHCORE.dll\r\n0x775b0000 - 0x775f5000 \tC:\\WINDOWS\\System32\\shlwapi.dll\r\n0x72850000 - 0x72868000 \tC:\\WINDOWS\\SYSTEM32\\profapi.dll\r\n0x6bdb0000 - 0x6bdb8000 \tC:\\Program Files (x86)\\Java\\jdk1.8.0_201\\jre\\bin\\dt_socket.dll\r\n0x71330000 - 0x71382000 \tC:\\WINDOWS\\system32\\mswsock.dll\r\n0x6b500000 - 0x6b520000 \tC:\\Program Files (x86)\\Java\\jdk1.8.0_201\\jre\\bin\\sunec.dll\r\n0x6b4e0000 - 0x6b4f5000 \tC:\\Program Files (x86)\\Java\\jdk1.8.0_201\\jre\\bin\\net.dll\r\n0x6d280000 - 0x6d428000 \tC:\\WINDOWS\\SYSTEM32\\urlmon.dll\r\n0x6d000000 - 0x6d22c000 \tC:\\WINDOWS\\SYSTEM32\\iertutil.dll\r\n0x6cff0000 - 0x6cffb000 \tC:\\WINDOWS\\SYSTEM32\\netutils.dll\r\n0x6d230000 - 0x6d24d000 \tC:\\WINDOWS\\SYSTEM32\\srvcli.dll\r\n0x71470000 - 0x714a2000 \tC:\\WINDOWS\\SYSTEM32\\IPHLPAPI.DLL\r\n0x77c30000 - 0x77c37000 \tC:\\WINDOWS\\System32\\NSI.dll\r\n0x713c0000 - 0x713d4000 \tC:\\WINDOWS\\SYSTEM32\\dhcpcsvc6.DLL\r\n0x713a0000 - 0x713b6000 \tC:\\WINDOWS\\SYSTEM32\\dhcpcsvc.DLL\r\n0x713e0000 - 0x71470000 \tC:\\WINDOWS\\SYSTEM32\\DNSAPI.dll\r\n0x6bd30000 - 0x6bd3f000 \tC:\\Program Files (x86)\\Java\\jdk1.8.0_201\\jre\\bin\\nio.dll\r\n0x73990000 - 0x739a3000 \tC:\\WINDOWS\\SYSTEM32\\CRYPTSP.dll\r\n0x73960000 - 0x7398f000 \tC:\\WINDOWS\\system32\\rsaenh.dll\r\n0x767a0000 - 0x767b9000 \tC:\\WINDOWS\\System32\\bcrypt.dll\r\n0x6edc0000 - 0x6ede5000 \tC:\\WINDOWS\\SYSTEM32\\USERENV.dll\r\n0x768c0000 - 0x7691f000 \tC:\\WINDOWS\\System32\\bcryptprimitives.dll\r\n0x73950000 - 0x7395a000 \tC:\\WINDOWS\\SYSTEM32\\CRYPTBASE.dll\r\n0x6b4a0000 - 0x6b4d8000 \tC:\\Users\\noblemaster\\AppData\\Local\\Temp\\jna-431018716\\jna4022582052056004212.dll\r\n0x76960000 - 0x76a43000 \tC:\\WINDOWS\\System32\\Ole32.dll\r\n0x75a20000 - 0x75a2f000 \tC:\\WINDOWS\\SYSTEM32\\kernel.appcore.dll\r\n0x77a70000 - 0x77aee000 \tC:\\WINDOWS\\System32\\clbcatq.dll\r\n0x75be0000 - 0x75c76000 \tC:\\WINDOWS\\System32\\OleAut32.dll\r\n0x6ebc0000 - 0x6ebd2000 \tC:\\WINDOWS\\SYSTEM32\\amsi.dll\r\n0x6ba90000 - 0x6bafb000 \tC:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\4.18.2202.4-0\\X86\\MpOav.dll\r\n0x6b470000 - 0x6b494000 \tC:\\Users\\noblemaster\\AppData\\Local\\Temp\\libgdxnoblemaster\\5b4f8837\\gdx.dll\r\n0x6b410000 - 0x6b46d000 \tC:\\Users\\noblemaster\\AppData\\Local\\Temp\\lwjglnoblemaster\\3.3.1-SNAPSHOT\\lwjgl.dll\r\n0x6a770000 - 0x6a7b2000 \tC:\\Users\\NOBLEM~1\\AppData\\Local\\Temp\\lwjglnoblemaster\\3.3.1-SNAPSHOT\\jemalloc.dll\r\n0x67d00000 - 0x67d59000 \tC:\\Users\\NOBLEM~1\\AppData\\Local\\Temp\\lwjglnoblemaster\\3.3.1-SNAPSHOT\\glfw.dll\r\n0x51830000 - 0x51867000 \tC:\\WINDOWS\\SYSTEM32\\dinput8.dll\r\n0x51730000 - 0x5173d000 \tC:\\WINDOWS\\SYSTEM32\\xinput1_4.dll\r\n0x76920000 - 0x7695b000 \tC:\\WINDOWS\\System32\\cfgmgr32.dll\r\n0x72760000 - 0x72789000 \tC:\\WINDOWS\\SYSTEM32\\DEVOBJ.dll\r\n0x625e0000 - 0x62606000 \tC:\\WINDOWS\\SYSTEM32\\dwmapi.dll\r\n0x75070000 - 0x750e4000 \tC:\\WINDOWS\\system32\\uxtheme.dll\r\n0x51740000 - 0x5182d000 \tC:\\WINDOWS\\SYSTEM32\\inputhost.dll\r\n0x67850000 - 0x678eb000 \tC:\\WINDOWS\\SYSTEM32\\CoreMessaging.dll\r\n0x6cde0000 - 0x6cea2000 \tC:\\WINDOWS\\SYSTEM32\\PROPSYS.dll\r\n0x6c780000 - 0x6c85b000 \tC:\\WINDOWS\\SYSTEM32\\wintypes.dll\r\n0x675d0000 - 0x6784e000 \tC:\\WINDOWS\\SYSTEM32\\CoreUIComponents.dll\r\n0x70070000 - 0x70099000 \tC:\\WINDOWS\\SYSTEM32\\ntmarta.dll\r\n0x77230000 - 0x77304000 \tC:\\WINDOWS\\System32\\MSCTF.dll\r\n0x54bc0000 - 0x54c17000 \tC:\\Users\\noblemaster\\AppData\\Local\\Temp\\libgdxnoblemaster\\68f9bd1f27cb628\\libEGL.dll\r\n0x51f30000 - 0x527c9000 \tC:\\Users\\noblemaster\\AppData\\Local\\Temp\\libgdxnoblemaster\\68f9bd1f27cb628\\libGLESv2.dll\r\n0x6e190000 - 0x6e252000 \tC:\\WINDOWS\\SYSTEM32\\dxgi.dll\r\n0x529d0000 - 0x52b45000 \tC:\\Users\\NOBLEM~1\\AppData\\Local\\Temp\\lwjglnoblemaster\\3.3.1-SNAPSHOT\\OpenAL.dll\r\n0x59610000 - 0x5967b000 \tC:\\WINDOWS\\System32\\MMDevApi.dll\r\n0x5e010000 - 0x5e146000 \tC:\\WINDOWS\\SYSTEM32\\AUDIOSES.DLL\r\n0x72700000 - 0x72744000 \tC:\\WINDOWS\\SYSTEM32\\powrprof.dll\r\n0x726f0000 - 0x726fd000 \tC:\\WINDOWS\\SYSTEM32\\UMPDC.dll\r\n0x70190000 - 0x7019f000 \tC:\\WINDOWS\\SYSTEM32\\resourcepolicyclient.dll\r\n0x6e260000 - 0x6e440000 \tC:\\WINDOWS\\SYSTEM32\\d3d11.dll\r\n0x6e5c0000 - 0x6e724000 \tC:\\WINDOWS\\SYSTEM32\\dcomp.dll\r\n0x5c0c0000 - 0x5c5c3000 \tC:\\WINDOWS\\System32\\DriverStore\\FileRepository\\igdlh64.inf_amd64_81f3b03a55f18d79\\igd10iumd32.dll\r\n0x773f0000 - 0x774ea000 \tC:\\WINDOWS\\System32\\CRYPT32.dll\r\n0x6cf30000 - 0x6cf51000 \tC:\\WINDOWS\\SYSTEM32\\ncrypt.dll\r\n0x6cf00000 - 0x6cf28000 \tC:\\WINDOWS\\SYSTEM32\\NTASN1.dll\r\n0x5e500000 - 0x5e7f3000 \tC:\\WINDOWS\\System32\\DriverStore\\FileRepository\\igdlh64.inf_amd64_81f3b03a55f18d79\\igdgmm32.dll\r\n0x56ae0000 - 0x59516000 \tC:\\WINDOWS\\System32\\DriverStore\\FileRepository\\igdlh64.inf_amd64_81f3b03a55f18d79\\igc32.dll\r\n0x5b6c0000 - 0x5b6ec000 \tC:\\WINDOWS\\SYSTEM32\\dxcore.dll\r\n0x6a740000 - 0x6a76f000 \tC:\\Users\\noblemaster\\AppData\\Local\\Temp\\lwjglnoblemaster\\3.3.1-SNAPSHOT\\lwjgl_opengles.dll\r\n0x678f0000 - 0x679a9000 \tC:\\WINDOWS\\SYSTEM32\\textinputframework.dll\r\n0x54b60000 - 0x54bb5000 \tC:\\Users\\noblemaster\\AppData\\Local\\Temp\\lwjglnoblemaster\\3.3.1-SNAPSHOT\\lwjgl_opengl.dll\r\n0x527d0000 - 0x528d4000 \tC:\\WINDOWS\\SYSTEM32\\opengl32.dll\r\n0x51880000 - 0x518bf000 \tC:\\WINDOWS\\SYSTEM32\\GLU32.dll\r\n0x6ec30000 - 0x6edb8000 \tC:\\WINDOWS\\SYSTEM32\\dbghelp.dll\r\n\r\nVM Arguments:\r\njvm_args: -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:56007,suspend=y,server=n -Xmx512m -XstartOnFirstThread -XX:+IgnoreUnrecognizedVMOptions -Djava.library.path=C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\natives -javaagent:C:\\Users\\noblemaster\\AppData\\Local\\JetBrains\\IdeaIC2020.3\\groovyHotSwap\\gragent.jar -javaagent:C:\\Users\\noblemaster\\AppData\\Local\\JetBrains\\IdeaIC2020.3\\captureAgent\\debugger-agent.jar -Dfile.encoding=UTF-8 \r\njava_command: com.retrocommander.app.user.Main -appMode=rco -appPath=http:\/\/www.retrocommander.com -DrunInIDE=true -devel=false -market=Steam -marketMode=FREE\r\njava_class_path (initial): C:\\Program Files (x86)\\Java\\jdk1.8.0_201\\lib\\ant-javafx.jar;C:\\Program Files (x86)\\Java\\jdk1.8.0_201\\lib\\dt.jar;C:\\Program Files (x86)\\Java\\jdk1.8.0_201\\lib\\javafx-mx.jar;C:\\Program Files (x86)\\Java\\jdk1.8.0_201\\lib\\jconsole.jar;C:\\Program Files (x86)\\Java\\jdk1.8.0_201\\lib\\packager.jar;C:\\Program Files (x86)\\Java\\jdk1.8.0_201\\lib\\sa-jdi.jar;C:\\Program Files (x86)\\Java\\jdk1.8.0_201\\lib\\tools.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\bin\\out\\production\\com_user_desk;C:\\nemo\\DropboxSecret\\vn\\project_hub\\bin\\out\\production\\com_core;C:\\nemo\\DropboxSecret\\vn\\project_hub\\bin\\out\\production\\lib_core;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\gdx.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\gdx-backend-lwjgl3.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\btm-3.0.0-SNAPSHOT.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\activemq-protobuf-1.1.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\activemq-broker-5.14.3.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\activemq-client-5.14.3.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\activemq-console-5.14.3.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\activemq-jaas-5.14.3.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\activemq-kahadb-store-5.14.3.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\activemq-openwire-legacy-5.14.3.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\hawtbuf-1.11.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\ehcache-2.9.1.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\java_websocket.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\getdown.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\jna-5.2.0.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\jna-platform-5.2.0.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\steamworks4j-1.6.2.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\steampuppy.jar;C:\\nemo\\DropboxSecret\\vn\\project_hub\\lib_core\\libs\\steampu\r\nLauncher Type: SUN_STANDARD\r\n\r\nEnvironment Variables:\r\nJAVA_HOME=C:\\Program Files\\Java\\jdk1.8.0_131\r\nPATH=C:\\Program Files\\ImageMagick-7.0.7-Q16;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Common Files\\Autodesk Shared\\;C:\\Program Files\\nodejs\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files (x86)\\apache-maven-3.5.4\\bin\\;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\dotnet\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;c:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;c:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Users\\noblemaster\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\ImageMagick-7.0.7-Q16;C:\\Users\\noblemaster\\AppData\\Roaming\\npm;C:\\Users\\noblemaster\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\noblemaster\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;\r\nUSERNAME=noblemaster\r\nOS=Windows_NT\r\nPROCESSOR_IDENTIFIER=Intel64 Family 6 Model 142 Stepping 9, GenuineIntel\r\n\r\n\r\n\r\n---------------  S Y S T E M  ---------------\r\n\r\nOS: Windows 10.0 , 64 bit Build 19041 (10.0.19041.1566)\r\n\r\nCPU:total 4 (initial active 4) (2 cores per cpu, 2 threads per core) family 6 model 142 stepping 9, cmov, cx8, fxsr, mmx, sse, sse2, sse3, ssse3, sse4.1, sse4.2, popcnt, avx, avx2, aes, clmul, erms, rtm, 3dnowpref, lzcnt, ht, tsc, tscinvbit, bmi1, bmi2, adx\r\n\r\nMemory: 4k page, physical 33390344k(17046372k free), swap 38371080k(12118832k free)\r\n\r\nvm_info: Java HotSpot(TM) Client VM (25.201-b09) for windows-x86 JRE (1.8.0_201-b09), built on Dec 16 2018 00:13:48 by \"java_re\" with MS VC++ 10.0 (VS2010)\r\n\r\ntime: Fri Mar 18 22:26:57 2022\r\ntimezone: Tokyo Standard Time\r\nelapsed time: 4 seconds (0d 0h 0m 4s)\r\n```\r\n"],"labels":["bug","desktop","angle"]},{"title":"Audio sounds muffled when using LWJGL3 backend","body":"Please ensure you have given all the following requested information in your report.\r\n\r\n#### Issue details\r\nPlayed sound effects sound very strange \/ muffled when using LWJGL3 backend.\r\n\r\n#### Reproduction steps\/code\r\nThe bug can be reproduced on a nearly empty project:\r\n```\r\npublic class MyGdxGame extends ApplicationAdapter {\r\n\tSound testSound;\r\n\t\r\n\t@Override\r\n\tpublic void create () {\r\n\t\ttestSound = Gdx.audio.newSound(Gdx.files.internal(\"pistol2.wav\"));\r\n\t\ttestSound.play(1);\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void dispose () {\r\n\t\ttestSound.dispose();\r\n\t}\r\n}\r\n```\r\nIn the above test, pistol2.wav is downloaded from https:\/\/freesound.org\/people\/michorvath\/sounds\/427592\/ but I'm pretty sure it doesn't matter what file you use to repro.\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\n1.10.1-SNAPSHOT\r\n\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n* Windows\r\n- [ ] Linux\r\n- [ ] macOS\r\n\r\n#### Other\r\nThe sound file I am playing is mono 16bit pcm Wav data at 44100hz. It also works fine on the lwjgl2 backend. I'd describe the audio distortion as as if it's being passed through a telephone or some sort of band pass filter.\r\n\r\nTo folks debugging: I wonder if this bug may have context \/ be related: https:\/\/github.com\/libgdx\/libgdx\/issues\/6526 - (also by chance the only other bug I have filed to this project - I tend to do a lot of audio stuff I guess)","comments":["That's peculiar. I've been facing issues with poor sound quality in libGDX. But seeing as you linked that issue, I tried 1.10.1-SNAPSHOT, which has now fixed this issue for me on Linux. Some spectrogram comparisons with white noise:\r\n\r\n![](https:\/\/user-images.githubusercontent.com\/60154347\/151652886-53ef9db7-3264-46f4-bf34-bf2fcc42a036.png)","Hi there, i see there is a \"need more info\" label, can you elaborate?\r\n\r\nIf it helps, I am on windows 11, though I don't see why this issue wouldnt also occur on windows 10.","Hm, it's quite strange that the issue only happens with LWJGL 3 and not 2. The respective files are basically the same: [com\/badlogic\/gdx\/backends\/lwjgl\/audio\/Wav.java](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/backends\/gdx-backend-lwjgl\/src\/com\/badlogic\/gdx\/backends\/lwjgl\/audio\/Wav.java), [com\/badlogic\/gdx\/backends\/lwjgl3\/audio\/Wav.java](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/backends\/gdx-backend-lwjgl3\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/audio\/Wav.java)","I don't believe it has anything to do with the audio decoding part, rather the actual playback part, but in that case I don't know why it would affect OP, as LWJGL3's audio issue has been fixed for me presumably in the linked issue. I've now tested SNAPSHOT on Windows 10 and got the same results as on Linux (no problems - audio perfection). Possibly hardware-dependent? ","Okay, this is still a problem across both Windows and Linux (on different hardware), `Sound` and `Music`, etc. The issue is very apparent with the [Vine boom](https:\/\/pixabay.com\/sound-effects\/vine-boom-162668\/) sound when directly compared - quieter, and still not bassy enough even if amplified to normal levels.\r\n\r\nI've narrowed it down to only monaural sounds being affected, so an easy workaround if you don't need panning is to encode all sounds in stereo."],"labels":["bug","need more info","LWJGL3","audio"]},{"title":"fix:fix the crash or anr the view is gone before destory","body":null,"comments":["Please, explain why you think this is necessary.","Seems related https:\/\/github.com\/libgdx\/libgdx\/issues\/6634","> Please, explain why you think this is necessary.\r\n\r\nin a normal android app it not a game app, the view maybe gone in some cases before activity onDestory() invoked,   because onDrawFrame() never calls cause  anr\r\n"],"labels":["android"]},{"title":"What is the right why to limit max fps on Android?","body":"#### Issue details\r\nWhat is the right why to limit max fps on Android?\r\n\r\n#### Reproduction steps\/code\r\nI want to limit max fps on Android, if I `Thread.sleep(ms)` in `render()` , fps is unstable, what is the right why?\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\nlatest\r\n\r\n\r\n#### Please select the affected platforms\r\n- [x] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] macOS\r\n","comments":["libGDX doesn't currently support out of the box an fps limitation mechanism on Android. \r\nTo implement it on your project I think there are 2 different scenarios:\r\n1. If you need to limit the frame rate to 60Hz on one of the newer devices that support high refresh rate (90Hz or 120Hz or 144Hz) you can probably use the Android 11 Frame rate API (https:\/\/developer.android.com\/guide\/topics\/media\/frame-rate) with good results. This is something we may add to libGDX (implementing `AndroidGraphics#setForegroundFps()`).\r\n2. If you need to limit fps on other scenarios (older devices or non natively supported fps rates) you'll probably have to do some kind of \"hacky\" approach like the Thread.sleep() you mention.\r\n\r\nI haven't tested any of those scenarios.","Thanks a lot ! @obigu \r\n\r\nI want people who don\u2019t pay to use low fps, such as 45, 30\r\n\r\nOnly support Android 11 doesn't looks great\r\n\r\nIf use `Thread.sleep()`,  ` Gdx.graphics.framesPerSecond` will keep jumping(The value keeps changing)","\r\n> \r\n> I want people who don\u2019t pay to use low fps, such as 45, 30\r\n> \r\n\r\nOk, I'll give an unrequested advice, don't do that. You want users to see how good your app\/game is and encourage them to pay for full version. Better limit functionality instead of giving them a poor experience.\r\n","Thanks a lot for your advice! Really useful\r\n\r\nI am developing an live wallpaper, even if I don\u2019t limit, I think someone should limit fps to save power....","Sure, live wallpapers is a good use case, I'd expect high fps devices to run at 60Hz when a live wallpaper is running (unless a specific frame rate has been set, which we don't), you should test it on a real device. These devices have adaptative refresh rates and not always run at max fps to save battery.","Okey, I test this code on my samsung s20+:\r\n\r\n```\r\n    override fun render() {\r\n        val startTime = System.currentTimeMillis()\r\n        fpsLogger.log()\r\n        \/\/ real render code\r\n        val endTime = System.currentTimeMillis()\r\n        val usedTime = (endTime - startTime) * 1.4\r\n        val sleepTime = systemSettings.limitFpsSleepTime.get() - usedTime\r\n\r\n        if (sleepTime > 0) Thread.sleep(sleepTime.toLong())\r\n    }\r\n```\r\n\r\nSeems like works well:\r\n![image](https:\/\/user-images.githubusercontent.com\/22125696\/145431925-a711e9b5-65fc-4cc8-b0c6-7080ad8be991.png)\r\n\r\n\r\n@obigu Seems like libgdx has own record time why, \r\n\r\nAm I doing this right? Can I save power this way?","I've added a feature request label to keep it open until we add the mechanism to provide the preferred refresh rate on Android.\r\n\r\nWe can continue the conversation about why you see this refresh rate on your tests on Discord.","Hi, is there any update on this? I was also planning to implement some kind of fps limit in my Android game. Thanks in advance!","> Hi, is there any update on this? I was also planning to implement some kind of fps limit in my Android game. Thanks in advance!\n\nProbably not, use sleep or skip some frame if the last one was draw to fiew times before."],"labels":["feature request"]},{"title":"Add an option to not make the window freeze when moving\/resizing the window","body":"Please ensure you have given all the following requested information in your report.\r\n\r\n#### Issue details\r\nThe window freezes completely when resizing or moving the window, which also increases the deltaTime\r\n\r\n#### Reproduction steps\/code\r\nbe amidst a move\/resize window action\r\n\r\n#### Please select the affected platforms\r\n\r\n- [x] Windows\r\n","comments":["@logicminimal what backend are you using? Lwjgl3? Do you have vsync enabled?","> @logicminimal what backend are you using? Lwjgl3? Do you have vsync enabled?\n\nyep i use lwjgl3 and vsync depends on whatever player sets it to\n\nalso the problem is, when moving\/resizing, the program sleeps instead of pausing, which increases the deltatime too much and the players could exploit the deltatime unless the dev sets an upper limit to deltatime","Not quite sure what the difference is between sleeping and pausing, but delta time is based on a system clock (varies by platform because no nanosecond precision on web) so I think the only way to avoid large delta times is for the game developer to limit it, which only takes one extra line so not a big deal.\r\n\r\nhttps:\/\/github.com\/libgdx\/libgdx\/blob\/741e943ad208644f056bd03a589cd5cb183cc4c9\/backends\/gdx-backend-lwjgl3\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3Graphics.java#L139-L141\r\n\r\nI don't have much to comment on about the window-freezing thing since I don't use Windows much and to my knowledge this only affects Windows. Thought that was just how Windows works, frankly, as I've seen more applications than just libGDX stuff freeze when dragged (though my experiences are set in like Windows XP here).","or maybe the deltaTime could be calculated in a background daemon that so it doesn't break when the window is moved?","If `render()` isn't getting called, what would it be calculating in the background? Just when it would have been called? You're still at risk of encountering large deltas through the following means:\r\n\r\n* The user switches to a different tab (on web) or app (on mobile).\r\n* The process is suspended (can do this via Task Manager, though don't suppose the average user would).\r\n* The computer enters sleep or hibernate mode (might not affect the `nanoTime()` implementations, but will definitely affect `currentTimeMillis()`).\r\n* You hit a big lag spike mid-render, such as by trying to load an asset from disk in a blocking way while antivirus is going mental (this one sounds more like bad code).\r\n\r\nI'd really recommend either you do something like `float delta = Math.min(1\/6f, Gdx.graphics.getDeltaTime())` to cap it... or I guess a default cap could be added into libGDX, so long as there's a way to change it from the default. My only concern with this approach would be that returning a capped value instead of the real delta time is a bit unintuitive."],"labels":["desktop"]},{"title":"LWJGL3 fails to create GLFW window when out of disk space?","body":"Last night we were speaking with Vince on Discord in #general. There's also an older \"gdx-liftoff NullPointerException\" thread in #help.\r\n\r\nIt's possible his computer's just completely screwed, but I'd like to document the noteworthy parts here, mainly in case anyone in future has the same issue, at which point the Discord messages will have been lost to time (and they can't be viewed publicly anyway). I don't mind if this issue gets closed, so long as it remains available for viewing.\r\n\r\n## Issue details\r\nLWJGL3 does not work. But LWJGL2 does work, as do games, and I guess the rest of your usual everyday computer activities also work.\r\n\r\nHe was having issues installing(\/updating?) GeForce Game Ready graphics drivers, but I'm uncertain that's related due to the fact LWJGL2 works and normally you'd also get `Description : WGL : The driver does not appear to support OpenGL` and a `GdxRuntimeException: Couldn't create window` if OpenGL is broken, neither of which happened here. Though it's basically our only lead.\r\n\r\nBoth gdx-setup's output project and gdx-liftoff (the tool itself - not its output, as the tool couldn't be run due to the same error) were tested, and LWJGL3 was enabled for the project using [the instructions on the website](https:\/\/libgdx.com\/news\/2021\/07\/devlog-7-lwjgl3#how-can-i-migrate).\r\n\r\n## Reproduction steps\/code\r\nRun a LWJGL3 libGDX application on his computer (yeah... I doubt anyone would manage to reproduce it intentionally). It's unknown if non-libGDX LWJGL3 stuff is also broken, but I think it's likely.\r\n\r\nThis was tested on both Corretto 14 and AdoptOpenJDK 14.\r\n\r\n## Version of libGDX and\/or relevant dependencies\r\n1.10.0, I think also 1.9.11... maybe every version of libGDX that supports LWJGL3.\r\n\r\n## Stack trace\r\n```\r\nException in thread \"main\" java.lang.NullPointerException\r\n    at org.lwjgl.system.Checks.check(Checks.java:100)\r\n    at org.lwjgl.glfw.GLFW.nglfwGetMonitorWorkarea(GLFW.java:1127)\r\n    at org.lwjgl.glfw.GLFW.glfwGetMonitorWorkarea(GLFW.java:1158)\r\n    at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createGlfwWindow(Lwjgl3Application.java:482)\r\n    at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:404)\r\n    at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:390)\r\n    at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.<init>(Lwjgl3Application.java:111)\r\n    at com.mygdx.game.desktop.DesktopLauncher.main(DesktopLauncher.java:10)\r\nAL lib: (EE) alc_cleanup: 1 device not closed\r\n```\r\n## Affected platforms\r\n- Windows 10\r\n\r\n# Update\r\n\r\nAfter resolving itself like magic, the new theory is this was caused by a lack of disk space. If this is the case, perhaps LWJGL3 could use the libraries from the JAR instead of first copying them (what is this reason for this - faster access speeds?) or simply give a warning if the user has less than, say, 10MB available on their `C:` drive or equivalent.","comments":["Well Liftoff's current version uses libGDX 1.10.0, so we can confirm 1.10.0 as being affected on this machine. The used LWJGL3 version changed a while ago (some time after 1.9.10, and before 1.10.0), I think, so the line numbers in the stacktrace would be different for an older version. We had offered that maybe he had a headless JRE, but I don't think that proved to be the case. This is an extremely strange bug, and I wonder if there's some issue with the GPU involved because new drivers refuse to install.","> The used LWJGL3 version changed a while ago (some time after 1.9.10, and before 1.10.0), I think, so the line numbers in the stacktrace would be different for an older version.\r\n\r\nYeah, they're a bit different. Here's his Liftoff stack trace for comparison (I know you could find it, but the GitHub dwellers mightn't):\r\n\r\n```\r\nException in thread \"main\" java.lang.NullPointerException\r\n    at org.lwjgl.system.Checks.check(Checks.java:100)\r\n    at org.lwjgl.glfw.GLFW.nglfwGetMonitorWorkarea(GLFW.java:1127)\r\n    at org.lwjgl.glfw.GLFW.glfwGetMonitorWorkarea(GLFW.java:1158)\r\n    at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createGlfwWindow(Lwjgl3Application.java:491)\r\n    at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:415)\r\n    at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.createWindow(Lwjgl3Application.java:401)\r\n    at com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.<init>(Lwjgl3Application.java:113)\r\n    at com.github.czyzby.setup.MainKt.main(main.kt:101)\r\n    at com.github.czyzby.setup.MainKt.main(main.kt)\r\n```\r\n\r\n> We had offered that maybe he had a headless JRE, but I don't think that proved to be the case.\r\n\r\nI don't think this would matter anyway. LWJGL3 worked for me with `openjdk11-jre-headless`. I know it's not exactly the same. Point is, I think headless only matters for LWJGL2, where you get a `Exception in thread \"LWJGL Application\" java.lang.UnsatisfiedLinkError: Can't load library: \/usr\/lib\/jvm\/java-11-openjdk-amd64\/lib\/libawt_xawt.so` or similar if using it. I haven't and won't go testing that with every JRE on every OS. Though I expect there are circumstances where a headless JRE wouldn't work with LWJGL3, such as when using gdx-dialogs.\r\n\r\n> This is an extremely strange bug\r\n\r\nI agree. We might not get anywhere. Still, I'm intrigued, and would like to get to the bottom of it.","I think if users have next-to-no disk space left, a lot of things in the OS could fail, and that might be the first sign they get to check something. I think I recall the pagefile.sys and hiberfile.sys files in Windows complaining when they couldn't resize to fit my current memory usage. I'm not sure it's libGDX's responsibility for users to have a functioning machine -- if they do launch the game, and it uses 20MB of memory while they only have 10MB of storage left, and they put the computer to sleep with it open, the hiberfile.sys or comparable storage of sleeping programs wouldn't fit on disk, and that could be rather bad (probably the computer would just shut down, losing all sleeping programs). We don't put in checks that make sure users have a motherboard installed, so we probably don't need checks for full drives (especially if the user has a secondary drive that isn't full).","I've had Windows with a full drive before, though not for any real length of time. Like you say, it's not a good experience, especially since drives were mostly mechanical in those days. I think it just didn't hibernate when there wasn't enough storage (black screen, then back to your windows after it gave up). Which was fine - could always use sleep mode (not hybrid sleep) or shut down instead.\r\n\r\nIt's not the only potential scenario - someone might have a read-only filesystem, such as if they've booted off a live CD. Certainly not a scenario the average user would be in, I know.\r\n\r\nNo matter how tongue-in-cheek it may be, a motherboard check would be ludicrous because you couldn't boot if it was missing, whereas you certainly can boot with a full or read-only drive.","> perhaps LWJGL3 could use the libraries from the JAR instead of first copying them (what is this reason for this - faster access speeds?)\r\n\r\nBecause this is not how it works. You can't load a DLL from a resource, or from memory (*).\r\n\r\n(*) I've seen attempts to [try that](https:\/\/github.com\/fancycode\/MemoryModule), but I wouldn't be surprised if this leads to a whole new bunch of compatibility issues.\r\n\r\n> or simply give a warning if the user has less than, say, 10MB available on their C: drive or equivalent.\r\n\r\nThis reminds me of my idea that there is an open spot for a _do some systems checks and yell at user for trying stupid things_ utility library. ;)","That's interesting to see. Tommy suggested on Discord with a degree of uncertainty that LWJGL3 copies the DLLs but LWJGL2 doesn't, which adds up with LWJGL3 not working while LWJGL2 worked for this person. But if that's not how it works, I guess that rules that out.","I'm not sure if this is related, but I'm having intermittent issues with a similar stacktrace. I can usually run LibGDX programs fine, but sometimes I get a stacktrace similar to this every time I try to launch, and I will be unable to launch them until I restart my system.\r\n\r\n```\r\n---- WilderForge Crash Report----\r\n\/\/It compiles? Ship it.\r\n\r\nTime: 2021-11-30T18:22:02.338644Z\r\nDescription: null\r\nStage: INIT\r\n\r\njava.lang.NullPointerException\r\n\tat org.lwjgl.system.Checks.check(Checks.java:100)\r\n\tat org.lwjgl.glfw.GLFW.glfwGetFramebufferSize(GLFW.java:4831)\r\n\tat com.badlogic.gdx.backends.lwjgl3.NiceLwjgl3Application.createGlfwWindow(NiceLwjgl3Application.java:439)\r\n\tat com.badlogic.gdx.backends.lwjgl3.NiceLwjgl3Application.createWindow(NiceLwjgl3Application.java:377)\r\n\tat com.badlogic.gdx.backends.lwjgl3.NiceLwjgl3Application.createWindow(NiceLwjgl3Application.java:363)\r\n\tat com.badlogic.gdx.backends.lwjgl3.NiceLwjgl3Application.<init>(NiceLwjgl3Application.java:77)\r\n\tat com.worldwalkergames.legacy.LegacyDesktop.main(LegacyDesktop.java:117)\r\n\tat com.wildermods.wilderforge.launch.Main.launchGame(Main.java:70)\r\n\tat com.wildermods.wilderforge.launch.Main.main(Main.java:38)\r\n\tat java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base\/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base\/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base\/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat com.wildermods.wilderforge.launch.services.WilderLauncherService.lambda$0(WilderLauncherService.java:68)\r\n\tat cpw.mods.modlauncher.LaunchServiceHandlerDecorator.launch(LaunchServiceHandlerDecorator.java:37)\r\n\tat cpw.mods.modlauncher.LaunchServiceHandler.launch(LaunchServiceHandler.java:54)\r\n\tat cpw.mods.modlauncher.LaunchServiceHandler.launch(LaunchServiceHandler.java:72)\r\n\tat cpw.mods.modlauncher.Launcher.run(Launcher.java:82)\r\n\tat cpw.mods.modlauncher.Launcher.main(Launcher.java:66)\r\n---- Additonal Information----\r\n\r\n--System Details--\r\nWildermyth Version: 1.3+363 Dolse Ponder\r\nOperating System: Linux\r\n\tArchitecture: amd64\r\n\tVersion: 5.13.0-21-generic\r\nCores: 24\r\nMemory:\r\n\tMax heap size: 7.8 GiB\r\n\tCurrent heap size: 672.0 MiB\r\n\tHeap used: 28.8 MiB\r\n\tFree heap: 643.2 MiB\r\nJava Version: OpenJDK Runtime Environment 11.0.12+7-Ubuntu-0ubuntu3 \r\n\tVendor: Ubuntu\r\nUptime: PT3.814S\r\n\r\n```\r\n\r\nWhile I'm able to resolve my issue by simply restarting my computer, other people that have had similar issues were only able to resolve the issue after unplugging any additional monitors, and some people are unable to resolve the issue at all.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/7155747\/145279703-99c834f9-0c11-4731-845d-01dca8c36faa.png)\r\n![image](https:\/\/user-images.githubusercontent.com\/7155747\/145279816-f519224b-081b-40c4-9fd3-092d75673ddf.png)\r\n![image](https:\/\/user-images.githubusercontent.com\/7155747\/145280526-45430f48-28b0-412a-bdf8-dcf2a8fd1438.png)\r\n\r\nAlso possibly relevant:\r\n\r\nhttps:\/\/steamcommunity.com\/app\/979110\/discussions\/1\/3006675644855488396\/\r\nhttps:\/\/www.reddit.com\/r\/wildermyth\/comments\/oqix8f\/crash_on_launch\/","@Gamebuster19901 That's a similar error, but not the same -- both fail at line 100 of Checks.java, but get there through different failing sections of LWJGL3. I'd recommend starting a new issue, since yours seems to be affecting a release build of a well-tested game and you don't have the disk-space issue that seemed to be the cause initially. Actually, Rhapsodic's stacktrace in the shown Discord thread is the same as this issue, going through line 1127 of GLFW (monitor work area code), while you've hit a different one, going through line 4831 of GLFW (framebuffer code). Not sure what's happening... Your error doesn't seem to be directly related to this one, or at least what causes it. This could very legitimately be a bug in LWJGL3 (which is in the process of being updated to a newer version that should have lots of fixed bugs, we hope), or in GLFW, which LWJGL3 uses. WilderMyth would need to update to libGDX 1.10.1 whenever it gets released, which would almost certainly come with LWJGL 3.3.0, but even that might not fix an issue if it's in GLFW...\r\n\r\nSince you're on Linux and your computer seems quite powerful (24 cores!), maybe running WilderMyth via some form of VM or Wine would be an option for you.","@tommyettinger I forgot to add that Rhapsodic was able to resolve their issue (which was the same as this one) by unplugging their second monitor.\r\n\r\n![image](https:\/\/user-images.githubusercontent.com\/7155747\/145345613-86989c81-df43-451b-b10e-dd0dd8abb2fd.png)\r\n\r\n","> @Gamebuster19901 That's a similar error, but not the same -- both fail at line 100 of Checks.java, but get there through different failing sections of LWJGL3. I'd recommend starting a new issue, since yours seems to be affecting a release build of a well-tested game and you don't have the disk-space issue that seemed to be the cause initially. Actually, Rhapsodic's stacktrace in the shown Discord thread is the same as this issue, going through line 1127 of GLFW (monitor work area code), while you've hit a different one, going through line 4831 of GLFW (framebuffer code). Not sure what's happening... Your error doesn't seem to be directly related to this one, or at least what causes it. This could very legitimately be a bug in LWJGL3 (which is in the process of being updated to a newer version that should have lots of fixed bugs, we hope), or in GLFW, which LWJGL3 uses. WilderMyth would need to update to libGDX 1.10.1 whenever it gets released, which would almost certainly come with LWJGL 3.3.0, but even that might not fix an issue if it's in GLFW...\r\n> \r\n> Since you're on Linux and your computer seems quite powerful (24 cores!), maybe running WilderMyth via some form of VM or Wine would be an option for you.\r\n\r\nMy issue is indeed different. My OS will periodically update the graphics drivers. When it does so, OpenGL will not work until a system reboot.\r\n\r\n```\r\n>java -jar wildermyth.jar\r\n0:00:089 4 LegacyDesktop VM ARGS: -server \r\n0:00:090 4 LegacyDesktop OS:  Linux\r\n0:00:092 4 LegacyDesktop Wildermyth Version 1.5+392 Sunswallowers Wake Hotfix from patchline Steam\r\n0:00:093 4 LegacyDesktop max memory is 8392802304\r\n[LWJGL] GLFW_VERSION_UNAVAILABLE error\r\n    Description : GLX: Failed to create context: BadValue (integer parameter out of range for operation)\r\n    Stacktrace  :\r\n        org.lwjgl.glfw.GLFW.nglfwCreateWindow(GLFW.java:1714)\r\n        org.lwjgl.glfw.GLFW.glfwCreateWindow(GLFW.java:1897)\r\n        com.badlogic.gdx.backends.lwjgl3.NiceLwjgl3Application.createGlfwWindow(NiceLwjgl3Application.java:433)\r\n        com.badlogic.gdx.backends.lwjgl3.NiceLwjgl3Application.createWindow(NiceLwjgl3Application.java:377)\r\n        com.badlogic.gdx.backends.lwjgl3.NiceLwjgl3Application.createWindow(NiceLwjgl3Application.java:363)\r\n        com.badlogic.gdx.backends.lwjgl3.NiceLwjgl3Application.<init>(NiceLwjgl3Application.java:77)\r\n        com.worldwalkergames.legacy.LegacyDesktop.main(LegacyDesktop.java:117)\r\n0:00:193 4 LegacyDesktop Ran into an exception preventing Wildermyth from running. This specific exception (Checks.java:100) sometimes happens if you're using a laptop with an external monitor hooked up to it. Some players have been able to fix the issue by unplugging the external monitor, removing their monitors in Windows Device Manager and letting Windows reinstall them, or uninstalling their monitor adapter and downloading a new one.\r\n0:02:334 5 LegacyDesktop exiting due to fatal runtime error java.lang.NullPointerException\r\n    at org.lwjgl.system.Checks.check(Checks.java:100)\r\n    at org.lwjgl.glfw.GLFW.glfwGetFramebufferSize(GLFW.java:4831)\r\n    at com.badlogic.gdx.backends.lwjgl3.NiceLwjgl3Application.createGlfwWindow(NiceLwjgl3Application.java:439)\r\n    at com.badlogic.gdx.backends.lwjgl3.NiceLwjgl3Application.createWindow(NiceLwjgl3Application.java:377)\r\n    at com.badlogic.gdx.backends.lwjgl3.NiceLwjgl3Application.createWindow(NiceLwjgl3Application.java:363)\r\n    at com.badlogic.gdx.backends.lwjgl3.NiceLwjgl3Application.<init>(NiceLwjgl3Application.java:77)\r\n    at com.worldwalkergames.legacy.LegacyDesktop.main(LegacyDesktop.java:117)\r\n>glxinfo\r\nname of display: :1\r\nX Error of failed request:  BadValue (integer parameter out of range for operation)\r\n  Major opcode of failed request:  151 (GLX)\r\n  Minor opcode of failed request:  24 (X_GLXCreateNewContext)\r\n  Value in failed request:  0x0\r\n  Serial number of failed request:  110\r\n  Current serial number in output stream:  111\r\n```\r\n\r\nHistory.log:\r\n\r\n```\r\nStart-Date: 2022-02-08  06:02:39\r\nCommandline: \/usr\/bin\/unattended-upgrade\r\nUpgrade: bluez-cups:amd64 (5.60-0ubuntu2.1, 5.60-0ubuntu2.2)\r\nEnd-Date: 2022-02-08  06:02:39\r\n\r\nStart-Date: 2022-02-08  06:02:41\r\nCommandline: \/usr\/bin\/unattended-upgrade\r\nUpgrade: libbluetooth-dev:amd64 (5.60-0ubuntu2.1, 5.60-0ubuntu2.2), libbluetooth3:amd64 (5.60-0ubuntu2.1, 5.60-0ubuntu2.2)\r\nEnd-Date: 2022-02-08  06:02:41\r\n\r\nStart-Date: 2022-02-08  06:02:43\r\nCommandline: \/usr\/bin\/unattended-upgrade\r\nUpgrade: bluez-obexd:amd64 (5.60-0ubuntu2.1, 5.60-0ubuntu2.2)\r\nEnd-Date: 2022-02-08  06:02:43\r\n\r\nStart-Date: 2022-02-08  06:02:45\r\nCommandline: \/usr\/bin\/unattended-upgrade\r\nUpgrade: bluez:amd64 (5.60-0ubuntu2.1, 5.60-0ubuntu2.2)\r\nEnd-Date: 2022-02-08  06:02:47\r\n\r\nStart-Date: 2022-02-09  06:39:05\r\nCommandline: \/usr\/bin\/unattended-upgrade\r\nInstall: libnvidia-egl-wayland1:amd64 (1:1.1.7-2build1, automatic)\r\nUpgrade: libnvidia-fbc1-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), libnvidia-fbc1-470:i386 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), libnvidia-gl-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), libnvidia-gl-470:i386 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), libnvidia-extra-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), nvidia-compute-utils-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), nvidia-dkms-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), nvidia-driver-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), libnvidia-encode-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), libnvidia-encode-470:i386 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), nvidia-utils-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), xserver-xorg-video-nvidia-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), libnvidia-ifr1-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), libnvidia-ifr1-470:i386 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), libnvidia-decode-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), libnvidia-decode-470:i386 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), nvidia-kernel-common-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), libnvidia-cfg1-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), nvidia-kernel-source-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), libnvidia-compute-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1), libnvidia-compute-470:i386 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1)\r\nEnd-Date: 2022-02-09  06:39:50\r\n\r\nStart-Date: 2022-02-09  06:39:52\r\nCommandline: \/usr\/bin\/unattended-upgrade\r\nUpgrade: libnvidia-common-470:amd64 (470.86-0ubuntu0.21.10.1, 470.103.01-0ubuntu0.21.10.1)\r\nEnd-Date: 2022-02-09  06:39:52\r\n```","@Gamebuster19901 Hm, there's probably not much that can be done from the Wildermyth, the LWJGL or the libGDX side if the graphics drivers haven't fully loaded pending a restart. There might be some Linux service tricks you can do to get the graphics drivers reloaded on command, but I don't use Ubuntu, so your guess is as good as or better than mine."],"labels":["bug","desktop","need more info","LWJGL3"]},{"title":"3D Particle Effect Editor doesn`t load Texture Atlas","body":"\r\n\r\n#### Issue details\r\n3D Particle Effect Editor doesn`t load Texture Atlas\r\n\r\n#### Reproduction steps\/code\r\nException in thread \"AWT-EventQueue-0\" com.badlogic.gdx.utils.GdxRuntimeException: Asset not loaded: F:\/xxx.atlas\r\n\tat com.badlogic.gdx.assets.AssetManager.get(AssetManager.java:158)\r\n\tat com.badlogic.gdx.assets.AssetManager.get(AssetManager.java:135)\r\n\tat com.badlogic.gdx.tools.flame.FlameMain.load(FlameMain.java:1001)\r\n\tat com.badlogic.gdx.tools.flame.TextureLoaderPanel$2.actionPerformed(TextureLoaderPanel.java:56)\r\n\tat javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:2022)\r\n\tat javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2348)\r\n\tat javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:402)\r\n\tat javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:259)\r\n\tat javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:252)\r\n\tat java.awt.Component.processMouseEvent(Component.java:6550)\r\n\tat javax.swing.JComponent.processMouseEvent(JComponent.java:3325)\r\n\tat java.awt.Component.processEvent(Component.java:6315)\r\n\tat java.awt.Container.processEvent(Container.java:2239)\r\n\tat java.awt.Component.dispatchEventImpl(Component.java:4899)\r\n\tat java.awt.Container.dispatchEventImpl(Container.java:2297)\r\n\tat java.awt.Component.dispatchEvent(Component.java:4721)\r\n\tat java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4904)\r\n\tat java.awt.LightweightDispatcher.processMouseEvent(Container.java:4535)\r\n\tat java.awt.LightweightDispatcher.dispatchEvent(Container.java:4476)\r\n\tat java.awt.Container.dispatchEventImpl(Container.java:2283)\r\n\tat java.awt.Window.dispatchEventImpl(Window.java:2746)\r\n\tat java.awt.Component.dispatchEvent(Component.java:4721)\r\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:766)\r\n\tat java.awt.EventQueue.access$500(EventQueue.java:98)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:715)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:709)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:74)\r\n\tat java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:84)\r\n\tat java.awt.EventQueue$4.run(EventQueue.java:739)\r\n\tat java.awt.EventQueue$4.run(EventQueue.java:737)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:74)\r\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:736)\r\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:205)\r\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)\r\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)\r\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:82)\r\n\r\n#### Version of libGDX and\/or relevant dependencies\r\n1.10.1-SNAPSHOT\r\n\r\n\r\n\r\n#### Please select the affected platforms\r\nWIN10\r\n","comments":["I've tried to reproduce this issue with particle:\r\n\r\nhttps:\/\/user-images.githubusercontent.com\/1684274\/200127105-6d0b49bc-a638-40d6-b0c5-181b5b124ec3.mp4\r\n\r\nand without particle:\r\n\r\nhttps:\/\/user-images.githubusercontent.com\/1684274\/200127117-4cc1a776-42e7-4e96-b069-4d9a80cabd07.mp4\r\n\r\nAs you see, it worked for me. Do you remember what you did when you got this issue?\r\n\r\nTest atlas:\r\n\r\n[test_atlas.zip](https:\/\/github.com\/libgdx\/libgdx\/files\/9944130\/test_atlas.zip)\r\n\r\n"],"labels":["need more info"]},{"title":"NullPointerException in AndroidDaydream.onConfigurationChanged","body":"[This line](https:\/\/github.com\/libgdx\/libgdx\/blob\/af899350378fc0908eb26867b8cc44fd3cfdce7c\/backends\/gdx-backend-android\/src\/com\/badlogic\/gdx\/backends\/android\/AndroidDaydream.java#L299) is throwing NPEs for null `input` in my Google Play crash reports on Android 11 Samsung devices only. It is very frequent.\r\n\r\nI don't have a device with Android 11 to test with. But if no one else is able to fix this, I'm open to doing \r\n\r\n```\r\n\/\/pseudo code\r\nif (input != null) \r\n    input.setKeyboardAvailable(keyboardAvailable)\r\nelse\r\n    postRunnable(() -> if (input != null) input.setKeyboardAvailable(keyboardAvailable) )\r\n```\r\nto give it an opportunity to still set it if this is some kind of lifecycle mis-ordering.","comments":[],"labels":["bug","android","input"]},{"title":"Seamless\/gapless looping of music is unsupported on Android and Chrome","body":"## Issue details\r\n\r\n`setLooping()` doesn't support seamless looping for music. There's no alternative (such as `setGaplessLooping()`) nor was I able to find documentation about this anywhere such as on the wiki.\r\n\r\nI'm aware this is a longstanding issue that's ultimately out of our control, but I didn't find an issue for this issue, so here we are.\r\n\r\nThe common workaround for Android seems to be to use two or three `MediaPlayer`s, and this is what was done at #5989 (closed by author; not merged; previous attempts at #5836 and #5837). I don't know if something like this could be applicable for Chrome (and, if necessary, Safari\/iOS).\r\n\r\nAs much as I dislike hacky solutions, I think it's important for libGDX to either include a solution or have one available as an extension, as, to state the obvious, looping music\/ambience is common practice in games.\r\n\r\nSupport for specifying a range of samples to play would also make seamless looping of formats less well-suited for this (such as MP3) possible, but that just complicates things further and I don't think it's possible with `MediaPlayer` anyway. \r\n\r\nPlatform|Gap\r\n-|-\r\nLWJGL2|None audible\r\nLWJGL3|None audible\r\nChrome|10ms\r\nFirefox|None audible\r\nSafari|Untested\r\nAndroid 11|40ms\r\niOS|Untested\r\n\r\n## Reproduction steps\/code\r\n\r\n```java\r\nMusic music = Gdx.audio.newMusic(Gdx.files.internal(\"tone.wav\"));\r\nmusic.setLooping(true);\r\nmusic.play();\r\n```\r\n\r\nYou can download [tone.wav.zip](https:\/\/github.com\/libgdx\/libgdx\/files\/6946431\/tone.wav.zip) here or provide your own sound.\r\n\r\nYes, in this example, a `Sound` could be used instead to resolve the whole issue, but that's not the point. Most pieces of music exceed Android's 1MiB `SoundPool` limit, Firefox doesn't like long `Sound`s, and loading the whole track in at once increases load times and memory usage.\r\n\r\n## Version of libGDX and\/or relevant dependencies\r\n1.10.0 but pretty sure this affects every version.\r\n\r\n## Stacktrace\r\nN\/A\r\n\r\n## Affected platforms\r\n- [X] Android\r\n- [ ] iOS\r\n- [X] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["A solution I've been using for web games is to repeat the music before uploading, i.e. have music tracks that are about an hour long. When the asset filter is overriden as to not preload these tracks, they just get streamed over the internet, and the upload process isn't a big deal if using something that can apply patches such as butler. It works rather well. But it's not the most reliable solution in case of an internet outage, and it's especially poor for offline games, music often being the largest thing in Android libGDX games.\r\n\r\nToday I tried the libgdx-oboe library. `tone.wav` was seamless. OGG Vorbis and Opus versions were nearly seamless - not quite, but miles ahead of `Music`'s `MediaPlayer` and unlikely to be noticed in the real world. To my astonishment, MP3 (CBR and VBR) looped without a hitch! While I'm a little disgruntled about having to ship audio decoders with the game (I wonder if I could customise the codecs list to only include the ones I need?) I'm pleased with the results. I shall have to see how it copes with longer tracks, but not tonight.","It is now tomorrow! I've performed a real-world test with libgdx-oboe in both emulator and a real device. However, it doesn't like old API levels, even after trying https:\/\/github.com\/barsoosayque\/libgdx-oboe\/issues\/7#issuecomment-696622430 and testing armeabi-v7a in case there was an issue with the x86 natives, so I've only tested the AAudio backend (Android 8.1+).\r\n\r\nI tested a 128kbps MP3, Vorbis and Opus. Opus had a gap of about 3ms, which was noticeable but not the end of the world. MP3 and Vorbis seemed seamless. So pretty decent, but compatibility is worse than I had realised, as it advertises itself as being for API 16+ only to seemingly not work on 16+.\r\n\r\nIn my research, I discovered it's possible to add an `ANDROID_LOOP` tag with a value of `true` to your Ogg using a tag editor such as Quod Libet. At least when using `MediaPlayer`, this disables `Music#setLooping` and forces your audio to always loop. It was suggested this may help, but the results seem the same. This might have [helped prior to Honeycomb](https:\/\/www.reddit.com\/r\/AndroidQuestions\/comments\/2k26b7\/why_have_my_gapless_looping_ringtones_stopped\/) but that's no use to us now.\r\n\r\nI also found that #5989 is based on https:\/\/stackoverflow.com\/a\/33274466 - they have the same code comments and Wheeler left a Stack Overflow comment on the answer. This doesn't really tell us anything new, though.\r\n\r\nThat pretty much brings us back to the `setNextMediaPlayer()` option, which looks a bit of a pain to integrate, but sounds promising and should work back to API 16."],"labels":["bug","audio"]},{"title":"Use proper preferences directories on desktop","body":"## What this pull request does\r\n\r\nPreferences are now stored in standard locations for each OS, which should in turn fix #6559. This doesn't consider the recent discussions in that issue, as I'd already completed the majority of this pull request by that point.\r\n\r\n## Where are my preferences now?\r\n\r\nExisting preferences will not be moved. New preferences will typically be at the following locations:\r\n\r\nOS|Location\r\n-|-\r\nWindows 95\\*\/98\/Me|C:\\WINDOWS\\Application Data\r\nWindows 2000\/XP|C:\\Documents and Settings\\\\<YOUR USERNAME\\>\\Application Data\r\nWindows Vista and newer|C:\\Users\\\\<YOUR USERNAME\\>\\AppData\\Roaming\r\nmacOS|\/Users\/\\<YOUR USERNAME\\>\/Library\/Preferences\r\nLinux|\/home\/\\<YOUR USERNAME\\>\/.config\r\n\r\n**Note:** Locations may vary slightly between Windows\/Linux installations and be subject to localisation\/localization. On 2000\/XP, `Application Data` may be localised to `Anwendungsdaten` or `Datos de programa` as a couple examples. Due to this pull request's use of `%APPDATA%`, that won't be an issue for those operating systems.\r\n\r\n\\*`Application Data` wasn't a standard in Windows 95, but there's no evidence anyone has got Java 7 or newer (as required by libGDX) running on it, so this literally doesn't matter. In the event someone does get it running and the folder doesn't already exist, it'll be created like any other.\r\n\r\nScreenshots||\r\n-|-\r\n**Windows 98**<br>![Windows 98 screenshot](https:\/\/user-images.githubusercontent.com\/60154347\/127750160-338bdf29-dbc6-4c73-93df-2c2a30c68b26.png)|**Windows XP**<br>![Windows XP screenshot](https:\/\/user-images.githubusercontent.com\/60154347\/127750162-42e008f0-0308-41ac-b1b3-86ec443cdae4.png)\r\n**Windows 10**<br>![Windows 10 screenshot](https:\/\/user-images.githubusercontent.com\/60154347\/127750159-369a4aa2-f924-46fd-a03a-b448bf6623c1.png)|**Ubuntu 20.04**<br>![Ubuntu screenshot](https:\/\/user-images.githubusercontent.com\/60154347\/127750161-19b814d8-7597-4d03-874f-e2518d169988.png)\r\n\r\n\r\n## Applicable backends\r\n\r\nThis pull request applies to the desktop backends (LWJGL and LWJGL3), plus headless. It shouldn't affect Android, iOS or web in any way. The libGDX core hasn't been modified.\r\n\r\nLocations where `.prefs\/` is hardwired such as in tests, `LwjglAWTCanvas` and `LwjglCanvas` have not been modified. Does anyone actually use those two classes? They don't appear to have LWJGL3 equivalents.\r\n\r\n## Backwards compatibility\r\n\r\nThis shouldn't break existing preferences for games. For simplicity, let's say we have `save.xml` and that this pull request moves preferences from `.prefs` to `AppData`.\r\n\r\n* If `save.xml` is found in `AppData`, changes to it will be continue to be stored in `AppData`.\r\n* If `save.xml` is found in `.prefs`, changes to it will continue to be stored in `.prefs`.\r\n* If `save.xml` cannot be found in either of the above locations, it will be created in `AppData`.\r\n\r\nSo, for existing preferences, it is on the developer to move the data from the old location to the new one if they so decide. `getDefaultPreferencesDirectory()` is public, so they have everything they need to do so. I opted not to move old data mainly because it's easier not to implement such a setup, but also because moving it can't go wrong if you don't move it, and users\/developers may get confused if their old file moves.\r\n\r\nAs for the nitty gritty developers out there, if you're overriding this and that, things shouldn't break too badly! Classes\/methods had to be adapted to fit more variables for backwards-compatibility with the old preferences directory, but you can still use them as before with fewer arguments through the power of overloads.\r\n\r\n## New configurations\r\n\r\nWhen configuring your desktop or headless game, there's a few more things you can change. Note that the below may differ slightly between backends.\r\n\r\n* `preferencesBackupDirectory`: This is how you configure where it'll look for preferences if it fails to find them in the main directory. By default `.prefs\/` - exactly how `preferencesDirectory` used to be. If you're creating a new game and don't want to waste a single millisecond on I\/O operations, you can set this to `null`.\r\n* `preferencesBackupFileType`: Same as `preferencesFileType` used to be: `Files.FileType.External`\r\n* `getDefaultPreferencesDirectory()`: This gets the default preferences directory. As already discussed, this is probably in `AppData\\Roaming` on Windows, `Library\/Preferences` on macOS and `~\/.config` on Linux.\r\n* `getDefaultPreferencesFileType()`: Gets the default preferences filetype. This is important because it's not guaranteed whether the directory `getDefaultPreferencesDirectory()` returns is relative from home or absolute.\r\n\r\n## Assumptions\r\n\r\nThe code contained within this pull request makes some assumptions. Pretty sure it'll be fine, but I'll list them here in case someone finds reason to object.\r\n\r\n### 98\/Me Application Data\r\n\r\nOn DOS-based versions of Windows, the preferences directory is set to `Application Data`. Ideally this would be obtained from special folder `CSIDL_APPDATA` or registry key `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\\AppData` as it can vary between locales. I haven't found an environment variable present on these versions that returns this location, and accessing `CSIDL` or the registry from Java appears too complicated to justify implementing for such a small market share's benefit.\r\n\r\n### macOS preferences\r\n\r\nIt is assumed that the directory `Library\/Preferences` will always be present and accessible on macOS. If it turns out there's an envrionment variable or similar that defines this, I'd prefer that, in case Apple one day decides to change this filepath, breaking compatibility. But I'm unaware of such a solution.\r\n\r\n## Aspects that need reviewing\r\n\r\nThis pull request is functional, as far as I can tell. I've tested various Windows operating systems and the three states the preference locations can be in, across the three modified backends.\r\n\r\n### ~~macOS~~\r\n\r\n~~macOS remains completely untested. I do have a virtual machine of it laying around, but I have some technical issues with it and overall it's just a big pain. I would much prefer if someone here could test on macOS. All we really need to know is that saving to `Library\/Preferences` works. Other behaviour should be consistent regardless of OS.~~\r\n\r\nSee [my comment](https:\/\/github.com\/libgdx\/libgdx\/pull\/6614#issuecomment-890441249) below. I think macOS is fine.\r\n\r\n### Roaming\r\n\r\nOn Windows, the directories this pull request uses are roaming. Meaning the preferences may follow a user around from computer to computer in certain networked spaces such as offices and schools. I think this is the better setup for the majority of games, but if people disagree this can easily be changed to use local directories instead - `%LOCALAPPDATA%` on Windows 2000 and newer; possibly just `C:\\` for 95\/98\/Me?\r\n\r\n### $XDG_CONFIG_HOME\r\n\r\nSupport for the `XDG_CONFIG_HOME` environment variable on Linux is partial! ~~And untested.~~ This variable can include other variables, but I found it difficult to make that work properly and not worthwhile, as the majority of Linux installations don't even have this variable set, let alone changed to a custom value. So `$HOME` is supported within this variable but that's all.\r\n\r\n### Experts\r\n\r\nI also require that someone who is experienced with developing libGDX takes a look at the code. Due to the way the different backends are separate from each other in libGDX, there's a lot of duplicate code here, which I think is hard to avoid but unfortunately still makes developing\/maintaining slower. Perhaps some of it could be moved someplace else. And enough has changed that I've probably inadvertantly broken a dozen written rules and two dozen unwritten rules while I'm at it.\r\n\r\n## Amendments\r\n\r\n* Whether intentional or not, Terefang has reminded me that the wiki would need to be updated if this is merged - specifically https:\/\/github.com\/libgdx\/libgdx\/wiki\/Preferences#storage but there may be other pages too.\r\n* MrStahlfelge linked https:\/\/stackoverflow.com\/a\/586917 as a starting point for getting the localised `Application Data` on Windows 98\/Me. It's too much, isn't it? What I already have here will work under different languages - it'll just create an English folder instead of using the correct language. Such old operating systems aren't our priority so I'm perfectly content with things working but not being perfect under them.","comments":["I'm marking this as ready for review now. I ran out of things to do and decided to try macOS. ~~I don't understand why the preferences files don't show in Finder, but this is also true for files created by myself in the terminal and at least Android Studio.~~ **Edit: I had `\/Library\/Preferences` open in Finder instead of `~\/Library\/Preferences`. Oops.** I know little about macOS. The important thing is the file gets created safe and sound without permission issues or anything nasty like that.\r\n\r\n![macOS screenshot](https:\/\/user-images.githubusercontent.com\/60154347\/127757887-4af5e57a-83c9-4e98-87c3-641531f0bf7e.png)\r\n\r\nWould still be nice to give people a chance to comment, but at this stage I'm confident merging this won't break everything.","If I try using a local `file` instead, it gets upset because it's required for `flush()`.\r\n\r\nNote: This was in reply to three of the above code comments. Tommy has since marked them as resolved.","Okay people, where are the desktop devs willing to test, review and approve so we can merge?","I finally had some time to look at the code. It seems fine, but I'd change two minor things:\r\n\r\n1. I think the names `preferencesBackupDir` , `preferencesBackupFileType`, `backupFile`, etc. are misleading. At least for me, \"backup\" implies that the location is used secondarily, if the primary directory can't be used for some reason. But actually it's the other way around: the \"backup\" directory is  checked first. Maybe `preferencesLegacyDir` is a better name?\r\n2. In addition, I don't think that we need to expose the `preferencesBackupDirectory`  and `preferencesBackupFileType` variables. There shouldn't really be a need to change them, so we could just hardcode the values, which should make the whole thing more concise. If people want to disable the \"legacy directory first\"-behaviour, we can introduce a boolean flag for that.","I agree with point 1, especially as that would use the same terminology I added to gdx-setup. Will sort that out tonight.\r\n\r\nPoint 2: I kinda like the variables exposed, but I agree there's not much need unless someone had previously changed their preferences location from the default and now wants to use the new location, which I feel is a realistic scenario.\r\n\r\nI'm also thinking now... there's not really a way to tell which directory is in use - legacy or new. I suppose most games won't go saying \"your save data is in this location\", but some certainly might.\r\n\r\nWhat would be ideal is if we could check the legacy location only if the project has been updated from an older libGDX version, as there's really no point checking it for new projects, but I don't see a clean way of doing that.\r\n\r\nI see little reason to add that boolean flag, as you can do `config.preferencesDirectory = \".prefs\/\";` to make it ignore the new location... but it would still check `.prefs` twice, which is an inefficiency, albeit a very small one and at least it may already be cached in memory by the second read. Could check if the locations are identical before checking the legacy location, negating any benefit to a boolean flag.\r\n\r\nUh... so yes, I might do something for point 2 tonight, but it could do with more thought.","> Point 2: I kinda like the variables exposed, but I agree there's not much need unless someone had previously changed their preferences location from the default and now wants to use the new location, which I feel is a realistic scenario.\r\n\r\nIf people want to continue using their old preferences directories they can just set `preferencesDir` and `preferencesType`. ","~~Hardcoding it didn't make it more concise~~ (as of my next comment, I've changed my mind) and this is just asking for trouble if there's a reason to change the directory and\/or filetype in future since it's now set in so many places instead of just one.\r\n\r\nBut what we can do with this route is have some freedom with `allowLegacyPreferences` (LWJGL2) and `setPreferencesConfig(boolean legacy)` (LWJGL3) in `DesktopLauncher` - name subject to change if someone's better with words than me. Currently defaults to `true` - could be changed to `false` at a later date so long as developers are made well-aware (don't know how, though - I'm still seeing people confused by the removal of armeabi natives despite that being well-documented).\r\n\r\nThoughts, anyone? Not only to the setup idea but also crykn's second suggestion, implemented above - nothing's set in stone yet.","Hurrah, a commit that has more removals than additions! This is why I marked it as draft - knew I was missing something. And I was hoping someone would discuss. Feelin' good, but so much has changed that I'll need to test it again. Will do that after sleeping on it.\r\n\r\nP.S. As of one of these commits somewhere, javadocs reference this as version 1.10.1. If the next version has a different number or this pull request doesn't make it into the next version, well, we can't forget about that!","I've finally had some time to look at this again - sorry it took so long! (1.10.1 still isn't out yet, so I'm just in line with our release cycle, _ahem_)\r\n\r\nThere is one thing I'd like to change, and that is how new and legacy locations interact with eachother. I think it would be better to do the following:\r\n1. Check first whether the new prefs file exists. If that is the case, ignore the old legacy files.\r\n2. If the new file doesn't exist (which is the case when a legacy app has never saved their preferences with libGDX 1.10.1+) and the legacy option is enabled (which it is by default), then fall back to the legacy file. If that exists, use it to _load_ the values, but don't use it as new save location!\r\n3. If neither the new nor the legacy files exist (or the legacy option is disabled), don't load anything, and continue to use the new locations for saving the prefs.\r\n\r\nThis ensures that legacy apps still benefit from the new locations, while keeping the old data. For example, `Lwjgl3Preferences` could be changed to something like this (I haven't tested it yet, but in theory this should work as intended):\r\n\r\n```java\r\npublic LwjglPreferences (FileHandle fileToLoad, boolean legacy) {\r\n\tthis.file = fileToLoad;\r\n\tif (!file.exists()) {\r\n\t\tif (legacy) { \/\/ fall back to the legacy file which was used before 1.10.1\r\n\t\t\tFileHandle legacyFile = new LwjglFileHandle(new File(\".prefs\", fileToLoad.name()), Files.FileType.External);\r\n\t\t\tif (!legacyFile.exists()) return;\r\n\t\t\tfileToLoad = legacyFile;\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tInputStream in = null;\r\n\ttry {\r\n\t\tin = new BufferedInputStream(fileToLoad.read());\r\n\t\tproperties.loadFromXML(in);\r\n\t} catch (Throwable t) {\r\n\t\tt.printStackTrace();\r\n\t} finally {\r\n\t\tStreamUtils.closeQuietly(in);\r\n\t}\r\n}\r\n```","I like this idea, only I want to avoid there being two copies of preferences floating around. It's not like it would use much disk space or anything, but it would be nice to avoid any scenarios where someone attempts to copy some game save data and ends up copying an old version of it instead because they looked in the wrong directory. I'll see what can be done another time, if that's okay.","was hoping this would have made it into the newly released 1.11.0  - any reason why it's not in yet? Seems to be a great solution, and it should also make Steam's  cloud-saving options possible which is my main interest in it :)","It would be nice for it to move old preferences to the new location, but I haven't yet put the time into investigating this and don't currently have heaps of spare time. Though that functionality could be added later, so I'd be quite happy with this being merged in its current state.","I think the upside of adding this change is much bigger than the downside of having an old pref file  (few kb?) floating around.  I'm pretty sure none of the players would complain about it, but they would certainly love the cloud-save functionality   (Steam can only include certain directories, and the old pref-location isn't one of them)\r\n","Since you are already touching this, did you consider isolating the settings of different games? Right now, two games could override each other's preferences if they choose the same preferences name by coincidence. This could be solved by creating a directory named after the package name of the game.","I feel like it should be up to the developer to decide how to uniquely-identify their preferences directory\/filenames, but if we were to do something about that I agree it would be easiest to change at the same time as the rest of this pull request. What does everyone else think?","I'd be ok with that, to be honest, I never thought about it in any of my games! So I can imagine that at some point, this could cause problems for users\/players.  So handling this automatically would certainly be a good thing for the players","I didn't think about it either when I implemented preferences for my game. I now tried to use a unique directory by  including a forward slash in the preferences name. This worked fine on desktop but caused an exception on Android. I guess in the current release I'd need to check the platform first which is pretty hacky.","I think that trying to separate preferences so they are guaranteed to be unique per-game is pretty much impossible, since a malicious or curious user could just rename a preferences folder to be what another game uses. Still, package names are unique enough to avoid accidental collisions, at least, and that's better than having some default name like \"game\" that everything uses unless it gets changed. My vote's for at least incorporating the package name of the main class (the current ApplicationListener, which can be retrieved from `Gdx.app.getApplicationListener()`) into the default preferences directory.","Any update on this making it into a new libgdx version?  ","If someone communicates what the schedule is (don't think there is one - this sort of thing really needs discussing when there can be over a year between releases) I may try and push for this, perhaps including the package name if that can be done without breaking everything, to be in the next release. More free time is on the horizon.","At the moment there isn't really a clear schedule. Regarding the PR itself: personally, I'm not a fan of including the package name in the config names, but I don't think it's that pressing of an issue anyways. The main thing that I'd change about the PR is the way legacy files are handled (see my comment [above](https:\/\/github.com\/libgdx\/libgdx\/pull\/6614#issuecomment-1073043666)). After we got that cleared up, we could go ahead and get this merged."],"labels":["enhancement","desktop","file handling"]},{"title":"NullPointerException on android.view.SurfaceHolder$Callback.surfaceChanged","body":"#### Issue details\r\nI'm using LibGDX with Android Live Wallpapers and got the NPE at 'onSurfaceChanged' of Wallpaper Engine. Since I'm not overriding this engine, and also based on the stack trace, the issue may be at AndroidWallpaperEngine's:\r\nhttps:\/\/github.com\/libgdx\/libgdx\/blob\/f50ea19c54d9f970e902d8e6a7d000976fc60eb9\/backends\/gdx-backend-android\/src\/com\/badlogic\/gdx\/backends\/android\/AndroidLiveWallpaperService.java#L335\r\n\r\n#### Reproduction steps\/code\r\nUnfortunately, the issue was found in a monkey test, so I cannot provide the required steps to reproduce the issue.\r\n \r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.12\r\n\r\n#### Stacktrace\r\n```java\r\n06-05 14:28:01.841  8360  8360 E AndroidRuntime: java.lang.NullPointerException: Attempt to invoke interface method 'void android.view.SurfaceHolder$Callback.surfaceChanged(android.view.SurfaceHolder, int, int, int)' on a null object reference\r\n06-05 14:28:01.841  8360  8360 E AndroidRuntime: \tat e.d.a.j.a.n$a.c(Unknown Source:65)\r\n06-05 14:28:01.841  8360  8360 E AndroidRuntime: \tat e.d.a.j.a.n$a.onSurfaceChanged(Unknown Source:96)\r\n...\r\nSkipping the rest of the stack trace, since it is not from LibGdx and unfortunately it is obfuscated.\r\n```\r\n#### Please select the affected platforms\r\n- [X] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["Did you make sure that the obfuscated class e.d.a.j.a.n actually is AndroidLiveWallpaperService?\r\n\r\nThere are no reproduction steps, but can you reproduce the issue when doing another monkey test, or was this a one time problem?\r\n\r\nThere are no maintainers using AndroidWallpapers at the moment. A null check never hurts but best is if you add the null-check yourself, test if it fixes your problem and open a PR.","This line is smelly:\r\n```\r\nLog.d(TAG, \" > AndroidWallpaperEngine - onSurfaceChanged() isPreview: \" + isPreview() + \", \" + hashCode()\r\n\t\t\t\t\t+ \", running: \" + engines + \", linked: \" + (linkedEngine == this) + \", sufcace valid: \"\r\n\t\t\t\t\t+ getSurfaceHolder().getSurface().isValid());\r\n```\r\n\r\n`getSurfaceHolder()` implementation may return `null` and in that case we'd get the NullPointerException.\r\n\r\n"],"labels":["bug","android","need more info"]},{"title":"3D particles are not visible through transparent renderables","body":"#### Issue details\r\nThis issue looks similar to #3742 , however, I can't confirm that for sure.\r\nThe problem is that PointSprite particles sometimes depending on camera angle are not visible behind the transparent models.\r\n\r\n#### Reproduction steps\/code\r\nI have created a simple [ParticleTransparencyTest](https:\/\/github.com\/JackRainy\/libgdx\/blob\/particlesTransparency\/tests\/gdx-tests\/src\/com\/badlogic\/gdx\/tests\/g3d\/ParticleTransparencyTest.java) to illustrate that.\r\nThe source code is in my branch of the fork: https:\/\/github.com\/JackRainy\/libgdx\/tree\/particlesTransparency\r\n![Screenshot 2021-06-24 01-36-25](https:\/\/user-images.githubusercontent.com\/27405436\/123176991-1e5fbc80-d48d-11eb-85b7-55359f947477.png)\r\nAs you can see on these examples: the far box is always non-transparent for the far particles. But the closer box is transparent for both middle and far particles.\r\nOn the left screen: the red particles are covered. On the right screen (after rotating the camera 180\u00b0): the blue particles are covered now.\r\n\r\nBeside this, I have tried to rebase and apply PR #4318 . Probably, I did some mistakes resolving conflicts during rebase, but the PR does not fix the issue. Also, the ParticleSystemBlendingTest (provided by the PR's author) fails as well.\r\n![image](https:\/\/user-images.githubusercontent.com\/27405436\/123177994-00935700-d48f-11eb-9cf5-f46456137c46.png)\r\nYou can see that red and blue particles closer in the center are also trimmed by transparent boxes, while the far red one is visible through it.\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nversion 1.10.0\r\n\r\n#### Please select the affected platforms\r\nI have seen this issue on both Windows and Android.\r\n","comments":["@JackRainy Hi, i rebased the PR #4318, i think it's OK now. It should fix your issue, make sure to enable splitRenderablesPerController for your pointSpriteParticleBatch.\r\n\r\nHowever the issue you pointed out about particles trimmed when rendered on top of transparent box is a known limitation. There's nothing we can do about it, it would require to merge both models and particles triangles and sort them CPU side before rendering. That would require a full rewrite of libgdx 3D batching and may have a lot of performance impacts.\r\n\r\nThe only workaround is to avoid transparent things inside or very close to other transparent things.","Thank you for the prompt feedback. \r\nI just took the latest rebased #4318 and it is still not working as I could expect.\r\n| splitRenderablesPerController = false | splitRenderablesPerController = true |\r\n|---|---|\r\n|  ![Screenshot 2021-06-24 21-35-46](https:\/\/user-images.githubusercontent.com\/27405436\/123315792-c8deea80-d534-11eb-9c94-79d88ecf98d5.png) | ![Screenshot 2021-06-24 21-36-19](https:\/\/user-images.githubusercontent.com\/27405436\/123315803-caa8ae00-d534-11eb-86bb-9c2c44652fc2.png) |\r\n\r\nProbably, it's the same trimming problem you mentioned. The trimming happens in different areas with regard to the option on\/off.\r\n\r\n>  it would require to merge both models and particles triangles and sort them CPU side before rendering.\r\n\r\nBeside this, I faced the issue with Decals. I assume the problem has the same origin.\r\nThere is a question on Stackoverflow regarding that: https:\/\/stackoverflow.com\/questions\/32287895\/libgdx-culling-between-modelinstances-decals\r\nI can't get Decals and Models sorted in one common batch, so the workaround for me is just not to use Decals at all but replacing them with other Renderables compatible with ModelBatch.","Yeah, that's the same problem. When rendering transparent things, they must be sorted back to front. When mixing particles, decals, and models, this can be hard to do.\r\nFor particles, this new splitRenderablesPerController option produce 1 renderable (or more) per particles group to be sorted by model batch. That works for most of cases. In your last screenshot, you can see on the left that it's mainly broken because all particles are rendered in one draw call. On the right, it's only broken for some edge cases (particles inside cubes). The test class includes both working cases and limited cases.\r\n\r\nFor decals, you need to group them as well, for instance you could render far ones (flushing DecalBatch), then render transparent models (flushing ModelBatch), then render front decals.\r\nIf things overlaps (eg. particles inside a transparent model), there is no acceptable solution.\r\n\r\nThat said, i think my PR fix your original scene. Is that the case?","Yes, thank you, @mgsx-dev, for the initial case, having the PR applied with `splitRenderablesPerController = true` it works like a charm!\r\n![image](https:\/\/user-images.githubusercontent.com\/27405436\/123325270-7e636b00-d540-11eb-8166-167f9199f5e0.png)\r\n\r\n"],"labels":["bug","3D"]},{"title":"Use proper preferences directories on desktop","body":"#### Issue details\r\nCurrently, by default, libGDX [Preferences](https:\/\/github.com\/libgdx\/libgdx\/wiki\/Preferences) are saved to `~\/.prefs` on Linux, which is nonstandard. The [XDG Base Directory](https:\/\/wiki.archlinux.org\/title\/XDG_Base_Directory) specification suggests that, to determine where to write configuration files to, programs should:\r\n- First try the environment variable `$XDG_CONFIG_HOME`.\r\n- If the environment variable is unset, default to `$HOME\/.config`.\r\n\r\nThis standard serves to make the home directory cleaner, and normalize the way different programs save their configurations.\r\n\r\nIf this is adopted in libGDX, it would likely be necessary to check the (then legacy) `~\/.prefs` path in addition to the above two paths, as to not break existing configurations.\r\n\r\nThis is somewhat similar to #6367, but not the same as this pertains to preferences rather than local storage.\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [X] Linux\r\n- [ ] MacOS\r\n\r\nThanks!","comments":["While at it, it'd also be cool to save prefs in %appdata% on windows and in ~\/Library\/Preferences on macos. As those are also more recommended to save program preferences in.","Yeah, preferences aren't usually needed by users as files, so having them in the APPDATA folder on Windows isn't a problem, and using the XDG folder on Linux would clean up the home directory nicely. I'll go with what @lyze237 says re: MacOS, because I don't use it.","So, looks like we just need some desktop devs that make it happen?","A few questions remain -- if the old preferences folder is present, we should probably use it, to avoid making saved data un-loadable. So I suppose this change only applies to new folders of preferences. We still need to check the old folder, but should it have precedence? Should the new folder be preferred, since it would have been written more recently if present?","I just googled and found this stack exchange answer, so took it from there. Up to you which one to pick: https:\/\/apple.stackexchange.com\/questions\/28928\/what-is-the-macos-equivalent-to-windows-appdata-folder\r\n\r\nIn unity they're stored in ~\/Library\/Preferences\/...\/ https:\/\/docs.unity3d.com\/ScriptReference\/PlayerPrefs.html so I think that's a good place to put them in!","taking the discussion off discord, i have so far\r\n\r\n```java\r\n\r\npublic class OsUtil\r\n{\r\n    private static String OS = System.getProperty(\"os.name\").toLowerCase();\r\n\r\n    static public boolean isAndroid = System.getProperty(\"java.runtime.name\").contains(\"Android\");\r\n    static public boolean isMac = !isAndroid && OS.contains(\"mac\");\r\n    static public boolean isWindows = !isAndroid && OS.contains(\"windows\");\r\n    static public boolean isLinux = !isAndroid && OS.contains(\"linux\");\r\n    static public boolean isIos = !isAndroid && (!(isWindows || isLinux || isMac)) || OS.startsWith(\"ios\");\r\n\r\n    static public boolean isARM = System.getProperty(\"os.arch\").startsWith(\"arm\") || System.getProperty(\"os.arch\").startsWith(\"aarch64\");\r\n    static public boolean is64Bit = System.getProperty(\"os.arch\").contains(\"64\") || System.getProperty(\"os.arch\").startsWith(\"armv8\");\r\n\r\n    public static boolean isGwt = false;\r\n\r\n    static {\r\n        try {\r\n            Class.forName(\"com.google.gwt.core.client.GWT\");\r\n            isGwt = true;\r\n        }\r\n        catch(Exception ignored) { \/* IGNORED *\/ }\r\n\r\n        boolean isMOEiOS = \"iOS\".equals(System.getProperty(\"moe.platform.name\"));\r\n        if (isMOEiOS || (!isAndroid && !isWindows && !isLinux && !isMac)) {\r\n            isIos = true;\r\n            isAndroid = false;\r\n            isWindows = false;\r\n            isLinux = false;\r\n            isMac = false;\r\n            is64Bit = false;\r\n        }\r\n   }\r\n\r\n    public static String getUserConfigDirectory()\r\n    {\r\n        return getUserConfigDirectory(null);\r\n    }\r\n\r\n    public static String getUserConfigDirectory(String applicationName)\r\n    {\r\n        String CONFIG_HOME = null;\r\n\r\n        if((CONFIG_HOME = System.getenv(\"XDG_CONFIG_HOME\"))==null)\r\n        {\r\n            if(isLinux || isAndroid)\r\n            {\r\n                CONFIG_HOME = System.getProperty(\"user.home\")+\"\/.config\";\r\n            }\r\n            else if(isMac)\r\n            {\r\n                CONFIG_HOME = System.getProperty(\"user.home\")+\"\/Library\/Preferences\";\r\n            }\r\n            else if(isIos)\r\n            {\r\n                CONFIG_HOME = System.getProperty(\"user.home\")+\"\/Documents\";\r\n            }\r\n            else if(isWindows)\r\n            {\r\n                if((CONFIG_HOME = System.getenv(\"APPDATA\"))==null)\r\n                {\r\n                    CONFIG_HOME = System.getProperty(\"user.home\")+\"\/Local Settings\";\r\n                }\r\n            }\r\n        }\r\n\r\n        if(applicationName==null || CONFIG_HOME==null) return CONFIG_HOME;\r\n\r\n        return CONFIG_HOME+\"\/\"+applicationName;\r\n    }\r\n\r\n    public static String getUserDataDirectory()\r\n    {\r\n        return getUserDataDirectory(null);\r\n    }\r\n\r\n    public static String getUserDataDirectory(String applicationName)\r\n    {\r\n        String DATA_HOME = null;\r\n\r\n        if((DATA_HOME = System.getenv(\"XDG_DATA_HOME\"))==null)\r\n        {\r\n            if(isLinux || isAndroid)\r\n            {\r\n                DATA_HOME = System.getProperty(\"user.home\")+\"\/.local\/share\";\r\n            }\r\n            else if(isMac)\r\n            {\r\n                DATA_HOME = System.getProperty(\"user.home\")+\"\/Library\/Application Support\";\r\n            }\r\n            else if(isIos)\r\n            {\r\n                DATA_HOME = System.getProperty(\"user.home\")+\"\/Documents\";\r\n            }\r\n            else if(isWindows)\r\n            {\r\n                if((DATA_HOME = System.getenv(\"APPDATA\"))==null)\r\n                {\r\n                    DATA_HOME = System.getProperty(\"user.home\")+\"\/Local Settings\/Application Data\";\r\n                }\r\n            }\r\n        }\r\n\r\n        if(applicationName==null || DATA_HOME==null) return DATA_HOME;\r\n\r\n        return DATA_HOME+\"\/\"+applicationName;\r\n    }\r\n\r\n}\r\n\r\n```","I like the idea here, but it overlaps a lot with the existing UIUtils. Maybe UIUtils could just call this, to avoid duplication, since this seems a little more robust. `isMOEiOS` should be moved to be next to the other isSomeOS fields, otherwise it isn't accessible -- unless you don't mean to expose whether the app is running with MOE or RoboVM, which seems like an important distinction in some cases. I like having a check for running on GWT, and this one makes sense to me (as much as anything GWT-related can). Generally, this seems useful for whenever a PR is written.","There's already checks for type of platform (`Gdx.app.getType()` and `UIUtils`) so in my opinion there's not really a reason to do that all again.\r\n\r\nAdditionally according to @crykn as this should be a change to desktop only, it should only be in the lwjgl3 backend in the Lwjgl3Preferences and not in core.","@lyze237 @crykn If it's in the LWJGL3 backend, it can only be used from that backend, which requires a lot more work to actually use in the core part of an app. Also, Lyze you're saying two opposite things -- there are already checks for the platform in core, but these checks don't belong in core...?","I agree with @lyze237. The backend\/platform can already be queried by calling `Gdx.app.getType()` and the OS can be determined via `UIUtils`, so there is no need for this class.\r\n\r\n> @tommyettinger: If it's in the LWJGL3 backend, it can only be used from that backend, which requires a lot more work to actually use in the core part of an app.\r\n\r\nWhy would the core part of the app need to know where the preferences are saved on desktop? I think this is an implementation detail of `Lwjgl3Preferences` (as well as `Lwjgl2Preferences` and `HeadlessPreferences`) and doesn't belong in core. \r\n\r\nAlso the Android and iOS stuff is unnecessary as those backends don't save their preferences in certain directories, but rather use some platform specific stuff, and in addition, I don't think [`System.getProperty(\"os.name\")` works on GWT](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/backends\/gdx-backends-gwt\/src\/com\/badlogic\/gdx\/backends\/gwt\/emu\/com\/badlogic\/gdx\/scenes\/scene2d\/utils\/UIUtils.java#L10-L16). \r\n\r\n> @tommyettinger: Also, Lyze you're saying two opposite things -- there are already checks for the platform in core, but these checks don't belong in core...?\r\n\r\nI think what Lyze meant is that there are already checks in core (i.e., `Gdx.app.getType()`, `UIUtils`) and that is all well, but the additional methods (`getUserDataDirectory`, `getUserConfigDirectory`) don't belong in core.\r\n\r\n","> I think what Lyze meant is that there are already checks in core (i.e., Gdx.app.getType(), UIUtils) and that is all well, but the additional methods (getUserDataDirectory, getUserConfigDirectory) don't belong in core.\r\n\r\nYeah exactly that, also those should be used instead of checking everything manually.\r\n\r\n> Why would the core part of the app need to know where the preferences are saved on desktop? [...] I don't think System.getProperty(\"os.name\") works on GWT.\r\n\r\nYeah same opinion on that.","Good catch on the `System.getProperty()`, and yeah I guess if the Preferences location is only used internally it can be inside the platform-specific parts. There's already platform-specific classes for the different Preferences where this could fit.","i have seen people posting on discord that they use Preferences in their apps.\r\n\r\nbut i think there is a important distinction here Platform vs Backend ... and the real problem that there is overlap here.\r\n\r\nfor some Backend equals Platform ... but on Desktop ? \r\n\r\njust playing Advocatus Diaboli again."],"labels":["desktop","file handling"]},{"title":"LWJGL3 backend ignores Windows 10 display scaling","body":"#### Issue details\r\nWhen attempting to use High DPI scaling in the LWJGL3 backend as described [in the wiki](https:\/\/github.com\/libgdx\/libgdx\/wiki\/Querying-and-Configuring-Graphics-%28monitors%2C-display-modes%2C-vsync%2C-display-cutouts%29#lwjgl-3-backend), the application doesn't take the Windows 10 display scaling factor into account. The methods `getHeight()` and `getBackBufferHeight()` report the same values for both `HdpiMode.Logical` and `HdpiMode.Pixels`, even if the scaling is set to a value larger than 100%.\r\n\r\nI found out that you can work around this by querying the scaling factor directly through GLFW:\r\n```java\r\nif (Gdx.app.getType() == Application.ApplicationType.Desktop\r\n\t&& System.getProperty(\"os.name\").startsWith(\"Windows\")) {\r\n\tLwjgl3Graphics graphics = (Lwjgl3Graphics) Gdx.graphics;\r\n\tlong hwnd = graphics.getWindow().getWindowHandle();\r\n\tfloat[] scaleX = new float[1];\r\n\tfloat[] scaleY = new float[1];\r\n\tGLFW.glfwGetWindowContentScale(hwnd, scaleX, scaleY);\r\n\t\/\/ If e.g. display scaling is set to 125%, scaleX and scaleY are 1.25f\r\n}\r\n```\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nlibGDX 1.10.0 with LWJGL3 backend\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [x] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["Hey @MontyHimself! \r\n\r\nYou're right, at the moment the window size of libGDX applications is completely unaffected by changing the display scaling on Windows. If we want the windows to scale accordingly, we'll have to activate the `GLFW_SCALE_TO_MONITOR` window hint (see `Lwjgl3Application#createGlfwWindow(Lwjgl3ApplicationConfiguration, long)`). This would lead to behaviour like this:\r\n\r\n- A window is created with the size 640x480 and the display scaling is set to 125%\r\n- Then `Gdx.graphics.getWidth()`\/`Height()` and `getBackBufferWidth()`\/`Height()` would both report 800x600; this is completely unaffected by the selected hdpi mode\r\n\r\nWhat we need to figure out\/decide is, whether (all of) those results are wanted\/we need to adapt anything and whether the auto-scaling should be enabled by default. ","I can confirm this also happens on Linux. `GLFW.glfwGetWindowContentScale(hwnd, scaleX, scaleY);` returns a scale of 2x2, but setting `config.setHdpiMode(HdpiMode.Logical);` or `config.setHdpiMode(HdpiMode.Pixels);` won't change the effective window size, so a 300x300 screen config will have `Gdx.graphics.getWidth\/Height()` return 300 in both cases","A workaround while this isn't working that doesn't require waiting for the application to be initialized:\r\n```java\r\n    public static void main(String[] arg) {\r\n        \/\/ called to force initialization of GLFW \r\n        Lwjgl3ApplicationConfiguration.getDisplayMode();\r\n        long monitor = GLFW.glfwGetMonitors().get(0);\r\n        float[] scaleX = new float[1];\r\n        float[] scaleY = new float[1];\r\n        GLFW.glfwGetMonitorContentScale(monitor, scaleX, scaleY);\r\n        System.out.println(\"Scale is \" + scaleX[0] + \"x\" + scaleY[0]);\r\n        Lwjgl3ApplicationConfiguration config = new Lwjgl3ApplicationConfiguration();\r\n        int width = (int) (300 * scaleX[0]);\r\n        int height = (int) (300 * scaleY[0]);\r\n        config.setWindowedMode(width, height);"],"labels":["bug","desktop","LWJGL3"]},{"title":"Moving music streaming to a thread for desktop","body":"This PR is an attempt to move music streaming to a thread for desktop backends. \r\nIt still a work in progress, it almost work as expected but there are some corner cases to fix, maybe i'll need to change the synchronization strategy.\r\n\r\nI only changed Lwjgl3 backend for now, i'll copy\/paste to lwjgl2 backend once it's all clear.\r\n\r\nI need to find time to finish it but i thought it was preferable to PR this WIP for discussion as a replacement of #6452. ","comments":["I need so hard this PR merged, having the same issues that origin this. What is the status of this? Need a hand?"],"labels":["enhancement","desktop","audio"]},{"title":"Support layer tint color for TiledMap ","body":"Tiled, in version 1.4, added an option called Tint Color ( https:\/\/doc.mapeditor.org\/en\/stable\/manual\/layers\/#tinting-layers ). This allows mapmakers to add a color that is multiplied into all tiles in the layer. Supporting this would be useful in libgdx.\r\n\r\nIt is stored as an attribute on the layer, not as a property, so both the map loader and renderers need to be made aware of it. As far as I can tell, the implementation as it's done within the Tiled editor itself would be as easy as multiplying by this tint color in this line in each renderer: https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/maps\/tiled\/renderers\/OrthogonalTiledMapRenderer.java#L69\r\n\r\nI haven't tested this out yet but that's the first thing I'm going to try. I plan on opening a PR when I get around to this but I wanted to open this issue to track it and give anybody the chance to weigh in before I do so.\r\n","comments":["It might make sense to change MapLayer's internal `opacity` float to be a full tint `Color`, using the Color's alpha as the actual opacity in the getter and setter. This would avoid an odd duplication of alpha variables, unless that duplication is also present in Tiled. It does seem useful to be able to tint layers.\r\n\r\n(I don't currently use Tiled, so feel free to disregard any suggestions I make.)","The duplication seems to be present in Tiled. There is an opacity float and a tint color, and they appear to be combined with multiplication within the editor.\r\n\r\nThe original author of the tint color PR did propose replacing the (older) opacity option with tint, but that's not how it's implemented as of now.  You can read the original discussion if interested: https:\/\/github.com\/mapeditor\/tiled\/issues\/2683"],"labels":["tilemap"]},{"title":"Wide FillViewport not centred to screen on high resolution iOS devices in portrait mode","body":"#### Issue details\r\n\r\nI've spotted a bug with FillViewport on iOS devices with very high resolutions. The bug occurs when displaying a very wide FillVieport on an iOS screen in portait mode. On higher resolution devices the FillViewport appears to be \"shifted\" to the left, instead of centred on the screen as expected.\r\n\r\nNB I am using Xcode Simulator for all of this testing. The physical devices I have available, iPhone 7 and iPad 9.7-inch do not show this bug.\r\n\r\nI was using a FillViewport with landscape world dimensions (e.g. 1280 x 720) on a game displayed in portrait mode on iOS devices. My intention was to show more of two banners to either side of the central game area on devices that are wider than a 9:16 aspect ratio in portrait mode (e.g. 3:4 iPads, or a 16:9 window on desktop). On desktop, Android devices in portait mode, and lower resolution iOS devices (e.g. iPhone 11, iPad (8th generation)) in portrait mode, the FillViewport is centred on the screen as expected. On higher resolution iOS devices like iPhone 12 Pro Max and iPad Pro (12.9-inch) (4th generation) the FillViewport appears to \"shift\" to the left.\r\n\r\n#### Reproduction steps\/code\r\n\r\nThe sample project at https:\/\/github.com\/anhinton\/FillViewportBug creates a 1280 x 720 FillViewport, and draws a texture to it which fills the entire Viewport. On iPhone 11 and iPad (8th generation) in portrait the texture in the Viewport is centred on the screen as expected. On iPhone 12 Pro Max and iPad Pro (12.9-inch) (4th generation) the FillViewport appears to \"shift\" to the left. The README for this project shows screenshots of the bug.\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.13 and 1.9.15-SNAPSHOT\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [x] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["Before you throw me to the lion's pit, this is **NOT** related to iOS recent Hdpi mode changes and happens, at least, since libGDX 1.9.10.\r\n\r\nI've done some digging and the issue occurs because the `width` on `glViewport()` calls is silently clamped to 2048 for some reason. The maximum `glViewport` size (`width`and `height`) is harware dependant and can be obtained calling `glGetIntegerv(GL20.GL_MAX_VIEWPORT_DIMS, intBuffer)`. On the devices the error is reproduced, that value is 4096 so no clamping should be happening.\r\n\r\nOne example of the glViewport() call that would display this behaviour may look like this:\r\n`glViewport(-1475, 0, 2148, 1366)`\r\n\r\nIf we modify the `worldWidth` of the `FillViewport` so that the `width` on the `glViewport` call decreases to 2048, the behaviour disappears which confirms the silent clamping.\r\n\r\nMaybe @mgsx-dev or somebody knowledgeable of OpenGL quirks can show us the light."],"labels":["bug","ios"]},{"title":"Android Insets not updated on 180\u00ba rotations","body":"User gerdsOn on Discord has reported that safe insets are not updated when rotating the device 180\u00ba on a landscapeSensor app. The reason is that `onSurfaceChanged()` is not triggered on that case because `width` and `height` don't change. This makes sense as, until recently, screens where symmetric. This issue probably occurs on `portraitSensor` as well.\r\n\r\nThe solution may be to move the insets update to a `DisplayListener.onDisplayChanged()` listener that is triggered on any orientation change including 180\u00ba (It is API > 17 but that's ok). A resize() should also be triggered on this case for the app to react to the change but we need to make sure it's not triggered twice for 90\u00ba rotations.\r\n\r\nRelevant SO post https:\/\/stackoverflow.com\/questions\/9909037\/how-to-detect-screen-rotation-through-180-degrees-from-landscape-to-landscape-or","comments":["\r\nIn libgdx , I start playing and learning, android is a bit more difficult:\r\n\r\n\"axisX = (int) (Gdx.input.getAzimuth())\r\n    Gdx.app.log(\"axisX\",String.valueOf(axisX));\""],"labels":["bug","android"]},{"title":"Queue Testing and Quality improvement","body":"In order to improve the test coverage of the code base of libGDX, this pull request is created. \r\nIn this pull request, the following has been done to the file `utils\/queue`:\r\n\r\n- Added\/Extended the test coverage \r\n- Removed commented code\r\n- Updated\/Improved the javaDocs\r\n- Minor static analysis upgrades\r\n\r\nThe code coverage has been improved as follows\r\n\r\n| File | Class, % | Method, %  | Line, % |\r\n| ------------- |:-------------:|:-----:|:-----:|\r\n| `utils\/queue` (old)   | 100% | 70% | 80% |\r\n| `utils\/queue` (new)      | 100% |   100% | 100% |","comments":["@ColinGeukes hey, thank you for this PR every test is very welcome.\r\nMy only concern with this PR is that there are lost of style changes.\r\nDo you mind using the lint command so we can review more easily?","@yuripourre Thank you very much for your input.\r\nI will apply the lint command in the next commit, \r\nhope that will fix the styling changes.","@yuripourre The libGDX formatter was applied to revert the style changes, only javadocs now start at a new line in the form of\r\n```\r\n\/** \r\n* JavaDoc\r\n*\/\r\n```\r\npreviously the file used the format of:\r\n```\r\n\/** JavaDoc *\/\r\n```\r\n\r\nShould I also revert that? It is not being applied by the formatter.","@ColinGeukes yes, please, only format lines you modified.","@mgsx-dev, @yuripourre The format changes have been reverted!","@mgsx-dev thank you very much with your input,\r\nit is my first merge request with an open source project, I am trying to adapt to the project.\r\n\r\n>  Sorry to be a bit rude and i don't want to discourage you.\r\n\r\nYour input really helps in delivering quality merge requests that fit the project.\r\n\r\n> Junits you added doesn't hurt though.\r\n\r\nAfter this merge request I will mostly focus on the addition of test cases instead of refactoring the documentation. \r\n\r\n> but i think it'd be better to focus on the part of libGDX that really miss documentation and tests. And i don't think collections are at the top priority.\r\n\r\nI understand that there is little gain in updating the text, so I am continuing with mainly improving the test coverage after this merge request. If an entire file lacks documentation I might update that as well.\r\n\r\nThank you so far for the input, I believe I have resolved \r\n\r\n\r\n\r\n\r\n","Do not add @Override, diamond operators, or other stylistic changes if they do not already exist in the class you are modifying.\r\n\r\nQueue is already thoroughly javadoc'ed before this PR, at least by my own rules. Javadoc is only used when it is needed. Adding javadoc to something that is already clear is not helpful (eg \"Sets the name.\" for a `setName` method). Using more words to say the same thing is not helpful. Specifying that a \"valid\" thing is created or returned is just fluff.\r\n\r\nTests are good, especially for collections. We could merge the Queue test, but not any of the changes to Queue (unless some useful change is hidden in the noise).","@NathanSweet I reverted ALL changes to the Queue.java. Even commented code is back."],"labels":["code quality"]},{"title":"Bullet FrustumCullingTest is broken (stack smashing detected)","body":"#### Issue details\r\nRunning Gdx test BulletTestCollection crash when running sub test FrustumCullingTest.\r\n\r\nI dig in history a bit and found #5555 that might be related since it happened between 1.9.8 and 1.9.9. Not sure, i'm not used to native compilation, maybe @PokeMMO and @NathanSweet have an idea about it?\r\n\r\nIt happens to me on Linux, i don't know if some have the issue on other platforms.\r\n\r\n#### Reproduction steps\/code\r\nRun BulletTestCollection and swipe the screen until FrustumCullingTest. Or directly access the sub test by changing [this array](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/tests\/gdx-tests\/src\/com\/badlogic\/gdx\/tests\/BulletTestCollection.java#L38) with only FrustumCullingTest class in it.\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\ni tried with several versions, it works with 1.9.8 and crash since 1.9.9\r\n\r\n#### Stacktrace\r\nJVM crash with following error : `*** stack smashing detected ***: \/usr\/lib\/jvm\/java-8-openjdk-amd64\/bin\/java terminated`\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [x] Linux\r\n- [ ] MacOS\r\n","comments":[],"labels":["bug","bullet"]},{"title":"getProgress is incorrect in AssetManager for TrueTypeFonts","body":"#### Issue details\r\nThe method getProgress in AssetManager is capable of returning 1.0 even when the loading queue is not empty.  The problem has to do with how True Type Fonts are loaded.  Loading the .ttf to create the .gen, and loading the .gen to create the Bitmap are separate loading operations.  Apparently only one of them counts against the variable `toLoad`.  However, the gen is apparently counted for `loaded`.  So the code thinks that loading is done, even when there is a non-empty loading queue (the bitmap font dependency) or when peakTasks > 0.\r\n\r\n#### Reproduction steps\/code\r\n\r\nThis is a race condition.  It is possible that you will get lucky and getProgress will work.  However, I have a project that loads fonts last, and 100% of the time the final font fails to load.  Either the loadQueue is not empty, or the task it running even though `toLoad == loaded`\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.14\r\n\r\n#### Stacktrace\r\nN\/A\r\n\r\n#### Please select the affected platforms\r\n- [x ] Android\r\n- [x ] iOS\r\n- [x ] HTML\/GWT\r\n- [x ] Windows\r\n- [x ] Linux\r\n- [x ] MacOS\r\n","comments":["Can you give an example code how you load the fonts?","I have a project that demonstrates it here:\r\n\r\nhttps:\/\/www.cs.cornell.edu\/courses\/cs3152\/2021sp\/materials\/demos\/Assets.zip\r\n\r\nI have created an AssetDirectory class, which is a subclass of AssetManager.  This allows you to specify all of your assets in a JSON for data-driven loading like this:\r\n\r\n```\r\n{\r\n    \"textures\": {\r\n        \"background\": \"images\/background.png\",\r\n        \"beam\": {\r\n            \"file\":     \"images\/beam.png\",\r\n            \"minFilter\": \"linear\",\r\n            \"magFilter\": \"nearest\"\r\n        }    \r\n    },\r\n    \"fonts\": {\r\n        \"times\": {\r\n            \"file\": \"fonts\/LucidaGrande.ttf\",\r\n            \"size\": 16\r\n        },\r\n        \"times\": {\r\n            \"file\": \"fonts\/TimesRoman.ttf\",\r\n            \"size\": 32\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe details of how this work are not that important (it uses a pluggable architecture like AssetManager to attach JSON parsers in addition to loaders).  But it reads the JSON file synchronously first and then queues up all of the contents asynchronously.  Right now, everything is loaded in order, so the fonts are loaded last.\r\n\r\nI do not query getProgress until after the JSON entries are queued, so that is not the issue. If I override `getProgress()` in `AssetManager` with this code:\r\n\r\n```\r\n (float)getLoadedAssets()\/(getLoadedAssets()+getQueuedAssets());\r\n```\r\n\r\nmy code works perfectly.  But if I comment that code out, it fails to load the final bitmap font 100% of the time on my MacBook Pro.  Debugging shows that the AssetDirectory\/AssetManager thinks it is finished because toLoad == loaded,\r\nhowever either the dependency queue or the loading queue is not empty.","It's not easy to see where the problem is from the description. I haven't tried the repro, but it sounds a bit involved. If you have a proposed fix, it is likely easier to evaluate, otherwise we'll have to wait until someone has time to repro and investigate further.","I agree.  I have not had time to go deep into AssetManager to figure it out.  It does seem to have something to do with the way that the variables `toLoad` and `loaded` are updated with respect to dependencies (e.g. assets that depend on a secondary asset that is not already loaded first, but implicitly loaded on the request for the original).  That is why I initially felt it was a bigger problem and not just with TrueType fonts (though that is the easiest way to queue a dependent asset).\r\n\r\nPart of me wonders it if its because my code calls load on AssetManager in an actual loading thread (e.g. I load a JSON in a JSON loader task which then queues up other tasks).  But everything appears to be thread safe and I am not doing anything that would require the main render thread context.\r\n\r\nFor now, I have been working around it by making getProgress to be the code I mentioned earlier:\r\n\r\n```\r\n    public synchronized float getProgress () {\r\n        \/\/ This is a workaround for the problem with getProgress in AssetManager\r\n        if (getLoadedAssets() == 0) { return 0.0f; }\r\n        return (float)getLoadedAssets()\/(getLoadedAssets()+getQueuedAssets());\r\n    }\r\n```\r\n\r\nThis causes a view hiccups if you use this to generate a loading progress bar, because queue assets counts thread tasks that do not materialize into a loaded asset.  But has the benefit that it never hits the value 1 early.","Looking quickly at the code for AssetManager I see something that MAY be at fault.  Dependencies are handled by `injectDependency`.  This method does not call `load`.  Instead it calls `addTask` directly without incrementing `toLoad`.  However, the variable `loaded` is updated in `updateTask` which depends on the task queue.  So you have a task in the queue which does not update `toLoad`, but does update `loaded`.  This would cause a mismatch."],"labels":["bug","fonts"]},{"title":"implement loading Tiled Point objects","body":"This pull request adds Tiled Point objects (https:\/\/doc.mapeditor.org\/en\/stable\/reference\/tmx-map-format\/#point).\r\n\r\n As of now, TmxMapLoader parses points into rectangles with zero width\/height. This behavior is probably fine as it is, but one could argue that it's counter-intuitive and non-explicit, so, here we are.\r\n \r\n It's also a breaking change for all the people who rely on that their points are parsed into zero-sized rectangles. So, if this PR has any value, I'm open to suggestions on how to work around that.\r\n \r\n TiledMapObjectLoadingTest is updated to reflect a new type of objects.","comments":["You have to add the `PointMapObject` to this file for gwt:\r\nhttps:\/\/github.com\/libgdx\/libgdx\/blob\/3d1f76f574bec71afc8e2e9afa38ec7e83d944f1\/gdx\/res\/com\/badlogic\/gdx.gwt.xml#L296-L303","@SimonIT fixed, thank you","I think it's good to have it but considering it's a breaking change without much value for now, i propose to merge it when we will implement some other big changes related to Tiled 1.x (eg. infinite map support, template support) and\/or a new major version of libGDX."],"labels":["breaking change","tilemap"]},{"title":"Android clipboard throws exception on some devices","body":"#### Issue details\r\nSome Android devices throw an exception when calling `Gdx.app.getClipboard().setContents`.\r\n\r\n#### Reproduction steps\/code\r\nThis is not reproducible in all devices. We are also not getting exceptions in our Google Play Console. We know this is happening because we have a  `UncaughtExceptionHandler` that logs to our servers. The app doesn't seem to crash as well (the exception is swallowed?).\r\n\r\nThe `Build.MODEL` and `Build.VERSION.SDK_INT` logged for the exceptions we collected are:\r\n\r\nSM-G530M v19\r\nSM-G530H v19\r\nSM-G360BT v19\r\n(I will add more to this list if we see new devices)\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.12\r\n\r\n#### Stacktrace\r\n```java\r\nException: java.lang.RuntimeException: \r\n\r\nCan't create handler inside thread that has not called Looper.prepare()\r\nat android.os.Handler.<init>(Handler.java:200)\r\nat android.os.Handler.<init>(Handler.java:114)\r\nat android.widget.Toast$TN.<init>(Toast.java:372)\r\nat android.widget.Toast.<init>(Toast.java:105)\r\nat android.widget.Toast.makeText(Toast.java:264)\r\nat android.widget.Toast.makeText(Toast.java:313)\r\nat android.content.ClipboardManager.setPrimaryClip(ClipboardManager.java:143)\r\nat com.badlogic.gdx.backends.android.AndroidClipboard.setContents(SourceFile:2)\r\n...\r\nat com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener$1.tap(SourceFile:2)\r\nat com.badlogic.gdx.input.GestureDetector.touchUp(SourceFile:17)\r\nat com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener.handle(SourceFile:11)\r\nat com.badlogic.gdx.scenes.scene2d.Stage.touchUp(SourceFile:21)\r\nat com.badlogic.gdx.InputMultiplexer.touchUp(SourceFile:3)\r\nat com.badlogic.gdx.InputMultiplexer.touchUp(SourceFile:3)\r\nat com.badlogic.gdx.backends.android.DefaultAndroidInput.processEvents(SourceFile:29)\r\nat com.badlogic.gdx.backends.android.AndroidGraphics.onDrawFrame(SourceFile:38)\r\nat android.opengl.GLSurfaceView$GLThread.guardedRun(GLSurfaceView.java:1531)\r\nat android.opengl.GLSurfaceView$GLThread.run(GLSurfaceView.java:1248)\r\n```\r\n\r\n#### Please select the affected platforms\r\n- [X] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n\r\nLet me know if you need more info. Thanks!","comments":["Seems Samsung was (on v19) unsafely showing a Toast message from the ClipboardManager by assuming that setPrimaryClip will always be called on the main thread. I suppose we could force this to the main thread - though it doesn't seem to be a widespread issue."],"labels":["android"]},{"title":"libGDX does not use the recommend directories for local storage on desktop.","body":"Good evening,\r\n\r\nCurrently libGDX does not follow best practices to store local files (those accessed via `Gdx.files.local`) on the desktop operating systems. Currently, it seems to just use the working directory. I would like to purpose changing libGDX to use the correct directory for the operating system. It would use the AppData folder on Windows, the correct folder for Mac, and for Linux we can probably keep the same behavior. I would hope that most developers did not write their code with the assumption that internal files and local files are both in the same path since this change would likely break any code that makes that assumption. To get around that, we could have it so that by default libGDX uses the current behavior but can optionally be switched to follow the best practices for the operating system. Perhaps a function called `setStorage` can be added to the `ApplicationConfiguration` class? This function would take a boolean as a parameter and when set to true, it would use the AppData folder instead of what it currently does.\r\n\r\nI would be willing to take the time to implement this code but I only have a Windows machine and a Ubuntu machine. I would need someone with a Mac to test.\r\n\r\nIs this something that I should pursue or that the greater community is interested in? ","comments":["I think many games actually would prefer using the current working directory for local files, since AppData is a hidden folder by default on Windows. Many users who might want to access a locally-saved backup or some other locally-written file could lack the knowledge or permissions to access their AppData folder. I think if there is a change, there needs to be a way to configure the location, as with the suggested `setStorage`. There might be benefits to having presets for the appropriate AppData subfolder (which might already be used by Preferences, but I'm not sure), the current working directory, and maybe a temp folder. I think the default should remain as-is, but by having the configurable `setStorage`, games can save files hopefully more how they want to."],"labels":["desktop","file handling"]},{"title":"Add faster ray aabb intersection","body":"The proposed method is borrowed from the book \"Real-Time Collision Detection By Christer Ericson\".\r\n\r\nThis algorithm is around 20% faster than the current algorithm.","comments":["any copyright\/licence for the source you copied from?","@mgsx-dev I've just made the changes based on your comments. About the copyright I searched a lot in the book but didn't find anything related to the codes.","considering this algo is very close to what we already have in intersectRayOrientedBoundsFast, let say we took inspiration from there ;-).\r\n\r\nFYI, when there is no licence or copyright notice, it's copyrighted by default."],"labels":["enhancement","math"]},{"title":"Tab character is displayed","body":"#### Issue details\r\nI am creating text that contains a tab character (\\u0009).\r\nText used in: Label.\r\n\r\nI see good work with space characters, newline characters, etc.\r\nBut instead of a tab character, I see a rectangle (an \"unknown character\" marker).\r\nI want to see only empty space.\r\n\r\n#### Reproduction steps\/code\r\nI use Verdana.ttf. And roughly the following code: \r\n\r\n```\r\n\tval parameters = FreeTypeFontGenerator.FreeTypeFontParameter()\r\n\tparameters.size = 16\r\n\tparameters.characters = ... + \"\\t\" \/\/ I try manually add tab and try no add\r\n\tFreeTypeFontGenerator(Gdx.files.internal(\"Verdana.ttf\")).generateFont(parameters)\r\n```\r\n\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\ngdxVersion: '1.9.11'\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [X] Linux\r\n- [ ] MacOS\r\n\r\n#### PS\r\n\r\nAs far as I suspect, the tab character has a non-zero height in the font (as opposed to the space character). Probably the problem is related to this. It probably makes sense to handle special characters in a special way. Probably in some fonts they may be drawn differently, or ignored.\r\n\r\nplatofrm: java (desktop app on linux)\r\n\r\n","comments":["So... the tab character is definitely a \"special\" character. Probably the most helpful suggestion I can give is to replace any tabs in your Label text with the desired amount of spaces (maybe 2, 4, or 8), and hope you don't need tab stops. The problem, I think, is that tab is a control character that renders differently depending on context; text editors allow setting tab width, and word processors allow specifying tab stops. I don't think libGDX has any way of specifying either tab width or tab stops, so tab just becomes an unknown or unknowable character when rendered. This might be a limitation of FreeType or of the libGDX BitmapFont\/Label code, I don't really know. The good news is that if your tabs are all in a file of the game's text (such as an I18N bundle), it should be a quick step to replace `\\t` (the tab character itself) or `\\\\t` (an escaped tab) with, say, `    ` (four spaces). It is far from ideal, but it should look better than the unknown character glyph."],"labels":["core","fonts"]},{"title":"Lwjgl3 backend fails to request rendering","body":"I haven't tested this, but noticed in the source code that [`Lwjgl3Application.postRunnable()`](https:\/\/github.com\/libgdx\/libgdx\/blob\/6b7c194085baf4b5ec7b7231024a143429a24bf4\/backends\/gdx-backend-lwjgl3\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3Application.java#L344) does not request rendering like it's supposed to. The RoboVM, Android, and Lwljgl backends do request rendering. Gwt doesn't support non-continuous rendering.\r\n\r\nI don't have time to implement this and also test it in the near future, but will come back to it in a couple months if no one else grabs it. Just wanted to put the issue here before I forget about it.","comments":[],"labels":["bug","LWJGL3","graphics"]},{"title":"GWT reflection bug\/limiation with final fields (eg. TiledDrawable)","body":"#### Issue details\r\nWhen a class has a final field, JSON loading works on Desktop but crash for GWT. Reproduction steps below illustrate the issue.\r\n\r\nI tried to fix it by adding a setter to the class, same error.\r\nI tried to remove the final modifier, it works. (it works without the setter as well)\r\n\r\nI investigated a bit in ReflectionCacheSourceCreator and Reflection stuff (in GWT emu source) but i'm a bit lost, i suspect something around [here](https:\/\/github.com\/libgdx\/libgdx\/blob\/d5f083e37a40ed9810b0b65b61891a58fe73e946\/backends\/gdx-backends-gwt\/src\/com\/badlogic\/gwtref\/gen\/ReflectionCacheSourceCreator.java#L915), setter doesn't seem to be generated for final fields which is conceptually reasonnable. Probably a libgdx\/gwt limitation, i'm not sure.\r\n\r\nMy best guess is that @NathanSweet have knowledge about this bug\/limitation, could you please enlight me about this?\r\n\r\nA quick workaround could be to remove final modifier for TiledDrawable#color but i think it'd be great to have a more general solution for user code as well.\r\n\r\n#### Reproduction steps\/code\r\nDeclare a TiledDrawable with a color in your skin file : \r\n```\r\nTiledDrawable: {\r\n\ttiledExample: { region: default-round, scale: 0.5, color: { r: 1.0, g: 0.5, b: 0.2, a: 1.0 } },\r\n}\r\n```\r\nLoad the skin : \r\n* on desktop it works, you can get the drawable and use it, all goes well.\r\n* on GWT it crash at loading time : \r\n```\r\nError reading file: data\/uiskin.json\r\nError reading file: data\/uiskin.json\r\nError accessing field: color (com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable)\r\nCould not set class com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable#color: Missing setter-stub 1795 for field color\r\n```\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.13-SNAPSHOT\r\nand probably previous versions as well\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS\r\n- [x] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["I've \"assigned\" NathanSweet to this because I don't know who else might have expertise on the combination of JSON\/reflection\/scene2d topics. The GWT component of the issue makes things more complicated, though. I think the Json documentation, maybe just in the wiki, already says to prefer public non-final fields, so removing the `final` modifier may simply be the correct choice here. It would be optimal to have one Color and call its `Color.set(Color)` method in a setter, but that seems to not work on GWT?","Oops, I missed the @ back in 2020, sorry.\r\n\r\nField `setAccessible` is what allows a final field to be changed (and also allows setting private\/protected\/default access fields). It's fair to rely on this if you know how your code will run. If you don't, then your fields shouldn't be final -- eg, a security manager may disallow `setAccessible` and the Json class will skip the field. GWT seems to fail in a different way, so it's probably a deficiency of GWT.\r\n\r\nSince we don't know the environment scene2d.ui stuff will be run, we could be paranoid and avoid relying on `setAccessible`. This would require making fields public, which isn't great, so I'd say scene2d.ui is going to have to rely on `setAccessible`.\r\n\r\nIt doesn't necessarily have to rely on setting final fields though. We could either fix GWT, if that is possible (I have no experience with it and looking at it, it's pretty gnarly), or remove final from libgdx classes intended to work with the Json class. Is it just TiledDrawable or do other classes also need treatment @mgsx-dev?","It seems like if a setter exists, it should probably be used -- that would allow keeping the field as `final` if the setter just mutates its contents. I don't know why the setter wouldn't be picked-up here.","I am sure the suppression of a setter stub for final fields was simply for 'correctness' and not really a limitation of GWT."],"labels":["gwt"]},{"title":"Add support for LWJGL3 inside an AWT Canvas","body":"Currently using a snapshot version of https:\/\/github.com\/LWJGLX\/lwjgl3-awt since MacOS Support is not released yet.\r\n\r\nWork in Progress! Just opened the PR to be able to discuss issues I encounter.\r\n\r\nFixes #6190","comments":["I just experimented a bit with ParticleEditor: moving `setVisible(true);`out of the `EventQueue.invokeLater()` block (like [here](https:\/\/github.com\/crykn\/libgdx\/blob\/49f3e4614808752781e62ef333a6f2bfa8ad494a\/extensions\/gdx-tools\/src\/com\/badlogic\/gdx\/tools\/particleeditor\/ParticleEditor.java#L89-L109)) seems to decrease the chances of the positioning issue happening considerably. ","> * TexturePackerTest throws the following error: \u2028  `Assertion failed: (shape[0] == SHAPE_START), function assert_check_shape, file \/AppleInternal\/BuildRoot\/Library\/Caches\/com.apple.xbs\/Sources\/CoreGraphics\/CoreGraphics-1355.22\/CoreGraphics\/Regions\/shape.c, line 161.`\r\n\r\nThis is caused by a missing -XstartOnFirstThread, that Lwjgl3Application needs. I have replaced it with Lwjgl3AWTFrame now, that doesn't need this parameter, since AWT is doing the correct stuff there for us.\r\n\r\nI don't know what all this tools are supposed to do, so I haven't tried them, though. \ud83d\ude48 ","> * `ParticleEditor` does render its stuff, which is good. However,  if another window is focused (i.e. clicked) before ParticleEditor fully opens, the lwjgl panel is rendered at the wrong location (top left).\r\n> * Rendering in `Hiero` works as well, but the lwjgl rendering always happens at the wrong position (maybe because of its splash screen?)\r\n> * `Flame` renders its output as expected, but the lwjgl panel is in the top left, so the wrong position issue can\u2019t happen here.\r\n\r\nThe wrong position should be fixed now.\r\n\r\n(Waiting for https:\/\/github.com\/LWJGLX\/lwjgl3-awt\/pull\/34 to be merged, currently using a jitpack build.)","@crykn I have checked the 1.8 language level again.\r\n\r\n* gdx-tools needs 1.8, since it is now based on lwjgl3, which needs 1.8\r\n* gdx-tests has a dependency on gdx-tools, for the `BitmapFontWriterTest`\r\n* the other test projects depend on gdx-tests\r\n\r\nSo if we could move BitmapFontWriterTest somewhere else, most of the language levels could stay on 1.7. I don't know if and where to move it though. :shrug: \r\n\r\nI have added commit 36d51e0003ce2909d2a0b6ae13926dc389c82bb9 to show how it would look like, if the `BitmapFontWriterTest` would be removed.","Hey @tisoft! I haven't had time yet to look at your recent changes, but they seem rather promising! Regarding the language levels:\r\n\r\n- We can't avoid raising `gdx-tools`' source level when using LWJGL3, so that is fine. Also, if any third-party projects are depending on gdx-tools those should be desktop projects anyway and on desktop Java 8 is no problem.\r\n- Changing the source level of `gdx-tests` looks fine to me as well, because no end-user should depend on those projects. And I'd like to avoid moving BitmapFontWriterTest, since at the moment _all_ tests are in gdx-tests.\r\n- However, I don't know whether the Android & iOS tests are affected by changing the source level (maybe @PokeMMO, @obigu or any of the others could chime in on this). But they seem to compile, so I don't think there'll be any issues.","Since everything now works for me \u2122\ufe0f , I think this is ready for review.\r\n\r\nIt's not ready for merge until the lwjgl3-awt project has merged https:\/\/github.com\/LWJGLX\/lwjgl3-awt\/pull\/34\r\n\r\nI tested this on Linux and macOS 10.15 with different java versions, but would really appreciate more testing.","> * However, I don't know whether the Android & iOS tests are affected by changing the source level (maybe @PokeMMO, @obigu or any of the others could chime in on this). But they seem to compile, so I don't think there'll be any issues.\r\n\r\nI'm not 100% sure of the consequences of setting source level to 8 on android-tests or ios-tests tests while having their platform dependencies on 6, my instinct says it's not a good idea and that we may regret it in the future. Android and Java 8 have some peculiarities and given that we have min SDK 14 we may come across funny lint errors. If the reason for this is just 1 test, I'd rather temporarily not support that test on Android and iOS (until we move to Java 8).\r\n","@crykn I think I fixed all review comments. Only missing is the merge and release of https:\/\/github.com\/LWJGLX\/lwjgl3-awt\/pull\/34","Lwjgl3-awt 0.1.8 has been released, so from my point of view, this could be merged now. \ud83e\udd73 ","Hey @tisoft,\r\n\r\nlast nitpick, I promise: could you add key codes for `CAPS_LOCK`, `PAUSE` (aka Break), `PRINT_SCREEN`, `SCROLL_LOCK`, `F13` to `F24`, `NUMPAD_DIVIDE`, `NUMPAD_MULTIPLY`, `NUMPAD_SUBTRACT`, `NUMPAD_ADD`, `NUMPAD_DOT`, `NUMPAD_COMMA`, `NUMPAD_ENTER`, `NUMPAD_EQUALS`,  `NUM_LOCK` and `NUMPAD_LEFT_PAREN`, `NUMPAD_RIGHT_PAREN` to Lwjgl3AwtInput? Those were recently introduced with libGDX 1.9.13. Basically, you need to port the changes made to LwjglAwtInput in these three commits (2437e2afe35337e6f7772321e29ca06e1f407231, 325c6386328a3066bed47cc621bc8b993d4e2c7c, 4648b1ca6d63e7b88b6ec7c48ab59ca7f279161f) to Lwjgl3AwtInput.\r\n\r\nApart from that, as we already talked about, I'm not really sure about the `fetch.xml` changes, as build stuff isn't my forte, but maybe one of the others can chime in here.\r\n\r\nOtherwise, I think this is good to merge. I wasn't able to test the functionality of all classes in gdx-tools (looking at you `TiledMapPacker`), because I'm not really familiar with their workings in the first place. But all the visual tools started up and rendered correctly and that is also the area where this PR really changed stuff.\r\n\r\n**Thanks a lot for all the work you put into this! It is very nice to see macOS support for Hiero, Particle Editor, etc. to be finally back.**","@crykn I have added the key bindings, rebased and extended AbstractGraphics.\r\n\r\nShould be ready now. Might need a little squashing though. :smiling_imp: ","- rebased to curent master\r\n- extended AbstractInput\r\n- squashed commits and splited in two semantically meaningful commits","First of all thank you for the effort on this PR.\r\n\r\nI've tested building and running the tools on Windows. On both Particle Editors (2D and 3D), the preview window (I think it's the canvas) blinks lile crazy (I can provide a video if you need it). I haven't been able to test Hiero because there's currenlty an issue that makes it crash at startup but it's unrelated to this RP.","Thanks for testing in windows. Unfortunately I don't have a windows system here, so I can't reproduce the error easily. I'll try it in a VM.","Ah darn. Now it no longer misbehaves on macOS but does so on Windows, it seems. Looking back; I seem to remember that it didn't flicker on Windows before your positon fix. I somehow missed to test the PR on Windows after this change. \r\n\r\n[This](https:\/\/github.com\/LWJGLX\/lwjgl3-awt\/blob\/main\/test\/org\/lwjgl\/opengl\/awt\/AWTTest.java) lwjgl3-awt test runs fine on Windows btw, so it seems like the issue is in libGDX code.\r\n\r\nThe Hiero issue with this PR is actually separate to the one @obigu mentioned (which, on another note, I can't reproduce, so it is probably caused by one of the installed fonts). Hiero crashes with this PR, because \"No context is current or a function that is not available in the current context was called.\" See the full stacktrace below:\r\n\r\n<details>\r\n  <summary><b><i>Click to show full log<\/i><\/b><\/summary>\r\n\r\n```\r\n> Task :extensions:gdx-tools:Hiero.main() FAILED\r\nFATAL ERROR in native method: Thread[AWT-EventQueue-0,6,main]: No context is current or a function that is not available in the current context was called. The JVM will abort execution.\r\n\tat org.lwjgl.opengl.GL11C.nglGenTextures(Native Method)\r\n\tat org.lwjgl.opengl.GL11C.glGenTextures(GL11C.java:664)\r\n\tat org.lwjgl.opengl.GL11.glGenTextures(GL11.java:2492)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3GL20.glGenTexture(Lwjgl3GL20.java:348)\r\n\tat com.badlogic.gdx.graphics.Texture.<init>(Texture.java:142)\r\n\tat com.badlogic.gdx.graphics.g2d.PixmapPacker$Page$1.<init>(PixmapPacker.java:504)\r\n\tat com.badlogic.gdx.graphics.g2d.PixmapPacker$Page.updateTexture(PixmapPacker.java:504)\r\n\tat com.badlogic.gdx.graphics.g2d.PixmapPacker.updatePageTextures(PixmapPacker.java:410)\r\n\tat com.badlogic.gdx.graphics.g2d.PixmapPacker.updateTextureRegions(PixmapPacker.java:402)\r\n\tat com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator.generateData(FreeTypeFontGenerator.java:464)\r\n\tat com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator.generateFont(FreeTypeFontGenerator.java:161)\r\n\tat com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator.generateFont(FreeTypeFontGenerator.java:152)\r\n\tat com.badlogic.gdx.tools.hiero.unicodefont.UnicodeFont.setRenderType(UnicodeFont.java:647)\r\n\tat com.badlogic.gdx.tools.hiero.Hiero.updateFont(Hiero.java:315)\r\n\tat com.badlogic.gdx.tools.hiero.Hiero$3.valueChanged(Hiero.java:439)\r\n\tat javax.swing.JList.fireSelectionValueChanged(JList.java:1802)\r\n\tat javax.swing.JList$ListSelectionHandler.valueChanged(JList.java:1816)\r\n\tat javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:184)\r\n \tat javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:164)\r\n\tat javax.swing.DefaultListSelectionModel.fireValueChanged(DefaultListSelectionModel.java:211)\r\n\tat javax.swing.DefaultListSelectionModel.changeSelection(DefaultListSelectionModel.java:405)\r\n\tat javax.swing.DefaultListSelectionModel.changeSelection(DefaultListSelectionModel.java:415)\r\n\tat javax.swing.DefaultListSelectionModel.setSelectionInterval(DefaultListSelectionModel.java:459)\r\n\tat javax.swing.JList.setSelectedIndex(JList.java:2216)\r\n\tat javax.swing.JList.setSelectedValue(JList.java:2366)\r\n\tat com.badlogic.gdx.tools.hiero.Hiero.<init>(Hiero.java:190)\r\n\tat com.badlogic.gdx.tools.hiero.Hiero$21.run(Hiero.java:1591)\r\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)\r\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:758)\r\n\tat java.awt.EventQueue.access$500(EventQueue.java:97)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:709)\r\n\tat java.awt.EventQueue$3.run(EventQueue.java:703)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n \tat java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:74)\r\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:728)\r\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:205)\r\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)\r\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)\r\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)\r\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:82)\r\n```\r\n<\/details>\r\n\r\n","Hey @tisoft, did you get the chance to try Lwjgl3AwtCanvas in a Windows VM?","I have rebased against current master. Unfortunately I could not get it to work in windows inside a VM, so the flickering is probably still there. Could anyone look into the windows flickering issue?","Rebased again against master. I still can't test\/debug on windows. Would it be better to split the PR? One PR for the addition of the Lwjgl3AWTCanvas, which would not break anything existing. And another PR, that contains the changes of the tools project, which could possibly break, especially on windows, as I can't test there?","Hm, I'm not sure. The Windows issue also happens with `Lwjgl3AWTCanvas` itself (for example in `Lwjgl3AWTCanvasTest` and `Lwjgl3AwtTestStarter`), so this wouldn't really help with the underlining \"problem\" of this PR. But if you want to do it for the sake of better readability, sure, feel free to go ahead.","I've had a quick test of this on Linux. I see the discussion about flickering above. While I haven't tested on Windows, I can get some flicker on resize, though not enough for it to really be an issue. The bigger issue is I managed to get an old copy stuck in one of my buffers, which could render an application unusable until restarted.\r\n\r\nBelow is a GIF played at 1\/6th speed to clearly demonstrate the issue. It's inside a spoiler thingy because it's quite distracting. The black flicker I'm referring to affects the entire window on frame 6 - other blackness on resize is normal.\r\n\r\n<details>\r\n<summary>GIF<\/summary>\r\n\r\n![](https:\/\/user-images.githubusercontent.com\/60154347\/129609260-f196f765-7b52-4b22-973e-7840b6f99308.gif)\r\n\r\n<\/details>\r\n\r\nAdditionally, closing a test crashes the whole thing, but I expect that's due to it creating an additional window and mightn't be an issue someone would have if their game was developed with AWT from the start. Not many games use multiple windows anyway.\r\n\r\n```\r\nX Error of failed request:  RenderBadPicture (invalid Picture parameter)\r\n  Major opcode of failed request:  139 (RENDER)\r\n  Minor opcode of failed request:  7 (RenderFreePicture)\r\n  Picture id in failed request: 0x200004d\r\n  Serial number of failed request:  1178\r\n  Current serial number in output stream:  1185\r\nAL lib: (EE) alc_cleanup: 1 device not closed\r\n```\r\n\r\nNone of the above issues happen when running a non-AWT LWJGL3 application.","Hey, is this issue still being worked on? It looks like most of the work is already done.","Hey there, is this feature considered to be merged any time soon? I would love to see an AWT integration for LWJGL3","What features\/bug fixes are missing for this PR, I might be able to help here :)? ","@undefinedhuman There's the flickering issue on Windows (see above comments), and in the meantime, some git conflicts popped up. It seems crykn made some improvements tisoft\/libgdx#1, which tisoft didn't merge"],"labels":["LWJGL3","GL","tools"]},{"title":"Cache FileType","body":"* Android is relative to Context#getCacheDir()\r\n  * See https:\/\/developer.android.com\/reference\/android\/content\/Context#getCacheDir()\r\n* iOS is relative to <Application_Home>\/Library\/Caches \r\n  * See https:\/\/developer.apple.com\/icloud\/documentation\/data-storage\/index.html\r\n* Desktop is relative to application's root directory + \/cache\r\n\r\nDesktop might be better to use a proper temporary folder, but a subfolder is much simpler. Finding a proper temporary folder in Windows\/Linux\/macOS which have a similar semi-persistent nature is probably more work than it is worth.","comments":["I suppose this addition is mostly useful for mobile platforms, so I'm not really in a position to judge how often it is needed and whether it makes sense to include this in libGDX. However, some thoughts regarding the desktop implementation:\r\n- Just using the application's root dir + `\/cache` is not really satisfying\r\n- Using a temporary folder (maybe via `System.getProperty(\"java.io.tmpdir\")`) has the problem that (at least on Linux) this folder is emptied on reboot. And then what's the point in having a cache?\r\n- Using some other (semi-)permanent location sounds like the best solution: on Windows we could use `%localappdata%`; on macOS `\/Library\/Caches` in the user's home dir; on Linux [this repo](https:\/\/github.com\/harawata\/appdirs\/blob\/master\/src\/main\/java\/net\/harawata\/appdirs\/impl\/UnixAppDirs.java#L49) suggests looking for the `XDG_CACHE_HOME` env var and then falling back to `\/.cache` in the user's home dir (however, according to a quick google search some distros seem to be using `\/var\/cache` as well)","There's some issues in finding a persistent directory for linux\/macos\/windows due to this code being in the framework.\r\nSimply using appdata or something similar would cause all libgdx games\/apps to share a cache folder.\r\n\r\nOn a related note, this is exactly what happens with Preferences in libgdx, unless you change the config in Lwjgl(3)ApplicationConfiguration\r\n\r\nhttps:\/\/github.com\/libgdx\/libgdx\/blob\/bc314368a18e0c916437f3dd7b4172714e6abf8b\/backends\/gdx-backend-lwjgl3\/src\/com\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3ApplicationConfiguration.java#L62-L63","If it is that controversial on desktop, maybe we should add a `isCacheStorageAvailable` method and don't implement the thing on desktop. After merging in #6358 every game could change the behaviour if it is needed anyway.\r\n\r\nI still think this is a good addition for the mobile platforms (when my remark regarding iOS is processed) and is not really needed on desktops, so we should not block this because there's no perfect desktop solution."],"labels":["enhancement","core","file handling"]},{"title":"TexturePacker output filenames are unintuitive","body":"The output of TexturePacker is a bunch textures, named (for example):\r\n\r\n    tex.png\r\n    tex2.png\r\n    tex3.png\r\n    tex4.png\r\n\r\nWhen reading textures in a loop, this means that special-case code has to be written to handle the first (unnumbered) file.\r\n\r\nIt may be useful to include an option that can produce consistent filenames, e.g.\r\n\r\n    tex1.png\r\n    tex2.png\r\n    tex3.png\r\n    tex4.png","comments":[],"labels":["enhancement","tools","breaking change"]},{"title":"[Feature Request] Zip file handle","body":"It may be a specific request but since there is a [zip file handler for Android](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/backends\/gdx-backend-android\/src\/com\/badlogic\/gdx\/backends\/android\/AndroidZipFileHandle.java), doesn't hurt to ask for a desktop (maybe multiple backends?) implementation.\r\n\r\nI would like to try that in the future but if anyone has time before feel free to do it.\r\n\r\nSimilar request:\r\nhttps:\/\/github.com\/libgdx\/libgdx\/issues\/5830\r\n\r\nExample code:\r\nhttps:\/\/gist.github.com\/MobiDevelop\/5514357#file-archivefilehandle-java","comments":["Personally, I achieved this by unpacking the zip to a local (temp) folder. Let's ping @MobiDevelop - it is his code, and his opinion if this should be added to the framework is important imo.","I also use an implementation similar to MobiDevelop's on Desktop. This seems like it would be a good addition to libgdx.","Just as a quick note: According to Discord, @MobiDevelop is okay with adding ZipFileHandle to libGDX. If anyone is interested in taking this on, please feel free to do so. We also need implementations for iOS and GWT.","I will try to tackle this issue, this will be my first issue on an open source project so please be patient.","For html module\r\nyou have error: `No source code is available for type java.util.zip.ZipFile; did you forget to inherit a required module?` \r\nbecause `java.util.zip` not emulated JRE http:\/\/www.gwtproject.org\/doc\/latest\/RefJreEmulation.html#Package_java_util. \r\n\r\n_A possible workaround is to use JSZip in html backend_\r\n","Thanks for the solution anbu93","I used an implementation similar to Mobil Develops on Laptop. it seems like it would be a wonderful addition to zip file handler and it has specific requests.","Is this issue is closed? if not then i would like to have some details for solution. ","@Sagar0-0 no, the issue is not closed.\r\n\r\n@dushechka created a PR (#6518) that works for desktop but some people asked\/suggested a solution that works for web too. It was never approved\/merged.\r\n\r\nhttps:\/\/github.com\/libgdx\/libgdx\/pull\/6518","There is also #6326, which is also incomplete\/abandoned. ","Okay, I don't mean to go off-topic, but that's 15 deleted comments now. What is up with this issue attracting spam? None of the spam even seems to be based on keywords in the original post, nor are other issues\/PRs attracting nearly this volume. I won't unsubscribe because unexpectedly reading about drum sets for toddlers is greatly amusing to me and handling ZIPs sounds handy.","Someone just needs to merge this, then the spam has to stop (or does it?).","I agree, someone has to merge it! :joy: ","I can merge it !!","I think only [these people](https:\/\/github.com\/orgs\/libgdx\/people) can merge pull requests."],"labels":["enhancement","good first issue","file handling"]},{"title":"Annotations for Nullable and NonNull return values \/ parameters \/ fields","body":"For some time, we have a `@Null` ([source](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/utils\/Null.java)) annotation in libGDX. This triggered a discussion on the Discord server recently, because some of us think that the existing annotation could be improved. Our pain points here are the following:\r\n\r\n* There is no NonNull annotation guaranteeing non-null values\r\n* The Null annotation doesn't match the general convention that it is named \"Nullable\"\r\n\r\nMoreover, we think that there are some more benefits that could be achieved by such an annotation. Nullable and NonNull annotations can be used by the major IDEs and by Kotlin to determine nullability. The Kotlin compiler even infers the types needed for params and return values in Java interoperability from these annotations, which - in case of `NonNull` makes it possible to reduce a lot of Null-Checks.\r\n\r\nAs far as we could find out, our annotations have to match the following to be compatible to the following products:\r\n\r\n* Eclipse: Nullable\/NonNull annotations are fully configurable\r\n* Kotlin: the annotations have to be in certain packages to be used. The [compiler source](https:\/\/github.com\/JetBrains\/kotlin\/blob\/master\/core\/compiler.common.jvm\/src\/org\/jetbrains\/kotlin\/load\/java\/JvmAnnotationNames.kt) tells us which can be used. It depends on certain package names: `androidx.annotation.Nullable, javax.annotation.Nullable, edu.umd.cs.findbugs.annotations.Nullable, io.reactivex.annotations.Nullable` and more\r\n* IntelliJ\/Android Studio: Not 100% sure, but it seems that it accepts the same annotations as Kotlin does\r\n\r\nSo far so good. If we decide to match the world outside libGDX, there are some more points to decide:\r\n* Which annotation (package) should be used?\r\n* Should we add a dependency, or should we add the annotations ourselves?\r\n\r\n@obigu found a great [StackOverflow post on the first topic](https:\/\/stackoverflow.com\/a\/42695253\/7487013), listing from which standpoints the decision can be made and how the candidates perform.\r\n\r\nPersonally, I think we should not adopt annotations retained at runtime - most games won't need this. It looks like the ~~jsr305~~spotbugs annotations are ~~still~~ the best to use, but we might missed some needs so this is intended to start a discussion.","comments":[">Should we add a dependency, or should we add the annotations ourselves?\r\n\r\nImo, we should not be shipping a class in any of those packages. If we want to match those packages, we need to add them as a dependency.","Even if a 3rd party more widely supported annotation would add some benefits (such as by default static code analisys), unfortunately, IMO, they are not good enough to \"pollute\" framework dependencies. It also adds several potential issues\/risks listed on the SO link comments from users on `javax.annotation`.\r\n\r\nOne think that I do believe there's consensus about is to rename the current `Null` annotation to `Nullable` as it makes more much more sense semantically.","I experimented with adding Jetbrains annotations in my Java libraries, and I found that adding both Nullable and NonNull to be onerous. I decided it would only be worthwhile to add `@Nullable` for return values and `@NonNull` for parameters. This makes it risk-free because the worst the user can do is use unnecessary null-checks. \n\nMy point is, I don't think it is worthwhile if we have to annotate everything. If we really want full null checking, one of the solutions like JSR-305 would be much preferable because it lets you set package defaults. \n\nIf we're mostly thinking of Kotlin here, we might consider simply waiting for their feature for making your own annotations. \n\nUltimately I removed the annotations entirely because they are difficult to get working with GWT. I personally have found that the null safety of API calls has limited usefulness. In my experience, NPE problems have happened because of slip-ups in my project code, but when interacting with library functions I always assume non-null is required of parameters unless the docs specify using null to turn something off. libGDX returns null almost nowhere. ","### May be null\r\n\r\n> I always assume non-null is required of parameters unless the docs specify using null to turn something off.\r\n\r\nIMO, this is how I think it should work. All method parameters and return values should be assumed to be non-null unless 1) annotated with `@Null`\/`@Nullable`, or 2) specified that they can be null in the javadocs. In both cases the coder needs to do some work and I find applying an annotation is easier.\r\n\r\nNote javadoc is still needed when it is not obvious what the null means. Often it's \"not found\" and no javadocs are needed, but sometimes there are other reasons that do need javadocs, a parameter can only be null in certain cases, etc.\r\n\r\n### Naming\r\n\r\nI prefer `@Null` because it is short. It's pretty obvious that it doesn't mean the value is _always_ null. I don't think naming it `@Nullable` is any more descriptive, nor do I find it important that most other projects prefer `@Nullable`. Since there is no standard, tools should be configurable.\r\n\r\n### Non-null\r\n\r\nI am very much against using a `@NotNull` annotation. As mentioned above, everything should already be assumed non-null. The common case does not need documentation. The possibility of being null is the special case and the only one that needs documentation.\r\n\r\nIMO the effort to add it almost everywhere and the clutter doing that adds is unreasonable.  Being forced to write it explicitly is a time waste. Rather than doing busy work and cluttering up our code, tools should assume everything is non-null.\r\n\r\n### IDEs\r\n\r\nThe reason I use a nullable annotation is because it is easier than javadocs. IDE assistance provided by a nullable annotation is marginal at best. If left as a warning it occurs way too often and trying to satisfy all occurrences of those warnings would be a waste of time. Also the IDE gets it wrong sometimes, so to satisfy the warning you'd need to jump through some ridiculous hoops (which will change as the compilers do) or add a suppress annotation. IMO none of that is worthwhile. In Eclipse I change it to `info` level and then I exclude `info` from the `Problems` view. This means I get underlines in the source code, which do help a little bit to highlight things that may be null, but otherwise I am not inconvenienced.",">As mentioned above, everything should already be assumed non-null.\r\n\r\nI disagree, using this assumption on a library you do not explicitly read will lead to many unnecessary NPEs. I would think most programmers are used to assuming null for safety, and only assuming non-null when it is verified or explicitly guaranteed to them (In the form of an annotation.)\r\n\r\nWhen properly setup, a Nonnull annotation is more useful to me than a Nullable, as it will explicitly tell me \"X cannot be null here\" and to suggest removing a redundant null check. With no annotation, the IDE will not be able to make this suggestion.\r\n\r\n>Also the IDE gets it wrong sometimes, so to satisfy the warning you'd need to jump through some ridiculous hoops\r\n\r\nYou're correct on this, but this only applies to Nullable. Nonnull will not make you do extra work.","> I disagree, using this assumption on a library you do not explicitly read will lead to many unnecessary NPEs. \r\n\r\nI didn't suggest using a library without reading its documentation. The non-null assumption is for libgdx code, my own code, and anywhere else it holds true. I contend that it's a good convention everyone should follow and tools should support.\r\n\r\n> When properly setup, a Nonnull annotation is more useful to me than a Nullable, as it will explicitly tell me \"X cannot be null here\" and to suggest removing a redundant null check. With no annotation, the IDE will not be able to make this suggestion.\r\n\r\nIs removing redundant null checks terribly useful? It comes at the cost of pasting `@NonNull` almost everywhere.\r\n\r\nKnowing something can be null is much more important, since it is part of method contracts and can avoid crashes. Though as mentioned, I would not use it solely for IDE assistance (which is poor), rather I use it for easier documentation, which must be done via javadocs if not using annotations for it.\r\n\r\n> Nonnull will not make you do extra work.\r\n\r\nI agree the IDE won't cause you to jump through hoops to satisfy non-null annotations like it does nullable. The extra work is still there though, in the form of 1) pasting it _everywhere_ and updating contributions to have it, and 2) reading past it millions of times, since code is read a lot more than it is written.","> ### Naming\r\n> I prefer `@Null` because it is short. It's pretty obvious that it doesn't mean the value is _always_ null. I don't think naming it `@Nullable` is any more descriptive, nor do I find it important that most other projects prefer `@Nullable`. Since there is no standard, tools should be configurable.\r\n\r\nI think it's worth listing the pros and cons of each option.\r\n\r\n**Pros of @Null**\r\n- 4 characters long\r\n\r\n**Cons of @Null**\r\n- Breaks convention\r\n- Shares name with `javax.validation.constraints.Null` annotation (which actually checks for null value)\r\n- Semmantically wrong\r\n\r\n**Pros of @Nullable**\r\n- It's the naming by widely adopted convention (even if it's not a standard as JSR-305 has not been adopted)\r\n- Self-documenting code\r\n\r\n**Cons of @Nullable**\r\n- 8 characters long\r\n\r\nIMO the fact that it's shorter is much less important compared to the other points.\r\n\r\n\r\n","I would say both are self documenting.\r\n\r\n> 8 characters long\r\n\r\nThe shorter name is nice for something repeated so many times throughout most code. libgdx currently has 452 `@Null` annotations, even though so far it's only been applied to scene2d and (some of?) utils.\r\n\r\n> javax.validation.constraints.Null\r\n\r\nThis seems to be an EE class that I've never seen on my classpath.\r\n\r\n> Semantically wrong\r\n\r\nSort of. It's fine if considered a simple tag for parameters, return types, and fields. It makes you think about nulls is pretty obvious what it means. The \"code reads like a sentence\" stuff never works out.\r\n\r\n> Breaks convention\r\n\r\nTrue. The next question is, what are the pros\/cons of following this convention? One consideration is IDE support, though I don't think we should weight decisions much based on this given tools are expected to be more flexible in the future and IDE assistance for this feature is secondary. Other than I'm not sure there are any advantages to the convention.\r\n\r\nOf the pros\/cons, for me it comes down to semantically wrong vs length. I personally find it easy to get over the semantics. I'm not super excited about the longer name being sprinkled everywhere, though it is somewhat mitigated by the typical method declaration only having a single `@Null` annotation. So far there are only a few places with more than two. For those the comparison is eg:\r\n```\r\npublic ImageButtonStyle (@Null Drawable up, @Null Drawable down, @Null Drawable checked, @Null Drawable imageUp,\r\n\t@Null Drawable imageDown, @Null Drawable imageChecked) {\r\n```\r\nAnd:\r\n```\r\npublic ImageButtonStyle (@Nullable Drawable up, @Nullable Drawable down, @Nullable Drawable checked, @Nullable Drawable imageUp,\r\n\t@Nullable Drawable imageDown, @Nullable Drawable imageChecked) {\r\n```\r\nBoth are pretty nasty TBH, with `@Null` being a tiny bit less. This kind of parameter list is better avoided entirely. I'm not sure what other places in libgdx it will come up.\r\n\r\nUltimately if I'm the only one who prefers `@Null` then I'm willing to concede and we can name it `@Nullable`. However, I feel much more strongly against using `@NotNull`\/`@NonNull`.","Just to give another opinion on this: Personally I\u2019m using the jsr305 annotations in all of my projects. Same as Nate I\u2019m only using them for documentation purposes; I like being able to quickly see whether null is an expected value for a certain variable\/parameter.\r\n\r\nAs the others, I\u2019m in favour of using `@Nullable`, (a) because of it being convention, which makes it easier for newcomers to acquaint themselves with the libgdx code and (b) because it is the only way to give Kotlin users compiler support. The latter also means that we have to use a Nullable annotation in a certain package and as PokeMMO pointed out that means we should most certainly use the corresponding dependency.\r\n\r\nRegarding `@NonNull`: I have to agree with Nate on this one. Null not being a valid value should be the default assumption. I think it\u2019s tedious to add `@NonNull` to every variable and it would make the code _a lot_ more cluttered than just using `@Nullable`.","You all assume that return values of called methods are non-null? I think that's a very bold assumption, I always assume that returned objects may be null and hence think NonNull annotation on methods is very valuable.","You can't do that with _any_ library, but I know it's ok with libGDX because of how it's designed. I do briefly skim the docs every time I call a method I'm not familiar with to see if it says \"May be null.\" But my assumption is if a method's docs don't say \"May be null,\" it would be a breaking change for it to someday start returning null, and that would need to be documented in the change log as a breaking change. \n\nI vote for `@Nullable`. I'd even vote for `@$` or `@N` over `@Null` if we're really after conciseness. `@Null` is just so semantically wrong that it bugs me each time I see it. ","> I would say both are self documenting.\r\n\r\nSelf documenting, imo, is all about having code that self describes and following conventions so that users get what it does without having to read the docs. I'd say a percentage of users that see `@Null` go to the annotation source code to check what it means (I did).\r\n\r\n> > javax.validation.constraints.Null\r\n> \r\n> This seems to be an EE class that I've never seen on my classpath.\r\n\r\nTrue, the `javax.validation.constraints` package is widely used on Java backend apps (the kind of apps that use Spring, Hibernate and stuff). For the ones of us who come from a Java backend background this package is not unfamiliar.\r\n\r\n> \r\n> > Semantically wrong\r\n> \r\n> Sort of. It's fine if considered a simple tag for parameters, return types, and fields. It makes you think about nulls is pretty obvious what it means. The \"code reads like a sentence\" stuff never works out.\r\n\r\nI agree it could be worse and be named `@Nl` for instance, but, it is semantically wrong, the word \"null\" doesn't convey the behaviour the annotation implies, but \"nullable\" does.\r\n\r\n> \r\n> Ultimately if I'm the only one who prefers `@Null` then I'm willing to concede and we can name it `@Nullable`. However, I feel much more strongly against using `@NotNull`\/`@NonNull`.\r\n\r\nThanks for being open to change.","Alright, unless a bunch of lurkers that prefer `@Null` speak up soon, I guess we'll rename it to `@Nullable`.","Either `@Nullable` or `@Null` is fine with me. Although `@Nullable` seems to be more the standard. Also, it probably even makes sense to consider **cypherdare**'s suggestion using `@$` or `@N` as it would prevent method parameters not to become overly long.\r\n\r\nI think the following is more readable than using a `@Nullable` or `@Null` annotation:\r\n```\r\npublic ImageButtonStyle (@N Drawable up, @N Drawable down, @N Drawable checked, @N Drawable imageUp,\r\n\t                 @N Drawable imageDown, @N Drawable imageChecked) {\r\n```\r\n \r\nI am against the `@NonNull`\/`NotNull` as it just adds clutter. Everything that doesn't have a `@Nullable` annotation can just be considered never to not return a `null` value. We also don't have a `@NotAnOverride` annotation for methods. It's just assumed a method isn't overwritten if there isn't a `@Override` annotation.","Unless it's libgdx, then it might or might not be an override whether the annotation is there or not.\r\n\r\nI'd rather `@Nullable`, definitely not `@N` or `@$`. We'd be better off with no annotations than some that have absolutely no meaning whatsoever.","Yeah, please don't actually do that. I was just making a point that those are more concise than Null and no less descriptive. ","If we use JSR305, there's some mechanisms it has to mark all of some \"thing\" in a package as being `@Nonnull` by default, unless otherwise annotated. This is used in LWJGL3 and we could copy their implementation of https:\/\/github.com\/LWJGL\/lwjgl3\/blob\/master\/modules\/lwjgl\/core\/src\/main\/java\/org\/lwjgl\/system\/NonnullDefault.java . In that case, \"thing\" means every field, method return, and parameter. This reduced the bloat in my experimental GDX-based collections library quite a bit; [see the changes in this commit](https:\/\/github.com\/tommyettinger\/jdkgdxds\/commit\/92e1b924ad54896d0741718f2d804dc1f275b456#diff-59f7d1921a50eec5073a9acd965cc2bc), ignoring the HTML docs committed at the top.  I changed the retention policy to `CLASS` instead of `RUNTIME` so there should be no overhead, or nearly none. Of course, a value should only be annotated as `@Nonnull` if the value is either known to never be null or is known that code will malfunction if the value is null. If the opposite assumption is true and we want things to be allowed to be nullable by default, the way LWJGL3 uses will also work, but it's kinda pointless because Java already assumes references are nullable.","> It's just assumed a method isn't overwritten if there isn't a @Override annotation.\r\n\r\nUh... you're kidding.","To summarise the above: The state of discussion seems to have been that `@Nullable` is preferred over `@Null`, and `@Nonnull` should not be added. This leaves the question: what `@Nullable`annotation are we going to use?\r\n\r\nJust creating our own `@Nullable` annotation won\u2019t be supported by the [Kotlin compiler](https:\/\/github.com\/JetBrains\/kotlin\/blob\/master\/core\/compiler.common.jvm\/src\/org\/jetbrains\/kotlin\/load\/java\/JvmAnnotationNames.kt). And looking at the thumbs ups on @PokeMMO's [comment above](https:\/\/github.com\/libgdx\/libgdx\/issues\/6195#issuecomment-698915366), I think the majority is in favour of using a dependency instead of just copying a class in a package that is not 'ours'. This leaves us with two sensible options for `@Nullable`:\r\n\r\n#### 1) `javax.annotation.Nullable` supplied by `com.google.code.findbugs:jsr305`\r\n- (+) Kotlin compiler & IDE support\r\n- (+) A concise package name\r\n- (+) Can be used to set the non-null-ness for a whole package (via `@TypeQualifierDefault`)\r\n- (~) Is used by LWJGL3, whatever that is worth \r\n- (~) JSR-305 is abandoned\r\n- (-) There is a split package issue with JDK 9+ [if JAX-WS](https:\/\/github.com\/google\/guava\/issues\/2960#issuecomment-546713529) is used. However, I don\u2019t think there are a lot of people using JAX-WS and libGDX at the same time and there seems to be a [workaround](https:\/\/github.com\/google\/guava\/issues\/2960#issuecomment-522446788) involving patching.\r\n- (-) There may be some license problems with [Oracle JDKs](https:\/\/stackoverflow.com\/questions\/13414474\/alternative-to-findbugs-defaultannotation-for-javax-annotation-for-fields-and-me\/36198568#36198568)\r\n\r\n#### 2)  `org.checkerframework.checker.nullness.qual.Nullable` supplied by `org.checkerframework:checker-qual`\r\n- (+) Kotlin compiler & IDE support\r\n- (+) Adopted by a lot of libraries in place of JSR-305 for example by Google\u2019s [Guava](https:\/\/github.com\/google\/guava\/issues\/2960#issuecomment-350721044)\r\n- (+) Can be used to set the non-null-ness for a whole package (via `@DefaultQualifier`); but this is supposedly [not picked up](https:\/\/dzone.com\/articles\/when-to-use-jsr-305-for-nullability-in-java) by IntelliJ or the Kotlin compiler\r\n- (~) The use of Checker Framework is somewhat recommended by the [Oracle Java Tutorials](https:\/\/docs.oracle.com\/javase\/tutorial\/java\/annotations\/type_annotations.html)\r\n- (-) Has a longer package name\r\n\r\nIirc @Tommyettinger did some testing regarding the size of the dependencies.\r\n\r\n<br\/>\r\n\r\nIn the end, I think it doesn\u2019t really matter what annotation we are using - there will always be advantages and disadvantages. We should just choose one and then make the best out of it."],"labels":["enhancement","documentation","code quality"]},{"title":"LWJGL3 don't have LwjglAWTCanvas","body":"#### Issue details\r\nLwjglAWTCanvas is not present is LWJGL3\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nVersion 1.9.10\r\n\r\n\r\n- [ ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] HTML\/GWT\r\n- [x] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["Hey @kowlown, sadly GLFW (which is used by LWJGL3) doesn't really play nice with AWT. There is nothing much we can do about this from the libGDX side, but there have been some general efforts to remedy this situation (see the [lwjgl3-awt](https:\/\/github.com\/LWJGLX\/lwjgl3-awt) project). The problem is that up until recently lwjgl3-awt didn't support Mac OS and a proper release supporting Mac OS is still missing. As long as that is the case, our hands are tied.\r\n\r\nRelated to #5004 and #6088.","Just an idea, this library is awesome and is built over OpenGL 2, maybe it can be used as a starting point.\r\n\r\nhttps:\/\/github.com\/brandonborkholder\/glg2d","I'm going to keep deleting any gibberish messages that are completely off-topic and factually wrong. Monarchis, we know it is you, you were blocked for a reason. Again, please seek help from a mental health professional; your messages are nonsense.","Our fearless leader, EL MARIO, has made a GLFW fork so it works with AWT:\r\nhttps:\/\/github.com\/badlogic\/glfw\r\n\r\nWhat it do:\r\n> Makes GLFW not start on the main thread, then dispatches all GLFW calls made on the non-main thread to the main thread.\r\n\r\nWhat is needed is the forked `libglfw.dylib` and:\r\nhttps:\/\/gist.github.com\/badlogic\/bac3284aa4c93378c3d7ec9e2c0f4fda#file-gistfile1-txt-L63-L64\r\n\r\nThis lets you use AWT stuff when using GLFW stuff, which is great for a lot of things. It doesn't put a GLFW in an AWT\/Swing view."],"labels":["enhancement","desktop","LWJGL3"]},{"title":"FreetypeFontGenerator and PixmapPackerIO - fix save method not numbering pages correctly if a page within only contains fonts","body":"When using `FreeTypeFontGenerator` to create fonts and then pack them in a pixmap, the following method is used \r\n\r\n`public synchronized Rectangle pack (Pixmap image) {\r\n\treturn pack(null, image);\r\n}`\r\n\r\nwhich then calls\r\n\r\n`public synchronized Rectangle pack (String name, Pixmap image)` so name is always null.\r\n\r\nLater when the rect is put onto rects with \r\n\r\n`\r\nif (name != null) {\r\n\tpage.rects.put(name, rect);\r\n\tpage.addedRects.add(name);\r\n}`\r\n\r\nbecause there is no `name` it's not added to the rects. This is fine it still works etc, but in the PixmapPackerIO save method the file names are currently incremented and saved when `if (page.rects.size > 0) {` and therefore the pages are not incremented correctly, and the wrong files are used for images\/fonts.\r\n\r\nThis only happens if the entire Pixmap is made up of fonts, which happens to me quite often. \r\n\r\nThe fix increments and saves the Pixmap regardless of the size of rects.","comments":["@tommyettinger so I haven't tested this locally per se, but I am using the fix live in my own app, and it fixes an otherwise crashing bug.\r\n\r\nI pack fonts AND images into multiple pages, some pages contain just fonts others contain just images and others still contain a mixture of both.\r\n\r\nTo give a little more context as you seem to have grasped it but just to confirm.\r\n\r\nCurrently, the file names of each page are incremented ONLY if the page has rects (rects i think are seen as each individual sprite, so the letters in fonts and the images in, well images). As when you use FreetypeFontGenerator there are no rects created, because it doesn't take in a name String, this means the numbering of the pages gets out of sync and the texture atlas starts to look for things on the wrong page\/file.\r\n\r\nDoes that make more sense?","Can you give a sample that causes this? I have same use cases in production and do not see what you have reported. ","@Tom-Ski I'll look and try. Can you 100% confirm that none of your pages that are generated contain ONLY fonts. This is the case when this breaks.","```\r\n        generatedFonts = new HashMap<>();\r\n        for (String fontName : FONTNAMES) {\r\n            FreeTypeFontGenerator generator = new FreeTypeFontGenerator(Gdx.files.internal(\"fonts\/ttf\/\" + getFontFilename(fontName) + \".ttf\"));\r\n\r\n            FreetypeFontLoader.FreeTypeFontLoaderParameter parameter = getFreeTypeParameter(fontName);\r\n            parameter.fontFileName = \"fonts\/ttf\/\" + getFontFilename(fontName) + \".ttf\";\r\n            parameter.fontParameters.packer = packer;\r\n            parameter.fontParameters.characters = \"= _-,:!?\/.'\\\"()[]{#@\u00a3$\u20ac*\\\\&%<>+0123456789aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\";\r\n            if (fontName.equals(COUNT_DOWN)) {\r\n                parameter.fontParameters.characters = \"123\";\r\n            } else if (fontName.equals(COUNT_DOWN_ADVERT)) {\r\n                parameter.fontParameters.characters = \"12345\";\r\n            }\r\n            generatedFonts.put(fontName, generator.generateFont(parameter.fontParameters));\r\n        }\r\n```\r\nThis is the code I use to generate my fonts in the packer. \r\n\r\nFollowing the code flow:\r\n```\r\ngenerateFont() -> generateData() -> createGlyph() -> packer.pack(mainPixmap)\r\n```\r\nthis last command is the pack command that doesn't take a name field, therefore the page index will never be incremented.\r\n"],"labels":["fonts"]},{"title":"Faster Frustum AABB intersection","body":"The code is adapted from Christer Ericson's Real Time Collision (p. 164):\r\n\r\nThe original code can be found here: https:\/\/books.google.com.br\/books?id=WGpL6Sk9qNAC&pg=PA164&lpg=PA164#v=onepage&q&f=false\r\n\r\nNote that in the original code e is calculated as max - center, thus halfDimensions.\r\n\r\nI did a few changes to return PlaneSide (OnPlane, Front, Back) instead of a boolean.\r\n\r\nI tested with the code below, it returns the exact same values as the current algorithm:\r\n\r\n```\r\n    @Test\r\n    public void testIntersectBoundingBoxPlaneRandom () {\r\n        for (int i = 0; i < 1000; i++) {\r\n            BoundingBox box = new BoundingBox(new Vector3(randomFloat(), randomFloat(), randomFloat()),\r\n                                              new Vector3(randomFloat(), randomFloat(), randomFloat()));\r\n            Plane plane = new Plane(new Vector3(randomFloat(), randomFloat(), randomFloat()), randomFloat());\r\n\r\n            boolean result = plane.testBounds(box) != Plane.PlaneSide.Back;\r\n            assertEquals(oldBoundsPlane(box, plane), result);\r\n        }\r\n    }\r\n\r\n    public static boolean oldBoundsPlane (BoundingBox bounds, Plane ... planes) {\r\n        Vector3 tmpV = new Vector3();\r\n        for (int i = 0, len2 = planes.length; i < len2; i++) {\r\n            if (planes[i].testPoint(bounds.getCorner000(tmpV)) != Plane.PlaneSide.Back) continue;\r\n            if (planes[i].testPoint(bounds.getCorner001(tmpV)) != Plane.PlaneSide.Back) continue;\r\n            if (planes[i].testPoint(bounds.getCorner010(tmpV)) != Plane.PlaneSide.Back) continue;\r\n            if (planes[i].testPoint(bounds.getCorner011(tmpV)) != Plane.PlaneSide.Back) continue;\r\n            if (planes[i].testPoint(bounds.getCorner100(tmpV)) != Plane.PlaneSide.Back) continue;\r\n            if (planes[i].testPoint(bounds.getCorner101(tmpV)) != Plane.PlaneSide.Back) continue;\r\n            if (planes[i].testPoint(bounds.getCorner110(tmpV)) != Plane.PlaneSide.Back) continue;\r\n            if (planes[i].testPoint(bounds.getCorner111(tmpV)) != Plane.PlaneSide.Back) continue;\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/\/ Value ranging from [-10 , 10]\r\n    private float randomFloat() {\r\n        Random random = new Random();\r\n        return (random.nextFloat() * 20) - 10f;\r\n    }\r\n```","comments":["Consider reading: https:\/\/iquilezles.org\/www\/articles\/frustumcorrect\/frustumcorrect.htm"],"labels":["core","math"]},{"title":"Broadcast of Intent { act=android.intent.action.SCREEN_ON flg=0x50200010 }","body":"Android Live Wallpaper\r\n\r\n\r\n```java\r\nat java.lang.Object.wait (Object.java)\r\nwaiting on <0x01f37d2d> (a java.lang.Object)\r\n  at com.badlogic.gdx.backends.android.AndroidGraphicsLiveWallpaper.resume (AndroidGraphicsLiveWallpaper.java)\r\nlocked <0x01f37d2d> (a java.lang.Object)\r\n  at com.badlogic.gdx.backends.android.AndroidLiveWallpaper.onResume (AndroidLiveWallpaper.java)\r\n  at com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine.onResume (AndroidLiveWallpaperService.java)\r\n  at com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine.notifyVisibilityChanged (AndroidLiveWallpaperService.java)\r\n  at com.badlogic.gdx.backends.android.AndroidLiveWallpaperService$AndroidWallpaperEngine.onVisibilityChanged (AndroidLiveWallpaperService.java)\r\n  at android.service.wallpaper.WallpaperService$Engine.reportVisibility (WallpaperService.java:1088)\r\n  at android.service.wallpaper.WallpaperService$Engine$3.onDisplayChanged (WallpaperService.java:1224)\r\n  at android.hardware.display.DisplayManagerGlobal$DisplayListenerDelegate.handleMessage (DisplayManagerGlobal.java:633)\r\n  at android.os.Handler.dispatchMessage (Handler.java:106)\r\n  at android.os.Looper.loop (Looper.java:193)\r\n  at android.app.ActivityThread.main (ActivityThread.java:6718)\r\n  at java.lang.reflect.Method.invoke (Method.java)\r\n  at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run (RuntimeInit.java:493)\r\n  at com.android.internal.os.ZygoteInit.main (ZygoteInit.java:858)\r\n```\r\n\r\n```\r\n\"main\" prio=5 tid=1 Waiting\r\n  | group=\"main\" sCount=1 dsCount=0 flags=1 obj=0x74f20910 self=0x7288a14c00\r\n  | sysTid=25299 nice=0 cgrp=default sched=0\/0 handle=0x730e404548\r\n  | state=S schedstat=( 103212346 86202757 247 ) utm=5 stm=3 core=0 HZ=100\r\n  | stack=0x7fe8581000-0x7fe8583000 stackSize=8MB\r\n  | held mutexes=\r\n```\r\n\r\nany 1 know what to do with that ANR?","comments":["From my experience, I can say that this is a bug mainly on Android 9 phones and I'm confident enough that it has nothing to do with libgdx. Probably it will never be solved. \r\nYou can reproduce it by following these steps:\r\n1. Take an Android 9.x phone or emulator\r\n2. Go to the live wallpaper preview screen\r\n3. Press recent apps button \r\n4. From recent apps choose your live wallpaper preview\r\n\r\nThe screen will go black with an ANR. I have thousands of these every day and thanks God I'm just below the bad behavior threshold limit. This ANR is thrown by any live wallpaper (even the prebuild ones) on Android 9 so there is no hope.","I tried it it with the included LiveWallpaper test and can reproduce a black screen after doing your steps. \r\nI looked inside the logcat and found these two errors:\r\n```\r\n2020-05-18 19:36:48.904 8424-8450\/com.badlogic.gdx.tests.android E\/libEGL: eglCreateWindowSurface: native_window_api_connect (win=0xec336008) failed (0xffffffed) (already connected to another API?)\r\n2020-05-18 19:36:48.904 8424-8450\/com.badlogic.gdx.tests.android E\/libEGL: eglCreateWindowSurface:720 error 3003 (EGL_BAD_ALLOC)\r\n```\r\nI'm not sure if they are related, but I thought posting them here is maybe useful.\r\nBy doing some research, I found [this](https:\/\/stackoverflow.com\/questions\/54183090\/eglcreatewindowsurface-native-window-api-connect-failed) question on stackoverflow. I wasn't able to fix the problem but maybe someone with more knowledge can","Yes @SimonIT, this is exactly what happens. I've already reported it to Google IssueTracker for Android [here](https:\/\/issuetracker.google.com\/issues\/142331942) in October 2019 and they initially accepted the bug but now it is marked as \"Won't Fix (Obsolete)\". I also reported it here #5723, so I presume there is no hope...","I tried it again and I recognized that somehow the mentioned `onWindowFocusChanged` method never gets called.\r\nI really don't know why. If you wanna try it yourself, I uploaded it to a seperate branch of my fork https:\/\/github.com\/SimonIT\/libgdx\/tree\/fix-Context-Loss-Live-Wallpaper","@SimonIT \r\nThanks for that help... now i know where its problem.\r\n\r\n@oshetima \r\nyeah its on andorid 9.0, but others apps dont give ANRs, just show \"We got problem\" and black screen"],"labels":["android","help wanted"]},{"title":"Support infinite TMX maps Closes #5764","body":"","comments":["Tiled The Editor have strange behaviour with infinite map size. In some cases my code may not load some tiles that go beyond the map size limits. I opened an [issue](https:\/\/github.com\/bjorn\/tiled\/issues\/2791) on it's project about this.","This looks probably fine, but I am not very familiar with it. Anyone else to comment if this makes sense?","This code is not ideal: it supports \"infinite\" tmx-maps which stores tiles in randomly located chunks in \"finite\" manner - one two dimensional array that represented rectangle that contains all tiles. It is not optimal: there are many elements in this array not contains data.\r\n\r\nAnd for optimization, in this code there are no many checks for indexes going out of bounds.\r\n\r\nif I can find the time, then I will try to implement similar chunks in LibGDX.","For anyone taking a look at this PR years later.\r\nI thought I would try and take a look real quick and run some tests to help out, so we know where this stands many years later. Sadly, Bjorn is correct.\r\n\r\nWhen using the infinite tilemap feature you usually end up with negative positions in the expanded chunks. And after looking through the codebase with how libGDX sets cells within MapLayers. Each layer contains our cells in a simple 2D Cell array designating their position. So unless I am mistaken, we would never be able to keep a 1 to 1 match to the tile positions in relation to the tiled editor unless we made some big changes.\r\n\r\nWhile nklbdev did a great job to start, as it stands the code as submitted doesn't quite work, even disregarding the negative positions there are a few others issues as well and we would probably need a large overhaul to some other sections of the codebase. Though if anyone wants to tackle that, go for it!\r\n\r\nBut for now, sadly, it seems like the best workaround for users who want to make use of Tiled's infinite map feature would be to just uncheck it and set it back to a finite map, when they are ready to bring it into libGDX.\r\n"],"labels":["enhancement","tilemap"]},{"title":"TextureView option for android backend.","body":"It gives an ability to have renderring TextureView in a regular android-view layouts, allowing you to render on part of a screen and over other views in a layout.\r\n![texture-view-backend](https:\/\/user-images.githubusercontent.com\/7113705\/79547518-b5b4cd00-809c-11ea-971b-2a9ea6293acc.png)\r\nHere on screenshot background with android icon is a regular ImageView and transparent green square with logo is a TextureView. Test included.","comments":["I like giving the option, in spirit. It would be nice to have some of this be more common with GLSurfaceView20, if possible. Is there any way to share code between them? I haven't looked too closely at the GLTextureView to see exactly what it is doing so if they are necessarily totally different, let me know."],"labels":["enhancement","android"]},{"title":"Incorrect padding between the first 2 glyphs of the sample text in the Hiero Bitmap Font Tool","body":"#### Issue details\r\nIn Hiero, the distance between the first two glyphs is reduced (the padding is not applied correctly). This only happens when using the Java or the Native renderer, not when using FreeType. It also only applies to the sample text, not the actual glyph cache.\r\n\r\n#### Reproduction steps\/code\r\nPick a font, set the sample text to ASCII or NEHE and start increasing the left\/right padding and the x spacing. The distance between the first two glyphs will increase way more slowly, than between the rest of the glyphs.\r\n\r\n![hiero_bug](https:\/\/user-images.githubusercontent.com\/16489781\/77252142-a46dd180-6c52-11ea-80b5-67f12d247e27.png)\r\n\r\nThis is an example of the issue using Arial with the Java renderer with left padding=8, right padding=6 and spacing x=8.\r\n\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nHiero v5\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [x] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["Ok I could visualize what the problem may be but since windows are affected maybe its a bug in the system or a bug in the code"],"labels":["tools","fonts"]},{"title":"Updated default shaders for OpenGL 3.2 core profile","body":"Mac OS only supports the [OpenGL 3.2 core](https:\/\/www.khronos.org\/opengl\/wiki\/OpenGL_Context#OpenGL_3.2_and_Profiles) profile for OpenGL 3. As core profiles are not backward compatible, this leads to compilation issues with the default shaders in libGDX. This PR ensures that all default shaders are automatically converted (via GLSL macros) when using OpenGL 3 on Mac OS.\r\n\r\n(Furthermore a gwt-compatible `PlatformUtils` class was added to determine whether the current system is a mac. The need for a class like this was already indicated [elsewhere](https:\/\/github.com\/libgdx\/libgdx\/pull\/5893#discussion_r370922006), as the available `UIUtils` is a Scene2D class.)\r\n\r\n----\r\n\r\n**Progress in the past:** The shader compilation problem in the OpenGL 3.2. core profile is nothing new and was, for example, discussed in [this context](https:\/\/github.com\/libgdx\/libgdx\/pull\/2527#issuecomment-65762706). At least for `SpriteBatch`, work on an updated default shader was already [begun](https:\/\/github.com\/libgdx\/libgdx\/commit\/774e7c249442d47811590e3fa6b3b304f677f4cf). However, those changes where never merged nor did they cover all default shaders in libgdx.\r\n\r\n**To test these changes:** Just create a new libGDX project or open an already existing one on Mac OS. Then set the _useGL30_-flag to _true_ (this only works with the lwjgl3 background, as libgdx doesn't allow you to use a core profile with lwjgl2). Then use any of your favourite classes that has a default shader (`SpriteBatch`, `ShapeRenderer`, etc.). Without the PR this will fail, as the shader cannot be compiled - with this PR everything works fine.\r\n","comments":["@crykn FYI i used a different approach in gdx-gltf, by using few macros, see [the vertex code here](https:\/\/github.com\/mgsx-dev\/gdx-gltf\/blob\/master\/gltf\/src\/net\/mgsx\/gltf\/shaders\/gdx-pbr.vs.glsl#L14) and [fragment code here](https:\/\/github.com\/mgsx-dev\/gdx-gltf\/blob\/master\/gltf\/src\/net\/mgsx\/gltf\/shaders\/gdx-pbr.fs.glsl#L32).\r\n\r\nI'm balanced between the 2 approaches though, bright side of mine is it's easier to maintain, bright side of yours is it's cleaner GLSL wise.\r\n\r\nAlso, why not use GLSL 150 for other OS\/platform as well when gl30 is available?\r\n\r\nwhat do you think?","Hey @mgsx-dev, I really like your solution. It is definitely more maintainable and that's a big plus.\r\n\r\nI didn't use GLSL 150 on other platforms for the same reason libGDX doesn't specify a version its shaders: it  usually makes the driver more forgiving.","Just to give an overview of the current status:\r\n\r\nThere are **two central goals** of this PR: (1.) libGDX's shaders should work out-of-the-box on every platform and (2.) users should be able to put whatever they want into `ShaderProgram#prependVertexCode` and `#prependVertexCode` without breaking libGDX's shaders.\r\n- Goal 1 requires us to port GLSL 120 shaders to version 150, if the OpenGL ES 3 is used on macOS. There are number of solutions for this: providing two versions of a shader, doing a simple regex or using GLSL preprocessor dierectives (#define).\r\n- Goal 2 requires us to ignore any `ShaderProgram#prependVertexCode` and `#prependVertexCode` code for libGDX's shaders. Otherwise, prefixes like the following could break those converted shaders mentioned above, as there can't be multiple version flags, etc.: \r\n```java\r\nShaderProgram.prependVertexCode = \"#version 140\\n#define varying out\\n#define attribute in\\n\";\r\nShaderProgram.prependFragmentCode = \"#version 140\\n#define varying in\\n#define texture2D texture\\n#define gl_FragColor fragColor\\nout vec4 fragColor;\\n\";\r\n```\r\n\r\n--- \r\n\r\nThe **currently used solution** in this PR is to introduce a `ignorePrefix` flag to `ShaderProgram`'s constructor and two static methods which convert any shader code given to them. This leads to code like this:\r\n```java\r\nShaderProgram shader = new ShaderProgram(ShaderProgram.asCompatibleVertexShader(vertexShader),\r\n\t\t\tShaderProgram.asCompatibleFragmentShader(fragmentShader), true);\r\n```\r\n\r\nAfter some discussion, @mgsx-dev suggested an **alternative approch:** `ShaderProgram`'s constructor should offer a `autoCompatibility` flag instead. (For a description see the comment below.) This has the advantage that the code is easier to read (`new ShaderProgram(vertexShader, fragmentShader, true)`), but on the other hand I don't know whether such a specific flag (`autoCompatibility`) not just pollutes the `ShaderProgram` class. In addition, I don't think a lot of libGDX devs would use that, as opposed to an `ignorePrefix` flag which could be useful in other situations as well.\r\n\r\n**Other opinions on this are very much welcomed!**\r\n","to clarify a bit my proposal of the \"autoCompatibility\" parameter:\r\n* when true, prepend stuff are totally ignored and your shader is made compatible (preferred and used by the framework)\r\n* when false (the default): old behavior, not advised unless you already handle version and compatibility yourself. (not used by the framework)\r\n\r\nwe could also mark old constructor as deprecated and encourage to use the new one with autoCompatibility=true.\r\n\r\nwith this solution, user code don't need to call asCompatibleVertexShader and asCompatibleFragmentShader methods.","we discovered recently that some GLSL compiler doesn't allow macro variable starting with \"gl_\".\r\n`#define gl_FragColor fragColor` won't work and there is no way to override that variable cleanly (i don't consider String#replace to be a clean solution ;-) ). \r\n\r\nSo every shaders (libgdx, libraries, user) could have something like that i think (tested on desktop linux).\r\n\r\n```glsl\r\n#if __VERSION__ >= 130\r\nout vec4 fragColor;\r\n#else\r\n#define fragColor gl_FragColor\r\n#endif\r\n...\r\nfragColor = vec4(...);\r\n```\r\n\r\nI think it should work with GLES and WebGL as well because `__VERSION__` could be 100, 300, 310, 320. see https:\/\/en.wikipedia.org\/wiki\/OpenGL_Shading_Language#Versions\r\n\r\nThen if all shaders need to be modified, i think prependVertexCode and prependFragmentCode should only be used to specify the version dynamically depending on the running platform (eg. 300 es on android, 150 on desktop).\r\n\r\nwith this approach, there is no need to modify libgdx API.","> \r\n\r\nWhat about \r\n#define attribute in\r\n#define varying out\r\n\r\n#define textureCube texture\r\n#define texture2D texture\r\n#define varying in\r\n\r\nAll those need to be redefined at least if the platform is not backward compatible.\r\n\r\nWhile we are toughing every shader and maybe create a recommendation for library shader authors.\r\n\r\n1. I suggest to add the name of the shader in the first line as a comment. During my debugging I often could see the shader code, but was not sure which one it was. I had to search through all the projects to find the correct shader.\r\n2. I strongly recommend never to write shader code in side of Java, but to read it as a resource. A shader file can be replaced easily in a project if supplied with same package name. If it is in the java code, it is impossible to replace and you will need to replace the whole library.","If `#define gl_FragColor fragColor` doesn't work with every compiler, then we definitely need to change that! But if I understand it correctly, your solution has two caveats: \r\n- (1.) Users have to define a version themselves via the prepends. This means that libGDX's shaders don't work out-of-the-box on all platforms (in particular macOS with OpenGL 3.2), which IMO is exactly what we need to adress with this PR. \r\n- (2.) If users need to define the version in the prepends, we obviosuly can't ignore the prepends for the default shaders. This in turn means, that users can break the shaders by inputting stuff that clashes with our other preprocessor directives (i.e. `#define varying in\\n#define texture2D texture\\n#define textureCube texture\\n#define gl_FragColor fragColor\\nout vec4 fragColor;\\n` etc.).  Ideally, users wouldn't be able to interact with those shaders at all, because there isn't really a need to.\r\n\r\nWhat we could do is adapt all of libGDX's shaders to use `fragColor = vec4(...);` and then add `out vec4 fragColor;` or `#define fragColor gl_FragColor` depending on the conditional [here](https:\/\/github.com\/libgdx\/libgdx\/blob\/ea4663050be1ec980d8a9124d16b1588972f1a1a\/gdx\/src\/com\/badlogic\/gdx\/graphics\/glutils\/ShaderProgram.java#L878) (of course, this depends on whether variables starting with `gl_` are allowed as _second_ parameter in preprocessor macros; if not, I think the only solution is to use String#replace)."],"labels":["GL"]},{"title":"Update box2d","body":"The Box2D version included in LibGDX is from 2014. Box2D has received many updates since then: https:\/\/github.com\/erincatto\/box2d\r\n\r\nIs it possible to update the sources and JNI?\r\n\r\nCould someone guide me on how to do it?","comments":["https:\/\/github.com\/libgdx\/libgdx\/tree\/master\/extensions\/gdx-box2d\/gdx-box2d\/jni\/Box2D source code we use is here. You would need to update here, and then bind the additiions\/changes via jnigen","If I recall, we also have a few modifications to Box2D in there, but whether they'd still be needed is unknown.","Oh boy, the file naming is entirely different. Also, JBox2D, which is used for GWT hasn't kept up.","There was a user on the old LibGDX forums that updated their version of Box2D to some thing better I think.  I could take a look into importing it.  I don't use the code base my self.\r\n\r\nIf I remember correctly, he only updated the Java code and received some major performance upgrades.  Also, there is a seriously huge need to update the dependencies in the current LibGDX version of Box2D.  I forget which one, but it's causing some slow down that doesn't need to exist.\r\n\r\nHere was one of the forum posts:\r\nhttps:\/\/www.badlogicgames.com\/forum\/viewtopic.php?f=11&t=29792&p=116668&hilit=box2d+physics#p116668","Are there any plans to update the version of Box2D\/any progress on this issue?","> There was a user on the old LibGDX forums that updated their version of Box2D to some thing better I think. I could take a look into importing it.\r\n\r\n@shatterblast did you end up checking it out? What were your findings?\r\n\r\n> If I remember correctly, he only updated the Java code and **received some major performance upgrades**. \r\n\r\nThat's something I'm sure a lot of people would enjoy. ;)","If someone was to write an update, what would be required?  I looked at the Box2D 2.4 code and the libgdx code and it doesn't look like a big deal to write the update.  What are things that I would need to keep in mind or look out for? ","> If someone was to write an update, what would be required? I looked at the Box2D 2.4 code and the libgdx code and it doesn't look like a big deal to write the update. What are things that I would need to keep in mind or look out for?\r\n\r\nThe code doesn't have big changes, but the project structure does. A lot of file names and position changes.","Just an update, I'm working on this.","Note, I am working on this in a new separate repo: https:\/\/github.com\/libgdx\/gdx-box2d\r\n\r\nI've committed what I have so far for the core extension. Since JBox2D is not up to date with the latest Box2D changes, I'm working on using emscripten to bind the C++ version for the html target - this will take a bit longer though as it is a little complicated to set up and convert.","@MobiDevelop Hi, are you still working on this?","Any update on this?","Sorry, I have not had any opportunity to continue on this for quite some time.\r\n\r\nIf the need is there and someone else would like to take up the task of doing this update either in place (including bringing JBox2D up to date) or in the new repo linked previously and continuing the attempts to get Emscripten to bind the C++ code for web, please do. I don't know when I will find time to work on this.","Maybe worth mentioning here in case anyone works some more on this issue: it seems like Box2D will be releasing a v3 at some point in the future, and there are planned changes to its API.\r\n\r\nhttps:\/\/box2d.org\/posts\/2023\/01\/starting-box2d-3.0\/","I've completed a refresh of gdx-box2d based on @MobiDevelop's work.\r\n\r\nThese has been done:\r\n\r\n+ Ropes, without standalone `setTuning`\r\n+ An attempt to implement `Shape::testPoint`\r\n\r\nPR sent: https:\/\/github.com\/libgdx\/gdx-box2d\/pull\/1\r\n\r\nI'll be managing my own fork now: https:\/\/github.com\/ice1000\/gdx-box2d","\r\nhttps:\/\/github.com\/libgdx\/libgdx\/assets\/16398479\/3e8d22b8-39f0-42c2-9de3-dba7b812c221\r\n\r\n"],"labels":["box2d"]},{"title":"Sound play() method in android (AndroidSound) sometimes doesn't work in Android when sound is looping","body":"Hello there, i find a problem that happens only in android, when i play a sound with loop flag in true (sound.setLooping) it works fine (since 1.9.11-SNAPSHOT), it retrieves the Id and then i use it to stop the sound when i need (storing Id), but in some trys it fails, i mean it generates the Id but nothing is heard, this happends sometimes like every 3 trys and is very wear, for example:\r\n\r\nlong id=sound.play(v, pitch, pan);\r\nsound.setLooping(id, true);\r\n\/\/after a while..\r\nsound.stop(id);\r\n\r\ndoing this oftten in some try it will fail (not going to hear)\r\nthen i try again and it works, and so on..\r\nit happends to me in a Motorola One with Android 9 using 1.9.11-SNAPSHOT but it happends to me in latests versions too (1.9.5)\r\n","comments":["Maybe I'm wrong, but last time I checked the old code, it caused a memory leak.  I haven't needed this, so I haven't updated it."],"labels":["bug","android","audio"]},{"title":"added tiled template object support","body":"I added support for object template as requested here #5102\r\n\r\nI tested my implementation here:\r\nhttps:\/\/github.com\/OliPerraul\/libgdx-test\/tree\/object-template-test","comments":[],"labels":["enhancement","tilemap"]},{"title":"Texture format inconsistency","body":"#### Issue details\r\nTextureData#getFormat is inconsistent across implementations:\r\n* GLOnlyTextureData returns Format.RGBA8888 [for no reason](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/graphics\/glutils\/GLOnlyTextureData.java#L103) (KO)\r\n* FloatTextureData returns Format.RGBA8888 [for bad reason](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/graphics\/glutils\/FloatTextureData.java#L127) (KO)\r\n* ETC1TextureData returns Format.RGB565 because it handles it internally (OK)\r\n* KTXTextureData throw an exception because it handles it internally (KO in my opinion)\r\n* others are fine (FileTextureData, MipMapTextureData, PixmapTextureData) because they have a Format enum.\r\n\r\nGLOnlyTextureData and FloatTextureData are mainly used for MRT and can use GL30.GL_DEPTH_COMPONENT or GL30.GL_STENCIL_ATTACHMENT formats so there is no real mapping from int format to Format enum.\r\n\r\nI'm not sure how to fix that : \r\n* return null ?\r\n* throw an exception ?\r\n* return a new Format.Unknown ?\r\n* try to map to existing Format enum and if not found, one of the 3 solution above ?\r\n\r\nabout KTXTextureData or throw exception solution, i don't think it's a good idea because client code can't easily know if it should call it or not.\r\n\r\nalso GLOnlyTextureData constructor documentation should be updated to say that some other formats are supported as well.\r\n\r\n#### Reproduction steps\/code\r\ncreate some textures using these implementations either directly or via FrameBuffer builder. And request texture data format.\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nmany i guess including master\r\n\r\n#### Please select the affected platforms\r\nall i guess\r\n","comments":["RGBA4444 seems to me as the best option.  However, I know that some others use RGBA8888 in their games.  I believe the OpenGL version implemented on a device tends to care more about the RGBA4444 or RGBA8888 difference.","Can we close this, please?  Thank you."],"labels":["GL","help wanted"]},{"title":"Added TextureArraySpriteBatch","body":"This optimized SpriteBatch combines draw calls with different textures and employs the LFU replacement strategy to minimize cache thrashing. It can be used as a faster alternative for SpriteBatch in a use case where multiple and\/or alternating Textures are involved.\r\n\r\nThis gives game developers the freedom to:\r\n- have a larger amount of different assets on screen at once\r\n- not have to pack everything into one atlas page for performance\r\n- not have to strictly sort by Texture for performance\r\n\r\nIt implements the Batch interface and is compatible with the rest of the ecosystem. Cache swapping and load statistics are accessible through getTextureLFUSwaps\/Size\/Capacity functions.\r\n\r\nUser supplied Shaders need to take the slightly different set of attributes (texture index) and uniforms (texture array) into account, this is documented though. Apart from that, SpriteBatch and TextureArraySpriteBatch can be used interchangeably.\r\n\r\nSee #5907","comments":["I've tested it on a full game on Desktop, Android and iOS (MobiVM) and everything seems to be working fine. Haven't made any specific profiling, just checked the project behaved as expected on my devices.","Thanks! Good to see it works on iOS too.","Thanks! I don't currently know when\/if it's going to get accepted, haven't gotten any more feedback over the last few weeks.\r\n\r\nNext thing I'll do is make the constants you mentioned consistent, otherwise it's already as clean as can be, so i don't know why the pull request has stalled.","Is there guaranteed from the OpenGL standard that we will never hit `maxTextureUnits < 8`? It is specified that `GL_MAX_TEXTURE_IMAGE_UNITS` is always at least 8, but could there be implementation of OpenGL simply not supporting the texture arrays? I know you throw an IllegalStateException in your code when it reaches 0. Has this ever happened? Would be great to find confirmation somewhere that arrays of 8 textures are **always** supported. Documentation about this is quite succinct from what I've seen.\r\n\r\nIf not, that's really a pain because that means I need to rewrite each of my shaders with both the array and the single texture version and switch from one to the other if it doesn't work. Throw in dynamic lighting into the mix and that's a huge pain. It's true that TextureArraySpriteBatch is a drop in replacement but only if you are always using the default shader. \r\n\r\nAlso, the code you wrote to find the smallest supported number of texture units on any machine by repeatedly creating the shader is great but not really useful if we want to make our own shaders. Perhaps this code should be moved to a `getMaxTextureUnits()` util method which would perform the shader creation to get the actual max numver of texture units?","> It is specified that GL_MAX_TEXTURE_IMAGE_UNITS is always at least 8, but could there be implementation of OpenGL simply not supporting the texture arrays? I know you throw an IllegalStateException in your code when it reaches 0. Has this ever happened? Would be great to find confirmation somewhere that arrays of 8 textures are always supported. Documentation about this is quite succinct from what I've seen.\r\n\r\nYup, there's a good reason that's in there. On Intel HD 3000 (and probably a few other Intel GPUs) the reported number of supported texture units is higher than the actual number, as i found out painfully during testing. The reason i made this an iterative search was that it allows you to find the maximum number of supported texture units instead of just falling back to the minimum number. It also allows you to see if it's unsupported, which is the case if it reaches zero.\r\n\r\n> Also, the code you wrote to find the smallest supported number of texture units on any machine by repeatedly creating the shader is great but not really useful if we want to make our own shaders. Perhaps this code should be moved to a getMaxTextureUnits() util method which would perform the shader creation to get the actual max numver of texture units?\r\n\r\nThat is a good idea, i have an improved version ready now that addresses all the points you brought up. There is now a static getMaxTextureUnits() method that will make creating a custom Shader easier. The value is cached after the first call so it isn't expensive either.","Any update on this PR? When will it be available in SNAPSHOT?","I dunno, maybe it's too untested for mainline LibGDX.\r\n\r\nI just found+fixed a bug on Desktop AMD btw (Adrenaline 20 + RX 570) where the texture array extension was not reported as missing even though it wasn't supported. Fix was to force a specific GLSL version depending on whether GL2 or GL3 was used so that a compiler error gets thrown:\r\n\r\nFor reference: https:\/\/community.amd.com\/thread\/250403\r\n\r\nLong term plan for that is to fall back to an if\/else-ladder or a for-loop.","Reading the bug reference and [this thread](https:\/\/stackoverflow.com\/questions\/12030711\/glsl-array-of-textures-of-differing-size\/12031821#12031821), it seams like indexing samplers from a varying is forbidden. Maybe some drivers are graceful about it but i think it's better to stick to GLSL spec. If that's true, unfortunately this totally ruin the PR. \r\n\r\nanother [reference](https:\/\/stackoverflow.com\/questions\/45167538\/error-sampler-arrays-indexed-with-non-constant-expressions-are-forbidden-in-gl) says that it's illegal since GLSL 3.3 and need special stuff since GLSL 4.0. ","A limited but legal workaround would be to use a literal texture array ([GL_TEXTURE_2D_ARRAY](https:\/\/www.khronos.org\/opengl\/wiki\/Array_Texture)). The only (but pretty huge) limitation is that the texture array must be created beforehand and that all pages must have the same size.\r\n\r\nThat said, it could still be beneficial to modify `TextureAtlas` to produce `TextureArray` instead of an array of `Texture`s and to create a `Batch` variant which does not flush when different page of the same atlas is used. This would still yield the same benefits, albeit only partially, on a texture array\/atlas level.\r\n\r\nMany games can fit all of their textures in the GPU at once, so it would not be hard to pack everything into a single texture array and draw everything in a single drawcall (in the best case).","@Darkyenus GL_TEXTURE_2D_ARRAY is definitely a nice looking alternative. Wouldn't it be possible to rewrite texture pages with `glTextureSubImage3D` lazily into an `GL_TEXTURE_2D_ARRAY` of size `MAX_X * MAX_Y * SLOTS` for example? I guess it depends on how fast `glTextureSubImage3D` is.\r\n\r\nI tried something else for fun in the meantime: Unpacking the index attribute into scalar values that get multiplied with a row of texture units:\r\n\r\n```\r\n#version 150\r\n#ifdef GL_ES\r\n#define LOWP lowp\r\nprecision mediump float;\r\n#else\r\n#define LOWP\r\n#endif\r\nin LOWP vec4 v_color;\r\nin vec2 v_texCoords;\r\nin float v_texture_index;\r\nout vec4 diffuseColor;\r\n\/\/ automatically generated:\r\nuniform sampler2D u_texture01;\r\nuniform sampler2D u_texture02;\r\nuniform sampler2D u_texture03;\r\nuniform sampler2D u_texture04;\r\nuniform sampler2D u_texture05;\r\nuniform sampler2D u_texture06;\r\nuniform sampler2D u_texture07;\r\nuniform sampler2D u_texture08;\r\nuniform sampler2D u_texture09;\r\nuniform sampler2D u_texture10;\r\nuniform sampler2D u_texture11;\r\nuniform sampler2D u_texture12;\r\nuniform sampler2D u_texture13;\r\nuniform sampler2D u_texture14;\r\nuniform sampler2D u_texture15;\r\nuniform sampler2D u_texture16;\r\nvoid main()\r\n{\r\n  int index = int(v_texture_index);\r\n  diffuseColor = vec4(0);\r\n  \/\/ automatically generated:\r\n  diffuseColor +=  float((index & 1) >> 0) * texture(u_texture01, v_texCoords);\r\n  diffuseColor +=  float((index & 2) >> 1) * texture(u_texture02, v_texCoords);\r\n  diffuseColor +=  float((index & 4) >> 2) * texture(u_texture03, v_texCoords);\r\n  diffuseColor +=  float((index & 8) >> 3) * texture(u_texture04, v_texCoords);\r\n  diffuseColor +=  float((index & 16) >> 4) * texture(u_texture05, v_texCoords);\r\n  diffuseColor +=  float((index & 32) >> 5) * texture(u_texture06, v_texCoords);\r\n  diffuseColor +=  float((index & 64) >> 6) * texture(u_texture07, v_texCoords);\r\n  diffuseColor +=  float((index & 128) >> 7) * texture(u_texture08, v_texCoords);\r\n  diffuseColor +=  float((index & 256) >> 8) * texture(u_texture09, v_texCoords);\r\n  diffuseColor +=  float((index & 512) >> 9) * texture(u_texture10, v_texCoords);\r\n  diffuseColor +=  float((index & 1024) >> 10) * texture(u_texture11, v_texCoords);\r\n  diffuseColor +=  float((index & 2048) >> 11) * texture(u_texture12, v_texCoords);\r\n  diffuseColor +=  float((index & 4096) >> 12) * texture(u_texture13, v_texCoords);\r\n  diffuseColor +=  float((index & 8192) >> 13) * texture(u_texture14, v_texCoords);\r\n  diffuseColor +=  float((index & 16384) >> 14) * texture(u_texture15, v_texCoords);\r\n  diffuseColor +=  float((index & 32768) >> 15) * texture(u_texture16, v_texCoords);\r\n  diffuseColor *= v_color;\r\n}\r\n```\r\n\r\nI tried something with branching before and it was slower. This is just as fast as the previous solution on Desktop at least, mobile can't handle it because of the integer operations i assume.\r\n\r\nI might check out GL_TEXTURE_2D_ARRAY next when i have the time to.","both bitwise operations and GL_TEXTURE_2D_ARRAY require GLSL 130+ (OpenGL3+, GLES 3+).\r\n\r\nI'm surprised you have same performances by fetching 16 texels, maybe your GPU optimize it at runtime when left operand is zero? ","It's possible that either the GPU has enough resources to keep it all in cache or it really creates different versions of the program. What i can tell is that it can't be doing a whole lot of branching, that would make it much slower.\r\n\r\nI'll definitely check out GL_TEXTURE_2D_ARRAY for a long term solution though, since it has the potential to also be fast on mobile.","I think that it would also be possible to create a `Batch` which creates the texture array at draw-time, and I can imagine that it would be very beginner friendly, while providing a good performance. However, at that point, it might be better to not use texture atlases at all and to create an API which lets beginners just load whatever images they want and the `Batch` would pack it into an internal texture atlas array at runtime. It would have its limitations (possibly dropped frames while uploading new textures, can't really mix different texture filtering\/clamping modes), but I can see it being useful for quick prototyping or beginners. However, it would imply a lot of new APIs inside libGDX, which would exist just to support this feature, and it wouldn't fit very well among other paradigms and design patterns already in place.","You can already pack at runtime with PixmapPacker. There is value in being able to use multiple textures without wrecking batching. For example, when not everything fits in a single texture or when using incremental fonts that have a different texture from the rest of the UI.","Well, i got an working prototype of the ArrayTextureSpriteBatch now that uses `GL_TEXTURE_2D_ARRAY`.\r\n\r\nIt requires GL 4.3 (or whatever the minimum to enter GLES 3.0 emulation mode is?) on desktop and GLES 3.0 on mobile. I could confirm it working on a GTX960 and a RX570, as well as on more recent smartphones. Edit: Also works on my 6yo Xiaomi Mi3 now (supports ES 3.0).\r\n\r\nThe only ones out of luck are pre-2013\/14 Intel HD Graphics laptops that do not support GL 4.3 or above. I don't think this is a gamebreaker though, a fallback to the normal SpriteBatch is easy to implement:\r\n```\r\ntry {\r\n    spriteBatch = new ArrayTextureSpriteBatch(numSpritesPerBatch);\r\n} catch (Exception e) {\r\n    spriteBatch = new SpriteBatch(numSpritesPerBatch);\r\n}\r\n```\r\n\r\nI also found out that using a FBO for copying directly on the GPU is possible: https:\/\/stackoverflow.com\/questions\/34780778\/opengl-in-gpu-texture-to-texture-copy\r\n\r\nThis works much better then expected, not only is it fast, it is so fast that you can swap textures in and out of the array texture without the framerate going down. This is finally going somewhere!\r\n\r\nThings that work:\r\n- The usual Batch functionality\r\n- Fast Texture to ArrayTexture copying allows texture-swapping without frame drops\r\n- Supports differently-sized Textures as long as they are smaller than \/ equal to the ArrayTexture\r\n\r\nThings that do not work:\r\n- Different Texture formats\/filters\/clamping modes in one array texture are impossible\r\n- GL20 support is out of the question\r\n\r\nI'll push something once it's cleaned up and stable.","@VaTTeRGeR Nice work. Shouldn't it work on OpenGL 3.2 (not ES) as well? `GL_TEXTURE_2D_ARRAY` is supported there and the texture-to-texture copying seems to be too, though I didn't check too closely. (Macs, at least older ones, don't support OpenGL 4 and up, even with a compatible GPU.)","@Darkyenus If it is possible to start a LibGDX application with Gdx.gl30 available under Version 3.2 then probably yes. I do not have any such device here to confirm that, but when I tried my demo on a laptop with support for up to Version 4.1 LibGDX would not start up in GL30 mode.\r\n\r\nWasn't it also the case that useGL30=true emulates the featureset of GLES 3.0 which would be equivalent to GL 4.3 on desktop?","There it is \ud83d\ude00 Feedback is welcome!\r\nEdit: Did a little bit of an oopsie with the texture scaling factors. brb.","> Also, some sort of thrashing detection and warning could be useful, especially for development.\r\n\r\nThere already is the `getTextureLFUSwaps` method that you can query for texture swaps as well as the `getTextureLFUSize\/Capacity` methods to find out how well you are utilizing your space.\r\n\r\nThe refined cache strategies are pretty much leftovers at this point, a redesign of this with a focus on finding residential but not utilized textures as candidates for swaps would be a good idea.\r\n\r\nThe formatting was the work of the LibGDX Eclipse-formatting-script\/tool\/presets\/thingy.\r\n\r\nThanks for the detailed feedback!","Hey there, thanks for your work! Are there any updates on when we can test this in a snapshot? I'm really curious to test this \ud83d\ude04 ","If you want to test it right now the easiest way would be to just copy ArrayTextureSpriteBatch.java into your project, it's a single file addition.\r\n\r\nCould any of the LibGDX devs enlighten me to what is still missing for this pull-request to progress? This is my first pull-request so i could be overlooking something.","I'm not terribly familiar with the intricacies involved or the best way to build this solution. I can say that when we keep seeing commits on the PR over time, it suggests that it isn't ready. That's OK, just signal when you feel it is ready.","Its OK as this is very standalone. I don't have a problem having this merged and built upon.\r\n\r\nPerhaps we mark it as WIP\/Experimental?","Ok, that is good to hear, implementation-wise i have nothing major to add at this point.\r\n\r\nI'm going to go over the documentation one last time now, clean it up, add some disclaimers and push that as \"Experimental Test Candidate\".","@VaTTeRGeR i was browsing Gdx TextureArray code (for some other reasons), and i think mipmaps option is not implemented yet, that could be a limitation for your Batch.","That is no problem since i do not use that class. It doesn't provide the interface i need\/want for this Batch so i used GL commands directly. The current version of ArrayTextureSpriteBatch supports mipmaps. They are automatically enabled and built if you select the respective filtering mode.","LWJGL3 should allow mipmaps in this code any how.  The 3D would not care in that regard, although it uses it.  Texture objects requires Vector data in order to use mip maps.  As long as the ArrayTextureSpriteBatch.java correctly works for normal Texture objects, then there should be no issue at all with our present code base.\r\n\r\nThis should work wonders with the GLTF implementation.  Use the Android FIDO dependency if you need to test for mip maps in your present 3D code.  Unfortunately, I can not right now.\r\n\r\nThis should help with testing OpenGL ES 2.0+ support in Android if you want.\r\n\r\n`api \"com.google.android.gms:play-services-fido:18.1.0\"`","I haven't looked over this yet, but want to mention I made #4487 a while ago to solve this problem without any need for an extra type of SpriteBatch, and it includes support for creating TextureAtlases that utilize TextureArrays, so you can create multi-page atlases that don't cause flushes when switching between pages. It also includes some TextureArray refactoring to improve its inheritance and handling of context loss.","I remember that i had a look at your PR before i started developing this alternative Batch. I didn't like that it requires different texture\/atlas classes and lots of changes to existing classes, so i made this Batch for the sake of simplicity.\r\n\r\nThe advantage of this solution: It is a drop-in replacement that avoids changes to existing classes by managing the array texture internally. It just works with the existing environment. This comes at the cost of some overhead (albeit minimized by GPU-to-GPU texture copy) when rendering a texture for the first time, since it needs to be copied into the array texture that acts as a cache.\r\n\r\n\r\nMigrating from SpriteBatch to ArrayTextureSpriteBatch is as easy as replacing:\r\n\r\n`batch = new SpriteBatch(...);`\r\n\r\nwith\r\n\r\n`batch = new ArrayTextureSpriteBatch(...);`\r\n\r\nand you're good to go. This also allows for an easy fail-over in case gl30 isn't available:\r\n\r\n```\r\ntry {\r\n\tspriteBatch = new ArrayTextureSpriteBatch(...);\r\n} catch (Exception e) {\r\n\tSystem.err.println(e.getMessage());\r\n\tspriteBatch = new SpriteBatch(...);\r\n}\r\n```\r\n\r\nWhat i want to say is: This is a solution that can be used by any LibGDX developer with minimal effort and changes to their code base (literally just one line of code + enabling gl30).\r\n\r\nHow does the usage look like with your solution, do i have to decide between ArrayTexture\/Atlas and normal Texture\/Atlas when loading the assets? I couldn't deduce that from looking at your PR, so maybe i got the wrong impression there.","My version has you load your TextureAtlas as TextureArrayAtlas instead. So long as the pages are the same size, it is compatible. I added the option in TexturePacker to force same-sized pages. \r\n\r\nSpriteBatch works with TextureArrayAtlas as-is if you give it a shader that supports unpacking the page from the texture coordinates. Such a shader would also work with a regular TextureAtlas, so you could use the same SpriteBatch instance for drawing traditional TextureRegions and TextureRegions that are part of a TextureArrayAtlas, even without swapping shaders.\r\n\r\nSo I would say the differences in the PRs are that \r\n\r\n* Yours automates everything by switching to the other class, at the expense of reloading\/redrawing to an FBO.\r\n* Mine requires you to have a TextureArray in mind when you pack your atlas, but the textures are loaded directly from file to GL texture atlas at run-time. You must also manually use a different shader with the SpriteBatch (but the alternate shader does work with non-array textures).\r\n* Mine tweaks some code in TextureAtlas so the subclassed TextureArrayAtlas can reuse most of the code, whereas your TextureArraySpriteBatch adds hundreds of lines of copy-pasted code from SpriteBatch. I think mine looks more invasive than it really is at first glance because I added a bunch of files for the test classes.\r\n* Mine requires refactoring of TextureArray to extend from Texture. But in my opinion this is a clean-up that also fixes some missing features of TextureArray.\r\n\r\nSo there's pros and cons to each.",">SpriteBatch works with TextureArrayAtlas as-is if you give it a shader that supports unpacking the page from the texture coordinates.\r\n\r\nThat's a really big IF right there. I'm going to be a bit of an asshole and ask: Does the average LibGDX user even know how or want to write and handle their own shaders?\r\n\r\n> at the expense of reloading\/redrawing to an FBO.\r\n\r\nNot per render-cycle though, once per application life-cycle, unless you initialize the Batch with insufficient space, forcing it to swap.\r\n\r\n> whereas your TextureArraySpriteBatch adds hundreds of lines of copy-pasted code from SpriteBatch.\r\n\r\nIt's the other way around, i took SpriteBatch and added my sauce \ud83d\ude01 \r\n\r\nI think these solutions are not mutually exclusive, existing users will not benefit from the ArrayTexture\/Atlas classes unless they change their entire asset pipeline and loading routine towards these. New projects could definitely benefit from having a working, accessible abstraction for array textures to build upon though.","FWIW I would welcome both PRs. Providing multiple APIs with different performance\/complexity tradeoffs seems to be in the spirit of libGDX. Both PRs make sense, can be useful, and don't conflict with each other. They just fill a similar niche.","@VaTTeRGeR Wow an excellent PR. I'll be using this as is and won't be waiting for a snapshot.\r\n\r\nOne minor addition for this if you can: add functionality to update a layer. Users that create a texture on the fly with an FBO, should have the ability to update the layer in the array texture since the image data could change down the line. Of course management and lifecycle will be the user's responsibility.\r\n\r\n\r\n\r\n","@xGnoSiSx That's a good idea!","@VaTTeRGeR I'll try just making copyTexture public for now and play with it, although I imagine it might be more involved.\r\nI have a texture where I dynamicaly load assets (units, icons, masks etc), and reserve texture space for them, on the fly as the player acts\/moves. ","I'm totally with @Darkyenus.\r\nI like both implementations and both will force me to rewrite all my custom shaders (which is worth it for sure).\r\nWhy can't we have both?\r\n","@xGnoSiSx\r\n> I'll try just making copyTexture public for now and play with it, although I imagine it might be more involved.\r\n\r\nIt should be as simple as removing the texture id entry from the cache table. That will make the Batch forget the texture, causing a reload. Or the copying get's done directly without altering the cache table, which would give the user control over when the upload get's executed. I think the latter is the better option.\r\n\r\nThe method signature would be: `void reloadTexture(Texture texture) {...}`\r\n\r\nAn even more useful version of this method would have the effect that a not-yet-cached texture gets loaded when calling it. This would enable the developer to pre-load new texture-sets in for example a loading screen. I'll explore that a bit.","@xGnoSiSx This should do the trick.","@VaTTeRGeR Not only did you do the work, but you also added the solution for the use case of preloading the textures! Stellar!","@xGnoSiSx Glad you like it! Does everything work like expected? You should be able to update a few textures per frame until it goes overboard with the OpenGL overhead.","@xGnoSiSx @TCreutzenberg did you try the batch in your projects and got the expected performance improvements?","@crykn I didn't do any profiling but I can tell you what my debug logging and observations shows me.\r\n\r\nWith the standard SpriteBatch the game runs with a steady 60 fps. About once every 2 seconds I have a \"slow\" frame which takes about 20 - 24ms (instead of the expected 16 - 17ms)\r\n[It still adds up to 60fps even with the \"slow\" frame]\r\n\r\nWith the TextureArraySpriteBatch everything also runs steady with 60 fps. I get the \"slow\" frames less often, about one every five seconds, but the \"slow\" frame takes longer than before. It's about 40 - 45ms.\r\nI have no clue or idea why this happens.\r\nFor me the longer \"slow\" frame results in a much more noticable lag\/stutter when there are fast moving objects around, so it is less desirable for me at the moment.\r\n\r\nFor now I will stay with the SpriteBatch and will try the TextureArraySpriteBatch again when I'm further into development to see how things behave then.","@TCreutzenberg Hmm, seems like you have some serious underlying problems, you should build yourself a little profiler that measures the execution times of your subsystems and simultaneously tracks big garbage collection events via Runtime.getXXX(), you would be suprised at how useful this is vs just measuring the overall frametime.\r\n\r\nAlso try the new ShenandoahGC. It reduces GC Pauses drastically at the cost of some 10% of average throughput.","Yes, most likely I have issues as I didn't do any profiling yet. I just don't understand the level of consistency of the difference of the lags for both batches.\r\nI guess this will behave different for different projects and I'll definitely come back and will try it again later in my development cycle \ud83d\ude01","Btw, I found the problem of my \"long frames\": I was using the Lwjgl2 backend for desktop and not the Lwjgl3 one. now it works fine. Seems it had nothing to do with garbage collection or other performance stuff...","@VaTTeRGeR Awesome work! My game went from ~100 render call per frame to 9 max so far!\r\nThis is ideal in scenarios where all your sprites cannot fit into a single spritesheet (LPC spritesheet typically) and you use Y ordering (so you cannot groups the draw calls of entities with the sames textures).\r\nEven more useful when a single entity require multiples textures to be drawn : ie dynamic equipment system with texture applied on top of each others.\r\n\r\n\r\nMy only issue is regarding box2d light which doesn't work anymore see the stack trace:\r\n```\r\nException in thread \"LWJGL Application\" org.lwjgl.opengl.OpenGLException: Cannot use Buffers when Array Buffer Object is enabled\r\n\tat org.lwjgl.opengl.GLChecks.ensureArrayVBOdisabled(GLChecks.java:71)\r\n\tat org.lwjgl.opengl.GL20.glVertexAttribPointer(GL20.java:855)\r\n\tat com.badlogic.gdx.backends.lwjgl.LwjglGL20.glVertexAttribPointer(LwjglGL20.java:829)\r\n\tat com.badlogic.gdx.graphics.glutils.ShaderProgram.setVertexAttribute(ShaderProgram.java:658)\r\n\tat com.badlogic.gdx.graphics.glutils.VertexArray.bind(VertexArray.java:115)\r\n\tat com.badlogic.gdx.graphics.Mesh.bind(Mesh.java:511)\r\n\tat com.badlogic.gdx.graphics.Mesh.bind(Mesh.java:502)\r\n\tat com.badlogic.gdx.graphics.Mesh.render(Mesh.java:612)\r\n\tat com.badlogic.gdx.graphics.Mesh.render(Mesh.java:582)\r\n\tat box2dLight.PositionalLight.render(PositionalLight.java:87)\r\n\tat box2dLight.RayHandler.render(RayHandler.java:323)\r\n\tat box2dLight.RayHandler.updateAndRender(RayHandler.java:269)\r\n```\r\n\r\nBut I guess it is expected since it was not implemented with this in mind.\r\n\r\nI haven't much time to look at the code yet but this look very promising so far. Good job again!\r\nWhat is the state of this PR ? Is there any plan for it to be merged ?","@jhoukem Thanks! Does the error still appear if you use the normal SpriteBatch for Box2dLights and the modified one for everything else?\r\n\r\nI have no idea if\/when this is getting integrated, there could be better ways to implement this, but LibGDX seems to be stuck at the current OpenGL version because of the whole multi-platform thing. They might never integrate this, since it's not a perfectly clean solution and depends on GLES3.0 being enabled...","Box2d light does not use any spritebatch instead every lights renders in its own way using a mesh directly so I guess it expect the GL context to be in a specific state which it is not thus the failure.\r\nWhen you say it is not a perfectly clean solution what do you refers to exaclty ? The GLES2.0 support ? Something else ?\r\n\r\n\r\n","- Requires GLES 3.0, not problematic in this day and age but meh\r\n- Shaders are different (layer index, texture access, etc)\r\n- A whole separate class with new options for users to understand\r\n- hefty performance penalty when exceeding the texture cache size (texture copying)\r\n- Resulting incompatibilities with other LibGDX stuff\r\n\r\nThis is basically a special purpose class. I'm glad i made it, since it enables multi-atlas sprite rendering to be fast despite using LibGDX, but it's not exactly in the core spirit of LibGDX.\r\n\r\nI'll see if i can do something about the messed up OpenGL context, this might be the solution: http:\/\/forum.lwjgl.org\/index.php?topic=3322.0"],"labels":["enhancement","graphics"]},{"title":"[FEATURE PROPOSAL W\/ IMPLEMENTATION] Faster SpriteBatch: Texture Array with LRU replacement strategy.","body":"There is a link to a working implementation for this suggestion right before the Benchmark section of this post. Yes, i have read some previous takes on this, like #4398. This solution gets by without the use of [ArrayTexture](https:\/\/www.khronos.org\/opengl\/wiki\/Array_Texture) or slow if-else ladders. I think i have something workable here, maybe i'll add an implementation for the Batch-interface later on, right now i only have a modified version of the SpriteBatch that is specific to my games needs.\r\n\r\n#### Issue summary\r\nThe current SpriteBatch implementation doesn't make very good use of OpenGLs capabilities: It wastes performance by issuing a draw call (flushing) at every texture change (calling draw with a different texture), this can cause massive performance decreases when using a texture atlas consisting of more than one texture page.\r\n\r\nI implemented an improved version of the SpriteBatch and Sprite to remove this limitation, based on a Tutorial by [The Cherno: Batch Rendering - Textures](https:\/\/www.youtube.com\/watch?v=bw6JsLnx5Jg)\r\n\r\n#### Reproduction steps\/code\r\nRender lot's of Sprites on a SpriteBatch with and without alternating Textures: [TexA, TexB, TexA, TexB...] vs [TexA, TexA, TexA, TexA, TexB...]. With the current SpriteBatch implementation the number of draw calls is proportional to the number of texture switches, dragging down the performance in games with lot's of textures in use in one scene. Yes, you could sort by texture before rendering, but in many games this isn't possible since you may need a specific draw order for your sprites.\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nUp to and including: 1.9.10\r\n\r\n#### Proposed Solution\r\nUsing a texture array instead of a single texture uniform in the fragment shader and passing the selected texture unit for each sprite as an vertex-attribute, this is surprisingly easy to implement! The Texture replacement should be done with the Least Recently Used (LRU) strategy to avoid constant switches once the texture units are all used up by other textures. All OpenGL features used in my implementation are GL20 compatible AFAIK.\r\n\r\n#### Drawbacks\r\nEdit: I have a working solution now, the drawbacks are mostly that you loose some small percentage of performance (more complex fragment shader) when using the same texture all the time, but why would you then use this Batch in the first place? Also this thing hasn't been tested on iOS and WebGL yet, but it definitely works on Android and Desktop.\r\n\r\n#### Reference Implementation\r\nEdit: Fully SpriteBatch-compatible [TextureArraySpriteBatch](https:\/\/github.com\/VaTTeRGeR\/orts_game\/blob\/master\/game_src\/com\/badlogic\/gdx\/graphics\/g2d\/TextureArraySpriteBatch.java) available!\r\n\r\n#### Benchmarks\r\nHere are some performance comparisons with 9 active Textures and different numbers of usable Texture Units, the first one acts like the old SpriteBatch and runs at 12 fps, mostly because my GPU (GTX960) can't handle the amount of draw calls:\r\n![1_LRU_SpriteBatch](https:\/\/user-images.githubusercontent.com\/5089550\/73976416-8a896100-4928-11ea-85af-3e2e581e7c6d.jpg)\r\n\r\nEven a small LRU Texture Cache (3 LRU) improves the performance a lot:\r\n![3_LRU_SpriteBatch](https:\/\/user-images.githubusercontent.com\/5089550\/73976417-8bba8e00-4928-11ea-9a7b-cbbc99f83e77.jpg)\r\n\r\nWith more LRU slots than Textures (16 LRU for 9 Textures) it runs smoothly at 60 fps, most modern cards support 32 Texture Units, so you could have 32 independent textures without any significant slowdown compared to using a single texture:\r\n![16_LRU_SpriteBatch](https:\/\/user-images.githubusercontent.com\/5089550\/73976418-8bba8e00-4928-11ea-8a56-789af4d188c4.jpg)\r\n\r\nThe effectiveness of this optimization depends on how often you switch textures within one drawing session of course and not so much on the amount of textures in use. What's shown above isn't a worst case demonstration, the benefit might be larger or smaller than this, depending on the use case.","comments":["I think you could avoid changing Sprite, by keeping the texture unit stuff only in your SpriteBatch. Also, if you can implement the Batch interface, that would make the impact minimal (or non-existent) on existing users - it's simply another option for people to use in place of the normal SpriteBatch.\r\n\r\nI didn't look too closely at your changes but those were first things that come to my mind.","I agree, the more I look into it the better a custom Batch implementation looks to me. The only problem is the Sprite class, the Vertex attribute locations and sizes are hardcoded, the most promising workaround would be to let the optimized spritebatch inject the needed Vertex attributes while it copies the vertices. That would make the optimized Batch work with the unmodified Sprite class.","Interesting to see the performance on mobile for this. Have you ran any tests?","TL;DR Not yet. I can run a test on a weak Intel HD 3000 GPU afterwards though.\r\n\r\n**Edit: Also works on the piss weak laptop GPU and improves the performance. The max supported OpenGL version was 3.1 on that machine. Detecting the number of available texture units is still a challenge though, reading GL20.GL_MAX_TEXTURE_IMAGE_UNITS returned 16 but 8 was the real limit...**\r\n\r\nMobile devices should benefit from the reduction of draw calls but might suffer slighly from the extra cpu overhead. I have the \"#version 110\" flag set in the fragment and vertex shader, so i hope the texture array also works on mobile. I can't test it on there yet though, since i do not have a mobile project nor Android export set up.\r\n\r\nSince this is going to be a drop in replacement i would be very thankful if someone could paste the new batch class into his running project and give it a spin once it is ready (I still need to implement the other 11 draw methods...). It will work as a drop in replacement.\r\n\r\nHere's a quick plot with \"texture unit count\" vs \"draw calls\" for ~15000 sprites with ~9 textures and different LRU sizes with linear and log scale:\r\n![lru_linear_plot](https:\/\/user-images.githubusercontent.com\/5089550\/74034307-4f367300-49b8-11ea-86d0-2cb16d44bfc7.jpg)\r\n![lru_log_plot](https:\/\/user-images.githubusercontent.com\/5089550\/74034310-4fcf0980-49b8-11ea-8d09-2ebcc54c6f8d.jpg)\r\n\r\nThat's a reduction from ~9300 to 7 draw calls. Draw calls get halved per LRU step.","It should work, but its a different gl implementation, gles vs gl, so they are not 100% directly comparable. \r\n\r\nThey will benefit from reduced draw calls, no denying that. \r\n\r\nBut there can be trade offs that effect mobile worse because of the mobile gpu compilers not being able to optimize very well. This could be similar to creating dependent texture reads. In a trivial case of this implementation, the per-line cycle estimate goes from 4-10 using an array of textures where the index is coming from calculation that is not from a varying (which is your case as you are casting float varying to int), which is quite the overhead.\r\n\r\n","Lots and lots of small tweaks and fixes later - now it works on both Android and Desktop:\r\n\r\n[TextureArraySpriteBatch.java](https:\/\/github.com\/VaTTeRGeR\/orts_game\/blob\/master\/game_src\/com\/badlogic\/gdx\/graphics\/g2d\/TextureArraySpriteBatch.java)","**And finally, an Android benchmark! You can test how your phone handles it, the built APK is included under \"\/android\/android-debug.apk\".**\r\n\r\nThe demo shows 4 cases, i tried it on my Xiaomi Mi3W \/ Asus Zenfone Max M2: \r\n- ABABABAB pattern with SpriteBatch -> Slow (~250ms \/ 175ms)\r\n- **ABABABAB pattern with TextureArraySpriteBatch -> Fast (~7ms \/ 7ms)**\r\n- AAAAAAAA pattern with SpriteBatch -> Faster (~3ms \/ 5ms)\r\n- **AAAAAAAA pattern with TextureArraySpriteBatch -> Fast (~5ms \/ 6ms)**\r\n\r\nSource + APK: [libgdx-project.zip](https:\/\/github.com\/libgdx\/libgdx\/files\/4173267\/libgdx-project.zip)\r\n\r\n\r\nSo far it looks good, the behavior is as expected :) SpriteBatch can't handle the draw calls when filling the screen in an ABABABAB pattern, while TextureArraySpriteBatch handles it nicely. Some percentage of performance is lost if you use an AAAAAAAAA pattern with the TextureArraySpriteBatch vs SpriteBatch, but i don't think it's significant compared to the benefits.","@VaTTeRGeR \r\nThis looks really good. Great Job!\r\nI don't care that much for iOS - but if anyone with hardware and RoboVM experience could test this it would make it so much better.\r\nI would love to have this as an option merged in libgdx or as a stand alone lib.","Awesome will take a look!","@xGnoSiSx \r\nThanks!\r\n\r\nIf none of you find any bugs or errors in the documentation I'll open a pull request at the end of this week.\r\n\r\nI reckon it's at least at a good level of stability. I did some rigorous bug-squishing, ironing out and optimizing over the weekend.","Ive tested on iOS and MacOS. MacOS seems to work just fine, as expected. On iOS there are few issues due to differences in `IntBuffer` implementation in RoboVM. Perhaps there is a smarter way to fix this, but heres what i come up with.\r\n\r\nRoboVM Issues Ive found (by it exploding). Generally casting directly to Buffer seems to fix the problem.\r\n\r\nIn constructor():\r\n`Gdx.gl.glGetIntegerv(GL20.GL_MAX_TEXTURE_IMAGE_UNITS, (IntBuffer)texUnitsQueryBuffer.position(0));`\r\nIm not certain setting position(0) does anything in this context as it is supposed to be a new buffer, passing it in directly works.\r\nIt can also be moved up a line `((Buffer)texUnitsQueryBuffer).position(0);`.\r\n\r\nAlso\r\n`((Buffer)textureUnitIndicesBuffer).flip();`\r\n\r\nin flush():\r\n```java\r\n((Buffer)mesh.getIndicesBuffer()).position(0);\r\n((Buffer)mesh.getIndicesBuffer()).limit(count);\r\n```\r\n\r\n\r\nTested on devices with 11.4.1, 12.4.1, 14.2. Ive seen roughly 6-11x improvement in alternate test, more on slower devices as expected. Slightly slower on non alternating test.\r\n\r\nE: scrap that, seems the issue is this: https:\/\/stackoverflow.com\/questions\/48693695\/java-nio-buffer-not-loading-clear-method-on-runtime\r\n","I have also noticed the cast to Buffer working as a fix whenever I have a variant on SpriteBatch or some other NIO-buffer-using class in my code, and my code gets compiled by Java 9 or higher. There's also been some odd reports on the Discord of NIO Buffer-related code failing in similar ways, where `position(int)` isn't defined on `IntBuffer` or `ByteBuffer`. Does anyone else think we should preemptively change calls to `Buffer` methods to cast an `IntBuffer`\/`ByteBuffer`\/`ShortBuffer` to a `Buffer` before using, so if we ever have to change the build system to use newer Java, it won't suddenly break?","This `ArrayTextureSpriteBatch` not working with spine?\r\nAnd this not work on html, because GL30 not support."],"labels":["enhancement","GL"]},{"title":"Workaround for macOS OpenGL performance issues.","body":"Some macOS users experience a large performance degradation rendering 3D with default ModelBatch settings. This workaround seems to greatly alleviate this issue. ~~This issue may be specific to AMD graphics drivers, and if so we may want to limit this workaround to AMD GL renderer strings.~~ Update: Third link says it also afflicts nvidia\r\n\r\nIf there are any better ways to handle this, I'm all ears.\r\n\r\nUIUtils.isMac used because it already handles gwt emulation [here](https:\/\/github.com\/libgdx\/libgdx\/blob\/a4805d6a017b80622d6bfdd3a791352257a3c539\/backends\/gdx-backends-gwt\/src\/com\/badlogic\/gdx\/backends\/gwt\/emu\/com\/badlogic\/gdx\/scenes\/scene2d\/utils\/UIUtils.java#L10).\r\n\r\nSee:\r\n- https:\/\/stackoverflow.com\/questions\/42238124\/gldrawelements-on-osx-has-high-cpu-usage#\r\n- https:\/\/badlogicgames.com\/forum\/viewtopic.php?f=11&t=26738\r\n- https:\/\/stackoverflow.com\/questions\/16415037\/opengl-core-profile-incredible-slowdown-on-os-x\/17115997#17115997","comments":["This would just disable any mutli-texturing, no? Also the first and last link (the second being undetermined) seem to be talking about two different things. They might be related, but that would be need to be confirmed.",">This would just disable any mutli-texturing, no?\r\n\r\nEffectively yeah.\r\n\r\n>Also the first and last link (the second being undetermined) seem to be talking about two different things. They might be related, but that would be need to be confirmed.\r\n\r\nLooks like it yeah, I was linked to it after I made the PR and it looked like the same issue, but seems it's only similar. The underlying cause might be the same, but you're right we should verify this.","not sure it disable multi-texturing, i think it forces to use texture unit 1 (not zero), see [ModelBatch default texture binder offset](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/graphics\/g3d\/ModelBatch.java#L82).\r\n\r\nI agree, it needs more tests to confirm what's the issue exactly. I'd try several things: ROUND_ROBIN method, force to texture unit 0, other units, force count to 2, more. Also, take a look at GLProfiler stats : how many shader switches you have, what behavior with less switches. I don't have Mac hardware so i can't help.\r\n\r\nIf issue is confirmed, i would add a new binding strategy (method) \"DISABLED\" instead of forcing count\/offset. Also add some documentation to warn users that parameters could not be used. It's a breaking change if user code rely on texture slots.","Well then it might work for 2 textures, but for any more it won't. \r\n\r\nWere you experiencing this issue yourself @PokeMMO ?",">Were you experiencing this issue yourself @PokeMMO ?\r\n\r\nNot personally, but another member of my team has recreated it. (Along with a slow, but steady stream of player complaints)\r\n\r\nSetting it to round-robin, offset to 0, count to 2 still has the issue. The only time we've gotten decent results seems to be with count 1.\r\n\r\nIt seems to me the issue is more in the *changing* of the texture index instead of what it actually is. So offset 1 vs offset 0 has a minimal difference.","I've deployed this workaround and have confirmation that this resolves the issue from several users.","This PR can't be merged as is because it disable multi texturing. In order to prevent texture unit changes, a clean solution would be :\r\n- to track already set units in BaseShader\r\n- call texture binder #bind with a \"preferred\" unit (API change required in texture binder)\r\n- and have a new DefaultTextureBinder method \"no recycling\" which always bind to the preferred unit.\r\n\r\nHowever, since it seams related to some weird macos driver, i'm not sure it worth to make that change since it could cause more texture switches with good mac drivers.\r\nAs per @PokeMMO :\r\n* Intel GPUs are probably not affected\r\n* some Nvidia are (unconfirmed), some Nvidia aren't\r\n* some AMD are (confirmed)\r\n\r\nSo, we don't have enough information to choose at runtime between Minimize texture switches VS minimize shader unit changes.","https:\/\/github.com\/servo\/pathfinder\/pull\/337 seems to be resolving the same\/a similar issue on another project. Their solution seems like it might be a better one."],"labels":["GL"]},{"title":"Crashes not loading libgdx.so on certain devices","body":"Please ensure you have given all the following requested information in your report.\r\n\r\n#### Issue details\r\nWe see some amount of crash reports from certain devices when loading libgdx games.\r\n\r\n#### Reproduction steps\/code\r\nSeeing crash reports from firebase.\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.10\r\n\r\n#### Stacktrace\r\n```java\r\nCaused by com.badlogic.gdx.utils.GdxRuntimeException\r\nCouldn't load shared library 'gdx' for target: Linux, 32-bit\r\ncom.badlogic.gdx.utils.SharedLibraryLoader.load (SharedLibraryLoader.java:125)\r\ncom.badlogic.gdx.utils.GdxNativesLoader.load (GdxNativesLoader.java:33)\r\ncom.badlogic.gdx.backends.android.AndroidApplication.<clinit> (AndroidApplication.java:60)\r\njava.lang.Class.newInstance (Class.java)\r\nandroid.app.Instrumentation.newActivity (Instrumentation.java:1078)\r\nandroid.app.ActivityThread.performLaunchActivity (ActivityThread.java:2558)\r\nandroid.app.ActivityThread.handleLaunchActivity (ActivityThread.java:2727)\r\nandroid.app.ActivityThread.-wrap12 (ActivityThread.java)\r\nandroid.app.ActivityThread$H.handleMessage (ActivityThread.java:1478)\r\nandroid.os.Handler.dispatchMessage (Handler.java:102)\r\nandroid.os.Looper.loop (Looper.java:154)\r\nandroid.app.ActivityThread.main (ActivityThread.java:6121)\r\njava.lang.reflect.Method.invoke (Method.java)\r\ncom.android.internal.os.ZygoteInit$MethodAndArgsCaller.run (ZygoteInit.java:889)\r\ncom.android.internal.os.ZygoteInit.main (ZygoteInit.java:779)\r\nde.robv.android.xposed.XposedBridge.main (XposedBridge.java:107)\r\nCaused by java.lang.UnsatisfiedLinkError\r\ndlopen failed: library \"\/system\/lib64\/libgdx.so\" needed or dlopened by \"\/system\/lib64\/libnativeloader.so\" is not accessible for the namespace \"classloader-namespace\"\r\n```\r\n\r\n#### Please select the affected platforms\r\n- [ X] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["Please supply a basic code sample that can be used to reproduce.\r\nAlso, if it happens on specific devices please specify which.","In your stacktrace xposed is used.\r\nSo maybe caused by xposed?","I might be wrong, but these lines look like they contradict:\r\n\r\n> Caused by com.badlogic.gdx.utils.GdxRuntimeException\r\n> Couldn't load shared library 'gdx' for target: Linux, 32-bit\r\n\r\n> Caused by java.lang.UnsatisfiedLinkError\r\n> dlopen failed: library \"\/system\/lib64\/libgdx.so\" needed or dlopened by \"\/system\/lib64\/libnativeloader.so\" is not accessible for the namespace \"classloader-namespace\"\r\n\r\nThe first mentioning 32 bit, when the second is looking for 64 bit.",">I might be wrong, but these lines look like they contradict:\r\n\r\nThis is just a nuance of how Android is handled in SharedLibraryLoader\r\n\r\nhttps:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/utils\/SharedLibraryLoader.java#L52-L57","So on an unrelated note, I think that should be fixed.\r\nI'll try to look into it when I'm by a PC.","Ah it seems like these crashes are from more likely from rooted devices according to Firebase report . Some example devices:  Mi 9X,   Pixel, TaintArt for x86\r\n\r\nThis is a longer stack trace\r\n> \r\n> Fatal Exception: java.lang.ExceptionInInitializerError\r\n> java.lang.Class.newInstance\r\n> Caused by com.badlogic.gdx.utils.GdxRuntimeException\r\n> Couldn't load shared library 'gdx' for target: Linux, 32-bit\r\n> com.badlogic.gdx.utils.SharedLibraryLoader.load (SharedLibraryLoader.java:125)\r\n> com.badlogic.gdx.utils.GdxNativesLoader.load (GdxNativesLoader.java:33)\r\n> com.badlogic.gdx.backends.android.AndroidApplication.<clinit> (AndroidApplication.java:60)\r\n> java.lang.Class.newInstance (Class.java)\r\n> com.android.internal.os.ZygoteInit.main (ZygoteInit.java:779)\r\n> de.robv.android.xposed.XposedBridge.main (XposedBridge.java:107)\r\n> Caused by java.lang.UnsatisfiedLinkError\r\n> dlopen failed: library \"\/system\/lib64\/libgdx.so\" needed or dlopened by \"\/system\/lib64\/libnativeloader.so\" is not accessible for the namespace \"classloader-namespace\"\r\n> java.lang.Runtime.loadLibrary0 (Runtime.java:989)\r\n> java.lang.System.loadLibrary (System.java:1562)\r\n> com.badlogic.gdx.utils.SharedLibraryLoader.load (SharedLibraryLoader.java:119)\r\n> com.badlogic.gdx.utils.GdxNativesLoader.load (GdxNativesLoader.java:33)\r\n> com.badlogic.gdx.backends.android.AndroidApplication.<clinit> (AndroidApplication.java:60)\r\n> java.lang.Class.newInstance (Class.java)\r\n> com.android.internal.os.ZygoteInit.main (ZygoteInit.java:779)\r\n> de.robv.android.xposed.XposedBridge.main (XposedBridge.java:107)","> So on an unrelated note, I think that should be fixed.\r\n> I'll try to look into it when I'm by a PC.\r\n\r\nDid you find a fix for this by any chance?","I probably didn't word it well.\r\nI'm gonna look into a fix when I'm by my PC tomorrow.\r\n\r\nAlthough I haven't managed to root my new phone, so IDK how much I'll be able to test it.","> Ah it seems like these crashes are from more likely from rooted devices according to Firebase report . Some example devices: Mi 9X, Pixel, TaintArt for x86\r\n> \r\n> This is a longer stack trace\r\n> \r\n> > Fatal Exception: java.lang.ExceptionInInitializerError\r\n> > java.lang.Class.newInstance\r\n> > Caused by com.badlogic.gdx.utils.GdxRuntimeException\r\n> > Couldn't load shared library 'gdx' for target: Linux, 32-bit\r\n> > com.badlogic.gdx.utils.SharedLibraryLoader.load (SharedLibraryLoader.java:125)\r\n> > com.badlogic.gdx.utils.GdxNativesLoader.load (GdxNativesLoader.java:33)\r\n> > com.badlogic.gdx.backends.android.AndroidApplication. (AndroidApplication.java:60)\r\n> > java.lang.Class.newInstance (Class.java)\r\n> > com.android.internal.os.ZygoteInit.main (ZygoteInit.java:779)\r\n> > de.robv.android.xposed.XposedBridge.main (XposedBridge.java:107)\r\n> > Caused by java.lang.UnsatisfiedLinkError\r\n> > dlopen failed: library \"\/system\/lib64\/libgdx.so\" needed or dlopened by \"\/system\/lib64\/libnativeloader.so\" is not accessible for the namespace \"classloader-namespace\"\r\n> > java.lang.Runtime.loadLibrary0 (Runtime.java:989)\r\n> > java.lang.System.loadLibrary (System.java:1562)\r\n> > com.badlogic.gdx.utils.SharedLibraryLoader.load (SharedLibraryLoader.java:119)\r\n> > com.badlogic.gdx.utils.GdxNativesLoader.load (GdxNativesLoader.java:33)\r\n> > com.badlogic.gdx.backends.android.AndroidApplication. (AndroidApplication.java:60)\r\n> > java.lang.Class.newInstance (Class.java)\r\n> > com.android.internal.os.ZygoteInit.main (ZygoteInit.java:779)\r\n> > de.robv.android.xposed.XposedBridge.main (XposedBridge.java:107)\r\n\r\nHello, I have nearly the same problem of that on Mi Note Pro Xposed, I think it may differ in different ROM. In great need of new ROM. But I couldn't even make TaintART compiled. Could you share the TaintART img with me like a googledrive link or sth?","This seems to be a Problem with the mapping in line:\r\nhttps:\/\/github.com\/libgdx\/libgdx\/blob\/11a53e2d9d573e2a0a94457b309dbf7044623497\/gdx\/src\/com\/badlogic\/gdx\/utils\/SharedLibraryLoader.java#L101\r\nand the setting that android is no linux \/ the System.getProperty() value also could not match:\r\nhttps:\/\/github.com\/libgdx\/libgdx\/blob\/11a53e2d9d573e2a0a94457b309dbf7044623497\/gdx\/src\/com\/badlogic\/gdx\/utils\/SharedLibraryLoader.java#L51\r\nCould somebody of you run the following snippet inside the Launcher's create method before creating the `new AndroidApplication(...)` statement and provide the output here?:\r\n\r\n```\r\nProperties p = System.getProperties();\r\nEnumeration keys = p.keys();\r\nwhile(keys.hasMoreElements()) {\r\n   String key = (String) keys.nextElement();\r\n   String value = (String) p.get(key);\r\n   System.out.println(key + \" >>>> \" + value);\r\n}\r\n```","I'm also seeing numerous reports of this crash, all of them of Google Pixel devices (distributed across various models: Pixel, Pixel 2, Pixel 2 XL, Pixel 3, Pixel 3 XL) all running Android 10. None of these devices are rooted.","@EtK2000 could this be related to #5795?\r\n@vminc are you using Android App Bundle?","No reaction, so probably this is no issue any more.","I used ubuntu and run on android emulator. It crashed with the same logs of the first post. Any insights here?","libgdx is 1.9.13","I'm also seeing this issue with libgdx 1.10.0","Without knowing the root cause, this is impossible to fix. @jonatino have you tried the debugging steps provided [above](https:\/\/github.com\/libgdx\/libgdx\/issues\/5863#issuecomment-579433480) and checked whether this is related to the issue described in #5795? Are you using Android App Bundles?","Re the recent comments (not OP because it sounds like they have an app in production with only certain devices affected):  \r\nDunno if related, but in some circumstances you may have to first run the `android:copyAndroidNatives` Gradle task or else the app will be missing `libgdx.so` and any other native libraries. I had that before with a gdx-liftoff project but now it works without, so \u00af\\\\\\_(\u30c4)\\_\/\u00af","@Frosty-J @crykn that was very close to what my problem was. The `android:copyAndroidNatives` was copying the libgdx.so fine, but it was not copying the accompanying natives-x86.jar.\r\n\r\nAny way to make this error a little less misleading? Initial impression I assumed it was the .so file due to the nature of the error.","Well `natives-x86.jar` and the equivalent versions for other CPU architectures (most modern Android devices use `arm64-v8a`) contain `libgdx.so`. I don't believe there's any reason to copy the JAR itself.","Hi, sorry for writing in this \"old\" issue, but I think this issue is still not solved.\r\nWe are using the libGDX version 1.11.0, and in ALL of our games we have some significant number of crashes in the Google Play Console (and crashlytics) with the error:\r\n\r\n```\r\nCaused by java.lang.UnsatisfiedLinkError\r\ndlopen failed: library \"libgdx.so\" not found\r\ncom.badlogic.gdx.utils.SharedLibraryLoader.load\r\n```\r\n\r\nYesterday we released a new update of a game (only 10% staged rolled update) and araised quite a lot errors, that on previous version didn't appear (it was using the previous libGDX v1.10.0)\r\n![image](https:\/\/user-images.githubusercontent.com\/25801199\/223385899-6bd9698b-bccc-46f2-a294-c81998f6ccbc.png )\r\n\r\nInvestigating this issue we found that it afected mostly the device : OnePlus 8 Pro\r\n![image](https:\/\/user-images.githubusercontent.com\/25801199\/223386952-b3f701f4-e920-41cb-90ad-58e24cc7ee76.png)\r\n\r\nVery strange... maybe this device in particular has not the \"Android Runtime\" string in the property \"java.runtime.name\"\r\nAnyways I think the way to detect that we are on an Android device OS is not working in all cases: PR:(https:\/\/github.com\/libgdx\/libgdx\/pull\/5897)\r\n\r\nMaybe there should be some alternate way to \"force\" the Android loading of the .so file.\r\nOr just check if contains the \"Android\" string.\r\n\r\nPD: I am using the Bundle format.\r\n\r\n","Hi everybody, I am facing the same problem. I saw the issue was closed, did we receive fixes for it? Thank you.","No, looks like it was closed for inactivity rather than being fixed. Sadly, I don't have access to any of the aforementioned devices for testing, nor the power to reopen the issue.","Hi @Frosty-J, thanks so much for your rapid reply. It's sad but hopefully, the issue can be addressed in the next release.","This can only be fixed if someone is able to reliably reproduce this issue. Have you tried any of the fixes and debugging steps mentioned above?","Hi @crykn, thanks for your suggestion. Now I can see your mentioned solution, I will try to find a way to test it since I don't have the device which caused the issue.\r\n<img width=\"920\" alt=\"Screenshot 2023-07-07 at 14 45 02\" src=\"https:\/\/github.com\/libgdx\/libgdx\/assets\/4993410\/6fa9f459-029a-4861-8e09-26fa4555782e\">\r\n","I has the same issue in my fresh game using libgdx 1.12.1, so this issue is still not solved.\r\n![image](https:\/\/github.com\/libgdx\/libgdx\/assets\/11406464\/7f0d78a4-89b3-4ada-9c91-874da7fd4498)\r\n![image](https:\/\/github.com\/libgdx\/libgdx\/assets\/11406464\/8b986490-415f-4c0d-b46a-ca37dbb922b8)\r\n\r\nI can add the code from this suggestion https:\/\/github.com\/libgdx\/libgdx\/issues\/5863#issuecomment-579433480 in my next release, and try to give you more info. Is this suggestion is still actual? ","I'll reopen this because even if I'm skeptical it can be fixed, it's still present (and has been for many years).\r\n\r\nFirst thing to note is that, even if this is by far my most common crash (and has been like that for years) with 150+ unique users with this error and over 600 crahes in Firebase on the last 90 days in one of my games I've never seen a review complaining about it or direct email to complain about which suggests this is only happening to some kind of user that's doing something non standard. \r\n\r\nIn my experience the model\/brand of devices, OS version and rooted device percentage distribution of the crashes suggests a majority are most likely occurring to users that did not download the game from Google Play. The most likely cause for this issue is that they downloaded the wrong architecture from an alternative store and when it crashes they just assume the APK is corrupted or something like that and move on.\r\n\r\nWhat we could do to try to confirm this theory to add more information to the Exception message of `SharedLibraryLoadRuntimeException` but I wouldn't be too worried about it.\r\n\r\n\r\n","Hi, A few comments about this issue:\r\n\r\n1- Yes, I can confirm that as today in libGDX version 1.12.1 this issue is still present in all my games\r\n<img width=\"775\" alt=\"image\" src=\"https:\/\/github.com\/libgdx\/libgdx\/assets\/25801199\/b6098995-0cd4-4209-bdb5-968cf95e3325\">\r\n(I commented on this issue some months ago)\r\n\r\n2- As @obigu said I never had a complaint or negative comment about this error. And affects a very small percentaje of users (maybe rooted devices).\r\n\r\n3- This issue is reported both from GooglePlay console and Firebase Crashlytics\r\n```\r\nCaused by com.badlogic.gdx.utils.SharedLibraryLoadRuntimeException: Couldn't load shared library 'gdx' for target: Android\r\n  at com.badlogic.gdx.utils.SharedLibraryLoader.load (SharedLibraryLoader.java:128)\r\n  at com.badlogic.gdx.utils.GdxNativesLoader.load (GdxNativesLoader.java:30)\r\n```\r\n\r\n4- I have no clues or tips on how to avoid or minimize this error. I have dedicated some hours to investigate it without success :(\r\n\r\n<img width=\"497\" alt=\"image\" src=\"https:\/\/github.com\/libgdx\/libgdx\/assets\/25801199\/e05a7d5b-5198-4dfb-9cc6-db523ddb880b\">\r\n\r\nMy theory is that the \"Android apk\/aab loader\" doesn't match the correct library (architecture)  folder:\r\n<img width=\"109\" alt=\"image\" src=\"https:\/\/github.com\/libgdx\/libgdx\/assets\/25801199\/c16aea2e-3b06-4d04-81ea-77216b248be1\">\r\n\r\n<img width=\"741\" alt=\"image\" src=\"https:\/\/github.com\/libgdx\/libgdx\/assets\/25801199\/32277beb-3bbe-488f-8205-f44597ce8cc9\">\r\n\r\nI got stuck in the Runtime.loadlibrary0 () function\r\n<img width=\"741\" alt=\"image\" src=\"https:\/\/github.com\/libgdx\/libgdx\/assets\/25801199\/c17e261a-7997-4c05-80d2-efafd5620cf2\">\r\n\r\n\r\n","https:\/\/github.com\/libgdx\/libgdx\/issues\/5863#issuecomment-579433480\r\n> Could somebody of you run the following snippet inside the Launcher's create method before creating the `new AndroidApplication(...)` statement and provide the output here?:\r\n\r\nI did it and received crash with result, but don't know how it can help.\r\nHere the output:\r\n```\r\nkey=http.agent,\tvalue=Dalvik\/2.1.0 (Linux; U; Android 8.1.0; Nexus 5X Build\/OSM1.180201.031)\r\nkey=java.io.tmpdir \tvalue=\/data\/user\/0\/com.mygame\/cache\r\nkey=user.home \tvalue=\r\n\r\n```\r\nI checked this in other crashes, and it's looks similar. `key=user.home` is empty.\r\n","> [#5863 (comment)](https:\/\/github.com\/libgdx\/libgdx\/issues\/5863#issuecomment-579433480)\r\n> \r\n> > Could somebody of you run the following snippet inside the Launcher's create method before creating the `new AndroidApplication(...)` statement and provide the output here?:\r\n> \r\n> I did it and received crash with result, but don't know how it can help. Here the output:\r\n> \r\n> ```\r\n> key=http.agent,\tvalue=Dalvik\/2.1.0 (Linux; U; Android 8.1.0; Nexus 5X Build\/OSM1.180201.031)\r\n> key=java.io.tmpdir \tvalue=\/data\/user\/0\/com.mygame\/cache\r\n> key=user.home \tvalue=\r\n> ```\r\n> \r\n> I checked this in other crashes, and it's looks similar. `key=user.home` is empty.\r\n\r\nIt appears Android doesn't return all system properties when calling `System,getProperties()`, you can easily test it locally.\r\n \r\nHaving a look at the `System` class it looks like it separates between unchangeable and changeable system properties and the only ones retrievable as a list are the changeable ones (just those 3 instead of 44 in my case). The solution is to request the system properties you want manually. In this case the most important is `java.runtime.name` but the more info you have on the system the higher the chances to understand what kind of devices are failing.\r\n\r\nChecking the documentation on the list of system properties on Dalvik it looks like `java.runtime.name` is not listed to always guarantee to be returned which is strange https:\/\/developer.android.com\/reference\/java\/lang\/System#getProperties().","I think i don't userstand the exact problem.\r\nThe crash (crashytics) is in SharedLibraryLoader line 122:\r\n\r\n![image](https:\/\/github.com\/libgdx\/libgdx\/assets\/25801199\/7573a7bf-ab3b-4485-8b6b-336460e50732)\r\n\r\nBut the error message \"detects\" the Android flag (watch selected Exception lines:\r\n\r\nCaused by com.badlogic.gdx.utils.SharedLibraryLoadRuntimeException: Couldn't load shared library 'gdx' for target: Android\r\n  at com.badlogic.gdx.utils.SharedLibraryLoader.load (SharedLibraryLoader.java:128)\r\n  at com.badlogic.gdx.utils.GdxNativesLoader.load (GdxNativesLoader.java:30)\r\n\r\nSo the problem don't seems to be in the checking of the \"Android Runtime\" in the System properties...\r\nWhat I am missing?"],"labels":["android","need more info"]},{"title":"Camera related documentation needs improvement regarding touch\/screenspace","body":"#### Issue details\r\nCamera.unproject does not return original value\r\n\r\n#### Reproduction steps\/code\r\n```\r\n    public void create() {\r\n        Vector2 tmpvec = new Vector2();\r\n        tmpvec.set(0, 0);\r\n\r\n        Stage stage = new Stage(new ScreenViewport());\r\n        stage.stageToScreenCoordinates(tmpvec); \/\/ has the correct screen coords;\r\n        stage.screenToStageCoordinates(tmpvec);\r\n        System.out.println(tmpvec); \/\/ prints (0, -1), should be (0, 0)\r\n    }\r\n```\r\n\r\nDue to the following line in Camera (-1 at the end):\r\n\r\nhttps:\/\/github.com\/libgdx\/libgdx\/blob\/c0c1f515df54092cb47717f43f022db02cf7e328\/gdx\/src\/com\/badlogic\/gdx\/graphics\/Camera.java#L197\r\n\r\nIntended? \r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.10","comments":["If you think there is a problem with Camera, your test should only involve camera, and not Stage\/Viewports.\r\n\r\nThat said, this is a problem with documentation and variable names. It should really be touchToStageCoordinates, not screenToStageCoordaintes, since its expected touch space input. There are some other inconsistencies that probably should be cleaned up that are the same. ","Ok, modified.\r\n\r\n  ```\r\n  public void create() {\r\n        Vector3 tmpvec = new Vector3();\r\n        tmpvec.set(0, 0, 0);\r\n\r\n        Camera camera = new OrthographicCamera();\r\n        camera.viewportWidth = 100;\r\n        camera.viewportHeight = 100;\r\n        camera.project(tmpvec);\r\n        camera.unproject(tmpvec);\r\n        System.out.println(tmpvec); \/\/ prints (0.0,-0.01999998,0.0)\r\n    }\r\n```","#5854 is the same same issue, and as I said its a problem with documentation as they arent all screen space coordinates. We do not need two issues to discuss this same problem.","Here is a demo that demonstrates that this is a documentation issue. https:\/\/gist.github.com\/Tom-Ski\/3c71425e6a199ec2677fbac39e457e54","Why are your touch coordinates offset by 1?","Regardless, should a sequence of project and unproject return a different value?\r\n```\r\n      camera.project(tmpvec);\r\n      camera.unproject(tmpvec);\r\n```","As an example, if you have a screen of 10x10, bottom left coordinate is 0,0. In touch space, this coordinate is 0,9.  Gdx.graphics.getHeight() would return 10 however, we need the offset because we start at 0, not at 1.\r\n\r\nRange of touch\/screen is from (0 to width-1) since we start at 0.","As per the documentation, yes they should. There are just a few inconsistencies with the language used that makes it confusing. Although the documentation (for Camera at least) does describe the difference in coordinate spaces the functions return and expect, it still calls them both screen space, which is the confusing part. The solution here is to improve the docs.","Ok.\r\nHowever, this is still unrelated to #5854 which is about stages with viewports with y offsets. Even if the method name were stage.stageToTouchCoordinates, I believe there is still an issue there. I'll comment further in that issue.","OpenGL for reference, specifically [gluProject](https:\/\/www.khronos.org\/registry\/OpenGL-Refpages\/gl2.1\/xhtml\/gluProject.xml) and [gluUnProject](https:\/\/www.khronos.org\/registry\/OpenGL-Refpages\/gl2.1\/xhtml\/gluUnProject.xml), compiled and run on Arch Linux\/Mesa 3D.\r\n\r\n`gluProject \u2014 map object coordinates to window coordinates`\r\n`gluUnProject \u2014 map window coordinates to object coordinates`\r\n\r\nThe window size is 300x300, and (0,0) is the point at the centre of the screen.\r\n\r\n\r\n```\r\n#include <stdio.h>\r\n#include <GL\/gl.h>\r\n#include <GL\/glut.h>\r\n\r\nvoid displayFunc(void)\r\n{\r\n    GLdouble posX, posY, posZ;\r\n    GLdouble winX, winY, winZ;\r\n    GLdouble resX, resY, resZ;\r\n    GLdouble modelview[16];\r\n    GLdouble projection[16];\r\n    GLint viewport[4];\r\n    glGetDoublev(GL_MODELVIEW_MATRIX, modelview);\r\n    glGetDoublev(GL_PROJECTION_MATRIX, projection);\r\n    glGetIntegerv(GL_VIEWPORT, viewport);\r\n    posX = 0.0;\r\n    posY = 0.0;\r\n    posZ = 0.0;\r\n\r\n    gluProject(posX, posY, posZ, modelview, projection, viewport, &winX, &winY, &winZ);\r\n    printf(\"window: %f %f %f\\n\", winX, winY, winZ);\r\n    \/\/ window: 150.000000 150.000000 0.500000\r\n\r\n    gluUnProject(winX, winY, winZ, modelview, projection, viewport, &resX, &resY, &resZ);\r\n    printf(\"pos: %f %f %f\\n\", resX, resY, resZ); \r\n    \/\/ pos: 0.000000 0.000000 0.000000\r\n}\r\n\r\nint main(int argc, char** argv)\r\n{\r\n    glutInit(&argc, argv);\r\n    glutInitDisplayMode(GLUT_DOUBLE);\r\n    glutInitWindowSize(300, 300);\r\n    glutCreateWindow(\"Test glProject glUnProject\");\r\n    glutDisplayFunc(displayFunc);\r\n    glutMainLoop();\r\n    return 0;\r\n}\r\n\r\n```","My problem iPhone X can\u2019t get it to open I\u2019ve tried everything,boot up tried everything ","@mark6412 Don't ask for help on an issue tracker. See: https:\/\/github.com\/libgdx\/libgdx\/wiki\/Getting-help\r\n\r\nSeems a bit unfortunate to need to think about touch space coordinates. Ideally we'd have only screen space and world space."],"labels":["documentation"]},{"title":"LWJGL3: Request rendering on resize rather then directly resizing","body":"I've been having a problem when resizing windows with LWJGL3 under both Windows and Linux that while dragging the window around triggers a lot of resize events. That's fine by itself however this can (and does) form a very tight loop which prevents runnables from being run. If you're rendering thread posts a runnable for any reason this will just be queued, which can lead to a very large set of runnables pending which can then take a surprising amount of time to clear. It leads to a weird problem where the window is relatively current, but once you stop resizing it it freezes.\r\n\r\nI'm not fully sold on this being the correct fix. In my case the behavior that lead to this was an intermediate state and the current behavior that can post all the runnables will be changing either way. The patch as PR'd resolves the problem for me, but I'm not fully sure that this is really the correct fix (and possibly has a more significant impact on projects other then my own).\r\n\r\nAnyways thought I'd throw it up since I'd investigated it,and it fixes it for me. If it's out of scope I'm not fussed if it's closed :)","comments":["If you don't move the mouse but are still \"resizing\" the window, we shouldnt get this update and you will have the same problem right? What is actually causing the blocking behavior?","I had 2 different projects that were suffering from this, I've worked around one of them, and the other I just need to come back to fix it. The problem is that when drawing a component an asset would be missing, and due to the load time it's thrown to a worker pool to be loaded. The worker pool on completion would post a runnable. However while a user is just resizing the window trying to fit something this can lead to a lot of runnables being posted. The block results from the processing time of the runnables. From here we start to get into implementation details, but the short form is that depending on how they resized the window assets were removed from the currently in use asset list, and then could be readded if they expanded again, even though the original runnable is still pending.\r\n\r\nThe other problem with this is if you stop resizing the window and don't do anything the runnables will never be run. And if a user doesn't know to move the mouse inside the application this results in stale data being shown. This is most insidious as normally the act of posting a runnable is sufficient to retrigger rendering.\r\n\r\nThe first problem I listed can be worked around in application code (as I've done), and it's not unreasonable to say it was simply bad design, but the second problem would apply to all projects, and I don't see how to work around that in application code except to know that on a resize event you need to manually request rendering again, which is a trap for most people.\r\n\r\n> If you don't move the mouse but are still \"resizing\" the window, we shouldnt get this update and you will have the same problem right?\r\n\r\nI'm not quite following you. If you move the mouse to resize the window there is still a interval before the mouse moves again in which the system can fully render everything.","I'm not sure, whether this is the right way of fixing this problem. @cypherdare suggested a different method in #6272, which should also take care of the user \"resizing\", but not moving their mouse.\r\n\r\nAnd if I understand #4419 correctly, by (properly) separating the main loop we would also prevent the issue from ever occurring."],"labels":["desktop","LWJGL3"]},{"title":"[Feature Request] AssetManager multi core loading support","body":"#### Issue details\r\nMy game (for desktop platform) takes a long time to load all the assets. I have done some profiling and testing and noticed that the loading time could be reduced a lot if multiple threads were used for asynchronous loading in AssetManager instead of only one. \r\n\r\nI tried to increase the number of AsyncExecutor threads. But this does not work since the current implementation always waits for the current task to compete before scheduling a new one. I tried to implement a custom AssetManager but this is not very easy to do because the AssetManager itself is passed as a reference to every AssetLoader. Creating and using an interface for AssetManager in loader class would help libGDX users to implement such a custom AssetManager. Currently it is not possible because AssetManager is hardly extendable (mostly final fields, package private stuff, ...)\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.10\r\n\r\n#### Please select the affected platforms\r\n- [x] Android\r\n- [x] iOS (robovm)\r\n- [x] iOS (MOE)\r\n- [x] HTML\/GWT\r\n- [x] Windows\r\n- [x] Linux\r\n- [x] MacOS\r\n","comments":["Using multiple threads would only be possible for items whose dependencies are already loaded, or that have no dependencies. It would be a nice addition, but difficult as AssetManager is quite complicated already. Maybe you would be willing to submit a PR for it?","@cubesdev did you tried to change this hard coded value here https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/assets\/AssetManager.java#L122 ? it seems that non GPU ressources are loaded async. with a higher number of threads.\r\n\r\nMaybe a constructor parameter for this hard coded value could be a good addition.\r\n\r\nI can make the PR if it solves your issue.","@mgsx-dev Yes i tried that. The hard coded value does not change anything because there is only one task scheduled at once (the next one only gets scheduled when the previous task completed). So a constructor parameter does not solve the issue.\r\n\r\n@NathanSweet Exactly. The AssetManager class (along with AssetLoadingTask) implementations are very complicated (I assume because \"modern\" Java classes like CompletableFuture were avoided to stay compatible with old Android versions or GWT?). I could submit a PR but I think that a lot of refactoring needs to be done and maybe even some AssetLoader classes need to adopt. Maybe we could create a clean interface class for AssetManager which is used in the AssetLoader classes. Then it would be possible to create a separate performant and modern AssetManager implementation (maybe even as a separate extension?) without changing the current one too much. \r\n","The AssetManager we have is not needlessly complex for the most part and is well tested. Ideally we would implement multiple threads without rewriting most of it.","So you think that using an interface for AssetManager is not worth it? Do you have a solution in mind to support multiple threads with the current implementation?","We don't need multiple AssetManager implementations, so I don't think an interface is needed. If we build an AssetManager with multiple threads, there's no point in using the old one.\r\n\r\nThe current implementation can be modified to support multiple threads. Instead of one, submit up to X tasks where X is the max number of threads in the pool. Only submit tasks that have all their dependencies loaded. There are many details to consider to do that. It is not a small project.\r\n\r\nI don't think building an AssetManager that supports multiple threads will be done easier by starting over from scratch. It's not clear how much newer JRE classes would help. It's not just threading that is tricky to get right, but also dependencies and ref counting.","> We don't need multiple AssetManager implementations, so I don't think an interface is needed. If we build an AssetManager with multiple threads, there's no point in using the old one.\r\n\r\nYes, that's true. But getting those modifications done without breaking anything might be tricky. An interface would at least help to implement an experimental version. \r\n\r\n> The current implementation can be modified to support multiple threads. Instead of one, submit up to X tasks where X is the max number of threads in the pool. Only submit tasks that have all their dependencies loaded. There are many details to consider to do that. It is not a small project.\r\n\r\nI have already tried some small changes and immediately got 2x loading speed. My game is starting without any visible loading problems. But my asset dependency graph is (mostly) a tree and not an arbitrary acyclic graph. I am not sure what happens if there are shared dependencies between assets, etc. ","I also propose to allow configuring the AsyncExecutor implementation to use ExecutorService implementations with a zero core pool size and a defined keepAliveTime. Otherwise the AssetManager's thread is never shutdown even after long idle time. That's not a big issue but every thread consumes some memory. On top of that many simple games will only load assets at the beginning and won't take up the loading thread ever again.","I try realize it, not tested yet. I used it for my game.\r\nhttps:\/\/github.com\/anbu93\/libgdx\/commit\/5307b52474ae3f2e8295aa0fe571a6edcd3a3f27"],"labels":["enhancement","core"]},{"title":"LibGDX 1.9.10 TmxMapLoader not compatible with \"infinite\" .tmx files generated by Tiled 1.2.4 (latest version)","body":"#### Issue details\r\nWhen loading a tmx tilemap generated by Tiled 1.2.4, libGDX does not take into account the \"infinite\" format for tmx files (which use CSV data). When loading a tilemap, the method **getTileIds** of the class **BaseTmxMapLoader** calls \"data.getText()\", which causes a null pointer exception for infinite maps. This is because in Tiled 1.2.4, the CSV data for infinite maps is stored within <chunk> tags inside the <data> tag of the .tmx file. Hence, the \"text\" attribute of \"data\" is null, as the text is stored in \"chunk\" instead.\r\n\r\n#### Reproduction steps\/code\r\nThe code which generates the error is simple (look at the bottom of this entry for the stack trace):\r\n\r\n```\r\n\/\/ Create an asset manager\r\nAssetManager assetManager = new AssetManager();\r\n\r\n\/\/ Get the file handle for the tmx file\r\nFileHandle tmxFileHandle = Gdx.files.absolute(\"C:\\\\projectroot\\\\assets\\\\levels\\\\room1.tmx\");\r\n\r\n\/\/ Create a descriptor for the asset\r\nAssetDescriptor<TiledMap> descriptor = new AssetDescriptor<>(tmxFileHandle, TiledMap.class);\r\n\r\n\/\/ Set the loader for tmx files\r\nassetManager.setLoader(TiledMap.class, new TmxMapLoader(new AbsoluteFileHandleResolver()));\r\n\r\n\/\/ Load the tmx asset\r\nassetManager.load(descriptor);\r\n```\r\n\r\nThe problem lies in the **BaseTmxMapLoader** class at line 499. This is an extract of the method **getTileIds**, which is what caused the problem:\r\n\r\n```\r\npublic static int[] getTileIds(Element element, int width, int height) {\r\n        Element data = element.getChildByName(\"data\");\r\n        String encoding = data.getAttribute(\"encoding\", (String)null);\r\n        if (encoding == null) {\r\n            throw new GdxRuntimeException(\"Unsupported encoding (XML) for TMX Layer Data\");\r\n        } else {\r\n            int[] ids = new int[width * height];\r\n            if (encoding.equals(\"csv\")) {\r\n                String[] array = **data.getText().split(\",\");**\r\n                for(int i = 0; i < array.length; ++i) {\r\n                    ids[i] = (int)Long.parseLong(array[i].trim());\r\n                }\r\n            } else {\r\n...\r\n```\r\n\r\nThis LibGDX class is trying to retrieve the data text straight from the data XML tag, which cannot be done as the text is actually stored in chunk tags within the data tag. The following is an example of the new tmx format in Tiled 1.2.4:\r\n\r\n```\r\n<map version=\"1.2\" tiledversion=\"1.2.4\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"20\" height=\"22\" tilewidth=\"64\" tileheight=\"64\" infinite=\"1\" nextlayerid=\"17\" nextobjectid=\"2\">\r\n <tileset firstgid=\"1\" source=\"tileset1.tsx\"\/>\r\n <tileset firstgid=\"11\" source=\"tileset2.tsx\"\/>\r\n<layer id=\"14\" name=\"env\" width=\"20\" height=\"22\" offsetx=\"0\" offsety=\"128\">\r\n  <data encoding=\"csv\">\r\n   <chunk x=\"-16\" y=\"16\" width=\"16\" height=\"16\">\r\n0,0,0,0,0,0,0,0,0,9,8,8,8,8,8,8,\r\n0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,\r\n0,0,0,0,0,0,0,9,7,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,10,6,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,10,6,0,2,0,0,2,0,0,\r\n0,0,0,0,0,0,0,10,6,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,10,6,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,10,6,0,2,0,0,2,0,0,\r\n0,0,0,0,0,0,0,10,6,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,3,5,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,9,8,8,8,8,8,8,\r\n0,0,0,0,0,0,0,0,0,3,4,4,4,4,4,4,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\r\n<\/chunk>\r\n   <chunk x=\"0\" y=\"16\" width=\"16\" height=\"16\">\r\n8,8,8,8,8,8,7,0,0,0,0,0,0,0,0,0,\r\n4,4,4,4,4,4,5,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,9,7,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,10,6,0,0,0,0,0,0,0,\r\n0,0,2,0,0,2,0,10,6,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,10,6,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,10,6,0,0,0,0,0,0,0,\r\n0,0,2,0,0,2,0,10,6,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,10,6,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,3,5,0,0,0,0,0,0,0,\r\n8,8,8,8,8,8,7,0,0,0,0,0,0,0,0,0,\r\n4,4,4,4,4,4,5,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\r\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\r\n<\/chunk>\r\n  <\/data>\r\n <\/layer>\r\n<\/map>\r\n```\r\n\r\nNote that the CSV text is between <chunk> tags.\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nLibGDX 1.9.10\r\nTiled 1.2.4\r\n\r\n#### Stacktrace\r\n\r\n```\r\nException in thread \"main\" com.badlogic.gdx.utils.GdxRuntimeException: com.badlogic.gdx.utils.GdxRuntimeException: Couldn't load asset: C:\/projectroot\/assets\/levels\/room1.tmx\r\n\tat com.badlogic.gdx.assets.AssetManager.handleTaskError(AssetManager.java:636)\r\n\tat com.badlogic.gdx.assets.AssetManager.update(AssetManager.java:411)\r\n\tat com.badlogic.gdx.assets.AssetManager.finishLoading(AssetManager.java:437)\r\n\tat ocr.emilfilip3061.core.io.AssetLoader$1.accept(AssetLoader.java:103)\r\n\tat ocr.emilfilip3061.core.io.AssetLoader$1.accept(AssetLoader.java:86)\r\n\tat ocr.emilfilip3061.core.io.AssetLoader$1.accept(AssetLoader.java:86)\r\n\tat ocr.emilfilip3061.core.io.AssetLoader$1.accept(AssetLoader.java:79)\r\n\tat ocr.emilfilip3061.core.io.AssetLoader.beginLoading(AssetLoader.java:113)\r\n\tat ocr.emilfilip3061.core.mvc.MainListener.create(MainListener.java:51)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Window.initializeListener(Lwjgl3Window.java:429)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Window.update(Lwjgl3Window.java:377)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.loop(Lwjgl3Application.java:137)\r\n\tat com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.<init>(Lwjgl3Application.java:111)\r\n\tat ocr.emilfilip3061.desktop.DesktopLauncher.main(DesktopLauncher.java:32)\r\nCaused by: com.badlogic.gdx.utils.GdxRuntimeException: Couldn't load asset: C:\/projectroot\/assets\/levels\/room1.tmx\r\n\tat com.badlogic.gdx.assets.AssetLoadingTask.handleAsyncLoader(AssetLoadingTask.java:139)\r\n\tat com.badlogic.gdx.assets.AssetLoadingTask.update(AssetLoadingTask.java:90)\r\n\tat com.badlogic.gdx.assets.AssetManager.updateTask(AssetManager.java:561)\r\n\tat com.badlogic.gdx.assets.AssetManager.update(AssetManager.java:409)\r\n\t... 12 more\r\nCaused by: com.badlogic.gdx.utils.GdxRuntimeException: java.lang.NullPointerException\r\n\tat com.badlogic.gdx.utils.async.AsyncResult.get(AsyncResult.java:46)\r\n\tat com.badlogic.gdx.assets.AssetLoadingTask.handleAsyncLoader(AssetLoadingTask.java:137)\r\n\t... 15 more\r\nCaused by: java.lang.NullPointerException\r\n\tat com.badlogic.gdx.maps.tiled.BaseTmxMapLoader.getTileIds(BaseTmxMapLoader.java:478)\r\n\tat com.badlogic.gdx.maps.tiled.BaseTmxMapLoader.loadTileLayer(BaseTmxMapLoader.java:213)\r\n\tat com.badlogic.gdx.maps.tiled.BaseTmxMapLoader.loadLayer(BaseTmxMapLoader.java:172)\r\n\tat com.badlogic.gdx.maps.tiled.BaseTmxMapLoader.loadTiledMap(BaseTmxMapLoader.java:162)\r\n\tat com.badlogic.gdx.maps.tiled.TmxMapLoader.loadAsync(TmxMapLoader.java:88)\r\n\tat com.badlogic.gdx.maps.tiled.TmxMapLoader.loadAsync(TmxMapLoader.java:36)\r\n\tat com.badlogic.gdx.assets.AssetLoadingTask.call(AssetLoadingTask.java:74)\r\n\tat com.badlogic.gdx.assets.AssetLoadingTask.call(AssetLoadingTask.java:34)\r\n\tat com.badlogic.gdx.utils.async.AsyncExecutor$2.call(AsyncExecutor.java:64)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\n\r\n#### Affected platforms\r\n- [ ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n**- [X] Windows**\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["The tmx file spec indicates the chunk element is only applicable when creating \"infinite\" maps. Is that no longer true?","No, the chunk tags are still only applicable to infinite maps. The issue is that LibGDX does not support them. As a result I had to change all my tmx maps to non-infinite.","all features after TMX map format version 0.18 are not supported by libgdx which include infinite map, templates, and so on. Maybe we could document it in the wiki?\r\n\r\nfor reference: https:\/\/doc.mapeditor.org\/en\/stable\/reference\/tmx-changelog","Is support for these features planned in a later libgdx update?"],"labels":["enhancement","tilemap"]},{"title":"LwjglCanvas Hangs When I Try to Quit Application","body":"#### Issue details\r\nI use LwjglCanvas to render my libgdx game in a Swing GUI. The thing is when I quit app using close icon on Desktop, app hangs forever.\r\nAs stated in LwjglCanvas documentation I used stop before closing my app.\r\n\r\n#### Reproduction steps\/code\r\n```jFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\r\n\r\njFrame.addWindowListener(new WindowAdapter() {\r\n   @Override\r\n   public void windowClosing(WindowEvent e) {\r\n      lwjglCanvas.stop();\r\n      System.exit(0);\r\n   }\r\n});\r\n```\r\n#### Version of LibGDX\r\n1.9.10\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [x] Windows\r\n- [ ] Linux\r\n- [ ] MacOS","comments":["I vaguely remember having such a problem years ago. Unless you want to debug it, try `Runtime.getRuntime().halt(0);`."],"labels":["desktop","LWJGL2"]},{"title":"Change how onPause is handled to better support multiwindow mode on Android","body":"#### Issue details\r\nOn Android 7 when they added multi-window support `onPause` is called when the activity no longer has focus, but is still visible. `onStop` is called when the activity is no longer visible. So if the window is visible, but doesn't have focus the game should continue to render new frames. If the user resizes the window while it doesn't have focus the game needs to render a new frame to adjust to the new size.\r\n\r\nThe game should be notified that it no longer has focus (`onPause`,) so the developer can display a pause menu. The game should stop rendering new frames when it's no longer visible (`onStop`.) Vise versa for `onResume` and `onStart`.\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nlibGDX v1.9.9\r\n\r\n#### Please select the affected platforms\r\n- [x] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["I think this is controversial. You can argue that the game should stop render if it has not the focus, too. It feels like a breaking change for a feature probably not used very often.","I'd think it would have to be opt-in.","Yes, with a lot of work this can be done non-breaking. All the code is just tied to onPause() at the moment, so changes here are highly likely to break a thing."],"labels":["enhancement","android","controversial"]},{"title":"ANR after opengl context loss on Live Wallpaper Preview","body":"#### Issue details\r\nHi,\r\nI'm writing about an ANR that happens every time a user switches opengl context during a live wallpaper preview. This ANR is present on all Android 9.0+ devices and on very few 8.0 - 9.0 devices. \r\n\r\n#### Reproduction steps\/code\r\nThe reproduction is really easy given a live wallpaper developed with the libgdx framework and an Android 9.0+ device or an Android Studio emulator (9.0+):\r\n\r\n1. Install on an Android 9.0+ device a live wallpaper from the store that uses libgdx framework, for example, the well known Double Helix Live Wallpaper: \r\nhttps:\/\/play.google.com\/store\/apps\/details?id=com.cyphercove.doublehelixfree\r\nor build your own through the various live wallpaper examples.\r\n2. Open the live wallpaper preview (it is the view where you can see the live wallpaper running but you still haven't set it as your live wallpaper)\r\n3. Press the home button to switch to the home screen.\r\n4. Press the recent apps button and resume the live wallpaper app.\r\n\r\nAt this moment the screen goes black and an ARN occurs with the message:\r\n E\/libEGL: eglCreateWindowSurface: native_window_api_connect (win=0x7e53b97010) failed (0xffffffed) (already connected to another API?)\r\n E\/libEGL: eglCreateWindowSurface:896 error 3003 (EGL_BAD_ALLOC)\r\n\r\nAfter some searching, I found out that the ANR happens due to opengl context loss, not only for libgdx live wallpapers but for all live wallpapers that use opengl,  (an Android bug probably) and the possible workaround is given here:\r\nhttps:\/\/stackoverflow.com\/questions\/36312209\/opengls-eglcreatewindowsurface-gl-error-egl-bad-alloc\r\nBut I have no idea how to implement it on libgdx. \r\n\r\nAs you can imagine, these ANRs are very frequent and I have something like 1500+ reports per day across my live wallpaper apps. If someone has any clue on how to proceed that would be awesome. Many thanks for all your efforts.\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nAll versions\r\n\r\n#### Stacktrace\r\n```\r\n2019-07-25 16:23:49.191 12811-12811\/com.mmm.mmm I\/WallpaperService: engine paused\r\n2019-07-25 16:23:49.191 12811-12811\/com.mmm.mmm I\/AndroidInput: sensor listener tear down\r\n2019-07-25 16:23:49.212 12811-13241\/com.mmm.mmm W\/libEGL: EGLNativeWindowType 0x7e53b97010 disconnect failed\r\n2019-07-25 16:23:49.212 12811-12811\/com.mmm.mmm D\/WallpaperService: reportVisibility onVisibilityChanged visible: false\r\n2019-07-25 16:23:49.746 12811-12851\/com.mmm.mmm D\/WallpaperService: dispatchAppVisibility onVisibilityChanged(): false\r\n2019-07-25 16:23:53.095 12811-12844\/com.mmm.mmm D\/WallpaperService: dispatchAppVisibility onVisibilityChanged(): true\r\n2019-07-25 16:23:53.164 12811-12811\/com.mmm.mmm D\/WallpaperService: updateSurface forceRelayout=false forceReport=false redrawNeeded=false myWidth=1440 myHeight=2960 fixedSize=true x = 0 y = 0 mWidth=1440 mHeight=2960 mIsSleepMode=false\r\n2019-07-25 16:23:53.164 12811-12811\/com.mmm.mmm I\/WallpaperService: engine resumed\r\n2019-07-25 16:23:53.164 12811-12811\/com.mmm.mmm I\/AndroidInput: sensor listener setup\r\n2019-07-25 16:23:53.165 12811-13241\/com.mmm.mmm E\/libEGL: eglCreateWindowSurface: native_window_api_connect (win=0x7e53b97010) failed (0xffffffed) (already connected to another API?)\r\n2019-07-25 16:23:53.165 12811-13241\/com.mmm.mmm E\/libEGL: eglCreateWindowSurface:896 error 3003 (EGL_BAD_ALLOC)\r\n```\r\n\r\n#### Please select the affected platforms\r\n- [ X ] Android\r\n","comments":[],"labels":["android"]},{"title":"TextField should have a setFontScale method like Label","body":"The `Label` class has a `setFontScale(scaleX, scaleY)` method which allows to set the scale of the bitmap font used for layout calculations and drawing. This is very useful when using a distance field font as the font size can be set easily.\r\n\r\nHowever, the `TextField` class lacks such a method. Furthermore, most of the methods doing the layout are package-private (e.g.: updateDisplayText), so the font scale cannot be set with `bitmapFont.getData().setScale(...)` by subclassing.\r\n\r\nUnless I'm missing something, this situation makes it impossible to have two TextFields with different font sizes without creating two BitmapFonts when using a distance field font.\r\n\r\nIf there's no workaround, I can make a pull request.","comments":["I'm not a fan of Label `setFontScale`, it feels really hacky. If we add it to TextField, the next request will be TextButton, SelectBox, etc. Maybe a BitmapFont could be wrapped with something that does the scaling transparently, without littering in the widget API?","Thank you for the response.\r\n\r\nI thought about using a single texture with multiple BitmapFonts, but each instance had to parse the whole .fnt file, it doesn't feel like a good solution when working with 10+ font sizes. The BitmapFontData can't be shared since all fonts have a different scale. Each wrapper also creates a new font cache which is more or less lightweight.\r\n\r\nThe BitmapFontData can't be shared because the scale has to be set not only when drawing, but also on measurements, like lineHeight, ascent, descent, etc. Some of those values are available through the BitmapFont (eg: `getLineHeight()`) and can be scaled properly, since the BitmapFont wrapper has a scale property. But these values are also available on the BitmapFontData which has no scale property since it's used by all wrappers.\r\n\r\nI don't know how you would make a wrapper, but I feel like the font classes would need a major refactoring for it to work efficiently. Unless again, I'm missing something.","I have not implemented a good solution for my apps, sorry. I just load multiple fonts, but I generally only need 4-5 max.\r\n\r\nMaybe we could support creating a new, scaled BitmapFontData from an existing one? You'd load one, then copy and scale it. It still takes up the same memory for the glyphs, but at least you don't need to parse the font data file many times.","That would be a great addition. I usually end up setting transform and resizing the widgets this way, but it is... hacky.","+1 for this, it's very unfortunate that i can set the font scale on my entire UI including TextButton and Label, but not on TextField.\r\n\r\nEdit: i was able to work around this by creating 5 pointers to the same font in my skin and scaling the 5 fonts differently. Maybe this workaround is acceptable, but i do feel that the inconsistency of the current API is not ideal. IMO either `Label` should not have a method for setting the font scale, or all text actors should have it. The alternative is quite confusing, and led me to spend a good amount of time going down a path that just doesn't work.","+1 for this. I've been doubling the font programmatically for all my UI elements, but can't call setFontScale for text fields."],"labels":["enhancement","scene2d"]},{"title":"[Feature Request] Load TiledMap from Json","body":"**Issue details**\r\n\r\nWith Libgdx, we can create a TiledMap from a TMX file.\r\nIs it conceivable to create a TiledMap from a JSON file ?\r\nThis could be useful for people who want to serialize all their game in JSON.\r\n\r\n**Version of LibGDX and\/or relevant dependencies**\r\nGDX 1.9.9","comments":["Is there any good reason for serializing everything into Json?","@mguldner I can see why you would want this. That being said, it would probably take up more space due to JSON file structure. Nonetheless, this might be a fun project."],"labels":["enhancement","tilemap"]},{"title":"Hiero: yOffset is not 0 when it should be?","body":"#### Issue details\r\nWhen exporting a BMFont with Hiero, the tallest characters don't have a yOffset of 0. Please let me know if this is expected as I can't figure out why they should have an offset?\r\n\r\n#### Reproduction steps\/code\r\n- Open Hiero\r\n- Select Java rendering\r\n- Select NEHE character set\r\n- Select Verdana\r\n- Export\r\n- In the .fnt file, only characters with id 10 and 32 will have a yOffset of 0\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nHiero v5\r\n","comments":["Why do you expect the yOffset to be zero? Why does that matter?","I'm trying to keep my gui label class as tight a fit as possible whilst keeping enough space for any possible character in the font, however when applying the offset the text has a larger gap than expected above it.\r\n\r\nI should note that I'm creating the font with padding 8 on all sides for distance fields and -16 x and y offset to compensate, but even when leaving those as default there is large yoffset.\r\n\r\nAm I missing something?","Font rendering and metrics can be pretty wild. I'm not sure it makes sense to expect yOffset to be zero, it's really up to whatever provided the metrics (Java rendering in your repro). You could adjust the glyphs after loading the BitmapFont. I do this in some of my apps."],"labels":["tools"]},{"title":"Feature request: only Material created with  ColorAttribute.createDiffuse(color) actually shows the color with default shader","body":"#### Issue details\r\nIf I create my model using:\r\n`new Material(blendingAttribute, ColorAttribute.createDiffuse(Color.BLUE)`\r\nthe surface shows blue\r\nIf I create my model using:\r\n`new Material(blendingAttribute, ColorAttribute.createAmbient(Color.BLUE)`\r\nthe surfaces show white and are painted using the color of the light source.\r\n\r\n#### Reproduction steps\/code\r\n\r\n```\r\nmodelBuilder.begin();\r\nmodelBuilder.node();\r\nBlendingAttribute blendingAttribute = new BlendingAttribute();\r\nblendingAttribute.opacity = .7f;\r\n\r\nMeshPartBuilder mpb = modelBuilder.part(\"deck\",GL30.GL_TRIANGLES, VertexAttributes.Usage.Position | VertexAttributes.Usage.Normal,\r\n           new Material(blendingAttribute, ColorAttribute.createDiffuse(colors[colorPick])\r\n                                                   );\r\ncolorPick = (++colorPick) % colors.length;  \/\/setup so next object has diff color\r\n\r\nBoxShapeBuilder.build(mpb, width,depth, w, d, thick);\r\nmodel = modelBuilder.end();\r\n           \r\nModelInstance myInstanceWORKS =  new ModelInstance(model, 0f, 0f, 0f);\r\n```\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nlibGDX v1.9.9\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [X] MacOS\r\n\r\nThis produces \r\n\r\n<img width=\"644\" alt=\"screen shot 2019-03-07 at 12 32 29 pm\" src=\"https:\/\/user-images.githubusercontent.com\/5215735\/53979032-a9f58980-40da-11e9-8de1-a466e46c4bc2.png\">\r\n\r\nIf I change createDiffuse(...)  to: `ColorAttribute.createAmbient(...)`  (or anything else for that matter).... I get: \r\n<img width=\"855\" alt=\"screen shot 2019-03-07 at 12 30 34 pm\" src=\"https:\/\/user-images.githubusercontent.com\/5215735\/53979065-c265a400-40da-11e9-93f0-edaac9197418.png\">\r\n\r\n","comments":["Ambient color is not implemented by default shader, it's a missing feature. You can implement it in your own shader though.\r\n\r\nMaybe this issue could be renamed as \"Ambient color not implemented in default shader\" and tagged as feature request.","wow.... that's an obscure artifact.   If I understand what you're saying - it has nothing to do with the light source,  the problem is the material's color.\r\n\r\nIt also appears that the ONLY material color is ColorAttribute.createDiffuse(color) works.... ambient, specular, reflective - these do not work.\r\n\r\nThe other problem with this \"artifact\" is that it's not very intuitive that you could figure out that it is a shortcoming in the shader.   I found it difficult to even try to express the problem I was having until I finally stumbled on \"the fix\" and even then it wasn't really clear how to express this in the form of a bug report (as you can tell by my strange intro to this thread).   \r\n\r\nI will re-label it and submit it as a \"feature request\" though it really is more of a huge \"feature gap\" that newbees like me tend to fall into.","> Ambient color is not implemented by default shader, it's a missing feature. You can implement it in your own shader though.\r\n> \r\n> Maybe this issue could be renamed as \"Ambient color not implemented in default shader\" and tagged as feature request.\r\n\r\nAren't there any \"off-the-shelf\" shaders that support both diffuse and ambient??  Is there a source for alternative shaders where I could use someone else's shader as a point of departure?  ","@robertlight you can get help from community : https:\/\/libgdx.badlogicgames.com\/community.html . you can found me and others on discord. ;-)"],"labels":["enhancement","3D"]},{"title":"After keyboard opens and libgdx fragment moves up it shows a black area where was the fragment","body":"#### Issue details\r\nAs example I used https:\/\/github.com\/kbigdelysh\/libgdx-in-fragment . As I can see this project based on official wiki page about libgdx fragments howto. The problem is that if you add EditText below TextView in this repo and if you click on it you will see a black area after libgdx fragment moves.  After that if you type something to EditText and apply (add new line) this text it will shows as it should be without black area. What is that? is it a bug or I did a mistake somewhere? I tested it on Emulator Nexus 5\r\n\r\n#### Reproduction steps\/code\r\n1. clone https:\/\/github.com\/Voaz\/libgdx-in-fragment\r\n2. run\r\n3. click EditText element. The keyboard will open\r\n3.1 Now you will see black area at the place where was a gdx fragment\r\n4. write something into EditText element and apply (enter) (possibly it depends to resizing a EditText element)\r\n4.1 black area is gone\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.9\r\n\r\n#### Stacktrace\r\n--\r\n\r\n#### Please select the affected platforms\r\n- [* ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["1.6.1 is several years old. Please try with 1.9.8 or 1.9.9.","Sorry, I did a mistake. Actually version is 1.9.9","So after  hours of researching I found a row in styles.xml : \r\n```xml\r\n    <item name=\"android:windowFullscreen\">true<\/item>\r\n```\r\nIf I will set value to `false` for this item that will fix the black area problem, but it is necessary for me to execute app in fullscreen mode. Any advice or ideas? ","Put `useImmersiveMode` in your AndroidLauncher\r\n```\r\nAndroidApplicationConfiguration config = new AndroidApplicationConfiguration();\r\nconfig.useImmersiveMode = true;\r\n```"],"labels":["bug","android"]},{"title":"Libgdx fails to load natives on Windows if username contains non-ascii characters","body":"#### Issue details\r\nOn Windows, Libgdx seems to fail to load dynamic libraries when users have non-ascii characters in their usernames. I looked into it and found the root cause. It appears`System.load()` does not accept non-ascii characters in the path. It appears to be a known issue: https:\/\/bugs.openjdk.java.net\/browse\/JDK-8195129\r\n\r\nLooking into the code. I think the issue with Java can be worked around, in `SharedLibraryLoader.java`, if the path is checked for non-ascii characters before being fed into `System.load()`. If the path does contain non-ascii characters, one of the fallback paths can be used such as the relative path `.temp`. This should be fine if the game is installed in `C:\\Program Files` since that path is used by Windows and shouldn't ever contain non-ascii characters. \r\n\r\n#### Reproduction steps\/code\r\nI put together the minimal amount of steps to reproduce the issue since reproducing the issue with libgdx as it is in the wild requires creating a new system user. I figured this example would be easier for demonstrating the issue.\r\n\r\n1. Make a directory with a non-ascii unicode character in it such as `test\u5927`. \r\n2. Put a dll in it like `gdx64.dll`.\r\n3. Create the following `Test.java` program and run it:\r\n```\r\nimport java.io.File;\r\n\r\npublic class Test {\r\n    public static void main(String[] args) {\r\n        System.load(new File(\"test\u5927\/gdx64.dll\").getAbsolutePath());\r\n    }\r\n}\r\n```\r\nIt should crash with an error like:\r\n```\r\nException in thread \"main\" java.lang.UnsatisfiedLinkError: Can't load library: C:\\longabsolutepath\\test\u5927\\gdx64.dll\r\n        at java.lang.ClassLoader.loadLibrary(Unknown Source)\r\n        at java.lang.Runtime.load0(Unknown Source)\r\n        at java.lang.System.load(Unknown Source)\r\n        at Test.main(Test.java:14)\r\n```\r\n\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nAt least libgdx 1.9.5 and up.\r\n\r\n#### Stacktrace\r\n```java\r\nLwjglApplication: Couldn't initialize audio, disabling audio\r\njava.lang.UnsatisfiedLinkError: C:\\Users\\???????\\AppData\\Local\\Temp\\libgdx???????\\dc0f0009\\lwjgl64.dll: Can't find dependent libraries\r\n        at java.lang.ClassLoader$NativeLibrary.load(Native Method)\r\n        at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1941)\r\n        at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1824)\r\n        at java.lang.Runtime.load0(Runtime.java:809)\r\n        at java.lang.System.load(System.java:1086)\r\n        at org.lwjgl.Sys$1.run(Sys.java:70)\r\n        at java.security.AccessController.doPrivileged(Native Method)\r\n        at org.lwjgl.Sys.doLoadLibrary(Sys.java:66)\r\n        at org.lwjgl.Sys.loadLibrary(Sys.java:87)\r\n        at org.lwjgl.Sys.<clinit>(Sys.java:117)\r\n        at org.lwjgl.openal.AL.<clinit>(AL.java:59)\r\n        at com.badlogic.gdx.backends.lwjgl.audio.OpenALAudio.<init>(OpenALAudio.java:72)\r\n        at com.badlogic.gdx.backends.lwjgl.LwjglApplication.<init>(LwjglApplication.java:88)\r\n        at com.badlogic.gdx.backends.lwjgl.LwjglApplication.<init>(LwjglApplication.java:69)\r\n        at com.megacrit.cardcrawl.desktop.DesktopLauncher.main(DesktopLauncher.java:53)\r\nException in thread \"LWJGL Application\" java.lang.NoClassDefFoundError: Could not initialize class org.lwjgl.Sys\r\n        at org.lwjgl.opengl.Display.<clinit>(Display.java:135)\r\n        at com.badlogic.gdx.backends.lwjgl.LwjglGraphics.setVSync(LwjglGraphics.java:558)\r\n        at com.badlogic.gdx.backends.lwjgl.LwjglApplication$1.run(LwjglApplication.java:124)\r\n```\r\nThe problem is that the absolute path used here is writable, but still not usable by `System.load()` since it contains non-ascii characters in the user's username.\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [x] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["> I think the issue with Java can be worked around, in SharedLibraryLoader.java, if the path is checked for non-ascii characters before being fed into System.load()\r\n\r\nYeah, but SharedLibraryLoader isn't even used in your example, or your stacktrace. I don't see a workaround yet which doesn't involve modifying library dependencies (lwjgl2\/openal in this case, but the same issue happens with lwjgl3).","An alternative could be to try other locations if `load` fails.","Fallback location could be Java temp directory - not ideal but it'll work.","Sure, many locations can be tried. Currently we find a temp folder, trying multiple until one is found, then try to load the lib once. This should change so that finding the temp folder AND loading the lib is tried for each temp folder location. A temp folder may contains characters that cause loading to file, as described above, but may also not have execute permissions or something else could go wrong.","Does `System.setProperty(\"java.io.tmpdir\", System.getenv(\"ProgramData\"))` instead of leaving it as `%TEMP%` work as a solution? It still includes the Windows username in subfolders (e.g. `libgdxJames`, `lwjgl_James`) so I have a degree of scepticism.\r\n\r\nhttps:\/\/github.com\/libgdx\/gdx-liftoff\/commit\/cb49a0f2ca102bc73e77662e0847b3f0b7655a44","Liftoff's solution was tested with the fictional username `K\u0131ng` (using the dotless i from Turkish, which is known to cause issues with case in sorting also). It hasn't been tested with spaces in the username, but I know someone who used her `Firstname Lastname` (all ASCII chars) as her username, and that caused issues with TeaVM even though LWJGL3 worked fine. I can test again if there's a need.\r\n\r\nIt might be nice (once we can settle on a solution) to have StartupHelper added to libGDX and run in Lwjgl3ApplicationConfiguration's constructor. I'm not sure if there's a better place to put it; it should really only run once (maybe a static initializer block in that configuration class?)."],"labels":["desktop"]},{"title":"[Dicussion] An argument for upgrading to Java 8","body":"Now, I know there's been a few issues and PRs requesting Java 7 support posted here already. Nearly all of them have been closed for various reasons, mostly related to Android and GWT compatibility. Regardless, I would like to discuss the possibility of upgrading source compatibility to Java 8 across the entire codebase.\r\n\r\n### Why?\r\nJava 7 and 8 come with some language features that, in my opinion, could greatly improve the codebase:\r\n- Diamond operators could be used to reduce generic declaration redundancy\r\n- Default methods could be used in classes like `ApplicationListener` to automatically provide `ApplicationAdapter` functionality out of the box without creating a separate abstract class\r\n- Static interface methods could improve code organization\r\n- Listener utility interfaces could be created and used in Scene2D in conjunction with lambdas to provide much cleaner listener support, e.g. `button.clicked(e -> System.out.println(\"Clicked!\"))`\r\n- Lambdas could be used instead of anonymous classes across the codebase, e.g. when posting `Runnable`s to an application or using `gdx.utils.Predicate` in `Array`s\r\n\r\n### But isn't Java 8 unsupported?\r\nNo, Java 8 language features are currently supported across all libGDX backends. This includes [GWT](https:\/\/stackoverflow.com\/questions\/15693169\/java-8-support-in-gwt), [Android](https:\/\/developer.android.com\/studio\/write\/java8-support), Desktop and [RoboVM](https:\/\/github.com\/MobiVM\/robovm\/issues\/259).\r\n\r\n### What about minimum Android API levels? Will they need to be increased?\r\nNo. According to the [Android documentation](https:\/\/developer.android.com\/studio\/write\/java8-support), default interfaces, static interface methods and lambdas work at _any minimum API_ level, even across third party libraries.\r\n\r\n### But the new Java 7\/8 API additions don't work on Android\/GWT\/RoboVM!\r\nThis is mostly true. `java.util.stream`, `java.util.function` and other subpackages and classes are not supported at the current libGDX minimum Android API level. _However_, they don't need to be. Many, many packages and classes from Java 6 are _already_ unsupported in Android, and these new 7\/8 API additions are no different. The solution is to not use any new API from Java 7 or 8. I am proposing this upgrade for the sake of the **new language features**, not new API.\r\n\r\nWhat this means is that if you want your game to run on older phones, you don't use any new Java 7\/8 API, just like you don't use `java.lang.reflection.*` on GWT or `java.awt.geom.*` on Android. This is not something that should be a problem. Most modern IDEs warn users when their code uses classes that are not compatible with their minimum API level.\r\n\r\n### Has Java 8 been tested on these backends to make sure it works?\r\nYes. If you're doubtful, I can personally attest to having a [game](https:\/\/github.com\/Anuken\/Mindustry) that uses plenty of Java 8 lambdas and `default` methods, while running fine on older Android phones, iOS and HTML5.\r\n\r\n### Upgrading to Java 8 will break things!\r\nNo, it won't. The version of the Android plugin used in gdx-setup already supports desugaring Java 8 features, and the current version of GWT supports Java 8 as well. Java 8 has been out for more than 5 years now, and thus most developers should have upgraded to it already.\r\n","comments":["I don't think we would add diamond operators. We don't have redundancy because we just omit generic types on the RHS.\r\n\r\nOf the rest that you listed, making it nicer to use lambdas for UI events is most interesting. The things that only affect the libgdx codebase (rather than using libgdx APIs) are not super exciting, since it's poking at a bunch of code that works fine. libgdx is mostly in maintenance mode, so adding to that burden isn't great. Changes that improve libgdx API usage would be welcome though (within reason!).\r\n\r\nFWIW, Spine (my software which relies on libgdx) will no longer be relying on Java 7 after early January 2019. If the rest of what you said about Java 8 support is true, I personally don't have any reasons not to do it. The only worry is if common APIs are unavailable (though I am not a big fan of the stream\/function stuff anyway).","There is also the issue of overhead on most of these syntactic sugar APIs that extra synthetic accessors and methods that we really don't want to have in the core API. As well as being less performant in some cases for questionably _nicer_ syntax. \r\n\r\nWe can upgrade our mins to java 8 in core repo, but as we wouldn't want to be using many of the nice features its pretty pointless.","> libgdx is mostly in maintenance mode\r\n\r\nYou stated this twice, and it is sad to hear. libGDX is a great framework, but as time's are changing, there already is a lot of improvement potential on all backends. There are people willing to help.\r\n\r\n> We can upgrade our mins to java 8 in core repo, but as we wouldn't want to be using many of the nice features its pretty pointless.\r\n\r\nNo: Upgrading the core demonstrates every user that it is supported. ","It's no secret, just look at [the activity](https:\/\/github.com\/libgdx\/libgdx\/graphs\/contributors) and [search trend](https:\/\/trends.google.com\/trends\/explore?date=2010-05-01%202018-12-20&geo=US&q=libgdx). libgdx is not dead. It is still a great tool, even if it we aren't adding new features. It's a great framework and can do a lot. I use it every day working on [Spine](http:\/\/esotericsoftware.com\/).\r\n\r\nPersonally, I'm not interested in Android apps. I might do [one](http:\/\/esotericsoftware.com\/gloomhaven-helper) for fun from time to time, but I'm not going to debug Android quirks. I really don't like Apple\/iOS and I'll never again work on junk that. GWT is really neat, but not super fun to work on. I'm happiest just maintaining scene2d, which is what I use the most. Other core team members have found other things to do, or they are still around, just not as much as back in the day. I can't blame them, maintaining a half dozen backends isn't the most fun thing in the world. We all do this for fun, after all.\r\n\r\nThere are some people who help, some a little, some a lot. The quality of their submissions vary wildly. They come and go. It's great having good issues and good PRs, and we merge PRs that are clear improvements. It doesn't make sense to merge big things and then be left doing the maintenance after the contributors have wandered off. This has happened a number of times (eg DecalBatch). libgdx is already a large project and doesn't necessarily need more stuff. One could argue that some of the \"stuff\" it has already crosses the boundaries of what makes sense to include. Many things make more sense as modules or separate projects that use libgdx for their foundation.\r\n\r\nWhat the project really needs is maintenance help, not backend improvements. 73 PRs and 244 issues as of this writing is already way out of hand. We used to keep it to just a few, but we don't have the bandwidth anymore. If you want to help out, please consider monitoring issues and PRs.",">NathanSweet: I don't think we would add diamond operators. We don't have redundancy because we just omit generic types on the RHS.\r\n\r\nThis doesn't seem to be the case. Running a check with Intellij came up with 80+ places in code with explicit types being used.\r\n![screenshot from 2018-12-20 11-26-41](https:\/\/user-images.githubusercontent.com\/10100000\/50367029-42a05280-054b-11e9-9dcf-1139242f852b.png)\r\n(Mind you, this is after some manual cleanup, so the actual number may be much higher. I realize that there isn't much of a need to fix this since all it does is waste a few characters of space, but I thought it was worth pointing out.)\r\n\r\n>Tom-Ski: As well as being less performant in some cases for questionably nicer syntax.\r\n\r\nIn which cases are `default` \/ lambdas \/ diamond operators less performant than Java 6 equivalents? Looking it up, I only find a stackoverflow post that claims lambdas are _faster_ than anonymous classes, and a question talking about default interface performance without any conclusive results. Diamond operators don't seem to change performance either.\r\n\r\n---\r\n\r\nI suppose you're right about not touching code that's perfectly functional. However, I'm not necessarily proposing that old code be rewritten to be 'cleaner' with java 8 API. Even if old code is not changed, updating to Java 8 opens up the possibility of new contributions making use of the new language features.\r\n\r\n*(sorry for changing the topic; I just wanted to address some points that Nate and Tom-Ski made)*\r\n\r\n","Likely most of those situations where `<>`  would be useful could also be changed to not use generics at all. Eg, in Array, I assume the 2 \"warnings\" are:\r\n```\r\nstatic public <T> Array<T> of (Class<T> arrayType) {\r\n\treturn new Array<T>(arrayType);\r\n}\r\nstatic public <T> Array<T> of (boolean ordered, int capacity, Class<T> arrayType) {\r\n\treturn new Array<T>(ordered, capacity, arrayType);\r\n}\r\n```\r\nI would prefer changing both of these to `new Array(`, which is even fewer characters than `<>`. I really don't care about the \"usage of a raw type\" warning (which we have disabled for libgdx, at least in the Eclipse projects). I happily use raw types to have less typing and less code. I usually do this in my contributions, others may like having duplicate generics on the RHS (eg because they are terrible people).\r\n\r\nAs for performance, probably Tom-Ski was referring to the stream API stuff or similar, which may allocate (I don't personally use it, goddamn kids with all their fancy new features!).\r\n\r\nPutting aside there are few new additions to libgdx, I don't feel it's super important to use Java 8 for new additions since avoiding it is very easy.","@NathanSweet Thanks for your friendly answer. However, I disagree on some points.\r\n\r\nIs libGDX in maintainance mode because there is general lower interest in it, or is lower interest in it because it is in maintainance mode? They casuality may be exactly in the opposite direction as you suggest. If I were a new interested user, I would probably not decide to use libGDX for my game after taking a look at libGDX homepage, the recent release count and the forum threads.\r\n\r\n> we merge PRs that are clear improvements\r\n\r\nUnfortunately, that is not true. There's PR #4265 still open for two years for a faster GWT bootstrap process. That's a clear imrpovement. Unfortunately, it cannot be merged any more and the committer is not active any more. If you say this is a more complicated PR - which is true - than take #4137 as an example of a clear improvement that was not merged for two years.\r\nWhat about #3457? It is also a clear improvement because core libGDX scene2d lacks focusable support. But I doubt you will approve it, so please at least make a statement and reject it.\r\n\r\n> What the project really needs is maintenance help, not backend improvements. 73 PRs and 244 issues as of this writing is already way out of hand. We used to keep it to just a few, but we don't have the bandwidth anymore. If you want to help out, please consider monitoring issues and PRs.\r\n\r\nI do that for the last 12 month, and it is neither help nor satisfying. I can comment on issues, that's all I can do. I can't merge PRs that I think are good, I can't deny ones that I think are not. I cannot discuss with others about the PRs to get things done: Where is the libGDX decision board to address if this issue - upgrading to Java 8 - is rejected or accepted? Same for #5482, I stated my opinion there and it is likely that this PR will never get merged nor rejected. So why should anyone invest a lot of time in testing some other, more complicated PRs or issues if the invested time leads to nothing? You need help from developers, and for the invested time developers don't want to just support the status quo, but want to have a voice and improve things.\r\n\r\nJust to make it clear, I heavily respect the work you and others did here. But in my opinion the project deserves and needs more efforts than it gets the last 12 months. I will end the discussion on this issue now because Anuken is right, it is off topic here. But there was a need to say it.","libgdx usage has waned at about the same time the core developers' interest in spending a lot of time on it has waned. I seriously doubt there is a causal relationship. Unity probably has the biggest impact.\r\n\r\nSometimes a PR simply gets overlooked. Sometimes a PR is too big or has too much impact on current API users. Sometimes a PR does fit with the other things that libgdx is doing, but could be implemented separately -- we aren't excited about taking on even more responsibilities. Sometimes the core developers interested in that part of libgdx don't have time -- I won't generally merge PRs in areas I don't use myself, as that makes me responsible for that to work correctly.\r\n\r\nFWIW, that some PRs get neglected doesn't mean we don't merge PRs.\r\n\r\nFocus for scene2d.ui is a reasonably complex problem that affects most widgets. That PR is incomplete, as a full solution would do focus traversal for all widgets in some nice way and include rendering focus indicators (both extensible for custom widgets). Even a PR doing that means a lot of changes. I'm not sure I would like to add so much complexity since part of scene2d.ui's charm is simplicity, especially when the need is not super large, IMHO. While it would be nice to have, Spine is probably the largest scene2d app and it gets by pretty OK without special focus support at all. Since I don't have a personal need for it and at least simple focus traversal can be done on top of scene2d.ui, I am not able to find the time for a project of that size. The PR can stay since it represents the feature and contains implementation ideas.\r\n\r\nI'm more of loner than others, so I've never been charge of who gets promoted to be able to merge PRs, etc. Probably if you jump on IRC you could fight for such a promotion so you can do more.\r\n\r\nYou're not wrong that the core developers are less active and less interested in spending their time on libgdx, and of course that makes the library suffer. We each have our own reasons for the reduced interest. We could hand the keys over to the next generation, but while our interest may be less, it isn't zero. We have apps that rely on it and we don't want to see our baby made a mess of, taken in unwanted directions, become unstable, etc.","I agree with @RUSshy, if the original developers want to preserve libGDX the way it is, a fork should be made that allows it to evolve. As to who should own this fork and who will manage it, and how it might gain publicity, I do not know. But I do agree that such a thing should happen.","I agree that the right amount of stuff seems to exist. That's why as a company we like it. We write our own libraries onto of libgdx because of its generic and unspecific code. If I wanted bloat or everything in the books I would use Unity or unreal.\r\n\r\nThat said I think someone should clearly be active on merging bug PRs and PRs related to maintenance. I agree that's way to many issues. I have been working on my server cluster, docker backends.... Soon I'll be back in libgdx and will look at putting some of my free time to helping close issues and maintenance. ","I learned how to program Android games with libgdx a long time ago. I haven't published any games but I learned a lot and it's a very good framework and in java.\r\n\r\nIt's a pity that it's only in maintenance, because it will end up dying in that case.\r\n\r\nIn this world, software that doesn't evolve ends up being surpassed by others.\r\n\r\nJava 8 would be a good leap forward and adding some tools to the ones that already exist (hiero, fbx-conv ...) would also be good.\r\n\r\nI don't know if kotlin will end up replacing java (in Android at least) or is a Google strategy to pressure Oracle, for my part I prefer to continue java but who knows.","> In this world, software that doesn't evolve ends up being surpassed by others.\r\n> \r\n\r\nPerhaps. I have not thought of this as an actual problem though because who makes fun features for games, I do not libgdx.\r\n\r\nKeeping up on software versions is important though. However Java 9-11 are not better solution for most. As it stand a lot of stalled libraries use Unsafe Direct Buffer reading  (and other unsafe implementations) which was removed in 10 or 11. Using direct buffer is not the same read speed, networking and disk IO primarily are jacked. \r\n\r\nThere are pros to future java beyond 13 if they add the actual awaited for features for generics and specialization. \r\n","Late to the party!\r\n\r\nThis is a library, so for compatibility's sake, let's keep it at a low Java source version. Some stuff might not work (Android doesn't fully support Java 8). Upgrading to Java 8 might also be less performing as others pointed out. Personally I think, Java 6 is easier to read than someone's Lambda code block but I am just getting old.\r\n\r\nNow, keeping libGDX at Java 6 doesn't really stop anyone from using Java 13 or whatever their choice is. Changing the codebase to Java 8\/13\/etc. compatibility doesn't make it either (a) faster nor (b) does it change any of the public methods you can call. It's going to look the same and perform the same.","Well, it's 2021 now. Many project membership additions happened last year, and I wouldn't consider libGDX to be in the same maintenance mode it had back in 2018. I believe libGDX uses Java 7 internally now, possibly because major build tools (Maven and to some extent Gradle) aren't supporting Java 6 any more. I'm not sure if I could download a Java 7 JDK today and have it even build libGDX, because of the handful of vendors who still offer JDK 7, I don't even know if they've patched those JDKs to support Maven Central's requirements for security on downloads. Java 8, though, remains in wide use; see last year's [JetBrains developer survey](https:\/\/www.jetbrains.com\/lp\/devecosystem-2020\/java\/) that showed 75% of surveyed Java developers used Java 8, compared to 7% still using Java 7 and 3% still using Java 6. Android continues to improve Java 8 support and bring it back to older OS versions; see [the Android documentation for this](https:\/\/developer.android.com\/studio\/write\/java8-support). RoboVM, last I heard, was [working on updating to the newest Android core](https:\/\/dkimitsa.github.io\/2020\/10\/06\/runtime-update-libcore10\/), but it isn't fully ready yet, to my knowledge. RoboVM has supported Java 8 language level features for a long time via RetroLambda or other tooling. GWT has released version 2.9.0, though libGDX doesn't currently use it; this GWT version allows language level 11 features, and has the same JDK 8 API support as 2.8.2 (language level 8 is already supported by 2.8.2).\r\n\r\n@noblemaster :\r\n> Upgrading to Java 8 might also be less performing as others pointed out.\r\n\r\nAre you referring to https:\/\/github.com\/libgdx\/libgdx\/issues\/5487#issuecomment-449524222 , which noted the exact opposite? Unless you have a benchmark, \"might also be less performing\" is meaningless and only spreads FUD.\r\n> Changing the codebase to Java 8\/13\/etc. compatibility doesn't make it either (a) faster nor (b) does it change any of the public methods you can call.\r\n\r\nIt absolutely allows libGDX more power in how it can be structured. I don't know if you've used default methods in interfaces, but they are great for writing code in one place, DRY, and having it apply to all implementations. Callbacks in UI code can use lambdas, and lambdas with the same type signature are interchangeable thanks to the FunctionalInterface annotation. Java was late at adding lambdas in 2014; C# has had something similar or better for a while, and even C++ code is using first-class functions these days. I wouldn't recommend the Stream APIs for libGDX because I don't know how much they allocate, but they aren't required to make use of language level 8 features.\r\n\r\nI would rather not be stuck in 2011, with Java 7, or 2006, with Java 6, for the rest of libGDX's lifespan. In any case, our tooling will be making this decision with or without us involved, and at some point Java 6\/7 support will be fully removed from Maven and Gradle. [Gradle itself requires Java 8 or higher to run](https:\/\/docs.gradle.org\/current\/userguide\/building_java_projects.html#compiling_and_testing_java_67), though at this point it can still compile Java 6 applications (but not Java 5). At that point we could seek shelter in an older Gradle version, which inevitably wouldn't support a freshly-downloaded newest-version JDK, and watch as the world continues to move ahead without us. That is when I would consider libGDX a dead project.\r\n\r\nI would rather not hasten this project towards its grave. I think that whenever RoboVM has a release that supports language level 8 and preferably some APIs from that version, we should update to Java 8 for libGDX itself, probably restricting usage to language level 8 and not APIs drawn wildly from that version. Users can continue to use libGDX 1.9.13 or earlier for existing projects or new ones that need to support very old devices. 1.9.13 works pretty much as well as you could ask for, especially if seeking a stable island amidst API changes. To mark a backwards-incompatible change, this could be delayed until libGDX 2.0.0, or could be previewed like the 0.99.x releases before libGDX 1.0.0 . I don't think there's much need to update to Java 11 or newer in libGDX; there's some conveniences like `var` and Collections builders, but not much else. Java 9 is considered by Oracle and the OpenJDK teams to be the last major release in Java for the foreseeable future (major meaning breaking backwards compatibility), and since Java 8 added lots of features where Java 9 didn't, there shouldn't be any serious need to update past Java 8. The exception would be if something really big and relevant to games is released (like Project Valhalla, for value types), and becomes widely available across all of libGDX's target platforms.\r\n\r\nThis issue\/discussion is still open 2 years later, and things in the ecosystem have changed and continue to change. I sincerely hope libGDX will be able to change with that ecosystem.","I agree, as soon as MobiVM supports Java 8, we no longer have any justifiable argument against Java 8 in libgdx.","We should probably also thing about the user of libGDX. By users I mean other developers that use libGDX. They can use Java 8, 11, or whatever they like. It's no a problem at all. \r\n\r\nI don't think there is a problem going to Java 8 for mobile (Android & iOS). However, it's another story on desktop. Not too long ago, I was using a Debian distribution for my servers that didn't provide a Java 8+ JVM. Switching to Java 8, would mean I would probably be forced to update all my Debian distributions and hope everything will go fine with the databases etc. Although I am on newer servers now with Java 8, I can see it cause problems for others.\r\n\r\nNot too long ago I used Java 7 for my Java client distributions that auto-update via getdown. Although the latest binaries are using Java 8 too, some players probably still use the old client with Java 7. If things are suddenly switched to Java 8, their game installs would stop working and I would have to deal with a incoming stream of user inquiries. \r\n\r\n\r\nNo developer that uses libGDX is limited by libGDX using Java 7. However, forcing Java 8 on everyone might cause some headaches for some. Are we doing to rewrite libGDX with lambdas just for the sake of it? I think the needs of the many is greater than the needs of the few. ","The only still supported debian build that doesn't include openjdk8 is jessie, which is Extended Long Term Support and only offered as a commercial option. I would be amazed if anyone was running such an old release as a daily driver laptop. And even if they were, they could simply grab a java 8 openjdk jre.\r\n\r\nIf libgdx developers don't want to force users on very fringe cases to upgrade, they an always opt to not update libgdx to the latest version.\r\n\r\n>Are we doing to rewrite libGDX with lambdas just for the sake of it?\r\n\r\nI really do think there are many benefits of using Java 8 over 7, and tommyettinger mentioned most of the big ones. Pretty soon it will become actually difficult to get libgdx to build due java 7 compilation no longer being supported on older java. Functional interfaces are very nice, and would add a lot of quality of life changes to APIs. Default interfaces will help clean up the projects load of duplicated code between backends.","All I am saying, we should probably ask the developers that use libGDX if there are any concerns. We are forcing an update that might cause problems for some. ","It's about time. Reasons have been mentioned so this is just a +1 for moving on.","How about we make a news announcement with the pros & cons on libgdx.com? We should make sure to post it on Twitter too to get some feedback? I am mostly against it, but if there are no major concerns, I'll give in too. Here are my points:\r\n\r\n**AGAINST Java 8**:\r\n\r\n- **Porting**, as in cross-compiling to Switch, XBox & PlayStation is potentially hard if we have Lambda & default interfaces in the code. In addition, using Java 8 features such as the stream APIs might be harder to port also. But maybe it will never come to it anyways.\r\n- **Compatibiliy**: people that only have Java 7 available (e.g. on a server or client) will not be able to use it. \r\n\r\n**PRO Java 8:**\r\n\r\n- **Duplicate Code**: in addition to what's already used, we have default interfaces\/Lambda in Java 8. \r\n- **Building Java 7**: it might not be possible to build a project for Java 7 with never JVMs. Do we have a date?\r\n\r\n\r\n\r\n\r\n> The only still supported debian build that doesn't include openjdk8 is jessie, which is Extended Long Term Support and only offered as a commercial option. I would be amazed if anyone was running such an old release as a daily driver laptop. And even if they were, they could simply grab a java 8 openjdk jre.\r\n\r\nMaybe in a perfect world. When I tried OpenJDK 8 on my old Debian server, it tended to crash after 1h running or so. It was some sort of file access problem that ended in a crashes JVM (the bad kind). The Oracle JDK 8 worked, but I didn't want to go forward due to potential licensing issues.\r\n\r\n","I just want to point out, java 8 is almost 7 years old. To my knowledge, there is no maintained openjdk-7 distribution that includes security patches. \r\n\r\nAs for linux distributions, all of the main distributions currently offering free security updates have support for java 8 out of the box.\r\n- [Ubuntu 16.04](https:\/\/packages.ubuntu.com\/source\/xenial\/openjdk-8)\r\n- [Debian Stretch](https:\/\/packages.debian.org\/stretch\/openjdk-8-jdk)\r\n- [CentOS 6](https:\/\/centos.pkgs.org\/6\/centos-x86_64\/java-1.8.0-openjdk-1.8.0.171-8.b10.el6_9.x86_64.rpm.html)\r\n\r\nIf you're running a system older than these, you likely have bigger problems than a missing libgdx update. We only compile linux natives on 16.04, previous releases will likely have linking issues.","> How about we make a news announcement with the pros & cons on libgdx.com? We should make sure to post it on Twitter too to get some feedback? I am mostly against it, but if there are no major concerns, I'll give in too. Here are my points:\r\n\r\nI've posted to Discord, which is one of the larger communities. I don't know who runs the libGDX Twitter.\r\n\r\n> **AGAINST Java 8**:\r\n> \r\n> * **Porting**, as in cross-compiling to Switch, XBox & PlayStation is potentially hard if we have Lambda & default interfaces in the code. In addition, using Java 8 features such as the stream APIs might be harder to port also. But maybe it will never come to it anyways.\r\n\r\nNo one has even come close to making libGDX, as Java, run on those consoles. Do you know if they even have a JRE available for their architectures? When Slay the Spire was ported to consoles, it involved a source rewrite to C# and MonoGame, which, naturally, supports what are effectively the same as lambdas. Default interfaces could probably be filled in by one of several C# features, like extension methods. But, whoever it is who has the Java-to-C# translator has not made it open source and we are in no way obligated to work around its hypothetical defects.\r\n\r\n> * **Compatibiliy**: people that only have Java 7 available (e.g. on a server or client) will not be able to use it.\r\n\r\nPeople that only own a toaster running Bell Labs UNIX can't use it either. Most game distribution packages a JRE these days, and having Java 7 available to for the whole system to use is *a huge security flaw* because Java 7 isn't getting security updates and has numerous known vulnerabilities.\r\n\r\n> **PRO Java 8:**\r\n> \r\n> * **Duplicate Code**: in addition to what's already used, we have default interfaces\/Lambda in Java 8.\r\n\r\nI think we probably wouldn't see much benefit from the Stream API, and language level 8 is better supported than JDK 8 APIs anyway. We could consolidate some of the DIY functional features in libGDX's utils package, too.\r\n\r\n> * **Building Java 7**: it might not be possible to build a project for Java 7 with never JVMs. Do we have a date?\r\n\r\nNope, Gradle has tended not to announce this type of thing far ahead of time. Especially with that JetBrains survey showing only 7% of Java developers even use Java 7 (not even as a primary version, at all), I doubt supporting 7 is a major priority.\r\n\r\n> > The only still supported debian build that doesn't include openjdk8 is jessie, which is Extended Long Term Support and only offered as a commercial option. I would be amazed if anyone was running such an old release as a daily driver laptop. And even if they were, they could simply grab a java 8 openjdk jre.\r\n> \r\n> Maybe in a perfect world. When I tried OpenJDK 8 on my old Debian server, it tended to crash after 1h running or so. It was some sort of file access problem that ended in a crashes JVM (the bad kind). The Oracle JDK 8 worked, but I didn't want to go forward due to potential licensing issues.\r\n\r\nThis is the type of thing you probably shouldn't announce to the world... It sounds like this isn't some especially important server though, holding payment info or something. I hope that it's just a testing server kind of thing. I think Java 7 for Linux also didn't have much support for applets, which are the main vulnerable entry point in that version. The reason for a crash could just be that your old server is... old. Doesn't necessarily mean OpenJDK 8 is broken. What type of Java is your 7, a pre-license-change Oracle 7? \r\n","> No one has even come close to making libGDX, as Java, run on those consoles. \r\n\r\nOrangepascal has managed to automate it for Switch. I believe he cross-compiles to C# first then to Mono Game but I don't have the details. I think he had to made some code-changes to make the automation possible. Once it's cross-compiled to C#\/Mono Game, XBox and PlayStation are in the reach of possibilities.\r\n\r\n> This is the type of thing you probably shouldn't announce to the world.\r\n\r\nNot everyone has the time, or choice, or means to upgrade to the latest version that's out every time. Servers aren't free either, neither is switching or upgrading. And just because it's not the latest version doesn't mean it's not secure. \r\n\r\nLooks like you made up your mind already. At least, let's have a honest discussion. We aren't talking about Applets or a toaster running Bell Labs UNIX. A JDK bundled locally with a client is not a vulnerability entry point. Nor is an older JVM that's not exposed. ","> > No one has even come close to making libGDX, as Java, run on those consoles.\r\n> \r\n> Orangepascal has managed to automate it for Switch. I believe he cross-compiles to C# first then to Mono Game but I don't have the details. I think he had to made some code-changes to make the automation possible. Once it's cross-compiled to C#\/Mono Game, XBox and PlayStation are in the reach of possibilities.\r\n\r\nYeah, that's precisely what I said. No one has made libGDX, **as Java**, run on those consoles. If the cross-compiler were part of the libGDX project, then we could make changes with it in mind, but it is not.\r\n\r\n> \r\n> > This is the type of thing you probably shouldn't announce to the world.\r\n> \r\n> Not everyone has the time, or choice, or means to upgrade to the latest version that's out every time. Servers aren't free either, neither is switching or upgrading. And just because it's not the latest version doesn't mean it's not secure.\r\n\r\nhttps:\/\/www.cvedetails.com\/vulnerability-list\/vendor_id-93\/product_id-19116\/version_id-121887\/Oracle-JDK-1.7.0.html , if you want to spend the time going through which of those 213 might be a problem. If you choose to use a version that no longer receives security updates, that is a risk you are taking. Risks aren't free either; there are whole industries built around assessing the cost of risks. I say you shouldn't announce that your server is running an un-update-able version of Java just because it invites unwanted attention from bad actors on the Internet, though you can choose to live with those risks, and if your server isn't connected to the Internet then there's no concern.\r\n\r\n> \r\n> Looks like you made up your mind already. At least, let's have a honest discussion. We aren't talking about Applets or a toaster running Bell Labs UNIX. A JDK bundled locally with a client is not a vulnerability entry point. Nor is an older JVM that's not exposed.\r\n\r\nIf you're on board with bundling a JVM locally with a client, great! We can all use Java 8 then, as soon as RoboVM supports it. I think Steam requires a JVM to be bundled with an app for you to sell it on their platform, but I'm not sure -- this may be a restriction only for MacOS, which definitely doesn't allow a system JVM to be used by Mac Store purchases. I agree with PokeMMO that if distributing a JVM with a game, there are no desktop operating systems (especially ones that can play graphical games) currently in wide use that can use Java 7 but not Java 8.\r\n"," > If the cross-compiler were part of the libGDX project, then we could make changes with it in mind, but it is not.\r\n\r\nThey were. https:\/\/www.badlogicgames.com\/wordpress\/?p=2450\r\n\r\n> I say you shouldn't announce that your server is running an un-update-able version of Java\r\n\r\nIf you read my post, you would be aware that I am not using Java 7 anymore.\r\n\r\n\r\n","Apart from the much newer jdks, the core library version does not restrict you in what jdk you bundle your game with, so I dont see what that is relevant to this discussion. \r\n\r\nI sit on the side of keeping everything as compatible with the most things as possible as long as we aren't breaking for the majority of users to support a very tiny subset. So that tends to keeping the lowest versions possible, and this is consistent throughout libgdx in terms of versioning and devices supported.\r\n\r\n\r\nWith regards to API not being available, I think the gwt case is a little comparable, this is just a lot worse. There will just be a lot more headaches for people trying to use something that they don't have any idea is not compatible. People aren't going to look for the library of what parts of the jdk are supported before hitting a problem. I dont think that's avoidable, so essentially I think a moot point, we will just have more people struggling here when they try to use things that aren't supported. That is for docs to handle.\r\n\r\n\r\nMy largest concern here is that the language features and new apis creep into the core library for nothing other than aesthetic or na\u00efve overall benefit. As discussed in the other threads, this can be less performant, especially in terms of garbage. I agree with @tommyettinger and @PokeMMO s sentiments that they can improve the codebase structure, readability and nice syntactic stuff. I think the example of lambdas in the UI layer for listeners is a good example. With this we must be more diligent to make sure that we don't regress for one of the core principles that we use in libgdx, specifically 0 gc. Perhaps we need some tooling and benchmarking instructions to help us out here.\r\n\r\n\r\n@noblemaster 's comment on supporting those cross compilation _is_ valid. We have new stuff in core library that our robovm backend ends up using from new apis that MobiVM doesn't support yet, and it will break, and we lose ios deployment, which is a deal breaker. You can make the argument that we aren't running java on ios too, but it doesn't change the fact that what we use in the core library has an impact on the toolchains we use to deploy to the specific platforms. MobiVM is very much a critical part of libgdx ecosystem, and needs to be taken into account as we proceed unless we want to kill that platform.\r\n","@Tom-Ski I don't think anyone wants to rush this process in a way that breaks MobiVM. dkimitsa mentioned updating MobiVM's Android core to a much newer version last year, but I don't know how far off that is. Language level 8 should already be supported on all platforms, via RetroLambda if needed (I think MobiVM uses RetroLambda now?). There are a lot of new Java 8 APIs and the platforms support them to different extents (obviously no Thread on GWT, so no Java 8 parallel stuff there either, for instance); Android Studio and I think also IDEA can be configured to use an Android version of the JDK that only has the methods that are Android-compatible to the specified version. I think if needed, we could update to language level 8 right now, and not break anything as long as the appropriate versions are kept up-to-date. This means no sudden additions of Java 8 APIs, but default methods and lambdas should be supported on all platforms, and if some platform isn't (like very old Android), there's RetroLambda.\r\n\r\nI don't think cross-compilation *to consoles* can be considered until someone on the libGDX team has at least tried it. We don't have any idea what some mystery closed-source cross-compiler can do, or what it would have problems with, and it isn't our job to fix code that we can't even see.\r\n\r\nAs for 0 GC, any place that would have created a new anonymous inner class before was allocating, and as I understand it, lambdas are similar to anonymous inner classes that get special performance treatment from Java 8 (I think if you would have created two anonymous inner classes with the same environment and the same contents, a lambda would only be created once and shared, but I'm not 100% sure on this). Creating lambdas where they aren't appropriate could be a problem. Default methods in interfaces shouldn't have any impact on GC.","I'm equating your comments on cross compilation to MobiVM , since its very much the same rough procedure as what would need to be done for targeting consoles.  Even though MobiVM is outside of the libgdx project, it is our job to make sure we are still compatible in order for us to still deploy there. I'm not saying we need to not update anything in case some closed source compiler breaks, I'm specifically talking about Mobivm here and how its important that we don't make any api or language level changes in the internal api just for the sake of it when it has many consequences, this being one of them that many will overlook.\r\n\r\nThese discussions often end up just being kind of fruitless because we are talking in such broad terms and not about a specific example with specific solution. Since you brought that example up we can talk to that:\r\n\r\nMaking an anonymous class for a click listener and a lambda have roughly the same allocate cost in cpu and memory. There will be differences in the generated bytecode and one will be better than the other no doubt, but in this case we don't care since the difference isn't big enough for the general user use case, and this is a one time allocation that would have happened anyway. So this is one of the examples which I think is a good example of introducing these 'new' features into core library for sure.\r\n\r\nBut generally when I say 0GC, I mean critical code that has the potential to be called hundreds\/thousands of times a frame by internal core library or devs themselves.  Core update loop code, render logic, utilities and collections etc. So for a simple example instead for an indexed for loop to iterate over runnables, we used the stream api. Someone makes an interface now return from some functional api instead of a public field, and now we have implicit allocations happening everywhere that was called.","> Orangepascal has managed to automate it for Switch. I believe he cross-compiles to C# first then to Mono Game but I don't have the details.\r\n\r\nI just asked him on Discord, and (at least for his needs) the usage of Java 8 language features shouldn't be much of a problem for porting. \r\n\r\n> **AGAINST Java 8:** [...] people that only have Java 7 available (e.g. on a server or client) will not be able to use it.\r\n\r\nAFAIK LWJGL 3's source level is already Java 8, so this can only pose a problem for people still using LWJGL 2. And those should think about upgrading anyway, considering that there is no support for the new Mac ARM architecture.","MobiVM is currently limiting the option of upgrading to Java 8 and, even if progess is being made, it will probably take a while until it's stable and the Java 8 language features well tested across the board.\r\n\r\nOn the other hand we seem to forget that libGDX is actually on Java 6 (some people believe it's on Java 7 due to Gradle config but libGDX is still being built with Maven).\r\n\r\nCan we agree on upgrading to Java 7 and make Gradle and Maven builds consistent? (I keep using the diamond operator when working on the IDE to see it breaking when I run Maven). \r\n\r\nEven upgrading to Java 7 and fully supporting its language features may have some risks (see https:\/\/github.com\/libgdx\/libgdx\/issues\/5839#issuecomment-553766606_) but we are starting to lose forward compatibility and we can't be stuck on Java 6 forever.\r\n\r\n@Tom-Ski What do you think?\r\n\r\nThere's already a PR ready to be merged https:\/\/github.com\/libgdx\/libgdx\/pull\/5839\r\n\r\n**I don't want to hijack the thread, responses to this should probably be made on the Java 7 PR.**","May as well give my own two cents on the matter now instead of never. If libGDX were to require Java 8 tomorrow, I could not care less.\r\n\r\nAt least, in regards to desktop. It is possible, though not officially supported, to get Java 8 installed on operating systems as old as Windows 2000 (caveat: Oracle only from what I could find and not the latest updates). LWJGL3 libGDX games can be built from and run fine under Java 8 on Windows XP. Haven't tested on Windows 2000 - installing it on my computer would be problematic. So in my opinion there's no need to avoid moving on from Java 7 in regards to compatibility.\r\n\r\nIn regards to Linux, I'll focus solely on Ubuntu, because it's the most popular and also what I use. As of Ubuntu 16.04 (April 2016) Java 7 is no longer available in the repositories. 14.04's support ended April 2019. So it's been challenging to test with Java 7 on Ubuntu for three LTS versions now, and using the final version with it in the repositories isn't advisable.\r\n\r\nI also agree that Java 8 doesn't seem to affect mobile\/web compatibility, though I have less evidence to back this claim up than OP! And the macOS situation is likely similar to Windows\/Linux as discussed above.\r\n\r\nSo in conclusion, I see basically no reason against bumping the requirement up to Java 8 if it's necessary. I'm a little against changing it for the sake of changing it, but if doing so is beneficial for development of libGDX then go right ahead. And really only a little, as the number of people this would negatively impact is surely fractional.\r\n\r\n**HOWEVER,** a very important point I've only thought of after spending too long writing the above five paragraphs is that LWJGL3 does not work on Java 7, as crykn mentioned. Recently #6463 was merged, which means new libGDX projects use LWJGL3 unless the developer goes out of their way use LWJGL2 instead. Running my level 7 LWJGL3 game on Java 7 results in `Exception in thread \"main\" java.lang.UnsupportedClassVersionError: com\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3ApplicationConfiguration : Unsupported major.minor version 52.0`. If someone's still using Java 7, they won't have a good time in the next version of libGDX.","As of https:\/\/github.com\/libgdx\/libgdx.github.io\/commit\/307791b9e2af9a55ee91175e49c64426d71b4009, users are only provided with the nightly version of gdx-setup, which uses LWJGL3. LWJGL3 requires Java 8. Codebase aside, isn't it time we at least had `sourceCompatibility` raised for the `core` and iOS backends in projects, if not the codebase itself, seeing as new projects don't work on JRE 7 anyway unless you go out of your way to make them work? My only reluctance is I have no first-hand experience of the state of things on iOS.","We certainly continue to jump through hoops specifically for iOS support. The last I heard of iOS support for Java 8 [was in 2020](https:\/\/dkimitsa.github.io\/2020\/10\/06\/runtime-update-libcore10\/), and it would be really nice if we could use a Java version that is supported everywhere else...","Latest news regarding MobiVM after asking Demyan (dkimitsa) is that:\r\n`hi, its question of several months to have MVP that can be used.  There is nothing blocking technically but mostly its matter of time. \r\nalso there was a legal moment of mixing Apache and GPL2 code but this might be handled by splitting into separate libraries\/jars\r\n`\r\nThis means that there's nothing actually preventing this to happen except from the time it'd take to do it. \r\n\r\nBecause afaik he's the only person capable of doing this I think we have 2 options going forward:\r\n1. Wait until libcore10 is done (which might be several months but could be longer)\r\n2. Define and limit very specifically which Java 8 language features and APIs we allow on libGDX that must be supported by MobiVM (can this be automated with some code analysis tool?).\r\n\r\nWhat do you think?","I'm honestly in favor of 2.\r\n\r\n> Define and limit very specifically which Java 8 language features and APIs we allow on libGDX that must be supported by MobiVM (can this be automated with some code analysis tool?).\r\n\r\nI think we can actually mostly rely on android tooling to detect this? IntelliJ will e.g. hand out warnings like:\r\n`Call requires API level 24 (current min is 21): java.util.ArrayList#forEach`.\r\n\r\nWe could also backport some of the java 8 API and make it equal to what android currently provides: https:\/\/github.com\/google\/desugar_jdk_libs\/releases\/tag\/1.1.5","I've already been doing Option 2 with [jdkgdxds](https:\/\/github.com\/tommyettinger\/jdkgdxds), it isn't too hard. A potential issue would be the missing functional interface types such as `Function<T, R>` and `IntConsumer`; though these aren't hard to add, no one wants an identical functional interface declared 10 times throughout a codebase. My solution to that is the [funderby](https:\/\/github.com\/tommyettinger\/funderby) library of mostly primitive iterators, which are mostly automatically-generated. Other solutions are surely out there. Another issue would be anything that relies on default methods declared in Java 8 but not available in Java 7 sources; because libGDX doesn't use interfaces much, this might not be an issue with the existing data structures.\r\n\r\nAn automated tool would definitely be welcome. Probably a Gradle plugin, checking compatibility at compile-time?\r\n\r\nThe desugaring library might be a good way to add Java 8 APIs, for sure.\r\n\r\n(EDIT) Oh yeah, happy fifth birthday, this issue! \ud83c\udf82 \r\n\r\n(SECOND EDIT \ud83c\udf84 ) Java 20 and later do not support source or target compatibility with Java 7. Java 20 [was released in March of 2023](https:\/\/en.wikipedia.org\/wiki\/Java_version_history#Release_table), and Java 21 is the current LTS release. Those of us who were active in the libGDX Discord in the period between September and a few weeks ago would have certainly noticed users coming in with the frequent problem that they were building projects with Java 21 and, until very recently, gdx-setup wasn't functioning for users with only that version installed. It seems like quite a few users are already using Java 21! A further issue is that Java 20 and later now print this message when targeting version 8:\r\n\r\n```\r\nwarning: [options] source value 8 is obsolete and will be removed in a future release\r\nwarning: [options] target value 8 is obsolete and will be removed in a future release\r\nwarning: [options] To suppress warnings about obsolete options, use -Xlint:-options.\r\n```\r\n\r\nThis is despite Java 8 not actually being obsolete in our case, since RoboVM doesn't look like it will be compatible with Java 11 for a long time. Potentially we could switch to MOE, which does seem to be updating again thanks to their community, but I haven't done anything with any variety of iOS (since I don't have a Mac), so I'm not sure how well MOE works relative to RoboVM."],"labels":["maintainer needed"]},{"title":"NullPointerException in BitmapFont.java:158 when generating a font that has unhandled ranges on parameter.characters","body":"Hi,\r\n\r\nThis can be easibly reproduced:\r\n\r\nFreeTypeFontGenerator.FreeTypeFontParameter parameter = new FreeTypeFontGenerator.FreeTypeFontParameter();\r\nparameter.characters = \"\\uFF20\";\r\n... other parameters as usual\r\nBitmapFont b = generator.generateFont(parameter);\r\n\r\nThe tip is to use a character that is NOT HANDLED by the font. I use the roboto font in my project.\r\n\r\nThe stack trace is:\r\n\r\njava.lang.NullPointerException\r\ncom.badlogic.gdx.graphics.g2d.BitmapFont.<init>(BitmapFont.java:158)\r\ncom.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator.generateFont(FreeTypeFontGenerator.java:200)\r\ncom.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator.generateFont(FreeTypeFontGenerator.java:188)\r\n\r\n","comments":["Note: this started to occur on 1.9.9 snapshot, not sure in which version. In 1.9.8 its working fine"],"labels":["fonts"]},{"title":"BitmapFont producing incorrect values for ascent, descent, and cap height","body":"I am loading a BitmapFont from [png](https:\/\/user-images.githubusercontent.com\/19677926\/47428286-55600a80-d7da-11e8-86f3-60789e7408e0.png) and [fnt](https:\/\/github.com\/libgdx\/libgdx\/files\/2510333\/cnc.txt) file (uploaded as a txt because of restrictions) like so:\r\n```java\r\npublic class SSCCE implements ApplicationAdapter{\r\n\r\n  public static void main(String[] args) throws Throwable{\r\n    new LwjglApplication(new SSCCE());\r\n  }\r\n\r\n  public void create(){\r\n    BitmapFont font = new BitmapFont(Gdx.files.internal(\"cnc.fnt\"), Gdx.files.internal(\"cnc.png\"), false);\r\n    System.out.println(\"Line Height: \" + font.getLineHeight());\r\n    System.out.println(\"Cap Height: \" + font.getCapHeight());\r\n    System.out.println(\"Ascent: \" + font.getAscent());\r\n    System.out.println(\"Descent: \" + font.getDescent());\r\n  }\r\n\r\n  public void render(){}\r\n  \r\n}\r\n```\r\n\r\nThe fnt file includes the following:\r\n- lineHeight=13\r\n- base=11\r\n- height=9 (on all characters)\r\n- yoffset=-2 (on all characters)\r\n\r\n## Issue 1: Incorrect getDescent\r\n\r\n**Expectation:** According to the docs, getDescent() is described as \"the distance from the bottom of the glyph that extends the lowest to the baseline. This number is negative\". All characters have a -2 yoffset so are 2 pixels below the baseline, and I expect a descent of -2.\r\n\r\n**Result:** font.getDescent() produces 0, which is incorrect. If I change all yoffsets from -2 to 2 font.getDescent() still produces 0.\r\n\r\n**Notes:** This needed a few changes because of flip, and also because if all yoffsets are positive, then all glyphs are above the baseline and descent will be positive - therefore it cannot be initialised at 0.\r\nChange L548 to: `descent = Integer.MAX_VALUE;`\r\nChange L596 to: `if (glyph.width > 0 && glyph.height > 0) descent = Math.min((flip ? 0 : glyph.height) + glyph.yoffset, descent);`\r\nAdd Before L598: `if(descent == Integer.MAX_VALUE) descent = 0;`\r\nWith this change the docs should probably be clarified to say \"This number is negative if the lowest glyph is below the baseline\", or otherwise just don't implement the MAX_VALUE lines.\r\n\r\nEdit: actually I was thinking about this a bit more and the fnt format seems to generally work with variables considering 0,0 to be in the top left with y down as positive. My yoffset maybe should be 2 not -2, and the above code might need a change. Either way its broken though.\r\n\r\n## Issue 2: Incorrect getCapHeight\r\n\r\n**Expectation:** According to the docs, getCapHeight() is described as \"the distance from the top of most uppercase characters to the baseline\". Every character is height 9 and yoffset -2, so I expect a cap height of 7.\r\n\r\n**Result:** font.getCapHeight() produces 9, which is incorrect.\r\n\r\n**Notes:** I can see in the code that cap height does not incorporate yoffset at all. In most fonts capitals will always be at baseline, and my example file has 2 pixels of blank space below each character which arguably makes my configuration incorrect, but its not impossible for a font to exist with elaborate capitals (like cursives) that have details below the baseline requring a yoffset. Additionally I can see from the code that where the docs say \"most uppercase characters\" it should probably say \"a typical uppercase character\".\r\n\r\n## Issue 3: Incorrect getAscent\r\n\r\n**Expectation:** According to the docs, getAscent() is described as \"the distance from the cap height to the top of the tallest glyph\". Every character is the same height, so my capitals are equal to the tallest glyphs, and I expect an ascent of 0.\r\n\r\n**Result:** font.getAscent() produces 2, which is incorrect.\r\n\r\n**Notes:** I can see in the code at L660 that ascent is actually calculated as:\r\n`ascent = baseLine - capHeight;`\r\nWhich is the distance from the cap height to the top of the line. In this case, either:\r\n1. The docs are correct. I don't think it's this because in most fonts, the capitals will be the tallest characters anyway, and therefore this value will very often just be 0.\r\n2. The code is correct. I don't think it's this because then getAscent will no longer be the opposite of getDescent (i.e. calculating a distance within the height of the glyphs)\r\n3. Both are incorrect, and it should be the difference between the top of lower case letters and the tallest character. (i.e the diff between xHeight and capHeight... I don't know maybe)\r\n\r\n## Related mini feature request:\r\n\r\ngetAscent and getDescent return (according to their current docs at least) vertical spacing within the glyph. It would be good to add something like:\r\n\r\n_getAscentBuffer():_ return the distance between cap height or maybe the tallest glyph, and the top of the line (i.e. current behaviour of getAscent())\r\n_getDescentBuffer():_ return the distance between the bottom of lowest glyph and the bottom of the line (i.e. opposite of above)\r\n\r\n## Version of LibGDX and\/or relevant dependencies\r\n\r\nLatest commit ac4c5331a2d646efcf0911c51964eff0e99ea31a\r\nHowever, this appears to have been the case for a long time.\r\n\r\n#### Affected platforms\r\n\r\n- [X] Android\r\n- [X] iOS (robovm)\r\n- [X] iOS (MOE)\r\n- [X] HTML\/GWT\r\n- [X] Windows\r\n- [X] Linux\r\n- [X] MacOS\r\n","comments":["Noticed also:\r\n1. descent is having padBottom applied to it incorrectly at L598. Since the docs say more negative means more descent, padBottom should be subtracted from descent, but it is being added.\r\n2. capHeight is having padY applied to it incorrectly at L658. Since this is the difference between the baseline and the top of the glyph, it should only incorporate padding at the top of the glyph. However, padY is a combination of top and bottom padding.\r\n3. xHeight is incorrectly having padY applied to it the same as capHeight.\r\n4. xHeight also doesn't incorporate yoffset, so this has the same problem as Issue 2 (Incorrect getCapHeight) in the OP\r\n5. If flip is true, then ascent is being negated at L663. Since ascent is described as a distance between two points, it can never be negative.\r\n6. No surprises here, but trying to fix some of this stuff myself causes the rendering position to be off.","## about Issue 1: Incorrect getDescent\r\n\r\nthis is a bitmap font, and since the fnt-file does not contain a explicit value for descender, any calculated value is of questionable quality at best.\r\n\r\nnot even the industrial adobe standard does define one: https:\/\/www.adobe.com\/content\/dam\/acom\/en\/devnet\/font\/pdfs\/5005.BDF_Spec.pdf\r\n\r\n## Issue 2: Incorrect getCapHeight\r\n\r\n9 is correct, again this is a bitmap font so the value is mostly irrelevent, but capital height is \"base size\"(11) minus \"descender\"(2) = 9\r\n\r\n## Issue 3: Incorrect getAscent\r\n\r\nsame as issue 1\r\n\r\n","> not even the industrial adobe standard does define one: https:\/\/www.adobe.com\/content\/dam\/acom\/en\/devnet\/font\/pdfs\/5005.BDF_Spec.pdf\r\n\r\nYou are confusing Bitmap Distribution Format by Adobe with Bitmap Fonts by Angelcode, the latter being used by Libgdx. However even if that weren't the case, the y position of glyphs in the Adobe format is provided by VVECTOR and BByoff0y, which together provide the offset from origin (read, baseline). Since we have the rendering position from origin, the descent is whatever is below the origin line given the height of the glyph.\r\n\r\n> **Issue 1: Incorrect getDescent**\r\n> this is a bitmap font, and since the fnt-file does not contain a explicit value for descender, any calculated value is of questionable quality at best.\r\n\r\nThe descent in angelcode bitmap fonts are determined the same way. According to the [bitmap font docs](http:\/\/www.angelcode.com\/products\/bmfont\/doc\/render_text.html), \"The yoffset gives the distance from the top of the cell height to the top of the character.\", so since we have the position of the character in relation to the baseline (which is the bottom of the cell) and we have the height of the character, the descent is quite clearly the portion of the character that descends below the baseline.\r\n\r\nI don't understand why this calculation is \"questionable at best\", or why you might think that libgdx's approach of [undocumented mystery calculation] is better.\r\n\r\n> **Issue 2: Incorrect getCapHeight**\r\n> 9 is correct, again this is a bitmap font so the value is mostly irrelevent, but capital height is \"base size\"(11) minus \"descender\"(2) = 9\r\n\r\nThis makes no sense because:\r\n- Libgdx currently returns a descent of 0, not 2 (which is the value it *should* be according to my bug report).\r\n- It is actually being calculated as I already mentioned in the OP - as simply 9, which is the raw height of the glyphs, not taking into account their position relative to the baseline.\r\n\r\nThis value is certainly not irrelevant because it is being used when calculating the rendering position (Which it probably shouldn't be, since rendering according to \"most uppercase characters\" will inevitably be incorrect for characters which aren't \"most\")\r\n\r\n> **Issue 3: Incorrect getAscent**\r\n> same as issue 1\r\n\r\nI don't understand this. The libgdx docs are clear that this is \"the distance from the cap height to the top of the tallest glyph\", which has nothing to do with issue 1.","I've started doing a big extremely breaking rewrite of all the font code. Given how breaking it is, I understand if it is never incorporated, but I'll still keep track here of other bugs I discover along the way.\r\n\r\nFirst one, according to [the docs](http:\/\/www.angelcode.com\/products\/bmfont\/doc\/file_format.html):\r\n> info: This tag holds information on how the font was generated.\r\n\r\nThat line includes a \"padding\" field, and this padding is applied to the glyphs in BitmapFontData. It should not be doing this - just like the rest of the fields in the info line, the padding field is informational only, it describes the padding the exporter applied to the glyphs when it laid them out onto the texture(s). This can be double checked quite easily by playing with the padding fields in the exporter and examining the resulting layout in the png.","In BitmapFontData.setGlyphRegion, if the glyph turns out to be outside of the region bounds, then the code updates it's the position on the texture and also clips the glyph. It sets the new position by changing xoffset and yoffset when it should really be changing srcX and srcY. The offsets are data points used to describe how to position the glyph on the screen when rendering it, they are not related to how the glyph is positioned on the texture."],"labels":["fonts"]},{"title":"Box2D: Collision manifolds","body":"#5404 \r\n\r\nThe PR adds Collision.collideCircles(), Collision.collidePolygonAndCircle(), Collision.collidePolygons(), Collision.collideEdgeAndCircle(), Collision.collideEdgeAndPolygon(), and Collision.testOverlap(). Sometimes useful when checking for overlap with Box2D fixtures without having to create temporary sensors. For example, when looking at whether some area is empty before spawning something there. QueryAABB or raycasting may be insufficient as they don't allow arbitrary shapes. Creating a `Polygon` from an existing `Shape` isn't convenient, especially for edges and circles.\r\n\r\nI don't know if you're interested in this, but I wanted it anyhow so I'll check.\r\n\r\nIf so, I guess I'll add a patch for GWT.\r\n\r\nTest: https:\/\/gist.github.com\/dlon\/f09be9ae8ebcfb198275e1c668743688\r\n\r\nPlatform: Only tested on Windows 10.","comments":["Can this be merged? It's been open 2 years and seems like a huge oversight","I'd say it should only be merged once tested on more platforms. If need be, I can check Linux and Android without much hassle, but not iOS (or macOS, but I don't see much reason for it to go wrong there if all else is okay). I don't know a great deal about Box2D, but hopefully the linked test is good enough.","@Tom-Ski Did you mean to send that? Looks to be nothing more than the first revision of my comment in email form."],"labels":["box2d"]},{"title":"Feature request: add sRGB internal format of texture","body":"Internal format `sRGB` is same as `RGB`, but openGL automatically does gamma-correction when reading colors from texture. This is used in HDR rendering.\r\n\r\n### Way to add this: \r\n\r\ncode in [GLTexure.uploadImageData](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/graphics\/GLTexture.java): \r\n```\r\nGdx.gl.glTexImage2D(target, miplevel, pixmap.getGLInternalFormat(), pixmap.getWidth(), pixmap.getHeight(), 0, pixmap.getGLFormat(), pixmap.getGLType(), pixmap.getPixels());\r\n```\r\nSo, getGLInternalFormat is returned by [Pixmap](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/graphics\/Pixmap.java): \r\n```\r\npublic int getGLInternalFormat () {\r\n\treturn toGlFormat(format);\r\n}\r\n```\r\n\r\nbut toGlFormat never returns sRGB:\r\n```\r\npublic static int toGlFormat (int format) {\r\n\tswitch (format) {\r\n\tcase GDX2D_FORMAT_ALPHA:\r\n\t\treturn GL20.GL_ALPHA;\r\n\tcase GDX2D_FORMAT_LUMINANCE_ALPHA:\r\n\t\treturn GL20.GL_LUMINANCE_ALPHA;\r\n\tcase GDX2D_FORMAT_RGB888:\r\n\tcase GDX2D_FORMAT_RGB565:\r\n\t\treturn GL20.GL_RGB;\r\n\tcase GDX2D_FORMAT_RGBA8888:\r\n\tcase GDX2D_FORMAT_RGBA4444:\r\n\t\treturn GL20.GL_RGBA;\r\n\tdefault:\r\n\t\tthrow new GdxRuntimeException(\"unknown format: \" + format);\r\n\t}\r\n}\r\n```\r\n\r\nAs I think, one can add a few new formats or\/and special flag to the Texture constructor.\r\n\r\nP.S. Now I am achieving this by overriding ```Pixmap.getGLInternalFormat()``` method and returning something like ```GL30.GL_SRGB8_ALPHA8``` or ```GL30.GL_SRGB8```","comments":["If you want this functionality, the best way is to submit a pull request yourself.","Another cleaner way to have sRGB texture is to do something like this, given a pixmap : \r\n```java\r\nTextureData data = new GLOnlyTextureData(pixmap.getWidth(), pixmap.getHeight(), 0, GL30.GL_SRGB8, GL20.GL_RGB, GL20.GL_UNSIGNED_BYTE);\r\ntexture = new Texture(data);\r\ntexture.draw(pixmap, 0, 0);\r\n```\r\nor  if you have an alpha channel in the pixmap : \r\n ```java\r\nnew GLOnlyTextureData(pixmap.getWidth(), pixmap.getHeight(), 0, GL30.GL_SRGB8_ALPHA8, GL20.GL_RGBA, GL20.GL_UNSIGNED_BYTE);\r\n```\r\n\r\nIf we want to implement it in libgdx more conveniently, the best way would be to have an option in Texture constructor. Pixmap and Gdx2DPixmap shouldn't be concerned by this."],"labels":["enhancement","GL"]},{"title":"OpenALMusic - Unable to allocate audio buffers. AL Error: 40963","body":"#### Issue details\r\nThis is a really elusive bug to reproduce. From the crash reports I receive from players, it crops up randomly if one does pause(), setPosition(), play() or dispose() repeatedly. I'm not sure if its hardware related or due to some timing issue. While I could reproduce it consistently with a code similar to #5316 , I'm pretty sure it is not related.  \r\n\r\n#### Reproduction steps\/code\r\nJust the render() of an empty ApplicationListener:\r\n```java\r\n            Music music = null;\r\n\r\n            @Override\r\n            public void render() {\r\n                int frameNumber = (int)Gdx.graphics.getFrameId();\r\n                Gdx.app.log(\"CRASH\", \"Frame \" + frameNumber);\r\n                switch (frameNumber) {\r\n                    case 0:\r\n                        \/\/ Frame 1\r\n                        music = Gdx.audio.newMusic(Gdx.files.external(\"any_audio_file.ogg\"));\r\n                        music.play();\r\n                        break;\r\n\r\n                    case 1:\r\n                        \/\/ Frame 2\r\n                        music.setPosition(26.300f);     \/\/ must be within at least 200ms from the end\r\n                        break;\r\n\r\n                    case 2:\r\n                        \/\/ Frame 3\r\n                        music.setPosition(26.300f);     \/\/ must be within at least 200ms from the end\r\n                        break;\r\n\r\n                    case 3:\r\n                        \/\/ Frame 4\r\n                        music.dispose();\r\n                        break;\r\n\r\n                    case 4:\r\n                        \/\/ Frame 5\r\n                        music = Gdx.audio.newMusic(Gdx.files.external(\"any_audio_file.ogg\"));\r\n                        music.play();       \/\/ Crashes here\r\n                        break;\r\n                }\r\n            }\r\n```\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.9-SNAPSHOT\r\n\r\n#### Stacktrace\r\n```java\r\ncom.badlogic.gdx.utils.GdxRuntimeException: Unable to allocate audio buffers. AL Error: 40963\r\n\tat com.badlogic.gdx.backends.lwjgl.audio.OpenALMusic.play(OpenALMusic.java:83)\r\n\tat game27.DesktopMain$2.render(DesktopMain.java:270)\r\n\tat com.badlogic.gdx.backends.lwjgl.LwjglApplication.mainLoop(LwjglApplication.java:225)\r\n\tat com.badlogic.gdx.backends.lwjgl.LwjglApplication$1.run(LwjglApplication.java:126)\r\n```\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [X] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["i'm able to reproduce with the libgdx MusicTest.\r\n\r\nFirst case : \r\n* run WAV example with looping disabled\r\n* play with the cursor back and forth several times\r\n* let the song finish\r\n* you can't start the song (it fails silently)\r\n\r\nSecond case : \r\n* run WAV example with looping disabled\r\n* play with the cursor back and forth several times\r\n* change the music (mp3 or ogg) before it finish\r\n* it crashes : `Unable to allocate audio buffers. AL Error: 40963`\r\n\r\nlibgdx code properly unqueue buffers but as per OpenAL doc : `The unqueue operation will only take place if all n buffers can be removed from the queue.` maybe OpenAL can't cancel some running buffers which lead to a kind of accumultation due to allocation\/free frequency.\r\n\r\nMaybe those kind of use are extreme and maybe Sound should be used instead.","I have the exact same error on Windows :( - Any news on this ?\r\n\r\nScenario:\r\n- Playing Music one\r\n- Player selects some action\r\n- Stopping Music one\r\n- Start Music two\r\n- Crash with Unable to allocate audio buffers. AL Error: 40963","Also happens with LWJGL3, haven't found a solution thus far.","According to [this thread](https:\/\/jvm-gaming.org\/t\/solved-joal-streaming-memory-leaking\/27981\/4) the buffer needs to be processed before `alSourceUnqueueBuffers` can be called and from what I can tell the current OpenALMusic implementation it doesn't check for this.","I've been able to reproduce this in a simple test. If you click and then leave the music running when it gets to the end of the first track the crash will occur.\r\n\r\n```java\r\npackage com.badlogic.gdx.tests;\r\n\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.audio.Music;\r\nimport com.badlogic.gdx.graphics.GL20;\r\nimport com.badlogic.gdx.graphics.g2d.BitmapFont;\r\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\nimport com.badlogic.gdx.math.MathUtils;\r\nimport com.badlogic.gdx.tests.utils.GdxTest;\r\n\r\npublic class MultiMusicTest extends GdxTest {\r\n\r\n\tMusic music1, music2;\r\n\r\n\tSpriteBatch batch;\r\n\tBitmapFont font;\r\n\r\n\tfloat timer;\r\n\r\n\t@Override\r\n\tpublic void create() {\r\n\t\tbatch = new SpriteBatch();\r\n\t\tfont = new BitmapFont(Gdx.files.internal(\"data\/arial-15.fnt\"), false);\r\n\r\n\t\tmusic1 = Gdx.audio.newMusic(Gdx.files.internal(\"data\/60bpm.mp3\"));\r\n\t\tmusic1.setLooping(true);\r\n\t\tmusic2 = Gdx.audio.newMusic(Gdx.files.internal(\"data\/8.12.mp3\"));\r\n\t\tmusic2.setLooping(true);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void render() {\r\n\t\ttimer += Gdx.graphics.getDeltaTime();\r\n\r\n\t\tif(timer > 1f) {\r\n\t\t\tif(MathUtils.isZero(music1.getVolume())) {\r\n\t\t\t\tmusic1.setVolume(1f);\r\n\t\t\t\tmusic1.stop();\r\n\t\t\t\tmusic2.play();\r\n\t\t\t}\r\n\t\t\tif(MathUtils.isZero(music2.getVolume())) {\r\n\t\t\t\tmusic2.setVolume(1f);\r\n\t\t\t\tmusic2.stop();\r\n\t\t\t\tmusic1.play();\r\n\t\t\t}\r\n\t\t\tmusic1.setVolume(music1.getVolume() - 0.1f);\r\n\t\t\tmusic2.setVolume(music2.getVolume() - 0.1f);\r\n\t\t\ttimer = 0f;\r\n\t\t}\r\n\r\n\t\tif (Gdx.input.justTouched()) {\r\n\t\t\tif(!music1.isPlaying() && !music2.isPlaying()) {\r\n\t\t\t\tmusic1.play();\r\n\t\t\t} else if(music1.isPlaying()) {\r\n\t\t\t\tmusic1.stop();\r\n\t\t\t\tmusic2.play();\r\n\t\t\t} else {\r\n\t\t\t\tmusic2.stop();\r\n\t\t\t\tmusic1.play();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\r\n\t\tbatch.begin();\r\n\t\tfont.draw(batch, music1.isPlaying() ? \"Music 1 playing\" : \"Music 1 not playing\", 128, 32);\r\n\t\tfont.draw(batch, music2.isPlaying() ? \"Music 2 playing\" : \"Music 2 not playing\", 128, 64);\r\n\t\tbatch.end();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void resume () {\r\n\t\tSystem.out.println(Gdx.graphics.getDeltaTime());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void dispose() {\r\n\t\tmusic1.dispose();\r\n\t\tmusic2.dispose();\r\n\t}\r\n}\r\n```","It seems the specific OpenAL error is:\r\n`AL_INVALID_VALUE an invalid value was passed to an OpenAL function `\r\n\r\nLooking in the OpenAL API docs, alGenBuffers only generates this error when:\r\n`The buffer array isn't large enough to hold the number of buffers requested. `\r\n\r\nBut if I breakpoint before `alGenBuffers` on line 80 in OpenALMusic, the buffer value is of size 3 as requested.","@tomcashman Your crash happens because `music1.setVolume(music1.getVolume() - 0.1f);` sets the volume below zero. This sets the error state but it is not checked. Later `alGetError` gives an error.\r\n\r\nSince we don't check `alGetError` everywhere, we should call it to clear the error before we do an action where we check it afterward. This is better but isn't clear if it will help the other problems in this issue.\r\n\r\nAlso, we should check the volume parameter is in range.","I have had this happen when I added a fade out and then volume was set to less than zero. Once ensured the volume never went below zero -- things worked as expected."],"labels":["desktop","audio"]},{"title":"LWJGL3: Switching screen mode triggers render() call","body":"#### Issue details\r\n\r\nIf i try to toggle fullscreen mode while playing, i get an JVM crash.\r\n\r\n#### Reproduction steps\/code\r\n\r\n```java\r\nGraphics.DisplayMode primaryMode = Gdx.graphics.getDisplayMode();\r\nGdx.graphics.setFullscreenMode(primaryMode);\r\n```\r\n\r\nFull Code:\r\n```java\r\n\/\/toggle fullscreen mode\r\nif ((Gdx.input.isKeyPressed(Input.Keys.CONTROL_LEFT) || Gdx.input.isKeyPressed(Input.Keys.CONTROL_RIGHT)) && Gdx.input.isKeyJustPressed(Input.Keys.F)) {\r\n    \/\/toggle fullscreen mode\r\n    if (Gdx.graphics.isFullscreen()) {\r\n        Gdx.graphics.setWindowedMode(this.lastWidth, this.lastHeight);\r\n    } else {\r\n        Graphics.DisplayMode primaryMode = Gdx.graphics.getDisplayMode();\r\n        Gdx.graphics.setFullscreenMode(primaryMode);\r\n    }\r\n}\r\n```\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n_Please provide the version(s) affected._\r\n\r\n#### Stacktrace\r\n```java\r\n#\r\n# A fatal error has been detected by the Java Runtime Environment:\r\n#\r\n#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x00007ffcbadcaceb, pid=10456, tid=1724\r\n#\r\n# JRE version: Java(TM) SE Runtime Environment (8.0_91-b15) (build 1.8.0_91-b15)\r\n# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.91-b15 mixed mode windows-amd64 compressed oops)\r\n# Problematic frame:\r\n# C  [glfw.dll+0xaceb]\r\n#\r\n# Failed to write core dump. Minidumps are not enabled by default on client versions of Windows\r\n#\r\n# An error report file with more information is saved as:\r\n# D:\\Users\\Justin\\IdeaProjects\\island-exploration-rts\\hs_err_pid10456.log\r\n#\r\n# If you would like to submit a bug report, please visit:\r\n#   http:\/\/bugreport.java.com\/bugreport\/crash.jsp\r\n# The crash happened outside the Java Virtual Machine in native code.\r\n# See problematic frame for where to report the bug.\r\n#\r\nAL lib: (EE) alc_cleanup: 1 device not closed\r\n```\r\n\r\n[hs_err_pid10456.log](https:\/\/github.com\/libgdx\/libgdx\/files\/2134241\/hs_err_pid10456.log)\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [x] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["I have already found the solution:\r\n`Gdx.input.isKeyJustPressed(Input.Keys.F)` fixed this issue.","This is pretty interesting. What happened is clearly visible from the error log:\r\n```\r\n...\r\nj  org.lwjgl.glfw.GLFWFramebufferSizeCallbackI.callback(J)V+13\r\nv  ~StubRoutines::call_stub\r\nj  org.lwjgl.system.JNI.invokePPV(JJJIIIII)V+0\r\nj  org.lwjgl.glfw.GLFW.glfwSetWindowMonitor(JJIIIII)V+30\r\nj  com.badlogic.gdx.backends.lwjgl3.Lwjgl3Graphics.setFullscreenMode(Lcom\/badlogic\/gdx\/Graphics$DisplayMode;)Z+134\r\nj  com.jukusoft.rts.gui.GameGUI.render()V+135\r\nj  com.badlogic.gdx.backends.lwjgl3.Lwjgl3Graphics$1.invoke(JII)V+87\r\nj  org.lwjgl.glfw.GLFWFramebufferSizeCallbackI.callback(J)V+13\r\nv  ~StubRoutines::call_stub\r\nj  org.lwjgl.system.JNI.invokePPV(JJJIIIII)V+0\r\nj  org.lwjgl.glfw.GLFW.glfwSetWindowMonitor(JJIIIII)V+30\r\nj  com.badlogic.gdx.backends.lwjgl3.Lwjgl3Graphics.setWindowedMode(II)Z+68\r\nj  com.jukusoft.rts.gui.GameGUI.render()V+113\r\nj  com.badlogic.gdx.backends.lwjgl3.Lwjgl3Graphics$1.invoke(JII)V+87\r\nj  org.lwjgl.glfw.GLFWFramebufferSizeCallbackI.callback(J)V+13\r\nv  ~StubRoutines::call_stub\r\nj  org.lwjgl.system.JNI.invokePPV(JJJIIIII)V+0\r\nj  org.lwjgl.glfw.GLFW.glfwSetWindowMonitor(JJIIIII)V+30\r\nj  com.badlogic.gdx.backends.lwjgl3.Lwjgl3Graphics.setFullscreenMode(Lcom\/badlogic\/gdx\/Graphics$DisplayMode;)Z+134\r\nj  com.jukusoft.rts.gui.GameGUI.render()V+135\r\nj  com.badlogic.gdx.backends.lwjgl3.Lwjgl3Window.update()Z+185\r\nj  com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.loop()V+101\r\nj  com.badlogic.gdx.backends.lwjgl3.Lwjgl3Application.<init>(Lcom\/badlogic\/gdx\/ApplicationListener;Lcom\/badlogic\/gdx\/backends\/lwjgl3\/Lwjgl3ApplicationConfiguration;)V+257\r\nj  com.jukusoft.rts.desktop.DesktopLauncher.main([Ljava\/lang\/String;)V+56\r\nv  ~StubRoutines::call_stub\r\n```\r\n\r\nIn your `render()` method, you have invoked `setFullscreenMode`, which made window fullscreen, which invoked GLFW resize callback, which in turn called your `render()` method again (presumably so that resized window would show correctly rendered application), but because the key was still pressed, it invoked `setWindowedMode`, causing the cycle to repeat, alternating fullscreen and windowed mode, in single call stack. This probably lead to stack overflow, but maybe something else failed first.\r\n\r\nWhile it is indeed a problem caused by incorrect reading of input, for which your fix is correct, it is rather strange that changing windowed\/fullscreen should reinvoke application's `render()` inside itself. We may want to postpone its effects to the start of next frame (with explicit disabling of `render()` invocation in framebuffer resize callback), so that `render()` isn't called twice, as these methods are usually not reentrant. For example, this crashes after pressing F:\r\n```java\r\npublic class Repro extends ApplicationAdapter {\r\n\r\n    private SpriteBatch batch;\r\n\r\n    @Override\r\n    public void create() {\r\n        batch = new SpriteBatch();\r\n    }\r\n\r\n    @Override\r\n    public void render() {\r\n        batch.begin();\r\n        \/\/ java.lang.IllegalStateException: SpriteBatch.end must be called before begin.\r\n\r\n        if (Gdx.input.isKeyJustPressed(Input.Keys.F)) {\r\n            Gdx.graphics.setFullscreenMode(Gdx.graphics.getDisplayMode());\r\n        }\r\n\r\n        batch.end();\r\n    }\r\n\r\n    public static void main(String[] args){\r\n        new Lwjgl3Application(new Repro(), new Lwjgl3ApplicationConfiguration());\r\n    }\r\n}\r\n```\r\nbut someone may encounter this as a much subtler bug.","Maybe the render call is trying to avoid\/reduce misshapen rendering when the window is resized?","During normal window resizing, which happens through call to `GLFW.glfwPollEvents()`, normal rendering loop seems to stop, as it is blocked by `GLFW.glfwPollEvents()` for the duration of window resize dragging (at least on Mac). I don't know if this blocking is a bug or intended, but resizing the window triggers the resize callback, and the window never shows garbage (LWJGL2 did, IIRC), so it works well.\r\n\r\nHowever, `setFullscreen\/WindowedMode` triggers the resize callback immediately, which, as it is usually called inside `render()`, causes nested `render()` invocation. This is likely not desired behavior.\r\n\r\nTwo ways to fix this come to mind:\r\n1. Disable the resize callback when `setFullscreen\/WindowedMode` is called\r\n2. Postpone the real window mode change so that it happens at the beginning of next frame.\r\n\r\nOption 1. feels more intuitive, but could still lead to bugs, as application may not expect screen resolution to change mid-frame. The frame may then still show incorrectly resized frame, as it is rendering for the original screen size. 2. therefore is probably more correct. Without any modifications to resize callback, `render()` would still get called twice per frame. I don't know if GLFW expects `glfwSwapBuffers` to be called inside the callback, but if not, it may be worthwhile to disable the `render()` call from the resize callback when it happens during window mode change, so that it doesn't delay the whole operation. ","Noncontinuous rendering could be a problem if the frame is drawn with the wrong size. 2 sounds good to me!"],"labels":["bug","desktop","LWJGL3"]},{"title":"E\/WallpaperService: wallpaper lifecycle error, counted too many visible engines!","body":"#### Issue details\r\nWhen I select live Wallpaper from the list and immediately click on \"Set as wallpaper\" = = subj. Tested on 2 physical devices. For the experiment the minimal configuration of live wallpaper was used. As a result, an indefinite state...\r\n\r\nSorry for the bad English!\r\n#### Reproduction steps\/code\r\npublic class AndroidLauncher extends AndroidLiveWallpaperService {\r\n\r\n    @Override\r\n    public void onCreateApplication() {\r\n        super.onCreateApplication();\r\n\r\n        AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();\r\n\r\n        config.r = 8;\r\n        config.g = 8;\r\n        config.b = 8;\r\n        config.a = 8;\r\n\r\n        config.numSamples = 0;\r\n        config.useCompass = false;\r\n        config.useWakelock = false;\r\n        config.useAccelerometer = false;\r\n\r\n        initialize(new LibGdxRenderer(), config);\r\n    }\r\n\r\npublic class LibGdxRenderer implements AndroidWallpaperListener, ApplicationListener {\r\n\r\n\r\n    @Override\r\n    public void create() {\r\n        \r\n    }\r\n\r\n    @Override\r\n    public void resize(int width, int height) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void render() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void pause() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void resume() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void dispose() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void offsetChange(float xOffset, float yOffset, float xOffsetStep, float yOffsetStep, int xPixelOffset, int yPixelOffset) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void previewStateChange(boolean isPreview) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void iconDropped(int x, int y) {\r\n\r\n    }\r\n}'\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.8\r\n#### Logcat\r\n```java\r\n06-19 09:07:25.740 4701-4735\/com.an2ro.oceandreams I\/AndroidGraphics: framebuffer: (8, 8, 8, 8)\r\n06-19 09:07:25.740 4701-4735\/com.an2ro.oceandreams I\/AndroidGraphics: depthbuffer: (16)\r\n06-19 09:07:25.740 4701-4735\/com.an2ro.oceandreams I\/AndroidGraphics: stencilbuffer: (0)\r\n06-19 09:07:25.740 4701-4735\/com.an2ro.oceandreams I\/AndroidGraphics: samples: (0)\r\n06-19 09:07:25.740 4701-4735\/com.an2ro.oceandreams I\/AndroidGraphics: coverage sampling: (false)\r\n06-19 09:07:25.780 4701-4701\/com.an2ro.oceandreams I\/WallpaperService: engine paused\r\n06-19 09:07:25.780 4701-4701\/com.an2ro.oceandreams E\/WallpaperService: wallpaper lifecycle error, counted too many visible engines! repairing..\r\n06-19 09:07:25.780 4701-4701\/com.an2ro.oceandreams I\/AndroidInput: sensor listener tear down\r\n```\r\n#### Please select the affected platforms\r\n- [ +] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":[],"labels":["android"]},{"title":"Optionally respect RGB of transparent pixels when aliasing (fix #5219)","body":"Rather than add a new TexturePacker setting, this looks at whether the `alphaThreshold` is set to less than zero for whitespace stripping. Presumably, if you don't want your zero alpha pixels ignored for aliasing, you also don't want them stripped off.\r\n\r\nThis addresses #5219.","comments":["The reason `alias` will discard two images with zero alpha but different RGB is probably that whitespace stripping reduces them to zero width\/height and then `ignoreBlankImages` ignores them. Even if you turn `ignoreBlankImages` off, hashing is done after whitespace stripping so the stripped images are identical.\r\n\r\n`alphaThreshold` is for whitespace stripping. If you set it to -1, you effectively disable whitespace stripping. In that case you might as well just set `stripWhitespaceX` and `stripWhitespaceY` to false.","I checked whitespace stripping. Even with it off, it's ignoring the RGB value of any pixel that has zero alpha.\r\n\r\nI traced this to the `drawImage()` line in `hash()`, where it is converting ABGR to ARGB. The Javadoc for this method says it does not transfer transparent pixels. So all zero alpha pixels are effectively being converted to black right before the hash takes place.","My idea in this PR is if you are in a situation where RGB still carries\nmeaning even if A is zero, then you can't be using whitespace stripping\nanyway and will want it turned off. Using the alpha threshold allowed me to\navoid adding yet another setting.\nOn Sun, May 13, 2018 at 10:16 AM Darren Keese <dakeese@gmail.com> wrote:\n\n> I checked whitespace stripping. Even with it off, it's ignoring the RGB\n> value of any pixel that has zero alpha.\n>\n> I traced this to the drawImage() line in hash(), where it is converting\n> ABGR to ARGB. The Javadoc for this method says it does not transfer\n> transparent pixels. So all zero alpha pixels are effectively being\n> converted to black right before the hash takes place.\n> On Sun, May 13, 2018 at 6:07 AM Nathan Sweet <notifications@github.com>\n> wrote:\n>\n>> The reason alias will discard two images with zero alpha but different\n>> RGB is probably that whitespace stripping reduces them to zero width\/height\n>> and then ignoreBlankImages ignores them. Even if you turn\n>> ignoreBlankImages off, hashing is done after whitespace stripping so the\n>> stripped images are identical.\n>>\n>> alphaThreshold is for whitespace stripping. If you set it to -1, you\n>> effectively disable whitespace stripping. In that case you might as well\n>> just set stripWhitespaceX and stripWhitespaceY to false.\n>>\n>> \u2014\n>> You are receiving this because you authored the thread.\n>> Reply to this email directly, view it on GitHub\n>> <https:\/\/github.com\/libgdx\/libgdx\/pull\/5220#issuecomment-388615425>, or mute\n>> the thread\n>> <https:\/\/github.com\/notifications\/unsubscribe-auth\/ABwfu8SCe4jXoQZQ1ZkAi9TuXZKw8qnIks5tyAX2gaJpZM4T8nto>\n>> .\n>>\n>\n","I don't think it makes sense to overload the `alphaThreshold` setting. It sounds like if converting the image copied the RGB when A is 0 then everything would work fine when you turn off whitespace stripping. Maybe you can try this?\r\n```\r\nGraphics2D g = (Graphics2D)newImage.getGraphics();\r\ng.setComposite(AlphaComposite.Src);\r\ng.drawImage(image, 0, 0, null);\r\n```","Sorry for the year-long response. My project using this was on hold during major life changes the past year.\r\n\r\nI've tried updating the code to use AlphaComposite in every place we draw images, but it strangely still converts RGB to black if A is 0. Yet I tried using your code in a separate test and it worked as expected. \r\n\r\nHave I missed a location where we transfer the images?","The AlphaTest isn't for pulling. It just shows an example where your method of preserving the RGB works.\r\n"],"labels":["enhancement","tools"]},{"title":"[REQUEST] Support for PixmapIO in HTML \/ GWT","body":"We are trying to upload some pixmap from GWT\/html for huge and big dimension files, we first scale down the pixmap and then send the data. The problem that pixmap.getCanvasElement().toDataUrl(); produced bytes that are uncompressed ! in most cases the resulting data is 500% percent bigger than what it should ! I know that the magic for compressing png is in PixmapIO and that is not supported in GWT \/ HTML.\r\n\r\n- [ ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [x] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["I feel your pain.\r\nWhen I was in a similar situation, I resorted to using LZMA compression in the libGDX app before sending the image data. Maybe take a look at the com.badlogic.gdx.utils.compression.Lzma package?"],"labels":["enhancement","gwt"]},{"title":"IsometricTiledMapRenderer is Clipping Tiles On Screen","body":"Please ensure you have given all the following requested information in your report.\r\n\r\n#### Issue details\r\nI'm using the ```IsometricTiledMapRenderer``` to render a ```TiledMap``` to the screen. I'm using a less conventional tile size, 256 by 192 (or a 4:3 ratio) to give the player a more immersive experience. However, when rendering to the screen, the tiles get clipped of the screen due to the normal limiting factors that are supposed to not draw tiles that are off screen. The issue is illustrated here: https:\/\/imgur.com\/a\/vq6vz where the camera is fully zoomed in on the map, panned to the bottom of the map, tiles should exist and be rendered in the upper right and lower left corners. The issue occurs [here](https:\/\/github.com\/libgdx\/libgdx\/blob\/a4790fb14f728fd35dcf4ad860941c5384b0c158\/gdx\/src\/com\/badlogic\/gdx\/maps\/tiled\/renderers\/IsometricTiledMapRenderer.java#L110) within ```IsometricTiledMapRenderer```, a quick fix is to set row, row2, col1, and col2 to the map dimensions, so that the entire map gets drawn. This isn't ideal though, because it's a hit on performance. \r\n\r\n#### Reproduction steps\/code\r\nThis code reproduces the error: [here](https:\/\/gist.github.com\/wdavies973\/2e891ad6cf0141387b5c0e9633a67e3c)\r\n\r\nI am using the following map attributes:\r\n-60x60 tiles map\r\n-256 x 192 px tiles (4:3)\r\n-Map fully zoomed in within LibGDX (zoom about 0.7)\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nUsing LibGDX 1.9.7\r\n\r\n#### Please select the affected platforms\r\n- [X] iOS (robovm)\r\n- [x] Android\r\n- [X] iOS (MOE)\r\n- [X] HTML\/GWT\r\n- [X] Windows\r\n- [X] Linux\r\n- [X] MacOS\r\n","comments":[],"labels":["bug","tilemap"]},{"title":"Freetype font kerning on Android not working","body":"**Issue details**\r\n\r\nFreetype font kerning works just fine when I run my code as desktop app, I can set kerning to true or false.\r\n\r\nBut on android device setting kerning true of false makes no difference, kerning is not there either way.\r\n\r\nTested with 3 different phones with different Android versions, issue is always present.\r\n\r\nBelow is an example. I downloaded the latest libGDX setup App and added some freetype font words to a newly generated default project.\r\n\r\nThe font I used is OpenSans-Bold.ttf, downloaded from Google Fonts, but I have tried other fonts too.\r\n\r\n\r\n![A screenshot](https:\/\/cdn.pbrd.co\/images\/Hb3ZdrH.png)\r\n\r\n**Reproduction steps\/code**\r\n\r\n\r\n```\r\npackage com.mygdx.game;\r\n\r\nimport com.badlogic.gdx.ApplicationAdapter;\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.graphics.Color;\r\nimport com.badlogic.gdx.graphics.GL20;\r\nimport com.badlogic.gdx.graphics.Texture;\r\nimport com.badlogic.gdx.graphics.g2d.BitmapFont;\r\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\nimport com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;\r\n\r\npublic class MyGdxGame extends ApplicationAdapter {\r\n\tSpriteBatch batch;\r\n\tTexture img;\r\n\tBitmapFont font;\r\n\r\n\t@Override\r\n\tpublic void create () {\r\n\r\n\t\tFreeTypeFontGenerator generator = new FreeTypeFontGenerator(Gdx.files.internal(\"OpenSans-Bold.ttf\"));\r\n\t\tFreeTypeFontGenerator.FreeTypeFontParameter parameter = new FreeTypeFontGenerator.FreeTypeFontParameter();\r\n\t\tparameter.size = 50;\r\n\t\tparameter.color = Color.WHITE;\r\n\r\n\t\tparameter.kerning = true;\r\n\r\n\t\tfont = generator.generateFont(parameter); \/\/ font size 12 pixels\r\n\t\tgenerator.dispose(); \/\/ don't forget to dispose to avoid memory leaks!\r\n\r\n\t\tbatch = new SpriteBatch();\r\n\t\timg = new Texture(\"badlogic.jpg\");\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void render () {\r\n\t\tGdx.gl.glClearColor(1, 0, 0, 1);\r\n\t\tGdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\r\n\t\tbatch.begin();\r\n\t\tbatch.draw(img, 0, 0);\r\n\r\n\t\tfont.draw(batch, \"START Yawn\", 50, 460);\r\n\r\n\t\tbatch.end();\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void dispose () {\r\n\t\tbatch.dispose();\r\n\t\timg.dispose();\r\n\t}\r\n}\r\n```\r\n\r\n\r\n**Version of LibGDX and\/or relevant dependencies**\r\n\r\n- libGDX 1.9.8\r\n- Freetype extension checked in libGDX setup app\r\n\r\n**Please select the affected platforms**\r\n\r\n- [x] Android","comments":[],"labels":["fonts"]},{"title":"New Feature: Transform feedback particle systems for GLES3+","body":"I wanted to suggest a new feature for GLES3+ applications. Transform feedback allows updating VBOs on the GPU only and writing the results back to a sepereate feedback buffer. So sending data from the CPU to the GPU isn't necessary anymore. That data can then be used fro all the following drawing operations.\r\nThis type of updating VBOs benefits most if used with particle systems, since the movement of particles is controlled by a few forces and a lot of attributes. Those attributes can all be pushed into a VBO and then be transformed by a vertex shader. This updating process benefits of the huge parallelism possible on modern GPUs, instead of serialized or less parallel\/concurrent updating on the CPU.\r\nCompared to a normal batch, which sends updated data every frame via glBufferSubData, transform feedback can boost performance, in terms of updating vertex data, immensly. A IntelHD 4600 could update up to 400.000 vertices per frame and still draw the untextured scene with a good framerate of about 50fps.\r\nSince there are already feature implemented with GL30 only access, like TextureArrays, I thought it might be a good feature to introduce to allow more complex scenes, with better performance on newer hardware.\r\nWhat would be needed is a VeretxData class which is capable of doing transform feedback and a fitting Mesh class. There has to be a new Shader class since transform feedback shaders consist only of a vertex shader and optionally a geometry shader and output varyings have to be specified before linking the program.\r\nBelow is an example code of how to use the transform feedback. Please let me know if this feature is worth implementing it.\r\n\r\n#### Reproduction steps\/code\r\n```\r\n\/\/begin setup\r\nval floatsBuffer = BufferUtils.newFloatBuffer(100_000 * 8)\r\n\/*fill buffer with data*\/\r\n\r\nval srcBuffer = gl20.glGenBuffer()\r\ngl20.glBindBuffer(GL_ARRAY_BUFFER, srcBuffer)\r\ngl20.glBufferData(GL_ARRAY_BUFFER, floatsBuffer.limit() * 4, floatsBuffer, GL20.GL_DYNAMIC_DRAW)\r\n\r\nval swapBuffer = gl20.glGenBuffer()\r\ngl20.glBindBuffer(GL_ARRAY_BUFFER, swapBuffer)\r\ngl20.glBufferData(GL_ARRAY_BUFFER, floatsBuffer.limit() * 4, null, GL20.GL_DYNAMIC_DRAW)\r\n\r\nval intsBuffer = BufferUtils.newIntBuffer(100_000 * 6)\r\n\/*fill buffer with indices*\/\r\n\r\nval ebo = gl20.glGenBuffer()\r\ngl20.glBindBuffer(GL20.GL_ELEMENT_ARRAY_BUFFER, ebo)\r\ngl20.glBufferData(GL20.GL_ELEMENT_ARRAY_BUFFER, intsBuffer.limit() * 4, intsBuffer, GL20.GL_STATIC_DRAW)\r\n\r\nval tfShader = TFShaderProgram(\" . . . \") \/\/mod of Shaderprogram with only vertex shader\r\n\/\/end setup\r\n\/\/...\r\n\/\/begin render\r\ngl20.glBindBuffer(GL_ARRAY_BUFFER, srcBuffer)\r\ngl20.glEnableVertexAttribArray(0)\r\ngl20.glVertexAttribPointer(0, 2, GL_FLOAT, false, 2 * 4, 0)\r\ngl30?.glBindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, 0, swapBuffer)\r\n\r\ntfShader.begin()\r\ngl20.glEnable(GL_RASTERIZER_DISCARD) \/\/disable drawing to screen\r\ngl30?.glBeginTransformFeedback(GL_POINTS)\r\n    gl20.glDrawArrays(GL_POINTS, 0, 4 * 100_000) \/\/transform data according to bound shader\r\ngl30?.glEndTransformFeedback()\r\ngl20.glDisable(GL_RASTERIZER_DISCARD)\r\ntfShader.end()\r\n\r\nvbo = tbo.also { tbo = vbo } \/\/swap srcBuffer and swapBuffer pointers\r\ngl20.glBindBuffer(GL_ARRAY_BUFFER, srcBuffer) \/\/binding the transformed srcBuffer data\r\ngl20.glEnableVertexAttribArray(0)\r\ngl20.glVertexAttribPointer(0, 2, GL_FLOAT, false, 2 * 4, 0)\r\n\r\ngl20.glDrawElements(GL_TRIANGLES, 6 * 100_000, GL_UNSIGNED_INT, 0) \/\/drawing transformed data\r\n\/\/end render\r\n```\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n- (Dependency) OpenGL 3+ \/ OpenGLES 3+ \/ WebGL 2\r\n\r\n#### Please select the affected platforms\r\n- [x] Android\r\n- [X] iOS (robovm)\r\n- [X] iOS (MOE)\r\n- [X] HTML\/GWT\r\n- [X] Windows\r\n- [X] Linux\r\n- [X] MacOS\r\n","comments":["It would be great to have this feature !\r\nFYI i have a pending PR allowing any combinaition of shaders including the \"vertex shader only case\" : https:\/\/github.com\/libgdx\/libgdx\/pull\/4963\/files"],"labels":["GL"]},{"title":"Make use of TiledMapObjects' templates","body":"Tiled 1.1 adds support for [object templates](http:\/\/doc.mapeditor.org\/en\/latest\/manual\/using-templates\/). A template is saved as an external file, and you can place templates in your tilemap similar to how you place tiles from a tileset.\r\n\r\nIn the saved XML, the path to the template file is stored as an attribute of the object element.\r\n\r\nSuppose I placed a template object and renamed it. The corresponding XML would look like this:\r\n\r\n```xml\r\n<object id=\"6\" template=\"..\/just\/an\/example.tx\" name=\"Custom Name\" x=\"168\" y=\"483\">\r\n```\r\n\r\nAs you can see, many of the usual attributes (such as width, height, and type) are missing. In Tiled, I can still see these properties because it's reading them from the template file.\r\n\r\nI think the libgdx implementation would involve `BaseTmxMapLoader.loadObject()` getting the `template` attribute, loading the `.tx` file it points to, and filling out the missing properties using that template.\r\n\r\nAs for the `.tx` file itself, its structure looks pretty simple:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<template>\r\n <object name=\"Default name\" type=\"Example\" height=\"48\">\r\n  <properties>\r\n   <property name=\"some custom property\" value=\"test\"\/>\r\n  <\/properties>\r\n <\/object>\r\n<\/template>\r\n```\r\n\r\nSo it's saved the same way objects are saved in `.tmx` files.\r\n\r\nI can work around this limitation by detaching objects from their templates in my tile map, but it would be nice to be able to take full advantage of the Template functionality in Tiled.\r\n","comments":["Agree but this falls under keeping the lib updated with the new versions of the tools that were already adopted.","Any updates on this?","As workaround, the Tiled map editor provides export options to detach objects from the templates.\r\nThis can be integrated in the project build life-cycle to generate the LibGDX-compatible maps automatically using the CLI.\r\n\r\nExample command to export the map via the 'Tiled' editor CLI:\r\n`tiled --export-map --detach-templates src\/main\/tiledmaps\/test1.tmx src\/main\/resources\/maps\/test1.tmx`\r\nThe first map file is the source, the second one is the target.  \r\nThe target file does not reference the template file anymore and has all properties from the template.\r\n\r\nExample Gradle task to export all maps on-demand (written in Kotlin Gradle DSL):\r\n```kotlin\r\ntask(\"exportMaps\") {\r\n    val inputDir = \"$projectDir\/src\/main\/tiledmaps\"\r\n    val outputDir = \"$projectDir\/src\/main\/resources\/maps\"\r\n    inputs.dir(inputDir)\r\n    outputs.dir(outputDir)\r\n    doLast {\r\n        logger.info(\"Exporting 'Tiled' maps from directory $inputDir to $outputDir\")\r\n        val tmxFiles = file(inputDir).listFiles { dir, name -> name.endsWith(\".tmx\") }\r\n        @Suppress(\"RECEIVER_NULLABILITY_MISMATCH_BASED_ON_JAVA_ANNOTATIONS\")\r\n        tmxFiles.forEach {\r\n            logger.info(\"Exporting ${it.name}\")\r\n            exec {\r\n                val outputFile = file(outputDir).absolutePath + \"\/\" + it.name\r\n                commandLine = listOf(\"tiled\", \"--export-map\", \"--detach-templates\", it.absolutePath, outputFile)\r\n            }\r\n        }\r\n    }\r\n}\r\ntasks.clean {\r\n    delete(fileTree(\"$projectDir\/src\/main\/resources\/maps\") {\r\n        exclude(\".gitignore\")\r\n    })\r\n}\r\ntasks.processResources {\r\n    dependsOn(\"exportMaps\")\r\n}\r\n```\r\n\r\nFor reference, read https:\/\/www.mapeditor.org\/2018\/09\/18\/tiled-1-2-0-released.html for Info on the detach-preferences. Search for:\r\n> For this reason several Export Options were added to the Preferences:\r\n\r\n\r\nHowever... implementing actual object template support into the classes should not be much effort. I just didn't wanna fork it and use a custom libgdx version for my project while I wait for a pull request to be accepted and the next libgdx version to be released.","Hi, I am making an educational resource using LibGDX, having the template functionality working without exporting with the template detached would help a lot.","I had the same issue and an easy workaround was to extend the TmxMapLoader like this\r\n```\r\n\r\nimport com.badlogic.gdx.files.FileHandle;\r\nimport com.badlogic.gdx.maps.ImageResolver;\r\nimport com.badlogic.gdx.maps.MapObjects;\r\nimport com.badlogic.gdx.maps.tiled.TiledMap;\r\nimport com.badlogic.gdx.maps.tiled.TmxMapLoader;\r\nimport com.badlogic.gdx.utils.XmlReader;\r\n\r\npublic class TemplateTmxMapLoader extends TmxMapLoader {\r\n\r\n    FileHandle tmxFile;\r\n    @Override\r\n    protected TiledMap loadTiledMap (FileHandle tmxFile, TmxMapLoader.Parameters parameter, ImageResolver imageResolver){\r\n          this.tmxFile = tmxFile;\r\n          return super.loadTiledMap(tmxFile,parameter,imageResolver);\r\n    }\r\n    @Override\r\n    protected void loadObject (TiledMap map, MapObjects objects, XmlReader.Element element, float heightInPixels) {\r\n        if (element.getName().equals(\"object\")) {\r\n\r\n            if(!element.hasAttribute(\"template\"))\r\n            {\r\n                super.loadObject(map,objects,element,heightInPixels);\r\n                return;\r\n            }\r\n            FileHandle template= getRelativeFileHandle(tmxFile,element.getAttribute(\"template\"));\r\n            XmlReader.Element el = xml.parse(template);\r\n            for(XmlReader.Element obj:el.getChildrenByName(\"object\"))\r\n            {\r\n                    obj.setAttribute(\"x\",element.getAttribute(\"x\"));\r\n                    obj.setAttribute(\"y\",element.getAttribute(\"y\"));\r\n                    obj.setAttribute(\"id\",element.getAttribute(\"id\"));\r\n                    super.loadObject(map,objects,obj,heightInPixels);\r\n                    return;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n"],"labels":["enhancement","tilemap"]},{"title":"Add bullet classes btFaceArray and btIntArray","body":"The addition of these two swig-generated classes allows easy access to the output from btConvexHullComputer. btFaceArray is a list of faces consisting of a surface normal and a list of vertices (btIntArray). ~~Note that **Bullet has to be re-swigged now** (wasn't working for me, but tested working on 1.9.6 source).~~\r\n\r\nIn its current state, the method btConvexPolyhedron.getFaces() returns an unusable SWIGTYPE_p_btAlignedObjectArrayT_btFace_t object.\r\n\r\nExample usage can be found [here](https:\/\/github.com\/JerBear3\/Trashy3D\/blob\/f4ea96b344f3a1321ff570487cb13f52946ee27c\/core\/src\/jerbear\/util3d\/shapes\/ConvexHull.java#L65).","comments":["I managed to reswig Bullet by messing around in ant. Should be a simple merge now.","Someone can please take a look on this PR?","@yuripourre If you need a precompiled version, I have one in my repo: https:\/\/github.com\/JerBear3\/Trashy3D\/tree\/master\/customlibs\r\n\r\nIt's plain 1.9.8. The only change I made was this commit."],"labels":["bullet"]},{"title":"[Android-Meizu M5 Note] Screen flickers on pause at non-continious render","body":"#### Issue details\r\nI have a game which uses non-continious rendering. After switching to NCR the screen started to flicker when the home button is pressed. Then I tried to test DirtyRenderingTest and still the screen flickers. By debuging frame ids I noticed that such behaviour exists when there are a lack of rendering frames. My game has actions which call rendering for some time. In case of no actions, it flickers.\r\nThe testing device is **Meizu M5 Note** on **Mali T860 MP2**.  Right now I do not have another devices to test. At least I didnt encounter such problem on simulation devices.\r\n\r\nTo solve this problem the game is forced to render a bit of frames after the resume. By experimenting I've found that 10 post-pause render frames are enough to stop flickering. \r\n\r\n`import com.badlogic.gdx.ApplicationAdapter;\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.graphics.Color;\r\nimport com.badlogic.gdx.graphics.GL20;\r\nimport com.badlogic.gdx.math.MathUtils;\r\n\r\npublic class TestApplication extends ApplicationAdapter\r\n{\r\n\tprivate long toFrameId;\r\n\r\n\tprivate static long RENDER_AFTER_PAUSE_TIMES = 10;\r\n\r\n\t@Override\r\n\tpublic void create () {\r\n\t\t\/\/ disable continuous rendering\r\n\t\tGdx.graphics.setContinuousRendering(false);\r\n\t\tGdx.app.log(\"DirtyRenderingTest\", \"created on \" + Gdx.graphics.getFrameId());\r\n\r\n\t\tthis.toFrameId = Gdx.graphics.getFrameId ( ) + RENDER_AFTER_PAUSE_TIMES;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void resume () {\r\n\t\tGdx.app.log(\"DirtyRenderingTest\", \"resumed on \" + Gdx.graphics.getFrameId());\r\n\r\n\t\tthis.toFrameId = Gdx.graphics.getFrameId ( ) + RENDER_AFTER_PAUSE_TIMES;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void resize (int width, int height) {\r\n\t\tGdx.app.log(\"DirtyRenderingTest\", \"resized on \" + Gdx.graphics.getFrameId());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void pause () {\r\n\t\tGdx.app.log(\"DirtyRenderingTest\", \"paused on \" + Gdx.graphics.getFrameId());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void dispose () {\r\n\t\tGdx.app.log(\"DirtyRenderingTest\", \"disposed on \" + Gdx.graphics.getFrameId());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void render () {\r\n\t\tGdx.app.log(\"DirtyRenderingTest\", \"render on \" + Gdx.graphics.getFrameId());\r\n\r\n\t\t\/\/Gdx.gl.glClearColor(MathUtils.random(), MathUtils.random(), MathUtils.random(), MathUtils.random());\r\n\t\t\/\/ Checking fps by device built-in fps counter\r\n\t\tGdx.gl.glClearColor(Color.TEAL.r, Color.TEAL.g, Color.TEAL.b, 1f);\r\n\t\tGdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\r\n\r\n\t\tif ( Gdx.graphics.getFrameId ( ) <= this.toFrameId )\r\n\t\t\tGdx.graphics.requestRendering ( );\r\n\t}\r\n}`\r\n\r\n#### Reproduction steps\/code\r\nGet Meizu M5 Note lul. \r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.8 and 1.9.7\r\n\r\n#### Stacktrace\r\nnull\r\n\r\n#### Please select the affected platforms\r\n- [x] Android\r\n- [?] iOS (robovm)\r\n- [?] iOS (MOE)\r\n","comments":["How does the flickering look? Can you post a video? This sounds suspiciously like a double buffering problem (although this would be something like \"decuple buffering\").","Sorry for a late reply. This https:\/\/drive.google.com\/file\/d\/1NyMcHEfbQCLpZlkbIne-bXBDyouI7Y-8\/view?usp=sharing is dirty rendering test and this https:\/\/drive.google.com\/file\/d\/1uF3Bkny1LDStaTVooHH9hgw38P0H7jva\/view?usp=sharing is the above temporary fix version. The flickering is hardly noticable due to phone camera. In reality it flickers more often. In the video you may see swapping and tapping on the screen to call rendering and avoid blinking.","The only difference I can see in the video is that the broken version shows black screen when switching out of the application. But I assume that it is flickering (that is, showing black screen some frames) even when it appears to be solid blue, is that correct?\r\n\r\nPlease try clearing the screen with random colors. If this is indeed a problem with double buffering, it should flicker with random colors even with your fix. If that doesn't happen, then the problem is probably somewhere else.","You are right. The problem is black flickering, which is not a previous frame or simple color.\r\nhttps:\/\/drive.google.com\/open?id=1fQTbuvU-YFb-vzS_MJtDPtbaR9CJ6Tsq\r\nBlack blinking is not seen in the video, but at least some flickering.\r\n\r\n> 12-23 22:36:04.184 1862-1986\/game.test I\/DirtyRenderingTest: created on -1\r\n12-23 22:36:04.184 1862-1986\/game.test I\/DirtyRenderingTest: resized on -1\r\n12-23 22:36:04.187 1862-1986\/game.test I\/DirtyRenderingTest: render on 0\r\n12-23 22:36:05.320 1862-1986\/game.test I\/DirtyRenderingTest: paused on 0\r\n12-23 22:36:07.160 1862-1986\/game.test I\/DirtyRenderingTest: resized on 0\r\n12-23 22:36:07.160 1862-1986\/game.test I\/DirtyRenderingTest: resumed on 0\r\n12-23 22:36:07.160 1862-1986\/game.test I\/DirtyRenderingTest: render on 1\r\n12-23 22:36:07.174 1862-1986\/game.test I\/DirtyRenderingTest: resized on 1\r\n12-23 22:36:07.175 1862-1986\/game.test I\/DirtyRenderingTest: render on 2\r\n12-23 22:36:07.227 1862-1986\/game.test I\/DirtyRenderingTest: resized on 2\r\n12-23 22:36:07.228 1862-1986\/game.test I\/DirtyRenderingTest: render on 3\r\n12-23 22:36:09.203 1862-1986\/game.test I\/DirtyRenderingTest: paused on 3\r\n12-23 22:36:12.804 1862-1986\/game.test I\/DirtyRenderingTest: resized on 3\r\n12-23 22:36:12.804 1862-1986\/game.test I\/DirtyRenderingTest: resumed on 3\r\n12-23 22:36:12.805 1862-1986\/game.test I\/DirtyRenderingTest: render on 4\r\n12-23 22:36:12.822 1862-1986\/game.test I\/DirtyRenderingTest: resized on 4\r\n12-23 22:36:12.822 1862-1986\/game.test I\/DirtyRenderingTest: render on 5\r\n12-23 22:36:12.872 1862-1986\/game.test I\/DirtyRenderingTest: resized on 5\r\n12-23 22:36:12.873 1862-1986\/game.test I\/DirtyRenderingTest: render on 6\r\n12-23 22:36:13.444 1862-1986\/game.test I\/DirtyRenderingTest: paused on 6\r\n12-23 22:36:15.399 1862-1986\/game.test I\/DirtyRenderingTest: resized on 6\r\n12-23 22:36:15.399 1862-1986\/game.test I\/DirtyRenderingTest: resumed on 6\r\n12-23 22:36:15.399 1862-1986\/game.test I\/DirtyRenderingTest: render on 7\r\n12-23 22:36:15.415 1862-1986\/game.test I\/DirtyRenderingTest: resized on 7\r\n12-23 22:36:15.415 1862-1986\/game.test I\/DirtyRenderingTest: render on 8\r\n12-23 22:36:15.458 1862-1986\/game.test I\/DirtyRenderingTest: resized on 8\r\n12-23 22:36:15.459 1862-1986\/game.test I\/DirtyRenderingTest: render on 9\r\n12-23 22:36:16.802 1862-1986\/game.test I\/DirtyRenderingTest: render on 10\r\n12-23 22:36:16.815 1862-1986\/game.test I\/DirtyRenderingTest: render on 11\r\n12-23 22:36:16.822 1862-1986\/game.test I\/DirtyRenderingTest: render on 12\r\n12-23 22:36:16.833 1862-1986\/game.test I\/DirtyRenderingTest: render on 13\r\n12-23 22:36:16.851 1862-1986\/game.test I\/DirtyRenderingTest: render on 14\r\n12-23 22:36:16.886 1862-1986\/game.test I\/DirtyRenderingTest: render on 15\r\n12-23 22:36:16.899 1862-1986\/game.test I\/DirtyRenderingTest: render on 16\r\n12-23 22:36:16.905 1862-1986\/game.test I\/DirtyRenderingTest: render on 17\r\n12-23 22:36:16.932 1862-1986\/game.test I\/DirtyRenderingTest: render on 18\r\n12-23 22:36:16.941 1862-1986\/game.test I\/DirtyRenderingTest: render on 19\r\n12-23 22:36:16.965 1862-1986\/game.test I\/DirtyRenderingTest: render on 20\r\n12-23 22:36:16.981 1862-1986\/game.test I\/DirtyRenderingTest: render on 21\r\n12-23 22:36:16.987 1862-1986\/game.test I\/DirtyRenderingTest: render on 22\r\n12-23 22:36:17.015 1862-1986\/game.test I\/DirtyRenderingTest: render on 23\r\n12-23 22:36:17.019 1862-1986\/game.test I\/DirtyRenderingTest: render on 24\r\n12-23 22:36:17.047 1862-1986\/game.test I\/DirtyRenderingTest: render on 25\r\n12-23 22:36:17.052 1862-1986\/game.test I\/DirtyRenderingTest: render on 26\r\n12-23 22:36:17.067 1862-1986\/game.test I\/DirtyRenderingTest: render on 27\r\n12-23 22:36:17.068 1862-1986\/game.test I\/DirtyRenderingTest: render on 28\r\n12-23 22:36:17.106 1862-1986\/game.test I\/DirtyRenderingTest: render on 29\r\n12-23 22:36:17.115 1862-1986\/game.test I\/DirtyRenderingTest: render on 30\r\n12-23 22:36:17.130 1862-1986\/game.test I\/DirtyRenderingTest: render on 31\r\n12-23 22:36:17.163 1862-1986\/game.test I\/DirtyRenderingTest: render on 32\r\n12-23 22:36:17.169 1862-1986\/game.test I\/DirtyRenderingTest: render on 33\r\n12-23 22:36:17.183 1862-1986\/game.test I\/DirtyRenderingTest: render on 34\r\n12-23 22:36:17.204 1862-1986\/game.test I\/DirtyRenderingTest: render on 35\r\n12-23 22:36:17.219 1862-1986\/game.test I\/DirtyRenderingTest: render on 36\r\n12-23 22:36:17.245 1862-1986\/game.test I\/DirtyRenderingTest: render on 37\r\n12-23 22:36:17.251 1862-1986\/game.test I\/DirtyRenderingTest: render on 38\r\n12-23 22:36:17.266 1862-1986\/game.test I\/DirtyRenderingTest: render on 39\r\n12-23 22:36:17.294 1862-1986\/game.test I\/DirtyRenderingTest: render on 40\r\n12-23 22:36:17.298 1862-1986\/game.test I\/DirtyRenderingTest: render on 41\r\n12-23 22:36:17.331 1862-1986\/game.test I\/DirtyRenderingTest: render on 42\r\n12-23 22:36:17.361 1862-1986\/game.test I\/DirtyRenderingTest: render on 43\r\n12-23 22:36:17.376 1862-1986\/game.test I\/DirtyRenderingTest: render on 44\r\n12-23 22:36:17.395 1862-1986\/game.test I\/DirtyRenderingTest: render on 45\r\n12-23 22:36:17.402 1862-1986\/game.test I\/DirtyRenderingTest: render on 46\r\n12-23 22:36:17.411 1862-1986\/game.test I\/DirtyRenderingTest: render on 47\r\n12-23 22:36:17.434 1862-1986\/game.test I\/DirtyRenderingTest: render on 48\r\n12-23 22:36:17.446 1862-1986\/game.test I\/DirtyRenderingTest: render on 49\r\n12-23 22:36:17.464 1862-1986\/game.test I\/DirtyRenderingTest: render on 50\r\n12-23 22:36:17.493 1862-1986\/game.test I\/DirtyRenderingTest: render on 51\r\n12-23 22:36:17.500 1862-1986\/game.test I\/DirtyRenderingTest: render on 52\r\n12-23 22:36:17.527 1862-1986\/game.test I\/DirtyRenderingTest: render on 53\r\n12-23 22:36:17.542 1862-1986\/game.test I\/DirtyRenderingTest: render on 54\r\n12-23 22:36:17.562 1862-1986\/game.test I\/DirtyRenderingTest: render on 55\r\n12-23 22:36:17.582 1862-1986\/game.test I\/DirtyRenderingTest: render on 56\r\n12-23 22:36:17.596 1862-1986\/game.test I\/DirtyRenderingTest: render on 57\r\n12-23 22:36:17.613 1862-1986\/game.test I\/DirtyRenderingTest: render on 58\r\n12-23 22:36:17.632 1862-1986\/game.test I\/DirtyRenderingTest: render on 59\r\n12-23 22:36:17.676 1862-1986\/game.test I\/DirtyRenderingTest: render on 60\r\n12-23 22:36:17.699 1862-1986\/game.test I\/DirtyRenderingTest: render on 61\r\n12-23 22:36:17.716 1862-1986\/game.test I\/DirtyRenderingTest: render on 62\r\n12-23 22:36:17.732 1862-1986\/game.test I\/DirtyRenderingTest: render on 63\r\n12-23 22:36:17.752 1862-1986\/game.test I\/DirtyRenderingTest: render on 64\r\n12-23 22:36:17.758 1862-1986\/game.test I\/DirtyRenderingTest: render on 65\r\n12-23 22:36:17.762 1862-1986\/game.test I\/DirtyRenderingTest: render on 66\r\n12-23 22:36:17.777 1862-1986\/game.test I\/DirtyRenderingTest: render on 67\r\n12-23 22:36:17.792 1862-1986\/game.test I\/DirtyRenderingTest: render on 68\r\n12-23 22:36:18.699 1862-1986\/game.test I\/DirtyRenderingTest: paused on 68\r\n12-23 22:36:20.352 1862-1986\/game.test I\/DirtyRenderingTest: resized on 68\r\n12-23 22:36:20.353 1862-1986\/game.test I\/DirtyRenderingTest: resumed on 68\r\n12-23 22:36:20.353 1862-1986\/game.test I\/DirtyRenderingTest: render on 69\r\n12-23 22:36:20.372 1862-1986\/game.test I\/DirtyRenderingTest: resized on 69\r\n12-23 22:36:20.372 1862-1986\/game.test I\/DirtyRenderingTest: render on 70\r\n12-23 22:36:20.418 1862-1986\/game.test I\/DirtyRenderingTest: resized on 70\r\n12-23 22:36:20.418 1862-1986\/game.test I\/DirtyRenderingTest: render on 71\r\n12-23 22:36:21.180 1862-1986\/game.test I\/DirtyRenderingTest: render on 72\r\n12-23 22:36:21.196 1862-1986\/game.test I\/DirtyRenderingTest: render on 73\r\n12-23 22:36:21.213 1862-1986\/game.test I\/DirtyRenderingTest: render on 74\r\n12-23 22:36:21.216 1862-1986\/game.test I\/DirtyRenderingTest: render on 75\r\n12-23 22:36:21.252 1862-1986\/game.test I\/DirtyRenderingTest: render on 76\r\n12-23 22:36:21.265 1862-1986\/game.test I\/DirtyRenderingTest: render on 77\r\n12-23 22:36:21.297 1862-1986\/game.test I\/DirtyRenderingTest: render on 78\r\n12-23 22:36:21.329 1862-1986\/game.test I\/DirtyRenderingTest: render on 79\r\n12-23 22:36:21.349 1862-1986\/game.test I\/DirtyRenderingTest: render on 80\r\n12-23 22:36:21.361 1862-1986\/game.test I\/DirtyRenderingTest: render on 81\r\n12-23 22:36:21.381 1862-1986\/game.test I\/DirtyRenderingTest: render on 82\r\n12-23 22:36:21.396 1862-1986\/game.test I\/DirtyRenderingTest: render on 83\r\n12-23 22:36:21.416 1862-1986\/game.test I\/DirtyRenderingTest: render on 84\r\n12-23 22:36:21.430 1862-1986\/game.test I\/DirtyRenderingTest: render on 85\r\n12-23 22:36:21.460 1862-1986\/game.test I\/DirtyRenderingTest: render on 86\r\n12-23 22:36:21.476 1862-1986\/game.test I\/DirtyRenderingTest: render on 87\r\n12-23 22:36:21.480 1862-1986\/game.test I\/DirtyRenderingTest: render on 88\r\n12-23 22:36:21.496 1862-1986\/game.test I\/DirtyRenderingTest: render on 89\r\n12-23 22:36:21.526 1862-1986\/game.test I\/DirtyRenderingTest: render on 90\r\n12-23 22:36:21.559 1862-1986\/game.test I\/DirtyRenderingTest: render on 91\r\n12-23 22:36:21.575 1862-1986\/game.test I\/DirtyRenderingTest: render on 92\r\n12-23 22:36:21.591 1862-1986\/game.test I\/DirtyRenderingTest: render on 93\r\n12-23 22:36:21.608 1862-1986\/game.test I\/DirtyRenderingTest: render on 94\r\n12-23 22:36:21.613 1862-1986\/game.test I\/DirtyRenderingTest: render on 95\r\n12-23 22:36:21.644 1862-1986\/game.test I\/DirtyRenderingTest: render on 96\r\n12-23 22:36:21.661 1862-1986\/game.test I\/DirtyRenderingTest: render on 97\r\n12-23 22:36:21.674 1862-1986\/game.test I\/DirtyRenderingTest: render on 98\r\n12-23 22:36:21.694 1862-1986\/game.test I\/DirtyRenderingTest: render on 99\r\n12-23 22:36:21.710 1862-1986\/game.test I\/DirtyRenderingTest: render on 100\r\n12-23 22:36:21.729 1862-1986\/game.test I\/DirtyRenderingTest: render on 101\r\n12-23 22:36:21.732 1862-1986\/game.test I\/DirtyRenderingTest: render on 102\r\n12-23 22:36:21.741 1862-1986\/game.test I\/DirtyRenderingTest: render on 103\r\n12-23 22:36:21.777 1862-1986\/game.test I\/DirtyRenderingTest: render on 104\r\n12-23 22:36:21.781 1862-1986\/game.test I\/DirtyRenderingTest: render on 105\r\n12-23 22:36:21.806 1862-1986\/game.test I\/DirtyRenderingTest: render on 106\r\n12-23 22:36:21.809 1862-1986\/game.test I\/DirtyRenderingTest: render on 107\r\n12-23 22:36:21.827 1862-1986\/game.test I\/DirtyRenderingTest: render on 108\r\n12-23 22:36:21.844 1862-1986\/game.test I\/DirtyRenderingTest: render on 109\r\n12-23 22:36:21.855 1862-1986\/game.test I\/DirtyRenderingTest: render on 110\r\n12-23 22:36:21.871 1862-1986\/game.test I\/DirtyRenderingTest: render on 111\r\n12-23 22:36:21.875 1862-1986\/game.test I\/DirtyRenderingTest: render on 112\r\n12-23 22:36:22.636 1862-1986\/game.test I\/DirtyRenderingTest: paused on 112\r\n12-23 22:36:24.238 1862-1986\/game.test I\/DirtyRenderingTest: resized on 112\r\n12-23 22:36:24.238 1862-1986\/game.test I\/DirtyRenderingTest: resumed on 112\r\n12-23 22:36:24.238 1862-1986\/game.test I\/DirtyRenderingTest: render on 113\r\n12-23 22:36:24.263 1862-1986\/game.test I\/DirtyRenderingTest: resized on 113\r\n12-23 22:36:24.263 1862-1986\/game.test I\/DirtyRenderingTest: render on 114\r\n12-23 22:36:24.334 1862-1986\/game.test I\/DirtyRenderingTest: resized on 114\r\n12-23 22:36:24.334 1862-1986\/game.test I\/DirtyRenderingTest: render on 115\r\n12-23 22:36:25.266 1862-1986\/game.test I\/DirtyRenderingTest: render on 116\r\n12-23 22:36:25.271 1862-1986\/game.test I\/DirtyRenderingTest: render on 117\r\n12-23 22:36:25.695 1862-1986\/game.test I\/DirtyRenderingTest: render on 118\r\n12-23 22:36:25.697 1862-1986\/game.test I\/DirtyRenderingTest: render on 119\r\n12-23 22:36:26.074 1862-1986\/game.test I\/DirtyRenderingTest: render on 120\r\n12-23 22:36:26.077 1862-1986\/game.test I\/DirtyRenderingTest: render on 121\r\n12-23 22:36:26.421 1862-1986\/game.test I\/DirtyRenderingTest: render on 122\r\n12-23 22:36:26.425 1862-1986\/game.test I\/DirtyRenderingTest: render on 123\r\n12-23 22:36:27.358 1862-1986\/game.test I\/DirtyRenderingTest: render on 124\r\n12-23 22:36:27.363 1862-1986\/game.test I\/DirtyRenderingTest: render on 125\r\n12-23 22:36:27.985 1862-1986\/game.test I\/DirtyRenderingTest: render on 126\r\n12-23 22:36:27.990 1862-1986\/game.test I\/DirtyRenderingTest: render on 127\r\n12-23 22:36:28.314 1862-1986\/game.test I\/DirtyRenderingTest: render on 128\r\n12-23 22:36:28.319 1862-1986\/game.test I\/DirtyRenderingTest: render on 129\r\n12-23 22:36:28.612 1862-1986\/game.test I\/DirtyRenderingTest: render on 130\r\n12-23 22:36:28.616 1862-1986\/game.test I\/DirtyRenderingTest: render on 131\r\n12-23 22:36:28.907 1862-1986\/game.test I\/DirtyRenderingTest: render on 132\r\n12-23 22:36:28.912 1862-1986\/game.test I\/DirtyRenderingTest: render on 133\r\n12-23 22:36:29.220 1862-1986\/game.test I\/DirtyRenderingTest: render on 134\r\n12-23 22:36:29.225 1862-1986\/game.test I\/DirtyRenderingTest: render on 135\r\n12-23 22:36:29.493 1862-1986\/game.test I\/DirtyRenderingTest: render on 136\r\n12-23 22:36:29.497 1862-1986\/game.test I\/DirtyRenderingTest: render on 137\r\n12-23 22:36:29.746 1862-1986\/game.test I\/DirtyRenderingTest: render on 138\r\n12-23 22:36:29.749 1862-1986\/game.test I\/DirtyRenderingTest: render on 139\r\n12-23 22:36:31.629 1862-1986\/game.test I\/DirtyRenderingTest: paused on 139\r\n12-23 22:36:33.409 1862-1986\/game.test I\/DirtyRenderingTest: resized on 139\r\n12-23 22:36:33.409 1862-1986\/game.test I\/DirtyRenderingTest: resumed on 139\r\n12-23 22:36:33.409 1862-1986\/game.test I\/DirtyRenderingTest: render on 140\r\n12-23 22:36:33.428 1862-1986\/game.test I\/DirtyRenderingTest: resized on 140\r\n12-23 22:36:33.428 1862-1986\/game.test I\/DirtyRenderingTest: render on 141\r\n12-23 22:36:33.473 1862-1986\/game.test I\/DirtyRenderingTest: resized on 141\r\n12-23 22:36:33.474 1862-1986\/game.test I\/DirtyRenderingTest: render on 142\r\n12-23 22:36:35.014 1862-1986\/game.test I\/DirtyRenderingTest: render on 143\r\n12-23 22:36:35.019 1862-1986\/game.test I\/DirtyRenderingTest: render on 144\r\n12-23 22:36:37.397 1862-1986\/game.test I\/DirtyRenderingTest: paused on 144\r\n12-23 22:36:40.727 1862-1986\/game.test I\/DirtyRenderingTest: resized on 144\r\n12-23 22:36:40.728 1862-1986\/game.test I\/DirtyRenderingTest: resumed on 144\r\n12-23 22:36:40.728 1862-1986\/game.test I\/DirtyRenderingTest: render on 145\r\n12-23 22:36:40.750 1862-1986\/game.test I\/DirtyRenderingTest: resized on 145\r\n12-23 22:36:40.751 1862-1986\/game.test I\/DirtyRenderingTest: render on 146\r\n12-23 22:36:40.816 1862-1986\/game.test I\/DirtyRenderingTest: resized on 146\r\n12-23 22:36:40.816 1862-1986\/game.test I\/DirtyRenderingTest: render on 147\r\n12-23 22:36:41.068 1862-1986\/game.test I\/DirtyRenderingTest: paused on 147\r\n12-23 22:36:42.905 1862-1986\/game.test I\/DirtyRenderingTest: resized on 147\r\n12-23 22:36:42.906 1862-1986\/game.test I\/DirtyRenderingTest: resumed on 147\r\n12-23 22:36:42.906 1862-1986\/game.test I\/DirtyRenderingTest: render on 148\r\n12-23 22:36:42.943 1862-1986\/game.test I\/DirtyRenderingTest: resized on 148\r\n12-23 22:36:42.943 1862-1986\/game.test I\/DirtyRenderingTest: render on 149\r\n12-23 22:36:42.981 1862-1986\/game.test I\/DirtyRenderingTest: resized on 149\r\n12-23 22:36:42.982 1862-1986\/game.test I\/DirtyRenderingTest: render on 150\r\n12-23 22:36:43.203 1862-1986\/game.test I\/DirtyRenderingTest: paused on 150\r\n12-23 22:36:45.107 1862-1986\/game.test I\/DirtyRenderingTest: resized on 150\r\n12-23 22:36:45.108 1862-1986\/game.test I\/DirtyRenderingTest: resumed on 150\r\n12-23 22:36:45.108 1862-1986\/game.test I\/DirtyRenderingTest: render on 151\r\n12-23 22:36:45.138 1862-1986\/game.test I\/DirtyRenderingTest: resized on 151\r\n12-23 22:36:45.139 1862-1986\/game.test I\/DirtyRenderingTest: render on 152\r\n12-23 22:36:45.321 1862-1986\/game.test I\/DirtyRenderingTest: render on 153\r\n12-23 22:36:45.328 1862-1986\/game.test I\/DirtyRenderingTest: paused on 153\r\n> "],"labels":["android"]},{"title":"Add modern shaders support","body":"This contribution brings geometry shader and tesslation shaders support.\r\n\r\nThis is a working branch, i need to cleanup things but i'd like to have your opinion on it before : \r\n\r\n* Even if it's not supported by WebGL, do you think it's resonable to merge it in libgdx ?\r\n* Does the implementation\/design is OK for you ?\r\n\r\nAlso I couldn't be able to test it fully cause i don't have all required hardware myself. I just tested it on Linux desktop and GWT to ensure it doesn't break shader program. It need some test with GLES3.2 android device and other OS (MacOSX and Windows).\r\n\r\nThere is simple examples provided you can test on : \r\n\r\n* SimpleGeometryShaderTest\r\n* SimpleTesslationShaderTest\r\n* SimplePNTriangleTesslation\r\n\r\nCompatibility notes : \r\n\r\n* None of these shaders are supported by WebGL (even WebGL 2.0)\r\n* Requires GLES 3.2 for android\r\n* Requires OpenGL 4.2 for desktop\r\n\r\nNote that i'm working on another branch for compute shader support but it involve more changes. You could take a look as well : https:\/\/github.com\/mgsx-dev\/libgdx\/tree\/modern-shaders\/compute\r\n\r\nThanks to point me in the right direction if i'm wrong.","comments":["If somebody could test the 3 provided examples with an android device supporting GLES 3.2 it could help !\r\n\r\nTo know if your device support it, you can search in the following list : http:\/\/opengles.gpuinfo.org\/ with filter set to GLES 3.2.\r\n\r\nThanks!","Nice, will check it out.  \r\n\r\nWith regards to support, I'd say its worth having even if its desktop only. At the moment we only support core GLES 3.0, so none of this is supported there.","Just looked over it briefly, and I like the approach.\r\n\r\nI was going to suggest making ShaderStage an enum, but after a closer look I saw that you can pass any arbitrary ShaderStage instance into a ShaderPart, so you are not locked into a fixed global configuration. So in that case, I think some Javadocs in ShaderStage should explain that those are provided for convenience and for default ShaderProgramLoader behavior. And it might be nice to mention in the ShaderPart constructor docs that some convenient preset ShaderStages are available.","I bring back this PR with a full rebase and added documentation as suggested by @cypherdare \r\n\r\nThis PR will provide a cleaner way to implement transform feedback buffers (see #5120) since it's typically using a vertex shader only program (and optional geometry shader).","I've looked over the new code (haven't tried using it yet). Overall I like how clean it is to use and the minimal code breakage. It think it would be good to list exactly what the breaking changes are. \r\n\r\nHere's what I see (please correct me if I'm wrong):\r\n\r\n1. The static vertex and fragment prefixes are moved to ShaderStage.\r\n2. The ShaderLoaderParameter uses ShaderFiles instead of directly using explicit shader file names.\r\n3. It seems you will be forced to use consistent shader file suffixes across your project now. (Not a big deal, but potentially breaking since you could previously customize it per ShaderProgramParameter.)\r\n\r\nIt looks to me like if you were just loading without using a ShaderLoaderParameter, with a `.vert` or `.frag` suffix, it should continue to work without changes.\r\n\r\nComments:\r\n * Regarding 2: I think we should provide one more constructor that takes nothing but a file name and uses the suffix to determine the ShaderStage. It would make it much easier to instantiate any number of these when defining the loading parameters. I often have a mix of independent shaders where I just load a \".vert\" file and let ShaderProgramLoader grab the corresponding \".frag\", but I also have lots of shaders where a vertex shader is shared among multiple shaders using different fragment programs. So I will be using lots of these ShaderStage arrays.\r\n* The five default ShaderStages should have Javadocs since their names don't indicate that they're just the defaults. But I agree with keeping the names short.\r\n* ShaderFile needs Javadocs for its prepend code field, since its important to know that the static prepend code (usually used just for versioning) goes before the local prepend code.\r\n* Should the ShaderStage constructor be public? It doesn't seem like they are intended to be replaced, since their respective fields are marked final. On a related note, maybe `stages` should be exposed as just an Iterator so it doesn't imply that you can change out the individual stages there. Probably unnecessary if the constructor is private, though.\r\n\r\nI'll try to run this very soon, mostly to check that it doesn't break any behavior for traditional two-part shaders.","@cypherdare any updates on your attempt to run this?","Thank you @cypherdare for your feedback, i appreciate it. To be honest i'm not fully satisfied with this PR and few things missing right now (eg. transform feedback with geometry shader needs to declare vertex attribute target before program linking). I need to find time to work on all this, so maybe we could consider this PR as a long time work. So, this PR is definitely not ready to be merged soon.\r\nBy then, devs can always use it as is or a part of it in their own code\/fork.\r\n\r\nAs a side note: For people interested in compute shaders (not included in this PR), i made some experiments and i think it doesn't need to be part of LibGDX ShaderProgram\/Mesh API, it can be implemented independently using Lwjgl API.","@payne911 I'd forgotten about it, sorry. I think I'll wait for the next commit. I don't have a lot of time for it right now."],"labels":["GL"]},{"title":"Hiero doesn't include 0 and space glyphs","body":"Depending on font and character set (sample text), Hiero sometimes omit notdef (0) and\/or space, and probably some other glyphs.\r\n\r\nFor example, when I generate a font from SourceSerifPro-Semibold.otf ([version 2.000](https:\/\/github.com\/adobe-fonts\/source-serif-pro\/releases\/tag\/2.000R)) with NEHE and ASCII sets, space (id=32) is included, but notdef (id=0) is missing. With extended set, the font has notdef, but there is no space. In the last case, there is also no id=10 (\\n), which is present in .fnt generated with NEHE and ASCII sets, so other glyphs can probably be missing as well.\r\n\r\nThe issue dosn't depend on any other settings (font size, number of pages, etc.). \r\n\r\nMaybe it's a hastable issue in `class UnicodeFont` or something?\r\n\r\nHiero v5 from https:\/\/libgdx.badlogicgames.com\/tools.html\r\n","comments":["I've spotted this in the past as well and I thought that:\r\n\r\n1. Lib assumes that for space you don't need a glyph since it's always empty. (I wanted to have a decorative graphical space bitmap)\r\n2. zero and \"o\" using the same glyph. that was really strange..."],"labels":["tools"]},{"title":"Tooltips broken on Android","body":"#### Issue details\r\nTooltips broken on Android. They do not show but cause an exception instead.\r\nAlso referenced in #4921 \r\n\r\n#### Reproduction steps\/code\r\nRun the UITest on android (i used a Huawei P8, Android 5)\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.6\r\n\r\n#### Stacktrace\r\n```java\r\n10-12 18:23:17.610 571-761\/com.badlogic.gdx.tests.android W\/System.err: java.lang.NullPointerException: Attempt to invoke virtual method 'com.badlogic.gdx.scenes.scene2d.Stage com.badlogic.gdx.scenes.scene2d.Actor.getStage()' on a null object reference\r\n10-12 18:23:17.610 571-761\/com.badlogic.gdx.tests.android W\/System.err:     at com.badlogic.gdx.scenes.scene2d.ui.TooltipManager$2.run(TooltipManager.java:69)\r\n10-12 18:23:17.610 571-761\/com.badlogic.gdx.tests.android W\/System.err:     at com.badlogic.gdx.backends.android.AndroidGraphics.onDrawFrame(AndroidGraphics.java:488)\r\n10-12 18:23:17.610 571-761\/com.badlogic.gdx.tests.android W\/System.err:     at android.opengl.GLSurfaceView$GLThread.guardedRun(GLSurfaceView.java:1531)\r\n10-12 18:23:17.610 571-761\/com.badlogic.gdx.tests.android W\/System.err:     at android.opengl.GLSurfaceView$GLThread.run(GLSurfaceView.java:1248)\r\n```\r\n\r\n#### Please select the affected platforms\r\n- [x] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["I can't reproduce this on my device.  You are running the stock UITest, what are the exact steps to reproduce? What are you hovering over etc?","I'm running the stock UITest and when tapping on the Button \"Multi Line Toggle\" there should be a tooltip popping up, but instead an exception gets thrown. As stated in the PR, using a real Android phone for this.","Yeah, I can't reproduce this with your steps.  I'll try find another device to test on to see if i can it there. Otherwise, hopefully someone else can reproduce and test.","I tried various phones and tablets with Android versions ranging from 4.1.2 to 7.1, and I can't reproduce the issue either. The tooltip always pops up correctly for me. (I tried with both USB and Bluetooth mices)\r\n\r\nAre there any other steps I might be missing here?","No there are no other steps involved. I sadly do not have any other working phone around to pin point the issue to my device specifically. Huawei is involved in all kinds of weird Android bugs though.\r\n\r\nUsing the Huawei P8 for this.","It's likely a race condition as TooltipManager isn't thread-safe - there are no synchronization \/ guard blocks."],"labels":["android","scene2d","help wanted","good first issue"]},{"title":"Intersector.intersectRayTriangle returns true for any degenerate triangle","body":"I think it's related to closed #929. Filed this just in case - I spent several hours trying to understand what's wrong with my code.\r\n\r\n`intersectRayTriangle (Ray ray, Vector3 t1, Vector3 t2, Vector3 t3, Vector3 intersection) ` returns `true` for any [degenerate triangle](https:\/\/en.wikipedia.org\/wiki\/Degeneracy_(mathematics)).\r\n\r\n```\r\nRay ray = new Ray(new Vector3(10, 20, 30), new Vector3(0, -1, 0));\r\n\r\nVector3 tmp1 = new Vector3(100, 200, 300);\r\nVector3 tmp2 = new Vector3(400, 500, 600);\r\nVector3 tmp3 = new Vector3(400, 500, 600); \/\/ same as tmp2\r\n\r\nboolean result = Intersector.intersectRayTriangle(ray, tmp1, tmp2, tmp3, tmp);\r\n```\r\nReturned result is `true`, which I'm think is wrong. It also returns true for any one-point-triangle (and (0, 0, 0), (0, 0, 0), (0, 0, 0)).\r\n\r\nIMO there is a little difference between \"edge case with float precision\" and \"incorrect input data causes false positive\".\r\n\r\nCode tested on Android.","comments":[],"labels":["core","math"]},{"title":"Feature request: gradient and drop shadow support in FreeTypeFontGenerator","body":"There's a 3'rd party version here, but it doesn't compile anymore:\r\n\r\nhttp:\/\/www.badlogicgames.com\/forum\/viewtopic.php?f=17&t=18157\r\n\r\nWould be great if this was officially maintained, as doing this in Hiero is a major inflexible hassle compared to generating at runtime.\r\n\r\nThanks for considering.","comments":["This looks cool. But,\r\n\r\nDo we have a way of creating Gradients in general? They can have so many uses in texture generation and drawing in general. If you ever used photoshop for gradiends you would understand what I mean. The options and key points for colors and opacity make the potential code too big - e.g. repeating rainbow gradients.\r\n\r\nI think we need a general gradient solution in the lib before this is atempted or updated.","@xGnoSiSx gradients in OpenGL can be achieved by specifying two colors in a quad.\r\n\r\nI also don't see how it makes the code big? No matter how many key points you want to add, it's no more than an array of points, no? I'm not sure I'm following what you're saying here.\r\n\r\nWonder if this could be achieved - maybe somewhat inefficient - by creating a texture, drawing black letters, applying gaussian blur to the whole texture with a given strength and then splatting that behind the main atlas.","There are radial gradients, gradient rotations and other techniques, like noise types, alpha gradient, textured gradients and on and on.  I wouldn't like this introduced because then there would be requests for more functionality and options - which would be out of scope.\r\n\r\nI would welcome the introduction of a a glyph texture backdrop in Hiero. There are myriad choices on letter texturing, just allow the user to supply a texture (image) sized in any diimensions, that will be used for filling the glyphs, tiled or untiled.\r\n\r\nIn this way more versatility is added with minimal complexity - each user can select their fill texture in the tool.\r\n\r\nBut i agree on shadows. Last time, I baked them in the font texture myself and it was kind of a waste of time.","@xGnoSiSx Right. One thing is the waste of time. The other is the lack of flexibility. Would be great to be able to do this at runtime.","I agree."],"labels":["enhancement","fonts"]},{"title":"TextField IME and getTextInput IME are not the same","body":"The IME popup used `TextFiled` is not same as using `Gdx.input.getTextInput`, I expect the IME window should be like as `Gdx.input.getTextInput` showed. (IME : [Google Zhuyin](https:\/\/play.google.com\/store\/apps\/details?id=com.google.android.apps.inputmethod.zhuyin&hl=zh_TW))\r\nThe IME I expected:\r\n\r\n        Gdx.input.getTextInput(new Input.TextInputListener() {\r\n            @Override\r\n            public void input(String text) {\r\n                projectNameField.setText(text);\r\n            }\r\n\r\n            @Override\r\n            public void canceled() {\r\n\r\n            }\r\n        }, \"\", \"\", \"\");\r\n![photo_2017-09-19_20-20-42](https:\/\/user-images.githubusercontent.com\/6420527\/30592225-88b19ee6-9d78-11e7-9c49-4a1f43d8f752.jpg)\r\n\r\n\r\nThe Default TextField:\r\n![photo_2017-09-19_20-20-36](https:\/\/user-images.githubusercontent.com\/6420527\/30592221-830c6638-9d78-11e7-817e-6418d6610391.jpg)\r\n\r\nI hope that I could use `TextField`  without a redundant Android dialog and Correct IME...\r\n\r\n1.9.6\r\n- [ O] Android\r\n","comments":["I found the code that cocos2d do the right way about it, source code [here](https:\/\/github.com\/cpinan\/Cocos2dX_GooglePlayGamesServices\/blob\/master\/GooglePlayGameServices\/proj.android\/src\/org\/cocos2dx\/lib\/Cocos2dxGLSurfaceView.java), the different part between the difference is Cocos2d use `EditText`, and Libgdx use `View`:\r\n\r\ncocos2d:\r\n\r\n\t\tCocos2dxGLSurfaceView.this.mCocos2dxEditText\r\n\t\t\t\t.addTextChangedListener(Cocos2dxGLSurfaceView.sCocos2dxTextInputWraper);\r\n\t\tfinal InputMethodManager imm = (InputMethodManager) Cocos2dxGLSurfaceView.mCocos2dxGLSurfaceView\r\n\t\t\t\t.getContext().getSystemService(\r\n\t\t\t\t\t\tContext.INPUT_METHOD_SERVICE);\r\n\t\timm.showSoftInput(\r\n\t\t\t\tCocos2dxGLSurfaceView.this.mCocos2dxEditText, 0);\r\n\r\nlibgdx:\r\n\r\n\t\thandle.post(new Runnable() {\r\n\t\t\tpublic void run () {\r\n\t\t\t\tInputMethodManager manager = (InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);\r\n\t\t\t\tif (visible) {\r\n\t\t\t\t\tView view = ((AndroidGraphics)app.getGraphics()).getView();\r\n\t\t\t\t\tview.setFocusable(true);\r\n\t\t\t\t\tview.setFocusableInTouchMode(true);\r\n\t\t\t\t\tmanager.showSoftInput(((AndroidGraphics)app.getGraphics()).getView(), 0);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmanager.hideSoftInputFromWindow(((AndroidGraphics)app.getGraphics()).getView().getWindowToken(), 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\nAlthough I find the problem, I haven't find a elegant way to make it work. The first thing is made a visual \/transparent EditText, transparent EditText could be implemented when using Fragment, But I have no idea that the visual way to slove this.\r\n\r\n[Here](https:\/\/github.com\/cpinan\/Cocos2dX_GooglePlayGamesServices\/blob\/6d0877d2cd942e90af7370d4f304cc2b5fe9ffc2\/GooglePlayGameServices\/proj.android\/src\/org\/cocos2dx\/lib\/Cocos2dxTextInputWraper.java) is aa useful material for reconstructing the Libgdx TextField\/TextInput, If anyone insterested."],"labels":["android","scene2d","input"]},{"title":"Hexagonal Tiled Maps not taking flipped coordinate system in consideration some times. Wrong staggering and wrong object positions.","body":"#### Issue details\r\nCreating tmx maps with Tiled the coorinate system begins at the left top and the one libgdx is using from bottom left. While loading the map everything is flipped accordingly, but there are still 2 main issues:\r\n1. There is no Hexagonal TmxMapLoader. So the mapHeightInPixels is calulcated as following:\r\n`mapHeightInPixels = mapHeight * tileHeight;`\r\nwhile it should actually be like this(taking in consideration, that hexagons are 'overlapping':\r\n`mapHeightInPixels = mapHeight == 1 ? tileHeight : ((tileWidth * 0.25f) + (((tileWidth * 0.75f) * mapHeight) + (tileHeight - tileWidth)));`\r\nThis results in MapObjects in the ObjectLayer getting wrong positions, as the original position is flipped with the wrong mapHeightInPixels.\r\n\r\n2. The staggerIndex is wrong sometimes, because the shifting along the x-Axis begins every even, or odd column starting from bottom instead the other way round as intended by Tiled.\r\nCurrent code:\r\n```\r\nfor (int row = row2 - 1; row >= row1; row--) {\r\n\t\/\/ depending on the stagger index either shift for even or uneven indexes\r\n\tif ((row % 2 == 0) == staggerIndexEven)\r\n\t\tshiftX = layerTileWidth50;\r\n\telse\r\n\t\tshiftX = 0;\r\n\tfor (int col = col1; col < col2; col++) {\r\n\t\trenderCell(layer.getCell(col, row), layerTileWidth * col + shiftX + layerOffsetX,\r\n\t\t\ttileHeightUpperCorner * row + layerOffsetY, color);\r\n\t}\r\n}\r\n```\r\nThe interesting thing here is, that the cell index at layer.getCell(0, 0) now is the one at the bottom left, so it was flipped in the maploader. But the code we see here in the HexagonalTiledMapRenderer actually starts at the highest row, meaning it will start rendering the map at the top left point.\r\nSo the only thing that needs to be adjusted is instead of the line\r\n\t`if ((row % 2 == 0) == staggerIndexEven)`\r\nthe row needs to be flipped again:\r\n```\r\nint flippedRow = mapHeightInTiles - 1 - row;\r\n    if ((flippedRow % 2 == 0) == staggerIndexEven)\r\n```\r\n\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.7-SNAPSHOT\r\n\r\nTiled Version: 1.0.2\r\n","comments":["Bump, the issue is visible in the following screenshots.\r\n\r\nhttps:\/\/imgur.com\/ZvuEQy2\r\nhttps:\/\/imgur.com\/K3wky1V\r\n"],"labels":["bug","tilemap"]},{"title":"The default buffer size on desktop doesn't work well with AudioDevice","body":"#### Issue details\r\n\r\nThe default buffer size seems to be too small and causes frequent buffer underflow with AudioDevice.\r\n\r\nOpenAL has a fixed (well, configurable only via user files) [buffer size](https:\/\/github.com\/kcat\/openal-soft\/blob\/8a735d0ba9db9b4b992172dc197396cc655264d5\/alsoftrc.sample#L74) of 1024\\*3 (in frames). The good number I found so far for libGDX is 512\\*18 (this one is in bytes), but I need some math expert here.\r\n\r\nWhy wasn't this reported before? Because nobody uses AudioDevice (it's too poor interface) and the buffer size is [only](https:\/\/github.com\/libgdx\/libgdx\/blob\/1121605\/backends\/gdx-backend-lwjgl\/src\/com\/badlogic\/gdx\/backends\/lwjgl\/audio\/OpenALMusic.java#L34) [used](https:\/\/github.com\/libgdx\/libgdx\/blob\/beb8631\/backends\/gdx-backend-lwjgl\/src\/com\/badlogic\/gdx\/backends\/lwjgl\/audio\/OpenALSound.java#L37) [right](https:\/\/github.com\/libgdx\/libgdx\/blob\/8ed949a\/backends\/gdx-backend-lwjgl\/src\/com\/badlogic\/gdx\/backends\/lwjgl\/audio\/OpenALAudioDevice.java#L51) [here](https:\/\/github.com\/libgdx\/libgdx\/blob\/c9b3dd2\/backends\/gdx-backend-lwjgl\/src\/com\/badlogic\/gdx\/backends\/lwjgl\/audio\/OpenALAudio.java#L330).\r\n\r\n#### Reproduction steps\/code\r\n\r\nLet me be a little lazy here, tell me if you need. I tried to output it on a separate thread, but no luck, the underflow does occur.\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nFound on 1.9.6\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [x] Windows\r\n- [x] Linux\r\n- [x] MacOS\r\n","comments":["Hi @ishitatsuyuki , I'll try to answer your questions but I don't know if it's the right place to discuss about it because you have an underflow issue regarding default libGDX configuration and some questions about audio buffering in general.\r\n\r\nFor your underflow issue, the solution is to increase either the bufferCount or the bufferSize. Choice of increasing one or the other is a compromise between performances and latency. In short, if you don't care much about latency you can increase the bufferSize but typically you'd prefer to increase bufferCount to keep decent latency for most systems. That should resolve your problem.\r\n\r\nNow about your questions : \r\n\r\nI experienced the underflow issue when I created a pure data extension for libGDX [gdx-pd](https:\/\/github.com\/mgsx-dev\/gdx-pd). It is using LibGDX AudioDevice and indeed few people use it because it's manly used for procedural audio which is not really common. The AudioDevice is not poor but low-level :-)\r\n\r\nFor the links you point out, OpenALMusic stream music use a huge buffer probably to prevent buffer underflow because of file streaming so it fix this by design. OpenALSound are not concerned because it plays the entire audio file and don't have to play continuously. Finally OpenALAudioDevice as I tell you is rarely used but it's really nice to have it and be able to plug another audio engine (like I did ;-)).\r\n\r\nThreading is mandatory when playing with audioDevice : you have to fill buffer continuously to avoid buffer underflow and you shouldn't fill audio buffer in the GLThread, these 2 process have really different clocks.\r\n\r\nFor your math expertise need, I don't understand, I presume you meant 1024 frames x 3 buffer count and 512 frames x 18 buffer count ? Vocabulary is important to understand all this and audio buffering is tricky : \r\n* a sample is made of bytes : typically 2 bytes for 16bits PCM but could be 1 bytes (8bits) or more (24bits, 32 bits)\r\n* a frame (nothing related to rendering frame) is made of sample(s) : one sample if mono, 2 samples if stereo, and so on...\r\n* a buffer is made of frames : typically power of two (512, 1024) and gives the latency time of the process.\r\n* buffer count is the number of buffer you sending to OpenAL at a time (OpenAL has it's own buffer size and OS driver as well)\r\n\r\nSo to compute latency and proper buffer size, you have to convert carefully from one to the others.\r\n\r\nI hope it's more clear for you. If you have any further questions not related to a libGDX issue, I suggest you to use another channel : IRC, badlogic forum, stackunderflow :D ...","> The AudioDevice is not poor but low-level :-)\r\n\r\nI don't like it because the blocking behavior cannot be controlled and it's not very flexible. One more tricky thing is that you must feed the exact buffer size or multiples of it, or it will create glitches.\r\nWhile I reviewed AudioDevice, I found many unreachable code (logical error). It is also [confusing error types with normal return value](https:\/\/github.com\/libgdx\/libgdx\/blob\/8ed949a\/backends\/gdx-backend-lwjgl\/src\/com\/badlogic\/gdx\/backends\/lwjgl\/audio\/OpenALAudioDevice.java#L136).\r\n\r\nThe config value in OpenAL itself uses frames, and it's 1024 frames * 3 refills. The configuration in libGDX's LWJGL class is using bytes, and it's equal to 512\/4 = 128 frames * 9 refills. (Everything is converted to s16, currently.)\r\n\r\nI appreciate your explanation, and I seem to get the correct explanation for this. The minimum for the buffer count seems to be 16 here, as it's equal to 2 refills of the underlying buffer. But well, I chose to match the buffer size too, and I'm currently using 2048 * 6 and it seems good.\r\n\r\nAnd well, having bad defaults is indeed an issue. I would like to have the default corrected, and I guess 2048 * 6 should be good as what I said above.","Actually blocking behavior is expected because you don't choose when to fill audio buffer, it's the underlying driver that allow you (or precisely waiting you) to fill next audio stream chunk. This is typically done in a infinite loop.\r\n\r\nFranckly, I'm not sure if libGDX default audio value are too low because I was suspecting my audio driver (ALSA under Linux) and hardware to have huge audio buffers... but maybe you're right. On which OS do you encounter the issue ?","> The unreachable code you mentioned don't seems unreachable to me, it happens when there is no buffers available, that is when all OpenAL buffers are filled (playing or waiting to play).\r\n\r\n[`queuedBuffers == bufferCount`](https:\/\/github.com\/libgdx\/libgdx\/blob\/8ed949a\/backends\/gdx-backend-lwjgl\/src\/com\/badlogic\/gdx\/backends\/lwjgl\/audio\/OpenALAudioDevice.java#L109)\r\n\r\n[Two issues](https:\/\/github.com\/libgdx\/libgdx\/blob\/8ed949a46db4365019657bd235783fd3e70835db\/backends\/gdx-backend-lwjgl\/src\/com\/badlogic\/gdx\/backends\/lwjgl\/audio\/OpenALAudioDevice.java#L136):\r\n- `buffers > 0`\r\n- `bufferID` should be `alGetError()`\r\n\r\n[`isPlaying == true`](https:\/\/github.com\/libgdx\/libgdx\/blob\/8ed949a\/backends\/gdx-backend-lwjgl\/src\/com\/badlogic\/gdx\/backends\/lwjgl\/audio\/OpenALAudioDevice.java#L154)\r\n\r\n","Oops. Continuation:\r\n\r\n> Frankly, I'm not sure if libGDX default audio value are too low because I was suspecting my audio driver (ALSA under Linux) and hardware to have huge audio buffers... but maybe you're right. On which OS do you encounter the issue?\r\n\r\nSure, Linux. But as I told you, this is [OpenAL soft](https:\/\/github.com\/kcat\/openal-soft\/blob\/8a735d0ba9db9b4b992172dc197396cc655264d5\/alsoftrc.sample#L74) default which is almost used everywhere since there are only a few OpenAL vendors.","Are you suggesting to align libgdx default settings to OpenAL default settings ?\r\n\r\nIs it possible to ship an openAL config file within game desktop distributions in some way in order to tweak openAL (eg. reducing latency) ? If so, we could write something in the wiki for this purpose.","Yes. Out-of-box compatibility is important.\r\n\r\nI also considered to override the OpenAL soft configuration, but two pitfalls here: Creative sound cards exist (which we can't override the settings as it's a different impl), and the method of overriding is much a hack: setting an environment variable *before* the library initializes. It's too hacky to suggest."],"labels":["desktop","audio"]},{"title":"Supported texture compression table","body":"#### Issue details\r\nThe documentation isn't 100% clear to me as to which platforms support which texture compression formats. I think there's also different compression support based on OpenGL 2.0 vs 3.0?\r\n\r\nIt would be good if there was a table showing the compression formats support by the different libgdx platforms for the different OpenGL versions.","comments":["https:\/\/github.com\/libgdx\/libgdx\/wiki\/Texture-Compression","@Tom-Ski I had read that page before I logged this issue. What confused me was lines like:\r\n\r\n- \"Note that for the GWT backend ETC1 and KTX\/ZKTX is currently not supported.\"\r\n- \"OpenGL ES 2.0 has only one mandatory texture compression format on Android: ETC1 (this format is not available on iOS)\"\r\n\r\nAnd this was why I logged the issue. I'm unsure as to what formats I can use on iOS (if any?). A table of platforms to compression formats would make things more clearer.","@tomcashman \r\nRGBA4444 should be sufficient enough.  I recommend closing, please?  That particular format works for all platforms through OpenGL 1.1 at a minimum, and all the other texture formats support it.  RGBA8888 is not supported on everything, though, regardless of platform of choice.","Close this, please?"],"labels":["enhancement"]},{"title":"3D Particles Extension","body":"We introduced some additional functionality to the 3D particle system:\r\n\r\n- Independent X and Y scaling for billboard particles\r\n- Billboard particles can now be aligned to their movement on the screen (Using the camera's projection).\r\n- Billboard particles' blending function can now be set.\r\n\r\nTo get a general idea of what the possibilities are with these additions I refer to this example video:\r\nhttps:\/\/youtu.be\/HJ-sTNyDDr0\r\n\r\n(Showing the scaling and alignment additions)","comments":[],"labels":["enhancement","3D"]},{"title":"Add way to obtain raw \"magneticField\" values in Gdx.input","body":"\r\n#### Issue details\r\nIt seems that currently there is no way how to obtain \"raw\" values from compass. (i.e. the values registered on Android platform with type == Sensor.TYPE_MAGNETIC_FIELD) other than write custom Input implementation for various platforms, or convert them back from degrees (precision lost, orientation). My question is why these values should be \"hidden\" when accelerometer and gyroscope values are \"visible\" on every platform?\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nup until latest nightlies\r\n\r\n#### Please select the affected platforms\r\nGdx.input\r\nall\r\n","comments":["There's no real reason, there was just no one implementing it. We are always happy to accept PRs. "],"labels":["enhancement"]},{"title":"[Feature request] Music methods","body":"Hello.\r\nI am not sure if this is a correct way to post someting like this but i seen that some other people makes posts like this.\r\n\r\nMy feature request is about looping a music file\r\ni know that there is a Music.setLooping(boolean) method but i think that something like that could be useful\r\n\r\nMusic.setLooping(float startTime, float endTimePosition);\r\nin the firts time music will end at endTime then will loop frem startTimePosition to endTimePosition\r\n\r\nMusic.setLooping(int times)\r\nMusic will loop <times> number of times\r\n\r\nMusic..setEnd(float position)\r\nif Looping = false music will end at position\r\n\r\nbefore using libgdx i was using directx xaudio2 and i really miss this features\r\nThanks a lot libgdx team, for bring us this awesome framework.\r\n","comments":["I might implement some of these and open a pull request, good idea!","To be honest, `Music.setLooping(float startTime, float endTimePosition)` and `Music.setEnd(float position)` seem to be methods that would rarely be used. \r\n\r\nWhile I can see the use in `Music.setLooping(int times)`, I think this functionality can very easily be implemented on the user side by using `setOnCompletionListener()`.","@crykn actually this is a reasonable use case that a lot of people want and it can't be done manually for accuracy reason : a floating 60 fps clock is not accurate enough to loop an audio stream, it should be done in audio thread (and backend API) with a sample based clock.\r\n\r\nI reopen it. Maybe we could close it later if we state it's too complicated to implement, or not possible for some backends, or if a third party library implement it nicely, but i don't think we should close it for the reason you mentioned.","How is a 3 year old feature request still being discussed?","Why wouldn't it be? The age of a request doesn't say anything about its merit. We are currently trying to clean up the issue tracker, so this is what prompted me looking into this."],"labels":["enhancement","audio"]},{"title":"NetJavaImpl.HttpClientResponse swallowing exceptions thrown by HttpURLConnection","body":"#### Issue details\r\n`HttpClientResponse` silently ignores all exceptions thrown by the `Connection` input stream, including exception thrown if the connection was already closed. After the response content is extracted with `getResult` (or one of its alternatives), the input stream is closed and subsequent calls to `getResult` will return an empty byte array, empty stream or empty string, without warning the user.\r\n\r\nPossible solutions:\r\n- Cache response result as byte array. Wrap with string or input stream on demand. Make `HttpClientResponse` thread-safe and reusable.\r\n- Rethrow silently ignored exceptions. I think making `HttpResponse` a single-use object is somewhat OK, as long as the user is able to track the source of the issue.\r\n- At the very least - add some warning logs for ignored exceptions.\r\n\r\n#### Reproduction\r\nA Kotlin example reproducing the issue - should be trivial to convert to Java:\r\n```Kotlin\r\nfun main(args: Array<String>) {\r\n  val net = NetJavaImpl()\r\n  val request = HttpRequest(\"GET\")\r\n  request.url = \"http:\/\/google.com\"\r\n  net.sendHttpRequest(request, object : HttpResponseListener {\r\n    override fun cancelled() = Unit\r\n    override fun failed(t: Throwable?) {\r\n      t?.printStackTrace()\r\n    }\r\n    override fun handleHttpResponse(httpResponse: HttpResponse) {\r\n      println(\"Content: ${httpResponse.resultAsString}\")\r\n      println(\"Content: ${httpResponse.resultAsString}\")\r\n    }\r\n  })\r\n  Thread.sleep(1000L)\r\n}\r\n```\r\n\r\n`\"Content: \"` is printed by the second `println` execution. No exceptions are thrown.\r\n\r\n#### Version of LibGDX\r\n1.9.6, although I'm pretty sure the issue exists in earlier versions.\r\n\r\n#### Please select the affected platforms\r\n- [x] Android\r\n- [x] iOS (robovm)\r\n- [x] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [x] Windows\r\n- [x] Linux\r\n- [x] MacOS\r\n","comments":["The documentation states those methods should only be used once per response, and they don't throw exceptions when called multiple times, so as far as I can tell this is not an issue.  Exceptions thrown by \r\n\r\nIf that is not the issue you are reporting, please expand and what it is you expect to happen given the current documentation.\r\n\r\nI agree that it would be nicer to cache the result for subsequent calls, even though it is stated in the documentation, its a little too easy to miss.","Except it does not work as expected. Try running this snippet:\r\n\r\n```Kotlin\r\nimport com.badlogic.gdx.ApplicationAdapter\r\nimport com.badlogic.gdx.Gdx\r\nimport com.badlogic.gdx.Net.*\r\nimport com.badlogic.gdx.backends.lwjgl.LwjglApplication\r\nimport com.badlogic.gdx.net.NetJavaImpl\r\n\r\nclass App : ApplicationAdapter() {\r\n  override fun create() {\r\n    val net = NetJavaImpl()\r\n    val request = HttpRequest(\"GET\")\r\n    request.url = \"http:\/\/example.com\"\r\n    net.sendHttpRequest(request, object : HttpResponseListener {\r\n      override fun cancelled() = Unit\r\n      override fun failed(t: Throwable?) {\r\n        t?.printStackTrace()\r\n      }\r\n\r\n      override fun handleHttpResponse(httpResponse: HttpResponse) {\r\n        Gdx.app.postRunnable {\r\n          println(\"Content: ${httpResponse.resultAsString}\")\r\n        }\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfun main(args: Array<String>) {\r\n  LwjglApplication(App())\r\n}\r\n```\r\nIt will **not** print the actual result on the main rendering thread.\r\n\r\nSilenced exception:\r\n```\r\njava.io.IOException: stream is closed\r\n\tat sun.net.www.protocol.http.HttpURLConnection$HttpInputStream.ensureOpen(HttpURLConnection.java:3348)\r\n\tat sun.net.www.protocol.http.HttpURLConnection$HttpInputStream.read(HttpURLConnection.java:3373)\r\n\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)\r\n\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)\r\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)\r\n\tat java.io.InputStreamReader.read(InputStreamReader.java:184)\r\n\tat java.io.Reader.read(Reader.java:140)\r\n\tat com.badlogic.gdx.utils.StreamUtils.copyStreamToString(StreamUtils.java:114)\r\n\tat com.badlogic.gdx.utils.StreamUtils.copyStreamToString(StreamUtils.java:103)\r\n\tat com.badlogic.gdx.net.NetJavaImpl$HttpClientResponse.getResultAsString(NetJavaImpl.java:85)\r\n\tat ktx.async.App$create$1$handleHttpResponse$1.run(test.kt:22)\r\n\tat com.badlogic.gdx.backends.lwjgl.LwjglApplication.executeRunnables(LwjglApplication.java:259)\r\n\tat com.badlogic.gdx.backends.lwjgl.LwjglApplication.mainLoop(LwjglApplication.java:210)\r\n\tat com.badlogic.gdx.backends.lwjgl.LwjglApplication$1.run(LwjglApplication.java:126)\r\n```\r\n\r\nEven if documented, it's very easy to miss (as you've noticed), counterintuitive, dangerous and actually inconsistent with the documentation. Empty string\/stream can be returned if the _first_ content read call is made on another thread.\r\n\r\nThis is a poorly designed API in the first place. Is there a use case for returning empty string or input stream from the HTTP response? Why would anyone want the framework to silently ignore exceptions and return invalid output in case of wrong API usage? This is what runtime exceptions are for - I'd very much rather have to deal with a `GdxRuntimeException` than wonder why my HTTP request yields no result.\r\n\r\nCaching would also be nice. `HttpResponse` interface could also extend `Disposable`, so you can clear the cache.","The goal isn't to silently ignore exceptions but to to pass them along to the failed method. Exceptions from the connection being closed and fetching the input stream should be rethrown when appropriate. Such as trying to obtain the input stream after the connection has already been closed.\r\n\r\nAfaik a no content response is a valid response if that is what you are asking.\r\n\r\nI'm all for a refactor of these classes, there are a quite a few gotchas here, would be nice for a cleanup.\r\n","> The goal isn't to silently ignore exceptions (...)\r\n\r\n- https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/net\/NetJavaImpl.java#L53\r\n- https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/net\/NetJavaImpl.java#L69\r\n- https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/net\/NetJavaImpl.java#L87\r\n- https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/net\/NetJavaImpl.java#L117\r\n\r\n> (...) but to to pass them along to the failed method.\r\n\r\nExceptions thrown during the connecting phase? Sure. Exceptions thrown _after_ `handleHttpResponse` call or in case of invalid API usage? I don't think these should be passed to the `failed` method. Or silenced.\r\n\r\nAnd there's the issue of the `HttpResponse` not being thread-safe. You can read the response content only from the listener thread, even if you're using API as documented (single read call).","You misunderstand, perhaps I wasn't clear, exceptions should be (re)thrown when appropriate, not _always_ passed to failed.  Anyone can grab the stream wait for the connection to be closed and do invalid operations on it, if the stream is to be leaked it needs to be safeguarded.\r\n\r\nA goal of this api is to pass exceptions that occur within the response handler along to failed, a failure of this api at the moment is to not safe guard dangerous operations, and silently ignore to consequences, as we have agreed on.","I understood, but this is not consistent with the current implementation - hence the links list.\r\n\r\n> exceptions should be (re)thrown when appropriate, not *always* passed to failed.\r\n\r\nAgreed.","Regarding thread safe use, are you suggesting to make it possible to read the content from another thread, or simply protect against this?","Depends. If you decide to cache the result, I'd probably just go with reading the whole content as byte array, lazily creating and caching its string representation on first content read call and creating a new `ByteArrayInputStream` on each stream read call. Thread safely would not be an issue, as the response would be more or less immutable (unless you modify the raw bytes array, but I'm assuming no one would do that knowingly).\r\n\r\nIf there's no cache, see if it's possible to introduce thread safely without hacks and unacceptable performance penalty during regular use (content read only within the listener). If not, a meaningful exception would be nice - `stream is closed` is a bit cryptic.","As a quick fix, you could change [these](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/net\/NetJavaImpl.java#L69) [two](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/net\/NetJavaImpl.java#L87) into `throw new GdxRuntimeException(\"Unable to read response content: HTTP response stream is closed. Content can be read only once from within the HttpResponseListener#handleHttpResponse method.\", e)`.","Yes, there appear several things wrong with the implementation in regards to error handling.\r\n\r\nAlso, I don't believe `getInputStream` will ever return `null`:\r\n -  [URLConnection.getInputStream](https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/net\/URLConnection.html#getInputStream--)\r\n\r\nThis will probably throw an `UnknownServiceException`. Also, I think rather than returning `connection.getErrorStream()`, returning the actual exception probably makes more sense as proposed. All the `getResult*` should probably throw `IOException` in that sense. Also, the `void failed (Throwable t)` method should probably be deprecated or removed altogether for `HttpResponseListener`.\r\n","Is `failed` not called? Anyway, you are all right that the code looks a bit messy, but on the other hand, there are no known problems with it. I do a lot of HttpRequests in my games, and never had any problems (only on iOS, [but that's another thing](https:\/\/github.com\/MrStahlfelge\/lightblocks\/blob\/1983286c3ef9e99e0a9071e9835a6684aaf96aa9\/ios\/src\/com\/badlogic\/gdx\/backends\/iosrobovm\/MyAppDelegate.java#L15)). So I think there's nothing to win here.","I am using it too and it's working fine. Yes, `failed` is called but it's a little bit redundant? Accessing the **response** can fail too, so we might as well just return all errors via the response directly? \r\n\r\nI definitely needs a cleanup either way. If it's an error, we should throw the error not return a text\/error stream. But yes, as long as there are not errors, it's fine :)"],"labels":["bug","code quality"]},{"title":"Optimization of BatchTiledMapRenderer#renderObjects(MapLayer)","body":"#### Issue details\r\nOn every call of `BatchTiledMapRenderer.render`, there is a call to the method `renderObjects`. However, that [`renderObjects method`](https:\/\/github.com\/libgdx\/libgdx\/blob\/3a2fe01c516e416cdcd0fbda850f9dc358740868\/gdx\/src\/com\/badlogic\/gdx\/maps\/tiled\/renderers\/BatchTiledMapRenderer.java#L170-L174) calls the empty `renderObject` method. Unless the `renderObject `method is implemented by the program, the `renderObject` method is completely empty, and therefore useless. In the end, this foreach loop will be called on every rendering tick if the map contains any object layers. This means that there is a possible performance hit as well as a possible extra battery drain when using multiple object layers on lower end mobile devices.\r\n\r\nI fully understand that this call was implemented so that the programmers can simply hook up to the `renderObject` method, without having to worry to see if this is called or not.\r\n\r\n#### Potential solutions\r\n\r\nThe solution I have found to this is to implement the `renderObjects` method with an empty body, to avoid having to execute the entire foreach loop. It is also possible to use the `render(int[])` method, and only pass in the indexes of graphics layers.\r\n\r\nHowever, I feel like it would be a good idea to add some documentation on the matter, to help programmers optimizing their render loops when using heavily populated object layers.\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nLatest version as of 2017-04-09\r\n","comments":["Did you actually profile the problem and your solution? ","I did not, but I believe that reading the code is enough to realize this is a bit of a useless call. However, I could make a test to see the difference in render times if you'd like","I highly doubt you'd see a meaningful difference. That said, if it is that important to you, just override the method to do nothing in a subclass.","I doubt it too, just wanted to point it out. Maybe someone smarter than me already had a better solution. I'll still profile it today and see if I can notice a difference of tick time, if not I'll post it here and close the issue"],"labels":["enhancement","tilemap"]},{"title":"Window size is incorrect if a game is restarted in the same JVM process","body":"#### Issue details\r\n\r\nWhen restarting a game in the same JVM process, the window size is not set correctly. By restarting a game, I mean that I click the X in the top right corner, and then create a new instance of my `LwjglApplication`. The window size is not the same the second time. The third time, it's back to the correct size, and it keeps cycling between the correct size and the incorrect size if I keep restarting the game. Here is a video demonstrating the behavior: https:\/\/pix.asidik.com\/tomski-W4Ucru.mp4\r\n\r\nIf the window size is set in the `LwjglApplicationConfig` passed to `LwjglApplication`, then the second time the game starts, the window is as large as the monitor.\r\n\r\n#### Reproduction steps\/code\r\n\r\nI'm programming in Clojure (that is the reason I want to be able to restart the game in the same JVM), and I don't have a development environment set up for Java. However, the program below is equivalent to my Clojure program. But I have not tested it.\r\n\r\nSetting the static variables in `Gdx` to null is needed to be able to restart the game at all.\r\n\r\n```\r\nimport com.badlogic.gdx.*;\r\nimport com.badlogic.gdx.backends.lwjgl.*;\r\nimport com.badlogic.gdx.graphics.*;\r\n\r\nclass LibGDXTest\r\n{\r\n    static void main(String[] args)\r\n    {\r\n        runOnce();\r\n        runOnce();\r\n        runOnce();\r\n        runOnce();\r\n    }\r\n\r\n    static void runOnce()\r\n    {\r\n        Gdx.app = null;\r\n        Gdx.audio = null;\r\n        Gdx.files = null;\r\n        Gdx.gl = null;\r\n        Gdx.gl20 = null;\r\n        Gdx.gl30 = null;\r\n        Gdx.graphics = null;\r\n        Gdx.input = null;\r\n        Gdx.net = null;\r\n        ApplicationListener game = new ApplicationListener()\r\n        {\r\n            public void create()\r\n            {\r\n            }\r\n            public void render()\r\n            {\r\n                Gdx.gl.glClearColor(0, 0, 0, 0);\r\n                Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\r\n            }\r\n            public void dispose()\r\n            {\r\n            }\r\n            public void pause()\r\n            {\r\n            }\r\n            public void resize(int w, int h)\r\n            {\r\n            }\r\n            public void resume()\r\n            {\r\n            }\r\n        };\r\n\r\n        LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();\r\n        config.width = 100;\r\n        config.height = 100;\r\n        config.forceExit = false;\r\n\r\n        LwjglApplication app = new LwjglApplication(game, config);\r\n\r\n        Thread.sleep(1000);\r\n        app.exit();\r\n        Thread.sleep(1000);\r\n    }\r\n\r\n}\r\n```\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n\r\nLibGDX version 1.9.6. I was using the following dependencies:\r\n\r\n```\r\ncom.badlogicgames.gdx\/gdx \"1.9.6\"\r\ncom.badlogicgames.gdx\/gdx-backend-lwjgl \"1.9.6\"\r\ncom.badlogicgames.gdx\/gdx-platform \"1.9.6\"\r\n```\r\n\r\n#### Please select the affected platforms\r\n\r\nI have only tried it on a Linux Mint desktop.\r\n\r\n- [ ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [x] Linux\r\n- [ ] MacOS\r\n","comments":["I removed the stuff about trying to use `setWindowedMode` since I was doing it wrong.\r\n\r\nAnyway, I tried to figure this out, and I think I have, mostly.\r\n\r\nThe problem is essentially that LWJGL's `Display` class is stateful and there is an [if statement](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/backends\/gdx-backend-lwjgl\/src\/com\/badlogic\/gdx\/backends\/lwjgl\/LwjglGraphics.java#L438) in `setWindowedMode` that prevents `Display.setDisplayMode` from being called the second time. The reason the if statement does not work is that `Display.getHeight()` reports the wrong height, since the `height` variable in `Display` is not set until `create` is called. I.e., the `height` variable has an old value, and not what will be used the next time Display is used.\r\n\r\nI propose just removing the if statement. This would result in the following benefits:\r\n* Less code.\r\n* Correct behavior when restarting.\r\n* Simpler code; not having to \"think about\" the current (display mode) state before setting a new one.\r\n\r\nAdmittedly, I don't know why the if statement was put there to begin with. But it seems unnecessary to me. The only case in which it is useful is if `setWindowedMode` is called multiple times in a row with the same arguments. Why would anyone do that?","It might be better to correctly invalidate the display on shutdown rather than remove this, but as you say I don't know why those checks are there in the first place. I can imagine in a settings screen you have a list of options, and perhaps it changes the display mode when you click them, and you wouldn't need it to reinit on the same size, but thats just a guess.","What do you mean by correctly invalidating the Display?\r\n\r\nAnyway, assuming no one calls `setWindowedMode` every frame or something stupid like that, but just once or twice unnecessarily, it's not a catastrophe to let it run, as it takes about 0.1 s."],"labels":["LWJGL2"]},{"title":"The following OpenGL functions are missing: glUniform2uiv, ...","body":"#### Issue details\r\nThe following `glUniform*` functions seem to be missing. This is odd because all other `glUniform*` functions seem to be present. \r\n\r\nFrom [GL30](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/graphics\/GL30.java):\r\n* `glUniform2uiv`\r\n\r\nFrom [GL20](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/graphics\/GL20.java):\r\n* `glUniform1ui`\r\n* `glUniform2ui`\r\n* `glUniform3ui`\r\n* `glUniform4ui`\r\n\r\n#### Reproduction steps\/code\r\nN\/A. This is about the API. \r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nLooks like this issue is in HEAD. I am using 1.9.5.\r\n\r\n#### Please select the affected platforms\r\nAll platforms. \r\n","comments":["Since Java does not have unsigned integers, use signed versions of these calls.\r\nNumbers that will from Java's perspective overflow into negative values, will show up in glsl as expected. (At least that seems to be the intent, I haven't tested it. This is pretty common in Java.)","I thought this at first, but there actually are many unsigned versions. In particular, the following functions exist:\r\n\r\n* `glUniform1uiv`\r\n* `glUniform3uiv`\r\n* `glUniform4uiv`\r\n\r\n...but `glUniform2uiv` is missing.\r\n\r\nAlso, the signed\/unsigned-ness is not important for the argument passed (as you point out). But the signed-ness of the function you called must match the signed-ness of the corresponding uniform variable in the shader (where there *are* signed and unsigned ints) otherwise an OpenGL error is generated. ","I stand corrected then, sorry."],"labels":["enhancement","GL"]},{"title":"[feature request] support for separated attributes in vertex buffers","body":"Hello, libgdx only support interleaved vertex buffers, this is very nice for static geometry because it may be a good cache optimization (https:\/\/www.khronos.org\/opengl\/wiki\/Vertex_Specification_Best_Practices#Interleaving), but although it may be an optimization for static geometry, for dynamic geometry changed by cpu each frame this doesn't help much, because the cache optimization you may gain in the gpu is lost in the cpu side, for example: for a morph animation implementation #2633,  I would prefer to have the attributes separated in the vertex buffer, because I am only modifying position and normals, and it is more cache friendly (I guess) if the data I will modify is close in memory (shape key blending is usually just, v[i] = v[i]+ (shape_factor)*ov[i], n[i] = n[i]+ (shape_factor)*on[i] ) .\r\n\r\nbut things may be even better, I may have only the attributes I will update separated and the static ones interleaved, well , I don't know how good would be that, but I guess in that way I may have the best of the two approaches, interleaved and separated.\r\n\r\nonly need to provide the capability of defining offsets and strides of the attributes, right know those are calculated by libgdx.\r\n","comments":[],"labels":["enhancement","GL"]},{"title":"Stage ignores mouseMove and touchDown events when moving mouse along upper bound","body":"#### Issue details\r\nIn GWT fullscreen mode Stage ignores mouseMove and touchDown events when moving mouse along upper bound.\r\n\r\n#### Reproduction steps\/code\r\nWhen moving mouse along Stage's upper bound then the following is true:\r\n`Gdx.graphics.getHeight() - screenY == viewport.getScreenY() + viewport.getScreenHeight()`\r\n\r\nThe methods Stage#mouseMoved and Stage#touchDown both contain the following check:\r\n```\r\nif (Gdx.graphics.getHeight() - screenY < viewport.getScreenY()\r\n\t|| Gdx.graphics.getHeight() - screenY >= viewport.getScreenY() + viewport.getScreenHeight()) return false;\r\n```\r\nwhich ignores the events when moving mouse along upper bound.\r\nThis check in both places should be changed to:\r\n```\r\nif (Gdx.graphics.getHeight() - screenY < viewport.getScreenY()\r\n\t|| Gdx.graphics.getHeight() - screenY > viewport.getScreenY() + viewport.getScreenHeight()) return false;\r\n```\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\nall\r\n\r\n#### Stacktrace\r\nn\/a\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [X] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["Stage#mouseMoved and Stage#touchDown have been fix over time. The new isInsideViewport(screenX, screenY) function work by adding -1 to y.\r\n\r\nBut the issue is still there. Width my 1920x1080 screen, when I click on the lower bound of my screen y=1 and when I click on the upper bound of my screen y=1080.\r\nIt should be y=0 and y=1079. Otherwise even with `actor.setSize(Gdx.graphics.getWidth(), Gdx.graphics.getHeight());` actor is not clickable every where.\r\nI run into the same issue on desktop version with a close windows button that wern't clickable in the top rigth corner of the screen.","I think it's a bad idea to have unconsistent screen coordinate where:\r\nx in [0, screenWidth-1]\r\ny in [1, screenHeigth]","A patch can be to add `y--;` into `Actor#hit(float x, float y, boolean touchable)`\r\n\r\nBut it migth be an OS dependent issue about getting screen input."],"labels":["bug","scene2d","input"]},{"title":"GestureDetector is leaky.","body":"#### Issue details\r\nGestureDetector instances are not collected by GC\r\n\r\n#### Reproduction steps\/code\r\n2 activities, one creates another with a child activity instantiating gdx.Game where GestureDetector also instantiated. Close the child activity and return to the parent after triggering some gestures. Repeat from creating another child activity. \r\nFrom the .hprof files you can see that GestureDetector instances are never collected with a Timer (longPressTask) being the reason. It's never disposed.\r\n I made a copy of GestureDetector in my project and removed longPressTask since I don't use it, after that GC works as expected.\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.6\r\n\r\n#### Memory snapshot \r\n\r\n![Dump screenshot](http:\/\/i.imgur.com\/3Yl3L5B.jpg)\r\n\r\n\r\n#### Tested platform\r\n- Android 6.0.0\r\n\r\n","comments":["Sorry, wrong button"],"labels":["bug","input"]},{"title":"Images with an alpha gradient display banding when loaded as part of an atlas in GWT.","body":"#### Issue details\r\nImages with an alpha gradient display banding when loaded as part of an atlas. The top image is the region from an `TextureAtlas`. The bottom image is the same png loaded as a `Texture`.\r\n\r\n![image](https:\/\/cloud.githubusercontent.com\/assets\/6973062\/23950815\/2e0b3390-0984-11e7-8df0-5bff1afddef0.png)\r\n\r\nRelated to [issue 3782](https:\/\/github.com\/libgdx\/libgdx\/issues\/3782)\r\n\r\n#### Reproduction steps\/code\r\n\r\nAtlas files attached.\r\n\r\n    public class MyGdxGame extends ApplicationAdapter {\r\n        SpriteBatch batch;\r\n        private TextureAtlas.AtlasRegion cloudRegion;\r\n        private Texture cloudTexture;\r\n\r\n        @Override\r\n        public void create() {\r\n            batch = new SpriteBatch();\r\n            TextureAtlas atlas = new TextureAtlas(Gdx.files.internal(\"background-pack.txt\"));\r\n            cloudRegion = atlas.findRegion(\"cloud\");\r\n            cloudTexture = new Texture(\"background-pack-1.png\");\r\n        }\r\n\r\n        @Override\r\n        public void render() {\r\n            Gdx.gl.glClearColor(0, 0, 0, 0);\r\n            Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\r\n\r\n            batch.begin();\r\n            batch.setBlendFunction(GL20.GL_ONE, GL20.GL_ONE_MINUS_SRC_ALPHA);\r\n            batch.draw(cloudTexture,\r\n                    0,\r\n                    0);\r\n\r\n            batch.draw(cloudRegion,\r\n                    0,\r\n                    cloudTexture.getHeight());\r\n\r\n\r\n            batch.end();\r\n        }\r\n    }\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.6\r\n[background-pack.txt](https:\/\/github.com\/libgdx\/libgdx\/files\/844621\/background-pack.txt)\r\n![background-pack-1](https:\/\/cloud.githubusercontent.com\/assets\/6973062\/23950798\/1f156144-0984-11e7-955c-d658a271e7f8.png)\r\n\r\n\r\n\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [x] HTML\/GWT\r\n- [ ] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":[],"labels":["gwt","GL"]},{"title":"Freeze issues with \"ultrapolling\" mouse","body":"#### Issue details\r\nSome of the gaming mouses have \"ultrapolling\" feature, with 1ms response time.\r\n\r\nApparently, with this feature enabled, Libgdx experiences 200-500ms freezes over time, if the mouse gets moved.\r\n\r\nIn order to find out why, I did some profiling\r\n<img height=\"300\" alt=\"__2\" src=\"https:\/\/cloud.githubusercontent.com\/assets\/1666014\/23096669\/f9047eee-f629-11e6-982e-d919c1856bd1.png\"> <img height=\"300\" alt=\"__1\" src=\"https:\/\/cloud.githubusercontent.com\/assets\/1666014\/23096666\/ee16e878-f629-11e6-910d-4775ca652ab9.png\">\r\nIn the images below, the first number in max delta time (600ms freeze), the second one is the average (100ms).\r\n\r\nBut after detailed research, I found the problem is not really in the game itself. I put following profiling code in the `mainLoop` ([at this line](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/backends\/gdx-backend-lwjgl\/src\/com\/badlogic\/gdx\/backends\/lwjgl\/LwjglApplication.java#L158)):\r\n```java\r\nwhile (running) {\r\n    ...\r\n    _profiling.start();\r\n    Display.processMessages();\r\n    _profiling.end();\r\n    ...\r\n}\r\n```\r\nAnd got this:\r\n<img width=\"221\" alt=\"__3\" src=\"https:\/\/cloud.githubusercontent.com\/assets\/1666014\/23096754\/bb060a2a-f62b-11e6-8b0c-f59e63d9434a.png\">\r\n\r\nAs you can see here, `messages` graph is almost equal to the `dt`. In this example, `messages` is `Display.processMessages()` and `dt` is just delta time.\r\n\r\nI understand that `processMessages` is `lwjgl` zone, but I was simply unable to google anything like this. Taking into account that first lwjgl is dead, I decided to discuss this issue here instead.\r\n\r\nAlso, I understand that you simple may not have such mouse, but yet any information regarding this issue would be highly appreciated!\r\n\r\n#### Thoughts\r\nProbably, that's because `lwjgl` Mouse `readBuffer` gets quickly overflowed.\r\n\r\n#### Reproduction steps\/code\r\nThe issue is reproducible on Windows\/`lwjgl` using ultrapolling mouse (for example, \"[Razer mouse abyssus](https:\/\/www.razerzone.com\/store\/razer-abyssus-v2)\") with ultrapolling mode enabled (1000hz).\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.6\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [x] Windows\r\n- [ ] Linux\r\n- [ ] MacOS\r\n","comments":["Is it known if LWJGL3 is affected by this? If LWJGL3 is unaffected and LWJGL2 isn't easy to fix, I vote to close the issue, since that's being retired as the default backend and it's been so long with there never being any activity here.","I can confirm that this happens on LWJGL3 backend as well. 1000hz mouse rapid movement -> massive lag spikes. Set to 125hz and its fine. \r\n\r\nAs far as I can tell this is a problem on GLFW side, as commenting out `GLFW.glfwSetCursorPosCallback(window.getWindowHandle(), cursorPosCallback);` in `DefaultLwjgl3Input` makes little difference. Tho GDX `InputEventQueue` being filled with `skip` events slow things down a bit as well. \r\nMight be Windows specific.\r\n\r\nPerhaps running render on separate thread help? Eg https:\/\/github.com\/LWJGL\/lwjgl3-demos\/blob\/main\/src\/org\/lwjgl\/demo\/opengl\/glfw\/Multithreaded.java\r\n\r\n"],"labels":["desktop","need more info","input"]},{"title":"Problems with a BitmapFont generated by Hiero","body":"I tried to change the font of an existing skin and repeatedly got an exception like the one below, after adding some lines to a modified `TextArea` inside a `ScrollPane`. I assumed that the `BitmapFont` generated by Hiero caused the exception, so I built an SSCCE with the default skin and replaced the font of the `TextArea` with the desired one and I could reproduce the error.\r\n\r\n**Edit 1:** I tried to generate the font at runtime with the `FreeTypeFontGenerator` and it executed without exception. But I can't use the generator in my productive code, since I'm targeting web.\r\n\r\n**Edit 2:** The `TextArea` modifications have nothing to do with the error. I simplified the test and could reproduce the exception.\r\n\r\n**Edit 3:** Fonts generated with the `FreeTypeFontGenerator` that are stored with the [BitmapFontWriter](https:\/\/github.com\/libgdx\/libgdx\/wiki\/Hiero#bitmapfontwriter) also result in an excpetion.\r\nBut fonts generated with [BMFont](https:\/\/github.com\/libgdx\/libgdx\/wiki\/Hiero#bmfont) work error free. [This](https:\/\/github.com\/LennartH\/libgdx-test\/blob\/master\/tools\/BMFont-config.bmfc) was the used configuration. \r\n\r\n#### Reproduction steps\r\nThe SSCCE can be found in my [test repository](https:\/\/github.com\/LennartH\/libgdx-test).\r\nTo reproduce the error run `com.upseil.prototype.TextAreaHieroFontTest` and press the button `Add new line` until the error occurs (usually once).\r\n\r\n#### Assets and code\r\nThe used font is `assets\/font\/lucida-console-15.fnt` and was generated using the settings:\r\n\r\n - System Font: Lucida Console\r\n - Size: 15\r\n - Gamma: 1.8\r\n - Mono: Unchecked\r\n - Rendering: FreeType\r\n - Padding: (1, 1, 1, 1), X=0, Y=0\r\n\r\nCode of the test class:\r\n```java\r\nimport com.badlogic.gdx.ApplicationAdapter;\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.backends.lwjgl.LwjglApplication;\r\nimport com.badlogic.gdx.backends.lwjgl.LwjglApplicationConfiguration;\r\nimport com.badlogic.gdx.graphics.GL20;\r\nimport com.badlogic.gdx.graphics.g2d.BitmapFont;\r\nimport com.badlogic.gdx.scenes.scene2d.Actor;\r\nimport com.badlogic.gdx.scenes.scene2d.Stage;\r\nimport com.badlogic.gdx.scenes.scene2d.ui.Button;\r\nimport com.badlogic.gdx.scenes.scene2d.ui.Skin;\r\nimport com.badlogic.gdx.scenes.scene2d.ui.Table;\r\nimport com.badlogic.gdx.scenes.scene2d.ui.TextArea;\r\nimport com.badlogic.gdx.scenes.scene2d.ui.TextButton;\r\nimport com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;\r\nimport com.badlogic.gdx.utils.viewport.ScreenViewport;\r\n\r\npublic class TextAreaHieroFontTest extends ApplicationAdapter {\r\n    Stage stage;\r\n    int lineCounter;\r\n\r\n    public void create () {\r\n        stage = new Stage(new ScreenViewport());\r\n        Skin skin = new Skin(Gdx.files.internal(\"skin\/default\/uiskin.json\"));\r\n        Gdx.input.setInputProcessor(stage);\r\n\r\n        Table container = new Table();\r\n        stage.addActor(container);\r\n        container.setFillParent(true);\r\n        container.pad(10).defaults().expandX().fillX().space(4);\r\n\r\n        final TextArea textArea = new TextArea(\"Initial line.\", skin);\r\n        textArea.setDisabled(true);\r\n        textArea.getStyle().font = new BitmapFont(Gdx.files.internal(\"font\/lucida-console-15.fnt\"));\r\n        \/\/ Fonts generated with BMFont also work\r\n\/\/        textArea.getStyle().font = new BitmapFont(Gdx.files.internal(\"font\/BMF-15\/lucida-console-15.fnt\"));\r\n        \/\/ This works\r\n\/\/        FreeTypeFontGenerator fontGenerator = new FreeTypeFontGenerator(Gdx.files.internal(\"font\/lucida-console.ttf\"));\r\n\/\/        FreeTypeFontParameter fontParameter = new FreeTypeFontParameter();\r\n\/\/        fontParameter.size = 15;\r\n\/\/        textArea.getStyle().font = fontGenerator.generateFont(fontParameter);\r\n\/\/        fontGenerator.dispose();\r\n\r\n        Button addLineButton = new TextButton(\"Add new line\", skin);\r\n        addLineButton.addListener(new ChangeListener() {\r\n            @Override\r\n            public void changed(ChangeEvent event, Actor actor) {\r\n                textArea.appendText(\"\\nLine \" + lineCounter++);\r\n\/\/                textArea.setCursorPosition(0); \/\/ This prevents the error\r\n            }\r\n        });\r\n        container.add(addLineButton).colspan(2);\r\n        \r\n        container.row().height(350);\r\n        container.add(textArea);\r\n        container.debugAll();\r\n    }\r\n\r\n    public void render () {\r\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\r\n        stage.act(Gdx.graphics.getDeltaTime());\r\n        stage.draw();\r\n    }\r\n\r\n    public void resize (int width, int height) {\r\n        \/\/ Pass false to not modify the camera position.\r\n        stage.getViewport().update(width, height, true);\r\n    }\r\n\r\n    public static void main (String[] args) throws Exception {\r\n        LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();\r\n        config.width = 1024;\r\n        config.height = 768;\r\n        new LwjglApplication(new TextAreaHieroFontTest(), config);\r\n    }\r\n}\r\n```\r\n\r\n#### Versions\r\nLibGDX: 1.9.6-SNAPSHOT and 1.9.5\r\nLibGDX-Tools: 1.9.5\r\n\r\n#### Stacktrace\r\n```java\r\nException in thread \"LWJGL Application\" java.lang.ArrayIndexOutOfBoundsException: 19\r\n\tat com.badlogic.gdx.scenes.scene2d.ui.TextField.calculateOffsets(TextField.java:229)\r\n\tat com.badlogic.gdx.scenes.scene2d.ui.TextArea.calculateOffsets(TextArea.java:263)\r\n\tat com.badlogic.gdx.scenes.scene2d.ui.TextField.draw(TextField.java:318)\r\n\tat com.badlogic.gdx.scenes.scene2d.Group.drawChildren(Group.java:110)\r\n\tat com.badlogic.gdx.scenes.scene2d.ui.ScrollPane.draw(ScrollPane.java:588)\r\n\tat com.badlogic.gdx.scenes.scene2d.Group.drawChildren(Group.java:123)\r\n\tat com.badlogic.gdx.scenes.scene2d.Group.draw(Group.java:57)\r\n\tat com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup.draw(WidgetGroup.java:163)\r\n\tat com.badlogic.gdx.scenes.scene2d.ui.Table.draw(Table.java:119)\r\n\tat com.badlogic.gdx.scenes.scene2d.Group.drawChildren(Group.java:110)\r\n\tat com.badlogic.gdx.scenes.scene2d.Group.draw(Group.java:57)\r\n\tat com.badlogic.gdx.scenes.scene2d.Stage.draw(Stage.java:128)\r\n\tat com.upseil.prototype.AutoScrollingTextAreaFontTest.render(AutoScrollingTextAreaFontTest.java:73)\r\n\tat com.badlogic.gdx.backends.lwjgl.LwjglApplication.mainLoop(LwjglApplication.java:225)\r\n\tat com.badlogic.gdx.backends.lwjgl.LwjglApplication$1.run(LwjglApplication.java:126)\r\n\r\n```\r\n\r\n#### Affected platforms\r\nI assume all, but was only tested on Windows\r\n","comments":["While working on my project, I found another work around for this problem, by setting the text areas curser position to 0, after adding the text. I adjusted the minimal example.\r\nThis is also a workaround for #4561.","I also ran into this, and found a better workaround. Open up the `.fnt` file generated by Hiero, delete the character definitions for chars `0` and `10`, and reduce `chars count` accordingly.\r\n\r\nIn my case, I went from this...\r\n\r\n```\r\ninfo face=\"Perfect DOS VGA 437\" size=16 bold=0 italic=0 charset=\"\" unicode=0 stretchH=100 smooth=1 aa=1 padding=1,1,1,1 spacing=-2,-2\r\ncommon lineHeight=16 base=12 scaleW=512 scaleH=512 pages=1 packed=0\r\npage id=0 file=\"vga437.png\"\r\nchars count=98\r\nchar id=0       x=0    y=0    width=0    height=0    xoffset=-1   yoffset=0    xadvance=9    page=0    chnl=0 \r\nchar id=10      x=0    y=0    width=0    height=0    xoffset=-1   yoffset=0    xadvance=0    page=0    chnl=0 \r\nchar id=32      x=0    y=0    width=0    height=0    xoffset=-1   yoffset=0    xadvance=9    page=0    chnl=0 \r\n...\r\n```\r\n\r\n... to this:\r\n\r\n```\r\ninfo face=\"Perfect DOS VGA 437\" size=16 bold=0 italic=0 charset=\"\" unicode=0 stretchH=100 smooth=1 aa=1 padding=1,1,1,1 spacing=-2,-2\r\ncommon lineHeight=16 base=12 scaleW=512 scaleH=512 pages=1 packed=0\r\npage id=0 file=\"vga437.png\"\r\nchars count=96\r\nchar id=32      x=0    y=0    width=0    height=0    xoffset=-1   yoffset=0    xadvance=9    page=0    chnl=0\r\n...\r\n```\r\n\r\nSo this is deleting _both_ the null character (`\\0`) and the newline character (`\\n`). Deleting only one of them is not enough. Maybe that provides a clue about this issue.","I think the problem is in `TextField#updateDisplayText`.\r\n\r\nIn a single-line `TextField`, the `glyphPositions` array holds the x position where each glyph starts, and this array has the same length as the text of the field.\r\n\r\nIn a multi-line `TextArea`, however, I'm not sure what `glyphPositions` should even mean anymore. In practice, it holds the x position where each glyph starts, but ignoring line breaks, and _only for glyphs in the first run_:\r\n\r\n\t\tif (layout.runs.size > 0) {\r\n\t\t\tGlyphRun run = layout.runs.first();\r\n\t\t\tFloatArray xAdvances = run.xAdvances;\r\n\t\t\tfontOffset = xAdvances.first();\r\n\t\t\tfor (int i = 1, n = xAdvances.size; i < n; i++) {\r\n\t\t\t\tglyphPositions.add(x);\r\n\t\t\t\tx += xAdvances.get(i);\r\n\t\t\t}\r\n                }\r\n\r\nWith the BMFont-generated font, all glyphs end up in a single run, and everything is fine. But with the font generated by Hiero, the two lines end up in different runs, so `glyphPositions` contains only the first line. So no wonder we get `OutOfBoundsExceptions` everywhere, because `glyphPositions` is assumed to be as long as `text` in several places. The \"need\" for commit adaf504f0267ef7adf5106e5ea7d65c8c0276e3b might also have been a symptom of this.\r\n\r\n**I suppose this could be fixed by going through all runs, instead of processing just the first.** The numbers in `glyphPositions` won't really make sense, but they already don't, and apparently that's fine.\r\n\r\nSo why does this depend on the font? I.e. why do some fonts generate just one `GlyphRun` and others generate one per line? With the BMFont font, `TextField#updateDisplayText` replaces the `\\n` with a space, because it's not in the font. The `GlyphLayout` class never even gets to see the line break. With the Hiero font, however, `data.hasGlyph('\\n')` returns `true`, because character 10 actually _is_ in the `BitmapFont`. And if we remove it, `BitmapFont` can still fall back to any characters \u2264 0, which provide `BitmapFontData#missingGlyph`. So that explains why I needed to remove both character 0 and character 10.\r\n\r\nFor the actual fix, I'll let @NathanSweet chime in, because this code is rather finicky and I'm afraid I'd break more than I'd fix.","I have just come across this very problem, but I am using FreeTypeFontGenerator, so I'm not sure how I can remove characters 0 and 10.\r\n\r\nIs there any other workaround available?\r\n\r\ndata.hasGlyph('\\n') actually returns false for me, but it still has the error above.\r\nalso when I look at data.glyphs[0][0] and data.glyphs[0][10], 10 is null, but 0 has something in it (two unicode ? that I can't tell what they are)\r\n\r\nThanks for your insightful work on this @ttencate ","You could try fixing it by copying `TextArea` to your own project, renaming it to `PatchedTextArea` (keep it in the same package though), and overriding `TextField#updateDisplayText` like this:\r\n\r\n\t@Override\r\n\tvoid updateDisplayText () {\r\n\t\tBitmapFont font = style.font;\r\n\t\tBitmapFontData data = font.getData();\r\n\t\tString text = this.text;\r\n\t\tint textLength = text.length();\r\n\r\n\t\tStringBuilder buffer = new StringBuilder();\r\n\t\tfor (int i = 0; i < textLength; i++) {\r\n\t\t\tchar c = text.charAt(i);\r\n\t\t\tbuffer.append(data.hasGlyph(c) ? c : ' ');\r\n\t\t}\r\n\t\tString newDisplayText = buffer.toString();\r\n\r\n\t\tif (passwordMode && data.hasGlyph(passwordCharacter)) {\r\n\t\t\tif (passwordBuffer == null) passwordBuffer = new StringBuilder(newDisplayText.length());\r\n\t\t\tif (passwordBuffer.length() > textLength)\r\n\t\t\t\tpasswordBuffer.setLength(textLength);\r\n\t\t\telse {\r\n\t\t\t\tfor (int i = passwordBuffer.length(); i < textLength; i++)\r\n\t\t\t\t\tpasswordBuffer.append(passwordCharacter);\r\n\t\t\t}\r\n\t\t\tdisplayText = passwordBuffer;\r\n\t\t} else\r\n\t\t\tdisplayText = newDisplayText;\r\n\r\n\t\tlayout.setText(font, displayText);\r\n\t\tglyphPositions.clear();\r\n\t\tfloat x = 0;\r\n\r\n\t\t\/\/ BEGIN CHANGES\r\n\r\n\t\tif (layout.runs.size > 0) {\r\n\t\t\tfontOffset = layout.runs.first().xAdvances.first();\r\n\t\t\tfor (GlyphRun run : layout.runs) {\r\n\t\t\t\tFloatArray xAdvances = run.xAdvances;\r\n\t\t\t\tfor (int i = 1, n = xAdvances.size; i < n; i++) {\r\n\t\t\t\t\tglyphPositions.add(x);\r\n\t\t\t\t\tx += xAdvances.get(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else\r\n\t\t\tfontOffset = 0;\r\n\r\n\t\t\/\/ END CHANGES\r\n\r\n\t\tglyphPositions.add(x);\r\n\r\n\t\tif (selectionStart > newDisplayText.length()) selectionStart = textLength;\r\n\t}\r\n\r\nI haven't tested it but that's the general idea. If it works, you could even make a pull request for it (it should probably be fixed directly in `TextField` then though).","Thanks for answering so quickly, I'll see if I can get it working during my lunch hour.","Just to answer, I still can't get this to work at all, even with ttencates help."],"labels":["tools","fonts"]},{"title":"[Bug] Gdx.input.isKey(Just)Pressed(Keys.BACKSLASH), doesn't seem to work on Linux Mint 18 KDE Edition","body":"#### Issue details\r\nGdx.input.isKeyJustPressed(Keys.BACKSLASH) and Gdx.input.isKeyPressed(Keys.BACKSLASH)   wont work on Linux Mint 18 KDE Edition, on windows it works fine, but on Linux it doesn't give any output. KeyUp and KeyDown from InputProcessor won't respond to backslash although KeyTyped will respond appropriately, thus a workaround is to check when KeyTyped returns '\\\\'.\r\n\r\nI tested this with the same keyboard layout and using Linux Mint 18 KDE Edition and Windows 10\r\n\r\nThe backslash will work to open (for example) CSGO's console.\r\n\r\n#### Reproduction steps\/code\r\n```\r\nimport com.badlogic.gdx.ApplicationAdapter;\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.Input.Keys;\r\nimport com.badlogic.gdx.graphics.GL20;\r\nimport com.badlogic.gdx.graphics.Texture;\r\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\n\r\npublic class DasTesten extends ApplicationAdapter {\r\n\tSpriteBatch batch;\r\n\tTexture img;\r\n\t\r\n\t\/\/When false, displays libgdx logo, when true it won't\r\n\tprivate boolean testen = false;\r\n\t\r\n\t@Override\r\n\tpublic void create () {\r\n\t\tbatch = new SpriteBatch();\r\n\t\timg = new Texture(\"badlogic.jpg\");\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void render () {\r\n\t\tGdx.gl.glClearColor(1, 0, 0, 1);\r\n\t\tGdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\r\n\r\n\t\t\/\/Test #1, won't work on Linux (Tested on Linux Mint 18 KDE Edition)\r\n\t\tif(Gdx.input.isKeyJustPressed(Keys.BACKSLASH)){\r\n\t\t\ttesten = !testen;\r\n\t\t}\r\n\t\t\r\n\t\t\/\/Test #2, must work everywhere\r\n\t\tif(Gdx.input.isKeyJustPressed(Keys.A)){\r\n\t\t\ttesten = !testen;\r\n\t\t}\r\n\t\t\r\n\t\t\/\/The outcome\r\n\t\tif(!testen){\r\n\t\t\tbatch.begin();\r\n\t\t\tbatch.draw(img, 0, 0);\r\n\t\t\tbatch.end();\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void dispose () {\r\n\t\tbatch.dispose();\r\n\t\timg.dispose();\r\n\t}\r\n}\r\n```\r\nThen try pressing backslash (I am using an PT-PT Keyboard layout so the backslash key is above tab)\r\n\r\n#### Version of LibGDX and\/or relevant dependencies\r\n1.9.5\r\n\r\n#### Stacktrace\r\nN\/A\r\n\r\n#### Please select the affected platforms\r\n- [ ] Android\r\n- [ ] iOS (robovm)\r\n- [ ] iOS (MOE)\r\n- [ ] HTML\/GWT\r\n- [ ] Windows\r\n- [x] Linux\r\n- [ ] MacOS\r\n","comments":["Same code doesn't work on Ubuntu 16.01 LTS too\r\n","It listens to ' \\ ' pressed , but return keycode = '0' when checked using input processor , Strangely \r\nif we try it as \r\n\r\n\"if(Gdx.input.isKeyJustPressed(Keys.BACKSLASH)||Gdx.input.isKeyJustPressed(Keys.UNKNOWN))\"\r\n\r\n the method still does not work on Ubuntu , \r\n(key code of UNKNOWN being '0')\r\nAlthough , the keyCode obtained from InputProcessor  , when passed into Keys.toString(int) returns \"Unknown\" , which shows that they key code matches with Keys.UNKNOWN. ","Which backend is this? \r\nLWJGL 2 or 3?","2","No updates on this?","As seen [here](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/backends\/gdx-backend-lwjgl\/src\/com\/badlogic\/gdx\/backends\/lwjgl\/LwjglInput.java#L900), justPressedKeys is not updated for `keyCode` of `0`, which explains why your workaround with `isKeyJustPressed(Keys.UNKNOWN)` doesn't work.\r\n\r\nWhat happens here is that libGDX has no [known mapping](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/backends\/gdx-backend-lwjgl\/src\/com\/badlogic\/gdx\/backends\/lwjgl\/LwjglInput.java#L372) from the Lwjgl reported `keyCode` to libGDX's `keyCode`, so it returns `0`. I suspect that this happens because Lwjgl doesn't report the expected keyCode for backslash, but some other, possibly obscure, key. This happens often on foreign keyboard layouts (speaking from personal experience).\r\n\r\nThe solution would be to check which `keyCode` Lwjgl reports (try placing a breakpoint into the [`getGdxKeyCode(int)`](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/backends\/gdx-backend-lwjgl\/src\/com\/badlogic\/gdx\/backends\/lwjgl\/LwjglInput.java#L372) function), determining which [key](http:\/\/legacy.lwjgl.org\/javadoc\/constant-values.html) it really reports and creating the appropriate mapping in libGDX.\r\n\r\nAfter that is done, you will have to listen to that code instead of `BACKSLASH`, but it should work. ","Same behaviour on LWJGL3. If I press the backslash key to the left of the Z key, I get a `keyCode` of `0`. But when pressing the hash key to the left of Enter, I get `73` (backslash). Could this just be a keyboard layouts issue? In the United States layout, my backslash doesn't exist - notice how there is one fewer key.\r\n\r\nUK|US\r\n-|-\r\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/d\/da\/KB_United_Kingdom.svg)|![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/d\/da\/KB_United_States.svg)\r\n\r\nI don't think this tells us anything, as the numbers don't align, but JavaScript uses code `IntlBackslash` (`220`) for my backslash. The American backslash is 222 (Chrome) or 163 (Firefox).","Any news about this? I'm having the same behaviour, spacebar, arrow keys, escape... all returning as `0` on the `InputProcessor.keyDown`."],"labels":["bug","desktop"]},{"title":"setAlignment method works with textfield but doesnot work with textarea","body":"when i define a textfield like that:\r\n\r\n```\r\nTextField tf = new TextField(\"\", skin);\r\ntf.setMessageText(\"\u0627\u0643\u062a\u0628 \u0634\u064a\u0626\u0627\");\r\ntf.setAlignment(Align.right);\r\n```\r\n\r\ni get the message-text aligned to right, and when i type some text it's aligned to right too and all sound good.\r\n\r\nBut the problem when i define a textarea like that:\r\n\r\n```\r\nTextArea text = new TextArea(\"\", skin);\r\ntext.setMessageText(\"\u0627\u0643\u062a\u0628 \u0634\u064a\u0626\u0627\u064b\");\r\ntext.setAlignment(Align.right);\r\n```\r\nthe message-text was aligned to right, but when i type some text it's aligned to left\r\n\r\nso why the setAlignment method works with textfield but doesnot work with textarea ??\r\nhow to make the content of the textarea aligned to right ??\r\n\r\nany hint please,,","comments":["I found a workaround and a possible fix for this. Change the line in TextArea.java @ line 279 to this:\r\n\r\n`font.draw(batch, displayText, x + textOffset, y + offsetY - topPadding, linesBreak.items[i], linesBreak.items[i + 1], 0, Align.left, false);`\r\n\r\ntextOffset was missing from font.draw which basically contains the offset that is calculated when you set the alignment. It is there in the TextField font.draw call but not in the TextArea call. I hope this fixes the issue.\r\n\r\nOn another note. Text padding within the TextiField is a nice to have feature also which is missing at the moment. I copied the code and made a custom implementation to accomodate this. Hopefully someday this will be added to the official version also.\r\n\r\nCheers,\r\nKari\r\n"],"labels":["scene2d"]},{"title":"Right To Left Alignment ","body":"I did support Arabic in libgdx and I'm trying now to play with the context layout to do **Right To Left Alignment** I'm using TextArea ui for testing I did new implementation on TextArea and it works fine (Right To Left and Left To Right) but I don't wanna implement all Sence2d ui objects (TextField,Label and etc..) to do that,  Just I wanna make it as a singleton I traced the code and I can see there is a method called  **setText** in **GlyphLayout.java** \r\n\r\npublic void **setText**(BitmapFont font, CharSequence str, int start, int end, Color color, float targetWidth, int halign, boolean wrap, String truncate) \r\n\r\nbut the problem here I got the **targetWidth parameter always  equal 0** \r\nwhen I traced the code from the **TextArea.java** to the **GlyphLayout.java**\r\nint the **drawText** method in **TextArea.java** I can see libgdx is passing **targetWidth =0 and Align.left**\r\n\r\n**TextArea.java**\r\n@Override\r\nprotected void **drawText** (Batch batch, BitmapFont font, float x, float y) {\r\nfloat offsetY = 0;\r\nfor (int i = firstLineShowing * 2; i < (firstLineShowing + linesShowing) * 2 && i < linesBreak.size; i += 2) {\r\nfont.draw(batch, displayText, x, y + offsetY, linesBreak.items[i], linesBreak.items[i + 1], **0, Align.left**, false);\r\noffsetY -= font.getLineHeight();\r\n}\r\n}\r\n\r\n\r\nMy Question Now:\r\n\r\nHow did **setText** calculate the max run width to wrapping text if exceed the TargetWidth(TextArea) width?   \r\n\r\nfor example \r\nif I wrote this sentence in the TextArea \"hello world, I'm **using  libgdx.**\"\r\n\r\nthe Result will be \r\n\r\n   **_TextArea_** \r\n_..........................._\r\n | hello world, I'm |\r\n | using  libgdx..... |\r\n_..........................._\r\nHow \"**using libgdx.**\" wrapped to the next line **while libgdx passing 0 TargetWidth**?\r\n\r\nSo any way to get the real target width from here **setText** method from **GlyphLayout.java**.\r\n\r\nnotes:\r\nplatforms: Linux\r\nlibgdx version=1.9.2\r\n\r\nThanks & Regards","comments":["It's very unclear what the issue is you are reporting (if any). Please include the required information as you were requested when opening this issue, most importantly a SSCCE. See: \r\nhttps:\/\/github.com\/libgdx\/libgdx\/wiki\/More-Info","**First**\r\n_____\r\n\r\nI need to do new implementation from the Glyphlayout .java\r\nto modify the setText method in it but I'm getting Incorrect parameter values\r\n\r\n```\r\n1. public void setText(BitmapFont font, CharSequence str, int start, int end, \r\n2.  Color color, float targetWidth,int halign, boolean wrap, String truncate) {\r\n3. ....\r\n4. }\r\n```\r\n**The Problem here**\r\n\r\n I'm getting **targetWidth always equal 0**\r\nand **Alignment is equal Align.left** when I tested it with TextArea ui\r\n\r\n**(1)**\r\nTextArea.java\r\n\r\nKindly, Look at the line No. 7 the last three parameters **0,Align.left,false** \r\nWhy didn't pass the correct **TextArea line width** instead of **0**?!\r\nWhy didn't pass the correct **TextArea alignment** instead of **Align.left**?!\r\n**Incorrect parameters :-1:** \r\n```\r\n1. @Override\r\n2. protected void drawText (Batch batch, BitmapFont font, float x, float y) {\r\n3. float offsetY = 0;\r\n4. for (int i = firstLineShowing * 2; i < (firstLineShowing + linesShowing) * 2 &&\r\n5.  i < linesBreak.size; i += 2) {\r\n6. font.draw(batch, displayText, \r\n7. x, y + offsetY, linesBreak.items[i], linesBreak.items[i + 1],0 ,Align.left,false);   \r\n8. offsetY -= font.getLineHeight();\r\n9. }\r\n10. }\r\n```\r\n\r\n**(2)**\r\nTextField.java\r\n\r\nSame issue here also\r\nKindly, Look at the line No. 4 the last three parameters **0,Align.left,false** \r\nWhy didn't pass the correct **TextField line width** instead of **0**?!\r\nWhy didn't pass the correct **TextField alignment** instead of **Align.left**?!\r\n**Incorrect parameters :-1:** \r\n```\r\n1. protected void drawText(Batch batch, BitmapFont font, float x, float y) {\r\n2. font.draw(batch, displayText, x + textOffset, y, visibleTextStart, visibleTextEnd, \r\n4. 0, Align.left, false);\r\n3. }\r\n```\r\n\r\n**(3)**\r\nTextField.java\r\n\r\nKindly, Look at the line No. 6 the last four parameters **, width - bgLeftWidth - bgRightWidth, textHAlign, false, \"...\"** \r\n**Correct parameters :+1:** \r\n```\r\n1.  @Override\r\n2.  public void draw(Batch batch, float parentAlpha) {\r\n3.  ..\r\n4.  messageFont.draw(batch, messageText, x + bgLeftWidth, \r\n5. y + textY + yOffset, 0,messageText.length()\r\n6. , width - bgLeftWidth - bgRightWidth, textHAlign, false, \"...\");\r\n7.  ..\r\n8.  }\r\n\r\n```\r\nSo I hope it's clear now.\r\n\r\n\r\nWhy are you passing Wrong parameters on the **(1) & (2)** above while I can see you are passing the Correct parameters in the  **(3)**?\r\n\r\nI think this is a bug from your side.\r\n\r\n\r\n **Second**\r\n_____\r\n\r\n**TextArea setAlignment(Align.right) is buggy** try :\r\n```\r\nTextArea txtArea = new TextArea(\"\", skin);\r\ntxtArea.setMessageText(\"write a message\");\r\ntxtArea.setAlignment(Align.right);\r\n```\r\nresult:\r\nthe message-text \"write a message\" will align to Right :+1:  \r\nbut when I Typed some text the alignment Automatically changed to Left :-1: \r\n\r\n> Notes: TextField setAlignment(Align.right)\r\n> the message-text is aligned correctly to Right :+1: \r\n> and Typing also is aligned correctly to Right :+1: \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Please can you share the code for arabic support , and thanks"],"labels":["enhancement","fonts"]},{"title":"Quaternion setFromCross is error  when vectors are opposite ","body":"Please ensure you have given all the following requested information in your report.\n#### Issue details\n\nQuaternion setFromCross (final Vector3 v1, final Vector3 v2)\nIf v1 and v2 are exactly opposite, it will return q = [0.0|0.0|0.0|1.0].\n#### Reproduction steps\/code\n\nQuaternion q = new Quaternion();\nq.setFromCross(0, 0, 1, 0, 0, -1);\nSystem.out.println(\"q = \"+q.toString());\n#### Version of LibGDX and\/or relevant dependencies\n\n1.9.4\n#### Please select the affected platforms\n- [x] Android\n","comments":["I fixed it like this :http:\/\/lolengine.net\/blog\/2014\/02\/24\/quaternion-from-two-vectors-final\n\npublic Quaternion setFromCross (final Vector3 v1, final Vector3 v2) {\n\/\/      final float dot = MathUtils.clamp(v1.dot(v2), -1f, 1f);\n\/\/      final float angle = (float)Math.acos(dot);\n\/\/      return setFromAxisRad(v1.y \\* v2.z - v1.z \\* v2.y, v1.z \\* v2.x - v1.x \\* v2.z, v1.x \\* v2.y - v1.y \\* v2.x, angle);\n\n```\n    float norm_u_norm_v = 1f;\n    float real_part = norm_u_norm_v + v1.dot(v2);\n\n    if (real_part < 1.e-6f * norm_u_norm_v){\n        \/* If u and v are exactly opposite, rotate 180 degrees\n         * around an arbitrary orthogonal axis. Axis normalisation\n         * can happen later, when we normalise the quaternion. *\/\n        real_part = 0.0f;\n        if(Math.abs(v1.x) > Math.abs(v1.z)){\n            ans.set(-v1.y, v1.x, 0.f);\n        }else{\n            ans.set(0.f, -v1.z, v1.y);\n        }\n    }else{\n        \/* Otherwise, build quaternion the standard way. *\/\n        ans.set(v1).crs(v2);\n    }\n\n    return set(ans.x, ans.y, ans.z, real_part).nor();\n}\n```\n","So what's the issue?\n","We need special treatment  If v1 and v2 are exactly opposit.\n"],"labels":["bug","core","math"]},{"title":"Incorrect Pixmap scaling","body":"Not sure if it's related to #2923, so I post this as separate issue\n#### Issue details\n\nScaling pixmap down produces much worse quality image than same image scaled with GraphicsMagick. Even if filtering is set to bilinear scaled image looks like it was scaled with nearest filter.\nSample project generates screen like this:\n![screenshot](https:\/\/cloud.githubusercontent.com\/assets\/3284364\/17716837\/cbb2cdd0-640a-11e6-88af-3afb7a68c2c5.png)\nUpper image is full size source image. Lower left image is image scaled with GraphicsMagick. Lower right image is source image scaled with libGDX Pixmap methods.\n#### Reproduction steps\/code\n\nScale image down with Pixmap.drawPixmap.\n[sample project](https:\/\/github.com\/serpent7776\/gdx-pixmap-scaling-issue-sample)\n#### Version of LibGDX and\/or relevant dependencies\n\ntested on libGDX 1.9.2 and 1.9.3\n#### Please select the affected platforms\n- [x] Android\n- [ ] iOS (robovm)\n- [ ] iOS (MOE)\n- [ ] HTML\/GWT\n- [x] Windows\n- [ ] Linux\n- [ ] MacOS\n","comments":[],"labels":["bug"]},{"title":"Fix clang warnings in libgdx C++ code.","body":"#### Issue details\n\nCompiling libgdx C++ code with clang produces a large number of warnings. It would be great to fix or suppress these issues inline.  Used clang 3.6.\n#### Version of LibGDX and\/or relevant dependencies\n\nlibgdx 1.9.3 on Ubuntu.\n#### Stacktrace\n\nSee attached file that contains the list of warnings.\n[libgdx.txt](https:\/\/github.com\/libgdx\/libgdx\/files\/332304\/libgdx.txt)\n#### Please select the affected platforms\n- [ ] Android\n- [ ] iOS (robovm)\n- [ ] iOS (MOE)\n- [ ] HTML\/GWT\n- [ ] Windows\n- [X] Linux\n- [ ] MacOS\n","comments":["90% of these are unused local warnings, which is a side effect from the code generators we use.","https:\/\/android.googlesource.com\/platform\/external\/libgdx\/+\/6b1fb0ce661bec66ca3b77064585fe4e3cc6930a%5E2..6b1fb0ce661bec66ca3b77064585fe4e3cc6930a\/\r\n\r\nCould have told us..."],"labels":["build"]},{"title":"Grayscale png not properly loaded","body":"#### Issue details\n\nI want to use a grayscale image (with palette) like this one: [image](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/f\/fa\/Grayscale_8bits_palette_sample_image.png) | [Format detail](http:\/\/transloadit.imagemagick.org\/MagickStudio\/scripts\/MagickStudio.cgi?CacheID=405480173.984812;SessionID=354a4d35530228b272eb0faf359864cbf74295dba6e7e467af67350ef4586db57c3ae07778c978ff3b55954699a04a63a85263fd2397b59b1f9e7a39a254a34a;Path=\/var\/www\/html\/ImageMagick\/MagickStudio\/workarea\/364f0fde1770e57f00f197508f65a607323dedb764f168ed7ba7ed89320fe0b75f4927bf64045d1097847a17b9221af5e88a72838ac323be8cf6f4b4c351198b;Name=Grayscale_8bits_palette_sample_image;Magick=png;Action=mogrify;ToolType=Identify). \n\nWhen I load this image, `Pixmap.Format` is set to `Alpha`, good! But in my shader, when I sample the alpha channel, it's just white. I tried with `LuminanceAlpha` and `Intensity` on all channels and it's not working either.\n\nWhen loading image with `Texture(FileHandle, Format, Mipmap)`, if I force format to be `RGBA8888`, it works in the alpha channel of my shader! So I have to force the `RGBA8888` with a grayscale image (wasting memory).\n#### Version of LibGDX and\/or relevant dependencies\n\n1.9.3-Snapshot\nOpenglEs3 enabled\n#### Please select the affected platforms\n- [ ] Android\n- [ ] iOS\n- [ ] HTML\/GWT\n- [X] Windows\n- [X] Linux\n- [ ] MacOS\n","comments":["More information on this bug:\n\nIn `GLTexture`, I updated `uploadImageData` with:\n\n```\nGdx.gl.glTexImage2D(target, miplevel, GL30.GL_R8, pixmap.getWidth(), pixmap.getHeight(), 0, GL30.GL_RED, GL30.GL_UNSIGNED_BYTE, pixmap.getPixels());\n```\n\nIf I sample the red channel in my shader, it works!\nSo I think the problem come from the `ALPHA` type not supported with gles3.\n\nALPHA format is deprecated for OpenGL [here](https:\/\/www.opengl.org\/wiki\/Image_Format#Legacy_Image_Formats) but with OpenGLES 3, it should work [here](http:\/\/docs.gl\/es3\/glTexImage2D).\n\nOn desktop, when I enable gl30, do I use OpenGL**ES**3 or OpenGL>3.3 ?\n","I tested it on `GL20` and it works with `GL_ALPHA`.\n\nSo here is the problem :\n\nOn Desktop, `GL_ALPHA`, `GL_INTENSITY` are removed when `useGL30 = true`.\nWe have to use `GL_RED` to be able to fetch the grayscale texture.\n\nCurrently, `GDX2DPixmap` format only supports `GL_ALPHA` and `GL_INTENSITY`, so you can't use grayscale image with gl30 (workaround: force `RGBA8888`).\n\nSolution 1 : **Add support for `GL_RED` in `Gdx2DPixmap` based on gl version.** (very heavy to implement, jni, gwt emulation...)\nSolution 2 : **In `GLTexture`, when uploading texture, convert `GL_ALPHA` with `GL_RED` if gl30.** (very light but dirty)\n","@xoppa @Tom-Ski @MobiDevelop What do you think ?\n","# SSCCE\n\n## Copy [this image](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/f\/fa\/Grayscale_8bits_palette_sample_image.png) into asset folder.\n\n```\npackage com.badlogic.gdx.tests;\n\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.graphics.GL20;\nimport com.badlogic.gdx.graphics.Mesh;\nimport com.badlogic.gdx.graphics.Pixmap;\nimport com.badlogic.gdx.graphics.Pixmap.Format;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.VertexAttribute;\nimport com.badlogic.gdx.graphics.VertexAttributes.Usage;\nimport com.badlogic.gdx.graphics.glutils.ShaderProgram;\nimport com.badlogic.gdx.tests.utils.GdxTest;\n\npublic class GrayscaleTest extends GdxTest {\n    ShaderProgram shader;\n    Texture texture;\n    Mesh mesh;\n\n    @Override\n    public void create () {\n        String vertexShader = \"attribute vec4 a_position;   \\n\" + \"attribute vec2 a_texCoord;   \\n\"\n            + \"varying vec2 v_texCoord;     \\n\" + \"void main()                  \\n\" + \"{                            \\n\"\n            + \"   gl_Position = a_position; \\n\" + \"   v_texCoord = a_texCoord;  \\n\" + \"}                            \\n\";\n\n        String fragmentShader = \"#ifdef GL_ES\\n\" + \"precision mediump float;\\n\" + \"#endif\\n\"\n            + \"varying vec2 v_texCoord;\\n\" + \"uniform sampler2D s_texture;\\n\"\n            + \"void main()\\n\"\n            + \"{\\n\"\n            + \"  gl_FragColor = vec4(vec3(texture2D( s_texture, v_texCoord ).a), 1.0);\\n\"\n            + \"}\\n\";\n        shader = new ShaderProgram(vertexShader, fragmentShader);\n        mesh = new Mesh(true, 4, 6, new VertexAttribute(Usage.Position, 2, \"a_position\"), new VertexAttribute(\n            Usage.TextureCoordinates, 2, \"a_texCoord\"));\n        float[] vertices = {-0.5f, 0.5f, \/\/ Position 0\n            0.0f, 0.0f, \/\/ TexCoord 0\n            -0.5f, -0.5f, \/\/ Position 1\n            0.0f, 1.0f, \/\/ TexCoord 1\n            0.5f, -0.5f, \/\/ Position 2\n            1.0f, 1.0f, \/\/ TexCoord 2\n            0.5f, 0.5f, \/\/ Position 3\n            1.0f, 0.0f \/\/ TexCoord 3\n        };\n        short[] indices = {0, 1, 2, 0, 2, 3};\n        mesh.setVertices(vertices);\n        mesh.setIndices(indices);\n\n        Pixmap pixmap = new Pixmap(Gdx.files.internal(\"test_grayscale.png\"));\n        System.out.println(\"Pixmap format :\"+pixmap.getFormat());\n        texture = new Texture(pixmap);\n        pixmap.dispose();\n    }\n\n    public void render () {\n        Gdx.gl20.glViewport(0, 0, Gdx.graphics.getBackBufferWidth(), Gdx.graphics.getBackBufferHeight());\n        Gdx.gl20.glClear(GL20.GL_COLOR_BUFFER_BIT);\n\n        Gdx.gl20.glActiveTexture(GL20.GL_TEXTURE0);\n        texture.bind();\n\n        shader.begin();\n        shader.setUniformi(\"s_texture\", 0);\n\n        mesh.render(shader, GL20.GL_TRIANGLES);\n\n        shader.end();\n    }\n}\n```\n\nOn Desktop:\n\n### If GL30 enabled => White texture\n\n### If GL30 disabled => Grayscale texture\n","Thanks. Can reproduce on desktop. On desktop OpenGL is always used, the version is configurable in the config. Afaik OpenGL ES 3.0 should be compatible (a subset of) OpenGL 4.3 (not GLSL ES btw). But I guess you found a case where it isn't. I don't have a gles3 android device to test on, so cant verify it indeed works on gles3, but the docs suggest it would. Perhaps someone can verify that?\n\nI don't think there's a good solution for this, as in: we cannot abstract this incompatibility away because it requires modifying the shader. GLES3 adds `GL_RED` though, so I guess the fix would be to add `GL_RED` support when gles3 is used (the html backend doesnt support gles3 yet). It would be up to the user to modify the shader accordingly then.\n","@xoppa Take a look at that: http:\/\/docs.gl\/es3\/glTexParameter\n\nOn gles3 (not on gles2), we can use the  GL_TEXTURE_SWIZZLE_\\* property.\n\nWhat do you think about that ? Where is the best place to use this ?\nAnyway, the default shader is not compatible with gles3-glsl\n","Does the average libGDX user know how to modify the shader?\n\nOn 04\/30\/2016 06:01 PM, Xoppa wrote:\n\n> Thanks. Can reproduce on desktop. On desktop OpenGL is always used, \n> the version is configurable in the config. Afaik OpenGL ES 3.0 should \n> be compatible (a subset of) OpenGL 4.3 (not GLSL ES btw). But I guess \n> you found a case where it isn't. I don't have a gles3 android device \n> to test on, so cant verify it indeed works on gles3, but the docs \n> suggest it would. Perhaps someone can verify that?\n> \n> I don't think there's a good solution for this, as in: we cannot \n> abstract this incompatibility away because it requires modifying the \n> shader. GLES3 adds |GL_RED| though, so I guess the fix would be to add \n> |GL_RED| support when gles3 is used (the html backend doesnt support \n> gles3 yet). It would be up to the user to modify the shader \n> accordingly then.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub \n> https:\/\/github.com\/libgdx\/libgdx\/issues\/4029#issuecomment-215997883\n","Hi np511. If a user don't know how to modify a shader, he shouldn't use gles 3 for now.\n","Yeah swizzle could work. Would have to look into the detail of the implementation, but rather keep it as much at one place as possible. Afaik the default shader works fine on gles3 though.\n",">  If a user don't know how to modify a shader, he shouldn't use gles 3 for now.\n\nReason?\n","@JFixby GLES3 brings only advanced features over GLES2. Someone who is not able to modify a shader won't be able to use these features anyway.\n","Someone who is not able to modify a shader has no business developing games, tbh.","> Someone who is not able to modify a shader has no business developing games, tbh.\r\n\r\nCome now, that is not fair. GLSL is a very odd and finicky language and requires understanding some concepts that someone who makes simple 2D games may have never encountered before. On top of this, WebGL only supports a subset of it's features.\r\n\r\nI myself have been getting help making modifying and tweaking shaders for the first time over the past few months. I'd say one definitely doesn't have to already know how to modify a shader to start developing games.","> GLSL is a very odd and finicky language\r\n\r\nNot much weirder than Java, and certainly much less weirder than C. It doesn't even have any ways to shoot yourself in the foot.\r\nBefore GLSL, one had to write in GPU assembly and this is indeed weird. But this is not needed anymore.\r\n\r\nThese concepts (how GPU programmable pipeline works) are not really hard, it's entirely possible to grok basics in one week if the person already has proper experience in programming in general, I think\u2026 and once that's done, GLSL is pretty much walk in the park, it allows to directly express most things that are needed in shaders and if something is not right, compiler gives reasonable error messages.","So, as far as I can tell, this is a valid issue still, but there's nothing we can do about it... Optimizing for GPU memory usage is not easy. As far as I can tell, there isn't a generally-portable way to load a single-channel image into GPU memory on all platforms (HTML doesn't support GL_RED).\r\n\r\nBut if you want grayscale images for file size reasons:\r\n\r\nIf you're using PNG output color mode 0 (grayscale) or 4 (grayscale with alpha), it seems like PNG compressors can't do as much for file-size with those, and color mode 3 (palette, or indexed color) generally makes a smaller image as long as there is at most one transparent color. So the only reason to prefer 8bpp grayscale over 8bpp palette is if the image is so tiny that the palette takes up a significant part of the file, and since we had better be using texture atlases, that should never happen in a real game. Shaders won't ever interact with a PNG directly; they only see what has been loaded onto the GPU, and if the PNG was palette-based with 256 shades of gray, the GPU will have the same contents as if it had loaded a grayscale PNG, if both using the same format. \r\n\r\n I am able to load [this 200-something-color paletted atlas](https:\/\/github.com\/tommyettinger\/ColorGuard\/blob\/master\/assets\/Iso_Mini.png) using RGBA8888 format specified in the atlas, and at least that works on HTML and desktop. I might be able to use RGB888. This does use more memory on the GPU than a single-channel format, but the portability is important for me.\r\n\r\nI typically use [PNGOUT](http:\/\/www.advsys.net\/ken\/utils.htm) to losslessly compress atlases. It's kinda slow, but a lot faster than [zopfliPNG](https:\/\/github.com\/google\/zopfli\/blob\/master\/README.zopflipng), and according to its readme, zopfliPNG only gets 0.5% smaller file sizes typically.\r\n\r\nBack to the issue at hand, memory usage, I think xoppa answered this well 4 years ago:\r\n\r\n> I don't think there's a good solution for this, as in: we cannot abstract this incompatibility away because it requires modifying the shader. GLES3 adds GL_RED though, so I guess the fix would be to add GL_RED support when gles3 is used (the html backend doesnt support gles3 yet). It would be up to the user to modify the shader accordingly then.\r\n\r\nThere hasn't been any PR or similar activity trying to implement the complicated-looking swizzle code, but if someone was willing to write one without breaking compatibility, I would absolutely merge that PR. I'll leave this issue open for now; it isn't completely resolved without someone maybe partially trying to implement swizzling on GLES 3.0 and reporting back whether it's feasible.","> I typically use PNGOUT to losslessly compress atlases.\r\n\r\n@tommyettinger FWIW, I haven't tried PNGOUT but [oxipng](https:\/\/github.com\/shssoichiro\/oxipng) works well and is fast."],"labels":["GL"]},{"title":"ParticleEmitter.update doesn't accept negative values","body":"Please ensure you have given all the following requested information in your report.\n#### Issue details\n\nI'm trying to make an Action that produce particles, this is successful with the default liner Interpolation, however, using other Interpolations like Bounce would fail because the calculation of the delta will be sometimes negative !  i.e. this will not work (ParticleEmitter.update(-0.16)) and will freeze the particles for each frame with such value.\n\nIt would have also been a great if we can just set the time, i.e. setTime(...);\n#### Reproduction steps\/code\n\n```\n    @Override\n    protected void update(float percent) {\n        float particleEffectTime = getDuration() * percent;\n        float delta = particleEffectTime - particleEffectLastTime;\n        for (int i = effects.size - 1; i >= 0; i--) {\n            PooledEffect effect = effects.get(i);\n            if (percent == 1.0f) {\n                effect.allowCompletion();\n            } else {\n                effect.setPosition(getCenter().x, getCenter().y);\n                \/**\n                 * This can be negative because of the Interpolation like Bounce !\n                 *\/\n                effect.update(delta);\n            }\n        }\n        particleEffectLastTime = particleEffectTime;\n        this.percent = percent;\n    }\n```\n#### Version of LibGDX and\/or relevant dependencies\n\n1.9.2\n#### Stacktrace\n\n``` java\n\/\/Please provide the stacktrace if applicable \n```\n#### Please select the affected platforms\n- [ ] Android\n- [ ] iOS\n- [ ] HTML\/GWT\n- [ ] Windows\n- [X] Linux\n- [ ] MacOS\n","comments":[],"labels":["enhancement"]},{"title":"[Feature Request] Add the ability to determine if the onscreen keyboard is currently visible. (Possible events?)","body":"Currently if a fullscreen table is used, it's hard to offset the contents when an onscreen keyboard shows up, as there isn't a way of knowing whether it is there or not.\n\nIf a way to determine if it's there or not was added, or even possible onKeyboardShow, and onKeyboardHide, it'd allow this to be done.\n","comments":["Oops.  I'm not entirely sure if this is actually possible on (on android at least).  Maybe in later versions of Android there is a direct way, perhaps @MobiDevelop knows more.\n","I don't believe it is possible while having the app\/game full screen. When fullscreen, the keyboard overlays the surface, rather than resizing it to make room for the keyboard.\n","I'm not familiar with android, but doesn't it have a system like iOS where it scales the screen when the keyboard comes up?\n","Not in the case of the app requesting fullscreen, which all libgdx apps do by default. You can, of course, change that and then listen for the resizes yourself.\n","Hi,\n\nI would sponsor the Software Keyboard check to AndroidOnscreenKeyboard.java\nWould you agree ?\n\n```\n\/**\n     * Check if the Software Keyboard is visible or not.\n     * @param v can be NULL\n     * @return true if visible, false otherwise\n     *\/\n    public Boolean isKeyboadVisible(View v){\n\n        InputMethodManager imm = (InputMethodManager) context\n                .getSystemService(Context.INPUT_METHOD_SERVICE);\n\n        if(v != null){\n            return imm.isActive(v);\n        }\n\n        if (imm.isAcceptingText()) {\n            Log.d(\"Keyboard\",\"Software Keyboard was shown\");\n            return true;\n        } else {\n            Log.d(\"Keyboard\", \"Software Keyboard was not shown\");\n            return false;\n        }\n    }\n```\n\nand a new method into AndroidInput.java\n\n```\n\/**\n     * Check if te Software Keyboard is visible or not\n     * @param view\n     * @return\n     *\/\n    public Boolean isOnscreenKeyboardVisible(final View view){\n        return this.onscreenKeyboard.isKeyboadVisible(view);\n    }\n\n```\n","@pbertsch This doesn't work, I tested it.\nSee http:\/\/stackoverflow.com\/a\/31090451 and http:\/\/stackoverflow.com\/a\/27567074 for a \"better\" solution (All solutions are quite hacky).\n\n@me4502 Shouldn't you know when you show\/hide the softkeyboard via `Gdx.input.setOnscreenKeyboardVisible(false)`?\nBut you are probably talking about e.g. TextField which itself shows the softkeyboard. \nSo you probably want a listener which fires, when `Gdx.input.setOnscreenKeyboardVisible(value)` is called, right?\n\nIf not, could you please explain what you mean?\n","A listener for that would work, yes. I just want to be able to manipulate the screen so that stuff is moved up when the keyboard is visible.\n","I have been experimenting with this and found a pretty nice solution that works well on all my Android testing devices. The brilliant thing about it is it doesn't actually do anything with the keyboard, so it avoids all the issues you might find with different keyboards. What it does though is monitors the Android's visible view and provides you the dimensions, so you can work out the height of the keyboard and work around that.\n\n[This](http:\/\/stackoverflow.com\/questions\/9604963\/how-do-libgdx-detect-keyboard-presence\/33188659#33188659) is what you want to implement.\n\nNote I found I had to scale the returned view dimensions by my virtual\/real screen scale for consistency on lower resolutions, if you have forced your game to a specific resolution, and create a small work around so I could launch the Desktop, other than that you can implement it as is.\n\nWhat I then did is create an extended class of the TextField, with this;\n\n```\n    @Override\n    public void act(float delta) {\n        maintainVisibility();\n        super.act(delta);\n    }\n\n    private void maintainVisibility(){\n        if(this.getStage() instanceof StageExt){\n            StageExt stage = (StageExt) this.getStage();\n            if(super.justFocused()){ \n                float y = this.localToStageCoordinates(new Vector2(0, 0)).y;\n                if(y < stage.getKeyboardHeight()+50){\n                    stage.interpolateCamTo(0, stage.getKeyboardHeight()-y+50, 0.5f, Interpolation.swingOut);\n                } else {\n                    stage.interpolateCamTo(0, 0, 0.5f, Interpolation.swingOut);\n                }\n            }\n\n        }\n    }\n```\n\nBasically, what this does is if the TextField position is less than the keyboard height (and therefore hidden behind it) , the screen bounces up to make the TextField visible.\n\nNote this is actually an extended class of another extended TextField class, and also I have my own extended Stage class, so it still won't work for you, but the methods I incorporated in these are fairly simple.\n\nsuper.justFocused() is basically a 1 time boolean to capture the single frame when the TextField was clicked, \n\nstage.getKeyBoardHeight() is similar to the original link posted above.\n\nstage.interpolateCamTo() just animates the camera position into place so it looks nice.\n\nIt is then my Stage class that handles the closing of the Keyboard event. You can't rely on the TextField loosing focus here because if the user closes the keyboard with the back button the TextField is still focused. This is impossible to solve or work around because Android does not pass the back button event to libGDX (yay)\n\nHope this helps you and others. It would be nice if libGDX could incorporate this Android visible view into the backend, so we don't need to modify all the application launchers to suit.\n"],"labels":["enhancement"]},{"title":"3d particle system doesn't work with GWT (anymore?)","body":"BilboardRenderControllerData is not handled by reflection for GWT and script fails to go through initialisation (create method for instance). It is relatively hard to get that information debugging it through FireFox or Chome so I didn't provide any extra JS stack traces, but following added to my project fixes the build and things (for at least BillboardParticleBatch) work then:\n\n```\n<extend-configuration-property name=\"gdx.reflect.include\" value=\"com.badlogic.gdx.graphics.g3d.particles.renderers.BillboardControllerRenderData\" \/>\n<extend-configuration-property name=\"gdx.reflect.include\" value=\"com.badlogic.gdx.graphics.g3d.particles.ParticleEffect\" \/>\n<extend-configuration-property name=\"gdx.reflect.include\" value=\"com.badlogic.gdx.graphics.g3d.particles.ParticleController\" \/>\n<extend-configuration-property name=\"gdx.reflect.include\" value=\"com.badlogic.gdx.graphics.g3d.particles.ResourceData\" \/>\n<extend-configuration-property name=\"gdx.reflect.include\" value=\"com.badlogic.gdx.graphics.g3d.particles.ResourceData.SaveData\" \/>\n<extend-configuration-property name=\"gdx.reflect.include\" value=\"com.badlogic.gdx.graphics.g3d.particles.ResourceData.AssetData\" \/>\n<extend-configuration-property name=\"gdx.reflect.include\" value=\"com.badlogic.gdx.graphics.g3d.particles.ParallelArray\" \/>\n<extend-configuration-property name=\"gdx.reflect.include\" value=\"com.badlogic.gdx.graphics.g3d.particles.values\" \/>\n<extend-configuration-property name=\"gdx.reflect.include\" value=\"com.badlogic.gdx.graphics.g3d.particles.emitters\" \/>\n<extend-configuration-property name=\"gdx.reflect.include\" value=\"com.badlogic.gdx.graphics.g3d.particles.influencers\" \/>\n<extend-configuration-property name=\"gdx.reflect.include\" value=\"com.badlogic.gdx.graphics.g3d.particles.renderers\" \/>\n<extend-configuration-property name=\"gdx.reflect.include\" value=\"com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch\" \/>\n<extend-configuration-property name=\"gdx.reflect.include\" value=\"com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$Config\" \/>\n<extend-configuration-property name=\"gdx.reflect.include\" value=\"com.badlogic.gdx.graphics.g3d.particles.ParticleShader\" \/>\n<extend-configuration-property name=\"gdx.reflect.include\" value=\"com.badlogic.gdx.graphics.g3d.particles.ParticleShader$AlignMode\" \/>\n```\n\nNow, I am not sure (it doesn't seem to be 100% right) that all of those extra classes need to be known to the GWT class reflection LibGDX's framework.\n\nCould someone, please, double check if current code in com.badlogic.gdx.graphics.g3d.particles is correct and if so add appropriate extend configuration properties to GwtReflect.gwt.xml? I would have prepared pull request, but as I said, it doesn't seem to be 100% right what is really needed for reflection. I hope it is not really necessary and list of classes needed can be appropriately reduced.\n\nTried on LibGDX 1.6.2 and 1.9.2.\n","comments":["These should already be included by LibGDX itself, please provide a full error report following our issue template so we can see\/reproduce the issue.\n","https:\/\/github.com\/libgdx\/libgdx\/wiki\/More-Info\n","Let me try again now I had time to create working\/not-working example...\n\n#### Issue details\n\nWhen GWT compiled LibGDX project doesn't have above classes provided to GWT.\n\n#### Reproduction steps\/code\n\nAs I am not sure how to provide simple file which would be then compiled for GWT I have created two projects and zipped them up - one with working particle system that has above extend-configuration-property added to Demo3DProject.gwt.xml and not working with Demo3DProject.gwt.xml without having extra extend-configuration-property entries (as they should really go in GwtReflect.gwt.xml).\n\nI've attached both here.\n\n[demo-3d-project-not-working.zip](https:\/\/github.com\/libgdx\/libgdx\/files\/318947\/demo-3d-project-not-working.zip)\n[demo-3d-project-working.zip](https:\/\/github.com\/libgdx\/libgdx\/files\/318948\/demo-3d-project-working.zip)\n\n#### Version of LibGDX and\/or relevant dependencies\n\n1.9.3\n\n#### Stacktrace\n\nStacktrace is from Firefox:\n\n```\nGwtApplication: exception: com.badlogic.gdx.utils.GdxRuntimeException: Could not submit AsyncTask: Error reading file: flame.pfx\ncom.badlogic.gdx.utils.GdxRuntimeException: Could not submit AsyncTask: Error reading file: flame.pfx\nCould not submit AsyncTask: Error reading file: flame.pfx\nError reading file: flame.pfx\nCouldn't find Type for class 'com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch$Config'\n```\n\n#### Please select the affected platforms\n- HTML\/GWT\n\nIs there anything else I need to provide? I don't mind uploading compiled WebGL versions somewhere you'll be able to see it working (with the bodge)\/not working.\n","This appears to have been closed prematurely. The full list of 3D particle-related reflection includes in GwtReflect.gwt.xml in the current master revision: https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/backends\/gdx-backends-gwt\/res\/com\/badlogic\/gwtref\/GwtReflect.gwt.xml#L58-L77\r\n\r\nThis doesn't include batches and might not include some of the other classes mentioned (I'm not 100% sure of anything relating to particles). There are some other classes missing that I've noticed, namely ObjectLongMap in utils\/ (it's missing from both GwtReflect.gwt.xml and the initial source-adding in gdx.gwt.xml), and some other data structures in GwtReflect.gwt.xml, though I don't know if these are needed (ObjectSet, OrderedSet, ObjectIntMap, IntMap, LongMap, and ArrayMap, plus all purely-primitive-backed data structures like ShortArray). I encountered the absence of ObjectLongMap myself recently, and @yuripourre just encountered the particle batch issue here in his jam game.\r\n\r\nI can put a PR together with all the data-structure reflection handled, but I'd have to rely on reviewers for help with the particles."],"labels":["gwt","need more info"]},{"title":"Prepare for gwt-freetype and other emscripten compiled apis","body":"**(The diff of GwtApplication is a little bit confusing so please look at the result and not at the direct diff or use github's split view)**\n\nFor gdx-freetype-gwt or gwt-bullet we have to inject ceratin .js files but we have to do it before the main loop is running.\n\n(Injection is async that's why we need this PR if it were sync. we would not have any problem :) )\n\nThe generator collects all `Injectable`s and injects them.\nWe wait 5s (50*100ms) for injection if the scripts aren't injected yet, we don't care, because the scripts are injected at the first possible time and if it isn't injected after 5 seconds it's unlikely that it will be injected.\n\nThe Timer code is a little bit ugly, I know, but I couldn't use libgdx Timer because it can only used if the mainloop is running.\n\nThe constructors of `DirectReadWriteByteBuffer`have been made public to easily transfer data from the emscripten heap to GWT\/libgdx.\n\nThe example mentioned in the javadoc can be found [here](https:\/\/gist.github.com\/intrigus\/ee87be2c8427f62b754b).\n\nPlease add your suggestions @MobiDevelop @badlogic \n","comments":["Any news when this is going to be merged?\n","When someone has reviewed it and decided it is good to be merged.\n","Very useful response :)\n","That's the exact answer to the question you asked. We all do this in our spare time, the ETA for anything is when we have time so it is usually better to refrain from asking for an ETA.\n","Hi, does this PR would allow freeTypefontGenerator to be used in gwt?\r\nIf so, it is a very usefull feature. Indeed, we can't use this feature yet because we aim every platform including gwt. So we used only feature that are compatible with everything. Thanks for your time and your job.","I try to use your PR but when compiling gwt I encounter this issue, do you have any ideas?\r\n\r\n```\r\n> :tests:gdx-tests-gwt:compileGwt\r\n> Compiling module com.badlogic.gdx.tests.gwt.GdxTestsGwt\r\n>    Tracing compile failure path for type 'com.badlogic.gdx.backends.gwt.inject.JsInjectorGenerator'\r\n>       [ERROR] Errors in 'file:\/D:\/Sources\/libgdx\/backends\/gdx-backends-gwt\/src\/com\/badlogic\/gdx\/backends\/gwt\/inject\/JsInjectorGenerator.java'\r\n>          [ERROR] Line 35: The method getPackage() is undefined for the type Class<JsInjector>\r\n>    [ERROR] Aborting compile due to errors in some input files\r\n> :tests:gdx-tests-gwt:compileGwt FAILED\r\n```","The PR has nothing to do with emscripten, it is generally for any code that is in a js file. The normal process of including a js file is to place it in the webapp folder and include it in index.html. This approach was used by libgdx itself for the soundmanager.\r\n\r\nAnother approach is to inject js files with GWT's ScriptInjector \r\n\r\n         final String js = GWT.getModuleBaseForStaticFiles() + \"freetype.js\";\r\n\t\t\tScriptInjector.fromUrl(js) \r\n\r\nIt must be done at the very start of the application in `onModuleLoad`, and the js file needs to be placed in a \"public\" folder.\r\n\r\nThe PR makes the process a bit more convinient, it's not needed to change HTMLLauncher or other files any more when including a lib supporting the process. On first sight, it looks a bit too complex for me. A lot of code is made to gather all available 3rd party libs using a certain interface and  generate code to inject their js files on gwt compilation. I am not sure if this is really needed: An overridable method in GwtApplication letting the game developer define a list of js files to inject should be okay, too. That's a matter of taste, but it could be used by game developers to inject other js file stuff (that is sometimes needed) with the same method.\r\nBut as said before, this is convinience - there's no need to have this. [FreeTypeFont can be used on GWT without this PR](https:\/\/github.com\/intrigus\/gdx-freetype-gwt) (with an addition to onModuleLoad), and [gdx-gameanalytics](https:\/\/github.com\/MrStahlfelge\/gdx-gameanalytics#gwt-project-setup) let the dev do the first approach.\r\n\r\nPlease correct me if I understood something wrong.","I agree with @MrStahlfelge. It's a far to complex solution for just inserting a js file.\r\nMaybe a slim version can be sufficient? Your FreetypeInjector seem to work without it. Something like you did there would be fine in my opinion. I like the idea of adding a js file without adding it to the html file by hand","@MobiDevelop is working on #5948, let's see if he needs this. If not, we can safely close it.","I think, due to the async nature of loading and compiling the WebAssembly module we might need something like this. In my experiments with migrating box2d to use emscripten, only about 30% of the time have I seen it load quickly enough to be ready by the time the main loop is starting."],"labels":["enhancement","gwt","non-breaking","controversial"]},{"title":"Context loss should be handled","body":"Afaik the GWT backend 'ignores' context loss i.e.  It doesn't restore shades and textures.\nContext loss can occur on low end PCs.\nSee https:\/\/www.khronos.org\/webgl\/wiki\/HandlingContextLost\n","comments":["I think you suppose to restore it in the ApplicationListener.onResume() method by calling AssetsManager.finishLoading() or manually if you are not using AssetsManager.\n","The issue is in no way related to AssetManager or ApplicationListener.onResume() !\nPlease read the page I linked to and you will understand it.\nThis issue is a low priority issue, because not so many people use GWT.\n\nI know why I do, because I'll most likely fix this issue.\n","Did you actually reproduce the issue or is it mostly theoretical?\n","On my current PC it's theoretical but on my old PC I lost the context under load.\n","I'm facing same issue, 2 PC in my office have problem of context loss. \nI can reproduce this issue exactly on same spot multiple times. \n\nBrowser: chrome\nFPS available on that browser: 20\nbreaks when adding more actor on stage\nthings on stage when broke:\n- 3 actor (works with 2 actor)\n- 5 Images\n- 2 image button\n"],"labels":["bug","gwt"]},{"title":"GWT sendHttpRequest doesn't work with Content-Type: multipart\/form-data ","body":"Hi,\nSending a request with this content-type only works on desktop (not tested on Android and iOS) but doesn't work on gwt (superDev and dist too).\n\nWhat happens:\n- The request is received by the php server but $_POST variable is empty\n- handleHttpResponse returns with statusCode=0 and a 0 length string in getResultAsString\n\nI join in attachment:\n- the code to reproduce the issue (created from a new libGDX project that only contains the badlogic.jpg ressource in the core\\assets directory, desktop and html project checked only)\n- the index.php file to test the request received (in the code constant SERVER_URL as to be filled with the url where you'll install the php file)\n\nSo here's the php file:\n\n[index.txt](https:\/\/github.com\/libgdx\/libgdx\/files\/100728\/index.txt)\n\nHere are the results:\n- desktop\n  TestMultipartPost: handleHttpResponse - OK\n  TestMultipartPost: response.length=62\n  TestMultipartPost: response={\"TestMultipartPost\":\"COPY !\",\"Key1\":\"Value1\",\"Key2\":\"Value2\"}\n- gwt\n  TestMultipartPost: handleHttpResponse - OK\n  TestMultipartPost: response.length=0\n  TestMultipartPost: response=\n\nAnd here's the code:\n\n[TestMultipartPost.txt](https:\/\/github.com\/libgdx\/libgdx\/files\/100729\/TestMultipartPost.txt)\n","comments":["Though sendHttpRequest doesn't work with Gwt, I managed to send multipart http request by using directly com.google.gwt.http.client.RequestBuilder with a specific implementation for Gwt.\n\nI use base64 instead of binary as Content-Transfer-Encoding for the file part of the request. \nThe file data are first compressed then encoded in base64 and finally added as a String.\n","Maybe this can get you some clues: \nhttps:\/\/github.com\/libgdx\/libgdx\/issues\/3243\nhttps:\/\/github.com\/libgdx\/libgdx\/issues\/2942\n","Also sendHttpRequest doesn't work with Gwt. Consider WebSockets instead. You can try to adopt the following code: https:\/\/github.com\/Davidiusdadi\/Java-WebSocket\n","@JFixby Sending http requests is supported and doesn't have anything to do with websockets.\n","I've seen these issues but in my case it has nothing to do with CORS. \nAs I said I solved my case by using RequestBuilder for Gwt and sendHttpRequest for other platforms.\nWhat is ok for me now.\n","I had a look to GwtNet.java and I've seen what is the problem.\n\nThere are 2 variables used in Net.java to set the content: content and contentStream but only the 1st one through getContent is read in GwtNet (line 117) to set the body of the request. \n\nSo I made a simple test I converted my multipart stream in String and passed it to setContent instead of setContentStream and it worked !\n\nAs I said we just have to know how to use the functions :-)\n"],"labels":["gwt"]},{"title":"Fix broken things due to changes to Graphics#getWidth()","body":"All of this classes are affected by the change to Graphics#getWidth().\nSome are definitely broken, other may not be broken.\n\nDefinitely broken:\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/utils\/ScreenUtils.java\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/1f9308530ae97f2ff83f0cb1f92e656df3a924d7\/tests\/gdx-tests\/src\/com\/badlogic\/gdx\/tests\/g3d\/shadows\/system\/classical\/ClassicalShadowSystem.java#L79\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/ea705f519bfca15822218064b4654c4f0e83db96\/tests\/gdx-tests\/src\/com\/badlogic\/gdx\/tests\/g3d\/shadows\/system\/ShadowSystem.java#L60\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/bf43f04d5cd37b46a9a956f8aca8f99a9f73a2fa\/gdx\/src\/com\/badlogic\/gdx\/scenes\/scene2d\/utils\/ScissorStack.java#L106-L139\n\nMaybe broken:\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/1f9308530ae97f2ff83f0cb1f92e656df3a924d7\/tests\/gdx-tests\/src\/com\/badlogic\/gdx\/tests\/g3d\/shadows\/system\/classical\/MainShader.java#L58\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/gdx\/src\/com\/badlogic\/gdx\/graphics\/g2d\/SpriteCache.java#L55\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/gdx\/src\/com\/badlogic\/gdx\/graphics\/g2d\/SpriteCache.java#L138\n- [ ] https:\/\/github.com\/libgdx\/libgdx\/blob\/5afb2aca5f49c39408c94e223cc2d51a66197d08\/gdx\/src\/com\/badlogic\/gdx\/graphics\/g3d\/particles\/ParticleShader.java#L139\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/extensions\/gdx-tools\/src\/com\/badlogic\/gdx\/tools\/particleeditor\/ParticleEditor.java#L352-L353\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/extensions\/gdx-tools\/src\/com\/badlogic\/gdx\/tools\/flame\/FlameMain.java#L643\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/gdx\/src\/com\/badlogic\/gdx\/graphics\/glutils\/ShapeRenderer.java#L120\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/6a5ce34240d5b70e3f6bb855de54e6fe0627a9c6\/gdx\/src\/com\/badlogic\/gdx\/graphics\/g2d\/PolygonSpriteBatch.java#L137\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/gdx\/src\/com\/badlogic\/gdx\/graphics\/g2d\/SpriteBatch.java#L102\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/bf43f04d5cd37b46a9a956f8aca8f99a9f73a2fa\/gdx\/src\/com\/badlogic\/gdx\/utils\/viewport\/Viewport.java#L226\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/gdx\/src\/com\/badlogic\/gdx\/graphics\/Camera.java#L264\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/gdx\/src\/com\/badlogic\/gdx\/graphics\/Camera.java#L221\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/gdx\/src\/com\/badlogic\/gdx\/graphics\/Camera.java#L206-L212\n- [ ] https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/gdx\/src\/com\/badlogic\/gdx\/assets\/loaders\/resolvers\/ResolutionFileResolver.java#L103\n- [ ] https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/backends\/gdx-backends-gwt\/src\/com\/badlogic\/gdx\/backends\/gwt\/emu\/com\/badlogic\/gdx\/assets\/loaders\/resolvers\/ResolutionFileResolver.java#L60-L63\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/gdx\/src\/com\/badlogic\/gdx\/graphics\/OrthographicCamera.java#L70-L73\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/f540346a0e17bbcbee2a4ae522c46c17207346bb\/gdx\/src\/com\/badlogic\/gdx\/scenes\/scene2d\/Stage.java#L91\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/f540346a0e17bbcbee2a4ae522c46c17207346bb\/gdx\/src\/com\/badlogic\/gdx\/scenes\/scene2d\/Stage.java#L115\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/000462858699fdd205325e320c152f66a504444f\/tests\/gdx-tests\/src\/com\/badlogic\/gdx\/tests\/superkoalio\/SuperKoalio.java#L265\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/gdx\/src\/com\/badlogic\/gdx\/graphics\/g3d\/utils\/CameraInputController.java#L112\n\nMaybe broken, but unused:\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/92d58c52c5f9be9fc1d650a3c6c879cb6ced086d\/gdx\/src\/com\/badlogic\/gdx\/input\/RemoteInput.java\n- [x] https:\/\/github.com\/libgdx\/libgdx\/blob\/92d58c52c5f9be9fc1d650a3c6c879cb6ced086d\/gdx\/src\/com\/badlogic\/gdx\/input\/RemoteSender.java\n","comments":["Nice list\n\nOut of the \"Maybe broken\" category most should be correct, I'm not sure about:\n- [MainShader](https:\/\/github.com\/libgdx\/libgdx\/blob\/1f9308530ae97f2ff83f0cb1f92e656df3a924d7\/tests\/gdx-tests\/src\/com\/badlogic\/gdx\/tests\/g3d\/shadows\/system\/classical\/MainShader.java#L58) and [ParticleShader](https:\/\/github.com\/libgdx\/libgdx\/blob\/5afb2aca5f49c39408c94e223cc2d51a66197d08\/gdx\/src\/com\/badlogic\/gdx\/graphics\/g3d\/particles\/ParticleShader.java#L139), I don't know how are these values used\n- [Resolution f](https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/gdx\/src\/com\/badlogic\/gdx\/assets\/loaders\/resolvers\/ResolutionFileResolver.java#L103)il[e resolver](https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/backends\/gdx-backends-gwt\/src\/com\/badlogic\/gdx\/backends\/gwt\/emu\/com\/badlogic\/gdx\/assets\/loaders\/resolvers\/ResolutionFileResolver.java#L60-L63) - Here it depends on what it should actually do. Something like Apple's `@2x` could be added.\n\nRemoteInput\/Sender does not do anything with BackBuffer, so it should be correct as well.\n","Thanks a ton for doing this. I'll go through those things later this week.\n","In the definitely broken category:\n1. ScreenUtils only needs updated JavaDocs and fix `getFrameBufferTexture()` to use `HDPIUtils`.\n2. `ClassicalShadowSystem`, yes, i have not touched any of the 3D API yet. Maybe @xoppa can assist a little. This needs to pass in the back buffer width\/height now.\n3. Same as 2.\n4. `ScissorStack` has already been fixed, it still works with logical coords, but uses `HDPIUtils` under the hood when calling `glScissor` and consorts.\n\nIn the maybe broken category:\n1. `MainShader` is likely correct, @xoppa please advise.\n2. `SpriteCache` is correct, only calls to glViewport, glScissor and glReadPixel need to be fixed up. Everything else continues to work in logical coords (which may or may not be == back buffer coords)\n3. `ParticleShader` is likely correct, @xoppa please advise.\n4. `ParticleEditor` is based on LWJGL2, which will never support HDPI the way LWJGL3 does (meaning getWidth() == getBackBufferWidth() in LWJGL2)\n5. `FlameMain` same as above, LWJGL2\n6. `ShapeRenderer` is correct, like in the case of `SpriteCache`, we always work in logical coords\n7. `PolygonSpriteBatch` is correct, logical coords\n8. `SpriteBatch` is correct, logical coords\n9. `ViewPort` is correct, logical coords\n10. `Camera` is correct, logical coords\n11. `ResolutionFileResolver` should probably use the back buffer width\/height, even if the app works in logical coords\n12. `SuperKoalio` is correct, logical coords\n13. `CameraInputController` is correct, logical coords\n\n`RemoteInput` and `RemoteSender` are also correct.\n","The shadow tests are WIP, I asked @realitix to have a look at it. I think the ParticleShader might actually need to be changed, will have to test it. It is used to set `gl_PointSize`, so the particles would be differently sized.\n","@intrigus These classes are not broken anymore, you can check it in your task list:\n- https:\/\/github.com\/libgdx\/libgdx\/blob\/1f9308530ae97f2ff83f0cb1f92e656df3a924d7\/tests\/gdx-tests\/src\/com\/badlogic\/gdx\/tests\/g3d\/shadows\/system\/classical\/ClassicalShadowSystem.java#L79\n- https:\/\/github.com\/libgdx\/libgdx\/blob\/ea705f519bfca15822218064b4654c4f0e83db96\/tests\/gdx-tests\/src\/com\/badlogic\/gdx\/tests\/g3d\/shadows\/system\/ShadowSystem.java#L60\n- https:\/\/github.com\/libgdx\/libgdx\/blob\/1f9308530ae97f2ff83f0cb1f92e656df3a924d7\/tests\/gdx-tests\/src\/com\/badlogic\/gdx\/tests\/g3d\/shadows\/system\/classical\/MainShader.java#L58\n\nThanks\n","Only https:\/\/github.com\/libgdx\/libgdx\/blob\/5afb2aca5f49c39408c94e223cc2d51a66197d08\/gdx\/src\/com\/badlogic\/gdx\/graphics\/g3d\/particles\/ParticleShader.java#L139 and https:\/\/github.com\/libgdx\/libgdx\/blob\/fde893cec5448fdd09e778d1c103aac474950873\/gdx\/src\/com\/badlogic\/gdx\/assets\/loaders\/resolvers\/ResolutionFileResolver.java#L103 left, could you please have a look at it @xoppa ?\n","For the ResolutionFileResolver issue , it changed from the deffination when they update the code so, it does not get the correct value . \n","The missing change in `ResolutionFileResolver` is introduced by #6174. \r\n\r\nRegarding the `ParticleShader` one I'm not really sure: it is used to calculate `gl_PointSize`, but a quick test showed no visible visual differences with either `getWidth()` and `getBackBufferWidth()`. If anyone knows more about this, please tell. "],"labels":["bug","graphics"]},{"title":"Quaternion.getRollRad() returns an incorrect value in certain cases","body":"Given a Quaternion created as such:\n\n```\nfloat heading = 90f;\nQuaternion q = new Quaternion();\nq.set(Vector3.Z, heading);\n```\n\nI would expect the following code:\n\n```\nfloat _rot = q.getRollRad();\n\/\/ _rot == 0f\n```\n\nTo have the same result as the following, but it does not:\n\n```\nVector3 _bearing = new Vector3();  \n_bearing.set(1f, 0f, 0f);\nmovement.orientation.transform(_bearing);\nfloat _rot = (float) Math.atan2(_bearing.y, _bearing.x);\n\/\/ _rot == 1.5707963\n```\n\nSimilarly, using a heading of `270f` results in `getRollRad() == -6.2831855`. Reasonable values are returned for other initial values of `heading`.\n\nAs a side note, would a pull request to increase `MathUtils`' atan2 LUT precision be looked at? I've had to fall back to using Java's regular `Math.atan2`  due to its imprecision.\n","comments":[],"labels":["core","math"]},{"title":"Box2D Chain Shape, isLooped doesnt stick.","body":"The underlying c implementations doesn't have isLooped in the chain which causes the flag to get lost on retrieval of the shape from the fixture. I believe that checking for indentical first and last vertex in `ChainShape#ChainShape(long)` constructor would be a reasonable fix.\n\nThis prints good, than broken. \n\n```\nprivate void chainTest() {\n    World world = new World(new Vector2(), true);\n    ChainShape chainShape = new ChainShape();\n    chainShape.createLoop(new float[] {-1, -1, 1, -1, 1, 1, -1, 1});\n    if (chainShape.isLooped()) {\n        System.out.println(\"New shape looks good\");\n    } else {\n        System.out.println(\"New shape looks broken\");\n    }\n    BodyDef chainBodyDef = new BodyDef();\n    chainBodyDef.type = BodyDef.BodyType.StaticBody;\n    Body body = world.createBody(chainBodyDef);\n    Fixture fixture = body.createFixture(chainShape, 0);\n    ChainShape shape = (ChainShape)fixture.getShape();\n    if (shape.isLooped()) {\n        System.out.println(\"Fixture shape looks good\");\n    } else {\n        System.out.println(\"Fixture shape looks broken\");\n    }\n    chainShape.dispose();\n    world.dispose();\n}\n```\n","comments":[],"labels":["bug","box2d"]},{"title":"Problems with bitmap fonts with pixel identical glyphs","body":"I stumbled upon the following minor issue regarding fonts in libGDX 1.6.5:\n\nI created a bitmap font file with Hiero where `0` and `O` happen to be pixel identical. It seems to be a feature of the `fnt` format to not include these glyphs twice in that case. The loader of BitmapFont does not recognize this optimization and therefore `0` characters are not rendered.\n","comments":[],"labels":["enhancement","fonts"]},{"title":"box2d World: Ability to tune pool memory consumption","body":"The fixture and body pools are constructed using magic numbers of 100 initial entries and 200 max entries.\nClients should be able to configure these to tune their memory consumption as they see fit.\n\nI have a fix for this.\n","comments":["@advayDev1 Where is the fix for this?\n","Good idea.\n","Fixed in the 1.2.1 release of https:\/\/github.com\/ice1000\/gdx-box2d! Now `World` has a new constructor taking `WorldDef`, which allows you to configure the capacities and pool maxes."],"labels":["enhancement","box2d"]},{"title":"Possibility for dynamic influencers to respect 3D particle effect's rotation","body":"Currently, changing a 3D `ParticleEffect`'s rotation (via `setRotation` or otherwise), only changes the rotation of the emitter - the dynamic influencers remain fixed.\n\nWhile that may be fine for some cases, for a lot of effects - nozzles, thrusters, things like comets, basically anything that needs a changing directional displacement of the **whole** effect - this is not sufficient.\n\nThe only way to emulate the rotation of the influencers appears to be manually recalculating their theta and phi values, as [described here](http:\/\/stackoverflow.com\/a\/29181347\/724361) - not really intuitive.\n\nA good solution would probably be to introduce an additional attribute for the influencers (at least those subclassing `Angular`) that would toggle between respecting the entire effect's rotation.\n","comments":["Could you send a [pull request](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/CONTRIBUTING.md#pull-requests)?\n","@xoppa I'd love to, but that's pretty unlikely to be honest - 3D transforms are not my forte. I'll see what I can do, but no promises.\n"],"labels":["enhancement"]},{"title":"BatchTileMapRenderer beginRender() and endRender() when ownsRender is false","body":"Regarding BatchTileMapRenderer, when the Batch is passed onto the constructor, thus the renderer not owning the batch, it should not call the batch.begin() and batch.end() on beginRender() and endRender() methods (should it?). I've created a subclass that overrides both methods to change this and its compatible with other batch drawing. \n\n@Override\n    protected void beginRender() {\n        if (ownsBatch) {\n            super.beginRender();\n        }\n    }\n\n```\n@Override\nprotected void endRender() {\n    if (ownsBatch) {\n        super.endRender();\n    }\n}\n```\n","comments":["The idea is that you would override the begin\/end render methods if you\ndon't want to have the default behavior of beginning and ending the batch.\nI can see where you are coming from and would be ok with changing this if\nothers agree.\nOn Mar 30, 2015 4:24 AM, \"Nuno Flores\" notifications@github.com wrote:\n\n> Regarding BatchTileMapRenderer, when the Batch is passed onto the\n> constructor, thus the renderer not owning the batch, it should not call the\n> batch.begin() and batch.end() on beginRender() and endRender() methods\n> (should it?). I've created a subclass that overrides both methods to change\n> this and its compatible with other batch drawing.\n> \n> @Override https:\/\/github.com\/Override\n> protected void beginRender() {\n> if (ownsBatch) {\n> super.beginRender();\n> }\n> }\n> \n> @Override\n> protected void endRender() {\n>     if (ownsBatch) {\n>         super.endRender();\n>     }\n> }\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/libgdx\/libgdx\/issues\/2991.\n","I have subclassed BatchTiledMapRenderer as well. In my case, I found unnecessary the call to batch.setProjectionMatrix (...) inside the setView (camera) method, causing a reflush of the batch, unnecessary if the batch has already set its projection matrix - as far as I understand. The default behavior is ok though, so I think it is just ok to subclass it.\n","I would agree.. To me it was an unexpected behavior because I assumed that the renderer required the batch to be begun before rendering, since it didn't own it. I was forced to subclass (in my case) `OrthogonalTiledMapRenderer` and add in the `if (ownsBatch) { ... }` statements by hand.\n\nIt seems redundant (to me) to be able to pass a batch if you have no real control over it...\n\nIt might be an a good idea to add such a subclass out of the box.\n"],"labels":["tilemap"]},{"title":"Hiero exports wrong base value","body":"When a font is exported\/created using Hiero, and a padding has been set, the vertical offset is wrong. I noticed that this can be fixed by adding the half of the top\/bottom padding to the exported base value of the .fnt file.\n\nWhen I export a font using a top and bottom padding of top, bottom(6,6) and the spacing set to x,y(-12, -12)\n\nThe resulting .fnt looks like this:\n`info face=\"Lato Regular\" size=16 bold=0 italic=0 charset=\"\" unicode=0 stretchH=100 smooth=1 aa=1    padding=6,6,6,6 spacing=-12,-12\n    common lineHeight=22 base=16 scaleW=512 scaleH=512 pages=1 packed=0`\n\nThis leads to a font which is rendered just a little bit lower than the expected base line.\nChanging the base value to 22 in this case fixes the issue. Actually I don't know if this is just by accident correct, but it definitely looks like that the base value if not correctly calculated.\n","comments":[],"labels":["bug","tools","fonts"]},{"title":"Sprite generation from TTF loaded via AssetManager is inconsistent across devices","body":"This is my first post here, I apologize in advance if it stinks.\n\nI'm working on a resolution-independent game whereby I load graphics as vectors using TTFs and convert them to textures\/sprites based on device requirements.  This was working flawlessly and consistently across all tested devices until I employed the AssetManager to load the fonts.  Now, glyph data appears to vary across devices and produces unexpected sprites.  Note, I've had no issues on desktop and drawing directly from the bitmap font is still working correctly.  However, I require rotation and tinting so as far as I know, I'm stuck with using sprites.\n\nI've provided all relevant code snippets below just to make sure I'm not doing anything incorrectly, as well as screenshots of the inconsistency.\n\nAssetLoader.load()\n\n``` java\nam                              = new AssetManager();\nFileHandleResolver resolver     = new InternalFileHandleResolver();\nam.setLoader(FreeTypeFontGenerator.class, new FreeTypeFontGeneratorLoader(resolver));\nam.setLoader(BitmapFont.class, \".ttf\", new FreetypeFontLoader(resolver));\n\nFreeTypeFontLoaderParameter p   = new FreeTypeFontLoaderParameter();\np.fontParameters.size           = (int) (Gdx.graphics.getHeight() \/ 10);\np.fontParameters.flip           = true;\np.fontParameters.minFilter      = TextureFilter.Linear;\np.fontParameters.characters     = \"PY023\";\n                                    \/\/ P down feather\n                                    \/\/ Y quill feather\n                                    \/\/ 0 full star, no outline\n                                    \/\/ 2 half star and outline\n                                    \/\/ 3 empty star, just outline\np.fontFileName                  = \"f.ttf\";\nam.load(\"f.ttf\", BitmapFont.class, p);\n```\n\nAssetLoader.loadProgress()\n\n``` java\nif(am.update()) {\n    f       = am.get(\"f.ttf\");\n    fQuill  = Utils.getGlyphSprite('Y', f);\n    fDown   = Utils.getGlyphSprite('P', f);\n    sFull   = Utils.getGlyphSprite('0', f);\n    sHalf   = Utils.getGlyphSprite('2', f);\n    sEmpty  = Utils.getGlyphSprite('3', f);\n}\nreturn am.getProgress();\n```\n\nUtils.getGlyphSprite(char ch, BitmapFont f)\n\n``` java\nGlyph g     = f.getData().getGlyph(ch);\nSprite s    = new Sprite(f.getRegion().getTexture(), g.srcX, g.srcY, g.width, g.height);\ns.flip(false, true);\ns.setOrigin(g.width \/ 2, g.height \/ 2);\nreturn s;\n```\n\nAs an example, here is the painting of just the star outlines.\n\nGameRenderer.paint()\n\n``` java\nspritebatch.draw(empty, loc.x - empty.getWidth() \/ 2, loc.y - empty.getHeight() \/ 2, empty.getOriginX(), empty.getOriginY(), empty.getWidth(), empty.getHeight(), scale.current, scale.current, rotation.current + 90);\n```\n\nThis is the expected result, observed on desktop and a Nexus 4, Android 5.0.1.\n![screenshot_2015-02-18-17-27-30clip](https:\/\/cloud.githubusercontent.com\/assets\/11069270\/6262172\/0ad54e30-b7cc-11e4-8f93-a9adf8f0f1a4.png)\n\nThis is a garbled result, observed on an HTC One S, Android 4.1.1; note the feathers in place of stars, though they're not correctly drawn either, the framing seems to be off a bit.\n![screenshot_2015-02-18-22-38-27clip](https:\/\/cloud.githubusercontent.com\/assets\/11069270\/6262175\/0f7bddaa-b7cc-11e4-884b-d9066069ef1f.png)\n\nThe Nexus 4 isn't entirely perfect either, it had garbled results too via the AssetManager until I started loading the font in sections.  Desktop has always been perfect though, which is why I think this is more likely a bug in LibGDX than in my code.\n\nPlease let me know if there is any other information I can provide.\n","comments":["So, it works correctly if you use FreeTypeFontGenerator directly, but not when you use FreetypeFontLoader?\n\nOn a related (but not really) note, how did we end up with everything being called Free**T**ype except for the font loader, which is Free**t**ype?\n","Good catch, maybe deprecate it?  Most programmers are a bit OCD and wouldn't mind the change.\n\nAnd, that's correct.  It may also be of some importance to note that the feather sprites look fine.  So going by the character selection list:\n\n| ch | icon | status | result |\n| --- | --- | --- | --- |\n| P | down feather | good |  |\n| Y | quill feather | good |  |\n| 0 | full star, no outline | good |  |\n| 2 | half star and outline | bad | P but offset |\n| 3 | empty star, just outline | bad | Y but offset |\n","BTW, why are you flipping font, and then flipping sprite - does your issue reproduces without flip?\n\nAlso I think due to resolution differences the resulting texture atlas generated diffes on HTC One S, I'd rather think that on desktop and nexus they are something like a row with yours 5 symbols, but on HTC One S they seems to generate in two rows, where the 2 and 3 are under P and Y :) And creating the sprite with integer x, y, w, h as you do sets region to:\n\n``` java\n    setRegion(x * invTexWidth, y * invTexHeight, (x + width) * invTexWidth, (y + height) * invTexHeight);\n```\n\nworks fine for one-row atlas - on desktop and Nexus, but breaks on HTC, cause AFAIK for the Glyph the [more complicated logic](https:\/\/github.com\/libgdx\/libgdx\/blob\/master\/gdx\/src\/com\/badlogic\/gdx\/graphics\/g2d\/BitmapFont.java#L209) seems to be used to calculate the u,v values including the flipping, x and y offset values. If you  try to create the sprite without flip and use direct Glyph u,v values like this:\n\n```\n... = new Sprite(f.getRegion().getTexture(), g.u, g.v g.u2, g.v2);\n```\n\ndoes your issue still reproduces?\n","Thanks for your input!  It seems that the second flip doesn't undo the first.  When the sprite is created, the first flip is ignored, so I do need the second one.  Either way, removing it does not correct the issue.\n\nYour point on the glyph 'word wrap' makes sense.  When I increase the size of the font at creation time, I can replicate the issue in the Nexus as well.  However, using u\/v is not straightforward.  There is no constructor for floats.  I attempted to multiply by width and height and cast to int but got the same garbled results.\n\n### Edit\n\nHere are the relevant glyph coordinates\/dimensions.  I am not as familiar with the u\/v side to know what should be happening, but it does seem to be doing something different than the x\/y side.\n\n| ch | x | y | w | h | u | v | u2 | v2 |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| P | 2 | 2 | 357 | 513 | 0.002 | 0.503 | 0.351 | 0.002 |\n| Y | 363 | 2 | 512 | 512 | 0.354 | 0.502 | 0.854 | 0.002 |\n| 0 | 363 | 518 | 476 | 454 | 0.354 | 0.949 | 0.819 | 0.506 |\n| 2 | 2 | 2 | 478 | 454 | 0.002 | 0.445 | 0.469 | 0.002 |\n| 3 | 484 | 2 | 476 | 454 | 0.473 | 0.445 | 0.938 | 0.002 |\n","I did some more experimentation and figured it out...\n\nI have to retract the claim that this only occurs with AssetManager.  I was able to replicate the issue with the usual loading method.  I can attest that the problem was not evident previous to using AssetManager.  I played around with it before and it seemed to be the only factor, but evidently there must have been something else I missed.  Sorry for the confusion.\n\nI tried using a very reliable font to make sure it wasn't something in my TTF and confirmed that it wasn't that.\n\nLastly, I figured out how to get the u\/v coordinates to work and after plotting with them instead, the issue was still there, which made sense because plotting the coordinates, you can tell that the dimensions overlap.\n\nThen it hit me that this may be producing several textures and turns out Glyph has a page index and Font has a getRegions() method.  I constructed the sprite by querying the glyph's page:\n\n``` java\nSprite s = new Sprite(f.getRegion(g.page).getTexture(), g.srcX, g.srcY, g.width, g.height);\n```\n\nand now it works at any size!\n\nSo this can be closed as it's not a bug.  Thanks for your help.\n\nJust as a discussion point, I understand getRegion() is there for back-compatibility, but perhaps it should complain when the font has multiple pages now that that's possible.\n","Your problems is that by default the max texture size is 1024, and the resulting generated glyphs are big and as result - splitted on pages. Looking at the table you provided and at your screenshots, I suggest you to play with glyph sizes (downsize them) - as they seems to be too huge for your real usage - do you really need symbols with 512 sizes while on screenshots they are looking much smaller? (may be I'm mistaken but it seems so for me). If you scale their size down, it will not only consume less memory, but possibly will remove unnecessary texture switching between pages while drawing them.\n","Yes, i definitely don't need that size, I was just trying to replicate the issue on my Nexus and Desktop environments.  On the HTC, the issue occurred at 96 px (screen height \/ 10).  As it could only fit 3 glyphs on the first page, it must have a much smaller default texture size.\n"],"labels":["fonts"]},{"title":"gdx-freetype failed with some multi-language font","body":"I am working with an app support Chinese, Japanese and English. I found that DroidSansFallback font from Google (systems font on Android) support all those language, mean I can use it on Android and include in iOS because it only 6MB.\n\nBut  gdx-freetype failed to display English in this font, because i want use input English and display merge English and other language at the same time, because use more than 1 font in a label not possible. \n\nIt can display fine with font NotoSansCJKjp but it cost me 17MB.\n\nI use latest libgdx nightly include freetype: libgdx-nightly-20150129 \n","comments":["Are you specifying the character set when generating the fonts? what\ncharacters are you using?\n\nOn Fri, Jan 30, 2015 at 11:12 AM, Viet Dzung notifications@github.com\nwrote:\n\n> I am working with an app support Chinese, Japanese and English. I found\n> that DroidSansFallback font from Google (systems font on Android) support\n> all those language, mean I can use it on Android and include in iOS because\n> it only 6MB.\n> \n> But gdx-freetype failed to display English in this font, because i want\n> use input English and display merge English and other language at the same\n> time, because use more than 1 font in a label not possible.\n> \n> It can display fine with font NotoSansCJKjp but it cost me 17MB.\n> \n> I use latest libgdx nightly include freetype: libgdx-nightly-20150129\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/libgdx\/libgdx\/issues\/2787.\n","Yes, below is my code to test:\n\n```\n            fontGen = new FreeTypeFontGenerator(\n                    Gdx.files.internal(\"fonts\/DroidSansFallback.ttf\"));\n            fontGenP = new FreeTypeFontParameter();\n            fontGenP.size = Gdx.graphics.getWidth() \/ 20;\n            fontGenP.characters = \"\u76ee\u524d\u95ee\u53e5:1\/20 Clor\";\n            bmFont = fontGen.generateFont(fontGenP);\n```\n\nDisplay\n\n```\n        String test= \"\u76ee\u524d\u95ee\u53e5:1\/20 Color\";\n        Assets.bmFont.draw(batch, test, Gdx.graphics.getWidth()\n                \/ 2.0F - Assets.bmFont.getBounds(test).width \/ 2.0F,\n                Gdx.graphics.getWidth() \/ 10.0F);\n```\n\nFont from here: https:\/\/github.com\/android\/platform_frameworks_base\/blob\/master\/data\/fonts\/DroidSansFallback.ttf\n\nFrom above comment, if i use font NotoSansCJKjp or NotoSansCJKsc it display fine.\n","Here is the text drawn using font DroidSansFallback (v 3.00, 5,3mb+):\n![image](https:\/\/cloud.githubusercontent.com\/assets\/2253795\/5988375\/5efa51f2-a96e-11e4-9a13-fc465e6d5818.png)\n\nThe font on the link you provided is older - v2.55b and smaller - about 3,3mb and it really have the issues with displaying english.\n\nUPD: I've opened the font on the link you provided with FontForge and it showed only Chinese\/Japanese (really don't know), somehow eng is missing\/corrupted in this font version.\n","Because it from master branch of Android https:\/\/android.googlesource.com\/platform\/frameworks\/base.git\/+\/master\/data\/fonts\/ and i can't believe it error with English. Please tell me where you get that 3.0 version? And I tested that font with Word, it does support English.\n","I used font found by the first link in google:\nhttps:\/\/code.google.com\/p\/galaxy-nexus-khmer\/downloads\/detail?name=DroidSansFallback.ttf\n\nYour fonts looks strange, e.g. when I open it shows English correctly, but not work with gdx-freetype, and moreover my Windows also dislike it - see no english chars at right:\n![image](https:\/\/cloud.githubusercontent.com\/assets\/2253795\/5989640\/29cefa92-a99f-11e4-9833-072023cc1ce5.png)\n\nFrom their git:\n\n> The fonts are passed through Noto's identity subsetter at\n> https:\/\/code.google.com\/p\/noto\/source\/browse\/nototools\/subset.py?r=bdd10822706b\n> which keeps the same functionality, but compresses tables, removes\n> unreachable glyphs, converts post table to version 3.0, etc.\n> Additionally, the DroidSansFallback fonts and MotoyaLMaru are passed through\n> fontcrunch.\n\nThis custom processings for font might not be compatible with freetype lib. The current version used in gdx-freetype is 2.4.10, I will check the latest 2.5 if it can handle your font correctly.\n","Yes, if use that font it will display correct.\nBut if i use android system font on Lollipop(My nexus 7) i will not display correctly.\n![cn_font](https:\/\/cloud.githubusercontent.com\/assets\/10563561\/5992203\/541562f2-aa51-11e4-8099-70563a603c06.png)\n\n```\nfontGen = new FreeTypeFontGenerator(Gdx.files.absolute(\"\/system\/fonts\/DroidSansFallback.ttf\"));\n```\n\nThis cost me 5 MB on android if use my own font.\n","Thats strange, someone familiar with FreeType fonts needed :(\nI will try to build gdx-freetype with latest C freetype lib tomorrow and check if it will work with this fonts.\n","Unfortunatelly, I haven't found a way to make it work.\n\nJust checked - [Your font 2 commits behind](https:\/\/github.com\/android\/platform_frameworks_base\/blob\/562c45cc841681ed80d4e94515b23c28eb60eae4\/data\/fonts\/DroidSansFallback.ttf) - seems to work fine - that means the issue appears after they compress and trim their font.\n\nThink the best solution is to post the question\/issue at [freetype tracker](https:\/\/savannah.nongnu.org\/bugs\/?group=freetype). If it's issue - it's their issue, if not - they might help with some good advice about how correct configuration to resolve it in gdx-freetype..\n","Four days ago gdx-freetype has been updated with freetype 2.5.5 (it was version 2.4.10 before).\nHas anybody checked if this is fixed now?\n","I don't think it is fixed.\n","I just tried this again with freetype 2.6.2 and I'm afraid it still doesn't seem to work with that particular version of the font.\n"],"labels":["bug","fonts"]},{"title":"Implement newAudioDevice\/newAudioRecorder in iOS backend","body":"I need AudioRecorder and AudioDevice on iOS and would like to try to implement it, at least if nobody is currently working on that. I'm not very familiar with iOS development, so: What technologies should these classes use on iOS\/RoboVM?\n","comments":["That would be OpenAL on iOS. It's a bit tricky API wise, and integratiom\nwith the app life cycle isn't easy iirc. You can check out how other\nframeworks do it maybe, e.g. Cocos2d-x (if they have that functionality).\nOn Dec 29, 2014 11:07 PM, \"Andres Manz\" notifications@github.com wrote:\n\n> I need AudioRecorder and AudioDevice on iOS and would like to try to\n> implement it, at least if nobody is currently working on that. I'm not very\n> familiar with iOS development, so: What technologies should these classes\n> use on iOS\/RoboVM?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/libgdx\/libgdx\/issues\/2687.\n","Alright, thank you. Finally I get to have a look at this now. I will send a PR if everything goes well.\n","Someone was able to implement both recording and audio playback with RoboVM: [Stackoverflow post](http:\/\/stackoverflow.com\/questions\/27073735\/robovm-implementation-of-recording-demo-using-audioqueue-results-in-no-marshal\/27218086?noredirect=1#comment44570798_27218086)\n\nI packaged everything into a sample app and already submitted a pull request to RoboVM: [SpeakHere app](https:\/\/www.google.com\/url?q=https%3A%2F%2Fgithub.com%2Fschmoofer%2Frobovm-samples%2Ftree%2Fmaster%2FSpeakHere&sa=D&sntz=1&usg=AFQjCNHbY-CINk87GB9dbqeaReLZhGPWFw)\n\nThe only thing left to do is find out how to access the actual linear PCM audio data during real-time recording and playback. I posted a question about it in the RoboVM Google group [here](https:\/\/groups.google.com\/forum\/#!topic\/robovm\/wm17rtpxh-s)\n\nIf anyone can help out with that, that'd be most excellent.\n","@schmoofer Thank you. This is actually how I implemented it for my project. Basically, recording (using AudioRecord's read method) and playing works fine. But when I stop playing\/recording, there are some strange (threading-related?) issues with the piped streams. Also, its behaviour in iOS simulator is a bit different from that on an actual device. Yay, surprise. I will have a deeper look at your SpeakHere sample code.\n\nNow as we implemented this using AudioQueues, I'm not sure if it's ok to use that in libgdx as Mario \nexpects the use of OpenAL.\n","@andresmanz According to the bindings status page for RoboVM ([link](https:\/\/github.com\/robovm\/robovm\/wiki\/CocoaTouch-bindings-status)), OpenAL hasn't been implemented yet, so that'd be much more work, I assume.\n","We bind it ourself, see https:\/\/github.com\/libgdx\/libgdx\/tree\/master\/backends\/gdx-backend-robovm\/src\/com\/badlogic\/gdx\/backends\/iosrobovm\/objectal for examples.\n","Here's someone else's bindings [link](https:\/\/github.com\/threerings\/playn\/blob\/master\/robovm\/src\/playn\/robovm\/OpenAL.java) for the PlayN framework using RoboVM.\n\nAny chance this can be ported into Libgdx?\n","We bind this project which uses OpenAL https:\/\/github.com\/kstenerud\/ObjectAL-for-iPhone\/tree\/master\/ObjectAL\/ObjectAL\n\nWe just bind what we need when we need it.  They probably have some sort of capture in that API so it's probably not that much work at all. \n","@Tom-Ski did you just volunteer?! :D\n","Sure, I can start if and when the gdx-video JNI build stops making me cry.\n","Already mentioned it in issue #1828 but I'll reiterate for good measure. I implemented the bindings [here](https:\/\/github.com\/schmoofer\/RecorderLibrary) which also contains the updated IOS backend audio class. @badlogic just notified us that the libgdx crew is working on merging it, so stay tuned y'all.\n","ello, i'm part of the libGDX crew, looking into it atm :)\nOn Mar 14, 2015 12:43 PM, \"David Li\" notifications@github.com wrote:\n\n> Already mentioned it in issue #1828\n> https:\/\/github.com\/libgdx\/libgdx\/issues\/1828 but I'll reiterate for\n> good measure. I implemented the bindings here\n> https:\/\/github.com\/schmoofer\/RecorderLibrary which also contains the\n> updated IOS backend audio class. @badlogic https:\/\/github.com\/badlogic\n> just notified us that the libgdx crew is working on merging it, so stay\n> tuned y'all.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/libgdx\/libgdx\/issues\/2687#issuecomment-80366395.\n","oops, did not mean to exclude the father of LibGDX. Carry on and thanks!\n","Hrm, i'm not sure what the best way to integrate this is. I don't want to\nadd another static lib. I'd be cool if this was all Java side, which i\nthink should be possible. I'll look into it for an hour or so and see where\nit leads. Otherwise someone else will have to take this on :)\n\nOn Sat, Mar 14, 2015 at 12:47 PM, David Li notifications@github.com wrote:\n\n> oops, did not mean to exclude the father of LibGDX. Carry on and thanks!\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/libgdx\/libgdx\/issues\/2687#issuecomment-80368189.\n","Yeah I looked into using only RoboVM classes but they haven't implemented Audio Units yet which are pretty much the basis of my implementation. Is there at least a way to get my IOSAudio.java class to override the stock libGDX one during IPA creation?\n\nAlso, here's a sample I help someone else submit using pure Java classes from RoboVM: [link](https:\/\/github.com\/schmoofer\/robovm-samples\/tree\/master\/SpeakHere)\nIt uses AudioQueues, but the downside is the read function returns the audio in bytes instead of floats or shorts. I have no idea how to extract the PCM audio data from the byte buffer. Or that's just where my expertise stops.\n","My other alternative is to just re-implement some sort of AudioRecorder interface for each platform to bypass libGDX's IOSAudio class, as hacky as it may seem...\n","Yeah, i just looked into this. You are right, getting this working in pure\nJava will be a bit problematic using the queues.\n\nI'm afraid i don't have the time at the moment to properly implement this.\nYour best bet atm would be to use Gdx.audio.newAudioRecorder on all\nplatforms except iOS. On iOS, instantiate your own implementation which\nconforms to AudioRecorder, so your game code doesn't care where the\nAudioRecorder instance came from.\n\nOn Sat, Mar 14, 2015 at 1:07 PM, David Li notifications@github.com wrote:\n\n> My other alternative is to just re-implement some sort of AudioRecorder\n> interface for each platform to bypass libGDX's IOSAudio class, as hacky as\n> it may seem...\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/libgdx\/libgdx\/issues\/2687#issuecomment-80389357.\n","No worries, I'll proceed as suggested. Another day, another time.\n","Actually, we could use the code in\nhttps:\/\/github.com\/schmoofer\/robovm-samples\/blob\/master\/SpeakHere\/src\/org\/robovm\/samples\/speakhere\/AudioRecord.java\nconverting from bytes to short is trivial, e.g. pseudo code\n\n``` java\nbyte[] pcmBytes = ... \/\/ pcmBytes.length must be a multiple of 2\nshort[] pcmShort = new short[pcmBytes.length \/ 2]\nfor(int i = 0, j = 0; i < pcmBytes.length; i+=2, j++) {\n   pcmShort[j] = pcmBytes[i] << 8 | pcmBytes[i+1]; \/\/ you may have to\nswitch things around, and maybe mask the bytes with & 0xff\n}\n```\n\nOn Sat, Mar 14, 2015 at 1:21 PM, Mario Zechner badlogicgames@gmail.com\nwrote:\n\n> Yeah, i just looked into this. You are right, getting this working in pure\n> Java will be a bit problematic using the queues.\n> \n> I'm afraid i don't have the time at the moment to properly implement this.\n> Your best bet atm would be to use Gdx.audio.newAudioRecorder on all\n> platforms except iOS. On iOS, instantiate your own implementation which\n> conforms to AudioRecorder, so your game code doesn't care where the\n> AudioRecorder instance came from.\n> \n> On Sat, Mar 14, 2015 at 1:07 PM, David Li notifications@github.com\n> wrote:\n> \n> > My other alternative is to just re-implement some sort of AudioRecorder\n> > interface for each platform to bypass libGDX's IOSAudio class, as hacky as\n> > it may seem...\n> > \n> > \u2014\n> > Reply to this email directly or view it on GitHub\n> > https:\/\/github.com\/libgdx\/libgdx\/issues\/2687#issuecomment-80389357.\n","Now that RoboVM has implemented Audio Queues, Audio Units, and all that good stuff, can this be revisited? I would love to use LibGDX as the base for an iOS-compatible synth, but I can't do that without some sort of PCM streaming from a buffer.\n","Well, there is this [iOS Tone Generator app](http:\/\/www.cocoawithlove.com\/2010\/10\/ios-tone-generator-introduction-to.html) which shows how to use AudioUnits to generate tones on the audio output. I am in the process of porting the Objective C code to Java (so far so good) so I can synthesize music\/sounds in my app, and it might be a good basis for implementing the AudioDevice functionality in iOS?\n","i did also implement some audio apps with ibgdx and tried them just now  on ios. Any news about this thread, i also need the newDevise & newRecorder functionality.\n","Did anyone happen to revisit this issue? \r\nIs the best way to record audio on iOS still to expose an interface that returns ```Gdx.audio.newAudioRecorder``` on all platforms except iOS, and provide a separate implementation for iOS? ","I've successfully implemented this function for iOS and, correct, you will have to implement platform-specific functions. Here's the link to the relevant files: [https:\/\/github.com\/frissonlabs\/RecorderLibrary](https:\/\/github.com\/frissonlabs\/RecorderLibrary)\r\n\r\nIn your *-ios project, add the java files to the src folder and then add the Recorder.a file to the build\/libs\/ios  folder. Then add the line \"\\<lib>build\/libs\/ios\/libRecorder.a\\<\/lib>\" in the <libs> block in \"robovm.xml\". From there, follow the instructions at [https:\/\/github.com\/libgdx\/libgdx\/wiki\/Interfacing-with-platform-specific-code](https:\/\/github.com\/libgdx\/libgdx\/wiki\/Interfacing-with-platform-specific-code) to interface with the ios recorder functions.\r\n\r\n@badlogic Feel free to integrate this solution into master if adequate","#5382 the robovm back end is supposedly implemented around 21 days ago."],"labels":["enhancement","ios"]},{"title":"AndroidInput cannot capture onKey when set keyboard language to VietNamese.","body":"My keyboard language is VietNamese, I cannot input text, but when I press Enter, the text appear in TextField.\nWhen my keyboard language is English or another, I can input text OK.\n\nDevices: \n- Galaxy S4 (GT-I9500) 4.4.2\n- Oppo U707 Android 4.2.1\n\nWhat happen with Vietnamese language? Please check it.\n","comments":["It's not the problem of Vietnamese language. AndroidInput uses View.OnKeyListener to trigger the key event. As the document wrote: \n- The callback will be invoked before the key event is given to the view. This is only useful for hardware keyboards; a software input method has no obligation to trigger this listener.\n\nSo this listener will not work on soft keyboard. Some devices work and other not. It depends on device and rom of device. Hope it will be fixed to work on all devices.\n"],"labels":["bug","android","input"]},{"title":"Support for complex font rendering (Chinese, Arabic, ...)","body":"For languages like Chinese, it's not practical for an app to deliver its own font. Therefore there's a desire for libgdx to be able to use fonts delivered by the platform. \n\nSome discussion already occurred here:\n[Roll-your-own Chinese font?](http:\/\/www.badlogicgames.com\/forum\/viewtopic.php?f=11&t=13203)\nand here:\n[Development Forum: Supporting Asian fonts in BitmapFont](http:\/\/www.badlogicgames.com\/forum\/viewtopic.php?f=23&t=13031)\n\nEarlier attempts at the same challenge have run into difficulties but there doesn't seem to be an exhaustive list of those difficulties. Perhaps that should be compiled here before attempting to develop a new plan.\n","comments":["Took the freedom to modify your issues title,\n\nI believe we could create an extension that uses system facilities to render strings to textures. I'm not sure what an interface for something like that would look like.\n\nAnother alternative would be a LRU glyph cache with the same interface as BitmapFont. Open for other suggestions (and not saying i'm gonna implement this!)\n","If it's only about making textures, we could give Gdx.graphics a getSystemFont method taking the font characteristics and returning a Font which had a method like \"Pixmap write(String s)\".\n\nBut perhaps the whole edifice of widgets and dialogs ought to work with this, so how about introducing a Font interface or base class and then deriving BitmapFont and SystemFont from it. That would require changing all the BitmapFont references into Font references, but there's only about 600 of those ;-) \n","how would the glyphs from the LRU cache be stored? Individual textures? in an atlas?\n\nIs there anyway to do this that doesn't bind textures like crazy? I've been brainstorming but I haven't come up with anything.\n\nCould we somehow use freetype font generator to dynamically add glyphs to a pre-rendered font, possibly with an internal texture atlas. for example:\nmyfont.png contains 100 chars I know I will use for buttons.\nUsers inputs n chars not in the original 100.\nmyfont2.png is created and generates those n chars into the first spots of the png, keeping track of position for writing next dynamically generated char.\n\nIt is just brainstorming, I don't know if it is a good idea.\n","Your suggestion comes close to the system i wrote at work a few years ago. It's a big mess, especially if it has to be general purpose.\n\nWe should make this a higher priority imo, i want to be able to support the asian and arabic markets. For what it's worth, Unity has zero support for asian and arabic scripts...\n\nUltimately i think we need to expose a simple method that takes a string in utf and spits out a layouted texture\/pixmap. Any glyph caching will fail on mobile due to layouting, The layouting and rendering can cache glyphs though via LRU on the heap. It's still going to be slow to generate textures for new strings.\n\nbased on this functionality, we can implement a special label in scene2d. for long blocks of text we'll need to be able to split the text up into multiple textures, which is going to be a pain. and of course, there's a limit to the amount of Ram se have available. the benefit of this method is that we can implement it per platform using systme libraries, including gwt.\n\ni'll also try to find Androids implementation of text rendering and will try to get inspired by it. they actually have a glyph cache and freetype. we'll see.\n","oh, and i think this functionality belongs in core.\n","Here's Android GLES 2 based font renderer for inspiration\n\nhttps:\/\/github.com\/android\/platform_frameworks_base\/blob\/a85db5ab785c59726c3644999801e48f449714f3\/libs\/hwui\/FontRenderer.cpp\n","From the discussion in the topic on the dev forum it seems layout is simple enough for CJK that we can use an atlas approach, same as we do for Latin languages. If that is true, we can get quite far by adding glyphs to the atlas on the fly. A lot of glyphs can fit on a 2048 texture. There can only be so many glyphs on the screen at once so if the texture were to get filled, simply clearing it would likely be sufficient.\n\nFor Arabic and RTL, I dunno, cache full strings I guess.\n","AFAIK the number of letters\/glyphs in the Arabic language is not a real problem.\nThey have 28 letters and their glyphs are about 4x since each letter can have up to 4 different shapes depending on whether it will be connecting with a preceding and\/or a succeeding letter.\nSo the main problem is to properly render the letters in one of their conditional forms, depending on whether they are at the beginning, middle or end of a word. In particular, they may have 4 distinct forms: initial, medial, final and isolated.\nA few letters have only the isolated or the final form though. \nAlso one more problem to take into account is that Arabic language is RTL but their numbers are LTR, just like ours. So a sentence containing numbers is a mix of RTL and LTR.\n","An idea following what Nate said...At startup, seed a glyph map with 2000 or so most common characters for the language, which seems to cover most text for these languages. Reserve the rest of the space for filling in additional glyphs (maybe reserve a fixed square for each of them to make it easy to overwrite them). As new strings are passed in for rendering, the font manager fills new characters into the empty spaces. (Not sure, but would an FBO be faster than new Pixmap-to-Texture if you are just writing a few sprites to it when it's updated? It wouldn't be getting cleared, so there'd still be a buffer restore each time.) This could minimize regeneration of the glyph texture...as the font manager is fed more and more strings, it becomes less and less likely to require updates to the texture. \n\nMaybe also keep a usage count for each character with some kind of comparitor, so it will know which characters to overwrite first. Maybe even push overwritten ones to a second texture and smartly order the drawing of glyphs for only two texture binds if necessary.\n","I'd like to start out with the simpler version that doesn't do an LRU glyph cache but instead renders\/layouts an entire string to a texture. It's wasteful, but appearently good enough for cocos2d-x (Unity has zero support for CJK\/arabic btw. And people pay for it...).\n\nQuestions:\n- What should the API be like?\n- Does this belong in core?\n- Should we try to make it somewhat interchangeable with BitmapFont? Or we could just create a new FixedLabel actor or something similar that folks can use instead of the BitmapFont based actor\n- Should we support system fonts?\n\nI have a bit of time this week, so i'd like to get going with this asap.\n","For reference, here's what Cocos2D-X does http:\/\/www.cocos2d-x.org\/wiki\/Text_Labels\n\nFunny that that works out well for them. On a related note, we need to come up with a better way to do CJK\/arabic CJK. Returning keycodes doesn't cut it with most custom keyboards on Android anymore. Should open a separate issue for that.\n","support system fonts: vote +1, since this could reduce the size of apk and\nmake development easier ...\n\n2014-05-29 20:29 GMT+08:00 Mario Zechner notifications@github.com:\n\n> For reference, here's what Cocos2D-X does\n> http:\/\/www.cocos2d-x.org\/wiki\/Text_Labels\n> \n> Funny that that works out well for them. On a related note, we need to\n> come up with a better way to do CJK\/arabic CJK. Returning keycodes doesn't\n> cut it with most custom keyboards on Android anymore. Should open a\n> separate issue for that.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/libgdx\/libgdx\/issues\/1589#issuecomment-44526350.\n","I did some work using harfbuzz to support Indic and Arabic languages in Bitmap fonts in libgdx. This worked for Desktop and for Android. Not sure about IOS.\n1. BitmapFontCache had to be modified - there is not a 1-1 mapping between chars and glyphs.\n2. the charsequence is first converted into a glyphsequence, then the glyphs are shaped (reordered according to language specific rules), then rendered - this is done in a JNI call.\n3. harfbuzz + freetype library needs to be added.\n4. textwrapping was an issue.\n","Where system fonts are concerned, Java AWT's TextLayout classes can be used to render just about any language and styles, inclusing full RTL Arabic. I successfully used this to support Arabic text in our product based on MT4j. We only need it to run on desktop (win\/mac), so I can't say if it'll work on mobile devices. The implementation generates one texture for every string requested on the fly, so it's not efficient in the least, but it does work splendidly. Maybe this is another point of inspiration.\n\n@sridharsundaram I'd be very interested to learn about the changes you had to make in libgdx to support Arabic. Is there any way you can share that?\n","If you want to use AWT for desktop-only font layout, you might see libgdx's UnicodeFont:\nhttps:\/\/github.com\/libgdx\/libgdx\/blob\/master\/extensions\/gdx-tools\/src\/com\/badlogic\/gdx\/tools\/hiero\/unicodefont\/UnicodeFont.java\nIt renders glyphs to an atlas texture as needed and renders strings glyph by glyph. It doesn't cache strings. It doesn't do RTL. Hiero makes for a nice demo:\nhttps:\/\/github.com\/libgdx\/libgdx\/wiki\/Hiero\n","I had to modify BitmapFontCache in addToCache\n\n....\n    if (isComplexScriptLayoutEnabled()) {\n      List<Glyph> glyphs = getGlyphsAfterShaping(str, start, end, data);\n      requireGlyphSequence(glyphs);\n      for (Glyph g: glyphs) {\n        addGlyph(g, x + g.xoffset \\* scaleX,\n            y + g.yoffset \\* scaleY,\n            g.width \\* scaleX,\n            g.height \\* scaleY);\n        x += g.xadvance \\* scaleX;\n      }\n      return x - startX;\n    }\n....\n\n  \/\/ Here we make a JNI call to get the complex script shaping done\n  private List<Glyph> getGlyphsAfterShaping(CharSequence str, int start,\n      int end, BitmapFontData data) {\n    List<Glyph> glyphs = new ArrayList<Glyph>();\n    int[] glyphIndices = complexScriptLayout.getGlyphsAfterShaping(str,\nstart, end);\n    for (int glyphIndex: glyphIndices) {\n      Glyph glyph = data.getGlyph((char) glyphIndex);\n      if (glyph != null) {\n        glyphs.add(glyph);\n      }\n    }\n    return glyphs;\n\n##   }\n\ncomplexScriptLayout is a JNI based class which simply calls into Harfbuzz\nto reorder the glyphs.\nI can send more details if there is interest.\n\nEntire strings are processed at a time because the glyphs need to get\nreordered and multiple\nglyphs are composed to render a single screen character.\n\nOn Sun, Dec 7, 2014 at 1:12 AM, Bastiaan de Jong notifications@github.com\nwrote:\n\n> Where system fonts are concerned, Java AWT's TextLayout classes can be\n> used to render just about any language and styles, inclusing full RTL\n> Arabic. I successfully implemented this to support Arabic text in our\n> product based on MT4j. We only need it to run on desktop (win\/mac), so I\n> can't say if it'll work on mobile devices. The implementation generates one\n> texture for every string requested on the fly, so it's not efficient in the\n> least, but it does work splendidly. Maybe this is another point of\n> inspiration.\n> \n> @sridharsundaram https:\/\/github.com\/sridharsundaram I'd be very\n> interested to learn about the changes you had to make in libgdx to support\n> Arabic. Is there any way you can share that?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/libgdx\/libgdx\/issues\/1589#issuecomment-65910840.\n","+1 to using system font\nI am developing an app in Chinese and it is very painful to handle chinese input and cross platform.\n","+1 to using system font\n","@NathanSweet I edited Hiero to handle RTL. Details here. Tested only Arabic though. http:\/\/www.badlogicgames.com\/forum\/viewtopic.php?f=15&t=18592\n\nBut it seems that success does not extend to the core libraries because my test still renders LTR even on desktop.\n","@sridharsundaram I will be interested in how you implemented that. Also does if work for the other platforms?\n","Hi All,\n\nJust wondering what progress has been made on using System Font and how I can contribute to this. Any pointer to where to start would be great.\n\nRegards.\n","I had to modify BitmapFontCache in addToCache\n\n....\n    if (isComplexScriptLayoutEnabled()) {\n      List<Glyph> glyphs = getGlyphsAfterShaping(str, start, end, data);\n      requireGlyphSequence(glyphs);\n      for (Glyph g: glyphs) {\n        addGlyph(g, x + g.xoffset \\* scaleX,\n            y + g.yoffset \\* scaleY,\n            g.width \\* scaleX,\n            g.height \\* scaleY);\n        x += g.xadvance \\* scaleX;\n      }\n      return x - startX;\n    }\n....\n\n  \/\/ Here we make a JNI call to get the complex script shaping done\n  private List<Glyph> getGlyphsAfterShaping(CharSequence str, int start,\n      int end, BitmapFontData data) {\n    List<Glyph> glyphs = new ArrayList<Glyph>();\n    int[] glyphIndices = complexScriptLayout.getGlyphsAfterShaping(str,\nstart, end);\n    for (int glyphIndex: glyphIndices) {\n      Glyph glyph = data.getGlyph((char) glyphIndex);\n      if (glyph != null) {\n        glyphs.add(glyph);\n      }\n    }\n    return glyphs;\n\n##   }\n\ncomplexScriptLayout is a JNI based class which simply calls into Harfbuzz\nto reorder the glyphs.\nI can send more details if there is interest.\n\nEntire strings are processed at a time because the glyphs need to get\nreordered and multiple\nglyphs are composed to render a single screen character.\n\nOn Mon, Mar 9, 2015 at 3:42 PM, abdlquadri notifications@github.com wrote:\n\n> @sridharsundaram https:\/\/github.com\/sridharsundaram I will be\n> interested in how you implemented that. Also does if work for the other\n> platforms?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https:\/\/github.com\/libgdx\/libgdx\/issues\/1589#issuecomment-77827922.\n","\"I can send more details if there is interest.\" Please send more detail.\n","@sridharsundaram if you post a project that builds the HarfBuzz JNI stuff with gdx-jnigen, I'd like to take a look.\n","#2955 adds support for shaping characters into glyphs. It sets the stage to use HarfBuzz. Once merged I have code ready which enables FreeTypeFontData to render glyphs on the fly:\n\n![](http:\/\/i.imgur.com\/tR9amku.png)\n\nThe red boxes are the backing textures, so the font has 4 pages of glyphs. The page size was made very small on purpose for testing.\n\nPacking glyphs on the fly isn't super efficient with PixmapPacker's tree packing, since they aren't sorted. Might be better to use line by line packing, maybe using the max glyph height.\n","Is this problem solved? any clear solution or any package to have the completed methods for writing with complex script languages?","Not as far as I know. libgdx has on the fly glyph rendering, so Latin, Cyrillic, CJK, and similar languages are supported. RTL languages would need something like Harfbuzz for their complex layout.","RTL languages like Arabic not just direction from RIGHT to LEFT, but how connect their letters with each other and some letters as a block with 2 or more letters.\r\nSo, I do it with fully supporting RTL language. \r\nhttps:\/\/github.com\/CrowniAPIs\/libGDX-RTL-Language","Even in October 2019, the problem is not solved.\r\nI still don't see the combination characters I'm typing when I type them, and I can't solve the problem that only appears when the combination characters are completed."],"labels":["enhancement","fonts"]}]